
main107.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 95 c2 01 00 d5 c2 01 00 d5 c2 01 00     ... ............
      10:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 00 00 00 00     ................
	...
      2c:	d5 c2 01 00 d5 c2 01 00 00 00 00 00 d5 c2 01 00     ................
      3c:	e9 7a 00 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     .z..............
      4c:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      5c:	d5 c2 01 00 d5 c2 01 00 59 d8 00 00 d5 c2 01 00     ........Y.......
      6c:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      7c:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      8c:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      9c:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      ac:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      bc:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      cc:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
      dc:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
	...
     108:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
     118:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
     128:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
     138:	d5 c2 01 00 d5 c2 01 00 d5 c2 01 00 d5 c2 01 00     ................
     148:	d5 c2 01 00 d5 c2 01 00 00 00 00 00 00 00 00 00     ................
	...
     1e0:	5f f8 e0 f1 d8 3b 02 00 00 00 00 20 34 00 00 20     _....;..... 4.. 
     1f0:	48 05 00 20 80 06 00 20                             H.. ... 

000001f8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
     1f8:	b480      	push	{r7}
     1fa:	b083      	sub	sp, #12
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
     200:	4a05      	ldr	r2, [pc, #20]	(218 <NVIC_PriorityGroupConfig+0x20>)
     202:	687b      	ldr	r3, [r7, #4]
     204:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
     208:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     20c:	60d3      	str	r3, [r2, #12]
}
     20e:	f107 070c 	add.w	r7, r7, #12	; 0xc
     212:	46bd      	mov	sp, r7
     214:	bc80      	pop	{r7}
     216:	4770      	bx	lr
     218:	e000ed00 	.word	0xe000ed00

0000021c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     21c:	b480      	push	{r7}
     21e:	b087      	sub	sp, #28
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
     224:	f04f 0300 	mov.w	r3, #0	; 0x0
     228:	60fb      	str	r3, [r7, #12]
     22a:	f04f 0300 	mov.w	r3, #0	; 0x0
     22e:	613b      	str	r3, [r7, #16]
     230:	f04f 030f 	mov.w	r3, #15	; 0xf
     234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     236:	687b      	ldr	r3, [r7, #4]
     238:	78db      	ldrb	r3, [r3, #3]
     23a:	2b00      	cmp	r3, #0
     23c:	d041      	beq.n	2c2 <NVIC_Init+0xa6>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
     23e:	4b2d      	ldr	r3, [pc, #180]	(2f4 <NVIC_Init+0xd8>)
     240:	68db      	ldr	r3, [r3, #12]
     242:	ea6f 0303 	mvn.w	r3, r3
     246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     24a:	ea4f 2313 	mov.w	r3, r3, lsr #8
     24e:	60fb      	str	r3, [r7, #12]
    tmppre = (0x4 - tmppriority);
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f1c3 0304 	rsb	r3, r3, #4	; 0x4
     256:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	697b      	ldr	r3, [r7, #20]
     25c:	fa23 f302 	lsr.w	r3, r3, r2
     260:	617b      	str	r3, [r7, #20]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     262:	687b      	ldr	r3, [r7, #4]
     264:	785b      	ldrb	r3, [r3, #1]
     266:	461a      	mov	r2, r3
     268:	693b      	ldr	r3, [r7, #16]
     26a:	fa02 f303 	lsl.w	r3, r2, r3
     26e:	60fb      	str	r3, [r7, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     270:	687b      	ldr	r3, [r7, #4]
     272:	789b      	ldrb	r3, [r3, #2]
     274:	461a      	mov	r2, r3
     276:	697b      	ldr	r3, [r7, #20]
     278:	ea02 0203 	and.w	r2, r2, r3
     27c:	68fb      	ldr	r3, [r7, #12]
     27e:	ea43 0302 	orr.w	r3, r3, r2
     282:	60fb      	str	r3, [r7, #12]
    tmppriority = tmppriority << 0x04;
     284:	68fb      	ldr	r3, [r7, #12]
     286:	ea4f 1303 	mov.w	r3, r3, lsl #4
     28a:	60fb      	str	r3, [r7, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     28c:	491a      	ldr	r1, [pc, #104]	(2f8 <NVIC_Init+0xdc>)
     28e:	687b      	ldr	r3, [r7, #4]
     290:	781b      	ldrb	r3, [r3, #0]
     292:	461a      	mov	r2, r3
     294:	68fb      	ldr	r3, [r7, #12]
     296:	b2db      	uxtb	r3, r3
     298:	440a      	add	r2, r1
     29a:	f882 3300 	strb.w	r3, [r2, #768]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     29e:	4816      	ldr	r0, [pc, #88]	(2f8 <NVIC_Init+0xdc>)
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2a8:	b2db      	uxtb	r3, r3
     2aa:	4619      	mov	r1, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2b4:	f04f 0301 	mov.w	r3, #1	; 0x1
     2b8:	fa03 f302 	lsl.w	r3, r3, r2
     2bc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     2c0:	e012      	b.n	2e8 <NVIC_Init+0xcc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     2c2:	480d      	ldr	r0, [pc, #52]	(2f8 <NVIC_Init+0xdc>)
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2cc:	b2db      	uxtb	r3, r3
     2ce:	4619      	mov	r1, r3
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2d8:	f04f 0301 	mov.w	r3, #1	; 0x1
     2dc:	fa03 f202 	lsl.w	r2, r3, r2
     2e0:	f101 0320 	add.w	r3, r1, #32	; 0x20
     2e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     2e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     2ec:	46bd      	mov	sp, r7
     2ee:	bc80      	pop	{r7}
     2f0:	4770      	bx	lr
     2f2:	46c0      	nop			(mov r8, r8)
     2f4:	e000ed00 	.word	0xe000ed00
     2f8:	e000e100 	.word	0xe000e100

000002fc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
     306:	4907      	ldr	r1, [pc, #28]	(324 <NVIC_SetVectorTable+0x28>)
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     30e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     312:	687a      	ldr	r2, [r7, #4]
     314:	ea43 0302 	orr.w	r3, r3, r2
     318:	608b      	str	r3, [r1, #8]
}
     31a:	f107 070c 	add.w	r7, r7, #12	; 0xc
     31e:	46bd      	mov	sp, r7
     320:	bc80      	pop	{r7}
     322:	4770      	bx	lr
     324:	e000ed00 	.word	0xe000ed00

00000328 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
     328:	b480      	push	{r7}
     32a:	b083      	sub	sp, #12
     32c:	af00      	add	r7, sp, #0
     32e:	4603      	mov	r3, r0
     330:	460a      	mov	r2, r1
     332:	71fb      	strb	r3, [r7, #7]
     334:	4613      	mov	r3, r2
     336:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
     338:	79bb      	ldrb	r3, [r7, #6]
     33a:	2b00      	cmp	r3, #0
     33c:	d007      	beq.n	34e <NVIC_SystemLPConfig+0x26>
  {
    SCB->SCR |= LowPowerMode;
     33e:	490b      	ldr	r1, [pc, #44]	(36c <NVIC_SystemLPConfig+0x44>)
     340:	4b0a      	ldr	r3, [pc, #40]	(36c <NVIC_SystemLPConfig+0x44>)
     342:	691a      	ldr	r2, [r3, #16]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	ea42 0303 	orr.w	r3, r2, r3
     34a:	610b      	str	r3, [r1, #16]
     34c:	e008      	b.n	360 <NVIC_SystemLPConfig+0x38>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
     34e:	4907      	ldr	r1, [pc, #28]	(36c <NVIC_SystemLPConfig+0x44>)
     350:	4b06      	ldr	r3, [pc, #24]	(36c <NVIC_SystemLPConfig+0x44>)
     352:	691a      	ldr	r2, [r3, #16]
     354:	79fb      	ldrb	r3, [r7, #7]
     356:	ea6f 0303 	mvn.w	r3, r3
     35a:	ea02 0303 	and.w	r3, r2, r3
     35e:	610b      	str	r3, [r1, #16]
  }
}
     360:	f107 070c 	add.w	r7, r7, #12	; 0xc
     364:	46bd      	mov	sp, r7
     366:	bc80      	pop	{r7}
     368:	4770      	bx	lr
     36a:	46c0      	nop			(mov r8, r8)
     36c:	e000ed00 	.word	0xe000ed00

00000370 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
     370:	b480      	push	{r7}
     372:	b083      	sub	sp, #12
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
     378:	687b      	ldr	r3, [r7, #4]
     37a:	2b04      	cmp	r3, #4
     37c:	d106      	bne.n	38c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
     37e:	4a09      	ldr	r2, [pc, #36]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     380:	4b08      	ldr	r3, [pc, #32]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f043 0304 	orr.w	r3, r3, #4	; 0x4
     388:	6013      	str	r3, [r2, #0]
     38a:	e005      	b.n	398 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
     38c:	4a05      	ldr	r2, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     38e:	4b05      	ldr	r3, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	f023 0304 	bic.w	r3, r3, #4	; 0x4
     396:	6013      	str	r3, [r2, #0]
  }
}
     398:	f107 070c 	add.w	r7, r7, #12	; 0xc
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	46c0      	nop			(mov r8, r8)
     3a4:	e000e010 	.word	0xe000e010

000003a8 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
     3b0:	687a      	ldr	r2, [r7, #4]
     3b2:	4b1a      	ldr	r3, [pc, #104]	(41c <ADC_DeInit+0x74>)
     3b4:	429a      	cmp	r2, r3
     3b6:	d10c      	bne.n	3d2 <ADC_DeInit+0x2a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
     3b8:	f44f 7000 	mov.w	r0, #512	; 0x200
     3bc:	f04f 0101 	mov.w	r1, #1	; 0x1
     3c0:	f002 f8a8 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
     3c4:	f44f 7000 	mov.w	r0, #512	; 0x200
     3c8:	f04f 0100 	mov.w	r1, #0	; 0x0
     3cc:	f002 f8a2 	bl	2514 <RCC_APB2PeriphResetCmd>
     3d0:	e020      	b.n	414 <ADC_DeInit+0x6c>
  }
  else if (ADCx == ADC2)
     3d2:	687a      	ldr	r2, [r7, #4]
     3d4:	4b12      	ldr	r3, [pc, #72]	(420 <ADC_DeInit+0x78>)
     3d6:	429a      	cmp	r2, r3
     3d8:	d10c      	bne.n	3f4 <ADC_DeInit+0x4c>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
     3da:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3de:	f04f 0101 	mov.w	r1, #1	; 0x1
     3e2:	f002 f897 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
     3e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3ea:	f04f 0100 	mov.w	r1, #0	; 0x0
     3ee:	f002 f891 	bl	2514 <RCC_APB2PeriphResetCmd>
     3f2:	e00f      	b.n	414 <ADC_DeInit+0x6c>
  }
  else
  {
    if (ADCx == ADC3)
     3f4:	687a      	ldr	r2, [r7, #4]
     3f6:	4b0b      	ldr	r3, [pc, #44]	(424 <ADC_DeInit+0x7c>)
     3f8:	429a      	cmp	r2, r3
     3fa:	d10b      	bne.n	414 <ADC_DeInit+0x6c>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
     3fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     400:	f04f 0101 	mov.w	r1, #1	; 0x1
     404:	f002 f886 	bl	2514 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
     408:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     40c:	f04f 0100 	mov.w	r1, #0	; 0x0
     410:	f002 f880 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
     414:	f107 0708 	add.w	r7, r7, #8	; 0x8
     418:	46bd      	mov	sp, r7
     41a:	bd80      	pop	{r7, pc}
     41c:	40012400 	.word	0x40012400
     420:	40012800 	.word	0x40012800
     424:	40013c00 	.word	0x40013c00

00000428 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *   the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
     432:	f04f 0300 	mov.w	r3, #0	; 0x0
     436:	60bb      	str	r3, [r7, #8]
  uint8_t tmpreg2 = 0;
     438:	f04f 0300 	mov.w	r3, #0	; 0x0
     43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
     43e:	687b      	ldr	r3, [r7, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	60bb      	str	r3, [r7, #8]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
     444:	68bb      	ldr	r3, [r7, #8]
     446:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     44a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     44e:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     450:	683b      	ldr	r3, [r7, #0]
     452:	681a      	ldr	r2, [r3, #0]
     454:	683b      	ldr	r3, [r7, #0]
     456:	791b      	ldrb	r3, [r3, #4]
     458:	ea4f 2303 	mov.w	r3, r3, lsl #8
     45c:	ea42 0203 	orr.w	r2, r2, r3
     460:	68bb      	ldr	r3, [r7, #8]
     462:	ea43 0302 	orr.w	r3, r3, r2
     466:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
     468:	687a      	ldr	r2, [r7, #4]
     46a:	68bb      	ldr	r3, [r7, #8]
     46c:	6053      	str	r3, [r2, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	689b      	ldr	r3, [r3, #8]
     472:	60bb      	str	r3, [r7, #8]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
     474:	68ba      	ldr	r2, [r7, #8]
     476:	4b1b      	ldr	r3, [pc, #108]	(4e4 <ADC_Init+0xbc>)
     478:	ea02 0303 	and.w	r3, r2, r3
     47c:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     47e:	683b      	ldr	r3, [r7, #0]
     480:	68da      	ldr	r2, [r3, #12]
     482:	683b      	ldr	r3, [r7, #0]
     484:	689b      	ldr	r3, [r3, #8]
     486:	ea42 0203 	orr.w	r2, r2, r3
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	795b      	ldrb	r3, [r3, #5]
     48e:	ea4f 0343 	mov.w	r3, r3, lsl #1
     492:	ea42 0203 	orr.w	r2, r2, r3
     496:	68bb      	ldr	r3, [r7, #8]
     498:	ea43 0302 	orr.w	r3, r3, r2
     49c:	60bb      	str	r3, [r7, #8]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
     49e:	687a      	ldr	r2, [r7, #4]
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	6adb      	ldr	r3, [r3, #44]
     4a8:	60bb      	str	r3, [r7, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
     4aa:	68bb      	ldr	r3, [r7, #8]
     4ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
     4b0:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	7c1b      	ldrb	r3, [r3, #16]
     4b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     4ba:	b2da      	uxtb	r2, r3
     4bc:	7bfb      	ldrb	r3, [r7, #15]
     4be:	ea42 0303 	orr.w	r3, r2, r3
     4c2:	73fb      	strb	r3, [r7, #15]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
     4c4:	7bfb      	ldrb	r3, [r7, #15]
     4c6:	ea4f 5203 	mov.w	r2, r3, lsl #20
     4ca:	68bb      	ldr	r3, [r7, #8]
     4cc:	ea43 0302 	orr.w	r3, r3, r2
     4d0:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	68bb      	ldr	r3, [r7, #8]
     4d6:	62d3      	str	r3, [r2, #44]
}
     4d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
     4dc:	46bd      	mov	sp, r7
     4de:	bc80      	pop	{r7}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			(mov r8, r8)
     4e4:	fff1f7fd 	.word	0xfff1f7fd

000004e8 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     4f6:	6013      	str	r3, [r2, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
     4fe:	7113      	strb	r3, [r2, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
     500:	687a      	ldr	r2, [r7, #4]
     502:	f04f 0300 	mov.w	r3, #0	; 0x0
     506:	7153      	strb	r3, [r2, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
     508:	687a      	ldr	r2, [r7, #4]
     50a:	f04f 0300 	mov.w	r3, #0	; 0x0
     50e:	6093      	str	r3, [r2, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
     510:	687a      	ldr	r2, [r7, #4]
     512:	f04f 0300 	mov.w	r3, #0	; 0x0
     516:	60d3      	str	r3, [r2, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
     518:	687a      	ldr	r2, [r7, #4]
     51a:	f04f 0301 	mov.w	r3, #1	; 0x1
     51e:	7413      	strb	r3, [r2, #16]
}
     520:	f107 070c 	add.w	r7, r7, #12	; 0xc
     524:	46bd      	mov	sp, r7
     526:	bc80      	pop	{r7}
     528:	4770      	bx	lr
     52a:	46c0      	nop			(mov r8, r8)

0000052c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
     534:	460b      	mov	r3, r1
     536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     538:	78fb      	ldrb	r3, [r7, #3]
     53a:	2b00      	cmp	r3, #0
     53c:	d006      	beq.n	54c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	689b      	ldr	r3, [r3, #8]
     542:	f043 0201 	orr.w	r2, r3, #1	; 0x1
     546:	687b      	ldr	r3, [r7, #4]
     548:	609a      	str	r2, [r3, #8]
     54a:	e005      	b.n	558 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     554:	687b      	ldr	r3, [r7, #4]
     556:	609a      	str	r2, [r3, #8]
  }
}
     558:	f107 070c 	add.w	r7, r7, #12	; 0xc
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	46c0      	nop			(mov r8, r8)

00000564 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	460b      	mov	r3, r1
     56e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     570:	78fb      	ldrb	r3, [r7, #3]
     572:	2b00      	cmp	r3, #0
     574:	d006      	beq.n	584 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
     576:	687b      	ldr	r3, [r7, #4]
     578:	689b      	ldr	r3, [r3, #8]
     57a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     57e:	687b      	ldr	r3, [r7, #4]
     580:	609a      	str	r2, [r3, #8]
     582:	e005      	b.n	590 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
     584:	687b      	ldr	r3, [r7, #4]
     586:	689b      	ldr	r3, [r3, #8]
     588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	609a      	str	r2, [r3, #8]
  }
}
     590:	f107 070c 	add.w	r7, r7, #12	; 0xc
     594:	46bd      	mov	sp, r7
     596:	bc80      	pop	{r7}
     598:	4770      	bx	lr
     59a:	46c0      	nop			(mov r8, r8)

0000059c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
     59c:	b480      	push	{r7}
     59e:	b085      	sub	sp, #20
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
     5a4:	460b      	mov	r3, r1
     5a6:	807b      	strh	r3, [r7, #2]
     5a8:	4613      	mov	r3, r2
     5aa:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
     5ac:	f04f 0300 	mov.w	r3, #0	; 0x0
     5b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
     5b2:	887b      	ldrh	r3, [r7, #2]
     5b4:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
     5b6:	787b      	ldrb	r3, [r7, #1]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d007      	beq.n	5cc <ADC_ITConfig+0x30>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	7bfb      	ldrb	r3, [r7, #15]
     5c2:	ea42 0203 	orr.w	r2, r2, r3
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	e008      	b.n	5de <ADC_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	685a      	ldr	r2, [r3, #4]
     5d0:	7bfb      	ldrb	r3, [r7, #15]
     5d2:	ea6f 0303 	mvn.w	r3, r3
     5d6:	ea02 0203 	and.w	r2, r2, r3
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	605a      	str	r2, [r3, #4]
  }
}
     5de:	f107 0714 	add.w	r7, r7, #20	; 0x14
     5e2:	46bd      	mov	sp, r7
     5e4:	bc80      	pop	{r7}
     5e6:	4770      	bx	lr

000005e8 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	689b      	ldr	r3, [r3, #8]
     5f4:	f043 0208 	orr.w	r2, r3, #8	; 0x8
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	609a      	str	r2, [r3, #8]
}
     5fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
     600:	46bd      	mov	sp, r7
     602:	bc80      	pop	{r7}
     604:	4770      	bx	lr
     606:	46c0      	nop			(mov r8, r8)

00000608 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
     608:	b480      	push	{r7}
     60a:	b085      	sub	sp, #20
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     610:	f04f 0300 	mov.w	r3, #0	; 0x0
     614:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
     616:	687b      	ldr	r3, [r7, #4]
     618:	689b      	ldr	r3, [r3, #8]
     61a:	f003 0308 	and.w	r3, r3, #8	; 0x8
     61e:	2b00      	cmp	r3, #0
     620:	d003      	beq.n	62a <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
     622:	f04f 0301 	mov.w	r3, #1	; 0x1
     626:	73fb      	strb	r3, [r7, #15]
     628:	e002      	b.n	630 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
     62a:	f04f 0300 	mov.w	r3, #0	; 0x0
     62e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
     630:	7bfb      	ldrb	r3, [r7, #15]
}
     632:	4618      	mov	r0, r3
     634:	f107 0714 	add.w	r7, r7, #20	; 0x14
     638:	46bd      	mov	sp, r7
     63a:	bc80      	pop	{r7}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			(mov r8, r8)

00000640 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	689b      	ldr	r3, [r3, #8]
     64c:	f043 0204 	orr.w	r2, r3, #4	; 0x4
     650:	687b      	ldr	r3, [r7, #4]
     652:	609a      	str	r2, [r3, #8]
}
     654:	f107 070c 	add.w	r7, r7, #12	; 0xc
     658:	46bd      	mov	sp, r7
     65a:	bc80      	pop	{r7}
     65c:	4770      	bx	lr
     65e:	46c0      	nop			(mov r8, r8)

00000660 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
     660:	b480      	push	{r7}
     662:	b085      	sub	sp, #20
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     668:	f04f 0300 	mov.w	r3, #0	; 0x0
     66c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
     66e:	687b      	ldr	r3, [r7, #4]
     670:	689b      	ldr	r3, [r3, #8]
     672:	f003 0304 	and.w	r3, r3, #4	; 0x4
     676:	2b00      	cmp	r3, #0
     678:	d003      	beq.n	682 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
     67a:	f04f 0301 	mov.w	r3, #1	; 0x1
     67e:	73fb      	strb	r3, [r7, #15]
     680:	e002      	b.n	688 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
     682:	f04f 0300 	mov.w	r3, #0	; 0x0
     686:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
     688:	7bfb      	ldrb	r3, [r7, #15]
}
     68a:	4618      	mov	r0, r3
     68c:	f107 0714 	add.w	r7, r7, #20	; 0x14
     690:	46bd      	mov	sp, r7
     692:	bc80      	pop	{r7}
     694:	4770      	bx	lr
     696:	46c0      	nop			(mov r8, r8)

00000698 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	460b      	mov	r3, r1
     6a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     6a4:	78fb      	ldrb	r3, [r7, #3]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d006      	beq.n	6b8 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	689b      	ldr	r3, [r3, #8]
     6ae:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	609a      	str	r2, [r3, #8]
     6b6:	e005      	b.n	6c4 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	689b      	ldr	r3, [r3, #8]
     6bc:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	609a      	str	r2, [r3, #8]
  }
}
     6c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
     6c8:	46bd      	mov	sp, r7
     6ca:	bc80      	pop	{r7}
     6cc:	4770      	bx	lr
     6ce:	46c0      	nop			(mov r8, r8)

000006d0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
     6d0:	b480      	push	{r7}
     6d2:	b085      	sub	sp, #20
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     6d8:	f04f 0300 	mov.w	r3, #0	; 0x0
     6dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	689b      	ldr	r3, [r3, #8]
     6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     6e6:	2b00      	cmp	r3, #0
     6e8:	d003      	beq.n	6f2 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
     6ea:	f04f 0301 	mov.w	r3, #1	; 0x1
     6ee:	73fb      	strb	r3, [r7, #15]
     6f0:	e002      	b.n	6f8 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
     6f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     6f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
     6f8:	7bfb      	ldrb	r3, [r7, #15]
}
     6fa:	4618      	mov	r0, r3
     6fc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     700:	46bd      	mov	sp, r7
     702:	bc80      	pop	{r7}
     704:	4770      	bx	lr
     706:	46c0      	nop			(mov r8, r8)

00000708 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *   count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
     708:	b480      	push	{r7}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	460b      	mov	r3, r1
     712:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     714:	f04f 0300 	mov.w	r3, #0	; 0x0
     718:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     71a:	f04f 0300 	mov.w	r3, #0	; 0x0
     71e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
     720:	687b      	ldr	r3, [r7, #4]
     722:	685b      	ldr	r3, [r3, #4]
     724:	60bb      	str	r3, [r7, #8]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
     726:	68bb      	ldr	r3, [r7, #8]
     728:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
     72c:	60bb      	str	r3, [r7, #8]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
     72e:	78fb      	ldrb	r3, [r7, #3]
     730:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     734:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 13;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	ea4f 3243 	mov.w	r2, r3, lsl #13
     73c:	68bb      	ldr	r3, [r7, #8]
     73e:	ea43 0302 	orr.w	r3, r3, r2
     742:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
     744:	687a      	ldr	r2, [r7, #4]
     746:	68bb      	ldr	r3, [r7, #8]
     748:	6053      	str	r3, [r2, #4]
}
     74a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     74e:	46bd      	mov	sp, r7
     750:	bc80      	pop	{r7}
     752:	4770      	bx	lr

00000754 <ADC_DiscModeCmd>:
  *   on regular group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     754:	b480      	push	{r7}
     756:	b083      	sub	sp, #12
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]
     75c:	460b      	mov	r3, r1
     75e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     760:	78fb      	ldrb	r3, [r7, #3]
     762:	2b00      	cmp	r3, #0
     764:	d006      	beq.n	774 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
     766:	687b      	ldr	r3, [r7, #4]
     768:	685b      	ldr	r3, [r3, #4]
     76a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     76e:	687b      	ldr	r3, [r7, #4]
     770:	605a      	str	r2, [r3, #4]
     772:	e005      	b.n	780 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
     774:	687b      	ldr	r3, [r7, #4]
     776:	685b      	ldr	r3, [r3, #4]
     778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	605a      	str	r2, [r3, #4]
  }
}
     780:	f107 070c 	add.w	r7, r7, #12	; 0xc
     784:	46bd      	mov	sp, r7
     786:	bc80      	pop	{r7}
     788:	4770      	bx	lr
     78a:	46c0      	nop			(mov r8, r8)

0000078c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     78c:	b480      	push	{r7}
     78e:	b085      	sub	sp, #20
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	4618      	mov	r0, r3
     796:	460b      	mov	r3, r1
     798:	70fb      	strb	r3, [r7, #3]
     79a:	4613      	mov	r3, r2
     79c:	70bb      	strb	r3, [r7, #2]
     79e:	4603      	mov	r3, r0
     7a0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
     7a2:	f04f 0300 	mov.w	r3, #0	; 0x0
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	f04f 0300 	mov.w	r3, #0	; 0x0
     7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     7ae:	78fb      	ldrb	r3, [r7, #3]
     7b0:	2b09      	cmp	r3, #9
     7b2:	d929      	bls.n	808 <ADC_RegularChannelConfig+0x7c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	68db      	ldr	r3, [r3, #12]
     7b8:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
     7ba:	78fa      	ldrb	r2, [r7, #3]
     7bc:	4613      	mov	r3, r2
     7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7c2:	4413      	add	r3, r2
     7c4:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     7c8:	f04f 0307 	mov.w	r3, #7	; 0x7
     7cc:	fa03 f302 	lsl.w	r3, r3, r2
     7d0:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	ea6f 0203 	mvn.w	r2, r3
     7d8:	68bb      	ldr	r3, [r7, #8]
     7da:	ea03 0302 	and.w	r3, r3, r2
     7de:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     7e0:	7879      	ldrb	r1, [r7, #1]
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	4613      	mov	r3, r2
     7e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7ea:	4413      	add	r3, r2
     7ec:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     7f0:	fa01 f303 	lsl.w	r3, r1, r3
     7f4:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     7f6:	68ba      	ldr	r2, [r7, #8]
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	ea42 0303 	orr.w	r3, r2, r3
     7fe:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     800:	687a      	ldr	r2, [r7, #4]
     802:	68bb      	ldr	r3, [r7, #8]
     804:	60d3      	str	r3, [r2, #12]
     806:	e024      	b.n	852 <ADC_RegularChannelConfig+0xc6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	691b      	ldr	r3, [r3, #16]
     80c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     80e:	78fa      	ldrb	r2, [r7, #3]
     810:	4613      	mov	r3, r2
     812:	ea4f 0343 	mov.w	r3, r3, lsl #1
     816:	441a      	add	r2, r3
     818:	f04f 0307 	mov.w	r3, #7	; 0x7
     81c:	fa03 f302 	lsl.w	r3, r3, r2
     820:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	ea6f 0203 	mvn.w	r2, r3
     828:	68bb      	ldr	r3, [r7, #8]
     82a:	ea03 0302 	and.w	r3, r3, r2
     82e:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     830:	7879      	ldrb	r1, [r7, #1]
     832:	78fa      	ldrb	r2, [r7, #3]
     834:	4613      	mov	r3, r2
     836:	ea4f 0343 	mov.w	r3, r3, lsl #1
     83a:	4413      	add	r3, r2
     83c:	fa01 f303 	lsl.w	r3, r1, r3
     840:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     842:	68ba      	ldr	r2, [r7, #8]
     844:	68fb      	ldr	r3, [r7, #12]
     846:	ea42 0303 	orr.w	r3, r2, r3
     84a:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     84c:	687a      	ldr	r2, [r7, #4]
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6113      	str	r3, [r2, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
     852:	78bb      	ldrb	r3, [r7, #2]
     854:	2b06      	cmp	r3, #6
     856:	d829      	bhi.n	8ac <ADC_RegularChannelConfig+0x120>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	6b5b      	ldr	r3, [r3, #52]
     85c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
     85e:	78bb      	ldrb	r3, [r7, #2]
     860:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     864:	4613      	mov	r3, r2
     866:	ea4f 0383 	mov.w	r3, r3, lsl #2
     86a:	441a      	add	r2, r3
     86c:	f04f 031f 	mov.w	r3, #31	; 0x1f
     870:	fa03 f302 	lsl.w	r3, r3, r2
     874:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     876:	68fb      	ldr	r3, [r7, #12]
     878:	ea6f 0203 	mvn.w	r2, r3
     87c:	68bb      	ldr	r3, [r7, #8]
     87e:	ea03 0302 	and.w	r3, r3, r2
     882:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
     884:	78f9      	ldrb	r1, [r7, #3]
     886:	78bb      	ldrb	r3, [r7, #2]
     888:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     88c:	4613      	mov	r3, r2
     88e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     892:	4413      	add	r3, r2
     894:	fa01 f303 	lsl.w	r3, r1, r3
     898:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     89a:	68ba      	ldr	r2, [r7, #8]
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	ea42 0303 	orr.w	r3, r2, r3
     8a2:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	6353      	str	r3, [r2, #52]
     8aa:	e055      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
     8ac:	78bb      	ldrb	r3, [r7, #2]
     8ae:	2b0c      	cmp	r3, #12
     8b0:	d829      	bhi.n	906 <ADC_RegularChannelConfig+0x17a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	6b1b      	ldr	r3, [r3, #48]
     8b6:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
     8b8:	78ba      	ldrb	r2, [r7, #2]
     8ba:	4613      	mov	r3, r2
     8bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8c0:	4413      	add	r3, r2
     8c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
     8c6:	f04f 031f 	mov.w	r3, #31	; 0x1f
     8ca:	fa03 f302 	lsl.w	r3, r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	ea6f 0203 	mvn.w	r2, r3
     8d6:	68bb      	ldr	r3, [r7, #8]
     8d8:	ea03 0302 	and.w	r3, r3, r2
     8dc:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
     8de:	78f9      	ldrb	r1, [r7, #3]
     8e0:	78ba      	ldrb	r2, [r7, #2]
     8e2:	4613      	mov	r3, r2
     8e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8e8:	4413      	add	r3, r2
     8ea:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
     8ee:	fa01 f303 	lsl.w	r3, r1, r3
     8f2:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	ea42 0303 	orr.w	r3, r2, r3
     8fc:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
     8fe:	687a      	ldr	r2, [r7, #4]
     900:	68bb      	ldr	r3, [r7, #8]
     902:	6313      	str	r3, [r2, #48]
     904:	e028      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
     906:	687b      	ldr	r3, [r7, #4]
     908:	6adb      	ldr	r3, [r3, #44]
     90a:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
     90c:	78ba      	ldrb	r2, [r7, #2]
     90e:	4613      	mov	r3, r2
     910:	ea4f 0383 	mov.w	r3, r3, lsl #2
     914:	4413      	add	r3, r2
     916:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     91a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     91e:	fa03 f302 	lsl.w	r3, r3, r2
     922:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     924:	68fb      	ldr	r3, [r7, #12]
     926:	ea6f 0203 	mvn.w	r2, r3
     92a:	68bb      	ldr	r3, [r7, #8]
     92c:	ea03 0302 	and.w	r3, r3, r2
     930:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
     932:	78f9      	ldrb	r1, [r7, #3]
     934:	78ba      	ldrb	r2, [r7, #2]
     936:	4613      	mov	r3, r2
     938:	ea4f 0383 	mov.w	r3, r3, lsl #2
     93c:	4413      	add	r3, r2
     93e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
     942:	fa01 f303 	lsl.w	r3, r1, r3
     946:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     948:	68ba      	ldr	r2, [r7, #8]
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	ea42 0303 	orr.w	r3, r2, r3
     950:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
     952:	687a      	ldr	r2, [r7, #4]
     954:	68bb      	ldr	r3, [r7, #8]
     956:	62d3      	str	r3, [r2, #44]
  }
}
     958:	f107 0714 	add.w	r7, r7, #20	; 0x14
     95c:	46bd      	mov	sp, r7
     95e:	bc80      	pop	{r7}
     960:	4770      	bx	lr
     962:	46c0      	nop			(mov r8, r8)

00000964 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	460b      	mov	r3, r1
     96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     970:	78fb      	ldrb	r3, [r7, #3]
     972:	2b00      	cmp	r3, #0
     974:	d006      	beq.n	984 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
     976:	687b      	ldr	r3, [r7, #4]
     978:	689b      	ldr	r3, [r3, #8]
     97a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
     97e:	687b      	ldr	r3, [r7, #4]
     980:	609a      	str	r2, [r3, #8]
     982:	e005      	b.n	990 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
     984:	687b      	ldr	r3, [r7, #4]
     986:	689b      	ldr	r3, [r3, #8]
     988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	609a      	str	r2, [r3, #8]
  }
}
     990:	f107 070c 	add.w	r7, r7, #12	; 0xc
     994:	46bd      	mov	sp, r7
     996:	bc80      	pop	{r7}
     998:	4770      	bx	lr
     99a:	46c0      	nop			(mov r8, r8)

0000099c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
     99c:	b480      	push	{r7}
     99e:	b083      	sub	sp, #12
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	6cdb      	ldr	r3, [r3, #76]
     9a8:	b29b      	uxth	r3, r3
}
     9aa:	4618      	mov	r0, r3
     9ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9b0:	46bd      	mov	sp, r7
     9b2:	bc80      	pop	{r7}
     9b4:	4770      	bx	lr
     9b6:	46c0      	nop			(mov r8, r8)

000009b8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
     9b8:	b480      	push	{r7}
     9ba:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
     9bc:	4b02      	ldr	r3, [pc, #8]	(9c8 <ADC_GetDualModeConversionValue+0x10>)
     9be:	681b      	ldr	r3, [r3, #0]
}
     9c0:	4618      	mov	r0, r3
     9c2:	46bd      	mov	sp, r7
     9c4:	bc80      	pop	{r7}
     9c6:	4770      	bx	lr
     9c8:	4001244c 	.word	0x4001244c

000009cc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     9cc:	b480      	push	{r7}
     9ce:	b083      	sub	sp, #12
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	460b      	mov	r3, r1
     9d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     9d8:	78fb      	ldrb	r3, [r7, #3]
     9da:	2b00      	cmp	r3, #0
     9dc:	d006      	beq.n	9ec <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	605a      	str	r2, [r3, #4]
     9ea:	e005      	b.n	9f8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	685b      	ldr	r3, [r3, #4]
     9f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	605a      	str	r2, [r3, #4]
  }
}
     9f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9fc:	46bd      	mov	sp, r7
     9fe:	bc80      	pop	{r7}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			(mov r8, r8)

00000a04 <ADC_InjectedDiscModeCmd>:
  *   on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a04:	b480      	push	{r7}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	460b      	mov	r3, r1
     a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a10:	78fb      	ldrb	r3, [r7, #3]
     a12:	2b00      	cmp	r3, #0
     a14:	d006      	beq.n	a24 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	605a      	str	r2, [r3, #4]
     a22:	e005      	b.n	a30 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	605a      	str	r2, [r3, #4]
  }
}
     a30:	f107 070c 	add.w	r7, r7, #12	; 0xc
     a34:	46bd      	mov	sp, r7
     a36:	bc80      	pop	{r7}
     a38:	4770      	bx	lr
     a3a:	46c0      	nop			(mov r8, r8)

00000a3c <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
     a3c:	b480      	push	{r7}
     a3e:	b085      	sub	sp, #20
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     a46:	f04f 0300 	mov.w	r3, #0	; 0x0
     a4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	689b      	ldr	r3, [r3, #8]
     a50:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     a58:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
     a5a:	68fa      	ldr	r2, [r7, #12]
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	ea42 0303 	orr.w	r3, r2, r3
     a62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
     a64:	687a      	ldr	r2, [r7, #4]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	6093      	str	r3, [r2, #8]
}
     a6a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     a6e:	46bd      	mov	sp, r7
     a70:	bc80      	pop	{r7}
     a72:	4770      	bx	lr

00000a74 <ADC_ExternalTrigInjectedConvCmd>:
  *   injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a74:	b480      	push	{r7}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	460b      	mov	r3, r1
     a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a80:	78fb      	ldrb	r3, [r7, #3]
     a82:	2b00      	cmp	r3, #0
     a84:	d006      	beq.n	a94 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	689b      	ldr	r3, [r3, #8]
     a8a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	609a      	str	r2, [r3, #8]
     a92:	e005      	b.n	aa0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	689b      	ldr	r3, [r3, #8]
     a98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	609a      	str	r2, [r3, #8]
  }
}
     aa0:	f107 070c 	add.w	r7, r7, #12	; 0xc
     aa4:	46bd      	mov	sp, r7
     aa6:	bc80      	pop	{r7}
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			(mov r8, r8)

00000aac <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     aac:	b480      	push	{r7}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	460b      	mov	r3, r1
     ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ab8:	78fb      	ldrb	r3, [r7, #3]
     aba:	2b00      	cmp	r3, #0
     abc:	d006      	beq.n	acc <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	689b      	ldr	r3, [r3, #8]
     ac2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	609a      	str	r2, [r3, #8]
     aca:	e005      	b.n	ad8 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	609a      	str	r2, [r3, #8]
  }
}
     ad8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     adc:	46bd      	mov	sp, r7
     ade:	bc80      	pop	{r7}
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			(mov r8, r8)

00000ae4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
     ae4:	b480      	push	{r7}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     aec:	f04f 0300 	mov.w	r3, #0	; 0x0
     af0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	689b      	ldr	r3, [r3, #8]
     af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     afa:	2b00      	cmp	r3, #0
     afc:	d003      	beq.n	b06 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
     afe:	f04f 0301 	mov.w	r3, #1	; 0x1
     b02:	73fb      	strb	r3, [r7, #15]
     b04:	e002      	b.n	b0c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
     b06:	f04f 0300 	mov.w	r3, #0	; 0x0
     b0a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
     b0c:	7bfb      	ldrb	r3, [r7, #15]
}
     b0e:	4618      	mov	r0, r3
     b10:	f107 0714 	add.w	r7, r7, #20	; 0x14
     b14:	46bd      	mov	sp, r7
     b16:	bc80      	pop	{r7}
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			(mov r8, r8)

00000b1c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     b1c:	b480      	push	{r7}
     b1e:	b087      	sub	sp, #28
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	4618      	mov	r0, r3
     b26:	460b      	mov	r3, r1
     b28:	70fb      	strb	r3, [r7, #3]
     b2a:	4613      	mov	r3, r2
     b2c:	70bb      	strb	r3, [r7, #2]
     b2e:	4603      	mov	r3, r0
     b30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
     b32:	f04f 0300 	mov.w	r3, #0	; 0x0
     b36:	60fb      	str	r3, [r7, #12]
     b38:	f04f 0300 	mov.w	r3, #0	; 0x0
     b3c:	613b      	str	r3, [r7, #16]
     b3e:	f04f 0300 	mov.w	r3, #0	; 0x0
     b42:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     b44:	78fb      	ldrb	r3, [r7, #3]
     b46:	2b09      	cmp	r3, #9
     b48:	d929      	bls.n	b9e <ADC_InjectedChannelConfig+0x82>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	68db      	ldr	r3, [r3, #12]
     b4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
     b50:	78fa      	ldrb	r2, [r7, #3]
     b52:	4613      	mov	r3, r2
     b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b58:	4413      	add	r3, r2
     b5a:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     b5e:	f04f 0307 	mov.w	r3, #7	; 0x7
     b62:	fa03 f302 	lsl.w	r3, r3, r2
     b66:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	ea6f 0203 	mvn.w	r2, r3
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	ea03 0302 	and.w	r3, r3, r2
     b74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
     b76:	7879      	ldrb	r1, [r7, #1]
     b78:	78fa      	ldrb	r2, [r7, #3]
     b7a:	4613      	mov	r3, r2
     b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b80:	4413      	add	r3, r2
     b82:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     b86:	fa01 f303 	lsl.w	r3, r1, r3
     b8a:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     b8c:	68fa      	ldr	r2, [r7, #12]
     b8e:	693b      	ldr	r3, [r7, #16]
     b90:	ea42 0303 	orr.w	r3, r2, r3
     b94:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	60d3      	str	r3, [r2, #12]
     b9c:	e024      	b.n	be8 <ADC_InjectedChannelConfig+0xcc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	691b      	ldr	r3, [r3, #16]
     ba2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     ba4:	78fa      	ldrb	r2, [r7, #3]
     ba6:	4613      	mov	r3, r2
     ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bac:	441a      	add	r2, r3
     bae:	f04f 0307 	mov.w	r3, #7	; 0x7
     bb2:	fa03 f302 	lsl.w	r3, r3, r2
     bb6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	ea6f 0203 	mvn.w	r2, r3
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	ea03 0302 	and.w	r3, r3, r2
     bc4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     bc6:	7879      	ldrb	r1, [r7, #1]
     bc8:	78fa      	ldrb	r2, [r7, #3]
     bca:	4613      	mov	r3, r2
     bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bd0:	4413      	add	r3, r2
     bd2:	fa01 f303 	lsl.w	r3, r1, r3
     bd6:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     bd8:	68fa      	ldr	r2, [r7, #12]
     bda:	693b      	ldr	r3, [r7, #16]
     bdc:	ea42 0303 	orr.w	r3, r2, r3
     be0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	6113      	str	r3, [r2, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	6b9b      	ldr	r3, [r3, #56]
     bec:	60fb      	str	r3, [r7, #12]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
     bee:	68fb      	ldr	r3, [r7, #12]
     bf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     bf4:	ea4f 5313 	mov.w	r3, r3, lsr #20
     bf8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     bfa:	697b      	ldr	r3, [r7, #20]
     bfc:	b2db      	uxtb	r3, r3
     bfe:	ea6f 0303 	mvn.w	r3, r3
     c02:	b2da      	uxtb	r2, r3
     c04:	78bb      	ldrb	r3, [r7, #2]
     c06:	4413      	add	r3, r2
     c08:	b2db      	uxtb	r3, r3
     c0a:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c0e:	b2db      	uxtb	r3, r3
     c10:	461a      	mov	r2, r3
     c12:	4613      	mov	r3, r2
     c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c18:	441a      	add	r2, r3
     c1a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     c1e:	fa03 f302 	lsl.w	r3, r3, r2
     c22:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
     c24:	693b      	ldr	r3, [r7, #16]
     c26:	ea6f 0203 	mvn.w	r2, r3
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	ea03 0302 	and.w	r3, r3, r2
     c30:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     c32:	78f9      	ldrb	r1, [r7, #3]
     c34:	697b      	ldr	r3, [r7, #20]
     c36:	b2db      	uxtb	r3, r3
     c38:	ea6f 0303 	mvn.w	r3, r3
     c3c:	b2da      	uxtb	r2, r3
     c3e:	78bb      	ldrb	r3, [r7, #2]
     c40:	4413      	add	r3, r2
     c42:	b2db      	uxtb	r3, r3
     c44:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c48:	b2db      	uxtb	r3, r3
     c4a:	461a      	mov	r2, r3
     c4c:	4613      	mov	r3, r2
     c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c52:	4413      	add	r3, r2
     c54:	fa01 f303 	lsl.w	r3, r1, r3
     c58:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	693b      	ldr	r3, [r7, #16]
     c5e:	ea42 0303 	orr.w	r3, r2, r3
     c62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     c64:	687a      	ldr	r2, [r7, #4]
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	6393      	str	r3, [r2, #56]
}
     c6a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     c6e:	46bd      	mov	sp, r7
     c70:	bc80      	pop	{r7}
     c72:	4770      	bx	lr

00000c74 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
     c74:	b480      	push	{r7}
     c76:	b085      	sub	sp, #20
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	460b      	mov	r3, r1
     c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     c80:	f04f 0300 	mov.w	r3, #0	; 0x0
     c84:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     c86:	f04f 0300 	mov.w	r3, #0	; 0x0
     c8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	6b9b      	ldr	r3, [r3, #56]
     c90:	60bb      	str	r3, [r7, #8]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
     c98:	60bb      	str	r3, [r7, #8]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
     c9a:	78fb      	ldrb	r3, [r7, #3]
     c9c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ca0:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 20;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	ea4f 5203 	mov.w	r2, r3, lsl #20
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	ea43 0302 	orr.w	r3, r3, r2
     cae:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     cb0:	687a      	ldr	r2, [r7, #4]
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	6393      	str	r3, [r2, #56]
}
     cb6:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cba:	46bd      	mov	sp, r7
     cbc:	bc80      	pop	{r7}
     cbe:	4770      	bx	lr

00000cc0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
     cc0:	b480      	push	{r7}
     cc2:	b085      	sub	sp, #20
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	460b      	mov	r3, r1
     cca:	70fb      	strb	r3, [r7, #3]
     ccc:	4613      	mov	r3, r2
     cce:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
     cd0:	f04f 0300 	mov.w	r3, #0	; 0x0
     cd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
     cda:	78fa      	ldrb	r2, [r7, #3]
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	4413      	add	r3, r2
     ce0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	461a      	mov	r2, r3
     ce6:	883b      	ldrh	r3, [r7, #0]
     ce8:	6013      	str	r3, [r2, #0]
}
     cea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cee:	46bd      	mov	sp, r7
     cf0:	bc80      	pop	{r7}
     cf2:	4770      	bx	lr

00000cf4 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
     cf4:	b480      	push	{r7}
     cf6:	b085      	sub	sp, #20
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	460b      	mov	r3, r1
     cfe:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
     d00:	f04f 0300 	mov.w	r3, #0	; 0x0
     d04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
     d0a:	78fa      	ldrb	r2, [r7, #3]
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	4413      	add	r3, r2
     d10:	f103 0328 	add.w	r3, r3, #40	; 0x28
     d14:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	b29b      	uxth	r3, r3
}
     d1c:	4618      	mov	r0, r3
     d1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d22:	46bd      	mov	sp, r7
     d24:	bc80      	pop	{r7}
     d26:	4770      	bx	lr

00000d28 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
     d28:	b480      	push	{r7}
     d2a:	b085      	sub	sp, #20
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
     d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     d32:	f04f 0300 	mov.w	r3, #0	; 0x0
     d36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	685b      	ldr	r3, [r3, #4]
     d3c:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
     d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     d48:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
     d4a:	68fa      	ldr	r2, [r7, #12]
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	ea42 0303 	orr.w	r3, r2, r3
     d52:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     d54:	687a      	ldr	r2, [r7, #4]
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	6053      	str	r3, [r2, #4]
}
     d5a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d5e:	46bd      	mov	sp, r7
     d60:	bc80      	pop	{r7}
     d62:	4770      	bx	lr

00000d64 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     d64:	b480      	push	{r7}
     d66:	b083      	sub	sp, #12
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	460b      	mov	r3, r1
     d6e:	807b      	strh	r3, [r7, #2]
     d70:	4613      	mov	r3, r2
     d72:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
     d74:	887a      	ldrh	r2, [r7, #2]
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	625a      	str	r2, [r3, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
     d7a:	883a      	ldrh	r2, [r7, #0]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	629a      	str	r2, [r3, #40]
}
     d80:	f107 070c 	add.w	r7, r7, #12	; 0xc
     d84:	46bd      	mov	sp, r7
     d86:	bc80      	pop	{r7}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			(mov r8, r8)

00000d8c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
     d8c:	b480      	push	{r7}
     d8e:	b085      	sub	sp, #20
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	460b      	mov	r3, r1
     d96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
     d98:	f04f 0300 	mov.w	r3, #0	; 0x0
     d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
     daa:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
     dac:	78fa      	ldrb	r2, [r7, #3]
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	ea43 0302 	orr.w	r3, r3, r2
     db4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	6053      	str	r3, [r2, #4]
}
     dbc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     dc0:	46bd      	mov	sp, r7
     dc2:	bc80      	pop	{r7}
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			(mov r8, r8)

00000dc8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
     dc8:	b480      	push	{r7}
     dca:	b083      	sub	sp, #12
     dcc:	af00      	add	r7, sp, #0
     dce:	4603      	mov	r3, r0
     dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dd2:	79fb      	ldrb	r3, [r7, #7]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d006      	beq.n	de6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
     dd8:	4a08      	ldr	r2, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dda:	4b08      	ldr	r3, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     ddc:	689b      	ldr	r3, [r3, #8]
     dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     de2:	6093      	str	r3, [r2, #8]
     de4:	e005      	b.n	df2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
     de6:	4a05      	ldr	r2, [pc, #20]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     de8:	4b04      	ldr	r3, [pc, #16]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dea:	689b      	ldr	r3, [r3, #8]
     dec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
     df0:	6093      	str	r3, [r2, #8]
  }
}
     df2:	f107 070c 	add.w	r7, r7, #12	; 0xc
     df6:	46bd      	mov	sp, r7
     df8:	bc80      	pop	{r7}
     dfa:	4770      	bx	lr
     dfc:	40012400 	.word	0x40012400

00000e00 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e00:	b480      	push	{r7}
     e02:	b085      	sub	sp, #20
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
     e08:	460b      	mov	r3, r1
     e0a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
     e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
     e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681a      	ldr	r2, [r3, #0]
     e16:	78fb      	ldrb	r3, [r7, #3]
     e18:	ea02 0303 	and.w	r3, r2, r3
     e1c:	2b00      	cmp	r3, #0
     e1e:	d003      	beq.n	e28 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
     e20:	f04f 0301 	mov.w	r3, #1	; 0x1
     e24:	73fb      	strb	r3, [r7, #15]
     e26:	e002      	b.n	e2e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
     e28:	f04f 0300 	mov.w	r3, #0	; 0x0
     e2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
     e2e:	7bfb      	ldrb	r3, [r7, #15]
}
     e30:	4618      	mov	r0, r3
     e32:	f107 0714 	add.w	r7, r7, #20	; 0x14
     e36:	46bd      	mov	sp, r7
     e38:	bc80      	pop	{r7}
     e3a:	4770      	bx	lr

00000e3c <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e3c:	b480      	push	{r7}
     e3e:	b083      	sub	sp, #12
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
     e44:	460b      	mov	r3, r1
     e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
     e48:	78fb      	ldrb	r3, [r7, #3]
     e4a:	ea6f 0203 	mvn.w	r2, r3
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	601a      	str	r2, [r3, #0]
}
     e52:	f107 070c 	add.w	r7, r7, #12	; 0xc
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr

00000e5c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     e5c:	b480      	push	{r7}
     e5e:	b087      	sub	sp, #28
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	460b      	mov	r3, r1
     e66:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
     e68:	f04f 0300 	mov.w	r3, #0	; 0x0
     e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t itmask = 0, enablestatus = 0;
     e6e:	f04f 0300 	mov.w	r3, #0	; 0x0
     e72:	613b      	str	r3, [r7, #16]
     e74:	f04f 0300 	mov.w	r3, #0	; 0x0
     e78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
     e7a:	887b      	ldrh	r3, [r7, #2]
     e7c:	ea4f 2313 	mov.w	r3, r3, lsr #8
     e80:	b29b      	uxth	r3, r3
     e82:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	685a      	ldr	r2, [r3, #4]
     e88:	887b      	ldrh	r3, [r7, #2]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	ea02 0303 	and.w	r3, r2, r3
     e90:	617b      	str	r3, [r7, #20]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	681a      	ldr	r2, [r3, #0]
     e96:	693b      	ldr	r3, [r7, #16]
     e98:	ea02 0303 	and.w	r3, r2, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	d006      	beq.n	eae <ADC_GetITStatus+0x52>
     ea0:	697b      	ldr	r3, [r7, #20]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d003      	beq.n	eae <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
     ea6:	f04f 0301 	mov.w	r3, #1	; 0x1
     eaa:	73fb      	strb	r3, [r7, #15]
     eac:	e002      	b.n	eb4 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
     eae:	f04f 0300 	mov.w	r3, #0	; 0x0
     eb2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
     eb4:	7bfb      	ldrb	r3, [r7, #15]
}
     eb6:	4618      	mov	r0, r3
     eb8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     ebc:	46bd      	mov	sp, r7
     ebe:	bc80      	pop	{r7}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			(mov r8, r8)

00000ec4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     ec4:	b480      	push	{r7}
     ec6:	b085      	sub	sp, #20
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	460b      	mov	r3, r1
     ece:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
     ed0:	f04f 0300 	mov.w	r3, #0	; 0x0
     ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
     ed6:	887b      	ldrh	r3, [r7, #2]
     ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
     edc:	b29b      	uxth	r3, r3
     ede:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
     ee0:	7bfb      	ldrb	r3, [r7, #15]
     ee2:	ea6f 0203 	mvn.w	r2, r3
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	601a      	str	r2, [r3, #0]
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
     f08:	687a      	ldr	r2, [r7, #4]
     f0a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f0e:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
     f10:	687a      	ldr	r2, [r7, #4]
     f12:	f04f 0300 	mov.w	r3, #0	; 0x0
     f16:	6053      	str	r3, [r2, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
     f18:	687a      	ldr	r2, [r7, #4]
     f1a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f1e:	6093      	str	r3, [r2, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	f04f 0300 	mov.w	r3, #0	; 0x0
     f26:	60d3      	str	r3, [r2, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
     f28:	687a      	ldr	r2, [r7, #4]
     f2a:	4b43      	ldr	r3, [pc, #268]	(1038 <DMA_DeInit+0x144>)
     f2c:	429a      	cmp	r2, r3
     f2e:	d106      	bne.n	f3e <DMA_DeInit+0x4a>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
     f30:	4a42      	ldr	r2, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f32:	4b42      	ldr	r3, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f34:	685b      	ldr	r3, [r3, #4]
     f36:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     f3a:	6053      	str	r3, [r2, #4]
     f3c:	e077      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	4b3f      	ldr	r3, [pc, #252]	(1040 <DMA_DeInit+0x14c>)
     f42:	429a      	cmp	r2, r3
     f44:	d106      	bne.n	f54 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
     f46:	4a3d      	ldr	r2, [pc, #244]	(103c <DMA_DeInit+0x148>)
     f48:	4b3c      	ldr	r3, [pc, #240]	(103c <DMA_DeInit+0x148>)
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     f50:	6053      	str	r3, [r2, #4]
     f52:	e06c      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	4b3b      	ldr	r3, [pc, #236]	(1044 <DMA_DeInit+0x150>)
     f58:	429a      	cmp	r2, r3
     f5a:	d106      	bne.n	f6a <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
     f5c:	4a37      	ldr	r2, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f5e:	4b37      	ldr	r3, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f60:	685b      	ldr	r3, [r3, #4]
     f62:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f66:	6053      	str	r3, [r2, #4]
     f68:	e061      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	4b36      	ldr	r3, [pc, #216]	(1048 <DMA_DeInit+0x154>)
     f6e:	429a      	cmp	r2, r3
     f70:	d106      	bne.n	f80 <DMA_DeInit+0x8c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
     f72:	4a32      	ldr	r2, [pc, #200]	(103c <DMA_DeInit+0x148>)
     f74:	4b31      	ldr	r3, [pc, #196]	(103c <DMA_DeInit+0x148>)
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
     f7c:	6053      	str	r3, [r2, #4]
     f7e:	e056      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	4b32      	ldr	r3, [pc, #200]	(104c <DMA_DeInit+0x158>)
     f84:	429a      	cmp	r2, r3
     f86:	d106      	bne.n	f96 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
     f88:	4a2c      	ldr	r2, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8a:	4b2c      	ldr	r3, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8c:	685b      	ldr	r3, [r3, #4]
     f8e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
     f92:	6053      	str	r3, [r2, #4]
     f94:	e04b      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
     f96:	687a      	ldr	r2, [r7, #4]
     f98:	4b2d      	ldr	r3, [pc, #180]	(1050 <DMA_DeInit+0x15c>)
     f9a:	429a      	cmp	r2, r3
     f9c:	d106      	bne.n	fac <DMA_DeInit+0xb8>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
     f9e:	4a27      	ldr	r2, [pc, #156]	(103c <DMA_DeInit+0x148>)
     fa0:	4b26      	ldr	r3, [pc, #152]	(103c <DMA_DeInit+0x148>)
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     fa8:	6053      	str	r3, [r2, #4]
     faa:	e040      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	4b29      	ldr	r3, [pc, #164]	(1054 <DMA_DeInit+0x160>)
     fb0:	429a      	cmp	r2, r3
     fb2:	d106      	bne.n	fc2 <DMA_DeInit+0xce>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
     fb4:	4a21      	ldr	r2, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb6:	4b21      	ldr	r3, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
     fbe:	6053      	str	r3, [r2, #4]
     fc0:	e035      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	4b24      	ldr	r3, [pc, #144]	(1058 <DMA_DeInit+0x164>)
     fc6:	429a      	cmp	r2, r3
     fc8:	d106      	bne.n	fd8 <DMA_DeInit+0xe4>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
     fca:	4a24      	ldr	r2, [pc, #144]	(105c <DMA_DeInit+0x168>)
     fcc:	4b23      	ldr	r3, [pc, #140]	(105c <DMA_DeInit+0x168>)
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     fd4:	6053      	str	r3, [r2, #4]
     fd6:	e02a      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
     fd8:	687a      	ldr	r2, [r7, #4]
     fda:	4b21      	ldr	r3, [pc, #132]	(1060 <DMA_DeInit+0x16c>)
     fdc:	429a      	cmp	r2, r3
     fde:	d106      	bne.n	fee <DMA_DeInit+0xfa>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
     fe0:	4a1e      	ldr	r2, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe2:	4b1e      	ldr	r3, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     fea:	6053      	str	r3, [r2, #4]
     fec:	e01f      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
     fee:	687a      	ldr	r2, [r7, #4]
     ff0:	4b1c      	ldr	r3, [pc, #112]	(1064 <DMA_DeInit+0x170>)
     ff2:	429a      	cmp	r2, r3
     ff4:	d106      	bne.n	1004 <DMA_DeInit+0x110>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
     ff6:	4a19      	ldr	r2, [pc, #100]	(105c <DMA_DeInit+0x168>)
     ff8:	4b18      	ldr	r3, [pc, #96]	(105c <DMA_DeInit+0x168>)
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1000:	6053      	str	r3, [r2, #4]
    1002:	e014      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	4b18      	ldr	r3, [pc, #96]	(1068 <DMA_DeInit+0x174>)
    1008:	429a      	cmp	r2, r3
    100a:	d106      	bne.n	101a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
    100c:	4a13      	ldr	r2, [pc, #76]	(105c <DMA_DeInit+0x168>)
    100e:	4b13      	ldr	r3, [pc, #76]	(105c <DMA_DeInit+0x168>)
    1010:	685b      	ldr	r3, [r3, #4]
    1012:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    1016:	6053      	str	r3, [r2, #4]
    1018:	e009      	b.n	102e <DMA_DeInit+0x13a>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    101a:	687a      	ldr	r2, [r7, #4]
    101c:	4b13      	ldr	r3, [pc, #76]	(106c <DMA_DeInit+0x178>)
    101e:	429a      	cmp	r2, r3
    1020:	d105      	bne.n	102e <DMA_DeInit+0x13a>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    1022:	4a0e      	ldr	r2, [pc, #56]	(105c <DMA_DeInit+0x168>)
    1024:	4b0d      	ldr	r3, [pc, #52]	(105c <DMA_DeInit+0x168>)
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    102c:	6053      	str	r3, [r2, #4]
    }
  }
}
    102e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1032:	46bd      	mov	sp, r7
    1034:	bc80      	pop	{r7}
    1036:	4770      	bx	lr
    1038:	40020008 	.word	0x40020008
    103c:	40020000 	.word	0x40020000
    1040:	4002001c 	.word	0x4002001c
    1044:	40020030 	.word	0x40020030
    1048:	40020044 	.word	0x40020044
    104c:	40020058 	.word	0x40020058
    1050:	4002006c 	.word	0x4002006c
    1054:	40020080 	.word	0x40020080
    1058:	40020408 	.word	0x40020408
    105c:	40020400 	.word	0x40020400
    1060:	4002041c 	.word	0x4002041c
    1064:	40020430 	.word	0x40020430
    1068:	40020444 	.word	0x40020444
    106c:	40020458 	.word	0x40020458

00001070 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
    1070:	b480      	push	{r7}
    1072:	b085      	sub	sp, #20
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    107a:	f04f 0300 	mov.w	r3, #0	; 0x0
    107e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1090:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    1092:	683b      	ldr	r3, [r7, #0]
    1094:	689a      	ldr	r2, [r3, #8]
    1096:	683b      	ldr	r3, [r7, #0]
    1098:	6a1b      	ldr	r3, [r3, #32]
    109a:	ea42 0203 	orr.w	r2, r2, r3
    109e:	683b      	ldr	r3, [r7, #0]
    10a0:	691b      	ldr	r3, [r3, #16]
    10a2:	ea42 0203 	orr.w	r2, r2, r3
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	695b      	ldr	r3, [r3, #20]
    10aa:	ea42 0203 	orr.w	r2, r2, r3
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	699b      	ldr	r3, [r3, #24]
    10b2:	ea42 0203 	orr.w	r2, r2, r3
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	69db      	ldr	r3, [r3, #28]
    10ba:	ea42 0203 	orr.w	r2, r2, r3
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	6a5b      	ldr	r3, [r3, #36]
    10c2:	ea42 0203 	orr.w	r2, r2, r3
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	6a9b      	ldr	r3, [r3, #40]
    10ca:	ea42 0203 	orr.w	r2, r2, r3
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	ea43 0302 	orr.w	r3, r3, r2
    10d4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	6013      	str	r3, [r2, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	68da      	ldr	r2, [r3, #12]
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	681a      	ldr	r2, [r3, #0]
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	60da      	str	r2, [r3, #12]
}
    10f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	46c0      	nop			(mov r8, r8)

00001100 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
    1100:	b480      	push	{r7}
    1102:	b083      	sub	sp, #12
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f04f 0300 	mov.w	r3, #0	; 0x0
    110e:	6013      	str	r3, [r2, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    1110:	687a      	ldr	r2, [r7, #4]
    1112:	f04f 0300 	mov.w	r3, #0	; 0x0
    1116:	6053      	str	r3, [r2, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f04f 0300 	mov.w	r3, #0	; 0x0
    111e:	6093      	str	r3, [r2, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
    1120:	687a      	ldr	r2, [r7, #4]
    1122:	f04f 0300 	mov.w	r3, #0	; 0x0
    1126:	60d3      	str	r3, [r2, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f04f 0300 	mov.w	r3, #0	; 0x0
    112e:	6113      	str	r3, [r2, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	f04f 0300 	mov.w	r3, #0	; 0x0
    1136:	6153      	str	r3, [r2, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f04f 0300 	mov.w	r3, #0	; 0x0
    113e:	6193      	str	r3, [r2, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    1140:	687a      	ldr	r2, [r7, #4]
    1142:	f04f 0300 	mov.w	r3, #0	; 0x0
    1146:	61d3      	str	r3, [r2, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    1148:	687a      	ldr	r2, [r7, #4]
    114a:	f04f 0300 	mov.w	r3, #0	; 0x0
    114e:	6213      	str	r3, [r2, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f04f 0300 	mov.w	r3, #0	; 0x0
    1156:	6253      	str	r3, [r2, #36]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f04f 0300 	mov.w	r3, #0	; 0x0
    115e:	6293      	str	r3, [r2, #40]
}
    1160:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1164:	46bd      	mov	sp, r7
    1166:	bc80      	pop	{r7}
    1168:	4770      	bx	lr
    116a:	46c0      	nop			(mov r8, r8)

0000116c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	460b      	mov	r3, r1
    1176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1178:	78fb      	ldrb	r3, [r7, #3]
    117a:	2b00      	cmp	r3, #0
    117c:	d006      	beq.n	118c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	f043 0201 	orr.w	r2, r3, #1	; 0x1
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	601a      	str	r2, [r3, #0]
    118a:	e005      	b.n	1198 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	f023 0201 	bic.w	r2, r3, #1	; 0x1
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	601a      	str	r2, [r3, #0]
  }
}
    1198:	f107 070c 	add.w	r7, r7, #12	; 0xc
    119c:	46bd      	mov	sp, r7
    119e:	bc80      	pop	{r7}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			(mov r8, r8)

000011a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
    11a4:	b480      	push	{r7}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	60f8      	str	r0, [r7, #12]
    11ac:	60b9      	str	r1, [r7, #8]
    11ae:	4613      	mov	r3, r2
    11b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d007      	beq.n	11c8 <DMA_ITConfig+0x24>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	ea42 0203 	orr.w	r2, r2, r3
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	601a      	str	r2, [r3, #0]
    11c6:	e008      	b.n	11da <DMA_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	ea6f 0303 	mvn.w	r3, r3
    11d2:	ea02 0203 	and.w	r2, r2, r3
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	601a      	str	r2, [r3, #0]
  }
}
    11da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr

000011e4 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *   transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	b29b      	uxth	r3, r3
}
    11f2:	4618      	mov	r0, r3
    11f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    11f8:	46bd      	mov	sp, r7
    11fa:	bc80      	pop	{r7}
    11fc:	4770      	bx	lr
    11fe:	46c0      	nop			(mov r8, r8)

00001200 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
    1200:	b480      	push	{r7}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    1208:	f04f 0300 	mov.w	r3, #0	; 0x0
    120c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    120e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1212:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    121a:	2b00      	cmp	r3, #0
    121c:	d003      	beq.n	1226 <DMA_GetFlagStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    121e:	4b0d      	ldr	r3, [pc, #52]	(1254 <DMA_GetFlagStatus+0x54>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	60fb      	str	r3, [r7, #12]
    1224:	e002      	b.n	122c <DMA_GetFlagStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    1226:	4b0c      	ldr	r3, [pc, #48]	(1258 <DMA_GetFlagStatus+0x58>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	687a      	ldr	r2, [r7, #4]
    1230:	ea03 0302 	and.w	r3, r3, r2
    1234:	2b00      	cmp	r3, #0
    1236:	d003      	beq.n	1240 <DMA_GetFlagStatus+0x40>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
    1238:	f04f 0301 	mov.w	r3, #1	; 0x1
    123c:	72fb      	strb	r3, [r7, #11]
    123e:	e002      	b.n	1246 <DMA_GetFlagStatus+0x46>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
    1240:	f04f 0300 	mov.w	r3, #0	; 0x0
    1244:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
    1246:	7afb      	ldrb	r3, [r7, #11]
}
    1248:	4618      	mov	r0, r3
    124a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    124e:	46bd      	mov	sp, r7
    1250:	bc80      	pop	{r7}
    1252:	4770      	bx	lr
    1254:	40020400 	.word	0x40020400
    1258:	40020000 	.word	0x40020000

0000125c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
    125c:	b480      	push	{r7}
    125e:	b083      	sub	sp, #12
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    126a:	2b00      	cmp	r3, #0
    126c:	d003      	beq.n	1276 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
    126e:	4a06      	ldr	r2, [pc, #24]	(1288 <DMA_ClearFlag+0x2c>)
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6053      	str	r3, [r2, #4]
    1274:	e002      	b.n	127c <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
    1276:	4a05      	ldr	r2, [pc, #20]	(128c <DMA_ClearFlag+0x30>)
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	6053      	str	r3, [r2, #4]
  }
}
    127c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1280:	46bd      	mov	sp, r7
    1282:	bc80      	pop	{r7}
    1284:	4770      	bx	lr
    1286:	46c0      	nop			(mov r8, r8)
    1288:	40020400 	.word	0x40020400
    128c:	40020000 	.word	0x40020000

00001290 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
    1290:	b480      	push	{r7}
    1292:	b085      	sub	sp, #20
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1298:	f04f 0300 	mov.w	r3, #0	; 0x0
    129c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    129e:	f04f 0300 	mov.w	r3, #0	; 0x0
    12a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <DMA_GetITStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    12ae:	4b0d      	ldr	r3, [pc, #52]	(12e4 <DMA_GetITStatus+0x54>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	60fb      	str	r3, [r7, #12]
    12b4:	e002      	b.n	12bc <DMA_GetITStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    12b6:	4b0c      	ldr	r3, [pc, #48]	(12e8 <DMA_GetITStatus+0x58>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	ea03 0302 	and.w	r3, r3, r2
    12c4:	2b00      	cmp	r3, #0
    12c6:	d003      	beq.n	12d0 <DMA_GetITStatus+0x40>
  {
    /* DMA_IT is set */
    bitstatus = SET;
    12c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    12cc:	72fb      	strb	r3, [r7, #11]
    12ce:	e002      	b.n	12d6 <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
    12d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    12d4:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
    12d6:	7afb      	ldrb	r3, [r7, #11]
}
    12d8:	4618      	mov	r0, r3
    12da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    12de:	46bd      	mov	sp, r7
    12e0:	bc80      	pop	{r7}
    12e2:	4770      	bx	lr
    12e4:	40020400 	.word	0x40020400
    12e8:	40020000 	.word	0x40020000

000012ec <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
    12ec:	b480      	push	{r7}
    12ee:	b083      	sub	sp, #12
    12f0:	af00      	add	r7, sp, #0
    12f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12fa:	2b00      	cmp	r3, #0
    12fc:	d003      	beq.n	1306 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
    12fe:	4a06      	ldr	r2, [pc, #24]	(1318 <DMA_ClearITPendingBit+0x2c>)
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	6053      	str	r3, [r2, #4]
    1304:	e002      	b.n	130c <DMA_ClearITPendingBit+0x20>
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
    1306:	4a05      	ldr	r2, [pc, #20]	(131c <DMA_ClearITPendingBit+0x30>)
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	6053      	str	r3, [r2, #4]
  }
}
    130c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1310:	46bd      	mov	sp, r7
    1312:	bc80      	pop	{r7}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			(mov r8, r8)
    1318:	40020400 	.word	0x40020400
    131c:	40020000 	.word	0x40020000

00001320 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1324:	4a0a      	ldr	r2, [pc, #40]	(1350 <EXTI_DeInit+0x30>)
    1326:	f04f 0300 	mov.w	r3, #0	; 0x0
    132a:	6013      	str	r3, [r2, #0]
  EXTI->EMR = 0x00000000;
    132c:	4a08      	ldr	r2, [pc, #32]	(1350 <EXTI_DeInit+0x30>)
    132e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1332:	6053      	str	r3, [r2, #4]
  EXTI->RTSR = 0x00000000; 
    1334:	4a06      	ldr	r2, [pc, #24]	(1350 <EXTI_DeInit+0x30>)
    1336:	f04f 0300 	mov.w	r3, #0	; 0x0
    133a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR = 0x00000000; 
    133c:	4a04      	ldr	r2, [pc, #16]	(1350 <EXTI_DeInit+0x30>)
    133e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1342:	60d3      	str	r3, [r2, #12]
  EXTI->PR = 0x000FFFFF;
    1344:	4a02      	ldr	r2, [pc, #8]	(1350 <EXTI_DeInit+0x30>)
    1346:	4b03      	ldr	r3, [pc, #12]	(1354 <EXTI_DeInit+0x34>)
    1348:	6153      	str	r3, [r2, #20]
}
    134a:	46bd      	mov	sp, r7
    134c:	bc80      	pop	{r7}
    134e:	4770      	bx	lr
    1350:	40010400 	.word	0x40010400
    1354:	000fffff 	.word	0x000fffff

00001358 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1360:	f04f 0300 	mov.w	r3, #0	; 0x0
    1364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1366:	4b3b      	ldr	r3, [pc, #236]	(1454 <EXTI_Init+0xfc>)
    1368:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	799b      	ldrb	r3, [r3, #6]
    136e:	2b00      	cmp	r3, #0
    1370:	d05b      	beq.n	142a <EXTI_Init+0xd2>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1372:	4938      	ldr	r1, [pc, #224]	(1454 <EXTI_Init+0xfc>)
    1374:	4b37      	ldr	r3, [pc, #220]	(1454 <EXTI_Init+0xfc>)
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	ea6f 0303 	mvn.w	r3, r3
    1380:	ea02 0303 	and.w	r3, r2, r3
    1384:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    1386:	4933      	ldr	r1, [pc, #204]	(1454 <EXTI_Init+0xfc>)
    1388:	4b32      	ldr	r3, [pc, #200]	(1454 <EXTI_Init+0xfc>)
    138a:	685a      	ldr	r2, [r3, #4]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	ea6f 0303 	mvn.w	r3, r3
    1394:	ea02 0303 	and.w	r3, r2, r3
    1398:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	791b      	ldrb	r3, [r3, #4]
    139e:	461a      	mov	r2, r3
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	4413      	add	r3, r2
    13a4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    13a6:	68f9      	ldr	r1, [r7, #12]
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	681a      	ldr	r2, [r3, #0]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	ea42 0303 	orr.w	r3, r2, r3
    13b4:	600b      	str	r3, [r1, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    13b6:	4927      	ldr	r1, [pc, #156]	(1454 <EXTI_Init+0xfc>)
    13b8:	4b26      	ldr	r3, [pc, #152]	(1454 <EXTI_Init+0xfc>)
    13ba:	689a      	ldr	r2, [r3, #8]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	ea6f 0303 	mvn.w	r3, r3
    13c4:	ea02 0303 	and.w	r3, r2, r3
    13c8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    13ca:	4922      	ldr	r1, [pc, #136]	(1454 <EXTI_Init+0xfc>)
    13cc:	4b21      	ldr	r3, [pc, #132]	(1454 <EXTI_Init+0xfc>)
    13ce:	68da      	ldr	r2, [r3, #12]
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	ea6f 0303 	mvn.w	r3, r3
    13d8:	ea02 0303 	and.w	r3, r2, r3
    13dc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	795b      	ldrb	r3, [r3, #5]
    13e2:	2b10      	cmp	r3, #16
    13e4:	d110      	bne.n	1408 <EXTI_Init+0xb0>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    13e6:	491b      	ldr	r1, [pc, #108]	(1454 <EXTI_Init+0xfc>)
    13e8:	4b1a      	ldr	r3, [pc, #104]	(1454 <EXTI_Init+0xfc>)
    13ea:	689a      	ldr	r2, [r3, #8]
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	ea42 0303 	orr.w	r3, r2, r3
    13f4:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    13f6:	4917      	ldr	r1, [pc, #92]	(1454 <EXTI_Init+0xfc>)
    13f8:	4b16      	ldr	r3, [pc, #88]	(1454 <EXTI_Init+0xfc>)
    13fa:	68da      	ldr	r2, [r3, #12]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	ea42 0303 	orr.w	r3, r2, r3
    1404:	60cb      	str	r3, [r1, #12]
    1406:	e020      	b.n	144a <EXTI_Init+0xf2>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    1408:	4b12      	ldr	r3, [pc, #72]	(1454 <EXTI_Init+0xfc>)
    140a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	461a      	mov	r2, r3
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	4413      	add	r3, r2
    1416:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    1418:	68f9      	ldr	r1, [r7, #12]
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	ea42 0303 	orr.w	r3, r2, r3
    1426:	600b      	str	r3, [r1, #0]
    1428:	e00f      	b.n	144a <EXTI_Init+0xf2>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	791b      	ldrb	r3, [r3, #4]
    142e:	461a      	mov	r2, r3
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	4413      	add	r3, r2
    1434:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    1436:	68f9      	ldr	r1, [r7, #12]
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	681a      	ldr	r2, [r3, #0]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	ea6f 0303 	mvn.w	r3, r3
    1444:	ea02 0303 	and.w	r3, r2, r3
    1448:	600b      	str	r3, [r1, #0]
  }
}
    144a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    144e:	46bd      	mov	sp, r7
    1450:	bc80      	pop	{r7}
    1452:	4770      	bx	lr
    1454:	40010400 	.word	0x40010400

00001458 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1458:	b480      	push	{r7}
    145a:	b083      	sub	sp, #12
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	f04f 0300 	mov.w	r3, #0	; 0x0
    1466:	6013      	str	r3, [r2, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    1468:	687a      	ldr	r2, [r7, #4]
    146a:	f04f 0300 	mov.w	r3, #0	; 0x0
    146e:	7113      	strb	r3, [r2, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    1470:	687a      	ldr	r2, [r7, #4]
    1472:	f04f 030c 	mov.w	r3, #12	; 0xc
    1476:	7153      	strb	r3, [r2, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    1478:	687a      	ldr	r2, [r7, #4]
    147a:	f04f 0300 	mov.w	r3, #0	; 0x0
    147e:	7193      	strb	r3, [r2, #6]
}
    1480:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1484:	46bd      	mov	sp, r7
    1486:	bc80      	pop	{r7}
    1488:	4770      	bx	lr
    148a:	46c0      	nop			(mov r8, r8)

0000148c <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    148c:	b480      	push	{r7}
    148e:	b083      	sub	sp, #12
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    1494:	4905      	ldr	r1, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1496:	4b05      	ldr	r3, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1498:	691a      	ldr	r2, [r3, #16]
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	ea42 0303 	orr.w	r3, r2, r3
    14a0:	610b      	str	r3, [r1, #16]
}
    14a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14a6:	46bd      	mov	sp, r7
    14a8:	bc80      	pop	{r7}
    14aa:	4770      	bx	lr
    14ac:	40010400 	.word	0x40010400

000014b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    14b0:	b480      	push	{r7}
    14b2:	b085      	sub	sp, #20
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    14b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    14bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    14be:	4b0a      	ldr	r3, [pc, #40]	(14e8 <EXTI_GetFlagStatus+0x38>)
    14c0:	695a      	ldr	r2, [r3, #20]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	ea02 0303 	and.w	r3, r2, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d003      	beq.n	14d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    14cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    14d0:	73fb      	strb	r3, [r7, #15]
    14d2:	e002      	b.n	14da <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    14d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    14d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14da:	7bfb      	ldrb	r3, [r7, #15]
}
    14dc:	4618      	mov	r0, r3
    14de:	f107 0714 	add.w	r7, r7, #20	; 0x14
    14e2:	46bd      	mov	sp, r7
    14e4:	bc80      	pop	{r7}
    14e6:	4770      	bx	lr
    14e8:	40010400 	.word	0x40010400

000014ec <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    14ec:	b480      	push	{r7}
    14ee:	b083      	sub	sp, #12
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    14f4:	4a03      	ldr	r2, [pc, #12]	(1504 <EXTI_ClearFlag+0x18>)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	6153      	str	r3, [r2, #20]
}
    14fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14fe:	46bd      	mov	sp, r7
    1500:	bc80      	pop	{r7}
    1502:	4770      	bx	lr
    1504:	40010400 	.word	0x40010400

00001508 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    1508:	b480      	push	{r7}
    150a:	b085      	sub	sp, #20
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1510:	f04f 0300 	mov.w	r3, #0	; 0x0
    1514:	72fb      	strb	r3, [r7, #11]
  uint32_t enablestatus = 0;
    1516:	f04f 0300 	mov.w	r3, #0	; 0x0
    151a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    151c:	4b0e      	ldr	r3, [pc, #56]	(1558 <EXTI_GetITStatus+0x50>)
    151e:	681a      	ldr	r2, [r3, #0]
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	ea02 0303 	and.w	r3, r2, r3
    1526:	60fb      	str	r3, [r7, #12]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    1528:	4b0b      	ldr	r3, [pc, #44]	(1558 <EXTI_GetITStatus+0x50>)
    152a:	695a      	ldr	r2, [r3, #20]
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	ea02 0303 	and.w	r3, r2, r3
    1532:	2b00      	cmp	r3, #0
    1534:	d006      	beq.n	1544 <EXTI_GetITStatus+0x3c>
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2b00      	cmp	r3, #0
    153a:	d003      	beq.n	1544 <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
    153c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1540:	72fb      	strb	r3, [r7, #11]
    1542:	e002      	b.n	154a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    1544:	f04f 0300 	mov.w	r3, #0	; 0x0
    1548:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    154a:	7afb      	ldrb	r3, [r7, #11]
}
    154c:	4618      	mov	r0, r3
    154e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1552:	46bd      	mov	sp, r7
    1554:	bc80      	pop	{r7}
    1556:	4770      	bx	lr
    1558:	40010400 	.word	0x40010400

0000155c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    155c:	b480      	push	{r7}
    155e:	b083      	sub	sp, #12
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    1564:	4a03      	ldr	r2, [pc, #12]	(1574 <EXTI_ClearITPendingBit+0x18>)
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	6153      	str	r3, [r2, #20]
}
    156a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr
    1574:	40010400 	.word	0x40010400

00001578 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	4b3c      	ldr	r3, [pc, #240]	(1674 <GPIO_DeInit+0xfc>)
    1584:	429a      	cmp	r2, r3
    1586:	d10c      	bne.n	15a2 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1588:	f04f 0004 	mov.w	r0, #4	; 0x4
    158c:	f04f 0101 	mov.w	r1, #1	; 0x1
    1590:	f000 ffc0 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1594:	f04f 0004 	mov.w	r0, #4	; 0x4
    1598:	f04f 0100 	mov.w	r1, #0	; 0x0
    159c:	f000 ffba 	bl	2514 <RCC_APB2PeriphResetCmd>
    15a0:	e064      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    15a2:	687a      	ldr	r2, [r7, #4]
    15a4:	4b34      	ldr	r3, [pc, #208]	(1678 <GPIO_DeInit+0x100>)
    15a6:	429a      	cmp	r2, r3
    15a8:	d10c      	bne.n	15c4 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    15aa:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    15b2:	f000 ffaf 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    15b6:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ba:	f04f 0100 	mov.w	r1, #0	; 0x0
    15be:	f000 ffa9 	bl	2514 <RCC_APB2PeriphResetCmd>
    15c2:	e053      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	4b2d      	ldr	r3, [pc, #180]	(167c <GPIO_DeInit+0x104>)
    15c8:	429a      	cmp	r2, r3
    15ca:	d10c      	bne.n	15e6 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    15cc:	f04f 0010 	mov.w	r0, #16	; 0x10
    15d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    15d4:	f000 ff9e 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    15d8:	f04f 0010 	mov.w	r0, #16	; 0x10
    15dc:	f04f 0100 	mov.w	r1, #0	; 0x0
    15e0:	f000 ff98 	bl	2514 <RCC_APB2PeriphResetCmd>
    15e4:	e042      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    15e6:	687a      	ldr	r2, [r7, #4]
    15e8:	4b25      	ldr	r3, [pc, #148]	(1680 <GPIO_DeInit+0x108>)
    15ea:	429a      	cmp	r2, r3
    15ec:	d10c      	bne.n	1608 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    15ee:	f04f 0020 	mov.w	r0, #32	; 0x20
    15f2:	f04f 0101 	mov.w	r1, #1	; 0x1
    15f6:	f000 ff8d 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    15fa:	f04f 0020 	mov.w	r0, #32	; 0x20
    15fe:	f04f 0100 	mov.w	r1, #0	; 0x0
    1602:	f000 ff87 	bl	2514 <RCC_APB2PeriphResetCmd>
    1606:	e031      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
    1608:	687a      	ldr	r2, [r7, #4]
    160a:	4b1e      	ldr	r3, [pc, #120]	(1684 <GPIO_DeInit+0x10c>)
    160c:	429a      	cmp	r2, r3
    160e:	d10c      	bne.n	162a <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1610:	f04f 0040 	mov.w	r0, #64	; 0x40
    1614:	f04f 0101 	mov.w	r1, #1	; 0x1
    1618:	f000 ff7c 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    161c:	f04f 0040 	mov.w	r0, #64	; 0x40
    1620:	f04f 0100 	mov.w	r1, #0	; 0x0
    1624:	f000 ff76 	bl	2514 <RCC_APB2PeriphResetCmd>
    1628:	e020      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
    162a:	687a      	ldr	r2, [r7, #4]
    162c:	4b16      	ldr	r3, [pc, #88]	(1688 <GPIO_DeInit+0x110>)
    162e:	429a      	cmp	r2, r3
    1630:	d10c      	bne.n	164c <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1632:	f04f 0080 	mov.w	r0, #128	; 0x80
    1636:	f04f 0101 	mov.w	r1, #1	; 0x1
    163a:	f000 ff6b 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    163e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1642:	f04f 0100 	mov.w	r1, #0	; 0x0
    1646:	f000 ff65 	bl	2514 <RCC_APB2PeriphResetCmd>
    164a:	e00f      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    164c:	687a      	ldr	r2, [r7, #4]
    164e:	4b0f      	ldr	r3, [pc, #60]	(168c <GPIO_DeInit+0x114>)
    1650:	429a      	cmp	r2, r3
    1652:	d10b      	bne.n	166c <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1654:	f44f 7080 	mov.w	r0, #256	; 0x100
    1658:	f04f 0101 	mov.w	r1, #1	; 0x1
    165c:	f000 ff5a 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1660:	f44f 7080 	mov.w	r0, #256	; 0x100
    1664:	f04f 0100 	mov.w	r1, #0	; 0x0
    1668:	f000 ff54 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
    166c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}
    1674:	40010800 	.word	0x40010800
    1678:	40010c00 	.word	0x40010c00
    167c:	40011000 	.word	0x40011000
    1680:	40011400 	.word	0x40011400
    1684:	40011800 	.word	0x40011800
    1688:	40011c00 	.word	0x40011c00
    168c:	40012000 	.word	0x40012000

00001690 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1694:	f04f 0001 	mov.w	r0, #1	; 0x1
    1698:	f04f 0101 	mov.w	r1, #1	; 0x1
    169c:	f000 ff3a 	bl	2514 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    16a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    16a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    16a8:	f000 ff34 	bl	2514 <RCC_APB2PeriphResetCmd>
}
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}

000016b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    16b0:	b480      	push	{r7}
    16b2:	b089      	sub	sp, #36
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    16ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    16be:	60bb      	str	r3, [r7, #8]
    16c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    16c4:	60fb      	str	r3, [r7, #12]
    16c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    16ca:	613b      	str	r3, [r7, #16]
    16cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    16d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d6:	61bb      	str	r3, [r7, #24]
    16d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    16dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    16de:	683b      	ldr	r3, [r7, #0]
    16e0:	78db      	ldrb	r3, [r3, #3]
    16e2:	f003 030f 	and.w	r3, r3, #15	; 0xf
    16e6:	60bb      	str	r3, [r7, #8]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	78db      	ldrb	r3, [r3, #3]
    16ec:	f003 0310 	and.w	r3, r3, #16	; 0x10
    16f0:	2b00      	cmp	r3, #0
    16f2:	d006      	beq.n	1702 <GPIO_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	789b      	ldrb	r3, [r3, #2]
    16f8:	461a      	mov	r2, r3
    16fa:	68bb      	ldr	r3, [r7, #8]
    16fc:	ea43 0302 	orr.w	r3, r3, r2
    1700:	60bb      	str	r3, [r7, #8]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    170a:	2b00      	cmp	r3, #0
    170c:	d051      	beq.n	17b2 <GPIO_Init+0x102>
  {
    tmpreg = GPIOx->CRL;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1714:	f04f 0300 	mov.w	r3, #0	; 0x0
    1718:	613b      	str	r3, [r7, #16]
    171a:	e044      	b.n	17a6 <GPIO_Init+0xf6>
    {
      pos = ((uint32_t)0x01) << pinpos;
    171c:	693a      	ldr	r2, [r7, #16]
    171e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1722:	fa03 f302 	lsl.w	r3, r3, r2
    1726:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	881b      	ldrh	r3, [r3, #0]
    172c:	461a      	mov	r2, r3
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	ea02 0303 	and.w	r3, r2, r3
    1734:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    1736:	68fa      	ldr	r2, [r7, #12]
    1738:	697b      	ldr	r3, [r7, #20]
    173a:	429a      	cmp	r2, r3
    173c:	d12f      	bne.n	179e <GPIO_Init+0xee>
      {
        pos = pinpos << 2;
    173e:	693b      	ldr	r3, [r7, #16]
    1740:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1744:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	f04f 030f 	mov.w	r3, #15	; 0xf
    174c:	fa03 f302 	lsl.w	r3, r3, r2
    1750:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1752:	69fb      	ldr	r3, [r7, #28]
    1754:	ea6f 0203 	mvn.w	r2, r3
    1758:	69bb      	ldr	r3, [r7, #24]
    175a:	ea03 0302 	and.w	r3, r3, r2
    175e:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1760:	697a      	ldr	r2, [r7, #20]
    1762:	68bb      	ldr	r3, [r7, #8]
    1764:	fa03 f202 	lsl.w	r2, r3, r2
    1768:	69bb      	ldr	r3, [r7, #24]
    176a:	ea43 0302 	orr.w	r3, r3, r2
    176e:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	78db      	ldrb	r3, [r3, #3]
    1774:	2b28      	cmp	r3, #40
    1776:	d107      	bne.n	1788 <GPIO_Init+0xd8>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1778:	693a      	ldr	r2, [r7, #16]
    177a:	f04f 0301 	mov.w	r3, #1	; 0x1
    177e:	fa03 f202 	lsl.w	r2, r3, r2
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	615a      	str	r2, [r3, #20]
    1786:	e00a      	b.n	179e <GPIO_Init+0xee>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1788:	683b      	ldr	r3, [r7, #0]
    178a:	78db      	ldrb	r3, [r3, #3]
    178c:	2b48      	cmp	r3, #72
    178e:	d106      	bne.n	179e <GPIO_Init+0xee>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1790:	693a      	ldr	r2, [r7, #16]
    1792:	f04f 0301 	mov.w	r3, #1	; 0x1
    1796:	fa03 f202 	lsl.w	r2, r3, r2
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    179e:	693b      	ldr	r3, [r7, #16]
    17a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    17a4:	613b      	str	r3, [r7, #16]
    17a6:	693b      	ldr	r3, [r7, #16]
    17a8:	2b07      	cmp	r3, #7
    17aa:	d9b7      	bls.n	171c <GPIO_Init+0x6c>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	6013      	str	r3, [r2, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	881b      	ldrh	r3, [r3, #0]
    17b6:	2bff      	cmp	r3, #255
    17b8:	d959      	bls.n	186e <GPIO_Init+0x1be>
  {
    tmpreg = GPIOx->CRH;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    17c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    17c4:	613b      	str	r3, [r7, #16]
    17c6:	e04c      	b.n	1862 <GPIO_Init+0x1b2>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	f103 0308 	add.w	r3, r3, #8	; 0x8
    17ce:	461a      	mov	r2, r3
    17d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    17d4:	fa03 f302 	lsl.w	r3, r3, r2
    17d8:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    17da:	683b      	ldr	r3, [r7, #0]
    17dc:	881b      	ldrh	r3, [r3, #0]
    17de:	461a      	mov	r2, r3
    17e0:	697b      	ldr	r3, [r7, #20]
    17e2:	ea02 0303 	and.w	r3, r2, r3
    17e6:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    17e8:	68fa      	ldr	r2, [r7, #12]
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	429a      	cmp	r2, r3
    17ee:	d134      	bne.n	185a <GPIO_Init+0x1aa>
      {
        pos = pinpos << 2;
    17f0:	693b      	ldr	r3, [r7, #16]
    17f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    17f6:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    17f8:	697a      	ldr	r2, [r7, #20]
    17fa:	f04f 030f 	mov.w	r3, #15	; 0xf
    17fe:	fa03 f302 	lsl.w	r3, r3, r2
    1802:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	ea6f 0203 	mvn.w	r2, r3
    180a:	69bb      	ldr	r3, [r7, #24]
    180c:	ea03 0302 	and.w	r3, r3, r2
    1810:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1812:	697a      	ldr	r2, [r7, #20]
    1814:	68bb      	ldr	r3, [r7, #8]
    1816:	fa03 f202 	lsl.w	r2, r3, r2
    181a:	69bb      	ldr	r3, [r7, #24]
    181c:	ea43 0302 	orr.w	r3, r3, r2
    1820:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	78db      	ldrb	r3, [r3, #3]
    1826:	2b28      	cmp	r3, #40
    1828:	d109      	bne.n	183e <GPIO_Init+0x18e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    182a:	693b      	ldr	r3, [r7, #16]
    182c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    1830:	461a      	mov	r2, r3
    1832:	f04f 0301 	mov.w	r3, #1	; 0x1
    1836:	fa03 f202 	lsl.w	r2, r3, r2
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	78db      	ldrb	r3, [r3, #3]
    1842:	2b48      	cmp	r3, #72
    1844:	d109      	bne.n	185a <GPIO_Init+0x1aa>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1846:	693b      	ldr	r3, [r7, #16]
    1848:	f103 0308 	add.w	r3, r3, #8	; 0x8
    184c:	461a      	mov	r2, r3
    184e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1852:	fa03 f202 	lsl.w	r2, r3, r2
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    185a:	693b      	ldr	r3, [r7, #16]
    185c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1860:	613b      	str	r3, [r7, #16]
    1862:	693b      	ldr	r3, [r7, #16]
    1864:	2b07      	cmp	r3, #7
    1866:	d9af      	bls.n	17c8 <GPIO_Init+0x118>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1868:	687a      	ldr	r2, [r7, #4]
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	6053      	str	r3, [r2, #4]
  }
}
    186e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1872:	46bd      	mov	sp, r7
    1874:	bc80      	pop	{r7}
    1876:	4770      	bx	lr

00001878 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1878:	b480      	push	{r7}
    187a:	b083      	sub	sp, #12
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1886:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	f04f 0302 	mov.w	r3, #2	; 0x2
    188e:	7093      	strb	r3, [r2, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	f04f 0304 	mov.w	r3, #4	; 0x4
    1896:	70d3      	strb	r3, [r2, #3]
}
    1898:	f107 070c 	add.w	r7, r7, #12	; 0xc
    189c:	46bd      	mov	sp, r7
    189e:	bc80      	pop	{r7}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			(mov r8, r8)

000018a4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18a4:	b480      	push	{r7}
    18a6:	b085      	sub	sp, #20
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
    18ac:	460b      	mov	r3, r1
    18ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    18b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    18b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	689a      	ldr	r2, [r3, #8]
    18ba:	887b      	ldrh	r3, [r7, #2]
    18bc:	ea02 0303 	and.w	r3, r2, r3
    18c0:	2b00      	cmp	r3, #0
    18c2:	d003      	beq.n	18cc <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    18c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    18c8:	73fb      	strb	r3, [r7, #15]
    18ca:	e002      	b.n	18d2 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    18cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    18d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    18d2:	7bfb      	ldrb	r3, [r7, #15]
}
    18d4:	4618      	mov	r0, r3
    18d6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    18da:	46bd      	mov	sp, r7
    18dc:	bc80      	pop	{r7}
    18de:	4770      	bx	lr

000018e0 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    18e0:	b480      	push	{r7}
    18e2:	b083      	sub	sp, #12
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	689b      	ldr	r3, [r3, #8]
    18ec:	b29b      	uxth	r3, r3
}
    18ee:	4618      	mov	r0, r3
    18f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    18f4:	46bd      	mov	sp, r7
    18f6:	bc80      	pop	{r7}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			(mov r8, r8)

000018fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18fc:	b480      	push	{r7}
    18fe:	b085      	sub	sp, #20
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	460b      	mov	r3, r1
    1906:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1908:	f04f 0300 	mov.w	r3, #0	; 0x0
    190c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	68da      	ldr	r2, [r3, #12]
    1912:	887b      	ldrh	r3, [r7, #2]
    1914:	ea02 0303 	and.w	r3, r2, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d003      	beq.n	1924 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    191c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1920:	73fb      	strb	r3, [r7, #15]
    1922:	e002      	b.n	192a <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1924:	f04f 0300 	mov.w	r3, #0	; 0x0
    1928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    192a:	7bfb      	ldrb	r3, [r7, #15]
}
    192c:	4618      	mov	r0, r3
    192e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1932:	46bd      	mov	sp, r7
    1934:	bc80      	pop	{r7}
    1936:	4770      	bx	lr

00001938 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1938:	b480      	push	{r7}
    193a:	b083      	sub	sp, #12
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	68db      	ldr	r3, [r3, #12]
    1944:	b29b      	uxth	r3, r3
}
    1946:	4618      	mov	r0, r3
    1948:	f107 070c 	add.w	r7, r7, #12	; 0xc
    194c:	46bd      	mov	sp, r7
    194e:	bc80      	pop	{r7}
    1950:	4770      	bx	lr
    1952:	46c0      	nop			(mov r8, r8)

00001954 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	460b      	mov	r3, r1
    195e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1960:	887a      	ldrh	r2, [r7, #2]
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	611a      	str	r2, [r3, #16]
}
    1966:	f107 070c 	add.w	r7, r7, #12	; 0xc
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	460b      	mov	r3, r1
    197a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    197c:	887a      	ldrh	r2, [r7, #2]
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	615a      	str	r2, [r3, #20]
}
    1982:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1986:	46bd      	mov	sp, r7
    1988:	bc80      	pop	{r7}
    198a:	4770      	bx	lr

0000198c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	460b      	mov	r3, r1
    1996:	807b      	strh	r3, [r7, #2]
    1998:	4613      	mov	r3, r2
    199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    199c:	787b      	ldrb	r3, [r7, #1]
    199e:	2b00      	cmp	r3, #0
    19a0:	d003      	beq.n	19aa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    19a2:	887a      	ldrh	r2, [r7, #2]
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	611a      	str	r2, [r3, #16]
    19a8:	e002      	b.n	19b0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    19aa:	887a      	ldrh	r2, [r7, #2]
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	615a      	str	r2, [r3, #20]
  }
}
    19b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19b4:	46bd      	mov	sp, r7
    19b6:	bc80      	pop	{r7}
    19b8:	4770      	bx	lr
    19ba:	46c0      	nop			(mov r8, r8)

000019bc <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	460b      	mov	r3, r1
    19c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    19c8:	887a      	ldrh	r2, [r7, #2]
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	60da      	str	r2, [r3, #12]
}
    19ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19d2:	46bd      	mov	sp, r7
    19d4:	bc80      	pop	{r7}
    19d6:	4770      	bx	lr

000019d8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    19d8:	b480      	push	{r7}
    19da:	b085      	sub	sp, #20
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
    19e0:	460b      	mov	r3, r1
    19e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    19e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    19ea:	887a      	ldrh	r2, [r7, #2]
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	ea43 0302 	orr.w	r3, r3, r2
    19f2:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    19fa:	887a      	ldrh	r2, [r7, #2]
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1a00:	687a      	ldr	r2, [r7, #4]
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	699b      	ldr	r3, [r3, #24]
    1a0a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	699b      	ldr	r3, [r3, #24]
    1a10:	60fb      	str	r3, [r7, #12]
}
    1a12:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr

00001a1c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1a1c:	b480      	push	{r7}
    1a1e:	b085      	sub	sp, #20
    1a20:	af00      	add	r7, sp, #0
    1a22:	4603      	mov	r3, r0
    1a24:	460a      	mov	r2, r1
    1a26:	71fb      	strb	r3, [r7, #7]
    1a28:	4613      	mov	r3, r2
    1a2a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1a2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1a30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1a32:	4b0e      	ldr	r3, [pc, #56]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1a38:	68fa      	ldr	r2, [r7, #12]
    1a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
    1a3e:	ea02 0303 	and.w	r3, r2, r3
    1a42:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1a44:	79fb      	ldrb	r3, [r7, #7]
    1a46:	ea4f 1203 	mov.w	r2, r3, lsl #4
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	ea43 0302 	orr.w	r3, r3, r2
    1a50:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1a52:	79ba      	ldrb	r2, [r7, #6]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	ea43 0302 	orr.w	r3, r3, r2
    1a5a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1a5c:	4a03      	ldr	r2, [pc, #12]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	6013      	str	r3, [r2, #0]
}
    1a62:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a66:	46bd      	mov	sp, r7
    1a68:	bc80      	pop	{r7}
    1a6a:	4770      	bx	lr
    1a6c:	40010000 	.word	0x40010000

00001a70 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1a70:	b480      	push	{r7}
    1a72:	b083      	sub	sp, #12
    1a74:	af00      	add	r7, sp, #0
    1a76:	4603      	mov	r3, r0
    1a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1a7a:	4a04      	ldr	r2, [pc, #16]	(1a8c <GPIO_EventOutputCmd+0x1c>)
    1a7c:	79fb      	ldrb	r3, [r7, #7]
    1a7e:	6013      	str	r3, [r2, #0]
}
    1a80:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1a84:	46bd      	mov	sp, r7
    1a86:	bc80      	pop	{r7}
    1a88:	4770      	bx	lr
    1a8a:	46c0      	nop			(mov r8, r8)
    1a8c:	4220001c 	.word	0x4220001c

00001a90 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1a90:	b480      	push	{r7}
    1a92:	b087      	sub	sp, #28
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
    1a98:	460b      	mov	r3, r1
    1a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1a9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa0:	60bb      	str	r3, [r7, #8]
    1aa2:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa6:	60fb      	str	r3, [r7, #12]
    1aa8:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aac:	613b      	str	r3, [r7, #16]
    1aae:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  tmpreg = AFIO->MAPR;
    1ab4:	4b30      	ldr	r3, [pc, #192]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ab6:	685b      	ldr	r3, [r3, #4]
    1ab8:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1ac0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ac4:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1acc:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ad0:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1adc:	d10a      	bne.n	1af4 <GPIO_PinRemapConfig+0x64>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ade:	693b      	ldr	r3, [r7, #16]
    1ae0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1ae4:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1ae6:	4a24      	ldr	r2, [pc, #144]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ae8:	4b23      	ldr	r3, [pc, #140]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1aea:	685b      	ldr	r3, [r3, #4]
    1aec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1af0:	6053      	str	r3, [r2, #4]
    1af2:	e029      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1afa:	2b00      	cmp	r3, #0
    1afc:	d011      	beq.n	1b22 <GPIO_PinRemapConfig+0x92>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1afe:	697a      	ldr	r2, [r7, #20]
    1b00:	f04f 0303 	mov.w	r3, #3	; 0x3
    1b04:	fa03 f302 	lsl.w	r3, r3, r2
    1b08:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	ea6f 0203 	mvn.w	r2, r3
    1b10:	693b      	ldr	r3, [r7, #16]
    1b12:	ea03 0302 	and.w	r3, r3, r2
    1b16:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b18:	693b      	ldr	r3, [r7, #16]
    1b1a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b1e:	613b      	str	r3, [r7, #16]
    1b20:	e012      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b28:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b2c:	461a      	mov	r2, r3
    1b2e:	68bb      	ldr	r3, [r7, #8]
    1b30:	fa03 f302 	lsl.w	r3, r3, r2
    1b34:	ea6f 0203 	mvn.w	r2, r3
    1b38:	693b      	ldr	r3, [r7, #16]
    1b3a:	ea03 0302 	and.w	r3, r3, r2
    1b3e:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b46:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    1b48:	78fb      	ldrb	r3, [r7, #3]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d00c      	beq.n	1b68 <GPIO_PinRemapConfig+0xd8>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b58:	461a      	mov	r2, r3
    1b5a:	68bb      	ldr	r3, [r7, #8]
    1b5c:	fa03 f202 	lsl.w	r2, r3, r2
    1b60:	693b      	ldr	r3, [r7, #16]
    1b62:	ea43 0302 	orr.w	r3, r3, r2
    1b66:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    1b68:	4a03      	ldr	r2, [pc, #12]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1b6a:	693b      	ldr	r3, [r7, #16]
    1b6c:	6053      	str	r3, [r2, #4]
}
    1b6e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    1b72:	46bd      	mov	sp, r7
    1b74:	bc80      	pop	{r7}
    1b76:	4770      	bx	lr
    1b78:	40010000 	.word	0x40010000

00001b7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1b7c:	b480      	push	{r7}
    1b7e:	b085      	sub	sp, #20
    1b80:	af00      	add	r7, sp, #0
    1b82:	4603      	mov	r3, r0
    1b84:	460a      	mov	r2, r1
    1b86:	71fb      	strb	r3, [r7, #7]
    1b88:	4613      	mov	r3, r2
    1b8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1b8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1b90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1b92:	79bb      	ldrb	r3, [r7, #6]
    1b94:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1b98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b9c:	f04f 030f 	mov.w	r3, #15	; 0xf
    1ba0:	fa03 f302 	lsl.w	r3, r3, r2
    1ba4:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1ba6:	491d      	ldr	r1, [pc, #116]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1ba8:	79bb      	ldrb	r3, [r7, #6]
    1baa:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	4618      	mov	r0, r3
    1bb2:	4a1a      	ldr	r2, [pc, #104]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bb4:	79bb      	ldrb	r3, [r7, #6]
    1bb6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1bc4:	68fb      	ldr	r3, [r7, #12]
    1bc6:	ea6f 0303 	mvn.w	r3, r3
    1bca:	ea02 0203 	and.w	r2, r2, r3
    1bce:	f100 0302 	add.w	r3, r0, #2	; 0x2
    1bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1bd6:	4811      	ldr	r0, [pc, #68]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bd8:	79bb      	ldrb	r3, [r7, #6]
    1bda:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bde:	b2db      	uxtb	r3, r3
    1be0:	469c      	mov	ip, r3
    1be2:	4a0e      	ldr	r2, [pc, #56]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1be4:	79bb      	ldrb	r3, [r7, #6]
    1be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bea:	b2db      	uxtb	r3, r3
    1bec:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1bf4:	79fa      	ldrb	r2, [r7, #7]
    1bf6:	79bb      	ldrb	r3, [r7, #6]
    1bf8:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c00:	fa02 f303 	lsl.w	r3, r2, r3
    1c04:	ea41 0203 	orr.w	r2, r1, r3
    1c08:	f10c 0302 	add.w	r3, ip, #2	; 0x2
    1c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    1c10:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1c14:	46bd      	mov	sp, r7
    1c16:	bc80      	pop	{r7}
    1c18:	4770      	bx	lr
    1c1a:	46c0      	nop			(mov r8, r8)
    1c1c:	40010000 	.word	0x40010000

00001c20 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1c28:	4a03      	ldr	r2, [pc, #12]	(1c38 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	6013      	str	r3, [r2, #0]
}
    1c2e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1c32:	46bd      	mov	sp, r7
    1c34:	bc80      	pop	{r7}
    1c36:	4770      	bx	lr
    1c38:	422000dc 	.word	0x422000dc

00001c3c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1c3c:	b480      	push	{r7}
    1c3e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    1c40:	4a18      	ldr	r2, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c42:	4b18      	ldr	r3, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    1c4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
    1c4c:	4915      	ldr	r1, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c4e:	4b15      	ldr	r3, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c50:	685a      	ldr	r2, [r3, #4]
    1c52:	4b15      	ldr	r3, [pc, #84]	(1ca8 <RCC_DeInit+0x6c>)
    1c54:	ea02 0303 	and.w	r3, r2, r3
    1c58:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1c5a:	4a12      	ldr	r2, [pc, #72]	(1ca4 <RCC_DeInit+0x68>)
    1c5c:	4b11      	ldr	r3, [pc, #68]	(1ca4 <RCC_DeInit+0x68>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1c68:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1c6a:	4a0e      	ldr	r2, [pc, #56]	(1ca4 <RCC_DeInit+0x68>)
    1c6c:	4b0d      	ldr	r3, [pc, #52]	(1ca4 <RCC_DeInit+0x68>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1c76:	4a0b      	ldr	r2, [pc, #44]	(1ca4 <RCC_DeInit+0x68>)
    1c78:	4b0a      	ldr	r3, [pc, #40]	(1ca4 <RCC_DeInit+0x68>)
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1c80:	6053      	str	r3, [r2, #4]
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
    1c82:	4a08      	ldr	r2, [pc, #32]	(1ca4 <RCC_DeInit+0x68>)
    1c84:	4b07      	ldr	r3, [pc, #28]	(1ca4 <RCC_DeInit+0x68>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
    1c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
    1c8e:	4a05      	ldr	r2, [pc, #20]	(1ca4 <RCC_DeInit+0x68>)
    1c90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    1c94:	6093      	str	r3, [r2, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
    1c96:	4a03      	ldr	r2, [pc, #12]	(1ca4 <RCC_DeInit+0x68>)
    1c98:	f04f 0300 	mov.w	r3, #0	; 0x0
    1c9c:	62d3      	str	r3, [r2, #44]
#endif /* STM32F10X_CL */
}
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bc80      	pop	{r7}
    1ca2:	4770      	bx	lr
    1ca4:	40021000 	.word	0x40021000
    1ca8:	f0ff0000 	.word	0xf0ff0000

00001cac <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1cac:	b480      	push	{r7}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1cb4:	4a14      	ldr	r2, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb6:	4b14      	ldr	r3, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1cbe:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1cc0:	4a11      	ldr	r2, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc2:	4b11      	ldr	r3, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1cca:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	603b      	str	r3, [r7, #0]
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1cd6:	d004      	beq.n	1ce2 <RCC_HSEConfig+0x36>
    1cd8:	683b      	ldr	r3, [r7, #0]
    1cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1cde:	d007      	beq.n	1cf0 <RCC_HSEConfig+0x44>
    1ce0:	e00c      	b.n	1cfc <RCC_HSEConfig+0x50>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1ce2:	4a09      	ldr	r2, [pc, #36]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce4:	4b08      	ldr	r3, [pc, #32]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cec:	6013      	str	r3, [r2, #0]
    1cee:	e005      	b.n	1cfc <RCC_HSEConfig+0x50>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1cf0:	4a05      	ldr	r2, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf2:	4b05      	ldr	r3, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    1cfa:	6013      	str	r3, [r2, #0]
      break;
      
    default:
      break;
  }
}
    1cfc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			(mov r8, r8)
    1d08:	40021000 	.word	0x40021000

00001d0c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b082      	sub	sp, #8
    1d10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1d12:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d16:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1d18:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d1c:	71bb      	strb	r3, [r7, #6]
  FlagStatus HSEStatus = RESET;
    1d1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d22:	71fb      	strb	r3, [r7, #7]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1d24:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d28:	f000 fc68 	bl	25fc <RCC_GetFlagStatus>
    1d2c:	4603      	mov	r3, r0
    1d2e:	71fb      	strb	r3, [r7, #7]
    StartUpCounter++;  
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1d36:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
    1d38:	683b      	ldr	r3, [r7, #0]
    1d3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1d3e:	d002      	beq.n	1d46 <RCC_WaitForHSEStartUp+0x3a>
    1d40:	79fb      	ldrb	r3, [r7, #7]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d0ee      	beq.n	1d24 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1d46:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d4a:	f000 fc57 	bl	25fc <RCC_GetFlagStatus>
    1d4e:	4603      	mov	r3, r0
    1d50:	2b00      	cmp	r3, #0
    1d52:	d003      	beq.n	1d5c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1d54:	f04f 0301 	mov.w	r3, #1	; 0x1
    1d58:	71bb      	strb	r3, [r7, #6]
    1d5a:	e002      	b.n	1d62 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d60:	71bb      	strb	r3, [r7, #6]
  }  
  return (status);
    1d62:	79bb      	ldrb	r3, [r7, #6]
}
    1d64:	4618      	mov	r0, r3
    1d66:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	46c0      	nop			(mov r8, r8)

00001d70 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1d70:	b480      	push	{r7}
    1d72:	b085      	sub	sp, #20
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1d7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1d80:	4b0a      	ldr	r3, [pc, #40]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1d8c:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1d8e:	79fb      	ldrb	r3, [r7, #7]
    1d90:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	ea43 0302 	orr.w	r3, r3, r2
    1d9a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1d9c:	4a03      	ldr	r2, [pc, #12]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	6013      	str	r3, [r2, #0]
}
    1da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr
    1dac:	40021000 	.word	0x40021000

00001db0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	4603      	mov	r3, r0
    1db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1dba:	4a04      	ldr	r2, [pc, #16]	(1dcc <RCC_HSICmd+0x1c>)
    1dbc:	79fb      	ldrb	r3, [r7, #7]
    1dbe:	6013      	str	r3, [r2, #0]
}
    1dc0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1dc4:	46bd      	mov	sp, r7
    1dc6:	bc80      	pop	{r7}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			(mov r8, r8)
    1dcc:	42420000 	.word	0x42420000

00001dd0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b085      	sub	sp, #20
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1dda:	f04f 0300 	mov.w	r3, #0	; 0x0
    1dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1de0:	4b0b      	ldr	r3, [pc, #44]	(1e10 <RCC_PLLConfig+0x40>)
    1de2:	685b      	ldr	r3, [r3, #4]
    1de4:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1de6:	68fb      	ldr	r3, [r7, #12]
    1de8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
    1dec:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1dee:	687a      	ldr	r2, [r7, #4]
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	ea42 0203 	orr.w	r2, r2, r3
    1df6:	68fb      	ldr	r3, [r7, #12]
    1df8:	ea43 0302 	orr.w	r3, r3, r2
    1dfc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1dfe:	4a04      	ldr	r2, [pc, #16]	(1e10 <RCC_PLLConfig+0x40>)
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	6053      	str	r3, [r2, #4]
}
    1e04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e08:	46bd      	mov	sp, r7
    1e0a:	bc80      	pop	{r7}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			(mov r8, r8)
    1e10:	40021000 	.word	0x40021000

00001e14 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	4603      	mov	r3, r0
    1e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1e1e:	4a04      	ldr	r2, [pc, #16]	(1e30 <RCC_PLLCmd+0x1c>)
    1e20:	79fb      	ldrb	r3, [r7, #7]
    1e22:	6013      	str	r3, [r2, #0]
}
    1e24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1e28:	46bd      	mov	sp, r7
    1e2a:	bc80      	pop	{r7}
    1e2c:	4770      	bx	lr
    1e2e:	46c0      	nop			(mov r8, r8)
    1e30:	42420060 	.word	0x42420060

00001e34 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
    1e34:	b480      	push	{r7}
    1e36:	b085      	sub	sp, #20
    1e38:	af00      	add	r7, sp, #0
    1e3a:	6078      	str	r0, [r7, #4]
    1e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
    1e44:	4b0c      	ldr	r3, [pc, #48]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e46:	6adb      	ldr	r3, [r3, #44]
    1e48:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1e50:	f023 030f 	bic.w	r3, r3, #15	; 0xf
    1e54:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
    1e56:	687a      	ldr	r2, [r7, #4]
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	ea42 0203 	orr.w	r2, r2, r3
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	ea43 0302 	orr.w	r3, r3, r2
    1e64:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1e66:	4a04      	ldr	r2, [pc, #16]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	62d3      	str	r3, [r2, #44]
}
    1e6c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e70:	46bd      	mov	sp, r7
    1e72:	bc80      	pop	{r7}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			(mov r8, r8)
    1e78:	40021000 	.word	0x40021000

00001e7c <RCC_PREDIV2Config>:
  * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
  *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b085      	sub	sp, #20
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1e84:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
    1e8a:	4b0a      	ldr	r3, [pc, #40]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1e8c:	6adb      	ldr	r3, [r3, #44]
    1e8e:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e96:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	ea42 0303 	orr.w	r3, r2, r3
    1ea0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ea2:	4a04      	ldr	r2, [pc, #16]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	62d3      	str	r3, [r2, #44]
}
    1ea8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1eac:	46bd      	mov	sp, r7
    1eae:	bc80      	pop	{r7}
    1eb0:	4770      	bx	lr
    1eb2:	46c0      	nop			(mov r8, r8)
    1eb4:	40021000 	.word	0x40021000

00001eb8 <RCC_PLL2Config>:
  * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
  *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
{
    1eb8:	b480      	push	{r7}
    1eba:	b085      	sub	sp, #20
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1ec0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
    1ec6:	4b0a      	ldr	r3, [pc, #40]	(1ef0 <RCC_PLL2Config+0x38>)
    1ec8:	6adb      	ldr	r3, [r3, #44]
    1eca:	60fb      	str	r3, [r7, #12]
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
    1ecc:	68fb      	ldr	r3, [r7, #12]
    1ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    1ed2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
    1ed4:	68fa      	ldr	r2, [r7, #12]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	ea42 0303 	orr.w	r3, r2, r3
    1edc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ede:	4a04      	ldr	r2, [pc, #16]	(1ef0 <RCC_PLL2Config+0x38>)
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	62d3      	str	r3, [r2, #44]
}
    1ee4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ee8:	46bd      	mov	sp, r7
    1eea:	bc80      	pop	{r7}
    1eec:	4770      	bx	lr
    1eee:	46c0      	nop			(mov r8, r8)
    1ef0:	40021000 	.word	0x40021000

00001ef4 <RCC_PLL2Cmd>:
  *   - This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL2Cmd(FunctionalState NewState)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	4603      	mov	r3, r0
    1efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
    1efe:	4a04      	ldr	r2, [pc, #16]	(1f10 <RCC_PLL2Cmd+0x1c>)
    1f00:	79fb      	ldrb	r3, [r7, #7]
    1f02:	6013      	str	r3, [r2, #0]
}
    1f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f08:	46bd      	mov	sp, r7
    1f0a:	bc80      	pop	{r7}
    1f0c:	4770      	bx	lr
    1f0e:	46c0      	nop			(mov r8, r8)
    1f10:	42420068 	.word	0x42420068

00001f14 <RCC_PLL3Config>:
  * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
  *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
{
    1f14:	b480      	push	{r7}
    1f16:	b085      	sub	sp, #20
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
    1f22:	4b0a      	ldr	r3, [pc, #40]	(1f4c <RCC_PLL3Config+0x38>)
    1f24:	6adb      	ldr	r3, [r3, #44]
    1f26:	60fb      	str	r3, [r7, #12]
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    1f2e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
    1f30:	68fa      	ldr	r2, [r7, #12]
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	ea42 0303 	orr.w	r3, r2, r3
    1f38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1f3a:	4a04      	ldr	r2, [pc, #16]	(1f4c <RCC_PLL3Config+0x38>)
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	62d3      	str	r3, [r2, #44]
}
    1f40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1f44:	46bd      	mov	sp, r7
    1f46:	bc80      	pop	{r7}
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			(mov r8, r8)
    1f4c:	40021000 	.word	0x40021000

00001f50 <RCC_PLL3Cmd>:
  * @note   This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL3Cmd(FunctionalState NewState)
{
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	4603      	mov	r3, r0
    1f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
    1f5a:	4a04      	ldr	r2, [pc, #16]	(1f6c <RCC_PLL3Cmd+0x1c>)
    1f5c:	79fb      	ldrb	r3, [r7, #7]
    1f5e:	6013      	str	r3, [r2, #0]
}
    1f60:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f64:	46bd      	mov	sp, r7
    1f66:	bc80      	pop	{r7}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			(mov r8, r8)
    1f6c:	42420070 	.word	0x42420070

00001f70 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1f70:	b480      	push	{r7}
    1f72:	b085      	sub	sp, #20
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f78:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1f7e:	4b0a      	ldr	r3, [pc, #40]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f80:	685b      	ldr	r3, [r3, #4]
    1f82:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    1f8a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1f8c:	68fa      	ldr	r2, [r7, #12]
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	ea42 0303 	orr.w	r3, r2, r3
    1f94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1f96:	4a04      	ldr	r2, [pc, #16]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	6053      	str	r3, [r2, #4]
}
    1f9c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bc80      	pop	{r7}
    1fa4:	4770      	bx	lr
    1fa6:	46c0      	nop			(mov r8, r8)
    1fa8:	40021000 	.word	0x40021000

00001fac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1fac:	b480      	push	{r7}
    1fae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1fb0:	4b04      	ldr	r3, [pc, #16]	(1fc4 <RCC_GetSYSCLKSource+0x18>)
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
    1fba:	4618      	mov	r0, r3
    1fbc:	46bd      	mov	sp, r7
    1fbe:	bc80      	pop	{r7}
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			(mov r8, r8)
    1fc4:	40021000 	.word	0x40021000

00001fc8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1fc8:	b480      	push	{r7}
    1fca:	b085      	sub	sp, #20
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1fd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1fd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1fd6:	4b0a      	ldr	r3, [pc, #40]	(2000 <RCC_HCLKConfig+0x38>)
    1fd8:	685b      	ldr	r3, [r3, #4]
    1fda:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fe2:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1fe4:	68fa      	ldr	r2, [r7, #12]
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	ea42 0303 	orr.w	r3, r2, r3
    1fec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1fee:	4a04      	ldr	r2, [pc, #16]	(2000 <RCC_HCLKConfig+0x38>)
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	6053      	str	r3, [r2, #4]
}
    1ff4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bc80      	pop	{r7}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			(mov r8, r8)
    2000:	40021000 	.word	0x40021000

00002004 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    2004:	b480      	push	{r7}
    2006:	b085      	sub	sp, #20
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    200c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2010:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2012:	4b0a      	ldr	r3, [pc, #40]	(203c <RCC_PCLK1Config+0x38>)
    2014:	685b      	ldr	r3, [r3, #4]
    2016:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    201e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    2020:	68fa      	ldr	r2, [r7, #12]
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	ea42 0303 	orr.w	r3, r2, r3
    2028:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    202a:	4a04      	ldr	r2, [pc, #16]	(203c <RCC_PCLK1Config+0x38>)
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	6053      	str	r3, [r2, #4]
}
    2030:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2034:	46bd      	mov	sp, r7
    2036:	bc80      	pop	{r7}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			(mov r8, r8)
    203c:	40021000 	.word	0x40021000

00002040 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    2040:	b480      	push	{r7}
    2042:	b085      	sub	sp, #20
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2048:	f04f 0300 	mov.w	r3, #0	; 0x0
    204c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    204e:	4b0b      	ldr	r3, [pc, #44]	(207c <RCC_PCLK2Config+0x3c>)
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    205a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	ea43 0302 	orr.w	r3, r3, r2
    2068:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    206a:	4a04      	ldr	r2, [pc, #16]	(207c <RCC_PCLK2Config+0x3c>)
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	6053      	str	r3, [r2, #4]
}
    2070:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2074:	46bd      	mov	sp, r7
    2076:	bc80      	pop	{r7}
    2078:	4770      	bx	lr
    207a:	46c0      	nop			(mov r8, r8)
    207c:	40021000 	.word	0x40021000

00002080 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    2080:	b480      	push	{r7}
    2082:	b083      	sub	sp, #12
    2084:	af00      	add	r7, sp, #0
    2086:	4603      	mov	r3, r0
    2088:	460a      	mov	r2, r1
    208a:	71fb      	strb	r3, [r7, #7]
    208c:	4613      	mov	r3, r2
    208e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2090:	79bb      	ldrb	r3, [r7, #6]
    2092:	2b00      	cmp	r3, #0
    2094:	d009      	beq.n	20aa <RCC_ITConfig+0x2a>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    2096:	490d      	ldr	r1, [pc, #52]	(20cc <RCC_ITConfig+0x4c>)
    2098:	4b0c      	ldr	r3, [pc, #48]	(20cc <RCC_ITConfig+0x4c>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b2da      	uxtb	r2, r3
    209e:	79fb      	ldrb	r3, [r7, #7]
    20a0:	ea42 0303 	orr.w	r3, r2, r3
    20a4:	b2db      	uxtb	r3, r3
    20a6:	700b      	strb	r3, [r1, #0]
    20a8:	e00b      	b.n	20c2 <RCC_ITConfig+0x42>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    20aa:	4908      	ldr	r1, [pc, #32]	(20cc <RCC_ITConfig+0x4c>)
    20ac:	4b07      	ldr	r3, [pc, #28]	(20cc <RCC_ITConfig+0x4c>)
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	b2da      	uxtb	r2, r3
    20b2:	79fb      	ldrb	r3, [r7, #7]
    20b4:	ea6f 0303 	mvn.w	r3, r3
    20b8:	b2db      	uxtb	r3, r3
    20ba:	ea02 0303 	and.w	r3, r2, r3
    20be:	b2db      	uxtb	r3, r3
    20c0:	700b      	strb	r3, [r1, #0]
  }
}
    20c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20c6:	46bd      	mov	sp, r7
    20c8:	bc80      	pop	{r7}
    20ca:	4770      	bx	lr
    20cc:	40021009 	.word	0x40021009

000020d0 <RCC_OTGFSCLKConfig>:
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  * @retval None
  */
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
    20d0:	b480      	push	{r7}
    20d2:	b083      	sub	sp, #12
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
    20d8:	4a03      	ldr	r2, [pc, #12]	(20e8 <RCC_OTGFSCLKConfig+0x18>)
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	6013      	str	r3, [r2, #0]
}
    20de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20e2:	46bd      	mov	sp, r7
    20e4:	bc80      	pop	{r7}
    20e6:	4770      	bx	lr
    20e8:	424200d8 	.word	0x424200d8

000020ec <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    20ec:	b480      	push	{r7}
    20ee:	b085      	sub	sp, #20
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    20f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    20f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    20fa:	4b0a      	ldr	r3, [pc, #40]	(2124 <RCC_ADCCLKConfig+0x38>)
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    2106:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    2108:	68fa      	ldr	r2, [r7, #12]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	ea42 0303 	orr.w	r3, r2, r3
    2110:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2112:	4a04      	ldr	r2, [pc, #16]	(2124 <RCC_ADCCLKConfig+0x38>)
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	6053      	str	r3, [r2, #4]
}
    2118:	f107 0714 	add.w	r7, r7, #20	; 0x14
    211c:	46bd      	mov	sp, r7
    211e:	bc80      	pop	{r7}
    2120:	4770      	bx	lr
    2122:	46c0      	nop			(mov r8, r8)
    2124:	40021000 	.word	0x40021000

00002128 <RCC_I2S2CLKConfig>:
  *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
  *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
  * @retval None
  */
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
    2128:	b480      	push	{r7}
    212a:	b083      	sub	sp, #12
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
    2130:	4a03      	ldr	r2, [pc, #12]	(2140 <RCC_I2S2CLKConfig+0x18>)
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	6013      	str	r3, [r2, #0]
}
    2136:	f107 070c 	add.w	r7, r7, #12	; 0xc
    213a:	46bd      	mov	sp, r7
    213c:	bc80      	pop	{r7}
    213e:	4770      	bx	lr
    2140:	424205c4 	.word	0x424205c4

00002144 <RCC_I2S3CLKConfig>:
  *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
  *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
  * @retval None
  */
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
    2144:	b480      	push	{r7}
    2146:	b083      	sub	sp, #12
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
    214c:	4a03      	ldr	r2, [pc, #12]	(215c <RCC_I2S3CLKConfig+0x18>)
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	6013      	str	r3, [r2, #0]
}
    2152:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2156:	46bd      	mov	sp, r7
    2158:	bc80      	pop	{r7}
    215a:	4770      	bx	lr
    215c:	424205c8 	.word	0x424205c8

00002160 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    2160:	b480      	push	{r7}
    2162:	b083      	sub	sp, #12
    2164:	af00      	add	r7, sp, #0
    2166:	4603      	mov	r3, r0
    2168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    216a:	4a0f      	ldr	r2, [pc, #60]	(21a8 <RCC_LSEConfig+0x48>)
    216c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2170:	7013      	strb	r3, [r2, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2172:	4a0d      	ldr	r2, [pc, #52]	(21a8 <RCC_LSEConfig+0x48>)
    2174:	f04f 0300 	mov.w	r3, #0	; 0x0
    2178:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    217a:	79fb      	ldrb	r3, [r7, #7]
    217c:	603b      	str	r3, [r7, #0]
    217e:	683b      	ldr	r3, [r7, #0]
    2180:	2b01      	cmp	r3, #1
    2182:	d003      	beq.n	218c <RCC_LSEConfig+0x2c>
    2184:	683b      	ldr	r3, [r7, #0]
    2186:	2b04      	cmp	r3, #4
    2188:	d005      	beq.n	2196 <RCC_LSEConfig+0x36>
    218a:	e008      	b.n	219e <RCC_LSEConfig+0x3e>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    218c:	4b06      	ldr	r3, [pc, #24]	(21a8 <RCC_LSEConfig+0x48>)
    218e:	f04f 0201 	mov.w	r2, #1	; 0x1
    2192:	701a      	strb	r2, [r3, #0]
    2194:	e003      	b.n	219e <RCC_LSEConfig+0x3e>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    2196:	4b04      	ldr	r3, [pc, #16]	(21a8 <RCC_LSEConfig+0x48>)
    2198:	f04f 0205 	mov.w	r2, #5	; 0x5
    219c:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    219e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21a2:	46bd      	mov	sp, r7
    21a4:	bc80      	pop	{r7}
    21a6:	4770      	bx	lr
    21a8:	40021020 	.word	0x40021020

000021ac <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    21ac:	b480      	push	{r7}
    21ae:	b083      	sub	sp, #12
    21b0:	af00      	add	r7, sp, #0
    21b2:	4603      	mov	r3, r0
    21b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    21b6:	4a04      	ldr	r2, [pc, #16]	(21c8 <RCC_LSICmd+0x1c>)
    21b8:	79fb      	ldrb	r3, [r7, #7]
    21ba:	6013      	str	r3, [r2, #0]
}
    21bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21c0:	46bd      	mov	sp, r7
    21c2:	bc80      	pop	{r7}
    21c4:	4770      	bx	lr
    21c6:	46c0      	nop			(mov r8, r8)
    21c8:	42420480 	.word	0x42420480

000021cc <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    21cc:	b480      	push	{r7}
    21ce:	b083      	sub	sp, #12
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    21d4:	4905      	ldr	r1, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d6:	4b05      	ldr	r3, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d8:	6a1a      	ldr	r2, [r3, #32]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	ea42 0303 	orr.w	r3, r2, r3
    21e0:	620b      	str	r3, [r1, #32]
}
    21e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21e6:	46bd      	mov	sp, r7
    21e8:	bc80      	pop	{r7}
    21ea:	4770      	bx	lr
    21ec:	40021000 	.word	0x40021000

000021f0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    21f0:	b480      	push	{r7}
    21f2:	b083      	sub	sp, #12
    21f4:	af00      	add	r7, sp, #0
    21f6:	4603      	mov	r3, r0
    21f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    21fa:	4a04      	ldr	r2, [pc, #16]	(220c <RCC_RTCCLKCmd+0x1c>)
    21fc:	79fb      	ldrb	r3, [r7, #7]
    21fe:	6013      	str	r3, [r2, #0]
}
    2200:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2204:	46bd      	mov	sp, r7
    2206:	bc80      	pop	{r7}
    2208:	4770      	bx	lr
    220a:	46c0      	nop			(mov r8, r8)
    220c:	4242043c 	.word	0x4242043c

00002210 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    2210:	b480      	push	{r7}
    2212:	b08b      	sub	sp, #44
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    2218:	f04f 0300 	mov.w	r3, #0	; 0x0
    221c:	60bb      	str	r3, [r7, #8]
    221e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2222:	60fb      	str	r3, [r7, #12]
    2224:	f04f 0300 	mov.w	r3, #0	; 0x0
    2228:	613b      	str	r3, [r7, #16]
    222a:	f04f 0300 	mov.w	r3, #0	; 0x0
    222e:	617b      	str	r3, [r7, #20]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
    2230:	f04f 0300 	mov.w	r3, #0	; 0x0
    2234:	61bb      	str	r3, [r7, #24]
    2236:	f04f 0300 	mov.w	r3, #0	; 0x0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2240:	623b      	str	r3, [r7, #32]
    2242:	f04f 0300 	mov.w	r3, #0	; 0x0
    2246:	627b      	str	r3, [r7, #36]
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    2248:	4b68      	ldr	r3, [pc, #416]	(23ec <RCC_GetClocksFreq+0x1dc>)
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	f003 030c 	and.w	r3, r3, #12	; 0xc
    2250:	60bb      	str	r3, [r7, #8]
  
  switch (tmp)
    2252:	68bb      	ldr	r3, [r7, #8]
    2254:	603b      	str	r3, [r7, #0]
    2256:	683b      	ldr	r3, [r7, #0]
    2258:	2b04      	cmp	r3, #4
    225a:	d009      	beq.n	2270 <RCC_GetClocksFreq+0x60>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b08      	cmp	r3, #8
    2260:	d00a      	beq.n	2278 <RCC_GetClocksFreq+0x68>
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	2b00      	cmp	r3, #0
    2266:	d165      	bne.n	2334 <RCC_GetClocksFreq+0x124>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	4b61      	ldr	r3, [pc, #388]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    226c:	6013      	str	r3, [r2, #0]
    226e:	e064      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    2270:	687a      	ldr	r2, [r7, #4]
    2272:	4b60      	ldr	r3, [pc, #384]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2274:	6013      	str	r3, [r2, #0]
    2276:	e060      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    2278:	4b5c      	ldr	r3, [pc, #368]	(23ec <RCC_GetClocksFreq+0x1dc>)
    227a:	685b      	ldr	r3, [r3, #4]
    227c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    2280:	60fb      	str	r3, [r7, #12]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    2282:	4b5a      	ldr	r3, [pc, #360]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    228a:	613b      	str	r3, [r7, #16]
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
#else
      pllmull = pllmull >> 18;
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2292:	60fb      	str	r3, [r7, #12]
      
      if (pllmull != 0x0D)
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2b0d      	cmp	r3, #13
    2298:	d004      	beq.n	22a4 <RCC_GetClocksFreq+0x94>
      {
         pllmull += 2;
    229a:	68fb      	ldr	r3, [r7, #12]
    229c:	f103 0302 	add.w	r3, r3, #2	; 0x2
    22a0:	60fb      	str	r3, [r7, #12]
    22a2:	e002      	b.n	22aa <RCC_GetClocksFreq+0x9a>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
    22a4:	f04f 0306 	mov.w	r3, #6	; 0x6
    22a8:	60fb      	str	r3, [r7, #12]
      }
            
      if (pllsource == 0x00)
    22aa:	693b      	ldr	r3, [r7, #16]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d106      	bne.n	22be <RCC_GetClocksFreq+0xae>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    22b0:	68fa      	ldr	r2, [r7, #12]
    22b2:	4b51      	ldr	r3, [pc, #324]	(23f8 <RCC_GetClocksFreq+0x1e8>)
    22b4:	fb03 f202 	mul.w	r2, r3, r2
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	601a      	str	r2, [r3, #0]
    22bc:	e03d      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
    22be:	4b4b      	ldr	r3, [pc, #300]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22c0:	6adb      	ldr	r3, [r3, #44]
    22c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    22c6:	61bb      	str	r3, [r7, #24]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
    22c8:	4b48      	ldr	r3, [pc, #288]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22ca:	6adb      	ldr	r3, [r3, #44]
    22cc:	f003 030f 	and.w	r3, r3, #15	; 0xf
    22d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    22d4:	61fb      	str	r3, [r7, #28]
        
        if (prediv1source == 0)
    22d6:	69bb      	ldr	r3, [r7, #24]
    22d8:	2b00      	cmp	r3, #0
    22da:	d109      	bne.n	22f0 <RCC_GetClocksFreq+0xe0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
    22dc:	4a45      	ldr	r2, [pc, #276]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    22de:	69fb      	ldr	r3, [r7, #28]
    22e0:	fbb2 f2f3 	udiv	r2, r2, r3
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	fb03 f202 	mul.w	r2, r3, r2
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	601a      	str	r2, [r3, #0]
    22ee:	e024      	b.n	233a <RCC_GetClocksFreq+0x12a>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
    22f0:	4b3e      	ldr	r3, [pc, #248]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22f2:	6adb      	ldr	r3, [r3, #44]
    22f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    22f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    22fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    2300:	623b      	str	r3, [r7, #32]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
    2302:	4b3a      	ldr	r3, [pc, #232]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2304:	6adb      	ldr	r3, [r3, #44]
    2306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    230a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    230e:	f103 0302 	add.w	r3, r3, #2	; 0x2
    2312:	627b      	str	r3, [r7, #36]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
    2314:	4a37      	ldr	r2, [pc, #220]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2316:	6a3b      	ldr	r3, [r7, #32]
    2318:	fbb2 f2f3 	udiv	r2, r2, r3
    231c:	6a7b      	ldr	r3, [r7, #36]
    231e:	fb03 f202 	mul.w	r2, r3, r2
    2322:	69fb      	ldr	r3, [r7, #28]
    2324:	fbb2 f2f3 	udiv	r2, r2, r3
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	fb03 f202 	mul.w	r2, r3, r2
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	601a      	str	r2, [r3, #0]
    2332:	e002      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2334:	687a      	ldr	r2, [r7, #4]
    2336:	4b2e      	ldr	r3, [pc, #184]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    2338:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    233a:	4b2c      	ldr	r3, [pc, #176]	(23ec <RCC_GetClocksFreq+0x1dc>)
    233c:	685b      	ldr	r3, [r3, #4]
    233e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2342:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    2344:	68bb      	ldr	r3, [r7, #8]
    2346:	ea4f 1313 	mov.w	r3, r3, lsr #4
    234a:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    234c:	68ba      	ldr	r2, [r7, #8]
    234e:	4b2b      	ldr	r3, [pc, #172]	(23fc <RCC_GetClocksFreq+0x1ec>)
    2350:	5c9b      	ldrb	r3, [r3, r2]
    2352:	b2db      	uxtb	r3, r3
    2354:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	fa22 f203 	lsr.w	r2, r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    2364:	4b21      	ldr	r3, [pc, #132]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    236c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    236e:	68bb      	ldr	r3, [r7, #8]
    2370:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2374:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    2376:	68ba      	ldr	r2, [r7, #8]
    2378:	4b20      	ldr	r3, [pc, #128]	(23fc <RCC_GetClocksFreq+0x1ec>)
    237a:	5c9b      	ldrb	r3, [r3, r2]
    237c:	b2db      	uxtb	r3, r3
    237e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	685a      	ldr	r2, [r3, #4]
    2384:	697b      	ldr	r3, [r7, #20]
    2386:	fa22 f203 	lsr.w	r2, r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    238e:	4b17      	ldr	r3, [pc, #92]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    2396:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    239e:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    23a0:	68ba      	ldr	r2, [r7, #8]
    23a2:	4b16      	ldr	r3, [pc, #88]	(23fc <RCC_GetClocksFreq+0x1ec>)
    23a4:	5c9b      	ldrb	r3, [r3, r2]
    23a6:	b2db      	uxtb	r3, r3
    23a8:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	685a      	ldr	r2, [r3, #4]
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	fa22 f203 	lsr.w	r2, r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    23b8:	4b0c      	ldr	r3, [pc, #48]	(23ec <RCC_GetClocksFreq+0x1dc>)
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    23c0:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    23c2:	68bb      	ldr	r3, [r7, #8]
    23c4:	ea4f 3393 	mov.w	r3, r3, lsr #14
    23c8:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    23ca:	68ba      	ldr	r2, [r7, #8]
    23cc:	4b0c      	ldr	r3, [pc, #48]	(2400 <RCC_GetClocksFreq+0x1f0>)
    23ce:	5c9b      	ldrb	r3, [r3, r2]
    23d0:	b2db      	uxtb	r3, r3
    23d2:	617b      	str	r3, [r7, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68da      	ldr	r2, [r3, #12]
    23d8:	697b      	ldr	r3, [r7, #20]
    23da:	fbb2 f2f3 	udiv	r2, r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	611a      	str	r2, [r3, #16]
}
    23e2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    23e6:	46bd      	mov	sp, r7
    23e8:	bc80      	pop	{r7}
    23ea:	4770      	bx	lr
    23ec:	40021000 	.word	0x40021000
    23f0:	007a1200 	.word	0x007a1200
    23f4:	017d7840 	.word	0x017d7840
    23f8:	003d0900 	.word	0x003d0900
    23fc:	20000000 	.word	0x20000000
    2400:	20000010 	.word	0x20000010

00002404 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	460b      	mov	r3, r1
    240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2410:	78fb      	ldrb	r3, [r7, #3]
    2412:	2b00      	cmp	r3, #0
    2414:	d007      	beq.n	2426 <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    2416:	490b      	ldr	r1, [pc, #44]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2418:	4b0a      	ldr	r3, [pc, #40]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    241a:	695a      	ldr	r2, [r3, #20]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	ea42 0303 	orr.w	r3, r2, r3
    2422:	614b      	str	r3, [r1, #20]
    2424:	e008      	b.n	2438 <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    2426:	4907      	ldr	r1, [pc, #28]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2428:	4b06      	ldr	r3, [pc, #24]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    242a:	695a      	ldr	r2, [r3, #20]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	ea6f 0303 	mvn.w	r3, r3
    2432:	ea02 0303 	and.w	r3, r2, r3
    2436:	614b      	str	r3, [r1, #20]
  }
}
    2438:	f107 070c 	add.w	r7, r7, #12	; 0xc
    243c:	46bd      	mov	sp, r7
    243e:	bc80      	pop	{r7}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			(mov r8, r8)
    2444:	40021000 	.word	0x40021000

00002448 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2448:	b480      	push	{r7}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2454:	78fb      	ldrb	r3, [r7, #3]
    2456:	2b00      	cmp	r3, #0
    2458:	d007      	beq.n	246a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    245a:	490b      	ldr	r1, [pc, #44]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245c:	4b0a      	ldr	r3, [pc, #40]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245e:	699a      	ldr	r2, [r3, #24]
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	ea42 0303 	orr.w	r3, r2, r3
    2466:	618b      	str	r3, [r1, #24]
    2468:	e008      	b.n	247c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    246a:	4907      	ldr	r1, [pc, #28]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246c:	4b06      	ldr	r3, [pc, #24]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246e:	699a      	ldr	r2, [r3, #24]
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	ea6f 0303 	mvn.w	r3, r3
    2476:	ea02 0303 	and.w	r3, r2, r3
    247a:	618b      	str	r3, [r1, #24]
  }
}
    247c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2480:	46bd      	mov	sp, r7
    2482:	bc80      	pop	{r7}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			(mov r8, r8)
    2488:	40021000 	.word	0x40021000

0000248c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    248c:	b480      	push	{r7}
    248e:	b083      	sub	sp, #12
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    2494:	460b      	mov	r3, r1
    2496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2498:	78fb      	ldrb	r3, [r7, #3]
    249a:	2b00      	cmp	r3, #0
    249c:	d007      	beq.n	24ae <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    249e:	490b      	ldr	r1, [pc, #44]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a0:	4b0a      	ldr	r3, [pc, #40]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a2:	69da      	ldr	r2, [r3, #28]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	ea42 0303 	orr.w	r3, r2, r3
    24aa:	61cb      	str	r3, [r1, #28]
    24ac:	e008      	b.n	24c0 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    24ae:	4907      	ldr	r1, [pc, #28]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b0:	4b06      	ldr	r3, [pc, #24]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b2:	69da      	ldr	r2, [r3, #28]
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	ea6f 0303 	mvn.w	r3, r3
    24ba:	ea02 0303 	and.w	r3, r2, r3
    24be:	61cb      	str	r3, [r1, #28]
  }
}
    24c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    24c4:	46bd      	mov	sp, r7
    24c6:	bc80      	pop	{r7}
    24c8:	4770      	bx	lr
    24ca:	46c0      	nop			(mov r8, r8)
    24cc:	40021000 	.word	0x40021000

000024d0 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    24d0:	b480      	push	{r7}
    24d2:	b083      	sub	sp, #12
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    24d8:	460b      	mov	r3, r1
    24da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    24dc:	78fb      	ldrb	r3, [r7, #3]
    24de:	2b00      	cmp	r3, #0
    24e0:	d007      	beq.n	24f2 <RCC_AHBPeriphResetCmd+0x22>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
    24e2:	490b      	ldr	r1, [pc, #44]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e4:	4b0a      	ldr	r3, [pc, #40]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e6:	6a9a      	ldr	r2, [r3, #40]
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	ea42 0303 	orr.w	r3, r2, r3
    24ee:	628b      	str	r3, [r1, #40]
    24f0:	e008      	b.n	2504 <RCC_AHBPeriphResetCmd+0x34>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
    24f2:	4907      	ldr	r1, [pc, #28]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f4:	4b06      	ldr	r3, [pc, #24]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f6:	6a9a      	ldr	r2, [r3, #40]
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	ea6f 0303 	mvn.w	r3, r3
    24fe:	ea02 0303 	and.w	r3, r2, r3
    2502:	628b      	str	r3, [r1, #40]
  }
}
    2504:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2508:	46bd      	mov	sp, r7
    250a:	bc80      	pop	{r7}
    250c:	4770      	bx	lr
    250e:	46c0      	nop			(mov r8, r8)
    2510:	40021000 	.word	0x40021000

00002514 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2514:	b480      	push	{r7}
    2516:	b083      	sub	sp, #12
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	460b      	mov	r3, r1
    251e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2520:	78fb      	ldrb	r3, [r7, #3]
    2522:	2b00      	cmp	r3, #0
    2524:	d007      	beq.n	2536 <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2526:	490b      	ldr	r1, [pc, #44]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2528:	4b0a      	ldr	r3, [pc, #40]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    252a:	68da      	ldr	r2, [r3, #12]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	ea42 0303 	orr.w	r3, r2, r3
    2532:	60cb      	str	r3, [r1, #12]
    2534:	e008      	b.n	2548 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2536:	4907      	ldr	r1, [pc, #28]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2538:	4b06      	ldr	r3, [pc, #24]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    253a:	68da      	ldr	r2, [r3, #12]
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	ea6f 0303 	mvn.w	r3, r3
    2542:	ea02 0303 	and.w	r3, r2, r3
    2546:	60cb      	str	r3, [r1, #12]
  }
}
    2548:	f107 070c 	add.w	r7, r7, #12	; 0xc
    254c:	46bd      	mov	sp, r7
    254e:	bc80      	pop	{r7}
    2550:	4770      	bx	lr
    2552:	46c0      	nop			(mov r8, r8)
    2554:	40021000 	.word	0x40021000

00002558 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2558:	b480      	push	{r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	460b      	mov	r3, r1
    2562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2564:	78fb      	ldrb	r3, [r7, #3]
    2566:	2b00      	cmp	r3, #0
    2568:	d007      	beq.n	257a <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    256a:	490b      	ldr	r1, [pc, #44]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256c:	4b0a      	ldr	r3, [pc, #40]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256e:	691a      	ldr	r2, [r3, #16]
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	ea42 0303 	orr.w	r3, r2, r3
    2576:	610b      	str	r3, [r1, #16]
    2578:	e008      	b.n	258c <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    257a:	4907      	ldr	r1, [pc, #28]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257c:	4b06      	ldr	r3, [pc, #24]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257e:	691a      	ldr	r2, [r3, #16]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	ea6f 0303 	mvn.w	r3, r3
    2586:	ea02 0303 	and.w	r3, r2, r3
    258a:	610b      	str	r3, [r1, #16]
  }
}
    258c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2590:	46bd      	mov	sp, r7
    2592:	bc80      	pop	{r7}
    2594:	4770      	bx	lr
    2596:	46c0      	nop			(mov r8, r8)
    2598:	40021000 	.word	0x40021000

0000259c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	4603      	mov	r3, r0
    25a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    25a6:	4a04      	ldr	r2, [pc, #16]	(25b8 <RCC_BackupResetCmd+0x1c>)
    25a8:	79fb      	ldrb	r3, [r7, #7]
    25aa:	6013      	str	r3, [r2, #0]
}
    25ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25b0:	46bd      	mov	sp, r7
    25b2:	bc80      	pop	{r7}
    25b4:	4770      	bx	lr
    25b6:	46c0      	nop			(mov r8, r8)
    25b8:	42420440 	.word	0x42420440

000025bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    25bc:	b480      	push	{r7}
    25be:	b083      	sub	sp, #12
    25c0:	af00      	add	r7, sp, #0
    25c2:	4603      	mov	r3, r0
    25c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    25c6:	4a04      	ldr	r2, [pc, #16]	(25d8 <RCC_ClockSecuritySystemCmd+0x1c>)
    25c8:	79fb      	ldrb	r3, [r7, #7]
    25ca:	6013      	str	r3, [r2, #0]
}
    25cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25d0:	46bd      	mov	sp, r7
    25d2:	bc80      	pop	{r7}
    25d4:	4770      	bx	lr
    25d6:	46c0      	nop			(mov r8, r8)
    25d8:	4242004c 	.word	0x4242004c

000025dc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    25dc:	b480      	push	{r7}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
    25e2:	4603      	mov	r3, r0
    25e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    25e6:	4a04      	ldr	r2, [pc, #16]	(25f8 <RCC_MCOConfig+0x1c>)
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	7013      	strb	r3, [r2, #0]
}
    25ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25f0:	46bd      	mov	sp, r7
    25f2:	bc80      	pop	{r7}
    25f4:	4770      	bx	lr
    25f6:	46c0      	nop			(mov r8, r8)
    25f8:	40021007 	.word	0x40021007

000025fc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    25fc:	b480      	push	{r7}
    25fe:	b087      	sub	sp, #28
    2600:	af00      	add	r7, sp, #0
    2602:	4603      	mov	r3, r0
    2604:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2606:	f04f 0300 	mov.w	r3, #0	; 0x0
    260a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    260c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2610:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    2612:	f04f 0300 	mov.w	r3, #0	; 0x0
    2616:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2618:	79fb      	ldrb	r3, [r7, #7]
    261a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    261e:	b2db      	uxtb	r3, r3
    2620:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	2b01      	cmp	r3, #1
    2626:	d103      	bne.n	2630 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    2628:	4b14      	ldr	r3, [pc, #80]	(267c <RCC_GetFlagStatus+0x80>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	613b      	str	r3, [r7, #16]
    262e:	e009      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	2b02      	cmp	r3, #2
    2634:	d103      	bne.n	263e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    2636:	4b11      	ldr	r3, [pc, #68]	(267c <RCC_GetFlagStatus+0x80>)
    2638:	6a1b      	ldr	r3, [r3, #32]
    263a:	613b      	str	r3, [r7, #16]
    263c:	e002      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    263e:	4b0f      	ldr	r3, [pc, #60]	(267c <RCC_GetFlagStatus+0x80>)
    2640:	6a5b      	ldr	r3, [r3, #36]
    2642:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2644:	79fb      	ldrb	r3, [r7, #7]
    2646:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    264a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    264c:	68fa      	ldr	r2, [r7, #12]
    264e:	693b      	ldr	r3, [r7, #16]
    2650:	fa23 f302 	lsr.w	r3, r3, r2
    2654:	f003 0301 	and.w	r3, r3, #1	; 0x1
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d003      	beq.n	2666 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
    265e:	f04f 0301 	mov.w	r3, #1	; 0x1
    2662:	75fb      	strb	r3, [r7, #23]
    2664:	e002      	b.n	266c <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
    2666:	f04f 0300 	mov.w	r3, #0	; 0x0
    266a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the flag status */
  return bitstatus;
    266c:	7dfb      	ldrb	r3, [r7, #23]
}
    266e:	4618      	mov	r0, r3
    2670:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2674:	46bd      	mov	sp, r7
    2676:	bc80      	pop	{r7}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			(mov r8, r8)
    267c:	40021000 	.word	0x40021000

00002680 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    2680:	b480      	push	{r7}
    2682:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    2684:	4a04      	ldr	r2, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2686:	4b04      	ldr	r3, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2688:	6a5b      	ldr	r3, [r3, #36]
    268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    268e:	6253      	str	r3, [r2, #36]
}
    2690:	46bd      	mov	sp, r7
    2692:	bc80      	pop	{r7}
    2694:	4770      	bx	lr
    2696:	46c0      	nop			(mov r8, r8)
    2698:	40021000 	.word	0x40021000

0000269c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    269c:	b480      	push	{r7}
    269e:	b085      	sub	sp, #20
    26a0:	af00      	add	r7, sp, #0
    26a2:	4603      	mov	r3, r0
    26a4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    26a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    26aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    26ac:	4b0a      	ldr	r3, [pc, #40]	(26d8 <RCC_GetITStatus+0x3c>)
    26ae:	689a      	ldr	r2, [r3, #8]
    26b0:	79fb      	ldrb	r3, [r7, #7]
    26b2:	ea02 0303 	and.w	r3, r2, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	d003      	beq.n	26c2 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    26ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    26be:	73fb      	strb	r3, [r7, #15]
    26c0:	e002      	b.n	26c8 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    26c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    26c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    26c8:	7bfb      	ldrb	r3, [r7, #15]
}
    26ca:	4618      	mov	r0, r3
    26cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    26d0:	46bd      	mov	sp, r7
    26d2:	bc80      	pop	{r7}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			(mov r8, r8)
    26d8:	40021000 	.word	0x40021000

000026dc <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    26dc:	b480      	push	{r7}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	4603      	mov	r3, r0
    26e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    26e6:	4a04      	ldr	r2, [pc, #16]	(26f8 <RCC_ClearITPendingBit+0x1c>)
    26e8:	79fb      	ldrb	r3, [r7, #7]
    26ea:	7013      	strb	r3, [r2, #0]
}
    26ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    26f0:	46bd      	mov	sp, r7
    26f2:	bc80      	pop	{r7}
    26f4:	4770      	bx	lr
    26f6:	46c0      	nop			(mov r8, r8)
    26f8:	4002100a 	.word	0x4002100a

000026fc <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    2704:	687a      	ldr	r2, [r7, #4]
    2706:	4b45      	ldr	r3, [pc, #276]	(281c <TIM_DeInit+0x120>)
    2708:	429a      	cmp	r2, r3
    270a:	d10c      	bne.n	2726 <TIM_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    270c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2710:	f04f 0101 	mov.w	r1, #1	; 0x1
    2714:	f7ff fefe 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    2718:	f44f 6000 	mov.w	r0, #2048	; 0x800
    271c:	f04f 0100 	mov.w	r1, #0	; 0x0
    2720:	f7ff fef8 	bl	2514 <RCC_APB2PeriphResetCmd>
    2724:	e075      	b.n	2812 <TIM_DeInit+0x116>
  }     
  else if (TIMx == TIM2)
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    272c:	d10c      	bne.n	2748 <TIM_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    272e:	f04f 0001 	mov.w	r0, #1	; 0x1
    2732:	f04f 0101 	mov.w	r1, #1	; 0x1
    2736:	f7ff ff0f 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    273a:	f04f 0001 	mov.w	r0, #1	; 0x1
    273e:	f04f 0100 	mov.w	r1, #0	; 0x0
    2742:	f7ff ff09 	bl	2558 <RCC_APB1PeriphResetCmd>
    2746:	e064      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM3)
    2748:	687a      	ldr	r2, [r7, #4]
    274a:	4b35      	ldr	r3, [pc, #212]	(2820 <TIM_DeInit+0x124>)
    274c:	429a      	cmp	r2, r3
    274e:	d10c      	bne.n	276a <TIM_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    2750:	f04f 0002 	mov.w	r0, #2	; 0x2
    2754:	f04f 0101 	mov.w	r1, #1	; 0x1
    2758:	f7ff fefe 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    275c:	f04f 0002 	mov.w	r0, #2	; 0x2
    2760:	f04f 0100 	mov.w	r1, #0	; 0x0
    2764:	f7ff fef8 	bl	2558 <RCC_APB1PeriphResetCmd>
    2768:	e053      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM4)
    276a:	687a      	ldr	r2, [r7, #4]
    276c:	4b2d      	ldr	r3, [pc, #180]	(2824 <TIM_DeInit+0x128>)
    276e:	429a      	cmp	r2, r3
    2770:	d10c      	bne.n	278c <TIM_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    2772:	f04f 0004 	mov.w	r0, #4	; 0x4
    2776:	f04f 0101 	mov.w	r1, #1	; 0x1
    277a:	f7ff feed 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    277e:	f04f 0004 	mov.w	r0, #4	; 0x4
    2782:	f04f 0100 	mov.w	r1, #0	; 0x0
    2786:	f7ff fee7 	bl	2558 <RCC_APB1PeriphResetCmd>
    278a:	e042      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM5)
    278c:	687a      	ldr	r2, [r7, #4]
    278e:	4b26      	ldr	r3, [pc, #152]	(2828 <TIM_DeInit+0x12c>)
    2790:	429a      	cmp	r2, r3
    2792:	d10c      	bne.n	27ae <TIM_DeInit+0xb2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    2794:	f04f 0008 	mov.w	r0, #8	; 0x8
    2798:	f04f 0101 	mov.w	r1, #1	; 0x1
    279c:	f7ff fedc 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    27a0:	f04f 0008 	mov.w	r0, #8	; 0x8
    27a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    27a8:	f7ff fed6 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ac:	e031      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM6)
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	4b1e      	ldr	r3, [pc, #120]	(282c <TIM_DeInit+0x130>)
    27b2:	429a      	cmp	r2, r3
    27b4:	d10c      	bne.n	27d0 <TIM_DeInit+0xd4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    27b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    27ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    27be:	f7ff fecb 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    27c2:	f04f 0010 	mov.w	r0, #16	; 0x10
    27c6:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ca:	f7ff fec5 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ce:	e020      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM7)
    27d0:	687a      	ldr	r2, [r7, #4]
    27d2:	4b17      	ldr	r3, [pc, #92]	(2830 <TIM_DeInit+0x134>)
    27d4:	429a      	cmp	r2, r3
    27d6:	d10c      	bne.n	27f2 <TIM_DeInit+0xf6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    27d8:	f04f 0020 	mov.w	r0, #32	; 0x20
    27dc:	f04f 0101 	mov.w	r1, #1	; 0x1
    27e0:	f7ff feba 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    27e4:	f04f 0020 	mov.w	r0, #32	; 0x20
    27e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ec:	f7ff feb4 	bl	2558 <RCC_APB1PeriphResetCmd>
    27f0:	e00f      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else
  {
    if (TIMx == TIM8)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	4b0f      	ldr	r3, [pc, #60]	(2834 <TIM_DeInit+0x138>)
    27f6:	429a      	cmp	r2, r3
    27f8:	d10b      	bne.n	2812 <TIM_DeInit+0x116>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    27fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    27fe:	f04f 0101 	mov.w	r1, #1	; 0x1
    2802:	f7ff fe87 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    2806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    280a:	f04f 0100 	mov.w	r1, #0	; 0x0
    280e:	f7ff fe81 	bl	2514 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    2812:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			(mov r8, r8)
    281c:	40012c00 	.word	0x40012c00
    2820:	40000400 	.word	0x40000400
    2824:	40000800 	.word	0x40000800
    2828:	40000c00 	.word	0x40000c00
    282c:	40001000 	.word	0x40001000
    2830:	40001400 	.word	0x40001400
    2834:	40013400 	.word	0x40013400

00002838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2838:	b480      	push	{r7}
    283a:	b083      	sub	sp, #12
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	b29b      	uxth	r3, r3
    2848:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	8013      	strh	r3, [r2, #0]
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	b299      	uxth	r1, r3
    2856:	683b      	ldr	r3, [r7, #0]
    2858:	88da      	ldrh	r2, [r3, #6]
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	885b      	ldrh	r3, [r3, #2]
    285e:	ea42 0303 	orr.w	r3, r2, r3
    2862:	b29b      	uxth	r3, r3
    2864:	ea41 0303 	orr.w	r3, r1, r3
    2868:	b29b      	uxth	r3, r3
    286a:	687a      	ldr	r2, [r7, #4]
    286c:	8013      	strh	r3, [r2, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	889b      	ldrh	r3, [r3, #4]
    2872:	687a      	ldr	r2, [r7, #4]
    2874:	8593      	strh	r3, [r2, #44]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    2876:	683b      	ldr	r3, [r7, #0]
    2878:	881b      	ldrh	r3, [r3, #0]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	8513      	strh	r3, [r2, #40]
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
    287e:	687a      	ldr	r2, [r7, #4]
    2880:	4b09      	ldr	r3, [pc, #36]	(28a8 <TIM_TimeBaseInit+0x70>)
    2882:	429a      	cmp	r2, r3
    2884:	d003      	beq.n	288e <TIM_TimeBaseInit+0x56>
    2886:	687a      	ldr	r2, [r7, #4]
    2888:	4b08      	ldr	r3, [pc, #32]	(28ac <TIM_TimeBaseInit+0x74>)
    288a:	429a      	cmp	r2, r3
    288c:	d103      	bne.n	2896 <TIM_TimeBaseInit+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	7a1b      	ldrb	r3, [r3, #8]
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	8613      	strh	r3, [r2, #48]
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	f04f 0201 	mov.w	r2, #1	; 0x1
    289c:	829a      	strh	r2, [r3, #20]
}
    289e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr
    28a8:	40012c00 	.word	0x40012c00
    28ac:	40013400 	.word	0x40013400

000028b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    28b0:	b480      	push	{r7}
    28b2:	b087      	sub	sp, #28
    28b4:	af00      	add	r7, sp, #0
    28b6:	60f8      	str	r0, [r7, #12]
    28b8:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    28ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    28be:	827b      	strh	r3, [r7, #18]
    28c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    28c4:	82bb      	strh	r3, [r7, #20]
    28c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    28ca:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	8c1b      	ldrh	r3, [r3, #32]
    28d0:	b29b      	uxth	r3, r3
    28d2:	607b      	str	r3, [r7, #4]
    28d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    28d8:	6879      	ldr	r1, [r7, #4]
    28da:	ea01 0303 	and.w	r3, r1, r3
    28de:	607b      	str	r3, [r7, #4]
    28e0:	68fa      	ldr	r2, [r7, #12]
    28e2:	6879      	ldr	r1, [r7, #4]
    28e4:	460b      	mov	r3, r1
    28e6:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    28e8:	68fb      	ldr	r3, [r7, #12]
    28ea:	8c1b      	ldrh	r3, [r3, #32]
    28ec:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	889b      	ldrh	r3, [r3, #4]
    28f2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	8b1b      	ldrh	r3, [r3, #24]
    28f8:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
    28fa:	8a7b      	ldrh	r3, [r7, #18]
    28fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2900:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	881a      	ldrh	r2, [r3, #0]
    2906:	8a7b      	ldrh	r3, [r7, #18]
    2908:	ea42 0303 	orr.w	r3, r2, r3
    290c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
    290e:	8abb      	ldrh	r3, [r7, #20]
    2910:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    2914:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	891a      	ldrh	r2, [r3, #8]
    291a:	8abb      	ldrh	r3, [r7, #20]
    291c:	ea42 0303 	orr.w	r3, r2, r3
    2920:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	885a      	ldrh	r2, [r3, #2]
    2926:	8abb      	ldrh	r3, [r7, #20]
    2928:	ea42 0303 	orr.w	r3, r2, r3
    292c:	82bb      	strh	r3, [r7, #20]
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    292e:	68fa      	ldr	r2, [r7, #12]
    2930:	4b24      	ldr	r3, [pc, #144]	(29c4 <TIM_OC1Init+0x114>)
    2932:	429a      	cmp	r2, r3
    2934:	d003      	beq.n	293e <TIM_OC1Init+0x8e>
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4b23      	ldr	r3, [pc, #140]	(29c8 <TIM_OC1Init+0x118>)
    293a:	429a      	cmp	r2, r3
    293c:	d12f      	bne.n	299e <TIM_OC1Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    293e:	8abb      	ldrh	r3, [r7, #20]
    2940:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    2944:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    2946:	68bb      	ldr	r3, [r7, #8]
    2948:	895a      	ldrh	r2, [r3, #10]
    294a:	8abb      	ldrh	r3, [r7, #20]
    294c:	ea42 0303 	orr.w	r3, r2, r3
    2950:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    2952:	8abb      	ldrh	r3, [r7, #20]
    2954:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    2958:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    295a:	68bb      	ldr	r3, [r7, #8]
    295c:	889a      	ldrh	r2, [r3, #4]
    295e:	8abb      	ldrh	r3, [r7, #20]
    2960:	ea42 0303 	orr.w	r3, r2, r3
    2964:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    2966:	8afb      	ldrh	r3, [r7, #22]
    2968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    296c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2970:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2974:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS1N_Reset;
    2976:	8afb      	ldrh	r3, [r7, #22]
    2978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    297c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2980:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2984:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    2986:	68bb      	ldr	r3, [r7, #8]
    2988:	899a      	ldrh	r2, [r3, #12]
    298a:	8afb      	ldrh	r3, [r7, #22]
    298c:	ea42 0303 	orr.w	r3, r2, r3
    2990:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    2992:	68bb      	ldr	r3, [r7, #8]
    2994:	89da      	ldrh	r2, [r3, #14]
    2996:	8afb      	ldrh	r3, [r7, #22]
    2998:	ea42 0303 	orr.w	r3, r2, r3
    299c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	8afb      	ldrh	r3, [r7, #22]
    29a2:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	8a7b      	ldrh	r3, [r7, #18]
    29a8:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
    29aa:	68bb      	ldr	r3, [r7, #8]
    29ac:	88db      	ldrh	r3, [r3, #6]
    29ae:	68fa      	ldr	r2, [r7, #12]
    29b0:	8693      	strh	r3, [r2, #52]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    29b2:	68fa      	ldr	r2, [r7, #12]
    29b4:	8abb      	ldrh	r3, [r7, #20]
    29b6:	8413      	strh	r3, [r2, #32]
}
    29b8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    29bc:	46bd      	mov	sp, r7
    29be:	bc80      	pop	{r7}
    29c0:	4770      	bx	lr
    29c2:	46c0      	nop			(mov r8, r8)
    29c4:	40012c00 	.word	0x40012c00
    29c8:	40013400 	.word	0x40013400

000029cc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    29cc:	b480      	push	{r7}
    29ce:	b087      	sub	sp, #28
    29d0:	af00      	add	r7, sp, #0
    29d2:	60f8      	str	r0, [r7, #12]
    29d4:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    29d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    29da:	827b      	strh	r3, [r7, #18]
    29dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e0:	82bb      	strh	r3, [r7, #20]
    29e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	8c1b      	ldrh	r3, [r3, #32]
    29ec:	b29b      	uxth	r3, r3
    29ee:	607b      	str	r3, [r7, #4]
    29f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
    29f4:	6879      	ldr	r1, [r7, #4]
    29f6:	ea01 0303 	and.w	r3, r1, r3
    29fa:	607b      	str	r3, [r7, #4]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	6879      	ldr	r1, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	8c1b      	ldrh	r3, [r3, #32]
    2a08:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2a0a:	68fb      	ldr	r3, [r7, #12]
    2a0c:	889b      	ldrh	r3, [r3, #4]
    2a0e:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    2a10:	68fb      	ldr	r3, [r7, #12]
    2a12:	8b1b      	ldrh	r3, [r3, #24]
    2a14:	827b      	strh	r3, [r7, #18]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
    2a16:	8a7b      	ldrh	r3, [r7, #18]
    2a18:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2a1c:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2a1e:	68bb      	ldr	r3, [r7, #8]
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2a26:	b29a      	uxth	r2, r3
    2a28:	8a7b      	ldrh	r3, [r7, #18]
    2a2a:	ea42 0303 	orr.w	r3, r2, r3
    2a2e:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
    2a30:	8abb      	ldrh	r3, [r7, #20]
    2a32:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    2a36:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    2a38:	68bb      	ldr	r3, [r7, #8]
    2a3a:	891b      	ldrh	r3, [r3, #8]
    2a3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a40:	b29a      	uxth	r2, r3
    2a42:	8abb      	ldrh	r3, [r7, #20]
    2a44:	ea42 0303 	orr.w	r3, r2, r3
    2a48:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    2a4a:	68bb      	ldr	r3, [r7, #8]
    2a4c:	885b      	ldrh	r3, [r3, #2]
    2a4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a52:	b29a      	uxth	r2, r3
    2a54:	8abb      	ldrh	r3, [r7, #20]
    2a56:	ea42 0303 	orr.w	r3, r2, r3
    2a5a:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2a5c:	68fa      	ldr	r2, [r7, #12]
    2a5e:	4b2a      	ldr	r3, [pc, #168]	(2b08 <TIM_OC2Init+0x13c>)
    2a60:	429a      	cmp	r2, r3
    2a62:	d003      	beq.n	2a6c <TIM_OC2Init+0xa0>
    2a64:	68fa      	ldr	r2, [r7, #12]
    2a66:	4b29      	ldr	r3, [pc, #164]	(2b0c <TIM_OC2Init+0x140>)
    2a68:	429a      	cmp	r2, r3
    2a6a:	d13b      	bne.n	2ae4 <TIM_OC2Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    2a6c:	8abb      	ldrh	r3, [r7, #20]
    2a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2a72:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    2a74:	68bb      	ldr	r3, [r7, #8]
    2a76:	895b      	ldrh	r3, [r3, #10]
    2a78:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a7c:	b29a      	uxth	r2, r3
    2a7e:	8abb      	ldrh	r3, [r7, #20]
    2a80:	ea42 0303 	orr.w	r3, r2, r3
    2a84:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    2a86:	8abb      	ldrh	r3, [r7, #20]
    2a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2a8c:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    2a8e:	68bb      	ldr	r3, [r7, #8]
    2a90:	889b      	ldrh	r3, [r3, #4]
    2a92:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a96:	b29a      	uxth	r2, r3
    2a98:	8abb      	ldrh	r3, [r7, #20]
    2a9a:	ea42 0303 	orr.w	r3, r2, r3
    2a9e:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    2aa0:	8afb      	ldrh	r3, [r7, #22]
    2aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2aa6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aaa:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2aae:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS2N_Reset;
    2ab0:	8afb      	ldrh	r3, [r7, #22]
    2ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2ab6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aba:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2abe:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    2ac0:	68bb      	ldr	r3, [r7, #8]
    2ac2:	899b      	ldrh	r3, [r3, #12]
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	b29a      	uxth	r2, r3
    2aca:	8afb      	ldrh	r3, [r7, #22]
    2acc:	ea42 0303 	orr.w	r3, r2, r3
    2ad0:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	89db      	ldrh	r3, [r3, #14]
    2ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ada:	b29a      	uxth	r2, r3
    2adc:	8afb      	ldrh	r3, [r7, #22]
    2ade:	ea42 0303 	orr.w	r3, r2, r3
    2ae2:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2ae4:	68fa      	ldr	r2, [r7, #12]
    2ae6:	8afb      	ldrh	r3, [r7, #22]
    2ae8:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    2aea:	68fa      	ldr	r2, [r7, #12]
    2aec:	8a7b      	ldrh	r3, [r7, #18]
    2aee:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    2af0:	68bb      	ldr	r3, [r7, #8]
    2af2:	88db      	ldrh	r3, [r3, #6]
    2af4:	68fa      	ldr	r2, [r7, #12]
    2af6:	8713      	strh	r3, [r2, #56]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	8abb      	ldrh	r3, [r7, #20]
    2afc:	8413      	strh	r3, [r2, #32]
}
    2afe:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2b02:	46bd      	mov	sp, r7
    2b04:	bc80      	pop	{r7}
    2b06:	4770      	bx	lr
    2b08:	40012c00 	.word	0x40012c00
    2b0c:	40013400 	.word	0x40013400

00002b10 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2b10:	b480      	push	{r7}
    2b12:	b087      	sub	sp, #28
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b1e:	827b      	strh	r3, [r7, #18]
    2b20:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b24:	82bb      	strh	r3, [r7, #20]
    2b26:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b2a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	8c1b      	ldrh	r3, [r3, #32]
    2b30:	b29b      	uxth	r3, r3
    2b32:	607b      	str	r3, [r7, #4]
    2b34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    2b38:	6879      	ldr	r1, [r7, #4]
    2b3a:	ea01 0303 	and.w	r3, r1, r3
    2b3e:	607b      	str	r3, [r7, #4]
    2b40:	68fa      	ldr	r2, [r7, #12]
    2b42:	6879      	ldr	r1, [r7, #4]
    2b44:	460b      	mov	r3, r1
    2b46:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	8c1b      	ldrh	r3, [r3, #32]
    2b4c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	889b      	ldrh	r3, [r3, #4]
    2b52:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	8b9b      	ldrh	r3, [r3, #28]
    2b58:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
    2b5a:	8a7b      	ldrh	r3, [r7, #18]
    2b5c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2b60:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2b62:	68bb      	ldr	r3, [r7, #8]
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	8a7b      	ldrh	r3, [r7, #18]
    2b68:	ea42 0303 	orr.w	r3, r2, r3
    2b6c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
    2b6e:	8abb      	ldrh	r3, [r7, #20]
    2b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2b74:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    2b76:	68bb      	ldr	r3, [r7, #8]
    2b78:	891b      	ldrh	r3, [r3, #8]
    2b7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b7e:	b29a      	uxth	r2, r3
    2b80:	8abb      	ldrh	r3, [r7, #20]
    2b82:	ea42 0303 	orr.w	r3, r2, r3
    2b86:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    2b88:	68bb      	ldr	r3, [r7, #8]
    2b8a:	885b      	ldrh	r3, [r3, #2]
    2b8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b90:	b29a      	uxth	r2, r3
    2b92:	8abb      	ldrh	r3, [r7, #20]
    2b94:	ea42 0303 	orr.w	r3, r2, r3
    2b98:	82bb      	strh	r3, [r7, #20]
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2b9a:	68fa      	ldr	r2, [r7, #12]
    2b9c:	4b2a      	ldr	r3, [pc, #168]	(2c48 <TIM_OC3Init+0x138>)
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d003      	beq.n	2baa <TIM_OC3Init+0x9a>
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	4b29      	ldr	r3, [pc, #164]	(2c4c <TIM_OC3Init+0x13c>)
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d13b      	bne.n	2c22 <TIM_OC3Init+0x112>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    2baa:	8abb      	ldrh	r3, [r7, #20]
    2bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bb0:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    2bb2:	68bb      	ldr	r3, [r7, #8]
    2bb4:	895b      	ldrh	r3, [r3, #10]
    2bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bba:	b29a      	uxth	r2, r3
    2bbc:	8abb      	ldrh	r3, [r7, #20]
    2bbe:	ea42 0303 	orr.w	r3, r2, r3
    2bc2:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    2bc4:	8abb      	ldrh	r3, [r7, #20]
    2bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2bca:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	889b      	ldrh	r3, [r3, #4]
    2bd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bd4:	b29a      	uxth	r2, r3
    2bd6:	8abb      	ldrh	r3, [r7, #20]
    2bd8:	ea42 0303 	orr.w	r3, r2, r3
    2bdc:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    2bde:	8afb      	ldrh	r3, [r7, #22]
    2be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2be4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2be8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bec:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS3N_Reset;
    2bee:	8afb      	ldrh	r3, [r7, #22]
    2bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2bf4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2bf8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bfc:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    2bfe:	68bb      	ldr	r3, [r7, #8]
    2c00:	899b      	ldrh	r3, [r3, #12]
    2c02:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c06:	b29a      	uxth	r2, r3
    2c08:	8afb      	ldrh	r3, [r7, #22]
    2c0a:	ea42 0303 	orr.w	r3, r2, r3
    2c0e:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    2c10:	68bb      	ldr	r3, [r7, #8]
    2c12:	89db      	ldrh	r3, [r3, #14]
    2c14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c18:	b29a      	uxth	r2, r3
    2c1a:	8afb      	ldrh	r3, [r7, #22]
    2c1c:	ea42 0303 	orr.w	r3, r2, r3
    2c20:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2c22:	68fa      	ldr	r2, [r7, #12]
    2c24:	8afb      	ldrh	r3, [r7, #22]
    2c26:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    2c28:	68fa      	ldr	r2, [r7, #12]
    2c2a:	8a7b      	ldrh	r3, [r7, #18]
    2c2c:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	88db      	ldrh	r3, [r3, #6]
    2c32:	68fa      	ldr	r2, [r7, #12]
    2c34:	8793      	strh	r3, [r2, #60]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2c36:	68fa      	ldr	r2, [r7, #12]
    2c38:	8abb      	ldrh	r3, [r7, #20]
    2c3a:	8413      	strh	r3, [r2, #32]
}
    2c3c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2c40:	46bd      	mov	sp, r7
    2c42:	bc80      	pop	{r7}
    2c44:	4770      	bx	lr
    2c46:	46c0      	nop			(mov r8, r8)
    2c48:	40012c00 	.word	0x40012c00
    2c4c:	40013400 	.word	0x40013400

00002c50 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2c50:	b480      	push	{r7}
    2c52:	b087      	sub	sp, #28
    2c54:	af00      	add	r7, sp, #0
    2c56:	60f8      	str	r0, [r7, #12]
    2c58:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c5e:	827b      	strh	r3, [r7, #18]
    2c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c64:	82bb      	strh	r3, [r7, #20]
    2c66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c6a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	8c1b      	ldrh	r3, [r3, #32]
    2c70:	b29b      	uxth	r3, r3
    2c72:	607b      	str	r3, [r7, #4]
    2c74:	f64e 73ff 	movw	r3, #61439	; 0xefff
    2c78:	6879      	ldr	r1, [r7, #4]
    2c7a:	ea01 0303 	and.w	r3, r1, r3
    2c7e:	607b      	str	r3, [r7, #4]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6879      	ldr	r1, [r7, #4]
    2c84:	460b      	mov	r3, r1
    2c86:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	8c1b      	ldrh	r3, [r3, #32]
    2c8c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	889b      	ldrh	r3, [r3, #4]
    2c92:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	8b9b      	ldrh	r3, [r3, #28]
    2c98:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
    2c9a:	8a7b      	ldrh	r3, [r7, #18]
    2c9c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2ca0:	827b      	strh	r3, [r7, #18]
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2ca2:	68bb      	ldr	r3, [r7, #8]
    2ca4:	881b      	ldrh	r3, [r3, #0]
    2ca6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2caa:	b29a      	uxth	r2, r3
    2cac:	8a7b      	ldrh	r3, [r7, #18]
    2cae:	ea42 0303 	orr.w	r3, r2, r3
    2cb2:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
    2cb4:	8abb      	ldrh	r3, [r7, #20]
    2cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2cba:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	891b      	ldrh	r3, [r3, #8]
    2cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cc4:	b29a      	uxth	r2, r3
    2cc6:	8abb      	ldrh	r3, [r7, #20]
    2cc8:	ea42 0303 	orr.w	r3, r2, r3
    2ccc:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    2cce:	68bb      	ldr	r3, [r7, #8]
    2cd0:	885b      	ldrh	r3, [r3, #2]
    2cd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cd6:	b29a      	uxth	r2, r3
    2cd8:	8abb      	ldrh	r3, [r7, #20]
    2cda:	ea42 0303 	orr.w	r3, r2, r3
    2cde:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	4b14      	ldr	r3, [pc, #80]	(2d34 <TIM_OC4Init+0xe4>)
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d003      	beq.n	2cf0 <TIM_OC4Init+0xa0>
    2ce8:	68fa      	ldr	r2, [r7, #12]
    2cea:	4b13      	ldr	r3, [pc, #76]	(2d38 <TIM_OC4Init+0xe8>)
    2cec:	429a      	cmp	r2, r3
    2cee:	d10e      	bne.n	2d0e <TIM_OC4Init+0xbe>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
    2cf0:	8afb      	ldrh	r3, [r7, #22]
    2cf2:	ea4f 4383 	mov.w	r3, r3, lsl #18
    2cf6:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2cfa:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    2cfc:	68bb      	ldr	r3, [r7, #8]
    2cfe:	899b      	ldrh	r3, [r3, #12]
    2d00:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2d04:	b29a      	uxth	r2, r3
    2d06:	8afb      	ldrh	r3, [r7, #22]
    2d08:	ea42 0303 	orr.w	r3, r2, r3
    2d0c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2d0e:	68fa      	ldr	r2, [r7, #12]
    2d10:	8afb      	ldrh	r3, [r7, #22]
    2d12:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	8a7b      	ldrh	r3, [r7, #18]
    2d18:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	88db      	ldrh	r3, [r3, #6]
    2d1e:	68fa      	ldr	r2, [r7, #12]
    2d20:	f8a2 3040 	strh.w	r3, [r2, #64]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	8abb      	ldrh	r3, [r7, #20]
    2d28:	8413      	strh	r3, [r2, #32]
}
    2d2a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2d2e:	46bd      	mov	sp, r7
    2d30:	bc80      	pop	{r7}
    2d32:	4770      	bx	lr
    2d34:	40012c00 	.word	0x40012c00
    2d38:	40013400 	.word	0x40013400

00002d3c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	881b      	ldrh	r3, [r3, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d10f      	bne.n	2d6e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d4e:	683b      	ldr	r3, [r7, #0]
    2d50:	8859      	ldrh	r1, [r3, #2]
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	889a      	ldrh	r2, [r3, #4]
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	891b      	ldrh	r3, [r3, #8]
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	f001 faa2 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	88db      	ldrh	r3, [r3, #6]
    2d64:	6878      	ldr	r0, [r7, #4]
    2d66:	4619      	mov	r1, r3
    2d68:	f001 f926 	bl	3fb8 <TIM_SetIC1Prescaler>
    2d6c:	e036      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	2b04      	cmp	r3, #4
    2d74:	d10f      	bne.n	2d96 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	8859      	ldrh	r1, [r3, #2]
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	889a      	ldrh	r2, [r3, #4]
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	891b      	ldrh	r3, [r3, #8]
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f001 fada 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d88:	683b      	ldr	r3, [r7, #0]
    2d8a:	88db      	ldrh	r3, [r3, #6]
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	4619      	mov	r1, r3
    2d90:	f001 f934 	bl	3ffc <TIM_SetIC2Prescaler>
    2d94:	e022      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	881b      	ldrh	r3, [r3, #0]
    2d9a:	2b08      	cmp	r3, #8
    2d9c:	d10f      	bne.n	2dbe <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    2d9e:	683b      	ldr	r3, [r7, #0]
    2da0:	8859      	ldrh	r1, [r3, #2]
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	889a      	ldrh	r2, [r3, #4]
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	891b      	ldrh	r3, [r3, #8]
    2daa:	6878      	ldr	r0, [r7, #4]
    2dac:	f001 fb22 	bl	43f4 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	88db      	ldrh	r3, [r3, #6]
    2db4:	6878      	ldr	r0, [r7, #4]
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f946 	bl	4048 <TIM_SetIC3Prescaler>
    2dbc:	e00e      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2dbe:	683b      	ldr	r3, [r7, #0]
    2dc0:	8859      	ldrh	r1, [r3, #2]
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	889a      	ldrh	r2, [r3, #4]
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	891b      	ldrh	r3, [r3, #8]
    2dca:	6878      	ldr	r0, [r7, #4]
    2dcc:	f001 fb66 	bl	449c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2dd0:	683b      	ldr	r3, [r7, #0]
    2dd2:	88db      	ldrh	r3, [r3, #6]
    2dd4:	6878      	ldr	r0, [r7, #4]
    2dd6:	4619      	mov	r1, r3
    2dd8:	f001 f958 	bl	408c <TIM_SetIC4Prescaler>
  }
}
    2ddc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}

00002de4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    2dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2df2:	81bb      	strh	r3, [r7, #12]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    2df4:	f04f 0301 	mov.w	r3, #1	; 0x1
    2df8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	885b      	ldrh	r3, [r3, #2]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d103      	bne.n	2e0a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    2e02:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e06:	81bb      	strh	r3, [r7, #12]
    2e08:	e002      	b.n	2e10 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    2e0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2e0e:	81bb      	strh	r3, [r7, #12]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	889b      	ldrh	r3, [r3, #4]
    2e14:	2b01      	cmp	r3, #1
    2e16:	d103      	bne.n	2e20 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    2e18:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e1c:	81fb      	strh	r3, [r7, #14]
    2e1e:	e002      	b.n	2e26 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    2e20:	f04f 0301 	mov.w	r3, #1	; 0x1
    2e24:	81fb      	strh	r3, [r7, #14]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d11f      	bne.n	2e6e <TIM_PWMIConfig+0x8a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	8859      	ldrh	r1, [r3, #2]
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	889a      	ldrh	r2, [r3, #4]
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	891b      	ldrh	r3, [r3, #8]
    2e3a:	6878      	ldr	r0, [r7, #4]
    2e3c:	f001 fa32 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	88db      	ldrh	r3, [r3, #6]
    2e44:	6878      	ldr	r0, [r7, #4]
    2e46:	4619      	mov	r1, r3
    2e48:	f001 f8b6 	bl	3fb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e52:	89bb      	ldrh	r3, [r7, #12]
    2e54:	89fa      	ldrh	r2, [r7, #14]
    2e56:	6878      	ldr	r0, [r7, #4]
    2e58:	4619      	mov	r1, r3
    2e5a:	4663      	mov	r3, ip
    2e5c:	f001 fa6e 	bl	433c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	88db      	ldrh	r3, [r3, #6]
    2e64:	6878      	ldr	r0, [r7, #4]
    2e66:	4619      	mov	r1, r3
    2e68:	f001 f8c8 	bl	3ffc <TIM_SetIC2Prescaler>
    2e6c:	e01e      	b.n	2eac <TIM_PWMIConfig+0xc8>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e6e:	683b      	ldr	r3, [r7, #0]
    2e70:	8859      	ldrh	r1, [r3, #2]
    2e72:	683b      	ldr	r3, [r7, #0]
    2e74:	889a      	ldrh	r2, [r3, #4]
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	891b      	ldrh	r3, [r3, #8]
    2e7a:	6878      	ldr	r0, [r7, #4]
    2e7c:	f001 fa5e 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	88db      	ldrh	r3, [r3, #6]
    2e84:	6878      	ldr	r0, [r7, #4]
    2e86:	4619      	mov	r1, r3
    2e88:	f001 f8b8 	bl	3ffc <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e92:	89bb      	ldrh	r3, [r7, #12]
    2e94:	89fa      	ldrh	r2, [r7, #14]
    2e96:	6878      	ldr	r0, [r7, #4]
    2e98:	4619      	mov	r1, r3
    2e9a:	4663      	mov	r3, ip
    2e9c:	f001 fa02 	bl	42a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	88db      	ldrh	r3, [r3, #6]
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	4619      	mov	r1, r3
    2ea8:	f001 f886 	bl	3fb8 <TIM_SetIC1Prescaler>
  }
}
    2eac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}

00002eb4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    2eb4:	b480      	push	{r7}
    2eb6:	b083      	sub	sp, #12
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    2ebe:	683b      	ldr	r3, [r7, #0]
    2ec0:	881a      	ldrh	r2, [r3, #0]
    2ec2:	683b      	ldr	r3, [r7, #0]
    2ec4:	885b      	ldrh	r3, [r3, #2]
    2ec6:	ea42 0303 	orr.w	r3, r2, r3
    2eca:	b29a      	uxth	r2, r3
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	889b      	ldrh	r3, [r3, #4]
    2ed0:	ea42 0303 	orr.w	r3, r2, r3
    2ed4:	b29a      	uxth	r2, r3
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	88db      	ldrh	r3, [r3, #6]
    2eda:	ea42 0303 	orr.w	r3, r2, r3
    2ede:	b29a      	uxth	r2, r3
    2ee0:	683b      	ldr	r3, [r7, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	ea42 0303 	orr.w	r3, r2, r3
    2ee8:	b29a      	uxth	r2, r3
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	895b      	ldrh	r3, [r3, #10]
    2eee:	ea42 0303 	orr.w	r3, r2, r3
    2ef2:	b29a      	uxth	r2, r3
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	899b      	ldrh	r3, [r3, #12]
    2ef8:	ea42 0303 	orr.w	r3, r2, r3
    2efc:	b29b      	uxth	r3, r3
    2efe:	687a      	ldr	r2, [r7, #4]
    2f00:	f8a2 3044 	strh.w	r3, [r2, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    2f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f08:	46bd      	mov	sp, r7
    2f0a:	bc80      	pop	{r7}
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			(mov r8, r8)

00002f10 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2f10:	b480      	push	{r7}
    2f12:	b083      	sub	sp, #12
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    2f18:	687a      	ldr	r2, [r7, #4]
    2f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f1e:	8093      	strh	r3, [r2, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    2f20:	687a      	ldr	r2, [r7, #4]
    2f22:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f26:	8013      	strh	r3, [r2, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    2f28:	687a      	ldr	r2, [r7, #4]
    2f2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f2e:	80d3      	strh	r3, [r2, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f36:	8053      	strh	r3, [r2, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    2f38:	687a      	ldr	r2, [r7, #4]
    2f3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f3e:	7213      	strb	r3, [r2, #8]
}
    2f40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f44:	46bd      	mov	sp, r7
    2f46:	bc80      	pop	{r7}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			(mov r8, r8)

00002f4c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2f4c:	b480      	push	{r7}
    2f4e:	b083      	sub	sp, #12
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f5a:	8013      	strh	r3, [r2, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    2f5c:	687a      	ldr	r2, [r7, #4]
    2f5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f62:	8053      	strh	r3, [r2, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    2f64:	687a      	ldr	r2, [r7, #4]
    2f66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f6a:	8093      	strh	r3, [r2, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    2f6c:	687a      	ldr	r2, [r7, #4]
    2f6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f72:	80d3      	strh	r3, [r2, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f7a:	8113      	strh	r3, [r2, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    2f7c:	687a      	ldr	r2, [r7, #4]
    2f7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f82:	8153      	strh	r3, [r2, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    2f84:	687a      	ldr	r2, [r7, #4]
    2f86:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f8a:	8193      	strh	r3, [r2, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    2f8c:	687a      	ldr	r2, [r7, #4]
    2f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f92:	81d3      	strh	r3, [r2, #14]
}
    2f94:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f98:	46bd      	mov	sp, r7
    2f9a:	bc80      	pop	{r7}
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			(mov r8, r8)

00002fa0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2fa0:	b480      	push	{r7}
    2fa2:	b083      	sub	sp, #12
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    2fa8:	687a      	ldr	r2, [r7, #4]
    2faa:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fae:	8013      	strh	r3, [r2, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    2fb0:	687a      	ldr	r2, [r7, #4]
    2fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fb6:	8053      	strh	r3, [r2, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    2fb8:	687a      	ldr	r2, [r7, #4]
    2fba:	f04f 0301 	mov.w	r3, #1	; 0x1
    2fbe:	8093      	strh	r3, [r2, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fc6:	80d3      	strh	r3, [r2, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    2fc8:	687a      	ldr	r2, [r7, #4]
    2fca:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fce:	8113      	strh	r3, [r2, #8]
}
    2fd0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2fd4:	46bd      	mov	sp, r7
    2fd6:	bc80      	pop	{r7}
    2fd8:	4770      	bx	lr
    2fda:	46c0      	nop			(mov r8, r8)

00002fdc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    2fe4:	687a      	ldr	r2, [r7, #4]
    2fe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fea:	8013      	strh	r3, [r2, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    2fec:	687a      	ldr	r2, [r7, #4]
    2fee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ff2:	8053      	strh	r3, [r2, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    2ff4:	687a      	ldr	r2, [r7, #4]
    2ff6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ffa:	8093      	strh	r3, [r2, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f04f 0300 	mov.w	r3, #0	; 0x0
    3002:	80d3      	strh	r3, [r2, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3004:	687a      	ldr	r2, [r7, #4]
    3006:	f04f 0300 	mov.w	r3, #0	; 0x0
    300a:	8113      	strh	r3, [r2, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    300c:	687a      	ldr	r2, [r7, #4]
    300e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3012:	8153      	strh	r3, [r2, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3014:	687a      	ldr	r2, [r7, #4]
    3016:	f04f 0300 	mov.w	r3, #0	; 0x0
    301a:	8193      	strh	r3, [r2, #12]
}
    301c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3020:	46bd      	mov	sp, r7
    3022:	bc80      	pop	{r7}
    3024:	4770      	bx	lr
    3026:	46c0      	nop			(mov r8, r8)

00003028 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3028:	b480      	push	{r7}
    302a:	b085      	sub	sp, #20
    302c:	af00      	add	r7, sp, #0
    302e:	60f8      	str	r0, [r7, #12]
    3030:	460b      	mov	r3, r1
    3032:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3034:	7afb      	ldrb	r3, [r7, #11]
    3036:	2b00      	cmp	r3, #0
    3038:	d008      	beq.n	304c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	b29b      	uxth	r3, r3
    3040:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    3044:	b29b      	uxth	r3, r3
    3046:	68fa      	ldr	r2, [r7, #12]
    3048:	8013      	strh	r3, [r2, #0]
    304a:	e00d      	b.n	3068 <TIM_Cmd+0x40>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	881b      	ldrh	r3, [r3, #0]
    3050:	b29b      	uxth	r3, r3
    3052:	607b      	str	r3, [r7, #4]
    3054:	f240 33fe 	movw	r3, #1022	; 0x3fe
    3058:	6879      	ldr	r1, [r7, #4]
    305a:	ea01 0303 	and.w	r3, r1, r3
    305e:	607b      	str	r3, [r7, #4]
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	6879      	ldr	r1, [r7, #4]
    3064:	460b      	mov	r3, r1
    3066:	8013      	strh	r3, [r2, #0]
  }
}
    3068:	f107 0714 	add.w	r7, r7, #20	; 0x14
    306c:	46bd      	mov	sp, r7
    306e:	bc80      	pop	{r7}
    3070:	4770      	bx	lr
    3072:	46c0      	nop			(mov r8, r8)

00003074 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3074:	b480      	push	{r7}
    3076:	b085      	sub	sp, #20
    3078:	af00      	add	r7, sp, #0
    307a:	60f8      	str	r0, [r7, #12]
    307c:	460b      	mov	r3, r1
    307e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3080:	7afb      	ldrb	r3, [r7, #11]
    3082:	2b00      	cmp	r3, #0
    3084:	d00c      	beq.n	30a0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    308c:	b29b      	uxth	r3, r3
    308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3096:	b29b      	uxth	r3, r3
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	f8a2 3044 	strh.w	r3, [r2, #68]
    309e:	e00f      	b.n	30c0 <TIM_CtrlPWMOutputs+0x4c>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    30a6:	b29b      	uxth	r3, r3
    30a8:	607b      	str	r3, [r7, #4]
    30aa:	6879      	ldr	r1, [r7, #4]
    30ac:	ea4f 4341 	mov.w	r3, r1, lsl #17
    30b0:	ea4f 4353 	mov.w	r3, r3, lsr #17
    30b4:	607b      	str	r3, [r7, #4]
    30b6:	68fa      	ldr	r2, [r7, #12]
    30b8:	6879      	ldr	r1, [r7, #4]
    30ba:	460b      	mov	r3, r1
    30bc:	f8a2 3044 	strh.w	r3, [r2, #68]
  }  
}
    30c0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    30c4:	46bd      	mov	sp, r7
    30c6:	bc80      	pop	{r7}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			(mov r8, r8)

000030cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    30cc:	b480      	push	{r7}
    30ce:	b083      	sub	sp, #12
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
    30d4:	460b      	mov	r3, r1
    30d6:	807b      	strh	r3, [r7, #2]
    30d8:	4613      	mov	r3, r2
    30da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    30dc:	787b      	ldrb	r3, [r7, #1]
    30de:	2b00      	cmp	r3, #0
    30e0:	d009      	beq.n	30f6 <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	899b      	ldrh	r3, [r3, #12]
    30e6:	b29a      	uxth	r2, r3
    30e8:	887b      	ldrh	r3, [r7, #2]
    30ea:	ea42 0303 	orr.w	r3, r2, r3
    30ee:	b29b      	uxth	r3, r3
    30f0:	687a      	ldr	r2, [r7, #4]
    30f2:	8193      	strh	r3, [r2, #12]
    30f4:	e00b      	b.n	310e <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	899b      	ldrh	r3, [r3, #12]
    30fa:	b29a      	uxth	r2, r3
    30fc:	887b      	ldrh	r3, [r7, #2]
    30fe:	ea6f 0303 	mvn.w	r3, r3
    3102:	b29b      	uxth	r3, r3
    3104:	ea02 0303 	and.w	r3, r2, r3
    3108:	b29b      	uxth	r3, r3
    310a:	687a      	ldr	r2, [r7, #4]
    310c:	8193      	strh	r3, [r2, #12]
  }
}
    310e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3112:	46bd      	mov	sp, r7
    3114:	bc80      	pop	{r7}
    3116:	4770      	bx	lr

00003118 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3118:	b480      	push	{r7}
    311a:	b083      	sub	sp, #12
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
    3120:	460b      	mov	r3, r1
    3122:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3124:	687a      	ldr	r2, [r7, #4]
    3126:	887b      	ldrh	r3, [r7, #2]
    3128:	8293      	strh	r3, [r2, #20]
}
    312a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    312e:	46bd      	mov	sp, r7
    3130:	bc80      	pop	{r7}
    3132:	4770      	bx	lr

00003134 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3134:	b480      	push	{r7}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	460b      	mov	r3, r1
    313e:	807b      	strh	r3, [r7, #2]
    3140:	4613      	mov	r3, r2
    3142:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3144:	887a      	ldrh	r2, [r7, #2]
    3146:	883b      	ldrh	r3, [r7, #0]
    3148:	ea42 0303 	orr.w	r3, r2, r3
    314c:	b29b      	uxth	r3, r3
    314e:	687a      	ldr	r2, [r7, #4]
    3150:	f8a2 3048 	strh.w	r3, [r2, #72]
}
    3154:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3158:	46bd      	mov	sp, r7
    315a:	bc80      	pop	{r7}
    315c:	4770      	bx	lr
    315e:	46c0      	nop			(mov r8, r8)

00003160 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3160:	b480      	push	{r7}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	807b      	strh	r3, [r7, #2]
    316c:	4613      	mov	r3, r2
    316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3170:	787b      	ldrb	r3, [r7, #1]
    3172:	2b00      	cmp	r3, #0
    3174:	d009      	beq.n	318a <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	899b      	ldrh	r3, [r3, #12]
    317a:	b29a      	uxth	r2, r3
    317c:	887b      	ldrh	r3, [r7, #2]
    317e:	ea42 0303 	orr.w	r3, r2, r3
    3182:	b29b      	uxth	r3, r3
    3184:	687a      	ldr	r2, [r7, #4]
    3186:	8193      	strh	r3, [r2, #12]
    3188:	e00b      	b.n	31a2 <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	899b      	ldrh	r3, [r3, #12]
    318e:	b29a      	uxth	r2, r3
    3190:	887b      	ldrh	r3, [r7, #2]
    3192:	ea6f 0303 	mvn.w	r3, r3
    3196:	b29b      	uxth	r3, r3
    3198:	ea02 0303 	and.w	r3, r2, r3
    319c:	b29b      	uxth	r3, r3
    319e:	687a      	ldr	r2, [r7, #4]
    31a0:	8193      	strh	r3, [r2, #12]
  }
}
    31a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31a6:	46bd      	mov	sp, r7
    31a8:	bc80      	pop	{r7}
    31aa:	4770      	bx	lr

000031ac <TIM_InternalClockConfig>:
  * @brief  Configures the TIMx interrnal Clock
  * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	891b      	ldrh	r3, [r3, #8]
    31b8:	b29b      	uxth	r3, r3
    31ba:	603b      	str	r3, [r7, #0]
    31bc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    31c0:	6839      	ldr	r1, [r7, #0]
    31c2:	ea01 0303 	and.w	r3, r1, r3
    31c6:	603b      	str	r3, [r7, #0]
    31c8:	687a      	ldr	r2, [r7, #4]
    31ca:	6839      	ldr	r1, [r7, #0]
    31cc:	460b      	mov	r3, r1
    31ce:	8113      	strh	r3, [r2, #8]
}
    31d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31d4:	46bd      	mov	sp, r7
    31d6:	bc80      	pop	{r7}
    31d8:	4770      	bx	lr
    31da:	46c0      	nop			(mov r8, r8)

000031dc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	460b      	mov	r3, r1
    31e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    31e8:	887b      	ldrh	r3, [r7, #2]
    31ea:	6878      	ldr	r0, [r7, #4]
    31ec:	4619      	mov	r1, r3
    31ee:	f000 f8f7 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	891b      	ldrh	r3, [r3, #8]
    31f6:	b29b      	uxth	r3, r3
    31f8:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    31fc:	b29b      	uxth	r3, r3
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	8113      	strh	r3, [r2, #8]
}
    3202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}
    320a:	46c0      	nop			(mov r8, r8)

0000320c <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    320c:	b580      	push	{r7, lr}
    320e:	b084      	sub	sp, #16
    3210:	af00      	add	r7, sp, #0
    3212:	60f8      	str	r0, [r7, #12]
    3214:	4618      	mov	r0, r3
    3216:	460b      	mov	r3, r1
    3218:	817b      	strh	r3, [r7, #10]
    321a:	4613      	mov	r3, r2
    321c:	813b      	strh	r3, [r7, #8]
    321e:	4603      	mov	r3, r0
    3220:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    3222:	897b      	ldrh	r3, [r7, #10]
    3224:	2b60      	cmp	r3, #96
    3226:	d10a      	bne.n	323e <TIM_TIxExternalClockConfig+0x32>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3228:	893b      	ldrh	r3, [r7, #8]
    322a:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    322e:	68f8      	ldr	r0, [r7, #12]
    3230:	4619      	mov	r1, r3
    3232:	f04f 0201 	mov.w	r2, #1	; 0x1
    3236:	4663      	mov	r3, ip
    3238:	f001 f880 	bl	433c <TI2_Config>
    323c:	e009      	b.n	3252 <TIM_TIxExternalClockConfig+0x46>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    323e:	893b      	ldrh	r3, [r7, #8]
    3240:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3244:	68f8      	ldr	r0, [r7, #12]
    3246:	4619      	mov	r1, r3
    3248:	f04f 0201 	mov.w	r2, #1	; 0x1
    324c:	4663      	mov	r3, ip
    324e:	f001 f829 	bl	42a4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3252:	897b      	ldrh	r3, [r7, #10]
    3254:	68f8      	ldr	r0, [r7, #12]
    3256:	4619      	mov	r1, r3
    3258:	f000 f8c2 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	891b      	ldrh	r3, [r3, #8]
    3260:	b29b      	uxth	r3, r3
    3262:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    3266:	b29b      	uxth	r3, r3
    3268:	68fa      	ldr	r2, [r7, #12]
    326a:	8113      	strh	r3, [r2, #8]
}
    326c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3270:	46bd      	mov	sp, r7
    3272:	bd80      	pop	{r7, pc}

00003274 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	60f8      	str	r0, [r7, #12]
    327c:	4618      	mov	r0, r3
    327e:	460b      	mov	r3, r1
    3280:	817b      	strh	r3, [r7, #10]
    3282:	4613      	mov	r3, r2
    3284:	813b      	strh	r3, [r7, #8]
    3286:	4603      	mov	r3, r0
    3288:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    328a:	f04f 0300 	mov.w	r3, #0	; 0x0
    328e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3290:	897b      	ldrh	r3, [r7, #10]
    3292:	893a      	ldrh	r2, [r7, #8]
    3294:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	4619      	mov	r1, r3
    329c:	4663      	mov	r3, ip
    329e:	f000 f83b 	bl	3318 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	891b      	ldrh	r3, [r3, #8]
    32a6:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
    32a8:	8afb      	ldrh	r3, [r7, #22]
    32aa:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    32ae:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    32b0:	8afb      	ldrh	r3, [r7, #22]
    32b2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    32b6:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
    32b8:	8afb      	ldrh	r3, [r7, #22]
    32ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    32be:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    32c0:	8afb      	ldrh	r3, [r7, #22]
    32c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    32c6:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    32c8:	68fa      	ldr	r2, [r7, #12]
    32ca:	8afb      	ldrh	r3, [r7, #22]
    32cc:	8113      	strh	r3, [r2, #8]
}
    32ce:	f107 0718 	add.w	r7, r7, #24	; 0x18
    32d2:	46bd      	mov	sp, r7
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			(mov r8, r8)

000032d8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	4618      	mov	r0, r3
    32e2:	460b      	mov	r3, r1
    32e4:	817b      	strh	r3, [r7, #10]
    32e6:	4613      	mov	r3, r2
    32e8:	813b      	strh	r3, [r7, #8]
    32ea:	4603      	mov	r3, r0
    32ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    32ee:	897b      	ldrh	r3, [r7, #10]
    32f0:	893a      	ldrh	r2, [r7, #8]
    32f2:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    32f6:	68f8      	ldr	r0, [r7, #12]
    32f8:	4619      	mov	r1, r3
    32fa:	4663      	mov	r3, ip
    32fc:	f000 f80c 	bl	3318 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
    3300:	68fb      	ldr	r3, [r7, #12]
    3302:	891b      	ldrh	r3, [r3, #8]
    3304:	b29b      	uxth	r3, r3
    3306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    330a:	b29b      	uxth	r3, r3
    330c:	68fa      	ldr	r2, [r7, #12]
    330e:	8113      	strh	r3, [r2, #8]
}
    3310:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3314:	46bd      	mov	sp, r7
    3316:	bd80      	pop	{r7, pc}

00003318 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    3318:	b480      	push	{r7}
    331a:	b087      	sub	sp, #28
    331c:	af00      	add	r7, sp, #0
    331e:	60f8      	str	r0, [r7, #12]
    3320:	4618      	mov	r0, r3
    3322:	460b      	mov	r3, r1
    3324:	817b      	strh	r3, [r7, #10]
    3326:	4613      	mov	r3, r2
    3328:	813b      	strh	r3, [r7, #8]
    332a:	4603      	mov	r3, r0
    332c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    332e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3332:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	891b      	ldrh	r3, [r3, #8]
    3338:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    333a:	8afb      	ldrh	r3, [r7, #22]
    333c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3340:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    3342:	88fb      	ldrh	r3, [r7, #6]
    3344:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3348:	b29a      	uxth	r2, r3
    334a:	893b      	ldrh	r3, [r7, #8]
    334c:	ea42 0303 	orr.w	r3, r2, r3
    3350:	b29a      	uxth	r2, r3
    3352:	897b      	ldrh	r3, [r7, #10]
    3354:	ea42 0303 	orr.w	r3, r2, r3
    3358:	b29a      	uxth	r2, r3
    335a:	8afb      	ldrh	r3, [r7, #22]
    335c:	ea42 0303 	orr.w	r3, r2, r3
    3360:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3362:	68fa      	ldr	r2, [r7, #12]
    3364:	8afb      	ldrh	r3, [r7, #22]
    3366:	8113      	strh	r3, [r2, #8]
}
    3368:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    336c:	46bd      	mov	sp, r7
    336e:	bc80      	pop	{r7}
    3370:	4770      	bx	lr
    3372:	46c0      	nop			(mov r8, r8)

00003374 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    3374:	b480      	push	{r7}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	460b      	mov	r3, r1
    337e:	807b      	strh	r3, [r7, #2]
    3380:	4613      	mov	r3, r2
    3382:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	887b      	ldrh	r3, [r7, #2]
    3388:	8513      	strh	r3, [r2, #40]
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    338a:	687a      	ldr	r2, [r7, #4]
    338c:	883b      	ldrh	r3, [r7, #0]
    338e:	8293      	strh	r3, [r2, #20]
}
    3390:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3394:	46bd      	mov	sp, r7
    3396:	bc80      	pop	{r7}
    3398:	4770      	bx	lr
    339a:	46c0      	nop			(mov r8, r8)

0000339c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    339c:	b480      	push	{r7}
    339e:	b085      	sub	sp, #20
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	460b      	mov	r3, r1
    33a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    33a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    33ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	881b      	ldrh	r3, [r3, #0]
    33b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
    33b4:	89fb      	ldrh	r3, [r7, #14]
    33b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33ba:	ea4f 5383 	mov.w	r3, r3, lsl #22
    33be:	ea4f 5393 	mov.w	r3, r3, lsr #22
    33c2:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    33c4:	89fa      	ldrh	r2, [r7, #14]
    33c6:	887b      	ldrh	r3, [r7, #2]
    33c8:	ea42 0303 	orr.w	r3, r2, r3
    33cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    33ce:	687a      	ldr	r2, [r7, #4]
    33d0:	89fb      	ldrh	r3, [r7, #14]
    33d2:	8013      	strh	r3, [r2, #0]
}
    33d4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    33d8:	46bd      	mov	sp, r7
    33da:	bc80      	pop	{r7}
    33dc:	4770      	bx	lr
    33de:	46c0      	nop			(mov r8, r8)

000033e0 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    33e0:	b480      	push	{r7}
    33e2:	b085      	sub	sp, #20
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
    33e8:	460b      	mov	r3, r1
    33ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    33ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    33f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	891b      	ldrh	r3, [r3, #8]
    33f6:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
    33f8:	89fb      	ldrh	r3, [r7, #14]
    33fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33fe:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    3400:	89fa      	ldrh	r2, [r7, #14]
    3402:	887b      	ldrh	r3, [r7, #2]
    3404:	ea42 0303 	orr.w	r3, r2, r3
    3408:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    340a:	687a      	ldr	r2, [r7, #4]
    340c:	89fb      	ldrh	r3, [r7, #14]
    340e:	8113      	strh	r3, [r2, #8]
}
    3410:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3414:	46bd      	mov	sp, r7
    3416:	bc80      	pop	{r7}
    3418:	4770      	bx	lr
    341a:	46c0      	nop			(mov r8, r8)

0000341c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    341c:	b480      	push	{r7}
    341e:	b087      	sub	sp, #28
    3420:	af00      	add	r7, sp, #0
    3422:	60f8      	str	r0, [r7, #12]
    3424:	4618      	mov	r0, r3
    3426:	460b      	mov	r3, r1
    3428:	817b      	strh	r3, [r7, #10]
    342a:	4613      	mov	r3, r2
    342c:	813b      	strh	r3, [r7, #8]
    342e:	4603      	mov	r3, r0
    3430:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3432:	f04f 0300 	mov.w	r3, #0	; 0x0
    3436:	827b      	strh	r3, [r7, #18]
  uint16_t tmpccmr1 = 0;
    3438:	f04f 0300 	mov.w	r3, #0	; 0x0
    343c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    343e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3442:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	891b      	ldrh	r3, [r3, #8]
    3448:	827b      	strh	r3, [r7, #18]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	8b1b      	ldrh	r3, [r3, #24]
    344e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	8c1b      	ldrh	r3, [r3, #32]
    3454:	82fb      	strh	r3, [r7, #22]

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
    3456:	8a7b      	ldrh	r3, [r7, #18]
    3458:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    345c:	827b      	strh	r3, [r7, #18]
  tmpsmcr |= TIM_EncoderMode;
    345e:	8a7a      	ldrh	r2, [r7, #18]
    3460:	897b      	ldrh	r3, [r7, #10]
    3462:	ea42 0303 	orr.w	r3, r2, r3
    3466:	827b      	strh	r3, [r7, #18]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
    3468:	8abb      	ldrh	r3, [r7, #20]
    346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    346e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    3472:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
    3474:	8abb      	ldrh	r3, [r7, #20]
    3476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    347a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    347e:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
    3480:	8afb      	ldrh	r3, [r7, #22]
    3482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    3486:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    3488:	88fb      	ldrh	r3, [r7, #6]
    348a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    348e:	b29a      	uxth	r2, r3
    3490:	893b      	ldrh	r3, [r7, #8]
    3492:	ea42 0303 	orr.w	r3, r2, r3
    3496:	b29a      	uxth	r2, r3
    3498:	8afb      	ldrh	r3, [r7, #22]
    349a:	ea42 0303 	orr.w	r3, r2, r3
    349e:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	8a7b      	ldrh	r3, [r7, #18]
    34a4:	8113      	strh	r3, [r2, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    34a6:	68fa      	ldr	r2, [r7, #12]
    34a8:	8abb      	ldrh	r3, [r7, #20]
    34aa:	8313      	strh	r3, [r2, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    34ac:	68fa      	ldr	r2, [r7, #12]
    34ae:	8afb      	ldrh	r3, [r7, #22]
    34b0:	8413      	strh	r3, [r2, #32]
}
    34b2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    34b6:	46bd      	mov	sp, r7
    34b8:	bc80      	pop	{r7}
    34ba:	4770      	bx	lr

000034bc <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34bc:	b480      	push	{r7}
    34be:	b085      	sub	sp, #20
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	460b      	mov	r3, r1
    34c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    34c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    34cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	8b1b      	ldrh	r3, [r3, #24]
    34d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
    34d4:	89fb      	ldrh	r3, [r7, #14]
    34d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    34da:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    34dc:	89fa      	ldrh	r2, [r7, #14]
    34de:	887b      	ldrh	r3, [r7, #2]
    34e0:	ea42 0303 	orr.w	r3, r2, r3
    34e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	89fb      	ldrh	r3, [r7, #14]
    34ea:	8313      	strh	r3, [r2, #24]
}
    34ec:	f107 0714 	add.w	r7, r7, #20	; 0x14
    34f0:	46bd      	mov	sp, r7
    34f2:	bc80      	pop	{r7}
    34f4:	4770      	bx	lr
    34f6:	46c0      	nop			(mov r8, r8)

000034f8 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34f8:	b480      	push	{r7}
    34fa:	b085      	sub	sp, #20
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	460b      	mov	r3, r1
    3502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3504:	f04f 0300 	mov.w	r3, #0	; 0x0
    3508:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	8b1b      	ldrh	r3, [r3, #24]
    350e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
    3510:	89fb      	ldrh	r3, [r7, #14]
    3512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3516:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    3518:	887b      	ldrh	r3, [r7, #2]
    351a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    351e:	b29a      	uxth	r2, r3
    3520:	89fb      	ldrh	r3, [r7, #14]
    3522:	ea42 0303 	orr.w	r3, r2, r3
    3526:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3528:	687a      	ldr	r2, [r7, #4]
    352a:	89fb      	ldrh	r3, [r7, #14]
    352c:	8313      	strh	r3, [r2, #24]
}
    352e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3532:	46bd      	mov	sp, r7
    3534:	bc80      	pop	{r7}
    3536:	4770      	bx	lr

00003538 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3538:	b480      	push	{r7}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	460b      	mov	r3, r1
    3542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3544:	f04f 0300 	mov.w	r3, #0	; 0x0
    3548:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	8b9b      	ldrh	r3, [r3, #28]
    354e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
    3550:	89fb      	ldrh	r3, [r7, #14]
    3552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3556:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    3558:	89fa      	ldrh	r2, [r7, #14]
    355a:	887b      	ldrh	r3, [r7, #2]
    355c:	ea42 0303 	orr.w	r3, r2, r3
    3560:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3562:	687a      	ldr	r2, [r7, #4]
    3564:	89fb      	ldrh	r3, [r7, #14]
    3566:	8393      	strh	r3, [r2, #28]
}
    3568:	f107 0714 	add.w	r7, r7, #20	; 0x14
    356c:	46bd      	mov	sp, r7
    356e:	bc80      	pop	{r7}
    3570:	4770      	bx	lr
    3572:	46c0      	nop			(mov r8, r8)

00003574 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	460b      	mov	r3, r1
    357e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3580:	f04f 0300 	mov.w	r3, #0	; 0x0
    3584:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	8b9b      	ldrh	r3, [r3, #28]
    358a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
    358c:	89fb      	ldrh	r3, [r7, #14]
    358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3592:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    3594:	887b      	ldrh	r3, [r7, #2]
    3596:	ea4f 2303 	mov.w	r3, r3, lsl #8
    359a:	b29a      	uxth	r2, r3
    359c:	89fb      	ldrh	r3, [r7, #14]
    359e:	ea42 0303 	orr.w	r3, r2, r3
    35a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    35a4:	687a      	ldr	r2, [r7, #4]
    35a6:	89fb      	ldrh	r3, [r7, #14]
    35a8:	8393      	strh	r3, [r2, #28]
}
    35aa:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35ae:	46bd      	mov	sp, r7
    35b0:	bc80      	pop	{r7}
    35b2:	4770      	bx	lr

000035b4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    35b4:	b480      	push	{r7}
    35b6:	b085      	sub	sp, #20
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	460b      	mov	r3, r1
    35be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    35c0:	7afb      	ldrb	r3, [r7, #11]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d008      	beq.n	35d8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	881b      	ldrh	r3, [r3, #0]
    35ca:	b29b      	uxth	r3, r3
    35cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35d0:	b29b      	uxth	r3, r3
    35d2:	68fa      	ldr	r2, [r7, #12]
    35d4:	8013      	strh	r3, [r2, #0]
    35d6:	e00d      	b.n	35f4 <TIM_ARRPreloadConfig+0x40>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b29b      	uxth	r3, r3
    35de:	607b      	str	r3, [r7, #4]
    35e0:	f240 337f 	movw	r3, #895	; 0x37f
    35e4:	6879      	ldr	r1, [r7, #4]
    35e6:	ea01 0303 	and.w	r3, r1, r3
    35ea:	607b      	str	r3, [r7, #4]
    35ec:	68fa      	ldr	r2, [r7, #12]
    35ee:	6879      	ldr	r1, [r7, #4]
    35f0:	460b      	mov	r3, r1
    35f2:	8013      	strh	r3, [r2, #0]
  }
}
    35f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35f8:	46bd      	mov	sp, r7
    35fa:	bc80      	pop	{r7}
    35fc:	4770      	bx	lr
    35fe:	46c0      	nop			(mov r8, r8)

00003600 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3600:	b480      	push	{r7}
    3602:	b085      	sub	sp, #20
    3604:	af00      	add	r7, sp, #0
    3606:	60f8      	str	r0, [r7, #12]
    3608:	460b      	mov	r3, r1
    360a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    360c:	7afb      	ldrb	r3, [r7, #11]
    360e:	2b00      	cmp	r3, #0
    3610:	d008      	beq.n	3624 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	889b      	ldrh	r3, [r3, #4]
    3616:	b29b      	uxth	r3, r3
    3618:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    361c:	b29b      	uxth	r3, r3
    361e:	68fa      	ldr	r2, [r7, #12]
    3620:	8093      	strh	r3, [r2, #4]
    3622:	e00d      	b.n	3640 <TIM_SelectCOM+0x40>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	889b      	ldrh	r3, [r3, #4]
    3628:	b29b      	uxth	r3, r3
    362a:	607b      	str	r3, [r7, #4]
    362c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    3630:	6879      	ldr	r1, [r7, #4]
    3632:	ea01 0303 	and.w	r3, r1, r3
    3636:	607b      	str	r3, [r7, #4]
    3638:	68fa      	ldr	r2, [r7, #12]
    363a:	6879      	ldr	r1, [r7, #4]
    363c:	460b      	mov	r3, r1
    363e:	8093      	strh	r3, [r2, #4]
  }
}
    3640:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3644:	46bd      	mov	sp, r7
    3646:	bc80      	pop	{r7}
    3648:	4770      	bx	lr
    364a:	46c0      	nop			(mov r8, r8)

0000364c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    364c:	b480      	push	{r7}
    364e:	b085      	sub	sp, #20
    3650:	af00      	add	r7, sp, #0
    3652:	60f8      	str	r0, [r7, #12]
    3654:	460b      	mov	r3, r1
    3656:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3658:	7afb      	ldrb	r3, [r7, #11]
    365a:	2b00      	cmp	r3, #0
    365c:	d008      	beq.n	3670 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	889b      	ldrh	r3, [r3, #4]
    3662:	b29b      	uxth	r3, r3
    3664:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    3668:	b29b      	uxth	r3, r3
    366a:	68fa      	ldr	r2, [r7, #12]
    366c:	8093      	strh	r3, [r2, #4]
    366e:	e00d      	b.n	368c <TIM_SelectCCDMA+0x40>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	889b      	ldrh	r3, [r3, #4]
    3674:	b29b      	uxth	r3, r3
    3676:	607b      	str	r3, [r7, #4]
    3678:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    367c:	6879      	ldr	r1, [r7, #4]
    367e:	ea01 0303 	and.w	r3, r1, r3
    3682:	607b      	str	r3, [r7, #4]
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	6879      	ldr	r1, [r7, #4]
    3688:	460b      	mov	r3, r1
    368a:	8093      	strh	r3, [r2, #4]
  }
}
    368c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3690:	46bd      	mov	sp, r7
    3692:	bc80      	pop	{r7}
    3694:	4770      	bx	lr
    3696:	46c0      	nop			(mov r8, r8)

00003698 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    3698:	b480      	push	{r7}
    369a:	b085      	sub	sp, #20
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	460b      	mov	r3, r1
    36a2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36a4:	7afb      	ldrb	r3, [r7, #11]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d008      	beq.n	36bc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	889b      	ldrh	r3, [r3, #4]
    36ae:	b29b      	uxth	r3, r3
    36b0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    36b4:	b29b      	uxth	r3, r3
    36b6:	68fa      	ldr	r2, [r7, #12]
    36b8:	8093      	strh	r3, [r2, #4]
    36ba:	e00d      	b.n	36d8 <TIM_CCPreloadControl+0x40>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
    36bc:	68fb      	ldr	r3, [r7, #12]
    36be:	889b      	ldrh	r3, [r3, #4]
    36c0:	b29b      	uxth	r3, r3
    36c2:	607b      	str	r3, [r7, #4]
    36c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    36c8:	6879      	ldr	r1, [r7, #4]
    36ca:	ea01 0303 	and.w	r3, r1, r3
    36ce:	607b      	str	r3, [r7, #4]
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	6879      	ldr	r1, [r7, #4]
    36d4:	460b      	mov	r3, r1
    36d6:	8093      	strh	r3, [r2, #4]
  }
}
    36d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    36dc:	46bd      	mov	sp, r7
    36de:	bc80      	pop	{r7}
    36e0:	4770      	bx	lr
    36e2:	46c0      	nop			(mov r8, r8)

000036e4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    36e4:	b480      	push	{r7}
    36e6:	b085      	sub	sp, #20
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
    36ec:	460b      	mov	r3, r1
    36ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    36f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    36f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	8b1b      	ldrh	r3, [r3, #24]
    36fa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
    36fc:	89fb      	ldrh	r3, [r7, #14]
    36fe:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3702:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    3704:	89fa      	ldrh	r2, [r7, #14]
    3706:	887b      	ldrh	r3, [r7, #2]
    3708:	ea42 0303 	orr.w	r3, r2, r3
    370c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    370e:	687a      	ldr	r2, [r7, #4]
    3710:	89fb      	ldrh	r3, [r7, #14]
    3712:	8313      	strh	r3, [r2, #24]
}
    3714:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3718:	46bd      	mov	sp, r7
    371a:	bc80      	pop	{r7}
    371c:	4770      	bx	lr
    371e:	46c0      	nop			(mov r8, r8)

00003720 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	460b      	mov	r3, r1
    372a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    372c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3730:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	8b1b      	ldrh	r3, [r3, #24]
    3736:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
    3738:	89fb      	ldrh	r3, [r7, #14]
    373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    373e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    3740:	887b      	ldrh	r3, [r7, #2]
    3742:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3746:	b29a      	uxth	r2, r3
    3748:	89fb      	ldrh	r3, [r7, #14]
    374a:	ea42 0303 	orr.w	r3, r2, r3
    374e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	89fb      	ldrh	r3, [r7, #14]
    3754:	8313      	strh	r3, [r2, #24]
}
    3756:	f107 0714 	add.w	r7, r7, #20	; 0x14
    375a:	46bd      	mov	sp, r7
    375c:	bc80      	pop	{r7}
    375e:	4770      	bx	lr

00003760 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3760:	b480      	push	{r7}
    3762:	b085      	sub	sp, #20
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
    3768:	460b      	mov	r3, r1
    376a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    376c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3770:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	8b9b      	ldrh	r3, [r3, #28]
    3776:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
    3778:	89fb      	ldrh	r3, [r7, #14]
    377a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    377e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    3780:	89fa      	ldrh	r2, [r7, #14]
    3782:	887b      	ldrh	r3, [r7, #2]
    3784:	ea42 0303 	orr.w	r3, r2, r3
    3788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    378a:	687a      	ldr	r2, [r7, #4]
    378c:	89fb      	ldrh	r3, [r7, #14]
    378e:	8393      	strh	r3, [r2, #28]
}
    3790:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3794:	46bd      	mov	sp, r7
    3796:	bc80      	pop	{r7}
    3798:	4770      	bx	lr
    379a:	46c0      	nop			(mov r8, r8)

0000379c <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    379c:	b480      	push	{r7}
    379e:	b085      	sub	sp, #20
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    37a4:	460b      	mov	r3, r1
    37a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    37a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	8b9b      	ldrh	r3, [r3, #28]
    37b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
    37b4:	89fb      	ldrh	r3, [r7, #14]
    37b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    37ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    37bc:	887b      	ldrh	r3, [r7, #2]
    37be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    37c2:	b29a      	uxth	r2, r3
    37c4:	89fb      	ldrh	r3, [r7, #14]
    37c6:	ea42 0303 	orr.w	r3, r2, r3
    37ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	89fb      	ldrh	r3, [r7, #14]
    37d0:	8393      	strh	r3, [r2, #28]
}
    37d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    37d6:	46bd      	mov	sp, r7
    37d8:	bc80      	pop	{r7}
    37da:	4770      	bx	lr

000037dc <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	460b      	mov	r3, r1
    37e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    37e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	8b1b      	ldrh	r3, [r3, #24]
    37f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
    37f4:	89fb      	ldrh	r3, [r7, #14]
    37f6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    37fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    37fc:	89fa      	ldrh	r2, [r7, #14]
    37fe:	887b      	ldrh	r3, [r7, #2]
    3800:	ea42 0303 	orr.w	r3, r2, r3
    3804:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3806:	687a      	ldr	r2, [r7, #4]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	8313      	strh	r3, [r2, #24]
}
    380c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3810:	46bd      	mov	sp, r7
    3812:	bc80      	pop	{r7}
    3814:	4770      	bx	lr
    3816:	46c0      	nop			(mov r8, r8)

00003818 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3818:	b480      	push	{r7}
    381a:	b085      	sub	sp, #20
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	460b      	mov	r3, r1
    3822:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3824:	f04f 0300 	mov.w	r3, #0	; 0x0
    3828:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	8b1b      	ldrh	r3, [r3, #24]
    382e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
    3830:	89fb      	ldrh	r3, [r7, #14]
    3832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3836:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    3838:	887b      	ldrh	r3, [r7, #2]
    383a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    383e:	b29a      	uxth	r2, r3
    3840:	89fb      	ldrh	r3, [r7, #14]
    3842:	ea42 0303 	orr.w	r3, r2, r3
    3846:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3848:	687a      	ldr	r2, [r7, #4]
    384a:	89fb      	ldrh	r3, [r7, #14]
    384c:	8313      	strh	r3, [r2, #24]
}
    384e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3852:	46bd      	mov	sp, r7
    3854:	bc80      	pop	{r7}
    3856:	4770      	bx	lr

00003858 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3858:	b480      	push	{r7}
    385a:	b085      	sub	sp, #20
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	460b      	mov	r3, r1
    3862:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3864:	f04f 0300 	mov.w	r3, #0	; 0x0
    3868:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	8b9b      	ldrh	r3, [r3, #28]
    386e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
    3870:	89fb      	ldrh	r3, [r7, #14]
    3872:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    3876:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    3878:	89fa      	ldrh	r2, [r7, #14]
    387a:	887b      	ldrh	r3, [r7, #2]
    387c:	ea42 0303 	orr.w	r3, r2, r3
    3880:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3882:	687a      	ldr	r2, [r7, #4]
    3884:	89fb      	ldrh	r3, [r7, #14]
    3886:	8393      	strh	r3, [r2, #28]
}
    3888:	f107 0714 	add.w	r7, r7, #20	; 0x14
    388c:	46bd      	mov	sp, r7
    388e:	bc80      	pop	{r7}
    3890:	4770      	bx	lr
    3892:	46c0      	nop			(mov r8, r8)

00003894 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3894:	b480      	push	{r7}
    3896:	b085      	sub	sp, #20
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    389c:	460b      	mov	r3, r1
    389e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    38a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	8b9b      	ldrh	r3, [r3, #28]
    38aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
    38ac:	89fb      	ldrh	r3, [r7, #14]
    38ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    38b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    38b4:	887b      	ldrh	r3, [r7, #2]
    38b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    38ba:	b29a      	uxth	r2, r3
    38bc:	89fb      	ldrh	r3, [r7, #14]
    38be:	ea42 0303 	orr.w	r3, r2, r3
    38c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    38c4:	687a      	ldr	r2, [r7, #4]
    38c6:	89fb      	ldrh	r3, [r7, #14]
    38c8:	8393      	strh	r3, [r2, #28]
}
    38ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    38d4:	b480      	push	{r7}
    38d6:	b085      	sub	sp, #20
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	460b      	mov	r3, r1
    38de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    38e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	8b1b      	ldrh	r3, [r3, #24]
    38ea:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
    38ec:	89fb      	ldrh	r3, [r7, #14]
    38ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    38f2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    38f4:	89fa      	ldrh	r2, [r7, #14]
    38f6:	887b      	ldrh	r3, [r7, #2]
    38f8:	ea42 0303 	orr.w	r3, r2, r3
    38fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    38fe:	687a      	ldr	r2, [r7, #4]
    3900:	89fb      	ldrh	r3, [r7, #14]
    3902:	8313      	strh	r3, [r2, #24]
}
    3904:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3908:	46bd      	mov	sp, r7
    390a:	bc80      	pop	{r7}
    390c:	4770      	bx	lr
    390e:	46c0      	nop			(mov r8, r8)

00003910 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	460b      	mov	r3, r1
    391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    391c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3920:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	8b1b      	ldrh	r3, [r3, #24]
    3926:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
    3928:	89fb      	ldrh	r3, [r7, #14]
    392a:	ea4f 4343 	mov.w	r3, r3, lsl #17
    392e:	ea4f 4353 	mov.w	r3, r3, lsr #17
    3932:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    3934:	887b      	ldrh	r3, [r7, #2]
    3936:	ea4f 2303 	mov.w	r3, r3, lsl #8
    393a:	b29a      	uxth	r2, r3
    393c:	89fb      	ldrh	r3, [r7, #14]
    393e:	ea42 0303 	orr.w	r3, r2, r3
    3942:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3944:	687a      	ldr	r2, [r7, #4]
    3946:	89fb      	ldrh	r3, [r7, #14]
    3948:	8313      	strh	r3, [r2, #24]
}
    394a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    394e:	46bd      	mov	sp, r7
    3950:	bc80      	pop	{r7}
    3952:	4770      	bx	lr

00003954 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3954:	b480      	push	{r7}
    3956:	b085      	sub	sp, #20
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	460b      	mov	r3, r1
    395e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3960:	f04f 0300 	mov.w	r3, #0	; 0x0
    3964:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	8b9b      	ldrh	r3, [r3, #28]
    396a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
    396c:	89fb      	ldrh	r3, [r7, #14]
    396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3972:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    3974:	89fa      	ldrh	r2, [r7, #14]
    3976:	887b      	ldrh	r3, [r7, #2]
    3978:	ea42 0303 	orr.w	r3, r2, r3
    397c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    397e:	687a      	ldr	r2, [r7, #4]
    3980:	89fb      	ldrh	r3, [r7, #14]
    3982:	8393      	strh	r3, [r2, #28]
}
    3984:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3988:	46bd      	mov	sp, r7
    398a:	bc80      	pop	{r7}
    398c:	4770      	bx	lr
    398e:	46c0      	nop			(mov r8, r8)

00003990 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	460b      	mov	r3, r1
    399a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    399c:	f04f 0300 	mov.w	r3, #0	; 0x0
    39a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8b9b      	ldrh	r3, [r3, #28]
    39a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
    39a8:	89fb      	ldrh	r3, [r7, #14]
    39aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
    39ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
    39b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    39b4:	887b      	ldrh	r3, [r7, #2]
    39b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39ba:	b29a      	uxth	r2, r3
    39bc:	89fb      	ldrh	r3, [r7, #14]
    39be:	ea42 0303 	orr.w	r3, r2, r3
    39c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    39c4:	687a      	ldr	r2, [r7, #4]
    39c6:	89fb      	ldrh	r3, [r7, #14]
    39c8:	8393      	strh	r3, [r2, #28]
}
    39ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    39ce:	46bd      	mov	sp, r7
    39d0:	bc80      	pop	{r7}
    39d2:	4770      	bx	lr

000039d4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	460b      	mov	r3, r1
    39de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    39e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    39e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	8c1b      	ldrh	r3, [r3, #32]
    39ea:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
    39ec:	89fb      	ldrh	r3, [r7, #14]
    39ee:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    39f2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    39f4:	89fa      	ldrh	r2, [r7, #14]
    39f6:	887b      	ldrh	r3, [r7, #2]
    39f8:	ea42 0303 	orr.w	r3, r2, r3
    39fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    39fe:	687a      	ldr	r2, [r7, #4]
    3a00:	89fb      	ldrh	r3, [r7, #14]
    3a02:	8413      	strh	r3, [r2, #32]
}
    3a04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a08:	46bd      	mov	sp, r7
    3a0a:	bc80      	pop	{r7}
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			(mov r8, r8)

00003a10 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a10:	b480      	push	{r7}
    3a12:	b085      	sub	sp, #20
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    3a18:	460b      	mov	r3, r1
    3a1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	8c1b      	ldrh	r3, [r3, #32]
    3a26:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
    3a28:	89fb      	ldrh	r3, [r7, #14]
    3a2a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3a2e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    3a30:	89fa      	ldrh	r2, [r7, #14]
    3a32:	887b      	ldrh	r3, [r7, #2]
    3a34:	ea42 0303 	orr.w	r3, r2, r3
    3a38:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a3a:	687a      	ldr	r2, [r7, #4]
    3a3c:	89fb      	ldrh	r3, [r7, #14]
    3a3e:	8413      	strh	r3, [r2, #32]
}
    3a40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a44:	46bd      	mov	sp, r7
    3a46:	bc80      	pop	{r7}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			(mov r8, r8)

00003a4c <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3a4c:	b480      	push	{r7}
    3a4e:	b085      	sub	sp, #20
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	460b      	mov	r3, r1
    3a56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	8c1b      	ldrh	r3, [r3, #32]
    3a62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
    3a64:	89fb      	ldrh	r3, [r7, #14]
    3a66:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    3a6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    3a6c:	887b      	ldrh	r3, [r7, #2]
    3a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a72:	b29a      	uxth	r2, r3
    3a74:	89fb      	ldrh	r3, [r7, #14]
    3a76:	ea42 0303 	orr.w	r3, r2, r3
    3a7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a7c:	687a      	ldr	r2, [r7, #4]
    3a7e:	89fb      	ldrh	r3, [r7, #14]
    3a80:	8413      	strh	r3, [r2, #32]
}
    3a82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a86:	46bd      	mov	sp, r7
    3a88:	bc80      	pop	{r7}
    3a8a:	4770      	bx	lr

00003a8c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a8c:	b480      	push	{r7}
    3a8e:	b085      	sub	sp, #20
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	460b      	mov	r3, r1
    3a96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a98:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a9c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	8c1b      	ldrh	r3, [r3, #32]
    3aa2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
    3aa4:	89fb      	ldrh	r3, [r7, #14]
    3aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3aaa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    3aac:	887b      	ldrh	r3, [r7, #2]
    3aae:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3ab2:	b29a      	uxth	r2, r3
    3ab4:	89fb      	ldrh	r3, [r7, #14]
    3ab6:	ea42 0303 	orr.w	r3, r2, r3
    3aba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3abc:	687a      	ldr	r2, [r7, #4]
    3abe:	89fb      	ldrh	r3, [r7, #14]
    3ac0:	8413      	strh	r3, [r2, #32]
}
    3ac2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ac6:	46bd      	mov	sp, r7
    3ac8:	bc80      	pop	{r7}
    3aca:	4770      	bx	lr

00003acc <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3acc:	b480      	push	{r7}
    3ace:	b085      	sub	sp, #20
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	460b      	mov	r3, r1
    3ad6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3ad8:	f04f 0300 	mov.w	r3, #0	; 0x0
    3adc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	8c1b      	ldrh	r3, [r3, #32]
    3ae2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
    3ae4:	89fb      	ldrh	r3, [r7, #14]
    3ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3aea:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    3aec:	887b      	ldrh	r3, [r7, #2]
    3aee:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3af2:	b29a      	uxth	r2, r3
    3af4:	89fb      	ldrh	r3, [r7, #14]
    3af6:	ea42 0303 	orr.w	r3, r2, r3
    3afa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3afc:	687a      	ldr	r2, [r7, #4]
    3afe:	89fb      	ldrh	r3, [r7, #14]
    3b00:	8413      	strh	r3, [r2, #32]
}
    3b02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b06:	46bd      	mov	sp, r7
    3b08:	bc80      	pop	{r7}
    3b0a:	4770      	bx	lr

00003b0c <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
    3b14:	460b      	mov	r3, r1
    3b16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b18:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b1c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	8c1b      	ldrh	r3, [r3, #32]
    3b22:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
    3b24:	89fb      	ldrh	r3, [r7, #14]
    3b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b2a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    3b2c:	887b      	ldrh	r3, [r7, #2]
    3b2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3b32:	b29a      	uxth	r2, r3
    3b34:	89fb      	ldrh	r3, [r7, #14]
    3b36:	ea42 0303 	orr.w	r3, r2, r3
    3b3a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b3c:	687a      	ldr	r2, [r7, #4]
    3b3e:	89fb      	ldrh	r3, [r7, #14]
    3b40:	8413      	strh	r3, [r2, #32]
}
    3b42:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b46:	46bd      	mov	sp, r7
    3b48:	bc80      	pop	{r7}
    3b4a:	4770      	bx	lr

00003b4c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3b4c:	b480      	push	{r7}
    3b4e:	b085      	sub	sp, #20
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
    3b54:	460b      	mov	r3, r1
    3b56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	8c1b      	ldrh	r3, [r3, #32]
    3b62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
    3b64:	89fb      	ldrh	r3, [r7, #14]
    3b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    3b6c:	887b      	ldrh	r3, [r7, #2]
    3b6e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b72:	b29a      	uxth	r2, r3
    3b74:	89fb      	ldrh	r3, [r7, #14]
    3b76:	ea42 0303 	orr.w	r3, r2, r3
    3b7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b7c:	687a      	ldr	r2, [r7, #4]
    3b7e:	89fb      	ldrh	r3, [r7, #14]
    3b80:	8413      	strh	r3, [r2, #32]
}
    3b82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b86:	46bd      	mov	sp, r7
    3b88:	bc80      	pop	{r7}
    3b8a:	4770      	bx	lr

00003b8c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	460b      	mov	r3, r1
    3b96:	807b      	strh	r3, [r7, #2]
    3b98:	4613      	mov	r3, r2
    3b9a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3b9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    3ba2:	887a      	ldrh	r2, [r7, #2]
    3ba4:	f04f 0301 	mov.w	r3, #1	; 0x1
    3ba8:	fa03 f302 	lsl.w	r3, r3, r2
    3bac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	8c1b      	ldrh	r3, [r3, #32]
    3bb2:	b29a      	uxth	r2, r3
    3bb4:	89fb      	ldrh	r3, [r7, #14]
    3bb6:	ea6f 0303 	mvn.w	r3, r3
    3bba:	b29b      	uxth	r3, r3
    3bbc:	ea02 0303 	and.w	r3, r2, r3
    3bc0:	b29b      	uxth	r3, r3
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	8c1b      	ldrh	r3, [r3, #32]
    3bca:	b299      	uxth	r1, r3
    3bcc:	883a      	ldrh	r2, [r7, #0]
    3bce:	887b      	ldrh	r3, [r7, #2]
    3bd0:	fa02 f303 	lsl.w	r3, r2, r3
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	ea41 0303 	orr.w	r3, r1, r3
    3bda:	b29b      	uxth	r3, r3
    3bdc:	687a      	ldr	r2, [r7, #4]
    3bde:	8413      	strh	r3, [r2, #32]
}
    3be0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3be4:	46bd      	mov	sp, r7
    3be6:	bc80      	pop	{r7}
    3be8:	4770      	bx	lr
    3bea:	46c0      	nop			(mov r8, r8)

00003bec <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	460b      	mov	r3, r1
    3bf6:	807b      	strh	r3, [r7, #2]
    3bf8:	4613      	mov	r3, r2
    3bfa:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c00:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    3c02:	887a      	ldrh	r2, [r7, #2]
    3c04:	f04f 0304 	mov.w	r3, #4	; 0x4
    3c08:	fa03 f302 	lsl.w	r3, r3, r2
    3c0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	8c1b      	ldrh	r3, [r3, #32]
    3c12:	b29a      	uxth	r2, r3
    3c14:	89fb      	ldrh	r3, [r7, #14]
    3c16:	ea6f 0303 	mvn.w	r3, r3
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	ea02 0303 	and.w	r3, r2, r3
    3c20:	b29b      	uxth	r3, r3
    3c22:	687a      	ldr	r2, [r7, #4]
    3c24:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	8c1b      	ldrh	r3, [r3, #32]
    3c2a:	b299      	uxth	r1, r3
    3c2c:	883a      	ldrh	r2, [r7, #0]
    3c2e:	887b      	ldrh	r3, [r7, #2]
    3c30:	fa02 f303 	lsl.w	r3, r2, r3
    3c34:	b29b      	uxth	r3, r3
    3c36:	ea41 0303 	orr.w	r3, r1, r3
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	687a      	ldr	r2, [r7, #4]
    3c3e:	8413      	strh	r3, [r2, #32]
}
    3c40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3c44:	46bd      	mov	sp, r7
    3c46:	bc80      	pop	{r7}
    3c48:	4770      	bx	lr
    3c4a:	46c0      	nop			(mov r8, r8)

00003c4c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    3c4c:	b480      	push	{r7}
    3c4e:	b085      	sub	sp, #20
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	460b      	mov	r3, r1
    3c56:	807b      	strh	r3, [r7, #2]
    3c58:	4613      	mov	r3, r2
    3c5a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    3c5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c60:	60bb      	str	r3, [r7, #8]
  uint16_t tmp1 = 0;
    3c62:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c66:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	60bb      	str	r3, [r7, #8]
  tmp += CCMR_Offset;
    3c6c:	68bb      	ldr	r3, [r7, #8]
    3c6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    3c72:	60bb      	str	r3, [r7, #8]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    3c74:	887a      	ldrh	r2, [r7, #2]
    3c76:	f04f 0301 	mov.w	r3, #1	; 0x1
    3c7a:	fa03 f302 	lsl.w	r3, r3, r2
    3c7e:	81fb      	strh	r3, [r7, #14]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	8c1b      	ldrh	r3, [r3, #32]
    3c84:	b29a      	uxth	r2, r3
    3c86:	89fb      	ldrh	r3, [r7, #14]
    3c88:	ea6f 0303 	mvn.w	r3, r3
    3c8c:	b29b      	uxth	r3, r3
    3c8e:	ea02 0303 	and.w	r3, r2, r3
    3c92:	b29b      	uxth	r3, r3
    3c94:	687a      	ldr	r2, [r7, #4]
    3c96:	8413      	strh	r3, [r2, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    3c98:	887b      	ldrh	r3, [r7, #2]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d002      	beq.n	3ca4 <TIM_SelectOCxM+0x58>
    3c9e:	887b      	ldrh	r3, [r7, #2]
    3ca0:	2b08      	cmp	r3, #8
    3ca2:	d117      	bne.n	3cd4 <TIM_SelectOCxM+0x88>
  {
    tmp += (TIM_Channel>>1);
    3ca4:	887b      	ldrh	r3, [r7, #2]
    3ca6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3caa:	b29b      	uxth	r3, r3
    3cac:	461a      	mov	r2, r3
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	4413      	add	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
    3cb4:	68b9      	ldr	r1, [r7, #8]
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	681a      	ldr	r2, [r3, #0]
    3cba:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3cbe:	ea02 0303 	and.w	r3, r2, r3
    3cc2:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    3cc4:	68b9      	ldr	r1, [r7, #8]
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	681a      	ldr	r2, [r3, #0]
    3cca:	883b      	ldrh	r3, [r7, #0]
    3ccc:	ea42 0303 	orr.w	r3, r2, r3
    3cd0:	600b      	str	r3, [r1, #0]
    3cd2:	e01c      	b.n	3d0e <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    3cd4:	887b      	ldrh	r3, [r7, #2]
    3cd6:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
    3cda:	b29b      	uxth	r3, r3
    3cdc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	461a      	mov	r2, r3
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	4413      	add	r3, r2
    3ce8:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
    3cea:	68b9      	ldr	r1, [r7, #8]
    3cec:	68bb      	ldr	r3, [r7, #8]
    3cee:	681a      	ldr	r2, [r3, #0]
    3cf0:	f648 73ff 	movw	r3, #36863	; 0x8fff
    3cf4:	ea02 0303 	and.w	r3, r2, r3
    3cf8:	600b      	str	r3, [r1, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    3cfa:	68b9      	ldr	r1, [r7, #8]
    3cfc:	68bb      	ldr	r3, [r7, #8]
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	883b      	ldrh	r3, [r7, #0]
    3d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3d06:	b29b      	uxth	r3, r3
    3d08:	ea42 0303 	orr.w	r3, r2, r3
    3d0c:	600b      	str	r3, [r1, #0]
  }
}
    3d0e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d12:	46bd      	mov	sp, r7
    3d14:	bc80      	pop	{r7}
    3d16:	4770      	bx	lr

00003d18 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3d18:	b480      	push	{r7}
    3d1a:	b085      	sub	sp, #20
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	60f8      	str	r0, [r7, #12]
    3d20:	460b      	mov	r3, r1
    3d22:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3d24:	7afb      	ldrb	r3, [r7, #11]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d008      	beq.n	3d3c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	881b      	ldrh	r3, [r3, #0]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    3d34:	b29b      	uxth	r3, r3
    3d36:	68fa      	ldr	r2, [r7, #12]
    3d38:	8013      	strh	r3, [r2, #0]
    3d3a:	e00d      	b.n	3d58 <TIM_UpdateDisableConfig+0x40>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	881b      	ldrh	r3, [r3, #0]
    3d40:	b29b      	uxth	r3, r3
    3d42:	607b      	str	r3, [r7, #4]
    3d44:	f240 33fd 	movw	r3, #1021	; 0x3fd
    3d48:	6879      	ldr	r1, [r7, #4]
    3d4a:	ea01 0303 	and.w	r3, r1, r3
    3d4e:	607b      	str	r3, [r7, #4]
    3d50:	68fa      	ldr	r2, [r7, #12]
    3d52:	6879      	ldr	r1, [r7, #4]
    3d54:	460b      	mov	r3, r1
    3d56:	8013      	strh	r3, [r2, #0]
  }
}
    3d58:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bc80      	pop	{r7}
    3d60:	4770      	bx	lr
    3d62:	46c0      	nop			(mov r8, r8)

00003d64 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    3d64:	b480      	push	{r7}
    3d66:	b085      	sub	sp, #20
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	460b      	mov	r3, r1
    3d6e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    3d70:	897b      	ldrh	r3, [r7, #10]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d008      	beq.n	3d88 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	881b      	ldrh	r3, [r3, #0]
    3d7a:	b29b      	uxth	r3, r3
    3d7c:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    3d80:	b29b      	uxth	r3, r3
    3d82:	68fa      	ldr	r2, [r7, #12]
    3d84:	8013      	strh	r3, [r2, #0]
    3d86:	e00d      	b.n	3da4 <TIM_UpdateRequestConfig+0x40>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	607b      	str	r3, [r7, #4]
    3d90:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3d94:	6879      	ldr	r1, [r7, #4]
    3d96:	ea01 0303 	and.w	r3, r1, r3
    3d9a:	607b      	str	r3, [r7, #4]
    3d9c:	68fa      	ldr	r2, [r7, #12]
    3d9e:	6879      	ldr	r1, [r7, #4]
    3da0:	460b      	mov	r3, r1
    3da2:	8013      	strh	r3, [r2, #0]
  }
}
    3da4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3da8:	46bd      	mov	sp, r7
    3daa:	bc80      	pop	{r7}
    3dac:	4770      	bx	lr
    3dae:	46c0      	nop			(mov r8, r8)

00003db0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3db0:	b480      	push	{r7}
    3db2:	b085      	sub	sp, #20
    3db4:	af00      	add	r7, sp, #0
    3db6:	60f8      	str	r0, [r7, #12]
    3db8:	460b      	mov	r3, r1
    3dba:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3dbc:	7afb      	ldrb	r3, [r7, #11]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d008      	beq.n	3dd4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	889b      	ldrh	r3, [r3, #4]
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3dcc:	b29b      	uxth	r3, r3
    3dce:	68fa      	ldr	r2, [r7, #12]
    3dd0:	8093      	strh	r3, [r2, #4]
    3dd2:	e00d      	b.n	3df0 <TIM_SelectHallSensor+0x40>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	889b      	ldrh	r3, [r3, #4]
    3dd8:	b29b      	uxth	r3, r3
    3dda:	607b      	str	r3, [r7, #4]
    3ddc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	ea01 0303 	and.w	r3, r1, r3
    3de6:	607b      	str	r3, [r7, #4]
    3de8:	68fa      	ldr	r2, [r7, #12]
    3dea:	6879      	ldr	r1, [r7, #4]
    3dec:	460b      	mov	r3, r1
    3dee:	8093      	strh	r3, [r2, #4]
  }
}
    3df0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3df4:	46bd      	mov	sp, r7
    3df6:	bc80      	pop	{r7}
    3df8:	4770      	bx	lr
    3dfa:	46c0      	nop			(mov r8, r8)

00003dfc <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b085      	sub	sp, #20
    3e00:	af00      	add	r7, sp, #0
    3e02:	60f8      	str	r0, [r7, #12]
    3e04:	460b      	mov	r3, r1
    3e06:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	881b      	ldrh	r3, [r3, #0]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	607b      	str	r3, [r7, #4]
    3e10:	f240 33f7 	movw	r3, #1015	; 0x3f7
    3e14:	6879      	ldr	r1, [r7, #4]
    3e16:	ea01 0303 	and.w	r3, r1, r3
    3e1a:	607b      	str	r3, [r7, #4]
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	6879      	ldr	r1, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	8013      	strh	r3, [r2, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	881b      	ldrh	r3, [r3, #0]
    3e28:	b29a      	uxth	r2, r3
    3e2a:	897b      	ldrh	r3, [r7, #10]
    3e2c:	ea42 0303 	orr.w	r3, r2, r3
    3e30:	b29b      	uxth	r3, r3
    3e32:	68fa      	ldr	r2, [r7, #12]
    3e34:	8013      	strh	r3, [r2, #0]
}
    3e36:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e3a:	46bd      	mov	sp, r7
    3e3c:	bc80      	pop	{r7}
    3e3e:	4770      	bx	lr

00003e40 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    3e40:	b480      	push	{r7}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	460b      	mov	r3, r1
    3e4a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	889b      	ldrh	r3, [r3, #4]
    3e50:	b29b      	uxth	r3, r3
    3e52:	607b      	str	r3, [r7, #4]
    3e54:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	ea01 0303 	and.w	r3, r1, r3
    3e5e:	607b      	str	r3, [r7, #4]
    3e60:	68fa      	ldr	r2, [r7, #12]
    3e62:	6879      	ldr	r1, [r7, #4]
    3e64:	460b      	mov	r3, r1
    3e66:	8093      	strh	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	889b      	ldrh	r3, [r3, #4]
    3e6c:	b29a      	uxth	r2, r3
    3e6e:	897b      	ldrh	r3, [r7, #10]
    3e70:	ea42 0303 	orr.w	r3, r2, r3
    3e74:	b29b      	uxth	r3, r3
    3e76:	68fa      	ldr	r2, [r7, #12]
    3e78:	8093      	strh	r3, [r2, #4]
}
    3e7a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e7e:	46bd      	mov	sp, r7
    3e80:	bc80      	pop	{r7}
    3e82:	4770      	bx	lr

00003e84 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    3e84:	b480      	push	{r7}
    3e86:	b085      	sub	sp, #20
    3e88:	af00      	add	r7, sp, #0
    3e8a:	60f8      	str	r0, [r7, #12]
    3e8c:	460b      	mov	r3, r1
    3e8e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	891b      	ldrh	r3, [r3, #8]
    3e94:	b29b      	uxth	r3, r3
    3e96:	607b      	str	r3, [r7, #4]
    3e98:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    3e9c:	6879      	ldr	r1, [r7, #4]
    3e9e:	ea01 0303 	and.w	r3, r1, r3
    3ea2:	607b      	str	r3, [r7, #4]
    3ea4:	68fa      	ldr	r2, [r7, #12]
    3ea6:	6879      	ldr	r1, [r7, #4]
    3ea8:	460b      	mov	r3, r1
    3eaa:	8113      	strh	r3, [r2, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    3eac:	68fb      	ldr	r3, [r7, #12]
    3eae:	891b      	ldrh	r3, [r3, #8]
    3eb0:	b29a      	uxth	r2, r3
    3eb2:	897b      	ldrh	r3, [r7, #10]
    3eb4:	ea42 0303 	orr.w	r3, r2, r3
    3eb8:	b29b      	uxth	r3, r3
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	8113      	strh	r3, [r2, #8]
}
    3ebe:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    3ec8:	b480      	push	{r7}
    3eca:	b085      	sub	sp, #20
    3ecc:	af00      	add	r7, sp, #0
    3ece:	60f8      	str	r0, [r7, #12]
    3ed0:	460b      	mov	r3, r1
    3ed2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	891b      	ldrh	r3, [r3, #8]
    3ed8:	b29b      	uxth	r3, r3
    3eda:	607b      	str	r3, [r7, #4]
    3edc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3ee0:	6879      	ldr	r1, [r7, #4]
    3ee2:	ea01 0303 	and.w	r3, r1, r3
    3ee6:	607b      	str	r3, [r7, #4]
    3ee8:	68fa      	ldr	r2, [r7, #12]
    3eea:	6879      	ldr	r1, [r7, #4]
    3eec:	460b      	mov	r3, r1
    3eee:	8113      	strh	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    3ef0:	68fb      	ldr	r3, [r7, #12]
    3ef2:	891b      	ldrh	r3, [r3, #8]
    3ef4:	b29a      	uxth	r2, r3
    3ef6:	897b      	ldrh	r3, [r7, #10]
    3ef8:	ea42 0303 	orr.w	r3, r2, r3
    3efc:	b29b      	uxth	r3, r3
    3efe:	68fa      	ldr	r2, [r7, #12]
    3f00:	8113      	strh	r3, [r2, #8]
}
    3f02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3f06:	46bd      	mov	sp, r7
    3f08:	bc80      	pop	{r7}
    3f0a:	4770      	bx	lr

00003f0c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	460b      	mov	r3, r1
    3f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    3f18:	687a      	ldr	r2, [r7, #4]
    3f1a:	887b      	ldrh	r3, [r7, #2]
    3f1c:	8493      	strh	r3, [r2, #36]
}
    3f1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f22:	46bd      	mov	sp, r7
    3f24:	bc80      	pop	{r7}
    3f26:	4770      	bx	lr

00003f28 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    3f30:	460b      	mov	r3, r1
    3f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    3f34:	687a      	ldr	r2, [r7, #4]
    3f36:	887b      	ldrh	r3, [r7, #2]
    3f38:	8593      	strh	r3, [r2, #44]
}
    3f3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f3e:	46bd      	mov	sp, r7
    3f40:	bc80      	pop	{r7}
    3f42:	4770      	bx	lr

00003f44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    3f44:	b480      	push	{r7}
    3f46:	b083      	sub	sp, #12
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	460b      	mov	r3, r1
    3f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    3f50:	687a      	ldr	r2, [r7, #4]
    3f52:	887b      	ldrh	r3, [r7, #2]
    3f54:	8693      	strh	r3, [r2, #52]
}
    3f56:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bc80      	pop	{r7}
    3f5e:	4770      	bx	lr

00003f60 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	460b      	mov	r3, r1
    3f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    3f6c:	687a      	ldr	r2, [r7, #4]
    3f6e:	887b      	ldrh	r3, [r7, #2]
    3f70:	8713      	strh	r3, [r2, #56]
}
    3f72:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f76:	46bd      	mov	sp, r7
    3f78:	bc80      	pop	{r7}
    3f7a:	4770      	bx	lr

00003f7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b083      	sub	sp, #12
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	460b      	mov	r3, r1
    3f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    3f88:	687a      	ldr	r2, [r7, #4]
    3f8a:	887b      	ldrh	r3, [r7, #2]
    3f8c:	8793      	strh	r3, [r2, #60]
}
    3f8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f92:	46bd      	mov	sp, r7
    3f94:	bc80      	pop	{r7}
    3f96:	4770      	bx	lr

00003f98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    3f98:	b480      	push	{r7}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	460b      	mov	r3, r1
    3fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    3fa4:	687a      	ldr	r2, [r7, #4]
    3fa6:	887b      	ldrh	r3, [r7, #2]
    3fa8:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    3fac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bc80      	pop	{r7}
    3fb4:	4770      	bx	lr
    3fb6:	46c0      	nop			(mov r8, r8)

00003fb8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3fb8:	b480      	push	{r7}
    3fba:	b085      	sub	sp, #20
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	60f8      	str	r0, [r7, #12]
    3fc0:	460b      	mov	r3, r1
    3fc2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	8b1b      	ldrh	r3, [r3, #24]
    3fc8:	b29b      	uxth	r3, r3
    3fca:	607b      	str	r3, [r7, #4]
    3fcc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    3fd0:	6879      	ldr	r1, [r7, #4]
    3fd2:	ea01 0303 	and.w	r3, r1, r3
    3fd6:	607b      	str	r3, [r7, #4]
    3fd8:	68fa      	ldr	r2, [r7, #12]
    3fda:	6879      	ldr	r1, [r7, #4]
    3fdc:	460b      	mov	r3, r1
    3fde:	8313      	strh	r3, [r2, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	8b1b      	ldrh	r3, [r3, #24]
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	897b      	ldrh	r3, [r7, #10]
    3fe8:	ea42 0303 	orr.w	r3, r2, r3
    3fec:	b29b      	uxth	r3, r3
    3fee:	68fa      	ldr	r2, [r7, #12]
    3ff0:	8313      	strh	r3, [r2, #24]
}
    3ff2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bc80      	pop	{r7}
    3ffa:	4770      	bx	lr

00003ffc <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	60f8      	str	r0, [r7, #12]
    4004:	460b      	mov	r3, r1
    4006:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	8b1b      	ldrh	r3, [r3, #24]
    400c:	b29b      	uxth	r3, r3
    400e:	607b      	str	r3, [r7, #4]
    4010:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    4014:	6879      	ldr	r1, [r7, #4]
    4016:	ea01 0303 	and.w	r3, r1, r3
    401a:	607b      	str	r3, [r7, #4]
    401c:	68fa      	ldr	r2, [r7, #12]
    401e:	6879      	ldr	r1, [r7, #4]
    4020:	460b      	mov	r3, r1
    4022:	8313      	strh	r3, [r2, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	8b1b      	ldrh	r3, [r3, #24]
    4028:	b29a      	uxth	r2, r3
    402a:	897b      	ldrh	r3, [r7, #10]
    402c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4030:	b29b      	uxth	r3, r3
    4032:	ea42 0303 	orr.w	r3, r2, r3
    4036:	b29b      	uxth	r3, r3
    4038:	68fa      	ldr	r2, [r7, #12]
    403a:	8313      	strh	r3, [r2, #24]
}
    403c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4040:	46bd      	mov	sp, r7
    4042:	bc80      	pop	{r7}
    4044:	4770      	bx	lr
    4046:	46c0      	nop			(mov r8, r8)

00004048 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4048:	b480      	push	{r7}
    404a:	b085      	sub	sp, #20
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	460b      	mov	r3, r1
    4052:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	8b9b      	ldrh	r3, [r3, #28]
    4058:	b29b      	uxth	r3, r3
    405a:	607b      	str	r3, [r7, #4]
    405c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    4060:	6879      	ldr	r1, [r7, #4]
    4062:	ea01 0303 	and.w	r3, r1, r3
    4066:	607b      	str	r3, [r7, #4]
    4068:	68fa      	ldr	r2, [r7, #12]
    406a:	6879      	ldr	r1, [r7, #4]
    406c:	460b      	mov	r3, r1
    406e:	8393      	strh	r3, [r2, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	8b9b      	ldrh	r3, [r3, #28]
    4074:	b29a      	uxth	r2, r3
    4076:	897b      	ldrh	r3, [r7, #10]
    4078:	ea42 0303 	orr.w	r3, r2, r3
    407c:	b29b      	uxth	r3, r3
    407e:	68fa      	ldr	r2, [r7, #12]
    4080:	8393      	strh	r3, [r2, #28]
}
    4082:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4086:	46bd      	mov	sp, r7
    4088:	bc80      	pop	{r7}
    408a:	4770      	bx	lr

0000408c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    408c:	b480      	push	{r7}
    408e:	b085      	sub	sp, #20
    4090:	af00      	add	r7, sp, #0
    4092:	60f8      	str	r0, [r7, #12]
    4094:	460b      	mov	r3, r1
    4096:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	8b9b      	ldrh	r3, [r3, #28]
    409c:	b29b      	uxth	r3, r3
    409e:	607b      	str	r3, [r7, #4]
    40a0:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    40a4:	6879      	ldr	r1, [r7, #4]
    40a6:	ea01 0303 	and.w	r3, r1, r3
    40aa:	607b      	str	r3, [r7, #4]
    40ac:	68fa      	ldr	r2, [r7, #12]
    40ae:	6879      	ldr	r1, [r7, #4]
    40b0:	460b      	mov	r3, r1
    40b2:	8393      	strh	r3, [r2, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	8b9b      	ldrh	r3, [r3, #28]
    40b8:	b29a      	uxth	r2, r3
    40ba:	897b      	ldrh	r3, [r7, #10]
    40bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
    40c0:	b29b      	uxth	r3, r3
    40c2:	ea42 0303 	orr.w	r3, r2, r3
    40c6:	b29b      	uxth	r3, r3
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	8393      	strh	r3, [r2, #28]
}
    40cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    40d0:	46bd      	mov	sp, r7
    40d2:	bc80      	pop	{r7}
    40d4:	4770      	bx	lr
    40d6:	46c0      	nop			(mov r8, r8)

000040d8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	460b      	mov	r3, r1
    40e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	881b      	ldrh	r3, [r3, #0]
    40e8:	b29b      	uxth	r3, r3
    40ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    40ee:	687a      	ldr	r2, [r7, #4]
    40f0:	8013      	strh	r3, [r2, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	881b      	ldrh	r3, [r3, #0]
    40f6:	b29a      	uxth	r2, r3
    40f8:	887b      	ldrh	r3, [r7, #2]
    40fa:	ea42 0303 	orr.w	r3, r2, r3
    40fe:	b29b      	uxth	r3, r3
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	8013      	strh	r3, [r2, #0]
}
    4104:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4108:	46bd      	mov	sp, r7
    410a:	bc80      	pop	{r7}
    410c:	4770      	bx	lr
    410e:	46c0      	nop			(mov r8, r8)

00004110 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	8e9b      	ldrh	r3, [r3, #52]
    411c:	b29b      	uxth	r3, r3
}
    411e:	4618      	mov	r0, r3
    4120:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4124:	46bd      	mov	sp, r7
    4126:	bc80      	pop	{r7}
    4128:	4770      	bx	lr
    412a:	46c0      	nop			(mov r8, r8)

0000412c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	8f1b      	ldrh	r3, [r3, #56]
    4138:	b29b      	uxth	r3, r3
}
    413a:	4618      	mov	r0, r3
    413c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4140:	46bd      	mov	sp, r7
    4142:	bc80      	pop	{r7}
    4144:	4770      	bx	lr
    4146:	46c0      	nop			(mov r8, r8)

00004148 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	8f9b      	ldrh	r3, [r3, #60]
    4154:	b29b      	uxth	r3, r3
}
    4156:	4618      	mov	r0, r3
    4158:	f107 070c 	add.w	r7, r7, #12	; 0xc
    415c:	46bd      	mov	sp, r7
    415e:	bc80      	pop	{r7}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			(mov r8, r8)

00004164 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	f8b3 3040 	ldrh.w	r3, [r3, #64]
    4172:	b29b      	uxth	r3, r3
}
    4174:	4618      	mov	r0, r3
    4176:	f107 070c 	add.w	r7, r7, #12	; 0xc
    417a:	46bd      	mov	sp, r7
    417c:	bc80      	pop	{r7}
    417e:	4770      	bx	lr

00004180 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	8c9b      	ldrh	r3, [r3, #36]
    418c:	b29b      	uxth	r3, r3
}
    418e:	4618      	mov	r0, r3
    4190:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4194:	46bd      	mov	sp, r7
    4196:	bc80      	pop	{r7}
    4198:	4770      	bx	lr
    419a:	46c0      	nop			(mov r8, r8)

0000419c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	8d1b      	ldrh	r3, [r3, #40]
    41a8:	b29b      	uxth	r3, r3
}
    41aa:	4618      	mov	r0, r3
    41ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    41b0:	46bd      	mov	sp, r7
    41b2:	bc80      	pop	{r7}
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			(mov r8, r8)

000041b8 <TIM_GetFlagStatus>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    41b8:	b480      	push	{r7}
    41ba:	b085      	sub	sp, #20
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    41c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	8a1b      	ldrh	r3, [r3, #16]
    41ce:	b29a      	uxth	r2, r3
    41d0:	887b      	ldrh	r3, [r7, #2]
    41d2:	ea02 0303 	and.w	r3, r2, r3
    41d6:	b29b      	uxth	r3, r3
    41d8:	2b00      	cmp	r3, #0
    41da:	d003      	beq.n	41e4 <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    41dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    41e0:	73fb      	strb	r3, [r7, #15]
    41e2:	e002      	b.n	41ea <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    41e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    41ea:	7bfb      	ldrb	r3, [r7, #15]
}
    41ec:	4618      	mov	r0, r3
    41ee:	f107 0714 	add.w	r7, r7, #20	; 0x14
    41f2:	46bd      	mov	sp, r7
    41f4:	bc80      	pop	{r7}
    41f6:	4770      	bx	lr

000041f8 <TIM_ClearFlag>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.  
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    41f8:	b480      	push	{r7}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4204:	887b      	ldrh	r3, [r7, #2]
    4206:	ea6f 0303 	mvn.w	r3, r3
    420a:	b29b      	uxth	r3, r3
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	8213      	strh	r3, [r2, #16]
}
    4210:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4214:	46bd      	mov	sp, r7
    4216:	bc80      	pop	{r7}
    4218:	4770      	bx	lr
    421a:	46c0      	nop			(mov r8, r8)

0000421c <TIM_GetITStatus>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    421c:	b480      	push	{r7}
    421e:	b085      	sub	sp, #20
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	460b      	mov	r3, r1
    4226:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4228:	f04f 0300 	mov.w	r3, #0	; 0x0
    422c:	72fb      	strb	r3, [r7, #11]
  uint16_t itstatus = 0x0, itenable = 0x0;
    422e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4232:	81bb      	strh	r3, [r7, #12]
    4234:	f04f 0300 	mov.w	r3, #0	; 0x0
    4238:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	8a1b      	ldrh	r3, [r3, #16]
    423e:	b29a      	uxth	r2, r3
    4240:	887b      	ldrh	r3, [r7, #2]
    4242:	ea02 0303 	and.w	r3, r2, r3
    4246:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	899b      	ldrh	r3, [r3, #12]
    424c:	b29a      	uxth	r2, r3
    424e:	887b      	ldrh	r3, [r7, #2]
    4250:	ea02 0303 	and.w	r3, r2, r3
    4254:	81fb      	strh	r3, [r7, #14]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4256:	89bb      	ldrh	r3, [r7, #12]
    4258:	2b00      	cmp	r3, #0
    425a:	d006      	beq.n	426a <TIM_GetITStatus+0x4e>
    425c:	89fb      	ldrh	r3, [r7, #14]
    425e:	2b00      	cmp	r3, #0
    4260:	d003      	beq.n	426a <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
    4262:	f04f 0301 	mov.w	r3, #1	; 0x1
    4266:	72fb      	strb	r3, [r7, #11]
    4268:	e002      	b.n	4270 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
    426a:	f04f 0300 	mov.w	r3, #0	; 0x0
    426e:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    4270:	7afb      	ldrb	r3, [r7, #11]
}
    4272:	4618      	mov	r0, r3
    4274:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4278:	46bd      	mov	sp, r7
    427a:	bc80      	pop	{r7}
    427c:	4770      	bx	lr
    427e:	46c0      	nop			(mov r8, r8)

00004280 <TIM_ClearITPendingBit>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	460b      	mov	r3, r1
    428a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    428c:	887b      	ldrh	r3, [r7, #2]
    428e:	ea6f 0303 	mvn.w	r3, r3
    4292:	b29b      	uxth	r3, r3
    4294:	687a      	ldr	r2, [r7, #4]
    4296:	8213      	strh	r3, [r2, #16]
}
    4298:	f107 070c 	add.w	r7, r7, #12	; 0xc
    429c:	46bd      	mov	sp, r7
    429e:	bc80      	pop	{r7}
    42a0:	4770      	bx	lr
    42a2:	46c0      	nop			(mov r8, r8)

000042a4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    42a4:	b480      	push	{r7}
    42a6:	b087      	sub	sp, #28
    42a8:	af00      	add	r7, sp, #0
    42aa:	60f8      	str	r0, [r7, #12]
    42ac:	4618      	mov	r0, r3
    42ae:	460b      	mov	r3, r1
    42b0:	817b      	strh	r3, [r7, #10]
    42b2:	4613      	mov	r3, r2
    42b4:	813b      	strh	r3, [r7, #8]
    42b6:	4603      	mov	r3, r0
    42b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    42ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    42be:	82bb      	strh	r3, [r7, #20]
    42c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    42c4:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	8c1b      	ldrh	r3, [r3, #32]
    42ca:	b29b      	uxth	r3, r3
    42cc:	603b      	str	r3, [r7, #0]
    42ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    42d2:	6839      	ldr	r1, [r7, #0]
    42d4:	ea01 0303 	and.w	r3, r1, r3
    42d8:	603b      	str	r3, [r7, #0]
    42da:	68fa      	ldr	r2, [r7, #12]
    42dc:	6839      	ldr	r1, [r7, #0]
    42de:	460b      	mov	r3, r1
    42e0:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	8b1b      	ldrh	r3, [r3, #24]
    42e6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	8c1b      	ldrh	r3, [r3, #32]
    42ec:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    42ee:	8abb      	ldrh	r3, [r7, #20]
    42f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    42f4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    42f6:	88fb      	ldrh	r3, [r7, #6]
    42f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    42fc:	b29a      	uxth	r2, r3
    42fe:	893b      	ldrh	r3, [r7, #8]
    4300:	ea42 0303 	orr.w	r3, r2, r3
    4304:	b29a      	uxth	r2, r3
    4306:	8abb      	ldrh	r3, [r7, #20]
    4308:	ea42 0303 	orr.w	r3, r2, r3
    430c:	82bb      	strh	r3, [r7, #20]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
    430e:	8afb      	ldrh	r3, [r7, #22]
    4310:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    4314:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
    4316:	897a      	ldrh	r2, [r7, #10]
    4318:	8afb      	ldrh	r3, [r7, #22]
    431a:	ea42 0303 	orr.w	r3, r2, r3
    431e:	b29b      	uxth	r3, r3
    4320:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4324:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4326:	68fa      	ldr	r2, [r7, #12]
    4328:	8abb      	ldrh	r3, [r7, #20]
    432a:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    432c:	68fa      	ldr	r2, [r7, #12]
    432e:	8afb      	ldrh	r3, [r7, #22]
    4330:	8413      	strh	r3, [r2, #32]
}
    4332:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4336:	46bd      	mov	sp, r7
    4338:	bc80      	pop	{r7}
    433a:	4770      	bx	lr

0000433c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    433c:	b480      	push	{r7}
    433e:	b087      	sub	sp, #28
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	4618      	mov	r0, r3
    4346:	460b      	mov	r3, r1
    4348:	817b      	strh	r3, [r7, #10]
    434a:	4613      	mov	r3, r2
    434c:	813b      	strh	r3, [r7, #8]
    434e:	4603      	mov	r3, r0
    4350:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    4352:	f04f 0300 	mov.w	r3, #0	; 0x0
    4356:	827b      	strh	r3, [r7, #18]
    4358:	f04f 0300 	mov.w	r3, #0	; 0x0
    435c:	82bb      	strh	r3, [r7, #20]
    435e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4362:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	8c1b      	ldrh	r3, [r3, #32]
    4368:	b29b      	uxth	r3, r3
    436a:	603b      	str	r3, [r7, #0]
    436c:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4370:	6839      	ldr	r1, [r7, #0]
    4372:	ea01 0303 	and.w	r3, r1, r3
    4376:	603b      	str	r3, [r7, #0]
    4378:	68fa      	ldr	r2, [r7, #12]
    437a:	6839      	ldr	r1, [r7, #0]
    437c:	460b      	mov	r3, r1
    437e:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	8b1b      	ldrh	r3, [r3, #24]
    4384:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	8c1b      	ldrh	r3, [r3, #32]
    438a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    438c:	897b      	ldrh	r3, [r7, #10]
    438e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4392:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    4394:	8a7b      	ldrh	r3, [r7, #18]
    4396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    439a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    439e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    43a2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    43a4:	88fb      	ldrh	r3, [r7, #6]
    43a6:	ea4f 3303 	mov.w	r3, r3, lsl #12
    43aa:	b29a      	uxth	r2, r3
    43ac:	8a7b      	ldrh	r3, [r7, #18]
    43ae:	ea42 0303 	orr.w	r3, r2, r3
    43b2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    43b4:	893b      	ldrh	r3, [r7, #8]
    43b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    43ba:	b29a      	uxth	r2, r3
    43bc:	8a7b      	ldrh	r3, [r7, #18]
    43be:	ea42 0303 	orr.w	r3, r2, r3
    43c2:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
    43c4:	8abb      	ldrh	r3, [r7, #20]
    43c6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    43ca:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
    43cc:	8afa      	ldrh	r2, [r7, #22]
    43ce:	8abb      	ldrh	r3, [r7, #20]
    43d0:	ea42 0303 	orr.w	r3, r2, r3
    43d4:	b29b      	uxth	r3, r3
    43d6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    43da:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	8a7b      	ldrh	r3, [r7, #18]
    43e0:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    43e2:	68fa      	ldr	r2, [r7, #12]
    43e4:	8abb      	ldrh	r3, [r7, #20]
    43e6:	8413      	strh	r3, [r2, #32]
}
    43e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    43ec:	46bd      	mov	sp, r7
    43ee:	bc80      	pop	{r7}
    43f0:	4770      	bx	lr
    43f2:	46c0      	nop			(mov r8, r8)

000043f4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    43f4:	b480      	push	{r7}
    43f6:	b087      	sub	sp, #28
    43f8:	af00      	add	r7, sp, #0
    43fa:	60f8      	str	r0, [r7, #12]
    43fc:	4618      	mov	r0, r3
    43fe:	460b      	mov	r3, r1
    4400:	817b      	strh	r3, [r7, #10]
    4402:	4613      	mov	r3, r2
    4404:	813b      	strh	r3, [r7, #8]
    4406:	4603      	mov	r3, r0
    4408:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    440a:	f04f 0300 	mov.w	r3, #0	; 0x0
    440e:	827b      	strh	r3, [r7, #18]
    4410:	f04f 0300 	mov.w	r3, #0	; 0x0
    4414:	82bb      	strh	r3, [r7, #20]
    4416:	f04f 0300 	mov.w	r3, #0	; 0x0
    441a:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	8c1b      	ldrh	r3, [r3, #32]
    4420:	b29b      	uxth	r3, r3
    4422:	603b      	str	r3, [r7, #0]
    4424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    4428:	6839      	ldr	r1, [r7, #0]
    442a:	ea01 0303 	and.w	r3, r1, r3
    442e:	603b      	str	r3, [r7, #0]
    4430:	68fa      	ldr	r2, [r7, #12]
    4432:	6839      	ldr	r1, [r7, #0]
    4434:	460b      	mov	r3, r1
    4436:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	8b9b      	ldrh	r3, [r3, #28]
    443c:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	8c1b      	ldrh	r3, [r3, #32]
    4442:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    4444:	897b      	ldrh	r3, [r7, #10]
    4446:	ea4f 2303 	mov.w	r3, r3, lsl #8
    444a:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    444c:	8a7b      	ldrh	r3, [r7, #18]
    444e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4452:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4454:	88fb      	ldrh	r3, [r7, #6]
    4456:	ea4f 1303 	mov.w	r3, r3, lsl #4
    445a:	b29a      	uxth	r2, r3
    445c:	893b      	ldrh	r3, [r7, #8]
    445e:	ea42 0303 	orr.w	r3, r2, r3
    4462:	b29a      	uxth	r2, r3
    4464:	8a7b      	ldrh	r3, [r7, #18]
    4466:	ea42 0303 	orr.w	r3, r2, r3
    446a:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
    446c:	8abb      	ldrh	r3, [r7, #20]
    446e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4472:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
    4474:	8afa      	ldrh	r2, [r7, #22]
    4476:	8abb      	ldrh	r3, [r7, #20]
    4478:	ea42 0303 	orr.w	r3, r2, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4482:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    4484:	68fa      	ldr	r2, [r7, #12]
    4486:	8a7b      	ldrh	r3, [r7, #18]
    4488:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer;
    448a:	68fa      	ldr	r2, [r7, #12]
    448c:	8abb      	ldrh	r3, [r7, #20]
    448e:	8413      	strh	r3, [r2, #32]
}
    4490:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	46c0      	nop			(mov r8, r8)

0000449c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    449c:	b480      	push	{r7}
    449e:	b087      	sub	sp, #28
    44a0:	af00      	add	r7, sp, #0
    44a2:	60f8      	str	r0, [r7, #12]
    44a4:	4618      	mov	r0, r3
    44a6:	460b      	mov	r3, r1
    44a8:	817b      	strh	r3, [r7, #10]
    44aa:	4613      	mov	r3, r2
    44ac:	813b      	strh	r3, [r7, #8]
    44ae:	4603      	mov	r3, r0
    44b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    44b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    44b6:	827b      	strh	r3, [r7, #18]
    44b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    44bc:	82bb      	strh	r3, [r7, #20]
    44be:	f04f 0300 	mov.w	r3, #0	; 0x0
    44c2:	82fb      	strh	r3, [r7, #22]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	8c1b      	ldrh	r3, [r3, #32]
    44c8:	b29b      	uxth	r3, r3
    44ca:	603b      	str	r3, [r7, #0]
    44cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
    44d0:	6839      	ldr	r1, [r7, #0]
    44d2:	ea01 0303 	and.w	r3, r1, r3
    44d6:	603b      	str	r3, [r7, #0]
    44d8:	68fa      	ldr	r2, [r7, #12]
    44da:	6839      	ldr	r1, [r7, #0]
    44dc:	460b      	mov	r3, r1
    44de:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	8b9b      	ldrh	r3, [r3, #28]
    44e4:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	8c1b      	ldrh	r3, [r3, #32]
    44ea:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    44ec:	897b      	ldrh	r3, [r7, #10]
    44ee:	ea4f 3303 	mov.w	r3, r3, lsl #12
    44f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    44f4:	8a7b      	ldrh	r3, [r7, #18]
    44f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    44fa:	ea4f 5303 	mov.w	r3, r3, lsl #20
    44fe:	ea4f 5313 	mov.w	r3, r3, lsr #20
    4502:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    4504:	893b      	ldrh	r3, [r7, #8]
    4506:	ea4f 2303 	mov.w	r3, r3, lsl #8
    450a:	b29a      	uxth	r2, r3
    450c:	8a7b      	ldrh	r3, [r7, #18]
    450e:	ea42 0303 	orr.w	r3, r2, r3
    4512:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    4514:	88fb      	ldrh	r3, [r7, #6]
    4516:	ea4f 3303 	mov.w	r3, r3, lsl #12
    451a:	b29a      	uxth	r2, r3
    451c:	8a7b      	ldrh	r3, [r7, #18]
    451e:	ea42 0303 	orr.w	r3, r2, r3
    4522:	827b      	strh	r3, [r7, #18]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
    4524:	8abb      	ldrh	r3, [r7, #20]
    4526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    452a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
    452c:	8afa      	ldrh	r2, [r7, #22]
    452e:	8abb      	ldrh	r3, [r7, #20]
    4530:	ea42 0303 	orr.w	r3, r2, r3
    4534:	b29b      	uxth	r3, r3
    4536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    453a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    453c:	68fa      	ldr	r2, [r7, #12]
    453e:	8a7b      	ldrh	r3, [r7, #18]
    4540:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer ;
    4542:	68fa      	ldr	r2, [r7, #12]
    4544:	8abb      	ldrh	r3, [r7, #20]
    4546:	8413      	strh	r3, [r2, #32]
}
    4548:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    454c:	46bd      	mov	sp, r7
    454e:	bc80      	pop	{r7}
    4550:	4770      	bx	lr
    4552:	46c0      	nop			(mov r8, r8)

00004554 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    4554:	b580      	push	{r7, lr}
    4556:	b082      	sub	sp, #8
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    455c:	687a      	ldr	r2, [r7, #4]
    455e:	4b2b      	ldr	r3, [pc, #172]	(460c <USART_DeInit+0xb8>)
    4560:	429a      	cmp	r2, r3
    4562:	d10c      	bne.n	457e <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    4564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4568:	f04f 0101 	mov.w	r1, #1	; 0x1
    456c:	f7fd ffd2 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    4570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4574:	f04f 0100 	mov.w	r1, #0	; 0x0
    4578:	f7fd ffcc 	bl	2514 <RCC_APB2PeriphResetCmd>
    457c:	e042      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    457e:	687a      	ldr	r2, [r7, #4]
    4580:	4b23      	ldr	r3, [pc, #140]	(4610 <USART_DeInit+0xbc>)
    4582:	429a      	cmp	r2, r3
    4584:	d10c      	bne.n	45a0 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    4586:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    458a:	f04f 0101 	mov.w	r1, #1	; 0x1
    458e:	f7fd ffe3 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    4592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4596:	f04f 0100 	mov.w	r1, #0	; 0x0
    459a:	f7fd ffdd 	bl	2558 <RCC_APB1PeriphResetCmd>
    459e:	e031      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	4b1c      	ldr	r3, [pc, #112]	(4614 <USART_DeInit+0xc0>)
    45a4:	429a      	cmp	r2, r3
    45a6:	d10c      	bne.n	45c2 <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    45a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45ac:	f04f 0101 	mov.w	r1, #1	; 0x1
    45b0:	f7fd ffd2 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    45b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45b8:	f04f 0100 	mov.w	r1, #0	; 0x0
    45bc:	f7fd ffcc 	bl	2558 <RCC_APB1PeriphResetCmd>
    45c0:	e020      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	4b14      	ldr	r3, [pc, #80]	(4618 <USART_DeInit+0xc4>)
    45c6:	429a      	cmp	r2, r3
    45c8:	d10c      	bne.n	45e4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    45ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    45d2:	f7fd ffc1 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    45d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45da:	f04f 0100 	mov.w	r1, #0	; 0x0
    45de:	f7fd ffbb 	bl	2558 <RCC_APB1PeriphResetCmd>
    45e2:	e00f      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    45e4:	687a      	ldr	r2, [r7, #4]
    45e6:	4b0d      	ldr	r3, [pc, #52]	(461c <USART_DeInit+0xc8>)
    45e8:	429a      	cmp	r2, r3
    45ea:	d10b      	bne.n	4604 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    45ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45f0:	f04f 0101 	mov.w	r1, #1	; 0x1
    45f4:	f7fd ffb0 	bl	2558 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    45f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45fc:	f04f 0100 	mov.w	r1, #0	; 0x0
    4600:	f7fd ffaa 	bl	2558 <RCC_APB1PeriphResetCmd>
    }
  }
}
    4604:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	40013800 	.word	0x40013800
    4610:	40004400 	.word	0x40004400
    4614:	40004800 	.word	0x40004800
    4618:	40004c00 	.word	0x40004c00
    461c:	40005000 	.word	0x40005000

00004620 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    4620:	b580      	push	{r7, lr}
    4622:	b08c      	sub	sp, #48
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    462a:	f04f 0300 	mov.w	r3, #0	; 0x0
    462e:	61fb      	str	r3, [r7, #28]
    4630:	f04f 0300 	mov.w	r3, #0	; 0x0
    4634:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
    4636:	f04f 0300 	mov.w	r3, #0	; 0x0
    463a:	627b      	str	r3, [r7, #36]
  uint32_t fractionaldivider = 0x00;
    463c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4640:	62bb      	str	r3, [r7, #40]
  uint32_t usartxbase = 0;
    4642:	f04f 0300 	mov.w	r3, #0	; 0x0
    4646:	62fb      	str	r3, [r7, #44]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	62fb      	str	r3, [r7, #44]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	8a1b      	ldrh	r3, [r3, #16]
    4650:	b29b      	uxth	r3, r3
    4652:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    4654:	69fa      	ldr	r2, [r7, #28]
    4656:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    465a:	ea02 0303 	and.w	r3, r2, r3
    465e:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    4660:	683b      	ldr	r3, [r7, #0]
    4662:	88db      	ldrh	r3, [r3, #6]
    4664:	461a      	mov	r2, r3
    4666:	69fb      	ldr	r3, [r7, #28]
    4668:	ea43 0302 	orr.w	r3, r3, r2
    466c:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	b29b      	uxth	r3, r3
    4672:	687a      	ldr	r2, [r7, #4]
    4674:	8213      	strh	r3, [r2, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	899b      	ldrh	r3, [r3, #12]
    467a:	b29b      	uxth	r3, r3
    467c:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    467e:	69fa      	ldr	r2, [r7, #28]
    4680:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    4684:	ea02 0303 	and.w	r3, r2, r3
    4688:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	889a      	ldrh	r2, [r3, #4]
    468e:	683b      	ldr	r3, [r7, #0]
    4690:	891b      	ldrh	r3, [r3, #8]
    4692:	ea42 0303 	orr.w	r3, r2, r3
    4696:	b29a      	uxth	r2, r3
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	895b      	ldrh	r3, [r3, #10]
    469c:	ea42 0303 	orr.w	r3, r2, r3
    46a0:	b29b      	uxth	r3, r3
    46a2:	461a      	mov	r2, r3
    46a4:	69fb      	ldr	r3, [r7, #28]
    46a6:	ea43 0302 	orr.w	r3, r3, r2
    46aa:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    46ac:	69fb      	ldr	r3, [r7, #28]
    46ae:	b29b      	uxth	r3, r3
    46b0:	687a      	ldr	r2, [r7, #4]
    46b2:	8193      	strh	r3, [r2, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	8a9b      	ldrh	r3, [r3, #20]
    46b8:	b29b      	uxth	r3, r3
    46ba:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    46bc:	69fa      	ldr	r2, [r7, #28]
    46be:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    46c2:	ea02 0303 	and.w	r3, r2, r3
    46c6:	61fb      	str	r3, [r7, #28]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    46c8:	683b      	ldr	r3, [r7, #0]
    46ca:	899b      	ldrh	r3, [r3, #12]
    46cc:	461a      	mov	r2, r3
    46ce:	69fb      	ldr	r3, [r7, #28]
    46d0:	ea43 0302 	orr.w	r3, r3, r2
    46d4:	61fb      	str	r3, [r7, #28]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    46d6:	69fb      	ldr	r3, [r7, #28]
    46d8:	b29b      	uxth	r3, r3
    46da:	687a      	ldr	r2, [r7, #4]
    46dc:	8293      	strh	r3, [r2, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    46de:	f107 0308 	add.w	r3, r7, #8	; 0x8
    46e2:	4618      	mov	r0, r3
    46e4:	f7fd fd94 	bl	2210 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    46e8:	6afa      	ldr	r2, [r7, #44]
    46ea:	4b24      	ldr	r3, [pc, #144]	(477c <USART_Init+0x15c>)
    46ec:	429a      	cmp	r2, r3
    46ee:	d102      	bne.n	46f6 <USART_Init+0xd6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    46f0:	697b      	ldr	r3, [r7, #20]
    46f2:	623b      	str	r3, [r7, #32]
    46f4:	e001      	b.n	46fa <USART_Init+0xda>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    46f6:	693b      	ldr	r3, [r7, #16]
    46f8:	623b      	str	r3, [r7, #32]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    46fa:	6a39      	ldr	r1, [r7, #32]
    46fc:	460b      	mov	r3, r1
    46fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    4702:	ea4f 0382 	mov.w	r3, r2, lsl #2
    4706:	ebc2 0303 	rsb	r3, r2, r3
    470a:	eb03 0201 	add.w	r2, r3, r1
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4716:	fbb2 f3f3 	udiv	r3, r2, r3
    471a:	627b      	str	r3, [r7, #36]
  tmpreg = (integerdivider / 0x64) << 0x04;
    471c:	6a7a      	ldr	r2, [r7, #36]
    471e:	4b18      	ldr	r3, [pc, #96]	(4780 <USART_Init+0x160>)
    4720:	fba3 1302 	umull	r1, r3, r3, r2
    4724:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4728:	ea4f 1303 	mov.w	r3, r3, lsl #4
    472c:	61fb      	str	r3, [r7, #28]
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	ea4f 1313 	mov.w	r3, r3, lsr #4
    4734:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4738:	ea4f 0283 	mov.w	r2, r3, lsl #2
    473c:	4413      	add	r3, r2
    473e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4742:	441a      	add	r2, r3
    4744:	6a7b      	ldr	r3, [r7, #36]
    4746:	ebc2 0303 	rsb	r3, r2, r3
    474a:	62bb      	str	r3, [r7, #40]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
    474c:	6abb      	ldr	r3, [r7, #40]
    474e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4752:	f103 0232 	add.w	r2, r3, #50	; 0x32
    4756:	4b0a      	ldr	r3, [pc, #40]	(4780 <USART_Init+0x160>)
    4758:	fba3 1302 	umull	r1, r3, r3, r2
    475c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4760:	f003 020f 	and.w	r2, r3, #15	; 0xf
    4764:	69fb      	ldr	r3, [r7, #28]
    4766:	ea43 0302 	orr.w	r3, r3, r2
    476a:	61fb      	str	r3, [r7, #28]
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    476c:	69fb      	ldr	r3, [r7, #28]
    476e:	b29b      	uxth	r3, r3
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	8113      	strh	r3, [r2, #8]
}
    4774:	f107 0730 	add.w	r7, r7, #48	; 0x30
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}
    477c:	40013800 	.word	0x40013800
    4780:	51eb851f 	.word	0x51eb851f

00004784 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    4784:	b480      	push	{r7}
    4786:	b083      	sub	sp, #12
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    478c:	687a      	ldr	r2, [r7, #4]
    478e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4792:	6013      	str	r3, [r2, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    4794:	687a      	ldr	r2, [r7, #4]
    4796:	f04f 0300 	mov.w	r3, #0	; 0x0
    479a:	8093      	strh	r3, [r2, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    479c:	687a      	ldr	r2, [r7, #4]
    479e:	f04f 0300 	mov.w	r3, #0	; 0x0
    47a2:	80d3      	strh	r3, [r2, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    47a4:	687a      	ldr	r2, [r7, #4]
    47a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47aa:	8113      	strh	r3, [r2, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    47ac:	687a      	ldr	r2, [r7, #4]
    47ae:	f04f 030c 	mov.w	r3, #12	; 0xc
    47b2:	8153      	strh	r3, [r2, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47ba:	8193      	strh	r3, [r2, #12]
}
    47bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    47c0:	46bd      	mov	sp, r7
    47c2:	bc80      	pop	{r7}
    47c4:	4770      	bx	lr
    47c6:	46c0      	nop			(mov r8, r8)

000047c8 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    47c8:	b480      	push	{r7}
    47ca:	b085      	sub	sp, #20
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    47d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    47d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	8a1b      	ldrh	r3, [r3, #16]
    47dc:	b29b      	uxth	r3, r3
    47de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    47e0:	68fa      	ldr	r2, [r7, #12]
    47e2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    47e6:	ea02 0303 	and.w	r3, r2, r3
    47ea:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	881a      	ldrh	r2, [r3, #0]
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	885b      	ldrh	r3, [r3, #2]
    47f4:	ea42 0303 	orr.w	r3, r2, r3
    47f8:	b29a      	uxth	r2, r3
    47fa:	683b      	ldr	r3, [r7, #0]
    47fc:	889b      	ldrh	r3, [r3, #4]
    47fe:	ea42 0303 	orr.w	r3, r2, r3
    4802:	b29a      	uxth	r2, r3
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	88db      	ldrh	r3, [r3, #6]
    4808:	ea42 0303 	orr.w	r3, r2, r3
    480c:	b29b      	uxth	r3, r3
    480e:	461a      	mov	r2, r3
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	ea43 0302 	orr.w	r3, r3, r2
    4816:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	b29b      	uxth	r3, r3
    481c:	687a      	ldr	r2, [r7, #4]
    481e:	8213      	strh	r3, [r2, #16]
}
    4820:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4824:	46bd      	mov	sp, r7
    4826:	bc80      	pop	{r7}
    4828:	4770      	bx	lr
    482a:	46c0      	nop			(mov r8, r8)

0000482c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    482c:	b480      	push	{r7}
    482e:	b083      	sub	sp, #12
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    4834:	687a      	ldr	r2, [r7, #4]
    4836:	f04f 0300 	mov.w	r3, #0	; 0x0
    483a:	8013      	strh	r3, [r2, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    483c:	687a      	ldr	r2, [r7, #4]
    483e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4842:	8053      	strh	r3, [r2, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	f04f 0300 	mov.w	r3, #0	; 0x0
    484a:	8093      	strh	r3, [r2, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    484c:	687a      	ldr	r2, [r7, #4]
    484e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4852:	80d3      	strh	r3, [r2, #6]
}
    4854:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4858:	46bd      	mov	sp, r7
    485a:	bc80      	pop	{r7}
    485c:	4770      	bx	lr
    485e:	46c0      	nop			(mov r8, r8)

00004860 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4860:	b480      	push	{r7}
    4862:	b085      	sub	sp, #20
    4864:	af00      	add	r7, sp, #0
    4866:	60f8      	str	r0, [r7, #12]
    4868:	460b      	mov	r3, r1
    486a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    486c:	7afb      	ldrb	r3, [r7, #11]
    486e:	2b00      	cmp	r3, #0
    4870:	d008      	beq.n	4884 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	899b      	ldrh	r3, [r3, #12]
    4876:	b29b      	uxth	r3, r3
    4878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    487c:	b29b      	uxth	r3, r3
    487e:	68fa      	ldr	r2, [r7, #12]
    4880:	8193      	strh	r3, [r2, #12]
    4882:	e00d      	b.n	48a0 <USART_Cmd+0x40>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	899b      	ldrh	r3, [r3, #12]
    4888:	b29b      	uxth	r3, r3
    488a:	607b      	str	r3, [r7, #4]
    488c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    4890:	6879      	ldr	r1, [r7, #4]
    4892:	ea01 0303 	and.w	r3, r1, r3
    4896:	607b      	str	r3, [r7, #4]
    4898:	68fa      	ldr	r2, [r7, #12]
    489a:	6879      	ldr	r1, [r7, #4]
    489c:	460b      	mov	r3, r1
    489e:	8193      	strh	r3, [r2, #12]
  }
}
    48a0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    48a4:	46bd      	mov	sp, r7
    48a6:	bc80      	pop	{r7}
    48a8:	4770      	bx	lr
    48aa:	46c0      	nop			(mov r8, r8)

000048ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    48ac:	b480      	push	{r7}
    48ae:	b087      	sub	sp, #28
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
    48b4:	460b      	mov	r3, r1
    48b6:	807b      	strh	r3, [r7, #2]
    48b8:	4613      	mov	r3, r2
    48ba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    48bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c0:	60bb      	str	r3, [r7, #8]
    48c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c6:	60fb      	str	r3, [r7, #12]
    48c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    48cc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0x00;
    48ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    48d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    48d8:	887b      	ldrh	r3, [r7, #2]
    48da:	b2db      	uxtb	r3, r3
    48dc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    48e0:	b2db      	uxtb	r3, r3
    48e2:	60bb      	str	r3, [r7, #8]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    48e4:	887b      	ldrh	r3, [r7, #2]
    48e6:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    48ea:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    48ec:	68fa      	ldr	r2, [r7, #12]
    48ee:	f04f 0301 	mov.w	r3, #1	; 0x1
    48f2:	fa03 f302 	lsl.w	r3, r3, r2
    48f6:	613b      	str	r3, [r7, #16]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    48f8:	68bb      	ldr	r3, [r7, #8]
    48fa:	2b01      	cmp	r3, #1
    48fc:	d104      	bne.n	4908 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	f103 030c 	add.w	r3, r3, #12	; 0xc
    4904:	617b      	str	r3, [r7, #20]
    4906:	e00b      	b.n	4920 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	2b02      	cmp	r3, #2
    490c:	d104      	bne.n	4918 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	f103 0310 	add.w	r3, r3, #16	; 0x10
    4914:	617b      	str	r3, [r7, #20]
    4916:	e003      	b.n	4920 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	f103 0314 	add.w	r3, r3, #20	; 0x14
    491e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    4920:	787b      	ldrb	r3, [r7, #1]
    4922:	2b00      	cmp	r3, #0
    4924:	d007      	beq.n	4936 <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    4926:	6979      	ldr	r1, [r7, #20]
    4928:	697b      	ldr	r3, [r7, #20]
    492a:	681a      	ldr	r2, [r3, #0]
    492c:	693b      	ldr	r3, [r7, #16]
    492e:	ea42 0303 	orr.w	r3, r2, r3
    4932:	600b      	str	r3, [r1, #0]
    4934:	e008      	b.n	4948 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    4936:	6979      	ldr	r1, [r7, #20]
    4938:	697b      	ldr	r3, [r7, #20]
    493a:	681a      	ldr	r2, [r3, #0]
    493c:	693b      	ldr	r3, [r7, #16]
    493e:	ea6f 0303 	mvn.w	r3, r3
    4942:	ea02 0303 	and.w	r3, r2, r3
    4946:	600b      	str	r3, [r1, #0]
  }
}
    4948:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    494c:	46bd      	mov	sp, r7
    494e:	bc80      	pop	{r7}
    4950:	4770      	bx	lr
    4952:	46c0      	nop			(mov r8, r8)

00004954 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    4954:	b480      	push	{r7}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
    495c:	460b      	mov	r3, r1
    495e:	807b      	strh	r3, [r7, #2]
    4960:	4613      	mov	r3, r2
    4962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    4964:	787b      	ldrb	r3, [r7, #1]
    4966:	2b00      	cmp	r3, #0
    4968:	d009      	beq.n	497e <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	8a9b      	ldrh	r3, [r3, #20]
    496e:	b29a      	uxth	r2, r3
    4970:	887b      	ldrh	r3, [r7, #2]
    4972:	ea42 0303 	orr.w	r3, r2, r3
    4976:	b29b      	uxth	r3, r3
    4978:	687a      	ldr	r2, [r7, #4]
    497a:	8293      	strh	r3, [r2, #20]
    497c:	e00b      	b.n	4996 <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	8a9b      	ldrh	r3, [r3, #20]
    4982:	b29a      	uxth	r2, r3
    4984:	887b      	ldrh	r3, [r7, #2]
    4986:	ea6f 0303 	mvn.w	r3, r3
    498a:	b29b      	uxth	r3, r3
    498c:	ea02 0303 	and.w	r3, r2, r3
    4990:	b29b      	uxth	r3, r3
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	8293      	strh	r3, [r2, #20]
  }
}
    4996:	f107 070c 	add.w	r7, r7, #12	; 0xc
    499a:	46bd      	mov	sp, r7
    499c:	bc80      	pop	{r7}
    499e:	4770      	bx	lr

000049a0 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    49a0:	b480      	push	{r7}
    49a2:	b085      	sub	sp, #20
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	460b      	mov	r3, r1
    49aa:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    49ac:	68fb      	ldr	r3, [r7, #12]
    49ae:	8a1b      	ldrh	r3, [r3, #16]
    49b0:	b29b      	uxth	r3, r3
    49b2:	607b      	str	r3, [r7, #4]
    49b4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    49b8:	6879      	ldr	r1, [r7, #4]
    49ba:	ea01 0303 	and.w	r3, r1, r3
    49be:	607b      	str	r3, [r7, #4]
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	6879      	ldr	r1, [r7, #4]
    49c4:	460b      	mov	r3, r1
    49c6:	8213      	strh	r3, [r2, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	8a1b      	ldrh	r3, [r3, #16]
    49cc:	b29a      	uxth	r2, r3
    49ce:	7afb      	ldrb	r3, [r7, #11]
    49d0:	ea42 0303 	orr.w	r3, r2, r3
    49d4:	b29b      	uxth	r3, r3
    49d6:	68fa      	ldr	r2, [r7, #12]
    49d8:	8213      	strh	r3, [r2, #16]
}
    49da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    49de:	46bd      	mov	sp, r7
    49e0:	bc80      	pop	{r7}
    49e2:	4770      	bx	lr

000049e4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    49e4:	b480      	push	{r7}
    49e6:	b085      	sub	sp, #20
    49e8:	af00      	add	r7, sp, #0
    49ea:	60f8      	str	r0, [r7, #12]
    49ec:	460b      	mov	r3, r1
    49ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	899b      	ldrh	r3, [r3, #12]
    49f4:	b29b      	uxth	r3, r3
    49f6:	607b      	str	r3, [r7, #4]
    49f8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    49fc:	6879      	ldr	r1, [r7, #4]
    49fe:	ea01 0303 	and.w	r3, r1, r3
    4a02:	607b      	str	r3, [r7, #4]
    4a04:	68fa      	ldr	r2, [r7, #12]
    4a06:	6879      	ldr	r1, [r7, #4]
    4a08:	460b      	mov	r3, r1
    4a0a:	8193      	strh	r3, [r2, #12]
  USARTx->CR1 |= USART_WakeUp;
    4a0c:	68fb      	ldr	r3, [r7, #12]
    4a0e:	899b      	ldrh	r3, [r3, #12]
    4a10:	b29a      	uxth	r2, r3
    4a12:	897b      	ldrh	r3, [r7, #10]
    4a14:	ea42 0303 	orr.w	r3, r2, r3
    4a18:	b29b      	uxth	r3, r3
    4a1a:	68fa      	ldr	r2, [r7, #12]
    4a1c:	8193      	strh	r3, [r2, #12]
}
    4a1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a22:	46bd      	mov	sp, r7
    4a24:	bc80      	pop	{r7}
    4a26:	4770      	bx	lr

00004a28 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4a28:	b480      	push	{r7}
    4a2a:	b085      	sub	sp, #20
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	460b      	mov	r3, r1
    4a32:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    4a34:	7afb      	ldrb	r3, [r7, #11]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d008      	beq.n	4a4c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	899b      	ldrh	r3, [r3, #12]
    4a3e:	b29b      	uxth	r3, r3
    4a40:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4a44:	b29b      	uxth	r3, r3
    4a46:	68fa      	ldr	r2, [r7, #12]
    4a48:	8193      	strh	r3, [r2, #12]
    4a4a:	e00d      	b.n	4a68 <USART_ReceiverWakeUpCmd+0x40>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	899b      	ldrh	r3, [r3, #12]
    4a50:	b29b      	uxth	r3, r3
    4a52:	607b      	str	r3, [r7, #4]
    4a54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4a58:	6879      	ldr	r1, [r7, #4]
    4a5a:	ea01 0303 	and.w	r3, r1, r3
    4a5e:	607b      	str	r3, [r7, #4]
    4a60:	68fa      	ldr	r2, [r7, #12]
    4a62:	6879      	ldr	r1, [r7, #4]
    4a64:	460b      	mov	r3, r1
    4a66:	8193      	strh	r3, [r2, #12]
  }
}
    4a68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bc80      	pop	{r7}
    4a70:	4770      	bx	lr
    4a72:	46c0      	nop			(mov r8, r8)

00004a74 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	460b      	mov	r3, r1
    4a7e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	8a1b      	ldrh	r3, [r3, #16]
    4a84:	b29b      	uxth	r3, r3
    4a86:	607b      	str	r3, [r7, #4]
    4a88:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4a8c:	6879      	ldr	r1, [r7, #4]
    4a8e:	ea01 0303 	and.w	r3, r1, r3
    4a92:	607b      	str	r3, [r7, #4]
    4a94:	68fa      	ldr	r2, [r7, #12]
    4a96:	6879      	ldr	r1, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	8213      	strh	r3, [r2, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	8a1b      	ldrh	r3, [r3, #16]
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	897b      	ldrh	r3, [r7, #10]
    4aa4:	ea42 0303 	orr.w	r3, r2, r3
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	68fa      	ldr	r2, [r7, #12]
    4aac:	8213      	strh	r3, [r2, #16]
}
    4aae:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ab2:	46bd      	mov	sp, r7
    4ab4:	bc80      	pop	{r7}
    4ab6:	4770      	bx	lr

00004ab8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4ab8:	b480      	push	{r7}
    4aba:	b085      	sub	sp, #20
    4abc:	af00      	add	r7, sp, #0
    4abe:	60f8      	str	r0, [r7, #12]
    4ac0:	460b      	mov	r3, r1
    4ac2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4ac4:	7afb      	ldrb	r3, [r7, #11]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d008      	beq.n	4adc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    4aca:	68fb      	ldr	r3, [r7, #12]
    4acc:	8a1b      	ldrh	r3, [r3, #16]
    4ace:	b29b      	uxth	r3, r3
    4ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	68fa      	ldr	r2, [r7, #12]
    4ad8:	8213      	strh	r3, [r2, #16]
    4ada:	e00d      	b.n	4af8 <USART_LINCmd+0x40>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	8a1b      	ldrh	r3, [r3, #16]
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	607b      	str	r3, [r7, #4]
    4ae4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    4ae8:	6879      	ldr	r1, [r7, #4]
    4aea:	ea01 0303 	and.w	r3, r1, r3
    4aee:	607b      	str	r3, [r7, #4]
    4af0:	68fa      	ldr	r2, [r7, #12]
    4af2:	6879      	ldr	r1, [r7, #4]
    4af4:	460b      	mov	r3, r1
    4af6:	8213      	strh	r3, [r2, #16]
  }
}
    4af8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4afc:	46bd      	mov	sp, r7
    4afe:	bc80      	pop	{r7}
    4b00:	4770      	bx	lr
    4b02:	46c0      	nop			(mov r8, r8)

00004b04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    4b04:	b480      	push	{r7}
    4b06:	b085      	sub	sp, #20
    4b08:	af00      	add	r7, sp, #0
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	460b      	mov	r3, r1
    4b0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    4b10:	8979      	ldrh	r1, [r7, #10]
    4b12:	6079      	str	r1, [r7, #4]
    4b14:	687a      	ldr	r2, [r7, #4]
    4b16:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b1a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b1e:	607b      	str	r3, [r7, #4]
    4b20:	68fa      	ldr	r2, [r7, #12]
    4b22:	6879      	ldr	r1, [r7, #4]
    4b24:	460b      	mov	r3, r1
    4b26:	8093      	strh	r3, [r2, #4]
}
    4b28:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bc80      	pop	{r7}
    4b30:	4770      	bx	lr
    4b32:	46c0      	nop			(mov r8, r8)

00004b34 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	889b      	ldrh	r3, [r3, #4]
    4b40:	b29b      	uxth	r3, r3
    4b42:	603b      	str	r3, [r7, #0]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b4a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b4e:	603b      	str	r3, [r7, #0]
    4b50:	683b      	ldr	r3, [r7, #0]
}
    4b52:	4618      	mov	r0, r3
    4b54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b58:	46bd      	mov	sp, r7
    4b5a:	bc80      	pop	{r7}
    4b5c:	4770      	bx	lr
    4b5e:	46c0      	nop			(mov r8, r8)

00004b60 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	899b      	ldrh	r3, [r3, #12]
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4b72:	b29b      	uxth	r3, r3
    4b74:	687a      	ldr	r2, [r7, #4]
    4b76:	8193      	strh	r3, [r2, #12]
}
    4b78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bc80      	pop	{r7}
    4b80:	4770      	bx	lr
    4b82:	46c0      	nop			(mov r8, r8)

00004b84 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    4b84:	b480      	push	{r7}
    4b86:	b083      	sub	sp, #12
    4b88:	af00      	add	r7, sp, #0
    4b8a:	6078      	str	r0, [r7, #4]
    4b8c:	460b      	mov	r3, r1
    4b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	8b1b      	ldrh	r3, [r3, #24]
    4b94:	b29b      	uxth	r3, r3
    4b96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4b9a:	687a      	ldr	r2, [r7, #4]
    4b9c:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	8b1b      	ldrh	r3, [r3, #24]
    4ba2:	b29a      	uxth	r2, r3
    4ba4:	78fb      	ldrb	r3, [r7, #3]
    4ba6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4baa:	b29b      	uxth	r3, r3
    4bac:	ea42 0303 	orr.w	r3, r2, r3
    4bb0:	b29b      	uxth	r3, r3
    4bb2:	687a      	ldr	r2, [r7, #4]
    4bb4:	8313      	strh	r3, [r2, #24]
}
    4bb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bba:	46bd      	mov	sp, r7
    4bbc:	bc80      	pop	{r7}
    4bbe:	4770      	bx	lr

00004bc0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	8b1b      	ldrh	r3, [r3, #24]
    4bd0:	b29b      	uxth	r3, r3
    4bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4bd6:	687a      	ldr	r2, [r7, #4]
    4bd8:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	8b1b      	ldrh	r3, [r3, #24]
    4bde:	b29a      	uxth	r2, r3
    4be0:	78fb      	ldrb	r3, [r7, #3]
    4be2:	ea42 0303 	orr.w	r3, r2, r3
    4be6:	b29b      	uxth	r3, r3
    4be8:	687a      	ldr	r2, [r7, #4]
    4bea:	8313      	strh	r3, [r2, #24]
}
    4bec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bc80      	pop	{r7}
    4bf4:	4770      	bx	lr
    4bf6:	46c0      	nop			(mov r8, r8)

00004bf8 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4bf8:	b480      	push	{r7}
    4bfa:	b085      	sub	sp, #20
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	460b      	mov	r3, r1
    4c02:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c04:	7afb      	ldrb	r3, [r7, #11]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d008      	beq.n	4c1c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	8a9b      	ldrh	r3, [r3, #20]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    4c14:	b29b      	uxth	r3, r3
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	8293      	strh	r3, [r2, #20]
    4c1a:	e00d      	b.n	4c38 <USART_SmartCardCmd+0x40>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	8a9b      	ldrh	r3, [r3, #20]
    4c20:	b29b      	uxth	r3, r3
    4c22:	607b      	str	r3, [r7, #4]
    4c24:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4c28:	6879      	ldr	r1, [r7, #4]
    4c2a:	ea01 0303 	and.w	r3, r1, r3
    4c2e:	607b      	str	r3, [r7, #4]
    4c30:	68fa      	ldr	r2, [r7, #12]
    4c32:	6879      	ldr	r1, [r7, #4]
    4c34:	460b      	mov	r3, r1
    4c36:	8293      	strh	r3, [r2, #20]
  }
}
    4c38:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bc80      	pop	{r7}
    4c40:	4770      	bx	lr
    4c42:	46c0      	nop			(mov r8, r8)

00004c44 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c44:	b480      	push	{r7}
    4c46:	b085      	sub	sp, #20
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	460b      	mov	r3, r1
    4c4e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c50:	7afb      	ldrb	r3, [r7, #11]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d008      	beq.n	4c68 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	8a9b      	ldrh	r3, [r3, #20]
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4c60:	b29b      	uxth	r3, r3
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	8293      	strh	r3, [r2, #20]
    4c66:	e00d      	b.n	4c84 <USART_SmartCardNACKCmd+0x40>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	8a9b      	ldrh	r3, [r3, #20]
    4c6c:	b29b      	uxth	r3, r3
    4c6e:	607b      	str	r3, [r7, #4]
    4c70:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4c74:	6879      	ldr	r1, [r7, #4]
    4c76:	ea01 0303 	and.w	r3, r1, r3
    4c7a:	607b      	str	r3, [r7, #4]
    4c7c:	68fa      	ldr	r2, [r7, #12]
    4c7e:	6879      	ldr	r1, [r7, #4]
    4c80:	460b      	mov	r3, r1
    4c82:	8293      	strh	r3, [r2, #20]
  }
}
    4c84:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c88:	46bd      	mov	sp, r7
    4c8a:	bc80      	pop	{r7}
    4c8c:	4770      	bx	lr
    4c8e:	46c0      	nop			(mov r8, r8)

00004c90 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c90:	b480      	push	{r7}
    4c92:	b085      	sub	sp, #20
    4c94:	af00      	add	r7, sp, #0
    4c96:	60f8      	str	r0, [r7, #12]
    4c98:	460b      	mov	r3, r1
    4c9a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4c9c:	7afb      	ldrb	r3, [r7, #11]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d008      	beq.n	4cb4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	8a9b      	ldrh	r3, [r3, #20]
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    4cac:	b29b      	uxth	r3, r3
    4cae:	68fa      	ldr	r2, [r7, #12]
    4cb0:	8293      	strh	r3, [r2, #20]
    4cb2:	e00d      	b.n	4cd0 <USART_HalfDuplexCmd+0x40>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	8a9b      	ldrh	r3, [r3, #20]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	607b      	str	r3, [r7, #4]
    4cbc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    4cc0:	6879      	ldr	r1, [r7, #4]
    4cc2:	ea01 0303 	and.w	r3, r1, r3
    4cc6:	607b      	str	r3, [r7, #4]
    4cc8:	68fa      	ldr	r2, [r7, #12]
    4cca:	6879      	ldr	r1, [r7, #4]
    4ccc:	460b      	mov	r3, r1
    4cce:	8293      	strh	r3, [r2, #20]
  }
}
    4cd0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4cd4:	46bd      	mov	sp, r7
    4cd6:	bc80      	pop	{r7}
    4cd8:	4770      	bx	lr
    4cda:	46c0      	nop			(mov r8, r8)

00004cdc <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	460b      	mov	r3, r1
    4ce6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    4ce8:	68fb      	ldr	r3, [r7, #12]
    4cea:	8a9b      	ldrh	r3, [r3, #20]
    4cec:	b29b      	uxth	r3, r3
    4cee:	607b      	str	r3, [r7, #4]
    4cf0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    4cf4:	6879      	ldr	r1, [r7, #4]
    4cf6:	ea01 0303 	and.w	r3, r1, r3
    4cfa:	607b      	str	r3, [r7, #4]
    4cfc:	68fa      	ldr	r2, [r7, #12]
    4cfe:	6879      	ldr	r1, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	8293      	strh	r3, [r2, #20]
  USARTx->CR3 |= USART_IrDAMode;
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	8a9b      	ldrh	r3, [r3, #20]
    4d08:	b29a      	uxth	r2, r3
    4d0a:	897b      	ldrh	r3, [r7, #10]
    4d0c:	ea42 0303 	orr.w	r3, r2, r3
    4d10:	b29b      	uxth	r3, r3
    4d12:	68fa      	ldr	r2, [r7, #12]
    4d14:	8293      	strh	r3, [r2, #20]
}
    4d16:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bc80      	pop	{r7}
    4d1e:	4770      	bx	lr

00004d20 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4d20:	b480      	push	{r7}
    4d22:	b085      	sub	sp, #20
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	460b      	mov	r3, r1
    4d2a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    4d2c:	7afb      	ldrb	r3, [r7, #11]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d008      	beq.n	4d44 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	8a9b      	ldrh	r3, [r3, #20]
    4d36:	b29b      	uxth	r3, r3
    4d38:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	68fa      	ldr	r2, [r7, #12]
    4d40:	8293      	strh	r3, [r2, #20]
    4d42:	e00d      	b.n	4d60 <USART_IrDACmd+0x40>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	8a9b      	ldrh	r3, [r3, #20]
    4d48:	b29b      	uxth	r3, r3
    4d4a:	607b      	str	r3, [r7, #4]
    4d4c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4d50:	6879      	ldr	r1, [r7, #4]
    4d52:	ea01 0303 	and.w	r3, r1, r3
    4d56:	607b      	str	r3, [r7, #4]
    4d58:	68fa      	ldr	r2, [r7, #12]
    4d5a:	6879      	ldr	r1, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	8293      	strh	r3, [r2, #20]
  }
}
    4d60:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			(mov r8, r8)

00004d6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b085      	sub	sp, #20
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
    4d74:	460b      	mov	r3, r1
    4d76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    4d78:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d7c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	881b      	ldrh	r3, [r3, #0]
    4d82:	b29a      	uxth	r2, r3
    4d84:	887b      	ldrh	r3, [r7, #2]
    4d86:	ea02 0303 	and.w	r3, r2, r3
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d003      	beq.n	4d98 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    4d90:	f04f 0301 	mov.w	r3, #1	; 0x1
    4d94:	73fb      	strb	r3, [r7, #15]
    4d96:	e002      	b.n	4d9e <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    4d98:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d9e:	7bfb      	ldrb	r3, [r7, #15]
}
    4da0:	4618      	mov	r0, r3
    4da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4da6:	46bd      	mov	sp, r7
    4da8:	bc80      	pop	{r7}
    4daa:	4770      	bx	lr

00004dac <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]
    4db4:	460b      	mov	r3, r1
    4db6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    4db8:	887b      	ldrh	r3, [r7, #2]
    4dba:	ea6f 0303 	mvn.w	r3, r3
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	687a      	ldr	r2, [r7, #4]
    4dc2:	8013      	strh	r3, [r2, #0]
}
    4dc4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4dc8:	46bd      	mov	sp, r7
    4dca:	bc80      	pop	{r7}
    4dcc:	4770      	bx	lr
    4dce:	46c0      	nop			(mov r8, r8)

00004dd0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4dd0:	b480      	push	{r7}
    4dd2:	b087      	sub	sp, #28
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    4dd8:	460b      	mov	r3, r1
    4dda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    4ddc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de0:	60bb      	str	r3, [r7, #8]
    4de2:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de6:	60fb      	str	r3, [r7, #12]
    4de8:	f04f 0300 	mov.w	r3, #0	; 0x0
    4dec:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    4dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    4df2:	75fb      	strb	r3, [r7, #23]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    4df4:	887b      	ldrh	r3, [r7, #2]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	613b      	str	r3, [r7, #16]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    4e00:	887b      	ldrh	r3, [r7, #2]
    4e02:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    4e06:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;
    4e08:	68fa      	ldr	r2, [r7, #12]
    4e0a:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e0e:	fa03 f302 	lsl.w	r3, r3, r2
    4e12:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	2b01      	cmp	r3, #1
    4e18:	d108      	bne.n	4e2c <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR1;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	899b      	ldrh	r3, [r3, #12]
    4e1e:	b29b      	uxth	r3, r3
    4e20:	461a      	mov	r2, r3
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	ea03 0302 	and.w	r3, r3, r2
    4e28:	60fb      	str	r3, [r7, #12]
    4e2a:	e013      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    4e2c:	693b      	ldr	r3, [r7, #16]
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d108      	bne.n	4e44 <USART_GetITStatus+0x74>
  {
    itmask &= USARTx->CR2;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	8a1b      	ldrh	r3, [r3, #16]
    4e36:	b29b      	uxth	r3, r3
    4e38:	461a      	mov	r2, r3
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	ea03 0302 	and.w	r3, r3, r2
    4e40:	60fb      	str	r3, [r7, #12]
    4e42:	e007      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	8a9b      	ldrh	r3, [r3, #20]
    4e48:	b29b      	uxth	r3, r3
    4e4a:	461a      	mov	r2, r3
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	ea03 0302 	and.w	r3, r3, r2
    4e52:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    4e54:	887b      	ldrh	r3, [r7, #2]
    4e56:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	60bb      	str	r3, [r7, #8]
  bitpos = (uint32_t)0x01 << bitpos;
    4e5e:	68ba      	ldr	r2, [r7, #8]
    4e60:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e64:	fa03 f302 	lsl.w	r3, r3, r2
    4e68:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	b29b      	uxth	r3, r3
    4e70:	461a      	mov	r2, r3
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	ea03 0302 	and.w	r3, r3, r2
    4e78:	60bb      	str	r3, [r7, #8]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d006      	beq.n	4e8e <USART_GetITStatus+0xbe>
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <USART_GetITStatus+0xbe>
  {
    bitstatus = SET;
    4e86:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e8a:	75fb      	strb	r3, [r7, #23]
    4e8c:	e002      	b.n	4e94 <USART_GetITStatus+0xc4>
  }
  else
  {
    bitstatus = RESET;
    4e8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4e92:	75fb      	strb	r3, [r7, #23]
  }
  
  return bitstatus;  
    4e94:	7dfb      	ldrb	r3, [r7, #23]
}
    4e96:	4618      	mov	r0, r3
    4e98:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bc80      	pop	{r7}
    4ea0:	4770      	bx	lr
    4ea2:	46c0      	nop			(mov r8, r8)

00004ea4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4ea4:	b480      	push	{r7}
    4ea6:	b085      	sub	sp, #20
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    4eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb4:	81bb      	strh	r3, [r7, #12]
    4eb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eba:	81fb      	strh	r3, [r7, #14]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    4ebc:	887b      	ldrh	r3, [r7, #2]
    4ebe:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4ec2:	81bb      	strh	r3, [r7, #12]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    4ec4:	89ba      	ldrh	r2, [r7, #12]
    4ec6:	f04f 0301 	mov.w	r3, #1	; 0x1
    4eca:	fa03 f302 	lsl.w	r3, r3, r2
    4ece:	81fb      	strh	r3, [r7, #14]
  USARTx->SR = (uint16_t)~itmask;
    4ed0:	89fb      	ldrh	r3, [r7, #14]
    4ed2:	ea6f 0303 	mvn.w	r3, r3
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	687a      	ldr	r2, [r7, #4]
    4eda:	8013      	strh	r3, [r2, #0]
}
    4edc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bc80      	pop	{r7}
    4ee4:	4770      	bx	lr
    4ee6:	46c0      	nop			(mov r8, r8)

00004ee8 <_ZN9AscenseurD2Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4ee8:	b480      	push	{r7}
    4eea:	b083      	sub	sp, #12
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4ef0:	4b07      	ldr	r3, [pc, #28]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4ef2:	681a      	ldr	r2, [r3, #0]
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	429a      	cmp	r2, r3
    4ef8:	d103      	bne.n	4f02 <_ZN9AscenseurD2Ev+0x1a>
        m_ascenseur = NULL;
    4efa:	4a05      	ldr	r2, [pc, #20]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4efc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f00:	6013      	str	r3, [r2, #0]
}
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	4618      	mov	r0, r3
    4f06:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f0a:	46bd      	mov	sp, r7
    4f0c:	bc80      	pop	{r7}
    4f0e:	4770      	bx	lr
    4f10:	20000548 	.word	0x20000548

00004f14 <_ZN9AscenseurD1Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4f14:	b480      	push	{r7}
    4f16:	b083      	sub	sp, #12
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4f1c:	4b07      	ldr	r3, [pc, #28]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f1e:	681a      	ldr	r2, [r3, #0]
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	429a      	cmp	r2, r3
    4f24:	d103      	bne.n	4f2e <_ZN9AscenseurD1Ev+0x1a>
        m_ascenseur = NULL;
    4f26:	4a05      	ldr	r2, [pc, #20]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f28:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f2c:	6013      	str	r3, [r2, #0]
}
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	4618      	mov	r0, r3
    4f32:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f36:	46bd      	mov	sp, r7
    4f38:	bc80      	pop	{r7}
    4f3a:	4770      	bx	lr
    4f3c:	20000548 	.word	0x20000548

00004f40 <_ZNK9Ascenseur5aFiniEv>:
        }
    }
}

// est ce que l'ascenseur a fini sa montée/descente
bool Ascenseur::aFini() const
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
{
    return !m_tourne;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    4f50:	b2db      	uxtb	r3, r3
}
    4f52:	4618      	mov	r0, r3
    4f54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f58:	46bd      	mov	sp, r7
    4f5a:	bc80      	pop	{r7}
    4f5c:	4770      	bx	lr
    4f5e:	46c0      	nop			(mov r8, r8)

00004f60 <_ZNK9Ascenseur8vaEnHautEv>:

// est ce que l'ascenseur va/est en haut ?
bool Ascenseur::vaEnHaut() const
    4f60:	b480      	push	{r7}
    4f62:	b083      	sub	sp, #12
    4f64:	af00      	add	r7, sp, #0
    4f66:	6078      	str	r0, [r7, #4]
{
    return m_vaEnHaut;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	785b      	ldrb	r3, [r3, #1]
}
    4f6c:	4618      	mov	r0, r3
    4f6e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f72:	46bd      	mov	sp, r7
    4f74:	bc80      	pop	{r7}
    4f76:	4770      	bx	lr

00004f78 <_ZNK9Ascenseur10toutEnHautEv>:

// est ce que les fdc sont activés ?
bool Ascenseur::toutEnHaut() const
    4f78:	b580      	push	{r7, lr}
    4f7a:	b086      	sub	sp, #24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
{
    return m_fdcHaut->getValue().b;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	689b      	ldr	r3, [r3, #8]
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4f8a:	f8d3 c000 	ldr.w	ip, [r3]
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	689a      	ldr	r2, [r3, #8]
    4f92:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4f96:	4618      	mov	r0, r3
    4f98:	4611      	mov	r1, r2
    4f9a:	47e0      	blx	ip
    4f9c:	7d3b      	ldrb	r3, [r7, #20]
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fa4:	46bd      	mov	sp, r7
    4fa6:	bd80      	pop	{r7, pc}

00004fa8 <_ZNK9Ascenseur9toutEnBasEv>:

bool Ascenseur::toutEnBas() const
    4fa8:	b580      	push	{r7, lr}
    4faa:	b086      	sub	sp, #24
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
{
    return m_fdcBas->getValue().b;
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	68db      	ldr	r3, [r3, #12]
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4fba:	f8d3 c000 	ldr.w	ip, [r3]
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	68da      	ldr	r2, [r3, #12]
    4fc2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4fc6:	4618      	mov	r0, r3
    4fc8:	4611      	mov	r1, r2
    4fca:	47e0      	blx	ip
    4fcc:	7d3b      	ldrb	r3, [r7, #20]
}
    4fce:	4618      	mov	r0, r3
    4fd0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}

00004fd8 <_ZN9Ascenseur3getEv>:

// renvoit l'ascenseur
Ascenseur* Ascenseur::get()
    4fd8:	b480      	push	{r7}
    4fda:	af00      	add	r7, sp, #0
{
    return m_ascenseur;
    4fdc:	4b02      	ldr	r3, [pc, #8]	(4fe8 <_ZN9Ascenseur3getEv+0x10>)
    4fde:	681b      	ldr	r3, [r3, #0]
}
    4fe0:	4618      	mov	r0, r3
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bc80      	pop	{r7}
    4fe6:	4770      	bx	lr
    4fe8:	20000548 	.word	0x20000548

00004fec <_ZN9Ascenseur6updateEv>:
        m_vis->tourne(-0.5f);
    }
}

// met à jour l'état de l'ascenseur pour l'arreter si il est arrivé à son but
void Ascenseur::update()
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
{
    if (m_tourne)
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d01b      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
    {
        if (m_vaEnHaut ? toutEnHaut() : toutEnBas())
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	785b      	ldrb	r3, [r3, #1]
    5000:	2b00      	cmp	r3, #0
    5002:	d005      	beq.n	5010 <_ZN9Ascenseur6updateEv+0x24>
    5004:	6878      	ldr	r0, [r7, #4]
    5006:	f7ff ffb7 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    500a:	4603      	mov	r3, r0
    500c:	603b      	str	r3, [r7, #0]
    500e:	e004      	b.n	501a <_ZN9Ascenseur6updateEv+0x2e>
    5010:	6878      	ldr	r0, [r7, #4]
    5012:	f7ff ffc9 	bl	4fa8 <_ZNK9Ascenseur9toutEnBasEv>
    5016:	4603      	mov	r3, r0
    5018:	603b      	str	r3, [r7, #0]
    501a:	683b      	ldr	r3, [r7, #0]
    501c:	2b00      	cmp	r3, #0
    501e:	d009      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
        {
            m_tourne = false;
    5020:	687a      	ldr	r2, [r7, #4]
    5022:	f04f 0300 	mov.w	r3, #0	; 0x0
    5026:	7013      	strb	r3, [r2, #0]
            m_vis->tourne(0.0f);
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	685b      	ldr	r3, [r3, #4]
    502c:	4618      	mov	r0, r3
    502e:	4903      	ldr	r1, [pc, #12]	(503c <_ZN9Ascenseur6updateEv+0x50>)
    5030:	f008 f802 	bl	d038 <_ZN4Roue6tourneEf>
        }
    }
}
    5034:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}
    503c:	00000000 	.word	0x00000000

00005040 <_ZN9Ascenseur9descendreEv>:
        m_vis->tourne(0.5f);
    }
}

// l'ascenseur descend tout en bas
void Ascenseur::descendre()
    5040:	b580      	push	{r7, lr}
    5042:	b082      	sub	sp, #8
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = false;
    5048:	687a      	ldr	r2, [r7, #4]
    504a:	f04f 0300 	mov.w	r3, #0	; 0x0
    504e:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5050:	6878      	ldr	r0, [r7, #4]
    5052:	f7ff ff91 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    5056:	4603      	mov	r3, r0
    5058:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    505c:	b2db      	uxtb	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d009      	beq.n	5076 <_ZN9Ascenseur9descendreEv+0x36>
    {
        m_tourne = true;
    5062:	687a      	ldr	r2, [r7, #4]
    5064:	f04f 0301 	mov.w	r3, #1	; 0x1
    5068:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(-0.5f);
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	685b      	ldr	r3, [r3, #4]
    506e:	4618      	mov	r0, r3
    5070:	4903      	ldr	r1, [pc, #12]	(5080 <_ZN9Ascenseur9descendreEv+0x40>)
    5072:	f007 ffe1 	bl	d038 <_ZN4Roue6tourneEf>
    }
}
    5076:	f107 0708 	add.w	r7, r7, #8	; 0x8
    507a:	46bd      	mov	sp, r7
    507c:	bd80      	pop	{r7, pc}
    507e:	46c0      	nop			(mov r8, r8)
    5080:	bf000000 	.word	0xbf000000

00005084 <_ZN9Ascenseur6monterEv>:
    if (m_ascenseur == this)
        m_ascenseur = NULL;
}

// l'ascenseur monte tout en haut
void Ascenseur::monter()
    5084:	b580      	push	{r7, lr}
    5086:	b082      	sub	sp, #8
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = true;
    508c:	687a      	ldr	r2, [r7, #4]
    508e:	f04f 0301 	mov.w	r3, #1	; 0x1
    5092:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5094:	6878      	ldr	r0, [r7, #4]
    5096:	f7ff ff6f 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    509a:	4603      	mov	r3, r0
    509c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    50a0:	b2db      	uxtb	r3, r3
    50a2:	2b00      	cmp	r3, #0
    50a4:	d009      	beq.n	50ba <_ZN9Ascenseur6monterEv+0x36>
    {
        m_tourne = true;
    50a6:	687a      	ldr	r2, [r7, #4]
    50a8:	f04f 0301 	mov.w	r3, #1	; 0x1
    50ac:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(0.5f);
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	685b      	ldr	r3, [r3, #4]
    50b2:	4618      	mov	r0, r3
    50b4:	4903      	ldr	r1, [pc, #12]	(50c4 <_ZN9Ascenseur6monterEv+0x40>)
    50b6:	f007 ffbf 	bl	d038 <_ZN4Roue6tourneEf>
    }
}
    50ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50be:	46bd      	mov	sp, r7
    50c0:	bd80      	pop	{r7, pc}
    50c2:	46c0      	nop			(mov r8, r8)
    50c4:	3f000000 	.word	0x3f000000

000050c8 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    50c8:	b580      	push	{r7, lr}
    50ca:	b084      	sub	sp, #16
    50cc:	af00      	add	r7, sp, #0
    50ce:	60f8      	str	r0, [r7, #12]
    50d0:	60b9      	str	r1, [r7, #8]
    50d2:	607a      	str	r2, [r7, #4]
    50d4:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    50d6:	68fa      	ldr	r2, [r7, #12]
    50d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    50dc:	7013      	strb	r3, [r2, #0]
    50de:	68fa      	ldr	r2, [r7, #12]
    50e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    50e4:	7053      	strb	r3, [r2, #1]
    50e6:	68fa      	ldr	r2, [r7, #12]
    50e8:	68bb      	ldr	r3, [r7, #8]
    50ea:	6053      	str	r3, [r2, #4]
    50ec:	68fa      	ldr	r2, [r7, #12]
    50ee:	687b      	ldr	r3, [r7, #4]
    50f0:	6093      	str	r3, [r2, #8]
    50f2:	68fa      	ldr	r2, [r7, #12]
    50f4:	683b      	ldr	r3, [r7, #0]
    50f6:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    50f8:	68b8      	ldr	r0, [r7, #8]
    50fa:	4906      	ldr	r1, [pc, #24]	(5114 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    50fc:	f007 ff9c 	bl	d038 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5100:	4a05      	ldr	r2, [pc, #20]	(5118 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5102:	68fb      	ldr	r3, [r7, #12]
    5104:	6013      	str	r3, [r2, #0]
}
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	4618      	mov	r0, r3
    510a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    510e:	46bd      	mov	sp, r7
    5110:	bd80      	pop	{r7, pc}
    5112:	46c0      	nop			(mov r8, r8)
    5114:	00000000 	.word	0x00000000
    5118:	20000548 	.word	0x20000548

0000511c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    511c:	b580      	push	{r7, lr}
    511e:	b084      	sub	sp, #16
    5120:	af00      	add	r7, sp, #0
    5122:	60f8      	str	r0, [r7, #12]
    5124:	60b9      	str	r1, [r7, #8]
    5126:	607a      	str	r2, [r7, #4]
    5128:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    512a:	68fa      	ldr	r2, [r7, #12]
    512c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5130:	7013      	strb	r3, [r2, #0]
    5132:	68fa      	ldr	r2, [r7, #12]
    5134:	f04f 0301 	mov.w	r3, #1	; 0x1
    5138:	7053      	strb	r3, [r2, #1]
    513a:	68fa      	ldr	r2, [r7, #12]
    513c:	68bb      	ldr	r3, [r7, #8]
    513e:	6053      	str	r3, [r2, #4]
    5140:	68fa      	ldr	r2, [r7, #12]
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	6093      	str	r3, [r2, #8]
    5146:	68fa      	ldr	r2, [r7, #12]
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    514c:	68b8      	ldr	r0, [r7, #8]
    514e:	4906      	ldr	r1, [pc, #24]	(5168 <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    5150:	f007 ff72 	bl	d038 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5154:	4a05      	ldr	r2, [pc, #20]	(516c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	6013      	str	r3, [r2, #0]
}
    515a:	68fb      	ldr	r3, [r7, #12]
    515c:	4618      	mov	r0, r3
    515e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5162:	46bd      	mov	sp, r7
    5164:	bd80      	pop	{r7, pc}
    5166:	46c0      	nop			(mov r8, r8)
    5168:	00000000 	.word	0x00000000
    516c:	20000548 	.word	0x20000548

00005170 <_ZN9BrasKrabi5frontEv>:
    void BrasKrabi::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasKrabi::front()
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	681a      	ldr	r2, [r3, #0]
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	68db      	ldr	r3, [r3, #12]
    5180:	4610      	mov	r0, r2
    5182:	4619      	mov	r1, r3
    5184:	f002 f830 	bl	71e8 <_ZN5Servo9goToAngleEf>
    }
    5188:	f107 0708 	add.w	r7, r7, #8	; 0x8
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}

00005190 <_ZN9BrasKrabi8collapseEv>:
    void BrasKrabi::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasKrabi::collapse()
    5190:	b580      	push	{r7, lr}
    5192:	b082      	sub	sp, #8
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	681a      	ldr	r2, [r3, #0]
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	685b      	ldr	r3, [r3, #4]
    51a0:	4610      	mov	r0, r2
    51a2:	4619      	mov	r1, r3
    51a4:	f002 f820 	bl	71e8 <_ZN5Servo9goToAngleEf>
    }
    51a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51ac:	46bd      	mov	sp, r7
    51ae:	bd80      	pop	{r7, pc}

000051b0 <_ZN9BrasKrabi6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasKrabi::expand()
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	681a      	ldr	r2, [r3, #0]
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	689b      	ldr	r3, [r3, #8]
    51c0:	4610      	mov	r0, r2
    51c2:	4619      	mov	r1, r3
    51c4:	f002 f810 	bl	71e8 <_ZN5Servo9goToAngleEf>
    }
    51c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51cc:	46bd      	mov	sp, r7
    51ce:	bd80      	pop	{r7, pc}

000051d0 <_ZN9BrasKrabiC1EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    51d0:	b580      	push	{r7, lr}
    51d2:	b088      	sub	sp, #32
    51d4:	af02      	add	r7, sp, #8
    51d6:	6178      	str	r0, [r7, #20]
    51d8:	6139      	str	r1, [r7, #16]
    51da:	60bb      	str	r3, [r7, #8]
    51dc:	4613      	mov	r3, r2
    51de:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    51e0:	697a      	ldr	r2, [r7, #20]
    51e2:	6a7b      	ldr	r3, [r7, #36]
    51e4:	6053      	str	r3, [r2, #4]
    51e6:	697a      	ldr	r2, [r7, #20]
    51e8:	6abb      	ldr	r3, [r7, #40]
    51ea:	6093      	str	r3, [r2, #8]
    51ec:	697a      	ldr	r2, [r7, #20]
    51ee:	6afb      	ldr	r3, [r7, #44]
    51f0:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    51f2:	f04f 0014 	mov.w	r0, #20	; 0x14
    51f6:	f009 fa57 	bl	e6a8 <_Znwj>
    51fa:	4603      	mov	r3, r0
    51fc:	603b      	str	r3, [r7, #0]
    51fe:	683a      	ldr	r2, [r7, #0]
    5200:	2a00      	cmp	r2, #0
    5202:	d00a      	beq.n	521a <_ZN9BrasKrabiC1EP5Timerhfffff+0x4a>
    5204:	7bfa      	ldrb	r2, [r7, #15]
    5206:	6a3b      	ldr	r3, [r7, #32]
    5208:	9300      	str	r3, [sp, #0]
    520a:	6838      	ldr	r0, [r7, #0]
    520c:	6939      	ldr	r1, [r7, #16]
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	f002 f85a 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    5214:	683b      	ldr	r3, [r7, #0]
    5216:	607b      	str	r3, [r7, #4]
    5218:	e001      	b.n	521e <_ZN9BrasKrabiC1EP5Timerhfffff+0x4e>
    521a:	683a      	ldr	r2, [r7, #0]
    521c:	607a      	str	r2, [r7, #4]
    521e:	697b      	ldr	r3, [r7, #20]
    5220:	687a      	ldr	r2, [r7, #4]
    5222:	601a      	str	r2, [r3, #0]
    }
    5224:	697b      	ldr	r3, [r7, #20]
    5226:	4618      	mov	r0, r3
    5228:	f107 0718 	add.w	r7, r7, #24	; 0x18
    522c:	46bd      	mov	sp, r7
    522e:	bd80      	pop	{r7, pc}

00005230 <_ZN9BrasKrabiC2EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5230:	b580      	push	{r7, lr}
    5232:	b088      	sub	sp, #32
    5234:	af02      	add	r7, sp, #8
    5236:	6178      	str	r0, [r7, #20]
    5238:	6139      	str	r1, [r7, #16]
    523a:	60bb      	str	r3, [r7, #8]
    523c:	4613      	mov	r3, r2
    523e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5240:	697a      	ldr	r2, [r7, #20]
    5242:	6a7b      	ldr	r3, [r7, #36]
    5244:	6053      	str	r3, [r2, #4]
    5246:	697a      	ldr	r2, [r7, #20]
    5248:	6abb      	ldr	r3, [r7, #40]
    524a:	6093      	str	r3, [r2, #8]
    524c:	697a      	ldr	r2, [r7, #20]
    524e:	6afb      	ldr	r3, [r7, #44]
    5250:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5252:	f04f 0014 	mov.w	r0, #20	; 0x14
    5256:	f009 fa27 	bl	e6a8 <_Znwj>
    525a:	4603      	mov	r3, r0
    525c:	603b      	str	r3, [r7, #0]
    525e:	683a      	ldr	r2, [r7, #0]
    5260:	2a00      	cmp	r2, #0
    5262:	d00a      	beq.n	527a <_ZN9BrasKrabiC2EP5Timerhfffff+0x4a>
    5264:	7bfa      	ldrb	r2, [r7, #15]
    5266:	6a3b      	ldr	r3, [r7, #32]
    5268:	9300      	str	r3, [sp, #0]
    526a:	6838      	ldr	r0, [r7, #0]
    526c:	6939      	ldr	r1, [r7, #16]
    526e:	68bb      	ldr	r3, [r7, #8]
    5270:	f002 f82a 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    5274:	683b      	ldr	r3, [r7, #0]
    5276:	607b      	str	r3, [r7, #4]
    5278:	e001      	b.n	527e <_ZN9BrasKrabiC2EP5Timerhfffff+0x4e>
    527a:	683a      	ldr	r2, [r7, #0]
    527c:	607a      	str	r2, [r7, #4]
    527e:	697b      	ldr	r3, [r7, #20]
    5280:	687a      	ldr	r2, [r7, #4]
    5282:	601a      	str	r2, [r3, #0]
    }
    5284:	697b      	ldr	r3, [r7, #20]
    5286:	4618      	mov	r0, r3
    5288:	f107 0718 	add.w	r7, r7, #24	; 0x18
    528c:	46bd      	mov	sp, r7
    528e:	bd80      	pop	{r7, pc}

00005290 <_ZN9BrasTapis6expandEv>:
 //   #endif
    brasTapisLeft->collapse();
    brasTapisRight->collapse();
}

void BrasTapis::expand()
    5290:	b580      	push	{r7, lr}
    5292:	b082      	sub	sp, #8
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
{
    brasTapisRight->expand();
    5298:	4b06      	ldr	r3, [pc, #24]	(52b4 <_ZN9BrasTapis6expandEv+0x24>)
    529a:	681b      	ldr	r3, [r3, #0]
    529c:	4618      	mov	r0, r3
    529e:	f7ff fff7 	bl	5290 <_ZN9BrasTapis6expandEv>
    brasTapisLeft->expand();
    52a2:	4b05      	ldr	r3, [pc, #20]	(52b8 <_ZN9BrasTapis6expandEv+0x28>)
    52a4:	681b      	ldr	r3, [r3, #0]
    52a6:	4618      	mov	r0, r3
    52a8:	f7ff fff2 	bl	5290 <_ZN9BrasTapis6expandEv>
}
    52ac:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52b0:	46bd      	mov	sp, r7
    52b2:	bd80      	pop	{r7, pc}
    52b4:	20000550 	.word	0x20000550
    52b8:	2000054c 	.word	0x2000054c

000052bc <_ZN9BrasTapis8collapseEv>:

void BrasTapis::collapse()
    52bc:	b580      	push	{r7, lr}
    52be:	b082      	sub	sp, #8
    52c0:	af00      	add	r7, sp, #0
    52c2:	6078      	str	r0, [r7, #4]
{
    brasTapisRight->collapse();
    52c4:	4b06      	ldr	r3, [pc, #24]	(52e0 <_ZN9BrasTapis8collapseEv+0x24>)
    52c6:	681b      	ldr	r3, [r3, #0]
    52c8:	4618      	mov	r0, r3
    52ca:	f7ff fff7 	bl	52bc <_ZN9BrasTapis8collapseEv>
    brasTapisLeft->collapse();
    52ce:	4b05      	ldr	r3, [pc, #20]	(52e4 <_ZN9BrasTapis8collapseEv+0x28>)
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	4618      	mov	r0, r3
    52d4:	f7ff fff2 	bl	52bc <_ZN9BrasTapis8collapseEv>
}
    52d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52dc:	46bd      	mov	sp, r7
    52de:	bd80      	pop	{r7, pc}
    52e0:	20000550 	.word	0x20000550
    52e4:	2000054c 	.word	0x2000054c

000052e8 <_ZN9BrasTapisC1EP5Timerhffff>:

#ifdef ROBOTHW
BrasTapis* BrasTapis::brasTapisLeft = 0;
BrasTapis* BrasTapis::brasTapisRight = 0;

BrasTapis::BrasTapis(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded):BrasKrabi(timer, OCx, RC0degre, RC180degres, angleCollapsed, angleExpanded, 0.f)
    52e8:	b580      	push	{r7, lr}
    52ea:	b088      	sub	sp, #32
    52ec:	af04      	add	r7, sp, #16
    52ee:	60f8      	str	r0, [r7, #12]
    52f0:	60b9      	str	r1, [r7, #8]
    52f2:	603b      	str	r3, [r7, #0]
    52f4:	4613      	mov	r3, r2
    52f6:	71fb      	strb	r3, [r7, #7]
    52f8:	68fa      	ldr	r2, [r7, #12]
    52fa:	f897 c007 	ldrb.w	ip, [r7, #7]
    52fe:	69bb      	ldr	r3, [r7, #24]
    5300:	9300      	str	r3, [sp, #0]
    5302:	69fb      	ldr	r3, [r7, #28]
    5304:	9301      	str	r3, [sp, #4]
    5306:	6a3b      	ldr	r3, [r7, #32]
    5308:	9302      	str	r3, [sp, #8]
    530a:	4b07      	ldr	r3, [pc, #28]	(5328 <_ZN9BrasTapisC1EP5Timerhffff+0x40>)
    530c:	9303      	str	r3, [sp, #12]
    530e:	4610      	mov	r0, r2
    5310:	68b9      	ldr	r1, [r7, #8]
    5312:	4662      	mov	r2, ip
    5314:	683b      	ldr	r3, [r7, #0]
    5316:	f7ff ff8b 	bl	5230 <_ZN9BrasKrabiC2EP5Timerhfffff>
{}
    531a:	68fb      	ldr	r3, [r7, #12]
    531c:	4618      	mov	r0, r3
    531e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5322:	46bd      	mov	sp, r7
    5324:	bd80      	pop	{r7, pc}
    5326:	46c0      	nop			(mov r8, r8)
    5328:	00000000 	.word	0x00000000

0000532c <_ZN9BrasTapis13initBrasTapisEv>:

void BrasTapis::initBrasTapis()
    532c:	b580      	push	{r7, lr}
    532e:	b08c      	sub	sp, #48
    5330:	af04      	add	r7, sp, #16
//        TIM_CtrlPWMOutputs(TIM3, ENABLE);
//        this->brasTapisLeft = new BrasTapis(timer, 1, 0.01f, 0.11f, 87.f, 51.f);
//        this->brasTapisRight = new BrasTapis(2timer, 3, 0.01f, 0.11f, 0.f, 40.f);

//    #else // Krabi - STM32 H107
        Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5332:	f04f 000c 	mov.w	r0, #12	; 0xc
    5336:	f009 f9b7 	bl	e6a8 <_Znwj>
    533a:	4603      	mov	r3, r0
    533c:	603b      	str	r3, [r7, #0]
    533e:	683a      	ldr	r2, [r7, #0]
    5340:	2a00      	cmp	r2, #0
    5342:	d00d      	beq.n	5360 <_ZN9BrasTapis13initBrasTapisEv+0x34>
    5344:	f04f 0300 	mov.w	r3, #0	; 0x0
    5348:	9300      	str	r3, [sp, #0]
    534a:	6838      	ldr	r0, [r7, #0]
    534c:	492e      	ldr	r1, [pc, #184]	(5408 <_ZN9BrasTapis13initBrasTapisEv+0xdc>)
    534e:	f644 6220 	movw	r2, #20000	; 0x4e20
    5352:	f04f 0347 	mov.w	r3, #71	; 0x47
    5356:	f008 f91b 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    535a:	683b      	ldr	r3, [r7, #0]
    535c:	607b      	str	r3, [r7, #4]
    535e:	e001      	b.n	5364 <_ZN9BrasTapis13initBrasTapisEv+0x38>
    5360:	683a      	ldr	r2, [r7, #0]
    5362:	607a      	str	r2, [r7, #4]
    5364:	687b      	ldr	r3, [r7, #4]
    5366:	61fb      	str	r3, [r7, #28]
        TIM_CtrlPWMOutputs(TIM1, ENABLE);
    5368:	4827      	ldr	r0, [pc, #156]	(5408 <_ZN9BrasTapis13initBrasTapisEv+0xdc>)
    536a:	f04f 0101 	mov.w	r1, #1	; 0x1
    536e:	f7fd fe81 	bl	3074 <TIM_CtrlPWMOutputs>
        brasTapisLeft = new BrasTapis(timer, 2, 0.01f, 0.11f, 20.f, 86.f);
    5372:	f04f 0010 	mov.w	r0, #16	; 0x10
    5376:	f009 f997 	bl	e6a8 <_Znwj>
    537a:	4603      	mov	r3, r0
    537c:	60bb      	str	r3, [r7, #8]
    537e:	68ba      	ldr	r2, [r7, #8]
    5380:	2a00      	cmp	r2, #0
    5382:	d00f      	beq.n	53a4 <_ZN9BrasTapis13initBrasTapisEv+0x78>
    5384:	4b21      	ldr	r3, [pc, #132]	(540c <_ZN9BrasTapis13initBrasTapisEv+0xe0>)
    5386:	9300      	str	r3, [sp, #0]
    5388:	4b21      	ldr	r3, [pc, #132]	(5410 <_ZN9BrasTapis13initBrasTapisEv+0xe4>)
    538a:	9301      	str	r3, [sp, #4]
    538c:	4b21      	ldr	r3, [pc, #132]	(5414 <_ZN9BrasTapis13initBrasTapisEv+0xe8>)
    538e:	9302      	str	r3, [sp, #8]
    5390:	68b8      	ldr	r0, [r7, #8]
    5392:	69f9      	ldr	r1, [r7, #28]
    5394:	f04f 0202 	mov.w	r2, #2	; 0x2
    5398:	4b1f      	ldr	r3, [pc, #124]	(5418 <_ZN9BrasTapis13initBrasTapisEv+0xec>)
    539a:	f7ff ffa5 	bl	52e8 <_ZN9BrasTapisC1EP5Timerhffff>
    539e:	68bb      	ldr	r3, [r7, #8]
    53a0:	60fb      	str	r3, [r7, #12]
    53a2:	e001      	b.n	53a8 <_ZN9BrasTapis13initBrasTapisEv+0x7c>
    53a4:	68ba      	ldr	r2, [r7, #8]
    53a6:	60fa      	str	r2, [r7, #12]
    53a8:	4b1c      	ldr	r3, [pc, #112]	(541c <_ZN9BrasTapis13initBrasTapisEv+0xf0>)
    53aa:	68fa      	ldr	r2, [r7, #12]
    53ac:	601a      	str	r2, [r3, #0]
        brasTapisRight = new BrasTapis(timer, 3, 0.01f, 0.11f, 120.f, 36.f);
    53ae:	f04f 0010 	mov.w	r0, #16	; 0x10
    53b2:	f009 f979 	bl	e6a8 <_Znwj>
    53b6:	4603      	mov	r3, r0
    53b8:	613b      	str	r3, [r7, #16]
    53ba:	693b      	ldr	r3, [r7, #16]
    53bc:	2b00      	cmp	r3, #0
    53be:	d00f      	beq.n	53e0 <_ZN9BrasTapis13initBrasTapisEv+0xb4>
    53c0:	4b12      	ldr	r3, [pc, #72]	(540c <_ZN9BrasTapis13initBrasTapisEv+0xe0>)
    53c2:	9300      	str	r3, [sp, #0]
    53c4:	4b16      	ldr	r3, [pc, #88]	(5420 <_ZN9BrasTapis13initBrasTapisEv+0xf4>)
    53c6:	9301      	str	r3, [sp, #4]
    53c8:	4b16      	ldr	r3, [pc, #88]	(5424 <_ZN9BrasTapis13initBrasTapisEv+0xf8>)
    53ca:	9302      	str	r3, [sp, #8]
    53cc:	6938      	ldr	r0, [r7, #16]
    53ce:	69f9      	ldr	r1, [r7, #28]
    53d0:	f04f 0203 	mov.w	r2, #3	; 0x3
    53d4:	4b10      	ldr	r3, [pc, #64]	(5418 <_ZN9BrasTapis13initBrasTapisEv+0xec>)
    53d6:	f7ff ff87 	bl	52e8 <_ZN9BrasTapisC1EP5Timerhffff>
    53da:	693a      	ldr	r2, [r7, #16]
    53dc:	617a      	str	r2, [r7, #20]
    53de:	e001      	b.n	53e4 <_ZN9BrasTapis13initBrasTapisEv+0xb8>
    53e0:	693b      	ldr	r3, [r7, #16]
    53e2:	617b      	str	r3, [r7, #20]
    53e4:	4b10      	ldr	r3, [pc, #64]	(5428 <_ZN9BrasTapis13initBrasTapisEv+0xfc>)
    53e6:	697a      	ldr	r2, [r7, #20]
    53e8:	601a      	str	r2, [r3, #0]

 //   #endif
    brasTapisLeft->collapse();
    53ea:	4b0c      	ldr	r3, [pc, #48]	(541c <_ZN9BrasTapis13initBrasTapisEv+0xf0>)
    53ec:	681b      	ldr	r3, [r3, #0]
    53ee:	4618      	mov	r0, r3
    53f0:	f7ff ff64 	bl	52bc <_ZN9BrasTapis8collapseEv>
    brasTapisRight->collapse();
    53f4:	4b0c      	ldr	r3, [pc, #48]	(5428 <_ZN9BrasTapis13initBrasTapisEv+0xfc>)
    53f6:	681b      	ldr	r3, [r3, #0]
    53f8:	4618      	mov	r0, r3
    53fa:	f7ff ff5f 	bl	52bc <_ZN9BrasTapis8collapseEv>
}
    53fe:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5402:	46bd      	mov	sp, r7
    5404:	bd80      	pop	{r7, pc}
    5406:	46c0      	nop			(mov r8, r8)
    5408:	40012c00 	.word	0x40012c00
    540c:	3de147ae 	.word	0x3de147ae
    5410:	41a00000 	.word	0x41a00000
    5414:	42ac0000 	.word	0x42ac0000
    5418:	3c23d70a 	.word	0x3c23d70a
    541c:	2000054c 	.word	0x2000054c
    5420:	42f00000 	.word	0x42f00000
    5424:	42100000 	.word	0x42100000
    5428:	20000550 	.word	0x20000550

0000542c <_ZN9BrasTapis7getLeftEv>:
    if (brasTapisRight == 0)
        initBrasTapis();
    return brasTapisRight;
}

BrasTapis *BrasTapis::getLeft()
    542c:	b580      	push	{r7, lr}
    542e:	b082      	sub	sp, #8
    5430:	af00      	add	r7, sp, #0
    5432:	6078      	str	r0, [r7, #4]
{
    if (brasTapisLeft == 0)
    5434:	4b06      	ldr	r3, [pc, #24]	(5450 <_ZN9BrasTapis7getLeftEv+0x24>)
    5436:	681b      	ldr	r3, [r3, #0]
    5438:	2b00      	cmp	r3, #0
    543a:	d101      	bne.n	5440 <_ZN9BrasTapis7getLeftEv+0x14>
        initBrasTapis();
    543c:	f7ff ff76 	bl	532c <_ZN9BrasTapis13initBrasTapisEv>
    return brasTapisLeft;
    5440:	4b03      	ldr	r3, [pc, #12]	(5450 <_ZN9BrasTapis7getLeftEv+0x24>)
    5442:	681b      	ldr	r3, [r3, #0]
}
    5444:	4618      	mov	r0, r3
    5446:	f107 0708 	add.w	r7, r7, #8	; 0x8
    544a:	46bd      	mov	sp, r7
    544c:	bd80      	pop	{r7, pc}
    544e:	46c0      	nop			(mov r8, r8)
    5450:	2000054c 	.word	0x2000054c

00005454 <_ZN9BrasTapis8getRightEv>:
{
    brasTapisRight->collapse();
    brasTapisLeft->collapse();
}

BrasTapis *BrasTapis::getRight()
    5454:	b580      	push	{r7, lr}
    5456:	b082      	sub	sp, #8
    5458:	af00      	add	r7, sp, #0
    545a:	6078      	str	r0, [r7, #4]
{
    if (brasTapisRight == 0)
    545c:	4b06      	ldr	r3, [pc, #24]	(5478 <_ZN9BrasTapis8getRightEv+0x24>)
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	2b00      	cmp	r3, #0
    5462:	d101      	bne.n	5468 <_ZN9BrasTapis8getRightEv+0x14>
        initBrasTapis();
    5464:	f7ff ff62 	bl	532c <_ZN9BrasTapis13initBrasTapisEv>
    return brasTapisRight;
    5468:	4b03      	ldr	r3, [pc, #12]	(5478 <_ZN9BrasTapis8getRightEv+0x24>)
    546a:	681b      	ldr	r3, [r3, #0]
}
    546c:	4618      	mov	r0, r3
    546e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5472:	46bd      	mov	sp, r7
    5474:	bd80      	pop	{r7, pc}
    5476:	46c0      	nop			(mov r8, r8)
    5478:	20000550 	.word	0x20000550

0000547c <_ZN9BrasTapisC2EP5Timerhffff>:

#ifdef ROBOTHW
BrasTapis* BrasTapis::brasTapisLeft = 0;
BrasTapis* BrasTapis::brasTapisRight = 0;

BrasTapis::BrasTapis(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded):BrasKrabi(timer, OCx, RC0degre, RC180degres, angleCollapsed, angleExpanded, 0.f)
    547c:	b580      	push	{r7, lr}
    547e:	b088      	sub	sp, #32
    5480:	af04      	add	r7, sp, #16
    5482:	60f8      	str	r0, [r7, #12]
    5484:	60b9      	str	r1, [r7, #8]
    5486:	603b      	str	r3, [r7, #0]
    5488:	4613      	mov	r3, r2
    548a:	71fb      	strb	r3, [r7, #7]
    548c:	68fa      	ldr	r2, [r7, #12]
    548e:	f897 c007 	ldrb.w	ip, [r7, #7]
    5492:	69bb      	ldr	r3, [r7, #24]
    5494:	9300      	str	r3, [sp, #0]
    5496:	69fb      	ldr	r3, [r7, #28]
    5498:	9301      	str	r3, [sp, #4]
    549a:	6a3b      	ldr	r3, [r7, #32]
    549c:	9302      	str	r3, [sp, #8]
    549e:	4b07      	ldr	r3, [pc, #28]	(54bc <_ZN9BrasTapisC2EP5Timerhffff+0x40>)
    54a0:	9303      	str	r3, [sp, #12]
    54a2:	4610      	mov	r0, r2
    54a4:	68b9      	ldr	r1, [r7, #8]
    54a6:	4662      	mov	r2, ip
    54a8:	683b      	ldr	r3, [r7, #0]
    54aa:	f7ff fec1 	bl	5230 <_ZN9BrasKrabiC2EP5Timerhfffff>
{}
    54ae:	68fb      	ldr	r3, [r7, #12]
    54b0:	4618      	mov	r0, r3
    54b2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    54b6:	46bd      	mov	sp, r7
    54b8:	bd80      	pop	{r7, pc}
    54ba:	46c0      	nop			(mov r8, r8)
    54bc:	00000000 	.word	0x00000000

000054c0 <_ZN11BrasLateral5frontEv>:
    void BrasLateral::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasLateral::front()
    54c0:	b580      	push	{r7, lr}
    54c2:	b082      	sub	sp, #8
    54c4:	af00      	add	r7, sp, #0
    54c6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    54c8:	687b      	ldr	r3, [r7, #4]
    54ca:	681a      	ldr	r2, [r3, #0]
    54cc:	687b      	ldr	r3, [r7, #4]
    54ce:	68db      	ldr	r3, [r3, #12]
    54d0:	4610      	mov	r0, r2
    54d2:	4619      	mov	r1, r3
    54d4:	f001 fe88 	bl	71e8 <_ZN5Servo9goToAngleEf>
    }
    54d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54dc:	46bd      	mov	sp, r7
    54de:	bd80      	pop	{r7, pc}

000054e0 <_ZN11BrasLateral8collapseEv>:
    void BrasLateral::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasLateral::collapse()
    54e0:	b580      	push	{r7, lr}
    54e2:	b082      	sub	sp, #8
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    54e8:	687b      	ldr	r3, [r7, #4]
    54ea:	681a      	ldr	r2, [r3, #0]
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	685b      	ldr	r3, [r3, #4]
    54f0:	4610      	mov	r0, r2
    54f2:	4619      	mov	r1, r3
    54f4:	f001 fe78 	bl	71e8 <_ZN5Servo9goToAngleEf>
    }
    54f8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54fc:	46bd      	mov	sp, r7
    54fe:	bd80      	pop	{r7, pc}

00005500 <_ZN11BrasLateral6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasLateral::expand()
    5500:	b580      	push	{r7, lr}
    5502:	b082      	sub	sp, #8
    5504:	af00      	add	r7, sp, #0
    5506:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	681a      	ldr	r2, [r3, #0]
    550c:	687b      	ldr	r3, [r7, #4]
    550e:	689b      	ldr	r3, [r3, #8]
    5510:	4610      	mov	r0, r2
    5512:	4619      	mov	r1, r3
    5514:	f001 fe68 	bl	71e8 <_ZN5Servo9goToAngleEf>
    }
    5518:	f107 0708 	add.w	r7, r7, #8	; 0x8
    551c:	46bd      	mov	sp, r7
    551e:	bd80      	pop	{r7, pc}

00005520 <_ZN11BrasLateralC1EP5Timerhfffff>:
BrasLateral* BrasLateral::left = 0;
BrasLateral* BrasLateral::right = 0;

#ifdef ROBOTHW

    BrasLateral::BrasLateral(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5520:	b580      	push	{r7, lr}
    5522:	b088      	sub	sp, #32
    5524:	af02      	add	r7, sp, #8
    5526:	6178      	str	r0, [r7, #20]
    5528:	6139      	str	r1, [r7, #16]
    552a:	60bb      	str	r3, [r7, #8]
    552c:	4613      	mov	r3, r2
    552e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5530:	697a      	ldr	r2, [r7, #20]
    5532:	6a7b      	ldr	r3, [r7, #36]
    5534:	6053      	str	r3, [r2, #4]
    5536:	697a      	ldr	r2, [r7, #20]
    5538:	6abb      	ldr	r3, [r7, #40]
    553a:	6093      	str	r3, [r2, #8]
    553c:	697a      	ldr	r2, [r7, #20]
    553e:	6afb      	ldr	r3, [r7, #44]
    5540:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5542:	f04f 0014 	mov.w	r0, #20	; 0x14
    5546:	f009 f8af 	bl	e6a8 <_Znwj>
    554a:	4603      	mov	r3, r0
    554c:	603b      	str	r3, [r7, #0]
    554e:	683a      	ldr	r2, [r7, #0]
    5550:	2a00      	cmp	r2, #0
    5552:	d00a      	beq.n	556a <_ZN11BrasLateralC1EP5Timerhfffff+0x4a>
    5554:	7bfa      	ldrb	r2, [r7, #15]
    5556:	6a3b      	ldr	r3, [r7, #32]
    5558:	9300      	str	r3, [sp, #0]
    555a:	6838      	ldr	r0, [r7, #0]
    555c:	6939      	ldr	r1, [r7, #16]
    555e:	68bb      	ldr	r3, [r7, #8]
    5560:	f001 feb2 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    5564:	683b      	ldr	r3, [r7, #0]
    5566:	607b      	str	r3, [r7, #4]
    5568:	e001      	b.n	556e <_ZN11BrasLateralC1EP5Timerhfffff+0x4e>
    556a:	683a      	ldr	r2, [r7, #0]
    556c:	607a      	str	r2, [r7, #4]
    556e:	697b      	ldr	r3, [r7, #20]
    5570:	687a      	ldr	r2, [r7, #4]
    5572:	601a      	str	r2, [r3, #0]
    }
    5574:	697b      	ldr	r3, [r7, #20]
    5576:	4618      	mov	r0, r3
    5578:	f107 0718 	add.w	r7, r7, #24	; 0x18
    557c:	46bd      	mov	sp, r7
    557e:	bd80      	pop	{r7, pc}

00005580 <_ZN11BrasLateral16initBrasLaterauxEv>:
    void BrasLateral::front()
    {
        servo->goToAngle(angleFront);
    }

    void BrasLateral::initBrasLateraux()
    5580:	b580      	push	{r7, lr}
    5582:	b08c      	sub	sp, #48
    5584:	af04      	add	r7, sp, #16
            TIM_CtrlPWMOutputs(TIM3, ENABLE);

            left = new BrasLateral(timer, 1, 0.01f, 0.11f, 87.f, 51.f, 15.f);
            right = new BrasLateral(timer, 3, 0.01f, 0.11f, 0.f, 40.f, 77.f);
        #else // Krabi - STM32 H107
            Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5586:	f04f 000c 	mov.w	r0, #12	; 0xc
    558a:	f009 f88d 	bl	e6a8 <_Znwj>
    558e:	4603      	mov	r3, r0
    5590:	603b      	str	r3, [r7, #0]
    5592:	683a      	ldr	r2, [r7, #0]
    5594:	2a00      	cmp	r2, #0
    5596:	d00d      	beq.n	55b4 <_ZN11BrasLateral16initBrasLaterauxEv+0x34>
    5598:	f04f 0300 	mov.w	r3, #0	; 0x0
    559c:	9300      	str	r3, [sp, #0]
    559e:	6838      	ldr	r0, [r7, #0]
    55a0:	4930      	ldr	r1, [pc, #192]	(5664 <_ZN11BrasLateral16initBrasLaterauxEv+0xe4>)
    55a2:	f644 6220 	movw	r2, #20000	; 0x4e20
    55a6:	f04f 0347 	mov.w	r3, #71	; 0x47
    55aa:	f007 fff1 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    55ae:	683b      	ldr	r3, [r7, #0]
    55b0:	607b      	str	r3, [r7, #4]
    55b2:	e001      	b.n	55b8 <_ZN11BrasLateral16initBrasLaterauxEv+0x38>
    55b4:	683a      	ldr	r2, [r7, #0]
    55b6:	607a      	str	r2, [r7, #4]
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	61fb      	str	r3, [r7, #28]
            TIM_CtrlPWMOutputs(TIM1, ENABLE);
    55bc:	4829      	ldr	r0, [pc, #164]	(5664 <_ZN11BrasLateral16initBrasLaterauxEv+0xe4>)
    55be:	f04f 0101 	mov.w	r1, #1	; 0x1
    55c2:	f7fd fd57 	bl	3074 <TIM_CtrlPWMOutputs>

            right = new BrasLateral(timer, 2, 0.01f, 0.11f, 20.f, 86.f, 84.f);
    55c6:	f04f 0010 	mov.w	r0, #16	; 0x10
    55ca:	f009 f86d 	bl	e6a8 <_Znwj>
    55ce:	4603      	mov	r3, r0
    55d0:	60bb      	str	r3, [r7, #8]
    55d2:	68ba      	ldr	r2, [r7, #8]
    55d4:	2a00      	cmp	r2, #0
    55d6:	d011      	beq.n	55fc <_ZN11BrasLateral16initBrasLaterauxEv+0x7c>
    55d8:	4b23      	ldr	r3, [pc, #140]	(5668 <_ZN11BrasLateral16initBrasLaterauxEv+0xe8>)
    55da:	9300      	str	r3, [sp, #0]
    55dc:	4b23      	ldr	r3, [pc, #140]	(566c <_ZN11BrasLateral16initBrasLaterauxEv+0xec>)
    55de:	9301      	str	r3, [sp, #4]
    55e0:	4b23      	ldr	r3, [pc, #140]	(5670 <_ZN11BrasLateral16initBrasLaterauxEv+0xf0>)
    55e2:	9302      	str	r3, [sp, #8]
    55e4:	4b23      	ldr	r3, [pc, #140]	(5674 <_ZN11BrasLateral16initBrasLaterauxEv+0xf4>)
    55e6:	9303      	str	r3, [sp, #12]
    55e8:	68b8      	ldr	r0, [r7, #8]
    55ea:	69f9      	ldr	r1, [r7, #28]
    55ec:	f04f 0202 	mov.w	r2, #2	; 0x2
    55f0:	4b21      	ldr	r3, [pc, #132]	(5678 <_ZN11BrasLateral16initBrasLaterauxEv+0xf8>)
    55f2:	f7ff ff95 	bl	5520 <_ZN11BrasLateralC1EP5Timerhfffff>
    55f6:	68bb      	ldr	r3, [r7, #8]
    55f8:	60fb      	str	r3, [r7, #12]
    55fa:	e001      	b.n	5600 <_ZN11BrasLateral16initBrasLaterauxEv+0x80>
    55fc:	68ba      	ldr	r2, [r7, #8]
    55fe:	60fa      	str	r2, [r7, #12]
    5600:	4b1e      	ldr	r3, [pc, #120]	(567c <_ZN11BrasLateral16initBrasLaterauxEv+0xfc>)
    5602:	68fa      	ldr	r2, [r7, #12]
    5604:	601a      	str	r2, [r3, #0]
            left = new BrasLateral(timer, 3, 0.01f, 0.11f, 120.f, 36.f, 1.f);
    5606:	f04f 0010 	mov.w	r0, #16	; 0x10
    560a:	f009 f84d 	bl	e6a8 <_Znwj>
    560e:	4603      	mov	r3, r0
    5610:	613b      	str	r3, [r7, #16]
    5612:	693b      	ldr	r3, [r7, #16]
    5614:	2b00      	cmp	r3, #0
    5616:	d011      	beq.n	563c <_ZN11BrasLateral16initBrasLaterauxEv+0xbc>
    5618:	4b13      	ldr	r3, [pc, #76]	(5668 <_ZN11BrasLateral16initBrasLaterauxEv+0xe8>)
    561a:	9300      	str	r3, [sp, #0]
    561c:	4b18      	ldr	r3, [pc, #96]	(5680 <_ZN11BrasLateral16initBrasLaterauxEv+0x100>)
    561e:	9301      	str	r3, [sp, #4]
    5620:	4b18      	ldr	r3, [pc, #96]	(5684 <_ZN11BrasLateral16initBrasLaterauxEv+0x104>)
    5622:	9302      	str	r3, [sp, #8]
    5624:	4b18      	ldr	r3, [pc, #96]	(5688 <_ZN11BrasLateral16initBrasLaterauxEv+0x108>)
    5626:	9303      	str	r3, [sp, #12]
    5628:	6938      	ldr	r0, [r7, #16]
    562a:	69f9      	ldr	r1, [r7, #28]
    562c:	f04f 0203 	mov.w	r2, #3	; 0x3
    5630:	4b11      	ldr	r3, [pc, #68]	(5678 <_ZN11BrasLateral16initBrasLaterauxEv+0xf8>)
    5632:	f7ff ff75 	bl	5520 <_ZN11BrasLateralC1EP5Timerhfffff>
    5636:	693a      	ldr	r2, [r7, #16]
    5638:	617a      	str	r2, [r7, #20]
    563a:	e001      	b.n	5640 <_ZN11BrasLateral16initBrasLaterauxEv+0xc0>
    563c:	693b      	ldr	r3, [r7, #16]
    563e:	617b      	str	r3, [r7, #20]
    5640:	4b12      	ldr	r3, [pc, #72]	(568c <_ZN11BrasLateral16initBrasLaterauxEv+0x10c>)
    5642:	697a      	ldr	r2, [r7, #20]
    5644:	601a      	str	r2, [r3, #0]


        #endif

        left->collapse();
    5646:	4b11      	ldr	r3, [pc, #68]	(568c <_ZN11BrasLateral16initBrasLaterauxEv+0x10c>)
    5648:	681b      	ldr	r3, [r3, #0]
    564a:	4618      	mov	r0, r3
    564c:	f7ff ff48 	bl	54e0 <_ZN11BrasLateral8collapseEv>
        right->collapse();
    5650:	4b0a      	ldr	r3, [pc, #40]	(567c <_ZN11BrasLateral16initBrasLaterauxEv+0xfc>)
    5652:	681b      	ldr	r3, [r3, #0]
    5654:	4618      	mov	r0, r3
    5656:	f7ff ff43 	bl	54e0 <_ZN11BrasLateral8collapseEv>
    }
    565a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    565e:	46bd      	mov	sp, r7
    5660:	bd80      	pop	{r7, pc}
    5662:	46c0      	nop			(mov r8, r8)
    5664:	40012c00 	.word	0x40012c00
    5668:	3de147ae 	.word	0x3de147ae
    566c:	41a00000 	.word	0x41a00000
    5670:	42ac0000 	.word	0x42ac0000
    5674:	42a80000 	.word	0x42a80000
    5678:	3c23d70a 	.word	0x3c23d70a
    567c:	20000558 	.word	0x20000558
    5680:	42f00000 	.word	0x42f00000
    5684:	42100000 	.word	0x42100000
    5688:	3f800000 	.word	0x3f800000
    568c:	20000554 	.word	0x20000554

00005690 <_ZN11BrasLateral8getRightEv>:
        initBrasLateraux();

    return left;
}

BrasLateral* BrasLateral::getRight()
    5690:	b580      	push	{r7, lr}
    5692:	af00      	add	r7, sp, #0
{
    if (right==0)
    5694:	4b05      	ldr	r3, [pc, #20]	(56ac <_ZN11BrasLateral8getRightEv+0x1c>)
    5696:	681b      	ldr	r3, [r3, #0]
    5698:	2b00      	cmp	r3, #0
    569a:	d101      	bne.n	56a0 <_ZN11BrasLateral8getRightEv+0x10>
        initBrasLateraux();
    569c:	f7ff ff70 	bl	5580 <_ZN11BrasLateral16initBrasLaterauxEv>

    return right;
    56a0:	4b02      	ldr	r3, [pc, #8]	(56ac <_ZN11BrasLateral8getRightEv+0x1c>)
    56a2:	681b      	ldr	r3, [r3, #0]
}
    56a4:	4618      	mov	r0, r3
    56a6:	46bd      	mov	sp, r7
    56a8:	bd80      	pop	{r7, pc}
    56aa:	46c0      	nop			(mov r8, r8)
    56ac:	20000558 	.word	0x20000558

000056b0 <_ZN11BrasLateral7getLeftEv>:
        right = new BrasLateral();
    }

#endif

BrasLateral* BrasLateral::getLeft()
    56b0:	b580      	push	{r7, lr}
    56b2:	af00      	add	r7, sp, #0
{
    if (left==0)
    56b4:	4b05      	ldr	r3, [pc, #20]	(56cc <_ZN11BrasLateral7getLeftEv+0x1c>)
    56b6:	681b      	ldr	r3, [r3, #0]
    56b8:	2b00      	cmp	r3, #0
    56ba:	d101      	bne.n	56c0 <_ZN11BrasLateral7getLeftEv+0x10>
        initBrasLateraux();
    56bc:	f7ff ff60 	bl	5580 <_ZN11BrasLateral16initBrasLaterauxEv>

    return left;
    56c0:	4b02      	ldr	r3, [pc, #8]	(56cc <_ZN11BrasLateral7getLeftEv+0x1c>)
    56c2:	681b      	ldr	r3, [r3, #0]
}
    56c4:	4618      	mov	r0, r3
    56c6:	46bd      	mov	sp, r7
    56c8:	bd80      	pop	{r7, pc}
    56ca:	46c0      	nop			(mov r8, r8)
    56cc:	20000554 	.word	0x20000554

000056d0 <_ZN11BrasLateralC2EP5Timerhfffff>:
BrasLateral* BrasLateral::left = 0;
BrasLateral* BrasLateral::right = 0;

#ifdef ROBOTHW

    BrasLateral::BrasLateral(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    56d0:	b580      	push	{r7, lr}
    56d2:	b088      	sub	sp, #32
    56d4:	af02      	add	r7, sp, #8
    56d6:	6178      	str	r0, [r7, #20]
    56d8:	6139      	str	r1, [r7, #16]
    56da:	60bb      	str	r3, [r7, #8]
    56dc:	4613      	mov	r3, r2
    56de:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    56e0:	697a      	ldr	r2, [r7, #20]
    56e2:	6a7b      	ldr	r3, [r7, #36]
    56e4:	6053      	str	r3, [r2, #4]
    56e6:	697a      	ldr	r2, [r7, #20]
    56e8:	6abb      	ldr	r3, [r7, #40]
    56ea:	6093      	str	r3, [r2, #8]
    56ec:	697a      	ldr	r2, [r7, #20]
    56ee:	6afb      	ldr	r3, [r7, #44]
    56f0:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    56f2:	f04f 0014 	mov.w	r0, #20	; 0x14
    56f6:	f008 ffd7 	bl	e6a8 <_Znwj>
    56fa:	4603      	mov	r3, r0
    56fc:	603b      	str	r3, [r7, #0]
    56fe:	683a      	ldr	r2, [r7, #0]
    5700:	2a00      	cmp	r2, #0
    5702:	d00a      	beq.n	571a <_ZN11BrasLateralC2EP5Timerhfffff+0x4a>
    5704:	7bfa      	ldrb	r2, [r7, #15]
    5706:	6a3b      	ldr	r3, [r7, #32]
    5708:	9300      	str	r3, [sp, #0]
    570a:	6838      	ldr	r0, [r7, #0]
    570c:	6939      	ldr	r1, [r7, #16]
    570e:	68bb      	ldr	r3, [r7, #8]
    5710:	f001 fdda 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    5714:	683b      	ldr	r3, [r7, #0]
    5716:	607b      	str	r3, [r7, #4]
    5718:	e001      	b.n	571e <_ZN11BrasLateralC2EP5Timerhfffff+0x4e>
    571a:	683a      	ldr	r2, [r7, #0]
    571c:	607a      	str	r2, [r7, #4]
    571e:	697b      	ldr	r3, [r7, #20]
    5720:	687a      	ldr	r2, [r7, #4]
    5722:	601a      	str	r2, [r3, #0]
    }
    5724:	697b      	ldr	r3, [r7, #20]
    5726:	4618      	mov	r0, r3
    5728:	f107 0718 	add.w	r7, r7, #24	; 0x18
    572c:	46bd      	mov	sp, r7
    572e:	bd80      	pop	{r7, pc}

00005730 <_ZN9Container5closeEv>:
#else
    qDebug() << "Ouvre Conteneur";
#endif
}

void Container::close()
    5730:	b580      	push	{r7, lr}
    5732:	b082      	sub	sp, #8
    5734:	af00      	add	r7, sp, #0
    5736:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    servo->goToAngle(CONTAINER_ANGLE_CLOSE);
    5738:	687b      	ldr	r3, [r7, #4]
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	4618      	mov	r0, r3
    573e:	4903      	ldr	r1, [pc, #12]	(574c <_ZN9Container5closeEv+0x1c>)
    5740:	f001 fd52 	bl	71e8 <_ZN5Servo9goToAngleEf>
#else
    qDebug() << "Ferme Conteneur";
#endif
}
    5744:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5748:	46bd      	mov	sp, r7
    574a:	bd80      	pop	{r7, pc}
    574c:	41200000 	.word	0x41200000

00005750 <_ZN9Container4openEv>:
    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    close();
#endif
}

void Container::open()
    5750:	b580      	push	{r7, lr}
    5752:	b082      	sub	sp, #8
    5754:	af00      	add	r7, sp, #0
    5756:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    servo->goToAngle(CONTAINER_ANGLE_OPEN);
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	4618      	mov	r0, r3
    575e:	4903      	ldr	r1, [pc, #12]	(576c <_ZN9Container4openEv+0x1c>)
    5760:	f001 fd42 	bl	71e8 <_ZN5Servo9goToAngleEf>
#else
    qDebug() << "Ouvre Conteneur";
#endif
}
    5764:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5768:	46bd      	mov	sp, r7
    576a:	bd80      	pop	{r7, pc}
    576c:	42a00000 	.word	0x42a00000

00005770 <_ZN9ContainerC1Ev>:
        singleton = new Container();

    return singleton;
}

Container::Container()
    5770:	b580      	push	{r7, lr}
    5772:	b08a      	sub	sp, #40
    5774:	af02      	add	r7, sp, #8
    5776:	6178      	str	r0, [r7, #20]
{
#ifdef ROBOTHW
    Timer* timer3 = new Timer(TIM3, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5778:	f04f 000c 	mov.w	r0, #12	; 0xc
    577c:	f008 ff94 	bl	e6a8 <_Znwj>
    5780:	4603      	mov	r3, r0
    5782:	607b      	str	r3, [r7, #4]
    5784:	687a      	ldr	r2, [r7, #4]
    5786:	2a00      	cmp	r2, #0
    5788:	d00d      	beq.n	57a6 <_ZN9ContainerC1Ev+0x36>
    578a:	f04f 0300 	mov.w	r3, #0	; 0x0
    578e:	9300      	str	r3, [sp, #0]
    5790:	6878      	ldr	r0, [r7, #4]
    5792:	491b      	ldr	r1, [pc, #108]	(5800 <_ZN9ContainerC1Ev+0x90>)
    5794:	f644 6220 	movw	r2, #20000	; 0x4e20
    5798:	f04f 0347 	mov.w	r3, #71	; 0x47
    579c:	f007 fef8 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	60bb      	str	r3, [r7, #8]
    57a4:	e001      	b.n	57aa <_ZN9ContainerC1Ev+0x3a>
    57a6:	687a      	ldr	r2, [r7, #4]
    57a8:	60ba      	str	r2, [r7, #8]
    57aa:	68bb      	ldr	r3, [r7, #8]
    57ac:	61fb      	str	r3, [r7, #28]
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    57ae:	4814      	ldr	r0, [pc, #80]	(5800 <_ZN9ContainerC1Ev+0x90>)
    57b0:	f04f 0101 	mov.w	r1, #1	; 0x1
    57b4:	f7fd fc5e 	bl	3074 <TIM_CtrlPWMOutputs>

    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    57b8:	f04f 0014 	mov.w	r0, #20	; 0x14
    57bc:	f008 ff74 	bl	e6a8 <_Znwj>
    57c0:	4603      	mov	r3, r0
    57c2:	60fb      	str	r3, [r7, #12]
    57c4:	68fa      	ldr	r2, [r7, #12]
    57c6:	2a00      	cmp	r2, #0
    57c8:	d00b      	beq.n	57e2 <_ZN9ContainerC1Ev+0x72>
    57ca:	4b0e      	ldr	r3, [pc, #56]	(5804 <_ZN9ContainerC1Ev+0x94>)
    57cc:	9300      	str	r3, [sp, #0]
    57ce:	68f8      	ldr	r0, [r7, #12]
    57d0:	69f9      	ldr	r1, [r7, #28]
    57d2:	f04f 0202 	mov.w	r2, #2	; 0x2
    57d6:	4b0c      	ldr	r3, [pc, #48]	(5808 <_ZN9ContainerC1Ev+0x98>)
    57d8:	f001 fd76 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    57dc:	68fb      	ldr	r3, [r7, #12]
    57de:	613b      	str	r3, [r7, #16]
    57e0:	e001      	b.n	57e6 <_ZN9ContainerC1Ev+0x76>
    57e2:	68fa      	ldr	r2, [r7, #12]
    57e4:	613a      	str	r2, [r7, #16]
    57e6:	697b      	ldr	r3, [r7, #20]
    57e8:	693a      	ldr	r2, [r7, #16]
    57ea:	601a      	str	r2, [r3, #0]
    close();
    57ec:	6978      	ldr	r0, [r7, #20]
    57ee:	f7ff ff9f 	bl	5730 <_ZN9Container5closeEv>
#endif
}
    57f2:	697b      	ldr	r3, [r7, #20]
    57f4:	4618      	mov	r0, r3
    57f6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    57fa:	46bd      	mov	sp, r7
    57fc:	bd80      	pop	{r7, pc}
    57fe:	46c0      	nop			(mov r8, r8)
    5800:	40000400 	.word	0x40000400
    5804:	3de147ae 	.word	0x3de147ae
    5808:	3c23d70a 	.word	0x3c23d70a

0000580c <_ZN9Container12getSingletonEv>:
#define CONTAINER_ANGLE_OPEN 80.
#define CONTAINER_ANGLE_CLOSE 10.

Container* Container::singleton = 0;

Container* Container::getSingleton()
    580c:	b580      	push	{r7, lr}
    580e:	b082      	sub	sp, #8
    5810:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    5812:	4b0f      	ldr	r3, [pc, #60]	(5850 <_ZN9Container12getSingletonEv+0x44>)
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	2b00      	cmp	r3, #0
    5818:	d113      	bne.n	5842 <_ZN9Container12getSingletonEv+0x36>
        singleton = new Container();
    581a:	f04f 0004 	mov.w	r0, #4	; 0x4
    581e:	f008 ff43 	bl	e6a8 <_Znwj>
    5822:	4603      	mov	r3, r0
    5824:	603b      	str	r3, [r7, #0]
    5826:	683a      	ldr	r2, [r7, #0]
    5828:	2a00      	cmp	r2, #0
    582a:	d005      	beq.n	5838 <_ZN9Container12getSingletonEv+0x2c>
    582c:	6838      	ldr	r0, [r7, #0]
    582e:	f7ff ff9f 	bl	5770 <_ZN9ContainerC1Ev>
    5832:	683b      	ldr	r3, [r7, #0]
    5834:	607b      	str	r3, [r7, #4]
    5836:	e001      	b.n	583c <_ZN9Container12getSingletonEv+0x30>
    5838:	683a      	ldr	r2, [r7, #0]
    583a:	607a      	str	r2, [r7, #4]
    583c:	4b04      	ldr	r3, [pc, #16]	(5850 <_ZN9Container12getSingletonEv+0x44>)
    583e:	687a      	ldr	r2, [r7, #4]
    5840:	601a      	str	r2, [r3, #0]

    return singleton;
    5842:	4b03      	ldr	r3, [pc, #12]	(5850 <_ZN9Container12getSingletonEv+0x44>)
    5844:	681b      	ldr	r3, [r3, #0]
}
    5846:	4618      	mov	r0, r3
    5848:	f107 0708 	add.w	r7, r7, #8	; 0x8
    584c:	46bd      	mov	sp, r7
    584e:	bd80      	pop	{r7, pc}
    5850:	2000055c 	.word	0x2000055c

00005854 <_ZN9ContainerC2Ev>:

Container::Container()
    5854:	b580      	push	{r7, lr}
    5856:	b08a      	sub	sp, #40
    5858:	af02      	add	r7, sp, #8
    585a:	6178      	str	r0, [r7, #20]
{
#ifdef ROBOTHW
    Timer* timer3 = new Timer(TIM3, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    585c:	f04f 000c 	mov.w	r0, #12	; 0xc
    5860:	f008 ff22 	bl	e6a8 <_Znwj>
    5864:	4603      	mov	r3, r0
    5866:	607b      	str	r3, [r7, #4]
    5868:	687a      	ldr	r2, [r7, #4]
    586a:	2a00      	cmp	r2, #0
    586c:	d00d      	beq.n	588a <_ZN9ContainerC2Ev+0x36>
    586e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5872:	9300      	str	r3, [sp, #0]
    5874:	6878      	ldr	r0, [r7, #4]
    5876:	491b      	ldr	r1, [pc, #108]	(58e4 <_ZN9ContainerC2Ev+0x90>)
    5878:	f644 6220 	movw	r2, #20000	; 0x4e20
    587c:	f04f 0347 	mov.w	r3, #71	; 0x47
    5880:	f007 fe86 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5884:	687b      	ldr	r3, [r7, #4]
    5886:	60bb      	str	r3, [r7, #8]
    5888:	e001      	b.n	588e <_ZN9ContainerC2Ev+0x3a>
    588a:	687a      	ldr	r2, [r7, #4]
    588c:	60ba      	str	r2, [r7, #8]
    588e:	68bb      	ldr	r3, [r7, #8]
    5890:	61fb      	str	r3, [r7, #28]
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    5892:	4814      	ldr	r0, [pc, #80]	(58e4 <_ZN9ContainerC2Ev+0x90>)
    5894:	f04f 0101 	mov.w	r1, #1	; 0x1
    5898:	f7fd fbec 	bl	3074 <TIM_CtrlPWMOutputs>

    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    589c:	f04f 0014 	mov.w	r0, #20	; 0x14
    58a0:	f008 ff02 	bl	e6a8 <_Znwj>
    58a4:	4603      	mov	r3, r0
    58a6:	60fb      	str	r3, [r7, #12]
    58a8:	68fa      	ldr	r2, [r7, #12]
    58aa:	2a00      	cmp	r2, #0
    58ac:	d00b      	beq.n	58c6 <_ZN9ContainerC2Ev+0x72>
    58ae:	4b0e      	ldr	r3, [pc, #56]	(58e8 <_ZN9ContainerC2Ev+0x94>)
    58b0:	9300      	str	r3, [sp, #0]
    58b2:	68f8      	ldr	r0, [r7, #12]
    58b4:	69f9      	ldr	r1, [r7, #28]
    58b6:	f04f 0202 	mov.w	r2, #2	; 0x2
    58ba:	4b0c      	ldr	r3, [pc, #48]	(58ec <_ZN9ContainerC2Ev+0x98>)
    58bc:	f001 fd04 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    58c0:	68fb      	ldr	r3, [r7, #12]
    58c2:	613b      	str	r3, [r7, #16]
    58c4:	e001      	b.n	58ca <_ZN9ContainerC2Ev+0x76>
    58c6:	68fa      	ldr	r2, [r7, #12]
    58c8:	613a      	str	r2, [r7, #16]
    58ca:	697b      	ldr	r3, [r7, #20]
    58cc:	693a      	ldr	r2, [r7, #16]
    58ce:	601a      	str	r2, [r3, #0]
    close();
    58d0:	6978      	ldr	r0, [r7, #20]
    58d2:	f7ff ff2d 	bl	5730 <_ZN9Container5closeEv>
#endif
}
    58d6:	697b      	ldr	r3, [r7, #20]
    58d8:	4618      	mov	r0, r3
    58da:	f107 0720 	add.w	r7, r7, #32	; 0x20
    58de:	46bd      	mov	sp, r7
    58e0:	bd80      	pop	{r7, pc}
    58e2:	46c0      	nop			(mov r8, r8)
    58e4:	40000400 	.word	0x40000400
    58e8:	3de147ae 	.word	0x3de147ae
    58ec:	3c23d70a 	.word	0x3c23d70a

000058f0 <_ZN8Marteaux14rangerBasDroitEv>:
    }
    void releverBasDroit()
    {
        ServosNumeriques::moveToAtSpeed(MBD_RELEVE, MBD_VITESSE_MONTEE, MBD_ID);
    }
    void rangerBasDroit()
    58f0:	b580      	push	{r7, lr}
    58f2:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBD_RANGE, MBD_VITESSE_RANGEMENT, MBD_ID);
    58f4:	f240 10ff 	movw	r0, #511	; 0x1ff
    58f8:	f44f 7180 	mov.w	r1, #256	; 0x100
    58fc:	f04f 020a 	mov.w	r2, #10	; 0xa
    5900:	f008 fcd2 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5904:	46bd      	mov	sp, r7
    5906:	bd80      	pop	{r7, pc}

00005908 <_ZN8Marteaux15releverBasDroitEv>:
    
    void enfoncerBasDroit()
    {
        ServosNumeriques::moveToAtSpeed(MBD_ENFONCE, MBD_VITESSE_DESCENTE, MBD_ID);
    }
    void releverBasDroit()
    5908:	b580      	push	{r7, lr}
    590a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBD_RELEVE, MBD_VITESSE_MONTEE, MBD_ID);
    590c:	f44f 70a0 	mov.w	r0, #320	; 0x140
    5910:	f44f 7100 	mov.w	r1, #512	; 0x200
    5914:	f04f 020a 	mov.w	r2, #10	; 0xa
    5918:	f008 fcc6 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    591c:	46bd      	mov	sp, r7
    591e:	bd80      	pop	{r7, pc}

00005920 <_ZN8Marteaux16enfoncerBasDroitEv>:
    void rangerHautDroit()
    {
        ServosNumeriques::moveToAtSpeed(MHD_RANGE, MHD_VITESSE_RANGEMENT, MHD_ID);
    }
    
    void enfoncerBasDroit()
    5920:	b580      	push	{r7, lr}
    5922:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBD_ENFONCE, MBD_VITESSE_DESCENTE, MBD_ID);
    5924:	f04f 0090 	mov.w	r0, #144	; 0x90
    5928:	f240 71ff 	movw	r1, #2047	; 0x7ff
    592c:	f04f 020a 	mov.w	r2, #10	; 0xa
    5930:	f008 fcba 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5934:	46bd      	mov	sp, r7
    5936:	bd80      	pop	{r7, pc}

00005938 <_ZN8Marteaux15rangerHautDroitEv>:
    }
    void releverHautDroit()
    {
        ServosNumeriques::moveToAtSpeed(MHD_RELEVE, MHD_VITESSE_MONTEE, MHD_ID);
    }
    void rangerHautDroit()
    5938:	b580      	push	{r7, lr}
    593a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHD_RANGE, MHD_VITESSE_RANGEMENT, MHD_ID);
    593c:	f44f 7010 	mov.w	r0, #576	; 0x240
    5940:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    5944:	f04f 020b 	mov.w	r2, #11	; 0xb
    5948:	f008 fcae 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    594c:	46bd      	mov	sp, r7
    594e:	bd80      	pop	{r7, pc}

00005950 <_ZN8Marteaux16releverHautDroitEv>:
    
    void enfoncerHautDroit()
    {
        ServosNumeriques::moveToAtSpeed(MHD_ENFONCE, MHD_VITESSE_DESCENTE, MHD_ID);
    }
    void releverHautDroit()
    5950:	b580      	push	{r7, lr}
    5952:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHD_RELEVE, MHD_VITESSE_MONTEE, MHD_ID);
    5954:	f44f 7068 	mov.w	r0, #928	; 0x3a0
    5958:	f44f 7100 	mov.w	r1, #512	; 0x200
    595c:	f04f 020b 	mov.w	r2, #11	; 0xb
    5960:	f008 fca2 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5964:	46bd      	mov	sp, r7
    5966:	bd80      	pop	{r7, pc}

00005968 <_ZN8Marteaux17enfoncerHautDroitEv>:
    void rangerBasGauche()
    {
        ServosNumeriques::moveToAtSpeed(MBG_RANGE, MBG_VITESSE_RANGEMENT, MBG_ID);
    }
    
    void enfoncerHautDroit()
    5968:	b580      	push	{r7, lr}
    596a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHD_ENFONCE, MHD_VITESSE_DESCENTE, MHD_ID);
    596c:	f44f 704c 	mov.w	r0, #816	; 0x330
    5970:	f240 71ff 	movw	r1, #2047	; 0x7ff
    5974:	f04f 020b 	mov.w	r2, #11	; 0xb
    5978:	f008 fc96 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    597c:	46bd      	mov	sp, r7
    597e:	bd80      	pop	{r7, pc}

00005980 <_ZN8Marteaux15rangerBasGaucheEv>:
    }
    void releverBasGauche()
    {
        ServosNumeriques::moveToAtSpeed(MBG_RELEVE, MBG_VITESSE_MONTEE, MBG_ID);
    }
    void rangerBasGauche()
    5980:	b580      	push	{r7, lr}
    5982:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBG_RANGE, MBG_VITESSE_RANGEMENT, MBG_ID);
    5984:	f44f 7004 	mov.w	r0, #528	; 0x210
    5988:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    598c:	f04f 020d 	mov.w	r2, #13	; 0xd
    5990:	f008 fc8a 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5994:	46bd      	mov	sp, r7
    5996:	bd80      	pop	{r7, pc}

00005998 <_ZN8Marteaux16releverBasGaucheEv>:
    
    void enfoncerBasGauche()
    {
        ServosNumeriques::moveToAtSpeed(MBG_ENFONCE, MBG_VITESSE_DESCENTE, MBG_ID);
    }
    void releverBasGauche()
    5998:	b580      	push	{r7, lr}
    599a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBG_RELEVE, MBG_VITESSE_MONTEE, MBG_ID);
    599c:	f44f 7030 	mov.w	r0, #704	; 0x2c0
    59a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    59a4:	f04f 020d 	mov.w	r2, #13	; 0xd
    59a8:	f008 fc7e 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    59ac:	46bd      	mov	sp, r7
    59ae:	bd80      	pop	{r7, pc}

000059b0 <_ZN8Marteaux17enfoncerBasGaucheEv>:
    void rangerHautGauche()
    {
        ServosNumeriques::moveToAtSpeed(MHG_RANGE, MHG_VITESSE_RANGEMENT, MHG_ID);
    }
    
    void enfoncerBasGauche()
    59b0:	b580      	push	{r7, lr}
    59b2:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBG_ENFONCE, MBG_VITESSE_DESCENTE, MBG_ID);
    59b4:	f44f 7058 	mov.w	r0, #864	; 0x360
    59b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
    59bc:	f04f 020d 	mov.w	r2, #13	; 0xd
    59c0:	f008 fc72 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    59c4:	46bd      	mov	sp, r7
    59c6:	bd80      	pop	{r7, pc}

000059c8 <_ZN8Marteaux16rangerHautGaucheEv>:
    }
    void releverHautGauche()
    {
        ServosNumeriques::moveToAtSpeed(MHG_RELEVE, MHG_VITESSE_MONTEE, MHG_ID);
    }
    void rangerHautGauche()
    59c8:	b580      	push	{r7, lr}
    59ca:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHG_RANGE, MHG_VITESSE_RANGEMENT, MHG_ID);
    59cc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    59d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    59d4:	f04f 020c 	mov.w	r2, #12	; 0xc
    59d8:	f008 fc66 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    59dc:	46bd      	mov	sp, r7
    59de:	bd80      	pop	{r7, pc}

000059e0 <_ZN8Marteaux13rangerMarteauEbb>:
                releverHautGauche();
            else
                releverHautDroit();
        }
    }
    void rangerMarteau(bool bas, bool gauche)
    59e0:	b580      	push	{r7, lr}
    59e2:	b082      	sub	sp, #8
    59e4:	af00      	add	r7, sp, #0
    59e6:	4603      	mov	r3, r0
    59e8:	460a      	mov	r2, r1
    59ea:	71fb      	strb	r3, [r7, #7]
    59ec:	4613      	mov	r3, r2
    59ee:	71bb      	strb	r3, [r7, #6]
    {
        if (bas)
    59f0:	79fb      	ldrb	r3, [r7, #7]
    59f2:	2b00      	cmp	r3, #0
    59f4:	d008      	beq.n	5a08 <_ZN8Marteaux13rangerMarteauEbb+0x28>
        {
            if (gauche)
    59f6:	79bb      	ldrb	r3, [r7, #6]
    59f8:	2b00      	cmp	r3, #0
    59fa:	d002      	beq.n	5a02 <_ZN8Marteaux13rangerMarteauEbb+0x22>
                rangerBasGauche();
    59fc:	f7ff ffc0 	bl	5980 <_ZN8Marteaux15rangerBasGaucheEv>
    5a00:	e00a      	b.n	5a18 <_ZN8Marteaux13rangerMarteauEbb+0x38>
            else
                rangerBasDroit();
    5a02:	f7ff ff75 	bl	58f0 <_ZN8Marteaux14rangerBasDroitEv>
    5a06:	e007      	b.n	5a18 <_ZN8Marteaux13rangerMarteauEbb+0x38>
        }
        else
        {
            if (gauche)
    5a08:	79bb      	ldrb	r3, [r7, #6]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d002      	beq.n	5a14 <_ZN8Marteaux13rangerMarteauEbb+0x34>
                rangerHautGauche();
    5a0e:	f7ff ffdb 	bl	59c8 <_ZN8Marteaux16rangerHautGaucheEv>
    5a12:	e001      	b.n	5a18 <_ZN8Marteaux13rangerMarteauEbb+0x38>
            else
                rangerHautDroit();
    5a14:	f7ff ff90 	bl	5938 <_ZN8Marteaux15rangerHautDroitEv>
        }
    }
    5a18:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a1c:	46bd      	mov	sp, r7
    5a1e:	bd80      	pop	{r7, pc}

00005a20 <_ZN8Marteaux17releverHautGaucheEv>:
#ifdef ROBOTHW
    void enfoncerHautGauche()
    {
        ServosNumeriques::moveToAtSpeed(MHG_ENFONCE, MHG_VITESSE_DESCENTE, MHG_ID);
    }
    void releverHautGauche()
    5a20:	b580      	push	{r7, lr}
    5a22:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHG_RELEVE, MHG_VITESSE_MONTEE, MHG_ID);
    5a24:	f04f 0090 	mov.w	r0, #144	; 0x90
    5a28:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    5a2c:	f04f 020c 	mov.w	r2, #12	; 0xc
    5a30:	f008 fc3a 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5a34:	46bd      	mov	sp, r7
    5a36:	bd80      	pop	{r7, pc}

00005a38 <_ZN8Marteaux14releverMarteauEbb>:
                enfoncerHautGauche();
            else
                enfoncerHautDroit();
        }
    }
    void releverMarteau(bool bas, bool gauche)
    5a38:	b580      	push	{r7, lr}
    5a3a:	b082      	sub	sp, #8
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	4603      	mov	r3, r0
    5a40:	460a      	mov	r2, r1
    5a42:	71fb      	strb	r3, [r7, #7]
    5a44:	4613      	mov	r3, r2
    5a46:	71bb      	strb	r3, [r7, #6]
    {
        if (bas)
    5a48:	79fb      	ldrb	r3, [r7, #7]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d008      	beq.n	5a60 <_ZN8Marteaux14releverMarteauEbb+0x28>
        {
            if (gauche)
    5a4e:	79bb      	ldrb	r3, [r7, #6]
    5a50:	2b00      	cmp	r3, #0
    5a52:	d002      	beq.n	5a5a <_ZN8Marteaux14releverMarteauEbb+0x22>
                releverBasGauche();
    5a54:	f7ff ffa0 	bl	5998 <_ZN8Marteaux16releverBasGaucheEv>
    5a58:	e00a      	b.n	5a70 <_ZN8Marteaux14releverMarteauEbb+0x38>
            else
                releverBasDroit();
    5a5a:	f7ff ff55 	bl	5908 <_ZN8Marteaux15releverBasDroitEv>
    5a5e:	e007      	b.n	5a70 <_ZN8Marteaux14releverMarteauEbb+0x38>
        }
        else
        {
            if (gauche)
    5a60:	79bb      	ldrb	r3, [r7, #6]
    5a62:	2b00      	cmp	r3, #0
    5a64:	d002      	beq.n	5a6c <_ZN8Marteaux14releverMarteauEbb+0x34>
                releverHautGauche();
    5a66:	f7ff ffdb 	bl	5a20 <_ZN8Marteaux17releverHautGaucheEv>
    5a6a:	e001      	b.n	5a70 <_ZN8Marteaux14releverMarteauEbb+0x38>
            else
                releverHautDroit();
    5a6c:	f7ff ff70 	bl	5950 <_ZN8Marteaux16releverHautDroitEv>
        }
    }
    5a70:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5a74:	46bd      	mov	sp, r7
    5a76:	bd80      	pop	{r7, pc}

00005a78 <_ZN8Marteaux18enfoncerHautGaucheEv>:
#include "interfaceServosNumeriques.h"

namespace Marteaux 
{
#ifdef ROBOTHW
    void enfoncerHautGauche()
    5a78:	b580      	push	{r7, lr}
    5a7a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHG_ENFONCE, MHG_VITESSE_DESCENTE, MHG_ID);
    5a7c:	f44f 7080 	mov.w	r0, #256	; 0x100
    5a80:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5a84:	f04f 020c 	mov.w	r2, #12	; 0xc
    5a88:	f008 fc0e 	bl	e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5a8c:	46bd      	mov	sp, r7
    5a8e:	bd80      	pop	{r7, pc}

00005a90 <_ZN8Marteaux15enfoncerMarteauEbb>:

    void enfoncerBasDroit() {}
    void releverBasDroit() {}
    void rangerBasDroit() {}
#endif
    void enfoncerMarteau(bool bas, bool gauche)
    5a90:	b580      	push	{r7, lr}
    5a92:	b082      	sub	sp, #8
    5a94:	af00      	add	r7, sp, #0
    5a96:	4603      	mov	r3, r0
    5a98:	460a      	mov	r2, r1
    5a9a:	71fb      	strb	r3, [r7, #7]
    5a9c:	4613      	mov	r3, r2
    5a9e:	71bb      	strb	r3, [r7, #6]
    {
        if (bas)
    5aa0:	79fb      	ldrb	r3, [r7, #7]
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d008      	beq.n	5ab8 <_ZN8Marteaux15enfoncerMarteauEbb+0x28>
        {
            if (gauche)
    5aa6:	79bb      	ldrb	r3, [r7, #6]
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	d002      	beq.n	5ab2 <_ZN8Marteaux15enfoncerMarteauEbb+0x22>
                enfoncerBasGauche();
    5aac:	f7ff ff80 	bl	59b0 <_ZN8Marteaux17enfoncerBasGaucheEv>
    5ab0:	e00a      	b.n	5ac8 <_ZN8Marteaux15enfoncerMarteauEbb+0x38>
            else
                enfoncerBasDroit();
    5ab2:	f7ff ff35 	bl	5920 <_ZN8Marteaux16enfoncerBasDroitEv>
    5ab6:	e007      	b.n	5ac8 <_ZN8Marteaux15enfoncerMarteauEbb+0x38>
        }
        else
        {
            if (gauche)
    5ab8:	79bb      	ldrb	r3, [r7, #6]
    5aba:	2b00      	cmp	r3, #0
    5abc:	d002      	beq.n	5ac4 <_ZN8Marteaux15enfoncerMarteauEbb+0x34>
                enfoncerHautGauche();
    5abe:	f7ff ffdb 	bl	5a78 <_ZN8Marteaux18enfoncerHautGaucheEv>
    5ac2:	e001      	b.n	5ac8 <_ZN8Marteaux15enfoncerMarteauEbb+0x38>
            else
                enfoncerHautDroit();
    5ac4:	f7ff ff50 	bl	5968 <_ZN8Marteaux17enfoncerHautDroitEv>
        }
    }
    5ac8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5acc:	46bd      	mov	sp, r7
    5ace:	bd80      	pop	{r7, pc}

00005ad0 <_ZN6Moteur6tourneEf>:
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
}

void Moteur::tourne(float rapport)
    5ad0:	b580      	push	{r7, lr}
    5ad2:	b082      	sub	sp, #8
    5ad4:	af00      	add	r7, sp, #0
    5ad6:	6078      	str	r0, [r7, #4]
    5ad8:	6039      	str	r1, [r7, #0]
{
    pwm.setDutyCycle(rapport);
    5ada:	687b      	ldr	r3, [r7, #4]
    5adc:	4618      	mov	r0, r3
    5ade:	6839      	ldr	r1, [r7, #0]
    5ae0:	f006 fe74 	bl	c7cc <_ZN10PWMHandler12setDutyCycleEf>
}
    5ae4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5ae8:	46bd      	mov	sp, r7
    5aea:	bd80      	pop	{r7, pc}

00005aec <_ZN6MoteurC1EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    5aec:	b5b0      	push	{r4, r5, r7, lr}
    5aee:	b088      	sub	sp, #32
    5af0:	af02      	add	r7, sp, #8
    5af2:	60f8      	str	r0, [r7, #12]
    5af4:	60b9      	str	r1, [r7, #8]
    5af6:	603b      	str	r3, [r7, #0]
    5af8:	4613      	mov	r3, r2
    5afa:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    5afc:	68fd      	ldr	r5, [r7, #12]
    5afe:	f04f 000c 	mov.w	r0, #12	; 0xc
    5b02:	f008 fdd1 	bl	e6a8 <_Znwj>
    5b06:	4603      	mov	r3, r0
    5b08:	461c      	mov	r4, r3
    5b0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b0e:	9300      	str	r3, [sp, #0]
    5b10:	4620      	mov	r0, r4
    5b12:	68b9      	ldr	r1, [r7, #8]
    5b14:	f04f 0228 	mov.w	r2, #40	; 0x28
    5b18:	f04f 0347 	mov.w	r3, #71	; 0x47
    5b1c:	f007 fd38 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5b20:	79fb      	ldrb	r3, [r7, #7]
    5b22:	4628      	mov	r0, r5
    5b24:	4621      	mov	r1, r4
    5b26:	461a      	mov	r2, r3
    5b28:	f006 fe72 	bl	c810 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    5b2c:	8d3b      	ldrh	r3, [r7, #40]
    5b2e:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5b30:	f04f 0318 	mov.w	r3, #24	; 0x18
    5b34:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    5b36:	f04f 0303 	mov.w	r3, #3	; 0x3
    5b3a:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    5b3c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5b40:	6838      	ldr	r0, [r7, #0]
    5b42:	4619      	mov	r1, r3
    5b44:	f7fb fdb4 	bl	16b0 <GPIO_Init>
}
    5b48:	68fb      	ldr	r3, [r7, #12]
    5b4a:	4618      	mov	r0, r3
    5b4c:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5b50:	46bd      	mov	sp, r7
    5b52:	bdb0      	pop	{r4, r5, r7, pc}

00005b54 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    5b54:	b5b0      	push	{r4, r5, r7, lr}
    5b56:	b088      	sub	sp, #32
    5b58:	af02      	add	r7, sp, #8
    5b5a:	60f8      	str	r0, [r7, #12]
    5b5c:	60b9      	str	r1, [r7, #8]
    5b5e:	603b      	str	r3, [r7, #0]
    5b60:	4613      	mov	r3, r2
    5b62:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    5b64:	68fd      	ldr	r5, [r7, #12]
    5b66:	f04f 000c 	mov.w	r0, #12	; 0xc
    5b6a:	f008 fd9d 	bl	e6a8 <_Znwj>
    5b6e:	4603      	mov	r3, r0
    5b70:	461c      	mov	r4, r3
    5b72:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b76:	9300      	str	r3, [sp, #0]
    5b78:	4620      	mov	r0, r4
    5b7a:	68b9      	ldr	r1, [r7, #8]
    5b7c:	f04f 0228 	mov.w	r2, #40	; 0x28
    5b80:	f04f 0347 	mov.w	r3, #71	; 0x47
    5b84:	f007 fd04 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5b88:	79fb      	ldrb	r3, [r7, #7]
    5b8a:	4628      	mov	r0, r5
    5b8c:	4621      	mov	r1, r4
    5b8e:	461a      	mov	r2, r3
    5b90:	f006 fe3e 	bl	c810 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    5b94:	8d3b      	ldrh	r3, [r7, #40]
    5b96:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5b98:	f04f 0318 	mov.w	r3, #24	; 0x18
    5b9c:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    5b9e:	f04f 0303 	mov.w	r3, #3	; 0x3
    5ba2:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    5ba4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5ba8:	6838      	ldr	r0, [r7, #0]
    5baa:	4619      	mov	r1, r3
    5bac:	f7fb fd80 	bl	16b0 <GPIO_Init>
}
    5bb0:	68fb      	ldr	r3, [r7, #12]
    5bb2:	4618      	mov	r0, r3
    5bb4:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5bb8:	46bd      	mov	sp, r7
    5bba:	bdb0      	pop	{r4, r5, r7, pc}

00005bbc <_ZN5RouesC1Ev>:
#include "roues.h"

Roues::Roues()
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b086      	sub	sp, #24
    5bc0:	af04      	add	r7, sp, #16
    5bc2:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    5bc4:	687a      	ldr	r2, [r7, #4]
    5bc6:	f04f 0302 	mov.w	r3, #2	; 0x2
    5bca:	9300      	str	r3, [sp, #0]
    5bcc:	4b11      	ldr	r3, [pc, #68]	(5c14 <_ZN5RouesC1Ev+0x58>)
    5bce:	9301      	str	r3, [sp, #4]
    5bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
    5bd4:	9302      	str	r3, [sp, #8]
    5bd6:	4610      	mov	r0, r2
    5bd8:	490f      	ldr	r1, [pc, #60]	(5c18 <_ZN5RouesC1Ev+0x5c>)
    5bda:	f04f 0202 	mov.w	r2, #2	; 0x2
    5bde:	4b0f      	ldr	r3, [pc, #60]	(5c1c <_ZN5RouesC1Ev+0x60>)
    5be0:	f007 fa5e 	bl	d0a0 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	f103 0210 	add.w	r2, r3, #16	; 0x10
    5bea:	f04f 0308 	mov.w	r3, #8	; 0x8
    5bee:	9300      	str	r3, [sp, #0]
    5bf0:	4b08      	ldr	r3, [pc, #32]	(5c14 <_ZN5RouesC1Ev+0x58>)
    5bf2:	9301      	str	r3, [sp, #4]
    5bf4:	f04f 0310 	mov.w	r3, #16	; 0x10
    5bf8:	9302      	str	r3, [sp, #8]
    5bfa:	4610      	mov	r0, r2
    5bfc:	4906      	ldr	r1, [pc, #24]	(5c18 <_ZN5RouesC1Ev+0x5c>)
    5bfe:	f04f 0204 	mov.w	r2, #4	; 0x4
    5c02:	4b06      	ldr	r3, [pc, #24]	(5c1c <_ZN5RouesC1Ev+0x60>)
    5c04:	f007 fa4c 	bl	d0a0 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    5c08:	687b      	ldr	r3, [r7, #4]
    5c0a:	4618      	mov	r0, r3
    5c0c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5c10:	46bd      	mov	sp, r7
    5c12:	bd80      	pop	{r7, pc}
    5c14:	40011400 	.word	0x40011400
    5c18:	40000c00 	.word	0x40000c00
    5c1c:	40010800 	.word	0x40010800

00005c20 <_ZN5RouesC2Ev>:
#include "roues.h"

Roues::Roues()
    5c20:	b580      	push	{r7, lr}
    5c22:	b086      	sub	sp, #24
    5c24:	af04      	add	r7, sp, #16
    5c26:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    5c28:	687a      	ldr	r2, [r7, #4]
    5c2a:	f04f 0302 	mov.w	r3, #2	; 0x2
    5c2e:	9300      	str	r3, [sp, #0]
    5c30:	4b11      	ldr	r3, [pc, #68]	(5c78 <_ZN5RouesC2Ev+0x58>)
    5c32:	9301      	str	r3, [sp, #4]
    5c34:	f04f 0340 	mov.w	r3, #64	; 0x40
    5c38:	9302      	str	r3, [sp, #8]
    5c3a:	4610      	mov	r0, r2
    5c3c:	490f      	ldr	r1, [pc, #60]	(5c7c <_ZN5RouesC2Ev+0x5c>)
    5c3e:	f04f 0202 	mov.w	r2, #2	; 0x2
    5c42:	4b0f      	ldr	r3, [pc, #60]	(5c80 <_ZN5RouesC2Ev+0x60>)
    5c44:	f007 fa2c 	bl	d0a0 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    5c48:	687b      	ldr	r3, [r7, #4]
    5c4a:	f103 0210 	add.w	r2, r3, #16	; 0x10
    5c4e:	f04f 0308 	mov.w	r3, #8	; 0x8
    5c52:	9300      	str	r3, [sp, #0]
    5c54:	4b08      	ldr	r3, [pc, #32]	(5c78 <_ZN5RouesC2Ev+0x58>)
    5c56:	9301      	str	r3, [sp, #4]
    5c58:	f04f 0310 	mov.w	r3, #16	; 0x10
    5c5c:	9302      	str	r3, [sp, #8]
    5c5e:	4610      	mov	r0, r2
    5c60:	4906      	ldr	r1, [pc, #24]	(5c7c <_ZN5RouesC2Ev+0x5c>)
    5c62:	f04f 0204 	mov.w	r2, #4	; 0x4
    5c66:	4b06      	ldr	r3, [pc, #24]	(5c80 <_ZN5RouesC2Ev+0x60>)
    5c68:	f007 fa1a 	bl	d0a0 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    5c6c:	687b      	ldr	r3, [r7, #4]
    5c6e:	4618      	mov	r0, r3
    5c70:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5c74:	46bd      	mov	sp, r7
    5c76:	bd80      	pop	{r7, pc}
    5c78:	40011400 	.word	0x40011400
    5c7c:	40000c00 	.word	0x40000c00
    5c80:	40010800 	.word	0x40010800

00005c84 <_ZN6SensorC2Ev>:
#include "sensor.h"

Sensor::Sensor()
    5c84:	b480      	push	{r7}
    5c86:	b083      	sub	sp, #12
    5c88:	af00      	add	r7, sp, #0
    5c8a:	6078      	str	r0, [r7, #4]
    5c8c:	687a      	ldr	r2, [r7, #4]
    5c8e:	4b04      	ldr	r3, [pc, #16]	(5ca0 <_ZN6SensorC2Ev+0x1c>)
    5c90:	6013      	str	r3, [r2, #0]
{
}
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	4618      	mov	r0, r3
    5c96:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5c9a:	46bd      	mov	sp, r7
    5c9c:	bc80      	pop	{r7}
    5c9e:	4770      	bx	lr
    5ca0:	00021c78 	.word	0x00021c78

00005ca4 <_ZN6SensorC1Ev>:
#include "sensor.h"

Sensor::Sensor()
    5ca4:	b480      	push	{r7}
    5ca6:	b083      	sub	sp, #12
    5ca8:	af00      	add	r7, sp, #0
    5caa:	6078      	str	r0, [r7, #4]
    5cac:	687a      	ldr	r2, [r7, #4]
    5cae:	4b04      	ldr	r3, [pc, #16]	(5cc0 <_ZN6SensorC1Ev+0x1c>)
    5cb0:	6013      	str	r3, [r2, #0]
{
}
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	4618      	mov	r0, r3
    5cb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5cba:	46bd      	mov	sp, r7
    5cbc:	bc80      	pop	{r7}
    5cbe:	4770      	bx	lr
    5cc0:	00021c78 	.word	0x00021c78

00005cc4 <_ZN6SensorD0Ev>:

Sensor::~Sensor()
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b082      	sub	sp, #8
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
    5ccc:	687a      	ldr	r2, [r7, #4]
    5cce:	4b08      	ldr	r3, [pc, #32]	(5cf0 <_ZN6SensorD0Ev+0x2c>)
    5cd0:	6013      	str	r3, [r2, #0]
{
}
    5cd2:	f04f 0301 	mov.w	r3, #1	; 0x1
    5cd6:	b2db      	uxtb	r3, r3
    5cd8:	2b00      	cmp	r3, #0
    5cda:	d002      	beq.n	5ce2 <_ZN6SensorD0Ev+0x1e>
    5cdc:	6878      	ldr	r0, [r7, #4]
    5cde:	f008 fd89 	bl	e7f4 <_ZdlPv>
    5ce2:	687b      	ldr	r3, [r7, #4]
    5ce4:	4618      	mov	r0, r3
    5ce6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5cea:	46bd      	mov	sp, r7
    5cec:	bd80      	pop	{r7, pc}
    5cee:	46c0      	nop			(mov r8, r8)
    5cf0:	00021c78 	.word	0x00021c78

00005cf4 <_ZN6SensorD1Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b082      	sub	sp, #8
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
    5cfc:	687a      	ldr	r2, [r7, #4]
    5cfe:	4b08      	ldr	r3, [pc, #32]	(5d20 <_ZN6SensorD1Ev+0x2c>)
    5d00:	6013      	str	r3, [r2, #0]
{
}
    5d02:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d06:	b2db      	uxtb	r3, r3
    5d08:	2b00      	cmp	r3, #0
    5d0a:	d002      	beq.n	5d12 <_ZN6SensorD1Ev+0x1e>
    5d0c:	6878      	ldr	r0, [r7, #4]
    5d0e:	f008 fd71 	bl	e7f4 <_ZdlPv>
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	4618      	mov	r0, r3
    5d16:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5d1a:	46bd      	mov	sp, r7
    5d1c:	bd80      	pop	{r7, pc}
    5d1e:	46c0      	nop			(mov r8, r8)
    5d20:	00021c78 	.word	0x00021c78

00005d24 <_ZN6SensorD2Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    5d24:	b580      	push	{r7, lr}
    5d26:	b082      	sub	sp, #8
    5d28:	af00      	add	r7, sp, #0
    5d2a:	6078      	str	r0, [r7, #4]
    5d2c:	687a      	ldr	r2, [r7, #4]
    5d2e:	4b08      	ldr	r3, [pc, #32]	(5d50 <_ZN6SensorD2Ev+0x2c>)
    5d30:	6013      	str	r3, [r2, #0]
{
}
    5d32:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d36:	b2db      	uxtb	r3, r3
    5d38:	2b00      	cmp	r3, #0
    5d3a:	d002      	beq.n	5d42 <_ZN6SensorD2Ev+0x1e>
    5d3c:	6878      	ldr	r0, [r7, #4]
    5d3e:	f008 fd59 	bl	e7f4 <_ZdlPv>
    5d42:	687b      	ldr	r3, [r7, #4]
    5d44:	4618      	mov	r0, r3
    5d46:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5d4a:	46bd      	mov	sp, r7
    5d4c:	bd80      	pop	{r7, pc}
    5d4e:	46c0      	nop			(mov r8, r8)
    5d50:	00021c78 	.word	0x00021c78

00005d54 <_ZN7Sensors11sharpDetectEv>:
    }
   // sharpNameVector->resize();
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
    5d54:	b580      	push	{r7, lr}
    5d56:	b086      	sub	sp, #24
    5d58:	af00      	add	r7, sp, #0
    5d5a:	6078      	str	r0, [r7, #4]
{
    for (int i = 0; i< nbSharp; i++)
    5d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d60:	617b      	str	r3, [r7, #20]
    5d62:	e022      	b.n	5daa <_ZN7Sensors11sharpDetectEv+0x56>
    {
        if (sharps[i]->getValue().b == true)
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	685a      	ldr	r2, [r3, #4]
    5d68:	697b      	ldr	r3, [r7, #20]
    5d6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d6e:	4413      	add	r3, r2
    5d70:	681b      	ldr	r3, [r3, #0]
    5d72:	681b      	ldr	r3, [r3, #0]
    5d74:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5d78:	f8d3 c000 	ldr.w	ip, [r3]
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	685a      	ldr	r2, [r3, #4]
    5d80:	697b      	ldr	r3, [r7, #20]
    5d82:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d86:	4413      	add	r3, r2
    5d88:	681a      	ldr	r2, [r3, #0]
    5d8a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5d8e:	4618      	mov	r0, r3
    5d90:	4611      	mov	r1, r2
    5d92:	47e0      	blx	ip
    5d94:	7c3b      	ldrb	r3, [r7, #16]
    5d96:	2b00      	cmp	r3, #0
    5d98:	d003      	beq.n	5da2 <_ZN7Sensors11sharpDetectEv+0x4e>
        {
            return true;
    5d9a:	f04f 0301 	mov.w	r3, #1	; 0x1
    5d9e:	603b      	str	r3, [r7, #0]
    5da0:	e00b      	b.n	5dba <_ZN7Sensors11sharpDetectEv+0x66>
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
{
    for (int i = 0; i< nbSharp; i++)
    5da2:	697b      	ldr	r3, [r7, #20]
    5da4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5da8:	617b      	str	r3, [r7, #20]
    5daa:	687b      	ldr	r3, [r7, #4]
    5dac:	689a      	ldr	r2, [r3, #8]
    5dae:	697b      	ldr	r3, [r7, #20]
    5db0:	429a      	cmp	r2, r3
    5db2:	dcd7      	bgt.n	5d64 <_ZN7Sensors11sharpDetectEv+0x10>
        if (sharps[i]->getValue().b == true)
        {
            return true;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5db4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5db8:	603b      	str	r3, [r7, #0]
    5dba:	683b      	ldr	r3, [r7, #0]
}
    5dbc:	4618      	mov	r0, r3
    5dbe:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5dc2:	46bd      	mov	sp, r7
    5dc4:	bd80      	pop	{r7, pc}
    5dc6:	46c0      	nop			(mov r8, r8)

00005dc8 <_ZN7Sensors10getSensorsEv>:
    return outputSensorVector;
}

#endif

Sensors* Sensors::getSensors()
    5dc8:	b480      	push	{r7}
    5dca:	af00      	add	r7, sp, #0
{
    return Sensors::sensors;
    5dcc:	4b02      	ldr	r3, [pc, #8]	(5dd8 <_ZN7Sensors10getSensorsEv+0x10>)
    5dce:	681b      	ldr	r3, [r3, #0]
}
    5dd0:	4618      	mov	r0, r3
    5dd2:	46bd      	mov	sp, r7
    5dd4:	bc80      	pop	{r7}
    5dd6:	4770      	bx	lr
    5dd8:	20000560 	.word	0x20000560

00005ddc <_ZN7Sensors19getSharpSensorsListEv>:
       sharps[i]->setActif();
    }
}


SharpSensor** Sensors::getSharpSensorsList()
    5ddc:	b480      	push	{r7}
    5dde:	b083      	sub	sp, #12
    5de0:	af00      	add	r7, sp, #0
    5de2:	6078      	str	r0, [r7, #4]
{
    return Sensors::sharps;
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	685b      	ldr	r3, [r3, #4]
}
    5de8:	4618      	mov	r0, r3
    5dea:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5dee:	46bd      	mov	sp, r7
    5df0:	bc80      	pop	{r7}
    5df2:	4770      	bx	lr

00005df4 <_ZN7Sensors14activeAllSharpEv>:
            sharps[i]->unsetActif();
            break;
        }
    }
}
void Sensors::activeAllSharp()
    5df4:	b580      	push	{r7, lr}
    5df6:	b084      	sub	sp, #16
    5df8:	af00      	add	r7, sp, #0
    5dfa:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp;i++)
    5dfc:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e00:	60fb      	str	r3, [r7, #12]
    5e02:	e00d      	b.n	5e20 <_ZN7Sensors14activeAllSharpEv+0x2c>
    {
       sharps[i]->setActif();
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	685a      	ldr	r2, [r3, #4]
    5e08:	68fb      	ldr	r3, [r7, #12]
    5e0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e0e:	4413      	add	r3, r2
    5e10:	681b      	ldr	r3, [r3, #0]
    5e12:	4618      	mov	r0, r3
    5e14:	f007 f9dc 	bl	d1d0 <_ZN11SharpSensor8setActifEv>
        }
    }
}
void Sensors::activeAllSharp()
{
    for (int i=0; i<nbSharp;i++)
    5e18:	68fb      	ldr	r3, [r7, #12]
    5e1a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5e1e:	60fb      	str	r3, [r7, #12]
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	689a      	ldr	r2, [r3, #8]
    5e24:	68fb      	ldr	r3, [r7, #12]
    5e26:	429a      	cmp	r2, r3
    5e28:	dcec      	bgt.n	5e04 <_ZN7Sensors14activeAllSharpEv+0x10>
    {
       sharps[i]->setActif();
    }
}
    5e2a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5e2e:	46bd      	mov	sp, r7
    5e30:	bd80      	pop	{r7, pc}
    5e32:	46c0      	nop			(mov r8, r8)

00005e34 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE>:
    }
    return false;
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
    5e34:	b580      	push	{r7, lr}
    5e36:	b084      	sub	sp, #16
    5e38:	af00      	add	r7, sp, #0
    5e3a:	6078      	str	r0, [r7, #4]
    5e3c:	460b      	mov	r3, r1
    5e3e:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5e40:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e44:	60fb      	str	r3, [r7, #12]
    5e46:	e022      	b.n	5e8e <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	685a      	ldr	r2, [r3, #4]
    5e4c:	68fb      	ldr	r3, [r7, #12]
    5e4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e52:	4413      	add	r3, r2
    5e54:	681b      	ldr	r3, [r3, #0]
    5e56:	4618      	mov	r0, r3
    5e58:	f007 f9ae 	bl	d1b8 <_ZN11SharpSensor7getNameEv>
    5e5c:	4603      	mov	r3, r0
    5e5e:	461a      	mov	r2, r3
    5e60:	78fb      	ldrb	r3, [r7, #3]
    5e62:	4293      	cmp	r3, r2
    5e64:	bf14      	ite	ne
    5e66:	2300      	movne	r3, #0
    5e68:	2301      	moveq	r3, #1
    5e6a:	b2db      	uxtb	r3, r3
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d00a      	beq.n	5e86 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->setActif();
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	685a      	ldr	r2, [r3, #4]
    5e74:	68fb      	ldr	r3, [r7, #12]
    5e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e7a:	4413      	add	r3, r2
    5e7c:	681b      	ldr	r3, [r3, #0]
    5e7e:	4618      	mov	r0, r3
    5e80:	f007 f9a6 	bl	d1d0 <_ZN11SharpSensor8setActifEv>
    5e84:	e008      	b.n	5e98 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x64>
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5e86:	68fb      	ldr	r3, [r7, #12]
    5e88:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5e8c:	60fb      	str	r3, [r7, #12]
    5e8e:	687b      	ldr	r3, [r7, #4]
    5e90:	689a      	ldr	r2, [r3, #8]
    5e92:	68fb      	ldr	r3, [r7, #12]
    5e94:	429a      	cmp	r2, r3
    5e96:	dcd7      	bgt.n	5e48 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->setActif();
            break;
        }
    }
}
    5e98:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5e9c:	46bd      	mov	sp, r7
    5e9e:	bd80      	pop	{r7, pc}

00005ea0 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE>:
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
    5ea0:	b580      	push	{r7, lr}
    5ea2:	b088      	sub	sp, #32
    5ea4:	af00      	add	r7, sp, #0
    5ea6:	60f8      	str	r0, [r7, #12]
    5ea8:	460b      	mov	r3, r1
    5eaa:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i< nbSharp; i++)
    5eac:	f04f 0300 	mov.w	r3, #0	; 0x0
    5eb0:	61fb      	str	r3, [r7, #28]
    5eb2:	e032      	b.n	5f1a <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x7a>
    {
        if (sharps[i]->getName() == name)
    5eb4:	68fb      	ldr	r3, [r7, #12]
    5eb6:	685a      	ldr	r2, [r3, #4]
    5eb8:	69fb      	ldr	r3, [r7, #28]
    5eba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ebe:	4413      	add	r3, r2
    5ec0:	681b      	ldr	r3, [r3, #0]
    5ec2:	4618      	mov	r0, r3
    5ec4:	f007 f978 	bl	d1b8 <_ZN11SharpSensor7getNameEv>
    5ec8:	4603      	mov	r3, r0
    5eca:	461a      	mov	r2, r3
    5ecc:	7afb      	ldrb	r3, [r7, #11]
    5ece:	4293      	cmp	r3, r2
    5ed0:	bf14      	ite	ne
    5ed2:	2300      	movne	r3, #0
    5ed4:	2301      	moveq	r3, #1
    5ed6:	b2db      	uxtb	r3, r3
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d01a      	beq.n	5f12 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x72>
            return sharps[i]->getValue().b;
    5edc:	68fb      	ldr	r3, [r7, #12]
    5ede:	685a      	ldr	r2, [r3, #4]
    5ee0:	69fb      	ldr	r3, [r7, #28]
    5ee2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ee6:	4413      	add	r3, r2
    5ee8:	681b      	ldr	r3, [r3, #0]
    5eea:	681b      	ldr	r3, [r3, #0]
    5eec:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ef0:	f8d3 c000 	ldr.w	ip, [r3]
    5ef4:	68fb      	ldr	r3, [r7, #12]
    5ef6:	685a      	ldr	r2, [r3, #4]
    5ef8:	69fb      	ldr	r3, [r7, #28]
    5efa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5efe:	4413      	add	r3, r2
    5f00:	681a      	ldr	r2, [r3, #0]
    5f02:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5f06:	4618      	mov	r0, r3
    5f08:	4611      	mov	r1, r2
    5f0a:	47e0      	blx	ip
    5f0c:	7e3b      	ldrb	r3, [r7, #24]
    5f0e:	607b      	str	r3, [r7, #4]
    5f10:	e00b      	b.n	5f2a <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x8a>
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i< nbSharp; i++)
    5f12:	69fb      	ldr	r3, [r7, #28]
    5f14:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5f18:	61fb      	str	r3, [r7, #28]
    5f1a:	68fb      	ldr	r3, [r7, #12]
    5f1c:	689a      	ldr	r2, [r3, #8]
    5f1e:	69fb      	ldr	r3, [r7, #28]
    5f20:	429a      	cmp	r2, r3
    5f22:	dcc7      	bgt.n	5eb4 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x14>
    {
        if (sharps[i]->getName() == name)
            return sharps[i]->getValue().b;
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5f24:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f28:	607b      	str	r3, [r7, #4]
    5f2a:	687b      	ldr	r3, [r7, #4]
}
    5f2c:	4618      	mov	r0, r3
    5f2e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5f32:	46bd      	mov	sp, r7
    5f34:	bd80      	pop	{r7, pc}
    5f36:	46c0      	nop			(mov r8, r8)

00005f38 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE>:
            break;
        }
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
    5f38:	b580      	push	{r7, lr}
    5f3a:	b084      	sub	sp, #16
    5f3c:	af00      	add	r7, sp, #0
    5f3e:	6078      	str	r0, [r7, #4]
    5f40:	460b      	mov	r3, r1
    5f42:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5f44:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f48:	60fb      	str	r3, [r7, #12]
    5f4a:	e022      	b.n	5f92 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5f4c:	687b      	ldr	r3, [r7, #4]
    5f4e:	685a      	ldr	r2, [r3, #4]
    5f50:	68fb      	ldr	r3, [r7, #12]
    5f52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f56:	4413      	add	r3, r2
    5f58:	681b      	ldr	r3, [r3, #0]
    5f5a:	4618      	mov	r0, r3
    5f5c:	f007 f92c 	bl	d1b8 <_ZN11SharpSensor7getNameEv>
    5f60:	4603      	mov	r3, r0
    5f62:	461a      	mov	r2, r3
    5f64:	78fb      	ldrb	r3, [r7, #3]
    5f66:	4293      	cmp	r3, r2
    5f68:	bf14      	ite	ne
    5f6a:	2300      	movne	r3, #0
    5f6c:	2301      	moveq	r3, #1
    5f6e:	b2db      	uxtb	r3, r3
    5f70:	2b00      	cmp	r3, #0
    5f72:	d00a      	beq.n	5f8a <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->unsetActif();
    5f74:	687b      	ldr	r3, [r7, #4]
    5f76:	685a      	ldr	r2, [r3, #4]
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f7e:	4413      	add	r3, r2
    5f80:	681b      	ldr	r3, [r3, #0]
    5f82:	4618      	mov	r0, r3
    5f84:	f007 f932 	bl	d1ec <_ZN11SharpSensor10unsetActifEv>
    5f88:	e008      	b.n	5f9c <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x64>
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5f8a:	68fb      	ldr	r3, [r7, #12]
    5f8c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5f90:	60fb      	str	r3, [r7, #12]
    5f92:	687b      	ldr	r3, [r7, #4]
    5f94:	689a      	ldr	r2, [r3, #8]
    5f96:	68fb      	ldr	r3, [r7, #12]
    5f98:	429a      	cmp	r2, r3
    5f9a:	dcd7      	bgt.n	5f4c <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->unsetActif();
            break;
        }
    }
}
    5f9c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5fa0:	46bd      	mov	sp, r7
    5fa2:	bd80      	pop	{r7, pc}

00005fa4 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE>:
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
    5fa4:	b580      	push	{r7, lr}
    5fa6:	b088      	sub	sp, #32
    5fa8:	af00      	add	r7, sp, #0
    5faa:	60f8      	str	r0, [r7, #12]
    5fac:	460b      	mov	r3, r1
    5fae:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5fb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    5fb4:	61fb      	str	r3, [r7, #28]
    5fb6:	e032      	b.n	601e <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x7a>
    {
        if (limitSwitchs[i]->getName() == limitSwitchName)
    5fb8:	68fb      	ldr	r3, [r7, #12]
    5fba:	69da      	ldr	r2, [r3, #28]
    5fbc:	69fb      	ldr	r3, [r7, #28]
    5fbe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5fc2:	4413      	add	r3, r2
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	4618      	mov	r0, r3
    5fc8:	f006 faae 	bl	c528 <_ZN17LimitSwitchSensor7getNameEv>
    5fcc:	4603      	mov	r3, r0
    5fce:	461a      	mov	r2, r3
    5fd0:	7afb      	ldrb	r3, [r7, #11]
    5fd2:	4293      	cmp	r3, r2
    5fd4:	bf14      	ite	ne
    5fd6:	2300      	movne	r3, #0
    5fd8:	2301      	moveq	r3, #1
    5fda:	b2db      	uxtb	r3, r3
    5fdc:	2b00      	cmp	r3, #0
    5fde:	d01a      	beq.n	6016 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x72>
        {
            return limitSwitchs[i]->getValue().b;
    5fe0:	68fb      	ldr	r3, [r7, #12]
    5fe2:	69da      	ldr	r2, [r3, #28]
    5fe4:	69fb      	ldr	r3, [r7, #28]
    5fe6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5fea:	4413      	add	r3, r2
    5fec:	681b      	ldr	r3, [r3, #0]
    5fee:	681b      	ldr	r3, [r3, #0]
    5ff0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ff4:	f8d3 c000 	ldr.w	ip, [r3]
    5ff8:	68fb      	ldr	r3, [r7, #12]
    5ffa:	69da      	ldr	r2, [r3, #28]
    5ffc:	69fb      	ldr	r3, [r7, #28]
    5ffe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6002:	4413      	add	r3, r2
    6004:	681a      	ldr	r2, [r3, #0]
    6006:	f107 0310 	add.w	r3, r7, #16	; 0x10
    600a:	4618      	mov	r0, r3
    600c:	4611      	mov	r1, r2
    600e:	47e0      	blx	ip
    6010:	7e3b      	ldrb	r3, [r7, #24]
    6012:	607b      	str	r3, [r7, #4]
    6014:	e00b      	b.n	602e <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x8a>
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
{
    for (int i = 0; i<nbLimitSwitch; i++)
    6016:	69fb      	ldr	r3, [r7, #28]
    6018:	f103 0301 	add.w	r3, r3, #1	; 0x1
    601c:	61fb      	str	r3, [r7, #28]
    601e:	68fb      	ldr	r3, [r7, #12]
    6020:	6a1a      	ldr	r2, [r3, #32]
    6022:	69fb      	ldr	r3, [r7, #28]
    6024:	429a      	cmp	r2, r3
    6026:	dcc7      	bgt.n	5fb8 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x14>
        if (limitSwitchs[i]->getName() == limitSwitchName)
        {
            return limitSwitchs[i]->getValue().b;
        }
    }
    return false;
    6028:	f04f 0300 	mov.w	r3, #0	; 0x0
    602c:	607b      	str	r3, [r7, #4]
    602e:	687b      	ldr	r3, [r7, #4]
}
    6030:	4618      	mov	r0, r3
    6032:	f107 0720 	add.w	r7, r7, #32	; 0x20
    6036:	46bd      	mov	sp, r7
    6038:	bd80      	pop	{r7, pc}
    603a:	46c0      	nop			(mov r8, r8)

0000603c <_ZN7Sensors6updateEv>:
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#endif

void Sensors::update()
    603c:	b580      	push	{r7, lr}
    603e:	b086      	sub	sp, #24
    6040:	af00      	add	r7, sp, #0
    6042:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp; i++)
    6044:	f04f 0300 	mov.w	r3, #0	; 0x0
    6048:	60fb      	str	r3, [r7, #12]
    604a:	e00d      	b.n	6068 <_ZN7Sensors6updateEv+0x2c>
    {
        sharps[i]->updateValue();
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	685a      	ldr	r2, [r3, #4]
    6050:	68fb      	ldr	r3, [r7, #12]
    6052:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6056:	4413      	add	r3, r2
    6058:	681b      	ldr	r3, [r3, #0]
    605a:	4618      	mov	r0, r3
    605c:	f007 f8d4 	bl	d208 <_ZN11SharpSensor11updateValueEv>

#endif

void Sensors::update()
{
    for (int i=0; i<nbSharp; i++)
    6060:	68fb      	ldr	r3, [r7, #12]
    6062:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6066:	60fb      	str	r3, [r7, #12]
    6068:	687b      	ldr	r3, [r7, #4]
    606a:	689a      	ldr	r2, [r3, #8]
    606c:	68fb      	ldr	r3, [r7, #12]
    606e:	429a      	cmp	r2, r3
    6070:	dcec      	bgt.n	604c <_ZN7Sensors6updateEv+0x10>
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    6072:	f04f 0300 	mov.w	r3, #0	; 0x0
    6076:	613b      	str	r3, [r7, #16]
    6078:	e00d      	b.n	6096 <_ZN7Sensors6updateEv+0x5a>
    {
        ligthBarriers[i]->updateValue();
    607a:	687b      	ldr	r3, [r7, #4]
    607c:	695a      	ldr	r2, [r3, #20]
    607e:	693b      	ldr	r3, [r7, #16]
    6080:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6084:	4413      	add	r3, r2
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	4618      	mov	r0, r3
    608a:	f006 f92f 	bl	c2ec <_ZN18LigthBarrierSensor11updateValueEv>
    for (int i=0; i<nbSharp; i++)
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    608e:	693b      	ldr	r3, [r7, #16]
    6090:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6094:	613b      	str	r3, [r7, #16]
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	699a      	ldr	r2, [r3, #24]
    609a:	693b      	ldr	r3, [r7, #16]
    609c:	429a      	cmp	r2, r3
    609e:	dcec      	bgt.n	607a <_ZN7Sensors6updateEv+0x3e>
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    60a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    60a4:	617b      	str	r3, [r7, #20]
    60a6:	e00d      	b.n	60c4 <_ZN7Sensors6updateEv+0x88>
    {
        limitSwitchs[i]->updateValue();
    60a8:	687b      	ldr	r3, [r7, #4]
    60aa:	69da      	ldr	r2, [r3, #28]
    60ac:	697b      	ldr	r3, [r7, #20]
    60ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60b2:	4413      	add	r3, r2
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	4618      	mov	r0, r3
    60b8:	f006 fa42 	bl	c540 <_ZN17LimitSwitchSensor11updateValueEv>
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    60bc:	697b      	ldr	r3, [r7, #20]
    60be:	f103 0301 	add.w	r3, r3, #1	; 0x1
    60c2:	617b      	str	r3, [r7, #20]
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	6a1a      	ldr	r2, [r3, #32]
    60c8:	697b      	ldr	r3, [r7, #20]
    60ca:	429a      	cmp	r2, r3
    60cc:	dcec      	bgt.n	60a8 <_ZN7Sensors6updateEv+0x6c>
    {
        limitSwitchs[i]->updateValue();
    }
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}
    60ce:	f107 0718 	add.w	r7, r7, #24	; 0x18
    60d2:	46bd      	mov	sp, r7
    60d4:	bd80      	pop	{r7, pc}
    60d6:	46c0      	nop			(mov r8, r8)

000060d8 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE>:
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
    60d8:	b580      	push	{r7, lr}
    60da:	b088      	sub	sp, #32
    60dc:	af00      	add	r7, sp, #0
    60de:	60f8      	str	r0, [r7, #12]
    60e0:	460b      	mov	r3, r1
    60e2:	72fb      	strb	r3, [r7, #11]
{
    for (int i=0; i<nbLigthBarrier; i++)
    60e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    60e8:	61fb      	str	r3, [r7, #28]
    60ea:	e032      	b.n	6152 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x7a>
    {
        if(ligthBarriers[i]->getName() == name)
    60ec:	68fb      	ldr	r3, [r7, #12]
    60ee:	695a      	ldr	r2, [r3, #20]
    60f0:	69fb      	ldr	r3, [r7, #28]
    60f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60f6:	4413      	add	r3, r2
    60f8:	681b      	ldr	r3, [r3, #0]
    60fa:	4618      	mov	r0, r3
    60fc:	f006 f8ea 	bl	c2d4 <_ZN18LigthBarrierSensor7getNameEv>
    6100:	4603      	mov	r3, r0
    6102:	461a      	mov	r2, r3
    6104:	7afb      	ldrb	r3, [r7, #11]
    6106:	4293      	cmp	r3, r2
    6108:	bf14      	ite	ne
    610a:	2300      	movne	r3, #0
    610c:	2301      	moveq	r3, #1
    610e:	b2db      	uxtb	r3, r3
    6110:	2b00      	cmp	r3, #0
    6112:	d01a      	beq.n	614a <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x72>
        {
            return ligthBarriers[i]->getValue().b;
    6114:	68fb      	ldr	r3, [r7, #12]
    6116:	695a      	ldr	r2, [r3, #20]
    6118:	69fb      	ldr	r3, [r7, #28]
    611a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    611e:	4413      	add	r3, r2
    6120:	681b      	ldr	r3, [r3, #0]
    6122:	681b      	ldr	r3, [r3, #0]
    6124:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6128:	f8d3 c000 	ldr.w	ip, [r3]
    612c:	68fb      	ldr	r3, [r7, #12]
    612e:	695a      	ldr	r2, [r3, #20]
    6130:	69fb      	ldr	r3, [r7, #28]
    6132:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6136:	4413      	add	r3, r2
    6138:	681a      	ldr	r2, [r3, #0]
    613a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    613e:	4618      	mov	r0, r3
    6140:	4611      	mov	r1, r2
    6142:	47e0      	blx	ip
    6144:	7e3b      	ldrb	r3, [r7, #24]
    6146:	607b      	str	r3, [r7, #4]
    6148:	e00b      	b.n	6162 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x8a>
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
{
    for (int i=0; i<nbLigthBarrier; i++)
    614a:	69fb      	ldr	r3, [r7, #28]
    614c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6150:	61fb      	str	r3, [r7, #28]
    6152:	68fb      	ldr	r3, [r7, #12]
    6154:	699a      	ldr	r2, [r3, #24]
    6156:	69fb      	ldr	r3, [r7, #28]
    6158:	429a      	cmp	r2, r3
    615a:	dcc7      	bgt.n	60ec <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x14>
        if(ligthBarriers[i]->getName() == name)
        {
            return ligthBarriers[i]->getValue().b;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    615c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6160:	607b      	str	r3, [r7, #4]
    6162:	687b      	ldr	r3, [r7, #4]
}
    6164:	4618      	mov	r0, r3
    6166:	f107 0720 	add.w	r7, r7, #32	; 0x20
    616a:	46bd      	mov	sp, r7
    616c:	bd80      	pop	{r7, pc}
    616e:	46c0      	nop			(mov r8, r8)

00006170 <_ZN7Sensors20detectedLigthBarrierEv>:
    }
    return -1;
}

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
    6170:	b590      	push	{r4, r7, lr}
    6172:	b089      	sub	sp, #36
    6174:	af00      	add	r7, sp, #0
    6176:	6078      	str	r0, [r7, #4]
{
    ligthBarrierNameVector->reset();
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	6adb      	ldr	r3, [r3, #44]
    617c:	4618      	mov	r0, r3
    617e:	f016 f8d5 	bl	1c32c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>
    for (int i=0; i<nbLigthBarrier; i++)
    6182:	f04f 0300 	mov.w	r3, #0	; 0x0
    6186:	61fb      	str	r3, [r7, #28]
    6188:	e032      	b.n	61f0 <_ZN7Sensors20detectedLigthBarrierEv+0x80>
    {
        if(ligthBarriers[i]->getValue().b)
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	695a      	ldr	r2, [r3, #20]
    618e:	69fb      	ldr	r3, [r7, #28]
    6190:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6194:	4413      	add	r3, r2
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	681b      	ldr	r3, [r3, #0]
    619a:	f103 0308 	add.w	r3, r3, #8	; 0x8
    619e:	f8d3 c000 	ldr.w	ip, [r3]
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	695a      	ldr	r2, [r3, #20]
    61a6:	69fb      	ldr	r3, [r7, #28]
    61a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61ac:	4413      	add	r3, r2
    61ae:	681a      	ldr	r2, [r3, #0]
    61b0:	f107 030c 	add.w	r3, r7, #12	; 0xc
    61b4:	4618      	mov	r0, r3
    61b6:	4611      	mov	r1, r2
    61b8:	47e0      	blx	ip
    61ba:	7d3b      	ldrb	r3, [r7, #20]
    61bc:	2b00      	cmp	r3, #0
    61be:	d013      	beq.n	61e8 <_ZN7Sensors20detectedLigthBarrierEv+0x78>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	6adc      	ldr	r4, [r3, #44]
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	695a      	ldr	r2, [r3, #20]
    61c8:	69fb      	ldr	r3, [r7, #28]
    61ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61ce:	4413      	add	r3, r2
    61d0:	681b      	ldr	r3, [r3, #0]
    61d2:	4618      	mov	r0, r3
    61d4:	f006 f87e 	bl	c2d4 <_ZN18LigthBarrierSensor7getNameEv>
    61d8:	4603      	mov	r3, r0
    61da:	76fb      	strb	r3, [r7, #27]
    61dc:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    61e0:	4620      	mov	r0, r4
    61e2:	4619      	mov	r1, r3
    61e4:	f016 f916 	bl	1c414 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
{
    ligthBarrierNameVector->reset();
    for (int i=0; i<nbLigthBarrier; i++)
    61e8:	69fb      	ldr	r3, [r7, #28]
    61ea:	f103 0301 	add.w	r3, r3, #1	; 0x1
    61ee:	61fb      	str	r3, [r7, #28]
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	699a      	ldr	r2, [r3, #24]
    61f4:	69fb      	ldr	r3, [r7, #28]
    61f6:	429a      	cmp	r2, r3
    61f8:	dcc7      	bgt.n	618a <_ZN7Sensors20detectedLigthBarrierEv+0x1a>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
        }
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
    61fa:	687b      	ldr	r3, [r7, #4]
    61fc:	6adb      	ldr	r3, [r3, #44]
}
    61fe:	4618      	mov	r0, r3
    6200:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6204:	46bd      	mov	sp, r7
    6206:	bd90      	pop	{r4, r7, pc}

00006208 <_ZN7Sensors18getValueUltrasoundEt>:
    return Sensors::sensors;
}



Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
    6208:	b590      	push	{r4, r7, lr}
    620a:	b087      	sub	sp, #28
    620c:	af00      	add	r7, sp, #0
    620e:	6078      	str	r0, [r7, #4]
    6210:	460b      	mov	r3, r1
    6212:	807b      	strh	r3, [r7, #2]
{
    outputSensorVector->reset();
    6214:	687b      	ldr	r3, [r7, #4]
    6216:	6b1b      	ldr	r3, [r3, #48]
    6218:	4618      	mov	r0, r3
    621a:	f016 f879 	bl	1c310 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    621e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6222:	617b      	str	r3, [r7, #20]
    6224:	e030      	b.n	6288 <_ZN7Sensors18getValueUltrasoundEt+0x80>
    {
        Sensor::OutputSensor v = ultrasounds[i]->getValue();
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	68da      	ldr	r2, [r3, #12]
    622a:	697b      	ldr	r3, [r7, #20]
    622c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6230:	4413      	add	r3, r2
    6232:	681b      	ldr	r3, [r3, #0]
    6234:	681b      	ldr	r3, [r3, #0]
    6236:	f103 0308 	add.w	r3, r3, #8	; 0x8
    623a:	f8d3 c000 	ldr.w	ip, [r3]
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	68da      	ldr	r2, [r3, #12]
    6242:	697b      	ldr	r3, [r7, #20]
    6244:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6248:	4413      	add	r3, r2
    624a:	681a      	ldr	r2, [r3, #0]
    624c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    6250:	4618      	mov	r0, r3
    6252:	4611      	mov	r1, r2
    6254:	47e0      	blx	ip
         if (v.f < distance)
    6256:	68fc      	ldr	r4, [r7, #12]
    6258:	887b      	ldrh	r3, [r7, #2]
    625a:	4618      	mov	r0, r3
    625c:	f014 fdb6 	bl	1adcc <__aeabi_i2f>
    6260:	4603      	mov	r3, r0
    6262:	4620      	mov	r0, r4
    6264:	4619      	mov	r1, r3
    6266:	f014 ffa1 	bl	1b1ac <__aeabi_fcmplt>
    626a:	4603      	mov	r3, r0
    626c:	2b00      	cmp	r3, #0
    626e:	d007      	beq.n	6280 <_ZN7Sensors18getValueUltrasoundEt+0x78>
         {
             outputSensorVector->push_back(v);
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	6b1b      	ldr	r3, [r3, #48]
    6274:	f107 0208 	add.w	r2, r7, #8	; 0x8
    6278:	4618      	mov	r0, r3
    627a:	4611      	mov	r1, r2
    627c:	f016 f926 	bl	1c4cc <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    6280:	697b      	ldr	r3, [r7, #20]
    6282:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6286:	617b      	str	r3, [r7, #20]
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	691a      	ldr	r2, [r3, #16]
    628c:	697b      	ldr	r3, [r7, #20]
    628e:	429a      	cmp	r2, r3
    6290:	dcc9      	bgt.n	6226 <_ZN7Sensors18getValueUltrasoundEt+0x1e>
         {
             outputSensorVector->push_back(v);
         }
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    6292:	687b      	ldr	r3, [r7, #4]
    6294:	6b1b      	ldr	r3, [r3, #48]
}
    6296:	4618      	mov	r0, r3
    6298:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    629c:	46bd      	mov	sp, r7
    629e:	bd90      	pop	{r4, r7, pc}

000062a0 <_ZN7Sensors18getValueUltrasoundEv>:
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
}


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
    62a0:	b590      	push	{r4, r7, lr}
    62a2:	b087      	sub	sp, #28
    62a4:	af00      	add	r7, sp, #0
    62a6:	6078      	str	r0, [r7, #4]
{
    outputSensorVector->reset();
    62a8:	687b      	ldr	r3, [r7, #4]
    62aa:	6b1b      	ldr	r3, [r3, #48]
    62ac:	4618      	mov	r0, r3
    62ae:	f016 f82f 	bl	1c310 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    62b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    62b6:	617b      	str	r3, [r7, #20]
    62b8:	e023      	b.n	6302 <_ZN7Sensors18getValueUltrasoundEv+0x62>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    62ba:	687b      	ldr	r3, [r7, #4]
    62bc:	6b1c      	ldr	r4, [r3, #48]
    62be:	687b      	ldr	r3, [r7, #4]
    62c0:	68da      	ldr	r2, [r3, #12]
    62c2:	697b      	ldr	r3, [r7, #20]
    62c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62c8:	4413      	add	r3, r2
    62ca:	681b      	ldr	r3, [r3, #0]
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	f103 0308 	add.w	r3, r3, #8	; 0x8
    62d2:	f8d3 c000 	ldr.w	ip, [r3]
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	68da      	ldr	r2, [r3, #12]
    62da:	697b      	ldr	r3, [r7, #20]
    62dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62e0:	4413      	add	r3, r2
    62e2:	681a      	ldr	r2, [r3, #0]
    62e4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    62e8:	4618      	mov	r0, r3
    62ea:	4611      	mov	r1, r2
    62ec:	47e0      	blx	ip
    62ee:	f107 0308 	add.w	r3, r7, #8	; 0x8
    62f2:	4620      	mov	r0, r4
    62f4:	4619      	mov	r1, r3
    62f6:	f016 f8e9 	bl	1c4cc <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    62fa:	697b      	ldr	r3, [r7, #20]
    62fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6300:	617b      	str	r3, [r7, #20]
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	691a      	ldr	r2, [r3, #16]
    6306:	697b      	ldr	r3, [r7, #20]
    6308:	429a      	cmp	r2, r3
    630a:	dcd6      	bgt.n	62ba <_ZN7Sensors18getValueUltrasoundEv+0x1a>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    630c:	687b      	ldr	r3, [r7, #4]
    630e:	6b1b      	ldr	r3, [r3, #48]
}
    6310:	4618      	mov	r0, r3
    6312:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    6316:	46bd      	mov	sp, r7
    6318:	bd90      	pop	{r4, r7, pc}
    631a:	46c0      	nop			(mov r8, r8)

0000631c <_ZN7Sensors19detectedLimitSwitchEv>:
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
    631c:	b590      	push	{r4, r7, lr}
    631e:	b089      	sub	sp, #36
    6320:	af00      	add	r7, sp, #0
    6322:	6078      	str	r0, [r7, #4]
{
    limitSwitchNameVector->reset();
    6324:	687b      	ldr	r3, [r7, #4]
    6326:	6a9b      	ldr	r3, [r3, #40]
    6328:	4618      	mov	r0, r3
    632a:	f015 ffe3 	bl	1c2f4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>
    for (int i = 0; i<nbLimitSwitch; i++)
    632e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6332:	61fb      	str	r3, [r7, #28]
    6334:	e032      	b.n	639c <_ZN7Sensors19detectedLimitSwitchEv+0x80>
    {
        if (limitSwitchs[i]->getValue().b)
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	69da      	ldr	r2, [r3, #28]
    633a:	69fb      	ldr	r3, [r7, #28]
    633c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6340:	4413      	add	r3, r2
    6342:	681b      	ldr	r3, [r3, #0]
    6344:	681b      	ldr	r3, [r3, #0]
    6346:	f103 0308 	add.w	r3, r3, #8	; 0x8
    634a:	f8d3 c000 	ldr.w	ip, [r3]
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	69da      	ldr	r2, [r3, #28]
    6352:	69fb      	ldr	r3, [r7, #28]
    6354:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6358:	4413      	add	r3, r2
    635a:	681a      	ldr	r2, [r3, #0]
    635c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6360:	4618      	mov	r0, r3
    6362:	4611      	mov	r1, r2
    6364:	47e0      	blx	ip
    6366:	7d3b      	ldrb	r3, [r7, #20]
    6368:	2b00      	cmp	r3, #0
    636a:	d013      	beq.n	6394 <_ZN7Sensors19detectedLimitSwitchEv+0x78>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
    636c:	687b      	ldr	r3, [r7, #4]
    636e:	6a9c      	ldr	r4, [r3, #40]
    6370:	687b      	ldr	r3, [r7, #4]
    6372:	69da      	ldr	r2, [r3, #28]
    6374:	69fb      	ldr	r3, [r7, #28]
    6376:	ea4f 0383 	mov.w	r3, r3, lsl #2
    637a:	4413      	add	r3, r2
    637c:	681b      	ldr	r3, [r3, #0]
    637e:	4618      	mov	r0, r3
    6380:	f006 f8d2 	bl	c528 <_ZN17LimitSwitchSensor7getNameEv>
    6384:	4603      	mov	r3, r0
    6386:	76fb      	strb	r3, [r7, #27]
    6388:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    638c:	4620      	mov	r0, r4
    638e:	4619      	mov	r1, r3
    6390:	f016 f920 	bl	1c5d4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
{
    limitSwitchNameVector->reset();
    for (int i = 0; i<nbLimitSwitch; i++)
    6394:	69fb      	ldr	r3, [r7, #28]
    6396:	f103 0301 	add.w	r3, r3, #1	; 0x1
    639a:	61fb      	str	r3, [r7, #28]
    639c:	687b      	ldr	r3, [r7, #4]
    639e:	6a1a      	ldr	r2, [r3, #32]
    63a0:	69fb      	ldr	r3, [r7, #28]
    63a2:	429a      	cmp	r2, r3
    63a4:	dcc7      	bgt.n	6336 <_ZN7Sensors19detectedLimitSwitchEv+0x1a>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
        }
    }
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
    63a6:	687b      	ldr	r3, [r7, #4]
    63a8:	6a9b      	ldr	r3, [r3, #40]
}
    63aa:	4618      	mov	r0, r3
    63ac:	f107 0724 	add.w	r7, r7, #36	; 0x24
    63b0:	46bd      	mov	sp, r7
    63b2:	bd90      	pop	{r4, r7, pc}

000063b4 <_ZN7Sensors13detectedSharpEv>:
    #endif
    if (outputSensorVector)
        delete outputSensorVector;
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
    63b4:	b590      	push	{r4, r7, lr}
    63b6:	b089      	sub	sp, #36
    63b8:	af00      	add	r7, sp, #0
    63ba:	6078      	str	r0, [r7, #4]
{
    sharpNameVector->reset();
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	6a5b      	ldr	r3, [r3, #36]
    63c0:	4618      	mov	r0, r3
    63c2:	f015 ff89 	bl	1c2d8 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>
    for (int i = 0; i< nbSharp; i++)
    63c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    63ca:	61fb      	str	r3, [r7, #28]
    63cc:	e032      	b.n	6434 <_ZN7Sensors13detectedSharpEv+0x80>
    {
       if (sharps[i]->getValue().b)
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	685a      	ldr	r2, [r3, #4]
    63d2:	69fb      	ldr	r3, [r7, #28]
    63d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63d8:	4413      	add	r3, r2
    63da:	681b      	ldr	r3, [r3, #0]
    63dc:	681b      	ldr	r3, [r3, #0]
    63de:	f103 0308 	add.w	r3, r3, #8	; 0x8
    63e2:	f8d3 c000 	ldr.w	ip, [r3]
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	685a      	ldr	r2, [r3, #4]
    63ea:	69fb      	ldr	r3, [r7, #28]
    63ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63f0:	4413      	add	r3, r2
    63f2:	681a      	ldr	r2, [r3, #0]
    63f4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    63f8:	4618      	mov	r0, r3
    63fa:	4611      	mov	r1, r2
    63fc:	47e0      	blx	ip
    63fe:	7d3b      	ldrb	r3, [r7, #20]
    6400:	2b00      	cmp	r3, #0
    6402:	d013      	beq.n	642c <_ZN7Sensors13detectedSharpEv+0x78>
       {
            sharpNameVector->push_back(sharps[i]->getName());
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	6a5c      	ldr	r4, [r3, #36]
    6408:	687b      	ldr	r3, [r7, #4]
    640a:	685a      	ldr	r2, [r3, #4]
    640c:	69fb      	ldr	r3, [r7, #28]
    640e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6412:	4413      	add	r3, r2
    6414:	681b      	ldr	r3, [r3, #0]
    6416:	4618      	mov	r0, r3
    6418:	f006 fece 	bl	d1b8 <_ZN11SharpSensor7getNameEv>
    641c:	4603      	mov	r3, r0
    641e:	76fb      	strb	r3, [r7, #27]
    6420:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    6424:	4620      	mov	r0, r4
    6426:	4619      	mov	r1, r3
    6428:	f016 f930 	bl	1c68c <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
{
    sharpNameVector->reset();
    for (int i = 0; i< nbSharp; i++)
    642c:	69fb      	ldr	r3, [r7, #28]
    642e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6432:	61fb      	str	r3, [r7, #28]
    6434:	687b      	ldr	r3, [r7, #4]
    6436:	689a      	ldr	r2, [r3, #8]
    6438:	69fb      	ldr	r3, [r7, #28]
    643a:	429a      	cmp	r2, r3
    643c:	dcc7      	bgt.n	63ce <_ZN7Sensors13detectedSharpEv+0x1a>
       {
            sharpNameVector->push_back(sharps[i]->getName());
       }
    }
   // sharpNameVector->resize();
    return sharpNameVector;
    643e:	687b      	ldr	r3, [r7, #4]
    6440:	6a5b      	ldr	r3, [r3, #36]
}
    6442:	4618      	mov	r0, r3
    6444:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6448:	46bd      	mov	sp, r7
    644a:	bd90      	pop	{r4, r7, pc}

0000644c <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE>:
//    outputSensorVector->resize();
    return outputSensorVector;
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
    644c:	b580      	push	{r7, lr}
    644e:	b08c      	sub	sp, #48
    6450:	af00      	add	r7, sp, #0
    6452:	60f8      	str	r0, [r7, #12]
    6454:	460b      	mov	r3, r1
    6456:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i < nbUltrasound; i++)
    6458:	f04f 0300 	mov.w	r3, #0	; 0x0
    645c:	62fb      	str	r3, [r7, #44]
    645e:	e04a      	b.n	64f6 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xaa>
    {
        ultrasounds[i]->getValue();
    6460:	68fb      	ldr	r3, [r7, #12]
    6462:	68da      	ldr	r2, [r3, #12]
    6464:	6afb      	ldr	r3, [r7, #44]
    6466:	ea4f 0383 	mov.w	r3, r3, lsl #2
    646a:	4413      	add	r3, r2
    646c:	681b      	ldr	r3, [r3, #0]
    646e:	681b      	ldr	r3, [r3, #0]
    6470:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6474:	f8d3 c000 	ldr.w	ip, [r3]
    6478:	68fb      	ldr	r3, [r7, #12]
    647a:	68da      	ldr	r2, [r3, #12]
    647c:	6afb      	ldr	r3, [r7, #44]
    647e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6482:	4413      	add	r3, r2
    6484:	681a      	ldr	r2, [r3, #0]
    6486:	f107 0314 	add.w	r3, r7, #20	; 0x14
    648a:	4618      	mov	r0, r3
    648c:	4611      	mov	r1, r2
    648e:	47e0      	blx	ip
         if (ultrasounds[i]->getName() == name)
    6490:	68fb      	ldr	r3, [r7, #12]
    6492:	68da      	ldr	r2, [r3, #12]
    6494:	6afb      	ldr	r3, [r7, #44]
    6496:	ea4f 0383 	mov.w	r3, r3, lsl #2
    649a:	4413      	add	r3, r2
    649c:	681b      	ldr	r3, [r3, #0]
    649e:	4618      	mov	r0, r3
    64a0:	f007 faaa 	bl	d9f8 <_ZN16UltrasoundSensor7getNameEv>
    64a4:	4603      	mov	r3, r0
    64a6:	461a      	mov	r2, r3
    64a8:	7afb      	ldrb	r3, [r7, #11]
    64aa:	4293      	cmp	r3, r2
    64ac:	bf14      	ite	ne
    64ae:	2300      	movne	r3, #0
    64b0:	2301      	moveq	r3, #1
    64b2:	b2db      	uxtb	r3, r3
    64b4:	2b00      	cmp	r3, #0
    64b6:	d01a      	beq.n	64ee <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xa2>
         {
             return ultrasounds[i]->getValue().f;
    64b8:	68fb      	ldr	r3, [r7, #12]
    64ba:	68da      	ldr	r2, [r3, #12]
    64bc:	6afb      	ldr	r3, [r7, #44]
    64be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64c2:	4413      	add	r3, r2
    64c4:	681b      	ldr	r3, [r3, #0]
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	f103 0308 	add.w	r3, r3, #8	; 0x8
    64cc:	f8d3 c000 	ldr.w	ip, [r3]
    64d0:	68fb      	ldr	r3, [r7, #12]
    64d2:	68da      	ldr	r2, [r3, #12]
    64d4:	6afb      	ldr	r3, [r7, #44]
    64d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64da:	4413      	add	r3, r2
    64dc:	681a      	ldr	r2, [r3, #0]
    64de:	f107 0320 	add.w	r3, r7, #32	; 0x20
    64e2:	4618      	mov	r0, r3
    64e4:	4611      	mov	r1, r2
    64e6:	47e0      	blx	ip
    64e8:	6a7b      	ldr	r3, [r7, #36]
    64ea:	607b      	str	r3, [r7, #4]
    64ec:	e00a      	b.n	6504 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xb8>
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
{
    for (int i = 0; i < nbUltrasound; i++)
    64ee:	6afb      	ldr	r3, [r7, #44]
    64f0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    64f4:	62fb      	str	r3, [r7, #44]
    64f6:	68fb      	ldr	r3, [r7, #12]
    64f8:	691a      	ldr	r2, [r3, #16]
    64fa:	6afb      	ldr	r3, [r7, #44]
    64fc:	429a      	cmp	r2, r3
    64fe:	dcaf      	bgt.n	6460 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0x14>
         if (ultrasounds[i]->getName() == name)
         {
             return ultrasounds[i]->getValue().f;
         }
    }
    return -1;
    6500:	4b03      	ldr	r3, [pc, #12]	(6510 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xc4>)
    6502:	607b      	str	r3, [r7, #4]
    6504:	687b      	ldr	r3, [r7, #4]
}
    6506:	4618      	mov	r0, r3
    6508:	f107 0730 	add.w	r7, r7, #48	; 0x30
    650c:	46bd      	mov	sp, r7
    650e:	bd80      	pop	{r7, pc}
    6510:	bf800000 	.word	0xbf800000

00006514 <_ZN7SensorsD0Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6514:	b580      	push	{r7, lr}
    6516:	b086      	sub	sp, #24
    6518:	af00      	add	r7, sp, #0
    651a:	6078      	str	r0, [r7, #4]
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	4a92      	ldr	r2, [pc, #584]	(6768 <_ZN7SensorsD0Ev+0x254>)
    6520:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    6522:	f04f 0300 	mov.w	r3, #0	; 0x0
    6526:	60bb      	str	r3, [r7, #8]
    6528:	e020      	b.n	656c <_ZN7SensorsD0Ev+0x58>
        delete sharps[i];
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	685a      	ldr	r2, [r3, #4]
    652e:	68bb      	ldr	r3, [r7, #8]
    6530:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6534:	4413      	add	r3, r2
    6536:	681b      	ldr	r3, [r3, #0]
    6538:	2b00      	cmp	r3, #0
    653a:	d013      	beq.n	6564 <_ZN7SensorsD0Ev+0x50>
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	685a      	ldr	r2, [r3, #4]
    6540:	68bb      	ldr	r3, [r7, #8]
    6542:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6546:	4413      	add	r3, r2
    6548:	681b      	ldr	r3, [r3, #0]
    654a:	681b      	ldr	r3, [r3, #0]
    654c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6550:	6819      	ldr	r1, [r3, #0]
    6552:	687b      	ldr	r3, [r7, #4]
    6554:	685a      	ldr	r2, [r3, #4]
    6556:	68bb      	ldr	r3, [r7, #8]
    6558:	ea4f 0383 	mov.w	r3, r3, lsl #2
    655c:	4413      	add	r3, r2
    655e:	681b      	ldr	r3, [r3, #0]
    6560:	4618      	mov	r0, r3
    6562:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    6564:	68bb      	ldr	r3, [r7, #8]
    6566:	f103 0301 	add.w	r3, r3, #1	; 0x1
    656a:	60bb      	str	r3, [r7, #8]
    656c:	687b      	ldr	r3, [r7, #4]
    656e:	689a      	ldr	r2, [r3, #8]
    6570:	68bb      	ldr	r3, [r7, #8]
    6572:	429a      	cmp	r2, r3
    6574:	dcd9      	bgt.n	652a <_ZN7SensorsD0Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6576:	f04f 0300 	mov.w	r3, #0	; 0x0
    657a:	60fb      	str	r3, [r7, #12]
    657c:	e020      	b.n	65c0 <_ZN7SensorsD0Ev+0xac>
        delete ultrasounds[i];
    657e:	687b      	ldr	r3, [r7, #4]
    6580:	68da      	ldr	r2, [r3, #12]
    6582:	68fb      	ldr	r3, [r7, #12]
    6584:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6588:	4413      	add	r3, r2
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	2b00      	cmp	r3, #0
    658e:	d013      	beq.n	65b8 <_ZN7SensorsD0Ev+0xa4>
    6590:	687b      	ldr	r3, [r7, #4]
    6592:	68da      	ldr	r2, [r3, #12]
    6594:	68fb      	ldr	r3, [r7, #12]
    6596:	ea4f 0383 	mov.w	r3, r3, lsl #2
    659a:	4413      	add	r3, r2
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	681b      	ldr	r3, [r3, #0]
    65a0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65a4:	6819      	ldr	r1, [r3, #0]
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	68da      	ldr	r2, [r3, #12]
    65aa:	68fb      	ldr	r3, [r7, #12]
    65ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65b0:	4413      	add	r3, r2
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	4618      	mov	r0, r3
    65b6:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    65b8:	68fb      	ldr	r3, [r7, #12]
    65ba:	f103 0301 	add.w	r3, r3, #1	; 0x1
    65be:	60fb      	str	r3, [r7, #12]
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	691a      	ldr	r2, [r3, #16]
    65c4:	68fb      	ldr	r3, [r7, #12]
    65c6:	429a      	cmp	r2, r3
    65c8:	dcd9      	bgt.n	657e <_ZN7SensorsD0Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    65ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    65ce:	613b      	str	r3, [r7, #16]
    65d0:	e020      	b.n	6614 <_ZN7SensorsD0Ev+0x100>
        delete limitSwitchs[i];
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	69da      	ldr	r2, [r3, #28]
    65d6:	693b      	ldr	r3, [r7, #16]
    65d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65dc:	4413      	add	r3, r2
    65de:	681b      	ldr	r3, [r3, #0]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d013      	beq.n	660c <_ZN7SensorsD0Ev+0xf8>
    65e4:	687b      	ldr	r3, [r7, #4]
    65e6:	69da      	ldr	r2, [r3, #28]
    65e8:	693b      	ldr	r3, [r7, #16]
    65ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65ee:	4413      	add	r3, r2
    65f0:	681b      	ldr	r3, [r3, #0]
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65f8:	6819      	ldr	r1, [r3, #0]
    65fa:	687b      	ldr	r3, [r7, #4]
    65fc:	69da      	ldr	r2, [r3, #28]
    65fe:	693b      	ldr	r3, [r7, #16]
    6600:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6604:	4413      	add	r3, r2
    6606:	681b      	ldr	r3, [r3, #0]
    6608:	4618      	mov	r0, r3
    660a:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    660c:	693b      	ldr	r3, [r7, #16]
    660e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6612:	613b      	str	r3, [r7, #16]
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	6a1a      	ldr	r2, [r3, #32]
    6618:	693b      	ldr	r3, [r7, #16]
    661a:	429a      	cmp	r2, r3
    661c:	dcd9      	bgt.n	65d2 <_ZN7SensorsD0Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    661e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6622:	617b      	str	r3, [r7, #20]
    6624:	e020      	b.n	6668 <_ZN7SensorsD0Ev+0x154>
        delete ligthBarriers[i];
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	695a      	ldr	r2, [r3, #20]
    662a:	697b      	ldr	r3, [r7, #20]
    662c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6630:	4413      	add	r3, r2
    6632:	681b      	ldr	r3, [r3, #0]
    6634:	2b00      	cmp	r3, #0
    6636:	d013      	beq.n	6660 <_ZN7SensorsD0Ev+0x14c>
    6638:	687b      	ldr	r3, [r7, #4]
    663a:	695a      	ldr	r2, [r3, #20]
    663c:	697b      	ldr	r3, [r7, #20]
    663e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6642:	4413      	add	r3, r2
    6644:	681b      	ldr	r3, [r3, #0]
    6646:	681b      	ldr	r3, [r3, #0]
    6648:	f103 0304 	add.w	r3, r3, #4	; 0x4
    664c:	6819      	ldr	r1, [r3, #0]
    664e:	687b      	ldr	r3, [r7, #4]
    6650:	695a      	ldr	r2, [r3, #20]
    6652:	697b      	ldr	r3, [r7, #20]
    6654:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6658:	4413      	add	r3, r2
    665a:	681b      	ldr	r3, [r3, #0]
    665c:	4618      	mov	r0, r3
    665e:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6660:	697b      	ldr	r3, [r7, #20]
    6662:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6666:	617b      	str	r3, [r7, #20]
    6668:	687b      	ldr	r3, [r7, #4]
    666a:	699a      	ldr	r2, [r3, #24]
    666c:	697b      	ldr	r3, [r7, #20]
    666e:	429a      	cmp	r2, r3
    6670:	dcd9      	bgt.n	6626 <_ZN7SensorsD0Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6672:	687b      	ldr	r3, [r7, #4]
    6674:	685b      	ldr	r3, [r3, #4]
    6676:	2b00      	cmp	r3, #0
    6678:	d004      	beq.n	6684 <_ZN7SensorsD0Ev+0x170>
    667a:	687b      	ldr	r3, [r7, #4]
    667c:	685b      	ldr	r3, [r3, #4]
    667e:	4618      	mov	r0, r3
    6680:	f008 f930 	bl	e8e4 <_ZdaPv>
    delete[] ultrasounds;
    6684:	687b      	ldr	r3, [r7, #4]
    6686:	68db      	ldr	r3, [r3, #12]
    6688:	2b00      	cmp	r3, #0
    668a:	d004      	beq.n	6696 <_ZN7SensorsD0Ev+0x182>
    668c:	687b      	ldr	r3, [r7, #4]
    668e:	68db      	ldr	r3, [r3, #12]
    6690:	4618      	mov	r0, r3
    6692:	f008 f927 	bl	e8e4 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	69db      	ldr	r3, [r3, #28]
    669a:	2b00      	cmp	r3, #0
    669c:	d004      	beq.n	66a8 <_ZN7SensorsD0Ev+0x194>
    669e:	687b      	ldr	r3, [r7, #4]
    66a0:	69db      	ldr	r3, [r3, #28]
    66a2:	4618      	mov	r0, r3
    66a4:	f008 f91e 	bl	e8e4 <_ZdaPv>
    delete[] ligthBarriers;
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	695b      	ldr	r3, [r3, #20]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d004      	beq.n	66ba <_ZN7SensorsD0Ev+0x1a6>
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	695b      	ldr	r3, [r3, #20]
    66b4:	4618      	mov	r0, r3
    66b6:	f008 f915 	bl	e8e4 <_ZdaPv>
    #endif

    if (sharpNameVector)
    66ba:	687b      	ldr	r3, [r7, #4]
    66bc:	6a5b      	ldr	r3, [r3, #36]
    66be:	2b00      	cmp	r3, #0
    66c0:	d00d      	beq.n	66de <_ZN7SensorsD0Ev+0x1ca>
        delete sharpNameVector;
    66c2:	687b      	ldr	r3, [r7, #4]
    66c4:	6a5b      	ldr	r3, [r3, #36]
    66c6:	2b00      	cmp	r3, #0
    66c8:	d009      	beq.n	66de <_ZN7SensorsD0Ev+0x1ca>
    66ca:	687b      	ldr	r3, [r7, #4]
    66cc:	6a5b      	ldr	r3, [r3, #36]
    66ce:	681b      	ldr	r3, [r3, #0]
    66d0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    66d4:	681a      	ldr	r2, [r3, #0]
    66d6:	687b      	ldr	r3, [r7, #4]
    66d8:	6a5b      	ldr	r3, [r3, #36]
    66da:	4618      	mov	r0, r3
    66dc:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    66de:	687b      	ldr	r3, [r7, #4]
    66e0:	6adb      	ldr	r3, [r3, #44]
    66e2:	2b00      	cmp	r3, #0
    66e4:	d00d      	beq.n	6702 <_ZN7SensorsD0Ev+0x1ee>
        delete ligthBarrierNameVector;
    66e6:	687b      	ldr	r3, [r7, #4]
    66e8:	6adb      	ldr	r3, [r3, #44]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d009      	beq.n	6702 <_ZN7SensorsD0Ev+0x1ee>
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	6adb      	ldr	r3, [r3, #44]
    66f2:	681b      	ldr	r3, [r3, #0]
    66f4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    66f8:	681a      	ldr	r2, [r3, #0]
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	6adb      	ldr	r3, [r3, #44]
    66fe:	4618      	mov	r0, r3
    6700:	4790      	blx	r2
    if (limitSwitchNameVector)
    6702:	687b      	ldr	r3, [r7, #4]
    6704:	6a9b      	ldr	r3, [r3, #40]
    6706:	2b00      	cmp	r3, #0
    6708:	d00d      	beq.n	6726 <_ZN7SensorsD0Ev+0x212>
        delete limitSwitchNameVector;
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	6a9b      	ldr	r3, [r3, #40]
    670e:	2b00      	cmp	r3, #0
    6710:	d009      	beq.n	6726 <_ZN7SensorsD0Ev+0x212>
    6712:	687b      	ldr	r3, [r7, #4]
    6714:	6a9b      	ldr	r3, [r3, #40]
    6716:	681b      	ldr	r3, [r3, #0]
    6718:	f103 0304 	add.w	r3, r3, #4	; 0x4
    671c:	681a      	ldr	r2, [r3, #0]
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	6a9b      	ldr	r3, [r3, #40]
    6722:	4618      	mov	r0, r3
    6724:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6726:	687b      	ldr	r3, [r7, #4]
    6728:	6b1b      	ldr	r3, [r3, #48]
    672a:	2b00      	cmp	r3, #0
    672c:	d00d      	beq.n	674a <_ZN7SensorsD0Ev+0x236>
        delete outputSensorVector;
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	6b1b      	ldr	r3, [r3, #48]
    6732:	2b00      	cmp	r3, #0
    6734:	d009      	beq.n	674a <_ZN7SensorsD0Ev+0x236>
    6736:	687b      	ldr	r3, [r7, #4]
    6738:	6b1b      	ldr	r3, [r3, #48]
    673a:	681b      	ldr	r3, [r3, #0]
    673c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6740:	681a      	ldr	r2, [r3, #0]
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	6b1b      	ldr	r3, [r3, #48]
    6746:	4618      	mov	r0, r3
    6748:	4790      	blx	r2
}
    674a:	f04f 0301 	mov.w	r3, #1	; 0x1
    674e:	b2db      	uxtb	r3, r3
    6750:	2b00      	cmp	r3, #0
    6752:	d002      	beq.n	675a <_ZN7SensorsD0Ev+0x246>
    6754:	6878      	ldr	r0, [r7, #4]
    6756:	f008 f84d 	bl	e7f4 <_ZdlPv>
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	4618      	mov	r0, r3
    675e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6762:	46bd      	mov	sp, r7
    6764:	bd80      	pop	{r7, pc}
    6766:	46c0      	nop			(mov r8, r8)
    6768:	00021c90 	.word	0x00021c90

0000676c <_ZN7SensorsD1Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    676c:	b580      	push	{r7, lr}
    676e:	b086      	sub	sp, #24
    6770:	af00      	add	r7, sp, #0
    6772:	6078      	str	r0, [r7, #4]
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	4a92      	ldr	r2, [pc, #584]	(69c0 <_ZN7SensorsD1Ev+0x254>)
    6778:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    677a:	f04f 0300 	mov.w	r3, #0	; 0x0
    677e:	60bb      	str	r3, [r7, #8]
    6780:	e020      	b.n	67c4 <_ZN7SensorsD1Ev+0x58>
        delete sharps[i];
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	685a      	ldr	r2, [r3, #4]
    6786:	68bb      	ldr	r3, [r7, #8]
    6788:	ea4f 0383 	mov.w	r3, r3, lsl #2
    678c:	4413      	add	r3, r2
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	2b00      	cmp	r3, #0
    6792:	d013      	beq.n	67bc <_ZN7SensorsD1Ev+0x50>
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	685a      	ldr	r2, [r3, #4]
    6798:	68bb      	ldr	r3, [r7, #8]
    679a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    679e:	4413      	add	r3, r2
    67a0:	681b      	ldr	r3, [r3, #0]
    67a2:	681b      	ldr	r3, [r3, #0]
    67a4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    67a8:	6819      	ldr	r1, [r3, #0]
    67aa:	687b      	ldr	r3, [r7, #4]
    67ac:	685a      	ldr	r2, [r3, #4]
    67ae:	68bb      	ldr	r3, [r7, #8]
    67b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67b4:	4413      	add	r3, r2
    67b6:	681b      	ldr	r3, [r3, #0]
    67b8:	4618      	mov	r0, r3
    67ba:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    67bc:	68bb      	ldr	r3, [r7, #8]
    67be:	f103 0301 	add.w	r3, r3, #1	; 0x1
    67c2:	60bb      	str	r3, [r7, #8]
    67c4:	687b      	ldr	r3, [r7, #4]
    67c6:	689a      	ldr	r2, [r3, #8]
    67c8:	68bb      	ldr	r3, [r7, #8]
    67ca:	429a      	cmp	r2, r3
    67cc:	dcd9      	bgt.n	6782 <_ZN7SensorsD1Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    67ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    67d2:	60fb      	str	r3, [r7, #12]
    67d4:	e020      	b.n	6818 <_ZN7SensorsD1Ev+0xac>
        delete ultrasounds[i];
    67d6:	687b      	ldr	r3, [r7, #4]
    67d8:	68da      	ldr	r2, [r3, #12]
    67da:	68fb      	ldr	r3, [r7, #12]
    67dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67e0:	4413      	add	r3, r2
    67e2:	681b      	ldr	r3, [r3, #0]
    67e4:	2b00      	cmp	r3, #0
    67e6:	d013      	beq.n	6810 <_ZN7SensorsD1Ev+0xa4>
    67e8:	687b      	ldr	r3, [r7, #4]
    67ea:	68da      	ldr	r2, [r3, #12]
    67ec:	68fb      	ldr	r3, [r7, #12]
    67ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67f2:	4413      	add	r3, r2
    67f4:	681b      	ldr	r3, [r3, #0]
    67f6:	681b      	ldr	r3, [r3, #0]
    67f8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    67fc:	6819      	ldr	r1, [r3, #0]
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	68da      	ldr	r2, [r3, #12]
    6802:	68fb      	ldr	r3, [r7, #12]
    6804:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6808:	4413      	add	r3, r2
    680a:	681b      	ldr	r3, [r3, #0]
    680c:	4618      	mov	r0, r3
    680e:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6810:	68fb      	ldr	r3, [r7, #12]
    6812:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6816:	60fb      	str	r3, [r7, #12]
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	691a      	ldr	r2, [r3, #16]
    681c:	68fb      	ldr	r3, [r7, #12]
    681e:	429a      	cmp	r2, r3
    6820:	dcd9      	bgt.n	67d6 <_ZN7SensorsD1Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6822:	f04f 0300 	mov.w	r3, #0	; 0x0
    6826:	613b      	str	r3, [r7, #16]
    6828:	e020      	b.n	686c <_ZN7SensorsD1Ev+0x100>
        delete limitSwitchs[i];
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	69da      	ldr	r2, [r3, #28]
    682e:	693b      	ldr	r3, [r7, #16]
    6830:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6834:	4413      	add	r3, r2
    6836:	681b      	ldr	r3, [r3, #0]
    6838:	2b00      	cmp	r3, #0
    683a:	d013      	beq.n	6864 <_ZN7SensorsD1Ev+0xf8>
    683c:	687b      	ldr	r3, [r7, #4]
    683e:	69da      	ldr	r2, [r3, #28]
    6840:	693b      	ldr	r3, [r7, #16]
    6842:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6846:	4413      	add	r3, r2
    6848:	681b      	ldr	r3, [r3, #0]
    684a:	681b      	ldr	r3, [r3, #0]
    684c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6850:	6819      	ldr	r1, [r3, #0]
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	69da      	ldr	r2, [r3, #28]
    6856:	693b      	ldr	r3, [r7, #16]
    6858:	ea4f 0383 	mov.w	r3, r3, lsl #2
    685c:	4413      	add	r3, r2
    685e:	681b      	ldr	r3, [r3, #0]
    6860:	4618      	mov	r0, r3
    6862:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6864:	693b      	ldr	r3, [r7, #16]
    6866:	f103 0301 	add.w	r3, r3, #1	; 0x1
    686a:	613b      	str	r3, [r7, #16]
    686c:	687b      	ldr	r3, [r7, #4]
    686e:	6a1a      	ldr	r2, [r3, #32]
    6870:	693b      	ldr	r3, [r7, #16]
    6872:	429a      	cmp	r2, r3
    6874:	dcd9      	bgt.n	682a <_ZN7SensorsD1Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6876:	f04f 0300 	mov.w	r3, #0	; 0x0
    687a:	617b      	str	r3, [r7, #20]
    687c:	e020      	b.n	68c0 <_ZN7SensorsD1Ev+0x154>
        delete ligthBarriers[i];
    687e:	687b      	ldr	r3, [r7, #4]
    6880:	695a      	ldr	r2, [r3, #20]
    6882:	697b      	ldr	r3, [r7, #20]
    6884:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6888:	4413      	add	r3, r2
    688a:	681b      	ldr	r3, [r3, #0]
    688c:	2b00      	cmp	r3, #0
    688e:	d013      	beq.n	68b8 <_ZN7SensorsD1Ev+0x14c>
    6890:	687b      	ldr	r3, [r7, #4]
    6892:	695a      	ldr	r2, [r3, #20]
    6894:	697b      	ldr	r3, [r7, #20]
    6896:	ea4f 0383 	mov.w	r3, r3, lsl #2
    689a:	4413      	add	r3, r2
    689c:	681b      	ldr	r3, [r3, #0]
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    68a4:	6819      	ldr	r1, [r3, #0]
    68a6:	687b      	ldr	r3, [r7, #4]
    68a8:	695a      	ldr	r2, [r3, #20]
    68aa:	697b      	ldr	r3, [r7, #20]
    68ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    68b0:	4413      	add	r3, r2
    68b2:	681b      	ldr	r3, [r3, #0]
    68b4:	4618      	mov	r0, r3
    68b6:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    68b8:	697b      	ldr	r3, [r7, #20]
    68ba:	f103 0301 	add.w	r3, r3, #1	; 0x1
    68be:	617b      	str	r3, [r7, #20]
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	699a      	ldr	r2, [r3, #24]
    68c4:	697b      	ldr	r3, [r7, #20]
    68c6:	429a      	cmp	r2, r3
    68c8:	dcd9      	bgt.n	687e <_ZN7SensorsD1Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    68ca:	687b      	ldr	r3, [r7, #4]
    68cc:	685b      	ldr	r3, [r3, #4]
    68ce:	2b00      	cmp	r3, #0
    68d0:	d004      	beq.n	68dc <_ZN7SensorsD1Ev+0x170>
    68d2:	687b      	ldr	r3, [r7, #4]
    68d4:	685b      	ldr	r3, [r3, #4]
    68d6:	4618      	mov	r0, r3
    68d8:	f008 f804 	bl	e8e4 <_ZdaPv>
    delete[] ultrasounds;
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	68db      	ldr	r3, [r3, #12]
    68e0:	2b00      	cmp	r3, #0
    68e2:	d004      	beq.n	68ee <_ZN7SensorsD1Ev+0x182>
    68e4:	687b      	ldr	r3, [r7, #4]
    68e6:	68db      	ldr	r3, [r3, #12]
    68e8:	4618      	mov	r0, r3
    68ea:	f007 fffb 	bl	e8e4 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	69db      	ldr	r3, [r3, #28]
    68f2:	2b00      	cmp	r3, #0
    68f4:	d004      	beq.n	6900 <_ZN7SensorsD1Ev+0x194>
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	69db      	ldr	r3, [r3, #28]
    68fa:	4618      	mov	r0, r3
    68fc:	f007 fff2 	bl	e8e4 <_ZdaPv>
    delete[] ligthBarriers;
    6900:	687b      	ldr	r3, [r7, #4]
    6902:	695b      	ldr	r3, [r3, #20]
    6904:	2b00      	cmp	r3, #0
    6906:	d004      	beq.n	6912 <_ZN7SensorsD1Ev+0x1a6>
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	695b      	ldr	r3, [r3, #20]
    690c:	4618      	mov	r0, r3
    690e:	f007 ffe9 	bl	e8e4 <_ZdaPv>
    #endif

    if (sharpNameVector)
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	6a5b      	ldr	r3, [r3, #36]
    6916:	2b00      	cmp	r3, #0
    6918:	d00d      	beq.n	6936 <_ZN7SensorsD1Ev+0x1ca>
        delete sharpNameVector;
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	6a5b      	ldr	r3, [r3, #36]
    691e:	2b00      	cmp	r3, #0
    6920:	d009      	beq.n	6936 <_ZN7SensorsD1Ev+0x1ca>
    6922:	687b      	ldr	r3, [r7, #4]
    6924:	6a5b      	ldr	r3, [r3, #36]
    6926:	681b      	ldr	r3, [r3, #0]
    6928:	f103 0304 	add.w	r3, r3, #4	; 0x4
    692c:	681a      	ldr	r2, [r3, #0]
    692e:	687b      	ldr	r3, [r7, #4]
    6930:	6a5b      	ldr	r3, [r3, #36]
    6932:	4618      	mov	r0, r3
    6934:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6936:	687b      	ldr	r3, [r7, #4]
    6938:	6adb      	ldr	r3, [r3, #44]
    693a:	2b00      	cmp	r3, #0
    693c:	d00d      	beq.n	695a <_ZN7SensorsD1Ev+0x1ee>
        delete ligthBarrierNameVector;
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	6adb      	ldr	r3, [r3, #44]
    6942:	2b00      	cmp	r3, #0
    6944:	d009      	beq.n	695a <_ZN7SensorsD1Ev+0x1ee>
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	6adb      	ldr	r3, [r3, #44]
    694a:	681b      	ldr	r3, [r3, #0]
    694c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6950:	681a      	ldr	r2, [r3, #0]
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	6adb      	ldr	r3, [r3, #44]
    6956:	4618      	mov	r0, r3
    6958:	4790      	blx	r2
    if (limitSwitchNameVector)
    695a:	687b      	ldr	r3, [r7, #4]
    695c:	6a9b      	ldr	r3, [r3, #40]
    695e:	2b00      	cmp	r3, #0
    6960:	d00d      	beq.n	697e <_ZN7SensorsD1Ev+0x212>
        delete limitSwitchNameVector;
    6962:	687b      	ldr	r3, [r7, #4]
    6964:	6a9b      	ldr	r3, [r3, #40]
    6966:	2b00      	cmp	r3, #0
    6968:	d009      	beq.n	697e <_ZN7SensorsD1Ev+0x212>
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	6a9b      	ldr	r3, [r3, #40]
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6974:	681a      	ldr	r2, [r3, #0]
    6976:	687b      	ldr	r3, [r7, #4]
    6978:	6a9b      	ldr	r3, [r3, #40]
    697a:	4618      	mov	r0, r3
    697c:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    697e:	687b      	ldr	r3, [r7, #4]
    6980:	6b1b      	ldr	r3, [r3, #48]
    6982:	2b00      	cmp	r3, #0
    6984:	d00d      	beq.n	69a2 <_ZN7SensorsD1Ev+0x236>
        delete outputSensorVector;
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	6b1b      	ldr	r3, [r3, #48]
    698a:	2b00      	cmp	r3, #0
    698c:	d009      	beq.n	69a2 <_ZN7SensorsD1Ev+0x236>
    698e:	687b      	ldr	r3, [r7, #4]
    6990:	6b1b      	ldr	r3, [r3, #48]
    6992:	681b      	ldr	r3, [r3, #0]
    6994:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6998:	681a      	ldr	r2, [r3, #0]
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	6b1b      	ldr	r3, [r3, #48]
    699e:	4618      	mov	r0, r3
    69a0:	4790      	blx	r2
}
    69a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    69a6:	b2db      	uxtb	r3, r3
    69a8:	2b00      	cmp	r3, #0
    69aa:	d002      	beq.n	69b2 <_ZN7SensorsD1Ev+0x246>
    69ac:	6878      	ldr	r0, [r7, #4]
    69ae:	f007 ff21 	bl	e7f4 <_ZdlPv>
    69b2:	687b      	ldr	r3, [r7, #4]
    69b4:	4618      	mov	r0, r3
    69b6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    69ba:	46bd      	mov	sp, r7
    69bc:	bd80      	pop	{r7, pc}
    69be:	46c0      	nop			(mov r8, r8)
    69c0:	00021c90 	.word	0x00021c90

000069c4 <_ZN7SensorsD2Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    69c4:	b580      	push	{r7, lr}
    69c6:	b086      	sub	sp, #24
    69c8:	af00      	add	r7, sp, #0
    69ca:	6078      	str	r0, [r7, #4]
    69cc:	687b      	ldr	r3, [r7, #4]
    69ce:	4a92      	ldr	r2, [pc, #584]	(6c18 <_ZN7SensorsD2Ev+0x254>)
    69d0:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    69d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    69d6:	60bb      	str	r3, [r7, #8]
    69d8:	e020      	b.n	6a1c <_ZN7SensorsD2Ev+0x58>
        delete sharps[i];
    69da:	687b      	ldr	r3, [r7, #4]
    69dc:	685a      	ldr	r2, [r3, #4]
    69de:	68bb      	ldr	r3, [r7, #8]
    69e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69e4:	4413      	add	r3, r2
    69e6:	681b      	ldr	r3, [r3, #0]
    69e8:	2b00      	cmp	r3, #0
    69ea:	d013      	beq.n	6a14 <_ZN7SensorsD2Ev+0x50>
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	685a      	ldr	r2, [r3, #4]
    69f0:	68bb      	ldr	r3, [r7, #8]
    69f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69f6:	4413      	add	r3, r2
    69f8:	681b      	ldr	r3, [r3, #0]
    69fa:	681b      	ldr	r3, [r3, #0]
    69fc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a00:	6819      	ldr	r1, [r3, #0]
    6a02:	687b      	ldr	r3, [r7, #4]
    6a04:	685a      	ldr	r2, [r3, #4]
    6a06:	68bb      	ldr	r3, [r7, #8]
    6a08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a0c:	4413      	add	r3, r2
    6a0e:	681b      	ldr	r3, [r3, #0]
    6a10:	4618      	mov	r0, r3
    6a12:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    6a14:	68bb      	ldr	r3, [r7, #8]
    6a16:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6a1a:	60bb      	str	r3, [r7, #8]
    6a1c:	687b      	ldr	r3, [r7, #4]
    6a1e:	689a      	ldr	r2, [r3, #8]
    6a20:	68bb      	ldr	r3, [r7, #8]
    6a22:	429a      	cmp	r2, r3
    6a24:	dcd9      	bgt.n	69da <_ZN7SensorsD2Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6a26:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a2a:	60fb      	str	r3, [r7, #12]
    6a2c:	e020      	b.n	6a70 <_ZN7SensorsD2Ev+0xac>
        delete ultrasounds[i];
    6a2e:	687b      	ldr	r3, [r7, #4]
    6a30:	68da      	ldr	r2, [r3, #12]
    6a32:	68fb      	ldr	r3, [r7, #12]
    6a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a38:	4413      	add	r3, r2
    6a3a:	681b      	ldr	r3, [r3, #0]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d013      	beq.n	6a68 <_ZN7SensorsD2Ev+0xa4>
    6a40:	687b      	ldr	r3, [r7, #4]
    6a42:	68da      	ldr	r2, [r3, #12]
    6a44:	68fb      	ldr	r3, [r7, #12]
    6a46:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a4a:	4413      	add	r3, r2
    6a4c:	681b      	ldr	r3, [r3, #0]
    6a4e:	681b      	ldr	r3, [r3, #0]
    6a50:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a54:	6819      	ldr	r1, [r3, #0]
    6a56:	687b      	ldr	r3, [r7, #4]
    6a58:	68da      	ldr	r2, [r3, #12]
    6a5a:	68fb      	ldr	r3, [r7, #12]
    6a5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a60:	4413      	add	r3, r2
    6a62:	681b      	ldr	r3, [r3, #0]
    6a64:	4618      	mov	r0, r3
    6a66:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6a68:	68fb      	ldr	r3, [r7, #12]
    6a6a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6a6e:	60fb      	str	r3, [r7, #12]
    6a70:	687b      	ldr	r3, [r7, #4]
    6a72:	691a      	ldr	r2, [r3, #16]
    6a74:	68fb      	ldr	r3, [r7, #12]
    6a76:	429a      	cmp	r2, r3
    6a78:	dcd9      	bgt.n	6a2e <_ZN7SensorsD2Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6a7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a7e:	613b      	str	r3, [r7, #16]
    6a80:	e020      	b.n	6ac4 <_ZN7SensorsD2Ev+0x100>
        delete limitSwitchs[i];
    6a82:	687b      	ldr	r3, [r7, #4]
    6a84:	69da      	ldr	r2, [r3, #28]
    6a86:	693b      	ldr	r3, [r7, #16]
    6a88:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a8c:	4413      	add	r3, r2
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	2b00      	cmp	r3, #0
    6a92:	d013      	beq.n	6abc <_ZN7SensorsD2Ev+0xf8>
    6a94:	687b      	ldr	r3, [r7, #4]
    6a96:	69da      	ldr	r2, [r3, #28]
    6a98:	693b      	ldr	r3, [r7, #16]
    6a9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a9e:	4413      	add	r3, r2
    6aa0:	681b      	ldr	r3, [r3, #0]
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6aa8:	6819      	ldr	r1, [r3, #0]
    6aaa:	687b      	ldr	r3, [r7, #4]
    6aac:	69da      	ldr	r2, [r3, #28]
    6aae:	693b      	ldr	r3, [r7, #16]
    6ab0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ab4:	4413      	add	r3, r2
    6ab6:	681b      	ldr	r3, [r3, #0]
    6ab8:	4618      	mov	r0, r3
    6aba:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6abc:	693b      	ldr	r3, [r7, #16]
    6abe:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6ac2:	613b      	str	r3, [r7, #16]
    6ac4:	687b      	ldr	r3, [r7, #4]
    6ac6:	6a1a      	ldr	r2, [r3, #32]
    6ac8:	693b      	ldr	r3, [r7, #16]
    6aca:	429a      	cmp	r2, r3
    6acc:	dcd9      	bgt.n	6a82 <_ZN7SensorsD2Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6ace:	f04f 0300 	mov.w	r3, #0	; 0x0
    6ad2:	617b      	str	r3, [r7, #20]
    6ad4:	e020      	b.n	6b18 <_ZN7SensorsD2Ev+0x154>
        delete ligthBarriers[i];
    6ad6:	687b      	ldr	r3, [r7, #4]
    6ad8:	695a      	ldr	r2, [r3, #20]
    6ada:	697b      	ldr	r3, [r7, #20]
    6adc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ae0:	4413      	add	r3, r2
    6ae2:	681b      	ldr	r3, [r3, #0]
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d013      	beq.n	6b10 <_ZN7SensorsD2Ev+0x14c>
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	695a      	ldr	r2, [r3, #20]
    6aec:	697b      	ldr	r3, [r7, #20]
    6aee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6af2:	4413      	add	r3, r2
    6af4:	681b      	ldr	r3, [r3, #0]
    6af6:	681b      	ldr	r3, [r3, #0]
    6af8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6afc:	6819      	ldr	r1, [r3, #0]
    6afe:	687b      	ldr	r3, [r7, #4]
    6b00:	695a      	ldr	r2, [r3, #20]
    6b02:	697b      	ldr	r3, [r7, #20]
    6b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b08:	4413      	add	r3, r2
    6b0a:	681b      	ldr	r3, [r3, #0]
    6b0c:	4618      	mov	r0, r3
    6b0e:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6b10:	697b      	ldr	r3, [r7, #20]
    6b12:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6b16:	617b      	str	r3, [r7, #20]
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	699a      	ldr	r2, [r3, #24]
    6b1c:	697b      	ldr	r3, [r7, #20]
    6b1e:	429a      	cmp	r2, r3
    6b20:	dcd9      	bgt.n	6ad6 <_ZN7SensorsD2Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6b22:	687b      	ldr	r3, [r7, #4]
    6b24:	685b      	ldr	r3, [r3, #4]
    6b26:	2b00      	cmp	r3, #0
    6b28:	d004      	beq.n	6b34 <_ZN7SensorsD2Ev+0x170>
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	685b      	ldr	r3, [r3, #4]
    6b2e:	4618      	mov	r0, r3
    6b30:	f007 fed8 	bl	e8e4 <_ZdaPv>
    delete[] ultrasounds;
    6b34:	687b      	ldr	r3, [r7, #4]
    6b36:	68db      	ldr	r3, [r3, #12]
    6b38:	2b00      	cmp	r3, #0
    6b3a:	d004      	beq.n	6b46 <_ZN7SensorsD2Ev+0x182>
    6b3c:	687b      	ldr	r3, [r7, #4]
    6b3e:	68db      	ldr	r3, [r3, #12]
    6b40:	4618      	mov	r0, r3
    6b42:	f007 fecf 	bl	e8e4 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6b46:	687b      	ldr	r3, [r7, #4]
    6b48:	69db      	ldr	r3, [r3, #28]
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d004      	beq.n	6b58 <_ZN7SensorsD2Ev+0x194>
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	69db      	ldr	r3, [r3, #28]
    6b52:	4618      	mov	r0, r3
    6b54:	f007 fec6 	bl	e8e4 <_ZdaPv>
    delete[] ligthBarriers;
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	695b      	ldr	r3, [r3, #20]
    6b5c:	2b00      	cmp	r3, #0
    6b5e:	d004      	beq.n	6b6a <_ZN7SensorsD2Ev+0x1a6>
    6b60:	687b      	ldr	r3, [r7, #4]
    6b62:	695b      	ldr	r3, [r3, #20]
    6b64:	4618      	mov	r0, r3
    6b66:	f007 febd 	bl	e8e4 <_ZdaPv>
    #endif

    if (sharpNameVector)
    6b6a:	687b      	ldr	r3, [r7, #4]
    6b6c:	6a5b      	ldr	r3, [r3, #36]
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d00d      	beq.n	6b8e <_ZN7SensorsD2Ev+0x1ca>
        delete sharpNameVector;
    6b72:	687b      	ldr	r3, [r7, #4]
    6b74:	6a5b      	ldr	r3, [r3, #36]
    6b76:	2b00      	cmp	r3, #0
    6b78:	d009      	beq.n	6b8e <_ZN7SensorsD2Ev+0x1ca>
    6b7a:	687b      	ldr	r3, [r7, #4]
    6b7c:	6a5b      	ldr	r3, [r3, #36]
    6b7e:	681b      	ldr	r3, [r3, #0]
    6b80:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6b84:	681a      	ldr	r2, [r3, #0]
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	6a5b      	ldr	r3, [r3, #36]
    6b8a:	4618      	mov	r0, r3
    6b8c:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6b8e:	687b      	ldr	r3, [r7, #4]
    6b90:	6adb      	ldr	r3, [r3, #44]
    6b92:	2b00      	cmp	r3, #0
    6b94:	d00d      	beq.n	6bb2 <_ZN7SensorsD2Ev+0x1ee>
        delete ligthBarrierNameVector;
    6b96:	687b      	ldr	r3, [r7, #4]
    6b98:	6adb      	ldr	r3, [r3, #44]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d009      	beq.n	6bb2 <_ZN7SensorsD2Ev+0x1ee>
    6b9e:	687b      	ldr	r3, [r7, #4]
    6ba0:	6adb      	ldr	r3, [r3, #44]
    6ba2:	681b      	ldr	r3, [r3, #0]
    6ba4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6ba8:	681a      	ldr	r2, [r3, #0]
    6baa:	687b      	ldr	r3, [r7, #4]
    6bac:	6adb      	ldr	r3, [r3, #44]
    6bae:	4618      	mov	r0, r3
    6bb0:	4790      	blx	r2
    if (limitSwitchNameVector)
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	6a9b      	ldr	r3, [r3, #40]
    6bb6:	2b00      	cmp	r3, #0
    6bb8:	d00d      	beq.n	6bd6 <_ZN7SensorsD2Ev+0x212>
        delete limitSwitchNameVector;
    6bba:	687b      	ldr	r3, [r7, #4]
    6bbc:	6a9b      	ldr	r3, [r3, #40]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d009      	beq.n	6bd6 <_ZN7SensorsD2Ev+0x212>
    6bc2:	687b      	ldr	r3, [r7, #4]
    6bc4:	6a9b      	ldr	r3, [r3, #40]
    6bc6:	681b      	ldr	r3, [r3, #0]
    6bc8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6bcc:	681a      	ldr	r2, [r3, #0]
    6bce:	687b      	ldr	r3, [r7, #4]
    6bd0:	6a9b      	ldr	r3, [r3, #40]
    6bd2:	4618      	mov	r0, r3
    6bd4:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6bd6:	687b      	ldr	r3, [r7, #4]
    6bd8:	6b1b      	ldr	r3, [r3, #48]
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d00d      	beq.n	6bfa <_ZN7SensorsD2Ev+0x236>
        delete outputSensorVector;
    6bde:	687b      	ldr	r3, [r7, #4]
    6be0:	6b1b      	ldr	r3, [r3, #48]
    6be2:	2b00      	cmp	r3, #0
    6be4:	d009      	beq.n	6bfa <_ZN7SensorsD2Ev+0x236>
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	6b1b      	ldr	r3, [r3, #48]
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6bf0:	681a      	ldr	r2, [r3, #0]
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	6b1b      	ldr	r3, [r3, #48]
    6bf6:	4618      	mov	r0, r3
    6bf8:	4790      	blx	r2
}
    6bfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    6bfe:	b2db      	uxtb	r3, r3
    6c00:	2b00      	cmp	r3, #0
    6c02:	d002      	beq.n	6c0a <_ZN7SensorsD2Ev+0x246>
    6c04:	6878      	ldr	r0, [r7, #4]
    6c06:	f007 fdf5 	bl	e7f4 <_ZdlPv>
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	4618      	mov	r0, r3
    6c0e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6c12:	46bd      	mov	sp, r7
    6c14:	bd80      	pop	{r7, pc}
    6c16:	46c0      	nop			(mov r8, r8)
    6c18:	00021c90 	.word	0x00021c90

00006c1c <_ZN7SensorsC1Ev>:
        singleton = new Sensors;
    }
    return singleton;
}

Sensors::Sensors()
    6c1c:	b5b0      	push	{r4, r5, r7, lr}
    6c1e:	b088      	sub	sp, #32
    6c20:	af02      	add	r7, sp, #8
    6c22:	6078      	str	r0, [r7, #4]
    6c24:	687a      	ldr	r2, [r7, #4]
    6c26:	4ba9      	ldr	r3, [pc, #676]	(6ecc <_ZN7SensorsC1Ev+0x2b0>)
    6c28:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    6c2a:	4aa9      	ldr	r2, [pc, #676]	(6ed0 <_ZN7SensorsC1Ev+0x2b4>)
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6c30:	4ba8      	ldr	r3, [pc, #672]	(6ed4 <_ZN7SensorsC1Ev+0x2b8>)
    6c32:	f107 020a 	add.w	r2, r7, #10	; 0xa
    6c36:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    6c3a:	4610      	mov	r0, r2
    6c3c:	4619      	mov	r1, r3
    6c3e:	4662      	mov	r2, ip
    6c40:	f019 fe94 	bl	2096c <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    6c44:	f107 030a 	add.w	r3, r7, #10	; 0xa
    6c48:	f04f 000a 	mov.w	r0, #10	; 0xa
    6c4c:	4619      	mov	r1, r3
    6c4e:	f003 ff4d 	bl	aaec <_ZN12AnalogSensor14initialiserADCEhPh>
    6c52:	4603      	mov	r3, r0
    6c54:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    6c56:	687a      	ldr	r2, [r7, #4]
    6c58:	f04f 030a 	mov.w	r3, #10	; 0xa
    6c5c:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    6c5e:	687a      	ldr	r2, [r7, #4]
    6c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c64:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    6c66:	687a      	ldr	r2, [r7, #4]
    6c68:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c6c:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    6c6e:	687a      	ldr	r2, [r7, #4]
    6c70:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c74:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    6c76:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c7a:	f007 fd15 	bl	e6a8 <_Znwj>
    6c7e:	4603      	mov	r3, r0
    6c80:	461c      	mov	r4, r3
    6c82:	687b      	ldr	r3, [r7, #4]
    6c84:	691b      	ldr	r3, [r3, #16]
    6c86:	4620      	mov	r0, r4
    6c88:	4619      	mov	r1, r3
    6c8a:	f015 fb5d 	bl	1c348 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    6c92:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c96:	f007 fd07 	bl	e6a8 <_Znwj>
    6c9a:	4603      	mov	r3, r0
    6c9c:	461c      	mov	r4, r3
    6c9e:	687b      	ldr	r3, [r7, #4]
    6ca0:	6a1b      	ldr	r3, [r3, #32]
    6ca2:	4620      	mov	r0, r4
    6ca4:	4619      	mov	r1, r3
    6ca6:	f015 fb75 	bl	1c394 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    6caa:	687b      	ldr	r3, [r7, #4]
    6cac:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    6cae:	f04f 0010 	mov.w	r0, #16	; 0x10
    6cb2:	f007 fcf9 	bl	e6a8 <_Znwj>
    6cb6:	4603      	mov	r3, r0
    6cb8:	461c      	mov	r4, r3
    6cba:	687b      	ldr	r3, [r7, #4]
    6cbc:	699b      	ldr	r3, [r3, #24]
    6cbe:	4620      	mov	r0, r4
    6cc0:	4619      	mov	r1, r3
    6cc2:	f015 fb87 	bl	1c3d4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    6cca:	687b      	ldr	r3, [r7, #4]
    6ccc:	689b      	ldr	r3, [r3, #8]
    6cce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6cd2:	4618      	mov	r0, r3
    6cd4:	f007 fd80 	bl	e7d8 <_Znaj>
    6cd8:	4603      	mov	r3, r0
    6cda:	461a      	mov	r2, r3
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6ce0:	687b      	ldr	r3, [r7, #4]
    6ce2:	685d      	ldr	r5, [r3, #4]
    6ce4:	f04f 0018 	mov.w	r0, #24	; 0x18
    6ce8:	f007 fcde 	bl	e6a8 <_Znwj>
    6cec:	4603      	mov	r3, r0
    6cee:	461c      	mov	r4, r3
    6cf0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6cf4:	9300      	str	r3, [sp, #0]
    6cf6:	4620      	mov	r0, r4
    6cf8:	f04f 0102 	mov.w	r1, #2	; 0x2
    6cfc:	f04f 0209 	mov.w	r2, #9	; 0x9
    6d00:	697b      	ldr	r3, [r7, #20]
    6d02:	f006 fb1d 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d06:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	685b      	ldr	r3, [r3, #4]
    6d0c:	f103 0504 	add.w	r5, r3, #4	; 0x4
    6d10:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d14:	f007 fcc8 	bl	e6a8 <_Znwj>
    6d18:	4603      	mov	r3, r0
    6d1a:	461c      	mov	r4, r3
    6d1c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d20:	9300      	str	r3, [sp, #0]
    6d22:	4620      	mov	r0, r4
    6d24:	f04f 0103 	mov.w	r1, #3	; 0x3
    6d28:	f04f 020e 	mov.w	r2, #14	; 0xe
    6d2c:	697b      	ldr	r3, [r7, #20]
    6d2e:	f006 fb07 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d32:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    6d34:	687b      	ldr	r3, [r7, #4]
    6d36:	685b      	ldr	r3, [r3, #4]
    6d38:	f103 0508 	add.w	r5, r3, #8	; 0x8
    6d3c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d40:	f007 fcb2 	bl	e6a8 <_Znwj>
    6d44:	4603      	mov	r3, r0
    6d46:	461c      	mov	r4, r3
    6d48:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d4c:	9300      	str	r3, [sp, #0]
    6d4e:	4620      	mov	r0, r4
    6d50:	f04f 0104 	mov.w	r1, #4	; 0x4
    6d54:	f04f 020d 	mov.w	r2, #13	; 0xd
    6d58:	697b      	ldr	r3, [r7, #20]
    6d5a:	f006 faf1 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d5e:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    6d60:	687b      	ldr	r3, [r7, #4]
    6d62:	685b      	ldr	r3, [r3, #4]
    6d64:	f103 050c 	add.w	r5, r3, #12	; 0xc
    6d68:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d6c:	f007 fc9c 	bl	e6a8 <_Znwj>
    6d70:	4603      	mov	r3, r0
    6d72:	461c      	mov	r4, r3
    6d74:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d78:	9300      	str	r3, [sp, #0]
    6d7a:	4620      	mov	r0, r4
    6d7c:	f04f 0105 	mov.w	r1, #5	; 0x5
    6d80:	f04f 020b 	mov.w	r2, #11	; 0xb
    6d84:	697b      	ldr	r3, [r7, #20]
    6d86:	f006 fadb 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d8a:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    6d8c:	687b      	ldr	r3, [r7, #4]
    6d8e:	685b      	ldr	r3, [r3, #4]
    6d90:	f103 0510 	add.w	r5, r3, #16	; 0x10
    6d94:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d98:	f007 fc86 	bl	e6a8 <_Znwj>
    6d9c:	4603      	mov	r3, r0
    6d9e:	461c      	mov	r4, r3
    6da0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6da4:	9300      	str	r3, [sp, #0]
    6da6:	4620      	mov	r0, r4
    6da8:	f04f 0100 	mov.w	r1, #0	; 0x0
    6dac:	f04f 0205 	mov.w	r2, #5	; 0x5
    6db0:	697b      	ldr	r3, [r7, #20]
    6db2:	f006 fac5 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6db6:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	685b      	ldr	r3, [r3, #4]
    6dbc:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6dc0:	f04f 0018 	mov.w	r0, #24	; 0x18
    6dc4:	f007 fc70 	bl	e6a8 <_Znwj>
    6dc8:	4603      	mov	r3, r0
    6dca:	461c      	mov	r4, r3
    6dcc:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6dd0:	9300      	str	r3, [sp, #0]
    6dd2:	4620      	mov	r0, r4
    6dd4:	f04f 0101 	mov.w	r1, #1	; 0x1
    6dd8:	f04f 0204 	mov.w	r2, #4	; 0x4
    6ddc:	697b      	ldr	r3, [r7, #20]
    6dde:	f006 faaf 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6de2:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6de4:	687b      	ldr	r3, [r7, #4]
    6de6:	685b      	ldr	r3, [r3, #4]
    6de8:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6dec:	f04f 0018 	mov.w	r0, #24	; 0x18
    6df0:	f007 fc5a 	bl	e6a8 <_Znwj>
    6df4:	4603      	mov	r3, r0
    6df6:	461c      	mov	r4, r3
    6df8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6dfc:	9300      	str	r3, [sp, #0]
    6dfe:	4620      	mov	r0, r4
    6e00:	f04f 0106 	mov.w	r1, #6	; 0x6
    6e04:	f04f 020f 	mov.w	r2, #15	; 0xf
    6e08:	697b      	ldr	r3, [r7, #20]
    6e0a:	f006 fa99 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e0e:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	685b      	ldr	r3, [r3, #4]
    6e14:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6e18:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e1c:	f007 fc44 	bl	e6a8 <_Znwj>
    6e20:	4603      	mov	r3, r0
    6e22:	461c      	mov	r4, r3
    6e24:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e28:	9300      	str	r3, [sp, #0]
    6e2a:	4620      	mov	r0, r4
    6e2c:	f04f 0107 	mov.w	r1, #7	; 0x7
    6e30:	f04f 020c 	mov.w	r2, #12	; 0xc
    6e34:	697b      	ldr	r3, [r7, #20]
    6e36:	f006 fa83 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e3a:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6e3c:	687b      	ldr	r3, [r7, #4]
    6e3e:	685b      	ldr	r3, [r3, #4]
    6e40:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6e44:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e48:	f007 fc2e 	bl	e6a8 <_Znwj>
    6e4c:	4603      	mov	r3, r0
    6e4e:	461c      	mov	r4, r3
    6e50:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e54:	9300      	str	r3, [sp, #0]
    6e56:	4620      	mov	r0, r4
    6e58:	f04f 0108 	mov.w	r1, #8	; 0x8
    6e5c:	f04f 0208 	mov.w	r2, #8	; 0x8
    6e60:	697b      	ldr	r3, [r7, #20]
    6e62:	f006 fa6d 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e66:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	685b      	ldr	r3, [r3, #4]
    6e6c:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6e70:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e74:	f007 fc18 	bl	e6a8 <_Znwj>
    6e78:	4603      	mov	r3, r0
    6e7a:	461c      	mov	r4, r3
    6e7c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e80:	9300      	str	r3, [sp, #0]
    6e82:	4620      	mov	r0, r4
    6e84:	f04f 0108 	mov.w	r1, #8	; 0x8
    6e88:	f04f 020a 	mov.w	r2, #10	; 0xa
    6e8c:	697b      	ldr	r3, [r7, #20]
    6e8e:	f006 fa57 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e92:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	691b      	ldr	r3, [r3, #16]
    6e98:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e9c:	4618      	mov	r0, r3
    6e9e:	f007 fc9b 	bl	e7d8 <_Znaj>
    6ea2:	4603      	mov	r3, r0
    6ea4:	461a      	mov	r2, r3
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6eaa:	687b      	ldr	r3, [r7, #4]
    6eac:	6a1b      	ldr	r3, [r3, #32]
    6eae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6eb2:	4618      	mov	r0, r3
    6eb4:	f007 fc90 	bl	e7d8 <_Znaj>
    6eb8:	4603      	mov	r3, r0
    6eba:	461a      	mov	r2, r3
    6ebc:	687b      	ldr	r3, [r7, #4]
    6ebe:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	4618      	mov	r0, r3
    6ec4:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6ec8:	46bd      	mov	sp, r7
    6eca:	bdb0      	pop	{r4, r5, r7, pc}
    6ecc:	00021c90 	.word	0x00021c90
    6ed0:	20000560 	.word	0x20000560
    6ed4:	00021c98 	.word	0x00021c98

00006ed8 <_ZN7Sensors12getSingletonEv>:
#include "sensors.h"

Sensors* Sensors::sensors = NULL;
Sensors* Sensors::singleton = 0;

Sensors* Sensors::getSingleton()
    6ed8:	b590      	push	{r4, r7, lr}
    6eda:	b081      	sub	sp, #4
    6edc:	af00      	add	r7, sp, #0
{
    if(singleton == 0)
    6ede:	4b0b      	ldr	r3, [pc, #44]	(6f0c <_ZN7Sensors12getSingletonEv+0x34>)
    6ee0:	681b      	ldr	r3, [r3, #0]
    6ee2:	2b00      	cmp	r3, #0
    6ee4:	d10a      	bne.n	6efc <_ZN7Sensors12getSingletonEv+0x24>
    {
        singleton = new Sensors;
    6ee6:	f04f 0034 	mov.w	r0, #52	; 0x34
    6eea:	f007 fbdd 	bl	e6a8 <_Znwj>
    6eee:	4603      	mov	r3, r0
    6ef0:	461c      	mov	r4, r3
    6ef2:	4620      	mov	r0, r4
    6ef4:	f7ff fe92 	bl	6c1c <_ZN7SensorsC1Ev>
    6ef8:	4b04      	ldr	r3, [pc, #16]	(6f0c <_ZN7Sensors12getSingletonEv+0x34>)
    6efa:	601c      	str	r4, [r3, #0]
    }
    return singleton;
    6efc:	4b03      	ldr	r3, [pc, #12]	(6f0c <_ZN7Sensors12getSingletonEv+0x34>)
    6efe:	681b      	ldr	r3, [r3, #0]
}
    6f00:	4618      	mov	r0, r3
    6f02:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6f06:	46bd      	mov	sp, r7
    6f08:	bd90      	pop	{r4, r7, pc}
    6f0a:	46c0      	nop			(mov r8, r8)
    6f0c:	20000564 	.word	0x20000564

00006f10 <_ZN7SensorsC2Ev>:

Sensors::Sensors()
    6f10:	b5b0      	push	{r4, r5, r7, lr}
    6f12:	b088      	sub	sp, #32
    6f14:	af02      	add	r7, sp, #8
    6f16:	6078      	str	r0, [r7, #4]
    6f18:	687a      	ldr	r2, [r7, #4]
    6f1a:	4ba9      	ldr	r3, [pc, #676]	(71c0 <_ZN7SensorsC2Ev+0x2b0>)
    6f1c:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    6f1e:	4aa9      	ldr	r2, [pc, #676]	(71c4 <_ZN7SensorsC2Ev+0x2b4>)
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6f24:	4ba8      	ldr	r3, [pc, #672]	(71c8 <_ZN7SensorsC2Ev+0x2b8>)
    6f26:	f107 020a 	add.w	r2, r7, #10	; 0xa
    6f2a:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    6f2e:	4610      	mov	r0, r2
    6f30:	4619      	mov	r1, r3
    6f32:	4662      	mov	r2, ip
    6f34:	f019 fd1a 	bl	2096c <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    6f38:	f107 030a 	add.w	r3, r7, #10	; 0xa
    6f3c:	f04f 000a 	mov.w	r0, #10	; 0xa
    6f40:	4619      	mov	r1, r3
    6f42:	f003 fdd3 	bl	aaec <_ZN12AnalogSensor14initialiserADCEhPh>
    6f46:	4603      	mov	r3, r0
    6f48:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    6f4a:	687a      	ldr	r2, [r7, #4]
    6f4c:	f04f 030a 	mov.w	r3, #10	; 0xa
    6f50:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    6f52:	687a      	ldr	r2, [r7, #4]
    6f54:	f04f 0300 	mov.w	r3, #0	; 0x0
    6f58:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    6f5a:	687a      	ldr	r2, [r7, #4]
    6f5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6f60:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    6f62:	687a      	ldr	r2, [r7, #4]
    6f64:	f04f 0300 	mov.w	r3, #0	; 0x0
    6f68:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    6f6a:	f04f 0010 	mov.w	r0, #16	; 0x10
    6f6e:	f007 fb9b 	bl	e6a8 <_Znwj>
    6f72:	4603      	mov	r3, r0
    6f74:	461c      	mov	r4, r3
    6f76:	687b      	ldr	r3, [r7, #4]
    6f78:	691b      	ldr	r3, [r3, #16]
    6f7a:	4620      	mov	r0, r4
    6f7c:	4619      	mov	r1, r3
    6f7e:	f015 f9e3 	bl	1c348 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    6f82:	687b      	ldr	r3, [r7, #4]
    6f84:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    6f86:	f04f 0010 	mov.w	r0, #16	; 0x10
    6f8a:	f007 fb8d 	bl	e6a8 <_Znwj>
    6f8e:	4603      	mov	r3, r0
    6f90:	461c      	mov	r4, r3
    6f92:	687b      	ldr	r3, [r7, #4]
    6f94:	6a1b      	ldr	r3, [r3, #32]
    6f96:	4620      	mov	r0, r4
    6f98:	4619      	mov	r1, r3
    6f9a:	f015 f9fb 	bl	1c394 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    6f9e:	687b      	ldr	r3, [r7, #4]
    6fa0:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    6fa2:	f04f 0010 	mov.w	r0, #16	; 0x10
    6fa6:	f007 fb7f 	bl	e6a8 <_Znwj>
    6faa:	4603      	mov	r3, r0
    6fac:	461c      	mov	r4, r3
    6fae:	687b      	ldr	r3, [r7, #4]
    6fb0:	699b      	ldr	r3, [r3, #24]
    6fb2:	4620      	mov	r0, r4
    6fb4:	4619      	mov	r1, r3
    6fb6:	f015 fa0d 	bl	1c3d4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    6fbe:	687b      	ldr	r3, [r7, #4]
    6fc0:	689b      	ldr	r3, [r3, #8]
    6fc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6fc6:	4618      	mov	r0, r3
    6fc8:	f007 fc06 	bl	e7d8 <_Znaj>
    6fcc:	4603      	mov	r3, r0
    6fce:	461a      	mov	r2, r3
    6fd0:	687b      	ldr	r3, [r7, #4]
    6fd2:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6fd4:	687b      	ldr	r3, [r7, #4]
    6fd6:	685d      	ldr	r5, [r3, #4]
    6fd8:	f04f 0018 	mov.w	r0, #24	; 0x18
    6fdc:	f007 fb64 	bl	e6a8 <_Znwj>
    6fe0:	4603      	mov	r3, r0
    6fe2:	461c      	mov	r4, r3
    6fe4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6fe8:	9300      	str	r3, [sp, #0]
    6fea:	4620      	mov	r0, r4
    6fec:	f04f 0102 	mov.w	r1, #2	; 0x2
    6ff0:	f04f 0209 	mov.w	r2, #9	; 0x9
    6ff4:	697b      	ldr	r3, [r7, #20]
    6ff6:	f006 f9a3 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6ffa:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6ffc:	687b      	ldr	r3, [r7, #4]
    6ffe:	685b      	ldr	r3, [r3, #4]
    7000:	f103 0504 	add.w	r5, r3, #4	; 0x4
    7004:	f04f 0018 	mov.w	r0, #24	; 0x18
    7008:	f007 fb4e 	bl	e6a8 <_Znwj>
    700c:	4603      	mov	r3, r0
    700e:	461c      	mov	r4, r3
    7010:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7014:	9300      	str	r3, [sp, #0]
    7016:	4620      	mov	r0, r4
    7018:	f04f 0103 	mov.w	r1, #3	; 0x3
    701c:	f04f 020e 	mov.w	r2, #14	; 0xe
    7020:	697b      	ldr	r3, [r7, #20]
    7022:	f006 f98d 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7026:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	685b      	ldr	r3, [r3, #4]
    702c:	f103 0508 	add.w	r5, r3, #8	; 0x8
    7030:	f04f 0018 	mov.w	r0, #24	; 0x18
    7034:	f007 fb38 	bl	e6a8 <_Znwj>
    7038:	4603      	mov	r3, r0
    703a:	461c      	mov	r4, r3
    703c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7040:	9300      	str	r3, [sp, #0]
    7042:	4620      	mov	r0, r4
    7044:	f04f 0104 	mov.w	r1, #4	; 0x4
    7048:	f04f 020d 	mov.w	r2, #13	; 0xd
    704c:	697b      	ldr	r3, [r7, #20]
    704e:	f006 f977 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7052:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    7054:	687b      	ldr	r3, [r7, #4]
    7056:	685b      	ldr	r3, [r3, #4]
    7058:	f103 050c 	add.w	r5, r3, #12	; 0xc
    705c:	f04f 0018 	mov.w	r0, #24	; 0x18
    7060:	f007 fb22 	bl	e6a8 <_Znwj>
    7064:	4603      	mov	r3, r0
    7066:	461c      	mov	r4, r3
    7068:	f640 13c4 	movw	r3, #2500	; 0x9c4
    706c:	9300      	str	r3, [sp, #0]
    706e:	4620      	mov	r0, r4
    7070:	f04f 0105 	mov.w	r1, #5	; 0x5
    7074:	f04f 020b 	mov.w	r2, #11	; 0xb
    7078:	697b      	ldr	r3, [r7, #20]
    707a:	f006 f961 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    707e:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	685b      	ldr	r3, [r3, #4]
    7084:	f103 0510 	add.w	r5, r3, #16	; 0x10
    7088:	f04f 0018 	mov.w	r0, #24	; 0x18
    708c:	f007 fb0c 	bl	e6a8 <_Znwj>
    7090:	4603      	mov	r3, r0
    7092:	461c      	mov	r4, r3
    7094:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7098:	9300      	str	r3, [sp, #0]
    709a:	4620      	mov	r0, r4
    709c:	f04f 0100 	mov.w	r1, #0	; 0x0
    70a0:	f04f 0205 	mov.w	r2, #5	; 0x5
    70a4:	697b      	ldr	r3, [r7, #20]
    70a6:	f006 f94b 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    70aa:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	685b      	ldr	r3, [r3, #4]
    70b0:	f103 0514 	add.w	r5, r3, #20	; 0x14
    70b4:	f04f 0018 	mov.w	r0, #24	; 0x18
    70b8:	f007 faf6 	bl	e6a8 <_Znwj>
    70bc:	4603      	mov	r3, r0
    70be:	461c      	mov	r4, r3
    70c0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    70c4:	9300      	str	r3, [sp, #0]
    70c6:	4620      	mov	r0, r4
    70c8:	f04f 0101 	mov.w	r1, #1	; 0x1
    70cc:	f04f 0204 	mov.w	r2, #4	; 0x4
    70d0:	697b      	ldr	r3, [r7, #20]
    70d2:	f006 f935 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    70d6:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	685b      	ldr	r3, [r3, #4]
    70dc:	f103 0518 	add.w	r5, r3, #24	; 0x18
    70e0:	f04f 0018 	mov.w	r0, #24	; 0x18
    70e4:	f007 fae0 	bl	e6a8 <_Znwj>
    70e8:	4603      	mov	r3, r0
    70ea:	461c      	mov	r4, r3
    70ec:	f640 13c4 	movw	r3, #2500	; 0x9c4
    70f0:	9300      	str	r3, [sp, #0]
    70f2:	4620      	mov	r0, r4
    70f4:	f04f 0106 	mov.w	r1, #6	; 0x6
    70f8:	f04f 020f 	mov.w	r2, #15	; 0xf
    70fc:	697b      	ldr	r3, [r7, #20]
    70fe:	f006 f91f 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7102:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	685b      	ldr	r3, [r3, #4]
    7108:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    710c:	f04f 0018 	mov.w	r0, #24	; 0x18
    7110:	f007 faca 	bl	e6a8 <_Znwj>
    7114:	4603      	mov	r3, r0
    7116:	461c      	mov	r4, r3
    7118:	f640 13c4 	movw	r3, #2500	; 0x9c4
    711c:	9300      	str	r3, [sp, #0]
    711e:	4620      	mov	r0, r4
    7120:	f04f 0107 	mov.w	r1, #7	; 0x7
    7124:	f04f 020c 	mov.w	r2, #12	; 0xc
    7128:	697b      	ldr	r3, [r7, #20]
    712a:	f006 f909 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    712e:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    7130:	687b      	ldr	r3, [r7, #4]
    7132:	685b      	ldr	r3, [r3, #4]
    7134:	f103 0520 	add.w	r5, r3, #32	; 0x20
    7138:	f04f 0018 	mov.w	r0, #24	; 0x18
    713c:	f007 fab4 	bl	e6a8 <_Znwj>
    7140:	4603      	mov	r3, r0
    7142:	461c      	mov	r4, r3
    7144:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7148:	9300      	str	r3, [sp, #0]
    714a:	4620      	mov	r0, r4
    714c:	f04f 0108 	mov.w	r1, #8	; 0x8
    7150:	f04f 0208 	mov.w	r2, #8	; 0x8
    7154:	697b      	ldr	r3, [r7, #20]
    7156:	f006 f8f3 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    715a:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	685b      	ldr	r3, [r3, #4]
    7160:	f103 0524 	add.w	r5, r3, #36	; 0x24
    7164:	f04f 0018 	mov.w	r0, #24	; 0x18
    7168:	f007 fa9e 	bl	e6a8 <_Znwj>
    716c:	4603      	mov	r3, r0
    716e:	461c      	mov	r4, r3
    7170:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7174:	9300      	str	r3, [sp, #0]
    7176:	4620      	mov	r0, r4
    7178:	f04f 0108 	mov.w	r1, #8	; 0x8
    717c:	f04f 020a 	mov.w	r2, #10	; 0xa
    7180:	697b      	ldr	r3, [r7, #20]
    7182:	f006 f8dd 	bl	d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7186:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    7188:	687b      	ldr	r3, [r7, #4]
    718a:	691b      	ldr	r3, [r3, #16]
    718c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7190:	4618      	mov	r0, r3
    7192:	f007 fb21 	bl	e7d8 <_Znaj>
    7196:	4603      	mov	r3, r0
    7198:	461a      	mov	r2, r3
    719a:	687b      	ldr	r3, [r7, #4]
    719c:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    719e:	687b      	ldr	r3, [r7, #4]
    71a0:	6a1b      	ldr	r3, [r3, #32]
    71a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    71a6:	4618      	mov	r0, r3
    71a8:	f007 fb16 	bl	e7d8 <_Znaj>
    71ac:	4603      	mov	r3, r0
    71ae:	461a      	mov	r2, r3
    71b0:	687b      	ldr	r3, [r7, #4]
    71b2:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    71b4:	687b      	ldr	r3, [r7, #4]
    71b6:	4618      	mov	r0, r3
    71b8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    71bc:	46bd      	mov	sp, r7
    71be:	bdb0      	pop	{r4, r5, r7, pc}
    71c0:	00021c90 	.word	0x00021c90
    71c4:	20000560 	.word	0x20000560
    71c8:	00021c98 	.word	0x00021c98

000071cc <_ZN5Servo13shutDownServoEv>:

    float rc = m_RC0degre + m_coefRC * angle;
	pwm_handler.setDutyCycle(rc);
}

void Servo::shutDownServo()
    71cc:	b580      	push	{r7, lr}
    71ce:	b082      	sub	sp, #8
    71d0:	af00      	add	r7, sp, #0
    71d2:	6078      	str	r0, [r7, #4]
{
    pwm_handler.setPulseWidth(0);
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	4618      	mov	r0, r3
    71d8:	f04f 0100 	mov.w	r1, #0	; 0x0
    71dc:	f005 faa4 	bl	c728 <_ZN10PWMHandler13setPulseWidthEt>
}
    71e0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    71e4:	46bd      	mov	sp, r7
    71e6:	bd80      	pop	{r7, pc}

000071e8 <_ZN5Servo9goToAngleEf>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}

void Servo::goToAngle(Angle angle)
    71e8:	b590      	push	{r4, r7, lr}
    71ea:	b085      	sub	sp, #20
    71ec:	af00      	add	r7, sp, #0
    71ee:	6078      	str	r0, [r7, #4]
    71f0:	6039      	str	r1, [r7, #0]
	float pulseWidth = angle*19.5f+1200.0f; // pour le servo ES 539 made in malaysia

    // Donner la rapport au PWM
	pwm_handler.setPulseWidth(pulseWidth);*/

    if (angle < 0.0)
    71f2:	6838      	ldr	r0, [r7, #0]
    71f4:	4914      	ldr	r1, [pc, #80]	(7248 <_ZN5Servo9goToAngleEf+0x60>)
    71f6:	f013 ffd9 	bl	1b1ac <__aeabi_fcmplt>
    71fa:	4603      	mov	r3, r0
    71fc:	2b00      	cmp	r3, #0
    71fe:	d002      	beq.n	7206 <_ZN5Servo9goToAngleEf+0x1e>
        angle = 0.0f;
    7200:	4b11      	ldr	r3, [pc, #68]	(7248 <_ZN5Servo9goToAngleEf+0x60>)
    7202:	603b      	str	r3, [r7, #0]
    7204:	e008      	b.n	7218 <_ZN5Servo9goToAngleEf+0x30>
    else if (angle > 180.0f)
    7206:	6838      	ldr	r0, [r7, #0]
    7208:	4910      	ldr	r1, [pc, #64]	(724c <_ZN5Servo9goToAngleEf+0x64>)
    720a:	f013 ffed 	bl	1b1e8 <__aeabi_fcmpgt>
    720e:	4603      	mov	r3, r0
    7210:	2b00      	cmp	r3, #0
    7212:	d001      	beq.n	7218 <_ZN5Servo9goToAngleEf+0x30>
        angle = 180.0f;
    7214:	4b0d      	ldr	r3, [pc, #52]	(724c <_ZN5Servo9goToAngleEf+0x64>)
    7216:	603b      	str	r3, [r7, #0]

    float rc = m_RC0degre + m_coefRC * angle;
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	68dc      	ldr	r4, [r3, #12]
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	691b      	ldr	r3, [r3, #16]
    7220:	4618      	mov	r0, r3
    7222:	6839      	ldr	r1, [r7, #0]
    7224:	f013 fe26 	bl	1ae74 <__aeabi_fmul>
    7228:	4603      	mov	r3, r0
    722a:	4620      	mov	r0, r4
    722c:	4619      	mov	r1, r3
    722e:	f013 fd19 	bl	1ac64 <__addsf3>
    7232:	4603      	mov	r3, r0
    7234:	60fb      	str	r3, [r7, #12]
	pwm_handler.setDutyCycle(rc);
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	4618      	mov	r0, r3
    723a:	68f9      	ldr	r1, [r7, #12]
    723c:	f005 fac6 	bl	c7cc <_ZN10PWMHandler12setDutyCycleEf>
}
    7240:	f107 0714 	add.w	r7, r7, #20	; 0x14
    7244:	46bd      	mov	sp, r7
    7246:	bd90      	pop	{r4, r7, pc}
    7248:	00000000 	.word	0x00000000
    724c:	43340000 	.word	0x43340000

00007250 <_ZN5Servo7initPinEP12GPIO_TypeDeft>:
{
    shutDownServo();
}

// initialise la pin du servo
void Servo::initPin(GPIO_TypeDef* GPIOx, uint16_t pinX)
    7250:	b580      	push	{r7, lr}
    7252:	b084      	sub	sp, #16
    7254:	af00      	add	r7, sp, #0
    7256:	6078      	str	r0, [r7, #4]
    7258:	460b      	mov	r3, r1
    725a:	807b      	strh	r3, [r7, #2]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = pinX;
    725c:	887b      	ldrh	r3, [r7, #2]
    725e:	81bb      	strh	r3, [r7, #12]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    7260:	f04f 0348 	mov.w	r3, #72	; 0x48
    7264:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    7266:	f04f 0303 	mov.w	r3, #3	; 0x3
    726a:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    726c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7270:	6878      	ldr	r0, [r7, #4]
    7272:	4619      	mov	r1, r3
    7274:	f7fa fa1c 	bl	16b0 <GPIO_Init>
}
    7278:	f107 0710 	add.w	r7, r7, #16	; 0x10
    727c:	46bd      	mov	sp, r7
    727e:	bd80      	pop	{r7, pc}

00007280 <_ZN5ServoD1Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    7280:	b580      	push	{r7, lr}
    7282:	b082      	sub	sp, #8
    7284:	af00      	add	r7, sp, #0
    7286:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    7288:	6878      	ldr	r0, [r7, #4]
    728a:	f7ff ff9f 	bl	71cc <_ZN5Servo13shutDownServoEv>
}
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	4618      	mov	r0, r3
    7292:	f005 fa7b 	bl	c78c <_ZN10PWMHandlerD1Ev>
    7296:	687b      	ldr	r3, [r7, #4]
    7298:	4618      	mov	r0, r3
    729a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    729e:	46bd      	mov	sp, r7
    72a0:	bd80      	pop	{r7, pc}
    72a2:	46c0      	nop			(mov r8, r8)

000072a4 <_ZN5ServoD2Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    72a4:	b580      	push	{r7, lr}
    72a6:	b082      	sub	sp, #8
    72a8:	af00      	add	r7, sp, #0
    72aa:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    72ac:	6878      	ldr	r0, [r7, #4]
    72ae:	f7ff ff8d 	bl	71cc <_ZN5Servo13shutDownServoEv>
}
    72b2:	687b      	ldr	r3, [r7, #4]
    72b4:	4618      	mov	r0, r3
    72b6:	f005 fa69 	bl	c78c <_ZN10PWMHandlerD1Ev>
    72ba:	687b      	ldr	r3, [r7, #4]
    72bc:	4618      	mov	r0, r3
    72be:	f107 0708 	add.w	r7, r7, #8	; 0x8
    72c2:	46bd      	mov	sp, r7
    72c4:	bd80      	pop	{r7, pc}
    72c6:	46c0      	nop			(mov r8, r8)

000072c8 <_ZN5ServoC1EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    72c8:	b580      	push	{r7, lr}
    72ca:	b084      	sub	sp, #16
    72cc:	af00      	add	r7, sp, #0
    72ce:	60f8      	str	r0, [r7, #12]
    72d0:	60b9      	str	r1, [r7, #8]
    72d2:	603b      	str	r3, [r7, #0]
    72d4:	4613      	mov	r3, r2
    72d6:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    72d8:	68fb      	ldr	r3, [r7, #12]
    72da:	79fa      	ldrb	r2, [r7, #7]
    72dc:	4618      	mov	r0, r3
    72de:	68b9      	ldr	r1, [r7, #8]
    72e0:	f005 fa96 	bl	c810 <_ZN10PWMHandlerC1EP5Timerh>
    72e4:	68fa      	ldr	r2, [r7, #12]
    72e6:	68bb      	ldr	r3, [r7, #8]
    72e8:	6093      	str	r3, [r2, #8]
    72ea:	68fa      	ldr	r2, [r7, #12]
    72ec:	683b      	ldr	r3, [r7, #0]
    72ee:	60d3      	str	r3, [r2, #12]
    72f0:	69b8      	ldr	r0, [r7, #24]
    72f2:	6839      	ldr	r1, [r7, #0]
    72f4:	f013 fcb4 	bl	1ac60 <__aeabi_fsub>
    72f8:	4603      	mov	r3, r0
    72fa:	4618      	mov	r0, r3
    72fc:	4906      	ldr	r1, [pc, #24]	(7318 <_ZN5ServoC1EP5Timerhff+0x50>)
    72fe:	f013 fe6d 	bl	1afdc <__aeabi_fdiv>
    7302:	4603      	mov	r3, r0
    7304:	461a      	mov	r2, r3
    7306:	68fb      	ldr	r3, [r7, #12]
    7308:	611a      	str	r2, [r3, #16]
{
}
    730a:	68fb      	ldr	r3, [r7, #12]
    730c:	4618      	mov	r0, r3
    730e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7312:	46bd      	mov	sp, r7
    7314:	bd80      	pop	{r7, pc}
    7316:	46c0      	nop			(mov r8, r8)
    7318:	43340000 	.word	0x43340000

0000731c <_ZN5ServoC2EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    731c:	b580      	push	{r7, lr}
    731e:	b084      	sub	sp, #16
    7320:	af00      	add	r7, sp, #0
    7322:	60f8      	str	r0, [r7, #12]
    7324:	60b9      	str	r1, [r7, #8]
    7326:	603b      	str	r3, [r7, #0]
    7328:	4613      	mov	r3, r2
    732a:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    732c:	68fb      	ldr	r3, [r7, #12]
    732e:	79fa      	ldrb	r2, [r7, #7]
    7330:	4618      	mov	r0, r3
    7332:	68b9      	ldr	r1, [r7, #8]
    7334:	f005 fa6c 	bl	c810 <_ZN10PWMHandlerC1EP5Timerh>
    7338:	68fa      	ldr	r2, [r7, #12]
    733a:	68bb      	ldr	r3, [r7, #8]
    733c:	6093      	str	r3, [r2, #8]
    733e:	68fa      	ldr	r2, [r7, #12]
    7340:	683b      	ldr	r3, [r7, #0]
    7342:	60d3      	str	r3, [r2, #12]
    7344:	69b8      	ldr	r0, [r7, #24]
    7346:	6839      	ldr	r1, [r7, #0]
    7348:	f013 fc8a 	bl	1ac60 <__aeabi_fsub>
    734c:	4603      	mov	r3, r0
    734e:	4618      	mov	r0, r3
    7350:	4906      	ldr	r1, [pc, #24]	(736c <_ZN5ServoC2EP5Timerhff+0x50>)
    7352:	f013 fe43 	bl	1afdc <__aeabi_fdiv>
    7356:	4603      	mov	r3, r0
    7358:	461a      	mov	r2, r3
    735a:	68fb      	ldr	r3, [r7, #12]
    735c:	611a      	str	r2, [r3, #16]
{
}
    735e:	68fb      	ldr	r3, [r7, #12]
    7360:	4618      	mov	r0, r3
    7362:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7366:	46bd      	mov	sp, r7
    7368:	bd80      	pop	{r7, pc}
    736a:	46c0      	nop			(mov r8, r8)
    736c:	43340000 	.word	0x43340000

00007370 <_Z9wrapAnglef>:
#include "angle.h"
#include <math.h>

// Retourne la valeur de l'angle dans un float entre -PI et PI.
Angle wrapAngle(Angle angle)
    7370:	b580      	push	{r7, lr}
    7372:	b082      	sub	sp, #8
    7374:	af00      	add	r7, sp, #0
    7376:	6078      	str	r0, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    7378:	6878      	ldr	r0, [r7, #4]
    737a:	491f      	ldr	r1, [pc, #124]	(73f8 <_Z9wrapAnglef+0x88>)
    737c:	f013 ff34 	bl	1b1e8 <__aeabi_fcmpgt>
    7380:	4603      	mov	r3, r0
    7382:	2b00      	cmp	r3, #0
    7384:	d106      	bne.n	7394 <_Z9wrapAnglef+0x24>
    7386:	e01a      	b.n	73be <_Z9wrapAnglef+0x4e>
    {
        while (angle > M_PI)
            angle -= M_2PI;
    7388:	6878      	ldr	r0, [r7, #4]
    738a:	491c      	ldr	r1, [pc, #112]	(73fc <_Z9wrapAnglef+0x8c>)
    738c:	f013 fc68 	bl	1ac60 <__aeabi_fsub>
    7390:	4603      	mov	r3, r0
    7392:	607b      	str	r3, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    {
        while (angle > M_PI)
    7394:	6878      	ldr	r0, [r7, #4]
    7396:	f013 f8fb 	bl	1a590 <__aeabi_f2d>
    739a:	4602      	mov	r2, r0
    739c:	460b      	mov	r3, r1
    739e:	4610      	mov	r0, r2
    73a0:	4619      	mov	r1, r3
    73a2:	a211      	add	r2, pc, #68	(adr r2, 73e8 <_Z9wrapAnglef+0x78>)
    73a4:	ca0c      	ldmia	r2!, {r2, r3}
    73a6:	f013 fbd5 	bl	1ab54 <__aeabi_dcmpgt>
    73aa:	4603      	mov	r3, r0
    73ac:	2b00      	cmp	r3, #0
    73ae:	d1eb      	bne.n	7388 <_Z9wrapAnglef+0x18>
    73b0:	e013      	b.n	73da <_Z9wrapAnglef+0x6a>
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
            angle += M_2PI;
    73b2:	6878      	ldr	r0, [r7, #4]
    73b4:	4911      	ldr	r1, [pc, #68]	(73fc <_Z9wrapAnglef+0x8c>)
    73b6:	f013 fc55 	bl	1ac64 <__addsf3>
    73ba:	4603      	mov	r3, r0
    73bc:	607b      	str	r3, [r7, #4]
        while (angle > M_PI)
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
    73be:	6878      	ldr	r0, [r7, #4]
    73c0:	f013 f8e6 	bl	1a590 <__aeabi_f2d>
    73c4:	4602      	mov	r2, r0
    73c6:	460b      	mov	r3, r1
    73c8:	4610      	mov	r0, r2
    73ca:	4619      	mov	r1, r3
    73cc:	a208      	add	r2, pc, #32	(adr r2, 73f0 <_Z9wrapAnglef+0x80>)
    73ce:	ca0c      	ldmia	r2!, {r2, r3}
    73d0:	f013 fba2 	bl	1ab18 <__aeabi_dcmplt>
    73d4:	4603      	mov	r3, r0
    73d6:	2b00      	cmp	r3, #0
    73d8:	d1eb      	bne.n	73b2 <_Z9wrapAnglef+0x42>
            angle += M_2PI;
    }
    return angle;
    73da:	687b      	ldr	r3, [r7, #4]
}
    73dc:	4618      	mov	r0, r3
    73de:	f107 0708 	add.w	r7, r7, #8	; 0x8
    73e2:	46bd      	mov	sp, r7
    73e4:	bd80      	pop	{r7, pc}
    73e6:	46c0      	nop			(mov r8, r8)
    73e8:	54442d18 	.word	0x54442d18
    73ec:	400921fb 	.word	0x400921fb
    73f0:	54442d18 	.word	0x54442d18
    73f4:	c00921fb 	.word	0xc00921fb
    73f8:	00000000 	.word	0x00000000
    73fc:	40c90fdb 	.word	0x40c90fdb

00007400 <_Z7angleEqff>:

// Vérifie s'il y a égalité ou presque entre deux angles.
bool angleEq(Angle a1, Angle a2)
    7400:	b580      	push	{r7, lr}
    7402:	b084      	sub	sp, #16
    7404:	af00      	add	r7, sp, #0
    7406:	60f8      	str	r0, [r7, #12]
    7408:	60b9      	str	r1, [r7, #8]
{
    static const Angle epsilon = 0.1;
    return (fabs(wrapAngle(a1 - a2)) < epsilon);
    740a:	68f8      	ldr	r0, [r7, #12]
    740c:	68b9      	ldr	r1, [r7, #8]
    740e:	f013 fc27 	bl	1ac60 <__aeabi_fsub>
    7412:	4603      	mov	r3, r0
    7414:	4618      	mov	r0, r3
    7416:	f7ff ffab 	bl	7370 <_Z9wrapAnglef>
    741a:	4603      	mov	r3, r0
    741c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7420:	f04f 0300 	mov.w	r3, #0	; 0x0
    7424:	71fb      	strb	r3, [r7, #7]
    7426:	4610      	mov	r0, r2
    7428:	4907      	ldr	r1, [pc, #28]	(7448 <_Z7angleEqff+0x48>)
    742a:	f013 febf 	bl	1b1ac <__aeabi_fcmplt>
    742e:	4603      	mov	r3, r0
    7430:	2b00      	cmp	r3, #0
    7432:	d002      	beq.n	743a <_Z7angleEqff+0x3a>
    7434:	f04f 0301 	mov.w	r3, #1	; 0x1
    7438:	71fb      	strb	r3, [r7, #7]
    743a:	79fb      	ldrb	r3, [r7, #7]
}
    743c:	4618      	mov	r0, r3
    743e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7442:	46bd      	mov	sp, r7
    7444:	bd80      	pop	{r7, pc}
    7446:	46c0      	nop			(mov r8, r8)
    7448:	3dcccccd 	.word	0x3dcccccd
    744c:	46c046c0 	.word	0x46c046c0

00007450 <_ZN14Asservissement14setLinearSpeedEf>:
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    NVIC_Init(&SysTick_IRQ);
#endif
}

void Asservissement::setLinearSpeed(Vitesse vitesse)
    7450:	b480      	push	{r7}
    7452:	b083      	sub	sp, #12
    7454:	af00      	add	r7, sp, #0
    7456:	6078      	str	r0, [r7, #4]
    7458:	6039      	str	r1, [r7, #0]
{
    vitesseLineaire = vitesse;
    745a:	687a      	ldr	r2, [r7, #4]
    745c:	683b      	ldr	r3, [r7, #0]
    745e:	64d3      	str	r3, [r2, #76]
    //setEnabledPIDDistance(true);
}
    7460:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7464:	46bd      	mov	sp, r7
    7466:	bc80      	pop	{r7}
    7468:	4770      	bx	lr
    746a:	46c0      	nop			(mov r8, r8)

0000746c <_ZN14Asservissement15setAngularSpeedEf>:

void Asservissement::setAngularSpeed(VitesseAngulaire vitesse)
    746c:	b480      	push	{r7}
    746e:	b083      	sub	sp, #12
    7470:	af00      	add	r7, sp, #0
    7472:	6078      	str	r0, [r7, #4]
    7474:	6039      	str	r1, [r7, #0]
{
    vitesseAngulaire = vitesse;
    7476:	687a      	ldr	r2, [r7, #4]
    7478:	683b      	ldr	r3, [r7, #0]
    747a:	6513      	str	r3, [r2, #80]
    //setEnabledPIDAngle(true);
}
    747c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7480:	46bd      	mov	sp, r7
    7482:	bc80      	pop	{r7}
    7484:	4770      	bx	lr
    7486:	46c0      	nop			(mov r8, r8)

00007488 <_ZN14Asservissement16setCommandSpeedsEP7Command>:

void Asservissement::setCommandSpeeds(Command* command)
    7488:	b580      	push	{r7, lr}
    748a:	b082      	sub	sp, #8
    748c:	af00      	add	r7, sp, #0
    748e:	6078      	str	r0, [r7, #4]
    7490:	6039      	str	r1, [r7, #0]
{
    if (command != NULL)
    7492:	683b      	ldr	r3, [r7, #0]
    7494:	2b00      	cmp	r3, #0
    7496:	d018      	beq.n	74ca <_ZN14Asservissement16setCommandSpeedsEP7Command+0x42>
    {
        setLinearSpeed(command->getLinearSpeed());
    7498:	683b      	ldr	r3, [r7, #0]
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	f103 0310 	add.w	r3, r3, #16	; 0x10
    74a0:	681b      	ldr	r3, [r3, #0]
    74a2:	6838      	ldr	r0, [r7, #0]
    74a4:	4798      	blx	r3
    74a6:	4603      	mov	r3, r0
    74a8:	6878      	ldr	r0, [r7, #4]
    74aa:	4619      	mov	r1, r3
    74ac:	f7ff ffd0 	bl	7450 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(command->getAngularSpeed());
    74b0:	683b      	ldr	r3, [r7, #0]
    74b2:	681b      	ldr	r3, [r3, #0]
    74b4:	f103 0314 	add.w	r3, r3, #20	; 0x14
    74b8:	681b      	ldr	r3, [r3, #0]
    74ba:	6838      	ldr	r0, [r7, #0]
    74bc:	4798      	blx	r3
    74be:	4603      	mov	r3, r0
    74c0:	6878      	ldr	r0, [r7, #4]
    74c2:	4619      	mov	r1, r3
    74c4:	f7ff ffd2 	bl	746c <_ZN14Asservissement15setAngularSpeedEf>
    74c8:	e007      	b.n	74da <_ZN14Asservissement16setCommandSpeedsEP7Command+0x52>
    }
    else
    {
        setLinearSpeed(0.0f);
    74ca:	6878      	ldr	r0, [r7, #4]
    74cc:	4905      	ldr	r1, [pc, #20]	(74e4 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    74ce:	f7ff ffbf 	bl	7450 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(0.0f);
    74d2:	6878      	ldr	r0, [r7, #4]
    74d4:	4903      	ldr	r1, [pc, #12]	(74e4 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    74d6:	f7ff ffc9 	bl	746c <_ZN14Asservissement15setAngularSpeedEf>
    }

    /*setEnabledPIDDistance(true);
    setEnabledPIDAngle(true);
    resetFixedDuty();*/
}
    74da:	f107 0708 	add.w	r7, r7, #8	; 0x8
    74de:	46bd      	mov	sp, r7
    74e0:	bd80      	pop	{r7, pc}
    74e2:	46c0      	nop			(mov r8, r8)
    74e4:	00000000 	.word	0x00000000

000074e8 <_ZN14Asservissement14getLinearSpeedEv>:

Distance Asservissement::getLinearSpeed()
    74e8:	b480      	push	{r7}
    74ea:	b083      	sub	sp, #12
    74ec:	af00      	add	r7, sp, #0
    74ee:	6078      	str	r0, [r7, #4]
{
  /*  if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getLeftPWM();
    else*/
        return vitesseLineaire;
    74f0:	687b      	ldr	r3, [r7, #4]
    74f2:	6cdb      	ldr	r3, [r3, #76]
}
    74f4:	4618      	mov	r0, r3
    74f6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    74fa:	46bd      	mov	sp, r7
    74fc:	bc80      	pop	{r7}
    74fe:	4770      	bx	lr

00007500 <_ZN14Asservissement15getAngularSpeedEv>:

Angle Asservissement::getAngularSpeed()
    7500:	b480      	push	{r7}
    7502:	b083      	sub	sp, #12
    7504:	af00      	add	r7, sp, #0
    7506:	6078      	str	r0, [r7, #4]
{
   /* if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	6d1b      	ldr	r3, [r3, #80]
}
    750c:	4618      	mov	r0, r3
    750e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7512:	46bd      	mov	sp, r7
    7514:	bc80      	pop	{r7}
    7516:	4770      	bx	lr

00007518 <_ZN14Asservissement8finMatchEv>:
    Asservissement::asservissement->update();
}

#endif

void Asservissement::finMatch()
    7518:	b480      	push	{r7}
    751a:	af00      	add	r7, sp, #0
{
    Asservissement::matchFini = true;
    751c:	4b03      	ldr	r3, [pc, #12]	(752c <_ZN14Asservissement8finMatchEv+0x14>)
    751e:	f04f 0201 	mov.w	r2, #1	; 0x1
    7522:	701a      	strb	r2, [r3, #0]
    #ifdef ROBOTHW


    #endif
}
    7524:	46bd      	mov	sp, r7
    7526:	bc80      	pop	{r7}
    7528:	4770      	bx	lr
    752a:	46c0      	nop			(mov r8, r8)
    752c:	2000056c 	.word	0x2000056c

00007530 <_ZN14Asservissement21setEnabledPIDDistanceEb>:

void Asservissement::setEnabledPIDDistance(bool enabled)
    7530:	b480      	push	{r7}
    7532:	b083      	sub	sp, #12
    7534:	af00      	add	r7, sp, #0
    7536:	6078      	str	r0, [r7, #4]
    7538:	460b      	mov	r3, r1
    753a:	70fb      	strb	r3, [r7, #3]
{
    activePIDDistance = enabled;
    753c:	687a      	ldr	r2, [r7, #4]
    753e:	78fb      	ldrb	r3, [r7, #3]
    7540:	f882 3054 	strb.w	r3, [r2, #84]
}
    7544:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7548:	46bd      	mov	sp, r7
    754a:	bc80      	pop	{r7}
    754c:	4770      	bx	lr
    754e:	46c0      	nop			(mov r8, r8)

00007550 <_ZN14Asservissement18setEnabledPIDAngleEb>:

void Asservissement::setEnabledPIDAngle(bool enabled)
    7550:	b480      	push	{r7}
    7552:	b083      	sub	sp, #12
    7554:	af00      	add	r7, sp, #0
    7556:	6078      	str	r0, [r7, #4]
    7558:	460b      	mov	r3, r1
    755a:	70fb      	strb	r3, [r7, #3]
{
    activePIDAngle = enabled;
    755c:	687a      	ldr	r2, [r7, #4]
    755e:	78fb      	ldrb	r3, [r7, #3]
    7560:	f882 3055 	strb.w	r3, [r2, #85]
}
    7564:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7568:	46bd      	mov	sp, r7
    756a:	bc80      	pop	{r7}
    756c:	4770      	bx	lr
    756e:	46c0      	nop			(mov r8, r8)

00007570 <_ZN14Asservissement13setLinearDutyEf>:

void Asservissement::setLinearDuty(float duty)
    7570:	b580      	push	{r7, lr}
    7572:	b086      	sub	sp, #24
    7574:	af00      	add	r7, sp, #0
    7576:	6178      	str	r0, [r7, #20]
    7578:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDDistance(false);
    757a:	6978      	ldr	r0, [r7, #20]
    757c:	f04f 0100 	mov.w	r1, #0	; 0x0
    7580:	f7ff ffd6 	bl	7530 <_ZN14Asservissement21setEnabledPIDDistanceEb>
    fixedLinearDuty = MAX( MIN( duty, FIXED_LINEAR_DUTY_MAX), -FIXED_LINEAR_DUTY_MAX);
    7584:	6938      	ldr	r0, [r7, #16]
    7586:	f013 f803 	bl	1a590 <__aeabi_f2d>
    758a:	4602      	mov	r2, r0
    758c:	460b      	mov	r3, r1
    758e:	4610      	mov	r0, r2
    7590:	4619      	mov	r1, r3
    7592:	a221      	add	r2, pc, #132	(adr r2, 7618 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    7594:	ca0c      	ldmia	r2!, {r2, r3}
    7596:	f013 fadd 	bl	1ab54 <__aeabi_dcmpgt>
    759a:	4603      	mov	r3, r0
    759c:	2b00      	cmp	r3, #0
    759e:	d003      	beq.n	75a8 <_ZN14Asservissement13setLinearDutyEf+0x38>
    75a0:	f04f 0200 	mov.w	r2, #0	; 0x0
    75a4:	60ba      	str	r2, [r7, #8]
    75a6:	e015      	b.n	75d4 <_ZN14Asservissement13setLinearDutyEf+0x64>
    75a8:	6938      	ldr	r0, [r7, #16]
    75aa:	f012 fff1 	bl	1a590 <__aeabi_f2d>
    75ae:	4602      	mov	r2, r0
    75b0:	460b      	mov	r3, r1
    75b2:	f04f 0100 	mov.w	r1, #0	; 0x0
    75b6:	70f9      	strb	r1, [r7, #3]
    75b8:	4610      	mov	r0, r2
    75ba:	4619      	mov	r1, r3
    75bc:	a218      	add	r2, pc, #96	(adr r2, 7620 <_ZN14Asservissement13setLinearDutyEf+0xb0>)
    75be:	ca0c      	ldmia	r2!, {r2, r3}
    75c0:	f013 faaa 	bl	1ab18 <__aeabi_dcmplt>
    75c4:	4603      	mov	r3, r0
    75c6:	2b00      	cmp	r3, #0
    75c8:	d002      	beq.n	75d0 <_ZN14Asservissement13setLinearDutyEf+0x60>
    75ca:	f04f 0301 	mov.w	r3, #1	; 0x1
    75ce:	70fb      	strb	r3, [r7, #3]
    75d0:	78fb      	ldrb	r3, [r7, #3]
    75d2:	60bb      	str	r3, [r7, #8]
    75d4:	68ba      	ldr	r2, [r7, #8]
    75d6:	2a00      	cmp	r2, #0
    75d8:	d002      	beq.n	75e0 <_ZN14Asservissement13setLinearDutyEf+0x70>
    75da:	4b13      	ldr	r3, [pc, #76]	(7628 <_ZN14Asservissement13setLinearDutyEf+0xb8>)
    75dc:	607b      	str	r3, [r7, #4]
    75de:	e014      	b.n	760a <_ZN14Asservissement13setLinearDutyEf+0x9a>
    75e0:	6938      	ldr	r0, [r7, #16]
    75e2:	f012 ffd5 	bl	1a590 <__aeabi_f2d>
    75e6:	4602      	mov	r2, r0
    75e8:	460b      	mov	r3, r1
    75ea:	4610      	mov	r0, r2
    75ec:	4619      	mov	r1, r3
    75ee:	a20a      	add	r2, pc, #40	(adr r2, 7618 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    75f0:	ca0c      	ldmia	r2!, {r2, r3}
    75f2:	f013 faaf 	bl	1ab54 <__aeabi_dcmpgt>
    75f6:	4603      	mov	r3, r0
    75f8:	2b00      	cmp	r3, #0
    75fa:	d002      	beq.n	7602 <_ZN14Asservissement13setLinearDutyEf+0x92>
    75fc:	4a0b      	ldr	r2, [pc, #44]	(762c <_ZN14Asservissement13setLinearDutyEf+0xbc>)
    75fe:	60fa      	str	r2, [r7, #12]
    7600:	e001      	b.n	7606 <_ZN14Asservissement13setLinearDutyEf+0x96>
    7602:	693b      	ldr	r3, [r7, #16]
    7604:	60fb      	str	r3, [r7, #12]
    7606:	68fa      	ldr	r2, [r7, #12]
    7608:	607a      	str	r2, [r7, #4]
    760a:	697b      	ldr	r3, [r7, #20]
    760c:	687a      	ldr	r2, [r7, #4]
    760e:	659a      	str	r2, [r3, #88]
}
    7610:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7614:	46bd      	mov	sp, r7
    7616:	bd80      	pop	{r7, pc}
    7618:	9999999a 	.word	0x9999999a
    761c:	3fc99999 	.word	0x3fc99999
    7620:	9999999a 	.word	0x9999999a
    7624:	bfc99999 	.word	0xbfc99999
    7628:	be4ccccd 	.word	0xbe4ccccd
    762c:	3e4ccccd 	.word	0x3e4ccccd

00007630 <_ZN14Asservissement14setAngularDutyEf>:

void Asservissement::setAngularDuty(float duty)
    7630:	b580      	push	{r7, lr}
    7632:	b086      	sub	sp, #24
    7634:	af00      	add	r7, sp, #0
    7636:	6178      	str	r0, [r7, #20]
    7638:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDAngle(false);
    763a:	6978      	ldr	r0, [r7, #20]
    763c:	f04f 0100 	mov.w	r1, #0	; 0x0
    7640:	f7ff ff86 	bl	7550 <_ZN14Asservissement18setEnabledPIDAngleEb>
    fixedAngularDuty = MAX( MIN( duty, FIXED_ANGULAR_DUTY_MAX), -FIXED_ANGULAR_DUTY_MAX);
    7644:	6938      	ldr	r0, [r7, #16]
    7646:	f012 ffa3 	bl	1a590 <__aeabi_f2d>
    764a:	4602      	mov	r2, r0
    764c:	460b      	mov	r3, r1
    764e:	4610      	mov	r0, r2
    7650:	4619      	mov	r1, r3
    7652:	a221      	add	r2, pc, #132	(adr r2, 76d8 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    7654:	ca0c      	ldmia	r2!, {r2, r3}
    7656:	f013 fa7d 	bl	1ab54 <__aeabi_dcmpgt>
    765a:	4603      	mov	r3, r0
    765c:	2b00      	cmp	r3, #0
    765e:	d003      	beq.n	7668 <_ZN14Asservissement14setAngularDutyEf+0x38>
    7660:	f04f 0200 	mov.w	r2, #0	; 0x0
    7664:	60ba      	str	r2, [r7, #8]
    7666:	e015      	b.n	7694 <_ZN14Asservissement14setAngularDutyEf+0x64>
    7668:	6938      	ldr	r0, [r7, #16]
    766a:	f012 ff91 	bl	1a590 <__aeabi_f2d>
    766e:	4602      	mov	r2, r0
    7670:	460b      	mov	r3, r1
    7672:	f04f 0100 	mov.w	r1, #0	; 0x0
    7676:	70f9      	strb	r1, [r7, #3]
    7678:	4610      	mov	r0, r2
    767a:	4619      	mov	r1, r3
    767c:	a218      	add	r2, pc, #96	(adr r2, 76e0 <_ZN14Asservissement14setAngularDutyEf+0xb0>)
    767e:	ca0c      	ldmia	r2!, {r2, r3}
    7680:	f013 fa4a 	bl	1ab18 <__aeabi_dcmplt>
    7684:	4603      	mov	r3, r0
    7686:	2b00      	cmp	r3, #0
    7688:	d002      	beq.n	7690 <_ZN14Asservissement14setAngularDutyEf+0x60>
    768a:	f04f 0301 	mov.w	r3, #1	; 0x1
    768e:	70fb      	strb	r3, [r7, #3]
    7690:	78fb      	ldrb	r3, [r7, #3]
    7692:	60bb      	str	r3, [r7, #8]
    7694:	68ba      	ldr	r2, [r7, #8]
    7696:	2a00      	cmp	r2, #0
    7698:	d002      	beq.n	76a0 <_ZN14Asservissement14setAngularDutyEf+0x70>
    769a:	4b13      	ldr	r3, [pc, #76]	(76e8 <_ZN14Asservissement14setAngularDutyEf+0xb8>)
    769c:	607b      	str	r3, [r7, #4]
    769e:	e014      	b.n	76ca <_ZN14Asservissement14setAngularDutyEf+0x9a>
    76a0:	6938      	ldr	r0, [r7, #16]
    76a2:	f012 ff75 	bl	1a590 <__aeabi_f2d>
    76a6:	4602      	mov	r2, r0
    76a8:	460b      	mov	r3, r1
    76aa:	4610      	mov	r0, r2
    76ac:	4619      	mov	r1, r3
    76ae:	a20a      	add	r2, pc, #40	(adr r2, 76d8 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    76b0:	ca0c      	ldmia	r2!, {r2, r3}
    76b2:	f013 fa4f 	bl	1ab54 <__aeabi_dcmpgt>
    76b6:	4603      	mov	r3, r0
    76b8:	2b00      	cmp	r3, #0
    76ba:	d002      	beq.n	76c2 <_ZN14Asservissement14setAngularDutyEf+0x92>
    76bc:	4a0b      	ldr	r2, [pc, #44]	(76ec <_ZN14Asservissement14setAngularDutyEf+0xbc>)
    76be:	60fa      	str	r2, [r7, #12]
    76c0:	e001      	b.n	76c6 <_ZN14Asservissement14setAngularDutyEf+0x96>
    76c2:	693b      	ldr	r3, [r7, #16]
    76c4:	60fb      	str	r3, [r7, #12]
    76c6:	68fa      	ldr	r2, [r7, #12]
    76c8:	607a      	str	r2, [r7, #4]
    76ca:	697b      	ldr	r3, [r7, #20]
    76cc:	687a      	ldr	r2, [r7, #4]
    76ce:	65da      	str	r2, [r3, #92]
}
    76d0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    76d4:	46bd      	mov	sp, r7
    76d6:	bd80      	pop	{r7, pc}
    76d8:	9999999a 	.word	0x9999999a
    76dc:	3fc99999 	.word	0x3fc99999
    76e0:	9999999a 	.word	0x9999999a
    76e4:	bfc99999 	.word	0xbfc99999
    76e8:	be4ccccd 	.word	0xbe4ccccd
    76ec:	3e4ccccd 	.word	0x3e4ccccd

000076f0 <_ZN14Asservissement14resetFixedDutyEv>:

void Asservissement::resetFixedDuty()
    76f0:	b480      	push	{r7}
    76f2:	b083      	sub	sp, #12
    76f4:	af00      	add	r7, sp, #0
    76f6:	6078      	str	r0, [r7, #4]
{
    fixedLinearDuty = 0.;
    76f8:	687a      	ldr	r2, [r7, #4]
    76fa:	4b05      	ldr	r3, [pc, #20]	(7710 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    76fc:	6593      	str	r3, [r2, #88]
    fixedAngularDuty = 0.;
    76fe:	687a      	ldr	r2, [r7, #4]
    7700:	4b03      	ldr	r3, [pc, #12]	(7710 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    7702:	65d3      	str	r3, [r2, #92]
}
    7704:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7708:	46bd      	mov	sp, r7
    770a:	bc80      	pop	{r7}
    770c:	4770      	bx	lr
    770e:	46c0      	nop			(mov r8, r8)
    7710:	00000000 	.word	0x00000000

00007714 <_ZN14Asservissement6updateEv>:
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
}

void Asservissement::update(void)
    7714:	b590      	push	{r4, r7, lr}
    7716:	b09f      	sub	sp, #124
    7718:	af00      	add	r7, sp, #0
    771a:	6478      	str	r0, [r7, #68]
{
#ifdef ROBOTHW
    #if DEBUG_ODOMEDTRIE == 1
    PositionPlusAngle pos = Odometrie::odometrie->getPos();
    771c:	4bee      	ldr	r3, [pc, #952]	(7ad8 <_ZN14Asservissement6updateEv+0x3c4>)
    771e:	681a      	ldr	r2, [r3, #0]
    7720:	f107 0354 	add.w	r3, r7, #84	; 0x54
    7724:	4618      	mov	r0, r3
    7726:	4611      	mov	r1, r2
    7728:	f002 f9ea 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    Angle absAngle = Odometrie::odometrie->getAbsoluteAngle();
    772c:	4bea      	ldr	r3, [pc, #936]	(7ad8 <_ZN14Asservissement6updateEv+0x3c4>)
    772e:	681b      	ldr	r3, [r3, #0]
    7730:	4618      	mov	r0, r3
    7732:	f002 f9d9 	bl	9ae8 <_ZNK9Odometrie16getAbsoluteAngleEv>
    7736:	4603      	mov	r3, r0
    7738:	663b      	str	r3, [r7, #96]
    if ( pos.position.x > 400. /* absAngle > 3.14159265358979323846*2.*/)
    773a:	6d7b      	ldr	r3, [r7, #84]
    773c:	4618      	mov	r0, r3
    773e:	49e7      	ldr	r1, [pc, #924]	(7adc <_ZN14Asservissement6updateEv+0x3c8>)
    7740:	f013 fd52 	bl	1b1e8 <__aeabi_fcmpgt>
    7744:	4603      	mov	r3, r0
    7746:	2b00      	cmp	r3, #0
    7748:	d004      	beq.n	7754 <_ZN14Asservissement6updateEv+0x40>
        Led::setOn(0);
    774a:	f04f 0000 	mov.w	r0, #0	; 0x0
    774e:	f004 fd4f 	bl	c1f0 <_ZN3Led5setOnEi>
    7752:	e003      	b.n	775c <_ZN14Asservissement6updateEv+0x48>
    else
        Led::setOff(0);
    7754:	f04f 0000 	mov.w	r0, #0	; 0x0
    7758:	f004 fd0a 	bl	c170 <_ZN3Led6setOffEi>
    #endif
#endif

    asserCount++;
    775c:	6c7b      	ldr	r3, [r7, #68]
    775e:	6c9b      	ldr	r3, [r3, #72]
    7760:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7764:	6c7b      	ldr	r3, [r7, #68]
    7766:	649a      	str	r2, [r3, #72]

    if (true)
    {

        PositionPlusAngle positionPlusAngleActuelle = odometrie->getPos();      //Variable juste pour avoir un code plus lisible par la suite
    7768:	6c7b      	ldr	r3, [r7, #68]
    776a:	6c5a      	ldr	r2, [r3, #68]
    776c:	f107 0348 	add.w	r3, r7, #72	; 0x48
    7770:	4618      	mov	r0, r3
    7772:	4611      	mov	r1, r2
    7774:	f002 f9c4 	bl	9b00 <_ZNK9Odometrie6getPosEv>
        Angle vitesse_angulaire_atteinte = odometrie->getVitesseAngulaire();    //idem
    7778:	6c7b      	ldr	r3, [r7, #68]
    777a:	6c5b      	ldr	r3, [r3, #68]
    777c:	4618      	mov	r0, r3
    777e:	f002 f99b 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    7782:	4603      	mov	r3, r0
    7784:	667b      	str	r3, [r7, #100]
        Distance vitesse_lineaire_atteinte = odometrie->getVitesseLineaire();   //idem
    7786:	6c7b      	ldr	r3, [r7, #68]
    7788:	6c5b      	ldr	r3, [r3, #68]
    778a:	4618      	mov	r0, r3
    778c:	f002 f9a0 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    7790:	4603      	mov	r3, r0
    7792:	66bb      	str	r3, [r7, #104]

        //Puis on les récupéres

        float vitesse_lineaire_a_atteindre = getLinearSpeed();
    7794:	6c78      	ldr	r0, [r7, #68]
    7796:	f7ff fea7 	bl	74e8 <_ZN14Asservissement14getLinearSpeedEv>
    779a:	4603      	mov	r3, r0
    779c:	66fb      	str	r3, [r7, #108]
        float vitesse_angulaire_a_atteindre = getAngularSpeed();
    779e:	6c78      	ldr	r0, [r7, #68]
    77a0:	f7ff feae 	bl	7500 <_ZN14Asservissement15getAngularSpeedEv>
    77a4:	4603      	mov	r3, r0
    77a6:	673b      	str	r3, [r7, #112]

#ifdef ROUES


        //on filtre l'erreur de vitesse lineaire et angulaire
        linearDutySent = activePIDDistance ? pid_filter_distance.getFilteredValue(vitesse_lineaire_a_atteindre-vitesse_lineaire_atteinte) : fixedLinearDuty;
    77a8:	6c7b      	ldr	r3, [r7, #68]
    77aa:	f893 3054 	ldrb.w	r3, [r3, #84]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d00e      	beq.n	77d0 <_ZN14Asservissement6updateEv+0xbc>
    77b2:	6c7b      	ldr	r3, [r7, #68]
    77b4:	f103 0408 	add.w	r4, r3, #8	; 0x8
    77b8:	6ef8      	ldr	r0, [r7, #108]
    77ba:	6eb9      	ldr	r1, [r7, #104]
    77bc:	f013 fa50 	bl	1ac60 <__aeabi_fsub>
    77c0:	4603      	mov	r3, r0
    77c2:	4620      	mov	r0, r4
    77c4:	4619      	mov	r1, r3
    77c6:	f002 feed 	bl	a5a4 <_ZN17PIDFilterDistance16getFilteredValueEf>
    77ca:	4603      	mov	r3, r0
    77cc:	607b      	str	r3, [r7, #4]
    77ce:	e002      	b.n	77d6 <_ZN14Asservissement6updateEv+0xc2>
    77d0:	6c7b      	ldr	r3, [r7, #68]
    77d2:	6d9b      	ldr	r3, [r3, #88]
    77d4:	607b      	str	r3, [r7, #4]
    77d6:	6c7b      	ldr	r3, [r7, #68]
    77d8:	687a      	ldr	r2, [r7, #4]
    77da:	601a      	str	r2, [r3, #0]
        angularDutySent = activePIDAngle ? pid_filter_angle.getFilteredValue(vitesse_angulaire_a_atteindre-vitesse_angulaire_atteinte) : fixedAngularDuty;
    77dc:	6c7b      	ldr	r3, [r7, #68]
    77de:	f893 3055 	ldrb.w	r3, [r3, #85]
    77e2:	2b00      	cmp	r3, #0
    77e4:	d00e      	beq.n	7804 <_ZN14Asservissement6updateEv+0xf0>
    77e6:	6c7b      	ldr	r3, [r7, #68]
    77e8:	f103 0410 	add.w	r4, r3, #16	; 0x10
    77ec:	6f38      	ldr	r0, [r7, #112]
    77ee:	6e79      	ldr	r1, [r7, #100]
    77f0:	f013 fa36 	bl	1ac60 <__aeabi_fsub>
    77f4:	4603      	mov	r3, r0
    77f6:	4620      	mov	r0, r4
    77f8:	4619      	mov	r1, r3
    77fa:	f002 fe65 	bl	a4c8 <_ZN14PIDFilterAngle16getFilteredValueEf>
    77fe:	4603      	mov	r3, r0
    7800:	60bb      	str	r3, [r7, #8]
    7802:	e002      	b.n	780a <_ZN14Asservissement6updateEv+0xf6>
    7804:	6c7b      	ldr	r3, [r7, #68]
    7806:	6ddb      	ldr	r3, [r3, #92]
    7808:	60bb      	str	r3, [r7, #8]
    780a:	6c7b      	ldr	r3, [r7, #68]
    780c:	68ba      	ldr	r2, [r7, #8]
    780e:	605a      	str	r2, [r3, #4]

        //Et on borne la somme de ces valeurs filtrée entre -> voir ci dessous
        float limit = 1.0f;
    7810:	4bb3      	ldr	r3, [pc, #716]	(7ae0 <_ZN14Asservissement6updateEv+0x3cc>)
    7812:	677b      	str	r3, [r7, #116]
        linearDutySent =  MIN(MAX(linearDutySent, -limit),limit);
    7814:	6c7b      	ldr	r3, [r7, #68]
    7816:	681a      	ldr	r2, [r3, #0]
    7818:	6f7b      	ldr	r3, [r7, #116]
    781a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    781e:	4610      	mov	r0, r2
    7820:	4619      	mov	r1, r3
    7822:	f013 fcc3 	bl	1b1ac <__aeabi_fcmplt>
    7826:	4603      	mov	r3, r0
    7828:	2b00      	cmp	r3, #0
    782a:	d004      	beq.n	7836 <_ZN14Asservissement6updateEv+0x122>
    782c:	6f7b      	ldr	r3, [r7, #116]
    782e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7832:	613b      	str	r3, [r7, #16]
    7834:	e002      	b.n	783c <_ZN14Asservissement6updateEv+0x128>
    7836:	6c7b      	ldr	r3, [r7, #68]
    7838:	681b      	ldr	r3, [r3, #0]
    783a:	613b      	str	r3, [r7, #16]
    783c:	6938      	ldr	r0, [r7, #16]
    783e:	6f79      	ldr	r1, [r7, #116]
    7840:	f013 fcd2 	bl	1b1e8 <__aeabi_fcmpgt>
    7844:	4603      	mov	r3, r0
    7846:	2b00      	cmp	r3, #0
    7848:	d002      	beq.n	7850 <_ZN14Asservissement6updateEv+0x13c>
    784a:	6f7b      	ldr	r3, [r7, #116]
    784c:	60fb      	str	r3, [r7, #12]
    784e:	e015      	b.n	787c <_ZN14Asservissement6updateEv+0x168>
    7850:	6c7b      	ldr	r3, [r7, #68]
    7852:	681a      	ldr	r2, [r3, #0]
    7854:	6f7b      	ldr	r3, [r7, #116]
    7856:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    785a:	4610      	mov	r0, r2
    785c:	4619      	mov	r1, r3
    785e:	f013 fca5 	bl	1b1ac <__aeabi_fcmplt>
    7862:	4603      	mov	r3, r0
    7864:	2b00      	cmp	r3, #0
    7866:	d004      	beq.n	7872 <_ZN14Asservissement6updateEv+0x15e>
    7868:	6f7b      	ldr	r3, [r7, #116]
    786a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    786e:	617b      	str	r3, [r7, #20]
    7870:	e002      	b.n	7878 <_ZN14Asservissement6updateEv+0x164>
    7872:	6c7b      	ldr	r3, [r7, #68]
    7874:	681b      	ldr	r3, [r3, #0]
    7876:	617b      	str	r3, [r7, #20]
    7878:	697a      	ldr	r2, [r7, #20]
    787a:	60fa      	str	r2, [r7, #12]
    787c:	6c7b      	ldr	r3, [r7, #68]
    787e:	68fa      	ldr	r2, [r7, #12]
    7880:	601a      	str	r2, [r3, #0]
        angularDutySent = MIN(MAX(angularDutySent, -limit),limit);
    7882:	6c7b      	ldr	r3, [r7, #68]
    7884:	685a      	ldr	r2, [r3, #4]
    7886:	6f7b      	ldr	r3, [r7, #116]
    7888:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    788c:	4610      	mov	r0, r2
    788e:	4619      	mov	r1, r3
    7890:	f013 fc8c 	bl	1b1ac <__aeabi_fcmplt>
    7894:	4603      	mov	r3, r0
    7896:	2b00      	cmp	r3, #0
    7898:	d004      	beq.n	78a4 <_ZN14Asservissement6updateEv+0x190>
    789a:	6f7b      	ldr	r3, [r7, #116]
    789c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    78a0:	61fb      	str	r3, [r7, #28]
    78a2:	e002      	b.n	78aa <_ZN14Asservissement6updateEv+0x196>
    78a4:	6c7b      	ldr	r3, [r7, #68]
    78a6:	685b      	ldr	r3, [r3, #4]
    78a8:	61fb      	str	r3, [r7, #28]
    78aa:	69f8      	ldr	r0, [r7, #28]
    78ac:	6f79      	ldr	r1, [r7, #116]
    78ae:	f013 fc9b 	bl	1b1e8 <__aeabi_fcmpgt>
    78b2:	4603      	mov	r3, r0
    78b4:	2b00      	cmp	r3, #0
    78b6:	d002      	beq.n	78be <_ZN14Asservissement6updateEv+0x1aa>
    78b8:	6f7b      	ldr	r3, [r7, #116]
    78ba:	61bb      	str	r3, [r7, #24]
    78bc:	e015      	b.n	78ea <_ZN14Asservissement6updateEv+0x1d6>
    78be:	6c7b      	ldr	r3, [r7, #68]
    78c0:	685a      	ldr	r2, [r3, #4]
    78c2:	6f7b      	ldr	r3, [r7, #116]
    78c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    78c8:	4610      	mov	r0, r2
    78ca:	4619      	mov	r1, r3
    78cc:	f013 fc6e 	bl	1b1ac <__aeabi_fcmplt>
    78d0:	4603      	mov	r3, r0
    78d2:	2b00      	cmp	r3, #0
    78d4:	d004      	beq.n	78e0 <_ZN14Asservissement6updateEv+0x1cc>
    78d6:	6f7b      	ldr	r3, [r7, #116]
    78d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    78dc:	623b      	str	r3, [r7, #32]
    78de:	e002      	b.n	78e6 <_ZN14Asservissement6updateEv+0x1d2>
    78e0:	6c7b      	ldr	r3, [r7, #68]
    78e2:	685b      	ldr	r3, [r3, #4]
    78e4:	623b      	str	r3, [r7, #32]
    78e6:	6a3a      	ldr	r2, [r7, #32]
    78e8:	61ba      	str	r2, [r7, #24]
    78ea:	6c7b      	ldr	r3, [r7, #68]
    78ec:	69ba      	ldr	r2, [r7, #24]
    78ee:	605a      	str	r2, [r3, #4]
 //       linearDutySent = fabs(linearDutySent) > 0.05 || vitesse_lineaire_a_atteindre > 0.01 ? linearDutySent : 0;
 //       angularDutySent = fabs(angularDutySent) > 0.05 || vitesse_angulaire_a_atteindre > 0.0001 ? angularDutySent : 0;


        // test d'arret complet si c'est l'ordre qu'on lui donne
        if (vitesse_lineaire_a_atteindre == 0.0f && vitesse_angulaire_a_atteindre == 0.0f)
    78f0:	6ef8      	ldr	r0, [r7, #108]
    78f2:	497c      	ldr	r1, [pc, #496]	(7ae4 <_ZN14Asservissement6updateEv+0x3d0>)
    78f4:	f013 fc50 	bl	1b198 <__aeabi_fcmpeq>
    78f8:	4603      	mov	r3, r0
    78fa:	2b00      	cmp	r3, #0
    78fc:	d00c      	beq.n	7918 <_ZN14Asservissement6updateEv+0x204>
    78fe:	6f38      	ldr	r0, [r7, #112]
    7900:	4978      	ldr	r1, [pc, #480]	(7ae4 <_ZN14Asservissement6updateEv+0x3d0>)
    7902:	f013 fc49 	bl	1b198 <__aeabi_fcmpeq>
    7906:	4603      	mov	r3, r0
    7908:	2b00      	cmp	r3, #0
    790a:	d005      	beq.n	7918 <_ZN14Asservissement6updateEv+0x204>
        {
            linearDutySent = 0.0f;
    790c:	6c7a      	ldr	r2, [r7, #68]
    790e:	4b75      	ldr	r3, [pc, #468]	(7ae4 <_ZN14Asservissement6updateEv+0x3d0>)
    7910:	6013      	str	r3, [r2, #0]
            angularDutySent = 0.0f;
    7912:	6c7a      	ldr	r2, [r7, #68]
    7914:	4b73      	ldr	r3, [pc, #460]	(7ae4 <_ZN14Asservissement6updateEv+0x3d0>)
    7916:	6053      	str	r3, [r2, #4]
        {
        #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
            roues.droite.tourne(0.8*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));
            roues.gauche.tourne(0.8*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));
        #else
            roues.droite.tourne(0.95*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));//*1
    7918:	6c7b      	ldr	r3, [r7, #68]
    791a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    791e:	627b      	str	r3, [r7, #36]
    7920:	6c7b      	ldr	r3, [r7, #68]
    7922:	681a      	ldr	r2, [r3, #0]
    7924:	6c7b      	ldr	r3, [r7, #68]
    7926:	685b      	ldr	r3, [r3, #4]
    7928:	4610      	mov	r0, r2
    792a:	4619      	mov	r1, r3
    792c:	f013 f99a 	bl	1ac64 <__addsf3>
    7930:	4603      	mov	r3, r0
    7932:	461a      	mov	r2, r3
    7934:	6f7b      	ldr	r3, [r7, #116]
    7936:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    793a:	4610      	mov	r0, r2
    793c:	4619      	mov	r1, r3
    793e:	f013 fc35 	bl	1b1ac <__aeabi_fcmplt>
    7942:	4603      	mov	r3, r0
    7944:	2b00      	cmp	r3, #0
    7946:	d004      	beq.n	7952 <_ZN14Asservissement6updateEv+0x23e>
    7948:	6f7b      	ldr	r3, [r7, #116]
    794a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    794e:	62fb      	str	r3, [r7, #44]
    7950:	e009      	b.n	7966 <_ZN14Asservissement6updateEv+0x252>
    7952:	6c7b      	ldr	r3, [r7, #68]
    7954:	681a      	ldr	r2, [r3, #0]
    7956:	6c7b      	ldr	r3, [r7, #68]
    7958:	685b      	ldr	r3, [r3, #4]
    795a:	4610      	mov	r0, r2
    795c:	4619      	mov	r1, r3
    795e:	f013 f981 	bl	1ac64 <__addsf3>
    7962:	4603      	mov	r3, r0
    7964:	62fb      	str	r3, [r7, #44]
    7966:	6af8      	ldr	r0, [r7, #44]
    7968:	6f79      	ldr	r1, [r7, #116]
    796a:	f013 fc3d 	bl	1b1e8 <__aeabi_fcmpgt>
    796e:	4603      	mov	r3, r0
    7970:	2b00      	cmp	r3, #0
    7972:	d002      	beq.n	797a <_ZN14Asservissement6updateEv+0x266>
    7974:	6f7b      	ldr	r3, [r7, #116]
    7976:	62bb      	str	r3, [r7, #40]
    7978:	e024      	b.n	79c4 <_ZN14Asservissement6updateEv+0x2b0>
    797a:	6c7b      	ldr	r3, [r7, #68]
    797c:	681a      	ldr	r2, [r3, #0]
    797e:	6c7b      	ldr	r3, [r7, #68]
    7980:	685b      	ldr	r3, [r3, #4]
    7982:	4610      	mov	r0, r2
    7984:	4619      	mov	r1, r3
    7986:	f013 f96d 	bl	1ac64 <__addsf3>
    798a:	4603      	mov	r3, r0
    798c:	461a      	mov	r2, r3
    798e:	6f7b      	ldr	r3, [r7, #116]
    7990:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7994:	4610      	mov	r0, r2
    7996:	4619      	mov	r1, r3
    7998:	f013 fc08 	bl	1b1ac <__aeabi_fcmplt>
    799c:	4603      	mov	r3, r0
    799e:	2b00      	cmp	r3, #0
    79a0:	d004      	beq.n	79ac <_ZN14Asservissement6updateEv+0x298>
    79a2:	6f7b      	ldr	r3, [r7, #116]
    79a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    79a8:	633b      	str	r3, [r7, #48]
    79aa:	e009      	b.n	79c0 <_ZN14Asservissement6updateEv+0x2ac>
    79ac:	6c7b      	ldr	r3, [r7, #68]
    79ae:	681a      	ldr	r2, [r3, #0]
    79b0:	6c7b      	ldr	r3, [r7, #68]
    79b2:	685b      	ldr	r3, [r3, #4]
    79b4:	4610      	mov	r0, r2
    79b6:	4619      	mov	r1, r3
    79b8:	f013 f954 	bl	1ac64 <__addsf3>
    79bc:	4603      	mov	r3, r0
    79be:	633b      	str	r3, [r7, #48]
    79c0:	6b3a      	ldr	r2, [r7, #48]
    79c2:	62ba      	str	r2, [r7, #40]
    79c4:	6ab8      	ldr	r0, [r7, #40]
    79c6:	f012 fde3 	bl	1a590 <__aeabi_f2d>
    79ca:	4602      	mov	r2, r0
    79cc:	460b      	mov	r3, r1
    79ce:	4610      	mov	r0, r2
    79d0:	4619      	mov	r1, r3
    79d2:	a23f      	add	r2, pc, #252	(adr r2, 7ad0 <_ZN14Asservissement6updateEv+0x3bc>)
    79d4:	ca0c      	ldmia	r2!, {r2, r3}
    79d6:	f012 fe2f 	bl	1a638 <__aeabi_dmul>
    79da:	4602      	mov	r2, r0
    79dc:	460b      	mov	r3, r1
    79de:	4610      	mov	r0, r2
    79e0:	4619      	mov	r1, r3
    79e2:	f013 f8e9 	bl	1abb8 <__aeabi_d2f>
    79e6:	4603      	mov	r3, r0
    79e8:	6a78      	ldr	r0, [r7, #36]
    79ea:	4619      	mov	r1, r3
    79ec:	f005 fb24 	bl	d038 <_ZN4Roue6tourneEf>
            roues.gauche.tourne(0.95*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));//*1
    79f0:	6c7b      	ldr	r3, [r7, #68]
    79f2:	f103 0318 	add.w	r3, r3, #24	; 0x18
    79f6:	637b      	str	r3, [r7, #52]
    79f8:	6c7b      	ldr	r3, [r7, #68]
    79fa:	681a      	ldr	r2, [r3, #0]
    79fc:	6c7b      	ldr	r3, [r7, #68]
    79fe:	685b      	ldr	r3, [r3, #4]
    7a00:	4610      	mov	r0, r2
    7a02:	4619      	mov	r1, r3
    7a04:	f013 f92c 	bl	1ac60 <__aeabi_fsub>
    7a08:	4603      	mov	r3, r0
    7a0a:	461a      	mov	r2, r3
    7a0c:	6f7b      	ldr	r3, [r7, #116]
    7a0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a12:	4610      	mov	r0, r2
    7a14:	4619      	mov	r1, r3
    7a16:	f013 fbc9 	bl	1b1ac <__aeabi_fcmplt>
    7a1a:	4603      	mov	r3, r0
    7a1c:	2b00      	cmp	r3, #0
    7a1e:	d004      	beq.n	7a2a <_ZN14Asservissement6updateEv+0x316>
    7a20:	6f7b      	ldr	r3, [r7, #116]
    7a22:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a26:	63fb      	str	r3, [r7, #60]
    7a28:	e009      	b.n	7a3e <_ZN14Asservissement6updateEv+0x32a>
    7a2a:	6c7b      	ldr	r3, [r7, #68]
    7a2c:	681a      	ldr	r2, [r3, #0]
    7a2e:	6c7b      	ldr	r3, [r7, #68]
    7a30:	685b      	ldr	r3, [r3, #4]
    7a32:	4610      	mov	r0, r2
    7a34:	4619      	mov	r1, r3
    7a36:	f013 f913 	bl	1ac60 <__aeabi_fsub>
    7a3a:	4603      	mov	r3, r0
    7a3c:	63fb      	str	r3, [r7, #60]
    7a3e:	6bf8      	ldr	r0, [r7, #60]
    7a40:	6f79      	ldr	r1, [r7, #116]
    7a42:	f013 fbd1 	bl	1b1e8 <__aeabi_fcmpgt>
    7a46:	4603      	mov	r3, r0
    7a48:	2b00      	cmp	r3, #0
    7a4a:	d002      	beq.n	7a52 <_ZN14Asservissement6updateEv+0x33e>
    7a4c:	6f7b      	ldr	r3, [r7, #116]
    7a4e:	63bb      	str	r3, [r7, #56]
    7a50:	e024      	b.n	7a9c <_ZN14Asservissement6updateEv+0x388>
    7a52:	6c7b      	ldr	r3, [r7, #68]
    7a54:	681a      	ldr	r2, [r3, #0]
    7a56:	6c7b      	ldr	r3, [r7, #68]
    7a58:	685b      	ldr	r3, [r3, #4]
    7a5a:	4610      	mov	r0, r2
    7a5c:	4619      	mov	r1, r3
    7a5e:	f013 f8ff 	bl	1ac60 <__aeabi_fsub>
    7a62:	4603      	mov	r3, r0
    7a64:	461a      	mov	r2, r3
    7a66:	6f7b      	ldr	r3, [r7, #116]
    7a68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a6c:	4610      	mov	r0, r2
    7a6e:	4619      	mov	r1, r3
    7a70:	f013 fb9c 	bl	1b1ac <__aeabi_fcmplt>
    7a74:	4603      	mov	r3, r0
    7a76:	2b00      	cmp	r3, #0
    7a78:	d004      	beq.n	7a84 <_ZN14Asservissement6updateEv+0x370>
    7a7a:	6f7b      	ldr	r3, [r7, #116]
    7a7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7a80:	643b      	str	r3, [r7, #64]
    7a82:	e009      	b.n	7a98 <_ZN14Asservissement6updateEv+0x384>
    7a84:	6c7b      	ldr	r3, [r7, #68]
    7a86:	681a      	ldr	r2, [r3, #0]
    7a88:	6c7b      	ldr	r3, [r7, #68]
    7a8a:	685b      	ldr	r3, [r3, #4]
    7a8c:	4610      	mov	r0, r2
    7a8e:	4619      	mov	r1, r3
    7a90:	f013 f8e6 	bl	1ac60 <__aeabi_fsub>
    7a94:	4603      	mov	r3, r0
    7a96:	643b      	str	r3, [r7, #64]
    7a98:	6c3a      	ldr	r2, [r7, #64]
    7a9a:	63ba      	str	r2, [r7, #56]
    7a9c:	6bb8      	ldr	r0, [r7, #56]
    7a9e:	f012 fd77 	bl	1a590 <__aeabi_f2d>
    7aa2:	4602      	mov	r2, r0
    7aa4:	460b      	mov	r3, r1
    7aa6:	4610      	mov	r0, r2
    7aa8:	4619      	mov	r1, r3
    7aaa:	a209      	add	r2, pc, #36	(adr r2, 7ad0 <_ZN14Asservissement6updateEv+0x3bc>)
    7aac:	ca0c      	ldmia	r2!, {r2, r3}
    7aae:	f012 fdc3 	bl	1a638 <__aeabi_dmul>
    7ab2:	4602      	mov	r2, r0
    7ab4:	460b      	mov	r3, r1
    7ab6:	4610      	mov	r0, r2
    7ab8:	4619      	mov	r1, r3
    7aba:	f013 f87d 	bl	1abb8 <__aeabi_d2f>
    7abe:	4603      	mov	r3, r0
    7ac0:	6b78      	ldr	r0, [r7, #52]
    7ac2:	4619      	mov	r1, r3
    7ac4:	f005 fab8 	bl	d038 <_ZN4Roue6tourneEf>
        roues.droite.tourne(0.);
    }
#else
}
#endif
}
    7ac8:	f107 077c 	add.w	r7, r7, #124	; 0x7c
    7acc:	46bd      	mov	sp, r7
    7ace:	bd90      	pop	{r4, r7, pc}
    7ad0:	66666666 	.word	0x66666666
    7ad4:	3fee6666 	.word	0x3fee6666
    7ad8:	20000578 	.word	0x20000578
    7adc:	43c80000 	.word	0x43c80000
    7ae0:	3f800000 	.word	0x3f800000
    7ae4:	00000000 	.word	0x00000000

00007ae8 <SysTick_Handler>:

#ifdef ROBOTHW
//pour lancer l'update à chaque tic d'horloge
extern "C" void SysTick_Handler()
    7ae8:	b580      	push	{r7, lr}
    7aea:	af00      	add	r7, sp, #0
{
    // Count the number of SysTick_Handler call
    systick_count++;
    7aec:	4b09      	ldr	r3, [pc, #36]	(7b14 <SysTick_Handler+0x2c>)
    7aee:	681b      	ldr	r3, [r3, #0]
    7af0:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7af4:	4b07      	ldr	r3, [pc, #28]	(7b14 <SysTick_Handler+0x2c>)
    7af6:	601a      	str	r2, [r3, #0]
    if (systick_count%200 == 0){
        Led::toggle(0);
    }
#endif

    Odometrie::odometrie->update();
    7af8:	4b07      	ldr	r3, [pc, #28]	(7b18 <SysTick_Handler+0x30>)
    7afa:	681b      	ldr	r3, [r3, #0]
    7afc:	4618      	mov	r0, r3
    7afe:	f002 f8e9 	bl	9cd4 <_ZN9Odometrie6updateEv>

    StrategieV2::update();
    7b02:	f00e fa39 	bl	15f78 <_ZN11StrategieV26updateEv>

    Asservissement::asservissement->update();
    7b06:	4b05      	ldr	r3, [pc, #20]	(7b1c <SysTick_Handler+0x34>)
    7b08:	681b      	ldr	r3, [r3, #0]
    7b0a:	4618      	mov	r0, r3
    7b0c:	f7ff fe02 	bl	7714 <_ZN14Asservissement6updateEv>
}
    7b10:	46bd      	mov	sp, r7
    7b12:	bd80      	pop	{r7, pc}
    7b14:	20000570 	.word	0x20000570
    7b18:	20000578 	.word	0x20000578
    7b1c:	20000568 	.word	0x20000568

00007b20 <_ZN14AsservissementC1EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    7b20:	b580      	push	{r7, lr}
    7b22:	b084      	sub	sp, #16
    7b24:	af00      	add	r7, sp, #0
    7b26:	6078      	str	r0, [r7, #4]
    7b28:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    7b2a:	687b      	ldr	r3, [r7, #4]
    7b2c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7b30:	4618      	mov	r0, r3
    7b32:	f002 fd23 	bl	a57c <_ZN17PIDFilterDistanceC1Ev>
    7b36:	687b      	ldr	r3, [r7, #4]
    7b38:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7b3c:	4618      	mov	r0, r3
    7b3e:	f002 fcaf 	bl	a4a0 <_ZN14PIDFilterAngleC1Ev>
    7b42:	687b      	ldr	r3, [r7, #4]
    7b44:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7b48:	4618      	mov	r0, r3
    7b4a:	f7fe f837 	bl	5bbc <_ZN5RouesC1Ev>
    7b4e:	687a      	ldr	r2, [r7, #4]
    7b50:	4b26      	ldr	r3, [pc, #152]	(7bec <_ZN14AsservissementC1EP9Odometrie+0xcc>)
    7b52:	63d3      	str	r3, [r2, #60]
    7b54:	687a      	ldr	r2, [r7, #4]
    7b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7b5a:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    7b5c:	687a      	ldr	r2, [r7, #4]
    7b5e:	4b24      	ldr	r3, [pc, #144]	(7bf0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7b60:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    7b62:	687a      	ldr	r2, [r7, #4]
    7b64:	4b22      	ldr	r3, [pc, #136]	(7bf0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7b66:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    7b68:	687a      	ldr	r2, [r7, #4]
    7b6a:	683b      	ldr	r3, [r7, #0]
    7b6c:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    7b6e:	687a      	ldr	r2, [r7, #4]
    7b70:	f04f 0301 	mov.w	r3, #1	; 0x1
    7b74:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    7b78:	687a      	ldr	r2, [r7, #4]
    7b7a:	f04f 0301 	mov.w	r3, #1	; 0x1
    7b7e:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    7b82:	6878      	ldr	r0, [r7, #4]
    7b84:	f7ff fdb4 	bl	76f0 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7b88:	687a      	ldr	r2, [r7, #4]
    7b8a:	4b19      	ldr	r3, [pc, #100]	(7bf0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7b8c:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    7b8e:	687a      	ldr	r2, [r7, #4]
    7b90:	4b17      	ldr	r3, [pc, #92]	(7bf0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7b92:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7b94:	4a17      	ldr	r2, [pc, #92]	(7bf4 <_ZN14AsservissementC1EP9Odometrie+0xd4>)
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    7b9a:	687a      	ldr	r2, [r7, #4]
    7b9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7ba0:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7ba2:	f7fe f911 	bl	5dc8 <_ZN7Sensors10getSensorsEv>
    7ba6:	4602      	mov	r2, r0
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    7bac:	4a12      	ldr	r2, [pc, #72]	(7bf8 <_ZN14AsservissementC1EP9Odometrie+0xd8>)
    7bae:	f04f 0303 	mov.w	r3, #3	; 0x3
    7bb2:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7bb4:	4a11      	ldr	r2, [pc, #68]	(7bfc <_ZN14AsservissementC1EP9Odometrie+0xdc>)
    7bb6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    7bba:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    7bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7bc0:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7bc2:	f04f 0301 	mov.w	r3, #1	; 0x1
    7bc6:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7bc8:	f04f 0300 	mov.w	r3, #0	; 0x0
    7bcc:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    7bce:	f04f 0301 	mov.w	r3, #1	; 0x1
    7bd2:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    7bd4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7bd8:	4618      	mov	r0, r3
    7bda:	f7f8 fb1f 	bl	21c <NVIC_Init>
#endif
}
    7bde:	687b      	ldr	r3, [r7, #4]
    7be0:	4618      	mov	r0, r3
    7be2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7be6:	46bd      	mov	sp, r7
    7be8:	bd80      	pop	{r7, pc}
    7bea:	46c0      	nop			(mov r8, r8)
    7bec:	3f800000 	.word	0x3f800000
    7bf0:	00000000 	.word	0x00000000
    7bf4:	20000568 	.word	0x20000568
    7bf8:	e000e010 	.word	0xe000e010
    7bfc:	e000e014 	.word	0xe000e014

00007c00 <_ZN14AsservissementC2EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    7c00:	b580      	push	{r7, lr}
    7c02:	b084      	sub	sp, #16
    7c04:	af00      	add	r7, sp, #0
    7c06:	6078      	str	r0, [r7, #4]
    7c08:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    7c0a:	687b      	ldr	r3, [r7, #4]
    7c0c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7c10:	4618      	mov	r0, r3
    7c12:	f002 fcb3 	bl	a57c <_ZN17PIDFilterDistanceC1Ev>
    7c16:	687b      	ldr	r3, [r7, #4]
    7c18:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7c1c:	4618      	mov	r0, r3
    7c1e:	f002 fc3f 	bl	a4a0 <_ZN14PIDFilterAngleC1Ev>
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7c28:	4618      	mov	r0, r3
    7c2a:	f7fd ffc7 	bl	5bbc <_ZN5RouesC1Ev>
    7c2e:	687a      	ldr	r2, [r7, #4]
    7c30:	4b26      	ldr	r3, [pc, #152]	(7ccc <_ZN14AsservissementC2EP9Odometrie+0xcc>)
    7c32:	63d3      	str	r3, [r2, #60]
    7c34:	687a      	ldr	r2, [r7, #4]
    7c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7c3a:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    7c3c:	687a      	ldr	r2, [r7, #4]
    7c3e:	4b24      	ldr	r3, [pc, #144]	(7cd0 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    7c40:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    7c42:	687a      	ldr	r2, [r7, #4]
    7c44:	4b22      	ldr	r3, [pc, #136]	(7cd0 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    7c46:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    7c48:	687a      	ldr	r2, [r7, #4]
    7c4a:	683b      	ldr	r3, [r7, #0]
    7c4c:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    7c4e:	687a      	ldr	r2, [r7, #4]
    7c50:	f04f 0301 	mov.w	r3, #1	; 0x1
    7c54:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    7c58:	687a      	ldr	r2, [r7, #4]
    7c5a:	f04f 0301 	mov.w	r3, #1	; 0x1
    7c5e:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    7c62:	6878      	ldr	r0, [r7, #4]
    7c64:	f7ff fd44 	bl	76f0 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7c68:	687a      	ldr	r2, [r7, #4]
    7c6a:	4b19      	ldr	r3, [pc, #100]	(7cd0 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    7c6c:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    7c6e:	687a      	ldr	r2, [r7, #4]
    7c70:	4b17      	ldr	r3, [pc, #92]	(7cd0 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    7c72:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7c74:	4a17      	ldr	r2, [pc, #92]	(7cd4 <_ZN14AsservissementC2EP9Odometrie+0xd4>)
    7c76:	687b      	ldr	r3, [r7, #4]
    7c78:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    7c7a:	687a      	ldr	r2, [r7, #4]
    7c7c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7c80:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7c82:	f7fe f8a1 	bl	5dc8 <_ZN7Sensors10getSensorsEv>
    7c86:	4602      	mov	r2, r0
    7c88:	687b      	ldr	r3, [r7, #4]
    7c8a:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    7c8c:	4a12      	ldr	r2, [pc, #72]	(7cd8 <_ZN14AsservissementC2EP9Odometrie+0xd8>)
    7c8e:	f04f 0303 	mov.w	r3, #3	; 0x3
    7c92:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7c94:	4a11      	ldr	r2, [pc, #68]	(7cdc <_ZN14AsservissementC2EP9Odometrie+0xdc>)
    7c96:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    7c9a:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    7c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ca0:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7ca2:	f04f 0301 	mov.w	r3, #1	; 0x1
    7ca6:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7ca8:	f04f 0300 	mov.w	r3, #0	; 0x0
    7cac:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    7cae:	f04f 0301 	mov.w	r3, #1	; 0x1
    7cb2:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    7cb4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7cb8:	4618      	mov	r0, r3
    7cba:	f7f8 faaf 	bl	21c <NVIC_Init>
#endif
}
    7cbe:	687b      	ldr	r3, [r7, #4]
    7cc0:	4618      	mov	r0, r3
    7cc2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7cc6:	46bd      	mov	sp, r7
    7cc8:	bd80      	pop	{r7, pc}
    7cca:	46c0      	nop			(mov r8, r8)
    7ccc:	3f800000 	.word	0x3f800000
    7cd0:	00000000 	.word	0x00000000
    7cd4:	20000568 	.word	0x20000568
    7cd8:	e000e010 	.word	0xe000e010
    7cdc:	e000e014 	.word	0xe000e014

00007ce0 <_ZN7CommandC2Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    7ce0:	b480      	push	{r7}
    7ce2:	b083      	sub	sp, #12
    7ce4:	af00      	add	r7, sp, #0
    7ce6:	6078      	str	r0, [r7, #4]
    7ce8:	687a      	ldr	r2, [r7, #4]
    7cea:	4b06      	ldr	r3, [pc, #24]	(7d04 <_ZN7CommandC2Ev+0x24>)
    7cec:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    7cee:	4a06      	ldr	r2, [pc, #24]	(7d08 <_ZN7CommandC2Ev+0x28>)
    7cf0:	f04f 0300 	mov.w	r3, #0	; 0x0
    7cf4:	7013      	strb	r3, [r2, #0]
}
    7cf6:	687b      	ldr	r3, [r7, #4]
    7cf8:	4618      	mov	r0, r3
    7cfa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7cfe:	46bd      	mov	sp, r7
    7d00:	bc80      	pop	{r7}
    7d02:	4770      	bx	lr
    7d04:	00021cb8 	.word	0x00021cb8
    7d08:	20000574 	.word	0x20000574

00007d0c <_ZN7CommandC1Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    7d0c:	b480      	push	{r7}
    7d0e:	b083      	sub	sp, #12
    7d10:	af00      	add	r7, sp, #0
    7d12:	6078      	str	r0, [r7, #4]
    7d14:	687a      	ldr	r2, [r7, #4]
    7d16:	4b06      	ldr	r3, [pc, #24]	(7d30 <_ZN7CommandC1Ev+0x24>)
    7d18:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    7d1a:	4a06      	ldr	r2, [pc, #24]	(7d34 <_ZN7CommandC1Ev+0x28>)
    7d1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d20:	7013      	strb	r3, [r2, #0]
}
    7d22:	687b      	ldr	r3, [r7, #4]
    7d24:	4618      	mov	r0, r3
    7d26:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7d2a:	46bd      	mov	sp, r7
    7d2c:	bc80      	pop	{r7}
    7d2e:	4770      	bx	lr
    7d30:	00021cb8 	.word	0x00021cb8
    7d34:	20000574 	.word	0x20000574

00007d38 <_ZN7Command7getStopEv>:

Command::~Command()
{
}

bool Command::getStop(void)
    7d38:	b480      	push	{r7}
    7d3a:	af00      	add	r7, sp, #0
{
    return Command::stop;
    7d3c:	4b02      	ldr	r3, [pc, #8]	(7d48 <_ZN7Command7getStopEv+0x10>)
    7d3e:	781b      	ldrb	r3, [r3, #0]
}
    7d40:	4618      	mov	r0, r3
    7d42:	46bd      	mov	sp, r7
    7d44:	bc80      	pop	{r7}
    7d46:	4770      	bx	lr
    7d48:	20000574 	.word	0x20000574

00007d4c <_ZN7Command11resetSpeedsEv>:

void Command::resetSpeeds()
    7d4c:	b480      	push	{r7}
    7d4e:	b083      	sub	sp, #12
    7d50:	af00      	add	r7, sp, #0
    7d52:	6078      	str	r0, [r7, #4]
{

}
    7d54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7d58:	46bd      	mov	sp, r7
    7d5a:	bc80      	pop	{r7}
    7d5c:	4770      	bx	lr
    7d5e:	46c0      	nop			(mov r8, r8)

00007d60 <_ZN7Command16freinageDUrgenceEb>:

void Command::freinageDUrgence(bool doitFreiner)
    7d60:	b480      	push	{r7}
    7d62:	b083      	sub	sp, #12
    7d64:	af00      	add	r7, sp, #0
    7d66:	4603      	mov	r3, r0
    7d68:	71fb      	strb	r3, [r7, #7]
{
    Command::stop = doitFreiner;
    7d6a:	4a04      	ldr	r2, [pc, #16]	(7d7c <_ZN7Command16freinageDUrgenceEb+0x1c>)
    7d6c:	79fb      	ldrb	r3, [r7, #7]
    7d6e:	7013      	strb	r3, [r2, #0]
}
    7d70:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7d74:	46bd      	mov	sp, r7
    7d76:	bc80      	pop	{r7}
    7d78:	4770      	bx	lr
    7d7a:	46c0      	nop			(mov r8, r8)
    7d7c:	20000574 	.word	0x20000574

00007d80 <_ZNK7Command4finiEv>:

// est ce que la commande a fini ?
bool Command::fini() const
    7d80:	b480      	push	{r7}
    7d82:	b083      	sub	sp, #12
    7d84:	af00      	add	r7, sp, #0
    7d86:	6078      	str	r0, [r7, #4]
{
    return false;
    7d88:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    7d8c:	4618      	mov	r0, r3
    7d8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7d92:	46bd      	mov	sp, r7
    7d94:	bc80      	pop	{r7}
    7d96:	4770      	bx	lr

00007d98 <_ZN7Command10limitSpeedEb>:

void Command::limitSpeed(bool doitLimiter)
    7d98:	b480      	push	{r7}
    7d9a:	b083      	sub	sp, #12
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	4603      	mov	r3, r0
    7da0:	71fb      	strb	r3, [r7, #7]
{
    Command::limiter = doitLimiter;
    7da2:	4a04      	ldr	r2, [pc, #16]	(7db4 <_ZN7Command10limitSpeedEb+0x1c>)
    7da4:	79fb      	ldrb	r3, [r7, #7]
    7da6:	7013      	strb	r3, [r2, #0]
    //vitesseLinMax = 1;//TODO : mettre une valeur réaliste, ou bien sauvegarder la première valeure et la diviser
}
    7da8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7dac:	46bd      	mov	sp, r7
    7dae:	bc80      	pop	{r7}
    7db0:	4770      	bx	lr
    7db2:	46c0      	nop			(mov r8, r8)
    7db4:	20000575 	.word	0x20000575

00007db8 <_ZN7Command8getLimitEv>:

bool Command::getLimit(void)
    7db8:	b480      	push	{r7}
    7dba:	af00      	add	r7, sp, #0
{
    return Command::limiter;
    7dbc:	4b02      	ldr	r3, [pc, #8]	(7dc8 <_ZN7Command8getLimitEv+0x10>)
    7dbe:	781b      	ldrb	r3, [r3, #0]
}
    7dc0:	4618      	mov	r0, r3
    7dc2:	46bd      	mov	sp, r7
    7dc4:	bc80      	pop	{r7}
    7dc6:	4770      	bx	lr
    7dc8:	20000575 	.word	0x20000575

00007dcc <_ZN7Command11isLookingAtEff>:
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();

    return (vect.getNorme() < (int) precision);
}

bool Command::isLookingAt(Angle a, float precision)
    7dcc:	b580      	push	{r7, lr}
    7dce:	b088      	sub	sp, #32
    7dd0:	af00      	add	r7, sp, #0
    7dd2:	60f8      	str	r0, [r7, #12]
    7dd4:	60b9      	str	r1, [r7, #8]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;
    7dd6:	4b3a      	ldr	r3, [pc, #232]	(7ec0 <_ZN7Command11isLookingAtEff+0xf4>)
    7dd8:	681a      	ldr	r2, [r3, #0]
    7dda:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7dde:	4618      	mov	r0, r3
    7de0:	4611      	mov	r1, r2
    7de2:	f001 fe8d 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    7de6:	69bb      	ldr	r3, [r7, #24]
    7de8:	68f8      	ldr	r0, [r7, #12]
    7dea:	4619      	mov	r1, r3
    7dec:	f012 ff38 	bl	1ac60 <__aeabi_fsub>
    7df0:	4603      	mov	r3, r0
    7df2:	61fb      	str	r3, [r7, #28]
    7df4:	e012      	b.n	7e1c <_ZN7Command11isLookingAtEff+0x50>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    7df6:	69f8      	ldr	r0, [r7, #28]
    7df8:	f012 fbca 	bl	1a590 <__aeabi_f2d>
    7dfc:	4602      	mov	r2, r0
    7dfe:	460b      	mov	r3, r1
    7e00:	4610      	mov	r0, r2
    7e02:	4619      	mov	r1, r3
    7e04:	a228      	add	r2, pc, #160	(adr r2, 7ea8 <_ZN7Command11isLookingAtEff+0xdc>)
    7e06:	ca0c      	ldmia	r2!, {r2, r3}
    7e08:	f012 fa62 	bl	1a2d0 <__aeabi_dsub>
    7e0c:	4602      	mov	r2, r0
    7e0e:	460b      	mov	r3, r1
    7e10:	4610      	mov	r0, r2
    7e12:	4619      	mov	r1, r3
    7e14:	f012 fed0 	bl	1abb8 <__aeabi_d2f>
    7e18:	4603      	mov	r3, r0
    7e1a:	61fb      	str	r3, [r7, #28]

bool Command::isLookingAt(Angle a, float precision)
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    7e1c:	69f8      	ldr	r0, [r7, #28]
    7e1e:	f012 fbb7 	bl	1a590 <__aeabi_f2d>
    7e22:	4602      	mov	r2, r0
    7e24:	460b      	mov	r3, r1
    7e26:	4610      	mov	r0, r2
    7e28:	4619      	mov	r1, r3
    7e2a:	a221      	add	r2, pc, #132	(adr r2, 7eb0 <_ZN7Command11isLookingAtEff+0xe4>)
    7e2c:	ca0c      	ldmia	r2!, {r2, r3}
    7e2e:	f012 fe87 	bl	1ab40 <__aeabi_dcmpge>
    7e32:	4603      	mov	r3, r0
    7e34:	2b00      	cmp	r3, #0
    7e36:	d1de      	bne.n	7df6 <_ZN7Command11isLookingAtEff+0x2a>
    7e38:	e012      	b.n	7e60 <_ZN7Command11isLookingAtEff+0x94>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    7e3a:	69f8      	ldr	r0, [r7, #28]
    7e3c:	f012 fba8 	bl	1a590 <__aeabi_f2d>
    7e40:	4602      	mov	r2, r0
    7e42:	460b      	mov	r3, r1
    7e44:	4610      	mov	r0, r2
    7e46:	4619      	mov	r1, r3
    7e48:	a217      	add	r2, pc, #92	(adr r2, 7ea8 <_ZN7Command11isLookingAtEff+0xdc>)
    7e4a:	ca0c      	ldmia	r2!, {r2, r3}
    7e4c:	f012 fa42 	bl	1a2d4 <__adddf3>
    7e50:	4602      	mov	r2, r0
    7e52:	460b      	mov	r3, r1
    7e54:	4610      	mov	r0, r2
    7e56:	4619      	mov	r1, r3
    7e58:	f012 feae 	bl	1abb8 <__aeabi_d2f>
    7e5c:	4603      	mov	r3, r0
    7e5e:	61fb      	str	r3, [r7, #28]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    7e60:	69f8      	ldr	r0, [r7, #28]
    7e62:	f012 fb95 	bl	1a590 <__aeabi_f2d>
    7e66:	4602      	mov	r2, r0
    7e68:	460b      	mov	r3, r1
    7e6a:	4610      	mov	r0, r2
    7e6c:	4619      	mov	r1, r3
    7e6e:	a212      	add	r2, pc, #72	(adr r2, 7eb8 <_ZN7Command11isLookingAtEff+0xec>)
    7e70:	ca0c      	ldmia	r2!, {r2, r3}
    7e72:	f012 fe51 	bl	1ab18 <__aeabi_dcmplt>
    7e76:	4603      	mov	r3, r0
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d1de      	bne.n	7e3a <_ZN7Command11isLookingAtEff+0x6e>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    7e7c:	69fb      	ldr	r3, [r7, #28]
    7e7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7e82:	f04f 0300 	mov.w	r3, #0	; 0x0
    7e86:	71fb      	strb	r3, [r7, #7]
    7e88:	4610      	mov	r0, r2
    7e8a:	68b9      	ldr	r1, [r7, #8]
    7e8c:	f013 f98e 	bl	1b1ac <__aeabi_fcmplt>
    7e90:	4603      	mov	r3, r0
    7e92:	2b00      	cmp	r3, #0
    7e94:	d002      	beq.n	7e9c <_ZN7Command11isLookingAtEff+0xd0>
    7e96:	f04f 0301 	mov.w	r3, #1	; 0x1
    7e9a:	71fb      	strb	r3, [r7, #7]
    7e9c:	79fb      	ldrb	r3, [r7, #7]
}
    7e9e:	4618      	mov	r0, r3
    7ea0:	f107 0720 	add.w	r7, r7, #32	; 0x20
    7ea4:	46bd      	mov	sp, r7
    7ea6:	bd80      	pop	{r7, pc}
    7ea8:	54442d18 	.word	0x54442d18
    7eac:	401921fb 	.word	0x401921fb
    7eb0:	54442d18 	.word	0x54442d18
    7eb4:	400921fb 	.word	0x400921fb
    7eb8:	54442d18 	.word	0x54442d18
    7ebc:	c00921fb 	.word	0xc00921fb
    7ec0:	20000578 	.word	0x20000578

00007ec4 <_ZN7Command11isLookingAtE8Positionf>:

bool Command::isLookingAt(Position pos, float precision)
    7ec4:	b5b0      	push	{r4, r5, r7, lr}
    7ec6:	b090      	sub	sp, #64
    7ec8:	af00      	add	r7, sp, #0
    7eca:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7ece:	e883 0003 	stmia.w	r3, {r0, r1}
    7ed2:	607a      	str	r2, [r7, #4]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    7ed4:	4b58      	ldr	r3, [pc, #352]	(8038 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    7ed6:	681a      	ldr	r2, [r3, #0]
    7ed8:	f107 0320 	add.w	r3, r7, #32	; 0x20
    7edc:	4618      	mov	r0, r3
    7ede:	4611      	mov	r1, r2
    7ee0:	f001 fe0e 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    7ee4:	f107 0318 	add.w	r3, r7, #24	; 0x18
    7ee8:	f107 0220 	add.w	r2, r7, #32	; 0x20
    7eec:	4618      	mov	r0, r3
    7eee:	4611      	mov	r1, r2
    7ef0:	f006 ff7c 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    7ef4:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7ef8:	f107 0208 	add.w	r2, r7, #8	; 0x8
    7efc:	f107 0c18 	add.w	ip, r7, #24	; 0x18
    7f00:	4618      	mov	r0, r3
    7f02:	4611      	mov	r1, r2
    7f04:	4662      	mov	r2, ip
    7f06:	f006 fda3 	bl	ea50 <_ZNK8PositionmiERKS_>
    Angle angleVise = atan2(delta.getY(),delta.getX());
    7f0a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7f0e:	4618      	mov	r0, r3
    7f10:	f006 fd50 	bl	e9b4 <_ZNK8Position4getYEv>
    7f14:	4603      	mov	r3, r0
    7f16:	4618      	mov	r0, r3
    7f18:	f012 fb3a 	bl	1a590 <__aeabi_f2d>
    7f1c:	4604      	mov	r4, r0
    7f1e:	460d      	mov	r5, r1
    7f20:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7f24:	4618      	mov	r0, r3
    7f26:	f006 fd39 	bl	e99c <_ZNK8Position4getXEv>
    7f2a:	4603      	mov	r3, r0
    7f2c:	4618      	mov	r0, r3
    7f2e:	f012 fb2f 	bl	1a590 <__aeabi_f2d>
    7f32:	4602      	mov	r2, r0
    7f34:	460b      	mov	r3, r1
    7f36:	4620      	mov	r0, r4
    7f38:	4629      	mov	r1, r5
    7f3a:	f016 fc5f 	bl	1e7fc <atan2>
    7f3e:	4602      	mov	r2, r0
    7f40:	460b      	mov	r3, r1
    7f42:	4610      	mov	r0, r2
    7f44:	4619      	mov	r1, r3
    7f46:	f012 fe37 	bl	1abb8 <__aeabi_d2f>
    7f4a:	4603      	mov	r3, r0
    7f4c:	63bb      	str	r3, [r7, #56]
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;
    7f4e:	4b3a      	ldr	r3, [pc, #232]	(8038 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    7f50:	681a      	ldr	r2, [r3, #0]
    7f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    7f56:	4618      	mov	r0, r3
    7f58:	4611      	mov	r1, r2
    7f5a:	f001 fdd1 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    7f5e:	6b7b      	ldr	r3, [r7, #52]
    7f60:	6bb8      	ldr	r0, [r7, #56]
    7f62:	4619      	mov	r1, r3
    7f64:	f012 fe7c 	bl	1ac60 <__aeabi_fsub>
    7f68:	4603      	mov	r3, r0
    7f6a:	63fb      	str	r3, [r7, #60]
    7f6c:	e012      	b.n	7f94 <_ZN7Command11isLookingAtE8Positionf+0xd0>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    7f6e:	6bf8      	ldr	r0, [r7, #60]
    7f70:	f012 fb0e 	bl	1a590 <__aeabi_f2d>
    7f74:	4602      	mov	r2, r0
    7f76:	460b      	mov	r3, r1
    7f78:	4610      	mov	r0, r2
    7f7a:	4619      	mov	r1, r3
    7f7c:	a228      	add	r2, pc, #160	(adr r2, 8020 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    7f7e:	ca0c      	ldmia	r2!, {r2, r3}
    7f80:	f012 f9a6 	bl	1a2d0 <__aeabi_dsub>
    7f84:	4602      	mov	r2, r0
    7f86:	460b      	mov	r3, r1
    7f88:	4610      	mov	r0, r2
    7f8a:	4619      	mov	r1, r3
    7f8c:	f012 fe14 	bl	1abb8 <__aeabi_d2f>
    7f90:	4603      	mov	r3, r0
    7f92:	63fb      	str	r3, [r7, #60]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    7f94:	6bf8      	ldr	r0, [r7, #60]
    7f96:	f012 fafb 	bl	1a590 <__aeabi_f2d>
    7f9a:	4602      	mov	r2, r0
    7f9c:	460b      	mov	r3, r1
    7f9e:	4610      	mov	r0, r2
    7fa0:	4619      	mov	r1, r3
    7fa2:	a221      	add	r2, pc, #132	(adr r2, 8028 <_ZN7Command11isLookingAtE8Positionf+0x164>)
    7fa4:	ca0c      	ldmia	r2!, {r2, r3}
    7fa6:	f012 fdcb 	bl	1ab40 <__aeabi_dcmpge>
    7faa:	4603      	mov	r3, r0
    7fac:	2b00      	cmp	r3, #0
    7fae:	d1de      	bne.n	7f6e <_ZN7Command11isLookingAtE8Positionf+0xaa>
    7fb0:	e012      	b.n	7fd8 <_ZN7Command11isLookingAtE8Positionf+0x114>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    7fb2:	6bf8      	ldr	r0, [r7, #60]
    7fb4:	f012 faec 	bl	1a590 <__aeabi_f2d>
    7fb8:	4602      	mov	r2, r0
    7fba:	460b      	mov	r3, r1
    7fbc:	4610      	mov	r0, r2
    7fbe:	4619      	mov	r1, r3
    7fc0:	a217      	add	r2, pc, #92	(adr r2, 8020 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    7fc2:	ca0c      	ldmia	r2!, {r2, r3}
    7fc4:	f012 f986 	bl	1a2d4 <__adddf3>
    7fc8:	4602      	mov	r2, r0
    7fca:	460b      	mov	r3, r1
    7fcc:	4610      	mov	r0, r2
    7fce:	4619      	mov	r1, r3
    7fd0:	f012 fdf2 	bl	1abb8 <__aeabi_d2f>
    7fd4:	4603      	mov	r3, r0
    7fd6:	63fb      	str	r3, [r7, #60]
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    7fd8:	6bf8      	ldr	r0, [r7, #60]
    7fda:	f012 fad9 	bl	1a590 <__aeabi_f2d>
    7fde:	4602      	mov	r2, r0
    7fe0:	460b      	mov	r3, r1
    7fe2:	4610      	mov	r0, r2
    7fe4:	4619      	mov	r1, r3
    7fe6:	a212      	add	r2, pc, #72	(adr r2, 8030 <_ZN7Command11isLookingAtE8Positionf+0x16c>)
    7fe8:	ca0c      	ldmia	r2!, {r2, r3}
    7fea:	f012 fd95 	bl	1ab18 <__aeabi_dcmplt>
    7fee:	4603      	mov	r3, r0
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d1de      	bne.n	7fb2 <_ZN7Command11isLookingAtE8Positionf+0xee>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    7ff4:	6bfb      	ldr	r3, [r7, #60]
    7ff6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7ffa:	f04f 0300 	mov.w	r3, #0	; 0x0
    7ffe:	70fb      	strb	r3, [r7, #3]
    8000:	4610      	mov	r0, r2
    8002:	6879      	ldr	r1, [r7, #4]
    8004:	f013 f8d2 	bl	1b1ac <__aeabi_fcmplt>
    8008:	4603      	mov	r3, r0
    800a:	2b00      	cmp	r3, #0
    800c:	d002      	beq.n	8014 <_ZN7Command11isLookingAtE8Positionf+0x150>
    800e:	f04f 0301 	mov.w	r3, #1	; 0x1
    8012:	70fb      	strb	r3, [r7, #3]
    8014:	78fb      	ldrb	r3, [r7, #3]
}
    8016:	4618      	mov	r0, r3
    8018:	f107 0740 	add.w	r7, r7, #64	; 0x40
    801c:	46bd      	mov	sp, r7
    801e:	bdb0      	pop	{r4, r5, r7, pc}
    8020:	54442d18 	.word	0x54442d18
    8024:	401921fb 	.word	0x401921fb
    8028:	54442d18 	.word	0x54442d18
    802c:	400921fb 	.word	0x400921fb
    8030:	54442d18 	.word	0x54442d18
    8034:	c00921fb 	.word	0xc00921fb
    8038:	20000578 	.word	0x20000578

0000803c <_ZN7Command6isNearE8Positionf>:
bool Command::getLimit(void)
{
    return Command::limiter;
}

bool Command::isNear(Position pos, float precision)
    803c:	b590      	push	{r4, r7, lr}
    803e:	b08d      	sub	sp, #52
    8040:	af00      	add	r7, sp, #0
    8042:	f107 0308 	add.w	r3, r7, #8	; 0x8
    8046:	e883 0003 	stmia.w	r3, {r0, r1}
    804a:	607a      	str	r2, [r7, #4]
{
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();
    804c:	4b1d      	ldr	r3, [pc, #116]	(80c4 <_ZN7Command6isNearE8Positionf+0x88>)
    804e:	681a      	ldr	r2, [r3, #0]
    8050:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8054:	4618      	mov	r0, r3
    8056:	4611      	mov	r1, r2
    8058:	f001 fd52 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    805c:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8060:	f107 0224 	add.w	r2, r7, #36	; 0x24
    8064:	4618      	mov	r0, r3
    8066:	4611      	mov	r1, r2
    8068:	f006 fec0 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    806c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8070:	f107 0208 	add.w	r2, r7, #8	; 0x8
    8074:	f107 0c1c 	add.w	ip, r7, #28	; 0x1c
    8078:	4618      	mov	r0, r3
    807a:	4611      	mov	r1, r2
    807c:	4662      	mov	r2, ip
    807e:	f006 fce7 	bl	ea50 <_ZNK8PositionmiERKS_>

    return (vect.getNorme() < (int) precision);
    8082:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8086:	4618      	mov	r0, r3
    8088:	f006 fdf0 	bl	ec6c <_ZNK8Position8getNormeEv>
    808c:	4604      	mov	r4, r0
    808e:	6878      	ldr	r0, [r7, #4]
    8090:	f013 f8b4 	bl	1b1fc <__aeabi_f2iz>
    8094:	4603      	mov	r3, r0
    8096:	4618      	mov	r0, r3
    8098:	f012 fe98 	bl	1adcc <__aeabi_i2f>
    809c:	4602      	mov	r2, r0
    809e:	f04f 0300 	mov.w	r3, #0	; 0x0
    80a2:	70fb      	strb	r3, [r7, #3]
    80a4:	4620      	mov	r0, r4
    80a6:	4611      	mov	r1, r2
    80a8:	f013 f880 	bl	1b1ac <__aeabi_fcmplt>
    80ac:	4603      	mov	r3, r0
    80ae:	2b00      	cmp	r3, #0
    80b0:	d002      	beq.n	80b8 <_ZN7Command6isNearE8Positionf+0x7c>
    80b2:	f04f 0301 	mov.w	r3, #1	; 0x1
    80b6:	70fb      	strb	r3, [r7, #3]
    80b8:	78fb      	ldrb	r3, [r7, #3]
}
    80ba:	4618      	mov	r0, r3
    80bc:	f107 0734 	add.w	r7, r7, #52	; 0x34
    80c0:	46bd      	mov	sp, r7
    80c2:	bd90      	pop	{r4, r7, pc}
    80c4:	20000578 	.word	0x20000578

000080c8 <_ZN7CommandD0Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    80c8:	b580      	push	{r7, lr}
    80ca:	b082      	sub	sp, #8
    80cc:	af00      	add	r7, sp, #0
    80ce:	6078      	str	r0, [r7, #4]
    80d0:	687a      	ldr	r2, [r7, #4]
    80d2:	4b08      	ldr	r3, [pc, #32]	(80f4 <_ZN7CommandD0Ev+0x2c>)
    80d4:	6013      	str	r3, [r2, #0]
{
}
    80d6:	f04f 0301 	mov.w	r3, #1	; 0x1
    80da:	b2db      	uxtb	r3, r3
    80dc:	2b00      	cmp	r3, #0
    80de:	d002      	beq.n	80e6 <_ZN7CommandD0Ev+0x1e>
    80e0:	6878      	ldr	r0, [r7, #4]
    80e2:	f006 fb87 	bl	e7f4 <_ZdlPv>
    80e6:	687b      	ldr	r3, [r7, #4]
    80e8:	4618      	mov	r0, r3
    80ea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    80ee:	46bd      	mov	sp, r7
    80f0:	bd80      	pop	{r7, pc}
    80f2:	46c0      	nop			(mov r8, r8)
    80f4:	00021cb8 	.word	0x00021cb8

000080f8 <_ZN7CommandD1Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    80f8:	b580      	push	{r7, lr}
    80fa:	b082      	sub	sp, #8
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
    8100:	687a      	ldr	r2, [r7, #4]
    8102:	4b08      	ldr	r3, [pc, #32]	(8124 <_ZN7CommandD1Ev+0x2c>)
    8104:	6013      	str	r3, [r2, #0]
{
}
    8106:	f04f 0300 	mov.w	r3, #0	; 0x0
    810a:	b2db      	uxtb	r3, r3
    810c:	2b00      	cmp	r3, #0
    810e:	d002      	beq.n	8116 <_ZN7CommandD1Ev+0x1e>
    8110:	6878      	ldr	r0, [r7, #4]
    8112:	f006 fb6f 	bl	e7f4 <_ZdlPv>
    8116:	687b      	ldr	r3, [r7, #4]
    8118:	4618      	mov	r0, r3
    811a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    811e:	46bd      	mov	sp, r7
    8120:	bd80      	pop	{r7, pc}
    8122:	46c0      	nop			(mov r8, r8)
    8124:	00021cb8 	.word	0x00021cb8

00008128 <_ZN7CommandD2Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    8128:	b580      	push	{r7, lr}
    812a:	b082      	sub	sp, #8
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
    8130:	687a      	ldr	r2, [r7, #4]
    8132:	4b08      	ldr	r3, [pc, #32]	(8154 <_ZN7CommandD2Ev+0x2c>)
    8134:	6013      	str	r3, [r2, #0]
{
}
    8136:	f04f 0300 	mov.w	r3, #0	; 0x0
    813a:	b2db      	uxtb	r3, r3
    813c:	2b00      	cmp	r3, #0
    813e:	d002      	beq.n	8146 <_ZN7CommandD2Ev+0x1e>
    8140:	6878      	ldr	r0, [r7, #4]
    8142:	f006 fb57 	bl	e7f4 <_ZdlPv>
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	4618      	mov	r0, r3
    814a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    814e:	46bd      	mov	sp, r7
    8150:	bd80      	pop	{r7, pc}
    8152:	46c0      	nop			(mov r8, r8)
    8154:	00021cb8 	.word	0x00021cb8

00008158 <_Z9diffAngleff>:

#ifndef abs
#define abs(x) fabs(x)
#endif

float diffAngle(float a, float b)
    8158:	b580      	push	{r7, lr}
    815a:	b084      	sub	sp, #16
    815c:	af00      	add	r7, sp, #0
    815e:	6078      	str	r0, [r7, #4]
    8160:	6039      	str	r1, [r7, #0]
{
    float t = a-b;
    8162:	6878      	ldr	r0, [r7, #4]
    8164:	6839      	ldr	r1, [r7, #0]
    8166:	f012 fd7b 	bl	1ac60 <__aeabi_fsub>
    816a:	4603      	mov	r3, r0
    816c:	60fb      	str	r3, [r7, #12]
    816e:	e012      	b.n	8196 <_Z9diffAngleff+0x3e>
    while (t > M_PI)
    {
        t -= 2*M_PI;
    8170:	68f8      	ldr	r0, [r7, #12]
    8172:	f012 fa0d 	bl	1a590 <__aeabi_f2d>
    8176:	4602      	mov	r2, r0
    8178:	460b      	mov	r3, r1
    817a:	4610      	mov	r0, r2
    817c:	4619      	mov	r1, r3
    817e:	a222      	add	r2, pc, #136	(adr r2, 8208 <_Z9diffAngleff+0xb0>)
    8180:	ca0c      	ldmia	r2!, {r2, r3}
    8182:	f012 f8a5 	bl	1a2d0 <__aeabi_dsub>
    8186:	4602      	mov	r2, r0
    8188:	460b      	mov	r3, r1
    818a:	4610      	mov	r0, r2
    818c:	4619      	mov	r1, r3
    818e:	f012 fd13 	bl	1abb8 <__aeabi_d2f>
    8192:	4603      	mov	r3, r0
    8194:	60fb      	str	r3, [r7, #12]
#endif

float diffAngle(float a, float b)
{
    float t = a-b;
    while (t > M_PI)
    8196:	68f8      	ldr	r0, [r7, #12]
    8198:	f012 f9fa 	bl	1a590 <__aeabi_f2d>
    819c:	4602      	mov	r2, r0
    819e:	460b      	mov	r3, r1
    81a0:	4610      	mov	r0, r2
    81a2:	4619      	mov	r1, r3
    81a4:	a21a      	add	r2, pc, #104	(adr r2, 8210 <_Z9diffAngleff+0xb8>)
    81a6:	ca0c      	ldmia	r2!, {r2, r3}
    81a8:	f012 fcd4 	bl	1ab54 <__aeabi_dcmpgt>
    81ac:	4603      	mov	r3, r0
    81ae:	2b00      	cmp	r3, #0
    81b0:	d1de      	bne.n	8170 <_Z9diffAngleff+0x18>
    81b2:	e012      	b.n	81da <_Z9diffAngleff+0x82>
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    {
        t += 2*M_PI;
    81b4:	68f8      	ldr	r0, [r7, #12]
    81b6:	f012 f9eb 	bl	1a590 <__aeabi_f2d>
    81ba:	4602      	mov	r2, r0
    81bc:	460b      	mov	r3, r1
    81be:	4610      	mov	r0, r2
    81c0:	4619      	mov	r1, r3
    81c2:	a211      	add	r2, pc, #68	(adr r2, 8208 <_Z9diffAngleff+0xb0>)
    81c4:	ca0c      	ldmia	r2!, {r2, r3}
    81c6:	f012 f885 	bl	1a2d4 <__adddf3>
    81ca:	4602      	mov	r2, r0
    81cc:	460b      	mov	r3, r1
    81ce:	4610      	mov	r0, r2
    81d0:	4619      	mov	r1, r3
    81d2:	f012 fcf1 	bl	1abb8 <__aeabi_d2f>
    81d6:	4603      	mov	r3, r0
    81d8:	60fb      	str	r3, [r7, #12]
    float t = a-b;
    while (t > M_PI)
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    81da:	68f8      	ldr	r0, [r7, #12]
    81dc:	f012 f9d8 	bl	1a590 <__aeabi_f2d>
    81e0:	4602      	mov	r2, r0
    81e2:	460b      	mov	r3, r1
    81e4:	4610      	mov	r0, r2
    81e6:	4619      	mov	r1, r3
    81e8:	a20b      	add	r2, pc, #44	(adr r2, 8218 <_Z9diffAngleff+0xc0>)
    81ea:	ca0c      	ldmia	r2!, {r2, r3}
    81ec:	f012 fc94 	bl	1ab18 <__aeabi_dcmplt>
    81f0:	4603      	mov	r3, r0
    81f2:	2b00      	cmp	r3, #0
    81f4:	d1de      	bne.n	81b4 <_Z9diffAngleff+0x5c>
    {
        t += 2*M_PI;
    }
    return t;
    81f6:	68fb      	ldr	r3, [r7, #12]
}
    81f8:	4618      	mov	r0, r3
    81fa:	f107 0710 	add.w	r7, r7, #16	; 0x10
    81fe:	46bd      	mov	sp, r7
    8200:	bd80      	pop	{r7, pc}
    8202:	46c0      	nop			(mov r8, r8)
    8204:	46c0      	nop			(mov r8, r8)
    8206:	46c0      	nop			(mov r8, r8)
    8208:	54442d18 	.word	0x54442d18
    820c:	401921fb 	.word	0x401921fb
    8210:	54442d18 	.word	0x54442d18
    8214:	400921fb 	.word	0x400921fb
    8218:	54442d18 	.word	0x54442d18
    821c:	c00921fb 	.word	0xc00921fb

00008220 <_ZN18CommandAllerEnArcA14getLinearSpeedEv>:
        linSpeed = rVise*angSpeed;*/


}

Vitesse CommandAllerEnArcA::getLinearSpeed()
    8220:	b480      	push	{r7}
    8222:	b083      	sub	sp, #12
    8224:	af00      	add	r7, sp, #0
    8226:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    8228:	687b      	ldr	r3, [r7, #4]
    822a:	695b      	ldr	r3, [r3, #20]
}
    822c:	4618      	mov	r0, r3
    822e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8232:	46bd      	mov	sp, r7
    8234:	bc80      	pop	{r7}
    8236:	4770      	bx	lr

00008238 <_ZN18CommandAllerEnArcA15getAngularSpeedEv>:

Angle CommandAllerEnArcA::getAngularSpeed()
    8238:	b480      	push	{r7}
    823a:	b083      	sub	sp, #12
    823c:	af00      	add	r7, sp, #0
    823e:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	699b      	ldr	r3, [r3, #24]
}
    8244:	4618      	mov	r0, r3
    8246:	f107 070c 	add.w	r7, r7, #12	; 0xc
    824a:	46bd      	mov	sp, r7
    824c:	bc80      	pop	{r7}
    824e:	4770      	bx	lr

00008250 <_ZNK18CommandAllerEnArcA4finiEv>:

// est ce que la commande a fini ?
bool CommandAllerEnArcA::fini() const
    8250:	b480      	push	{r7}
    8252:	b083      	sub	sp, #12
    8254:	af00      	add	r7, sp, #0
    8256:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    8258:	687b      	ldr	r3, [r7, #4]
    825a:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    825e:	4618      	mov	r0, r3
    8260:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8264:	46bd      	mov	sp, r7
    8266:	bc80      	pop	{r7}
    8268:	4770      	bx	lr
    826a:	46c0      	nop			(mov r8, r8)

0000826c <_ZN13CommandAllerA14getLinearSpeedEv>:
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
}

Vitesse CommandAllerA::getLinearSpeed()
    826c:	b480      	push	{r7}
    826e:	b083      	sub	sp, #12
    8270:	af00      	add	r7, sp, #0
    8272:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    8274:	687b      	ldr	r3, [r7, #4]
    8276:	699b      	ldr	r3, [r3, #24]
}
    8278:	4618      	mov	r0, r3
    827a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    827e:	46bd      	mov	sp, r7
    8280:	bc80      	pop	{r7}
    8282:	4770      	bx	lr

00008284 <_ZN13CommandAllerA15getAngularSpeedEv>:

Angle CommandAllerA::getAngularSpeed()
    8284:	b480      	push	{r7}
    8286:	b083      	sub	sp, #12
    8288:	af00      	add	r7, sp, #0
    828a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    828c:	687b      	ldr	r3, [r7, #4]
    828e:	69db      	ldr	r3, [r3, #28]
}
    8290:	4618      	mov	r0, r3
    8292:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8296:	46bd      	mov	sp, r7
    8298:	bc80      	pop	{r7}
    829a:	4770      	bx	lr

0000829c <_ZNK13CommandAllerA4finiEv>:

bool CommandAllerA::fini() const
    829c:	b480      	push	{r7}
    829e:	b083      	sub	sp, #12
    82a0:	af00      	add	r7, sp, #0
    82a2:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    82a4:	687b      	ldr	r3, [r7, #4]
    82a6:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    82aa:	4618      	mov	r0, r3
    82ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    82b0:	46bd      	mov	sp, r7
    82b2:	bc80      	pop	{r7}
    82b4:	4770      	bx	lr
    82b6:	46c0      	nop			(mov r8, r8)

000082b8 <_ZN18CommandTournerVers14getLinearSpeedEv>:
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}

Vitesse CommandTournerVers::getLinearSpeed()
    82b8:	b480      	push	{r7}
    82ba:	b083      	sub	sp, #12
    82bc:	af00      	add	r7, sp, #0
    82be:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    82c0:	4b03      	ldr	r3, [pc, #12]	(82d0 <_ZN18CommandTournerVers14getLinearSpeedEv+0x18>)
}
    82c2:	4618      	mov	r0, r3
    82c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    82c8:	46bd      	mov	sp, r7
    82ca:	bc80      	pop	{r7}
    82cc:	4770      	bx	lr
    82ce:	46c0      	nop			(mov r8, r8)
    82d0:	00000000 	.word	0x00000000

000082d4 <_ZN18CommandTournerVers15getAngularSpeedEv>:

Angle CommandTournerVers::getAngularSpeed()
    82d4:	b480      	push	{r7}
    82d6:	b083      	sub	sp, #12
    82d8:	af00      	add	r7, sp, #0
    82da:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    82dc:	687b      	ldr	r3, [r7, #4]
    82de:	68db      	ldr	r3, [r3, #12]
}
    82e0:	4618      	mov	r0, r3
    82e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    82e6:	46bd      	mov	sp, r7
    82e8:	bc80      	pop	{r7}
    82ea:	4770      	bx	lr

000082ec <_ZNK18CommandTournerVers4finiEv>:

bool CommandTournerVers::fini() const
    82ec:	b480      	push	{r7}
    82ee:	b083      	sub	sp, #12
    82f0:	af00      	add	r7, sp, #0
    82f2:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    82f4:	687b      	ldr	r3, [r7, #4]
    82f6:	7d1b      	ldrb	r3, [r3, #20]
}
    82f8:	4618      	mov	r0, r3
    82fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    82fe:	46bd      	mov	sp, r7
    8300:	bc80      	pop	{r7}
    8302:	4770      	bx	lr

00008304 <_ZN13CommandVirage14getLinearSpeedEv>:

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
}

Vitesse CommandVirage::getLinearSpeed()
    8304:	b480      	push	{r7}
    8306:	b083      	sub	sp, #12
    8308:	af00      	add	r7, sp, #0
    830a:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    830c:	687b      	ldr	r3, [r7, #4]
    830e:	689b      	ldr	r3, [r3, #8]
}
    8310:	4618      	mov	r0, r3
    8312:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8316:	46bd      	mov	sp, r7
    8318:	bc80      	pop	{r7}
    831a:	4770      	bx	lr

0000831c <_ZN13CommandVirage15getAngularSpeedEv>:

Angle CommandVirage::getAngularSpeed()
    831c:	b480      	push	{r7}
    831e:	b083      	sub	sp, #12
    8320:	af00      	add	r7, sp, #0
    8322:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    8324:	687b      	ldr	r3, [r7, #4]
    8326:	68db      	ldr	r3, [r3, #12]
}
    8328:	4618      	mov	r0, r3
    832a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    832e:	46bd      	mov	sp, r7
    8330:	bc80      	pop	{r7}
    8332:	4770      	bx	lr

00008334 <_ZNK13CommandVirage4finiEv>:

// est ce que la commande a fini ?
bool CommandVirage::fini() const
    8334:	b480      	push	{r7}
    8336:	b083      	sub	sp, #12
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	7f1b      	ldrb	r3, [r3, #28]
}
    8340:	4618      	mov	r0, r3
    8342:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8346:	46bd      	mov	sp, r7
    8348:	bc80      	pop	{r7}
    834a:	4770      	bx	lr

0000834c <_ZN15CommandAttendre6updateEv>:
CommandAttendre::CommandAttendre(int nbUpdates)
    : Command(), compte(nbUpdates)
{
}

void CommandAttendre::update()
    834c:	b480      	push	{r7}
    834e:	b083      	sub	sp, #12
    8350:	af00      	add	r7, sp, #0
    8352:	6078      	str	r0, [r7, #4]
{
    compte--;
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	685b      	ldr	r3, [r3, #4]
    8358:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    835c:	687b      	ldr	r3, [r7, #4]
    835e:	605a      	str	r2, [r3, #4]
}
    8360:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8364:	46bd      	mov	sp, r7
    8366:	bc80      	pop	{r7}
    8368:	4770      	bx	lr
    836a:	46c0      	nop			(mov r8, r8)

0000836c <_ZN15CommandAttendre14getLinearSpeedEv>:

Vitesse CommandAttendre::getLinearSpeed()
    836c:	b480      	push	{r7}
    836e:	b083      	sub	sp, #12
    8370:	af00      	add	r7, sp, #0
    8372:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8374:	4b03      	ldr	r3, [pc, #12]	(8384 <_ZN15CommandAttendre14getLinearSpeedEv+0x18>)
}
    8376:	4618      	mov	r0, r3
    8378:	f107 070c 	add.w	r7, r7, #12	; 0xc
    837c:	46bd      	mov	sp, r7
    837e:	bc80      	pop	{r7}
    8380:	4770      	bx	lr
    8382:	46c0      	nop			(mov r8, r8)
    8384:	00000000 	.word	0x00000000

00008388 <_ZN15CommandAttendre15getAngularSpeedEv>:

Angle CommandAttendre::getAngularSpeed()
    8388:	b480      	push	{r7}
    838a:	b083      	sub	sp, #12
    838c:	af00      	add	r7, sp, #0
    838e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8390:	4b03      	ldr	r3, [pc, #12]	(83a0 <_ZN15CommandAttendre15getAngularSpeedEv+0x18>)
}
    8392:	4618      	mov	r0, r3
    8394:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8398:	46bd      	mov	sp, r7
    839a:	bc80      	pop	{r7}
    839c:	4770      	bx	lr
    839e:	46c0      	nop			(mov r8, r8)
    83a0:	00000000 	.word	0x00000000

000083a4 <_ZNK15CommandAttendre4finiEv>:

bool CommandAttendre::fini() const
    83a4:	b480      	push	{r7}
    83a6:	b083      	sub	sp, #12
    83a8:	af00      	add	r7, sp, #0
    83aa:	6078      	str	r0, [r7, #4]
{
    return (compte <= 0);
    83ac:	687b      	ldr	r3, [r7, #4]
    83ae:	685b      	ldr	r3, [r3, #4]
    83b0:	2b00      	cmp	r3, #0
    83b2:	bfcc      	ite	gt
    83b4:	2300      	movgt	r3, #0
    83b6:	2301      	movle	r3, #1
    83b8:	b2db      	uxtb	r3, r3
}
    83ba:	4618      	mov	r0, r3
    83bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    83c0:	46bd      	mov	sp, r7
    83c2:	bc80      	pop	{r7}
    83c4:	4770      	bx	lr
    83c6:	46c0      	nop			(mov r8, r8)

000083c8 <_ZN18CommandTestAvancer6updateEv>:
CommandTestAvancer::CommandTestAvancer()
    : Command()
{
}

void CommandTestAvancer::update()
    83c8:	b480      	push	{r7}
    83ca:	b083      	sub	sp, #12
    83cc:	af00      	add	r7, sp, #0
    83ce:	6078      	str	r0, [r7, #4]
{
}
    83d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    83d4:	46bd      	mov	sp, r7
    83d6:	bc80      	pop	{r7}
    83d8:	4770      	bx	lr
    83da:	46c0      	nop			(mov r8, r8)

000083dc <_ZN18CommandTestAvancer14getLinearSpeedEv>:

Vitesse CommandTestAvancer::getLinearSpeed()
    83dc:	b480      	push	{r7}
    83de:	b083      	sub	sp, #12
    83e0:	af00      	add	r7, sp, #0
    83e2:	6078      	str	r0, [r7, #4]
{
    return VITESSE_LINEAIRE_MAX;
    83e4:	4b03      	ldr	r3, [pc, #12]	(83f4 <_ZN18CommandTestAvancer14getLinearSpeedEv+0x18>)
}
    83e6:	4618      	mov	r0, r3
    83e8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    83ec:	46bd      	mov	sp, r7
    83ee:	bc80      	pop	{r7}
    83f0:	4770      	bx	lr
    83f2:	46c0      	nop			(mov r8, r8)
    83f4:	40400000 	.word	0x40400000

000083f8 <_ZN18CommandTestAvancer15getAngularSpeedEv>:

Angle CommandTestAvancer::getAngularSpeed()
    83f8:	b480      	push	{r7}
    83fa:	b083      	sub	sp, #12
    83fc:	af00      	add	r7, sp, #0
    83fe:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8400:	4b03      	ldr	r3, [pc, #12]	(8410 <_ZN18CommandTestAvancer15getAngularSpeedEv+0x18>)
}
    8402:	4618      	mov	r0, r3
    8404:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8408:	46bd      	mov	sp, r7
    840a:	bc80      	pop	{r7}
    840c:	4770      	bx	lr
    840e:	46c0      	nop			(mov r8, r8)
    8410:	00000000 	.word	0x00000000

00008414 <_ZN24CommandTestTournerGauche6updateEv>:
CommandTestTournerGauche::CommandTestTournerGauche()
    : Command()
{
}

void CommandTestTournerGauche::update()
    8414:	b480      	push	{r7}
    8416:	b083      	sub	sp, #12
    8418:	af00      	add	r7, sp, #0
    841a:	6078      	str	r0, [r7, #4]
{
}
    841c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8420:	46bd      	mov	sp, r7
    8422:	bc80      	pop	{r7}
    8424:	4770      	bx	lr
    8426:	46c0      	nop			(mov r8, r8)

00008428 <_ZN24CommandTestTournerGauche14getLinearSpeedEv>:

Vitesse CommandTestTournerGauche::getLinearSpeed()
    8428:	b480      	push	{r7}
    842a:	b083      	sub	sp, #12
    842c:	af00      	add	r7, sp, #0
    842e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8430:	4b03      	ldr	r3, [pc, #12]	(8440 <_ZN24CommandTestTournerGauche14getLinearSpeedEv+0x18>)
}
    8432:	4618      	mov	r0, r3
    8434:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8438:	46bd      	mov	sp, r7
    843a:	bc80      	pop	{r7}
    843c:	4770      	bx	lr
    843e:	46c0      	nop			(mov r8, r8)
    8440:	00000000 	.word	0x00000000

00008444 <_ZN24CommandTestTournerGauche15getAngularSpeedEv>:

Angle CommandTestTournerGauche::getAngularSpeed()
    8444:	b480      	push	{r7}
    8446:	b083      	sub	sp, #12
    8448:	af00      	add	r7, sp, #0
    844a:	6078      	str	r0, [r7, #4]
{
    return VITESSE_ANGULAIRE_MAX;
    844c:	4b03      	ldr	r3, [pc, #12]	(845c <_ZN24CommandTestTournerGauche15getAngularSpeedEv+0x18>)
}
    844e:	4618      	mov	r0, r3
    8450:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8454:	46bd      	mov	sp, r7
    8456:	bc80      	pop	{r7}
    8458:	4770      	bx	lr
    845a:	46c0      	nop			(mov r8, r8)
    845c:	3cf5c28f 	.word	0x3cf5c28f

00008460 <_ZN24CommandTestTournerGaucheC1Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    8460:	b580      	push	{r7, lr}
    8462:	b082      	sub	sp, #8
    8464:	af00      	add	r7, sp, #0
    8466:	6078      	str	r0, [r7, #4]
    : Command()
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	4618      	mov	r0, r3
    846c:	f7ff fc38 	bl	7ce0 <_ZN7CommandC2Ev>
    8470:	687a      	ldr	r2, [r7, #4]
    8472:	4b04      	ldr	r3, [pc, #16]	(8484 <_ZN24CommandTestTournerGaucheC1Ev+0x24>)
    8474:	6013      	str	r3, [r2, #0]
{
}
    8476:	687b      	ldr	r3, [r7, #4]
    8478:	4618      	mov	r0, r3
    847a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    847e:	46bd      	mov	sp, r7
    8480:	bd80      	pop	{r7, pc}
    8482:	46c0      	nop			(mov r8, r8)
    8484:	00021ce0 	.word	0x00021ce0

00008488 <_ZN24CommandTestTournerGaucheC2Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    8488:	b580      	push	{r7, lr}
    848a:	b082      	sub	sp, #8
    848c:	af00      	add	r7, sp, #0
    848e:	6078      	str	r0, [r7, #4]
    : Command()
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	4618      	mov	r0, r3
    8494:	f7ff fc24 	bl	7ce0 <_ZN7CommandC2Ev>
    8498:	687a      	ldr	r2, [r7, #4]
    849a:	4b04      	ldr	r3, [pc, #16]	(84ac <_ZN24CommandTestTournerGaucheC2Ev+0x24>)
    849c:	6013      	str	r3, [r2, #0]
{
}
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	4618      	mov	r0, r3
    84a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    84a6:	46bd      	mov	sp, r7
    84a8:	bd80      	pop	{r7, pc}
    84aa:	46c0      	nop			(mov r8, r8)
    84ac:	00021ce0 	.word	0x00021ce0

000084b0 <_ZN18CommandTestAvancerC1Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    84b0:	b580      	push	{r7, lr}
    84b2:	b082      	sub	sp, #8
    84b4:	af00      	add	r7, sp, #0
    84b6:	6078      	str	r0, [r7, #4]
    : Command()
    84b8:	687b      	ldr	r3, [r7, #4]
    84ba:	4618      	mov	r0, r3
    84bc:	f7ff fc10 	bl	7ce0 <_ZN7CommandC2Ev>
    84c0:	687a      	ldr	r2, [r7, #4]
    84c2:	4b04      	ldr	r3, [pc, #16]	(84d4 <_ZN18CommandTestAvancerC1Ev+0x24>)
    84c4:	6013      	str	r3, [r2, #0]
{
}
    84c6:	687b      	ldr	r3, [r7, #4]
    84c8:	4618      	mov	r0, r3
    84ca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    84ce:	46bd      	mov	sp, r7
    84d0:	bd80      	pop	{r7, pc}
    84d2:	46c0      	nop			(mov r8, r8)
    84d4:	00021d08 	.word	0x00021d08

000084d8 <_ZN18CommandTestAvancerC2Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    84d8:	b580      	push	{r7, lr}
    84da:	b082      	sub	sp, #8
    84dc:	af00      	add	r7, sp, #0
    84de:	6078      	str	r0, [r7, #4]
    : Command()
    84e0:	687b      	ldr	r3, [r7, #4]
    84e2:	4618      	mov	r0, r3
    84e4:	f7ff fbfc 	bl	7ce0 <_ZN7CommandC2Ev>
    84e8:	687a      	ldr	r2, [r7, #4]
    84ea:	4b04      	ldr	r3, [pc, #16]	(84fc <_ZN18CommandTestAvancerC2Ev+0x24>)
    84ec:	6013      	str	r3, [r2, #0]
{
}
    84ee:	687b      	ldr	r3, [r7, #4]
    84f0:	4618      	mov	r0, r3
    84f2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    84f6:	46bd      	mov	sp, r7
    84f8:	bd80      	pop	{r7, pc}
    84fa:	46c0      	nop			(mov r8, r8)
    84fc:	00021d08 	.word	0x00021d08

00008500 <_ZN15CommandAttendreC1Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8500:	b580      	push	{r7, lr}
    8502:	b082      	sub	sp, #8
    8504:	af00      	add	r7, sp, #0
    8506:	6078      	str	r0, [r7, #4]
    8508:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    850a:	687b      	ldr	r3, [r7, #4]
    850c:	4618      	mov	r0, r3
    850e:	f7ff fbe7 	bl	7ce0 <_ZN7CommandC2Ev>
    8512:	687a      	ldr	r2, [r7, #4]
    8514:	4b05      	ldr	r3, [pc, #20]	(852c <_ZN15CommandAttendreC1Ei+0x2c>)
    8516:	6013      	str	r3, [r2, #0]
    8518:	687a      	ldr	r2, [r7, #4]
    851a:	683b      	ldr	r3, [r7, #0]
    851c:	6053      	str	r3, [r2, #4]
{
}
    851e:	687b      	ldr	r3, [r7, #4]
    8520:	4618      	mov	r0, r3
    8522:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8526:	46bd      	mov	sp, r7
    8528:	bd80      	pop	{r7, pc}
    852a:	46c0      	nop			(mov r8, r8)
    852c:	00021d30 	.word	0x00021d30

00008530 <_ZN15CommandAttendreC2Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8530:	b580      	push	{r7, lr}
    8532:	b082      	sub	sp, #8
    8534:	af00      	add	r7, sp, #0
    8536:	6078      	str	r0, [r7, #4]
    8538:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	4618      	mov	r0, r3
    853e:	f7ff fbcf 	bl	7ce0 <_ZN7CommandC2Ev>
    8542:	687a      	ldr	r2, [r7, #4]
    8544:	4b05      	ldr	r3, [pc, #20]	(855c <_ZN15CommandAttendreC2Ei+0x2c>)
    8546:	6013      	str	r3, [r2, #0]
    8548:	687a      	ldr	r2, [r7, #4]
    854a:	683b      	ldr	r3, [r7, #0]
    854c:	6053      	str	r3, [r2, #4]
{
}
    854e:	687b      	ldr	r3, [r7, #4]
    8550:	4618      	mov	r0, r3
    8552:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8556:	46bd      	mov	sp, r7
    8558:	bd80      	pop	{r7, pc}
    855a:	46c0      	nop			(mov r8, r8)
    855c:	00021d30 	.word	0x00021d30

00008560 <_ZN13CommandVirage6updateEv>:
    vitesseLinMax = vitesseLineaireMax;

    m_fini = false;
}

void CommandVirage::update()
    8560:	b590      	push	{r4, r7, lr}
    8562:	b091      	sub	sp, #68
    8564:	af00      	add	r7, sp, #0
    8566:	6178      	str	r0, [r7, #20]
{
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    8568:	4b85      	ldr	r3, [pc, #532]	(8780 <_ZN13CommandVirage6updateEv+0x220>)
    856a:	62bb      	str	r3, [r7, #40]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    856c:	4b85      	ldr	r3, [pc, #532]	(8784 <_ZN13CommandVirage6updateEv+0x224>)
    856e:	62fb      	str	r3, [r7, #44]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    8570:	697b      	ldr	r3, [r7, #20]
    8572:	695b      	ldr	r3, [r3, #20]
    8574:	633b      	str	r3, [r7, #48]

    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    8576:	6b38      	ldr	r0, [r7, #48]
    8578:	6b39      	ldr	r1, [r7, #48]
    857a:	f012 fc7b 	bl	1ae74 <__aeabi_fmul>
    857e:	4603      	mov	r3, r0
    8580:	461a      	mov	r2, r3
    8582:	697b      	ldr	r3, [r7, #20]
    8584:	699b      	ldr	r3, [r3, #24]
    8586:	4610      	mov	r0, r2
    8588:	4619      	mov	r1, r3
    858a:	f012 fb69 	bl	1ac60 <__aeabi_fsub>
    858e:	4603      	mov	r3, r0
    8590:	4618      	mov	r0, r3
    8592:	497d      	ldr	r1, [pc, #500]	(8788 <_ZN13CommandVirage6updateEv+0x228>)
    8594:	f012 fc6e 	bl	1ae74 <__aeabi_fmul>
    8598:	4603      	mov	r3, r0
    859a:	4618      	mov	r0, r3
    859c:	6af9      	ldr	r1, [r7, #44]
    859e:	f012 fd1d 	bl	1afdc <__aeabi_fdiv>
    85a2:	4603      	mov	r3, r0
    85a4:	637b      	str	r3, [r7, #52]

    float angleRestant = diffAngle(angleVise, Odometrie::odometrie->getPos().getAngle());
    85a6:	697b      	ldr	r3, [r7, #20]
    85a8:	691c      	ldr	r4, [r3, #16]
    85aa:	4b78      	ldr	r3, [pc, #480]	(878c <_ZN13CommandVirage6updateEv+0x22c>)
    85ac:	681a      	ldr	r2, [r3, #0]
    85ae:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    85b2:	4618      	mov	r0, r3
    85b4:	4611      	mov	r1, r2
    85b6:	f001 faa3 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    85ba:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    85be:	4618      	mov	r0, r3
    85c0:	f006 fc26 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    85c4:	4603      	mov	r3, r0
    85c6:	4620      	mov	r0, r4
    85c8:	4619      	mov	r1, r3
    85ca:	f7ff fdc5 	bl	8158 <_Z9diffAngleff>
    85ce:	4603      	mov	r3, r0
    85d0:	63bb      	str	r3, [r7, #56]
    float distanceRestante = abs(rayonCourbure*angleRestant);
    85d2:	697b      	ldr	r3, [r7, #20]
    85d4:	685b      	ldr	r3, [r3, #4]
    85d6:	4618      	mov	r0, r3
    85d8:	6bb9      	ldr	r1, [r7, #56]
    85da:	f012 fc4b 	bl	1ae74 <__aeabi_fmul>
    85de:	4603      	mov	r3, r0
    85e0:	4618      	mov	r0, r3
    85e2:	496b      	ldr	r1, [pc, #428]	(8790 <_ZN13CommandVirage6updateEv+0x230>)
    85e4:	f012 fe00 	bl	1b1e8 <__aeabi_fcmpgt>
    85e8:	4603      	mov	r3, r0
    85ea:	2b00      	cmp	r3, #0
    85ec:	d008      	beq.n	8600 <_ZN13CommandVirage6updateEv+0xa0>
    85ee:	697b      	ldr	r3, [r7, #20]
    85f0:	685b      	ldr	r3, [r3, #4]
    85f2:	4618      	mov	r0, r3
    85f4:	6bb9      	ldr	r1, [r7, #56]
    85f6:	f012 fc3d 	bl	1ae74 <__aeabi_fmul>
    85fa:	4603      	mov	r3, r0
    85fc:	607b      	str	r3, [r7, #4]
    85fe:	e009      	b.n	8614 <_ZN13CommandVirage6updateEv+0xb4>
    8600:	697b      	ldr	r3, [r7, #20]
    8602:	685b      	ldr	r3, [r3, #4]
    8604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8608:	4618      	mov	r0, r3
    860a:	6bb9      	ldr	r1, [r7, #56]
    860c:	f012 fc32 	bl	1ae74 <__aeabi_fmul>
    8610:	4603      	mov	r3, r0
    8612:	607b      	str	r3, [r7, #4]
    8614:	687a      	ldr	r2, [r7, #4]
    8616:	63fa      	str	r2, [r7, #60]

    // gestion de si la commande a fini
    // si l'angle restant est bon ou si on a dépassé l'angle visé
    if (abs(angleRestant) < M_PI/90.0f || ((angleRestant > 0.0f) != (rayonCourbure > 0.0f)))
    8618:	6bb8      	ldr	r0, [r7, #56]
    861a:	495d      	ldr	r1, [pc, #372]	(8790 <_ZN13CommandVirage6updateEv+0x230>)
    861c:	f012 fde4 	bl	1b1e8 <__aeabi_fcmpgt>
    8620:	4603      	mov	r3, r0
    8622:	2b00      	cmp	r3, #0
    8624:	d00f      	beq.n	8646 <_ZN13CommandVirage6updateEv+0xe6>
    8626:	f04f 0300 	mov.w	r3, #0	; 0x0
    862a:	70fb      	strb	r3, [r7, #3]
    862c:	6bb8      	ldr	r0, [r7, #56]
    862e:	4958      	ldr	r1, [pc, #352]	(8790 <_ZN13CommandVirage6updateEv+0x230>)
    8630:	f012 fdb2 	bl	1b198 <__aeabi_fcmpeq>
    8634:	4603      	mov	r3, r0
    8636:	2b00      	cmp	r3, #0
    8638:	d102      	bne.n	8640 <_ZN13CommandVirage6updateEv+0xe0>
    863a:	f04f 0301 	mov.w	r3, #1	; 0x1
    863e:	70fb      	strb	r3, [r7, #3]
    8640:	78fb      	ldrb	r3, [r7, #3]
    8642:	60bb      	str	r3, [r7, #8]
    8644:	e03e      	b.n	86c4 <_ZN13CommandVirage6updateEv+0x164>
    8646:	6bbb      	ldr	r3, [r7, #56]
    8648:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    864c:	4618      	mov	r0, r3
    864e:	f011 ff9f 	bl	1a590 <__aeabi_f2d>
    8652:	4602      	mov	r2, r0
    8654:	460b      	mov	r3, r1
    8656:	4610      	mov	r0, r2
    8658:	4619      	mov	r1, r3
    865a:	a247      	add	r2, pc, #284	(adr r2, 8778 <_ZN13CommandVirage6updateEv+0x218>)
    865c:	ca0c      	ldmia	r2!, {r2, r3}
    865e:	f012 fa5b 	bl	1ab18 <__aeabi_dcmplt>
    8662:	4603      	mov	r3, r0
    8664:	2b00      	cmp	r3, #0
    8666:	d124      	bne.n	86b2 <_ZN13CommandVirage6updateEv+0x152>
    8668:	f04f 0300 	mov.w	r3, #0	; 0x0
    866c:	70bb      	strb	r3, [r7, #2]
    866e:	6bb8      	ldr	r0, [r7, #56]
    8670:	4947      	ldr	r1, [pc, #284]	(8790 <_ZN13CommandVirage6updateEv+0x230>)
    8672:	f012 fdb9 	bl	1b1e8 <__aeabi_fcmpgt>
    8676:	4603      	mov	r3, r0
    8678:	2b00      	cmp	r3, #0
    867a:	d002      	beq.n	8682 <_ZN13CommandVirage6updateEv+0x122>
    867c:	f04f 0301 	mov.w	r3, #1	; 0x1
    8680:	70bb      	strb	r3, [r7, #2]
    8682:	78ba      	ldrb	r2, [r7, #2]
    8684:	613a      	str	r2, [r7, #16]
    8686:	697b      	ldr	r3, [r7, #20]
    8688:	685a      	ldr	r2, [r3, #4]
    868a:	f04f 0300 	mov.w	r3, #0	; 0x0
    868e:	707b      	strb	r3, [r7, #1]
    8690:	4610      	mov	r0, r2
    8692:	493f      	ldr	r1, [pc, #252]	(8790 <_ZN13CommandVirage6updateEv+0x230>)
    8694:	f012 fda8 	bl	1b1e8 <__aeabi_fcmpgt>
    8698:	4603      	mov	r3, r0
    869a:	2b00      	cmp	r3, #0
    869c:	d002      	beq.n	86a4 <_ZN13CommandVirage6updateEv+0x144>
    869e:	f04f 0301 	mov.w	r3, #1	; 0x1
    86a2:	707b      	strb	r3, [r7, #1]
    86a4:	787b      	ldrb	r3, [r7, #1]
    86a6:	693a      	ldr	r2, [r7, #16]
    86a8:	ea82 0303 	eor.w	r3, r2, r3
    86ac:	b2db      	uxtb	r3, r3
    86ae:	2b00      	cmp	r3, #0
    86b0:	d003      	beq.n	86ba <_ZN13CommandVirage6updateEv+0x15a>
    86b2:	f04f 0301 	mov.w	r3, #1	; 0x1
    86b6:	60fb      	str	r3, [r7, #12]
    86b8:	e002      	b.n	86c0 <_ZN13CommandVirage6updateEv+0x160>
    86ba:	f04f 0200 	mov.w	r2, #0	; 0x0
    86be:	60fa      	str	r2, [r7, #12]
    86c0:	68fb      	ldr	r3, [r7, #12]
    86c2:	60bb      	str	r3, [r7, #8]
    86c4:	68ba      	ldr	r2, [r7, #8]
    86c6:	2a00      	cmp	r2, #0
    86c8:	d003      	beq.n	86d2 <_ZN13CommandVirage6updateEv+0x172>
    {
        m_fini = true;
    86ca:	697b      	ldr	r3, [r7, #20]
    86cc:	f04f 0201 	mov.w	r2, #1	; 0x1
    86d0:	771a      	strb	r2, [r3, #28]
    }

    // phase de vitesse max
    if (distanceRestante > distanceVitesseMax)
    86d2:	6bf8      	ldr	r0, [r7, #60]
    86d4:	6b79      	ldr	r1, [r7, #52]
    86d6:	f012 fd87 	bl	1b1e8 <__aeabi_fcmpgt>
    86da:	4603      	mov	r3, r0
    86dc:	2b00      	cmp	r3, #0
    86de:	d016      	beq.n	870e <_ZN13CommandVirage6updateEv+0x1ae>
    {
            linSpeed += accLinMax;
    86e0:	697b      	ldr	r3, [r7, #20]
    86e2:	689b      	ldr	r3, [r3, #8]
    86e4:	4618      	mov	r0, r3
    86e6:	6ab9      	ldr	r1, [r7, #40]
    86e8:	f012 fabc 	bl	1ac64 <__addsf3>
    86ec:	4603      	mov	r3, r0
    86ee:	461a      	mov	r2, r3
    86f0:	697b      	ldr	r3, [r7, #20]
    86f2:	609a      	str	r2, [r3, #8]
        if (linSpeed > vitLinMax)
    86f4:	697b      	ldr	r3, [r7, #20]
    86f6:	689b      	ldr	r3, [r3, #8]
    86f8:	4618      	mov	r0, r3
    86fa:	6b39      	ldr	r1, [r7, #48]
    86fc:	f012 fd74 	bl	1b1e8 <__aeabi_fcmpgt>
    8700:	4603      	mov	r3, r0
    8702:	2b00      	cmp	r3, #0
    8704:	d027      	beq.n	8756 <_ZN13CommandVirage6updateEv+0x1f6>
            linSpeed = vitLinMax;
    8706:	697a      	ldr	r2, [r7, #20]
    8708:	6b3b      	ldr	r3, [r7, #48]
    870a:	6093      	str	r3, [r2, #8]
    870c:	e023      	b.n	8756 <_ZN13CommandVirage6updateEv+0x1f6>
    }

    // phase de décéleration
    else
    {
        linSpeed = sqrt(vFin2+2.0f*distanceRestante*decLinMax);
    870e:	697b      	ldr	r3, [r7, #20]
    8710:	699c      	ldr	r4, [r3, #24]
    8712:	6bfb      	ldr	r3, [r7, #60]
    8714:	4618      	mov	r0, r3
    8716:	4619      	mov	r1, r3
    8718:	f012 faa4 	bl	1ac64 <__addsf3>
    871c:	4603      	mov	r3, r0
    871e:	4618      	mov	r0, r3
    8720:	6af9      	ldr	r1, [r7, #44]
    8722:	f012 fba7 	bl	1ae74 <__aeabi_fmul>
    8726:	4603      	mov	r3, r0
    8728:	4620      	mov	r0, r4
    872a:	4619      	mov	r1, r3
    872c:	f012 fa9a 	bl	1ac64 <__addsf3>
    8730:	4603      	mov	r3, r0
    8732:	4618      	mov	r0, r3
    8734:	f011 ff2c 	bl	1a590 <__aeabi_f2d>
    8738:	4602      	mov	r2, r0
    873a:	460b      	mov	r3, r1
    873c:	4610      	mov	r0, r2
    873e:	4619      	mov	r1, r3
    8740:	f016 f862 	bl	1e808 <sqrt>
    8744:	4602      	mov	r2, r0
    8746:	460b      	mov	r3, r1
    8748:	4610      	mov	r0, r2
    874a:	4619      	mov	r1, r3
    874c:	f012 fa34 	bl	1abb8 <__aeabi_d2f>
    8750:	4602      	mov	r2, r0
    8752:	697b      	ldr	r3, [r7, #20]
    8754:	609a      	str	r2, [r3, #8]
    }

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
    8756:	697b      	ldr	r3, [r7, #20]
    8758:	689a      	ldr	r2, [r3, #8]
    875a:	697b      	ldr	r3, [r7, #20]
    875c:	685b      	ldr	r3, [r3, #4]
    875e:	4610      	mov	r0, r2
    8760:	4619      	mov	r1, r3
    8762:	f012 fc3b 	bl	1afdc <__aeabi_fdiv>
    8766:	4603      	mov	r3, r0
    8768:	461a      	mov	r2, r3
    876a:	697b      	ldr	r3, [r7, #20]
    876c:	60da      	str	r2, [r3, #12]
}
    876e:	f107 0744 	add.w	r7, r7, #68	; 0x44
    8772:	46bd      	mov	sp, r7
    8774:	bd90      	pop	{r4, r7, pc}
    8776:	46c0      	nop			(mov r8, r8)
    8778:	a2529d39 	.word	0xa2529d39
    877c:	3fa1df46 	.word	0x3fa1df46
    8780:	3ccccccd 	.word	0x3ccccccd
    8784:	3ca3d70a 	.word	0x3ca3d70a
    8788:	3f000000 	.word	0x3f000000
    878c:	20000578 	.word	0x20000578
    8790:	00000000 	.word	0x00000000

00008794 <_ZN13CommandVirageC1Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8794:	b580      	push	{r7, lr}
    8796:	b088      	sub	sp, #32
    8798:	af00      	add	r7, sp, #0
    879a:	60f8      	str	r0, [r7, #12]
    879c:	60b9      	str	r1, [r7, #8]
    879e:	607a      	str	r2, [r7, #4]
    87a0:	603b      	str	r3, [r7, #0]
    87a2:	68fb      	ldr	r3, [r7, #12]
    87a4:	4618      	mov	r0, r3
    87a6:	f7ff fa9b 	bl	7ce0 <_ZN7CommandC2Ev>
    87aa:	68fa      	ldr	r2, [r7, #12]
    87ac:	4b26      	ldr	r3, [pc, #152]	(8848 <_ZN13CommandVirageC1Effff+0xb4>)
    87ae:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    87b0:	6878      	ldr	r0, [r7, #4]
    87b2:	4926      	ldr	r1, [pc, #152]	(884c <_ZN13CommandVirageC1Effff+0xb8>)
    87b4:	f012 fd18 	bl	1b1e8 <__aeabi_fcmpgt>
    87b8:	4603      	mov	r3, r0
    87ba:	2b00      	cmp	r3, #0
    87bc:	d003      	beq.n	87c6 <_ZN13CommandVirageC1Effff+0x32>
        rayonCourbure = rayon;
    87be:	68fa      	ldr	r2, [r7, #12]
    87c0:	68bb      	ldr	r3, [r7, #8]
    87c2:	6053      	str	r3, [r2, #4]
    87c4:	e004      	b.n	87d0 <_ZN13CommandVirageC1Effff+0x3c>
    else
        rayonCourbure = -rayon;
    87c6:	68bb      	ldr	r3, [r7, #8]
    87c8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    87cc:	68fb      	ldr	r3, [r7, #12]
    87ce:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    87d0:	4b1f      	ldr	r3, [pc, #124]	(8850 <_ZN13CommandVirageC1Effff+0xbc>)
    87d2:	681b      	ldr	r3, [r3, #0]
    87d4:	4618      	mov	r0, r3
    87d6:	f001 f97b 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    87da:	4602      	mov	r2, r0
    87dc:	68fb      	ldr	r3, [r7, #12]
    87de:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    87e0:	4b1b      	ldr	r3, [pc, #108]	(8850 <_ZN13CommandVirageC1Effff+0xbc>)
    87e2:	681b      	ldr	r3, [r3, #0]
    87e4:	4618      	mov	r0, r3
    87e6:	f001 f967 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    87ea:	4602      	mov	r2, r0
    87ec:	68fb      	ldr	r3, [r7, #12]
    87ee:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    87f0:	4b17      	ldr	r3, [pc, #92]	(8850 <_ZN13CommandVirageC1Effff+0xbc>)
    87f2:	681a      	ldr	r2, [r3, #0]
    87f4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    87f8:	4618      	mov	r0, r3
    87fa:	4611      	mov	r1, r2
    87fc:	f001 f980 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    8800:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8804:	4618      	mov	r0, r3
    8806:	f006 fb03 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    880a:	4603      	mov	r3, r0
    880c:	4618      	mov	r0, r3
    880e:	6879      	ldr	r1, [r7, #4]
    8810:	f012 fa28 	bl	1ac64 <__addsf3>
    8814:	4603      	mov	r3, r0
    8816:	461a      	mov	r2, r3
    8818:	68fb      	ldr	r3, [r7, #12]
    881a:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    881c:	6ab8      	ldr	r0, [r7, #40]
    881e:	6ab9      	ldr	r1, [r7, #40]
    8820:	f012 fb28 	bl	1ae74 <__aeabi_fmul>
    8824:	4603      	mov	r3, r0
    8826:	461a      	mov	r2, r3
    8828:	68fb      	ldr	r3, [r7, #12]
    882a:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    882c:	68fa      	ldr	r2, [r7, #12]
    882e:	683b      	ldr	r3, [r7, #0]
    8830:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8832:	68fa      	ldr	r2, [r7, #12]
    8834:	f04f 0300 	mov.w	r3, #0	; 0x0
    8838:	7713      	strb	r3, [r2, #28]
}
    883a:	68fb      	ldr	r3, [r7, #12]
    883c:	4618      	mov	r0, r3
    883e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8842:	46bd      	mov	sp, r7
    8844:	bd80      	pop	{r7, pc}
    8846:	46c0      	nop			(mov r8, r8)
    8848:	00021d58 	.word	0x00021d58
    884c:	00000000 	.word	0x00000000
    8850:	20000578 	.word	0x20000578

00008854 <_ZN13CommandVirageC2Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8854:	b580      	push	{r7, lr}
    8856:	b088      	sub	sp, #32
    8858:	af00      	add	r7, sp, #0
    885a:	60f8      	str	r0, [r7, #12]
    885c:	60b9      	str	r1, [r7, #8]
    885e:	607a      	str	r2, [r7, #4]
    8860:	603b      	str	r3, [r7, #0]
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	4618      	mov	r0, r3
    8866:	f7ff fa3b 	bl	7ce0 <_ZN7CommandC2Ev>
    886a:	68fa      	ldr	r2, [r7, #12]
    886c:	4b26      	ldr	r3, [pc, #152]	(8908 <_ZN13CommandVirageC2Effff+0xb4>)
    886e:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8870:	6878      	ldr	r0, [r7, #4]
    8872:	4926      	ldr	r1, [pc, #152]	(890c <_ZN13CommandVirageC2Effff+0xb8>)
    8874:	f012 fcb8 	bl	1b1e8 <__aeabi_fcmpgt>
    8878:	4603      	mov	r3, r0
    887a:	2b00      	cmp	r3, #0
    887c:	d003      	beq.n	8886 <_ZN13CommandVirageC2Effff+0x32>
        rayonCourbure = rayon;
    887e:	68fa      	ldr	r2, [r7, #12]
    8880:	68bb      	ldr	r3, [r7, #8]
    8882:	6053      	str	r3, [r2, #4]
    8884:	e004      	b.n	8890 <_ZN13CommandVirageC2Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8886:	68bb      	ldr	r3, [r7, #8]
    8888:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    888c:	68fb      	ldr	r3, [r7, #12]
    888e:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8890:	4b1f      	ldr	r3, [pc, #124]	(8910 <_ZN13CommandVirageC2Effff+0xbc>)
    8892:	681b      	ldr	r3, [r3, #0]
    8894:	4618      	mov	r0, r3
    8896:	f001 f91b 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    889a:	4602      	mov	r2, r0
    889c:	68fb      	ldr	r3, [r7, #12]
    889e:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    88a0:	4b1b      	ldr	r3, [pc, #108]	(8910 <_ZN13CommandVirageC2Effff+0xbc>)
    88a2:	681b      	ldr	r3, [r3, #0]
    88a4:	4618      	mov	r0, r3
    88a6:	f001 f907 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    88aa:	4602      	mov	r2, r0
    88ac:	68fb      	ldr	r3, [r7, #12]
    88ae:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    88b0:	4b17      	ldr	r3, [pc, #92]	(8910 <_ZN13CommandVirageC2Effff+0xbc>)
    88b2:	681a      	ldr	r2, [r3, #0]
    88b4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    88b8:	4618      	mov	r0, r3
    88ba:	4611      	mov	r1, r2
    88bc:	f001 f920 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    88c0:	f107 0314 	add.w	r3, r7, #20	; 0x14
    88c4:	4618      	mov	r0, r3
    88c6:	f006 faa3 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    88ca:	4603      	mov	r3, r0
    88cc:	4618      	mov	r0, r3
    88ce:	6879      	ldr	r1, [r7, #4]
    88d0:	f012 f9c8 	bl	1ac64 <__addsf3>
    88d4:	4603      	mov	r3, r0
    88d6:	461a      	mov	r2, r3
    88d8:	68fb      	ldr	r3, [r7, #12]
    88da:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    88dc:	6ab8      	ldr	r0, [r7, #40]
    88de:	6ab9      	ldr	r1, [r7, #40]
    88e0:	f012 fac8 	bl	1ae74 <__aeabi_fmul>
    88e4:	4603      	mov	r3, r0
    88e6:	461a      	mov	r2, r3
    88e8:	68fb      	ldr	r3, [r7, #12]
    88ea:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    88ec:	68fa      	ldr	r2, [r7, #12]
    88ee:	683b      	ldr	r3, [r7, #0]
    88f0:	6153      	str	r3, [r2, #20]

    m_fini = false;
    88f2:	68fa      	ldr	r2, [r7, #12]
    88f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    88f8:	7713      	strb	r3, [r2, #28]
}
    88fa:	68fb      	ldr	r3, [r7, #12]
    88fc:	4618      	mov	r0, r3
    88fe:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8902:	46bd      	mov	sp, r7
    8904:	bd80      	pop	{r7, pc}
    8906:	46c0      	nop			(mov r8, r8)
    8908:	00021d58 	.word	0x00021d58
    890c:	00000000 	.word	0x00000000
    8910:	20000578 	.word	0x20000578

00008914 <_ZN13CommandAllerA11resetSpeedsEv>:
                linSpeed = linSpeedVisee;
        }
    }
}

void CommandAllerA::resetSpeeds()
    8914:	b580      	push	{r7, lr}
    8916:	b082      	sub	sp, #8
    8918:	af00      	add	r7, sp, #0
    891a:	6078      	str	r0, [r7, #4]
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    891c:	4b09      	ldr	r3, [pc, #36]	(8944 <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    891e:	681b      	ldr	r3, [r3, #0]
    8920:	4618      	mov	r0, r3
    8922:	f001 f8d5 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    8926:	4602      	mov	r2, r0
    8928:	687b      	ldr	r3, [r7, #4]
    892a:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    892c:	4b05      	ldr	r3, [pc, #20]	(8944 <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    892e:	681b      	ldr	r3, [r3, #0]
    8930:	4618      	mov	r0, r3
    8932:	f001 f8c1 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8936:	4602      	mov	r2, r0
    8938:	687b      	ldr	r3, [r7, #4]
    893a:	61da      	str	r2, [r3, #28]
}
    893c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8940:	46bd      	mov	sp, r7
    8942:	bd80      	pop	{r7, pc}
    8944:	20000578 	.word	0x20000578

00008948 <_ZN18CommandTournerVers6updateEv>:
    signeAngle = SGN_UNDEF;

    maxAngSpeed = maxSpeed;
}

void CommandTournerVers::update()
    8948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    894c:	b096      	sub	sp, #88
    894e:	af00      	add	r7, sp, #0
    8950:	60f8      	str	r0, [r7, #12]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    8952:	4bbe      	ldr	r3, [pc, #760]	(8c4c <_ZN18CommandTournerVers6updateEv+0x304>)
    8954:	63fb      	str	r3, [r7, #60]
    float vitAngMax = maxAngSpeed;
    8956:	68fb      	ldr	r3, [r7, #12]
    8958:	69db      	ldr	r3, [r3, #28]
    895a:	643b      	str	r3, [r7, #64]
    // float angleVitesseMax = M_PI/6.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    895c:	6c38      	ldr	r0, [r7, #64]
    895e:	49bc      	ldr	r1, [pc, #752]	(8c50 <_ZN18CommandTournerVers6updateEv+0x308>)
    8960:	f012 fa88 	bl	1ae74 <__aeabi_fmul>
    8964:	4603      	mov	r3, r0
    8966:	4618      	mov	r0, r3
    8968:	6c39      	ldr	r1, [r7, #64]
    896a:	f012 fa83 	bl	1ae74 <__aeabi_fmul>
    896e:	4603      	mov	r3, r0
    8970:	4618      	mov	r0, r3
    8972:	6bf9      	ldr	r1, [r7, #60]
    8974:	f012 fb32 	bl	1afdc <__aeabi_fdiv>
    8978:	4603      	mov	r3, r0
    897a:	647b      	str	r3, [r7, #68]
    float angle = Odometrie::odometrie->getPos().getAngle();
    897c:	4bb5      	ldr	r3, [pc, #724]	(8c54 <_ZN18CommandTournerVers6updateEv+0x30c>)
    897e:	681a      	ldr	r2, [r3, #0]
    8980:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8984:	4618      	mov	r0, r3
    8986:	4611      	mov	r1, r2
    8988:	f001 f8ba 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    898c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8990:	4618      	mov	r0, r3
    8992:	f006 fa3d 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    8996:	4603      	mov	r3, r0
    8998:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    899a:	4bae      	ldr	r3, [pc, #696]	(8c54 <_ZN18CommandTournerVers6updateEv+0x30c>)
    899c:	681a      	ldr	r2, [r3, #0]
    899e:	f107 0330 	add.w	r3, r7, #48	; 0x30
    89a2:	4618      	mov	r0, r3
    89a4:	4611      	mov	r1, r2
    89a6:	f001 f8ab 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    89aa:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    89ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
    89b2:	4618      	mov	r0, r3
    89b4:	4611      	mov	r1, r2
    89b6:	f006 fa19 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    float angleVise;
    if (!useAngle)
    89ba:	68fb      	ldr	r3, [r7, #12]
    89bc:	7d5b      	ldrb	r3, [r3, #21]
    89be:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    89c2:	b2db      	uxtb	r3, r3
    89c4:	2b00      	cmp	r3, #0
    89c6:	d02c      	beq.n	8a22 <_ZN18CommandTournerVers6updateEv+0xda>
    {
        Position delta = but-pos;
    89c8:	68fb      	ldr	r3, [r7, #12]
    89ca:	f103 0104 	add.w	r1, r3, #4	; 0x4
    89ce:	f107 0314 	add.w	r3, r7, #20	; 0x14
    89d2:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    89d6:	4618      	mov	r0, r3
    89d8:	f006 f83a 	bl	ea50 <_ZNK8PositionmiERKS_>
        angleVise = atan2(delta.getY(),delta.getX());
    89dc:	f107 0314 	add.w	r3, r7, #20	; 0x14
    89e0:	4618      	mov	r0, r3
    89e2:	f005 ffe7 	bl	e9b4 <_ZNK8Position4getYEv>
    89e6:	4603      	mov	r3, r0
    89e8:	4618      	mov	r0, r3
    89ea:	f011 fdd1 	bl	1a590 <__aeabi_f2d>
    89ee:	4604      	mov	r4, r0
    89f0:	460d      	mov	r5, r1
    89f2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    89f6:	4618      	mov	r0, r3
    89f8:	f005 ffd0 	bl	e99c <_ZNK8Position4getXEv>
    89fc:	4603      	mov	r3, r0
    89fe:	4618      	mov	r0, r3
    8a00:	f011 fdc6 	bl	1a590 <__aeabi_f2d>
    8a04:	4602      	mov	r2, r0
    8a06:	460b      	mov	r3, r1
    8a08:	4620      	mov	r0, r4
    8a0a:	4629      	mov	r1, r5
    8a0c:	f015 fef6 	bl	1e7fc <atan2>
    8a10:	4602      	mov	r2, r0
    8a12:	460b      	mov	r3, r1
    8a14:	4610      	mov	r0, r2
    8a16:	4619      	mov	r1, r3
    8a18:	f012 f8ce 	bl	1abb8 <__aeabi_d2f>
    8a1c:	4603      	mov	r3, r0
    8a1e:	64fb      	str	r3, [r7, #76]
    8a20:	e002      	b.n	8a28 <_ZN18CommandTournerVers6updateEv+0xe0>
    }
    else
    {
        angleVise = butAngle;
    8a22:	68fb      	ldr	r3, [r7, #12]
    8a24:	691b      	ldr	r3, [r3, #16]
    8a26:	64fb      	str	r3, [r7, #76]
    }
    float diffAng = diffAngle(angleVise,angle);
    8a28:	6cf8      	ldr	r0, [r7, #76]
    8a2a:	6cb9      	ldr	r1, [r7, #72]
    8a2c:	f7ff fb94 	bl	8158 <_Z9diffAngleff>
    8a30:	4603      	mov	r3, r0
    8a32:	653b      	str	r3, [r7, #80]

    // Check sharps
    StrategieV2::setTourneSurSoiMeme(true);
    8a34:	f04f 0001 	mov.w	r0, #1	; 0x1
    8a38:	f00d f88a 	bl	15b50 <_ZN11StrategieV219setTourneSurSoiMemeEb>


    //qDebug() << abs(angleVise)*180./3.14 << angleVitesseMax;

    if (abs(diffAng) > angleVitesseMax)
    8a3c:	6d38      	ldr	r0, [r7, #80]
    8a3e:	4986      	ldr	r1, [pc, #536]	(8c58 <_ZN18CommandTournerVers6updateEv+0x310>)
    8a40:	f012 fbd2 	bl	1b1e8 <__aeabi_fcmpgt>
    8a44:	4603      	mov	r3, r0
    8a46:	2b00      	cmp	r3, #0
    8a48:	d00f      	beq.n	8a6a <_ZN18CommandTournerVers6updateEv+0x122>
    8a4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a4e:	71fb      	strb	r3, [r7, #7]
    8a50:	6d38      	ldr	r0, [r7, #80]
    8a52:	4981      	ldr	r1, [pc, #516]	(8c58 <_ZN18CommandTournerVers6updateEv+0x310>)
    8a54:	f012 fba0 	bl	1b198 <__aeabi_fcmpeq>
    8a58:	4603      	mov	r3, r0
    8a5a:	2b00      	cmp	r3, #0
    8a5c:	d102      	bne.n	8a64 <_ZN18CommandTournerVers6updateEv+0x11c>
    8a5e:	f04f 0301 	mov.w	r3, #1	; 0x1
    8a62:	71fb      	strb	r3, [r7, #7]
    8a64:	79fb      	ldrb	r3, [r7, #7]
    8a66:	60bb      	str	r3, [r7, #8]
    8a68:	e011      	b.n	8a8e <_ZN18CommandTournerVers6updateEv+0x146>
    8a6a:	6d3b      	ldr	r3, [r7, #80]
    8a6c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8a70:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a74:	71bb      	strb	r3, [r7, #6]
    8a76:	4610      	mov	r0, r2
    8a78:	6c79      	ldr	r1, [r7, #68]
    8a7a:	f012 fbb5 	bl	1b1e8 <__aeabi_fcmpgt>
    8a7e:	4603      	mov	r3, r0
    8a80:	2b00      	cmp	r3, #0
    8a82:	d002      	beq.n	8a8a <_ZN18CommandTournerVers6updateEv+0x142>
    8a84:	f04f 0301 	mov.w	r3, #1	; 0x1
    8a88:	71bb      	strb	r3, [r7, #6]
    8a8a:	79bb      	ldrb	r3, [r7, #6]
    8a8c:	60bb      	str	r3, [r7, #8]
    8a8e:	68bb      	ldr	r3, [r7, #8]
    8a90:	2b00      	cmp	r3, #0
    8a92:	f000 80c9 	beq.w	8c28 <_ZN18CommandTournerVers6updateEv+0x2e0>
    {
        bool hasToDecelerate = (fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    8a96:	6d3b      	ldr	r3, [r7, #80]
    8a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8a9c:	4618      	mov	r0, r3
    8a9e:	f011 fd77 	bl	1a590 <__aeabi_f2d>
    8aa2:	4680      	mov	r8, r0
    8aa4:	4689      	mov	r9, r1
    8aa6:	68fb      	ldr	r3, [r7, #12]
    8aa8:	68da      	ldr	r2, [r3, #12]
    8aaa:	68fb      	ldr	r3, [r7, #12]
    8aac:	68db      	ldr	r3, [r3, #12]
    8aae:	4610      	mov	r0, r2
    8ab0:	4619      	mov	r1, r3
    8ab2:	f012 f9df 	bl	1ae74 <__aeabi_fmul>
    8ab6:	4603      	mov	r3, r0
    8ab8:	4618      	mov	r0, r3
    8aba:	6bf9      	ldr	r1, [r7, #60]
    8abc:	f012 fa8e 	bl	1afdc <__aeabi_fdiv>
    8ac0:	4603      	mov	r3, r0
    8ac2:	4618      	mov	r0, r3
    8ac4:	f011 fd64 	bl	1a590 <__aeabi_f2d>
    8ac8:	4604      	mov	r4, r0
    8aca:	460d      	mov	r5, r1
    8acc:	6bf8      	ldr	r0, [r7, #60]
    8ace:	f011 fd5f 	bl	1a590 <__aeabi_f2d>
    8ad2:	4602      	mov	r2, r0
    8ad4:	460b      	mov	r3, r1
    8ad6:	4610      	mov	r0, r2
    8ad8:	4619      	mov	r1, r3
    8ada:	f04f 0200 	mov.w	r2, #0	; 0x0
    8ade:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    8ae2:	f011 fda9 	bl	1a638 <__aeabi_dmul>
    8ae6:	4602      	mov	r2, r0
    8ae8:	460b      	mov	r3, r1
    8aea:	4620      	mov	r0, r4
    8aec:	4629      	mov	r1, r5
    8aee:	f011 fbf1 	bl	1a2d4 <__adddf3>
    8af2:	4602      	mov	r2, r0
    8af4:	460b      	mov	r3, r1
    8af6:	4614      	mov	r4, r2
    8af8:	461d      	mov	r5, r3
    8afa:	f04f 0300 	mov.w	r3, #0	; 0x0
    8afe:	f887 3057 	strb.w	r3, [r7, #87]
    8b02:	4640      	mov	r0, r8
    8b04:	4649      	mov	r1, r9
    8b06:	4622      	mov	r2, r4
    8b08:	462b      	mov	r3, r5
    8b0a:	f012 f805 	bl	1ab18 <__aeabi_dcmplt>
    8b0e:	4603      	mov	r3, r0
    8b10:	2b00      	cmp	r3, #0
    8b12:	d003      	beq.n	8b1c <_ZN18CommandTournerVers6updateEv+0x1d4>
    8b14:	f04f 0301 	mov.w	r3, #1	; 0x1
    8b18:	f887 3057 	strb.w	r3, [r7, #87]
        if (diffAng > 0)
    8b1c:	6d38      	ldr	r0, [r7, #80]
    8b1e:	494e      	ldr	r1, [pc, #312]	(8c58 <_ZN18CommandTournerVers6updateEv+0x310>)
    8b20:	f012 fb62 	bl	1b1e8 <__aeabi_fcmpgt>
    8b24:	4603      	mov	r3, r0
    8b26:	2b00      	cmp	r3, #0
    8b28:	d03c      	beq.n	8ba4 <_ZN18CommandTournerVers6updateEv+0x25c>
        {
            if (!hasToDecelerate)
    8b2a:	f897 3057 	ldrb.w	r3, [r7, #87]
    8b2e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8b32:	b2db      	uxtb	r3, r3
    8b34:	2b00      	cmp	r3, #0
    8b36:	d00a      	beq.n	8b4e <_ZN18CommandTournerVers6updateEv+0x206>
                angSpeed += accAngMax;
    8b38:	68fb      	ldr	r3, [r7, #12]
    8b3a:	68db      	ldr	r3, [r3, #12]
    8b3c:	4618      	mov	r0, r3
    8b3e:	6bf9      	ldr	r1, [r7, #60]
    8b40:	f012 f890 	bl	1ac64 <__addsf3>
    8b44:	4603      	mov	r3, r0
    8b46:	461a      	mov	r2, r3
    8b48:	68fb      	ldr	r3, [r7, #12]
    8b4a:	60da      	str	r2, [r3, #12]
    8b4c:	e01d      	b.n	8b8a <_ZN18CommandTournerVers6updateEv+0x242>
            else if (angSpeed > accAngMax*2)
    8b4e:	68fb      	ldr	r3, [r7, #12]
    8b50:	68dc      	ldr	r4, [r3, #12]
    8b52:	6bfb      	ldr	r3, [r7, #60]
    8b54:	4618      	mov	r0, r3
    8b56:	4619      	mov	r1, r3
    8b58:	f012 f884 	bl	1ac64 <__addsf3>
    8b5c:	4603      	mov	r3, r0
    8b5e:	4620      	mov	r0, r4
    8b60:	4619      	mov	r1, r3
    8b62:	f012 fb41 	bl	1b1e8 <__aeabi_fcmpgt>
    8b66:	4603      	mov	r3, r0
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d00e      	beq.n	8b8a <_ZN18CommandTournerVers6updateEv+0x242>
                angSpeed -= accAngMax*2;
    8b6c:	68fb      	ldr	r3, [r7, #12]
    8b6e:	68dc      	ldr	r4, [r3, #12]
    8b70:	6bf8      	ldr	r0, [r7, #60]
    8b72:	493a      	ldr	r1, [pc, #232]	(8c5c <_ZN18CommandTournerVers6updateEv+0x314>)
    8b74:	f012 f97e 	bl	1ae74 <__aeabi_fmul>
    8b78:	4603      	mov	r3, r0
    8b7a:	4620      	mov	r0, r4
    8b7c:	4619      	mov	r1, r3
    8b7e:	f012 f871 	bl	1ac64 <__addsf3>
    8b82:	4603      	mov	r3, r0
    8b84:	461a      	mov	r2, r3
    8b86:	68fb      	ldr	r3, [r7, #12]
    8b88:	60da      	str	r2, [r3, #12]

            if (angSpeed > vitAngMax)
    8b8a:	68fb      	ldr	r3, [r7, #12]
    8b8c:	68db      	ldr	r3, [r3, #12]
    8b8e:	4618      	mov	r0, r3
    8b90:	6c39      	ldr	r1, [r7, #64]
    8b92:	f012 fb29 	bl	1b1e8 <__aeabi_fcmpgt>
    8b96:	4603      	mov	r3, r0
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d052      	beq.n	8c42 <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = vitAngMax;
    8b9c:	68fa      	ldr	r2, [r7, #12]
    8b9e:	6c3b      	ldr	r3, [r7, #64]
    8ba0:	60d3      	str	r3, [r2, #12]
    8ba2:	e04e      	b.n	8c42 <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
        else
        {
            if (!hasToDecelerate)
    8ba4:	f897 3057 	ldrb.w	r3, [r7, #87]
    8ba8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8bac:	b2db      	uxtb	r3, r3
    8bae:	2b00      	cmp	r3, #0
    8bb0:	d00a      	beq.n	8bc8 <_ZN18CommandTournerVers6updateEv+0x280>
                angSpeed -= accAngMax;
    8bb2:	68fb      	ldr	r3, [r7, #12]
    8bb4:	68db      	ldr	r3, [r3, #12]
    8bb6:	4618      	mov	r0, r3
    8bb8:	6bf9      	ldr	r1, [r7, #60]
    8bba:	f012 f851 	bl	1ac60 <__aeabi_fsub>
    8bbe:	4603      	mov	r3, r0
    8bc0:	461a      	mov	r2, r3
    8bc2:	68fb      	ldr	r3, [r7, #12]
    8bc4:	60da      	str	r2, [r3, #12]
    8bc6:	e01d      	b.n	8c04 <_ZN18CommandTournerVers6updateEv+0x2bc>
            else if (angSpeed < -accAngMax*2)
    8bc8:	68fb      	ldr	r3, [r7, #12]
    8bca:	68dc      	ldr	r4, [r3, #12]
    8bcc:	6bf8      	ldr	r0, [r7, #60]
    8bce:	4923      	ldr	r1, [pc, #140]	(8c5c <_ZN18CommandTournerVers6updateEv+0x314>)
    8bd0:	f012 f950 	bl	1ae74 <__aeabi_fmul>
    8bd4:	4603      	mov	r3, r0
    8bd6:	4620      	mov	r0, r4
    8bd8:	4619      	mov	r1, r3
    8bda:	f012 fae7 	bl	1b1ac <__aeabi_fcmplt>
    8bde:	4603      	mov	r3, r0
    8be0:	2b00      	cmp	r3, #0
    8be2:	d00f      	beq.n	8c04 <_ZN18CommandTournerVers6updateEv+0x2bc>
                angSpeed += accAngMax*2;
    8be4:	68fb      	ldr	r3, [r7, #12]
    8be6:	68dc      	ldr	r4, [r3, #12]
    8be8:	6bfb      	ldr	r3, [r7, #60]
    8bea:	4618      	mov	r0, r3
    8bec:	4619      	mov	r1, r3
    8bee:	f012 f839 	bl	1ac64 <__addsf3>
    8bf2:	4603      	mov	r3, r0
    8bf4:	4620      	mov	r0, r4
    8bf6:	4619      	mov	r1, r3
    8bf8:	f012 f834 	bl	1ac64 <__addsf3>
    8bfc:	4603      	mov	r3, r0
    8bfe:	461a      	mov	r2, r3
    8c00:	68fb      	ldr	r3, [r7, #12]
    8c02:	60da      	str	r2, [r3, #12]

            if (angSpeed < -vitAngMax)
    8c04:	68fb      	ldr	r3, [r7, #12]
    8c06:	68da      	ldr	r2, [r3, #12]
    8c08:	6c3b      	ldr	r3, [r7, #64]
    8c0a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8c0e:	4610      	mov	r0, r2
    8c10:	4619      	mov	r1, r3
    8c12:	f012 facb 	bl	1b1ac <__aeabi_fcmplt>
    8c16:	4603      	mov	r3, r0
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d012      	beq.n	8c42 <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = -vitAngMax;
    8c1c:	6c3b      	ldr	r3, [r7, #64]
    8c1e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8c22:	68fb      	ldr	r3, [r7, #12]
    8c24:	60da      	str	r2, [r3, #12]
    8c26:	e00c      	b.n	8c42 <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    8c28:	6d38      	ldr	r0, [r7, #80]
    8c2a:	6c39      	ldr	r1, [r7, #64]
    8c2c:	f012 f922 	bl	1ae74 <__aeabi_fmul>
    8c30:	4603      	mov	r3, r0
    8c32:	4618      	mov	r0, r3
    8c34:	6c79      	ldr	r1, [r7, #68]
    8c36:	f012 f9d1 	bl	1afdc <__aeabi_fdiv>
    8c3a:	4603      	mov	r3, r0
    8c3c:	461a      	mov	r2, r3
    8c3e:	68fb      	ldr	r3, [r7, #12]
    8c40:	60da      	str	r2, [r3, #12]
            angSpeed = sqrt(2.0f*diff*accAngMax);
        else
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}
    8c42:	f107 0758 	add.w	r7, r7, #88	; 0x58
    8c46:	46bd      	mov	sp, r7
    8c48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    8c4c:	3983126f 	.word	0x3983126f
    8c50:	3f000000 	.word	0x3f000000
    8c54:	20000578 	.word	0x20000578
    8c58:	00000000 	.word	0x00000000
    8c5c:	c0000000 	.word	0xc0000000

00008c60 <_ZN18CommandTournerVersC1Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8c60:	b590      	push	{r4, r7, lr}
    8c62:	b087      	sub	sp, #28
    8c64:	af00      	add	r7, sp, #0
    8c66:	60f8      	str	r0, [r7, #12]
    8c68:	60b9      	str	r1, [r7, #8]
    8c6a:	607a      	str	r2, [r7, #4]
    : Command()
    8c6c:	68fb      	ldr	r3, [r7, #12]
    8c6e:	4618      	mov	r0, r3
    8c70:	f7ff f836 	bl	7ce0 <_ZN7CommandC2Ev>
    8c74:	68fa      	ldr	r2, [r7, #12]
    8c76:	4b19      	ldr	r3, [pc, #100]	(8cdc <_ZN18CommandTournerVersC1Eff+0x7c>)
    8c78:	6013      	str	r3, [r2, #0]
    8c7a:	68fb      	ldr	r3, [r7, #12]
    8c7c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8c80:	4618      	mov	r0, r3
    8c82:	f005 fe4f 	bl	e924 <_ZN8PositionC1Ev>
{
    but = Position();
    8c86:	68fb      	ldr	r3, [r7, #12]
    8c88:	f103 0404 	add.w	r4, r3, #4	; 0x4
    8c8c:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8c90:	4618      	mov	r0, r3
    8c92:	f005 fe47 	bl	e924 <_ZN8PositionC1Ev>
    8c96:	4620      	mov	r0, r4
    8c98:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8c9c:	e893 0006 	ldmia.w	r3, {r1, r2}
    8ca0:	f005 fefc 	bl	ea9c <_ZN8PositionaSES_>
    butAngle = a;
    8ca4:	68fa      	ldr	r2, [r7, #12]
    8ca6:	68bb      	ldr	r3, [r7, #8]
    8ca8:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8caa:	68fa      	ldr	r2, [r7, #12]
    8cac:	4b0c      	ldr	r3, [pc, #48]	(8ce0 <_ZN18CommandTournerVersC1Eff+0x80>)
    8cae:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    8cb0:	68fa      	ldr	r2, [r7, #12]
    8cb2:	f04f 0301 	mov.w	r3, #1	; 0x1
    8cb6:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8cb8:	68fa      	ldr	r2, [r7, #12]
    8cba:	f04f 0300 	mov.w	r3, #0	; 0x0
    8cbe:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8cc0:	68fa      	ldr	r2, [r7, #12]
    8cc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    8cc6:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8cc8:	68fa      	ldr	r2, [r7, #12]
    8cca:	687b      	ldr	r3, [r7, #4]
    8ccc:	61d3      	str	r3, [r2, #28]
}
    8cce:	68fb      	ldr	r3, [r7, #12]
    8cd0:	4618      	mov	r0, r3
    8cd2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    8cd6:	46bd      	mov	sp, r7
    8cd8:	bd90      	pop	{r4, r7, pc}
    8cda:	46c0      	nop			(mov r8, r8)
    8cdc:	00021d80 	.word	0x00021d80
    8ce0:	00000000 	.word	0x00000000

00008ce4 <_ZN18CommandTournerVersC2Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8ce4:	b590      	push	{r4, r7, lr}
    8ce6:	b087      	sub	sp, #28
    8ce8:	af00      	add	r7, sp, #0
    8cea:	60f8      	str	r0, [r7, #12]
    8cec:	60b9      	str	r1, [r7, #8]
    8cee:	607a      	str	r2, [r7, #4]
    : Command()
    8cf0:	68fb      	ldr	r3, [r7, #12]
    8cf2:	4618      	mov	r0, r3
    8cf4:	f7fe fff4 	bl	7ce0 <_ZN7CommandC2Ev>
    8cf8:	68fa      	ldr	r2, [r7, #12]
    8cfa:	4b19      	ldr	r3, [pc, #100]	(8d60 <_ZN18CommandTournerVersC2Eff+0x7c>)
    8cfc:	6013      	str	r3, [r2, #0]
    8cfe:	68fb      	ldr	r3, [r7, #12]
    8d00:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8d04:	4618      	mov	r0, r3
    8d06:	f005 fe0d 	bl	e924 <_ZN8PositionC1Ev>
{
    but = Position();
    8d0a:	68fb      	ldr	r3, [r7, #12]
    8d0c:	f103 0404 	add.w	r4, r3, #4	; 0x4
    8d10:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8d14:	4618      	mov	r0, r3
    8d16:	f005 fe05 	bl	e924 <_ZN8PositionC1Ev>
    8d1a:	4620      	mov	r0, r4
    8d1c:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8d20:	e893 0006 	ldmia.w	r3, {r1, r2}
    8d24:	f005 feba 	bl	ea9c <_ZN8PositionaSES_>
    butAngle = a;
    8d28:	68fa      	ldr	r2, [r7, #12]
    8d2a:	68bb      	ldr	r3, [r7, #8]
    8d2c:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8d2e:	68fa      	ldr	r2, [r7, #12]
    8d30:	4b0c      	ldr	r3, [pc, #48]	(8d64 <_ZN18CommandTournerVersC2Eff+0x80>)
    8d32:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    8d34:	68fa      	ldr	r2, [r7, #12]
    8d36:	f04f 0301 	mov.w	r3, #1	; 0x1
    8d3a:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8d3c:	68fa      	ldr	r2, [r7, #12]
    8d3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d42:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8d44:	68fa      	ldr	r2, [r7, #12]
    8d46:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d4a:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8d4c:	68fa      	ldr	r2, [r7, #12]
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	61d3      	str	r3, [r2, #28]
}
    8d52:	68fb      	ldr	r3, [r7, #12]
    8d54:	4618      	mov	r0, r3
    8d56:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    8d5a:	46bd      	mov	sp, r7
    8d5c:	bd90      	pop	{r4, r7, pc}
    8d5e:	46c0      	nop			(mov r8, r8)
    8d60:	00021d80 	.word	0x00021d80
    8d64:	00000000 	.word	0x00000000

00008d68 <_ZN18CommandTournerVersC1E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    8d68:	b580      	push	{r7, lr}
    8d6a:	b084      	sub	sp, #16
    8d6c:	af00      	add	r7, sp, #0
    8d6e:	60f8      	str	r0, [r7, #12]
    8d70:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8d74:	e880 0006 	stmia.w	r0, {r1, r2}
    8d78:	603b      	str	r3, [r7, #0]
    : Command()
    8d7a:	68fb      	ldr	r3, [r7, #12]
    8d7c:	4618      	mov	r0, r3
    8d7e:	f7fe ffaf 	bl	7ce0 <_ZN7CommandC2Ev>
    8d82:	68fa      	ldr	r2, [r7, #12]
    8d84:	4b16      	ldr	r3, [pc, #88]	(8de0 <_ZN18CommandTournerVersC1E8Positionf+0x78>)
    8d86:	6013      	str	r3, [r2, #0]
    8d88:	68fb      	ldr	r3, [r7, #12]
    8d8a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8d8e:	4618      	mov	r0, r3
    8d90:	f005 fdc8 	bl	e924 <_ZN8PositionC1Ev>
{
    but = p;
    8d94:	68fb      	ldr	r3, [r7, #12]
    8d96:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8d9a:	4618      	mov	r0, r3
    8d9c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8da0:	e893 0006 	ldmia.w	r3, {r1, r2}
    8da4:	f005 fe7a 	bl	ea9c <_ZN8PositionaSES_>
    butAngle = 0;
    8da8:	68fa      	ldr	r2, [r7, #12]
    8daa:	4b0e      	ldr	r3, [pc, #56]	(8de4 <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    8dac:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8dae:	68fa      	ldr	r2, [r7, #12]
    8db0:	4b0c      	ldr	r3, [pc, #48]	(8de4 <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    8db2:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    8db4:	68fa      	ldr	r2, [r7, #12]
    8db6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8dba:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8dbc:	68fa      	ldr	r2, [r7, #12]
    8dbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    8dc2:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8dc4:	68fa      	ldr	r2, [r7, #12]
    8dc6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8dca:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8dcc:	68fa      	ldr	r2, [r7, #12]
    8dce:	683b      	ldr	r3, [r7, #0]
    8dd0:	61d3      	str	r3, [r2, #28]
}
    8dd2:	68fb      	ldr	r3, [r7, #12]
    8dd4:	4618      	mov	r0, r3
    8dd6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8dda:	46bd      	mov	sp, r7
    8ddc:	bd80      	pop	{r7, pc}
    8dde:	46c0      	nop			(mov r8, r8)
    8de0:	00021d80 	.word	0x00021d80
    8de4:	00000000 	.word	0x00000000

00008de8 <_ZN18CommandTournerVersC2E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    8de8:	b580      	push	{r7, lr}
    8dea:	b084      	sub	sp, #16
    8dec:	af00      	add	r7, sp, #0
    8dee:	60f8      	str	r0, [r7, #12]
    8df0:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8df4:	e880 0006 	stmia.w	r0, {r1, r2}
    8df8:	603b      	str	r3, [r7, #0]
    : Command()
    8dfa:	68fb      	ldr	r3, [r7, #12]
    8dfc:	4618      	mov	r0, r3
    8dfe:	f7fe ff6f 	bl	7ce0 <_ZN7CommandC2Ev>
    8e02:	68fa      	ldr	r2, [r7, #12]
    8e04:	4b16      	ldr	r3, [pc, #88]	(8e60 <_ZN18CommandTournerVersC2E8Positionf+0x78>)
    8e06:	6013      	str	r3, [r2, #0]
    8e08:	68fb      	ldr	r3, [r7, #12]
    8e0a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8e0e:	4618      	mov	r0, r3
    8e10:	f005 fd88 	bl	e924 <_ZN8PositionC1Ev>
{
    but = p;
    8e14:	68fb      	ldr	r3, [r7, #12]
    8e16:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8e1a:	4618      	mov	r0, r3
    8e1c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8e20:	e893 0006 	ldmia.w	r3, {r1, r2}
    8e24:	f005 fe3a 	bl	ea9c <_ZN8PositionaSES_>
    butAngle = 0;
    8e28:	68fa      	ldr	r2, [r7, #12]
    8e2a:	4b0e      	ldr	r3, [pc, #56]	(8e64 <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    8e2c:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8e2e:	68fa      	ldr	r2, [r7, #12]
    8e30:	4b0c      	ldr	r3, [pc, #48]	(8e64 <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    8e32:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    8e34:	68fa      	ldr	r2, [r7, #12]
    8e36:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e3a:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8e3c:	68fa      	ldr	r2, [r7, #12]
    8e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e42:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8e44:	68fa      	ldr	r2, [r7, #12]
    8e46:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e4a:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8e4c:	68fa      	ldr	r2, [r7, #12]
    8e4e:	683b      	ldr	r3, [r7, #0]
    8e50:	61d3      	str	r3, [r2, #28]
}
    8e52:	68fb      	ldr	r3, [r7, #12]
    8e54:	4618      	mov	r0, r3
    8e56:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8e5a:	46bd      	mov	sp, r7
    8e5c:	bd80      	pop	{r7, pc}
    8e5e:	46c0      	nop			(mov r8, r8)
    8e60:	00021d80 	.word	0x00021d80
    8e64:	00000000 	.word	0x00000000

00008e68 <_ZN13CommandAllerAC1E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    8e68:	b580      	push	{r7, lr}
    8e6a:	b084      	sub	sp, #16
    8e6c:	af00      	add	r7, sp, #0
    8e6e:	60f8      	str	r0, [r7, #12]
    8e70:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8e74:	e880 0006 	stmia.w	r0, {r1, r2}
    8e78:	70fb      	strb	r3, [r7, #3]
    : Command()
    8e7a:	68fb      	ldr	r3, [r7, #12]
    8e7c:	4618      	mov	r0, r3
    8e7e:	f7fe ff2f 	bl	7ce0 <_ZN7CommandC2Ev>
    8e82:	68fa      	ldr	r2, [r7, #12]
    8e84:	4b21      	ldr	r3, [pc, #132]	(8f0c <_ZN13CommandAllerAC1E8Positionbfff+0xa4>)
    8e86:	6013      	str	r3, [r2, #0]
    8e88:	68fb      	ldr	r3, [r7, #12]
    8e8a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8e8e:	4618      	mov	r0, r3
    8e90:	f005 fd48 	bl	e924 <_ZN8PositionC1Ev>
{
    but = p;
    8e94:	68fb      	ldr	r3, [r7, #12]
    8e96:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8e9a:	4618      	mov	r0, r3
    8e9c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8ea0:	e893 0006 	ldmia.w	r3, {r1, r2}
    8ea4:	f005 fdfa 	bl	ea9c <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    8ea8:	68fa      	ldr	r2, [r7, #12]
    8eaa:	69bb      	ldr	r3, [r7, #24]
    8eac:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    8eae:	69f8      	ldr	r0, [r7, #28]
    8eb0:	69f9      	ldr	r1, [r7, #28]
    8eb2:	f011 ffdf 	bl	1ae74 <__aeabi_fmul>
    8eb6:	4603      	mov	r3, r0
    8eb8:	461a      	mov	r2, r3
    8eba:	68fb      	ldr	r3, [r7, #12]
    8ebc:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    8ebe:	68fa      	ldr	r2, [r7, #12]
    8ec0:	78fb      	ldrb	r3, [r7, #3]
    8ec2:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8ec6:	4b12      	ldr	r3, [pc, #72]	(8f10 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    8ec8:	681b      	ldr	r3, [r3, #0]
    8eca:	4618      	mov	r0, r3
    8ecc:	f000 fe00 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    8ed0:	4602      	mov	r2, r0
    8ed2:	68fb      	ldr	r3, [r7, #12]
    8ed4:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8ed6:	4b0e      	ldr	r3, [pc, #56]	(8f10 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    8ed8:	681b      	ldr	r3, [r3, #0]
    8eda:	4618      	mov	r0, r3
    8edc:	f000 fdec 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8ee0:	4602      	mov	r2, r0
    8ee2:	68fb      	ldr	r3, [r7, #12]
    8ee4:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    8ee6:	68fa      	ldr	r2, [r7, #12]
    8ee8:	f04f 0300 	mov.w	r3, #0	; 0x0
    8eec:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    8eee:	68fa      	ldr	r2, [r7, #12]
    8ef0:	4b08      	ldr	r3, [pc, #32]	(8f14 <_ZN13CommandAllerAC1E8Positionbfff+0xac>)
    8ef2:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    8ef4:	68fa      	ldr	r2, [r7, #12]
    8ef6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8efa:	f882 3028 	strb.w	r3, [r2, #40]
}
    8efe:	68fb      	ldr	r3, [r7, #12]
    8f00:	4618      	mov	r0, r3
    8f02:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8f06:	46bd      	mov	sp, r7
    8f08:	bd80      	pop	{r7, pc}
    8f0a:	46c0      	nop			(mov r8, r8)
    8f0c:	00021da8 	.word	0x00021da8
    8f10:	20000578 	.word	0x20000578
    8f14:	bf800000 	.word	0xbf800000

00008f18 <_ZN13CommandAllerAC2E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    8f18:	b580      	push	{r7, lr}
    8f1a:	b084      	sub	sp, #16
    8f1c:	af00      	add	r7, sp, #0
    8f1e:	60f8      	str	r0, [r7, #12]
    8f20:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8f24:	e880 0006 	stmia.w	r0, {r1, r2}
    8f28:	70fb      	strb	r3, [r7, #3]
    : Command()
    8f2a:	68fb      	ldr	r3, [r7, #12]
    8f2c:	4618      	mov	r0, r3
    8f2e:	f7fe fed7 	bl	7ce0 <_ZN7CommandC2Ev>
    8f32:	68fa      	ldr	r2, [r7, #12]
    8f34:	4b21      	ldr	r3, [pc, #132]	(8fbc <_ZN13CommandAllerAC2E8Positionbfff+0xa4>)
    8f36:	6013      	str	r3, [r2, #0]
    8f38:	68fb      	ldr	r3, [r7, #12]
    8f3a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8f3e:	4618      	mov	r0, r3
    8f40:	f005 fcf0 	bl	e924 <_ZN8PositionC1Ev>
{
    but = p;
    8f44:	68fb      	ldr	r3, [r7, #12]
    8f46:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8f4a:	4618      	mov	r0, r3
    8f4c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8f50:	e893 0006 	ldmia.w	r3, {r1, r2}
    8f54:	f005 fda2 	bl	ea9c <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    8f58:	68fa      	ldr	r2, [r7, #12]
    8f5a:	69bb      	ldr	r3, [r7, #24]
    8f5c:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    8f5e:	69f8      	ldr	r0, [r7, #28]
    8f60:	69f9      	ldr	r1, [r7, #28]
    8f62:	f011 ff87 	bl	1ae74 <__aeabi_fmul>
    8f66:	4603      	mov	r3, r0
    8f68:	461a      	mov	r2, r3
    8f6a:	68fb      	ldr	r3, [r7, #12]
    8f6c:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    8f6e:	68fa      	ldr	r2, [r7, #12]
    8f70:	78fb      	ldrb	r3, [r7, #3]
    8f72:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8f76:	4b12      	ldr	r3, [pc, #72]	(8fc0 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    8f78:	681b      	ldr	r3, [r3, #0]
    8f7a:	4618      	mov	r0, r3
    8f7c:	f000 fda8 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    8f80:	4602      	mov	r2, r0
    8f82:	68fb      	ldr	r3, [r7, #12]
    8f84:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8f86:	4b0e      	ldr	r3, [pc, #56]	(8fc0 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    8f88:	681b      	ldr	r3, [r3, #0]
    8f8a:	4618      	mov	r0, r3
    8f8c:	f000 fd94 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8f90:	4602      	mov	r2, r0
    8f92:	68fb      	ldr	r3, [r7, #12]
    8f94:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    8f96:	68fa      	ldr	r2, [r7, #12]
    8f98:	f04f 0300 	mov.w	r3, #0	; 0x0
    8f9c:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    8f9e:	68fa      	ldr	r2, [r7, #12]
    8fa0:	4b08      	ldr	r3, [pc, #32]	(8fc4 <_ZN13CommandAllerAC2E8Positionbfff+0xac>)
    8fa2:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    8fa4:	68fa      	ldr	r2, [r7, #12]
    8fa6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8faa:	f882 3028 	strb.w	r3, [r2, #40]
}
    8fae:	68fb      	ldr	r3, [r7, #12]
    8fb0:	4618      	mov	r0, r3
    8fb2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8fb6:	46bd      	mov	sp, r7
    8fb8:	bd80      	pop	{r7, pc}
    8fba:	46c0      	nop			(mov r8, r8)
    8fbc:	00021da8 	.word	0x00021da8
    8fc0:	20000578 	.word	0x20000578
    8fc4:	bf800000 	.word	0xbf800000

00008fc8 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    8fc8:	b082      	sub	sp, #8
    8fca:	b590      	push	{r4, r7, lr}
    8fcc:	b08f      	sub	sp, #60
    8fce:	af00      	add	r7, sp, #0
    8fd0:	60f8      	str	r0, [r7, #12]
    8fd2:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8fd6:	e880 0006 	stmia.w	r0, {r1, r2}
    8fda:	64fb      	str	r3, [r7, #76]
    : Command()
    8fdc:	68fb      	ldr	r3, [r7, #12]
    8fde:	4618      	mov	r0, r3
    8fe0:	f7fe fe7e 	bl	7ce0 <_ZN7CommandC2Ev>
    8fe4:	68fa      	ldr	r2, [r7, #12]
    8fe6:	4b50      	ldr	r3, [pc, #320]	(9128 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x160>)
    8fe8:	6013      	str	r3, [r2, #0]
    8fea:	68fb      	ldr	r3, [r7, #12]
    8fec:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8ff0:	4618      	mov	r0, r3
    8ff2:	f005 fc97 	bl	e924 <_ZN8PositionC1Ev>
    8ff6:	68fb      	ldr	r3, [r7, #12]
    8ff8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8ffc:	4618      	mov	r0, r3
    8ffe:	f005 fc91 	bl	e924 <_ZN8PositionC1Ev>
{
    but = p;
    9002:	68fb      	ldr	r3, [r7, #12]
    9004:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9008:	4618      	mov	r0, r3
    900a:	f107 0304 	add.w	r3, r7, #4	; 0x4
    900e:	e893 0006 	ldmia.w	r3, {r1, r2}
    9012:	f005 fd43 	bl	ea9c <_ZN8PositionaSES_>
    centre = c;
    9016:	68fb      	ldr	r3, [r7, #12]
    9018:	f103 0320 	add.w	r3, r3, #32	; 0x20
    901c:	4618      	mov	r0, r3
    901e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    9022:	e893 0006 	ldmia.w	r3, {r1, r2}
    9026:	f005 fd39 	bl	ea9c <_ZN8PositionaSES_>
    vMax = v;
    902a:	68fa      	ldr	r2, [r7, #12]
    902c:	6d7b      	ldr	r3, [r7, #84]
    902e:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    9030:	68fa      	ldr	r2, [r7, #12]
    9032:	f897 3058 	ldrb.w	r3, [r7, #88]
    9036:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    9038:	4b3c      	ldr	r3, [pc, #240]	(912c <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    903a:	681b      	ldr	r3, [r3, #0]
    903c:	4618      	mov	r0, r3
    903e:	f000 fd47 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    9042:	4602      	mov	r2, r0
    9044:	68fb      	ldr	r3, [r7, #12]
    9046:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    9048:	4b38      	ldr	r3, [pc, #224]	(912c <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    904a:	681b      	ldr	r3, [r3, #0]
    904c:	4618      	mov	r0, r3
    904e:	f000 fd33 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    9052:	4602      	mov	r2, r0
    9054:	68fb      	ldr	r3, [r7, #12]
    9056:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    9058:	68fa      	ldr	r2, [r7, #12]
    905a:	f04f 0300 	mov.w	r3, #0	; 0x0
    905e:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    9060:	68fa      	ldr	r2, [r7, #12]
    9062:	f04f 0300 	mov.w	r3, #0	; 0x0
    9066:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    906a:	4b30      	ldr	r3, [pc, #192]	(912c <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    906c:	681a      	ldr	r2, [r3, #0]
    906e:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    9072:	4618      	mov	r0, r3
    9074:	4611      	mov	r1, r2
    9076:	f000 fd43 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    907a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    907e:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    9082:	4618      	mov	r0, r3
    9084:	4611      	mov	r1, r2
    9086:	f005 feb1 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    908a:	697a      	ldr	r2, [r7, #20]
    908c:	68fb      	ldr	r3, [r7, #12]
    908e:	6a1b      	ldr	r3, [r3, #32]
    9090:	4610      	mov	r0, r2
    9092:	4619      	mov	r1, r3
    9094:	f011 fde4 	bl	1ac60 <__aeabi_fsub>
    9098:	4603      	mov	r3, r0
    909a:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    909c:	69ba      	ldr	r2, [r7, #24]
    909e:	68fb      	ldr	r3, [r7, #12]
    90a0:	6a5b      	ldr	r3, [r3, #36]
    90a2:	4610      	mov	r0, r2
    90a4:	4619      	mov	r1, r3
    90a6:	f011 fddb 	bl	1ac60 <__aeabi_fsub>
    90aa:	4603      	mov	r3, r0
    90ac:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    90ae:	68fb      	ldr	r3, [r7, #12]
    90b0:	685a      	ldr	r2, [r3, #4]
    90b2:	68fb      	ldr	r3, [r7, #12]
    90b4:	6a1b      	ldr	r3, [r3, #32]
    90b6:	4610      	mov	r0, r2
    90b8:	4619      	mov	r1, r3
    90ba:	f011 fdd1 	bl	1ac60 <__aeabi_fsub>
    90be:	4603      	mov	r3, r0
    90c0:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    90c2:	68fb      	ldr	r3, [r7, #12]
    90c4:	689a      	ldr	r2, [r3, #8]
    90c6:	68fb      	ldr	r3, [r7, #12]
    90c8:	6a5b      	ldr	r3, [r3, #36]
    90ca:	4610      	mov	r0, r2
    90cc:	4619      	mov	r1, r3
    90ce:	f011 fdc7 	bl	1ac60 <__aeabi_fsub>
    90d2:	4603      	mov	r3, r0
    90d4:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    90d6:	6ab8      	ldr	r0, [r7, #40]
    90d8:	6b79      	ldr	r1, [r7, #52]
    90da:	f011 fecb 	bl	1ae74 <__aeabi_fmul>
    90de:	4603      	mov	r3, r0
    90e0:	461c      	mov	r4, r3
    90e2:	6af8      	ldr	r0, [r7, #44]
    90e4:	6b39      	ldr	r1, [r7, #48]
    90e6:	f011 fec5 	bl	1ae74 <__aeabi_fmul>
    90ea:	4603      	mov	r3, r0
    90ec:	4620      	mov	r0, r4
    90ee:	4619      	mov	r1, r3
    90f0:	f011 fdb6 	bl	1ac60 <__aeabi_fsub>
    90f4:	4603      	mov	r3, r0
    90f6:	4618      	mov	r0, r3
    90f8:	490d      	ldr	r1, [pc, #52]	(9130 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x168>)
    90fa:	f012 f875 	bl	1b1e8 <__aeabi_fcmpgt>
    90fe:	4603      	mov	r3, r0
    9100:	2b00      	cmp	r3, #0
    9102:	d004      	beq.n	910e <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x146>
        cote = SGN_POS;
    9104:	68fa      	ldr	r2, [r7, #12]
    9106:	f04f 0301 	mov.w	r3, #1	; 0x1
    910a:	62d3      	str	r3, [r2, #44]
    910c:	e003      	b.n	9116 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    910e:	68fa      	ldr	r2, [r7, #12]
    9110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9114:	62d3      	str	r3, [r2, #44]
}
    9116:	68fb      	ldr	r3, [r7, #12]
    9118:	4618      	mov	r0, r3
    911a:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    911e:	46bd      	mov	sp, r7
    9120:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    9124:	b002      	add	sp, #8
    9126:	4770      	bx	lr
    9128:	00021dd0 	.word	0x00021dd0
    912c:	20000578 	.word	0x20000578
    9130:	00000000 	.word	0x00000000

00009134 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    9134:	b082      	sub	sp, #8
    9136:	b590      	push	{r4, r7, lr}
    9138:	b08f      	sub	sp, #60
    913a:	af00      	add	r7, sp, #0
    913c:	60f8      	str	r0, [r7, #12]
    913e:	f107 0004 	add.w	r0, r7, #4	; 0x4
    9142:	e880 0006 	stmia.w	r0, {r1, r2}
    9146:	64fb      	str	r3, [r7, #76]
    : Command()
    9148:	68fb      	ldr	r3, [r7, #12]
    914a:	4618      	mov	r0, r3
    914c:	f7fe fdc8 	bl	7ce0 <_ZN7CommandC2Ev>
    9150:	68fa      	ldr	r2, [r7, #12]
    9152:	4b50      	ldr	r3, [pc, #320]	(9294 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x160>)
    9154:	6013      	str	r3, [r2, #0]
    9156:	68fb      	ldr	r3, [r7, #12]
    9158:	f103 0304 	add.w	r3, r3, #4	; 0x4
    915c:	4618      	mov	r0, r3
    915e:	f005 fbe1 	bl	e924 <_ZN8PositionC1Ev>
    9162:	68fb      	ldr	r3, [r7, #12]
    9164:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9168:	4618      	mov	r0, r3
    916a:	f005 fbdb 	bl	e924 <_ZN8PositionC1Ev>
{
    but = p;
    916e:	68fb      	ldr	r3, [r7, #12]
    9170:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9174:	4618      	mov	r0, r3
    9176:	f107 0304 	add.w	r3, r7, #4	; 0x4
    917a:	e893 0006 	ldmia.w	r3, {r1, r2}
    917e:	f005 fc8d 	bl	ea9c <_ZN8PositionaSES_>
    centre = c;
    9182:	68fb      	ldr	r3, [r7, #12]
    9184:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9188:	4618      	mov	r0, r3
    918a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    918e:	e893 0006 	ldmia.w	r3, {r1, r2}
    9192:	f005 fc83 	bl	ea9c <_ZN8PositionaSES_>
    vMax = v;
    9196:	68fa      	ldr	r2, [r7, #12]
    9198:	6d7b      	ldr	r3, [r7, #84]
    919a:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    919c:	68fa      	ldr	r2, [r7, #12]
    919e:	f897 3058 	ldrb.w	r3, [r7, #88]
    91a2:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    91a4:	4b3c      	ldr	r3, [pc, #240]	(9298 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    91a6:	681b      	ldr	r3, [r3, #0]
    91a8:	4618      	mov	r0, r3
    91aa:	f000 fc91 	bl	9ad0 <_ZNK9Odometrie18getVitesseLineaireEv>
    91ae:	4602      	mov	r2, r0
    91b0:	68fb      	ldr	r3, [r7, #12]
    91b2:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    91b4:	4b38      	ldr	r3, [pc, #224]	(9298 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    91b6:	681b      	ldr	r3, [r3, #0]
    91b8:	4618      	mov	r0, r3
    91ba:	f000 fc7d 	bl	9ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>
    91be:	4602      	mov	r2, r0
    91c0:	68fb      	ldr	r3, [r7, #12]
    91c2:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    91c4:	68fa      	ldr	r2, [r7, #12]
    91c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    91ca:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    91cc:	68fa      	ldr	r2, [r7, #12]
    91ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    91d2:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    91d6:	4b30      	ldr	r3, [pc, #192]	(9298 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    91d8:	681a      	ldr	r2, [r3, #0]
    91da:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    91de:	4618      	mov	r0, r3
    91e0:	4611      	mov	r1, r2
    91e2:	f000 fc8d 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    91e6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    91ea:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    91ee:	4618      	mov	r0, r3
    91f0:	4611      	mov	r1, r2
    91f2:	f005 fdfb 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    91f6:	697a      	ldr	r2, [r7, #20]
    91f8:	68fb      	ldr	r3, [r7, #12]
    91fa:	6a1b      	ldr	r3, [r3, #32]
    91fc:	4610      	mov	r0, r2
    91fe:	4619      	mov	r1, r3
    9200:	f011 fd2e 	bl	1ac60 <__aeabi_fsub>
    9204:	4603      	mov	r3, r0
    9206:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    9208:	69ba      	ldr	r2, [r7, #24]
    920a:	68fb      	ldr	r3, [r7, #12]
    920c:	6a5b      	ldr	r3, [r3, #36]
    920e:	4610      	mov	r0, r2
    9210:	4619      	mov	r1, r3
    9212:	f011 fd25 	bl	1ac60 <__aeabi_fsub>
    9216:	4603      	mov	r3, r0
    9218:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    921a:	68fb      	ldr	r3, [r7, #12]
    921c:	685a      	ldr	r2, [r3, #4]
    921e:	68fb      	ldr	r3, [r7, #12]
    9220:	6a1b      	ldr	r3, [r3, #32]
    9222:	4610      	mov	r0, r2
    9224:	4619      	mov	r1, r3
    9226:	f011 fd1b 	bl	1ac60 <__aeabi_fsub>
    922a:	4603      	mov	r3, r0
    922c:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    922e:	68fb      	ldr	r3, [r7, #12]
    9230:	689a      	ldr	r2, [r3, #8]
    9232:	68fb      	ldr	r3, [r7, #12]
    9234:	6a5b      	ldr	r3, [r3, #36]
    9236:	4610      	mov	r0, r2
    9238:	4619      	mov	r1, r3
    923a:	f011 fd11 	bl	1ac60 <__aeabi_fsub>
    923e:	4603      	mov	r3, r0
    9240:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    9242:	6ab8      	ldr	r0, [r7, #40]
    9244:	6b79      	ldr	r1, [r7, #52]
    9246:	f011 fe15 	bl	1ae74 <__aeabi_fmul>
    924a:	4603      	mov	r3, r0
    924c:	461c      	mov	r4, r3
    924e:	6af8      	ldr	r0, [r7, #44]
    9250:	6b39      	ldr	r1, [r7, #48]
    9252:	f011 fe0f 	bl	1ae74 <__aeabi_fmul>
    9256:	4603      	mov	r3, r0
    9258:	4620      	mov	r0, r4
    925a:	4619      	mov	r1, r3
    925c:	f011 fd00 	bl	1ac60 <__aeabi_fsub>
    9260:	4603      	mov	r3, r0
    9262:	4618      	mov	r0, r3
    9264:	490d      	ldr	r1, [pc, #52]	(929c <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x168>)
    9266:	f011 ffbf 	bl	1b1e8 <__aeabi_fcmpgt>
    926a:	4603      	mov	r3, r0
    926c:	2b00      	cmp	r3, #0
    926e:	d004      	beq.n	927a <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x146>
        cote = SGN_POS;
    9270:	68fa      	ldr	r2, [r7, #12]
    9272:	f04f 0301 	mov.w	r3, #1	; 0x1
    9276:	62d3      	str	r3, [r2, #44]
    9278:	e003      	b.n	9282 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    927a:	68fa      	ldr	r2, [r7, #12]
    927c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9280:	62d3      	str	r3, [r2, #44]
}
    9282:	68fb      	ldr	r3, [r7, #12]
    9284:	4618      	mov	r0, r3
    9286:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    928a:	46bd      	mov	sp, r7
    928c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    9290:	b002      	add	sp, #8
    9292:	4770      	bx	lr
    9294:	00021dd0 	.word	0x00021dd0
    9298:	20000578 	.word	0x20000578
    929c:	00000000 	.word	0x00000000

000092a0 <_ZN13CommandAllerA6updateEv>:
    this->precisionAngle = -1.f;//precisionAngle;

    m_fini = false;
}

void CommandAllerA::update()
    92a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    92a4:	b09e      	sub	sp, #120
    92a6:	af00      	add	r7, sp, #0
    92a8:	6178      	str	r0, [r7, #20]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    92aa:	4bcb      	ldr	r3, [pc, #812]	(95d8 <_ZN13CommandAllerA6updateEv+0x338>)
    92ac:	643b      	str	r3, [r7, #64]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    92ae:	4bcb      	ldr	r3, [pc, #812]	(95dc <_ZN13CommandAllerA6updateEv+0x33c>)
    92b0:	647b      	str	r3, [r7, #68]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    92b2:	4bcb      	ldr	r3, [pc, #812]	(95e0 <_ZN13CommandAllerA6updateEv+0x340>)
    92b4:	64bb      	str	r3, [r7, #72]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    92b6:	4bcb      	ldr	r3, [pc, #812]	(95e4 <_ZN13CommandAllerA6updateEv+0x344>)
    92b8:	64fb      	str	r3, [r7, #76]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    92ba:	697b      	ldr	r3, [r7, #20]
    92bc:	68db      	ldr	r3, [r3, #12]
    92be:	653b      	str	r3, [r7, #80]

    if(this->getLimit())
    92c0:	f7fe fd7a 	bl	7db8 <_ZN7Command8getLimitEv>
    92c4:	4603      	mov	r3, r0
    92c6:	2b00      	cmp	r3, #0
    92c8:	d00b      	beq.n	92e2 <_ZN13CommandAllerA6updateEv+0x42>
    {
        vitLinMax = vitesseLinMax/3;
    92ca:	697b      	ldr	r3, [r7, #20]
    92cc:	68db      	ldr	r3, [r3, #12]
    92ce:	4618      	mov	r0, r3
    92d0:	49c5      	ldr	r1, [pc, #788]	(95e8 <_ZN13CommandAllerA6updateEv+0x348>)
    92d2:	f011 fe83 	bl	1afdc <__aeabi_fdiv>
    92d6:	4603      	mov	r3, r0
    92d8:	653b      	str	r3, [r7, #80]
        allumerLED();
    92da:	f002 ffdd 	bl	c298 <_Z10allumerLEDv>
        allumerLED2();
    92de:	f002 ffd3 	bl	c288 <_Z11allumerLED2v>
    {
        //eteindreLED();
    }

    //float angleVitesseMax = M_PI/10.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    92e2:	6c78      	ldr	r0, [r7, #68]
    92e4:	49c1      	ldr	r1, [pc, #772]	(95ec <_ZN13CommandAllerA6updateEv+0x34c>)
    92e6:	f011 fdc5 	bl	1ae74 <__aeabi_fmul>
    92ea:	4603      	mov	r3, r0
    92ec:	4618      	mov	r0, r3
    92ee:	6c79      	ldr	r1, [r7, #68]
    92f0:	f011 fdc0 	bl	1ae74 <__aeabi_fmul>
    92f4:	4603      	mov	r3, r0
    92f6:	4618      	mov	r0, r3
    92f8:	6c39      	ldr	r1, [r7, #64]
    92fa:	f011 fe6f 	bl	1afdc <__aeabi_fdiv>
    92fe:	4603      	mov	r3, r0
    9300:	657b      	str	r3, [r7, #84]
    //float distanceVitesseMax = 350.0f;
    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    9302:	6d38      	ldr	r0, [r7, #80]
    9304:	6d39      	ldr	r1, [r7, #80]
    9306:	f011 fdb5 	bl	1ae74 <__aeabi_fmul>
    930a:	4603      	mov	r3, r0
    930c:	461a      	mov	r2, r3
    930e:	697b      	ldr	r3, [r7, #20]
    9310:	691b      	ldr	r3, [r3, #16]
    9312:	4610      	mov	r0, r2
    9314:	4619      	mov	r1, r3
    9316:	f011 fca3 	bl	1ac60 <__aeabi_fsub>
    931a:	4603      	mov	r3, r0
    931c:	4618      	mov	r0, r3
    931e:	49b3      	ldr	r1, [pc, #716]	(95ec <_ZN13CommandAllerA6updateEv+0x34c>)
    9320:	f011 fda8 	bl	1ae74 <__aeabi_fmul>
    9324:	4603      	mov	r3, r0
    9326:	4618      	mov	r0, r3
    9328:	6cf9      	ldr	r1, [r7, #76]
    932a:	f011 fe57 	bl	1afdc <__aeabi_fdiv>
    932e:	4603      	mov	r3, r0
    9330:	65bb      	str	r3, [r7, #88]
    float angle = Odometrie::odometrie->getPos().getAngle();
    9332:	4baf      	ldr	r3, [pc, #700]	(95f0 <_ZN13CommandAllerA6updateEv+0x350>)
    9334:	681a      	ldr	r2, [r3, #0]
    9336:	f107 0328 	add.w	r3, r7, #40	; 0x28
    933a:	4618      	mov	r0, r3
    933c:	4611      	mov	r1, r2
    933e:	f000 fbdf 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    9342:	f107 0328 	add.w	r3, r7, #40	; 0x28
    9346:	4618      	mov	r0, r3
    9348:	f005 fd62 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    934c:	4603      	mov	r3, r0
    934e:	65fb      	str	r3, [r7, #92]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9350:	4ba7      	ldr	r3, [pc, #668]	(95f0 <_ZN13CommandAllerA6updateEv+0x350>)
    9352:	681a      	ldr	r2, [r3, #0]
    9354:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9358:	4618      	mov	r0, r3
    935a:	4611      	mov	r1, r2
    935c:	f000 fbd0 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    9360:	f107 0320 	add.w	r3, r7, #32	; 0x20
    9364:	f107 0234 	add.w	r2, r7, #52	; 0x34
    9368:	4618      	mov	r0, r3
    936a:	4611      	mov	r1, r2
    936c:	f005 fd3e 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    Position delta = but-pos;
    9370:	697b      	ldr	r3, [r7, #20]
    9372:	f103 0104 	add.w	r1, r3, #4	; 0x4
    9376:	f107 0318 	add.w	r3, r7, #24	; 0x18
    937a:	f107 0220 	add.w	r2, r7, #32	; 0x20
    937e:	4618      	mov	r0, r3
    9380:	f005 fb66 	bl	ea50 <_ZNK8PositionmiERKS_>
    float angleVise = atan2(delta.getY(),delta.getX());
    9384:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9388:	4618      	mov	r0, r3
    938a:	f005 fb13 	bl	e9b4 <_ZNK8Position4getYEv>
    938e:	4603      	mov	r3, r0
    9390:	4618      	mov	r0, r3
    9392:	f011 f8fd 	bl	1a590 <__aeabi_f2d>
    9396:	4604      	mov	r4, r0
    9398:	460d      	mov	r5, r1
    939a:	f107 0318 	add.w	r3, r7, #24	; 0x18
    939e:	4618      	mov	r0, r3
    93a0:	f005 fafc 	bl	e99c <_ZNK8Position4getXEv>
    93a4:	4603      	mov	r3, r0
    93a6:	4618      	mov	r0, r3
    93a8:	f011 f8f2 	bl	1a590 <__aeabi_f2d>
    93ac:	4602      	mov	r2, r0
    93ae:	460b      	mov	r3, r1
    93b0:	4620      	mov	r0, r4
    93b2:	4629      	mov	r1, r5
    93b4:	f015 fa22 	bl	1e7fc <atan2>
    93b8:	4602      	mov	r2, r0
    93ba:	460b      	mov	r3, r1
    93bc:	4610      	mov	r0, r2
    93be:	4619      	mov	r1, r3
    93c0:	f011 fbfa 	bl	1abb8 <__aeabi_d2f>
    93c4:	4603      	mov	r3, r0
    93c6:	663b      	str	r3, [r7, #96]

    if (m_reculer)
    93c8:	697b      	ldr	r3, [r7, #20]
    93ca:	f893 3020 	ldrb.w	r3, [r3, #32]
    93ce:	2b00      	cmp	r3, #0
    93d0:	d012      	beq.n	93f8 <_ZN13CommandAllerA6updateEv+0x158>
        angleVise += M_PI;
    93d2:	6e38      	ldr	r0, [r7, #96]
    93d4:	f011 f8dc 	bl	1a590 <__aeabi_f2d>
    93d8:	4602      	mov	r2, r0
    93da:	460b      	mov	r3, r1
    93dc:	4610      	mov	r0, r2
    93de:	4619      	mov	r1, r3
    93e0:	a27b      	add	r2, pc, #492	(adr r2, 95d0 <_ZN13CommandAllerA6updateEv+0x330>)
    93e2:	ca0c      	ldmia	r2!, {r2, r3}
    93e4:	f010 ff76 	bl	1a2d4 <__adddf3>
    93e8:	4602      	mov	r2, r0
    93ea:	460b      	mov	r3, r1
    93ec:	4610      	mov	r0, r2
    93ee:	4619      	mov	r1, r3
    93f0:	f011 fbe2 	bl	1abb8 <__aeabi_d2f>
    93f4:	4603      	mov	r3, r0
    93f6:	663b      	str	r3, [r7, #96]

    float diffAng = diffAngle(angleVise,angle);
    93f8:	6e38      	ldr	r0, [r7, #96]
    93fa:	6df9      	ldr	r1, [r7, #92]
    93fc:	f7fe feac 	bl	8158 <_Z9diffAngleff>
    9400:	4603      	mov	r3, r0
    9402:	667b      	str	r3, [r7, #100]

    // reste sur place tant que le robot n'a pas le bon angle
    float angleMaxPourAvancer;
    if (precisionAngle<0.)
    9404:	697b      	ldr	r3, [r7, #20]
    9406:	6adb      	ldr	r3, [r3, #44]
    9408:	4618      	mov	r0, r3
    940a:	497a      	ldr	r1, [pc, #488]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    940c:	f011 fece 	bl	1b1ac <__aeabi_fcmplt>
    9410:	4603      	mov	r3, r0
    9412:	2b00      	cmp	r3, #0
    9414:	d002      	beq.n	941c <_ZN13CommandAllerA6updateEv+0x17c>
        angleMaxPourAvancer = M_PI/25.0f;//25.0f;
    9416:	4b78      	ldr	r3, [pc, #480]	(95f8 <_ZN13CommandAllerA6updateEv+0x358>)
    9418:	66bb      	str	r3, [r7, #104]
    941a:	e001      	b.n	9420 <_ZN13CommandAllerA6updateEv+0x180>
    else
        angleMaxPourAvancer = DEGTORAD(3.);//25.0f;
    941c:	4b77      	ldr	r3, [pc, #476]	(95fc <_ZN13CommandAllerA6updateEv+0x35c>)
    941e:	66bb      	str	r3, [r7, #104]
    if (!bonAngle)
    9420:	697b      	ldr	r3, [r7, #20]
    9422:	7d1b      	ldrb	r3, [r3, #20]
    9424:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9428:	b2db      	uxtb	r3, r3
    942a:	2b00      	cmp	r3, #0
    942c:	d01b      	beq.n	9466 <_ZN13CommandAllerA6updateEv+0x1c6>
    {
        if (fabs(diffAng) < angleMaxPourAvancer)
    942e:	6e7b      	ldr	r3, [r7, #100]
    9430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9434:	4618      	mov	r0, r3
    9436:	6eb9      	ldr	r1, [r7, #104]
    9438:	f011 feb8 	bl	1b1ac <__aeabi_fcmplt>
    943c:	4603      	mov	r3, r0
    943e:	2b00      	cmp	r3, #0
    9440:	d007      	beq.n	9452 <_ZN13CommandAllerA6updateEv+0x1b2>
        {
            bonAngle = true;
    9442:	697a      	ldr	r2, [r7, #20]
    9444:	f04f 0301 	mov.w	r3, #1	; 0x1
    9448:	7513      	strb	r3, [r2, #20]
            derniereDistance = 1000000.0f;
    944a:	697a      	ldr	r2, [r7, #20]
    944c:	4b6c      	ldr	r3, [pc, #432]	(9600 <_ZN13CommandAllerA6updateEv+0x360>)
    944e:	6253      	str	r3, [r2, #36]
    9450:	e009      	b.n	9466 <_ZN13CommandAllerA6updateEv+0x1c6>
        }
        else
        {
            linSpeed *= 0.95f;
    9452:	697b      	ldr	r3, [r7, #20]
    9454:	699b      	ldr	r3, [r3, #24]
    9456:	4618      	mov	r0, r3
    9458:	496a      	ldr	r1, [pc, #424]	(9604 <_ZN13CommandAllerA6updateEv+0x364>)
    945a:	f011 fd0b 	bl	1ae74 <__aeabi_fmul>
    945e:	4603      	mov	r3, r0
    9460:	461a      	mov	r2, r3
    9462:	697b      	ldr	r3, [r7, #20]
    9464:	619a      	str	r2, [r3, #24]
        }
    }

    // Check sharps
    StrategieV2::setTourneSurSoiMeme((!bonAngle)&&(abs(linSpeed)<0.2f));
    9466:	697b      	ldr	r3, [r7, #20]
    9468:	7d1b      	ldrb	r3, [r3, #20]
    946a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    946e:	b2db      	uxtb	r3, r3
    9470:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9474:	b2db      	uxtb	r3, r3
    9476:	2b00      	cmp	r3, #0
    9478:	d137      	bne.n	94ea <_ZN13CommandAllerA6updateEv+0x24a>
    947a:	697b      	ldr	r3, [r7, #20]
    947c:	699b      	ldr	r3, [r3, #24]
    947e:	4618      	mov	r0, r3
    9480:	495c      	ldr	r1, [pc, #368]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    9482:	f011 feb1 	bl	1b1e8 <__aeabi_fcmpgt>
    9486:	4603      	mov	r3, r0
    9488:	2b00      	cmp	r3, #0
    948a:	d015      	beq.n	94b8 <_ZN13CommandAllerA6updateEv+0x218>
    948c:	697b      	ldr	r3, [r7, #20]
    948e:	699a      	ldr	r2, [r3, #24]
    9490:	f04f 0300 	mov.w	r3, #0	; 0x0
    9494:	71fb      	strb	r3, [r7, #7]
    9496:	4610      	mov	r0, r2
    9498:	4956      	ldr	r1, [pc, #344]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    949a:	f011 fe7d 	bl	1b198 <__aeabi_fcmpeq>
    949e:	4603      	mov	r3, r0
    94a0:	2b00      	cmp	r3, #0
    94a2:	d102      	bne.n	94aa <_ZN13CommandAllerA6updateEv+0x20a>
    94a4:	f04f 0301 	mov.w	r3, #1	; 0x1
    94a8:	71fb      	strb	r3, [r7, #7]
    94aa:	79fb      	ldrb	r3, [r7, #7]
    94ac:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    94b0:	b2db      	uxtb	r3, r3
    94b2:	2b00      	cmp	r3, #0
    94b4:	d119      	bne.n	94ea <_ZN13CommandAllerA6updateEv+0x24a>
    94b6:	e014      	b.n	94e2 <_ZN13CommandAllerA6updateEv+0x242>
    94b8:	697b      	ldr	r3, [r7, #20]
    94ba:	699a      	ldr	r2, [r3, #24]
    94bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    94c0:	71bb      	strb	r3, [r7, #6]
    94c2:	4610      	mov	r0, r2
    94c4:	4950      	ldr	r1, [pc, #320]	(9608 <_ZN13CommandAllerA6updateEv+0x368>)
    94c6:	f011 fe8f 	bl	1b1e8 <__aeabi_fcmpgt>
    94ca:	4603      	mov	r3, r0
    94cc:	2b00      	cmp	r3, #0
    94ce:	d002      	beq.n	94d6 <_ZN13CommandAllerA6updateEv+0x236>
    94d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    94d4:	71bb      	strb	r3, [r7, #6]
    94d6:	79bb      	ldrb	r3, [r7, #6]
    94d8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    94dc:	b2db      	uxtb	r3, r3
    94de:	2b00      	cmp	r3, #0
    94e0:	d103      	bne.n	94ea <_ZN13CommandAllerA6updateEv+0x24a>
    94e2:	f04f 0301 	mov.w	r3, #1	; 0x1
    94e6:	60bb      	str	r3, [r7, #8]
    94e8:	e002      	b.n	94f0 <_ZN13CommandAllerA6updateEv+0x250>
    94ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    94ee:	60bb      	str	r3, [r7, #8]
    94f0:	68b8      	ldr	r0, [r7, #8]
    94f2:	f00c fb2d 	bl	15b50 <_ZN11StrategieV219setTourneSurSoiMemeEb>

    if (linSpeed > 0.2f)
    94f6:	697b      	ldr	r3, [r7, #20]
    94f8:	699b      	ldr	r3, [r3, #24]
    94fa:	4618      	mov	r0, r3
    94fc:	4943      	ldr	r1, [pc, #268]	(960c <_ZN13CommandAllerA6updateEv+0x36c>)
    94fe:	f011 fe73 	bl	1b1e8 <__aeabi_fcmpgt>
    9502:	4603      	mov	r3, r0
    9504:	2b00      	cmp	r3, #0
    9506:	d004      	beq.n	9512 <_ZN13CommandAllerA6updateEv+0x272>
        StrategieV2::enableSharpsGroup(true);
    9508:	f04f 0001 	mov.w	r0, #1	; 0x1
    950c:	f00c fbc4 	bl	15c98 <_ZN11StrategieV217enableSharpsGroupEb>
    9510:	e00f      	b.n	9532 <_ZN13CommandAllerA6updateEv+0x292>
    else if (linSpeed < -0.2f)
    9512:	697b      	ldr	r3, [r7, #20]
    9514:	699b      	ldr	r3, [r3, #24]
    9516:	4618      	mov	r0, r3
    9518:	493b      	ldr	r1, [pc, #236]	(9608 <_ZN13CommandAllerA6updateEv+0x368>)
    951a:	f011 fe47 	bl	1b1ac <__aeabi_fcmplt>
    951e:	4603      	mov	r3, r0
    9520:	2b00      	cmp	r3, #0
    9522:	d004      	beq.n	952e <_ZN13CommandAllerA6updateEv+0x28e>
        StrategieV2::enableSharpsGroup(false);
    9524:	f04f 0000 	mov.w	r0, #0	; 0x0
    9528:	f00c fbb6 	bl	15c98 <_ZN11StrategieV217enableSharpsGroupEb>
    952c:	e001      	b.n	9532 <_ZN13CommandAllerA6updateEv+0x292>
    else
        StrategieV2::emptySharpsToCheck();
    952e:	f00c fae7 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>

    float distanceBut = delta.getNorme();
    9532:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9536:	4618      	mov	r0, r3
    9538:	f005 fb98 	bl	ec6c <_ZNK8Position8getNormeEv>
    953c:	4603      	mov	r3, r0
    953e:	66fb      	str	r3, [r7, #108]

    bool distanceOk = /*(distanceBut > derniereDistance) || */(distanceBut < 30.0f);
    9540:	f04f 0300 	mov.w	r3, #0	; 0x0
    9544:	f887 3072 	strb.w	r3, [r7, #114]
    9548:	6ef8      	ldr	r0, [r7, #108]
    954a:	4931      	ldr	r1, [pc, #196]	(9610 <_ZN13CommandAllerA6updateEv+0x370>)
    954c:	f011 fe2e 	bl	1b1ac <__aeabi_fcmplt>
    9550:	4603      	mov	r3, r0
    9552:	2b00      	cmp	r3, #0
    9554:	d003      	beq.n	955e <_ZN13CommandAllerA6updateEv+0x2be>
    9556:	f04f 0301 	mov.w	r3, #1	; 0x1
    955a:	f887 3072 	strb.w	r3, [r7, #114]
    if (distanceOk)
    {
        //vitAngMax = VITESSE_ANGULAIRE_SLOW_MAX;
        //linSpeed = 0.;
    }
    if (bonAngle && precisionAngle>0.)
    955e:	697b      	ldr	r3, [r7, #20]
    9560:	7d1b      	ldrb	r3, [r3, #20]
    9562:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9566:	b2db      	uxtb	r3, r3
    9568:	2b00      	cmp	r3, #0
    956a:	d118      	bne.n	959e <_ZN13CommandAllerA6updateEv+0x2fe>
    956c:	697b      	ldr	r3, [r7, #20]
    956e:	6ada      	ldr	r2, [r3, #44]
    9570:	f04f 0300 	mov.w	r3, #0	; 0x0
    9574:	717b      	strb	r3, [r7, #5]
    9576:	4610      	mov	r0, r2
    9578:	491e      	ldr	r1, [pc, #120]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    957a:	f011 fe35 	bl	1b1e8 <__aeabi_fcmpgt>
    957e:	4603      	mov	r3, r0
    9580:	2b00      	cmp	r3, #0
    9582:	d002      	beq.n	958a <_ZN13CommandAllerA6updateEv+0x2ea>
    9584:	f04f 0301 	mov.w	r3, #1	; 0x1
    9588:	717b      	strb	r3, [r7, #5]
    958a:	797b      	ldrb	r3, [r7, #5]
    958c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9590:	b2db      	uxtb	r3, r3
    9592:	2b00      	cmp	r3, #0
    9594:	d103      	bne.n	959e <_ZN13CommandAllerA6updateEv+0x2fe>
    {
        angSpeed = 0.;
    9596:	697a      	ldr	r2, [r7, #20]
    9598:	4b16      	ldr	r3, [pc, #88]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    959a:	61d3      	str	r3, [r2, #28]
    959c:	e126      	b.n	97ec <_ZN13CommandAllerA6updateEv+0x54c>
    }
    else if (abs(diffAng) > angleVitesseMax)
    959e:	6e78      	ldr	r0, [r7, #100]
    95a0:	4914      	ldr	r1, [pc, #80]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    95a2:	f011 fe21 	bl	1b1e8 <__aeabi_fcmpgt>
    95a6:	4603      	mov	r3, r0
    95a8:	2b00      	cmp	r3, #0
    95aa:	d033      	beq.n	9614 <_ZN13CommandAllerA6updateEv+0x374>
    95ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    95b0:	713b      	strb	r3, [r7, #4]
    95b2:	6e78      	ldr	r0, [r7, #100]
    95b4:	490f      	ldr	r1, [pc, #60]	(95f4 <_ZN13CommandAllerA6updateEv+0x354>)
    95b6:	f011 fdef 	bl	1b198 <__aeabi_fcmpeq>
    95ba:	4603      	mov	r3, r0
    95bc:	2b00      	cmp	r3, #0
    95be:	d102      	bne.n	95c6 <_ZN13CommandAllerA6updateEv+0x326>
    95c0:	f04f 0301 	mov.w	r3, #1	; 0x1
    95c4:	713b      	strb	r3, [r7, #4]
    95c6:	793b      	ldrb	r3, [r7, #4]
    95c8:	60fb      	str	r3, [r7, #12]
    95ca:	e035      	b.n	9638 <_ZN13CommandAllerA6updateEv+0x398>
    95cc:	46c0      	nop			(mov r8, r8)
    95ce:	46c0      	nop			(mov r8, r8)
    95d0:	54442d18 	.word	0x54442d18
    95d4:	400921fb 	.word	0x400921fb
    95d8:	3983126f 	.word	0x3983126f
    95dc:	3cf5c28f 	.word	0x3cf5c28f
    95e0:	3ccccccd 	.word	0x3ccccccd
    95e4:	3ca3d70a 	.word	0x3ca3d70a
    95e8:	40400000 	.word	0x40400000
    95ec:	3f000000 	.word	0x3f000000
    95f0:	20000578 	.word	0x20000578
    95f4:	00000000 	.word	0x00000000
    95f8:	3e00adfd 	.word	0x3e00adfd
    95fc:	3d567750 	.word	0x3d567750
    9600:	49742400 	.word	0x49742400
    9604:	3f733333 	.word	0x3f733333
    9608:	be4ccccd 	.word	0xbe4ccccd
    960c:	3e4ccccd 	.word	0x3e4ccccd
    9610:	41f00000 	.word	0x41f00000
    9614:	6e7b      	ldr	r3, [r7, #100]
    9616:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    961a:	f04f 0300 	mov.w	r3, #0	; 0x0
    961e:	70fb      	strb	r3, [r7, #3]
    9620:	4610      	mov	r0, r2
    9622:	6d79      	ldr	r1, [r7, #84]
    9624:	f011 fde0 	bl	1b1e8 <__aeabi_fcmpgt>
    9628:	4603      	mov	r3, r0
    962a:	2b00      	cmp	r3, #0
    962c:	d002      	beq.n	9634 <_ZN13CommandAllerA6updateEv+0x394>
    962e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9632:	70fb      	strb	r3, [r7, #3]
    9634:	78fb      	ldrb	r3, [r7, #3]
    9636:	60fb      	str	r3, [r7, #12]
    9638:	68fb      	ldr	r3, [r7, #12]
    963a:	2b00      	cmp	r3, #0
    963c:	f000 80c9 	beq.w	97d2 <_ZN13CommandAllerA6updateEv+0x532>
    {
        bool hasToDecelerate = /*(!distanceOk) && */(fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    9640:	6e7b      	ldr	r3, [r7, #100]
    9642:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9646:	4618      	mov	r0, r3
    9648:	f010 ffa2 	bl	1a590 <__aeabi_f2d>
    964c:	4680      	mov	r8, r0
    964e:	4689      	mov	r9, r1
    9650:	697b      	ldr	r3, [r7, #20]
    9652:	69da      	ldr	r2, [r3, #28]
    9654:	697b      	ldr	r3, [r7, #20]
    9656:	69db      	ldr	r3, [r3, #28]
    9658:	4610      	mov	r0, r2
    965a:	4619      	mov	r1, r3
    965c:	f011 fc0a 	bl	1ae74 <__aeabi_fmul>
    9660:	4603      	mov	r3, r0
    9662:	4618      	mov	r0, r3
    9664:	6c39      	ldr	r1, [r7, #64]
    9666:	f011 fcb9 	bl	1afdc <__aeabi_fdiv>
    966a:	4603      	mov	r3, r0
    966c:	4618      	mov	r0, r3
    966e:	f010 ff8f 	bl	1a590 <__aeabi_f2d>
    9672:	4604      	mov	r4, r0
    9674:	460d      	mov	r5, r1
    9676:	6c38      	ldr	r0, [r7, #64]
    9678:	f010 ff8a 	bl	1a590 <__aeabi_f2d>
    967c:	4602      	mov	r2, r0
    967e:	460b      	mov	r3, r1
    9680:	4610      	mov	r0, r2
    9682:	4619      	mov	r1, r3
    9684:	f04f 0200 	mov.w	r2, #0	; 0x0
    9688:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    968c:	f010 ffd4 	bl	1a638 <__aeabi_dmul>
    9690:	4602      	mov	r2, r0
    9692:	460b      	mov	r3, r1
    9694:	4620      	mov	r0, r4
    9696:	4629      	mov	r1, r5
    9698:	f010 fe1c 	bl	1a2d4 <__adddf3>
    969c:	4602      	mov	r2, r0
    969e:	460b      	mov	r3, r1
    96a0:	4614      	mov	r4, r2
    96a2:	461d      	mov	r5, r3
    96a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    96a8:	f887 3073 	strb.w	r3, [r7, #115]
    96ac:	4640      	mov	r0, r8
    96ae:	4649      	mov	r1, r9
    96b0:	4622      	mov	r2, r4
    96b2:	462b      	mov	r3, r5
    96b4:	f011 fa30 	bl	1ab18 <__aeabi_dcmplt>
    96b8:	4603      	mov	r3, r0
    96ba:	2b00      	cmp	r3, #0
    96bc:	d003      	beq.n	96c6 <_ZN13CommandAllerA6updateEv+0x426>
    96be:	f04f 0301 	mov.w	r3, #1	; 0x1
    96c2:	f887 3073 	strb.w	r3, [r7, #115]
        if (diffAng > 0)
    96c6:	6e78      	ldr	r0, [r7, #100]
    96c8:	49cf      	ldr	r1, [pc, #828]	(9a08 <_ZN13CommandAllerA6updateEv+0x768>)
    96ca:	f011 fd8d 	bl	1b1e8 <__aeabi_fcmpgt>
    96ce:	4603      	mov	r3, r0
    96d0:	2b00      	cmp	r3, #0
    96d2:	d03c      	beq.n	974e <_ZN13CommandAllerA6updateEv+0x4ae>
        {
            if (!hasToDecelerate)
    96d4:	f897 3073 	ldrb.w	r3, [r7, #115]
    96d8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    96dc:	b2db      	uxtb	r3, r3
    96de:	2b00      	cmp	r3, #0
    96e0:	d00a      	beq.n	96f8 <_ZN13CommandAllerA6updateEv+0x458>
                angSpeed += accAngMax;
    96e2:	697b      	ldr	r3, [r7, #20]
    96e4:	69db      	ldr	r3, [r3, #28]
    96e6:	4618      	mov	r0, r3
    96e8:	6c39      	ldr	r1, [r7, #64]
    96ea:	f011 fabb 	bl	1ac64 <__addsf3>
    96ee:	4603      	mov	r3, r0
    96f0:	461a      	mov	r2, r3
    96f2:	697b      	ldr	r3, [r7, #20]
    96f4:	61da      	str	r2, [r3, #28]
    96f6:	e01d      	b.n	9734 <_ZN13CommandAllerA6updateEv+0x494>
            else if (angSpeed > accAngMax*2)
    96f8:	697b      	ldr	r3, [r7, #20]
    96fa:	69dc      	ldr	r4, [r3, #28]
    96fc:	6c3b      	ldr	r3, [r7, #64]
    96fe:	4618      	mov	r0, r3
    9700:	4619      	mov	r1, r3
    9702:	f011 faaf 	bl	1ac64 <__addsf3>
    9706:	4603      	mov	r3, r0
    9708:	4620      	mov	r0, r4
    970a:	4619      	mov	r1, r3
    970c:	f011 fd6c 	bl	1b1e8 <__aeabi_fcmpgt>
    9710:	4603      	mov	r3, r0
    9712:	2b00      	cmp	r3, #0
    9714:	d00e      	beq.n	9734 <_ZN13CommandAllerA6updateEv+0x494>
                angSpeed -= accAngMax*2;
    9716:	697b      	ldr	r3, [r7, #20]
    9718:	69dc      	ldr	r4, [r3, #28]
    971a:	6c38      	ldr	r0, [r7, #64]
    971c:	49bb      	ldr	r1, [pc, #748]	(9a0c <_ZN13CommandAllerA6updateEv+0x76c>)
    971e:	f011 fba9 	bl	1ae74 <__aeabi_fmul>
    9722:	4603      	mov	r3, r0
    9724:	4620      	mov	r0, r4
    9726:	4619      	mov	r1, r3
    9728:	f011 fa9c 	bl	1ac64 <__addsf3>
    972c:	4603      	mov	r3, r0
    972e:	461a      	mov	r2, r3
    9730:	697b      	ldr	r3, [r7, #20]
    9732:	61da      	str	r2, [r3, #28]

            if (angSpeed > vitAngMax)
    9734:	697b      	ldr	r3, [r7, #20]
    9736:	69db      	ldr	r3, [r3, #28]
    9738:	4618      	mov	r0, r3
    973a:	6c79      	ldr	r1, [r7, #68]
    973c:	f011 fd54 	bl	1b1e8 <__aeabi_fcmpgt>
    9740:	4603      	mov	r3, r0
    9742:	2b00      	cmp	r3, #0
    9744:	d052      	beq.n	97ec <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = vitAngMax;
    9746:	697a      	ldr	r2, [r7, #20]
    9748:	6c7b      	ldr	r3, [r7, #68]
    974a:	61d3      	str	r3, [r2, #28]
    974c:	e04e      	b.n	97ec <_ZN13CommandAllerA6updateEv+0x54c>
        }
        else
        {
            if (!hasToDecelerate)
    974e:	f897 3073 	ldrb.w	r3, [r7, #115]
    9752:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9756:	b2db      	uxtb	r3, r3
    9758:	2b00      	cmp	r3, #0
    975a:	d00a      	beq.n	9772 <_ZN13CommandAllerA6updateEv+0x4d2>
                angSpeed -= accAngMax;
    975c:	697b      	ldr	r3, [r7, #20]
    975e:	69db      	ldr	r3, [r3, #28]
    9760:	4618      	mov	r0, r3
    9762:	6c39      	ldr	r1, [r7, #64]
    9764:	f011 fa7c 	bl	1ac60 <__aeabi_fsub>
    9768:	4603      	mov	r3, r0
    976a:	461a      	mov	r2, r3
    976c:	697b      	ldr	r3, [r7, #20]
    976e:	61da      	str	r2, [r3, #28]
    9770:	e01d      	b.n	97ae <_ZN13CommandAllerA6updateEv+0x50e>
            else if (angSpeed < -accAngMax*2)
    9772:	697b      	ldr	r3, [r7, #20]
    9774:	69dc      	ldr	r4, [r3, #28]
    9776:	6c38      	ldr	r0, [r7, #64]
    9778:	49a4      	ldr	r1, [pc, #656]	(9a0c <_ZN13CommandAllerA6updateEv+0x76c>)
    977a:	f011 fb7b 	bl	1ae74 <__aeabi_fmul>
    977e:	4603      	mov	r3, r0
    9780:	4620      	mov	r0, r4
    9782:	4619      	mov	r1, r3
    9784:	f011 fd12 	bl	1b1ac <__aeabi_fcmplt>
    9788:	4603      	mov	r3, r0
    978a:	2b00      	cmp	r3, #0
    978c:	d00f      	beq.n	97ae <_ZN13CommandAllerA6updateEv+0x50e>
                angSpeed += accAngMax*2;
    978e:	697b      	ldr	r3, [r7, #20]
    9790:	69dc      	ldr	r4, [r3, #28]
    9792:	6c3b      	ldr	r3, [r7, #64]
    9794:	4618      	mov	r0, r3
    9796:	4619      	mov	r1, r3
    9798:	f011 fa64 	bl	1ac64 <__addsf3>
    979c:	4603      	mov	r3, r0
    979e:	4620      	mov	r0, r4
    97a0:	4619      	mov	r1, r3
    97a2:	f011 fa5f 	bl	1ac64 <__addsf3>
    97a6:	4603      	mov	r3, r0
    97a8:	461a      	mov	r2, r3
    97aa:	697b      	ldr	r3, [r7, #20]
    97ac:	61da      	str	r2, [r3, #28]

            if (angSpeed < -vitAngMax)
    97ae:	697b      	ldr	r3, [r7, #20]
    97b0:	69da      	ldr	r2, [r3, #28]
    97b2:	6c7b      	ldr	r3, [r7, #68]
    97b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    97b8:	4610      	mov	r0, r2
    97ba:	4619      	mov	r1, r3
    97bc:	f011 fcf6 	bl	1b1ac <__aeabi_fcmplt>
    97c0:	4603      	mov	r3, r0
    97c2:	2b00      	cmp	r3, #0
    97c4:	d012      	beq.n	97ec <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = -vitAngMax;
    97c6:	6c7b      	ldr	r3, [r7, #68]
    97c8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    97cc:	697b      	ldr	r3, [r7, #20]
    97ce:	61da      	str	r2, [r3, #28]
    97d0:	e00c      	b.n	97ec <_ZN13CommandAllerA6updateEv+0x54c>
        }

    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    97d2:	6e78      	ldr	r0, [r7, #100]
    97d4:	6c79      	ldr	r1, [r7, #68]
    97d6:	f011 fb4d 	bl	1ae74 <__aeabi_fmul>
    97da:	4603      	mov	r3, r0
    97dc:	4618      	mov	r0, r3
    97de:	6d79      	ldr	r1, [r7, #84]
    97e0:	f011 fbfc 	bl	1afdc <__aeabi_fdiv>
    97e4:	4603      	mov	r3, r0
    97e6:	461a      	mov	r2, r3
    97e8:	697b      	ldr	r3, [r7, #20]
    97ea:	61da      	str	r2, [r3, #28]
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    }*/

    // vitesse linéaire
    if (distanceBut > derniereDistance || distanceBut < 10.0f)
    97ec:	697b      	ldr	r3, [r7, #20]
    97ee:	6a5b      	ldr	r3, [r3, #36]
    97f0:	4618      	mov	r0, r3
    97f2:	6ef9      	ldr	r1, [r7, #108]
    97f4:	f011 fcda 	bl	1b1ac <__aeabi_fcmplt>
    97f8:	4603      	mov	r3, r0
    97fa:	2b00      	cmp	r3, #0
    97fc:	d106      	bne.n	980c <_ZN13CommandAllerA6updateEv+0x56c>
    97fe:	6ef8      	ldr	r0, [r7, #108]
    9800:	4983      	ldr	r1, [pc, #524]	(9a10 <_ZN13CommandAllerA6updateEv+0x770>)
    9802:	f011 fcd3 	bl	1b1ac <__aeabi_fcmplt>
    9806:	4603      	mov	r3, r0
    9808:	2b00      	cmp	r3, #0
    980a:	d004      	beq.n	9816 <_ZN13CommandAllerA6updateEv+0x576>
    {
        m_fini = true;
    980c:	697b      	ldr	r3, [r7, #20]
    980e:	f04f 0201 	mov.w	r2, #1	; 0x1
    9812:	f883 2028 	strb.w	r2, [r3, #40]
    }

    if (bonAngle)
    9816:	697b      	ldr	r3, [r7, #20]
    9818:	7d1b      	ldrb	r3, [r3, #20]
    981a:	2b00      	cmp	r3, #0
    981c:	f000 80ee 	beq.w	99fc <_ZN13CommandAllerA6updateEv+0x75c>
    {

        if (fabs(diffAng) > angleMaxPourAvancer)
    9820:	6e7b      	ldr	r3, [r7, #100]
    9822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9826:	4618      	mov	r0, r3
    9828:	6eb9      	ldr	r1, [r7, #104]
    982a:	f011 fcdd 	bl	1b1e8 <__aeabi_fcmpgt>
    982e:	4603      	mov	r3, r0
    9830:	2b00      	cmp	r3, #0
    9832:	d00a      	beq.n	984a <_ZN13CommandAllerA6updateEv+0x5aa>
        {
            linSpeed *= 0.97f;
    9834:	697b      	ldr	r3, [r7, #20]
    9836:	699b      	ldr	r3, [r3, #24]
    9838:	4618      	mov	r0, r3
    983a:	4976      	ldr	r1, [pc, #472]	(9a14 <_ZN13CommandAllerA6updateEv+0x774>)
    983c:	f011 fb1a 	bl	1ae74 <__aeabi_fmul>
    9840:	4603      	mov	r3, r0
    9842:	461a      	mov	r2, r3
    9844:	697b      	ldr	r3, [r7, #20]
    9846:	619a      	str	r2, [r3, #24]
    9848:	e0d8      	b.n	99fc <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else if (distanceBut > distanceVitesseMax)
    984a:	6ef8      	ldr	r0, [r7, #108]
    984c:	6db9      	ldr	r1, [r7, #88]
    984e:	f011 fccb 	bl	1b1e8 <__aeabi_fcmpgt>
    9852:	4603      	mov	r3, r0
    9854:	2b00      	cmp	r3, #0
    9856:	d039      	beq.n	98cc <_ZN13CommandAllerA6updateEv+0x62c>
        {
             if (m_reculer)
    9858:	697b      	ldr	r3, [r7, #20]
    985a:	f893 3020 	ldrb.w	r3, [r3, #32]
    985e:	2b00      	cmp	r3, #0
    9860:	d00a      	beq.n	9878 <_ZN13CommandAllerA6updateEv+0x5d8>
                linSpeed -= accLinMax;
    9862:	697b      	ldr	r3, [r7, #20]
    9864:	699b      	ldr	r3, [r3, #24]
    9866:	4618      	mov	r0, r3
    9868:	6cb9      	ldr	r1, [r7, #72]
    986a:	f011 f9f9 	bl	1ac60 <__aeabi_fsub>
    986e:	4603      	mov	r3, r0
    9870:	461a      	mov	r2, r3
    9872:	697b      	ldr	r3, [r7, #20]
    9874:	619a      	str	r2, [r3, #24]
    9876:	e009      	b.n	988c <_ZN13CommandAllerA6updateEv+0x5ec>
             else
                linSpeed += accLinMax;
    9878:	697b      	ldr	r3, [r7, #20]
    987a:	699b      	ldr	r3, [r3, #24]
    987c:	4618      	mov	r0, r3
    987e:	6cb9      	ldr	r1, [r7, #72]
    9880:	f011 f9f0 	bl	1ac64 <__addsf3>
    9884:	4603      	mov	r3, r0
    9886:	461a      	mov	r2, r3
    9888:	697b      	ldr	r3, [r7, #20]
    988a:	619a      	str	r2, [r3, #24]

            if (linSpeed > vitLinMax)
    988c:	697b      	ldr	r3, [r7, #20]
    988e:	699b      	ldr	r3, [r3, #24]
    9890:	4618      	mov	r0, r3
    9892:	6d39      	ldr	r1, [r7, #80]
    9894:	f011 fca8 	bl	1b1e8 <__aeabi_fcmpgt>
    9898:	4603      	mov	r3, r0
    989a:	2b00      	cmp	r3, #0
    989c:	d003      	beq.n	98a6 <_ZN13CommandAllerA6updateEv+0x606>
                linSpeed = vitLinMax;
    989e:	697a      	ldr	r2, [r7, #20]
    98a0:	6d3b      	ldr	r3, [r7, #80]
    98a2:	6193      	str	r3, [r2, #24]
    98a4:	e0aa      	b.n	99fc <_ZN13CommandAllerA6updateEv+0x75c>
            else if (linSpeed < -vitLinMax)
    98a6:	697b      	ldr	r3, [r7, #20]
    98a8:	699a      	ldr	r2, [r3, #24]
    98aa:	6d3b      	ldr	r3, [r7, #80]
    98ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    98b0:	4610      	mov	r0, r2
    98b2:	4619      	mov	r1, r3
    98b4:	f011 fc7a 	bl	1b1ac <__aeabi_fcmplt>
    98b8:	4603      	mov	r3, r0
    98ba:	2b00      	cmp	r3, #0
    98bc:	f000 809e 	beq.w	99fc <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = -vitLinMax;
    98c0:	6d3b      	ldr	r3, [r7, #80]
    98c2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    98c6:	697b      	ldr	r3, [r7, #20]
    98c8:	619a      	str	r2, [r3, #24]
    98ca:	e097      	b.n	99fc <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else
        {
            float linSpeedVisee;
            if (m_reculer)
    98cc:	697b      	ldr	r3, [r7, #20]
    98ce:	f893 3020 	ldrb.w	r3, [r3, #32]
    98d2:	2b00      	cmp	r3, #0
    98d4:	d025      	beq.n	9922 <_ZN13CommandAllerA6updateEv+0x682>
                linSpeedVisee = -sqrt(vFin2+2.0f*distanceBut*decLinMax);
    98d6:	697b      	ldr	r3, [r7, #20]
    98d8:	691c      	ldr	r4, [r3, #16]
    98da:	6efb      	ldr	r3, [r7, #108]
    98dc:	4618      	mov	r0, r3
    98de:	4619      	mov	r1, r3
    98e0:	f011 f9c0 	bl	1ac64 <__addsf3>
    98e4:	4603      	mov	r3, r0
    98e6:	4618      	mov	r0, r3
    98e8:	6cf9      	ldr	r1, [r7, #76]
    98ea:	f011 fac3 	bl	1ae74 <__aeabi_fmul>
    98ee:	4603      	mov	r3, r0
    98f0:	4620      	mov	r0, r4
    98f2:	4619      	mov	r1, r3
    98f4:	f011 f9b6 	bl	1ac64 <__addsf3>
    98f8:	4603      	mov	r3, r0
    98fa:	4618      	mov	r0, r3
    98fc:	f010 fe48 	bl	1a590 <__aeabi_f2d>
    9900:	4602      	mov	r2, r0
    9902:	460b      	mov	r3, r1
    9904:	4610      	mov	r0, r2
    9906:	4619      	mov	r1, r3
    9908:	f014 ff7e 	bl	1e808 <sqrt>
    990c:	4602      	mov	r2, r0
    990e:	460b      	mov	r3, r1
    9910:	4610      	mov	r0, r2
    9912:	4619      	mov	r1, r3
    9914:	f011 f950 	bl	1abb8 <__aeabi_d2f>
    9918:	4603      	mov	r3, r0
    991a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    991e:	677b      	str	r3, [r7, #116]
    9920:	e022      	b.n	9968 <_ZN13CommandAllerA6updateEv+0x6c8>
            else
                linSpeedVisee = sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9922:	697b      	ldr	r3, [r7, #20]
    9924:	691c      	ldr	r4, [r3, #16]
    9926:	6efb      	ldr	r3, [r7, #108]
    9928:	4618      	mov	r0, r3
    992a:	4619      	mov	r1, r3
    992c:	f011 f99a 	bl	1ac64 <__addsf3>
    9930:	4603      	mov	r3, r0
    9932:	4618      	mov	r0, r3
    9934:	6cf9      	ldr	r1, [r7, #76]
    9936:	f011 fa9d 	bl	1ae74 <__aeabi_fmul>
    993a:	4603      	mov	r3, r0
    993c:	4620      	mov	r0, r4
    993e:	4619      	mov	r1, r3
    9940:	f011 f990 	bl	1ac64 <__addsf3>
    9944:	4603      	mov	r3, r0
    9946:	4618      	mov	r0, r3
    9948:	f010 fe22 	bl	1a590 <__aeabi_f2d>
    994c:	4602      	mov	r2, r0
    994e:	460b      	mov	r3, r1
    9950:	4610      	mov	r0, r2
    9952:	4619      	mov	r1, r3
    9954:	f014 ff58 	bl	1e808 <sqrt>
    9958:	4602      	mov	r2, r0
    995a:	460b      	mov	r3, r1
    995c:	4610      	mov	r0, r2
    995e:	4619      	mov	r1, r3
    9960:	f011 f92a 	bl	1abb8 <__aeabi_d2f>
    9964:	4603      	mov	r3, r0
    9966:	677b      	str	r3, [r7, #116]

             if (m_reculer)
    9968:	697b      	ldr	r3, [r7, #20]
    996a:	f893 3020 	ldrb.w	r3, [r3, #32]
    996e:	2b00      	cmp	r3, #0
    9970:	d00a      	beq.n	9988 <_ZN13CommandAllerA6updateEv+0x6e8>
                linSpeed -= accLinMax;
    9972:	697b      	ldr	r3, [r7, #20]
    9974:	699b      	ldr	r3, [r3, #24]
    9976:	4618      	mov	r0, r3
    9978:	6cb9      	ldr	r1, [r7, #72]
    997a:	f011 f971 	bl	1ac60 <__aeabi_fsub>
    997e:	4603      	mov	r3, r0
    9980:	461a      	mov	r2, r3
    9982:	697b      	ldr	r3, [r7, #20]
    9984:	619a      	str	r2, [r3, #24]
    9986:	e009      	b.n	999c <_ZN13CommandAllerA6updateEv+0x6fc>
             else
                linSpeed += accLinMax;
    9988:	697b      	ldr	r3, [r7, #20]
    998a:	699b      	ldr	r3, [r3, #24]
    998c:	4618      	mov	r0, r3
    998e:	6cb9      	ldr	r1, [r7, #72]
    9990:	f011 f968 	bl	1ac64 <__addsf3>
    9994:	4603      	mov	r3, r0
    9996:	461a      	mov	r2, r3
    9998:	697b      	ldr	r3, [r7, #20]
    999a:	619a      	str	r2, [r3, #24]

            if (abs(linSpeed) > abs(linSpeedVisee))
    999c:	697b      	ldr	r3, [r7, #20]
    999e:	699b      	ldr	r3, [r3, #24]
    99a0:	4618      	mov	r0, r3
    99a2:	4919      	ldr	r1, [pc, #100]	(9a08 <_ZN13CommandAllerA6updateEv+0x768>)
    99a4:	f011 fc20 	bl	1b1e8 <__aeabi_fcmpgt>
    99a8:	4603      	mov	r3, r0
    99aa:	2b00      	cmp	r3, #0
    99ac:	d011      	beq.n	99d2 <_ZN13CommandAllerA6updateEv+0x732>
    99ae:	697b      	ldr	r3, [r7, #20]
    99b0:	699a      	ldr	r2, [r3, #24]
    99b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    99b6:	70bb      	strb	r3, [r7, #2]
    99b8:	4610      	mov	r0, r2
    99ba:	4913      	ldr	r1, [pc, #76]	(9a08 <_ZN13CommandAllerA6updateEv+0x768>)
    99bc:	f011 fbec 	bl	1b198 <__aeabi_fcmpeq>
    99c0:	4603      	mov	r3, r0
    99c2:	2b00      	cmp	r3, #0
    99c4:	d102      	bne.n	99cc <_ZN13CommandAllerA6updateEv+0x72c>
    99c6:	f04f 0301 	mov.w	r3, #1	; 0x1
    99ca:	70bb      	strb	r3, [r7, #2]
    99cc:	78bb      	ldrb	r3, [r7, #2]
    99ce:	613b      	str	r3, [r7, #16]
    99d0:	e00e      	b.n	99f0 <_ZN13CommandAllerA6updateEv+0x750>
    99d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    99d6:	707b      	strb	r3, [r7, #1]
    99d8:	6f78      	ldr	r0, [r7, #116]
    99da:	490b      	ldr	r1, [pc, #44]	(9a08 <_ZN13CommandAllerA6updateEv+0x768>)
    99dc:	f011 fbdc 	bl	1b198 <__aeabi_fcmpeq>
    99e0:	4603      	mov	r3, r0
    99e2:	2b00      	cmp	r3, #0
    99e4:	d102      	bne.n	99ec <_ZN13CommandAllerA6updateEv+0x74c>
    99e6:	f04f 0301 	mov.w	r3, #1	; 0x1
    99ea:	707b      	strb	r3, [r7, #1]
    99ec:	787b      	ldrb	r3, [r7, #1]
    99ee:	613b      	str	r3, [r7, #16]
    99f0:	693b      	ldr	r3, [r7, #16]
    99f2:	2b00      	cmp	r3, #0
    99f4:	d002      	beq.n	99fc <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = linSpeedVisee;
    99f6:	697a      	ldr	r2, [r7, #20]
    99f8:	6f7b      	ldr	r3, [r7, #116]
    99fa:	6193      	str	r3, [r2, #24]
        }
    }
}
    99fc:	f107 0778 	add.w	r7, r7, #120	; 0x78
    9a00:	46bd      	mov	sp, r7
    9a02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9a06:	46c0      	nop			(mov r8, r8)
    9a08:	00000000 	.word	0x00000000
    9a0c:	c0000000 	.word	0xc0000000
    9a10:	41200000 	.word	0x41200000
    9a14:	3f7851ec 	.word	0x3f7851ec

00009a18 <_ZN18CommandAllerEnArcA6updateEv>:
        cote = SGN_POS;
    else
        cote = SGN_NEG;
}

void CommandAllerEnArcA::update()
    9a18:	b580      	push	{r7, lr}
    9a1a:	b094      	sub	sp, #80
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	6078      	str	r0, [r7, #4]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    9a20:	4b20      	ldr	r3, [pc, #128]	(9aa4 <_ZN18CommandAllerEnArcA6updateEv+0x8c>)
    9a22:	637b      	str	r3, [r7, #52]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    9a24:	4b20      	ldr	r3, [pc, #128]	(9aa8 <_ZN18CommandAllerEnArcA6updateEv+0x90>)
    9a26:	63bb      	str	r3, [r7, #56]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    9a28:	4b20      	ldr	r3, [pc, #128]	(9aac <_ZN18CommandAllerEnArcA6updateEv+0x94>)
    9a2a:	63fb      	str	r3, [r7, #60]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    9a2c:	4b20      	ldr	r3, [pc, #128]	(9ab0 <_ZN18CommandAllerEnArcA6updateEv+0x98>)
    9a2e:	643b      	str	r3, [r7, #64]
    float vitLinMax = vMax;//VITESSE_LINEAIRE_MAX;
    9a30:	687b      	ldr	r3, [r7, #4]
    9a32:	68db      	ldr	r3, [r3, #12]
    9a34:	647b      	str	r3, [r7, #68]

    float angle = Odometrie::odometrie->getPos().getAngle();
    9a36:	4b1f      	ldr	r3, [pc, #124]	(9ab4 <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9a38:	681a      	ldr	r2, [r3, #0]
    9a3a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9a3e:	4618      	mov	r0, r3
    9a40:	4611      	mov	r1, r2
    9a42:	f000 f85d 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    9a46:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9a4a:	4618      	mov	r0, r3
    9a4c:	f005 f9e0 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    9a50:	4603      	mov	r3, r0
    9a52:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9a54:	4b17      	ldr	r3, [pc, #92]	(9ab4 <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9a56:	681a      	ldr	r2, [r3, #0]
    9a58:	f107 0320 	add.w	r3, r7, #32	; 0x20
    9a5c:	4618      	mov	r0, r3
    9a5e:	4611      	mov	r1, r2
    9a60:	f000 f84e 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    9a64:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9a68:	f107 0220 	add.w	r2, r7, #32	; 0x20
    9a6c:	4618      	mov	r0, r3
    9a6e:	4611      	mov	r1, r2
    9a70:	f005 f9bc 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>

    float rayon = (centre-but).getNorme();
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	f103 0220 	add.w	r2, r3, #32	; 0x20
    9a7a:	687b      	ldr	r3, [r7, #4]
    9a7c:	f103 0c04 	add.w	ip, r3, #4	; 0x4
    9a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9a84:	4618      	mov	r0, r3
    9a86:	4611      	mov	r1, r2
    9a88:	4662      	mov	r2, ip
    9a8a:	f004 ffe1 	bl	ea50 <_ZNK8PositionmiERKS_>
    9a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9a92:	4618      	mov	r0, r3
    9a94:	f005 f8ea 	bl	ec6c <_ZNK8Position8getNormeEv>
    9a98:	4603      	mov	r3, r0
    9a9a:	64fb      	str	r3, [r7, #76]
        angSpeed = linSpeed/rVise;
    else if (abs(linSpeed) > abs(rVise*angSpeed))
        linSpeed = rVise*angSpeed;*/


}
    9a9c:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9aa0:	46bd      	mov	sp, r7
    9aa2:	bd80      	pop	{r7, pc}
    9aa4:	3983126f 	.word	0x3983126f
    9aa8:	3cf5c28f 	.word	0x3cf5c28f
    9aac:	3ccccccd 	.word	0x3ccccccd
    9ab0:	3ca3d70a 	.word	0x3ca3d70a
    9ab4:	20000578 	.word	0x20000578

00009ab8 <_ZNK9Odometrie19getVitesseAngulaireEv>:
PositionPlusAngle Odometrie::getPos() const
{
    return positionPlusAngle;
}

Angle Odometrie::getVitesseAngulaire() const
    9ab8:	b480      	push	{r7}
    9aba:	b083      	sub	sp, #12
    9abc:	af00      	add	r7, sp, #0
    9abe:	6078      	str	r0, [r7, #4]
{
    return vitesseAngulaire;
    9ac0:	687b      	ldr	r3, [r7, #4]
    9ac2:	699b      	ldr	r3, [r3, #24]
}
    9ac4:	4618      	mov	r0, r3
    9ac6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9aca:	46bd      	mov	sp, r7
    9acc:	bc80      	pop	{r7}
    9ace:	4770      	bx	lr

00009ad0 <_ZNK9Odometrie18getVitesseLineaireEv>:

Distance Odometrie::getVitesseLineaire() const
    9ad0:	b480      	push	{r7}
    9ad2:	b083      	sub	sp, #12
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	6078      	str	r0, [r7, #4]
{
    return vitesseLineaire;
    9ad8:	687b      	ldr	r3, [r7, #4]
    9ada:	695b      	ldr	r3, [r3, #20]
}
    9adc:	4618      	mov	r0, r3
    9ade:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9ae2:	46bd      	mov	sp, r7
    9ae4:	bc80      	pop	{r7}
    9ae6:	4770      	bx	lr

00009ae8 <_ZNK9Odometrie16getAbsoluteAngleEv>:

Angle Odometrie::getAbsoluteAngle() const
    9ae8:	b480      	push	{r7}
    9aea:	b083      	sub	sp, #12
    9aec:	af00      	add	r7, sp, #0
    9aee:	6078      	str	r0, [r7, #4]
{
    return absAngle;
    9af0:	687b      	ldr	r3, [r7, #4]
    9af2:	6f1b      	ldr	r3, [r3, #112]
}
    9af4:	4618      	mov	r0, r3
    9af6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9afa:	46bd      	mov	sp, r7
    9afc:	bc80      	pop	{r7}
    9afe:	4770      	bx	lr

00009b00 <_ZNK9Odometrie6getPosEv>:
    posY = p.getPosition().getY();
    ang = p.getAngle();
    positionPlusAngle = p;
}

PositionPlusAngle Odometrie::getPos() const
    9b00:	b590      	push	{r4, r7, lr}
    9b02:	b083      	sub	sp, #12
    9b04:	af00      	add	r7, sp, #0
    9b06:	4604      	mov	r4, r0
    9b08:	6079      	str	r1, [r7, #4]
{
    return positionPlusAngle;
    9b0a:	4622      	mov	r2, r4
    9b0c:	687b      	ldr	r3, [r7, #4]
    9b0e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9b12:	4610      	mov	r0, r2
    9b14:	4619      	mov	r1, r3
    9b16:	f005 f951 	bl	edbc <_ZN17PositionPlusAngleC1ERKS_>
}
    9b1a:	4620      	mov	r0, r4
    9b1c:	4620      	mov	r0, r4
    9b1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9b22:	46bd      	mov	sp, r7
    9b24:	bd90      	pop	{r4, r7, pc}
    9b26:	46c0      	nop			(mov r8, r8)

00009b28 <_ZN9Odometrie6setPosERK17PositionPlusAngle>:
    positionPlusAngle.setX(posX);
    positionPlusAngle.setY(posY);

}

void Odometrie::setPos(const PositionPlusAngle& p)
    9b28:	b580      	push	{r7, lr}
    9b2a:	b086      	sub	sp, #24
    9b2c:	af00      	add	r7, sp, #0
    9b2e:	6078      	str	r0, [r7, #4]
    9b30:	6039      	str	r1, [r7, #0]
{
    posX = p.getPosition().getX();
    9b32:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9b36:	4618      	mov	r0, r3
    9b38:	6839      	ldr	r1, [r7, #0]
    9b3a:	f005 f957 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    9b3e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9b42:	4618      	mov	r0, r3
    9b44:	f004 ff2a 	bl	e99c <_ZNK8Position4getXEv>
    9b48:	4603      	mov	r3, r0
    9b4a:	4618      	mov	r0, r3
    9b4c:	f010 fd20 	bl	1a590 <__aeabi_f2d>
    9b50:	4602      	mov	r2, r0
    9b52:	460b      	mov	r3, r1
    9b54:	6879      	ldr	r1, [r7, #4]
    9b56:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = p.getPosition().getY();
    9b5a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9b5e:	4618      	mov	r0, r3
    9b60:	6839      	ldr	r1, [r7, #0]
    9b62:	f005 f943 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    9b66:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9b6a:	4618      	mov	r0, r3
    9b6c:	f004 ff22 	bl	e9b4 <_ZNK8Position4getYEv>
    9b70:	4603      	mov	r3, r0
    9b72:	4618      	mov	r0, r3
    9b74:	f010 fd0c 	bl	1a590 <__aeabi_f2d>
    9b78:	4602      	mov	r2, r0
    9b7a:	460b      	mov	r3, r1
    9b7c:	6879      	ldr	r1, [r7, #4]
    9b7e:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = p.getAngle();
    9b82:	6838      	ldr	r0, [r7, #0]
    9b84:	f005 f944 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    9b88:	4603      	mov	r3, r0
    9b8a:	4618      	mov	r0, r3
    9b8c:	f010 fd00 	bl	1a590 <__aeabi_f2d>
    9b90:	4602      	mov	r2, r0
    9b92:	460b      	mov	r3, r1
    9b94:	6879      	ldr	r1, [r7, #4]
    9b96:	e9c1 231a 	strd	r2, r3, [r1, #104]
    positionPlusAngle = p;
    9b9a:	687b      	ldr	r3, [r7, #4]
    9b9c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9ba0:	4618      	mov	r0, r3
    9ba2:	6839      	ldr	r1, [r7, #0]
    9ba4:	f005 f97a 	bl	ee9c <_ZN17PositionPlusAngleaSERKS_>
}
    9ba8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    9bac:	46bd      	mov	sp, r7
    9bae:	bd80      	pop	{r7, pc}

00009bb0 <_ZN9Odometrie8setAngleEf>:
    setPos(posPA);

    odometrie->posY = y;
}

void Odometrie::setAngle(Angle a)
    9bb0:	b590      	push	{r4, r7, lr}
    9bb2:	b087      	sub	sp, #28
    9bb4:	af00      	add	r7, sp, #0
    9bb6:	6078      	str	r0, [r7, #4]
    9bb8:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9bba:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9bbe:	4618      	mov	r0, r3
    9bc0:	6879      	ldr	r1, [r7, #4]
    9bc2:	f7ff ff9d 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    posPA.setAngle(a);
    9bc6:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9bca:	4618      	mov	r0, r3
    9bcc:	6839      	ldr	r1, [r7, #0]
    9bce:	f005 f92b 	bl	ee28 <_ZN17PositionPlusAngle8setAngleEf>
    setPos(posPA);
    9bd2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9bd6:	6878      	ldr	r0, [r7, #4]
    9bd8:	4619      	mov	r1, r3
    9bda:	f7ff ffa5 	bl	9b28 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->ang = a;
    9bde:	4b06      	ldr	r3, [pc, #24]	(9bf8 <_ZN9Odometrie8setAngleEf+0x48>)
    9be0:	681c      	ldr	r4, [r3, #0]
    9be2:	6838      	ldr	r0, [r7, #0]
    9be4:	f010 fcd4 	bl	1a590 <__aeabi_f2d>
    9be8:	4602      	mov	r2, r0
    9bea:	460b      	mov	r3, r1
    9bec:	e9c4 231a 	strd	r2, r3, [r4, #104]
}
    9bf0:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    9bf4:	46bd      	mov	sp, r7
    9bf6:	bd90      	pop	{r4, r7, pc}
    9bf8:	20000578 	.word	0x20000578

00009bfc <_ZN9Odometrie4setYEf>:
    posPA.setPosition(pos);
    setPos(posPA);
    odometrie->posX = x;
}

void Odometrie::setY(Distance y)
    9bfc:	b590      	push	{r4, r7, lr}
    9bfe:	b089      	sub	sp, #36
    9c00:	af00      	add	r7, sp, #0
    9c02:	6078      	str	r0, [r7, #4]
    9c04:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9c06:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9c0a:	4618      	mov	r0, r3
    9c0c:	6879      	ldr	r1, [r7, #4]
    9c0e:	f7ff ff77 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    9c12:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9c16:	f107 0214 	add.w	r2, r7, #20	; 0x14
    9c1a:	4618      	mov	r0, r3
    9c1c:	4611      	mov	r1, r2
    9c1e:	f005 f8e5 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setY(y);
    9c22:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9c26:	4618      	mov	r0, r3
    9c28:	6839      	ldr	r1, [r7, #0]
    9c2a:	f004 fedd 	bl	e9e8 <_ZN8Position4setYEf>
    posPA.setPosition(pos);
    9c2e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9c32:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9c36:	4618      	mov	r0, r3
    9c38:	4611      	mov	r1, r2
    9c3a:	f005 f91f 	bl	ee7c <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    9c3e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9c42:	6878      	ldr	r0, [r7, #4]
    9c44:	4619      	mov	r1, r3
    9c46:	f7ff ff6f 	bl	9b28 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->posY = y;
    9c4a:	4b06      	ldr	r3, [pc, #24]	(9c64 <_ZN9Odometrie4setYEf+0x68>)
    9c4c:	681c      	ldr	r4, [r3, #0]
    9c4e:	6838      	ldr	r0, [r7, #0]
    9c50:	f010 fc9e 	bl	1a590 <__aeabi_f2d>
    9c54:	4602      	mov	r2, r0
    9c56:	460b      	mov	r3, r1
    9c58:	e9c4 2318 	strd	r2, r3, [r4, #96]
}
    9c5c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    9c60:	46bd      	mov	sp, r7
    9c62:	bd90      	pop	{r4, r7, pc}
    9c64:	20000578 	.word	0x20000578

00009c68 <_ZN9Odometrie4setXEf>:
Angle Odometrie::getAbsoluteAngle() const
{
    return absAngle;
}

void Odometrie::setX(Distance x)
    9c68:	b590      	push	{r4, r7, lr}
    9c6a:	b089      	sub	sp, #36
    9c6c:	af00      	add	r7, sp, #0
    9c6e:	6078      	str	r0, [r7, #4]
    9c70:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9c72:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9c76:	4618      	mov	r0, r3
    9c78:	6879      	ldr	r1, [r7, #4]
    9c7a:	f7ff ff41 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    9c7e:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9c82:	f107 0214 	add.w	r2, r7, #20	; 0x14
    9c86:	4618      	mov	r0, r3
    9c88:	4611      	mov	r1, r2
    9c8a:	f005 f8af 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setX(x);
    9c8e:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9c92:	4618      	mov	r0, r3
    9c94:	6839      	ldr	r1, [r7, #0]
    9c96:	f004 fe99 	bl	e9cc <_ZN8Position4setXEf>
    posPA.setPosition(pos);
    9c9a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9c9e:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9ca2:	4618      	mov	r0, r3
    9ca4:	4611      	mov	r1, r2
    9ca6:	f005 f8e9 	bl	ee7c <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    9caa:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9cae:	6878      	ldr	r0, [r7, #4]
    9cb0:	4619      	mov	r1, r3
    9cb2:	f7ff ff39 	bl	9b28 <_ZN9Odometrie6setPosERK17PositionPlusAngle>
    odometrie->posX = x;
    9cb6:	4b06      	ldr	r3, [pc, #24]	(9cd0 <_ZN9Odometrie4setXEf+0x68>)
    9cb8:	681c      	ldr	r4, [r3, #0]
    9cba:	6838      	ldr	r0, [r7, #0]
    9cbc:	f010 fc68 	bl	1a590 <__aeabi_f2d>
    9cc0:	4602      	mov	r2, r0
    9cc2:	460b      	mov	r3, r1
    9cc4:	e9c4 2316 	strd	r2, r3, [r4, #88]
}
    9cc8:	f107 0724 	add.w	r7, r7, #36	; 0x24
    9ccc:	46bd      	mov	sp, r7
    9cce:	bd90      	pop	{r4, r7, pc}
    9cd0:	20000578 	.word	0x20000578

00009cd4 <_ZN9Odometrie6updateEv>:
{
    delete roueCodeuseGauche;
    delete roueCodeuseDroite;
}

void Odometrie::update()
    9cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    9cd8:	b094      	sub	sp, #80
    9cda:	af00      	add	r7, sp, #0
    9cdc:	6078      	str	r0, [r7, #4]
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    9cde:	f04f 0300 	mov.w	r3, #0	; 0x0
    9ce2:	633b      	str	r3, [r7, #48]
    9ce4:	e027      	b.n	9d36 <_ZN9Odometrie6updateEv+0x62>
    {
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
    9ce6:	6b3b      	ldr	r3, [r7, #48]
    9ce8:	f103 0001 	add.w	r0, r3, #1	; 0x1
    9cec:	6b3b      	ldr	r3, [r7, #48]
    9cee:	687a      	ldr	r2, [r7, #4]
    9cf0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9cf4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9cf8:	4413      	add	r3, r2
    9cfa:	6859      	ldr	r1, [r3, #4]
    9cfc:	687a      	ldr	r2, [r7, #4]
    9cfe:	f100 0308 	add.w	r3, r0, #8	; 0x8
    9d02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9d06:	4413      	add	r3, r2
    9d08:	6059      	str	r1, [r3, #4]
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    9d0a:	6b3b      	ldr	r3, [r7, #48]
    9d0c:	f103 0001 	add.w	r0, r3, #1	; 0x1
    9d10:	6b3b      	ldr	r3, [r7, #48]
    9d12:	687a      	ldr	r2, [r7, #4]
    9d14:	f103 0306 	add.w	r3, r3, #6	; 0x6
    9d18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9d1c:	4413      	add	r3, r2
    9d1e:	6859      	ldr	r1, [r3, #4]
    9d20:	687a      	ldr	r2, [r7, #4]
    9d22:	f100 0306 	add.w	r3, r0, #6	; 0x6
    9d26:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9d2a:	4413      	add	r3, r2
    9d2c:	6059      	str	r1, [r3, #4]
}

void Odometrie::update()
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    9d2e:	6b3b      	ldr	r3, [r7, #48]
    9d30:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    9d34:	633b      	str	r3, [r7, #48]
    9d36:	6b3b      	ldr	r3, [r7, #48]
    9d38:	2b00      	cmp	r3, #0
    9d3a:	dad4      	bge.n	9ce6 <_ZN9Odometrie6updateEv+0x12>
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    }

    // On a le moins pour prendre en compte que les deux roux codeuses sont montées dans des sens opposés car pas du même coté du robot
    prevDeltaTicksRoueDroite[0] = -roueCodeuseDroite->getTickValue();
    9d3c:	687b      	ldr	r3, [r7, #4]
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	4618      	mov	r0, r3
    9d42:	f002 fe41 	bl	c9c8 <_ZN22QuadratureCoderHandler12getTickValueEv>
    9d46:	4603      	mov	r3, r0
    9d48:	b29b      	uxth	r3, r3
    9d4a:	b21b      	sxth	r3, r3
    9d4c:	f1c3 0200 	rsb	r2, r3, #0	; 0x0
    9d50:	687b      	ldr	r3, [r7, #4]
    9d52:	625a      	str	r2, [r3, #36]
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
        prevDeltaTicksRoueGauche[0] = -roueCodeuseGauche->getTickValue();
    #else
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    9d54:	687b      	ldr	r3, [r7, #4]
    9d56:	685b      	ldr	r3, [r3, #4]
    9d58:	4618      	mov	r0, r3
    9d5a:	f002 fe35 	bl	c9c8 <_ZN22QuadratureCoderHandler12getTickValueEv>
    9d5e:	4603      	mov	r3, r0
    9d60:	b29b      	uxth	r3, r3
    9d62:	b21a      	sxth	r2, r3
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	61da      	str	r2, [r3, #28]
    #endif

    int32_t sommeGauche = 0;
    9d68:	f04f 0300 	mov.w	r3, #0	; 0x0
    9d6c:	60bb      	str	r3, [r7, #8]
    int32_t sommeDroite = 0;
    9d6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9d72:	60fb      	str	r3, [r7, #12]
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9d74:	f04f 0300 	mov.w	r3, #0	; 0x0
    9d78:	637b      	str	r3, [r7, #52]
    9d7a:	e019      	b.n	9db0 <_ZN9Odometrie6updateEv+0xdc>
    {
        sommeGauche += prevDeltaTicksRoueGauche[i];
    9d7c:	6b7b      	ldr	r3, [r7, #52]
    9d7e:	687a      	ldr	r2, [r7, #4]
    9d80:	f103 0306 	add.w	r3, r3, #6	; 0x6
    9d84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9d88:	4413      	add	r3, r2
    9d8a:	685a      	ldr	r2, [r3, #4]
    9d8c:	68bb      	ldr	r3, [r7, #8]
    9d8e:	4413      	add	r3, r2
    9d90:	60bb      	str	r3, [r7, #8]
        sommeDroite += prevDeltaTicksRoueDroite[i];
    9d92:	6b7b      	ldr	r3, [r7, #52]
    9d94:	687a      	ldr	r2, [r7, #4]
    9d96:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9d9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9d9e:	4413      	add	r3, r2
    9da0:	685a      	ldr	r2, [r3, #4]
    9da2:	68fb      	ldr	r3, [r7, #12]
    9da4:	4413      	add	r3, r2
    9da6:	60fb      	str	r3, [r7, #12]
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    #endif

    int32_t sommeGauche = 0;
    int32_t sommeDroite = 0;
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9da8:	6b7b      	ldr	r3, [r7, #52]
    9daa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    9dae:	637b      	str	r3, [r7, #52]
    9db0:	6b7b      	ldr	r3, [r7, #52]
    9db2:	2b01      	cmp	r3, #1
    9db4:	dde2      	ble.n	9d7c <_ZN9Odometrie6updateEv+0xa8>
        sommeGauche += prevDeltaTicksRoueGauche[i];
        sommeDroite += prevDeltaTicksRoueDroite[i];
    }

    // double filteredDeltaTicksRoueGauche = (deltaTicksRoueGauche+prevDeltaTicksRoueGauche)/2.0;
    double filteredDeltaTicksRoueGauche = (double)sommeGauche/(double)tailleTabPrevTicks;
    9db6:	68b8      	ldr	r0, [r7, #8]
    9db8:	f010 fbd8 	bl	1a56c <__aeabi_i2d>
    9dbc:	4602      	mov	r2, r0
    9dbe:	460b      	mov	r3, r1
    9dc0:	4610      	mov	r0, r2
    9dc2:	4619      	mov	r1, r3
    9dc4:	f04f 0200 	mov.w	r2, #0	; 0x0
    9dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9dcc:	f010 fd5e 	bl	1a88c <__aeabi_ddiv>
    9dd0:	4602      	mov	r2, r0
    9dd2:	460b      	mov	r3, r1
    9dd4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // double filteredDeltaTicksRoueDroite = (deltaTicksRoueDroite+prevDeltaTicksRoueDroite)/2.0;
    double filteredDeltaTicksRoueDroite = (double)sommeDroite/(double)tailleTabPrevTicks;
    9dd8:	68f8      	ldr	r0, [r7, #12]
    9dda:	f010 fbc7 	bl	1a56c <__aeabi_i2d>
    9dde:	4602      	mov	r2, r0
    9de0:	460b      	mov	r3, r1
    9de2:	4610      	mov	r0, r2
    9de4:	4619      	mov	r1, r3
    9de6:	f04f 0200 	mov.w	r2, #0	; 0x0
    9dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9dee:	f010 fd4d 	bl	1a88c <__aeabi_ddiv>
    9df2:	4602      	mov	r2, r0
    9df4:	460b      	mov	r3, r1
    9df6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double tmpDeltaAngle = (filteredDeltaTicksRoueGauche-filteredDeltaTicksRoueDroite)*coeffAngle;  // cf coef angle
    9dfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    9dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9e02:	f010 fa65 	bl	1a2d0 <__aeabi_dsub>
    9e06:	4602      	mov	r2, r0
    9e08:	460b      	mov	r3, r1
    9e0a:	4610      	mov	r0, r2
    9e0c:	4619      	mov	r1, r3
    9e0e:	687b      	ldr	r3, [r7, #4]
    9e10:	e9d3 2314 	ldrd	r2, r3, [r3, #80]
    9e14:	f010 fc10 	bl	1a638 <__aeabi_dmul>
    9e18:	4602      	mov	r2, r0
    9e1a:	460b      	mov	r3, r1
    9e1c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double tmpDist = (filteredDeltaTicksRoueGauche+filteredDeltaTicksRoueDroite)*coeffDistance;     // soit le nombre moyen de tours de roue * le perimetre de la roue
    9e20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    9e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9e28:	f010 fa54 	bl	1a2d4 <__adddf3>
    9e2c:	4602      	mov	r2, r0
    9e2e:	460b      	mov	r3, r1
    9e30:	4610      	mov	r0, r2
    9e32:	4619      	mov	r1, r3
    9e34:	687b      	ldr	r3, [r7, #4]
    9e36:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    9e3a:	f010 fbfd 	bl	1a638 <__aeabi_dmul>
    9e3e:	4602      	mov	r2, r0
    9e40:	460b      	mov	r3, r1
    9e42:	e9c7 230a 	strd	r2, r3, [r7, #40]

    vitesseLineaire = Distance(tmpDist);
    9e46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    9e4a:	f010 feb5 	bl	1abb8 <__aeabi_d2f>
    9e4e:	4602      	mov	r2, r0
    9e50:	687b      	ldr	r3, [r7, #4]
    9e52:	615a      	str	r2, [r3, #20]

    vitesseAngulaire = Angle(tmpDeltaAngle);
    9e54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9e58:	f010 feae 	bl	1abb8 <__aeabi_d2f>
    9e5c:	4602      	mov	r2, r0
    9e5e:	687b      	ldr	r3, [r7, #4]
    9e60:	619a      	str	r2, [r3, #24]

	//positionPlusAngle.setAngle(positionPlusAngle.getAngle()+vitesseAngulaire);
	//positionPlusAngle.setPosition(positionPlusAngle.getPosition() + Position(tmpDist*cos(positionPlusAngle.getAngle()), tmpDist*sin(positionPlusAngle.getAngle())));    //mettre sinx si ça marche pas et non sin


    if (tmpDeltaAngle == 0.0)
    9e62:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9e66:	f04f 0200 	mov.w	r2, #0	; 0x0
    9e6a:	f04f 0300 	mov.w	r3, #0	; 0x0
    9e6e:	f010 fe49 	bl	1ab04 <__aeabi_dcmpeq>
    9e72:	4603      	mov	r3, r0
    9e74:	2b00      	cmp	r3, #0
    9e76:	d03a      	beq.n	9eee <_ZN9Odometrie6updateEv+0x21a>
    {
        posX += tmpDist*cos(ang);
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	e9d3 4516 	ldrd	r4, r5, [r3, #88]
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9e84:	4610      	mov	r0, r2
    9e86:	4619      	mov	r1, r3
    9e88:	f014 fc30 	bl	1e6ec <cos>
    9e8c:	4602      	mov	r2, r0
    9e8e:	460b      	mov	r3, r1
    9e90:	4610      	mov	r0, r2
    9e92:	4619      	mov	r1, r3
    9e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    9e98:	f010 fbce 	bl	1a638 <__aeabi_dmul>
    9e9c:	4602      	mov	r2, r0
    9e9e:	460b      	mov	r3, r1
    9ea0:	4620      	mov	r0, r4
    9ea2:	4629      	mov	r1, r5
    9ea4:	f010 fa16 	bl	1a2d4 <__adddf3>
    9ea8:	4602      	mov	r2, r0
    9eaa:	460b      	mov	r3, r1
    9eac:	6879      	ldr	r1, [r7, #4]
    9eae:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += tmpDist*sin(ang);
    9eb2:	687b      	ldr	r3, [r7, #4]
    9eb4:	e9d3 4518 	ldrd	r4, r5, [r3, #96]
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9ebe:	4610      	mov	r0, r2
    9ec0:	4619      	mov	r1, r3
    9ec2:	f014 fc55 	bl	1e770 <sin>
    9ec6:	4602      	mov	r2, r0
    9ec8:	460b      	mov	r3, r1
    9eca:	4610      	mov	r0, r2
    9ecc:	4619      	mov	r1, r3
    9ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    9ed2:	f010 fbb1 	bl	1a638 <__aeabi_dmul>
    9ed6:	4602      	mov	r2, r0
    9ed8:	460b      	mov	r3, r1
    9eda:	4620      	mov	r0, r4
    9edc:	4629      	mov	r1, r5
    9ede:	f010 f9f9 	bl	1a2d4 <__adddf3>
    9ee2:	4602      	mov	r2, r0
    9ee4:	460b      	mov	r3, r1
    9ee6:	6879      	ldr	r1, [r7, #4]
    9ee8:	e9c1 2318 	strd	r2, r3, [r1, #96]
    9eec:	e0f3      	b.n	a0d6 <_ZN9Odometrie6updateEv+0x402>
    }
    else
    {
        double rayonCourbure = tmpDist/tmpDeltaAngle;
    9eee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    9ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    9ef6:	f010 fcc9 	bl	1a88c <__aeabi_ddiv>
    9efa:	4602      	mov	r2, r0
    9efc:	460b      	mov	r3, r1
    9efe:	e9c7 230e 	strd	r2, r3, [r7, #56]
        double distAvancee = rayonCourbure*sin(tmpDeltaAngle);
    9f02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9f06:	f014 fc33 	bl	1e770 <sin>
    9f0a:	4602      	mov	r2, r0
    9f0c:	460b      	mov	r3, r1
    9f0e:	4610      	mov	r0, r2
    9f10:	4619      	mov	r1, r3
    9f12:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    9f16:	f010 fb8f 	bl	1a638 <__aeabi_dmul>
    9f1a:	4602      	mov	r2, r0
    9f1c:	460b      	mov	r3, r1
    9f1e:	e9c7 2310 	strd	r2, r3, [r7, #64]
        double distTranslatee = rayonCourbure*(1.0-cos(tmpDeltaAngle));
    9f22:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9f26:	f014 fbe1 	bl	1e6ec <cos>
    9f2a:	4602      	mov	r2, r0
    9f2c:	460b      	mov	r3, r1
    9f2e:	f04f 0000 	mov.w	r0, #0	; 0x0
    9f32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    9f36:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
    9f3a:	f010 f9c9 	bl	1a2d0 <__aeabi_dsub>
    9f3e:	4602      	mov	r2, r0
    9f40:	460b      	mov	r3, r1
    9f42:	4610      	mov	r0, r2
    9f44:	4619      	mov	r1, r3
    9f46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    9f4a:	f010 fb75 	bl	1a638 <__aeabi_dmul>
    9f4e:	4602      	mov	r2, r0
    9f50:	460b      	mov	r3, r1
    9f52:	e9c7 2312 	strd	r2, r3, [r7, #72]

        posX += distAvancee*cos(ang)-distTranslatee*sin(ang);
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	e9d3 8916 	ldrd	r8, r9, [r3, #88]
    9f5c:	687b      	ldr	r3, [r7, #4]
    9f5e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9f62:	4610      	mov	r0, r2
    9f64:	4619      	mov	r1, r3
    9f66:	f014 fbc1 	bl	1e6ec <cos>
    9f6a:	4602      	mov	r2, r0
    9f6c:	460b      	mov	r3, r1
    9f6e:	4610      	mov	r0, r2
    9f70:	4619      	mov	r1, r3
    9f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    9f76:	f010 fb5f 	bl	1a638 <__aeabi_dmul>
    9f7a:	4602      	mov	r2, r0
    9f7c:	460b      	mov	r3, r1
    9f7e:	4614      	mov	r4, r2
    9f80:	461d      	mov	r5, r3
    9f82:	687b      	ldr	r3, [r7, #4]
    9f84:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9f88:	4610      	mov	r0, r2
    9f8a:	4619      	mov	r1, r3
    9f8c:	f014 fbf0 	bl	1e770 <sin>
    9f90:	4602      	mov	r2, r0
    9f92:	460b      	mov	r3, r1
    9f94:	4610      	mov	r0, r2
    9f96:	4619      	mov	r1, r3
    9f98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    9f9c:	f010 fb4c 	bl	1a638 <__aeabi_dmul>
    9fa0:	4602      	mov	r2, r0
    9fa2:	460b      	mov	r3, r1
    9fa4:	4620      	mov	r0, r4
    9fa6:	4629      	mov	r1, r5
    9fa8:	f010 f992 	bl	1a2d0 <__aeabi_dsub>
    9fac:	4602      	mov	r2, r0
    9fae:	460b      	mov	r3, r1
    9fb0:	4640      	mov	r0, r8
    9fb2:	4649      	mov	r1, r9
    9fb4:	f010 f98e 	bl	1a2d4 <__adddf3>
    9fb8:	4602      	mov	r2, r0
    9fba:	460b      	mov	r3, r1
    9fbc:	6879      	ldr	r1, [r7, #4]
    9fbe:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += distAvancee*sin(ang)+distTranslatee*cos(ang);
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	e9d3 8918 	ldrd	r8, r9, [r3, #96]
    9fc8:	687b      	ldr	r3, [r7, #4]
    9fca:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9fce:	4610      	mov	r0, r2
    9fd0:	4619      	mov	r1, r3
    9fd2:	f014 fbcd 	bl	1e770 <sin>
    9fd6:	4602      	mov	r2, r0
    9fd8:	460b      	mov	r3, r1
    9fda:	4610      	mov	r0, r2
    9fdc:	4619      	mov	r1, r3
    9fde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    9fe2:	f010 fb29 	bl	1a638 <__aeabi_dmul>
    9fe6:	4602      	mov	r2, r0
    9fe8:	460b      	mov	r3, r1
    9fea:	4614      	mov	r4, r2
    9fec:	461d      	mov	r5, r3
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9ff4:	4610      	mov	r0, r2
    9ff6:	4619      	mov	r1, r3
    9ff8:	f014 fb78 	bl	1e6ec <cos>
    9ffc:	4602      	mov	r2, r0
    9ffe:	460b      	mov	r3, r1
    a000:	4610      	mov	r0, r2
    a002:	4619      	mov	r1, r3
    a004:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    a008:	f010 fb16 	bl	1a638 <__aeabi_dmul>
    a00c:	4602      	mov	r2, r0
    a00e:	460b      	mov	r3, r1
    a010:	4620      	mov	r0, r4
    a012:	4629      	mov	r1, r5
    a014:	f010 f95e 	bl	1a2d4 <__adddf3>
    a018:	4602      	mov	r2, r0
    a01a:	460b      	mov	r3, r1
    a01c:	4640      	mov	r0, r8
    a01e:	4649      	mov	r1, r9
    a020:	f010 f958 	bl	1a2d4 <__adddf3>
    a024:	4602      	mov	r2, r0
    a026:	460b      	mov	r3, r1
    a028:	6879      	ldr	r1, [r7, #4]
    a02a:	e9c1 2318 	strd	r2, r3, [r1, #96]

        ang += vitesseAngulaire;
    a02e:	687b      	ldr	r3, [r7, #4]
    a030:	e9d3 451a 	ldrd	r4, r5, [r3, #104]
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	699b      	ldr	r3, [r3, #24]
    a038:	4618      	mov	r0, r3
    a03a:	f010 faa9 	bl	1a590 <__aeabi_f2d>
    a03e:	4602      	mov	r2, r0
    a040:	460b      	mov	r3, r1
    a042:	4620      	mov	r0, r4
    a044:	4629      	mov	r1, r5
    a046:	f010 f945 	bl	1a2d4 <__adddf3>
    a04a:	4602      	mov	r2, r0
    a04c:	460b      	mov	r3, r1
    a04e:	6879      	ldr	r1, [r7, #4]
    a050:	e9c1 231a 	strd	r2, r3, [r1, #104]
        absAngle += vitesseAngulaire;
    a054:	687b      	ldr	r3, [r7, #4]
    a056:	6f1a      	ldr	r2, [r3, #112]
    a058:	687b      	ldr	r3, [r7, #4]
    a05a:	699b      	ldr	r3, [r3, #24]
    a05c:	4610      	mov	r0, r2
    a05e:	4619      	mov	r1, r3
    a060:	f010 fe00 	bl	1ac64 <__addsf3>
    a064:	4603      	mov	r3, r0
    a066:	461a      	mov	r2, r3
    a068:	687b      	ldr	r3, [r7, #4]
    a06a:	671a      	str	r2, [r3, #112]
        if (ang > M_PI)
    a06c:	687b      	ldr	r3, [r7, #4]
    a06e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a072:	4610      	mov	r0, r2
    a074:	4619      	mov	r1, r3
    a076:	a232      	add	r2, pc, #200	(adr r2, a140 <_ZN9Odometrie6updateEv+0x46c>)
    a078:	ca0c      	ldmia	r2!, {r2, r3}
    a07a:	f010 fd6b 	bl	1ab54 <__aeabi_dcmpgt>
    a07e:	4603      	mov	r3, r0
    a080:	2b00      	cmp	r3, #0
    a082:	d00e      	beq.n	a0a2 <_ZN9Odometrie6updateEv+0x3ce>
            ang -= 2.0*M_PI;
    a084:	687b      	ldr	r3, [r7, #4]
    a086:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a08a:	4610      	mov	r0, r2
    a08c:	4619      	mov	r1, r3
    a08e:	a22e      	add	r2, pc, #184	(adr r2, a148 <_ZN9Odometrie6updateEv+0x474>)
    a090:	ca0c      	ldmia	r2!, {r2, r3}
    a092:	f010 f91d 	bl	1a2d0 <__aeabi_dsub>
    a096:	4602      	mov	r2, r0
    a098:	460b      	mov	r3, r1
    a09a:	6879      	ldr	r1, [r7, #4]
    a09c:	e9c1 231a 	strd	r2, r3, [r1, #104]
    a0a0:	e019      	b.n	a0d6 <_ZN9Odometrie6updateEv+0x402>
        else if (ang < -M_PI)
    a0a2:	687b      	ldr	r3, [r7, #4]
    a0a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a0a8:	4610      	mov	r0, r2
    a0aa:	4619      	mov	r1, r3
    a0ac:	a228      	add	r2, pc, #160	(adr r2, a150 <_ZN9Odometrie6updateEv+0x47c>)
    a0ae:	ca0c      	ldmia	r2!, {r2, r3}
    a0b0:	f010 fd32 	bl	1ab18 <__aeabi_dcmplt>
    a0b4:	4603      	mov	r3, r0
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d00d      	beq.n	a0d6 <_ZN9Odometrie6updateEv+0x402>
            ang += 2.0*M_PI;
    a0ba:	687b      	ldr	r3, [r7, #4]
    a0bc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a0c0:	4610      	mov	r0, r2
    a0c2:	4619      	mov	r1, r3
    a0c4:	a220      	add	r2, pc, #128	(adr r2, a148 <_ZN9Odometrie6updateEv+0x474>)
    a0c6:	ca0c      	ldmia	r2!, {r2, r3}
    a0c8:	f010 f904 	bl	1a2d4 <__adddf3>
    a0cc:	4602      	mov	r2, r0
    a0ce:	460b      	mov	r3, r1
    a0d0:	6879      	ldr	r1, [r7, #4]
    a0d2:	e9c1 231a 	strd	r2, r3, [r1, #104]
    }

    positionPlusAngle.setAngle(ang);
    a0d6:	687b      	ldr	r3, [r7, #4]
    a0d8:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a0e2:	4610      	mov	r0, r2
    a0e4:	4619      	mov	r1, r3
    a0e6:	f010 fd67 	bl	1abb8 <__aeabi_d2f>
    a0ea:	4603      	mov	r3, r0
    a0ec:	4620      	mov	r0, r4
    a0ee:	4619      	mov	r1, r3
    a0f0:	f004 fe9a 	bl	ee28 <_ZN17PositionPlusAngle8setAngleEf>
    positionPlusAngle.setX(posX);
    a0f4:	687b      	ldr	r3, [r7, #4]
    a0f6:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a0fa:	687b      	ldr	r3, [r7, #4]
    a0fc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]
    a100:	4610      	mov	r0, r2
    a102:	4619      	mov	r1, r3
    a104:	f010 fd58 	bl	1abb8 <__aeabi_d2f>
    a108:	4603      	mov	r3, r0
    a10a:	4620      	mov	r0, r4
    a10c:	4619      	mov	r1, r3
    a10e:	f004 fea7 	bl	ee60 <_ZN17PositionPlusAngle4setXEf>
    positionPlusAngle.setY(posY);
    a112:	687b      	ldr	r3, [r7, #4]
    a114:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]
    a11e:	4610      	mov	r0, r2
    a120:	4619      	mov	r1, r3
    a122:	f010 fd49 	bl	1abb8 <__aeabi_d2f>
    a126:	4603      	mov	r3, r0
    a128:	4620      	mov	r0, r4
    a12a:	4619      	mov	r1, r3
    a12c:	f004 fe8a 	bl	ee44 <_ZN17PositionPlusAngle4setYEf>

}
    a130:	f107 0750 	add.w	r7, r7, #80	; 0x50
    a134:	46bd      	mov	sp, r7
    a136:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    a13a:	46c0      	nop			(mov r8, r8)
    a13c:	46c0      	nop			(mov r8, r8)
    a13e:	46c0      	nop			(mov r8, r8)
    a140:	54442d18 	.word	0x54442d18
    a144:	400921fb 	.word	0x400921fb
    a148:	54442d18 	.word	0x54442d18
    a14c:	401921fb 	.word	0x401921fb
    a150:	54442d18 	.word	0x54442d18
    a154:	c00921fb 	.word	0xc00921fb

0000a158 <_ZN9OdometrieD1Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    a158:	b580      	push	{r7, lr}
    a15a:	b082      	sub	sp, #8
    a15c:	af00      	add	r7, sp, #0
    a15e:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    a160:	687b      	ldr	r3, [r7, #4]
    a162:	685b      	ldr	r3, [r3, #4]
    a164:	4618      	mov	r0, r3
    a166:	f004 fb45 	bl	e7f4 <_ZdlPv>
    delete roueCodeuseDroite;
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	681b      	ldr	r3, [r3, #0]
    a16e:	4618      	mov	r0, r3
    a170:	f004 fb40 	bl	e7f4 <_ZdlPv>
}
    a174:	687b      	ldr	r3, [r7, #4]
    a176:	4618      	mov	r0, r3
    a178:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a17c:	46bd      	mov	sp, r7
    a17e:	bd80      	pop	{r7, pc}

0000a180 <_ZN9OdometrieD2Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    a180:	b580      	push	{r7, lr}
    a182:	b082      	sub	sp, #8
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    a188:	687b      	ldr	r3, [r7, #4]
    a18a:	685b      	ldr	r3, [r3, #4]
    a18c:	4618      	mov	r0, r3
    a18e:	f004 fb31 	bl	e7f4 <_ZdlPv>
    delete roueCodeuseDroite;
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	4618      	mov	r0, r3
    a198:	f004 fb2c 	bl	e7f4 <_ZdlPv>
}
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	4618      	mov	r0, r3
    a1a0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a1a4:	46bd      	mov	sp, r7
    a1a6:	bd80      	pop	{r7, pc}

0000a1a8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    a1a8:	b580      	push	{r7, lr}
    a1aa:	b086      	sub	sp, #24
    a1ac:	af00      	add	r7, sp, #0
    a1ae:	60f8      	str	r0, [r7, #12]
    a1b0:	60b9      	str	r1, [r7, #8]
    a1b2:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    a1b4:	68fb      	ldr	r3, [r7, #12]
    a1b6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a1ba:	4618      	mov	r0, r3
    a1bc:	f004 ffcc 	bl	f158 <_ZN17PositionPlusAngleC1Ev>
    a1c0:	68f9      	ldr	r1, [r7, #12]
    a1c2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a1ca:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a1ce:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    a1d2:	68fa      	ldr	r2, [r7, #12]
    a1d4:	4b4c      	ldr	r3, [pc, #304]	(a308 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a1d6:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    a1d8:	68fa      	ldr	r2, [r7, #12]
    a1da:	4b4b      	ldr	r3, [pc, #300]	(a308 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a1dc:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    a1de:	68f9      	ldr	r1, [r7, #12]
    a1e0:	a245      	add	r2, pc, #276	(adr r2, a2f8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x150>)
    a1e2:	ca0c      	ldmia	r2!, {r2, r3}
    a1e4:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a1e8:	68f9      	ldr	r1, [r7, #12]
    a1ea:	f04f 0200 	mov.w	r2, #0	; 0x0
    a1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a1f2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a1f6:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a1fa:	68f9      	ldr	r1, [r7, #12]
    a1fc:	f04f 0200 	mov.w	r2, #0	; 0x0
    a200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a204:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a208:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a20c:	68fb      	ldr	r3, [r7, #12]
    a20e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a212:	4610      	mov	r0, r2
    a214:	4619      	mov	r1, r3
    a216:	a23a      	add	r2, pc, #232	(adr r2, a300 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x158>)
    a218:	ca0c      	ldmia	r2!, {r2, r3}
    a21a:	f010 fa0d 	bl	1a638 <__aeabi_dmul>
    a21e:	4602      	mov	r2, r0
    a220:	460b      	mov	r3, r1
    a222:	4610      	mov	r0, r2
    a224:	4619      	mov	r1, r3
    a226:	68fb      	ldr	r3, [r7, #12]
    a228:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a22c:	f010 fb2e 	bl	1a88c <__aeabi_ddiv>
    a230:	4602      	mov	r2, r0
    a232:	460b      	mov	r3, r1
    a234:	68f9      	ldr	r1, [r7, #12]
    a236:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a23a:	68fb      	ldr	r3, [r7, #12]
    a23c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a240:	4610      	mov	r0, r2
    a242:	4619      	mov	r1, r3
    a244:	f04f 0200 	mov.w	r2, #0	; 0x0
    a248:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a24c:	f010 f9f4 	bl	1a638 <__aeabi_dmul>
    a250:	4602      	mov	r2, r0
    a252:	460b      	mov	r3, r1
    a254:	4610      	mov	r0, r2
    a256:	4619      	mov	r1, r3
    a258:	68fb      	ldr	r3, [r7, #12]
    a25a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a25e:	f010 fb15 	bl	1a88c <__aeabi_ddiv>
    a262:	4602      	mov	r2, r0
    a264:	460b      	mov	r3, r1
    a266:	68f9      	ldr	r1, [r7, #12]
    a268:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a26c:	f04f 0300 	mov.w	r3, #0	; 0x0
    a270:	617b      	str	r3, [r7, #20]
    a272:	e017      	b.n	a2a4 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a274:	697b      	ldr	r3, [r7, #20]
    a276:	68fa      	ldr	r2, [r7, #12]
    a278:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a27c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a280:	4413      	add	r3, r2
    a282:	f04f 0200 	mov.w	r2, #0	; 0x0
    a286:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a288:	697b      	ldr	r3, [r7, #20]
    a28a:	68fa      	ldr	r2, [r7, #12]
    a28c:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a290:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a294:	4413      	add	r3, r2
    a296:	f04f 0200 	mov.w	r2, #0	; 0x0
    a29a:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a29c:	697b      	ldr	r3, [r7, #20]
    a29e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a2a2:	617b      	str	r3, [r7, #20]
    a2a4:	697b      	ldr	r3, [r7, #20]
    a2a6:	2b01      	cmp	r3, #1
    a2a8:	dde4      	ble.n	a274 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a2aa:	68fa      	ldr	r2, [r7, #12]
    a2ac:	68bb      	ldr	r3, [r7, #8]
    a2ae:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a2b0:	68fa      	ldr	r2, [r7, #12]
    a2b2:	687b      	ldr	r3, [r7, #4]
    a2b4:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a2b6:	4a15      	ldr	r2, [pc, #84]	(a30c <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x164>)
    a2b8:	68fb      	ldr	r3, [r7, #12]
    a2ba:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a2bc:	68f9      	ldr	r1, [r7, #12]
    a2be:	f04f 0200 	mov.w	r2, #0	; 0x0
    a2c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a2c6:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a2ca:	68f9      	ldr	r1, [r7, #12]
    a2cc:	f04f 0200 	mov.w	r2, #0	; 0x0
    a2d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    a2d4:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a2d8:	68f9      	ldr	r1, [r7, #12]
    a2da:	f04f 0200 	mov.w	r2, #0	; 0x0
    a2de:	f04f 0300 	mov.w	r3, #0	; 0x0
    a2e2:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a2e6:	68fa      	ldr	r2, [r7, #12]
    a2e8:	4b07      	ldr	r3, [pc, #28]	(a308 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a2ea:	6713      	str	r3, [r2, #112]

}
    a2ec:	68fb      	ldr	r3, [r7, #12]
    a2ee:	4618      	mov	r0, r3
    a2f0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a2f4:	46bd      	mov	sp, r7
    a2f6:	bd80      	pop	{r7, pc}
    a2f8:	045fe111 	.word	0x045fe111
    a2fc:	4075908d 	.word	0x4075908d
    a300:	54442d18 	.word	0x54442d18
    a304:	400921fb 	.word	0x400921fb
    a308:	00000000 	.word	0x00000000
    a30c:	20000578 	.word	0x20000578

0000a310 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    a310:	b580      	push	{r7, lr}
    a312:	b086      	sub	sp, #24
    a314:	af00      	add	r7, sp, #0
    a316:	60f8      	str	r0, [r7, #12]
    a318:	60b9      	str	r1, [r7, #8]
    a31a:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    a31c:	68fb      	ldr	r3, [r7, #12]
    a31e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a322:	4618      	mov	r0, r3
    a324:	f004 ff18 	bl	f158 <_ZN17PositionPlusAngleC1Ev>
    a328:	68f9      	ldr	r1, [r7, #12]
    a32a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a32e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a332:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a336:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    a33a:	68fa      	ldr	r2, [r7, #12]
    a33c:	4b4c      	ldr	r3, [pc, #304]	(a470 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a33e:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    a340:	68fa      	ldr	r2, [r7, #12]
    a342:	4b4b      	ldr	r3, [pc, #300]	(a470 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a344:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    a346:	68f9      	ldr	r1, [r7, #12]
    a348:	a245      	add	r2, pc, #276	(adr r2, a460 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x150>)
    a34a:	ca0c      	ldmia	r2!, {r2, r3}
    a34c:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a350:	68f9      	ldr	r1, [r7, #12]
    a352:	f04f 0200 	mov.w	r2, #0	; 0x0
    a356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a35a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a35e:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a362:	68f9      	ldr	r1, [r7, #12]
    a364:	f04f 0200 	mov.w	r2, #0	; 0x0
    a368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a36c:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a370:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a37a:	4610      	mov	r0, r2
    a37c:	4619      	mov	r1, r3
    a37e:	a23a      	add	r2, pc, #232	(adr r2, a468 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x158>)
    a380:	ca0c      	ldmia	r2!, {r2, r3}
    a382:	f010 f959 	bl	1a638 <__aeabi_dmul>
    a386:	4602      	mov	r2, r0
    a388:	460b      	mov	r3, r1
    a38a:	4610      	mov	r0, r2
    a38c:	4619      	mov	r1, r3
    a38e:	68fb      	ldr	r3, [r7, #12]
    a390:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a394:	f010 fa7a 	bl	1a88c <__aeabi_ddiv>
    a398:	4602      	mov	r2, r0
    a39a:	460b      	mov	r3, r1
    a39c:	68f9      	ldr	r1, [r7, #12]
    a39e:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a3a2:	68fb      	ldr	r3, [r7, #12]
    a3a4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a3a8:	4610      	mov	r0, r2
    a3aa:	4619      	mov	r1, r3
    a3ac:	f04f 0200 	mov.w	r2, #0	; 0x0
    a3b0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a3b4:	f010 f940 	bl	1a638 <__aeabi_dmul>
    a3b8:	4602      	mov	r2, r0
    a3ba:	460b      	mov	r3, r1
    a3bc:	4610      	mov	r0, r2
    a3be:	4619      	mov	r1, r3
    a3c0:	68fb      	ldr	r3, [r7, #12]
    a3c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a3c6:	f010 fa61 	bl	1a88c <__aeabi_ddiv>
    a3ca:	4602      	mov	r2, r0
    a3cc:	460b      	mov	r3, r1
    a3ce:	68f9      	ldr	r1, [r7, #12]
    a3d0:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a3d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    a3d8:	617b      	str	r3, [r7, #20]
    a3da:	e017      	b.n	a40c <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a3dc:	697b      	ldr	r3, [r7, #20]
    a3de:	68fa      	ldr	r2, [r7, #12]
    a3e0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a3e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a3e8:	4413      	add	r3, r2
    a3ea:	f04f 0200 	mov.w	r2, #0	; 0x0
    a3ee:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a3f0:	697b      	ldr	r3, [r7, #20]
    a3f2:	68fa      	ldr	r2, [r7, #12]
    a3f4:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a3f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a3fc:	4413      	add	r3, r2
    a3fe:	f04f 0200 	mov.w	r2, #0	; 0x0
    a402:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a404:	697b      	ldr	r3, [r7, #20]
    a406:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a40a:	617b      	str	r3, [r7, #20]
    a40c:	697b      	ldr	r3, [r7, #20]
    a40e:	2b01      	cmp	r3, #1
    a410:	dde4      	ble.n	a3dc <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a412:	68fa      	ldr	r2, [r7, #12]
    a414:	68bb      	ldr	r3, [r7, #8]
    a416:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a418:	68fa      	ldr	r2, [r7, #12]
    a41a:	687b      	ldr	r3, [r7, #4]
    a41c:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a41e:	4a15      	ldr	r2, [pc, #84]	(a474 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x164>)
    a420:	68fb      	ldr	r3, [r7, #12]
    a422:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a424:	68f9      	ldr	r1, [r7, #12]
    a426:	f04f 0200 	mov.w	r2, #0	; 0x0
    a42a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a42e:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a432:	68f9      	ldr	r1, [r7, #12]
    a434:	f04f 0200 	mov.w	r2, #0	; 0x0
    a438:	f04f 0300 	mov.w	r3, #0	; 0x0
    a43c:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a440:	68f9      	ldr	r1, [r7, #12]
    a442:	f04f 0200 	mov.w	r2, #0	; 0x0
    a446:	f04f 0300 	mov.w	r3, #0	; 0x0
    a44a:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a44e:	68fa      	ldr	r2, [r7, #12]
    a450:	4b07      	ldr	r3, [pc, #28]	(a470 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a452:	6713      	str	r3, [r2, #112]

}
    a454:	68fb      	ldr	r3, [r7, #12]
    a456:	4618      	mov	r0, r3
    a458:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a45c:	46bd      	mov	sp, r7
    a45e:	bd80      	pop	{r7, pc}
    a460:	045fe111 	.word	0x045fe111
    a464:	4075908d 	.word	0x4075908d
    a468:	54442d18 	.word	0x54442d18
    a46c:	400921fb 	.word	0x400921fb
    a470:	00000000 	.word	0x00000000
    a474:	20000578 	.word	0x20000578

0000a478 <_ZN14PIDFilterAngleC2Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a478:	b480      	push	{r7}
    a47a:	b083      	sub	sp, #12
    a47c:	af00      	add	r7, sp, #0
    a47e:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a480:	687a      	ldr	r2, [r7, #4]
    a482:	4b06      	ldr	r3, [pc, #24]	(a49c <_ZN14PIDFilterAngleC2Ev+0x24>)
    a484:	6013      	str	r3, [r2, #0]
    a486:	687a      	ldr	r2, [r7, #4]
    a488:	4b04      	ldr	r3, [pc, #16]	(a49c <_ZN14PIDFilterAngleC2Ev+0x24>)
    a48a:	6053      	str	r3, [r2, #4]
{
}
    a48c:	687b      	ldr	r3, [r7, #4]
    a48e:	4618      	mov	r0, r3
    a490:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a494:	46bd      	mov	sp, r7
    a496:	bc80      	pop	{r7}
    a498:	4770      	bx	lr
    a49a:	46c0      	nop			(mov r8, r8)
    a49c:	00000000 	.word	0x00000000

0000a4a0 <_ZN14PIDFilterAngleC1Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a4a0:	b480      	push	{r7}
    a4a2:	b083      	sub	sp, #12
    a4a4:	af00      	add	r7, sp, #0
    a4a6:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a4a8:	687a      	ldr	r2, [r7, #4]
    a4aa:	4b06      	ldr	r3, [pc, #24]	(a4c4 <_ZN14PIDFilterAngleC1Ev+0x24>)
    a4ac:	6013      	str	r3, [r2, #0]
    a4ae:	687a      	ldr	r2, [r7, #4]
    a4b0:	4b04      	ldr	r3, [pc, #16]	(a4c4 <_ZN14PIDFilterAngleC1Ev+0x24>)
    a4b2:	6053      	str	r3, [r2, #4]
{
}
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	4618      	mov	r0, r3
    a4b8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a4bc:	46bd      	mov	sp, r7
    a4be:	bc80      	pop	{r7}
    a4c0:	4770      	bx	lr
    a4c2:	46c0      	nop			(mov r8, r8)
    a4c4:	00000000 	.word	0x00000000

0000a4c8 <_ZN14PIDFilterAngle16getFilteredValueEf>:

float PIDFilterAngle::getFilteredValue(Angle erreur){
    a4c8:	b590      	push	{r4, r7, lr}
    a4ca:	b087      	sub	sp, #28
    a4cc:	af00      	add	r7, sp, #0
    a4ce:	6078      	str	r0, [r7, #4]
    a4d0:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_ANGLE_COEF+erreur;
    a4d2:	687b      	ldr	r3, [r7, #4]
    a4d4:	681b      	ldr	r3, [r3, #0]
    a4d6:	4618      	mov	r0, r3
    a4d8:	6839      	ldr	r1, [r7, #0]
    a4da:	f010 fbc3 	bl	1ac64 <__addsf3>
    a4de:	4603      	mov	r3, r0
    a4e0:	461a      	mov	r2, r3
    a4e2:	687b      	ldr	r3, [r7, #4]
    a4e4:	601a      	str	r2, [r3, #0]
    Angle proportionnel = erreur;
    a4e6:	683b      	ldr	r3, [r7, #0]
    a4e8:	60fb      	str	r3, [r7, #12]
    Angle integrale = sommeErreurs;
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	681b      	ldr	r3, [r3, #0]
    a4ee:	613b      	str	r3, [r7, #16]
    Angle derivee = erreur - erreurPrecedente;
    a4f0:	687b      	ldr	r3, [r7, #4]
    a4f2:	685b      	ldr	r3, [r3, #4]
    a4f4:	6838      	ldr	r0, [r7, #0]
    a4f6:	4619      	mov	r1, r3
    a4f8:	f010 fbb2 	bl	1ac60 <__aeabi_fsub>
    a4fc:	4603      	mov	r3, r0
    a4fe:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a500:	687a      	ldr	r2, [r7, #4]
    a502:	683b      	ldr	r3, [r7, #0]
    a504:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a506:	68f8      	ldr	r0, [r7, #12]
    a508:	490f      	ldr	r1, [pc, #60]	(a548 <_ZN14PIDFilterAngle16getFilteredValueEf+0x80>)
    a50a:	f010 fcb3 	bl	1ae74 <__aeabi_fmul>
    a50e:	4603      	mov	r3, r0
    a510:	461c      	mov	r4, r3
    a512:	6938      	ldr	r0, [r7, #16]
    a514:	490d      	ldr	r1, [pc, #52]	(a54c <_ZN14PIDFilterAngle16getFilteredValueEf+0x84>)
    a516:	f010 fcad 	bl	1ae74 <__aeabi_fmul>
    a51a:	4603      	mov	r3, r0
    a51c:	4620      	mov	r0, r4
    a51e:	4619      	mov	r1, r3
    a520:	f010 fba0 	bl	1ac64 <__addsf3>
    a524:	4603      	mov	r3, r0
    a526:	461c      	mov	r4, r3
    a528:	6978      	ldr	r0, [r7, #20]
    a52a:	4909      	ldr	r1, [pc, #36]	(a550 <_ZN14PIDFilterAngle16getFilteredValueEf+0x88>)
    a52c:	f010 fca2 	bl	1ae74 <__aeabi_fmul>
    a530:	4603      	mov	r3, r0
    a532:	4620      	mov	r0, r4
    a534:	4619      	mov	r1, r3
    a536:	f010 fb95 	bl	1ac64 <__addsf3>
    a53a:	4603      	mov	r3, r0
}
    a53c:	4618      	mov	r0, r3
    a53e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a542:	46bd      	mov	sp, r7
    a544:	bd90      	pop	{r4, r7, pc}
    a546:	46c0      	nop			(mov r8, r8)
    a548:	42960000 	.word	0x42960000
    a54c:	3f333333 	.word	0x3f333333
    a550:	3f000000 	.word	0x3f000000

0000a554 <_ZN17PIDFilterDistanceC2Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a554:	b480      	push	{r7}
    a556:	b083      	sub	sp, #12
    a558:	af00      	add	r7, sp, #0
    a55a:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a55c:	687a      	ldr	r2, [r7, #4]
    a55e:	4b06      	ldr	r3, [pc, #24]	(a578 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a560:	6013      	str	r3, [r2, #0]
    a562:	687a      	ldr	r2, [r7, #4]
    a564:	4b04      	ldr	r3, [pc, #16]	(a578 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a566:	6053      	str	r3, [r2, #4]
{
}
    a568:	687b      	ldr	r3, [r7, #4]
    a56a:	4618      	mov	r0, r3
    a56c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a570:	46bd      	mov	sp, r7
    a572:	bc80      	pop	{r7}
    a574:	4770      	bx	lr
    a576:	46c0      	nop			(mov r8, r8)
    a578:	00000000 	.word	0x00000000

0000a57c <_ZN17PIDFilterDistanceC1Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a57c:	b480      	push	{r7}
    a57e:	b083      	sub	sp, #12
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a584:	687a      	ldr	r2, [r7, #4]
    a586:	4b06      	ldr	r3, [pc, #24]	(a5a0 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a588:	6013      	str	r3, [r2, #0]
    a58a:	687a      	ldr	r2, [r7, #4]
    a58c:	4b04      	ldr	r3, [pc, #16]	(a5a0 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a58e:	6053      	str	r3, [r2, #4]
{
}
    a590:	687b      	ldr	r3, [r7, #4]
    a592:	4618      	mov	r0, r3
    a594:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a598:	46bd      	mov	sp, r7
    a59a:	bc80      	pop	{r7}
    a59c:	4770      	bx	lr
    a59e:	46c0      	nop			(mov r8, r8)
    a5a0:	00000000 	.word	0x00000000

0000a5a4 <_ZN17PIDFilterDistance16getFilteredValueEf>:

float PIDFilterDistance::getFilteredValue(Distance erreur){
    a5a4:	b590      	push	{r4, r7, lr}
    a5a6:	b087      	sub	sp, #28
    a5a8:	af00      	add	r7, sp, #0
    a5aa:	6078      	str	r0, [r7, #4]
    a5ac:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_LINEAIRE_COEF+erreur;
    a5ae:	687b      	ldr	r3, [r7, #4]
    a5b0:	681b      	ldr	r3, [r3, #0]
    a5b2:	4618      	mov	r0, r3
    a5b4:	6839      	ldr	r1, [r7, #0]
    a5b6:	f010 fb55 	bl	1ac64 <__addsf3>
    a5ba:	4603      	mov	r3, r0
    a5bc:	461a      	mov	r2, r3
    a5be:	687b      	ldr	r3, [r7, #4]
    a5c0:	601a      	str	r2, [r3, #0]
    Distance proportionnel = erreur;
    a5c2:	683b      	ldr	r3, [r7, #0]
    a5c4:	60fb      	str	r3, [r7, #12]
    Distance integrale = sommeErreurs;
    a5c6:	687b      	ldr	r3, [r7, #4]
    a5c8:	681b      	ldr	r3, [r3, #0]
    a5ca:	613b      	str	r3, [r7, #16]
    Distance derivee = erreur - erreurPrecedente;
    a5cc:	687b      	ldr	r3, [r7, #4]
    a5ce:	685b      	ldr	r3, [r3, #4]
    a5d0:	6838      	ldr	r0, [r7, #0]
    a5d2:	4619      	mov	r1, r3
    a5d4:	f010 fb44 	bl	1ac60 <__aeabi_fsub>
    a5d8:	4603      	mov	r3, r0
    a5da:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a5dc:	687a      	ldr	r2, [r7, #4]
    a5de:	683b      	ldr	r3, [r7, #0]
    a5e0:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a5e2:	68f8      	ldr	r0, [r7, #12]
    a5e4:	490f      	ldr	r1, [pc, #60]	(a624 <_ZN17PIDFilterDistance16getFilteredValueEf+0x80>)
    a5e6:	f010 fc45 	bl	1ae74 <__aeabi_fmul>
    a5ea:	4603      	mov	r3, r0
    a5ec:	461c      	mov	r4, r3
    a5ee:	6938      	ldr	r0, [r7, #16]
    a5f0:	490d      	ldr	r1, [pc, #52]	(a628 <_ZN17PIDFilterDistance16getFilteredValueEf+0x84>)
    a5f2:	f010 fc3f 	bl	1ae74 <__aeabi_fmul>
    a5f6:	4603      	mov	r3, r0
    a5f8:	4620      	mov	r0, r4
    a5fa:	4619      	mov	r1, r3
    a5fc:	f010 fb32 	bl	1ac64 <__addsf3>
    a600:	4603      	mov	r3, r0
    a602:	461c      	mov	r4, r3
    a604:	6978      	ldr	r0, [r7, #20]
    a606:	4909      	ldr	r1, [pc, #36]	(a62c <_ZN17PIDFilterDistance16getFilteredValueEf+0x88>)
    a608:	f010 fc34 	bl	1ae74 <__aeabi_fmul>
    a60c:	4603      	mov	r3, r0
    a60e:	4620      	mov	r0, r4
    a610:	4619      	mov	r1, r3
    a612:	f010 fb27 	bl	1ac64 <__addsf3>
    a616:	4603      	mov	r3, r0
}
    a618:	4618      	mov	r0, r3
    a61a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a61e:	46bd      	mov	sp, r7
    a620:	bd90      	pop	{r4, r7, pc}
    a622:	46c0      	nop			(mov r8, r8)
    a624:	3e4ccccd 	.word	0x3e4ccccd
    a628:	3ba3d70a 	.word	0x3ba3d70a
    a62c:	3f333333 	.word	0x3f333333

0000a630 <_ZN5Debug3runEv>:
//#include "krabipacket.h"

// DMA
#define ADC3_DR_ADDRESS     ((uint32_t)0x4001224C)

void Debug::run()
    a630:	b480      	push	{r7}
    a632:	af00      	add	r7, sp, #0
{
    // test run
}
    a634:	46bd      	mov	sp, r7
    a636:	bc80      	pop	{r7}
    a638:	4770      	bx	lr
    a63a:	46c0      	nop			(mov r8, r8)

0000a63c <_ZN5Debug27__ADCSampleF4_adc_configureEv>:
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    }
}

void Debug::__ADCSampleF4_adc_configure()
    a63c:	b480      	push	{r7}
    a63e:	af00      	add	r7, sp, #0
    //Enable ADC conversion
    ADC_Cmd(ADC1,ENABLE);
    //Select the channel to be read from
    ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
#endif
}
    a640:	46bd      	mov	sp, r7
    a642:	bc80      	pop	{r7}
    a644:	4770      	bx	lr
    a646:	46c0      	nop			(mov r8, r8)

0000a648 <_ZN5Debug25__ADCSampleF4_adc_convertEv>:

int Debug::__ADCSampleF4_adc_convert(){
    a648:	b480      	push	{r7}
    a64a:	b083      	sub	sp, #12
    a64c:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx)
    ADC_SoftwareStartConv(ADC1);//Start the conversion
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}
    a64e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a652:	46bd      	mov	sp, r7
    a654:	bc80      	pop	{r7}
    a656:	4770      	bx	lr

0000a658 <_ZN5Debug15testADCSampleF4Ev>:
}

/**
    @brief Read the PC0 pin
*/
void Debug::testADCSampleF4()
    a658:	b580      	push	{r7, lr}
    a65a:	b082      	sub	sp, #8
    a65c:	af00      	add	r7, sp, #0
{
    __ADCSampleF4_adc_configure();//Start configuration
    a65e:	f7ff ffed 	bl	a63c <_ZN5Debug27__ADCSampleF4_adc_configureEv>

    int convertedValue = -1;
    a662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a666:	607b      	str	r3, [r7, #4]
    while(true)
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    a668:	f7ff ffee 	bl	a648 <_ZN5Debug25__ADCSampleF4_adc_convertEv>
    a66c:	4603      	mov	r3, r0
    a66e:	607b      	str	r3, [r7, #4]
    a670:	e7fa      	b.n	a668 <_ZN5Debug15testADCSampleF4Ev+0x10>
    a672:	46c0      	nop			(mov r8, r8)

0000a674 <_ZN5Debug10testSharpsEv>:
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}

void Debug::testSharps()
    a674:	b480      	push	{r7}
    a676:	af00      	add	r7, sp, #0
        for (int i = 0; i < 1000; i++)
        {
        }*/
  //  }

}
    a678:	46bd      	mov	sp, r7
    a67a:	bc80      	pop	{r7}
    a67c:	4770      	bx	lr
    a67e:	46c0      	nop			(mov r8, r8)

0000a680 <_ZN5Debug19testADC_DMASampleF4Ev>:


//__IO uint32_t ADC3ConvertedValue[4];
__IO uint16_t ADC3ConvertedValueN = 0;

void Debug::testADC_DMASampleF4()
    a680:	b480      	push	{r7}
    a682:	af00      	add	r7, sp, #0
    while(true)
    {
        convertedValue = ADC3ConvertedValueN;//Read the ADC converted value
    }
#endif
}
    a684:	46bd      	mov	sp, r7
    a686:	bc80      	pop	{r7}
    a688:	4770      	bx	lr
    a68a:	46c0      	nop			(mov r8, r8)

0000a68c <_ZN5Debug22__ADC_DMASampleF4_initEv>:

void Debug::__ADC_DMASampleF4_init(void)
    a68c:	b480      	push	{r7}
    a68e:	af00      	add	r7, sp, #0
    ADC_DMACmd(ADC3, ENABLE);

    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}
    a690:	46bd      	mov	sp, r7
    a692:	bc80      	pop	{r7}
    a694:	4770      	bx	lr
    a696:	46c0      	nop			(mov r8, r8)

0000a698 <_ZN5Debug10testRemoteEv>:
        else
            Led::setOn(0);
    }
}

void Debug::testRemote()
    a698:	b580      	push	{r7, lr}
    a69a:	b082      	sub	sp, #8
    a69c:	af00      	add	r7, sp, #0
{
    Remote::getSingleton();
    a69e:	f002 fb9f 	bl	cde0 <_ZN6Remote12getSingletonEv>
//    packet.add(6);
//    packet.add(2048);

//    Remote::getSingleton()->sendData(&packet);

    int timer = 0;
    a6a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6a6:	607b      	str	r3, [r7, #4]
    while(true)
    {
        if (Remote::getSingleton()->dataAvailable()) {
    a6a8:	f002 fb9a 	bl	cde0 <_ZN6Remote12getSingletonEv>
    a6ac:	4603      	mov	r3, r0
    a6ae:	4618      	mov	r0, r3
    a6b0:	f002 fa56 	bl	cb60 <_ZN6Remote13dataAvailableEv>
    a6b4:	4603      	mov	r3, r0
    a6b6:	2b00      	cmp	r3, #0
    a6b8:	d009      	beq.n	a6ce <_ZN5Debug10testRemoteEv+0x36>
            Remote::getSingleton()->receiveData();
    a6ba:	f002 fb91 	bl	cde0 <_ZN6Remote12getSingletonEv>
    a6be:	4603      	mov	r3, r0
    a6c0:	4618      	mov	r0, r3
    a6c2:	f002 fa63 	bl	cb8c <_ZN6Remote11receiveDataEv>
            Led::toggle(0);
    a6c6:	f04f 0000 	mov.w	r0, #0	; 0x0
    a6ca:	f001 fdc1 	bl	c250 <_ZN3Led6toggleEi>
        }

        if (timer==0) {
    a6ce:	687b      	ldr	r3, [r7, #4]
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d10b      	bne.n	a6ec <_ZN5Debug10testRemoteEv+0x54>
            Remote::getSingleton()->sendData('a');
    a6d4:	f002 fb84 	bl	cde0 <_ZN6Remote12getSingletonEv>
    a6d8:	4603      	mov	r3, r0
    a6da:	4618      	mov	r0, r3
    a6dc:	f04f 0161 	mov.w	r1, #97	; 0x61
    a6e0:	f002 fa98 	bl	cc14 <_ZN6Remote8sendDataEi>
            Led::toggle(0);
    a6e4:	f04f 0000 	mov.w	r0, #0	; 0x0
    a6e8:	f001 fdb2 	bl	c250 <_ZN3Led6toggleEi>
        }

        timer++;
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a6f2:	607b      	str	r3, [r7, #4]
        if (timer==1000000)
    a6f4:	687a      	ldr	r2, [r7, #4]
    a6f6:	4b03      	ldr	r3, [pc, #12]	(a704 <_ZN5Debug10testRemoteEv+0x6c>)
    a6f8:	429a      	cmp	r2, r3
    a6fa:	d1d5      	bne.n	a6a8 <_ZN5Debug10testRemoteEv+0x10>
            timer = 0;
    a6fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    a700:	607b      	str	r3, [r7, #4]
    a702:	e7d1      	b.n	a6a8 <_ZN5Debug10testRemoteEv+0x10>
    a704:	000f4240 	.word	0x000f4240

0000a708 <_ZN5Debug11testTiretteEP7Tirette>:

        for(int i=0; i<10000000; i++);
    }*/
}

void Debug::testTirette(Tirette* t)
    a708:	b580      	push	{r7, lr}
    a70a:	b082      	sub	sp, #8
    a70c:	af00      	add	r7, sp, #0
    a70e:	6078      	str	r0, [r7, #4]
{
    while(true)
    {
        if (t->enlevee())
    a710:	6878      	ldr	r0, [r7, #4]
    a712:	f002 ffa9 	bl	d668 <_ZNK7Tirette7enleveeEv>
    a716:	4603      	mov	r3, r0
    a718:	2b00      	cmp	r3, #0
    a71a:	d004      	beq.n	a726 <_ZN5Debug11testTiretteEP7Tirette+0x1e>
            Led::setOff(0);
    a71c:	f04f 0000 	mov.w	r0, #0	; 0x0
    a720:	f001 fd26 	bl	c170 <_ZN3Led6setOffEi>
    a724:	e7f4      	b.n	a710 <_ZN5Debug11testTiretteEP7Tirette+0x8>
        else
            Led::setOn(0);
    a726:	f04f 0000 	mov.w	r0, #0	; 0x0
    a72a:	f001 fd61 	bl	c1f0 <_ZN3Led5setOnEi>
    a72e:	e7ef      	b.n	a710 <_ZN5Debug11testTiretteEP7Tirette+0x8>

0000a730 <_ZN5Debug13testContainerEv>:

        for(int i=0; i<10000000; i++);
    }
}

void Debug::testContainer()
    a730:	b580      	push	{r7, lr}
    a732:	b084      	sub	sp, #16
    a734:	af00      	add	r7, sp, #0
{
    Container::getSingleton();
    a736:	f7fb f869 	bl	580c <_ZN9Container12getSingletonEv>
    BrasLateral::initBrasLateraux();
    a73a:	f7fa ff21 	bl	5580 <_ZN11BrasLateral16initBrasLaterauxEv>

    while(true)
    {
        Container::getSingleton()->open();
    a73e:	f7fb f865 	bl	580c <_ZN9Container12getSingletonEv>
    a742:	4603      	mov	r3, r0
    a744:	4618      	mov	r0, r3
    a746:	f7fb f803 	bl	5750 <_ZN9Container4openEv>
        BrasLateral::getLeft()->expand();
    a74a:	f7fa ffb1 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    a74e:	4603      	mov	r3, r0
    a750:	4618      	mov	r0, r3
    a752:	f7fa fed5 	bl	5500 <_ZN11BrasLateral6expandEv>
        BrasLateral::getRight()->expand();
    a756:	f7fa ff9b 	bl	5690 <_ZN11BrasLateral8getRightEv>
    a75a:	4603      	mov	r3, r0
    a75c:	4618      	mov	r0, r3
    a75e:	f7fa fecf 	bl	5500 <_ZN11BrasLateral6expandEv>
        Led::toggle(0);
    a762:	f04f 0000 	mov.w	r0, #0	; 0x0
    a766:	f001 fd73 	bl	c250 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a76a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a76e:	607b      	str	r3, [r7, #4]
    a770:	e003      	b.n	a77a <_ZN5Debug13testContainerEv+0x4a>
    a772:	687b      	ldr	r3, [r7, #4]
    a774:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a778:	607b      	str	r3, [r7, #4]
    a77a:	687a      	ldr	r2, [r7, #4]
    a77c:	4b20      	ldr	r3, [pc, #128]	(a800 <_ZN5Debug13testContainerEv+0xd0>)
    a77e:	429a      	cmp	r2, r3
    a780:	ddf7      	ble.n	a772 <_ZN5Debug13testContainerEv+0x42>

        BrasLateral::getLeft()->front();
    a782:	f7fa ff95 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    a786:	4603      	mov	r3, r0
    a788:	4618      	mov	r0, r3
    a78a:	f7fa fe99 	bl	54c0 <_ZN11BrasLateral5frontEv>
        BrasLateral::getRight()->front();
    a78e:	f7fa ff7f 	bl	5690 <_ZN11BrasLateral8getRightEv>
    a792:	4603      	mov	r3, r0
    a794:	4618      	mov	r0, r3
    a796:	f7fa fe93 	bl	54c0 <_ZN11BrasLateral5frontEv>
        Led::toggle(0);
    a79a:	f04f 0000 	mov.w	r0, #0	; 0x0
    a79e:	f001 fd57 	bl	c250 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a7a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a7a6:	60bb      	str	r3, [r7, #8]
    a7a8:	e003      	b.n	a7b2 <_ZN5Debug13testContainerEv+0x82>
    a7aa:	68bb      	ldr	r3, [r7, #8]
    a7ac:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a7b0:	60bb      	str	r3, [r7, #8]
    a7b2:	68ba      	ldr	r2, [r7, #8]
    a7b4:	4b12      	ldr	r3, [pc, #72]	(a800 <_ZN5Debug13testContainerEv+0xd0>)
    a7b6:	429a      	cmp	r2, r3
    a7b8:	ddf7      	ble.n	a7aa <_ZN5Debug13testContainerEv+0x7a>

        Container::getSingleton()->close();
    a7ba:	f7fb f827 	bl	580c <_ZN9Container12getSingletonEv>
    a7be:	4603      	mov	r3, r0
    a7c0:	4618      	mov	r0, r3
    a7c2:	f7fa ffb5 	bl	5730 <_ZN9Container5closeEv>
        BrasLateral::getLeft()->collapse();
    a7c6:	f7fa ff73 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    a7ca:	4603      	mov	r3, r0
    a7cc:	4618      	mov	r0, r3
    a7ce:	f7fa fe87 	bl	54e0 <_ZN11BrasLateral8collapseEv>
        BrasLateral::getRight()->collapse();
    a7d2:	f7fa ff5d 	bl	5690 <_ZN11BrasLateral8getRightEv>
    a7d6:	4603      	mov	r3, r0
    a7d8:	4618      	mov	r0, r3
    a7da:	f7fa fe81 	bl	54e0 <_ZN11BrasLateral8collapseEv>
        Led::toggle(0);
    a7de:	f04f 0000 	mov.w	r0, #0	; 0x0
    a7e2:	f001 fd35 	bl	c250 <_ZN3Led6toggleEi>

        for(int i=0; i<20000000; i++);
    a7e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a7ea:	60fb      	str	r3, [r7, #12]
    a7ec:	e003      	b.n	a7f6 <_ZN5Debug13testContainerEv+0xc6>
    a7ee:	68fb      	ldr	r3, [r7, #12]
    a7f0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a7f4:	60fb      	str	r3, [r7, #12]
    a7f6:	68fa      	ldr	r2, [r7, #12]
    a7f8:	4b02      	ldr	r3, [pc, #8]	(a804 <_ZN5Debug13testContainerEv+0xd4>)
    a7fa:	429a      	cmp	r2, r3
    a7fc:	ddf7      	ble.n	a7ee <_ZN5Debug13testContainerEv+0xbe>
    a7fe:	e79e      	b.n	a73e <_ZN5Debug13testContainerEv+0xe>
    a800:	0098967f 	.word	0x0098967f
    a804:	01312cff 	.word	0x01312cff

0000a808 <_ZN5Debug16testBrasLaterauxEv>:
        l += rcg->getTickValue();
        for(int i=0; i<1000000; i++);
    }
}

void Debug::testBrasLateraux()
    a808:	b580      	push	{r7, lr}
    a80a:	b082      	sub	sp, #8
    a80c:	af00      	add	r7, sp, #0
        porteDroiteBas->goToAngle(90.0f);
        porteGaucheBas->goToAngle(90.0f);
        for (int i = 0; i < 10000000; i++);
    }*/

    BrasLateral::initBrasLateraux();
    a80e:	f7fa feb7 	bl	5580 <_ZN11BrasLateral16initBrasLaterauxEv>

    while(true)
    {
        BrasLateral::getLeft()->expand();
    a812:	f7fa ff4d 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    a816:	4603      	mov	r3, r0
    a818:	4618      	mov	r0, r3
    a81a:	f7fa fe71 	bl	5500 <_ZN11BrasLateral6expandEv>
        BrasLateral::getRight()->expand();
    a81e:	f7fa ff37 	bl	5690 <_ZN11BrasLateral8getRightEv>
    a822:	4603      	mov	r3, r0
    a824:	4618      	mov	r0, r3
    a826:	f7fa fe6b 	bl	5500 <_ZN11BrasLateral6expandEv>
        Led::toggle(0);
    a82a:	f04f 0000 	mov.w	r0, #0	; 0x0
    a82e:	f001 fd0f 	bl	c250 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a832:	f04f 0300 	mov.w	r3, #0	; 0x0
    a836:	603b      	str	r3, [r7, #0]
    a838:	e003      	b.n	a842 <_ZN5Debug16testBrasLaterauxEv+0x3a>
    a83a:	683b      	ldr	r3, [r7, #0]
    a83c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a840:	603b      	str	r3, [r7, #0]
    a842:	683a      	ldr	r2, [r7, #0]
    a844:	4b0f      	ldr	r3, [pc, #60]	(a884 <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    a846:	429a      	cmp	r2, r3
    a848:	ddf7      	ble.n	a83a <_ZN5Debug16testBrasLaterauxEv+0x32>
        /*BrasLateral::getRight()->front();
        Led::toggle(0);

        for(int i=0; i<10000000; i++);*/

        BrasLateral::getLeft()->collapse();
    a84a:	f7fa ff31 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    a84e:	4603      	mov	r3, r0
    a850:	4618      	mov	r0, r3
    a852:	f7fa fe45 	bl	54e0 <_ZN11BrasLateral8collapseEv>
        BrasLateral::getRight()->collapse();
    a856:	f7fa ff1b 	bl	5690 <_ZN11BrasLateral8getRightEv>
    a85a:	4603      	mov	r3, r0
    a85c:	4618      	mov	r0, r3
    a85e:	f7fa fe3f 	bl	54e0 <_ZN11BrasLateral8collapseEv>
        Led::toggle(0);
    a862:	f04f 0000 	mov.w	r0, #0	; 0x0
    a866:	f001 fcf3 	bl	c250 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a86a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a86e:	607b      	str	r3, [r7, #4]
    a870:	e003      	b.n	a87a <_ZN5Debug16testBrasLaterauxEv+0x72>
    a872:	687b      	ldr	r3, [r7, #4]
    a874:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a878:	607b      	str	r3, [r7, #4]
    a87a:	687a      	ldr	r2, [r7, #4]
    a87c:	4b01      	ldr	r3, [pc, #4]	(a884 <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    a87e:	429a      	cmp	r2, r3
    a880:	ddf7      	ble.n	a872 <_ZN5Debug16testBrasLaterauxEv+0x6a>
    a882:	e7c6      	b.n	a812 <_ZN5Debug16testBrasLaterauxEv+0xa>
    a884:	0098967f 	.word	0x0098967f

0000a888 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_>:
    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}

void Debug::testQuadrature(QuadratureCoderHandler* rcg, QuadratureCoderHandler* rcd)
    a888:	b580      	push	{r7, lr}
    a88a:	b086      	sub	sp, #24
    a88c:	af00      	add	r7, sp, #0
    a88e:	6078      	str	r0, [r7, #4]
    a890:	6039      	str	r1, [r7, #0]
{
    long r = 0, l = 0;
    a892:	f04f 0300 	mov.w	r3, #0	; 0x0
    a896:	60fb      	str	r3, [r7, #12]
    a898:	f04f 0300 	mov.w	r3, #0	; 0x0
    a89c:	613b      	str	r3, [r7, #16]
    while(true)
    {
        r += rcd->getTickValue();
    a89e:	6838      	ldr	r0, [r7, #0]
    a8a0:	f002 f892 	bl	c9c8 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a8a4:	4603      	mov	r3, r0
    a8a6:	b29b      	uxth	r3, r3
    a8a8:	b21a      	sxth	r2, r3
    a8aa:	68fb      	ldr	r3, [r7, #12]
    a8ac:	4413      	add	r3, r2
    a8ae:	60fb      	str	r3, [r7, #12]
        l += rcg->getTickValue();
    a8b0:	6878      	ldr	r0, [r7, #4]
    a8b2:	f002 f889 	bl	c9c8 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a8b6:	4603      	mov	r3, r0
    a8b8:	b29b      	uxth	r3, r3
    a8ba:	b21a      	sxth	r2, r3
    a8bc:	693b      	ldr	r3, [r7, #16]
    a8be:	4413      	add	r3, r2
    a8c0:	613b      	str	r3, [r7, #16]
        for(int i=0; i<1000000; i++);
    a8c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a8c6:	617b      	str	r3, [r7, #20]
    a8c8:	e003      	b.n	a8d2 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x4a>
    a8ca:	697b      	ldr	r3, [r7, #20]
    a8cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a8d0:	617b      	str	r3, [r7, #20]
    a8d2:	697a      	ldr	r2, [r7, #20]
    a8d4:	4b01      	ldr	r3, [pc, #4]	(a8dc <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x54>)
    a8d6:	429a      	cmp	r2, r3
    a8d8:	ddf7      	ble.n	a8ca <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x42>
    a8da:	e7e0      	b.n	a89e <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x16>
    a8dc:	000f423f 	.word	0x000f423f

0000a8e0 <_ZN5Debug15testServoAnalogEv>:
void Debug::run()
{
    // test run
}

void Debug::testServoAnalog()
    a8e0:	b580      	push	{r7, lr}
    a8e2:	b094      	sub	sp, #80
    a8e4:	af02      	add	r7, sp, #8
{
    Timer* timer1 = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    a8e6:	f04f 000c 	mov.w	r0, #12	; 0xc
    a8ea:	f003 fedd 	bl	e6a8 <_Znwj>
    a8ee:	4603      	mov	r3, r0
    a8f0:	603b      	str	r3, [r7, #0]
    a8f2:	683b      	ldr	r3, [r7, #0]
    a8f4:	2b00      	cmp	r3, #0
    a8f6:	d00d      	beq.n	a914 <_ZN5Debug15testServoAnalogEv+0x34>
    a8f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    a8fc:	9300      	str	r3, [sp, #0]
    a8fe:	6838      	ldr	r0, [r7, #0]
    a900:	4955      	ldr	r1, [pc, #340]	(aa58 <_ZN5Debug15testServoAnalogEv+0x178>)
    a902:	f644 6220 	movw	r2, #20000	; 0x4e20
    a906:	f04f 0347 	mov.w	r3, #71	; 0x47
    a90a:	f002 fe41 	bl	d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    a90e:	683b      	ldr	r3, [r7, #0]
    a910:	607b      	str	r3, [r7, #4]
    a912:	e001      	b.n	a918 <_ZN5Debug15testServoAnalogEv+0x38>
    a914:	683b      	ldr	r3, [r7, #0]
    a916:	607b      	str	r3, [r7, #4]
    a918:	687b      	ldr	r3, [r7, #4]
    a91a:	62bb      	str	r3, [r7, #40]
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
    a91c:	484e      	ldr	r0, [pc, #312]	(aa58 <_ZN5Debug15testServoAnalogEv+0x178>)
    a91e:	f04f 0101 	mov.w	r1, #1	; 0x1
    a922:	f7f8 fba7 	bl	3074 <TIM_CtrlPWMOutputs>

    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    a926:	f04f 0014 	mov.w	r0, #20	; 0x14
    a92a:	f003 febd 	bl	e6a8 <_Znwj>
    a92e:	4603      	mov	r3, r0
    a930:	60bb      	str	r3, [r7, #8]
    a932:	68bb      	ldr	r3, [r7, #8]
    a934:	2b00      	cmp	r3, #0
    a936:	d00b      	beq.n	a950 <_ZN5Debug15testServoAnalogEv+0x70>
    a938:	4b48      	ldr	r3, [pc, #288]	(aa5c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a93a:	9300      	str	r3, [sp, #0]
    a93c:	68b8      	ldr	r0, [r7, #8]
    a93e:	6ab9      	ldr	r1, [r7, #40]
    a940:	f04f 0201 	mov.w	r2, #1	; 0x1
    a944:	4b46      	ldr	r3, [pc, #280]	(aa60 <_ZN5Debug15testServoAnalogEv+0x180>)
    a946:	f7fc fcbf 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    a94a:	68bb      	ldr	r3, [r7, #8]
    a94c:	60fb      	str	r3, [r7, #12]
    a94e:	e001      	b.n	a954 <_ZN5Debug15testServoAnalogEv+0x74>
    a950:	68bb      	ldr	r3, [r7, #8]
    a952:	60fb      	str	r3, [r7, #12]
    a954:	68fb      	ldr	r3, [r7, #12]
    a956:	62fb      	str	r3, [r7, #44]
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    a958:	f04f 0014 	mov.w	r0, #20	; 0x14
    a95c:	f003 fea4 	bl	e6a8 <_Znwj>
    a960:	4603      	mov	r3, r0
    a962:	613b      	str	r3, [r7, #16]
    a964:	693b      	ldr	r3, [r7, #16]
    a966:	2b00      	cmp	r3, #0
    a968:	d00b      	beq.n	a982 <_ZN5Debug15testServoAnalogEv+0xa2>
    a96a:	4b3c      	ldr	r3, [pc, #240]	(aa5c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a96c:	9300      	str	r3, [sp, #0]
    a96e:	6938      	ldr	r0, [r7, #16]
    a970:	6ab9      	ldr	r1, [r7, #40]
    a972:	f04f 0202 	mov.w	r2, #2	; 0x2
    a976:	4b3a      	ldr	r3, [pc, #232]	(aa60 <_ZN5Debug15testServoAnalogEv+0x180>)
    a978:	f7fc fca6 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    a97c:	693b      	ldr	r3, [r7, #16]
    a97e:	617b      	str	r3, [r7, #20]
    a980:	e001      	b.n	a986 <_ZN5Debug15testServoAnalogEv+0xa6>
    a982:	693b      	ldr	r3, [r7, #16]
    a984:	617b      	str	r3, [r7, #20]
    a986:	697b      	ldr	r3, [r7, #20]
    a988:	633b      	str	r3, [r7, #48]
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    a98a:	f04f 0014 	mov.w	r0, #20	; 0x14
    a98e:	f003 fe8b 	bl	e6a8 <_Znwj>
    a992:	4603      	mov	r3, r0
    a994:	61bb      	str	r3, [r7, #24]
    a996:	69bb      	ldr	r3, [r7, #24]
    a998:	2b00      	cmp	r3, #0
    a99a:	d00b      	beq.n	a9b4 <_ZN5Debug15testServoAnalogEv+0xd4>
    a99c:	4b2f      	ldr	r3, [pc, #188]	(aa5c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a99e:	9300      	str	r3, [sp, #0]
    a9a0:	69b8      	ldr	r0, [r7, #24]
    a9a2:	6ab9      	ldr	r1, [r7, #40]
    a9a4:	f04f 0203 	mov.w	r2, #3	; 0x3
    a9a8:	4b2d      	ldr	r3, [pc, #180]	(aa60 <_ZN5Debug15testServoAnalogEv+0x180>)
    a9aa:	f7fc fc8d 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    a9ae:	69bb      	ldr	r3, [r7, #24]
    a9b0:	61fb      	str	r3, [r7, #28]
    a9b2:	e001      	b.n	a9b8 <_ZN5Debug15testServoAnalogEv+0xd8>
    a9b4:	69bb      	ldr	r3, [r7, #24]
    a9b6:	61fb      	str	r3, [r7, #28]
    a9b8:	69fb      	ldr	r3, [r7, #28]
    a9ba:	637b      	str	r3, [r7, #52]
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);
    a9bc:	f04f 0014 	mov.w	r0, #20	; 0x14
    a9c0:	f003 fe72 	bl	e6a8 <_Znwj>
    a9c4:	4603      	mov	r3, r0
    a9c6:	623b      	str	r3, [r7, #32]
    a9c8:	6a3b      	ldr	r3, [r7, #32]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d00b      	beq.n	a9e6 <_ZN5Debug15testServoAnalogEv+0x106>
    a9ce:	4b23      	ldr	r3, [pc, #140]	(aa5c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a9d0:	9300      	str	r3, [sp, #0]
    a9d2:	6a38      	ldr	r0, [r7, #32]
    a9d4:	6ab9      	ldr	r1, [r7, #40]
    a9d6:	f04f 0204 	mov.w	r2, #4	; 0x4
    a9da:	4b21      	ldr	r3, [pc, #132]	(aa60 <_ZN5Debug15testServoAnalogEv+0x180>)
    a9dc:	f7fc fc74 	bl	72c8 <_ZN5ServoC1EP5Timerhff>
    a9e0:	6a3b      	ldr	r3, [r7, #32]
    a9e2:	627b      	str	r3, [r7, #36]
    a9e4:	e001      	b.n	a9ea <_ZN5Debug15testServoAnalogEv+0x10a>
    a9e6:	6a3b      	ldr	r3, [r7, #32]
    a9e8:	627b      	str	r3, [r7, #36]
    a9ea:	6a7b      	ldr	r3, [r7, #36]
    a9ec:	63bb      	str	r3, [r7, #56]

    for(int i=0; i<2000; i++)
    a9ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    a9f2:	63fb      	str	r3, [r7, #60]
    a9f4:	e027      	b.n	aa46 <_ZN5Debug15testServoAnalogEv+0x166>
    {
        servo1->goToAngle(70);
    a9f6:	6af8      	ldr	r0, [r7, #44]
    a9f8:	491a      	ldr	r1, [pc, #104]	(aa64 <_ZN5Debug15testServoAnalogEv+0x184>)
    a9fa:	f7fc fbf5 	bl	71e8 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_CLOSED);
        servo3->goToAngle(BALAI_G_CLOSED);
        servo4->goToAngle(BALAI_G_CLOSED);*/
        allumerLED();
    a9fe:	f001 fc4b 	bl	c298 <_Z10allumerLEDv>

        for(int j=0; j<10000000; j++);
    aa02:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa06:	643b      	str	r3, [r7, #64]
    aa08:	e003      	b.n	aa12 <_ZN5Debug15testServoAnalogEv+0x132>
    aa0a:	6c3b      	ldr	r3, [r7, #64]
    aa0c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aa10:	643b      	str	r3, [r7, #64]
    aa12:	6c3a      	ldr	r2, [r7, #64]
    aa14:	4b14      	ldr	r3, [pc, #80]	(aa68 <_ZN5Debug15testServoAnalogEv+0x188>)
    aa16:	429a      	cmp	r2, r3
    aa18:	ddf7      	ble.n	aa0a <_ZN5Debug15testServoAnalogEv+0x12a>

        servo1->goToAngle(165);
    aa1a:	6af8      	ldr	r0, [r7, #44]
    aa1c:	4913      	ldr	r1, [pc, #76]	(aa6c <_ZN5Debug15testServoAnalogEv+0x18c>)
    aa1e:	f7fc fbe3 	bl	71e8 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_OPEN);
        servo3->goToAngle(BALAI_G_OPEN);
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();
    aa22:	f001 fbdd 	bl	c1e0 <_Z11eteindreLEDv>

        for(int j=0; j<10000000; j++);
    aa26:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa2a:	647b      	str	r3, [r7, #68]
    aa2c:	e003      	b.n	aa36 <_ZN5Debug15testServoAnalogEv+0x156>
    aa2e:	6c7b      	ldr	r3, [r7, #68]
    aa30:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aa34:	647b      	str	r3, [r7, #68]
    aa36:	6c7a      	ldr	r2, [r7, #68]
    aa38:	4b0b      	ldr	r3, [pc, #44]	(aa68 <_ZN5Debug15testServoAnalogEv+0x188>)
    aa3a:	429a      	cmp	r2, r3
    aa3c:	ddf7      	ble.n	aa2e <_ZN5Debug15testServoAnalogEv+0x14e>
    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);

    for(int i=0; i<2000; i++)
    aa3e:	6bfb      	ldr	r3, [r7, #60]
    aa40:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aa44:	63fb      	str	r3, [r7, #60]
    aa46:	6bfa      	ldr	r2, [r7, #60]
    aa48:	f240 73cf 	movw	r3, #1999	; 0x7cf
    aa4c:	429a      	cmp	r2, r3
    aa4e:	ddd2      	ble.n	a9f6 <_ZN5Debug15testServoAnalogEv+0x116>
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();

        for(int j=0; j<10000000; j++);
    }
}
    aa50:	f107 0748 	add.w	r7, r7, #72	; 0x48
    aa54:	46bd      	mov	sp, r7
    aa56:	bd80      	pop	{r7, pc}
    aa58:	40012c00 	.word	0x40012c00
    aa5c:	3de147ae 	.word	0x3de147ae
    aa60:	3c23d70a 	.word	0x3c23d70a
    aa64:	428c0000 	.word	0x428c0000
    aa68:	0098967f 	.word	0x0098967f
    aa6c:	43250000 	.word	0x43250000

0000aa70 <_Z21distancePresqueEgalesff>:
#include "distance.h"

#include <math.h>

// On vérifie qu'il y a égalité ou presque entre deux distances
bool distancePresqueEgales(Distance d1, Distance d2)
    aa70:	b580      	push	{r7, lr}
    aa72:	b084      	sub	sp, #16
    aa74:	af00      	add	r7, sp, #0
    aa76:	60f8      	str	r0, [r7, #12]
    aa78:	60b9      	str	r1, [r7, #8]
{
    static const Distance epsilon = 10;
    return (fabs(d1 - d2) < epsilon);
    aa7a:	68f8      	ldr	r0, [r7, #12]
    aa7c:	68b9      	ldr	r1, [r7, #8]
    aa7e:	f010 f8ef 	bl	1ac60 <__aeabi_fsub>
    aa82:	4603      	mov	r3, r0
    aa84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    aa88:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa8c:	71fb      	strb	r3, [r7, #7]
    aa8e:	4610      	mov	r0, r2
    aa90:	4907      	ldr	r1, [pc, #28]	(aab0 <_Z21distancePresqueEgalesff+0x40>)
    aa92:	f010 fb8b 	bl	1b1ac <__aeabi_fcmplt>
    aa96:	4603      	mov	r3, r0
    aa98:	2b00      	cmp	r3, #0
    aa9a:	d002      	beq.n	aaa2 <_Z21distancePresqueEgalesff+0x32>
    aa9c:	f04f 0301 	mov.w	r3, #1	; 0x1
    aaa0:	71fb      	strb	r3, [r7, #7]
    aaa2:	79fb      	ldrb	r3, [r7, #7]
}
    aaa4:	4618      	mov	r0, r3
    aaa6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    aaaa:	46bd      	mov	sp, r7
    aaac:	bd80      	pop	{r7, pc}
    aaae:	46c0      	nop			(mov r8, r8)
    aab0:	41200000 	.word	0x41200000

0000aab4 <_ZN12AnalogSensor18conversionFinishedEv>:
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    #endif
}

bool AnalogSensor::conversionFinished()
    aab4:	b580      	push	{r7, lr}
    aab6:	af00      	add	r7, sp, #0
   //return DMA_GetFlagStatus(DMA1_Stream1, DMA_FLAG_TCIF1);//I have no idea what I am doing
    //TOBECONTINUED
    #ifdef STM32F40_41xxx
        return true;
    #else
        return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    aab8:	f04f 0002 	mov.w	r0, #2	; 0x2
    aabc:	f7f6 fba0 	bl	1200 <DMA_GetFlagStatus>
    aac0:	4603      	mov	r3, r0
    aac2:	2b00      	cmp	r3, #0
    aac4:	bf0c      	ite	eq
    aac6:	2300      	moveq	r3, #0
    aac8:	2301      	movne	r3, #1
    aaca:	b2db      	uxtb	r3, r3
    #endif
}
    aacc:	4618      	mov	r0, r3
    aace:	46bd      	mov	sp, r7
    aad0:	bd80      	pop	{r7, pc}
    aad2:	46c0      	nop			(mov r8, r8)

0000aad4 <_ZN12AnalogSensor15startConversionEv>:
        DMA_Cmd(DMA1_Channel1, ENABLE);
        return data;
    #endif
}

void AnalogSensor::startConversion()
    aad4:	b580      	push	{r7, lr}
    aad6:	af00      	add	r7, sp, #0
{
    #ifdef STM32F40_41xxx
        ADC_SoftwareStartConv(ADC1);
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    aad8:	4803      	ldr	r0, [pc, #12]	(aae8 <_ZN12AnalogSensor15startConversionEv+0x14>)
    aada:	f04f 0101 	mov.w	r1, #1	; 0x1
    aade:	f7f5 fddb 	bl	698 <ADC_SoftwareStartConvCmd>
    #endif
}
    aae2:	46bd      	mov	sp, r7
    aae4:	bd80      	pop	{r7, pc}
    aae6:	46c0      	nop			(mov r8, r8)
    aae8:	40012400 	.word	0x40012400

0000aaec <_ZN12AnalogSensor14initialiserADCEhPh>:
{
}

#ifdef ROBOTHW // pour le vrai robot

DMA_MEMORY_TYPE* AnalogSensor::initialiserADC(uint8_t nbChannel, uint8_t* channels)
    aaec:	b580      	push	{r7, lr}
    aaee:	b094      	sub	sp, #80
    aaf0:	af00      	add	r7, sp, #0
    aaf2:	4603      	mov	r3, r0
    aaf4:	6039      	str	r1, [r7, #0]
    aaf6:	71fb      	strb	r3, [r7, #7]
        /* Start ADC3 Software Conversion */
        ADC_SoftwareStartConv(ADC3);

        return data;
    #else
        DMA_MEMORY_TYPE* data = new DMA_MEMORY_TYPE[nbChannel];
    aaf8:	79fb      	ldrb	r3, [r7, #7]
    aafa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    aafe:	4618      	mov	r0, r3
    ab00:	f003 fe6a 	bl	e7d8 <_Znaj>
    ab04:	4603      	mov	r3, r0
    ab06:	64bb      	str	r3, [r7, #72]

        ADC_InitTypeDef ADC_InitStructure;
        // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
        ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    ab08:	f04f 0300 	mov.w	r3, #0	; 0x0
    ab0c:	637b      	str	r3, [r7, #52]
        // On scanne tous les channels
        ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    ab0e:	f04f 0301 	mov.w	r3, #1	; 0x1
    ab12:	f887 3038 	strb.w	r3, [r7, #56]
        // Single conversion mode
        ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    ab16:	f04f 0300 	mov.w	r3, #0	; 0x0
    ab1a:	f887 3039 	strb.w	r3, [r7, #57]
        // Pas d'external trigger (on lance la conversion à la main)
        ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    ab1e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    ab22:	63fb      	str	r3, [r7, #60]
        ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    ab24:	f04f 0300 	mov.w	r3, #0	; 0x0
    ab28:	643b      	str	r3, [r7, #64]
        ADC_InitStructure.ADC_NbrOfChannel = nbChannel;
    ab2a:	79fb      	ldrb	r3, [r7, #7]
    ab2c:	f887 3044 	strb.w	r3, [r7, #68]
        ADC_Init(ADC1, &ADC_InitStructure);
    ab30:	f107 0334 	add.w	r3, r7, #52	; 0x34
    ab34:	483b      	ldr	r0, [pc, #236]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab36:	4619      	mov	r1, r3
    ab38:	f7f5 fc76 	bl	428 <ADC_Init>

        // Activation du périphérique
        ADC_Cmd(ADC1, ENABLE);
    ab3c:	4839      	ldr	r0, [pc, #228]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab3e:	f04f 0101 	mov.w	r1, #1	; 0x1
    ab42:	f7f5 fcf3 	bl	52c <ADC_Cmd>

        // Calibrage
        // On remet la calibration à zéro
        ADC_ResetCalibration(ADC1);
    ab46:	4837      	ldr	r0, [pc, #220]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab48:	f7f5 fd4e 	bl	5e8 <ADC_ResetCalibration>
        while(ADC_GetResetCalibrationStatus(ADC1));
    ab4c:	4835      	ldr	r0, [pc, #212]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab4e:	f7f5 fd5b 	bl	608 <ADC_GetResetCalibrationStatus>
    ab52:	4603      	mov	r3, r0
    ab54:	2b00      	cmp	r3, #0
    ab56:	bf0c      	ite	eq
    ab58:	2300      	moveq	r3, #0
    ab5a:	2301      	movne	r3, #1
    ab5c:	b2db      	uxtb	r3, r3
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d1f4      	bne.n	ab4c <_ZN12AnalogSensor14initialiserADCEhPh+0x60>
        // On lance la calibration
        ADC_StartCalibration(ADC1);
    ab62:	4830      	ldr	r0, [pc, #192]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab64:	f7f5 fd6c 	bl	640 <ADC_StartCalibration>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));
    ab68:	482e      	ldr	r0, [pc, #184]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab6a:	f7f5 fd79 	bl	660 <ADC_GetCalibrationStatus>
    ab6e:	4603      	mov	r3, r0
    ab70:	2b00      	cmp	r3, #0
    ab72:	bf0c      	ite	eq
    ab74:	2300      	moveq	r3, #0
    ab76:	2301      	movne	r3, #1
    ab78:	b2db      	uxtb	r3, r3
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d1f4      	bne.n	ab68 <_ZN12AnalogSensor14initialiserADCEhPh+0x7c>

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    ab7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ab82:	64fb      	str	r3, [r7, #76]
    ab84:	e013      	b.n	abae <_ZN12AnalogSensor14initialiserADCEhPh+0xc2>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);
    ab86:	6cfa      	ldr	r2, [r7, #76]
    ab88:	683b      	ldr	r3, [r7, #0]
    ab8a:	4413      	add	r3, r2
    ab8c:	781a      	ldrb	r2, [r3, #0]
    ab8e:	6cfb      	ldr	r3, [r7, #76]
    ab90:	b2db      	uxtb	r3, r3
    ab92:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ab96:	b2db      	uxtb	r3, r3
    ab98:	4822      	ldr	r0, [pc, #136]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    ab9a:	4611      	mov	r1, r2
    ab9c:	461a      	mov	r2, r3
    ab9e:	f04f 0300 	mov.w	r3, #0	; 0x0
    aba2:	f7f5 fdf3 	bl	78c <ADC_RegularChannelConfig>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    aba6:	6cfb      	ldr	r3, [r7, #76]
    aba8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    abac:	64fb      	str	r3, [r7, #76]
    abae:	79fa      	ldrb	r2, [r7, #7]
    abb0:	6cfb      	ldr	r3, [r7, #76]
    abb2:	429a      	cmp	r2, r3
    abb4:	dce7      	bgt.n	ab86 <_ZN12AnalogSensor14initialiserADCEhPh+0x9a>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);

        // active le transfert des résultats de conversion en SRAM
        ADC_DMACmd(ADC1, ENABLE);
    abb6:	481b      	ldr	r0, [pc, #108]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    abb8:	f04f 0101 	mov.w	r1, #1	; 0x1
    abbc:	f7f5 fcd2 	bl	564 <ADC_DMACmd>

        DMA_InitTypeDef DMA_InitStructure;
        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    abc0:	4b18      	ldr	r3, [pc, #96]	(ac24 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    abc2:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    abc6:	60bb      	str	r3, [r7, #8]
        DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    abc8:	6cbb      	ldr	r3, [r7, #72]
    abca:	60fb      	str	r3, [r7, #12]
        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    abcc:	f04f 0300 	mov.w	r3, #0	; 0x0
    abd0:	613b      	str	r3, [r7, #16]
        DMA_InitStructure.DMA_BufferSize = nbChannel; // Nombre de conversions à transférer
    abd2:	79fb      	ldrb	r3, [r7, #7]
    abd4:	617b      	str	r3, [r7, #20]
        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    abd6:	f04f 0300 	mov.w	r3, #0	; 0x0
    abda:	61bb      	str	r3, [r7, #24]
        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    abdc:	f04f 0380 	mov.w	r3, #128	; 0x80
    abe0:	61fb      	str	r3, [r7, #28]
        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    abe2:	f44f 7300 	mov.w	r3, #512	; 0x200
    abe6:	623b      	str	r3, [r7, #32]
        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    abe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    abec:	627b      	str	r3, [r7, #36]
        // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
        // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
        DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    abee:	f04f 0320 	mov.w	r3, #32	; 0x20
    abf2:	62bb      	str	r3, [r7, #40]
        DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    abf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    abf8:	62fb      	str	r3, [r7, #44]
        // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
        DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    abfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    abfe:	633b      	str	r3, [r7, #48]
        // Channel1 : cf p.192 tableau 58
        DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    ac00:	f107 0308 	add.w	r3, r7, #8	; 0x8
    ac04:	4808      	ldr	r0, [pc, #32]	(ac28 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    ac06:	4619      	mov	r1, r3
    ac08:	f7f6 fa32 	bl	1070 <DMA_Init>
        DMA_Cmd(DMA1_Channel1, ENABLE);
    ac0c:	4806      	ldr	r0, [pc, #24]	(ac28 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    ac0e:	f04f 0101 	mov.w	r1, #1	; 0x1
    ac12:	f7f6 faab 	bl	116c <DMA_Cmd>
        return data;
    ac16:	6cbb      	ldr	r3, [r7, #72]
    #endif
}
    ac18:	4618      	mov	r0, r3
    ac1a:	f107 0750 	add.w	r7, r7, #80	; 0x50
    ac1e:	46bd      	mov	sp, r7
    ac20:	bd80      	pop	{r7, pc}
    ac22:	46c0      	nop			(mov r8, r8)
    ac24:	40012400 	.word	0x40012400
    ac28:	40020008 	.word	0x40020008

0000ac2c <_ZN12AnalogSensorD0Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    ac2c:	b580      	push	{r7, lr}
    ac2e:	b082      	sub	sp, #8
    ac30:	af00      	add	r7, sp, #0
    ac32:	6078      	str	r0, [r7, #4]
    ac34:	687a      	ldr	r2, [r7, #4]
    ac36:	4b0a      	ldr	r3, [pc, #40]	(ac60 <_ZN12AnalogSensorD0Ev+0x34>)
    ac38:	6013      	str	r3, [r2, #0]
{
}
    ac3a:	687b      	ldr	r3, [r7, #4]
    ac3c:	4618      	mov	r0, r3
    ac3e:	f7fb f871 	bl	5d24 <_ZN6SensorD2Ev>
    ac42:	f04f 0301 	mov.w	r3, #1	; 0x1
    ac46:	b2db      	uxtb	r3, r3
    ac48:	2b00      	cmp	r3, #0
    ac4a:	d002      	beq.n	ac52 <_ZN12AnalogSensorD0Ev+0x26>
    ac4c:	6878      	ldr	r0, [r7, #4]
    ac4e:	f003 fdd1 	bl	e7f4 <_ZdlPv>
    ac52:	687b      	ldr	r3, [r7, #4]
    ac54:	4618      	mov	r0, r3
    ac56:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ac5a:	46bd      	mov	sp, r7
    ac5c:	bd80      	pop	{r7, pc}
    ac5e:	46c0      	nop			(mov r8, r8)
    ac60:	00021e10 	.word	0x00021e10

0000ac64 <_ZN12AnalogSensorD1Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    ac64:	b580      	push	{r7, lr}
    ac66:	b082      	sub	sp, #8
    ac68:	af00      	add	r7, sp, #0
    ac6a:	6078      	str	r0, [r7, #4]
    ac6c:	687a      	ldr	r2, [r7, #4]
    ac6e:	4b0a      	ldr	r3, [pc, #40]	(ac98 <_ZN12AnalogSensorD1Ev+0x34>)
    ac70:	6013      	str	r3, [r2, #0]
{
}
    ac72:	687b      	ldr	r3, [r7, #4]
    ac74:	4618      	mov	r0, r3
    ac76:	f7fb f855 	bl	5d24 <_ZN6SensorD2Ev>
    ac7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ac7e:	b2db      	uxtb	r3, r3
    ac80:	2b00      	cmp	r3, #0
    ac82:	d002      	beq.n	ac8a <_ZN12AnalogSensorD1Ev+0x26>
    ac84:	6878      	ldr	r0, [r7, #4]
    ac86:	f003 fdb5 	bl	e7f4 <_ZdlPv>
    ac8a:	687b      	ldr	r3, [r7, #4]
    ac8c:	4618      	mov	r0, r3
    ac8e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ac92:	46bd      	mov	sp, r7
    ac94:	bd80      	pop	{r7, pc}
    ac96:	46c0      	nop			(mov r8, r8)
    ac98:	00021e10 	.word	0x00021e10

0000ac9c <_ZN12AnalogSensorD2Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    ac9c:	b580      	push	{r7, lr}
    ac9e:	b082      	sub	sp, #8
    aca0:	af00      	add	r7, sp, #0
    aca2:	6078      	str	r0, [r7, #4]
    aca4:	687a      	ldr	r2, [r7, #4]
    aca6:	4b0a      	ldr	r3, [pc, #40]	(acd0 <_ZN12AnalogSensorD2Ev+0x34>)
    aca8:	6013      	str	r3, [r2, #0]
{
}
    acaa:	687b      	ldr	r3, [r7, #4]
    acac:	4618      	mov	r0, r3
    acae:	f7fb f839 	bl	5d24 <_ZN6SensorD2Ev>
    acb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    acb6:	b2db      	uxtb	r3, r3
    acb8:	2b00      	cmp	r3, #0
    acba:	d002      	beq.n	acc2 <_ZN12AnalogSensorD2Ev+0x26>
    acbc:	6878      	ldr	r0, [r7, #4]
    acbe:	f003 fd99 	bl	e7f4 <_ZdlPv>
    acc2:	687b      	ldr	r3, [r7, #4]
    acc4:	4618      	mov	r0, r3
    acc6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    acca:	46bd      	mov	sp, r7
    accc:	bd80      	pop	{r7, pc}
    acce:	46c0      	nop			(mov r8, r8)
    acd0:	00021e10 	.word	0x00021e10

0000acd4 <_ZN12AnalogSensorC1EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    acd4:	b580      	push	{r7, lr}
    acd6:	b084      	sub	sp, #16
    acd8:	af00      	add	r7, sp, #0
    acda:	60f8      	str	r0, [r7, #12]
    acdc:	460b      	mov	r3, r1
    acde:	607a      	str	r2, [r7, #4]
    ace0:	72fb      	strb	r3, [r7, #11]
    ace2:	68fb      	ldr	r3, [r7, #12]
    ace4:	4618      	mov	r0, r3
    ace6:	f7fa ffcd 	bl	5c84 <_ZN6SensorC2Ev>
    acea:	68fa      	ldr	r2, [r7, #12]
    acec:	4b0c      	ldr	r3, [pc, #48]	(ad20 <_ZN12AnalogSensorC1EhPt+0x4c>)
    acee:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    acf0:	68fa      	ldr	r2, [r7, #12]
    acf2:	7afb      	ldrb	r3, [r7, #11]
    acf4:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    acf6:	4b0b      	ldr	r3, [pc, #44]	(ad24 <_ZN12AnalogSensorC1EhPt+0x50>)
    acf8:	681b      	ldr	r3, [r3, #0]
    acfa:	ea4f 0243 	mov.w	r2, r3, lsl #1
    acfe:	687b      	ldr	r3, [r7, #4]
    ad00:	441a      	add	r2, r3
    ad02:	68fb      	ldr	r3, [r7, #12]
    ad04:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    ad06:	4b07      	ldr	r3, [pc, #28]	(ad24 <_ZN12AnalogSensorC1EhPt+0x50>)
    ad08:	681b      	ldr	r3, [r3, #0]
    ad0a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    ad0e:	4b05      	ldr	r3, [pc, #20]	(ad24 <_ZN12AnalogSensorC1EhPt+0x50>)
    ad10:	601a      	str	r2, [r3, #0]
}
    ad12:	68fb      	ldr	r3, [r7, #12]
    ad14:	4618      	mov	r0, r3
    ad16:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ad1a:	46bd      	mov	sp, r7
    ad1c:	bd80      	pop	{r7, pc}
    ad1e:	46c0      	nop			(mov r8, r8)
    ad20:	00021e10 	.word	0x00021e10
    ad24:	20000580 	.word	0x20000580

0000ad28 <_ZN12AnalogSensorC2EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    ad28:	b580      	push	{r7, lr}
    ad2a:	b084      	sub	sp, #16
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	60f8      	str	r0, [r7, #12]
    ad30:	460b      	mov	r3, r1
    ad32:	607a      	str	r2, [r7, #4]
    ad34:	72fb      	strb	r3, [r7, #11]
    ad36:	68fb      	ldr	r3, [r7, #12]
    ad38:	4618      	mov	r0, r3
    ad3a:	f7fa ffa3 	bl	5c84 <_ZN6SensorC2Ev>
    ad3e:	68fa      	ldr	r2, [r7, #12]
    ad40:	4b0c      	ldr	r3, [pc, #48]	(ad74 <_ZN12AnalogSensorC2EhPt+0x4c>)
    ad42:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    ad44:	68fa      	ldr	r2, [r7, #12]
    ad46:	7afb      	ldrb	r3, [r7, #11]
    ad48:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    ad4a:	4b0b      	ldr	r3, [pc, #44]	(ad78 <_ZN12AnalogSensorC2EhPt+0x50>)
    ad4c:	681b      	ldr	r3, [r3, #0]
    ad4e:	ea4f 0243 	mov.w	r2, r3, lsl #1
    ad52:	687b      	ldr	r3, [r7, #4]
    ad54:	441a      	add	r2, r3
    ad56:	68fb      	ldr	r3, [r7, #12]
    ad58:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    ad5a:	4b07      	ldr	r3, [pc, #28]	(ad78 <_ZN12AnalogSensorC2EhPt+0x50>)
    ad5c:	681b      	ldr	r3, [r3, #0]
    ad5e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    ad62:	4b05      	ldr	r3, [pc, #20]	(ad78 <_ZN12AnalogSensorC2EhPt+0x50>)
    ad64:	601a      	str	r2, [r3, #0]
}
    ad66:	68fb      	ldr	r3, [r7, #12]
    ad68:	4618      	mov	r0, r3
    ad6a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ad6e:	46bd      	mov	sp, r7
    ad70:	bd80      	pop	{r7, pc}
    ad72:	46c0      	nop			(mov r8, r8)
    ad74:	00021e10 	.word	0x00021e10
    ad78:	20000580 	.word	0x20000580

0000ad7c <_Z12ax12ChecksumaPi>:
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
    ad7c:	b480      	push	{r7}
    ad7e:	b085      	sub	sp, #20
    ad80:	af00      	add	r7, sp, #0
    ad82:	4603      	mov	r3, r0
    ad84:	6039      	str	r1, [r7, #0]
    ad86:	71fb      	strb	r3, [r7, #7]
{
	int checksum = 0;
    ad88:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad8c:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < length+1; i++) {
    ad8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad92:	60fb      	str	r3, [r7, #12]
    ad94:	e00c      	b.n	adb0 <_Z12ax12ChecksumaPi+0x34>
		checksum += parameters[i];
    ad96:	68fb      	ldr	r3, [r7, #12]
    ad98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    ad9c:	683b      	ldr	r3, [r7, #0]
    ad9e:	4413      	add	r3, r2
    ada0:	681a      	ldr	r2, [r3, #0]
    ada2:	68bb      	ldr	r3, [r7, #8]
    ada4:	4413      	add	r3, r2
    ada6:	60bb      	str	r3, [r7, #8]
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
{
	int checksum = 0;
    for(int i = 0; i < length+1; i++) {
    ada8:	68fb      	ldr	r3, [r7, #12]
    adaa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    adae:	60fb      	str	r3, [r7, #12]
    adb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    adb4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    adb8:	68fb      	ldr	r3, [r7, #12]
    adba:	429a      	cmp	r2, r3
    adbc:	dceb      	bgt.n	ad96 <_Z12ax12ChecksumaPi+0x1a>
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
    adbe:	68bb      	ldr	r3, [r7, #8]
    adc0:	b2db      	uxtb	r3, r3
    adc2:	ea6f 0303 	mvn.w	r3, r3
    adc6:	b2db      	uxtb	r3, r3
    adc8:	b25b      	sxtb	r3, r3
}
    adca:	4618      	mov	r0, r3
    adcc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    add0:	46bd      	mov	sp, r7
    add2:	bc80      	pop	{r7}
    add4:	4770      	bx	lr
    add6:	46c0      	nop			(mov r8, r8)

0000add8 <_ZN4AX1217createWriteHeaderEPiii>:
    return 8;
}



void AX12::createWriteHeader(int* retour, int servo, int nombreParamsAjoutes)
    add8:	b480      	push	{r7}
    adda:	b085      	sub	sp, #20
    addc:	af00      	add	r7, sp, #0
    adde:	60f8      	str	r0, [r7, #12]
    ade0:	60b9      	str	r1, [r7, #8]
    ade2:	607a      	str	r2, [r7, #4]
{
    retour[0] = 0xff;
    ade4:	68fa      	ldr	r2, [r7, #12]
    ade6:	f04f 03ff 	mov.w	r3, #255	; 0xff
    adea:	6013      	str	r3, [r2, #0]
    retour[1] = 0xff;
    adec:	68fb      	ldr	r3, [r7, #12]
    adee:	f103 0204 	add.w	r2, r3, #4	; 0x4
    adf2:	f04f 03ff 	mov.w	r3, #255	; 0xff
    adf6:	6013      	str	r3, [r2, #0]
    retour[2] = servo;
    adf8:	68fb      	ldr	r3, [r7, #12]
    adfa:	f103 0208 	add.w	r2, r3, #8	; 0x8
    adfe:	68bb      	ldr	r3, [r7, #8]
    ae00:	6013      	str	r3, [r2, #0]
    retour[3] = AX12_WRITE_DATA_PARAMS+2+nombreParamsAjoutes;
    ae02:	68fb      	ldr	r3, [r7, #12]
    ae04:	f103 020c 	add.w	r2, r3, #12	; 0xc
    ae08:	687b      	ldr	r3, [r7, #4]
    ae0a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    ae0e:	6013      	str	r3, [r2, #0]
    retour[4] = AX12_WRITE_DATA;
    ae10:	68fb      	ldr	r3, [r7, #12]
    ae12:	f103 0210 	add.w	r2, r3, #16	; 0x10
    ae16:	f04f 0303 	mov.w	r3, #3	; 0x3
    ae1a:	6013      	str	r3, [r2, #0]
}
    ae1c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ae20:	46bd      	mov	sp, r7
    ae22:	bc80      	pop	{r7}
    ae24:	4770      	bx	lr
    ae26:	46c0      	nop			(mov r8, r8)

0000ae28 <_ZN4AX1222getBaudRateInstructionEPihi>:
    retour[5] = AX12_LED;
    retour[6] = ledOn;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}
int AX12::getBaudRateInstruction(int* retour, uint8_t baudRate, int servo)
    ae28:	b590      	push	{r4, r7, lr}
    ae2a:	b085      	sub	sp, #20
    ae2c:	af00      	add	r7, sp, #0
    ae2e:	60f8      	str	r0, [r7, #12]
    ae30:	460b      	mov	r3, r1
    ae32:	607a      	str	r2, [r7, #4]
    ae34:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    ae36:	68f8      	ldr	r0, [r7, #12]
    ae38:	6879      	ldr	r1, [r7, #4]
    ae3a:	f04f 0200 	mov.w	r2, #0	; 0x0
    ae3e:	f7ff ffcb 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_BAUD_RATE;
    ae42:	68fb      	ldr	r3, [r7, #12]
    ae44:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ae48:	f04f 0304 	mov.w	r3, #4	; 0x4
    ae4c:	6013      	str	r3, [r2, #0]
    retour[6] = baudRate;
    ae4e:	68fb      	ldr	r3, [r7, #12]
    ae50:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ae54:	7afb      	ldrb	r3, [r7, #11]
    ae56:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    ae58:	68fb      	ldr	r3, [r7, #12]
    ae5a:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    ae5e:	68fb      	ldr	r3, [r7, #12]
    ae60:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ae64:	681b      	ldr	r3, [r3, #0]
    ae66:	b2da      	uxtb	r2, r3
    ae68:	68fb      	ldr	r3, [r7, #12]
    ae6a:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ae6e:	b253      	sxtb	r3, r2
    ae70:	4618      	mov	r0, r3
    ae72:	f7ff ff83 	bl	ad7c <_Z12ax12ChecksumaPi>
    ae76:	4603      	mov	r3, r0
    ae78:	6023      	str	r3, [r4, #0]
    return 8;
    ae7a:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    ae7e:	4618      	mov	r0, r3
    ae80:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ae84:	46bd      	mov	sp, r7
    ae86:	bd90      	pop	{r4, r7, pc}

0000ae88 <_ZN4AX1217getLedInstructionEPihi>:
    retour[6] = (uint8_t)(maxTorque);
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getLedInstruction(int* retour, uint8_t ledOn, int servo)
    ae88:	b590      	push	{r4, r7, lr}
    ae8a:	b085      	sub	sp, #20
    ae8c:	af00      	add	r7, sp, #0
    ae8e:	60f8      	str	r0, [r7, #12]
    ae90:	460b      	mov	r3, r1
    ae92:	607a      	str	r2, [r7, #4]
    ae94:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    ae96:	68f8      	ldr	r0, [r7, #12]
    ae98:	6879      	ldr	r1, [r7, #4]
    ae9a:	f04f 0200 	mov.w	r2, #0	; 0x0
    ae9e:	f7ff ff9b 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_LED;
    aea2:	68fb      	ldr	r3, [r7, #12]
    aea4:	f103 0214 	add.w	r2, r3, #20	; 0x14
    aea8:	f04f 0319 	mov.w	r3, #25	; 0x19
    aeac:	6013      	str	r3, [r2, #0]
    retour[6] = ledOn;
    aeae:	68fb      	ldr	r3, [r7, #12]
    aeb0:	f103 0218 	add.w	r2, r3, #24	; 0x18
    aeb4:	7afb      	ldrb	r3, [r7, #11]
    aeb6:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    aeb8:	68fb      	ldr	r3, [r7, #12]
    aeba:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    aebe:	68fb      	ldr	r3, [r7, #12]
    aec0:	f103 030c 	add.w	r3, r3, #12	; 0xc
    aec4:	681b      	ldr	r3, [r3, #0]
    aec6:	b2da      	uxtb	r2, r3
    aec8:	68fb      	ldr	r3, [r7, #12]
    aeca:	f103 0108 	add.w	r1, r3, #8	; 0x8
    aece:	b253      	sxtb	r3, r2
    aed0:	4618      	mov	r0, r3
    aed2:	f7ff ff53 	bl	ad7c <_Z12ax12ChecksumaPi>
    aed6:	4603      	mov	r3, r0
    aed8:	6023      	str	r3, [r4, #0]
    return 8;
    aeda:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    aede:	4618      	mov	r0, r3
    aee0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aee4:	46bd      	mov	sp, r7
    aee6:	bd90      	pop	{r4, r7, pc}

0000aee8 <_ZN4AX1223getMaxTorqueInstructionEPiti>:
    retour[6] = (uint8_t)(torqueLimite);
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMaxTorqueInstruction(int* retour, uint16_t maxTorque, int servo) // torque dans l'eeprom (pour l'écrire dans la ram au démarrage)
    aee8:	b590      	push	{r4, r7, lr}
    aeea:	b085      	sub	sp, #20
    aeec:	af00      	add	r7, sp, #0
    aeee:	60f8      	str	r0, [r7, #12]
    aef0:	460b      	mov	r3, r1
    aef2:	607a      	str	r2, [r7, #4]
    aef4:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    aef6:	68f8      	ldr	r0, [r7, #12]
    aef8:	6879      	ldr	r1, [r7, #4]
    aefa:	f04f 0201 	mov.w	r2, #1	; 0x1
    aefe:	f7ff ff6b 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MAX_TORQUE_L;
    af02:	68fb      	ldr	r3, [r7, #12]
    af04:	f103 0214 	add.w	r2, r3, #20	; 0x14
    af08:	f04f 030e 	mov.w	r3, #14	; 0xe
    af0c:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(maxTorque);
    af0e:	68fb      	ldr	r3, [r7, #12]
    af10:	f103 0218 	add.w	r2, r3, #24	; 0x18
    af14:	897b      	ldrh	r3, [r7, #10]
    af16:	b2db      	uxtb	r3, r3
    af18:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    af1a:	68fb      	ldr	r3, [r7, #12]
    af1c:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    af20:	897b      	ldrh	r3, [r7, #10]
    af22:	ea4f 2323 	mov.w	r3, r3, asr #8
    af26:	b2db      	uxtb	r3, r3
    af28:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    af2a:	68fb      	ldr	r3, [r7, #12]
    af2c:	f103 0420 	add.w	r4, r3, #32	; 0x20
    af30:	68fb      	ldr	r3, [r7, #12]
    af32:	f103 030c 	add.w	r3, r3, #12	; 0xc
    af36:	681b      	ldr	r3, [r3, #0]
    af38:	b2da      	uxtb	r2, r3
    af3a:	68fb      	ldr	r3, [r7, #12]
    af3c:	f103 0108 	add.w	r1, r3, #8	; 0x8
    af40:	b253      	sxtb	r3, r2
    af42:	4618      	mov	r0, r3
    af44:	f7ff ff1a 	bl	ad7c <_Z12ax12ChecksumaPi>
    af48:	4603      	mov	r3, r0
    af4a:	6023      	str	r3, [r4, #0]
    return 9;
    af4c:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    af50:	4618      	mov	r0, r3
    af52:	f107 0714 	add.w	r7, r7, #20	; 0x14
    af56:	46bd      	mov	sp, r7
    af58:	bd90      	pop	{r4, r7, pc}
    af5a:	46c0      	nop			(mov r8, r8)

0000af5c <_ZN4AX1225getTorqueLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getTorqueLimitInstruction(int* retour, uint16_t torqueLimite, int servo) // la torque dans la RAM
    af5c:	b590      	push	{r4, r7, lr}
    af5e:	b085      	sub	sp, #20
    af60:	af00      	add	r7, sp, #0
    af62:	60f8      	str	r0, [r7, #12]
    af64:	460b      	mov	r3, r1
    af66:	607a      	str	r2, [r7, #4]
    af68:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    af6a:	68f8      	ldr	r0, [r7, #12]
    af6c:	6879      	ldr	r1, [r7, #4]
    af6e:	f04f 0201 	mov.w	r2, #1	; 0x1
    af72:	f7ff ff31 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_TORQUE_LIMIT_L;
    af76:	68fb      	ldr	r3, [r7, #12]
    af78:	f103 0214 	add.w	r2, r3, #20	; 0x14
    af7c:	f04f 0322 	mov.w	r3, #34	; 0x22
    af80:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(torqueLimite);
    af82:	68fb      	ldr	r3, [r7, #12]
    af84:	f103 0218 	add.w	r2, r3, #24	; 0x18
    af88:	897b      	ldrh	r3, [r7, #10]
    af8a:	b2db      	uxtb	r3, r3
    af8c:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    af8e:	68fb      	ldr	r3, [r7, #12]
    af90:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    af94:	897b      	ldrh	r3, [r7, #10]
    af96:	ea4f 2323 	mov.w	r3, r3, asr #8
    af9a:	b2db      	uxtb	r3, r3
    af9c:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    af9e:	68fb      	ldr	r3, [r7, #12]
    afa0:	f103 0420 	add.w	r4, r3, #32	; 0x20
    afa4:	68fb      	ldr	r3, [r7, #12]
    afa6:	f103 030c 	add.w	r3, r3, #12	; 0xc
    afaa:	681b      	ldr	r3, [r3, #0]
    afac:	b2da      	uxtb	r2, r3
    afae:	68fb      	ldr	r3, [r7, #12]
    afb0:	f103 0108 	add.w	r1, r3, #8	; 0x8
    afb4:	b253      	sxtb	r3, r2
    afb6:	4618      	mov	r0, r3
    afb8:	f7ff fee0 	bl	ad7c <_Z12ax12ChecksumaPi>
    afbc:	4603      	mov	r3, r0
    afbe:	6023      	str	r3, [r4, #0]
    return 9;
    afc0:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    afc4:	4618      	mov	r0, r3
    afc6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    afca:	46bd      	mov	sp, r7
    afcc:	bd90      	pop	{r4, r7, pc}
    afce:	46c0      	nop			(mov r8, r8)

0000afd0 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleUpperLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    afd0:	b590      	push	{r4, r7, lr}
    afd2:	b085      	sub	sp, #20
    afd4:	af00      	add	r7, sp, #0
    afd6:	60f8      	str	r0, [r7, #12]
    afd8:	460b      	mov	r3, r1
    afda:	607a      	str	r2, [r7, #4]
    afdc:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    afde:	68f8      	ldr	r0, [r7, #12]
    afe0:	6879      	ldr	r1, [r7, #4]
    afe2:	f04f 0201 	mov.w	r2, #1	; 0x1
    afe6:	f7ff fef7 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CCW_ANGLE_LIMIT_L;
    afea:	68fb      	ldr	r3, [r7, #12]
    afec:	f103 0214 	add.w	r2, r3, #20	; 0x14
    aff0:	f04f 0308 	mov.w	r3, #8	; 0x8
    aff4:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    aff6:	68fb      	ldr	r3, [r7, #12]
    aff8:	f103 0218 	add.w	r2, r3, #24	; 0x18
    affc:	897b      	ldrh	r3, [r7, #10]
    affe:	b2db      	uxtb	r3, r3
    b000:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    b002:	68fb      	ldr	r3, [r7, #12]
    b004:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b008:	897b      	ldrh	r3, [r7, #10]
    b00a:	ea4f 2323 	mov.w	r3, r3, asr #8
    b00e:	b2db      	uxtb	r3, r3
    b010:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b012:	68fb      	ldr	r3, [r7, #12]
    b014:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b018:	68fb      	ldr	r3, [r7, #12]
    b01a:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b01e:	681b      	ldr	r3, [r3, #0]
    b020:	b2da      	uxtb	r2, r3
    b022:	68fb      	ldr	r3, [r7, #12]
    b024:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b028:	b253      	sxtb	r3, r2
    b02a:	4618      	mov	r0, r3
    b02c:	f7ff fea6 	bl	ad7c <_Z12ax12ChecksumaPi>
    b030:	4603      	mov	r3, r0
    b032:	6023      	str	r3, [r4, #0]
    return 9;
    b034:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b038:	4618      	mov	r0, r3
    b03a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b03e:	46bd      	mov	sp, r7
    b040:	bd90      	pop	{r4, r7, pc}
    b042:	46c0      	nop			(mov r8, r8)

0000b044 <_ZN4AX1229getAngleLowerLimitInstructionEPiti>:
    retour[6] = (uint8_t)(vitesse);
    retour[7] = (uint8_t)(vitesse>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleLowerLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    b044:	b590      	push	{r4, r7, lr}
    b046:	b085      	sub	sp, #20
    b048:	af00      	add	r7, sp, #0
    b04a:	60f8      	str	r0, [r7, #12]
    b04c:	460b      	mov	r3, r1
    b04e:	607a      	str	r2, [r7, #4]
    b050:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b052:	68f8      	ldr	r0, [r7, #12]
    b054:	6879      	ldr	r1, [r7, #4]
    b056:	f04f 0201 	mov.w	r2, #1	; 0x1
    b05a:	f7ff febd 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CW_ANGLE_LIMIT_L;
    b05e:	68fb      	ldr	r3, [r7, #12]
    b060:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b064:	f04f 0306 	mov.w	r3, #6	; 0x6
    b068:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    b06a:	68fb      	ldr	r3, [r7, #12]
    b06c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b070:	897b      	ldrh	r3, [r7, #10]
    b072:	b2db      	uxtb	r3, r3
    b074:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    b076:	68fb      	ldr	r3, [r7, #12]
    b078:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b07c:	897b      	ldrh	r3, [r7, #10]
    b07e:	ea4f 2323 	mov.w	r3, r3, asr #8
    b082:	b2db      	uxtb	r3, r3
    b084:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b086:	68fb      	ldr	r3, [r7, #12]
    b088:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b08c:	68fb      	ldr	r3, [r7, #12]
    b08e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b092:	681b      	ldr	r3, [r3, #0]
    b094:	b2da      	uxtb	r2, r3
    b096:	68fb      	ldr	r3, [r7, #12]
    b098:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b09c:	b253      	sxtb	r3, r2
    b09e:	4618      	mov	r0, r3
    b0a0:	f7ff fe6c 	bl	ad7c <_Z12ax12ChecksumaPi>
    b0a4:	4603      	mov	r3, r0
    b0a6:	6023      	str	r3, [r4, #0]
    return 9;
    b0a8:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b0ac:	4618      	mov	r0, r3
    b0ae:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b0b2:	46bd      	mov	sp, r7
    b0b4:	bd90      	pop	{r4, r7, pc}
    b0b6:	46c0      	nop			(mov r8, r8)

0000b0b8 <_ZN4AX1223getMoveSpeedInstructionEPith>:
    retour[6] = (uint8_t)(position);
    retour[7] = (uint8_t)(position>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMoveSpeedInstruction(int* retour, uint16_t vitesse, uint8_t servo)
    b0b8:	b590      	push	{r4, r7, lr}
    b0ba:	b083      	sub	sp, #12
    b0bc:	af00      	add	r7, sp, #0
    b0be:	6078      	str	r0, [r7, #4]
    b0c0:	460b      	mov	r3, r1
    b0c2:	807b      	strh	r3, [r7, #2]
    b0c4:	4613      	mov	r3, r2
    b0c6:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high speed)
    b0c8:	787b      	ldrb	r3, [r7, #1]
    b0ca:	6878      	ldr	r0, [r7, #4]
    b0cc:	4619      	mov	r1, r3
    b0ce:	f04f 0201 	mov.w	r2, #1	; 0x1
    b0d2:	f7ff fe81 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MOVING_SPEED_L;
    b0d6:	687b      	ldr	r3, [r7, #4]
    b0d8:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b0dc:	f04f 0320 	mov.w	r3, #32	; 0x20
    b0e0:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(vitesse);
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b0e8:	887b      	ldrh	r3, [r7, #2]
    b0ea:	b2db      	uxtb	r3, r3
    b0ec:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(vitesse>>8);
    b0ee:	687b      	ldr	r3, [r7, #4]
    b0f0:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b0f4:	887b      	ldrh	r3, [r7, #2]
    b0f6:	ea4f 2323 	mov.w	r3, r3, asr #8
    b0fa:	b2db      	uxtb	r3, r3
    b0fc:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b0fe:	687b      	ldr	r3, [r7, #4]
    b100:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b104:	687b      	ldr	r3, [r7, #4]
    b106:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b10a:	681b      	ldr	r3, [r3, #0]
    b10c:	b2da      	uxtb	r2, r3
    b10e:	687b      	ldr	r3, [r7, #4]
    b110:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b114:	b253      	sxtb	r3, r2
    b116:	4618      	mov	r0, r3
    b118:	f7ff fe30 	bl	ad7c <_Z12ax12ChecksumaPi>
    b11c:	4603      	mov	r3, r0
    b11e:	6023      	str	r3, [r4, #0]
    return 9;
    b120:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b124:	4618      	mov	r0, r3
    b126:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b12a:	46bd      	mov	sp, r7
    b12c:	bd90      	pop	{r4, r7, pc}
    b12e:	46c0      	nop			(mov r8, r8)

0000b130 <_ZN4AX1220getMoveToInstructionEPith>:
    retour[8] = (uint8_t)(vitesse);
    retour[9] = (uint8_t)(vitesse>>8);
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    return 11;
}
int AX12::getMoveToInstruction(int* retour, uint16_t position, uint8_t servo)
    b130:	b590      	push	{r4, r7, lr}
    b132:	b083      	sub	sp, #12
    b134:	af00      	add	r7, sp, #0
    b136:	6078      	str	r0, [r7, #4]
    b138:	460b      	mov	r3, r1
    b13a:	807b      	strh	r3, [r7, #2]
    b13c:	4613      	mov	r3, r2
    b13e:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high position bits)
    b140:	787b      	ldrb	r3, [r7, #1]
    b142:	6878      	ldr	r0, [r7, #4]
    b144:	4619      	mov	r1, r3
    b146:	f04f 0201 	mov.w	r2, #1	; 0x1
    b14a:	f7ff fe45 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    b14e:	687b      	ldr	r3, [r7, #4]
    b150:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b154:	f04f 031e 	mov.w	r3, #30	; 0x1e
    b158:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    b15a:	687b      	ldr	r3, [r7, #4]
    b15c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b160:	887b      	ldrh	r3, [r7, #2]
    b162:	b2db      	uxtb	r3, r3
    b164:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    b166:	687b      	ldr	r3, [r7, #4]
    b168:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b16c:	887b      	ldrh	r3, [r7, #2]
    b16e:	ea4f 2323 	mov.w	r3, r3, asr #8
    b172:	b2db      	uxtb	r3, r3
    b174:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b176:	687b      	ldr	r3, [r7, #4]
    b178:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b17c:	687b      	ldr	r3, [r7, #4]
    b17e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b182:	681b      	ldr	r3, [r3, #0]
    b184:	b2da      	uxtb	r2, r3
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b18c:	b253      	sxtb	r3, r2
    b18e:	4618      	mov	r0, r3
    b190:	f7ff fdf4 	bl	ad7c <_Z12ax12ChecksumaPi>
    b194:	4603      	mov	r3, r0
    b196:	6023      	str	r3, [r4, #0]
    return 9;
    b198:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b19c:	4618      	mov	r0, r3
    b19e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b1a2:	46bd      	mov	sp, r7
    b1a4:	bd90      	pop	{r4, r7, pc}
    b1a6:	46c0      	nop			(mov r8, r8)

0000b1a8 <_ZN4AX1218getMoveInstructionEPitth>:
    for(int i = 0; i < length+1; i++) {
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
}
int AX12::getMoveInstruction(int* retour, uint16_t position, uint16_t vitesse, uint8_t servo)
    b1a8:	b590      	push	{r4, r7, lr}
    b1aa:	b085      	sub	sp, #20
    b1ac:	af00      	add	r7, sp, #0
    b1ae:	60f8      	str	r0, [r7, #12]
    b1b0:	4618      	mov	r0, r3
    b1b2:	460b      	mov	r3, r1
    b1b4:	817b      	strh	r3, [r7, #10]
    b1b6:	4613      	mov	r3, r2
    b1b8:	813b      	strh	r3, [r7, #8]
    b1ba:	4603      	mov	r3, r0
    b1bc:	71fb      	strb	r3, [r7, #7]
{
    createWriteHeader(retour, servo, 3); // first, we create a write header with 3 more params (for low/height pos and low/height speed)
    b1be:	79fb      	ldrb	r3, [r7, #7]
    b1c0:	68f8      	ldr	r0, [r7, #12]
    b1c2:	4619      	mov	r1, r3
    b1c4:	f04f 0203 	mov.w	r2, #3	; 0x3
    b1c8:	f7ff fe06 	bl	add8 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    b1cc:	68fb      	ldr	r3, [r7, #12]
    b1ce:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b1d2:	f04f 031e 	mov.w	r3, #30	; 0x1e
    b1d6:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    b1d8:	68fb      	ldr	r3, [r7, #12]
    b1da:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b1de:	897b      	ldrh	r3, [r7, #10]
    b1e0:	b2db      	uxtb	r3, r3
    b1e2:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    b1e4:	68fb      	ldr	r3, [r7, #12]
    b1e6:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b1ea:	897b      	ldrh	r3, [r7, #10]
    b1ec:	ea4f 2323 	mov.w	r3, r3, asr #8
    b1f0:	b2db      	uxtb	r3, r3
    b1f2:	6013      	str	r3, [r2, #0]
    retour[8] = (uint8_t)(vitesse);
    b1f4:	68fb      	ldr	r3, [r7, #12]
    b1f6:	f103 0220 	add.w	r2, r3, #32	; 0x20
    b1fa:	893b      	ldrh	r3, [r7, #8]
    b1fc:	b2db      	uxtb	r3, r3
    b1fe:	6013      	str	r3, [r2, #0]
    retour[9] = (uint8_t)(vitesse>>8);
    b200:	68fb      	ldr	r3, [r7, #12]
    b202:	f103 0224 	add.w	r2, r3, #36	; 0x24
    b206:	893b      	ldrh	r3, [r7, #8]
    b208:	ea4f 2323 	mov.w	r3, r3, asr #8
    b20c:	b2db      	uxtb	r3, r3
    b20e:	6013      	str	r3, [r2, #0]
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    b210:	68fb      	ldr	r3, [r7, #12]
    b212:	f103 0428 	add.w	r4, r3, #40	; 0x28
    b216:	68fb      	ldr	r3, [r7, #12]
    b218:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b21c:	681b      	ldr	r3, [r3, #0]
    b21e:	b2da      	uxtb	r2, r3
    b220:	68fb      	ldr	r3, [r7, #12]
    b222:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b226:	b253      	sxtb	r3, r2
    b228:	4618      	mov	r0, r3
    b22a:	f7ff fda7 	bl	ad7c <_Z12ax12ChecksumaPi>
    b22e:	4603      	mov	r3, r0
    b230:	6023      	str	r3, [r4, #0]
    return 11;
    b232:	f04f 030b 	mov.w	r3, #11	; 0xb
}
    b236:	4618      	mov	r0, r3
    b238:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b23c:	46bd      	mov	sp, r7
    b23e:	bd90      	pop	{r4, r7, pc}

0000b240 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv>:
            break;
    }
}

// renvoient 0
Vitesse CommandCalibrerCapteurCouleur::getLinearSpeed()
    b240:	b480      	push	{r7}
    b242:	b083      	sub	sp, #12
    b244:	af00      	add	r7, sp, #0
    b246:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b248:	4b03      	ldr	r3, [pc, #12]	(b258 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv+0x18>)
}
    b24a:	4618      	mov	r0, r3
    b24c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b250:	46bd      	mov	sp, r7
    b252:	bc80      	pop	{r7}
    b254:	4770      	bx	lr
    b256:	46c0      	nop			(mov r8, r8)
    b258:	00000000 	.word	0x00000000

0000b25c <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv>:

Angle CommandCalibrerCapteurCouleur::getAngularSpeed()
    b25c:	b480      	push	{r7}
    b25e:	b083      	sub	sp, #12
    b260:	af00      	add	r7, sp, #0
    b262:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b264:	4b03      	ldr	r3, [pc, #12]	(b274 <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv+0x18>)
}
    b266:	4618      	mov	r0, r3
    b268:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b26c:	46bd      	mov	sp, r7
    b26e:	bc80      	pop	{r7}
    b270:	4770      	bx	lr
    b272:	46c0      	nop			(mov r8, r8)
    b274:	00000000 	.word	0x00000000

0000b278 <_ZNK29CommandCalibrerCapteurCouleur4finiEv>:

// renvoit si le capteur a fini sa calibration
// le résultat est lisible dans getTicksMoyens()
bool CommandCalibrerCapteurCouleur::fini() const
    b278:	b480      	push	{r7}
    b27a:	b083      	sub	sp, #12
    b27c:	af00      	add	r7, sp, #0
    b27e:	6078      	str	r0, [r7, #4]
{
    return (state > 4);
    b280:	687b      	ldr	r3, [r7, #4]
    b282:	689b      	ldr	r3, [r3, #8]
    b284:	2b04      	cmp	r3, #4
    b286:	bfd4      	ite	le
    b288:	2300      	movle	r3, #0
    b28a:	2301      	movgt	r3, #1
    b28c:	b2db      	uxtb	r3, r3
}
    b28e:	4618      	mov	r0, r3
    b290:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b294:	46bd      	mov	sp, r7
    b296:	bc80      	pop	{r7}
    b298:	4770      	bx	lr
    b29a:	46c0      	nop			(mov r8, r8)

0000b29c <_ZNK29CommandCalibrerCapteurCouleur14getTicksMoyensEv>:

// une fois fini, renvoit le seuil calculé
uint16_t CommandCalibrerCapteurCouleur::getTicksMoyens() const
    b29c:	b480      	push	{r7}
    b29e:	b083      	sub	sp, #12
    b2a0:	af00      	add	r7, sp, #0
    b2a2:	6078      	str	r0, [r7, #4]
{
    return resultat;
    b2a4:	687b      	ldr	r3, [r7, #4]
    b2a6:	899b      	ldrh	r3, [r3, #12]
}
    b2a8:	4618      	mov	r0, r3
    b2aa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b2ae:	46bd      	mov	sp, r7
    b2b0:	bc80      	pop	{r7}
    b2b2:	4770      	bx	lr

0000b2b4 <_ZN19CommandCheckCouleur14getLinearSpeedEv>:
            state++;
    }
}

// renvoient 0
Vitesse CommandCheckCouleur::getLinearSpeed()
    b2b4:	b480      	push	{r7}
    b2b6:	b083      	sub	sp, #12
    b2b8:	af00      	add	r7, sp, #0
    b2ba:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b2bc:	4b03      	ldr	r3, [pc, #12]	(b2cc <_ZN19CommandCheckCouleur14getLinearSpeedEv+0x18>)
}
    b2be:	4618      	mov	r0, r3
    b2c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b2c4:	46bd      	mov	sp, r7
    b2c6:	bc80      	pop	{r7}
    b2c8:	4770      	bx	lr
    b2ca:	46c0      	nop			(mov r8, r8)
    b2cc:	00000000 	.word	0x00000000

0000b2d0 <_ZN19CommandCheckCouleur15getAngularSpeedEv>:

Angle CommandCheckCouleur::getAngularSpeed()
    b2d0:	b480      	push	{r7}
    b2d2:	b083      	sub	sp, #12
    b2d4:	af00      	add	r7, sp, #0
    b2d6:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b2d8:	4b03      	ldr	r3, [pc, #12]	(b2e8 <_ZN19CommandCheckCouleur15getAngularSpeedEv+0x18>)
}
    b2da:	4618      	mov	r0, r3
    b2dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b2e0:	46bd      	mov	sp, r7
    b2e2:	bc80      	pop	{r7}
    b2e4:	4770      	bx	lr
    b2e6:	46c0      	nop			(mov r8, r8)
    b2e8:	00000000 	.word	0x00000000

0000b2ec <_ZNK19CommandCheckCouleur4finiEv>:

// renvoit si le capteur a fini de check la couleur
// le résultat est disponible dans les fonctions bleue() et rouge()
bool CommandCheckCouleur::fini() const
    b2ec:	b480      	push	{r7}
    b2ee:	b083      	sub	sp, #12
    b2f0:	af00      	add	r7, sp, #0
    b2f2:	6078      	str	r0, [r7, #4]
{
    return (state >= 4);
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	695b      	ldr	r3, [r3, #20]
    b2f8:	2b03      	cmp	r3, #3
    b2fa:	bfd4      	ite	le
    b2fc:	2300      	movle	r3, #0
    b2fe:	2301      	movgt	r3, #1
    b300:	b2db      	uxtb	r3, r3
}
    b302:	4618      	mov	r0, r3
    b304:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b308:	46bd      	mov	sp, r7
    b30a:	bc80      	pop	{r7}
    b30c:	4770      	bx	lr
    b30e:	46c0      	nop			(mov r8, r8)

0000b310 <_ZNK19CommandCheckCouleur5bleueEv>:

// une fois fini, renvoit la couleur
// les 2 peuvent renvoyer true si on est pas sur de la couleur
bool CommandCheckCouleur::bleue() const
    b310:	b590      	push	{r4, r7, lr}
    b312:	b083      	sub	sp, #12
    b314:	af00      	add	r7, sp, #0
    b316:	6078      	str	r0, [r7, #4]
{
    return (float)bleuMesure > 1.15f*(float)seuilMoyenne;
    b318:	687b      	ldr	r3, [r7, #4]
    b31a:	899b      	ldrh	r3, [r3, #12]
    b31c:	4618      	mov	r0, r3
    b31e:	f00f fd51 	bl	1adc4 <__aeabi_ui2f>
    b322:	4604      	mov	r4, r0
    b324:	687b      	ldr	r3, [r7, #4]
    b326:	889b      	ldrh	r3, [r3, #4]
    b328:	4618      	mov	r0, r3
    b32a:	f00f fd4b 	bl	1adc4 <__aeabi_ui2f>
    b32e:	4603      	mov	r3, r0
    b330:	4618      	mov	r0, r3
    b332:	490c      	ldr	r1, [pc, #48]	(b364 <_ZNK19CommandCheckCouleur5bleueEv+0x54>)
    b334:	f00f fd9e 	bl	1ae74 <__aeabi_fmul>
    b338:	4603      	mov	r3, r0
    b33a:	461a      	mov	r2, r3
    b33c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b340:	70fb      	strb	r3, [r7, #3]
    b342:	4620      	mov	r0, r4
    b344:	4611      	mov	r1, r2
    b346:	f00f ff4f 	bl	1b1e8 <__aeabi_fcmpgt>
    b34a:	4603      	mov	r3, r0
    b34c:	2b00      	cmp	r3, #0
    b34e:	d002      	beq.n	b356 <_ZNK19CommandCheckCouleur5bleueEv+0x46>
    b350:	f04f 0301 	mov.w	r3, #1	; 0x1
    b354:	70fb      	strb	r3, [r7, #3]
    b356:	78fb      	ldrb	r3, [r7, #3]
}
    b358:	4618      	mov	r0, r3
    b35a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b35e:	46bd      	mov	sp, r7
    b360:	bd90      	pop	{r4, r7, pc}
    b362:	46c0      	nop			(mov r8, r8)
    b364:	3f933333 	.word	0x3f933333

0000b368 <_ZNK19CommandCheckCouleur5rougeEv>:

bool CommandCheckCouleur::rouge() const
    b368:	b590      	push	{r4, r7, lr}
    b36a:	b083      	sub	sp, #12
    b36c:	af00      	add	r7, sp, #0
    b36e:	6078      	str	r0, [r7, #4]
{
    return (float)rougeMesure > 1.15f*(float)seuilMoyenne;
    b370:	687b      	ldr	r3, [r7, #4]
    b372:	89db      	ldrh	r3, [r3, #14]
    b374:	4618      	mov	r0, r3
    b376:	f00f fd25 	bl	1adc4 <__aeabi_ui2f>
    b37a:	4604      	mov	r4, r0
    b37c:	687b      	ldr	r3, [r7, #4]
    b37e:	889b      	ldrh	r3, [r3, #4]
    b380:	4618      	mov	r0, r3
    b382:	f00f fd1f 	bl	1adc4 <__aeabi_ui2f>
    b386:	4603      	mov	r3, r0
    b388:	4618      	mov	r0, r3
    b38a:	490c      	ldr	r1, [pc, #48]	(b3bc <_ZNK19CommandCheckCouleur5rougeEv+0x54>)
    b38c:	f00f fd72 	bl	1ae74 <__aeabi_fmul>
    b390:	4603      	mov	r3, r0
    b392:	461a      	mov	r2, r3
    b394:	f04f 0300 	mov.w	r3, #0	; 0x0
    b398:	70fb      	strb	r3, [r7, #3]
    b39a:	4620      	mov	r0, r4
    b39c:	4611      	mov	r1, r2
    b39e:	f00f ff23 	bl	1b1e8 <__aeabi_fcmpgt>
    b3a2:	4603      	mov	r3, r0
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d002      	beq.n	b3ae <_ZNK19CommandCheckCouleur5rougeEv+0x46>
    b3a8:	f04f 0301 	mov.w	r3, #1	; 0x1
    b3ac:	70fb      	strb	r3, [r7, #3]
    b3ae:	78fb      	ldrb	r3, [r7, #3]
}
    b3b0:	4618      	mov	r0, r3
    b3b2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b3b6:	46bd      	mov	sp, r7
    b3b8:	bd90      	pop	{r4, r7, pc}
    b3ba:	46c0      	nop			(mov r8, r8)
    b3bc:	3f933333 	.word	0x3f933333

0000b3c0 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b3c0:	b580      	push	{r7, lr}
    b3c2:	b082      	sub	sp, #8
    b3c4:	af00      	add	r7, sp, #0
    b3c6:	6078      	str	r0, [r7, #4]
    b3c8:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b3ca:	687b      	ldr	r3, [r7, #4]
    b3cc:	4618      	mov	r0, r3
    b3ce:	f7fc fc87 	bl	7ce0 <_ZN7CommandC2Ev>
    b3d2:	687a      	ldr	r2, [r7, #4]
    b3d4:	4b09      	ldr	r3, [pc, #36]	(b3fc <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur+0x3c>)
    b3d6:	6013      	str	r3, [r2, #0]
    b3d8:	687a      	ldr	r2, [r7, #4]
    b3da:	683b      	ldr	r3, [r7, #0]
    b3dc:	6053      	str	r3, [r2, #4]
    b3de:	687a      	ldr	r2, [r7, #4]
    b3e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b3e4:	6093      	str	r3, [r2, #8]
    b3e6:	687a      	ldr	r2, [r7, #4]
    b3e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    b3ec:	8193      	strh	r3, [r2, #12]
{
}
    b3ee:	687b      	ldr	r3, [r7, #4]
    b3f0:	4618      	mov	r0, r3
    b3f2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b3f6:	46bd      	mov	sp, r7
    b3f8:	bd80      	pop	{r7, pc}
    b3fa:	46c0      	nop			(mov r8, r8)
    b3fc:	00021e50 	.word	0x00021e50

0000b400 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b400:	b580      	push	{r7, lr}
    b402:	b082      	sub	sp, #8
    b404:	af00      	add	r7, sp, #0
    b406:	6078      	str	r0, [r7, #4]
    b408:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b40a:	687b      	ldr	r3, [r7, #4]
    b40c:	4618      	mov	r0, r3
    b40e:	f7fc fc67 	bl	7ce0 <_ZN7CommandC2Ev>
    b412:	687a      	ldr	r2, [r7, #4]
    b414:	4b09      	ldr	r3, [pc, #36]	(b43c <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur+0x3c>)
    b416:	6013      	str	r3, [r2, #0]
    b418:	687a      	ldr	r2, [r7, #4]
    b41a:	683b      	ldr	r3, [r7, #0]
    b41c:	6053      	str	r3, [r2, #4]
    b41e:	687a      	ldr	r2, [r7, #4]
    b420:	f04f 0300 	mov.w	r3, #0	; 0x0
    b424:	6093      	str	r3, [r2, #8]
    b426:	687a      	ldr	r2, [r7, #4]
    b428:	f04f 0300 	mov.w	r3, #0	; 0x0
    b42c:	8193      	strh	r3, [r2, #12]
{
}
    b42e:	687b      	ldr	r3, [r7, #4]
    b430:	4618      	mov	r0, r3
    b432:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b436:	46bd      	mov	sp, r7
    b438:	bd80      	pop	{r7, pc}
    b43a:	46c0      	nop			(mov r8, r8)
    b43c:	00021e50 	.word	0x00021e50

0000b440 <_ZN14CapteurCouleur12getTickValueEv>:
    TIM_SetCounter(m_TIMx, 0);
}

// Permet de connaitre le nombre de ticks depuis le dernier appel de cette fonction
// ou depuis le dernier appel de la selection du capteur
uint16_t CapteurCouleur::getTickValue()
    b440:	b580      	push	{r7, lr}
    b442:	b084      	sub	sp, #16
    b444:	af00      	add	r7, sp, #0
    b446:	6078      	str	r0, [r7, #4]
{
    // récupère le nombre de ticks depuis la dernière mise à 0
    uint16_t tick = TIM_GetCounter(m_TIMx);
    b448:	687b      	ldr	r3, [r7, #4]
    b44a:	681b      	ldr	r3, [r3, #0]
    b44c:	4618      	mov	r0, r3
    b44e:	f7f8 fe97 	bl	4180 <TIM_GetCounter>
    b452:	4603      	mov	r3, r0
    b454:	81fb      	strh	r3, [r7, #14]

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b456:	687b      	ldr	r3, [r7, #4]
    b458:	681b      	ldr	r3, [r3, #0]
    b45a:	4618      	mov	r0, r3
    b45c:	f04f 0100 	mov.w	r1, #0	; 0x0
    b460:	f7f8 fd54 	bl	3f0c <TIM_SetCounter>

    return tick;
    b464:	89fb      	ldrh	r3, [r7, #14]
}
    b466:	4618      	mov	r0, r3
    b468:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b46c:	46bd      	mov	sp, r7
    b46e:	bd80      	pop	{r7, pc}

0000b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>:
            break;
    }
}

// selectionne le capteur
void CapteurCouleur::activerCapteur(PositionCapteurCouleur position)
    b470:	b580      	push	{r7, lr}
    b472:	b082      	sub	sp, #8
    b474:	af00      	add	r7, sp, #0
    b476:	6078      	str	r0, [r7, #4]
    b478:	460b      	mov	r3, r1
    b47a:	70fb      	strb	r3, [r7, #3]
{
    // selection du capteur
    switch (position)
    b47c:	78fb      	ldrb	r3, [r7, #3]
    b47e:	2b03      	cmp	r3, #3
    b480:	d85d      	bhi.n	b53e <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
    b482:	a201      	add	r2, pc, #4	(adr r2, b488 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0x18>)
    b484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b488:	0000b499 	.word	0x0000b499
    b48c:	0000b4c3 	.word	0x0000b4c3
    b490:	0000b4ed 	.word	0x0000b4ed
    b494:	0000b517 	.word	0x0000b517
    {
        case GAUCHE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b498:	687b      	ldr	r3, [r7, #4]
    b49a:	695a      	ldr	r2, [r3, #20]
    b49c:	687b      	ldr	r3, [r7, #4]
    b49e:	8b1b      	ldrh	r3, [r3, #24]
    b4a0:	4610      	mov	r0, r2
    b4a2:	4619      	mov	r1, r3
    b4a4:	f04f 0200 	mov.w	r2, #0	; 0x0
    b4a8:	f7f6 fa70 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	69da      	ldr	r2, [r3, #28]
    b4b0:	687b      	ldr	r3, [r7, #4]
    b4b2:	8c1b      	ldrh	r3, [r3, #32]
    b4b4:	4610      	mov	r0, r2
    b4b6:	4619      	mov	r1, r3
    b4b8:	f04f 0201 	mov.w	r2, #1	; 0x1
    b4bc:	f7f6 fa66 	bl	198c <GPIO_WriteBit>
    b4c0:	e03d      	b.n	b53e <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case GAUCHE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b4c2:	687b      	ldr	r3, [r7, #4]
    b4c4:	695a      	ldr	r2, [r3, #20]
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	8b1b      	ldrh	r3, [r3, #24]
    b4ca:	4610      	mov	r0, r2
    b4cc:	4619      	mov	r1, r3
    b4ce:	f04f 0201 	mov.w	r2, #1	; 0x1
    b4d2:	f7f6 fa5b 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b4d6:	687b      	ldr	r3, [r7, #4]
    b4d8:	69da      	ldr	r2, [r3, #28]
    b4da:	687b      	ldr	r3, [r7, #4]
    b4dc:	8c1b      	ldrh	r3, [r3, #32]
    b4de:	4610      	mov	r0, r2
    b4e0:	4619      	mov	r1, r3
    b4e2:	f04f 0201 	mov.w	r2, #1	; 0x1
    b4e6:	f7f6 fa51 	bl	198c <GPIO_WriteBit>
    b4ea:	e028      	b.n	b53e <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	695a      	ldr	r2, [r3, #20]
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	8b1b      	ldrh	r3, [r3, #24]
    b4f4:	4610      	mov	r0, r2
    b4f6:	4619      	mov	r1, r3
    b4f8:	f04f 0200 	mov.w	r2, #0	; 0x0
    b4fc:	f7f6 fa46 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b500:	687b      	ldr	r3, [r7, #4]
    b502:	69da      	ldr	r2, [r3, #28]
    b504:	687b      	ldr	r3, [r7, #4]
    b506:	8c1b      	ldrh	r3, [r3, #32]
    b508:	4610      	mov	r0, r2
    b50a:	4619      	mov	r1, r3
    b50c:	f04f 0200 	mov.w	r2, #0	; 0x0
    b510:	f7f6 fa3c 	bl	198c <GPIO_WriteBit>
    b514:	e013      	b.n	b53e <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b516:	687b      	ldr	r3, [r7, #4]
    b518:	695a      	ldr	r2, [r3, #20]
    b51a:	687b      	ldr	r3, [r7, #4]
    b51c:	8b1b      	ldrh	r3, [r3, #24]
    b51e:	4610      	mov	r0, r2
    b520:	4619      	mov	r1, r3
    b522:	f04f 0201 	mov.w	r2, #1	; 0x1
    b526:	f7f6 fa31 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b52a:	687b      	ldr	r3, [r7, #4]
    b52c:	69da      	ldr	r2, [r3, #28]
    b52e:	687b      	ldr	r3, [r7, #4]
    b530:	8c1b      	ldrh	r3, [r3, #32]
    b532:	4610      	mov	r0, r2
    b534:	4619      	mov	r1, r3
    b536:	f04f 0200 	mov.w	r2, #0	; 0x0
    b53a:	f7f6 fa27 	bl	198c <GPIO_WriteBit>
            break;
    }

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b53e:	687b      	ldr	r3, [r7, #4]
    b540:	681b      	ldr	r3, [r3, #0]
    b542:	4618      	mov	r0, r3
    b544:	f04f 0100 	mov.w	r1, #0	; 0x0
    b548:	f7f8 fce0 	bl	3f0c <TIM_SetCounter>
}
    b54c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b550:	46bd      	mov	sp, r7
    b552:	bd80      	pop	{r7, pc}

0000b554 <_ZN29CommandCalibrerCapteurCouleur6updateEv>:
    : capteurCouleur(capteur), state(0), resultat(0)
{
}

// récupère la valeur d'un capteur et passe à un autre
void CommandCalibrerCapteurCouleur::update()
    b554:	b590      	push	{r4, r7, lr}
    b556:	b083      	sub	sp, #12
    b558:	af00      	add	r7, sp, #0
    b55a:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b55c:	687b      	ldr	r3, [r7, #4]
    b55e:	689b      	ldr	r3, [r3, #8]
    b560:	2b04      	cmp	r3, #4
    b562:	f200 8082 	bhi.w	b66a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
    b566:	a201      	add	r2, pc, #4	(adr r2, b56c <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x18>)
    b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b56c:	0000b581 	.word	0x0000b581
    b570:	0000b59d 	.word	0x0000b59d
    b574:	0000b5d1 	.word	0x0000b5d1
    b578:	0000b605 	.word	0x0000b605
    b57c:	0000b639 	.word	0x0000b639
    {
        case 0:
            capteurCouleur->activerCapteur(GAUCHE_HAUT);
    b580:	687b      	ldr	r3, [r7, #4]
    b582:	685b      	ldr	r3, [r3, #4]
    b584:	4618      	mov	r0, r3
    b586:	f04f 0100 	mov.w	r1, #0	; 0x0
    b58a:	f7ff ff71 	bl	b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b58e:	687b      	ldr	r3, [r7, #4]
    b590:	689b      	ldr	r3, [r3, #8]
    b592:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b596:	687b      	ldr	r3, [r7, #4]
    b598:	609a      	str	r2, [r3, #8]
    b59a:	e066      	b.n	b66a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 1:
            resultat += capteurCouleur->getTickValue();
    b59c:	687b      	ldr	r3, [r7, #4]
    b59e:	899c      	ldrh	r4, [r3, #12]
    b5a0:	687b      	ldr	r3, [r7, #4]
    b5a2:	685b      	ldr	r3, [r3, #4]
    b5a4:	4618      	mov	r0, r3
    b5a6:	f7ff ff4b 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b5aa:	4603      	mov	r3, r0
    b5ac:	4423      	add	r3, r4
    b5ae:	b29b      	uxth	r3, r3
    b5b0:	687a      	ldr	r2, [r7, #4]
    b5b2:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(GAUCHE_BAS);
    b5b4:	687b      	ldr	r3, [r7, #4]
    b5b6:	685b      	ldr	r3, [r3, #4]
    b5b8:	4618      	mov	r0, r3
    b5ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    b5be:	f7ff ff57 	bl	b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b5c2:	687b      	ldr	r3, [r7, #4]
    b5c4:	689b      	ldr	r3, [r3, #8]
    b5c6:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b5ca:	687b      	ldr	r3, [r7, #4]
    b5cc:	609a      	str	r2, [r3, #8]
    b5ce:	e04c      	b.n	b66a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 2:
            resultat += capteurCouleur->getTickValue();
    b5d0:	687b      	ldr	r3, [r7, #4]
    b5d2:	899c      	ldrh	r4, [r3, #12]
    b5d4:	687b      	ldr	r3, [r7, #4]
    b5d6:	685b      	ldr	r3, [r3, #4]
    b5d8:	4618      	mov	r0, r3
    b5da:	f7ff ff31 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b5de:	4603      	mov	r3, r0
    b5e0:	4423      	add	r3, r4
    b5e2:	b29b      	uxth	r3, r3
    b5e4:	687a      	ldr	r2, [r7, #4]
    b5e6:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_HAUT);
    b5e8:	687b      	ldr	r3, [r7, #4]
    b5ea:	685b      	ldr	r3, [r3, #4]
    b5ec:	4618      	mov	r0, r3
    b5ee:	f04f 0102 	mov.w	r1, #2	; 0x2
    b5f2:	f7ff ff3d 	bl	b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b5f6:	687b      	ldr	r3, [r7, #4]
    b5f8:	689b      	ldr	r3, [r3, #8]
    b5fa:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	609a      	str	r2, [r3, #8]
    b602:	e032      	b.n	b66a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 3:
            resultat += capteurCouleur->getTickValue();
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	899c      	ldrh	r4, [r3, #12]
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	685b      	ldr	r3, [r3, #4]
    b60c:	4618      	mov	r0, r3
    b60e:	f7ff ff17 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b612:	4603      	mov	r3, r0
    b614:	4423      	add	r3, r4
    b616:	b29b      	uxth	r3, r3
    b618:	687a      	ldr	r2, [r7, #4]
    b61a:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_BAS);
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	685b      	ldr	r3, [r3, #4]
    b620:	4618      	mov	r0, r3
    b622:	f04f 0103 	mov.w	r1, #3	; 0x3
    b626:	f7ff ff23 	bl	b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b62a:	687b      	ldr	r3, [r7, #4]
    b62c:	689b      	ldr	r3, [r3, #8]
    b62e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b632:	687b      	ldr	r3, [r7, #4]
    b634:	609a      	str	r2, [r3, #8]
    b636:	e018      	b.n	b66a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 4:
            resultat += capteurCouleur->getTickValue();
    b638:	687b      	ldr	r3, [r7, #4]
    b63a:	899c      	ldrh	r4, [r3, #12]
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	685b      	ldr	r3, [r3, #4]
    b640:	4618      	mov	r0, r3
    b642:	f7ff fefd 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b646:	4603      	mov	r3, r0
    b648:	4423      	add	r3, r4
    b64a:	b29b      	uxth	r3, r3
    b64c:	687a      	ldr	r2, [r7, #4]
    b64e:	8193      	strh	r3, [r2, #12]
            resultat /= 4;
    b650:	687b      	ldr	r3, [r7, #4]
    b652:	899b      	ldrh	r3, [r3, #12]
    b654:	ea4f 0393 	mov.w	r3, r3, lsr #2
    b658:	b29b      	uxth	r3, r3
    b65a:	687a      	ldr	r2, [r7, #4]
    b65c:	8193      	strh	r3, [r2, #12]
            state++;
    b65e:	687b      	ldr	r3, [r7, #4]
    b660:	689b      	ldr	r3, [r3, #8]
    b662:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b666:	687b      	ldr	r3, [r7, #4]
    b668:	609a      	str	r2, [r3, #8]
            break;
    }
}
    b66a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b66e:	46bd      	mov	sp, r7
    b670:	bd90      	pop	{r4, r7, pc}
    b672:	46c0      	nop			(mov r8, r8)

0000b674 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur>:
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
}

// selectionne un filtre
void CapteurCouleur::selectionnerFiltre(FiltreCapteurCouleur filtre)
    b674:	b580      	push	{r7, lr}
    b676:	b082      	sub	sp, #8
    b678:	af00      	add	r7, sp, #0
    b67a:	6078      	str	r0, [r7, #4]
    b67c:	460b      	mov	r3, r1
    b67e:	70fb      	strb	r3, [r7, #3]
{
    switch (filtre)
    b680:	78fb      	ldrb	r3, [r7, #3]
    b682:	2b03      	cmp	r3, #3
    b684:	d85d      	bhi.n	b742 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
    b686:	a201      	add	r2, pc, #4	(adr r2, b68c <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0x18>)
    b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b68c:	0000b69d 	.word	0x0000b69d
    b690:	0000b71b 	.word	0x0000b71b
    b694:	0000b6c7 	.word	0x0000b6c7
    b698:	0000b6f1 	.word	0x0000b6f1
    {
        case FILTRE_ROUGE:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b69c:	687b      	ldr	r3, [r7, #4]
    b69e:	6a5a      	ldr	r2, [r3, #36]
    b6a0:	687b      	ldr	r3, [r7, #4]
    b6a2:	8d1b      	ldrh	r3, [r3, #40]
    b6a4:	4610      	mov	r0, r2
    b6a6:	4619      	mov	r1, r3
    b6a8:	f04f 0200 	mov.w	r2, #0	; 0x0
    b6ac:	f7f6 f96e 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b6b0:	687b      	ldr	r3, [r7, #4]
    b6b2:	6ada      	ldr	r2, [r3, #44]
    b6b4:	687b      	ldr	r3, [r7, #4]
    b6b6:	8e1b      	ldrh	r3, [r3, #48]
    b6b8:	4610      	mov	r0, r2
    b6ba:	4619      	mov	r1, r3
    b6bc:	f04f 0200 	mov.w	r2, #0	; 0x0
    b6c0:	f7f6 f964 	bl	198c <GPIO_WriteBit>
    b6c4:	e03d      	b.n	b742 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>

            break;
        case FILTRE_BLEU:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b6c6:	687b      	ldr	r3, [r7, #4]
    b6c8:	6a5a      	ldr	r2, [r3, #36]
    b6ca:	687b      	ldr	r3, [r7, #4]
    b6cc:	8d1b      	ldrh	r3, [r3, #40]
    b6ce:	4610      	mov	r0, r2
    b6d0:	4619      	mov	r1, r3
    b6d2:	f04f 0201 	mov.w	r2, #1	; 0x1
    b6d6:	f7f6 f959 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b6da:	687b      	ldr	r3, [r7, #4]
    b6dc:	6ada      	ldr	r2, [r3, #44]
    b6de:	687b      	ldr	r3, [r7, #4]
    b6e0:	8e1b      	ldrh	r3, [r3, #48]
    b6e2:	4610      	mov	r0, r2
    b6e4:	4619      	mov	r1, r3
    b6e6:	f04f 0200 	mov.w	r2, #0	; 0x0
    b6ea:	f7f6 f94f 	bl	198c <GPIO_WriteBit>
    b6ee:	e028      	b.n	b742 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_BLANC:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b6f0:	687b      	ldr	r3, [r7, #4]
    b6f2:	6a5a      	ldr	r2, [r3, #36]
    b6f4:	687b      	ldr	r3, [r7, #4]
    b6f6:	8d1b      	ldrh	r3, [r3, #40]
    b6f8:	4610      	mov	r0, r2
    b6fa:	4619      	mov	r1, r3
    b6fc:	f04f 0200 	mov.w	r2, #0	; 0x0
    b700:	f7f6 f944 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b704:	687b      	ldr	r3, [r7, #4]
    b706:	6ada      	ldr	r2, [r3, #44]
    b708:	687b      	ldr	r3, [r7, #4]
    b70a:	8e1b      	ldrh	r3, [r3, #48]
    b70c:	4610      	mov	r0, r2
    b70e:	4619      	mov	r1, r3
    b710:	f04f 0201 	mov.w	r2, #1	; 0x1
    b714:	f7f6 f93a 	bl	198c <GPIO_WriteBit>
    b718:	e013      	b.n	b742 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_VERT:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b71a:	687b      	ldr	r3, [r7, #4]
    b71c:	6a5a      	ldr	r2, [r3, #36]
    b71e:	687b      	ldr	r3, [r7, #4]
    b720:	8d1b      	ldrh	r3, [r3, #40]
    b722:	4610      	mov	r0, r2
    b724:	4619      	mov	r1, r3
    b726:	f04f 0201 	mov.w	r2, #1	; 0x1
    b72a:	f7f6 f92f 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b72e:	687b      	ldr	r3, [r7, #4]
    b730:	6ada      	ldr	r2, [r3, #44]
    b732:	687b      	ldr	r3, [r7, #4]
    b734:	8e1b      	ldrh	r3, [r3, #48]
    b736:	4610      	mov	r0, r2
    b738:	4619      	mov	r1, r3
    b73a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b73e:	f7f6 f925 	bl	198c <GPIO_WriteBit>
            break;
    }
}
    b742:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b746:	46bd      	mov	sp, r7
    b748:	bd80      	pop	{r7, pc}
    b74a:	46c0      	nop			(mov r8, r8)

0000b74c <_ZN14CapteurCouleur19allumerDiodesBleuesEb>:
void CapteurCouleur::allumerDiodesRouges(bool allumer)
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
}

void CapteurCouleur::allumerDiodesBleues(bool allumer)
    b74c:	b580      	push	{r7, lr}
    b74e:	b086      	sub	sp, #24
    b750:	af00      	add	r7, sp, #0
    b752:	6178      	str	r0, [r7, #20]
    b754:	460b      	mov	r3, r1
    b756:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
    b758:	697b      	ldr	r3, [r7, #20]
    b75a:	68db      	ldr	r3, [r3, #12]
    b75c:	607b      	str	r3, [r7, #4]
    b75e:	697b      	ldr	r3, [r7, #20]
    b760:	8a1b      	ldrh	r3, [r3, #16]
    b762:	60bb      	str	r3, [r7, #8]
    b764:	7cfb      	ldrb	r3, [r7, #19]
    b766:	2b00      	cmp	r3, #0
    b768:	d003      	beq.n	b772 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x26>
    b76a:	f04f 0301 	mov.w	r3, #1	; 0x1
    b76e:	60fb      	str	r3, [r7, #12]
    b770:	e002      	b.n	b778 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x2c>
    b772:	f04f 0300 	mov.w	r3, #0	; 0x0
    b776:	60fb      	str	r3, [r7, #12]
    b778:	6878      	ldr	r0, [r7, #4]
    b77a:	68b9      	ldr	r1, [r7, #8]
    b77c:	68fa      	ldr	r2, [r7, #12]
    b77e:	f7f6 f905 	bl	198c <GPIO_WriteBit>
}
    b782:	f107 0718 	add.w	r7, r7, #24	; 0x18
    b786:	46bd      	mov	sp, r7
    b788:	bd80      	pop	{r7, pc}
    b78a:	46c0      	nop			(mov r8, r8)

0000b78c <_ZN14CapteurCouleur19allumerDiodesRougesEb>:
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
}

// allume/éteint les diodes
void CapteurCouleur::allumerDiodesRouges(bool allumer)
    b78c:	b580      	push	{r7, lr}
    b78e:	b086      	sub	sp, #24
    b790:	af00      	add	r7, sp, #0
    b792:	6178      	str	r0, [r7, #20]
    b794:	460b      	mov	r3, r1
    b796:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
    b798:	697b      	ldr	r3, [r7, #20]
    b79a:	685b      	ldr	r3, [r3, #4]
    b79c:	607b      	str	r3, [r7, #4]
    b79e:	697b      	ldr	r3, [r7, #20]
    b7a0:	891b      	ldrh	r3, [r3, #8]
    b7a2:	60bb      	str	r3, [r7, #8]
    b7a4:	7cfb      	ldrb	r3, [r7, #19]
    b7a6:	2b00      	cmp	r3, #0
    b7a8:	d003      	beq.n	b7b2 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x26>
    b7aa:	f04f 0301 	mov.w	r3, #1	; 0x1
    b7ae:	60fb      	str	r3, [r7, #12]
    b7b0:	e002      	b.n	b7b8 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x2c>
    b7b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    b7b6:	60fb      	str	r3, [r7, #12]
    b7b8:	6878      	ldr	r0, [r7, #4]
    b7ba:	68b9      	ldr	r1, [r7, #8]
    b7bc:	68fa      	ldr	r2, [r7, #12]
    b7be:	f7f6 f8e5 	bl	198c <GPIO_WriteBit>
}
    b7c2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    b7c6:	46bd      	mov	sp, r7
    b7c8:	bd80      	pop	{r7, pc}
    b7ca:	46c0      	nop			(mov r8, r8)

0000b7cc <_ZN19CommandCheckCouleur6updateEv>:
    capteur->activerCapteur(pos);
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
}

// check la couleur
void CommandCheckCouleur::update()
    b7cc:	b580      	push	{r7, lr}
    b7ce:	b082      	sub	sp, #8
    b7d0:	af00      	add	r7, sp, #0
    b7d2:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b7d4:	687b      	ldr	r3, [r7, #4]
    b7d6:	695b      	ldr	r3, [r3, #20]
    b7d8:	2b03      	cmp	r3, #3
    b7da:	d875      	bhi.n	b8c8 <_ZN19CommandCheckCouleur6updateEv+0xfc>
    b7dc:	a201      	add	r2, pc, #4	(adr r2, b7e4 <_ZN19CommandCheckCouleur6updateEv+0x18>)
    b7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b7e2:	46c0      	nop			(mov r8, r8)
    b7e4:	0000b7f5 	.word	0x0000b7f5
    b7e8:	0000b823 	.word	0x0000b823
    b7ec:	0000b863 	.word	0x0000b863
    b7f0:	0000b891 	.word	0x0000b891
    {
        // attente d'allumage de la diode bleu
        case 0:
            if (nbUpdatesRestantes >=0)
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	691b      	ldr	r3, [r3, #16]
    b7f8:	2b00      	cmp	r3, #0
    b7fa:	db06      	blt.n	b80a <_ZN19CommandCheckCouleur6updateEv+0x3e>
                nbUpdatesRestantes--;
    b7fc:	687b      	ldr	r3, [r7, #4]
    b7fe:	691b      	ldr	r3, [r3, #16]
    b800:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    b804:	687b      	ldr	r3, [r7, #4]
    b806:	611a      	str	r2, [r3, #16]
    b808:	e05e      	b.n	b8c8 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	695b      	ldr	r3, [r3, #20]
    b80e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b812:	687b      	ldr	r3, [r7, #4]
    b814:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    b816:	687b      	ldr	r3, [r7, #4]
    b818:	689b      	ldr	r3, [r3, #8]
    b81a:	4618      	mov	r0, r3
    b81c:	f7ff fe10 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b820:	e052      	b.n	b8c8 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;

        // récupération de la valeur bleu
        case 1:
            bleuMesure = capteurCouleur->getTickValue();
    b822:	687b      	ldr	r3, [r7, #4]
    b824:	689b      	ldr	r3, [r3, #8]
    b826:	4618      	mov	r0, r3
    b828:	f7ff fe0a 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b82c:	4603      	mov	r3, r0
    b82e:	687a      	ldr	r2, [r7, #4]
    b830:	8193      	strh	r3, [r2, #12]
            capteurCouleur->allumerDiodesBleues(false);
    b832:	687b      	ldr	r3, [r7, #4]
    b834:	689b      	ldr	r3, [r3, #8]
    b836:	4618      	mov	r0, r3
    b838:	f04f 0100 	mov.w	r1, #0	; 0x0
    b83c:	f7ff ff86 	bl	b74c <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(true);
    b840:	687b      	ldr	r3, [r7, #4]
    b842:	689b      	ldr	r3, [r3, #8]
    b844:	4618      	mov	r0, r3
    b846:	f04f 0101 	mov.w	r1, #1	; 0x1
    b84a:	f7ff ff9f 	bl	b78c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b84e:	687a      	ldr	r2, [r7, #4]
    b850:	f04f 030a 	mov.w	r3, #10	; 0xa
    b854:	6113      	str	r3, [r2, #16]
            state++;
    b856:	687b      	ldr	r3, [r7, #4]
    b858:	695b      	ldr	r3, [r3, #20]
    b85a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b85e:	687b      	ldr	r3, [r7, #4]
    b860:	615a      	str	r2, [r3, #20]

        // attente d'allumage de la diode rouge
        case 2:
            if (nbUpdatesRestantes >=0)
    b862:	687b      	ldr	r3, [r7, #4]
    b864:	691b      	ldr	r3, [r3, #16]
    b866:	2b00      	cmp	r3, #0
    b868:	db06      	blt.n	b878 <_ZN19CommandCheckCouleur6updateEv+0xac>
                nbUpdatesRestantes--;
    b86a:	687b      	ldr	r3, [r7, #4]
    b86c:	691b      	ldr	r3, [r3, #16]
    b86e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    b872:	687b      	ldr	r3, [r7, #4]
    b874:	611a      	str	r2, [r3, #16]
    b876:	e027      	b.n	b8c8 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    b878:	687b      	ldr	r3, [r7, #4]
    b87a:	695b      	ldr	r3, [r3, #20]
    b87c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b880:	687b      	ldr	r3, [r7, #4]
    b882:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    b884:	687b      	ldr	r3, [r7, #4]
    b886:	689b      	ldr	r3, [r3, #8]
    b888:	4618      	mov	r0, r3
    b88a:	f7ff fdd9 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b88e:	e01b      	b.n	b8c8 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;
        // récupération de la valeur bleu
        case 3:
            rougeMesure = capteurCouleur->getTickValue();
    b890:	687b      	ldr	r3, [r7, #4]
    b892:	689b      	ldr	r3, [r3, #8]
    b894:	4618      	mov	r0, r3
    b896:	f7ff fdd3 	bl	b440 <_ZN14CapteurCouleur12getTickValueEv>
    b89a:	4603      	mov	r3, r0
    b89c:	687a      	ldr	r2, [r7, #4]
    b89e:	81d3      	strh	r3, [r2, #14]
            capteurCouleur->allumerDiodesBleues(false);
    b8a0:	687b      	ldr	r3, [r7, #4]
    b8a2:	689b      	ldr	r3, [r3, #8]
    b8a4:	4618      	mov	r0, r3
    b8a6:	f04f 0100 	mov.w	r1, #0	; 0x0
    b8aa:	f7ff ff4f 	bl	b74c <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(false);
    b8ae:	687b      	ldr	r3, [r7, #4]
    b8b0:	689b      	ldr	r3, [r3, #8]
    b8b2:	4618      	mov	r0, r3
    b8b4:	f04f 0100 	mov.w	r1, #0	; 0x0
    b8b8:	f7ff ff68 	bl	b78c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            state++;
    b8bc:	687b      	ldr	r3, [r7, #4]
    b8be:	695b      	ldr	r3, [r3, #20]
    b8c0:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b8c4:	687b      	ldr	r3, [r7, #4]
    b8c6:	615a      	str	r2, [r3, #20]
    }
}
    b8c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b8cc:	46bd      	mov	sp, r7
    b8ce:	bd80      	pop	{r7, pc}

0000b8d0 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    b8d0:	b580      	push	{r7, lr}
    b8d2:	b084      	sub	sp, #16
    b8d4:	af00      	add	r7, sp, #0
    b8d6:	60f8      	str	r0, [r7, #12]
    b8d8:	60b9      	str	r1, [r7, #8]
    b8da:	4619      	mov	r1, r3
    b8dc:	4613      	mov	r3, r2
    b8de:	71fb      	strb	r3, [r7, #7]
    b8e0:	460b      	mov	r3, r1
    b8e2:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    b8e4:	68fb      	ldr	r3, [r7, #12]
    b8e6:	4618      	mov	r0, r3
    b8e8:	f7fc f9fa 	bl	7ce0 <_ZN7CommandC2Ev>
    b8ec:	68fa      	ldr	r2, [r7, #12]
    b8ee:	4b18      	ldr	r3, [pc, #96]	(b950 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    b8f0:	6013      	str	r3, [r2, #0]
    b8f2:	68fa      	ldr	r2, [r7, #12]
    b8f4:	88bb      	ldrh	r3, [r7, #4]
    b8f6:	8093      	strh	r3, [r2, #4]
    b8f8:	68fa      	ldr	r2, [r7, #12]
    b8fa:	68bb      	ldr	r3, [r7, #8]
    b8fc:	6093      	str	r3, [r2, #8]
    b8fe:	68fa      	ldr	r2, [r7, #12]
    b900:	f04f 0300 	mov.w	r3, #0	; 0x0
    b904:	8193      	strh	r3, [r2, #12]
    b906:	68fa      	ldr	r2, [r7, #12]
    b908:	f04f 0300 	mov.w	r3, #0	; 0x0
    b90c:	81d3      	strh	r3, [r2, #14]
    b90e:	68fa      	ldr	r2, [r7, #12]
    b910:	f04f 030a 	mov.w	r3, #10	; 0xa
    b914:	6113      	str	r3, [r2, #16]
    b916:	68fa      	ldr	r2, [r7, #12]
    b918:	f04f 0300 	mov.w	r3, #0	; 0x0
    b91c:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    b91e:	68b8      	ldr	r0, [r7, #8]
    b920:	f04f 0101 	mov.w	r1, #1	; 0x1
    b924:	f7ff ff12 	bl	b74c <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    b928:	68b8      	ldr	r0, [r7, #8]
    b92a:	f04f 0100 	mov.w	r1, #0	; 0x0
    b92e:	f7ff ff2d 	bl	b78c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    b932:	79fb      	ldrb	r3, [r7, #7]
    b934:	68b8      	ldr	r0, [r7, #8]
    b936:	4619      	mov	r1, r3
    b938:	f7ff fd9a 	bl	b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b93c:	68fa      	ldr	r2, [r7, #12]
    b93e:	f04f 030a 	mov.w	r3, #10	; 0xa
    b942:	6113      	str	r3, [r2, #16]
}
    b944:	68fb      	ldr	r3, [r7, #12]
    b946:	4618      	mov	r0, r3
    b948:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b94c:	46bd      	mov	sp, r7
    b94e:	bd80      	pop	{r7, pc}
    b950:	00021e28 	.word	0x00021e28

0000b954 <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    b954:	b580      	push	{r7, lr}
    b956:	b084      	sub	sp, #16
    b958:	af00      	add	r7, sp, #0
    b95a:	60f8      	str	r0, [r7, #12]
    b95c:	60b9      	str	r1, [r7, #8]
    b95e:	4619      	mov	r1, r3
    b960:	4613      	mov	r3, r2
    b962:	71fb      	strb	r3, [r7, #7]
    b964:	460b      	mov	r3, r1
    b966:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    b968:	68fb      	ldr	r3, [r7, #12]
    b96a:	4618      	mov	r0, r3
    b96c:	f7fc f9b8 	bl	7ce0 <_ZN7CommandC2Ev>
    b970:	68fa      	ldr	r2, [r7, #12]
    b972:	4b18      	ldr	r3, [pc, #96]	(b9d4 <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    b974:	6013      	str	r3, [r2, #0]
    b976:	68fa      	ldr	r2, [r7, #12]
    b978:	88bb      	ldrh	r3, [r7, #4]
    b97a:	8093      	strh	r3, [r2, #4]
    b97c:	68fa      	ldr	r2, [r7, #12]
    b97e:	68bb      	ldr	r3, [r7, #8]
    b980:	6093      	str	r3, [r2, #8]
    b982:	68fa      	ldr	r2, [r7, #12]
    b984:	f04f 0300 	mov.w	r3, #0	; 0x0
    b988:	8193      	strh	r3, [r2, #12]
    b98a:	68fa      	ldr	r2, [r7, #12]
    b98c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b990:	81d3      	strh	r3, [r2, #14]
    b992:	68fa      	ldr	r2, [r7, #12]
    b994:	f04f 030a 	mov.w	r3, #10	; 0xa
    b998:	6113      	str	r3, [r2, #16]
    b99a:	68fa      	ldr	r2, [r7, #12]
    b99c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b9a0:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    b9a2:	68b8      	ldr	r0, [r7, #8]
    b9a4:	f04f 0101 	mov.w	r1, #1	; 0x1
    b9a8:	f7ff fed0 	bl	b74c <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    b9ac:	68b8      	ldr	r0, [r7, #8]
    b9ae:	f04f 0100 	mov.w	r1, #0	; 0x0
    b9b2:	f7ff feeb 	bl	b78c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    b9b6:	79fb      	ldrb	r3, [r7, #7]
    b9b8:	68b8      	ldr	r0, [r7, #8]
    b9ba:	4619      	mov	r1, r3
    b9bc:	f7ff fd58 	bl	b470 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b9c0:	68fa      	ldr	r2, [r7, #12]
    b9c2:	f04f 030a 	mov.w	r3, #10	; 0xa
    b9c6:	6113      	str	r3, [r2, #16]
}
    b9c8:	68fb      	ldr	r3, [r7, #12]
    b9ca:	4618      	mov	r0, r3
    b9cc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b9d0:	46bd      	mov	sp, r7
    b9d2:	bd80      	pop	{r7, pc}
    b9d4:	00021e28 	.word	0x00021e28

0000b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>:

#include "capteurCouleur.h"
#include "timerHandler.h"

// permet d'initialiser une pin
void initialiserPinCapteur(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x)
    b9d8:	b580      	push	{r7, lr}
    b9da:	b084      	sub	sp, #16
    b9dc:	af00      	add	r7, sp, #0
    b9de:	6078      	str	r0, [r7, #4]
    b9e0:	460b      	mov	r3, r1
    b9e2:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    b9e4:	f04f 0310 	mov.w	r3, #16	; 0x10
    b9e8:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b9ea:	f04f 0303 	mov.w	r3, #3	; 0x3
    b9ee:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_x;
    b9f0:	887b      	ldrh	r3, [r7, #2]
    b9f2:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    b9f4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    b9f8:	6878      	ldr	r0, [r7, #4]
    b9fa:	4619      	mov	r1, r3
    b9fc:	f7f5 fe58 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOx, GPIO_Pin_x, Bit_RESET);
    ba00:	887b      	ldrh	r3, [r7, #2]
    ba02:	6878      	ldr	r0, [r7, #4]
    ba04:	4619      	mov	r1, r3
    ba06:	f04f 0200 	mov.w	r2, #0	; 0x0
    ba0a:	f7f5 ffbf 	bl	198c <GPIO_WriteBit>
}
    ba0e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ba12:	46bd      	mov	sp, r7
    ba14:	bd80      	pop	{r7, pc}
    ba16:	46c0      	nop			(mov r8, r8)

0000ba18 <_ZN14CapteurCouleurC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    ba18:	b580      	push	{r7, lr}
    ba1a:	b088      	sub	sp, #32
    ba1c:	af00      	add	r7, sp, #0
    ba1e:	60f8      	str	r0, [r7, #12]
    ba20:	60b9      	str	r1, [r7, #8]
    ba22:	607a      	str	r2, [r7, #4]
    ba24:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    ba26:	68fa      	ldr	r2, [r7, #12]
    ba28:	68bb      	ldr	r3, [r7, #8]
    ba2a:	6013      	str	r3, [r2, #0]
    ba2c:	68fa      	ldr	r2, [r7, #12]
    ba2e:	6abb      	ldr	r3, [r7, #40]
    ba30:	6053      	str	r3, [r2, #4]
    ba32:	68fa      	ldr	r2, [r7, #12]
    ba34:	8dbb      	ldrh	r3, [r7, #44]
    ba36:	8113      	strh	r3, [r2, #8]
    ba38:	68fa      	ldr	r2, [r7, #12]
    ba3a:	6b3b      	ldr	r3, [r7, #48]
    ba3c:	60d3      	str	r3, [r2, #12]
    ba3e:	68fa      	ldr	r2, [r7, #12]
    ba40:	8ebb      	ldrh	r3, [r7, #52]
    ba42:	8213      	strh	r3, [r2, #16]
    ba44:	68fa      	ldr	r2, [r7, #12]
    ba46:	6bbb      	ldr	r3, [r7, #56]
    ba48:	6153      	str	r3, [r2, #20]
    ba4a:	68fa      	ldr	r2, [r7, #12]
    ba4c:	8fbb      	ldrh	r3, [r7, #60]
    ba4e:	8313      	strh	r3, [r2, #24]
    ba50:	68fa      	ldr	r2, [r7, #12]
    ba52:	6c3b      	ldr	r3, [r7, #64]
    ba54:	61d3      	str	r3, [r2, #28]
    ba56:	68fa      	ldr	r2, [r7, #12]
    ba58:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    ba5c:	8413      	strh	r3, [r2, #32]
    ba5e:	68fa      	ldr	r2, [r7, #12]
    ba60:	6cbb      	ldr	r3, [r7, #72]
    ba62:	6253      	str	r3, [r2, #36]
    ba64:	68fa      	ldr	r2, [r7, #12]
    ba66:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    ba6a:	8513      	strh	r3, [r2, #40]
    ba6c:	68fa      	ldr	r2, [r7, #12]
    ba6e:	6d3b      	ldr	r3, [r7, #80]
    ba70:	62d3      	str	r3, [r2, #44]
    ba72:	68fa      	ldr	r2, [r7, #12]
    ba74:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    ba78:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    ba7a:	f04f 0348 	mov.w	r3, #72	; 0x48
    ba7e:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    ba80:	f04f 0303 	mov.w	r3, #3	; 0x3
    ba84:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    ba86:	887b      	ldrh	r3, [r7, #2]
    ba88:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    ba8a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    ba8e:	6878      	ldr	r0, [r7, #4]
    ba90:	4619      	mov	r1, r3
    ba92:	f7f5 fe0d 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    ba96:	68b8      	ldr	r0, [r7, #8]
    ba98:	f001 fcce 	bl	d438 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    ba9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    baa0:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    baa2:	f04f 0300 	mov.w	r3, #0	; 0x0
    baa6:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    baa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    baac:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    baae:	f04f 0300 	mov.w	r3, #0	; 0x0
    bab2:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    bab4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bab8:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    baba:	f107 0312 	add.w	r3, r7, #18	; 0x12
    babe:	68b8      	ldr	r0, [r7, #8]
    bac0:	4619      	mov	r1, r3
    bac2:	f7f6 feb9 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    bac6:	68b8      	ldr	r0, [r7, #8]
    bac8:	f04f 0140 	mov.w	r1, #64	; 0x40
    bacc:	f04f 0200 	mov.w	r2, #0	; 0x0
    bad0:	f04f 0300 	mov.w	r3, #0	; 0x0
    bad4:	f7f7 fb9a 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    bad8:	68b8      	ldr	r0, [r7, #8]
    bada:	f04f 0101 	mov.w	r1, #1	; 0x1
    bade:	f7f7 faa3 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    bae2:	68b8      	ldr	r0, [r7, #8]
    bae4:	f04f 0100 	mov.w	r1, #0	; 0x0
    bae8:	f7f8 fa10 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    baec:	68fb      	ldr	r3, [r7, #12]
    baee:	685a      	ldr	r2, [r3, #4]
    baf0:	68fb      	ldr	r3, [r7, #12]
    baf2:	891b      	ldrh	r3, [r3, #8]
    baf4:	4610      	mov	r0, r2
    baf6:	4619      	mov	r1, r3
    baf8:	f7ff ff6e 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    bafc:	68fb      	ldr	r3, [r7, #12]
    bafe:	68da      	ldr	r2, [r3, #12]
    bb00:	68fb      	ldr	r3, [r7, #12]
    bb02:	8a1b      	ldrh	r3, [r3, #16]
    bb04:	4610      	mov	r0, r2
    bb06:	4619      	mov	r1, r3
    bb08:	f7ff ff66 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    bb0c:	68fb      	ldr	r3, [r7, #12]
    bb0e:	695a      	ldr	r2, [r3, #20]
    bb10:	68fb      	ldr	r3, [r7, #12]
    bb12:	8b1b      	ldrh	r3, [r3, #24]
    bb14:	4610      	mov	r0, r2
    bb16:	4619      	mov	r1, r3
    bb18:	f7ff ff5e 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    bb1c:	68fb      	ldr	r3, [r7, #12]
    bb1e:	69da      	ldr	r2, [r3, #28]
    bb20:	68fb      	ldr	r3, [r7, #12]
    bb22:	8c1b      	ldrh	r3, [r3, #32]
    bb24:	4610      	mov	r0, r2
    bb26:	4619      	mov	r1, r3
    bb28:	f7ff ff56 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    bb2c:	68fb      	ldr	r3, [r7, #12]
    bb2e:	6a5a      	ldr	r2, [r3, #36]
    bb30:	68fb      	ldr	r3, [r7, #12]
    bb32:	8d1b      	ldrh	r3, [r3, #40]
    bb34:	4610      	mov	r0, r2
    bb36:	4619      	mov	r1, r3
    bb38:	f7ff ff4e 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    bb3c:	68fb      	ldr	r3, [r7, #12]
    bb3e:	6ada      	ldr	r2, [r3, #44]
    bb40:	68fb      	ldr	r3, [r7, #12]
    bb42:	8e1b      	ldrh	r3, [r3, #48]
    bb44:	4610      	mov	r0, r2
    bb46:	4619      	mov	r1, r3
    bb48:	f7ff ff46 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    bb4c:	68fb      	ldr	r3, [r7, #12]
    bb4e:	4618      	mov	r0, r3
    bb50:	f107 0720 	add.w	r7, r7, #32	; 0x20
    bb54:	46bd      	mov	sp, r7
    bb56:	bd80      	pop	{r7, pc}

0000bb58 <_ZN14CapteurCouleurC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    bb58:	b580      	push	{r7, lr}
    bb5a:	b088      	sub	sp, #32
    bb5c:	af00      	add	r7, sp, #0
    bb5e:	60f8      	str	r0, [r7, #12]
    bb60:	60b9      	str	r1, [r7, #8]
    bb62:	607a      	str	r2, [r7, #4]
    bb64:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    bb66:	68fa      	ldr	r2, [r7, #12]
    bb68:	68bb      	ldr	r3, [r7, #8]
    bb6a:	6013      	str	r3, [r2, #0]
    bb6c:	68fa      	ldr	r2, [r7, #12]
    bb6e:	6abb      	ldr	r3, [r7, #40]
    bb70:	6053      	str	r3, [r2, #4]
    bb72:	68fa      	ldr	r2, [r7, #12]
    bb74:	8dbb      	ldrh	r3, [r7, #44]
    bb76:	8113      	strh	r3, [r2, #8]
    bb78:	68fa      	ldr	r2, [r7, #12]
    bb7a:	6b3b      	ldr	r3, [r7, #48]
    bb7c:	60d3      	str	r3, [r2, #12]
    bb7e:	68fa      	ldr	r2, [r7, #12]
    bb80:	8ebb      	ldrh	r3, [r7, #52]
    bb82:	8213      	strh	r3, [r2, #16]
    bb84:	68fa      	ldr	r2, [r7, #12]
    bb86:	6bbb      	ldr	r3, [r7, #56]
    bb88:	6153      	str	r3, [r2, #20]
    bb8a:	68fa      	ldr	r2, [r7, #12]
    bb8c:	8fbb      	ldrh	r3, [r7, #60]
    bb8e:	8313      	strh	r3, [r2, #24]
    bb90:	68fa      	ldr	r2, [r7, #12]
    bb92:	6c3b      	ldr	r3, [r7, #64]
    bb94:	61d3      	str	r3, [r2, #28]
    bb96:	68fa      	ldr	r2, [r7, #12]
    bb98:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    bb9c:	8413      	strh	r3, [r2, #32]
    bb9e:	68fa      	ldr	r2, [r7, #12]
    bba0:	6cbb      	ldr	r3, [r7, #72]
    bba2:	6253      	str	r3, [r2, #36]
    bba4:	68fa      	ldr	r2, [r7, #12]
    bba6:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    bbaa:	8513      	strh	r3, [r2, #40]
    bbac:	68fa      	ldr	r2, [r7, #12]
    bbae:	6d3b      	ldr	r3, [r7, #80]
    bbb0:	62d3      	str	r3, [r2, #44]
    bbb2:	68fa      	ldr	r2, [r7, #12]
    bbb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    bbb8:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    bbba:	f04f 0348 	mov.w	r3, #72	; 0x48
    bbbe:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    bbc0:	f04f 0303 	mov.w	r3, #3	; 0x3
    bbc4:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    bbc6:	887b      	ldrh	r3, [r7, #2]
    bbc8:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    bbca:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    bbce:	6878      	ldr	r0, [r7, #4]
    bbd0:	4619      	mov	r1, r3
    bbd2:	f7f5 fd6d 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    bbd6:	68b8      	ldr	r0, [r7, #8]
    bbd8:	f001 fc2e 	bl	d438 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    bbdc:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbe0:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    bbe2:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbe6:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    bbe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bbec:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    bbee:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbf2:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    bbf4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbf8:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    bbfa:	f107 0312 	add.w	r3, r7, #18	; 0x12
    bbfe:	68b8      	ldr	r0, [r7, #8]
    bc00:	4619      	mov	r1, r3
    bc02:	f7f6 fe19 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    bc06:	68b8      	ldr	r0, [r7, #8]
    bc08:	f04f 0140 	mov.w	r1, #64	; 0x40
    bc0c:	f04f 0200 	mov.w	r2, #0	; 0x0
    bc10:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc14:	f7f7 fafa 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    bc18:	68b8      	ldr	r0, [r7, #8]
    bc1a:	f04f 0101 	mov.w	r1, #1	; 0x1
    bc1e:	f7f7 fa03 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    bc22:	68b8      	ldr	r0, [r7, #8]
    bc24:	f04f 0100 	mov.w	r1, #0	; 0x0
    bc28:	f7f8 f970 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    bc2c:	68fb      	ldr	r3, [r7, #12]
    bc2e:	685a      	ldr	r2, [r3, #4]
    bc30:	68fb      	ldr	r3, [r7, #12]
    bc32:	891b      	ldrh	r3, [r3, #8]
    bc34:	4610      	mov	r0, r2
    bc36:	4619      	mov	r1, r3
    bc38:	f7ff fece 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    bc3c:	68fb      	ldr	r3, [r7, #12]
    bc3e:	68da      	ldr	r2, [r3, #12]
    bc40:	68fb      	ldr	r3, [r7, #12]
    bc42:	8a1b      	ldrh	r3, [r3, #16]
    bc44:	4610      	mov	r0, r2
    bc46:	4619      	mov	r1, r3
    bc48:	f7ff fec6 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    bc4c:	68fb      	ldr	r3, [r7, #12]
    bc4e:	695a      	ldr	r2, [r3, #20]
    bc50:	68fb      	ldr	r3, [r7, #12]
    bc52:	8b1b      	ldrh	r3, [r3, #24]
    bc54:	4610      	mov	r0, r2
    bc56:	4619      	mov	r1, r3
    bc58:	f7ff febe 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    bc5c:	68fb      	ldr	r3, [r7, #12]
    bc5e:	69da      	ldr	r2, [r3, #28]
    bc60:	68fb      	ldr	r3, [r7, #12]
    bc62:	8c1b      	ldrh	r3, [r3, #32]
    bc64:	4610      	mov	r0, r2
    bc66:	4619      	mov	r1, r3
    bc68:	f7ff feb6 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    bc6c:	68fb      	ldr	r3, [r7, #12]
    bc6e:	6a5a      	ldr	r2, [r3, #36]
    bc70:	68fb      	ldr	r3, [r7, #12]
    bc72:	8d1b      	ldrh	r3, [r3, #40]
    bc74:	4610      	mov	r0, r2
    bc76:	4619      	mov	r1, r3
    bc78:	f7ff feae 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    bc7c:	68fb      	ldr	r3, [r7, #12]
    bc7e:	6ada      	ldr	r2, [r3, #44]
    bc80:	68fb      	ldr	r3, [r7, #12]
    bc82:	8e1b      	ldrh	r3, [r3, #48]
    bc84:	4610      	mov	r0, r2
    bc86:	4619      	mov	r1, r3
    bc88:	f7ff fea6 	bl	b9d8 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    bc8c:	68fb      	ldr	r3, [r7, #12]
    bc8e:	4618      	mov	r0, r3
    bc90:	f107 0720 	add.w	r7, r7, #32	; 0x20
    bc94:	46bd      	mov	sp, r7
    bc96:	bd80      	pop	{r7, pc}

0000bc98 <_ZN8Capteurs15getNbrOfChannelEv>:
    if (!isConverted)
        convertirDonnees();
    return (output[direction] & 0xff) == 0xff;
}

uint8_t Capteurs::getNbrOfChannel(){
    bc98:	b480      	push	{r7}
    bc9a:	b083      	sub	sp, #12
    bc9c:	af00      	add	r7, sp, #0
    bc9e:	6078      	str	r0, [r7, #4]
    return NbrOfChannel;
    bca0:	687b      	ldr	r3, [r7, #4]
    bca2:	781b      	ldrb	r3, [r3, #0]
}
    bca4:	4618      	mov	r0, r3
    bca6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    bcaa:	46bd      	mov	sp, r7
    bcac:	bc80      	pop	{r7}
    bcae:	4770      	bx	lr

0000bcb0 <_ZN8Capteurs18conversionFinishedEv>:
{
    isConverted = false;
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
}

bool Capteurs::conversionFinished()
    bcb0:	b580      	push	{r7, lr}
    bcb2:	b082      	sub	sp, #8
    bcb4:	af00      	add	r7, sp, #0
    bcb6:	6078      	str	r0, [r7, #4]
{
    //return (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET);
    return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    bcb8:	f04f 0002 	mov.w	r0, #2	; 0x2
    bcbc:	f7f5 faa0 	bl	1200 <DMA_GetFlagStatus>
    bcc0:	4603      	mov	r3, r0
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	bf0c      	ite	eq
    bcc6:	2300      	moveq	r3, #0
    bcc8:	2301      	movne	r3, #1
    bcca:	b2db      	uxtb	r3, r3
}
    bccc:	4618      	mov	r0, r3
    bcce:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bcd2:	46bd      	mov	sp, r7
    bcd4:	bd80      	pop	{r7, pc}
    bcd6:	46c0      	nop			(mov r8, r8)

0000bcd8 <_ZN8Capteurs16convertirDonneesEv>:

void Capteurs::convertirDonnees()
    bcd8:	b580      	push	{r7, lr}
    bcda:	b084      	sub	sp, #16
    bcdc:	af00      	add	r7, sp, #0
    bcde:	6078      	str	r0, [r7, #4]
{
    isConverted = true;
    bce0:	687b      	ldr	r3, [r7, #4]
    bce2:	f04f 0201 	mov.w	r2, #1	; 0x1
    bce6:	739a      	strb	r2, [r3, #14]
    while (!conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    bce8:	6878      	ldr	r0, [r7, #4]
    bcea:	f7ff ffe1 	bl	bcb0 <_ZN8Capteurs18conversionFinishedEv>
    bcee:	4603      	mov	r3, r0
    bcf0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    bcf4:	b2db      	uxtb	r3, r3
    bcf6:	2b00      	cmp	r3, #0
    bcf8:	d1f6      	bne.n	bce8 <_ZN8Capteurs16convertirDonneesEv+0x10>
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    bcfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    bcfe:	60fb      	str	r3, [r7, #12]
    bd00:	e032      	b.n	bd68 <_ZN8Capteurs16convertirDonneesEv+0x90>
        output[i] <<= 1;
    bd02:	687b      	ldr	r3, [r7, #4]
    bd04:	689a      	ldr	r2, [r3, #8]
    bd06:	68fb      	ldr	r3, [r7, #12]
    bd08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bd0c:	eb02 0103 	add.w	r1, r2, r3
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	689a      	ldr	r2, [r3, #8]
    bd14:	68fb      	ldr	r3, [r7, #12]
    bd16:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bd1a:	4413      	add	r3, r2
    bd1c:	681b      	ldr	r3, [r3, #0]
    bd1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bd22:	600b      	str	r3, [r1, #0]
        output[i] |= (data[i] > threshold);
    bd24:	687b      	ldr	r3, [r7, #4]
    bd26:	689a      	ldr	r2, [r3, #8]
    bd28:	68fb      	ldr	r3, [r7, #12]
    bd2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bd2e:	eb02 0103 	add.w	r1, r2, r3
    bd32:	687b      	ldr	r3, [r7, #4]
    bd34:	689a      	ldr	r2, [r3, #8]
    bd36:	68fb      	ldr	r3, [r7, #12]
    bd38:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bd3c:	4413      	add	r3, r2
    bd3e:	6818      	ldr	r0, [r3, #0]
    bd40:	687b      	ldr	r3, [r7, #4]
    bd42:	685a      	ldr	r2, [r3, #4]
    bd44:	68fb      	ldr	r3, [r7, #12]
    bd46:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bd4a:	4413      	add	r3, r2
    bd4c:	881a      	ldrh	r2, [r3, #0]
    bd4e:	687b      	ldr	r3, [r7, #4]
    bd50:	899b      	ldrh	r3, [r3, #12]
    bd52:	429a      	cmp	r2, r3
    bd54:	bf94      	ite	ls
    bd56:	2300      	movls	r3, #0
    bd58:	2301      	movhi	r3, #1
    bd5a:	ea40 0303 	orr.w	r3, r0, r3
    bd5e:	600b      	str	r3, [r1, #0]
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    bd60:	68fb      	ldr	r3, [r7, #12]
    bd62:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bd66:	60fb      	str	r3, [r7, #12]
    bd68:	687b      	ldr	r3, [r7, #4]
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	461a      	mov	r2, r3
    bd6e:	68fb      	ldr	r3, [r7, #12]
    bd70:	429a      	cmp	r2, r3
    bd72:	dcc6      	bgt.n	bd02 <_ZN8Capteurs16convertirDonneesEv+0x2a>
        output[i] <<= 1;
        output[i] |= (data[i] > threshold);
    }
}
    bd74:	f107 0710 	add.w	r7, r7, #16	; 0x10
    bd78:	46bd      	mov	sp, r7
    bd7a:	bd80      	pop	{r7, pc}

0000bd7c <_ZN8Capteurs8getValueENS_9DirectionE>:

uint16_t Capteurs::getValue(Capteurs::Direction direction) // Retourne vrai si et seulement si le seuil du capteur a été dépassé pendant plus de 8 coups d'horloge car àxff = 8bits à 1
    bd7c:	b580      	push	{r7, lr}
    bd7e:	b082      	sub	sp, #8
    bd80:	af00      	add	r7, sp, #0
    bd82:	6078      	str	r0, [r7, #4]
    bd84:	460b      	mov	r3, r1
    bd86:	70fb      	strb	r3, [r7, #3]
{
    if (!isConverted)
    bd88:	687b      	ldr	r3, [r7, #4]
    bd8a:	7b9b      	ldrb	r3, [r3, #14]
    bd8c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    bd90:	b2db      	uxtb	r3, r3
    bd92:	2b00      	cmp	r3, #0
    bd94:	d002      	beq.n	bd9c <_ZN8Capteurs8getValueENS_9DirectionE+0x20>
        convertirDonnees();
    bd96:	6878      	ldr	r0, [r7, #4]
    bd98:	f7ff ff9e 	bl	bcd8 <_ZN8Capteurs16convertirDonneesEv>
    return (output[direction] & 0xff) == 0xff;
    bd9c:	687b      	ldr	r3, [r7, #4]
    bd9e:	689a      	ldr	r2, [r3, #8]
    bda0:	78fb      	ldrb	r3, [r7, #3]
    bda2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bda6:	4413      	add	r3, r2
    bda8:	681b      	ldr	r3, [r3, #0]
    bdaa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bdae:	2bff      	cmp	r3, #255
    bdb0:	bf14      	ite	ne
    bdb2:	2300      	movne	r3, #0
    bdb4:	2301      	moveq	r3, #1
}
    bdb6:	4618      	mov	r0, r3
    bdb8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bdbc:	46bd      	mov	sp, r7
    bdbe:	bd80      	pop	{r7, pc}

0000bdc0 <_ZN8Capteurs15startConversionEv>:
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    DMA_Cmd(DMA1_Channel1, ENABLE);
}

void Capteurs::startConversion()
    bdc0:	b580      	push	{r7, lr}
    bdc2:	b082      	sub	sp, #8
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	6078      	str	r0, [r7, #4]
{
    isConverted = false;
    bdc8:	687b      	ldr	r3, [r7, #4]
    bdca:	f04f 0200 	mov.w	r2, #0	; 0x0
    bdce:	739a      	strb	r2, [r3, #14]
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    bdd0:	4804      	ldr	r0, [pc, #16]	(bde4 <_ZN8Capteurs15startConversionEv+0x24>)
    bdd2:	f04f 0101 	mov.w	r1, #1	; 0x1
    bdd6:	f7f4 fc5f 	bl	698 <ADC_SoftwareStartConvCmd>
}
    bdda:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bdde:	46bd      	mov	sp, r7
    bde0:	bd80      	pop	{r7, pc}
    bde2:	46c0      	nop			(mov r8, r8)
    bde4:	40012400 	.word	0x40012400

0000bde8 <_ZN8CapteursC1Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    bde8:	b580      	push	{r7, lr}
    bdea:	b096      	sub	sp, #88
    bdec:	af00      	add	r7, sp, #0
    bdee:	6078      	str	r0, [r7, #4]
    bdf0:	687a      	ldr	r2, [r7, #4]
    bdf2:	f640 13c4 	movw	r3, #2500	; 0x9c4
    bdf6:	8193      	strh	r3, [r2, #12]
    bdf8:	687a      	ldr	r2, [r7, #4]
    bdfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    bdfe:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    be00:	4b67      	ldr	r3, [pc, #412]	(bfa0 <_ZN8CapteursC1Ev+0x1b8>)
    be02:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    be06:	f04f 0c05 	mov.w	ip, #5	; 0x5
    be0a:	4610      	mov	r0, r2
    be0c:	4619      	mov	r1, r3
    be0e:	4662      	mov	r2, ip
    be10:	f014 fdac 	bl	2096c <memcpy>
        NbrOfChannel = 5;
    be14:	687a      	ldr	r2, [r7, #4]
    be16:	f04f 0305 	mov.w	r3, #5	; 0x5
    be1a:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    be1c:	687b      	ldr	r3, [r7, #4]
    be1e:	781b      	ldrb	r3, [r3, #0]
    be20:	ea4f 0343 	mov.w	r3, r3, lsl #1
    be24:	4618      	mov	r0, r3
    be26:	f002 fcd7 	bl	e7d8 <_Znaj>
    be2a:	4603      	mov	r3, r0
    be2c:	461a      	mov	r2, r3
    be2e:	687b      	ldr	r3, [r7, #4]
    be30:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    be32:	687b      	ldr	r3, [r7, #4]
    be34:	781b      	ldrb	r3, [r3, #0]
    be36:	ea4f 0383 	mov.w	r3, r3, lsl #2
    be3a:	4618      	mov	r0, r3
    be3c:	f002 fccc 	bl	e7d8 <_Znaj>
    be40:	4603      	mov	r3, r0
    be42:	461a      	mov	r2, r3
    be44:	687b      	ldr	r3, [r7, #4]
    be46:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    be48:	f04f 0300 	mov.w	r3, #0	; 0x0
    be4c:	653b      	str	r3, [r7, #80]
    be4e:	e00c      	b.n	be6a <_ZN8CapteursC1Ev+0x82>
        output[i] = 0;
    be50:	687b      	ldr	r3, [r7, #4]
    be52:	689a      	ldr	r2, [r3, #8]
    be54:	6d3b      	ldr	r3, [r7, #80]
    be56:	ea4f 0383 	mov.w	r3, r3, lsl #2
    be5a:	441a      	add	r2, r3
    be5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    be60:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    be62:	6d3b      	ldr	r3, [r7, #80]
    be64:	f103 0301 	add.w	r3, r3, #1	; 0x1
    be68:	653b      	str	r3, [r7, #80]
    be6a:	687b      	ldr	r3, [r7, #4]
    be6c:	781b      	ldrb	r3, [r3, #0]
    be6e:	461a      	mov	r2, r3
    be70:	6d3b      	ldr	r3, [r7, #80]
    be72:	429a      	cmp	r2, r3
    be74:	d8ec      	bhi.n	be50 <_ZN8CapteursC1Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    be76:	f04f 0300 	mov.w	r3, #0	; 0x0
    be7a:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    be7c:	f04f 0301 	mov.w	r3, #1	; 0x1
    be80:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    be84:	f04f 0300 	mov.w	r3, #0	; 0x0
    be88:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    be8c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    be90:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    be92:	f04f 0300 	mov.w	r3, #0	; 0x0
    be96:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	781b      	ldrb	r3, [r3, #0]
    be9c:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    bea0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bea4:	483f      	ldr	r0, [pc, #252]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    bea6:	4619      	mov	r1, r3
    bea8:	f7f4 fabe 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    beac:	483d      	ldr	r0, [pc, #244]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    beae:	f04f 0101 	mov.w	r1, #1	; 0x1
    beb2:	f7f4 fb3b 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    beb6:	483b      	ldr	r0, [pc, #236]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    beb8:	f7f4 fb96 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    bebc:	4839      	ldr	r0, [pc, #228]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    bebe:	f7f4 fba3 	bl	608 <ADC_GetResetCalibrationStatus>
    bec2:	4603      	mov	r3, r0
    bec4:	2b00      	cmp	r3, #0
    bec6:	bf0c      	ite	eq
    bec8:	2300      	moveq	r3, #0
    beca:	2301      	movne	r3, #1
    becc:	b2db      	uxtb	r3, r3
    bece:	2b00      	cmp	r3, #0
    bed0:	d1f4      	bne.n	bebc <_ZN8CapteursC1Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    bed2:	4834      	ldr	r0, [pc, #208]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    bed4:	f7f4 fbb4 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    bed8:	4832      	ldr	r0, [pc, #200]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    beda:	f7f4 fbc1 	bl	660 <ADC_GetCalibrationStatus>
    bede:	4603      	mov	r3, r0
    bee0:	2b00      	cmp	r3, #0
    bee2:	bf0c      	ite	eq
    bee4:	2300      	moveq	r3, #0
    bee6:	2301      	movne	r3, #1
    bee8:	b2db      	uxtb	r3, r3
    beea:	2b00      	cmp	r3, #0
    beec:	d1f4      	bne.n	bed8 <_ZN8CapteursC1Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    beee:	f04f 0300 	mov.w	r3, #0	; 0x0
    bef2:	657b      	str	r3, [r7, #84]
    bef4:	e015      	b.n	bf22 <_ZN8CapteursC1Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    bef6:	6d7b      	ldr	r3, [r7, #84]
    bef8:	f107 0258 	add.w	r2, r7, #88	; 0x58
    befc:	4413      	add	r3, r2
    befe:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    bf02:	6d7b      	ldr	r3, [r7, #84]
    bf04:	b2db      	uxtb	r3, r3
    bf06:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bf0a:	b2db      	uxtb	r3, r3
    bf0c:	4825      	ldr	r0, [pc, #148]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    bf0e:	4611      	mov	r1, r2
    bf10:	461a      	mov	r2, r3
    bf12:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf16:	f7f4 fc39 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bf1a:	6d7b      	ldr	r3, [r7, #84]
    bf1c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bf20:	657b      	str	r3, [r7, #84]
    bf22:	687b      	ldr	r3, [r7, #4]
    bf24:	781b      	ldrb	r3, [r3, #0]
    bf26:	461a      	mov	r2, r3
    bf28:	6d7b      	ldr	r3, [r7, #84]
    bf2a:	429a      	cmp	r2, r3
    bf2c:	dce3      	bgt.n	bef6 <_ZN8CapteursC1Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    bf2e:	481d      	ldr	r0, [pc, #116]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    bf30:	f04f 0101 	mov.w	r1, #1	; 0x1
    bf34:	f7f4 fb16 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    bf38:	4b1a      	ldr	r3, [pc, #104]	(bfa4 <_ZN8CapteursC1Ev+0x1bc>)
    bf3a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    bf3e:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    bf40:	687b      	ldr	r3, [r7, #4]
    bf42:	685b      	ldr	r3, [r3, #4]
    bf44:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    bf46:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf4a:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    bf4c:	687b      	ldr	r3, [r7, #4]
    bf4e:	781b      	ldrb	r3, [r3, #0]
    bf50:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    bf52:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf56:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    bf58:	f04f 0380 	mov.w	r3, #128	; 0x80
    bf5c:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    bf5e:	f44f 7300 	mov.w	r3, #512	; 0x200
    bf62:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    bf64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bf68:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    bf6a:	f04f 0320 	mov.w	r3, #32	; 0x20
    bf6e:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    bf70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bf74:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    bf76:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf7a:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    bf7c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    bf80:	4809      	ldr	r0, [pc, #36]	(bfa8 <_ZN8CapteursC1Ev+0x1c0>)
    bf82:	4619      	mov	r1, r3
    bf84:	f7f5 f874 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    bf88:	4807      	ldr	r0, [pc, #28]	(bfa8 <_ZN8CapteursC1Ev+0x1c0>)
    bf8a:	f04f 0101 	mov.w	r1, #1	; 0x1
    bf8e:	f7f5 f8ed 	bl	116c <DMA_Cmd>
}
    bf92:	687b      	ldr	r3, [r7, #4]
    bf94:	4618      	mov	r0, r3
    bf96:	f107 0758 	add.w	r7, r7, #88	; 0x58
    bf9a:	46bd      	mov	sp, r7
    bf9c:	bd80      	pop	{r7, pc}
    bf9e:	46c0      	nop			(mov r8, r8)
    bfa0:	00021e70 	.word	0x00021e70
    bfa4:	40012400 	.word	0x40012400
    bfa8:	40020008 	.word	0x40020008

0000bfac <_ZN8CapteursC2Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    bfac:	b580      	push	{r7, lr}
    bfae:	b096      	sub	sp, #88
    bfb0:	af00      	add	r7, sp, #0
    bfb2:	6078      	str	r0, [r7, #4]
    bfb4:	687a      	ldr	r2, [r7, #4]
    bfb6:	f640 13c4 	movw	r3, #2500	; 0x9c4
    bfba:	8193      	strh	r3, [r2, #12]
    bfbc:	687a      	ldr	r2, [r7, #4]
    bfbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    bfc2:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    bfc4:	4b67      	ldr	r3, [pc, #412]	(c164 <_ZN8CapteursC2Ev+0x1b8>)
    bfc6:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    bfca:	f04f 0c05 	mov.w	ip, #5	; 0x5
    bfce:	4610      	mov	r0, r2
    bfd0:	4619      	mov	r1, r3
    bfd2:	4662      	mov	r2, ip
    bfd4:	f014 fcca 	bl	2096c <memcpy>
        NbrOfChannel = 5;
    bfd8:	687a      	ldr	r2, [r7, #4]
    bfda:	f04f 0305 	mov.w	r3, #5	; 0x5
    bfde:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    bfe0:	687b      	ldr	r3, [r7, #4]
    bfe2:	781b      	ldrb	r3, [r3, #0]
    bfe4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bfe8:	4618      	mov	r0, r3
    bfea:	f002 fbf5 	bl	e7d8 <_Znaj>
    bfee:	4603      	mov	r3, r0
    bff0:	461a      	mov	r2, r3
    bff2:	687b      	ldr	r3, [r7, #4]
    bff4:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    bff6:	687b      	ldr	r3, [r7, #4]
    bff8:	781b      	ldrb	r3, [r3, #0]
    bffa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bffe:	4618      	mov	r0, r3
    c000:	f002 fbea 	bl	e7d8 <_Znaj>
    c004:	4603      	mov	r3, r0
    c006:	461a      	mov	r2, r3
    c008:	687b      	ldr	r3, [r7, #4]
    c00a:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c00c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c010:	653b      	str	r3, [r7, #80]
    c012:	e00c      	b.n	c02e <_ZN8CapteursC2Ev+0x82>
        output[i] = 0;
    c014:	687b      	ldr	r3, [r7, #4]
    c016:	689a      	ldr	r2, [r3, #8]
    c018:	6d3b      	ldr	r3, [r7, #80]
    c01a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c01e:	441a      	add	r2, r3
    c020:	f04f 0300 	mov.w	r3, #0	; 0x0
    c024:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c026:	6d3b      	ldr	r3, [r7, #80]
    c028:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c02c:	653b      	str	r3, [r7, #80]
    c02e:	687b      	ldr	r3, [r7, #4]
    c030:	781b      	ldrb	r3, [r3, #0]
    c032:	461a      	mov	r2, r3
    c034:	6d3b      	ldr	r3, [r7, #80]
    c036:	429a      	cmp	r2, r3
    c038:	d8ec      	bhi.n	c014 <_ZN8CapteursC2Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    c03a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c03e:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    c040:	f04f 0301 	mov.w	r3, #1	; 0x1
    c044:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    c048:	f04f 0300 	mov.w	r3, #0	; 0x0
    c04c:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    c050:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    c054:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    c056:	f04f 0300 	mov.w	r3, #0	; 0x0
    c05a:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    c05c:	687b      	ldr	r3, [r7, #4]
    c05e:	781b      	ldrb	r3, [r3, #0]
    c060:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    c064:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c068:	483f      	ldr	r0, [pc, #252]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c06a:	4619      	mov	r1, r3
    c06c:	f7f4 f9dc 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    c070:	483d      	ldr	r0, [pc, #244]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c072:	f04f 0101 	mov.w	r1, #1	; 0x1
    c076:	f7f4 fa59 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    c07a:	483b      	ldr	r0, [pc, #236]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c07c:	f7f4 fab4 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    c080:	4839      	ldr	r0, [pc, #228]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c082:	f7f4 fac1 	bl	608 <ADC_GetResetCalibrationStatus>
    c086:	4603      	mov	r3, r0
    c088:	2b00      	cmp	r3, #0
    c08a:	bf0c      	ite	eq
    c08c:	2300      	moveq	r3, #0
    c08e:	2301      	movne	r3, #1
    c090:	b2db      	uxtb	r3, r3
    c092:	2b00      	cmp	r3, #0
    c094:	d1f4      	bne.n	c080 <_ZN8CapteursC2Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    c096:	4834      	ldr	r0, [pc, #208]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c098:	f7f4 fad2 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    c09c:	4832      	ldr	r0, [pc, #200]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c09e:	f7f4 fadf 	bl	660 <ADC_GetCalibrationStatus>
    c0a2:	4603      	mov	r3, r0
    c0a4:	2b00      	cmp	r3, #0
    c0a6:	bf0c      	ite	eq
    c0a8:	2300      	moveq	r3, #0
    c0aa:	2301      	movne	r3, #1
    c0ac:	b2db      	uxtb	r3, r3
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d1f4      	bne.n	c09c <_ZN8CapteursC2Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c0b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c0b6:	657b      	str	r3, [r7, #84]
    c0b8:	e015      	b.n	c0e6 <_ZN8CapteursC2Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    c0ba:	6d7b      	ldr	r3, [r7, #84]
    c0bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
    c0c0:	4413      	add	r3, r2
    c0c2:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    c0c6:	6d7b      	ldr	r3, [r7, #84]
    c0c8:	b2db      	uxtb	r3, r3
    c0ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c0ce:	b2db      	uxtb	r3, r3
    c0d0:	4825      	ldr	r0, [pc, #148]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c0d2:	4611      	mov	r1, r2
    c0d4:	461a      	mov	r2, r3
    c0d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c0da:	f7f4 fb57 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c0de:	6d7b      	ldr	r3, [r7, #84]
    c0e0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c0e4:	657b      	str	r3, [r7, #84]
    c0e6:	687b      	ldr	r3, [r7, #4]
    c0e8:	781b      	ldrb	r3, [r3, #0]
    c0ea:	461a      	mov	r2, r3
    c0ec:	6d7b      	ldr	r3, [r7, #84]
    c0ee:	429a      	cmp	r2, r3
    c0f0:	dce3      	bgt.n	c0ba <_ZN8CapteursC2Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    c0f2:	481d      	ldr	r0, [pc, #116]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c0f4:	f04f 0101 	mov.w	r1, #1	; 0x1
    c0f8:	f7f4 fa34 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    c0fc:	4b1a      	ldr	r3, [pc, #104]	(c168 <_ZN8CapteursC2Ev+0x1bc>)
    c0fe:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    c102:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    c104:	687b      	ldr	r3, [r7, #4]
    c106:	685b      	ldr	r3, [r3, #4]
    c108:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    c10a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c10e:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    c110:	687b      	ldr	r3, [r7, #4]
    c112:	781b      	ldrb	r3, [r3, #0]
    c114:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    c116:	f04f 0300 	mov.w	r3, #0	; 0x0
    c11a:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    c11c:	f04f 0380 	mov.w	r3, #128	; 0x80
    c120:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    c122:	f44f 7300 	mov.w	r3, #512	; 0x200
    c126:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    c128:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c12c:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    c12e:	f04f 0320 	mov.w	r3, #32	; 0x20
    c132:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    c134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c138:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    c13a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c13e:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    c140:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c144:	4809      	ldr	r0, [pc, #36]	(c16c <_ZN8CapteursC2Ev+0x1c0>)
    c146:	4619      	mov	r1, r3
    c148:	f7f4 ff92 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    c14c:	4807      	ldr	r0, [pc, #28]	(c16c <_ZN8CapteursC2Ev+0x1c0>)
    c14e:	f04f 0101 	mov.w	r1, #1	; 0x1
    c152:	f7f5 f80b 	bl	116c <DMA_Cmd>
}
    c156:	687b      	ldr	r3, [r7, #4]
    c158:	4618      	mov	r0, r3
    c15a:	f107 0758 	add.w	r7, r7, #88	; 0x58
    c15e:	46bd      	mov	sp, r7
    c160:	bd80      	pop	{r7, pc}
    c162:	46c0      	nop			(mov r8, r8)
    c164:	00021e70 	.word	0x00021e70
    c168:	40012400 	.word	0x40012400
    c16c:	40020008 	.word	0x40020008

0000c170 <_ZN3Led6setOffEi>:
        default:
            break;
    }
}

void Led::setOff(int index)
    c170:	b580      	push	{r7, lr}
    c172:	b082      	sub	sp, #8
    c174:	af00      	add	r7, sp, #0
    c176:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c178:	687b      	ldr	r3, [r7, #4]
    c17a:	2b00      	cmp	r3, #0
    c17c:	db07      	blt.n	c18e <_ZN3Led6setOffEi+0x1e>
    c17e:	687b      	ldr	r3, [r7, #4]
    c180:	2b01      	cmp	r3, #1
    c182:	dc04      	bgt.n	c18e <_ZN3Led6setOffEi+0x1e>
        ledOn[index] = false;
    c184:	6879      	ldr	r1, [r7, #4]
    c186:	4a10      	ldr	r2, [pc, #64]	(c1c8 <_ZN3Led6setOffEi+0x58>)
    c188:	f04f 0300 	mov.w	r3, #0	; 0x0
    c18c:	5453      	strb	r3, [r2, r1]

    switch(index)
    c18e:	687b      	ldr	r3, [r7, #4]
    c190:	603b      	str	r3, [r7, #0]
    c192:	683b      	ldr	r3, [r7, #0]
    c194:	2b00      	cmp	r3, #0
    c196:	d003      	beq.n	c1a0 <_ZN3Led6setOffEi+0x30>
    c198:	683b      	ldr	r3, [r7, #0]
    c19a:	2b01      	cmp	r3, #1
    c19c:	d008      	beq.n	c1b0 <_ZN3Led6setOffEi+0x40>
    c19e:	e00e      	b.n	c1be <_ZN3Led6setOffEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET); // LED verte
    c1a0:	480a      	ldr	r0, [pc, #40]	(c1cc <_ZN3Led6setOffEi+0x5c>)
    c1a2:	f04f 0140 	mov.w	r1, #64	; 0x40
    c1a6:	f04f 0200 	mov.w	r2, #0	; 0x0
    c1aa:	f7f5 fbef 	bl	198c <GPIO_WriteBit>
    c1ae:	e006      	b.n	c1be <_ZN3Led6setOffEi+0x4e>
            break;

        case 1:
        #ifdef ROBOTHW
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET); // LED jaune
    c1b0:	4806      	ldr	r0, [pc, #24]	(c1cc <_ZN3Led6setOffEi+0x5c>)
    c1b2:	f04f 0180 	mov.w	r1, #128	; 0x80
    c1b6:	f04f 0200 	mov.w	r2, #0	; 0x0
    c1ba:	f7f5 fbe7 	bl	198c <GPIO_WriteBit>
        #endif
            break;
        default:
            break;
    }
}
    c1be:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c1c2:	46bd      	mov	sp, r7
    c1c4:	bd80      	pop	{r7, pc}
    c1c6:	46c0      	nop			(mov r8, r8)
    c1c8:	20000584 	.word	0x20000584
    c1cc:	40011000 	.word	0x40011000

0000c1d0 <_Z12eteindreLED2v>:
void allumerLED2()
{
    Led::setOn(1);
}

void eteindreLED2()
    c1d0:	b580      	push	{r7, lr}
    c1d2:	af00      	add	r7, sp, #0
{
    Led::setOff(1);
    c1d4:	f04f 0001 	mov.w	r0, #1	; 0x1
    c1d8:	f7ff ffca 	bl	c170 <_ZN3Led6setOffEi>
}
    c1dc:	46bd      	mov	sp, r7
    c1de:	bd80      	pop	{r7, pc}

0000c1e0 <_Z11eteindreLEDv>:
void allumerLED()
{
    Led::setOn(0);
}

void eteindreLED()
    c1e0:	b580      	push	{r7, lr}
    c1e2:	af00      	add	r7, sp, #0
{
    Led::setOff(0);
    c1e4:	f04f 0000 	mov.w	r0, #0	; 0x0
    c1e8:	f7ff ffc2 	bl	c170 <_ZN3Led6setOffEi>
}
    c1ec:	46bd      	mov	sp, r7
    c1ee:	bd80      	pop	{r7, pc}

0000c1f0 <_ZN3Led5setOnEi>:
        else
            setOn(index);
    }
}

void Led::setOn(int index)
    c1f0:	b580      	push	{r7, lr}
    c1f2:	b082      	sub	sp, #8
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	2b00      	cmp	r3, #0
    c1fc:	db07      	blt.n	c20e <_ZN3Led5setOnEi+0x1e>
    c1fe:	687b      	ldr	r3, [r7, #4]
    c200:	2b01      	cmp	r3, #1
    c202:	dc04      	bgt.n	c20e <_ZN3Led5setOnEi+0x1e>
        ledOn[index] = true;
    c204:	6879      	ldr	r1, [r7, #4]
    c206:	4a10      	ldr	r2, [pc, #64]	(c248 <_ZN3Led5setOnEi+0x58>)
    c208:	f04f 0301 	mov.w	r3, #1	; 0x1
    c20c:	5453      	strb	r3, [r2, r1]

    switch(index)
    c20e:	687b      	ldr	r3, [r7, #4]
    c210:	603b      	str	r3, [r7, #0]
    c212:	683b      	ldr	r3, [r7, #0]
    c214:	2b00      	cmp	r3, #0
    c216:	d003      	beq.n	c220 <_ZN3Led5setOnEi+0x30>
    c218:	683b      	ldr	r3, [r7, #0]
    c21a:	2b01      	cmp	r3, #1
    c21c:	d008      	beq.n	c230 <_ZN3Led5setOnEi+0x40>
    c21e:	e00e      	b.n	c23e <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_RESET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET); // LED verte
    c220:	480a      	ldr	r0, [pc, #40]	(c24c <_ZN3Led5setOnEi+0x5c>)
    c222:	f04f 0140 	mov.w	r1, #64	; 0x40
    c226:	f04f 0201 	mov.w	r2, #1	; 0x1
    c22a:	f7f5 fbaf 	bl	198c <GPIO_WriteBit>
    c22e:	e006      	b.n	c23e <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
               // Pas de LED jaune sur le H103 :'(
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_SET); // LED jaune
    c230:	4806      	ldr	r0, [pc, #24]	(c24c <_ZN3Led5setOnEi+0x5c>)
    c232:	f04f 0180 	mov.w	r1, #128	; 0x80
    c236:	f04f 0201 	mov.w	r2, #1	; 0x1
    c23a:	f7f5 fba7 	bl	198c <GPIO_WriteBit>
            break;

        default:
            break;
    }
}
    c23e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c242:	46bd      	mov	sp, r7
    c244:	bd80      	pop	{r7, pc}
    c246:	46c0      	nop			(mov r8, r8)
    c248:	20000584 	.word	0x20000584
    c24c:	40011000 	.word	0x40011000

0000c250 <_ZN3Led6toggleEi>:
    Led::setOff(1);
}

bool Led::ledOn[LED_NUMBER] = {0};

void Led::toggle(int index)
    c250:	b580      	push	{r7, lr}
    c252:	b082      	sub	sp, #8
    c254:	af00      	add	r7, sp, #0
    c256:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c258:	687b      	ldr	r3, [r7, #4]
    c25a:	2b00      	cmp	r3, #0
    c25c:	db0e      	blt.n	c27c <_ZN3Led6toggleEi+0x2c>
    c25e:	687b      	ldr	r3, [r7, #4]
    c260:	2b01      	cmp	r3, #1
    c262:	dc0b      	bgt.n	c27c <_ZN3Led6toggleEi+0x2c>
    {
        if (ledOn[index])
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	4a07      	ldr	r2, [pc, #28]	(c284 <_ZN3Led6toggleEi+0x34>)
    c268:	5cd3      	ldrb	r3, [r2, r3]
    c26a:	2b00      	cmp	r3, #0
    c26c:	d003      	beq.n	c276 <_ZN3Led6toggleEi+0x26>
            setOff(index);
    c26e:	6878      	ldr	r0, [r7, #4]
    c270:	f7ff ff7e 	bl	c170 <_ZN3Led6setOffEi>
    c274:	e002      	b.n	c27c <_ZN3Led6toggleEi+0x2c>
        else
            setOn(index);
    c276:	6878      	ldr	r0, [r7, #4]
    c278:	f7ff ffba 	bl	c1f0 <_ZN3Led5setOnEi>
    }
}
    c27c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c280:	46bd      	mov	sp, r7
    c282:	bd80      	pop	{r7, pc}
    c284:	20000584 	.word	0x20000584

0000c288 <_Z11allumerLED2v>:
void eteindreLED()
{
    Led::setOff(0);
}

void allumerLED2()
    c288:	b580      	push	{r7, lr}
    c28a:	af00      	add	r7, sp, #0
{
    Led::setOn(1);
    c28c:	f04f 0001 	mov.w	r0, #1	; 0x1
    c290:	f7ff ffae 	bl	c1f0 <_ZN3Led5setOnEi>
}
    c294:	46bd      	mov	sp, r7
    c296:	bd80      	pop	{r7, pc}

0000c298 <_Z10allumerLEDv>:
#include "leds.h"

// allume ou éteint une LED
void allumerLED()
    c298:	b580      	push	{r7, lr}
    c29a:	af00      	add	r7, sp, #0
{
    Led::setOn(0);
    c29c:	f04f 0000 	mov.w	r0, #0	; 0x0
    c2a0:	f7ff ffa6 	bl	c1f0 <_ZN3Led5setOnEi>
}
    c2a4:	46bd      	mov	sp, r7
    c2a6:	bd80      	pop	{r7, pc}

0000c2a8 <_ZN18LigthBarrierSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
}

Sensor::OutputSensor LigthBarrierSensor::getValue()
    c2a8:	b480      	push	{r7}
    c2aa:	b087      	sub	sp, #28
    c2ac:	af00      	add	r7, sp, #0
    c2ae:	4602      	mov	r2, r0
    c2b0:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c2b2:	f04f 0302 	mov.w	r3, #2	; 0x2
    c2b6:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c2b8:	4b05      	ldr	r3, [pc, #20]	(c2d0 <_ZN18LigthBarrierSensor8getValueEv+0x28>)
    c2ba:	6053      	str	r3, [r2, #4]
    outputR.b = output;
    c2bc:	687b      	ldr	r3, [r7, #4]
    c2be:	7bdb      	ldrb	r3, [r3, #15]
    c2c0:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c2c2:	4610      	mov	r0, r2
    c2c4:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c2c8:	46bd      	mov	sp, r7
    c2ca:	bc80      	pop	{r7}
    c2cc:	4770      	bx	lr
    c2ce:	46c0      	nop			(mov r8, r8)
    c2d0:	00000000 	.word	0x00000000

0000c2d4 <_ZN18LigthBarrierSensor7getNameEv>:

LigthBarrierSensor::LigthBarrierName LigthBarrierSensor::getName()
    c2d4:	b480      	push	{r7}
    c2d6:	b083      	sub	sp, #12
    c2d8:	af00      	add	r7, sp, #0
    c2da:	6078      	str	r0, [r7, #4]
{
    return name;
    c2dc:	687b      	ldr	r3, [r7, #4]
    c2de:	7b9b      	ldrb	r3, [r3, #14]
}
    c2e0:	4618      	mov	r0, r3
    c2e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c2e6:	46bd      	mov	sp, r7
    c2e8:	bc80      	pop	{r7}
    c2ea:	4770      	bx	lr

0000c2ec <_ZN18LigthBarrierSensor11updateValueEv>:

LigthBarrierSensor::~LigthBarrierSensor()
{
}

void LigthBarrierSensor::updateValue()
    c2ec:	b590      	push	{r4, r7, lr}
    c2ee:	b083      	sub	sp, #12
    c2f0:	af00      	add	r7, sp, #0
    c2f2:	6078      	str	r0, [r7, #4]
{
    counter <<=1;
    c2f4:	687b      	ldr	r3, [r7, #4]
    c2f6:	899b      	ldrh	r3, [r3, #12]
    c2f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c2fc:	b29b      	uxth	r3, r3
    c2fe:	687a      	ldr	r2, [r7, #4]
    c300:	8193      	strh	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)==SET);
    c302:	687b      	ldr	r3, [r7, #4]
    c304:	899b      	ldrh	r3, [r3, #12]
    c306:	461c      	mov	r4, r3
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	689a      	ldr	r2, [r3, #8]
    c30c:	687b      	ldr	r3, [r7, #4]
    c30e:	889b      	ldrh	r3, [r3, #4]
    c310:	4610      	mov	r0, r2
    c312:	4619      	mov	r1, r3
    c314:	f7f5 fac6 	bl	18a4 <GPIO_ReadInputDataBit>
    c318:	4603      	mov	r3, r0
    c31a:	2b01      	cmp	r3, #1
    c31c:	bf14      	ite	ne
    c31e:	2300      	movne	r3, #0
    c320:	2301      	moveq	r3, #1
    c322:	4622      	mov	r2, r4
    c324:	ea42 0303 	orr.w	r3, r2, r3
    c328:	b29b      	uxth	r3, r3
    c32a:	b29b      	uxth	r3, r3
    c32c:	687a      	ldr	r2, [r7, #4]
    c32e:	8193      	strh	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	7bdb      	ldrb	r3, [r3, #15]
    c334:	2b00      	cmp	r3, #0
    c336:	d00a      	beq.n	c34e <_ZN18LigthBarrierSensor11updateValueEv+0x62>
    c338:	687b      	ldr	r3, [r7, #4]
    c33a:	899b      	ldrh	r3, [r3, #12]
    c33c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c340:	2b00      	cmp	r3, #0
    c342:	bf0c      	ite	eq
    c344:	2300      	moveq	r3, #0
    c346:	2301      	movne	r3, #1
    c348:	b2db      	uxtb	r3, r3
    c34a:	603b      	str	r3, [r7, #0]
    c34c:	e009      	b.n	c362 <_ZN18LigthBarrierSensor11updateValueEv+0x76>
    c34e:	687b      	ldr	r3, [r7, #4]
    c350:	899b      	ldrh	r3, [r3, #12]
    c352:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c356:	2bff      	cmp	r3, #255
    c358:	bf14      	ite	ne
    c35a:	2300      	movne	r3, #0
    c35c:	2301      	moveq	r3, #1
    c35e:	b2db      	uxtb	r3, r3
    c360:	603b      	str	r3, [r7, #0]
    c362:	687a      	ldr	r2, [r7, #4]
    c364:	6839      	ldr	r1, [r7, #0]
    c366:	460b      	mov	r3, r1
    c368:	73d3      	strb	r3, [r2, #15]
}
    c36a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c36e:	46bd      	mov	sp, r7
    c370:	bd90      	pop	{r4, r7, pc}
    c372:	46c0      	nop			(mov r8, r8)

0000c374 <_ZN18LigthBarrierSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c374:	b580      	push	{r7, lr}
    c376:	b082      	sub	sp, #8
    c378:	af00      	add	r7, sp, #0
    c37a:	6078      	str	r0, [r7, #4]
    c37c:	687a      	ldr	r2, [r7, #4]
    c37e:	4b0a      	ldr	r3, [pc, #40]	(c3a8 <_ZN18LigthBarrierSensorD0Ev+0x34>)
    c380:	6013      	str	r3, [r2, #0]
{
}
    c382:	687b      	ldr	r3, [r7, #4]
    c384:	4618      	mov	r0, r3
    c386:	f7f9 fccd 	bl	5d24 <_ZN6SensorD2Ev>
    c38a:	f04f 0301 	mov.w	r3, #1	; 0x1
    c38e:	b2db      	uxtb	r3, r3
    c390:	2b00      	cmp	r3, #0
    c392:	d002      	beq.n	c39a <_ZN18LigthBarrierSensorD0Ev+0x26>
    c394:	6878      	ldr	r0, [r7, #4]
    c396:	f002 fa2d 	bl	e7f4 <_ZdlPv>
    c39a:	687b      	ldr	r3, [r7, #4]
    c39c:	4618      	mov	r0, r3
    c39e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c3a2:	46bd      	mov	sp, r7
    c3a4:	bd80      	pop	{r7, pc}
    c3a6:	46c0      	nop			(mov r8, r8)
    c3a8:	00021e80 	.word	0x00021e80

0000c3ac <_ZN18LigthBarrierSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c3ac:	b580      	push	{r7, lr}
    c3ae:	b082      	sub	sp, #8
    c3b0:	af00      	add	r7, sp, #0
    c3b2:	6078      	str	r0, [r7, #4]
    c3b4:	687a      	ldr	r2, [r7, #4]
    c3b6:	4b0a      	ldr	r3, [pc, #40]	(c3e0 <_ZN18LigthBarrierSensorD1Ev+0x34>)
    c3b8:	6013      	str	r3, [r2, #0]
{
}
    c3ba:	687b      	ldr	r3, [r7, #4]
    c3bc:	4618      	mov	r0, r3
    c3be:	f7f9 fcb1 	bl	5d24 <_ZN6SensorD2Ev>
    c3c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3c6:	b2db      	uxtb	r3, r3
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d002      	beq.n	c3d2 <_ZN18LigthBarrierSensorD1Ev+0x26>
    c3cc:	6878      	ldr	r0, [r7, #4]
    c3ce:	f002 fa11 	bl	e7f4 <_ZdlPv>
    c3d2:	687b      	ldr	r3, [r7, #4]
    c3d4:	4618      	mov	r0, r3
    c3d6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c3da:	46bd      	mov	sp, r7
    c3dc:	bd80      	pop	{r7, pc}
    c3de:	46c0      	nop			(mov r8, r8)
    c3e0:	00021e80 	.word	0x00021e80

0000c3e4 <_ZN18LigthBarrierSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c3e4:	b580      	push	{r7, lr}
    c3e6:	b082      	sub	sp, #8
    c3e8:	af00      	add	r7, sp, #0
    c3ea:	6078      	str	r0, [r7, #4]
    c3ec:	687a      	ldr	r2, [r7, #4]
    c3ee:	4b0a      	ldr	r3, [pc, #40]	(c418 <_ZN18LigthBarrierSensorD2Ev+0x34>)
    c3f0:	6013      	str	r3, [r2, #0]
{
}
    c3f2:	687b      	ldr	r3, [r7, #4]
    c3f4:	4618      	mov	r0, r3
    c3f6:	f7f9 fc95 	bl	5d24 <_ZN6SensorD2Ev>
    c3fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3fe:	b2db      	uxtb	r3, r3
    c400:	2b00      	cmp	r3, #0
    c402:	d002      	beq.n	c40a <_ZN18LigthBarrierSensorD2Ev+0x26>
    c404:	6878      	ldr	r0, [r7, #4]
    c406:	f002 f9f5 	bl	e7f4 <_ZdlPv>
    c40a:	687b      	ldr	r3, [r7, #4]
    c40c:	4618      	mov	r0, r3
    c40e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c412:	46bd      	mov	sp, r7
    c414:	bd80      	pop	{r7, pc}
    c416:	46c0      	nop			(mov r8, r8)
    c418:	00021e80 	.word	0x00021e80

0000c41c <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c41c:	b580      	push	{r7, lr}
    c41e:	b086      	sub	sp, #24
    c420:	af00      	add	r7, sp, #0
    c422:	60f8      	str	r0, [r7, #12]
    c424:	607b      	str	r3, [r7, #4]
    c426:	460b      	mov	r3, r1
    c428:	72fb      	strb	r3, [r7, #11]
    c42a:	4613      	mov	r3, r2
    c42c:	813b      	strh	r3, [r7, #8]
    c42e:	68fb      	ldr	r3, [r7, #12]
    c430:	4618      	mov	r0, r3
    c432:	f7f9 fc27 	bl	5c84 <_ZN6SensorC2Ev>
    c436:	68fa      	ldr	r2, [r7, #12]
    c438:	4b13      	ldr	r3, [pc, #76]	(c488 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c43a:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c43c:	68fa      	ldr	r2, [r7, #12]
    c43e:	893b      	ldrh	r3, [r7, #8]
    c440:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c442:	68fa      	ldr	r2, [r7, #12]
    c444:	687b      	ldr	r3, [r7, #4]
    c446:	6093      	str	r3, [r2, #8]
    counter = 0;
    c448:	68fa      	ldr	r2, [r7, #12]
    c44a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c44e:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c450:	68fa      	ldr	r2, [r7, #12]
    c452:	7afb      	ldrb	r3, [r7, #11]
    c454:	7393      	strb	r3, [r2, #14]
    output = false;
    c456:	68fa      	ldr	r2, [r7, #12]
    c458:	f04f 0300 	mov.w	r3, #0	; 0x0
    c45c:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c45e:	893b      	ldrh	r3, [r7, #8]
    c460:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c462:	f04f 0348 	mov.w	r3, #72	; 0x48
    c466:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c468:	f04f 0303 	mov.w	r3, #3	; 0x3
    c46c:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c46e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c472:	6878      	ldr	r0, [r7, #4]
    c474:	4619      	mov	r1, r3
    c476:	f7f5 f91b 	bl	16b0 <GPIO_Init>
}
    c47a:	68fb      	ldr	r3, [r7, #12]
    c47c:	4618      	mov	r0, r3
    c47e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c482:	46bd      	mov	sp, r7
    c484:	bd80      	pop	{r7, pc}
    c486:	46c0      	nop			(mov r8, r8)
    c488:	00021e80 	.word	0x00021e80

0000c48c <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c48c:	b580      	push	{r7, lr}
    c48e:	b086      	sub	sp, #24
    c490:	af00      	add	r7, sp, #0
    c492:	60f8      	str	r0, [r7, #12]
    c494:	607b      	str	r3, [r7, #4]
    c496:	460b      	mov	r3, r1
    c498:	72fb      	strb	r3, [r7, #11]
    c49a:	4613      	mov	r3, r2
    c49c:	813b      	strh	r3, [r7, #8]
    c49e:	68fb      	ldr	r3, [r7, #12]
    c4a0:	4618      	mov	r0, r3
    c4a2:	f7f9 fbef 	bl	5c84 <_ZN6SensorC2Ev>
    c4a6:	68fa      	ldr	r2, [r7, #12]
    c4a8:	4b13      	ldr	r3, [pc, #76]	(c4f8 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c4aa:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c4ac:	68fa      	ldr	r2, [r7, #12]
    c4ae:	893b      	ldrh	r3, [r7, #8]
    c4b0:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c4b2:	68fa      	ldr	r2, [r7, #12]
    c4b4:	687b      	ldr	r3, [r7, #4]
    c4b6:	6093      	str	r3, [r2, #8]
    counter = 0;
    c4b8:	68fa      	ldr	r2, [r7, #12]
    c4ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4be:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c4c0:	68fa      	ldr	r2, [r7, #12]
    c4c2:	7afb      	ldrb	r3, [r7, #11]
    c4c4:	7393      	strb	r3, [r2, #14]
    output = false;
    c4c6:	68fa      	ldr	r2, [r7, #12]
    c4c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4cc:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c4ce:	893b      	ldrh	r3, [r7, #8]
    c4d0:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c4d2:	f04f 0348 	mov.w	r3, #72	; 0x48
    c4d6:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c4d8:	f04f 0303 	mov.w	r3, #3	; 0x3
    c4dc:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c4de:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c4e2:	6878      	ldr	r0, [r7, #4]
    c4e4:	4619      	mov	r1, r3
    c4e6:	f7f5 f8e3 	bl	16b0 <GPIO_Init>
}
    c4ea:	68fb      	ldr	r3, [r7, #12]
    c4ec:	4618      	mov	r0, r3
    c4ee:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c4f2:	46bd      	mov	sp, r7
    c4f4:	bd80      	pop	{r7, pc}
    c4f6:	46c0      	nop			(mov r8, r8)
    c4f8:	00021e80 	.word	0x00021e80

0000c4fc <_ZN17LimitSwitchSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
}

Sensor::OutputSensor LimitSwitchSensor::getValue()
    c4fc:	b480      	push	{r7}
    c4fe:	b087      	sub	sp, #28
    c500:	af00      	add	r7, sp, #0
    c502:	4602      	mov	r2, r0
    c504:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c506:	f04f 0302 	mov.w	r3, #2	; 0x2
    c50a:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c50c:	4b05      	ldr	r3, [pc, #20]	(c524 <_ZN17LimitSwitchSensor8getValueEv+0x28>)
    c50e:	6053      	str	r3, [r2, #4]
    outputR.b = this->output;
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	7b9b      	ldrb	r3, [r3, #14]
    c514:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c516:	4610      	mov	r0, r2
    c518:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c51c:	46bd      	mov	sp, r7
    c51e:	bc80      	pop	{r7}
    c520:	4770      	bx	lr
    c522:	46c0      	nop			(mov r8, r8)
    c524:	00000000 	.word	0x00000000

0000c528 <_ZN17LimitSwitchSensor7getNameEv>:

LimitSwitchSensor::LimitSwitchName LimitSwitchSensor::getName()
    c528:	b480      	push	{r7}
    c52a:	b083      	sub	sp, #12
    c52c:	af00      	add	r7, sp, #0
    c52e:	6078      	str	r0, [r7, #4]
{
    return name;
    c530:	687b      	ldr	r3, [r7, #4]
    c532:	7b5b      	ldrb	r3, [r3, #13]
}
    c534:	4618      	mov	r0, r3
    c536:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c53a:	46bd      	mov	sp, r7
    c53c:	bc80      	pop	{r7}
    c53e:	4770      	bx	lr

0000c540 <_ZN17LimitSwitchSensor11updateValueEv>:

LimitSwitchSensor::~LimitSwitchSensor()
{
}

void  LimitSwitchSensor::updateValue()
    c540:	b590      	push	{r4, r7, lr}
    c542:	b083      	sub	sp, #12
    c544:	af00      	add	r7, sp, #0
    c546:	6078      	str	r0, [r7, #4]
{
    counter <<= 1;
    c548:	687b      	ldr	r3, [r7, #4]
    c54a:	7b1b      	ldrb	r3, [r3, #12]
    c54c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c550:	b2db      	uxtb	r3, r3
    c552:	687a      	ldr	r2, [r7, #4]
    c554:	7313      	strb	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)== Bit_SET);
    c556:	687b      	ldr	r3, [r7, #4]
    c558:	7b1b      	ldrb	r3, [r3, #12]
    c55a:	461c      	mov	r4, r3
    c55c:	687b      	ldr	r3, [r7, #4]
    c55e:	689a      	ldr	r2, [r3, #8]
    c560:	687b      	ldr	r3, [r7, #4]
    c562:	889b      	ldrh	r3, [r3, #4]
    c564:	4610      	mov	r0, r2
    c566:	4619      	mov	r1, r3
    c568:	f7f5 f99c 	bl	18a4 <GPIO_ReadInputDataBit>
    c56c:	4603      	mov	r3, r0
    c56e:	2b01      	cmp	r3, #1
    c570:	bf14      	ite	ne
    c572:	2300      	movne	r3, #0
    c574:	2301      	moveq	r3, #1
    c576:	4622      	mov	r2, r4
    c578:	ea42 0303 	orr.w	r3, r2, r3
    c57c:	b2db      	uxtb	r3, r3
    c57e:	b2db      	uxtb	r3, r3
    c580:	687a      	ldr	r2, [r7, #4]
    c582:	7313      	strb	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
    c584:	687b      	ldr	r3, [r7, #4]
    c586:	7b1b      	ldrb	r3, [r3, #12]
    c588:	2bff      	cmp	r3, #255
    c58a:	bf14      	ite	ne
    c58c:	2300      	movne	r3, #0
    c58e:	2301      	moveq	r3, #1
    c590:	b2db      	uxtb	r3, r3
    c592:	687a      	ldr	r2, [r7, #4]
    c594:	7393      	strb	r3, [r2, #14]
}
    c596:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c59a:	46bd      	mov	sp, r7
    c59c:	bd90      	pop	{r4, r7, pc}
    c59e:	46c0      	nop			(mov r8, r8)

0000c5a0 <_ZN17LimitSwitchSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c5a0:	b580      	push	{r7, lr}
    c5a2:	b082      	sub	sp, #8
    c5a4:	af00      	add	r7, sp, #0
    c5a6:	6078      	str	r0, [r7, #4]
    c5a8:	687a      	ldr	r2, [r7, #4]
    c5aa:	4b0a      	ldr	r3, [pc, #40]	(c5d4 <_ZN17LimitSwitchSensorD0Ev+0x34>)
    c5ac:	6013      	str	r3, [r2, #0]
{
}
    c5ae:	687b      	ldr	r3, [r7, #4]
    c5b0:	4618      	mov	r0, r3
    c5b2:	f7f9 fbb7 	bl	5d24 <_ZN6SensorD2Ev>
    c5b6:	f04f 0301 	mov.w	r3, #1	; 0x1
    c5ba:	b2db      	uxtb	r3, r3
    c5bc:	2b00      	cmp	r3, #0
    c5be:	d002      	beq.n	c5c6 <_ZN17LimitSwitchSensorD0Ev+0x26>
    c5c0:	6878      	ldr	r0, [r7, #4]
    c5c2:	f002 f917 	bl	e7f4 <_ZdlPv>
    c5c6:	687b      	ldr	r3, [r7, #4]
    c5c8:	4618      	mov	r0, r3
    c5ca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c5ce:	46bd      	mov	sp, r7
    c5d0:	bd80      	pop	{r7, pc}
    c5d2:	46c0      	nop			(mov r8, r8)
    c5d4:	00021e98 	.word	0x00021e98

0000c5d8 <_ZN17LimitSwitchSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c5d8:	b580      	push	{r7, lr}
    c5da:	b082      	sub	sp, #8
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
    c5e0:	687a      	ldr	r2, [r7, #4]
    c5e2:	4b0a      	ldr	r3, [pc, #40]	(c60c <_ZN17LimitSwitchSensorD1Ev+0x34>)
    c5e4:	6013      	str	r3, [r2, #0]
{
}
    c5e6:	687b      	ldr	r3, [r7, #4]
    c5e8:	4618      	mov	r0, r3
    c5ea:	f7f9 fb9b 	bl	5d24 <_ZN6SensorD2Ev>
    c5ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5f2:	b2db      	uxtb	r3, r3
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d002      	beq.n	c5fe <_ZN17LimitSwitchSensorD1Ev+0x26>
    c5f8:	6878      	ldr	r0, [r7, #4]
    c5fa:	f002 f8fb 	bl	e7f4 <_ZdlPv>
    c5fe:	687b      	ldr	r3, [r7, #4]
    c600:	4618      	mov	r0, r3
    c602:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c606:	46bd      	mov	sp, r7
    c608:	bd80      	pop	{r7, pc}
    c60a:	46c0      	nop			(mov r8, r8)
    c60c:	00021e98 	.word	0x00021e98

0000c610 <_ZN17LimitSwitchSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c610:	b580      	push	{r7, lr}
    c612:	b082      	sub	sp, #8
    c614:	af00      	add	r7, sp, #0
    c616:	6078      	str	r0, [r7, #4]
    c618:	687a      	ldr	r2, [r7, #4]
    c61a:	4b0a      	ldr	r3, [pc, #40]	(c644 <_ZN17LimitSwitchSensorD2Ev+0x34>)
    c61c:	6013      	str	r3, [r2, #0]
{
}
    c61e:	687b      	ldr	r3, [r7, #4]
    c620:	4618      	mov	r0, r3
    c622:	f7f9 fb7f 	bl	5d24 <_ZN6SensorD2Ev>
    c626:	f04f 0300 	mov.w	r3, #0	; 0x0
    c62a:	b2db      	uxtb	r3, r3
    c62c:	2b00      	cmp	r3, #0
    c62e:	d002      	beq.n	c636 <_ZN17LimitSwitchSensorD2Ev+0x26>
    c630:	6878      	ldr	r0, [r7, #4]
    c632:	f002 f8df 	bl	e7f4 <_ZdlPv>
    c636:	687b      	ldr	r3, [r7, #4]
    c638:	4618      	mov	r0, r3
    c63a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c63e:	46bd      	mov	sp, r7
    c640:	bd80      	pop	{r7, pc}
    c642:	46c0      	nop			(mov r8, r8)
    c644:	00021e98 	.word	0x00021e98

0000c648 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c648:	b580      	push	{r7, lr}
    c64a:	b086      	sub	sp, #24
    c64c:	af00      	add	r7, sp, #0
    c64e:	60f8      	str	r0, [r7, #12]
    c650:	607b      	str	r3, [r7, #4]
    c652:	460b      	mov	r3, r1
    c654:	72fb      	strb	r3, [r7, #11]
    c656:	4613      	mov	r3, r2
    c658:	813b      	strh	r3, [r7, #8]
    c65a:	68fb      	ldr	r3, [r7, #12]
    c65c:	4618      	mov	r0, r3
    c65e:	f7f9 fb11 	bl	5c84 <_ZN6SensorC2Ev>
    c662:	68fa      	ldr	r2, [r7, #12]
    c664:	4b13      	ldr	r3, [pc, #76]	(c6b4 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c666:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c668:	68fa      	ldr	r2, [r7, #12]
    c66a:	7afb      	ldrb	r3, [r7, #11]
    c66c:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c66e:	68fa      	ldr	r2, [r7, #12]
    c670:	893b      	ldrh	r3, [r7, #8]
    c672:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c674:	68fa      	ldr	r2, [r7, #12]
    c676:	687b      	ldr	r3, [r7, #4]
    c678:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c67a:	68fa      	ldr	r2, [r7, #12]
    c67c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c680:	7313      	strb	r3, [r2, #12]
    output = false;
    c682:	68fa      	ldr	r2, [r7, #12]
    c684:	f04f 0300 	mov.w	r3, #0	; 0x0
    c688:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c68a:	893b      	ldrh	r3, [r7, #8]
    c68c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c68e:	f04f 0304 	mov.w	r3, #4	; 0x4
    c692:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c694:	f04f 0303 	mov.w	r3, #3	; 0x3
    c698:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c69a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c69e:	6878      	ldr	r0, [r7, #4]
    c6a0:	4619      	mov	r1, r3
    c6a2:	f7f5 f805 	bl	16b0 <GPIO_Init>
}
    c6a6:	68fb      	ldr	r3, [r7, #12]
    c6a8:	4618      	mov	r0, r3
    c6aa:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c6ae:	46bd      	mov	sp, r7
    c6b0:	bd80      	pop	{r7, pc}
    c6b2:	46c0      	nop			(mov r8, r8)
    c6b4:	00021e98 	.word	0x00021e98

0000c6b8 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c6b8:	b580      	push	{r7, lr}
    c6ba:	b086      	sub	sp, #24
    c6bc:	af00      	add	r7, sp, #0
    c6be:	60f8      	str	r0, [r7, #12]
    c6c0:	607b      	str	r3, [r7, #4]
    c6c2:	460b      	mov	r3, r1
    c6c4:	72fb      	strb	r3, [r7, #11]
    c6c6:	4613      	mov	r3, r2
    c6c8:	813b      	strh	r3, [r7, #8]
    c6ca:	68fb      	ldr	r3, [r7, #12]
    c6cc:	4618      	mov	r0, r3
    c6ce:	f7f9 fad9 	bl	5c84 <_ZN6SensorC2Ev>
    c6d2:	68fa      	ldr	r2, [r7, #12]
    c6d4:	4b13      	ldr	r3, [pc, #76]	(c724 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c6d6:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c6d8:	68fa      	ldr	r2, [r7, #12]
    c6da:	7afb      	ldrb	r3, [r7, #11]
    c6dc:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c6de:	68fa      	ldr	r2, [r7, #12]
    c6e0:	893b      	ldrh	r3, [r7, #8]
    c6e2:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c6e4:	68fa      	ldr	r2, [r7, #12]
    c6e6:	687b      	ldr	r3, [r7, #4]
    c6e8:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c6ea:	68fa      	ldr	r2, [r7, #12]
    c6ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    c6f0:	7313      	strb	r3, [r2, #12]
    output = false;
    c6f2:	68fa      	ldr	r2, [r7, #12]
    c6f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c6f8:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c6fa:	893b      	ldrh	r3, [r7, #8]
    c6fc:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c6fe:	f04f 0304 	mov.w	r3, #4	; 0x4
    c702:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c704:	f04f 0303 	mov.w	r3, #3	; 0x3
    c708:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c70a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c70e:	6878      	ldr	r0, [r7, #4]
    c710:	4619      	mov	r1, r3
    c712:	f7f4 ffcd 	bl	16b0 <GPIO_Init>
}
    c716:	68fb      	ldr	r3, [r7, #12]
    c718:	4618      	mov	r0, r3
    c71a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c71e:	46bd      	mov	sp, r7
    c720:	bd80      	pop	{r7, pc}
    c722:	46c0      	nop			(mov r8, r8)
    c724:	00021e98 	.word	0x00021e98

0000c728 <_ZN10PWMHandler13setPulseWidthEt>:
{
    setPulseWidth(dutyCycle*timer->getPeriod());
}

// Change la taille de l’impulsion.
void PWMHandler::setPulseWidth(uint16_t pulseWidth)
    c728:	b580      	push	{r7, lr}
    c72a:	b084      	sub	sp, #16
    c72c:	af00      	add	r7, sp, #0
    c72e:	6078      	str	r0, [r7, #4]
    c730:	460b      	mov	r3, r1
    c732:	807b      	strh	r3, [r7, #2]
{
    TIM_TypeDef* TIMx = timer->getTIMx();
    c734:	687b      	ldr	r3, [r7, #4]
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	4618      	mov	r0, r3
    c73a:	f000 fe65 	bl	d408 <_ZN5Timer7getTIMxEv>
    c73e:	4603      	mov	r3, r0
    c740:	60fb      	str	r3, [r7, #12]
    if(OCx == 1)
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	791b      	ldrb	r3, [r3, #4]
    c746:	2b01      	cmp	r3, #1
    c748:	d103      	bne.n	c752 <_ZN10PWMHandler13setPulseWidthEt+0x2a>
        TIMx->CCR1 = pulseWidth;
    c74a:	68fa      	ldr	r2, [r7, #12]
    c74c:	887b      	ldrh	r3, [r7, #2]
    c74e:	8693      	strh	r3, [r2, #52]
    c750:	e017      	b.n	c782 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 2)
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	791b      	ldrb	r3, [r3, #4]
    c756:	2b02      	cmp	r3, #2
    c758:	d103      	bne.n	c762 <_ZN10PWMHandler13setPulseWidthEt+0x3a>
        TIMx->CCR2 = pulseWidth;
    c75a:	68fa      	ldr	r2, [r7, #12]
    c75c:	887b      	ldrh	r3, [r7, #2]
    c75e:	8713      	strh	r3, [r2, #56]
    c760:	e00f      	b.n	c782 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 3)
    c762:	687b      	ldr	r3, [r7, #4]
    c764:	791b      	ldrb	r3, [r3, #4]
    c766:	2b03      	cmp	r3, #3
    c768:	d103      	bne.n	c772 <_ZN10PWMHandler13setPulseWidthEt+0x4a>
        TIMx->CCR3 = pulseWidth;
    c76a:	68fa      	ldr	r2, [r7, #12]
    c76c:	887b      	ldrh	r3, [r7, #2]
    c76e:	8793      	strh	r3, [r2, #60]
    c770:	e007      	b.n	c782 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 4)
    c772:	687b      	ldr	r3, [r7, #4]
    c774:	791b      	ldrb	r3, [r3, #4]
    c776:	2b04      	cmp	r3, #4
    c778:	d103      	bne.n	c782 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
        TIMx->CCR4 = pulseWidth;
    c77a:	68fa      	ldr	r2, [r7, #12]
    c77c:	887b      	ldrh	r3, [r7, #2]
    c77e:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    c782:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c786:	46bd      	mov	sp, r7
    c788:	bd80      	pop	{r7, pc}
    c78a:	46c0      	nop			(mov r8, r8)

0000c78c <_ZN10PWMHandlerD1Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    c78c:	b580      	push	{r7, lr}
    c78e:	b082      	sub	sp, #8
    c790:	af00      	add	r7, sp, #0
    c792:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    c794:	6878      	ldr	r0, [r7, #4]
    c796:	f04f 0100 	mov.w	r1, #0	; 0x0
    c79a:	f7ff ffc5 	bl	c728 <_ZN10PWMHandler13setPulseWidthEt>
}
    c79e:	687b      	ldr	r3, [r7, #4]
    c7a0:	4618      	mov	r0, r3
    c7a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c7a6:	46bd      	mov	sp, r7
    c7a8:	bd80      	pop	{r7, pc}
    c7aa:	46c0      	nop			(mov r8, r8)

0000c7ac <_ZN10PWMHandlerD2Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    c7ac:	b580      	push	{r7, lr}
    c7ae:	b082      	sub	sp, #8
    c7b0:	af00      	add	r7, sp, #0
    c7b2:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    c7b4:	6878      	ldr	r0, [r7, #4]
    c7b6:	f04f 0100 	mov.w	r1, #0	; 0x0
    c7ba:	f7ff ffb5 	bl	c728 <_ZN10PWMHandler13setPulseWidthEt>
}
    c7be:	687b      	ldr	r3, [r7, #4]
    c7c0:	4618      	mov	r0, r3
    c7c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c7c6:	46bd      	mov	sp, r7
    c7c8:	bd80      	pop	{r7, pc}
    c7ca:	46c0      	nop			(mov r8, r8)

0000c7cc <_ZN10PWMHandler12setDutyCycleEf>:

//Change le rapport cyclique
void PWMHandler::setDutyCycle(float dutyCycle)
    c7cc:	b580      	push	{r7, lr}
    c7ce:	b082      	sub	sp, #8
    c7d0:	af00      	add	r7, sp, #0
    c7d2:	6078      	str	r0, [r7, #4]
    c7d4:	6039      	str	r1, [r7, #0]
{
    setPulseWidth(dutyCycle*timer->getPeriod());
    c7d6:	687b      	ldr	r3, [r7, #4]
    c7d8:	681b      	ldr	r3, [r3, #0]
    c7da:	4618      	mov	r0, r3
    c7dc:	f000 fe20 	bl	d420 <_ZN5Timer9getPeriodEv>
    c7e0:	4603      	mov	r3, r0
    c7e2:	4618      	mov	r0, r3
    c7e4:	f00e faf2 	bl	1adcc <__aeabi_i2f>
    c7e8:	4603      	mov	r3, r0
    c7ea:	4618      	mov	r0, r3
    c7ec:	6839      	ldr	r1, [r7, #0]
    c7ee:	f00e fb41 	bl	1ae74 <__aeabi_fmul>
    c7f2:	4603      	mov	r3, r0
    c7f4:	4618      	mov	r0, r3
    c7f6:	f00e fd27 	bl	1b248 <__aeabi_f2uiz>
    c7fa:	4603      	mov	r3, r0
    c7fc:	b29b      	uxth	r3, r3
    c7fe:	6878      	ldr	r0, [r7, #4]
    c800:	4619      	mov	r1, r3
    c802:	f7ff ff91 	bl	c728 <_ZN10PWMHandler13setPulseWidthEt>
}
    c806:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c80a:	46bd      	mov	sp, r7
    c80c:	bd80      	pop	{r7, pc}
    c80e:	46c0      	nop			(mov r8, r8)

0000c810 <_ZN10PWMHandlerC1EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    c810:	b580      	push	{r7, lr}
    c812:	b08a      	sub	sp, #40
    c814:	af00      	add	r7, sp, #0
    c816:	60f8      	str	r0, [r7, #12]
    c818:	60b9      	str	r1, [r7, #8]
    c81a:	4613      	mov	r3, r2
    c81c:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    c81e:	68fa      	ldr	r2, [r7, #12]
    c820:	68bb      	ldr	r3, [r7, #8]
    c822:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    c824:	68fa      	ldr	r2, [r7, #12]
    c826:	79fb      	ldrb	r3, [r7, #7]
    c828:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    c82a:	f04f 0360 	mov.w	r3, #96	; 0x60
    c82e:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    c830:	f04f 0301 	mov.w	r3, #1	; 0x1
    c834:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    c836:	f04f 0300 	mov.w	r3, #0	; 0x0
    c83a:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    c83c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c840:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    c842:	68b8      	ldr	r0, [r7, #8]
    c844:	f000 fde0 	bl	d408 <_ZN5Timer7getTIMxEv>
    c848:	4603      	mov	r3, r0
    c84a:	627b      	str	r3, [r7, #36]

    switch(OCx)
    c84c:	79fb      	ldrb	r3, [r7, #7]
    c84e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c852:	2b03      	cmp	r3, #3
    c854:	d839      	bhi.n	c8ca <_ZN10PWMHandlerC1EP5Timerh+0xba>
    c856:	a201      	add	r2, pc, #4	(adr r2, c85c <_ZN10PWMHandlerC1EP5Timerh+0x4c>)
    c858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c85c:	0000c86d 	.word	0x0000c86d
    c860:	0000c885 	.word	0x0000c885
    c864:	0000c89d 	.word	0x0000c89d
    c868:	0000c8b5 	.word	0x0000c8b5
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    c86c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c870:	6a78      	ldr	r0, [r7, #36]
    c872:	4619      	mov	r1, r3
    c874:	f7f6 f81c 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c878:	6a78      	ldr	r0, [r7, #36]
    c87a:	f04f 0108 	mov.w	r1, #8	; 0x8
    c87e:	f7f6 ff31 	bl	36e4 <TIM_OC1PreloadConfig>
    c882:	e022      	b.n	c8ca <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    c884:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c888:	6a78      	ldr	r0, [r7, #36]
    c88a:	4619      	mov	r1, r3
    c88c:	f7f6 f89e 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c890:	6a78      	ldr	r0, [r7, #36]
    c892:	f04f 0108 	mov.w	r1, #8	; 0x8
    c896:	f7f6 ff43 	bl	3720 <TIM_OC2PreloadConfig>
    c89a:	e016      	b.n	c8ca <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    c89c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c8a0:	6a78      	ldr	r0, [r7, #36]
    c8a2:	4619      	mov	r1, r3
    c8a4:	f7f6 f934 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c8a8:	6a78      	ldr	r0, [r7, #36]
    c8aa:	f04f 0108 	mov.w	r1, #8	; 0x8
    c8ae:	f7f6 ff57 	bl	3760 <TIM_OC3PreloadConfig>
    c8b2:	e00a      	b.n	c8ca <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    c8b4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c8b8:	6a78      	ldr	r0, [r7, #36]
    c8ba:	4619      	mov	r1, r3
    c8bc:	f7f6 f9c8 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c8c0:	6a78      	ldr	r0, [r7, #36]
    c8c2:	f04f 0108 	mov.w	r1, #8	; 0x8
    c8c6:	f7f6 ff69 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    c8ca:	6a78      	ldr	r0, [r7, #36]
    c8cc:	f04f 0101 	mov.w	r1, #1	; 0x1
    c8d0:	f7f6 fe70 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    c8d4:	6a78      	ldr	r0, [r7, #36]
    c8d6:	f04f 0101 	mov.w	r1, #1	; 0x1
    c8da:	f7f6 fba5 	bl	3028 <TIM_Cmd>
}
    c8de:	68fb      	ldr	r3, [r7, #12]
    c8e0:	4618      	mov	r0, r3
    c8e2:	f107 0728 	add.w	r7, r7, #40	; 0x28
    c8e6:	46bd      	mov	sp, r7
    c8e8:	bd80      	pop	{r7, pc}
    c8ea:	46c0      	nop			(mov r8, r8)

0000c8ec <_ZN10PWMHandlerC2EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    c8ec:	b580      	push	{r7, lr}
    c8ee:	b08a      	sub	sp, #40
    c8f0:	af00      	add	r7, sp, #0
    c8f2:	60f8      	str	r0, [r7, #12]
    c8f4:	60b9      	str	r1, [r7, #8]
    c8f6:	4613      	mov	r3, r2
    c8f8:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    c8fa:	68fa      	ldr	r2, [r7, #12]
    c8fc:	68bb      	ldr	r3, [r7, #8]
    c8fe:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    c900:	68fa      	ldr	r2, [r7, #12]
    c902:	79fb      	ldrb	r3, [r7, #7]
    c904:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    c906:	f04f 0360 	mov.w	r3, #96	; 0x60
    c90a:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    c90c:	f04f 0301 	mov.w	r3, #1	; 0x1
    c910:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    c912:	f04f 0300 	mov.w	r3, #0	; 0x0
    c916:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    c918:	f04f 0300 	mov.w	r3, #0	; 0x0
    c91c:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    c91e:	68b8      	ldr	r0, [r7, #8]
    c920:	f000 fd72 	bl	d408 <_ZN5Timer7getTIMxEv>
    c924:	4603      	mov	r3, r0
    c926:	627b      	str	r3, [r7, #36]

    switch(OCx)
    c928:	79fb      	ldrb	r3, [r7, #7]
    c92a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c92e:	2b03      	cmp	r3, #3
    c930:	d839      	bhi.n	c9a6 <_ZN10PWMHandlerC2EP5Timerh+0xba>
    c932:	a201      	add	r2, pc, #4	(adr r2, c938 <_ZN10PWMHandlerC2EP5Timerh+0x4c>)
    c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c938:	0000c949 	.word	0x0000c949
    c93c:	0000c961 	.word	0x0000c961
    c940:	0000c979 	.word	0x0000c979
    c944:	0000c991 	.word	0x0000c991
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    c948:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c94c:	6a78      	ldr	r0, [r7, #36]
    c94e:	4619      	mov	r1, r3
    c950:	f7f5 ffae 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c954:	6a78      	ldr	r0, [r7, #36]
    c956:	f04f 0108 	mov.w	r1, #8	; 0x8
    c95a:	f7f6 fec3 	bl	36e4 <TIM_OC1PreloadConfig>
    c95e:	e022      	b.n	c9a6 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    c960:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c964:	6a78      	ldr	r0, [r7, #36]
    c966:	4619      	mov	r1, r3
    c968:	f7f6 f830 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c96c:	6a78      	ldr	r0, [r7, #36]
    c96e:	f04f 0108 	mov.w	r1, #8	; 0x8
    c972:	f7f6 fed5 	bl	3720 <TIM_OC2PreloadConfig>
    c976:	e016      	b.n	c9a6 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    c978:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c97c:	6a78      	ldr	r0, [r7, #36]
    c97e:	4619      	mov	r1, r3
    c980:	f7f6 f8c6 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c984:	6a78      	ldr	r0, [r7, #36]
    c986:	f04f 0108 	mov.w	r1, #8	; 0x8
    c98a:	f7f6 fee9 	bl	3760 <TIM_OC3PreloadConfig>
    c98e:	e00a      	b.n	c9a6 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    c990:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c994:	6a78      	ldr	r0, [r7, #36]
    c996:	4619      	mov	r1, r3
    c998:	f7f6 f95a 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c99c:	6a78      	ldr	r0, [r7, #36]
    c99e:	f04f 0108 	mov.w	r1, #8	; 0x8
    c9a2:	f7f6 fefb 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    c9a6:	6a78      	ldr	r0, [r7, #36]
    c9a8:	f04f 0101 	mov.w	r1, #1	; 0x1
    c9ac:	f7f6 fe02 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    c9b0:	6a78      	ldr	r0, [r7, #36]
    c9b2:	f04f 0101 	mov.w	r1, #1	; 0x1
    c9b6:	f7f6 fb37 	bl	3028 <TIM_Cmd>
}
    c9ba:	68fb      	ldr	r3, [r7, #12]
    c9bc:	4618      	mov	r0, r3
    c9be:	f107 0728 	add.w	r7, r7, #40	; 0x28
    c9c2:	46bd      	mov	sp, r7
    c9c4:	bd80      	pop	{r7, pc}
    c9c6:	46c0      	nop			(mov r8, r8)

0000c9c8 <_ZN22QuadratureCoderHandler12getTickValueEv>:

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
}

int16_t QuadratureCoderHandler::getTickValue()
    c9c8:	b580      	push	{r7, lr}
    c9ca:	b084      	sub	sp, #16
    c9cc:	af00      	add	r7, sp, #0
    c9ce:	6078      	str	r0, [r7, #4]
{
    // On enregistre le nbr de tick depuis la dernière remise à zero
    int16_t tick = TIM_GetCounter(coder_tim_port);
    c9d0:	687b      	ldr	r3, [r7, #4]
    c9d2:	681b      	ldr	r3, [r3, #0]
    c9d4:	4618      	mov	r0, r3
    c9d6:	f7f7 fbd3 	bl	4180 <TIM_GetCounter>
    c9da:	4603      	mov	r3, r0
    c9dc:	81fb      	strh	r3, [r7, #14]

    // On remet à zero
    TIM_SetCounter(coder_tim_port, 0);
    c9de:	687b      	ldr	r3, [r7, #4]
    c9e0:	681b      	ldr	r3, [r3, #0]
    c9e2:	4618      	mov	r0, r3
    c9e4:	f04f 0100 	mov.w	r1, #0	; 0x0
    c9e8:	f7f7 fa90 	bl	3f0c <TIM_SetCounter>

    // On retourne ces ticks
    return tick;
    c9ec:	89fb      	ldrh	r3, [r7, #14]
    c9ee:	b21b      	sxth	r3, r3
}
    c9f0:	4618      	mov	r0, r3
    c9f2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c9f6:	46bd      	mov	sp, r7
    c9f8:	bd80      	pop	{r7, pc}
    c9fa:	46c0      	nop			(mov r8, r8)

0000c9fc <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    c9fc:	b580      	push	{r7, lr}
    c9fe:	b088      	sub	sp, #32
    ca00:	af00      	add	r7, sp, #0
    ca02:	60f8      	str	r0, [r7, #12]
    ca04:	60b9      	str	r1, [r7, #8]
    ca06:	607a      	str	r2, [r7, #4]
    ca08:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    ca0a:	68fa      	ldr	r2, [r7, #12]
    ca0c:	68bb      	ldr	r3, [r7, #8]
    ca0e:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    ca10:	68b8      	ldr	r0, [r7, #8]
    ca12:	f000 fd11 	bl	d438 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    ca16:	f04f 0348 	mov.w	r3, #72	; 0x48
    ca1a:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    ca1c:	f04f 0301 	mov.w	r3, #1	; 0x1
    ca20:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    ca22:	887b      	ldrh	r3, [r7, #2]
    ca24:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    ca26:	f107 0312 	add.w	r3, r7, #18	; 0x12
    ca2a:	6878      	ldr	r0, [r7, #4]
    ca2c:	4619      	mov	r1, r3
    ca2e:	f7f4 fe3f 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    ca32:	f04f 0348 	mov.w	r3, #72	; 0x48
    ca36:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    ca38:	f04f 0301 	mov.w	r3, #1	; 0x1
    ca3c:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    ca3e:	8dbb      	ldrh	r3, [r7, #44]
    ca40:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    ca42:	f107 0312 	add.w	r3, r7, #18	; 0x12
    ca46:	6ab8      	ldr	r0, [r7, #40]
    ca48:	4619      	mov	r1, r3
    ca4a:	f7f4 fe31 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    ca4e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca52:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    ca54:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca58:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    ca5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ca5e:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    ca60:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca64:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    ca66:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca6a:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    ca6c:	68fb      	ldr	r3, [r7, #12]
    ca6e:	681b      	ldr	r3, [r3, #0]
    ca70:	f107 0216 	add.w	r2, r7, #22	; 0x16
    ca74:	4618      	mov	r0, r3
    ca76:	4611      	mov	r1, r2
    ca78:	f7f5 fede 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    ca7c:	68fb      	ldr	r3, [r7, #12]
    ca7e:	681b      	ldr	r3, [r3, #0]
    ca80:	4618      	mov	r0, r3
    ca82:	f04f 0103 	mov.w	r1, #3	; 0x3
    ca86:	f04f 0200 	mov.w	r2, #0	; 0x0
    ca8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca8e:	f7f6 fcc5 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    ca92:	68fb      	ldr	r3, [r7, #12]
    ca94:	681b      	ldr	r3, [r3, #0]
    ca96:	4618      	mov	r0, r3
    ca98:	f04f 0101 	mov.w	r1, #1	; 0x1
    ca9c:	f7f6 fac4 	bl	3028 <TIM_Cmd>
}
    caa0:	68fb      	ldr	r3, [r7, #12]
    caa2:	4618      	mov	r0, r3
    caa4:	f107 0720 	add.w	r7, r7, #32	; 0x20
    caa8:	46bd      	mov	sp, r7
    caaa:	bd80      	pop	{r7, pc}

0000caac <_ZN22QuadratureCoderHandlerC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    caac:	b580      	push	{r7, lr}
    caae:	b088      	sub	sp, #32
    cab0:	af00      	add	r7, sp, #0
    cab2:	60f8      	str	r0, [r7, #12]
    cab4:	60b9      	str	r1, [r7, #8]
    cab6:	607a      	str	r2, [r7, #4]
    cab8:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    caba:	68fa      	ldr	r2, [r7, #12]
    cabc:	68bb      	ldr	r3, [r7, #8]
    cabe:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    cac0:	68b8      	ldr	r0, [r7, #8]
    cac2:	f000 fcb9 	bl	d438 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    cac6:	f04f 0348 	mov.w	r3, #72	; 0x48
    caca:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cacc:	f04f 0301 	mov.w	r3, #1	; 0x1
    cad0:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    cad2:	887b      	ldrh	r3, [r7, #2]
    cad4:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    cad6:	f107 0312 	add.w	r3, r7, #18	; 0x12
    cada:	6878      	ldr	r0, [r7, #4]
    cadc:	4619      	mov	r1, r3
    cade:	f7f4 fde7 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    cae2:	f04f 0348 	mov.w	r3, #72	; 0x48
    cae6:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cae8:	f04f 0301 	mov.w	r3, #1	; 0x1
    caec:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    caee:	8dbb      	ldrh	r3, [r7, #44]
    caf0:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    caf2:	f107 0312 	add.w	r3, r7, #18	; 0x12
    caf6:	6ab8      	ldr	r0, [r7, #40]
    caf8:	4619      	mov	r1, r3
    cafa:	f7f4 fdd9 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    cafe:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb02:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    cb04:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb08:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    cb0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cb0e:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    cb10:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb14:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    cb16:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb1a:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    cb1c:	68fb      	ldr	r3, [r7, #12]
    cb1e:	681b      	ldr	r3, [r3, #0]
    cb20:	f107 0216 	add.w	r2, r7, #22	; 0x16
    cb24:	4618      	mov	r0, r3
    cb26:	4611      	mov	r1, r2
    cb28:	f7f5 fe86 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    cb2c:	68fb      	ldr	r3, [r7, #12]
    cb2e:	681b      	ldr	r3, [r3, #0]
    cb30:	4618      	mov	r0, r3
    cb32:	f04f 0103 	mov.w	r1, #3	; 0x3
    cb36:	f04f 0200 	mov.w	r2, #0	; 0x0
    cb3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb3e:	f7f6 fc6d 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    cb42:	68fb      	ldr	r3, [r7, #12]
    cb44:	681b      	ldr	r3, [r3, #0]
    cb46:	4618      	mov	r0, r3
    cb48:	f04f 0101 	mov.w	r1, #1	; 0x1
    cb4c:	f7f6 fa6c 	bl	3028 <TIM_Cmd>
}
    cb50:	68fb      	ldr	r3, [r7, #12]
    cb52:	4618      	mov	r0, r3
    cb54:	f107 0720 	add.w	r7, r7, #32	; 0x20
    cb58:	46bd      	mov	sp, r7
    cb5a:	bd80      	pop	{r7, pc}
    cb5c:	0000      	lsls	r0, r0, #0
	...

0000cb60 <_ZN6Remote13dataAvailableEv>:
    }
    for(int i=0; i<10; i++)
        Remote::getSingleton()->sendData(' ');
}

bool Remote::dataAvailable()
    cb60:	b480      	push	{r7}
    cb62:	b083      	sub	sp, #12
    cb64:	af00      	add	r7, sp, #0
    cb66:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    return REMOTE_USART_INDEX->SR & USART_FLAG_RXNE;
    cb68:	4b07      	ldr	r3, [pc, #28]	(cb88 <_ZN6Remote13dataAvailableEv+0x28>)
    cb6a:	881b      	ldrh	r3, [r3, #0]
    cb6c:	b29b      	uxth	r3, r3
    cb6e:	f003 0320 	and.w	r3, r3, #32	; 0x20
    cb72:	2b00      	cmp	r3, #0
    cb74:	bf0c      	ite	eq
    cb76:	2300      	moveq	r3, #0
    cb78:	2301      	movne	r3, #1
    cb7a:	b2db      	uxtb	r3, r3
#else
    return false;
#endif
}
    cb7c:	4618      	mov	r0, r3
    cb7e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cb82:	46bd      	mov	sp, r7
    cb84:	bc80      	pop	{r7}
    cb86:	4770      	bx	lr
    cb88:	40013800 	.word	0x40013800

0000cb8c <_ZN6Remote11receiveDataEv>:

int Remote::receiveData()
    cb8c:	b480      	push	{r7}
    cb8e:	b083      	sub	sp, #12
    cb90:	af00      	add	r7, sp, #0
    cb92:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    while (!(REMOTE_USART_INDEX->SR & USART_FLAG_RXNE));
    cb94:	4b0c      	ldr	r3, [pc, #48]	(cbc8 <_ZN6Remote11receiveDataEv+0x3c>)
    cb96:	881b      	ldrh	r3, [r3, #0]
    cb98:	b29b      	uxth	r3, r3
    cb9a:	f003 0320 	and.w	r3, r3, #32	; 0x20
    cb9e:	2b00      	cmp	r3, #0
    cba0:	bf14      	ite	ne
    cba2:	2300      	movne	r3, #0
    cba4:	2301      	moveq	r3, #1
    cba6:	b2db      	uxtb	r3, r3
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d1f3      	bne.n	cb94 <_ZN6Remote11receiveDataEv+0x8>

    return ((int)(REMOTE_USART_INDEX->DR & 0x1FF));
    cbac:	4b06      	ldr	r3, [pc, #24]	(cbc8 <_ZN6Remote11receiveDataEv+0x3c>)
    cbae:	889b      	ldrh	r3, [r3, #4]
    cbb0:	b29b      	uxth	r3, r3
    cbb2:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    cbb6:	ea4f 53d3 	mov.w	r3, r3, lsr #23
#else
    return 0;
#endif
}
    cbba:	4618      	mov	r0, r3
    cbbc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cbc0:	46bd      	mov	sp, r7
    cbc2:	bc80      	pop	{r7}
    cbc4:	4770      	bx	lr
    cbc6:	46c0      	nop			(mov r8, r8)
    cbc8:	40013800 	.word	0x40013800

0000cbcc <_ZN6Remote12isRemoteModeEv>:
        if (order>=51 and order<=101)
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    }
}

bool Remote::isRemoteMode()
    cbcc:	b480      	push	{r7}
    cbce:	b083      	sub	sp, #12
    cbd0:	af00      	add	r7, sp, #0
    cbd2:	6078      	str	r0, [r7, #4]
{
    return remoteMode;
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	791b      	ldrb	r3, [r3, #4]
}
    cbd8:	4618      	mov	r0, r3
    cbda:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cbde:	46bd      	mov	sp, r7
    cbe0:	bc80      	pop	{r7}
    cbe2:	4770      	bx	lr

0000cbe4 <_ZN6Remote10getLeftPWMEv>:

float Remote::getLeftPWM()
    cbe4:	b480      	push	{r7}
    cbe6:	b083      	sub	sp, #12
    cbe8:	af00      	add	r7, sp, #0
    cbea:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    cbec:	687b      	ldr	r3, [r7, #4]
    cbee:	68db      	ldr	r3, [r3, #12]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed + angSpeed;
#else
    return linSpeed - angSpeed;
#endif
}
    cbf0:	4618      	mov	r0, r3
    cbf2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cbf6:	46bd      	mov	sp, r7
    cbf8:	bc80      	pop	{r7}
    cbfa:	4770      	bx	lr

0000cbfc <_ZN6Remote11getRightPWMEv>:

float Remote::getRightPWM()
    cbfc:	b480      	push	{r7}
    cbfe:	b083      	sub	sp, #12
    cc00:	af00      	add	r7, sp, #0
    cc02:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    cc04:	687b      	ldr	r3, [r7, #4]
    cc06:	691b      	ldr	r3, [r3, #16]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed - angSpeed;
#else
    return linSpeed + angSpeed;
#endif
}
    cc08:	4618      	mov	r0, r3
    cc0a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cc0e:	46bd      	mov	sp, r7
    cc10:	bc80      	pop	{r7}
    cc12:	4770      	bx	lr

0000cc14 <_ZN6Remote8sendDataEi>:

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
#endif
}

void Remote::sendData(int data)
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	6078      	str	r0, [r7, #4]
    cc1c:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(REMOTE_USART_INDEX, USART_FLAG_TXE) == RESET);
    cc1e:	480b      	ldr	r0, [pc, #44]	(cc4c <_ZN6Remote8sendDataEi+0x38>)
    cc20:	f04f 0180 	mov.w	r1, #128	; 0x80
    cc24:	f7f8 f8a2 	bl	4d6c <USART_GetFlagStatus>
    cc28:	4603      	mov	r3, r0
    cc2a:	2b00      	cmp	r3, #0
    cc2c:	bf14      	ite	ne
    cc2e:	2300      	movne	r3, #0
    cc30:	2301      	moveq	r3, #1
    cc32:	b2db      	uxtb	r3, r3
    cc34:	2b00      	cmp	r3, #0
    cc36:	d1f2      	bne.n	cc1e <_ZN6Remote8sendDataEi+0xa>
    USART_SendData(REMOTE_USART_INDEX, (u16) data);
    cc38:	683b      	ldr	r3, [r7, #0]
    cc3a:	b29b      	uxth	r3, r3
    cc3c:	4803      	ldr	r0, [pc, #12]	(cc4c <_ZN6Remote8sendDataEi+0x38>)
    cc3e:	4619      	mov	r1, r3
    cc40:	f7f7 ff60 	bl	4b04 <USART_SendData>
#endif
}
    cc44:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cc48:	46bd      	mov	sp, r7
    cc4a:	bd80      	pop	{r7, pc}
    cc4c:	40013800 	.word	0x40013800

0000cc50 <_ZN6Remote8initUARTEi>:

#endif

}

void Remote::initUART(int baudRate)
    cc50:	b580      	push	{r7, lr}
    cc52:	b086      	sub	sp, #24
    cc54:	af00      	add	r7, sp, #0
    cc56:	6078      	str	r0, [r7, #4]
    cc58:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = baudRate;
    cc5a:	683b      	ldr	r3, [r7, #0]
    cc5c:	60bb      	str	r3, [r7, #8]

    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    cc5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    cc62:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    cc64:	f04f 0300 	mov.w	r3, #0	; 0x0
    cc68:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    cc6a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cc6e:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    cc70:	f04f 0300 	mov.w	r3, #0	; 0x0
    cc74:	82bb      	strh	r3, [r7, #20]

    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    cc76:	f04f 030c 	mov.w	r3, #12	; 0xc
    cc7a:	827b      	strh	r3, [r7, #18]

    USART_Init(REMOTE_USART_INDEX, &USART_InitStructure);
    cc7c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    cc80:	4806      	ldr	r0, [pc, #24]	(cc9c <_ZN6Remote8initUARTEi+0x4c>)
    cc82:	4619      	mov	r1, r3
    cc84:	f7f7 fccc 	bl	4620 <USART_Init>

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
    cc88:	4804      	ldr	r0, [pc, #16]	(cc9c <_ZN6Remote8initUARTEi+0x4c>)
    cc8a:	f04f 0101 	mov.w	r1, #1	; 0x1
    cc8e:	f7f7 fde7 	bl	4860 <USART_Cmd>
#endif
}
    cc92:	f107 0718 	add.w	r7, r7, #24	; 0x18
    cc96:	46bd      	mov	sp, r7
    cc98:	bd80      	pop	{r7, pc}
    cc9a:	46c0      	nop			(mov r8, r8)
    cc9c:	40013800 	.word	0x40013800

0000cca0 <_ZN6Remote22initClocksAndPortsGPIOEv>:

    linSpeed = 0.;
    angSpeed = 0.;
}

void Remote::initClocksAndPortsGPIO()
    cca0:	b580      	push	{r7, lr}
    cca2:	b084      	sub	sp, #16
    cca4:	af00      	add	r7, sp, #0
    cca6:	6078      	str	r0, [r7, #4]
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    //RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    cca8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    ccac:	f04f 0101 	mov.w	r1, #1	; 0x1
    ccb0:	f7f5 fbca 	bl	2448 <RCC_APB2PeriphClockCmd>

    GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
    ccb4:	f04f 0004 	mov.w	r0, #4	; 0x4
    ccb8:	f04f 0101 	mov.w	r1, #1	; 0x1
    ccbc:	f7f4 fee8 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
    // port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    ccc0:	f04f 0340 	mov.w	r3, #64	; 0x40
    ccc4:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    ccc6:	f04f 0318 	mov.w	r3, #24	; 0x18
    ccca:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    cccc:	f04f 0303 	mov.w	r3, #3	; 0x3
    ccd0:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    ccd2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    ccd6:	480b      	ldr	r0, [pc, #44]	(cd04 <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    ccd8:	4619      	mov	r1, r3
    ccda:	f7f4 fce9 	bl	16b0 <GPIO_Init>

    // port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    ccde:	f04f 0380 	mov.w	r3, #128	; 0x80
    cce2:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    cce4:	f04f 0304 	mov.w	r3, #4	; 0x4
    cce8:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    ccea:	f04f 0303 	mov.w	r3, #3	; 0x3
    ccee:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    ccf0:	f107 030c 	add.w	r3, r7, #12	; 0xc
    ccf4:	4803      	ldr	r0, [pc, #12]	(cd04 <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    ccf6:	4619      	mov	r1, r3
    ccf8:	f7f4 fcda 	bl	16b0 <GPIO_Init>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);*/     // Rx
#endif

#endif

}
    ccfc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cd00:	46bd      	mov	sp, r7
    cd02:	bd80      	pop	{r7, pc}
    cd04:	40010c00 	.word	0x40010c00

0000cd08 <_ZN6RemoteC1Ev>:

    return singleton;
}


Remote::Remote()
    cd08:	b580      	push	{r7, lr}
    cd0a:	b082      	sub	sp, #8
    cd0c:	af00      	add	r7, sp, #0
    cd0e:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    cd10:	6878      	ldr	r0, [r7, #4]
    cd12:	f7ff ffc5 	bl	cca0 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    cd16:	6878      	ldr	r0, [r7, #4]
    cd18:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    cd1c:	f7ff ff98 	bl	cc50 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    cd20:	687a      	ldr	r2, [r7, #4]
    cd22:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd26:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    cd28:	687a      	ldr	r2, [r7, #4]
    cd2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd2e:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    cd30:	687a      	ldr	r2, [r7, #4]
    cd32:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd36:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    cd38:	687a      	ldr	r2, [r7, #4]
    cd3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd3e:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    cd40:	687a      	ldr	r2, [r7, #4]
    cd42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd46:	6013      	str	r3, [r2, #0]

    brakInv = false;
    cd48:	687a      	ldr	r2, [r7, #4]
    cd4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd4e:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    cd50:	687a      	ldr	r2, [r7, #4]
    cd52:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd56:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    cd58:	687a      	ldr	r2, [r7, #4]
    cd5a:	4b05      	ldr	r3, [pc, #20]	(cd70 <_ZN6RemoteC1Ev+0x68>)
    cd5c:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    cd5e:	687a      	ldr	r2, [r7, #4]
    cd60:	4b03      	ldr	r3, [pc, #12]	(cd70 <_ZN6RemoteC1Ev+0x68>)
    cd62:	6113      	str	r3, [r2, #16]
}
    cd64:	687b      	ldr	r3, [r7, #4]
    cd66:	4618      	mov	r0, r3
    cd68:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cd6c:	46bd      	mov	sp, r7
    cd6e:	bd80      	pop	{r7, pc}
    cd70:	00000000 	.word	0x00000000

0000cd74 <_ZN6RemoteC2Ev>:

    return singleton;
}


Remote::Remote()
    cd74:	b580      	push	{r7, lr}
    cd76:	b082      	sub	sp, #8
    cd78:	af00      	add	r7, sp, #0
    cd7a:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    cd7c:	6878      	ldr	r0, [r7, #4]
    cd7e:	f7ff ff8f 	bl	cca0 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    cd82:	6878      	ldr	r0, [r7, #4]
    cd84:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    cd88:	f7ff ff62 	bl	cc50 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    cd8c:	687a      	ldr	r2, [r7, #4]
    cd8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd92:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    cd94:	687a      	ldr	r2, [r7, #4]
    cd96:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd9a:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    cd9c:	687a      	ldr	r2, [r7, #4]
    cd9e:	f04f 0300 	mov.w	r3, #0	; 0x0
    cda2:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    cda4:	687a      	ldr	r2, [r7, #4]
    cda6:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdaa:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    cdac:	687a      	ldr	r2, [r7, #4]
    cdae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdb2:	6013      	str	r3, [r2, #0]

    brakInv = false;
    cdb4:	687a      	ldr	r2, [r7, #4]
    cdb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdba:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    cdbc:	687a      	ldr	r2, [r7, #4]
    cdbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    cdc2:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    cdc4:	687a      	ldr	r2, [r7, #4]
    cdc6:	4b05      	ldr	r3, [pc, #20]	(cddc <_ZN6RemoteC2Ev+0x68>)
    cdc8:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    cdca:	687a      	ldr	r2, [r7, #4]
    cdcc:	4b03      	ldr	r3, [pc, #12]	(cddc <_ZN6RemoteC2Ev+0x68>)
    cdce:	6113      	str	r3, [r2, #16]
}
    cdd0:	687b      	ldr	r3, [r7, #4]
    cdd2:	4618      	mov	r0, r3
    cdd4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cdd8:	46bd      	mov	sp, r7
    cdda:	bd80      	pop	{r7, pc}
    cddc:	00000000 	.word	0x00000000

0000cde0 <_ZN6Remote12getSingletonEv>:
#include "canonFilet.h"
#include "braslateral.h"

Remote* Remote::singleton = 0;

Remote* Remote::getSingleton()
    cde0:	b580      	push	{r7, lr}
    cde2:	b082      	sub	sp, #8
    cde4:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    cde6:	4b0f      	ldr	r3, [pc, #60]	(ce24 <_ZN6Remote12getSingletonEv+0x44>)
    cde8:	681b      	ldr	r3, [r3, #0]
    cdea:	2b00      	cmp	r3, #0
    cdec:	d113      	bne.n	ce16 <_ZN6Remote12getSingletonEv+0x36>
        singleton = new Remote();
    cdee:	f04f 0014 	mov.w	r0, #20	; 0x14
    cdf2:	f001 fc59 	bl	e6a8 <_Znwj>
    cdf6:	4603      	mov	r3, r0
    cdf8:	603b      	str	r3, [r7, #0]
    cdfa:	683a      	ldr	r2, [r7, #0]
    cdfc:	2a00      	cmp	r2, #0
    cdfe:	d005      	beq.n	ce0c <_ZN6Remote12getSingletonEv+0x2c>
    ce00:	6838      	ldr	r0, [r7, #0]
    ce02:	f7ff ff81 	bl	cd08 <_ZN6RemoteC1Ev>
    ce06:	683b      	ldr	r3, [r7, #0]
    ce08:	607b      	str	r3, [r7, #4]
    ce0a:	e001      	b.n	ce10 <_ZN6Remote12getSingletonEv+0x30>
    ce0c:	683a      	ldr	r2, [r7, #0]
    ce0e:	607a      	str	r2, [r7, #4]
    ce10:	4b04      	ldr	r3, [pc, #16]	(ce24 <_ZN6Remote12getSingletonEv+0x44>)
    ce12:	687a      	ldr	r2, [r7, #4]
    ce14:	601a      	str	r2, [r3, #0]

    return singleton;
    ce16:	4b03      	ldr	r3, [pc, #12]	(ce24 <_ZN6Remote12getSingletonEv+0x44>)
    ce18:	681b      	ldr	r3, [r3, #0]
}
    ce1a:	4618      	mov	r0, r3
    ce1c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ce20:	46bd      	mov	sp, r7
    ce22:	bd80      	pop	{r7, pc}
    ce24:	20000588 	.word	0x20000588

0000ce28 <_ZN6Remote3logEPc>:
//        sendData(data[i]);

//    delete [] data;
//}

void Remote::log(char* msg)
    ce28:	b580      	push	{r7, lr}
    ce2a:	b084      	sub	sp, #16
    ce2c:	af00      	add	r7, sp, #0
    ce2e:	6078      	str	r0, [r7, #4]
{
    int pos = 0;
    ce30:	f04f 0300 	mov.w	r3, #0	; 0x0
    ce34:	60bb      	str	r3, [r7, #8]
    ce36:	e00e      	b.n	ce56 <_ZN6Remote3logEPc+0x2e>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
    ce38:	f7ff ffd2 	bl	cde0 <_ZN6Remote12getSingletonEv>
    ce3c:	4601      	mov	r1, r0
    ce3e:	68ba      	ldr	r2, [r7, #8]
    ce40:	687b      	ldr	r3, [r7, #4]
    ce42:	4413      	add	r3, r2
    ce44:	781b      	ldrb	r3, [r3, #0]
    ce46:	4608      	mov	r0, r1
    ce48:	4619      	mov	r1, r3
    ce4a:	f7ff fee3 	bl	cc14 <_ZN6Remote8sendDataEi>
        pos++;
    ce4e:	68bb      	ldr	r3, [r7, #8]
    ce50:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ce54:	60bb      	str	r3, [r7, #8]
//}

void Remote::log(char* msg)
{
    int pos = 0;
    while(msg[pos] != '\0' )
    ce56:	68ba      	ldr	r2, [r7, #8]
    ce58:	687b      	ldr	r3, [r7, #4]
    ce5a:	4413      	add	r3, r2
    ce5c:	781b      	ldrb	r3, [r3, #0]
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d1ea      	bne.n	ce38 <_ZN6Remote3logEPc+0x10>
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    ce62:	f04f 0300 	mov.w	r3, #0	; 0x0
    ce66:	60fb      	str	r3, [r7, #12]
    ce68:	e00b      	b.n	ce82 <_ZN6Remote3logEPc+0x5a>
        Remote::getSingleton()->sendData(' ');
    ce6a:	f7ff ffb9 	bl	cde0 <_ZN6Remote12getSingletonEv>
    ce6e:	4603      	mov	r3, r0
    ce70:	4618      	mov	r0, r3
    ce72:	f04f 0120 	mov.w	r1, #32	; 0x20
    ce76:	f7ff fecd 	bl	cc14 <_ZN6Remote8sendDataEi>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    ce7a:	68fb      	ldr	r3, [r7, #12]
    ce7c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ce80:	60fb      	str	r3, [r7, #12]
    ce82:	68fb      	ldr	r3, [r7, #12]
    ce84:	2b09      	cmp	r3, #9
    ce86:	ddf0      	ble.n	ce6a <_ZN6Remote3logEPc+0x42>
        Remote::getSingleton()->sendData(' ');
}
    ce88:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ce8c:	46bd      	mov	sp, r7
    ce8e:	bd80      	pop	{r7, pc}

0000ce90 <_ZN6Remote6updateEb>:
#else
    return 0;
#endif
}

void Remote::update(bool allowChangeMode)
    ce90:	b580      	push	{r7, lr}
    ce92:	b086      	sub	sp, #24
    ce94:	af00      	add	r7, sp, #0
    ce96:	60f8      	str	r0, [r7, #12]
    ce98:	460b      	mov	r3, r1
    ce9a:	72fb      	strb	r3, [r7, #11]
    }
#endif
*/
    //if (allowChangeMode)
    {
        if (dataAvailable() && !remoteMode)
    ce9c:	68f8      	ldr	r0, [r7, #12]
    ce9e:	f7ff fe5f 	bl	cb60 <_ZN6Remote13dataAvailableEv>
    cea2:	4603      	mov	r3, r0
    cea4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cea8:	b2db      	uxtb	r3, r3
    ceaa:	2b00      	cmp	r3, #0
    ceac:	d10d      	bne.n	ceca <_ZN6Remote6updateEb+0x3a>
    ceae:	68fb      	ldr	r3, [r7, #12]
    ceb0:	791b      	ldrb	r3, [r3, #4]
    ceb2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ceb6:	b2db      	uxtb	r3, r3
    ceb8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cebc:	b2db      	uxtb	r3, r3
    cebe:	2b00      	cmp	r3, #0
    cec0:	d103      	bne.n	ceca <_ZN6Remote6updateEb+0x3a>
    cec2:	f04f 0301 	mov.w	r3, #1	; 0x1
    cec6:	603b      	str	r3, [r7, #0]
    cec8:	e002      	b.n	ced0 <_ZN6Remote6updateEb+0x40>
    ceca:	f04f 0300 	mov.w	r3, #0	; 0x0
    cece:	603b      	str	r3, [r7, #0]
    ced0:	683b      	ldr	r3, [r7, #0]
    ced2:	2b00      	cmp	r3, #0
    ced4:	d007      	beq.n	cee6 <_ZN6Remote6updateEb+0x56>
        {
            remoteMode = true;
    ced6:	68fa      	ldr	r2, [r7, #12]
    ced8:	f04f 0301 	mov.w	r3, #1	; 0x1
    cedc:	7113      	strb	r3, [r2, #4]
            Remote::log("Reçu, avant toute commandant !");
    cede:	4b54      	ldr	r3, [pc, #336]	(d030 <_ZN6Remote6updateEb+0x1a0>)
    cee0:	4618      	mov	r0, r3
    cee2:	f7ff ffa1 	bl	ce28 <_ZN6Remote3logEPc>
        }
        if (remoteMode)
    cee6:	68fb      	ldr	r3, [r7, #12]
    cee8:	791b      	ldrb	r3, [r3, #4]
    ceea:	2b00      	cmp	r3, #0
    ceec:	d004      	beq.n	cef8 <_ZN6Remote6updateEb+0x68>
            Led::setOn(1);
    ceee:	f04f 0001 	mov.w	r0, #1	; 0x1
    cef2:	f7ff f97d 	bl	c1f0 <_ZN3Led5setOnEi>
    cef6:	e003      	b.n	cf00 <_ZN6Remote6updateEb+0x70>
        else
            Led::setOff(1);
    cef8:	f04f 0001 	mov.w	r0, #1	; 0x1
    cefc:	f7ff f938 	bl	c170 <_ZN3Led6setOffEi>
    }

    if (!allowChangeMode && remoteMode && dataAvailable())
    cf00:	7afb      	ldrb	r3, [r7, #11]
    cf02:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cf06:	b2db      	uxtb	r3, r3
    cf08:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cf0c:	b2db      	uxtb	r3, r3
    cf0e:	2b00      	cmp	r3, #0
    cf10:	d113      	bne.n	cf3a <_ZN6Remote6updateEb+0xaa>
    cf12:	68fb      	ldr	r3, [r7, #12]
    cf14:	791b      	ldrb	r3, [r3, #4]
    cf16:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cf1a:	b2db      	uxtb	r3, r3
    cf1c:	2b00      	cmp	r3, #0
    cf1e:	d10c      	bne.n	cf3a <_ZN6Remote6updateEb+0xaa>
    cf20:	68f8      	ldr	r0, [r7, #12]
    cf22:	f7ff fe1d 	bl	cb60 <_ZN6Remote13dataAvailableEv>
    cf26:	4603      	mov	r3, r0
    cf28:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cf2c:	b2db      	uxtb	r3, r3
    cf2e:	2b00      	cmp	r3, #0
    cf30:	d103      	bne.n	cf3a <_ZN6Remote6updateEb+0xaa>
    cf32:	f04f 0301 	mov.w	r3, #1	; 0x1
    cf36:	607b      	str	r3, [r7, #4]
    cf38:	e002      	b.n	cf40 <_ZN6Remote6updateEb+0xb0>
    cf3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf3e:	607b      	str	r3, [r7, #4]
    cf40:	687b      	ldr	r3, [r7, #4]
    cf42:	2b00      	cmp	r3, #0
    cf44:	d069      	beq.n	d01a <_ZN6Remote6updateEb+0x18a>
    {
        int order = receiveData();
    cf46:	68f8      	ldr	r0, [r7, #12]
    cf48:	f7ff fe20 	bl	cb8c <_ZN6Remote11receiveDataEv>
    cf4c:	4603      	mov	r3, r0
    cf4e:	617b      	str	r3, [r7, #20]
        Remote::log("Got:");
    cf50:	4b38      	ldr	r3, [pc, #224]	(d034 <_ZN6Remote6updateEb+0x1a4>)
    cf52:	4618      	mov	r0, r3
    cf54:	f7ff ff68 	bl	ce28 <_ZN6Remote3logEPc>
        Remote::getSingleton()->sendData(order);
    cf58:	f7ff ff42 	bl	cde0 <_ZN6Remote12getSingletonEv>
    cf5c:	4603      	mov	r3, r0
    cf5e:	4618      	mov	r0, r3
    cf60:	6979      	ldr	r1, [r7, #20]
    cf62:	f7ff fe57 	bl	cc14 <_ZN6Remote8sendDataEi>
            break;
        }
#endif
*/
        // Linear Speed
        if (order>=0 and order<=50)
    cf66:	697b      	ldr	r3, [r7, #20]
    cf68:	2b00      	cmp	r3, #0
    cf6a:	db27      	blt.n	cfbc <_ZN6Remote6updateEb+0x12c>
    cf6c:	697b      	ldr	r3, [r7, #20]
    cf6e:	2b32      	cmp	r3, #50
    cf70:	dc24      	bgt.n	cfbc <_ZN6Remote6updateEb+0x12c>
            linSpeed = ((float)(order-25)) / 25. * LINEAR_REMOTE_SPEED_LIMIT;
    cf72:	697b      	ldr	r3, [r7, #20]
    cf74:	f1a3 0319 	sub.w	r3, r3, #25	; 0x19
    cf78:	4618      	mov	r0, r3
    cf7a:	f00d ff27 	bl	1adcc <__aeabi_i2f>
    cf7e:	4603      	mov	r3, r0
    cf80:	4618      	mov	r0, r3
    cf82:	f00d fb05 	bl	1a590 <__aeabi_f2d>
    cf86:	4602      	mov	r2, r0
    cf88:	460b      	mov	r3, r1
    cf8a:	4610      	mov	r0, r2
    cf8c:	4619      	mov	r1, r3
    cf8e:	f04f 0200 	mov.w	r2, #0	; 0x0
    cf92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cf96:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    cf9a:	f00d fc77 	bl	1a88c <__aeabi_ddiv>
    cf9e:	4602      	mov	r2, r0
    cfa0:	460b      	mov	r3, r1
    cfa2:	4610      	mov	r0, r2
    cfa4:	4619      	mov	r1, r3
    cfa6:	f00d f995 	bl	1a2d4 <__adddf3>
    cfaa:	4602      	mov	r2, r0
    cfac:	460b      	mov	r3, r1
    cfae:	4610      	mov	r0, r2
    cfb0:	4619      	mov	r1, r3
    cfb2:	f00d fe01 	bl	1abb8 <__aeabi_d2f>
    cfb6:	4602      	mov	r2, r0
    cfb8:	68fb      	ldr	r3, [r7, #12]
    cfba:	60da      	str	r2, [r3, #12]

        // Angular Speed
        if (order>=51 and order<=101)
    cfbc:	697b      	ldr	r3, [r7, #20]
    cfbe:	2b32      	cmp	r3, #50
    cfc0:	dd2b      	ble.n	d01a <_ZN6Remote6updateEb+0x18a>
    cfc2:	697b      	ldr	r3, [r7, #20]
    cfc4:	2b65      	cmp	r3, #101
    cfc6:	dc28      	bgt.n	d01a <_ZN6Remote6updateEb+0x18a>
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    cfc8:	697b      	ldr	r3, [r7, #20]
    cfca:	f1a3 034b 	sub.w	r3, r3, #75	; 0x4b
    cfce:	4618      	mov	r0, r3
    cfd0:	f00d fefc 	bl	1adcc <__aeabi_i2f>
    cfd4:	4603      	mov	r3, r0
    cfd6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cfda:	4618      	mov	r0, r3
    cfdc:	f00d fad8 	bl	1a590 <__aeabi_f2d>
    cfe0:	4602      	mov	r2, r0
    cfe2:	460b      	mov	r3, r1
    cfe4:	4610      	mov	r0, r2
    cfe6:	4619      	mov	r1, r3
    cfe8:	f04f 0200 	mov.w	r2, #0	; 0x0
    cfec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cff0:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    cff4:	f00d fc4a 	bl	1a88c <__aeabi_ddiv>
    cff8:	4602      	mov	r2, r0
    cffa:	460b      	mov	r3, r1
    cffc:	4610      	mov	r0, r2
    cffe:	4619      	mov	r1, r3
    d000:	a209      	add	r2, pc, #36	(adr r2, d028 <_ZN6Remote6updateEb+0x198>)
    d002:	ca0c      	ldmia	r2!, {r2, r3}
    d004:	f00d fb18 	bl	1a638 <__aeabi_dmul>
    d008:	4602      	mov	r2, r0
    d00a:	460b      	mov	r3, r1
    d00c:	4610      	mov	r0, r2
    d00e:	4619      	mov	r1, r3
    d010:	f00d fdd2 	bl	1abb8 <__aeabi_d2f>
    d014:	4602      	mov	r2, r0
    d016:	68fb      	ldr	r3, [r7, #12]
    d018:	611a      	str	r2, [r3, #16]
    }
}
    d01a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d01e:	46bd      	mov	sp, r7
    d020:	bd80      	pop	{r7, pc}
    d022:	46c0      	nop			(mov r8, r8)
    d024:	46c0      	nop			(mov r8, r8)
    d026:	46c0      	nop			(mov r8, r8)
    d028:	47ae147b 	.word	0x47ae147b
    d02c:	3f847ae1 	.word	0x3f847ae1
    d030:	00021ea8 	.word	0x00021ea8
    d034:	00021ec8 	.word	0x00021ec8

0000d038 <_ZN4Roue6tourneEf>:
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);

}

void Roue::tourne(float rapport)
    d038:	b580      	push	{r7, lr}
    d03a:	b082      	sub	sp, #8
    d03c:	af00      	add	r7, sp, #0
    d03e:	6078      	str	r0, [r7, #4]
    d040:	6039      	str	r1, [r7, #0]
{
    //rapport = 1;
    if(rapport >=0)
    d042:	6838      	ldr	r0, [r7, #0]
    d044:	4915      	ldr	r1, [pc, #84]	(d09c <_ZN4Roue6tourneEf+0x64>)
    d046:	f00e f8c5 	bl	1b1d4 <__aeabi_fcmpge>
    d04a:	4603      	mov	r3, r0
    d04c:	2b00      	cmp	r3, #0
    d04e:	d00f      	beq.n	d070 <_ZN4Roue6tourneEf+0x38>
    //if((rapport >= 0 && !oppositeDirection) || (rapport<0 && oppositeDirection))
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_RESET);
    d050:	687b      	ldr	r3, [r7, #4]
    d052:	689a      	ldr	r2, [r3, #8]
    d054:	687b      	ldr	r3, [r7, #4]
    d056:	899b      	ldrh	r3, [r3, #12]
    d058:	4610      	mov	r0, r2
    d05a:	4619      	mov	r1, r3
    d05c:	f04f 0200 	mov.w	r2, #0	; 0x0
    d060:	f7f4 fc94 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(rapport);
    d064:	687b      	ldr	r3, [r7, #4]
    d066:	4618      	mov	r0, r3
    d068:	6839      	ldr	r1, [r7, #0]
    d06a:	f7ff fbaf 	bl	c7cc <_ZN10PWMHandler12setDutyCycleEf>
    d06e:	e011      	b.n	d094 <_ZN4Roue6tourneEf+0x5c>
    }
    else
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_SET);
    d070:	687b      	ldr	r3, [r7, #4]
    d072:	689a      	ldr	r2, [r3, #8]
    d074:	687b      	ldr	r3, [r7, #4]
    d076:	899b      	ldrh	r3, [r3, #12]
    d078:	4610      	mov	r0, r2
    d07a:	4619      	mov	r1, r3
    d07c:	f04f 0201 	mov.w	r2, #1	; 0x1
    d080:	f7f4 fc84 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(-rapport);
    d084:	687a      	ldr	r2, [r7, #4]
    d086:	683b      	ldr	r3, [r7, #0]
    d088:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d08c:	4610      	mov	r0, r2
    d08e:	4619      	mov	r1, r3
    d090:	f7ff fb9c 	bl	c7cc <_ZN10PWMHandler12setDutyCycleEf>
/*
    if(fabs(rapport) < RAPPORT_OK)
        pwm.setDutyCycle(0);
    else
        pwm.setDutyCycle(fabs(rapport)+RAPPORT_SUPPLEMENTAIRE);*/
}
    d094:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d098:	46bd      	mov	sp, r7
    d09a:	bd80      	pop	{r7, pc}
    d09c:	00000000 	.word	0x00000000

0000d0a0 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b088      	sub	sp, #32
    d0a4:	af02      	add	r7, sp, #8
    d0a6:	60f8      	str	r0, [r7, #12]
    d0a8:	60b9      	str	r1, [r7, #8]
    d0aa:	603b      	str	r3, [r7, #0]
    d0ac:	4613      	mov	r3, r2
    d0ae:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    d0b0:	68fa      	ldr	r2, [r7, #12]
    d0b2:	f897 c007 	ldrb.w	ip, [r7, #7]
    d0b6:	8c3b      	ldrh	r3, [r7, #32]
    d0b8:	9300      	str	r3, [sp, #0]
    d0ba:	4610      	mov	r0, r2
    d0bc:	68b9      	ldr	r1, [r7, #8]
    d0be:	4662      	mov	r2, ip
    d0c0:	683b      	ldr	r3, [r7, #0]
    d0c2:	f7f8 fd47 	bl	5b54 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    d0c6:	68fa      	ldr	r2, [r7, #12]
    d0c8:	6a7b      	ldr	r3, [r7, #36]
    d0ca:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    d0cc:	68fa      	ldr	r2, [r7, #12]
    d0ce:	8d3b      	ldrh	r3, [r7, #40]
    d0d0:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    d0d2:	8d3b      	ldrh	r3, [r7, #40]
    d0d4:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    d0d6:	f04f 0310 	mov.w	r3, #16	; 0x10
    d0da:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    d0dc:	f04f 0302 	mov.w	r3, #2	; 0x2
    d0e0:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    d0e2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d0e6:	6a78      	ldr	r0, [r7, #36]
    d0e8:	4619      	mov	r1, r3
    d0ea:	f7f4 fae1 	bl	16b0 <GPIO_Init>

}
    d0ee:	68fb      	ldr	r3, [r7, #12]
    d0f0:	4618      	mov	r0, r3
    d0f2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d0f6:	46bd      	mov	sp, r7
    d0f8:	bd80      	pop	{r7, pc}
    d0fa:	46c0      	nop			(mov r8, r8)

0000d0fc <_ZN4RoueC2EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    d0fc:	b580      	push	{r7, lr}
    d0fe:	b088      	sub	sp, #32
    d100:	af02      	add	r7, sp, #8
    d102:	60f8      	str	r0, [r7, #12]
    d104:	60b9      	str	r1, [r7, #8]
    d106:	603b      	str	r3, [r7, #0]
    d108:	4613      	mov	r3, r2
    d10a:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    d10c:	68fa      	ldr	r2, [r7, #12]
    d10e:	f897 c007 	ldrb.w	ip, [r7, #7]
    d112:	8c3b      	ldrh	r3, [r7, #32]
    d114:	9300      	str	r3, [sp, #0]
    d116:	4610      	mov	r0, r2
    d118:	68b9      	ldr	r1, [r7, #8]
    d11a:	4662      	mov	r2, ip
    d11c:	683b      	ldr	r3, [r7, #0]
    d11e:	f7f8 fd19 	bl	5b54 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    d122:	68fa      	ldr	r2, [r7, #12]
    d124:	6a7b      	ldr	r3, [r7, #36]
    d126:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    d128:	68fa      	ldr	r2, [r7, #12]
    d12a:	8d3b      	ldrh	r3, [r7, #40]
    d12c:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    d12e:	8d3b      	ldrh	r3, [r7, #40]
    d130:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    d132:	f04f 0310 	mov.w	r3, #16	; 0x10
    d136:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    d138:	f04f 0302 	mov.w	r3, #2	; 0x2
    d13c:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    d13e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d142:	6a78      	ldr	r0, [r7, #36]
    d144:	4619      	mov	r1, r3
    d146:	f7f4 fab3 	bl	16b0 <GPIO_Init>

}
    d14a:	68fb      	ldr	r3, [r7, #12]
    d14c:	4618      	mov	r0, r3
    d14e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d152:	46bd      	mov	sp, r7
    d154:	bd80      	pop	{r7, pc}
    d156:	46c0      	nop			(mov r8, r8)

0000d158 <_ZN11SharpSensor8getValueEv>:
        output = false;
    #endif

}

Sensor::OutputSensor SharpSensor::getValue()
    d158:	b580      	push	{r7, lr}
    d15a:	b088      	sub	sp, #32
    d15c:	af00      	add	r7, sp, #0
    d15e:	6078      	str	r0, [r7, #4]
    d160:	60f9      	str	r1, [r7, #12]
{
    OutputSensor outputR;
    outputR.type = SHARP;
    d162:	f04f 0300 	mov.w	r3, #0	; 0x0
    d166:	687a      	ldr	r2, [r7, #4]
    d168:	7013      	strb	r3, [r2, #0]
    outputR.f = (float)value;
    d16a:	68fb      	ldr	r3, [r7, #12]
    d16c:	691b      	ldr	r3, [r3, #16]
    d16e:	4618      	mov	r0, r3
    d170:	f00d fe2c 	bl	1adcc <__aeabi_i2f>
    d174:	4603      	mov	r3, r0
    d176:	687a      	ldr	r2, [r7, #4]
    d178:	6053      	str	r3, [r2, #4]
    outputR.b = (output && actif);// && actif && !SharpSensor::estDesactive);
    d17a:	68fb      	ldr	r3, [r7, #12]
    d17c:	7b9b      	ldrb	r3, [r3, #14]
    d17e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d182:	b2db      	uxtb	r3, r3
    d184:	2b00      	cmp	r3, #0
    d186:	d10a      	bne.n	d19e <_ZN11SharpSensor8getValueEv+0x46>
    d188:	68fb      	ldr	r3, [r7, #12]
    d18a:	7bdb      	ldrb	r3, [r3, #15]
    d18c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d190:	b2db      	uxtb	r3, r3
    d192:	2b00      	cmp	r3, #0
    d194:	d103      	bne.n	d19e <_ZN11SharpSensor8getValueEv+0x46>
    d196:	f04f 0301 	mov.w	r3, #1	; 0x1
    d19a:	60bb      	str	r3, [r7, #8]
    d19c:	e002      	b.n	d1a4 <_ZN11SharpSensor8getValueEv+0x4c>
    d19e:	f04f 0200 	mov.w	r2, #0	; 0x0
    d1a2:	60ba      	str	r2, [r7, #8]
    d1a4:	68ba      	ldr	r2, [r7, #8]
    d1a6:	4613      	mov	r3, r2
    d1a8:	687a      	ldr	r2, [r7, #4]
    d1aa:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    d1ac:	6878      	ldr	r0, [r7, #4]
    d1ae:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d1b2:	46bd      	mov	sp, r7
    d1b4:	bd80      	pop	{r7, pc}
    d1b6:	46c0      	nop			(mov r8, r8)

0000d1b8 <_ZN11SharpSensor7getNameEv>:

SharpSensor::SharpName SharpSensor::getName()
    d1b8:	b480      	push	{r7}
    d1ba:	b083      	sub	sp, #12
    d1bc:	af00      	add	r7, sp, #0
    d1be:	6078      	str	r0, [r7, #4]
{
    return name;
    d1c0:	687b      	ldr	r3, [r7, #4]
    d1c2:	7b5b      	ldrb	r3, [r3, #13]
}
    d1c4:	4618      	mov	r0, r3
    d1c6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d1ca:	46bd      	mov	sp, r7
    d1cc:	bc80      	pop	{r7}
    d1ce:	4770      	bx	lr

0000d1d0 <_ZN11SharpSensor8setActifEv>:


void SharpSensor::setActif()
    d1d0:	b480      	push	{r7}
    d1d2:	b083      	sub	sp, #12
    d1d4:	af00      	add	r7, sp, #0
    d1d6:	6078      	str	r0, [r7, #4]
{
    actif = true;
    d1d8:	687b      	ldr	r3, [r7, #4]
    d1da:	f04f 0201 	mov.w	r2, #1	; 0x1
    d1de:	73da      	strb	r2, [r3, #15]
}
    d1e0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d1e4:	46bd      	mov	sp, r7
    d1e6:	bc80      	pop	{r7}
    d1e8:	4770      	bx	lr
    d1ea:	46c0      	nop			(mov r8, r8)

0000d1ec <_ZN11SharpSensor10unsetActifEv>:

void SharpSensor::unsetActif()
    d1ec:	b480      	push	{r7}
    d1ee:	b083      	sub	sp, #12
    d1f0:	af00      	add	r7, sp, #0
    d1f2:	6078      	str	r0, [r7, #4]
{
    actif = false;
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	f04f 0200 	mov.w	r2, #0	; 0x0
    d1fa:	73da      	strb	r2, [r3, #15]
}
    d1fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d200:	46bd      	mov	sp, r7
    d202:	bc80      	pop	{r7}
    d204:	4770      	bx	lr
    d206:	46c0      	nop			(mov r8, r8)

0000d208 <_ZN11SharpSensor11updateValueEv>:
SharpSensor::~SharpSensor()
{
    //dtor
}

void SharpSensor::updateValue()
    d208:	b580      	push	{r7, lr}
    d20a:	b082      	sub	sp, #8
    d20c:	af00      	add	r7, sp, #0
    d20e:	6078      	str	r0, [r7, #4]
{
    #ifdef ROBOTHW
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    d210:	f7fd fc50 	bl	aab4 <_ZN12AnalogSensor18conversionFinishedEv>
    d214:	4603      	mov	r3, r0
    d216:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d21a:	b2db      	uxtb	r3, r3
    d21c:	2b00      	cmp	r3, #0
    d21e:	d1f7      	bne.n	d210 <_ZN11SharpSensor11updateValueEv+0x8>

    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        value = *data;
        value >>= 4;
    #else // K - H107
        value = *data;
    d220:	687b      	ldr	r3, [r7, #4]
    d222:	689b      	ldr	r3, [r3, #8]
    d224:	881b      	ldrh	r3, [r3, #0]
    d226:	461a      	mov	r2, r3
    d228:	687b      	ldr	r3, [r7, #4]
    d22a:	611a      	str	r2, [r3, #16]
    #endif

    counter <<= 1;
    d22c:	687b      	ldr	r3, [r7, #4]
    d22e:	7b1b      	ldrb	r3, [r3, #12]
    d230:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d234:	b2db      	uxtb	r3, r3
    d236:	687a      	ldr	r2, [r7, #4]
    d238:	7313      	strb	r3, [r2, #12]
    counter |= (value > seuilDetection);
    d23a:	687b      	ldr	r3, [r7, #4]
    d23c:	7b1b      	ldrb	r3, [r3, #12]
    d23e:	4619      	mov	r1, r3
    d240:	687b      	ldr	r3, [r7, #4]
    d242:	691a      	ldr	r2, [r3, #16]
    d244:	687b      	ldr	r3, [r7, #4]
    d246:	8a9b      	ldrh	r3, [r3, #20]
    d248:	429a      	cmp	r2, r3
    d24a:	bfd4      	ite	le
    d24c:	2300      	movle	r3, #0
    d24e:	2301      	movgt	r3, #1
    d250:	460a      	mov	r2, r1
    d252:	ea42 0303 	orr.w	r3, r2, r3
    d256:	b2db      	uxtb	r3, r3
    d258:	b2db      	uxtb	r3, r3
    d25a:	687a      	ldr	r2, [r7, #4]
    d25c:	7313      	strb	r3, [r2, #12]
    //if (*data > threshold)
    //    allumerLED();
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ; // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    d25e:	687b      	ldr	r3, [r7, #4]
    d260:	7b9b      	ldrb	r3, [r3, #14]
    d262:	2b00      	cmp	r3, #0
    d264:	d008      	beq.n	d278 <_ZN11SharpSensor11updateValueEv+0x70>
    d266:	687b      	ldr	r3, [r7, #4]
    d268:	7b1b      	ldrb	r3, [r3, #12]
    d26a:	2b00      	cmp	r3, #0
    d26c:	bf0c      	ite	eq
    d26e:	2300      	moveq	r3, #0
    d270:	2301      	movne	r3, #1
    d272:	b2db      	uxtb	r3, r3
    d274:	603b      	str	r3, [r7, #0]
    d276:	e007      	b.n	d288 <_ZN11SharpSensor11updateValueEv+0x80>
    d278:	687b      	ldr	r3, [r7, #4]
    d27a:	7b1b      	ldrb	r3, [r3, #12]
    d27c:	2bff      	cmp	r3, #255
    d27e:	bf14      	ite	ne
    d280:	2300      	movne	r3, #0
    d282:	2301      	moveq	r3, #1
    d284:	b2db      	uxtb	r3, r3
    d286:	603b      	str	r3, [r7, #0]
    d288:	687a      	ldr	r2, [r7, #4]
    d28a:	6839      	ldr	r1, [r7, #0]
    d28c:	460b      	mov	r3, r1
    d28e:	7393      	strb	r3, [r2, #14]
    }
    else
        output = false;
    #endif

}
    d290:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d294:	46bd      	mov	sp, r7
    d296:	bd80      	pop	{r7, pc}

0000d298 <_ZN11SharpSensorD0Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d298:	b580      	push	{r7, lr}
    d29a:	b082      	sub	sp, #8
    d29c:	af00      	add	r7, sp, #0
    d29e:	6078      	str	r0, [r7, #4]
    d2a0:	687a      	ldr	r2, [r7, #4]
    d2a2:	4b0a      	ldr	r3, [pc, #40]	(d2cc <_ZN11SharpSensorD0Ev+0x34>)
    d2a4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d2a6:	687b      	ldr	r3, [r7, #4]
    d2a8:	4618      	mov	r0, r3
    d2aa:	f7fd fcf7 	bl	ac9c <_ZN12AnalogSensorD2Ev>
    d2ae:	f04f 0301 	mov.w	r3, #1	; 0x1
    d2b2:	b2db      	uxtb	r3, r3
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d002      	beq.n	d2be <_ZN11SharpSensorD0Ev+0x26>
    d2b8:	6878      	ldr	r0, [r7, #4]
    d2ba:	f001 fa9b 	bl	e7f4 <_ZdlPv>
    d2be:	687b      	ldr	r3, [r7, #4]
    d2c0:	4618      	mov	r0, r3
    d2c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d2c6:	46bd      	mov	sp, r7
    d2c8:	bd80      	pop	{r7, pc}
    d2ca:	46c0      	nop			(mov r8, r8)
    d2cc:	00021ed8 	.word	0x00021ed8

0000d2d0 <_ZN11SharpSensorD1Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d2d0:	b580      	push	{r7, lr}
    d2d2:	b082      	sub	sp, #8
    d2d4:	af00      	add	r7, sp, #0
    d2d6:	6078      	str	r0, [r7, #4]
    d2d8:	687a      	ldr	r2, [r7, #4]
    d2da:	4b0a      	ldr	r3, [pc, #40]	(d304 <_ZN11SharpSensorD1Ev+0x34>)
    d2dc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d2de:	687b      	ldr	r3, [r7, #4]
    d2e0:	4618      	mov	r0, r3
    d2e2:	f7fd fcdb 	bl	ac9c <_ZN12AnalogSensorD2Ev>
    d2e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d2ea:	b2db      	uxtb	r3, r3
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d002      	beq.n	d2f6 <_ZN11SharpSensorD1Ev+0x26>
    d2f0:	6878      	ldr	r0, [r7, #4]
    d2f2:	f001 fa7f 	bl	e7f4 <_ZdlPv>
    d2f6:	687b      	ldr	r3, [r7, #4]
    d2f8:	4618      	mov	r0, r3
    d2fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d2fe:	46bd      	mov	sp, r7
    d300:	bd80      	pop	{r7, pc}
    d302:	46c0      	nop			(mov r8, r8)
    d304:	00021ed8 	.word	0x00021ed8

0000d308 <_ZN11SharpSensorD2Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d308:	b580      	push	{r7, lr}
    d30a:	b082      	sub	sp, #8
    d30c:	af00      	add	r7, sp, #0
    d30e:	6078      	str	r0, [r7, #4]
    d310:	687a      	ldr	r2, [r7, #4]
    d312:	4b0a      	ldr	r3, [pc, #40]	(d33c <_ZN11SharpSensorD2Ev+0x34>)
    d314:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d316:	687b      	ldr	r3, [r7, #4]
    d318:	4618      	mov	r0, r3
    d31a:	f7fd fcbf 	bl	ac9c <_ZN12AnalogSensorD2Ev>
    d31e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d322:	b2db      	uxtb	r3, r3
    d324:	2b00      	cmp	r3, #0
    d326:	d002      	beq.n	d32e <_ZN11SharpSensorD2Ev+0x26>
    d328:	6878      	ldr	r0, [r7, #4]
    d32a:	f001 fa63 	bl	e7f4 <_ZdlPv>
    d32e:	687b      	ldr	r3, [r7, #4]
    d330:	4618      	mov	r0, r3
    d332:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d336:	46bd      	mov	sp, r7
    d338:	bd80      	pop	{r7, pc}
    d33a:	46c0      	nop			(mov r8, r8)
    d33c:	00021ed8 	.word	0x00021ed8

0000d340 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d340:	b580      	push	{r7, lr}
    d342:	b084      	sub	sp, #16
    d344:	af00      	add	r7, sp, #0
    d346:	60f8      	str	r0, [r7, #12]
    d348:	607b      	str	r3, [r7, #4]
    d34a:	460b      	mov	r3, r1
    d34c:	72fb      	strb	r3, [r7, #11]
    d34e:	4613      	mov	r3, r2
    d350:	72bb      	strb	r3, [r7, #10]
    d352:	68fb      	ldr	r3, [r7, #12]
    d354:	7aba      	ldrb	r2, [r7, #10]
    d356:	4618      	mov	r0, r3
    d358:	4611      	mov	r1, r2
    d35a:	687a      	ldr	r2, [r7, #4]
    d35c:	f7fd fce4 	bl	ad28 <_ZN12AnalogSensorC2EhPt>
    d360:	68fa      	ldr	r2, [r7, #12]
    d362:	4b0f      	ldr	r3, [pc, #60]	(d3a0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti+0x60>)
    d364:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d366:	68fa      	ldr	r2, [r7, #12]
    d368:	7afb      	ldrb	r3, [r7, #11]
    d36a:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d36c:	68fa      	ldr	r2, [r7, #12]
    d36e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d372:	7313      	strb	r3, [r2, #12]
    output = false;
    d374:	68fa      	ldr	r2, [r7, #12]
    d376:	f04f 0300 	mov.w	r3, #0	; 0x0
    d37a:	7393      	strb	r3, [r2, #14]
    actif = true;
    d37c:	68fa      	ldr	r2, [r7, #12]
    d37e:	f04f 0301 	mov.w	r3, #1	; 0x1
    d382:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d384:	69bb      	ldr	r3, [r7, #24]
    d386:	b29b      	uxth	r3, r3
    d388:	68fa      	ldr	r2, [r7, #12]
    d38a:	8293      	strh	r3, [r2, #20]
    value = 0;
    d38c:	68fa      	ldr	r2, [r7, #12]
    d38e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d392:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d394:	68fb      	ldr	r3, [r7, #12]
    d396:	4618      	mov	r0, r3
    d398:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d39c:	46bd      	mov	sp, r7
    d39e:	bd80      	pop	{r7, pc}
    d3a0:	00021ed8 	.word	0x00021ed8

0000d3a4 <_ZN11SharpSensorC2ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d3a4:	b580      	push	{r7, lr}
    d3a6:	b084      	sub	sp, #16
    d3a8:	af00      	add	r7, sp, #0
    d3aa:	60f8      	str	r0, [r7, #12]
    d3ac:	607b      	str	r3, [r7, #4]
    d3ae:	460b      	mov	r3, r1
    d3b0:	72fb      	strb	r3, [r7, #11]
    d3b2:	4613      	mov	r3, r2
    d3b4:	72bb      	strb	r3, [r7, #10]
    d3b6:	68fb      	ldr	r3, [r7, #12]
    d3b8:	7aba      	ldrb	r2, [r7, #10]
    d3ba:	4618      	mov	r0, r3
    d3bc:	4611      	mov	r1, r2
    d3be:	687a      	ldr	r2, [r7, #4]
    d3c0:	f7fd fcb2 	bl	ad28 <_ZN12AnalogSensorC2EhPt>
    d3c4:	68fa      	ldr	r2, [r7, #12]
    d3c6:	4b0f      	ldr	r3, [pc, #60]	(d404 <_ZN11SharpSensorC2ENS_9SharpNameEhPti+0x60>)
    d3c8:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d3ca:	68fa      	ldr	r2, [r7, #12]
    d3cc:	7afb      	ldrb	r3, [r7, #11]
    d3ce:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d3d0:	68fa      	ldr	r2, [r7, #12]
    d3d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d3d6:	7313      	strb	r3, [r2, #12]
    output = false;
    d3d8:	68fa      	ldr	r2, [r7, #12]
    d3da:	f04f 0300 	mov.w	r3, #0	; 0x0
    d3de:	7393      	strb	r3, [r2, #14]
    actif = true;
    d3e0:	68fa      	ldr	r2, [r7, #12]
    d3e2:	f04f 0301 	mov.w	r3, #1	; 0x1
    d3e6:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d3e8:	69bb      	ldr	r3, [r7, #24]
    d3ea:	b29b      	uxth	r3, r3
    d3ec:	68fa      	ldr	r2, [r7, #12]
    d3ee:	8293      	strh	r3, [r2, #20]
    value = 0;
    d3f0:	68fa      	ldr	r2, [r7, #12]
    d3f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d3f6:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d3f8:	68fb      	ldr	r3, [r7, #12]
    d3fa:	4618      	mov	r0, r3
    d3fc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d400:	46bd      	mov	sp, r7
    d402:	bd80      	pop	{r7, pc}
    d404:	00021ed8 	.word	0x00021ed8

0000d408 <_ZN5Timer7getTIMxEv>:
    else if (m_TIMx == TIM5)
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
}

// Retourne le timer (TIM1, TIM2 ou TIM3), voir TIM_TypeDef.
TIM_TypeDef* Timer::getTIMx()
    d408:	b480      	push	{r7}
    d40a:	b083      	sub	sp, #12
    d40c:	af00      	add	r7, sp, #0
    d40e:	6078      	str	r0, [r7, #4]
{
    return m_TIMx;
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	681b      	ldr	r3, [r3, #0]
}
    d414:	4618      	mov	r0, r3
    d416:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d41a:	46bd      	mov	sp, r7
    d41c:	bc80      	pop	{r7}
    d41e:	4770      	bx	lr

0000d420 <_ZN5Timer9getPeriodEv>:
    timInit.TIM_RepetitionCounter = 0;

    TIM_TimeBaseInit(getTIMx(), &timInit);
}

uint16_t Timer::getPeriod()
    d420:	b480      	push	{r7}
    d422:	b083      	sub	sp, #12
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
{
    return m_period;
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	891b      	ldrh	r3, [r3, #8]
}
    d42c:	4618      	mov	r0, r3
    d42e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d432:	46bd      	mov	sp, r7
    d434:	bc80      	pop	{r7}
    d436:	4770      	bx	lr

0000d438 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>:

void Timer::enableTimerClock(TIM_TypeDef* TIMx)
    d438:	b580      	push	{r7, lr}
    d43a:	b082      	sub	sp, #8
    d43c:	af00      	add	r7, sp, #0
    d43e:	6078      	str	r0, [r7, #4]
{
    if (TIMx == TIM1)
    d440:	687a      	ldr	r2, [r7, #4]
    d442:	4b27      	ldr	r3, [pc, #156]	(d4e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa8>)
    d444:	429a      	cmp	r2, r3
    d446:	d106      	bne.n	d456 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x1e>
    {
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
    d448:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d44c:	f04f 0101 	mov.w	r1, #1	; 0x1
    d450:	f7f4 fffa 	bl	2448 <RCC_APB2PeriphClockCmd>
    d454:	e040      	b.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM2)
    d456:	687b      	ldr	r3, [r7, #4]
    d458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d45c:	d106      	bne.n	d46c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x34>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    d45e:	f04f 0001 	mov.w	r0, #1	; 0x1
    d462:	f04f 0101 	mov.w	r1, #1	; 0x1
    d466:	f7f5 f811 	bl	248c <RCC_APB1PeriphClockCmd>
    d46a:	e035      	b.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM3)
    d46c:	687a      	ldr	r2, [r7, #4]
    d46e:	4b1d      	ldr	r3, [pc, #116]	(d4e4 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xac>)
    d470:	429a      	cmp	r2, r3
    d472:	d106      	bne.n	d482 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x4a>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    d474:	f04f 0002 	mov.w	r0, #2	; 0x2
    d478:	f04f 0101 	mov.w	r1, #1	; 0x1
    d47c:	f7f5 f806 	bl	248c <RCC_APB1PeriphClockCmd>
    d480:	e02a      	b.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM4)
    d482:	687a      	ldr	r2, [r7, #4]
    d484:	4b18      	ldr	r3, [pc, #96]	(d4e8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb0>)
    d486:	429a      	cmp	r2, r3
    d488:	d106      	bne.n	d498 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x60>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    d48a:	f04f 0004 	mov.w	r0, #4	; 0x4
    d48e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d492:	f7f4 fffb 	bl	248c <RCC_APB1PeriphClockCmd>
    d496:	e01f      	b.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM5)
    d498:	687a      	ldr	r2, [r7, #4]
    d49a:	4b14      	ldr	r3, [pc, #80]	(d4ec <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb4>)
    d49c:	429a      	cmp	r2, r3
    d49e:	d106      	bne.n	d4ae <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x76>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
    d4a0:	f04f 0008 	mov.w	r0, #8	; 0x8
    d4a4:	f04f 0101 	mov.w	r1, #1	; 0x1
    d4a8:	f7f4 fff0 	bl	248c <RCC_APB1PeriphClockCmd>
    d4ac:	e014      	b.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM6)
    d4ae:	687a      	ldr	r2, [r7, #4]
    d4b0:	4b0f      	ldr	r3, [pc, #60]	(d4f0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb8>)
    d4b2:	429a      	cmp	r2, r3
    d4b4:	d106      	bne.n	d4c4 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x8c>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
    d4b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    d4ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    d4be:	f7f4 ffe5 	bl	248c <RCC_APB1PeriphClockCmd>
    d4c2:	e009      	b.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM7)
    d4c4:	687a      	ldr	r2, [r7, #4]
    d4c6:	4b0b      	ldr	r3, [pc, #44]	(d4f4 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xbc>)
    d4c8:	429a      	cmp	r2, r3
    d4ca:	d105      	bne.n	d4d8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
    d4cc:	f04f 0020 	mov.w	r0, #32	; 0x20
    d4d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    d4d4:	f7f4 ffda 	bl	248c <RCC_APB1PeriphClockCmd>
    }
}
    d4d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d4dc:	46bd      	mov	sp, r7
    d4de:	bd80      	pop	{r7, pc}
    d4e0:	40012c00 	.word	0x40012c00
    d4e4:	40000400 	.word	0x40000400
    d4e8:	40000800 	.word	0x40000800
    d4ec:	40000c00 	.word	0x40000c00
    d4f0:	40001000 	.word	0x40001000
    d4f4:	40001400 	.word	0x40001400

0000d4f8 <_ZN5Timer11enableClockEv>:
#include "timerHandler.h"

// Propage le signal de l’horloge système au timer.
void Timer::enableClock()
    d4f8:	b580      	push	{r7, lr}
    d4fa:	b082      	sub	sp, #8
    d4fc:	af00      	add	r7, sp, #0
    d4fe:	6078      	str	r0, [r7, #4]
{
    if (m_TIMx == TIM1)
    d500:	687b      	ldr	r3, [r7, #4]
    d502:	681a      	ldr	r2, [r3, #0]
    d504:	4b1e      	ldr	r3, [pc, #120]	(d580 <_ZN5Timer11enableClockEv+0x88>)
    d506:	429a      	cmp	r2, r3
    d508:	d106      	bne.n	d518 <_ZN5Timer11enableClockEv+0x20>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
    d50a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d50e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d512:	f7f4 ff99 	bl	2448 <RCC_APB2PeriphClockCmd>
    d516:	e02e      	b.n	d576 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM2)
    d518:	687b      	ldr	r3, [r7, #4]
    d51a:	681b      	ldr	r3, [r3, #0]
    d51c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d520:	d106      	bne.n	d530 <_ZN5Timer11enableClockEv+0x38>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    d522:	f04f 0001 	mov.w	r0, #1	; 0x1
    d526:	f04f 0101 	mov.w	r1, #1	; 0x1
    d52a:	f7f4 ffaf 	bl	248c <RCC_APB1PeriphClockCmd>
    d52e:	e022      	b.n	d576 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM3)
    d530:	687b      	ldr	r3, [r7, #4]
    d532:	681a      	ldr	r2, [r3, #0]
    d534:	4b13      	ldr	r3, [pc, #76]	(d584 <_ZN5Timer11enableClockEv+0x8c>)
    d536:	429a      	cmp	r2, r3
    d538:	d106      	bne.n	d548 <_ZN5Timer11enableClockEv+0x50>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    d53a:	f04f 0002 	mov.w	r0, #2	; 0x2
    d53e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d542:	f7f4 ffa3 	bl	248c <RCC_APB1PeriphClockCmd>
    d546:	e016      	b.n	d576 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM4)
    d548:	687b      	ldr	r3, [r7, #4]
    d54a:	681a      	ldr	r2, [r3, #0]
    d54c:	4b0e      	ldr	r3, [pc, #56]	(d588 <_ZN5Timer11enableClockEv+0x90>)
    d54e:	429a      	cmp	r2, r3
    d550:	d106      	bne.n	d560 <_ZN5Timer11enableClockEv+0x68>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    d552:	f04f 0004 	mov.w	r0, #4	; 0x4
    d556:	f04f 0101 	mov.w	r1, #1	; 0x1
    d55a:	f7f4 ff97 	bl	248c <RCC_APB1PeriphClockCmd>
    d55e:	e00a      	b.n	d576 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM5)
    d560:	687b      	ldr	r3, [r7, #4]
    d562:	681a      	ldr	r2, [r3, #0]
    d564:	4b09      	ldr	r3, [pc, #36]	(d58c <_ZN5Timer11enableClockEv+0x94>)
    d566:	429a      	cmp	r2, r3
    d568:	d105      	bne.n	d576 <_ZN5Timer11enableClockEv+0x7e>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
    d56a:	f04f 0008 	mov.w	r0, #8	; 0x8
    d56e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d572:	f7f4 ff8b 	bl	248c <RCC_APB1PeriphClockCmd>
}
    d576:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d57a:	46bd      	mov	sp, r7
    d57c:	bd80      	pop	{r7, pc}
    d57e:	46c0      	nop			(mov r8, r8)
    d580:	40012c00 	.word	0x40012c00
    d584:	40000400 	.word	0x40000400
    d588:	40000800 	.word	0x40000800
    d58c:	40000c00 	.word	0x40000c00

0000d590 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d590:	b580      	push	{r7, lr}
    d592:	b088      	sub	sp, #32
    d594:	af00      	add	r7, sp, #0
    d596:	60f8      	str	r0, [r7, #12]
    d598:	60b9      	str	r1, [r7, #8]
    d59a:	4619      	mov	r1, r3
    d59c:	4613      	mov	r3, r2
    d59e:	80fb      	strh	r3, [r7, #6]
    d5a0:	460b      	mov	r3, r1
    d5a2:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d5a4:	68fa      	ldr	r2, [r7, #12]
    d5a6:	68bb      	ldr	r3, [r7, #8]
    d5a8:	6013      	str	r3, [r2, #0]
    m_period = period;
    d5aa:	68fa      	ldr	r2, [r7, #12]
    d5ac:	88fb      	ldrh	r3, [r7, #6]
    d5ae:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d5b0:	68fa      	ldr	r2, [r7, #12]
    d5b2:	88bb      	ldrh	r3, [r7, #4]
    d5b4:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d5b6:	68fa      	ldr	r2, [r7, #12]
    d5b8:	8d3b      	ldrh	r3, [r7, #40]
    d5ba:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d5bc:	68f8      	ldr	r0, [r7, #12]
    d5be:	f7ff ff9b 	bl	d4f8 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d5c2:	88bb      	ldrh	r3, [r7, #4]
    d5c4:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d5c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d5ca:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d5cc:	88fb      	ldrh	r3, [r7, #6]
    d5ce:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d5d0:	8d3b      	ldrh	r3, [r7, #40]
    d5d2:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d5d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    d5d8:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d5da:	68f8      	ldr	r0, [r7, #12]
    d5dc:	f7ff ff14 	bl	d408 <_ZN5Timer7getTIMxEv>
    d5e0:	4603      	mov	r3, r0
    d5e2:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d5e6:	4618      	mov	r0, r3
    d5e8:	4611      	mov	r1, r2
    d5ea:	f7f5 f925 	bl	2838 <TIM_TimeBaseInit>
}
    d5ee:	68fb      	ldr	r3, [r7, #12]
    d5f0:	4618      	mov	r0, r3
    d5f2:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d5f6:	46bd      	mov	sp, r7
    d5f8:	bd80      	pop	{r7, pc}
    d5fa:	46c0      	nop			(mov r8, r8)

0000d5fc <_ZN5TimerC2EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d5fc:	b580      	push	{r7, lr}
    d5fe:	b088      	sub	sp, #32
    d600:	af00      	add	r7, sp, #0
    d602:	60f8      	str	r0, [r7, #12]
    d604:	60b9      	str	r1, [r7, #8]
    d606:	4619      	mov	r1, r3
    d608:	4613      	mov	r3, r2
    d60a:	80fb      	strh	r3, [r7, #6]
    d60c:	460b      	mov	r3, r1
    d60e:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d610:	68fa      	ldr	r2, [r7, #12]
    d612:	68bb      	ldr	r3, [r7, #8]
    d614:	6013      	str	r3, [r2, #0]
    m_period = period;
    d616:	68fa      	ldr	r2, [r7, #12]
    d618:	88fb      	ldrh	r3, [r7, #6]
    d61a:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d61c:	68fa      	ldr	r2, [r7, #12]
    d61e:	88bb      	ldrh	r3, [r7, #4]
    d620:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d622:	68fa      	ldr	r2, [r7, #12]
    d624:	8d3b      	ldrh	r3, [r7, #40]
    d626:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d628:	68f8      	ldr	r0, [r7, #12]
    d62a:	f7ff ff65 	bl	d4f8 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d62e:	88bb      	ldrh	r3, [r7, #4]
    d630:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d632:	f04f 0300 	mov.w	r3, #0	; 0x0
    d636:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d638:	88fb      	ldrh	r3, [r7, #6]
    d63a:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d63c:	8d3b      	ldrh	r3, [r7, #40]
    d63e:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d640:	f04f 0300 	mov.w	r3, #0	; 0x0
    d644:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d646:	68f8      	ldr	r0, [r7, #12]
    d648:	f7ff fede 	bl	d408 <_ZN5Timer7getTIMxEv>
    d64c:	4603      	mov	r3, r0
    d64e:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d652:	4618      	mov	r0, r3
    d654:	4611      	mov	r1, r2
    d656:	f7f5 f8ef 	bl	2838 <TIM_TimeBaseInit>
}
    d65a:	68fb      	ldr	r3, [r7, #12]
    d65c:	4618      	mov	r0, r3
    d65e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d662:	46bd      	mov	sp, r7
    d664:	bd80      	pop	{r7, pc}
    d666:	46c0      	nop			(mov r8, r8)

0000d668 <_ZNK7Tirette7enleveeEv>:
        buffer |= enlevee();
    }
}

// est ce que la tirette est enlevée ?
bool Tirette::enlevee() const
    d668:	b580      	push	{r7, lr}
    d66a:	b082      	sub	sp, #8
    d66c:	af00      	add	r7, sp, #0
    d66e:	6078      	str	r0, [r7, #4]
{
    #ifdef STM32F40_41xxx
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_RESET;
    #else
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_SET;
    d670:	687b      	ldr	r3, [r7, #4]
    d672:	681a      	ldr	r2, [r3, #0]
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	889b      	ldrh	r3, [r3, #4]
    d678:	4610      	mov	r0, r2
    d67a:	4619      	mov	r1, r3
    d67c:	f7f4 f912 	bl	18a4 <GPIO_ReadInputDataBit>
    d680:	4603      	mov	r3, r0
    d682:	2b01      	cmp	r3, #1
    d684:	bf14      	ite	ne
    d686:	2300      	movne	r3, #0
    d688:	2301      	moveq	r3, #1
    d68a:	b2db      	uxtb	r3, r3
    #endif
}
    d68c:	4618      	mov	r0, r3
    d68e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d692:	46bd      	mov	sp, r7
    d694:	bd80      	pop	{r7, pc}
    d696:	46c0      	nop			(mov r8, r8)

0000d698 <_ZNK7Tirette14attendreRemiseEv>:
        buffer |= !enlevee();
    }
}

// attends jusqu'à ce que la tirette soit remise
void Tirette::attendreRemise() const
    d698:	b580      	push	{r7, lr}
    d69a:	b084      	sub	sp, #16
    d69c:	af00      	add	r7, sp, #0
    d69e:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette remise'");
    d6a0:	4b16      	ldr	r3, [pc, #88]	(d6fc <_ZNK7Tirette14attendreRemiseEv+0x64>)
    d6a2:	4618      	mov	r0, r3
    d6a4:	f7ff fbc0 	bl	ce28 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    d6a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d6ac:	60fb      	str	r3, [r7, #12]
    d6ae:	e01d      	b.n	d6ec <_ZNK7Tirette14attendreRemiseEv+0x54>
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    d6b0:	f7ff fb96 	bl	cde0 <_ZN6Remote12getSingletonEv>
    d6b4:	4603      	mov	r3, r0
    d6b6:	4618      	mov	r0, r3
    d6b8:	f04f 0101 	mov.w	r1, #1	; 0x1
    d6bc:	f7ff fbe8 	bl	ce90 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    d6c0:	f7ff fb8e 	bl	cde0 <_ZN6Remote12getSingletonEv>
    d6c4:	4603      	mov	r3, r0
    d6c6:	4618      	mov	r0, r3
    d6c8:	f7ff fa80 	bl	cbcc <_ZN6Remote12isRemoteModeEv>
    d6cc:	4603      	mov	r3, r0
    d6ce:	2b00      	cmp	r3, #0
    d6d0:	d10f      	bne.n	d6f2 <_ZNK7Tirette14attendreRemiseEv+0x5a>
            break;

        buffer <<= 1;
    d6d2:	68fb      	ldr	r3, [r7, #12]
    d6d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d6d8:	60fb      	str	r3, [r7, #12]
        buffer |= enlevee();
    d6da:	6878      	ldr	r0, [r7, #4]
    d6dc:	f7ff ffc4 	bl	d668 <_ZNK7Tirette7enleveeEv>
    d6e0:	4603      	mov	r3, r0
    d6e2:	461a      	mov	r2, r3
    d6e4:	68fb      	ldr	r3, [r7, #12]
    d6e6:	ea43 0302 	orr.w	r3, r3, r2
    d6ea:	60fb      	str	r3, [r7, #12]
void Tirette::attendreRemise() const
{
    Remote::log("Waiting for 'tirette remise'");

    int buffer = 0xffffffff;
    while (buffer)
    d6ec:	68fb      	ldr	r3, [r7, #12]
    d6ee:	2b00      	cmp	r3, #0
    d6f0:	d1de      	bne.n	d6b0 <_ZNK7Tirette14attendreRemiseEv+0x18>
            break;

        buffer <<= 1;
        buffer |= enlevee();
    }
}
    d6f2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d6f6:	46bd      	mov	sp, r7
    d6f8:	bd80      	pop	{r7, pc}
    d6fa:	46c0      	nop			(mov r8, r8)
    d6fc:	00021ee8 	.word	0x00021ee8

0000d700 <_ZNK7Tirette15attendreEnleveeEv>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
}

// attends jusqu'à ce que la tirette soit enlevée
void Tirette::attendreEnlevee() const
    d700:	b580      	push	{r7, lr}
    d702:	b084      	sub	sp, #16
    d704:	af00      	add	r7, sp, #0
    d706:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette enleve'");
    d708:	4b17      	ldr	r3, [pc, #92]	(d768 <_ZNK7Tirette15attendreEnleveeEv+0x68>)
    d70a:	4618      	mov	r0, r3
    d70c:	f7ff fb8c 	bl	ce28 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    d710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d714:	60fb      	str	r3, [r7, #12]
    d716:	e020      	b.n	d75a <_ZNK7Tirette15attendreEnleveeEv+0x5a>
    //int waiting = 0;
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    d718:	f7ff fb62 	bl	cde0 <_ZN6Remote12getSingletonEv>
    d71c:	4603      	mov	r3, r0
    d71e:	4618      	mov	r0, r3
    d720:	f04f 0101 	mov.w	r1, #1	; 0x1
    d724:	f7ff fbb4 	bl	ce90 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    d728:	f7ff fb5a 	bl	cde0 <_ZN6Remote12getSingletonEv>
    d72c:	4603      	mov	r3, r0
    d72e:	4618      	mov	r0, r3
    d730:	f7ff fa4c 	bl	cbcc <_ZN6Remote12isRemoteModeEv>
    d734:	4603      	mov	r3, r0
    d736:	2b00      	cmp	r3, #0
    d738:	d112      	bne.n	d760 <_ZNK7Tirette15attendreEnleveeEv+0x60>
            break;

        buffer <<= 1;
    d73a:	68fb      	ldr	r3, [r7, #12]
    d73c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d740:	60fb      	str	r3, [r7, #12]
        buffer |= !enlevee();
    d742:	6878      	ldr	r0, [r7, #4]
    d744:	f7ff ff90 	bl	d668 <_ZNK7Tirette7enleveeEv>
    d748:	4603      	mov	r3, r0
    d74a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d74e:	b2db      	uxtb	r3, r3
    d750:	461a      	mov	r2, r3
    d752:	68fb      	ldr	r3, [r7, #12]
    d754:	ea43 0302 	orr.w	r3, r3, r2
    d758:	60fb      	str	r3, [r7, #12]
{
    Remote::log("Waiting for 'tirette enleve'");

    int buffer = 0xffffffff;
    //int waiting = 0;
    while (buffer)
    d75a:	68fb      	ldr	r3, [r7, #12]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d1db      	bne.n	d718 <_ZNK7Tirette15attendreEnleveeEv+0x18>
            break;

        buffer <<= 1;
        buffer |= !enlevee();
    }
}
    d760:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d764:	46bd      	mov	sp, r7
    d766:	bd80      	pop	{r7, pc}
    d768:	00021f08 	.word	0x00021f08

0000d76c <_ZN7TiretteC1EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d76c:	b580      	push	{r7, lr}
    d76e:	b086      	sub	sp, #24
    d770:	af00      	add	r7, sp, #0
    d772:	60f8      	str	r0, [r7, #12]
    d774:	60b9      	str	r1, [r7, #8]
    d776:	4613      	mov	r3, r2
    d778:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d77a:	68fa      	ldr	r2, [r7, #12]
    d77c:	68bb      	ldr	r3, [r7, #8]
    d77e:	6013      	str	r3, [r2, #0]
    d780:	68fa      	ldr	r2, [r7, #12]
    d782:	88fb      	ldrh	r3, [r7, #6]
    d784:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d786:	88fb      	ldrh	r3, [r7, #6]
    d788:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d78a:	f04f 0348 	mov.w	r3, #72	; 0x48
    d78e:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d790:	f04f 0303 	mov.w	r3, #3	; 0x3
    d794:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d796:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d79a:	68b8      	ldr	r0, [r7, #8]
    d79c:	4619      	mov	r1, r3
    d79e:	f7f3 ff87 	bl	16b0 <GPIO_Init>
}
    d7a2:	68fb      	ldr	r3, [r7, #12]
    d7a4:	4618      	mov	r0, r3
    d7a6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d7aa:	46bd      	mov	sp, r7
    d7ac:	bd80      	pop	{r7, pc}
    d7ae:	46c0      	nop			(mov r8, r8)

0000d7b0 <_ZN7TiretteC2EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d7b0:	b580      	push	{r7, lr}
    d7b2:	b086      	sub	sp, #24
    d7b4:	af00      	add	r7, sp, #0
    d7b6:	60f8      	str	r0, [r7, #12]
    d7b8:	60b9      	str	r1, [r7, #8]
    d7ba:	4613      	mov	r3, r2
    d7bc:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d7be:	68fa      	ldr	r2, [r7, #12]
    d7c0:	68bb      	ldr	r3, [r7, #8]
    d7c2:	6013      	str	r3, [r2, #0]
    d7c4:	68fa      	ldr	r2, [r7, #12]
    d7c6:	88fb      	ldrh	r3, [r7, #6]
    d7c8:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d7ca:	88fb      	ldrh	r3, [r7, #6]
    d7cc:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d7ce:	f04f 0348 	mov.w	r3, #72	; 0x48
    d7d2:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d7d4:	f04f 0303 	mov.w	r3, #3	; 0x3
    d7d8:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d7da:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d7de:	68b8      	ldr	r0, [r7, #8]
    d7e0:	4619      	mov	r1, r3
    d7e2:	f7f3 ff65 	bl	16b0 <GPIO_Init>
}
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	4618      	mov	r0, r3
    d7ea:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d7ee:	46bd      	mov	sp, r7
    d7f0:	bd80      	pop	{r7, pc}
    d7f2:	46c0      	nop			(mov r8, r8)

0000d7f4 <_ZN8Tourelle9getAlerteEv>:
//{
//    this->zonesCritiques[numeroZone][0] = (uint16_t) -1;
//    this->zonesCritiques[numeroZone][1] = (uint16_t) -1;
//}

bool Tourelle::getAlerte(void)
    d7f4:	b480      	push	{r7}
    d7f6:	b083      	sub	sp, #12
    d7f8:	af00      	add	r7, sp, #0
    d7fa:	6078      	str	r0, [r7, #4]
{
    return this->alerte;
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	781b      	ldrb	r3, [r3, #0]
}
    d800:	4618      	mov	r0, r3
    d802:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d806:	46bd      	mov	sp, r7
    d808:	bc80      	pop	{r7}
    d80a:	4770      	bx	lr

0000d80c <_ZN8Tourelle12updateSimpleEv>:
//    this->alerte = newAlerte;
//
//    return newAlerte;
//}

bool Tourelle::updateSimple(void)
    d80c:	b480      	push	{r7}
    d80e:	b085      	sub	sp, #20
    d810:	af00      	add	r7, sp, #0
    d812:	6078      	str	r0, [r7, #4]
{
    //Copie locale pour être thread-safe, et avoir une chance infime de louper un objet une fois
    uint8_t nombreObjets = nombreObjetDetecte;
    d814:	4b0f      	ldr	r3, [pc, #60]	(d854 <_ZN8Tourelle12updateSimpleEv+0x48>)
    d816:	781b      	ldrb	r3, [r3, #0]
    d818:	73fb      	strb	r3, [r7, #15]
    nombreObjetDetecte = 0;
    d81a:	4a0e      	ldr	r2, [pc, #56]	(d854 <_ZN8Tourelle12updateSimpleEv+0x48>)
    d81c:	f04f 0300 	mov.w	r3, #0	; 0x0
    d820:	7013      	strb	r3, [r2, #0]
    if(nombreObjets)
    d822:	7bfb      	ldrb	r3, [r7, #15]
    d824:	2b00      	cmp	r3, #0
    d826:	d007      	beq.n	d838 <_ZN8Tourelle12updateSimpleEv+0x2c>
    {
        this->alerte = true;
    d828:	687b      	ldr	r3, [r7, #4]
    d82a:	f04f 0201 	mov.w	r2, #1	; 0x1
    d82e:	701a      	strb	r2, [r3, #0]
        return true;
    d830:	f04f 0301 	mov.w	r3, #1	; 0x1
    d834:	603b      	str	r3, [r7, #0]
    d836:	e006      	b.n	d846 <_ZN8Tourelle12updateSimpleEv+0x3a>
    }
    else
    {
        this->alerte = false;
    d838:	687b      	ldr	r3, [r7, #4]
    d83a:	f04f 0200 	mov.w	r2, #0	; 0x0
    d83e:	701a      	strb	r2, [r3, #0]
        return false;
    d840:	f04f 0300 	mov.w	r3, #0	; 0x0
    d844:	603b      	str	r3, [r7, #0]
    d846:	683b      	ldr	r3, [r7, #0]
    }
}
    d848:	4618      	mov	r0, r3
    d84a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    d84e:	46bd      	mov	sp, r7
    d850:	bc80      	pop	{r7}
    d852:	4770      	bx	lr
    d854:	2000058d 	.word	0x2000058d

0000d858 <EXTI3_IRQHandler>:
/**
  * @brief  This function handles External line 3 interrupt request.
  * @param  None
  * @retval None
  */
extern "C" void EXTI3_IRQHandler(void)
    d858:	b580      	push	{r7, lr}
    d85a:	af00      	add	r7, sp, #0
{
    if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    d85c:	f04f 0008 	mov.w	r0, #8	; 0x8
    d860:	f7f3 fe52 	bl	1508 <EXTI_GetITStatus>
    d864:	4603      	mov	r3, r0
    d866:	2b00      	cmp	r3, #0
    d868:	bf0c      	ite	eq
    d86a:	2300      	moveq	r3, #0
    d86c:	2301      	movne	r3, #1
    d86e:	b2db      	uxtb	r3, r3
    d870:	2b00      	cmp	r3, #0
    d872:	d00c      	beq.n	d88e <EXTI3_IRQHandler+0x36>

//        if(nombreObjetDetecte < 20)
//        {
            //Stocke l'instant de détection de l'objet
            //objectDetectionInstant[nombreObjetDetecte] = TIM_GetCounter(TIM6);
            nombreObjetDetecte++;
    d874:	4b07      	ldr	r3, [pc, #28]	(d894 <EXTI3_IRQHandler+0x3c>)
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d87c:	b2db      	uxtb	r3, r3
    d87e:	4a05      	ldr	r2, [pc, #20]	(d894 <EXTI3_IRQHandler+0x3c>)
    d880:	7013      	strb	r3, [r2, #0]

            allumerLED2();
    d882:	f7fe fd01 	bl	c288 <_Z11allumerLED2v>

//        }

        /* Clear the EXTI line 2 pending bit */
        EXTI_ClearITPendingBit(EXTI_Line3);
    d886:	f04f 0008 	mov.w	r0, #8	; 0x8
    d88a:	f7f3 fe67 	bl	155c <EXTI_ClearITPendingBit>
    }
}
    d88e:	46bd      	mov	sp, r7
    d890:	bd80      	pop	{r7, pc}
    d892:	46c0      	nop			(mov r8, r8)
    d894:	2000058d 	.word	0x2000058d

0000d898 <_Z16EXTILine5_Configv>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
#endif
}

void EXTILine5_Config(void)
    d898:	b580      	push	{r7, lr}
    d89a:	b084      	sub	sp, #16
    d89c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    d89e:	f04f 0020 	mov.w	r0, #32	; 0x20
    d8a2:	f04f 0101 	mov.w	r1, #1	; 0x1
    d8a6:	f7f4 fdad 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    d8aa:	f04f 0328 	mov.w	r3, #40	; 0x28
    d8ae:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    d8b0:	f04f 0320 	mov.w	r3, #32	; 0x20
    d8b4:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    d8b6:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d8ba:	4817      	ldr	r0, [pc, #92]	(d918 <_Z16EXTILine5_Configv+0x80>)
    d8bc:	4619      	mov	r1, r3
    d8be:	f7f3 fef7 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource5);
    d8c2:	f04f 0003 	mov.w	r0, #3	; 0x3
    d8c6:	f04f 0105 	mov.w	r1, #5	; 0x5
    d8ca:	f7f4 f957 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line5 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line5;
    d8ce:	f04f 0320 	mov.w	r3, #32	; 0x20
    d8d2:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    d8d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    d8d8:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    d8da:	f04f 0308 	mov.w	r3, #8	; 0x8
    d8de:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    d8e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    d8e4:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    d8e6:	463b      	mov	r3, r7
    d8e8:	4618      	mov	r0, r3
    d8ea:	f7f3 fd35 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;//EXTI5_IRQn;
    d8ee:	f04f 0317 	mov.w	r3, #23	; 0x17
    d8f2:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//0x01 for lowest priority
    d8f4:	f04f 0301 	mov.w	r3, #1	; 0x1
    d8f8:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    d8fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    d8fe:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    d900:	f04f 0301 	mov.w	r3, #1	; 0x1
    d904:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    d906:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d90a:	4618      	mov	r0, r3
    d90c:	f7f2 fc86 	bl	21c <NVIC_Init>
#endif
}
    d910:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d914:	46bd      	mov	sp, r7
    d916:	bd80      	pop	{r7, pc}
    d918:	40010800 	.word	0x40010800

0000d91c <_Z16EXTILine3_Configv>:
/**
  * @brief  Configures EXTI Line3 (connected to PA3 pin) in interrupt mode
  * @param  None
  * @retval None
  */
void EXTILine3_Config(void)
    d91c:	b580      	push	{r7, lr}
    d91e:	b084      	sub	sp, #16
    d920:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    d922:	f04f 0020 	mov.w	r0, #32	; 0x20
    d926:	f04f 0101 	mov.w	r1, #1	; 0x1
    d92a:	f7f4 fd6b 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    d92e:	f04f 0328 	mov.w	r3, #40	; 0x28
    d932:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    d934:	f04f 0308 	mov.w	r3, #8	; 0x8
    d938:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    d93a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d93e:	4817      	ldr	r0, [pc, #92]	(d99c <_Z16EXTILine3_Configv+0x80>)
    d940:	4619      	mov	r1, r3
    d942:	f7f3 feb5 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource3);
    d946:	f04f 0003 	mov.w	r0, #3	; 0x3
    d94a:	f04f 0103 	mov.w	r1, #3	; 0x3
    d94e:	f7f4 f915 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line3 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
    d952:	f04f 0308 	mov.w	r3, #8	; 0x8
    d956:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    d958:	f04f 0300 	mov.w	r3, #0	; 0x0
    d95c:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    d95e:	f04f 0308 	mov.w	r3, #8	; 0x8
    d962:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    d964:	f04f 0301 	mov.w	r3, #1	; 0x1
    d968:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    d96a:	463b      	mov	r3, r7
    d96c:	4618      	mov	r0, r3
    d96e:	f7f3 fcf3 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;//EXTI5_IRQn;
    d972:	f04f 0309 	mov.w	r3, #9	; 0x9
    d976:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x08;//0x01 for lowest priority
    d978:	f04f 0308 	mov.w	r3, #8	; 0x8
    d97c:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    d97e:	f04f 0301 	mov.w	r3, #1	; 0x1
    d982:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    d984:	f04f 0301 	mov.w	r3, #1	; 0x1
    d988:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    d98a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d98e:	4618      	mov	r0, r3
    d990:	f7f2 fc44 	bl	21c <NVIC_Init>
#endif
}
    d994:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d998:	46bd      	mov	sp, r7
    d99a:	bd80      	pop	{r7, pc}
    d99c:	40010800 	.word	0x40010800

0000d9a0 <_ZN8TourelleC1Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    d9a0:	b580      	push	{r7, lr}
    d9a2:	b082      	sub	sp, #8
    d9a4:	af00      	add	r7, sp, #0
    d9a6:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    d9a8:	687a      	ldr	r2, [r7, #4]
    d9aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    d9ae:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    d9b0:	4a05      	ldr	r2, [pc, #20]	(d9c8 <_ZN8TourelleC1Ev+0x28>)
    d9b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d9b6:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    d9b8:	f7ff ffb0 	bl	d91c <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    d9bc:	687b      	ldr	r3, [r7, #4]
    d9be:	4618      	mov	r0, r3
    d9c0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d9c4:	46bd      	mov	sp, r7
    d9c6:	bd80      	pop	{r7, pc}
    d9c8:	2000058d 	.word	0x2000058d

0000d9cc <_ZN8TourelleC2Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    d9cc:	b580      	push	{r7, lr}
    d9ce:	b082      	sub	sp, #8
    d9d0:	af00      	add	r7, sp, #0
    d9d2:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    d9d4:	687a      	ldr	r2, [r7, #4]
    d9d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d9da:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    d9dc:	4a05      	ldr	r2, [pc, #20]	(d9f4 <_ZN8TourelleC2Ev+0x28>)
    d9de:	f04f 0300 	mov.w	r3, #0	; 0x0
    d9e2:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    d9e4:	f7ff ff9a 	bl	d91c <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    d9e8:	687b      	ldr	r3, [r7, #4]
    d9ea:	4618      	mov	r0, r3
    d9ec:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d9f0:	46bd      	mov	sp, r7
    d9f2:	bd80      	pop	{r7, pc}
    d9f4:	2000058d 	.word	0x2000058d

0000d9f8 <_ZN16UltrasoundSensor7getNameEv>:
UltrasoundSensor::~UltrasoundSensor()
{
    //dtor
}

UltrasoundSensor::UltrasoundName UltrasoundSensor::getName()
    d9f8:	b480      	push	{r7}
    d9fa:	b083      	sub	sp, #12
    d9fc:	af00      	add	r7, sp, #0
    d9fe:	6078      	str	r0, [r7, #4]
{
    return name;
    da00:	687b      	ldr	r3, [r7, #4]
    da02:	7b1b      	ldrb	r3, [r3, #12]
}
    da04:	4618      	mov	r0, r3
    da06:	f107 070c 	add.w	r7, r7, #12	; 0xc
    da0a:	46bd      	mov	sp, r7
    da0c:	bc80      	pop	{r7}
    da0e:	4770      	bx	lr

0000da10 <_ZN16UltrasoundSensor8getValueEv>:


Sensor::OutputSensor UltrasoundSensor::getValue()
    da10:	b580      	push	{r7, lr}
    da12:	b086      	sub	sp, #24
    da14:	af00      	add	r7, sp, #0
    da16:	6038      	str	r0, [r7, #0]
    da18:	6079      	str	r1, [r7, #4]
{
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    da1a:	f7fd f84b 	bl	aab4 <_ZN12AnalogSensor18conversionFinishedEv>
    da1e:	4603      	mov	r3, r0
    da20:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    da24:	b2db      	uxtb	r3, r3
    da26:	2b00      	cmp	r3, #0
    da28:	d1f7      	bne.n	da1a <_ZN16UltrasoundSensor8getValueEv+0xa>
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    OutputSensor output;
    output.type = ULTRASOUND;
    da2a:	f04f 0301 	mov.w	r3, #1	; 0x1
    da2e:	683a      	ldr	r2, [r7, #0]
    da30:	7013      	strb	r3, [r2, #0]
    output.b = false;
    da32:	f04f 0300 	mov.w	r3, #0	; 0x0
    da36:	683a      	ldr	r2, [r7, #0]
    da38:	7213      	strb	r3, [r2, #8]
    #ifdef ROBOTHW
    output.f = coeff*(*data)/2.;
    da3a:	687b      	ldr	r3, [r7, #4]
    da3c:	689b      	ldr	r3, [r3, #8]
    da3e:	881b      	ldrh	r3, [r3, #0]
    da40:	4618      	mov	r0, r3
    da42:	f00d f9c3 	bl	1adcc <__aeabi_i2f>
    da46:	4602      	mov	r2, r0
    da48:	4b09      	ldr	r3, [pc, #36]	(da70 <_ZN16UltrasoundSensor8getValueEv+0x60>)
    da4a:	681b      	ldr	r3, [r3, #0]
    da4c:	4610      	mov	r0, r2
    da4e:	4619      	mov	r1, r3
    da50:	f00d fa10 	bl	1ae74 <__aeabi_fmul>
    da54:	4603      	mov	r3, r0
    da56:	4618      	mov	r0, r3
    da58:	4906      	ldr	r1, [pc, #24]	(da74 <_ZN16UltrasoundSensor8getValueEv+0x64>)
    da5a:	f00d fabf 	bl	1afdc <__aeabi_fdiv>
    da5e:	4603      	mov	r3, r0
    da60:	683a      	ldr	r2, [r7, #0]
    da62:	6053      	str	r3, [r2, #4]
    #else
    output.f = 0;
    #endif
    return output;
}
    da64:	6838      	ldr	r0, [r7, #0]
    da66:	f107 0718 	add.w	r7, r7, #24	; 0x18
    da6a:	46bd      	mov	sp, r7
    da6c:	bd80      	pop	{r7, pc}
    da6e:	46c0      	nop			(mov r8, r8)
    da70:	20000028 	.word	0x20000028
    da74:	40000000 	.word	0x40000000

0000da78 <_ZN16UltrasoundSensorD0Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    da78:	b580      	push	{r7, lr}
    da7a:	b082      	sub	sp, #8
    da7c:	af00      	add	r7, sp, #0
    da7e:	6078      	str	r0, [r7, #4]
    da80:	687a      	ldr	r2, [r7, #4]
    da82:	4b0a      	ldr	r3, [pc, #40]	(daac <_ZN16UltrasoundSensorD0Ev+0x34>)
    da84:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    da86:	687b      	ldr	r3, [r7, #4]
    da88:	4618      	mov	r0, r3
    da8a:	f7fd f907 	bl	ac9c <_ZN12AnalogSensorD2Ev>
    da8e:	f04f 0301 	mov.w	r3, #1	; 0x1
    da92:	b2db      	uxtb	r3, r3
    da94:	2b00      	cmp	r3, #0
    da96:	d002      	beq.n	da9e <_ZN16UltrasoundSensorD0Ev+0x26>
    da98:	6878      	ldr	r0, [r7, #4]
    da9a:	f000 feab 	bl	e7f4 <_ZdlPv>
    da9e:	687b      	ldr	r3, [r7, #4]
    daa0:	4618      	mov	r0, r3
    daa2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    daa6:	46bd      	mov	sp, r7
    daa8:	bd80      	pop	{r7, pc}
    daaa:	46c0      	nop			(mov r8, r8)
    daac:	00021f30 	.word	0x00021f30

0000dab0 <_ZN16UltrasoundSensorD1Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    dab0:	b580      	push	{r7, lr}
    dab2:	b082      	sub	sp, #8
    dab4:	af00      	add	r7, sp, #0
    dab6:	6078      	str	r0, [r7, #4]
    dab8:	687a      	ldr	r2, [r7, #4]
    daba:	4b0a      	ldr	r3, [pc, #40]	(dae4 <_ZN16UltrasoundSensorD1Ev+0x34>)
    dabc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    dabe:	687b      	ldr	r3, [r7, #4]
    dac0:	4618      	mov	r0, r3
    dac2:	f7fd f8eb 	bl	ac9c <_ZN12AnalogSensorD2Ev>
    dac6:	f04f 0300 	mov.w	r3, #0	; 0x0
    daca:	b2db      	uxtb	r3, r3
    dacc:	2b00      	cmp	r3, #0
    dace:	d002      	beq.n	dad6 <_ZN16UltrasoundSensorD1Ev+0x26>
    dad0:	6878      	ldr	r0, [r7, #4]
    dad2:	f000 fe8f 	bl	e7f4 <_ZdlPv>
    dad6:	687b      	ldr	r3, [r7, #4]
    dad8:	4618      	mov	r0, r3
    dada:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dade:	46bd      	mov	sp, r7
    dae0:	bd80      	pop	{r7, pc}
    dae2:	46c0      	nop			(mov r8, r8)
    dae4:	00021f30 	.word	0x00021f30

0000dae8 <_ZN16UltrasoundSensorD2Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    dae8:	b580      	push	{r7, lr}
    daea:	b082      	sub	sp, #8
    daec:	af00      	add	r7, sp, #0
    daee:	6078      	str	r0, [r7, #4]
    daf0:	687a      	ldr	r2, [r7, #4]
    daf2:	4b0a      	ldr	r3, [pc, #40]	(db1c <_ZN16UltrasoundSensorD2Ev+0x34>)
    daf4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    daf6:	687b      	ldr	r3, [r7, #4]
    daf8:	4618      	mov	r0, r3
    dafa:	f7fd f8cf 	bl	ac9c <_ZN12AnalogSensorD2Ev>
    dafe:	f04f 0300 	mov.w	r3, #0	; 0x0
    db02:	b2db      	uxtb	r3, r3
    db04:	2b00      	cmp	r3, #0
    db06:	d002      	beq.n	db0e <_ZN16UltrasoundSensorD2Ev+0x26>
    db08:	6878      	ldr	r0, [r7, #4]
    db0a:	f000 fe73 	bl	e7f4 <_ZdlPv>
    db0e:	687b      	ldr	r3, [r7, #4]
    db10:	4618      	mov	r0, r3
    db12:	f107 0708 	add.w	r7, r7, #8	; 0x8
    db16:	46bd      	mov	sp, r7
    db18:	bd80      	pop	{r7, pc}
    db1a:	46c0      	nop			(mov r8, r8)
    db1c:	00021f30 	.word	0x00021f30

0000db20 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    db20:	b580      	push	{r7, lr}
    db22:	b084      	sub	sp, #16
    db24:	af00      	add	r7, sp, #0
    db26:	60f8      	str	r0, [r7, #12]
    db28:	607b      	str	r3, [r7, #4]
    db2a:	460b      	mov	r3, r1
    db2c:	72fb      	strb	r3, [r7, #11]
    db2e:	4613      	mov	r3, r2
    db30:	72bb      	strb	r3, [r7, #10]
    db32:	68fb      	ldr	r3, [r7, #12]
    db34:	7aba      	ldrb	r2, [r7, #10]
    db36:	4618      	mov	r0, r3
    db38:	4611      	mov	r1, r2
    db3a:	687a      	ldr	r2, [r7, #4]
    db3c:	f7fd f8f4 	bl	ad28 <_ZN12AnalogSensorC2EhPt>
    db40:	68fa      	ldr	r2, [r7, #12]
    db42:	4b05      	ldr	r3, [pc, #20]	(db58 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt+0x38>)
    db44:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    db46:	68fa      	ldr	r2, [r7, #12]
    db48:	7afb      	ldrb	r3, [r7, #11]
    db4a:	7313      	strb	r3, [r2, #12]
}
    db4c:	68fb      	ldr	r3, [r7, #12]
    db4e:	4618      	mov	r0, r3
    db50:	f107 0710 	add.w	r7, r7, #16	; 0x10
    db54:	46bd      	mov	sp, r7
    db56:	bd80      	pop	{r7, pc}
    db58:	00021f30 	.word	0x00021f30

0000db5c <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    db5c:	b580      	push	{r7, lr}
    db5e:	b084      	sub	sp, #16
    db60:	af00      	add	r7, sp, #0
    db62:	60f8      	str	r0, [r7, #12]
    db64:	607b      	str	r3, [r7, #4]
    db66:	460b      	mov	r3, r1
    db68:	72fb      	strb	r3, [r7, #11]
    db6a:	4613      	mov	r3, r2
    db6c:	72bb      	strb	r3, [r7, #10]
    db6e:	68fb      	ldr	r3, [r7, #12]
    db70:	7aba      	ldrb	r2, [r7, #10]
    db72:	4618      	mov	r0, r3
    db74:	4611      	mov	r1, r2
    db76:	687a      	ldr	r2, [r7, #4]
    db78:	f7fd f8d6 	bl	ad28 <_ZN12AnalogSensorC2EhPt>
    db7c:	68fa      	ldr	r2, [r7, #12]
    db7e:	4b05      	ldr	r3, [pc, #20]	(db94 <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt+0x38>)
    db80:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    db82:	68fa      	ldr	r2, [r7, #12]
    db84:	7afb      	ldrb	r3, [r7, #11]
    db86:	7313      	strb	r3, [r2, #12]
}
    db88:	68fb      	ldr	r3, [r7, #12]
    db8a:	4618      	mov	r0, r3
    db8c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    db90:	46bd      	mov	sp, r7
    db92:	bd80      	pop	{r7, pc}
    db94:	00021f30 	.word	0x00021f30

0000db98 <_Z20initialisationDesPINv>:



// Mettez toutes vos initialisations de PIN dans la fonction "initialisation"
// On l'appellera ensuite dans le main au tout début pour tout initialiser d'un coup
void initialisationDesPIN()
    db98:	b580      	push	{r7, lr}
    db9a:	b082      	sub	sp, #8
    db9c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

#ifdef STM32F10X_CL // Pour le stm32 h107

    // Pompe à vide
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    db9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    dba2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    dba4:	f04f 0310 	mov.w	r3, #16	; 0x10
    dba8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    dbaa:	f04f 0302 	mov.w	r3, #2	; 0x2
    dbae:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    dbb0:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dbb4:	4845      	ldr	r0, [pc, #276]	(dccc <_Z20initialisationDesPINv+0x134>)
    dbb6:	4619      	mov	r1, r3
    dbb8:	f7f3 fd7a 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOD, GPIO_Pin_14, Bit_RESET);
    dbbc:	4843      	ldr	r0, [pc, #268]	(dccc <_Z20initialisationDesPINv+0x134>)
    dbbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    dbc2:	f04f 0200 	mov.w	r2, #0	; 0x0
    dbc6:	f7f3 fee1 	bl	198c <GPIO_WriteBit>

    // Patte coté de la partie bleu ou jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    dbca:	f04f 0310 	mov.w	r3, #16	; 0x10
    dbce:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    dbd0:	f04f 0304 	mov.w	r3, #4	; 0x4
    dbd4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dbd6:	f04f 0303 	mov.w	r3, #3	; 0x3
    dbda:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    dbdc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dbe0:	483b      	ldr	r0, [pc, #236]	(dcd0 <_Z20initialisationDesPINv+0x138>)
    dbe2:	4619      	mov	r1, r3
    dbe4:	f7f3 fd64 	bl	16b0 <GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
*/

    GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);
    dbe8:	483a      	ldr	r0, [pc, #232]	(dcd4 <_Z20initialisationDesPINv+0x13c>)
    dbea:	f04f 0101 	mov.w	r1, #1	; 0x1
    dbee:	f7f3 ff4f 	bl	1a90 <GPIO_PinRemapConfig>

    // Pattes des servos
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    dbf2:	f44f 7300 	mov.w	r3, #512	; 0x200
    dbf6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    dbf8:	f04f 0318 	mov.w	r3, #24	; 0x18
    dbfc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dbfe:	f04f 0303 	mov.w	r3, #3	; 0x3
    dc02:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    dc04:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dc08:	4831      	ldr	r0, [pc, #196]	(dcd0 <_Z20initialisationDesPINv+0x138>)
    dc0a:	4619      	mov	r1, r3
    dc0c:	f7f3 fd50 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    dc10:	f44f 6300 	mov.w	r3, #2048	; 0x800
    dc14:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    dc16:	f04f 0318 	mov.w	r3, #24	; 0x18
    dc1a:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dc1c:	f04f 0303 	mov.w	r3, #3	; 0x3
    dc20:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    dc22:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dc26:	482a      	ldr	r0, [pc, #168]	(dcd0 <_Z20initialisationDesPINv+0x138>)
    dc28:	4619      	mov	r1, r3
    dc2a:	f7f3 fd41 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    dc2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    dc32:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    dc34:	f04f 0318 	mov.w	r3, #24	; 0x18
    dc38:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dc3a:	f04f 0303 	mov.w	r3, #3	; 0x3
    dc3e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    dc40:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dc44:	4822      	ldr	r0, [pc, #136]	(dcd0 <_Z20initialisationDesPINv+0x138>)
    dc46:	4619      	mov	r1, r3
    dc48:	f7f3 fd32 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    dc4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    dc50:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    dc52:	f04f 0318 	mov.w	r3, #24	; 0x18
    dc56:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dc58:	f04f 0303 	mov.w	r3, #3	; 0x3
    dc5c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    dc5e:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dc62:	481b      	ldr	r0, [pc, #108]	(dcd0 <_Z20initialisationDesPINv+0x138>)
    dc64:	4619      	mov	r1, r3
    dc66:	f7f3 fd23 	bl	16b0 <GPIO_Init>

    // LED Verte
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    dc6a:	f04f 0340 	mov.w	r3, #64	; 0x40
    dc6e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    dc70:	f04f 0310 	mov.w	r3, #16	; 0x10
    dc74:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    dc76:	f04f 0302 	mov.w	r3, #2	; 0x2
    dc7a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    dc7c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dc80:	4815      	ldr	r0, [pc, #84]	(dcd8 <_Z20initialisationDesPINv+0x140>)
    dc82:	4619      	mov	r1, r3
    dc84:	f7f3 fd14 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
    dc88:	4813      	ldr	r0, [pc, #76]	(dcd8 <_Z20initialisationDesPINv+0x140>)
    dc8a:	f04f 0140 	mov.w	r1, #64	; 0x40
    dc8e:	f04f 0200 	mov.w	r2, #0	; 0x0
    dc92:	f7f3 fe7b 	bl	198c <GPIO_WriteBit>

    // LED Jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    dc96:	f04f 0380 	mov.w	r3, #128	; 0x80
    dc9a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    dc9c:	f04f 0310 	mov.w	r3, #16	; 0x10
    dca0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    dca2:	f04f 0302 	mov.w	r3, #2	; 0x2
    dca6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    dca8:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dcac:	480a      	ldr	r0, [pc, #40]	(dcd8 <_Z20initialisationDesPINv+0x140>)
    dcae:	4619      	mov	r1, r3
    dcb0:	f7f3 fcfe 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET);
    dcb4:	4808      	ldr	r0, [pc, #32]	(dcd8 <_Z20initialisationDesPINv+0x140>)
    dcb6:	f04f 0180 	mov.w	r1, #128	; 0x80
    dcba:	f04f 0200 	mov.w	r2, #0	; 0x0
    dcbe:	f7f3 fe65 	bl	198c <GPIO_WriteBit>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET);

#endif //STM32F40_41xxx

}
    dcc2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dcc6:	46bd      	mov	sp, r7
    dcc8:	bd80      	pop	{r7, pc}
    dcca:	46c0      	nop			(mov r8, r8)
    dccc:	40011400 	.word	0x40011400
    dcd0:	40011800 	.word	0x40011800
    dcd4:	001600c0 	.word	0x001600c0
    dcd8:	40011000 	.word	0x40011000

0000dcdc <_Z18initAutresHorlogesv>:
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    #endif
}

// Définit quelques horloges supplémentaires
void initAutresHorloges()
    dcdc:	b580      	push	{r7, lr}
    dcde:	af00      	add	r7, sp, #0
        // Sharps
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    dce0:	f04f 0001 	mov.w	r0, #1	; 0x1
    dce4:	f04f 0101 	mov.w	r1, #1	; 0x1
    dce8:	f7f4 fb8c 	bl	2404 <RCC_AHBPeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    dcec:	f44f 7000 	mov.w	r0, #512	; 0x200
    dcf0:	f04f 0101 	mov.w	r1, #1	; 0x1
    dcf4:	f7f4 fba8 	bl	2448 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    dcf8:	f04f 0001 	mov.w	r0, #1	; 0x1
    dcfc:	f04f 0101 	mov.w	r1, #1	; 0x1
    dd00:	f7f4 fba2 	bl	2448 <RCC_APB2PeriphClockCmd>
        #ifdef STM32F10X_CL // stm h107
            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE, ENABLE);
    dd04:	f04f 007c 	mov.w	r0, #124	; 0x7c
    dd08:	f04f 0101 	mov.w	r1, #1	; 0x1
    dd0c:	f7f4 fb9c 	bl	2448 <RCC_APB2PeriphClockCmd>
        #endif
    #endif
}
    dd10:	46bd      	mov	sp, r7
    dd12:	bd80      	pop	{r7, pc}

0000dd14 <_Z8Clk_Initv>:
//#include "stm32f10x_remap.h"

#include "initialisation.h"

// Initialise le système d'horloge
void Clk_Init()
    dd14:	b580      	push	{r7, lr}
    dd16:	af00      	add	r7, sp, #0
{
    //Rien pour le STM32F4, tout est déjà fait dans SystemInit(), appelée implicitement
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        // Démarre l'horloge interne (8 MHz)
        RCC_HSICmd(ENABLE);
    dd18:	f04f 0001 	mov.w	r0, #1	; 0x1
    dd1c:	f7f4 f848 	bl	1db0 <RCC_HSICmd>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
    dd20:	f04f 0021 	mov.w	r0, #33	; 0x21
    dd24:	f7f4 fc6a 	bl	25fc <RCC_GetFlagStatus>
    dd28:	4603      	mov	r3, r0
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	bf14      	ite	ne
    dd2e:	2300      	movne	r3, #0
    dd30:	2301      	moveq	r3, #1
    dd32:	b2db      	uxtb	r3, r3
    dd34:	2b00      	cmp	r3, #0
    dd36:	d1f3      	bne.n	dd20 <_Z8Clk_Initv+0xc>
        // Une fois demarée, on utilise celle ci
        RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
    dd38:	f04f 0000 	mov.w	r0, #0	; 0x0
    dd3c:	f7f4 f918 	bl	1f70 <RCC_SYSCLKConfig>

        // Démarre l'horloge externe à 25MHz
        RCC_HSEConfig(RCC_HSE_ON);
    dd40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    dd44:	f7f3 ffb2 	bl	1cac <RCC_HSEConfig>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
    dd48:	f04f 0031 	mov.w	r0, #49	; 0x31
    dd4c:	f7f4 fc56 	bl	25fc <RCC_GetFlagStatus>
    dd50:	4603      	mov	r3, r0
    dd52:	2b00      	cmp	r3, #0
    dd54:	bf14      	ite	ne
    dd56:	2300      	movne	r3, #0
    dd58:	2301      	moveq	r3, #1
    dd5a:	b2db      	uxtb	r3, r3
    dd5c:	2b00      	cmp	r3, #0
    dd5e:	d1f3      	bne.n	dd48 <_Z8Clk_Initv+0x34>


        // PLL2 à (8/5) * 25Mhz = 40 Mhz
        RCC_PREDIV2Config(RCC_PREDIV2_Div5);
    dd60:	f04f 0040 	mov.w	r0, #64	; 0x40
    dd64:	f7f4 f88a 	bl	1e7c <RCC_PREDIV2Config>
        RCC_PLL2Config(RCC_PLL2Mul_8);
    dd68:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    dd6c:	f7f4 f8a4 	bl	1eb8 <RCC_PLL2Config>
        // On démarre le PLL2 une fois la config entrée
        RCC_PLL2Cmd(ENABLE);
    dd70:	f04f 0001 	mov.w	r0, #1	; 0x1
    dd74:	f7f4 f8be 	bl	1ef4 <RCC_PLL2Cmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET);
    dd78:	f04f 003b 	mov.w	r0, #59	; 0x3b
    dd7c:	f7f4 fc3e 	bl	25fc <RCC_GetFlagStatus>
    dd80:	4603      	mov	r3, r0
    dd82:	2b00      	cmp	r3, #0
    dd84:	bf14      	ite	ne
    dd86:	2300      	movne	r3, #0
    dd88:	2301      	moveq	r3, #1
    dd8a:	b2db      	uxtb	r3, r3
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d1f3      	bne.n	dd78 <_Z8Clk_Initv+0x64>

        // Initialisation du PL à (9/5) * 40MHz = 72MHz
        RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
    dd90:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    dd94:	f04f 0104 	mov.w	r1, #4	; 0x4
    dd98:	f7f4 f84c 	bl	1e34 <RCC_PREDIV1Config>
        RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
    dd9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    dda0:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
    dda4:	f7f4 f814 	bl	1dd0 <RCC_PLLConfig>
        // On démarre le PLL une fois la config entrée
        RCC_PLLCmd(ENABLE);
    dda8:	f04f 0001 	mov.w	r0, #1	; 0x1
    ddac:	f7f4 f832 	bl	1e14 <RCC_PLLCmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
    ddb0:	f04f 0039 	mov.w	r0, #57	; 0x39
    ddb4:	f7f4 fc22 	bl	25fc <RCC_GetFlagStatus>
    ddb8:	4603      	mov	r3, r0
    ddba:	2b00      	cmp	r3, #0
    ddbc:	bf14      	ite	ne
    ddbe:	2300      	movne	r3, #0
    ddc0:	2301      	moveq	r3, #1
    ddc2:	b2db      	uxtb	r3, r3
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d1f3      	bne.n	ddb0 <_Z8Clk_Initv+0x9c>

        // On démarre les composants internes au microcontroleur
        RCC_OTGFSCLKConfig(RCC_OTGFSCLKSource_PLLVCO_Div3); // USB OTG FS clock (OTGFSCLK)
    ddc8:	f04f 0000 	mov.w	r0, #0	; 0x0
    ddcc:	f7f4 f980 	bl	20d0 <RCC_OTGFSCLKConfig>
        RCC_ADCCLKConfig(RCC_PCLK2_Div6); // ADC clock (ADCCLK) : 72MHz / 6 = 12MHz
    ddd0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    ddd4:	f7f4 f98a 	bl	20ec <RCC_ADCCLKConfig>
        RCC_PCLK2Config(RCC_HCLK_Div1); // High Speed APB clock (PCLK2) : 72Mhz
    ddd8:	f04f 0000 	mov.w	r0, #0	; 0x0
    dddc:	f7f4 f930 	bl	2040 <RCC_PCLK2Config>
        RCC_PCLK1Config(RCC_HCLK_Div2); // Low Speed APB clock (PCLK1) : 72Mhz / 2 = 36MHz
    dde0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    dde4:	f7f4 f90e 	bl	2004 <RCC_PCLK1Config>
        RCC_HCLKConfig(RCC_SYSCLK_Div1); // AHB clock (HCLK) : 72Mhz
    dde8:	f04f 0000 	mov.w	r0, #0	; 0x0
    ddec:	f7f4 f8ec 	bl	1fc8 <RCC_HCLKConfig>
        // Flash 1 wait state
        *(vu32 *)0x40022000 = 0x12;
    ddf0:	4a04      	ldr	r2, [pc, #16]	(de04 <_Z8Clk_Initv+0xf0>)
    ddf2:	f04f 0312 	mov.w	r3, #18	; 0x12
    ddf6:	6013      	str	r3, [r2, #0]
        // On utilise le PLL comme horloge de référence
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    ddf8:	f04f 0002 	mov.w	r0, #2	; 0x2
    ddfc:	f7f4 f8b8 	bl	1f70 <RCC_SYSCLKConfig>
    #endif
}
    de00:	46bd      	mov	sp, r7
    de02:	bd80      	pop	{r7, pc}
    de04:	40022000 	.word	0x40022000

0000de08 <_ZN16ServosNumeriques11receiveDataEv>:
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    USART_SendData(USART3, (u16) data);
}

int receiveData()
    de08:	b480      	push	{r7}
    de0a:	af00      	add	r7, sp, #0
{
    while (!(USART3->SR & USART_FLAG_RXNE));
    de0c:	4b0b      	ldr	r3, [pc, #44]	(de3c <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    de0e:	881b      	ldrh	r3, [r3, #0]
    de10:	b29b      	uxth	r3, r3
    de12:	f003 0320 	and.w	r3, r3, #32	; 0x20
    de16:	2b00      	cmp	r3, #0
    de18:	bf14      	ite	ne
    de1a:	2300      	movne	r3, #0
    de1c:	2301      	moveq	r3, #1
    de1e:	b2db      	uxtb	r3, r3
    de20:	2b00      	cmp	r3, #0
    de22:	d1f3      	bne.n	de0c <_ZN16ServosNumeriques11receiveDataEv+0x4>

    return ((int)(USART3->DR & 0x1FF));
    de24:	4b05      	ldr	r3, [pc, #20]	(de3c <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    de26:	889b      	ldrh	r3, [r3, #4]
    de28:	b29b      	uxth	r3, r3
    de2a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    de2e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
}
    de32:	4618      	mov	r0, r3
    de34:	46bd      	mov	sp, r7
    de36:	bc80      	pop	{r7}
    de38:	4770      	bx	lr
    de3a:	46c0      	nop			(mov r8, r8)
    de3c:	40004800 	.word	0x40004800

0000de40 <_ZN16ServosNumeriques19receiveStatusPacketEPi>:

int receiveStatusPacket(int* tableau)
    de40:	b590      	push	{r4, r7, lr}
    de42:	b089      	sub	sp, #36
    de44:	af00      	add	r7, sp, #0
    de46:	6078      	str	r0, [r7, #4]
{
    int msg = receiveData();
    de48:	f7ff ffde 	bl	de08 <_ZN16ServosNumeriques11receiveDataEv>
    de4c:	4603      	mov	r3, r0
    de4e:	60fb      	str	r3, [r7, #12]
    int i = 0;
    de50:	f04f 0300 	mov.w	r3, #0	; 0x0
    de54:	613b      	str	r3, [r7, #16]
    de56:	e003      	b.n	de60 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x20>
    while(msg == 0) {
        msg = receiveData();
    de58:	f7ff ffd6 	bl	de08 <_ZN16ServosNumeriques11receiveDataEv>
    de5c:	4603      	mov	r3, r0
    de5e:	60fb      	str	r3, [r7, #12]

int receiveStatusPacket(int* tableau)
{
    int msg = receiveData();
    int i = 0;
    while(msg == 0) {
    de60:	68fb      	ldr	r3, [r7, #12]
    de62:	2b00      	cmp	r3, #0
    de64:	d0f8      	beq.n	de58 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x18>
        msg = receiveData();
    } // on attend de lire quelque chose
    if (msg == 0xff) { // début fanion
    de66:	68fb      	ldr	r3, [r7, #12]
    de68:	2bff      	cmp	r3, #255
    de6a:	d176      	bne.n	df5a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
        msg = receiveData();
    de6c:	f7ff ffcc 	bl	de08 <_ZN16ServosNumeriques11receiveDataEv>
    de70:	4603      	mov	r3, r0
    de72:	60fb      	str	r3, [r7, #12]
        if (msg == 0xff) { // fin fanion
    de74:	68fb      	ldr	r3, [r7, #12]
    de76:	2bff      	cmp	r3, #255
    de78:	d16f      	bne.n	df5a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
    de7a:	693b      	ldr	r3, [r7, #16]
    de7c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    de80:	687b      	ldr	r3, [r7, #4]
    de82:	eb03 0402 	add.w	r4, r3, r2
    de86:	f7ff ffbf 	bl	de08 <_ZN16ServosNumeriques11receiveDataEv>
    de8a:	4603      	mov	r3, r0
    de8c:	6023      	str	r3, [r4, #0]
    de8e:	693b      	ldr	r3, [r7, #16]
    de90:	f103 0301 	add.w	r3, r3, #1	; 0x1
    de94:	613b      	str	r3, [r7, #16]
            tableau[i++] = receiveData(); // on lit la taille du message
    de96:	693b      	ldr	r3, [r7, #16]
    de98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    de9c:	687b      	ldr	r3, [r7, #4]
    de9e:	eb03 0402 	add.w	r4, r3, r2
    dea2:	f7ff ffb1 	bl	de08 <_ZN16ServosNumeriques11receiveDataEv>
    dea6:	4603      	mov	r3, r0
    dea8:	6023      	str	r3, [r4, #0]
    deaa:	693b      	ldr	r3, [r7, #16]
    deac:	f103 0301 	add.w	r3, r3, #1	; 0x1
    deb0:	613b      	str	r3, [r7, #16]
            for (int i = 2; i < tableau[1]+2; i++) {
    deb2:	f04f 0302 	mov.w	r3, #2	; 0x2
    deb6:	61bb      	str	r3, [r7, #24]
    deb8:	e00d      	b.n	ded6 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x96>
                tableau[i] = receiveData();
    deba:	69bb      	ldr	r3, [r7, #24]
    debc:	ea4f 0283 	mov.w	r2, r3, lsl #2
    dec0:	687b      	ldr	r3, [r7, #4]
    dec2:	eb03 0402 	add.w	r4, r3, r2
    dec6:	f7ff ff9f 	bl	de08 <_ZN16ServosNumeriques11receiveDataEv>
    deca:	4603      	mov	r3, r0
    decc:	6023      	str	r3, [r4, #0]
    if (msg == 0xff) { // début fanion
        msg = receiveData();
        if (msg == 0xff) { // fin fanion
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
            tableau[i++] = receiveData(); // on lit la taille du message
            for (int i = 2; i < tableau[1]+2; i++) {
    dece:	69bb      	ldr	r3, [r7, #24]
    ded0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ded4:	61bb      	str	r3, [r7, #24]
    ded6:	687b      	ldr	r3, [r7, #4]
    ded8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    dedc:	681b      	ldr	r3, [r3, #0]
    dede:	f103 0202 	add.w	r2, r3, #2	; 0x2
    dee2:	69bb      	ldr	r3, [r7, #24]
    dee4:	429a      	cmp	r2, r3
    dee6:	dce8      	bgt.n	deba <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x7a>
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
    dee8:	f04f 0300 	mov.w	r3, #0	; 0x0
    deec:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < tableau[1]+2; i++) {
    deee:	f04f 0300 	mov.w	r3, #0	; 0x0
    def2:	61fb      	str	r3, [r7, #28]
    def4:	e00d      	b.n	df12 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xd2>
                sum += tableau[i];
    def6:	69fb      	ldr	r3, [r7, #28]
    def8:	ea4f 0283 	mov.w	r2, r3, lsl #2
    defc:	687b      	ldr	r3, [r7, #4]
    defe:	4413      	add	r3, r2
    df00:	681b      	ldr	r3, [r3, #0]
    df02:	461a      	mov	r2, r3
    df04:	697b      	ldr	r3, [r7, #20]
    df06:	4413      	add	r3, r2
    df08:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < tableau[1]+2; i++) {
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
            for (int i = 0; i < tableau[1]+2; i++) {
    df0a:	69fb      	ldr	r3, [r7, #28]
    df0c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    df10:	61fb      	str	r3, [r7, #28]
    df12:	687b      	ldr	r3, [r7, #4]
    df14:	f103 0304 	add.w	r3, r3, #4	; 0x4
    df18:	681b      	ldr	r3, [r3, #0]
    df1a:	f103 0202 	add.w	r2, r3, #2	; 0x2
    df1e:	69fb      	ldr	r3, [r7, #28]
    df20:	429a      	cmp	r2, r3
    df22:	dce8      	bgt.n	def6 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xb6>
                sum += tableau[i];
            }
            if ((int16_t)~(sum) != tableau[tableau[1]+1])
    df24:	697b      	ldr	r3, [r7, #20]
    df26:	b29b      	uxth	r3, r3
    df28:	ea6f 0303 	mvn.w	r3, r3
    df2c:	b29b      	uxth	r3, r3
    df2e:	b219      	sxth	r1, r3
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	f103 0304 	add.w	r3, r3, #4	; 0x4
    df36:	681b      	ldr	r3, [r3, #0]
    df38:	f103 0301 	add.w	r3, r3, #1	; 0x1
    df3c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    df40:	687b      	ldr	r3, [r7, #4]
    df42:	4413      	add	r3, r2
    df44:	681b      	ldr	r3, [r3, #0]
    df46:	4299      	cmp	r1, r3
    df48:	d003      	beq.n	df52 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x112>
                return -1;
    df4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    df4e:	603b      	str	r3, [r7, #0]
    df50:	e006      	b.n	df60 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
            return 0;
    df52:	f04f 0300 	mov.w	r3, #0	; 0x0
    df56:	603b      	str	r3, [r7, #0]
    df58:	e002      	b.n	df60 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
        }
    }
    return 1;
    df5a:	f04f 0301 	mov.w	r3, #1	; 0x1
    df5e:	603b      	str	r3, [r7, #0]
    df60:	683b      	ldr	r3, [r7, #0]
}
    df62:	4618      	mov	r0, r3
    df64:	f107 0724 	add.w	r7, r7, #36	; 0x24
    df68:	46bd      	mov	sp, r7
    df6a:	bd90      	pop	{r4, r7, pc}

0000df6c <_ZN16ServosNumeriques8sendDataEi>:
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}

void sendData(int data)
    df6c:	b580      	push	{r7, lr}
    df6e:	b082      	sub	sp, #8
    df70:	af00      	add	r7, sp, #0
    df72:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    df74:	480b      	ldr	r0, [pc, #44]	(dfa4 <_ZN16ServosNumeriques8sendDataEi+0x38>)
    df76:	f04f 0180 	mov.w	r1, #128	; 0x80
    df7a:	f7f6 fef7 	bl	4d6c <USART_GetFlagStatus>
    df7e:	4603      	mov	r3, r0
    df80:	2b00      	cmp	r3, #0
    df82:	bf14      	ite	ne
    df84:	2300      	movne	r3, #0
    df86:	2301      	moveq	r3, #1
    df88:	b2db      	uxtb	r3, r3
    df8a:	2b00      	cmp	r3, #0
    df8c:	d1f2      	bne.n	df74 <_ZN16ServosNumeriques8sendDataEi+0x8>
    USART_SendData(USART3, (u16) data);
    df8e:	687b      	ldr	r3, [r7, #4]
    df90:	b29b      	uxth	r3, r3
    df92:	4804      	ldr	r0, [pc, #16]	(dfa4 <_ZN16ServosNumeriques8sendDataEi+0x38>)
    df94:	4619      	mov	r1, r3
    df96:	f7f6 fdb5 	bl	4b04 <USART_SendData>
}
    df9a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    df9e:	46bd      	mov	sp, r7
    dfa0:	bd80      	pop	{r7, pc}
    dfa2:	46c0      	nop			(mov r8, r8)
    dfa4:	40004800 	.word	0x40004800

0000dfa8 <_ZN16ServosNumeriques12setMaxTorqueEth>:
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
    dfa8:	b580      	push	{r7, lr}
    dfaa:	b094      	sub	sp, #80
    dfac:	af00      	add	r7, sp, #0
    dfae:	4603      	mov	r3, r0
    dfb0:	460a      	mov	r2, r1
    dfb2:	80fb      	strh	r3, [r7, #6]
    dfb4:	4613      	mov	r3, r2
    dfb6:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    dfb8:	f897 c005 	ldrb.w	ip, [r7, #5]
    dfbc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dfc0:	88fa      	ldrh	r2, [r7, #6]
    dfc2:	4618      	mov	r0, r3
    dfc4:	4611      	mov	r1, r2
    dfc6:	4662      	mov	r2, ip
    dfc8:	f7fc ff8e 	bl	aee8 <_ZN4AX1223getMaxTorqueInstructionEPiti>
    dfcc:	4603      	mov	r3, r0
    dfce:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dfd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    dfd4:	64fb      	str	r3, [r7, #76]
    dfd6:	e00e      	b.n	dff6 <_ZN16ServosNumeriques12setMaxTorqueEth+0x4e>
        sendData(packet[i]);
    dfd8:	6cfb      	ldr	r3, [r7, #76]
    dfda:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dfde:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dfe2:	4413      	add	r3, r2
    dfe4:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dfe8:	4618      	mov	r0, r3
    dfea:	f7ff ffbf 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    dfee:	6cfb      	ldr	r3, [r7, #76]
    dff0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dff4:	64fb      	str	r3, [r7, #76]
    dff6:	6cfa      	ldr	r2, [r7, #76]
    dff8:	6cbb      	ldr	r3, [r7, #72]
    dffa:	429a      	cmp	r2, r3
    dffc:	dbec      	blt.n	dfd8 <_ZN16ServosNumeriques12setMaxTorqueEth+0x30>
        sendData(packet[i]);
    }
}
    dffe:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e002:	46bd      	mov	sp, r7
    e004:	bd80      	pop	{r7, pc}
    e006:	46c0      	nop			(mov r8, r8)

0000e008 <_ZN16ServosNumeriques15setTorqueLimiteEth>:
        sendData(packet[i]);
    }
}


void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
    e008:	b580      	push	{r7, lr}
    e00a:	b094      	sub	sp, #80
    e00c:	af00      	add	r7, sp, #0
    e00e:	4603      	mov	r3, r0
    e010:	460a      	mov	r2, r1
    e012:	80fb      	strh	r3, [r7, #6]
    e014:	4613      	mov	r3, r2
    e016:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    e018:	f897 c005 	ldrb.w	ip, [r7, #5]
    e01c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e020:	88fa      	ldrh	r2, [r7, #6]
    e022:	4618      	mov	r0, r3
    e024:	4611      	mov	r1, r2
    e026:	4662      	mov	r2, ip
    e028:	f7fc ff98 	bl	af5c <_ZN4AX1225getTorqueLimitInstructionEPiti>
    e02c:	4603      	mov	r3, r0
    e02e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e030:	f04f 0300 	mov.w	r3, #0	; 0x0
    e034:	64fb      	str	r3, [r7, #76]
    e036:	e00e      	b.n	e056 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x4e>
        sendData(packet[i]);
    e038:	6cfb      	ldr	r3, [r7, #76]
    e03a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e03e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e042:	4413      	add	r3, r2
    e044:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e048:	4618      	mov	r0, r3
    e04a:	f7ff ff8f 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>

void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    e04e:	6cfb      	ldr	r3, [r7, #76]
    e050:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e054:	64fb      	str	r3, [r7, #76]
    e056:	6cfa      	ldr	r2, [r7, #76]
    e058:	6cbb      	ldr	r3, [r7, #72]
    e05a:	429a      	cmp	r2, r3
    e05c:	dbec      	blt.n	e038 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x30>
        sendData(packet[i]);
    }
}
    e05e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e062:	46bd      	mov	sp, r7
    e064:	bd80      	pop	{r7, pc}
    e066:	46c0      	nop			(mov r8, r8)

0000e068 <_ZN16ServosNumeriques11setBaudRateEhh>:
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
    e068:	b580      	push	{r7, lr}
    e06a:	b094      	sub	sp, #80
    e06c:	af00      	add	r7, sp, #0
    e06e:	4603      	mov	r3, r0
    e070:	460a      	mov	r2, r1
    e072:	71fb      	strb	r3, [r7, #7]
    e074:	4613      	mov	r3, r2
    e076:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    e078:	f897 c006 	ldrb.w	ip, [r7, #6]
    e07c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e080:	79fa      	ldrb	r2, [r7, #7]
    e082:	4618      	mov	r0, r3
    e084:	4611      	mov	r1, r2
    e086:	4662      	mov	r2, ip
    e088:	f7fc fece 	bl	ae28 <_ZN4AX1222getBaudRateInstructionEPihi>
    e08c:	4603      	mov	r3, r0
    e08e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e090:	f04f 0300 	mov.w	r3, #0	; 0x0
    e094:	64fb      	str	r3, [r7, #76]
    e096:	e00e      	b.n	e0b6 <_ZN16ServosNumeriques11setBaudRateEhh+0x4e>
        sendData(packet[i]);
    e098:	6cfb      	ldr	r3, [r7, #76]
    e09a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e09e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e0a2:	4413      	add	r3, r2
    e0a4:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e0a8:	4618      	mov	r0, r3
    e0aa:	f7ff ff5f 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    for (int i = 0; i < packetLength; i++) {
    e0ae:	6cfb      	ldr	r3, [r7, #76]
    e0b0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e0b4:	64fb      	str	r3, [r7, #76]
    e0b6:	6cfa      	ldr	r2, [r7, #76]
    e0b8:	6cbb      	ldr	r3, [r7, #72]
    e0ba:	429a      	cmp	r2, r3
    e0bc:	dbec      	blt.n	e098 <_ZN16ServosNumeriques11setBaudRateEhh+0x30>
        sendData(packet[i]);
    }
}
    e0be:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e0c2:	46bd      	mov	sp, r7
    e0c4:	bd80      	pop	{r7, pc}
    e0c6:	46c0      	nop			(mov r8, r8)

0000e0c8 <_ZN16ServosNumeriques15setMaximumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMaximumAngle(uint16_t angle, uint8_t servo)
    e0c8:	b580      	push	{r7, lr}
    e0ca:	b094      	sub	sp, #80
    e0cc:	af00      	add	r7, sp, #0
    e0ce:	4603      	mov	r3, r0
    e0d0:	460a      	mov	r2, r1
    e0d2:	80fb      	strh	r3, [r7, #6]
    e0d4:	4613      	mov	r3, r2
    e0d6:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    e0d8:	f897 c005 	ldrb.w	ip, [r7, #5]
    e0dc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e0e0:	88fa      	ldrh	r2, [r7, #6]
    e0e2:	4618      	mov	r0, r3
    e0e4:	4611      	mov	r1, r2
    e0e6:	4662      	mov	r2, ip
    e0e8:	f7fc ff72 	bl	afd0 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>
    e0ec:	4603      	mov	r3, r0
    e0ee:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e0f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    e0f4:	64fb      	str	r3, [r7, #76]
    e0f6:	e00e      	b.n	e116 <_ZN16ServosNumeriques15setMaximumAngleEth+0x4e>
        sendData(packet[i]);
    e0f8:	6cfb      	ldr	r3, [r7, #76]
    e0fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e0fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e102:	4413      	add	r3, r2
    e104:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e108:	4618      	mov	r0, r3
    e10a:	f7ff ff2f 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>

void setMaximumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    e10e:	6cfb      	ldr	r3, [r7, #76]
    e110:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e114:	64fb      	str	r3, [r7, #76]
    e116:	6cfa      	ldr	r2, [r7, #76]
    e118:	6cbb      	ldr	r3, [r7, #72]
    e11a:	429a      	cmp	r2, r3
    e11c:	dbec      	blt.n	e0f8 <_ZN16ServosNumeriques15setMaximumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    e11e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e122:	46bd      	mov	sp, r7
    e124:	bd80      	pop	{r7, pc}
    e126:	46c0      	nop			(mov r8, r8)

0000e128 <_ZN16ServosNumeriques15setMinimumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMinimumAngle(uint16_t angle, uint8_t servo)
    e128:	b580      	push	{r7, lr}
    e12a:	b094      	sub	sp, #80
    e12c:	af00      	add	r7, sp, #0
    e12e:	4603      	mov	r3, r0
    e130:	460a      	mov	r2, r1
    e132:	80fb      	strh	r3, [r7, #6]
    e134:	4613      	mov	r3, r2
    e136:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    e138:	f897 c005 	ldrb.w	ip, [r7, #5]
    e13c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e140:	88fa      	ldrh	r2, [r7, #6]
    e142:	4618      	mov	r0, r3
    e144:	4611      	mov	r1, r2
    e146:	4662      	mov	r2, ip
    e148:	f7fc ff7c 	bl	b044 <_ZN4AX1229getAngleLowerLimitInstructionEPiti>
    e14c:	4603      	mov	r3, r0
    e14e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e150:	f04f 0300 	mov.w	r3, #0	; 0x0
    e154:	64fb      	str	r3, [r7, #76]
    e156:	e00e      	b.n	e176 <_ZN16ServosNumeriques15setMinimumAngleEth+0x4e>
        sendData(packet[i]);
    e158:	6cfb      	ldr	r3, [r7, #76]
    e15a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e15e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e162:	4413      	add	r3, r2
    e164:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e168:	4618      	mov	r0, r3
    e16a:	f7ff feff 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>

void setMinimumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    e16e:	6cfb      	ldr	r3, [r7, #76]
    e170:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e174:	64fb      	str	r3, [r7, #76]
    e176:	6cfa      	ldr	r2, [r7, #76]
    e178:	6cbb      	ldr	r3, [r7, #72]
    e17a:	429a      	cmp	r2, r3
    e17c:	dbec      	blt.n	e158 <_ZN16ServosNumeriques15setMinimumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    e17e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e182:	46bd      	mov	sp, r7
    e184:	bd80      	pop	{r7, pc}
    e186:	46c0      	nop			(mov r8, r8)

0000e188 <_ZN16ServosNumeriques11setLedStateEhh>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setLedState(uint8_t ledOn, uint8_t servo)
    e188:	b580      	push	{r7, lr}
    e18a:	b094      	sub	sp, #80
    e18c:	af00      	add	r7, sp, #0
    e18e:	4603      	mov	r3, r0
    e190:	460a      	mov	r2, r1
    e192:	71fb      	strb	r3, [r7, #7]
    e194:	4613      	mov	r3, r2
    e196:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    e198:	f897 c006 	ldrb.w	ip, [r7, #6]
    e19c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e1a0:	79fa      	ldrb	r2, [r7, #7]
    e1a2:	4618      	mov	r0, r3
    e1a4:	4611      	mov	r1, r2
    e1a6:	4662      	mov	r2, ip
    e1a8:	f7fc fe6e 	bl	ae88 <_ZN4AX1217getLedInstructionEPihi>
    e1ac:	4603      	mov	r3, r0
    e1ae:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e1b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    e1b4:	64fb      	str	r3, [r7, #76]
    e1b6:	e00e      	b.n	e1d6 <_ZN16ServosNumeriques11setLedStateEhh+0x4e>
        sendData(packet[i]);
    e1b8:	6cfb      	ldr	r3, [r7, #76]
    e1ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e1be:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e1c2:	4413      	add	r3, r2
    e1c4:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e1c8:	4618      	mov	r0, r3
    e1ca:	f7ff fecf 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>

void setLedState(uint8_t ledOn, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    for (int i = 0; i < packetLength; i++) {
    e1ce:	6cfb      	ldr	r3, [r7, #76]
    e1d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e1d4:	64fb      	str	r3, [r7, #76]
    e1d6:	6cfa      	ldr	r2, [r7, #76]
    e1d8:	6cbb      	ldr	r3, [r7, #72]
    e1da:	429a      	cmp	r2, r3
    e1dc:	dbec      	blt.n	e1b8 <_ZN16ServosNumeriques11setLedStateEhh+0x30>
        sendData(packet[i]);
    }
}
    e1de:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e1e2:	46bd      	mov	sp, r7
    e1e4:	bd80      	pop	{r7, pc}
    e1e6:	46c0      	nop			(mov r8, r8)

0000e1e8 <_ZN16ServosNumeriques11moveAtSpeedEth>:
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
    e1e8:	b580      	push	{r7, lr}
    e1ea:	b094      	sub	sp, #80
    e1ec:	af00      	add	r7, sp, #0
    e1ee:	4603      	mov	r3, r0
    e1f0:	460a      	mov	r2, r1
    e1f2:	80fb      	strh	r3, [r7, #6]
    e1f4:	4613      	mov	r3, r2
    e1f6:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    e1f8:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e1fc:	88fa      	ldrh	r2, [r7, #6]
    e1fe:	f897 c005 	ldrb.w	ip, [r7, #5]
    e202:	4618      	mov	r0, r3
    e204:	4611      	mov	r1, r2
    e206:	4662      	mov	r2, ip
    e208:	f7fc ff56 	bl	b0b8 <_ZN4AX1223getMoveSpeedInstructionEPith>
    e20c:	4603      	mov	r3, r0
    e20e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e210:	f04f 0300 	mov.w	r3, #0	; 0x0
    e214:	64fb      	str	r3, [r7, #76]
    e216:	e00e      	b.n	e236 <_ZN16ServosNumeriques11moveAtSpeedEth+0x4e>
        sendData(packet[i]);
    e218:	6cfb      	ldr	r3, [r7, #76]
    e21a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e21e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e222:	4413      	add	r3, r2
    e224:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e228:	4618      	mov	r0, r3
    e22a:	f7ff fe9f 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    e22e:	6cfb      	ldr	r3, [r7, #76]
    e230:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e234:	64fb      	str	r3, [r7, #76]
    e236:	6cfa      	ldr	r2, [r7, #76]
    e238:	6cbb      	ldr	r3, [r7, #72]
    e23a:	429a      	cmp	r2, r3
    e23c:	dbec      	blt.n	e218 <_ZN16ServosNumeriques11moveAtSpeedEth+0x30>
        sendData(packet[i]);
    }
}
    e23e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e242:	46bd      	mov	sp, r7
    e244:	bd80      	pop	{r7, pc}
    e246:	46c0      	nop			(mov r8, r8)

0000e248 <_ZN16ServosNumeriques6moveToEth>:
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveTo(uint16_t position, uint8_t servo)
    e248:	b580      	push	{r7, lr}
    e24a:	b094      	sub	sp, #80
    e24c:	af00      	add	r7, sp, #0
    e24e:	4603      	mov	r3, r0
    e250:	460a      	mov	r2, r1
    e252:	80fb      	strh	r3, [r7, #6]
    e254:	4613      	mov	r3, r2
    e256:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    e258:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e25c:	88fa      	ldrh	r2, [r7, #6]
    e25e:	f897 c005 	ldrb.w	ip, [r7, #5]
    e262:	4618      	mov	r0, r3
    e264:	4611      	mov	r1, r2
    e266:	4662      	mov	r2, ip
    e268:	f7fc ff62 	bl	b130 <_ZN4AX1220getMoveToInstructionEPith>
    e26c:	4603      	mov	r3, r0
    e26e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e270:	f04f 0300 	mov.w	r3, #0	; 0x0
    e274:	64fb      	str	r3, [r7, #76]
    e276:	e00e      	b.n	e296 <_ZN16ServosNumeriques6moveToEth+0x4e>
        sendData(packet[i]);
    e278:	6cfb      	ldr	r3, [r7, #76]
    e27a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e27e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e282:	4413      	add	r3, r2
    e284:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e288:	4618      	mov	r0, r3
    e28a:	f7ff fe6f 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>
}
void moveTo(uint16_t position, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
    e28e:	6cfb      	ldr	r3, [r7, #76]
    e290:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e294:	64fb      	str	r3, [r7, #76]
    e296:	6cfa      	ldr	r2, [r7, #76]
    e298:	6cbb      	ldr	r3, [r7, #72]
    e29a:	429a      	cmp	r2, r3
    e29c:	dbec      	blt.n	e278 <_ZN16ServosNumeriques6moveToEth+0x30>
        sendData(packet[i]);
    }
}
    e29e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e2a2:	46bd      	mov	sp, r7
    e2a4:	bd80      	pop	{r7, pc}
    e2a6:	46c0      	nop			(mov r8, r8)

0000e2a8 <_ZN16ServosNumeriques13moveToAtSpeedEtth>:
        }
    }
    return 1;
}

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
    e2a8:	b580      	push	{r7, lr}
    e2aa:	b094      	sub	sp, #80
    e2ac:	af00      	add	r7, sp, #0
    e2ae:	4603      	mov	r3, r0
    e2b0:	80fb      	strh	r3, [r7, #6]
    e2b2:	460b      	mov	r3, r1
    e2b4:	80bb      	strh	r3, [r7, #4]
    e2b6:	4613      	mov	r3, r2
    e2b8:	70fb      	strb	r3, [r7, #3]
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    e2ba:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e2be:	88fa      	ldrh	r2, [r7, #6]
    e2c0:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    e2c4:	f897 e003 	ldrb.w	lr, [r7, #3]
    e2c8:	4618      	mov	r0, r3
    e2ca:	4611      	mov	r1, r2
    e2cc:	4662      	mov	r2, ip
    e2ce:	4673      	mov	r3, lr
    e2d0:	f7fc ff6a 	bl	b1a8 <_ZN4AX1218getMoveInstructionEPitth>
    e2d4:	4603      	mov	r3, r0
    e2d6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e2d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e2dc:	64fb      	str	r3, [r7, #76]
    e2de:	e00e      	b.n	e2fe <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x56>
        sendData(packet[i]);
    e2e0:	6cfb      	ldr	r3, [r7, #76]
    e2e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e2e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e2ea:	4413      	add	r3, r2
    e2ec:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e2f0:	4618      	mov	r0, r3
    e2f2:	f7ff fe3b 	bl	df6c <_ZN16ServosNumeriques8sendDataEi>

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    e2f6:	6cfb      	ldr	r3, [r7, #76]
    e2f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e2fc:	64fb      	str	r3, [r7, #76]
    e2fe:	6cfa      	ldr	r2, [r7, #76]
    e300:	6cbb      	ldr	r3, [r7, #72]
    e302:	429a      	cmp	r2, r3
    e304:	dbec      	blt.n	e2e0 <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x38>
        sendData(packet[i]);
    }
}
    e306:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e30a:	46bd      	mov	sp, r7
    e30c:	bd80      	pop	{r7, pc}
    e30e:	46c0      	nop			(mov r8, r8)

0000e310 <_Z25ServosNumeriques_sendDatai>:
#include "interfaceServosNumeriques.h"
//#include "stm32f4xx_usart.h"

void ServosNumeriques_sendData(int data)
    e310:	b580      	push	{r7, lr}
    e312:	b082      	sub	sp, #8
    e314:	af00      	add	r7, sp, #0
    e316:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    e318:	480b      	ldr	r0, [pc, #44]	(e348 <_Z25ServosNumeriques_sendDatai+0x38>)
    e31a:	f04f 0180 	mov.w	r1, #128	; 0x80
    e31e:	f7f6 fd25 	bl	4d6c <USART_GetFlagStatus>
    e322:	4603      	mov	r3, r0
    e324:	2b00      	cmp	r3, #0
    e326:	bf14      	ite	ne
    e328:	2300      	movne	r3, #0
    e32a:	2301      	moveq	r3, #1
    e32c:	b2db      	uxtb	r3, r3
    e32e:	2b00      	cmp	r3, #0
    e330:	d1f2      	bne.n	e318 <_Z25ServosNumeriques_sendDatai+0x8>
    USART_SendData(USART3, (u16) data);
    e332:	687b      	ldr	r3, [r7, #4]
    e334:	b29b      	uxth	r3, r3
    e336:	4804      	ldr	r0, [pc, #16]	(e348 <_Z25ServosNumeriques_sendDatai+0x38>)
    e338:	4619      	mov	r1, r3
    e33a:	f7f6 fbe3 	bl	4b04 <USART_SendData>
}
    e33e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e342:	46bd      	mov	sp, r7
    e344:	bd80      	pop	{r7, pc}
    e346:	46c0      	nop			(mov r8, r8)
    e348:	40004800 	.word	0x40004800

0000e34c <_ZN16ServosNumeriques11receiveModeEv>:
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
void receiveMode()
    e34c:	b580      	push	{r7, lr}
    e34e:	af00      	add	r7, sp, #0
{
	// on veut recevoir des paquets, on met le bit d'envoi à 0
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_RESET);
    e350:	4804      	ldr	r0, [pc, #16]	(e364 <_ZN16ServosNumeriques11receiveModeEv+0x18>)
    e352:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e356:	f04f 0200 	mov.w	r2, #0	; 0x0
    e35a:	f7f3 fb17 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e35e:	46bd      	mov	sp, r7
    e360:	bd80      	pop	{r7, pc}
    e362:	46c0      	nop			(mov r8, r8)
    e364:	40011400 	.word	0x40011400

0000e368 <_ZN16ServosNumeriques8sendModeEv>:
	USART_Init(USART3, &USART_InitStruct);
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
}

void sendMode()
    e368:	b580      	push	{r7, lr}
    e36a:	af00      	add	r7, sp, #0
{
	// on veut envoyer des paquets, on met le bit d'envoi à 1
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
    e36c:	4804      	ldr	r0, [pc, #16]	(e380 <_ZN16ServosNumeriques8sendModeEv+0x18>)
    e36e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e372:	f04f 0201 	mov.w	r2, #1	; 0x1
    e376:	f7f3 fb09 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e37a:	46bd      	mov	sp, r7
    e37c:	bd80      	pop	{r7, pc}
    e37e:	46c0      	nop			(mov r8, r8)
    e380:	40011400 	.word	0x40011400

0000e384 <_ZN16ServosNumeriques8initUARTEi>:
#endif


}

void initUART(int baudRate)
    e384:	b580      	push	{r7, lr}
    e386:	b086      	sub	sp, #24
    e388:	af00      	add	r7, sp, #0
    e38a:	6078      	str	r0, [r7, #4]
{
    USART_InitTypeDef USART_InitStruct;
	// Protocole ax12 : Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)
 	/* Initialisation des caracteristiques USART_InitStruct */
 	USART_InitStruct.USART_BaudRate = baudRate;
    e38c:	687b      	ldr	r3, [r7, #4]
    e38e:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
    e390:	f04f 0300 	mov.w	r3, #0	; 0x0
    e394:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
    e396:	f04f 0300 	mov.w	r3, #0	; 0x0
    e39a:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
    e39c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e3a0:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    e3a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    e3a6:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    e3a8:	f04f 030c 	mov.w	r3, #12	; 0xc
    e3ac:	827b      	strh	r3, [r7, #18]

	/* On configure et on lance */
	USART_Init(USART3, &USART_InitStruct);
    e3ae:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e3b2:	4806      	ldr	r0, [pc, #24]	(e3cc <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e3b4:	4619      	mov	r1, r3
    e3b6:	f7f6 f933 	bl	4620 <USART_Init>
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
    e3ba:	4804      	ldr	r0, [pc, #16]	(e3cc <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e3bc:	f04f 0101 	mov.w	r1, #1	; 0x1
    e3c0:	f7f6 fa4e 	bl	4860 <USART_Cmd>
}
    e3c4:	f107 0718 	add.w	r7, r7, #24	; 0x18
    e3c8:	46bd      	mov	sp, r7
    e3ca:	bd80      	pop	{r7, pc}
    e3cc:	40004800 	.word	0x40004800

0000e3d0 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>:
}

namespace ServosNumeriques
{

void initClocksAndPortsGPIO()
    e3d0:	b580      	push	{r7, lr}
    e3d2:	b082      	sub	sp, #8
    e3d4:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    GPIO_Init(GPIOB, &GPIO_InitStructure);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    // bus APB1 : allow usart 3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    e3d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e3da:	f04f 0101 	mov.w	r1, #1	; 0x1
    e3de:	f7f4 f855 	bl	248c <RCC_APB1PeriphClockCmd>

    // on remap l'usart3 pour que le stm soit bien configuré sur les ports 8 9 et 10 du GPIOD
    GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
    e3e2:	481b      	ldr	r0, [pc, #108]	(e450 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x80>)
    e3e4:	f04f 0101 	mov.w	r1, #1	; 0x1
    e3e8:	f7f3 fb52 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
 	// port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    e3ec:	f44f 7380 	mov.w	r3, #256	; 0x100
    e3f0:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e3f2:	f04f 0318 	mov.w	r3, #24	; 0x18
    e3f6:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e3f8:	f04f 0303 	mov.w	r3, #3	; 0x3
    e3fc:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e3fe:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e402:	4814      	ldr	r0, [pc, #80]	(e454 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e404:	4619      	mov	r1, r3
    e406:	f7f3 f953 	bl	16b0 <GPIO_Init>

 	// port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    e40a:	f44f 7300 	mov.w	r3, #512	; 0x200
    e40e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    e410:	f04f 0304 	mov.w	r3, #4	; 0x4
    e414:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e416:	f04f 0303 	mov.w	r3, #3	; 0x3
    e41a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e41c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e420:	480c      	ldr	r0, [pc, #48]	(e454 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e422:	4619      	mov	r1, r3
    e424:	f7f3 f944 	bl	16b0 <GPIO_Init>

 	// port D pin 10 : la direction (TX/RX)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    e428:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e42c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    e42e:	f04f 0310 	mov.w	r3, #16	; 0x10
    e432:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    e434:	f04f 0302 	mov.w	r3, #2	; 0x2
    e438:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e43a:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e43e:	4805      	ldr	r0, [pc, #20]	(e454 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e440:	4619      	mov	r1, r3
    e442:	f7f3 f935 	bl	16b0 <GPIO_Init>
#endif


}
    e446:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e44a:	46bd      	mov	sp, r7
    e44c:	bd80      	pop	{r7, pc}
    e44e:	46c0      	nop			(mov r8, r8)
    e450:	00140030 	.word	0x00140030
    e454:	40011400 	.word	0x40011400

0000e458 <_Z6isBluev>:


#define NVIC_CCR ((volatile unsigned long *)(0xE000ED14))

// Dit si on est du coté bleu
bool isBlue() // = ROUGE
    e458:	b580      	push	{r7, lr}
    e45a:	af00      	add	r7, sp, #0
{
#ifdef STM32F40_41xxx // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    return GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_4) == Bit_RESET;
    e45c:	4806      	ldr	r0, [pc, #24]	(e478 <_Z6isBluev+0x20>)
    e45e:	f04f 0110 	mov.w	r1, #16	; 0x10
    e462:	f7f3 fa1f 	bl	18a4 <GPIO_ReadInputDataBit>
    e466:	4603      	mov	r3, r0
    e468:	2b00      	cmp	r3, #0
    e46a:	bf14      	ite	ne
    e46c:	2300      	movne	r3, #0
    e46e:	2301      	moveq	r3, #1
    e470:	b2db      	uxtb	r3, r3
#endif
#ifdef STM32F10X_MD // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
}
    e472:	4618      	mov	r0, r3
    e474:	46bd      	mov	sp, r7
    e476:	bd80      	pop	{r7, pc}
    e478:	40011800 	.word	0x40011800

0000e47c <main>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}
*/

int main()
    e47c:	b580      	push	{r7, lr}
    e47e:	b0a2      	sub	sp, #136
    e480:	af06      	add	r7, sp, #24
{
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        *NVIC_CCR = *NVIC_CCR | 0x200; // Set STKALIGN in NVIC
    e482:	4a7f      	ldr	r2, [pc, #508]	(e680 <main+0x204>)
    e484:	4b7e      	ldr	r3, [pc, #504]	(e680 <main+0x204>)
    e486:	681b      	ldr	r3, [r3, #0]
    e488:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e48c:	6013      	str	r3, [r2, #0]
    #else
        SystemInit(); // Appelée implicitement ?
    #endif

    // On initialise les horloges
    Clk_Init();
    e48e:	f7ff fc41 	bl	dd14 <_Z8Clk_Initv>

    // Définit quelques horloges supplémentaires
    initAutresHorloges();
    e492:	f7ff fc23 	bl	dcdc <_Z18initAutresHorlogesv>

    // Appel de la fonction qui permet d'initialiser tous les PINS
    initialisationDesPIN();
    e496:	f7ff fb7f 	bl	db98 <_Z20initialisationDesPINv>

    Remote::log("Init");
    e49a:	4b7a      	ldr	r3, [pc, #488]	(e684 <main+0x208>)
    e49c:	4618      	mov	r0, r3
    e49e:	f7fe fcc3 	bl	ce28 <_ZN6Remote3logEPc>
    //Debug::testContainer();
    //Debug::testBrasLateraux();
    //Debug::testADC_DMASampleF4();
    //Debug::testSharps();
#endif
    allumerLED();
    e4a2:	f7fd fef9 	bl	c298 <_Z10allumerLEDv>
    eteindreLED();
    e4a6:	f7fd fe9b 	bl	c1e0 <_Z11eteindreLEDv>
    allumerLED2();
    e4aa:	f7fd feed 	bl	c288 <_Z11allumerLED2v>
    eteindreLED2();
    e4ae:	f7fd fe8f 	bl	c1d0 <_Z12eteindreLED2v>
    allumerLED();
    e4b2:	f7fd fef1 	bl	c298 <_Z10allumerLEDv>
//    UartDebug::sendData(42);
//    UartDebug::sendData(50);
//    UartDebug::sendData(51);
//    UartDebug::sendData(52);

    ServosNumeriques::initClocksAndPortsGPIO();
    e4b6:	f7ff ff8b 	bl	e3d0 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>
    ServosNumeriques::initUART(19231);
    e4ba:	f644 301f 	movw	r0, #19231	; 0x4b1f
    e4be:	f7ff ff61 	bl	e384 <_ZN16ServosNumeriques8initUARTEi>
    ServosNumeriques::sendMode();
    e4c2:	f7ff ff51 	bl	e368 <_ZN16ServosNumeriques8sendModeEv>
    #endif
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        Tirette tirette(GPIOA, GPIO_Pin_10);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        Tirette tirette(GPIOE, GPIO_Pin_5);
    e4c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e4ca:	4618      	mov	r0, r3
    e4cc:	496e      	ldr	r1, [pc, #440]	(e688 <main+0x20c>)
    e4ce:	f04f 0220 	mov.w	r2, #32	; 0x20
    e4d2:	f7ff f94b 	bl	d76c <_ZN7TiretteC1EP12GPIO_TypeDeft>
    // Initialisation des actionneurs 1
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405
        BrasLateral::initBrasLateraux();
        Container::getSingleton();
    #elif defined(STM32F10X_CL) // H107
        BrasLateral::initBrasLateraux();
    e4d6:	f7f7 f853 	bl	5580 <_ZN11BrasLateral16initBrasLaterauxEv>
#endif

//    tirette.attendreRemise();
//    tirette.attendreEnlevee();

    Remote::getSingleton();
    e4da:	f7fe fc81 	bl	cde0 <_ZN6Remote12getSingletonEv>
    // Initialisation des actionneurs 2
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405

    #elif defined(STM32F10X_CL) // H107
//        Brak* bracquemart = Brak::getSingleton();
        Sensors* sensors = Sensors::getSingleton();
    e4de:	f7f8 fcfb 	bl	6ed8 <_ZN7Sensors12getSingletonEv>
    e4e2:	4603      	mov	r3, r0
    e4e4:	65bb      	str	r3, [r7, #88]
        ServosNumeriques::setLedState(1, 12);
    e4e6:	f04f 0001 	mov.w	r0, #1	; 0x1
    e4ea:	f04f 010c 	mov.w	r1, #12	; 0xc
    e4ee:	f7ff fe4b 	bl	e188 <_ZN16ServosNumeriques11setLedStateEhh>
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOB, GPIO_Pin_6, GPIOB, GPIO_Pin_7);
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM1, GPIOA, GPIO_Pin_8, GPIOA, GPIO_Pin_9);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOD, GPIO_Pin_12, GPIOD, GPIO_Pin_13);
    e4f2:	f04f 0004 	mov.w	r0, #4	; 0x4
    e4f6:	f000 f8d7 	bl	e6a8 <_Znwj>
    e4fa:	4603      	mov	r3, r0
    e4fc:	607b      	str	r3, [r7, #4]
    e4fe:	687b      	ldr	r3, [r7, #4]
    e500:	2b00      	cmp	r3, #0
    e502:	d017      	beq.n	e534 <main+0xb8>
    e504:	4b61      	ldr	r3, [pc, #388]	(e68c <main+0x210>)
    e506:	9300      	str	r3, [sp, #0]
    e508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e50c:	9301      	str	r3, [sp, #4]
    e50e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e512:	9302      	str	r3, [sp, #8]
    e514:	f04f 0300 	mov.w	r3, #0	; 0x0
    e518:	9303      	str	r3, [sp, #12]
    e51a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e51e:	9304      	str	r3, [sp, #16]
    e520:	6878      	ldr	r0, [r7, #4]
    e522:	495b      	ldr	r1, [pc, #364]	(e690 <main+0x214>)
    e524:	4a59      	ldr	r2, [pc, #356]	(e68c <main+0x210>)
    e526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e52a:	f7fe fa67 	bl	c9fc <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e52e:	687b      	ldr	r3, [r7, #4]
    e530:	60bb      	str	r3, [r7, #8]
    e532:	e001      	b.n	e538 <main+0xbc>
    e534:	687b      	ldr	r3, [r7, #4]
    e536:	60bb      	str	r3, [r7, #8]
    e538:	68bb      	ldr	r3, [r7, #8]
    e53a:	65fb      	str	r3, [r7, #92]
        GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);
    e53c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    e540:	f04f 0101 	mov.w	r1, #1	; 0x1
    e544:	f7f3 faa4 	bl	1a90 <GPIO_PinRemapConfig>
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    e548:	f04f 0004 	mov.w	r0, #4	; 0x4
    e54c:	f000 f8ac 	bl	e6a8 <_Znwj>
    e550:	4603      	mov	r3, r0
    e552:	60fb      	str	r3, [r7, #12]
    e554:	68fb      	ldr	r3, [r7, #12]
    e556:	2b00      	cmp	r3, #0
    e558:	d017      	beq.n	e58a <main+0x10e>
    e55a:	4b4e      	ldr	r3, [pc, #312]	(e694 <main+0x218>)
    e55c:	9300      	str	r3, [sp, #0]
    e55e:	f04f 0380 	mov.w	r3, #128	; 0x80
    e562:	9301      	str	r3, [sp, #4]
    e564:	f04f 0300 	mov.w	r3, #0	; 0x0
    e568:	9302      	str	r3, [sp, #8]
    e56a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e56e:	9303      	str	r3, [sp, #12]
    e570:	f04f 0300 	mov.w	r3, #0	; 0x0
    e574:	9304      	str	r3, [sp, #16]
    e576:	68f8      	ldr	r0, [r7, #12]
    e578:	4947      	ldr	r1, [pc, #284]	(e698 <main+0x21c>)
    e57a:	4a46      	ldr	r2, [pc, #280]	(e694 <main+0x218>)
    e57c:	f04f 0340 	mov.w	r3, #64	; 0x40
    e580:	f7fe fa3c 	bl	c9fc <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e584:	68fb      	ldr	r3, [r7, #12]
    e586:	613b      	str	r3, [r7, #16]
    e588:	e001      	b.n	e58e <main+0x112>
    e58a:	68fb      	ldr	r3, [r7, #12]
    e58c:	613b      	str	r3, [r7, #16]
    e58e:	693b      	ldr	r3, [r7, #16]
    e590:	663b      	str	r3, [r7, #96]


// Pour la v1 :
//    QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_1);
 //   QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    Odometrie* odometrie = new Odometrie(rcg, rcd);
    e592:	f04f 0078 	mov.w	r0, #120	; 0x78
    e596:	f000 f887 	bl	e6a8 <_Znwj>
    e59a:	4603      	mov	r3, r0
    e59c:	617b      	str	r3, [r7, #20]
    e59e:	697b      	ldr	r3, [r7, #20]
    e5a0:	2b00      	cmp	r3, #0
    e5a2:	d007      	beq.n	e5b4 <main+0x138>
    e5a4:	6978      	ldr	r0, [r7, #20]
    e5a6:	6e39      	ldr	r1, [r7, #96]
    e5a8:	6dfa      	ldr	r2, [r7, #92]
    e5aa:	f7fb fdfd 	bl	a1a8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>
    e5ae:	697b      	ldr	r3, [r7, #20]
    e5b0:	61bb      	str	r3, [r7, #24]
    e5b2:	e001      	b.n	e5b8 <main+0x13c>
    e5b4:	697b      	ldr	r3, [r7, #20]
    e5b6:	61bb      	str	r3, [r7, #24]
    e5b8:	69bb      	ldr	r3, [r7, #24]
    e5ba:	667b      	str	r3, [r7, #100]
    Position pos(200,1850, isBlue());//1500, isBlue());
    e5bc:	f7ff ff4c 	bl	e458 <_Z6isBluev>
    e5c0:	4603      	mov	r3, r0
    e5c2:	469c      	mov	ip, r3
    e5c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    e5c8:	4618      	mov	r0, r3
    e5ca:	4934      	ldr	r1, [pc, #208]	(e69c <main+0x220>)
    e5cc:	4a34      	ldr	r2, [pc, #208]	(e6a0 <main+0x224>)
    e5ce:	4663      	mov	r3, ip
    e5d0:	f000 f9d0 	bl	e974 <_ZN8PositionC1Effb>
    PositionPlusAngle posPlusAngle(pos,-M_PI/2);
    e5d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e5d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    e5dc:	4618      	mov	r0, r3
    e5de:	4611      	mov	r1, r2
    e5e0:	4a30      	ldr	r2, [pc, #192]	(e6a4 <main+0x228>)
    e5e2:	f000 fbbb 	bl	ed5c <_ZN17PositionPlusAngleC1ERK8Positionf>
    if (!isBlue())
    e5e6:	f7ff ff37 	bl	e458 <_Z6isBluev>
    e5ea:	4603      	mov	r3, r0
    e5ec:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e5f0:	b2db      	uxtb	r3, r3
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	d010      	beq.n	e618 <main+0x19c>
        posPlusAngle = PositionPlusAngle(pos,-M_PI/2);
    e5f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    e5fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    e5fe:	4618      	mov	r0, r3
    e600:	4611      	mov	r1, r2
    e602:	4a28      	ldr	r2, [pc, #160]	(e6a4 <main+0x228>)
    e604:	f000 fbaa 	bl	ed5c <_ZN17PositionPlusAngleC1ERK8Positionf>
    e608:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e60c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    e610:	4618      	mov	r0, r3
    e612:	4611      	mov	r1, r2
    e614:	f000 fc42 	bl	ee9c <_ZN17PositionPlusAngleaSERKS_>
    odometrie->setPos(posPlusAngle);
    e618:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e61c:	6e78      	ldr	r0, [r7, #100]
    e61e:	4619      	mov	r1, r3
    e620:	f7fb fa82 	bl	9b28 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    StrategieV2* strat = new StrategieV2(isBlue());
    e624:	f7ff ff18 	bl	e458 <_Z6isBluev>
    e628:	4603      	mov	r3, r0
    e62a:	61fb      	str	r3, [r7, #28]
    e62c:	f04f 0004 	mov.w	r0, #4	; 0x4
    e630:	f000 f83a 	bl	e6a8 <_Znwj>
    e634:	4603      	mov	r3, r0
    e636:	623b      	str	r3, [r7, #32]
    e638:	6a3b      	ldr	r3, [r7, #32]
    e63a:	2b00      	cmp	r3, #0
    e63c:	d006      	beq.n	e64c <main+0x1d0>
    e63e:	6a38      	ldr	r0, [r7, #32]
    e640:	69f9      	ldr	r1, [r7, #28]
    e642:	f007 ffcb 	bl	165dc <_ZN11StrategieV2C1Eb>
    e646:	6a3b      	ldr	r3, [r7, #32]
    e648:	627b      	str	r3, [r7, #36]
    e64a:	e001      	b.n	e650 <main+0x1d4>
    e64c:	6a3b      	ldr	r3, [r7, #32]
    e64e:	627b      	str	r3, [r7, #36]
    e650:	6a7b      	ldr	r3, [r7, #36]
    e652:	66bb      	str	r3, [r7, #104]
    Asservissement* asserv = new Asservissement(odometrie);
    e654:	f04f 0060 	mov.w	r0, #96	; 0x60
    e658:	f000 f826 	bl	e6a8 <_Znwj>
    e65c:	4603      	mov	r3, r0
    e65e:	62bb      	str	r3, [r7, #40]
    e660:	6abb      	ldr	r3, [r7, #40]
    e662:	2b00      	cmp	r3, #0
    e664:	d006      	beq.n	e674 <main+0x1f8>
    e666:	6ab8      	ldr	r0, [r7, #40]
    e668:	6e79      	ldr	r1, [r7, #100]
    e66a:	f7f9 fa59 	bl	7b20 <_ZN14AsservissementC1EP9Odometrie>
    e66e:	6abb      	ldr	r3, [r7, #40]
    e670:	62fb      	str	r3, [r7, #44]
    e672:	e001      	b.n	e678 <main+0x1fc>
    e674:	6abb      	ldr	r3, [r7, #40]
    e676:	62fb      	str	r3, [r7, #44]
    e678:	6afb      	ldr	r3, [r7, #44]
    e67a:	66fb      	str	r3, [r7, #108]
    e67c:	e7fe      	b.n	e67c <main+0x200>
    e67e:	46c0      	nop			(mov r8, r8)
    e680:	e000ed14 	.word	0xe000ed14
    e684:	00021f40 	.word	0x00021f40
    e688:	40011800 	.word	0x40011800
    e68c:	40011400 	.word	0x40011400
    e690:	40000800 	.word	0x40000800
    e694:	40010800 	.word	0x40010800
    e698:	40000400 	.word	0x40000400
    e69c:	43480000 	.word	0x43480000
    e6a0:	44e74000 	.word	0x44e74000
    e6a4:	bfc90fdb 	.word	0xbfc90fdb

0000e6a8 <_Znwj>:
static Header* nextFreeMemory;
static Header* base = NULL;
static int nbPlace = 0;
static int sizeM = 0;

void * operator new(size_t size) throw()
    e6a8:	b480      	push	{r7}
    e6aa:	b089      	sub	sp, #36
    e6ac:	af00      	add	r7, sp, #0
    e6ae:	6078      	str	r0, [r7, #4]
{
    nbPlace++;
    e6b0:	4b44      	ldr	r3, [pc, #272]	(e7c4 <_Znwj+0x11c>)
    e6b2:	681b      	ldr	r3, [r3, #0]
    e6b4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    e6b8:	4b42      	ldr	r3, [pc, #264]	(e7c4 <_Znwj+0x11c>)
    e6ba:	601a      	str	r2, [r3, #0]
    if (base == NULL)
    e6bc:	4b42      	ldr	r3, [pc, #264]	(e7c8 <_Znwj+0x120>)
    e6be:	681b      	ldr	r3, [r3, #0]
    e6c0:	2b00      	cmp	r3, #0
    e6c2:	d111      	bne.n	e6e8 <_Znwj+0x40>
    {
        base = memory_ptr;
    e6c4:	4b41      	ldr	r3, [pc, #260]	(e7cc <_Znwj+0x124>)
    e6c6:	681a      	ldr	r2, [r3, #0]
    e6c8:	4b3f      	ldr	r3, [pc, #252]	(e7c8 <_Znwj+0x120>)
    e6ca:	601a      	str	r2, [r3, #0]
        base->s.nextFree = memory_ptr;
    e6cc:	4b3e      	ldr	r3, [pc, #248]	(e7c8 <_Znwj+0x120>)
    e6ce:	681a      	ldr	r2, [r3, #0]
    e6d0:	4b3e      	ldr	r3, [pc, #248]	(e7cc <_Znwj+0x124>)
    e6d2:	681b      	ldr	r3, [r3, #0]
    e6d4:	6013      	str	r3, [r2, #0]
        #endif
        #ifdef STM32F10X_MD // stm h103
        base->s.size = 5000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 20kB -> 5000 unit
        #endif
        #ifdef STM32F10X_CL // stm h107
        base->s.size = 16000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 64kB -> 16000 unit
    e6d6:	4b3c      	ldr	r3, [pc, #240]	(e7c8 <_Znwj+0x120>)
    e6d8:	681a      	ldr	r2, [r3, #0]
    e6da:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    e6de:	6053      	str	r3, [r2, #4]
        #endif
        nextFreeMemory = memory_ptr;
    e6e0:	4b3a      	ldr	r3, [pc, #232]	(e7cc <_Znwj+0x124>)
    e6e2:	681a      	ldr	r2, [r3, #0]
    e6e4:	4b3a      	ldr	r3, [pc, #232]	(e7d0 <_Znwj+0x128>)
    e6e6:	601a      	str	r2, [r3, #0]

    }
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    e6e8:	687b      	ldr	r3, [r7, #4]
    e6ea:	f103 0307 	add.w	r3, r3, #7	; 0x7
    e6ee:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    e6f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e6f6:	60fb      	str	r3, [r7, #12]
    sizeM += nunit;
    e6f8:	4b36      	ldr	r3, [pc, #216]	(e7d4 <_Znwj+0x12c>)
    e6fa:	681b      	ldr	r3, [r3, #0]
    e6fc:	461a      	mov	r2, r3
    e6fe:	68fb      	ldr	r3, [r7, #12]
    e700:	4413      	add	r3, r2
    e702:	461a      	mov	r2, r3
    e704:	4b33      	ldr	r3, [pc, #204]	(e7d4 <_Znwj+0x12c>)
    e706:	601a      	str	r2, [r3, #0]
    Header *p = nextFreeMemory;
    e708:	4b31      	ldr	r3, [pc, #196]	(e7d0 <_Znwj+0x128>)
    e70a:	681b      	ldr	r3, [r3, #0]
    e70c:	613b      	str	r3, [r7, #16]
    Header  *oldP = p;
    e70e:	693b      	ldr	r3, [r7, #16]
    e710:	617b      	str	r3, [r7, #20]
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    e712:	4b2f      	ldr	r3, [pc, #188]	(e7d0 <_Znwj+0x128>)
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	61bb      	str	r3, [r7, #24]
    {
        if (nunit <= ip->s.size )
    e718:	69bb      	ldr	r3, [r7, #24]
    e71a:	685a      	ldr	r2, [r3, #4]
    e71c:	68fb      	ldr	r3, [r7, #12]
    e71e:	429a      	cmp	r2, r3
    e720:	d33a      	bcc.n	e798 <_Znwj+0xf0>
        {
            if (nunit == ip->s.size)
    e722:	69bb      	ldr	r3, [r7, #24]
    e724:	685a      	ldr	r2, [r3, #4]
    e726:	68fb      	ldr	r3, [r7, #12]
    e728:	429a      	cmp	r2, r3
    e72a:	d10e      	bne.n	e74a <_Znwj+0xa2>
            {
                if (ip->s.nextFree != ip)
    e72c:	69bb      	ldr	r3, [r7, #24]
    e72e:	681a      	ldr	r2, [r3, #0]
    e730:	69bb      	ldr	r3, [r7, #24]
    e732:	429a      	cmp	r2, r3
    e734:	d004      	beq.n	e740 <_Znwj+0x98>
                {
                    nextFreeMemory = ip->s.nextFree;
    e736:	69bb      	ldr	r3, [r7, #24]
    e738:	681a      	ldr	r2, [r3, #0]
    e73a:	4b25      	ldr	r3, [pc, #148]	(e7d0 <_Znwj+0x128>)
    e73c:	601a      	str	r2, [r3, #0]
    e73e:	e026      	b.n	e78e <_Znwj+0xe6>
                }
                else
                {
                    nextFreeMemory = NULL;
    e740:	4a23      	ldr	r2, [pc, #140]	(e7d0 <_Znwj+0x128>)
    e742:	f04f 0300 	mov.w	r3, #0	; 0x0
    e746:	6013      	str	r3, [r2, #0]
    e748:	e021      	b.n	e78e <_Znwj+0xe6>
                }
            }
            else
            {
                unsigned oldFreeUnit = p->s.size;
    e74a:	693b      	ldr	r3, [r7, #16]
    e74c:	685b      	ldr	r3, [r3, #4]
    e74e:	61fb      	str	r3, [r7, #28]
                p->s.size = nunit;
    e750:	693a      	ldr	r2, [r7, #16]
    e752:	68fb      	ldr	r3, [r7, #12]
    e754:	6053      	str	r3, [r2, #4]
                oldP = p;
    e756:	693b      	ldr	r3, [r7, #16]
    e758:	617b      	str	r3, [r7, #20]
                p += nunit;
    e75a:	68fb      	ldr	r3, [r7, #12]
    e75c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e760:	693b      	ldr	r3, [r7, #16]
    e762:	4413      	add	r3, r2
    e764:	613b      	str	r3, [r7, #16]
                oldP->s.nextFree = p;
    e766:	697a      	ldr	r2, [r7, #20]
    e768:	693b      	ldr	r3, [r7, #16]
    e76a:	6013      	str	r3, [r2, #0]
                p->s.size = oldFreeUnit - nunit;
    e76c:	69fa      	ldr	r2, [r7, #28]
    e76e:	68fb      	ldr	r3, [r7, #12]
    e770:	ebc3 0202 	rsb	r2, r3, r2
    e774:	693b      	ldr	r3, [r7, #16]
    e776:	605a      	str	r2, [r3, #4]
                p->s.nextFree = p;
    e778:	693a      	ldr	r2, [r7, #16]
    e77a:	693b      	ldr	r3, [r7, #16]
    e77c:	6013      	str	r3, [r2, #0]
                if (ip == nextFreeMemory)
    e77e:	4b14      	ldr	r3, [pc, #80]	(e7d0 <_Znwj+0x128>)
    e780:	681a      	ldr	r2, [r3, #0]
    e782:	69bb      	ldr	r3, [r7, #24]
    e784:	4293      	cmp	r3, r2
    e786:	d102      	bne.n	e78e <_Znwj+0xe6>
                {
                   nextFreeMemory = p;
    e788:	4a11      	ldr	r2, [pc, #68]	(e7d0 <_Znwj+0x128>)
    e78a:	693b      	ldr	r3, [r7, #16]
    e78c:	6013      	str	r3, [r2, #0]
                }
            }

            return ip+1;
    e78e:	69bb      	ldr	r3, [r7, #24]
    e790:	f103 0308 	add.w	r3, r3, #8	; 0x8
    e794:	603b      	str	r3, [r7, #0]
    e796:	e00d      	b.n	e7b4 <_Znwj+0x10c>
        }
        if (ip==oldP)
    e798:	69ba      	ldr	r2, [r7, #24]
    e79a:	697b      	ldr	r3, [r7, #20]
    e79c:	429a      	cmp	r2, r3
    e79e:	d103      	bne.n	e7a8 <_Znwj+0x100>
        {
            return NULL;
    e7a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    e7a4:	603b      	str	r3, [r7, #0]
    e7a6:	e005      	b.n	e7b4 <_Znwj+0x10c>
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    sizeM += nunit;
    Header *p = nextFreeMemory;
    Header  *oldP = p;
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    e7a8:	69bb      	ldr	r3, [r7, #24]
    e7aa:	613b      	str	r3, [r7, #16]
    e7ac:	69bb      	ldr	r3, [r7, #24]
    e7ae:	681b      	ldr	r3, [r3, #0]
    e7b0:	61bb      	str	r3, [r7, #24]
    e7b2:	e7b1      	b.n	e718 <_Znwj+0x70>
    e7b4:	683b      	ldr	r3, [r7, #0]
        if (ip==oldP)
        {
            return NULL;
        }
    }
}
    e7b6:	4618      	mov	r0, r3
    e7b8:	f107 0724 	add.w	r7, r7, #36	; 0x24
    e7bc:	46bd      	mov	sp, r7
    e7be:	bc80      	pop	{r7}
    e7c0:	4770      	bx	lr
    e7c2:	46c0      	nop			(mov r8, r8)
    e7c4:	20000590 	.word	0x20000590
    e7c8:	2000059c 	.word	0x2000059c
    e7cc:	2000002c 	.word	0x2000002c
    e7d0:	20000598 	.word	0x20000598
    e7d4:	20000594 	.word	0x20000594

0000e7d8 <_Znaj>:

void * operator new[](size_t size) throw()
    e7d8:	b580      	push	{r7, lr}
    e7da:	b082      	sub	sp, #8
    e7dc:	af00      	add	r7, sp, #0
    e7de:	6078      	str	r0, [r7, #4]
{
  return operator new(size);
    e7e0:	6878      	ldr	r0, [r7, #4]
    e7e2:	f7ff ff61 	bl	e6a8 <_Znwj>
    e7e6:	4603      	mov	r3, r0
}
    e7e8:	4618      	mov	r0, r3
    e7ea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e7ee:	46bd      	mov	sp, r7
    e7f0:	bd80      	pop	{r7, pc}
    e7f2:	46c0      	nop			(mov r8, r8)

0000e7f4 <_ZdlPv>:

void operator delete(void * p)    throw()
    e7f4:	b480      	push	{r7}
    e7f6:	b085      	sub	sp, #20
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	6078      	str	r0, [r7, #4]
{
    nbPlace--;
    e7fc:	4b36      	ldr	r3, [pc, #216]	(e8d8 <_ZdlPv+0xe4>)
    e7fe:	681b      	ldr	r3, [r3, #0]
    e800:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    e804:	4b34      	ldr	r3, [pc, #208]	(e8d8 <_ZdlPv+0xe4>)
    e806:	601a      	str	r2, [r3, #0]
    Header* d = (Header*)p -1;
    e808:	687b      	ldr	r3, [r7, #4]
    e80a:	f1a3 0308 	sub.w	r3, r3, #8	; 0x8
    e80e:	60bb      	str	r3, [r7, #8]
    sizeM -= d->s.size;
    e810:	4b32      	ldr	r3, [pc, #200]	(e8dc <_ZdlPv+0xe8>)
    e812:	681b      	ldr	r3, [r3, #0]
    e814:	461a      	mov	r2, r3
    e816:	68bb      	ldr	r3, [r7, #8]
    e818:	685b      	ldr	r3, [r3, #4]
    e81a:	ebc3 0302 	rsb	r3, r3, r2
    e81e:	461a      	mov	r2, r3
    e820:	4b2e      	ldr	r3, [pc, #184]	(e8dc <_ZdlPv+0xe8>)
    e822:	601a      	str	r2, [r3, #0]
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    e824:	4b2e      	ldr	r3, [pc, #184]	(e8e0 <_ZdlPv+0xec>)
    e826:	681b      	ldr	r3, [r3, #0]
    e828:	60fb      	str	r3, [r7, #12]
    e82a:	e010      	b.n	e84e <_ZdlPv+0x5a>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
    e82c:	68fb      	ldr	r3, [r7, #12]
    e82e:	681a      	ldr	r2, [r3, #0]
    e830:	68fb      	ldr	r3, [r7, #12]
    e832:	429a      	cmp	r2, r3
    e834:	d808      	bhi.n	e848 <_ZdlPv+0x54>
    e836:	68ba      	ldr	r2, [r7, #8]
    e838:	68fb      	ldr	r3, [r7, #12]
    e83a:	429a      	cmp	r2, r3
    e83c:	d810      	bhi.n	e860 <_ZdlPv+0x6c>
    e83e:	68fb      	ldr	r3, [r7, #12]
    e840:	681a      	ldr	r2, [r3, #0]
    e842:	68bb      	ldr	r3, [r7, #8]
    e844:	429a      	cmp	r2, r3
    e846:	d80b      	bhi.n	e860 <_ZdlPv+0x6c>
{
    nbPlace--;
    Header* d = (Header*)p -1;
    sizeM -= d->s.size;
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    e848:	68fb      	ldr	r3, [r7, #12]
    e84a:	681b      	ldr	r3, [r3, #0]
    e84c:	60fb      	str	r3, [r7, #12]
    e84e:	68ba      	ldr	r2, [r7, #8]
    e850:	68fb      	ldr	r3, [r7, #12]
    e852:	429a      	cmp	r2, r3
    e854:	d9ea      	bls.n	e82c <_ZdlPv+0x38>
    e856:	68fb      	ldr	r3, [r7, #12]
    e858:	681a      	ldr	r2, [r3, #0]
    e85a:	68bb      	ldr	r3, [r7, #8]
    e85c:	429a      	cmp	r2, r3
    e85e:	d9e5      	bls.n	e82c <_ZdlPv+0x38>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
        break;
    }

    if ( d + d->s.size == predFree->s.nextFree ) // si le prochain vide est collé au block libéré
    e860:	68bb      	ldr	r3, [r7, #8]
    e862:	685b      	ldr	r3, [r3, #4]
    e864:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e868:	68bb      	ldr	r3, [r7, #8]
    e86a:	441a      	add	r2, r3
    e86c:	68fb      	ldr	r3, [r7, #12]
    e86e:	681b      	ldr	r3, [r3, #0]
    e870:	429a      	cmp	r2, r3
    e872:	d10d      	bne.n	e890 <_ZdlPv+0x9c>
    {
        d->s.size += predFree->s.nextFree->s.size;
    e874:	68bb      	ldr	r3, [r7, #8]
    e876:	685a      	ldr	r2, [r3, #4]
    e878:	68fb      	ldr	r3, [r7, #12]
    e87a:	681b      	ldr	r3, [r3, #0]
    e87c:	685b      	ldr	r3, [r3, #4]
    e87e:	441a      	add	r2, r3
    e880:	68bb      	ldr	r3, [r7, #8]
    e882:	605a      	str	r2, [r3, #4]
        d->s.nextFree = predFree->s.nextFree->s.nextFree;
    e884:	68fb      	ldr	r3, [r7, #12]
    e886:	681b      	ldr	r3, [r3, #0]
    e888:	681a      	ldr	r2, [r3, #0]
    e88a:	68bb      	ldr	r3, [r7, #8]
    e88c:	601a      	str	r2, [r3, #0]
    e88e:	e003      	b.n	e898 <_ZdlPv+0xa4>
    }
    else
    {
        d->s.nextFree = predFree->s.nextFree;
    e890:	68fb      	ldr	r3, [r7, #12]
    e892:	681a      	ldr	r2, [r3, #0]
    e894:	68bb      	ldr	r3, [r7, #8]
    e896:	601a      	str	r2, [r3, #0]
    }
    if (predFree+predFree->s.size == d)
    e898:	68fb      	ldr	r3, [r7, #12]
    e89a:	685b      	ldr	r3, [r3, #4]
    e89c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e8a0:	68fb      	ldr	r3, [r7, #12]
    e8a2:	441a      	add	r2, r3
    e8a4:	68bb      	ldr	r3, [r7, #8]
    e8a6:	429a      	cmp	r2, r3
    e8a8:	d10b      	bne.n	e8c2 <_ZdlPv+0xce>
    {
        predFree->s.nextFree = d->s.nextFree;
    e8aa:	68bb      	ldr	r3, [r7, #8]
    e8ac:	681a      	ldr	r2, [r3, #0]
    e8ae:	68fb      	ldr	r3, [r7, #12]
    e8b0:	601a      	str	r2, [r3, #0]
        predFree->s.size += d->s.size;
    e8b2:	68fb      	ldr	r3, [r7, #12]
    e8b4:	685a      	ldr	r2, [r3, #4]
    e8b6:	68bb      	ldr	r3, [r7, #8]
    e8b8:	685b      	ldr	r3, [r3, #4]
    e8ba:	441a      	add	r2, r3
    e8bc:	68fb      	ldr	r3, [r7, #12]
    e8be:	605a      	str	r2, [r3, #4]
    e8c0:	e002      	b.n	e8c8 <_ZdlPv+0xd4>
    }
    else
    {
        predFree->s.nextFree = d;
    e8c2:	68fa      	ldr	r2, [r7, #12]
    e8c4:	68bb      	ldr	r3, [r7, #8]
    e8c6:	6013      	str	r3, [r2, #0]
    }
    nextFreeMemory = predFree;
    e8c8:	4a05      	ldr	r2, [pc, #20]	(e8e0 <_ZdlPv+0xec>)
    e8ca:	68fb      	ldr	r3, [r7, #12]
    e8cc:	6013      	str	r3, [r2, #0]

  /*  d--; // d est maintenant le Header de la zone mémoire contenant l'objet que l'on delete
    d->s.nextFree = nextFreeMemory; // On indique que la prochaîne mémoire vide sera la première mémoire vide au moment où on a lancé le delete
    nextFreeMemory = d;
    */
}
    e8ce:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e8d2:	46bd      	mov	sp, r7
    e8d4:	bc80      	pop	{r7}
    e8d6:	4770      	bx	lr
    e8d8:	20000590 	.word	0x20000590
    e8dc:	20000594 	.word	0x20000594
    e8e0:	20000598 	.word	0x20000598

0000e8e4 <_ZdaPv>:

void operator delete[](void * p)    throw()
    e8e4:	b580      	push	{r7, lr}
    e8e6:	b082      	sub	sp, #8
    e8e8:	af00      	add	r7, sp, #0
    e8ea:	6078      	str	r0, [r7, #4]
{
    return operator delete(p);
    e8ec:	6878      	ldr	r0, [r7, #4]
    e8ee:	f7ff ff81 	bl	e7f4 <_ZdlPv>
}
    e8f2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e8f6:	46bd      	mov	sp, r7
    e8f8:	bd80      	pop	{r7, pc}
    e8fa:	46c0      	nop			(mov r8, r8)

0000e8fc <_ZN8PositionC2Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    e8fc:	b480      	push	{r7}
    e8fe:	b083      	sub	sp, #12
    e900:	af00      	add	r7, sp, #0
    e902:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    e904:	687a      	ldr	r2, [r7, #4]
    e906:	4b06      	ldr	r3, [pc, #24]	(e920 <_ZN8PositionC2Ev+0x24>)
    e908:	6013      	str	r3, [r2, #0]
    e90a:	687a      	ldr	r2, [r7, #4]
    e90c:	4b04      	ldr	r3, [pc, #16]	(e920 <_ZN8PositionC2Ev+0x24>)
    e90e:	6053      	str	r3, [r2, #4]
{
}
    e910:	687b      	ldr	r3, [r7, #4]
    e912:	4618      	mov	r0, r3
    e914:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e918:	46bd      	mov	sp, r7
    e91a:	bc80      	pop	{r7}
    e91c:	4770      	bx	lr
    e91e:	46c0      	nop			(mov r8, r8)
    e920:	00000000 	.word	0x00000000

0000e924 <_ZN8PositionC1Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    e924:	b480      	push	{r7}
    e926:	b083      	sub	sp, #12
    e928:	af00      	add	r7, sp, #0
    e92a:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    e92c:	687a      	ldr	r2, [r7, #4]
    e92e:	4b06      	ldr	r3, [pc, #24]	(e948 <_ZN8PositionC1Ev+0x24>)
    e930:	6013      	str	r3, [r2, #0]
    e932:	687a      	ldr	r2, [r7, #4]
    e934:	4b04      	ldr	r3, [pc, #16]	(e948 <_ZN8PositionC1Ev+0x24>)
    e936:	6053      	str	r3, [r2, #4]
{
}
    e938:	687b      	ldr	r3, [r7, #4]
    e93a:	4618      	mov	r0, r3
    e93c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e940:	46bd      	mov	sp, r7
    e942:	bc80      	pop	{r7}
    e944:	4770      	bx	lr
    e946:	46c0      	nop			(mov r8, r8)
    e948:	00000000 	.word	0x00000000

0000e94c <_ZN8PositionC2Effb>:

Position::Position(Distance X, Distance Y, bool isBlue)
    e94c:	b480      	push	{r7}
    e94e:	b085      	sub	sp, #20
    e950:	af00      	add	r7, sp, #0
    e952:	60f8      	str	r0, [r7, #12]
    e954:	60b9      	str	r1, [r7, #8]
    e956:	607a      	str	r2, [r7, #4]
    e958:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    e95a:	68fa      	ldr	r2, [r7, #12]
    e95c:	68bb      	ldr	r3, [r7, #8]
    e95e:	6013      	str	r3, [r2, #0]
    e960:	68fa      	ldr	r2, [r7, #12]
    e962:	687b      	ldr	r3, [r7, #4]
    e964:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    e966:	68fb      	ldr	r3, [r7, #12]
    e968:	4618      	mov	r0, r3
    e96a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e96e:	46bd      	mov	sp, r7
    e970:	bc80      	pop	{r7}
    e972:	4770      	bx	lr

0000e974 <_ZN8PositionC1Effb>:
Position::Position()
    : x(0), y(0)
{
}

Position::Position(Distance X, Distance Y, bool isBlue)
    e974:	b480      	push	{r7}
    e976:	b085      	sub	sp, #20
    e978:	af00      	add	r7, sp, #0
    e97a:	60f8      	str	r0, [r7, #12]
    e97c:	60b9      	str	r1, [r7, #8]
    e97e:	607a      	str	r2, [r7, #4]
    e980:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    e982:	68fa      	ldr	r2, [r7, #12]
    e984:	68bb      	ldr	r3, [r7, #8]
    e986:	6013      	str	r3, [r2, #0]
    e988:	68fa      	ldr	r2, [r7, #12]
    e98a:	687b      	ldr	r3, [r7, #4]
    e98c:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    e98e:	68fb      	ldr	r3, [r7, #12]
    e990:	4618      	mov	r0, r3
    e992:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e996:	46bd      	mov	sp, r7
    e998:	bc80      	pop	{r7}
    e99a:	4770      	bx	lr

0000e99c <_ZNK8Position4getXEv>:

Distance Position::getX() const
    e99c:	b480      	push	{r7}
    e99e:	b083      	sub	sp, #12
    e9a0:	af00      	add	r7, sp, #0
    e9a2:	6078      	str	r0, [r7, #4]
{
    return x;
    e9a4:	687b      	ldr	r3, [r7, #4]
    e9a6:	681b      	ldr	r3, [r3, #0]
}
    e9a8:	4618      	mov	r0, r3
    e9aa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e9ae:	46bd      	mov	sp, r7
    e9b0:	bc80      	pop	{r7}
    e9b2:	4770      	bx	lr

0000e9b4 <_ZNK8Position4getYEv>:

Distance Position::getY() const
    e9b4:	b480      	push	{r7}
    e9b6:	b083      	sub	sp, #12
    e9b8:	af00      	add	r7, sp, #0
    e9ba:	6078      	str	r0, [r7, #4]
{
    return y;
    e9bc:	687b      	ldr	r3, [r7, #4]
    e9be:	685b      	ldr	r3, [r3, #4]
}
    e9c0:	4618      	mov	r0, r3
    e9c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e9c6:	46bd      	mov	sp, r7
    e9c8:	bc80      	pop	{r7}
    e9ca:	4770      	bx	lr

0000e9cc <_ZN8Position4setXEf>:

void Position::setX(Distance X)
    e9cc:	b480      	push	{r7}
    e9ce:	b083      	sub	sp, #12
    e9d0:	af00      	add	r7, sp, #0
    e9d2:	6078      	str	r0, [r7, #4]
    e9d4:	6039      	str	r1, [r7, #0]
{
    x = X;
    e9d6:	687a      	ldr	r2, [r7, #4]
    e9d8:	683b      	ldr	r3, [r7, #0]
    e9da:	6013      	str	r3, [r2, #0]
}
    e9dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e9e0:	46bd      	mov	sp, r7
    e9e2:	bc80      	pop	{r7}
    e9e4:	4770      	bx	lr
    e9e6:	46c0      	nop			(mov r8, r8)

0000e9e8 <_ZN8Position4setYEf>:

void Position::setY(Distance Y)
    e9e8:	b480      	push	{r7}
    e9ea:	b083      	sub	sp, #12
    e9ec:	af00      	add	r7, sp, #0
    e9ee:	6078      	str	r0, [r7, #4]
    e9f0:	6039      	str	r1, [r7, #0]
{
    y = Y;
    e9f2:	687a      	ldr	r2, [r7, #4]
    e9f4:	683b      	ldr	r3, [r7, #0]
    e9f6:	6053      	str	r3, [r2, #4]
}
    e9f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e9fc:	46bd      	mov	sp, r7
    e9fe:	bc80      	pop	{r7}
    ea00:	4770      	bx	lr
    ea02:	46c0      	nop			(mov r8, r8)

0000ea04 <_ZNK8PositionplERKS_>:

Position Position::operator+(const Position &position) const
    ea04:	b5b0      	push	{r4, r5, r7, lr}
    ea06:	b084      	sub	sp, #16
    ea08:	af00      	add	r7, sp, #0
    ea0a:	4604      	mov	r4, r0
    ea0c:	6079      	str	r1, [r7, #4]
    ea0e:	603a      	str	r2, [r7, #0]
{
    Position resultat(x+position.x,y+position.y);
    ea10:	687b      	ldr	r3, [r7, #4]
    ea12:	681a      	ldr	r2, [r3, #0]
    ea14:	683b      	ldr	r3, [r7, #0]
    ea16:	681b      	ldr	r3, [r3, #0]
    ea18:	4610      	mov	r0, r2
    ea1a:	4619      	mov	r1, r3
    ea1c:	f00c f922 	bl	1ac64 <__addsf3>
    ea20:	4603      	mov	r3, r0
    ea22:	461d      	mov	r5, r3
    ea24:	687b      	ldr	r3, [r7, #4]
    ea26:	685a      	ldr	r2, [r3, #4]
    ea28:	683b      	ldr	r3, [r7, #0]
    ea2a:	685b      	ldr	r3, [r3, #4]
    ea2c:	4610      	mov	r0, r2
    ea2e:	4619      	mov	r1, r3
    ea30:	f00c f918 	bl	1ac64 <__addsf3>
    ea34:	4603      	mov	r3, r0
    ea36:	4620      	mov	r0, r4
    ea38:	4629      	mov	r1, r5
    ea3a:	461a      	mov	r2, r3
    ea3c:	f04f 0301 	mov.w	r3, #1	; 0x1
    ea40:	f7ff ff98 	bl	e974 <_ZN8PositionC1Effb>
    return resultat;
}
    ea44:	4620      	mov	r0, r4
    ea46:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ea4a:	46bd      	mov	sp, r7
    ea4c:	bdb0      	pop	{r4, r5, r7, pc}
    ea4e:	46c0      	nop			(mov r8, r8)

0000ea50 <_ZNK8PositionmiERKS_>:

Position Position::operator-(const Position &position) const
    ea50:	b5b0      	push	{r4, r5, r7, lr}
    ea52:	b084      	sub	sp, #16
    ea54:	af00      	add	r7, sp, #0
    ea56:	4604      	mov	r4, r0
    ea58:	6079      	str	r1, [r7, #4]
    ea5a:	603a      	str	r2, [r7, #0]
{
    Position resultat(x-position.x,y-position.y);
    ea5c:	687b      	ldr	r3, [r7, #4]
    ea5e:	681a      	ldr	r2, [r3, #0]
    ea60:	683b      	ldr	r3, [r7, #0]
    ea62:	681b      	ldr	r3, [r3, #0]
    ea64:	4610      	mov	r0, r2
    ea66:	4619      	mov	r1, r3
    ea68:	f00c f8fa 	bl	1ac60 <__aeabi_fsub>
    ea6c:	4603      	mov	r3, r0
    ea6e:	461d      	mov	r5, r3
    ea70:	687b      	ldr	r3, [r7, #4]
    ea72:	685a      	ldr	r2, [r3, #4]
    ea74:	683b      	ldr	r3, [r7, #0]
    ea76:	685b      	ldr	r3, [r3, #4]
    ea78:	4610      	mov	r0, r2
    ea7a:	4619      	mov	r1, r3
    ea7c:	f00c f8f0 	bl	1ac60 <__aeabi_fsub>
    ea80:	4603      	mov	r3, r0
    ea82:	4620      	mov	r0, r4
    ea84:	4629      	mov	r1, r5
    ea86:	461a      	mov	r2, r3
    ea88:	f04f 0301 	mov.w	r3, #1	; 0x1
    ea8c:	f7ff ff72 	bl	e974 <_ZN8PositionC1Effb>
    return resultat;
}
    ea90:	4620      	mov	r0, r4
    ea92:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ea96:	46bd      	mov	sp, r7
    ea98:	bdb0      	pop	{r4, r5, r7, pc}
    ea9a:	46c0      	nop			(mov r8, r8)

0000ea9c <_ZN8PositionaSES_>:

void Position::operator=(Position position)
    ea9c:	b480      	push	{r7}
    ea9e:	b085      	sub	sp, #20
    eaa0:	af00      	add	r7, sp, #0
    eaa2:	60f8      	str	r0, [r7, #12]
    eaa4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    eaa8:	e883 0006 	stmia.w	r3, {r1, r2}
{

    x = position.x;
    eaac:	687a      	ldr	r2, [r7, #4]
    eaae:	68fb      	ldr	r3, [r7, #12]
    eab0:	601a      	str	r2, [r3, #0]
    y = position.y;
    eab2:	68ba      	ldr	r2, [r7, #8]
    eab4:	68fb      	ldr	r3, [r7, #12]
    eab6:	605a      	str	r2, [r3, #4]

}
    eab8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    eabc:	46bd      	mov	sp, r7
    eabe:	bc80      	pop	{r7}
    eac0:	4770      	bx	lr
    eac2:	46c0      	nop			(mov r8, r8)

0000eac4 <_ZN8PositionpLERKS_>:

Position Position::operator+=(const Position &position)
    eac4:	b590      	push	{r4, r7, lr}
    eac6:	b083      	sub	sp, #12
    eac8:	af00      	add	r7, sp, #0
    eaca:	4604      	mov	r4, r0
    eacc:	6079      	str	r1, [r7, #4]
    eace:	603a      	str	r2, [r7, #0]
{
    this->x+=position.x;
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	681a      	ldr	r2, [r3, #0]
    ead4:	683b      	ldr	r3, [r7, #0]
    ead6:	681b      	ldr	r3, [r3, #0]
    ead8:	4610      	mov	r0, r2
    eada:	4619      	mov	r1, r3
    eadc:	f00c f8c2 	bl	1ac64 <__addsf3>
    eae0:	4603      	mov	r3, r0
    eae2:	461a      	mov	r2, r3
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	601a      	str	r2, [r3, #0]
    this->y+=position.y;
    eae8:	687b      	ldr	r3, [r7, #4]
    eaea:	685a      	ldr	r2, [r3, #4]
    eaec:	683b      	ldr	r3, [r7, #0]
    eaee:	685b      	ldr	r3, [r3, #4]
    eaf0:	4610      	mov	r0, r2
    eaf2:	4619      	mov	r1, r3
    eaf4:	f00c f8b6 	bl	1ac64 <__addsf3>
    eaf8:	4603      	mov	r3, r0
    eafa:	461a      	mov	r2, r3
    eafc:	687b      	ldr	r3, [r7, #4]
    eafe:	605a      	str	r2, [r3, #4]

    return *this;
    eb00:	687b      	ldr	r3, [r7, #4]
    eb02:	4620      	mov	r0, r4
    eb04:	4619      	mov	r1, r3
    eb06:	f04f 0208 	mov.w	r2, #8	; 0x8
    eb0a:	f011 ff3d 	bl	20988 <memmove>
}
    eb0e:	4620      	mov	r0, r4
    eb10:	f107 070c 	add.w	r7, r7, #12	; 0xc
    eb14:	46bd      	mov	sp, r7
    eb16:	bd90      	pop	{r4, r7, pc}

0000eb18 <_ZN8PositionmIERKS_>:

Position Position::operator-=(const Position &position)
    eb18:	b590      	push	{r4, r7, lr}
    eb1a:	b083      	sub	sp, #12
    eb1c:	af00      	add	r7, sp, #0
    eb1e:	4604      	mov	r4, r0
    eb20:	6079      	str	r1, [r7, #4]
    eb22:	603a      	str	r2, [r7, #0]
{
    this->x-=position.x;
    eb24:	687b      	ldr	r3, [r7, #4]
    eb26:	681a      	ldr	r2, [r3, #0]
    eb28:	683b      	ldr	r3, [r7, #0]
    eb2a:	681b      	ldr	r3, [r3, #0]
    eb2c:	4610      	mov	r0, r2
    eb2e:	4619      	mov	r1, r3
    eb30:	f00c f896 	bl	1ac60 <__aeabi_fsub>
    eb34:	4603      	mov	r3, r0
    eb36:	461a      	mov	r2, r3
    eb38:	687b      	ldr	r3, [r7, #4]
    eb3a:	601a      	str	r2, [r3, #0]
    this->y-=position.y;
    eb3c:	687b      	ldr	r3, [r7, #4]
    eb3e:	685a      	ldr	r2, [r3, #4]
    eb40:	683b      	ldr	r3, [r7, #0]
    eb42:	685b      	ldr	r3, [r3, #4]
    eb44:	4610      	mov	r0, r2
    eb46:	4619      	mov	r1, r3
    eb48:	f00c f88a 	bl	1ac60 <__aeabi_fsub>
    eb4c:	4603      	mov	r3, r0
    eb4e:	461a      	mov	r2, r3
    eb50:	687b      	ldr	r3, [r7, #4]
    eb52:	605a      	str	r2, [r3, #4]

    return *this;
    eb54:	687b      	ldr	r3, [r7, #4]
    eb56:	4620      	mov	r0, r4
    eb58:	4619      	mov	r1, r3
    eb5a:	f04f 0208 	mov.w	r2, #8	; 0x8
    eb5e:	f011 ff13 	bl	20988 <memmove>
}
    eb62:	4620      	mov	r0, r4
    eb64:	f107 070c 	add.w	r7, r7, #12	; 0xc
    eb68:	46bd      	mov	sp, r7
    eb6a:	bd90      	pop	{r4, r7, pc}

0000eb6c <_ZNK8PositioneqERKS_>:
bool Position::presqueEgales(const Position &p) const
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
}

bool Position::operator==(const Position &p) const
    eb6c:	b580      	push	{r7, lr}
    eb6e:	b084      	sub	sp, #16
    eb70:	af00      	add	r7, sp, #0
    eb72:	60f8      	str	r0, [r7, #12]
    eb74:	60b9      	str	r1, [r7, #8]
{
    return (x == p.x && y == p.y);
    eb76:	68fb      	ldr	r3, [r7, #12]
    eb78:	681a      	ldr	r2, [r3, #0]
    eb7a:	68bb      	ldr	r3, [r7, #8]
    eb7c:	6819      	ldr	r1, [r3, #0]
    eb7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    eb82:	70fb      	strb	r3, [r7, #3]
    eb84:	4610      	mov	r0, r2
    eb86:	f00c fb07 	bl	1b198 <__aeabi_fcmpeq>
    eb8a:	4603      	mov	r3, r0
    eb8c:	2b00      	cmp	r3, #0
    eb8e:	d002      	beq.n	eb96 <_ZNK8PositioneqERKS_+0x2a>
    eb90:	f04f 0301 	mov.w	r3, #1	; 0x1
    eb94:	70fb      	strb	r3, [r7, #3]
    eb96:	78fb      	ldrb	r3, [r7, #3]
    eb98:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    eb9c:	b2db      	uxtb	r3, r3
    eb9e:	2b00      	cmp	r3, #0
    eba0:	d119      	bne.n	ebd6 <_ZNK8PositioneqERKS_+0x6a>
    eba2:	68fb      	ldr	r3, [r7, #12]
    eba4:	685a      	ldr	r2, [r3, #4]
    eba6:	68bb      	ldr	r3, [r7, #8]
    eba8:	6859      	ldr	r1, [r3, #4]
    ebaa:	f04f 0300 	mov.w	r3, #0	; 0x0
    ebae:	70bb      	strb	r3, [r7, #2]
    ebb0:	4610      	mov	r0, r2
    ebb2:	f00c faf1 	bl	1b198 <__aeabi_fcmpeq>
    ebb6:	4603      	mov	r3, r0
    ebb8:	2b00      	cmp	r3, #0
    ebba:	d002      	beq.n	ebc2 <_ZNK8PositioneqERKS_+0x56>
    ebbc:	f04f 0301 	mov.w	r3, #1	; 0x1
    ebc0:	70bb      	strb	r3, [r7, #2]
    ebc2:	78bb      	ldrb	r3, [r7, #2]
    ebc4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ebc8:	b2db      	uxtb	r3, r3
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d103      	bne.n	ebd6 <_ZNK8PositioneqERKS_+0x6a>
    ebce:	f04f 0301 	mov.w	r3, #1	; 0x1
    ebd2:	607b      	str	r3, [r7, #4]
    ebd4:	e002      	b.n	ebdc <_ZNK8PositioneqERKS_+0x70>
    ebd6:	f04f 0300 	mov.w	r3, #0	; 0x0
    ebda:	607b      	str	r3, [r7, #4]
    ebdc:	687b      	ldr	r3, [r7, #4]
}
    ebde:	4618      	mov	r0, r3
    ebe0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ebe4:	46bd      	mov	sp, r7
    ebe6:	bd80      	pop	{r7, pc}

0000ebe8 <_ZN8PositionmLEf>:

bool Position::operator*=(float val)
    ebe8:	b580      	push	{r7, lr}
    ebea:	b082      	sub	sp, #8
    ebec:	af00      	add	r7, sp, #0
    ebee:	6078      	str	r0, [r7, #4]
    ebf0:	6039      	str	r1, [r7, #0]
{
    this->x = this->x*val;
    ebf2:	687b      	ldr	r3, [r7, #4]
    ebf4:	681b      	ldr	r3, [r3, #0]
    ebf6:	4618      	mov	r0, r3
    ebf8:	6839      	ldr	r1, [r7, #0]
    ebfa:	f00c f93b 	bl	1ae74 <__aeabi_fmul>
    ebfe:	4603      	mov	r3, r0
    ec00:	461a      	mov	r2, r3
    ec02:	687b      	ldr	r3, [r7, #4]
    ec04:	601a      	str	r2, [r3, #0]
    this->y = this->y*val;
    ec06:	687b      	ldr	r3, [r7, #4]
    ec08:	685b      	ldr	r3, [r3, #4]
    ec0a:	4618      	mov	r0, r3
    ec0c:	6839      	ldr	r1, [r7, #0]
    ec0e:	f00c f931 	bl	1ae74 <__aeabi_fmul>
    ec12:	4603      	mov	r3, r0
    ec14:	461a      	mov	r2, r3
    ec16:	687b      	ldr	r3, [r7, #4]
    ec18:	605a      	str	r2, [r3, #4]

    return true;
    ec1a:	f04f 0301 	mov.w	r3, #1	; 0x1
}
    ec1e:	4618      	mov	r0, r3
    ec20:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ec24:	46bd      	mov	sp, r7
    ec26:	bd80      	pop	{r7, pc}

0000ec28 <_ZNK8Position8getAngleEv>:
Distance Position::getNorme() const
{
    return Distance(sqrt(x*x+y*y));
}

Angle Position::getAngle() const
    ec28:	b5b0      	push	{r4, r5, r7, lr}
    ec2a:	b082      	sub	sp, #8
    ec2c:	af00      	add	r7, sp, #0
    ec2e:	6078      	str	r0, [r7, #4]
{
	return atan2(y,x);
    ec30:	687b      	ldr	r3, [r7, #4]
    ec32:	685b      	ldr	r3, [r3, #4]
    ec34:	4618      	mov	r0, r3
    ec36:	f00b fcab 	bl	1a590 <__aeabi_f2d>
    ec3a:	4604      	mov	r4, r0
    ec3c:	460d      	mov	r5, r1
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	681b      	ldr	r3, [r3, #0]
    ec42:	4618      	mov	r0, r3
    ec44:	f00b fca4 	bl	1a590 <__aeabi_f2d>
    ec48:	4602      	mov	r2, r0
    ec4a:	460b      	mov	r3, r1
    ec4c:	4620      	mov	r0, r4
    ec4e:	4629      	mov	r1, r5
    ec50:	f00f fdd4 	bl	1e7fc <atan2>
    ec54:	4602      	mov	r2, r0
    ec56:	460b      	mov	r3, r1
    ec58:	4610      	mov	r0, r2
    ec5a:	4619      	mov	r1, r3
    ec5c:	f00b ffac 	bl	1abb8 <__aeabi_d2f>
    ec60:	4603      	mov	r3, r0
}
    ec62:	4618      	mov	r0, r3
    ec64:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ec68:	46bd      	mov	sp, r7
    ec6a:	bdb0      	pop	{r4, r5, r7, pc}

0000ec6c <_ZNK8Position8getNormeEv>:
    this->y = this->y*val;

    return true;
}

Distance Position::getNorme() const
    ec6c:	b590      	push	{r4, r7, lr}
    ec6e:	b083      	sub	sp, #12
    ec70:	af00      	add	r7, sp, #0
    ec72:	6078      	str	r0, [r7, #4]
{
    return Distance(sqrt(x*x+y*y));
    ec74:	687b      	ldr	r3, [r7, #4]
    ec76:	681a      	ldr	r2, [r3, #0]
    ec78:	687b      	ldr	r3, [r7, #4]
    ec7a:	681b      	ldr	r3, [r3, #0]
    ec7c:	4610      	mov	r0, r2
    ec7e:	4619      	mov	r1, r3
    ec80:	f00c f8f8 	bl	1ae74 <__aeabi_fmul>
    ec84:	4603      	mov	r3, r0
    ec86:	461c      	mov	r4, r3
    ec88:	687b      	ldr	r3, [r7, #4]
    ec8a:	685a      	ldr	r2, [r3, #4]
    ec8c:	687b      	ldr	r3, [r7, #4]
    ec8e:	685b      	ldr	r3, [r3, #4]
    ec90:	4610      	mov	r0, r2
    ec92:	4619      	mov	r1, r3
    ec94:	f00c f8ee 	bl	1ae74 <__aeabi_fmul>
    ec98:	4603      	mov	r3, r0
    ec9a:	4620      	mov	r0, r4
    ec9c:	4619      	mov	r1, r3
    ec9e:	f00b ffe1 	bl	1ac64 <__addsf3>
    eca2:	4603      	mov	r3, r0
    eca4:	4618      	mov	r0, r3
    eca6:	f00b fc73 	bl	1a590 <__aeabi_f2d>
    ecaa:	4602      	mov	r2, r0
    ecac:	460b      	mov	r3, r1
    ecae:	4610      	mov	r0, r2
    ecb0:	4619      	mov	r1, r3
    ecb2:	f00f fda9 	bl	1e808 <sqrt>
    ecb6:	4602      	mov	r2, r0
    ecb8:	460b      	mov	r3, r1
    ecba:	4610      	mov	r0, r2
    ecbc:	4619      	mov	r1, r3
    ecbe:	f00b ff7b 	bl	1abb8 <__aeabi_d2f>
    ecc2:	4603      	mov	r3, r0
}
    ecc4:	4618      	mov	r0, r3
    ecc6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ecca:	46bd      	mov	sp, r7
    eccc:	bd90      	pop	{r4, r7, pc}
    ecce:	46c0      	nop			(mov r8, r8)

0000ecd0 <_ZNK8Position13presqueEgalesERKS_>:
    this->y-=position.y;

    return *this;
}

bool Position::presqueEgales(const Position &p) const
    ecd0:	b580      	push	{r7, lr}
    ecd2:	b084      	sub	sp, #16
    ecd4:	af00      	add	r7, sp, #0
    ecd6:	60f8      	str	r0, [r7, #12]
    ecd8:	60b9      	str	r1, [r7, #8]
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
    ecda:	68fb      	ldr	r3, [r7, #12]
    ecdc:	681a      	ldr	r2, [r3, #0]
    ecde:	68bb      	ldr	r3, [r7, #8]
    ece0:	681b      	ldr	r3, [r3, #0]
    ece2:	4610      	mov	r0, r2
    ece4:	4619      	mov	r1, r3
    ece6:	f7fb fec3 	bl	aa70 <_Z21distancePresqueEgalesff>
    ecea:	4603      	mov	r3, r0
    ecec:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ecf0:	b2db      	uxtb	r3, r3
    ecf2:	2b00      	cmp	r3, #0
    ecf4:	d111      	bne.n	ed1a <_ZNK8Position13presqueEgalesERKS_+0x4a>
    ecf6:	68fb      	ldr	r3, [r7, #12]
    ecf8:	685a      	ldr	r2, [r3, #4]
    ecfa:	68bb      	ldr	r3, [r7, #8]
    ecfc:	685b      	ldr	r3, [r3, #4]
    ecfe:	4610      	mov	r0, r2
    ed00:	4619      	mov	r1, r3
    ed02:	f7fb feb5 	bl	aa70 <_Z21distancePresqueEgalesff>
    ed06:	4603      	mov	r3, r0
    ed08:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ed0c:	b2db      	uxtb	r3, r3
    ed0e:	2b00      	cmp	r3, #0
    ed10:	d103      	bne.n	ed1a <_ZNK8Position13presqueEgalesERKS_+0x4a>
    ed12:	f04f 0301 	mov.w	r3, #1	; 0x1
    ed16:	607b      	str	r3, [r7, #4]
    ed18:	e002      	b.n	ed20 <_ZNK8Position13presqueEgalesERKS_+0x50>
    ed1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ed1e:	607b      	str	r3, [r7, #4]
    ed20:	687b      	ldr	r3, [r7, #4]
}
    ed22:	4618      	mov	r0, r3
    ed24:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ed28:	46bd      	mov	sp, r7
    ed2a:	bd80      	pop	{r7, pc}

0000ed2c <_ZN17PositionPlusAngleC2ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    ed2c:	b480      	push	{r7}
    ed2e:	b085      	sub	sp, #20
    ed30:	af00      	add	r7, sp, #0
    ed32:	60f8      	str	r0, [r7, #12]
    ed34:	60b9      	str	r1, [r7, #8]
    ed36:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    ed38:	68fb      	ldr	r3, [r7, #12]
    ed3a:	68ba      	ldr	r2, [r7, #8]
    ed3c:	469c      	mov	ip, r3
    ed3e:	4613      	mov	r3, r2
    ed40:	e893 0003 	ldmia.w	r3, {r0, r1}
    ed44:	e88c 0003 	stmia.w	ip, {r0, r1}
    ed48:	68fa      	ldr	r2, [r7, #12]
    ed4a:	687b      	ldr	r3, [r7, #4]
    ed4c:	6093      	str	r3, [r2, #8]
{
}
    ed4e:	68fb      	ldr	r3, [r7, #12]
    ed50:	4618      	mov	r0, r3
    ed52:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ed56:	46bd      	mov	sp, r7
    ed58:	bc80      	pop	{r7}
    ed5a:	4770      	bx	lr

0000ed5c <_ZN17PositionPlusAngleC1ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    ed5c:	b480      	push	{r7}
    ed5e:	b085      	sub	sp, #20
    ed60:	af00      	add	r7, sp, #0
    ed62:	60f8      	str	r0, [r7, #12]
    ed64:	60b9      	str	r1, [r7, #8]
    ed66:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    ed68:	68fb      	ldr	r3, [r7, #12]
    ed6a:	68ba      	ldr	r2, [r7, #8]
    ed6c:	469c      	mov	ip, r3
    ed6e:	4613      	mov	r3, r2
    ed70:	e893 0003 	ldmia.w	r3, {r0, r1}
    ed74:	e88c 0003 	stmia.w	ip, {r0, r1}
    ed78:	68fa      	ldr	r2, [r7, #12]
    ed7a:	687b      	ldr	r3, [r7, #4]
    ed7c:	6093      	str	r3, [r2, #8]
{
}
    ed7e:	68fb      	ldr	r3, [r7, #12]
    ed80:	4618      	mov	r0, r3
    ed82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ed86:	46bd      	mov	sp, r7
    ed88:	bc80      	pop	{r7}
    ed8a:	4770      	bx	lr

0000ed8c <_ZN17PositionPlusAngleC2ERKS_>:

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    ed8c:	b480      	push	{r7}
    ed8e:	b083      	sub	sp, #12
    ed90:	af00      	add	r7, sp, #0
    ed92:	6078      	str	r0, [r7, #4]
    ed94:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    ed96:	687b      	ldr	r3, [r7, #4]
    ed98:	683a      	ldr	r2, [r7, #0]
    ed9a:	469c      	mov	ip, r3
    ed9c:	4613      	mov	r3, r2
    ed9e:	e893 0003 	ldmia.w	r3, {r0, r1}
    eda2:	e88c 0003 	stmia.w	ip, {r0, r1}
    eda6:	683b      	ldr	r3, [r7, #0]
    eda8:	689a      	ldr	r2, [r3, #8]
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	609a      	str	r2, [r3, #8]
{
}
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	4618      	mov	r0, r3
    edb2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    edb6:	46bd      	mov	sp, r7
    edb8:	bc80      	pop	{r7}
    edba:	4770      	bx	lr

0000edbc <_ZN17PositionPlusAngleC1ERKS_>:
PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    : position(pos), angle(ang)
{
}

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    edbc:	b480      	push	{r7}
    edbe:	b083      	sub	sp, #12
    edc0:	af00      	add	r7, sp, #0
    edc2:	6078      	str	r0, [r7, #4]
    edc4:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    edc6:	687b      	ldr	r3, [r7, #4]
    edc8:	683a      	ldr	r2, [r7, #0]
    edca:	469c      	mov	ip, r3
    edcc:	4613      	mov	r3, r2
    edce:	e893 0003 	ldmia.w	r3, {r0, r1}
    edd2:	e88c 0003 	stmia.w	ip, {r0, r1}
    edd6:	683b      	ldr	r3, [r7, #0]
    edd8:	689a      	ldr	r2, [r3, #8]
    edda:	687b      	ldr	r3, [r7, #4]
    eddc:	609a      	str	r2, [r3, #8]
{
}
    edde:	687b      	ldr	r3, [r7, #4]
    ede0:	4618      	mov	r0, r3
    ede2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ede6:	46bd      	mov	sp, r7
    ede8:	bc80      	pop	{r7}
    edea:	4770      	bx	lr

0000edec <_ZNK17PositionPlusAngle11getPositionEv>:
bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
}

Position PositionPlusAngle::getPosition() const
    edec:	b480      	push	{r7}
    edee:	b083      	sub	sp, #12
    edf0:	af00      	add	r7, sp, #0
    edf2:	4684      	mov	ip, r0
    edf4:	6079      	str	r1, [r7, #4]
{
    return position;
    edf6:	687b      	ldr	r3, [r7, #4]
    edf8:	4662      	mov	r2, ip
    edfa:	e893 0003 	ldmia.w	r3, {r0, r1}
    edfe:	e882 0003 	stmia.w	r2, {r0, r1}
}
    ee02:	4660      	mov	r0, ip
    ee04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee08:	46bd      	mov	sp, r7
    ee0a:	bc80      	pop	{r7}
    ee0c:	4770      	bx	lr
    ee0e:	46c0      	nop			(mov r8, r8)

0000ee10 <_ZNK17PositionPlusAngle8getAngleEv>:
void PositionPlusAngle::setPosition(const Position& p)
{
    position = p;
}

Angle PositionPlusAngle::getAngle() const
    ee10:	b480      	push	{r7}
    ee12:	b083      	sub	sp, #12
    ee14:	af00      	add	r7, sp, #0
    ee16:	6078      	str	r0, [r7, #4]
{
    return angle;
    ee18:	687b      	ldr	r3, [r7, #4]
    ee1a:	689b      	ldr	r3, [r3, #8]
}
    ee1c:	4618      	mov	r0, r3
    ee1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee22:	46bd      	mov	sp, r7
    ee24:	bc80      	pop	{r7}
    ee26:	4770      	bx	lr

0000ee28 <_ZN17PositionPlusAngle8setAngleEf>:

void PositionPlusAngle::setAngle(Angle a)
    ee28:	b480      	push	{r7}
    ee2a:	b083      	sub	sp, #12
    ee2c:	af00      	add	r7, sp, #0
    ee2e:	6078      	str	r0, [r7, #4]
    ee30:	6039      	str	r1, [r7, #0]
{
    angle = a;
    ee32:	687a      	ldr	r2, [r7, #4]
    ee34:	683b      	ldr	r3, [r7, #0]
    ee36:	6093      	str	r3, [r2, #8]
}
    ee38:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee3c:	46bd      	mov	sp, r7
    ee3e:	bc80      	pop	{r7}
    ee40:	4770      	bx	lr
    ee42:	46c0      	nop			(mov r8, r8)

0000ee44 <_ZN17PositionPlusAngle4setYEf>:
void PositionPlusAngle::setX(Distance X)
{
    position.setX(X);
}

void PositionPlusAngle::setY(Distance Y)
    ee44:	b580      	push	{r7, lr}
    ee46:	b082      	sub	sp, #8
    ee48:	af00      	add	r7, sp, #0
    ee4a:	6078      	str	r0, [r7, #4]
    ee4c:	6039      	str	r1, [r7, #0]
{
    position.setY(Y);
    ee4e:	687b      	ldr	r3, [r7, #4]
    ee50:	4618      	mov	r0, r3
    ee52:	6839      	ldr	r1, [r7, #0]
    ee54:	f7ff fdc8 	bl	e9e8 <_ZN8Position4setYEf>
}
    ee58:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ee5c:	46bd      	mov	sp, r7
    ee5e:	bd80      	pop	{r7, pc}

0000ee60 <_ZN17PositionPlusAngle4setXEf>:
void PositionPlusAngle::setAngle(Angle a)
{
    angle = a;
}

void PositionPlusAngle::setX(Distance X)
    ee60:	b580      	push	{r7, lr}
    ee62:	b082      	sub	sp, #8
    ee64:	af00      	add	r7, sp, #0
    ee66:	6078      	str	r0, [r7, #4]
    ee68:	6039      	str	r1, [r7, #0]
{
    position.setX(X);
    ee6a:	687b      	ldr	r3, [r7, #4]
    ee6c:	4618      	mov	r0, r3
    ee6e:	6839      	ldr	r1, [r7, #0]
    ee70:	f7ff fdac 	bl	e9cc <_ZN8Position4setXEf>
}
    ee74:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ee78:	46bd      	mov	sp, r7
    ee7a:	bd80      	pop	{r7, pc}

0000ee7c <_ZN17PositionPlusAngle11setPositionERK8Position>:
Position PositionPlusAngle::getPosition() const
{
    return position;
}

void PositionPlusAngle::setPosition(const Position& p)
    ee7c:	b580      	push	{r7, lr}
    ee7e:	b082      	sub	sp, #8
    ee80:	af00      	add	r7, sp, #0
    ee82:	6078      	str	r0, [r7, #4]
    ee84:	6039      	str	r1, [r7, #0]
{
    position = p;
    ee86:	687a      	ldr	r2, [r7, #4]
    ee88:	683b      	ldr	r3, [r7, #0]
    ee8a:	4610      	mov	r0, r2
    ee8c:	e893 0006 	ldmia.w	r3, {r1, r2}
    ee90:	f7ff fe04 	bl	ea9c <_ZN8PositionaSES_>
}
    ee94:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ee98:	46bd      	mov	sp, r7
    ee9a:	bd80      	pop	{r7, pc}

0000ee9c <_ZN17PositionPlusAngleaSERKS_>:
PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
{
    return *this + (-distance);
}

const PositionPlusAngle& PositionPlusAngle::operator=(const PositionPlusAngle& positionPlusAngle)
    ee9c:	b580      	push	{r7, lr}
    ee9e:	b082      	sub	sp, #8
    eea0:	af00      	add	r7, sp, #0
    eea2:	6078      	str	r0, [r7, #4]
    eea4:	6039      	str	r1, [r7, #0]
{
    position = positionPlusAngle.position;
    eea6:	687a      	ldr	r2, [r7, #4]
    eea8:	683b      	ldr	r3, [r7, #0]
    eeaa:	4610      	mov	r0, r2
    eeac:	e893 0006 	ldmia.w	r3, {r1, r2}
    eeb0:	f7ff fdf4 	bl	ea9c <_ZN8PositionaSES_>
    angle = positionPlusAngle.angle;
    eeb4:	683b      	ldr	r3, [r7, #0]
    eeb6:	689a      	ldr	r2, [r3, #8]
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	609a      	str	r2, [r3, #8]

    return *this;
    eebc:	687b      	ldr	r3, [r7, #4]
}
    eebe:	4618      	mov	r0, r3
    eec0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eec4:	46bd      	mov	sp, r7
    eec6:	bd80      	pop	{r7, pc}

0000eec8 <_ZNK17PositionPlusAngle13presqueEgalesERKS_>:
bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
{
    return ((position==p.position) && (angle==p.angle));
}

bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
    eec8:	b580      	push	{r7, lr}
    eeca:	b084      	sub	sp, #16
    eecc:	af00      	add	r7, sp, #0
    eece:	60f8      	str	r0, [r7, #12]
    eed0:	60b9      	str	r1, [r7, #8]
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
    eed2:	68fb      	ldr	r3, [r7, #12]
    eed4:	68ba      	ldr	r2, [r7, #8]
    eed6:	4618      	mov	r0, r3
    eed8:	4611      	mov	r1, r2
    eeda:	f7ff fef9 	bl	ecd0 <_ZNK8Position13presqueEgalesERKS_>
    eede:	4603      	mov	r3, r0
    eee0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    eee4:	b2db      	uxtb	r3, r3
    eee6:	2b00      	cmp	r3, #0
    eee8:	d111      	bne.n	ef0e <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    eeea:	68fb      	ldr	r3, [r7, #12]
    eeec:	689a      	ldr	r2, [r3, #8]
    eeee:	68bb      	ldr	r3, [r7, #8]
    eef0:	689b      	ldr	r3, [r3, #8]
    eef2:	4610      	mov	r0, r2
    eef4:	4619      	mov	r1, r3
    eef6:	f7f8 fa83 	bl	7400 <_Z7angleEqff>
    eefa:	4603      	mov	r3, r0
    eefc:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ef00:	b2db      	uxtb	r3, r3
    ef02:	2b00      	cmp	r3, #0
    ef04:	d103      	bne.n	ef0e <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    ef06:	f04f 0301 	mov.w	r3, #1	; 0x1
    ef0a:	607b      	str	r3, [r7, #4]
    ef0c:	e002      	b.n	ef14 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x4c>
    ef0e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ef12:	607b      	str	r3, [r7, #4]
    ef14:	687b      	ldr	r3, [r7, #4]
}
    ef16:	4618      	mov	r0, r3
    ef18:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ef1c:	46bd      	mov	sp, r7
    ef1e:	bd80      	pop	{r7, pc}

0000ef20 <_ZNK17PositionPlusAngleeqERKS_>:
    angle = positionPlusAngle.angle;

    return *this;
}

bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
    ef20:	b580      	push	{r7, lr}
    ef22:	b084      	sub	sp, #16
    ef24:	af00      	add	r7, sp, #0
    ef26:	60f8      	str	r0, [r7, #12]
    ef28:	60b9      	str	r1, [r7, #8]
{
    return ((position==p.position) && (angle==p.angle));
    ef2a:	68fb      	ldr	r3, [r7, #12]
    ef2c:	68ba      	ldr	r2, [r7, #8]
    ef2e:	4618      	mov	r0, r3
    ef30:	4611      	mov	r1, r2
    ef32:	f7ff fe1b 	bl	eb6c <_ZNK8PositioneqERKS_>
    ef36:	4603      	mov	r3, r0
    ef38:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ef3c:	b2db      	uxtb	r3, r3
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d119      	bne.n	ef76 <_ZNK17PositionPlusAngleeqERKS_+0x56>
    ef42:	68fb      	ldr	r3, [r7, #12]
    ef44:	689a      	ldr	r2, [r3, #8]
    ef46:	68bb      	ldr	r3, [r7, #8]
    ef48:	6899      	ldr	r1, [r3, #8]
    ef4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ef4e:	70fb      	strb	r3, [r7, #3]
    ef50:	4610      	mov	r0, r2
    ef52:	f00c f921 	bl	1b198 <__aeabi_fcmpeq>
    ef56:	4603      	mov	r3, r0
    ef58:	2b00      	cmp	r3, #0
    ef5a:	d002      	beq.n	ef62 <_ZNK17PositionPlusAngleeqERKS_+0x42>
    ef5c:	f04f 0301 	mov.w	r3, #1	; 0x1
    ef60:	70fb      	strb	r3, [r7, #3]
    ef62:	78fb      	ldrb	r3, [r7, #3]
    ef64:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ef68:	b2db      	uxtb	r3, r3
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d103      	bne.n	ef76 <_ZNK17PositionPlusAngleeqERKS_+0x56>
    ef6e:	f04f 0301 	mov.w	r3, #1	; 0x1
    ef72:	607b      	str	r3, [r7, #4]
    ef74:	e002      	b.n	ef7c <_ZNK17PositionPlusAngleeqERKS_+0x5c>
    ef76:	f04f 0300 	mov.w	r3, #0	; 0x0
    ef7a:	607b      	str	r3, [r7, #4]
    ef7c:	687b      	ldr	r3, [r7, #4]
}
    ef7e:	4618      	mov	r0, r3
    ef80:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ef84:	46bd      	mov	sp, r7
    ef86:	bd80      	pop	{r7, pc}

0000ef88 <_ZNK17PositionPlusAngleplERKS_>:
PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
}

PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
    ef88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef8c:	b088      	sub	sp, #32
    ef8e:	af00      	add	r7, sp, #0
    ef90:	4605      	mov	r5, r0
    ef92:	6079      	str	r1, [r7, #4]
    ef94:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
    ef96:	462e      	mov	r6, r5
    ef98:	687b      	ldr	r3, [r7, #4]
    ef9a:	4618      	mov	r0, r3
    ef9c:	f7ff fcfe 	bl	e99c <_ZNK8Position4getXEv>
    efa0:	4604      	mov	r4, r0
    efa2:	f107 0310 	add.w	r3, r7, #16	; 0x10
    efa6:	4618      	mov	r0, r3
    efa8:	6839      	ldr	r1, [r7, #0]
    efaa:	f7ff ff1f 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    efae:	f107 0310 	add.w	r3, r7, #16	; 0x10
    efb2:	4618      	mov	r0, r3
    efb4:	f7ff fcf2 	bl	e99c <_ZNK8Position4getXEv>
    efb8:	4603      	mov	r3, r0
    efba:	4620      	mov	r0, r4
    efbc:	4619      	mov	r1, r3
    efbe:	f00b fe51 	bl	1ac64 <__addsf3>
    efc2:	4603      	mov	r3, r0
    efc4:	4698      	mov	r8, r3
    efc6:	687b      	ldr	r3, [r7, #4]
    efc8:	4618      	mov	r0, r3
    efca:	f7ff fcf3 	bl	e9b4 <_ZNK8Position4getYEv>
    efce:	4604      	mov	r4, r0
    efd0:	f107 0318 	add.w	r3, r7, #24	; 0x18
    efd4:	4618      	mov	r0, r3
    efd6:	6839      	ldr	r1, [r7, #0]
    efd8:	f7ff ff08 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    efdc:	f107 0318 	add.w	r3, r7, #24	; 0x18
    efe0:	4618      	mov	r0, r3
    efe2:	f7ff fce7 	bl	e9b4 <_ZNK8Position4getYEv>
    efe6:	4603      	mov	r3, r0
    efe8:	4620      	mov	r0, r4
    efea:	4619      	mov	r1, r3
    efec:	f00b fe3a 	bl	1ac64 <__addsf3>
    eff0:	4603      	mov	r3, r0
    eff2:	461a      	mov	r2, r3
    eff4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    eff8:	4618      	mov	r0, r3
    effa:	4641      	mov	r1, r8
    effc:	f04f 0301 	mov.w	r3, #1	; 0x1
    f000:	f7ff fcb8 	bl	e974 <_ZN8PositionC1Effb>
    f004:	687b      	ldr	r3, [r7, #4]
    f006:	689c      	ldr	r4, [r3, #8]
    f008:	6838      	ldr	r0, [r7, #0]
    f00a:	f7ff ff01 	bl	ee10 <_ZNK17PositionPlusAngle8getAngleEv>
    f00e:	4603      	mov	r3, r0
    f010:	4620      	mov	r0, r4
    f012:	4619      	mov	r1, r3
    f014:	f00b fe26 	bl	1ac64 <__addsf3>
    f018:	4603      	mov	r3, r0
    f01a:	461a      	mov	r2, r3
    f01c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f020:	4630      	mov	r0, r6
    f022:	4619      	mov	r1, r3
    f024:	f7ff fe9a 	bl	ed5c <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    f028:	4628      	mov	r0, r5
    f02a:	4628      	mov	r0, r5
    f02c:	f107 0720 	add.w	r7, r7, #32	; 0x20
    f030:	46bd      	mov	sp, r7
    f032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f036:	46c0      	nop			(mov r8, r8)

0000f038 <_ZNK17PositionPlusAngleplEf>:
PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    : position(original.position), angle(original.angle)
{
}

PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
    f038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f03c:	b085      	sub	sp, #20
    f03e:	af00      	add	r7, sp, #0
    f040:	4606      	mov	r6, r0
    f042:	6079      	str	r1, [r7, #4]
    f044:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
    f046:	46b2      	mov	sl, r6
    f048:	687b      	ldr	r3, [r7, #4]
    f04a:	4618      	mov	r0, r3
    f04c:	f7ff fca6 	bl	e99c <_ZNK8Position4getXEv>
    f050:	4603      	mov	r3, r0
    f052:	4618      	mov	r0, r3
    f054:	f00b fa9c 	bl	1a590 <__aeabi_f2d>
    f058:	4680      	mov	r8, r0
    f05a:	4689      	mov	r9, r1
    f05c:	6838      	ldr	r0, [r7, #0]
    f05e:	f00b fa97 	bl	1a590 <__aeabi_f2d>
    f062:	4604      	mov	r4, r0
    f064:	460d      	mov	r5, r1
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	689b      	ldr	r3, [r3, #8]
    f06a:	4618      	mov	r0, r3
    f06c:	f00b fa90 	bl	1a590 <__aeabi_f2d>
    f070:	4602      	mov	r2, r0
    f072:	460b      	mov	r3, r1
    f074:	4610      	mov	r0, r2
    f076:	4619      	mov	r1, r3
    f078:	f00f fb38 	bl	1e6ec <cos>
    f07c:	4602      	mov	r2, r0
    f07e:	460b      	mov	r3, r1
    f080:	4620      	mov	r0, r4
    f082:	4629      	mov	r1, r5
    f084:	f00b fad8 	bl	1a638 <__aeabi_dmul>
    f088:	4602      	mov	r2, r0
    f08a:	460b      	mov	r3, r1
    f08c:	4640      	mov	r0, r8
    f08e:	4649      	mov	r1, r9
    f090:	f00b f920 	bl	1a2d4 <__adddf3>
    f094:	4602      	mov	r2, r0
    f096:	460b      	mov	r3, r1
    f098:	4610      	mov	r0, r2
    f09a:	4619      	mov	r1, r3
    f09c:	f00b fd8c 	bl	1abb8 <__aeabi_d2f>
    f0a0:	4683      	mov	fp, r0
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	4618      	mov	r0, r3
    f0a6:	f7ff fc85 	bl	e9b4 <_ZNK8Position4getYEv>
    f0aa:	4603      	mov	r3, r0
    f0ac:	4618      	mov	r0, r3
    f0ae:	f00b fa6f 	bl	1a590 <__aeabi_f2d>
    f0b2:	4680      	mov	r8, r0
    f0b4:	4689      	mov	r9, r1
    f0b6:	6838      	ldr	r0, [r7, #0]
    f0b8:	f00b fa6a 	bl	1a590 <__aeabi_f2d>
    f0bc:	4604      	mov	r4, r0
    f0be:	460d      	mov	r5, r1
    f0c0:	687b      	ldr	r3, [r7, #4]
    f0c2:	689b      	ldr	r3, [r3, #8]
    f0c4:	4618      	mov	r0, r3
    f0c6:	f00b fa63 	bl	1a590 <__aeabi_f2d>
    f0ca:	4602      	mov	r2, r0
    f0cc:	460b      	mov	r3, r1
    f0ce:	4610      	mov	r0, r2
    f0d0:	4619      	mov	r1, r3
    f0d2:	f00f fb4d 	bl	1e770 <sin>
    f0d6:	4602      	mov	r2, r0
    f0d8:	460b      	mov	r3, r1
    f0da:	4620      	mov	r0, r4
    f0dc:	4629      	mov	r1, r5
    f0de:	f00b faab 	bl	1a638 <__aeabi_dmul>
    f0e2:	4602      	mov	r2, r0
    f0e4:	460b      	mov	r3, r1
    f0e6:	4640      	mov	r0, r8
    f0e8:	4649      	mov	r1, r9
    f0ea:	f00b f8f3 	bl	1a2d4 <__adddf3>
    f0ee:	4602      	mov	r2, r0
    f0f0:	460b      	mov	r3, r1
    f0f2:	4610      	mov	r0, r2
    f0f4:	4619      	mov	r1, r3
    f0f6:	f00b fd5f 	bl	1abb8 <__aeabi_d2f>
    f0fa:	4602      	mov	r2, r0
    f0fc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f100:	4618      	mov	r0, r3
    f102:	4659      	mov	r1, fp
    f104:	f04f 0301 	mov.w	r3, #1	; 0x1
    f108:	f7ff fc34 	bl	e974 <_ZN8PositionC1Effb>
    f10c:	687b      	ldr	r3, [r7, #4]
    f10e:	689a      	ldr	r2, [r3, #8]
    f110:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f114:	4650      	mov	r0, sl
    f116:	4619      	mov	r1, r3
    f118:	f7ff fe20 	bl	ed5c <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    f11c:	4630      	mov	r0, r6
    f11e:	4630      	mov	r0, r6
    f120:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f124:	46bd      	mov	sp, r7
    f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f12a:	46c0      	nop			(mov r8, r8)

0000f12c <_ZNK17PositionPlusAnglemiEf>:
PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
}

PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
    f12c:	b590      	push	{r4, r7, lr}
    f12e:	b083      	sub	sp, #12
    f130:	af00      	add	r7, sp, #0
    f132:	4604      	mov	r4, r0
    f134:	6079      	str	r1, [r7, #4]
    f136:	603a      	str	r2, [r7, #0]
{
    return *this + (-distance);
    f138:	4622      	mov	r2, r4
    f13a:	683b      	ldr	r3, [r7, #0]
    f13c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    f140:	4610      	mov	r0, r2
    f142:	6879      	ldr	r1, [r7, #4]
    f144:	461a      	mov	r2, r3
    f146:	f7ff ff77 	bl	f038 <_ZNK17PositionPlusAngleplEf>
}
    f14a:	4620      	mov	r0, r4
    f14c:	4620      	mov	r0, r4
    f14e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f152:	46bd      	mov	sp, r7
    f154:	bd90      	pop	{r4, r7, pc}
    f156:	46c0      	nop			(mov r8, r8)

0000f158 <_ZN17PositionPlusAngleC1Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    f158:	b580      	push	{r7, lr}
    f15a:	b082      	sub	sp, #8
    f15c:	af00      	add	r7, sp, #0
    f15e:	6078      	str	r0, [r7, #4]
    f160:	687b      	ldr	r3, [r7, #4]
    f162:	4618      	mov	r0, r3
    f164:	f7ff fbde 	bl	e924 <_ZN8PositionC1Ev>
{
}
    f168:	687b      	ldr	r3, [r7, #4]
    f16a:	4618      	mov	r0, r3
    f16c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f170:	46bd      	mov	sp, r7
    f172:	bd80      	pop	{r7, pc}

0000f174 <_ZN17PositionPlusAngleC2Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    f174:	b580      	push	{r7, lr}
    f176:	b082      	sub	sp, #8
    f178:	af00      	add	r7, sp, #0
    f17a:	6078      	str	r0, [r7, #4]
    f17c:	687b      	ldr	r3, [r7, #4]
    f17e:	4618      	mov	r0, r3
    f180:	f7ff fbd0 	bl	e924 <_ZN8PositionC1Ev>
{
}
    f184:	687b      	ldr	r3, [r7, #4]
    f186:	4618      	mov	r0, r3
    f188:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f18c:	46bd      	mov	sp, r7
    f18e:	bd80      	pop	{r7, pc}

0000f190 <_ZN10ActionGoTo16collisionAvoidedEv>:
            status = -1;
    }
    return status;
}

void ActionGoTo::collisionAvoided()
    f190:	b480      	push	{r7}
    f192:	b083      	sub	sp, #12
    f194:	af00      	add	r7, sp, #0
    f196:	6078      	str	r0, [r7, #4]
{
    //if (status > 0)
        this->status = 0;
    f198:	687a      	ldr	r2, [r7, #4]
    f19a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f19e:	60d3      	str	r3, [r2, #12]
}
    f1a0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f1a4:	46bd      	mov	sp, r7
    f1a6:	bc80      	pop	{r7}
    f1a8:	4770      	bx	lr
    f1aa:	46c0      	nop			(mov r8, r8)

0000f1ac <_ZN10ActionGoTo5resetEv>:

void ActionGoTo::reset()
    f1ac:	b480      	push	{r7}
    f1ae:	b083      	sub	sp, #12
    f1b0:	af00      	add	r7, sp, #0
    f1b2:	6078      	str	r0, [r7, #4]
{
    this->status = 0;
    f1b4:	687a      	ldr	r2, [r7, #4]
    f1b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f1ba:	60d3      	str	r3, [r2, #12]
}
    f1bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f1c0:	46bd      	mov	sp, r7
    f1c2:	bc80      	pop	{r7}
    f1c4:	4770      	bx	lr
    f1c6:	46c0      	nop			(mov r8, r8)

0000f1c8 <_ZN10ActionGoTo6updateEv>:
ActionGoTo::~ActionGoTo()
{
    //dtor
}

int ActionGoTo::update()
    f1c8:	b590      	push	{r4, r7, lr}
    f1ca:	b099      	sub	sp, #100
    f1cc:	af02      	add	r7, sp, #8
    f1ce:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
    f1d0:	687b      	ldr	r3, [r7, #4]
    f1d2:	68db      	ldr	r3, [r3, #12]
    f1d4:	2b00      	cmp	r3, #0
    f1d6:	d126      	bne.n	f226 <_ZN10ActionGoTo6updateEv+0x5e>
    {
#ifndef ROBOTHW
        qDebug() << "actionGoTo";
#endif
        //allumerLED2();
        Position pos = Odometrie::odometrie->getPos().getPosition();
    f1d8:	4b4c      	ldr	r3, [pc, #304]	(f30c <_ZN10ActionGoTo6updateEv+0x144>)
    f1da:	681a      	ldr	r2, [r3, #0]
    f1dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f1e0:	4618      	mov	r0, r3
    f1e2:	4611      	mov	r1, r2
    f1e4:	f7fa fc8c 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    f1e8:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f1ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
    f1f0:	4618      	mov	r0, r3
    f1f2:	4611      	mov	r1, r2
    f1f4:	f7ff fdfa 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
        //Position vect = goalPosition - pos;
        //vect *= (1.f/vect.getNorme());

        goingCurve = false;//StrategieV2::getJustAvoided();
    f1f8:	687a      	ldr	r2, [r7, #4]
    f1fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    f1fe:	7713      	strb	r3, [r2, #28]
            StrategieV2::setCurrentGoal(intermediateGoalPosition, true); // a changer selon le servo qui détecte
            status = 1;
        }
        else*/
        {
            StrategieV2::setCurrentGoal(goalPosition, goBack);
    f200:	687b      	ldr	r3, [r7, #4]
    f202:	f893 c010 	ldrb.w	ip, [r3, #16]
    f206:	687a      	ldr	r2, [r7, #4]
    f208:	4b41      	ldr	r3, [pc, #260]	(f310 <_ZN10ActionGoTo6updateEv+0x148>)
    f20a:	9300      	str	r3, [sp, #0]
    f20c:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f210:	e893 0003 	ldmia.w	r3, {r0, r1}
    f214:	4662      	mov	r2, ip
    f216:	4b3f      	ldr	r3, [pc, #252]	(f314 <_ZN10ActionGoTo6updateEv+0x14c>)
    f218:	f006 fe5c 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            status = 3;
    f21c:	687a      	ldr	r2, [r7, #4]
    f21e:	f04f 0303 	mov.w	r3, #3	; 0x3
    f222:	60d3      	str	r3, [r2, #12]
    f224:	e06b      	b.n	f2fe <_ZN10ActionGoTo6updateEv+0x136>
        }

    }
    else if (status ==1) // on recule
    f226:	687b      	ldr	r3, [r7, #4]
    f228:	68db      	ldr	r3, [r3, #12]
    f22a:	2b01      	cmp	r3, #1
    f22c:	d129      	bne.n	f282 <_ZN10ActionGoTo6updateEv+0xba>
    {
        Position vect = intermediateGoalPosition - Odometrie::odometrie->getPos().getPosition();
    f22e:	687b      	ldr	r3, [r7, #4]
    f230:	f103 0428 	add.w	r4, r3, #40	; 0x28
    f234:	4b35      	ldr	r3, [pc, #212]	(f30c <_ZN10ActionGoTo6updateEv+0x144>)
    f236:	681a      	ldr	r2, [r3, #0]
    f238:	f107 0338 	add.w	r3, r7, #56	; 0x38
    f23c:	4618      	mov	r0, r3
    f23e:	4611      	mov	r1, r2
    f240:	f7fa fc5e 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    f244:	f107 0330 	add.w	r3, r7, #48	; 0x30
    f248:	f107 0238 	add.w	r2, r7, #56	; 0x38
    f24c:	4618      	mov	r0, r3
    f24e:	4611      	mov	r1, r2
    f250:	f7ff fdcc 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    f254:	f107 0314 	add.w	r3, r7, #20	; 0x14
    f258:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f25c:	4618      	mov	r0, r3
    f25e:	4621      	mov	r1, r4
    f260:	f7ff fbf6 	bl	ea50 <_ZNK8PositionmiERKS_>
        //std::cout << "status = 1 " << vect.getNorme() << std::endl;
        if (vect.getNorme() < precision) // now we have
    f264:	f107 0314 	add.w	r3, r7, #20	; 0x14
    f268:	4618      	mov	r0, r3
    f26a:	f7ff fcff 	bl	ec6c <_ZNK8Position8getNormeEv>
    f26e:	4602      	mov	r2, r0
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	6a5b      	ldr	r3, [r3, #36]
    f274:	4610      	mov	r0, r2
    f276:	4619      	mov	r1, r3
    f278:	f00b ff98 	bl	1b1ac <__aeabi_fcmplt>
    f27c:	4603      	mov	r3, r0
    f27e:	2b00      	cmp	r3, #0
    f280:	e03d      	b.n	f2fe <_ZN10ActionGoTo6updateEv+0x136>
                sign = -1;
            else if (vect.getX() < 0)
            vect = vect + Position(500*vect.getY(), 500*vect.getX());*/
        }
    }
    else if (status == 2)
    f282:	687b      	ldr	r3, [r7, #4]
    f284:	68db      	ldr	r3, [r3, #12]
    f286:	2b02      	cmp	r3, #2
    f288:	d039      	beq.n	f2fe <_ZN10ActionGoTo6updateEv+0x136>
                StrategieV2::setCurrentGoal(goalPosition, goBack);
                status = 3;
            }
        }*/
    }
    else if (status == 3)
    f28a:	687b      	ldr	r3, [r7, #4]
    f28c:	68db      	ldr	r3, [r3, #12]
    f28e:	2b03      	cmp	r3, #3
    f290:	d135      	bne.n	f2fe <_ZN10ActionGoTo6updateEv+0x136>
    {
//        allumerLED();
        //std::cout << "status = 3" << std::endl;
        Position vect = goalPosition - Odometrie::odometrie->getPos().getPosition();
    f292:	687b      	ldr	r3, [r7, #4]
    f294:	f103 0404 	add.w	r4, r3, #4	; 0x4
    f298:	4b1c      	ldr	r3, [pc, #112]	(f30c <_ZN10ActionGoTo6updateEv+0x144>)
    f29a:	681a      	ldr	r2, [r3, #0]
    f29c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    f2a0:	4618      	mov	r0, r3
    f2a2:	4611      	mov	r1, r2
    f2a4:	f7fa fc2c 	bl	9b00 <_ZNK9Odometrie6getPosEv>
    f2a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
    f2ac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    f2b0:	4618      	mov	r0, r3
    f2b2:	4611      	mov	r1, r2
    f2b4:	f7ff fd9a 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
    f2b8:	f107 030c 	add.w	r3, r7, #12	; 0xc
    f2bc:	f107 0244 	add.w	r2, r7, #68	; 0x44
    f2c0:	4618      	mov	r0, r3
    f2c2:	4621      	mov	r1, r4
    f2c4:	f7ff fbc4 	bl	ea50 <_ZNK8PositionmiERKS_>
        //std::cout << vect.getNorme() << std::endl;
        //std::cout << Odometrie::odometrie->getPos().getPosition().getX() << " "<< Odometrie::odometrie->getPos().getPosition().getY()   << std::endl;
        if (vect.getNorme() < precision)
    f2c8:	f107 030c 	add.w	r3, r7, #12	; 0xc
    f2cc:	4618      	mov	r0, r3
    f2ce:	f7ff fccd 	bl	ec6c <_ZNK8Position8getNormeEv>
    f2d2:	4602      	mov	r2, r0
    f2d4:	687b      	ldr	r3, [r7, #4]
    f2d6:	6a59      	ldr	r1, [r3, #36]
    f2d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    f2dc:	70fb      	strb	r3, [r7, #3]
    f2de:	4610      	mov	r0, r2
    f2e0:	f00b ff64 	bl	1b1ac <__aeabi_fcmplt>
    f2e4:	4603      	mov	r3, r0
    f2e6:	2b00      	cmp	r3, #0
    f2e8:	d002      	beq.n	f2f0 <_ZN10ActionGoTo6updateEv+0x128>
    f2ea:	f04f 0301 	mov.w	r3, #1	; 0x1
    f2ee:	70fb      	strb	r3, [r7, #3]
    f2f0:	78fb      	ldrb	r3, [r7, #3]
    f2f2:	2b00      	cmp	r3, #0
    f2f4:	d003      	beq.n	f2fe <_ZN10ActionGoTo6updateEv+0x136>
            status = -1;
    f2f6:	687a      	ldr	r2, [r7, #4]
    f2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2fc:	60d3      	str	r3, [r2, #12]
    }
    return status;
    f2fe:	687b      	ldr	r3, [r7, #4]
    f300:	68db      	ldr	r3, [r3, #12]
}
    f302:	4618      	mov	r0, r3
    f304:	f107 075c 	add.w	r7, r7, #92	; 0x5c
    f308:	46bd      	mov	sp, r7
    f30a:	bd90      	pop	{r4, r7, pc}
    f30c:	20000578 	.word	0x20000578
    f310:	c2c80000 	.word	0xc2c80000
    f314:	40400000 	.word	0x40400000

0000f318 <_ZN10ActionGoToD0Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f318:	b580      	push	{r7, lr}
    f31a:	b082      	sub	sp, #8
    f31c:	af00      	add	r7, sp, #0
    f31e:	6078      	str	r0, [r7, #4]
    f320:	687a      	ldr	r2, [r7, #4]
    f322:	4b0a      	ldr	r3, [pc, #40]	(f34c <_ZN10ActionGoToD0Ev+0x34>)
    f324:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f326:	687b      	ldr	r3, [r7, #4]
    f328:	4618      	mov	r0, r3
    f32a:	f005 fde3 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
    f32e:	f04f 0301 	mov.w	r3, #1	; 0x1
    f332:	b2db      	uxtb	r3, r3
    f334:	2b00      	cmp	r3, #0
    f336:	d002      	beq.n	f33e <_ZN10ActionGoToD0Ev+0x26>
    f338:	6878      	ldr	r0, [r7, #4]
    f33a:	f7ff fa5b 	bl	e7f4 <_ZdlPv>
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	4618      	mov	r0, r3
    f342:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f346:	46bd      	mov	sp, r7
    f348:	bd80      	pop	{r7, pc}
    f34a:	46c0      	nop			(mov r8, r8)
    f34c:	00021f50 	.word	0x00021f50

0000f350 <_ZN10ActionGoToD1Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f350:	b580      	push	{r7, lr}
    f352:	b082      	sub	sp, #8
    f354:	af00      	add	r7, sp, #0
    f356:	6078      	str	r0, [r7, #4]
    f358:	687a      	ldr	r2, [r7, #4]
    f35a:	4b0a      	ldr	r3, [pc, #40]	(f384 <_ZN10ActionGoToD1Ev+0x34>)
    f35c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f35e:	687b      	ldr	r3, [r7, #4]
    f360:	4618      	mov	r0, r3
    f362:	f005 fdc7 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
    f366:	f04f 0300 	mov.w	r3, #0	; 0x0
    f36a:	b2db      	uxtb	r3, r3
    f36c:	2b00      	cmp	r3, #0
    f36e:	d002      	beq.n	f376 <_ZN10ActionGoToD1Ev+0x26>
    f370:	6878      	ldr	r0, [r7, #4]
    f372:	f7ff fa3f 	bl	e7f4 <_ZdlPv>
    f376:	687b      	ldr	r3, [r7, #4]
    f378:	4618      	mov	r0, r3
    f37a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f37e:	46bd      	mov	sp, r7
    f380:	bd80      	pop	{r7, pc}
    f382:	46c0      	nop			(mov r8, r8)
    f384:	00021f50 	.word	0x00021f50

0000f388 <_ZN10ActionGoToD2Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f388:	b580      	push	{r7, lr}
    f38a:	b082      	sub	sp, #8
    f38c:	af00      	add	r7, sp, #0
    f38e:	6078      	str	r0, [r7, #4]
    f390:	687a      	ldr	r2, [r7, #4]
    f392:	4b0a      	ldr	r3, [pc, #40]	(f3bc <_ZN10ActionGoToD2Ev+0x34>)
    f394:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f396:	687b      	ldr	r3, [r7, #4]
    f398:	4618      	mov	r0, r3
    f39a:	f005 fdab 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
    f39e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f3a2:	b2db      	uxtb	r3, r3
    f3a4:	2b00      	cmp	r3, #0
    f3a6:	d002      	beq.n	f3ae <_ZN10ActionGoToD2Ev+0x26>
    f3a8:	6878      	ldr	r0, [r7, #4]
    f3aa:	f7ff fa23 	bl	e7f4 <_ZdlPv>
    f3ae:	687b      	ldr	r3, [r7, #4]
    f3b0:	4618      	mov	r0, r3
    f3b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f3b6:	46bd      	mov	sp, r7
    f3b8:	bd80      	pop	{r7, pc}
    f3ba:	46c0      	nop			(mov r8, r8)
    f3bc:	00021f50 	.word	0x00021f50

0000f3c0 <_ZN10ActionGoToC1E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f3c0:	b580      	push	{r7, lr}
    f3c2:	b084      	sub	sp, #16
    f3c4:	af00      	add	r7, sp, #0
    f3c6:	60f8      	str	r0, [r7, #12]
    f3c8:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f3cc:	e880 0006 	stmia.w	r0, {r1, r2}
    f3d0:	70fb      	strb	r3, [r7, #3]
    f3d2:	68fb      	ldr	r3, [r7, #12]
    f3d4:	4618      	mov	r0, r3
    f3d6:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f3da:	e893 0006 	ldmia.w	r3, {r1, r2}
    f3de:	f005 fdc9 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
    f3e2:	68fa      	ldr	r2, [r7, #12]
    f3e4:	4b0f      	ldr	r3, [pc, #60]	(f424 <_ZN10ActionGoToC1E8Positionbf+0x64>)
    f3e6:	6013      	str	r3, [r2, #0]
    f3e8:	68fb      	ldr	r3, [r7, #12]
    f3ea:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f3ee:	4618      	mov	r0, r3
    f3f0:	f7ff fa98 	bl	e924 <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f3f4:	68fa      	ldr	r2, [r7, #12]
    f3f6:	78fb      	ldrb	r3, [r7, #3]
    f3f8:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f3fa:	68fa      	ldr	r2, [r7, #12]
    f3fc:	4b0a      	ldr	r3, [pc, #40]	(f428 <_ZN10ActionGoToC1E8Positionbf+0x68>)
    f3fe:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f400:	68fa      	ldr	r2, [r7, #12]
    f402:	f04f 0300 	mov.w	r3, #0	; 0x0
    f406:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f408:	68fa      	ldr	r2, [r7, #12]
    f40a:	f04f 0301 	mov.w	r3, #1	; 0x1
    f40e:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f410:	68fa      	ldr	r2, [r7, #12]
    f412:	69bb      	ldr	r3, [r7, #24]
    f414:	6253      	str	r3, [r2, #36]
}
    f416:	68fb      	ldr	r3, [r7, #12]
    f418:	4618      	mov	r0, r3
    f41a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f41e:	46bd      	mov	sp, r7
    f420:	bd80      	pop	{r7, pc}
    f422:	46c0      	nop			(mov r8, r8)
    f424:	00021f50 	.word	0x00021f50
    f428:	00000000 	.word	0x00000000

0000f42c <_ZN10ActionGoToC2E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f42c:	b580      	push	{r7, lr}
    f42e:	b084      	sub	sp, #16
    f430:	af00      	add	r7, sp, #0
    f432:	60f8      	str	r0, [r7, #12]
    f434:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f438:	e880 0006 	stmia.w	r0, {r1, r2}
    f43c:	70fb      	strb	r3, [r7, #3]
    f43e:	68fb      	ldr	r3, [r7, #12]
    f440:	4618      	mov	r0, r3
    f442:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f446:	e893 0006 	ldmia.w	r3, {r1, r2}
    f44a:	f005 fd93 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
    f44e:	68fa      	ldr	r2, [r7, #12]
    f450:	4b0f      	ldr	r3, [pc, #60]	(f490 <_ZN10ActionGoToC2E8Positionbf+0x64>)
    f452:	6013      	str	r3, [r2, #0]
    f454:	68fb      	ldr	r3, [r7, #12]
    f456:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f45a:	4618      	mov	r0, r3
    f45c:	f7ff fa62 	bl	e924 <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f460:	68fa      	ldr	r2, [r7, #12]
    f462:	78fb      	ldrb	r3, [r7, #3]
    f464:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f466:	68fa      	ldr	r2, [r7, #12]
    f468:	4b0a      	ldr	r3, [pc, #40]	(f494 <_ZN10ActionGoToC2E8Positionbf+0x68>)
    f46a:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f46c:	68fa      	ldr	r2, [r7, #12]
    f46e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f472:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f474:	68fa      	ldr	r2, [r7, #12]
    f476:	f04f 0301 	mov.w	r3, #1	; 0x1
    f47a:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f47c:	68fa      	ldr	r2, [r7, #12]
    f47e:	69bb      	ldr	r3, [r7, #24]
    f480:	6253      	str	r3, [r2, #36]
}
    f482:	68fb      	ldr	r3, [r7, #12]
    f484:	4618      	mov	r0, r3
    f486:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f48a:	46bd      	mov	sp, r7
    f48c:	bd80      	pop	{r7, pc}
    f48e:	46c0      	nop			(mov r8, r8)
    f490:	00021f50 	.word	0x00021f50
    f494:	00000000 	.word	0x00000000

0000f498 <_ZN4Clap6updateEv>:
}


Clap::~Clap(){}

int Clap::update()
    f498:	b590      	push	{r4, r7, lr}
    f49a:	b085      	sub	sp, #20
    f49c:	af02      	add	r7, sp, #8
    f49e:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
    f4a0:	687b      	ldr	r3, [r7, #4]
    f4a2:	68db      	ldr	r3, [r3, #12]
    f4a4:	2b00      	cmp	r3, #0
    f4a6:	d106      	bne.n	f4b6 <_ZN4Clap6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "clap";
        #endif
        status++;
    f4a8:	687b      	ldr	r3, [r7, #4]
    f4aa:	68db      	ldr	r3, [r3, #12]
    f4ac:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f4b0:	687b      	ldr	r3, [r7, #4]
    f4b2:	60da      	str	r2, [r3, #12]
    f4b4:	e105      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 1)
    f4b6:	687b      	ldr	r3, [r7, #4]
    f4b8:	68db      	ldr	r3, [r3, #12]
    f4ba:	2b01      	cmp	r3, #1
    f4bc:	d114      	bne.n	f4e8 <_ZN4Clap6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
    f4be:	687b      	ldr	r3, [r7, #4]
    f4c0:	f893 c010 	ldrb.w	ip, [r3, #16]
    f4c4:	687a      	ldr	r2, [r7, #4]
    f4c6:	4b82      	ldr	r3, [pc, #520]	(f6d0 <_ZN4Clap6updateEv+0x238>)
    f4c8:	9300      	str	r3, [sp, #0]
    f4ca:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f4ce:	e893 0003 	ldmia.w	r3, {r0, r1}
    f4d2:	4662      	mov	r2, ip
    f4d4:	4b7f      	ldr	r3, [pc, #508]	(f6d4 <_ZN4Clap6updateEv+0x23c>)
    f4d6:	f006 fcfd 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f4da:	687b      	ldr	r3, [r7, #4]
    f4dc:	68db      	ldr	r3, [r3, #12]
    f4de:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f4e2:	687b      	ldr	r3, [r7, #4]
    f4e4:	60da      	str	r2, [r3, #12]
    f4e6:	e0ec      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 2)
    f4e8:	687b      	ldr	r3, [r7, #4]
    f4ea:	68db      	ldr	r3, [r3, #12]
    f4ec:	2b02      	cmp	r3, #2
    f4ee:	d11a      	bne.n	f526 <_ZN4Clap6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition))
    f4f0:	687b      	ldr	r3, [r7, #4]
    f4f2:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f4f6:	e893 0003 	ldmia.w	r3, {r0, r1}
    f4fa:	4a77      	ldr	r2, [pc, #476]	(f6d8 <_ZN4Clap6updateEv+0x240>)
    f4fc:	f7f8 fd9e 	bl	803c <_ZN7Command6isNearE8Positionf>
    f500:	4603      	mov	r3, r0
    f502:	2b00      	cmp	r3, #0
    f504:	f000 80dd 	beq.w	f6c2 <_ZN4Clap6updateEv+0x22a>
        {
            StrategieV2::lookAt(positionArrivee);
    f508:	687b      	ldr	r3, [r7, #4]
    f50a:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f50e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f512:	4a72      	ldr	r2, [pc, #456]	(f6dc <_ZN4Clap6updateEv+0x244>)
    f514:	f006 fc46 	bl	15da4 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
    f518:	687b      	ldr	r3, [r7, #4]
    f51a:	68db      	ldr	r3, [r3, #12]
    f51c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	60da      	str	r2, [r3, #12]
    f524:	e0cd      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if (status == 3)
    f526:	687b      	ldr	r3, [r7, #4]
    f528:	68db      	ldr	r3, [r3, #12]
    f52a:	2b03      	cmp	r3, #3
    f52c:	d143      	bne.n	f5b6 <_ZN4Clap6updateEv+0x11e>
    {
        if (Command::isLookingAt(positionArrivee))
    f52e:	687b      	ldr	r3, [r7, #4]
    f530:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f534:	e893 0003 	ldmia.w	r3, {r0, r1}
    f538:	4a69      	ldr	r2, [pc, #420]	(f6e0 <_ZN4Clap6updateEv+0x248>)
    f53a:	f7f8 fcc3 	bl	7ec4 <_ZN7Command11isLookingAtE8Positionf>
    f53e:	4603      	mov	r3, r0
    f540:	2b00      	cmp	r3, #0
    f542:	f000 80be 	beq.w	f6c2 <_ZN4Clap6updateEv+0x22a>
        {
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f546:	687b      	ldr	r3, [r7, #4]
    f548:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f54c:	4618      	mov	r0, r3
    f54e:	f7ff fa25 	bl	e99c <_ZNK8Position4getXEv>
    f552:	4604      	mov	r4, r0
    f554:	687b      	ldr	r3, [r7, #4]
    f556:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f55a:	4618      	mov	r0, r3
    f55c:	f7ff fa1e 	bl	e99c <_ZNK8Position4getXEv>
    f560:	4603      	mov	r3, r0
    f562:	4620      	mov	r0, r4
    f564:	4619      	mov	r1, r3
    f566:	f00b fb7b 	bl	1ac60 <__aeabi_fsub>
    f56a:	4603      	mov	r3, r0
    f56c:	461a      	mov	r2, r3
    f56e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f572:	70fb      	strb	r3, [r7, #3]
    f574:	4610      	mov	r0, r2
    f576:	495b      	ldr	r1, [pc, #364]	(f6e4 <_ZN4Clap6updateEv+0x24c>)
    f578:	f00b fe36 	bl	1b1e8 <__aeabi_fcmpgt>
    f57c:	4603      	mov	r3, r0
    f57e:	2b00      	cmp	r3, #0
    f580:	d002      	beq.n	f588 <_ZN4Clap6updateEv+0xf0>
    f582:	f04f 0301 	mov.w	r3, #1	; 0x1
    f586:	70fb      	strb	r3, [r7, #3]
    f588:	78fb      	ldrb	r3, [r7, #3]
    f58a:	2b00      	cmp	r3, #0
    f58c:	d006      	beq.n	f59c <_ZN4Clap6updateEv+0x104>
                BrasLateral::getRight()->expand();
    f58e:	f7f6 f87f 	bl	5690 <_ZN11BrasLateral8getRightEv>
    f592:	4603      	mov	r3, r0
    f594:	4618      	mov	r0, r3
    f596:	f7f5 ffb3 	bl	5500 <_ZN11BrasLateral6expandEv>
    f59a:	e005      	b.n	f5a8 <_ZN4Clap6updateEv+0x110>
            else
                BrasLateral::getLeft()->expand();
    f59c:	f7f6 f888 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    f5a0:	4603      	mov	r3, r0
    f5a2:	4618      	mov	r0, r3
    f5a4:	f7f5 ffac 	bl	5500 <_ZN11BrasLateral6expandEv>
            status++;
    f5a8:	687b      	ldr	r3, [r7, #4]
    f5aa:	68db      	ldr	r3, [r3, #12]
    f5ac:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f5b0:	687b      	ldr	r3, [r7, #4]
    f5b2:	60da      	str	r2, [r3, #12]
    f5b4:	e085      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que le bras du robot s'ouvre : 50ms par incrémentation du status
    f5b6:	687b      	ldr	r3, [r7, #4]
    f5b8:	68db      	ldr	r3, [r3, #12]
    f5ba:	2b35      	cmp	r3, #53
    f5bc:	dc0a      	bgt.n	f5d4 <_ZN4Clap6updateEv+0x13c>
    f5be:	687b      	ldr	r3, [r7, #4]
    f5c0:	68db      	ldr	r3, [r3, #12]
    f5c2:	2b00      	cmp	r3, #0
    f5c4:	db06      	blt.n	f5d4 <_ZN4Clap6updateEv+0x13c>
    {
        status++;
    f5c6:	687b      	ldr	r3, [r7, #4]
    f5c8:	68db      	ldr	r3, [r3, #12]
    f5ca:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f5ce:	687b      	ldr	r3, [r7, #4]
    f5d0:	60da      	str	r2, [r3, #12]
    f5d2:	e076      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 54)
    f5d4:	687b      	ldr	r3, [r7, #4]
    f5d6:	68db      	ldr	r3, [r3, #12]
    f5d8:	2b36      	cmp	r3, #54
    f5da:	d114      	bne.n	f606 <_ZN4Clap6updateEv+0x16e>
    {
        StrategieV2::setCurrentGoal(positionArrivee, goBack);
    f5dc:	687b      	ldr	r3, [r7, #4]
    f5de:	f893 c010 	ldrb.w	ip, [r3, #16]
    f5e2:	687a      	ldr	r2, [r7, #4]
    f5e4:	4b3a      	ldr	r3, [pc, #232]	(f6d0 <_ZN4Clap6updateEv+0x238>)
    f5e6:	9300      	str	r3, [sp, #0]
    f5e8:	f102 0320 	add.w	r3, r2, #32	; 0x20
    f5ec:	e893 0003 	ldmia.w	r3, {r0, r1}
    f5f0:	4662      	mov	r2, ip
    f5f2:	4b38      	ldr	r3, [pc, #224]	(f6d4 <_ZN4Clap6updateEv+0x23c>)
    f5f4:	f006 fc6e 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f5f8:	687b      	ldr	r3, [r7, #4]
    f5fa:	68db      	ldr	r3, [r3, #12]
    f5fc:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	60da      	str	r2, [r3, #12]
    f604:	e05d      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 55)
    f606:	687b      	ldr	r3, [r7, #4]
    f608:	68db      	ldr	r3, [r3, #12]
    f60a:	2b37      	cmp	r3, #55
    f60c:	d142      	bne.n	f694 <_ZN4Clap6updateEv+0x1fc>
    {
        if (Command::isNear(positionArrivee))
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f614:	e893 0003 	ldmia.w	r3, {r0, r1}
    f618:	4a2f      	ldr	r2, [pc, #188]	(f6d8 <_ZN4Clap6updateEv+0x240>)
    f61a:	f7f8 fd0f 	bl	803c <_ZN7Command6isNearE8Positionf>
    f61e:	4603      	mov	r3, r0
    f620:	2b00      	cmp	r3, #0
    f622:	d04e      	beq.n	f6c2 <_ZN4Clap6updateEv+0x22a>
        {
            //fermer bras
            #ifndef ROBOTHW
            qDebug() << "On ferme le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f624:	687b      	ldr	r3, [r7, #4]
    f626:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f62a:	4618      	mov	r0, r3
    f62c:	f7ff f9b6 	bl	e99c <_ZNK8Position4getXEv>
    f630:	4604      	mov	r4, r0
    f632:	687b      	ldr	r3, [r7, #4]
    f634:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f638:	4618      	mov	r0, r3
    f63a:	f7ff f9af 	bl	e99c <_ZNK8Position4getXEv>
    f63e:	4603      	mov	r3, r0
    f640:	4620      	mov	r0, r4
    f642:	4619      	mov	r1, r3
    f644:	f00b fb0c 	bl	1ac60 <__aeabi_fsub>
    f648:	4603      	mov	r3, r0
    f64a:	461a      	mov	r2, r3
    f64c:	f04f 0300 	mov.w	r3, #0	; 0x0
    f650:	70bb      	strb	r3, [r7, #2]
    f652:	4610      	mov	r0, r2
    f654:	4923      	ldr	r1, [pc, #140]	(f6e4 <_ZN4Clap6updateEv+0x24c>)
    f656:	f00b fdc7 	bl	1b1e8 <__aeabi_fcmpgt>
    f65a:	4603      	mov	r3, r0
    f65c:	2b00      	cmp	r3, #0
    f65e:	d002      	beq.n	f666 <_ZN4Clap6updateEv+0x1ce>
    f660:	f04f 0301 	mov.w	r3, #1	; 0x1
    f664:	70bb      	strb	r3, [r7, #2]
    f666:	78bb      	ldrb	r3, [r7, #2]
    f668:	2b00      	cmp	r3, #0
    f66a:	d006      	beq.n	f67a <_ZN4Clap6updateEv+0x1e2>
                BrasLateral::getLeft()->collapse();
    f66c:	f7f6 f820 	bl	56b0 <_ZN11BrasLateral7getLeftEv>
    f670:	4603      	mov	r3, r0
    f672:	4618      	mov	r0, r3
    f674:	f7f5 ff34 	bl	54e0 <_ZN11BrasLateral8collapseEv>
    f678:	e005      	b.n	f686 <_ZN4Clap6updateEv+0x1ee>
            else
                BrasLateral::getRight()->collapse();
    f67a:	f7f6 f809 	bl	5690 <_ZN11BrasLateral8getRightEv>
    f67e:	4603      	mov	r3, r0
    f680:	4618      	mov	r0, r3
    f682:	f7f5 ff2d 	bl	54e0 <_ZN11BrasLateral8collapseEv>
            status++;
    f686:	687b      	ldr	r3, [r7, #4]
    f688:	68db      	ldr	r3, [r3, #12]
    f68a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f68e:	687b      	ldr	r3, [r7, #4]
    f690:	60da      	str	r2, [r3, #12]
    f692:	e016      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 105) && (status > -1))
    f694:	687b      	ldr	r3, [r7, #4]
    f696:	68db      	ldr	r3, [r3, #12]
    f698:	2b69      	cmp	r3, #105
    f69a:	dc0a      	bgt.n	f6b2 <_ZN4Clap6updateEv+0x21a>
    f69c:	687b      	ldr	r3, [r7, #4]
    f69e:	68db      	ldr	r3, [r3, #12]
    f6a0:	2b00      	cmp	r3, #0
    f6a2:	db06      	blt.n	f6b2 <_ZN4Clap6updateEv+0x21a>
    {
        status++;
    f6a4:	687b      	ldr	r3, [r7, #4]
    f6a6:	68db      	ldr	r3, [r3, #12]
    f6a8:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f6ac:	687b      	ldr	r3, [r7, #4]
    f6ae:	60da      	str	r2, [r3, #12]
    f6b0:	e007      	b.n	f6c2 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 106){
    f6b2:	687b      	ldr	r3, [r7, #4]
    f6b4:	68db      	ldr	r3, [r3, #12]
    f6b6:	2b6a      	cmp	r3, #106
    f6b8:	d103      	bne.n	f6c2 <_ZN4Clap6updateEv+0x22a>
        status = -1;
    f6ba:	687a      	ldr	r2, [r7, #4]
    f6bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f6c0:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape clap finie";
#endif
    }

    return status;
    f6c2:	687b      	ldr	r3, [r7, #4]
    f6c4:	68db      	ldr	r3, [r3, #12]
}
    f6c6:	4618      	mov	r0, r3
    f6c8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f6cc:	46bd      	mov	sp, r7
    f6ce:	bd90      	pop	{r4, r7, pc}
    f6d0:	c2c80000 	.word	0xc2c80000
    f6d4:	40400000 	.word	0x40400000
    f6d8:	41f00000 	.word	0x41f00000
    f6dc:	3cf5c28f 	.word	0x3cf5c28f
    f6e0:	3db2b8c2 	.word	0x3db2b8c2
    f6e4:	00000000 	.word	0x00000000

0000f6e8 <_ZN4ClapD0Ev>:
    this->positionArrivee = positionArrivee;
    this->goBack = false;
}


Clap::~Clap(){}
    f6e8:	b580      	push	{r7, lr}
    f6ea:	b082      	sub	sp, #8
    f6ec:	af00      	add	r7, sp, #0
    f6ee:	6078      	str	r0, [r7, #4]
    f6f0:	687a      	ldr	r2, [r7, #4]
    f6f2:	4b0a      	ldr	r3, [pc, #40]	(f71c <_ZN4ClapD0Ev+0x34>)
    f6f4:	6013      	str	r3, [r2, #0]
    f6f6:	687b      	ldr	r3, [r7, #4]
    f6f8:	4618      	mov	r0, r3
    f6fa:	f005 fbfb 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
    f6fe:	f04f 0301 	mov.w	r3, #1	; 0x1
    f702:	b2db      	uxtb	r3, r3
    f704:	2b00      	cmp	r3, #0
    f706:	d002      	beq.n	f70e <_ZN4ClapD0Ev+0x26>
    f708:	6878      	ldr	r0, [r7, #4]
    f70a:	f7ff f873 	bl	e7f4 <_ZdlPv>
    f70e:	687b      	ldr	r3, [r7, #4]
    f710:	4618      	mov	r0, r3
    f712:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f716:	46bd      	mov	sp, r7
    f718:	bd80      	pop	{r7, pc}
    f71a:	46c0      	nop			(mov r8, r8)
    f71c:	00021f70 	.word	0x00021f70

0000f720 <_ZN4ClapD1Ev>:
    f720:	b580      	push	{r7, lr}
    f722:	b082      	sub	sp, #8
    f724:	af00      	add	r7, sp, #0
    f726:	6078      	str	r0, [r7, #4]
    f728:	687a      	ldr	r2, [r7, #4]
    f72a:	4b0a      	ldr	r3, [pc, #40]	(f754 <_ZN4ClapD1Ev+0x34>)
    f72c:	6013      	str	r3, [r2, #0]
    f72e:	687b      	ldr	r3, [r7, #4]
    f730:	4618      	mov	r0, r3
    f732:	f005 fbdf 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
    f736:	f04f 0300 	mov.w	r3, #0	; 0x0
    f73a:	b2db      	uxtb	r3, r3
    f73c:	2b00      	cmp	r3, #0
    f73e:	d002      	beq.n	f746 <_ZN4ClapD1Ev+0x26>
    f740:	6878      	ldr	r0, [r7, #4]
    f742:	f7ff f857 	bl	e7f4 <_ZdlPv>
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	4618      	mov	r0, r3
    f74a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f74e:	46bd      	mov	sp, r7
    f750:	bd80      	pop	{r7, pc}
    f752:	46c0      	nop			(mov r8, r8)
    f754:	00021f70 	.word	0x00021f70

0000f758 <_ZN4ClapD2Ev>:
    f758:	b580      	push	{r7, lr}
    f75a:	b082      	sub	sp, #8
    f75c:	af00      	add	r7, sp, #0
    f75e:	6078      	str	r0, [r7, #4]
    f760:	687a      	ldr	r2, [r7, #4]
    f762:	4b0a      	ldr	r3, [pc, #40]	(f78c <_ZN4ClapD2Ev+0x34>)
    f764:	6013      	str	r3, [r2, #0]
    f766:	687b      	ldr	r3, [r7, #4]
    f768:	4618      	mov	r0, r3
    f76a:	f005 fbc3 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
    f76e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f772:	b2db      	uxtb	r3, r3
    f774:	2b00      	cmp	r3, #0
    f776:	d002      	beq.n	f77e <_ZN4ClapD2Ev+0x26>
    f778:	6878      	ldr	r0, [r7, #4]
    f77a:	f7ff f83b 	bl	e7f4 <_ZdlPv>
    f77e:	687b      	ldr	r3, [r7, #4]
    f780:	4618      	mov	r0, r3
    f782:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f786:	46bd      	mov	sp, r7
    f788:	bd80      	pop	{r7, pc}
    f78a:	46c0      	nop			(mov r8, r8)
    f78c:	00021f70 	.word	0x00021f70

0000f790 <_ZN4ClapC1E8PositionS0_>:
#include "braslateral.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    f790:	b082      	sub	sp, #8
    f792:	b580      	push	{r7, lr}
    f794:	b084      	sub	sp, #16
    f796:	af00      	add	r7, sp, #0
    f798:	60f8      	str	r0, [r7, #12]
    f79a:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f79e:	e880 0006 	stmia.w	r0, {r1, r2}
    f7a2:	61fb      	str	r3, [r7, #28]
    f7a4:	68fb      	ldr	r3, [r7, #12]
    f7a6:	4618      	mov	r0, r3
    f7a8:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f7ac:	e893 0006 	ldmia.w	r3, {r1, r2}
    f7b0:	f005 fbe0 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
    f7b4:	68fa      	ldr	r2, [r7, #12]
    f7b6:	4b12      	ldr	r3, [pc, #72]	(f800 <_ZN4ClapC1E8PositionS0_+0x70>)
    f7b8:	6013      	str	r3, [r2, #0]
    f7ba:	68fb      	ldr	r3, [r7, #12]
    f7bc:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f7c0:	4618      	mov	r0, r3
    f7c2:	f7ff f8af 	bl	e924 <_ZN8PositionC1Ev>
    f7c6:	68fb      	ldr	r3, [r7, #12]
    f7c8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f7cc:	4618      	mov	r0, r3
    f7ce:	f7ff f8a9 	bl	e924 <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    f7d2:	68fb      	ldr	r3, [r7, #12]
    f7d4:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f7d8:	4618      	mov	r0, r3
    f7da:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f7de:	e893 0006 	ldmia.w	r3, {r1, r2}
    f7e2:	f7ff f95b 	bl	ea9c <_ZN8PositionaSES_>
    this->goBack = false;
    f7e6:	68fa      	ldr	r2, [r7, #12]
    f7e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    f7ec:	7413      	strb	r3, [r2, #16]
}
    f7ee:	68fb      	ldr	r3, [r7, #12]
    f7f0:	4618      	mov	r0, r3
    f7f2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f7f6:	46bd      	mov	sp, r7
    f7f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f7fc:	b002      	add	sp, #8
    f7fe:	4770      	bx	lr
    f800:	00021f70 	.word	0x00021f70

0000f804 <_ZN4ClapC2E8PositionS0_>:
#include "braslateral.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    f804:	b082      	sub	sp, #8
    f806:	b580      	push	{r7, lr}
    f808:	b084      	sub	sp, #16
    f80a:	af00      	add	r7, sp, #0
    f80c:	60f8      	str	r0, [r7, #12]
    f80e:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f812:	e880 0006 	stmia.w	r0, {r1, r2}
    f816:	61fb      	str	r3, [r7, #28]
    f818:	68fb      	ldr	r3, [r7, #12]
    f81a:	4618      	mov	r0, r3
    f81c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f820:	e893 0006 	ldmia.w	r3, {r1, r2}
    f824:	f005 fba6 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
    f828:	68fa      	ldr	r2, [r7, #12]
    f82a:	4b12      	ldr	r3, [pc, #72]	(f874 <_ZN4ClapC2E8PositionS0_+0x70>)
    f82c:	6013      	str	r3, [r2, #0]
    f82e:	68fb      	ldr	r3, [r7, #12]
    f830:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f834:	4618      	mov	r0, r3
    f836:	f7ff f875 	bl	e924 <_ZN8PositionC1Ev>
    f83a:	68fb      	ldr	r3, [r7, #12]
    f83c:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f840:	4618      	mov	r0, r3
    f842:	f7ff f86f 	bl	e924 <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    f846:	68fb      	ldr	r3, [r7, #12]
    f848:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f84c:	4618      	mov	r0, r3
    f84e:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f852:	e893 0006 	ldmia.w	r3, {r1, r2}
    f856:	f7ff f921 	bl	ea9c <_ZN8PositionaSES_>
    this->goBack = false;
    f85a:	68fa      	ldr	r2, [r7, #12]
    f85c:	f04f 0300 	mov.w	r3, #0	; 0x0
    f860:	7413      	strb	r3, [r2, #16]
}
    f862:	68fb      	ldr	r3, [r7, #12]
    f864:	4618      	mov	r0, r3
    f866:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f86a:	46bd      	mov	sp, r7
    f86c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f870:	b002      	add	sp, #8
    f872:	4770      	bx	lr
    f874:	00021f70 	.word	0x00021f70

0000f878 <_ZN4ClapC1Ev>:
#include "command.h"
#include "position.h"
#include "braslateral.h"


Clap::Clap(){}
    f878:	b590      	push	{r4, r7, lr}
    f87a:	b085      	sub	sp, #20
    f87c:	af00      	add	r7, sp, #0
    f87e:	6078      	str	r0, [r7, #4]
    f880:	687c      	ldr	r4, [r7, #4]
    f882:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f886:	4618      	mov	r0, r3
    f888:	4910      	ldr	r1, [pc, #64]	(f8cc <_ZN4ClapC1Ev+0x54>)
    f88a:	4a10      	ldr	r2, [pc, #64]	(f8cc <_ZN4ClapC1Ev+0x54>)
    f88c:	f04f 0301 	mov.w	r3, #1	; 0x1
    f890:	f7ff f870 	bl	e974 <_ZN8PositionC1Effb>
    f894:	4620      	mov	r0, r4
    f896:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f89a:	e893 0006 	ldmia.w	r3, {r1, r2}
    f89e:	f005 fb69 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
    f8a2:	687a      	ldr	r2, [r7, #4]
    f8a4:	4b0a      	ldr	r3, [pc, #40]	(f8d0 <_ZN4ClapC1Ev+0x58>)
    f8a6:	6013      	str	r3, [r2, #0]
    f8a8:	687b      	ldr	r3, [r7, #4]
    f8aa:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f8ae:	4618      	mov	r0, r3
    f8b0:	f7ff f838 	bl	e924 <_ZN8PositionC1Ev>
    f8b4:	687b      	ldr	r3, [r7, #4]
    f8b6:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f8ba:	4618      	mov	r0, r3
    f8bc:	f7ff f832 	bl	e924 <_ZN8PositionC1Ev>
    f8c0:	687b      	ldr	r3, [r7, #4]
    f8c2:	4618      	mov	r0, r3
    f8c4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f8c8:	46bd      	mov	sp, r7
    f8ca:	bd90      	pop	{r4, r7, pc}
    f8cc:	00000000 	.word	0x00000000
    f8d0:	00021f70 	.word	0x00021f70

0000f8d4 <_ZN4ClapC2Ev>:
    f8d4:	b590      	push	{r4, r7, lr}
    f8d6:	b085      	sub	sp, #20
    f8d8:	af00      	add	r7, sp, #0
    f8da:	6078      	str	r0, [r7, #4]
    f8dc:	687c      	ldr	r4, [r7, #4]
    f8de:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f8e2:	4618      	mov	r0, r3
    f8e4:	4910      	ldr	r1, [pc, #64]	(f928 <_ZN4ClapC2Ev+0x54>)
    f8e6:	4a10      	ldr	r2, [pc, #64]	(f928 <_ZN4ClapC2Ev+0x54>)
    f8e8:	f04f 0301 	mov.w	r3, #1	; 0x1
    f8ec:	f7ff f842 	bl	e974 <_ZN8PositionC1Effb>
    f8f0:	4620      	mov	r0, r4
    f8f2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f8f6:	e893 0006 	ldmia.w	r3, {r1, r2}
    f8fa:	f005 fb3b 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
    f8fe:	687a      	ldr	r2, [r7, #4]
    f900:	4b0a      	ldr	r3, [pc, #40]	(f92c <_ZN4ClapC2Ev+0x58>)
    f902:	6013      	str	r3, [r2, #0]
    f904:	687b      	ldr	r3, [r7, #4]
    f906:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f90a:	4618      	mov	r0, r3
    f90c:	f7ff f80a 	bl	e924 <_ZN8PositionC1Ev>
    f910:	687b      	ldr	r3, [r7, #4]
    f912:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f916:	4618      	mov	r0, r3
    f918:	f7ff f804 	bl	e924 <_ZN8PositionC1Ev>
    f91c:	687b      	ldr	r3, [r7, #4]
    f91e:	4618      	mov	r0, r3
    f920:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f924:	46bd      	mov	sp, r7
    f926:	bd90      	pop	{r4, r7, pc}
    f928:	00000000 	.word	0x00000000
    f92c:	00021f70 	.word	0x00021f70

0000f930 <_ZN8DijkstraC2Ev>:
//http://fr.wikipedia.org/wiki/Algorithme_de_Dijkstra

#include "dijkstra.h"
#include <math.h>

Dijkstra::Dijkstra(){}
    f930:	b480      	push	{r7}
    f932:	b083      	sub	sp, #12
    f934:	af00      	add	r7, sp, #0
    f936:	6078      	str	r0, [r7, #4]
    f938:	687b      	ldr	r3, [r7, #4]
    f93a:	4618      	mov	r0, r3
    f93c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f940:	46bd      	mov	sp, r7
    f942:	bc80      	pop	{r7}
    f944:	4770      	bx	lr
    f946:	46c0      	nop			(mov r8, r8)

0000f948 <_ZN8DijkstraC1Ev>:
    f948:	b480      	push	{r7}
    f94a:	b083      	sub	sp, #12
    f94c:	af00      	add	r7, sp, #0
    f94e:	6078      	str	r0, [r7, #4]
    f950:	687b      	ldr	r3, [r7, #4]
    f952:	4618      	mov	r0, r3
    f954:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f958:	46bd      	mov	sp, r7
    f95a:	bc80      	pop	{r7}
    f95c:	4770      	bx	lr
    f95e:	46c0      	nop			(mov r8, r8)

0000f960 <_ZN8DijkstraC2EPP5Etapei>:


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    f960:	b480      	push	{r7}
    f962:	b085      	sub	sp, #20
    f964:	af00      	add	r7, sp, #0
    f966:	60f8      	str	r0, [r7, #12]
    f968:	60b9      	str	r1, [r7, #8]
    f96a:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    f96c:	68fa      	ldr	r2, [r7, #12]
    f96e:	68bb      	ldr	r3, [r7, #8]
    f970:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    f972:	68fa      	ldr	r2, [r7, #12]
    f974:	687b      	ldr	r3, [r7, #4]
    f976:	6053      	str	r3, [r2, #4]
}
    f978:	68fb      	ldr	r3, [r7, #12]
    f97a:	4618      	mov	r0, r3
    f97c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f980:	46bd      	mov	sp, r7
    f982:	bc80      	pop	{r7}
    f984:	4770      	bx	lr
    f986:	46c0      	nop			(mov r8, r8)

0000f988 <_ZN8DijkstraC1EPP5Etapei>:
#include <math.h>

Dijkstra::Dijkstra(){}


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    f988:	b480      	push	{r7}
    f98a:	b085      	sub	sp, #20
    f98c:	af00      	add	r7, sp, #0
    f98e:	60f8      	str	r0, [r7, #12]
    f990:	60b9      	str	r1, [r7, #8]
    f992:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    f994:	68fa      	ldr	r2, [r7, #12]
    f996:	68bb      	ldr	r3, [r7, #8]
    f998:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    f99a:	68fa      	ldr	r2, [r7, #12]
    f99c:	687b      	ldr	r3, [r7, #4]
    f99e:	6053      	str	r3, [r2, #4]
}
    f9a0:	68fb      	ldr	r3, [r7, #12]
    f9a2:	4618      	mov	r0, r3
    f9a4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f9a8:	46bd      	mov	sp, r7
    f9aa:	bc80      	pop	{r7}
    f9ac:	4770      	bx	lr
    f9ae:	46c0      	nop			(mov r8, r8)

0000f9b0 <_ZN8Dijkstra16getEtapeCouranteEv>:

Etape* Dijkstra::getEtapeCourante()
    f9b0:	b480      	push	{r7}
    f9b2:	b083      	sub	sp, #12
    f9b4:	af00      	add	r7, sp, #0
    f9b6:	6078      	str	r0, [r7, #4]
{
    return tableauEtapes[this->numeroEtapeCourante];
    f9b8:	687b      	ldr	r3, [r7, #4]
    f9ba:	681a      	ldr	r2, [r3, #0]
    f9bc:	687b      	ldr	r3, [r7, #4]
    f9be:	689b      	ldr	r3, [r3, #8]
    f9c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f9c4:	4413      	add	r3, r2
    f9c6:	681b      	ldr	r3, [r3, #0]
}
    f9c8:	4618      	mov	r0, r3
    f9ca:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f9ce:	46bd      	mov	sp, r7
    f9d0:	bc80      	pop	{r7}
    f9d2:	4770      	bx	lr

0000f9d4 <_ZN8Dijkstra16setEtapeCouranteEi>:
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
}

void Dijkstra::setEtapeCourante(int numeroEtapeCourante)
    f9d4:	b480      	push	{r7}
    f9d6:	b083      	sub	sp, #12
    f9d8:	af00      	add	r7, sp, #0
    f9da:	6078      	str	r0, [r7, #4]
    f9dc:	6039      	str	r1, [r7, #0]
{
    this->numeroEtapeCourante = numeroEtapeCourante;
    f9de:	687a      	ldr	r2, [r7, #4]
    f9e0:	683b      	ldr	r3, [r7, #0]
    f9e2:	6093      	str	r3, [r2, #8]
}
    f9e4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f9e8:	46bd      	mov	sp, r7
    f9ea:	bc80      	pop	{r7}
    f9ec:	4770      	bx	lr
    f9ee:	46c0      	nop			(mov r8, r8)

0000f9f0 <_ZN8Dijkstra13etapeRapporteEP5Etape>:
int Dijkstra::getDistance(Etape* etape)
{
    return etape->getDistance();
}

bool Dijkstra::etapeRapporte(Etape* etape)
    f9f0:	b580      	push	{r7, lr}
    f9f2:	b082      	sub	sp, #8
    f9f4:	af00      	add	r7, sp, #0
    f9f6:	6078      	str	r0, [r7, #4]
    f9f8:	6039      	str	r1, [r7, #0]
{
    return (bool) etape->getScore();
    f9fa:	6838      	ldr	r0, [r7, #0]
    f9fc:	f000 fd6c 	bl	104d8 <_ZN5Etape8getScoreEv>
    fa00:	4603      	mov	r3, r0
    fa02:	2b00      	cmp	r3, #0
    fa04:	bf0c      	ite	eq
    fa06:	2300      	moveq	r3, #0
    fa08:	2301      	movne	r3, #1
    fa0a:	b2db      	uxtb	r3, r3
}
    fa0c:	4618      	mov	r0, r3
    fa0e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fa12:	46bd      	mov	sp, r7
    fa14:	bd80      	pop	{r7, pc}
    fa16:	46c0      	nop			(mov r8, r8)

0000fa18 <_ZN8Dijkstra11getDistanceEP5Etape>:
int Dijkstra::getDistance(int numeroEtape)
{
    return tableauEtapes[numeroEtape]->getDistance();
}

int Dijkstra::getDistance(Etape* etape)
    fa18:	b580      	push	{r7, lr}
    fa1a:	b082      	sub	sp, #8
    fa1c:	af00      	add	r7, sp, #0
    fa1e:	6078      	str	r0, [r7, #4]
    fa20:	6039      	str	r1, [r7, #0]
{
    return etape->getDistance();
    fa22:	6838      	ldr	r0, [r7, #0]
    fa24:	f000 fc42 	bl	102ac <_ZN5Etape11getDistanceEv>
    fa28:	4603      	mov	r3, r0
}
    fa2a:	4618      	mov	r0, r3
    fa2c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fa30:	46bd      	mov	sp, r7
    fa32:	bd80      	pop	{r7, pc}

0000fa34 <_ZN8Dijkstra11getDistanceEi>:
            }
        }
    }
}

int Dijkstra::getDistance(int numeroEtape)
    fa34:	b580      	push	{r7, lr}
    fa36:	b082      	sub	sp, #8
    fa38:	af00      	add	r7, sp, #0
    fa3a:	6078      	str	r0, [r7, #4]
    fa3c:	6039      	str	r1, [r7, #0]
{
    return tableauEtapes[numeroEtape]->getDistance();
    fa3e:	687b      	ldr	r3, [r7, #4]
    fa40:	681a      	ldr	r2, [r3, #0]
    fa42:	683b      	ldr	r3, [r7, #0]
    fa44:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa48:	4413      	add	r3, r2
    fa4a:	681b      	ldr	r3, [r3, #0]
    fa4c:	4618      	mov	r0, r3
    fa4e:	f000 fc2d 	bl	102ac <_ZN5Etape11getDistanceEv>
    fa52:	4603      	mov	r3, r0
}
    fa54:	4618      	mov	r0, r3
    fa56:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fa5a:	46bd      	mov	sp, r7
    fa5c:	bd80      	pop	{r7, pc}
    fa5e:	46c0      	nop			(mov r8, r8)

0000fa60 <_ZN8Dijkstra18mettreAJourVoisinsEi>:
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    return numeroEtapeLaPlusProche;
}

//Met à jour les voisin de l'étape spécifiée.
void Dijkstra::mettreAJourVoisins(int numeroEtape)
    fa60:	b580      	push	{r7, lr}
    fa62:	b086      	sub	sp, #24
    fa64:	af00      	add	r7, sp, #0
    fa66:	6078      	str	r0, [r7, #4]
    fa68:	6039      	str	r1, [r7, #0]
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    fa6a:	687b      	ldr	r3, [r7, #4]
    fa6c:	681a      	ldr	r2, [r3, #0]
    fa6e:	683b      	ldr	r3, [r7, #0]
    fa70:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa74:	4413      	add	r3, r2
    fa76:	681b      	ldr	r3, [r3, #0]
    fa78:	4618      	mov	r0, r3
    fa7a:	f000 fc17 	bl	102ac <_ZN5Etape11getDistanceEv>
    fa7e:	4603      	mov	r3, r0
    fa80:	60bb      	str	r3, [r7, #8]
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    fa82:	f04f 0300 	mov.w	r3, #0	; 0x0
    fa86:	617b      	str	r3, [r7, #20]
    fa88:	e075      	b.n	fb76 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x116>
    {
        //Si cette étape n'est pas bannie
        //if(this->tableauEtapes[numeroEtape]->getChild(i)->getState() > -2 && ((int) this->tableauEtapes[numeroEtape]->getChild(i)->getEtapeType() < 20))
        if(!(this->tableauEtapes[numeroEtape]->getChild(i)->aEviter()))
    fa8a:	687b      	ldr	r3, [r7, #4]
    fa8c:	681a      	ldr	r2, [r3, #0]
    fa8e:	683b      	ldr	r3, [r7, #0]
    fa90:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fa94:	4413      	add	r3, r2
    fa96:	681b      	ldr	r3, [r3, #0]
    fa98:	4618      	mov	r0, r3
    fa9a:	6979      	ldr	r1, [r7, #20]
    fa9c:	f000 fbae 	bl	101fc <_ZN5Etape8getChildEi>
    faa0:	4603      	mov	r3, r0
    faa2:	4618      	mov	r0, r3
    faa4:	f000 fc6a 	bl	1037c <_ZN5Etape7aEviterEv>
    faa8:	4603      	mov	r3, r0
    faaa:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    faae:	b2db      	uxtb	r3, r3
    fab0:	2b00      	cmp	r3, #0
    fab2:	d05c      	beq.n	fb6e <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
        {
            distanceChildCourant = this->tableauEtapes[numeroEtape]->getChild(i)->getDistance();
    fab4:	687b      	ldr	r3, [r7, #4]
    fab6:	681a      	ldr	r2, [r3, #0]
    fab8:	683b      	ldr	r3, [r7, #0]
    faba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fabe:	4413      	add	r3, r2
    fac0:	681b      	ldr	r3, [r3, #0]
    fac2:	4618      	mov	r0, r3
    fac4:	6979      	ldr	r1, [r7, #20]
    fac6:	f000 fb99 	bl	101fc <_ZN5Etape8getChildEi>
    faca:	4603      	mov	r3, r0
    facc:	4618      	mov	r0, r3
    face:	f000 fbed 	bl	102ac <_ZN5Etape11getDistanceEv>
    fad2:	4603      	mov	r3, r0
    fad4:	60fb      	str	r3, [r7, #12]
            distanceEtapeVersChild = this->tableauEtapes[numeroEtape]->getDistances()[i];
    fad6:	687b      	ldr	r3, [r7, #4]
    fad8:	681a      	ldr	r2, [r3, #0]
    fada:	683b      	ldr	r3, [r7, #0]
    fadc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fae0:	4413      	add	r3, r2
    fae2:	681b      	ldr	r3, [r3, #0]
    fae4:	4618      	mov	r0, r3
    fae6:	f000 fc97 	bl	10418 <_ZN5Etape12getDistancesEv>
    faea:	4602      	mov	r2, r0
    faec:	697b      	ldr	r3, [r7, #20]
    faee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    faf2:	4413      	add	r3, r2
    faf4:	681b      	ldr	r3, [r3, #0]
    faf6:	613b      	str	r3, [r7, #16]
            //distanceEtapeVersChild = calculDistanceDirect(this->tableauEtapes[numeroEtape]->getChild(i), this->tableauEtapes[numeroEtape]);
            if(!distanceEtapeVersChild)
    faf8:	693b      	ldr	r3, [r7, #16]
    fafa:	2b00      	cmp	r3, #0
    fafc:	d102      	bne.n	fb04 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xa4>
                distanceEtapeVersChild = 1;//Pas de distances nulles
    fafe:	f04f 0301 	mov.w	r3, #1	; 0x1
    fb02:	613b      	str	r3, [r7, #16]
            //Si le chemin vers ce voisin est plus court en passant par l'étape actuelle, mise à jour de ce voisin
            //Si le voisin n'avait pas encore été atteind par un chemin, alors on le met à jour aussi (distanceChildCourant == -1)
            if(distanceChildCourant == -1 || distanceChildCourant > distanceEtapeCourante + distanceEtapeVersChild)
    fb04:	68fb      	ldr	r3, [r7, #12]
    fb06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fb0a:	d005      	beq.n	fb18 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xb8>
    fb0c:	68ba      	ldr	r2, [r7, #8]
    fb0e:	693b      	ldr	r3, [r7, #16]
    fb10:	441a      	add	r2, r3
    fb12:	68fb      	ldr	r3, [r7, #12]
    fb14:	429a      	cmp	r2, r3
    fb16:	da2a      	bge.n	fb6e <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
            {
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
    fb18:	687b      	ldr	r3, [r7, #4]
    fb1a:	681a      	ldr	r2, [r3, #0]
    fb1c:	683b      	ldr	r3, [r7, #0]
    fb1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb22:	4413      	add	r3, r2
    fb24:	681b      	ldr	r3, [r3, #0]
    fb26:	4618      	mov	r0, r3
    fb28:	6979      	ldr	r1, [r7, #20]
    fb2a:	f000 fb67 	bl	101fc <_ZN5Etape8getChildEi>
    fb2e:	4601      	mov	r1, r0
    fb30:	68ba      	ldr	r2, [r7, #8]
    fb32:	693b      	ldr	r3, [r7, #16]
    fb34:	4413      	add	r3, r2
    fb36:	4608      	mov	r0, r1
    fb38:	4619      	mov	r1, r3
    fb3a:	f000 fbc3 	bl	102c4 <_ZN5Etape11setDistanceEi>
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
    fb3e:	687b      	ldr	r3, [r7, #4]
    fb40:	681a      	ldr	r2, [r3, #0]
    fb42:	683b      	ldr	r3, [r7, #0]
    fb44:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb48:	4413      	add	r3, r2
    fb4a:	681b      	ldr	r3, [r3, #0]
    fb4c:	4618      	mov	r0, r3
    fb4e:	6979      	ldr	r1, [r7, #20]
    fb50:	f000 fb54 	bl	101fc <_ZN5Etape8getChildEi>
    fb54:	4601      	mov	r1, r0
    fb56:	687b      	ldr	r3, [r7, #4]
    fb58:	681a      	ldr	r2, [r3, #0]
    fb5a:	687b      	ldr	r3, [r7, #4]
    fb5c:	689b      	ldr	r3, [r3, #8]
    fb5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb62:	4413      	add	r3, r2
    fb64:	681b      	ldr	r3, [r3, #0]
    fb66:	4608      	mov	r0, r1
    fb68:	4619      	mov	r1, r3
    fb6a:	f000 fbb9 	bl	102e0 <_ZN5Etape9setParentEPS_>
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    fb6e:	697b      	ldr	r3, [r7, #20]
    fb70:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fb74:	617b      	str	r3, [r7, #20]
    fb76:	687b      	ldr	r3, [r7, #4]
    fb78:	681a      	ldr	r2, [r3, #0]
    fb7a:	683b      	ldr	r3, [r7, #0]
    fb7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb80:	4413      	add	r3, r2
    fb82:	681b      	ldr	r3, [r3, #0]
    fb84:	4618      	mov	r0, r3
    fb86:	f000 fbb9 	bl	102fc <_ZN5Etape13getNbChildrenEv>
    fb8a:	4602      	mov	r2, r0
    fb8c:	697b      	ldr	r3, [r7, #20]
    fb8e:	429a      	cmp	r2, r3
    fb90:	bfd4      	ite	le
    fb92:	2300      	movle	r3, #0
    fb94:	2301      	movgt	r3, #1
    fb96:	b2db      	uxtb	r3, r3
    fb98:	2b00      	cmp	r3, #0
    fb9a:	f47f af76 	bne.w	fa8a <_ZN8Dijkstra18mettreAJourVoisinsEi+0x2a>
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
            }
        }
    }
}
    fb9e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    fba2:	46bd      	mov	sp, r7
    fba4:	bd80      	pop	{r7, pc}
    fba6:	46c0      	nop			(mov r8, r8)

0000fba8 <_ZN8Dijkstra11initialiserEv>:
    }
    return 0;*/
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
    fba8:	b580      	push	{r7, lr}
    fbaa:	b084      	sub	sp, #16
    fbac:	af00      	add	r7, sp, #0
    fbae:	6078      	str	r0, [r7, #4]
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    fbb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbb4:	60fb      	str	r3, [r7, #12]
    fbb6:	e038      	b.n	fc2a <_ZN8Dijkstra11initialiserEv+0x82>
    {
        this->tableauEtapes[i]->setDistance(-1);
    fbb8:	687b      	ldr	r3, [r7, #4]
    fbba:	681a      	ldr	r2, [r3, #0]
    fbbc:	68fb      	ldr	r3, [r7, #12]
    fbbe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fbc2:	4413      	add	r3, r2
    fbc4:	681b      	ldr	r3, [r3, #0]
    fbc6:	4618      	mov	r0, r3
    fbc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fbcc:	f000 fb7a 	bl	102c4 <_ZN5Etape11setDistanceEi>
        if(!(this->tableauEtapes[i]->aEviter()))//getState() != -2)
    fbd0:	687b      	ldr	r3, [r7, #4]
    fbd2:	681a      	ldr	r2, [r3, #0]
    fbd4:	68fb      	ldr	r3, [r7, #12]
    fbd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fbda:	4413      	add	r3, r2
    fbdc:	681b      	ldr	r3, [r3, #0]
    fbde:	4618      	mov	r0, r3
    fbe0:	f000 fbcc 	bl	1037c <_ZN5Etape7aEviterEv>
    fbe4:	4603      	mov	r3, r0
    fbe6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fbea:	b2db      	uxtb	r3, r3
    fbec:	2b00      	cmp	r3, #0
    fbee:	d00c      	beq.n	fc0a <_ZN8Dijkstra11initialiserEv+0x62>
        {
            this->tableauEtapes[i]->setState(-1);
    fbf0:	687b      	ldr	r3, [r7, #4]
    fbf2:	681a      	ldr	r2, [r3, #0]
    fbf4:	68fb      	ldr	r3, [r7, #12]
    fbf6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fbfa:	4413      	add	r3, r2
    fbfc:	681b      	ldr	r3, [r3, #0]
    fbfe:	4618      	mov	r0, r3
    fc00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fc04:	f000 fb44 	bl	10290 <_ZN5Etape8setStateEi>
    fc08:	e00b      	b.n	fc22 <_ZN8Dijkstra11initialiserEv+0x7a>
        }
        else
        {
            this->tableauEtapes[i]->setState(-2);
    fc0a:	687b      	ldr	r3, [r7, #4]
    fc0c:	681a      	ldr	r2, [r3, #0]
    fc0e:	68fb      	ldr	r3, [r7, #12]
    fc10:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fc14:	4413      	add	r3, r2
    fc16:	681b      	ldr	r3, [r3, #0]
    fc18:	4618      	mov	r0, r3
    fc1a:	f06f 0101 	mvn.w	r1, #1	; 0x1
    fc1e:	f000 fb37 	bl	10290 <_ZN5Etape8setStateEi>
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    fc22:	68fb      	ldr	r3, [r7, #12]
    fc24:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fc28:	60fb      	str	r3, [r7, #12]
    fc2a:	687b      	ldr	r3, [r7, #4]
    fc2c:	685a      	ldr	r2, [r3, #4]
    fc2e:	68fb      	ldr	r3, [r7, #12]
    fc30:	429a      	cmp	r2, r3
    fc32:	dcc1      	bgt.n	fbb8 <_ZN8Dijkstra11initialiserEv+0x10>
        else
        {
            this->tableauEtapes[i]->setState(-2);
        }
    }
    this->tableauEtapes[this->numeroEtapeCourante]->setDistance(0);
    fc34:	687b      	ldr	r3, [r7, #4]
    fc36:	681a      	ldr	r2, [r3, #0]
    fc38:	687b      	ldr	r3, [r7, #4]
    fc3a:	689b      	ldr	r3, [r3, #8]
    fc3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fc40:	4413      	add	r3, r2
    fc42:	681b      	ldr	r3, [r3, #0]
    fc44:	4618      	mov	r0, r3
    fc46:	f04f 0100 	mov.w	r1, #0	; 0x0
    fc4a:	f000 fb3b 	bl	102c4 <_ZN5Etape11setDistanceEi>
    this->tableauEtapes[this->numeroEtapeCourante]->setState(0);
    fc4e:	687b      	ldr	r3, [r7, #4]
    fc50:	681a      	ldr	r2, [r3, #0]
    fc52:	687b      	ldr	r3, [r7, #4]
    fc54:	689b      	ldr	r3, [r3, #8]
    fc56:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fc5a:	4413      	add	r3, r2
    fc5c:	681b      	ldr	r3, [r3, #0]
    fc5e:	4618      	mov	r0, r3
    fc60:	f04f 0100 	mov.w	r1, #0	; 0x0
    fc64:	f000 fb14 	bl	10290 <_ZN5Etape8setStateEi>
}
    fc68:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fc6c:	46bd      	mov	sp, r7
    fc6e:	bd80      	pop	{r7, pc}

0000fc70 <_ZN8Dijkstra10trouverMinEi>:

// Renvoi le numéro de l'étape la plus proche dont on n'a pas encore mis à jour les voisins
int Dijkstra::trouverMin(int classementEtapeMinimale)
    fc70:	b580      	push	{r7, lr}
    fc72:	b0a2      	sub	sp, #136
    fc74:	af00      	add	r7, sp, #0
    fc76:	6178      	str	r0, [r7, #20]
    fc78:	6139      	str	r1, [r7, #16]
{
    int minimum = -1;
    fc7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc7e:	61bb      	str	r3, [r7, #24]
    int numeroEtapeLaPlusProche = -1;
    fc80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc84:	61fb      	str	r3, [r7, #28]

    for(int i = 0 ; i < this->nombreEtapes ; i++)
    fc86:	f04f 0300 	mov.w	r3, #0	; 0x0
    fc8a:	67bb      	str	r3, [r7, #120]
    fc8c:	e05c      	b.n	fd48 <_ZN8Dijkstra10trouverMinEi+0xd8>
    {
        if(this->tableauEtapes[i]->getState()==-1 && (!(this->tableauEtapes[i]->aEviter())) && (!(this->tableauEtapes[i]->getDistance()==-1)) && (minimum == -1 || this->tableauEtapes[i]->getDistance() < minimum))
    fc8e:	697b      	ldr	r3, [r7, #20]
    fc90:	681a      	ldr	r2, [r3, #0]
    fc92:	6fbb      	ldr	r3, [r7, #120]
    fc94:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fc98:	4413      	add	r3, r2
    fc9a:	681b      	ldr	r3, [r3, #0]
    fc9c:	4618      	mov	r0, r3
    fc9e:	f000 faeb 	bl	10278 <_ZN5Etape8getStateEv>
    fca2:	4603      	mov	r3, r0
    fca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fca8:	d136      	bne.n	fd18 <_ZN8Dijkstra10trouverMinEi+0xa8>
    fcaa:	697b      	ldr	r3, [r7, #20]
    fcac:	681a      	ldr	r2, [r3, #0]
    fcae:	6fbb      	ldr	r3, [r7, #120]
    fcb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fcb4:	4413      	add	r3, r2
    fcb6:	681b      	ldr	r3, [r3, #0]
    fcb8:	4618      	mov	r0, r3
    fcba:	f000 fb5f 	bl	1037c <_ZN5Etape7aEviterEv>
    fcbe:	4603      	mov	r3, r0
    fcc0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fcc4:	b2db      	uxtb	r3, r3
    fcc6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fcca:	b2db      	uxtb	r3, r3
    fccc:	2b00      	cmp	r3, #0
    fcce:	d123      	bne.n	fd18 <_ZN8Dijkstra10trouverMinEi+0xa8>
    fcd0:	697b      	ldr	r3, [r7, #20]
    fcd2:	681a      	ldr	r2, [r3, #0]
    fcd4:	6fbb      	ldr	r3, [r7, #120]
    fcd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fcda:	4413      	add	r3, r2
    fcdc:	681b      	ldr	r3, [r3, #0]
    fcde:	4618      	mov	r0, r3
    fce0:	f000 fae4 	bl	102ac <_ZN5Etape11getDistanceEv>
    fce4:	4603      	mov	r3, r0
    fce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fcea:	d015      	beq.n	fd18 <_ZN8Dijkstra10trouverMinEi+0xa8>
    fcec:	69bb      	ldr	r3, [r7, #24]
    fcee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fcf2:	d00d      	beq.n	fd10 <_ZN8Dijkstra10trouverMinEi+0xa0>
    fcf4:	697b      	ldr	r3, [r7, #20]
    fcf6:	681a      	ldr	r2, [r3, #0]
    fcf8:	6fbb      	ldr	r3, [r7, #120]
    fcfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fcfe:	4413      	add	r3, r2
    fd00:	681b      	ldr	r3, [r3, #0]
    fd02:	4618      	mov	r0, r3
    fd04:	f000 fad2 	bl	102ac <_ZN5Etape11getDistanceEv>
    fd08:	4602      	mov	r2, r0
    fd0a:	69bb      	ldr	r3, [r7, #24]
    fd0c:	429a      	cmp	r2, r3
    fd0e:	da03      	bge.n	fd18 <_ZN8Dijkstra10trouverMinEi+0xa8>
    fd10:	f04f 0301 	mov.w	r3, #1	; 0x1
    fd14:	607b      	str	r3, [r7, #4]
    fd16:	e002      	b.n	fd1e <_ZN8Dijkstra10trouverMinEi+0xae>
    fd18:	f04f 0300 	mov.w	r3, #0	; 0x0
    fd1c:	607b      	str	r3, [r7, #4]
    fd1e:	687b      	ldr	r3, [r7, #4]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d00d      	beq.n	fd40 <_ZN8Dijkstra10trouverMinEi+0xd0>
        {
            minimum = this->tableauEtapes[i]->getDistance();
    fd24:	697b      	ldr	r3, [r7, #20]
    fd26:	681a      	ldr	r2, [r3, #0]
    fd28:	6fbb      	ldr	r3, [r7, #120]
    fd2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fd2e:	4413      	add	r3, r2
    fd30:	681b      	ldr	r3, [r3, #0]
    fd32:	4618      	mov	r0, r3
    fd34:	f000 faba 	bl	102ac <_ZN5Etape11getDistanceEv>
    fd38:	4603      	mov	r3, r0
    fd3a:	61bb      	str	r3, [r7, #24]
            numeroEtapeLaPlusProche = i;
    fd3c:	6fbb      	ldr	r3, [r7, #120]
    fd3e:	61fb      	str	r3, [r7, #28]
int Dijkstra::trouverMin(int classementEtapeMinimale)
{
    int minimum = -1;
    int numeroEtapeLaPlusProche = -1;

    for(int i = 0 ; i < this->nombreEtapes ; i++)
    fd40:	6fbb      	ldr	r3, [r7, #120]
    fd42:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fd46:	67bb      	str	r3, [r7, #120]
    fd48:	697b      	ldr	r3, [r7, #20]
    fd4a:	685a      	ldr	r2, [r3, #4]
    fd4c:	6fbb      	ldr	r3, [r7, #120]
    fd4e:	429a      	cmp	r2, r3
    fd50:	dc9d      	bgt.n	fc8e <_ZN8Dijkstra10trouverMinEi+0x1e>
        }
    }
    /*TODO: WHAT THE HELL IS THAT ???*/


    Etape* etape1 = this->tableauEtapes[0];
    fd52:	697b      	ldr	r3, [r7, #20]
    fd54:	681b      	ldr	r3, [r3, #0]
    fd56:	681b      	ldr	r3, [r3, #0]
    fd58:	623b      	str	r3, [r7, #32]
    Etape* etape2 = this->tableauEtapes[1];
    fd5a:	697b      	ldr	r3, [r7, #20]
    fd5c:	681b      	ldr	r3, [r3, #0]
    fd5e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    fd62:	681b      	ldr	r3, [r3, #0]
    fd64:	627b      	str	r3, [r7, #36]
    Etape* etape3 = this->tableauEtapes[2];
    fd66:	697b      	ldr	r3, [r7, #20]
    fd68:	681b      	ldr	r3, [r3, #0]
    fd6a:	f103 0308 	add.w	r3, r3, #8	; 0x8
    fd6e:	681b      	ldr	r3, [r3, #0]
    fd70:	62bb      	str	r3, [r7, #40]
    Etape* etape4 = this->tableauEtapes[3];
    fd72:	697b      	ldr	r3, [r7, #20]
    fd74:	681b      	ldr	r3, [r3, #0]
    fd76:	f103 030c 	add.w	r3, r3, #12	; 0xc
    fd7a:	681b      	ldr	r3, [r3, #0]
    fd7c:	62fb      	str	r3, [r7, #44]
    Etape* etape5 = this->tableauEtapes[4];
    fd7e:	697b      	ldr	r3, [r7, #20]
    fd80:	681b      	ldr	r3, [r3, #0]
    fd82:	f103 0310 	add.w	r3, r3, #16	; 0x10
    fd86:	681b      	ldr	r3, [r3, #0]
    fd88:	633b      	str	r3, [r7, #48]
    Etape* etape6 = this->tableauEtapes[5];
    fd8a:	697b      	ldr	r3, [r7, #20]
    fd8c:	681b      	ldr	r3, [r3, #0]
    fd8e:	f103 0314 	add.w	r3, r3, #20	; 0x14
    fd92:	681b      	ldr	r3, [r3, #0]
    fd94:	637b      	str	r3, [r7, #52]
    Etape* etape7 = this->tableauEtapes[6];
    fd96:	697b      	ldr	r3, [r7, #20]
    fd98:	681b      	ldr	r3, [r3, #0]
    fd9a:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fd9e:	681b      	ldr	r3, [r3, #0]
    fda0:	63bb      	str	r3, [r7, #56]
    Etape* etape8 = this->tableauEtapes[7];
    fda2:	697b      	ldr	r3, [r7, #20]
    fda4:	681b      	ldr	r3, [r3, #0]
    fda6:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    fdaa:	681b      	ldr	r3, [r3, #0]
    fdac:	63fb      	str	r3, [r7, #60]
    Etape* etape9 = this->tableauEtapes[8];
    fdae:	697b      	ldr	r3, [r7, #20]
    fdb0:	681b      	ldr	r3, [r3, #0]
    fdb2:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fdb6:	681b      	ldr	r3, [r3, #0]
    fdb8:	643b      	str	r3, [r7, #64]
    Etape* etape10 = this->tableauEtapes[9];
    fdba:	697b      	ldr	r3, [r7, #20]
    fdbc:	681b      	ldr	r3, [r3, #0]
    fdbe:	f103 0324 	add.w	r3, r3, #36	; 0x24
    fdc2:	681b      	ldr	r3, [r3, #0]
    fdc4:	647b      	str	r3, [r7, #68]
    Etape* etape11 = this->tableauEtapes[10];
    fdc6:	697b      	ldr	r3, [r7, #20]
    fdc8:	681b      	ldr	r3, [r3, #0]
    fdca:	f103 0328 	add.w	r3, r3, #40	; 0x28
    fdce:	681b      	ldr	r3, [r3, #0]
    fdd0:	64bb      	str	r3, [r7, #72]
    Etape* etape12 = this->tableauEtapes[11];
    fdd2:	697b      	ldr	r3, [r7, #20]
    fdd4:	681b      	ldr	r3, [r3, #0]
    fdd6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    fdda:	681b      	ldr	r3, [r3, #0]
    fddc:	64fb      	str	r3, [r7, #76]
    Etape* etape13 = this->tableauEtapes[12];
    fdde:	697b      	ldr	r3, [r7, #20]
    fde0:	681b      	ldr	r3, [r3, #0]
    fde2:	f103 0330 	add.w	r3, r3, #48	; 0x30
    fde6:	681b      	ldr	r3, [r3, #0]
    fde8:	653b      	str	r3, [r7, #80]
    Etape* etape14 = this->tableauEtapes[13];
    fdea:	697b      	ldr	r3, [r7, #20]
    fdec:	681b      	ldr	r3, [r3, #0]
    fdee:	f103 0334 	add.w	r3, r3, #52	; 0x34
    fdf2:	681b      	ldr	r3, [r3, #0]
    fdf4:	657b      	str	r3, [r7, #84]
    Etape* etape15 = this->tableauEtapes[14];
    fdf6:	697b      	ldr	r3, [r7, #20]
    fdf8:	681b      	ldr	r3, [r3, #0]
    fdfa:	f103 0338 	add.w	r3, r3, #56	; 0x38
    fdfe:	681b      	ldr	r3, [r3, #0]
    fe00:	65bb      	str	r3, [r7, #88]
    Etape* etape16 = this->tableauEtapes[15];
    fe02:	697b      	ldr	r3, [r7, #20]
    fe04:	681b      	ldr	r3, [r3, #0]
    fe06:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    fe0a:	681b      	ldr	r3, [r3, #0]
    fe0c:	65fb      	str	r3, [r7, #92]
    Etape* etape17 = this->tableauEtapes[16];
    fe0e:	697b      	ldr	r3, [r7, #20]
    fe10:	681b      	ldr	r3, [r3, #0]
    fe12:	f103 0340 	add.w	r3, r3, #64	; 0x40
    fe16:	681b      	ldr	r3, [r3, #0]
    fe18:	663b      	str	r3, [r7, #96]
    Etape* etape18 = this->tableauEtapes[17];
    fe1a:	697b      	ldr	r3, [r7, #20]
    fe1c:	681b      	ldr	r3, [r3, #0]
    fe1e:	f103 0344 	add.w	r3, r3, #68	; 0x44
    fe22:	681b      	ldr	r3, [r3, #0]
    fe24:	667b      	str	r3, [r7, #100]
    Etape* etape19 = this->tableauEtapes[18];
    fe26:	697b      	ldr	r3, [r7, #20]
    fe28:	681b      	ldr	r3, [r3, #0]
    fe2a:	f103 0348 	add.w	r3, r3, #72	; 0x48
    fe2e:	681b      	ldr	r3, [r3, #0]
    fe30:	66bb      	str	r3, [r7, #104]
    Etape* etape20 = this->tableauEtapes[19];
    fe32:	697b      	ldr	r3, [r7, #20]
    fe34:	681b      	ldr	r3, [r3, #0]
    fe36:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    fe3a:	681b      	ldr	r3, [r3, #0]
    fe3c:	66fb      	str	r3, [r7, #108]
    Etape* etape21 = this->tableauEtapes[20];
    fe3e:	697b      	ldr	r3, [r7, #20]
    fe40:	681b      	ldr	r3, [r3, #0]
    fe42:	f103 0350 	add.w	r3, r3, #80	; 0x50
    fe46:	681b      	ldr	r3, [r3, #0]
    fe48:	673b      	str	r3, [r7, #112]
    Etape* etape22= this->tableauEtapes[21];
    fe4a:	697b      	ldr	r3, [r7, #20]
    fe4c:	681b      	ldr	r3, [r3, #0]
    fe4e:	f103 0354 	add.w	r3, r3, #84	; 0x54
    fe52:	681b      	ldr	r3, [r3, #0]
    fe54:	677b      	str	r3, [r7, #116]
    //Si on ne trouve pas d'étape la plus proche, alors c'est qu'on est coincé par les autres robots.
    //Il faut donc faire des allers-retours entre les différentes étapes possibles.
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    fe56:	69fb      	ldr	r3, [r7, #28]
    fe58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fe5c:	f040 80a9 	bne.w	ffb2 <_ZN8Dijkstra10trouverMinEi+0x342>
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
    fe60:	f04f 0301 	mov.w	r3, #1	; 0x1
    fe64:	f887 307f 	strb.w	r3, [r7, #127]
        for(int i = 0 ; i < this->nombreEtapes ; i++)
    fe68:	f04f 0300 	mov.w	r3, #0	; 0x0
    fe6c:	f8c7 3080 	str.w	r3, [r7, #128]
    fe70:	e057      	b.n	ff22 <_ZN8Dijkstra10trouverMinEi+0x2b2>
        {
            if(this->etapeRapporte(this->tableauEtapes[i]) && (!(this->tableauEtapes[i]->aEviter())) && this->tableauEtapes[i]->getDistance() != -1 && this->tableauEtapes[i]->getState() != -2)
    fe72:	697b      	ldr	r3, [r7, #20]
    fe74:	681a      	ldr	r2, [r3, #0]
    fe76:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fe7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fe7e:	4413      	add	r3, r2
    fe80:	681b      	ldr	r3, [r3, #0]
    fe82:	6978      	ldr	r0, [r7, #20]
    fe84:	4619      	mov	r1, r3
    fe86:	f7ff fdb3 	bl	f9f0 <_ZN8Dijkstra13etapeRapporteEP5Etape>
    fe8a:	4603      	mov	r3, r0
    fe8c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fe90:	b2db      	uxtb	r3, r3
    fe92:	2b00      	cmp	r3, #0
    fe94:	d135      	bne.n	ff02 <_ZN8Dijkstra10trouverMinEi+0x292>
    fe96:	697b      	ldr	r3, [r7, #20]
    fe98:	681a      	ldr	r2, [r3, #0]
    fe9a:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fe9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fea2:	4413      	add	r3, r2
    fea4:	681b      	ldr	r3, [r3, #0]
    fea6:	4618      	mov	r0, r3
    fea8:	f000 fa68 	bl	1037c <_ZN5Etape7aEviterEv>
    feac:	4603      	mov	r3, r0
    feae:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    feb2:	b2db      	uxtb	r3, r3
    feb4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    feb8:	b2db      	uxtb	r3, r3
    feba:	2b00      	cmp	r3, #0
    febc:	d121      	bne.n	ff02 <_ZN8Dijkstra10trouverMinEi+0x292>
    febe:	697b      	ldr	r3, [r7, #20]
    fec0:	681a      	ldr	r2, [r3, #0]
    fec2:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fec6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    feca:	4413      	add	r3, r2
    fecc:	681b      	ldr	r3, [r3, #0]
    fece:	4618      	mov	r0, r3
    fed0:	f000 f9ec 	bl	102ac <_ZN5Etape11getDistanceEv>
    fed4:	4603      	mov	r3, r0
    fed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    feda:	d012      	beq.n	ff02 <_ZN8Dijkstra10trouverMinEi+0x292>
    fedc:	697b      	ldr	r3, [r7, #20]
    fede:	681a      	ldr	r2, [r3, #0]
    fee0:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fee4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fee8:	4413      	add	r3, r2
    feea:	681b      	ldr	r3, [r3, #0]
    feec:	4618      	mov	r0, r3
    feee:	f000 f9c3 	bl	10278 <_ZN5Etape8getStateEv>
    fef2:	4603      	mov	r3, r0
    fef4:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fef8:	d003      	beq.n	ff02 <_ZN8Dijkstra10trouverMinEi+0x292>
    fefa:	f04f 0301 	mov.w	r3, #1	; 0x1
    fefe:	60bb      	str	r3, [r7, #8]
    ff00:	e002      	b.n	ff08 <_ZN8Dijkstra10trouverMinEi+0x298>
    ff02:	f04f 0300 	mov.w	r3, #0	; 0x0
    ff06:	60bb      	str	r3, [r7, #8]
    ff08:	68bb      	ldr	r3, [r7, #8]
    ff0a:	2b00      	cmp	r3, #0
    ff0c:	d003      	beq.n	ff16 <_ZN8Dijkstra10trouverMinEi+0x2a6>
            {
                onEstCoinceDansUnEndroitPourri = false;
    ff0e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ff12:	f887 307f 	strb.w	r3, [r7, #127]
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
        for(int i = 0 ; i < this->nombreEtapes ; i++)
    ff16:	f8d7 3080 	ldr.w	r3, [r7, #128]
    ff1a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ff1e:	f8c7 3080 	str.w	r3, [r7, #128]
    ff22:	697b      	ldr	r3, [r7, #20]
    ff24:	685a      	ldr	r2, [r3, #4]
    ff26:	f8d7 3080 	ldr.w	r3, [r7, #128]
    ff2a:	429a      	cmp	r2, r3
    ff2c:	dca1      	bgt.n	fe72 <_ZN8Dijkstra10trouverMinEi+0x202>
            {
                onEstCoinceDansUnEndroitPourri = false;
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
    ff2e:	f897 307f 	ldrb.w	r3, [r7, #127]
    ff32:	2b00      	cmp	r3, #0
    ff34:	d039      	beq.n	ffaa <_ZN8Dijkstra10trouverMinEi+0x33a>
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
    ff36:	f04f 0300 	mov.w	r3, #0	; 0x0
    ff3a:	f8c7 3084 	str.w	r3, [r7, #132]
    ff3e:	e027      	b.n	ff90 <_ZN8Dijkstra10trouverMinEi+0x320>
            {
                //On reset numeroEtapeEnCours à l'étape où on est actuellement
                if(this->tableauEtapes[i]->getDistance() == 0)
    ff40:	697b      	ldr	r3, [r7, #20]
    ff42:	681a      	ldr	r2, [r3, #0]
    ff44:	f8d7 3084 	ldr.w	r3, [r7, #132]
    ff48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff4c:	4413      	add	r3, r2
    ff4e:	681b      	ldr	r3, [r3, #0]
    ff50:	4618      	mov	r0, r3
    ff52:	f000 f9ab 	bl	102ac <_ZN5Etape11getDistanceEv>
    ff56:	4603      	mov	r3, r0
    ff58:	2b00      	cmp	r3, #0
    ff5a:	bf14      	ite	ne
    ff5c:	2300      	movne	r3, #0
    ff5e:	2301      	moveq	r3, #1
    ff60:	b2db      	uxtb	r3, r3
    ff62:	2b00      	cmp	r3, #0
    ff64:	d003      	beq.n	ff6e <_ZN8Dijkstra10trouverMinEi+0x2fe>
                {
                    this->numeroEtapeCourante = i; //-1?
    ff66:	697a      	ldr	r2, [r7, #20]
    ff68:	f8d7 3084 	ldr.w	r3, [r7, #132]
    ff6c:	6093      	str	r3, [r2, #8]
                }

                this->tableauEtapes[i]->oublieRobotVu();
    ff6e:	697b      	ldr	r3, [r7, #20]
    ff70:	681a      	ldr	r2, [r3, #0]
    ff72:	f8d7 3084 	ldr.w	r3, [r7, #132]
    ff76:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff7a:	4413      	add	r3, r2
    ff7c:	681b      	ldr	r3, [r3, #0]
    ff7e:	4618      	mov	r0, r3
    ff80:	f000 fa30 	bl	103e4 <_ZN5Etape13oublieRobotVuEv>
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
    ff84:	f8d7 3084 	ldr.w	r3, [r7, #132]
    ff88:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ff8c:	f8c7 3084 	str.w	r3, [r7, #132]
    ff90:	697b      	ldr	r3, [r7, #20]
    ff92:	685a      	ldr	r2, [r3, #4]
    ff94:	f8d7 3084 	ldr.w	r3, [r7, #132]
    ff98:	429a      	cmp	r2, r3
    ff9a:	dcd1      	bgt.n	ff40 <_ZN8Dijkstra10trouverMinEi+0x2d0>
                }

                this->tableauEtapes[i]->oublieRobotVu();
            }

            this->run();
    ff9c:	6978      	ldr	r0, [r7, #20]
    ff9e:	f000 f81b 	bl	ffd8 <_ZN8Dijkstra3runEv>
            return -1;
    ffa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ffa6:	60fb      	str	r3, [r7, #12]
    ffa8:	e010      	b.n	ffcc <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
        else
        {
            return -2;
    ffaa:	f06f 0301 	mvn.w	r3, #1	; 0x1
    ffae:	60fb      	str	r3, [r7, #12]
    ffb0:	e00c      	b.n	ffcc <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
    }
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    ffb2:	697b      	ldr	r3, [r7, #20]
    ffb4:	681a      	ldr	r2, [r3, #0]
    ffb6:	69fb      	ldr	r3, [r7, #28]
    ffb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ffbc:	4413      	add	r3, r2
    ffbe:	681b      	ldr	r3, [r3, #0]
    ffc0:	4618      	mov	r0, r3
    ffc2:	6939      	ldr	r1, [r7, #16]
    ffc4:	f000 f964 	bl	10290 <_ZN5Etape8setStateEi>
    return numeroEtapeLaPlusProche;
    ffc8:	69fb      	ldr	r3, [r7, #28]
    ffca:	60fb      	str	r3, [r7, #12]
    ffcc:	68fb      	ldr	r3, [r7, #12]
}
    ffce:	4618      	mov	r0, r3
    ffd0:	f107 0788 	add.w	r7, r7, #136	; 0x88
    ffd4:	46bd      	mov	sp, r7
    ffd6:	bd80      	pop	{r7, pc}

0000ffd8 <_ZN8Dijkstra3runEv>:
{
    this->numeroEtapeCourante = numeroEtapeCourante;
}

//Calcul des distances de toutes les étapes par rapport à l'étape en cours (étape origine)
int Dijkstra::run()
    ffd8:	b580      	push	{r7, lr}
    ffda:	b084      	sub	sp, #16
    ffdc:	af00      	add	r7, sp, #0
    ffde:	6078      	str	r0, [r7, #4]
    else
        return 0;*/



    int min = -2;
    ffe0:	f06f 0301 	mvn.w	r3, #1	; 0x1
    ffe4:	60bb      	str	r3, [r7, #8]
    initialiser();
    ffe6:	6878      	ldr	r0, [r7, #4]
    ffe8:	f7ff fdde 	bl	fba8 <_ZN8Dijkstra11initialiserEv>

    mettreAJourVoisins(this->numeroEtapeCourante);
    ffec:	687b      	ldr	r3, [r7, #4]
    ffee:	689b      	ldr	r3, [r3, #8]
    fff0:	6878      	ldr	r0, [r7, #4]
    fff2:	4619      	mov	r1, r3
    fff4:	f7ff fd34 	bl	fa60 <_ZN8Dijkstra18mettreAJourVoisinsEi>

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
    fff8:	f04f 0300 	mov.w	r3, #0	; 0x0
    fffc:	60fb      	str	r3, [r7, #12]
    fffe:	e025      	b.n	1004c <_ZN8Dijkstra3runEv+0x74>
    {
        min = trouverMin(i+1);
   10000:	68fb      	ldr	r3, [r7, #12]
   10002:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10006:	6878      	ldr	r0, [r7, #4]
   10008:	4619      	mov	r1, r3
   1000a:	f7ff fe31 	bl	fc70 <_ZN8Dijkstra10trouverMinEi>
   1000e:	4603      	mov	r3, r0
   10010:	60bb      	str	r3, [r7, #8]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
   10012:	68bb      	ldr	r3, [r7, #8]
   10014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10018:	d103      	bne.n	10022 <_ZN8Dijkstra3runEv+0x4a>
        {
            return -1;
   1001a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1001e:	603b      	str	r3, [r7, #0]
   10020:	e01e      	b.n	10060 <_ZN8Dijkstra3runEv+0x88>
        }
        if(min == -2)
   10022:	68bb      	ldr	r3, [r7, #8]
   10024:	f113 0f02 	cmn.w	r3, #2	; 0x2
   10028:	d103      	bne.n	10032 <_ZN8Dijkstra3runEv+0x5a>
        {
            return 0;
   1002a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1002e:	603b      	str	r3, [r7, #0]
   10030:	e016      	b.n	10060 <_ZN8Dijkstra3runEv+0x88>
        }
        this->numeroEtapeCourante = min;
   10032:	687a      	ldr	r2, [r7, #4]
   10034:	68bb      	ldr	r3, [r7, #8]
   10036:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
   10038:	687b      	ldr	r3, [r7, #4]
   1003a:	689b      	ldr	r3, [r3, #8]
   1003c:	6878      	ldr	r0, [r7, #4]
   1003e:	4619      	mov	r1, r3
   10040:	f7ff fd0e 	bl	fa60 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    int min = -2;
    initialiser();

    mettreAJourVoisins(this->numeroEtapeCourante);

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
   10044:	68fb      	ldr	r3, [r7, #12]
   10046:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1004a:	60fb      	str	r3, [r7, #12]
   1004c:	687b      	ldr	r3, [r7, #4]
   1004e:	685b      	ldr	r3, [r3, #4]
   10050:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
   10054:	68fb      	ldr	r3, [r7, #12]
   10056:	429a      	cmp	r2, r3
   10058:	dcd2      	bgt.n	10000 <_ZN8Dijkstra3runEv+0x28>
            return 0;
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;
   1005a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1005e:	603b      	str	r3, [r7, #0]
   10060:	683b      	ldr	r3, [r7, #0]
}
   10062:	4618      	mov	r0, r3
   10064:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10068:	46bd      	mov	sp, r7
   1006a:	bd80      	pop	{r7, pc}

0001006c <_ZN8Dijkstra7miniRunEi>:

int Dijkstra::miniRun(int step)
   1006c:	b580      	push	{r7, lr}
   1006e:	b086      	sub	sp, #24
   10070:	af00      	add	r7, sp, #0
   10072:	60f8      	str	r0, [r7, #12]
   10074:	60b9      	str	r1, [r7, #8]
{
    if (step == 0)
   10076:	68bb      	ldr	r3, [r7, #8]
   10078:	2b00      	cmp	r3, #0
   1007a:	d103      	bne.n	10084 <_ZN8Dijkstra7miniRunEi+0x18>
    {
        initialiser();
   1007c:	68f8      	ldr	r0, [r7, #12]
   1007e:	f7ff fd93 	bl	fba8 <_ZN8Dijkstra11initialiserEv>
   10082:	e02d      	b.n	100e0 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else if(step < this->nombreEtapes-2)
   10084:	68fb      	ldr	r3, [r7, #12]
   10086:	685b      	ldr	r3, [r3, #4]
   10088:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
   1008c:	68bb      	ldr	r3, [r7, #8]
   1008e:	429a      	cmp	r2, r3
   10090:	dd22      	ble.n	100d8 <_ZN8Dijkstra7miniRunEi+0x6c>
    {
        int min = trouverMin(step+1);
   10092:	68bb      	ldr	r3, [r7, #8]
   10094:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10098:	68f8      	ldr	r0, [r7, #12]
   1009a:	4619      	mov	r1, r3
   1009c:	f7ff fde8 	bl	fc70 <_ZN8Dijkstra10trouverMinEi>
   100a0:	4603      	mov	r3, r0
   100a2:	617b      	str	r3, [r7, #20]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
   100a4:	697b      	ldr	r3, [r7, #20]
   100a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   100aa:	d103      	bne.n	100b4 <_ZN8Dijkstra7miniRunEi+0x48>
        {
            return -1;
   100ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   100b0:	607b      	str	r3, [r7, #4]
   100b2:	e018      	b.n	100e6 <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        if(min == -2)
   100b4:	697b      	ldr	r3, [r7, #20]
   100b6:	f113 0f02 	cmn.w	r3, #2	; 0x2
   100ba:	d103      	bne.n	100c4 <_ZN8Dijkstra7miniRunEi+0x58>
        {
            return 0;
   100bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   100c0:	607b      	str	r3, [r7, #4]
   100c2:	e010      	b.n	100e6 <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        this->numeroEtapeCourante = min;
   100c4:	68fa      	ldr	r2, [r7, #12]
   100c6:	697b      	ldr	r3, [r7, #20]
   100c8:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
   100ca:	68fb      	ldr	r3, [r7, #12]
   100cc:	689b      	ldr	r3, [r3, #8]
   100ce:	68f8      	ldr	r0, [r7, #12]
   100d0:	4619      	mov	r1, r3
   100d2:	f7ff fcc5 	bl	fa60 <_ZN8Dijkstra18mettreAJourVoisinsEi>
   100d6:	e003      	b.n	100e0 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else
    {
        return 0;
   100d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   100dc:	607b      	str	r3, [r7, #4]
   100de:	e002      	b.n	100e6 <_ZN8Dijkstra7miniRunEi+0x7a>
    }
    return -2;
   100e0:	f06f 0301 	mvn.w	r3, #1	; 0x1
   100e4:	607b      	str	r3, [r7, #4]
   100e6:	687b      	ldr	r3, [r7, #4]
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;*/
}
   100e8:	4618      	mov	r0, r3
   100ea:	f107 0718 	add.w	r7, r7, #24	; 0x18
   100ee:	46bd      	mov	sp, r7
   100f0:	bd80      	pop	{r7, pc}
   100f2:	46c0      	nop			(mov r8, r8)

000100f4 <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>:
Etape* Dijkstra::getEtapeCourante()
{
    return tableauEtapes[this->numeroEtapeCourante];
}

int Dijkstra::calculDistanceDirect(Etape* etapeDepart, Etape* etapeArrivee)
   100f4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   100f8:	b08b      	sub	sp, #44
   100fa:	af00      	add	r7, sp, #0
   100fc:	6078      	str	r0, [r7, #4]
   100fe:	6039      	str	r1, [r7, #0]
    //Une solution, vu que le STM32-H405 a plein de mémoire, serait de pré-calculer les distances, et de les stocker.
    //Cela permettrait aussi d'ajuster certaines distances si besoin, pour préférer certains passages à d'autres
    return sqrt(
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
   10100:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10104:	4618      	mov	r0, r3
   10106:	6879      	ldr	r1, [r7, #4]
   10108:	f000 f8a2 	bl	10250 <_ZN5Etape11getPositionEv>
   1010c:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10110:	4618      	mov	r0, r3
   10112:	f7fe fc43 	bl	e99c <_ZNK8Position4getXEv>
   10116:	4603      	mov	r3, r0
   10118:	4618      	mov	r0, r3
   1011a:	f00b f86f 	bl	1b1fc <__aeabi_f2iz>
   1011e:	4603      	mov	r3, r0
   10120:	4618      	mov	r0, r3
   10122:	f00a fe53 	bl	1adcc <__aeabi_i2f>
   10126:	4604      	mov	r4, r0
   10128:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1012c:	4618      	mov	r0, r3
   1012e:	6839      	ldr	r1, [r7, #0]
   10130:	f000 f88e 	bl	10250 <_ZN5Etape11getPositionEv>
   10134:	f107 0310 	add.w	r3, r7, #16	; 0x10
   10138:	4618      	mov	r0, r3
   1013a:	f7fe fc2f 	bl	e99c <_ZNK8Position4getXEv>
   1013e:	4603      	mov	r3, r0
   10140:	4620      	mov	r0, r4
   10142:	4619      	mov	r1, r3
   10144:	f00a fd8c 	bl	1ac60 <__aeabi_fsub>
   10148:	4603      	mov	r3, r0
   1014a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1014e:	4618      	mov	r0, r3
   10150:	f00a fa1e 	bl	1a590 <__aeabi_f2d>
   10154:	4602      	mov	r2, r0
   10156:	460b      	mov	r3, r1
   10158:	4610      	mov	r0, r2
   1015a:	4619      	mov	r1, r3
   1015c:	f00a fa6c 	bl	1a638 <__aeabi_dmul>
   10160:	4602      	mov	r2, r0
   10162:	460b      	mov	r3, r1
   10164:	4690      	mov	r8, r2
   10166:	4699      	mov	r9, r3
   10168:	f107 0318 	add.w	r3, r7, #24	; 0x18
   1016c:	4618      	mov	r0, r3
   1016e:	6879      	ldr	r1, [r7, #4]
   10170:	f000 f86e 	bl	10250 <_ZN5Etape11getPositionEv>
   10174:	f107 0318 	add.w	r3, r7, #24	; 0x18
   10178:	4618      	mov	r0, r3
   1017a:	f7fe fc1b 	bl	e9b4 <_ZNK8Position4getYEv>
   1017e:	4603      	mov	r3, r0
   10180:	4618      	mov	r0, r3
   10182:	f00b f83b 	bl	1b1fc <__aeabi_f2iz>
   10186:	4603      	mov	r3, r0
   10188:	4618      	mov	r0, r3
   1018a:	f00a fe1f 	bl	1adcc <__aeabi_i2f>
   1018e:	4604      	mov	r4, r0
   10190:	f107 0320 	add.w	r3, r7, #32	; 0x20
   10194:	4618      	mov	r0, r3
   10196:	6839      	ldr	r1, [r7, #0]
   10198:	f000 f85a 	bl	10250 <_ZN5Etape11getPositionEv>
   1019c:	f107 0320 	add.w	r3, r7, #32	; 0x20
   101a0:	4618      	mov	r0, r3
   101a2:	f7fe fc07 	bl	e9b4 <_ZNK8Position4getYEv>
   101a6:	4603      	mov	r3, r0
   101a8:	4620      	mov	r0, r4
   101aa:	4619      	mov	r1, r3
   101ac:	f00a fd58 	bl	1ac60 <__aeabi_fsub>
   101b0:	4603      	mov	r3, r0
   101b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   101b6:	4618      	mov	r0, r3
   101b8:	f00a f9ea 	bl	1a590 <__aeabi_f2d>
   101bc:	4602      	mov	r2, r0
   101be:	460b      	mov	r3, r1
   101c0:	4610      	mov	r0, r2
   101c2:	4619      	mov	r1, r3
   101c4:	f00a fa38 	bl	1a638 <__aeabi_dmul>
   101c8:	4602      	mov	r2, r0
   101ca:	460b      	mov	r3, r1
   101cc:	4640      	mov	r0, r8
   101ce:	4649      	mov	r1, r9
   101d0:	f00a f880 	bl	1a2d4 <__adddf3>
   101d4:	4602      	mov	r2, r0
   101d6:	460b      	mov	r3, r1
   101d8:	4610      	mov	r0, r2
   101da:	4619      	mov	r1, r3
   101dc:	f00e fb14 	bl	1e808 <sqrt>
   101e0:	4602      	mov	r2, r0
   101e2:	460b      	mov	r3, r1
   101e4:	4610      	mov	r0, r2
   101e6:	4619      	mov	r1, r3
   101e8:	f00a fcbe 	bl	1ab68 <__aeabi_d2iz>
   101ec:	4603      	mov	r3, r0
}
   101ee:	4618      	mov	r0, r3
   101f0:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   101f4:	46bd      	mov	sp, r7
   101f6:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   101fa:	46c0      	nop			(mov r8, r8)

000101fc <_ZN5Etape8getChildEi>:
    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}

Etape* Etape::getChild(int nb){
   101fc:	b480      	push	{r7}
   101fe:	b083      	sub	sp, #12
   10200:	af00      	add	r7, sp, #0
   10202:	6078      	str	r0, [r7, #4]
   10204:	6039      	str	r1, [r7, #0]
    return this->children[nb];
   10206:	687b      	ldr	r3, [r7, #4]
   10208:	681a      	ldr	r2, [r3, #0]
   1020a:	683b      	ldr	r3, [r7, #0]
   1020c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10210:	4413      	add	r3, r2
   10212:	681b      	ldr	r3, [r3, #0]
}
   10214:	4618      	mov	r0, r3
   10216:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1021a:	46bd      	mov	sp, r7
   1021c:	bc80      	pop	{r7}
   1021e:	4770      	bx	lr

00010220 <_ZN5Etape11getChildrenEv>:

Etape** Etape::getChildren(){
   10220:	b480      	push	{r7}
   10222:	b083      	sub	sp, #12
   10224:	af00      	add	r7, sp, #0
   10226:	6078      	str	r0, [r7, #4]
    return this->children;
   10228:	687b      	ldr	r3, [r7, #4]
   1022a:	681b      	ldr	r3, [r3, #0]
}
   1022c:	4618      	mov	r0, r3
   1022e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10232:	46bd      	mov	sp, r7
   10234:	bc80      	pop	{r7}
   10236:	4770      	bx	lr

00010238 <_ZN5Etape9getParentEv>:

Etape* Etape::getParent(){
   10238:	b480      	push	{r7}
   1023a:	b083      	sub	sp, #12
   1023c:	af00      	add	r7, sp, #0
   1023e:	6078      	str	r0, [r7, #4]
    return this->parent;
   10240:	687b      	ldr	r3, [r7, #4]
   10242:	685b      	ldr	r3, [r3, #4]
}
   10244:	4618      	mov	r0, r3
   10246:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1024a:	46bd      	mov	sp, r7
   1024c:	bc80      	pop	{r7}
   1024e:	4770      	bx	lr

00010250 <_ZN5Etape11getPositionEv>:

Position Etape::getPosition()
   10250:	b480      	push	{r7}
   10252:	b083      	sub	sp, #12
   10254:	af00      	add	r7, sp, #0
   10256:	4684      	mov	ip, r0
   10258:	6079      	str	r1, [r7, #4]
{
    return this->position;
   1025a:	687b      	ldr	r3, [r7, #4]
   1025c:	4662      	mov	r2, ip
   1025e:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10262:	e893 0003 	ldmia.w	r3, {r0, r1}
   10266:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1026a:	4660      	mov	r0, ip
   1026c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10270:	46bd      	mov	sp, r7
   10272:	bc80      	pop	{r7}
   10274:	4770      	bx	lr
   10276:	46c0      	nop			(mov r8, r8)

00010278 <_ZN5Etape8getStateEv>:

int Etape::getState(){
   10278:	b480      	push	{r7}
   1027a:	b083      	sub	sp, #12
   1027c:	af00      	add	r7, sp, #0
   1027e:	6078      	str	r0, [r7, #4]
    return this->state;
   10280:	687b      	ldr	r3, [r7, #4]
   10282:	691b      	ldr	r3, [r3, #16]
}
   10284:	4618      	mov	r0, r3
   10286:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1028a:	46bd      	mov	sp, r7
   1028c:	bc80      	pop	{r7}
   1028e:	4770      	bx	lr

00010290 <_ZN5Etape8setStateEi>:

void Etape::setState(int state){
   10290:	b480      	push	{r7}
   10292:	b083      	sub	sp, #12
   10294:	af00      	add	r7, sp, #0
   10296:	6078      	str	r0, [r7, #4]
   10298:	6039      	str	r1, [r7, #0]
    this->state = state;
   1029a:	687a      	ldr	r2, [r7, #4]
   1029c:	683b      	ldr	r3, [r7, #0]
   1029e:	6113      	str	r3, [r2, #16]
}
   102a0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   102a4:	46bd      	mov	sp, r7
   102a6:	bc80      	pop	{r7}
   102a8:	4770      	bx	lr
   102aa:	46c0      	nop			(mov r8, r8)

000102ac <_ZN5Etape11getDistanceEv>:

int Etape::getDistance(){
   102ac:	b480      	push	{r7}
   102ae:	b083      	sub	sp, #12
   102b0:	af00      	add	r7, sp, #0
   102b2:	6078      	str	r0, [r7, #4]
    return this->distance;
   102b4:	687b      	ldr	r3, [r7, #4]
   102b6:	695b      	ldr	r3, [r3, #20]
}
   102b8:	4618      	mov	r0, r3
   102ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
   102be:	46bd      	mov	sp, r7
   102c0:	bc80      	pop	{r7}
   102c2:	4770      	bx	lr

000102c4 <_ZN5Etape11setDistanceEi>:

void Etape::setDistance(int distance){
   102c4:	b480      	push	{r7}
   102c6:	b083      	sub	sp, #12
   102c8:	af00      	add	r7, sp, #0
   102ca:	6078      	str	r0, [r7, #4]
   102cc:	6039      	str	r1, [r7, #0]
    this->distance = distance;
   102ce:	687a      	ldr	r2, [r7, #4]
   102d0:	683b      	ldr	r3, [r7, #0]
   102d2:	6153      	str	r3, [r2, #20]
}
   102d4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   102d8:	46bd      	mov	sp, r7
   102da:	bc80      	pop	{r7}
   102dc:	4770      	bx	lr
   102de:	46c0      	nop			(mov r8, r8)

000102e0 <_ZN5Etape9setParentEPS_>:

void Etape::setParent(Etape* parent){
   102e0:	b480      	push	{r7}
   102e2:	b083      	sub	sp, #12
   102e4:	af00      	add	r7, sp, #0
   102e6:	6078      	str	r0, [r7, #4]
   102e8:	6039      	str	r1, [r7, #0]
    this->parent = parent;
   102ea:	687a      	ldr	r2, [r7, #4]
   102ec:	683b      	ldr	r3, [r7, #0]
   102ee:	6053      	str	r3, [r2, #4]
}
   102f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   102f4:	46bd      	mov	sp, r7
   102f6:	bc80      	pop	{r7}
   102f8:	4770      	bx	lr
   102fa:	46c0      	nop			(mov r8, r8)

000102fc <_ZN5Etape13getNbChildrenEv>:

int Etape::getNbChildren(){
   102fc:	b480      	push	{r7}
   102fe:	b083      	sub	sp, #12
   10300:	af00      	add	r7, sp, #0
   10302:	6078      	str	r0, [r7, #4]
    return this->nbChildren;
   10304:	687b      	ldr	r3, [r7, #4]
   10306:	69db      	ldr	r3, [r3, #28]
}
   10308:	4618      	mov	r0, r3
   1030a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1030e:	46bd      	mov	sp, r7
   10310:	bc80      	pop	{r7}
   10312:	4770      	bx	lr

00010314 <_ZN5Etape11setChildrenEPPS_>:

void Etape::setChildren(Etape** children)
   10314:	b480      	push	{r7}
   10316:	b083      	sub	sp, #12
   10318:	af00      	add	r7, sp, #0
   1031a:	6078      	str	r0, [r7, #4]
   1031c:	6039      	str	r1, [r7, #0]
{
    this->children = children;
   1031e:	687a      	ldr	r2, [r7, #4]
   10320:	683b      	ldr	r3, [r7, #0]
   10322:	6013      	str	r3, [r2, #0]
}
   10324:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10328:	46bd      	mov	sp, r7
   1032a:	bc80      	pop	{r7}
   1032c:	4770      	bx	lr
   1032e:	46c0      	nop			(mov r8, r8)

00010330 <_ZN5Etape12getEtapeTypeEv>:

Etape::EtapeType Etape::getEtapeType()
   10330:	b480      	push	{r7}
   10332:	b083      	sub	sp, #12
   10334:	af00      	add	r7, sp, #0
   10336:	6078      	str	r0, [r7, #4]
{
    return this->type;
   10338:	687b      	ldr	r3, [r7, #4]
   1033a:	7e1b      	ldrb	r3, [r3, #24]
}
   1033c:	4618      	mov	r0, r3
   1033e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10342:	46bd      	mov	sp, r7
   10344:	bc80      	pop	{r7}
   10346:	4770      	bx	lr

00010348 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>:

void Etape::setEtapeType(Etape::EtapeType type)
   10348:	b480      	push	{r7}
   1034a:	b083      	sub	sp, #12
   1034c:	af00      	add	r7, sp, #0
   1034e:	6078      	str	r0, [r7, #4]
   10350:	460b      	mov	r3, r1
   10352:	70fb      	strb	r3, [r7, #3]
{
    this->type = type;
   10354:	687a      	ldr	r2, [r7, #4]
   10356:	78fb      	ldrb	r3, [r7, #3]
   10358:	7613      	strb	r3, [r2, #24]
}
   1035a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1035e:	46bd      	mov	sp, r7
   10360:	bc80      	pop	{r7}
   10362:	4770      	bx	lr

00010364 <_ZN5Etape9getNumeroEv>:
    {
        this->type = (EtapeType)(this->type + ROBOT_VU_ICI);
    }
}

int Etape::getNumero()
   10364:	b480      	push	{r7}
   10366:	b083      	sub	sp, #12
   10368:	af00      	add	r7, sp, #0
   1036a:	6078      	str	r0, [r7, #4]
{
    return this->numero;
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	6a1b      	ldr	r3, [r3, #32]
}
   10370:	4618      	mov	r0, r3
   10372:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10376:	46bd      	mov	sp, r7
   10378:	bc80      	pop	{r7}
   1037a:	4770      	bx	lr

0001037c <_ZN5Etape7aEviterEv>:

bool Etape::aEviter()
   1037c:	b580      	push	{r7, lr}
   1037e:	b082      	sub	sp, #8
   10380:	af00      	add	r7, sp, #0
   10382:	6078      	str	r0, [r7, #4]
{
    if(((int) this->getEtapeType()) > 19)
   10384:	6878      	ldr	r0, [r7, #4]
   10386:	f7ff ffd3 	bl	10330 <_ZN5Etape12getEtapeTypeEv>
   1038a:	4603      	mov	r3, r0
   1038c:	2b13      	cmp	r3, #19
   1038e:	bf94      	ite	ls
   10390:	2300      	movls	r3, #0
   10392:	2301      	movhi	r3, #1
   10394:	b2db      	uxtb	r3, r3
   10396:	2b00      	cmp	r3, #0
   10398:	d003      	beq.n	103a2 <_ZN5Etape7aEviterEv+0x26>
    {
        return true;
   1039a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1039e:	603b      	str	r3, [r7, #0]
   103a0:	e002      	b.n	103a8 <_ZN5Etape7aEviterEv+0x2c>
    }
    else
    {
        return false;
   103a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   103a6:	603b      	str	r3, [r7, #0]
   103a8:	683b      	ldr	r3, [r7, #0]
    }
}
   103aa:	4618      	mov	r0, r3
   103ac:	f107 0708 	add.w	r7, r7, #8	; 0x8
   103b0:	46bd      	mov	sp, r7
   103b2:	bd80      	pop	{r7, pc}

000103b4 <_ZN5Etape7robotVuEv>:
void Etape::setEtapeType(Etape::EtapeType type)
{
    this->type = type;
}

void Etape::robotVu()
   103b4:	b580      	push	{r7, lr}
   103b6:	b082      	sub	sp, #8
   103b8:	af00      	add	r7, sp, #0
   103ba:	6078      	str	r0, [r7, #4]
{
    if(!aEviter())
   103bc:	6878      	ldr	r0, [r7, #4]
   103be:	f7ff ffdd 	bl	1037c <_ZN5Etape7aEviterEv>
   103c2:	4603      	mov	r3, r0
   103c4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   103c8:	b2db      	uxtb	r3, r3
   103ca:	2b00      	cmp	r3, #0
   103cc:	d006      	beq.n	103dc <_ZN5Etape7robotVuEv+0x28>
    {
        this->type = (EtapeType)(this->type + ROBOT_VU_ICI);
   103ce:	687b      	ldr	r3, [r7, #4]
   103d0:	7e1b      	ldrb	r3, [r3, #24]
   103d2:	f103 0364 	add.w	r3, r3, #100	; 0x64
   103d6:	b2db      	uxtb	r3, r3
   103d8:	687a      	ldr	r2, [r7, #4]
   103da:	7613      	strb	r3, [r2, #24]
    }
}
   103dc:	f107 0708 	add.w	r7, r7, #8	; 0x8
   103e0:	46bd      	mov	sp, r7
   103e2:	bd80      	pop	{r7, pc}

000103e4 <_ZN5Etape13oublieRobotVuEv>:
    {
        return false;
    }
}

void Etape::oublieRobotVu()
   103e4:	b580      	push	{r7, lr}
   103e6:	b082      	sub	sp, #8
   103e8:	af00      	add	r7, sp, #0
   103ea:	6078      	str	r0, [r7, #4]
{
    if(this->aEviter())
   103ec:	6878      	ldr	r0, [r7, #4]
   103ee:	f7ff ffc5 	bl	1037c <_ZN5Etape7aEviterEv>
   103f2:	4603      	mov	r3, r0
   103f4:	2b00      	cmp	r3, #0
   103f6:	d00a      	beq.n	1040e <_ZN5Etape13oublieRobotVuEv+0x2a>
    {
        //On oublie qu'on a vu un robot
        this->setEtapeType((EtapeType) ((int)this->getEtapeType() - ROBOT_VU_ICI));
   103f8:	6878      	ldr	r0, [r7, #4]
   103fa:	f7ff ff99 	bl	10330 <_ZN5Etape12getEtapeTypeEv>
   103fe:	4603      	mov	r3, r0
   10400:	f1a3 0364 	sub.w	r3, r3, #100	; 0x64
   10404:	b2db      	uxtb	r3, r3
   10406:	6878      	ldr	r0, [r7, #4]
   10408:	4619      	mov	r1, r3
   1040a:	f7ff ff9d 	bl	10348 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   1040e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10412:	46bd      	mov	sp, r7
   10414:	bd80      	pop	{r7, pc}
   10416:	46c0      	nop			(mov r8, r8)

00010418 <_ZN5Etape12getDistancesEv>:

int* Etape::getDistances()
   10418:	b480      	push	{r7}
   1041a:	b083      	sub	sp, #12
   1041c:	af00      	add	r7, sp, #0
   1041e:	6078      	str	r0, [r7, #4]
{
    return this->distances;
   10420:	687b      	ldr	r3, [r7, #4]
   10422:	6a5b      	ldr	r3, [r3, #36]
}
   10424:	4618      	mov	r0, r3
   10426:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1042a:	46bd      	mov	sp, r7
   1042c:	bc80      	pop	{r7}
   1042e:	4770      	bx	lr

00010430 <_ZN5Etape12setDistancesEPi>:

void Etape::setDistances(int* distances)
   10430:	b480      	push	{r7}
   10432:	b083      	sub	sp, #12
   10434:	af00      	add	r7, sp, #0
   10436:	6078      	str	r0, [r7, #4]
   10438:	6039      	str	r1, [r7, #0]
{
    this->distances = distances;
   1043a:	687a      	ldr	r2, [r7, #4]
   1043c:	683b      	ldr	r3, [r7, #0]
   1043e:	6253      	str	r3, [r2, #36]
}
   10440:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10444:	46bd      	mov	sp, r7
   10446:	bc80      	pop	{r7}
   10448:	4770      	bx	lr
   1044a:	46c0      	nop			(mov r8, r8)

0001044c <_ZN5Etape27getEtapesLieesParFinirEtapeEv>:
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}

int* Etape::getEtapesLieesParFinirEtape()
   1044c:	b480      	push	{r7}
   1044e:	b083      	sub	sp, #12
   10450:	af00      	add	r7, sp, #0
   10452:	6078      	str	r0, [r7, #4]
{
    return this->numerosEtapesLieesParFinirEtape;
   10454:	687b      	ldr	r3, [r7, #4]
   10456:	6adb      	ldr	r3, [r3, #44]
}
   10458:	4618      	mov	r0, r3
   1045a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1045e:	46bd      	mov	sp, r7
   10460:	bc80      	pop	{r7}
   10462:	4770      	bx	lr

00010464 <_ZN5Etape27setEtapesLieesParFinirEtapeEPi>:

void Etape::setEtapesLieesParFinirEtape(int* numerosEtapesLieesParFinirEtape)
   10464:	b480      	push	{r7}
   10466:	b083      	sub	sp, #12
   10468:	af00      	add	r7, sp, #0
   1046a:	6078      	str	r0, [r7, #4]
   1046c:	6039      	str	r1, [r7, #0]
{
    this->numerosEtapesLieesParFinirEtape = numerosEtapesLieesParFinirEtape;
   1046e:	687a      	ldr	r2, [r7, #4]
   10470:	683b      	ldr	r3, [r7, #0]
   10472:	62d3      	str	r3, [r2, #44]
}
   10474:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10478:	46bd      	mov	sp, r7
   1047a:	bc80      	pop	{r7}
   1047c:	4770      	bx	lr
   1047e:	46c0      	nop			(mov r8, r8)

00010480 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>:

int Etape::getNombreEtapesLieesParFinirEtape()
   10480:	b480      	push	{r7}
   10482:	b083      	sub	sp, #12
   10484:	af00      	add	r7, sp, #0
   10486:	6078      	str	r0, [r7, #4]
{
    return this->nombreEtapesLieesParFinirEtape;
   10488:	687b      	ldr	r3, [r7, #4]
   1048a:	6a9b      	ldr	r3, [r3, #40]
}
   1048c:	4618      	mov	r0, r3
   1048e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10492:	46bd      	mov	sp, r7
   10494:	bc80      	pop	{r7}
   10496:	4770      	bx	lr

00010498 <_ZN5Etape5finirEv>:

void Etape::finir(void)
   10498:	b480      	push	{r7}
   1049a:	b083      	sub	sp, #12
   1049c:	af00      	add	r7, sp, #0
   1049e:	6078      	str	r0, [r7, #4]
{
    if(this->type == FRUIT)
   104a0:	687b      	ldr	r3, [r7, #4]
   104a2:	7e1b      	ldrb	r3, [r3, #24]
   104a4:	2b02      	cmp	r3, #2
   104a6:	d103      	bne.n	104b0 <_ZN5Etape5finirEv+0x18>
    {
        this->type = POINT_PASSAGE;
   104a8:	687b      	ldr	r3, [r7, #4]
   104aa:	f04f 0200 	mov.w	r2, #0	; 0x0
   104ae:	761a      	strb	r2, [r3, #24]
    }
}
   104b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   104b4:	46bd      	mov	sp, r7
   104b6:	bc80      	pop	{r7}
   104b8:	4770      	bx	lr
   104ba:	46c0      	nop			(mov r8, r8)

000104bc <_ZN5Etape8setScoreEi>:

void Etape::setScore(int score)
   104bc:	b480      	push	{r7}
   104be:	b083      	sub	sp, #12
   104c0:	af00      	add	r7, sp, #0
   104c2:	6078      	str	r0, [r7, #4]
   104c4:	6039      	str	r1, [r7, #0]
{
    this->score = score;
   104c6:	687a      	ldr	r2, [r7, #4]
   104c8:	683b      	ldr	r3, [r7, #0]
   104ca:	6313      	str	r3, [r2, #48]
}
   104cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
   104d0:	46bd      	mov	sp, r7
   104d2:	bc80      	pop	{r7}
   104d4:	4770      	bx	lr
   104d6:	46c0      	nop			(mov r8, r8)

000104d8 <_ZN5Etape8getScoreEv>:

int Etape::getScore()
   104d8:	b480      	push	{r7}
   104da:	b083      	sub	sp, #12
   104dc:	af00      	add	r7, sp, #0
   104de:	6078      	str	r0, [r7, #4]
{
    return this->score;
   104e0:	687b      	ldr	r3, [r7, #4]
   104e2:	6b1b      	ldr	r3, [r3, #48]
}
   104e4:	4618      	mov	r0, r3
   104e6:	f107 070c 	add.w	r7, r7, #12	; 0xc
   104ea:	46bd      	mov	sp, r7
   104ec:	bc80      	pop	{r7}
   104ee:	4770      	bx	lr

000104f0 <_ZN5Etape9addVoisinEPS_b>:

Etape* Etape::addVoisin(Etape* newVoisin, bool autreSens)
   104f0:	b580      	push	{r7, lr}
   104f2:	b088      	sub	sp, #32
   104f4:	af00      	add	r7, sp, #0
   104f6:	60f8      	str	r0, [r7, #12]
   104f8:	60b9      	str	r1, [r7, #8]
   104fa:	4613      	mov	r3, r2
   104fc:	71fb      	strb	r3, [r7, #7]
{
    if(this->nbChildren==0)
   104fe:	68fb      	ldr	r3, [r7, #12]
   10500:	69db      	ldr	r3, [r3, #28]
   10502:	2b00      	cmp	r3, #0
   10504:	d112      	bne.n	1052c <_ZN5Etape9addVoisinEPS_b+0x3c>
    {
        this->children = new Etape*[1];
   10506:	f04f 0004 	mov.w	r0, #4	; 0x4
   1050a:	f7fe f965 	bl	e7d8 <_Znaj>
   1050e:	4603      	mov	r3, r0
   10510:	461a      	mov	r2, r3
   10512:	68fb      	ldr	r3, [r7, #12]
   10514:	601a      	str	r2, [r3, #0]
        this->children[0] = newVoisin;
   10516:	68fb      	ldr	r3, [r7, #12]
   10518:	681a      	ldr	r2, [r3, #0]
   1051a:	68bb      	ldr	r3, [r7, #8]
   1051c:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   1051e:	68fb      	ldr	r3, [r7, #12]
   10520:	69db      	ldr	r3, [r3, #28]
   10522:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10526:	68fb      	ldr	r3, [r7, #12]
   10528:	61da      	str	r2, [r3, #28]
   1052a:	e060      	b.n	105ee <_ZN5Etape9addVoisinEPS_b+0xfe>
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
   1052c:	68fb      	ldr	r3, [r7, #12]
   1052e:	69db      	ldr	r3, [r3, #28]
   10530:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10534:	4618      	mov	r0, r3
   10536:	f7fe f94f 	bl	e7d8 <_Znaj>
   1053a:	4603      	mov	r3, r0
   1053c:	617b      	str	r3, [r7, #20]
        for(int i=0; i<nbChildren; i++)
   1053e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10542:	61bb      	str	r3, [r7, #24]
   10544:	e011      	b.n	1056a <_ZN5Etape9addVoisinEPS_b+0x7a>
        {
            temp[i] = this->children[i];
   10546:	69bb      	ldr	r3, [r7, #24]
   10548:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1054c:	697b      	ldr	r3, [r7, #20]
   1054e:	eb03 0102 	add.w	r1, r3, r2
   10552:	68fb      	ldr	r3, [r7, #12]
   10554:	681a      	ldr	r2, [r3, #0]
   10556:	69bb      	ldr	r3, [r7, #24]
   10558:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1055c:	4413      	add	r3, r2
   1055e:	681b      	ldr	r3, [r3, #0]
   10560:	600b      	str	r3, [r1, #0]
        this->nbChildren++;
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
        for(int i=0; i<nbChildren; i++)
   10562:	69bb      	ldr	r3, [r7, #24]
   10564:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10568:	61bb      	str	r3, [r7, #24]
   1056a:	68fb      	ldr	r3, [r7, #12]
   1056c:	69da      	ldr	r2, [r3, #28]
   1056e:	69bb      	ldr	r3, [r7, #24]
   10570:	429a      	cmp	r2, r3
   10572:	dce8      	bgt.n	10546 <_ZN5Etape9addVoisinEPS_b+0x56>
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
   10574:	68fb      	ldr	r3, [r7, #12]
   10576:	69db      	ldr	r3, [r3, #28]
   10578:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1057c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10580:	4618      	mov	r0, r3
   10582:	f7fe f929 	bl	e7d8 <_Znaj>
   10586:	4603      	mov	r3, r0
   10588:	461a      	mov	r2, r3
   1058a:	68fb      	ldr	r3, [r7, #12]
   1058c:	601a      	str	r2, [r3, #0]
        for(int i=0; i<nbChildren; i++)
   1058e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10592:	61fb      	str	r3, [r7, #28]
   10594:	e011      	b.n	105ba <_ZN5Etape9addVoisinEPS_b+0xca>
        {
            this->children[i] = temp[i];
   10596:	68fb      	ldr	r3, [r7, #12]
   10598:	681a      	ldr	r2, [r3, #0]
   1059a:	69fb      	ldr	r3, [r7, #28]
   1059c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   105a0:	eb02 0103 	add.w	r1, r2, r3
   105a4:	69fb      	ldr	r3, [r7, #28]
   105a6:	ea4f 0283 	mov.w	r2, r3, lsl #2
   105aa:	697b      	ldr	r3, [r7, #20]
   105ac:	4413      	add	r3, r2
   105ae:	681b      	ldr	r3, [r3, #0]
   105b0:	600b      	str	r3, [r1, #0]
        for(int i=0; i<nbChildren; i++)
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
        for(int i=0; i<nbChildren; i++)
   105b2:	69fb      	ldr	r3, [r7, #28]
   105b4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   105b8:	61fb      	str	r3, [r7, #28]
   105ba:	68fb      	ldr	r3, [r7, #12]
   105bc:	69da      	ldr	r2, [r3, #28]
   105be:	69fb      	ldr	r3, [r7, #28]
   105c0:	429a      	cmp	r2, r3
   105c2:	dce8      	bgt.n	10596 <_ZN5Etape9addVoisinEPS_b+0xa6>
        {
            this->children[i] = temp[i];
        }
        delete[] temp;
   105c4:	697b      	ldr	r3, [r7, #20]
   105c6:	2b00      	cmp	r3, #0
   105c8:	d002      	beq.n	105d0 <_ZN5Etape9addVoisinEPS_b+0xe0>
   105ca:	6978      	ldr	r0, [r7, #20]
   105cc:	f7fe f98a 	bl	e8e4 <_ZdaPv>
        this->children[nbChildren] = newVoisin;
   105d0:	68fb      	ldr	r3, [r7, #12]
   105d2:	681a      	ldr	r2, [r3, #0]
   105d4:	68fb      	ldr	r3, [r7, #12]
   105d6:	69db      	ldr	r3, [r3, #28]
   105d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   105dc:	441a      	add	r2, r3
   105de:	68bb      	ldr	r3, [r7, #8]
   105e0:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   105e2:	68fb      	ldr	r3, [r7, #12]
   105e4:	69db      	ldr	r3, [r3, #28]
   105e6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   105ea:	68fb      	ldr	r3, [r7, #12]
   105ec:	61da      	str	r2, [r3, #28]
        qDebug() << "ERREUR, TROP DE VOISINS !!!";
#endif
    }
    this->children[i] = newVoisin;
    */
    if (autreSens)
   105ee:	79fb      	ldrb	r3, [r7, #7]
   105f0:	2b00      	cmp	r3, #0
   105f2:	d005      	beq.n	10600 <_ZN5Etape9addVoisinEPS_b+0x110>
    {
        newVoisin->addVoisin(this, false);
   105f4:	68b8      	ldr	r0, [r7, #8]
   105f6:	68f9      	ldr	r1, [r7, #12]
   105f8:	f04f 0200 	mov.w	r2, #0	; 0x0
   105fc:	f7ff ff78 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    }
}
   10600:	f107 0720 	add.w	r7, r7, #32	; 0x20
   10604:	46bd      	mov	sp, r7
   10606:	bd80      	pop	{r7, pc}

00010608 <_ZN5Etape21computeChildDistancesEv>:
void Etape::setDistances(int* distances)
{
    this->distances = distances;
}

void Etape::computeChildDistances(){
   10608:	b590      	push	{r4, r7, lr}
   1060a:	b085      	sub	sp, #20
   1060c:	af00      	add	r7, sp, #0
   1060e:	6078      	str	r0, [r7, #4]
    this->distances = new int[this->nbChildren];
   10610:	687b      	ldr	r3, [r7, #4]
   10612:	69db      	ldr	r3, [r3, #28]
   10614:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10618:	4618      	mov	r0, r3
   1061a:	f7fe f8dd 	bl	e7d8 <_Znaj>
   1061e:	4603      	mov	r3, r0
   10620:	461a      	mov	r2, r3
   10622:	687b      	ldr	r3, [r7, #4]
   10624:	625a      	str	r2, [r3, #36]

    for(int i=0; i<this->nbChildren; i++)
   10626:	f04f 0300 	mov.w	r3, #0	; 0x0
   1062a:	60fb      	str	r3, [r7, #12]
   1062c:	e017      	b.n	1065e <_ZN5Etape21computeChildDistancesEv+0x56>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
   1062e:	687b      	ldr	r3, [r7, #4]
   10630:	6a5a      	ldr	r2, [r3, #36]
   10632:	68fb      	ldr	r3, [r7, #12]
   10634:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10638:	eb02 0403 	add.w	r4, r2, r3
   1063c:	687b      	ldr	r3, [r7, #4]
   1063e:	681a      	ldr	r2, [r3, #0]
   10640:	68fb      	ldr	r3, [r7, #12]
   10642:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10646:	4413      	add	r3, r2
   10648:	681b      	ldr	r3, [r3, #0]
   1064a:	4618      	mov	r0, r3
   1064c:	6879      	ldr	r1, [r7, #4]
   1064e:	f7ff fd51 	bl	100f4 <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>
   10652:	4603      	mov	r3, r0
   10654:	6023      	str	r3, [r4, #0]
}

void Etape::computeChildDistances(){
    this->distances = new int[this->nbChildren];

    for(int i=0; i<this->nbChildren; i++)
   10656:	68fb      	ldr	r3, [r7, #12]
   10658:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1065c:	60fb      	str	r3, [r7, #12]
   1065e:	687b      	ldr	r3, [r7, #4]
   10660:	69da      	ldr	r2, [r3, #28]
   10662:	68fb      	ldr	r3, [r7, #12]
   10664:	429a      	cmp	r2, r3
   10666:	dce2      	bgt.n	1062e <_ZN5Etape21computeChildDistancesEv+0x26>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}
   10668:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1066c:	46bd      	mov	sp, r7
   1066e:	bd90      	pop	{r4, r7, pc}

00010670 <_ZN5EtapeC1Ev>:
    }

    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}
   10670:	b580      	push	{r7, lr}
   10672:	b082      	sub	sp, #8
   10674:	af00      	add	r7, sp, #0
   10676:	6078      	str	r0, [r7, #4]
   10678:	687b      	ldr	r3, [r7, #4]
   1067a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1067e:	4618      	mov	r0, r3
   10680:	f7fe f950 	bl	e924 <_ZN8PositionC1Ev>
   10684:	687b      	ldr	r3, [r7, #4]
   10686:	4618      	mov	r0, r3
   10688:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1068c:	46bd      	mov	sp, r7
   1068e:	bd80      	pop	{r7, pc}

00010690 <_ZN5EtapeC2Ev>:
   10690:	b580      	push	{r7, lr}
   10692:	b082      	sub	sp, #8
   10694:	af00      	add	r7, sp, #0
   10696:	6078      	str	r0, [r7, #4]
   10698:	687b      	ldr	r3, [r7, #4]
   1069a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1069e:	4618      	mov	r0, r3
   106a0:	f7fe f940 	bl	e924 <_ZN8PositionC1Ev>
   106a4:	687b      	ldr	r3, [r7, #4]
   106a6:	4618      	mov	r0, r3
   106a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
   106ac:	46bd      	mov	sp, r7
   106ae:	bd80      	pop	{r7, pc}

000106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   106b0:	b580      	push	{r7, lr}
   106b2:	b086      	sub	sp, #24
   106b4:	af00      	add	r7, sp, #0
   106b6:	60f8      	str	r0, [r7, #12]
   106b8:	f107 0004 	add.w	r0, r7, #4	; 0x4
   106bc:	e880 0006 	stmia.w	r0, {r1, r2}
   106c0:	603b      	str	r3, [r7, #0]
   106c2:	68fb      	ldr	r3, [r7, #12]
   106c4:	f103 0308 	add.w	r3, r3, #8	; 0x8
   106c8:	4618      	mov	r0, r3
   106ca:	f7fe f92b 	bl	e924 <_ZN8PositionC1Ev>
{
    this->position = position;
   106ce:	68fb      	ldr	r3, [r7, #12]
   106d0:	f103 0308 	add.w	r3, r3, #8	; 0x8
   106d4:	4618      	mov	r0, r3
   106d6:	f107 0304 	add.w	r3, r7, #4	; 0x4
   106da:	e893 0006 	ldmia.w	r3, {r1, r2}
   106de:	f7fe f9dd 	bl	ea9c <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   106e2:	68fa      	ldr	r2, [r7, #12]
   106e4:	f897 3024 	ldrb.w	r3, [r7, #36]
   106e8:	7613      	strb	r3, [r2, #24]
    this->state = state;
   106ea:	68fa      	ldr	r2, [r7, #12]
   106ec:	6abb      	ldr	r3, [r7, #40]
   106ee:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   106f0:	68fa      	ldr	r2, [r7, #12]
   106f2:	f04f 0300 	mov.w	r3, #0	; 0x0
   106f6:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   106f8:	68fa      	ldr	r2, [r7, #12]
   106fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   106fe:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10700:	68fa      	ldr	r2, [r7, #12]
   10702:	683b      	ldr	r3, [r7, #0]
   10704:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   10706:	68fa      	ldr	r2, [r7, #12]
   10708:	6afb      	ldr	r3, [r7, #44]
   1070a:	6293      	str	r3, [r2, #40]
    this->score = 0;
   1070c:	68fa      	ldr	r2, [r7, #12]
   1070e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10712:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10714:	f04f 0300 	mov.w	r3, #0	; 0x0
   10718:	617b      	str	r3, [r7, #20]
   1071a:	e00c      	b.n	10736 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   1071c:	68fb      	ldr	r3, [r7, #12]
   1071e:	681a      	ldr	r2, [r3, #0]
   10720:	697b      	ldr	r3, [r7, #20]
   10722:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10726:	441a      	add	r2, r3
   10728:	f04f 0300 	mov.w	r3, #0	; 0x0
   1072c:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   1072e:	697b      	ldr	r3, [r7, #20]
   10730:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10734:	617b      	str	r3, [r7, #20]
   10736:	68fb      	ldr	r3, [r7, #12]
   10738:	69da      	ldr	r2, [r3, #28]
   1073a:	697b      	ldr	r3, [r7, #20]
   1073c:	429a      	cmp	r2, r3
   1073e:	dced      	bgt.n	1071c <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10740:	683b      	ldr	r3, [r7, #0]
   10742:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10746:	6a3b      	ldr	r3, [r7, #32]
   10748:	441a      	add	r2, r3
   1074a:	68fb      	ldr	r3, [r7, #12]
   1074c:	6013      	str	r3, [r2, #0]
}
   1074e:	68fb      	ldr	r3, [r7, #12]
   10750:	4618      	mov	r0, r3
   10752:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10756:	46bd      	mov	sp, r7
   10758:	bd80      	pop	{r7, pc}
   1075a:	46c0      	nop			(mov r8, r8)

0001075c <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   1075c:	b580      	push	{r7, lr}
   1075e:	b086      	sub	sp, #24
   10760:	af00      	add	r7, sp, #0
   10762:	60f8      	str	r0, [r7, #12]
   10764:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10768:	e880 0006 	stmia.w	r0, {r1, r2}
   1076c:	603b      	str	r3, [r7, #0]
   1076e:	68fb      	ldr	r3, [r7, #12]
   10770:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10774:	4618      	mov	r0, r3
   10776:	f7fe f8d5 	bl	e924 <_ZN8PositionC1Ev>
{
    this->position = position;
   1077a:	68fb      	ldr	r3, [r7, #12]
   1077c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10780:	4618      	mov	r0, r3
   10782:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10786:	e893 0006 	ldmia.w	r3, {r1, r2}
   1078a:	f7fe f987 	bl	ea9c <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   1078e:	68fa      	ldr	r2, [r7, #12]
   10790:	f897 3024 	ldrb.w	r3, [r7, #36]
   10794:	7613      	strb	r3, [r2, #24]
    this->state = state;
   10796:	68fa      	ldr	r2, [r7, #12]
   10798:	6abb      	ldr	r3, [r7, #40]
   1079a:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   1079c:	68fa      	ldr	r2, [r7, #12]
   1079e:	f04f 0300 	mov.w	r3, #0	; 0x0
   107a2:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   107a4:	68fa      	ldr	r2, [r7, #12]
   107a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   107aa:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   107ac:	68fa      	ldr	r2, [r7, #12]
   107ae:	683b      	ldr	r3, [r7, #0]
   107b0:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   107b2:	68fa      	ldr	r2, [r7, #12]
   107b4:	6afb      	ldr	r3, [r7, #44]
   107b6:	6293      	str	r3, [r2, #40]
    this->score = 0;
   107b8:	68fa      	ldr	r2, [r7, #12]
   107ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   107be:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   107c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   107c4:	617b      	str	r3, [r7, #20]
   107c6:	e00c      	b.n	107e2 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   107c8:	68fb      	ldr	r3, [r7, #12]
   107ca:	681a      	ldr	r2, [r3, #0]
   107cc:	697b      	ldr	r3, [r7, #20]
   107ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
   107d2:	441a      	add	r2, r3
   107d4:	f04f 0300 	mov.w	r3, #0	; 0x0
   107d8:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   107da:	697b      	ldr	r3, [r7, #20]
   107dc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   107e0:	617b      	str	r3, [r7, #20]
   107e2:	68fb      	ldr	r3, [r7, #12]
   107e4:	69da      	ldr	r2, [r3, #28]
   107e6:	697b      	ldr	r3, [r7, #20]
   107e8:	429a      	cmp	r2, r3
   107ea:	dced      	bgt.n	107c8 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   107ec:	683b      	ldr	r3, [r7, #0]
   107ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
   107f2:	6a3b      	ldr	r3, [r7, #32]
   107f4:	441a      	add	r2, r3
   107f6:	68fb      	ldr	r3, [r7, #12]
   107f8:	6013      	str	r3, [r2, #0]
}
   107fa:	68fb      	ldr	r3, [r7, #12]
   107fc:	4618      	mov	r0, r3
   107fe:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10802:	46bd      	mov	sp, r7
   10804:	bd80      	pop	{r7, pc}
   10806:	46c0      	nop			(mov r8, r8)

00010808 <_ZN7Gobelet6updateEv>:

Gobelet::Gobelet(Position position):MediumLevelAction(position){}

Gobelet::~Gobelet(){}

int Gobelet::update()
   10808:	b580      	push	{r7, lr}
   1080a:	b084      	sub	sp, #16
   1080c:	af02      	add	r7, sp, #8
   1080e:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
   10810:	687b      	ldr	r3, [r7, #4]
   10812:	68db      	ldr	r3, [r3, #12]
   10814:	2b00      	cmp	r3, #0
   10816:	d106      	bne.n	10826 <_ZN7Gobelet6updateEv+0x1e>
    {
        #ifndef ROBOTHW
            qDebug() << "gobelet";
        #endif
        status++;
   10818:	687b      	ldr	r3, [r7, #4]
   1081a:	68db      	ldr	r3, [r3, #12]
   1081c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10820:	687b      	ldr	r3, [r7, #4]
   10822:	60da      	str	r2, [r3, #12]
   10824:	e063      	b.n	108ee <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 1)
   10826:	687b      	ldr	r3, [r7, #4]
   10828:	68db      	ldr	r3, [r3, #12]
   1082a:	2b01      	cmp	r3, #1
   1082c:	d114      	bne.n	10858 <_ZN7Gobelet6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   1082e:	687b      	ldr	r3, [r7, #4]
   10830:	f893 c010 	ldrb.w	ip, [r3, #16]
   10834:	687a      	ldr	r2, [r7, #4]
   10836:	4b31      	ldr	r3, [pc, #196]	(108fc <_ZN7Gobelet6updateEv+0xf4>)
   10838:	9300      	str	r3, [sp, #0]
   1083a:	f102 0304 	add.w	r3, r2, #4	; 0x4
   1083e:	e893 0003 	ldmia.w	r3, {r0, r1}
   10842:	4662      	mov	r2, ip
   10844:	4b2e      	ldr	r3, [pc, #184]	(10900 <_ZN7Gobelet6updateEv+0xf8>)
   10846:	f005 fb45 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   1084a:	687b      	ldr	r3, [r7, #4]
   1084c:	68db      	ldr	r3, [r3, #12]
   1084e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10852:	687b      	ldr	r3, [r7, #4]
   10854:	60da      	str	r2, [r3, #12]
   10856:	e04a      	b.n	108ee <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 2)
   10858:	687b      	ldr	r3, [r7, #4]
   1085a:	68db      	ldr	r3, [r3, #12]
   1085c:	2b02      	cmp	r3, #2
   1085e:	d119      	bne.n	10894 <_ZN7Gobelet6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
   10860:	687b      	ldr	r3, [r7, #4]
   10862:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10866:	e893 0003 	ldmia.w	r3, {r0, r1}
   1086a:	4a26      	ldr	r2, [pc, #152]	(10904 <_ZN7Gobelet6updateEv+0xfc>)
   1086c:	f7f7 fbe6 	bl	803c <_ZN7Command6isNearE8Positionf>
   10870:	4603      	mov	r3, r0
   10872:	2b00      	cmp	r3, #0
   10874:	d03b      	beq.n	108ee <_ZN7Gobelet6updateEv+0xe6>
        {
            StrategieV2::lookAt(goalPosition);
   10876:	687b      	ldr	r3, [r7, #4]
   10878:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1087c:	e893 0003 	ldmia.w	r3, {r0, r1}
   10880:	4a21      	ldr	r2, [pc, #132]	(10908 <_ZN7Gobelet6updateEv+0x100>)
   10882:	f005 fa8f 	bl	15da4 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   10886:	687b      	ldr	r3, [r7, #4]
   10888:	68db      	ldr	r3, [r3, #12]
   1088a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1088e:	687b      	ldr	r3, [r7, #4]
   10890:	60da      	str	r2, [r3, #12]
   10892:	e02c      	b.n	108ee <_ZN7Gobelet6updateEv+0xe6>
        }
    }

    else if (status == 3)
   10894:	687b      	ldr	r3, [r7, #4]
   10896:	68db      	ldr	r3, [r3, #12]
   10898:	2b03      	cmp	r3, #3
   1089a:	d111      	bne.n	108c0 <_ZN7Gobelet6updateEv+0xb8>
    {
        if (Command::isLookingAt(goalPosition))
   1089c:	687b      	ldr	r3, [r7, #4]
   1089e:	f103 0304 	add.w	r3, r3, #4	; 0x4
   108a2:	e893 0003 	ldmia.w	r3, {r0, r1}
   108a6:	4a19      	ldr	r2, [pc, #100]	(1090c <_ZN7Gobelet6updateEv+0x104>)
   108a8:	f7f7 fb0c 	bl	7ec4 <_ZN7Command11isLookingAtE8Positionf>
   108ac:	4603      	mov	r3, r0
   108ae:	2b00      	cmp	r3, #0
   108b0:	d01d      	beq.n	108ee <_ZN7Gobelet6updateEv+0xe6>
        {
            //recuperer le gobelet
            #ifndef ROBOTHW
            qDebug() << "On recupere le gobelet";
            #endif
            status++;
   108b2:	687b      	ldr	r3, [r7, #4]
   108b4:	68db      	ldr	r3, [r3, #12]
   108b6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   108ba:	687b      	ldr	r3, [r7, #4]
   108bc:	60da      	str	r2, [r3, #12]
   108be:	e016      	b.n	108ee <_ZN7Gobelet6updateEv+0xe6>
        }
    }

    else if (status <=53 && status > -1)
   108c0:	687b      	ldr	r3, [r7, #4]
   108c2:	68db      	ldr	r3, [r3, #12]
   108c4:	2b35      	cmp	r3, #53
   108c6:	dc0a      	bgt.n	108de <_ZN7Gobelet6updateEv+0xd6>
   108c8:	687b      	ldr	r3, [r7, #4]
   108ca:	68db      	ldr	r3, [r3, #12]
   108cc:	2b00      	cmp	r3, #0
   108ce:	db06      	blt.n	108de <_ZN7Gobelet6updateEv+0xd6>
    {
        status++;
   108d0:	687b      	ldr	r3, [r7, #4]
   108d2:	68db      	ldr	r3, [r3, #12]
   108d4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   108d8:	687b      	ldr	r3, [r7, #4]
   108da:	60da      	str	r2, [r3, #12]
   108dc:	e007      	b.n	108ee <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 54)
   108de:	687b      	ldr	r3, [r7, #4]
   108e0:	68db      	ldr	r3, [r3, #12]
   108e2:	2b36      	cmp	r3, #54
   108e4:	d103      	bne.n	108ee <_ZN7Gobelet6updateEv+0xe6>
    {
        status = -1;
   108e6:	687a      	ldr	r2, [r7, #4]
   108e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   108ec:	60d3      	str	r3, [r2, #12]
    }

    return status;
   108ee:	687b      	ldr	r3, [r7, #4]
   108f0:	68db      	ldr	r3, [r3, #12]
}
   108f2:	4618      	mov	r0, r3
   108f4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   108f8:	46bd      	mov	sp, r7
   108fa:	bd80      	pop	{r7, pc}
   108fc:	c2c80000 	.word	0xc2c80000
   10900:	40400000 	.word	0x40400000
   10904:	41f00000 	.word	0x41f00000
   10908:	3cf5c28f 	.word	0x3cf5c28f
   1090c:	3db2b8c2 	.word	0x3db2b8c2

00010910 <_ZN7GobeletD0Ev>:

Gobelet::Gobelet(){}

Gobelet::Gobelet(Position position):MediumLevelAction(position){}

Gobelet::~Gobelet(){}
   10910:	b580      	push	{r7, lr}
   10912:	b082      	sub	sp, #8
   10914:	af00      	add	r7, sp, #0
   10916:	6078      	str	r0, [r7, #4]
   10918:	687a      	ldr	r2, [r7, #4]
   1091a:	4b0a      	ldr	r3, [pc, #40]	(10944 <_ZN7GobeletD0Ev+0x34>)
   1091c:	6013      	str	r3, [r2, #0]
   1091e:	687b      	ldr	r3, [r7, #4]
   10920:	4618      	mov	r0, r3
   10922:	f004 fae7 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   10926:	f04f 0301 	mov.w	r3, #1	; 0x1
   1092a:	b2db      	uxtb	r3, r3
   1092c:	2b00      	cmp	r3, #0
   1092e:	d002      	beq.n	10936 <_ZN7GobeletD0Ev+0x26>
   10930:	6878      	ldr	r0, [r7, #4]
   10932:	f7fd ff5f 	bl	e7f4 <_ZdlPv>
   10936:	687b      	ldr	r3, [r7, #4]
   10938:	4618      	mov	r0, r3
   1093a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1093e:	46bd      	mov	sp, r7
   10940:	bd80      	pop	{r7, pc}
   10942:	46c0      	nop			(mov r8, r8)
   10944:	00021f90 	.word	0x00021f90

00010948 <_ZN7GobeletD1Ev>:
   10948:	b580      	push	{r7, lr}
   1094a:	b082      	sub	sp, #8
   1094c:	af00      	add	r7, sp, #0
   1094e:	6078      	str	r0, [r7, #4]
   10950:	687a      	ldr	r2, [r7, #4]
   10952:	4b0a      	ldr	r3, [pc, #40]	(1097c <_ZN7GobeletD1Ev+0x34>)
   10954:	6013      	str	r3, [r2, #0]
   10956:	687b      	ldr	r3, [r7, #4]
   10958:	4618      	mov	r0, r3
   1095a:	f004 facb 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   1095e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10962:	b2db      	uxtb	r3, r3
   10964:	2b00      	cmp	r3, #0
   10966:	d002      	beq.n	1096e <_ZN7GobeletD1Ev+0x26>
   10968:	6878      	ldr	r0, [r7, #4]
   1096a:	f7fd ff43 	bl	e7f4 <_ZdlPv>
   1096e:	687b      	ldr	r3, [r7, #4]
   10970:	4618      	mov	r0, r3
   10972:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10976:	46bd      	mov	sp, r7
   10978:	bd80      	pop	{r7, pc}
   1097a:	46c0      	nop			(mov r8, r8)
   1097c:	00021f90 	.word	0x00021f90

00010980 <_ZN7GobeletD2Ev>:
   10980:	b580      	push	{r7, lr}
   10982:	b082      	sub	sp, #8
   10984:	af00      	add	r7, sp, #0
   10986:	6078      	str	r0, [r7, #4]
   10988:	687a      	ldr	r2, [r7, #4]
   1098a:	4b0a      	ldr	r3, [pc, #40]	(109b4 <_ZN7GobeletD2Ev+0x34>)
   1098c:	6013      	str	r3, [r2, #0]
   1098e:	687b      	ldr	r3, [r7, #4]
   10990:	4618      	mov	r0, r3
   10992:	f004 faaf 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   10996:	f04f 0300 	mov.w	r3, #0	; 0x0
   1099a:	b2db      	uxtb	r3, r3
   1099c:	2b00      	cmp	r3, #0
   1099e:	d002      	beq.n	109a6 <_ZN7GobeletD2Ev+0x26>
   109a0:	6878      	ldr	r0, [r7, #4]
   109a2:	f7fd ff27 	bl	e7f4 <_ZdlPv>
   109a6:	687b      	ldr	r3, [r7, #4]
   109a8:	4618      	mov	r0, r3
   109aa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   109ae:	46bd      	mov	sp, r7
   109b0:	bd80      	pop	{r7, pc}
   109b2:	46c0      	nop			(mov r8, r8)
   109b4:	00021f90 	.word	0x00021f90

000109b8 <_ZN7GobeletC1E8Position>:
#include "command.h"


Gobelet::Gobelet(){}

Gobelet::Gobelet(Position position):MediumLevelAction(position){}
   109b8:	b580      	push	{r7, lr}
   109ba:	b084      	sub	sp, #16
   109bc:	af00      	add	r7, sp, #0
   109be:	60f8      	str	r0, [r7, #12]
   109c0:	f107 0304 	add.w	r3, r7, #4	; 0x4
   109c4:	e883 0006 	stmia.w	r3, {r1, r2}
   109c8:	68fb      	ldr	r3, [r7, #12]
   109ca:	4618      	mov	r0, r3
   109cc:	f107 0304 	add.w	r3, r7, #4	; 0x4
   109d0:	e893 0006 	ldmia.w	r3, {r1, r2}
   109d4:	f004 face 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   109d8:	68fa      	ldr	r2, [r7, #12]
   109da:	4b07      	ldr	r3, [pc, #28]	(109f8 <_ZN7GobeletC1E8Position+0x40>)
   109dc:	6013      	str	r3, [r2, #0]
   109de:	68fb      	ldr	r3, [r7, #12]
   109e0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   109e4:	4618      	mov	r0, r3
   109e6:	f7fd ff9d 	bl	e924 <_ZN8PositionC1Ev>
   109ea:	68fb      	ldr	r3, [r7, #12]
   109ec:	4618      	mov	r0, r3
   109ee:	f107 0710 	add.w	r7, r7, #16	; 0x10
   109f2:	46bd      	mov	sp, r7
   109f4:	bd80      	pop	{r7, pc}
   109f6:	46c0      	nop			(mov r8, r8)
   109f8:	00021f90 	.word	0x00021f90

000109fc <_ZN7GobeletC2E8Position>:
   109fc:	b580      	push	{r7, lr}
   109fe:	b084      	sub	sp, #16
   10a00:	af00      	add	r7, sp, #0
   10a02:	60f8      	str	r0, [r7, #12]
   10a04:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10a08:	e883 0006 	stmia.w	r3, {r1, r2}
   10a0c:	68fb      	ldr	r3, [r7, #12]
   10a0e:	4618      	mov	r0, r3
   10a10:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10a14:	e893 0006 	ldmia.w	r3, {r1, r2}
   10a18:	f004 faac 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   10a1c:	68fa      	ldr	r2, [r7, #12]
   10a1e:	4b07      	ldr	r3, [pc, #28]	(10a3c <_ZN7GobeletC2E8Position+0x40>)
   10a20:	6013      	str	r3, [r2, #0]
   10a22:	68fb      	ldr	r3, [r7, #12]
   10a24:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10a28:	4618      	mov	r0, r3
   10a2a:	f7fd ff7b 	bl	e924 <_ZN8PositionC1Ev>
   10a2e:	68fb      	ldr	r3, [r7, #12]
   10a30:	4618      	mov	r0, r3
   10a32:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10a36:	46bd      	mov	sp, r7
   10a38:	bd80      	pop	{r7, pc}
   10a3a:	46c0      	nop			(mov r8, r8)
   10a3c:	00021f90 	.word	0x00021f90

00010a40 <_ZN7GobeletC1Ev>:
#include "strategieV2.h"
#include "mediumLevelAction.h"
#include "command.h"


Gobelet::Gobelet(){}
   10a40:	b590      	push	{r4, r7, lr}
   10a42:	b085      	sub	sp, #20
   10a44:	af00      	add	r7, sp, #0
   10a46:	6078      	str	r0, [r7, #4]
   10a48:	687c      	ldr	r4, [r7, #4]
   10a4a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10a4e:	4618      	mov	r0, r3
   10a50:	490d      	ldr	r1, [pc, #52]	(10a88 <_ZN7GobeletC1Ev+0x48>)
   10a52:	4a0d      	ldr	r2, [pc, #52]	(10a88 <_ZN7GobeletC1Ev+0x48>)
   10a54:	f04f 0301 	mov.w	r3, #1	; 0x1
   10a58:	f7fd ff8c 	bl	e974 <_ZN8PositionC1Effb>
   10a5c:	4620      	mov	r0, r4
   10a5e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10a62:	e893 0006 	ldmia.w	r3, {r1, r2}
   10a66:	f004 fa85 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   10a6a:	687a      	ldr	r2, [r7, #4]
   10a6c:	4b07      	ldr	r3, [pc, #28]	(10a8c <_ZN7GobeletC1Ev+0x4c>)
   10a6e:	6013      	str	r3, [r2, #0]
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10a76:	4618      	mov	r0, r3
   10a78:	f7fd ff54 	bl	e924 <_ZN8PositionC1Ev>
   10a7c:	687b      	ldr	r3, [r7, #4]
   10a7e:	4618      	mov	r0, r3
   10a80:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10a84:	46bd      	mov	sp, r7
   10a86:	bd90      	pop	{r4, r7, pc}
   10a88:	00000000 	.word	0x00000000
   10a8c:	00021f90 	.word	0x00021f90

00010a90 <_ZN7GobeletC2Ev>:
   10a90:	b590      	push	{r4, r7, lr}
   10a92:	b085      	sub	sp, #20
   10a94:	af00      	add	r7, sp, #0
   10a96:	6078      	str	r0, [r7, #4]
   10a98:	687c      	ldr	r4, [r7, #4]
   10a9a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10a9e:	4618      	mov	r0, r3
   10aa0:	490d      	ldr	r1, [pc, #52]	(10ad8 <_ZN7GobeletC2Ev+0x48>)
   10aa2:	4a0d      	ldr	r2, [pc, #52]	(10ad8 <_ZN7GobeletC2Ev+0x48>)
   10aa4:	f04f 0301 	mov.w	r3, #1	; 0x1
   10aa8:	f7fd ff64 	bl	e974 <_ZN8PositionC1Effb>
   10aac:	4620      	mov	r0, r4
   10aae:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10ab2:	e893 0006 	ldmia.w	r3, {r1, r2}
   10ab6:	f004 fa5d 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   10aba:	687a      	ldr	r2, [r7, #4]
   10abc:	4b07      	ldr	r3, [pc, #28]	(10adc <_ZN7GobeletC2Ev+0x4c>)
   10abe:	6013      	str	r3, [r2, #0]
   10ac0:	687b      	ldr	r3, [r7, #4]
   10ac2:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10ac6:	4618      	mov	r0, r3
   10ac8:	f7fd ff2c 	bl	e924 <_ZN8PositionC1Ev>
   10acc:	687b      	ldr	r3, [r7, #4]
   10ace:	4618      	mov	r0, r3
   10ad0:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10ad4:	46bd      	mov	sp, r7
   10ad6:	bd90      	pop	{r4, r7, pc}
   10ad8:	00000000 	.word	0x00000000
   10adc:	00021f90 	.word	0x00021f90

00010ae0 <_ZN9Krabi201513getScoreEtapeEi>:
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
    }
}

int Krabi2015::getScoreEtape(int i){
   10ae0:	b580      	push	{r7, lr}
   10ae2:	b084      	sub	sp, #16
   10ae4:	af00      	add	r7, sp, #0
   10ae6:	60f8      	str	r0, [r7, #12]
   10ae8:	60b9      	str	r1, [r7, #8]
    /* TODO : Supprimer le modificateur temporel et inclure directement un coefficient dans le score pour les actions longues
       Plus tard : pourquoi pas changer le système en ayant les FEU etc... fils de Etape, ça éviterait aussi le switch dans updateStock().
       Juste faire attention à comment transmettre le stock à update.
     */
    switch (this->tableauEtapesTotal[i]->getEtapeType()){
   10aea:	68fb      	ldr	r3, [r7, #12]
   10aec:	6b5a      	ldr	r2, [r3, #52]
   10aee:	68bb      	ldr	r3, [r7, #8]
   10af0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10af4:	4413      	add	r3, r2
   10af6:	681b      	ldr	r3, [r3, #0]
   10af8:	4618      	mov	r0, r3
   10afa:	f7ff fc19 	bl	10330 <_ZN5Etape12getEtapeTypeEv>
   10afe:	4603      	mov	r3, r0
   10b00:	2b15      	cmp	r3, #21
   10b02:	d84b      	bhi.n	10b9c <_ZN9Krabi201513getScoreEtapeEi+0xbc>
   10b04:	a201      	add	r2, pc, #4	(adr r2, 10b0c <_ZN9Krabi201513getScoreEtapeEi+0x2c>)
   10b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10b0a:	46c0      	nop			(mov r8, r8)
   10b0c:	00010b95 	.word	0x00010b95
   10b10:	00010b9d 	.word	0x00010b9d
   10b14:	00010b9d 	.word	0x00010b9d
   10b18:	00010b9d 	.word	0x00010b9d
   10b1c:	00010b9d 	.word	0x00010b9d
   10b20:	00010b65 	.word	0x00010b65
   10b24:	00010b9d 	.word	0x00010b9d
   10b28:	00010b9d 	.word	0x00010b9d
   10b2c:	00010b9d 	.word	0x00010b9d
   10b30:	00010b9d 	.word	0x00010b9d
   10b34:	00010b9d 	.word	0x00010b9d
   10b38:	00010b9d 	.word	0x00010b9d
   10b3c:	00010b9d 	.word	0x00010b9d
   10b40:	00010b9d 	.word	0x00010b9d
   10b44:	00010b9d 	.word	0x00010b9d
   10b48:	00010b9d 	.word	0x00010b9d
   10b4c:	00010b9d 	.word	0x00010b9d
   10b50:	00010b6d 	.word	0x00010b6d
   10b54:	00010b75 	.word	0x00010b75
   10b58:	00010b85 	.word	0x00010b85
   10b5c:	00010b7d 	.word	0x00010b7d
   10b60:	00010b8d 	.word	0x00010b8d
        case Etape::DEPART :
            return 0;
   10b64:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b68:	607b      	str	r3, [r7, #4]
   10b6a:	e01a      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::CLAP :
            return 50;
   10b6c:	f04f 0232 	mov.w	r2, #50	; 0x32
   10b70:	607a      	str	r2, [r7, #4]
   10b72:	e016      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::GOBELET :
            return 0;//ce devrait être 40
   10b74:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b78:	607b      	str	r3, [r7, #4]
   10b7a:	e012      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::AMPOULE :
            return 10;
   10b7c:	f04f 020a 	mov.w	r2, #10	; 0xa
   10b80:	607a      	str	r2, [r7, #4]
   10b82:	e00e      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::PIED :
            return 0;//ce devrait être 20
   10b84:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b88:	607b      	str	r3, [r7, #4]
   10b8a:	e00a      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::TAPIS :
            return 100;
   10b8c:	f04f 0264 	mov.w	r2, #100	; 0x64
   10b90:	607a      	str	r2, [r7, #4]
   10b92:	e006      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::POINT_PASSAGE :
            return 0;
   10b94:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b98:	607b      	str	r3, [r7, #4]
   10b9a:	e002      	b.n	10ba2 <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        default :
            return 0;
   10b9c:	f04f 0200 	mov.w	r2, #0	; 0x0
   10ba0:	607a      	str	r2, [r7, #4]
   10ba2:	687b      	ldr	r3, [r7, #4]
            break;
    }
}
   10ba4:	4618      	mov	r0, r3
   10ba6:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10baa:	46bd      	mov	sp, r7
   10bac:	bd80      	pop	{r7, pc}
   10bae:	46c0      	nop			(mov r8, r8)

00010bb0 <_ZN9Krabi201511updateStockEv>:

    // Lancer Dijkstra
    startDijkstra();
}

void Krabi2015::updateStock(){
   10bb0:	b580      	push	{r7, lr}
   10bb2:	b082      	sub	sp, #8
   10bb4:	af00      	add	r7, sp, #0
   10bb6:	6078      	str	r0, [r7, #4]
    switch(this->tableauEtapes[this->etapeEnCours]->getEtapeType()){
   10bb8:	687b      	ldr	r3, [r7, #4]
   10bba:	6b1a      	ldr	r2, [r3, #48]
   10bbc:	687b      	ldr	r3, [r7, #4]
   10bbe:	699b      	ldr	r3, [r3, #24]
   10bc0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10bc4:	4413      	add	r3, r2
   10bc6:	681b      	ldr	r3, [r3, #0]
   10bc8:	4618      	mov	r0, r3
   10bca:	f7ff fbb1 	bl	10330 <_ZN5Etape12getEtapeTypeEv>
   10bce:	4603      	mov	r3, r0
   10bd0:	2b05      	cmp	r3, #5
   10bd2:	d10d      	bne.n	10bf0 <_ZN9Krabi201511updateStockEv+0x40>
        case Etape::DEPART :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   10bd4:	687b      	ldr	r3, [r7, #4]
   10bd6:	6b1a      	ldr	r2, [r3, #48]
   10bd8:	687b      	ldr	r3, [r7, #4]
   10bda:	699b      	ldr	r3, [r3, #24]
   10bdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10be0:	4413      	add	r3, r2
   10be2:	681b      	ldr	r3, [r3, #0]
   10be4:	4618      	mov	r0, r3
   10be6:	f04f 0100 	mov.w	r1, #0	; 0x0
   10bea:	f7ff fbad 	bl	10348 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
   10bee:	e00c      	b.n	10c0a <_ZN9Krabi201511updateStockEv+0x5a>
            break;
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   10bf0:	687b      	ldr	r3, [r7, #4]
   10bf2:	6b1a      	ldr	r2, [r3, #48]
   10bf4:	687b      	ldr	r3, [r7, #4]
   10bf6:	699b      	ldr	r3, [r3, #24]
   10bf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10bfc:	4413      	add	r3, r2
   10bfe:	681b      	ldr	r3, [r3, #0]
   10c00:	4618      	mov	r0, r3
   10c02:	f04f 0100 	mov.w	r1, #0	; 0x0
   10c06:	f7ff fb9f 	bl	10348 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   10c0a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10c0e:	46bd      	mov	sp, r7
   10c10:	bd80      	pop	{r7, pc}
   10c12:	46c0      	nop			(mov r8, r8)

00010c14 <_ZN9Krabi2015C1Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   10c14:	b590      	push	{r4, r7, lr}
   10c16:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
   10c1a:	b081      	sub	sp, #4
   10c1c:	af04      	add	r7, sp, #16
   10c1e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10c22:	6018      	str	r0, [r3, #0]
   10c24:	460a      	mov	r2, r1
   10c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10c2a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10c2e:	701a      	strb	r2, [r3, #0]
   10c30:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10c34:	681a      	ldr	r2, [r3, #0]
   10c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10c3a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10c3e:	781b      	ldrb	r3, [r3, #0]
   10c40:	4610      	mov	r0, r2
   10c42:	4619      	mov	r1, r3
   10c44:	f006 f9dc 	bl	17000 <_ZN11StrategieV3C2Eb>
   10c48:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10c4c:	681a      	ldr	r2, [r3, #0]
   10c4e:	f8df 3c70 	ldr.w	r3, [pc, #3184]	; 118c0 <_ZN9Krabi2015C1Eb+0xcac>
   10c52:	6013      	str	r3, [r2, #0]
   10c54:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10c58:	681b      	ldr	r3, [r3, #0]
   10c5a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   10c5e:	607b      	str	r3, [r7, #4]
   10c60:	f04f 0302 	mov.w	r3, #2	; 0x2
   10c64:	60bb      	str	r3, [r7, #8]
   10c66:	e00a      	b.n	10c7e <_ZN9Krabi2015C1Eb+0x6a>
   10c68:	6878      	ldr	r0, [r7, #4]
   10c6a:	f7fe fe05 	bl	f878 <_ZN4ClapC1Ev>
   10c6e:	687b      	ldr	r3, [r7, #4]
   10c70:	f103 0328 	add.w	r3, r3, #40	; 0x28
   10c74:	607b      	str	r3, [r7, #4]
   10c76:	68bb      	ldr	r3, [r7, #8]
   10c78:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10c7c:	60bb      	str	r3, [r7, #8]
   10c7e:	68bb      	ldr	r3, [r7, #8]
   10c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10c84:	d1f0      	bne.n	10c68 <_ZN9Krabi2015C1Eb+0x54>
   10c86:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10c8a:	681b      	ldr	r3, [r3, #0]
   10c8c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   10c90:	60fb      	str	r3, [r7, #12]
   10c92:	f04f 0304 	mov.w	r3, #4	; 0x4
   10c96:	613b      	str	r3, [r7, #16]
   10c98:	e00a      	b.n	10cb0 <_ZN9Krabi2015C1Eb+0x9c>
   10c9a:	68f8      	ldr	r0, [r7, #12]
   10c9c:	f7ff fed0 	bl	10a40 <_ZN7GobeletC1Ev>
   10ca0:	68fb      	ldr	r3, [r7, #12]
   10ca2:	f103 0320 	add.w	r3, r3, #32	; 0x20
   10ca6:	60fb      	str	r3, [r7, #12]
   10ca8:	693b      	ldr	r3, [r7, #16]
   10caa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10cae:	613b      	str	r3, [r7, #16]
   10cb0:	693b      	ldr	r3, [r7, #16]
   10cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10cb6:	d1f0      	bne.n	10c9a <_ZN9Krabi2015C1Eb+0x86>
   10cb8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10cbc:	681b      	ldr	r3, [r3, #0]
   10cbe:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   10cc2:	617b      	str	r3, [r7, #20]
   10cc4:	f04f 0300 	mov.w	r3, #0	; 0x0
   10cc8:	61bb      	str	r3, [r7, #24]
   10cca:	e00a      	b.n	10ce2 <_ZN9Krabi2015C1Eb+0xce>
   10ccc:	6978      	ldr	r0, [r7, #20]
   10cce:	f006 fae3 	bl	17298 <_ZN5TapisC1Ev>
   10cd2:	697b      	ldr	r3, [r7, #20]
   10cd4:	f103 0328 	add.w	r3, r3, #40	; 0x28
   10cd8:	617b      	str	r3, [r7, #20]
   10cda:	69bb      	ldr	r3, [r7, #24]
   10cdc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10ce0:	61bb      	str	r3, [r7, #24]
   10ce2:	69bb      	ldr	r3, [r7, #24]
   10ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10ce8:	d1f0      	bne.n	10ccc <_ZN9Krabi2015C1Eb+0xb8>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   10cea:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10cee:	681a      	ldr	r2, [r3, #0]
   10cf0:	f04f 0326 	mov.w	r3, #38	; 0x26
   10cf4:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   10cf6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10cfa:	681a      	ldr	r2, [r3, #0]
   10cfc:	f04f 0301 	mov.w	r3, #1	; 0x1
   10d00:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   10d02:	f04f 0098 	mov.w	r0, #152	; 0x98
   10d06:	f7fd fd67 	bl	e7d8 <_Znaj>
   10d0a:	4603      	mov	r3, r0
   10d0c:	461a      	mov	r2, r3
   10d0e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10d12:	681b      	ldr	r3, [r3, #0]
   10d14:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   10d16:	f04f 0098 	mov.w	r0, #152	; 0x98
   10d1a:	f7fd fd5d 	bl	e7d8 <_Znaj>
   10d1e:	4603      	mov	r3, r0
   10d20:	461a      	mov	r2, r3
   10d22:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10d26:	681b      	ldr	r3, [r3, #0]
   10d28:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   10d2a:	f44f 60e5 	mov.w	r0, #1832	; 0x728
   10d2e:	f7fd fd53 	bl	e7d8 <_Znaj>
   10d32:	4603      	mov	r3, r0
   10d34:	61fb      	str	r3, [r7, #28]
   10d36:	69fb      	ldr	r3, [r7, #28]
   10d38:	2b00      	cmp	r3, #0
   10d3a:	d03c      	beq.n	10db6 <_ZN9Krabi2015C1Eb+0x1a2>
   10d3c:	69fb      	ldr	r3, [r7, #28]
   10d3e:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10d42:	627b      	str	r3, [r7, #36]
   10d44:	6a7b      	ldr	r3, [r7, #36]
   10d46:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   10d4a:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   10d4e:	f04f 0330 	mov.w	r3, #48	; 0x30
   10d52:	6013      	str	r3, [r2, #0]
   10d54:	6a7b      	ldr	r3, [r7, #36]
   10d56:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   10d5a:	f04f 0326 	mov.w	r3, #38	; 0x26
   10d5e:	6013      	str	r3, [r2, #0]
   10d60:	6a7b      	ldr	r3, [r7, #36]
   10d62:	62bb      	str	r3, [r7, #40]
   10d64:	f04f 0325 	mov.w	r3, #37	; 0x25
   10d68:	62fb      	str	r3, [r7, #44]
   10d6a:	e01d      	b.n	10da8 <_ZN9Krabi2015C1Eb+0x194>
   10d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10d70:	4618      	mov	r0, r3
   10d72:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 118c4 <_ZN9Krabi2015C1Eb+0xcb0>
   10d76:	f8df 2b4c 	ldr.w	r2, [pc, #2892]	; 118c4 <_ZN9Krabi2015C1Eb+0xcb0>
   10d7a:	f04f 0301 	mov.w	r3, #1	; 0x1
   10d7e:	f7fd fdf9 	bl	e974 <_ZN8PositionC1Effb>
   10d82:	f507 7200 	add.w	r2, r7, #512	; 0x200
   10d86:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 118c8 <_ZN9Krabi2015C1Eb+0xcb4>
   10d8a:	9300      	str	r3, [sp, #0]
   10d8c:	6ab8      	ldr	r0, [r7, #40]
   10d8e:	ca06      	ldmia	r2!, {r1, r2}
   10d90:	f04f 0300 	mov.w	r3, #0	; 0x0
   10d94:	f7fe fb14 	bl	f3c0 <_ZN10ActionGoToC1E8Positionbf>
   10d98:	6abb      	ldr	r3, [r7, #40]
   10d9a:	f103 0330 	add.w	r3, r3, #48	; 0x30
   10d9e:	62bb      	str	r3, [r7, #40]
   10da0:	6afb      	ldr	r3, [r7, #44]
   10da2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10da6:	62fb      	str	r3, [r7, #44]
   10da8:	6afb      	ldr	r3, [r7, #44]
   10daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10dae:	d1dd      	bne.n	10d6c <_ZN9Krabi2015C1Eb+0x158>
   10db0:	6a7b      	ldr	r3, [r7, #36]
   10db2:	623b      	str	r3, [r7, #32]
   10db4:	e001      	b.n	10dba <_ZN9Krabi2015C1Eb+0x1a6>
   10db6:	69fb      	ldr	r3, [r7, #28]
   10db8:	623b      	str	r3, [r7, #32]
   10dba:	6a3a      	ldr	r2, [r7, #32]
   10dbc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10dc0:	681b      	ldr	r3, [r3, #0]
   10dc2:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   10dc4:	f04f 0300 	mov.w	r3, #0	; 0x0
   10dc8:	f8c7 3510 	str.w	r3, [r7, #1296]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   10dcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
   10dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10dd4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10dd8:	781b      	ldrb	r3, [r3, #0]
   10dda:	4610      	mov	r0, r2
   10ddc:	f8df 1aec 	ldr.w	r1, [pc, #2796]	; 118cc <_ZN9Krabi2015C1Eb+0xcb8>
   10de0:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 118d0 <_ZN9Krabi2015C1Eb+0xcbc>
   10de4:	f7fd fdc6 	bl	e974 <_ZN8PositionC1Effb>
   10de8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10dec:	633b      	str	r3, [r7, #48]
   10dee:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10df2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10df6:	f8c7 3510 	str.w	r3, [r7, #1296]
   10dfa:	f04f 0034 	mov.w	r0, #52	; 0x34
   10dfe:	f7fd fc53 	bl	e6a8 <_Znwj>
   10e02:	4603      	mov	r3, r0
   10e04:	637b      	str	r3, [r7, #52]
   10e06:	6b7b      	ldr	r3, [r7, #52]
   10e08:	2b00      	cmp	r3, #0
   10e0a:	d017      	beq.n	10e3c <_ZN9Krabi2015C1Eb+0x228>
   10e0c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10e10:	681b      	ldr	r3, [r3, #0]
   10e12:	6b5b      	ldr	r3, [r3, #52]
   10e14:	f507 7202 	add.w	r2, r7, #520	; 0x208
   10e18:	9300      	str	r3, [sp, #0]
   10e1a:	f04f 0305 	mov.w	r3, #5	; 0x5
   10e1e:	9301      	str	r3, [sp, #4]
   10e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e24:	9302      	str	r3, [sp, #8]
   10e26:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e2a:	9303      	str	r3, [sp, #12]
   10e2c:	6b78      	ldr	r0, [r7, #52]
   10e2e:	ca06      	ldmia	r2!, {r1, r2}
   10e30:	6b3b      	ldr	r3, [r7, #48]
   10e32:	f7ff fc3d 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10e36:	6b7b      	ldr	r3, [r7, #52]
   10e38:	63bb      	str	r3, [r7, #56]
   10e3a:	e001      	b.n	10e40 <_ZN9Krabi2015C1Eb+0x22c>
   10e3c:	6b7b      	ldr	r3, [r7, #52]
   10e3e:	63bb      	str	r3, [r7, #56]
   10e40:	6bbb      	ldr	r3, [r7, #56]
   10e42:	f8c7 3514 	str.w	r3, [r7, #1300]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   10e46:	f507 7204 	add.w	r2, r7, #528	; 0x210
   10e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10e4e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10e52:	781b      	ldrb	r3, [r3, #0]
   10e54:	4610      	mov	r0, r2
   10e56:	f8df 1a7c 	ldr.w	r1, [pc, #2684]	; 118d4 <_ZN9Krabi2015C1Eb+0xcc0>
   10e5a:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 118d0 <_ZN9Krabi2015C1Eb+0xcbc>
   10e5e:	f7fd fd89 	bl	e974 <_ZN8PositionC1Effb>
   10e62:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10e66:	63fb      	str	r3, [r7, #60]
   10e68:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10e6c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10e70:	f8c7 3510 	str.w	r3, [r7, #1296]
   10e74:	f04f 0034 	mov.w	r0, #52	; 0x34
   10e78:	f7fd fc16 	bl	e6a8 <_Znwj>
   10e7c:	4603      	mov	r3, r0
   10e7e:	643b      	str	r3, [r7, #64]
   10e80:	6c3b      	ldr	r3, [r7, #64]
   10e82:	2b00      	cmp	r3, #0
   10e84:	d017      	beq.n	10eb6 <_ZN9Krabi2015C1Eb+0x2a2>
   10e86:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10e8a:	681b      	ldr	r3, [r3, #0]
   10e8c:	6b5b      	ldr	r3, [r3, #52]
   10e8e:	f507 7204 	add.w	r2, r7, #528	; 0x210
   10e92:	9300      	str	r3, [sp, #0]
   10e94:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e98:	9301      	str	r3, [sp, #4]
   10e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e9e:	9302      	str	r3, [sp, #8]
   10ea0:	f04f 0300 	mov.w	r3, #0	; 0x0
   10ea4:	9303      	str	r3, [sp, #12]
   10ea6:	6c38      	ldr	r0, [r7, #64]
   10ea8:	ca06      	ldmia	r2!, {r1, r2}
   10eaa:	6bfb      	ldr	r3, [r7, #60]
   10eac:	f7ff fc00 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10eb0:	6c3b      	ldr	r3, [r7, #64]
   10eb2:	647b      	str	r3, [r7, #68]
   10eb4:	e001      	b.n	10eba <_ZN9Krabi2015C1Eb+0x2a6>
   10eb6:	6c3b      	ldr	r3, [r7, #64]
   10eb8:	647b      	str	r3, [r7, #68]
   10eba:	6c7b      	ldr	r3, [r7, #68]
   10ebc:	f8c7 3518 	str.w	r3, [r7, #1304]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10ec0:	f507 7206 	add.w	r2, r7, #536	; 0x218
   10ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10ec8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10ecc:	781b      	ldrb	r3, [r3, #0]
   10ece:	4610      	mov	r0, r2
   10ed0:	f8df 1a04 	ldr.w	r1, [pc, #2564]	; 118d8 <_ZN9Krabi2015C1Eb+0xcc4>
   10ed4:	f8df 2a04 	ldr.w	r2, [pc, #2564]	; 118dc <_ZN9Krabi2015C1Eb+0xcc8>
   10ed8:	f7fd fd4c 	bl	e974 <_ZN8PositionC1Effb>
   10edc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10ee0:	64bb      	str	r3, [r7, #72]
   10ee2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10ee6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10eea:	f8c7 3510 	str.w	r3, [r7, #1296]
   10eee:	f04f 0034 	mov.w	r0, #52	; 0x34
   10ef2:	f7fd fbd9 	bl	e6a8 <_Znwj>
   10ef6:	4603      	mov	r3, r0
   10ef8:	64fb      	str	r3, [r7, #76]
   10efa:	6cfb      	ldr	r3, [r7, #76]
   10efc:	2b00      	cmp	r3, #0
   10efe:	d017      	beq.n	10f30 <_ZN9Krabi2015C1Eb+0x31c>
   10f00:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10f04:	681b      	ldr	r3, [r3, #0]
   10f06:	6b5b      	ldr	r3, [r3, #52]
   10f08:	f507 7206 	add.w	r2, r7, #536	; 0x218
   10f0c:	9300      	str	r3, [sp, #0]
   10f0e:	f04f 0311 	mov.w	r3, #17	; 0x11
   10f12:	9301      	str	r3, [sp, #4]
   10f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f18:	9302      	str	r3, [sp, #8]
   10f1a:	f04f 0300 	mov.w	r3, #0	; 0x0
   10f1e:	9303      	str	r3, [sp, #12]
   10f20:	6cf8      	ldr	r0, [r7, #76]
   10f22:	ca06      	ldmia	r2!, {r1, r2}
   10f24:	6cbb      	ldr	r3, [r7, #72]
   10f26:	f7ff fbc3 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10f2a:	6cfb      	ldr	r3, [r7, #76]
   10f2c:	653b      	str	r3, [r7, #80]
   10f2e:	e001      	b.n	10f34 <_ZN9Krabi2015C1Eb+0x320>
   10f30:	6cfb      	ldr	r3, [r7, #76]
   10f32:	653b      	str	r3, [r7, #80]
   10f34:	6d3b      	ldr	r3, [r7, #80]
   10f36:	f8c7 351c 	str.w	r3, [r7, #1308]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   10f3a:	f507 7208 	add.w	r2, r7, #544	; 0x220
   10f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10f42:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10f46:	781b      	ldrb	r3, [r3, #0]
   10f48:	4610      	mov	r0, r2
   10f4a:	f8df 1984 	ldr.w	r1, [pc, #2436]	; 118d0 <_ZN9Krabi2015C1Eb+0xcbc>
   10f4e:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 118dc <_ZN9Krabi2015C1Eb+0xcc8>
   10f52:	f7fd fd0f 	bl	e974 <_ZN8PositionC1Effb>
   10f56:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10f5a:	657b      	str	r3, [r7, #84]
   10f5c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10f60:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10f64:	f8c7 3510 	str.w	r3, [r7, #1296]
   10f68:	f04f 0034 	mov.w	r0, #52	; 0x34
   10f6c:	f7fd fb9c 	bl	e6a8 <_Znwj>
   10f70:	4603      	mov	r3, r0
   10f72:	65bb      	str	r3, [r7, #88]
   10f74:	6dbb      	ldr	r3, [r7, #88]
   10f76:	2b00      	cmp	r3, #0
   10f78:	d017      	beq.n	10faa <_ZN9Krabi2015C1Eb+0x396>
   10f7a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10f7e:	681b      	ldr	r3, [r3, #0]
   10f80:	6b5b      	ldr	r3, [r3, #52]
   10f82:	f507 7208 	add.w	r2, r7, #544	; 0x220
   10f86:	9300      	str	r3, [sp, #0]
   10f88:	f04f 0300 	mov.w	r3, #0	; 0x0
   10f8c:	9301      	str	r3, [sp, #4]
   10f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f92:	9302      	str	r3, [sp, #8]
   10f94:	f04f 0300 	mov.w	r3, #0	; 0x0
   10f98:	9303      	str	r3, [sp, #12]
   10f9a:	6db8      	ldr	r0, [r7, #88]
   10f9c:	ca06      	ldmia	r2!, {r1, r2}
   10f9e:	6d7b      	ldr	r3, [r7, #84]
   10fa0:	f7ff fb86 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10fa4:	6dbb      	ldr	r3, [r7, #88]
   10fa6:	65fb      	str	r3, [r7, #92]
   10fa8:	e001      	b.n	10fae <_ZN9Krabi2015C1Eb+0x39a>
   10faa:	6dbb      	ldr	r3, [r7, #88]
   10fac:	65fb      	str	r3, [r7, #92]
   10fae:	6dfb      	ldr	r3, [r7, #92]
   10fb0:	f8c7 3520 	str.w	r3, [r7, #1312]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10fb4:	f507 720a 	add.w	r2, r7, #552	; 0x228
   10fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   10fbc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   10fc0:	781b      	ldrb	r3, [r3, #0]
   10fc2:	4610      	mov	r0, r2
   10fc4:	f8df 1918 	ldr.w	r1, [pc, #2328]	; 118e0 <_ZN9Krabi2015C1Eb+0xccc>
   10fc8:	f8df 2910 	ldr.w	r2, [pc, #2320]	; 118dc <_ZN9Krabi2015C1Eb+0xcc8>
   10fcc:	f7fd fcd2 	bl	e974 <_ZN8PositionC1Effb>
   10fd0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10fd4:	663b      	str	r3, [r7, #96]
   10fd6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   10fda:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10fde:	f8c7 3510 	str.w	r3, [r7, #1296]
   10fe2:	f04f 0034 	mov.w	r0, #52	; 0x34
   10fe6:	f7fd fb5f 	bl	e6a8 <_Znwj>
   10fea:	4603      	mov	r3, r0
   10fec:	667b      	str	r3, [r7, #100]
   10fee:	6e7b      	ldr	r3, [r7, #100]
   10ff0:	2b00      	cmp	r3, #0
   10ff2:	d017      	beq.n	11024 <_ZN9Krabi2015C1Eb+0x410>
   10ff4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   10ff8:	681b      	ldr	r3, [r3, #0]
   10ffa:	6b5b      	ldr	r3, [r3, #52]
   10ffc:	f507 720a 	add.w	r2, r7, #552	; 0x228
   11000:	9300      	str	r3, [sp, #0]
   11002:	f04f 0311 	mov.w	r3, #17	; 0x11
   11006:	9301      	str	r3, [sp, #4]
   11008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1100c:	9302      	str	r3, [sp, #8]
   1100e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11012:	9303      	str	r3, [sp, #12]
   11014:	6e78      	ldr	r0, [r7, #100]
   11016:	ca06      	ldmia	r2!, {r1, r2}
   11018:	6e3b      	ldr	r3, [r7, #96]
   1101a:	f7ff fb49 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1101e:	6e7b      	ldr	r3, [r7, #100]
   11020:	66bb      	str	r3, [r7, #104]
   11022:	e001      	b.n	11028 <_ZN9Krabi2015C1Eb+0x414>
   11024:	6e7b      	ldr	r3, [r7, #100]
   11026:	66bb      	str	r3, [r7, #104]
   11028:	6ebb      	ldr	r3, [r7, #104]
   1102a:	f8c7 3524 	str.w	r3, [r7, #1316]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1102e:	f507 720c 	add.w	r2, r7, #560	; 0x230
   11032:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11036:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1103a:	781b      	ldrb	r3, [r3, #0]
   1103c:	4610      	mov	r0, r2
   1103e:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 118e4 <_ZN9Krabi2015C1Eb+0xcd0>
   11042:	f8df 2898 	ldr.w	r2, [pc, #2200]	; 118dc <_ZN9Krabi2015C1Eb+0xcc8>
   11046:	f7fd fc95 	bl	e974 <_ZN8PositionC1Effb>
   1104a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1104e:	66fb      	str	r3, [r7, #108]
   11050:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11054:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11058:	f8c7 3510 	str.w	r3, [r7, #1296]
   1105c:	f04f 0034 	mov.w	r0, #52	; 0x34
   11060:	f7fd fb22 	bl	e6a8 <_Znwj>
   11064:	4603      	mov	r3, r0
   11066:	673b      	str	r3, [r7, #112]
   11068:	6f3b      	ldr	r3, [r7, #112]
   1106a:	2b00      	cmp	r3, #0
   1106c:	d017      	beq.n	1109e <_ZN9Krabi2015C1Eb+0x48a>
   1106e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11072:	681b      	ldr	r3, [r3, #0]
   11074:	6b5b      	ldr	r3, [r3, #52]
   11076:	f507 720c 	add.w	r2, r7, #560	; 0x230
   1107a:	9300      	str	r3, [sp, #0]
   1107c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11080:	9301      	str	r3, [sp, #4]
   11082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11086:	9302      	str	r3, [sp, #8]
   11088:	f04f 0300 	mov.w	r3, #0	; 0x0
   1108c:	9303      	str	r3, [sp, #12]
   1108e:	6f38      	ldr	r0, [r7, #112]
   11090:	ca06      	ldmia	r2!, {r1, r2}
   11092:	6efb      	ldr	r3, [r7, #108]
   11094:	f7ff fb0c 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11098:	6f3b      	ldr	r3, [r7, #112]
   1109a:	677b      	str	r3, [r7, #116]
   1109c:	e001      	b.n	110a2 <_ZN9Krabi2015C1Eb+0x48e>
   1109e:	6f3b      	ldr	r3, [r7, #112]
   110a0:	677b      	str	r3, [r7, #116]
   110a2:	6f7b      	ldr	r3, [r7, #116]
   110a4:	f8c7 3528 	str.w	r3, [r7, #1320]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   110a8:	f507 720e 	add.w	r2, r7, #568	; 0x238
   110ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
   110b0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   110b4:	781b      	ldrb	r3, [r3, #0]
   110b6:	4610      	mov	r0, r2
   110b8:	f8df 182c 	ldr.w	r1, [pc, #2092]	; 118e8 <_ZN9Krabi2015C1Eb+0xcd4>
   110bc:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 118dc <_ZN9Krabi2015C1Eb+0xcc8>
   110c0:	f7fd fc58 	bl	e974 <_ZN8PositionC1Effb>
   110c4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   110c8:	67bb      	str	r3, [r7, #120]
   110ca:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   110ce:	f103 0301 	add.w	r3, r3, #1	; 0x1
   110d2:	f8c7 3510 	str.w	r3, [r7, #1296]
   110d6:	f04f 0034 	mov.w	r0, #52	; 0x34
   110da:	f7fd fae5 	bl	e6a8 <_Znwj>
   110de:	4603      	mov	r3, r0
   110e0:	67fb      	str	r3, [r7, #124]
   110e2:	6ffb      	ldr	r3, [r7, #124]
   110e4:	2b00      	cmp	r3, #0
   110e6:	d018      	beq.n	1111a <_ZN9Krabi2015C1Eb+0x506>
   110e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   110ec:	681b      	ldr	r3, [r3, #0]
   110ee:	6b5b      	ldr	r3, [r3, #52]
   110f0:	f507 720e 	add.w	r2, r7, #568	; 0x238
   110f4:	9300      	str	r3, [sp, #0]
   110f6:	f04f 0311 	mov.w	r3, #17	; 0x11
   110fa:	9301      	str	r3, [sp, #4]
   110fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11100:	9302      	str	r3, [sp, #8]
   11102:	f04f 0300 	mov.w	r3, #0	; 0x0
   11106:	9303      	str	r3, [sp, #12]
   11108:	6ff8      	ldr	r0, [r7, #124]
   1110a:	ca06      	ldmia	r2!, {r1, r2}
   1110c:	6fbb      	ldr	r3, [r7, #120]
   1110e:	f7ff facf 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11112:	6ffb      	ldr	r3, [r7, #124]
   11114:	f8c7 3080 	str.w	r3, [r7, #128]
   11118:	e002      	b.n	11120 <_ZN9Krabi2015C1Eb+0x50c>
   1111a:	6ffb      	ldr	r3, [r7, #124]
   1111c:	f8c7 3080 	str.w	r3, [r7, #128]
   11120:	f8d7 3080 	ldr.w	r3, [r7, #128]
   11124:	f8c7 352c 	str.w	r3, [r7, #1324]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11128:	f507 7210 	add.w	r2, r7, #576	; 0x240
   1112c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11130:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11134:	781b      	ldrb	r3, [r3, #0]
   11136:	4610      	mov	r0, r2
   11138:	f8df 17b0 	ldr.w	r1, [pc, #1968]	; 118ec <_ZN9Krabi2015C1Eb+0xcd8>
   1113c:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 118dc <_ZN9Krabi2015C1Eb+0xcc8>
   11140:	f7fd fc18 	bl	e974 <_ZN8PositionC1Effb>
   11144:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11148:	f8c7 3084 	str.w	r3, [r7, #132]
   1114c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11150:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11154:	f8c7 3510 	str.w	r3, [r7, #1296]
   11158:	f04f 0034 	mov.w	r0, #52	; 0x34
   1115c:	f7fd faa4 	bl	e6a8 <_Znwj>
   11160:	4603      	mov	r3, r0
   11162:	f8c7 3088 	str.w	r3, [r7, #136]
   11166:	f8d7 3088 	ldr.w	r3, [r7, #136]
   1116a:	2b00      	cmp	r3, #0
   1116c:	d01b      	beq.n	111a6 <_ZN9Krabi2015C1Eb+0x592>
   1116e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11172:	681b      	ldr	r3, [r3, #0]
   11174:	6b5b      	ldr	r3, [r3, #52]
   11176:	f507 7210 	add.w	r2, r7, #576	; 0x240
   1117a:	9300      	str	r3, [sp, #0]
   1117c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11180:	9301      	str	r3, [sp, #4]
   11182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11186:	9302      	str	r3, [sp, #8]
   11188:	f04f 0300 	mov.w	r3, #0	; 0x0
   1118c:	9303      	str	r3, [sp, #12]
   1118e:	f8d7 0088 	ldr.w	r0, [r7, #136]
   11192:	ca06      	ldmia	r2!, {r1, r2}
   11194:	f8d7 3084 	ldr.w	r3, [r7, #132]
   11198:	f7ff fa8a 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1119c:	f8d7 3088 	ldr.w	r3, [r7, #136]
   111a0:	f8c7 308c 	str.w	r3, [r7, #140]
   111a4:	e003      	b.n	111ae <_ZN9Krabi2015C1Eb+0x59a>
   111a6:	f8d7 3088 	ldr.w	r3, [r7, #136]
   111aa:	f8c7 308c 	str.w	r3, [r7, #140]
   111ae:	f8d7 308c 	ldr.w	r3, [r7, #140]
   111b2:	f8c7 3530 	str.w	r3, [r7, #1328]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   111b6:	f507 7212 	add.w	r2, r7, #584	; 0x248
   111ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
   111be:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   111c2:	781b      	ldrb	r3, [r3, #0]
   111c4:	4610      	mov	r0, r2
   111c6:	f8df 1704 	ldr.w	r1, [pc, #1796]	; 118cc <_ZN9Krabi2015C1Eb+0xcb8>
   111ca:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 118f0 <_ZN9Krabi2015C1Eb+0xcdc>
   111ce:	f7fd fbd1 	bl	e974 <_ZN8PositionC1Effb>
   111d2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   111d6:	f8c7 3090 	str.w	r3, [r7, #144]
   111da:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   111de:	f103 0301 	add.w	r3, r3, #1	; 0x1
   111e2:	f8c7 3510 	str.w	r3, [r7, #1296]
   111e6:	f04f 0034 	mov.w	r0, #52	; 0x34
   111ea:	f7fd fa5d 	bl	e6a8 <_Znwj>
   111ee:	4603      	mov	r3, r0
   111f0:	f8c7 3094 	str.w	r3, [r7, #148]
   111f4:	f8d7 3094 	ldr.w	r3, [r7, #148]
   111f8:	2b00      	cmp	r3, #0
   111fa:	d01b      	beq.n	11234 <_ZN9Krabi2015C1Eb+0x620>
   111fc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11200:	681b      	ldr	r3, [r3, #0]
   11202:	6b5b      	ldr	r3, [r3, #52]
   11204:	f507 7212 	add.w	r2, r7, #584	; 0x248
   11208:	9300      	str	r3, [sp, #0]
   1120a:	f04f 0312 	mov.w	r3, #18	; 0x12
   1120e:	9301      	str	r3, [sp, #4]
   11210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11214:	9302      	str	r3, [sp, #8]
   11216:	f04f 0300 	mov.w	r3, #0	; 0x0
   1121a:	9303      	str	r3, [sp, #12]
   1121c:	f8d7 0094 	ldr.w	r0, [r7, #148]
   11220:	ca06      	ldmia	r2!, {r1, r2}
   11222:	f8d7 3090 	ldr.w	r3, [r7, #144]
   11226:	f7ff fa43 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1122a:	f8d7 3094 	ldr.w	r3, [r7, #148]
   1122e:	f8c7 3098 	str.w	r3, [r7, #152]
   11232:	e003      	b.n	1123c <_ZN9Krabi2015C1Eb+0x628>
   11234:	f8d7 3094 	ldr.w	r3, [r7, #148]
   11238:	f8c7 3098 	str.w	r3, [r7, #152]
   1123c:	f8d7 3098 	ldr.w	r3, [r7, #152]
   11240:	f8c7 3534 	str.w	r3, [r7, #1332]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11244:	f507 7214 	add.w	r2, r7, #592	; 0x250
   11248:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1124c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11250:	781b      	ldrb	r3, [r3, #0]
   11252:	4610      	mov	r0, r2
   11254:	f8df 169c 	ldr.w	r1, [pc, #1692]	; 118f4 <_ZN9Krabi2015C1Eb+0xce0>
   11258:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 118f8 <_ZN9Krabi2015C1Eb+0xce4>
   1125c:	f7fd fb8a 	bl	e974 <_ZN8PositionC1Effb>
   11260:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11264:	f8c7 309c 	str.w	r3, [r7, #156]
   11268:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1126c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11270:	f8c7 3510 	str.w	r3, [r7, #1296]
   11274:	f04f 0034 	mov.w	r0, #52	; 0x34
   11278:	f7fd fa16 	bl	e6a8 <_Znwj>
   1127c:	4603      	mov	r3, r0
   1127e:	f8c7 30a0 	str.w	r3, [r7, #160]
   11282:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   11286:	2b00      	cmp	r3, #0
   11288:	d01b      	beq.n	112c2 <_ZN9Krabi2015C1Eb+0x6ae>
   1128a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1128e:	681b      	ldr	r3, [r3, #0]
   11290:	6b5b      	ldr	r3, [r3, #52]
   11292:	f507 7214 	add.w	r2, r7, #592	; 0x250
   11296:	9300      	str	r3, [sp, #0]
   11298:	f04f 0312 	mov.w	r3, #18	; 0x12
   1129c:	9301      	str	r3, [sp, #4]
   1129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   112a2:	9302      	str	r3, [sp, #8]
   112a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   112a8:	9303      	str	r3, [sp, #12]
   112aa:	f8d7 00a0 	ldr.w	r0, [r7, #160]
   112ae:	ca06      	ldmia	r2!, {r1, r2}
   112b0:	f8d7 309c 	ldr.w	r3, [r7, #156]
   112b4:	f7ff f9fc 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   112b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   112bc:	f8c7 30a4 	str.w	r3, [r7, #164]
   112c0:	e003      	b.n	112ca <_ZN9Krabi2015C1Eb+0x6b6>
   112c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   112c6:	f8c7 30a4 	str.w	r3, [r7, #164]
   112ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   112ce:	f8c7 3538 	str.w	r3, [r7, #1336]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   112d2:	f507 7216 	add.w	r2, r7, #600	; 0x258
   112d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   112da:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   112de:	781b      	ldrb	r3, [r3, #0]
   112e0:	4610      	mov	r0, r2
   112e2:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 118fc <_ZN9Krabi2015C1Eb+0xce8>
   112e6:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 11900 <_ZN9Krabi2015C1Eb+0xcec>
   112ea:	f7fd fb43 	bl	e974 <_ZN8PositionC1Effb>
   112ee:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   112f2:	f8c7 30a8 	str.w	r3, [r7, #168]
   112f6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   112fa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   112fe:	f8c7 3510 	str.w	r3, [r7, #1296]
   11302:	f04f 0034 	mov.w	r0, #52	; 0x34
   11306:	f7fd f9cf 	bl	e6a8 <_Znwj>
   1130a:	4603      	mov	r3, r0
   1130c:	f8c7 30ac 	str.w	r3, [r7, #172]
   11310:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   11314:	2b00      	cmp	r3, #0
   11316:	d01b      	beq.n	11350 <_ZN9Krabi2015C1Eb+0x73c>
   11318:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1131c:	681b      	ldr	r3, [r3, #0]
   1131e:	6b5b      	ldr	r3, [r3, #52]
   11320:	f507 7216 	add.w	r2, r7, #600	; 0x258
   11324:	9300      	str	r3, [sp, #0]
   11326:	f04f 0312 	mov.w	r3, #18	; 0x12
   1132a:	9301      	str	r3, [sp, #4]
   1132c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11330:	9302      	str	r3, [sp, #8]
   11332:	f04f 0300 	mov.w	r3, #0	; 0x0
   11336:	9303      	str	r3, [sp, #12]
   11338:	f8d7 00ac 	ldr.w	r0, [r7, #172]
   1133c:	ca06      	ldmia	r2!, {r1, r2}
   1133e:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   11342:	f7ff f9b5 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11346:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   1134a:	f8c7 30b0 	str.w	r3, [r7, #176]
   1134e:	e003      	b.n	11358 <_ZN9Krabi2015C1Eb+0x744>
   11350:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   11354:	f8c7 30b0 	str.w	r3, [r7, #176]
   11358:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   1135c:	f8c7 353c 	str.w	r3, [r7, #1340]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11360:	f507 7218 	add.w	r2, r7, #608	; 0x260
   11364:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11368:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1136c:	781b      	ldrb	r3, [r3, #0]
   1136e:	4610      	mov	r0, r2
   11370:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 11904 <_ZN9Krabi2015C1Eb+0xcf0>
   11374:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 118f8 <_ZN9Krabi2015C1Eb+0xce4>
   11378:	f7fd fafc 	bl	e974 <_ZN8PositionC1Effb>
   1137c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11380:	f8c7 30b4 	str.w	r3, [r7, #180]
   11384:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11388:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1138c:	f8c7 3510 	str.w	r3, [r7, #1296]
   11390:	f04f 0034 	mov.w	r0, #52	; 0x34
   11394:	f7fd f988 	bl	e6a8 <_Znwj>
   11398:	4603      	mov	r3, r0
   1139a:	f8c7 30b8 	str.w	r3, [r7, #184]
   1139e:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   113a2:	2b00      	cmp	r3, #0
   113a4:	d01b      	beq.n	113de <_ZN9Krabi2015C1Eb+0x7ca>
   113a6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	6b5b      	ldr	r3, [r3, #52]
   113ae:	f507 7218 	add.w	r2, r7, #608	; 0x260
   113b2:	9300      	str	r3, [sp, #0]
   113b4:	f04f 0312 	mov.w	r3, #18	; 0x12
   113b8:	9301      	str	r3, [sp, #4]
   113ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   113be:	9302      	str	r3, [sp, #8]
   113c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   113c4:	9303      	str	r3, [sp, #12]
   113c6:	f8d7 00b8 	ldr.w	r0, [r7, #184]
   113ca:	ca06      	ldmia	r2!, {r1, r2}
   113cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   113d0:	f7ff f96e 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   113d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   113d8:	f8c7 30bc 	str.w	r3, [r7, #188]
   113dc:	e003      	b.n	113e6 <_ZN9Krabi2015C1Eb+0x7d2>
   113de:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   113e2:	f8c7 30bc 	str.w	r3, [r7, #188]
   113e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   113ea:	f8c7 3540 	str.w	r3, [r7, #1344]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   113ee:	f507 721a 	add.w	r2, r7, #616	; 0x268
   113f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   113f6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   113fa:	781b      	ldrb	r3, [r3, #0]
   113fc:	4610      	mov	r0, r2
   113fe:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 11908 <_ZN9Krabi2015C1Eb+0xcf4>
   11402:	f8df 24ec 	ldr.w	r2, [pc, #1260]	; 118f0 <_ZN9Krabi2015C1Eb+0xcdc>
   11406:	f7fd fab5 	bl	e974 <_ZN8PositionC1Effb>
   1140a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1140e:	f8c7 30c0 	str.w	r3, [r7, #192]
   11412:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11416:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1141a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1141e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11422:	f7fd f941 	bl	e6a8 <_Znwj>
   11426:	4603      	mov	r3, r0
   11428:	f8c7 30c4 	str.w	r3, [r7, #196]
   1142c:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   11430:	2b00      	cmp	r3, #0
   11432:	d01b      	beq.n	1146c <_ZN9Krabi2015C1Eb+0x858>
   11434:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11438:	681b      	ldr	r3, [r3, #0]
   1143a:	6b5b      	ldr	r3, [r3, #52]
   1143c:	f507 721a 	add.w	r2, r7, #616	; 0x268
   11440:	9300      	str	r3, [sp, #0]
   11442:	f04f 0312 	mov.w	r3, #18	; 0x12
   11446:	9301      	str	r3, [sp, #4]
   11448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1144c:	9302      	str	r3, [sp, #8]
   1144e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11452:	9303      	str	r3, [sp, #12]
   11454:	f8d7 00c4 	ldr.w	r0, [r7, #196]
   11458:	ca06      	ldmia	r2!, {r1, r2}
   1145a:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   1145e:	f7ff f927 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11462:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   11466:	f8c7 30c8 	str.w	r3, [r7, #200]
   1146a:	e003      	b.n	11474 <_ZN9Krabi2015C1Eb+0x860>
   1146c:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   11470:	f8c7 30c8 	str.w	r3, [r7, #200]
   11474:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   11478:	f8c7 3544 	str.w	r3, [r7, #1348]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1147c:	f507 721c 	add.w	r2, r7, #624	; 0x270
   11480:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11484:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11488:	781b      	ldrb	r3, [r3, #0]
   1148a:	4610      	mov	r0, r2
   1148c:	f8df 147c 	ldr.w	r1, [pc, #1148]	; 1190c <_ZN9Krabi2015C1Eb+0xcf8>
   11490:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 118f0 <_ZN9Krabi2015C1Eb+0xcdc>
   11494:	f7fd fa6e 	bl	e974 <_ZN8PositionC1Effb>
   11498:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1149c:	f8c7 30cc 	str.w	r3, [r7, #204]
   114a0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   114a4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   114a8:	f8c7 3510 	str.w	r3, [r7, #1296]
   114ac:	f04f 0034 	mov.w	r0, #52	; 0x34
   114b0:	f7fd f8fa 	bl	e6a8 <_Znwj>
   114b4:	4603      	mov	r3, r0
   114b6:	f8c7 30d0 	str.w	r3, [r7, #208]
   114ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   114be:	2b00      	cmp	r3, #0
   114c0:	d01b      	beq.n	114fa <_ZN9Krabi2015C1Eb+0x8e6>
   114c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   114c6:	681b      	ldr	r3, [r3, #0]
   114c8:	6b5b      	ldr	r3, [r3, #52]
   114ca:	f507 721c 	add.w	r2, r7, #624	; 0x270
   114ce:	9300      	str	r3, [sp, #0]
   114d0:	f04f 0313 	mov.w	r3, #19	; 0x13
   114d4:	9301      	str	r3, [sp, #4]
   114d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114da:	9302      	str	r3, [sp, #8]
   114dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   114e0:	9303      	str	r3, [sp, #12]
   114e2:	f8d7 00d0 	ldr.w	r0, [r7, #208]
   114e6:	ca06      	ldmia	r2!, {r1, r2}
   114e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   114ec:	f7ff f8e0 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   114f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   114f4:	f8c7 30d4 	str.w	r3, [r7, #212]
   114f8:	e003      	b.n	11502 <_ZN9Krabi2015C1Eb+0x8ee>
   114fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   114fe:	f8c7 30d4 	str.w	r3, [r7, #212]
   11502:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   11506:	f8c7 3548 	str.w	r3, [r7, #1352]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1150a:	f507 721e 	add.w	r2, r7, #632	; 0x278
   1150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11512:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11516:	781b      	ldrb	r3, [r3, #0]
   11518:	4610      	mov	r0, r2
   1151a:	49fc      	ldr	r1, [pc, #1008]	(1190c <_ZN9Krabi2015C1Eb+0xcf8>)
   1151c:	4afc      	ldr	r2, [pc, #1008]	(11910 <_ZN9Krabi2015C1Eb+0xcfc>)
   1151e:	f7fd fa29 	bl	e974 <_ZN8PositionC1Effb>
   11522:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11526:	f8c7 30d8 	str.w	r3, [r7, #216]
   1152a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1152e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11532:	f8c7 3510 	str.w	r3, [r7, #1296]
   11536:	f04f 0034 	mov.w	r0, #52	; 0x34
   1153a:	f7fd f8b5 	bl	e6a8 <_Znwj>
   1153e:	4603      	mov	r3, r0
   11540:	f8c7 30dc 	str.w	r3, [r7, #220]
   11544:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11548:	2b00      	cmp	r3, #0
   1154a:	d01b      	beq.n	11584 <_ZN9Krabi2015C1Eb+0x970>
   1154c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11550:	681b      	ldr	r3, [r3, #0]
   11552:	6b5b      	ldr	r3, [r3, #52]
   11554:	f507 721e 	add.w	r2, r7, #632	; 0x278
   11558:	9300      	str	r3, [sp, #0]
   1155a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1155e:	9301      	str	r3, [sp, #4]
   11560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11564:	9302      	str	r3, [sp, #8]
   11566:	f04f 0300 	mov.w	r3, #0	; 0x0
   1156a:	9303      	str	r3, [sp, #12]
   1156c:	f8d7 00dc 	ldr.w	r0, [r7, #220]
   11570:	ca06      	ldmia	r2!, {r1, r2}
   11572:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   11576:	f7ff f89b 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1157a:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   1157e:	f8c7 30e0 	str.w	r3, [r7, #224]
   11582:	e003      	b.n	1158c <_ZN9Krabi2015C1Eb+0x978>
   11584:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11588:	f8c7 30e0 	str.w	r3, [r7, #224]
   1158c:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   11590:	f8c7 354c 	str.w	r3, [r7, #1356]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11594:	f507 7220 	add.w	r2, r7, #640	; 0x280
   11598:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1159c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   115a0:	781b      	ldrb	r3, [r3, #0]
   115a2:	4610      	mov	r0, r2
   115a4:	49d9      	ldr	r1, [pc, #868]	(1190c <_ZN9Krabi2015C1Eb+0xcf8>)
   115a6:	4adb      	ldr	r2, [pc, #876]	(11914 <_ZN9Krabi2015C1Eb+0xd00>)
   115a8:	f7fd f9e4 	bl	e974 <_ZN8PositionC1Effb>
   115ac:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   115b0:	f8c7 30e4 	str.w	r3, [r7, #228]
   115b4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   115b8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   115bc:	f8c7 3510 	str.w	r3, [r7, #1296]
   115c0:	f04f 0034 	mov.w	r0, #52	; 0x34
   115c4:	f7fd f870 	bl	e6a8 <_Znwj>
   115c8:	4603      	mov	r3, r0
   115ca:	f8c7 30e8 	str.w	r3, [r7, #232]
   115ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   115d2:	2b00      	cmp	r3, #0
   115d4:	d01b      	beq.n	1160e <_ZN9Krabi2015C1Eb+0x9fa>
   115d6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   115da:	681b      	ldr	r3, [r3, #0]
   115dc:	6b5b      	ldr	r3, [r3, #52]
   115de:	f507 7220 	add.w	r2, r7, #640	; 0x280
   115e2:	9300      	str	r3, [sp, #0]
   115e4:	f04f 0313 	mov.w	r3, #19	; 0x13
   115e8:	9301      	str	r3, [sp, #4]
   115ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115ee:	9302      	str	r3, [sp, #8]
   115f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   115f4:	9303      	str	r3, [sp, #12]
   115f6:	f8d7 00e8 	ldr.w	r0, [r7, #232]
   115fa:	ca06      	ldmia	r2!, {r1, r2}
   115fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11600:	f7ff f856 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11604:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11608:	f8c7 30ec 	str.w	r3, [r7, #236]
   1160c:	e003      	b.n	11616 <_ZN9Krabi2015C1Eb+0xa02>
   1160e:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11612:	f8c7 30ec 	str.w	r3, [r7, #236]
   11616:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   1161a:	f8c7 3550 	str.w	r3, [r7, #1360]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1161e:	f507 7222 	add.w	r2, r7, #648	; 0x288
   11622:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11626:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1162a:	781b      	ldrb	r3, [r3, #0]
   1162c:	4610      	mov	r0, r2
   1162e:	49ba      	ldr	r1, [pc, #744]	(11918 <_ZN9Krabi2015C1Eb+0xd04>)
   11630:	4aba      	ldr	r2, [pc, #744]	(1191c <_ZN9Krabi2015C1Eb+0xd08>)
   11632:	f7fd f99f 	bl	e974 <_ZN8PositionC1Effb>
   11636:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1163a:	f8c7 30f0 	str.w	r3, [r7, #240]
   1163e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11642:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11646:	f8c7 3510 	str.w	r3, [r7, #1296]
   1164a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1164e:	f7fd f82b 	bl	e6a8 <_Znwj>
   11652:	4603      	mov	r3, r0
   11654:	f8c7 30f4 	str.w	r3, [r7, #244]
   11658:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   1165c:	2b00      	cmp	r3, #0
   1165e:	d01b      	beq.n	11698 <_ZN9Krabi2015C1Eb+0xa84>
   11660:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11664:	681b      	ldr	r3, [r3, #0]
   11666:	6b5b      	ldr	r3, [r3, #52]
   11668:	f507 7222 	add.w	r2, r7, #648	; 0x288
   1166c:	9300      	str	r3, [sp, #0]
   1166e:	f04f 0313 	mov.w	r3, #19	; 0x13
   11672:	9301      	str	r3, [sp, #4]
   11674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11678:	9302      	str	r3, [sp, #8]
   1167a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1167e:	9303      	str	r3, [sp, #12]
   11680:	f8d7 00f4 	ldr.w	r0, [r7, #244]
   11684:	ca06      	ldmia	r2!, {r1, r2}
   11686:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   1168a:	f7ff f811 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1168e:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   11692:	f8c7 30f8 	str.w	r3, [r7, #248]
   11696:	e003      	b.n	116a0 <_ZN9Krabi2015C1Eb+0xa8c>
   11698:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   1169c:	f8c7 30f8 	str.w	r3, [r7, #248]
   116a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   116a4:	f8c7 3554 	str.w	r3, [r7, #1364]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   116a8:	f507 7224 	add.w	r2, r7, #656	; 0x290
   116ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
   116b0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   116b4:	781b      	ldrb	r3, [r3, #0]
   116b6:	4610      	mov	r0, r2
   116b8:	4997      	ldr	r1, [pc, #604]	(11918 <_ZN9Krabi2015C1Eb+0xd04>)
   116ba:	4a96      	ldr	r2, [pc, #600]	(11914 <_ZN9Krabi2015C1Eb+0xd00>)
   116bc:	f7fd f95a 	bl	e974 <_ZN8PositionC1Effb>
   116c0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   116c4:	f8c7 30fc 	str.w	r3, [r7, #252]
   116c8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   116cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   116d0:	f8c7 3510 	str.w	r3, [r7, #1296]
   116d4:	f04f 0034 	mov.w	r0, #52	; 0x34
   116d8:	f7fc ffe6 	bl	e6a8 <_Znwj>
   116dc:	4603      	mov	r3, r0
   116de:	f8c7 3100 	str.w	r3, [r7, #256]
   116e2:	f8d7 3100 	ldr.w	r3, [r7, #256]
   116e6:	2b00      	cmp	r3, #0
   116e8:	d01b      	beq.n	11722 <_ZN9Krabi2015C1Eb+0xb0e>
   116ea:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   116ee:	681b      	ldr	r3, [r3, #0]
   116f0:	6b5b      	ldr	r3, [r3, #52]
   116f2:	f507 7224 	add.w	r2, r7, #656	; 0x290
   116f6:	9300      	str	r3, [sp, #0]
   116f8:	f04f 0313 	mov.w	r3, #19	; 0x13
   116fc:	9301      	str	r3, [sp, #4]
   116fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11702:	9302      	str	r3, [sp, #8]
   11704:	f04f 0300 	mov.w	r3, #0	; 0x0
   11708:	9303      	str	r3, [sp, #12]
   1170a:	f8d7 0100 	ldr.w	r0, [r7, #256]
   1170e:	ca06      	ldmia	r2!, {r1, r2}
   11710:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   11714:	f7fe ffcc 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11718:	f8d7 3100 	ldr.w	r3, [r7, #256]
   1171c:	f8c7 3104 	str.w	r3, [r7, #260]
   11720:	e003      	b.n	1172a <_ZN9Krabi2015C1Eb+0xb16>
   11722:	f8d7 3100 	ldr.w	r3, [r7, #256]
   11726:	f8c7 3104 	str.w	r3, [r7, #260]
   1172a:	f8d7 3104 	ldr.w	r3, [r7, #260]
   1172e:	f8c7 3558 	str.w	r3, [r7, #1368]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11732:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11736:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1173a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1173e:	781b      	ldrb	r3, [r3, #0]
   11740:	4610      	mov	r0, r2
   11742:	4977      	ldr	r1, [pc, #476]	(11920 <_ZN9Krabi2015C1Eb+0xd0c>)
   11744:	4a77      	ldr	r2, [pc, #476]	(11924 <_ZN9Krabi2015C1Eb+0xd10>)
   11746:	f7fd f915 	bl	e974 <_ZN8PositionC1Effb>
   1174a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1174e:	f8c7 3108 	str.w	r3, [r7, #264]
   11752:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11756:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1175a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1175e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11762:	f7fc ffa1 	bl	e6a8 <_Znwj>
   11766:	4603      	mov	r3, r0
   11768:	f8c7 310c 	str.w	r3, [r7, #268]
   1176c:	f8d7 310c 	ldr.w	r3, [r7, #268]
   11770:	2b00      	cmp	r3, #0
   11772:	d01b      	beq.n	117ac <_ZN9Krabi2015C1Eb+0xb98>
   11774:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	6b5b      	ldr	r3, [r3, #52]
   1177c:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11780:	9300      	str	r3, [sp, #0]
   11782:	f04f 0313 	mov.w	r3, #19	; 0x13
   11786:	9301      	str	r3, [sp, #4]
   11788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1178c:	9302      	str	r3, [sp, #8]
   1178e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11792:	9303      	str	r3, [sp, #12]
   11794:	f8d7 010c 	ldr.w	r0, [r7, #268]
   11798:	ca06      	ldmia	r2!, {r1, r2}
   1179a:	f8d7 3108 	ldr.w	r3, [r7, #264]
   1179e:	f7fe ff87 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   117a2:	f8d7 310c 	ldr.w	r3, [r7, #268]
   117a6:	f8c7 3110 	str.w	r3, [r7, #272]
   117aa:	e003      	b.n	117b4 <_ZN9Krabi2015C1Eb+0xba0>
   117ac:	f8d7 310c 	ldr.w	r3, [r7, #268]
   117b0:	f8c7 3110 	str.w	r3, [r7, #272]
   117b4:	f8d7 3110 	ldr.w	r3, [r7, #272]
   117b8:	f8c7 355c 	str.w	r3, [r7, #1372]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   117bc:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   117c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   117c4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   117c8:	781b      	ldrb	r3, [r3, #0]
   117ca:	4610      	mov	r0, r2
   117cc:	4956      	ldr	r1, [pc, #344]	(11928 <_ZN9Krabi2015C1Eb+0xd14>)
   117ce:	4a57      	ldr	r2, [pc, #348]	(1192c <_ZN9Krabi2015C1Eb+0xd18>)
   117d0:	f7fd f8d0 	bl	e974 <_ZN8PositionC1Effb>
   117d4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   117d8:	f8c7 3114 	str.w	r3, [r7, #276]
   117dc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   117e0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   117e4:	f8c7 3510 	str.w	r3, [r7, #1296]
   117e8:	f04f 0034 	mov.w	r0, #52	; 0x34
   117ec:	f7fc ff5c 	bl	e6a8 <_Znwj>
   117f0:	4603      	mov	r3, r0
   117f2:	f8c7 3118 	str.w	r3, [r7, #280]
   117f6:	f8d7 3118 	ldr.w	r3, [r7, #280]
   117fa:	2b00      	cmp	r3, #0
   117fc:	d01b      	beq.n	11836 <_ZN9Krabi2015C1Eb+0xc22>
   117fe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11802:	681b      	ldr	r3, [r3, #0]
   11804:	6b5b      	ldr	r3, [r3, #52]
   11806:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   1180a:	9300      	str	r3, [sp, #0]
   1180c:	f04f 0313 	mov.w	r3, #19	; 0x13
   11810:	9301      	str	r3, [sp, #4]
   11812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11816:	9302      	str	r3, [sp, #8]
   11818:	f04f 0300 	mov.w	r3, #0	; 0x0
   1181c:	9303      	str	r3, [sp, #12]
   1181e:	f8d7 0118 	ldr.w	r0, [r7, #280]
   11822:	ca06      	ldmia	r2!, {r1, r2}
   11824:	f8d7 3114 	ldr.w	r3, [r7, #276]
   11828:	f7fe ff42 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1182c:	f8d7 3118 	ldr.w	r3, [r7, #280]
   11830:	f8c7 311c 	str.w	r3, [r7, #284]
   11834:	e003      	b.n	1183e <_ZN9Krabi2015C1Eb+0xc2a>
   11836:	f8d7 3118 	ldr.w	r3, [r7, #280]
   1183a:	f8c7 311c 	str.w	r3, [r7, #284]
   1183e:	f8d7 311c 	ldr.w	r3, [r7, #284]
   11842:	f8c7 3560 	str.w	r3, [r7, #1376]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11846:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   1184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1184e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11852:	781b      	ldrb	r3, [r3, #0]
   11854:	4610      	mov	r0, r2
   11856:	4936      	ldr	r1, [pc, #216]	(11930 <_ZN9Krabi2015C1Eb+0xd1c>)
   11858:	4a36      	ldr	r2, [pc, #216]	(11934 <_ZN9Krabi2015C1Eb+0xd20>)
   1185a:	f7fd f88b 	bl	e974 <_ZN8PositionC1Effb>
   1185e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11862:	f8c7 3120 	str.w	r3, [r7, #288]
   11866:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1186a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1186e:	f8c7 3510 	str.w	r3, [r7, #1296]
   11872:	f04f 0034 	mov.w	r0, #52	; 0x34
   11876:	f7fc ff17 	bl	e6a8 <_Znwj>
   1187a:	4603      	mov	r3, r0
   1187c:	f8c7 3124 	str.w	r3, [r7, #292]
   11880:	f8d7 3124 	ldr.w	r3, [r7, #292]
   11884:	2b00      	cmp	r3, #0
   11886:	d057      	beq.n	11938 <_ZN9Krabi2015C1Eb+0xd24>
   11888:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1188c:	681b      	ldr	r3, [r3, #0]
   1188e:	6b5b      	ldr	r3, [r3, #52]
   11890:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   11894:	9300      	str	r3, [sp, #0]
   11896:	f04f 0313 	mov.w	r3, #19	; 0x13
   1189a:	9301      	str	r3, [sp, #4]
   1189c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   118a0:	9302      	str	r3, [sp, #8]
   118a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   118a6:	9303      	str	r3, [sp, #12]
   118a8:	f8d7 0124 	ldr.w	r0, [r7, #292]
   118ac:	ca06      	ldmia	r2!, {r1, r2}
   118ae:	f8d7 3120 	ldr.w	r3, [r7, #288]
   118b2:	f7fe fefd 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   118b6:	f8d7 3124 	ldr.w	r3, [r7, #292]
   118ba:	f8c7 3128 	str.w	r3, [r7, #296]
   118be:	e03f      	b.n	11940 <_ZN9Krabi2015C1Eb+0xd2c>
   118c0:	00021fb0 	.word	0x00021fb0
   118c4:	00000000 	.word	0x00000000
   118c8:	41f00000 	.word	0x41f00000
   118cc:	437a0000 	.word	0x437a0000
   118d0:	447a0000 	.word	0x447a0000
   118d4:	442f0000 	.word	0x442f0000
   118d8:	44510000 	.word	0x44510000
   118dc:	44de8000 	.word	0x44de8000
   118e0:	436c0000 	.word	0x436c0000
   118e4:	43c80000 	.word	0x43c80000
   118e8:	451c4000 	.word	0x451c4000
   118ec:	450fc000 	.word	0x450fc000
   118f0:	44dac000 	.word	0x44dac000
   118f4:	44638000 	.word	0x44638000
   118f8:	444f8000 	.word	0x444f8000
   118fc:	44bb8000 	.word	0x44bb8000
   11900:	44ce4000 	.word	0x44ce4000
   11904:	4502a000 	.word	0x4502a000
   11908:	452be000 	.word	0x452be000
   1190c:	42b40000 	.word	0x42b40000
   11910:	44e74000 	.word	0x44e74000
   11914:	43480000 	.word	0x43480000
   11918:	44548000 	.word	0x44548000
   1191c:	42c80000 	.word	0x42c80000
   11920:	44598000 	.word	0x44598000
   11924:	44a96000 	.word	0x44a96000
   11928:	44898000 	.word	0x44898000
   1192c:	44dd4000 	.word	0x44dd4000
   11930:	44a28000 	.word	0x44a28000
   11934:	44af0000 	.word	0x44af0000
   11938:	f8d7 3124 	ldr.w	r3, [r7, #292]
   1193c:	f8c7 3128 	str.w	r3, [r7, #296]
   11940:	f8d7 3128 	ldr.w	r3, [r7, #296]
   11944:	f8c7 3564 	str.w	r3, [r7, #1380]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   11948:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   1194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11950:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11954:	781b      	ldrb	r3, [r3, #0]
   11956:	4610      	mov	r0, r2
   11958:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 122a8 <_ZN9Krabi2015C1Eb+0x1694>
   1195c:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 122ac <_ZN9Krabi2015C1Eb+0x1698>
   11960:	f7fd f808 	bl	e974 <_ZN8PositionC1Effb>
   11964:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11968:	f8c7 312c 	str.w	r3, [r7, #300]
   1196c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11970:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11974:	f8c7 3510 	str.w	r3, [r7, #1296]
   11978:	f04f 0034 	mov.w	r0, #52	; 0x34
   1197c:	f7fc fe94 	bl	e6a8 <_Znwj>
   11980:	4603      	mov	r3, r0
   11982:	f8c7 3130 	str.w	r3, [r7, #304]
   11986:	f8d7 3130 	ldr.w	r3, [r7, #304]
   1198a:	2b00      	cmp	r3, #0
   1198c:	d01b      	beq.n	119c6 <_ZN9Krabi2015C1Eb+0xdb2>
   1198e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11992:	681b      	ldr	r3, [r3, #0]
   11994:	6b5b      	ldr	r3, [r3, #52]
   11996:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   1199a:	9300      	str	r3, [sp, #0]
   1199c:	f04f 0314 	mov.w	r3, #20	; 0x14
   119a0:	9301      	str	r3, [sp, #4]
   119a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119a6:	9302      	str	r3, [sp, #8]
   119a8:	f04f 0300 	mov.w	r3, #0	; 0x0
   119ac:	9303      	str	r3, [sp, #12]
   119ae:	f8d7 0130 	ldr.w	r0, [r7, #304]
   119b2:	ca06      	ldmia	r2!, {r1, r2}
   119b4:	f8d7 312c 	ldr.w	r3, [r7, #300]
   119b8:	f7fe fe7a 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   119bc:	f8d7 3130 	ldr.w	r3, [r7, #304]
   119c0:	f8c7 3134 	str.w	r3, [r7, #308]
   119c4:	e003      	b.n	119ce <_ZN9Krabi2015C1Eb+0xdba>
   119c6:	f8d7 3130 	ldr.w	r3, [r7, #304]
   119ca:	f8c7 3134 	str.w	r3, [r7, #308]
   119ce:	f8d7 3134 	ldr.w	r3, [r7, #308]
   119d2:	f8c7 3568 	str.w	r3, [r7, #1384]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   119d6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   119da:	f507 7300 	add.w	r3, r7, #512	; 0x200
   119de:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   119e2:	781b      	ldrb	r3, [r3, #0]
   119e4:	4610      	mov	r0, r2
   119e6:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 122b0 <_ZN9Krabi2015C1Eb+0x169c>
   119ea:	f8df 28c0 	ldr.w	r2, [pc, #2240]	; 122ac <_ZN9Krabi2015C1Eb+0x1698>
   119ee:	f7fc ffc1 	bl	e974 <_ZN8PositionC1Effb>
   119f2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   119f6:	f8c7 3138 	str.w	r3, [r7, #312]
   119fa:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   119fe:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11a02:	f8c7 3510 	str.w	r3, [r7, #1296]
   11a06:	f04f 0034 	mov.w	r0, #52	; 0x34
   11a0a:	f7fc fe4d 	bl	e6a8 <_Znwj>
   11a0e:	4603      	mov	r3, r0
   11a10:	f8c7 313c 	str.w	r3, [r7, #316]
   11a14:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11a18:	2b00      	cmp	r3, #0
   11a1a:	d01b      	beq.n	11a54 <_ZN9Krabi2015C1Eb+0xe40>
   11a1c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11a20:	681b      	ldr	r3, [r3, #0]
   11a22:	6b5b      	ldr	r3, [r3, #52]
   11a24:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   11a28:	9300      	str	r3, [sp, #0]
   11a2a:	f04f 0314 	mov.w	r3, #20	; 0x14
   11a2e:	9301      	str	r3, [sp, #4]
   11a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a34:	9302      	str	r3, [sp, #8]
   11a36:	f04f 0300 	mov.w	r3, #0	; 0x0
   11a3a:	9303      	str	r3, [sp, #12]
   11a3c:	f8d7 013c 	ldr.w	r0, [r7, #316]
   11a40:	ca06      	ldmia	r2!, {r1, r2}
   11a42:	f8d7 3138 	ldr.w	r3, [r7, #312]
   11a46:	f7fe fe33 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11a4a:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11a4e:	f8c7 3140 	str.w	r3, [r7, #320]
   11a52:	e003      	b.n	11a5c <_ZN9Krabi2015C1Eb+0xe48>
   11a54:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11a58:	f8c7 3140 	str.w	r3, [r7, #320]
   11a5c:	f8d7 3140 	ldr.w	r3, [r7, #320]
   11a60:	f8c7 356c 	str.w	r3, [r7, #1388]
    Etape* etape23 = new Etape(Position(1230, 760, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   11a64:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   11a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11a6c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11a70:	781b      	ldrb	r3, [r3, #0]
   11a72:	4610      	mov	r0, r2
   11a74:	f8df 183c 	ldr.w	r1, [pc, #2108]	; 122b4 <_ZN9Krabi2015C1Eb+0x16a0>
   11a78:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 122b8 <_ZN9Krabi2015C1Eb+0x16a4>
   11a7c:	f7fc ff7a 	bl	e974 <_ZN8PositionC1Effb>
   11a80:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a84:	f8c7 3144 	str.w	r3, [r7, #324]
   11a88:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a8c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11a90:	f8c7 3510 	str.w	r3, [r7, #1296]
   11a94:	f04f 0034 	mov.w	r0, #52	; 0x34
   11a98:	f7fc fe06 	bl	e6a8 <_Znwj>
   11a9c:	4603      	mov	r3, r0
   11a9e:	f8c7 3148 	str.w	r3, [r7, #328]
   11aa2:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11aa6:	2b00      	cmp	r3, #0
   11aa8:	d01b      	beq.n	11ae2 <_ZN9Krabi2015C1Eb+0xece>
   11aaa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	6b5b      	ldr	r3, [r3, #52]
   11ab2:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   11ab6:	9300      	str	r3, [sp, #0]
   11ab8:	f04f 0315 	mov.w	r3, #21	; 0x15
   11abc:	9301      	str	r3, [sp, #4]
   11abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ac2:	9302      	str	r3, [sp, #8]
   11ac4:	f04f 0300 	mov.w	r3, #0	; 0x0
   11ac8:	9303      	str	r3, [sp, #12]
   11aca:	f8d7 0148 	ldr.w	r0, [r7, #328]
   11ace:	ca06      	ldmia	r2!, {r1, r2}
   11ad0:	f8d7 3144 	ldr.w	r3, [r7, #324]
   11ad4:	f7fe fdec 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11ad8:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11adc:	f8c7 314c 	str.w	r3, [r7, #332]
   11ae0:	e003      	b.n	11aea <_ZN9Krabi2015C1Eb+0xed6>
   11ae2:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11ae6:	f8c7 314c 	str.w	r3, [r7, #332]
   11aea:	f8d7 314c 	ldr.w	r3, [r7, #332]
   11aee:	f8c7 3570 	str.w	r3, [r7, #1392]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11af2:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   11af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11afa:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11afe:	781b      	ldrb	r3, [r3, #0]
   11b00:	4610      	mov	r0, r2
   11b02:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 122bc <_ZN9Krabi2015C1Eb+0x16a8>
   11b06:	f8df 27b8 	ldr.w	r2, [pc, #1976]	; 122c0 <_ZN9Krabi2015C1Eb+0x16ac>
   11b0a:	f7fc ff33 	bl	e974 <_ZN8PositionC1Effb>
   11b0e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b12:	f8c7 3150 	str.w	r3, [r7, #336]
   11b16:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b1a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11b1e:	f8c7 3510 	str.w	r3, [r7, #1296]
   11b22:	f04f 0034 	mov.w	r0, #52	; 0x34
   11b26:	f7fc fdbf 	bl	e6a8 <_Znwj>
   11b2a:	4603      	mov	r3, r0
   11b2c:	f8c7 3154 	str.w	r3, [r7, #340]
   11b30:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11b34:	2b00      	cmp	r3, #0
   11b36:	d01b      	beq.n	11b70 <_ZN9Krabi2015C1Eb+0xf5c>
   11b38:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11b3c:	681b      	ldr	r3, [r3, #0]
   11b3e:	6b5b      	ldr	r3, [r3, #52]
   11b40:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   11b44:	9300      	str	r3, [sp, #0]
   11b46:	f04f 0300 	mov.w	r3, #0	; 0x0
   11b4a:	9301      	str	r3, [sp, #4]
   11b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b50:	9302      	str	r3, [sp, #8]
   11b52:	f04f 0300 	mov.w	r3, #0	; 0x0
   11b56:	9303      	str	r3, [sp, #12]
   11b58:	f8d7 0154 	ldr.w	r0, [r7, #340]
   11b5c:	ca06      	ldmia	r2!, {r1, r2}
   11b5e:	f8d7 3150 	ldr.w	r3, [r7, #336]
   11b62:	f7fe fda5 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11b66:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11b6a:	f8c7 3158 	str.w	r3, [r7, #344]
   11b6e:	e003      	b.n	11b78 <_ZN9Krabi2015C1Eb+0xf64>
   11b70:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11b74:	f8c7 3158 	str.w	r3, [r7, #344]
   11b78:	f8d7 3158 	ldr.w	r3, [r7, #344]
   11b7c:	f8c7 3574 	str.w	r3, [r7, #1396]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11b80:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   11b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11b88:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11b8c:	781b      	ldrb	r3, [r3, #0]
   11b8e:	4610      	mov	r0, r2
   11b90:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 122c4 <_ZN9Krabi2015C1Eb+0x16b0>
   11b94:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 122c0 <_ZN9Krabi2015C1Eb+0x16ac>
   11b98:	f7fc feec 	bl	e974 <_ZN8PositionC1Effb>
   11b9c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ba0:	f8c7 315c 	str.w	r3, [r7, #348]
   11ba4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ba8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11bac:	f8c7 3510 	str.w	r3, [r7, #1296]
   11bb0:	f04f 0034 	mov.w	r0, #52	; 0x34
   11bb4:	f7fc fd78 	bl	e6a8 <_Znwj>
   11bb8:	4603      	mov	r3, r0
   11bba:	f8c7 3160 	str.w	r3, [r7, #352]
   11bbe:	f8d7 3160 	ldr.w	r3, [r7, #352]
   11bc2:	2b00      	cmp	r3, #0
   11bc4:	d01b      	beq.n	11bfe <_ZN9Krabi2015C1Eb+0xfea>
   11bc6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11bca:	681b      	ldr	r3, [r3, #0]
   11bcc:	6b5b      	ldr	r3, [r3, #52]
   11bce:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   11bd2:	9300      	str	r3, [sp, #0]
   11bd4:	f04f 0300 	mov.w	r3, #0	; 0x0
   11bd8:	9301      	str	r3, [sp, #4]
   11bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11bde:	9302      	str	r3, [sp, #8]
   11be0:	f04f 0300 	mov.w	r3, #0	; 0x0
   11be4:	9303      	str	r3, [sp, #12]
   11be6:	f8d7 0160 	ldr.w	r0, [r7, #352]
   11bea:	ca06      	ldmia	r2!, {r1, r2}
   11bec:	f8d7 315c 	ldr.w	r3, [r7, #348]
   11bf0:	f7fe fd5e 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11bf4:	f8d7 3160 	ldr.w	r3, [r7, #352]
   11bf8:	f8c7 3164 	str.w	r3, [r7, #356]
   11bfc:	e003      	b.n	11c06 <_ZN9Krabi2015C1Eb+0xff2>
   11bfe:	f8d7 3160 	ldr.w	r3, [r7, #352]
   11c02:	f8c7 3164 	str.w	r3, [r7, #356]
   11c06:	f8d7 3164 	ldr.w	r3, [r7, #356]
   11c0a:	f8c7 3578 	str.w	r3, [r7, #1400]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11c0e:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   11c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11c16:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11c1a:	781b      	ldrb	r3, [r3, #0]
   11c1c:	4610      	mov	r0, r2
   11c1e:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 122c8 <_ZN9Krabi2015C1Eb+0x16b4>
   11c22:	f8df 26a8 	ldr.w	r2, [pc, #1704]	; 122cc <_ZN9Krabi2015C1Eb+0x16b8>
   11c26:	f7fc fea5 	bl	e974 <_ZN8PositionC1Effb>
   11c2a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11c2e:	f8c7 3168 	str.w	r3, [r7, #360]
   11c32:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11c36:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11c3a:	f8c7 3510 	str.w	r3, [r7, #1296]
   11c3e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11c42:	f7fc fd31 	bl	e6a8 <_Znwj>
   11c46:	4603      	mov	r3, r0
   11c48:	f8c7 316c 	str.w	r3, [r7, #364]
   11c4c:	f8d7 316c 	ldr.w	r3, [r7, #364]
   11c50:	2b00      	cmp	r3, #0
   11c52:	d01b      	beq.n	11c8c <_ZN9Krabi2015C1Eb+0x1078>
   11c54:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11c58:	681b      	ldr	r3, [r3, #0]
   11c5a:	6b5b      	ldr	r3, [r3, #52]
   11c5c:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   11c60:	9300      	str	r3, [sp, #0]
   11c62:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c66:	9301      	str	r3, [sp, #4]
   11c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c6c:	9302      	str	r3, [sp, #8]
   11c6e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c72:	9303      	str	r3, [sp, #12]
   11c74:	f8d7 016c 	ldr.w	r0, [r7, #364]
   11c78:	ca06      	ldmia	r2!, {r1, r2}
   11c7a:	f8d7 3168 	ldr.w	r3, [r7, #360]
   11c7e:	f7fe fd17 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11c82:	f8d7 316c 	ldr.w	r3, [r7, #364]
   11c86:	f8c7 3170 	str.w	r3, [r7, #368]
   11c8a:	e003      	b.n	11c94 <_ZN9Krabi2015C1Eb+0x1080>
   11c8c:	f8d7 316c 	ldr.w	r3, [r7, #364]
   11c90:	f8c7 3170 	str.w	r3, [r7, #368]
   11c94:	f8d7 3170 	ldr.w	r3, [r7, #368]
   11c98:	f8c7 357c 	str.w	r3, [r7, #1404]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11c9c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   11ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11ca4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11ca8:	781b      	ldrb	r3, [r3, #0]
   11caa:	4610      	mov	r0, r2
   11cac:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 122d0 <_ZN9Krabi2015C1Eb+0x16bc>
   11cb0:	f8df 2620 	ldr.w	r2, [pc, #1568]	; 122d4 <_ZN9Krabi2015C1Eb+0x16c0>
   11cb4:	f7fc fe5e 	bl	e974 <_ZN8PositionC1Effb>
   11cb8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11cbc:	f8c7 3174 	str.w	r3, [r7, #372]
   11cc0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11cc4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11cc8:	f8c7 3510 	str.w	r3, [r7, #1296]
   11ccc:	f04f 0034 	mov.w	r0, #52	; 0x34
   11cd0:	f7fc fcea 	bl	e6a8 <_Znwj>
   11cd4:	4603      	mov	r3, r0
   11cd6:	f8c7 3178 	str.w	r3, [r7, #376]
   11cda:	f8d7 3178 	ldr.w	r3, [r7, #376]
   11cde:	2b00      	cmp	r3, #0
   11ce0:	d01b      	beq.n	11d1a <_ZN9Krabi2015C1Eb+0x1106>
   11ce2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11ce6:	681b      	ldr	r3, [r3, #0]
   11ce8:	6b5b      	ldr	r3, [r3, #52]
   11cea:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   11cee:	9300      	str	r3, [sp, #0]
   11cf0:	f04f 0300 	mov.w	r3, #0	; 0x0
   11cf4:	9301      	str	r3, [sp, #4]
   11cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11cfa:	9302      	str	r3, [sp, #8]
   11cfc:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d00:	9303      	str	r3, [sp, #12]
   11d02:	f8d7 0178 	ldr.w	r0, [r7, #376]
   11d06:	ca06      	ldmia	r2!, {r1, r2}
   11d08:	f8d7 3174 	ldr.w	r3, [r7, #372]
   11d0c:	f7fe fcd0 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11d10:	f8d7 3178 	ldr.w	r3, [r7, #376]
   11d14:	f8c7 317c 	str.w	r3, [r7, #380]
   11d18:	e003      	b.n	11d22 <_ZN9Krabi2015C1Eb+0x110e>
   11d1a:	f8d7 3178 	ldr.w	r3, [r7, #376]
   11d1e:	f8c7 317c 	str.w	r3, [r7, #380]
   11d22:	f8d7 317c 	ldr.w	r3, [r7, #380]
   11d26:	f8c7 3580 	str.w	r3, [r7, #1408]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11d2a:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   11d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11d32:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11d36:	781b      	ldrb	r3, [r3, #0]
   11d38:	4610      	mov	r0, r2
   11d3a:	f8df 159c 	ldr.w	r1, [pc, #1436]	; 122d8 <_ZN9Krabi2015C1Eb+0x16c4>
   11d3e:	f8df 259c 	ldr.w	r2, [pc, #1436]	; 122dc <_ZN9Krabi2015C1Eb+0x16c8>
   11d42:	f7fc fe17 	bl	e974 <_ZN8PositionC1Effb>
   11d46:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11d4a:	f8c7 3180 	str.w	r3, [r7, #384]
   11d4e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11d52:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11d56:	f8c7 3510 	str.w	r3, [r7, #1296]
   11d5a:	f04f 0034 	mov.w	r0, #52	; 0x34
   11d5e:	f7fc fca3 	bl	e6a8 <_Znwj>
   11d62:	4603      	mov	r3, r0
   11d64:	f8c7 3184 	str.w	r3, [r7, #388]
   11d68:	f8d7 3184 	ldr.w	r3, [r7, #388]
   11d6c:	2b00      	cmp	r3, #0
   11d6e:	d01b      	beq.n	11da8 <_ZN9Krabi2015C1Eb+0x1194>
   11d70:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11d74:	681b      	ldr	r3, [r3, #0]
   11d76:	6b5b      	ldr	r3, [r3, #52]
   11d78:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   11d7c:	9300      	str	r3, [sp, #0]
   11d7e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d82:	9301      	str	r3, [sp, #4]
   11d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d88:	9302      	str	r3, [sp, #8]
   11d8a:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d8e:	9303      	str	r3, [sp, #12]
   11d90:	f8d7 0184 	ldr.w	r0, [r7, #388]
   11d94:	ca06      	ldmia	r2!, {r1, r2}
   11d96:	f8d7 3180 	ldr.w	r3, [r7, #384]
   11d9a:	f7fe fc89 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11d9e:	f8d7 3184 	ldr.w	r3, [r7, #388]
   11da2:	f8c7 3188 	str.w	r3, [r7, #392]
   11da6:	e003      	b.n	11db0 <_ZN9Krabi2015C1Eb+0x119c>
   11da8:	f8d7 3184 	ldr.w	r3, [r7, #388]
   11dac:	f8c7 3188 	str.w	r3, [r7, #392]
   11db0:	f8d7 3188 	ldr.w	r3, [r7, #392]
   11db4:	f8c7 3584 	str.w	r3, [r7, #1412]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11db8:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   11dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11dc0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11dc4:	781b      	ldrb	r3, [r3, #0]
   11dc6:	4610      	mov	r0, r2
   11dc8:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 122e0 <_ZN9Krabi2015C1Eb+0x16cc>
   11dcc:	f8df 2514 	ldr.w	r2, [pc, #1300]	; 122e4 <_ZN9Krabi2015C1Eb+0x16d0>
   11dd0:	f7fc fdd0 	bl	e974 <_ZN8PositionC1Effb>
   11dd4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11dd8:	f8c7 318c 	str.w	r3, [r7, #396]
   11ddc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11de0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11de4:	f8c7 3510 	str.w	r3, [r7, #1296]
   11de8:	f04f 0034 	mov.w	r0, #52	; 0x34
   11dec:	f7fc fc5c 	bl	e6a8 <_Znwj>
   11df0:	4603      	mov	r3, r0
   11df2:	f8c7 3190 	str.w	r3, [r7, #400]
   11df6:	f8d7 3190 	ldr.w	r3, [r7, #400]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	d01b      	beq.n	11e36 <_ZN9Krabi2015C1Eb+0x1222>
   11dfe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11e02:	681b      	ldr	r3, [r3, #0]
   11e04:	6b5b      	ldr	r3, [r3, #52]
   11e06:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   11e0a:	9300      	str	r3, [sp, #0]
   11e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e10:	9301      	str	r3, [sp, #4]
   11e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e16:	9302      	str	r3, [sp, #8]
   11e18:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e1c:	9303      	str	r3, [sp, #12]
   11e1e:	f8d7 0190 	ldr.w	r0, [r7, #400]
   11e22:	ca06      	ldmia	r2!, {r1, r2}
   11e24:	f8d7 318c 	ldr.w	r3, [r7, #396]
   11e28:	f7fe fc42 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11e2c:	f8d7 3190 	ldr.w	r3, [r7, #400]
   11e30:	f8c7 3194 	str.w	r3, [r7, #404]
   11e34:	e003      	b.n	11e3e <_ZN9Krabi2015C1Eb+0x122a>
   11e36:	f8d7 3190 	ldr.w	r3, [r7, #400]
   11e3a:	f8c7 3194 	str.w	r3, [r7, #404]
   11e3e:	f8d7 3194 	ldr.w	r3, [r7, #404]
   11e42:	f8c7 3588 	str.w	r3, [r7, #1416]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11e46:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   11e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11e4e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11e52:	781b      	ldrb	r3, [r3, #0]
   11e54:	4610      	mov	r0, r2
   11e56:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 122e8 <_ZN9Krabi2015C1Eb+0x16d4>
   11e5a:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 122e4 <_ZN9Krabi2015C1Eb+0x16d0>
   11e5e:	f7fc fd89 	bl	e974 <_ZN8PositionC1Effb>
   11e62:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11e66:	f8c7 3198 	str.w	r3, [r7, #408]
   11e6a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11e6e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11e72:	f8c7 3510 	str.w	r3, [r7, #1296]
   11e76:	f04f 0034 	mov.w	r0, #52	; 0x34
   11e7a:	f7fc fc15 	bl	e6a8 <_Znwj>
   11e7e:	4603      	mov	r3, r0
   11e80:	f8c7 319c 	str.w	r3, [r7, #412]
   11e84:	f8d7 319c 	ldr.w	r3, [r7, #412]
   11e88:	2b00      	cmp	r3, #0
   11e8a:	d01b      	beq.n	11ec4 <_ZN9Krabi2015C1Eb+0x12b0>
   11e8c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11e90:	681b      	ldr	r3, [r3, #0]
   11e92:	6b5b      	ldr	r3, [r3, #52]
   11e94:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   11e98:	9300      	str	r3, [sp, #0]
   11e9a:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e9e:	9301      	str	r3, [sp, #4]
   11ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ea4:	9302      	str	r3, [sp, #8]
   11ea6:	f04f 0300 	mov.w	r3, #0	; 0x0
   11eaa:	9303      	str	r3, [sp, #12]
   11eac:	f8d7 019c 	ldr.w	r0, [r7, #412]
   11eb0:	ca06      	ldmia	r2!, {r1, r2}
   11eb2:	f8d7 3198 	ldr.w	r3, [r7, #408]
   11eb6:	f7fe fbfb 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11eba:	f8d7 319c 	ldr.w	r3, [r7, #412]
   11ebe:	f8c7 31a0 	str.w	r3, [r7, #416]
   11ec2:	e003      	b.n	11ecc <_ZN9Krabi2015C1Eb+0x12b8>
   11ec4:	f8d7 319c 	ldr.w	r3, [r7, #412]
   11ec8:	f8c7 31a0 	str.w	r3, [r7, #416]
   11ecc:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   11ed0:	f8c7 358c 	str.w	r3, [r7, #1420]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11ed4:	f507 7240 	add.w	r2, r7, #768	; 0x300
   11ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11edc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11ee0:	781b      	ldrb	r3, [r3, #0]
   11ee2:	4610      	mov	r0, r2
   11ee4:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 122ec <_ZN9Krabi2015C1Eb+0x16d8>
   11ee8:	4af5      	ldr	r2, [pc, #980]	(122c0 <_ZN9Krabi2015C1Eb+0x16ac>)
   11eea:	f7fc fd43 	bl	e974 <_ZN8PositionC1Effb>
   11eee:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ef2:	f8c7 31a4 	str.w	r3, [r7, #420]
   11ef6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11efa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11efe:	f8c7 3510 	str.w	r3, [r7, #1296]
   11f02:	f04f 0034 	mov.w	r0, #52	; 0x34
   11f06:	f7fc fbcf 	bl	e6a8 <_Znwj>
   11f0a:	4603      	mov	r3, r0
   11f0c:	f8c7 31a8 	str.w	r3, [r7, #424]
   11f10:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   11f14:	2b00      	cmp	r3, #0
   11f16:	d01b      	beq.n	11f50 <_ZN9Krabi2015C1Eb+0x133c>
   11f18:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11f1c:	681b      	ldr	r3, [r3, #0]
   11f1e:	6b5b      	ldr	r3, [r3, #52]
   11f20:	f507 7240 	add.w	r2, r7, #768	; 0x300
   11f24:	9300      	str	r3, [sp, #0]
   11f26:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f2a:	9301      	str	r3, [sp, #4]
   11f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f30:	9302      	str	r3, [sp, #8]
   11f32:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f36:	9303      	str	r3, [sp, #12]
   11f38:	f8d7 01a8 	ldr.w	r0, [r7, #424]
   11f3c:	ca06      	ldmia	r2!, {r1, r2}
   11f3e:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   11f42:	f7fe fbb5 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11f46:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   11f4a:	f8c7 31ac 	str.w	r3, [r7, #428]
   11f4e:	e003      	b.n	11f58 <_ZN9Krabi2015C1Eb+0x1344>
   11f50:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   11f54:	f8c7 31ac 	str.w	r3, [r7, #428]
   11f58:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   11f5c:	f8c7 3590 	str.w	r3, [r7, #1424]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11f60:	f507 7242 	add.w	r2, r7, #776	; 0x308
   11f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11f68:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11f6c:	781b      	ldrb	r3, [r3, #0]
   11f6e:	4610      	mov	r0, r2
   11f70:	49df      	ldr	r1, [pc, #892]	(122f0 <_ZN9Krabi2015C1Eb+0x16dc>)
   11f72:	4ae0      	ldr	r2, [pc, #896]	(122f4 <_ZN9Krabi2015C1Eb+0x16e0>)
   11f74:	f7fc fcfe 	bl	e974 <_ZN8PositionC1Effb>
   11f78:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11f7c:	f8c7 31b0 	str.w	r3, [r7, #432]
   11f80:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11f84:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f88:	f8c7 3510 	str.w	r3, [r7, #1296]
   11f8c:	f04f 0034 	mov.w	r0, #52	; 0x34
   11f90:	f7fc fb8a 	bl	e6a8 <_Znwj>
   11f94:	4603      	mov	r3, r0
   11f96:	f8c7 31b4 	str.w	r3, [r7, #436]
   11f9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d01b      	beq.n	11fda <_ZN9Krabi2015C1Eb+0x13c6>
   11fa2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11fa6:	681b      	ldr	r3, [r3, #0]
   11fa8:	6b5b      	ldr	r3, [r3, #52]
   11faa:	f507 7242 	add.w	r2, r7, #776	; 0x308
   11fae:	9300      	str	r3, [sp, #0]
   11fb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   11fb4:	9301      	str	r3, [sp, #4]
   11fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fba:	9302      	str	r3, [sp, #8]
   11fbc:	f04f 0300 	mov.w	r3, #0	; 0x0
   11fc0:	9303      	str	r3, [sp, #12]
   11fc2:	f8d7 01b4 	ldr.w	r0, [r7, #436]
   11fc6:	ca06      	ldmia	r2!, {r1, r2}
   11fc8:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   11fcc:	f7fe fb70 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11fd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   11fd4:	f8c7 31b8 	str.w	r3, [r7, #440]
   11fd8:	e003      	b.n	11fe2 <_ZN9Krabi2015C1Eb+0x13ce>
   11fda:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   11fde:	f8c7 31b8 	str.w	r3, [r7, #440]
   11fe2:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   11fe6:	f8c7 3594 	str.w	r3, [r7, #1428]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11fea:	f507 7244 	add.w	r2, r7, #784	; 0x310
   11fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11ff2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11ff6:	781b      	ldrb	r3, [r3, #0]
   11ff8:	4610      	mov	r0, r2
   11ffa:	49bf      	ldr	r1, [pc, #764]	(122f8 <_ZN9Krabi2015C1Eb+0x16e4>)
   11ffc:	4abf      	ldr	r2, [pc, #764]	(122fc <_ZN9Krabi2015C1Eb+0x16e8>)
   11ffe:	f7fc fcb9 	bl	e974 <_ZN8PositionC1Effb>
   12002:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12006:	f8c7 31bc 	str.w	r3, [r7, #444]
   1200a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1200e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12012:	f8c7 3510 	str.w	r3, [r7, #1296]
   12016:	f04f 0034 	mov.w	r0, #52	; 0x34
   1201a:	f7fc fb45 	bl	e6a8 <_Znwj>
   1201e:	4603      	mov	r3, r0
   12020:	f8c7 31c0 	str.w	r3, [r7, #448]
   12024:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   12028:	2b00      	cmp	r3, #0
   1202a:	d01b      	beq.n	12064 <_ZN9Krabi2015C1Eb+0x1450>
   1202c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12030:	681b      	ldr	r3, [r3, #0]
   12032:	6b5b      	ldr	r3, [r3, #52]
   12034:	f507 7244 	add.w	r2, r7, #784	; 0x310
   12038:	9300      	str	r3, [sp, #0]
   1203a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1203e:	9301      	str	r3, [sp, #4]
   12040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12044:	9302      	str	r3, [sp, #8]
   12046:	f04f 0300 	mov.w	r3, #0	; 0x0
   1204a:	9303      	str	r3, [sp, #12]
   1204c:	f8d7 01c0 	ldr.w	r0, [r7, #448]
   12050:	ca06      	ldmia	r2!, {r1, r2}
   12052:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   12056:	f7fe fb2b 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1205a:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   1205e:	f8c7 31c4 	str.w	r3, [r7, #452]
   12062:	e003      	b.n	1206c <_ZN9Krabi2015C1Eb+0x1458>
   12064:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   12068:	f8c7 31c4 	str.w	r3, [r7, #452]
   1206c:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   12070:	f8c7 3598 	str.w	r3, [r7, #1432]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12074:	f507 7246 	add.w	r2, r7, #792	; 0x318
   12078:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1207c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12080:	781b      	ldrb	r3, [r3, #0]
   12082:	4610      	mov	r0, r2
   12084:	499e      	ldr	r1, [pc, #632]	(12300 <_ZN9Krabi2015C1Eb+0x16ec>)
   12086:	4a9f      	ldr	r2, [pc, #636]	(12304 <_ZN9Krabi2015C1Eb+0x16f0>)
   12088:	f7fc fc74 	bl	e974 <_ZN8PositionC1Effb>
   1208c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12090:	f8c7 31c8 	str.w	r3, [r7, #456]
   12094:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12098:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1209c:	f8c7 3510 	str.w	r3, [r7, #1296]
   120a0:	f04f 0034 	mov.w	r0, #52	; 0x34
   120a4:	f7fc fb00 	bl	e6a8 <_Znwj>
   120a8:	4603      	mov	r3, r0
   120aa:	f8c7 31cc 	str.w	r3, [r7, #460]
   120ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   120b2:	2b00      	cmp	r3, #0
   120b4:	d01b      	beq.n	120ee <_ZN9Krabi2015C1Eb+0x14da>
   120b6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   120ba:	681b      	ldr	r3, [r3, #0]
   120bc:	6b5b      	ldr	r3, [r3, #52]
   120be:	f507 7246 	add.w	r2, r7, #792	; 0x318
   120c2:	9300      	str	r3, [sp, #0]
   120c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   120c8:	9301      	str	r3, [sp, #4]
   120ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120ce:	9302      	str	r3, [sp, #8]
   120d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   120d4:	9303      	str	r3, [sp, #12]
   120d6:	f8d7 01cc 	ldr.w	r0, [r7, #460]
   120da:	ca06      	ldmia	r2!, {r1, r2}
   120dc:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   120e0:	f7fe fae6 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   120e4:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   120e8:	f8c7 31d0 	str.w	r3, [r7, #464]
   120ec:	e003      	b.n	120f6 <_ZN9Krabi2015C1Eb+0x14e2>
   120ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   120f2:	f8c7 31d0 	str.w	r3, [r7, #464]
   120f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   120fa:	f8c7 359c 	str.w	r3, [r7, #1436]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   120fe:	f507 7248 	add.w	r2, r7, #800	; 0x320
   12102:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12106:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1210a:	781b      	ldrb	r3, [r3, #0]
   1210c:	4610      	mov	r0, r2
   1210e:	497e      	ldr	r1, [pc, #504]	(12308 <_ZN9Krabi2015C1Eb+0x16f4>)
   12110:	4a7e      	ldr	r2, [pc, #504]	(1230c <_ZN9Krabi2015C1Eb+0x16f8>)
   12112:	f7fc fc2f 	bl	e974 <_ZN8PositionC1Effb>
   12116:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1211a:	f8c7 31d4 	str.w	r3, [r7, #468]
   1211e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12122:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12126:	f8c7 3510 	str.w	r3, [r7, #1296]
   1212a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1212e:	f7fc fabb 	bl	e6a8 <_Znwj>
   12132:	4603      	mov	r3, r0
   12134:	f8c7 31d8 	str.w	r3, [r7, #472]
   12138:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   1213c:	2b00      	cmp	r3, #0
   1213e:	d01b      	beq.n	12178 <_ZN9Krabi2015C1Eb+0x1564>
   12140:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12144:	681b      	ldr	r3, [r3, #0]
   12146:	6b5b      	ldr	r3, [r3, #52]
   12148:	f507 7248 	add.w	r2, r7, #800	; 0x320
   1214c:	9300      	str	r3, [sp, #0]
   1214e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12152:	9301      	str	r3, [sp, #4]
   12154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12158:	9302      	str	r3, [sp, #8]
   1215a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1215e:	9303      	str	r3, [sp, #12]
   12160:	f8d7 01d8 	ldr.w	r0, [r7, #472]
   12164:	ca06      	ldmia	r2!, {r1, r2}
   12166:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   1216a:	f7fe faa1 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1216e:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   12172:	f8c7 31dc 	str.w	r3, [r7, #476]
   12176:	e003      	b.n	12180 <_ZN9Krabi2015C1Eb+0x156c>
   12178:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   1217c:	f8c7 31dc 	str.w	r3, [r7, #476]
   12180:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   12184:	f8c7 35a0 	str.w	r3, [r7, #1440]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12188:	f507 724a 	add.w	r2, r7, #808	; 0x328
   1218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12190:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12194:	781b      	ldrb	r3, [r3, #0]
   12196:	4610      	mov	r0, r2
   12198:	495d      	ldr	r1, [pc, #372]	(12310 <_ZN9Krabi2015C1Eb+0x16fc>)
   1219a:	4a5e      	ldr	r2, [pc, #376]	(12314 <_ZN9Krabi2015C1Eb+0x1700>)
   1219c:	f7fc fbea 	bl	e974 <_ZN8PositionC1Effb>
   121a0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   121a4:	f8c7 31e0 	str.w	r3, [r7, #480]
   121a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   121ac:	f103 0301 	add.w	r3, r3, #1	; 0x1
   121b0:	f8c7 3510 	str.w	r3, [r7, #1296]
   121b4:	f04f 0034 	mov.w	r0, #52	; 0x34
   121b8:	f7fc fa76 	bl	e6a8 <_Znwj>
   121bc:	4603      	mov	r3, r0
   121be:	f8c7 31e4 	str.w	r3, [r7, #484]
   121c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   121c6:	2b00      	cmp	r3, #0
   121c8:	d01b      	beq.n	12202 <_ZN9Krabi2015C1Eb+0x15ee>
   121ca:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   121ce:	681b      	ldr	r3, [r3, #0]
   121d0:	6b5b      	ldr	r3, [r3, #52]
   121d2:	f507 724a 	add.w	r2, r7, #808	; 0x328
   121d6:	9300      	str	r3, [sp, #0]
   121d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   121dc:	9301      	str	r3, [sp, #4]
   121de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121e2:	9302      	str	r3, [sp, #8]
   121e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   121e8:	9303      	str	r3, [sp, #12]
   121ea:	f8d7 01e4 	ldr.w	r0, [r7, #484]
   121ee:	ca06      	ldmia	r2!, {r1, r2}
   121f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   121f4:	f7fe fa5c 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   121f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   121fc:	f8c7 31e8 	str.w	r3, [r7, #488]
   12200:	e003      	b.n	1220a <_ZN9Krabi2015C1Eb+0x15f6>
   12202:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   12206:	f8c7 31e8 	str.w	r3, [r7, #488]
   1220a:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   1220e:	f8c7 35a4 	str.w	r3, [r7, #1444]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12212:	f507 724c 	add.w	r2, r7, #816	; 0x330
   12216:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1221a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1221e:	781b      	ldrb	r3, [r3, #0]
   12220:	4610      	mov	r0, r2
   12222:	493d      	ldr	r1, [pc, #244]	(12318 <_ZN9Krabi2015C1Eb+0x1704>)
   12224:	4a3d      	ldr	r2, [pc, #244]	(1231c <_ZN9Krabi2015C1Eb+0x1708>)
   12226:	f7fc fba5 	bl	e974 <_ZN8PositionC1Effb>
   1222a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1222e:	f8c7 31ec 	str.w	r3, [r7, #492]
   12232:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12236:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1223a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1223e:	f04f 0034 	mov.w	r0, #52	; 0x34
   12242:	f7fc fa31 	bl	e6a8 <_Znwj>
   12246:	4603      	mov	r3, r0
   12248:	f8c7 31f0 	str.w	r3, [r7, #496]
   1224c:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   12250:	2b00      	cmp	r3, #0
   12252:	d01b      	beq.n	1228c <_ZN9Krabi2015C1Eb+0x1678>
   12254:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12258:	681b      	ldr	r3, [r3, #0]
   1225a:	6b5b      	ldr	r3, [r3, #52]
   1225c:	f507 724c 	add.w	r2, r7, #816	; 0x330
   12260:	9300      	str	r3, [sp, #0]
   12262:	f04f 0300 	mov.w	r3, #0	; 0x0
   12266:	9301      	str	r3, [sp, #4]
   12268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1226c:	9302      	str	r3, [sp, #8]
   1226e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12272:	9303      	str	r3, [sp, #12]
   12274:	f8d7 01f0 	ldr.w	r0, [r7, #496]
   12278:	ca06      	ldmia	r2!, {r1, r2}
   1227a:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   1227e:	f7fe fa17 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12282:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   12286:	f8c7 31f4 	str.w	r3, [r7, #500]
   1228a:	e003      	b.n	12294 <_ZN9Krabi2015C1Eb+0x1680>
   1228c:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   12290:	f8c7 31f4 	str.w	r3, [r7, #500]
   12294:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   12298:	f8c7 35a8 	str.w	r3, [r7, #1448]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   1229c:	f04f 0300 	mov.w	r3, #0	; 0x0
   122a0:	f8c7 35ac 	str.w	r3, [r7, #1452]
   122a4:	e0a6      	b.n	123f4 <_ZN9Krabi2015C1Eb+0x17e0>
   122a6:	46c0      	nop			(mov r8, r8)
   122a8:	449c4000 	.word	0x449c4000
   122ac:	44e10000 	.word	0x44e10000
   122b0:	44dac000 	.word	0x44dac000
   122b4:	4499c000 	.word	0x4499c000
   122b8:	443e0000 	.word	0x443e0000
   122bc:	450fc000 	.word	0x450fc000
   122c0:	44bb8000 	.word	0x44bb8000
   122c4:	45296000 	.word	0x45296000
   122c8:	45246000 	.word	0x45246000
   122cc:	43e60000 	.word	0x43e60000
   122d0:	44898000 	.word	0x44898000
   122d4:	44ce4000 	.word	0x44ce4000
   122d8:	440c0000 	.word	0x440c0000
   122dc:	44a14000 	.word	0x44a14000
   122e0:	44340000 	.word	0x44340000
   122e4:	44c80000 	.word	0x44c80000
   122e8:	43d20000 	.word	0x43d20000
   122ec:	43960000 	.word	0x43960000
   122f0:	43c80000 	.word	0x43c80000
   122f4:	43d70000 	.word	0x43d70000
   122f8:	448ac000 	.word	0x448ac000
   122fc:	448d4000 	.word	0x448d4000
   12300:	44b90000 	.word	0x44b90000
   12304:	448fc000 	.word	0x448fc000
   12308:	44e74000 	.word	0x44e74000
   1230c:	44910000 	.word	0x44910000
   12310:	44f3c000 	.word	0x44f3c000
   12314:	44bf4000 	.word	0x44bf4000
   12318:	44ec4000 	.word	0x44ec4000
   1231c:	44aaa000 	.word	0x44aaa000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   12320:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12324:	681b      	ldr	r3, [r3, #0]
   12326:	6b5a      	ldr	r2, [r3, #52]
   12328:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1232c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12330:	4413      	add	r3, r2
   12332:	681b      	ldr	r3, [r3, #0]
   12334:	4618      	mov	r0, r3
   12336:	f7fd ff9f 	bl	10278 <_ZN5Etape8getStateEv>
   1233a:	4603      	mov	r3, r0
   1233c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12340:	bf14      	ite	ne
   12342:	2300      	movne	r3, #0
   12344:	2301      	moveq	r3, #1
   12346:	b2db      	uxtb	r3, r3
   12348:	2b00      	cmp	r3, #0
   1234a:	d04d      	beq.n	123e8 <_ZN9Krabi2015C1Eb+0x17d4>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   1234c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12350:	681b      	ldr	r3, [r3, #0]
   12352:	6a99      	ldr	r1, [r3, #40]
   12354:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   12358:	ea4f 1203 	mov.w	r2, r3, lsl #4
   1235c:	ea4f 0382 	mov.w	r3, r2, lsl #2
   12360:	ebc2 0303 	rsb	r3, r2, r3
   12364:	eb01 0403 	add.w	r4, r1, r3
   12368:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1236c:	681b      	ldr	r3, [r3, #0]
   1236e:	6b5a      	ldr	r2, [r3, #52]
   12370:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   12374:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12378:	4413      	add	r3, r2
   1237a:	681a      	ldr	r2, [r3, #0]
   1237c:	f507 735a 	add.w	r3, r7, #872	; 0x368
   12380:	4618      	mov	r0, r3
   12382:	4611      	mov	r1, r2
   12384:	f7fd ff64 	bl	10250 <_ZN5Etape11getPositionEv>
   12388:	f507 714e 	add.w	r1, r7, #824	; 0x338
   1238c:	f507 725a 	add.w	r2, r7, #872	; 0x368
   12390:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 12cb8 <_ZN9Krabi2015C1Eb+0x20a4>
   12394:	9300      	str	r3, [sp, #0]
   12396:	4608      	mov	r0, r1
   12398:	ca06      	ldmia	r2!, {r1, r2}
   1239a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1239e:	f7fd f80f 	bl	f3c0 <_ZN10ActionGoToC1E8Positionbf>
   123a2:	f507 734e 	add.w	r3, r7, #824	; 0x338
   123a6:	4620      	mov	r0, r4
   123a8:	4619      	mov	r1, r3
   123aa:	f00a fd95 	bl	1ced8 <_ZN10ActionGoToaSERKS_>
   123ae:	f507 734e 	add.w	r3, r7, #824	; 0x338
   123b2:	4618      	mov	r0, r3
   123b4:	f7fc ffcc 	bl	f350 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   123b8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   123bc:	681b      	ldr	r3, [r3, #0]
   123be:	6a5a      	ldr	r2, [r3, #36]
   123c0:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   123c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   123c8:	eb02 0003 	add.w	r0, r2, r3
   123cc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   123d0:	681b      	ldr	r3, [r3, #0]
   123d2:	6a99      	ldr	r1, [r3, #40]
   123d4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   123d8:	ea4f 1203 	mov.w	r2, r3, lsl #4
   123dc:	ea4f 0382 	mov.w	r3, r2, lsl #2
   123e0:	ebc2 0303 	rsb	r3, r2, r3
   123e4:	440b      	add	r3, r1
   123e6:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   123e8:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   123ec:	f103 0301 	add.w	r3, r3, #1	; 0x1
   123f0:	f8c7 35ac 	str.w	r3, [r7, #1452]
   123f4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   123f8:	2b25      	cmp	r3, #37
   123fa:	dd91      	ble.n	12320 <_ZN9Krabi2015C1Eb+0x170c>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   123fc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12400:	681b      	ldr	r3, [r3, #0]
   12402:	f103 0448 	add.w	r4, r3, #72	; 0x48
   12406:	f507 7266 	add.w	r2, r7, #920	; 0x398
   1240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1240e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12412:	781b      	ldrb	r3, [r3, #0]
   12414:	4610      	mov	r0, r2
   12416:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 12cbc <_ZN9Krabi2015C1Eb+0x20a8>
   1241a:	f8df 28a4 	ldr.w	r2, [pc, #2212]	; 12cc0 <_ZN9Krabi2015C1Eb+0x20ac>
   1241e:	f7fc faa9 	bl	e974 <_ZN8PositionC1Effb>
   12422:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   12426:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1242a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1242e:	781b      	ldrb	r3, [r3, #0]
   12430:	4610      	mov	r0, r2
   12432:	f8df 1890 	ldr.w	r1, [pc, #2192]	; 12cc4 <_ZN9Krabi2015C1Eb+0x20b0>
   12436:	f8df 2888 	ldr.w	r2, [pc, #2184]	; 12cc0 <_ZN9Krabi2015C1Eb+0x20ac>
   1243a:	f7fc fa9b 	bl	e974 <_ZN8PositionC1Effb>
   1243e:	f507 705c 	add.w	r0, r7, #880	; 0x370
   12442:	f507 7166 	add.w	r1, r7, #920	; 0x398
   12446:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   1244a:	6853      	ldr	r3, [r2, #4]
   1244c:	9300      	str	r3, [sp, #0]
   1244e:	6813      	ldr	r3, [r2, #0]
   12450:	c906      	ldmia	r1!, {r1, r2}
   12452:	f7fd f99d 	bl	f790 <_ZN4ClapC1E8PositionS0_>
   12456:	f507 735c 	add.w	r3, r7, #880	; 0x370
   1245a:	4620      	mov	r0, r4
   1245c:	4619      	mov	r1, r3
   1245e:	f00a fd67 	bl	1cf30 <_ZN4ClapaSERKS_>
   12462:	f507 735c 	add.w	r3, r7, #880	; 0x370
   12466:	4618      	mov	r0, r3
   12468:	f7fd f95a 	bl	f720 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   1246c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12470:	681b      	ldr	r3, [r3, #0]
   12472:	6a5b      	ldr	r3, [r3, #36]
   12474:	f103 0208 	add.w	r2, r3, #8	; 0x8
   12478:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1247c:	681b      	ldr	r3, [r3, #0]
   1247e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   12482:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   12484:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12488:	681b      	ldr	r3, [r3, #0]
   1248a:	f103 0470 	add.w	r4, r3, #112	; 0x70
   1248e:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   12492:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12496:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1249a:	781b      	ldrb	r3, [r3, #0]
   1249c:	4610      	mov	r0, r2
   1249e:	f8df 1828 	ldr.w	r1, [pc, #2088]	; 12cc8 <_ZN9Krabi2015C1Eb+0x20b4>
   124a2:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 12cc0 <_ZN9Krabi2015C1Eb+0x20ac>
   124a6:	f7fc fa65 	bl	e974 <_ZN8PositionC1Effb>
   124aa:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   124ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
   124b2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   124b6:	781b      	ldrb	r3, [r3, #0]
   124b8:	4610      	mov	r0, r2
   124ba:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 12ccc <_ZN9Krabi2015C1Eb+0x20b8>
   124be:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 12cc0 <_ZN9Krabi2015C1Eb+0x20ac>
   124c2:	f7fc fa57 	bl	e974 <_ZN8PositionC1Effb>
   124c6:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   124ca:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   124ce:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   124d2:	6853      	ldr	r3, [r2, #4]
   124d4:	9300      	str	r3, [sp, #0]
   124d6:	6813      	ldr	r3, [r2, #0]
   124d8:	c906      	ldmia	r1!, {r1, r2}
   124da:	f7fd f959 	bl	f790 <_ZN4ClapC1E8PositionS0_>
   124de:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   124e2:	4620      	mov	r0, r4
   124e4:	4619      	mov	r1, r3
   124e6:	f00a fd23 	bl	1cf30 <_ZN4ClapaSERKS_>
   124ea:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   124ee:	4618      	mov	r0, r3
   124f0:	f7fd f916 	bl	f720 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   124f4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   124f8:	681b      	ldr	r3, [r3, #0]
   124fa:	6a5b      	ldr	r3, [r3, #36]
   124fc:	f103 0210 	add.w	r2, r3, #16	; 0x10
   12500:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12504:	681b      	ldr	r3, [r3, #0]
   12506:	f103 0370 	add.w	r3, r3, #112	; 0x70
   1250a:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   1250c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12510:	681b      	ldr	r3, [r3, #0]
   12512:	f103 0498 	add.w	r4, r3, #152	; 0x98
   12516:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   1251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1251e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12522:	781b      	ldrb	r3, [r3, #0]
   12524:	4610      	mov	r0, r2
   12526:	f8df 17a8 	ldr.w	r1, [pc, #1960]	; 12cd0 <_ZN9Krabi2015C1Eb+0x20bc>
   1252a:	f8df 2794 	ldr.w	r2, [pc, #1940]	; 12cc0 <_ZN9Krabi2015C1Eb+0x20ac>
   1252e:	f7fc fa21 	bl	e974 <_ZN8PositionC1Effb>
   12532:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   12536:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1253a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1253e:	781b      	ldrb	r3, [r3, #0]
   12540:	4610      	mov	r0, r2
   12542:	f8df 1790 	ldr.w	r1, [pc, #1936]	; 12cd4 <_ZN9Krabi2015C1Eb+0x20c0>
   12546:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 12cc0 <_ZN9Krabi2015C1Eb+0x20ac>
   1254a:	f7fc fa13 	bl	e974 <_ZN8PositionC1Effb>
   1254e:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   12552:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   12556:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   1255a:	6853      	ldr	r3, [r2, #4]
   1255c:	9300      	str	r3, [sp, #0]
   1255e:	6813      	ldr	r3, [r2, #0]
   12560:	c906      	ldmia	r1!, {r1, r2}
   12562:	f7fd f915 	bl	f790 <_ZN4ClapC1E8PositionS0_>
   12566:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   1256a:	4620      	mov	r0, r4
   1256c:	4619      	mov	r1, r3
   1256e:	f00a fcdf 	bl	1cf30 <_ZN4ClapaSERKS_>
   12572:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   12576:	4618      	mov	r0, r3
   12578:	f7fd f8d2 	bl	f720 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   1257c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12580:	681b      	ldr	r3, [r3, #0]
   12582:	6a5b      	ldr	r3, [r3, #36]
   12584:	f103 0218 	add.w	r2, r3, #24	; 0x18
   12588:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1258c:	681b      	ldr	r3, [r3, #0]
   1258e:	f103 0398 	add.w	r3, r3, #152	; 0x98
   12592:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   12594:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12598:	681b      	ldr	r3, [r3, #0]
   1259a:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   1259e:	f507 6287 	add.w	r2, r7, #1080	; 0x438
   125a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   125a6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   125aa:	781b      	ldrb	r3, [r3, #0]
   125ac:	4610      	mov	r0, r2
   125ae:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 12cd8 <_ZN9Krabi2015C1Eb+0x20c4>
   125b2:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 12cdc <_ZN9Krabi2015C1Eb+0x20c8>
   125b6:	f7fc f9dd 	bl	e974 <_ZN8PositionC1Effb>
   125ba:	f507 6283 	add.w	r2, r7, #1048	; 0x418
   125be:	f507 6387 	add.w	r3, r7, #1080	; 0x438
   125c2:	4610      	mov	r0, r2
   125c4:	e893 0006 	ldmia.w	r3, {r1, r2}
   125c8:	f7fe f9f6 	bl	109b8 <_ZN7GobeletC1E8Position>
   125cc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   125d0:	4620      	mov	r0, r4
   125d2:	4619      	mov	r1, r3
   125d4:	f00a fcd4 	bl	1cf80 <_ZN7GobeletaSERKS_>
   125d8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   125dc:	4618      	mov	r0, r3
   125de:	f7fe f9b3 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   125e2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   125e6:	681b      	ldr	r3, [r3, #0]
   125e8:	6a5b      	ldr	r3, [r3, #36]
   125ea:	f103 0220 	add.w	r2, r3, #32	; 0x20
   125ee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   125f2:	681b      	ldr	r3, [r3, #0]
   125f4:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   125f8:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   125fa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   125fe:	681b      	ldr	r3, [r3, #0]
   12600:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   12604:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   12608:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1260c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12610:	781b      	ldrb	r3, [r3, #0]
   12612:	4610      	mov	r0, r2
   12614:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 12ce0 <_ZN9Krabi2015C1Eb+0x20cc>
   12618:	f8df 26c8 	ldr.w	r2, [pc, #1736]	; 12ce4 <_ZN9Krabi2015C1Eb+0x20d0>
   1261c:	f7fc f9aa 	bl	e974 <_ZN8PositionC1Effb>
   12620:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   12624:	f507 638c 	add.w	r3, r7, #1120	; 0x460
   12628:	4610      	mov	r0, r2
   1262a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1262e:	f7fe f9c3 	bl	109b8 <_ZN7GobeletC1E8Position>
   12632:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   12636:	4620      	mov	r0, r4
   12638:	4619      	mov	r1, r3
   1263a:	f00a fca1 	bl	1cf80 <_ZN7GobeletaSERKS_>
   1263e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   12642:	4618      	mov	r0, r3
   12644:	f7fe f980 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   12648:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1264c:	681b      	ldr	r3, [r3, #0]
   1264e:	6a5b      	ldr	r3, [r3, #36]
   12650:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12654:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12658:	681b      	ldr	r3, [r3, #0]
   1265a:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   1265e:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   12660:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12664:	681b      	ldr	r3, [r3, #0]
   12666:	f503 7480 	add.w	r4, r3, #256	; 0x100
   1266a:	f507 6291 	add.w	r2, r7, #1160	; 0x488
   1266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12672:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12676:	781b      	ldrb	r3, [r3, #0]
   12678:	4610      	mov	r0, r2
   1267a:	f8df 166c 	ldr.w	r1, [pc, #1644]	; 12ce8 <_ZN9Krabi2015C1Eb+0x20d4>
   1267e:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 12cec <_ZN9Krabi2015C1Eb+0x20d8>
   12682:	f7fc f977 	bl	e974 <_ZN8PositionC1Effb>
   12686:	f507 628d 	add.w	r2, r7, #1128	; 0x468
   1268a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
   1268e:	4610      	mov	r0, r2
   12690:	e893 0006 	ldmia.w	r3, {r1, r2}
   12694:	f7fe f990 	bl	109b8 <_ZN7GobeletC1E8Position>
   12698:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   1269c:	4620      	mov	r0, r4
   1269e:	4619      	mov	r1, r3
   126a0:	f00a fc6e 	bl	1cf80 <_ZN7GobeletaSERKS_>
   126a4:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   126a8:	4618      	mov	r0, r3
   126aa:	f7fe f94d 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   126ae:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   126b2:	681b      	ldr	r3, [r3, #0]
   126b4:	6a5b      	ldr	r3, [r3, #36]
   126b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
   126ba:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   126be:	681b      	ldr	r3, [r3, #0]
   126c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   126c4:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   126c6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   126ca:	681b      	ldr	r3, [r3, #0]
   126cc:	f503 7490 	add.w	r4, r3, #288	; 0x120
   126d0:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
   126d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   126d8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   126dc:	781b      	ldrb	r3, [r3, #0]
   126de:	4610      	mov	r0, r2
   126e0:	f8df 160c 	ldr.w	r1, [pc, #1548]	; 12cf0 <_ZN9Krabi2015C1Eb+0x20dc>
   126e4:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 12ce4 <_ZN9Krabi2015C1Eb+0x20d0>
   126e8:	f7fc f944 	bl	e974 <_ZN8PositionC1Effb>
   126ec:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   126f0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
   126f4:	4610      	mov	r0, r2
   126f6:	e893 0006 	ldmia.w	r3, {r1, r2}
   126fa:	f7fe f95d 	bl	109b8 <_ZN7GobeletC1E8Position>
   126fe:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   12702:	4620      	mov	r0, r4
   12704:	4619      	mov	r1, r3
   12706:	f00a fc3b 	bl	1cf80 <_ZN7GobeletaSERKS_>
   1270a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   1270e:	4618      	mov	r0, r3
   12710:	f7fe f91a 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   12714:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12718:	681b      	ldr	r3, [r3, #0]
   1271a:	6a5b      	ldr	r3, [r3, #36]
   1271c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   12720:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12724:	681b      	ldr	r3, [r3, #0]
   12726:	f503 7390 	add.w	r3, r3, #288	; 0x120
   1272a:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   1272c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12730:	681b      	ldr	r3, [r3, #0]
   12732:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   12736:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
   1273a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1273e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12742:	781b      	ldrb	r3, [r3, #0]
   12744:	4610      	mov	r0, r2
   12746:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 12cf4 <_ZN9Krabi2015C1Eb+0x20e0>
   1274a:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 12cdc <_ZN9Krabi2015C1Eb+0x20c8>
   1274e:	f7fc f911 	bl	e974 <_ZN8PositionC1Effb>
   12752:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   12756:	4618      	mov	r0, r3
   12758:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
   1275c:	e893 0006 	ldmia.w	r3, {r1, r2}
   12760:	f7fe f92a 	bl	109b8 <_ZN7GobeletC1E8Position>
   12764:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   12768:	4620      	mov	r0, r4
   1276a:	4619      	mov	r1, r3
   1276c:	f00a fc08 	bl	1cf80 <_ZN7GobeletaSERKS_>
   12770:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   12774:	4618      	mov	r0, r3
   12776:	f7fe f8e7 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   1277a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1277e:	681b      	ldr	r3, [r3, #0]
   12780:	6a5b      	ldr	r3, [r3, #36]
   12782:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12786:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1278a:	681b      	ldr	r3, [r3, #0]
   1278c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   12790:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1220, 760, isYellow));
   12792:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12796:	681b      	ldr	r3, [r3, #0]
   12798:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   1279c:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
   127a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   127a4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   127a8:	781b      	ldrb	r3, [r3, #0]
   127aa:	4610      	mov	r0, r2
   127ac:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 12cf8 <_ZN9Krabi2015C1Eb+0x20e4>
   127b0:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 12cfc <_ZN9Krabi2015C1Eb+0x20e8>
   127b4:	f7fc f8de 	bl	e974 <_ZN8PositionC1Effb>
   127b8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   127bc:	4618      	mov	r0, r3
   127be:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
   127c2:	e893 0006 	ldmia.w	r3, {r1, r2}
   127c6:	f004 fdc3 	bl	17350 <_ZN5TapisC1E8Position>
   127ca:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   127ce:	4620      	mov	r0, r4
   127d0:	4619      	mov	r1, r3
   127d2:	f00a fbf1 	bl	1cfb8 <_ZN5TapisaSERKS_>
   127d6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   127da:	4618      	mov	r0, r3
   127dc:	f004 fd24 	bl	17228 <_ZN5TapisD1Ev>
    actionEtape[23] = &actionTapis[0];
   127e0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   127e4:	681b      	ldr	r3, [r3, #0]
   127e6:	6a5b      	ldr	r3, [r3, #36]
   127e8:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   127ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   127f0:	681b      	ldr	r3, [r3, #0]
   127f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   127f6:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   127f8:	f8d7 0514 	ldr.w	r0, [r7, #1300]
   127fc:	f8d7 1518 	ldr.w	r1, [r7, #1304]
   12800:	f04f 0201 	mov.w	r2, #1	; 0x1
   12804:	f7fd fe74 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   12808:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   1280c:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   12810:	f04f 0201 	mov.w	r2, #1	; 0x1
   12814:	f7fd fe6c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   12818:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   1281c:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   12820:	f04f 0201 	mov.w	r2, #1	; 0x1
   12824:	f7fd fe64 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   12828:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   1282c:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12830:	f04f 0201 	mov.w	r2, #1	; 0x1
   12834:	f7fd fe5c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   12838:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   1283c:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   12840:	f04f 0201 	mov.w	r2, #1	; 0x1
   12844:	f7fd fe54 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   12848:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   1284c:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12850:	f04f 0201 	mov.w	r2, #1	; 0x1
   12854:	f7fd fe4c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   12858:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   1285c:	f8d7 1520 	ldr.w	r1, [r7, #1312]
   12860:	f04f 0201 	mov.w	r2, #1	; 0x1
   12864:	f7fd fe44 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   12868:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   1286c:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12870:	f04f 0201 	mov.w	r2, #1	; 0x1
   12874:	f7fd fe3c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   12878:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   1287c:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12880:	f04f 0201 	mov.w	r2, #1	; 0x1
   12884:	f7fd fe34 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   12888:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   1288c:	f8d7 1528 	ldr.w	r1, [r7, #1320]
   12890:	f04f 0201 	mov.w	r2, #1	; 0x1
   12894:	f7fd fe2c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   12898:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   1289c:	f8d7 1548 	ldr.w	r1, [r7, #1352]
   128a0:	f04f 0201 	mov.w	r2, #1	; 0x1
   128a4:	f7fd fe24 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   128a8:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   128ac:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   128b0:	f04f 0201 	mov.w	r2, #1	; 0x1
   128b4:	f7fd fe1c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   128b8:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   128bc:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   128c0:	f04f 0201 	mov.w	r2, #1	; 0x1
   128c4:	f7fd fe14 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   128c8:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   128cc:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   128d0:	f04f 0201 	mov.w	r2, #1	; 0x1
   128d4:	f7fd fe0c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   128d8:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   128dc:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   128e0:	f04f 0201 	mov.w	r2, #1	; 0x1
   128e4:	f7fd fe04 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   128e8:	f8d7 0548 	ldr.w	r0, [r7, #1352]
   128ec:	f8d7 154c 	ldr.w	r1, [r7, #1356]
   128f0:	f04f 0201 	mov.w	r2, #1	; 0x1
   128f4:	f7fd fdfc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   128f8:	f8d7 054c 	ldr.w	r0, [r7, #1356]
   128fc:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   12900:	f04f 0201 	mov.w	r2, #1	; 0x1
   12904:	f7fd fdf4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   12908:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   1290c:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12910:	f04f 0201 	mov.w	r2, #1	; 0x1
   12914:	f7fd fdec 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   12918:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   1291c:	f8d7 1560 	ldr.w	r1, [r7, #1376]
   12920:	f04f 0201 	mov.w	r2, #1	; 0x1
   12924:	f7fd fde4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   12928:	f8d7 0560 	ldr.w	r0, [r7, #1376]
   1292c:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   12930:	f04f 0201 	mov.w	r2, #1	; 0x1
   12934:	f7fd fddc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   12938:	f8d7 0580 	ldr.w	r0, [r7, #1408]
   1293c:	f8d7 1568 	ldr.w	r1, [r7, #1384]
   12940:	f04f 0201 	mov.w	r2, #1	; 0x1
   12944:	f7fd fdd4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   12948:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   1294c:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   12950:	f04f 0201 	mov.w	r2, #1	; 0x1
   12954:	f7fd fdcc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   12958:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   1295c:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12960:	f04f 0201 	mov.w	r2, #1	; 0x1
   12964:	f7fd fdc4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   12968:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   1296c:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12970:	f04f 0201 	mov.w	r2, #1	; 0x1
   12974:	f7fd fdbc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   12978:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   1297c:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12980:	f04f 0201 	mov.w	r2, #1	; 0x1
   12984:	f7fd fdb4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   12988:	f8d7 0568 	ldr.w	r0, [r7, #1384]
   1298c:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   12990:	f04f 0201 	mov.w	r2, #1	; 0x1
   12994:	f7fd fdac 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   12998:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   1299c:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   129a0:	f04f 0201 	mov.w	r2, #1	; 0x1
   129a4:	f7fd fda4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   129a8:	f8d7 0564 	ldr.w	r0, [r7, #1380]
   129ac:	f8d7 153c 	ldr.w	r1, [r7, #1340]
   129b0:	f04f 0201 	mov.w	r2, #1	; 0x1
   129b4:	f7fd fd9c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   129b8:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   129bc:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   129c0:	f04f 0201 	mov.w	r2, #1	; 0x1
   129c4:	f7fd fd94 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   129c8:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   129cc:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   129d0:	f04f 0201 	mov.w	r2, #1	; 0x1
   129d4:	f7fd fd8c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   129d8:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   129dc:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   129e0:	f04f 0201 	mov.w	r2, #1	; 0x1
   129e4:	f7fd fd84 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   129e8:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   129ec:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   129f0:	f04f 0201 	mov.w	r2, #1	; 0x1
   129f4:	f7fd fd7c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   129f8:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   129fc:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   12a00:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a04:	f7fd fd74 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   12a08:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12a0c:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   12a10:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a14:	f7fd fd6c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   12a18:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12a1c:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   12a20:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a24:	f7fd fd64 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   12a28:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12a2c:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   12a30:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a34:	f7fd fd5c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   12a38:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   12a3c:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   12a40:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a44:	f7fd fd54 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   12a48:	f8d7 0544 	ldr.w	r0, [r7, #1348]
   12a4c:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   12a50:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a54:	f7fd fd4c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   12a58:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12a5c:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12a60:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a64:	f7fd fd44 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   12a68:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12a6c:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12a70:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a74:	f7fd fd3c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   12a78:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12a7c:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12a80:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a84:	f7fd fd34 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   12a88:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12a8c:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12a90:	f04f 0201 	mov.w	r2, #1	; 0x1
   12a94:	f7fd fd2c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape26);
   12a98:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12a9c:	f8d7 157c 	ldr.w	r1, [r7, #1404]
   12aa0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12aa4:	f7fd fd24 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape32);
   12aa8:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12aac:	f8d7 1594 	ldr.w	r1, [r7, #1428]
   12ab0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ab4:	f7fd fd1c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   12ab8:	f8d7 0594 	ldr.w	r0, [r7, #1428]
   12abc:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   12ac0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ac4:	f7fd fd14 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   12ac8:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12acc:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12ad0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ad4:	f7fd fd0c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   12ad8:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   12adc:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12ae0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ae4:	f7fd fd04 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   12ae8:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   12aec:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   12af0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12af4:	f7fd fcfc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   12af8:	f8d7 0550 	ldr.w	r0, [r7, #1360]
   12afc:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12b00:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b04:	f7fd fcf4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   12b08:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12b0c:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   12b10:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b14:	f7fd fcec 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   12b18:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12b1c:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12b20:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b24:	f7fd fce4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   12b28:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12b2c:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12b30:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b34:	f7fd fcdc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   12b38:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12b3c:	f8d7 1584 	ldr.w	r1, [r7, #1412]
   12b40:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b44:	f7fd fcd4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   12b48:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12b4c:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   12b50:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b54:	f7fd fccc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   12b58:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   12b5c:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   12b60:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b64:	f7fd fcc4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   12b68:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   12b6c:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12b70:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b74:	f7fd fcbc 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   12b78:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12b7c:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12b80:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b84:	f7fd fcb4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   12b88:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12b8c:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12b90:	f04f 0201 	mov.w	r2, #1	; 0x1
   12b94:	f7fd fcac 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   12b98:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12b9c:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12ba0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ba4:	f7fd fca4 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   12ba8:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12bac:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   12bb0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12bb4:	f7fd fc9c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   12bb8:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12bbc:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   12bc0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12bc4:	f7fd fc94 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   12bc8:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12bcc:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12bd0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12bd4:	f7fd fc8c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   12bd8:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   12bdc:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   12be0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12be4:	f7fd fc84 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   12be8:	f8d7 059c 	ldr.w	r0, [r7, #1436]
   12bec:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   12bf0:	f04f 0201 	mov.w	r2, #1	; 0x1
   12bf4:	f7fd fc7c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   12bf8:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   12bfc:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   12c00:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c04:	f7fd fc74 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   12c08:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   12c0c:	f8d7 15a8 	ldr.w	r1, [r7, #1448]
   12c10:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c14:	f7fd fc6c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   12c18:	f8d7 05a8 	ldr.w	r0, [r7, #1448]
   12c1c:	f8d7 15a4 	ldr.w	r1, [r7, #1444]
   12c20:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c24:	f7fd fc64 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   12c28:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   12c2c:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   12c30:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c34:	f7fd fc5c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   12c38:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   12c3c:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   12c40:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c44:	f7fd fc54 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   12c48:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12c4c:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12c50:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c54:	f7fd fc4c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   12c58:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12c5c:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   12c60:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c64:	f7fd fc44 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   12c68:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12c6c:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   12c70:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c74:	f7fd fc3c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   12c78:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12c7c:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12c80:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c84:	f7fd fc34 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   12c88:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12c8c:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   12c90:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c94:	f7fd fc2c 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>

    // Lancer Dijkstra
    startDijkstra();
   12c98:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12c9c:	681b      	ldr	r3, [r3, #0]
   12c9e:	4618      	mov	r0, r3
   12ca0:	f003 fdea 	bl	16878 <_ZN11StrategieV313startDijkstraEv>
}
   12ca4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12ca8:	681b      	ldr	r3, [r3, #0]
   12caa:	4618      	mov	r0, r3
   12cac:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
   12cb0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   12cb4:	46bd      	mov	sp, r7
   12cb6:	bd90      	pop	{r4, r7, pc}
   12cb8:	41f00000 	.word	0x41f00000
   12cbc:	44510000 	.word	0x44510000
   12cc0:	44de8000 	.word	0x44de8000
   12cc4:	447a0000 	.word	0x447a0000
   12cc8:	436c0000 	.word	0x436c0000
   12ccc:	43c80000 	.word	0x43c80000
   12cd0:	451c4000 	.word	0x451c4000
   12cd4:	450fc000 	.word	0x450fc000
   12cd8:	437a0000 	.word	0x437a0000
   12cdc:	44dac000 	.word	0x44dac000
   12ce0:	44638000 	.word	0x44638000
   12ce4:	444f8000 	.word	0x444f8000
   12ce8:	44bb8000 	.word	0x44bb8000
   12cec:	44ce4000 	.word	0x44ce4000
   12cf0:	4502a000 	.word	0x4502a000
   12cf4:	452be000 	.word	0x452be000
   12cf8:	44988000 	.word	0x44988000
   12cfc:	443e0000 	.word	0x443e0000

00012d00 <_ZN9Krabi2015C2Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   12d00:	b590      	push	{r4, r7, lr}
   12d02:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
   12d06:	b081      	sub	sp, #4
   12d08:	af04      	add	r7, sp, #16
   12d0a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12d0e:	6018      	str	r0, [r3, #0]
   12d10:	460a      	mov	r2, r1
   12d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12d16:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12d1a:	701a      	strb	r2, [r3, #0]
   12d1c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12d20:	681a      	ldr	r2, [r3, #0]
   12d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12d26:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12d2a:	781b      	ldrb	r3, [r3, #0]
   12d2c:	4610      	mov	r0, r2
   12d2e:	4619      	mov	r1, r3
   12d30:	f004 f966 	bl	17000 <_ZN11StrategieV3C2Eb>
   12d34:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12d38:	681a      	ldr	r2, [r3, #0]
   12d3a:	f8df 3c70 	ldr.w	r3, [pc, #3184]	; 139ac <_ZN9Krabi2015C2Eb+0xcac>
   12d3e:	6013      	str	r3, [r2, #0]
   12d40:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12d44:	681b      	ldr	r3, [r3, #0]
   12d46:	f103 0348 	add.w	r3, r3, #72	; 0x48
   12d4a:	607b      	str	r3, [r7, #4]
   12d4c:	f04f 0302 	mov.w	r3, #2	; 0x2
   12d50:	60bb      	str	r3, [r7, #8]
   12d52:	e00a      	b.n	12d6a <_ZN9Krabi2015C2Eb+0x6a>
   12d54:	6878      	ldr	r0, [r7, #4]
   12d56:	f7fc fd8f 	bl	f878 <_ZN4ClapC1Ev>
   12d5a:	687b      	ldr	r3, [r7, #4]
   12d5c:	f103 0328 	add.w	r3, r3, #40	; 0x28
   12d60:	607b      	str	r3, [r7, #4]
   12d62:	68bb      	ldr	r3, [r7, #8]
   12d64:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12d68:	60bb      	str	r3, [r7, #8]
   12d6a:	68bb      	ldr	r3, [r7, #8]
   12d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12d70:	d1f0      	bne.n	12d54 <_ZN9Krabi2015C2Eb+0x54>
   12d72:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12d76:	681b      	ldr	r3, [r3, #0]
   12d78:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   12d7c:	60fb      	str	r3, [r7, #12]
   12d7e:	f04f 0304 	mov.w	r3, #4	; 0x4
   12d82:	613b      	str	r3, [r7, #16]
   12d84:	e00a      	b.n	12d9c <_ZN9Krabi2015C2Eb+0x9c>
   12d86:	68f8      	ldr	r0, [r7, #12]
   12d88:	f7fd fe5a 	bl	10a40 <_ZN7GobeletC1Ev>
   12d8c:	68fb      	ldr	r3, [r7, #12]
   12d8e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   12d92:	60fb      	str	r3, [r7, #12]
   12d94:	693b      	ldr	r3, [r7, #16]
   12d96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12d9a:	613b      	str	r3, [r7, #16]
   12d9c:	693b      	ldr	r3, [r7, #16]
   12d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12da2:	d1f0      	bne.n	12d86 <_ZN9Krabi2015C2Eb+0x86>
   12da4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12da8:	681b      	ldr	r3, [r3, #0]
   12daa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   12dae:	617b      	str	r3, [r7, #20]
   12db0:	f04f 0300 	mov.w	r3, #0	; 0x0
   12db4:	61bb      	str	r3, [r7, #24]
   12db6:	e00a      	b.n	12dce <_ZN9Krabi2015C2Eb+0xce>
   12db8:	6978      	ldr	r0, [r7, #20]
   12dba:	f004 fa6d 	bl	17298 <_ZN5TapisC1Ev>
   12dbe:	697b      	ldr	r3, [r7, #20]
   12dc0:	f103 0328 	add.w	r3, r3, #40	; 0x28
   12dc4:	617b      	str	r3, [r7, #20]
   12dc6:	69bb      	ldr	r3, [r7, #24]
   12dc8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12dcc:	61bb      	str	r3, [r7, #24]
   12dce:	69bb      	ldr	r3, [r7, #24]
   12dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12dd4:	d1f0      	bne.n	12db8 <_ZN9Krabi2015C2Eb+0xb8>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   12dd6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12dda:	681a      	ldr	r2, [r3, #0]
   12ddc:	f04f 0326 	mov.w	r3, #38	; 0x26
   12de0:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   12de2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12de6:	681a      	ldr	r2, [r3, #0]
   12de8:	f04f 0301 	mov.w	r3, #1	; 0x1
   12dec:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   12dee:	f04f 0098 	mov.w	r0, #152	; 0x98
   12df2:	f7fb fcf1 	bl	e7d8 <_Znaj>
   12df6:	4603      	mov	r3, r0
   12df8:	461a      	mov	r2, r3
   12dfa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12dfe:	681b      	ldr	r3, [r3, #0]
   12e00:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   12e02:	f04f 0098 	mov.w	r0, #152	; 0x98
   12e06:	f7fb fce7 	bl	e7d8 <_Znaj>
   12e0a:	4603      	mov	r3, r0
   12e0c:	461a      	mov	r2, r3
   12e0e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12e12:	681b      	ldr	r3, [r3, #0]
   12e14:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   12e16:	f44f 60e5 	mov.w	r0, #1832	; 0x728
   12e1a:	f7fb fcdd 	bl	e7d8 <_Znaj>
   12e1e:	4603      	mov	r3, r0
   12e20:	61fb      	str	r3, [r7, #28]
   12e22:	69fb      	ldr	r3, [r7, #28]
   12e24:	2b00      	cmp	r3, #0
   12e26:	d03c      	beq.n	12ea2 <_ZN9Krabi2015C2Eb+0x1a2>
   12e28:	69fb      	ldr	r3, [r7, #28]
   12e2a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   12e2e:	627b      	str	r3, [r7, #36]
   12e30:	6a7b      	ldr	r3, [r7, #36]
   12e32:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   12e36:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   12e3a:	f04f 0330 	mov.w	r3, #48	; 0x30
   12e3e:	6013      	str	r3, [r2, #0]
   12e40:	6a7b      	ldr	r3, [r7, #36]
   12e42:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   12e46:	f04f 0326 	mov.w	r3, #38	; 0x26
   12e4a:	6013      	str	r3, [r2, #0]
   12e4c:	6a7b      	ldr	r3, [r7, #36]
   12e4e:	62bb      	str	r3, [r7, #40]
   12e50:	f04f 0325 	mov.w	r3, #37	; 0x25
   12e54:	62fb      	str	r3, [r7, #44]
   12e56:	e01d      	b.n	12e94 <_ZN9Krabi2015C2Eb+0x194>
   12e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12e5c:	4618      	mov	r0, r3
   12e5e:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 139b0 <_ZN9Krabi2015C2Eb+0xcb0>
   12e62:	f8df 2b4c 	ldr.w	r2, [pc, #2892]	; 139b0 <_ZN9Krabi2015C2Eb+0xcb0>
   12e66:	f04f 0301 	mov.w	r3, #1	; 0x1
   12e6a:	f7fb fd83 	bl	e974 <_ZN8PositionC1Effb>
   12e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
   12e72:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 139b4 <_ZN9Krabi2015C2Eb+0xcb4>
   12e76:	9300      	str	r3, [sp, #0]
   12e78:	6ab8      	ldr	r0, [r7, #40]
   12e7a:	ca06      	ldmia	r2!, {r1, r2}
   12e7c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12e80:	f7fc fa9e 	bl	f3c0 <_ZN10ActionGoToC1E8Positionbf>
   12e84:	6abb      	ldr	r3, [r7, #40]
   12e86:	f103 0330 	add.w	r3, r3, #48	; 0x30
   12e8a:	62bb      	str	r3, [r7, #40]
   12e8c:	6afb      	ldr	r3, [r7, #44]
   12e8e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12e92:	62fb      	str	r3, [r7, #44]
   12e94:	6afb      	ldr	r3, [r7, #44]
   12e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12e9a:	d1dd      	bne.n	12e58 <_ZN9Krabi2015C2Eb+0x158>
   12e9c:	6a7b      	ldr	r3, [r7, #36]
   12e9e:	623b      	str	r3, [r7, #32]
   12ea0:	e001      	b.n	12ea6 <_ZN9Krabi2015C2Eb+0x1a6>
   12ea2:	69fb      	ldr	r3, [r7, #28]
   12ea4:	623b      	str	r3, [r7, #32]
   12ea6:	6a3a      	ldr	r2, [r7, #32]
   12ea8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12eac:	681b      	ldr	r3, [r3, #0]
   12eae:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   12eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   12eb4:	f8c7 3510 	str.w	r3, [r7, #1296]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   12eb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
   12ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12ec0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	4610      	mov	r0, r2
   12ec8:	f8df 1aec 	ldr.w	r1, [pc, #2796]	; 139b8 <_ZN9Krabi2015C2Eb+0xcb8>
   12ecc:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 139bc <_ZN9Krabi2015C2Eb+0xcbc>
   12ed0:	f7fb fd50 	bl	e974 <_ZN8PositionC1Effb>
   12ed4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ed8:	633b      	str	r3, [r7, #48]
   12eda:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12ede:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12ee2:	f8c7 3510 	str.w	r3, [r7, #1296]
   12ee6:	f04f 0034 	mov.w	r0, #52	; 0x34
   12eea:	f7fb fbdd 	bl	e6a8 <_Znwj>
   12eee:	4603      	mov	r3, r0
   12ef0:	637b      	str	r3, [r7, #52]
   12ef2:	6b7b      	ldr	r3, [r7, #52]
   12ef4:	2b00      	cmp	r3, #0
   12ef6:	d017      	beq.n	12f28 <_ZN9Krabi2015C2Eb+0x228>
   12ef8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12efc:	681b      	ldr	r3, [r3, #0]
   12efe:	6b5b      	ldr	r3, [r3, #52]
   12f00:	f507 7202 	add.w	r2, r7, #520	; 0x208
   12f04:	9300      	str	r3, [sp, #0]
   12f06:	f04f 0305 	mov.w	r3, #5	; 0x5
   12f0a:	9301      	str	r3, [sp, #4]
   12f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f10:	9302      	str	r3, [sp, #8]
   12f12:	f04f 0300 	mov.w	r3, #0	; 0x0
   12f16:	9303      	str	r3, [sp, #12]
   12f18:	6b78      	ldr	r0, [r7, #52]
   12f1a:	ca06      	ldmia	r2!, {r1, r2}
   12f1c:	6b3b      	ldr	r3, [r7, #48]
   12f1e:	f7fd fbc7 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12f22:	6b7b      	ldr	r3, [r7, #52]
   12f24:	63bb      	str	r3, [r7, #56]
   12f26:	e001      	b.n	12f2c <_ZN9Krabi2015C2Eb+0x22c>
   12f28:	6b7b      	ldr	r3, [r7, #52]
   12f2a:	63bb      	str	r3, [r7, #56]
   12f2c:	6bbb      	ldr	r3, [r7, #56]
   12f2e:	f8c7 3514 	str.w	r3, [r7, #1300]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12f32:	f507 7204 	add.w	r2, r7, #528	; 0x210
   12f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12f3a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12f3e:	781b      	ldrb	r3, [r3, #0]
   12f40:	4610      	mov	r0, r2
   12f42:	f8df 1a7c 	ldr.w	r1, [pc, #2684]	; 139c0 <_ZN9Krabi2015C2Eb+0xcc0>
   12f46:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 139bc <_ZN9Krabi2015C2Eb+0xcbc>
   12f4a:	f7fb fd13 	bl	e974 <_ZN8PositionC1Effb>
   12f4e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12f52:	63fb      	str	r3, [r7, #60]
   12f54:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12f58:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12f5c:	f8c7 3510 	str.w	r3, [r7, #1296]
   12f60:	f04f 0034 	mov.w	r0, #52	; 0x34
   12f64:	f7fb fba0 	bl	e6a8 <_Znwj>
   12f68:	4603      	mov	r3, r0
   12f6a:	643b      	str	r3, [r7, #64]
   12f6c:	6c3b      	ldr	r3, [r7, #64]
   12f6e:	2b00      	cmp	r3, #0
   12f70:	d017      	beq.n	12fa2 <_ZN9Krabi2015C2Eb+0x2a2>
   12f72:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	6b5b      	ldr	r3, [r3, #52]
   12f7a:	f507 7204 	add.w	r2, r7, #528	; 0x210
   12f7e:	9300      	str	r3, [sp, #0]
   12f80:	f04f 0300 	mov.w	r3, #0	; 0x0
   12f84:	9301      	str	r3, [sp, #4]
   12f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f8a:	9302      	str	r3, [sp, #8]
   12f8c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12f90:	9303      	str	r3, [sp, #12]
   12f92:	6c38      	ldr	r0, [r7, #64]
   12f94:	ca06      	ldmia	r2!, {r1, r2}
   12f96:	6bfb      	ldr	r3, [r7, #60]
   12f98:	f7fd fb8a 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12f9c:	6c3b      	ldr	r3, [r7, #64]
   12f9e:	647b      	str	r3, [r7, #68]
   12fa0:	e001      	b.n	12fa6 <_ZN9Krabi2015C2Eb+0x2a6>
   12fa2:	6c3b      	ldr	r3, [r7, #64]
   12fa4:	647b      	str	r3, [r7, #68]
   12fa6:	6c7b      	ldr	r3, [r7, #68]
   12fa8:	f8c7 3518 	str.w	r3, [r7, #1304]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   12fac:	f507 7206 	add.w	r2, r7, #536	; 0x218
   12fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12fb4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12fb8:	781b      	ldrb	r3, [r3, #0]
   12fba:	4610      	mov	r0, r2
   12fbc:	f8df 1a04 	ldr.w	r1, [pc, #2564]	; 139c4 <_ZN9Krabi2015C2Eb+0xcc4>
   12fc0:	f8df 2a04 	ldr.w	r2, [pc, #2564]	; 139c8 <_ZN9Krabi2015C2Eb+0xcc8>
   12fc4:	f7fb fcd6 	bl	e974 <_ZN8PositionC1Effb>
   12fc8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12fcc:	64bb      	str	r3, [r7, #72]
   12fce:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12fd2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12fd6:	f8c7 3510 	str.w	r3, [r7, #1296]
   12fda:	f04f 0034 	mov.w	r0, #52	; 0x34
   12fde:	f7fb fb63 	bl	e6a8 <_Znwj>
   12fe2:	4603      	mov	r3, r0
   12fe4:	64fb      	str	r3, [r7, #76]
   12fe6:	6cfb      	ldr	r3, [r7, #76]
   12fe8:	2b00      	cmp	r3, #0
   12fea:	d017      	beq.n	1301c <_ZN9Krabi2015C2Eb+0x31c>
   12fec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12ff0:	681b      	ldr	r3, [r3, #0]
   12ff2:	6b5b      	ldr	r3, [r3, #52]
   12ff4:	f507 7206 	add.w	r2, r7, #536	; 0x218
   12ff8:	9300      	str	r3, [sp, #0]
   12ffa:	f04f 0311 	mov.w	r3, #17	; 0x11
   12ffe:	9301      	str	r3, [sp, #4]
   13000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13004:	9302      	str	r3, [sp, #8]
   13006:	f04f 0300 	mov.w	r3, #0	; 0x0
   1300a:	9303      	str	r3, [sp, #12]
   1300c:	6cf8      	ldr	r0, [r7, #76]
   1300e:	ca06      	ldmia	r2!, {r1, r2}
   13010:	6cbb      	ldr	r3, [r7, #72]
   13012:	f7fd fb4d 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13016:	6cfb      	ldr	r3, [r7, #76]
   13018:	653b      	str	r3, [r7, #80]
   1301a:	e001      	b.n	13020 <_ZN9Krabi2015C2Eb+0x320>
   1301c:	6cfb      	ldr	r3, [r7, #76]
   1301e:	653b      	str	r3, [r7, #80]
   13020:	6d3b      	ldr	r3, [r7, #80]
   13022:	f8c7 351c 	str.w	r3, [r7, #1308]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13026:	f507 7208 	add.w	r2, r7, #544	; 0x220
   1302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1302e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13032:	781b      	ldrb	r3, [r3, #0]
   13034:	4610      	mov	r0, r2
   13036:	f8df 1984 	ldr.w	r1, [pc, #2436]	; 139bc <_ZN9Krabi2015C2Eb+0xcbc>
   1303a:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 139c8 <_ZN9Krabi2015C2Eb+0xcc8>
   1303e:	f7fb fc99 	bl	e974 <_ZN8PositionC1Effb>
   13042:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13046:	657b      	str	r3, [r7, #84]
   13048:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1304c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13050:	f8c7 3510 	str.w	r3, [r7, #1296]
   13054:	f04f 0034 	mov.w	r0, #52	; 0x34
   13058:	f7fb fb26 	bl	e6a8 <_Znwj>
   1305c:	4603      	mov	r3, r0
   1305e:	65bb      	str	r3, [r7, #88]
   13060:	6dbb      	ldr	r3, [r7, #88]
   13062:	2b00      	cmp	r3, #0
   13064:	d017      	beq.n	13096 <_ZN9Krabi2015C2Eb+0x396>
   13066:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1306a:	681b      	ldr	r3, [r3, #0]
   1306c:	6b5b      	ldr	r3, [r3, #52]
   1306e:	f507 7208 	add.w	r2, r7, #544	; 0x220
   13072:	9300      	str	r3, [sp, #0]
   13074:	f04f 0300 	mov.w	r3, #0	; 0x0
   13078:	9301      	str	r3, [sp, #4]
   1307a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1307e:	9302      	str	r3, [sp, #8]
   13080:	f04f 0300 	mov.w	r3, #0	; 0x0
   13084:	9303      	str	r3, [sp, #12]
   13086:	6db8      	ldr	r0, [r7, #88]
   13088:	ca06      	ldmia	r2!, {r1, r2}
   1308a:	6d7b      	ldr	r3, [r7, #84]
   1308c:	f7fd fb10 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13090:	6dbb      	ldr	r3, [r7, #88]
   13092:	65fb      	str	r3, [r7, #92]
   13094:	e001      	b.n	1309a <_ZN9Krabi2015C2Eb+0x39a>
   13096:	6dbb      	ldr	r3, [r7, #88]
   13098:	65fb      	str	r3, [r7, #92]
   1309a:	6dfb      	ldr	r3, [r7, #92]
   1309c:	f8c7 3520 	str.w	r3, [r7, #1312]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   130a0:	f507 720a 	add.w	r2, r7, #552	; 0x228
   130a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   130a8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   130ac:	781b      	ldrb	r3, [r3, #0]
   130ae:	4610      	mov	r0, r2
   130b0:	f8df 1918 	ldr.w	r1, [pc, #2328]	; 139cc <_ZN9Krabi2015C2Eb+0xccc>
   130b4:	f8df 2910 	ldr.w	r2, [pc, #2320]	; 139c8 <_ZN9Krabi2015C2Eb+0xcc8>
   130b8:	f7fb fc5c 	bl	e974 <_ZN8PositionC1Effb>
   130bc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   130c0:	663b      	str	r3, [r7, #96]
   130c2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   130c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   130ca:	f8c7 3510 	str.w	r3, [r7, #1296]
   130ce:	f04f 0034 	mov.w	r0, #52	; 0x34
   130d2:	f7fb fae9 	bl	e6a8 <_Znwj>
   130d6:	4603      	mov	r3, r0
   130d8:	667b      	str	r3, [r7, #100]
   130da:	6e7b      	ldr	r3, [r7, #100]
   130dc:	2b00      	cmp	r3, #0
   130de:	d017      	beq.n	13110 <_ZN9Krabi2015C2Eb+0x410>
   130e0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   130e4:	681b      	ldr	r3, [r3, #0]
   130e6:	6b5b      	ldr	r3, [r3, #52]
   130e8:	f507 720a 	add.w	r2, r7, #552	; 0x228
   130ec:	9300      	str	r3, [sp, #0]
   130ee:	f04f 0311 	mov.w	r3, #17	; 0x11
   130f2:	9301      	str	r3, [sp, #4]
   130f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130f8:	9302      	str	r3, [sp, #8]
   130fa:	f04f 0300 	mov.w	r3, #0	; 0x0
   130fe:	9303      	str	r3, [sp, #12]
   13100:	6e78      	ldr	r0, [r7, #100]
   13102:	ca06      	ldmia	r2!, {r1, r2}
   13104:	6e3b      	ldr	r3, [r7, #96]
   13106:	f7fd fad3 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1310a:	6e7b      	ldr	r3, [r7, #100]
   1310c:	66bb      	str	r3, [r7, #104]
   1310e:	e001      	b.n	13114 <_ZN9Krabi2015C2Eb+0x414>
   13110:	6e7b      	ldr	r3, [r7, #100]
   13112:	66bb      	str	r3, [r7, #104]
   13114:	6ebb      	ldr	r3, [r7, #104]
   13116:	f8c7 3524 	str.w	r3, [r7, #1316]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1311a:	f507 720c 	add.w	r2, r7, #560	; 0x230
   1311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13122:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13126:	781b      	ldrb	r3, [r3, #0]
   13128:	4610      	mov	r0, r2
   1312a:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 139d0 <_ZN9Krabi2015C2Eb+0xcd0>
   1312e:	f8df 2898 	ldr.w	r2, [pc, #2200]	; 139c8 <_ZN9Krabi2015C2Eb+0xcc8>
   13132:	f7fb fc1f 	bl	e974 <_ZN8PositionC1Effb>
   13136:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1313a:	66fb      	str	r3, [r7, #108]
   1313c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13140:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13144:	f8c7 3510 	str.w	r3, [r7, #1296]
   13148:	f04f 0034 	mov.w	r0, #52	; 0x34
   1314c:	f7fb faac 	bl	e6a8 <_Znwj>
   13150:	4603      	mov	r3, r0
   13152:	673b      	str	r3, [r7, #112]
   13154:	6f3b      	ldr	r3, [r7, #112]
   13156:	2b00      	cmp	r3, #0
   13158:	d017      	beq.n	1318a <_ZN9Krabi2015C2Eb+0x48a>
   1315a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1315e:	681b      	ldr	r3, [r3, #0]
   13160:	6b5b      	ldr	r3, [r3, #52]
   13162:	f507 720c 	add.w	r2, r7, #560	; 0x230
   13166:	9300      	str	r3, [sp, #0]
   13168:	f04f 0300 	mov.w	r3, #0	; 0x0
   1316c:	9301      	str	r3, [sp, #4]
   1316e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13172:	9302      	str	r3, [sp, #8]
   13174:	f04f 0300 	mov.w	r3, #0	; 0x0
   13178:	9303      	str	r3, [sp, #12]
   1317a:	6f38      	ldr	r0, [r7, #112]
   1317c:	ca06      	ldmia	r2!, {r1, r2}
   1317e:	6efb      	ldr	r3, [r7, #108]
   13180:	f7fd fa96 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13184:	6f3b      	ldr	r3, [r7, #112]
   13186:	677b      	str	r3, [r7, #116]
   13188:	e001      	b.n	1318e <_ZN9Krabi2015C2Eb+0x48e>
   1318a:	6f3b      	ldr	r3, [r7, #112]
   1318c:	677b      	str	r3, [r7, #116]
   1318e:	6f7b      	ldr	r3, [r7, #116]
   13190:	f8c7 3528 	str.w	r3, [r7, #1320]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   13194:	f507 720e 	add.w	r2, r7, #568	; 0x238
   13198:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1319c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   131a0:	781b      	ldrb	r3, [r3, #0]
   131a2:	4610      	mov	r0, r2
   131a4:	f8df 182c 	ldr.w	r1, [pc, #2092]	; 139d4 <_ZN9Krabi2015C2Eb+0xcd4>
   131a8:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 139c8 <_ZN9Krabi2015C2Eb+0xcc8>
   131ac:	f7fb fbe2 	bl	e974 <_ZN8PositionC1Effb>
   131b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   131b4:	67bb      	str	r3, [r7, #120]
   131b6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   131ba:	f103 0301 	add.w	r3, r3, #1	; 0x1
   131be:	f8c7 3510 	str.w	r3, [r7, #1296]
   131c2:	f04f 0034 	mov.w	r0, #52	; 0x34
   131c6:	f7fb fa6f 	bl	e6a8 <_Znwj>
   131ca:	4603      	mov	r3, r0
   131cc:	67fb      	str	r3, [r7, #124]
   131ce:	6ffb      	ldr	r3, [r7, #124]
   131d0:	2b00      	cmp	r3, #0
   131d2:	d018      	beq.n	13206 <_ZN9Krabi2015C2Eb+0x506>
   131d4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   131d8:	681b      	ldr	r3, [r3, #0]
   131da:	6b5b      	ldr	r3, [r3, #52]
   131dc:	f507 720e 	add.w	r2, r7, #568	; 0x238
   131e0:	9300      	str	r3, [sp, #0]
   131e2:	f04f 0311 	mov.w	r3, #17	; 0x11
   131e6:	9301      	str	r3, [sp, #4]
   131e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131ec:	9302      	str	r3, [sp, #8]
   131ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   131f2:	9303      	str	r3, [sp, #12]
   131f4:	6ff8      	ldr	r0, [r7, #124]
   131f6:	ca06      	ldmia	r2!, {r1, r2}
   131f8:	6fbb      	ldr	r3, [r7, #120]
   131fa:	f7fd fa59 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   131fe:	6ffb      	ldr	r3, [r7, #124]
   13200:	f8c7 3080 	str.w	r3, [r7, #128]
   13204:	e002      	b.n	1320c <_ZN9Krabi2015C2Eb+0x50c>
   13206:	6ffb      	ldr	r3, [r7, #124]
   13208:	f8c7 3080 	str.w	r3, [r7, #128]
   1320c:	f8d7 3080 	ldr.w	r3, [r7, #128]
   13210:	f8c7 352c 	str.w	r3, [r7, #1324]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13214:	f507 7210 	add.w	r2, r7, #576	; 0x240
   13218:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1321c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13220:	781b      	ldrb	r3, [r3, #0]
   13222:	4610      	mov	r0, r2
   13224:	f8df 17b0 	ldr.w	r1, [pc, #1968]	; 139d8 <_ZN9Krabi2015C2Eb+0xcd8>
   13228:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 139c8 <_ZN9Krabi2015C2Eb+0xcc8>
   1322c:	f7fb fba2 	bl	e974 <_ZN8PositionC1Effb>
   13230:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13234:	f8c7 3084 	str.w	r3, [r7, #132]
   13238:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1323c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13240:	f8c7 3510 	str.w	r3, [r7, #1296]
   13244:	f04f 0034 	mov.w	r0, #52	; 0x34
   13248:	f7fb fa2e 	bl	e6a8 <_Znwj>
   1324c:	4603      	mov	r3, r0
   1324e:	f8c7 3088 	str.w	r3, [r7, #136]
   13252:	f8d7 3088 	ldr.w	r3, [r7, #136]
   13256:	2b00      	cmp	r3, #0
   13258:	d01b      	beq.n	13292 <_ZN9Krabi2015C2Eb+0x592>
   1325a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1325e:	681b      	ldr	r3, [r3, #0]
   13260:	6b5b      	ldr	r3, [r3, #52]
   13262:	f507 7210 	add.w	r2, r7, #576	; 0x240
   13266:	9300      	str	r3, [sp, #0]
   13268:	f04f 0300 	mov.w	r3, #0	; 0x0
   1326c:	9301      	str	r3, [sp, #4]
   1326e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13272:	9302      	str	r3, [sp, #8]
   13274:	f04f 0300 	mov.w	r3, #0	; 0x0
   13278:	9303      	str	r3, [sp, #12]
   1327a:	f8d7 0088 	ldr.w	r0, [r7, #136]
   1327e:	ca06      	ldmia	r2!, {r1, r2}
   13280:	f8d7 3084 	ldr.w	r3, [r7, #132]
   13284:	f7fd fa14 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13288:	f8d7 3088 	ldr.w	r3, [r7, #136]
   1328c:	f8c7 308c 	str.w	r3, [r7, #140]
   13290:	e003      	b.n	1329a <_ZN9Krabi2015C2Eb+0x59a>
   13292:	f8d7 3088 	ldr.w	r3, [r7, #136]
   13296:	f8c7 308c 	str.w	r3, [r7, #140]
   1329a:	f8d7 308c 	ldr.w	r3, [r7, #140]
   1329e:	f8c7 3530 	str.w	r3, [r7, #1328]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   132a2:	f507 7212 	add.w	r2, r7, #584	; 0x248
   132a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   132aa:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   132ae:	781b      	ldrb	r3, [r3, #0]
   132b0:	4610      	mov	r0, r2
   132b2:	f8df 1704 	ldr.w	r1, [pc, #1796]	; 139b8 <_ZN9Krabi2015C2Eb+0xcb8>
   132b6:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 139dc <_ZN9Krabi2015C2Eb+0xcdc>
   132ba:	f7fb fb5b 	bl	e974 <_ZN8PositionC1Effb>
   132be:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   132c2:	f8c7 3090 	str.w	r3, [r7, #144]
   132c6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   132ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
   132ce:	f8c7 3510 	str.w	r3, [r7, #1296]
   132d2:	f04f 0034 	mov.w	r0, #52	; 0x34
   132d6:	f7fb f9e7 	bl	e6a8 <_Znwj>
   132da:	4603      	mov	r3, r0
   132dc:	f8c7 3094 	str.w	r3, [r7, #148]
   132e0:	f8d7 3094 	ldr.w	r3, [r7, #148]
   132e4:	2b00      	cmp	r3, #0
   132e6:	d01b      	beq.n	13320 <_ZN9Krabi2015C2Eb+0x620>
   132e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   132ec:	681b      	ldr	r3, [r3, #0]
   132ee:	6b5b      	ldr	r3, [r3, #52]
   132f0:	f507 7212 	add.w	r2, r7, #584	; 0x248
   132f4:	9300      	str	r3, [sp, #0]
   132f6:	f04f 0312 	mov.w	r3, #18	; 0x12
   132fa:	9301      	str	r3, [sp, #4]
   132fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13300:	9302      	str	r3, [sp, #8]
   13302:	f04f 0300 	mov.w	r3, #0	; 0x0
   13306:	9303      	str	r3, [sp, #12]
   13308:	f8d7 0094 	ldr.w	r0, [r7, #148]
   1330c:	ca06      	ldmia	r2!, {r1, r2}
   1330e:	f8d7 3090 	ldr.w	r3, [r7, #144]
   13312:	f7fd f9cd 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13316:	f8d7 3094 	ldr.w	r3, [r7, #148]
   1331a:	f8c7 3098 	str.w	r3, [r7, #152]
   1331e:	e003      	b.n	13328 <_ZN9Krabi2015C2Eb+0x628>
   13320:	f8d7 3094 	ldr.w	r3, [r7, #148]
   13324:	f8c7 3098 	str.w	r3, [r7, #152]
   13328:	f8d7 3098 	ldr.w	r3, [r7, #152]
   1332c:	f8c7 3534 	str.w	r3, [r7, #1332]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   13330:	f507 7214 	add.w	r2, r7, #592	; 0x250
   13334:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13338:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1333c:	781b      	ldrb	r3, [r3, #0]
   1333e:	4610      	mov	r0, r2
   13340:	f8df 169c 	ldr.w	r1, [pc, #1692]	; 139e0 <_ZN9Krabi2015C2Eb+0xce0>
   13344:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 139e4 <_ZN9Krabi2015C2Eb+0xce4>
   13348:	f7fb fb14 	bl	e974 <_ZN8PositionC1Effb>
   1334c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13350:	f8c7 309c 	str.w	r3, [r7, #156]
   13354:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13358:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1335c:	f8c7 3510 	str.w	r3, [r7, #1296]
   13360:	f04f 0034 	mov.w	r0, #52	; 0x34
   13364:	f7fb f9a0 	bl	e6a8 <_Znwj>
   13368:	4603      	mov	r3, r0
   1336a:	f8c7 30a0 	str.w	r3, [r7, #160]
   1336e:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   13372:	2b00      	cmp	r3, #0
   13374:	d01b      	beq.n	133ae <_ZN9Krabi2015C2Eb+0x6ae>
   13376:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1337a:	681b      	ldr	r3, [r3, #0]
   1337c:	6b5b      	ldr	r3, [r3, #52]
   1337e:	f507 7214 	add.w	r2, r7, #592	; 0x250
   13382:	9300      	str	r3, [sp, #0]
   13384:	f04f 0312 	mov.w	r3, #18	; 0x12
   13388:	9301      	str	r3, [sp, #4]
   1338a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1338e:	9302      	str	r3, [sp, #8]
   13390:	f04f 0300 	mov.w	r3, #0	; 0x0
   13394:	9303      	str	r3, [sp, #12]
   13396:	f8d7 00a0 	ldr.w	r0, [r7, #160]
   1339a:	ca06      	ldmia	r2!, {r1, r2}
   1339c:	f8d7 309c 	ldr.w	r3, [r7, #156]
   133a0:	f7fd f986 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   133a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   133a8:	f8c7 30a4 	str.w	r3, [r7, #164]
   133ac:	e003      	b.n	133b6 <_ZN9Krabi2015C2Eb+0x6b6>
   133ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   133b2:	f8c7 30a4 	str.w	r3, [r7, #164]
   133b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   133ba:	f8c7 3538 	str.w	r3, [r7, #1336]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   133be:	f507 7216 	add.w	r2, r7, #600	; 0x258
   133c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   133c6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   133ca:	781b      	ldrb	r3, [r3, #0]
   133cc:	4610      	mov	r0, r2
   133ce:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 139e8 <_ZN9Krabi2015C2Eb+0xce8>
   133d2:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 139ec <_ZN9Krabi2015C2Eb+0xcec>
   133d6:	f7fb facd 	bl	e974 <_ZN8PositionC1Effb>
   133da:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   133de:	f8c7 30a8 	str.w	r3, [r7, #168]
   133e2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   133e6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   133ea:	f8c7 3510 	str.w	r3, [r7, #1296]
   133ee:	f04f 0034 	mov.w	r0, #52	; 0x34
   133f2:	f7fb f959 	bl	e6a8 <_Znwj>
   133f6:	4603      	mov	r3, r0
   133f8:	f8c7 30ac 	str.w	r3, [r7, #172]
   133fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   13400:	2b00      	cmp	r3, #0
   13402:	d01b      	beq.n	1343c <_ZN9Krabi2015C2Eb+0x73c>
   13404:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13408:	681b      	ldr	r3, [r3, #0]
   1340a:	6b5b      	ldr	r3, [r3, #52]
   1340c:	f507 7216 	add.w	r2, r7, #600	; 0x258
   13410:	9300      	str	r3, [sp, #0]
   13412:	f04f 0312 	mov.w	r3, #18	; 0x12
   13416:	9301      	str	r3, [sp, #4]
   13418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1341c:	9302      	str	r3, [sp, #8]
   1341e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13422:	9303      	str	r3, [sp, #12]
   13424:	f8d7 00ac 	ldr.w	r0, [r7, #172]
   13428:	ca06      	ldmia	r2!, {r1, r2}
   1342a:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1342e:	f7fd f93f 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13432:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   13436:	f8c7 30b0 	str.w	r3, [r7, #176]
   1343a:	e003      	b.n	13444 <_ZN9Krabi2015C2Eb+0x744>
   1343c:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   13440:	f8c7 30b0 	str.w	r3, [r7, #176]
   13444:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   13448:	f8c7 353c 	str.w	r3, [r7, #1340]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   1344c:	f507 7218 	add.w	r2, r7, #608	; 0x260
   13450:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13454:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13458:	781b      	ldrb	r3, [r3, #0]
   1345a:	4610      	mov	r0, r2
   1345c:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 139f0 <_ZN9Krabi2015C2Eb+0xcf0>
   13460:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 139e4 <_ZN9Krabi2015C2Eb+0xce4>
   13464:	f7fb fa86 	bl	e974 <_ZN8PositionC1Effb>
   13468:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1346c:	f8c7 30b4 	str.w	r3, [r7, #180]
   13470:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13474:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13478:	f8c7 3510 	str.w	r3, [r7, #1296]
   1347c:	f04f 0034 	mov.w	r0, #52	; 0x34
   13480:	f7fb f912 	bl	e6a8 <_Znwj>
   13484:	4603      	mov	r3, r0
   13486:	f8c7 30b8 	str.w	r3, [r7, #184]
   1348a:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   1348e:	2b00      	cmp	r3, #0
   13490:	d01b      	beq.n	134ca <_ZN9Krabi2015C2Eb+0x7ca>
   13492:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13496:	681b      	ldr	r3, [r3, #0]
   13498:	6b5b      	ldr	r3, [r3, #52]
   1349a:	f507 7218 	add.w	r2, r7, #608	; 0x260
   1349e:	9300      	str	r3, [sp, #0]
   134a0:	f04f 0312 	mov.w	r3, #18	; 0x12
   134a4:	9301      	str	r3, [sp, #4]
   134a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   134aa:	9302      	str	r3, [sp, #8]
   134ac:	f04f 0300 	mov.w	r3, #0	; 0x0
   134b0:	9303      	str	r3, [sp, #12]
   134b2:	f8d7 00b8 	ldr.w	r0, [r7, #184]
   134b6:	ca06      	ldmia	r2!, {r1, r2}
   134b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   134bc:	f7fd f8f8 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   134c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   134c4:	f8c7 30bc 	str.w	r3, [r7, #188]
   134c8:	e003      	b.n	134d2 <_ZN9Krabi2015C2Eb+0x7d2>
   134ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   134ce:	f8c7 30bc 	str.w	r3, [r7, #188]
   134d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   134d6:	f8c7 3540 	str.w	r3, [r7, #1344]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   134da:	f507 721a 	add.w	r2, r7, #616	; 0x268
   134de:	f507 7300 	add.w	r3, r7, #512	; 0x200
   134e2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   134e6:	781b      	ldrb	r3, [r3, #0]
   134e8:	4610      	mov	r0, r2
   134ea:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 139f4 <_ZN9Krabi2015C2Eb+0xcf4>
   134ee:	f8df 24ec 	ldr.w	r2, [pc, #1260]	; 139dc <_ZN9Krabi2015C2Eb+0xcdc>
   134f2:	f7fb fa3f 	bl	e974 <_ZN8PositionC1Effb>
   134f6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   134fa:	f8c7 30c0 	str.w	r3, [r7, #192]
   134fe:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13502:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13506:	f8c7 3510 	str.w	r3, [r7, #1296]
   1350a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1350e:	f7fb f8cb 	bl	e6a8 <_Znwj>
   13512:	4603      	mov	r3, r0
   13514:	f8c7 30c4 	str.w	r3, [r7, #196]
   13518:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d01b      	beq.n	13558 <_ZN9Krabi2015C2Eb+0x858>
   13520:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13524:	681b      	ldr	r3, [r3, #0]
   13526:	6b5b      	ldr	r3, [r3, #52]
   13528:	f507 721a 	add.w	r2, r7, #616	; 0x268
   1352c:	9300      	str	r3, [sp, #0]
   1352e:	f04f 0312 	mov.w	r3, #18	; 0x12
   13532:	9301      	str	r3, [sp, #4]
   13534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13538:	9302      	str	r3, [sp, #8]
   1353a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1353e:	9303      	str	r3, [sp, #12]
   13540:	f8d7 00c4 	ldr.w	r0, [r7, #196]
   13544:	ca06      	ldmia	r2!, {r1, r2}
   13546:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   1354a:	f7fd f8b1 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1354e:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   13552:	f8c7 30c8 	str.w	r3, [r7, #200]
   13556:	e003      	b.n	13560 <_ZN9Krabi2015C2Eb+0x860>
   13558:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   1355c:	f8c7 30c8 	str.w	r3, [r7, #200]
   13560:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   13564:	f8c7 3544 	str.w	r3, [r7, #1348]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13568:	f507 721c 	add.w	r2, r7, #624	; 0x270
   1356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13570:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13574:	781b      	ldrb	r3, [r3, #0]
   13576:	4610      	mov	r0, r2
   13578:	f8df 147c 	ldr.w	r1, [pc, #1148]	; 139f8 <_ZN9Krabi2015C2Eb+0xcf8>
   1357c:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 139dc <_ZN9Krabi2015C2Eb+0xcdc>
   13580:	f7fb f9f8 	bl	e974 <_ZN8PositionC1Effb>
   13584:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13588:	f8c7 30cc 	str.w	r3, [r7, #204]
   1358c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13590:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13594:	f8c7 3510 	str.w	r3, [r7, #1296]
   13598:	f04f 0034 	mov.w	r0, #52	; 0x34
   1359c:	f7fb f884 	bl	e6a8 <_Znwj>
   135a0:	4603      	mov	r3, r0
   135a2:	f8c7 30d0 	str.w	r3, [r7, #208]
   135a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   135aa:	2b00      	cmp	r3, #0
   135ac:	d01b      	beq.n	135e6 <_ZN9Krabi2015C2Eb+0x8e6>
   135ae:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   135b2:	681b      	ldr	r3, [r3, #0]
   135b4:	6b5b      	ldr	r3, [r3, #52]
   135b6:	f507 721c 	add.w	r2, r7, #624	; 0x270
   135ba:	9300      	str	r3, [sp, #0]
   135bc:	f04f 0313 	mov.w	r3, #19	; 0x13
   135c0:	9301      	str	r3, [sp, #4]
   135c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   135c6:	9302      	str	r3, [sp, #8]
   135c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   135cc:	9303      	str	r3, [sp, #12]
   135ce:	f8d7 00d0 	ldr.w	r0, [r7, #208]
   135d2:	ca06      	ldmia	r2!, {r1, r2}
   135d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   135d8:	f7fd f86a 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   135dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   135e0:	f8c7 30d4 	str.w	r3, [r7, #212]
   135e4:	e003      	b.n	135ee <_ZN9Krabi2015C2Eb+0x8ee>
   135e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   135ea:	f8c7 30d4 	str.w	r3, [r7, #212]
   135ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   135f2:	f8c7 3548 	str.w	r3, [r7, #1352]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   135f6:	f507 721e 	add.w	r2, r7, #632	; 0x278
   135fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
   135fe:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13602:	781b      	ldrb	r3, [r3, #0]
   13604:	4610      	mov	r0, r2
   13606:	49fc      	ldr	r1, [pc, #1008]	(139f8 <_ZN9Krabi2015C2Eb+0xcf8>)
   13608:	4afc      	ldr	r2, [pc, #1008]	(139fc <_ZN9Krabi2015C2Eb+0xcfc>)
   1360a:	f7fb f9b3 	bl	e974 <_ZN8PositionC1Effb>
   1360e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13612:	f8c7 30d8 	str.w	r3, [r7, #216]
   13616:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1361a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1361e:	f8c7 3510 	str.w	r3, [r7, #1296]
   13622:	f04f 0034 	mov.w	r0, #52	; 0x34
   13626:	f7fb f83f 	bl	e6a8 <_Znwj>
   1362a:	4603      	mov	r3, r0
   1362c:	f8c7 30dc 	str.w	r3, [r7, #220]
   13630:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   13634:	2b00      	cmp	r3, #0
   13636:	d01b      	beq.n	13670 <_ZN9Krabi2015C2Eb+0x970>
   13638:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1363c:	681b      	ldr	r3, [r3, #0]
   1363e:	6b5b      	ldr	r3, [r3, #52]
   13640:	f507 721e 	add.w	r2, r7, #632	; 0x278
   13644:	9300      	str	r3, [sp, #0]
   13646:	f04f 0313 	mov.w	r3, #19	; 0x13
   1364a:	9301      	str	r3, [sp, #4]
   1364c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13650:	9302      	str	r3, [sp, #8]
   13652:	f04f 0300 	mov.w	r3, #0	; 0x0
   13656:	9303      	str	r3, [sp, #12]
   13658:	f8d7 00dc 	ldr.w	r0, [r7, #220]
   1365c:	ca06      	ldmia	r2!, {r1, r2}
   1365e:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   13662:	f7fd f825 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13666:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   1366a:	f8c7 30e0 	str.w	r3, [r7, #224]
   1366e:	e003      	b.n	13678 <_ZN9Krabi2015C2Eb+0x978>
   13670:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   13674:	f8c7 30e0 	str.w	r3, [r7, #224]
   13678:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   1367c:	f8c7 354c 	str.w	r3, [r7, #1356]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13680:	f507 7220 	add.w	r2, r7, #640	; 0x280
   13684:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13688:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1368c:	781b      	ldrb	r3, [r3, #0]
   1368e:	4610      	mov	r0, r2
   13690:	49d9      	ldr	r1, [pc, #868]	(139f8 <_ZN9Krabi2015C2Eb+0xcf8>)
   13692:	4adb      	ldr	r2, [pc, #876]	(13a00 <_ZN9Krabi2015C2Eb+0xd00>)
   13694:	f7fb f96e 	bl	e974 <_ZN8PositionC1Effb>
   13698:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1369c:	f8c7 30e4 	str.w	r3, [r7, #228]
   136a0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   136a4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   136a8:	f8c7 3510 	str.w	r3, [r7, #1296]
   136ac:	f04f 0034 	mov.w	r0, #52	; 0x34
   136b0:	f7fa fffa 	bl	e6a8 <_Znwj>
   136b4:	4603      	mov	r3, r0
   136b6:	f8c7 30e8 	str.w	r3, [r7, #232]
   136ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   136be:	2b00      	cmp	r3, #0
   136c0:	d01b      	beq.n	136fa <_ZN9Krabi2015C2Eb+0x9fa>
   136c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   136c6:	681b      	ldr	r3, [r3, #0]
   136c8:	6b5b      	ldr	r3, [r3, #52]
   136ca:	f507 7220 	add.w	r2, r7, #640	; 0x280
   136ce:	9300      	str	r3, [sp, #0]
   136d0:	f04f 0313 	mov.w	r3, #19	; 0x13
   136d4:	9301      	str	r3, [sp, #4]
   136d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136da:	9302      	str	r3, [sp, #8]
   136dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   136e0:	9303      	str	r3, [sp, #12]
   136e2:	f8d7 00e8 	ldr.w	r0, [r7, #232]
   136e6:	ca06      	ldmia	r2!, {r1, r2}
   136e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   136ec:	f7fc ffe0 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   136f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   136f4:	f8c7 30ec 	str.w	r3, [r7, #236]
   136f8:	e003      	b.n	13702 <_ZN9Krabi2015C2Eb+0xa02>
   136fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   136fe:	f8c7 30ec 	str.w	r3, [r7, #236]
   13702:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   13706:	f8c7 3550 	str.w	r3, [r7, #1360]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1370a:	f507 7222 	add.w	r2, r7, #648	; 0x288
   1370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13712:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13716:	781b      	ldrb	r3, [r3, #0]
   13718:	4610      	mov	r0, r2
   1371a:	49ba      	ldr	r1, [pc, #744]	(13a04 <_ZN9Krabi2015C2Eb+0xd04>)
   1371c:	4aba      	ldr	r2, [pc, #744]	(13a08 <_ZN9Krabi2015C2Eb+0xd08>)
   1371e:	f7fb f929 	bl	e974 <_ZN8PositionC1Effb>
   13722:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13726:	f8c7 30f0 	str.w	r3, [r7, #240]
   1372a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1372e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13732:	f8c7 3510 	str.w	r3, [r7, #1296]
   13736:	f04f 0034 	mov.w	r0, #52	; 0x34
   1373a:	f7fa ffb5 	bl	e6a8 <_Znwj>
   1373e:	4603      	mov	r3, r0
   13740:	f8c7 30f4 	str.w	r3, [r7, #244]
   13744:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13748:	2b00      	cmp	r3, #0
   1374a:	d01b      	beq.n	13784 <_ZN9Krabi2015C2Eb+0xa84>
   1374c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13750:	681b      	ldr	r3, [r3, #0]
   13752:	6b5b      	ldr	r3, [r3, #52]
   13754:	f507 7222 	add.w	r2, r7, #648	; 0x288
   13758:	9300      	str	r3, [sp, #0]
   1375a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1375e:	9301      	str	r3, [sp, #4]
   13760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13764:	9302      	str	r3, [sp, #8]
   13766:	f04f 0300 	mov.w	r3, #0	; 0x0
   1376a:	9303      	str	r3, [sp, #12]
   1376c:	f8d7 00f4 	ldr.w	r0, [r7, #244]
   13770:	ca06      	ldmia	r2!, {r1, r2}
   13772:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   13776:	f7fc ff9b 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   1377e:	f8c7 30f8 	str.w	r3, [r7, #248]
   13782:	e003      	b.n	1378c <_ZN9Krabi2015C2Eb+0xa8c>
   13784:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13788:	f8c7 30f8 	str.w	r3, [r7, #248]
   1378c:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   13790:	f8c7 3554 	str.w	r3, [r7, #1364]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13794:	f507 7224 	add.w	r2, r7, #656	; 0x290
   13798:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1379c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   137a0:	781b      	ldrb	r3, [r3, #0]
   137a2:	4610      	mov	r0, r2
   137a4:	4997      	ldr	r1, [pc, #604]	(13a04 <_ZN9Krabi2015C2Eb+0xd04>)
   137a6:	4a96      	ldr	r2, [pc, #600]	(13a00 <_ZN9Krabi2015C2Eb+0xd00>)
   137a8:	f7fb f8e4 	bl	e974 <_ZN8PositionC1Effb>
   137ac:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   137b0:	f8c7 30fc 	str.w	r3, [r7, #252]
   137b4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   137b8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   137bc:	f8c7 3510 	str.w	r3, [r7, #1296]
   137c0:	f04f 0034 	mov.w	r0, #52	; 0x34
   137c4:	f7fa ff70 	bl	e6a8 <_Znwj>
   137c8:	4603      	mov	r3, r0
   137ca:	f8c7 3100 	str.w	r3, [r7, #256]
   137ce:	f8d7 3100 	ldr.w	r3, [r7, #256]
   137d2:	2b00      	cmp	r3, #0
   137d4:	d01b      	beq.n	1380e <_ZN9Krabi2015C2Eb+0xb0e>
   137d6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   137da:	681b      	ldr	r3, [r3, #0]
   137dc:	6b5b      	ldr	r3, [r3, #52]
   137de:	f507 7224 	add.w	r2, r7, #656	; 0x290
   137e2:	9300      	str	r3, [sp, #0]
   137e4:	f04f 0313 	mov.w	r3, #19	; 0x13
   137e8:	9301      	str	r3, [sp, #4]
   137ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   137ee:	9302      	str	r3, [sp, #8]
   137f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   137f4:	9303      	str	r3, [sp, #12]
   137f6:	f8d7 0100 	ldr.w	r0, [r7, #256]
   137fa:	ca06      	ldmia	r2!, {r1, r2}
   137fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   13800:	f7fc ff56 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13804:	f8d7 3100 	ldr.w	r3, [r7, #256]
   13808:	f8c7 3104 	str.w	r3, [r7, #260]
   1380c:	e003      	b.n	13816 <_ZN9Krabi2015C2Eb+0xb16>
   1380e:	f8d7 3100 	ldr.w	r3, [r7, #256]
   13812:	f8c7 3104 	str.w	r3, [r7, #260]
   13816:	f8d7 3104 	ldr.w	r3, [r7, #260]
   1381a:	f8c7 3558 	str.w	r3, [r7, #1368]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1381e:	f507 7226 	add.w	r2, r7, #664	; 0x298
   13822:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13826:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1382a:	781b      	ldrb	r3, [r3, #0]
   1382c:	4610      	mov	r0, r2
   1382e:	4977      	ldr	r1, [pc, #476]	(13a0c <_ZN9Krabi2015C2Eb+0xd0c>)
   13830:	4a77      	ldr	r2, [pc, #476]	(13a10 <_ZN9Krabi2015C2Eb+0xd10>)
   13832:	f7fb f89f 	bl	e974 <_ZN8PositionC1Effb>
   13836:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1383a:	f8c7 3108 	str.w	r3, [r7, #264]
   1383e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13842:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13846:	f8c7 3510 	str.w	r3, [r7, #1296]
   1384a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1384e:	f7fa ff2b 	bl	e6a8 <_Znwj>
   13852:	4603      	mov	r3, r0
   13854:	f8c7 310c 	str.w	r3, [r7, #268]
   13858:	f8d7 310c 	ldr.w	r3, [r7, #268]
   1385c:	2b00      	cmp	r3, #0
   1385e:	d01b      	beq.n	13898 <_ZN9Krabi2015C2Eb+0xb98>
   13860:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13864:	681b      	ldr	r3, [r3, #0]
   13866:	6b5b      	ldr	r3, [r3, #52]
   13868:	f507 7226 	add.w	r2, r7, #664	; 0x298
   1386c:	9300      	str	r3, [sp, #0]
   1386e:	f04f 0313 	mov.w	r3, #19	; 0x13
   13872:	9301      	str	r3, [sp, #4]
   13874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13878:	9302      	str	r3, [sp, #8]
   1387a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1387e:	9303      	str	r3, [sp, #12]
   13880:	f8d7 010c 	ldr.w	r0, [r7, #268]
   13884:	ca06      	ldmia	r2!, {r1, r2}
   13886:	f8d7 3108 	ldr.w	r3, [r7, #264]
   1388a:	f7fc ff11 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1388e:	f8d7 310c 	ldr.w	r3, [r7, #268]
   13892:	f8c7 3110 	str.w	r3, [r7, #272]
   13896:	e003      	b.n	138a0 <_ZN9Krabi2015C2Eb+0xba0>
   13898:	f8d7 310c 	ldr.w	r3, [r7, #268]
   1389c:	f8c7 3110 	str.w	r3, [r7, #272]
   138a0:	f8d7 3110 	ldr.w	r3, [r7, #272]
   138a4:	f8c7 355c 	str.w	r3, [r7, #1372]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   138a8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   138ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
   138b0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   138b4:	781b      	ldrb	r3, [r3, #0]
   138b6:	4610      	mov	r0, r2
   138b8:	4956      	ldr	r1, [pc, #344]	(13a14 <_ZN9Krabi2015C2Eb+0xd14>)
   138ba:	4a57      	ldr	r2, [pc, #348]	(13a18 <_ZN9Krabi2015C2Eb+0xd18>)
   138bc:	f7fb f85a 	bl	e974 <_ZN8PositionC1Effb>
   138c0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   138c4:	f8c7 3114 	str.w	r3, [r7, #276]
   138c8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   138cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   138d0:	f8c7 3510 	str.w	r3, [r7, #1296]
   138d4:	f04f 0034 	mov.w	r0, #52	; 0x34
   138d8:	f7fa fee6 	bl	e6a8 <_Znwj>
   138dc:	4603      	mov	r3, r0
   138de:	f8c7 3118 	str.w	r3, [r7, #280]
   138e2:	f8d7 3118 	ldr.w	r3, [r7, #280]
   138e6:	2b00      	cmp	r3, #0
   138e8:	d01b      	beq.n	13922 <_ZN9Krabi2015C2Eb+0xc22>
   138ea:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   138ee:	681b      	ldr	r3, [r3, #0]
   138f0:	6b5b      	ldr	r3, [r3, #52]
   138f2:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   138f6:	9300      	str	r3, [sp, #0]
   138f8:	f04f 0313 	mov.w	r3, #19	; 0x13
   138fc:	9301      	str	r3, [sp, #4]
   138fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13902:	9302      	str	r3, [sp, #8]
   13904:	f04f 0300 	mov.w	r3, #0	; 0x0
   13908:	9303      	str	r3, [sp, #12]
   1390a:	f8d7 0118 	ldr.w	r0, [r7, #280]
   1390e:	ca06      	ldmia	r2!, {r1, r2}
   13910:	f8d7 3114 	ldr.w	r3, [r7, #276]
   13914:	f7fc fecc 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13918:	f8d7 3118 	ldr.w	r3, [r7, #280]
   1391c:	f8c7 311c 	str.w	r3, [r7, #284]
   13920:	e003      	b.n	1392a <_ZN9Krabi2015C2Eb+0xc2a>
   13922:	f8d7 3118 	ldr.w	r3, [r7, #280]
   13926:	f8c7 311c 	str.w	r3, [r7, #284]
   1392a:	f8d7 311c 	ldr.w	r3, [r7, #284]
   1392e:	f8c7 3560 	str.w	r3, [r7, #1376]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13932:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   13936:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1393a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1393e:	781b      	ldrb	r3, [r3, #0]
   13940:	4610      	mov	r0, r2
   13942:	4936      	ldr	r1, [pc, #216]	(13a1c <_ZN9Krabi2015C2Eb+0xd1c>)
   13944:	4a36      	ldr	r2, [pc, #216]	(13a20 <_ZN9Krabi2015C2Eb+0xd20>)
   13946:	f7fb f815 	bl	e974 <_ZN8PositionC1Effb>
   1394a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1394e:	f8c7 3120 	str.w	r3, [r7, #288]
   13952:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13956:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1395a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1395e:	f04f 0034 	mov.w	r0, #52	; 0x34
   13962:	f7fa fea1 	bl	e6a8 <_Znwj>
   13966:	4603      	mov	r3, r0
   13968:	f8c7 3124 	str.w	r3, [r7, #292]
   1396c:	f8d7 3124 	ldr.w	r3, [r7, #292]
   13970:	2b00      	cmp	r3, #0
   13972:	d057      	beq.n	13a24 <_ZN9Krabi2015C2Eb+0xd24>
   13974:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13978:	681b      	ldr	r3, [r3, #0]
   1397a:	6b5b      	ldr	r3, [r3, #52]
   1397c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   13980:	9300      	str	r3, [sp, #0]
   13982:	f04f 0313 	mov.w	r3, #19	; 0x13
   13986:	9301      	str	r3, [sp, #4]
   13988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1398c:	9302      	str	r3, [sp, #8]
   1398e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13992:	9303      	str	r3, [sp, #12]
   13994:	f8d7 0124 	ldr.w	r0, [r7, #292]
   13998:	ca06      	ldmia	r2!, {r1, r2}
   1399a:	f8d7 3120 	ldr.w	r3, [r7, #288]
   1399e:	f7fc fe87 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   139a2:	f8d7 3124 	ldr.w	r3, [r7, #292]
   139a6:	f8c7 3128 	str.w	r3, [r7, #296]
   139aa:	e03f      	b.n	13a2c <_ZN9Krabi2015C2Eb+0xd2c>
   139ac:	00021fb0 	.word	0x00021fb0
   139b0:	00000000 	.word	0x00000000
   139b4:	41f00000 	.word	0x41f00000
   139b8:	437a0000 	.word	0x437a0000
   139bc:	447a0000 	.word	0x447a0000
   139c0:	442f0000 	.word	0x442f0000
   139c4:	44510000 	.word	0x44510000
   139c8:	44de8000 	.word	0x44de8000
   139cc:	436c0000 	.word	0x436c0000
   139d0:	43c80000 	.word	0x43c80000
   139d4:	451c4000 	.word	0x451c4000
   139d8:	450fc000 	.word	0x450fc000
   139dc:	44dac000 	.word	0x44dac000
   139e0:	44638000 	.word	0x44638000
   139e4:	444f8000 	.word	0x444f8000
   139e8:	44bb8000 	.word	0x44bb8000
   139ec:	44ce4000 	.word	0x44ce4000
   139f0:	4502a000 	.word	0x4502a000
   139f4:	452be000 	.word	0x452be000
   139f8:	42b40000 	.word	0x42b40000
   139fc:	44e74000 	.word	0x44e74000
   13a00:	43480000 	.word	0x43480000
   13a04:	44548000 	.word	0x44548000
   13a08:	42c80000 	.word	0x42c80000
   13a0c:	44598000 	.word	0x44598000
   13a10:	44a96000 	.word	0x44a96000
   13a14:	44898000 	.word	0x44898000
   13a18:	44dd4000 	.word	0x44dd4000
   13a1c:	44a28000 	.word	0x44a28000
   13a20:	44af0000 	.word	0x44af0000
   13a24:	f8d7 3124 	ldr.w	r3, [r7, #292]
   13a28:	f8c7 3128 	str.w	r3, [r7, #296]
   13a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]
   13a30:	f8c7 3564 	str.w	r3, [r7, #1380]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   13a34:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   13a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13a3c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13a40:	781b      	ldrb	r3, [r3, #0]
   13a42:	4610      	mov	r0, r2
   13a44:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 14394 <_ZN9Krabi2015C2Eb+0x1694>
   13a48:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 14398 <_ZN9Krabi2015C2Eb+0x1698>
   13a4c:	f7fa ff92 	bl	e974 <_ZN8PositionC1Effb>
   13a50:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13a54:	f8c7 312c 	str.w	r3, [r7, #300]
   13a58:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13a5c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13a60:	f8c7 3510 	str.w	r3, [r7, #1296]
   13a64:	f04f 0034 	mov.w	r0, #52	; 0x34
   13a68:	f7fa fe1e 	bl	e6a8 <_Znwj>
   13a6c:	4603      	mov	r3, r0
   13a6e:	f8c7 3130 	str.w	r3, [r7, #304]
   13a72:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13a76:	2b00      	cmp	r3, #0
   13a78:	d01b      	beq.n	13ab2 <_ZN9Krabi2015C2Eb+0xdb2>
   13a7a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13a7e:	681b      	ldr	r3, [r3, #0]
   13a80:	6b5b      	ldr	r3, [r3, #52]
   13a82:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   13a86:	9300      	str	r3, [sp, #0]
   13a88:	f04f 0314 	mov.w	r3, #20	; 0x14
   13a8c:	9301      	str	r3, [sp, #4]
   13a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a92:	9302      	str	r3, [sp, #8]
   13a94:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a98:	9303      	str	r3, [sp, #12]
   13a9a:	f8d7 0130 	ldr.w	r0, [r7, #304]
   13a9e:	ca06      	ldmia	r2!, {r1, r2}
   13aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]
   13aa4:	f7fc fe04 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13aa8:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13aac:	f8c7 3134 	str.w	r3, [r7, #308]
   13ab0:	e003      	b.n	13aba <_ZN9Krabi2015C2Eb+0xdba>
   13ab2:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13ab6:	f8c7 3134 	str.w	r3, [r7, #308]
   13aba:	f8d7 3134 	ldr.w	r3, [r7, #308]
   13abe:	f8c7 3568 	str.w	r3, [r7, #1384]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   13ac2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   13ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13aca:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13ace:	781b      	ldrb	r3, [r3, #0]
   13ad0:	4610      	mov	r0, r2
   13ad2:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 1439c <_ZN9Krabi2015C2Eb+0x169c>
   13ad6:	f8df 28c0 	ldr.w	r2, [pc, #2240]	; 14398 <_ZN9Krabi2015C2Eb+0x1698>
   13ada:	f7fa ff4b 	bl	e974 <_ZN8PositionC1Effb>
   13ade:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ae2:	f8c7 3138 	str.w	r3, [r7, #312]
   13ae6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13aea:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13aee:	f8c7 3510 	str.w	r3, [r7, #1296]
   13af2:	f04f 0034 	mov.w	r0, #52	; 0x34
   13af6:	f7fa fdd7 	bl	e6a8 <_Znwj>
   13afa:	4603      	mov	r3, r0
   13afc:	f8c7 313c 	str.w	r3, [r7, #316]
   13b00:	f8d7 313c 	ldr.w	r3, [r7, #316]
   13b04:	2b00      	cmp	r3, #0
   13b06:	d01b      	beq.n	13b40 <_ZN9Krabi2015C2Eb+0xe40>
   13b08:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13b0c:	681b      	ldr	r3, [r3, #0]
   13b0e:	6b5b      	ldr	r3, [r3, #52]
   13b10:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   13b14:	9300      	str	r3, [sp, #0]
   13b16:	f04f 0314 	mov.w	r3, #20	; 0x14
   13b1a:	9301      	str	r3, [sp, #4]
   13b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b20:	9302      	str	r3, [sp, #8]
   13b22:	f04f 0300 	mov.w	r3, #0	; 0x0
   13b26:	9303      	str	r3, [sp, #12]
   13b28:	f8d7 013c 	ldr.w	r0, [r7, #316]
   13b2c:	ca06      	ldmia	r2!, {r1, r2}
   13b2e:	f8d7 3138 	ldr.w	r3, [r7, #312]
   13b32:	f7fc fdbd 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13b36:	f8d7 313c 	ldr.w	r3, [r7, #316]
   13b3a:	f8c7 3140 	str.w	r3, [r7, #320]
   13b3e:	e003      	b.n	13b48 <_ZN9Krabi2015C2Eb+0xe48>
   13b40:	f8d7 313c 	ldr.w	r3, [r7, #316]
   13b44:	f8c7 3140 	str.w	r3, [r7, #320]
   13b48:	f8d7 3140 	ldr.w	r3, [r7, #320]
   13b4c:	f8c7 356c 	str.w	r3, [r7, #1388]
    Etape* etape23 = new Etape(Position(1230, 760, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   13b50:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   13b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13b58:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13b5c:	781b      	ldrb	r3, [r3, #0]
   13b5e:	4610      	mov	r0, r2
   13b60:	f8df 183c 	ldr.w	r1, [pc, #2108]	; 143a0 <_ZN9Krabi2015C2Eb+0x16a0>
   13b64:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 143a4 <_ZN9Krabi2015C2Eb+0x16a4>
   13b68:	f7fa ff04 	bl	e974 <_ZN8PositionC1Effb>
   13b6c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13b70:	f8c7 3144 	str.w	r3, [r7, #324]
   13b74:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13b78:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13b7c:	f8c7 3510 	str.w	r3, [r7, #1296]
   13b80:	f04f 0034 	mov.w	r0, #52	; 0x34
   13b84:	f7fa fd90 	bl	e6a8 <_Znwj>
   13b88:	4603      	mov	r3, r0
   13b8a:	f8c7 3148 	str.w	r3, [r7, #328]
   13b8e:	f8d7 3148 	ldr.w	r3, [r7, #328]
   13b92:	2b00      	cmp	r3, #0
   13b94:	d01b      	beq.n	13bce <_ZN9Krabi2015C2Eb+0xece>
   13b96:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13b9a:	681b      	ldr	r3, [r3, #0]
   13b9c:	6b5b      	ldr	r3, [r3, #52]
   13b9e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   13ba2:	9300      	str	r3, [sp, #0]
   13ba4:	f04f 0315 	mov.w	r3, #21	; 0x15
   13ba8:	9301      	str	r3, [sp, #4]
   13baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bae:	9302      	str	r3, [sp, #8]
   13bb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   13bb4:	9303      	str	r3, [sp, #12]
   13bb6:	f8d7 0148 	ldr.w	r0, [r7, #328]
   13bba:	ca06      	ldmia	r2!, {r1, r2}
   13bbc:	f8d7 3144 	ldr.w	r3, [r7, #324]
   13bc0:	f7fc fd76 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13bc4:	f8d7 3148 	ldr.w	r3, [r7, #328]
   13bc8:	f8c7 314c 	str.w	r3, [r7, #332]
   13bcc:	e003      	b.n	13bd6 <_ZN9Krabi2015C2Eb+0xed6>
   13bce:	f8d7 3148 	ldr.w	r3, [r7, #328]
   13bd2:	f8c7 314c 	str.w	r3, [r7, #332]
   13bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]
   13bda:	f8c7 3570 	str.w	r3, [r7, #1392]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13bde:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   13be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13be6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13bea:	781b      	ldrb	r3, [r3, #0]
   13bec:	4610      	mov	r0, r2
   13bee:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 143a8 <_ZN9Krabi2015C2Eb+0x16a8>
   13bf2:	f8df 27b8 	ldr.w	r2, [pc, #1976]	; 143ac <_ZN9Krabi2015C2Eb+0x16ac>
   13bf6:	f7fa febd 	bl	e974 <_ZN8PositionC1Effb>
   13bfa:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13bfe:	f8c7 3150 	str.w	r3, [r7, #336]
   13c02:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c06:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13c0a:	f8c7 3510 	str.w	r3, [r7, #1296]
   13c0e:	f04f 0034 	mov.w	r0, #52	; 0x34
   13c12:	f7fa fd49 	bl	e6a8 <_Znwj>
   13c16:	4603      	mov	r3, r0
   13c18:	f8c7 3154 	str.w	r3, [r7, #340]
   13c1c:	f8d7 3154 	ldr.w	r3, [r7, #340]
   13c20:	2b00      	cmp	r3, #0
   13c22:	d01b      	beq.n	13c5c <_ZN9Krabi2015C2Eb+0xf5c>
   13c24:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13c28:	681b      	ldr	r3, [r3, #0]
   13c2a:	6b5b      	ldr	r3, [r3, #52]
   13c2c:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   13c30:	9300      	str	r3, [sp, #0]
   13c32:	f04f 0300 	mov.w	r3, #0	; 0x0
   13c36:	9301      	str	r3, [sp, #4]
   13c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c3c:	9302      	str	r3, [sp, #8]
   13c3e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13c42:	9303      	str	r3, [sp, #12]
   13c44:	f8d7 0154 	ldr.w	r0, [r7, #340]
   13c48:	ca06      	ldmia	r2!, {r1, r2}
   13c4a:	f8d7 3150 	ldr.w	r3, [r7, #336]
   13c4e:	f7fc fd2f 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13c52:	f8d7 3154 	ldr.w	r3, [r7, #340]
   13c56:	f8c7 3158 	str.w	r3, [r7, #344]
   13c5a:	e003      	b.n	13c64 <_ZN9Krabi2015C2Eb+0xf64>
   13c5c:	f8d7 3154 	ldr.w	r3, [r7, #340]
   13c60:	f8c7 3158 	str.w	r3, [r7, #344]
   13c64:	f8d7 3158 	ldr.w	r3, [r7, #344]
   13c68:	f8c7 3574 	str.w	r3, [r7, #1396]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13c6c:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   13c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13c74:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13c78:	781b      	ldrb	r3, [r3, #0]
   13c7a:	4610      	mov	r0, r2
   13c7c:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 143b0 <_ZN9Krabi2015C2Eb+0x16b0>
   13c80:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 143ac <_ZN9Krabi2015C2Eb+0x16ac>
   13c84:	f7fa fe76 	bl	e974 <_ZN8PositionC1Effb>
   13c88:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c8c:	f8c7 315c 	str.w	r3, [r7, #348]
   13c90:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c94:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13c98:	f8c7 3510 	str.w	r3, [r7, #1296]
   13c9c:	f04f 0034 	mov.w	r0, #52	; 0x34
   13ca0:	f7fa fd02 	bl	e6a8 <_Znwj>
   13ca4:	4603      	mov	r3, r0
   13ca6:	f8c7 3160 	str.w	r3, [r7, #352]
   13caa:	f8d7 3160 	ldr.w	r3, [r7, #352]
   13cae:	2b00      	cmp	r3, #0
   13cb0:	d01b      	beq.n	13cea <_ZN9Krabi2015C2Eb+0xfea>
   13cb2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13cb6:	681b      	ldr	r3, [r3, #0]
   13cb8:	6b5b      	ldr	r3, [r3, #52]
   13cba:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   13cbe:	9300      	str	r3, [sp, #0]
   13cc0:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cc4:	9301      	str	r3, [sp, #4]
   13cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cca:	9302      	str	r3, [sp, #8]
   13ccc:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cd0:	9303      	str	r3, [sp, #12]
   13cd2:	f8d7 0160 	ldr.w	r0, [r7, #352]
   13cd6:	ca06      	ldmia	r2!, {r1, r2}
   13cd8:	f8d7 315c 	ldr.w	r3, [r7, #348]
   13cdc:	f7fc fce8 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13ce0:	f8d7 3160 	ldr.w	r3, [r7, #352]
   13ce4:	f8c7 3164 	str.w	r3, [r7, #356]
   13ce8:	e003      	b.n	13cf2 <_ZN9Krabi2015C2Eb+0xff2>
   13cea:	f8d7 3160 	ldr.w	r3, [r7, #352]
   13cee:	f8c7 3164 	str.w	r3, [r7, #356]
   13cf2:	f8d7 3164 	ldr.w	r3, [r7, #356]
   13cf6:	f8c7 3578 	str.w	r3, [r7, #1400]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13cfa:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   13cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13d02:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13d06:	781b      	ldrb	r3, [r3, #0]
   13d08:	4610      	mov	r0, r2
   13d0a:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 143b4 <_ZN9Krabi2015C2Eb+0x16b4>
   13d0e:	f8df 26a8 	ldr.w	r2, [pc, #1704]	; 143b8 <_ZN9Krabi2015C2Eb+0x16b8>
   13d12:	f7fa fe2f 	bl	e974 <_ZN8PositionC1Effb>
   13d16:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d1a:	f8c7 3168 	str.w	r3, [r7, #360]
   13d1e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d22:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13d26:	f8c7 3510 	str.w	r3, [r7, #1296]
   13d2a:	f04f 0034 	mov.w	r0, #52	; 0x34
   13d2e:	f7fa fcbb 	bl	e6a8 <_Znwj>
   13d32:	4603      	mov	r3, r0
   13d34:	f8c7 316c 	str.w	r3, [r7, #364]
   13d38:	f8d7 316c 	ldr.w	r3, [r7, #364]
   13d3c:	2b00      	cmp	r3, #0
   13d3e:	d01b      	beq.n	13d78 <_ZN9Krabi2015C2Eb+0x1078>
   13d40:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13d44:	681b      	ldr	r3, [r3, #0]
   13d46:	6b5b      	ldr	r3, [r3, #52]
   13d48:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   13d4c:	9300      	str	r3, [sp, #0]
   13d4e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13d52:	9301      	str	r3, [sp, #4]
   13d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d58:	9302      	str	r3, [sp, #8]
   13d5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   13d5e:	9303      	str	r3, [sp, #12]
   13d60:	f8d7 016c 	ldr.w	r0, [r7, #364]
   13d64:	ca06      	ldmia	r2!, {r1, r2}
   13d66:	f8d7 3168 	ldr.w	r3, [r7, #360]
   13d6a:	f7fc fca1 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13d6e:	f8d7 316c 	ldr.w	r3, [r7, #364]
   13d72:	f8c7 3170 	str.w	r3, [r7, #368]
   13d76:	e003      	b.n	13d80 <_ZN9Krabi2015C2Eb+0x1080>
   13d78:	f8d7 316c 	ldr.w	r3, [r7, #364]
   13d7c:	f8c7 3170 	str.w	r3, [r7, #368]
   13d80:	f8d7 3170 	ldr.w	r3, [r7, #368]
   13d84:	f8c7 357c 	str.w	r3, [r7, #1404]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13d88:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   13d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13d90:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13d94:	781b      	ldrb	r3, [r3, #0]
   13d96:	4610      	mov	r0, r2
   13d98:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 143bc <_ZN9Krabi2015C2Eb+0x16bc>
   13d9c:	f8df 2620 	ldr.w	r2, [pc, #1568]	; 143c0 <_ZN9Krabi2015C2Eb+0x16c0>
   13da0:	f7fa fde8 	bl	e974 <_ZN8PositionC1Effb>
   13da4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13da8:	f8c7 3174 	str.w	r3, [r7, #372]
   13dac:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13db0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13db4:	f8c7 3510 	str.w	r3, [r7, #1296]
   13db8:	f04f 0034 	mov.w	r0, #52	; 0x34
   13dbc:	f7fa fc74 	bl	e6a8 <_Znwj>
   13dc0:	4603      	mov	r3, r0
   13dc2:	f8c7 3178 	str.w	r3, [r7, #376]
   13dc6:	f8d7 3178 	ldr.w	r3, [r7, #376]
   13dca:	2b00      	cmp	r3, #0
   13dcc:	d01b      	beq.n	13e06 <_ZN9Krabi2015C2Eb+0x1106>
   13dce:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13dd2:	681b      	ldr	r3, [r3, #0]
   13dd4:	6b5b      	ldr	r3, [r3, #52]
   13dd6:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   13dda:	9300      	str	r3, [sp, #0]
   13ddc:	f04f 0300 	mov.w	r3, #0	; 0x0
   13de0:	9301      	str	r3, [sp, #4]
   13de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13de6:	9302      	str	r3, [sp, #8]
   13de8:	f04f 0300 	mov.w	r3, #0	; 0x0
   13dec:	9303      	str	r3, [sp, #12]
   13dee:	f8d7 0178 	ldr.w	r0, [r7, #376]
   13df2:	ca06      	ldmia	r2!, {r1, r2}
   13df4:	f8d7 3174 	ldr.w	r3, [r7, #372]
   13df8:	f7fc fc5a 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13dfc:	f8d7 3178 	ldr.w	r3, [r7, #376]
   13e00:	f8c7 317c 	str.w	r3, [r7, #380]
   13e04:	e003      	b.n	13e0e <_ZN9Krabi2015C2Eb+0x110e>
   13e06:	f8d7 3178 	ldr.w	r3, [r7, #376]
   13e0a:	f8c7 317c 	str.w	r3, [r7, #380]
   13e0e:	f8d7 317c 	ldr.w	r3, [r7, #380]
   13e12:	f8c7 3580 	str.w	r3, [r7, #1408]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13e16:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   13e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13e1e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13e22:	781b      	ldrb	r3, [r3, #0]
   13e24:	4610      	mov	r0, r2
   13e26:	f8df 159c 	ldr.w	r1, [pc, #1436]	; 143c4 <_ZN9Krabi2015C2Eb+0x16c4>
   13e2a:	f8df 259c 	ldr.w	r2, [pc, #1436]	; 143c8 <_ZN9Krabi2015C2Eb+0x16c8>
   13e2e:	f7fa fda1 	bl	e974 <_ZN8PositionC1Effb>
   13e32:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13e36:	f8c7 3180 	str.w	r3, [r7, #384]
   13e3a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13e3e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13e42:	f8c7 3510 	str.w	r3, [r7, #1296]
   13e46:	f04f 0034 	mov.w	r0, #52	; 0x34
   13e4a:	f7fa fc2d 	bl	e6a8 <_Znwj>
   13e4e:	4603      	mov	r3, r0
   13e50:	f8c7 3184 	str.w	r3, [r7, #388]
   13e54:	f8d7 3184 	ldr.w	r3, [r7, #388]
   13e58:	2b00      	cmp	r3, #0
   13e5a:	d01b      	beq.n	13e94 <_ZN9Krabi2015C2Eb+0x1194>
   13e5c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13e60:	681b      	ldr	r3, [r3, #0]
   13e62:	6b5b      	ldr	r3, [r3, #52]
   13e64:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   13e68:	9300      	str	r3, [sp, #0]
   13e6a:	f04f 0300 	mov.w	r3, #0	; 0x0
   13e6e:	9301      	str	r3, [sp, #4]
   13e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e74:	9302      	str	r3, [sp, #8]
   13e76:	f04f 0300 	mov.w	r3, #0	; 0x0
   13e7a:	9303      	str	r3, [sp, #12]
   13e7c:	f8d7 0184 	ldr.w	r0, [r7, #388]
   13e80:	ca06      	ldmia	r2!, {r1, r2}
   13e82:	f8d7 3180 	ldr.w	r3, [r7, #384]
   13e86:	f7fc fc13 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13e8a:	f8d7 3184 	ldr.w	r3, [r7, #388]
   13e8e:	f8c7 3188 	str.w	r3, [r7, #392]
   13e92:	e003      	b.n	13e9c <_ZN9Krabi2015C2Eb+0x119c>
   13e94:	f8d7 3184 	ldr.w	r3, [r7, #388]
   13e98:	f8c7 3188 	str.w	r3, [r7, #392]
   13e9c:	f8d7 3188 	ldr.w	r3, [r7, #392]
   13ea0:	f8c7 3584 	str.w	r3, [r7, #1412]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13ea4:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   13ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13eac:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13eb0:	781b      	ldrb	r3, [r3, #0]
   13eb2:	4610      	mov	r0, r2
   13eb4:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 143cc <_ZN9Krabi2015C2Eb+0x16cc>
   13eb8:	f8df 2514 	ldr.w	r2, [pc, #1300]	; 143d0 <_ZN9Krabi2015C2Eb+0x16d0>
   13ebc:	f7fa fd5a 	bl	e974 <_ZN8PositionC1Effb>
   13ec0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ec4:	f8c7 318c 	str.w	r3, [r7, #396]
   13ec8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ecc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13ed0:	f8c7 3510 	str.w	r3, [r7, #1296]
   13ed4:	f04f 0034 	mov.w	r0, #52	; 0x34
   13ed8:	f7fa fbe6 	bl	e6a8 <_Znwj>
   13edc:	4603      	mov	r3, r0
   13ede:	f8c7 3190 	str.w	r3, [r7, #400]
   13ee2:	f8d7 3190 	ldr.w	r3, [r7, #400]
   13ee6:	2b00      	cmp	r3, #0
   13ee8:	d01b      	beq.n	13f22 <_ZN9Krabi2015C2Eb+0x1222>
   13eea:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13eee:	681b      	ldr	r3, [r3, #0]
   13ef0:	6b5b      	ldr	r3, [r3, #52]
   13ef2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   13ef6:	9300      	str	r3, [sp, #0]
   13ef8:	f04f 0300 	mov.w	r3, #0	; 0x0
   13efc:	9301      	str	r3, [sp, #4]
   13efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f02:	9302      	str	r3, [sp, #8]
   13f04:	f04f 0300 	mov.w	r3, #0	; 0x0
   13f08:	9303      	str	r3, [sp, #12]
   13f0a:	f8d7 0190 	ldr.w	r0, [r7, #400]
   13f0e:	ca06      	ldmia	r2!, {r1, r2}
   13f10:	f8d7 318c 	ldr.w	r3, [r7, #396]
   13f14:	f7fc fbcc 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13f18:	f8d7 3190 	ldr.w	r3, [r7, #400]
   13f1c:	f8c7 3194 	str.w	r3, [r7, #404]
   13f20:	e003      	b.n	13f2a <_ZN9Krabi2015C2Eb+0x122a>
   13f22:	f8d7 3190 	ldr.w	r3, [r7, #400]
   13f26:	f8c7 3194 	str.w	r3, [r7, #404]
   13f2a:	f8d7 3194 	ldr.w	r3, [r7, #404]
   13f2e:	f8c7 3588 	str.w	r3, [r7, #1416]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13f32:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   13f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13f3a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13f3e:	781b      	ldrb	r3, [r3, #0]
   13f40:	4610      	mov	r0, r2
   13f42:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 143d4 <_ZN9Krabi2015C2Eb+0x16d4>
   13f46:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 143d0 <_ZN9Krabi2015C2Eb+0x16d0>
   13f4a:	f7fa fd13 	bl	e974 <_ZN8PositionC1Effb>
   13f4e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13f52:	f8c7 3198 	str.w	r3, [r7, #408]
   13f56:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13f5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13f5e:	f8c7 3510 	str.w	r3, [r7, #1296]
   13f62:	f04f 0034 	mov.w	r0, #52	; 0x34
   13f66:	f7fa fb9f 	bl	e6a8 <_Znwj>
   13f6a:	4603      	mov	r3, r0
   13f6c:	f8c7 319c 	str.w	r3, [r7, #412]
   13f70:	f8d7 319c 	ldr.w	r3, [r7, #412]
   13f74:	2b00      	cmp	r3, #0
   13f76:	d01b      	beq.n	13fb0 <_ZN9Krabi2015C2Eb+0x12b0>
   13f78:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13f7c:	681b      	ldr	r3, [r3, #0]
   13f7e:	6b5b      	ldr	r3, [r3, #52]
   13f80:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   13f84:	9300      	str	r3, [sp, #0]
   13f86:	f04f 0300 	mov.w	r3, #0	; 0x0
   13f8a:	9301      	str	r3, [sp, #4]
   13f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f90:	9302      	str	r3, [sp, #8]
   13f92:	f04f 0300 	mov.w	r3, #0	; 0x0
   13f96:	9303      	str	r3, [sp, #12]
   13f98:	f8d7 019c 	ldr.w	r0, [r7, #412]
   13f9c:	ca06      	ldmia	r2!, {r1, r2}
   13f9e:	f8d7 3198 	ldr.w	r3, [r7, #408]
   13fa2:	f7fc fb85 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13fa6:	f8d7 319c 	ldr.w	r3, [r7, #412]
   13faa:	f8c7 31a0 	str.w	r3, [r7, #416]
   13fae:	e003      	b.n	13fb8 <_ZN9Krabi2015C2Eb+0x12b8>
   13fb0:	f8d7 319c 	ldr.w	r3, [r7, #412]
   13fb4:	f8c7 31a0 	str.w	r3, [r7, #416]
   13fb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   13fbc:	f8c7 358c 	str.w	r3, [r7, #1420]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13fc0:	f507 7240 	add.w	r2, r7, #768	; 0x300
   13fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13fc8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13fcc:	781b      	ldrb	r3, [r3, #0]
   13fce:	4610      	mov	r0, r2
   13fd0:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 143d8 <_ZN9Krabi2015C2Eb+0x16d8>
   13fd4:	4af5      	ldr	r2, [pc, #980]	(143ac <_ZN9Krabi2015C2Eb+0x16ac>)
   13fd6:	f7fa fccd 	bl	e974 <_ZN8PositionC1Effb>
   13fda:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13fde:	f8c7 31a4 	str.w	r3, [r7, #420]
   13fe2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13fe6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13fea:	f8c7 3510 	str.w	r3, [r7, #1296]
   13fee:	f04f 0034 	mov.w	r0, #52	; 0x34
   13ff2:	f7fa fb59 	bl	e6a8 <_Znwj>
   13ff6:	4603      	mov	r3, r0
   13ff8:	f8c7 31a8 	str.w	r3, [r7, #424]
   13ffc:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   14000:	2b00      	cmp	r3, #0
   14002:	d01b      	beq.n	1403c <_ZN9Krabi2015C2Eb+0x133c>
   14004:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14008:	681b      	ldr	r3, [r3, #0]
   1400a:	6b5b      	ldr	r3, [r3, #52]
   1400c:	f507 7240 	add.w	r2, r7, #768	; 0x300
   14010:	9300      	str	r3, [sp, #0]
   14012:	f04f 0300 	mov.w	r3, #0	; 0x0
   14016:	9301      	str	r3, [sp, #4]
   14018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1401c:	9302      	str	r3, [sp, #8]
   1401e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14022:	9303      	str	r3, [sp, #12]
   14024:	f8d7 01a8 	ldr.w	r0, [r7, #424]
   14028:	ca06      	ldmia	r2!, {r1, r2}
   1402a:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   1402e:	f7fc fb3f 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14032:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   14036:	f8c7 31ac 	str.w	r3, [r7, #428]
   1403a:	e003      	b.n	14044 <_ZN9Krabi2015C2Eb+0x1344>
   1403c:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   14040:	f8c7 31ac 	str.w	r3, [r7, #428]
   14044:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   14048:	f8c7 3590 	str.w	r3, [r7, #1424]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1404c:	f507 7242 	add.w	r2, r7, #776	; 0x308
   14050:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14054:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14058:	781b      	ldrb	r3, [r3, #0]
   1405a:	4610      	mov	r0, r2
   1405c:	49df      	ldr	r1, [pc, #892]	(143dc <_ZN9Krabi2015C2Eb+0x16dc>)
   1405e:	4ae0      	ldr	r2, [pc, #896]	(143e0 <_ZN9Krabi2015C2Eb+0x16e0>)
   14060:	f7fa fc88 	bl	e974 <_ZN8PositionC1Effb>
   14064:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14068:	f8c7 31b0 	str.w	r3, [r7, #432]
   1406c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14070:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14074:	f8c7 3510 	str.w	r3, [r7, #1296]
   14078:	f04f 0034 	mov.w	r0, #52	; 0x34
   1407c:	f7fa fb14 	bl	e6a8 <_Znwj>
   14080:	4603      	mov	r3, r0
   14082:	f8c7 31b4 	str.w	r3, [r7, #436]
   14086:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   1408a:	2b00      	cmp	r3, #0
   1408c:	d01b      	beq.n	140c6 <_ZN9Krabi2015C2Eb+0x13c6>
   1408e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14092:	681b      	ldr	r3, [r3, #0]
   14094:	6b5b      	ldr	r3, [r3, #52]
   14096:	f507 7242 	add.w	r2, r7, #776	; 0x308
   1409a:	9300      	str	r3, [sp, #0]
   1409c:	f04f 0300 	mov.w	r3, #0	; 0x0
   140a0:	9301      	str	r3, [sp, #4]
   140a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   140a6:	9302      	str	r3, [sp, #8]
   140a8:	f04f 0300 	mov.w	r3, #0	; 0x0
   140ac:	9303      	str	r3, [sp, #12]
   140ae:	f8d7 01b4 	ldr.w	r0, [r7, #436]
   140b2:	ca06      	ldmia	r2!, {r1, r2}
   140b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   140b8:	f7fc fafa 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   140bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   140c0:	f8c7 31b8 	str.w	r3, [r7, #440]
   140c4:	e003      	b.n	140ce <_ZN9Krabi2015C2Eb+0x13ce>
   140c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   140ca:	f8c7 31b8 	str.w	r3, [r7, #440]
   140ce:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   140d2:	f8c7 3594 	str.w	r3, [r7, #1428]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   140d6:	f507 7244 	add.w	r2, r7, #784	; 0x310
   140da:	f507 7300 	add.w	r3, r7, #512	; 0x200
   140de:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   140e2:	781b      	ldrb	r3, [r3, #0]
   140e4:	4610      	mov	r0, r2
   140e6:	49bf      	ldr	r1, [pc, #764]	(143e4 <_ZN9Krabi2015C2Eb+0x16e4>)
   140e8:	4abf      	ldr	r2, [pc, #764]	(143e8 <_ZN9Krabi2015C2Eb+0x16e8>)
   140ea:	f7fa fc43 	bl	e974 <_ZN8PositionC1Effb>
   140ee:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   140f2:	f8c7 31bc 	str.w	r3, [r7, #444]
   140f6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   140fa:	f103 0301 	add.w	r3, r3, #1	; 0x1
   140fe:	f8c7 3510 	str.w	r3, [r7, #1296]
   14102:	f04f 0034 	mov.w	r0, #52	; 0x34
   14106:	f7fa facf 	bl	e6a8 <_Znwj>
   1410a:	4603      	mov	r3, r0
   1410c:	f8c7 31c0 	str.w	r3, [r7, #448]
   14110:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   14114:	2b00      	cmp	r3, #0
   14116:	d01b      	beq.n	14150 <_ZN9Krabi2015C2Eb+0x1450>
   14118:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1411c:	681b      	ldr	r3, [r3, #0]
   1411e:	6b5b      	ldr	r3, [r3, #52]
   14120:	f507 7244 	add.w	r2, r7, #784	; 0x310
   14124:	9300      	str	r3, [sp, #0]
   14126:	f04f 0300 	mov.w	r3, #0	; 0x0
   1412a:	9301      	str	r3, [sp, #4]
   1412c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14130:	9302      	str	r3, [sp, #8]
   14132:	f04f 0300 	mov.w	r3, #0	; 0x0
   14136:	9303      	str	r3, [sp, #12]
   14138:	f8d7 01c0 	ldr.w	r0, [r7, #448]
   1413c:	ca06      	ldmia	r2!, {r1, r2}
   1413e:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   14142:	f7fc fab5 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14146:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   1414a:	f8c7 31c4 	str.w	r3, [r7, #452]
   1414e:	e003      	b.n	14158 <_ZN9Krabi2015C2Eb+0x1458>
   14150:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   14154:	f8c7 31c4 	str.w	r3, [r7, #452]
   14158:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   1415c:	f8c7 3598 	str.w	r3, [r7, #1432]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14160:	f507 7246 	add.w	r2, r7, #792	; 0x318
   14164:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14168:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1416c:	781b      	ldrb	r3, [r3, #0]
   1416e:	4610      	mov	r0, r2
   14170:	499e      	ldr	r1, [pc, #632]	(143ec <_ZN9Krabi2015C2Eb+0x16ec>)
   14172:	4a9f      	ldr	r2, [pc, #636]	(143f0 <_ZN9Krabi2015C2Eb+0x16f0>)
   14174:	f7fa fbfe 	bl	e974 <_ZN8PositionC1Effb>
   14178:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1417c:	f8c7 31c8 	str.w	r3, [r7, #456]
   14180:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14184:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14188:	f8c7 3510 	str.w	r3, [r7, #1296]
   1418c:	f04f 0034 	mov.w	r0, #52	; 0x34
   14190:	f7fa fa8a 	bl	e6a8 <_Znwj>
   14194:	4603      	mov	r3, r0
   14196:	f8c7 31cc 	str.w	r3, [r7, #460]
   1419a:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   1419e:	2b00      	cmp	r3, #0
   141a0:	d01b      	beq.n	141da <_ZN9Krabi2015C2Eb+0x14da>
   141a2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   141a6:	681b      	ldr	r3, [r3, #0]
   141a8:	6b5b      	ldr	r3, [r3, #52]
   141aa:	f507 7246 	add.w	r2, r7, #792	; 0x318
   141ae:	9300      	str	r3, [sp, #0]
   141b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   141b4:	9301      	str	r3, [sp, #4]
   141b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141ba:	9302      	str	r3, [sp, #8]
   141bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   141c0:	9303      	str	r3, [sp, #12]
   141c2:	f8d7 01cc 	ldr.w	r0, [r7, #460]
   141c6:	ca06      	ldmia	r2!, {r1, r2}
   141c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   141cc:	f7fc fa70 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   141d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   141d4:	f8c7 31d0 	str.w	r3, [r7, #464]
   141d8:	e003      	b.n	141e2 <_ZN9Krabi2015C2Eb+0x14e2>
   141da:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   141de:	f8c7 31d0 	str.w	r3, [r7, #464]
   141e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   141e6:	f8c7 359c 	str.w	r3, [r7, #1436]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   141ea:	f507 7248 	add.w	r2, r7, #800	; 0x320
   141ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
   141f2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   141f6:	781b      	ldrb	r3, [r3, #0]
   141f8:	4610      	mov	r0, r2
   141fa:	497e      	ldr	r1, [pc, #504]	(143f4 <_ZN9Krabi2015C2Eb+0x16f4>)
   141fc:	4a7e      	ldr	r2, [pc, #504]	(143f8 <_ZN9Krabi2015C2Eb+0x16f8>)
   141fe:	f7fa fbb9 	bl	e974 <_ZN8PositionC1Effb>
   14202:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14206:	f8c7 31d4 	str.w	r3, [r7, #468]
   1420a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1420e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14212:	f8c7 3510 	str.w	r3, [r7, #1296]
   14216:	f04f 0034 	mov.w	r0, #52	; 0x34
   1421a:	f7fa fa45 	bl	e6a8 <_Znwj>
   1421e:	4603      	mov	r3, r0
   14220:	f8c7 31d8 	str.w	r3, [r7, #472]
   14224:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   14228:	2b00      	cmp	r3, #0
   1422a:	d01b      	beq.n	14264 <_ZN9Krabi2015C2Eb+0x1564>
   1422c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14230:	681b      	ldr	r3, [r3, #0]
   14232:	6b5b      	ldr	r3, [r3, #52]
   14234:	f507 7248 	add.w	r2, r7, #800	; 0x320
   14238:	9300      	str	r3, [sp, #0]
   1423a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1423e:	9301      	str	r3, [sp, #4]
   14240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14244:	9302      	str	r3, [sp, #8]
   14246:	f04f 0300 	mov.w	r3, #0	; 0x0
   1424a:	9303      	str	r3, [sp, #12]
   1424c:	f8d7 01d8 	ldr.w	r0, [r7, #472]
   14250:	ca06      	ldmia	r2!, {r1, r2}
   14252:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   14256:	f7fc fa2b 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1425a:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   1425e:	f8c7 31dc 	str.w	r3, [r7, #476]
   14262:	e003      	b.n	1426c <_ZN9Krabi2015C2Eb+0x156c>
   14264:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   14268:	f8c7 31dc 	str.w	r3, [r7, #476]
   1426c:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   14270:	f8c7 35a0 	str.w	r3, [r7, #1440]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14274:	f507 724a 	add.w	r2, r7, #808	; 0x328
   14278:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1427c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14280:	781b      	ldrb	r3, [r3, #0]
   14282:	4610      	mov	r0, r2
   14284:	495d      	ldr	r1, [pc, #372]	(143fc <_ZN9Krabi2015C2Eb+0x16fc>)
   14286:	4a5e      	ldr	r2, [pc, #376]	(14400 <_ZN9Krabi2015C2Eb+0x1700>)
   14288:	f7fa fb74 	bl	e974 <_ZN8PositionC1Effb>
   1428c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14290:	f8c7 31e0 	str.w	r3, [r7, #480]
   14294:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14298:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1429c:	f8c7 3510 	str.w	r3, [r7, #1296]
   142a0:	f04f 0034 	mov.w	r0, #52	; 0x34
   142a4:	f7fa fa00 	bl	e6a8 <_Znwj>
   142a8:	4603      	mov	r3, r0
   142aa:	f8c7 31e4 	str.w	r3, [r7, #484]
   142ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   142b2:	2b00      	cmp	r3, #0
   142b4:	d01b      	beq.n	142ee <_ZN9Krabi2015C2Eb+0x15ee>
   142b6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   142ba:	681b      	ldr	r3, [r3, #0]
   142bc:	6b5b      	ldr	r3, [r3, #52]
   142be:	f507 724a 	add.w	r2, r7, #808	; 0x328
   142c2:	9300      	str	r3, [sp, #0]
   142c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   142c8:	9301      	str	r3, [sp, #4]
   142ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142ce:	9302      	str	r3, [sp, #8]
   142d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   142d4:	9303      	str	r3, [sp, #12]
   142d6:	f8d7 01e4 	ldr.w	r0, [r7, #484]
   142da:	ca06      	ldmia	r2!, {r1, r2}
   142dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   142e0:	f7fc f9e6 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   142e4:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   142e8:	f8c7 31e8 	str.w	r3, [r7, #488]
   142ec:	e003      	b.n	142f6 <_ZN9Krabi2015C2Eb+0x15f6>
   142ee:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   142f2:	f8c7 31e8 	str.w	r3, [r7, #488]
   142f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   142fa:	f8c7 35a4 	str.w	r3, [r7, #1444]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   142fe:	f507 724c 	add.w	r2, r7, #816	; 0x330
   14302:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14306:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1430a:	781b      	ldrb	r3, [r3, #0]
   1430c:	4610      	mov	r0, r2
   1430e:	493d      	ldr	r1, [pc, #244]	(14404 <_ZN9Krabi2015C2Eb+0x1704>)
   14310:	4a3d      	ldr	r2, [pc, #244]	(14408 <_ZN9Krabi2015C2Eb+0x1708>)
   14312:	f7fa fb2f 	bl	e974 <_ZN8PositionC1Effb>
   14316:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1431a:	f8c7 31ec 	str.w	r3, [r7, #492]
   1431e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14322:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14326:	f8c7 3510 	str.w	r3, [r7, #1296]
   1432a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1432e:	f7fa f9bb 	bl	e6a8 <_Znwj>
   14332:	4603      	mov	r3, r0
   14334:	f8c7 31f0 	str.w	r3, [r7, #496]
   14338:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   1433c:	2b00      	cmp	r3, #0
   1433e:	d01b      	beq.n	14378 <_ZN9Krabi2015C2Eb+0x1678>
   14340:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14344:	681b      	ldr	r3, [r3, #0]
   14346:	6b5b      	ldr	r3, [r3, #52]
   14348:	f507 724c 	add.w	r2, r7, #816	; 0x330
   1434c:	9300      	str	r3, [sp, #0]
   1434e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14352:	9301      	str	r3, [sp, #4]
   14354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14358:	9302      	str	r3, [sp, #8]
   1435a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1435e:	9303      	str	r3, [sp, #12]
   14360:	f8d7 01f0 	ldr.w	r0, [r7, #496]
   14364:	ca06      	ldmia	r2!, {r1, r2}
   14366:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   1436a:	f7fc f9a1 	bl	106b0 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1436e:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   14372:	f8c7 31f4 	str.w	r3, [r7, #500]
   14376:	e003      	b.n	14380 <_ZN9Krabi2015C2Eb+0x1680>
   14378:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   1437c:	f8c7 31f4 	str.w	r3, [r7, #500]
   14380:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   14384:	f8c7 35a8 	str.w	r3, [r7, #1448]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   14388:	f04f 0300 	mov.w	r3, #0	; 0x0
   1438c:	f8c7 35ac 	str.w	r3, [r7, #1452]
   14390:	e0a6      	b.n	144e0 <_ZN9Krabi2015C2Eb+0x17e0>
   14392:	46c0      	nop			(mov r8, r8)
   14394:	449c4000 	.word	0x449c4000
   14398:	44e10000 	.word	0x44e10000
   1439c:	44dac000 	.word	0x44dac000
   143a0:	4499c000 	.word	0x4499c000
   143a4:	443e0000 	.word	0x443e0000
   143a8:	450fc000 	.word	0x450fc000
   143ac:	44bb8000 	.word	0x44bb8000
   143b0:	45296000 	.word	0x45296000
   143b4:	45246000 	.word	0x45246000
   143b8:	43e60000 	.word	0x43e60000
   143bc:	44898000 	.word	0x44898000
   143c0:	44ce4000 	.word	0x44ce4000
   143c4:	440c0000 	.word	0x440c0000
   143c8:	44a14000 	.word	0x44a14000
   143cc:	44340000 	.word	0x44340000
   143d0:	44c80000 	.word	0x44c80000
   143d4:	43d20000 	.word	0x43d20000
   143d8:	43960000 	.word	0x43960000
   143dc:	43c80000 	.word	0x43c80000
   143e0:	43d70000 	.word	0x43d70000
   143e4:	448ac000 	.word	0x448ac000
   143e8:	448d4000 	.word	0x448d4000
   143ec:	44b90000 	.word	0x44b90000
   143f0:	448fc000 	.word	0x448fc000
   143f4:	44e74000 	.word	0x44e74000
   143f8:	44910000 	.word	0x44910000
   143fc:	44f3c000 	.word	0x44f3c000
   14400:	44bf4000 	.word	0x44bf4000
   14404:	44ec4000 	.word	0x44ec4000
   14408:	44aaa000 	.word	0x44aaa000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   1440c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14410:	681b      	ldr	r3, [r3, #0]
   14412:	6b5a      	ldr	r2, [r3, #52]
   14414:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14418:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1441c:	4413      	add	r3, r2
   1441e:	681b      	ldr	r3, [r3, #0]
   14420:	4618      	mov	r0, r3
   14422:	f7fb ff29 	bl	10278 <_ZN5Etape8getStateEv>
   14426:	4603      	mov	r3, r0
   14428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1442c:	bf14      	ite	ne
   1442e:	2300      	movne	r3, #0
   14430:	2301      	moveq	r3, #1
   14432:	b2db      	uxtb	r3, r3
   14434:	2b00      	cmp	r3, #0
   14436:	d04d      	beq.n	144d4 <_ZN9Krabi2015C2Eb+0x17d4>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   14438:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1443c:	681b      	ldr	r3, [r3, #0]
   1443e:	6a99      	ldr	r1, [r3, #40]
   14440:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14444:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14448:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1444c:	ebc2 0303 	rsb	r3, r2, r3
   14450:	eb01 0403 	add.w	r4, r1, r3
   14454:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14458:	681b      	ldr	r3, [r3, #0]
   1445a:	6b5a      	ldr	r2, [r3, #52]
   1445c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14460:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14464:	4413      	add	r3, r2
   14466:	681a      	ldr	r2, [r3, #0]
   14468:	f507 735a 	add.w	r3, r7, #872	; 0x368
   1446c:	4618      	mov	r0, r3
   1446e:	4611      	mov	r1, r2
   14470:	f7fb feee 	bl	10250 <_ZN5Etape11getPositionEv>
   14474:	f507 714e 	add.w	r1, r7, #824	; 0x338
   14478:	f507 725a 	add.w	r2, r7, #872	; 0x368
   1447c:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 14da4 <_ZN9Krabi2015C2Eb+0x20a4>
   14480:	9300      	str	r3, [sp, #0]
   14482:	4608      	mov	r0, r1
   14484:	ca06      	ldmia	r2!, {r1, r2}
   14486:	f04f 0300 	mov.w	r3, #0	; 0x0
   1448a:	f7fa ff99 	bl	f3c0 <_ZN10ActionGoToC1E8Positionbf>
   1448e:	f507 734e 	add.w	r3, r7, #824	; 0x338
   14492:	4620      	mov	r0, r4
   14494:	4619      	mov	r1, r3
   14496:	f008 fd1f 	bl	1ced8 <_ZN10ActionGoToaSERKS_>
   1449a:	f507 734e 	add.w	r3, r7, #824	; 0x338
   1449e:	4618      	mov	r0, r3
   144a0:	f7fa ff56 	bl	f350 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   144a4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   144a8:	681b      	ldr	r3, [r3, #0]
   144aa:	6a5a      	ldr	r2, [r3, #36]
   144ac:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   144b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   144b4:	eb02 0003 	add.w	r0, r2, r3
   144b8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   144bc:	681b      	ldr	r3, [r3, #0]
   144be:	6a99      	ldr	r1, [r3, #40]
   144c0:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   144c4:	ea4f 1203 	mov.w	r2, r3, lsl #4
   144c8:	ea4f 0382 	mov.w	r3, r2, lsl #2
   144cc:	ebc2 0303 	rsb	r3, r2, r3
   144d0:	440b      	add	r3, r1
   144d2:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   144d4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   144d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   144dc:	f8c7 35ac 	str.w	r3, [r7, #1452]
   144e0:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   144e4:	2b25      	cmp	r3, #37
   144e6:	dd91      	ble.n	1440c <_ZN9Krabi2015C2Eb+0x170c>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   144e8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   144ec:	681b      	ldr	r3, [r3, #0]
   144ee:	f103 0448 	add.w	r4, r3, #72	; 0x48
   144f2:	f507 7266 	add.w	r2, r7, #920	; 0x398
   144f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   144fa:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   144fe:	781b      	ldrb	r3, [r3, #0]
   14500:	4610      	mov	r0, r2
   14502:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 14da8 <_ZN9Krabi2015C2Eb+0x20a8>
   14506:	f8df 28a4 	ldr.w	r2, [pc, #2212]	; 14dac <_ZN9Krabi2015C2Eb+0x20ac>
   1450a:	f7fa fa33 	bl	e974 <_ZN8PositionC1Effb>
   1450e:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   14512:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14516:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1451a:	781b      	ldrb	r3, [r3, #0]
   1451c:	4610      	mov	r0, r2
   1451e:	f8df 1890 	ldr.w	r1, [pc, #2192]	; 14db0 <_ZN9Krabi2015C2Eb+0x20b0>
   14522:	f8df 2888 	ldr.w	r2, [pc, #2184]	; 14dac <_ZN9Krabi2015C2Eb+0x20ac>
   14526:	f7fa fa25 	bl	e974 <_ZN8PositionC1Effb>
   1452a:	f507 705c 	add.w	r0, r7, #880	; 0x370
   1452e:	f507 7166 	add.w	r1, r7, #920	; 0x398
   14532:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   14536:	6853      	ldr	r3, [r2, #4]
   14538:	9300      	str	r3, [sp, #0]
   1453a:	6813      	ldr	r3, [r2, #0]
   1453c:	c906      	ldmia	r1!, {r1, r2}
   1453e:	f7fb f927 	bl	f790 <_ZN4ClapC1E8PositionS0_>
   14542:	f507 735c 	add.w	r3, r7, #880	; 0x370
   14546:	4620      	mov	r0, r4
   14548:	4619      	mov	r1, r3
   1454a:	f008 fcf1 	bl	1cf30 <_ZN4ClapaSERKS_>
   1454e:	f507 735c 	add.w	r3, r7, #880	; 0x370
   14552:	4618      	mov	r0, r3
   14554:	f7fb f8e4 	bl	f720 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   14558:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1455c:	681b      	ldr	r3, [r3, #0]
   1455e:	6a5b      	ldr	r3, [r3, #36]
   14560:	f103 0208 	add.w	r2, r3, #8	; 0x8
   14564:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14568:	681b      	ldr	r3, [r3, #0]
   1456a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1456e:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   14570:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14574:	681b      	ldr	r3, [r3, #0]
   14576:	f103 0470 	add.w	r4, r3, #112	; 0x70
   1457a:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   1457e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14582:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14586:	781b      	ldrb	r3, [r3, #0]
   14588:	4610      	mov	r0, r2
   1458a:	f8df 1828 	ldr.w	r1, [pc, #2088]	; 14db4 <_ZN9Krabi2015C2Eb+0x20b4>
   1458e:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 14dac <_ZN9Krabi2015C2Eb+0x20ac>
   14592:	f7fa f9ef 	bl	e974 <_ZN8PositionC1Effb>
   14596:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   1459a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1459e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   145a2:	781b      	ldrb	r3, [r3, #0]
   145a4:	4610      	mov	r0, r2
   145a6:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 14db8 <_ZN9Krabi2015C2Eb+0x20b8>
   145aa:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 14dac <_ZN9Krabi2015C2Eb+0x20ac>
   145ae:	f7fa f9e1 	bl	e974 <_ZN8PositionC1Effb>
   145b2:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   145b6:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   145ba:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   145be:	6853      	ldr	r3, [r2, #4]
   145c0:	9300      	str	r3, [sp, #0]
   145c2:	6813      	ldr	r3, [r2, #0]
   145c4:	c906      	ldmia	r1!, {r1, r2}
   145c6:	f7fb f8e3 	bl	f790 <_ZN4ClapC1E8PositionS0_>
   145ca:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   145ce:	4620      	mov	r0, r4
   145d0:	4619      	mov	r1, r3
   145d2:	f008 fcad 	bl	1cf30 <_ZN4ClapaSERKS_>
   145d6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   145da:	4618      	mov	r0, r3
   145dc:	f7fb f8a0 	bl	f720 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   145e0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   145e4:	681b      	ldr	r3, [r3, #0]
   145e6:	6a5b      	ldr	r3, [r3, #36]
   145e8:	f103 0210 	add.w	r2, r3, #16	; 0x10
   145ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   145f0:	681b      	ldr	r3, [r3, #0]
   145f2:	f103 0370 	add.w	r3, r3, #112	; 0x70
   145f6:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   145f8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   145fc:	681b      	ldr	r3, [r3, #0]
   145fe:	f103 0498 	add.w	r4, r3, #152	; 0x98
   14602:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   14606:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1460a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1460e:	781b      	ldrb	r3, [r3, #0]
   14610:	4610      	mov	r0, r2
   14612:	f8df 17a8 	ldr.w	r1, [pc, #1960]	; 14dbc <_ZN9Krabi2015C2Eb+0x20bc>
   14616:	f8df 2794 	ldr.w	r2, [pc, #1940]	; 14dac <_ZN9Krabi2015C2Eb+0x20ac>
   1461a:	f7fa f9ab 	bl	e974 <_ZN8PositionC1Effb>
   1461e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   14622:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14626:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1462a:	781b      	ldrb	r3, [r3, #0]
   1462c:	4610      	mov	r0, r2
   1462e:	f8df 1790 	ldr.w	r1, [pc, #1936]	; 14dc0 <_ZN9Krabi2015C2Eb+0x20c0>
   14632:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 14dac <_ZN9Krabi2015C2Eb+0x20ac>
   14636:	f7fa f99d 	bl	e974 <_ZN8PositionC1Effb>
   1463a:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   1463e:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   14642:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   14646:	6853      	ldr	r3, [r2, #4]
   14648:	9300      	str	r3, [sp, #0]
   1464a:	6813      	ldr	r3, [r2, #0]
   1464c:	c906      	ldmia	r1!, {r1, r2}
   1464e:	f7fb f89f 	bl	f790 <_ZN4ClapC1E8PositionS0_>
   14652:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   14656:	4620      	mov	r0, r4
   14658:	4619      	mov	r1, r3
   1465a:	f008 fc69 	bl	1cf30 <_ZN4ClapaSERKS_>
   1465e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   14662:	4618      	mov	r0, r3
   14664:	f7fb f85c 	bl	f720 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   14668:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1466c:	681b      	ldr	r3, [r3, #0]
   1466e:	6a5b      	ldr	r3, [r3, #36]
   14670:	f103 0218 	add.w	r2, r3, #24	; 0x18
   14674:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14678:	681b      	ldr	r3, [r3, #0]
   1467a:	f103 0398 	add.w	r3, r3, #152	; 0x98
   1467e:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   14680:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14684:	681b      	ldr	r3, [r3, #0]
   14686:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   1468a:	f507 6287 	add.w	r2, r7, #1080	; 0x438
   1468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14692:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14696:	781b      	ldrb	r3, [r3, #0]
   14698:	4610      	mov	r0, r2
   1469a:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 14dc4 <_ZN9Krabi2015C2Eb+0x20c4>
   1469e:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 14dc8 <_ZN9Krabi2015C2Eb+0x20c8>
   146a2:	f7fa f967 	bl	e974 <_ZN8PositionC1Effb>
   146a6:	f507 6283 	add.w	r2, r7, #1048	; 0x418
   146aa:	f507 6387 	add.w	r3, r7, #1080	; 0x438
   146ae:	4610      	mov	r0, r2
   146b0:	e893 0006 	ldmia.w	r3, {r1, r2}
   146b4:	f7fc f980 	bl	109b8 <_ZN7GobeletC1E8Position>
   146b8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   146bc:	4620      	mov	r0, r4
   146be:	4619      	mov	r1, r3
   146c0:	f008 fc5e 	bl	1cf80 <_ZN7GobeletaSERKS_>
   146c4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   146c8:	4618      	mov	r0, r3
   146ca:	f7fc f93d 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   146ce:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   146d2:	681b      	ldr	r3, [r3, #0]
   146d4:	6a5b      	ldr	r3, [r3, #36]
   146d6:	f103 0220 	add.w	r2, r3, #32	; 0x20
   146da:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   146de:	681b      	ldr	r3, [r3, #0]
   146e0:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   146e4:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   146e6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   146ea:	681b      	ldr	r3, [r3, #0]
   146ec:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   146f0:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   146f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   146f8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   146fc:	781b      	ldrb	r3, [r3, #0]
   146fe:	4610      	mov	r0, r2
   14700:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 14dcc <_ZN9Krabi2015C2Eb+0x20cc>
   14704:	f8df 26c8 	ldr.w	r2, [pc, #1736]	; 14dd0 <_ZN9Krabi2015C2Eb+0x20d0>
   14708:	f7fa f934 	bl	e974 <_ZN8PositionC1Effb>
   1470c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   14710:	f507 638c 	add.w	r3, r7, #1120	; 0x460
   14714:	4610      	mov	r0, r2
   14716:	e893 0006 	ldmia.w	r3, {r1, r2}
   1471a:	f7fc f94d 	bl	109b8 <_ZN7GobeletC1E8Position>
   1471e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   14722:	4620      	mov	r0, r4
   14724:	4619      	mov	r1, r3
   14726:	f008 fc2b 	bl	1cf80 <_ZN7GobeletaSERKS_>
   1472a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   1472e:	4618      	mov	r0, r3
   14730:	f7fc f90a 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   14734:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14738:	681b      	ldr	r3, [r3, #0]
   1473a:	6a5b      	ldr	r3, [r3, #36]
   1473c:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14740:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14744:	681b      	ldr	r3, [r3, #0]
   14746:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   1474a:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   1474c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14750:	681b      	ldr	r3, [r3, #0]
   14752:	f503 7480 	add.w	r4, r3, #256	; 0x100
   14756:	f507 6291 	add.w	r2, r7, #1160	; 0x488
   1475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1475e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14762:	781b      	ldrb	r3, [r3, #0]
   14764:	4610      	mov	r0, r2
   14766:	f8df 166c 	ldr.w	r1, [pc, #1644]	; 14dd4 <_ZN9Krabi2015C2Eb+0x20d4>
   1476a:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 14dd8 <_ZN9Krabi2015C2Eb+0x20d8>
   1476e:	f7fa f901 	bl	e974 <_ZN8PositionC1Effb>
   14772:	f507 628d 	add.w	r2, r7, #1128	; 0x468
   14776:	f507 6391 	add.w	r3, r7, #1160	; 0x488
   1477a:	4610      	mov	r0, r2
   1477c:	e893 0006 	ldmia.w	r3, {r1, r2}
   14780:	f7fc f91a 	bl	109b8 <_ZN7GobeletC1E8Position>
   14784:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   14788:	4620      	mov	r0, r4
   1478a:	4619      	mov	r1, r3
   1478c:	f008 fbf8 	bl	1cf80 <_ZN7GobeletaSERKS_>
   14790:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   14794:	4618      	mov	r0, r3
   14796:	f7fc f8d7 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   1479a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	6a5b      	ldr	r3, [r3, #36]
   147a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
   147a6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   147aa:	681b      	ldr	r3, [r3, #0]
   147ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
   147b0:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   147b2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   147b6:	681b      	ldr	r3, [r3, #0]
   147b8:	f503 7490 	add.w	r4, r3, #288	; 0x120
   147bc:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
   147c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   147c4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   147c8:	781b      	ldrb	r3, [r3, #0]
   147ca:	4610      	mov	r0, r2
   147cc:	f8df 160c 	ldr.w	r1, [pc, #1548]	; 14ddc <_ZN9Krabi2015C2Eb+0x20dc>
   147d0:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 14dd0 <_ZN9Krabi2015C2Eb+0x20d0>
   147d4:	f7fa f8ce 	bl	e974 <_ZN8PositionC1Effb>
   147d8:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   147dc:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
   147e0:	4610      	mov	r0, r2
   147e2:	e893 0006 	ldmia.w	r3, {r1, r2}
   147e6:	f7fc f8e7 	bl	109b8 <_ZN7GobeletC1E8Position>
   147ea:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   147ee:	4620      	mov	r0, r4
   147f0:	4619      	mov	r1, r3
   147f2:	f008 fbc5 	bl	1cf80 <_ZN7GobeletaSERKS_>
   147f6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   147fa:	4618      	mov	r0, r3
   147fc:	f7fc f8a4 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   14800:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14804:	681b      	ldr	r3, [r3, #0]
   14806:	6a5b      	ldr	r3, [r3, #36]
   14808:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1480c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14810:	681b      	ldr	r3, [r3, #0]
   14812:	f503 7390 	add.w	r3, r3, #288	; 0x120
   14816:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   14818:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1481c:	681b      	ldr	r3, [r3, #0]
   1481e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   14822:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
   14826:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1482a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1482e:	781b      	ldrb	r3, [r3, #0]
   14830:	4610      	mov	r0, r2
   14832:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 14de0 <_ZN9Krabi2015C2Eb+0x20e0>
   14836:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 14dc8 <_ZN9Krabi2015C2Eb+0x20c8>
   1483a:	f7fa f89b 	bl	e974 <_ZN8PositionC1Effb>
   1483e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   14842:	4618      	mov	r0, r3
   14844:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
   14848:	e893 0006 	ldmia.w	r3, {r1, r2}
   1484c:	f7fc f8b4 	bl	109b8 <_ZN7GobeletC1E8Position>
   14850:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   14854:	4620      	mov	r0, r4
   14856:	4619      	mov	r1, r3
   14858:	f008 fb92 	bl	1cf80 <_ZN7GobeletaSERKS_>
   1485c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   14860:	4618      	mov	r0, r3
   14862:	f7fc f871 	bl	10948 <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   14866:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1486a:	681b      	ldr	r3, [r3, #0]
   1486c:	6a5b      	ldr	r3, [r3, #36]
   1486e:	f103 0230 	add.w	r2, r3, #48	; 0x30
   14872:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14876:	681b      	ldr	r3, [r3, #0]
   14878:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   1487c:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1220, 760, isYellow));
   1487e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14882:	681b      	ldr	r3, [r3, #0]
   14884:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   14888:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
   1488c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14890:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14894:	781b      	ldrb	r3, [r3, #0]
   14896:	4610      	mov	r0, r2
   14898:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 14de4 <_ZN9Krabi2015C2Eb+0x20e4>
   1489c:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 14de8 <_ZN9Krabi2015C2Eb+0x20e8>
   148a0:	f7fa f868 	bl	e974 <_ZN8PositionC1Effb>
   148a4:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   148a8:	4618      	mov	r0, r3
   148aa:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
   148ae:	e893 0006 	ldmia.w	r3, {r1, r2}
   148b2:	f002 fd4d 	bl	17350 <_ZN5TapisC1E8Position>
   148b6:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   148ba:	4620      	mov	r0, r4
   148bc:	4619      	mov	r1, r3
   148be:	f008 fb7b 	bl	1cfb8 <_ZN5TapisaSERKS_>
   148c2:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   148c6:	4618      	mov	r0, r3
   148c8:	f002 fcae 	bl	17228 <_ZN5TapisD1Ev>
    actionEtape[23] = &actionTapis[0];
   148cc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   148d0:	681b      	ldr	r3, [r3, #0]
   148d2:	6a5b      	ldr	r3, [r3, #36]
   148d4:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   148d8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   148dc:	681b      	ldr	r3, [r3, #0]
   148de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   148e2:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   148e4:	f8d7 0514 	ldr.w	r0, [r7, #1300]
   148e8:	f8d7 1518 	ldr.w	r1, [r7, #1304]
   148ec:	f04f 0201 	mov.w	r2, #1	; 0x1
   148f0:	f7fb fdfe 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   148f4:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   148f8:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   148fc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14900:	f7fb fdf6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   14904:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14908:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   1490c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14910:	f7fb fdee 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   14914:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14918:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   1491c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14920:	f7fb fde6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   14924:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   14928:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   1492c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14930:	f7fb fdde 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   14934:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14938:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   1493c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14940:	f7fb fdd6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   14944:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   14948:	f8d7 1520 	ldr.w	r1, [r7, #1312]
   1494c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14950:	f7fb fdce 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   14954:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   14958:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   1495c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14960:	f7fb fdc6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   14964:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   14968:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   1496c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14970:	f7fb fdbe 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   14974:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14978:	f8d7 1528 	ldr.w	r1, [r7, #1320]
   1497c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14980:	f7fb fdb6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   14984:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14988:	f8d7 1548 	ldr.w	r1, [r7, #1352]
   1498c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14990:	f7fb fdae 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   14994:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14998:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   1499c:	f04f 0201 	mov.w	r2, #1	; 0x1
   149a0:	f7fb fda6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   149a4:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   149a8:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   149ac:	f04f 0201 	mov.w	r2, #1	; 0x1
   149b0:	f7fb fd9e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   149b4:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   149b8:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   149bc:	f04f 0201 	mov.w	r2, #1	; 0x1
   149c0:	f7fb fd96 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   149c4:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   149c8:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   149cc:	f04f 0201 	mov.w	r2, #1	; 0x1
   149d0:	f7fb fd8e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   149d4:	f8d7 0548 	ldr.w	r0, [r7, #1352]
   149d8:	f8d7 154c 	ldr.w	r1, [r7, #1356]
   149dc:	f04f 0201 	mov.w	r2, #1	; 0x1
   149e0:	f7fb fd86 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   149e4:	f8d7 054c 	ldr.w	r0, [r7, #1356]
   149e8:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   149ec:	f04f 0201 	mov.w	r2, #1	; 0x1
   149f0:	f7fb fd7e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   149f4:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   149f8:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   149fc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a00:	f7fb fd76 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   14a04:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14a08:	f8d7 1560 	ldr.w	r1, [r7, #1376]
   14a0c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a10:	f7fb fd6e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   14a14:	f8d7 0560 	ldr.w	r0, [r7, #1376]
   14a18:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   14a1c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a20:	f7fb fd66 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   14a24:	f8d7 0580 	ldr.w	r0, [r7, #1408]
   14a28:	f8d7 1568 	ldr.w	r1, [r7, #1384]
   14a2c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a30:	f7fb fd5e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   14a34:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   14a38:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   14a3c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a40:	f7fb fd56 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   14a44:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14a48:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   14a4c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a50:	f7fb fd4e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   14a54:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   14a58:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14a5c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a60:	f7fb fd46 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   14a64:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14a68:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   14a6c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a70:	f7fb fd3e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   14a74:	f8d7 0568 	ldr.w	r0, [r7, #1384]
   14a78:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   14a7c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a80:	f7fb fd36 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   14a84:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14a88:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   14a8c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14a90:	f7fb fd2e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   14a94:	f8d7 0564 	ldr.w	r0, [r7, #1380]
   14a98:	f8d7 153c 	ldr.w	r1, [r7, #1340]
   14a9c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14aa0:	f7fb fd26 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   14aa4:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14aa8:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   14aac:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ab0:	f7fb fd1e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   14ab4:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14ab8:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14abc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ac0:	f7fb fd16 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   14ac4:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14ac8:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14acc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ad0:	f7fb fd0e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   14ad4:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14ad8:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14adc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ae0:	f7fb fd06 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   14ae4:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14ae8:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14aec:	f04f 0201 	mov.w	r2, #1	; 0x1
   14af0:	f7fb fcfe 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   14af4:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14af8:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   14afc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b00:	f7fb fcf6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   14b04:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14b08:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   14b0c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b10:	f7fb fcee 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   14b14:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14b18:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   14b1c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b20:	f7fb fce6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   14b24:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   14b28:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   14b2c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b30:	f7fb fcde 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   14b34:	f8d7 0544 	ldr.w	r0, [r7, #1348]
   14b38:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   14b3c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b40:	f7fb fcd6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   14b44:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14b48:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14b4c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b50:	f7fb fcce 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   14b54:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14b58:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14b5c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b60:	f7fb fcc6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   14b64:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14b68:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14b6c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b70:	f7fb fcbe 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   14b74:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14b78:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14b7c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b80:	f7fb fcb6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape26);
   14b84:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14b88:	f8d7 157c 	ldr.w	r1, [r7, #1404]
   14b8c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14b90:	f7fb fcae 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape32);
   14b94:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14b98:	f8d7 1594 	ldr.w	r1, [r7, #1428]
   14b9c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ba0:	f7fb fca6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   14ba4:	f8d7 0594 	ldr.w	r0, [r7, #1428]
   14ba8:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   14bac:	f04f 0201 	mov.w	r2, #1	; 0x1
   14bb0:	f7fb fc9e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   14bb4:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14bb8:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   14bbc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14bc0:	f7fb fc96 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   14bc4:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   14bc8:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   14bcc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14bd0:	f7fb fc8e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   14bd4:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   14bd8:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   14bdc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14be0:	f7fb fc86 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   14be4:	f8d7 0550 	ldr.w	r0, [r7, #1360]
   14be8:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   14bec:	f04f 0201 	mov.w	r2, #1	; 0x1
   14bf0:	f7fb fc7e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   14bf4:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14bf8:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   14bfc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c00:	f7fb fc76 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   14c04:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14c08:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14c0c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c10:	f7fb fc6e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   14c14:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14c18:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14c1c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c20:	f7fb fc66 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   14c24:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14c28:	f8d7 1584 	ldr.w	r1, [r7, #1412]
   14c2c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c30:	f7fb fc5e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   14c34:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14c38:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   14c3c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c40:	f7fb fc56 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   14c44:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   14c48:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   14c4c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c50:	f7fb fc4e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   14c54:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   14c58:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14c5c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c60:	f7fb fc46 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   14c64:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   14c68:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14c6c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c70:	f7fb fc3e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   14c74:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   14c78:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   14c7c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c80:	f7fb fc36 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   14c84:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   14c88:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   14c8c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14c90:	f7fb fc2e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   14c94:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14c98:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   14c9c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ca0:	f7fb fc26 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   14ca4:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14ca8:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   14cac:	f04f 0201 	mov.w	r2, #1	; 0x1
   14cb0:	f7fb fc1e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   14cb4:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14cb8:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14cbc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14cc0:	f7fb fc16 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   14cc4:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   14cc8:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   14ccc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14cd0:	f7fb fc0e 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   14cd4:	f8d7 059c 	ldr.w	r0, [r7, #1436]
   14cd8:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   14cdc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ce0:	f7fb fc06 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   14ce4:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14ce8:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   14cec:	f04f 0201 	mov.w	r2, #1	; 0x1
   14cf0:	f7fb fbfe 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   14cf4:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14cf8:	f8d7 15a8 	ldr.w	r1, [r7, #1448]
   14cfc:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d00:	f7fb fbf6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   14d04:	f8d7 05a8 	ldr.w	r0, [r7, #1448]
   14d08:	f8d7 15a4 	ldr.w	r1, [r7, #1444]
   14d0c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d10:	f7fb fbee 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   14d14:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   14d18:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14d1c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d20:	f7fb fbe6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   14d24:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   14d28:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   14d2c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d30:	f7fb fbde 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   14d34:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14d38:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   14d3c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d40:	f7fb fbd6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   14d44:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14d48:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   14d4c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d50:	f7fb fbce 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   14d54:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   14d58:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   14d5c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d60:	f7fb fbc6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   14d64:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14d68:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   14d6c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d70:	f7fb fbbe 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   14d74:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14d78:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   14d7c:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d80:	f7fb fbb6 	bl	104f0 <_ZN5Etape9addVoisinEPS_b>

    // Lancer Dijkstra
    startDijkstra();
   14d84:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14d88:	681b      	ldr	r3, [r3, #0]
   14d8a:	4618      	mov	r0, r3
   14d8c:	f001 fd74 	bl	16878 <_ZN11StrategieV313startDijkstraEv>
}
   14d90:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14d94:	681b      	ldr	r3, [r3, #0]
   14d96:	4618      	mov	r0, r3
   14d98:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
   14d9c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   14da0:	46bd      	mov	sp, r7
   14da2:	bd90      	pop	{r4, r7, pc}
   14da4:	41f00000 	.word	0x41f00000
   14da8:	44510000 	.word	0x44510000
   14dac:	44de8000 	.word	0x44de8000
   14db0:	447a0000 	.word	0x447a0000
   14db4:	436c0000 	.word	0x436c0000
   14db8:	43c80000 	.word	0x43c80000
   14dbc:	451c4000 	.word	0x451c4000
   14dc0:	450fc000 	.word	0x450fc000
   14dc4:	437a0000 	.word	0x437a0000
   14dc8:	44dac000 	.word	0x44dac000
   14dcc:	44638000 	.word	0x44638000
   14dd0:	444f8000 	.word	0x444f8000
   14dd4:	44bb8000 	.word	0x44bb8000
   14dd8:	44ce4000 	.word	0x44ce4000
   14ddc:	4502a000 	.word	0x4502a000
   14de0:	452be000 	.word	0x452be000
   14de4:	44988000 	.word	0x44988000
   14de8:	443e0000 	.word	0x443e0000

00014dec <_ZN17MediumLevelAction15getGoalPositionEv>:
MediumLevelAction::~MediumLevelAction()
{
    //dtor
}

Position MediumLevelAction::getGoalPosition()
   14dec:	b480      	push	{r7}
   14dee:	b083      	sub	sp, #12
   14df0:	af00      	add	r7, sp, #0
   14df2:	4684      	mov	ip, r0
   14df4:	6079      	str	r1, [r7, #4]
{
    return goalPosition;
   14df6:	687b      	ldr	r3, [r7, #4]
   14df8:	4662      	mov	r2, ip
   14dfa:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14dfe:	e893 0003 	ldmia.w	r3, {r0, r1}
   14e02:	e882 0003 	stmia.w	r2, {r0, r1}
}
   14e06:	4660      	mov	r0, ip
   14e08:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14e0c:	46bd      	mov	sp, r7
   14e0e:	bc80      	pop	{r7}
   14e10:	4770      	bx	lr
   14e12:	46c0      	nop			(mov r8, r8)

00014e14 <_ZN17MediumLevelAction9getGoBackEv>:

bool MediumLevelAction::getGoBack()
   14e14:	b480      	push	{r7}
   14e16:	b083      	sub	sp, #12
   14e18:	af00      	add	r7, sp, #0
   14e1a:	6078      	str	r0, [r7, #4]
{
    return goBack;
   14e1c:	687b      	ldr	r3, [r7, #4]
   14e1e:	7c1b      	ldrb	r3, [r3, #16]
}
   14e20:	4618      	mov	r0, r3
   14e22:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14e26:	46bd      	mov	sp, r7
   14e28:	bc80      	pop	{r7}
   14e2a:	4770      	bx	lr

00014e2c <_ZN17MediumLevelAction16collisionAvoidedEv>:

void MediumLevelAction::collisionAvoided()
   14e2c:	b480      	push	{r7}
   14e2e:	b083      	sub	sp, #12
   14e30:	af00      	add	r7, sp, #0
   14e32:	6078      	str	r0, [r7, #4]
{
    status = 0; // reinitialize the status if function not overloaded
   14e34:	687a      	ldr	r2, [r7, #4]
   14e36:	f04f 0300 	mov.w	r3, #0	; 0x0
   14e3a:	60d3      	str	r3, [r2, #12]
}
   14e3c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14e40:	46bd      	mov	sp, r7
   14e42:	bc80      	pop	{r7}
   14e44:	4770      	bx	lr
   14e46:	46c0      	nop			(mov r8, r8)

00014e48 <_ZN17MediumLevelAction9setGoBackEb>:

void MediumLevelAction::setGoBack(bool val)
   14e48:	b480      	push	{r7}
   14e4a:	b083      	sub	sp, #12
   14e4c:	af00      	add	r7, sp, #0
   14e4e:	6078      	str	r0, [r7, #4]
   14e50:	460b      	mov	r3, r1
   14e52:	70fb      	strb	r3, [r7, #3]
{
    goBack = val;
   14e54:	687a      	ldr	r2, [r7, #4]
   14e56:	78fb      	ldrb	r3, [r7, #3]
   14e58:	7413      	strb	r3, [r2, #16]
}
   14e5a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14e5e:	46bd      	mov	sp, r7
   14e60:	bc80      	pop	{r7}
   14e62:	4770      	bx	lr

00014e64 <_ZN17MediumLevelAction5resetEv>:

void MediumLevelAction::reset()
   14e64:	b480      	push	{r7}
   14e66:	b083      	sub	sp, #12
   14e68:	af00      	add	r7, sp, #0
   14e6a:	6078      	str	r0, [r7, #4]
{

}
   14e6c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14e70:	46bd      	mov	sp, r7
   14e72:	bc80      	pop	{r7}
   14e74:	4770      	bx	lr
   14e76:	46c0      	nop			(mov r8, r8)

00014e78 <_ZN17MediumLevelAction10updateTimeEi>:
{

}
#endif

void MediumLevelAction::updateTime(int millisecondesRestantes)
   14e78:	b480      	push	{r7}
   14e7a:	b083      	sub	sp, #12
   14e7c:	af00      	add	r7, sp, #0
   14e7e:	6078      	str	r0, [r7, #4]
   14e80:	6039      	str	r1, [r7, #0]
{
    this->millisecondesRestantes = millisecondesRestantes;
   14e82:	687a      	ldr	r2, [r7, #4]
   14e84:	683b      	ldr	r3, [r7, #0]
   14e86:	6153      	str	r3, [r2, #20]
}
   14e88:	f107 070c 	add.w	r7, r7, #12	; 0xc
   14e8c:	46bd      	mov	sp, r7
   14e8e:	bc80      	pop	{r7}
   14e90:	4770      	bx	lr
   14e92:	46c0      	nop			(mov r8, r8)

00014e94 <_ZN17MediumLevelActionD0Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   14e94:	b580      	push	{r7, lr}
   14e96:	b082      	sub	sp, #8
   14e98:	af00      	add	r7, sp, #0
   14e9a:	6078      	str	r0, [r7, #4]
   14e9c:	687a      	ldr	r2, [r7, #4]
   14e9e:	4b08      	ldr	r3, [pc, #32]	(14ec0 <_ZN17MediumLevelActionD0Ev+0x2c>)
   14ea0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   14ea2:	f04f 0301 	mov.w	r3, #1	; 0x1
   14ea6:	b2db      	uxtb	r3, r3
   14ea8:	2b00      	cmp	r3, #0
   14eaa:	d002      	beq.n	14eb2 <_ZN17MediumLevelActionD0Ev+0x1e>
   14eac:	6878      	ldr	r0, [r7, #4]
   14eae:	f7f9 fca1 	bl	e7f4 <_ZdlPv>
   14eb2:	687b      	ldr	r3, [r7, #4]
   14eb4:	4618      	mov	r0, r3
   14eb6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14eba:	46bd      	mov	sp, r7
   14ebc:	bd80      	pop	{r7, pc}
   14ebe:	46c0      	nop			(mov r8, r8)
   14ec0:	00021fd8 	.word	0x00021fd8

00014ec4 <_ZN17MediumLevelActionD1Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   14ec4:	b580      	push	{r7, lr}
   14ec6:	b082      	sub	sp, #8
   14ec8:	af00      	add	r7, sp, #0
   14eca:	6078      	str	r0, [r7, #4]
   14ecc:	687a      	ldr	r2, [r7, #4]
   14ece:	4b08      	ldr	r3, [pc, #32]	(14ef0 <_ZN17MediumLevelActionD1Ev+0x2c>)
   14ed0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   14ed2:	f04f 0300 	mov.w	r3, #0	; 0x0
   14ed6:	b2db      	uxtb	r3, r3
   14ed8:	2b00      	cmp	r3, #0
   14eda:	d002      	beq.n	14ee2 <_ZN17MediumLevelActionD1Ev+0x1e>
   14edc:	6878      	ldr	r0, [r7, #4]
   14ede:	f7f9 fc89 	bl	e7f4 <_ZdlPv>
   14ee2:	687b      	ldr	r3, [r7, #4]
   14ee4:	4618      	mov	r0, r3
   14ee6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14eea:	46bd      	mov	sp, r7
   14eec:	bd80      	pop	{r7, pc}
   14eee:	46c0      	nop			(mov r8, r8)
   14ef0:	00021fd8 	.word	0x00021fd8

00014ef4 <_ZN17MediumLevelActionD2Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   14ef4:	b580      	push	{r7, lr}
   14ef6:	b082      	sub	sp, #8
   14ef8:	af00      	add	r7, sp, #0
   14efa:	6078      	str	r0, [r7, #4]
   14efc:	687a      	ldr	r2, [r7, #4]
   14efe:	4b08      	ldr	r3, [pc, #32]	(14f20 <_ZN17MediumLevelActionD2Ev+0x2c>)
   14f00:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   14f02:	f04f 0300 	mov.w	r3, #0	; 0x0
   14f06:	b2db      	uxtb	r3, r3
   14f08:	2b00      	cmp	r3, #0
   14f0a:	d002      	beq.n	14f12 <_ZN17MediumLevelActionD2Ev+0x1e>
   14f0c:	6878      	ldr	r0, [r7, #4]
   14f0e:	f7f9 fc71 	bl	e7f4 <_ZdlPv>
   14f12:	687b      	ldr	r3, [r7, #4]
   14f14:	4618      	mov	r0, r3
   14f16:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14f1a:	46bd      	mov	sp, r7
   14f1c:	bd80      	pop	{r7, pc}
   14f1e:	46c0      	nop			(mov r8, r8)
   14f20:	00021fd8 	.word	0x00021fd8

00014f24 <_ZN17MediumLevelActionC1E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   14f24:	b580      	push	{r7, lr}
   14f26:	b084      	sub	sp, #16
   14f28:	af00      	add	r7, sp, #0
   14f2a:	60f8      	str	r0, [r7, #12]
   14f2c:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14f30:	e883 0006 	stmia.w	r3, {r1, r2}
   14f34:	68fa      	ldr	r2, [r7, #12]
   14f36:	4b0e      	ldr	r3, [pc, #56]	(14f70 <_ZN17MediumLevelActionC1E8Position+0x4c>)
   14f38:	6013      	str	r3, [r2, #0]
   14f3a:	68fb      	ldr	r3, [r7, #12]
   14f3c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14f40:	4618      	mov	r0, r3
   14f42:	f7f9 fcef 	bl	e924 <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   14f46:	68fb      	ldr	r3, [r7, #12]
   14f48:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14f4c:	4618      	mov	r0, r3
   14f4e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14f52:	e893 0006 	ldmia.w	r3, {r1, r2}
   14f56:	f7f9 fda1 	bl	ea9c <_ZN8PositionaSES_>
    status = 0;
   14f5a:	68fa      	ldr	r2, [r7, #12]
   14f5c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14f60:	60d3      	str	r3, [r2, #12]
}
   14f62:	68fb      	ldr	r3, [r7, #12]
   14f64:	4618      	mov	r0, r3
   14f66:	f107 0710 	add.w	r7, r7, #16	; 0x10
   14f6a:	46bd      	mov	sp, r7
   14f6c:	bd80      	pop	{r7, pc}
   14f6e:	46c0      	nop			(mov r8, r8)
   14f70:	00021fd8 	.word	0x00021fd8

00014f74 <_ZN17MediumLevelActionC2E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   14f74:	b580      	push	{r7, lr}
   14f76:	b084      	sub	sp, #16
   14f78:	af00      	add	r7, sp, #0
   14f7a:	60f8      	str	r0, [r7, #12]
   14f7c:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14f80:	e883 0006 	stmia.w	r3, {r1, r2}
   14f84:	68fa      	ldr	r2, [r7, #12]
   14f86:	4b0e      	ldr	r3, [pc, #56]	(14fc0 <_ZN17MediumLevelActionC2E8Position+0x4c>)
   14f88:	6013      	str	r3, [r2, #0]
   14f8a:	68fb      	ldr	r3, [r7, #12]
   14f8c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14f90:	4618      	mov	r0, r3
   14f92:	f7f9 fcc7 	bl	e924 <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   14f96:	68fb      	ldr	r3, [r7, #12]
   14f98:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14f9c:	4618      	mov	r0, r3
   14f9e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   14fa2:	e893 0006 	ldmia.w	r3, {r1, r2}
   14fa6:	f7f9 fd79 	bl	ea9c <_ZN8PositionaSES_>
    status = 0;
   14faa:	68fa      	ldr	r2, [r7, #12]
   14fac:	f04f 0300 	mov.w	r3, #0	; 0x0
   14fb0:	60d3      	str	r3, [r2, #12]
}
   14fb2:	68fb      	ldr	r3, [r7, #12]
   14fb4:	4618      	mov	r0, r3
   14fb6:	f107 0710 	add.w	r7, r7, #16	; 0x10
   14fba:	46bd      	mov	sp, r7
   14fbc:	bd80      	pop	{r7, pc}
   14fbe:	46c0      	nop			(mov r8, r8)
   14fc0:	00021fd8 	.word	0x00021fd8

00014fc4 <_ZN19RecalibrerOdometrie6updateEv>:
RecalibrerOdometrie::~RecalibrerOdometrie()
{
    //dtor
}

int RecalibrerOdometrie::update()
   14fc4:	b590      	push	{r4, r7, lr}
   14fc6:	b0d9      	sub	sp, #356
   14fc8:	af02      	add	r7, sp, #8
   14fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14fce:	6018      	str	r0, [r3, #0]
{
    allumerLED();
   14fd0:	f7f7 f962 	bl	c298 <_Z10allumerLEDv>
    allumerLED2();
   14fd4:	f7f7 f958 	bl	c288 <_Z11allumerLED2v>
//#ifndef ROBOTHW
//    status = -1;
//    return -1;
//#else
    if (status == 0)
   14fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	68db      	ldr	r3, [r3, #12]
   14fe0:	2b00      	cmp	r3, #0
   14fe2:	d115      	bne.n	15010 <_ZN19RecalibrerOdometrie6updateEv+0x4c>
    {
#ifndef ROBOTHW
        qDebug() << "recalibrerOdometrie";
#endif
        StrategieV2::setCurrentGoal(positionDepart, false);//Position(700, 1360,isBlue), false);
   14fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   14fe8:	681a      	ldr	r2, [r3, #0]
   14fea:	f8df 37bc 	ldr.w	r3, [pc, #1980]	; 157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   14fee:	9300      	str	r3, [sp, #0]
   14ff0:	f102 0318 	add.w	r3, r2, #24	; 0x18
   14ff4:	e893 0003 	ldmia.w	r3, {r0, r1}
   14ff8:	f04f 0200 	mov.w	r2, #0	; 0x0
   14ffc:	f8df 37ac 	ldr.w	r3, [pc, #1964]	; 157ac <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   15000:	f000 ff68 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status = 1;
   15004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15008:	681a      	ldr	r2, [r3, #0]
   1500a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1500e:	60d3      	str	r3, [r2, #12]
    }
    if (status == 1) // attend d'être replacé
   15010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15014:	681b      	ldr	r3, [r3, #0]
   15016:	68db      	ldr	r3, [r3, #12]
   15018:	2b01      	cmp	r3, #1
   1501a:	f040 808a 	bne.w	15132 <_ZN19RecalibrerOdometrie6updateEv+0x16e>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   1501e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15022:	681b      	ldr	r3, [r3, #0]
   15024:	f103 0418 	add.w	r4, r3, #24	; 0x18
   15028:	f8df 3784 	ldr.w	r3, [pc, #1924]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1502c:	681a      	ldr	r2, [r3, #0]
   1502e:	f107 0364 	add.w	r3, r7, #100	; 0x64
   15032:	4618      	mov	r0, r3
   15034:	4611      	mov	r1, r2
   15036:	f7f4 fd63 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   1503a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   1503e:	f107 0264 	add.w	r2, r7, #100	; 0x64
   15042:	4618      	mov	r0, r3
   15044:	4611      	mov	r1, r2
   15046:	f7f9 fed1 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   1504a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1504e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   15052:	4618      	mov	r0, r3
   15054:	4621      	mov	r1, r4
   15056:	f7f9 fcfb 	bl	ea50 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   1505a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   1505e:	4618      	mov	r0, r3
   15060:	f7f9 fe04 	bl	ec6c <_ZNK8Position8getNormeEv>
   15064:	4602      	mov	r2, r0
   15066:	f04f 0300 	mov.w	r3, #0	; 0x0
   1506a:	72fb      	strb	r3, [r7, #11]
   1506c:	4610      	mov	r0, r2
   1506e:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 157b4 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>
   15072:	f006 f89b 	bl	1b1ac <__aeabi_fcmplt>
   15076:	4603      	mov	r3, r0
   15078:	2b00      	cmp	r3, #0
   1507a:	d002      	beq.n	15082 <_ZN19RecalibrerOdometrie6updateEv+0xbe>
   1507c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15080:	72fb      	strb	r3, [r7, #11]
   15082:	7afb      	ldrb	r3, [r7, #11]
   15084:	2b00      	cmp	r3, #0
   15086:	d054      	beq.n	15132 <_ZN19RecalibrerOdometrie6updateEv+0x16e>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   15088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1508c:	681b      	ldr	r3, [r3, #0]
   1508e:	6a9b      	ldr	r3, [r3, #40]
   15090:	2b03      	cmp	r3, #3
   15092:	d005      	beq.n	150a0 <_ZN19RecalibrerOdometrie6updateEv+0xdc>
   15094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15098:	681b      	ldr	r3, [r3, #0]
   1509a:	6a9b      	ldr	r3, [r3, #40]
   1509c:	2b02      	cmp	r3, #2
   1509e:	d11f      	bne.n	150e0 <_ZN19RecalibrerOdometrie6updateEv+0x11c>
            {
                StrategieV2::setCurrentGoal(Position(0, positionDepart.getY()), true, 0.5);
   150a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   150a4:	681b      	ldr	r3, [r3, #0]
   150a6:	f103 0318 	add.w	r3, r3, #24	; 0x18
   150aa:	4618      	mov	r0, r3
   150ac:	f7f9 fc82 	bl	e9b4 <_ZNK8Position4getYEv>
   150b0:	4602      	mov	r2, r0
   150b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   150b6:	4618      	mov	r0, r3
   150b8:	f8df 16fc 	ldr.w	r1, [pc, #1788]	; 157b8 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   150bc:	f04f 0301 	mov.w	r3, #1	; 0x1
   150c0:	f7f9 fc58 	bl	e974 <_ZN8PositionC1Effb>
   150c4:	f8df 36e0 	ldr.w	r3, [pc, #1760]	; 157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   150c8:	9300      	str	r3, [sp, #0]
   150ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
   150ce:	e893 0003 	ldmia.w	r3, {r0, r1}
   150d2:	f04f 0201 	mov.w	r2, #1	; 0x1
   150d6:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 157bc <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   150da:	f000 fefb 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   150de:	e01e      	b.n	1511e <_ZN19RecalibrerOdometrie6updateEv+0x15a>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(3000, positionDepart.getY()), true, 0.5);
   150e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   150e4:	681b      	ldr	r3, [r3, #0]
   150e6:	f103 0318 	add.w	r3, r3, #24	; 0x18
   150ea:	4618      	mov	r0, r3
   150ec:	f7f9 fc62 	bl	e9b4 <_ZNK8Position4getYEv>
   150f0:	4602      	mov	r2, r0
   150f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
   150f6:	4618      	mov	r0, r3
   150f8:	f8df 16c4 	ldr.w	r1, [pc, #1732]	; 157c0 <_ZN19RecalibrerOdometrie6updateEv+0x7fc>
   150fc:	f04f 0301 	mov.w	r3, #1	; 0x1
   15100:	f7f9 fc38 	bl	e974 <_ZN8PositionC1Effb>
   15104:	f8df 36a0 	ldr.w	r3, [pc, #1696]	; 157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   15108:	9300      	str	r3, [sp, #0]
   1510a:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1510e:	e893 0003 	ldmia.w	r3, {r0, r1}
   15112:	f04f 0201 	mov.w	r2, #1	; 0x1
   15116:	f8df 36a4 	ldr.w	r3, [pc, #1700]	; 157bc <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   1511a:	f000 fedb 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            StrategieV2::setEnTrainDeRecalibrer(true);
   1511e:	f04f 0001 	mov.w	r0, #1	; 0x1
   15122:	f000 fcdd 	bl	15ae0 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 2;
   15126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1512a:	681a      	ldr	r2, [r3, #0]
   1512c:	f04f 0302 	mov.w	r3, #2	; 0x2
   15130:	60d3      	str	r3, [r2, #12]
        }
    }
    if (status == 2) // attend d'avoir synchro sur X
   15132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15136:	681b      	ldr	r3, [r3, #0]
   15138:	68db      	ldr	r3, [r3, #12]
   1513a:	2b02      	cmp	r3, #2
   1513c:	f040 8144 	bne.w	153c8 <_ZN19RecalibrerOdometrie6updateEv+0x404>
    {
        static int timeBlockedY = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) //if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   15140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15144:	681b      	ldr	r3, [r3, #0]
   15146:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1514a:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1514e:	681a      	ldr	r2, [r3, #0]
   15150:	f107 0388 	add.w	r3, r7, #136	; 0x88
   15154:	4618      	mov	r0, r3
   15156:	4611      	mov	r1, r2
   15158:	f7f4 fcd2 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   1515c:	f107 0380 	add.w	r3, r7, #128	; 0x80
   15160:	f107 0288 	add.w	r2, r7, #136	; 0x88
   15164:	4618      	mov	r0, r3
   15166:	4611      	mov	r1, r2
   15168:	f7f9 fe40 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   1516c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   15170:	f107 0280 	add.w	r2, r7, #128	; 0x80
   15174:	4618      	mov	r0, r3
   15176:	4621      	mov	r1, r4
   15178:	f7f9 fc6a 	bl	ea50 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   1517c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   15180:	4618      	mov	r0, r3
   15182:	f7f9 fd73 	bl	ec6c <_ZNK8Position8getNormeEv>
   15186:	4603      	mov	r3, r0
   15188:	4618      	mov	r0, r3
   1518a:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 157b8 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   1518e:	f006 f82b 	bl	1b1e8 <__aeabi_fcmpgt>
   15192:	4603      	mov	r3, r0
   15194:	2b00      	cmp	r3, #0
   15196:	d016      	beq.n	151c6 <_ZN19RecalibrerOdometrie6updateEv+0x202>
   15198:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1519c:	4618      	mov	r0, r3
   1519e:	f7f9 fd65 	bl	ec6c <_ZNK8Position8getNormeEv>
   151a2:	4602      	mov	r2, r0
   151a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   151a8:	72bb      	strb	r3, [r7, #10]
   151aa:	4610      	mov	r0, r2
   151ac:	f8df 1608 	ldr.w	r1, [pc, #1544]	; 157b8 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   151b0:	f005 fff2 	bl	1b198 <__aeabi_fcmpeq>
   151b4:	4603      	mov	r3, r0
   151b6:	2b00      	cmp	r3, #0
   151b8:	d102      	bne.n	151c0 <_ZN19RecalibrerOdometrie6updateEv+0x1fc>
   151ba:	f04f 0301 	mov.w	r3, #1	; 0x1
   151be:	72bb      	strb	r3, [r7, #10]
   151c0:	7abb      	ldrb	r3, [r7, #10]
   151c2:	60fb      	str	r3, [r7, #12]
   151c4:	e015      	b.n	151f2 <_ZN19RecalibrerOdometrie6updateEv+0x22e>
   151c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   151ca:	4618      	mov	r0, r3
   151cc:	f7f9 fd4e 	bl	ec6c <_ZNK8Position8getNormeEv>
   151d0:	4602      	mov	r2, r0
   151d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   151d6:	727b      	strb	r3, [r7, #9]
   151d8:	4610      	mov	r0, r2
   151da:	f8df 15e8 	ldr.w	r1, [pc, #1512]	; 157c4 <_ZN19RecalibrerOdometrie6updateEv+0x800>
   151de:	f006 f803 	bl	1b1e8 <__aeabi_fcmpgt>
   151e2:	4603      	mov	r3, r0
   151e4:	2b00      	cmp	r3, #0
   151e6:	d002      	beq.n	151ee <_ZN19RecalibrerOdometrie6updateEv+0x22a>
   151e8:	f04f 0301 	mov.w	r3, #1	; 0x1
   151ec:	727b      	strb	r3, [r7, #9]
   151ee:	7a7b      	ldrb	r3, [r7, #9]
   151f0:	60fb      	str	r3, [r7, #12]
   151f2:	68fb      	ldr	r3, [r7, #12]
   151f4:	2b00      	cmp	r3, #0
   151f6:	d008      	beq.n	1520a <_ZN19RecalibrerOdometrie6updateEv+0x246>
        {
            timeBlockedY ++;
   151f8:	f8df 35cc 	ldr.w	r3, [pc, #1484]	; 157c8 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   151fc:	681b      	ldr	r3, [r3, #0]
   151fe:	f103 0201 	add.w	r2, r3, #1	; 0x1
   15202:	f8df 35c4 	ldr.w	r3, [pc, #1476]	; 157c8 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   15206:	601a      	str	r2, [r3, #0]
   15208:	e023      	b.n	15252 <_ZN19RecalibrerOdometrie6updateEv+0x28e>
//            allumerLED2();
        }
        else {
            timeBlockedY = 0;
   1520a:	f8df 25bc 	ldr.w	r2, [pc, #1468]	; 157c8 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   1520e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15212:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   15214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15218:	681b      	ldr	r3, [r3, #0]
   1521a:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1521e:	f8df 3590 	ldr.w	r3, [pc, #1424]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15222:	681a      	ldr	r2, [r3, #0]
   15224:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   15228:	4618      	mov	r0, r3
   1522a:	4611      	mov	r1, r2
   1522c:	f7f4 fc68 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   15230:	f107 0394 	add.w	r3, r7, #148	; 0x94
   15234:	f107 029c 	add.w	r2, r7, #156	; 0x9c
   15238:	4618      	mov	r0, r3
   1523a:	4611      	mov	r1, r2
   1523c:	f7f9 fdd6 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   15240:	4620      	mov	r0, r4
   15242:	f107 0394 	add.w	r3, r7, #148	; 0x94
   15246:	e893 0006 	ldmia.w	r3, {r1, r2}
   1524a:	f7f9 fc27 	bl	ea9c <_ZN8PositionaSES_>
            eteindreLED2();
   1524e:	f7f6 ffbf 	bl	c1d0 <_Z12eteindreLED2v>
        }
        if (timeBlockedY > 100 &&
   15252:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 157c8 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   15256:	681b      	ldr	r3, [r3, #0]
   15258:	2b64      	cmp	r3, #100
   1525a:	dd59      	ble.n	15310 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   1525c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15260:	681b      	ldr	r3, [r3, #0]
   15262:	6a9b      	ldr	r3, [r3, #40]
   15264:	2b00      	cmp	r3, #0
   15266:	d005      	beq.n	15274 <_ZN19RecalibrerOdometrie6updateEv+0x2b0>
   15268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1526c:	681b      	ldr	r3, [r3, #0]
   1526e:	6a9b      	ldr	r3, [r3, #40]
   15270:	2b01      	cmp	r3, #1
   15272:	d11e      	bne.n	152b2 <_ZN19RecalibrerOdometrie6updateEv+0x2ee>
   15274:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15278:	681a      	ldr	r2, [r3, #0]
   1527a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
   1527e:	4618      	mov	r0, r3
   15280:	4611      	mov	r1, r2
   15282:	f7f4 fc3d 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   15286:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   1528a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   1528e:	4618      	mov	r0, r3
   15290:	4611      	mov	r1, r2
   15292:	f7f9 fdab 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   15296:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   1529a:	4618      	mov	r0, r3
   1529c:	f7f9 fb7e 	bl	e99c <_ZNK8Position4getXEv>
   152a0:	4603      	mov	r3, r0
   152a2:	4618      	mov	r0, r3
   152a4:	f8df 1524 	ldr.w	r1, [pc, #1316]	; 157cc <_ZN19RecalibrerOdometrie6updateEv+0x808>
   152a8:	f005 ff9e 	bl	1b1e8 <__aeabi_fcmpgt>
   152ac:	4603      	mov	r3, r0
   152ae:	2b00      	cmp	r3, #0
   152b0:	d12a      	bne.n	15308 <_ZN19RecalibrerOdometrie6updateEv+0x344>
   152b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   152b6:	681b      	ldr	r3, [r3, #0]
   152b8:	6a9b      	ldr	r3, [r3, #40]
   152ba:	2b02      	cmp	r3, #2
   152bc:	d005      	beq.n	152ca <_ZN19RecalibrerOdometrie6updateEv+0x306>
   152be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   152c2:	681b      	ldr	r3, [r3, #0]
   152c4:	6a9b      	ldr	r3, [r3, #40]
   152c6:	2b03      	cmp	r3, #3
   152c8:	d122      	bne.n	15310 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   152ca:	f8df 34e4 	ldr.w	r3, [pc, #1252]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   152ce:	681a      	ldr	r2, [r3, #0]
   152d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
   152d4:	4618      	mov	r0, r3
   152d6:	4611      	mov	r1, r2
   152d8:	f7f4 fc12 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   152dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   152e0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
   152e4:	4618      	mov	r0, r3
   152e6:	4611      	mov	r1, r2
   152e8:	f7f9 fd80 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   152ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   152f0:	4618      	mov	r0, r3
   152f2:	f7f9 fb53 	bl	e99c <_ZNK8Position4getXEv>
   152f6:	4603      	mov	r3, r0
   152f8:	4618      	mov	r0, r3
   152fa:	f8df 14d4 	ldr.w	r1, [pc, #1236]	; 157d0 <_ZN19RecalibrerOdometrie6updateEv+0x80c>
   152fe:	f005 ff55 	bl	1b1ac <__aeabi_fcmplt>
   15302:	4603      	mov	r3, r0
   15304:	2b00      	cmp	r3, #0
   15306:	d003      	beq.n	15310 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   15308:	f04f 0301 	mov.w	r3, #1	; 0x1
   1530c:	613b      	str	r3, [r7, #16]
   1530e:	e002      	b.n	15316 <_ZN19RecalibrerOdometrie6updateEv+0x352>
   15310:	f04f 0300 	mov.w	r3, #0	; 0x0
   15314:	613b      	str	r3, [r7, #16]
   15316:	693b      	ldr	r3, [r7, #16]
   15318:	2b00      	cmp	r3, #0
   1531a:	f000 823b 	beq.w	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
                || ((this->coinRecalage == COTE_NOTRE_DEPART_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_BAS)
                  && Odometrie::odometrie->getPos().getPosition().getX() < 150)
                 ))// && Odometrie::odometrie->getPos().getPosition().getY() > 1500)//1850)
        {
#ifdef ROBOTHW //A adapter à la taille du robot
            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   1531e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15322:	681b      	ldr	r3, [r3, #0]
   15324:	6a9b      	ldr	r3, [r3, #40]
   15326:	2b00      	cmp	r3, #0
   15328:	d005      	beq.n	15336 <_ZN19RecalibrerOdometrie6updateEv+0x372>
   1532a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1532e:	681b      	ldr	r3, [r3, #0]
   15330:	6a9b      	ldr	r3, [r3, #40]
   15332:	2b01      	cmp	r3, #1
   15334:	d114      	bne.n	15360 <_ZN19RecalibrerOdometrie6updateEv+0x39c>
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 95 : 2905)); // robot = 319mm de large
   15336:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1533a:	681b      	ldr	r3, [r3, #0]
   1533c:	617b      	str	r3, [r7, #20]
   1533e:	f000 fba9 	bl	15a94 <_ZN11StrategieV29getIsBlueEv>
   15342:	4603      	mov	r3, r0
   15344:	2b00      	cmp	r3, #0
   15346:	d003      	beq.n	15350 <_ZN19RecalibrerOdometrie6updateEv+0x38c>
   15348:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 157d4 <_ZN19RecalibrerOdometrie6updateEv+0x810>
   1534c:	61bb      	str	r3, [r7, #24]
   1534e:	e002      	b.n	15356 <_ZN19RecalibrerOdometrie6updateEv+0x392>
   15350:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 157d8 <_ZN19RecalibrerOdometrie6updateEv+0x814>
   15354:	61bb      	str	r3, [r7, #24]
   15356:	6978      	ldr	r0, [r7, #20]
   15358:	69b9      	ldr	r1, [r7, #24]
   1535a:	f7f4 fc85 	bl	9c68 <_ZN9Odometrie4setXEf>
   1535e:	e013      	b.n	15388 <_ZN19RecalibrerOdometrie6updateEv+0x3c4>
            else
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 2905 : 95)); // robot = 319mm de large
   15360:	f8df 344c 	ldr.w	r3, [pc, #1100]	; 157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15364:	681b      	ldr	r3, [r3, #0]
   15366:	61fb      	str	r3, [r7, #28]
   15368:	f000 fb94 	bl	15a94 <_ZN11StrategieV29getIsBlueEv>
   1536c:	4603      	mov	r3, r0
   1536e:	2b00      	cmp	r3, #0
   15370:	d003      	beq.n	1537a <_ZN19RecalibrerOdometrie6updateEv+0x3b6>
   15372:	f8df 3464 	ldr.w	r3, [pc, #1124]	; 157d8 <_ZN19RecalibrerOdometrie6updateEv+0x814>
   15376:	623b      	str	r3, [r7, #32]
   15378:	e002      	b.n	15380 <_ZN19RecalibrerOdometrie6updateEv+0x3bc>
   1537a:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 157d4 <_ZN19RecalibrerOdometrie6updateEv+0x810>
   1537e:	623b      	str	r3, [r7, #32]
   15380:	69f8      	ldr	r0, [r7, #28]
   15382:	6a39      	ldr	r1, [r7, #32]
   15384:	f7f4 fc70 	bl	9c68 <_ZN9Odometrie4setXEf>
#endif
            //StrategieV2::setCurrentGoal(Position(goalPosition1.getX(), 1360), false);
            StrategieV2::setCurrentGoal(positionDepart, false);
   15388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1538c:	681a      	ldr	r2, [r3, #0]
   1538e:	f8df 3418 	ldr.w	r3, [pc, #1048]	; 157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   15392:	9300      	str	r3, [sp, #0]
   15394:	f102 0318 	add.w	r3, r2, #24	; 0x18
   15398:	e893 0003 	ldmia.w	r3, {r0, r1}
   1539c:	f04f 0200 	mov.w	r2, #0	; 0x0
   153a0:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 157ac <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   153a4:	f000 fd96 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            StrategieV2::setEnTrainDeRecalibrer(false);
   153a8:	f04f 0000 	mov.w	r0, #0	; 0x0
   153ac:	f000 fb98 	bl	15ae0 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 3;
   153b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   153b4:	681a      	ldr	r2, [r3, #0]
   153b6:	f04f 0303 	mov.w	r3, #3	; 0x3
   153ba:	60d3      	str	r3, [r2, #12]
            timeBlockedY = 0;
   153bc:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 157c8 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   153c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   153c4:	6013      	str	r3, [r2, #0]
   153c6:	e1e5      	b.n	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 3) // attend d'être replacé
   153c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   153cc:	681b      	ldr	r3, [r3, #0]
   153ce:	68db      	ldr	r3, [r3, #12]
   153d0:	2b03      	cmp	r3, #3
   153d2:	f040 8082 	bne.w	154da <_ZN19RecalibrerOdometrie6updateEv+0x516>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   153d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   153da:	681b      	ldr	r3, [r3, #0]
   153dc:	f103 0418 	add.w	r4, r3, #24	; 0x18
   153e0:	4bf3      	ldr	r3, [pc, #972]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   153e2:	681a      	ldr	r2, [r3, #0]
   153e4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   153e8:	4618      	mov	r0, r3
   153ea:	4611      	mov	r1, r2
   153ec:	f7f4 fb88 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   153f0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   153f4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   153f8:	4618      	mov	r0, r3
   153fa:	4611      	mov	r1, r2
   153fc:	f7f9 fcf6 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   15400:	f107 0344 	add.w	r3, r7, #68	; 0x44
   15404:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   15408:	4618      	mov	r0, r3
   1540a:	4621      	mov	r1, r4
   1540c:	f7f9 fb20 	bl	ea50 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   15410:	f107 0344 	add.w	r3, r7, #68	; 0x44
   15414:	4618      	mov	r0, r3
   15416:	f7f9 fc29 	bl	ec6c <_ZNK8Position8getNormeEv>
   1541a:	4602      	mov	r2, r0
   1541c:	f04f 0300 	mov.w	r3, #0	; 0x0
   15420:	723b      	strb	r3, [r7, #8]
   15422:	4610      	mov	r0, r2
   15424:	49e3      	ldr	r1, [pc, #908]	(157b4 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   15426:	f005 fec1 	bl	1b1ac <__aeabi_fcmplt>
   1542a:	4603      	mov	r3, r0
   1542c:	2b00      	cmp	r3, #0
   1542e:	d002      	beq.n	15436 <_ZN19RecalibrerOdometrie6updateEv+0x472>
   15430:	f04f 0301 	mov.w	r3, #1	; 0x1
   15434:	723b      	strb	r3, [r7, #8]
   15436:	7a3b      	ldrb	r3, [r7, #8]
   15438:	2b00      	cmp	r3, #0
   1543a:	f000 81ab 	beq.w	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   1543e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15442:	681b      	ldr	r3, [r3, #0]
   15444:	6a9b      	ldr	r3, [r3, #40]
   15446:	2b03      	cmp	r3, #3
   15448:	d005      	beq.n	15456 <_ZN19RecalibrerOdometrie6updateEv+0x492>
   1544a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1544e:	681b      	ldr	r3, [r3, #0]
   15450:	6a9b      	ldr	r3, [r3, #40]
   15452:	2b01      	cmp	r3, #1
   15454:	d11d      	bne.n	15492 <_ZN19RecalibrerOdometrie6updateEv+0x4ce>
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 0), true, 0.5);
   15456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1545a:	681b      	ldr	r3, [r3, #0]
   1545c:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15460:	4618      	mov	r0, r3
   15462:	f7f9 fa9b 	bl	e99c <_ZNK8Position4getXEv>
   15466:	4602      	mov	r2, r0
   15468:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   1546c:	4618      	mov	r0, r3
   1546e:	4611      	mov	r1, r2
   15470:	4ad1      	ldr	r2, [pc, #836]	(157b8 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   15472:	f04f 0301 	mov.w	r3, #1	; 0x1
   15476:	f7f9 fa7d 	bl	e974 <_ZN8PositionC1Effb>
   1547a:	4bcb      	ldr	r3, [pc, #812]	(157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   1547c:	9300      	str	r3, [sp, #0]
   1547e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   15482:	e893 0003 	ldmia.w	r3, {r0, r1}
   15486:	f04f 0201 	mov.w	r2, #1	; 0x1
   1548a:	4bcc      	ldr	r3, [pc, #816]	(157bc <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   1548c:	f000 fd22 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   15490:	e01c      	b.n	154cc <_ZN19RecalibrerOdometrie6updateEv+0x508>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 2000), true, 0.5);
   15492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15496:	681b      	ldr	r3, [r3, #0]
   15498:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1549c:	4618      	mov	r0, r3
   1549e:	f7f9 fa7d 	bl	e99c <_ZNK8Position4getXEv>
   154a2:	4602      	mov	r2, r0
   154a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   154a8:	4618      	mov	r0, r3
   154aa:	4611      	mov	r1, r2
   154ac:	4acb      	ldr	r2, [pc, #812]	(157dc <_ZN19RecalibrerOdometrie6updateEv+0x818>)
   154ae:	f04f 0301 	mov.w	r3, #1	; 0x1
   154b2:	f7f9 fa5f 	bl	e974 <_ZN8PositionC1Effb>
   154b6:	4bbc      	ldr	r3, [pc, #752]	(157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   154b8:	9300      	str	r3, [sp, #0]
   154ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   154be:	e893 0003 	ldmia.w	r3, {r0, r1}
   154c2:	f04f 0201 	mov.w	r2, #1	; 0x1
   154c6:	4bbd      	ldr	r3, [pc, #756]	(157bc <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   154c8:	f000 fd04 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            status  = 4;
   154cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   154d0:	681a      	ldr	r2, [r3, #0]
   154d2:	f04f 0304 	mov.w	r3, #4	; 0x4
   154d6:	60d3      	str	r3, [r2, #12]
   154d8:	e15c      	b.n	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 4) // attend d'avoir synchro sur Y
   154da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   154de:	681b      	ldr	r3, [r3, #0]
   154e0:	68db      	ldr	r3, [r3, #12]
   154e2:	2b04      	cmp	r3, #4
   154e4:	f040 8117 	bne.w	15716 <_ZN19RecalibrerOdometrie6updateEv+0x752>
    {

        static int timeBlockedX = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) // if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   154e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   154ec:	681b      	ldr	r3, [r3, #0]
   154ee:	f103 0420 	add.w	r4, r3, #32	; 0x20
   154f2:	4baf      	ldr	r3, [pc, #700]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   154f4:	681a      	ldr	r2, [r3, #0]
   154f6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
   154fa:	4618      	mov	r0, r3
   154fc:	4611      	mov	r1, r2
   154fe:	f7f4 faff 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   15502:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
   15506:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
   1550a:	4618      	mov	r0, r3
   1550c:	4611      	mov	r1, r2
   1550e:	f7f9 fc6d 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   15512:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   15516:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
   1551a:	4618      	mov	r0, r3
   1551c:	4621      	mov	r1, r4
   1551e:	f7f9 fa97 	bl	ea50 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   15522:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   15526:	4618      	mov	r0, r3
   15528:	f7f9 fba0 	bl	ec6c <_ZNK8Position8getNormeEv>
   1552c:	4603      	mov	r3, r0
   1552e:	4618      	mov	r0, r3
   15530:	49a1      	ldr	r1, [pc, #644]	(157b8 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   15532:	f005 fe59 	bl	1b1e8 <__aeabi_fcmpgt>
   15536:	4603      	mov	r3, r0
   15538:	2b00      	cmp	r3, #0
   1553a:	d015      	beq.n	15568 <_ZN19RecalibrerOdometrie6updateEv+0x5a4>
   1553c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   15540:	4618      	mov	r0, r3
   15542:	f7f9 fb93 	bl	ec6c <_ZNK8Position8getNormeEv>
   15546:	4602      	mov	r2, r0
   15548:	f04f 0300 	mov.w	r3, #0	; 0x0
   1554c:	71fb      	strb	r3, [r7, #7]
   1554e:	4610      	mov	r0, r2
   15550:	4999      	ldr	r1, [pc, #612]	(157b8 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   15552:	f005 fe21 	bl	1b198 <__aeabi_fcmpeq>
   15556:	4603      	mov	r3, r0
   15558:	2b00      	cmp	r3, #0
   1555a:	d102      	bne.n	15562 <_ZN19RecalibrerOdometrie6updateEv+0x59e>
   1555c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15560:	71fb      	strb	r3, [r7, #7]
   15562:	79fb      	ldrb	r3, [r7, #7]
   15564:	627b      	str	r3, [r7, #36]
   15566:	e014      	b.n	15592 <_ZN19RecalibrerOdometrie6updateEv+0x5ce>
   15568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1556c:	4618      	mov	r0, r3
   1556e:	f7f9 fb7d 	bl	ec6c <_ZNK8Position8getNormeEv>
   15572:	4602      	mov	r2, r0
   15574:	f04f 0300 	mov.w	r3, #0	; 0x0
   15578:	71bb      	strb	r3, [r7, #6]
   1557a:	4610      	mov	r0, r2
   1557c:	4991      	ldr	r1, [pc, #580]	(157c4 <_ZN19RecalibrerOdometrie6updateEv+0x800>)
   1557e:	f005 fe33 	bl	1b1e8 <__aeabi_fcmpgt>
   15582:	4603      	mov	r3, r0
   15584:	2b00      	cmp	r3, #0
   15586:	d002      	beq.n	1558e <_ZN19RecalibrerOdometrie6updateEv+0x5ca>
   15588:	f04f 0301 	mov.w	r3, #1	; 0x1
   1558c:	71bb      	strb	r3, [r7, #6]
   1558e:	79bb      	ldrb	r3, [r7, #6]
   15590:	627b      	str	r3, [r7, #36]
   15592:	6a7b      	ldr	r3, [r7, #36]
   15594:	2b00      	cmp	r3, #0
   15596:	d006      	beq.n	155a6 <_ZN19RecalibrerOdometrie6updateEv+0x5e2>
        {
            timeBlockedX ++;
   15598:	4b91      	ldr	r3, [pc, #580]	(157e0 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1559a:	681b      	ldr	r3, [r3, #0]
   1559c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   155a0:	4b8f      	ldr	r3, [pc, #572]	(157e0 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   155a2:	601a      	str	r2, [r3, #0]
   155a4:	e021      	b.n	155ea <_ZN19RecalibrerOdometrie6updateEv+0x626>
//            allumerLED2();
        }
        else
        {
            timeBlockedX = 0;
   155a6:	4a8e      	ldr	r2, [pc, #568]	(157e0 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   155a8:	f04f 0300 	mov.w	r3, #0	; 0x0
   155ac:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   155ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   155b2:	681b      	ldr	r3, [r3, #0]
   155b4:	f103 0420 	add.w	r4, r3, #32	; 0x20
   155b8:	4b7d      	ldr	r3, [pc, #500]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   155ba:	681a      	ldr	r2, [r3, #0]
   155bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
   155c0:	4618      	mov	r0, r3
   155c2:	4611      	mov	r1, r2
   155c4:	f7f4 fa9c 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   155c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
   155cc:	f507 7288 	add.w	r2, r7, #272	; 0x110
   155d0:	4618      	mov	r0, r3
   155d2:	4611      	mov	r1, r2
   155d4:	f7f9 fc0a 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   155d8:	4620      	mov	r0, r4
   155da:	f507 7384 	add.w	r3, r7, #264	; 0x108
   155de:	e893 0006 	ldmia.w	r3, {r1, r2}
   155e2:	f7f9 fa5b 	bl	ea9c <_ZN8PositionaSES_>
            eteindreLED2();
   155e6:	f7f6 fdf3 	bl	c1d0 <_Z12eteindreLED2v>
        }
        if (timeBlockedX > 100 &&
   155ea:	4b7d      	ldr	r3, [pc, #500]	(157e0 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   155ec:	681b      	ldr	r3, [r3, #0]
   155ee:	2b64      	cmp	r3, #100
   155f0:	dd55      	ble.n	1569e <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   155f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   155f6:	681b      	ldr	r3, [r3, #0]
   155f8:	6a9b      	ldr	r3, [r3, #40]
   155fa:	2b00      	cmp	r3, #0
   155fc:	d005      	beq.n	1560a <_ZN19RecalibrerOdometrie6updateEv+0x646>
   155fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15602:	681b      	ldr	r3, [r3, #0]
   15604:	6a9b      	ldr	r3, [r3, #40]
   15606:	2b02      	cmp	r3, #2
   15608:	d11c      	bne.n	15644 <_ZN19RecalibrerOdometrie6updateEv+0x680>
   1560a:	4b69      	ldr	r3, [pc, #420]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1560c:	681a      	ldr	r2, [r3, #0]
   1560e:	f507 7392 	add.w	r3, r7, #292	; 0x124
   15612:	4618      	mov	r0, r3
   15614:	4611      	mov	r1, r2
   15616:	f7f4 fa73 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   1561a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   1561e:	f507 7292 	add.w	r2, r7, #292	; 0x124
   15622:	4618      	mov	r0, r3
   15624:	4611      	mov	r1, r2
   15626:	f7f9 fbe1 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   1562a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   1562e:	4618      	mov	r0, r3
   15630:	f7f9 f9c0 	bl	e9b4 <_ZNK8Position4getYEv>
   15634:	4603      	mov	r3, r0
   15636:	4618      	mov	r0, r3
   15638:	496a      	ldr	r1, [pc, #424]	(157e4 <_ZN19RecalibrerOdometrie6updateEv+0x820>)
   1563a:	f005 fdd5 	bl	1b1e8 <__aeabi_fcmpgt>
   1563e:	4603      	mov	r3, r0
   15640:	2b00      	cmp	r3, #0
   15642:	d128      	bne.n	15696 <_ZN19RecalibrerOdometrie6updateEv+0x6d2>
   15644:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15648:	681b      	ldr	r3, [r3, #0]
   1564a:	6a9b      	ldr	r3, [r3, #40]
   1564c:	2b01      	cmp	r3, #1
   1564e:	d005      	beq.n	1565c <_ZN19RecalibrerOdometrie6updateEv+0x698>
   15650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15654:	681b      	ldr	r3, [r3, #0]
   15656:	6a9b      	ldr	r3, [r3, #40]
   15658:	2b03      	cmp	r3, #3
   1565a:	d120      	bne.n	1569e <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   1565c:	4b54      	ldr	r3, [pc, #336]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1565e:	681a      	ldr	r2, [r3, #0]
   15660:	f507 739c 	add.w	r3, r7, #312	; 0x138
   15664:	4618      	mov	r0, r3
   15666:	4611      	mov	r1, r2
   15668:	f7f4 fa4a 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   1566c:	f507 7398 	add.w	r3, r7, #304	; 0x130
   15670:	f507 729c 	add.w	r2, r7, #312	; 0x138
   15674:	4618      	mov	r0, r3
   15676:	4611      	mov	r1, r2
   15678:	f7f9 fbb8 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   1567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
   15680:	4618      	mov	r0, r3
   15682:	f7f9 f997 	bl	e9b4 <_ZNK8Position4getYEv>
   15686:	4603      	mov	r3, r0
   15688:	4618      	mov	r0, r3
   1568a:	4951      	ldr	r1, [pc, #324]	(157d0 <_ZN19RecalibrerOdometrie6updateEv+0x80c>)
   1568c:	f005 fd8e 	bl	1b1ac <__aeabi_fcmplt>
   15690:	4603      	mov	r3, r0
   15692:	2b00      	cmp	r3, #0
   15694:	d003      	beq.n	1569e <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   15696:	f04f 0301 	mov.w	r3, #1	; 0x1
   1569a:	62bb      	str	r3, [r7, #40]
   1569c:	e002      	b.n	156a4 <_ZN19RecalibrerOdometrie6updateEv+0x6e0>
   1569e:	f04f 0300 	mov.w	r3, #0	; 0x0
   156a2:	62bb      	str	r3, [r7, #40]
   156a4:	6abb      	ldr	r3, [r7, #40]
   156a6:	2b00      	cmp	r3, #0
   156a8:	d074      	beq.n	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
              && Odometrie::odometrie->getPos().getPosition().getY() < 150)
             ))// && (StrategieV2::getIsBlue() ? Odometrie::odometrie->getPos().getPosition().getX() < 200 : Odometrie::odometrie->getPos().getPosition().getX() > 2800))
        {
#ifdef ROBOTHW //A adapter à la taille du robot

            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   156aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   156ae:	681b      	ldr	r3, [r3, #0]
   156b0:	6a9b      	ldr	r3, [r3, #40]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d005      	beq.n	156c2 <_ZN19RecalibrerOdometrie6updateEv+0x6fe>
   156b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   156ba:	681b      	ldr	r3, [r3, #0]
   156bc:	6a9b      	ldr	r3, [r3, #40]
   156be:	2b02      	cmp	r3, #2
   156c0:	d106      	bne.n	156d0 <_ZN19RecalibrerOdometrie6updateEv+0x70c>
                Odometrie::odometrie->setY(2000-95);
   156c2:	4b3b      	ldr	r3, [pc, #236]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   156c4:	681b      	ldr	r3, [r3, #0]
   156c6:	4618      	mov	r0, r3
   156c8:	4947      	ldr	r1, [pc, #284]	(157e8 <_ZN19RecalibrerOdometrie6updateEv+0x824>)
   156ca:	f7f4 fa97 	bl	9bfc <_ZN9Odometrie4setYEf>
   156ce:	e005      	b.n	156dc <_ZN19RecalibrerOdometrie6updateEv+0x718>
            else
                Odometrie::odometrie->setY(95);
   156d0:	4b37      	ldr	r3, [pc, #220]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   156d2:	681b      	ldr	r3, [r3, #0]
   156d4:	4618      	mov	r0, r3
   156d6:	493f      	ldr	r1, [pc, #252]	(157d4 <_ZN19RecalibrerOdometrie6updateEv+0x810>)
   156d8:	f7f4 fa90 	bl	9bfc <_ZN9Odometrie4setYEf>
#endif
            StrategieV2::setEnTrainDeRecalibrer(false);
   156dc:	f04f 0000 	mov.w	r0, #0	; 0x0
   156e0:	f000 f9fe 	bl	15ae0 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            StrategieV2::setCurrentGoal(positionDepart, false);
   156e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   156e8:	681a      	ldr	r2, [r3, #0]
   156ea:	4b2f      	ldr	r3, [pc, #188]	(157a8 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   156ec:	9300      	str	r3, [sp, #0]
   156ee:	f102 0318 	add.w	r3, r2, #24	; 0x18
   156f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   156f6:	f04f 0200 	mov.w	r2, #0	; 0x0
   156fa:	4b2c      	ldr	r3, [pc, #176]	(157ac <_ZN19RecalibrerOdometrie6updateEv+0x7e8>)
   156fc:	f000 fbea 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            //StrategieV2::setCurrentGoal(Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0), false, 1); // on avance  encore un peu
            //goalPosition2 = Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0);
            status = 5;
   15700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15704:	681a      	ldr	r2, [r3, #0]
   15706:	f04f 0305 	mov.w	r3, #5	; 0x5
   1570a:	60d3      	str	r3, [r2, #12]
            timeBlockedX = 0;
   1570c:	4a34      	ldr	r2, [pc, #208]	(157e0 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1570e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15712:	6013      	str	r3, [r2, #0]
   15714:	e03e      	b.n	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 5)
   15716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1571a:	681b      	ldr	r3, [r3, #0]
   1571c:	68db      	ldr	r3, [r3, #12]
   1571e:	2b05      	cmp	r3, #5
   15720:	d138      	bne.n	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();//positionGoal2 -
   15722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15726:	681b      	ldr	r3, [r3, #0]
   15728:	f103 0418 	add.w	r4, r3, #24	; 0x18
   1572c:	4b20      	ldr	r3, [pc, #128]	(157b0 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1572e:	681a      	ldr	r2, [r3, #0]
   15730:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
   15734:	4618      	mov	r0, r3
   15736:	4611      	mov	r1, r2
   15738:	f7f4 f9e2 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   1573c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
   15740:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
   15744:	4618      	mov	r0, r3
   15746:	4611      	mov	r1, r2
   15748:	f7f9 fb50 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
   1574c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   15750:	f507 72a2 	add.w	r2, r7, #324	; 0x144
   15754:	4618      	mov	r0, r3
   15756:	4621      	mov	r1, r4
   15758:	f7f9 f97a 	bl	ea50 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   1575c:	f107 0334 	add.w	r3, r7, #52	; 0x34
   15760:	4618      	mov	r0, r3
   15762:	f7f9 fa83 	bl	ec6c <_ZNK8Position8getNormeEv>
   15766:	4602      	mov	r2, r0
   15768:	f04f 0300 	mov.w	r3, #0	; 0x0
   1576c:	717b      	strb	r3, [r7, #5]
   1576e:	4610      	mov	r0, r2
   15770:	4910      	ldr	r1, [pc, #64]	(157b4 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   15772:	f005 fd1b 	bl	1b1ac <__aeabi_fcmplt>
   15776:	4603      	mov	r3, r0
   15778:	2b00      	cmp	r3, #0
   1577a:	d002      	beq.n	15782 <_ZN19RecalibrerOdometrie6updateEv+0x7be>
   1577c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15780:	717b      	strb	r3, [r7, #5]
   15782:	797b      	ldrb	r3, [r7, #5]
   15784:	2b00      	cmp	r3, #0
   15786:	d005      	beq.n	15794 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            status = -1;
   15788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1578c:	681a      	ldr	r2, [r3, #0]
   1578e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15792:	60d3      	str	r3, [r2, #12]
        }
    }
    return status;
   15794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15798:	681b      	ldr	r3, [r3, #0]
   1579a:	68db      	ldr	r3, [r3, #12]
//#endif
}
   1579c:	4618      	mov	r0, r3
   1579e:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   157a2:	46bd      	mov	sp, r7
   157a4:	bd90      	pop	{r4, r7, pc}
   157a6:	46c0      	nop			(mov r8, r8)
   157a8:	c2c80000 	.word	0xc2c80000
   157ac:	40400000 	.word	0x40400000
   157b0:	20000578 	.word	0x20000578
   157b4:	42200000 	.word	0x42200000
   157b8:	00000000 	.word	0x00000000
   157bc:	3f000000 	.word	0x3f000000
   157c0:	453b8000 	.word	0x453b8000
   157c4:	c0a00000 	.word	0xc0a00000
   157c8:	200005a4 	.word	0x200005a4
   157cc:	45322000 	.word	0x45322000
   157d0:	43160000 	.word	0x43160000
   157d4:	42be0000 	.word	0x42be0000
   157d8:	45359000 	.word	0x45359000
   157dc:	44fa0000 	.word	0x44fa0000
   157e0:	200005a0 	.word	0x200005a0
   157e4:	44e74000 	.word	0x44e74000
   157e8:	44ee2000 	.word	0x44ee2000

000157ec <_ZN19RecalibrerOdometrieD0Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   157ec:	b580      	push	{r7, lr}
   157ee:	b082      	sub	sp, #8
   157f0:	af00      	add	r7, sp, #0
   157f2:	6078      	str	r0, [r7, #4]
   157f4:	687a      	ldr	r2, [r7, #4]
   157f6:	4b0a      	ldr	r3, [pc, #40]	(15820 <_ZN19RecalibrerOdometrieD0Ev+0x34>)
   157f8:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   157fa:	687b      	ldr	r3, [r7, #4]
   157fc:	4618      	mov	r0, r3
   157fe:	f7ff fb79 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   15802:	f04f 0301 	mov.w	r3, #1	; 0x1
   15806:	b2db      	uxtb	r3, r3
   15808:	2b00      	cmp	r3, #0
   1580a:	d002      	beq.n	15812 <_ZN19RecalibrerOdometrieD0Ev+0x26>
   1580c:	6878      	ldr	r0, [r7, #4]
   1580e:	f7f8 fff1 	bl	e7f4 <_ZdlPv>
   15812:	687b      	ldr	r3, [r7, #4]
   15814:	4618      	mov	r0, r3
   15816:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1581a:	46bd      	mov	sp, r7
   1581c:	bd80      	pop	{r7, pc}
   1581e:	46c0      	nop			(mov r8, r8)
   15820:	00021ff8 	.word	0x00021ff8

00015824 <_ZN19RecalibrerOdometrieD1Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   15824:	b580      	push	{r7, lr}
   15826:	b082      	sub	sp, #8
   15828:	af00      	add	r7, sp, #0
   1582a:	6078      	str	r0, [r7, #4]
   1582c:	687a      	ldr	r2, [r7, #4]
   1582e:	4b0a      	ldr	r3, [pc, #40]	(15858 <_ZN19RecalibrerOdometrieD1Ev+0x34>)
   15830:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   15832:	687b      	ldr	r3, [r7, #4]
   15834:	4618      	mov	r0, r3
   15836:	f7ff fb5d 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   1583a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1583e:	b2db      	uxtb	r3, r3
   15840:	2b00      	cmp	r3, #0
   15842:	d002      	beq.n	1584a <_ZN19RecalibrerOdometrieD1Ev+0x26>
   15844:	6878      	ldr	r0, [r7, #4]
   15846:	f7f8 ffd5 	bl	e7f4 <_ZdlPv>
   1584a:	687b      	ldr	r3, [r7, #4]
   1584c:	4618      	mov	r0, r3
   1584e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15852:	46bd      	mov	sp, r7
   15854:	bd80      	pop	{r7, pc}
   15856:	46c0      	nop			(mov r8, r8)
   15858:	00021ff8 	.word	0x00021ff8

0001585c <_ZN19RecalibrerOdometrieD2Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   1585c:	b580      	push	{r7, lr}
   1585e:	b082      	sub	sp, #8
   15860:	af00      	add	r7, sp, #0
   15862:	6078      	str	r0, [r7, #4]
   15864:	687a      	ldr	r2, [r7, #4]
   15866:	4b0a      	ldr	r3, [pc, #40]	(15890 <_ZN19RecalibrerOdometrieD2Ev+0x34>)
   15868:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1586a:	687b      	ldr	r3, [r7, #4]
   1586c:	4618      	mov	r0, r3
   1586e:	f7ff fb41 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   15872:	f04f 0300 	mov.w	r3, #0	; 0x0
   15876:	b2db      	uxtb	r3, r3
   15878:	2b00      	cmp	r3, #0
   1587a:	d002      	beq.n	15882 <_ZN19RecalibrerOdometrieD2Ev+0x26>
   1587c:	6878      	ldr	r0, [r7, #4]
   1587e:	f7f8 ffb9 	bl	e7f4 <_ZdlPv>
   15882:	687b      	ldr	r3, [r7, #4]
   15884:	4618      	mov	r0, r3
   15886:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1588a:	46bd      	mov	sp, r7
   1588c:	bd80      	pop	{r7, pc}
   1588e:	46c0      	nop			(mov r8, r8)
   15890:	00021ff8 	.word	0x00021ff8

00015894 <_ZN19RecalibrerOdometrieC1Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   15894:	b590      	push	{r4, r7, lr}
   15896:	b089      	sub	sp, #36
   15898:	af00      	add	r7, sp, #0
   1589a:	60f8      	str	r0, [r7, #12]
   1589c:	4608      	mov	r0, r1
   1589e:	4639      	mov	r1, r7
   158a0:	e881 000c 	stmia.w	r1, {r2, r3}
   158a4:	4603      	mov	r3, r0
   158a6:	72fb      	strb	r3, [r7, #11]
   158a8:	68fc      	ldr	r4, [r7, #12]
   158aa:	f107 0310 	add.w	r3, r7, #16	; 0x10
   158ae:	4618      	mov	r0, r3
   158b0:	4923      	ldr	r1, [pc, #140]	(15940 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   158b2:	4a23      	ldr	r2, [pc, #140]	(15940 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   158b4:	f04f 0301 	mov.w	r3, #1	; 0x1
   158b8:	f7f9 f85c 	bl	e974 <_ZN8PositionC1Effb>
   158bc:	4620      	mov	r0, r4
   158be:	f107 0310 	add.w	r3, r7, #16	; 0x10
   158c2:	e893 0006 	ldmia.w	r3, {r1, r2}
   158c6:	f7ff fb55 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   158ca:	68fa      	ldr	r2, [r7, #12]
   158cc:	4b1d      	ldr	r3, [pc, #116]	(15944 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xb0>)
   158ce:	6013      	str	r3, [r2, #0]
   158d0:	68fb      	ldr	r3, [r7, #12]
   158d2:	f103 0318 	add.w	r3, r3, #24	; 0x18
   158d6:	4618      	mov	r0, r3
   158d8:	f7f9 f824 	bl	e924 <_ZN8PositionC1Ev>
   158dc:	68fb      	ldr	r3, [r7, #12]
   158de:	f103 0320 	add.w	r3, r3, #32	; 0x20
   158e2:	4618      	mov	r0, r3
   158e4:	f7f9 f81e 	bl	e924 <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   158e8:	68fa      	ldr	r2, [r7, #12]
   158ea:	7afb      	ldrb	r3, [r7, #11]
   158ec:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   158f0:	68fb      	ldr	r3, [r7, #12]
   158f2:	f103 0318 	add.w	r3, r3, #24	; 0x18
   158f6:	4618      	mov	r0, r3
   158f8:	463b      	mov	r3, r7
   158fa:	e893 0006 	ldmia.w	r3, {r1, r2}
   158fe:	f7f9 f8cd 	bl	ea9c <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   15902:	68fb      	ldr	r3, [r7, #12]
   15904:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15908:	68fb      	ldr	r3, [r7, #12]
   1590a:	f893 c02c 	ldrb.w	ip, [r3, #44]
   1590e:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15912:	4618      	mov	r0, r3
   15914:	490a      	ldr	r1, [pc, #40]	(15940 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   15916:	4a0a      	ldr	r2, [pc, #40]	(15940 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   15918:	4663      	mov	r3, ip
   1591a:	f7f9 f82b 	bl	e974 <_ZN8PositionC1Effb>
   1591e:	4620      	mov	r0, r4
   15920:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15924:	e893 0006 	ldmia.w	r3, {r1, r2}
   15928:	f7f9 f8b8 	bl	ea9c <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   1592c:	68fa      	ldr	r2, [r7, #12]
   1592e:	6b3b      	ldr	r3, [r7, #48]
   15930:	6293      	str	r3, [r2, #40]
}
   15932:	68fb      	ldr	r3, [r7, #12]
   15934:	4618      	mov	r0, r3
   15936:	f107 0724 	add.w	r7, r7, #36	; 0x24
   1593a:	46bd      	mov	sp, r7
   1593c:	bd90      	pop	{r4, r7, pc}
   1593e:	46c0      	nop			(mov r8, r8)
   15940:	00000000 	.word	0x00000000
   15944:	00021ff8 	.word	0x00021ff8

00015948 <_ZN19RecalibrerOdometrieC2Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   15948:	b590      	push	{r4, r7, lr}
   1594a:	b089      	sub	sp, #36
   1594c:	af00      	add	r7, sp, #0
   1594e:	60f8      	str	r0, [r7, #12]
   15950:	4608      	mov	r0, r1
   15952:	4639      	mov	r1, r7
   15954:	e881 000c 	stmia.w	r1, {r2, r3}
   15958:	4603      	mov	r3, r0
   1595a:	72fb      	strb	r3, [r7, #11]
   1595c:	68fc      	ldr	r4, [r7, #12]
   1595e:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15962:	4618      	mov	r0, r3
   15964:	4923      	ldr	r1, [pc, #140]	(159f4 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15966:	4a23      	ldr	r2, [pc, #140]	(159f4 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15968:	f04f 0301 	mov.w	r3, #1	; 0x1
   1596c:	f7f9 f802 	bl	e974 <_ZN8PositionC1Effb>
   15970:	4620      	mov	r0, r4
   15972:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15976:	e893 0006 	ldmia.w	r3, {r1, r2}
   1597a:	f7ff fafb 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   1597e:	68fa      	ldr	r2, [r7, #12]
   15980:	4b1d      	ldr	r3, [pc, #116]	(159f8 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xb0>)
   15982:	6013      	str	r3, [r2, #0]
   15984:	68fb      	ldr	r3, [r7, #12]
   15986:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1598a:	4618      	mov	r0, r3
   1598c:	f7f8 ffca 	bl	e924 <_ZN8PositionC1Ev>
   15990:	68fb      	ldr	r3, [r7, #12]
   15992:	f103 0320 	add.w	r3, r3, #32	; 0x20
   15996:	4618      	mov	r0, r3
   15998:	f7f8 ffc4 	bl	e924 <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   1599c:	68fa      	ldr	r2, [r7, #12]
   1599e:	7afb      	ldrb	r3, [r7, #11]
   159a0:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   159a4:	68fb      	ldr	r3, [r7, #12]
   159a6:	f103 0318 	add.w	r3, r3, #24	; 0x18
   159aa:	4618      	mov	r0, r3
   159ac:	463b      	mov	r3, r7
   159ae:	e893 0006 	ldmia.w	r3, {r1, r2}
   159b2:	f7f9 f873 	bl	ea9c <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   159b6:	68fb      	ldr	r3, [r7, #12]
   159b8:	f103 0420 	add.w	r4, r3, #32	; 0x20
   159bc:	68fb      	ldr	r3, [r7, #12]
   159be:	f893 c02c 	ldrb.w	ip, [r3, #44]
   159c2:	f107 0318 	add.w	r3, r7, #24	; 0x18
   159c6:	4618      	mov	r0, r3
   159c8:	490a      	ldr	r1, [pc, #40]	(159f4 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   159ca:	4a0a      	ldr	r2, [pc, #40]	(159f4 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   159cc:	4663      	mov	r3, ip
   159ce:	f7f8 ffd1 	bl	e974 <_ZN8PositionC1Effb>
   159d2:	4620      	mov	r0, r4
   159d4:	f107 0318 	add.w	r3, r7, #24	; 0x18
   159d8:	e893 0006 	ldmia.w	r3, {r1, r2}
   159dc:	f7f9 f85e 	bl	ea9c <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   159e0:	68fa      	ldr	r2, [r7, #12]
   159e2:	6b3b      	ldr	r3, [r7, #48]
   159e4:	6293      	str	r3, [r2, #40]
}
   159e6:	68fb      	ldr	r3, [r7, #12]
   159e8:	4618      	mov	r0, r3
   159ea:	f107 0724 	add.w	r7, r7, #36	; 0x24
   159ee:	46bd      	mov	sp, r7
   159f0:	bd90      	pop	{r4, r7, pc}
   159f2:	46c0      	nop			(mov r8, r8)
   159f4:	00000000 	.word	0x00000000
   159f8:	00021ff8 	.word	0x00021ff8

000159fc <_ZN11StrategieV212getTimeSpentEv>:
StrategieV2::~StrategieV2()
{
    //dtor
}

long StrategieV2::getTimeSpent()
   159fc:	b480      	push	{r7}
   159fe:	af00      	add	r7, sp, #0
{
    return updateCount * 5;
   15a00:	4b04      	ldr	r3, [pc, #16]	(15a14 <_ZN11StrategieV212getTimeSpentEv+0x18>)
   15a02:	681a      	ldr	r2, [r3, #0]
   15a04:	4613      	mov	r3, r2
   15a06:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15a0a:	4413      	add	r3, r2
}
   15a0c:	4618      	mov	r0, r3
   15a0e:	46bd      	mov	sp, r7
   15a10:	bc80      	pop	{r7}
   15a12:	4770      	bx	lr
   15a14:	200005ac 	.word	0x200005ac

00015a18 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::addTemporaryAction(MediumLevelAction* action)
   15a18:	b480      	push	{r7}
   15a1a:	b083      	sub	sp, #12
   15a1c:	af00      	add	r7, sp, #0
   15a1e:	6078      	str	r0, [r7, #4]
{
    currentAction = action;
   15a20:	4a05      	ldr	r2, [pc, #20]	(15a38 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x20>)
   15a22:	687b      	ldr	r3, [r7, #4]
   15a24:	6013      	str	r3, [r2, #0]
    mustDeleteAction = true; // this is a temporary action that needs to be deleted
   15a26:	4a05      	ldr	r2, [pc, #20]	(15a3c <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x24>)
   15a28:	f04f 0301 	mov.w	r3, #1	; 0x1
   15a2c:	7013      	strb	r3, [r2, #0]
}
   15a2e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15a32:	46bd      	mov	sp, r7
   15a34:	bc80      	pop	{r7}
   15a36:	4770      	bx	lr
   15a38:	200005b4 	.word	0x200005b4
   15a3c:	20000642 	.word	0x20000642

00015a40 <_ZN11StrategieV214setJustAvoidedEb>:
void StrategieV2::setJustAvoided(bool avoided)
   15a40:	b480      	push	{r7}
   15a42:	b083      	sub	sp, #12
   15a44:	af00      	add	r7, sp, #0
   15a46:	4603      	mov	r3, r0
   15a48:	71fb      	strb	r3, [r7, #7]
{
    hasJustAvoided = avoided;
   15a4a:	4a04      	ldr	r2, [pc, #16]	(15a5c <_ZN11StrategieV214setJustAvoidedEb+0x1c>)
   15a4c:	79fb      	ldrb	r3, [r7, #7]
   15a4e:	7013      	strb	r3, [r2, #0]
}
   15a50:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15a54:	46bd      	mov	sp, r7
   15a56:	bc80      	pop	{r7}
   15a58:	4770      	bx	lr
   15a5a:	46c0      	nop			(mov r8, r8)
   15a5c:	20000641 	.word	0x20000641

00015a60 <_ZN11StrategieV214getJustAvoidedEv>:
bool StrategieV2::getJustAvoided()
   15a60:	b480      	push	{r7}
   15a62:	af00      	add	r7, sp, #0
{
    return hasJustAvoided;
   15a64:	4b02      	ldr	r3, [pc, #8]	(15a70 <_ZN11StrategieV214getJustAvoidedEv+0x10>)
   15a66:	781b      	ldrb	r3, [r3, #0]
}
   15a68:	4618      	mov	r0, r3
   15a6a:	46bd      	mov	sp, r7
   15a6c:	bc80      	pop	{r7}
   15a6e:	4770      	bx	lr
   15a70:	20000641 	.word	0x20000641

00015a74 <_ZN11StrategieV29setIsBlueEb>:
{
    somethingDetected = true;
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
}

void StrategieV2::setIsBlue(bool blue)
   15a74:	b480      	push	{r7}
   15a76:	b083      	sub	sp, #12
   15a78:	af00      	add	r7, sp, #0
   15a7a:	4603      	mov	r3, r0
   15a7c:	71fb      	strb	r3, [r7, #7]
{
    isBlue = blue;
   15a7e:	4a04      	ldr	r2, [pc, #16]	(15a90 <_ZN11StrategieV29setIsBlueEb+0x1c>)
   15a80:	79fb      	ldrb	r3, [r7, #7]
   15a82:	7013      	strb	r3, [r2, #0]
}
   15a84:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15a88:	46bd      	mov	sp, r7
   15a8a:	bc80      	pop	{r7}
   15a8c:	4770      	bx	lr
   15a8e:	46c0      	nop			(mov r8, r8)
   15a90:	2000064d 	.word	0x2000064d

00015a94 <_ZN11StrategieV29getIsBlueEv>:
bool StrategieV2::getIsBlue()
   15a94:	b480      	push	{r7}
   15a96:	af00      	add	r7, sp, #0
{
    return isBlue;
   15a98:	4b02      	ldr	r3, [pc, #8]	(15aa4 <_ZN11StrategieV29getIsBlueEv+0x10>)
   15a9a:	781b      	ldrb	r3, [r3, #0]
}
   15a9c:	4618      	mov	r0, r3
   15a9e:	46bd      	mov	sp, r7
   15aa0:	bc80      	pop	{r7}
   15aa2:	4770      	bx	lr
   15aa4:	2000064d 	.word	0x2000064d

00015aa8 <_ZN11StrategieV211gatherGlassEv>:

void StrategieV2::gatherGlass()
   15aa8:	b480      	push	{r7}
   15aaa:	af00      	add	r7, sp, #0
{
    glassGathered++;
   15aac:	4b0a      	ldr	r3, [pc, #40]	(15ad8 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15aae:	681b      	ldr	r3, [r3, #0]
   15ab0:	f103 0201 	add.w	r2, r3, #1	; 0x1
   15ab4:	4b08      	ldr	r3, [pc, #32]	(15ad8 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15ab6:	601a      	str	r2, [r3, #0]
    if (glassGathered > 0)
   15ab8:	4b07      	ldr	r3, [pc, #28]	(15ad8 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15aba:	681b      	ldr	r3, [r3, #0]
   15abc:	2b00      	cmp	r3, #0
   15abe:	dd07      	ble.n	15ad0 <_ZN11StrategieV211gatherGlassEv+0x28>
    {
        glassGathered = 0;
   15ac0:	4a05      	ldr	r2, [pc, #20]	(15ad8 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15ac2:	f04f 0300 	mov.w	r3, #0	; 0x0
   15ac6:	6013      	str	r3, [r2, #0]
        hasToGoBase = true;
   15ac8:	4a04      	ldr	r2, [pc, #16]	(15adc <_ZN11StrategieV211gatherGlassEv+0x34>)
   15aca:	f04f 0301 	mov.w	r3, #1	; 0x1
   15ace:	7013      	strb	r3, [r2, #0]
    }
}
   15ad0:	46bd      	mov	sp, r7
   15ad2:	bc80      	pop	{r7}
   15ad4:	4770      	bx	lr
   15ad6:	46c0      	nop			(mov r8, r8)
   15ad8:	20000644 	.word	0x20000644
   15adc:	20000640 	.word	0x20000640

00015ae0 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>:

void StrategieV2::setEnTrainDeRecalibrer(bool recalibre)
   15ae0:	b480      	push	{r7}
   15ae2:	b083      	sub	sp, #12
   15ae4:	af00      	add	r7, sp, #0
   15ae6:	4603      	mov	r3, r0
   15ae8:	71fb      	strb	r3, [r7, #7]
{
    enTrainDeRecalibrerOdometrie = recalibre;
   15aea:	4a04      	ldr	r2, [pc, #16]	(15afc <_ZN11StrategieV222setEnTrainDeRecalibrerEb+0x1c>)
   15aec:	79fb      	ldrb	r3, [r7, #7]
   15aee:	7013      	strb	r3, [r2, #0]
}
   15af0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15af4:	46bd      	mov	sp, r7
   15af6:	bc80      	pop	{r7}
   15af8:	4770      	bx	lr
   15afa:	46c0      	nop			(mov r8, r8)
   15afc:	2000065c 	.word	0x2000065c

00015b00 <_ZN11StrategieV218emptySharpsToCheckEv>:

void StrategieV2::emptySharpsToCheck()
   15b00:	b480      	push	{r7}
   15b02:	b083      	sub	sp, #12
   15b04:	af00      	add	r7, sp, #0
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15b06:	f04f 0300 	mov.w	r3, #0	; 0x0
   15b0a:	607b      	str	r3, [r7, #4]
   15b0c:	e008      	b.n	15b20 <_ZN11StrategieV218emptySharpsToCheckEv+0x20>
        sharpsToCheck[i] = false;
   15b0e:	6879      	ldr	r1, [r7, #4]
   15b10:	4a07      	ldr	r2, [pc, #28]	(15b30 <_ZN11StrategieV218emptySharpsToCheckEv+0x30>)
   15b12:	f04f 0300 	mov.w	r3, #0	; 0x0
   15b16:	5453      	strb	r3, [r2, r1]
    enTrainDeRecalibrerOdometrie = recalibre;
}

void StrategieV2::emptySharpsToCheck()
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15b18:	687b      	ldr	r3, [r7, #4]
   15b1a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15b1e:	607b      	str	r3, [r7, #4]
   15b20:	687b      	ldr	r3, [r7, #4]
   15b22:	2b07      	cmp	r3, #7
   15b24:	ddf3      	ble.n	15b0e <_ZN11StrategieV218emptySharpsToCheckEv+0xe>
        sharpsToCheck[i] = false;
}
   15b26:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15b2a:	46bd      	mov	sp, r7
   15b2c:	bc80      	pop	{r7}
   15b2e:	4770      	bx	lr
   15b30:	2000064e 	.word	0x2000064e

00015b34 <_ZN11StrategieV210setCommandEP7Command>:
#endif
    }

}

void StrategieV2::setCommand(Command* command)
   15b34:	b480      	push	{r7}
   15b36:	b083      	sub	sp, #12
   15b38:	af00      	add	r7, sp, #0
   15b3a:	6078      	str	r0, [r7, #4]
{
    currentCommand = command;
   15b3c:	4a03      	ldr	r2, [pc, #12]	(15b4c <_ZN11StrategieV210setCommandEP7Command+0x18>)
   15b3e:	687b      	ldr	r3, [r7, #4]
   15b40:	6013      	str	r3, [r2, #0]
}
   15b42:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15b46:	46bd      	mov	sp, r7
   15b48:	bc80      	pop	{r7}
   15b4a:	4770      	bx	lr
   15b4c:	200005b0 	.word	0x200005b0

00015b50 <_ZN11StrategieV219setTourneSurSoiMemeEb>:
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}

void StrategieV2::setTourneSurSoiMeme(bool tourne)
   15b50:	b480      	push	{r7}
   15b52:	b083      	sub	sp, #12
   15b54:	af00      	add	r7, sp, #0
   15b56:	4603      	mov	r3, r0
   15b58:	71fb      	strb	r3, [r7, #7]
{
    tourneSurSoiMeme = tourne;
   15b5a:	4a04      	ldr	r2, [pc, #16]	(15b6c <_ZN11StrategieV219setTourneSurSoiMemeEb+0x1c>)
   15b5c:	79fb      	ldrb	r3, [r7, #7]
   15b5e:	7013      	strb	r3, [r2, #0]
}
   15b60:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15b64:	46bd      	mov	sp, r7
   15b66:	bc80      	pop	{r7}
   15b68:	4770      	bx	lr
   15b6a:	46c0      	nop			(mov r8, r8)
   15b6c:	20000668 	.word	0x20000668

00015b70 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE>:
void StrategieV2::setCommand(Command* command)
{
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
   15b70:	b580      	push	{r7, lr}
   15b72:	b088      	sub	sp, #32
   15b74:	af00      	add	r7, sp, #0
   15b76:	4603      	mov	r3, r0
   15b78:	73fb      	strb	r3, [r7, #15]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15b7a:	f04f 0300 	mov.w	r3, #0	; 0x0
   15b7e:	61fb      	str	r3, [r7, #28]
   15b80:	e04a      	b.n	15c18 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa8>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
   15b82:	4b29      	ldr	r3, [pc, #164]	(15c28 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   15b84:	681a      	ldr	r2, [r3, #0]
   15b86:	69fb      	ldr	r3, [r7, #28]
   15b88:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15b8c:	4413      	add	r3, r2
   15b8e:	681b      	ldr	r3, [r3, #0]
   15b90:	4618      	mov	r0, r3
   15b92:	f7f7 fb11 	bl	d1b8 <_ZN11SharpSensor7getNameEv>
   15b96:	4603      	mov	r3, r0
   15b98:	461a      	mov	r2, r3
   15b9a:	7bfb      	ldrb	r3, [r7, #15]
   15b9c:	4293      	cmp	r3, r2
   15b9e:	d115      	bne.n	15bcc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15ba0:	69fa      	ldr	r2, [r7, #28]
   15ba2:	4b22      	ldr	r3, [pc, #136]	(15c2c <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xbc>)
   15ba4:	5c9b      	ldrb	r3, [r3, r2]
   15ba6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15baa:	b2db      	uxtb	r3, r3
   15bac:	2b00      	cmp	r3, #0
   15bae:	d10d      	bne.n	15bcc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15bb0:	4b1f      	ldr	r3, [pc, #124]	(15c30 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xc0>)
   15bb2:	781b      	ldrb	r3, [r3, #0]
   15bb4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15bb8:	b2db      	uxtb	r3, r3
   15bba:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15bbe:	b2db      	uxtb	r3, r3
   15bc0:	2b00      	cmp	r3, #0
   15bc2:	d103      	bne.n	15bcc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15bc4:	f04f 0301 	mov.w	r3, #1	; 0x1
   15bc8:	60bb      	str	r3, [r7, #8]
   15bca:	e002      	b.n	15bd2 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x62>
   15bcc:	f04f 0300 	mov.w	r3, #0	; 0x0
   15bd0:	60bb      	str	r3, [r7, #8]
   15bd2:	68bb      	ldr	r3, [r7, #8]
   15bd4:	2b00      	cmp	r3, #0
   15bd6:	d01b      	beq.n	15c10 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa0>
            return sharps[i]->getValue().b;
   15bd8:	4b13      	ldr	r3, [pc, #76]	(15c28 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   15bda:	681a      	ldr	r2, [r3, #0]
   15bdc:	69fb      	ldr	r3, [r7, #28]
   15bde:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15be2:	4413      	add	r3, r2
   15be4:	681b      	ldr	r3, [r3, #0]
   15be6:	681b      	ldr	r3, [r3, #0]
   15be8:	f103 0308 	add.w	r3, r3, #8	; 0x8
   15bec:	f8d3 c000 	ldr.w	ip, [r3]
   15bf0:	4b0d      	ldr	r3, [pc, #52]	(15c28 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   15bf2:	681a      	ldr	r2, [r3, #0]
   15bf4:	69fb      	ldr	r3, [r7, #28]
   15bf6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15bfa:	4413      	add	r3, r2
   15bfc:	681a      	ldr	r2, [r3, #0]
   15bfe:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15c02:	4618      	mov	r0, r3
   15c04:	4611      	mov	r1, r2
   15c06:	47e0      	blx	ip
   15c08:	7e3b      	ldrb	r3, [r7, #24]
   15c0a:	607b      	str	r3, [r7, #4]
}
   15c0c:	6878      	ldr	r0, [r7, #4]
   15c0e:	e006      	b.n	15c1e <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xae>
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15c10:	69fb      	ldr	r3, [r7, #28]
   15c12:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15c16:	61fb      	str	r3, [r7, #28]
   15c18:	69fb      	ldr	r3, [r7, #28]
   15c1a:	2b07      	cmp	r3, #7
   15c1c:	ddb1      	ble.n	15b82 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}
   15c1e:	f107 0720 	add.w	r7, r7, #32	; 0x20
   15c22:	46bd      	mov	sp, r7
   15c24:	bd80      	pop	{r7, pc}
   15c26:	46c0      	nop			(mov r8, r8)
   15c28:	2000063c 	.word	0x2000063c
   15c2c:	2000064e 	.word	0x2000064e
   15c30:	20000668 	.word	0x20000668

00015c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>:
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
   15c34:	b580      	push	{r7, lr}
   15c36:	b084      	sub	sp, #16
   15c38:	af00      	add	r7, sp, #0
   15c3a:	4603      	mov	r3, r0
   15c3c:	71fb      	strb	r3, [r7, #7]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15c3e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15c42:	60fb      	str	r3, [r7, #12]
   15c44:	e01c      	b.n	15c80 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x4c>
        if (sharps[i]->getName() == name)
   15c46:	4b12      	ldr	r3, [pc, #72]	(15c90 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x5c>)
   15c48:	681a      	ldr	r2, [r3, #0]
   15c4a:	68fb      	ldr	r3, [r7, #12]
   15c4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15c50:	4413      	add	r3, r2
   15c52:	681b      	ldr	r3, [r3, #0]
   15c54:	4618      	mov	r0, r3
   15c56:	f7f7 faaf 	bl	d1b8 <_ZN11SharpSensor7getNameEv>
   15c5a:	4603      	mov	r3, r0
   15c5c:	461a      	mov	r2, r3
   15c5e:	79fb      	ldrb	r3, [r7, #7]
   15c60:	4293      	cmp	r3, r2
   15c62:	bf14      	ite	ne
   15c64:	2300      	movne	r3, #0
   15c66:	2301      	moveq	r3, #1
   15c68:	b2db      	uxtb	r3, r3
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d004      	beq.n	15c78 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x44>
            sharpsToCheck[i] = true;
   15c6e:	68f9      	ldr	r1, [r7, #12]
   15c70:	4a08      	ldr	r2, [pc, #32]	(15c94 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x60>)
   15c72:	f04f 0301 	mov.w	r3, #1	; 0x1
   15c76:	5453      	strb	r3, [r2, r1]
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15c78:	68fb      	ldr	r3, [r7, #12]
   15c7a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15c7e:	60fb      	str	r3, [r7, #12]
   15c80:	68fb      	ldr	r3, [r7, #12]
   15c82:	2b07      	cmp	r3, #7
   15c84:	dddf      	ble.n	15c46 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name)
            sharpsToCheck[i] = true;
}
   15c86:	f107 0710 	add.w	r7, r7, #16	; 0x10
   15c8a:	46bd      	mov	sp, r7
   15c8c:	bd80      	pop	{r7, pc}
   15c8e:	46c0      	nop			(mov r8, r8)
   15c90:	2000063c 	.word	0x2000063c
   15c94:	2000064e 	.word	0x2000064e

00015c98 <_ZN11StrategieV217enableSharpsGroupEb>:

void StrategieV2::enableSharpsGroup(bool front)
   15c98:	b580      	push	{r7, lr}
   15c9a:	b082      	sub	sp, #8
   15c9c:	af00      	add	r7, sp, #0
   15c9e:	4603      	mov	r3, r0
   15ca0:	71fb      	strb	r3, [r7, #7]
{
    emptySharpsToCheck();
   15ca2:	f7ff ff2d 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>

    if (front)
   15ca6:	79fb      	ldrb	r3, [r7, #7]
   15ca8:	2b00      	cmp	r3, #0
   15caa:	d010      	beq.n	15cce <_ZN11StrategieV217enableSharpsGroupEb+0x36>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::FRONT_LEFT);
        enableSharp(SharpSensor::FRONT_RIGHT);
        enableSharp(SharpSensor::FRONT_MIDDLE);
#else
        enableSharp(SharpSensor::FRONT_LEFT);
   15cac:	f04f 0002 	mov.w	r0, #2	; 0x2
   15cb0:	f7ff ffc0 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::FRONT_RIGHT);
   15cb4:	f04f 0003 	mov.w	r0, #3	; 0x3
   15cb8:	f7ff ffbc 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_FRONT);
   15cbc:	f04f 0004 	mov.w	r0, #4	; 0x4
   15cc0:	f7ff ffb8 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_FRONT);
   15cc4:	f04f 0006 	mov.w	r0, #6	; 0x6
   15cc8:	f7ff ffb4 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
   15ccc:	e00f      	b.n	15cee <_ZN11StrategieV217enableSharpsGroupEb+0x56>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::BACK_LEFT);
        enableSharp(SharpSensor::BACK_RIGHT);
        enableSharp(SharpSensor::BACK_MIDDLE);
#else
        enableSharp(SharpSensor::BACK_LEFT);
   15cce:	f04f 0001 	mov.w	r0, #1	; 0x1
   15cd2:	f7ff ffaf 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::BACK_RIGHT);
   15cd6:	f04f 0000 	mov.w	r0, #0	; 0x0
   15cda:	f7ff ffab 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_BACK);
   15cde:	f04f 0005 	mov.w	r0, #5	; 0x5
   15ce2:	f7ff ffa7 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_BACK);
   15ce6:	f04f 0007 	mov.w	r0, #7	; 0x7
   15cea:	f7ff ffa3 	bl	15c34 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
#endif
    }

}
   15cee:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15cf2:	46bd      	mov	sp, r7
   15cf4:	bd80      	pop	{r7, pc}
   15cf6:	46c0      	nop			(mov r8, r8)

00015cf8 <_ZN11StrategieV211willCollideEv>:
}
bool StrategieV2::getJustAvoided()
{
    return hasJustAvoided;
}
bool StrategieV2::willCollide()
   15cf8:	b580      	push	{r7, lr}
   15cfa:	b082      	sub	sp, #8
   15cfc:	af00      	add	r7, sp, #0
{
    somethingDetected = true;
   15cfe:	4a07      	ldr	r2, [pc, #28]	(15d1c <_ZN11StrategieV211willCollideEv+0x24>)
   15d00:	f04f 0301 	mov.w	r3, #1	; 0x1
   15d04:	7013      	strb	r3, [r2, #0]
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
   15d06:	4b06      	ldr	r3, [pc, #24]	(15d20 <_ZN11StrategieV211willCollideEv+0x28>)
   15d08:	681b      	ldr	r3, [r3, #0]
   15d0a:	4618      	mov	r0, r3
   15d0c:	f04f 0100 	mov.w	r1, #0	; 0x0
   15d10:	f7f1 fbba 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   15d14:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15d18:	46bd      	mov	sp, r7
   15d1a:	bd80      	pop	{r7, pc}
   15d1c:	2000064c 	.word	0x2000064c
   15d20:	20000568 	.word	0x20000568

00015d24 <_ZN11StrategieV26lookAtEff>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::lookAt(Angle a, float maxSpeed)
   15d24:	b580      	push	{r7, lr}
   15d26:	b084      	sub	sp, #16
   15d28:	af00      	add	r7, sp, #0
   15d2a:	60f8      	str	r0, [r7, #12]
   15d2c:	60b9      	str	r1, [r7, #8]
{
    if (currentCommand != NULL)
   15d2e:	4b1b      	ldr	r3, [pc, #108]	(15d9c <_ZN11StrategieV26lookAtEff+0x78>)
   15d30:	681b      	ldr	r3, [r3, #0]
   15d32:	2b00      	cmp	r3, #0
   15d34:	d00d      	beq.n	15d52 <_ZN11StrategieV26lookAtEff+0x2e>
        delete currentCommand;
   15d36:	4b19      	ldr	r3, [pc, #100]	(15d9c <_ZN11StrategieV26lookAtEff+0x78>)
   15d38:	681b      	ldr	r3, [r3, #0]
   15d3a:	2b00      	cmp	r3, #0
   15d3c:	d009      	beq.n	15d52 <_ZN11StrategieV26lookAtEff+0x2e>
   15d3e:	4b17      	ldr	r3, [pc, #92]	(15d9c <_ZN11StrategieV26lookAtEff+0x78>)
   15d40:	681b      	ldr	r3, [r3, #0]
   15d42:	681b      	ldr	r3, [r3, #0]
   15d44:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15d48:	681a      	ldr	r2, [r3, #0]
   15d4a:	4b14      	ldr	r3, [pc, #80]	(15d9c <_ZN11StrategieV26lookAtEff+0x78>)
   15d4c:	681b      	ldr	r3, [r3, #0]
   15d4e:	4618      	mov	r0, r3
   15d50:	4790      	blx	r2
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
   15d52:	f04f 0020 	mov.w	r0, #32	; 0x20
   15d56:	f7f8 fca7 	bl	e6a8 <_Znwj>
   15d5a:	4603      	mov	r3, r0
   15d5c:	603b      	str	r3, [r7, #0]
   15d5e:	683b      	ldr	r3, [r7, #0]
   15d60:	2b00      	cmp	r3, #0
   15d62:	d007      	beq.n	15d74 <_ZN11StrategieV26lookAtEff+0x50>
   15d64:	6838      	ldr	r0, [r7, #0]
   15d66:	68f9      	ldr	r1, [r7, #12]
   15d68:	68ba      	ldr	r2, [r7, #8]
   15d6a:	f7f2 ff79 	bl	8c60 <_ZN18CommandTournerVersC1Eff>
   15d6e:	683b      	ldr	r3, [r7, #0]
   15d70:	607b      	str	r3, [r7, #4]
   15d72:	e001      	b.n	15d78 <_ZN11StrategieV26lookAtEff+0x54>
   15d74:	683b      	ldr	r3, [r7, #0]
   15d76:	607b      	str	r3, [r7, #4]
   15d78:	687a      	ldr	r2, [r7, #4]
   15d7a:	4b08      	ldr	r3, [pc, #32]	(15d9c <_ZN11StrategieV26lookAtEff+0x78>)
   15d7c:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   15d7e:	4b08      	ldr	r3, [pc, #32]	(15da0 <_ZN11StrategieV26lookAtEff+0x7c>)
   15d80:	681a      	ldr	r2, [r3, #0]
   15d82:	4b06      	ldr	r3, [pc, #24]	(15d9c <_ZN11StrategieV26lookAtEff+0x78>)
   15d84:	681b      	ldr	r3, [r3, #0]
   15d86:	4610      	mov	r0, r2
   15d88:	4619      	mov	r1, r3
   15d8a:	f7f1 fb7d 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   15d8e:	f7ff feb7 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   15d92:	f107 0710 	add.w	r7, r7, #16	; 0x10
   15d96:	46bd      	mov	sp, r7
   15d98:	bd80      	pop	{r7, pc}
   15d9a:	46c0      	nop			(mov r8, r8)
   15d9c:	200005b0 	.word	0x200005b0
   15da0:	20000568 	.word	0x20000568

00015da4 <_ZN11StrategieV26lookAtE8Positionf>:
    if (currentCommand != NULL)
        delete currentCommand;
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
}
void StrategieV2::lookAt(Position pos, float maxSpeed)
   15da4:	b580      	push	{r7, lr}
   15da6:	b086      	sub	sp, #24
   15da8:	af00      	add	r7, sp, #0
   15daa:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15dae:	e883 0003 	stmia.w	r3, {r0, r1}
   15db2:	60fa      	str	r2, [r7, #12]
{
    if (currentCommand != NULL)
   15db4:	4b1c      	ldr	r3, [pc, #112]	(15e28 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15db6:	681b      	ldr	r3, [r3, #0]
   15db8:	2b00      	cmp	r3, #0
   15dba:	d00d      	beq.n	15dd8 <_ZN11StrategieV26lookAtE8Positionf+0x34>
        delete currentCommand;
   15dbc:	4b1a      	ldr	r3, [pc, #104]	(15e28 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15dbe:	681b      	ldr	r3, [r3, #0]
   15dc0:	2b00      	cmp	r3, #0
   15dc2:	d009      	beq.n	15dd8 <_ZN11StrategieV26lookAtE8Positionf+0x34>
   15dc4:	4b18      	ldr	r3, [pc, #96]	(15e28 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15dc6:	681b      	ldr	r3, [r3, #0]
   15dc8:	681b      	ldr	r3, [r3, #0]
   15dca:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15dce:	681a      	ldr	r2, [r3, #0]
   15dd0:	4b15      	ldr	r3, [pc, #84]	(15e28 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15dd2:	681b      	ldr	r3, [r3, #0]
   15dd4:	4618      	mov	r0, r3
   15dd6:	4790      	blx	r2
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
   15dd8:	f04f 0020 	mov.w	r0, #32	; 0x20
   15ddc:	f7f8 fc64 	bl	e6a8 <_Znwj>
   15de0:	4603      	mov	r3, r0
   15de2:	607b      	str	r3, [r7, #4]
   15de4:	687b      	ldr	r3, [r7, #4]
   15de6:	2b00      	cmp	r3, #0
   15de8:	d00a      	beq.n	15e00 <_ZN11StrategieV26lookAtE8Positionf+0x5c>
   15dea:	6878      	ldr	r0, [r7, #4]
   15dec:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15df0:	e893 0006 	ldmia.w	r3, {r1, r2}
   15df4:	68fb      	ldr	r3, [r7, #12]
   15df6:	f7f2 ffb7 	bl	8d68 <_ZN18CommandTournerVersC1E8Positionf>
   15dfa:	687b      	ldr	r3, [r7, #4]
   15dfc:	60bb      	str	r3, [r7, #8]
   15dfe:	e001      	b.n	15e04 <_ZN11StrategieV26lookAtE8Positionf+0x60>
   15e00:	687b      	ldr	r3, [r7, #4]
   15e02:	60bb      	str	r3, [r7, #8]
   15e04:	68ba      	ldr	r2, [r7, #8]
   15e06:	4b08      	ldr	r3, [pc, #32]	(15e28 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15e08:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   15e0a:	4b08      	ldr	r3, [pc, #32]	(15e2c <_ZN11StrategieV26lookAtE8Positionf+0x88>)
   15e0c:	681a      	ldr	r2, [r3, #0]
   15e0e:	4b06      	ldr	r3, [pc, #24]	(15e28 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   15e10:	681b      	ldr	r3, [r3, #0]
   15e12:	4610      	mov	r0, r2
   15e14:	4619      	mov	r1, r3
   15e16:	f7f1 fb37 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   15e1a:	f7ff fe71 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   15e1e:	f107 0718 	add.w	r7, r7, #24	; 0x18
   15e22:	46bd      	mov	sp, r7
   15e24:	bd80      	pop	{r7, pc}
   15e26:	46c0      	nop			(mov r8, r8)
   15e28:	200005b0 	.word	0x200005b0
   15e2c:	20000568 	.word	0x20000568

00015e30 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf>:
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
void StrategieV2::setCurrentGoal(Position goal, Position center, float vitesse, bool goBack, Angle precisionAngle)
   15e30:	b580      	push	{r7, lr}
   15e32:	b08a      	sub	sp, #40
   15e34:	af04      	add	r7, sp, #16
   15e36:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   15e3a:	e88c 0003 	stmia.w	ip, {r0, r1}
   15e3e:	f107 0108 	add.w	r1, r7, #8	; 0x8
   15e42:	e881 000c 	stmia.w	r1, {r2, r3}
{
    if (currentCommand != NULL)
   15e46:	4b20      	ldr	r3, [pc, #128]	(15ec8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15e48:	681b      	ldr	r3, [r3, #0]
   15e4a:	2b00      	cmp	r3, #0
   15e4c:	d00d      	beq.n	15e6a <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
        delete currentCommand;
   15e4e:	4b1e      	ldr	r3, [pc, #120]	(15ec8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15e50:	681b      	ldr	r3, [r3, #0]
   15e52:	2b00      	cmp	r3, #0
   15e54:	d009      	beq.n	15e6a <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
   15e56:	4b1c      	ldr	r3, [pc, #112]	(15ec8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15e58:	681b      	ldr	r3, [r3, #0]
   15e5a:	681b      	ldr	r3, [r3, #0]
   15e5c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15e60:	681a      	ldr	r2, [r3, #0]
   15e62:	4b19      	ldr	r3, [pc, #100]	(15ec8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15e64:	681b      	ldr	r3, [r3, #0]
   15e66:	4618      	mov	r0, r3
   15e68:	4790      	blx	r2
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
   15e6a:	f04f 0030 	mov.w	r0, #48	; 0x30
   15e6e:	f7f8 fc1b 	bl	e6a8 <_Znwj>
   15e72:	4603      	mov	r3, r0
   15e74:	603b      	str	r3, [r7, #0]
   15e76:	683b      	ldr	r3, [r7, #0]
   15e78:	2b00      	cmp	r3, #0
   15e7a:	d014      	beq.n	15ea6 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x76>
   15e7c:	6a38      	ldr	r0, [r7, #32]
   15e7e:	4913      	ldr	r1, [pc, #76]	(15ecc <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x9c>)
   15e80:	f004 fff8 	bl	1ae74 <__aeabi_fmul>
   15e84:	4603      	mov	r3, r0
   15e86:	9301      	str	r3, [sp, #4]
   15e88:	f897 3024 	ldrb.w	r3, [r7, #36]
   15e8c:	9302      	str	r3, [sp, #8]
   15e8e:	68fb      	ldr	r3, [r7, #12]
   15e90:	9300      	str	r3, [sp, #0]
   15e92:	68bb      	ldr	r3, [r7, #8]
   15e94:	6838      	ldr	r0, [r7, #0]
   15e96:	f107 0210 	add.w	r2, r7, #16	; 0x10
   15e9a:	ca06      	ldmia	r2!, {r1, r2}
   15e9c:	f7f3 f894 	bl	8fc8 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>
   15ea0:	683b      	ldr	r3, [r7, #0]
   15ea2:	607b      	str	r3, [r7, #4]
   15ea4:	e001      	b.n	15eaa <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x7a>
   15ea6:	683b      	ldr	r3, [r7, #0]
   15ea8:	607b      	str	r3, [r7, #4]
   15eaa:	687a      	ldr	r2, [r7, #4]
   15eac:	4b06      	ldr	r3, [pc, #24]	(15ec8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15eae:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   15eb0:	4b07      	ldr	r3, [pc, #28]	(15ed0 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0xa0>)
   15eb2:	681a      	ldr	r2, [r3, #0]
   15eb4:	4b04      	ldr	r3, [pc, #16]	(15ec8 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   15eb6:	681b      	ldr	r3, [r3, #0]
   15eb8:	4610      	mov	r0, r2
   15eba:	4619      	mov	r1, r3
   15ebc:	f7f1 fae4 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   15ec0:	f107 0718 	add.w	r7, r7, #24	; 0x18
   15ec4:	46bd      	mov	sp, r7
   15ec6:	bd80      	pop	{r7, pc}
   15ec8:	200005b0 	.word	0x200005b0
   15ecc:	40a00000 	.word	0x40a00000
   15ed0:	20000568 	.word	0x20000568

00015ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>:
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}

void StrategieV2::setCurrentGoal(Position goal, bool goBack, float maxSpeed, Angle precisionAngle)
   15ed4:	b580      	push	{r7, lr}
   15ed6:	b08a      	sub	sp, #40
   15ed8:	af04      	add	r7, sp, #16
   15eda:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   15ede:	e88c 0003 	stmia.w	ip, {r0, r1}
   15ee2:	60bb      	str	r3, [r7, #8]
   15ee4:	4613      	mov	r3, r2
   15ee6:	73fb      	strb	r3, [r7, #15]
{
    if (currentCommand != NULL)
   15ee8:	4b20      	ldr	r3, [pc, #128]	(15f6c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15eea:	681b      	ldr	r3, [r3, #0]
   15eec:	2b00      	cmp	r3, #0
   15eee:	d00d      	beq.n	15f0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
        delete currentCommand;
   15ef0:	4b1e      	ldr	r3, [pc, #120]	(15f6c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15ef2:	681b      	ldr	r3, [r3, #0]
   15ef4:	2b00      	cmp	r3, #0
   15ef6:	d009      	beq.n	15f0c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
   15ef8:	4b1c      	ldr	r3, [pc, #112]	(15f6c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15efa:	681b      	ldr	r3, [r3, #0]
   15efc:	681b      	ldr	r3, [r3, #0]
   15efe:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15f02:	681a      	ldr	r2, [r3, #0]
   15f04:	4b19      	ldr	r3, [pc, #100]	(15f6c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15f06:	681b      	ldr	r3, [r3, #0]
   15f08:	4618      	mov	r0, r3
   15f0a:	4790      	blx	r2
//    if (actionsCount == 0)
//        currentCommand = new CommandAllerA(goal, goBack, maxSpeed/2);
//    else
    currentCommand = new CommandAllerA(goal, goBack, maxSpeed, 0.0f, precisionAngle);
   15f0c:	f04f 0030 	mov.w	r0, #48	; 0x30
   15f10:	f7f8 fbca 	bl	e6a8 <_Znwj>
   15f14:	4603      	mov	r3, r0
   15f16:	603b      	str	r3, [r7, #0]
   15f18:	683b      	ldr	r3, [r7, #0]
   15f1a:	2b00      	cmp	r3, #0
   15f1c:	d012      	beq.n	15f44 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x70>
   15f1e:	f897 c00f 	ldrb.w	ip, [r7, #15]
   15f22:	68bb      	ldr	r3, [r7, #8]
   15f24:	9300      	str	r3, [sp, #0]
   15f26:	4b12      	ldr	r3, [pc, #72]	(15f70 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x9c>)
   15f28:	9301      	str	r3, [sp, #4]
   15f2a:	6a3b      	ldr	r3, [r7, #32]
   15f2c:	9302      	str	r3, [sp, #8]
   15f2e:	6838      	ldr	r0, [r7, #0]
   15f30:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15f34:	e893 0006 	ldmia.w	r3, {r1, r2}
   15f38:	4663      	mov	r3, ip
   15f3a:	f7f2 ff95 	bl	8e68 <_ZN13CommandAllerAC1E8Positionbfff>
   15f3e:	683b      	ldr	r3, [r7, #0]
   15f40:	607b      	str	r3, [r7, #4]
   15f42:	e001      	b.n	15f48 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x74>
   15f44:	683b      	ldr	r3, [r7, #0]
   15f46:	607b      	str	r3, [r7, #4]
   15f48:	687a      	ldr	r2, [r7, #4]
   15f4a:	4b08      	ldr	r3, [pc, #32]	(15f6c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15f4c:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   15f4e:	4b09      	ldr	r3, [pc, #36]	(15f74 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0xa0>)
   15f50:	681a      	ldr	r2, [r3, #0]
   15f52:	4b06      	ldr	r3, [pc, #24]	(15f6c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   15f54:	681b      	ldr	r3, [r3, #0]
   15f56:	4610      	mov	r0, r2
   15f58:	4619      	mov	r1, r3
   15f5a:	f7f1 fa95 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   15f5e:	f7ff fdcf 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>
        //StrategieV2::sharpsToCheck[SharpSensor::FRONT_RIGHT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
   15f62:	f107 0718 	add.w	r7, r7, #24	; 0x18
   15f66:	46bd      	mov	sp, r7
   15f68:	bd80      	pop	{r7, pc}
   15f6a:	46c0      	nop			(mov r8, r8)
   15f6c:	200005b0 	.word	0x200005b0
   15f70:	00000000 	.word	0x00000000
   15f74:	20000568 	.word	0x20000568

00015f78 <_ZN11StrategieV26updateEv>:
{
    return updateCount * 5;
}


void StrategieV2::update()
   15f78:	b590      	push	{r4, r7, lr}
   15f7a:	b0af      	sub	sp, #188
   15f7c:	af02      	add	r7, sp, #8

        resultUpdate = tourelle->update();

    */

    if (StrategieV2::strategie == NULL)
   15f7e:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 16504 <_ZN11StrategieV26updateEv+0x58c>
   15f82:	681b      	ldr	r3, [r3, #0]
   15f84:	2b00      	cmp	r3, #0
   15f86:	f000 82b8 	beq.w	164fa <_ZN11StrategieV26updateEv+0x582>
        return;
    updateCount++;
   15f8a:	f8df 357c 	ldr.w	r3, [pc, #1404]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   15f8e:	681b      	ldr	r3, [r3, #0]
   15f90:	f103 0201 	add.w	r2, r3, #1	; 0x1
   15f94:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   15f98:	601a      	str	r2, [r3, #0]

    currentAction->updateTime(90*1000-updateCount*5);
   15f9a:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 1650c <_ZN11StrategieV26updateEv+0x594>
   15f9e:	6819      	ldr	r1, [r3, #0]
   15fa0:	f8df 3564 	ldr.w	r3, [pc, #1380]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   15fa4:	681a      	ldr	r2, [r3, #0]
   15fa6:	4613      	mov	r3, r2
   15fa8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15fac:	4413      	add	r3, r2
   15fae:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   15fb2:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
   15fb6:	f503 7364 	add.w	r3, r3, #912	; 0x390
   15fba:	4608      	mov	r0, r1
   15fbc:	4619      	mov	r1, r3
   15fbe:	f7fe ff5b 	bl	14e78 <_ZN17MediumLevelAction10updateTimeEi>
//
//    //On donne l'ordre de ralentir, si besoin
//    currentCommand->limitSpeed(hysteresisTourelle);

#endif
    if (updateCount < 0)
   15fc2:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   15fc6:	681b      	ldr	r3, [r3, #0]
   15fc8:	2b00      	cmp	r3, #0
   15fca:	da04      	bge.n	15fd6 <_ZN11StrategieV26updateEv+0x5e>
    {
        updateCount = 50000;
   15fcc:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   15fd0:	f24c 3350 	movw	r3, #50000	; 0xc350
   15fd4:	6013      	str	r3, [r2, #0]

    if (updateCount <= 18000)
    {

    }
    if (updateCount >= 18000)
   15fd6:	f8df 3530 	ldr.w	r3, [pc, #1328]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   15fda:	681a      	ldr	r2, [r3, #0]
   15fdc:	f244 634f 	movw	r3, #17999	; 0x464f
   15fe0:	429a      	cmp	r2, r3
   15fe2:	dd08      	ble.n	15ff6 <_ZN11StrategieV26updateEv+0x7e>
    {
        Asservissement::asservissement->setCommandSpeeds(NULL);
   15fe4:	f8df 3528 	ldr.w	r3, [pc, #1320]	; 16510 <_ZN11StrategieV26updateEv+0x598>
   15fe8:	681b      	ldr	r3, [r3, #0]
   15fea:	4618      	mov	r0, r3
   15fec:	f04f 0100 	mov.w	r1, #0	; 0x0
   15ff0:	f7f1 fa4a 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
   15ff4:	e281      	b.n	164fa <_ZN11StrategieV26updateEv+0x582>
    //if (updateCount > 6000 && updateCount < 10000) // attendre 15 secondes
    /*{
        Asservissement::asservissement->setCommandSpeeds(NULL);
        return;
    }*/
    if (actionsCount >= 1)
   15ff6:	f8df 351c 	ldr.w	r3, [pc, #1308]	; 16514 <_ZN11StrategieV26updateEv+0x59c>
   15ffa:	681b      	ldr	r3, [r3, #0]
   15ffc:	2b00      	cmp	r3, #0
   15ffe:	dd05      	ble.n	1600c <_ZN11StrategieV26updateEv+0x94>
    {
        updateCount = 20000;
   16000:	f8df 2504 	ldr.w	r2, [pc, #1284]	; 16508 <_ZN11StrategieV26updateEv+0x590>
   16004:	f644 6320 	movw	r3, #20000	; 0x4e20
   16008:	6013      	str	r3, [r2, #0]
   1600a:	e276      	b.n	164fa <_ZN11StrategieV26updateEv+0x582>
        enableSharp(SharpSensor::BACK_MIDDLE);
        enableSharp(SharpSensor::BACK_RIGHT);
        */
    //std::cout << "update" << std::endl;
    // check sensors:
    AnalogSensor::startConversion();
   1600c:	f7f4 fd62 	bl	aad4 <_ZN12AnalogSensor15startConversionEv>

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   16010:	f04f 0300 	mov.w	r3, #0	; 0x0
   16014:	f8c7 30a0 	str.w	r3, [r7, #160]
   16018:	e011      	b.n	1603e <_ZN11StrategieV26updateEv+0xc6>
    {
        sharps[i]->updateValue();
   1601a:	f8df 34fc 	ldr.w	r3, [pc, #1276]	; 16518 <_ZN11StrategieV26updateEv+0x5a0>
   1601e:	681a      	ldr	r2, [r3, #0]
   16020:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   16024:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16028:	4413      	add	r3, r2
   1602a:	681b      	ldr	r3, [r3, #0]
   1602c:	4618      	mov	r0, r3
   1602e:	f7f7 f8eb 	bl	d208 <_ZN11SharpSensor11updateValueEv>
    AnalogSensor::startConversion();

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   16032:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   16036:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1603a:	f8c7 30a0 	str.w	r3, [r7, #160]
   1603e:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   16042:	2b07      	cmp	r3, #7
   16044:	dde9      	ble.n	1601a <_ZN11StrategieV26updateEv+0xa2>
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
   16046:	f04f 0300 	mov.w	r3, #0	; 0x0
   1604a:	f887 309f 	strb.w	r3, [r7, #159]
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   1604e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16052:	f8c7 30a4 	str.w	r3, [r7, #164]
   16056:	e038      	b.n	160ca <_ZN11StrategieV26updateEv+0x152>
    {
        if (sharpsToCheck[i] && !tourneSurSoiMeme)
   16058:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   1605c:	f8df 24bc 	ldr.w	r2, [pc, #1212]	; 1651c <_ZN11StrategieV26updateEv+0x5a4>
   16060:	5cd3      	ldrb	r3, [r2, r3]
   16062:	2b00      	cmp	r3, #0
   16064:	d02b      	beq.n	160be <_ZN11StrategieV26updateEv+0x146>
   16066:	f8df 34b8 	ldr.w	r3, [pc, #1208]	; 16520 <_ZN11StrategieV26updateEv+0x5a8>
   1606a:	781b      	ldrb	r3, [r3, #0]
   1606c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16070:	b2db      	uxtb	r3, r3
   16072:	2b00      	cmp	r3, #0
   16074:	d023      	beq.n	160be <_ZN11StrategieV26updateEv+0x146>
        {
            if (sharps[i]->getValue().b)
   16076:	f8df 34a0 	ldr.w	r3, [pc, #1184]	; 16518 <_ZN11StrategieV26updateEv+0x5a0>
   1607a:	681a      	ldr	r2, [r3, #0]
   1607c:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   16080:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16084:	4413      	add	r3, r2
   16086:	681b      	ldr	r3, [r3, #0]
   16088:	681b      	ldr	r3, [r3, #0]
   1608a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1608e:	f8d3 c000 	ldr.w	ip, [r3]
   16092:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 16518 <_ZN11StrategieV26updateEv+0x5a0>
   16096:	681a      	ldr	r2, [r3, #0]
   16098:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   1609c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   160a0:	4413      	add	r3, r2
   160a2:	681a      	ldr	r2, [r3, #0]
   160a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
   160a8:	4618      	mov	r0, r3
   160aa:	4611      	mov	r1, r2
   160ac:	47e0      	blx	ip
   160ae:	f897 3068 	ldrb.w	r3, [r7, #104]
   160b2:	2b00      	cmp	r3, #0
   160b4:	d003      	beq.n	160be <_ZN11StrategieV26updateEv+0x146>
            {
                allume = true;
   160b6:	f04f 0301 	mov.w	r3, #1	; 0x1
   160ba:	f887 309f 	strb.w	r3, [r7, #159]
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   160be:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   160c2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   160c6:	f8c7 30a4 	str.w	r3, [r7, #164]
   160ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   160ce:	2b07      	cmp	r3, #7
   160d0:	ddc2      	ble.n	16058 <_ZN11StrategieV26updateEv+0xe0>
                allume = true;
            }
        }
    }

    float values[10] = {0};
   160d2:	f107 011c 	add.w	r1, r7, #28	; 0x1c
   160d6:	60b9      	str	r1, [r7, #8]
   160d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   160dc:	68ba      	ldr	r2, [r7, #8]
   160de:	6013      	str	r3, [r2, #0]
   160e0:	68bb      	ldr	r3, [r7, #8]
   160e2:	f103 0304 	add.w	r3, r3, #4	; 0x4
   160e6:	60bb      	str	r3, [r7, #8]
   160e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   160ec:	68b9      	ldr	r1, [r7, #8]
   160ee:	600b      	str	r3, [r1, #0]
   160f0:	68ba      	ldr	r2, [r7, #8]
   160f2:	f102 0204 	add.w	r2, r2, #4	; 0x4
   160f6:	60ba      	str	r2, [r7, #8]
   160f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   160fc:	68b9      	ldr	r1, [r7, #8]
   160fe:	600b      	str	r3, [r1, #0]
   16100:	68ba      	ldr	r2, [r7, #8]
   16102:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16106:	60ba      	str	r2, [r7, #8]
   16108:	f04f 0300 	mov.w	r3, #0	; 0x0
   1610c:	68b9      	ldr	r1, [r7, #8]
   1610e:	600b      	str	r3, [r1, #0]
   16110:	68ba      	ldr	r2, [r7, #8]
   16112:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16116:	60ba      	str	r2, [r7, #8]
   16118:	f04f 0300 	mov.w	r3, #0	; 0x0
   1611c:	68b9      	ldr	r1, [r7, #8]
   1611e:	600b      	str	r3, [r1, #0]
   16120:	68ba      	ldr	r2, [r7, #8]
   16122:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16126:	60ba      	str	r2, [r7, #8]
   16128:	f04f 0300 	mov.w	r3, #0	; 0x0
   1612c:	68b9      	ldr	r1, [r7, #8]
   1612e:	600b      	str	r3, [r1, #0]
   16130:	68ba      	ldr	r2, [r7, #8]
   16132:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16136:	60ba      	str	r2, [r7, #8]
   16138:	f04f 0300 	mov.w	r3, #0	; 0x0
   1613c:	68b9      	ldr	r1, [r7, #8]
   1613e:	600b      	str	r3, [r1, #0]
   16140:	68ba      	ldr	r2, [r7, #8]
   16142:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16146:	60ba      	str	r2, [r7, #8]
   16148:	f04f 0300 	mov.w	r3, #0	; 0x0
   1614c:	68b9      	ldr	r1, [r7, #8]
   1614e:	600b      	str	r3, [r1, #0]
   16150:	68ba      	ldr	r2, [r7, #8]
   16152:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16156:	60ba      	str	r2, [r7, #8]
   16158:	f04f 0300 	mov.w	r3, #0	; 0x0
   1615c:	68b9      	ldr	r1, [r7, #8]
   1615e:	600b      	str	r3, [r1, #0]
   16160:	68ba      	ldr	r2, [r7, #8]
   16162:	f102 0204 	add.w	r2, r2, #4	; 0x4
   16166:	60ba      	str	r2, [r7, #8]
   16168:	f04f 0300 	mov.w	r3, #0	; 0x0
   1616c:	68b9      	ldr	r1, [r7, #8]
   1616e:	600b      	str	r3, [r1, #0]
   16170:	68ba      	ldr	r2, [r7, #8]
   16172:	f102 0204 	add.w	r2, r2, #4	; 0x4
    bool detected[10] = {false};
   16176:	f107 0356 	add.w	r3, r7, #86	; 0x56
   1617a:	607b      	str	r3, [r7, #4]
   1617c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16180:	6879      	ldr	r1, [r7, #4]
   16182:	800b      	strh	r3, [r1, #0]
   16184:	687a      	ldr	r2, [r7, #4]
   16186:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1618a:	607a      	str	r2, [r7, #4]
   1618c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16190:	6879      	ldr	r1, [r7, #4]
   16192:	800b      	strh	r3, [r1, #0]
   16194:	687a      	ldr	r2, [r7, #4]
   16196:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1619a:	607a      	str	r2, [r7, #4]
   1619c:	f04f 0300 	mov.w	r3, #0	; 0x0
   161a0:	6879      	ldr	r1, [r7, #4]
   161a2:	800b      	strh	r3, [r1, #0]
   161a4:	687a      	ldr	r2, [r7, #4]
   161a6:	f102 0202 	add.w	r2, r2, #2	; 0x2
   161aa:	607a      	str	r2, [r7, #4]
   161ac:	f04f 0300 	mov.w	r3, #0	; 0x0
   161b0:	6879      	ldr	r1, [r7, #4]
   161b2:	800b      	strh	r3, [r1, #0]
   161b4:	687a      	ldr	r2, [r7, #4]
   161b6:	f102 0202 	add.w	r2, r2, #2	; 0x2
   161ba:	607a      	str	r2, [r7, #4]
   161bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   161c0:	6879      	ldr	r1, [r7, #4]
   161c2:	800b      	strh	r3, [r1, #0]
   161c4:	687a      	ldr	r2, [r7, #4]
   161c6:	f102 0202 	add.w	r2, r2, #2	; 0x2

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   161ca:	f04f 0300 	mov.w	r3, #0	; 0x0
   161ce:	f8c7 30a8 	str.w	r3, [r7, #168]
   161d2:	e04d      	b.n	16270 <_ZN11StrategieV26updateEv+0x2f8>
    {
        values[i] = sharps[i]->getValue().f;
   161d4:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   161d8:	4bcf      	ldr	r3, [pc, #828]	(16518 <_ZN11StrategieV26updateEv+0x5a0>)
   161da:	681a      	ldr	r2, [r3, #0]
   161dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   161e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   161e4:	4413      	add	r3, r2
   161e6:	681b      	ldr	r3, [r3, #0]
   161e8:	681b      	ldr	r3, [r3, #0]
   161ea:	f103 0308 	add.w	r3, r3, #8	; 0x8
   161ee:	f8d3 c000 	ldr.w	ip, [r3]
   161f2:	4bc9      	ldr	r3, [pc, #804]	(16518 <_ZN11StrategieV26updateEv+0x5a0>)
   161f4:	681a      	ldr	r2, [r3, #0]
   161f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   161fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   161fe:	4413      	add	r3, r2
   16200:	681a      	ldr	r2, [r3, #0]
   16202:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   16206:	4618      	mov	r0, r3
   16208:	4611      	mov	r1, r2
   1620a:	47e0      	blx	ip
   1620c:	6f3a      	ldr	r2, [r7, #112]
   1620e:	ea4f 0384 	mov.w	r3, r4, lsl #2
   16212:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   16216:	440b      	add	r3, r1
   16218:	f843 2c94 	str.w	r2, [r3, #-148]
        detected[i] = sharps[i]->getValue().b;
   1621c:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   16220:	4bbd      	ldr	r3, [pc, #756]	(16518 <_ZN11StrategieV26updateEv+0x5a0>)
   16222:	681a      	ldr	r2, [r3, #0]
   16224:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16228:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1622c:	4413      	add	r3, r2
   1622e:	681b      	ldr	r3, [r3, #0]
   16230:	681b      	ldr	r3, [r3, #0]
   16232:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16236:	f8d3 c000 	ldr.w	ip, [r3]
   1623a:	4bb7      	ldr	r3, [pc, #732]	(16518 <_ZN11StrategieV26updateEv+0x5a0>)
   1623c:	681a      	ldr	r2, [r3, #0]
   1623e:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16242:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16246:	4413      	add	r3, r2
   16248:	681a      	ldr	r2, [r3, #0]
   1624a:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1624e:	4618      	mov	r0, r3
   16250:	4611      	mov	r1, r2
   16252:	47e0      	blx	ip
   16254:	f897 3080 	ldrb.w	r3, [r7, #128]
   16258:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   1625c:	eb01 0204 	add.w	r2, r1, r4
   16260:	f802 3c5a 	strb.w	r3, [r2, #-90]

    float values[10] = {0};
    bool detected[10] = {false};

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   16264:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16268:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1626c:	f8c7 30a8 	str.w	r3, [r7, #168]
   16270:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16274:	2b07      	cmp	r3, #7
   16276:	ddad      	ble.n	161d4 <_ZN11StrategieV26updateEv+0x25c>
        updateCount = 10;
        Led::setOff(1);
    }
    else
    {*/
        Led::setOn(1);
   16278:	f04f 0001 	mov.w	r0, #1	; 0x1
   1627c:	f7f5 ffb8 	bl	c1f0 <_ZN3Led5setOnEi>

        if (allume)
   16280:	f897 309f 	ldrb.w	r3, [r7, #159]
   16284:	2b00      	cmp	r3, #0
   16286:	d00e      	beq.n	162a6 <_ZN11StrategieV26updateEv+0x32e>
        {
            Asservissement::asservissement->setCommandSpeeds(NULL);
   16288:	4ba1      	ldr	r3, [pc, #644]	(16510 <_ZN11StrategieV26updateEv+0x598>)
   1628a:	681b      	ldr	r3, [r3, #0]
   1628c:	4618      	mov	r0, r3
   1628e:	f04f 0100 	mov.w	r1, #0	; 0x0
   16292:	f7f1 f8f9 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->update();
   16296:	4b9e      	ldr	r3, [pc, #632]	(16510 <_ZN11StrategieV26updateEv+0x598>)
   16298:	681b      	ldr	r3, [r3, #0]
   1629a:	4618      	mov	r0, r3
   1629c:	f7f1 fa3a 	bl	7714 <_ZN14Asservissement6updateEv>
            allumerLED2();
   162a0:	f7f5 fff2 	bl	c288 <_Z11allumerLED2v>
   162a4:	e001      	b.n	162aa <_ZN11StrategieV26updateEv+0x332>
        }
        else
        {
            eteindreLED2();
   162a6:	f7f5 ff93 	bl	c1d0 <_Z12eteindreLED2v>

        //allumerLED2();

        //allume = true;//(updateCount%30==0);
        //allume = false;
        if(timeToRestart)
   162aa:	4b9e      	ldr	r3, [pc, #632]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	2b00      	cmp	r3, #0
   162b0:	d005      	beq.n	162be <_ZN11StrategieV26updateEv+0x346>
        {
            timeToRestart--;
   162b2:	4b9c      	ldr	r3, [pc, #624]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   162b4:	681b      	ldr	r3, [r3, #0]
   162b6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   162ba:	4b9a      	ldr	r3, [pc, #616]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   162bc:	601a      	str	r2, [r3, #0]
        }
        if(timeToRestart == 1)//Dernière boucle d'évitement avant de repartir
   162be:	4b99      	ldr	r3, [pc, #612]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	2b01      	cmp	r3, #1
   162c4:	d169      	bne.n	1639a <_ZN11StrategieV26updateEv+0x422>
        {
            if (currentAction)
   162c6:	4b91      	ldr	r3, [pc, #580]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   162c8:	681b      	ldr	r3, [r3, #0]
   162ca:	2b00      	cmp	r3, #0
   162cc:	d05e      	beq.n	1638c <_ZN11StrategieV26updateEv+0x414>
            {
                //Pour changer de trajectoire, décommenter les lignes suivantes
                currentAction->collisionAvoided();
   162ce:	4b8f      	ldr	r3, [pc, #572]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   162d0:	681b      	ldr	r3, [r3, #0]
   162d2:	681b      	ldr	r3, [r3, #0]
   162d4:	f103 0310 	add.w	r3, r3, #16	; 0x10
   162d8:	681a      	ldr	r2, [r3, #0]
   162da:	4b8c      	ldr	r3, [pc, #560]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   162dc:	681b      	ldr	r3, [r3, #0]
   162de:	4618      	mov	r0, r3
   162e0:	4790      	blx	r2
                actionsToDo[actionsCount]->collisionAvoided();
   162e2:	4b8c      	ldr	r3, [pc, #560]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   162e4:	681a      	ldr	r2, [r3, #0]
   162e6:	4b90      	ldr	r3, [pc, #576]	(16528 <_ZN11StrategieV26updateEv+0x5b0>)
   162e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   162ec:	681b      	ldr	r3, [r3, #0]
   162ee:	f103 0310 	add.w	r3, r3, #16	; 0x10
   162f2:	6819      	ldr	r1, [r3, #0]
   162f4:	4b87      	ldr	r3, [pc, #540]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   162f6:	681a      	ldr	r2, [r3, #0]
   162f8:	4b8b      	ldr	r3, [pc, #556]	(16528 <_ZN11StrategieV26updateEv+0x5b0>)
   162fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   162fe:	4618      	mov	r0, r3
   16300:	4788      	blx	r1
                //currentCommand->collisionAvoided();
                currentAction->update();
   16302:	4b82      	ldr	r3, [pc, #520]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   16304:	681b      	ldr	r3, [r3, #0]
   16306:	681b      	ldr	r3, [r3, #0]
   16308:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1630c:	681a      	ldr	r2, [r3, #0]
   1630e:	4b7f      	ldr	r3, [pc, #508]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   16310:	681b      	ldr	r3, [r3, #0]
   16312:	4618      	mov	r0, r3
   16314:	4790      	blx	r2
                Position pos = Odometrie::odometrie->getPos().getPosition();
   16316:	4b85      	ldr	r3, [pc, #532]	(1652c <_ZN11StrategieV26updateEv+0x5b4>)
   16318:	681a      	ldr	r2, [r3, #0]
   1631a:	f107 0384 	add.w	r3, r7, #132	; 0x84
   1631e:	4618      	mov	r0, r3
   16320:	4611      	mov	r1, r2
   16322:	f7f3 fbed 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   16326:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1632a:	f107 0284 	add.w	r2, r7, #132	; 0x84
   1632e:	4618      	mov	r0, r3
   16330:	4611      	mov	r1, r2
   16332:	f7f8 fd5b 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
                addTemporaryAction(new ActionGoTo(pos, true));
   16336:	f04f 0030 	mov.w	r0, #48	; 0x30
   1633a:	f7f8 f9b5 	bl	e6a8 <_Znwj>
   1633e:	4603      	mov	r3, r0
   16340:	60fb      	str	r3, [r7, #12]
   16342:	68fa      	ldr	r2, [r7, #12]
   16344:	2a00      	cmp	r2, #0
   16346:	d00d      	beq.n	16364 <_ZN11StrategieV26updateEv+0x3ec>
   16348:	4b79      	ldr	r3, [pc, #484]	(16530 <_ZN11StrategieV26updateEv+0x5b8>)
   1634a:	9300      	str	r3, [sp, #0]
   1634c:	68f8      	ldr	r0, [r7, #12]
   1634e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   16352:	e893 0006 	ldmia.w	r3, {r1, r2}
   16356:	f04f 0301 	mov.w	r3, #1	; 0x1
   1635a:	f7f9 f831 	bl	f3c0 <_ZN10ActionGoToC1E8Positionbf>
   1635e:	68fb      	ldr	r3, [r7, #12]
   16360:	613b      	str	r3, [r7, #16]
   16362:	e001      	b.n	16368 <_ZN11StrategieV26updateEv+0x3f0>
   16364:	68f9      	ldr	r1, [r7, #12]
   16366:	6139      	str	r1, [r7, #16]
   16368:	693b      	ldr	r3, [r7, #16]
   1636a:	4618      	mov	r0, r3
   1636c:	f7ff fb54 	bl	15a18 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>

                //On arrête le robot
                if (currentCommand)
   16370:	4b70      	ldr	r3, [pc, #448]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   16372:	681b      	ldr	r3, [r3, #0]
   16374:	2b00      	cmp	r3, #0
   16376:	d009      	beq.n	1638c <_ZN11StrategieV26updateEv+0x414>
                    currentCommand->resetSpeeds();
   16378:	4b6e      	ldr	r3, [pc, #440]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   1637a:	681b      	ldr	r3, [r3, #0]
   1637c:	681b      	ldr	r3, [r3, #0]
   1637e:	f103 030c 	add.w	r3, r3, #12	; 0xc
   16382:	681a      	ldr	r2, [r3, #0]
   16384:	4b6b      	ldr	r3, [pc, #428]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   16386:	681b      	ldr	r3, [r3, #0]
   16388:	4618      	mov	r0, r3
   1638a:	4790      	blx	r2
            }
            timeToRestart--;
   1638c:	4b65      	ldr	r3, [pc, #404]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   1638e:	681b      	ldr	r3, [r3, #0]
   16390:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   16394:	4b63      	ldr	r3, [pc, #396]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   16396:	601a      	str	r2, [r3, #0]
   16398:	e022      	b.n	163e0 <_ZN11StrategieV26updateEv+0x468>
        }

        else if (allume || timeToRestart) // Si un des sharp voit un adversaire, ou qu'on doit être arrêté suite à une détection
   1639a:	f897 309f 	ldrb.w	r3, [r7, #159]
   1639e:	2b00      	cmp	r3, #0
   163a0:	d103      	bne.n	163aa <_ZN11StrategieV26updateEv+0x432>
   163a2:	4b60      	ldr	r3, [pc, #384]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   163a4:	681b      	ldr	r3, [r3, #0]
   163a6:	2b00      	cmp	r3, #0
   163a8:	d01a      	beq.n	163e0 <_ZN11StrategieV26updateEv+0x468>
        {
            if(!timeToRestart)//Début de l'évitement
   163aa:	4b5e      	ldr	r3, [pc, #376]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   163ac:	681b      	ldr	r3, [r3, #0]
   163ae:	2b00      	cmp	r3, #0
   163b0:	d10f      	bne.n	163d2 <_ZN11StrategieV26updateEv+0x45a>
            {
                timeToRestart = 400;
   163b2:	4a5c      	ldr	r2, [pc, #368]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   163b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
   163b8:	6013      	str	r3, [r2, #0]
                hasJustAvoided = true;
   163ba:	4a5f      	ldr	r2, [pc, #380]	(16538 <_ZN11StrategieV26updateEv+0x5c0>)
   163bc:	f04f 0301 	mov.w	r3, #1	; 0x1
   163c0:	7013      	strb	r3, [r2, #0]

//            if (true) // if (canStillDoAction)
//            {

//            }
                hasJustAvoided = false;
   163c2:	4a5d      	ldr	r2, [pc, #372]	(16538 <_ZN11StrategieV26updateEv+0x5c0>)
   163c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   163c8:	7013      	strb	r3, [r2, #0]
                somethingDetected = false;
   163ca:	4a5c      	ldr	r2, [pc, #368]	(1653c <_ZN11StrategieV26updateEv+0x5c4>)
   163cc:	f04f 0300 	mov.w	r3, #0	; 0x0
   163d0:	7013      	strb	r3, [r2, #0]
                // tentative d'évitement :
                //Position pos = Odometrie::odometrie->getPos().getPosition();
                //addTemporaryAction(new ActionGoTo(pos, true));

            }
            Asservissement::asservissement->setCommandSpeeds(NULL);
   163d2:	4b4f      	ldr	r3, [pc, #316]	(16510 <_ZN11StrategieV26updateEv+0x598>)
   163d4:	681b      	ldr	r3, [r3, #0]
   163d6:	4618      	mov	r0, r3
   163d8:	f04f 0100 	mov.w	r1, #0	; 0x0
   163dc:	f7f1 f854 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
        //std::cout << robotBloque << "\n";
    }*/

//    else
//        robotBloque = 0;
    if (currentAction->update() == -1 || (robotBloque > 50))// && !enTrainDeRecalibrerOdometrie))
   163e0:	4b4a      	ldr	r3, [pc, #296]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   163e2:	681b      	ldr	r3, [r3, #0]
   163e4:	681b      	ldr	r3, [r3, #0]
   163e6:	f103 0308 	add.w	r3, r3, #8	; 0x8
   163ea:	681a      	ldr	r2, [r3, #0]
   163ec:	4b47      	ldr	r3, [pc, #284]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   163ee:	681b      	ldr	r3, [r3, #0]
   163f0:	4618      	mov	r0, r3
   163f2:	4790      	blx	r2
   163f4:	4603      	mov	r3, r0
   163f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   163fa:	d003      	beq.n	16404 <_ZN11StrategieV26updateEv+0x48c>
   163fc:	4b50      	ldr	r3, [pc, #320]	(16540 <_ZN11StrategieV26updateEv+0x5c8>)
   163fe:	681b      	ldr	r3, [r3, #0]
   16400:	2b32      	cmp	r3, #50
   16402:	dd03      	ble.n	1640c <_ZN11StrategieV26updateEv+0x494>
   16404:	f04f 0201 	mov.w	r2, #1	; 0x1
   16408:	617a      	str	r2, [r7, #20]
   1640a:	e002      	b.n	16412 <_ZN11StrategieV26updateEv+0x49a>
   1640c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16410:	617b      	str	r3, [r7, #20]
   16412:	697b      	ldr	r3, [r7, #20]
   16414:	2b00      	cmp	r3, #0
   16416:	d056      	beq.n	164c6 <_ZN11StrategieV26updateEv+0x54e>
    {
        if (robotBloque > 1000) // si le robot est bloqué 2 secondes
   16418:	4b49      	ldr	r3, [pc, #292]	(16540 <_ZN11StrategieV26updateEv+0x5c8>)
   1641a:	681b      	ldr	r3, [r3, #0]
   1641c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   16420:	dd14      	ble.n	1644c <_ZN11StrategieV26updateEv+0x4d4>
        {
            // on recule de 20 cm
            Asservissement::asservissement->setCommandSpeeds(NULL);
   16422:	4b3b      	ldr	r3, [pc, #236]	(16510 <_ZN11StrategieV26updateEv+0x598>)
   16424:	681b      	ldr	r3, [r3, #0]
   16426:	4618      	mov	r0, r3
   16428:	f04f 0100 	mov.w	r1, #0	; 0x0
   1642c:	f7f1 f82c 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            currentCommand = NULL;
   16430:	4a40      	ldr	r2, [pc, #256]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   16432:	f04f 0300 	mov.w	r3, #0	; 0x0
   16436:	6013      	str	r3, [r2, #0]
            actionsCount = 2;
   16438:	4a36      	ldr	r2, [pc, #216]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   1643a:	f04f 0302 	mov.w	r3, #2	; 0x2
   1643e:	6013      	str	r3, [r2, #0]
            bool mustGoBack = true;
   16440:	f04f 0301 	mov.w	r3, #1	; 0x1
   16444:	f887 30af 	strb.w	r3, [r7, #175]
            allumerLED();
   16448:	f7f5 ff26 	bl	c298 <_Z10allumerLEDv>
            //StrategieV2::addTemporaryAction(new ActionGoTo(Odometrie::odometrie->getPos().getPosition(), mustGoBack));
        }
        robotBloque = 0;
   1644c:	4a3c      	ldr	r2, [pc, #240]	(16540 <_ZN11StrategieV26updateEv+0x5c8>)
   1644e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16452:	6013      	str	r3, [r2, #0]
        //std::cout << "Changing action" << std::endl;
        Position currentPos = Odometrie::odometrie->getPos().getPosition();
   16454:	4b35      	ldr	r3, [pc, #212]	(1652c <_ZN11StrategieV26updateEv+0x5b4>)
   16456:	681a      	ldr	r2, [r3, #0]
   16458:	f107 0390 	add.w	r3, r7, #144	; 0x90
   1645c:	4618      	mov	r0, r3
   1645e:	4611      	mov	r1, r2
   16460:	f7f3 fb4e 	bl	9b00 <_ZNK9Odometrie6getPosEv>
   16464:	f107 0344 	add.w	r3, r7, #68	; 0x44
   16468:	f107 0290 	add.w	r2, r7, #144	; 0x90
   1646c:	4618      	mov	r0, r3
   1646e:	4611      	mov	r1, r2
   16470:	f7f8 fcbc 	bl	edec <_ZNK17PositionPlusAngle11getPositionEv>
            mustDeleteAction = true;
            timeSinceLastRecalibration++;
        }*/
        //else
        //{
        if (mustDeleteAction) // temporary action
   16474:	4b33      	ldr	r3, [pc, #204]	(16544 <_ZN11StrategieV26updateEv+0x5cc>)
   16476:	781b      	ldrb	r3, [r3, #0]
   16478:	2b00      	cmp	r3, #0
   1647a:	d004      	beq.n	16486 <_ZN11StrategieV26updateEv+0x50e>
            mustDeleteAction = false;
   1647c:	4b31      	ldr	r3, [pc, #196]	(16544 <_ZN11StrategieV26updateEv+0x5cc>)
   1647e:	f04f 0200 	mov.w	r2, #0	; 0x0
   16482:	701a      	strb	r2, [r3, #0]
   16484:	e005      	b.n	16492 <_ZN11StrategieV26updateEv+0x51a>
        else
            actionsCount++;
   16486:	4b23      	ldr	r3, [pc, #140]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   16488:	681b      	ldr	r3, [r3, #0]
   1648a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1648e:	4b21      	ldr	r3, [pc, #132]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   16490:	601a      	str	r2, [r3, #0]


        if (actionsCount == 2)
   16492:	4b20      	ldr	r3, [pc, #128]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   16494:	681b      	ldr	r3, [r3, #0]
   16496:	2b02      	cmp	r3, #2
   16498:	d10e      	bne.n	164b8 <_ZN11StrategieV26updateEv+0x540>
        {
            currentCommand = NULL;
   1649a:	4a26      	ldr	r2, [pc, #152]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   1649c:	f04f 0300 	mov.w	r3, #0	; 0x0
   164a0:	6013      	str	r3, [r2, #0]
            Asservissement::asservissement->setCommandSpeeds(NULL);
   164a2:	4b1b      	ldr	r3, [pc, #108]	(16510 <_ZN11StrategieV26updateEv+0x598>)
   164a4:	681b      	ldr	r3, [r3, #0]
   164a6:	4618      	mov	r0, r3
   164a8:	f04f 0100 	mov.w	r1, #0	; 0x0
   164ac:	f7f0 ffec 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            updateCount = 170000;//17000;
   164b0:	4a15      	ldr	r2, [pc, #84]	(16508 <_ZN11StrategieV26updateEv+0x590>)
   164b2:	4b25      	ldr	r3, [pc, #148]	(16548 <_ZN11StrategieV26updateEv+0x5d0>)
   164b4:	6013      	str	r3, [r2, #0]
   164b6:	e020      	b.n	164fa <_ZN11StrategieV26updateEv+0x582>
            return;
        }
        else
        {
            currentAction = actionsToDo[actionsCount];
   164b8:	4b16      	ldr	r3, [pc, #88]	(16514 <_ZN11StrategieV26updateEv+0x59c>)
   164ba:	681a      	ldr	r2, [r3, #0]
   164bc:	4b1a      	ldr	r3, [pc, #104]	(16528 <_ZN11StrategieV26updateEv+0x5b0>)
   164be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   164c2:	4b12      	ldr	r3, [pc, #72]	(1650c <_ZN11StrategieV26updateEv+0x594>)
   164c4:	601a      	str	r2, [r3, #0]
        //delete action;
        //if (currentAction)
        // currentAction->update();

    }
    if(!timeToRestart)
   164c6:	4b17      	ldr	r3, [pc, #92]	(16524 <_ZN11StrategieV26updateEv+0x5ac>)
   164c8:	681b      	ldr	r3, [r3, #0]
   164ca:	2b00      	cmp	r3, #0
   164cc:	d115      	bne.n	164fa <_ZN11StrategieV26updateEv+0x582>
    {
        if (currentCommand)
   164ce:	4b19      	ldr	r3, [pc, #100]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   164d0:	681b      	ldr	r3, [r3, #0]
   164d2:	2b00      	cmp	r3, #0
   164d4:	d009      	beq.n	164ea <_ZN11StrategieV26updateEv+0x572>
            currentCommand->update();
   164d6:	4b17      	ldr	r3, [pc, #92]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   164d8:	681b      	ldr	r3, [r3, #0]
   164da:	681b      	ldr	r3, [r3, #0]
   164dc:	f103 0308 	add.w	r3, r3, #8	; 0x8
   164e0:	681a      	ldr	r2, [r3, #0]
   164e2:	4b14      	ldr	r3, [pc, #80]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   164e4:	681b      	ldr	r3, [r3, #0]
   164e6:	4618      	mov	r0, r3
   164e8:	4790      	blx	r2
        Asservissement::asservissement->setCommandSpeeds(currentCommand);
   164ea:	4b09      	ldr	r3, [pc, #36]	(16510 <_ZN11StrategieV26updateEv+0x598>)
   164ec:	681a      	ldr	r2, [r3, #0]
   164ee:	4b11      	ldr	r3, [pc, #68]	(16534 <_ZN11StrategieV26updateEv+0x5bc>)
   164f0:	681b      	ldr	r3, [r3, #0]
   164f2:	4610      	mov	r0, r2
   164f4:	4619      	mov	r1, r3
   164f6:	f7f0 ffc7 	bl	7488 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    }
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}
   164fa:	f107 07b4 	add.w	r7, r7, #180	; 0xb4
   164fe:	46bd      	mov	sp, r7
   16500:	bd90      	pop	{r4, r7, pc}
   16502:	46c0      	nop			(mov r8, r8)
   16504:	200005a8 	.word	0x200005a8
   16508:	200005ac 	.word	0x200005ac
   1650c:	200005b4 	.word	0x200005b4
   16510:	20000568 	.word	0x20000568
   16514:	200005b8 	.word	0x200005b8
   16518:	2000063c 	.word	0x2000063c
   1651c:	2000064e 	.word	0x2000064e
   16520:	20000668 	.word	0x20000668
   16524:	2000066c 	.word	0x2000066c
   16528:	200005bc 	.word	0x200005bc
   1652c:	20000578 	.word	0x20000578
   16530:	41f00000 	.word	0x41f00000
   16534:	200005b0 	.word	0x200005b0
   16538:	20000641 	.word	0x20000641
   1653c:	2000064c 	.word	0x2000064c
   16540:	20000658 	.word	0x20000658
   16544:	20000642 	.word	0x20000642
   16548:	00029810 	.word	0x00029810

0001654c <_ZN11StrategieV2D0Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   1654c:	b580      	push	{r7, lr}
   1654e:	b082      	sub	sp, #8
   16550:	af00      	add	r7, sp, #0
   16552:	6078      	str	r0, [r7, #4]
   16554:	687a      	ldr	r2, [r7, #4]
   16556:	4b08      	ldr	r3, [pc, #32]	(16578 <_ZN11StrategieV2D0Ev+0x2c>)
   16558:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1655a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1655e:	b2db      	uxtb	r3, r3
   16560:	2b00      	cmp	r3, #0
   16562:	d002      	beq.n	1656a <_ZN11StrategieV2D0Ev+0x1e>
   16564:	6878      	ldr	r0, [r7, #4]
   16566:	f7f8 f945 	bl	e7f4 <_ZdlPv>
   1656a:	687b      	ldr	r3, [r7, #4]
   1656c:	4618      	mov	r0, r3
   1656e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16572:	46bd      	mov	sp, r7
   16574:	bd80      	pop	{r7, pc}
   16576:	46c0      	nop			(mov r8, r8)
   16578:	00022018 	.word	0x00022018

0001657c <_ZN11StrategieV2D1Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   1657c:	b580      	push	{r7, lr}
   1657e:	b082      	sub	sp, #8
   16580:	af00      	add	r7, sp, #0
   16582:	6078      	str	r0, [r7, #4]
   16584:	687a      	ldr	r2, [r7, #4]
   16586:	4b08      	ldr	r3, [pc, #32]	(165a8 <_ZN11StrategieV2D1Ev+0x2c>)
   16588:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1658a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1658e:	b2db      	uxtb	r3, r3
   16590:	2b00      	cmp	r3, #0
   16592:	d002      	beq.n	1659a <_ZN11StrategieV2D1Ev+0x1e>
   16594:	6878      	ldr	r0, [r7, #4]
   16596:	f7f8 f92d 	bl	e7f4 <_ZdlPv>
   1659a:	687b      	ldr	r3, [r7, #4]
   1659c:	4618      	mov	r0, r3
   1659e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   165a2:	46bd      	mov	sp, r7
   165a4:	bd80      	pop	{r7, pc}
   165a6:	46c0      	nop			(mov r8, r8)
   165a8:	00022018 	.word	0x00022018

000165ac <_ZN11StrategieV2D2Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   165ac:	b580      	push	{r7, lr}
   165ae:	b082      	sub	sp, #8
   165b0:	af00      	add	r7, sp, #0
   165b2:	6078      	str	r0, [r7, #4]
   165b4:	687a      	ldr	r2, [r7, #4]
   165b6:	4b08      	ldr	r3, [pc, #32]	(165d8 <_ZN11StrategieV2D2Ev+0x2c>)
   165b8:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   165ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   165be:	b2db      	uxtb	r3, r3
   165c0:	2b00      	cmp	r3, #0
   165c2:	d002      	beq.n	165ca <_ZN11StrategieV2D2Ev+0x1e>
   165c4:	6878      	ldr	r0, [r7, #4]
   165c6:	f7f8 f915 	bl	e7f4 <_ZdlPv>
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	4618      	mov	r0, r3
   165ce:	f107 0708 	add.w	r7, r7, #8	; 0x8
   165d2:	46bd      	mov	sp, r7
   165d4:	bd80      	pop	{r7, pc}
   165d6:	46c0      	nop			(mov r8, r8)
   165d8:	00022018 	.word	0x00022018

000165dc <_ZN11StrategieV2C1Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   165dc:	b580      	push	{r7, lr}
   165de:	b08a      	sub	sp, #40
   165e0:	af00      	add	r7, sp, #0
   165e2:	6178      	str	r0, [r7, #20]
   165e4:	460b      	mov	r3, r1
   165e6:	74fb      	strb	r3, [r7, #19]
   165e8:	697a      	ldr	r2, [r7, #20]
   165ea:	4b33      	ldr	r3, [pc, #204]	(166b8 <_ZN11StrategieV2C1Eb+0xdc>)
   165ec:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   165ee:	4a33      	ldr	r2, [pc, #204]	(166bc <_ZN11StrategieV2C1Eb+0xe0>)
   165f0:	7cfb      	ldrb	r3, [r7, #19]
   165f2:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   165f4:	4a32      	ldr	r2, [pc, #200]	(166c0 <_ZN11StrategieV2C1Eb+0xe4>)
   165f6:	f04f 0300 	mov.w	r3, #0	; 0x0
   165fa:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   165fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   16600:	627b      	str	r3, [r7, #36]
   16602:	e008      	b.n	16616 <_ZN11StrategieV2C1Eb+0x3a>
        sharpsToCheck[i] = false;
   16604:	6a79      	ldr	r1, [r7, #36]
   16606:	4a2f      	ldr	r2, [pc, #188]	(166c4 <_ZN11StrategieV2C1Eb+0xe8>)
   16608:	f04f 0300 	mov.w	r3, #0	; 0x0
   1660c:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   1660e:	6a7b      	ldr	r3, [r7, #36]
   16610:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16614:	627b      	str	r3, [r7, #36]
   16616:	6a7b      	ldr	r3, [r7, #36]
   16618:	2b07      	cmp	r3, #7
   1661a:	ddf3      	ble.n	16604 <_ZN11StrategieV2C1Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   1661c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16620:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   16622:	f44f 70c4 	mov.w	r0, #392	; 0x188
   16626:	f7f8 f83f 	bl	e6a8 <_Znwj>
   1662a:	4603      	mov	r3, r0
   1662c:	603b      	str	r3, [r7, #0]
   1662e:	683a      	ldr	r2, [r7, #0]
   16630:	2a00      	cmp	r2, #0
   16632:	d007      	beq.n	16644 <_ZN11StrategieV2C1Eb+0x68>
   16634:	7cfb      	ldrb	r3, [r7, #19]
   16636:	6838      	ldr	r0, [r7, #0]
   16638:	4619      	mov	r1, r3
   1663a:	f7fa faeb 	bl	10c14 <_ZN9Krabi2015C1Eb>
   1663e:	683b      	ldr	r3, [r7, #0]
   16640:	607b      	str	r3, [r7, #4]
   16642:	e001      	b.n	16648 <_ZN11StrategieV2C1Eb+0x6c>
   16644:	683a      	ldr	r2, [r7, #0]
   16646:	607a      	str	r2, [r7, #4]
   16648:	687a      	ldr	r2, [r7, #4]
   1664a:	4b1f      	ldr	r3, [pc, #124]	(166c8 <_ZN11StrategieV2C1Eb+0xec>)
   1664c:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   1664e:	4b1f      	ldr	r3, [pc, #124]	(166cc <_ZN11StrategieV2C1Eb+0xf0>)
   16650:	681a      	ldr	r2, [r3, #0]
   16652:	4b1d      	ldr	r3, [pc, #116]	(166c8 <_ZN11StrategieV2C1Eb+0xec>)
   16654:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16658:	4b1d      	ldr	r3, [pc, #116]	(166d0 <_ZN11StrategieV2C1Eb+0xf4>)
   1665a:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   1665c:	4a1d      	ldr	r2, [pc, #116]	(166d4 <_ZN11StrategieV2C1Eb+0xf8>)
   1665e:	697b      	ldr	r3, [r7, #20]
   16660:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   16662:	f7f0 fc39 	bl	6ed8 <_ZN7Sensors12getSingletonEv>
   16666:	4603      	mov	r3, r0
   16668:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   1666a:	6a38      	ldr	r0, [r7, #32]
   1666c:	f7ef fbb6 	bl	5ddc <_ZN7Sensors19getSharpSensorsListEv>
   16670:	4602      	mov	r2, r0
   16672:	4b19      	ldr	r3, [pc, #100]	(166d8 <_ZN11StrategieV2C1Eb+0xfc>)
   16674:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   16676:	f7ff fa43 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   1667a:	f04f 0001 	mov.w	r0, #1	; 0x1
   1667e:	f7f8 f813 	bl	e6a8 <_Znwj>
   16682:	4603      	mov	r3, r0
   16684:	60bb      	str	r3, [r7, #8]
   16686:	68bb      	ldr	r3, [r7, #8]
   16688:	2b00      	cmp	r3, #0
   1668a:	d005      	beq.n	16698 <_ZN11StrategieV2C1Eb+0xbc>
   1668c:	68b8      	ldr	r0, [r7, #8]
   1668e:	f7f7 f987 	bl	d9a0 <_ZN8TourelleC1Ev>
   16692:	68ba      	ldr	r2, [r7, #8]
   16694:	60fa      	str	r2, [r7, #12]
   16696:	e001      	b.n	1669c <_ZN11StrategieV2C1Eb+0xc0>
   16698:	68bb      	ldr	r3, [r7, #8]
   1669a:	60fb      	str	r3, [r7, #12]
   1669c:	4b0f      	ldr	r3, [pc, #60]	(166dc <_ZN11StrategieV2C1Eb+0x100>)
   1669e:	68fa      	ldr	r2, [r7, #12]
   166a0:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   166a2:	4a0f      	ldr	r2, [pc, #60]	(166e0 <_ZN11StrategieV2C1Eb+0x104>)
   166a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   166a8:	6013      	str	r3, [r2, #0]
}
   166aa:	697b      	ldr	r3, [r7, #20]
   166ac:	4618      	mov	r0, r3
   166ae:	f107 0728 	add.w	r7, r7, #40	; 0x28
   166b2:	46bd      	mov	sp, r7
   166b4:	bd80      	pop	{r7, pc}
   166b6:	46c0      	nop			(mov r8, r8)
   166b8:	00022018 	.word	0x00022018
   166bc:	2000064d 	.word	0x2000064d
   166c0:	2000066c 	.word	0x2000066c
   166c4:	2000064e 	.word	0x2000064e
   166c8:	200005bc 	.word	0x200005bc
   166cc:	200005b8 	.word	0x200005b8
   166d0:	200005b4 	.word	0x200005b4
   166d4:	200005a8 	.word	0x200005a8
   166d8:	2000063c 	.word	0x2000063c
   166dc:	20000670 	.word	0x20000670
   166e0:	200005ac 	.word	0x200005ac

000166e4 <_ZN11StrategieV2C2Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   166e4:	b580      	push	{r7, lr}
   166e6:	b08a      	sub	sp, #40
   166e8:	af00      	add	r7, sp, #0
   166ea:	6178      	str	r0, [r7, #20]
   166ec:	460b      	mov	r3, r1
   166ee:	74fb      	strb	r3, [r7, #19]
   166f0:	697a      	ldr	r2, [r7, #20]
   166f2:	4b33      	ldr	r3, [pc, #204]	(167c0 <_ZN11StrategieV2C2Eb+0xdc>)
   166f4:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   166f6:	4a33      	ldr	r2, [pc, #204]	(167c4 <_ZN11StrategieV2C2Eb+0xe0>)
   166f8:	7cfb      	ldrb	r3, [r7, #19]
   166fa:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   166fc:	4a32      	ldr	r2, [pc, #200]	(167c8 <_ZN11StrategieV2C2Eb+0xe4>)
   166fe:	f04f 0300 	mov.w	r3, #0	; 0x0
   16702:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16704:	f04f 0300 	mov.w	r3, #0	; 0x0
   16708:	627b      	str	r3, [r7, #36]
   1670a:	e008      	b.n	1671e <_ZN11StrategieV2C2Eb+0x3a>
        sharpsToCheck[i] = false;
   1670c:	6a79      	ldr	r1, [r7, #36]
   1670e:	4a2f      	ldr	r2, [pc, #188]	(167cc <_ZN11StrategieV2C2Eb+0xe8>)
   16710:	f04f 0300 	mov.w	r3, #0	; 0x0
   16714:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16716:	6a7b      	ldr	r3, [r7, #36]
   16718:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1671c:	627b      	str	r3, [r7, #36]
   1671e:	6a7b      	ldr	r3, [r7, #36]
   16720:	2b07      	cmp	r3, #7
   16722:	ddf3      	ble.n	1670c <_ZN11StrategieV2C2Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   16724:	f04f 0300 	mov.w	r3, #0	; 0x0
   16728:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   1672a:	f44f 70c4 	mov.w	r0, #392	; 0x188
   1672e:	f7f7 ffbb 	bl	e6a8 <_Znwj>
   16732:	4603      	mov	r3, r0
   16734:	603b      	str	r3, [r7, #0]
   16736:	683a      	ldr	r2, [r7, #0]
   16738:	2a00      	cmp	r2, #0
   1673a:	d007      	beq.n	1674c <_ZN11StrategieV2C2Eb+0x68>
   1673c:	7cfb      	ldrb	r3, [r7, #19]
   1673e:	6838      	ldr	r0, [r7, #0]
   16740:	4619      	mov	r1, r3
   16742:	f7fa fa67 	bl	10c14 <_ZN9Krabi2015C1Eb>
   16746:	683b      	ldr	r3, [r7, #0]
   16748:	607b      	str	r3, [r7, #4]
   1674a:	e001      	b.n	16750 <_ZN11StrategieV2C2Eb+0x6c>
   1674c:	683a      	ldr	r2, [r7, #0]
   1674e:	607a      	str	r2, [r7, #4]
   16750:	687a      	ldr	r2, [r7, #4]
   16752:	4b1f      	ldr	r3, [pc, #124]	(167d0 <_ZN11StrategieV2C2Eb+0xec>)
   16754:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   16756:	4b1f      	ldr	r3, [pc, #124]	(167d4 <_ZN11StrategieV2C2Eb+0xf0>)
   16758:	681a      	ldr	r2, [r3, #0]
   1675a:	4b1d      	ldr	r3, [pc, #116]	(167d0 <_ZN11StrategieV2C2Eb+0xec>)
   1675c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16760:	4b1d      	ldr	r3, [pc, #116]	(167d8 <_ZN11StrategieV2C2Eb+0xf4>)
   16762:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   16764:	4a1d      	ldr	r2, [pc, #116]	(167dc <_ZN11StrategieV2C2Eb+0xf8>)
   16766:	697b      	ldr	r3, [r7, #20]
   16768:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   1676a:	f7f0 fbb5 	bl	6ed8 <_ZN7Sensors12getSingletonEv>
   1676e:	4603      	mov	r3, r0
   16770:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   16772:	6a38      	ldr	r0, [r7, #32]
   16774:	f7ef fb32 	bl	5ddc <_ZN7Sensors19getSharpSensorsListEv>
   16778:	4602      	mov	r2, r0
   1677a:	4b19      	ldr	r3, [pc, #100]	(167e0 <_ZN11StrategieV2C2Eb+0xfc>)
   1677c:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   1677e:	f7ff f9bf 	bl	15b00 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   16782:	f04f 0001 	mov.w	r0, #1	; 0x1
   16786:	f7f7 ff8f 	bl	e6a8 <_Znwj>
   1678a:	4603      	mov	r3, r0
   1678c:	60bb      	str	r3, [r7, #8]
   1678e:	68bb      	ldr	r3, [r7, #8]
   16790:	2b00      	cmp	r3, #0
   16792:	d005      	beq.n	167a0 <_ZN11StrategieV2C2Eb+0xbc>
   16794:	68b8      	ldr	r0, [r7, #8]
   16796:	f7f7 f903 	bl	d9a0 <_ZN8TourelleC1Ev>
   1679a:	68ba      	ldr	r2, [r7, #8]
   1679c:	60fa      	str	r2, [r7, #12]
   1679e:	e001      	b.n	167a4 <_ZN11StrategieV2C2Eb+0xc0>
   167a0:	68bb      	ldr	r3, [r7, #8]
   167a2:	60fb      	str	r3, [r7, #12]
   167a4:	4b0f      	ldr	r3, [pc, #60]	(167e4 <_ZN11StrategieV2C2Eb+0x100>)
   167a6:	68fa      	ldr	r2, [r7, #12]
   167a8:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   167aa:	4a0f      	ldr	r2, [pc, #60]	(167e8 <_ZN11StrategieV2C2Eb+0x104>)
   167ac:	f04f 0300 	mov.w	r3, #0	; 0x0
   167b0:	6013      	str	r3, [r2, #0]
}
   167b2:	697b      	ldr	r3, [r7, #20]
   167b4:	4618      	mov	r0, r3
   167b6:	f107 0728 	add.w	r7, r7, #40	; 0x28
   167ba:	46bd      	mov	sp, r7
   167bc:	bd80      	pop	{r7, pc}
   167be:	46c0      	nop			(mov r8, r8)
   167c0:	00022018 	.word	0x00022018
   167c4:	2000064d 	.word	0x2000064d
   167c8:	2000066c 	.word	0x2000066c
   167cc:	2000064e 	.word	0x2000064e
   167d0:	200005bc 	.word	0x200005bc
   167d4:	200005b8 	.word	0x200005b8
   167d8:	200005b4 	.word	0x200005b4
   167dc:	200005a8 	.word	0x200005a8
   167e0:	2000063c 	.word	0x2000063c
   167e4:	20000670 	.word	0x20000670
   167e8:	200005ac 	.word	0x200005ac

000167ec <_ZN11StrategieV316collisionAvoidedEv>:
    for(int i = 0 ; i < 10 ; i++){
        this->tableauEtapes[i]->setState(0);
    }
}

void StrategieV3::collisionAvoided(){
   167ec:	b480      	push	{r7}
   167ee:	b083      	sub	sp, #12
   167f0:	af00      	add	r7, sp, #0
   167f2:	6078      	str	r0, [r7, #4]
    this->avoiding = true;
   167f4:	687b      	ldr	r3, [r7, #4]
   167f6:	f04f 0201 	mov.w	r2, #1	; 0x1
   167fa:	f883 2038 	strb.w	r2, [r3, #56]
}
   167fe:	f107 070c 	add.w	r7, r7, #12	; 0xc
   16802:	46bd      	mov	sp, r7
   16804:	bc80      	pop	{r7}
   16806:	4770      	bx	lr

00016808 <_ZN11StrategieV312updateScoresEv>:
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}

bool StrategieV3::updateScores() {
   16808:	b580      	push	{r7, lr}
   1680a:	b086      	sub	sp, #24
   1680c:	af00      	add	r7, sp, #0
   1680e:	6078      	str	r0, [r7, #4]
    //le temps restant done
    //la trajectoire de notre autre robot
    //...
    //C'est aussi utilisé pour savoir si on est dans un sous-graphe sans objectif,
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
   16810:	f04f 0300 	mov.w	r3, #0	; 0x0
   16814:	60fb      	str	r3, [r7, #12]
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
   16816:	f04f 0300 	mov.w	r3, #0	; 0x0
   1681a:	74fb      	strb	r3, [r7, #19]
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   1681c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16820:	617b      	str	r3, [r7, #20]
   16822:	e01e      	b.n	16862 <_ZN11StrategieV312updateScoresEv+0x5a>
    {
        scoreTypeEtape=this->getScoreEtape(i);
   16824:	687b      	ldr	r3, [r7, #4]
   16826:	681b      	ldr	r3, [r3, #0]
   16828:	f103 031c 	add.w	r3, r3, #28	; 0x1c
   1682c:	681b      	ldr	r3, [r3, #0]
   1682e:	6878      	ldr	r0, [r7, #4]
   16830:	6979      	ldr	r1, [r7, #20]
   16832:	4798      	blx	r3
   16834:	4603      	mov	r3, r0
   16836:	60fb      	str	r3, [r7, #12]
        if(scoreTypeEtape)
   16838:	68fb      	ldr	r3, [r7, #12]
   1683a:	2b00      	cmp	r3, #0
   1683c:	d002      	beq.n	16844 <_ZN11StrategieV312updateScoresEv+0x3c>
        {
            resteDesChosesAFaire = true;
   1683e:	f04f 0301 	mov.w	r3, #1	; 0x1
   16842:	74fb      	strb	r3, [r7, #19]
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
   16844:	687b      	ldr	r3, [r7, #4]
   16846:	6b1a      	ldr	r2, [r3, #48]
   16848:	697b      	ldr	r3, [r7, #20]
   1684a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1684e:	4413      	add	r3, r2
   16850:	681b      	ldr	r3, [r3, #0]
   16852:	4618      	mov	r0, r3
   16854:	68f9      	ldr	r1, [r7, #12]
   16856:	f7f9 fe31 	bl	104bc <_ZN5Etape8setScoreEi>
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   1685a:	697b      	ldr	r3, [r7, #20]
   1685c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16860:	617b      	str	r3, [r7, #20]
   16862:	687b      	ldr	r3, [r7, #4]
   16864:	69da      	ldr	r2, [r3, #28]
   16866:	697b      	ldr	r3, [r7, #20]
   16868:	429a      	cmp	r2, r3
   1686a:	dcdb      	bgt.n	16824 <_ZN11StrategieV312updateScoresEv+0x1c>
            resteDesChosesAFaire = true;
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
    }
    return resteDesChosesAFaire;
   1686c:	7cfb      	ldrb	r3, [r7, #19]
}
   1686e:	4618      	mov	r0, r3
   16870:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16874:	46bd      	mov	sp, r7
   16876:	bd80      	pop	{r7, pc}

00016878 <_ZN11StrategieV313startDijkstraEv>:
    }
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
   16878:	b580      	push	{r7, lr}
   1687a:	b086      	sub	sp, #24
   1687c:	af00      	add	r7, sp, #0
   1687e:	60f8      	str	r0, [r7, #12]
    for(int i=0; i<this->nombreEtapes; i++)
   16880:	f04f 0300 	mov.w	r3, #0	; 0x0
   16884:	617b      	str	r3, [r7, #20]
   16886:	e00d      	b.n	168a4 <_ZN11StrategieV313startDijkstraEv+0x2c>
        tableauEtapesTotal[i]->computeChildDistances();
   16888:	68fb      	ldr	r3, [r7, #12]
   1688a:	6b5a      	ldr	r2, [r3, #52]
   1688c:	697b      	ldr	r3, [r7, #20]
   1688e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16892:	4413      	add	r3, r2
   16894:	681b      	ldr	r3, [r3, #0]
   16896:	4618      	mov	r0, r3
   16898:	f7f9 feb6 	bl	10608 <_ZN5Etape21computeChildDistancesEv>
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
    for(int i=0; i<this->nombreEtapes; i++)
   1689c:	697b      	ldr	r3, [r7, #20]
   1689e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   168a2:	617b      	str	r3, [r7, #20]
   168a4:	68fb      	ldr	r3, [r7, #12]
   168a6:	69da      	ldr	r2, [r3, #28]
   168a8:	697b      	ldr	r3, [r7, #20]
   168aa:	429a      	cmp	r2, r3
   168ac:	dcec      	bgt.n	16888 <_ZN11StrategieV313startDijkstraEv+0x10>
        tableauEtapesTotal[i]->computeChildDistances();

    this->dijkstra = new Dijkstra(tableauEtapesTotal, this->nombreEtapes);
   168ae:	f04f 0024 	mov.w	r0, #36	; 0x24
   168b2:	f7f7 fef9 	bl	e6a8 <_Znwj>
   168b6:	4603      	mov	r3, r0
   168b8:	607b      	str	r3, [r7, #4]
   168ba:	687a      	ldr	r2, [r7, #4]
   168bc:	2a00      	cmp	r2, #0
   168be:	d00b      	beq.n	168d8 <_ZN11StrategieV313startDijkstraEv+0x60>
   168c0:	68fb      	ldr	r3, [r7, #12]
   168c2:	6b5a      	ldr	r2, [r3, #52]
   168c4:	68fb      	ldr	r3, [r7, #12]
   168c6:	69db      	ldr	r3, [r3, #28]
   168c8:	6878      	ldr	r0, [r7, #4]
   168ca:	4611      	mov	r1, r2
   168cc:	461a      	mov	r2, r3
   168ce:	f7f9 f85b 	bl	f988 <_ZN8DijkstraC1EPP5Etapei>
   168d2:	687b      	ldr	r3, [r7, #4]
   168d4:	60bb      	str	r3, [r7, #8]
   168d6:	e001      	b.n	168dc <_ZN11StrategieV313startDijkstraEv+0x64>
   168d8:	687a      	ldr	r2, [r7, #4]
   168da:	60ba      	str	r2, [r7, #8]
   168dc:	68fb      	ldr	r3, [r7, #12]
   168de:	68ba      	ldr	r2, [r7, #8]
   168e0:	62da      	str	r2, [r3, #44]

    this->tableauEtapes = tableauEtapesTotal;
   168e2:	68fb      	ldr	r3, [r7, #12]
   168e4:	6b5a      	ldr	r2, [r3, #52]
   168e6:	68fb      	ldr	r3, [r7, #12]
   168e8:	631a      	str	r2, [r3, #48]
    this->tableauEtapes[0]->setParent(this->tableauEtapes[0]);// Evite de planter si on detecte dès la première boucle (dans le simu)
   168ea:	68fb      	ldr	r3, [r7, #12]
   168ec:	6b1b      	ldr	r3, [r3, #48]
   168ee:	681a      	ldr	r2, [r3, #0]
   168f0:	68fb      	ldr	r3, [r7, #12]
   168f2:	6b1b      	ldr	r3, [r3, #48]
   168f4:	681b      	ldr	r3, [r3, #0]
   168f6:	4610      	mov	r0, r2
   168f8:	4619      	mov	r1, r3
   168fa:	f7f9 fcf1 	bl	102e0 <_ZN5Etape9setParentEPS_>

    dijkstra->setEtapeCourante(0);
   168fe:	68fb      	ldr	r3, [r7, #12]
   16900:	6adb      	ldr	r3, [r3, #44]
   16902:	4618      	mov	r0, r3
   16904:	f04f 0100 	mov.w	r1, #0	; 0x0
   16908:	f7f9 f864 	bl	f9d4 <_ZN8Dijkstra16setEtapeCouranteEi>
    }
    // ###########################################################################################
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}
   1690c:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16910:	46bd      	mov	sp, r7
   16912:	bd80      	pop	{r7, pc}

00016914 <_ZN11StrategieV318updateIntermedaireEv>:
void StrategieV3::collisionAvoided(){
    this->avoiding = true;
}


void StrategieV3::updateIntermedaire()
   16914:	b580      	push	{r7, lr}
   16916:	b086      	sub	sp, #24
   16918:	af00      	add	r7, sp, #0
   1691a:	6078      	str	r0, [r7, #4]
    //(sauf peut être le parent de l'étape d'origine, mais on s'en fout

    #ifndef ROBOTHW
        qDebug() << "updateIntermedaire\n";
    #endif
    int etapeOuOnVientDArriver = this->etapeEnCours;
   1691c:	687b      	ldr	r3, [r7, #4]
   1691e:	699b      	ldr	r3, [r3, #24]
   16920:	60fb      	str	r3, [r7, #12]
    this->etapeEnCours = this->goal;
   16922:	687b      	ldr	r3, [r7, #4]
   16924:	6bda      	ldr	r2, [r3, #60]
   16926:	687b      	ldr	r3, [r7, #4]
   16928:	619a      	str	r2, [r3, #24]
    Etape* toto = this->tableauEtapes[1];
   1692a:	687b      	ldr	r3, [r7, #4]
   1692c:	6b1b      	ldr	r3, [r3, #48]
   1692e:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16932:	681b      	ldr	r3, [r3, #0]
   16934:	613b      	str	r3, [r7, #16]
    Etape* toto2 = this->tableauEtapes[2];
   16936:	687b      	ldr	r3, [r7, #4]
   16938:	6b1b      	ldr	r3, [r3, #48]
   1693a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1693e:	681b      	ldr	r3, [r3, #0]
   16940:	617b      	str	r3, [r7, #20]

    // Si la prochaine étape est le goal, alors au prochain update il faudra trouver un nouvel objectif -> status = 1;
    if(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) == etapeOuOnVientDArriver)
   16942:	687b      	ldr	r3, [r7, #4]
   16944:	6b1a      	ldr	r2, [r3, #48]
   16946:	687b      	ldr	r3, [r7, #4]
   16948:	699b      	ldr	r3, [r3, #24]
   1694a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1694e:	4413      	add	r3, r2
   16950:	681b      	ldr	r3, [r3, #0]
   16952:	4618      	mov	r0, r3
   16954:	f7f9 fc70 	bl	10238 <_ZN5Etape9getParentEv>
   16958:	4603      	mov	r3, r0
   1695a:	4618      	mov	r0, r3
   1695c:	f7f9 fd02 	bl	10364 <_ZN5Etape9getNumeroEv>
   16960:	4602      	mov	r2, r0
   16962:	68fb      	ldr	r3, [r7, #12]
   16964:	429a      	cmp	r2, r3
   16966:	bf14      	ite	ne
   16968:	2300      	movne	r3, #0
   1696a:	2301      	moveq	r3, #1
   1696c:	b2db      	uxtb	r3, r3
   1696e:	2b00      	cmp	r3, #0
   16970:	d016      	beq.n	169a0 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    {
        #ifndef ROBOTHW
            qDebug() << "la prochaine étape est le goal\n";
        #endif
        this->statusStrat = 1;
   16972:	687a      	ldr	r2, [r7, #4]
   16974:	f04f 0301 	mov.w	r3, #1	; 0x1
   16978:	6413      	str	r3, [r2, #64]
   1697a:	e011      	b.n	169a0 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
    {
        #ifndef ROBOTHW
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
   1697c:	687b      	ldr	r3, [r7, #4]
   1697e:	6b1a      	ldr	r2, [r3, #48]
   16980:	687b      	ldr	r3, [r7, #4]
   16982:	699b      	ldr	r3, [r3, #24]
   16984:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16988:	4413      	add	r3, r2
   1698a:	681b      	ldr	r3, [r3, #0]
   1698c:	4618      	mov	r0, r3
   1698e:	f7f9 fc53 	bl	10238 <_ZN5Etape9getParentEv>
   16992:	4603      	mov	r3, r0
   16994:	4618      	mov	r0, r3
   16996:	f7f9 fce5 	bl	10364 <_ZN5Etape9getNumeroEv>
   1699a:	4602      	mov	r2, r0
   1699c:	687b      	ldr	r3, [r7, #4]
   1699e:	619a      	str	r2, [r3, #24]
        #endif
        this->statusStrat = 1;
    }

    //On cherche l'étape suivant vers l'etape - but
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
   169a0:	687b      	ldr	r3, [r7, #4]
   169a2:	6b1a      	ldr	r2, [r3, #48]
   169a4:	687b      	ldr	r3, [r7, #4]
   169a6:	699b      	ldr	r3, [r3, #24]
   169a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   169ac:	4413      	add	r3, r2
   169ae:	681b      	ldr	r3, [r3, #0]
   169b0:	4618      	mov	r0, r3
   169b2:	f7f9 fc41 	bl	10238 <_ZN5Etape9getParentEv>
   169b6:	4603      	mov	r3, r0
   169b8:	4618      	mov	r0, r3
   169ba:	f7f9 fcd3 	bl	10364 <_ZN5Etape9getNumeroEv>
   169be:	4602      	mov	r2, r0
   169c0:	68fb      	ldr	r3, [r7, #12]
   169c2:	429a      	cmp	r2, r3
   169c4:	bf0c      	ite	eq
   169c6:	2300      	moveq	r3, #0
   169c8:	2301      	movne	r3, #1
   169ca:	b2db      	uxtb	r3, r3
   169cc:	2b00      	cmp	r3, #0
   169ce:	d1d5      	bne.n	1697c <_ZN11StrategieV318updateIntermedaireEv+0x68>
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
    }

    if(this->statusStrat == 1)
   169d0:	687b      	ldr	r3, [r7, #4]
   169d2:	6c1b      	ldr	r3, [r3, #64]
   169d4:	2b01      	cmp	r3, #1
   169d6:	d10b      	bne.n	169f0 <_ZN11StrategieV318updateIntermedaireEv+0xdc>
    {
        //On réalise l'action de l'étape - but
        StrategieV2::addTemporaryAction(actionEtape[this->etapeEnCours]);
   169d8:	687b      	ldr	r3, [r7, #4]
   169da:	6a5a      	ldr	r2, [r3, #36]
   169dc:	687b      	ldr	r3, [r7, #4]
   169de:	699b      	ldr	r3, [r3, #24]
   169e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   169e4:	4413      	add	r3, r2
   169e6:	681b      	ldr	r3, [r3, #0]
   169e8:	4618      	mov	r0, r3
   169ea:	f7ff f815 	bl	15a18 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
   169ee:	e00d      	b.n	16a0c <_ZN11StrategieV318updateIntermedaireEv+0xf8>
    }
    else
    {
        //On ajoute l'action d'aller en ligne droite vers cette étape intermédiaire
        StrategieV2::addTemporaryAction(&actionGoto[this->etapeEnCours]);
   169f0:	687b      	ldr	r3, [r7, #4]
   169f2:	6a99      	ldr	r1, [r3, #40]
   169f4:	687b      	ldr	r3, [r7, #4]
   169f6:	699b      	ldr	r3, [r3, #24]
   169f8:	ea4f 1203 	mov.w	r2, r3, lsl #4
   169fc:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16a00:	ebc2 0303 	rsb	r3, r2, r3
   16a04:	440b      	add	r3, r1
   16a06:	4618      	mov	r0, r3
   16a08:	f7ff f806 	bl	15a18 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
    }
}
   16a0c:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16a10:	46bd      	mov	sp, r7
   16a12:	bd80      	pop	{r7, pc}

00016a14 <_ZN11StrategieV315resetEverythingEv>:
        }
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
   16a14:	b580      	push	{r7, lr}
   16a16:	b084      	sub	sp, #16
   16a18:	af00      	add	r7, sp, #0
   16a1a:	6078      	str	r0, [r7, #4]
    for(int i = 0 ; i < 10 ; i++){
   16a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a20:	60fb      	str	r3, [r7, #12]
   16a22:	e00f      	b.n	16a44 <_ZN11StrategieV315resetEverythingEv+0x30>
        this->tableauEtapes[i]->setState(0);
   16a24:	687b      	ldr	r3, [r7, #4]
   16a26:	6b1a      	ldr	r2, [r3, #48]
   16a28:	68fb      	ldr	r3, [r7, #12]
   16a2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16a2e:	4413      	add	r3, r2
   16a30:	681b      	ldr	r3, [r3, #0]
   16a32:	4618      	mov	r0, r3
   16a34:	f04f 0100 	mov.w	r1, #0	; 0x0
   16a38:	f7f9 fc2a 	bl	10290 <_ZN5Etape8setStateEi>
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
    for(int i = 0 ; i < 10 ; i++){
   16a3c:	68fb      	ldr	r3, [r7, #12]
   16a3e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16a42:	60fb      	str	r3, [r7, #12]
   16a44:	68fb      	ldr	r3, [r7, #12]
   16a46:	2b09      	cmp	r3, #9
   16a48:	ddec      	ble.n	16a24 <_ZN11StrategieV315resetEverythingEv+0x10>
        this->tableauEtapes[i]->setState(0);
    }
}
   16a4a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16a4e:	46bd      	mov	sp, r7
   16a50:	bd80      	pop	{r7, pc}
   16a52:	46c0      	nop			(mov r8, r8)

00016a54 <_ZN11StrategieV36updateEv>:
    */


}

int StrategieV3::update()
   16a54:	b580      	push	{r7, lr}
   16a56:	b08e      	sub	sp, #56
   16a58:	af00      	add	r7, sp, #0
   16a5a:	60f8      	str	r0, [r7, #12]
{

    this->actionEtape[this->etapeEnCours]->reset();
   16a5c:	68fb      	ldr	r3, [r7, #12]
   16a5e:	6a5a      	ldr	r2, [r3, #36]
   16a60:	68fb      	ldr	r3, [r7, #12]
   16a62:	699b      	ldr	r3, [r3, #24]
   16a64:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16a68:	4413      	add	r3, r2
   16a6a:	681b      	ldr	r3, [r3, #0]
   16a6c:	681b      	ldr	r3, [r3, #0]
   16a6e:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16a72:	6819      	ldr	r1, [r3, #0]
   16a74:	68fb      	ldr	r3, [r7, #12]
   16a76:	6a5a      	ldr	r2, [r3, #36]
   16a78:	68fb      	ldr	r3, [r7, #12]
   16a7a:	699b      	ldr	r3, [r3, #24]
   16a7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16a80:	4413      	add	r3, r2
   16a82:	681b      	ldr	r3, [r3, #0]
   16a84:	4618      	mov	r0, r3
   16a86:	4788      	blx	r1
    this->actionGoto[this->etapeEnCours].reset();
   16a88:	68fb      	ldr	r3, [r7, #12]
   16a8a:	6a99      	ldr	r1, [r3, #40]
   16a8c:	68fb      	ldr	r3, [r7, #12]
   16a8e:	699b      	ldr	r3, [r3, #24]
   16a90:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16a94:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16a98:	ebc2 0303 	rsb	r3, r2, r3
   16a9c:	440b      	add	r3, r1
   16a9e:	681b      	ldr	r3, [r3, #0]
   16aa0:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16aa4:	f8d3 c000 	ldr.w	ip, [r3]
   16aa8:	68fb      	ldr	r3, [r7, #12]
   16aaa:	6a99      	ldr	r1, [r3, #40]
   16aac:	68fb      	ldr	r3, [r7, #12]
   16aae:	699b      	ldr	r3, [r3, #24]
   16ab0:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16ab4:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16ab8:	ebc2 0303 	rsb	r3, r2, r3
   16abc:	440b      	add	r3, r1
   16abe:	4618      	mov	r0, r3
   16ac0:	47e0      	blx	ip



    //Si on est en train d'éviter, on revient à l'étape précédente, et on marque l'étape comme à éviter
    if(this->avoiding)
   16ac2:	68fb      	ldr	r3, [r7, #12]
   16ac4:	f893 3038 	ldrb.w	r3, [r3, #56]
   16ac8:	2b00      	cmp	r3, #0
   16aca:	f000 80cf 	beq.w	16c6c <_ZN11StrategieV36updateEv+0x218>
    {
        this->tableauEtapes[this->etapeEnCours]->robotVu();
   16ace:	68fb      	ldr	r3, [r7, #12]
   16ad0:	6b1a      	ldr	r2, [r3, #48]
   16ad2:	68fb      	ldr	r3, [r7, #12]
   16ad4:	699b      	ldr	r3, [r3, #24]
   16ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16ada:	4413      	add	r3, r2
   16adc:	681b      	ldr	r3, [r3, #0]
   16ade:	4618      	mov	r0, r3
   16ae0:	f7f9 fc68 	bl	103b4 <_ZN5Etape7robotVuEv>
        //this->tableauEtapes[this->etapeEnCours]->setState(-2);
        this->tableauEtapes[etapeEnCours]->getParent()->setParent(this->tableauEtapes[this->etapeEnCours]);
   16ae4:	68fb      	ldr	r3, [r7, #12]
   16ae6:	6b1a      	ldr	r2, [r3, #48]
   16ae8:	68fb      	ldr	r3, [r7, #12]
   16aea:	699b      	ldr	r3, [r3, #24]
   16aec:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16af0:	4413      	add	r3, r2
   16af2:	681b      	ldr	r3, [r3, #0]
   16af4:	4618      	mov	r0, r3
   16af6:	f7f9 fb9f 	bl	10238 <_ZN5Etape9getParentEv>
   16afa:	4601      	mov	r1, r0
   16afc:	68fb      	ldr	r3, [r7, #12]
   16afe:	6b1a      	ldr	r2, [r3, #48]
   16b00:	68fb      	ldr	r3, [r7, #12]
   16b02:	699b      	ldr	r3, [r3, #24]
   16b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16b08:	4413      	add	r3, r2
   16b0a:	681b      	ldr	r3, [r3, #0]
   16b0c:	4608      	mov	r0, r1
   16b0e:	4619      	mov	r1, r3
   16b10:	f7f9 fbe6 	bl	102e0 <_ZN5Etape9setParentEPS_>
        this->etapeEnCours = this->tableauEtapes[etapeEnCours]->getParent()->getNumero();
   16b14:	68fb      	ldr	r3, [r7, #12]
   16b16:	6b1a      	ldr	r2, [r3, #48]
   16b18:	68fb      	ldr	r3, [r7, #12]
   16b1a:	699b      	ldr	r3, [r3, #24]
   16b1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16b20:	4413      	add	r3, r2
   16b22:	681b      	ldr	r3, [r3, #0]
   16b24:	4618      	mov	r0, r3
   16b26:	f7f9 fb87 	bl	10238 <_ZN5Etape9getParentEv>
   16b2a:	4603      	mov	r3, r0
   16b2c:	4618      	mov	r0, r3
   16b2e:	f7f9 fc19 	bl	10364 <_ZN5Etape9getNumeroEv>
   16b32:	4602      	mov	r2, r0
   16b34:	68fb      	ldr	r3, [r7, #12]
   16b36:	619a      	str	r2, [r3, #24]



        //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
        dijkstra->setEtapeCourante(this->etapeEnCours);
   16b38:	68fb      	ldr	r3, [r7, #12]
   16b3a:	6ada      	ldr	r2, [r3, #44]
   16b3c:	68fb      	ldr	r3, [r7, #12]
   16b3e:	699b      	ldr	r3, [r3, #24]
   16b40:	4610      	mov	r0, r2
   16b42:	4619      	mov	r1, r3
   16b44:	f7f8 ff46 	bl	f9d4 <_ZN8Dijkstra16setEtapeCouranteEi>

        if(this->enTrainEviterReculant)
   16b48:	68fb      	ldr	r3, [r7, #12]
   16b4a:	f893 3044 	ldrb.w	r3, [r3, #68]
   16b4e:	2b00      	cmp	r3, #0
   16b50:	d01a      	beq.n	16b88 <_ZN11StrategieV36updateEv+0x134>
        {
            this->enTrainEviterReculant = false;
   16b52:	68fa      	ldr	r2, [r7, #12]
   16b54:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b58:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = true;
   16b5c:	68fa      	ldr	r2, [r7, #12]
   16b5e:	f04f 0301 	mov.w	r3, #1	; 0x1
   16b62:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(false);
   16b66:	68fb      	ldr	r3, [r7, #12]
   16b68:	6a99      	ldr	r1, [r3, #40]
   16b6a:	68fb      	ldr	r3, [r7, #12]
   16b6c:	699b      	ldr	r3, [r3, #24]
   16b6e:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16b72:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16b76:	ebc2 0303 	rsb	r3, r2, r3
   16b7a:	440b      	add	r3, r1
   16b7c:	4618      	mov	r0, r3
   16b7e:	f04f 0100 	mov.w	r1, #0	; 0x0
   16b82:	f7fe f961 	bl	14e48 <_ZN17MediumLevelAction9setGoBackEb>
   16b86:	e019      	b.n	16bbc <_ZN11StrategieV36updateEv+0x168>
            //actionEtape[etapeEnCours]->setGoBack(false);
        }
        else
        {
            this->enTrainEviterReculant = true;
   16b88:	68fa      	ldr	r2, [r7, #12]
   16b8a:	f04f 0301 	mov.w	r3, #1	; 0x1
   16b8e:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = false;
   16b92:	68fa      	ldr	r2, [r7, #12]
   16b94:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b98:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(true);
   16b9c:	68fb      	ldr	r3, [r7, #12]
   16b9e:	6a99      	ldr	r1, [r3, #40]
   16ba0:	68fb      	ldr	r3, [r7, #12]
   16ba2:	699b      	ldr	r3, [r3, #24]
   16ba4:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16ba8:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16bac:	ebc2 0303 	rsb	r3, r2, r3
   16bb0:	440b      	add	r3, r1
   16bb2:	4618      	mov	r0, r3
   16bb4:	f04f 0101 	mov.w	r1, #1	; 0x1
   16bb8:	f7fe f946 	bl	14e48 <_ZN17MediumLevelAction9setGoBackEb>
            //actionEtape[etapeEnCours]->setGoBack(true);
        }

        StrategieV2::addTemporaryAction(&actionGoto[etapeEnCours]);
   16bbc:	68fb      	ldr	r3, [r7, #12]
   16bbe:	6a99      	ldr	r1, [r3, #40]
   16bc0:	68fb      	ldr	r3, [r7, #12]
   16bc2:	699b      	ldr	r3, [r3, #24]
   16bc4:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16bc8:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16bcc:	ebc2 0303 	rsb	r3, r2, r3
   16bd0:	440b      	add	r3, r1
   16bd2:	4618      	mov	r0, r3
   16bd4:	f7fe ff20 	bl	15a18 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
        //StrategieV2::addTemporaryAction(actionEtape[etapeEnCours]);
        //dijkstra->setEtapeCourante((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
        if(dijkstra->run() != 0)
   16bd8:	68fb      	ldr	r3, [r7, #12]
   16bda:	6adb      	ldr	r3, [r3, #44]
   16bdc:	4618      	mov	r0, r3
   16bde:	f7f9 f9fb 	bl	ffd8 <_ZN8Dijkstra3runEv>
   16be2:	4603      	mov	r3, r0
   16be4:	2b00      	cmp	r3, #0
   16be6:	bf0c      	ite	eq
   16be8:	2300      	moveq	r3, #0
   16bea:	2301      	movne	r3, #1
   16bec:	b2db      	uxtb	r3, r3
   16bee:	2b00      	cmp	r3, #0
   16bf0:	d032      	beq.n	16c58 <_ZN11StrategieV36updateEv+0x204>
        {
            // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
            // Cela arrive pour débloquer le robot
            //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
            //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
            this->actionEtape[this->etapeEnCours]->reset();
   16bf2:	68fb      	ldr	r3, [r7, #12]
   16bf4:	6a5a      	ldr	r2, [r3, #36]
   16bf6:	68fb      	ldr	r3, [r7, #12]
   16bf8:	699b      	ldr	r3, [r3, #24]
   16bfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16bfe:	4413      	add	r3, r2
   16c00:	681b      	ldr	r3, [r3, #0]
   16c02:	681b      	ldr	r3, [r3, #0]
   16c04:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16c08:	6819      	ldr	r1, [r3, #0]
   16c0a:	68fb      	ldr	r3, [r7, #12]
   16c0c:	6a5a      	ldr	r2, [r3, #36]
   16c0e:	68fb      	ldr	r3, [r7, #12]
   16c10:	699b      	ldr	r3, [r3, #24]
   16c12:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16c16:	4413      	add	r3, r2
   16c18:	681b      	ldr	r3, [r3, #0]
   16c1a:	4618      	mov	r0, r3
   16c1c:	4788      	blx	r1
            this->actionGoto[this->etapeEnCours].reset();
   16c1e:	68fb      	ldr	r3, [r7, #12]
   16c20:	6a99      	ldr	r1, [r3, #40]
   16c22:	68fb      	ldr	r3, [r7, #12]
   16c24:	699b      	ldr	r3, [r3, #24]
   16c26:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16c2a:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16c2e:	ebc2 0303 	rsb	r3, r2, r3
   16c32:	440b      	add	r3, r1
   16c34:	681b      	ldr	r3, [r3, #0]
   16c36:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16c3a:	f8d3 c000 	ldr.w	ip, [r3]
   16c3e:	68fb      	ldr	r3, [r7, #12]
   16c40:	6a99      	ldr	r1, [r3, #40]
   16c42:	68fb      	ldr	r3, [r7, #12]
   16c44:	699b      	ldr	r3, [r3, #24]
   16c46:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16c4a:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16c4e:	ebc2 0303 	rsb	r3, r2, r3
   16c52:	440b      	add	r3, r1
   16c54:	4618      	mov	r0, r3
   16c56:	47e0      	blx	ip
        }

        //On retourne à l'étape intermédiaire précédente, en marche arrière

        this->avoiding = false;
   16c58:	68fa      	ldr	r2, [r7, #12]
   16c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   16c5e:	f882 3038 	strb.w	r3, [r2, #56]
        statusStrat=1;
   16c62:	68fa      	ldr	r2, [r7, #12]
   16c64:	f04f 0301 	mov.w	r3, #1	; 0x1
   16c68:	6413      	str	r3, [r2, #64]
   16c6a:	e17e      	b.n	16f6a <_ZN11StrategieV36updateEv+0x516>
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   16c6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16c70:	613b      	str	r3, [r7, #16]
   16c72:	e01e      	b.n	16cb2 <_ZN11StrategieV36updateEv+0x25e>
        {
            actionGoto[i].setGoBack(false);
   16c74:	68fb      	ldr	r3, [r7, #12]
   16c76:	6a99      	ldr	r1, [r3, #40]
   16c78:	693b      	ldr	r3, [r7, #16]
   16c7a:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16c7e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16c82:	ebc2 0303 	rsb	r3, r2, r3
   16c86:	440b      	add	r3, r1
   16c88:	4618      	mov	r0, r3
   16c8a:	f04f 0100 	mov.w	r1, #0	; 0x0
   16c8e:	f7fe f8db 	bl	14e48 <_ZN17MediumLevelAction9setGoBackEb>
            actionEtape[i]->setGoBack(false);
   16c92:	68fb      	ldr	r3, [r7, #12]
   16c94:	6a5a      	ldr	r2, [r3, #36]
   16c96:	693b      	ldr	r3, [r7, #16]
   16c98:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16c9c:	4413      	add	r3, r2
   16c9e:	681b      	ldr	r3, [r3, #0]
   16ca0:	4618      	mov	r0, r3
   16ca2:	f04f 0100 	mov.w	r1, #0	; 0x0
   16ca6:	f7fe f8cf 	bl	14e48 <_ZN17MediumLevelAction9setGoBackEb>
        statusStrat=1;
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   16caa:	693b      	ldr	r3, [r7, #16]
   16cac:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16cb0:	613b      	str	r3, [r7, #16]
   16cb2:	68fb      	ldr	r3, [r7, #12]
   16cb4:	69da      	ldr	r2, [r3, #28]
   16cb6:	693b      	ldr	r3, [r7, #16]
   16cb8:	429a      	cmp	r2, r3
   16cba:	dcdb      	bgt.n	16c74 <_ZN11StrategieV36updateEv+0x220>
        {
            actionGoto[i].setGoBack(false);
            actionEtape[i]->setGoBack(false);
        }
        this->enTrainEviterReculant = false;
   16cbc:	68fa      	ldr	r2, [r7, #12]
   16cbe:	f04f 0300 	mov.w	r3, #0	; 0x0
   16cc2:	f882 3044 	strb.w	r3, [r2, #68]
        this->enTrainEviterAvancant = false;
   16cc6:	68fa      	ldr	r2, [r7, #12]
   16cc8:	f04f 0300 	mov.w	r3, #0	; 0x0
   16ccc:	f882 3045 	strb.w	r3, [r2, #69]

        if(this->statusStrat==2)//Si on vient d'arriver à une étape intermédiare
   16cd0:	68fb      	ldr	r3, [r7, #12]
   16cd2:	6c1b      	ldr	r3, [r3, #64]
   16cd4:	2b02      	cmp	r3, #2
   16cd6:	d103      	bne.n	16ce0 <_ZN11StrategieV36updateEv+0x28c>
        {
            this->updateIntermedaire();
   16cd8:	68f8      	ldr	r0, [r7, #12]
   16cda:	f7ff fe1b 	bl	16914 <_ZN11StrategieV318updateIntermedaireEv>
   16cde:	e144      	b.n	16f6a <_ZN11StrategieV36updateEv+0x516>
        }
        else//Sinon, statusStrat==1, et il faut donc choisir un nouvel objectif
        {
            // Si on n'était pas en train d'éviter
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
   16ce0:	68fb      	ldr	r3, [r7, #12]
   16ce2:	f893 3044 	ldrb.w	r3, [r3, #68]
   16ce6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16cea:	b2db      	uxtb	r3, r3
   16cec:	2b00      	cmp	r3, #0
   16cee:	d051      	beq.n	16d94 <_ZN11StrategieV36updateEv+0x340>
   16cf0:	68fb      	ldr	r3, [r7, #12]
   16cf2:	f893 3045 	ldrb.w	r3, [r3, #69]
   16cf6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16cfa:	b2db      	uxtb	r3, r3
   16cfc:	2b00      	cmp	r3, #0
   16cfe:	d049      	beq.n	16d94 <_ZN11StrategieV36updateEv+0x340>
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
   16d00:	68fb      	ldr	r3, [r7, #12]
   16d02:	6b1a      	ldr	r2, [r3, #48]
   16d04:	68fb      	ldr	r3, [r7, #12]
   16d06:	699b      	ldr	r3, [r3, #24]
   16d08:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16d0c:	4413      	add	r3, r2
   16d0e:	681b      	ldr	r3, [r3, #0]
   16d10:	4618      	mov	r0, r3
   16d12:	f7f9 fbc1 	bl	10498 <_ZN5Etape5finirEv>
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   16d16:	f04f 0300 	mov.w	r3, #0	; 0x0
   16d1a:	62bb      	str	r3, [r7, #40]
   16d1c:	e01f      	b.n	16d5e <_ZN11StrategieV36updateEv+0x30a>
                {
                    int numeroEtapeLiee = this->tableauEtapes[this->etapeEnCours]->getEtapesLieesParFinirEtape()[etapeLiee];
   16d1e:	68fb      	ldr	r3, [r7, #12]
   16d20:	6b1a      	ldr	r2, [r3, #48]
   16d22:	68fb      	ldr	r3, [r7, #12]
   16d24:	699b      	ldr	r3, [r3, #24]
   16d26:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16d2a:	4413      	add	r3, r2
   16d2c:	681b      	ldr	r3, [r3, #0]
   16d2e:	4618      	mov	r0, r3
   16d30:	f7f9 fb8c 	bl	1044c <_ZN5Etape27getEtapesLieesParFinirEtapeEv>
   16d34:	4602      	mov	r2, r0
   16d36:	6abb      	ldr	r3, [r7, #40]
   16d38:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16d3c:	4413      	add	r3, r2
   16d3e:	681b      	ldr	r3, [r3, #0]
   16d40:	62fb      	str	r3, [r7, #44]
                    this->tableauEtapes[numeroEtapeLiee]->finir();
   16d42:	68fb      	ldr	r3, [r7, #12]
   16d44:	6b1a      	ldr	r2, [r3, #48]
   16d46:	6afb      	ldr	r3, [r7, #44]
   16d48:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16d4c:	4413      	add	r3, r2
   16d4e:	681b      	ldr	r3, [r3, #0]
   16d50:	4618      	mov	r0, r3
   16d52:	f7f9 fba1 	bl	10498 <_ZN5Etape5finirEv>
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   16d56:	6abb      	ldr	r3, [r7, #40]
   16d58:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16d5c:	62bb      	str	r3, [r7, #40]
   16d5e:	68fb      	ldr	r3, [r7, #12]
   16d60:	6b1a      	ldr	r2, [r3, #48]
   16d62:	68fb      	ldr	r3, [r7, #12]
   16d64:	699b      	ldr	r3, [r3, #24]
   16d66:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16d6a:	4413      	add	r3, r2
   16d6c:	681b      	ldr	r3, [r3, #0]
   16d6e:	4618      	mov	r0, r3
   16d70:	f7f9 fb86 	bl	10480 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>
   16d74:	4602      	mov	r2, r0
   16d76:	6abb      	ldr	r3, [r7, #40]
   16d78:	429a      	cmp	r2, r3
   16d7a:	bfd4      	ite	le
   16d7c:	2300      	movle	r3, #0
   16d7e:	2301      	movgt	r3, #1
   16d80:	b2db      	uxtb	r3, r3
   16d82:	2b00      	cmp	r3, #0
   16d84:	d1cb      	bne.n	16d1e <_ZN11StrategieV36updateEv+0x2ca>
                    this->tableauEtapes[numeroEtapeLiee]->finir();
                }

                //Mise à jour du stock

                this->updateStock();
   16d86:	68fb      	ldr	r3, [r7, #12]
   16d88:	681b      	ldr	r3, [r3, #0]
   16d8a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   16d8e:	681b      	ldr	r3, [r3, #0]
   16d90:	68f8      	ldr	r0, [r7, #12]
   16d92:	4798      	blx	r3

            }


            int score = 0;
   16d94:	f04f 0300 	mov.w	r3, #0	; 0x0
   16d98:	617b      	str	r3, [r7, #20]
            bool resteDesChosesAFaire = updateScores();
   16d9a:	68f8      	ldr	r0, [r7, #12]
   16d9c:	f7ff fd34 	bl	16808 <_ZN11StrategieV312updateScoresEv>
   16da0:	4603      	mov	r3, r0
   16da2:	76fb      	strb	r3, [r7, #27]

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
   16da4:	7efb      	ldrb	r3, [r7, #27]
   16da6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16daa:	b2db      	uxtb	r3, r3
   16dac:	2b00      	cmp	r3, #0
   16dae:	d03c      	beq.n	16e2a <_ZN11StrategieV36updateEv+0x3d6>
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   16db0:	f04f 0300 	mov.w	r3, #0	; 0x0
   16db4:	633b      	str	r3, [r7, #48]
   16db6:	e00d      	b.n	16dd4 <_ZN11StrategieV36updateEv+0x380>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
   16db8:	68fb      	ldr	r3, [r7, #12]
   16dba:	6b5a      	ldr	r2, [r3, #52]
   16dbc:	6b3b      	ldr	r3, [r7, #48]
   16dbe:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16dc2:	4413      	add	r3, r2
   16dc4:	681b      	ldr	r3, [r3, #0]
   16dc6:	4618      	mov	r0, r3
   16dc8:	f7f9 fb0c 	bl	103e4 <_ZN5Etape13oublieRobotVuEv>

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   16dcc:	6b3b      	ldr	r3, [r7, #48]
   16dce:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16dd2:	633b      	str	r3, [r7, #48]
   16dd4:	68fb      	ldr	r3, [r7, #12]
   16dd6:	69da      	ldr	r2, [r3, #28]
   16dd8:	6b3b      	ldr	r3, [r7, #48]
   16dda:	429a      	cmp	r2, r3
   16ddc:	dcec      	bgt.n	16db8 <_ZN11StrategieV36updateEv+0x364>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
                }
                resteDesChosesAFaire = updateScores();
   16dde:	68f8      	ldr	r0, [r7, #12]
   16de0:	f7ff fd12 	bl	16808 <_ZN11StrategieV312updateScoresEv>
   16de4:	4603      	mov	r3, r0
   16de6:	76fb      	strb	r3, [r7, #27]

                //S'il n'y a VRAIMENT plus rien à faire
                if(!resteDesChosesAFaire)
   16de8:	7efb      	ldrb	r3, [r7, #27]
   16dea:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16dee:	b2db      	uxtb	r3, r3
   16df0:	2b00      	cmp	r3, #0
   16df2:	d01a      	beq.n	16e2a <_ZN11StrategieV36updateEv+0x3d6>
                {
                    //Si on est au garage, on s'arrête
                    if(this->etapeEnCours == this->numeroEtapeGarage)
   16df4:	68fb      	ldr	r3, [r7, #12]
   16df6:	699a      	ldr	r2, [r3, #24]
   16df8:	68fb      	ldr	r3, [r7, #12]
   16dfa:	6a1b      	ldr	r3, [r3, #32]
   16dfc:	429a      	cmp	r2, r3
   16dfe:	d107      	bne.n	16e10 <_ZN11StrategieV36updateEv+0x3bc>
                    {
                        this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   16e00:	68fb      	ldr	r3, [r7, #12]
   16e02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16e06:	641a      	str	r2, [r3, #64]
                        return this->statusStrat;
   16e08:	68fb      	ldr	r3, [r7, #12]
   16e0a:	6c1b      	ldr	r3, [r3, #64]
   16e0c:	607b      	str	r3, [r7, #4]
   16e0e:	e0af      	b.n	16f70 <_ZN11StrategieV36updateEv+0x51c>
                    }
                    else
                    {
                        //Sinon on y va
                        this->tableauEtapes[this->numeroEtapeGarage]->setScore(1000);
   16e10:	68fb      	ldr	r3, [r7, #12]
   16e12:	6b1a      	ldr	r2, [r3, #48]
   16e14:	68fb      	ldr	r3, [r7, #12]
   16e16:	6a1b      	ldr	r3, [r3, #32]
   16e18:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16e1c:	4413      	add	r3, r2
   16e1e:	681b      	ldr	r3, [r3, #0]
   16e20:	4618      	mov	r0, r3
   16e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   16e26:	f7f9 fb49 	bl	104bc <_ZN5Etape8setScoreEi>
                }

            }

            //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
            dijkstra->setEtapeCourante(this->etapeEnCours);
   16e2a:	68fb      	ldr	r3, [r7, #12]
   16e2c:	6ada      	ldr	r2, [r3, #44]
   16e2e:	68fb      	ldr	r3, [r7, #12]
   16e30:	699b      	ldr	r3, [r3, #24]
   16e32:	4610      	mov	r0, r2
   16e34:	4619      	mov	r1, r3
   16e36:	f7f8 fdcd 	bl	f9d4 <_ZN8Dijkstra16setEtapeCouranteEi>
            if(dijkstra->run() != 0)
   16e3a:	68fb      	ldr	r3, [r7, #12]
   16e3c:	6adb      	ldr	r3, [r3, #44]
   16e3e:	4618      	mov	r0, r3
   16e40:	f7f9 f8ca 	bl	ffd8 <_ZN8Dijkstra3runEv>
   16e44:	4603      	mov	r3, r0
   16e46:	2b00      	cmp	r3, #0
   16e48:	bf0c      	ite	eq
   16e4a:	2300      	moveq	r3, #0
   16e4c:	2301      	movne	r3, #1
   16e4e:	b2db      	uxtb	r3, r3
   16e50:	2b00      	cmp	r3, #0
   16e52:	d015      	beq.n	16e80 <_ZN11StrategieV36updateEv+0x42c>
            {
                // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
                // Cela arrive pour débloquer le robot
                //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
                //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
                this->actionEtape[this->etapeEnCours]->reset();
   16e54:	68fb      	ldr	r3, [r7, #12]
   16e56:	6a5a      	ldr	r2, [r3, #36]
   16e58:	68fb      	ldr	r3, [r7, #12]
   16e5a:	699b      	ldr	r3, [r3, #24]
   16e5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16e60:	4413      	add	r3, r2
   16e62:	681b      	ldr	r3, [r3, #0]
   16e64:	681b      	ldr	r3, [r3, #0]
   16e66:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16e6a:	6819      	ldr	r1, [r3, #0]
   16e6c:	68fb      	ldr	r3, [r7, #12]
   16e6e:	6a5a      	ldr	r2, [r3, #36]
   16e70:	68fb      	ldr	r3, [r7, #12]
   16e72:	699b      	ldr	r3, [r3, #24]
   16e74:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16e78:	4413      	add	r3, r2
   16e7a:	681b      	ldr	r3, [r3, #0]
   16e7c:	4618      	mov	r0, r3
   16e7e:	4788      	blx	r1
            }

            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
   16e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16e84:	61fb      	str	r3, [r7, #28]
            int scoreMaxi = -100000;
   16e86:	4b3d      	ldr	r3, [pc, #244]	(16f7c <_ZN11StrategieV36updateEv+0x528>)
   16e88:	623b      	str	r3, [r7, #32]

            int scoreTypeEtape = 0;
   16e8a:	f04f 0300 	mov.w	r3, #0	; 0x0
   16e8e:	627b      	str	r3, [r7, #36]
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   16e90:	f04f 0300 	mov.w	r3, #0	; 0x0
   16e94:	637b      	str	r3, [r7, #52]
   16e96:	e044      	b.n	16f22 <_ZN11StrategieV36updateEv+0x4ce>
            {
                scoreTypeEtape = this->tableauEtapes[i]->getScore();
   16e98:	68fb      	ldr	r3, [r7, #12]
   16e9a:	6b1a      	ldr	r2, [r3, #48]
   16e9c:	6b7b      	ldr	r3, [r7, #52]
   16e9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16ea2:	4413      	add	r3, r2
   16ea4:	681b      	ldr	r3, [r3, #0]
   16ea6:	4618      	mov	r0, r3
   16ea8:	f7f9 fb16 	bl	104d8 <_ZN5Etape8getScoreEv>
   16eac:	4603      	mov	r3, r0
   16eae:	627b      	str	r3, [r7, #36]
        //        score = modificateurTemporel*(10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
                score = (10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
   16eb0:	68fb      	ldr	r3, [r7, #12]
   16eb2:	6b1a      	ldr	r2, [r3, #48]
   16eb4:	6b7b      	ldr	r3, [r7, #52]
   16eb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16eba:	4413      	add	r3, r2
   16ebc:	681b      	ldr	r3, [r3, #0]
   16ebe:	4618      	mov	r0, r3
   16ec0:	f7f9 f9f4 	bl	102ac <_ZN5Etape11getDistanceEv>
   16ec4:	4603      	mov	r3, r0
   16ec6:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
   16eca:	f103 0310 	add.w	r3, r3, #16	; 0x10
   16ece:	6a7a      	ldr	r2, [r7, #36]
   16ed0:	4413      	add	r3, r2
   16ed2:	617b      	str	r3, [r7, #20]
                if((scoreMaxi < score) && scoreTypeEtape && (this->tableauEtapes[i]->getDistance() != -1))
   16ed4:	6a3a      	ldr	r2, [r7, #32]
   16ed6:	697b      	ldr	r3, [r7, #20]
   16ed8:	429a      	cmp	r2, r3
   16eda:	da14      	bge.n	16f06 <_ZN11StrategieV36updateEv+0x4b2>
   16edc:	6a7b      	ldr	r3, [r7, #36]
   16ede:	2b00      	cmp	r3, #0
   16ee0:	d011      	beq.n	16f06 <_ZN11StrategieV36updateEv+0x4b2>
   16ee2:	68fb      	ldr	r3, [r7, #12]
   16ee4:	6b1a      	ldr	r2, [r3, #48]
   16ee6:	6b7b      	ldr	r3, [r7, #52]
   16ee8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16eec:	4413      	add	r3, r2
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	4618      	mov	r0, r3
   16ef2:	f7f9 f9db 	bl	102ac <_ZN5Etape11getDistanceEv>
   16ef6:	4603      	mov	r3, r0
   16ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16efc:	d003      	beq.n	16f06 <_ZN11StrategieV36updateEv+0x4b2>
   16efe:	f04f 0301 	mov.w	r3, #1	; 0x1
   16f02:	60bb      	str	r3, [r7, #8]
   16f04:	e002      	b.n	16f0c <_ZN11StrategieV36updateEv+0x4b8>
   16f06:	f04f 0300 	mov.w	r3, #0	; 0x0
   16f0a:	60bb      	str	r3, [r7, #8]
   16f0c:	68bb      	ldr	r3, [r7, #8]
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d003      	beq.n	16f1a <_ZN11StrategieV36updateEv+0x4c6>
                {
                    scoreMaxi = score;
   16f12:	697b      	ldr	r3, [r7, #20]
   16f14:	623b      	str	r3, [r7, #32]
                    meilleurEtape = i;
   16f16:	6b7b      	ldr	r3, [r7, #52]
   16f18:	61fb      	str	r3, [r7, #28]
            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
            int scoreMaxi = -100000;

            int scoreTypeEtape = 0;
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   16f1a:	6b7b      	ldr	r3, [r7, #52]
   16f1c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16f20:	637b      	str	r3, [r7, #52]
   16f22:	68fb      	ldr	r3, [r7, #12]
   16f24:	69da      	ldr	r2, [r3, #28]
   16f26:	6b7b      	ldr	r3, [r7, #52]
   16f28:	429a      	cmp	r2, r3
   16f2a:	dcb5      	bgt.n	16e98 <_ZN11StrategieV36updateEv+0x444>
                    scoreMaxi = score;
                    meilleurEtape = i;
                }
            }

            if(meilleurEtape==-1)
   16f2c:	69fb      	ldr	r3, [r7, #28]
   16f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16f32:	d110      	bne.n	16f56 <_ZN11StrategieV36updateEv+0x502>
            {
                if(this->etapeEnCours == this->numeroEtapeGarage)
   16f34:	68fb      	ldr	r3, [r7, #12]
   16f36:	699a      	ldr	r2, [r3, #24]
   16f38:	68fb      	ldr	r3, [r7, #12]
   16f3a:	6a1b      	ldr	r3, [r3, #32]
   16f3c:	429a      	cmp	r2, r3
   16f3e:	d107      	bne.n	16f50 <_ZN11StrategieV36updateEv+0x4fc>
                {
                    this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   16f40:	68fb      	ldr	r3, [r7, #12]
   16f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16f46:	641a      	str	r2, [r3, #64]
                    return this->statusStrat;
   16f48:	68fb      	ldr	r3, [r7, #12]
   16f4a:	6c1b      	ldr	r3, [r3, #64]
   16f4c:	607b      	str	r3, [r7, #4]
   16f4e:	e00f      	b.n	16f70 <_ZN11StrategieV36updateEv+0x51c>
                }
                else
                {
                    meilleurEtape = this->numeroEtapeGarage;
   16f50:	68fb      	ldr	r3, [r7, #12]
   16f52:	6a1b      	ldr	r3, [r3, #32]
   16f54:	61fb      	str	r3, [r7, #28]
            /*if(this->tableauEtapes[meilleurEtape]->getEtapeType()==Etape::DEPOSE_FRUIT)
            {
                this->nombreFruitsTransporte++;
            }*/

            this->goal = meilleurEtape;
   16f56:	68fa      	ldr	r2, [r7, #12]
   16f58:	69fb      	ldr	r3, [r7, #28]
   16f5a:	63d3      	str	r3, [r2, #60]
            this->statusStrat = 2;//Jusqu'à preuve du contraire, la prochaine étape est une étape intermédiaire
   16f5c:	68fa      	ldr	r2, [r7, #12]
   16f5e:	f04f 0302 	mov.w	r3, #2	; 0x2
   16f62:	6413      	str	r3, [r2, #64]
            this->updateIntermedaire();//On y va
   16f64:	68f8      	ldr	r0, [r7, #12]
   16f66:	f7ff fcd5 	bl	16914 <_ZN11StrategieV318updateIntermedaireEv>
        }
    }
    return this->statusStrat;
   16f6a:	68fb      	ldr	r3, [r7, #12]
   16f6c:	6c1b      	ldr	r3, [r3, #64]
   16f6e:	607b      	str	r3, [r7, #4]
   16f70:	687b      	ldr	r3, [r7, #4]
}
   16f72:	4618      	mov	r0, r3
   16f74:	f107 0738 	add.w	r7, r7, #56	; 0x38
   16f78:	46bd      	mov	sp, r7
   16f7a:	bd80      	pop	{r7, pc}
   16f7c:	fffe7960 	.word	0xfffe7960

00016f80 <_ZN11StrategieV3C1Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   16f80:	b590      	push	{r4, r7, lr}
   16f82:	b085      	sub	sp, #20
   16f84:	af00      	add	r7, sp, #0
   16f86:	6078      	str	r0, [r7, #4]
   16f88:	460b      	mov	r3, r1
   16f8a:	70fb      	strb	r3, [r7, #3]
   16f8c:	687c      	ldr	r4, [r7, #4]
   16f8e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16f92:	4618      	mov	r0, r3
   16f94:	4917      	ldr	r1, [pc, #92]	(16ff4 <_ZN11StrategieV3C1Eb+0x74>)
   16f96:	4a17      	ldr	r2, [pc, #92]	(16ff4 <_ZN11StrategieV3C1Eb+0x74>)
   16f98:	f04f 0301 	mov.w	r3, #1	; 0x1
   16f9c:	f7f7 fcea 	bl	e974 <_ZN8PositionC1Effb>
   16fa0:	4620      	mov	r0, r4
   16fa2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   16fa6:	e893 0006 	ldmia.w	r3, {r1, r2}
   16faa:	f7fd ffe3 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   16fae:	687a      	ldr	r2, [r7, #4]
   16fb0:	4b11      	ldr	r3, [pc, #68]	(16ff8 <_ZN11StrategieV3C1Eb+0x78>)
   16fb2:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   16fb4:	687a      	ldr	r2, [r7, #4]
   16fb6:	f04f 0300 	mov.w	r3, #0	; 0x0
   16fba:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   16fbe:	687a      	ldr	r2, [r7, #4]
   16fc0:	f04f 0300 	mov.w	r3, #0	; 0x0
   16fc4:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   16fc6:	687a      	ldr	r2, [r7, #4]
   16fc8:	f04f 0301 	mov.w	r3, #1	; 0x1
   16fcc:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   16fce:	687a      	ldr	r2, [r7, #4]
   16fd0:	f04f 0300 	mov.w	r3, #0	; 0x0
   16fd4:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   16fd8:	687a      	ldr	r2, [r7, #4]
   16fda:	f04f 0300 	mov.w	r3, #0	; 0x0
   16fde:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   16fe2:	687a      	ldr	r2, [r7, #4]
   16fe4:	4b05      	ldr	r3, [pc, #20]	(16ffc <_ZN11StrategieV3C1Eb+0x7c>)
   16fe6:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   16fe8:	687b      	ldr	r3, [r7, #4]
   16fea:	4618      	mov	r0, r3
   16fec:	f107 0714 	add.w	r7, r7, #20	; 0x14
   16ff0:	46bd      	mov	sp, r7
   16ff2:	bd90      	pop	{r4, r7, pc}
   16ff4:	00000000 	.word	0x00000000
   16ff8:	00022028 	.word	0x00022028
   16ffc:	00015f90 	.word	0x00015f90

00017000 <_ZN11StrategieV3C2Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   17000:	b590      	push	{r4, r7, lr}
   17002:	b085      	sub	sp, #20
   17004:	af00      	add	r7, sp, #0
   17006:	6078      	str	r0, [r7, #4]
   17008:	460b      	mov	r3, r1
   1700a:	70fb      	strb	r3, [r7, #3]
   1700c:	687c      	ldr	r4, [r7, #4]
   1700e:	f107 0308 	add.w	r3, r7, #8	; 0x8
   17012:	4618      	mov	r0, r3
   17014:	4917      	ldr	r1, [pc, #92]	(17074 <_ZN11StrategieV3C2Eb+0x74>)
   17016:	4a17      	ldr	r2, [pc, #92]	(17074 <_ZN11StrategieV3C2Eb+0x74>)
   17018:	f04f 0301 	mov.w	r3, #1	; 0x1
   1701c:	f7f7 fcaa 	bl	e974 <_ZN8PositionC1Effb>
   17020:	4620      	mov	r0, r4
   17022:	f107 0308 	add.w	r3, r7, #8	; 0x8
   17026:	e893 0006 	ldmia.w	r3, {r1, r2}
   1702a:	f7fd ffa3 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   1702e:	687a      	ldr	r2, [r7, #4]
   17030:	4b11      	ldr	r3, [pc, #68]	(17078 <_ZN11StrategieV3C2Eb+0x78>)
   17032:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   17034:	687a      	ldr	r2, [r7, #4]
   17036:	f04f 0300 	mov.w	r3, #0	; 0x0
   1703a:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   1703e:	687a      	ldr	r2, [r7, #4]
   17040:	f04f 0300 	mov.w	r3, #0	; 0x0
   17044:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   17046:	687a      	ldr	r2, [r7, #4]
   17048:	f04f 0301 	mov.w	r3, #1	; 0x1
   1704c:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   1704e:	687a      	ldr	r2, [r7, #4]
   17050:	f04f 0300 	mov.w	r3, #0	; 0x0
   17054:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   17058:	687a      	ldr	r2, [r7, #4]
   1705a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1705e:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   17062:	687a      	ldr	r2, [r7, #4]
   17064:	4b05      	ldr	r3, [pc, #20]	(1707c <_ZN11StrategieV3C2Eb+0x7c>)
   17066:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   17068:	687b      	ldr	r3, [r7, #4]
   1706a:	4618      	mov	r0, r3
   1706c:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17070:	46bd      	mov	sp, r7
   17072:	bd90      	pop	{r4, r7, pc}
   17074:	00000000 	.word	0x00000000
   17078:	00022028 	.word	0x00022028
   1707c:	00015f90 	.word	0x00015f90

00017080 <_ZN5Tapis6updateEv>:
}


Tapis::~Tapis(){}

int Tapis::update()
   17080:	b580      	push	{r7, lr}
   17082:	b084      	sub	sp, #16
   17084:	af02      	add	r7, sp, #8
   17086:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
   17088:	687b      	ldr	r3, [r7, #4]
   1708a:	68db      	ldr	r3, [r3, #12]
   1708c:	2b00      	cmp	r3, #0
   1708e:	d106      	bne.n	1709e <_ZN5Tapis6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "tapis";
        #endif
        status++;
   17090:	687b      	ldr	r3, [r7, #4]
   17092:	68db      	ldr	r3, [r3, #12]
   17094:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17098:	687b      	ldr	r3, [r7, #4]
   1709a:	60da      	str	r2, [r3, #12]
   1709c:	e097      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 1)
   1709e:	687b      	ldr	r3, [r7, #4]
   170a0:	68db      	ldr	r3, [r3, #12]
   170a2:	2b01      	cmp	r3, #1
   170a4:	d114      	bne.n	170d0 <_ZN5Tapis6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   170a6:	687b      	ldr	r3, [r7, #4]
   170a8:	f893 c010 	ldrb.w	ip, [r3, #16]
   170ac:	687a      	ldr	r2, [r7, #4]
   170ae:	4b4b      	ldr	r3, [pc, #300]	(171dc <_ZN5Tapis6updateEv+0x15c>)
   170b0:	9300      	str	r3, [sp, #0]
   170b2:	f102 0304 	add.w	r3, r2, #4	; 0x4
   170b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   170ba:	4662      	mov	r2, ip
   170bc:	4b48      	ldr	r3, [pc, #288]	(171e0 <_ZN5Tapis6updateEv+0x160>)
   170be:	f7fe ff09 	bl	15ed4 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   170c2:	687b      	ldr	r3, [r7, #4]
   170c4:	68db      	ldr	r3, [r3, #12]
   170c6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   170ca:	687b      	ldr	r3, [r7, #4]
   170cc:	60da      	str	r2, [r3, #12]
   170ce:	e07e      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 2)
   170d0:	687b      	ldr	r3, [r7, #4]
   170d2:	68db      	ldr	r3, [r3, #12]
   170d4:	2b02      	cmp	r3, #2
   170d6:	d119      	bne.n	1710c <_ZN5Tapis6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
   170d8:	687b      	ldr	r3, [r7, #4]
   170da:	f103 0304 	add.w	r3, r3, #4	; 0x4
   170de:	e893 0003 	ldmia.w	r3, {r0, r1}
   170e2:	4a40      	ldr	r2, [pc, #256]	(171e4 <_ZN5Tapis6updateEv+0x164>)
   170e4:	f7f0 ffaa 	bl	803c <_ZN7Command6isNearE8Positionf>
   170e8:	4603      	mov	r3, r0
   170ea:	2b00      	cmp	r3, #0
   170ec:	d06f      	beq.n	171ce <_ZN5Tapis6updateEv+0x14e>
        {
            StrategieV2::lookAt(positionMarches);
   170ee:	687b      	ldr	r3, [r7, #4]
   170f0:	f103 0320 	add.w	r3, r3, #32	; 0x20
   170f4:	e893 0003 	ldmia.w	r3, {r0, r1}
   170f8:	4a3b      	ldr	r2, [pc, #236]	(171e8 <_ZN5Tapis6updateEv+0x168>)
   170fa:	f7fe fe53 	bl	15da4 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   170fe:	687b      	ldr	r3, [r7, #4]
   17100:	68db      	ldr	r3, [r3, #12]
   17102:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17106:	687b      	ldr	r3, [r7, #4]
   17108:	60da      	str	r2, [r3, #12]
   1710a:	e060      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
        }
    }

    else if (status == 3)
   1710c:	687b      	ldr	r3, [r7, #4]
   1710e:	68db      	ldr	r3, [r3, #12]
   17110:	2b03      	cmp	r3, #3
   17112:	d111      	bne.n	17138 <_ZN5Tapis6updateEv+0xb8>
    {
        if (Command::isLookingAt(positionMarches))
   17114:	687b      	ldr	r3, [r7, #4]
   17116:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1711a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1711e:	4a33      	ldr	r2, [pc, #204]	(171ec <_ZN5Tapis6updateEv+0x16c>)
   17120:	f7f0 fed0 	bl	7ec4 <_ZN7Command11isLookingAtE8Positionf>
   17124:	4603      	mov	r3, r0
   17126:	2b00      	cmp	r3, #0
   17128:	d051      	beq.n	171ce <_ZN5Tapis6updateEv+0x14e>
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le brasdevant";
            #endif
           // BrasDevant::getBras()->expand();
            status++;
   1712a:	687b      	ldr	r3, [r7, #4]
   1712c:	68db      	ldr	r3, [r3, #12]
   1712e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17132:	687b      	ldr	r3, [r7, #4]
   17134:	60da      	str	r2, [r3, #12]
   17136:	e04a      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que les bras du robot s'ouvrent : 50ms par incrémentation du status
   17138:	687b      	ldr	r3, [r7, #4]
   1713a:	68db      	ldr	r3, [r3, #12]
   1713c:	2b35      	cmp	r3, #53
   1713e:	dc0a      	bgt.n	17156 <_ZN5Tapis6updateEv+0xd6>
   17140:	687b      	ldr	r3, [r7, #4]
   17142:	68db      	ldr	r3, [r3, #12]
   17144:	2b00      	cmp	r3, #0
   17146:	db06      	blt.n	17156 <_ZN5Tapis6updateEv+0xd6>
    {
        status++;
   17148:	687b      	ldr	r3, [r7, #4]
   1714a:	68db      	ldr	r3, [r3, #12]
   1714c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17150:	687b      	ldr	r3, [r7, #4]
   17152:	60da      	str	r2, [r3, #12]
   17154:	e03b      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 54)
   17156:	687b      	ldr	r3, [r7, #4]
   17158:	68db      	ldr	r3, [r3, #12]
   1715a:	2b36      	cmp	r3, #54
   1715c:	d106      	bne.n	1716c <_ZN5Tapis6updateEv+0xec>
        //lacher les tapis
        #ifndef ROBOTHW
        qDebug() << "On ouvre la pince pour lacher les tapis";
        #endif
      //  Pince::getPince()->open();
        status++;
   1715e:	687b      	ldr	r3, [r7, #4]
   17160:	68db      	ldr	r3, [r3, #12]
   17162:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17166:	687b      	ldr	r3, [r7, #4]
   17168:	60da      	str	r2, [r3, #12]
   1716a:	e030      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if ((status <= 104) && (status > -1 ))    //On attend que la pince s'ouvre
   1716c:	687b      	ldr	r3, [r7, #4]
   1716e:	68db      	ldr	r3, [r3, #12]
   17170:	2b68      	cmp	r3, #104
   17172:	dc0a      	bgt.n	1718a <_ZN5Tapis6updateEv+0x10a>
   17174:	687b      	ldr	r3, [r7, #4]
   17176:	68db      	ldr	r3, [r3, #12]
   17178:	2b00      	cmp	r3, #0
   1717a:	db06      	blt.n	1718a <_ZN5Tapis6updateEv+0x10a>
    {
        status++;
   1717c:	687b      	ldr	r3, [r7, #4]
   1717e:	68db      	ldr	r3, [r3, #12]
   17180:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17184:	687b      	ldr	r3, [r7, #4]
   17186:	60da      	str	r2, [r3, #12]
   17188:	e021      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 105)
   1718a:	687b      	ldr	r3, [r7, #4]
   1718c:	68db      	ldr	r3, [r3, #12]
   1718e:	2b69      	cmp	r3, #105
   17190:	d106      	bne.n	171a0 <_ZN5Tapis6updateEv+0x120>
        //fermer bras
        #ifndef ROBOTHW
        qDebug() << "On ferme le bras";
        #endif
      //  BrasDevant::getBras()->collapse();
        status++;
   17192:	687b      	ldr	r3, [r7, #4]
   17194:	68db      	ldr	r3, [r3, #12]
   17196:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1719a:	687b      	ldr	r3, [r7, #4]
   1719c:	60da      	str	r2, [r3, #12]
   1719e:	e016      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if ((status <= 155) && (status > -1))    //On attend que les bras se ferment.
   171a0:	687b      	ldr	r3, [r7, #4]
   171a2:	68db      	ldr	r3, [r3, #12]
   171a4:	2b9b      	cmp	r3, #155
   171a6:	dc0a      	bgt.n	171be <_ZN5Tapis6updateEv+0x13e>
   171a8:	687b      	ldr	r3, [r7, #4]
   171aa:	68db      	ldr	r3, [r3, #12]
   171ac:	2b00      	cmp	r3, #0
   171ae:	db06      	blt.n	171be <_ZN5Tapis6updateEv+0x13e>
    {
        status++;
   171b0:	687b      	ldr	r3, [r7, #4]
   171b2:	68db      	ldr	r3, [r3, #12]
   171b4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   171b8:	687b      	ldr	r3, [r7, #4]
   171ba:	60da      	str	r2, [r3, #12]
   171bc:	e007      	b.n	171ce <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 156)
   171be:	687b      	ldr	r3, [r7, #4]
   171c0:	68db      	ldr	r3, [r3, #12]
   171c2:	2b9c      	cmp	r3, #156
   171c4:	d103      	bne.n	171ce <_ZN5Tapis6updateEv+0x14e>
    {
        status = -1;
   171c6:	687a      	ldr	r2, [r7, #4]
   171c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   171cc:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape tapis finie";
#endif
    }

    return status;
   171ce:	687b      	ldr	r3, [r7, #4]
   171d0:	68db      	ldr	r3, [r3, #12]
}
   171d2:	4618      	mov	r0, r3
   171d4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   171d8:	46bd      	mov	sp, r7
   171da:	bd80      	pop	{r7, pc}
   171dc:	c2c80000 	.word	0xc2c80000
   171e0:	40400000 	.word	0x40400000
   171e4:	41f00000 	.word	0x41f00000
   171e8:	3cf5c28f 	.word	0x3cf5c28f
   171ec:	3db2b8c2 	.word	0x3db2b8c2

000171f0 <_ZN5TapisD0Ev>:
    this->goBack = false;
    this->positionMarches = Position(1230,150);
}


Tapis::~Tapis(){}
   171f0:	b580      	push	{r7, lr}
   171f2:	b082      	sub	sp, #8
   171f4:	af00      	add	r7, sp, #0
   171f6:	6078      	str	r0, [r7, #4]
   171f8:	687a      	ldr	r2, [r7, #4]
   171fa:	4b0a      	ldr	r3, [pc, #40]	(17224 <_ZN5TapisD0Ev+0x34>)
   171fc:	6013      	str	r3, [r2, #0]
   171fe:	687b      	ldr	r3, [r7, #4]
   17200:	4618      	mov	r0, r3
   17202:	f7fd fe77 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   17206:	f04f 0301 	mov.w	r3, #1	; 0x1
   1720a:	b2db      	uxtb	r3, r3
   1720c:	2b00      	cmp	r3, #0
   1720e:	d002      	beq.n	17216 <_ZN5TapisD0Ev+0x26>
   17210:	6878      	ldr	r0, [r7, #4]
   17212:	f7f7 faef 	bl	e7f4 <_ZdlPv>
   17216:	687b      	ldr	r3, [r7, #4]
   17218:	4618      	mov	r0, r3
   1721a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1721e:	46bd      	mov	sp, r7
   17220:	bd80      	pop	{r7, pc}
   17222:	46c0      	nop			(mov r8, r8)
   17224:	00022050 	.word	0x00022050

00017228 <_ZN5TapisD1Ev>:
   17228:	b580      	push	{r7, lr}
   1722a:	b082      	sub	sp, #8
   1722c:	af00      	add	r7, sp, #0
   1722e:	6078      	str	r0, [r7, #4]
   17230:	687a      	ldr	r2, [r7, #4]
   17232:	4b0a      	ldr	r3, [pc, #40]	(1725c <_ZN5TapisD1Ev+0x34>)
   17234:	6013      	str	r3, [r2, #0]
   17236:	687b      	ldr	r3, [r7, #4]
   17238:	4618      	mov	r0, r3
   1723a:	f7fd fe5b 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   1723e:	f04f 0300 	mov.w	r3, #0	; 0x0
   17242:	b2db      	uxtb	r3, r3
   17244:	2b00      	cmp	r3, #0
   17246:	d002      	beq.n	1724e <_ZN5TapisD1Ev+0x26>
   17248:	6878      	ldr	r0, [r7, #4]
   1724a:	f7f7 fad3 	bl	e7f4 <_ZdlPv>
   1724e:	687b      	ldr	r3, [r7, #4]
   17250:	4618      	mov	r0, r3
   17252:	f107 0708 	add.w	r7, r7, #8	; 0x8
   17256:	46bd      	mov	sp, r7
   17258:	bd80      	pop	{r7, pc}
   1725a:	46c0      	nop			(mov r8, r8)
   1725c:	00022050 	.word	0x00022050

00017260 <_ZN5TapisD2Ev>:
   17260:	b580      	push	{r7, lr}
   17262:	b082      	sub	sp, #8
   17264:	af00      	add	r7, sp, #0
   17266:	6078      	str	r0, [r7, #4]
   17268:	687a      	ldr	r2, [r7, #4]
   1726a:	4b0a      	ldr	r3, [pc, #40]	(17294 <_ZN5TapisD2Ev+0x34>)
   1726c:	6013      	str	r3, [r2, #0]
   1726e:	687b      	ldr	r3, [r7, #4]
   17270:	4618      	mov	r0, r3
   17272:	f7fd fe3f 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   17276:	f04f 0300 	mov.w	r3, #0	; 0x0
   1727a:	b2db      	uxtb	r3, r3
   1727c:	2b00      	cmp	r3, #0
   1727e:	d002      	beq.n	17286 <_ZN5TapisD2Ev+0x26>
   17280:	6878      	ldr	r0, [r7, #4]
   17282:	f7f7 fab7 	bl	e7f4 <_ZdlPv>
   17286:	687b      	ldr	r3, [r7, #4]
   17288:	4618      	mov	r0, r3
   1728a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1728e:	46bd      	mov	sp, r7
   17290:	bd80      	pop	{r7, pc}
   17292:	46c0      	nop			(mov r8, r8)
   17294:	00022050 	.word	0x00022050

00017298 <_ZN5TapisC1Ev>:
#include "command.h"
#include "position.h"
//#include "brasdevant.h"


Tapis::Tapis(){}
   17298:	b590      	push	{r4, r7, lr}
   1729a:	b085      	sub	sp, #20
   1729c:	af00      	add	r7, sp, #0
   1729e:	6078      	str	r0, [r7, #4]
   172a0:	687c      	ldr	r4, [r7, #4]
   172a2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   172a6:	4618      	mov	r0, r3
   172a8:	4910      	ldr	r1, [pc, #64]	(172ec <_ZN5TapisC1Ev+0x54>)
   172aa:	4a10      	ldr	r2, [pc, #64]	(172ec <_ZN5TapisC1Ev+0x54>)
   172ac:	f04f 0301 	mov.w	r3, #1	; 0x1
   172b0:	f7f7 fb60 	bl	e974 <_ZN8PositionC1Effb>
   172b4:	4620      	mov	r0, r4
   172b6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   172ba:	e893 0006 	ldmia.w	r3, {r1, r2}
   172be:	f7fd fe59 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   172c2:	687a      	ldr	r2, [r7, #4]
   172c4:	4b0a      	ldr	r3, [pc, #40]	(172f0 <_ZN5TapisC1Ev+0x58>)
   172c6:	6013      	str	r3, [r2, #0]
   172c8:	687b      	ldr	r3, [r7, #4]
   172ca:	f103 0318 	add.w	r3, r3, #24	; 0x18
   172ce:	4618      	mov	r0, r3
   172d0:	f7f7 fb28 	bl	e924 <_ZN8PositionC1Ev>
   172d4:	687b      	ldr	r3, [r7, #4]
   172d6:	f103 0320 	add.w	r3, r3, #32	; 0x20
   172da:	4618      	mov	r0, r3
   172dc:	f7f7 fb22 	bl	e924 <_ZN8PositionC1Ev>
   172e0:	687b      	ldr	r3, [r7, #4]
   172e2:	4618      	mov	r0, r3
   172e4:	f107 0714 	add.w	r7, r7, #20	; 0x14
   172e8:	46bd      	mov	sp, r7
   172ea:	bd90      	pop	{r4, r7, pc}
   172ec:	00000000 	.word	0x00000000
   172f0:	00022050 	.word	0x00022050

000172f4 <_ZN5TapisC2Ev>:
   172f4:	b590      	push	{r4, r7, lr}
   172f6:	b085      	sub	sp, #20
   172f8:	af00      	add	r7, sp, #0
   172fa:	6078      	str	r0, [r7, #4]
   172fc:	687c      	ldr	r4, [r7, #4]
   172fe:	f107 0308 	add.w	r3, r7, #8	; 0x8
   17302:	4618      	mov	r0, r3
   17304:	4910      	ldr	r1, [pc, #64]	(17348 <_ZN5TapisC2Ev+0x54>)
   17306:	4a10      	ldr	r2, [pc, #64]	(17348 <_ZN5TapisC2Ev+0x54>)
   17308:	f04f 0301 	mov.w	r3, #1	; 0x1
   1730c:	f7f7 fb32 	bl	e974 <_ZN8PositionC1Effb>
   17310:	4620      	mov	r0, r4
   17312:	f107 0308 	add.w	r3, r7, #8	; 0x8
   17316:	e893 0006 	ldmia.w	r3, {r1, r2}
   1731a:	f7fd fe2b 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   1731e:	687a      	ldr	r2, [r7, #4]
   17320:	4b0a      	ldr	r3, [pc, #40]	(1734c <_ZN5TapisC2Ev+0x58>)
   17322:	6013      	str	r3, [r2, #0]
   17324:	687b      	ldr	r3, [r7, #4]
   17326:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1732a:	4618      	mov	r0, r3
   1732c:	f7f7 fafa 	bl	e924 <_ZN8PositionC1Ev>
   17330:	687b      	ldr	r3, [r7, #4]
   17332:	f103 0320 	add.w	r3, r3, #32	; 0x20
   17336:	4618      	mov	r0, r3
   17338:	f7f7 faf4 	bl	e924 <_ZN8PositionC1Ev>
   1733c:	687b      	ldr	r3, [r7, #4]
   1733e:	4618      	mov	r0, r3
   17340:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17344:	46bd      	mov	sp, r7
   17346:	bd90      	pop	{r4, r7, pc}
   17348:	00000000 	.word	0x00000000
   1734c:	00022050 	.word	0x00022050

00017350 <_ZN5TapisC1E8Position>:

Tapis::Tapis(Position position):MediumLevelAction(position)
   17350:	b590      	push	{r4, r7, lr}
   17352:	b087      	sub	sp, #28
   17354:	af00      	add	r7, sp, #0
   17356:	60f8      	str	r0, [r7, #12]
   17358:	f107 0304 	add.w	r3, r7, #4	; 0x4
   1735c:	e883 0006 	stmia.w	r3, {r1, r2}
   17360:	68fb      	ldr	r3, [r7, #12]
   17362:	4618      	mov	r0, r3
   17364:	f107 0304 	add.w	r3, r7, #4	; 0x4
   17368:	e893 0006 	ldmia.w	r3, {r1, r2}
   1736c:	f7fd fe02 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   17370:	68fa      	ldr	r2, [r7, #12]
   17372:	4b15      	ldr	r3, [pc, #84]	(173c8 <_ZN5TapisC1E8Position+0x78>)
   17374:	6013      	str	r3, [r2, #0]
   17376:	68fb      	ldr	r3, [r7, #12]
   17378:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1737c:	4618      	mov	r0, r3
   1737e:	f7f7 fad1 	bl	e924 <_ZN8PositionC1Ev>
   17382:	68fb      	ldr	r3, [r7, #12]
   17384:	f103 0320 	add.w	r3, r3, #32	; 0x20
   17388:	4618      	mov	r0, r3
   1738a:	f7f7 facb 	bl	e924 <_ZN8PositionC1Ev>
{
    this->goBack = false;
   1738e:	68fa      	ldr	r2, [r7, #12]
   17390:	f04f 0300 	mov.w	r3, #0	; 0x0
   17394:	7413      	strb	r3, [r2, #16]
    this->positionMarches = Position(1230,150);
   17396:	68fb      	ldr	r3, [r7, #12]
   17398:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1739c:	f107 0310 	add.w	r3, r7, #16	; 0x10
   173a0:	4618      	mov	r0, r3
   173a2:	490a      	ldr	r1, [pc, #40]	(173cc <_ZN5TapisC1E8Position+0x7c>)
   173a4:	4a0a      	ldr	r2, [pc, #40]	(173d0 <_ZN5TapisC1E8Position+0x80>)
   173a6:	f04f 0301 	mov.w	r3, #1	; 0x1
   173aa:	f7f7 fae3 	bl	e974 <_ZN8PositionC1Effb>
   173ae:	4620      	mov	r0, r4
   173b0:	f107 0310 	add.w	r3, r7, #16	; 0x10
   173b4:	e893 0006 	ldmia.w	r3, {r1, r2}
   173b8:	f7f7 fb70 	bl	ea9c <_ZN8PositionaSES_>
}
   173bc:	68fb      	ldr	r3, [r7, #12]
   173be:	4618      	mov	r0, r3
   173c0:	f107 071c 	add.w	r7, r7, #28	; 0x1c
   173c4:	46bd      	mov	sp, r7
   173c6:	bd90      	pop	{r4, r7, pc}
   173c8:	00022050 	.word	0x00022050
   173cc:	4499c000 	.word	0x4499c000
   173d0:	43160000 	.word	0x43160000

000173d4 <_ZN5TapisC2E8Position>:
//#include "brasdevant.h"


Tapis::Tapis(){}

Tapis::Tapis(Position position):MediumLevelAction(position)
   173d4:	b590      	push	{r4, r7, lr}
   173d6:	b087      	sub	sp, #28
   173d8:	af00      	add	r7, sp, #0
   173da:	60f8      	str	r0, [r7, #12]
   173dc:	f107 0304 	add.w	r3, r7, #4	; 0x4
   173e0:	e883 0006 	stmia.w	r3, {r1, r2}
   173e4:	68fb      	ldr	r3, [r7, #12]
   173e6:	4618      	mov	r0, r3
   173e8:	f107 0304 	add.w	r3, r7, #4	; 0x4
   173ec:	e893 0006 	ldmia.w	r3, {r1, r2}
   173f0:	f7fd fdc0 	bl	14f74 <_ZN17MediumLevelActionC2E8Position>
   173f4:	68fa      	ldr	r2, [r7, #12]
   173f6:	4b15      	ldr	r3, [pc, #84]	(1744c <_ZN5TapisC2E8Position+0x78>)
   173f8:	6013      	str	r3, [r2, #0]
   173fa:	68fb      	ldr	r3, [r7, #12]
   173fc:	f103 0318 	add.w	r3, r3, #24	; 0x18
   17400:	4618      	mov	r0, r3
   17402:	f7f7 fa8f 	bl	e924 <_ZN8PositionC1Ev>
   17406:	68fb      	ldr	r3, [r7, #12]
   17408:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1740c:	4618      	mov	r0, r3
   1740e:	f7f7 fa89 	bl	e924 <_ZN8PositionC1Ev>
{
    this->goBack = false;
   17412:	68fa      	ldr	r2, [r7, #12]
   17414:	f04f 0300 	mov.w	r3, #0	; 0x0
   17418:	7413      	strb	r3, [r2, #16]
    this->positionMarches = Position(1230,150);
   1741a:	68fb      	ldr	r3, [r7, #12]
   1741c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   17420:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17424:	4618      	mov	r0, r3
   17426:	490a      	ldr	r1, [pc, #40]	(17450 <_ZN5TapisC2E8Position+0x7c>)
   17428:	4a0a      	ldr	r2, [pc, #40]	(17454 <_ZN5TapisC2E8Position+0x80>)
   1742a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1742e:	f7f7 faa1 	bl	e974 <_ZN8PositionC1Effb>
   17432:	4620      	mov	r0, r4
   17434:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17438:	e893 0006 	ldmia.w	r3, {r1, r2}
   1743c:	f7f7 fb2e 	bl	ea9c <_ZN8PositionaSES_>
}
   17440:	68fb      	ldr	r3, [r7, #12]
   17442:	4618      	mov	r0, r3
   17444:	f107 071c 	add.w	r7, r7, #28	; 0x1c
   17448:	46bd      	mov	sp, r7
   1744a:	bd90      	pop	{r4, r7, pc}
   1744c:	00022050 	.word	0x00022050
   17450:	4499c000 	.word	0x4499c000
   17454:	43160000 	.word	0x43160000

00017458 <_exit>:

void _exit(int status)
{
    //Endless loop
    for(;;);
}
   17458:	b480      	push	{r7}
   1745a:	b083      	sub	sp, #12
   1745c:	af00      	add	r7, sp, #0
   1745e:	6078      	str	r0, [r7, #4]
   17460:	e7fe      	b.n	17460 <_exit+0x8>
   17462:	46c0      	nop			(mov r8, r8)

00017464 <_close>:

int _close(int file)
{
   17464:	b480      	push	{r7}
   17466:	b083      	sub	sp, #12
   17468:	af00      	add	r7, sp, #0
   1746a:	6078      	str	r0, [r7, #4]
    return -1;
   1746c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17470:	4618      	mov	r0, r3
   17472:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17476:	46bd      	mov	sp, r7
   17478:	bc80      	pop	{r7}
   1747a:	4770      	bx	lr

0001747c <_execve>:

char* __env[1] = {0};
char** environ = __env;

int _execve(char* name, char** argv, char** env)
{
   1747c:	b480      	push	{r7}
   1747e:	b085      	sub	sp, #20
   17480:	af00      	add	r7, sp, #0
   17482:	60f8      	str	r0, [r7, #12]
   17484:	60b9      	str	r1, [r7, #8]
   17486:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
   17488:	4a05      	ldr	r2, [pc, #20]	(174a0 <_execve+0x24>)
   1748a:	f04f 030c 	mov.w	r3, #12	; 0xc
   1748e:	6013      	str	r3, [r2, #0]
    return -1;
   17490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17494:	4618      	mov	r0, r3
   17496:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1749a:	46bd      	mov	sp, r7
   1749c:	bc80      	pop	{r7}
   1749e:	4770      	bx	lr
   174a0:	20000680 	.word	0x20000680

000174a4 <_fork>:

int _fork(void)
{
   174a4:	b480      	push	{r7}
   174a6:	af00      	add	r7, sp, #0
    errno = EAGAIN;
   174a8:	4a04      	ldr	r2, [pc, #16]	(174bc <_fork+0x18>)
   174aa:	f04f 030b 	mov.w	r3, #11	; 0xb
   174ae:	6013      	str	r3, [r2, #0]
    return -1;
   174b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   174b4:	4618      	mov	r0, r3
   174b6:	46bd      	mov	sp, r7
   174b8:	bc80      	pop	{r7}
   174ba:	4770      	bx	lr
   174bc:	20000680 	.word	0x20000680

000174c0 <_fstat>:

int _fstat(int file, struct stat* st)
{
   174c0:	b480      	push	{r7}
   174c2:	b083      	sub	sp, #12
   174c4:	af00      	add	r7, sp, #0
   174c6:	6078      	str	r0, [r7, #4]
   174c8:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
   174ca:	683a      	ldr	r2, [r7, #0]
   174cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   174d0:	6053      	str	r3, [r2, #4]
    return 0;
   174d2:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   174d6:	4618      	mov	r0, r3
   174d8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   174dc:	46bd      	mov	sp, r7
   174de:	bc80      	pop	{r7}
   174e0:	4770      	bx	lr
   174e2:	46c0      	nop			(mov r8, r8)

000174e4 <_getpid>:

int _getpid(void)
{
   174e4:	b480      	push	{r7}
   174e6:	af00      	add	r7, sp, #0
    return 1;
   174e8:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   174ec:	4618      	mov	r0, r3
   174ee:	46bd      	mov	sp, r7
   174f0:	bc80      	pop	{r7}
   174f2:	4770      	bx	lr

000174f4 <_isatty>:

int _isatty(int file)
{
   174f4:	b480      	push	{r7}
   174f6:	b083      	sub	sp, #12
   174f8:	af00      	add	r7, sp, #0
   174fa:	6078      	str	r0, [r7, #4]
    return 1;
   174fc:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   17500:	4618      	mov	r0, r3
   17502:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17506:	46bd      	mov	sp, r7
   17508:	bc80      	pop	{r7}
   1750a:	4770      	bx	lr

0001750c <_kill>:

int _kill(int pid, int sig)
{
   1750c:	b480      	push	{r7}
   1750e:	b083      	sub	sp, #12
   17510:	af00      	add	r7, sp, #0
   17512:	6078      	str	r0, [r7, #4]
   17514:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
   17516:	4a06      	ldr	r2, [pc, #24]	(17530 <_kill+0x24>)
   17518:	f04f 0316 	mov.w	r3, #22	; 0x16
   1751c:	6013      	str	r3, [r2, #0]
    return -1;
   1751e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17522:	4618      	mov	r0, r3
   17524:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17528:	46bd      	mov	sp, r7
   1752a:	bc80      	pop	{r7}
   1752c:	4770      	bx	lr
   1752e:	46c0      	nop			(mov r8, r8)
   17530:	20000680 	.word	0x20000680

00017534 <_link>:

int _link(char* old, char* new)
{
   17534:	b480      	push	{r7}
   17536:	b083      	sub	sp, #12
   17538:	af00      	add	r7, sp, #0
   1753a:	6078      	str	r0, [r7, #4]
   1753c:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
   1753e:	4a06      	ldr	r2, [pc, #24]	(17558 <_link+0x24>)
   17540:	f04f 031f 	mov.w	r3, #31	; 0x1f
   17544:	6013      	str	r3, [r2, #0]
    return -1;
   17546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1754a:	4618      	mov	r0, r3
   1754c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17550:	46bd      	mov	sp, r7
   17552:	bc80      	pop	{r7}
   17554:	4770      	bx	lr
   17556:	46c0      	nop			(mov r8, r8)
   17558:	20000680 	.word	0x20000680

0001755c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
   1755c:	b480      	push	{r7}
   1755e:	b085      	sub	sp, #20
   17560:	af00      	add	r7, sp, #0
   17562:	60f8      	str	r0, [r7, #12]
   17564:	60b9      	str	r1, [r7, #8]
   17566:	607a      	str	r2, [r7, #4]
    return 0;
   17568:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   1756c:	4618      	mov	r0, r3
   1756e:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17572:	46bd      	mov	sp, r7
   17574:	bc80      	pop	{r7}
   17576:	4770      	bx	lr

00017578 <_open>:

int _open(const char* name, int flags, int mode)
{
   17578:	b480      	push	{r7}
   1757a:	b085      	sub	sp, #20
   1757c:	af00      	add	r7, sp, #0
   1757e:	60f8      	str	r0, [r7, #12]
   17580:	60b9      	str	r1, [r7, #8]
   17582:	607a      	str	r2, [r7, #4]
    return -1;
   17584:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17588:	4618      	mov	r0, r3
   1758a:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1758e:	46bd      	mov	sp, r7
   17590:	bc80      	pop	{r7}
   17592:	4770      	bx	lr

00017594 <_read>:

int _read(int file, char* ptr, int len)
{
   17594:	b480      	push	{r7}
   17596:	b085      	sub	sp, #20
   17598:	af00      	add	r7, sp, #0
   1759a:	60f8      	str	r0, [r7, #12]
   1759c:	60b9      	str	r1, [r7, #8]
   1759e:	607a      	str	r2, [r7, #4]
    return 0;
   175a0:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   175a4:	4618      	mov	r0, r3
   175a6:	f107 0714 	add.w	r7, r7, #20	; 0x14
   175aa:	46bd      	mov	sp, r7
   175ac:	bc80      	pop	{r7}
   175ae:	4770      	bx	lr

000175b0 <_sbrk>:

caddr_t _sbrk(int incr)
{
   175b0:	b580      	push	{r7, lr}
   175b2:	b084      	sub	sp, #16
   175b4:	af00      	add	r7, sp, #0
   175b6:	6078      	str	r0, [r7, #4]
    extern char _end;
    static char* heap_end;
    char* prev_heap_end;
    char* stack_ptr = (char*)0xffffffff;
   175b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175bc:	60fb      	str	r3, [r7, #12]

    if(heap_end == 0)
   175be:	4b12      	ldr	r3, [pc, #72]	(17608 <_sbrk+0x58>)
   175c0:	681b      	ldr	r3, [r3, #0]
   175c2:	2b00      	cmp	r3, #0
   175c4:	d102      	bne.n	175cc <_sbrk+0x1c>
        heap_end = &_end;
   175c6:	4a10      	ldr	r2, [pc, #64]	(17608 <_sbrk+0x58>)
   175c8:	4b10      	ldr	r3, [pc, #64]	(1760c <_sbrk+0x5c>)
   175ca:	6013      	str	r3, [r2, #0]
    prev_heap_end = heap_end;
   175cc:	4b0e      	ldr	r3, [pc, #56]	(17608 <_sbrk+0x58>)
   175ce:	681b      	ldr	r3, [r3, #0]
   175d0:	60bb      	str	r3, [r7, #8]
    if( heap_end + incr > stack_ptr)
   175d2:	4b0d      	ldr	r3, [pc, #52]	(17608 <_sbrk+0x58>)
   175d4:	681a      	ldr	r2, [r3, #0]
   175d6:	687b      	ldr	r3, [r7, #4]
   175d8:	441a      	add	r2, r3
   175da:	68fb      	ldr	r3, [r7, #12]
   175dc:	429a      	cmp	r2, r3
   175de:	d906      	bls.n	175ee <_sbrk+0x3e>
    {
        write(1, "Heap and stack collision\n", 25);
   175e0:	f04f 0001 	mov.w	r0, #1	; 0x1
   175e4:	490a      	ldr	r1, [pc, #40]	(17610 <_sbrk+0x60>)
   175e6:	f04f 0219 	mov.w	r2, #25	; 0x19
   175ea:	f009 fd9d 	bl	21128 <write>
      //  abort();
    }

    heap_end += incr;
   175ee:	4b06      	ldr	r3, [pc, #24]	(17608 <_sbrk+0x58>)
   175f0:	681a      	ldr	r2, [r3, #0]
   175f2:	687b      	ldr	r3, [r7, #4]
   175f4:	441a      	add	r2, r3
   175f6:	4b04      	ldr	r3, [pc, #16]	(17608 <_sbrk+0x58>)
   175f8:	601a      	str	r2, [r3, #0]
    return (caddr_t)prev_heap_end;
   175fa:	68bb      	ldr	r3, [r7, #8]
}
   175fc:	4618      	mov	r0, r3
   175fe:	f107 0710 	add.w	r7, r7, #16	; 0x10
   17602:	46bd      	mov	sp, r7
   17604:	bd80      	pop	{r7, pc}
   17606:	46c0      	nop			(mov r8, r8)
   17608:	2000067c 	.word	0x2000067c
   1760c:	20000684 	.word	0x20000684
   17610:	00022068 	.word	0x00022068

00017614 <_times>:

typedef struct tms tms;

int _times(tms* buf)
{
   17614:	b480      	push	{r7}
   17616:	b083      	sub	sp, #12
   17618:	af00      	add	r7, sp, #0
   1761a:	6078      	str	r0, [r7, #4]
    return -1;
   1761c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17620:	4618      	mov	r0, r3
   17622:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17626:	46bd      	mov	sp, r7
   17628:	bc80      	pop	{r7}
   1762a:	4770      	bx	lr

0001762c <_unlink>:

int _unlink(char* name)
{
   1762c:	b480      	push	{r7}
   1762e:	b083      	sub	sp, #12
   17630:	af00      	add	r7, sp, #0
   17632:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
   17634:	4a05      	ldr	r2, [pc, #20]	(1764c <_unlink+0x20>)
   17636:	f04f 0302 	mov.w	r3, #2	; 0x2
   1763a:	6013      	str	r3, [r2, #0]
    return -1;
   1763c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17640:	4618      	mov	r0, r3
   17642:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17646:	46bd      	mov	sp, r7
   17648:	bc80      	pop	{r7}
   1764a:	4770      	bx	lr
   1764c:	20000680 	.word	0x20000680

00017650 <_wait>:

int _wait(int* status)
{
   17650:	b480      	push	{r7}
   17652:	b083      	sub	sp, #12
   17654:	af00      	add	r7, sp, #0
   17656:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
   17658:	4a05      	ldr	r2, [pc, #20]	(17670 <_wait+0x20>)
   1765a:	f04f 030a 	mov.w	r3, #10	; 0xa
   1765e:	6013      	str	r3, [r2, #0]
    return -1;
   17660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17664:	4618      	mov	r0, r3
   17666:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1766a:	46bd      	mov	sp, r7
   1766c:	bc80      	pop	{r7}
   1766e:	4770      	bx	lr
   17670:	20000680 	.word	0x20000680

00017674 <_write>:

int _write(int file, char* ptr, int len)
{
   17674:	b480      	push	{r7}
   17676:	b085      	sub	sp, #20
   17678:	af00      	add	r7, sp, #0
   1767a:	60f8      	str	r0, [r7, #12]
   1767c:	60b9      	str	r1, [r7, #8]
   1767e:	607a      	str	r2, [r7, #4]
    return len;
   17680:	687b      	ldr	r3, [r7, #4]
}
   17682:	4618      	mov	r0, r3
   17684:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17688:	46bd      	mov	sp, r7
   1768a:	bc80      	pop	{r7}
   1768c:	4770      	bx	lr
   1768e:	46c0      	nop			(mov r8, r8)

00017690 <__cxa_end_cleanup>:
   17690:	b41e      	push	{r1, r2, r3, r4}
   17692:	f005 fdc3 	bl	1d21c <__gnu_end_cleanup>
   17696:	bc1e      	pop	{r1, r2, r3, r4}
   17698:	f004 fbd4 	bl	1be44 <_Unwind_Resume>

0001769c <d_make_comp>:
   1769c:	b470      	push	{r4, r5, r6}
   1769e:	461d      	mov	r5, r3
   176a0:	1e4b      	subs	r3, r1, #1
   176a2:	460e      	mov	r6, r1
   176a4:	4614      	mov	r4, r2
   176a6:	2b34      	cmp	r3, #52
   176a8:	d821      	bhi.n	176ee <d_make_comp+0x52>
   176aa:	e8df f003 	tbb	[pc, r3]
   176ae:	3232      	.short	0x3232
   176b0:	20203232 	.word	0x20203232
   176b4:	32414120 	.word	0x32414120
   176b8:	41414141 	.word	0x41414141
   176bc:	41414141 	.word	0x41414141
   176c0:	1c204141 	.word	0x1c204141
   176c4:	1c1c1c1c 	.word	0x1c1c1c1c
   176c8:	4141321c 	.word	0x4141321c
   176cc:	20414141 	.word	0x20414141
   176d0:	321b1c41 	.word	0x321b1c41
   176d4:	20204141 	.word	0x20204141
   176d8:	32323241 	.word	0x32323241
   176dc:	32323232 	.word	0x32323232
   176e0:	00324132 	.word	0x00324132
   176e4:	b11d      	cbz	r5, 176ee <d_make_comp+0x52>
   176e6:	6941      	ldr	r1, [r0, #20]
   176e8:	6983      	ldr	r3, [r0, #24]
   176ea:	4299      	cmp	r1, r3
   176ec:	db02      	blt.n	176f4 <d_make_comp+0x58>
   176ee:	2000      	movs	r0, #0
   176f0:	bc70      	pop	{r4, r5, r6}
   176f2:	4770      	bx	lr
   176f4:	008b      	lsls	r3, r1, #2
   176f6:	010a      	lsls	r2, r1, #4
   176f8:	f8d0 c010 	ldr.w	ip, [r0, #16]
   176fc:	1ad2      	subs	r2, r2, r3
   176fe:	1c4b      	adds	r3, r1, #1
   17700:	6143      	str	r3, [r0, #20]
   17702:	eb1c 0002 	adds.w	r0, ip, r2
   17706:	bf1e      	ittt	ne
   17708:	f80c 6002 	strbne.w	r6, [ip, r2]
   1770c:	6044      	strne	r4, [r0, #4]
   1770e:	6085      	strne	r5, [r0, #8]
   17710:	e7ee      	b.n	176f0 <d_make_comp+0x54>
   17712:	f1d5 0301 	rsbs	r3, r5, #1	; 0x1
   17716:	bf38      	it	cc
   17718:	2300      	movcc	r3, #0
   1771a:	2c00      	cmp	r4, #0
   1771c:	bf08      	it	eq
   1771e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17722:	2b00      	cmp	r3, #0
   17724:	d1e3      	bne.n	176ee <d_make_comp+0x52>
   17726:	6941      	ldr	r1, [r0, #20]
   17728:	6983      	ldr	r3, [r0, #24]
   1772a:	4299      	cmp	r1, r3
   1772c:	dadf      	bge.n	176ee <d_make_comp+0x52>
   1772e:	e7e1      	b.n	176f4 <d_make_comp+0x58>
   17730:	2c00      	cmp	r4, #0
   17732:	d0dc      	beq.n	176ee <d_make_comp+0x52>
   17734:	6941      	ldr	r1, [r0, #20]
   17736:	6983      	ldr	r3, [r0, #24]
   17738:	4299      	cmp	r1, r3
   1773a:	dad8      	bge.n	176ee <d_make_comp+0x52>
   1773c:	e7da      	b.n	176f4 <d_make_comp+0x58>
   1773e:	46c0      	nop			(mov r8, r8)

00017740 <d_number>:
   17740:	b410      	push	{r4}
   17742:	68c1      	ldr	r1, [r0, #12]
   17744:	f891 c000 	ldrb.w	ip, [r1]
   17748:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
   1774c:	d01c      	beq.n	17788 <d_number+0x48>
   1774e:	2400      	movs	r4, #0
   17750:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   17754:	b2db      	uxtb	r3, r3
   17756:	2b09      	cmp	r3, #9
   17758:	d81c      	bhi.n	17794 <d_number+0x54>
   1775a:	68c1      	ldr	r1, [r0, #12]
   1775c:	2200      	movs	r2, #0
   1775e:	0053      	lsls	r3, r2, #1
   17760:	3101      	adds	r1, #1
   17762:	00d2      	lsls	r2, r2, #3
   17764:	189b      	adds	r3, r3, r2
   17766:	60c1      	str	r1, [r0, #12]
   17768:	4463      	add	r3, ip
   1776a:	f891 c000 	ldrb.w	ip, [r1]
   1776e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17772:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   17776:	b2db      	uxtb	r3, r3
   17778:	2b09      	cmp	r3, #9
   1777a:	d9f0      	bls.n	1775e <d_number+0x1e>
   1777c:	4610      	mov	r0, r2
   1777e:	b10c      	cbz	r4, 17784 <d_number+0x44>
   17780:	f1c2 0000 	rsb	r0, r2, #0	; 0x0
   17784:	bc10      	pop	{r4}
   17786:	4770      	bx	lr
   17788:	1c4b      	adds	r3, r1, #1
   1778a:	60c3      	str	r3, [r0, #12]
   1778c:	f891 c001 	ldrb.w	ip, [r1, #1]
   17790:	2401      	movs	r4, #1
   17792:	e7dd      	b.n	17750 <d_number+0x10>
   17794:	2200      	movs	r2, #0
   17796:	e7f1      	b.n	1777c <d_number+0x3c>

00017798 <d_call_offset>:
   17798:	b510      	push	{r4, lr}
   1779a:	4604      	mov	r4, r0
   1779c:	b931      	cbnz	r1, 177ac <d_call_offset+0x14>
   1779e:	68c3      	ldr	r3, [r0, #12]
   177a0:	7819      	ldrb	r1, [r3, #0]
   177a2:	b909      	cbnz	r1, 177a8 <d_call_offset+0x10>
   177a4:	2000      	movs	r0, #0
   177a6:	bd10      	pop	{r4, pc}
   177a8:	3301      	adds	r3, #1
   177aa:	60c3      	str	r3, [r0, #12]
   177ac:	2968      	cmp	r1, #104
   177ae:	d00a      	beq.n	177c6 <d_call_offset+0x2e>
   177b0:	2976      	cmp	r1, #118
   177b2:	d1f7      	bne.n	177a4 <d_call_offset+0xc>
   177b4:	4620      	mov	r0, r4
   177b6:	f7ff ffc3 	bl	17740 <d_number>
   177ba:	68e2      	ldr	r2, [r4, #12]
   177bc:	7813      	ldrb	r3, [r2, #0]
   177be:	2b5f      	cmp	r3, #95
   177c0:	d1f0      	bne.n	177a4 <d_call_offset+0xc>
   177c2:	1c53      	adds	r3, r2, #1
   177c4:	60e3      	str	r3, [r4, #12]
   177c6:	4620      	mov	r0, r4
   177c8:	f7ff ffba 	bl	17740 <d_number>
   177cc:	68e2      	ldr	r2, [r4, #12]
   177ce:	7813      	ldrb	r3, [r2, #0]
   177d0:	2b5f      	cmp	r3, #95
   177d2:	d1e7      	bne.n	177a4 <d_call_offset+0xc>
   177d4:	1c53      	adds	r3, r2, #1
   177d6:	60e3      	str	r3, [r4, #12]
   177d8:	2001      	movs	r0, #1
   177da:	e7e4      	b.n	177a6 <d_call_offset+0xe>

000177dc <d_cv_qualifiers>:
   177dc:	b570      	push	{r4, r5, r6, lr}
   177de:	68c3      	ldr	r3, [r0, #12]
   177e0:	4616      	mov	r6, r2
   177e2:	781a      	ldrb	r2, [r3, #0]
   177e4:	4604      	mov	r4, r0
   177e6:	460d      	mov	r5, r1
   177e8:	2a72      	cmp	r2, #114
   177ea:	bf14      	ite	ne
   177ec:	2100      	movne	r1, #0
   177ee:	2101      	moveq	r1, #1
   177f0:	2a56      	cmp	r2, #86
   177f2:	bf14      	ite	ne
   177f4:	2000      	movne	r0, #0
   177f6:	2001      	moveq	r0, #1
   177f8:	ea51 0c00 	orrs.w	ip, r1, r0
   177fc:	d128      	bne.n	17850 <d_cv_qualifiers+0x74>
   177fe:	2a4b      	cmp	r2, #75
   17800:	d124      	bne.n	1784c <d_cv_qualifiers+0x70>
   17802:	3301      	adds	r3, #1
   17804:	60e3      	str	r3, [r4, #12]
   17806:	b988      	cbnz	r0, 1782c <d_cv_qualifiers+0x50>
   17808:	6b23      	ldr	r3, [r4, #48]
   1780a:	2e00      	cmp	r6, #0
   1780c:	bf14      	ite	ne
   1780e:	211b      	movne	r1, #27
   17810:	2118      	moveq	r1, #24
   17812:	3306      	adds	r3, #6
   17814:	6323      	str	r3, [r4, #48]
   17816:	2200      	movs	r2, #0
   17818:	4620      	mov	r0, r4
   1781a:	4613      	mov	r3, r2
   1781c:	f7ff ff3e 	bl	1769c <d_make_comp>
   17820:	6028      	str	r0, [r5, #0]
   17822:	b190      	cbz	r0, 1784a <d_cv_qualifiers+0x6e>
   17824:	68e3      	ldr	r3, [r4, #12]
   17826:	1d05      	adds	r5, r0, #4
   17828:	781a      	ldrb	r2, [r3, #0]
   1782a:	e7dd      	b.n	177e8 <d_cv_qualifiers+0xc>
   1782c:	6b23      	ldr	r3, [r4, #48]
   1782e:	2200      	movs	r2, #0
   17830:	3309      	adds	r3, #9
   17832:	6323      	str	r3, [r4, #48]
   17834:	2e00      	cmp	r6, #0
   17836:	bf14      	ite	ne
   17838:	211a      	movne	r1, #26
   1783a:	2117      	moveq	r1, #23
   1783c:	4620      	mov	r0, r4
   1783e:	4613      	mov	r3, r2
   17840:	f7ff ff2c 	bl	1769c <d_make_comp>
   17844:	6028      	str	r0, [r5, #0]
   17846:	2800      	cmp	r0, #0
   17848:	d1ec      	bne.n	17824 <d_cv_qualifiers+0x48>
   1784a:	4605      	mov	r5, r0
   1784c:	4628      	mov	r0, r5
   1784e:	bd70      	pop	{r4, r5, r6, pc}
   17850:	3301      	adds	r3, #1
   17852:	60e3      	str	r3, [r4, #12]
   17854:	2900      	cmp	r1, #0
   17856:	d0d6      	beq.n	17806 <d_cv_qualifiers+0x2a>
   17858:	6b23      	ldr	r3, [r4, #48]
   1785a:	2e00      	cmp	r6, #0
   1785c:	bf14      	ite	ne
   1785e:	2119      	movne	r1, #25
   17860:	2116      	moveq	r1, #22
   17862:	3309      	adds	r3, #9
   17864:	6323      	str	r3, [r4, #48]
   17866:	e7d6      	b.n	17816 <d_cv_qualifiers+0x3a>

00017868 <d_template_param>:
   17868:	b530      	push	{r4, r5, lr}
   1786a:	68c2      	ldr	r2, [r0, #12]
   1786c:	b081      	sub	sp, #4
   1786e:	7813      	ldrb	r3, [r2, #0]
   17870:	4604      	mov	r4, r0
   17872:	2b54      	cmp	r3, #84
   17874:	d002      	beq.n	1787c <d_template_param+0x14>
   17876:	2000      	movs	r0, #0
   17878:	b001      	add	sp, #4
   1787a:	bd30      	pop	{r4, r5, pc}
   1787c:	1c51      	adds	r1, r2, #1
   1787e:	60c1      	str	r1, [r0, #12]
   17880:	7853      	ldrb	r3, [r2, #1]
   17882:	2b5f      	cmp	r3, #95
   17884:	d119      	bne.n	178ba <d_template_param+0x52>
   17886:	2500      	movs	r5, #0
   17888:	1c4b      	adds	r3, r1, #1
   1788a:	6aa2      	ldr	r2, [r4, #40]
   1788c:	60e3      	str	r3, [r4, #12]
   1788e:	f8d4 c014 	ldr.w	ip, [r4, #20]
   17892:	69a3      	ldr	r3, [r4, #24]
   17894:	3201      	adds	r2, #1
   17896:	459c      	cmp	ip, r3
   17898:	62a2      	str	r2, [r4, #40]
   1789a:	daec      	bge.n	17876 <d_template_param+0xe>
   1789c:	ea4f 038c 	mov.w	r3, ip, lsl #2
   178a0:	ea4f 120c 	mov.w	r2, ip, lsl #4
   178a4:	6921      	ldr	r1, [r4, #16]
   178a6:	1ad2      	subs	r2, r2, r3
   178a8:	1888      	adds	r0, r1, r2
   178aa:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   178ae:	6163      	str	r3, [r4, #20]
   178b0:	d0e2      	beq.n	17878 <d_template_param+0x10>
   178b2:	2305      	movs	r3, #5
   178b4:	548b      	strb	r3, [r1, r2]
   178b6:	6045      	str	r5, [r0, #4]
   178b8:	e7de      	b.n	17878 <d_template_param+0x10>
   178ba:	f7ff ff41 	bl	17740 <d_number>
   178be:	2800      	cmp	r0, #0
   178c0:	dbd9      	blt.n	17876 <d_template_param+0xe>
   178c2:	68e1      	ldr	r1, [r4, #12]
   178c4:	780b      	ldrb	r3, [r1, #0]
   178c6:	2b5f      	cmp	r3, #95
   178c8:	d1d5      	bne.n	17876 <d_template_param+0xe>
   178ca:	1c45      	adds	r5, r0, #1
   178cc:	e7dc      	b.n	17888 <d_template_param+0x20>
   178ce:	46c0      	nop			(mov r8, r8)

000178d0 <d_substitution>:
   178d0:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
   178d4:	68c2      	ldr	r2, [r0, #12]
   178d6:	460c      	mov	r4, r1
   178d8:	7813      	ldrb	r3, [r2, #0]
   178da:	2b53      	cmp	r3, #83
   178dc:	d003      	beq.n	178e6 <d_substitution+0x16>
   178de:	2000      	movs	r0, #0
   178e0:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
   178e4:	4770      	bx	lr
   178e6:	1c53      	adds	r3, r2, #1
   178e8:	60c3      	str	r3, [r0, #12]
   178ea:	7851      	ldrb	r1, [r2, #1]
   178ec:	bb39      	cbnz	r1, 1793e <d_substitution+0x6e>
   178ee:	6883      	ldr	r3, [r0, #8]
   178f0:	08db      	lsrs	r3, r3, #3
   178f2:	f013 0701 	ands.w	r7, r3, #1	; 0x1
   178f6:	bf14      	ite	ne
   178f8:	2200      	movne	r2, #0
   178fa:	2201      	moveq	r2, #1
   178fc:	2c00      	cmp	r4, #0
   178fe:	bf0c      	ite	eq
   17900:	2200      	moveq	r2, #0
   17902:	f002 0201 	andne.w	r2, r2, #1	; 0x1
   17906:	b13a      	cbz	r2, 17918 <d_substitution+0x48>
   17908:	68c2      	ldr	r2, [r0, #12]
   1790a:	7813      	ldrb	r3, [r2, #0]
   1790c:	3b43      	subs	r3, #67
   1790e:	b2db      	uxtb	r3, r3
   17910:	2b01      	cmp	r3, #1
   17912:	bf8c      	ite	hi
   17914:	2700      	movhi	r7, #0
   17916:	2701      	movls	r7, #1
   17918:	4a51      	ldr	r2, [pc, #324]	(17a60 <d_substitution+0x190>)
   1791a:	f1b2 03c4 	subs.w	r3, r2, #196	; 0xc4
   1791e:	d3de      	bcc.n	178de <d_substitution+0xe>
   17920:	2974      	cmp	r1, #116
   17922:	bf08      	it	eq
   17924:	469c      	moveq	ip, r3
   17926:	d04f      	beq.n	179c8 <d_substitution+0xf8>
   17928:	469c      	mov	ip, r3
   1792a:	e003      	b.n	17934 <d_substitution+0x64>
   1792c:	f89c 3000 	ldrb.w	r3, [ip]
   17930:	428b      	cmp	r3, r1
   17932:	d049      	beq.n	179c8 <d_substitution+0xf8>
   17934:	f10c 0c1c 	add.w	ip, ip, #28	; 0x1c
   17938:	4594      	cmp	ip, r2
   1793a:	d1f7      	bne.n	1792c <d_substitution+0x5c>
   1793c:	e7cf      	b.n	178de <d_substitution+0xe>
   1793e:	3301      	adds	r3, #1
   17940:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   17944:	60c3      	str	r3, [r0, #12]
   17946:	fa5f f38c 	uxtb.w	r3, ip
   1794a:	2b09      	cmp	r3, #9
   1794c:	bf8c      	ite	hi
   1794e:	2300      	movhi	r3, #0
   17950:	2301      	movls	r3, #1
   17952:	295f      	cmp	r1, #95
   17954:	bf08      	it	eq
   17956:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1795a:	2b00      	cmp	r3, #0
   1795c:	d079      	beq.n	17a52 <d_substitution+0x182>
   1795e:	295f      	cmp	r1, #95
   17960:	d030      	beq.n	179c4 <d_substitution+0xf4>
   17962:	fa5f f38c 	uxtb.w	r3, ip
   17966:	2200      	movs	r2, #0
   17968:	2b09      	cmp	r3, #9
   1796a:	d814      	bhi.n	17996 <d_substitution+0xc6>
   1796c:	0093      	lsls	r3, r2, #2
   1796e:	0152      	lsls	r2, r2, #5
   17970:	189b      	adds	r3, r3, r2
   17972:	185b      	adds	r3, r3, r1
   17974:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17978:	2a00      	cmp	r2, #0
   1797a:	dbb0      	blt.n	178de <d_substitution+0xe>
   1797c:	68c3      	ldr	r3, [r0, #12]
   1797e:	7819      	ldrb	r1, [r3, #0]
   17980:	b119      	cbz	r1, 1798a <d_substitution+0xba>
   17982:	3301      	adds	r3, #1
   17984:	295f      	cmp	r1, #95
   17986:	60c3      	str	r3, [r0, #12]
   17988:	d011      	beq.n	179ae <d_substitution+0xde>
   1798a:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   1798e:	fa5f f38c 	uxtb.w	r3, ip
   17992:	2b09      	cmp	r3, #9
   17994:	d9ea      	bls.n	1796c <d_substitution+0x9c>
   17996:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   1799a:	b2db      	uxtb	r3, r3
   1799c:	2b19      	cmp	r3, #25
   1799e:	d89e      	bhi.n	178de <d_substitution+0xe>
   179a0:	0093      	lsls	r3, r2, #2
   179a2:	0152      	lsls	r2, r2, #5
   179a4:	189b      	adds	r3, r3, r2
   179a6:	185b      	adds	r3, r3, r1
   179a8:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   179ac:	e7e4      	b.n	17978 <d_substitution+0xa8>
   179ae:	1c51      	adds	r1, r2, #1
   179b0:	6a03      	ldr	r3, [r0, #32]
   179b2:	4299      	cmp	r1, r3
   179b4:	da93      	bge.n	178de <d_substitution+0xe>
   179b6:	6a83      	ldr	r3, [r0, #40]
   179b8:	69c2      	ldr	r2, [r0, #28]
   179ba:	3301      	adds	r3, #1
   179bc:	6283      	str	r3, [r0, #40]
   179be:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   179c2:	e78d      	b.n	178e0 <d_substitution+0x10>
   179c4:	395f      	subs	r1, #95
   179c6:	e7f3      	b.n	179b0 <d_substitution+0xe0>
   179c8:	f8dc a014 	ldr.w	sl, [ip, #20]
   179cc:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   179d0:	d03c      	beq.n	17a4c <d_substitution+0x17c>
   179d2:	6945      	ldr	r5, [r0, #20]
   179d4:	6986      	ldr	r6, [r0, #24]
   179d6:	f8dc 8018 	ldr.w	r8, [ip, #24]
   179da:	42b5      	cmp	r5, r6
   179dc:	db1c      	blt.n	17a18 <d_substitution+0x148>
   179de:	2200      	movs	r2, #0
   179e0:	62c2      	str	r2, [r0, #44]
   179e2:	2f00      	cmp	r7, #0
   179e4:	d02d      	beq.n	17a42 <d_substitution+0x172>
   179e6:	f8dc 400c 	ldr.w	r4, [ip, #12]
   179ea:	f8dc c010 	ldr.w	ip, [ip, #16]
   179ee:	6b03      	ldr	r3, [r0, #48]
   179f0:	42b5      	cmp	r5, r6
   179f2:	4463      	add	r3, ip
   179f4:	6303      	str	r3, [r0, #48]
   179f6:	f6bf af72 	bge.w	178de <d_substitution+0xe>
   179fa:	00ab      	lsls	r3, r5, #2
   179fc:	012a      	lsls	r2, r5, #4
   179fe:	6901      	ldr	r1, [r0, #16]
   17a00:	1ad2      	subs	r2, r2, r3
   17a02:	1c6b      	adds	r3, r5, #1
   17a04:	6143      	str	r3, [r0, #20]
   17a06:	1888      	adds	r0, r1, r2
   17a08:	f43f af6a 	beq.w	178e0 <d_substitution+0x10>
   17a0c:	2315      	movs	r3, #21
   17a0e:	548b      	strb	r3, [r1, r2]
   17a10:	6044      	str	r4, [r0, #4]
   17a12:	f8c0 c008 	str.w	ip, [r0, #8]
   17a16:	e763      	b.n	178e0 <d_substitution+0x10>
   17a18:	012b      	lsls	r3, r5, #4
   17a1a:	00aa      	lsls	r2, r5, #2
   17a1c:	6901      	ldr	r1, [r0, #16]
   17a1e:	ebc2 0403 	rsb	r4, r2, r3
   17a22:	1c6b      	adds	r3, r5, #1
   17a24:	190a      	adds	r2, r1, r4
   17a26:	6143      	str	r3, [r0, #20]
   17a28:	bf08      	it	eq
   17a2a:	461d      	moveq	r5, r3
   17a2c:	d0d8      	beq.n	179e0 <d_substitution+0x110>
   17a2e:	f8c2 a004 	str.w	sl, [r2, #4]
   17a32:	f8c2 8008 	str.w	r8, [r2, #8]
   17a36:	2315      	movs	r3, #21
   17a38:	550b      	strb	r3, [r1, r4]
   17a3a:	6945      	ldr	r5, [r0, #20]
   17a3c:	6986      	ldr	r6, [r0, #24]
   17a3e:	62c2      	str	r2, [r0, #44]
   17a40:	e7cf      	b.n	179e2 <d_substitution+0x112>
   17a42:	f8dc 4004 	ldr.w	r4, [ip, #4]
   17a46:	f8dc c008 	ldr.w	ip, [ip, #8]
   17a4a:	e7d0      	b.n	179ee <d_substitution+0x11e>
   17a4c:	6945      	ldr	r5, [r0, #20]
   17a4e:	6986      	ldr	r6, [r0, #24]
   17a50:	e7c7      	b.n	179e2 <d_substitution+0x112>
   17a52:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   17a56:	b2db      	uxtb	r3, r3
   17a58:	2b19      	cmp	r3, #25
   17a5a:	d982      	bls.n	17962 <d_substitution+0x92>
   17a5c:	e747      	b.n	178ee <d_substitution+0x1e>
   17a5e:	46c0      	nop			(mov r8, r8)
   17a60:	00022670 	.word	0x00022670

00017a64 <d_append_char>:
   17a64:	b570      	push	{r4, r5, r6, lr}
   17a66:	460e      	mov	r6, r1
   17a68:	f8d0 1104 	ldr.w	r1, [r0, #260]
   17a6c:	4605      	mov	r5, r0
   17a6e:	29ff      	cmp	r1, #255
   17a70:	d008      	beq.n	17a84 <d_append_char+0x20>
   17a72:	eb05 0301 	add.w	r3, r5, r1
   17a76:	1c4a      	adds	r2, r1, #1
   17a78:	711e      	strb	r6, [r3, #4]
   17a7a:	f8c5 2104 	str.w	r2, [r5, #260]
   17a7e:	f885 6108 	strb.w	r6, [r5, #264]
   17a82:	bd70      	pop	{r4, r5, r6, pc}
   17a84:	2400      	movs	r4, #0
   17a86:	f880 4103 	strb.w	r4, [r0, #259]
   17a8a:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17a8e:	3004      	adds	r0, #4
   17a90:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17a94:	4798      	blx	r3
   17a96:	f8c5 4104 	str.w	r4, [r5, #260]
   17a9a:	4621      	mov	r1, r4
   17a9c:	e7e9      	b.n	17a72 <d_append_char+0xe>
   17a9e:	46c0      	nop			(mov r8, r8)

00017aa0 <d_source_name>:
   17aa0:	b570      	push	{r4, r5, r6, lr}
   17aa2:	4604      	mov	r4, r0
   17aa4:	f7ff fe4c 	bl	17740 <d_number>
   17aa8:	2800      	cmp	r0, #0
   17aaa:	4605      	mov	r5, r0
   17aac:	dd30      	ble.n	17b10 <d_source_name+0x70>
   17aae:	68e6      	ldr	r6, [r4, #12]
   17ab0:	6863      	ldr	r3, [r4, #4]
   17ab2:	1b9b      	subs	r3, r3, r6
   17ab4:	4298      	cmp	r0, r3
   17ab6:	dd02      	ble.n	17abe <d_source_name+0x1e>
   17ab8:	2000      	movs	r0, #0
   17aba:	62e0      	str	r0, [r4, #44]
   17abc:	bd70      	pop	{r4, r5, r6, pc}
   17abe:	68a3      	ldr	r3, [r4, #8]
   17ac0:	eb06 0200 	add.w	r2, r6, r0
   17ac4:	f013 0f04 	tst.w	r3, #4	; 0x4
   17ac8:	60e2      	str	r2, [r4, #12]
   17aca:	d004      	beq.n	17ad6 <d_source_name+0x36>
   17acc:	5c33      	ldrb	r3, [r6, r0]
   17ace:	2b24      	cmp	r3, #36
   17ad0:	d101      	bne.n	17ad6 <d_source_name+0x36>
   17ad2:	1c53      	adds	r3, r2, #1
   17ad4:	60e3      	str	r3, [r4, #12]
   17ad6:	2d09      	cmp	r5, #9
   17ad8:	dc1c      	bgt.n	17b14 <d_source_name+0x74>
   17ada:	6961      	ldr	r1, [r4, #20]
   17adc:	69a3      	ldr	r3, [r4, #24]
   17ade:	4299      	cmp	r1, r3
   17ae0:	daea      	bge.n	17ab8 <d_source_name+0x18>
   17ae2:	008a      	lsls	r2, r1, #2
   17ae4:	010b      	lsls	r3, r1, #4
   17ae6:	ebc2 0c03 	rsb	ip, r2, r3
   17aea:	6922      	ldr	r2, [r4, #16]
   17aec:	1c4b      	adds	r3, r1, #1
   17aee:	eb12 000c 	adds.w	r0, r2, ip
   17af2:	6163      	str	r3, [r4, #20]
   17af4:	bf14      	ite	ne
   17af6:	2300      	movne	r3, #0
   17af8:	2301      	moveq	r3, #1
   17afa:	2e00      	cmp	r6, #0
   17afc:	bf08      	it	eq
   17afe:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17b02:	2b00      	cmp	r3, #0
   17b04:	d1d8      	bne.n	17ab8 <d_source_name+0x18>
   17b06:	f802 300c 	strb.w	r3, [r2, ip]
   17b0a:	6046      	str	r6, [r0, #4]
   17b0c:	6085      	str	r5, [r0, #8]
   17b0e:	e7d4      	b.n	17aba <d_source_name+0x1a>
   17b10:	2000      	movs	r0, #0
   17b12:	e7d3      	b.n	17abc <d_source_name+0x1c>
   17b14:	4630      	mov	r0, r6
   17b16:	4919      	ldr	r1, [pc, #100]	(17b7c <d_source_name+0xdc>)
   17b18:	2208      	movs	r2, #8
   17b1a:	f008 ff15 	bl	20948 <memcmp>
   17b1e:	2800      	cmp	r0, #0
   17b20:	d1db      	bne.n	17ada <d_source_name+0x3a>
   17b22:	7a32      	ldrb	r2, [r6, #8]
   17b24:	f106 0108 	add.w	r1, r6, #8	; 0x8
   17b28:	2a5f      	cmp	r2, #95
   17b2a:	bf14      	ite	ne
   17b2c:	2300      	movne	r3, #0
   17b2e:	2301      	moveq	r3, #1
   17b30:	2a2e      	cmp	r2, #46
   17b32:	bf08      	it	eq
   17b34:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17b38:	b1e3      	cbz	r3, 17b74 <d_source_name+0xd4>
   17b3a:	784b      	ldrb	r3, [r1, #1]
   17b3c:	2b4e      	cmp	r3, #78
   17b3e:	d1cc      	bne.n	17ada <d_source_name+0x3a>
   17b40:	6b23      	ldr	r3, [r4, #48]
   17b42:	6961      	ldr	r1, [r4, #20]
   17b44:	3316      	adds	r3, #22
   17b46:	1b5b      	subs	r3, r3, r5
   17b48:	6323      	str	r3, [r4, #48]
   17b4a:	69a3      	ldr	r3, [r4, #24]
   17b4c:	4299      	cmp	r1, r3
   17b4e:	dab3      	bge.n	17ab8 <d_source_name+0x18>
   17b50:	008b      	lsls	r3, r1, #2
   17b52:	010a      	lsls	r2, r1, #4
   17b54:	f8d4 c010 	ldr.w	ip, [r4, #16]
   17b58:	1ad2      	subs	r2, r2, r3
   17b5a:	1c4b      	adds	r3, r1, #1
   17b5c:	eb1c 0002 	adds.w	r0, ip, r2
   17b60:	6163      	str	r3, [r4, #20]
   17b62:	d0aa      	beq.n	17aba <d_source_name+0x1a>
   17b64:	2300      	movs	r3, #0
   17b66:	f80c 3002 	strb.w	r3, [ip, r2]
   17b6a:	4a05      	ldr	r2, [pc, #20]	(17b80 <d_source_name+0xe0>)
   17b6c:	3315      	adds	r3, #21
   17b6e:	6042      	str	r2, [r0, #4]
   17b70:	6083      	str	r3, [r0, #8]
   17b72:	e7a2      	b.n	17aba <d_source_name+0x1a>
   17b74:	2a24      	cmp	r2, #36
   17b76:	d1b0      	bne.n	17ada <d_source_name+0x3a>
   17b78:	e7df      	b.n	17b3a <d_source_name+0x9a>
   17b7a:	46c0      	nop			(mov r8, r8)
   17b7c:	00022db8 	.word	0x00022db8
   17b80:	00022dc4 	.word	0x00022dc4

00017b84 <d_type>:
   17b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b86:	4605      	mov	r5, r0
   17b88:	68c0      	ldr	r0, [r0, #12]
   17b8a:	b083      	sub	sp, #12
   17b8c:	7801      	ldrb	r1, [r0, #0]
   17b8e:	2956      	cmp	r1, #86
   17b90:	bf14      	ite	ne
   17b92:	2300      	movne	r3, #0
   17b94:	2301      	moveq	r3, #1
   17b96:	2972      	cmp	r1, #114
   17b98:	bf08      	it	eq
   17b9a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17b9e:	b90b      	cbnz	r3, 17ba4 <d_type+0x20>
   17ba0:	294b      	cmp	r1, #75
   17ba2:	d11d      	bne.n	17be0 <d_type+0x5c>
   17ba4:	4628      	mov	r0, r5
   17ba6:	a901      	add	r1, sp, #4
   17ba8:	2200      	movs	r2, #0
   17baa:	f7ff fe17 	bl	177dc <d_cv_qualifiers>
   17bae:	4604      	mov	r4, r0
   17bb0:	b910      	cbnz	r0, 17bb8 <d_type+0x34>
   17bb2:	2000      	movs	r0, #0
   17bb4:	b003      	add	sp, #12
   17bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17bb8:	4628      	mov	r0, r5
   17bba:	f7ff ffe3 	bl	17b84 <d_type>
   17bbe:	6020      	str	r0, [r4, #0]
   17bc0:	2800      	cmp	r0, #0
   17bc2:	d0f6      	beq.n	17bb2 <d_type+0x2e>
   17bc4:	9901      	ldr	r1, [sp, #4]
   17bc6:	2900      	cmp	r1, #0
   17bc8:	d0f3      	beq.n	17bb2 <d_type+0x2e>
   17bca:	6a2a      	ldr	r2, [r5, #32]
   17bcc:	6a6b      	ldr	r3, [r5, #36]
   17bce:	429a      	cmp	r2, r3
   17bd0:	daef      	bge.n	17bb2 <d_type+0x2e>
   17bd2:	69eb      	ldr	r3, [r5, #28]
   17bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   17bd8:	3201      	adds	r2, #1
   17bda:	622a      	str	r2, [r5, #32]
   17bdc:	9801      	ldr	r0, [sp, #4]
   17bde:	e7e9      	b.n	17bb4 <d_type+0x30>
   17be0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   17be4:	2b4a      	cmp	r3, #74
   17be6:	d8e4      	bhi.n	17bb2 <d_type+0x2e>
   17be8:	a201      	add	r2, pc, #4	(adr r2, 17bf0 <d_type+0x6c>)
   17bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17bee:	46c0      	nop			(mov r8, r8)
   17bf0:	00017f8f 	.word	0x00017f8f
   17bf4:	00017f8f 	.word	0x00017f8f
   17bf8:	00017f8f 	.word	0x00017f8f
   17bfc:	00017f8f 	.word	0x00017f8f
   17c00:	00017f8f 	.word	0x00017f8f
   17c04:	00017f8f 	.word	0x00017f8f
   17c08:	00017f8f 	.word	0x00017f8f
   17c0c:	00017f8f 	.word	0x00017f8f
   17c10:	00017f8f 	.word	0x00017f8f
   17c14:	00017f8f 	.word	0x00017f8f
   17c18:	00017bb3 	.word	0x00017bb3
   17c1c:	00017bb3 	.word	0x00017bb3
   17c20:	00017bb3 	.word	0x00017bb3
   17c24:	00017bb3 	.word	0x00017bb3
   17c28:	00017bb3 	.word	0x00017bb3
   17c2c:	00017bb3 	.word	0x00017bb3
   17c30:	00017bb3 	.word	0x00017bb3
   17c34:	00017f1d 	.word	0x00017f1d
   17c38:	00017bb3 	.word	0x00017bb3
   17c3c:	00017f03 	.word	0x00017f03
   17c40:	00017bb3 	.word	0x00017bb3
   17c44:	00017bb3 	.word	0x00017bb3
   17c48:	00017edf 	.word	0x00017edf
   17c4c:	00017ec5 	.word	0x00017ec5
   17c50:	00017bb3 	.word	0x00017bb3
   17c54:	00017bb3 	.word	0x00017bb3
   17c58:	00017bb3 	.word	0x00017bb3
   17c5c:	00017bb3 	.word	0x00017bb3
   17c60:	00017bb3 	.word	0x00017bb3
   17c64:	00017ea1 	.word	0x00017ea1
   17c68:	00017f8f 	.word	0x00017f8f
   17c6c:	00017e87 	.word	0x00017e87
   17c70:	00017e6d 	.word	0x00017e6d
   17c74:	00017bb3 	.word	0x00017bb3
   17c78:	00017e53 	.word	0x00017e53
   17c7c:	00017e03 	.word	0x00017e03
   17c80:	00017dc1 	.word	0x00017dc1
   17c84:	00017d9f 	.word	0x00017d9f
   17c88:	00017bb3 	.word	0x00017bb3
   17c8c:	00017bb3 	.word	0x00017bb3
   17c90:	00017bb3 	.word	0x00017bb3
   17c94:	00017bb3 	.word	0x00017bb3
   17c98:	00017f8f 	.word	0x00017f8f
   17c9c:	00017bb3 	.word	0x00017bb3
   17ca0:	00017bb3 	.word	0x00017bb3
   17ca4:	00017bb3 	.word	0x00017bb3
   17ca8:	00017bb3 	.word	0x00017bb3
   17cac:	00017bb3 	.word	0x00017bb3
   17cb0:	00017bb3 	.word	0x00017bb3
   17cb4:	00017d55 	.word	0x00017d55
   17cb8:	00017d55 	.word	0x00017d55
   17cbc:	00017d55 	.word	0x00017d55
   17cc0:	00017d55 	.word	0x00017d55
   17cc4:	00017d55 	.word	0x00017d55
   17cc8:	00017d55 	.word	0x00017d55
   17ccc:	00017d55 	.word	0x00017d55
   17cd0:	00017d55 	.word	0x00017d55
   17cd4:	00017d55 	.word	0x00017d55
   17cd8:	00017d55 	.word	0x00017d55
   17cdc:	00017bb3 	.word	0x00017bb3
   17ce0:	00017d55 	.word	0x00017d55
   17ce4:	00017d55 	.word	0x00017d55
   17ce8:	00017d55 	.word	0x00017d55
   17cec:	00017d55 	.word	0x00017d55
   17cf0:	00017bb3 	.word	0x00017bb3
   17cf4:	00017bb3 	.word	0x00017bb3
   17cf8:	00017bb3 	.word	0x00017bb3
   17cfc:	00017d55 	.word	0x00017d55
   17d00:	00017d55 	.word	0x00017d55
   17d04:	00017d1d 	.word	0x00017d1d
   17d08:	00017d55 	.word	0x00017d55
   17d0c:	00017d55 	.word	0x00017d55
   17d10:	00017d55 	.word	0x00017d55
   17d14:	00017d55 	.word	0x00017d55
   17d18:	00017d55 	.word	0x00017d55
   17d1c:	1c43      	adds	r3, r0, #1
   17d1e:	60eb      	str	r3, [r5, #12]
   17d20:	4628      	mov	r0, r5
   17d22:	f7ff febd 	bl	17aa0 <d_source_name>
   17d26:	2123      	movs	r1, #35
   17d28:	4602      	mov	r2, r0
   17d2a:	2300      	movs	r3, #0
   17d2c:	4628      	mov	r0, r5
   17d2e:	f7ff fcb5 	bl	1769c <d_make_comp>
   17d32:	9001      	str	r0, [sp, #4]
   17d34:	9801      	ldr	r0, [sp, #4]
   17d36:	2800      	cmp	r0, #0
   17d38:	f43f af3b 	beq.w	17bb2 <d_type+0x2e>
   17d3c:	6a2a      	ldr	r2, [r5, #32]
   17d3e:	6a6b      	ldr	r3, [r5, #36]
   17d40:	429a      	cmp	r2, r3
   17d42:	f6bf af36 	bge.w	17bb2 <d_type+0x2e>
   17d46:	69eb      	ldr	r3, [r5, #28]
   17d48:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   17d4c:	3201      	adds	r2, #1
   17d4e:	622a      	str	r2, [r5, #32]
   17d50:	9801      	ldr	r0, [sp, #4]
   17d52:	e72f      	b.n	17bb4 <d_type+0x30>
   17d54:	008b      	lsls	r3, r1, #2
   17d56:	4aaf      	ldr	r2, [pc, #700]	(18014 <d_type+0x490>)
   17d58:	0109      	lsls	r1, r1, #4
   17d5a:	185b      	adds	r3, r3, r1
   17d5c:	189c      	adds	r4, r3, r2
   17d5e:	f000 811b 	beq.w	17f98 <d_type+0x414>
   17d62:	6969      	ldr	r1, [r5, #20]
   17d64:	69ab      	ldr	r3, [r5, #24]
   17d66:	4299      	cmp	r1, r3
   17d68:	f280 8116 	bge.w	17f98 <d_type+0x414>
   17d6c:	008b      	lsls	r3, r1, #2
   17d6e:	010a      	lsls	r2, r1, #4
   17d70:	f8d5 c010 	ldr.w	ip, [r5, #16]
   17d74:	1ad2      	subs	r2, r2, r3
   17d76:	1c4b      	adds	r3, r1, #1
   17d78:	eb1c 0102 	adds.w	r1, ip, r2
   17d7c:	616b      	str	r3, [r5, #20]
   17d7e:	d004      	beq.n	17d8a <d_type+0x206>
   17d80:	604c      	str	r4, [r1, #4]
   17d82:	2322      	movs	r3, #34
   17d84:	68e8      	ldr	r0, [r5, #12]
   17d86:	f80c 3002 	strb.w	r3, [ip, r2]
   17d8a:	9101      	str	r1, [sp, #4]
   17d8c:	6849      	ldr	r1, [r1, #4]
   17d8e:	6b2b      	ldr	r3, [r5, #48]
   17d90:	684a      	ldr	r2, [r1, #4]
   17d92:	189b      	adds	r3, r3, r2
   17d94:	1c42      	adds	r2, r0, #1
   17d96:	632b      	str	r3, [r5, #48]
   17d98:	60ea      	str	r2, [r5, #12]
   17d9a:	9801      	ldr	r0, [sp, #4]
   17d9c:	e70a      	b.n	17bb4 <d_type+0x30>
   17d9e:	1c43      	adds	r3, r0, #1
   17da0:	60eb      	str	r3, [r5, #12]
   17da2:	4628      	mov	r0, r5
   17da4:	f7ff fe7c 	bl	17aa0 <d_source_name>
   17da8:	9001      	str	r0, [sp, #4]
   17daa:	4628      	mov	r0, r5
   17dac:	f7ff feea 	bl	17b84 <d_type>
   17db0:	211c      	movs	r1, #28
   17db2:	4602      	mov	r2, r0
   17db4:	9b01      	ldr	r3, [sp, #4]
   17db6:	4628      	mov	r0, r5
   17db8:	f7ff fc70 	bl	1769c <d_make_comp>
   17dbc:	9001      	str	r0, [sp, #4]
   17dbe:	e7b9      	b.n	17d34 <d_type+0x1b0>
   17dc0:	4628      	mov	r0, r5
   17dc2:	f7ff fd51 	bl	17868 <d_template_param>
   17dc6:	68eb      	ldr	r3, [r5, #12]
   17dc8:	9001      	str	r0, [sp, #4]
   17dca:	781a      	ldrb	r2, [r3, #0]
   17dcc:	2a49      	cmp	r2, #73
   17dce:	d1b1      	bne.n	17d34 <d_type+0x1b0>
   17dd0:	2800      	cmp	r0, #0
   17dd2:	f43f aeee 	beq.w	17bb2 <d_type+0x2e>
   17dd6:	6a2a      	ldr	r2, [r5, #32]
   17dd8:	6a6b      	ldr	r3, [r5, #36]
   17dda:	429a      	cmp	r2, r3
   17ddc:	f6bf aee9 	bge.w	17bb2 <d_type+0x2e>
   17de0:	69eb      	ldr	r3, [r5, #28]
   17de2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   17de6:	3201      	adds	r2, #1
   17de8:	622a      	str	r2, [r5, #32]
   17dea:	4628      	mov	r0, r5
   17dec:	9c01      	ldr	r4, [sp, #4]
   17dee:	f000 fe45 	bl	18a7c <d_template_args>
   17df2:	2104      	movs	r1, #4
   17df4:	4603      	mov	r3, r0
   17df6:	4622      	mov	r2, r4
   17df8:	4628      	mov	r0, r5
   17dfa:	f7ff fc4f 	bl	1769c <d_make_comp>
   17dfe:	9001      	str	r0, [sp, #4]
   17e00:	e798      	b.n	17d34 <d_type+0x1b0>
   17e02:	7841      	ldrb	r1, [r0, #1]
   17e04:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   17e08:	b2d2      	uxtb	r2, r2
   17e0a:	295f      	cmp	r1, #95
   17e0c:	bf14      	ite	ne
   17e0e:	2300      	movne	r3, #0
   17e10:	2301      	moveq	r3, #1
   17e12:	2a09      	cmp	r2, #9
   17e14:	bf98      	it	ls
   17e16:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   17e1a:	b92b      	cbnz	r3, 17e28 <d_type+0x2a4>
   17e1c:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   17e20:	b2db      	uxtb	r3, r3
   17e22:	2b19      	cmp	r3, #25
   17e24:	f200 80cf 	bhi.w	17fc6 <d_type+0x442>
   17e28:	2100      	movs	r1, #0
   17e2a:	4628      	mov	r0, r5
   17e2c:	f7ff fd50 	bl	178d0 <d_substitution>
   17e30:	68eb      	ldr	r3, [r5, #12]
   17e32:	9001      	str	r0, [sp, #4]
   17e34:	781a      	ldrb	r2, [r3, #0]
   17e36:	4604      	mov	r4, r0
   17e38:	2a49      	cmp	r2, #73
   17e3a:	d189      	bne.n	17d50 <d_type+0x1cc>
   17e3c:	4628      	mov	r0, r5
   17e3e:	f000 fe1d 	bl	18a7c <d_template_args>
   17e42:	2104      	movs	r1, #4
   17e44:	4603      	mov	r3, r0
   17e46:	4622      	mov	r2, r4
   17e48:	4628      	mov	r0, r5
   17e4a:	f7ff fc27 	bl	1769c <d_make_comp>
   17e4e:	9001      	str	r0, [sp, #4]
   17e50:	e770      	b.n	17d34 <d_type+0x1b0>
   17e52:	1c43      	adds	r3, r0, #1
   17e54:	60eb      	str	r3, [r5, #12]
   17e56:	4628      	mov	r0, r5
   17e58:	f7ff fe94 	bl	17b84 <d_type>
   17e5c:	211e      	movs	r1, #30
   17e5e:	4602      	mov	r2, r0
   17e60:	2300      	movs	r3, #0
   17e62:	4628      	mov	r0, r5
   17e64:	f7ff fc1a 	bl	1769c <d_make_comp>
   17e68:	9001      	str	r0, [sp, #4]
   17e6a:	e763      	b.n	17d34 <d_type+0x1b0>
   17e6c:	1c43      	adds	r3, r0, #1
   17e6e:	60eb      	str	r3, [r5, #12]
   17e70:	4628      	mov	r0, r5
   17e72:	f7ff fe87 	bl	17b84 <d_type>
   17e76:	211d      	movs	r1, #29
   17e78:	4602      	mov	r2, r0
   17e7a:	2300      	movs	r3, #0
   17e7c:	4628      	mov	r0, r5
   17e7e:	f7ff fc0d 	bl	1769c <d_make_comp>
   17e82:	9001      	str	r0, [sp, #4]
   17e84:	e756      	b.n	17d34 <d_type+0x1b0>
   17e86:	1c43      	adds	r3, r0, #1
   17e88:	60eb      	str	r3, [r5, #12]
   17e8a:	4628      	mov	r0, r5
   17e8c:	f7ff fe7a 	bl	17b84 <d_type>
   17e90:	211f      	movs	r1, #31
   17e92:	4602      	mov	r2, r0
   17e94:	2300      	movs	r3, #0
   17e96:	4628      	mov	r0, r5
   17e98:	f7ff fc00 	bl	1769c <d_make_comp>
   17e9c:	9001      	str	r0, [sp, #4]
   17e9e:	e749      	b.n	17d34 <d_type+0x1b0>
   17ea0:	1c43      	adds	r3, r0, #1
   17ea2:	60eb      	str	r3, [r5, #12]
   17ea4:	4628      	mov	r0, r5
   17ea6:	f7ff fe6d 	bl	17b84 <d_type>
   17eaa:	4669      	mov	r1, sp
   17eac:	4607      	mov	r7, r0
   17eae:	2201      	movs	r2, #1
   17eb0:	4628      	mov	r0, r5
   17eb2:	f7ff fc93 	bl	177dc <d_cv_qualifiers>
   17eb6:	466e      	mov	r6, sp
   17eb8:	4604      	mov	r4, r0
   17eba:	2800      	cmp	r0, #0
   17ebc:	d16e      	bne.n	17f9c <d_type+0x418>
   17ebe:	2000      	movs	r0, #0
   17ec0:	9001      	str	r0, [sp, #4]
   17ec2:	e737      	b.n	17d34 <d_type+0x1b0>
   17ec4:	1c43      	adds	r3, r0, #1
   17ec6:	60eb      	str	r3, [r5, #12]
   17ec8:	4628      	mov	r0, r5
   17eca:	f7ff fe5b 	bl	17b84 <d_type>
   17ece:	2121      	movs	r1, #33
   17ed0:	4602      	mov	r2, r0
   17ed2:	2300      	movs	r3, #0
   17ed4:	4628      	mov	r0, r5
   17ed6:	f7ff fbe1 	bl	1769c <d_make_comp>
   17eda:	9001      	str	r0, [sp, #4]
   17edc:	e72a      	b.n	17d34 <d_type+0x1b0>
   17ede:	1c42      	adds	r2, r0, #1
   17ee0:	60ea      	str	r2, [r5, #12]
   17ee2:	7843      	ldrb	r3, [r0, #1]
   17ee4:	2b59      	cmp	r3, #89
   17ee6:	f000 8083 	beq.w	17ff0 <d_type+0x46c>
   17eea:	2101      	movs	r1, #1
   17eec:	4628      	mov	r0, r5
   17eee:	f000 f9b7 	bl	18260 <d_bare_function_type>
   17ef2:	68ea      	ldr	r2, [r5, #12]
   17ef4:	7813      	ldrb	r3, [r2, #0]
   17ef6:	2b45      	cmp	r3, #69
   17ef8:	d1e1      	bne.n	17ebe <d_type+0x33a>
   17efa:	1c53      	adds	r3, r2, #1
   17efc:	60eb      	str	r3, [r5, #12]
   17efe:	9001      	str	r0, [sp, #4]
   17f00:	e718      	b.n	17d34 <d_type+0x1b0>
   17f02:	1c43      	adds	r3, r0, #1
   17f04:	60eb      	str	r3, [r5, #12]
   17f06:	4628      	mov	r0, r5
   17f08:	f7ff fe3c 	bl	17b84 <d_type>
   17f0c:	2120      	movs	r1, #32
   17f0e:	4602      	mov	r2, r0
   17f10:	2300      	movs	r3, #0
   17f12:	4628      	mov	r0, r5
   17f14:	f7ff fbc2 	bl	1769c <d_make_comp>
   17f18:	9001      	str	r0, [sp, #4]
   17f1a:	e70b      	b.n	17d34 <d_type+0x1b0>
   17f1c:	1c41      	adds	r1, r0, #1
   17f1e:	60e9      	str	r1, [r5, #12]
   17f20:	7842      	ldrb	r2, [r0, #1]
   17f22:	2a5f      	cmp	r2, #95
   17f24:	d04d      	beq.n	17fc2 <d_type+0x43e>
   17f26:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   17f2a:	b2db      	uxtb	r3, r3
   17f2c:	2b09      	cmp	r3, #9
   17f2e:	d857      	bhi.n	17fe0 <d_type+0x45c>
   17f30:	4608      	mov	r0, r1
   17f32:	3001      	adds	r0, #1
   17f34:	60e8      	str	r0, [r5, #12]
   17f36:	7803      	ldrb	r3, [r0, #0]
   17f38:	3b30      	subs	r3, #48
   17f3a:	b2db      	uxtb	r3, r3
   17f3c:	2b09      	cmp	r3, #9
   17f3e:	d9f8      	bls.n	17f32 <d_type+0x3ae>
   17f40:	f8d5 c014 	ldr.w	ip, [r5, #20]
   17f44:	69ab      	ldr	r3, [r5, #24]
   17f46:	459c      	cmp	ip, r3
   17f48:	dab9      	bge.n	17ebe <d_type+0x33a>
   17f4a:	ea4f 038c 	mov.w	r3, ip, lsl #2
   17f4e:	ea4f 120c 	mov.w	r2, ip, lsl #4
   17f52:	692c      	ldr	r4, [r5, #16]
   17f54:	1ad2      	subs	r2, r2, r3
   17f56:	18a6      	adds	r6, r4, r2
   17f58:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   17f5c:	616b      	str	r3, [r5, #20]
   17f5e:	d0ae      	beq.n	17ebe <d_type+0x33a>
   17f60:	1a40      	subs	r0, r0, r1
   17f62:	d0ac      	beq.n	17ebe <d_type+0x33a>
   17f64:	2300      	movs	r3, #0
   17f66:	54a3      	strb	r3, [r4, r2]
   17f68:	6071      	str	r1, [r6, #4]
   17f6a:	60b0      	str	r0, [r6, #8]
   17f6c:	68e9      	ldr	r1, [r5, #12]
   17f6e:	780b      	ldrb	r3, [r1, #0]
   17f70:	2b5f      	cmp	r3, #95
   17f72:	d1a4      	bne.n	17ebe <d_type+0x33a>
   17f74:	1c4b      	adds	r3, r1, #1
   17f76:	60eb      	str	r3, [r5, #12]
   17f78:	4628      	mov	r0, r5
   17f7a:	f7ff fe03 	bl	17b84 <d_type>
   17f7e:	2125      	movs	r1, #37
   17f80:	4603      	mov	r3, r0
   17f82:	4632      	mov	r2, r6
   17f84:	4628      	mov	r0, r5
   17f86:	f7ff fb89 	bl	1769c <d_make_comp>
   17f8a:	9001      	str	r0, [sp, #4]
   17f8c:	e6d2      	b.n	17d34 <d_type+0x1b0>
   17f8e:	4628      	mov	r0, r5
   17f90:	f000 fdb6 	bl	18b00 <d_name>
   17f94:	9001      	str	r0, [sp, #4]
   17f96:	e6cd      	b.n	17d34 <d_type+0x1b0>
   17f98:	2100      	movs	r1, #0
   17f9a:	e6f6      	b.n	17d8a <d_type+0x206>
   17f9c:	4628      	mov	r0, r5
   17f9e:	f7ff fdf1 	bl	17b84 <d_type>
   17fa2:	6020      	str	r0, [r4, #0]
   17fa4:	2800      	cmp	r0, #0
   17fa6:	d08a      	beq.n	17ebe <d_type+0x33a>
   17fa8:	456c      	cmp	r4, sp
   17faa:	d002      	beq.n	17fb2 <d_type+0x42e>
   17fac:	7803      	ldrb	r3, [r0, #0]
   17fae:	2b24      	cmp	r3, #36
   17fb0:	d121      	bne.n	17ff6 <d_type+0x472>
   17fb2:	4628      	mov	r0, r5
   17fb4:	2126      	movs	r1, #38
   17fb6:	463a      	mov	r2, r7
   17fb8:	9b00      	ldr	r3, [sp, #0]
   17fba:	f7ff fb6f 	bl	1769c <d_make_comp>
   17fbe:	9001      	str	r0, [sp, #4]
   17fc0:	e6b8      	b.n	17d34 <d_type+0x1b0>
   17fc2:	2600      	movs	r6, #0
   17fc4:	e7d6      	b.n	17f74 <d_type+0x3f0>
   17fc6:	4628      	mov	r0, r5
   17fc8:	f000 fd9a 	bl	18b00 <d_name>
   17fcc:	2800      	cmp	r0, #0
   17fce:	f43f adf0 	beq.w	17bb2 <d_type+0x2e>
   17fd2:	7803      	ldrb	r3, [r0, #0]
   17fd4:	9001      	str	r0, [sp, #4]
   17fd6:	2b15      	cmp	r3, #21
   17fd8:	f47f aeb0 	bne.w	17d3c <d_type+0x1b8>
   17fdc:	9801      	ldr	r0, [sp, #4]
   17fde:	e5e9      	b.n	17bb4 <d_type+0x30>
   17fe0:	4628      	mov	r0, r5
   17fe2:	f000 fca9 	bl	18938 <d_expression>
   17fe6:	4606      	mov	r6, r0
   17fe8:	2800      	cmp	r0, #0
   17fea:	d1bf      	bne.n	17f6c <d_type+0x3e8>
   17fec:	2000      	movs	r0, #0
   17fee:	e767      	b.n	17ec0 <d_type+0x33c>
   17ff0:	1c53      	adds	r3, r2, #1
   17ff2:	60eb      	str	r3, [r5, #12]
   17ff4:	e779      	b.n	17eea <d_type+0x366>
   17ff6:	9900      	ldr	r1, [sp, #0]
   17ff8:	2900      	cmp	r1, #0
   17ffa:	f43f af60 	beq.w	17ebe <d_type+0x33a>
   17ffe:	6a2a      	ldr	r2, [r5, #32]
   18000:	6a6b      	ldr	r3, [r5, #36]
   18002:	429a      	cmp	r2, r3
   18004:	f6bf af5b 	bge.w	17ebe <d_type+0x33a>
   18008:	69eb      	ldr	r3, [r5, #28]
   1800a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   1800e:	3201      	adds	r2, #1
   18010:	622a      	str	r2, [r5, #32]
   18012:	e7ce      	b.n	17fb2 <d_type+0x42e>
   18014:	000218f0 	.word	0x000218f0

00018018 <d_operator_name>:
   18018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1801c:	68c2      	ldr	r2, [r0, #12]
   1801e:	4606      	mov	r6, r0
   18020:	7814      	ldrb	r4, [r2, #0]
   18022:	2c00      	cmp	r4, #0
   18024:	d02a      	beq.n	1807c <d_operator_name+0x64>
   18026:	1c53      	adds	r3, r2, #1
   18028:	60c3      	str	r3, [r0, #12]
   1802a:	7855      	ldrb	r5, [r2, #1]
   1802c:	b10d      	cbz	r5, 18032 <d_operator_name+0x1a>
   1802e:	3301      	adds	r3, #1
   18030:	60c3      	str	r3, [r0, #12]
   18032:	2c76      	cmp	r4, #118
   18034:	d143      	bne.n	180be <d_operator_name+0xa6>
   18036:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
   1803a:	b2fb      	uxtb	r3, r7
   1803c:	2b09      	cmp	r3, #9
   1803e:	d81e      	bhi.n	1807e <d_operator_name+0x66>
   18040:	4630      	mov	r0, r6
   18042:	f7ff fd2d 	bl	17aa0 <d_source_name>
   18046:	6971      	ldr	r1, [r6, #20]
   18048:	69b3      	ldr	r3, [r6, #24]
   1804a:	4604      	mov	r4, r0
   1804c:	4299      	cmp	r1, r3
   1804e:	da2f      	bge.n	180b0 <d_operator_name+0x98>
   18050:	008a      	lsls	r2, r1, #2
   18052:	010b      	lsls	r3, r1, #4
   18054:	ebc2 0c03 	rsb	ip, r2, r3
   18058:	6932      	ldr	r2, [r6, #16]
   1805a:	1c4b      	adds	r3, r1, #1
   1805c:	eb12 000c 	adds.w	r0, r2, ip
   18060:	6173      	str	r3, [r6, #20]
   18062:	bf14      	ite	ne
   18064:	2300      	movne	r3, #0
   18066:	2301      	moveq	r3, #1
   18068:	ea53 73d7 	orrs.w	r3, r3, r7, lsr #31
   1806c:	d120      	bne.n	180b0 <d_operator_name+0x98>
   1806e:	b1fc      	cbz	r4, 180b0 <d_operator_name+0x98>
   18070:	232a      	movs	r3, #42
   18072:	f802 300c 	strb.w	r3, [r2, ip]
   18076:	6047      	str	r7, [r0, #4]
   18078:	6084      	str	r4, [r0, #8]
   1807a:	e01a      	b.n	180b2 <d_operator_name+0x9a>
   1807c:	4625      	mov	r5, r4
   1807e:	4f24      	ldr	r7, [pc, #144]	(18110 <d_operator_name+0xf8>)
   18080:	2000      	movs	r0, #0
   18082:	f04f 0c31 	mov.w	ip, #49	; 0x31
   18086:	ebc0 030c 	rsb	r3, r0, ip
   1808a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1808e:	eb00 0163 	add.w	r1, r0, r3, asr #1
   18092:	010a      	lsls	r2, r1, #4
   18094:	58bb      	ldr	r3, [r7, r2]
   18096:	eb07 0802 	add.w	r8, r7, r2
   1809a:	781a      	ldrb	r2, [r3, #0]
   1809c:	4294      	cmp	r4, r2
   1809e:	d10a      	bne.n	180b6 <d_operator_name+0x9e>
   180a0:	785b      	ldrb	r3, [r3, #1]
   180a2:	429d      	cmp	r5, r3
   180a4:	d020      	beq.n	180e8 <d_operator_name+0xd0>
   180a6:	42ab      	cmp	r3, r5
   180a8:	d907      	bls.n	180ba <d_operator_name+0xa2>
   180aa:	468c      	mov	ip, r1
   180ac:	4560      	cmp	r0, ip
   180ae:	d1ea      	bne.n	18086 <d_operator_name+0x6e>
   180b0:	2000      	movs	r0, #0
   180b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180b6:	42a2      	cmp	r2, r4
   180b8:	d8f7      	bhi.n	180aa <d_operator_name+0x92>
   180ba:	1c48      	adds	r0, r1, #1
   180bc:	e7f6      	b.n	180ac <d_operator_name+0x94>
   180be:	2c63      	cmp	r4, #99
   180c0:	bf14      	ite	ne
   180c2:	2300      	movne	r3, #0
   180c4:	2301      	moveq	r3, #1
   180c6:	2d76      	cmp	r5, #118
   180c8:	bf14      	ite	ne
   180ca:	2300      	movne	r3, #0
   180cc:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   180d0:	2b00      	cmp	r3, #0
   180d2:	d0d4      	beq.n	1807e <d_operator_name+0x66>
   180d4:	4630      	mov	r0, r6
   180d6:	f7ff fd55 	bl	17b84 <d_type>
   180da:	212b      	movs	r1, #43
   180dc:	4602      	mov	r2, r0
   180de:	2300      	movs	r3, #0
   180e0:	4630      	mov	r0, r6
   180e2:	f7ff fadb 	bl	1769c <d_make_comp>
   180e6:	e7e4      	b.n	180b2 <d_operator_name+0x9a>
   180e8:	6971      	ldr	r1, [r6, #20]
   180ea:	69b3      	ldr	r3, [r6, #24]
   180ec:	4299      	cmp	r1, r3
   180ee:	dadf      	bge.n	180b0 <d_operator_name+0x98>
   180f0:	008b      	lsls	r3, r1, #2
   180f2:	010a      	lsls	r2, r1, #4
   180f4:	f8d6 c010 	ldr.w	ip, [r6, #16]
   180f8:	1ad2      	subs	r2, r2, r3
   180fa:	1c4b      	adds	r3, r1, #1
   180fc:	eb1c 0002 	adds.w	r0, ip, r2
   18100:	6173      	str	r3, [r6, #20]
   18102:	d0d6      	beq.n	180b2 <d_operator_name+0x9a>
   18104:	2329      	movs	r3, #41
   18106:	f80c 3002 	strb.w	r3, [ip, r2]
   1810a:	f8c0 8004 	str.w	r8, [r0, #4]
   1810e:	e7d0      	b.n	180b2 <d_operator_name+0x9a>
   18110:	0002228c 	.word	0x0002228c

00018114 <d_unqualified_name>:
   18114:	b570      	push	{r4, r5, r6, lr}
   18116:	68c1      	ldr	r1, [r0, #12]
   18118:	4604      	mov	r4, r0
   1811a:	780a      	ldrb	r2, [r1, #0]
   1811c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   18120:	b2db      	uxtb	r3, r3
   18122:	2b09      	cmp	r3, #9
   18124:	d927      	bls.n	18176 <d_unqualified_name+0x62>
   18126:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   1812a:	b2db      	uxtb	r3, r3
   1812c:	2b19      	cmp	r3, #25
   1812e:	d914      	bls.n	1815a <d_unqualified_name+0x46>
   18130:	f1a2 0343 	sub.w	r3, r2, #67	; 0x43
   18134:	b2db      	uxtb	r3, r3
   18136:	2b01      	cmp	r3, #1
   18138:	d870      	bhi.n	1821c <d_unqualified_name+0x108>
   1813a:	6ac5      	ldr	r5, [r0, #44]
   1813c:	b13d      	cbz	r5, 1814e <d_unqualified_name+0x3a>
   1813e:	782b      	ldrb	r3, [r5, #0]
   18140:	2b00      	cmp	r3, #0
   18142:	d11b      	bne.n	1817c <d_unqualified_name+0x68>
   18144:	68aa      	ldr	r2, [r5, #8]
   18146:	6b23      	ldr	r3, [r4, #48]
   18148:	189b      	adds	r3, r3, r2
   1814a:	6323      	str	r3, [r4, #48]
   1814c:	780a      	ldrb	r2, [r1, #0]
   1814e:	2a43      	cmp	r2, #67
   18150:	d018      	beq.n	18184 <d_unqualified_name+0x70>
   18152:	2a44      	cmp	r2, #68
   18154:	d03c      	beq.n	181d0 <d_unqualified_name+0xbc>
   18156:	2000      	movs	r0, #0
   18158:	bd70      	pop	{r4, r5, r6, pc}
   1815a:	f7ff ff5d 	bl	18018 <d_operator_name>
   1815e:	2800      	cmp	r0, #0
   18160:	d0fa      	beq.n	18158 <d_unqualified_name+0x44>
   18162:	7803      	ldrb	r3, [r0, #0]
   18164:	2b29      	cmp	r3, #41
   18166:	d1f7      	bne.n	18158 <d_unqualified_name+0x44>
   18168:	6843      	ldr	r3, [r0, #4]
   1816a:	6b22      	ldr	r2, [r4, #48]
   1816c:	6899      	ldr	r1, [r3, #8]
   1816e:	1852      	adds	r2, r2, r1
   18170:	3207      	adds	r2, #7
   18172:	6322      	str	r2, [r4, #48]
   18174:	e7f0      	b.n	18158 <d_unqualified_name+0x44>
   18176:	f7ff fc93 	bl	17aa0 <d_source_name>
   1817a:	e7ed      	b.n	18158 <d_unqualified_name+0x44>
   1817c:	2b15      	cmp	r3, #21
   1817e:	d0e1      	beq.n	18144 <d_unqualified_name+0x30>
   18180:	2a43      	cmp	r2, #67
   18182:	d1e6      	bne.n	18152 <d_unqualified_name+0x3e>
   18184:	784b      	ldrb	r3, [r1, #1]
   18186:	2b32      	cmp	r3, #50
   18188:	d05d      	beq.n	18246 <d_unqualified_name+0x132>
   1818a:	2b33      	cmp	r3, #51
   1818c:	d059      	beq.n	18242 <d_unqualified_name+0x12e>
   1818e:	2b31      	cmp	r3, #49
   18190:	d1e1      	bne.n	18156 <d_unqualified_name+0x42>
   18192:	2601      	movs	r6, #1
   18194:	1c8b      	adds	r3, r1, #2
   18196:	60e3      	str	r3, [r4, #12]
   18198:	6961      	ldr	r1, [r4, #20]
   1819a:	69a3      	ldr	r3, [r4, #24]
   1819c:	4299      	cmp	r1, r3
   1819e:	dada      	bge.n	18156 <d_unqualified_name+0x42>
   181a0:	008a      	lsls	r2, r1, #2
   181a2:	010b      	lsls	r3, r1, #4
   181a4:	ebc2 0c03 	rsb	ip, r2, r3
   181a8:	6922      	ldr	r2, [r4, #16]
   181aa:	1c4b      	adds	r3, r1, #1
   181ac:	eb12 000c 	adds.w	r0, r2, ip
   181b0:	6163      	str	r3, [r4, #20]
   181b2:	bf14      	ite	ne
   181b4:	2300      	movne	r3, #0
   181b6:	2301      	moveq	r3, #1
   181b8:	2d00      	cmp	r5, #0
   181ba:	bf08      	it	eq
   181bc:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   181c0:	2b00      	cmp	r3, #0
   181c2:	d1c8      	bne.n	18156 <d_unqualified_name+0x42>
   181c4:	3306      	adds	r3, #6
   181c6:	f802 300c 	strb.w	r3, [r2, ip]
   181ca:	7106      	strb	r6, [r0, #4]
   181cc:	6085      	str	r5, [r0, #8]
   181ce:	e7c3      	b.n	18158 <d_unqualified_name+0x44>
   181d0:	784b      	ldrb	r3, [r1, #1]
   181d2:	2b31      	cmp	r3, #49
   181d4:	d033      	beq.n	1823e <d_unqualified_name+0x12a>
   181d6:	2b32      	cmp	r3, #50
   181d8:	d02f      	beq.n	1823a <d_unqualified_name+0x126>
   181da:	2b30      	cmp	r3, #48
   181dc:	d1bb      	bne.n	18156 <d_unqualified_name+0x42>
   181de:	2601      	movs	r6, #1
   181e0:	1c8b      	adds	r3, r1, #2
   181e2:	60e3      	str	r3, [r4, #12]
   181e4:	6961      	ldr	r1, [r4, #20]
   181e6:	69a3      	ldr	r3, [r4, #24]
   181e8:	4299      	cmp	r1, r3
   181ea:	dab4      	bge.n	18156 <d_unqualified_name+0x42>
   181ec:	008a      	lsls	r2, r1, #2
   181ee:	010b      	lsls	r3, r1, #4
   181f0:	ebc2 0c03 	rsb	ip, r2, r3
   181f4:	6922      	ldr	r2, [r4, #16]
   181f6:	1c4b      	adds	r3, r1, #1
   181f8:	eb12 000c 	adds.w	r0, r2, ip
   181fc:	6163      	str	r3, [r4, #20]
   181fe:	bf14      	ite	ne
   18200:	2300      	movne	r3, #0
   18202:	2301      	moveq	r3, #1
   18204:	2d00      	cmp	r5, #0
   18206:	bf08      	it	eq
   18208:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1820c:	2b00      	cmp	r3, #0
   1820e:	d1a2      	bne.n	18156 <d_unqualified_name+0x42>
   18210:	3307      	adds	r3, #7
   18212:	f802 300c 	strb.w	r3, [r2, ip]
   18216:	7106      	strb	r6, [r0, #4]
   18218:	6085      	str	r5, [r0, #8]
   1821a:	e79d      	b.n	18158 <d_unqualified_name+0x44>
   1821c:	2a4c      	cmp	r2, #76
   1821e:	d19a      	bne.n	18156 <d_unqualified_name+0x42>
   18220:	1c4b      	adds	r3, r1, #1
   18222:	60c3      	str	r3, [r0, #12]
   18224:	f7ff fc3c 	bl	17aa0 <d_source_name>
   18228:	4605      	mov	r5, r0
   1822a:	2800      	cmp	r0, #0
   1822c:	d093      	beq.n	18156 <d_unqualified_name+0x42>
   1822e:	68e2      	ldr	r2, [r4, #12]
   18230:	7813      	ldrb	r3, [r2, #0]
   18232:	2b5f      	cmp	r3, #95
   18234:	d009      	beq.n	1824a <d_unqualified_name+0x136>
   18236:	4628      	mov	r0, r5
   18238:	e78e      	b.n	18158 <d_unqualified_name+0x44>
   1823a:	2603      	movs	r6, #3
   1823c:	e7d0      	b.n	181e0 <d_unqualified_name+0xcc>
   1823e:	2602      	movs	r6, #2
   18240:	e7ce      	b.n	181e0 <d_unqualified_name+0xcc>
   18242:	2603      	movs	r6, #3
   18244:	e7a6      	b.n	18194 <d_unqualified_name+0x80>
   18246:	2602      	movs	r6, #2
   18248:	e7a4      	b.n	18194 <d_unqualified_name+0x80>
   1824a:	1c53      	adds	r3, r2, #1
   1824c:	60e3      	str	r3, [r4, #12]
   1824e:	4620      	mov	r0, r4
   18250:	f7ff fa76 	bl	17740 <d_number>
   18254:	2800      	cmp	r0, #0
   18256:	f6ff af7e 	blt.w	18156 <d_unqualified_name+0x42>
   1825a:	4628      	mov	r0, r5
   1825c:	e77c      	b.n	18158 <d_unqualified_name+0x44>
   1825e:	46c0      	nop			(mov r8, r8)

00018260 <d_bare_function_type>:
   18260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18264:	460e      	mov	r6, r1
   18266:	68c1      	ldr	r1, [r0, #12]
   18268:	b082      	sub	sp, #8
   1826a:	780b      	ldrb	r3, [r1, #0]
   1826c:	4605      	mov	r5, r0
   1826e:	2b4a      	cmp	r3, #74
   18270:	d035      	beq.n	182de <d_bare_function_type+0x7e>
   18272:	2300      	movs	r3, #0
   18274:	af02      	add	r7, sp, #8
   18276:	f847 3d04 	str.w	r3, [r7, #-4]!
   1827a:	4698      	mov	r8, r3
   1827c:	e002      	b.n	18284 <d_bare_function_type+0x24>
   1827e:	68e9      	ldr	r1, [r5, #12]
   18280:	4626      	mov	r6, r4
   18282:	4680      	mov	r8, r0
   18284:	780a      	ldrb	r2, [r1, #0]
   18286:	2a45      	cmp	r2, #69
   18288:	bf14      	ite	ne
   1828a:	2300      	movne	r3, #0
   1828c:	2301      	moveq	r3, #1
   1828e:	2a00      	cmp	r2, #0
   18290:	bf14      	ite	ne
   18292:	461c      	movne	r4, r3
   18294:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   18298:	b9ac      	cbnz	r4, 182c6 <d_bare_function_type+0x66>
   1829a:	4628      	mov	r0, r5
   1829c:	f7ff fc72 	bl	17b84 <d_type>
   182a0:	4602      	mov	r2, r0
   182a2:	b160      	cbz	r0, 182be <d_bare_function_type+0x5e>
   182a4:	2e00      	cmp	r6, #0
   182a6:	d1ea      	bne.n	1827e <d_bare_function_type+0x1e>
   182a8:	4628      	mov	r0, r5
   182aa:	2127      	movs	r1, #39
   182ac:	4633      	mov	r3, r6
   182ae:	f7ff f9f5 	bl	1769c <d_make_comp>
   182b2:	6038      	str	r0, [r7, #0]
   182b4:	b118      	cbz	r0, 182be <d_bare_function_type+0x5e>
   182b6:	f100 0708 	add.w	r7, r0, #8	; 0x8
   182ba:	68e9      	ldr	r1, [r5, #12]
   182bc:	e7e2      	b.n	18284 <d_bare_function_type+0x24>
   182be:	2000      	movs	r0, #0
   182c0:	b002      	add	sp, #8
   182c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   182c6:	9c01      	ldr	r4, [sp, #4]
   182c8:	2c00      	cmp	r4, #0
   182ca:	d0f8      	beq.n	182be <d_bare_function_type+0x5e>
   182cc:	68a1      	ldr	r1, [r4, #8]
   182ce:	b159      	cbz	r1, 182e8 <d_bare_function_type+0x88>
   182d0:	4628      	mov	r0, r5
   182d2:	2124      	movs	r1, #36
   182d4:	4642      	mov	r2, r8
   182d6:	4623      	mov	r3, r4
   182d8:	f7ff f9e0 	bl	1769c <d_make_comp>
   182dc:	e7f0      	b.n	182c0 <d_bare_function_type+0x60>
   182de:	1c4b      	adds	r3, r1, #1
   182e0:	60c3      	str	r3, [r0, #12]
   182e2:	2601      	movs	r6, #1
   182e4:	4619      	mov	r1, r3
   182e6:	e7c4      	b.n	18272 <d_bare_function_type+0x12>
   182e8:	6862      	ldr	r2, [r4, #4]
   182ea:	7813      	ldrb	r3, [r2, #0]
   182ec:	2b22      	cmp	r3, #34
   182ee:	d1ef      	bne.n	182d0 <d_bare_function_type+0x70>
   182f0:	6852      	ldr	r2, [r2, #4]
   182f2:	7c13      	ldrb	r3, [r2, #16]
   182f4:	2b09      	cmp	r3, #9
   182f6:	d1eb      	bne.n	182d0 <d_bare_function_type+0x70>
   182f8:	6b2b      	ldr	r3, [r5, #48]
   182fa:	6852      	ldr	r2, [r2, #4]
   182fc:	9101      	str	r1, [sp, #4]
   182fe:	1a9b      	subs	r3, r3, r2
   18300:	632b      	str	r3, [r5, #48]
   18302:	460c      	mov	r4, r1
   18304:	e7e4      	b.n	182d0 <d_bare_function_type+0x70>
   18306:	46c0      	nop			(mov r8, r8)

00018308 <d_encoding>:
   18308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1830c:	460d      	mov	r5, r1
   1830e:	68c1      	ldr	r1, [r0, #12]
   18310:	4606      	mov	r6, r0
   18312:	780a      	ldrb	r2, [r1, #0]
   18314:	2a54      	cmp	r2, #84
   18316:	bf14      	ite	ne
   18318:	2300      	movne	r3, #0
   1831a:	2301      	moveq	r3, #1
   1831c:	2a47      	cmp	r2, #71
   1831e:	bf08      	it	eq
   18320:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   18324:	2b00      	cmp	r3, #0
   18326:	d14e      	bne.n	183c6 <d_encoding+0xbe>
   18328:	f000 fbea 	bl	18b00 <d_name>
   1832c:	1e2b      	subs	r3, r5, #0
   1832e:	bf18      	it	ne
   18330:	2301      	movne	r3, #1
   18332:	2800      	cmp	r0, #0
   18334:	bf0c      	ite	eq
   18336:	2300      	moveq	r3, #0
   18338:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1833c:	4604      	mov	r4, r0
   1833e:	bb0b      	cbnz	r3, 18384 <d_encoding+0x7c>
   18340:	68f2      	ldr	r2, [r6, #12]
   18342:	7812      	ldrb	r2, [r2, #0]
   18344:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   18348:	bf38      	it	cc
   1834a:	2300      	movcc	r3, #0
   1834c:	2c00      	cmp	r4, #0
   1834e:	bf08      	it	eq
   18350:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   18354:	2b00      	cmp	r3, #0
   18356:	d133      	bne.n	183c0 <d_encoding+0xb8>
   18358:	2a45      	cmp	r2, #69
   1835a:	d031      	beq.n	183c0 <d_encoding+0xb8>
   1835c:	4622      	mov	r2, r4
   1835e:	7813      	ldrb	r3, [r2, #0]
   18360:	2b04      	cmp	r3, #4
   18362:	f000 80cd 	beq.w	18500 <d_encoding+0x1f8>
   18366:	d302      	bcc.n	1836e <d_encoding+0x66>
   18368:	3b19      	subs	r3, #25
   1836a:	2b02      	cmp	r3, #2
   1836c:	d94f      	bls.n	1840e <d_encoding+0x106>
   1836e:	2100      	movs	r1, #0
   18370:	4630      	mov	r0, r6
   18372:	f7ff ff75 	bl	18260 <d_bare_function_type>
   18376:	2103      	movs	r1, #3
   18378:	4603      	mov	r3, r0
   1837a:	4622      	mov	r2, r4
   1837c:	4630      	mov	r0, r6
   1837e:	f7ff f98d 	bl	1769c <d_make_comp>
   18382:	e01e      	b.n	183c2 <d_encoding+0xba>
   18384:	68b3      	ldr	r3, [r6, #8]
   18386:	f013 0f01 	tst.w	r3, #1	; 0x1
   1838a:	d1d9      	bne.n	18340 <d_encoding+0x38>
   1838c:	7822      	ldrb	r2, [r4, #0]
   1838e:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   18392:	b2db      	uxtb	r3, r3
   18394:	2b02      	cmp	r3, #2
   18396:	d806      	bhi.n	183a6 <d_encoding+0x9e>
   18398:	6864      	ldr	r4, [r4, #4]
   1839a:	7822      	ldrb	r2, [r4, #0]
   1839c:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   183a0:	b2db      	uxtb	r3, r3
   183a2:	2b02      	cmp	r3, #2
   183a4:	d9f8      	bls.n	18398 <d_encoding+0x90>
   183a6:	2a02      	cmp	r2, #2
   183a8:	4620      	mov	r0, r4
   183aa:	d10a      	bne.n	183c2 <d_encoding+0xba>
   183ac:	68a2      	ldr	r2, [r4, #8]
   183ae:	e000      	b.n	183b2 <d_encoding+0xaa>
   183b0:	6852      	ldr	r2, [r2, #4]
   183b2:	7813      	ldrb	r3, [r2, #0]
   183b4:	3b19      	subs	r3, #25
   183b6:	b2db      	uxtb	r3, r3
   183b8:	2b02      	cmp	r3, #2
   183ba:	d9f9      	bls.n	183b0 <d_encoding+0xa8>
   183bc:	60a2      	str	r2, [r4, #8]
   183be:	e000      	b.n	183c2 <d_encoding+0xba>
   183c0:	4620      	mov	r0, r4
   183c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   183c6:	6b03      	ldr	r3, [r0, #48]
   183c8:	f103 0014 	add.w	r0, r3, #20	; 0x14
   183cc:	6330      	str	r0, [r6, #48]
   183ce:	780b      	ldrb	r3, [r1, #0]
   183d0:	2b54      	cmp	r3, #84
   183d2:	d020      	beq.n	18416 <d_encoding+0x10e>
   183d4:	2b47      	cmp	r3, #71
   183d6:	d001      	beq.n	183dc <d_encoding+0xd4>
   183d8:	2000      	movs	r0, #0
   183da:	e7f2      	b.n	183c2 <d_encoding+0xba>
   183dc:	1c4b      	adds	r3, r1, #1
   183de:	60f3      	str	r3, [r6, #12]
   183e0:	784a      	ldrb	r2, [r1, #1]
   183e2:	2a00      	cmp	r2, #0
   183e4:	d0f8      	beq.n	183d8 <d_encoding+0xd0>
   183e6:	3301      	adds	r3, #1
   183e8:	2a52      	cmp	r2, #82
   183ea:	60f3      	str	r3, [r6, #12]
   183ec:	f000 8189 	beq.w	18702 <d_encoding+0x3fa>
   183f0:	f200 8191 	bhi.w	18716 <d_encoding+0x40e>
   183f4:	2a41      	cmp	r2, #65
   183f6:	d1ef      	bne.n	183d8 <d_encoding+0xd0>
   183f8:	2100      	movs	r1, #0
   183fa:	4630      	mov	r0, r6
   183fc:	f7ff ff84 	bl	18308 <d_encoding>
   18400:	2114      	movs	r1, #20
   18402:	4602      	mov	r2, r0
   18404:	2300      	movs	r3, #0
   18406:	4630      	mov	r0, r6
   18408:	f7ff f948 	bl	1769c <d_make_comp>
   1840c:	e7d9      	b.n	183c2 <d_encoding+0xba>
   1840e:	6852      	ldr	r2, [r2, #4]
   18410:	2a00      	cmp	r2, #0
   18412:	d1a4      	bne.n	1835e <d_encoding+0x56>
   18414:	e7ab      	b.n	1836e <d_encoding+0x66>
   18416:	1c4a      	adds	r2, r1, #1
   18418:	60f2      	str	r2, [r6, #12]
   1841a:	784b      	ldrb	r3, [r1, #1]
   1841c:	2b00      	cmp	r3, #0
   1841e:	d0db      	beq.n	183d8 <d_encoding+0xd0>
   18420:	3201      	adds	r2, #1
   18422:	3b43      	subs	r3, #67
   18424:	60f2      	str	r2, [r6, #12]
   18426:	2b33      	cmp	r3, #51
   18428:	d8d6      	bhi.n	183d8 <d_encoding+0xd0>
   1842a:	a101      	add	r1, pc, #4	(adr r1, 18430 <d_encoding+0x128>)
   1842c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   18430:	00018645 	.word	0x00018645
   18434:	000183d9 	.word	0x000183d9
   18438:	000183d9 	.word	0x000183d9
   1843c:	00018695 	.word	0x00018695
   18440:	000183d9 	.word	0x000183d9
   18444:	000183d9 	.word	0x000183d9
   18448:	00018681 	.word	0x00018681
   1844c:	000186ef 	.word	0x000186ef
   18450:	000183d9 	.word	0x000183d9
   18454:	000183d9 	.word	0x000183d9
   18458:	000183d9 	.word	0x000183d9
   1845c:	000183d9 	.word	0x000183d9
   18460:	000183d9 	.word	0x000183d9
   18464:	000183d9 	.word	0x000183d9
   18468:	000183d9 	.word	0x000183d9
   1846c:	000183d9 	.word	0x000183d9
   18470:	000186db 	.word	0x000186db
   18474:	000186c1 	.word	0x000186c1
   18478:	000183d9 	.word	0x000183d9
   1847c:	000186a9 	.word	0x000186a9
   18480:	000183d9 	.word	0x000183d9
   18484:	000183d9 	.word	0x000183d9
   18488:	000183d9 	.word	0x000183d9
   1848c:	000183d9 	.word	0x000183d9
   18490:	000183d9 	.word	0x000183d9
   18494:	000183d9 	.word	0x000183d9
   18498:	000183d9 	.word	0x000183d9
   1849c:	000183d9 	.word	0x000183d9
   184a0:	000183d9 	.word	0x000183d9
   184a4:	000183d9 	.word	0x000183d9
   184a8:	000183d9 	.word	0x000183d9
   184ac:	000183d9 	.word	0x000183d9
   184b0:	000185ef 	.word	0x000185ef
   184b4:	000183d9 	.word	0x000183d9
   184b8:	000183d9 	.word	0x000183d9
   184bc:	000183d9 	.word	0x000183d9
   184c0:	000183d9 	.word	0x000183d9
   184c4:	000185cb 	.word	0x000185cb
   184c8:	000183d9 	.word	0x000183d9
   184cc:	000183d9 	.word	0x000183d9
   184d0:	000183d9 	.word	0x000183d9
   184d4:	000183d9 	.word	0x000183d9
   184d8:	000183d9 	.word	0x000183d9
   184dc:	000183d9 	.word	0x000183d9
   184e0:	000183d9 	.word	0x000183d9
   184e4:	000183d9 	.word	0x000183d9
   184e8:	000183d9 	.word	0x000183d9
   184ec:	000183d9 	.word	0x000183d9
   184f0:	000183d9 	.word	0x000183d9
   184f4:	000183d9 	.word	0x000183d9
   184f8:	000183d9 	.word	0x000183d9
   184fc:	00018621 	.word	0x00018621
   18500:	6852      	ldr	r2, [r2, #4]
   18502:	2a00      	cmp	r2, #0
   18504:	d05f      	beq.n	185c6 <d_encoding+0x2be>
   18506:	7813      	ldrb	r3, [r2, #0]
   18508:	3b01      	subs	r3, #1
   1850a:	2b2a      	cmp	r3, #42
   1850c:	d85b      	bhi.n	185c6 <d_encoding+0x2be>
   1850e:	a101      	add	r1, pc, #4	(adr r1, 18514 <d_encoding+0x20c>)
   18510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   18514:	000185c1 	.word	0x000185c1
   18518:	000185c1 	.word	0x000185c1
   1851c:	000185c7 	.word	0x000185c7
   18520:	000185c7 	.word	0x000185c7
   18524:	000185c7 	.word	0x000185c7
   18528:	0001836f 	.word	0x0001836f
   1852c:	0001836f 	.word	0x0001836f
   18530:	000185c7 	.word	0x000185c7
   18534:	000185c7 	.word	0x000185c7
   18538:	000185c7 	.word	0x000185c7
   1853c:	000185c7 	.word	0x000185c7
   18540:	000185c7 	.word	0x000185c7
   18544:	000185c7 	.word	0x000185c7
   18548:	000185c7 	.word	0x000185c7
   1854c:	000185c7 	.word	0x000185c7
   18550:	000185c7 	.word	0x000185c7
   18554:	000185c7 	.word	0x000185c7
   18558:	000185c7 	.word	0x000185c7
   1855c:	000185c7 	.word	0x000185c7
   18560:	000185c7 	.word	0x000185c7
   18564:	000185c7 	.word	0x000185c7
   18568:	000185c7 	.word	0x000185c7
   1856c:	000185c7 	.word	0x000185c7
   18570:	000185c7 	.word	0x000185c7
   18574:	000185c7 	.word	0x000185c7
   18578:	000185c7 	.word	0x000185c7
   1857c:	000185c7 	.word	0x000185c7
   18580:	000185c7 	.word	0x000185c7
   18584:	000185c7 	.word	0x000185c7
   18588:	000185c7 	.word	0x000185c7
   1858c:	000185c7 	.word	0x000185c7
   18590:	000185c7 	.word	0x000185c7
   18594:	000185c7 	.word	0x000185c7
   18598:	000185c7 	.word	0x000185c7
   1859c:	000185c7 	.word	0x000185c7
   185a0:	000185c7 	.word	0x000185c7
   185a4:	000185c7 	.word	0x000185c7
   185a8:	000185c7 	.word	0x000185c7
   185ac:	000185c7 	.word	0x000185c7
   185b0:	000185c7 	.word	0x000185c7
   185b4:	000185c7 	.word	0x000185c7
   185b8:	000185c7 	.word	0x000185c7
   185bc:	0001836f 	.word	0x0001836f
   185c0:	6892      	ldr	r2, [r2, #8]
   185c2:	2a00      	cmp	r2, #0
   185c4:	d19f      	bne.n	18506 <d_encoding+0x1fe>
   185c6:	2101      	movs	r1, #1
   185c8:	e6d2      	b.n	18370 <d_encoding+0x68>
   185ca:	4630      	mov	r0, r6
   185cc:	2168      	movs	r1, #104
   185ce:	f7ff f8e3 	bl	17798 <d_call_offset>
   185d2:	2800      	cmp	r0, #0
   185d4:	f43f af00 	beq.w	183d8 <d_encoding+0xd0>
   185d8:	2100      	movs	r1, #0
   185da:	4630      	mov	r0, r6
   185dc:	f7ff fe94 	bl	18308 <d_encoding>
   185e0:	210e      	movs	r1, #14
   185e2:	4602      	mov	r2, r0
   185e4:	2300      	movs	r3, #0
   185e6:	4630      	mov	r0, r6
   185e8:	f7ff f858 	bl	1769c <d_make_comp>
   185ec:	e6e9      	b.n	183c2 <d_encoding+0xba>
   185ee:	4630      	mov	r0, r6
   185f0:	2100      	movs	r1, #0
   185f2:	f7ff f8d1 	bl	17798 <d_call_offset>
   185f6:	2800      	cmp	r0, #0
   185f8:	f43f aeee 	beq.w	183d8 <d_encoding+0xd0>
   185fc:	4630      	mov	r0, r6
   185fe:	2100      	movs	r1, #0
   18600:	f7ff f8ca 	bl	17798 <d_call_offset>
   18604:	2800      	cmp	r0, #0
   18606:	f43f aee7 	beq.w	183d8 <d_encoding+0xd0>
   1860a:	2100      	movs	r1, #0
   1860c:	4630      	mov	r0, r6
   1860e:	f7ff fe7b 	bl	18308 <d_encoding>
   18612:	2110      	movs	r1, #16
   18614:	4602      	mov	r2, r0
   18616:	2300      	movs	r3, #0
   18618:	4630      	mov	r0, r6
   1861a:	f7ff f83f 	bl	1769c <d_make_comp>
   1861e:	e6d0      	b.n	183c2 <d_encoding+0xba>
   18620:	4630      	mov	r0, r6
   18622:	2176      	movs	r1, #118
   18624:	f7ff f8b8 	bl	17798 <d_call_offset>
   18628:	2800      	cmp	r0, #0
   1862a:	f43f aed5 	beq.w	183d8 <d_encoding+0xd0>
   1862e:	2100      	movs	r1, #0
   18630:	4630      	mov	r0, r6
   18632:	f7ff fe69 	bl	18308 <d_encoding>
   18636:	210f      	movs	r1, #15
   18638:	4602      	mov	r2, r0
   1863a:	2300      	movs	r3, #0
   1863c:	4630      	mov	r0, r6
   1863e:	f7ff f82d 	bl	1769c <d_make_comp>
   18642:	e6be      	b.n	183c2 <d_encoding+0xba>
   18644:	4630      	mov	r0, r6
   18646:	f7ff fa9d 	bl	17b84 <d_type>
   1864a:	4604      	mov	r4, r0
   1864c:	4630      	mov	r0, r6
   1864e:	f7ff f877 	bl	17740 <d_number>
   18652:	2800      	cmp	r0, #0
   18654:	f6ff aec0 	blt.w	183d8 <d_encoding+0xd0>
   18658:	68f2      	ldr	r2, [r6, #12]
   1865a:	7813      	ldrb	r3, [r2, #0]
   1865c:	2b5f      	cmp	r3, #95
   1865e:	f47f aebb 	bne.w	183d8 <d_encoding+0xd0>
   18662:	1c53      	adds	r3, r2, #1
   18664:	60f3      	str	r3, [r6, #12]
   18666:	4630      	mov	r0, r6
   18668:	f7ff fa8c 	bl	17b84 <d_type>
   1866c:	6b33      	ldr	r3, [r6, #48]
   1866e:	4602      	mov	r2, r0
   18670:	3305      	adds	r3, #5
   18672:	6333      	str	r3, [r6, #48]
   18674:	4630      	mov	r0, r6
   18676:	210a      	movs	r1, #10
   18678:	4623      	mov	r3, r4
   1867a:	f7ff f80f 	bl	1769c <d_make_comp>
   1867e:	e6a0      	b.n	183c2 <d_encoding+0xba>
   18680:	4630      	mov	r0, r6
   18682:	f7ff fa7f 	bl	17b84 <d_type>
   18686:	210b      	movs	r1, #11
   18688:	4602      	mov	r2, r0
   1868a:	2300      	movs	r3, #0
   1868c:	4630      	mov	r0, r6
   1868e:	f7ff f805 	bl	1769c <d_make_comp>
   18692:	e696      	b.n	183c2 <d_encoding+0xba>
   18694:	4630      	mov	r0, r6
   18696:	f7ff fa75 	bl	17b84 <d_type>
   1869a:	210d      	movs	r1, #13
   1869c:	4602      	mov	r2, r0
   1869e:	2300      	movs	r3, #0
   186a0:	4630      	mov	r0, r6
   186a2:	f7fe fffb 	bl	1769c <d_make_comp>
   186a6:	e68c      	b.n	183c2 <d_encoding+0xba>
   186a8:	1f43      	subs	r3, r0, #5
   186aa:	6333      	str	r3, [r6, #48]
   186ac:	4630      	mov	r0, r6
   186ae:	f7ff fa69 	bl	17b84 <d_type>
   186b2:	2108      	movs	r1, #8
   186b4:	4602      	mov	r2, r0
   186b6:	2300      	movs	r3, #0
   186b8:	4630      	mov	r0, r6
   186ba:	f7fe ffef 	bl	1769c <d_make_comp>
   186be:	e680      	b.n	183c2 <d_encoding+0xba>
   186c0:	f1a0 030a 	sub.w	r3, r0, #10	; 0xa
   186c4:	6333      	str	r3, [r6, #48]
   186c6:	4630      	mov	r0, r6
   186c8:	f7ff fa5c 	bl	17b84 <d_type>
   186cc:	2109      	movs	r1, #9
   186ce:	4602      	mov	r2, r0
   186d0:	2300      	movs	r3, #0
   186d2:	4630      	mov	r0, r6
   186d4:	f7fe ffe2 	bl	1769c <d_make_comp>
   186d8:	e673      	b.n	183c2 <d_encoding+0xba>
   186da:	4630      	mov	r0, r6
   186dc:	f7ff fa52 	bl	17b84 <d_type>
   186e0:	210c      	movs	r1, #12
   186e2:	4602      	mov	r2, r0
   186e4:	2300      	movs	r3, #0
   186e6:	4630      	mov	r0, r6
   186e8:	f7fe ffd8 	bl	1769c <d_make_comp>
   186ec:	e669      	b.n	183c2 <d_encoding+0xba>
   186ee:	4630      	mov	r0, r6
   186f0:	f7ff fa48 	bl	17b84 <d_type>
   186f4:	2111      	movs	r1, #17
   186f6:	4602      	mov	r2, r0
   186f8:	2300      	movs	r3, #0
   186fa:	4630      	mov	r0, r6
   186fc:	f7fe ffce 	bl	1769c <d_make_comp>
   18700:	e65f      	b.n	183c2 <d_encoding+0xba>
   18702:	4630      	mov	r0, r6
   18704:	f000 f9fc 	bl	18b00 <d_name>
   18708:	2113      	movs	r1, #19
   1870a:	4602      	mov	r2, r0
   1870c:	2300      	movs	r3, #0
   1870e:	4630      	mov	r0, r6
   18710:	f7fe ffc4 	bl	1769c <d_make_comp>
   18714:	e655      	b.n	183c2 <d_encoding+0xba>
   18716:	2a56      	cmp	r2, #86
   18718:	d04f      	beq.n	187ba <d_encoding+0x4b2>
   1871a:	2a72      	cmp	r2, #114
   1871c:	f47f ae5c 	bne.w	183d8 <d_encoding+0xd0>
   18720:	4630      	mov	r0, r6
   18722:	f7ff f80d 	bl	17740 <d_number>
   18726:	2801      	cmp	r0, #1
   18728:	f77f ae56 	ble.w	183d8 <d_encoding+0xd0>
   1872c:	68f3      	ldr	r3, [r6, #12]
   1872e:	781a      	ldrb	r2, [r3, #0]
   18730:	2a00      	cmp	r2, #0
   18732:	f43f ae51 	beq.w	183d8 <d_encoding+0xd0>
   18736:	1c5d      	adds	r5, r3, #1
   18738:	2a5f      	cmp	r2, #95
   1873a:	60f5      	str	r5, [r6, #12]
   1873c:	f47f ae4c 	bne.w	183d8 <d_encoding+0xd0>
   18740:	f04f 0800 	mov.w	r8, #0	; 0x0
   18744:	1e47      	subs	r7, r0, #1
   18746:	46c2      	mov	sl, r8
   18748:	f04f 0936 	mov.w	r9, #54	; 0x36
   1874c:	782b      	ldrb	r3, [r5, #0]
   1874e:	2b00      	cmp	r3, #0
   18750:	f43f ae42 	beq.w	183d8 <d_encoding+0xd0>
   18754:	2b24      	cmp	r3, #36
   18756:	d054      	beq.n	18802 <d_encoding+0x4fa>
   18758:	2f01      	cmp	r7, #1
   1875a:	dd4f      	ble.n	187fc <d_encoding+0x4f4>
   1875c:	786b      	ldrb	r3, [r5, #1]
   1875e:	2b00      	cmp	r3, #0
   18760:	d04c      	beq.n	187fc <d_encoding+0x4f4>
   18762:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18766:	e007      	b.n	18778 <d_encoding+0x470>
   18768:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1876c:	45bc      	cmp	ip, r7
   1876e:	da05      	bge.n	1877c <d_encoding+0x474>
   18770:	f815 300c 	ldrb.w	r3, [r5, ip]
   18774:	46e6      	mov	lr, ip
   18776:	b113      	cbz	r3, 1877e <d_encoding+0x476>
   18778:	2b24      	cmp	r3, #36
   1877a:	d1f5      	bne.n	18768 <d_encoding+0x460>
   1877c:	46e6      	mov	lr, ip
   1877e:	6970      	ldr	r0, [r6, #20]
   18780:	69b3      	ldr	r3, [r6, #24]
   18782:	4298      	cmp	r0, r3
   18784:	da35      	bge.n	187f2 <d_encoding+0x4ea>
   18786:	0083      	lsls	r3, r0, #2
   18788:	0102      	lsls	r2, r0, #4
   1878a:	6931      	ldr	r1, [r6, #16]
   1878c:	1ad2      	subs	r2, r2, r3
   1878e:	1c43      	adds	r3, r0, #1
   18790:	188c      	adds	r4, r1, r2
   18792:	6173      	str	r3, [r6, #20]
   18794:	d02d      	beq.n	187f2 <d_encoding+0x4ea>
   18796:	6065      	str	r5, [r4, #4]
   18798:	f8c4 c008 	str.w	ip, [r4, #8]
   1879c:	68f3      	ldr	r3, [r6, #12]
   1879e:	f801 a002 	strb.w	sl, [r1, r2]
   187a2:	eb03 050e 	add.w	r5, r3, lr
   187a6:	60f5      	str	r5, [r6, #12]
   187a8:	ebcc 0707 	rsb	r7, ip, r7
   187ac:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   187b0:	d114      	bne.n	187dc <d_encoding+0x4d4>
   187b2:	2f00      	cmp	r7, #0
   187b4:	dd0b      	ble.n	187ce <d_encoding+0x4c6>
   187b6:	46a0      	mov	r8, r4
   187b8:	e7c8      	b.n	1874c <d_encoding+0x444>
   187ba:	4630      	mov	r0, r6
   187bc:	f000 f9a0 	bl	18b00 <d_name>
   187c0:	2112      	movs	r1, #18
   187c2:	4602      	mov	r2, r0
   187c4:	2300      	movs	r3, #0
   187c6:	4630      	mov	r0, r6
   187c8:	f7fe ff68 	bl	1769c <d_make_comp>
   187cc:	e5f9      	b.n	183c2 <d_encoding+0xba>
   187ce:	4630      	mov	r0, r6
   187d0:	2134      	movs	r1, #52
   187d2:	4622      	mov	r2, r4
   187d4:	2300      	movs	r3, #0
   187d6:	f7fe ff61 	bl	1769c <d_make_comp>
   187da:	e5f2      	b.n	183c2 <d_encoding+0xba>
   187dc:	4623      	mov	r3, r4
   187de:	4630      	mov	r0, r6
   187e0:	2135      	movs	r1, #53
   187e2:	4642      	mov	r2, r8
   187e4:	f7fe ff5a 	bl	1769c <d_make_comp>
   187e8:	4604      	mov	r4, r0
   187ea:	2800      	cmp	r0, #0
   187ec:	d1e1      	bne.n	187b2 <d_encoding+0x4aa>
   187ee:	2000      	movs	r0, #0
   187f0:	e5e7      	b.n	183c2 <d_encoding+0xba>
   187f2:	68f3      	ldr	r3, [r6, #12]
   187f4:	2000      	movs	r0, #0
   187f6:	4473      	add	r3, lr
   187f8:	60f3      	str	r3, [r6, #12]
   187fa:	e5e2      	b.n	183c2 <d_encoding+0xba>
   187fc:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18800:	e7bc      	b.n	1877c <d_encoding+0x474>
   18802:	786b      	ldrb	r3, [r5, #1]
   18804:	2b53      	cmp	r3, #83
   18806:	d01a      	beq.n	1883e <d_encoding+0x536>
   18808:	2b5f      	cmp	r3, #95
   1880a:	d020      	beq.n	1884e <d_encoding+0x546>
   1880c:	2b24      	cmp	r3, #36
   1880e:	f47f ade3 	bne.w	183d8 <d_encoding+0xd0>
   18812:	469c      	mov	ip, r3
   18814:	6970      	ldr	r0, [r6, #20]
   18816:	69b3      	ldr	r3, [r6, #24]
   18818:	4298      	cmp	r0, r3
   1881a:	da13      	bge.n	18844 <d_encoding+0x53c>
   1881c:	0083      	lsls	r3, r0, #2
   1881e:	0102      	lsls	r2, r0, #4
   18820:	6931      	ldr	r1, [r6, #16]
   18822:	1ad2      	subs	r2, r2, r3
   18824:	1c43      	adds	r3, r0, #1
   18826:	188c      	adds	r4, r1, r2
   18828:	6173      	str	r3, [r6, #20]
   1882a:	d00b      	beq.n	18844 <d_encoding+0x53c>
   1882c:	f8c4 c004 	str.w	ip, [r4, #4]
   18830:	68f3      	ldr	r3, [r6, #12]
   18832:	f801 9002 	strb.w	r9, [r1, r2]
   18836:	1c9d      	adds	r5, r3, #2
   18838:	60f5      	str	r5, [r6, #12]
   1883a:	3f02      	subs	r7, #2
   1883c:	e7b6      	b.n	187ac <d_encoding+0x4a4>
   1883e:	f04f 0c2f 	mov.w	ip, #47	; 0x2f
   18842:	e7e7      	b.n	18814 <d_encoding+0x50c>
   18844:	68f3      	ldr	r3, [r6, #12]
   18846:	2000      	movs	r0, #0
   18848:	3302      	adds	r3, #2
   1884a:	60f3      	str	r3, [r6, #12]
   1884c:	e5b9      	b.n	183c2 <d_encoding+0xba>
   1884e:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   18852:	e7df      	b.n	18814 <d_encoding+0x50c>

00018854 <d_expr_primary>:
   18854:	b5f0      	push	{r4, r5, r6, r7, lr}
   18856:	68c2      	ldr	r2, [r0, #12]
   18858:	b081      	sub	sp, #4
   1885a:	7813      	ldrb	r3, [r2, #0]
   1885c:	4604      	mov	r4, r0
   1885e:	2b4c      	cmp	r3, #76
   18860:	d002      	beq.n	18868 <d_expr_primary+0x14>
   18862:	2000      	movs	r0, #0
   18864:	b001      	add	sp, #4
   18866:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18868:	1c51      	adds	r1, r2, #1
   1886a:	60c1      	str	r1, [r0, #12]
   1886c:	7853      	ldrb	r3, [r2, #1]
   1886e:	2b5f      	cmp	r3, #95
   18870:	d029      	beq.n	188c6 <d_expr_primary+0x72>
   18872:	f7ff f987 	bl	17b84 <d_type>
   18876:	4606      	mov	r6, r0
   18878:	2800      	cmp	r0, #0
   1887a:	d0f2      	beq.n	18862 <d_expr_primary+0xe>
   1887c:	7803      	ldrb	r3, [r0, #0]
   1887e:	2b22      	cmp	r3, #34
   18880:	d036      	beq.n	188f0 <d_expr_primary+0x9c>
   18882:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   18886:	f89c 3000 	ldrb.w	r3, [ip]
   1888a:	2b6e      	cmp	r3, #110
   1888c:	d028      	beq.n	188e0 <d_expr_primary+0x8c>
   1888e:	2732      	movs	r7, #50
   18890:	2b45      	cmp	r3, #69
   18892:	d04f      	beq.n	18934 <d_expr_primary+0xe0>
   18894:	2b00      	cmp	r3, #0
   18896:	d0e4      	beq.n	18862 <d_expr_primary+0xe>
   18898:	4663      	mov	r3, ip
   1889a:	e001      	b.n	188a0 <d_expr_primary+0x4c>
   1889c:	2a00      	cmp	r2, #0
   1889e:	d0e0      	beq.n	18862 <d_expr_primary+0xe>
   188a0:	3301      	adds	r3, #1
   188a2:	60e3      	str	r3, [r4, #12]
   188a4:	781a      	ldrb	r2, [r3, #0]
   188a6:	2a45      	cmp	r2, #69
   188a8:	d1f8      	bne.n	1889c <d_expr_primary+0x48>
   188aa:	ebcc 0103 	rsb	r1, ip, r3
   188ae:	6960      	ldr	r0, [r4, #20]
   188b0:	69a3      	ldr	r3, [r4, #24]
   188b2:	4298      	cmp	r0, r3
   188b4:	db25      	blt.n	18902 <d_expr_primary+0xae>
   188b6:	2500      	movs	r5, #0
   188b8:	4620      	mov	r0, r4
   188ba:	4639      	mov	r1, r7
   188bc:	4632      	mov	r2, r6
   188be:	462b      	mov	r3, r5
   188c0:	f7fe feec 	bl	1769c <d_make_comp>
   188c4:	e005      	b.n	188d2 <d_expr_primary+0x7e>
   188c6:	1c4a      	adds	r2, r1, #1
   188c8:	60c2      	str	r2, [r0, #12]
   188ca:	784b      	ldrb	r3, [r1, #1]
   188cc:	2b5a      	cmp	r3, #90
   188ce:	d02b      	beq.n	18928 <d_expr_primary+0xd4>
   188d0:	2000      	movs	r0, #0
   188d2:	68e2      	ldr	r2, [r4, #12]
   188d4:	7813      	ldrb	r3, [r2, #0]
   188d6:	2b45      	cmp	r3, #69
   188d8:	d1c3      	bne.n	18862 <d_expr_primary+0xe>
   188da:	1c53      	adds	r3, r2, #1
   188dc:	60e3      	str	r3, [r4, #12]
   188de:	e7c1      	b.n	18864 <d_expr_primary+0x10>
   188e0:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   188e4:	f8c4 c00c 	str.w	ip, [r4, #12]
   188e8:	f89c 3000 	ldrb.w	r3, [ip]
   188ec:	2733      	movs	r7, #51
   188ee:	e7cf      	b.n	18890 <d_expr_primary+0x3c>
   188f0:	6842      	ldr	r2, [r0, #4]
   188f2:	7c13      	ldrb	r3, [r2, #16]
   188f4:	2b00      	cmp	r3, #0
   188f6:	d0c4      	beq.n	18882 <d_expr_primary+0x2e>
   188f8:	6b23      	ldr	r3, [r4, #48]
   188fa:	6852      	ldr	r2, [r2, #4]
   188fc:	1a9b      	subs	r3, r3, r2
   188fe:	6323      	str	r3, [r4, #48]
   18900:	e7bf      	b.n	18882 <d_expr_primary+0x2e>
   18902:	0083      	lsls	r3, r0, #2
   18904:	0102      	lsls	r2, r0, #4
   18906:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1890a:	1ad2      	subs	r2, r2, r3
   1890c:	1c43      	adds	r3, r0, #1
   1890e:	eb1e 0502 	adds.w	r5, lr, r2
   18912:	6163      	str	r3, [r4, #20]
   18914:	d0cf      	beq.n	188b6 <d_expr_primary+0x62>
   18916:	2900      	cmp	r1, #0
   18918:	d0cd      	beq.n	188b6 <d_expr_primary+0x62>
   1891a:	2300      	movs	r3, #0
   1891c:	f80e 3002 	strb.w	r3, [lr, r2]
   18920:	f8c5 c004 	str.w	ip, [r5, #4]
   18924:	60a9      	str	r1, [r5, #8]
   18926:	e7c7      	b.n	188b8 <d_expr_primary+0x64>
   18928:	1c53      	adds	r3, r2, #1
   1892a:	60c3      	str	r3, [r0, #12]
   1892c:	2100      	movs	r1, #0
   1892e:	f7ff fceb 	bl	18308 <d_encoding>
   18932:	e7ce      	b.n	188d2 <d_expr_primary+0x7e>
   18934:	2100      	movs	r1, #0
   18936:	e7ba      	b.n	188ae <d_expr_primary+0x5a>

00018938 <d_expression>:
   18938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1893a:	68c2      	ldr	r2, [r0, #12]
   1893c:	b081      	sub	sp, #4
   1893e:	7813      	ldrb	r3, [r2, #0]
   18940:	4606      	mov	r6, r0
   18942:	2b4c      	cmp	r3, #76
   18944:	d03a      	beq.n	189bc <d_expression+0x84>
   18946:	2b54      	cmp	r3, #84
   18948:	d03b      	beq.n	189c2 <d_expression+0x8a>
   1894a:	2b73      	cmp	r3, #115
   1894c:	d102      	bne.n	18954 <d_expression+0x1c>
   1894e:	7853      	ldrb	r3, [r2, #1]
   18950:	2b72      	cmp	r3, #114
   18952:	d039      	beq.n	189c8 <d_expression+0x90>
   18954:	4630      	mov	r0, r6
   18956:	f7ff fb5f 	bl	18018 <d_operator_name>
   1895a:	4607      	mov	r7, r0
   1895c:	b180      	cbz	r0, 18980 <d_expression+0x48>
   1895e:	7803      	ldrb	r3, [r0, #0]
   18960:	2b29      	cmp	r3, #41
   18962:	d010      	beq.n	18986 <d_expression+0x4e>
   18964:	2b2a      	cmp	r3, #42
   18966:	d043      	beq.n	189f0 <d_expression+0xb8>
   18968:	2b2b      	cmp	r3, #43
   1896a:	d023      	beq.n	189b4 <d_expression+0x7c>
   1896c:	2b29      	cmp	r3, #41
   1896e:	d107      	bne.n	18980 <d_expression+0x48>
   18970:	6844      	ldr	r4, [r0, #4]
   18972:	68e0      	ldr	r0, [r4, #12]
   18974:	2802      	cmp	r0, #2
   18976:	d05b      	beq.n	18a30 <d_expression+0xf8>
   18978:	2803      	cmp	r0, #3
   1897a:	d03b      	beq.n	189f4 <d_expression+0xbc>
   1897c:	2801      	cmp	r0, #1
   1897e:	d019      	beq.n	189b4 <d_expression+0x7c>
   18980:	2000      	movs	r0, #0
   18982:	b001      	add	sp, #4
   18984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18986:	6841      	ldr	r1, [r0, #4]
   18988:	6b33      	ldr	r3, [r6, #48]
   1898a:	688a      	ldr	r2, [r1, #8]
   1898c:	493a      	ldr	r1, [pc, #232]	(18a78 <d_expression+0x140>)
   1898e:	189b      	adds	r3, r3, r2
   18990:	3b02      	subs	r3, #2
   18992:	6333      	str	r3, [r6, #48]
   18994:	6844      	ldr	r4, [r0, #4]
   18996:	6820      	ldr	r0, [r4, #0]
   18998:	f008 fb84 	bl	210a4 <strcmp>
   1899c:	2800      	cmp	r0, #0
   1899e:	d1e8      	bne.n	18972 <d_expression+0x3a>
   189a0:	4630      	mov	r0, r6
   189a2:	f7ff f8ef 	bl	17b84 <d_type>
   189a6:	4603      	mov	r3, r0
   189a8:	212c      	movs	r1, #44
   189aa:	4630      	mov	r0, r6
   189ac:	463a      	mov	r2, r7
   189ae:	f7fe fe75 	bl	1769c <d_make_comp>
   189b2:	e7e6      	b.n	18982 <d_expression+0x4a>
   189b4:	4630      	mov	r0, r6
   189b6:	f7ff ffbf 	bl	18938 <d_expression>
   189ba:	e7f4      	b.n	189a6 <d_expression+0x6e>
   189bc:	f7ff ff4a 	bl	18854 <d_expr_primary>
   189c0:	e7df      	b.n	18982 <d_expression+0x4a>
   189c2:	f7fe ff51 	bl	17868 <d_template_param>
   189c6:	e7dc      	b.n	18982 <d_expression+0x4a>
   189c8:	1c93      	adds	r3, r2, #2
   189ca:	60c3      	str	r3, [r0, #12]
   189cc:	f7ff f8da 	bl	17b84 <d_type>
   189d0:	4605      	mov	r5, r0
   189d2:	4630      	mov	r0, r6
   189d4:	f7ff fb9e 	bl	18114 <d_unqualified_name>
   189d8:	68f3      	ldr	r3, [r6, #12]
   189da:	4604      	mov	r4, r0
   189dc:	781a      	ldrb	r2, [r3, #0]
   189de:	2a49      	cmp	r2, #73
   189e0:	d03a      	beq.n	18a58 <d_expression+0x120>
   189e2:	4630      	mov	r0, r6
   189e4:	2101      	movs	r1, #1
   189e6:	462a      	mov	r2, r5
   189e8:	4623      	mov	r3, r4
   189ea:	f7fe fe57 	bl	1769c <d_make_comp>
   189ee:	e7c8      	b.n	18982 <d_expression+0x4a>
   189f0:	6840      	ldr	r0, [r0, #4]
   189f2:	e7bf      	b.n	18974 <d_expression+0x3c>
   189f4:	4630      	mov	r0, r6
   189f6:	f7ff ff9f 	bl	18938 <d_expression>
   189fa:	4605      	mov	r5, r0
   189fc:	4630      	mov	r0, r6
   189fe:	f7ff ff9b 	bl	18938 <d_expression>
   18a02:	4604      	mov	r4, r0
   18a04:	4630      	mov	r0, r6
   18a06:	f7ff ff97 	bl	18938 <d_expression>
   18a0a:	2131      	movs	r1, #49
   18a0c:	4603      	mov	r3, r0
   18a0e:	4622      	mov	r2, r4
   18a10:	4630      	mov	r0, r6
   18a12:	f7fe fe43 	bl	1769c <d_make_comp>
   18a16:	2130      	movs	r1, #48
   18a18:	4603      	mov	r3, r0
   18a1a:	462a      	mov	r2, r5
   18a1c:	4630      	mov	r0, r6
   18a1e:	f7fe fe3d 	bl	1769c <d_make_comp>
   18a22:	212f      	movs	r1, #47
   18a24:	4603      	mov	r3, r0
   18a26:	463a      	mov	r2, r7
   18a28:	4630      	mov	r0, r6
   18a2a:	f7fe fe37 	bl	1769c <d_make_comp>
   18a2e:	e7a8      	b.n	18982 <d_expression+0x4a>
   18a30:	4630      	mov	r0, r6
   18a32:	f7ff ff81 	bl	18938 <d_expression>
   18a36:	4604      	mov	r4, r0
   18a38:	4630      	mov	r0, r6
   18a3a:	f7ff ff7d 	bl	18938 <d_expression>
   18a3e:	212e      	movs	r1, #46
   18a40:	4603      	mov	r3, r0
   18a42:	4622      	mov	r2, r4
   18a44:	4630      	mov	r0, r6
   18a46:	f7fe fe29 	bl	1769c <d_make_comp>
   18a4a:	212d      	movs	r1, #45
   18a4c:	4603      	mov	r3, r0
   18a4e:	463a      	mov	r2, r7
   18a50:	4630      	mov	r0, r6
   18a52:	f7fe fe23 	bl	1769c <d_make_comp>
   18a56:	e794      	b.n	18982 <d_expression+0x4a>
   18a58:	4630      	mov	r0, r6
   18a5a:	f000 f80f 	bl	18a7c <d_template_args>
   18a5e:	2104      	movs	r1, #4
   18a60:	4603      	mov	r3, r0
   18a62:	4622      	mov	r2, r4
   18a64:	4630      	mov	r0, r6
   18a66:	f7fe fe19 	bl	1769c <d_make_comp>
   18a6a:	2101      	movs	r1, #1
   18a6c:	4603      	mov	r3, r0
   18a6e:	462a      	mov	r2, r5
   18a70:	4630      	mov	r0, r6
   18a72:	f7fe fe13 	bl	1769c <d_make_comp>
   18a76:	e784      	b.n	18982 <d_expression+0x4a>
   18a78:	00022f74 	.word	0x00022f74

00018a7c <d_template_args>:
   18a7c:	b570      	push	{r4, r5, r6, lr}
   18a7e:	68c2      	ldr	r2, [r0, #12]
   18a80:	b082      	sub	sp, #8
   18a82:	7813      	ldrb	r3, [r2, #0]
   18a84:	4604      	mov	r4, r0
   18a86:	2b49      	cmp	r3, #73
   18a88:	6ac6      	ldr	r6, [r0, #44]
   18a8a:	d002      	beq.n	18a92 <d_template_args+0x16>
   18a8c:	2000      	movs	r0, #0
   18a8e:	b002      	add	sp, #8
   18a90:	bd70      	pop	{r4, r5, r6, pc}
   18a92:	3b49      	subs	r3, #73
   18a94:	1c51      	adds	r1, r2, #1
   18a96:	ad02      	add	r5, sp, #8
   18a98:	60c1      	str	r1, [r0, #12]
   18a9a:	f845 3d04 	str.w	r3, [r5, #-4]!
   18a9e:	7853      	ldrb	r3, [r2, #1]
   18aa0:	2b4c      	cmp	r3, #76
   18aa2:	d016      	beq.n	18ad2 <d_template_args+0x56>
   18aa4:	2b58      	cmp	r3, #88
   18aa6:	d019      	beq.n	18adc <d_template_args+0x60>
   18aa8:	4620      	mov	r0, r4
   18aaa:	f7ff f86b 	bl	17b84 <d_type>
   18aae:	4602      	mov	r2, r0
   18ab0:	2a00      	cmp	r2, #0
   18ab2:	d0eb      	beq.n	18a8c <d_template_args+0x10>
   18ab4:	4620      	mov	r0, r4
   18ab6:	2128      	movs	r1, #40
   18ab8:	2300      	movs	r3, #0
   18aba:	f7fe fdef 	bl	1769c <d_make_comp>
   18abe:	6028      	str	r0, [r5, #0]
   18ac0:	2800      	cmp	r0, #0
   18ac2:	d0e3      	beq.n	18a8c <d_template_args+0x10>
   18ac4:	68e1      	ldr	r1, [r4, #12]
   18ac6:	780b      	ldrb	r3, [r1, #0]
   18ac8:	2b45      	cmp	r3, #69
   18aca:	d014      	beq.n	18af6 <d_template_args+0x7a>
   18acc:	f100 0508 	add.w	r5, r0, #8	; 0x8
   18ad0:	e7e6      	b.n	18aa0 <d_template_args+0x24>
   18ad2:	4620      	mov	r0, r4
   18ad4:	f7ff febe 	bl	18854 <d_expr_primary>
   18ad8:	4602      	mov	r2, r0
   18ada:	e7e9      	b.n	18ab0 <d_template_args+0x34>
   18adc:	1c4b      	adds	r3, r1, #1
   18ade:	60e3      	str	r3, [r4, #12]
   18ae0:	4620      	mov	r0, r4
   18ae2:	f7ff ff29 	bl	18938 <d_expression>
   18ae6:	68e1      	ldr	r1, [r4, #12]
   18ae8:	4602      	mov	r2, r0
   18aea:	780b      	ldrb	r3, [r1, #0]
   18aec:	2b45      	cmp	r3, #69
   18aee:	d1cd      	bne.n	18a8c <d_template_args+0x10>
   18af0:	1c4b      	adds	r3, r1, #1
   18af2:	60e3      	str	r3, [r4, #12]
   18af4:	e7dc      	b.n	18ab0 <d_template_args+0x34>
   18af6:	1c4b      	adds	r3, r1, #1
   18af8:	60e3      	str	r3, [r4, #12]
   18afa:	62e6      	str	r6, [r4, #44]
   18afc:	9801      	ldr	r0, [sp, #4]
   18afe:	e7c6      	b.n	18a8e <d_template_args+0x12>

00018b00 <d_name>:
   18b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b04:	68c2      	ldr	r2, [r0, #12]
   18b06:	b082      	sub	sp, #8
   18b08:	7813      	ldrb	r3, [r2, #0]
   18b0a:	4606      	mov	r6, r0
   18b0c:	3b4c      	subs	r3, #76
   18b0e:	2b0e      	cmp	r3, #14
   18b10:	d809      	bhi.n	18b26 <d_name+0x26>
   18b12:	e8df f003 	tbb	[pc, r3]
   18b16:	0883      	.short	0x0883
   18b18:	0808083b 	.word	0x0808083b
   18b1c:	08082108 	.word	0x08082108
   18b20:	08080808 	.word	0x08080808
   18b24:	0014      	.short	0x0014
   18b26:	f7ff faf5 	bl	18114 <d_unqualified_name>
   18b2a:	68f3      	ldr	r3, [r6, #12]
   18b2c:	4604      	mov	r4, r0
   18b2e:	781a      	ldrb	r2, [r3, #0]
   18b30:	2a49      	cmp	r2, #73
   18b32:	f000 80d0 	beq.w	18cd6 <d_name+0x1d6>
   18b36:	4620      	mov	r0, r4
   18b38:	b002      	add	sp, #8
   18b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b3e:	1c53      	adds	r3, r2, #1
   18b40:	60c3      	str	r3, [r0, #12]
   18b42:	2100      	movs	r1, #0
   18b44:	f7ff fbe0 	bl	18308 <d_encoding>
   18b48:	68f2      	ldr	r2, [r6, #12]
   18b4a:	4604      	mov	r4, r0
   18b4c:	7813      	ldrb	r3, [r2, #0]
   18b4e:	2b45      	cmp	r3, #69
   18b50:	f000 80a0 	beq.w	18c94 <d_name+0x194>
   18b54:	2400      	movs	r4, #0
   18b56:	e7ee      	b.n	18b36 <d_name+0x36>
   18b58:	7853      	ldrb	r3, [r2, #1]
   18b5a:	2b74      	cmp	r3, #116
   18b5c:	d06c      	beq.n	18c38 <d_name+0x138>
   18b5e:	2100      	movs	r1, #0
   18b60:	f7fe feb6 	bl	178d0 <d_substitution>
   18b64:	2101      	movs	r1, #1
   18b66:	4604      	mov	r4, r0
   18b68:	68f3      	ldr	r3, [r6, #12]
   18b6a:	781a      	ldrb	r2, [r3, #0]
   18b6c:	2a49      	cmp	r2, #73
   18b6e:	d1e2      	bne.n	18b36 <d_name+0x36>
   18b70:	2900      	cmp	r1, #0
   18b72:	f000 80b0 	beq.w	18cd6 <d_name+0x1d6>
   18b76:	4630      	mov	r0, r6
   18b78:	f7ff ff80 	bl	18a7c <d_template_args>
   18b7c:	4622      	mov	r2, r4
   18b7e:	4603      	mov	r3, r0
   18b80:	2104      	movs	r1, #4
   18b82:	4630      	mov	r0, r6
   18b84:	f7fe fd8a 	bl	1769c <d_make_comp>
   18b88:	4604      	mov	r4, r0
   18b8a:	e7d4      	b.n	18b36 <d_name+0x36>
   18b8c:	1c53      	adds	r3, r2, #1
   18b8e:	60c3      	str	r3, [r0, #12]
   18b90:	a901      	add	r1, sp, #4
   18b92:	2201      	movs	r2, #1
   18b94:	f7fe fe22 	bl	177dc <d_cv_qualifiers>
   18b98:	4680      	mov	r8, r0
   18b9a:	2800      	cmp	r0, #0
   18b9c:	d0da      	beq.n	18b54 <d_name+0x54>
   18b9e:	68f1      	ldr	r1, [r6, #12]
   18ba0:	2700      	movs	r7, #0
   18ba2:	780c      	ldrb	r4, [r1, #0]
   18ba4:	2c00      	cmp	r4, #0
   18ba6:	d042      	beq.n	18c2e <d_name+0x12e>
   18ba8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   18bac:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   18bb0:	b2db      	uxtb	r3, r3
   18bb2:	b2d2      	uxtb	r2, r2
   18bb4:	2b19      	cmp	r3, #25
   18bb6:	bf8c      	ite	hi
   18bb8:	2300      	movhi	r3, #0
   18bba:	2301      	movls	r3, #1
   18bbc:	2a09      	cmp	r2, #9
   18bbe:	bf98      	it	ls
   18bc0:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   18bc4:	2b00      	cmp	r3, #0
   18bc6:	d15a      	bne.n	18c7e <d_name+0x17e>
   18bc8:	2c44      	cmp	r4, #68
   18bca:	bf14      	ite	ne
   18bcc:	2300      	movne	r3, #0
   18bce:	2301      	moveq	r3, #1
   18bd0:	2c43      	cmp	r4, #67
   18bd2:	bf08      	it	eq
   18bd4:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   18bd8:	2b00      	cmp	r3, #0
   18bda:	d150      	bne.n	18c7e <d_name+0x17e>
   18bdc:	2c4c      	cmp	r4, #76
   18bde:	d04e      	beq.n	18c7e <d_name+0x17e>
   18be0:	2c53      	cmp	r4, #83
   18be2:	d051      	beq.n	18c88 <d_name+0x188>
   18be4:	2c49      	cmp	r4, #73
   18be6:	f000 8093 	beq.w	18d10 <d_name+0x210>
   18bea:	2c54      	cmp	r4, #84
   18bec:	f040 8081 	bne.w	18cf2 <d_name+0x1f2>
   18bf0:	4630      	mov	r0, r6
   18bf2:	f7fe fe39 	bl	17868 <d_template_param>
   18bf6:	4605      	mov	r5, r0
   18bf8:	b137      	cbz	r7, 18c08 <d_name+0x108>
   18bfa:	2101      	movs	r1, #1
   18bfc:	462b      	mov	r3, r5
   18bfe:	4630      	mov	r0, r6
   18c00:	463a      	mov	r2, r7
   18c02:	f7fe fd4b 	bl	1769c <d_make_comp>
   18c06:	4605      	mov	r5, r0
   18c08:	2c53      	cmp	r4, #83
   18c0a:	bf08      	it	eq
   18c0c:	68f1      	ldreq	r1, [r6, #12]
   18c0e:	d003      	beq.n	18c18 <d_name+0x118>
   18c10:	68f1      	ldr	r1, [r6, #12]
   18c12:	780b      	ldrb	r3, [r1, #0]
   18c14:	2b45      	cmp	r3, #69
   18c16:	d105      	bne.n	18c24 <d_name+0x124>
   18c18:	462f      	mov	r7, r5
   18c1a:	e7c2      	b.n	18ba2 <d_name+0xa2>
   18c1c:	f7ff fa7a 	bl	18114 <d_unqualified_name>
   18c20:	4604      	mov	r4, r0
   18c22:	e788      	b.n	18b36 <d_name+0x36>
   18c24:	b11d      	cbz	r5, 18c2e <d_name+0x12e>
   18c26:	6a32      	ldr	r2, [r6, #32]
   18c28:	6a73      	ldr	r3, [r6, #36]
   18c2a:	429a      	cmp	r2, r3
   18c2c:	db4c      	blt.n	18cc8 <d_name+0x1c8>
   18c2e:	2300      	movs	r3, #0
   18c30:	f8c8 3000 	str.w	r3, [r8]
   18c34:	461c      	mov	r4, r3
   18c36:	e77e      	b.n	18b36 <d_name+0x36>
   18c38:	1c93      	adds	r3, r2, #2
   18c3a:	60c3      	str	r3, [r0, #12]
   18c3c:	6941      	ldr	r1, [r0, #20]
   18c3e:	6983      	ldr	r3, [r0, #24]
   18c40:	4299      	cmp	r1, r3
   18c42:	da3f      	bge.n	18cc4 <d_name+0x1c4>
   18c44:	008b      	lsls	r3, r1, #2
   18c46:	010a      	lsls	r2, r1, #4
   18c48:	6900      	ldr	r0, [r0, #16]
   18c4a:	1ad2      	subs	r2, r2, r3
   18c4c:	1c4b      	adds	r3, r1, #1
   18c4e:	1884      	adds	r4, r0, r2
   18c50:	6173      	str	r3, [r6, #20]
   18c52:	d037      	beq.n	18cc4 <d_name+0x1c4>
   18c54:	2300      	movs	r3, #0
   18c56:	5483      	strb	r3, [r0, r2]
   18c58:	4a4b      	ldr	r2, [pc, #300]	(18d88 <d_name+0x288>)
   18c5a:	3303      	adds	r3, #3
   18c5c:	6062      	str	r2, [r4, #4]
   18c5e:	60a3      	str	r3, [r4, #8]
   18c60:	4630      	mov	r0, r6
   18c62:	f7ff fa57 	bl	18114 <d_unqualified_name>
   18c66:	2101      	movs	r1, #1
   18c68:	4603      	mov	r3, r0
   18c6a:	4622      	mov	r2, r4
   18c6c:	4630      	mov	r0, r6
   18c6e:	f7fe fd15 	bl	1769c <d_make_comp>
   18c72:	6b33      	ldr	r3, [r6, #48]
   18c74:	4604      	mov	r4, r0
   18c76:	3303      	adds	r3, #3
   18c78:	6333      	str	r3, [r6, #48]
   18c7a:	2100      	movs	r1, #0
   18c7c:	e774      	b.n	18b68 <d_name+0x68>
   18c7e:	4630      	mov	r0, r6
   18c80:	f7ff fa48 	bl	18114 <d_unqualified_name>
   18c84:	4605      	mov	r5, r0
   18c86:	e7b7      	b.n	18bf8 <d_name+0xf8>
   18c88:	4630      	mov	r0, r6
   18c8a:	2101      	movs	r1, #1
   18c8c:	f7fe fe20 	bl	178d0 <d_substitution>
   18c90:	4605      	mov	r5, r0
   18c92:	e7b1      	b.n	18bf8 <d_name+0xf8>
   18c94:	1c51      	adds	r1, r2, #1
   18c96:	60f1      	str	r1, [r6, #12]
   18c98:	7853      	ldrb	r3, [r2, #1]
   18c9a:	2b73      	cmp	r3, #115
   18c9c:	d140      	bne.n	18d20 <d_name+0x220>
   18c9e:	1c4a      	adds	r2, r1, #1
   18ca0:	60f2      	str	r2, [r6, #12]
   18ca2:	784b      	ldrb	r3, [r1, #1]
   18ca4:	2b5f      	cmp	r3, #95
   18ca6:	d05d      	beq.n	18d64 <d_name+0x264>
   18ca8:	6971      	ldr	r1, [r6, #20]
   18caa:	69b3      	ldr	r3, [r6, #24]
   18cac:	4299      	cmp	r1, r3
   18cae:	db47      	blt.n	18d40 <d_name+0x240>
   18cb0:	f04f 0c00 	mov.w	ip, #0	; 0x0
   18cb4:	4622      	mov	r2, r4
   18cb6:	4630      	mov	r0, r6
   18cb8:	2102      	movs	r1, #2
   18cba:	4663      	mov	r3, ip
   18cbc:	f7fe fcee 	bl	1769c <d_make_comp>
   18cc0:	4604      	mov	r4, r0
   18cc2:	e738      	b.n	18b36 <d_name+0x36>
   18cc4:	2400      	movs	r4, #0
   18cc6:	e7cb      	b.n	18c60 <d_name+0x160>
   18cc8:	69f3      	ldr	r3, [r6, #28]
   18cca:	462f      	mov	r7, r5
   18ccc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   18cd0:	3201      	adds	r2, #1
   18cd2:	6232      	str	r2, [r6, #32]
   18cd4:	e765      	b.n	18ba2 <d_name+0xa2>
   18cd6:	2c00      	cmp	r4, #0
   18cd8:	f43f af2d 	beq.w	18b36 <d_name+0x36>
   18cdc:	6a32      	ldr	r2, [r6, #32]
   18cde:	6a73      	ldr	r3, [r6, #36]
   18ce0:	429a      	cmp	r2, r3
   18ce2:	f6bf af37 	bge.w	18b54 <d_name+0x54>
   18ce6:	69f3      	ldr	r3, [r6, #28]
   18ce8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   18cec:	3201      	adds	r2, #1
   18cee:	6232      	str	r2, [r6, #32]
   18cf0:	e741      	b.n	18b76 <d_name+0x76>
   18cf2:	2c45      	cmp	r4, #69
   18cf4:	d19b      	bne.n	18c2e <d_name+0x12e>
   18cf6:	f8c8 7000 	str.w	r7, [r8]
   18cfa:	2f00      	cmp	r7, #0
   18cfc:	f43f af2a 	beq.w	18b54 <d_name+0x54>
   18d00:	780b      	ldrb	r3, [r1, #0]
   18d02:	2b45      	cmp	r3, #69
   18d04:	f47f af26 	bne.w	18b54 <d_name+0x54>
   18d08:	1c4b      	adds	r3, r1, #1
   18d0a:	60f3      	str	r3, [r6, #12]
   18d0c:	9c01      	ldr	r4, [sp, #4]
   18d0e:	e712      	b.n	18b36 <d_name+0x36>
   18d10:	2f00      	cmp	r7, #0
   18d12:	d08c      	beq.n	18c2e <d_name+0x12e>
   18d14:	4630      	mov	r0, r6
   18d16:	f7ff feb1 	bl	18a7c <d_template_args>
   18d1a:	2104      	movs	r1, #4
   18d1c:	4605      	mov	r5, r0
   18d1e:	e76d      	b.n	18bfc <d_name+0xfc>
   18d20:	4630      	mov	r0, r6
   18d22:	f7ff feed 	bl	18b00 <d_name>
   18d26:	68f2      	ldr	r2, [r6, #12]
   18d28:	4605      	mov	r5, r0
   18d2a:	7813      	ldrb	r3, [r2, #0]
   18d2c:	2b5f      	cmp	r3, #95
   18d2e:	d022      	beq.n	18d76 <d_name+0x276>
   18d30:	4622      	mov	r2, r4
   18d32:	4630      	mov	r0, r6
   18d34:	2102      	movs	r1, #2
   18d36:	462b      	mov	r3, r5
   18d38:	f7fe fcb0 	bl	1769c <d_make_comp>
   18d3c:	4604      	mov	r4, r0
   18d3e:	e6fa      	b.n	18b36 <d_name+0x36>
   18d40:	008b      	lsls	r3, r1, #2
   18d42:	010a      	lsls	r2, r1, #4
   18d44:	6930      	ldr	r0, [r6, #16]
   18d46:	1ad2      	subs	r2, r2, r3
   18d48:	1c4b      	adds	r3, r1, #1
   18d4a:	eb10 0c02 	adds.w	ip, r0, r2
   18d4e:	6173      	str	r3, [r6, #20]
   18d50:	d0ae      	beq.n	18cb0 <d_name+0x1b0>
   18d52:	2300      	movs	r3, #0
   18d54:	5483      	strb	r3, [r0, r2]
   18d56:	4a0d      	ldr	r2, [pc, #52]	(18d8c <d_name+0x28c>)
   18d58:	330e      	adds	r3, #14
   18d5a:	f8cc 2004 	str.w	r2, [ip, #4]
   18d5e:	f8cc 3008 	str.w	r3, [ip, #8]
   18d62:	e7a7      	b.n	18cb4 <d_name+0x1b4>
   18d64:	1c53      	adds	r3, r2, #1
   18d66:	60f3      	str	r3, [r6, #12]
   18d68:	4630      	mov	r0, r6
   18d6a:	f7fe fce9 	bl	17740 <d_number>
   18d6e:	2800      	cmp	r0, #0
   18d70:	da9a      	bge.n	18ca8 <d_name+0x1a8>
   18d72:	2400      	movs	r4, #0
   18d74:	e6df      	b.n	18b36 <d_name+0x36>
   18d76:	1c53      	adds	r3, r2, #1
   18d78:	60f3      	str	r3, [r6, #12]
   18d7a:	4630      	mov	r0, r6
   18d7c:	f7fe fce0 	bl	17740 <d_number>
   18d80:	2800      	cmp	r0, #0
   18d82:	dad5      	bge.n	18d30 <d_name+0x230>
   18d84:	2400      	movs	r4, #0
   18d86:	e6d6      	b.n	18b36 <d_name+0x36>
   18d88:	00022dec 	.word	0x00022dec
   18d8c:	00022ddc 	.word	0x00022ddc

00018d90 <d_growable_string_callback_adapter>:
   18d90:	6853      	ldr	r3, [r2, #4]
   18d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d96:	4615      	mov	r5, r2
   18d98:	3301      	adds	r3, #1
   18d9a:	68ac      	ldr	r4, [r5, #8]
   18d9c:	eb03 0201 	add.w	r2, r3, r1
   18da0:	42a2      	cmp	r2, r4
   18da2:	4680      	mov	r8, r0
   18da4:	460e      	mov	r6, r1
   18da6:	d811      	bhi.n	18dcc <d_growable_string_callback_adapter+0x3c>
   18da8:	68ec      	ldr	r4, [r5, #12]
   18daa:	b96c      	cbnz	r4, 18dc8 <d_growable_string_callback_adapter+0x38>
   18dac:	686b      	ldr	r3, [r5, #4]
   18dae:	6828      	ldr	r0, [r5, #0]
   18db0:	4641      	mov	r1, r8
   18db2:	18c0      	adds	r0, r0, r3
   18db4:	4632      	mov	r2, r6
   18db6:	f007 fdd9 	bl	2096c <memcpy>
   18dba:	682a      	ldr	r2, [r5, #0]
   18dbc:	6869      	ldr	r1, [r5, #4]
   18dbe:	1992      	adds	r2, r2, r6
   18dc0:	5454      	strb	r4, [r2, r1]
   18dc2:	686b      	ldr	r3, [r5, #4]
   18dc4:	199b      	adds	r3, r3, r6
   18dc6:	606b      	str	r3, [r5, #4]
   18dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18dcc:	68eb      	ldr	r3, [r5, #12]
   18dce:	2b00      	cmp	r3, #0
   18dd0:	d1fa      	bne.n	18dc8 <d_growable_string_callback_adapter+0x38>
   18dd2:	b914      	cbnz	r4, 18dda <d_growable_string_callback_adapter+0x4a>
   18dd4:	2a02      	cmp	r2, #2
   18dd6:	d90c      	bls.n	18df2 <d_growable_string_callback_adapter+0x62>
   18dd8:	2402      	movs	r4, #2
   18dda:	0064      	lsls	r4, r4, #1
   18ddc:	42a2      	cmp	r2, r4
   18dde:	d8fc      	bhi.n	18dda <d_growable_string_callback_adapter+0x4a>
   18de0:	6828      	ldr	r0, [r5, #0]
   18de2:	4621      	mov	r1, r4
   18de4:	f007 fe48 	bl	20a78 <realloc>
   18de8:	4607      	mov	r7, r0
   18dea:	b120      	cbz	r0, 18df6 <d_growable_string_callback_adapter+0x66>
   18dec:	6028      	str	r0, [r5, #0]
   18dee:	60ac      	str	r4, [r5, #8]
   18df0:	e7da      	b.n	18da8 <d_growable_string_callback_adapter+0x18>
   18df2:	3402      	adds	r4, #2
   18df4:	e7f4      	b.n	18de0 <d_growable_string_callback_adapter+0x50>
   18df6:	6828      	ldr	r0, [r5, #0]
   18df8:	f007 fb4a 	bl	20490 <free>
   18dfc:	2301      	movs	r3, #1
   18dfe:	602f      	str	r7, [r5, #0]
   18e00:	606f      	str	r7, [r5, #4]
   18e02:	60af      	str	r7, [r5, #8]
   18e04:	60eb      	str	r3, [r5, #12]
   18e06:	e7df      	b.n	18dc8 <d_growable_string_callback_adapter+0x38>

00018e08 <d_append_buffer>:
   18e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e0c:	4604      	mov	r4, r0
   18e0e:	4688      	mov	r8, r1
   18e10:	4617      	mov	r7, r2
   18e12:	b35a      	cbz	r2, 18e6c <d_append_buffer+0x64>
   18e14:	2500      	movs	r5, #0
   18e16:	f100 0904 	add.w	r9, r0, #4	; 0x4
   18e1a:	46aa      	mov	sl, r5
   18e1c:	e00a      	b.n	18e34 <d_append_buffer+0x2c>
   18e1e:	3501      	adds	r5, #1
   18e20:	1c4a      	adds	r2, r1, #1
   18e22:	eb04 0301 	add.w	r3, r4, r1
   18e26:	42af      	cmp	r7, r5
   18e28:	711e      	strb	r6, [r3, #4]
   18e2a:	f8c4 2104 	str.w	r2, [r4, #260]
   18e2e:	f884 6108 	strb.w	r6, [r4, #264]
   18e32:	d91b      	bls.n	18e6c <d_append_buffer+0x64>
   18e34:	f8d4 1104 	ldr.w	r1, [r4, #260]
   18e38:	f818 6005 	ldrb.w	r6, [r8, r5]
   18e3c:	29ff      	cmp	r1, #255
   18e3e:	d1ee      	bne.n	18e1e <d_append_buffer+0x16>
   18e40:	f8d4 2110 	ldr.w	r2, [r4, #272]
   18e44:	f8d4 310c 	ldr.w	r3, [r4, #268]
   18e48:	f884 a103 	strb.w	sl, [r4, #259]
   18e4c:	4648      	mov	r0, r9
   18e4e:	4798      	blx	r3
   18e50:	3501      	adds	r5, #1
   18e52:	4651      	mov	r1, sl
   18e54:	1c4a      	adds	r2, r1, #1
   18e56:	eb04 0301 	add.w	r3, r4, r1
   18e5a:	42af      	cmp	r7, r5
   18e5c:	f8c4 a104 	str.w	sl, [r4, #260]
   18e60:	711e      	strb	r6, [r3, #4]
   18e62:	f8c4 2104 	str.w	r2, [r4, #260]
   18e66:	f884 6108 	strb.w	r6, [r4, #264]
   18e6a:	d8e3      	bhi.n	18e34 <d_append_buffer+0x2c>
   18e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018e70 <d_append_string>:
   18e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18e74:	4604      	mov	r4, r0
   18e76:	4608      	mov	r0, r1
   18e78:	4688      	mov	r8, r1
   18e7a:	f008 f92d 	bl	210d8 <strlen>
   18e7e:	4607      	mov	r7, r0
   18e80:	b358      	cbz	r0, 18eda <d_append_string+0x6a>
   18e82:	2500      	movs	r5, #0
   18e84:	f104 0904 	add.w	r9, r4, #4	; 0x4
   18e88:	46aa      	mov	sl, r5
   18e8a:	e00a      	b.n	18ea2 <d_append_string+0x32>
   18e8c:	3501      	adds	r5, #1
   18e8e:	1c4a      	adds	r2, r1, #1
   18e90:	eb04 0301 	add.w	r3, r4, r1
   18e94:	42af      	cmp	r7, r5
   18e96:	711e      	strb	r6, [r3, #4]
   18e98:	f8c4 2104 	str.w	r2, [r4, #260]
   18e9c:	f884 6108 	strb.w	r6, [r4, #264]
   18ea0:	d91b      	bls.n	18eda <d_append_string+0x6a>
   18ea2:	f8d4 1104 	ldr.w	r1, [r4, #260]
   18ea6:	f818 6005 	ldrb.w	r6, [r8, r5]
   18eaa:	29ff      	cmp	r1, #255
   18eac:	d1ee      	bne.n	18e8c <d_append_string+0x1c>
   18eae:	f8d4 2110 	ldr.w	r2, [r4, #272]
   18eb2:	f8d4 310c 	ldr.w	r3, [r4, #268]
   18eb6:	f884 a103 	strb.w	sl, [r4, #259]
   18eba:	4648      	mov	r0, r9
   18ebc:	4798      	blx	r3
   18ebe:	3501      	adds	r5, #1
   18ec0:	4651      	mov	r1, sl
   18ec2:	1c4a      	adds	r2, r1, #1
   18ec4:	eb04 0301 	add.w	r3, r4, r1
   18ec8:	42af      	cmp	r7, r5
   18eca:	f8c4 a104 	str.w	sl, [r4, #260]
   18ece:	711e      	strb	r6, [r3, #4]
   18ed0:	f8c4 2104 	str.w	r2, [r4, #260]
   18ed4:	f884 6108 	strb.w	r6, [r4, #264]
   18ed8:	d8e3      	bhi.n	18ea2 <d_append_string+0x32>
   18eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18ede:	46c0      	nop			(mov r8, r8)

00018ee0 <d_print_array_type>:
   18ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ee4:	4605      	mov	r5, r0
   18ee6:	4688      	mov	r8, r1
   18ee8:	4616      	mov	r6, r2
   18eea:	2a00      	cmp	r2, #0
   18eec:	d042      	beq.n	18f74 <d_print_array_type+0x94>
   18eee:	6894      	ldr	r4, [r2, #8]
   18ef0:	b13c      	cbz	r4, 18f02 <d_print_array_type+0x22>
   18ef2:	6812      	ldr	r2, [r2, #0]
   18ef4:	2a00      	cmp	r2, #0
   18ef6:	d1fa      	bne.n	18eee <d_print_array_type+0xe>
   18ef8:	4628      	mov	r0, r5
   18efa:	4631      	mov	r1, r6
   18efc:	f000 fe78 	bl	19bf0 <d_print_mod_list>
   18f00:	e038      	b.n	18f74 <d_print_array_type+0x94>
   18f02:	6853      	ldr	r3, [r2, #4]
   18f04:	781a      	ldrb	r2, [r3, #0]
   18f06:	2a25      	cmp	r2, #37
   18f08:	f000 8085 	beq.w	19016 <d_print_array_type+0x136>
   18f0c:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18f10:	1d2f      	adds	r7, r5, #4
   18f12:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18f16:	f000 8092 	beq.w	1903e <d_print_array_type+0x15e>
   18f1a:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18f1e:	2120      	movs	r1, #32
   18f20:	eb05 030c 	add.w	r3, r5, ip
   18f24:	2aff      	cmp	r2, #255
   18f26:	7119      	strb	r1, [r3, #4]
   18f28:	f8c5 2104 	str.w	r2, [r5, #260]
   18f2c:	f885 1108 	strb.w	r1, [r5, #264]
   18f30:	4694      	mov	ip, r2
   18f32:	f000 8091 	beq.w	19058 <d_print_array_type+0x178>
   18f36:	2128      	movs	r1, #40
   18f38:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18f3c:	eb05 030c 	add.w	r3, r5, ip
   18f40:	7119      	strb	r1, [r3, #4]
   18f42:	f8c5 2104 	str.w	r2, [r5, #260]
   18f46:	f885 1108 	strb.w	r1, [r5, #264]
   18f4a:	2200      	movs	r2, #0
   18f4c:	4628      	mov	r0, r5
   18f4e:	4631      	mov	r1, r6
   18f50:	f000 fe4e 	bl	19bf0 <d_print_mod_list>
   18f54:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18f58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18f5c:	f000 808a 	beq.w	19074 <d_print_array_type+0x194>
   18f60:	2129      	movs	r1, #41
   18f62:	eb05 030c 	add.w	r3, r5, ip
   18f66:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18f6a:	7119      	strb	r1, [r3, #4]
   18f6c:	f8c5 2104 	str.w	r2, [r5, #260]
   18f70:	f885 1108 	strb.w	r1, [r5, #264]
   18f74:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18f78:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18f7c:	d051      	beq.n	19022 <d_print_array_type+0x142>
   18f7e:	2120      	movs	r1, #32
   18f80:	eb05 030c 	add.w	r3, r5, ip
   18f84:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18f88:	7119      	strb	r1, [r3, #4]
   18f8a:	f8c5 2104 	str.w	r2, [r5, #260]
   18f8e:	f885 1108 	strb.w	r1, [r5, #264]
   18f92:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18f96:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18f9a:	d02e      	beq.n	18ffa <d_print_array_type+0x11a>
   18f9c:	215b      	movs	r1, #91
   18f9e:	eb05 030c 	add.w	r3, r5, ip
   18fa2:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18fa6:	7119      	strb	r1, [r3, #4]
   18fa8:	f8c5 2104 	str.w	r2, [r5, #260]
   18fac:	f885 1108 	strb.w	r1, [r5, #264]
   18fb0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   18fb4:	b111      	cbz	r1, 18fbc <d_print_array_type+0xdc>
   18fb6:	4628      	mov	r0, r5
   18fb8:	f000 f86a 	bl	19090 <d_print_comp>
   18fbc:	f8d5 c104 	ldr.w	ip, [r5, #260]
   18fc0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   18fc4:	d00b      	beq.n	18fde <d_print_array_type+0xfe>
   18fc6:	215d      	movs	r1, #93
   18fc8:	eb05 030c 	add.w	r3, r5, ip
   18fcc:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   18fd0:	7119      	strb	r1, [r3, #4]
   18fd2:	f8c5 2104 	str.w	r2, [r5, #260]
   18fd6:	f885 1108 	strb.w	r1, [r5, #264]
   18fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18fde:	2400      	movs	r4, #0
   18fe0:	4661      	mov	r1, ip
   18fe2:	f885 4103 	strb.w	r4, [r5, #259]
   18fe6:	1d28      	adds	r0, r5, #4
   18fe8:	f8d5 2110 	ldr.w	r2, [r5, #272]
   18fec:	f8d5 310c 	ldr.w	r3, [r5, #268]
   18ff0:	4798      	blx	r3
   18ff2:	f8c5 4104 	str.w	r4, [r5, #260]
   18ff6:	46a4      	mov	ip, r4
   18ff8:	e7e5      	b.n	18fc6 <d_print_array_type+0xe6>
   18ffa:	2400      	movs	r4, #0
   18ffc:	4661      	mov	r1, ip
   18ffe:	f885 4103 	strb.w	r4, [r5, #259]
   19002:	1d28      	adds	r0, r5, #4
   19004:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19008:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1900c:	4798      	blx	r3
   1900e:	f8c5 4104 	str.w	r4, [r5, #260]
   19012:	46a4      	mov	ip, r4
   19014:	e7c2      	b.n	18f9c <d_print_array_type+0xbc>
   19016:	4628      	mov	r0, r5
   19018:	4631      	mov	r1, r6
   1901a:	4622      	mov	r2, r4
   1901c:	f000 fde8 	bl	19bf0 <d_print_mod_list>
   19020:	e7b7      	b.n	18f92 <d_print_array_type+0xb2>
   19022:	2400      	movs	r4, #0
   19024:	4661      	mov	r1, ip
   19026:	f885 4103 	strb.w	r4, [r5, #259]
   1902a:	1d28      	adds	r0, r5, #4
   1902c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19030:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19034:	4798      	blx	r3
   19036:	f8c5 4104 	str.w	r4, [r5, #260]
   1903a:	46a4      	mov	ip, r4
   1903c:	e79f      	b.n	18f7e <d_print_array_type+0x9e>
   1903e:	4661      	mov	r1, ip
   19040:	f885 4103 	strb.w	r4, [r5, #259]
   19044:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19048:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1904c:	4638      	mov	r0, r7
   1904e:	4798      	blx	r3
   19050:	f8c5 4104 	str.w	r4, [r5, #260]
   19054:	46a4      	mov	ip, r4
   19056:	e760      	b.n	18f1a <d_print_array_type+0x3a>
   19058:	2400      	movs	r4, #0
   1905a:	4661      	mov	r1, ip
   1905c:	f885 4103 	strb.w	r4, [r5, #259]
   19060:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19064:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19068:	4638      	mov	r0, r7
   1906a:	4798      	blx	r3
   1906c:	f8c5 4104 	str.w	r4, [r5, #260]
   19070:	46a4      	mov	ip, r4
   19072:	e760      	b.n	18f36 <d_print_array_type+0x56>
   19074:	2400      	movs	r4, #0
   19076:	4661      	mov	r1, ip
   19078:	f885 4103 	strb.w	r4, [r5, #259]
   1907c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19080:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19084:	4638      	mov	r0, r7
   19086:	4798      	blx	r3
   19088:	f8c5 4104 	str.w	r4, [r5, #260]
   1908c:	46a4      	mov	ip, r4
   1908e:	e767      	b.n	18f60 <d_print_array_type+0x80>

00019090 <d_print_comp>:
   19090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19094:	4680      	mov	r8, r0
   19096:	b09b      	sub	sp, #108
   19098:	460f      	mov	r7, r1
   1909a:	2900      	cmp	r1, #0
   1909c:	d06e      	beq.n	1917c <d_print_comp+0xec>
   1909e:	f8d0 311c 	ldr.w	r3, [r0, #284]
   190a2:	2b00      	cmp	r3, #0
   190a4:	d167      	bne.n	19176 <d_print_comp+0xe6>
   190a6:	7808      	ldrb	r0, [r1, #0]
   190a8:	2836      	cmp	r0, #54
   190aa:	d867      	bhi.n	1917c <d_print_comp+0xec>
   190ac:	e8df f010 	tbh	[pc, r0, lsl #1]
   190b0:	006a021a 	.word	0x006a021a
   190b4:	0127006a 	.word	0x0127006a
   190b8:	02b9028b 	.word	0x02b9028b
   190bc:	02e00079 	.word	0x02e00079
   190c0:	03a103cc 	.word	0x03a103cc
   190c4:	03d503e7 	.word	0x03d503e7
   190c8:	023b03de 	.word	0x023b03de
   190cc:	024f0245 	.word	0x024f0245
   190d0:	02630259 	.word	0x02630259
   190d4:	0277026d 	.word	0x0277026d
   190d8:	00880281 	.word	0x00880281
   190dc:	01c301c3 	.word	0x01c301c3
   190e0:	031201c3 	.word	0x031201c3
   190e4:	03120312 	.word	0x03120312
   190e8:	03120312 	.word	0x03120312
   190ec:	03120312 	.word	0x03120312
   190f0:	03120312 	.word	0x03120312
   190f4:	0083032d 	.word	0x0083032d
   190f8:	033a01da 	.word	0x033a01da
   190fc:	02e903aa 	.word	0x02e903aa
   19100:	02fb02e9 	.word	0x02fb02e9
   19104:	011d0113 	.word	0x011d0113
   19108:	00a3008e 	.word	0x00a3008e
   1910c:	00df0066 	.word	0x00df0066
   19110:	00660066 	.word	0x00660066
   19114:	00370037 	.word	0x00370037
   19118:	0211007e 	.word	0x0211007e
   1911c:	010e      	.short	0x010e
   1911e:	684a      	ldr	r2, [r1, #4]
   19120:	7813      	ldrb	r3, [r2, #0]
   19122:	2b22      	cmp	r3, #34
   19124:	f040 8402 	bne.w	1992c <d_print_comp+0x89c>
   19128:	6853      	ldr	r3, [r2, #4]
   1912a:	7c1c      	ldrb	r4, [r3, #16]
   1912c:	b12c      	cbz	r4, 1913a <d_print_comp+0xaa>
   1912e:	2c06      	cmp	r4, #6
   19130:	f240 843f 	bls.w	199b2 <d_print_comp+0x922>
   19134:	2c07      	cmp	r4, #7
   19136:	f000 8423 	beq.w	19980 <d_print_comp+0x8f0>
   1913a:	2128      	movs	r1, #40
   1913c:	4640      	mov	r0, r8
   1913e:	f7fe fc91 	bl	17a64 <d_append_char>
   19142:	6879      	ldr	r1, [r7, #4]
   19144:	4640      	mov	r0, r8
   19146:	f7ff ffa3 	bl	19090 <d_print_comp>
   1914a:	2129      	movs	r1, #41
   1914c:	4640      	mov	r0, r8
   1914e:	f7fe fc89 	bl	17a64 <d_append_char>
   19152:	783b      	ldrb	r3, [r7, #0]
   19154:	2b33      	cmp	r3, #51
   19156:	f000 8467 	beq.w	19a28 <d_print_comp+0x998>
   1915a:	2c08      	cmp	r4, #8
   1915c:	d121      	bne.n	191a2 <d_print_comp+0x112>
   1915e:	4640      	mov	r0, r8
   19160:	215b      	movs	r1, #91
   19162:	f7fe fc7f 	bl	17a64 <d_append_char>
   19166:	68b9      	ldr	r1, [r7, #8]
   19168:	4640      	mov	r0, r8
   1916a:	f7ff ff91 	bl	19090 <d_print_comp>
   1916e:	4640      	mov	r0, r8
   19170:	215d      	movs	r1, #93
   19172:	f7fe fc77 	bl	17a64 <d_append_char>
   19176:	b01b      	add	sp, #108
   19178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1917c:	2301      	movs	r3, #1
   1917e:	f8c8 311c 	str.w	r3, [r8, #284]
   19182:	e7f8      	b.n	19176 <d_print_comp+0xe6>
   19184:	6849      	ldr	r1, [r1, #4]
   19186:	4640      	mov	r0, r8
   19188:	f7ff ff82 	bl	19090 <d_print_comp>
   1918c:	f8d8 3000 	ldr.w	r3, [r8]
   19190:	f013 0f04 	tst.w	r3, #4	; 0x4
   19194:	f040 83c5 	bne.w	19922 <d_print_comp+0x892>
   19198:	4640      	mov	r0, r8
   1919a:	f8df 1900 	ldr.w	r1, [pc, #2304]	; 19a9c <d_print_comp+0xa0c>
   1919e:	f7ff fe67 	bl	18e70 <d_append_string>
   191a2:	68b9      	ldr	r1, [r7, #8]
   191a4:	4640      	mov	r0, r8
   191a6:	f7ff ff73 	bl	19090 <d_print_comp>
   191aa:	e7e4      	b.n	19176 <d_print_comp+0xe6>
   191ac:	4640      	mov	r0, r8
   191ae:	f8df 18f0 	ldr.w	r1, [pc, #2288]	; 19aa0 <d_print_comp+0xa10>
   191b2:	f7ff fe5d 	bl	18e70 <d_append_string>
   191b6:	6879      	ldr	r1, [r7, #4]
   191b8:	4640      	mov	r0, r8
   191ba:	f7ff ff69 	bl	19090 <d_print_comp>
   191be:	e7da      	b.n	19176 <d_print_comp+0xe6>
   191c0:	6879      	ldr	r1, [r7, #4]
   191c2:	68ba      	ldr	r2, [r7, #8]
   191c4:	4640      	mov	r0, r8
   191c6:	f7ff fe1f 	bl	18e08 <d_append_buffer>
   191ca:	e7d4      	b.n	19176 <d_print_comp+0xe6>
   191cc:	6849      	ldr	r1, [r1, #4]
   191ce:	780b      	ldrb	r3, [r1, #0]
   191d0:	2b2b      	cmp	r3, #43
   191d2:	f000 83ba 	beq.w	1994a <d_print_comp+0x8ba>
   191d6:	4640      	mov	r0, r8
   191d8:	f000 feda 	bl	19f90 <d_print_expr_op>
   191dc:	2128      	movs	r1, #40
   191de:	4640      	mov	r0, r8
   191e0:	f7fe fc40 	bl	17a64 <d_append_char>
   191e4:	68b9      	ldr	r1, [r7, #8]
   191e6:	4640      	mov	r0, r8
   191e8:	f7ff ff52 	bl	19090 <d_print_comp>
   191ec:	4640      	mov	r0, r8
   191ee:	2129      	movs	r1, #41
   191f0:	f7fe fc38 	bl	17a64 <d_append_char>
   191f4:	e7bf      	b.n	19176 <d_print_comp+0xe6>
   191f6:	688b      	ldr	r3, [r1, #8]
   191f8:	781a      	ldrb	r2, [r3, #0]
   191fa:	2a2e      	cmp	r2, #46
   191fc:	d1be      	bne.n	1917c <d_print_comp+0xec>
   191fe:	684a      	ldr	r2, [r1, #4]
   19200:	7813      	ldrb	r3, [r2, #0]
   19202:	2b29      	cmp	r3, #41
   19204:	f000 8416 	beq.w	19a34 <d_print_comp+0x9a4>
   19208:	2128      	movs	r1, #40
   1920a:	4640      	mov	r0, r8
   1920c:	f7fe fc2a 	bl	17a64 <d_append_char>
   19210:	68bb      	ldr	r3, [r7, #8]
   19212:	4640      	mov	r0, r8
   19214:	6859      	ldr	r1, [r3, #4]
   19216:	f7ff ff3b 	bl	19090 <d_print_comp>
   1921a:	4640      	mov	r0, r8
   1921c:	f8df 1884 	ldr.w	r1, [pc, #2180]	; 19aa4 <d_print_comp+0xa14>
   19220:	f7ff fe26 	bl	18e70 <d_append_string>
   19224:	6879      	ldr	r1, [r7, #4]
   19226:	4640      	mov	r0, r8
   19228:	f000 feb2 	bl	19f90 <d_print_expr_op>
   1922c:	4640      	mov	r0, r8
   1922e:	f8df 1878 	ldr.w	r1, [pc, #2168]	; 19aa8 <d_print_comp+0xa18>
   19232:	f7ff fe1d 	bl	18e70 <d_append_string>
   19236:	68bb      	ldr	r3, [r7, #8]
   19238:	4640      	mov	r0, r8
   1923a:	6899      	ldr	r1, [r3, #8]
   1923c:	f7ff ff28 	bl	19090 <d_print_comp>
   19240:	2129      	movs	r1, #41
   19242:	4640      	mov	r0, r8
   19244:	f7fe fc0e 	bl	17a64 <d_append_char>
   19248:	6879      	ldr	r1, [r7, #4]
   1924a:	f891 c000 	ldrb.w	ip, [r1]
   1924e:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
   19252:	d190      	bne.n	19176 <d_print_comp+0xe6>
   19254:	6849      	ldr	r1, [r1, #4]
   19256:	688b      	ldr	r3, [r1, #8]
   19258:	2b01      	cmp	r3, #1
   1925a:	d18c      	bne.n	19176 <d_print_comp+0xe6>
   1925c:	684b      	ldr	r3, [r1, #4]
   1925e:	781a      	ldrb	r2, [r3, #0]
   19260:	2a3e      	cmp	r2, #62
   19262:	d188      	bne.n	19176 <d_print_comp+0xe6>
   19264:	4640      	mov	r0, r8
   19266:	4661      	mov	r1, ip
   19268:	f7fe fbfc 	bl	17a64 <d_append_char>
   1926c:	e783      	b.n	19176 <d_print_comp+0xe6>
   1926e:	688a      	ldr	r2, [r1, #8]
   19270:	7813      	ldrb	r3, [r2, #0]
   19272:	2b30      	cmp	r3, #48
   19274:	d182      	bne.n	1917c <d_print_comp+0xec>
   19276:	6893      	ldr	r3, [r2, #8]
   19278:	781a      	ldrb	r2, [r3, #0]
   1927a:	2a31      	cmp	r2, #49
   1927c:	f47f af7e 	bne.w	1917c <d_print_comp+0xec>
   19280:	4640      	mov	r0, r8
   19282:	2128      	movs	r1, #40
   19284:	f7fe fbee 	bl	17a64 <d_append_char>
   19288:	68bb      	ldr	r3, [r7, #8]
   1928a:	4640      	mov	r0, r8
   1928c:	6859      	ldr	r1, [r3, #4]
   1928e:	f7ff feff 	bl	19090 <d_print_comp>
   19292:	4640      	mov	r0, r8
   19294:	f8df 180c 	ldr.w	r1, [pc, #2060]	; 19aa4 <d_print_comp+0xa14>
   19298:	f7ff fdea 	bl	18e70 <d_append_string>
   1929c:	6879      	ldr	r1, [r7, #4]
   1929e:	4640      	mov	r0, r8
   192a0:	f000 fe76 	bl	19f90 <d_print_expr_op>
   192a4:	4640      	mov	r0, r8
   192a6:	f8df 1800 	ldr.w	r1, [pc, #2048]	; 19aa8 <d_print_comp+0xa18>
   192aa:	f7ff fde1 	bl	18e70 <d_append_string>
   192ae:	68bb      	ldr	r3, [r7, #8]
   192b0:	4640      	mov	r0, r8
   192b2:	689a      	ldr	r2, [r3, #8]
   192b4:	6851      	ldr	r1, [r2, #4]
   192b6:	f7ff feeb 	bl	19090 <d_print_comp>
   192ba:	f8df 17f0 	ldr.w	r1, [pc, #2032]	; 19aac <d_print_comp+0xa1c>
   192be:	4640      	mov	r0, r8
   192c0:	f7ff fdd6 	bl	18e70 <d_append_string>
   192c4:	68bb      	ldr	r3, [r7, #8]
   192c6:	689a      	ldr	r2, [r3, #8]
   192c8:	6891      	ldr	r1, [r2, #8]
   192ca:	e78c      	b.n	191e6 <d_print_comp+0x156>
   192cc:	7909      	ldrb	r1, [r1, #4]
   192ce:	4640      	mov	r0, r8
   192d0:	f7fe fbc8 	bl	17a64 <d_append_char>
   192d4:	e74f      	b.n	19176 <d_print_comp+0xe6>
   192d6:	4640      	mov	r0, r8
   192d8:	f8df 17d4 	ldr.w	r1, [pc, #2004]	; 19ab0 <d_print_comp+0xa20>
   192dc:	f7ff fdc8 	bl	18e70 <d_append_string>
   192e0:	68b9      	ldr	r1, [r7, #8]
   192e2:	4640      	mov	r0, r8
   192e4:	f7ff fed4 	bl	19090 <d_print_comp>
   192e8:	e745      	b.n	19176 <d_print_comp+0xe6>
   192ea:	4640      	mov	r0, r8
   192ec:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 19ab0 <d_print_comp+0xa20>
   192f0:	f7ff fdbe 	bl	18e70 <d_append_string>
   192f4:	4640      	mov	r0, r8
   192f6:	4639      	mov	r1, r7
   192f8:	f000 fdd6 	bl	19ea8 <d_print_cast>
   192fc:	e73b      	b.n	19176 <d_print_comp+0xe6>
   192fe:	f8d8 3118 	ldr.w	r3, [r8, #280]
   19302:	9302      	str	r3, [sp, #8]
   19304:	684d      	ldr	r5, [r1, #4]
   19306:	2d00      	cmp	r5, #0
   19308:	f43f af38 	beq.w	1917c <d_print_comp+0xec>
   1930c:	7829      	ldrb	r1, [r5, #0]
   1930e:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   19312:	f84b 3d58 	str.w	r3, [fp, #-88]!
   19316:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   1931a:	f8d8 0114 	ldr.w	r0, [r8, #276]
   1931e:	b2db      	uxtb	r3, r3
   19320:	f04f 0c00 	mov.w	ip, #0	; 0x0
   19324:	2b02      	cmp	r3, #2
   19326:	f8c8 b118 	str.w	fp, [r8, #280]
   1932a:	9505      	str	r5, [sp, #20]
   1932c:	f8cd c018 	str.w	ip, [sp, #24]
   19330:	9007      	str	r0, [sp, #28]
   19332:	f200 83a5 	bhi.w	19a80 <d_print_comp+0x9f0>
   19336:	aa08      	add	r2, sp, #32
   19338:	2601      	movs	r6, #1
   1933a:	686d      	ldr	r5, [r5, #4]
   1933c:	2d00      	cmp	r5, #0
   1933e:	f43f af1d 	beq.w	1917c <d_print_comp+0xec>
   19342:	2e04      	cmp	r6, #4
   19344:	f43f af1a 	beq.w	1917c <d_print_comp+0xec>
   19348:	f8d8 3118 	ldr.w	r3, [r8, #280]
   1934c:	7829      	ldrb	r1, [r5, #0]
   1934e:	6013      	str	r3, [r2, #0]
   19350:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   19354:	b2db      	uxtb	r3, r3
   19356:	f8c8 2118 	str.w	r2, [r8, #280]
   1935a:	6055      	str	r5, [r2, #4]
   1935c:	f8c2 c008 	str.w	ip, [r2, #8]
   19360:	60d0      	str	r0, [r2, #12]
   19362:	3601      	adds	r6, #1
   19364:	3210      	adds	r2, #16
   19366:	2b02      	cmp	r3, #2
   19368:	d9e7      	bls.n	1933a <d_print_comp+0x2aa>
   1936a:	2904      	cmp	r1, #4
   1936c:	bf01      	itttt	eq
   1936e:	ab1a      	addeq	r3, sp, #104
   19370:	f843 0d08 	streq.w	r0, [r3, #-8]!
   19374:	f8c8 3114 	streq.w	r3, [r8, #276]
   19378:	9519      	streq	r5, [sp, #100]
   1937a:	d042      	beq.n	19402 <d_print_comp+0x372>
   1937c:	2902      	cmp	r1, #2
   1937e:	d140      	bne.n	19402 <d_print_comp+0x372>
   19380:	f8d5 c008 	ldr.w	ip, [r5, #8]
   19384:	f89c 3000 	ldrb.w	r3, [ip]
   19388:	3b19      	subs	r3, #25
   1938a:	b2db      	uxtb	r3, r3
   1938c:	2b02      	cmp	r3, #2
   1938e:	d838      	bhi.n	19402 <d_print_comp+0x372>
   19390:	2e03      	cmp	r6, #3
   19392:	f63f aef3 	bhi.w	1917c <d_print_comp+0xec>
   19396:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
   1939a:	3b01      	subs	r3, #1
   1939c:	011b      	lsls	r3, r3, #4
   1939e:	1e72      	subs	r2, r6, #1
   193a0:	eb0b 0403 	add.w	r4, fp, r3
   193a4:	0112      	lsls	r2, r2, #4
   193a6:	0133      	lsls	r3, r6, #4
   193a8:	eb0b 0902 	add.w	r9, fp, r2
   193ac:	eb0b 0a03 	add.w	sl, fp, r3
   193b0:	e007      	b.n	193c2 <d_print_comp+0x332>
   193b2:	2e03      	cmp	r6, #3
   193b4:	9c01      	ldr	r4, [sp, #4]
   193b6:	f109 0910 	add.w	r9, r9, #16	; 0x10
   193ba:	f10a 0a10 	add.w	sl, sl, #16	; 0x10
   193be:	f63f aedd 	bhi.w	1917c <d_print_comp+0xec>
   193c2:	f104 0210 	add.w	r2, r4, #16	; 0x10
   193c6:	9201      	str	r2, [sp, #4]
   193c8:	4610      	mov	r0, r2
   193ca:	4621      	mov	r1, r4
   193cc:	2210      	movs	r2, #16
   193ce:	f8cd c000 	str.w	ip, [sp]
   193d2:	f007 facb 	bl	2096c <memcpy>
   193d6:	2300      	movs	r3, #0
   193d8:	f8dd c000 	ldr.w	ip, [sp]
   193dc:	60a3      	str	r3, [r4, #8]
   193de:	f8d8 3114 	ldr.w	r3, [r8, #276]
   193e2:	f8c4 9010 	str.w	r9, [r4, #16]
   193e6:	60e3      	str	r3, [r4, #12]
   193e8:	f8c8 a118 	str.w	sl, [r8, #280]
   193ec:	f8c4 c004 	str.w	ip, [r4, #4]
   193f0:	f8dc c004 	ldr.w	ip, [ip, #4]
   193f4:	3601      	adds	r6, #1
   193f6:	f89c 3000 	ldrb.w	r3, [ip]
   193fa:	3b19      	subs	r3, #25
   193fc:	b2db      	uxtb	r3, r3
   193fe:	2b02      	cmp	r3, #2
   19400:	d9d7      	bls.n	193b2 <d_print_comp+0x322>
   19402:	68b9      	ldr	r1, [r7, #8]
   19404:	4640      	mov	r0, r8
   19406:	f7ff fe43 	bl	19090 <d_print_comp>
   1940a:	782b      	ldrb	r3, [r5, #0]
   1940c:	2b04      	cmp	r3, #4
   1940e:	bf04      	itt	eq
   19410:	9b18      	ldreq	r3, [sp, #96]
   19412:	f8c8 3114 	streq.w	r3, [r8, #276]
   19416:	b156      	cbz	r6, 1942e <d_print_comp+0x39e>
   19418:	0133      	lsls	r3, r6, #4
   1941a:	eb0b 0403 	add.w	r4, fp, r3
   1941e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   19422:	2b00      	cmp	r3, #0
   19424:	f000 82a2 	beq.w	1996c <d_print_comp+0x8dc>
   19428:	3c10      	subs	r4, #16
   1942a:	455c      	cmp	r4, fp
   1942c:	d1f7      	bne.n	1941e <d_print_comp+0x38e>
   1942e:	9a02      	ldr	r2, [sp, #8]
   19430:	f8c8 2118 	str.w	r2, [r8, #280]
   19434:	e69f      	b.n	19176 <d_print_comp+0xe6>
   19436:	f8d8 4118 	ldr.w	r4, [r8, #280]
   1943a:	2c00      	cmp	r4, #0
   1943c:	f000 814c 	beq.w	196d8 <d_print_comp+0x648>
   19440:	4621      	mov	r1, r4
   19442:	688b      	ldr	r3, [r1, #8]
   19444:	b953      	cbnz	r3, 1945c <d_print_comp+0x3cc>
   19446:	684a      	ldr	r2, [r1, #4]
   19448:	7812      	ldrb	r2, [r2, #0]
   1944a:	f1a2 0316 	sub.w	r3, r2, #22	; 0x16
   1944e:	b2db      	uxtb	r3, r3
   19450:	2b02      	cmp	r3, #2
   19452:	f200 8141 	bhi.w	196d8 <d_print_comp+0x648>
   19456:	4290      	cmp	r0, r2
   19458:	f43f aead 	beq.w	191b6 <d_print_comp+0x126>
   1945c:	6809      	ldr	r1, [r1, #0]
   1945e:	2900      	cmp	r1, #0
   19460:	d1ef      	bne.n	19442 <d_print_comp+0x3b2>
   19462:	e139      	b.n	196d8 <d_print_comp+0x648>
   19464:	f8d8 3000 	ldr.w	r3, [r8]
   19468:	f013 0f20 	tst.w	r3, #32	; 0x20
   1946c:	f040 8267 	bne.w	1993e <d_print_comp+0x8ae>
   19470:	687b      	ldr	r3, [r7, #4]
   19472:	b30b      	cbz	r3, 194b8 <d_print_comp+0x428>
   19474:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19478:	ab1a      	add	r3, sp, #104
   1947a:	f843 2d18 	str.w	r2, [r3, #-24]!
   1947e:	f8d8 2114 	ldr.w	r2, [r8, #276]
   19482:	f8c8 3118 	str.w	r3, [r8, #280]
   19486:	2300      	movs	r3, #0
   19488:	9316      	str	r3, [sp, #88]
   1948a:	9217      	str	r2, [sp, #92]
   1948c:	9715      	str	r7, [sp, #84]
   1948e:	6879      	ldr	r1, [r7, #4]
   19490:	4640      	mov	r0, r8
   19492:	f7ff fdfd 	bl	19090 <d_print_comp>
   19496:	9b14      	ldr	r3, [sp, #80]
   19498:	9a16      	ldr	r2, [sp, #88]
   1949a:	f8c8 3118 	str.w	r3, [r8, #280]
   1949e:	2a00      	cmp	r2, #0
   194a0:	f47f ae69 	bne.w	19176 <d_print_comp+0xe6>
   194a4:	f8d8 3000 	ldr.w	r3, [r8]
   194a8:	f013 0f20 	tst.w	r3, #32	; 0x20
   194ac:	f47f ae63 	bne.w	19176 <d_print_comp+0xe6>
   194b0:	4640      	mov	r0, r8
   194b2:	2120      	movs	r1, #32
   194b4:	f7fe fad6 	bl	17a64 <d_append_char>
   194b8:	f8d8 3000 	ldr.w	r3, [r8]
   194bc:	f013 0f20 	tst.w	r3, #32	; 0x20
   194c0:	f47f ae59 	bne.w	19176 <d_print_comp+0xe6>
   194c4:	f8d8 2118 	ldr.w	r2, [r8, #280]
   194c8:	4640      	mov	r0, r8
   194ca:	4639      	mov	r1, r7
   194cc:	f000 fbfe 	bl	19ccc <d_print_function_type>
   194d0:	e651      	b.n	19176 <d_print_comp+0xe6>
   194d2:	4640      	mov	r0, r8
   194d4:	6849      	ldr	r1, [r1, #4]
   194d6:	f7ff fddb 	bl	19090 <d_print_comp>
   194da:	68b9      	ldr	r1, [r7, #8]
   194dc:	4640      	mov	r0, r8
   194de:	f7ff fdd7 	bl	19090 <d_print_comp>
   194e2:	e648      	b.n	19176 <d_print_comp+0xe6>
   194e4:	f8d8 3000 	ldr.w	r3, [r8]
   194e8:	f013 0f04 	tst.w	r3, #4	; 0x4
   194ec:	f43f ae68 	beq.w	191c0 <d_print_comp+0x130>
   194f0:	684a      	ldr	r2, [r1, #4]
   194f2:	688b      	ldr	r3, [r1, #8]
   194f4:	eb02 0503 	add.w	r5, r2, r3
   194f8:	42aa      	cmp	r2, r5
   194fa:	d30c      	bcc.n	19516 <d_print_comp+0x486>
   194fc:	e63b      	b.n	19176 <d_print_comp+0xe6>
   194fe:	7811      	ldrb	r1, [r2, #0]
   19500:	295f      	cmp	r1, #95
   19502:	f000 81cd 	beq.w	198a0 <d_print_comp+0x810>
   19506:	1c54      	adds	r4, r2, #1
   19508:	4640      	mov	r0, r8
   1950a:	f7fe faab 	bl	17a64 <d_append_char>
   1950e:	42a5      	cmp	r5, r4
   19510:	f67f ae31 	bls.w	19176 <d_print_comp+0xe6>
   19514:	4622      	mov	r2, r4
   19516:	ebc2 0305 	rsb	r3, r2, r5
   1951a:	2b03      	cmp	r3, #3
   1951c:	dcef      	bgt.n	194fe <d_print_comp+0x46e>
   1951e:	4614      	mov	r4, r2
   19520:	f814 1b01 	ldrb.w	r1, [r4], #1
   19524:	e7f0      	b.n	19508 <d_print_comp+0x478>
   19526:	4640      	mov	r0, r8
   19528:	f8df 1588 	ldr.w	r1, [pc, #1416]	; 19ab4 <d_print_comp+0xa24>
   1952c:	f7ff fca0 	bl	18e70 <d_append_string>
   19530:	6879      	ldr	r1, [r7, #4]
   19532:	4640      	mov	r0, r8
   19534:	f7ff fdac 	bl	19090 <d_print_comp>
   19538:	e61d      	b.n	19176 <d_print_comp+0xe6>
   1953a:	4640      	mov	r0, r8
   1953c:	f8df 1578 	ldr.w	r1, [pc, #1400]	; 19ab8 <d_print_comp+0xa28>
   19540:	f7ff fc96 	bl	18e70 <d_append_string>
   19544:	6879      	ldr	r1, [r7, #4]
   19546:	4640      	mov	r0, r8
   19548:	f7ff fda2 	bl	19090 <d_print_comp>
   1954c:	e613      	b.n	19176 <d_print_comp+0xe6>
   1954e:	4640      	mov	r0, r8
   19550:	f8df 1568 	ldr.w	r1, [pc, #1384]	; 19abc <d_print_comp+0xa2c>
   19554:	f7ff fc8c 	bl	18e70 <d_append_string>
   19558:	6879      	ldr	r1, [r7, #4]
   1955a:	4640      	mov	r0, r8
   1955c:	f7ff fd98 	bl	19090 <d_print_comp>
   19560:	e609      	b.n	19176 <d_print_comp+0xe6>
   19562:	4640      	mov	r0, r8
   19564:	f8df 1558 	ldr.w	r1, [pc, #1368]	; 19ac0 <d_print_comp+0xa30>
   19568:	f7ff fc82 	bl	18e70 <d_append_string>
   1956c:	6879      	ldr	r1, [r7, #4]
   1956e:	4640      	mov	r0, r8
   19570:	f7ff fd8e 	bl	19090 <d_print_comp>
   19574:	e5ff      	b.n	19176 <d_print_comp+0xe6>
   19576:	4640      	mov	r0, r8
   19578:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 19ac4 <d_print_comp+0xa34>
   1957c:	f7ff fc78 	bl	18e70 <d_append_string>
   19580:	6879      	ldr	r1, [r7, #4]
   19582:	4640      	mov	r0, r8
   19584:	f7ff fd84 	bl	19090 <d_print_comp>
   19588:	e5f5      	b.n	19176 <d_print_comp+0xe6>
   1958a:	4640      	mov	r0, r8
   1958c:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 19ac8 <d_print_comp+0xa38>
   19590:	f7ff fc6e 	bl	18e70 <d_append_string>
   19594:	6879      	ldr	r1, [r7, #4]
   19596:	4640      	mov	r0, r8
   19598:	f7ff fd7a 	bl	19090 <d_print_comp>
   1959c:	e5eb      	b.n	19176 <d_print_comp+0xe6>
   1959e:	4640      	mov	r0, r8
   195a0:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 19acc <d_print_comp+0xa3c>
   195a4:	f7ff fc64 	bl	18e70 <d_append_string>
   195a8:	6879      	ldr	r1, [r7, #4]
   195aa:	4640      	mov	r0, r8
   195ac:	f7ff fd70 	bl	19090 <d_print_comp>
   195b0:	e5e1      	b.n	19176 <d_print_comp+0xe6>
   195b2:	4640      	mov	r0, r8
   195b4:	f8df 1518 	ldr.w	r1, [pc, #1304]	; 19ad0 <d_print_comp+0xa40>
   195b8:	f7ff fc5a 	bl	18e70 <d_append_string>
   195bc:	6879      	ldr	r1, [r7, #4]
   195be:	4640      	mov	r0, r8
   195c0:	f7ff fd66 	bl	19090 <d_print_comp>
   195c4:	e5d7      	b.n	19176 <d_print_comp+0xe6>
   195c6:	2300      	movs	r3, #0
   195c8:	f8d8 5118 	ldr.w	r5, [r8, #280]
   195cc:	f8c8 3118 	str.w	r3, [r8, #280]
   195d0:	f8d8 3000 	ldr.w	r3, [r8]
   195d4:	684c      	ldr	r4, [r1, #4]
   195d6:	f013 0f04 	tst.w	r3, #4	; 0x4
   195da:	d005      	beq.n	195e8 <d_print_comp+0x558>
   195dc:	7823      	ldrb	r3, [r4, #0]
   195de:	b91b      	cbnz	r3, 195e8 <d_print_comp+0x558>
   195e0:	68a2      	ldr	r2, [r4, #8]
   195e2:	2a06      	cmp	r2, #6
   195e4:	f000 8239 	beq.w	19a5a <d_print_comp+0x9ca>
   195e8:	4640      	mov	r0, r8
   195ea:	4621      	mov	r1, r4
   195ec:	f7ff fd50 	bl	19090 <d_print_comp>
   195f0:	f898 3108 	ldrb.w	r3, [r8, #264]
   195f4:	2b3c      	cmp	r3, #60
   195f6:	f000 8212 	beq.w	19a1e <d_print_comp+0x98e>
   195fa:	213c      	movs	r1, #60
   195fc:	4640      	mov	r0, r8
   195fe:	f7fe fa31 	bl	17a64 <d_append_char>
   19602:	68b9      	ldr	r1, [r7, #8]
   19604:	4640      	mov	r0, r8
   19606:	f7ff fd43 	bl	19090 <d_print_comp>
   1960a:	f898 3108 	ldrb.w	r3, [r8, #264]
   1960e:	2b3e      	cmp	r3, #62
   19610:	f000 8200 	beq.w	19a14 <d_print_comp+0x984>
   19614:	4640      	mov	r0, r8
   19616:	213e      	movs	r1, #62
   19618:	f7fe fa24 	bl	17a64 <d_append_char>
   1961c:	f8c8 5118 	str.w	r5, [r8, #280]
   19620:	e5a9      	b.n	19176 <d_print_comp+0xe6>
   19622:	f8d8 4114 	ldr.w	r4, [r8, #276]
   19626:	2c00      	cmp	r4, #0
   19628:	f43f ada8 	beq.w	1917c <d_print_comp+0xec>
   1962c:	6863      	ldr	r3, [r4, #4]
   1962e:	6849      	ldr	r1, [r1, #4]
   19630:	689a      	ldr	r2, [r3, #8]
   19632:	2a00      	cmp	r2, #0
   19634:	f43f ada2 	beq.w	1917c <d_print_comp+0xec>
   19638:	7813      	ldrb	r3, [r2, #0]
   1963a:	2b28      	cmp	r3, #40
   1963c:	d009      	beq.n	19652 <d_print_comp+0x5c2>
   1963e:	e59d      	b.n	1917c <d_print_comp+0xec>
   19640:	6892      	ldr	r2, [r2, #8]
   19642:	2a00      	cmp	r2, #0
   19644:	f43f ad9a 	beq.w	1917c <d_print_comp+0xec>
   19648:	7813      	ldrb	r3, [r2, #0]
   1964a:	2b28      	cmp	r3, #40
   1964c:	f47f ad96 	bne.w	1917c <d_print_comp+0xec>
   19650:	3901      	subs	r1, #1
   19652:	2900      	cmp	r1, #0
   19654:	dcf4      	bgt.n	19640 <d_print_comp+0x5b0>
   19656:	2900      	cmp	r1, #0
   19658:	f47f ad90 	bne.w	1917c <d_print_comp+0xec>
   1965c:	6823      	ldr	r3, [r4, #0]
   1965e:	4640      	mov	r0, r8
   19660:	f8c8 3114 	str.w	r3, [r8, #276]
   19664:	6851      	ldr	r1, [r2, #4]
   19666:	f7ff fd13 	bl	19090 <d_print_comp>
   1966a:	f8c8 4114 	str.w	r4, [r8, #276]
   1966e:	e582      	b.n	19176 <d_print_comp+0xe6>
   19670:	4640      	mov	r0, r8
   19672:	217e      	movs	r1, #126
   19674:	f7fe f9f6 	bl	17a64 <d_append_char>
   19678:	68b9      	ldr	r1, [r7, #8]
   1967a:	4640      	mov	r0, r8
   1967c:	f7ff fd08 	bl	19090 <d_print_comp>
   19680:	e579      	b.n	19176 <d_print_comp+0xe6>
   19682:	6849      	ldr	r1, [r1, #4]
   19684:	4640      	mov	r0, r8
   19686:	f7ff fd03 	bl	19090 <d_print_comp>
   1968a:	68bb      	ldr	r3, [r7, #8]
   1968c:	2b00      	cmp	r3, #0
   1968e:	f43f ad72 	beq.w	19176 <d_print_comp+0xe6>
   19692:	4640      	mov	r0, r8
   19694:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 19ad4 <d_print_comp+0xa44>
   19698:	f7ff fbea 	bl	18e70 <d_append_string>
   1969c:	68b9      	ldr	r1, [r7, #8]
   1969e:	4640      	mov	r0, r8
   196a0:	f7ff fcf6 	bl	19090 <d_print_comp>
   196a4:	e567      	b.n	19176 <d_print_comp+0xe6>
   196a6:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 19ad8 <d_print_comp+0xa48>
   196aa:	4640      	mov	r0, r8
   196ac:	f7ff fbe0 	bl	18e70 <d_append_string>
   196b0:	687a      	ldr	r2, [r7, #4]
   196b2:	6851      	ldr	r1, [r2, #4]
   196b4:	780b      	ldrb	r3, [r1, #0]
   196b6:	3b61      	subs	r3, #97
   196b8:	b2db      	uxtb	r3, r3
   196ba:	2b19      	cmp	r3, #25
   196bc:	d805      	bhi.n	196ca <d_print_comp+0x63a>
   196be:	2120      	movs	r1, #32
   196c0:	4640      	mov	r0, r8
   196c2:	f7fe f9cf 	bl	17a64 <d_append_char>
   196c6:	687a      	ldr	r2, [r7, #4]
   196c8:	6851      	ldr	r1, [r2, #4]
   196ca:	6892      	ldr	r2, [r2, #8]
   196cc:	4640      	mov	r0, r8
   196ce:	f7ff fb9b 	bl	18e08 <d_append_buffer>
   196d2:	e550      	b.n	19176 <d_print_comp+0xe6>
   196d4:	f8d8 4118 	ldr.w	r4, [r8, #280]
   196d8:	ab1a      	add	r3, sp, #104
   196da:	f843 4d18 	str.w	r4, [r3, #-24]!
   196de:	f8d8 2114 	ldr.w	r2, [r8, #276]
   196e2:	f8c8 3118 	str.w	r3, [r8, #280]
   196e6:	2300      	movs	r3, #0
   196e8:	9316      	str	r3, [sp, #88]
   196ea:	9715      	str	r7, [sp, #84]
   196ec:	9217      	str	r2, [sp, #92]
   196ee:	6879      	ldr	r1, [r7, #4]
   196f0:	4640      	mov	r0, r8
   196f2:	f7ff fccd 	bl	19090 <d_print_comp>
   196f6:	9b16      	ldr	r3, [sp, #88]
   196f8:	b91b      	cbnz	r3, 19702 <d_print_comp+0x672>
   196fa:	4640      	mov	r0, r8
   196fc:	4639      	mov	r1, r7
   196fe:	f000 fa09 	bl	19b14 <d_print_mod>
   19702:	9b14      	ldr	r3, [sp, #80]
   19704:	f8c8 3118 	str.w	r3, [r8, #280]
   19708:	e535      	b.n	19176 <d_print_comp+0xe6>
   1970a:	f8d8 3000 	ldr.w	r3, [r8]
   1970e:	f013 0f04 	tst.w	r3, #4	; 0x4
   19712:	f040 810d 	bne.w	19930 <d_print_comp+0x8a0>
   19716:	684b      	ldr	r3, [r1, #4]
   19718:	4640      	mov	r0, r8
   1971a:	6819      	ldr	r1, [r3, #0]
   1971c:	685a      	ldr	r2, [r3, #4]
   1971e:	f7ff fb73 	bl	18e08 <d_append_buffer>
   19722:	e528      	b.n	19176 <d_print_comp+0xe6>
   19724:	f8d8 9118 	ldr.w	r9, [r8, #280]
   19728:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1972c:	f8cd 900c 	str.w	r9, [sp, #12]
   19730:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   19734:	9207      	str	r2, [sp, #28]
   19736:	9a03      	ldr	r2, [sp, #12]
   19738:	f84b 9d58 	str.w	r9, [fp, #-88]!
   1973c:	2300      	movs	r3, #0
   1973e:	46d9      	mov	r9, fp
   19740:	f8c8 b118 	str.w	fp, [r8, #280]
   19744:	9105      	str	r1, [sp, #20]
   19746:	9306      	str	r3, [sp, #24]
   19748:	2a00      	cmp	r2, #0
   1974a:	f000 8183 	beq.w	19a54 <d_print_comp+0x9c4>
   1974e:	6852      	ldr	r2, [r2, #4]
   19750:	7813      	ldrb	r3, [r2, #0]
   19752:	3b16      	subs	r3, #22
   19754:	b2db      	uxtb	r3, r3
   19756:	2b02      	cmp	r3, #2
   19758:	f200 817c 	bhi.w	19a54 <d_print_comp+0x9c4>
   1975c:	9e03      	ldr	r6, [sp, #12]
   1975e:	f04f 0a01 	mov.w	sl, #1	; 0x1
   19762:	e005      	b.n	19770 <d_print_comp+0x6e0>
   19764:	6872      	ldr	r2, [r6, #4]
   19766:	7813      	ldrb	r3, [r2, #0]
   19768:	3b16      	subs	r3, #22
   1976a:	b2db      	uxtb	r3, r3
   1976c:	2b02      	cmp	r3, #2
   1976e:	d81c      	bhi.n	197aa <d_print_comp+0x71a>
   19770:	68b3      	ldr	r3, [r6, #8]
   19772:	b9bb      	cbnz	r3, 197a4 <d_print_comp+0x714>
   19774:	f1ba 0f03 	cmp.w	sl, #3	; 0x3
   19778:	f200 80f4 	bhi.w	19964 <d_print_comp+0x8d4>
   1977c:	ea4f 150a 	mov.w	r5, sl, lsl #4
   19780:	ab1a      	add	r3, sp, #104
   19782:	eb03 0405 	add.w	r4, r3, r5
   19786:	f1a4 0c58 	sub.w	ip, r4, #88	; 0x58
   1978a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1978e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   19792:	f844 9c58 	str.w	r9, [r4, #-88]
   19796:	2201      	movs	r2, #1
   19798:	eb0b 0905 	add.w	r9, fp, r5
   1979c:	f8c8 9118 	str.w	r9, [r8, #280]
   197a0:	60b2      	str	r2, [r6, #8]
   197a2:	4492      	add	sl, r2
   197a4:	6836      	ldr	r6, [r6, #0]
   197a6:	2e00      	cmp	r6, #0
   197a8:	d1dc      	bne.n	19764 <d_print_comp+0x6d4>
   197aa:	68b9      	ldr	r1, [r7, #8]
   197ac:	4640      	mov	r0, r8
   197ae:	f7ff fc6f 	bl	19090 <d_print_comp>
   197b2:	9b03      	ldr	r3, [sp, #12]
   197b4:	f8c8 3118 	str.w	r3, [r8, #280]
   197b8:	9b06      	ldr	r3, [sp, #24]
   197ba:	2b00      	cmp	r3, #0
   197bc:	f47f acdb 	bne.w	19176 <d_print_comp+0xe6>
   197c0:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   197c4:	d00e      	beq.n	197e4 <d_print_comp+0x754>
   197c6:	ea4f 130a 	mov.w	r3, sl, lsl #4
   197ca:	eb0b 0403 	add.w	r4, fp, r3
   197ce:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   197d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   197d6:	4640      	mov	r0, r8
   197d8:	f000 f99c 	bl	19b14 <d_print_mod>
   197dc:	3c10      	subs	r4, #16
   197de:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   197e2:	d8f4      	bhi.n	197ce <d_print_comp+0x73e>
   197e4:	f8d8 2118 	ldr.w	r2, [r8, #280]
   197e8:	4640      	mov	r0, r8
   197ea:	4639      	mov	r1, r7
   197ec:	f7ff fb78 	bl	18ee0 <d_print_array_type>
   197f0:	e4c1      	b.n	19176 <d_print_comp+0xe6>
   197f2:	4640      	mov	r0, r8
   197f4:	49b9      	ldr	r1, [pc, #740]	(19adc <d_print_comp+0xa4c>)
   197f6:	f7ff fb3b 	bl	18e70 <d_append_string>
   197fa:	6879      	ldr	r1, [r7, #4]
   197fc:	4640      	mov	r0, r8
   197fe:	f7ff fc47 	bl	19090 <d_print_comp>
   19802:	e4b8      	b.n	19176 <d_print_comp+0xe6>
   19804:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19808:	ab1a      	add	r3, sp, #104
   1980a:	f843 2d18 	str.w	r2, [r3, #-24]!
   1980e:	f8d8 2114 	ldr.w	r2, [r8, #276]
   19812:	f8c8 3118 	str.w	r3, [r8, #280]
   19816:	2300      	movs	r3, #0
   19818:	9316      	str	r3, [sp, #88]
   1981a:	9115      	str	r1, [sp, #84]
   1981c:	9217      	str	r2, [sp, #92]
   1981e:	6889      	ldr	r1, [r1, #8]
   19820:	4640      	mov	r0, r8
   19822:	f7ff fc35 	bl	19090 <d_print_comp>
   19826:	9b16      	ldr	r3, [sp, #88]
   19828:	2b00      	cmp	r3, #0
   1982a:	f47f af6a 	bne.w	19702 <d_print_comp+0x672>
   1982e:	4640      	mov	r0, r8
   19830:	2120      	movs	r1, #32
   19832:	f7fe f917 	bl	17a64 <d_append_char>
   19836:	6879      	ldr	r1, [r7, #4]
   19838:	4640      	mov	r0, r8
   1983a:	f7ff fc29 	bl	19090 <d_print_comp>
   1983e:	4640      	mov	r0, r8
   19840:	49a7      	ldr	r1, [pc, #668]	(19ae0 <d_print_comp+0xa50>)
   19842:	f7ff fb15 	bl	18e70 <d_append_string>
   19846:	e75c      	b.n	19702 <d_print_comp+0x672>
   19848:	4640      	mov	r0, r8
   1984a:	49a6      	ldr	r1, [pc, #664]	(19ae4 <d_print_comp+0xa54>)
   1984c:	f7ff fb10 	bl	18e70 <d_append_string>
   19850:	6879      	ldr	r1, [r7, #4]
   19852:	4640      	mov	r0, r8
   19854:	f7ff fc1c 	bl	19090 <d_print_comp>
   19858:	e48d      	b.n	19176 <d_print_comp+0xe6>
   1985a:	4640      	mov	r0, r8
   1985c:	49a2      	ldr	r1, [pc, #648]	(19ae8 <d_print_comp+0xa58>)
   1985e:	f7ff fb07 	bl	18e70 <d_append_string>
   19862:	6879      	ldr	r1, [r7, #4]
   19864:	4640      	mov	r0, r8
   19866:	f7ff fc13 	bl	19090 <d_print_comp>
   1986a:	e484      	b.n	19176 <d_print_comp+0xe6>
   1986c:	4640      	mov	r0, r8
   1986e:	499f      	ldr	r1, [pc, #636]	(19aec <d_print_comp+0xa5c>)
   19870:	f7ff fafe 	bl	18e70 <d_append_string>
   19874:	6879      	ldr	r1, [r7, #4]
   19876:	4640      	mov	r0, r8
   19878:	f7ff fc0a 	bl	19090 <d_print_comp>
   1987c:	e47b      	b.n	19176 <d_print_comp+0xe6>
   1987e:	4640      	mov	r0, r8
   19880:	499b      	ldr	r1, [pc, #620]	(19af0 <d_print_comp+0xa60>)
   19882:	f7ff faf5 	bl	18e70 <d_append_string>
   19886:	6879      	ldr	r1, [r7, #4]
   19888:	4640      	mov	r0, r8
   1988a:	f7ff fc01 	bl	19090 <d_print_comp>
   1988e:	4640      	mov	r0, r8
   19890:	4998      	ldr	r1, [pc, #608]	(19af4 <d_print_comp+0xa64>)
   19892:	f7ff faed 	bl	18e70 <d_append_string>
   19896:	68b9      	ldr	r1, [r7, #8]
   19898:	4640      	mov	r0, r8
   1989a:	f7ff fbf9 	bl	19090 <d_print_comp>
   1989e:	e46a      	b.n	19176 <d_print_comp+0xe6>
   198a0:	7853      	ldrb	r3, [r2, #1]
   198a2:	1c54      	adds	r4, r2, #1
   198a4:	2b5f      	cmp	r3, #95
   198a6:	f47f ae2f 	bne.w	19508 <d_print_comp+0x478>
   198aa:	7893      	ldrb	r3, [r2, #2]
   198ac:	2b55      	cmp	r3, #85
   198ae:	f47f ae2b 	bne.w	19508 <d_print_comp+0x478>
   198b2:	1cd6      	adds	r6, r2, #3
   198b4:	42b5      	cmp	r5, r6
   198b6:	f67f ae27 	bls.w	19508 <d_print_comp+0x478>
   198ba:	f04f 0c00 	mov.w	ip, #0	; 0x0
   198be:	e009      	b.n	198d4 <d_print_comp+0x844>
   198c0:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
   198c4:	3601      	adds	r6, #1
   198c6:	42b5      	cmp	r5, r6
   198c8:	f67f ae1e 	bls.w	19508 <d_print_comp+0x478>
   198cc:	ea4f 130c 	mov.w	r3, ip, lsl #4
   198d0:	eb02 0c03 	add.w	ip, r2, r3
   198d4:	7830      	ldrb	r0, [r6, #0]
   198d6:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   198da:	b2d3      	uxtb	r3, r2
   198dc:	2b09      	cmp	r3, #9
   198de:	d9f1      	bls.n	198c4 <d_print_comp+0x834>
   198e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   198e4:	b2db      	uxtb	r3, r3
   198e6:	2b05      	cmp	r3, #5
   198e8:	bf98      	it	ls
   198ea:	f1a0 0237 	subls.w	r2, r0, #55	; 0x37
   198ee:	d9e9      	bls.n	198c4 <d_print_comp+0x834>
   198f0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   198f4:	b2db      	uxtb	r3, r3
   198f6:	2b05      	cmp	r3, #5
   198f8:	d9e2      	bls.n	198c0 <d_print_comp+0x830>
   198fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   198fe:	bf8c      	ite	hi
   19900:	2300      	movhi	r3, #0
   19902:	2301      	movls	r3, #1
   19904:	285f      	cmp	r0, #95
   19906:	bf14      	ite	ne
   19908:	2300      	movne	r3, #0
   1990a:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   1990e:	2b00      	cmp	r3, #0
   19910:	f43f adfa 	beq.w	19508 <d_print_comp+0x478>
   19914:	fa5f f18c 	uxtb.w	r1, ip
   19918:	4640      	mov	r0, r8
   1991a:	f7fe f8a3 	bl	17a64 <d_append_char>
   1991e:	1c74      	adds	r4, r6, #1
   19920:	e5f5      	b.n	1950e <d_print_comp+0x47e>
   19922:	4640      	mov	r0, r8
   19924:	212e      	movs	r1, #46
   19926:	f7fe f89d 	bl	17a64 <d_append_char>
   1992a:	e43a      	b.n	191a2 <d_print_comp+0x112>
   1992c:	2400      	movs	r4, #0
   1992e:	e404      	b.n	1913a <d_print_comp+0xaa>
   19930:	684b      	ldr	r3, [r1, #4]
   19932:	4640      	mov	r0, r8
   19934:	6899      	ldr	r1, [r3, #8]
   19936:	68da      	ldr	r2, [r3, #12]
   19938:	f7ff fa66 	bl	18e08 <d_append_buffer>
   1993c:	e41b      	b.n	19176 <d_print_comp+0xe6>
   1993e:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19942:	4640      	mov	r0, r8
   19944:	f000 f9c2 	bl	19ccc <d_print_function_type>
   19948:	e592      	b.n	19470 <d_print_comp+0x3e0>
   1994a:	4640      	mov	r0, r8
   1994c:	2128      	movs	r1, #40
   1994e:	f7fe f889 	bl	17a64 <d_append_char>
   19952:	6879      	ldr	r1, [r7, #4]
   19954:	4640      	mov	r0, r8
   19956:	f000 faa7 	bl	19ea8 <d_print_cast>
   1995a:	4640      	mov	r0, r8
   1995c:	2129      	movs	r1, #41
   1995e:	f7fe f881 	bl	17a64 <d_append_char>
   19962:	e43b      	b.n	191dc <d_print_comp+0x14c>
   19964:	3301      	adds	r3, #1
   19966:	f8c8 311c 	str.w	r3, [r8, #284]
   1996a:	e404      	b.n	19176 <d_print_comp+0xe6>
   1996c:	4640      	mov	r0, r8
   1996e:	2120      	movs	r1, #32
   19970:	f7fe f878 	bl	17a64 <d_append_char>
   19974:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   19978:	4640      	mov	r0, r8
   1997a:	f000 f8cb 	bl	19b14 <d_print_mod>
   1997e:	e553      	b.n	19428 <d_print_comp+0x398>
   19980:	688a      	ldr	r2, [r1, #8]
   19982:	7813      	ldrb	r3, [r2, #0]
   19984:	2b00      	cmp	r3, #0
   19986:	f47f abd8 	bne.w	1913a <d_print_comp+0xaa>
   1998a:	6893      	ldr	r3, [r2, #8]
   1998c:	2b01      	cmp	r3, #1
   1998e:	f47f abd4 	bne.w	1913a <d_print_comp+0xaa>
   19992:	2832      	cmp	r0, #50
   19994:	f47f abd1 	bne.w	1913a <d_print_comp+0xaa>
   19998:	6853      	ldr	r3, [r2, #4]
   1999a:	781b      	ldrb	r3, [r3, #0]
   1999c:	2b30      	cmp	r3, #48
   1999e:	d077      	beq.n	19a90 <d_print_comp+0xa00>
   199a0:	2b31      	cmp	r3, #49
   199a2:	f47f abca 	bne.w	1913a <d_print_comp+0xaa>
   199a6:	4640      	mov	r0, r8
   199a8:	4953      	ldr	r1, [pc, #332]	(19af8 <d_print_comp+0xa68>)
   199aa:	f7ff fa61 	bl	18e70 <d_append_string>
   199ae:	f7ff bbe2 	b.w	19176 <d_print_comp+0xe6>
   199b2:	6889      	ldr	r1, [r1, #8]
   199b4:	780b      	ldrb	r3, [r1, #0]
   199b6:	2b00      	cmp	r3, #0
   199b8:	f47f abbf 	bne.w	1913a <d_print_comp+0xaa>
   199bc:	2833      	cmp	r0, #51
   199be:	d061      	beq.n	19a84 <d_print_comp+0x9f4>
   199c0:	4640      	mov	r0, r8
   199c2:	f7ff fb65 	bl	19090 <d_print_comp>
   199c6:	1ea3      	subs	r3, r4, #2
   199c8:	2b04      	cmp	r3, #4
   199ca:	f63f abd4 	bhi.w	19176 <d_print_comp+0xe6>
   199ce:	e8df f003 	tbb	[pc, r3]
   199d2:	151b      	.short	0x151b
   199d4:	0003090f 	.word	0x0003090f
   199d8:	4640      	mov	r0, r8
   199da:	4948      	ldr	r1, [pc, #288]	(19afc <d_print_comp+0xa6c>)
   199dc:	f7ff fa48 	bl	18e70 <d_append_string>
   199e0:	f7ff bbc9 	b.w	19176 <d_print_comp+0xe6>
   199e4:	4640      	mov	r0, r8
   199e6:	4946      	ldr	r1, [pc, #280]	(19b00 <d_print_comp+0xa70>)
   199e8:	f7ff fa42 	bl	18e70 <d_append_string>
   199ec:	f7ff bbc3 	b.w	19176 <d_print_comp+0xe6>
   199f0:	4640      	mov	r0, r8
   199f2:	4944      	ldr	r1, [pc, #272]	(19b04 <d_print_comp+0xa74>)
   199f4:	f7ff fa3c 	bl	18e70 <d_append_string>
   199f8:	f7ff bbbd 	b.w	19176 <d_print_comp+0xe6>
   199fc:	4640      	mov	r0, r8
   199fe:	216c      	movs	r1, #108
   19a00:	f7fe f830 	bl	17a64 <d_append_char>
   19a04:	f7ff bbb7 	b.w	19176 <d_print_comp+0xe6>
   19a08:	4640      	mov	r0, r8
   19a0a:	2175      	movs	r1, #117
   19a0c:	f7fe f82a 	bl	17a64 <d_append_char>
   19a10:	f7ff bbb1 	b.w	19176 <d_print_comp+0xe6>
   19a14:	4640      	mov	r0, r8
   19a16:	2120      	movs	r1, #32
   19a18:	f7fe f824 	bl	17a64 <d_append_char>
   19a1c:	e5fa      	b.n	19614 <d_print_comp+0x584>
   19a1e:	4640      	mov	r0, r8
   19a20:	2120      	movs	r1, #32
   19a22:	f7fe f81f 	bl	17a64 <d_append_char>
   19a26:	e5e8      	b.n	195fa <d_print_comp+0x56a>
   19a28:	4640      	mov	r0, r8
   19a2a:	212d      	movs	r1, #45
   19a2c:	f7fe f81a 	bl	17a64 <d_append_char>
   19a30:	f7ff bb93 	b.w	1915a <d_print_comp+0xca>
   19a34:	6852      	ldr	r2, [r2, #4]
   19a36:	6893      	ldr	r3, [r2, #8]
   19a38:	2b01      	cmp	r3, #1
   19a3a:	f47f abe5 	bne.w	19208 <d_print_comp+0x178>
   19a3e:	6853      	ldr	r3, [r2, #4]
   19a40:	781a      	ldrb	r2, [r3, #0]
   19a42:	2a3e      	cmp	r2, #62
   19a44:	f47f abe0 	bne.w	19208 <d_print_comp+0x178>
   19a48:	4640      	mov	r0, r8
   19a4a:	2128      	movs	r1, #40
   19a4c:	f7fe f80a 	bl	17a64 <d_append_char>
   19a50:	f7ff bbda 	b.w	19208 <d_print_comp+0x178>
   19a54:	f04f 0a01 	mov.w	sl, #1	; 0x1
   19a58:	e6a7      	b.n	197aa <d_print_comp+0x71a>
   19a5a:	6860      	ldr	r0, [r4, #4]
   19a5c:	492a      	ldr	r1, [pc, #168]	(19b08 <d_print_comp+0xa78>)
   19a5e:	f007 fb43 	bl	210e8 <strncmp>
   19a62:	2800      	cmp	r0, #0
   19a64:	f47f adc0 	bne.w	195e8 <d_print_comp+0x558>
   19a68:	68b9      	ldr	r1, [r7, #8]
   19a6a:	4640      	mov	r0, r8
   19a6c:	f7ff fb10 	bl	19090 <d_print_comp>
   19a70:	4640      	mov	r0, r8
   19a72:	4926      	ldr	r1, [pc, #152]	(19b0c <d_print_comp+0xa7c>)
   19a74:	f7ff f9fc 	bl	18e70 <d_append_string>
   19a78:	f8c8 5118 	str.w	r5, [r8, #280]
   19a7c:	f7ff bb7b 	b.w	19176 <d_print_comp+0xe6>
   19a80:	2601      	movs	r6, #1
   19a82:	e472      	b.n	1936a <d_print_comp+0x2da>
   19a84:	212d      	movs	r1, #45
   19a86:	4640      	mov	r0, r8
   19a88:	f7fd ffec 	bl	17a64 <d_append_char>
   19a8c:	68b9      	ldr	r1, [r7, #8]
   19a8e:	e797      	b.n	199c0 <d_print_comp+0x930>
   19a90:	4640      	mov	r0, r8
   19a92:	491f      	ldr	r1, [pc, #124]	(19b10 <d_print_comp+0xa80>)
   19a94:	f7ff f9ec 	bl	18e70 <d_append_string>
   19a98:	f7ff bb6d 	b.w	19176 <d_print_comp+0xe6>
   19a9c:	00022df0 	.word	0x00022df0
   19aa0:	00022f48 	.word	0x00022f48
   19aa4:	00022f1c 	.word	0x00022f1c
   19aa8:	00022f20 	.word	0x00022f20
   19aac:	00022f24 	.word	0x00022f24
   19ab0:	00022f10 	.word	0x00022f10
   19ab4:	00022e60 	.word	0x00022e60
   19ab8:	00022e74 	.word	0x00022e74
   19abc:	00022e78 	.word	0x00022e78
   19ac0:	00022e8c 	.word	0x00022e8c
   19ac4:	00022ea8 	.word	0x00022ea8
   19ac8:	00022eb8 	.word	0x00022eb8
   19acc:	00022ecc 	.word	0x00022ecc
   19ad0:	00022ee8 	.word	0x00022ee8
   19ad4:	00022f00 	.word	0x00022f00
   19ad8:	00022f04 	.word	0x00022f04
   19adc:	00022e0c 	.word	0x00022e0c
   19ae0:	00022efc 	.word	0x00022efc
   19ae4:	00022e00 	.word	0x00022e00
   19ae8:	00022e3c 	.word	0x00022e3c
   19aec:	00022e4c 	.word	0x00022e4c
   19af0:	00022e18 	.word	0x00022e18
   19af4:	00022e34 	.word	0x00022e34
   19af8:	00022f40 	.word	0x00022f40
   19afc:	00022f34 	.word	0x00022f34
   19b00:	00022f30 	.word	0x00022f30
   19b04:	00022f2c 	.word	0x00022f2c
   19b08:	00022df4 	.word	0x00022df4
   19b0c:	00022dfc 	.word	0x00022dfc
   19b10:	00022f38 	.word	0x00022f38

00019b14 <d_print_mod>:
   19b14:	b530      	push	{r4, r5, lr}
   19b16:	780b      	ldrb	r3, [r1, #0]
   19b18:	b081      	sub	sp, #4
   19b1a:	3b03      	subs	r3, #3
   19b1c:	4604      	mov	r4, r0
   19b1e:	460d      	mov	r5, r1
   19b20:	2b23      	cmp	r3, #35
   19b22:	d813      	bhi.n	19b4c <d_print_mod+0x38>
   19b24:	e8df f003 	tbb	[pc, r3]
   19b28:	12121216 	.word	0x12121216
   19b2c:	12121212 	.word	0x12121212
   19b30:	12121212 	.word	0x12121212
   19b34:	12121212 	.word	0x12121212
   19b38:	1a121212 	.word	0x1a121212
   19b3c:	1e1a221e 	.word	0x1e1a221e
   19b40:	362e2622 	.word	0x362e2622
   19b44:	12423e3a 	.word	0x12423e3a
   19b48:	46121212 	.word	0x46121212
   19b4c:	f7ff faa0 	bl	19090 <d_print_comp>
   19b50:	b001      	add	sp, #4
   19b52:	bd30      	pop	{r4, r5, pc}
   19b54:	6849      	ldr	r1, [r1, #4]
   19b56:	f7ff fa9b 	bl	19090 <d_print_comp>
   19b5a:	e7f9      	b.n	19b50 <d_print_mod+0x3c>
   19b5c:	491d      	ldr	r1, [pc, #116]	(19bd4 <d_print_mod+0xc0>)
   19b5e:	f7ff f987 	bl	18e70 <d_append_string>
   19b62:	e7f5      	b.n	19b50 <d_print_mod+0x3c>
   19b64:	491c      	ldr	r1, [pc, #112]	(19bd8 <d_print_mod+0xc4>)
   19b66:	f7ff f983 	bl	18e70 <d_append_string>
   19b6a:	e7f1      	b.n	19b50 <d_print_mod+0x3c>
   19b6c:	491b      	ldr	r1, [pc, #108]	(19bdc <d_print_mod+0xc8>)
   19b6e:	f7ff f97f 	bl	18e70 <d_append_string>
   19b72:	e7ed      	b.n	19b50 <d_print_mod+0x3c>
   19b74:	2120      	movs	r1, #32
   19b76:	f7fd ff75 	bl	17a64 <d_append_char>
   19b7a:	68a9      	ldr	r1, [r5, #8]
   19b7c:	4620      	mov	r0, r4
   19b7e:	f7ff fa87 	bl	19090 <d_print_comp>
   19b82:	e7e5      	b.n	19b50 <d_print_mod+0x3c>
   19b84:	6803      	ldr	r3, [r0, #0]
   19b86:	f013 0f04 	tst.w	r3, #4	; 0x4
   19b8a:	d1e1      	bne.n	19b50 <d_print_mod+0x3c>
   19b8c:	212a      	movs	r1, #42
   19b8e:	f7fd ff69 	bl	17a64 <d_append_char>
   19b92:	e7dd      	b.n	19b50 <d_print_mod+0x3c>
   19b94:	2126      	movs	r1, #38
   19b96:	f7fd ff65 	bl	17a64 <d_append_char>
   19b9a:	e7d9      	b.n	19b50 <d_print_mod+0x3c>
   19b9c:	4910      	ldr	r1, [pc, #64]	(19be0 <d_print_mod+0xcc>)
   19b9e:	f7ff f967 	bl	18e70 <d_append_string>
   19ba2:	e7d5      	b.n	19b50 <d_print_mod+0x3c>
   19ba4:	490f      	ldr	r1, [pc, #60]	(19be4 <d_print_mod+0xd0>)
   19ba6:	f7ff f963 	bl	18e70 <d_append_string>
   19baa:	e7d1      	b.n	19b50 <d_print_mod+0x3c>
   19bac:	490e      	ldr	r1, [pc, #56]	(19be8 <d_print_mod+0xd4>)
   19bae:	f7ff f95f 	bl	18e70 <d_append_string>
   19bb2:	e7cd      	b.n	19b50 <d_print_mod+0x3c>
   19bb4:	f890 3108 	ldrb.w	r3, [r0, #264]
   19bb8:	2b28      	cmp	r3, #40
   19bba:	d002      	beq.n	19bc2 <d_print_mod+0xae>
   19bbc:	2120      	movs	r1, #32
   19bbe:	f7fd ff51 	bl	17a64 <d_append_char>
   19bc2:	6869      	ldr	r1, [r5, #4]
   19bc4:	4620      	mov	r0, r4
   19bc6:	f7ff fa63 	bl	19090 <d_print_comp>
   19bca:	4620      	mov	r0, r4
   19bcc:	4907      	ldr	r1, [pc, #28]	(19bec <d_print_mod+0xd8>)
   19bce:	f7ff f94f 	bl	18e70 <d_append_string>
   19bd2:	e7bd      	b.n	19b50 <d_print_mod+0x3c>
   19bd4:	00022f58 	.word	0x00022f58
   19bd8:	00022f64 	.word	0x00022f64
   19bdc:	00022f70 	.word	0x00022f70
   19be0:	00022f78 	.word	0x00022f78
   19be4:	00022f7c 	.word	0x00022f7c
   19be8:	00022f88 	.word	0x00022f88
   19bec:	00022efc 	.word	0x00022efc

00019bf0 <d_print_mod_list>:
   19bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bf4:	4606      	mov	r6, r0
   19bf6:	460d      	mov	r5, r1
   19bf8:	4614      	mov	r4, r2
   19bfa:	2900      	cmp	r1, #0
   19bfc:	d02d      	beq.n	19c5a <d_print_mod_list+0x6a>
   19bfe:	f8d0 311c 	ldr.w	r3, [r0, #284]
   19c02:	2b00      	cmp	r3, #0
   19c04:	d129      	bne.n	19c5a <d_print_mod_list+0x6a>
   19c06:	f04f 0801 	mov.w	r8, #1	; 0x1
   19c0a:	e018      	b.n	19c3e <d_print_mod_list+0x4e>
   19c0c:	6869      	ldr	r1, [r5, #4]
   19c0e:	68eb      	ldr	r3, [r5, #12]
   19c10:	f8d6 7114 	ldr.w	r7, [r6, #276]
   19c14:	f8c6 3114 	str.w	r3, [r6, #276]
   19c18:	780b      	ldrb	r3, [r1, #0]
   19c1a:	f8c5 8008 	str.w	r8, [r5, #8]
   19c1e:	2b24      	cmp	r3, #36
   19c20:	d01d      	beq.n	19c5e <d_print_mod_list+0x6e>
   19c22:	2b25      	cmp	r3, #37
   19c24:	d022      	beq.n	19c6c <d_print_mod_list+0x7c>
   19c26:	2b02      	cmp	r3, #2
   19c28:	d027      	beq.n	19c7a <d_print_mod_list+0x8a>
   19c2a:	4630      	mov	r0, r6
   19c2c:	f7ff ff72 	bl	19b14 <d_print_mod>
   19c30:	f8c6 7114 	str.w	r7, [r6, #276]
   19c34:	682d      	ldr	r5, [r5, #0]
   19c36:	b185      	cbz	r5, 19c5a <d_print_mod_list+0x6a>
   19c38:	f8d6 311c 	ldr.w	r3, [r6, #284]
   19c3c:	b96b      	cbnz	r3, 19c5a <d_print_mod_list+0x6a>
   19c3e:	68ab      	ldr	r3, [r5, #8]
   19c40:	2b00      	cmp	r3, #0
   19c42:	d1f7      	bne.n	19c34 <d_print_mod_list+0x44>
   19c44:	2c00      	cmp	r4, #0
   19c46:	d1e1      	bne.n	19c0c <d_print_mod_list+0x1c>
   19c48:	6869      	ldr	r1, [r5, #4]
   19c4a:	780b      	ldrb	r3, [r1, #0]
   19c4c:	3b19      	subs	r3, #25
   19c4e:	b2db      	uxtb	r3, r3
   19c50:	2b02      	cmp	r3, #2
   19c52:	d8dc      	bhi.n	19c0e <d_print_mod_list+0x1e>
   19c54:	682d      	ldr	r5, [r5, #0]
   19c56:	2d00      	cmp	r5, #0
   19c58:	d1ee      	bne.n	19c38 <d_print_mod_list+0x48>
   19c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c5e:	682a      	ldr	r2, [r5, #0]
   19c60:	4630      	mov	r0, r6
   19c62:	f000 f833 	bl	19ccc <d_print_function_type>
   19c66:	f8c6 7114 	str.w	r7, [r6, #276]
   19c6a:	e7f6      	b.n	19c5a <d_print_mod_list+0x6a>
   19c6c:	682a      	ldr	r2, [r5, #0]
   19c6e:	4630      	mov	r0, r6
   19c70:	f7ff f936 	bl	18ee0 <d_print_array_type>
   19c74:	f8c6 7114 	str.w	r7, [r6, #276]
   19c78:	e7ef      	b.n	19c5a <d_print_mod_list+0x6a>
   19c7a:	3b02      	subs	r3, #2
   19c7c:	f8d6 4118 	ldr.w	r4, [r6, #280]
   19c80:	f8c6 3118 	str.w	r3, [r6, #280]
   19c84:	6849      	ldr	r1, [r1, #4]
   19c86:	4630      	mov	r0, r6
   19c88:	f7ff fa02 	bl	19090 <d_print_comp>
   19c8c:	6833      	ldr	r3, [r6, #0]
   19c8e:	f8c6 4118 	str.w	r4, [r6, #280]
   19c92:	f013 0f04 	tst.w	r3, #4	; 0x4
   19c96:	d112      	bne.n	19cbe <d_print_mod_list+0xce>
   19c98:	4630      	mov	r0, r6
   19c9a:	490b      	ldr	r1, [pc, #44]	(19cc8 <d_print_mod_list+0xd8>)
   19c9c:	f7ff f8e8 	bl	18e70 <d_append_string>
   19ca0:	686a      	ldr	r2, [r5, #4]
   19ca2:	6891      	ldr	r1, [r2, #8]
   19ca4:	e000      	b.n	19ca8 <d_print_mod_list+0xb8>
   19ca6:	6849      	ldr	r1, [r1, #4]
   19ca8:	780b      	ldrb	r3, [r1, #0]
   19caa:	3b19      	subs	r3, #25
   19cac:	b2db      	uxtb	r3, r3
   19cae:	2b02      	cmp	r3, #2
   19cb0:	d9f9      	bls.n	19ca6 <d_print_mod_list+0xb6>
   19cb2:	4630      	mov	r0, r6
   19cb4:	f7ff f9ec 	bl	19090 <d_print_comp>
   19cb8:	f8c6 7114 	str.w	r7, [r6, #276]
   19cbc:	e7cd      	b.n	19c5a <d_print_mod_list+0x6a>
   19cbe:	4630      	mov	r0, r6
   19cc0:	212e      	movs	r1, #46
   19cc2:	f7fd fecf 	bl	17a64 <d_append_char>
   19cc6:	e7eb      	b.n	19ca0 <d_print_mod_list+0xb0>
   19cc8:	00022df0 	.word	0x00022df0

00019ccc <d_print_function_type>:
   19ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cd0:	4605      	mov	r5, r0
   19cd2:	4688      	mov	r8, r1
   19cd4:	4616      	mov	r6, r2
   19cd6:	2a00      	cmp	r2, #0
   19cd8:	f000 80de 	beq.w	19e98 <d_print_function_type+0x1cc>
   19cdc:	6893      	ldr	r3, [r2, #8]
   19cde:	2b00      	cmp	r3, #0
   19ce0:	f040 80da 	bne.w	19e98 <d_print_function_type+0x1cc>
   19ce4:	4611      	mov	r1, r2
   19ce6:	2001      	movs	r0, #1
   19ce8:	684b      	ldr	r3, [r1, #4]
   19cea:	781a      	ldrb	r2, [r3, #0]
   19cec:	3a16      	subs	r2, #22
   19cee:	b2d3      	uxtb	r3, r2
   19cf0:	2b10      	cmp	r3, #16
   19cf2:	d865      	bhi.n	19dc0 <d_print_function_type+0xf4>
   19cf4:	b252      	sxtb	r2, r2
   19cf6:	fa10 f202 	lsls.w	r2, r0, r2
   19cfa:	4b6a      	ldr	r3, [pc, #424]	(19ea4 <d_print_function_type+0x1d8>)
   19cfc:	ea02 0303 	and.w	r3, r2, r3
   19d00:	2b00      	cmp	r3, #0
   19d02:	d16c      	bne.n	19dde <d_print_function_type+0x112>
   19d04:	f412 7f60 	tst.w	r2, #896	; 0x380
   19d08:	d05a      	beq.n	19dc0 <d_print_function_type+0xf4>
   19d0a:	f895 3108 	ldrb.w	r3, [r5, #264]
   19d0e:	2b28      	cmp	r3, #40
   19d10:	d001      	beq.n	19d16 <d_print_function_type+0x4a>
   19d12:	2b2a      	cmp	r3, #42
   19d14:	d165      	bne.n	19de2 <d_print_function_type+0x116>
   19d16:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19d1a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19d1e:	d076      	beq.n	19e0e <d_print_function_type+0x142>
   19d20:	2128      	movs	r1, #40
   19d22:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19d26:	eb05 030c 	add.w	r3, r5, ip
   19d2a:	2400      	movs	r4, #0
   19d2c:	7119      	strb	r1, [r3, #4]
   19d2e:	f8c5 2104 	str.w	r2, [r5, #260]
   19d32:	f885 1108 	strb.w	r1, [r5, #264]
   19d36:	f8d5 7118 	ldr.w	r7, [r5, #280]
   19d3a:	4628      	mov	r0, r5
   19d3c:	f8c5 4118 	str.w	r4, [r5, #280]
   19d40:	4631      	mov	r1, r6
   19d42:	4622      	mov	r2, r4
   19d44:	f7ff ff54 	bl	19bf0 <d_print_mod_list>
   19d48:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19d4c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19d50:	d06b      	beq.n	19e2a <d_print_function_type+0x15e>
   19d52:	2129      	movs	r1, #41
   19d54:	eb05 030c 	add.w	r3, r5, ip
   19d58:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19d5c:	7119      	strb	r1, [r3, #4]
   19d5e:	f8c5 2104 	str.w	r2, [r5, #260]
   19d62:	f885 1108 	strb.w	r1, [r5, #264]
   19d66:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19d6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19d6e:	d077      	beq.n	19e60 <d_print_function_type+0x194>
   19d70:	2128      	movs	r1, #40
   19d72:	eb05 030c 	add.w	r3, r5, ip
   19d76:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19d7a:	7119      	strb	r1, [r3, #4]
   19d7c:	f8c5 2104 	str.w	r2, [r5, #260]
   19d80:	f885 1108 	strb.w	r1, [r5, #264]
   19d84:	f8d8 1008 	ldr.w	r1, [r8, #8]
   19d88:	b111      	cbz	r1, 19d90 <d_print_function_type+0xc4>
   19d8a:	4628      	mov	r0, r5
   19d8c:	f7ff f980 	bl	19090 <d_print_comp>
   19d90:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19d94:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19d98:	d054      	beq.n	19e44 <d_print_function_type+0x178>
   19d9a:	2129      	movs	r1, #41
   19d9c:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19da0:	eb05 030c 	add.w	r3, r5, ip
   19da4:	7119      	strb	r1, [r3, #4]
   19da6:	f8c5 2104 	str.w	r2, [r5, #260]
   19daa:	f885 1108 	strb.w	r1, [r5, #264]
   19dae:	4628      	mov	r0, r5
   19db0:	4631      	mov	r1, r6
   19db2:	2201      	movs	r2, #1
   19db4:	f7ff ff1c 	bl	19bf0 <d_print_mod_list>
   19db8:	f8c5 7118 	str.w	r7, [r5, #280]
   19dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19dc0:	6809      	ldr	r1, [r1, #0]
   19dc2:	b111      	cbz	r1, 19dca <d_print_function_type+0xfe>
   19dc4:	688b      	ldr	r3, [r1, #8]
   19dc6:	2b00      	cmp	r3, #0
   19dc8:	d08e      	beq.n	19ce8 <d_print_function_type+0x1c>
   19dca:	2200      	movs	r2, #0
   19dcc:	f8d5 7118 	ldr.w	r7, [r5, #280]
   19dd0:	4628      	mov	r0, r5
   19dd2:	f8c5 2118 	str.w	r2, [r5, #280]
   19dd6:	4631      	mov	r1, r6
   19dd8:	f7ff ff0a 	bl	19bf0 <d_print_mod_list>
   19ddc:	e7c3      	b.n	19d66 <d_print_function_type+0x9a>
   19dde:	f895 3108 	ldrb.w	r3, [r5, #264]
   19de2:	2b20      	cmp	r3, #32
   19de4:	d097      	beq.n	19d16 <d_print_function_type+0x4a>
   19de6:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19dea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19dee:	d045      	beq.n	19e7c <d_print_function_type+0x1b0>
   19df0:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19df4:	f8c5 2104 	str.w	r2, [r5, #260]
   19df8:	eb05 030c 	add.w	r3, r5, ip
   19dfc:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19e00:	2120      	movs	r1, #32
   19e02:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19e06:	7119      	strb	r1, [r3, #4]
   19e08:	f885 1108 	strb.w	r1, [r5, #264]
   19e0c:	d188      	bne.n	19d20 <d_print_function_type+0x54>
   19e0e:	2400      	movs	r4, #0
   19e10:	4661      	mov	r1, ip
   19e12:	f885 4103 	strb.w	r4, [r5, #259]
   19e16:	1d28      	adds	r0, r5, #4
   19e18:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19e1c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19e20:	4798      	blx	r3
   19e22:	f8c5 4104 	str.w	r4, [r5, #260]
   19e26:	46a4      	mov	ip, r4
   19e28:	e77a      	b.n	19d20 <d_print_function_type+0x54>
   19e2a:	4661      	mov	r1, ip
   19e2c:	f885 4103 	strb.w	r4, [r5, #259]
   19e30:	1d28      	adds	r0, r5, #4
   19e32:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19e36:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19e3a:	4798      	blx	r3
   19e3c:	f8c5 4104 	str.w	r4, [r5, #260]
   19e40:	46a4      	mov	ip, r4
   19e42:	e786      	b.n	19d52 <d_print_function_type+0x86>
   19e44:	2400      	movs	r4, #0
   19e46:	4661      	mov	r1, ip
   19e48:	f885 4103 	strb.w	r4, [r5, #259]
   19e4c:	1d28      	adds	r0, r5, #4
   19e4e:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19e52:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19e56:	4798      	blx	r3
   19e58:	f8c5 4104 	str.w	r4, [r5, #260]
   19e5c:	46a4      	mov	ip, r4
   19e5e:	e79c      	b.n	19d9a <d_print_function_type+0xce>
   19e60:	2400      	movs	r4, #0
   19e62:	4661      	mov	r1, ip
   19e64:	f885 4103 	strb.w	r4, [r5, #259]
   19e68:	1d28      	adds	r0, r5, #4
   19e6a:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19e6e:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19e72:	4798      	blx	r3
   19e74:	f8c5 4104 	str.w	r4, [r5, #260]
   19e78:	46a4      	mov	ip, r4
   19e7a:	e779      	b.n	19d70 <d_print_function_type+0xa4>
   19e7c:	2400      	movs	r4, #0
   19e7e:	4661      	mov	r1, ip
   19e80:	f885 4103 	strb.w	r4, [r5, #259]
   19e84:	1d28      	adds	r0, r5, #4
   19e86:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19e8a:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19e8e:	4798      	blx	r3
   19e90:	f8c5 4104 	str.w	r4, [r5, #260]
   19e94:	46a4      	mov	ip, r4
   19e96:	e7ab      	b.n	19df0 <d_print_function_type+0x124>
   19e98:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19e9c:	2b00      	cmp	r3, #0
   19e9e:	f47f af34 	bne.w	19d0a <d_print_function_type+0x3e>
   19ea2:	e792      	b.n	19dca <d_print_function_type+0xfe>
   19ea4:	00010c47 	.word	0x00010c47

00019ea8 <d_print_cast>:
   19ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19eaa:	460e      	mov	r6, r1
   19eac:	6849      	ldr	r1, [r1, #4]
   19eae:	b083      	sub	sp, #12
   19eb0:	780b      	ldrb	r3, [r1, #0]
   19eb2:	4605      	mov	r5, r0
   19eb4:	2b04      	cmp	r3, #4
   19eb6:	d003      	beq.n	19ec0 <d_print_cast+0x18>
   19eb8:	f7ff f8ea 	bl	19090 <d_print_comp>
   19ebc:	b003      	add	sp, #12
   19ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ec0:	f8d0 2114 	ldr.w	r2, [r0, #276]
   19ec4:	2300      	movs	r3, #0
   19ec6:	f8d0 7118 	ldr.w	r7, [r0, #280]
   19eca:	f8c0 3118 	str.w	r3, [r0, #280]
   19ece:	ab02      	add	r3, sp, #8
   19ed0:	f843 2d08 	str.w	r2, [r3, #-8]!
   19ed4:	f8c0 3114 	str.w	r3, [r0, #276]
   19ed8:	9101      	str	r1, [sp, #4]
   19eda:	6849      	ldr	r1, [r1, #4]
   19edc:	f7ff f8d8 	bl	19090 <d_print_comp>
   19ee0:	f895 2108 	ldrb.w	r2, [r5, #264]
   19ee4:	9b00      	ldr	r3, [sp, #0]
   19ee6:	2a3c      	cmp	r2, #60
   19ee8:	f8c5 3114 	str.w	r3, [r5, #276]
   19eec:	d045      	beq.n	19f7a <d_print_cast+0xd2>
   19eee:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19ef2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19ef6:	d024      	beq.n	19f42 <d_print_cast+0x9a>
   19ef8:	213c      	movs	r1, #60
   19efa:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   19efe:	eb05 020c 	add.w	r2, r5, ip
   19f02:	7111      	strb	r1, [r2, #4]
   19f04:	f8c5 3104 	str.w	r3, [r5, #260]
   19f08:	f885 1108 	strb.w	r1, [r5, #264]
   19f0c:	6873      	ldr	r3, [r6, #4]
   19f0e:	4628      	mov	r0, r5
   19f10:	6899      	ldr	r1, [r3, #8]
   19f12:	f7ff f8bd 	bl	19090 <d_print_comp>
   19f16:	f895 3108 	ldrb.w	r3, [r5, #264]
   19f1a:	2b3e      	cmp	r3, #62
   19f1c:	d032      	beq.n	19f84 <d_print_cast+0xdc>
   19f1e:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19f22:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19f26:	d01a      	beq.n	19f5e <d_print_cast+0xb6>
   19f28:	213e      	movs	r1, #62
   19f2a:	eb05 030c 	add.w	r3, r5, ip
   19f2e:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19f32:	7119      	strb	r1, [r3, #4]
   19f34:	f8c5 2104 	str.w	r2, [r5, #260]
   19f38:	f885 1108 	strb.w	r1, [r5, #264]
   19f3c:	f8c5 7118 	str.w	r7, [r5, #280]
   19f40:	e7bc      	b.n	19ebc <d_print_cast+0x14>
   19f42:	2400      	movs	r4, #0
   19f44:	4661      	mov	r1, ip
   19f46:	f885 4103 	strb.w	r4, [r5, #259]
   19f4a:	1d28      	adds	r0, r5, #4
   19f4c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19f50:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19f54:	4798      	blx	r3
   19f56:	f8c5 4104 	str.w	r4, [r5, #260]
   19f5a:	46a4      	mov	ip, r4
   19f5c:	e7cc      	b.n	19ef8 <d_print_cast+0x50>
   19f5e:	2400      	movs	r4, #0
   19f60:	4661      	mov	r1, ip
   19f62:	f885 4103 	strb.w	r4, [r5, #259]
   19f66:	1d28      	adds	r0, r5, #4
   19f68:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19f6c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19f70:	4798      	blx	r3
   19f72:	f8c5 4104 	str.w	r4, [r5, #260]
   19f76:	46a4      	mov	ip, r4
   19f78:	e7d6      	b.n	19f28 <d_print_cast+0x80>
   19f7a:	4628      	mov	r0, r5
   19f7c:	2120      	movs	r1, #32
   19f7e:	f7fd fd71 	bl	17a64 <d_append_char>
   19f82:	e7b4      	b.n	19eee <d_print_cast+0x46>
   19f84:	4628      	mov	r0, r5
   19f86:	2120      	movs	r1, #32
   19f88:	f7fd fd6c 	bl	17a64 <d_append_char>
   19f8c:	e7c7      	b.n	19f1e <d_print_cast+0x76>
   19f8e:	46c0      	nop			(mov r8, r8)

00019f90 <d_print_expr_op>:
   19f90:	780b      	ldrb	r3, [r1, #0]
   19f92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19f96:	2b29      	cmp	r3, #41
   19f98:	4604      	mov	r4, r0
   19f9a:	d003      	beq.n	19fa4 <d_print_expr_op+0x14>
   19f9c:	f7ff f878 	bl	19090 <d_print_comp>
   19fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19fa4:	684b      	ldr	r3, [r1, #4]
   19fa6:	689f      	ldr	r7, [r3, #8]
   19fa8:	f8d3 8004 	ldr.w	r8, [r3, #4]
   19fac:	2f00      	cmp	r7, #0
   19fae:	d0f7      	beq.n	19fa0 <d_print_expr_op+0x10>
   19fb0:	2500      	movs	r5, #0
   19fb2:	f100 0904 	add.w	r9, r0, #4	; 0x4
   19fb6:	46aa      	mov	sl, r5
   19fb8:	e00a      	b.n	19fd0 <d_print_expr_op+0x40>
   19fba:	3501      	adds	r5, #1
   19fbc:	1c4a      	adds	r2, r1, #1
   19fbe:	eb04 0301 	add.w	r3, r4, r1
   19fc2:	42af      	cmp	r7, r5
   19fc4:	711e      	strb	r6, [r3, #4]
   19fc6:	f8c4 2104 	str.w	r2, [r4, #260]
   19fca:	f884 6108 	strb.w	r6, [r4, #264]
   19fce:	d9e7      	bls.n	19fa0 <d_print_expr_op+0x10>
   19fd0:	f8d4 1104 	ldr.w	r1, [r4, #260]
   19fd4:	f818 6005 	ldrb.w	r6, [r8, r5]
   19fd8:	29ff      	cmp	r1, #255
   19fda:	d1ee      	bne.n	19fba <d_print_expr_op+0x2a>
   19fdc:	f884 a103 	strb.w	sl, [r4, #259]
   19fe0:	f8d4 2110 	ldr.w	r2, [r4, #272]
   19fe4:	f8d4 310c 	ldr.w	r3, [r4, #268]
   19fe8:	4648      	mov	r0, r9
   19fea:	4798      	blx	r3
   19fec:	f8c4 a104 	str.w	sl, [r4, #260]
   19ff0:	4651      	mov	r1, sl
   19ff2:	e7e2      	b.n	19fba <d_print_expr_op+0x2a>

00019ff4 <d_demangle_callback>:
   19ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ff8:	b0d7      	sub	sp, #348
   19ffa:	7806      	ldrb	r6, [r0, #0]
   19ffc:	af00      	add	r7, sp, #0
   19ffe:	2e5f      	cmp	r6, #95
   1a000:	4604      	mov	r4, r0
   1a002:	460d      	mov	r5, r1
   1a004:	4691      	mov	r9, r2
   1a006:	469a      	mov	sl, r3
   1a008:	d105      	bne.n	1a016 <d_demangle_callback+0x22>
   1a00a:	7843      	ldrb	r3, [r0, #1]
   1a00c:	2b5a      	cmp	r3, #90
   1a00e:	bf08      	it	eq
   1a010:	f04f 0800 	moveq.w	r8, #0	; 0x0
   1a014:	d017      	beq.n	1a046 <d_demangle_callback+0x52>
   1a016:	4620      	mov	r0, r4
   1a018:	4961      	ldr	r1, [pc, #388]	(1a1a0 <d_demangle_callback+0x1ac>)
   1a01a:	2208      	movs	r2, #8
   1a01c:	f007 f864 	bl	210e8 <strncmp>
   1a020:	b960      	cbnz	r0, 1a03c <d_demangle_callback+0x48>
   1a022:	7a22      	ldrb	r2, [r4, #8]
   1a024:	2a5f      	cmp	r2, #95
   1a026:	bf14      	ite	ne
   1a028:	2300      	movne	r3, #0
   1a02a:	2301      	moveq	r3, #1
   1a02c:	2a2e      	cmp	r2, #46
   1a02e:	bf08      	it	eq
   1a030:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a034:	2b00      	cmp	r3, #0
   1a036:	d175      	bne.n	1a124 <d_demangle_callback+0x130>
   1a038:	2a24      	cmp	r2, #36
   1a03a:	d073      	beq.n	1a124 <d_demangle_callback+0x130>
   1a03c:	f015 0010 	ands.w	r0, r5, #16	; 0x10
   1a040:	d06b      	beq.n	1a11a <d_demangle_callback+0x126>
   1a042:	f04f 0801 	mov.w	r8, #1	; 0x1
   1a046:	4620      	mov	r0, r4
   1a048:	f007 f846 	bl	210d8 <strlen>
   1a04c:	eb04 0300 	add.w	r3, r4, r0
   1a050:	2200      	movs	r2, #0
   1a052:	f8c7 3128 	str.w	r3, [r7, #296]
   1a056:	0043      	lsls	r3, r0, #1
   1a058:	f8c7 313c 	str.w	r3, [r7, #316]
   1a05c:	f8c7 2138 	str.w	r2, [r7, #312]
   1a060:	0143      	lsls	r3, r0, #5
   1a062:	f8c7 2144 	str.w	r2, [r7, #324]
   1a066:	f8c7 214c 	str.w	r2, [r7, #332]
   1a06a:	f8c7 2150 	str.w	r2, [r7, #336]
   1a06e:	f8c7 2154 	str.w	r2, [r7, #340]
   1a072:	00c2      	lsls	r2, r0, #3
   1a074:	1a9b      	subs	r3, r3, r2
   1a076:	f8c7 0148 	str.w	r0, [r7, #328]
   1a07a:	3308      	adds	r3, #8
   1a07c:	0080      	lsls	r0, r0, #2
   1a07e:	46eb      	mov	fp, sp
   1a080:	300e      	adds	r0, #14
   1a082:	ebc3 0d0d 	rsb	sp, r3, sp
   1a086:	ea4f 02dd 	mov.w	r2, sp, lsr #3
   1a08a:	f020 0007 	bic.w	r0, r0, #7	; 0x7
   1a08e:	00d2      	lsls	r2, r2, #3
   1a090:	ebc0 0d0d 	rsb	sp, r0, sp
   1a094:	f8c7 4124 	str.w	r4, [r7, #292]
   1a098:	f8c7 512c 	str.w	r5, [r7, #300]
   1a09c:	f8c7 4130 	str.w	r4, [r7, #304]
   1a0a0:	f8c7 2134 	str.w	r2, [r7, #308]
   1a0a4:	f8c7 d140 	str.w	sp, [r7, #320]
   1a0a8:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a0ac:	d15f      	bne.n	1a16e <d_demangle_callback+0x17a>
   1a0ae:	2e5f      	cmp	r6, #95
   1a0b0:	d066      	beq.n	1a180 <d_demangle_callback+0x18c>
   1a0b2:	2100      	movs	r1, #0
   1a0b4:	f015 0f01 	tst.w	r5, #1	; 0x1
   1a0b8:	d004      	beq.n	1a0c4 <d_demangle_callback+0xd0>
   1a0ba:	f8d7 3130 	ldr.w	r3, [r7, #304]
   1a0be:	781a      	ldrb	r2, [r3, #0]
   1a0c0:	2a00      	cmp	r2, #0
   1a0c2:	d15a      	bne.n	1a17a <d_demangle_callback+0x186>
   1a0c4:	2900      	cmp	r1, #0
   1a0c6:	d058      	beq.n	1a17a <d_demangle_callback+0x186>
   1a0c8:	1d3c      	adds	r4, r7, #4
   1a0ca:	6025      	str	r5, [r4, #0]
   1a0cc:	2500      	movs	r5, #0
   1a0ce:	4620      	mov	r0, r4
   1a0d0:	f8c4 5104 	str.w	r5, [r4, #260]
   1a0d4:	f884 5108 	strb.w	r5, [r4, #264]
   1a0d8:	f8c4 5114 	str.w	r5, [r4, #276]
   1a0dc:	f8c4 5118 	str.w	r5, [r4, #280]
   1a0e0:	f8c4 910c 	str.w	r9, [r4, #268]
   1a0e4:	f8c4 a110 	str.w	sl, [r4, #272]
   1a0e8:	f8c4 511c 	str.w	r5, [r4, #284]
   1a0ec:	f7fe ffd0 	bl	19090 <d_print_comp>
   1a0f0:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1a0f4:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1a0f8:	eb04 0301 	add.w	r3, r4, r1
   1a0fc:	711d      	strb	r5, [r3, #4]
   1a0fe:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1a102:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1a106:	4798      	blx	r3
   1a108:	f8d4 311c 	ldr.w	r3, [r4, #284]
   1a10c:	f8c4 5104 	str.w	r5, [r4, #260]
   1a110:	42ab      	cmp	r3, r5
   1a112:	bf14      	ite	ne
   1a114:	2000      	movne	r0, #0
   1a116:	2001      	moveq	r0, #1
   1a118:	46dd      	mov	sp, fp
   1a11a:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   1a11e:	46bd      	mov	sp, r7
   1a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a124:	7a63      	ldrb	r3, [r4, #9]
   1a126:	2b49      	cmp	r3, #73
   1a128:	bf14      	ite	ne
   1a12a:	2200      	movne	r2, #0
   1a12c:	2201      	moveq	r2, #1
   1a12e:	2b44      	cmp	r3, #68
   1a130:	bf14      	ite	ne
   1a132:	4613      	movne	r3, r2
   1a134:	f042 0301 	orreq.w	r3, r2, #1	; 0x1
   1a138:	2b00      	cmp	r3, #0
   1a13a:	f43f af7f 	beq.w	1a03c <d_demangle_callback+0x48>
   1a13e:	7aa3      	ldrb	r3, [r4, #10]
   1a140:	2b5f      	cmp	r3, #95
   1a142:	f47f af7b 	bne.w	1a03c <d_demangle_callback+0x48>
   1a146:	4b17      	ldr	r3, [pc, #92]	(1a1a4 <d_demangle_callback+0x1b0>)
   1a148:	4817      	ldr	r0, [pc, #92]	(1a1a8 <d_demangle_callback+0x1b4>)
   1a14a:	2a00      	cmp	r2, #0
   1a14c:	bf08      	it	eq
   1a14e:	4618      	moveq	r0, r3
   1a150:	bf14      	ite	ne
   1a152:	211d      	movne	r1, #29
   1a154:	211c      	moveq	r1, #28
   1a156:	4652      	mov	r2, sl
   1a158:	340b      	adds	r4, #11
   1a15a:	47c8      	blx	r9
   1a15c:	4620      	mov	r0, r4
   1a15e:	f006 ffbb 	bl	210d8 <strlen>
   1a162:	4652      	mov	r2, sl
   1a164:	4601      	mov	r1, r0
   1a166:	4620      	mov	r0, r4
   1a168:	47c8      	blx	r9
   1a16a:	2001      	movs	r0, #1
   1a16c:	e7d5      	b.n	1a11a <d_demangle_callback+0x126>
   1a16e:	f507 7092 	add.w	r0, r7, #292	; 0x124
   1a172:	f7fd fd07 	bl	17b84 <d_type>
   1a176:	4601      	mov	r1, r0
   1a178:	e79c      	b.n	1a0b4 <d_demangle_callback+0xc0>
   1a17a:	2000      	movs	r0, #0
   1a17c:	46dd      	mov	sp, fp
   1a17e:	e7cc      	b.n	1a11a <d_demangle_callback+0x126>
   1a180:	1c62      	adds	r2, r4, #1
   1a182:	f8c7 2130 	str.w	r2, [r7, #304]
   1a186:	7863      	ldrb	r3, [r4, #1]
   1a188:	2b5a      	cmp	r3, #90
   1a18a:	d192      	bne.n	1a0b2 <d_demangle_callback+0xbe>
   1a18c:	1c53      	adds	r3, r2, #1
   1a18e:	2101      	movs	r1, #1
   1a190:	f507 7092 	add.w	r0, r7, #292	; 0x124
   1a194:	f8c7 3130 	str.w	r3, [r7, #304]
   1a198:	f7fe f8b6 	bl	18308 <d_encoding>
   1a19c:	4601      	mov	r1, r0
   1a19e:	e789      	b.n	1a0b4 <d_demangle_callback+0xc0>
   1a1a0:	00022db8 	.word	0x00022db8
   1a1a4:	00022f94 	.word	0x00022f94
   1a1a8:	00022fb4 	.word	0x00022fb4

0001a1ac <__gcclibcxx_demangle_callback>:
   1a1ac:	f1d1 0301 	rsbs	r3, r1, #1	; 0x1
   1a1b0:	bf38      	it	cc
   1a1b2:	2300      	movcc	r3, #0
   1a1b4:	2800      	cmp	r0, #0
   1a1b6:	bf08      	it	eq
   1a1b8:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a1bc:	b510      	push	{r4, lr}
   1a1be:	468c      	mov	ip, r1
   1a1c0:	4614      	mov	r4, r2
   1a1c2:	b113      	cbz	r3, 1a1ca <__gcclibcxx_demangle_callback+0x1e>
   1a1c4:	f06f 0002 	mvn.w	r0, #2	; 0x2
   1a1c8:	bd10      	pop	{r4, pc}
   1a1ca:	2111      	movs	r1, #17
   1a1cc:	4662      	mov	r2, ip
   1a1ce:	4623      	mov	r3, r4
   1a1d0:	f7ff ff10 	bl	19ff4 <d_demangle_callback>
   1a1d4:	2800      	cmp	r0, #0
   1a1d6:	bf0c      	ite	eq
   1a1d8:	f06f 0001 	mvneq.w	r0, #1	; 0x1
   1a1dc:	2000      	movne	r0, #0
   1a1de:	e7f3      	b.n	1a1c8 <__gcclibcxx_demangle_callback+0x1c>

0001a1e0 <__cxa_demangle>:
   1a1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1e4:	460e      	mov	r6, r1
   1a1e6:	b084      	sub	sp, #16
   1a1e8:	4617      	mov	r7, r2
   1a1ea:	4698      	mov	r8, r3
   1a1ec:	2800      	cmp	r0, #0
   1a1ee:	d05b      	beq.n	1a2a8 <__cxa_demangle+0xc8>
   1a1f0:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   1a1f4:	bf38      	it	cc
   1a1f6:	2300      	movcc	r3, #0
   1a1f8:	2900      	cmp	r1, #0
   1a1fa:	bf0c      	ite	eq
   1a1fc:	2300      	moveq	r3, #0
   1a1fe:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1a202:	2b00      	cmp	r3, #0
   1a204:	d145      	bne.n	1a292 <__cxa_demangle+0xb2>
   1a206:	9300      	str	r3, [sp, #0]
   1a208:	9301      	str	r3, [sp, #4]
   1a20a:	9302      	str	r3, [sp, #8]
   1a20c:	9303      	str	r3, [sp, #12]
   1a20e:	2111      	movs	r1, #17
   1a210:	4a2c      	ldr	r2, [pc, #176]	(1a2c4 <__cxa_demangle+0xe4>)
   1a212:	466b      	mov	r3, sp
   1a214:	f7ff feee 	bl	19ff4 <d_demangle_callback>
   1a218:	4604      	mov	r4, r0
   1a21a:	2800      	cmp	r0, #0
   1a21c:	d026      	beq.n	1a26c <__cxa_demangle+0x8c>
   1a21e:	9b03      	ldr	r3, [sp, #12]
   1a220:	9c00      	ldr	r4, [sp, #0]
   1a222:	1e1d      	subs	r5, r3, #0
   1a224:	bf18      	it	ne
   1a226:	2501      	movne	r5, #1
   1a228:	4628      	mov	r0, r5
   1a22a:	2c00      	cmp	r4, #0
   1a22c:	d022      	beq.n	1a274 <__cxa_demangle+0x94>
   1a22e:	2e00      	cmp	r6, #0
   1a230:	d02b      	beq.n	1a28a <__cxa_demangle+0xaa>
   1a232:	4620      	mov	r0, r4
   1a234:	f006 ff50 	bl	210d8 <strlen>
   1a238:	683b      	ldr	r3, [r7, #0]
   1a23a:	4298      	cmp	r0, r3
   1a23c:	d211      	bcs.n	1a262 <__cxa_demangle+0x82>
   1a23e:	4621      	mov	r1, r4
   1a240:	4630      	mov	r0, r6
   1a242:	f006 ff41 	bl	210c8 <strcpy>
   1a246:	4620      	mov	r0, r4
   1a248:	f006 f922 	bl	20490 <free>
   1a24c:	4634      	mov	r4, r6
   1a24e:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a252:	d002      	beq.n	1a25a <__cxa_demangle+0x7a>
   1a254:	2300      	movs	r3, #0
   1a256:	f8c8 3000 	str.w	r3, [r8]
   1a25a:	4620      	mov	r0, r4
   1a25c:	b004      	add	sp, #16
   1a25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a262:	4630      	mov	r0, r6
   1a264:	f006 f914 	bl	20490 <free>
   1a268:	603d      	str	r5, [r7, #0]
   1a26a:	e7f0      	b.n	1a24e <__cxa_demangle+0x6e>
   1a26c:	9800      	ldr	r0, [sp, #0]
   1a26e:	f006 f90f 	bl	20490 <free>
   1a272:	4620      	mov	r0, r4
   1a274:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a278:	d00e      	beq.n	1a298 <__cxa_demangle+0xb8>
   1a27a:	2801      	cmp	r0, #1
   1a27c:	d01c      	beq.n	1a2b8 <__cxa_demangle+0xd8>
   1a27e:	f06f 0301 	mvn.w	r3, #1	; 0x1
   1a282:	f8c8 3000 	str.w	r3, [r8]
   1a286:	2400      	movs	r4, #0
   1a288:	e7e7      	b.n	1a25a <__cxa_demangle+0x7a>
   1a28a:	2f00      	cmp	r7, #0
   1a28c:	d0df      	beq.n	1a24e <__cxa_demangle+0x6e>
   1a28e:	603d      	str	r5, [r7, #0]
   1a290:	e7dd      	b.n	1a24e <__cxa_demangle+0x6e>
   1a292:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a296:	d101      	bne.n	1a29c <__cxa_demangle+0xbc>
   1a298:	2400      	movs	r4, #0
   1a29a:	e7de      	b.n	1a25a <__cxa_demangle+0x7a>
   1a29c:	f06f 0302 	mvn.w	r3, #2	; 0x2
   1a2a0:	f8c8 3000 	str.w	r3, [r8]
   1a2a4:	2400      	movs	r4, #0
   1a2a6:	e7d8      	b.n	1a25a <__cxa_demangle+0x7a>
   1a2a8:	2b00      	cmp	r3, #0
   1a2aa:	d0f5      	beq.n	1a298 <__cxa_demangle+0xb8>
   1a2ac:	f06f 0302 	mvn.w	r3, #2	; 0x2
   1a2b0:	f8c8 3000 	str.w	r3, [r8]
   1a2b4:	4604      	mov	r4, r0
   1a2b6:	e7d0      	b.n	1a25a <__cxa_demangle+0x7a>
   1a2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a2bc:	f8c8 3000 	str.w	r3, [r8]
   1a2c0:	2400      	movs	r4, #0
   1a2c2:	e7ca      	b.n	1a25a <__cxa_demangle+0x7a>
   1a2c4:	00018d91 	.word	0x00018d91

0001a2c8 <__aeabi_drsub>:
   1a2c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1a2cc:	e002      	b.n	1a2d4 <__adddf3>
   1a2ce:	46c0      	nop			(mov r8, r8)

0001a2d0 <__aeabi_dsub>:
   1a2d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001a2d4 <__adddf3>:
   1a2d4:	b530      	push	{r4, r5, lr}
   1a2d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1a2da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1a2de:	ea94 0f05 	teq	r4, r5
   1a2e2:	bf08      	it	eq
   1a2e4:	ea90 0f02 	teqeq	r0, r2
   1a2e8:	bf1f      	itttt	ne
   1a2ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   1a2ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   1a2f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1a2f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a2fa:	f000 80e2 	beq.w	1a4c2 <__adddf3+0x1ee>
   1a2fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1a302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1a306:	bfb8      	it	lt
   1a308:	426d      	neglt	r5, r5
   1a30a:	dd0c      	ble.n	1a326 <__adddf3+0x52>
   1a30c:	442c      	add	r4, r5
   1a30e:	ea80 0202 	eor.w	r2, r0, r2
   1a312:	ea81 0303 	eor.w	r3, r1, r3
   1a316:	ea82 0000 	eor.w	r0, r2, r0
   1a31a:	ea83 0101 	eor.w	r1, r3, r1
   1a31e:	ea80 0202 	eor.w	r2, r0, r2
   1a322:	ea81 0303 	eor.w	r3, r1, r3
   1a326:	2d36      	cmp	r5, #54
   1a328:	bf88      	it	hi
   1a32a:	bd30      	pophi	{r4, r5, pc}
   1a32c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a330:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1a338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1a33c:	d002      	beq.n	1a344 <__adddf3+0x70>
   1a33e:	4240      	negs	r0, r0
   1a340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1a348:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a34c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1a350:	d002      	beq.n	1a358 <__adddf3+0x84>
   1a352:	4252      	negs	r2, r2
   1a354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1a358:	ea94 0f05 	teq	r4, r5
   1a35c:	f000 80a7 	beq.w	1a4ae <__adddf3+0x1da>
   1a360:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   1a364:	f1d5 0e20 	rsbs	lr, r5, #32	; 0x20
   1a368:	db0d      	blt.n	1a386 <__adddf3+0xb2>
   1a36a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1a36e:	fa22 f205 	lsr.w	r2, r2, r5
   1a372:	1880      	adds	r0, r0, r2
   1a374:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1a378:	fa03 f20e 	lsl.w	r2, r3, lr
   1a37c:	1880      	adds	r0, r0, r2
   1a37e:	fa43 f305 	asr.w	r3, r3, r5
   1a382:	4159      	adcs	r1, r3
   1a384:	e00e      	b.n	1a3a4 <__adddf3+0xd0>
   1a386:	f1a5 0520 	sub.w	r5, r5, #32	; 0x20
   1a38a:	f10e 0e20 	add.w	lr, lr, #32	; 0x20
   1a38e:	2a01      	cmp	r2, #1
   1a390:	fa03 fc0e 	lsl.w	ip, r3, lr
   1a394:	bf28      	it	cs
   1a396:	f04c 0c02 	orrcs.w	ip, ip, #2	; 0x2
   1a39a:	fa43 f305 	asr.w	r3, r3, r5
   1a39e:	18c0      	adds	r0, r0, r3
   1a3a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1a3a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a3a8:	d507      	bpl.n	1a3ba <__adddf3+0xe6>
   1a3aa:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1a3ae:	f1dc 0c00 	rsbs	ip, ip, #0	; 0x0
   1a3b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   1a3b6:	eb6e 0101 	sbc.w	r1, lr, r1
   1a3ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1a3be:	d31b      	bcc.n	1a3f8 <__adddf3+0x124>
   1a3c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1a3c4:	d30c      	bcc.n	1a3e0 <__adddf3+0x10c>
   1a3c6:	0849      	lsrs	r1, r1, #1
   1a3c8:	ea5f 0030 	movs.w	r0, r0, rrx
   1a3cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1a3d0:	f104 0401 	add.w	r4, r4, #1	; 0x1
   1a3d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1a3d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1a3dc:	f080 809a 	bcs.w	1a514 <__adddf3+0x240>
   1a3e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a3e4:	bf08      	it	eq
   1a3e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a3ea:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1a3ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a3f2:	ea41 0105 	orr.w	r1, r1, r5
   1a3f6:	bd30      	pop	{r4, r5, pc}
   1a3f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1a3fc:	4140      	adcs	r0, r0
   1a3fe:	eb41 0101 	adc.w	r1, r1, r1
   1a402:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a406:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   1a40a:	d1e9      	bne.n	1a3e0 <__adddf3+0x10c>
   1a40c:	f091 0f00 	teq	r1, #0	; 0x0
   1a410:	bf04      	itt	eq
   1a412:	4601      	moveq	r1, r0
   1a414:	2000      	moveq	r0, #0
   1a416:	fab1 f381 	clz	r3, r1
   1a41a:	bf08      	it	eq
   1a41c:	3320      	addeq	r3, #32
   1a41e:	f1a3 030b 	sub.w	r3, r3, #11	; 0xb
   1a422:	f1b3 0220 	subs.w	r2, r3, #32	; 0x20
   1a426:	da0c      	bge.n	1a442 <__adddf3+0x16e>
   1a428:	320c      	adds	r2, #12
   1a42a:	dd08      	ble.n	1a43e <__adddf3+0x16a>
   1a42c:	f102 0c14 	add.w	ip, r2, #20	; 0x14
   1a430:	f1c2 020c 	rsb	r2, r2, #12	; 0xc
   1a434:	fa01 f00c 	lsl.w	r0, r1, ip
   1a438:	fa21 f102 	lsr.w	r1, r1, r2
   1a43c:	e00c      	b.n	1a458 <__adddf3+0x184>
   1a43e:	f102 0214 	add.w	r2, r2, #20	; 0x14
   1a442:	bfd8      	it	le
   1a444:	f1c2 0c20 	rsble	ip, r2, #32	; 0x20
   1a448:	fa01 f102 	lsl.w	r1, r1, r2
   1a44c:	fa20 fc0c 	lsr.w	ip, r0, ip
   1a450:	bfdc      	itt	le
   1a452:	ea41 010c 	orrle.w	r1, r1, ip
   1a456:	4090      	lslle	r0, r2
   1a458:	1ae4      	subs	r4, r4, r3
   1a45a:	bfa2      	ittt	ge
   1a45c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1a460:	4329      	orrge	r1, r5
   1a462:	bd30      	popge	{r4, r5, pc}
   1a464:	ea6f 0404 	mvn.w	r4, r4
   1a468:	3c1f      	subs	r4, #31
   1a46a:	da1c      	bge.n	1a4a6 <__adddf3+0x1d2>
   1a46c:	340c      	adds	r4, #12
   1a46e:	dc0e      	bgt.n	1a48e <__adddf3+0x1ba>
   1a470:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1a474:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1a478:	fa20 f004 	lsr.w	r0, r0, r4
   1a47c:	fa01 f302 	lsl.w	r3, r1, r2
   1a480:	ea40 0003 	orr.w	r0, r0, r3
   1a484:	fa21 f304 	lsr.w	r3, r1, r4
   1a488:	ea45 0103 	orr.w	r1, r5, r3
   1a48c:	bd30      	pop	{r4, r5, pc}
   1a48e:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1a492:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1a496:	fa20 f002 	lsr.w	r0, r0, r2
   1a49a:	fa01 f304 	lsl.w	r3, r1, r4
   1a49e:	ea40 0003 	orr.w	r0, r0, r3
   1a4a2:	4629      	mov	r1, r5
   1a4a4:	bd30      	pop	{r4, r5, pc}
   1a4a6:	fa21 f004 	lsr.w	r0, r1, r4
   1a4aa:	4629      	mov	r1, r5
   1a4ac:	bd30      	pop	{r4, r5, pc}
   1a4ae:	f094 0f00 	teq	r4, #0	; 0x0
   1a4b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a4b6:	bf06      	itte	eq
   1a4b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a4bc:	3401      	addeq	r4, #1
   1a4be:	3d01      	subne	r5, #1
   1a4c0:	e74e      	b.n	1a360 <__adddf3+0x8c>
   1a4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a4c6:	bf18      	it	ne
   1a4c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a4cc:	d029      	beq.n	1a522 <__adddf3+0x24e>
   1a4ce:	ea94 0f05 	teq	r4, r5
   1a4d2:	bf08      	it	eq
   1a4d4:	ea90 0f02 	teqeq	r0, r2
   1a4d8:	d005      	beq.n	1a4e6 <__adddf3+0x212>
   1a4da:	ea54 0c00 	orrs.w	ip, r4, r0
   1a4de:	bf04      	itt	eq
   1a4e0:	4619      	moveq	r1, r3
   1a4e2:	4610      	moveq	r0, r2
   1a4e4:	bd30      	pop	{r4, r5, pc}
   1a4e6:	ea91 0f03 	teq	r1, r3
   1a4ea:	bf1e      	ittt	ne
   1a4ec:	2100      	movne	r1, #0
   1a4ee:	2000      	movne	r0, #0
   1a4f0:	bd30      	popne	{r4, r5, pc}
   1a4f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a4f6:	d105      	bne.n	1a504 <__adddf3+0x230>
   1a4f8:	0040      	lsls	r0, r0, #1
   1a4fa:	4149      	adcs	r1, r1
   1a4fc:	bf28      	it	cs
   1a4fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a502:	bd30      	pop	{r4, r5, pc}
   1a504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a508:	bf3c      	itt	cc
   1a50a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a50e:	bd30      	popcc	{r4, r5, pc}
   1a510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a51c:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a520:	bd30      	pop	{r4, r5, pc}
   1a522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a526:	bf1a      	itte	ne
   1a528:	4619      	movne	r1, r3
   1a52a:	4610      	movne	r0, r2
   1a52c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a530:	bf1c      	itt	ne
   1a532:	460b      	movne	r3, r1
   1a534:	4602      	movne	r2, r0
   1a536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a53a:	bf06      	itte	eq
   1a53c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a540:	ea91 0f03 	teqeq	r1, r3
   1a544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a548:	bd30      	pop	{r4, r5, pc}
   1a54a:	46c0      	nop			(mov r8, r8)

0001a54c <__aeabi_ui2d>:
   1a54c:	f090 0f00 	teq	r0, #0	; 0x0
   1a550:	bf04      	itt	eq
   1a552:	2100      	moveq	r1, #0
   1a554:	4770      	bxeq	lr
   1a556:	b530      	push	{r4, r5, lr}
   1a558:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a55c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a560:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a564:	f04f 0100 	mov.w	r1, #0	; 0x0
   1a568:	e750      	b.n	1a40c <__adddf3+0x138>
   1a56a:	46c0      	nop			(mov r8, r8)

0001a56c <__aeabi_i2d>:
   1a56c:	f090 0f00 	teq	r0, #0	; 0x0
   1a570:	bf04      	itt	eq
   1a572:	2100      	moveq	r1, #0
   1a574:	4770      	bxeq	lr
   1a576:	b530      	push	{r4, r5, lr}
   1a578:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a57c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a584:	bf48      	it	mi
   1a586:	4240      	negmi	r0, r0
   1a588:	f04f 0100 	mov.w	r1, #0	; 0x0
   1a58c:	e73e      	b.n	1a40c <__adddf3+0x138>
   1a58e:	46c0      	nop			(mov r8, r8)

0001a590 <__aeabi_f2d>:
   1a590:	0042      	lsls	r2, r0, #1
   1a592:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a596:	ea4f 0131 	mov.w	r1, r1, rrx
   1a59a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a59e:	bf1f      	itttt	ne
   1a5a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a5a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a5a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a5ac:	4770      	bxne	lr
   1a5ae:	f092 0f00 	teq	r2, #0	; 0x0
   1a5b2:	bf14      	ite	ne
   1a5b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a5b8:	4770      	bxeq	lr
   1a5ba:	b530      	push	{r4, r5, lr}
   1a5bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   1a5c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a5c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a5c8:	e720      	b.n	1a40c <__adddf3+0x138>
   1a5ca:	46c0      	nop			(mov r8, r8)

0001a5cc <__aeabi_ul2d>:
   1a5cc:	ea50 0201 	orrs.w	r2, r0, r1
   1a5d0:	bf08      	it	eq
   1a5d2:	4770      	bxeq	lr
   1a5d4:	b530      	push	{r4, r5, lr}
   1a5d6:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a5da:	e00a      	b.n	1a5f2 <__aeabi_l2d+0x16>

0001a5dc <__aeabi_l2d>:
   1a5dc:	ea50 0201 	orrs.w	r2, r0, r1
   1a5e0:	bf08      	it	eq
   1a5e2:	4770      	bxeq	lr
   1a5e4:	b530      	push	{r4, r5, lr}
   1a5e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1a5ea:	d502      	bpl.n	1a5f2 <__aeabi_l2d+0x16>
   1a5ec:	4240      	negs	r0, r0
   1a5ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a5f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a5f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a5fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1a5fe:	f43f aedc 	beq.w	1a3ba <__adddf3+0xe6>
   1a602:	f04f 0203 	mov.w	r2, #3	; 0x3
   1a606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a60a:	bf18      	it	ne
   1a60c:	3203      	addne	r2, #3
   1a60e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a612:	bf18      	it	ne
   1a614:	3203      	addne	r2, #3
   1a616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1a61a:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1a61e:	fa00 fc03 	lsl.w	ip, r0, r3
   1a622:	fa20 f002 	lsr.w	r0, r0, r2
   1a626:	fa01 fe03 	lsl.w	lr, r1, r3
   1a62a:	ea40 000e 	orr.w	r0, r0, lr
   1a62e:	fa21 f102 	lsr.w	r1, r1, r2
   1a632:	4414      	add	r4, r2
   1a634:	e6c1      	b.n	1a3ba <__adddf3+0xe6>
   1a636:	46c0      	nop			(mov r8, r8)

0001a638 <__aeabi_dmul>:
   1a638:	b570      	push	{r4, r5, r6, lr}
   1a63a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a63e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a646:	bf1d      	ittte	ne
   1a648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a64c:	ea94 0f0c 	teqne	r4, ip
   1a650:	ea95 0f0c 	teqne	r5, ip
   1a654:	f000 f8de 	bleq	1a814 <__aeabi_dmul+0x1dc>
   1a658:	442c      	add	r4, r5
   1a65a:	ea81 0603 	eor.w	r6, r1, r3
   1a65e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1a662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1a666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1a66a:	bf18      	it	ne
   1a66c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1a670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1a678:	d038      	beq.n	1a6ec <__aeabi_dmul+0xb4>
   1a67a:	fba0 ce02 	umull	ip, lr, r0, r2
   1a67e:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a682:	fbe1 e502 	umlal	lr, r5, r1, r2
   1a686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1a68a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1a68e:	f04f 0600 	mov.w	r6, #0	; 0x0
   1a692:	fbe1 5603 	umlal	r5, r6, r1, r3
   1a696:	f09c 0f00 	teq	ip, #0	; 0x0
   1a69a:	bf18      	it	ne
   1a69c:	f04e 0e01 	orrne.w	lr, lr, #1	; 0x1
   1a6a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1a6a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1a6a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1a6ac:	d204      	bcs.n	1a6b8 <__aeabi_dmul+0x80>
   1a6ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1a6b2:	416d      	adcs	r5, r5
   1a6b4:	eb46 0606 	adc.w	r6, r6, r6
   1a6b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1a6bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1a6c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1a6c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1a6c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1a6cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a6d0:	bf88      	it	hi
   1a6d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a6d6:	d81e      	bhi.n	1a716 <__aeabi_dmul+0xde>
   1a6d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1a6dc:	bf08      	it	eq
   1a6de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1a6e2:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1a6e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a6ea:	bd70      	pop	{r4, r5, r6, pc}
   1a6ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1a6f0:	ea46 0101 	orr.w	r1, r6, r1
   1a6f4:	ea40 0002 	orr.w	r0, r0, r2
   1a6f8:	ea81 0103 	eor.w	r1, r1, r3
   1a6fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1a700:	bfc2      	ittt	gt
   1a702:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a70a:	bd70      	popgt	{r4, r5, r6, pc}
   1a70c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a710:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1a714:	3c01      	subs	r4, #1
   1a716:	f300 80ab 	bgt.w	1a870 <__aeabi_dmul+0x238>
   1a71a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1a71e:	bfde      	ittt	le
   1a720:	2000      	movle	r0, #0
   1a722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1a726:	bd70      	pople	{r4, r5, r6, pc}
   1a728:	f1c4 0400 	rsb	r4, r4, #0	; 0x0
   1a72c:	3c20      	subs	r4, #32
   1a72e:	da35      	bge.n	1a79c <__aeabi_dmul+0x164>
   1a730:	340c      	adds	r4, #12
   1a732:	dc1b      	bgt.n	1a76c <__aeabi_dmul+0x134>
   1a734:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1a738:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1a73c:	fa00 f305 	lsl.w	r3, r0, r5
   1a740:	fa20 f004 	lsr.w	r0, r0, r4
   1a744:	fa01 f205 	lsl.w	r2, r1, r5
   1a748:	ea40 0002 	orr.w	r0, r0, r2
   1a74c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1a750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1a758:	fa21 f604 	lsr.w	r6, r1, r4
   1a75c:	eb42 0106 	adc.w	r1, r2, r6
   1a760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a764:	bf08      	it	eq
   1a766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a76a:	bd70      	pop	{r4, r5, r6, pc}
   1a76c:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1a770:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1a774:	fa00 f304 	lsl.w	r3, r0, r4
   1a778:	fa20 f005 	lsr.w	r0, r0, r5
   1a77c:	fa01 f204 	lsl.w	r2, r1, r4
   1a780:	ea40 0002 	orr.w	r0, r0, r2
   1a784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1a78c:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1a790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a794:	bf08      	it	eq
   1a796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a79a:	bd70      	pop	{r4, r5, r6, pc}
   1a79c:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1a7a0:	fa00 f205 	lsl.w	r2, r0, r5
   1a7a4:	ea4e 0e02 	orr.w	lr, lr, r2
   1a7a8:	fa20 f304 	lsr.w	r3, r0, r4
   1a7ac:	fa01 f205 	lsl.w	r2, r1, r5
   1a7b0:	ea43 0302 	orr.w	r3, r3, r2
   1a7b4:	fa21 f004 	lsr.w	r0, r1, r4
   1a7b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a7bc:	fa21 f204 	lsr.w	r2, r1, r4
   1a7c0:	ea20 0002 	bic.w	r0, r0, r2
   1a7c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1a7c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1a7cc:	bf08      	it	eq
   1a7ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1a7d2:	bd70      	pop	{r4, r5, r6, pc}
   1a7d4:	f094 0f00 	teq	r4, #0	; 0x0
   1a7d8:	d10f      	bne.n	1a7fa <__aeabi_dmul+0x1c2>
   1a7da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1a7de:	0040      	lsls	r0, r0, #1
   1a7e0:	eb41 0101 	adc.w	r1, r1, r1
   1a7e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a7e8:	bf08      	it	eq
   1a7ea:	3c01      	subeq	r4, #1
   1a7ec:	d0f7      	beq.n	1a7de <__aeabi_dmul+0x1a6>
   1a7ee:	ea41 0106 	orr.w	r1, r1, r6
   1a7f2:	f095 0f00 	teq	r5, #0	; 0x0
   1a7f6:	bf18      	it	ne
   1a7f8:	46f7      	movne	pc, lr
   1a7fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1a7fe:	0052      	lsls	r2, r2, #1
   1a800:	eb43 0303 	adc.w	r3, r3, r3
   1a804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1a808:	bf08      	it	eq
   1a80a:	3d01      	subeq	r5, #1
   1a80c:	d0f7      	beq.n	1a7fe <__aeabi_dmul+0x1c6>
   1a80e:	ea43 0306 	orr.w	r3, r3, r6
   1a812:	46f7      	mov	pc, lr
   1a814:	ea94 0f0c 	teq	r4, ip
   1a818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a81c:	bf18      	it	ne
   1a81e:	ea95 0f0c 	teqne	r5, ip
   1a822:	d00c      	beq.n	1a83e <__aeabi_dmul+0x206>
   1a824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a828:	bf18      	it	ne
   1a82a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a82e:	d1d1      	bne.n	1a7d4 <__aeabi_dmul+0x19c>
   1a830:	ea81 0103 	eor.w	r1, r1, r3
   1a834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a838:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a83c:	bd70      	pop	{r4, r5, r6, pc}
   1a83e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1a842:	bf06      	itte	eq
   1a844:	4610      	moveq	r0, r2
   1a846:	4619      	moveq	r1, r3
   1a848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1a84c:	d019      	beq.n	1a882 <__aeabi_dmul+0x24a>
   1a84e:	ea94 0f0c 	teq	r4, ip
   1a852:	d102      	bne.n	1a85a <__aeabi_dmul+0x222>
   1a854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1a858:	d113      	bne.n	1a882 <__aeabi_dmul+0x24a>
   1a85a:	ea95 0f0c 	teq	r5, ip
   1a85e:	d105      	bne.n	1a86c <__aeabi_dmul+0x234>
   1a860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1a864:	bf1c      	itt	ne
   1a866:	4610      	movne	r0, r2
   1a868:	4619      	movne	r1, r3
   1a86a:	d10a      	bne.n	1a882 <__aeabi_dmul+0x24a>
   1a86c:	ea81 0103 	eor.w	r1, r1, r3
   1a870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1a874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a87c:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a880:	bd70      	pop	{r4, r5, r6, pc}
   1a882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1a886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1a88a:	bd70      	pop	{r4, r5, r6, pc}

0001a88c <__aeabi_ddiv>:
   1a88c:	b570      	push	{r4, r5, r6, lr}
   1a88e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1a892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1a896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1a89a:	bf1d      	ittte	ne
   1a89c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1a8a0:	ea94 0f0c 	teqne	r4, ip
   1a8a4:	ea95 0f0c 	teqne	r5, ip
   1a8a8:	f000 f8a7 	bleq	1a9fa <__aeabi_ddiv+0x16e>
   1a8ac:	eba4 0405 	sub.w	r4, r4, r5
   1a8b0:	ea81 0e03 	eor.w	lr, r1, r3
   1a8b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1a8b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a8bc:	f000 8088 	beq.w	1a9d0 <__aeabi_ddiv+0x144>
   1a8c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a8c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1a8c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1a8cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a8d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1a8d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1a8d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1a8dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1a8e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1a8e4:	429d      	cmp	r5, r3
   1a8e6:	bf08      	it	eq
   1a8e8:	4296      	cmpeq	r6, r2
   1a8ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1a8ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1a8f2:	d202      	bcs.n	1a8fa <__aeabi_ddiv+0x6e>
   1a8f4:	085b      	lsrs	r3, r3, #1
   1a8f6:	ea4f 0232 	mov.w	r2, r2, rrx
   1a8fa:	1ab6      	subs	r6, r6, r2
   1a8fc:	eb65 0503 	sbc.w	r5, r5, r3
   1a900:	085b      	lsrs	r3, r3, #1
   1a902:	ea4f 0232 	mov.w	r2, r2, rrx
   1a906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1a90a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1a90e:	ebb6 0e02 	subs.w	lr, r6, r2
   1a912:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a916:	bf22      	ittt	cs
   1a918:	1ab6      	subcs	r6, r6, r2
   1a91a:	4675      	movcs	r5, lr
   1a91c:	ea40 000c 	orrcs.w	r0, r0, ip
   1a920:	085b      	lsrs	r3, r3, #1
   1a922:	ea4f 0232 	mov.w	r2, r2, rrx
   1a926:	ebb6 0e02 	subs.w	lr, r6, r2
   1a92a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a92e:	bf22      	ittt	cs
   1a930:	1ab6      	subcs	r6, r6, r2
   1a932:	4675      	movcs	r5, lr
   1a934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1a938:	085b      	lsrs	r3, r3, #1
   1a93a:	ea4f 0232 	mov.w	r2, r2, rrx
   1a93e:	ebb6 0e02 	subs.w	lr, r6, r2
   1a942:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a946:	bf22      	ittt	cs
   1a948:	1ab6      	subcs	r6, r6, r2
   1a94a:	4675      	movcs	r5, lr
   1a94c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1a950:	085b      	lsrs	r3, r3, #1
   1a952:	ea4f 0232 	mov.w	r2, r2, rrx
   1a956:	ebb6 0e02 	subs.w	lr, r6, r2
   1a95a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1a95e:	bf22      	ittt	cs
   1a960:	1ab6      	subcs	r6, r6, r2
   1a962:	4675      	movcs	r5, lr
   1a964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1a968:	ea55 0e06 	orrs.w	lr, r5, r6
   1a96c:	d018      	beq.n	1a9a0 <__aeabi_ddiv+0x114>
   1a96e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1a972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1a976:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1a97a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1a97e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1a982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1a986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1a98a:	d1c0      	bne.n	1a90e <__aeabi_ddiv+0x82>
   1a98c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a990:	d10b      	bne.n	1a9aa <__aeabi_ddiv+0x11e>
   1a992:	ea41 0100 	orr.w	r1, r1, r0
   1a996:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a99a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1a99e:	e7b6      	b.n	1a90e <__aeabi_ddiv+0x82>
   1a9a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a9a4:	bf04      	itt	eq
   1a9a6:	4301      	orreq	r1, r0
   1a9a8:	2000      	moveq	r0, #0
   1a9aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1a9ae:	bf88      	it	hi
   1a9b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1a9b4:	f63f aeaf 	bhi.w	1a716 <__aeabi_dmul+0xde>
   1a9b8:	ebb5 0c03 	subs.w	ip, r5, r3
   1a9bc:	bf04      	itt	eq
   1a9be:	ebb6 0c02 	subseq.w	ip, r6, r2
   1a9c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a9c6:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1a9ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a9ce:	bd70      	pop	{r4, r5, r6, pc}
   1a9d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1a9d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1a9d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1a9dc:	bfc2      	ittt	gt
   1a9de:	ebd4 050c 	rsbsgt	r5, r4, ip
   1a9e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1a9e6:	bd70      	popgt	{r4, r5, r6, pc}
   1a9e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1a9ec:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1a9f0:	3c01      	subs	r4, #1
   1a9f2:	e690      	b.n	1a716 <__aeabi_dmul+0xde>
   1a9f4:	ea45 0e06 	orr.w	lr, r5, r6
   1a9f8:	e68d      	b.n	1a716 <__aeabi_dmul+0xde>
   1a9fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1a9fe:	ea94 0f0c 	teq	r4, ip
   1aa02:	bf08      	it	eq
   1aa04:	ea95 0f0c 	teqeq	r5, ip
   1aa08:	f43f af3b 	beq.w	1a882 <__aeabi_dmul+0x24a>
   1aa0c:	ea94 0f0c 	teq	r4, ip
   1aa10:	d10a      	bne.n	1aa28 <__aeabi_ddiv+0x19c>
   1aa12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1aa16:	f47f af34 	bne.w	1a882 <__aeabi_dmul+0x24a>
   1aa1a:	ea95 0f0c 	teq	r5, ip
   1aa1e:	f47f af25 	bne.w	1a86c <__aeabi_dmul+0x234>
   1aa22:	4610      	mov	r0, r2
   1aa24:	4619      	mov	r1, r3
   1aa26:	e72c      	b.n	1a882 <__aeabi_dmul+0x24a>
   1aa28:	ea95 0f0c 	teq	r5, ip
   1aa2c:	d106      	bne.n	1aa3c <__aeabi_ddiv+0x1b0>
   1aa2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1aa32:	f43f aefd 	beq.w	1a830 <__aeabi_dmul+0x1f8>
   1aa36:	4610      	mov	r0, r2
   1aa38:	4619      	mov	r1, r3
   1aa3a:	e722      	b.n	1a882 <__aeabi_dmul+0x24a>
   1aa3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1aa40:	bf18      	it	ne
   1aa42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1aa46:	f47f aec5 	bne.w	1a7d4 <__aeabi_dmul+0x19c>
   1aa4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1aa4e:	f47f af0d 	bne.w	1a86c <__aeabi_dmul+0x234>
   1aa52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1aa56:	f47f aeeb 	bne.w	1a830 <__aeabi_dmul+0x1f8>
   1aa5a:	e712      	b.n	1a882 <__aeabi_dmul+0x24a>

0001aa5c <__gedf2>:
   1aa5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1aa60:	e006      	b.n	1aa70 <__cmpdf2+0x4>
   1aa62:	46c0      	nop			(mov r8, r8)

0001aa64 <__ledf2>:
   1aa64:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1aa68:	e002      	b.n	1aa70 <__cmpdf2+0x4>
   1aa6a:	46c0      	nop			(mov r8, r8)

0001aa6c <__cmpdf2>:
   1aa6c:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1aa70:	f84d cc04 	str.w	ip, [sp, #-4]
   1aa74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1aa78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1aa7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1aa80:	bf18      	it	ne
   1aa82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1aa86:	d01a      	beq.n	1aabe <__cmpdf2+0x52>
   1aa88:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1aa8c:	bf0c      	ite	eq
   1aa8e:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1aa92:	ea91 0f03 	teqne	r1, r3
   1aa96:	bf02      	ittt	eq
   1aa98:	ea90 0f02 	teqeq	r0, r2
   1aa9c:	2000      	moveq	r0, #0
   1aa9e:	4770      	bxeq	lr
   1aaa0:	f110 0f00 	cmn.w	r0, #0	; 0x0
   1aaa4:	ea91 0f03 	teq	r1, r3
   1aaa8:	bf58      	it	pl
   1aaaa:	4299      	cmppl	r1, r3
   1aaac:	bf08      	it	eq
   1aaae:	4290      	cmpeq	r0, r2
   1aab0:	bf2c      	ite	cs
   1aab2:	17d8      	asrcs	r0, r3, #31
   1aab4:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1aab8:	f040 0001 	orr.w	r0, r0, #1	; 0x1
   1aabc:	4770      	bx	lr
   1aabe:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1aac2:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1aac6:	d102      	bne.n	1aace <__cmpdf2+0x62>
   1aac8:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1aacc:	d107      	bne.n	1aade <__cmpdf2+0x72>
   1aace:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1aad2:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1aad6:	d1d7      	bne.n	1aa88 <__cmpdf2+0x1c>
   1aad8:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1aadc:	d0d4      	beq.n	1aa88 <__cmpdf2+0x1c>
   1aade:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1aae2:	4770      	bx	lr

0001aae4 <__aeabi_cdrcmple>:
   1aae4:	4684      	mov	ip, r0
   1aae6:	4610      	mov	r0, r2
   1aae8:	4662      	mov	r2, ip
   1aaea:	468c      	mov	ip, r1
   1aaec:	4619      	mov	r1, r3
   1aaee:	4663      	mov	r3, ip
   1aaf0:	e000      	b.n	1aaf4 <__aeabi_cdcmpeq>
   1aaf2:	46c0      	nop			(mov r8, r8)

0001aaf4 <__aeabi_cdcmpeq>:
   1aaf4:	b501      	push	{r0, lr}
   1aaf6:	f7ff ffb9 	bl	1aa6c <__cmpdf2>
   1aafa:	2800      	cmp	r0, #0
   1aafc:	bf48      	it	mi
   1aafe:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1ab02:	bd01      	pop	{r0, pc}

0001ab04 <__aeabi_dcmpeq>:
   1ab04:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ab08:	f7ff fff4 	bl	1aaf4 <__aeabi_cdcmpeq>
   1ab0c:	bf0c      	ite	eq
   1ab0e:	2001      	moveq	r0, #1
   1ab10:	2000      	movne	r0, #0
   1ab12:	f85d fb08 	ldr.w	pc, [sp], #8
   1ab16:	46c0      	nop			(mov r8, r8)

0001ab18 <__aeabi_dcmplt>:
   1ab18:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ab1c:	f7ff ffea 	bl	1aaf4 <__aeabi_cdcmpeq>
   1ab20:	bf34      	ite	cc
   1ab22:	2001      	movcc	r0, #1
   1ab24:	2000      	movcs	r0, #0
   1ab26:	f85d fb08 	ldr.w	pc, [sp], #8
   1ab2a:	46c0      	nop			(mov r8, r8)

0001ab2c <__aeabi_dcmple>:
   1ab2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ab30:	f7ff ffe0 	bl	1aaf4 <__aeabi_cdcmpeq>
   1ab34:	bf94      	ite	ls
   1ab36:	2001      	movls	r0, #1
   1ab38:	2000      	movhi	r0, #0
   1ab3a:	f85d fb08 	ldr.w	pc, [sp], #8
   1ab3e:	46c0      	nop			(mov r8, r8)

0001ab40 <__aeabi_dcmpge>:
   1ab40:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ab44:	f7ff ffce 	bl	1aae4 <__aeabi_cdrcmple>
   1ab48:	bf94      	ite	ls
   1ab4a:	2001      	movls	r0, #1
   1ab4c:	2000      	movhi	r0, #0
   1ab4e:	f85d fb08 	ldr.w	pc, [sp], #8
   1ab52:	46c0      	nop			(mov r8, r8)

0001ab54 <__aeabi_dcmpgt>:
   1ab54:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ab58:	f7ff ffc4 	bl	1aae4 <__aeabi_cdrcmple>
   1ab5c:	bf34      	ite	cc
   1ab5e:	2001      	movcc	r0, #1
   1ab60:	2000      	movcs	r0, #0
   1ab62:	f85d fb08 	ldr.w	pc, [sp], #8
   1ab66:	46c0      	nop			(mov r8, r8)

0001ab68 <__aeabi_d2iz>:
   1ab68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ab6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ab70:	d215      	bcs.n	1ab9e <__aeabi_d2iz+0x36>
   1ab72:	d511      	bpl.n	1ab98 <__aeabi_d2iz+0x30>
   1ab74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ab78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1ab7c:	d912      	bls.n	1aba4 <__aeabi_d2iz+0x3c>
   1ab7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ab82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ab86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1ab8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1ab8e:	fa23 f002 	lsr.w	r0, r3, r2
   1ab92:	bf18      	it	ne
   1ab94:	4240      	negne	r0, r0
   1ab96:	4770      	bx	lr
   1ab98:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ab9c:	4770      	bx	lr
   1ab9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1aba2:	d105      	bne.n	1abb0 <__aeabi_d2iz+0x48>
   1aba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1aba8:	bf08      	it	eq
   1abaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1abae:	4770      	bx	lr
   1abb0:	f04f 0000 	mov.w	r0, #0	; 0x0
   1abb4:	4770      	bx	lr
   1abb6:	46c0      	nop			(mov r8, r8)

0001abb8 <__aeabi_d2f>:
   1abb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1abbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1abc0:	bf24      	itt	cs
   1abc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1abc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1abca:	d90d      	bls.n	1abe8 <__aeabi_d2f+0x30>
   1abcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1abd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1abd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1abd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1abdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1abe0:	bf08      	it	eq
   1abe2:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1abe6:	4770      	bx	lr
   1abe8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1abec:	d121      	bne.n	1ac32 <__aeabi_d2f+0x7a>
   1abee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1abf2:	bfbc      	itt	lt
   1abf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1abf8:	4770      	bxlt	lr
   1abfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1abfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1ac02:	f1c2 0218 	rsb	r2, r2, #24	; 0x18
   1ac06:	f1c2 0c20 	rsb	ip, r2, #32	; 0x20
   1ac0a:	fa10 f30c 	lsls.w	r3, r0, ip
   1ac0e:	fa20 f002 	lsr.w	r0, r0, r2
   1ac12:	bf18      	it	ne
   1ac14:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1ac18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ac1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ac20:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ac24:	ea40 000c 	orr.w	r0, r0, ip
   1ac28:	fa23 f302 	lsr.w	r3, r3, r2
   1ac2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ac30:	e7cc      	b.n	1abcc <__aeabi_d2f+0x14>
   1ac32:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ac36:	d107      	bne.n	1ac48 <__aeabi_d2f+0x90>
   1ac38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ac3c:	bf1e      	ittt	ne
   1ac3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ac42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ac46:	4770      	bxne	lr
   1ac48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ac4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ac50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ac54:	4770      	bx	lr
   1ac56:	46c0      	nop			(mov r8, r8)

0001ac58 <__aeabi_frsub>:
   1ac58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1ac5c:	e002      	b.n	1ac64 <__addsf3>
   1ac5e:	46c0      	nop			(mov r8, r8)

0001ac60 <__aeabi_fsub>:
   1ac60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001ac64 <__addsf3>:
   1ac64:	0042      	lsls	r2, r0, #1
   1ac66:	bf1f      	itttt	ne
   1ac68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1ac6c:	ea92 0f03 	teqne	r2, r3
   1ac70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1ac74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ac78:	d06a      	beq.n	1ad50 <__addsf3+0xec>
   1ac7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1ac7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1ac82:	bfc1      	itttt	gt
   1ac84:	18d2      	addgt	r2, r2, r3
   1ac86:	4041      	eorgt	r1, r0
   1ac88:	4048      	eorgt	r0, r1
   1ac8a:	4041      	eorgt	r1, r0
   1ac8c:	bfb8      	it	lt
   1ac8e:	425b      	neglt	r3, r3
   1ac90:	2b19      	cmp	r3, #25
   1ac92:	bf88      	it	hi
   1ac94:	4770      	bxhi	lr
   1ac96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1ac9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ac9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1aca2:	bf18      	it	ne
   1aca4:	4240      	negne	r0, r0
   1aca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1acaa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1acae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1acb2:	bf18      	it	ne
   1acb4:	4249      	negne	r1, r1
   1acb6:	ea92 0f03 	teq	r2, r3
   1acba:	d03f      	beq.n	1ad3c <__addsf3+0xd8>
   1acbc:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1acc0:	fa41 fc03 	asr.w	ip, r1, r3
   1acc4:	eb10 000c 	adds.w	r0, r0, ip
   1acc8:	f1c3 0320 	rsb	r3, r3, #32	; 0x20
   1accc:	fa01 f103 	lsl.w	r1, r1, r3
   1acd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1acd4:	d502      	bpl.n	1acdc <__addsf3+0x78>
   1acd6:	4249      	negs	r1, r1
   1acd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1acdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1ace0:	d313      	bcc.n	1ad0a <__addsf3+0xa6>
   1ace2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1ace6:	d306      	bcc.n	1acf6 <__addsf3+0x92>
   1ace8:	0840      	lsrs	r0, r0, #1
   1acea:	ea4f 0131 	mov.w	r1, r1, rrx
   1acee:	f102 0201 	add.w	r2, r2, #1	; 0x1
   1acf2:	2afe      	cmp	r2, #254
   1acf4:	d251      	bcs.n	1ad9a <__addsf3+0x136>
   1acf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1acfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1acfe:	bf08      	it	eq
   1ad00:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1ad04:	ea40 0003 	orr.w	r0, r0, r3
   1ad08:	4770      	bx	lr
   1ad0a:	0049      	lsls	r1, r1, #1
   1ad0c:	eb40 0000 	adc.w	r0, r0, r0
   1ad10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1ad14:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1ad18:	d1ed      	bne.n	1acf6 <__addsf3+0x92>
   1ad1a:	fab0 fc80 	clz	ip, r0
   1ad1e:	f1ac 0c08 	sub.w	ip, ip, #8	; 0x8
   1ad22:	ebb2 020c 	subs.w	r2, r2, ip
   1ad26:	fa00 f00c 	lsl.w	r0, r0, ip
   1ad2a:	bfaa      	itet	ge
   1ad2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1ad30:	4252      	neglt	r2, r2
   1ad32:	4318      	orrge	r0, r3
   1ad34:	bfbc      	itt	lt
   1ad36:	40d0      	lsrlt	r0, r2
   1ad38:	4318      	orrlt	r0, r3
   1ad3a:	4770      	bx	lr
   1ad3c:	f092 0f00 	teq	r2, #0	; 0x0
   1ad40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1ad44:	bf06      	itte	eq
   1ad46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1ad4a:	3201      	addeq	r2, #1
   1ad4c:	3b01      	subne	r3, #1
   1ad4e:	e7b5      	b.n	1acbc <__addsf3+0x58>
   1ad50:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1ad54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1ad58:	bf18      	it	ne
   1ad5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1ad5e:	d021      	beq.n	1ada4 <__addsf3+0x140>
   1ad60:	ea92 0f03 	teq	r2, r3
   1ad64:	d004      	beq.n	1ad70 <__addsf3+0x10c>
   1ad66:	f092 0f00 	teq	r2, #0	; 0x0
   1ad6a:	bf08      	it	eq
   1ad6c:	4608      	moveq	r0, r1
   1ad6e:	4770      	bx	lr
   1ad70:	ea90 0f01 	teq	r0, r1
   1ad74:	bf1c      	itt	ne
   1ad76:	2000      	movne	r0, #0
   1ad78:	4770      	bxne	lr
   1ad7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1ad7e:	d104      	bne.n	1ad8a <__addsf3+0x126>
   1ad80:	0040      	lsls	r0, r0, #1
   1ad82:	bf28      	it	cs
   1ad84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1ad88:	4770      	bx	lr
   1ad8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1ad8e:	bf3c      	itt	cc
   1ad90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1ad94:	4770      	bxcc	lr
   1ad96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1ad9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1ad9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ada2:	4770      	bx	lr
   1ada4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1ada8:	bf16      	itet	ne
   1adaa:	4608      	movne	r0, r1
   1adac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1adb0:	4601      	movne	r1, r0
   1adb2:	0242      	lsls	r2, r0, #9
   1adb4:	bf06      	itte	eq
   1adb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1adba:	ea90 0f01 	teqeq	r0, r1
   1adbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1adc2:	4770      	bx	lr

0001adc4 <__aeabi_ui2f>:
   1adc4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1adc8:	e004      	b.n	1add4 <__aeabi_i2f+0x8>
   1adca:	46c0      	nop			(mov r8, r8)

0001adcc <__aeabi_i2f>:
   1adcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1add0:	bf48      	it	mi
   1add2:	4240      	negmi	r0, r0
   1add4:	ea5f 0c00 	movs.w	ip, r0
   1add8:	bf08      	it	eq
   1adda:	4770      	bxeq	lr
   1addc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1ade0:	4601      	mov	r1, r0
   1ade2:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ade6:	e01c      	b.n	1ae22 <__aeabi_l2f+0x2a>

0001ade8 <__aeabi_ul2f>:
   1ade8:	ea50 0201 	orrs.w	r2, r0, r1
   1adec:	bf08      	it	eq
   1adee:	4770      	bxeq	lr
   1adf0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1adf4:	e00a      	b.n	1ae0c <__aeabi_l2f+0x14>
   1adf6:	46c0      	nop			(mov r8, r8)

0001adf8 <__aeabi_l2f>:
   1adf8:	ea50 0201 	orrs.w	r2, r0, r1
   1adfc:	bf08      	it	eq
   1adfe:	4770      	bxeq	lr
   1ae00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1ae04:	d502      	bpl.n	1ae0c <__aeabi_l2f+0x14>
   1ae06:	4240      	negs	r0, r0
   1ae08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ae0c:	ea5f 0c01 	movs.w	ip, r1
   1ae10:	bf02      	ittt	eq
   1ae12:	4684      	moveq	ip, r0
   1ae14:	4601      	moveq	r1, r0
   1ae16:	2000      	moveq	r0, #0
   1ae18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1ae1c:	bf08      	it	eq
   1ae1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1ae22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1ae26:	fabc f28c 	clz	r2, ip
   1ae2a:	3a08      	subs	r2, #8
   1ae2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1ae30:	db10      	blt.n	1ae54 <__aeabi_l2f+0x5c>
   1ae32:	fa01 fc02 	lsl.w	ip, r1, r2
   1ae36:	4463      	add	r3, ip
   1ae38:	fa00 fc02 	lsl.w	ip, r0, r2
   1ae3c:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1ae40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ae44:	fa20 f202 	lsr.w	r2, r0, r2
   1ae48:	eb43 0002 	adc.w	r0, r3, r2
   1ae4c:	bf08      	it	eq
   1ae4e:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1ae52:	4770      	bx	lr
   1ae54:	f102 0220 	add.w	r2, r2, #32	; 0x20
   1ae58:	fa01 fc02 	lsl.w	ip, r1, r2
   1ae5c:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1ae60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1ae64:	fa21 f202 	lsr.w	r2, r1, r2
   1ae68:	eb43 0002 	adc.w	r0, r3, r2
   1ae6c:	bf08      	it	eq
   1ae6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1ae72:	4770      	bx	lr

0001ae74 <__aeabi_fmul>:
   1ae74:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ae78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1ae7c:	bf1e      	ittt	ne
   1ae7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1ae82:	ea92 0f0c 	teqne	r2, ip
   1ae86:	ea93 0f0c 	teqne	r3, ip
   1ae8a:	d06f      	beq.n	1af6c <__aeabi_fmul+0xf8>
   1ae8c:	441a      	add	r2, r3
   1ae8e:	ea80 0c01 	eor.w	ip, r0, r1
   1ae92:	0240      	lsls	r0, r0, #9
   1ae94:	bf18      	it	ne
   1ae96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1ae9a:	d01e      	beq.n	1aeda <__aeabi_fmul+0x66>
   1ae9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1aea0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1aea4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1aea8:	fba0 3101 	umull	r3, r1, r0, r1
   1aeac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1aeb0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1aeb4:	bf3e      	ittt	cc
   1aeb6:	0049      	lslcc	r1, r1, #1
   1aeb8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1aebc:	005b      	lslcc	r3, r3, #1
   1aebe:	ea40 0001 	orr.w	r0, r0, r1
   1aec2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1aec6:	2afd      	cmp	r2, #253
   1aec8:	d81d      	bhi.n	1af06 <__aeabi_fmul+0x92>
   1aeca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1aece:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1aed2:	bf08      	it	eq
   1aed4:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1aed8:	4770      	bx	lr
   1aeda:	f090 0f00 	teq	r0, #0	; 0x0
   1aede:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1aee2:	bf08      	it	eq
   1aee4:	0249      	lsleq	r1, r1, #9
   1aee6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1aeea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1aeee:	3a7f      	subs	r2, #127
   1aef0:	bfc2      	ittt	gt
   1aef2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1aef6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1aefa:	4770      	bxgt	lr
   1aefc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1af00:	f04f 0300 	mov.w	r3, #0	; 0x0
   1af04:	3a01      	subs	r2, #1
   1af06:	dc5d      	bgt.n	1afc4 <__aeabi_fmul+0x150>
   1af08:	f112 0f19 	cmn.w	r2, #25	; 0x19
   1af0c:	bfdc      	itt	le
   1af0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1af12:	4770      	bxle	lr
   1af14:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1af18:	0041      	lsls	r1, r0, #1
   1af1a:	fa21 f102 	lsr.w	r1, r1, r2
   1af1e:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1af22:	fa00 fc02 	lsl.w	ip, r0, r2
   1af26:	ea5f 0031 	movs.w	r0, r1, rrx
   1af2a:	f140 0000 	adc.w	r0, r0, #0	; 0x0
   1af2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1af32:	bf08      	it	eq
   1af34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1af38:	4770      	bx	lr
   1af3a:	f092 0f00 	teq	r2, #0	; 0x0
   1af3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1af42:	bf02      	ittt	eq
   1af44:	0040      	lsleq	r0, r0, #1
   1af46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1af4a:	3a01      	subeq	r2, #1
   1af4c:	d0f9      	beq.n	1af42 <__aeabi_fmul+0xce>
   1af4e:	ea40 000c 	orr.w	r0, r0, ip
   1af52:	f093 0f00 	teq	r3, #0	; 0x0
   1af56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1af5a:	bf02      	ittt	eq
   1af5c:	0049      	lsleq	r1, r1, #1
   1af5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1af62:	3b01      	subeq	r3, #1
   1af64:	d0f9      	beq.n	1af5a <__aeabi_fmul+0xe6>
   1af66:	ea41 010c 	orr.w	r1, r1, ip
   1af6a:	e78f      	b.n	1ae8c <__aeabi_fmul+0x18>
   1af6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1af70:	ea92 0f0c 	teq	r2, ip
   1af74:	bf18      	it	ne
   1af76:	ea93 0f0c 	teqne	r3, ip
   1af7a:	d00a      	beq.n	1af92 <__aeabi_fmul+0x11e>
   1af7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1af80:	bf18      	it	ne
   1af82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1af86:	d1d8      	bne.n	1af3a <__aeabi_fmul+0xc6>
   1af88:	ea80 0001 	eor.w	r0, r0, r1
   1af8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1af90:	4770      	bx	lr
   1af92:	f090 0f00 	teq	r0, #0	; 0x0
   1af96:	bf17      	itett	ne
   1af98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1af9c:	4608      	moveq	r0, r1
   1af9e:	f091 0f00 	teqne	r1, #0	; 0x0
   1afa2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1afa6:	d014      	beq.n	1afd2 <__aeabi_fmul+0x15e>
   1afa8:	ea92 0f0c 	teq	r2, ip
   1afac:	d101      	bne.n	1afb2 <__aeabi_fmul+0x13e>
   1afae:	0242      	lsls	r2, r0, #9
   1afb0:	d10f      	bne.n	1afd2 <__aeabi_fmul+0x15e>
   1afb2:	ea93 0f0c 	teq	r3, ip
   1afb6:	d103      	bne.n	1afc0 <__aeabi_fmul+0x14c>
   1afb8:	024b      	lsls	r3, r1, #9
   1afba:	bf18      	it	ne
   1afbc:	4608      	movne	r0, r1
   1afbe:	d108      	bne.n	1afd2 <__aeabi_fmul+0x15e>
   1afc0:	ea80 0001 	eor.w	r0, r0, r1
   1afc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1afc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1afcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1afd0:	4770      	bx	lr
   1afd2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1afd6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1afda:	4770      	bx	lr

0001afdc <__aeabi_fdiv>:
   1afdc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1afe0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1afe4:	bf1e      	ittt	ne
   1afe6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1afea:	ea92 0f0c 	teqne	r2, ip
   1afee:	ea93 0f0c 	teqne	r3, ip
   1aff2:	d069      	beq.n	1b0c8 <__aeabi_fdiv+0xec>
   1aff4:	eba2 0203 	sub.w	r2, r2, r3
   1aff8:	ea80 0c01 	eor.w	ip, r0, r1
   1affc:	0249      	lsls	r1, r1, #9
   1affe:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1b002:	d037      	beq.n	1b074 <__aeabi_fdiv+0x98>
   1b004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b008:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1b00c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1b010:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1b014:	428b      	cmp	r3, r1
   1b016:	bf38      	it	cc
   1b018:	005b      	lslcc	r3, r3, #1
   1b01a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1b01e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1b022:	428b      	cmp	r3, r1
   1b024:	bf24      	itt	cs
   1b026:	1a5b      	subcs	r3, r3, r1
   1b028:	ea40 000c 	orrcs.w	r0, r0, ip
   1b02c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1b030:	bf24      	itt	cs
   1b032:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1b036:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1b03a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1b03e:	bf24      	itt	cs
   1b040:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1b044:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1b048:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1b04c:	bf24      	itt	cs
   1b04e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1b052:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1b056:	011b      	lsls	r3, r3, #4
   1b058:	bf18      	it	ne
   1b05a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1b05e:	d1e0      	bne.n	1b022 <__aeabi_fdiv+0x46>
   1b060:	2afd      	cmp	r2, #253
   1b062:	f63f af50 	bhi.w	1af06 <__aeabi_fmul+0x92>
   1b066:	428b      	cmp	r3, r1
   1b068:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b06c:	bf08      	it	eq
   1b06e:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1b072:	4770      	bx	lr
   1b074:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1b078:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1b07c:	327f      	adds	r2, #127
   1b07e:	bfc2      	ittt	gt
   1b080:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1b084:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1b088:	4770      	bxgt	lr
   1b08a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b08e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b092:	3a01      	subs	r2, #1
   1b094:	e737      	b.n	1af06 <__aeabi_fmul+0x92>
   1b096:	f092 0f00 	teq	r2, #0	; 0x0
   1b09a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1b09e:	bf02      	ittt	eq
   1b0a0:	0040      	lsleq	r0, r0, #1
   1b0a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1b0a6:	3a01      	subeq	r2, #1
   1b0a8:	d0f9      	beq.n	1b09e <__aeabi_fdiv+0xc2>
   1b0aa:	ea40 000c 	orr.w	r0, r0, ip
   1b0ae:	f093 0f00 	teq	r3, #0	; 0x0
   1b0b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1b0b6:	bf02      	ittt	eq
   1b0b8:	0049      	lsleq	r1, r1, #1
   1b0ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1b0be:	3b01      	subeq	r3, #1
   1b0c0:	d0f9      	beq.n	1b0b6 <__aeabi_fdiv+0xda>
   1b0c2:	ea41 010c 	orr.w	r1, r1, ip
   1b0c6:	e795      	b.n	1aff4 <__aeabi_fdiv+0x18>
   1b0c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1b0cc:	ea92 0f0c 	teq	r2, ip
   1b0d0:	d108      	bne.n	1b0e4 <__aeabi_fdiv+0x108>
   1b0d2:	0242      	lsls	r2, r0, #9
   1b0d4:	f47f af7d 	bne.w	1afd2 <__aeabi_fmul+0x15e>
   1b0d8:	ea93 0f0c 	teq	r3, ip
   1b0dc:	f47f af70 	bne.w	1afc0 <__aeabi_fmul+0x14c>
   1b0e0:	4608      	mov	r0, r1
   1b0e2:	e776      	b.n	1afd2 <__aeabi_fmul+0x15e>
   1b0e4:	ea93 0f0c 	teq	r3, ip
   1b0e8:	d104      	bne.n	1b0f4 <__aeabi_fdiv+0x118>
   1b0ea:	024b      	lsls	r3, r1, #9
   1b0ec:	f43f af4c 	beq.w	1af88 <__aeabi_fmul+0x114>
   1b0f0:	4608      	mov	r0, r1
   1b0f2:	e76e      	b.n	1afd2 <__aeabi_fmul+0x15e>
   1b0f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1b0f8:	bf18      	it	ne
   1b0fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1b0fe:	d1ca      	bne.n	1b096 <__aeabi_fdiv+0xba>
   1b100:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1b104:	f47f af5c 	bne.w	1afc0 <__aeabi_fmul+0x14c>
   1b108:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1b10c:	f47f af3c 	bne.w	1af88 <__aeabi_fmul+0x114>
   1b110:	e75f      	b.n	1afd2 <__aeabi_fmul+0x15e>
   1b112:	46c0      	nop			(mov r8, r8)

0001b114 <__gesf2>:
   1b114:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b118:	e006      	b.n	1b128 <__cmpsf2+0x4>
   1b11a:	46c0      	nop			(mov r8, r8)

0001b11c <__lesf2>:
   1b11c:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1b120:	e002      	b.n	1b128 <__cmpsf2+0x4>
   1b122:	46c0      	nop			(mov r8, r8)

0001b124 <__cmpsf2>:
   1b124:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1b128:	f84d cc04 	str.w	ip, [sp, #-4]
   1b12c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1b130:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b134:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b138:	bf18      	it	ne
   1b13a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b13e:	d010      	beq.n	1b162 <__cmpsf2+0x3e>
   1b140:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1b144:	bf18      	it	ne
   1b146:	ea90 0f01 	teqne	r0, r1
   1b14a:	bf58      	it	pl
   1b14c:	ebb2 0003 	subspl.w	r0, r2, r3
   1b150:	bf88      	it	hi
   1b152:	17c8      	asrhi	r0, r1, #31
   1b154:	bf38      	it	cc
   1b156:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1b15a:	bf18      	it	ne
   1b15c:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1b160:	4770      	bx	lr
   1b162:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b166:	d102      	bne.n	1b16e <__cmpsf2+0x4a>
   1b168:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1b16c:	d105      	bne.n	1b17a <__cmpsf2+0x56>
   1b16e:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1b172:	d1e5      	bne.n	1b140 <__cmpsf2+0x1c>
   1b174:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1b178:	d0e2      	beq.n	1b140 <__cmpsf2+0x1c>
   1b17a:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1b17e:	4770      	bx	lr

0001b180 <__aeabi_cfrcmple>:
   1b180:	4684      	mov	ip, r0
   1b182:	4608      	mov	r0, r1
   1b184:	4661      	mov	r1, ip
   1b186:	e7ff      	b.n	1b188 <__aeabi_cfcmpeq>

0001b188 <__aeabi_cfcmpeq>:
   1b188:	b50f      	push	{r0, r1, r2, r3, lr}
   1b18a:	f7ff ffcb 	bl	1b124 <__cmpsf2>
   1b18e:	2800      	cmp	r0, #0
   1b190:	bf48      	it	mi
   1b192:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1b196:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001b198 <__aeabi_fcmpeq>:
   1b198:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b19c:	f7ff fff4 	bl	1b188 <__aeabi_cfcmpeq>
   1b1a0:	bf0c      	ite	eq
   1b1a2:	2001      	moveq	r0, #1
   1b1a4:	2000      	movne	r0, #0
   1b1a6:	f85d fb08 	ldr.w	pc, [sp], #8
   1b1aa:	46c0      	nop			(mov r8, r8)

0001b1ac <__aeabi_fcmplt>:
   1b1ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b1b0:	f7ff ffea 	bl	1b188 <__aeabi_cfcmpeq>
   1b1b4:	bf34      	ite	cc
   1b1b6:	2001      	movcc	r0, #1
   1b1b8:	2000      	movcs	r0, #0
   1b1ba:	f85d fb08 	ldr.w	pc, [sp], #8
   1b1be:	46c0      	nop			(mov r8, r8)

0001b1c0 <__aeabi_fcmple>:
   1b1c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b1c4:	f7ff ffe0 	bl	1b188 <__aeabi_cfcmpeq>
   1b1c8:	bf94      	ite	ls
   1b1ca:	2001      	movls	r0, #1
   1b1cc:	2000      	movhi	r0, #0
   1b1ce:	f85d fb08 	ldr.w	pc, [sp], #8
   1b1d2:	46c0      	nop			(mov r8, r8)

0001b1d4 <__aeabi_fcmpge>:
   1b1d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b1d8:	f7ff ffd2 	bl	1b180 <__aeabi_cfrcmple>
   1b1dc:	bf94      	ite	ls
   1b1de:	2001      	movls	r0, #1
   1b1e0:	2000      	movhi	r0, #0
   1b1e2:	f85d fb08 	ldr.w	pc, [sp], #8
   1b1e6:	46c0      	nop			(mov r8, r8)

0001b1e8 <__aeabi_fcmpgt>:
   1b1e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b1ec:	f7ff ffc8 	bl	1b180 <__aeabi_cfrcmple>
   1b1f0:	bf34      	ite	cc
   1b1f2:	2001      	movcc	r0, #1
   1b1f4:	2000      	movcs	r0, #0
   1b1f6:	f85d fb08 	ldr.w	pc, [sp], #8
   1b1fa:	46c0      	nop			(mov r8, r8)

0001b1fc <__aeabi_f2iz>:
   1b1fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1b200:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1b204:	d30f      	bcc.n	1b226 <__aeabi_f2iz+0x2a>
   1b206:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1b20a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1b20e:	d90d      	bls.n	1b22c <__aeabi_f2iz+0x30>
   1b210:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1b214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b218:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1b21c:	fa23 f002 	lsr.w	r0, r3, r2
   1b220:	bf18      	it	ne
   1b222:	4240      	negne	r0, r0
   1b224:	4770      	bx	lr
   1b226:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b22a:	4770      	bx	lr
   1b22c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1b230:	d101      	bne.n	1b236 <__aeabi_f2iz+0x3a>
   1b232:	0242      	lsls	r2, r0, #9
   1b234:	d105      	bne.n	1b242 <__aeabi_f2iz+0x46>
   1b236:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1b23a:	bf08      	it	eq
   1b23c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1b240:	4770      	bx	lr
   1b242:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b246:	4770      	bx	lr

0001b248 <__aeabi_f2uiz>:
   1b248:	0042      	lsls	r2, r0, #1
   1b24a:	d20e      	bcs.n	1b26a <__aeabi_f2uiz+0x22>
   1b24c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1b250:	d30b      	bcc.n	1b26a <__aeabi_f2uiz+0x22>
   1b252:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1b256:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1b25a:	d409      	bmi.n	1b270 <__aeabi_f2uiz+0x28>
   1b25c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1b260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b264:	fa23 f002 	lsr.w	r0, r3, r2
   1b268:	4770      	bx	lr
   1b26a:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b26e:	4770      	bx	lr
   1b270:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1b274:	d101      	bne.n	1b27a <__aeabi_f2uiz+0x32>
   1b276:	0242      	lsls	r2, r0, #9
   1b278:	d102      	bne.n	1b280 <__aeabi_f2uiz+0x38>
   1b27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b27e:	4770      	bx	lr
   1b280:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b284:	4770      	bx	lr
   1b286:	46c0      	nop			(mov r8, r8)

0001b288 <_Unwind_decode_target2>:
   1b288:	4603      	mov	r3, r0
   1b28a:	6800      	ldr	r0, [r0, #0]
   1b28c:	b100      	cbz	r0, 1b290 <_Unwind_decode_target2+0x8>
   1b28e:	18c0      	adds	r0, r0, r3
   1b290:	4770      	bx	lr
   1b292:	46c0      	nop			(mov r8, r8)

0001b294 <_Unwind_VRS_Get>:
   1b294:	b410      	push	{r4}
   1b296:	469c      	mov	ip, r3
   1b298:	4604      	mov	r4, r0
   1b29a:	b969      	cbnz	r1, 1b2b8 <_Unwind_VRS_Get+0x24>
   1b29c:	2a0f      	cmp	r2, #15
   1b29e:	bf94      	ite	ls
   1b2a0:	2300      	movls	r3, #0
   1b2a2:	2301      	movhi	r3, #1
   1b2a4:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1b2a8:	bf0c      	ite	eq
   1b2aa:	4618      	moveq	r0, r3
   1b2ac:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1b2b0:	b130      	cbz	r0, 1b2c0 <_Unwind_VRS_Get+0x2c>
   1b2b2:	2002      	movs	r0, #2
   1b2b4:	bc10      	pop	{r4}
   1b2b6:	4770      	bx	lr
   1b2b8:	2904      	cmp	r1, #4
   1b2ba:	d8fa      	bhi.n	1b2b2 <_Unwind_VRS_Get+0x1e>
   1b2bc:	2001      	movs	r0, #1
   1b2be:	e7f9      	b.n	1b2b4 <_Unwind_VRS_Get+0x20>
   1b2c0:	0093      	lsls	r3, r2, #2
   1b2c2:	4423      	add	r3, r4
   1b2c4:	685a      	ldr	r2, [r3, #4]
   1b2c6:	9b01      	ldr	r3, [sp, #4]
   1b2c8:	601a      	str	r2, [r3, #0]
   1b2ca:	e7f3      	b.n	1b2b4 <_Unwind_VRS_Get+0x20>

0001b2cc <_Unwind_GetGR>:
   1b2cc:	b500      	push	{lr}
   1b2ce:	b085      	sub	sp, #20
   1b2d0:	460a      	mov	r2, r1
   1b2d2:	ab03      	add	r3, sp, #12
   1b2d4:	2100      	movs	r1, #0
   1b2d6:	9300      	str	r3, [sp, #0]
   1b2d8:	460b      	mov	r3, r1
   1b2da:	f7ff ffdb 	bl	1b294 <_Unwind_VRS_Get>
   1b2de:	9803      	ldr	r0, [sp, #12]
   1b2e0:	b005      	add	sp, #20
   1b2e2:	bd00      	pop	{pc}

0001b2e4 <_Unwind_VRS_Set>:
   1b2e4:	b410      	push	{r4}
   1b2e6:	469c      	mov	ip, r3
   1b2e8:	4604      	mov	r4, r0
   1b2ea:	b969      	cbnz	r1, 1b308 <_Unwind_VRS_Set+0x24>
   1b2ec:	2a0f      	cmp	r2, #15
   1b2ee:	bf94      	ite	ls
   1b2f0:	2300      	movls	r3, #0
   1b2f2:	2301      	movhi	r3, #1
   1b2f4:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1b2f8:	bf0c      	ite	eq
   1b2fa:	4618      	moveq	r0, r3
   1b2fc:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1b300:	b130      	cbz	r0, 1b310 <_Unwind_VRS_Set+0x2c>
   1b302:	2002      	movs	r0, #2
   1b304:	bc10      	pop	{r4}
   1b306:	4770      	bx	lr
   1b308:	2904      	cmp	r1, #4
   1b30a:	d8fa      	bhi.n	1b302 <_Unwind_VRS_Set+0x1e>
   1b30c:	2001      	movs	r0, #1
   1b30e:	e7f9      	b.n	1b304 <_Unwind_VRS_Set+0x20>
   1b310:	9901      	ldr	r1, [sp, #4]
   1b312:	0093      	lsls	r3, r2, #2
   1b314:	680a      	ldr	r2, [r1, #0]
   1b316:	4423      	add	r3, r4
   1b318:	605a      	str	r2, [r3, #4]
   1b31a:	e7f3      	b.n	1b304 <_Unwind_VRS_Set+0x20>

0001b31c <_Unwind_SetGR>:
   1b31c:	b500      	push	{lr}
   1b31e:	b085      	sub	sp, #20
   1b320:	ab04      	add	r3, sp, #16
   1b322:	468c      	mov	ip, r1
   1b324:	f843 2d04 	str.w	r2, [r3, #-4]!
   1b328:	2100      	movs	r1, #0
   1b32a:	9300      	str	r3, [sp, #0]
   1b32c:	4662      	mov	r2, ip
   1b32e:	460b      	mov	r3, r1
   1b330:	f7ff ffd8 	bl	1b2e4 <_Unwind_VRS_Set>
   1b334:	b005      	add	sp, #20
   1b336:	bd00      	pop	{pc}

0001b338 <selfrel_offset31>:
   1b338:	6803      	ldr	r3, [r0, #0]
   1b33a:	4602      	mov	r2, r0
   1b33c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1b340:	bf14      	ite	ne
   1b342:	f043 4000 	orrne.w	r0, r3, #2147483648	; 0x80000000
   1b346:	f023 4000 	biceq.w	r0, r3, #2147483648	; 0x80000000
   1b34a:	4410      	add	r0, r2
   1b34c:	4770      	bx	lr
   1b34e:	46c0      	nop			(mov r8, r8)

0001b350 <search_EIT_table>:
   1b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b354:	4682      	mov	sl, r0
   1b356:	b081      	sub	sp, #4
   1b358:	4690      	mov	r8, r2
   1b35a:	2900      	cmp	r1, #0
   1b35c:	d024      	beq.n	1b3a8 <search_EIT_table+0x58>
   1b35e:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
   1b362:	46d9      	mov	r9, fp
   1b364:	2700      	movs	r7, #0
   1b366:	e000      	b.n	1b36a <search_EIT_table+0x1a>
   1b368:	1c67      	adds	r7, r4, #1
   1b36a:	eb09 0307 	add.w	r3, r9, r7
   1b36e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1b372:	105c      	asrs	r4, r3, #1
   1b374:	00e2      	lsls	r2, r4, #3
   1b376:	eb0a 0502 	add.w	r5, sl, r2
   1b37a:	4628      	mov	r0, r5
   1b37c:	f7ff ffdc 	bl	1b338 <selfrel_offset31>
   1b380:	45a3      	cmp	fp, r4
   1b382:	4606      	mov	r6, r0
   1b384:	bf08      	it	eq
   1b386:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   1b38a:	d005      	beq.n	1b398 <search_EIT_table+0x48>
   1b38c:	1c60      	adds	r0, r4, #1
   1b38e:	00c0      	lsls	r0, r0, #3
   1b390:	4450      	add	r0, sl
   1b392:	f7ff ffd1 	bl	1b338 <selfrel_offset31>
   1b396:	3801      	subs	r0, #1
   1b398:	4546      	cmp	r6, r8
   1b39a:	d807      	bhi.n	1b3ac <search_EIT_table+0x5c>
   1b39c:	4540      	cmp	r0, r8
   1b39e:	d3e3      	bcc.n	1b368 <search_EIT_table+0x18>
   1b3a0:	4628      	mov	r0, r5
   1b3a2:	b001      	add	sp, #4
   1b3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3a8:	2500      	movs	r5, #0
   1b3aa:	e7f9      	b.n	1b3a0 <search_EIT_table+0x50>
   1b3ac:	42bc      	cmp	r4, r7
   1b3ae:	d0fb      	beq.n	1b3a8 <search_EIT_table+0x58>
   1b3b0:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   1b3b4:	e7d9      	b.n	1b36a <search_EIT_table+0x1a>
   1b3b6:	46c0      	nop			(mov r8, r8)

0001b3b8 <_Unwind_GetCFA>:
   1b3b8:	6c40      	ldr	r0, [r0, #68]
   1b3ba:	4770      	bx	lr

0001b3bc <_Unwind_Complete>:
   1b3bc:	4770      	bx	lr
   1b3be:	46c0      	nop			(mov r8, r8)

0001b3c0 <_Unwind_DeleteException>:
   1b3c0:	b500      	push	{lr}
   1b3c2:	6883      	ldr	r3, [r0, #8]
   1b3c4:	b081      	sub	sp, #4
   1b3c6:	4601      	mov	r1, r0
   1b3c8:	b10b      	cbz	r3, 1b3ce <_Unwind_DeleteException+0xe>
   1b3ca:	2001      	movs	r0, #1
   1b3cc:	4798      	blx	r3
   1b3ce:	b001      	add	sp, #4
   1b3d0:	bd00      	pop	{pc}
   1b3d2:	46c0      	nop			(mov r8, r8)

0001b3d4 <__gnu_unwind_pr_common>:
   1b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3d8:	4688      	mov	r8, r1
   1b3da:	b089      	sub	sp, #36
   1b3dc:	f000 0108 	and.w	r1, r0, #8	; 0x8
   1b3e0:	f000 0003 	and.w	r0, r0, #3	; 0x3
   1b3e4:	9003      	str	r0, [sp, #12]
   1b3e6:	f8d8 004c 	ldr.w	r0, [r8, #76]
   1b3ea:	4691      	mov	r9, r2
   1b3ec:	f850 2b04 	ldr.w	r2, [r0], #4
   1b3f0:	469b      	mov	fp, r3
   1b3f2:	9102      	str	r1, [sp, #8]
   1b3f4:	9005      	str	r0, [sp, #20]
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	f040 80c1 	bne.w	1b57e <__gnu_unwind_pr_common+0x1aa>
   1b3fc:	0213      	lsls	r3, r2, #8
   1b3fe:	9304      	str	r3, [sp, #16]
   1b400:	2303      	movs	r3, #3
   1b402:	f88d b019 	strb.w	fp, [sp, #25]
   1b406:	f88d 3018 	strb.w	r3, [sp, #24]
   1b40a:	9a03      	ldr	r2, [sp, #12]
   1b40c:	f8d8 3050 	ldr.w	r3, [r8, #80]
   1b410:	2a02      	cmp	r2, #2
   1b412:	bf08      	it	eq
   1b414:	f8d8 0038 	ldreq.w	r0, [r8, #56]
   1b418:	f013 0301 	ands.w	r3, r3, #1	; 0x1
   1b41c:	bf02      	ittt	eq
   1b41e:	f108 0158 	addeq.w	r1, r8, #88	; 0x58
   1b422:	9301      	streq	r3, [sp, #4]
   1b424:	9100      	streq	r1, [sp, #0]
   1b426:	f040 80b6 	bne.w	1b596 <__gnu_unwind_pr_common+0x1c2>
   1b42a:	6803      	ldr	r3, [r0, #0]
   1b42c:	2b00      	cmp	r3, #0
   1b42e:	d02e      	beq.n	1b48e <__gnu_unwind_pr_common+0xba>
   1b430:	f1bb 0f02 	cmp.w	fp, #2	; 0x2
   1b434:	bf0a      	itet	eq
   1b436:	6844      	ldreq	r4, [r0, #4]
   1b438:	8844      	ldrhne	r4, [r0, #2]
   1b43a:	461e      	moveq	r6, r3
   1b43c:	f8d8 3048 	ldr.w	r3, [r8, #72]
   1b440:	bf0c      	ite	eq
   1b442:	f100 0708 	addeq.w	r7, r0, #8	; 0x8
   1b446:	8806      	ldrhne	r6, [r0, #0]
   1b448:	f024 0201 	bic.w	r2, r4, #1	; 0x1
   1b44c:	bf18      	it	ne
   1b44e:	1d07      	addne	r7, r0, #4
   1b450:	210f      	movs	r1, #15
   1b452:	4648      	mov	r0, r9
   1b454:	eb02 0503 	add.w	r5, r2, r3
   1b458:	f7ff ff38 	bl	1b2cc <_Unwind_GetGR>
   1b45c:	4285      	cmp	r5, r0
   1b45e:	d922      	bls.n	1b4a6 <__gnu_unwind_pr_common+0xd2>
   1b460:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1b464:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1b468:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1b46c:	2000      	movs	r0, #0
   1b46e:	2a01      	cmp	r2, #1
   1b470:	d028      	beq.n	1b4c4 <__gnu_unwind_pr_common+0xf0>
   1b472:	d248      	bcs.n	1b506 <__gnu_unwind_pr_common+0x132>
   1b474:	9a03      	ldr	r2, [sp, #12]
   1b476:	2a00      	cmp	r2, #0
   1b478:	bf0c      	ite	eq
   1b47a:	2300      	moveq	r3, #0
   1b47c:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1b480:	2b00      	cmp	r3, #0
   1b482:	f040 80ec 	bne.w	1b65e <__gnu_unwind_pr_common+0x28a>
   1b486:	1d38      	adds	r0, r7, #4
   1b488:	6803      	ldr	r3, [r0, #0]
   1b48a:	2b00      	cmp	r3, #0
   1b48c:	d1d0      	bne.n	1b430 <__gnu_unwind_pr_common+0x5c>
   1b48e:	4648      	mov	r0, r9
   1b490:	a904      	add	r1, sp, #16
   1b492:	f000 fd67 	bl	1bf64 <__gnu_unwind_execute>
   1b496:	2800      	cmp	r0, #0
   1b498:	d137      	bne.n	1b50a <__gnu_unwind_pr_common+0x136>
   1b49a:	9b01      	ldr	r3, [sp, #4]
   1b49c:	2b00      	cmp	r3, #0
   1b49e:	f040 80ce 	bne.w	1b63e <__gnu_unwind_pr_common+0x26a>
   1b4a2:	3008      	adds	r0, #8
   1b4a4:	e032      	b.n	1b50c <__gnu_unwind_pr_common+0x138>
   1b4a6:	f026 0301 	bic.w	r3, r6, #1	; 0x1
   1b4aa:	442b      	add	r3, r5
   1b4ac:	4298      	cmp	r0, r3
   1b4ae:	bf2c      	ite	cs
   1b4b0:	2000      	movcs	r0, #0
   1b4b2:	2001      	movcc	r0, #1
   1b4b4:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1b4b8:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1b4bc:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1b4c0:	2a01      	cmp	r2, #1
   1b4c2:	d1d6      	bne.n	1b472 <__gnu_unwind_pr_common+0x9e>
   1b4c4:	9b03      	ldr	r3, [sp, #12]
   1b4c6:	2b00      	cmp	r3, #0
   1b4c8:	d16f      	bne.n	1b5aa <__gnu_unwind_pr_common+0x1d6>
   1b4ca:	b1c8      	cbz	r0, 1b500 <__gnu_unwind_pr_common+0x12c>
   1b4cc:	687b      	ldr	r3, [r7, #4]
   1b4ce:	4638      	mov	r0, r7
   1b4d0:	f113 0f02 	cmn.w	r3, #2	; 0x2
   1b4d4:	f850 4b04 	ldr.w	r4, [r0], #4
   1b4d8:	d017      	beq.n	1b50a <__gnu_unwind_pr_common+0x136>
   1b4da:	9900      	ldr	r1, [sp, #0]
   1b4dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b4e0:	9107      	str	r1, [sp, #28]
   1b4e2:	f000 809b 	beq.w	1b61c <__gnu_unwind_pr_common+0x248>
   1b4e6:	f7ff fecf 	bl	1b288 <_Unwind_decode_target2>
   1b4ea:	0fe2      	lsrs	r2, r4, #31
   1b4ec:	4601      	mov	r1, r0
   1b4ee:	ab07      	add	r3, sp, #28
   1b4f0:	4640      	mov	r0, r8
   1b4f2:	f001 fe37 	bl	1d164 <__cxa_type_match>
   1b4f6:	2800      	cmp	r0, #0
   1b4f8:	f040 8090 	bne.w	1b61c <__gnu_unwind_pr_common+0x248>
   1b4fc:	9a03      	ldr	r2, [sp, #12]
   1b4fe:	9207      	str	r2, [sp, #28]
   1b500:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1b504:	e791      	b.n	1b42a <__gnu_unwind_pr_common+0x56>
   1b506:	2a02      	cmp	r2, #2
   1b508:	d003      	beq.n	1b512 <__gnu_unwind_pr_common+0x13e>
   1b50a:	2009      	movs	r0, #9
   1b50c:	b009      	add	sp, #36
   1b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b512:	683a      	ldr	r2, [r7, #0]
   1b514:	9b03      	ldr	r3, [sp, #12]
   1b516:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   1b51a:	2b00      	cmp	r3, #0
   1b51c:	d160      	bne.n	1b5e0 <__gnu_unwind_pr_common+0x20c>
   1b51e:	b328      	cbz	r0, 1b56c <__gnu_unwind_pr_common+0x198>
   1b520:	9902      	ldr	r1, [sp, #8]
   1b522:	f1da 0301 	rsbs	r3, sl, #1	; 0x1
   1b526:	bf38      	it	cc
   1b528:	2300      	movcc	r3, #0
   1b52a:	2900      	cmp	r1, #0
   1b52c:	bf08      	it	eq
   1b52e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1b532:	b1db      	cbz	r3, 1b56c <__gnu_unwind_pr_common+0x198>
   1b534:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1b538:	d074      	beq.n	1b624 <__gnu_unwind_pr_common+0x250>
   1b53a:	1d3d      	adds	r5, r7, #4
   1b53c:	9e03      	ldr	r6, [sp, #12]
   1b53e:	e003      	b.n	1b548 <__gnu_unwind_pr_common+0x174>
   1b540:	3504      	adds	r5, #4
   1b542:	45a2      	cmp	sl, r4
   1b544:	d90f      	bls.n	1b566 <__gnu_unwind_pr_common+0x192>
   1b546:	4626      	mov	r6, r4
   1b548:	9a00      	ldr	r2, [sp, #0]
   1b54a:	4628      	mov	r0, r5
   1b54c:	9207      	str	r2, [sp, #28]
   1b54e:	f7ff fe9b 	bl	1b288 <_Unwind_decode_target2>
   1b552:	2200      	movs	r2, #0
   1b554:	4601      	mov	r1, r0
   1b556:	ab07      	add	r3, sp, #28
   1b558:	4640      	mov	r0, r8
   1b55a:	1c74      	adds	r4, r6, #1
   1b55c:	f001 fe02 	bl	1d164 <__cxa_type_match>
   1b560:	2800      	cmp	r0, #0
   1b562:	d0ed      	beq.n	1b540 <__gnu_unwind_pr_common+0x16c>
   1b564:	4634      	mov	r4, r6
   1b566:	4554      	cmp	r4, sl
   1b568:	d05c      	beq.n	1b624 <__gnu_unwind_pr_common+0x250>
   1b56a:	683a      	ldr	r2, [r7, #0]
   1b56c:	2a00      	cmp	r2, #0
   1b56e:	bfac      	ite	ge
   1b570:	4638      	movge	r0, r7
   1b572:	1d38      	addlt	r0, r7, #4
   1b574:	f10a 0301 	add.w	r3, sl, #1	; 0x1
   1b578:	009b      	lsls	r3, r3, #2
   1b57a:	18c0      	adds	r0, r0, r3
   1b57c:	e755      	b.n	1b42a <__gnu_unwind_pr_common+0x56>
   1b57e:	0c13      	lsrs	r3, r2, #16
   1b580:	b2db      	uxtb	r3, r3
   1b582:	2102      	movs	r1, #2
   1b584:	f88d 3019 	strb.w	r3, [sp, #25]
   1b588:	408b      	lsls	r3, r1
   1b58a:	0412      	lsls	r2, r2, #16
   1b58c:	9204      	str	r2, [sp, #16]
   1b58e:	f88d 1018 	strb.w	r1, [sp, #24]
   1b592:	18c0      	adds	r0, r0, r3
   1b594:	e739      	b.n	1b40a <__gnu_unwind_pr_common+0x36>
   1b596:	2300      	movs	r3, #0
   1b598:	4648      	mov	r0, r9
   1b59a:	a904      	add	r1, sp, #16
   1b59c:	9301      	str	r3, [sp, #4]
   1b59e:	f000 fce1 	bl	1bf64 <__gnu_unwind_execute>
   1b5a2:	2800      	cmp	r0, #0
   1b5a4:	f43f af79 	beq.w	1b49a <__gnu_unwind_pr_common+0xc6>
   1b5a8:	e7af      	b.n	1b50a <__gnu_unwind_pr_common+0x136>
   1b5aa:	210d      	movs	r1, #13
   1b5ac:	4648      	mov	r0, r9
   1b5ae:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1b5b2:	f7ff fe8b 	bl	1b2cc <_Unwind_GetGR>
   1b5b6:	4284      	cmp	r4, r0
   1b5b8:	d1a2      	bne.n	1b500 <__gnu_unwind_pr_common+0x12c>
   1b5ba:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1b5be:	429f      	cmp	r7, r3
   1b5c0:	d19e      	bne.n	1b500 <__gnu_unwind_pr_common+0x12c>
   1b5c2:	4638      	mov	r0, r7
   1b5c4:	f7ff feb8 	bl	1b338 <selfrel_offset31>
   1b5c8:	4602      	mov	r2, r0
   1b5ca:	210f      	movs	r1, #15
   1b5cc:	4648      	mov	r0, r9
   1b5ce:	f7ff fea5 	bl	1b31c <_Unwind_SetGR>
   1b5d2:	4648      	mov	r0, r9
   1b5d4:	2100      	movs	r1, #0
   1b5d6:	4642      	mov	r2, r8
   1b5d8:	f7ff fea0 	bl	1b31c <_Unwind_SetGR>
   1b5dc:	2007      	movs	r0, #7
   1b5de:	e795      	b.n	1b50c <__gnu_unwind_pr_common+0x138>
   1b5e0:	210d      	movs	r1, #13
   1b5e2:	4648      	mov	r0, r9
   1b5e4:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1b5e8:	f7ff fe70 	bl	1b2cc <_Unwind_GetGR>
   1b5ec:	4284      	cmp	r4, r0
   1b5ee:	d1bc      	bne.n	1b56a <__gnu_unwind_pr_common+0x196>
   1b5f0:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1b5f4:	429f      	cmp	r7, r3
   1b5f6:	d1b8      	bne.n	1b56a <__gnu_unwind_pr_common+0x196>
   1b5f8:	2104      	movs	r1, #4
   1b5fa:	2300      	movs	r3, #0
   1b5fc:	eb07 0001 	add.w	r0, r7, r1
   1b600:	f8c8 a028 	str.w	sl, [r8, #40]
   1b604:	f8c8 302c 	str.w	r3, [r8, #44]
   1b608:	f8c8 1030 	str.w	r1, [r8, #48]
   1b60c:	f8c8 0034 	str.w	r0, [r8, #52]
   1b610:	683b      	ldr	r3, [r7, #0]
   1b612:	2b00      	cmp	r3, #0
   1b614:	da37      	bge.n	1b686 <__gnu_unwind_pr_common+0x2b2>
   1b616:	2201      	movs	r2, #1
   1b618:	9201      	str	r2, [sp, #4]
   1b61a:	e7ab      	b.n	1b574 <__gnu_unwind_pr_common+0x1a0>
   1b61c:	9b07      	ldr	r3, [sp, #28]
   1b61e:	2b00      	cmp	r3, #0
   1b620:	f43f af6e 	beq.w	1b500 <__gnu_unwind_pr_common+0x12c>
   1b624:	4648      	mov	r0, r9
   1b626:	210d      	movs	r1, #13
   1b628:	f7ff fe50 	bl	1b2cc <_Unwind_GetGR>
   1b62c:	9b07      	ldr	r3, [sp, #28]
   1b62e:	f8c8 0020 	str.w	r0, [r8, #32]
   1b632:	f8c8 3024 	str.w	r3, [r8, #36]
   1b636:	f8c8 7028 	str.w	r7, [r8, #40]
   1b63a:	2006      	movs	r0, #6
   1b63c:	e766      	b.n	1b50c <__gnu_unwind_pr_common+0x138>
   1b63e:	210f      	movs	r1, #15
   1b640:	4648      	mov	r0, r9
   1b642:	f7ff fe43 	bl	1b2cc <_Unwind_GetGR>
   1b646:	210e      	movs	r1, #14
   1b648:	4602      	mov	r2, r0
   1b64a:	4648      	mov	r0, r9
   1b64c:	f7ff fe66 	bl	1b31c <_Unwind_SetGR>
   1b650:	4648      	mov	r0, r9
   1b652:	210f      	movs	r1, #15
   1b654:	4a0f      	ldr	r2, [pc, #60]	(1b694 <__gnu_unwind_pr_common+0x2c0>)
   1b656:	f7ff fe61 	bl	1b31c <_Unwind_SetGR>
   1b65a:	2007      	movs	r0, #7
   1b65c:	e756      	b.n	1b50c <__gnu_unwind_pr_common+0x138>
   1b65e:	4638      	mov	r0, r7
   1b660:	f7ff fe6a 	bl	1b338 <selfrel_offset31>
   1b664:	1d3b      	adds	r3, r7, #4
   1b666:	4604      	mov	r4, r0
   1b668:	f8c8 3038 	str.w	r3, [r8, #56]
   1b66c:	4640      	mov	r0, r8
   1b66e:	f001 fd43 	bl	1d0f8 <__cxa_begin_cleanup>
   1b672:	2800      	cmp	r0, #0
   1b674:	f43f af49 	beq.w	1b50a <__gnu_unwind_pr_common+0x136>
   1b678:	4648      	mov	r0, r9
   1b67a:	210f      	movs	r1, #15
   1b67c:	4622      	mov	r2, r4
   1b67e:	f7ff fe4d 	bl	1b31c <_Unwind_SetGR>
   1b682:	2007      	movs	r0, #7
   1b684:	e742      	b.n	1b50c <__gnu_unwind_pr_common+0x138>
   1b686:	f10a 0001 	add.w	r0, sl, #1	; 0x1
   1b68a:	0080      	lsls	r0, r0, #2
   1b68c:	4438      	add	r0, r7
   1b68e:	f7ff fe53 	bl	1b338 <selfrel_offset31>
   1b692:	e799      	b.n	1b5c8 <__gnu_unwind_pr_common+0x1f4>
   1b694:	0001dd81 	.word	0x0001dd81

0001b698 <__aeabi_unwind_cpp_pr2>:
   1b698:	b500      	push	{lr}
   1b69a:	2302      	movs	r3, #2
   1b69c:	b081      	sub	sp, #4
   1b69e:	f7ff fe99 	bl	1b3d4 <__gnu_unwind_pr_common>
   1b6a2:	b001      	add	sp, #4
   1b6a4:	bd00      	pop	{pc}
   1b6a6:	46c0      	nop			(mov r8, r8)

0001b6a8 <__aeabi_unwind_cpp_pr1>:
   1b6a8:	b500      	push	{lr}
   1b6aa:	2301      	movs	r3, #1
   1b6ac:	b081      	sub	sp, #4
   1b6ae:	f7ff fe91 	bl	1b3d4 <__gnu_unwind_pr_common>
   1b6b2:	b001      	add	sp, #4
   1b6b4:	bd00      	pop	{pc}
   1b6b6:	46c0      	nop			(mov r8, r8)

0001b6b8 <__aeabi_unwind_cpp_pr0>:
   1b6b8:	b500      	push	{lr}
   1b6ba:	2300      	movs	r3, #0
   1b6bc:	b081      	sub	sp, #4
   1b6be:	f7ff fe89 	bl	1b3d4 <__gnu_unwind_pr_common>
   1b6c2:	b001      	add	sp, #4
   1b6c4:	bd00      	pop	{pc}
   1b6c6:	46c0      	nop			(mov r8, r8)

0001b6c8 <get_eit_entry>:
   1b6c8:	b530      	push	{r4, r5, lr}
   1b6ca:	4b2d      	ldr	r3, [pc, #180]	(1b780 <get_eit_entry+0xb8>)
   1b6cc:	b083      	sub	sp, #12
   1b6ce:	4605      	mov	r5, r0
   1b6d0:	1e8c      	subs	r4, r1, #2
   1b6d2:	2b00      	cmp	r3, #0
   1b6d4:	d04a      	beq.n	1b76c <get_eit_entry+0xa4>
   1b6d6:	4620      	mov	r0, r4
   1b6d8:	a901      	add	r1, sp, #4
   1b6da:	e000      	b.n	1b6de <get_eit_entry+0x16>
   1b6dc:	bf00      	nop
   1b6de:	4602      	mov	r2, r0
   1b6e0:	2800      	cmp	r0, #0
   1b6e2:	d02b      	beq.n	1b73c <get_eit_entry+0x74>
   1b6e4:	4610      	mov	r0, r2
   1b6e6:	9901      	ldr	r1, [sp, #4]
   1b6e8:	4622      	mov	r2, r4
   1b6ea:	f7ff fe31 	bl	1b350 <search_EIT_table>
   1b6ee:	4604      	mov	r4, r0
   1b6f0:	b300      	cbz	r0, 1b734 <get_eit_entry+0x6c>
   1b6f2:	f7ff fe21 	bl	1b338 <selfrel_offset31>
   1b6f6:	64a8      	str	r0, [r5, #72]
   1b6f8:	6863      	ldr	r3, [r4, #4]
   1b6fa:	2b01      	cmp	r3, #1
   1b6fc:	d02e      	beq.n	1b75c <get_eit_entry+0x94>
   1b6fe:	2b00      	cmp	r3, #0
   1b700:	db1f      	blt.n	1b742 <get_eit_entry+0x7a>
   1b702:	1d20      	adds	r0, r4, #4
   1b704:	f7ff fe18 	bl	1b338 <selfrel_offset31>
   1b708:	64e8      	str	r0, [r5, #76]
   1b70a:	2300      	movs	r3, #0
   1b70c:	6ce8      	ldr	r0, [r5, #76]
   1b70e:	652b      	str	r3, [r5, #80]
   1b710:	6803      	ldr	r3, [r0, #0]
   1b712:	2b00      	cmp	r3, #0
   1b714:	da1d      	bge.n	1b752 <get_eit_entry+0x8a>
   1b716:	0e1b      	lsrs	r3, r3, #24
   1b718:	f013 000f 	ands.w	r0, r3, #15	; 0xf
   1b71c:	bf04      	itt	eq
   1b71e:	4b19      	ldreq	r3, [pc, #100]	(1b784 <get_eit_entry+0xbc>)
   1b720:	612b      	streq	r3, [r5, #16]
   1b722:	d009      	beq.n	1b738 <get_eit_entry+0x70>
   1b724:	2801      	cmp	r0, #1
   1b726:	d01d      	beq.n	1b764 <get_eit_entry+0x9c>
   1b728:	2802      	cmp	r0, #2
   1b72a:	d025      	beq.n	1b778 <get_eit_entry+0xb0>
   1b72c:	2300      	movs	r3, #0
   1b72e:	612b      	str	r3, [r5, #16]
   1b730:	2009      	movs	r0, #9
   1b732:	e001      	b.n	1b738 <get_eit_entry+0x70>
   1b734:	6128      	str	r0, [r5, #16]
   1b736:	2009      	movs	r0, #9
   1b738:	b003      	add	sp, #12
   1b73a:	bd30      	pop	{r4, r5, pc}
   1b73c:	6128      	str	r0, [r5, #16]
   1b73e:	3009      	adds	r0, #9
   1b740:	e7fa      	b.n	1b738 <get_eit_entry+0x70>
   1b742:	1d23      	adds	r3, r4, #4
   1b744:	64eb      	str	r3, [r5, #76]
   1b746:	2201      	movs	r2, #1
   1b748:	6ce8      	ldr	r0, [r5, #76]
   1b74a:	652a      	str	r2, [r5, #80]
   1b74c:	6803      	ldr	r3, [r0, #0]
   1b74e:	2b00      	cmp	r3, #0
   1b750:	dbe1      	blt.n	1b716 <get_eit_entry+0x4e>
   1b752:	f7ff fdf1 	bl	1b338 <selfrel_offset31>
   1b756:	6128      	str	r0, [r5, #16]
   1b758:	2000      	movs	r0, #0
   1b75a:	e7ed      	b.n	1b738 <get_eit_entry+0x70>
   1b75c:	3b01      	subs	r3, #1
   1b75e:	612b      	str	r3, [r5, #16]
   1b760:	2005      	movs	r0, #5
   1b762:	e7e9      	b.n	1b738 <get_eit_entry+0x70>
   1b764:	4b08      	ldr	r3, [pc, #32]	(1b788 <get_eit_entry+0xc0>)
   1b766:	3801      	subs	r0, #1
   1b768:	612b      	str	r3, [r5, #16]
   1b76a:	e7e5      	b.n	1b738 <get_eit_entry+0x70>
   1b76c:	4a07      	ldr	r2, [pc, #28]	(1b78c <get_eit_entry+0xc4>)
   1b76e:	4b08      	ldr	r3, [pc, #32]	(1b790 <get_eit_entry+0xc8>)
   1b770:	1a9b      	subs	r3, r3, r2
   1b772:	10db      	asrs	r3, r3, #3
   1b774:	9301      	str	r3, [sp, #4]
   1b776:	e7b5      	b.n	1b6e4 <get_eit_entry+0x1c>
   1b778:	4b06      	ldr	r3, [pc, #24]	(1b794 <get_eit_entry+0xcc>)
   1b77a:	3802      	subs	r0, #2
   1b77c:	612b      	str	r3, [r5, #16]
   1b77e:	e7db      	b.n	1b738 <get_eit_entry+0x70>
   1b780:	00000000 	.word	0x00000000
   1b784:	0001b6b9 	.word	0x0001b6b9
   1b788:	0001b6a9 	.word	0x0001b6a9
   1b78c:	00023710 	.word	0x00023710
   1b790:	00023ad8 	.word	0x00023ad8
   1b794:	0001b699 	.word	0x0001b699

0001b798 <restore_non_core_regs>:
   1b798:	6803      	ldr	r3, [r0, #0]
   1b79a:	b510      	push	{r4, lr}
   1b79c:	f013 0f01 	tst.w	r3, #1	; 0x1
   1b7a0:	4604      	mov	r4, r0
   1b7a2:	d107      	bne.n	1b7b4 <restore_non_core_regs+0x1c>
   1b7a4:	f013 0f02 	tst.w	r3, #2	; 0x2
   1b7a8:	d012      	beq.n	1b7d0 <restore_non_core_regs+0x38>
   1b7aa:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1b7ae:	f000 facf 	bl	1bd50 <__gnu_Unwind_Restore_VFP_D>
   1b7b2:	6823      	ldr	r3, [r4, #0]
   1b7b4:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b7b8:	d012      	beq.n	1b7e0 <restore_non_core_regs+0x48>
   1b7ba:	f013 0f08 	tst.w	r3, #8	; 0x8
   1b7be:	d017      	beq.n	1b7f0 <restore_non_core_regs+0x58>
   1b7c0:	f013 0f10 	tst.w	r3, #16	; 0x10
   1b7c4:	d103      	bne.n	1b7ce <restore_non_core_regs+0x36>
   1b7c6:	f504 700c 	add.w	r0, r4, #560	; 0x230
   1b7ca:	f000 fb15 	bl	1bdf8 <__gnu_Unwind_Restore_WMMXC>
   1b7ce:	bd10      	pop	{r4, pc}
   1b7d0:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1b7d4:	f000 fab4 	bl	1bd40 <__gnu_Unwind_Restore_VFP>
   1b7d8:	6823      	ldr	r3, [r4, #0]
   1b7da:	f013 0f04 	tst.w	r3, #4	; 0x4
   1b7de:	d1ec      	bne.n	1b7ba <restore_non_core_regs+0x22>
   1b7e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1b7e4:	f000 fabc 	bl	1bd60 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1b7e8:	6823      	ldr	r3, [r4, #0]
   1b7ea:	f013 0f08 	tst.w	r3, #8	; 0x8
   1b7ee:	d1e7      	bne.n	1b7c0 <restore_non_core_regs+0x28>
   1b7f0:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   1b7f4:	f000 fabc 	bl	1bd70 <__gnu_Unwind_Restore_WMMXD>
   1b7f8:	6823      	ldr	r3, [r4, #0]
   1b7fa:	e7e1      	b.n	1b7c0 <restore_non_core_regs+0x28>

0001b7fc <__gnu_Unwind_Backtrace>:
   1b7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b800:	6bd3      	ldr	r3, [r2, #60]
   1b802:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
   1b806:	6413      	str	r3, [r2, #64]
   1b808:	f10d 0c04 	add.w	ip, sp, #4	; 0x4
   1b80c:	f102 0e04 	add.w	lr, r2, #4	; 0x4
   1b810:	4680      	mov	r8, r0
   1b812:	460f      	mov	r7, r1
   1b814:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b818:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b81c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b820:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b824:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1b828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b82c:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1b830:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1b834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b838:	466e      	mov	r6, sp
   1b83a:	9300      	str	r3, [sp, #0]
   1b83c:	ad90      	add	r5, sp, #576
   1b83e:	6c31      	ldr	r1, [r6, #64]
   1b840:	4628      	mov	r0, r5
   1b842:	f7ff ff41 	bl	1b6c8 <get_eit_entry>
   1b846:	2800      	cmp	r0, #0
   1b848:	d121      	bne.n	1b88e <__gnu_Unwind_Backtrace+0x92>
   1b84a:	4668      	mov	r0, sp
   1b84c:	210c      	movs	r1, #12
   1b84e:	462a      	mov	r2, r5
   1b850:	f7ff fd64 	bl	1b31c <_Unwind_SetGR>
   1b854:	4668      	mov	r0, sp
   1b856:	4639      	mov	r1, r7
   1b858:	47c0      	blx	r8
   1b85a:	b9c0      	cbnz	r0, 1b88e <__gnu_Unwind_Backtrace+0x92>
   1b85c:	9b94      	ldr	r3, [sp, #592]
   1b85e:	3008      	adds	r0, #8
   1b860:	4629      	mov	r1, r5
   1b862:	466a      	mov	r2, sp
   1b864:	4798      	blx	r3
   1b866:	f1b0 0309 	subs.w	r3, r0, #9	; 0x9
   1b86a:	bf18      	it	ne
   1b86c:	2301      	movne	r3, #1
   1b86e:	2805      	cmp	r0, #5
   1b870:	bf0c      	ite	eq
   1b872:	2300      	moveq	r3, #0
   1b874:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1b878:	4604      	mov	r4, r0
   1b87a:	2b00      	cmp	r3, #0
   1b87c:	d1df      	bne.n	1b83e <__gnu_Unwind_Backtrace+0x42>
   1b87e:	4668      	mov	r0, sp
   1b880:	f7ff ff8a 	bl	1b798 <restore_non_core_regs>
   1b884:	4620      	mov	r0, r4
   1b886:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
   1b88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b88e:	2409      	movs	r4, #9
   1b890:	e7f5      	b.n	1b87e <__gnu_Unwind_Backtrace+0x82>
   1b892:	46c0      	nop			(mov r8, r8)

0001b894 <unwind_phase2_forced>:
   1b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b898:	68c3      	ldr	r3, [r0, #12]
   1b89a:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
   1b89e:	b083      	sub	sp, #12
   1b8a0:	6984      	ldr	r4, [r0, #24]
   1b8a2:	9304      	str	r3, [sp, #16]
   1b8a4:	ab97      	add	r3, sp, #604
   1b8a6:	9303      	str	r3, [sp, #12]
   1b8a8:	9405      	str	r4, [sp, #20]
   1b8aa:	9c03      	ldr	r4, [sp, #12]
   1b8ac:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1b8b0:	4606      	mov	r6, r0
   1b8b2:	4693      	mov	fp, r2
   1b8b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b8b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b8ba:	46a6      	mov	lr, r4
   1b8bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b8c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b8c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b8c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b8cc:	af96      	add	r7, sp, #600
   1b8ce:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1b8d2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1b8d6:	2300      	movs	r3, #0
   1b8d8:	603b      	str	r3, [r7, #0]
   1b8da:	4698      	mov	r8, r3
   1b8dc:	f10d 0a18 	add.w	sl, sp, #24	; 0x18
   1b8e0:	6c39      	ldr	r1, [r7, #64]
   1b8e2:	4630      	mov	r0, r6
   1b8e4:	f7ff fef0 	bl	1b6c8 <get_eit_entry>
   1b8e8:	4605      	mov	r5, r0
   1b8ea:	4681      	mov	r9, r0
   1b8ec:	f1bb 0f00 	cmp.w	fp, #0	; 0x0
   1b8f0:	d125      	bne.n	1b93e <unwind_phase2_forced+0xaa>
   1b8f2:	2409      	movs	r4, #9
   1b8f4:	2d00      	cmp	r5, #0
   1b8f6:	d027      	beq.n	1b948 <unwind_phase2_forced+0xb4>
   1b8f8:	6bbb      	ldr	r3, [r7, #56]
   1b8fa:	f044 0410 	orr.w	r4, r4, #16	; 0x10
   1b8fe:	647b      	str	r3, [r7, #68]
   1b900:	9b05      	ldr	r3, [sp, #20]
   1b902:	4621      	mov	r1, r4
   1b904:	9301      	str	r3, [sp, #4]
   1b906:	9700      	str	r7, [sp, #0]
   1b908:	2001      	movs	r0, #1
   1b90a:	4632      	mov	r2, r6
   1b90c:	4633      	mov	r3, r6
   1b90e:	9c04      	ldr	r4, [sp, #16]
   1b910:	47a0      	blx	r4
   1b912:	b960      	cbnz	r0, 1b92e <unwind_phase2_forced+0x9a>
   1b914:	b96d      	cbnz	r5, 1b932 <unwind_phase2_forced+0x9e>
   1b916:	4638      	mov	r0, r7
   1b918:	4651      	mov	r1, sl
   1b91a:	f44f 7210 	mov.w	r2, #576	; 0x240
   1b91e:	f005 f825 	bl	2096c <memcpy>
   1b922:	f1b8 0f08 	cmp.w	r8, #8	; 0x8
   1b926:	d0db      	beq.n	1b8e0 <unwind_phase2_forced+0x4c>
   1b928:	f1b8 0f07 	cmp.w	r8, #7	; 0x7
   1b92c:	d01e      	beq.n	1b96c <unwind_phase2_forced+0xd8>
   1b92e:	f04f 0909 	mov.w	r9, #9	; 0x9
   1b932:	4648      	mov	r0, r9
   1b934:	b027      	add	sp, #156
   1b936:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   1b93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b93e:	240a      	movs	r4, #10
   1b940:	f04f 0b00 	mov.w	fp, #0	; 0x0
   1b944:	2d00      	cmp	r5, #0
   1b946:	d1d7      	bne.n	1b8f8 <unwind_phase2_forced+0x64>
   1b948:	6c3b      	ldr	r3, [r7, #64]
   1b94a:	4639      	mov	r1, r7
   1b94c:	6173      	str	r3, [r6, #20]
   1b94e:	f44f 7210 	mov.w	r2, #576	; 0x240
   1b952:	4650      	mov	r0, sl
   1b954:	f005 f80a 	bl	2096c <memcpy>
   1b958:	6933      	ldr	r3, [r6, #16]
   1b95a:	4620      	mov	r0, r4
   1b95c:	4631      	mov	r1, r6
   1b95e:	4652      	mov	r2, sl
   1b960:	4798      	blx	r3
   1b962:	f8da 3038 	ldr.w	r3, [sl, #56]
   1b966:	4680      	mov	r8, r0
   1b968:	647b      	str	r3, [r7, #68]
   1b96a:	e7c9      	b.n	1b900 <unwind_phase2_forced+0x6c>
   1b96c:	a897      	add	r0, sp, #604
   1b96e:	f000 f9db 	bl	1bd28 <__restore_core_regs>
   1b972:	46c0      	nop			(mov r8, r8)

0001b974 <__gnu_Unwind_ForcedUnwind>:
   1b974:	b500      	push	{lr}
   1b976:	60c1      	str	r1, [r0, #12]
   1b978:	6182      	str	r2, [r0, #24]
   1b97a:	6bda      	ldr	r2, [r3, #60]
   1b97c:	b081      	sub	sp, #4
   1b97e:	641a      	str	r2, [r3, #64]
   1b980:	4619      	mov	r1, r3
   1b982:	2200      	movs	r2, #0
   1b984:	f7ff ff86 	bl	1b894 <unwind_phase2_forced>
   1b988:	b001      	add	sp, #4
   1b98a:	bd00      	pop	{pc}

0001b98c <unwind_phase2>:
   1b98c:	b570      	push	{r4, r5, r6, lr}
   1b98e:	4605      	mov	r5, r0
   1b990:	460e      	mov	r6, r1
   1b992:	6c31      	ldr	r1, [r6, #64]
   1b994:	4628      	mov	r0, r5
   1b996:	f7ff fe97 	bl	1b6c8 <get_eit_entry>
   1b99a:	b950      	cbnz	r0, 1b9b2 <unwind_phase2+0x26>
   1b99c:	6c33      	ldr	r3, [r6, #64]
   1b99e:	2001      	movs	r0, #1
   1b9a0:	616b      	str	r3, [r5, #20]
   1b9a2:	692c      	ldr	r4, [r5, #16]
   1b9a4:	4629      	mov	r1, r5
   1b9a6:	4632      	mov	r2, r6
   1b9a8:	47a0      	blx	r4
   1b9aa:	2808      	cmp	r0, #8
   1b9ac:	d0f1      	beq.n	1b992 <unwind_phase2+0x6>
   1b9ae:	2807      	cmp	r0, #7
   1b9b0:	d001      	beq.n	1b9b6 <unwind_phase2+0x2a>
   1b9b2:	f004 fb27 	bl	20004 <abort>
   1b9b6:	1d30      	adds	r0, r6, #4
   1b9b8:	f000 f9b6 	bl	1bd28 <__restore_core_regs>

0001b9bc <__gnu_Unwind_RaiseException>:
   1b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9be:	6bcb      	ldr	r3, [r1, #60]
   1b9c0:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   1b9c4:	640b      	str	r3, [r1, #64]
   1b9c6:	f10d 0e04 	add.w	lr, sp, #4	; 0x4
   1b9ca:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1b9ce:	4605      	mov	r5, r0
   1b9d0:	460f      	mov	r7, r1
   1b9d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b9d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b9da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b9de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b9e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b9e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1b9ea:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1b9ee:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1b9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9f6:	466e      	mov	r6, sp
   1b9f8:	9300      	str	r3, [sp, #0]
   1b9fa:	6c31      	ldr	r1, [r6, #64]
   1b9fc:	4628      	mov	r0, r5
   1b9fe:	f7ff fe63 	bl	1b6c8 <get_eit_entry>
   1ba02:	b958      	cbnz	r0, 1ba1c <__gnu_Unwind_RaiseException+0x60>
   1ba04:	692b      	ldr	r3, [r5, #16]
   1ba06:	4629      	mov	r1, r5
   1ba08:	466a      	mov	r2, sp
   1ba0a:	4798      	blx	r3
   1ba0c:	2808      	cmp	r0, #8
   1ba0e:	4604      	mov	r4, r0
   1ba10:	d0f3      	beq.n	1b9fa <__gnu_Unwind_RaiseException+0x3e>
   1ba12:	4668      	mov	r0, sp
   1ba14:	f7ff fec0 	bl	1b798 <restore_non_core_regs>
   1ba18:	2c06      	cmp	r4, #6
   1ba1a:	d003      	beq.n	1ba24 <__gnu_Unwind_RaiseException+0x68>
   1ba1c:	2009      	movs	r0, #9
   1ba1e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   1ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ba24:	4628      	mov	r0, r5
   1ba26:	4639      	mov	r1, r7
   1ba28:	f7ff ffb0 	bl	1b98c <unwind_phase2>

0001ba2c <__gnu_Unwind_Resume_or_Rethrow>:
   1ba2c:	b500      	push	{lr}
   1ba2e:	68c3      	ldr	r3, [r0, #12]
   1ba30:	b081      	sub	sp, #4
   1ba32:	b133      	cbz	r3, 1ba42 <__gnu_Unwind_Resume_or_Rethrow+0x16>
   1ba34:	6bcb      	ldr	r3, [r1, #60]
   1ba36:	2200      	movs	r2, #0
   1ba38:	640b      	str	r3, [r1, #64]
   1ba3a:	f7ff ff2b 	bl	1b894 <unwind_phase2_forced>
   1ba3e:	b001      	add	sp, #4
   1ba40:	bd00      	pop	{pc}
   1ba42:	f7ff ffbb 	bl	1b9bc <__gnu_Unwind_RaiseException>
   1ba46:	e7fa      	b.n	1ba3e <__gnu_Unwind_Resume_or_Rethrow+0x12>

0001ba48 <__gnu_Unwind_Resume>:
   1ba48:	b530      	push	{r4, r5, lr}
   1ba4a:	6943      	ldr	r3, [r0, #20]
   1ba4c:	b081      	sub	sp, #4
   1ba4e:	640b      	str	r3, [r1, #64]
   1ba50:	68c2      	ldr	r2, [r0, #12]
   1ba52:	4604      	mov	r4, r0
   1ba54:	460d      	mov	r5, r1
   1ba56:	b98a      	cbnz	r2, 1ba7c <__gnu_Unwind_Resume+0x34>
   1ba58:	6903      	ldr	r3, [r0, #16]
   1ba5a:	4621      	mov	r1, r4
   1ba5c:	2002      	movs	r0, #2
   1ba5e:	462a      	mov	r2, r5
   1ba60:	4798      	blx	r3
   1ba62:	2807      	cmp	r0, #7
   1ba64:	d007      	beq.n	1ba76 <__gnu_Unwind_Resume+0x2e>
   1ba66:	2808      	cmp	r0, #8
   1ba68:	d001      	beq.n	1ba6e <__gnu_Unwind_Resume+0x26>
   1ba6a:	f004 facb 	bl	20004 <abort>
   1ba6e:	4620      	mov	r0, r4
   1ba70:	4629      	mov	r1, r5
   1ba72:	f7ff ff8b 	bl	1b98c <unwind_phase2>
   1ba76:	1d28      	adds	r0, r5, #4
   1ba78:	f000 f956 	bl	1bd28 <__restore_core_regs>
   1ba7c:	2201      	movs	r2, #1
   1ba7e:	f7ff ff09 	bl	1b894 <unwind_phase2_forced>
   1ba82:	f004 fabf 	bl	20004 <abort>
   1ba86:	46c0      	nop			(mov r8, r8)

0001ba88 <_Unwind_VRS_Pop>:
   1ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba8c:	4614      	mov	r4, r2
   1ba8e:	b0e6      	sub	sp, #408
   1ba90:	4605      	mov	r5, r0
   1ba92:	461a      	mov	r2, r3
   1ba94:	2904      	cmp	r1, #4
   1ba96:	d80e      	bhi.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1ba98:	e8df f001 	tbb	[pc, r1]
   1ba9c:	03545638 	.word	0x03545638
   1baa0:	0011      	.short	0x0011
   1baa2:	2a03      	cmp	r2, #3
   1baa4:	d107      	bne.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1baa6:	0c26      	lsrs	r6, r4, #16
   1baa8:	0424      	lsls	r4, r4, #16
   1baaa:	0c24      	lsrs	r4, r4, #16
   1baac:	eb04 0306 	add.w	r3, r4, r6
   1bab0:	2b10      	cmp	r3, #16
   1bab2:	f240 80d9 	bls.w	1bc68 <_Unwind_VRS_Pop+0x1e0>
   1bab6:	2002      	movs	r0, #2
   1bab8:	b066      	add	sp, #408
   1baba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1babe:	2c10      	cmp	r4, #16
   1bac0:	bf94      	ite	ls
   1bac2:	2300      	movls	r3, #0
   1bac4:	2301      	movhi	r3, #1
   1bac6:	2a00      	cmp	r2, #0
   1bac8:	bf18      	it	ne
   1baca:	f043 0301 	orrne.w	r3, r3, #1	; 0x1
   1bace:	2b00      	cmp	r3, #0
   1bad0:	d1f1      	bne.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1bad2:	6803      	ldr	r3, [r0, #0]
   1bad4:	f013 0f10 	tst.w	r3, #16	; 0x10
   1bad8:	f040 8101 	bne.w	1bcde <_Unwind_VRS_Pop+0x256>
   1badc:	ae62      	add	r6, sp, #392
   1bade:	4630      	mov	r0, r6
   1bae0:	f000 f994 	bl	1be0c <__gnu_Unwind_Save_WMMXC>
   1bae4:	6ba9      	ldr	r1, [r5, #56]
   1bae6:	2200      	movs	r2, #0
   1bae8:	2001      	movs	r0, #1
   1baea:	fa10 f302 	lsls.w	r3, r0, r2
   1baee:	4223      	tst	r3, r4
   1baf0:	bf1c      	itt	ne
   1baf2:	f851 3b04 	ldrne.w	r3, [r1], #4
   1baf6:	f846 3022 	strne.w	r3, [r6, r2, lsl #2]
   1bafa:	3201      	adds	r2, #1
   1bafc:	2a04      	cmp	r2, #4
   1bafe:	d1f4      	bne.n	1baea <_Unwind_VRS_Pop+0x62>
   1bb00:	4630      	mov	r0, r6
   1bb02:	63a9      	str	r1, [r5, #56]
   1bb04:	f000 f978 	bl	1bdf8 <__gnu_Unwind_Restore_WMMXC>
   1bb08:	2000      	movs	r0, #0
   1bb0a:	e7d5      	b.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bb0c:	2a00      	cmp	r2, #0
   1bb0e:	d1d2      	bne.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1bb10:	0420      	lsls	r0, r4, #16
   1bb12:	f8d5 c038 	ldr.w	ip, [r5, #56]
   1bb16:	0c00      	lsrs	r0, r0, #16
   1bb18:	4611      	mov	r1, r2
   1bb1a:	2401      	movs	r4, #1
   1bb1c:	fa14 f301 	lsls.w	r3, r4, r1
   1bb20:	4203      	tst	r3, r0
   1bb22:	d004      	beq.n	1bb2e <_Unwind_VRS_Pop+0xa6>
   1bb24:	008b      	lsls	r3, r1, #2
   1bb26:	f85c 2b04 	ldr.w	r2, [ip], #4
   1bb2a:	442b      	add	r3, r5
   1bb2c:	605a      	str	r2, [r3, #4]
   1bb2e:	3101      	adds	r1, #1
   1bb30:	2910      	cmp	r1, #16
   1bb32:	d1f3      	bne.n	1bb1c <_Unwind_VRS_Pop+0x94>
   1bb34:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
   1bb38:	bf08      	it	eq
   1bb3a:	f8c5 c038 	streq.w	ip, [r5, #56]
   1bb3e:	d0bb      	beq.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bb40:	2000      	movs	r0, #0
   1bb42:	e7b9      	b.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bb44:	2001      	movs	r0, #1
   1bb46:	e7b7      	b.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bb48:	1f50      	subs	r0, r2, #5
   1bb4a:	bf18      	it	ne
   1bb4c:	2001      	movne	r0, #1
   1bb4e:	2a01      	cmp	r2, #1
   1bb50:	bf0c      	ite	eq
   1bb52:	2300      	moveq	r3, #0
   1bb54:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1bb58:	2b00      	cmp	r3, #0
   1bb5a:	d1ac      	bne.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1bb5c:	0c26      	lsrs	r6, r4, #16
   1bb5e:	0424      	lsls	r4, r4, #16
   1bb60:	0c24      	lsrs	r4, r4, #16
   1bb62:	eb04 0106 	add.w	r1, r4, r6
   1bb66:	2a01      	cmp	r2, #1
   1bb68:	bf0c      	ite	eq
   1bb6a:	2310      	moveq	r3, #16
   1bb6c:	2320      	movne	r3, #32
   1bb6e:	428b      	cmp	r3, r1
   1bb70:	d3a1      	bcc.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1bb72:	2a01      	cmp	r2, #1
   1bb74:	bf14      	ite	ne
   1bb76:	f04f 0800 	movne.w	r8, #0	; 0x0
   1bb7a:	f04f 0801 	moveq.w	r8, #1	; 0x1
   1bb7e:	2e0f      	cmp	r6, #15
   1bb80:	bf94      	ite	ls
   1bb82:	2300      	movls	r3, #0
   1bb84:	2301      	movhi	r3, #1
   1bb86:	ea18 0f03 	tst.w	r8, r3
   1bb8a:	d194      	bne.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1bb8c:	2b00      	cmp	r3, #0
   1bb8e:	f040 808d 	bne.w	1bcac <_Unwind_VRS_Pop+0x224>
   1bb92:	2910      	cmp	r1, #16
   1bb94:	bf98      	it	ls
   1bb96:	461f      	movls	r7, r3
   1bb98:	d908      	bls.n	1bbac <_Unwind_VRS_Pop+0x124>
   1bb9a:	f1a1 0710 	sub.w	r7, r1, #16	; 0x10
   1bb9e:	2f00      	cmp	r7, #0
   1bba0:	bf0c      	ite	eq
   1bba2:	2300      	moveq	r3, #0
   1bba4:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1bba8:	2b00      	cmp	r3, #0
   1bbaa:	d184      	bne.n	1bab6 <_Unwind_VRS_Pop+0x2e>
   1bbac:	2e0f      	cmp	r6, #15
   1bbae:	d810      	bhi.n	1bbd2 <_Unwind_VRS_Pop+0x14a>
   1bbb0:	682b      	ldr	r3, [r5, #0]
   1bbb2:	f013 0f01 	tst.w	r3, #1	; 0x1
   1bbb6:	d00c      	beq.n	1bbd2 <_Unwind_VRS_Pop+0x14a>
   1bbb8:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   1bbbc:	2a05      	cmp	r2, #5
   1bbbe:	6029      	str	r1, [r5, #0]
   1bbc0:	f000 80a9 	beq.w	1bd16 <_Unwind_VRS_Pop+0x28e>
   1bbc4:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1bbc8:	4628      	mov	r0, r5
   1bbca:	f840 3b48 	str.w	r3, [r0], #72
   1bbce:	f000 f8bb 	bl	1bd48 <__gnu_Unwind_Save_VFP>
   1bbd2:	2f00      	cmp	r7, #0
   1bbd4:	dd03      	ble.n	1bbde <_Unwind_VRS_Pop+0x156>
   1bbd6:	682b      	ldr	r3, [r5, #0]
   1bbd8:	f013 0f04 	tst.w	r3, #4	; 0x4
   1bbdc:	d177      	bne.n	1bcce <_Unwind_VRS_Pop+0x246>
   1bbde:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1bbe2:	f040 8094 	bne.w	1bd0e <_Unwind_VRS_Pop+0x286>
   1bbe6:	2e0f      	cmp	r6, #15
   1bbe8:	d96b      	bls.n	1bcc2 <_Unwind_VRS_Pop+0x23a>
   1bbea:	2f00      	cmp	r7, #0
   1bbec:	d160      	bne.n	1bcb0 <_Unwind_VRS_Pop+0x228>
   1bbee:	4622      	mov	r2, r4
   1bbf0:	6ba8      	ldr	r0, [r5, #56]
   1bbf2:	2a00      	cmp	r2, #0
   1bbf4:	4684      	mov	ip, r0
   1bbf6:	dd0f      	ble.n	1bc18 <_Unwind_VRS_Pop+0x190>
   1bbf8:	0054      	lsls	r4, r2, #1
   1bbfa:	2100      	movs	r1, #0
   1bbfc:	00f2      	lsls	r2, r6, #3
   1bbfe:	eb0d 0c02 	add.w	ip, sp, r2
   1bc02:	460a      	mov	r2, r1
   1bc04:	5813      	ldr	r3, [r2, r0]
   1bc06:	3101      	adds	r1, #1
   1bc08:	f84c 3002 	str.w	r3, [ip, r2]
   1bc0c:	3204      	adds	r2, #4
   1bc0e:	42a1      	cmp	r1, r4
   1bc10:	d1f8      	bne.n	1bc04 <_Unwind_VRS_Pop+0x17c>
   1bc12:	008b      	lsls	r3, r1, #2
   1bc14:	eb00 0c03 	add.w	ip, r0, r3
   1bc18:	2f00      	cmp	r7, #0
   1bc1a:	dd13      	ble.n	1bc44 <_Unwind_VRS_Pop+0x1bc>
   1bc1c:	2e10      	cmp	r6, #16
   1bc1e:	bf2c      	ite	cs
   1bc20:	4633      	movcs	r3, r6
   1bc22:	2310      	movcc	r3, #16
   1bc24:	3b10      	subs	r3, #16
   1bc26:	00db      	lsls	r3, r3, #3
   1bc28:	aa42      	add	r2, sp, #264
   1bc2a:	2000      	movs	r0, #0
   1bc2c:	007c      	lsls	r4, r7, #1
   1bc2e:	18d2      	adds	r2, r2, r3
   1bc30:	4601      	mov	r1, r0
   1bc32:	f85c 3001 	ldr.w	r3, [ip, r1]
   1bc36:	3001      	adds	r0, #1
   1bc38:	5053      	str	r3, [r2, r1]
   1bc3a:	3104      	adds	r1, #4
   1bc3c:	42a0      	cmp	r0, r4
   1bc3e:	d1f8      	bne.n	1bc32 <_Unwind_VRS_Pop+0x1aa>
   1bc40:	0083      	lsls	r3, r0, #2
   1bc42:	449c      	add	ip, r3
   1bc44:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1bc48:	d159      	bne.n	1bcfe <_Unwind_VRS_Pop+0x276>
   1bc4a:	2e0f      	cmp	r6, #15
   1bc4c:	f8c5 c038 	str.w	ip, [r5, #56]
   1bc50:	d802      	bhi.n	1bc58 <_Unwind_VRS_Pop+0x1d0>
   1bc52:	4668      	mov	r0, sp
   1bc54:	f000 f87c 	bl	1bd50 <__gnu_Unwind_Restore_VFP_D>
   1bc58:	2f00      	cmp	r7, #0
   1bc5a:	f77f af71 	ble.w	1bb40 <_Unwind_VRS_Pop+0xb8>
   1bc5e:	a842      	add	r0, sp, #264
   1bc60:	f000 f87e 	bl	1bd60 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1bc64:	2000      	movs	r0, #0
   1bc66:	e727      	b.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bc68:	6803      	ldr	r3, [r0, #0]
   1bc6a:	f013 0f08 	tst.w	r3, #8	; 0x8
   1bc6e:	d13e      	bne.n	1bcee <_Unwind_VRS_Pop+0x266>
   1bc70:	af22      	add	r7, sp, #136
   1bc72:	4638      	mov	r0, r7
   1bc74:	f000 f89e 	bl	1bdb4 <__gnu_Unwind_Save_WMMXD>
   1bc78:	6ba8      	ldr	r0, [r5, #56]
   1bc7a:	ea4f 0e44 	mov.w	lr, r4, lsl #1
   1bc7e:	4603      	mov	r3, r0
   1bc80:	b174      	cbz	r4, 1bca0 <_Unwind_VRS_Pop+0x218>
   1bc82:	00f3      	lsls	r3, r6, #3
   1bc84:	eb07 0c03 	add.w	ip, r7, r3
   1bc88:	4671      	mov	r1, lr
   1bc8a:	2200      	movs	r2, #0
   1bc8c:	5813      	ldr	r3, [r2, r0]
   1bc8e:	f84c 3002 	str.w	r3, [ip, r2]
   1bc92:	3204      	adds	r2, #4
   1bc94:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
   1bc98:	d1f8      	bne.n	1bc8c <_Unwind_VRS_Pop+0x204>
   1bc9a:	ea4f 038e 	mov.w	r3, lr, lsl #2
   1bc9e:	4403      	add	r3, r0
   1bca0:	4638      	mov	r0, r7
   1bca2:	63ab      	str	r3, [r5, #56]
   1bca4:	f000 f864 	bl	1bd70 <__gnu_Unwind_Restore_WMMXD>
   1bca8:	2000      	movs	r0, #0
   1bcaa:	e705      	b.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bcac:	4627      	mov	r7, r4
   1bcae:	e776      	b.n	1bb9e <_Unwind_VRS_Pop+0x116>
   1bcb0:	a842      	add	r0, sp, #264
   1bcb2:	f000 f859 	bl	1bd68 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1bcb6:	2f00      	cmp	r7, #0
   1bcb8:	bfc8      	it	gt
   1bcba:	f1c6 0210 	rsbgt	r2, r6, #16	; 0x10
   1bcbe:	dc97      	bgt.n	1bbf0 <_Unwind_VRS_Pop+0x168>
   1bcc0:	e795      	b.n	1bbee <_Unwind_VRS_Pop+0x166>
   1bcc2:	4668      	mov	r0, sp
   1bcc4:	f000 f848 	bl	1bd58 <__gnu_Unwind_Save_VFP_D>
   1bcc8:	2f00      	cmp	r7, #0
   1bcca:	d090      	beq.n	1bbee <_Unwind_VRS_Pop+0x166>
   1bccc:	e7f0      	b.n	1bcb0 <_Unwind_VRS_Pop+0x228>
   1bcce:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   1bcd2:	4628      	mov	r0, r5
   1bcd4:	f840 3bd0 	str.w	r3, [r0], #208
   1bcd8:	f000 f846 	bl	1bd68 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1bcdc:	e77f      	b.n	1bbde <_Unwind_VRS_Pop+0x156>
   1bcde:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   1bce2:	6003      	str	r3, [r0, #0]
   1bce4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   1bce8:	f000 f890 	bl	1be0c <__gnu_Unwind_Save_WMMXC>
   1bcec:	e6f6      	b.n	1badc <_Unwind_VRS_Pop+0x54>
   1bcee:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   1bcf2:	6003      	str	r3, [r0, #0]
   1bcf4:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1bcf8:	f000 f85c 	bl	1bdb4 <__gnu_Unwind_Save_WMMXD>
   1bcfc:	e7b8      	b.n	1bc70 <_Unwind_VRS_Pop+0x1e8>
   1bcfe:	f10c 0304 	add.w	r3, ip, #4	; 0x4
   1bd02:	4668      	mov	r0, sp
   1bd04:	63ab      	str	r3, [r5, #56]
   1bd06:	f000 f81b 	bl	1bd40 <__gnu_Unwind_Restore_VFP>
   1bd0a:	2000      	movs	r0, #0
   1bd0c:	e6d4      	b.n	1bab8 <_Unwind_VRS_Pop+0x30>
   1bd0e:	4668      	mov	r0, sp
   1bd10:	f000 f81a 	bl	1bd48 <__gnu_Unwind_Save_VFP>
   1bd14:	e7cf      	b.n	1bcb6 <_Unwind_VRS_Pop+0x22e>
   1bd16:	f041 0302 	orr.w	r3, r1, #2	; 0x2
   1bd1a:	4628      	mov	r0, r5
   1bd1c:	f840 3b48 	str.w	r3, [r0], #72
   1bd20:	f000 f81a 	bl	1bd58 <__gnu_Unwind_Save_VFP_D>
   1bd24:	e755      	b.n	1bbd2 <_Unwind_VRS_Pop+0x14a>
   1bd26:	46c0      	nop			(mov r8, r8)

0001bd28 <__restore_core_regs>:
   1bd28:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1bd2c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1bd30:	469c      	mov	ip, r3
   1bd32:	46a6      	mov	lr, r4
   1bd34:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1bd38:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1bd3c:	46e5      	mov	sp, ip
   1bd3e:	bd00      	pop	{pc}

0001bd40 <__gnu_Unwind_Restore_VFP>:
   1bd40:	ec90 0b21 	fldmiax	r0, {d0-d15}
   1bd44:	4770      	bx	lr
   1bd46:	46c0      	nop			(mov r8, r8)

0001bd48 <__gnu_Unwind_Save_VFP>:
   1bd48:	ec80 0b21 	fstmiax	r0, {d0-d15}
   1bd4c:	4770      	bx	lr
   1bd4e:	46c0      	nop			(mov r8, r8)

0001bd50 <__gnu_Unwind_Restore_VFP_D>:
   1bd50:	ec90 0b20 	vldmia	r0, {d0-d15}
   1bd54:	4770      	bx	lr
   1bd56:	46c0      	nop			(mov r8, r8)

0001bd58 <__gnu_Unwind_Save_VFP_D>:
   1bd58:	ec80 0b20 	vstmia	r0, {d0-d15}
   1bd5c:	4770      	bx	lr
   1bd5e:	46c0      	nop			(mov r8, r8)

0001bd60 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1bd60:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1bd64:	4770      	bx	lr
   1bd66:	46c0      	nop			(mov r8, r8)

0001bd68 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1bd68:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1bd6c:	4770      	bx	lr
   1bd6e:	46c0      	nop			(mov r8, r8)

0001bd70 <__gnu_Unwind_Restore_WMMXD>:
   1bd70:	ecf0 0102 	ldfe	f0, [r0], #8
   1bd74:	ecf0 1102 	ldfe	f1, [r0], #8
   1bd78:	ecf0 2102 	ldfe	f2, [r0], #8
   1bd7c:	ecf0 3102 	ldfe	f3, [r0], #8
   1bd80:	ecf0 4102 	ldfe	f4, [r0], #8
   1bd84:	ecf0 5102 	ldfe	f5, [r0], #8
   1bd88:	ecf0 6102 	ldfe	f6, [r0], #8
   1bd8c:	ecf0 7102 	ldfe	f7, [r0], #8
   1bd90:	ecf0 8102 	ldfp	f0, [r0], #8
   1bd94:	ecf0 9102 	ldfp	f1, [r0], #8
   1bd98:	ecf0 a102 	ldfp	f2, [r0], #8
   1bd9c:	ecf0 b102 	ldfp	f3, [r0], #8
   1bda0:	ecf0 c102 	ldfp	f4, [r0], #8
   1bda4:	ecf0 d102 	ldfp	f5, [r0], #8
   1bda8:	ecf0 e102 	ldfp	f6, [r0], #8
   1bdac:	ecf0 f102 	ldfp	f7, [r0], #8
   1bdb0:	4770      	bx	lr
   1bdb2:	46c0      	nop			(mov r8, r8)

0001bdb4 <__gnu_Unwind_Save_WMMXD>:
   1bdb4:	ece0 0102 	stfe	f0, [r0], #8
   1bdb8:	ece0 1102 	stfe	f1, [r0], #8
   1bdbc:	ece0 2102 	stfe	f2, [r0], #8
   1bdc0:	ece0 3102 	stfe	f3, [r0], #8
   1bdc4:	ece0 4102 	stfe	f4, [r0], #8
   1bdc8:	ece0 5102 	stfe	f5, [r0], #8
   1bdcc:	ece0 6102 	stfe	f6, [r0], #8
   1bdd0:	ece0 7102 	stfe	f7, [r0], #8
   1bdd4:	ece0 8102 	stfp	f0, [r0], #8
   1bdd8:	ece0 9102 	stfp	f1, [r0], #8
   1bddc:	ece0 a102 	stfp	f2, [r0], #8
   1bde0:	ece0 b102 	stfp	f3, [r0], #8
   1bde4:	ece0 c102 	stfp	f4, [r0], #8
   1bde8:	ece0 d102 	stfp	f5, [r0], #8
   1bdec:	ece0 e102 	stfp	f6, [r0], #8
   1bdf0:	ece0 f102 	stfp	f7, [r0], #8
   1bdf4:	4770      	bx	lr
   1bdf6:	46c0      	nop			(mov r8, r8)

0001bdf8 <__gnu_Unwind_Restore_WMMXC>:
   1bdf8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1bdfc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1be00:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1be04:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1be08:	4770      	bx	lr
   1be0a:	46c0      	nop			(mov r8, r8)

0001be0c <__gnu_Unwind_Save_WMMXC>:
   1be0c:	fca0 8101 	stc2	1, cr8, [r0], #4
   1be10:	fca0 9101 	stc2	1, cr9, [r0], #4
   1be14:	fca0 a101 	stc2	1, cr10, [r0], #4
   1be18:	fca0 b101 	stc2	1, cr11, [r0], #4
   1be1c:	4770      	bx	lr
   1be1e:	46c0      	nop			(mov r8, r8)

0001be20 <_Unwind_RaiseException>:
   1be20:	46ec      	mov	ip, sp
   1be22:	b500      	push	{lr}
   1be24:	e92d 5000 	stmdb	sp!, {ip, lr}
   1be28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1be2c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be30:	e92d 000c 	stmdb	sp!, {r2, r3}
   1be34:	a901      	add	r1, sp, #4
   1be36:	f7ff fdc1 	bl	1b9bc <__gnu_Unwind_RaiseException>
   1be3a:	f8dd e040 	ldr.w	lr, [sp, #64]
   1be3e:	b012      	add	sp, #72
   1be40:	4770      	bx	lr
   1be42:	46c0      	nop			(mov r8, r8)

0001be44 <_Unwind_Resume>:
   1be44:	46ec      	mov	ip, sp
   1be46:	b500      	push	{lr}
   1be48:	e92d 5000 	stmdb	sp!, {ip, lr}
   1be4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1be50:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be54:	e92d 000c 	stmdb	sp!, {r2, r3}
   1be58:	a901      	add	r1, sp, #4
   1be5a:	f7ff fdf5 	bl	1ba48 <__gnu_Unwind_Resume>
   1be5e:	f8dd e040 	ldr.w	lr, [sp, #64]
   1be62:	b012      	add	sp, #72
   1be64:	4770      	bx	lr
   1be66:	46c0      	nop			(mov r8, r8)

0001be68 <_Unwind_Resume_or_Rethrow>:
   1be68:	46ec      	mov	ip, sp
   1be6a:	b500      	push	{lr}
   1be6c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1be70:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1be74:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be78:	e92d 000c 	stmdb	sp!, {r2, r3}
   1be7c:	a901      	add	r1, sp, #4
   1be7e:	f7ff fdd5 	bl	1ba2c <__gnu_Unwind_Resume_or_Rethrow>
   1be82:	f8dd e040 	ldr.w	lr, [sp, #64]
   1be86:	b012      	add	sp, #72
   1be88:	4770      	bx	lr
   1be8a:	46c0      	nop			(mov r8, r8)

0001be8c <_Unwind_ForcedUnwind>:
   1be8c:	46ec      	mov	ip, sp
   1be8e:	b500      	push	{lr}
   1be90:	e92d 5000 	stmdb	sp!, {ip, lr}
   1be94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1be98:	f04f 0300 	mov.w	r3, #0	; 0x0
   1be9c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bea0:	ab01      	add	r3, sp, #4
   1bea2:	f7ff fd67 	bl	1b974 <__gnu_Unwind_ForcedUnwind>
   1bea6:	f8dd e040 	ldr.w	lr, [sp, #64]
   1beaa:	b012      	add	sp, #72
   1beac:	4770      	bx	lr
   1beae:	46c0      	nop			(mov r8, r8)

0001beb0 <_Unwind_Backtrace>:
   1beb0:	46ec      	mov	ip, sp
   1beb2:	b500      	push	{lr}
   1beb4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1beb8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1bebc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1bec0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1bec4:	aa01      	add	r2, sp, #4
   1bec6:	f7ff fc99 	bl	1b7fc <__gnu_Unwind_Backtrace>
   1beca:	f8dd e040 	ldr.w	lr, [sp, #64]
   1bece:	b012      	add	sp, #72
   1bed0:	4770      	bx	lr
   1bed2:	46c0      	nop			(mov r8, r8)

0001bed4 <next_unwind_byte>:
   1bed4:	7a03      	ldrb	r3, [r0, #8]
   1bed6:	b993      	cbnz	r3, 1befe <next_unwind_byte+0x2a>
   1bed8:	7a42      	ldrb	r2, [r0, #9]
   1beda:	b172      	cbz	r2, 1befa <next_unwind_byte+0x26>
   1bedc:	3a01      	subs	r2, #1
   1bede:	6843      	ldr	r3, [r0, #4]
   1bee0:	7242      	strb	r2, [r0, #9]
   1bee2:	f853 2b04 	ldr.w	r2, [r3], #4
   1bee6:	6002      	str	r2, [r0, #0]
   1bee8:	2203      	movs	r2, #3
   1beea:	6043      	str	r3, [r0, #4]
   1beec:	7202      	strb	r2, [r0, #8]
   1beee:	6803      	ldr	r3, [r0, #0]
   1bef0:	0e1a      	lsrs	r2, r3, #24
   1bef2:	021b      	lsls	r3, r3, #8
   1bef4:	6003      	str	r3, [r0, #0]
   1bef6:	4610      	mov	r0, r2
   1bef8:	4770      	bx	lr
   1befa:	32b0      	adds	r2, #176
   1befc:	e7fb      	b.n	1bef6 <next_unwind_byte+0x22>
   1befe:	3b01      	subs	r3, #1
   1bf00:	7203      	strb	r3, [r0, #8]
   1bf02:	e7f4      	b.n	1beee <next_unwind_byte+0x1a>

0001bf04 <_Unwind_GetTextRelBase>:
   1bf04:	b500      	push	{lr}
   1bf06:	b081      	sub	sp, #4
   1bf08:	f004 f87c 	bl	20004 <abort>

0001bf0c <_Unwind_GetDataRelBase>:
   1bf0c:	b500      	push	{lr}
   1bf0e:	b081      	sub	sp, #4
   1bf10:	f004 f878 	bl	20004 <abort>

0001bf14 <_Unwind_GetGR>:
   1bf14:	b500      	push	{lr}
   1bf16:	b085      	sub	sp, #20
   1bf18:	460a      	mov	r2, r1
   1bf1a:	ab03      	add	r3, sp, #12
   1bf1c:	2100      	movs	r1, #0
   1bf1e:	9300      	str	r3, [sp, #0]
   1bf20:	460b      	mov	r3, r1
   1bf22:	f7ff f9b7 	bl	1b294 <_Unwind_VRS_Get>
   1bf26:	9803      	ldr	r0, [sp, #12]
   1bf28:	b005      	add	sp, #20
   1bf2a:	bd00      	pop	{pc}

0001bf2c <unwind_UCB_from_context>:
   1bf2c:	b500      	push	{lr}
   1bf2e:	210c      	movs	r1, #12
   1bf30:	b081      	sub	sp, #4
   1bf32:	f7ff ffef 	bl	1bf14 <_Unwind_GetGR>
   1bf36:	b001      	add	sp, #4
   1bf38:	bd00      	pop	{pc}
   1bf3a:	46c0      	nop			(mov r8, r8)

0001bf3c <_Unwind_GetLanguageSpecificData>:
   1bf3c:	b500      	push	{lr}
   1bf3e:	b081      	sub	sp, #4
   1bf40:	f7ff fff4 	bl	1bf2c <unwind_UCB_from_context>
   1bf44:	6cc2      	ldr	r2, [r0, #76]
   1bf46:	79d3      	ldrb	r3, [r2, #7]
   1bf48:	1d10      	adds	r0, r2, #4
   1bf4a:	3301      	adds	r3, #1
   1bf4c:	009b      	lsls	r3, r3, #2
   1bf4e:	18c0      	adds	r0, r0, r3
   1bf50:	b001      	add	sp, #4
   1bf52:	bd00      	pop	{pc}

0001bf54 <_Unwind_GetRegionStart>:
   1bf54:	b500      	push	{lr}
   1bf56:	b081      	sub	sp, #4
   1bf58:	f7ff ffe8 	bl	1bf2c <unwind_UCB_from_context>
   1bf5c:	6c80      	ldr	r0, [r0, #72]
   1bf5e:	b001      	add	sp, #4
   1bf60:	bd00      	pop	{pc}
   1bf62:	46c0      	nop			(mov r8, r8)

0001bf64 <__gnu_unwind_execute>:
   1bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bf68:	b084      	sub	sp, #16
   1bf6a:	4606      	mov	r6, r0
   1bf6c:	460f      	mov	r7, r1
   1bf6e:	f04f 0800 	mov.w	r8, #0	; 0x0
   1bf72:	f10d 0a0c 	add.w	sl, sp, #12	; 0xc
   1bf76:	f44f 697f 	mov.w	r9, #4080	; 0xff0
   1bf7a:	4638      	mov	r0, r7
   1bf7c:	f7ff ffaa 	bl	1bed4 <next_unwind_byte>
   1bf80:	28b0      	cmp	r0, #176
   1bf82:	4604      	mov	r4, r0
   1bf84:	d02a      	beq.n	1bfdc <__gnu_unwind_execute+0x78>
   1bf86:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   1bf8a:	d02f      	beq.n	1bfec <__gnu_unwind_execute+0x88>
   1bf8c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1bf90:	2b80      	cmp	r3, #128
   1bf92:	d05d      	beq.n	1c050 <__gnu_unwind_execute+0xec>
   1bf94:	2b90      	cmp	r3, #144
   1bf96:	d143      	bne.n	1c020 <__gnu_unwind_execute+0xbc>
   1bf98:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1bf9c:	2a0f      	cmp	r2, #15
   1bf9e:	bf14      	ite	ne
   1bfa0:	2300      	movne	r3, #0
   1bfa2:	2301      	moveq	r3, #1
   1bfa4:	2a0d      	cmp	r2, #13
   1bfa6:	bf14      	ite	ne
   1bfa8:	461c      	movne	r4, r3
   1bfaa:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   1bfae:	2c00      	cmp	r4, #0
   1bfb0:	d14c      	bne.n	1c04c <__gnu_unwind_execute+0xe8>
   1bfb2:	4621      	mov	r1, r4
   1bfb4:	4623      	mov	r3, r4
   1bfb6:	4630      	mov	r0, r6
   1bfb8:	f8cd a000 	str.w	sl, [sp]
   1bfbc:	f7ff f96a 	bl	1b294 <_Unwind_VRS_Get>
   1bfc0:	4621      	mov	r1, r4
   1bfc2:	220d      	movs	r2, #13
   1bfc4:	4623      	mov	r3, r4
   1bfc6:	4630      	mov	r0, r6
   1bfc8:	f8cd a000 	str.w	sl, [sp]
   1bfcc:	f7ff f98a 	bl	1b2e4 <_Unwind_VRS_Set>
   1bfd0:	4638      	mov	r0, r7
   1bfd2:	f7ff ff7f 	bl	1bed4 <next_unwind_byte>
   1bfd6:	28b0      	cmp	r0, #176
   1bfd8:	4604      	mov	r4, r0
   1bfda:	d1d4      	bne.n	1bf86 <__gnu_unwind_execute+0x22>
   1bfdc:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1bfe0:	f000 80c3 	beq.w	1c16a <__gnu_unwind_execute+0x206>
   1bfe4:	2000      	movs	r0, #0
   1bfe6:	b004      	add	sp, #16
   1bfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bfec:	0083      	lsls	r3, r0, #2
   1bfee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1bff2:	1d1d      	adds	r5, r3, #4
   1bff4:	220d      	movs	r2, #13
   1bff6:	4630      	mov	r0, r6
   1bff8:	460b      	mov	r3, r1
   1bffa:	f8cd a000 	str.w	sl, [sp]
   1bffe:	f7ff f949 	bl	1b294 <_Unwind_VRS_Get>
   1c002:	f014 0f40 	tst.w	r4, #64	; 0x40
   1c006:	d03b      	beq.n	1c080 <__gnu_unwind_execute+0x11c>
   1c008:	9b03      	ldr	r3, [sp, #12]
   1c00a:	1b5b      	subs	r3, r3, r5
   1c00c:	9303      	str	r3, [sp, #12]
   1c00e:	2100      	movs	r1, #0
   1c010:	4630      	mov	r0, r6
   1c012:	220d      	movs	r2, #13
   1c014:	460b      	mov	r3, r1
   1c016:	f8cd a000 	str.w	sl, [sp]
   1c01a:	f7ff f963 	bl	1b2e4 <_Unwind_VRS_Set>
   1c01e:	e7ac      	b.n	1bf7a <__gnu_unwind_execute+0x16>
   1c020:	2ba0      	cmp	r3, #160
   1c022:	d131      	bne.n	1c088 <__gnu_unwind_execute+0x124>
   1c024:	ea6f 0300 	mvn.w	r3, r0
   1c028:	f003 0307 	and.w	r3, r3, #7	; 0x7
   1c02c:	fa49 f303 	asr.w	r3, r9, r3
   1c030:	f010 0f08 	tst.w	r0, #8	; 0x8
   1c034:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   1c038:	bf18      	it	ne
   1c03a:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
   1c03e:	2100      	movs	r1, #0
   1c040:	4630      	mov	r0, r6
   1c042:	460b      	mov	r3, r1
   1c044:	f7ff fd20 	bl	1ba88 <_Unwind_VRS_Pop>
   1c048:	2800      	cmp	r0, #0
   1c04a:	d096      	beq.n	1bf7a <__gnu_unwind_execute+0x16>
   1c04c:	2009      	movs	r0, #9
   1c04e:	e7ca      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c050:	0204      	lsls	r4, r0, #8
   1c052:	4638      	mov	r0, r7
   1c054:	f7ff ff3e 	bl	1bed4 <next_unwind_byte>
   1c058:	4320      	orrs	r0, r4
   1c05a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c05e:	d0f5      	beq.n	1c04c <__gnu_unwind_execute+0xe8>
   1c060:	0104      	lsls	r4, r0, #4
   1c062:	0422      	lsls	r2, r4, #16
   1c064:	2100      	movs	r1, #0
   1c066:	0c12      	lsrs	r2, r2, #16
   1c068:	4630      	mov	r0, r6
   1c06a:	460b      	mov	r3, r1
   1c06c:	f7ff fd0c 	bl	1ba88 <_Unwind_VRS_Pop>
   1c070:	2800      	cmp	r0, #0
   1c072:	d1eb      	bne.n	1c04c <__gnu_unwind_execute+0xe8>
   1c074:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1c078:	bf18      	it	ne
   1c07a:	f04f 0801 	movne.w	r8, #1	; 0x1
   1c07e:	e77c      	b.n	1bf7a <__gnu_unwind_execute+0x16>
   1c080:	9b03      	ldr	r3, [sp, #12]
   1c082:	195b      	adds	r3, r3, r5
   1c084:	9303      	str	r3, [sp, #12]
   1c086:	e7c2      	b.n	1c00e <__gnu_unwind_execute+0xaa>
   1c088:	2bb0      	cmp	r3, #176
   1c08a:	d014      	beq.n	1c0b6 <__gnu_unwind_execute+0x152>
   1c08c:	2bc0      	cmp	r3, #192
   1c08e:	d02c      	beq.n	1c0ea <__gnu_unwind_execute+0x186>
   1c090:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1c094:	2bd0      	cmp	r3, #208
   1c096:	d1d9      	bne.n	1c04c <__gnu_unwind_execute+0xe8>
   1c098:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1c09c:	3201      	adds	r2, #1
   1c09e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1c0a2:	4630      	mov	r0, r6
   1c0a4:	2101      	movs	r1, #1
   1c0a6:	3bcb      	subs	r3, #203
   1c0a8:	f7ff fcee 	bl	1ba88 <_Unwind_VRS_Pop>
   1c0ac:	2800      	cmp	r0, #0
   1c0ae:	f43f af64 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c0b2:	2009      	movs	r0, #9
   1c0b4:	e797      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c0b6:	28b1      	cmp	r0, #177
   1c0b8:	d03a      	beq.n	1c130 <__gnu_unwind_execute+0x1cc>
   1c0ba:	28b2      	cmp	r0, #178
   1c0bc:	f000 808f 	beq.w	1c1de <__gnu_unwind_execute+0x27a>
   1c0c0:	28b3      	cmp	r0, #179
   1c0c2:	d047      	beq.n	1c154 <__gnu_unwind_execute+0x1f0>
   1c0c4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1c0c8:	2bb4      	cmp	r3, #180
   1c0ca:	d06e      	beq.n	1c1aa <__gnu_unwind_execute+0x246>
   1c0cc:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1c0d0:	3201      	adds	r2, #1
   1c0d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1c0d6:	2101      	movs	r1, #1
   1c0d8:	4630      	mov	r0, r6
   1c0da:	460b      	mov	r3, r1
   1c0dc:	f7ff fcd4 	bl	1ba88 <_Unwind_VRS_Pop>
   1c0e0:	2800      	cmp	r0, #0
   1c0e2:	f43f af4a 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c0e6:	2009      	movs	r0, #9
   1c0e8:	e77d      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c0ea:	28c6      	cmp	r0, #198
   1c0ec:	d06c      	beq.n	1c1c8 <__gnu_unwind_execute+0x264>
   1c0ee:	28c7      	cmp	r0, #199
   1c0f0:	f000 809a 	beq.w	1c228 <__gnu_unwind_execute+0x2c4>
   1c0f4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1c0f8:	2bc0      	cmp	r3, #192
   1c0fa:	d047      	beq.n	1c18c <__gnu_unwind_execute+0x228>
   1c0fc:	28c8      	cmp	r0, #200
   1c0fe:	f000 80a7 	beq.w	1c250 <__gnu_unwind_execute+0x2ec>
   1c102:	28c9      	cmp	r0, #201
   1c104:	d1a2      	bne.n	1c04c <__gnu_unwind_execute+0xe8>
   1c106:	4638      	mov	r0, r7
   1c108:	f7ff fee4 	bl	1bed4 <next_unwind_byte>
   1c10c:	4602      	mov	r2, r0
   1c10e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c112:	f002 020f 	and.w	r2, r2, #15	; 0xf
   1c116:	3201      	adds	r2, #1
   1c118:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1c11c:	4630      	mov	r0, r6
   1c11e:	2101      	movs	r1, #1
   1c120:	2305      	movs	r3, #5
   1c122:	f7ff fcb1 	bl	1ba88 <_Unwind_VRS_Pop>
   1c126:	2800      	cmp	r0, #0
   1c128:	f43f af27 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c12c:	2009      	movs	r0, #9
   1c12e:	e75a      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c130:	4638      	mov	r0, r7
   1c132:	f7ff fecf 	bl	1bed4 <next_unwind_byte>
   1c136:	4602      	mov	r2, r0
   1c138:	2800      	cmp	r0, #0
   1c13a:	d087      	beq.n	1c04c <__gnu_unwind_execute+0xe8>
   1c13c:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   1c140:	d184      	bne.n	1c04c <__gnu_unwind_execute+0xe8>
   1c142:	4630      	mov	r0, r6
   1c144:	460b      	mov	r3, r1
   1c146:	f7ff fc9f 	bl	1ba88 <_Unwind_VRS_Pop>
   1c14a:	2800      	cmp	r0, #0
   1c14c:	f43f af15 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c150:	2009      	movs	r0, #9
   1c152:	e748      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c154:	4638      	mov	r0, r7
   1c156:	f7ff febd 	bl	1bed4 <next_unwind_byte>
   1c15a:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c15e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c162:	3201      	adds	r2, #1
   1c164:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1c168:	e7b5      	b.n	1c0d6 <__gnu_unwind_execute+0x172>
   1c16a:	ac03      	add	r4, sp, #12
   1c16c:	4641      	mov	r1, r8
   1c16e:	220e      	movs	r2, #14
   1c170:	4643      	mov	r3, r8
   1c172:	4630      	mov	r0, r6
   1c174:	9400      	str	r4, [sp, #0]
   1c176:	f7ff f88d 	bl	1b294 <_Unwind_VRS_Get>
   1c17a:	4630      	mov	r0, r6
   1c17c:	4641      	mov	r1, r8
   1c17e:	220f      	movs	r2, #15
   1c180:	4643      	mov	r3, r8
   1c182:	9400      	str	r4, [sp, #0]
   1c184:	f7ff f8ae 	bl	1b2e4 <_Unwind_VRS_Set>
   1c188:	4640      	mov	r0, r8
   1c18a:	e72c      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c18c:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c190:	3201      	adds	r2, #1
   1c192:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1c196:	2103      	movs	r1, #3
   1c198:	4630      	mov	r0, r6
   1c19a:	460b      	mov	r3, r1
   1c19c:	f7ff fc74 	bl	1ba88 <_Unwind_VRS_Pop>
   1c1a0:	2800      	cmp	r0, #0
   1c1a2:	f43f aeea 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c1a6:	2009      	movs	r0, #9
   1c1a8:	e71d      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c1aa:	f000 0203 	and.w	r2, r0, #3	; 0x3
   1c1ae:	3201      	adds	r2, #1
   1c1b0:	2102      	movs	r1, #2
   1c1b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   1c1b6:	4630      	mov	r0, r6
   1c1b8:	460b      	mov	r3, r1
   1c1ba:	f7ff fc65 	bl	1ba88 <_Unwind_VRS_Pop>
   1c1be:	2800      	cmp	r0, #0
   1c1c0:	f43f aedb 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c1c4:	2009      	movs	r0, #9
   1c1c6:	e70e      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c1c8:	4638      	mov	r0, r7
   1c1ca:	f7ff fe83 	bl	1bed4 <next_unwind_byte>
   1c1ce:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c1d2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c1d6:	3201      	adds	r2, #1
   1c1d8:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1c1dc:	e7db      	b.n	1c196 <__gnu_unwind_execute+0x232>
   1c1de:	2100      	movs	r1, #0
   1c1e0:	220d      	movs	r2, #13
   1c1e2:	460b      	mov	r3, r1
   1c1e4:	4630      	mov	r0, r6
   1c1e6:	f8cd a000 	str.w	sl, [sp]
   1c1ea:	f7ff f853 	bl	1b294 <_Unwind_VRS_Get>
   1c1ee:	4638      	mov	r0, r7
   1c1f0:	f7ff fe70 	bl	1bed4 <next_unwind_byte>
   1c1f4:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c1f8:	d032      	beq.n	1c260 <__gnu_unwind_execute+0x2fc>
   1c1fa:	2402      	movs	r4, #2
   1c1fc:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1c200:	40a2      	lsls	r2, r4
   1c202:	9b03      	ldr	r3, [sp, #12]
   1c204:	4638      	mov	r0, r7
   1c206:	189b      	adds	r3, r3, r2
   1c208:	9303      	str	r3, [sp, #12]
   1c20a:	f7ff fe63 	bl	1bed4 <next_unwind_byte>
   1c20e:	3407      	adds	r4, #7
   1c210:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c214:	d1f2      	bne.n	1c1fc <__gnu_unwind_execute+0x298>
   1c216:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c21a:	40a3      	lsls	r3, r4
   1c21c:	9a03      	ldr	r2, [sp, #12]
   1c21e:	f502 7201 	add.w	r2, r2, #516	; 0x204
   1c222:	18d2      	adds	r2, r2, r3
   1c224:	9203      	str	r2, [sp, #12]
   1c226:	e6f2      	b.n	1c00e <__gnu_unwind_execute+0xaa>
   1c228:	4638      	mov	r0, r7
   1c22a:	f7ff fe53 	bl	1bed4 <next_unwind_byte>
   1c22e:	4602      	mov	r2, r0
   1c230:	2800      	cmp	r0, #0
   1c232:	f43f af0b 	beq.w	1c04c <__gnu_unwind_execute+0xe8>
   1c236:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1c23a:	f47f af07 	bne.w	1c04c <__gnu_unwind_execute+0xe8>
   1c23e:	4630      	mov	r0, r6
   1c240:	2104      	movs	r1, #4
   1c242:	f7ff fc21 	bl	1ba88 <_Unwind_VRS_Pop>
   1c246:	2800      	cmp	r0, #0
   1c248:	f43f ae97 	beq.w	1bf7a <__gnu_unwind_execute+0x16>
   1c24c:	2009      	movs	r0, #9
   1c24e:	e6ca      	b.n	1bfe6 <__gnu_unwind_execute+0x82>
   1c250:	4638      	mov	r0, r7
   1c252:	f7ff fe3f 	bl	1bed4 <next_unwind_byte>
   1c256:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c25a:	4602      	mov	r2, r0
   1c25c:	3310      	adds	r3, #16
   1c25e:	e758      	b.n	1c112 <__gnu_unwind_execute+0x1ae>
   1c260:	3cb0      	subs	r4, #176
   1c262:	e7d8      	b.n	1c216 <__gnu_unwind_execute+0x2b2>

0001c264 <__gnu_unwind_frame>:
   1c264:	b500      	push	{lr}
   1c266:	f8d0 c04c 	ldr.w	ip, [r0, #76]
   1c26a:	b085      	sub	sp, #20
   1c26c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1c270:	f10c 0208 	add.w	r2, ip, #8	; 0x8
   1c274:	021b      	lsls	r3, r3, #8
   1c276:	9301      	str	r3, [sp, #4]
   1c278:	2303      	movs	r3, #3
   1c27a:	f88d 300c 	strb.w	r3, [sp, #12]
   1c27e:	9202      	str	r2, [sp, #8]
   1c280:	f89c 2007 	ldrb.w	r2, [ip, #7]
   1c284:	4608      	mov	r0, r1
   1c286:	a901      	add	r1, sp, #4
   1c288:	f88d 200d 	strb.w	r2, [sp, #13]
   1c28c:	f7ff fe6a 	bl	1bf64 <__gnu_unwind_execute>
   1c290:	b005      	add	sp, #20
   1c292:	bd00      	pop	{pc}

0001c294 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
   1c294:	2100      	movs	r1, #0
  b  LoopCopyDataInit
   1c296:	e003      	b.n	1c2a0 <LoopCopyDataInit>

0001c298 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
   1c298:	4b09      	ldr	r3, [pc, #36]	(1c2c0 <LoopFillZerobss+0xc>)
  ldr  r3, [r3, r1]
   1c29a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
   1c29c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
   1c29e:	3104      	adds	r1, #4

0001c2a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
   1c2a0:	4808      	ldr	r0, [pc, #32]	(1c2c4 <LoopFillZerobss+0x10>)
  ldr  r3, =_edata
   1c2a2:	4b09      	ldr	r3, [pc, #36]	(1c2c8 <LoopFillZerobss+0x14>)
  adds  r2, r0, r1
   1c2a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
   1c2a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
   1c2a8:	d3f6      	bcc.n	1c298 <CopyDataInit>
  ldr  r2, =_sbss
   1c2aa:	4a08      	ldr	r2, [pc, #32]	(1c2cc <LoopFillZerobss+0x18>)
  b  LoopFillZerobss
   1c2ac:	e002      	b.n	1c2b4 <LoopFillZerobss>

0001c2ae <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
   1c2ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
   1c2b0:	f842 3b04 	str.w	r3, [r2], #4

0001c2b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
   1c2b4:	4b06      	ldr	r3, [pc, #24]	(1c2d0 <LoopFillZerobss+0x1c>)
  cmp  r2, r3
   1c2b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
   1c2b8:	d3f9      	bcc.n	1c2ae <FillZerobss>
/* Call the application's entry point.*/
  bl  main
   1c2ba:	f7f2 f8df 	bl	e47c <main>
  bx  lr    
   1c2be:	4770      	bx	lr
   1c2c0:	00023bd8 	.word	0x00023bd8
   1c2c4:	20000000 	.word	0x20000000
   1c2c8:	20000034 	.word	0x20000034
   1c2cc:	20000548 	.word	0x20000548
   1c2d0:	20000680 	.word	0x20000680

0001c2d4 <ADC1_2_IRQHandler>:
 * @retval : None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
   1c2d4:	e7fe      	b.n	1c2d4 <ADC1_2_IRQHandler>
	...

0001c2d8 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c2d8:	b480      	push	{r7}
   1c2da:	b083      	sub	sp, #12
   1c2dc:	af00      	add	r7, sp, #0
   1c2de:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c2e0:	687a      	ldr	r2, [r7, #4]
   1c2e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c2e6:	6093      	str	r3, [r2, #8]
}
   1c2e8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c2ec:	46bd      	mov	sp, r7
   1c2ee:	bc80      	pop	{r7}
   1c2f0:	4770      	bx	lr
   1c2f2:	46c0      	nop			(mov r8, r8)

0001c2f4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c2f4:	b480      	push	{r7}
   1c2f6:	b083      	sub	sp, #12
   1c2f8:	af00      	add	r7, sp, #0
   1c2fa:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c2fc:	687a      	ldr	r2, [r7, #4]
   1c2fe:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c302:	6093      	str	r3, [r2, #8]
}
   1c304:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c308:	46bd      	mov	sp, r7
   1c30a:	bc80      	pop	{r7}
   1c30c:	4770      	bx	lr
   1c30e:	46c0      	nop			(mov r8, r8)

0001c310 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c310:	b480      	push	{r7}
   1c312:	b083      	sub	sp, #12
   1c314:	af00      	add	r7, sp, #0
   1c316:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c318:	687a      	ldr	r2, [r7, #4]
   1c31a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c31e:	6093      	str	r3, [r2, #8]
}
   1c320:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c324:	46bd      	mov	sp, r7
   1c326:	bc80      	pop	{r7}
   1c328:	4770      	bx	lr
   1c32a:	46c0      	nop			(mov r8, r8)

0001c32c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c32c:	b480      	push	{r7}
   1c32e:	b083      	sub	sp, #12
   1c330:	af00      	add	r7, sp, #0
   1c332:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c334:	687a      	ldr	r2, [r7, #4]
   1c336:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c33a:	6093      	str	r3, [r2, #8]
}
   1c33c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c340:	46bd      	mov	sp, r7
   1c342:	bc80      	pop	{r7}
   1c344:	4770      	bx	lr
   1c346:	46c0      	nop			(mov r8, r8)

0001c348 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1c348:	b580      	push	{r7, lr}
   1c34a:	b082      	sub	sp, #8
   1c34c:	af00      	add	r7, sp, #0
   1c34e:	6078      	str	r0, [r7, #4]
   1c350:	6039      	str	r1, [r7, #0]
   1c352:	687a      	ldr	r2, [r7, #4]
   1c354:	4b0e      	ldr	r3, [pc, #56]	(1c390 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei+0x48>)
   1c356:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1c358:	687a      	ldr	r2, [r7, #4]
   1c35a:	683b      	ldr	r3, [r7, #0]
   1c35c:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1c35e:	683b      	ldr	r3, [r7, #0]
   1c360:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c364:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c368:	ebc2 0303 	rsb	r3, r2, r3
   1c36c:	4618      	mov	r0, r3
   1c36e:	f7f2 fa33 	bl	e7d8 <_Znaj>
   1c372:	4603      	mov	r3, r0
   1c374:	461a      	mov	r2, r3
   1c376:	687b      	ldr	r3, [r7, #4]
   1c378:	605a      	str	r2, [r3, #4]
    size = 0;
   1c37a:	687a      	ldr	r2, [r7, #4]
   1c37c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c380:	6093      	str	r3, [r2, #8]
   1c382:	687b      	ldr	r3, [r7, #4]
}
   1c384:	4618      	mov	r0, r3
   1c386:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c38a:	46bd      	mov	sp, r7
   1c38c:	bd80      	pop	{r7, pc}
   1c38e:	46c0      	nop			(mov r8, r8)
   1c390:	00022678 	.word	0x00022678

0001c394 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1c394:	b580      	push	{r7, lr}
   1c396:	b082      	sub	sp, #8
   1c398:	af00      	add	r7, sp, #0
   1c39a:	6078      	str	r0, [r7, #4]
   1c39c:	6039      	str	r1, [r7, #0]
   1c39e:	687a      	ldr	r2, [r7, #4]
   1c3a0:	4b0b      	ldr	r3, [pc, #44]	(1c3d0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei+0x3c>)
   1c3a2:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1c3a4:	687a      	ldr	r2, [r7, #4]
   1c3a6:	683b      	ldr	r3, [r7, #0]
   1c3a8:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1c3aa:	683b      	ldr	r3, [r7, #0]
   1c3ac:	4618      	mov	r0, r3
   1c3ae:	f7f2 fa13 	bl	e7d8 <_Znaj>
   1c3b2:	4603      	mov	r3, r0
   1c3b4:	461a      	mov	r2, r3
   1c3b6:	687b      	ldr	r3, [r7, #4]
   1c3b8:	605a      	str	r2, [r3, #4]
    size = 0;
   1c3ba:	687a      	ldr	r2, [r7, #4]
   1c3bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c3c0:	6093      	str	r3, [r2, #8]
   1c3c2:	687b      	ldr	r3, [r7, #4]
}
   1c3c4:	4618      	mov	r0, r3
   1c3c6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c3ca:	46bd      	mov	sp, r7
   1c3cc:	bd80      	pop	{r7, pc}
   1c3ce:	46c0      	nop			(mov r8, r8)
   1c3d0:	00022688 	.word	0x00022688

0001c3d4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1c3d4:	b580      	push	{r7, lr}
   1c3d6:	b082      	sub	sp, #8
   1c3d8:	af00      	add	r7, sp, #0
   1c3da:	6078      	str	r0, [r7, #4]
   1c3dc:	6039      	str	r1, [r7, #0]
   1c3de:	687a      	ldr	r2, [r7, #4]
   1c3e0:	4b0b      	ldr	r3, [pc, #44]	(1c410 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei+0x3c>)
   1c3e2:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1c3e4:	687a      	ldr	r2, [r7, #4]
   1c3e6:	683b      	ldr	r3, [r7, #0]
   1c3e8:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1c3ea:	683b      	ldr	r3, [r7, #0]
   1c3ec:	4618      	mov	r0, r3
   1c3ee:	f7f2 f9f3 	bl	e7d8 <_Znaj>
   1c3f2:	4603      	mov	r3, r0
   1c3f4:	461a      	mov	r2, r3
   1c3f6:	687b      	ldr	r3, [r7, #4]
   1c3f8:	605a      	str	r2, [r3, #4]
    size = 0;
   1c3fa:	687a      	ldr	r2, [r7, #4]
   1c3fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c400:	6093      	str	r3, [r2, #8]
   1c402:	687b      	ldr	r3, [r7, #4]
}
   1c404:	4618      	mov	r0, r3
   1c406:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c40a:	46bd      	mov	sp, r7
   1c40c:	bd80      	pop	{r7, pc}
   1c40e:	46c0      	nop			(mov r8, r8)
   1c410:	00022698 	.word	0x00022698

0001c414 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c414:	b580      	push	{r7, lr}
   1c416:	b084      	sub	sp, #16
   1c418:	af00      	add	r7, sp, #0
   1c41a:	6078      	str	r0, [r7, #4]
   1c41c:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c41e:	687b      	ldr	r3, [r7, #4]
   1c420:	689a      	ldr	r2, [r3, #8]
   1c422:	687b      	ldr	r3, [r7, #4]
   1c424:	68db      	ldr	r3, [r3, #12]
   1c426:	429a      	cmp	r2, r3
   1c428:	da0e      	bge.n	1c448 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1c42a:	687b      	ldr	r3, [r7, #4]
   1c42c:	685a      	ldr	r2, [r3, #4]
   1c42e:	687b      	ldr	r3, [r7, #4]
   1c430:	689b      	ldr	r3, [r3, #8]
   1c432:	441a      	add	r2, r3
   1c434:	683b      	ldr	r3, [r7, #0]
   1c436:	781b      	ldrb	r3, [r3, #0]
   1c438:	7013      	strb	r3, [r2, #0]
        size++;
   1c43a:	687b      	ldr	r3, [r7, #4]
   1c43c:	689b      	ldr	r3, [r3, #8]
   1c43e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c442:	687b      	ldr	r3, [r7, #4]
   1c444:	609a      	str	r2, [r3, #8]
   1c446:	e03c      	b.n	1c4c2 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c448:	687b      	ldr	r3, [r7, #4]
   1c44a:	685b      	ldr	r3, [r3, #4]
   1c44c:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c44e:	687b      	ldr	r3, [r7, #4]
   1c450:	68db      	ldr	r3, [r3, #12]
   1c452:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c456:	687b      	ldr	r3, [r7, #4]
   1c458:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c45a:	687b      	ldr	r3, [r7, #4]
   1c45c:	68db      	ldr	r3, [r3, #12]
   1c45e:	4618      	mov	r0, r3
   1c460:	f7f2 f9ba 	bl	e7d8 <_Znaj>
   1c464:	4603      	mov	r3, r0
   1c466:	461a      	mov	r2, r3
   1c468:	687b      	ldr	r3, [r7, #4]
   1c46a:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c46c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c470:	60fb      	str	r3, [r7, #12]
   1c472:	e00d      	b.n	1c490 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1c474:	687b      	ldr	r3, [r7, #4]
   1c476:	685a      	ldr	r2, [r3, #4]
   1c478:	68fb      	ldr	r3, [r7, #12]
   1c47a:	eb02 0103 	add.w	r1, r2, r3
   1c47e:	68fa      	ldr	r2, [r7, #12]
   1c480:	68bb      	ldr	r3, [r7, #8]
   1c482:	4413      	add	r3, r2
   1c484:	781b      	ldrb	r3, [r3, #0]
   1c486:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c488:	68fb      	ldr	r3, [r7, #12]
   1c48a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c48e:	60fb      	str	r3, [r7, #12]
   1c490:	687b      	ldr	r3, [r7, #4]
   1c492:	689a      	ldr	r2, [r3, #8]
   1c494:	68fb      	ldr	r3, [r7, #12]
   1c496:	429a      	cmp	r2, r3
   1c498:	dcec      	bgt.n	1c474 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c49a:	68bb      	ldr	r3, [r7, #8]
   1c49c:	2b00      	cmp	r3, #0
   1c49e:	d002      	beq.n	1c4a6 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x92>
   1c4a0:	68b8      	ldr	r0, [r7, #8]
   1c4a2:	f7f2 fa1f 	bl	e8e4 <_ZdaPv>
        table[size] = value;
   1c4a6:	687b      	ldr	r3, [r7, #4]
   1c4a8:	685a      	ldr	r2, [r3, #4]
   1c4aa:	687b      	ldr	r3, [r7, #4]
   1c4ac:	689b      	ldr	r3, [r3, #8]
   1c4ae:	441a      	add	r2, r3
   1c4b0:	683b      	ldr	r3, [r7, #0]
   1c4b2:	781b      	ldrb	r3, [r3, #0]
   1c4b4:	7013      	strb	r3, [r2, #0]
        size++;
   1c4b6:	687b      	ldr	r3, [r7, #4]
   1c4b8:	689b      	ldr	r3, [r3, #8]
   1c4ba:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c4be:	687b      	ldr	r3, [r7, #4]
   1c4c0:	609a      	str	r2, [r3, #8]
    }
}
   1c4c2:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c4c6:	46bd      	mov	sp, r7
   1c4c8:	bd80      	pop	{r7, pc}
   1c4ca:	46c0      	nop			(mov r8, r8)

0001c4cc <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c4cc:	b580      	push	{r7, lr}
   1c4ce:	b084      	sub	sp, #16
   1c4d0:	af00      	add	r7, sp, #0
   1c4d2:	6078      	str	r0, [r7, #4]
   1c4d4:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c4d6:	687b      	ldr	r3, [r7, #4]
   1c4d8:	689a      	ldr	r2, [r3, #8]
   1c4da:	687b      	ldr	r3, [r7, #4]
   1c4dc:	68db      	ldr	r3, [r3, #12]
   1c4de:	429a      	cmp	r2, r3
   1c4e0:	da18      	bge.n	1c514 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x48>
    {
        table[size] = value;
   1c4e2:	687b      	ldr	r3, [r7, #4]
   1c4e4:	6859      	ldr	r1, [r3, #4]
   1c4e6:	687b      	ldr	r3, [r7, #4]
   1c4e8:	689b      	ldr	r3, [r3, #8]
   1c4ea:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c4ee:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c4f2:	ebc2 0303 	rsb	r3, r2, r3
   1c4f6:	440b      	add	r3, r1
   1c4f8:	683a      	ldr	r2, [r7, #0]
   1c4fa:	469c      	mov	ip, r3
   1c4fc:	4613      	mov	r3, r2
   1c4fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c502:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1c506:	687b      	ldr	r3, [r7, #4]
   1c508:	689b      	ldr	r3, [r3, #8]
   1c50a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c50e:	687b      	ldr	r3, [r7, #4]
   1c510:	609a      	str	r2, [r3, #8]
   1c512:	e05a      	b.n	1c5ca <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xfe>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c514:	687b      	ldr	r3, [r7, #4]
   1c516:	685b      	ldr	r3, [r3, #4]
   1c518:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c51a:	687b      	ldr	r3, [r7, #4]
   1c51c:	68db      	ldr	r3, [r3, #12]
   1c51e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c522:	687b      	ldr	r3, [r7, #4]
   1c524:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c526:	687b      	ldr	r3, [r7, #4]
   1c528:	68db      	ldr	r3, [r3, #12]
   1c52a:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c52e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c532:	ebc2 0303 	rsb	r3, r2, r3
   1c536:	4618      	mov	r0, r3
   1c538:	f7f2 f94e 	bl	e7d8 <_Znaj>
   1c53c:	4603      	mov	r3, r0
   1c53e:	461a      	mov	r2, r3
   1c540:	687b      	ldr	r3, [r7, #4]
   1c542:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c544:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c548:	60fb      	str	r3, [r7, #12]
   1c54a:	e01b      	b.n	1c584 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xb8>
            table[i] = oldTable[i];
   1c54c:	687b      	ldr	r3, [r7, #4]
   1c54e:	6859      	ldr	r1, [r3, #4]
   1c550:	68fb      	ldr	r3, [r7, #12]
   1c552:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c556:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c55a:	ebc2 0303 	rsb	r3, r2, r3
   1c55e:	4419      	add	r1, r3
   1c560:	68fb      	ldr	r3, [r7, #12]
   1c562:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c566:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c56a:	ebc2 0203 	rsb	r2, r2, r3
   1c56e:	68bb      	ldr	r3, [r7, #8]
   1c570:	4413      	add	r3, r2
   1c572:	468c      	mov	ip, r1
   1c574:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c578:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c57c:	68fb      	ldr	r3, [r7, #12]
   1c57e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c582:	60fb      	str	r3, [r7, #12]
   1c584:	687b      	ldr	r3, [r7, #4]
   1c586:	689a      	ldr	r2, [r3, #8]
   1c588:	68fb      	ldr	r3, [r7, #12]
   1c58a:	429a      	cmp	r2, r3
   1c58c:	dcde      	bgt.n	1c54c <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x80>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c58e:	68bb      	ldr	r3, [r7, #8]
   1c590:	2b00      	cmp	r3, #0
   1c592:	d002      	beq.n	1c59a <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xce>
   1c594:	68b8      	ldr	r0, [r7, #8]
   1c596:	f7f2 f9a5 	bl	e8e4 <_ZdaPv>
        table[size] = value;
   1c59a:	687b      	ldr	r3, [r7, #4]
   1c59c:	6859      	ldr	r1, [r3, #4]
   1c59e:	687b      	ldr	r3, [r7, #4]
   1c5a0:	689b      	ldr	r3, [r3, #8]
   1c5a2:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c5a6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c5aa:	ebc2 0303 	rsb	r3, r2, r3
   1c5ae:	440b      	add	r3, r1
   1c5b0:	683a      	ldr	r2, [r7, #0]
   1c5b2:	469c      	mov	ip, r3
   1c5b4:	4613      	mov	r3, r2
   1c5b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c5ba:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1c5be:	687b      	ldr	r3, [r7, #4]
   1c5c0:	689b      	ldr	r3, [r3, #8]
   1c5c2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c5c6:	687b      	ldr	r3, [r7, #4]
   1c5c8:	609a      	str	r2, [r3, #8]
    }
}
   1c5ca:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c5ce:	46bd      	mov	sp, r7
   1c5d0:	bd80      	pop	{r7, pc}
   1c5d2:	46c0      	nop			(mov r8, r8)

0001c5d4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c5d4:	b580      	push	{r7, lr}
   1c5d6:	b084      	sub	sp, #16
   1c5d8:	af00      	add	r7, sp, #0
   1c5da:	6078      	str	r0, [r7, #4]
   1c5dc:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c5de:	687b      	ldr	r3, [r7, #4]
   1c5e0:	689a      	ldr	r2, [r3, #8]
   1c5e2:	687b      	ldr	r3, [r7, #4]
   1c5e4:	68db      	ldr	r3, [r3, #12]
   1c5e6:	429a      	cmp	r2, r3
   1c5e8:	da0e      	bge.n	1c608 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1c5ea:	687b      	ldr	r3, [r7, #4]
   1c5ec:	685a      	ldr	r2, [r3, #4]
   1c5ee:	687b      	ldr	r3, [r7, #4]
   1c5f0:	689b      	ldr	r3, [r3, #8]
   1c5f2:	441a      	add	r2, r3
   1c5f4:	683b      	ldr	r3, [r7, #0]
   1c5f6:	781b      	ldrb	r3, [r3, #0]
   1c5f8:	7013      	strb	r3, [r2, #0]
        size++;
   1c5fa:	687b      	ldr	r3, [r7, #4]
   1c5fc:	689b      	ldr	r3, [r3, #8]
   1c5fe:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c602:	687b      	ldr	r3, [r7, #4]
   1c604:	609a      	str	r2, [r3, #8]
   1c606:	e03c      	b.n	1c682 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c608:	687b      	ldr	r3, [r7, #4]
   1c60a:	685b      	ldr	r3, [r3, #4]
   1c60c:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c60e:	687b      	ldr	r3, [r7, #4]
   1c610:	68db      	ldr	r3, [r3, #12]
   1c612:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c616:	687b      	ldr	r3, [r7, #4]
   1c618:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c61a:	687b      	ldr	r3, [r7, #4]
   1c61c:	68db      	ldr	r3, [r3, #12]
   1c61e:	4618      	mov	r0, r3
   1c620:	f7f2 f8da 	bl	e7d8 <_Znaj>
   1c624:	4603      	mov	r3, r0
   1c626:	461a      	mov	r2, r3
   1c628:	687b      	ldr	r3, [r7, #4]
   1c62a:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c62c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c630:	60fb      	str	r3, [r7, #12]
   1c632:	e00d      	b.n	1c650 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1c634:	687b      	ldr	r3, [r7, #4]
   1c636:	685a      	ldr	r2, [r3, #4]
   1c638:	68fb      	ldr	r3, [r7, #12]
   1c63a:	eb02 0103 	add.w	r1, r2, r3
   1c63e:	68fa      	ldr	r2, [r7, #12]
   1c640:	68bb      	ldr	r3, [r7, #8]
   1c642:	4413      	add	r3, r2
   1c644:	781b      	ldrb	r3, [r3, #0]
   1c646:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c648:	68fb      	ldr	r3, [r7, #12]
   1c64a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c64e:	60fb      	str	r3, [r7, #12]
   1c650:	687b      	ldr	r3, [r7, #4]
   1c652:	689a      	ldr	r2, [r3, #8]
   1c654:	68fb      	ldr	r3, [r7, #12]
   1c656:	429a      	cmp	r2, r3
   1c658:	dcec      	bgt.n	1c634 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c65a:	68bb      	ldr	r3, [r7, #8]
   1c65c:	2b00      	cmp	r3, #0
   1c65e:	d002      	beq.n	1c666 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x92>
   1c660:	68b8      	ldr	r0, [r7, #8]
   1c662:	f7f2 f93f 	bl	e8e4 <_ZdaPv>
        table[size] = value;
   1c666:	687b      	ldr	r3, [r7, #4]
   1c668:	685a      	ldr	r2, [r3, #4]
   1c66a:	687b      	ldr	r3, [r7, #4]
   1c66c:	689b      	ldr	r3, [r3, #8]
   1c66e:	441a      	add	r2, r3
   1c670:	683b      	ldr	r3, [r7, #0]
   1c672:	781b      	ldrb	r3, [r3, #0]
   1c674:	7013      	strb	r3, [r2, #0]
        size++;
   1c676:	687b      	ldr	r3, [r7, #4]
   1c678:	689b      	ldr	r3, [r3, #8]
   1c67a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c67e:	687b      	ldr	r3, [r7, #4]
   1c680:	609a      	str	r2, [r3, #8]
    }
}
   1c682:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c686:	46bd      	mov	sp, r7
   1c688:	bd80      	pop	{r7, pc}
   1c68a:	46c0      	nop			(mov r8, r8)

0001c68c <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c68c:	b580      	push	{r7, lr}
   1c68e:	b084      	sub	sp, #16
   1c690:	af00      	add	r7, sp, #0
   1c692:	6078      	str	r0, [r7, #4]
   1c694:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c696:	687b      	ldr	r3, [r7, #4]
   1c698:	689a      	ldr	r2, [r3, #8]
   1c69a:	687b      	ldr	r3, [r7, #4]
   1c69c:	68db      	ldr	r3, [r3, #12]
   1c69e:	429a      	cmp	r2, r3
   1c6a0:	da0e      	bge.n	1c6c0 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1c6a2:	687b      	ldr	r3, [r7, #4]
   1c6a4:	685a      	ldr	r2, [r3, #4]
   1c6a6:	687b      	ldr	r3, [r7, #4]
   1c6a8:	689b      	ldr	r3, [r3, #8]
   1c6aa:	441a      	add	r2, r3
   1c6ac:	683b      	ldr	r3, [r7, #0]
   1c6ae:	781b      	ldrb	r3, [r3, #0]
   1c6b0:	7013      	strb	r3, [r2, #0]
        size++;
   1c6b2:	687b      	ldr	r3, [r7, #4]
   1c6b4:	689b      	ldr	r3, [r3, #8]
   1c6b6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c6ba:	687b      	ldr	r3, [r7, #4]
   1c6bc:	609a      	str	r2, [r3, #8]
   1c6be:	e03c      	b.n	1c73a <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c6c0:	687b      	ldr	r3, [r7, #4]
   1c6c2:	685b      	ldr	r3, [r3, #4]
   1c6c4:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c6c6:	687b      	ldr	r3, [r7, #4]
   1c6c8:	68db      	ldr	r3, [r3, #12]
   1c6ca:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c6ce:	687b      	ldr	r3, [r7, #4]
   1c6d0:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c6d2:	687b      	ldr	r3, [r7, #4]
   1c6d4:	68db      	ldr	r3, [r3, #12]
   1c6d6:	4618      	mov	r0, r3
   1c6d8:	f7f2 f87e 	bl	e7d8 <_Znaj>
   1c6dc:	4603      	mov	r3, r0
   1c6de:	461a      	mov	r2, r3
   1c6e0:	687b      	ldr	r3, [r7, #4]
   1c6e2:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c6e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c6e8:	60fb      	str	r3, [r7, #12]
   1c6ea:	e00d      	b.n	1c708 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1c6ec:	687b      	ldr	r3, [r7, #4]
   1c6ee:	685a      	ldr	r2, [r3, #4]
   1c6f0:	68fb      	ldr	r3, [r7, #12]
   1c6f2:	eb02 0103 	add.w	r1, r2, r3
   1c6f6:	68fa      	ldr	r2, [r7, #12]
   1c6f8:	68bb      	ldr	r3, [r7, #8]
   1c6fa:	4413      	add	r3, r2
   1c6fc:	781b      	ldrb	r3, [r3, #0]
   1c6fe:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c700:	68fb      	ldr	r3, [r7, #12]
   1c702:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c706:	60fb      	str	r3, [r7, #12]
   1c708:	687b      	ldr	r3, [r7, #4]
   1c70a:	689a      	ldr	r2, [r3, #8]
   1c70c:	68fb      	ldr	r3, [r7, #12]
   1c70e:	429a      	cmp	r2, r3
   1c710:	dcec      	bgt.n	1c6ec <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c712:	68bb      	ldr	r3, [r7, #8]
   1c714:	2b00      	cmp	r3, #0
   1c716:	d002      	beq.n	1c71e <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x92>
   1c718:	68b8      	ldr	r0, [r7, #8]
   1c71a:	f7f2 f8e3 	bl	e8e4 <_ZdaPv>
        table[size] = value;
   1c71e:	687b      	ldr	r3, [r7, #4]
   1c720:	685a      	ldr	r2, [r3, #4]
   1c722:	687b      	ldr	r3, [r7, #4]
   1c724:	689b      	ldr	r3, [r3, #8]
   1c726:	441a      	add	r2, r3
   1c728:	683b      	ldr	r3, [r7, #0]
   1c72a:	781b      	ldrb	r3, [r3, #0]
   1c72c:	7013      	strb	r3, [r2, #0]
        size++;
   1c72e:	687b      	ldr	r3, [r7, #4]
   1c730:	689b      	ldr	r3, [r3, #8]
   1c732:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c736:	687b      	ldr	r3, [r7, #4]
   1c738:	609a      	str	r2, [r3, #8]
    }
}
   1c73a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c73e:	46bd      	mov	sp, r7
   1c740:	bd80      	pop	{r7, pc}
   1c742:	46c0      	nop			(mov r8, r8)

0001c744 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c744:	b580      	push	{r7, lr}
   1c746:	b082      	sub	sp, #8
   1c748:	af00      	add	r7, sp, #0
   1c74a:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c74c:	687a      	ldr	r2, [r7, #4]
   1c74e:	4b0c      	ldr	r3, [pc, #48]	(1c780 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x3c>)
   1c750:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c752:	687b      	ldr	r3, [r7, #4]
   1c754:	685b      	ldr	r3, [r3, #4]
   1c756:	2b00      	cmp	r3, #0
   1c758:	d004      	beq.n	1c764 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x20>
   1c75a:	687b      	ldr	r3, [r7, #4]
   1c75c:	685b      	ldr	r3, [r3, #4]
   1c75e:	4618      	mov	r0, r3
   1c760:	f7f2 f8c0 	bl	e8e4 <_ZdaPv>
   1c764:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c768:	b2db      	uxtb	r3, r3
   1c76a:	2b00      	cmp	r3, #0
   1c76c:	d002      	beq.n	1c774 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x30>
   1c76e:	6878      	ldr	r0, [r7, #4]
   1c770:	f7f2 f840 	bl	e7f4 <_ZdlPv>
   1c774:	687b      	ldr	r3, [r7, #4]
}
   1c776:	4618      	mov	r0, r3
   1c778:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c77c:	46bd      	mov	sp, r7
   1c77e:	bd80      	pop	{r7, pc}
   1c780:	00022678 	.word	0x00022678

0001c784 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c784:	b580      	push	{r7, lr}
   1c786:	b082      	sub	sp, #8
   1c788:	af00      	add	r7, sp, #0
   1c78a:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c78c:	687a      	ldr	r2, [r7, #4]
   1c78e:	4b0c      	ldr	r3, [pc, #48]	(1c7c0 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x3c>)
   1c790:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c792:	687b      	ldr	r3, [r7, #4]
   1c794:	685b      	ldr	r3, [r3, #4]
   1c796:	2b00      	cmp	r3, #0
   1c798:	d004      	beq.n	1c7a4 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x20>
   1c79a:	687b      	ldr	r3, [r7, #4]
   1c79c:	685b      	ldr	r3, [r3, #4]
   1c79e:	4618      	mov	r0, r3
   1c7a0:	f7f2 f8a0 	bl	e8e4 <_ZdaPv>
   1c7a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c7a8:	b2db      	uxtb	r3, r3
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	d002      	beq.n	1c7b4 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x30>
   1c7ae:	6878      	ldr	r0, [r7, #4]
   1c7b0:	f7f2 f820 	bl	e7f4 <_ZdlPv>
   1c7b4:	687b      	ldr	r3, [r7, #4]
}
   1c7b6:	4618      	mov	r0, r3
   1c7b8:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c7bc:	46bd      	mov	sp, r7
   1c7be:	bd80      	pop	{r7, pc}
   1c7c0:	00022678 	.word	0x00022678

0001c7c4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c7c4:	b580      	push	{r7, lr}
   1c7c6:	b082      	sub	sp, #8
   1c7c8:	af00      	add	r7, sp, #0
   1c7ca:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c7cc:	687a      	ldr	r2, [r7, #4]
   1c7ce:	4b0c      	ldr	r3, [pc, #48]	(1c800 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x3c>)
   1c7d0:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c7d2:	687b      	ldr	r3, [r7, #4]
   1c7d4:	685b      	ldr	r3, [r3, #4]
   1c7d6:	2b00      	cmp	r3, #0
   1c7d8:	d004      	beq.n	1c7e4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x20>
   1c7da:	687b      	ldr	r3, [r7, #4]
   1c7dc:	685b      	ldr	r3, [r3, #4]
   1c7de:	4618      	mov	r0, r3
   1c7e0:	f7f2 f880 	bl	e8e4 <_ZdaPv>
   1c7e4:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c7e8:	b2db      	uxtb	r3, r3
   1c7ea:	2b00      	cmp	r3, #0
   1c7ec:	d002      	beq.n	1c7f4 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x30>
   1c7ee:	6878      	ldr	r0, [r7, #4]
   1c7f0:	f7f2 f800 	bl	e7f4 <_ZdlPv>
   1c7f4:	687b      	ldr	r3, [r7, #4]
}
   1c7f6:	4618      	mov	r0, r3
   1c7f8:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c7fc:	46bd      	mov	sp, r7
   1c7fe:	bd80      	pop	{r7, pc}
   1c800:	00022688 	.word	0x00022688

0001c804 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c804:	b580      	push	{r7, lr}
   1c806:	b082      	sub	sp, #8
   1c808:	af00      	add	r7, sp, #0
   1c80a:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c80c:	687a      	ldr	r2, [r7, #4]
   1c80e:	4b0c      	ldr	r3, [pc, #48]	(1c840 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x3c>)
   1c810:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c812:	687b      	ldr	r3, [r7, #4]
   1c814:	685b      	ldr	r3, [r3, #4]
   1c816:	2b00      	cmp	r3, #0
   1c818:	d004      	beq.n	1c824 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x20>
   1c81a:	687b      	ldr	r3, [r7, #4]
   1c81c:	685b      	ldr	r3, [r3, #4]
   1c81e:	4618      	mov	r0, r3
   1c820:	f7f2 f860 	bl	e8e4 <_ZdaPv>
   1c824:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c828:	b2db      	uxtb	r3, r3
   1c82a:	2b00      	cmp	r3, #0
   1c82c:	d002      	beq.n	1c834 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x30>
   1c82e:	6878      	ldr	r0, [r7, #4]
   1c830:	f7f1 ffe0 	bl	e7f4 <_ZdlPv>
   1c834:	687b      	ldr	r3, [r7, #4]
}
   1c836:	4618      	mov	r0, r3
   1c838:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c83c:	46bd      	mov	sp, r7
   1c83e:	bd80      	pop	{r7, pc}
   1c840:	00022688 	.word	0x00022688

0001c844 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c844:	b580      	push	{r7, lr}
   1c846:	b082      	sub	sp, #8
   1c848:	af00      	add	r7, sp, #0
   1c84a:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c84c:	687a      	ldr	r2, [r7, #4]
   1c84e:	4b0c      	ldr	r3, [pc, #48]	(1c880 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x3c>)
   1c850:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c852:	687b      	ldr	r3, [r7, #4]
   1c854:	685b      	ldr	r3, [r3, #4]
   1c856:	2b00      	cmp	r3, #0
   1c858:	d004      	beq.n	1c864 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x20>
   1c85a:	687b      	ldr	r3, [r7, #4]
   1c85c:	685b      	ldr	r3, [r3, #4]
   1c85e:	4618      	mov	r0, r3
   1c860:	f7f2 f840 	bl	e8e4 <_ZdaPv>
   1c864:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c868:	b2db      	uxtb	r3, r3
   1c86a:	2b00      	cmp	r3, #0
   1c86c:	d002      	beq.n	1c874 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x30>
   1c86e:	6878      	ldr	r0, [r7, #4]
   1c870:	f7f1 ffc0 	bl	e7f4 <_ZdlPv>
   1c874:	687b      	ldr	r3, [r7, #4]
}
   1c876:	4618      	mov	r0, r3
   1c878:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c87c:	46bd      	mov	sp, r7
   1c87e:	bd80      	pop	{r7, pc}
   1c880:	00022698 	.word	0x00022698

0001c884 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1c884:	b580      	push	{r7, lr}
   1c886:	b082      	sub	sp, #8
   1c888:	af00      	add	r7, sp, #0
   1c88a:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1c88c:	687a      	ldr	r2, [r7, #4]
   1c88e:	4b0c      	ldr	r3, [pc, #48]	(1c8c0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x3c>)
   1c890:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1c892:	687b      	ldr	r3, [r7, #4]
   1c894:	685b      	ldr	r3, [r3, #4]
   1c896:	2b00      	cmp	r3, #0
   1c898:	d004      	beq.n	1c8a4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x20>
   1c89a:	687b      	ldr	r3, [r7, #4]
   1c89c:	685b      	ldr	r3, [r3, #4]
   1c89e:	4618      	mov	r0, r3
   1c8a0:	f7f2 f820 	bl	e8e4 <_ZdaPv>
   1c8a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c8a8:	b2db      	uxtb	r3, r3
   1c8aa:	2b00      	cmp	r3, #0
   1c8ac:	d002      	beq.n	1c8b4 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x30>
   1c8ae:	6878      	ldr	r0, [r7, #4]
   1c8b0:	f7f1 ffa0 	bl	e7f4 <_ZdlPv>
   1c8b4:	687b      	ldr	r3, [r7, #4]
}
   1c8b6:	4618      	mov	r0, r3
   1c8b8:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c8bc:	46bd      	mov	sp, r7
   1c8be:	bd80      	pop	{r7, pc}
   1c8c0:	00022698 	.word	0x00022698

0001c8c4 <_ZN18CommandAllerEnArcAD0Ev>:
    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

class CommandAllerEnArcA : public Command
{
   1c8c4:	b580      	push	{r7, lr}
   1c8c6:	b082      	sub	sp, #8
   1c8c8:	af00      	add	r7, sp, #0
   1c8ca:	6078      	str	r0, [r7, #4]
   1c8cc:	687a      	ldr	r2, [r7, #4]
   1c8ce:	4b0a      	ldr	r3, [pc, #40]	(1c8f8 <_ZN18CommandAllerEnArcAD0Ev+0x34>)
   1c8d0:	6013      	str	r3, [r2, #0]
   1c8d2:	687b      	ldr	r3, [r7, #4]
   1c8d4:	4618      	mov	r0, r3
   1c8d6:	f7eb fc27 	bl	8128 <_ZN7CommandD2Ev>
   1c8da:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c8de:	b2db      	uxtb	r3, r3
   1c8e0:	2b00      	cmp	r3, #0
   1c8e2:	d002      	beq.n	1c8ea <_ZN18CommandAllerEnArcAD0Ev+0x26>
   1c8e4:	6878      	ldr	r0, [r7, #4]
   1c8e6:	f7f1 ff85 	bl	e7f4 <_ZdlPv>
   1c8ea:	687b      	ldr	r3, [r7, #4]
   1c8ec:	4618      	mov	r0, r3
   1c8ee:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c8f2:	46bd      	mov	sp, r7
   1c8f4:	bd80      	pop	{r7, pc}
   1c8f6:	46c0      	nop			(mov r8, r8)
   1c8f8:	00021dd0 	.word	0x00021dd0

0001c8fc <_ZN18CommandAllerEnArcAD1Ev>:
   1c8fc:	b580      	push	{r7, lr}
   1c8fe:	b082      	sub	sp, #8
   1c900:	af00      	add	r7, sp, #0
   1c902:	6078      	str	r0, [r7, #4]
   1c904:	687a      	ldr	r2, [r7, #4]
   1c906:	4b0a      	ldr	r3, [pc, #40]	(1c930 <_ZN18CommandAllerEnArcAD1Ev+0x34>)
   1c908:	6013      	str	r3, [r2, #0]
   1c90a:	687b      	ldr	r3, [r7, #4]
   1c90c:	4618      	mov	r0, r3
   1c90e:	f7eb fc0b 	bl	8128 <_ZN7CommandD2Ev>
   1c912:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c916:	b2db      	uxtb	r3, r3
   1c918:	2b00      	cmp	r3, #0
   1c91a:	d002      	beq.n	1c922 <_ZN18CommandAllerEnArcAD1Ev+0x26>
   1c91c:	6878      	ldr	r0, [r7, #4]
   1c91e:	f7f1 ff69 	bl	e7f4 <_ZdlPv>
   1c922:	687b      	ldr	r3, [r7, #4]
   1c924:	4618      	mov	r0, r3
   1c926:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c92a:	46bd      	mov	sp, r7
   1c92c:	bd80      	pop	{r7, pc}
   1c92e:	46c0      	nop			(mov r8, r8)
   1c930:	00021dd0 	.word	0x00021dd0

0001c934 <_ZN13CommandAllerAD0Ev>:
    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

class CommandAllerA : public Command
{
   1c934:	b580      	push	{r7, lr}
   1c936:	b082      	sub	sp, #8
   1c938:	af00      	add	r7, sp, #0
   1c93a:	6078      	str	r0, [r7, #4]
   1c93c:	687a      	ldr	r2, [r7, #4]
   1c93e:	4b0a      	ldr	r3, [pc, #40]	(1c968 <_ZN13CommandAllerAD0Ev+0x34>)
   1c940:	6013      	str	r3, [r2, #0]
   1c942:	687b      	ldr	r3, [r7, #4]
   1c944:	4618      	mov	r0, r3
   1c946:	f7eb fbef 	bl	8128 <_ZN7CommandD2Ev>
   1c94a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c94e:	b2db      	uxtb	r3, r3
   1c950:	2b00      	cmp	r3, #0
   1c952:	d002      	beq.n	1c95a <_ZN13CommandAllerAD0Ev+0x26>
   1c954:	6878      	ldr	r0, [r7, #4]
   1c956:	f7f1 ff4d 	bl	e7f4 <_ZdlPv>
   1c95a:	687b      	ldr	r3, [r7, #4]
   1c95c:	4618      	mov	r0, r3
   1c95e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c962:	46bd      	mov	sp, r7
   1c964:	bd80      	pop	{r7, pc}
   1c966:	46c0      	nop			(mov r8, r8)
   1c968:	00021da8 	.word	0x00021da8

0001c96c <_ZN13CommandAllerAD1Ev>:
   1c96c:	b580      	push	{r7, lr}
   1c96e:	b082      	sub	sp, #8
   1c970:	af00      	add	r7, sp, #0
   1c972:	6078      	str	r0, [r7, #4]
   1c974:	687a      	ldr	r2, [r7, #4]
   1c976:	4b0a      	ldr	r3, [pc, #40]	(1c9a0 <_ZN13CommandAllerAD1Ev+0x34>)
   1c978:	6013      	str	r3, [r2, #0]
   1c97a:	687b      	ldr	r3, [r7, #4]
   1c97c:	4618      	mov	r0, r3
   1c97e:	f7eb fbd3 	bl	8128 <_ZN7CommandD2Ev>
   1c982:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c986:	b2db      	uxtb	r3, r3
   1c988:	2b00      	cmp	r3, #0
   1c98a:	d002      	beq.n	1c992 <_ZN13CommandAllerAD1Ev+0x26>
   1c98c:	6878      	ldr	r0, [r7, #4]
   1c98e:	f7f1 ff31 	bl	e7f4 <_ZdlPv>
   1c992:	687b      	ldr	r3, [r7, #4]
   1c994:	4618      	mov	r0, r3
   1c996:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c99a:	46bd      	mov	sp, r7
   1c99c:	bd80      	pop	{r7, pc}
   1c99e:	46c0      	nop			(mov r8, r8)
   1c9a0:	00021da8 	.word	0x00021da8

0001c9a4 <_ZN18CommandTournerVersD0Ev>:
    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

class CommandTournerVers : public Command
{
   1c9a4:	b580      	push	{r7, lr}
   1c9a6:	b082      	sub	sp, #8
   1c9a8:	af00      	add	r7, sp, #0
   1c9aa:	6078      	str	r0, [r7, #4]
   1c9ac:	687a      	ldr	r2, [r7, #4]
   1c9ae:	4b0a      	ldr	r3, [pc, #40]	(1c9d8 <_ZN18CommandTournerVersD0Ev+0x34>)
   1c9b0:	6013      	str	r3, [r2, #0]
   1c9b2:	687b      	ldr	r3, [r7, #4]
   1c9b4:	4618      	mov	r0, r3
   1c9b6:	f7eb fbb7 	bl	8128 <_ZN7CommandD2Ev>
   1c9ba:	f04f 0301 	mov.w	r3, #1	; 0x1
   1c9be:	b2db      	uxtb	r3, r3
   1c9c0:	2b00      	cmp	r3, #0
   1c9c2:	d002      	beq.n	1c9ca <_ZN18CommandTournerVersD0Ev+0x26>
   1c9c4:	6878      	ldr	r0, [r7, #4]
   1c9c6:	f7f1 ff15 	bl	e7f4 <_ZdlPv>
   1c9ca:	687b      	ldr	r3, [r7, #4]
   1c9cc:	4618      	mov	r0, r3
   1c9ce:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c9d2:	46bd      	mov	sp, r7
   1c9d4:	bd80      	pop	{r7, pc}
   1c9d6:	46c0      	nop			(mov r8, r8)
   1c9d8:	00021d80 	.word	0x00021d80

0001c9dc <_ZN18CommandTournerVersD1Ev>:
   1c9dc:	b580      	push	{r7, lr}
   1c9de:	b082      	sub	sp, #8
   1c9e0:	af00      	add	r7, sp, #0
   1c9e2:	6078      	str	r0, [r7, #4]
   1c9e4:	687a      	ldr	r2, [r7, #4]
   1c9e6:	4b0a      	ldr	r3, [pc, #40]	(1ca10 <_ZN18CommandTournerVersD1Ev+0x34>)
   1c9e8:	6013      	str	r3, [r2, #0]
   1c9ea:	687b      	ldr	r3, [r7, #4]
   1c9ec:	4618      	mov	r0, r3
   1c9ee:	f7eb fb9b 	bl	8128 <_ZN7CommandD2Ev>
   1c9f2:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c9f6:	b2db      	uxtb	r3, r3
   1c9f8:	2b00      	cmp	r3, #0
   1c9fa:	d002      	beq.n	1ca02 <_ZN18CommandTournerVersD1Ev+0x26>
   1c9fc:	6878      	ldr	r0, [r7, #4]
   1c9fe:	f7f1 fef9 	bl	e7f4 <_ZdlPv>
   1ca02:	687b      	ldr	r3, [r7, #4]
   1ca04:	4618      	mov	r0, r3
   1ca06:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ca0a:	46bd      	mov	sp, r7
   1ca0c:	bd80      	pop	{r7, pc}
   1ca0e:	46c0      	nop			(mov r8, r8)
   1ca10:	00021d80 	.word	0x00021d80

0001ca14 <_ZN13CommandVirageD0Ev>:

// fait un virage d'un certain angle à la vitesse max suivant un certain rayon de courbure
// arrive avec un certaine vitesse de fin
// marche que vers l'avant
class CommandVirage : public Command
{
   1ca14:	b580      	push	{r7, lr}
   1ca16:	b082      	sub	sp, #8
   1ca18:	af00      	add	r7, sp, #0
   1ca1a:	6078      	str	r0, [r7, #4]
   1ca1c:	687a      	ldr	r2, [r7, #4]
   1ca1e:	4b0a      	ldr	r3, [pc, #40]	(1ca48 <_ZN13CommandVirageD0Ev+0x34>)
   1ca20:	6013      	str	r3, [r2, #0]
   1ca22:	687b      	ldr	r3, [r7, #4]
   1ca24:	4618      	mov	r0, r3
   1ca26:	f7eb fb7f 	bl	8128 <_ZN7CommandD2Ev>
   1ca2a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ca2e:	b2db      	uxtb	r3, r3
   1ca30:	2b00      	cmp	r3, #0
   1ca32:	d002      	beq.n	1ca3a <_ZN13CommandVirageD0Ev+0x26>
   1ca34:	6878      	ldr	r0, [r7, #4]
   1ca36:	f7f1 fedd 	bl	e7f4 <_ZdlPv>
   1ca3a:	687b      	ldr	r3, [r7, #4]
   1ca3c:	4618      	mov	r0, r3
   1ca3e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ca42:	46bd      	mov	sp, r7
   1ca44:	bd80      	pop	{r7, pc}
   1ca46:	46c0      	nop			(mov r8, r8)
   1ca48:	00021d58 	.word	0x00021d58

0001ca4c <_ZN13CommandVirageD1Ev>:
   1ca4c:	b580      	push	{r7, lr}
   1ca4e:	b082      	sub	sp, #8
   1ca50:	af00      	add	r7, sp, #0
   1ca52:	6078      	str	r0, [r7, #4]
   1ca54:	687a      	ldr	r2, [r7, #4]
   1ca56:	4b0a      	ldr	r3, [pc, #40]	(1ca80 <_ZN13CommandVirageD1Ev+0x34>)
   1ca58:	6013      	str	r3, [r2, #0]
   1ca5a:	687b      	ldr	r3, [r7, #4]
   1ca5c:	4618      	mov	r0, r3
   1ca5e:	f7eb fb63 	bl	8128 <_ZN7CommandD2Ev>
   1ca62:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ca66:	b2db      	uxtb	r3, r3
   1ca68:	2b00      	cmp	r3, #0
   1ca6a:	d002      	beq.n	1ca72 <_ZN13CommandVirageD1Ev+0x26>
   1ca6c:	6878      	ldr	r0, [r7, #4]
   1ca6e:	f7f1 fec1 	bl	e7f4 <_ZdlPv>
   1ca72:	687b      	ldr	r3, [r7, #4]
   1ca74:	4618      	mov	r0, r3
   1ca76:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ca7a:	46bd      	mov	sp, r7
   1ca7c:	bd80      	pop	{r7, pc}
   1ca7e:	46c0      	nop			(mov r8, r8)
   1ca80:	00021d58 	.word	0x00021d58

0001ca84 <_ZN15CommandAttendreD0Ev>:
    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

class CommandAttendre : public Command
{
   1ca84:	b580      	push	{r7, lr}
   1ca86:	b082      	sub	sp, #8
   1ca88:	af00      	add	r7, sp, #0
   1ca8a:	6078      	str	r0, [r7, #4]
   1ca8c:	687a      	ldr	r2, [r7, #4]
   1ca8e:	4b0a      	ldr	r3, [pc, #40]	(1cab8 <_ZN15CommandAttendreD0Ev+0x34>)
   1ca90:	6013      	str	r3, [r2, #0]
   1ca92:	687b      	ldr	r3, [r7, #4]
   1ca94:	4618      	mov	r0, r3
   1ca96:	f7eb fb47 	bl	8128 <_ZN7CommandD2Ev>
   1ca9a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ca9e:	b2db      	uxtb	r3, r3
   1caa0:	2b00      	cmp	r3, #0
   1caa2:	d002      	beq.n	1caaa <_ZN15CommandAttendreD0Ev+0x26>
   1caa4:	6878      	ldr	r0, [r7, #4]
   1caa6:	f7f1 fea5 	bl	e7f4 <_ZdlPv>
   1caaa:	687b      	ldr	r3, [r7, #4]
   1caac:	4618      	mov	r0, r3
   1caae:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cab2:	46bd      	mov	sp, r7
   1cab4:	bd80      	pop	{r7, pc}
   1cab6:	46c0      	nop			(mov r8, r8)
   1cab8:	00021d30 	.word	0x00021d30

0001cabc <_ZN15CommandAttendreD1Ev>:
   1cabc:	b580      	push	{r7, lr}
   1cabe:	b082      	sub	sp, #8
   1cac0:	af00      	add	r7, sp, #0
   1cac2:	6078      	str	r0, [r7, #4]
   1cac4:	687a      	ldr	r2, [r7, #4]
   1cac6:	4b0a      	ldr	r3, [pc, #40]	(1caf0 <_ZN15CommandAttendreD1Ev+0x34>)
   1cac8:	6013      	str	r3, [r2, #0]
   1caca:	687b      	ldr	r3, [r7, #4]
   1cacc:	4618      	mov	r0, r3
   1cace:	f7eb fb2b 	bl	8128 <_ZN7CommandD2Ev>
   1cad2:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cad6:	b2db      	uxtb	r3, r3
   1cad8:	2b00      	cmp	r3, #0
   1cada:	d002      	beq.n	1cae2 <_ZN15CommandAttendreD1Ev+0x26>
   1cadc:	6878      	ldr	r0, [r7, #4]
   1cade:	f7f1 fe89 	bl	e7f4 <_ZdlPv>
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	4618      	mov	r0, r3
   1cae6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1caea:	46bd      	mov	sp, r7
   1caec:	bd80      	pop	{r7, pc}
   1caee:	46c0      	nop			(mov r8, r8)
   1caf0:	00021d30 	.word	0x00021d30

0001caf4 <_ZN18CommandTestAvancerD0Ev>:
    ////////////////////////////////
    //    CommandTestAvancer      //
    ////////////////////////////////

class CommandTestAvancer : public Command
{
   1caf4:	b580      	push	{r7, lr}
   1caf6:	b082      	sub	sp, #8
   1caf8:	af00      	add	r7, sp, #0
   1cafa:	6078      	str	r0, [r7, #4]
   1cafc:	687a      	ldr	r2, [r7, #4]
   1cafe:	4b0a      	ldr	r3, [pc, #40]	(1cb28 <_ZN18CommandTestAvancerD0Ev+0x34>)
   1cb00:	6013      	str	r3, [r2, #0]
   1cb02:	687b      	ldr	r3, [r7, #4]
   1cb04:	4618      	mov	r0, r3
   1cb06:	f7eb fb0f 	bl	8128 <_ZN7CommandD2Ev>
   1cb0a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cb0e:	b2db      	uxtb	r3, r3
   1cb10:	2b00      	cmp	r3, #0
   1cb12:	d002      	beq.n	1cb1a <_ZN18CommandTestAvancerD0Ev+0x26>
   1cb14:	6878      	ldr	r0, [r7, #4]
   1cb16:	f7f1 fe6d 	bl	e7f4 <_ZdlPv>
   1cb1a:	687b      	ldr	r3, [r7, #4]
   1cb1c:	4618      	mov	r0, r3
   1cb1e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cb22:	46bd      	mov	sp, r7
   1cb24:	bd80      	pop	{r7, pc}
   1cb26:	46c0      	nop			(mov r8, r8)
   1cb28:	00021d08 	.word	0x00021d08

0001cb2c <_ZN18CommandTestAvancerD1Ev>:
   1cb2c:	b580      	push	{r7, lr}
   1cb2e:	b082      	sub	sp, #8
   1cb30:	af00      	add	r7, sp, #0
   1cb32:	6078      	str	r0, [r7, #4]
   1cb34:	687a      	ldr	r2, [r7, #4]
   1cb36:	4b0a      	ldr	r3, [pc, #40]	(1cb60 <_ZN18CommandTestAvancerD1Ev+0x34>)
   1cb38:	6013      	str	r3, [r2, #0]
   1cb3a:	687b      	ldr	r3, [r7, #4]
   1cb3c:	4618      	mov	r0, r3
   1cb3e:	f7eb faf3 	bl	8128 <_ZN7CommandD2Ev>
   1cb42:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cb46:	b2db      	uxtb	r3, r3
   1cb48:	2b00      	cmp	r3, #0
   1cb4a:	d002      	beq.n	1cb52 <_ZN18CommandTestAvancerD1Ev+0x26>
   1cb4c:	6878      	ldr	r0, [r7, #4]
   1cb4e:	f7f1 fe51 	bl	e7f4 <_ZdlPv>
   1cb52:	687b      	ldr	r3, [r7, #4]
   1cb54:	4618      	mov	r0, r3
   1cb56:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cb5a:	46bd      	mov	sp, r7
   1cb5c:	bd80      	pop	{r7, pc}
   1cb5e:	46c0      	nop			(mov r8, r8)
   1cb60:	00021d08 	.word	0x00021d08

0001cb64 <_ZN24CommandTestTournerGaucheD0Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////

class CommandTestTournerGauche : public Command
{
   1cb64:	b580      	push	{r7, lr}
   1cb66:	b082      	sub	sp, #8
   1cb68:	af00      	add	r7, sp, #0
   1cb6a:	6078      	str	r0, [r7, #4]
   1cb6c:	687a      	ldr	r2, [r7, #4]
   1cb6e:	4b0a      	ldr	r3, [pc, #40]	(1cb98 <_ZN24CommandTestTournerGaucheD0Ev+0x34>)
   1cb70:	6013      	str	r3, [r2, #0]
   1cb72:	687b      	ldr	r3, [r7, #4]
   1cb74:	4618      	mov	r0, r3
   1cb76:	f7eb fad7 	bl	8128 <_ZN7CommandD2Ev>
   1cb7a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cb7e:	b2db      	uxtb	r3, r3
   1cb80:	2b00      	cmp	r3, #0
   1cb82:	d002      	beq.n	1cb8a <_ZN24CommandTestTournerGaucheD0Ev+0x26>
   1cb84:	6878      	ldr	r0, [r7, #4]
   1cb86:	f7f1 fe35 	bl	e7f4 <_ZdlPv>
   1cb8a:	687b      	ldr	r3, [r7, #4]
   1cb8c:	4618      	mov	r0, r3
   1cb8e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cb92:	46bd      	mov	sp, r7
   1cb94:	bd80      	pop	{r7, pc}
   1cb96:	46c0      	nop			(mov r8, r8)
   1cb98:	00021ce0 	.word	0x00021ce0

0001cb9c <_ZN24CommandTestTournerGaucheD1Ev>:
   1cb9c:	b580      	push	{r7, lr}
   1cb9e:	b082      	sub	sp, #8
   1cba0:	af00      	add	r7, sp, #0
   1cba2:	6078      	str	r0, [r7, #4]
   1cba4:	687a      	ldr	r2, [r7, #4]
   1cba6:	4b0a      	ldr	r3, [pc, #40]	(1cbd0 <_ZN24CommandTestTournerGaucheD1Ev+0x34>)
   1cba8:	6013      	str	r3, [r2, #0]
   1cbaa:	687b      	ldr	r3, [r7, #4]
   1cbac:	4618      	mov	r0, r3
   1cbae:	f7eb fabb 	bl	8128 <_ZN7CommandD2Ev>
   1cbb2:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cbb6:	b2db      	uxtb	r3, r3
   1cbb8:	2b00      	cmp	r3, #0
   1cbba:	d002      	beq.n	1cbc2 <_ZN24CommandTestTournerGaucheD1Ev+0x26>
   1cbbc:	6878      	ldr	r0, [r7, #4]
   1cbbe:	f7f1 fe19 	bl	e7f4 <_ZdlPv>
   1cbc2:	687b      	ldr	r3, [r7, #4]
   1cbc4:	4618      	mov	r0, r3
   1cbc6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cbca:	46bd      	mov	sp, r7
   1cbcc:	bd80      	pop	{r7, pc}
   1cbce:	46c0      	nop			(mov r8, r8)
   1cbd0:	00021ce0 	.word	0x00021ce0

0001cbd4 <_ZN29CommandCalibrerCapteurCouleurD0Ev>:
        // ou depuis le dernier appel de la selection du capteur
        uint16_t getTickValue();
};

class CommandCalibrerCapteurCouleur : public Command
{
   1cbd4:	b580      	push	{r7, lr}
   1cbd6:	b082      	sub	sp, #8
   1cbd8:	af00      	add	r7, sp, #0
   1cbda:	6078      	str	r0, [r7, #4]
   1cbdc:	687a      	ldr	r2, [r7, #4]
   1cbde:	4b0a      	ldr	r3, [pc, #40]	(1cc08 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x34>)
   1cbe0:	6013      	str	r3, [r2, #0]
   1cbe2:	687b      	ldr	r3, [r7, #4]
   1cbe4:	4618      	mov	r0, r3
   1cbe6:	f7eb fa9f 	bl	8128 <_ZN7CommandD2Ev>
   1cbea:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cbee:	b2db      	uxtb	r3, r3
   1cbf0:	2b00      	cmp	r3, #0
   1cbf2:	d002      	beq.n	1cbfa <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x26>
   1cbf4:	6878      	ldr	r0, [r7, #4]
   1cbf6:	f7f1 fdfd 	bl	e7f4 <_ZdlPv>
   1cbfa:	687b      	ldr	r3, [r7, #4]
   1cbfc:	4618      	mov	r0, r3
   1cbfe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cc02:	46bd      	mov	sp, r7
   1cc04:	bd80      	pop	{r7, pc}
   1cc06:	46c0      	nop			(mov r8, r8)
   1cc08:	00021e50 	.word	0x00021e50

0001cc0c <_ZN29CommandCalibrerCapteurCouleurD1Ev>:
   1cc0c:	b580      	push	{r7, lr}
   1cc0e:	b082      	sub	sp, #8
   1cc10:	af00      	add	r7, sp, #0
   1cc12:	6078      	str	r0, [r7, #4]
   1cc14:	687a      	ldr	r2, [r7, #4]
   1cc16:	4b0a      	ldr	r3, [pc, #40]	(1cc40 <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x34>)
   1cc18:	6013      	str	r3, [r2, #0]
   1cc1a:	687b      	ldr	r3, [r7, #4]
   1cc1c:	4618      	mov	r0, r3
   1cc1e:	f7eb fa83 	bl	8128 <_ZN7CommandD2Ev>
   1cc22:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cc26:	b2db      	uxtb	r3, r3
   1cc28:	2b00      	cmp	r3, #0
   1cc2a:	d002      	beq.n	1cc32 <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x26>
   1cc2c:	6878      	ldr	r0, [r7, #4]
   1cc2e:	f7f1 fde1 	bl	e7f4 <_ZdlPv>
   1cc32:	687b      	ldr	r3, [r7, #4]
   1cc34:	4618      	mov	r0, r3
   1cc36:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cc3a:	46bd      	mov	sp, r7
   1cc3c:	bd80      	pop	{r7, pc}
   1cc3e:	46c0      	nop			(mov r8, r8)
   1cc40:	00021e50 	.word	0x00021e50

0001cc44 <_ZN19CommandCheckCouleurD0Ev>:

        uint16_t resultat;
};

class CommandCheckCouleur : public Command
{
   1cc44:	b580      	push	{r7, lr}
   1cc46:	b082      	sub	sp, #8
   1cc48:	af00      	add	r7, sp, #0
   1cc4a:	6078      	str	r0, [r7, #4]
   1cc4c:	687a      	ldr	r2, [r7, #4]
   1cc4e:	4b0a      	ldr	r3, [pc, #40]	(1cc78 <_ZN19CommandCheckCouleurD0Ev+0x34>)
   1cc50:	6013      	str	r3, [r2, #0]
   1cc52:	687b      	ldr	r3, [r7, #4]
   1cc54:	4618      	mov	r0, r3
   1cc56:	f7eb fa67 	bl	8128 <_ZN7CommandD2Ev>
   1cc5a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cc5e:	b2db      	uxtb	r3, r3
   1cc60:	2b00      	cmp	r3, #0
   1cc62:	d002      	beq.n	1cc6a <_ZN19CommandCheckCouleurD0Ev+0x26>
   1cc64:	6878      	ldr	r0, [r7, #4]
   1cc66:	f7f1 fdc5 	bl	e7f4 <_ZdlPv>
   1cc6a:	687b      	ldr	r3, [r7, #4]
   1cc6c:	4618      	mov	r0, r3
   1cc6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cc72:	46bd      	mov	sp, r7
   1cc74:	bd80      	pop	{r7, pc}
   1cc76:	46c0      	nop			(mov r8, r8)
   1cc78:	00021e28 	.word	0x00021e28

0001cc7c <_ZN19CommandCheckCouleurD1Ev>:
   1cc7c:	b580      	push	{r7, lr}
   1cc7e:	b082      	sub	sp, #8
   1cc80:	af00      	add	r7, sp, #0
   1cc82:	6078      	str	r0, [r7, #4]
   1cc84:	687a      	ldr	r2, [r7, #4]
   1cc86:	4b0a      	ldr	r3, [pc, #40]	(1ccb0 <_ZN19CommandCheckCouleurD1Ev+0x34>)
   1cc88:	6013      	str	r3, [r2, #0]
   1cc8a:	687b      	ldr	r3, [r7, #4]
   1cc8c:	4618      	mov	r0, r3
   1cc8e:	f7eb fa4b 	bl	8128 <_ZN7CommandD2Ev>
   1cc92:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cc96:	b2db      	uxtb	r3, r3
   1cc98:	2b00      	cmp	r3, #0
   1cc9a:	d002      	beq.n	1cca2 <_ZN19CommandCheckCouleurD1Ev+0x26>
   1cc9c:	6878      	ldr	r0, [r7, #4]
   1cc9e:	f7f1 fda9 	bl	e7f4 <_ZdlPv>
   1cca2:	687b      	ldr	r3, [r7, #4]
   1cca4:	4618      	mov	r0, r3
   1cca6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ccaa:	46bd      	mov	sp, r7
   1ccac:	bd80      	pop	{r7, pc}
   1ccae:	46c0      	nop			(mov r8, r8)
   1ccb0:	00021e28 	.word	0x00021e28

0001ccb4 <_ZN11StrategieV3D2Ev>:

#endif*/
//#define ETAPE_GARAGE 1
//#define NOMBRE_ETAPES 10
class StrategieV3 : public MediumLevelAction
{
   1ccb4:	b580      	push	{r7, lr}
   1ccb6:	b082      	sub	sp, #8
   1ccb8:	af00      	add	r7, sp, #0
   1ccba:	6078      	str	r0, [r7, #4]
   1ccbc:	687a      	ldr	r2, [r7, #4]
   1ccbe:	4b0a      	ldr	r3, [pc, #40]	(1cce8 <_ZN11StrategieV3D2Ev+0x34>)
   1ccc0:	6013      	str	r3, [r2, #0]
   1ccc2:	687b      	ldr	r3, [r7, #4]
   1ccc4:	4618      	mov	r0, r3
   1ccc6:	f7f8 f915 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   1ccca:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ccce:	b2db      	uxtb	r3, r3
   1ccd0:	2b00      	cmp	r3, #0
   1ccd2:	d002      	beq.n	1ccda <_ZN11StrategieV3D2Ev+0x26>
   1ccd4:	6878      	ldr	r0, [r7, #4]
   1ccd6:	f7f1 fd8d 	bl	e7f4 <_ZdlPv>
   1ccda:	687b      	ldr	r3, [r7, #4]
   1ccdc:	4618      	mov	r0, r3
   1ccde:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cce2:	46bd      	mov	sp, r7
   1cce4:	bd80      	pop	{r7, pc}
   1cce6:	46c0      	nop			(mov r8, r8)
   1cce8:	00022028 	.word	0x00022028

0001ccec <_ZN9Krabi2015D0Ev>:
#include "clap.h"
#include "gobelet.h"
#include "tapis.h"

class Krabi2015 : public StrategieV3
{
   1ccec:	b580      	push	{r7, lr}
   1ccee:	b084      	sub	sp, #16
   1ccf0:	af00      	add	r7, sp, #0
   1ccf2:	60f8      	str	r0, [r7, #12]
   1ccf4:	68fa      	ldr	r2, [r7, #12]
   1ccf6:	4b31      	ldr	r3, [pc, #196]	(1cdbc <_ZN9Krabi2015D0Ev+0xd0>)
   1ccf8:	6013      	str	r3, [r2, #0]
   1ccfa:	68fb      	ldr	r3, [r7, #12]
   1ccfc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1cd00:	2b00      	cmp	r3, #0
   1cd02:	d013      	beq.n	1cd2c <_ZN9Krabi2015D0Ev+0x40>
   1cd04:	68fb      	ldr	r3, [r7, #12]
   1cd06:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   1cd0a:	603b      	str	r3, [r7, #0]
   1cd0c:	68fb      	ldr	r3, [r7, #12]
   1cd0e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1cd12:	683a      	ldr	r2, [r7, #0]
   1cd14:	429a      	cmp	r2, r3
   1cd16:	d009      	beq.n	1cd2c <_ZN9Krabi2015D0Ev+0x40>
   1cd18:	683b      	ldr	r3, [r7, #0]
   1cd1a:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1cd1e:	603b      	str	r3, [r7, #0]
   1cd20:	683a      	ldr	r2, [r7, #0]
   1cd22:	6813      	ldr	r3, [r2, #0]
   1cd24:	681b      	ldr	r3, [r3, #0]
   1cd26:	6838      	ldr	r0, [r7, #0]
   1cd28:	4798      	blx	r3
   1cd2a:	e7ef      	b.n	1cd0c <_ZN9Krabi2015D0Ev+0x20>
   1cd2c:	68fb      	ldr	r3, [r7, #12]
   1cd2e:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	d015      	beq.n	1cd62 <_ZN9Krabi2015D0Ev+0x76>
   1cd36:	68fb      	ldr	r3, [r7, #12]
   1cd38:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1cd3c:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1cd40:	607b      	str	r3, [r7, #4]
   1cd42:	68fb      	ldr	r3, [r7, #12]
   1cd44:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1cd48:	687a      	ldr	r2, [r7, #4]
   1cd4a:	429a      	cmp	r2, r3
   1cd4c:	d009      	beq.n	1cd62 <_ZN9Krabi2015D0Ev+0x76>
   1cd4e:	687b      	ldr	r3, [r7, #4]
   1cd50:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1cd54:	607b      	str	r3, [r7, #4]
   1cd56:	687a      	ldr	r2, [r7, #4]
   1cd58:	6813      	ldr	r3, [r2, #0]
   1cd5a:	681b      	ldr	r3, [r3, #0]
   1cd5c:	6878      	ldr	r0, [r7, #4]
   1cd5e:	4798      	blx	r3
   1cd60:	e7ef      	b.n	1cd42 <_ZN9Krabi2015D0Ev+0x56>
   1cd62:	68fb      	ldr	r3, [r7, #12]
   1cd64:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1cd68:	2b00      	cmp	r3, #0
   1cd6a:	d015      	beq.n	1cd98 <_ZN9Krabi2015D0Ev+0xac>
   1cd6c:	68fb      	ldr	r3, [r7, #12]
   1cd6e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1cd72:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1cd76:	60bb      	str	r3, [r7, #8]
   1cd78:	68fb      	ldr	r3, [r7, #12]
   1cd7a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1cd7e:	68ba      	ldr	r2, [r7, #8]
   1cd80:	429a      	cmp	r2, r3
   1cd82:	d009      	beq.n	1cd98 <_ZN9Krabi2015D0Ev+0xac>
   1cd84:	68bb      	ldr	r3, [r7, #8]
   1cd86:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1cd8a:	60bb      	str	r3, [r7, #8]
   1cd8c:	68ba      	ldr	r2, [r7, #8]
   1cd8e:	6813      	ldr	r3, [r2, #0]
   1cd90:	681b      	ldr	r3, [r3, #0]
   1cd92:	68b8      	ldr	r0, [r7, #8]
   1cd94:	4798      	blx	r3
   1cd96:	e7ef      	b.n	1cd78 <_ZN9Krabi2015D0Ev+0x8c>
   1cd98:	68fb      	ldr	r3, [r7, #12]
   1cd9a:	4618      	mov	r0, r3
   1cd9c:	f7ff ff8a 	bl	1ccb4 <_ZN11StrategieV3D2Ev>
   1cda0:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cda4:	b2db      	uxtb	r3, r3
   1cda6:	2b00      	cmp	r3, #0
   1cda8:	d002      	beq.n	1cdb0 <_ZN9Krabi2015D0Ev+0xc4>
   1cdaa:	68f8      	ldr	r0, [r7, #12]
   1cdac:	f7f1 fd22 	bl	e7f4 <_ZdlPv>
   1cdb0:	68fb      	ldr	r3, [r7, #12]
   1cdb2:	4618      	mov	r0, r3
   1cdb4:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1cdb8:	46bd      	mov	sp, r7
   1cdba:	bd80      	pop	{r7, pc}
   1cdbc:	00021fb0 	.word	0x00021fb0

0001cdc0 <_ZN9Krabi2015D1Ev>:
   1cdc0:	b580      	push	{r7, lr}
   1cdc2:	b084      	sub	sp, #16
   1cdc4:	af00      	add	r7, sp, #0
   1cdc6:	60f8      	str	r0, [r7, #12]
   1cdc8:	68fa      	ldr	r2, [r7, #12]
   1cdca:	4b31      	ldr	r3, [pc, #196]	(1ce90 <_ZN9Krabi2015D1Ev+0xd0>)
   1cdcc:	6013      	str	r3, [r2, #0]
   1cdce:	68fb      	ldr	r3, [r7, #12]
   1cdd0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1cdd4:	2b00      	cmp	r3, #0
   1cdd6:	d013      	beq.n	1ce00 <_ZN9Krabi2015D1Ev+0x40>
   1cdd8:	68fb      	ldr	r3, [r7, #12]
   1cdda:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   1cdde:	603b      	str	r3, [r7, #0]
   1cde0:	68fb      	ldr	r3, [r7, #12]
   1cde2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1cde6:	683a      	ldr	r2, [r7, #0]
   1cde8:	429a      	cmp	r2, r3
   1cdea:	d009      	beq.n	1ce00 <_ZN9Krabi2015D1Ev+0x40>
   1cdec:	683b      	ldr	r3, [r7, #0]
   1cdee:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1cdf2:	603b      	str	r3, [r7, #0]
   1cdf4:	683a      	ldr	r2, [r7, #0]
   1cdf6:	6813      	ldr	r3, [r2, #0]
   1cdf8:	681b      	ldr	r3, [r3, #0]
   1cdfa:	6838      	ldr	r0, [r7, #0]
   1cdfc:	4798      	blx	r3
   1cdfe:	e7ef      	b.n	1cde0 <_ZN9Krabi2015D1Ev+0x20>
   1ce00:	68fb      	ldr	r3, [r7, #12]
   1ce02:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ce06:	2b00      	cmp	r3, #0
   1ce08:	d015      	beq.n	1ce36 <_ZN9Krabi2015D1Ev+0x76>
   1ce0a:	68fb      	ldr	r3, [r7, #12]
   1ce0c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ce10:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1ce14:	607b      	str	r3, [r7, #4]
   1ce16:	68fb      	ldr	r3, [r7, #12]
   1ce18:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1ce1c:	687a      	ldr	r2, [r7, #4]
   1ce1e:	429a      	cmp	r2, r3
   1ce20:	d009      	beq.n	1ce36 <_ZN9Krabi2015D1Ev+0x76>
   1ce22:	687b      	ldr	r3, [r7, #4]
   1ce24:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1ce28:	607b      	str	r3, [r7, #4]
   1ce2a:	687a      	ldr	r2, [r7, #4]
   1ce2c:	6813      	ldr	r3, [r2, #0]
   1ce2e:	681b      	ldr	r3, [r3, #0]
   1ce30:	6878      	ldr	r0, [r7, #4]
   1ce32:	4798      	blx	r3
   1ce34:	e7ef      	b.n	1ce16 <_ZN9Krabi2015D1Ev+0x56>
   1ce36:	68fb      	ldr	r3, [r7, #12]
   1ce38:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ce3c:	2b00      	cmp	r3, #0
   1ce3e:	d015      	beq.n	1ce6c <_ZN9Krabi2015D1Ev+0xac>
   1ce40:	68fb      	ldr	r3, [r7, #12]
   1ce42:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ce46:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1ce4a:	60bb      	str	r3, [r7, #8]
   1ce4c:	68fb      	ldr	r3, [r7, #12]
   1ce4e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ce52:	68ba      	ldr	r2, [r7, #8]
   1ce54:	429a      	cmp	r2, r3
   1ce56:	d009      	beq.n	1ce6c <_ZN9Krabi2015D1Ev+0xac>
   1ce58:	68bb      	ldr	r3, [r7, #8]
   1ce5a:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1ce5e:	60bb      	str	r3, [r7, #8]
   1ce60:	68ba      	ldr	r2, [r7, #8]
   1ce62:	6813      	ldr	r3, [r2, #0]
   1ce64:	681b      	ldr	r3, [r3, #0]
   1ce66:	68b8      	ldr	r0, [r7, #8]
   1ce68:	4798      	blx	r3
   1ce6a:	e7ef      	b.n	1ce4c <_ZN9Krabi2015D1Ev+0x8c>
   1ce6c:	68fb      	ldr	r3, [r7, #12]
   1ce6e:	4618      	mov	r0, r3
   1ce70:	f7ff ff20 	bl	1ccb4 <_ZN11StrategieV3D2Ev>
   1ce74:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ce78:	b2db      	uxtb	r3, r3
   1ce7a:	2b00      	cmp	r3, #0
   1ce7c:	d002      	beq.n	1ce84 <_ZN9Krabi2015D1Ev+0xc4>
   1ce7e:	68f8      	ldr	r0, [r7, #12]
   1ce80:	f7f1 fcb8 	bl	e7f4 <_ZdlPv>
   1ce84:	68fb      	ldr	r3, [r7, #12]
   1ce86:	4618      	mov	r0, r3
   1ce88:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1ce8c:	46bd      	mov	sp, r7
   1ce8e:	bd80      	pop	{r7, pc}
   1ce90:	00021fb0 	.word	0x00021fb0

0001ce94 <_ZN17MediumLevelActionaSERKS_>:
#ifndef ROBOTHW
#include <QPainter>;
#endif

class MediumLevelAction
{
   1ce94:	b580      	push	{r7, lr}
   1ce96:	b082      	sub	sp, #8
   1ce98:	af00      	add	r7, sp, #0
   1ce9a:	6078      	str	r0, [r7, #4]
   1ce9c:	6039      	str	r1, [r7, #0]
   1ce9e:	687b      	ldr	r3, [r7, #4]
   1cea0:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1cea4:	683a      	ldr	r2, [r7, #0]
   1cea6:	4618      	mov	r0, r3
   1cea8:	f102 0304 	add.w	r3, r2, #4	; 0x4
   1ceac:	e893 0006 	ldmia.w	r3, {r1, r2}
   1ceb0:	f7f1 fdf4 	bl	ea9c <_ZN8PositionaSES_>
   1ceb4:	683b      	ldr	r3, [r7, #0]
   1ceb6:	68da      	ldr	r2, [r3, #12]
   1ceb8:	687b      	ldr	r3, [r7, #4]
   1ceba:	60da      	str	r2, [r3, #12]
   1cebc:	683b      	ldr	r3, [r7, #0]
   1cebe:	7c1b      	ldrb	r3, [r3, #16]
   1cec0:	687a      	ldr	r2, [r7, #4]
   1cec2:	7413      	strb	r3, [r2, #16]
   1cec4:	683b      	ldr	r3, [r7, #0]
   1cec6:	695a      	ldr	r2, [r3, #20]
   1cec8:	687b      	ldr	r3, [r7, #4]
   1ceca:	615a      	str	r2, [r3, #20]
   1cecc:	687b      	ldr	r3, [r7, #4]
   1cece:	4618      	mov	r0, r3
   1ced0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ced4:	46bd      	mov	sp, r7
   1ced6:	bd80      	pop	{r7, pc}

0001ced8 <_ZN10ActionGoToaSERKS_>:
#include "position.h"
//#include <stdint.h>


class ActionGoTo : public MediumLevelAction
{
   1ced8:	b580      	push	{r7, lr}
   1ceda:	b082      	sub	sp, #8
   1cedc:	af00      	add	r7, sp, #0
   1cede:	6078      	str	r0, [r7, #4]
   1cee0:	6039      	str	r1, [r7, #0]
   1cee2:	687b      	ldr	r3, [r7, #4]
   1cee4:	683a      	ldr	r2, [r7, #0]
   1cee6:	4618      	mov	r0, r3
   1cee8:	4611      	mov	r1, r2
   1ceea:	f7ff ffd3 	bl	1ce94 <_ZN17MediumLevelActionaSERKS_>
   1ceee:	683b      	ldr	r3, [r7, #0]
   1cef0:	699a      	ldr	r2, [r3, #24]
   1cef2:	687b      	ldr	r3, [r7, #4]
   1cef4:	619a      	str	r2, [r3, #24]
   1cef6:	683b      	ldr	r3, [r7, #0]
   1cef8:	7f1b      	ldrb	r3, [r3, #28]
   1cefa:	687a      	ldr	r2, [r7, #4]
   1cefc:	7713      	strb	r3, [r2, #28]
   1cefe:	683b      	ldr	r3, [r7, #0]
   1cf00:	6a1a      	ldr	r2, [r3, #32]
   1cf02:	687b      	ldr	r3, [r7, #4]
   1cf04:	621a      	str	r2, [r3, #32]
   1cf06:	683b      	ldr	r3, [r7, #0]
   1cf08:	6a5a      	ldr	r2, [r3, #36]
   1cf0a:	687b      	ldr	r3, [r7, #4]
   1cf0c:	625a      	str	r2, [r3, #36]
   1cf0e:	687b      	ldr	r3, [r7, #4]
   1cf10:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1cf14:	683a      	ldr	r2, [r7, #0]
   1cf16:	4618      	mov	r0, r3
   1cf18:	f102 0328 	add.w	r3, r2, #40	; 0x28
   1cf1c:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cf20:	f7f1 fdbc 	bl	ea9c <_ZN8PositionaSES_>
   1cf24:	687b      	ldr	r3, [r7, #4]
   1cf26:	4618      	mov	r0, r3
   1cf28:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cf2c:	46bd      	mov	sp, r7
   1cf2e:	bd80      	pop	{r7, pc}

0001cf30 <_ZN4ClapaSERKS_>:

/** @class clap : le robot doit fermer 3 claps du bord de la table
*/

class Clap : public MediumLevelAction
{
   1cf30:	b580      	push	{r7, lr}
   1cf32:	b082      	sub	sp, #8
   1cf34:	af00      	add	r7, sp, #0
   1cf36:	6078      	str	r0, [r7, #4]
   1cf38:	6039      	str	r1, [r7, #0]
   1cf3a:	687b      	ldr	r3, [r7, #4]
   1cf3c:	683a      	ldr	r2, [r7, #0]
   1cf3e:	4618      	mov	r0, r3
   1cf40:	4611      	mov	r1, r2
   1cf42:	f7ff ffa7 	bl	1ce94 <_ZN17MediumLevelActionaSERKS_>
   1cf46:	687b      	ldr	r3, [r7, #4]
   1cf48:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1cf4c:	683a      	ldr	r2, [r7, #0]
   1cf4e:	4618      	mov	r0, r3
   1cf50:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1cf54:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cf58:	f7f1 fda0 	bl	ea9c <_ZN8PositionaSES_>
   1cf5c:	687b      	ldr	r3, [r7, #4]
   1cf5e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1cf62:	683a      	ldr	r2, [r7, #0]
   1cf64:	4618      	mov	r0, r3
   1cf66:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1cf6a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cf6e:	f7f1 fd95 	bl	ea9c <_ZN8PositionaSES_>
   1cf72:	687b      	ldr	r3, [r7, #4]
   1cf74:	4618      	mov	r0, r3
   1cf76:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cf7a:	46bd      	mov	sp, r7
   1cf7c:	bd80      	pop	{r7, pc}
   1cf7e:	46c0      	nop			(mov r8, r8)

0001cf80 <_ZN7GobeletaSERKS_>:
#include "position.h"
#include "mediumLevelAction.h"
#include "command.h"

class Gobelet : public MediumLevelAction
{
   1cf80:	b580      	push	{r7, lr}
   1cf82:	b082      	sub	sp, #8
   1cf84:	af00      	add	r7, sp, #0
   1cf86:	6078      	str	r0, [r7, #4]
   1cf88:	6039      	str	r1, [r7, #0]
   1cf8a:	687b      	ldr	r3, [r7, #4]
   1cf8c:	683a      	ldr	r2, [r7, #0]
   1cf8e:	4618      	mov	r0, r3
   1cf90:	4611      	mov	r1, r2
   1cf92:	f7ff ff7f 	bl	1ce94 <_ZN17MediumLevelActionaSERKS_>
   1cf96:	687b      	ldr	r3, [r7, #4]
   1cf98:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1cf9c:	683a      	ldr	r2, [r7, #0]
   1cf9e:	4618      	mov	r0, r3
   1cfa0:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1cfa4:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cfa8:	f7f1 fd78 	bl	ea9c <_ZN8PositionaSES_>
   1cfac:	687b      	ldr	r3, [r7, #4]
   1cfae:	4618      	mov	r0, r3
   1cfb0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cfb4:	46bd      	mov	sp, r7
   1cfb6:	bd80      	pop	{r7, pc}

0001cfb8 <_ZN5TapisaSERKS_>:

/** @class Tapis : le robot doit poser 2 tapis sur les marches.
*/

class Tapis : public MediumLevelAction
{
   1cfb8:	b580      	push	{r7, lr}
   1cfba:	b082      	sub	sp, #8
   1cfbc:	af00      	add	r7, sp, #0
   1cfbe:	6078      	str	r0, [r7, #4]
   1cfc0:	6039      	str	r1, [r7, #0]
   1cfc2:	687b      	ldr	r3, [r7, #4]
   1cfc4:	683a      	ldr	r2, [r7, #0]
   1cfc6:	4618      	mov	r0, r3
   1cfc8:	4611      	mov	r1, r2
   1cfca:	f7ff ff63 	bl	1ce94 <_ZN17MediumLevelActionaSERKS_>
   1cfce:	687b      	ldr	r3, [r7, #4]
   1cfd0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1cfd4:	683a      	ldr	r2, [r7, #0]
   1cfd6:	4618      	mov	r0, r3
   1cfd8:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1cfdc:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cfe0:	f7f1 fd5c 	bl	ea9c <_ZN8PositionaSES_>
   1cfe4:	687b      	ldr	r3, [r7, #4]
   1cfe6:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1cfea:	683a      	ldr	r2, [r7, #0]
   1cfec:	4618      	mov	r0, r3
   1cfee:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1cff2:	e893 0006 	ldmia.w	r3, {r1, r2}
   1cff6:	f7f1 fd51 	bl	ea9c <_ZN8PositionaSES_>
   1cffa:	687b      	ldr	r3, [r7, #4]
   1cffc:	4618      	mov	r0, r3
   1cffe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d002:	46bd      	mov	sp, r7
   1d004:	bd80      	pop	{r7, pc}
   1d006:	46c0      	nop			(mov r8, r8)

0001d008 <_ZN11StrategieV3D0Ev>:
   1d008:	b580      	push	{r7, lr}
   1d00a:	b082      	sub	sp, #8
   1d00c:	af00      	add	r7, sp, #0
   1d00e:	6078      	str	r0, [r7, #4]
   1d010:	687a      	ldr	r2, [r7, #4]
   1d012:	4b0a      	ldr	r3, [pc, #40]	(1d03c <_ZN11StrategieV3D0Ev+0x34>)
   1d014:	6013      	str	r3, [r2, #0]
   1d016:	687b      	ldr	r3, [r7, #4]
   1d018:	4618      	mov	r0, r3
   1d01a:	f7f7 ff6b 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   1d01e:	f04f 0301 	mov.w	r3, #1	; 0x1
   1d022:	b2db      	uxtb	r3, r3
   1d024:	2b00      	cmp	r3, #0
   1d026:	d002      	beq.n	1d02e <_ZN11StrategieV3D0Ev+0x26>
   1d028:	6878      	ldr	r0, [r7, #4]
   1d02a:	f7f1 fbe3 	bl	e7f4 <_ZdlPv>
   1d02e:	687b      	ldr	r3, [r7, #4]
   1d030:	4618      	mov	r0, r3
   1d032:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d036:	46bd      	mov	sp, r7
   1d038:	bd80      	pop	{r7, pc}
   1d03a:	46c0      	nop			(mov r8, r8)
   1d03c:	00022028 	.word	0x00022028

0001d040 <_ZN11StrategieV3D1Ev>:
   1d040:	b580      	push	{r7, lr}
   1d042:	b082      	sub	sp, #8
   1d044:	af00      	add	r7, sp, #0
   1d046:	6078      	str	r0, [r7, #4]
   1d048:	687a      	ldr	r2, [r7, #4]
   1d04a:	4b0a      	ldr	r3, [pc, #40]	(1d074 <_ZN11StrategieV3D1Ev+0x34>)
   1d04c:	6013      	str	r3, [r2, #0]
   1d04e:	687b      	ldr	r3, [r7, #4]
   1d050:	4618      	mov	r0, r3
   1d052:	f7f7 ff4f 	bl	14ef4 <_ZN17MediumLevelActionD2Ev>
   1d056:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d05a:	b2db      	uxtb	r3, r3
   1d05c:	2b00      	cmp	r3, #0
   1d05e:	d002      	beq.n	1d066 <_ZN11StrategieV3D1Ev+0x26>
   1d060:	6878      	ldr	r0, [r7, #4]
   1d062:	f7f1 fbc7 	bl	e7f4 <_ZdlPv>
   1d066:	687b      	ldr	r3, [r7, #4]
   1d068:	4618      	mov	r0, r3
   1d06a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d06e:	46bd      	mov	sp, r7
   1d070:	bd80      	pop	{r7, pc}
   1d072:	46c0      	nop			(mov r8, r8)
   1d074:	00022028 	.word	0x00022028

0001d078 <__cxa_pure_virtual>:
   1d078:	b500      	push	{lr}
   1d07a:	4904      	ldr	r1, [pc, #16]	(1d08c <__cxa_pure_virtual+0x14>)
   1d07c:	b081      	sub	sp, #4
   1d07e:	221b      	movs	r2, #27
   1d080:	2002      	movs	r0, #2
   1d082:	f004 f851 	bl	21128 <write>
   1d086:	f000 f821 	bl	1d0cc <_ZSt9terminatev>
   1d08a:	46c0      	nop			(mov r8, r8)
   1d08c:	000226a0 	.word	0x000226a0

0001d090 <_ZSt13set_terminatePFvvE>:
   1d090:	4b02      	ldr	r3, [pc, #8]	(1d09c <_ZSt13set_terminatePFvvE+0xc>)
   1d092:	681a      	ldr	r2, [r3, #0]
   1d094:	6018      	str	r0, [r3, #0]
   1d096:	4610      	mov	r0, r2
   1d098:	4770      	bx	lr
   1d09a:	46c0      	nop			(mov r8, r8)
   1d09c:	20000038 	.word	0x20000038

0001d0a0 <_ZSt14set_unexpectedPFvvE>:
   1d0a0:	4b02      	ldr	r3, [pc, #8]	(1d0ac <_ZSt14set_unexpectedPFvvE+0xc>)
   1d0a2:	681a      	ldr	r2, [r3, #0]
   1d0a4:	6018      	str	r0, [r3, #0]
   1d0a6:	4610      	mov	r0, r2
   1d0a8:	4770      	bx	lr
   1d0aa:	46c0      	nop			(mov r8, r8)
   1d0ac:	20000034 	.word	0x20000034

0001d0b0 <_ZN10__cxxabiv111__terminateEPFvvE>:
   1d0b0:	b510      	push	{r4, lr}
   1d0b2:	4780      	blx	r0
   1d0b4:	f002 ffa6 	bl	20004 <abort>
   1d0b8:	f000 ff3c 	bl	1df34 <__cxa_begin_catch>
   1d0bc:	f002 ffa2 	bl	20004 <abort>
   1d0c0:	4604      	mov	r4, r0
   1d0c2:	f000 feef 	bl	1dea4 <__cxa_end_catch>
   1d0c6:	4620      	mov	r0, r4
   1d0c8:	f7fa fae2 	bl	17690 <__cxa_end_cleanup>

0001d0cc <_ZSt9terminatev>:
   1d0cc:	b500      	push	{lr}
   1d0ce:	4b02      	ldr	r3, [pc, #8]	(1d0d8 <_ZSt9terminatev+0xc>)
   1d0d0:	b081      	sub	sp, #4
   1d0d2:	6818      	ldr	r0, [r3, #0]
   1d0d4:	f7ff ffec 	bl	1d0b0 <_ZN10__cxxabiv111__terminateEPFvvE>
   1d0d8:	20000038 	.word	0x20000038

0001d0dc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1d0dc:	b500      	push	{lr}
   1d0de:	b081      	sub	sp, #4
   1d0e0:	4780      	blx	r0
   1d0e2:	f7ff fff3 	bl	1d0cc <_ZSt9terminatev>
   1d0e6:	46c0      	nop			(mov r8, r8)

0001d0e8 <_ZSt10unexpectedv>:
   1d0e8:	b500      	push	{lr}
   1d0ea:	4b02      	ldr	r3, [pc, #8]	(1d0f4 <_ZSt10unexpectedv+0xc>)
   1d0ec:	b081      	sub	sp, #4
   1d0ee:	6818      	ldr	r0, [r3, #0]
   1d0f0:	f7ff fff4 	bl	1d0dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1d0f4:	20000034 	.word	0x20000034

0001d0f8 <__cxa_begin_cleanup>:
   1d0f8:	b510      	push	{r4, lr}
   1d0fa:	4604      	mov	r4, r0
   1d0fc:	f001 f9f0 	bl	1e4e0 <__cxa_get_globals>
   1d100:	f814 3920 	ldrb.w	r3, [r4], #-32
   1d104:	2b47      	cmp	r3, #71
   1d106:	d005      	beq.n	1d114 <__cxa_begin_cleanup+0x1c>
   1d108:	6883      	ldr	r3, [r0, #8]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	d127      	bne.n	1d15e <__cxa_begin_cleanup+0x66>
   1d10e:	6084      	str	r4, [r0, #8]
   1d110:	2001      	movs	r0, #1
   1d112:	bd10      	pop	{r4, pc}
   1d114:	f894 3021 	ldrb.w	r3, [r4, #33]
   1d118:	2b4e      	cmp	r3, #78
   1d11a:	d1f5      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d11c:	f894 3022 	ldrb.w	r3, [r4, #34]
   1d120:	2b55      	cmp	r3, #85
   1d122:	d1f1      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d124:	f894 3023 	ldrb.w	r3, [r4, #35]
   1d128:	2b43      	cmp	r3, #67
   1d12a:	d1ed      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d12c:	f894 3024 	ldrb.w	r3, [r4, #36]
   1d130:	2b43      	cmp	r3, #67
   1d132:	d1e9      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d134:	f894 3025 	ldrb.w	r3, [r4, #37]
   1d138:	2b2b      	cmp	r3, #43
   1d13a:	d1e5      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d13c:	f894 3026 	ldrb.w	r3, [r4, #38]
   1d140:	2b2b      	cmp	r3, #43
   1d142:	d1e1      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d144:	f894 3027 	ldrb.w	r3, [r4, #39]
   1d148:	2b00      	cmp	r3, #0
   1d14a:	d1dd      	bne.n	1d108 <__cxa_begin_cleanup+0x10>
   1d14c:	69e3      	ldr	r3, [r4, #28]
   1d14e:	3301      	adds	r3, #1
   1d150:	2b01      	cmp	r3, #1
   1d152:	61e3      	str	r3, [r4, #28]
   1d154:	d1dc      	bne.n	1d110 <__cxa_begin_cleanup+0x18>
   1d156:	6883      	ldr	r3, [r0, #8]
   1d158:	61a3      	str	r3, [r4, #24]
   1d15a:	6084      	str	r4, [r0, #8]
   1d15c:	e7d8      	b.n	1d110 <__cxa_begin_cleanup+0x18>
   1d15e:	f7ff ffb5 	bl	1d0cc <_ZSt9terminatev>
   1d162:	46c0      	nop			(mov r8, r8)

0001d164 <__cxa_type_match>:
   1d164:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d166:	461f      	mov	r7, r3
   1d168:	7803      	ldrb	r3, [r0, #0]
   1d16a:	b083      	sub	sp, #12
   1d16c:	2b47      	cmp	r3, #71
   1d16e:	460e      	mov	r6, r1
   1d170:	d02c      	beq.n	1d1cc <__cxa_type_match+0x68>
   1d172:	4d27      	ldr	r5, [pc, #156]	(1d210 <__cxa_type_match+0xac>)
   1d174:	683b      	ldr	r3, [r7, #0]
   1d176:	682a      	ldr	r2, [r5, #0]
   1d178:	9301      	str	r3, [sp, #4]
   1d17a:	4628      	mov	r0, r5
   1d17c:	6893      	ldr	r3, [r2, #8]
   1d17e:	4798      	blx	r3
   1d180:	b110      	cbz	r0, 1d188 <__cxa_type_match+0x24>
   1d182:	9b01      	ldr	r3, [sp, #4]
   1d184:	681a      	ldr	r2, [r3, #0]
   1d186:	9201      	str	r2, [sp, #4]
   1d188:	6833      	ldr	r3, [r6, #0]
   1d18a:	4630      	mov	r0, r6
   1d18c:	691c      	ldr	r4, [r3, #16]
   1d18e:	4629      	mov	r1, r5
   1d190:	aa01      	add	r2, sp, #4
   1d192:	2301      	movs	r3, #1
   1d194:	47a0      	blx	r4
   1d196:	b1b8      	cbz	r0, 1d1c8 <__cxa_type_match+0x64>
   1d198:	9b01      	ldr	r3, [sp, #4]
   1d19a:	6832      	ldr	r2, [r6, #0]
   1d19c:	603b      	str	r3, [r7, #0]
   1d19e:	4b1d      	ldr	r3, [pc, #116]	(1d214 <__cxa_type_match+0xb0>)
   1d1a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1d1a4:	681a      	ldr	r2, [r3, #0]
   1d1a6:	f852 1c04 	ldr.w	r1, [r2, #-4]
   1d1aa:	f001 f8e9 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1d1ae:	b150      	cbz	r0, 1d1c6 <__cxa_type_match+0x62>
   1d1b0:	68f3      	ldr	r3, [r6, #12]
   1d1b2:	2b00      	cmp	r3, #0
   1d1b4:	d02a      	beq.n	1d20c <__cxa_type_match+0xa8>
   1d1b6:	681b      	ldr	r3, [r3, #0]
   1d1b8:	4917      	ldr	r1, [pc, #92]	(1d218 <__cxa_type_match+0xb4>)
   1d1ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1d1be:	f001 f8df 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1d1c2:	2800      	cmp	r0, #0
   1d1c4:	d01a      	beq.n	1d1fc <__cxa_type_match+0x98>
   1d1c6:	2001      	movs	r0, #1
   1d1c8:	b003      	add	sp, #12
   1d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d1cc:	7843      	ldrb	r3, [r0, #1]
   1d1ce:	2b4e      	cmp	r3, #78
   1d1d0:	d1cf      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1d2:	7883      	ldrb	r3, [r0, #2]
   1d1d4:	2b55      	cmp	r3, #85
   1d1d6:	d1cc      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1d8:	78c3      	ldrb	r3, [r0, #3]
   1d1da:	2b43      	cmp	r3, #67
   1d1dc:	d1c9      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1de:	7903      	ldrb	r3, [r0, #4]
   1d1e0:	2b43      	cmp	r3, #67
   1d1e2:	d1c6      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1e4:	7943      	ldrb	r3, [r0, #5]
   1d1e6:	2b2b      	cmp	r3, #43
   1d1e8:	d1c3      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1ea:	7983      	ldrb	r3, [r0, #6]
   1d1ec:	2b2b      	cmp	r3, #43
   1d1ee:	d1c0      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1f0:	79c3      	ldrb	r3, [r0, #7]
   1d1f2:	2b00      	cmp	r3, #0
   1d1f4:	d1bd      	bne.n	1d172 <__cxa_type_match+0xe>
   1d1f6:	f850 5c20 	ldr.w	r5, [r0, #-32]
   1d1fa:	e7bb      	b.n	1d174 <__cxa_type_match+0x10>
   1d1fc:	68f0      	ldr	r0, [r6, #12]
   1d1fe:	68e9      	ldr	r1, [r5, #12]
   1d200:	f001 f8be 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1d204:	2800      	cmp	r0, #0
   1d206:	d1de      	bne.n	1d1c6 <__cxa_type_match+0x62>
   1d208:	3002      	adds	r0, #2
   1d20a:	e7dd      	b.n	1d1c8 <__cxa_type_match+0x64>
   1d20c:	f000 fcbc 	bl	1db88 <__cxa_bad_typeid>
   1d210:	00022cb4 	.word	0x00022cb4
   1d214:	00022af0 	.word	0x00022af0
   1d218:	00022b00 	.word	0x00022b00

0001d21c <__gnu_end_cleanup>:
   1d21c:	b500      	push	{lr}
   1d21e:	b081      	sub	sp, #4
   1d220:	f001 f95e 	bl	1e4e0 <__cxa_get_globals>
   1d224:	4602      	mov	r2, r0
   1d226:	6880      	ldr	r0, [r0, #8]
   1d228:	2800      	cmp	r0, #0
   1d22a:	d02e      	beq.n	1d28a <__gnu_end_cleanup+0x6e>
   1d22c:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d230:	2b47      	cmp	r3, #71
   1d232:	d004      	beq.n	1d23e <__gnu_end_cleanup+0x22>
   1d234:	2300      	movs	r3, #0
   1d236:	6093      	str	r3, [r2, #8]
   1d238:	3020      	adds	r0, #32
   1d23a:	b001      	add	sp, #4
   1d23c:	bd00      	pop	{pc}
   1d23e:	f890 3021 	ldrb.w	r3, [r0, #33]
   1d242:	2b4e      	cmp	r3, #78
   1d244:	d1f6      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d246:	f890 3022 	ldrb.w	r3, [r0, #34]
   1d24a:	2b55      	cmp	r3, #85
   1d24c:	d1f2      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d24e:	f890 3023 	ldrb.w	r3, [r0, #35]
   1d252:	2b43      	cmp	r3, #67
   1d254:	d1ee      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d256:	f890 3024 	ldrb.w	r3, [r0, #36]
   1d25a:	2b43      	cmp	r3, #67
   1d25c:	d1ea      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d25e:	f890 3025 	ldrb.w	r3, [r0, #37]
   1d262:	2b2b      	cmp	r3, #43
   1d264:	d1e6      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d266:	f890 3026 	ldrb.w	r3, [r0, #38]
   1d26a:	2b2b      	cmp	r3, #43
   1d26c:	d1e2      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d26e:	f890 3027 	ldrb.w	r3, [r0, #39]
   1d272:	2b00      	cmp	r3, #0
   1d274:	d1de      	bne.n	1d234 <__gnu_end_cleanup+0x18>
   1d276:	69c3      	ldr	r3, [r0, #28]
   1d278:	3b01      	subs	r3, #1
   1d27a:	61c3      	str	r3, [r0, #28]
   1d27c:	2b00      	cmp	r3, #0
   1d27e:	d1db      	bne.n	1d238 <__gnu_end_cleanup+0x1c>
   1d280:	6983      	ldr	r3, [r0, #24]
   1d282:	6093      	str	r3, [r2, #8]
   1d284:	2200      	movs	r2, #0
   1d286:	6182      	str	r2, [r0, #24]
   1d288:	e7d6      	b.n	1d238 <__gnu_end_cleanup+0x1c>
   1d28a:	f7ff ff1f 	bl	1d0cc <_ZSt9terminatev>
   1d28e:	46c0      	nop			(mov r8, r8)

0001d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1d290:	b500      	push	{lr}
   1d292:	28ff      	cmp	r0, #255
   1d294:	b081      	sub	sp, #4
   1d296:	d00d      	beq.n	1d2b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d298:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1d29c:	2820      	cmp	r0, #32
   1d29e:	d018      	beq.n	1d2d2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
   1d2a0:	dd07      	ble.n	1d2b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
   1d2a2:	2840      	cmp	r0, #64
   1d2a4:	d00d      	beq.n	1d2c2 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1d2a6:	2850      	cmp	r0, #80
   1d2a8:	d004      	beq.n	1d2b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d2aa:	2830      	cmp	r0, #48
   1d2ac:	d00d      	beq.n	1d2ca <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   1d2ae:	f002 fea9 	bl	20004 <abort>
   1d2b2:	b910      	cbnz	r0, 1d2ba <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
   1d2b4:	2000      	movs	r0, #0
   1d2b6:	b001      	add	sp, #4
   1d2b8:	bd00      	pop	{pc}
   1d2ba:	2810      	cmp	r0, #16
   1d2bc:	d0fa      	beq.n	1d2b4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d2be:	f002 fea1 	bl	20004 <abort>
   1d2c2:	4608      	mov	r0, r1
   1d2c4:	f7fe fe46 	bl	1bf54 <_Unwind_GetRegionStart>
   1d2c8:	e7f5      	b.n	1d2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1d2ca:	4608      	mov	r0, r1
   1d2cc:	f7fe fe1e 	bl	1bf0c <_Unwind_GetDataRelBase>
   1d2d0:	e7f1      	b.n	1d2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1d2d2:	4608      	mov	r0, r1
   1d2d4:	f7fe fe16 	bl	1bf04 <_Unwind_GetTextRelBase>
   1d2d8:	e7ed      	b.n	1d2b6 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1d2da:	46c0      	nop			(mov r8, r8)

0001d2dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2e0:	4604      	mov	r4, r0
   1d2e2:	460e      	mov	r6, r1
   1d2e4:	4617      	mov	r7, r2
   1d2e6:	b108      	cbz	r0, 1d2ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   1d2e8:	f7fe fe34 	bl	1bf54 <_Unwind_GetRegionStart>
   1d2ec:	6038      	str	r0, [r7, #0]
   1d2ee:	4635      	mov	r5, r6
   1d2f0:	f815 8b01 	ldrb.w	r8, [r5], #1
   1d2f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1d2f8:	bf08      	it	eq
   1d2fa:	6078      	streq	r0, [r7, #4]
   1d2fc:	d03d      	beq.n	1d37a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1d2fe:	4640      	mov	r0, r8
   1d300:	4621      	mov	r1, r4
   1d302:	f7ff ffc5 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d306:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1d30a:	d06d      	beq.n	1d3e8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10c>
   1d30c:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1d310:	46ae      	mov	lr, r5
   1d312:	2b0c      	cmp	r3, #12
   1d314:	f200 808d 	bhi.w	1d432 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x156>
   1d318:	e8df f003 	tbb	[pc, r3]
   1d31c:	6d858d6d 	.word	0x6d858d6d
   1d320:	8b8b8b79 	.word	0x8b8b8b79
   1d324:	6d9f078b 	.word	0x6d9f078b
   1d328:	0079      	.short	0x0079
   1d32a:	2400      	movs	r4, #0
   1d32c:	1cb1      	adds	r1, r6, #2
   1d32e:	46a4      	mov	ip, r4
   1d330:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d334:	460d      	mov	r5, r1
   1d336:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d33a:	fa03 f30c 	lsl.w	r3, r3, ip
   1d33e:	3101      	adds	r1, #1
   1d340:	431c      	orrs	r4, r3
   1d342:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d346:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d34a:	d1f1      	bne.n	1d330 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
   1d34c:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1d350:	d807      	bhi.n	1d362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d352:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d356:	bf1e      	ittt	ne
   1d358:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1d35c:	fa03 f30c 	lslne.w	r3, r3, ip
   1d360:	431c      	orrne	r4, r3
   1d362:	b14c      	cbz	r4, 1d378 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9c>
   1d364:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1d368:	2b10      	cmp	r3, #16
   1d36a:	bf08      	it	eq
   1d36c:	4670      	moveq	r0, lr
   1d36e:	1824      	adds	r4, r4, r0
   1d370:	f018 0f80 	tst.w	r8, #128	; 0x80
   1d374:	bf18      	it	ne
   1d376:	6824      	ldrne	r4, [r4, #0]
   1d378:	607c      	str	r4, [r7, #4]
   1d37a:	462c      	mov	r4, r5
   1d37c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d380:	2bff      	cmp	r3, #255
   1d382:	753b      	strb	r3, [r7, #20]
   1d384:	d02d      	beq.n	1d3e2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x106>
   1d386:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1d38a:	1ca9      	adds	r1, r5, #2
   1d38c:	4660      	mov	r0, ip
   1d38e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d392:	460c      	mov	r4, r1
   1d394:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d398:	4083      	lsls	r3, r0
   1d39a:	3101      	adds	r1, #1
   1d39c:	3007      	adds	r0, #7
   1d39e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d3a2:	ea4c 0c03 	orr.w	ip, ip, r3
   1d3a6:	d1f2      	bne.n	1d38e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xb2>
   1d3a8:	eb04 030c 	add.w	r3, r4, ip
   1d3ac:	60fb      	str	r3, [r7, #12]
   1d3ae:	4621      	mov	r1, r4
   1d3b0:	f811 3b02 	ldrb.w	r3, [r1], #2
   1d3b4:	2000      	movs	r0, #0
   1d3b6:	757b      	strb	r3, [r7, #21]
   1d3b8:	4684      	mov	ip, r0
   1d3ba:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d3be:	460c      	mov	r4, r1
   1d3c0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d3c4:	fa03 f30c 	lsl.w	r3, r3, ip
   1d3c8:	3101      	adds	r1, #1
   1d3ca:	4318      	orrs	r0, r3
   1d3cc:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d3d0:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d3d4:	d1f1      	bne.n	1d3ba <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xde>
   1d3d6:	eb04 0300 	add.w	r3, r4, r0
   1d3da:	613b      	str	r3, [r7, #16]
   1d3dc:	4620      	mov	r0, r4
   1d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d3e2:	2300      	movs	r3, #0
   1d3e4:	60fb      	str	r3, [r7, #12]
   1d3e6:	e7e2      	b.n	1d3ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd2>
   1d3e8:	1d33      	adds	r3, r6, #4
   1d3ea:	f023 0503 	bic.w	r5, r3, #3	; 0x3
   1d3ee:	f855 4b04 	ldr.w	r4, [r5], #4
   1d3f2:	607c      	str	r4, [r7, #4]
   1d3f4:	e7c1      	b.n	1d37a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1d3f6:	786a      	ldrb	r2, [r5, #1]
   1d3f8:	7873      	ldrb	r3, [r6, #1]
   1d3fa:	78a9      	ldrb	r1, [r5, #2]
   1d3fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d400:	78ea      	ldrb	r2, [r5, #3]
   1d402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d406:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1d40a:	3504      	adds	r5, #4
   1d40c:	e7a9      	b.n	1d362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d40e:	786a      	ldrb	r2, [r5, #1]
   1d410:	7873      	ldrb	r3, [r6, #1]
   1d412:	78a9      	ldrb	r1, [r5, #2]
   1d414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d418:	78ea      	ldrb	r2, [r5, #3]
   1d41a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d41e:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1d422:	3508      	adds	r5, #8
   1d424:	e79d      	b.n	1d362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d426:	786b      	ldrb	r3, [r5, #1]
   1d428:	7872      	ldrb	r2, [r6, #1]
   1d42a:	3502      	adds	r5, #2
   1d42c:	ea42 2403 	orr.w	r4, r2, r3, lsl #8
   1d430:	e797      	b.n	1d362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d432:	f002 fde7 	bl	20004 <abort>
   1d436:	2400      	movs	r4, #0
   1d438:	1cb1      	adds	r1, r6, #2
   1d43a:	46a4      	mov	ip, r4
   1d43c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d440:	460d      	mov	r5, r1
   1d442:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d446:	fa03 f30c 	lsl.w	r3, r3, ip
   1d44a:	3101      	adds	r1, #1
   1d44c:	431c      	orrs	r4, r3
   1d44e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d452:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d456:	d1f1      	bne.n	1d43c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x160>
   1d458:	e783      	b.n	1d362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d45a:	786a      	ldrb	r2, [r5, #1]
   1d45c:	7873      	ldrb	r3, [r6, #1]
   1d45e:	3502      	adds	r5, #2
   1d460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d464:	041b      	lsls	r3, r3, #16
   1d466:	141c      	asrs	r4, r3, #16
   1d468:	e77b      	b.n	1d362 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d46a:	46c0      	nop			(mov r8, r8)

0001d46c <__gxx_personality_v0>:
   1d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d470:	f101 0358 	add.w	r3, r1, #88	; 0x58
   1d474:	b093      	sub	sp, #76
   1d476:	9311      	str	r3, [sp, #68]
   1d478:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1d47c:	2b01      	cmp	r3, #1
   1d47e:	468a      	mov	sl, r1
   1d480:	4691      	mov	r9, r2
   1d482:	f000 813f 	beq.w	1d704 <__gxx_personality_v0+0x298>
   1d486:	2b02      	cmp	r3, #2
   1d488:	f000 8132 	beq.w	1d6f0 <__gxx_personality_v0+0x284>
   1d48c:	2b00      	cmp	r3, #0
   1d48e:	d156      	bne.n	1d53e <__gxx_personality_v0+0xd2>
   1d490:	f000 0508 	and.w	r5, r0, #8	; 0x8
   1d494:	2301      	movs	r3, #1
   1d496:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1d49a:	2100      	movs	r1, #0
   1d49c:	ea45 0303 	orr.w	r3, r5, r3
   1d4a0:	220c      	movs	r2, #12
   1d4a2:	9306      	str	r3, [sp, #24]
   1d4a4:	4648      	mov	r0, r9
   1d4a6:	460b      	mov	r3, r1
   1d4a8:	f8cd a03c 	str.w	sl, [sp, #60]
   1d4ac:	f8cd b000 	str.w	fp, [sp]
   1d4b0:	f7fd ff18 	bl	1b2e4 <_Unwind_VRS_Set>
   1d4b4:	9a06      	ldr	r2, [sp, #24]
   1d4b6:	2a06      	cmp	r2, #6
   1d4b8:	f000 8144 	beq.w	1d744 <__gxx_personality_v0+0x2d8>
   1d4bc:	4648      	mov	r0, r9
   1d4be:	f7fe fd3d 	bl	1bf3c <_Unwind_GetLanguageSpecificData>
   1d4c2:	9004      	str	r0, [sp, #16]
   1d4c4:	2800      	cmp	r0, #0
   1d4c6:	f000 8113 	beq.w	1d6f0 <__gxx_personality_v0+0x284>
   1d4ca:	aa09      	add	r2, sp, #36
   1d4cc:	9904      	ldr	r1, [sp, #16]
   1d4ce:	4648      	mov	r0, r9
   1d4d0:	f7ff ff04 	bl	1d2dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1d4d4:	4649      	mov	r1, r9
   1d4d6:	4604      	mov	r4, r0
   1d4d8:	f89d 0038 	ldrb.w	r0, [sp, #56]
   1d4dc:	f7ff fed8 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d4e0:	2100      	movs	r1, #0
   1d4e2:	900b      	str	r0, [sp, #44]
   1d4e4:	460b      	mov	r3, r1
   1d4e6:	4648      	mov	r0, r9
   1d4e8:	220f      	movs	r2, #15
   1d4ea:	f8cd b000 	str.w	fp, [sp]
   1d4ee:	f7fd fed1 	bl	1b294 <_Unwind_VRS_Get>
   1d4f2:	9b0f      	ldr	r3, [sp, #60]
   1d4f4:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1d4f8:	3b01      	subs	r3, #1
   1d4fa:	9307      	str	r3, [sp, #28]
   1d4fc:	9b0d      	ldr	r3, [sp, #52]
   1d4fe:	429c      	cmp	r4, r3
   1d500:	f080 8230 	bcs.w	1d964 <__gxx_personality_v0+0x4f8>
   1d504:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d508:	2100      	movs	r1, #0
   1d50a:	4628      	mov	r0, r5
   1d50c:	f7ff fec0 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d510:	2d50      	cmp	r5, #80
   1d512:	f000 80cb 	beq.w	1d6ac <__gxx_personality_v0+0x240>
   1d516:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1d51a:	46a4      	mov	ip, r4
   1d51c:	2b0c      	cmp	r3, #12
   1d51e:	d80e      	bhi.n	1d53e <__gxx_personality_v0+0xd2>
   1d520:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d524:	017e000f 	.word	0x017e000f
   1d528:	000f018b 	.word	0x000f018b
   1d52c:	000d0158 	.word	0x000d0158
   1d530:	000d000d 	.word	0x000d000d
   1d534:	0199000d 	.word	0x0199000d
   1d538:	000f0191 	.word	0x000f0191
   1d53c:	0158      	.short	0x0158
   1d53e:	f002 fd61 	bl	20004 <abort>
   1d542:	7862      	ldrb	r2, [r4, #1]
   1d544:	7823      	ldrb	r3, [r4, #0]
   1d546:	78a1      	ldrb	r1, [r4, #2]
   1d548:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d54c:	78e2      	ldrb	r2, [r4, #3]
   1d54e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d552:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1d556:	3404      	adds	r4, #4
   1d558:	b14f      	cbz	r7, 1d56e <__gxx_personality_v0+0x102>
   1d55a:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1d55e:	2b10      	cmp	r3, #16
   1d560:	bf08      	it	eq
   1d562:	4660      	moveq	r0, ip
   1d564:	183f      	adds	r7, r7, r0
   1d566:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d56a:	bf18      	it	ne
   1d56c:	683f      	ldrne	r7, [r7, #0]
   1d56e:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d572:	2100      	movs	r1, #0
   1d574:	4628      	mov	r0, r5
   1d576:	f7ff fe8b 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d57a:	2d50      	cmp	r5, #80
   1d57c:	f000 80a4 	beq.w	1d6c8 <__gxx_personality_v0+0x25c>
   1d580:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1d584:	46a4      	mov	ip, r4
   1d586:	2b0c      	cmp	r3, #12
   1d588:	d8d9      	bhi.n	1d53e <__gxx_personality_v0+0xd2>
   1d58a:	a201      	add	r2, pc, #4	(adr r2, 1d590 <__gxx_personality_v0+0x124>)
   1d58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d590:	0001d5c5 	.word	0x0001d5c5
   1d594:	0001d899 	.word	0x0001d899
   1d598:	0001d88d 	.word	0x0001d88d
   1d59c:	0001d5c5 	.word	0x0001d5c5
   1d5a0:	0001d7f1 	.word	0x0001d7f1
   1d5a4:	0001d53f 	.word	0x0001d53f
   1d5a8:	0001d53f 	.word	0x0001d53f
   1d5ac:	0001d53f 	.word	0x0001d53f
   1d5b0:	0001d53f 	.word	0x0001d53f
   1d5b4:	0001d8c3 	.word	0x0001d8c3
   1d5b8:	0001d8b3 	.word	0x0001d8b3
   1d5bc:	0001d5c5 	.word	0x0001d5c5
   1d5c0:	0001d7f1 	.word	0x0001d7f1
   1d5c4:	7862      	ldrb	r2, [r4, #1]
   1d5c6:	7823      	ldrb	r3, [r4, #0]
   1d5c8:	78a1      	ldrb	r1, [r4, #2]
   1d5ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d5ce:	78e2      	ldrb	r2, [r4, #3]
   1d5d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d5d4:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1d5d8:	3404      	adds	r4, #4
   1d5da:	b14e      	cbz	r6, 1d5f0 <__gxx_personality_v0+0x184>
   1d5dc:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1d5e0:	2b10      	cmp	r3, #16
   1d5e2:	bf08      	it	eq
   1d5e4:	4660      	moveq	r0, ip
   1d5e6:	1836      	adds	r6, r6, r0
   1d5e8:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d5ec:	bf18      	it	ne
   1d5ee:	6836      	ldrne	r6, [r6, #0]
   1d5f0:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1d5f4:	2100      	movs	r1, #0
   1d5f6:	4640      	mov	r0, r8
   1d5f8:	f7ff fe4a 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d5fc:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1d600:	d070      	beq.n	1d6e4 <__gxx_personality_v0+0x278>
   1d602:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1d606:	46a4      	mov	ip, r4
   1d608:	2b0c      	cmp	r3, #12
   1d60a:	d898      	bhi.n	1d53e <__gxx_personality_v0+0xd2>
   1d60c:	a201      	add	r2, pc, #4	(adr r2, 1d614 <__gxx_personality_v0+0x1a8>)
   1d60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d612:	46c0      	nop			(mov r8, r8)
   1d614:	0001d649 	.word	0x0001d649
   1d618:	0001d905 	.word	0x0001d905
   1d61c:	0001d8f9 	.word	0x0001d8f9
   1d620:	0001d649 	.word	0x0001d649
   1d624:	0001d809 	.word	0x0001d809
   1d628:	0001d53f 	.word	0x0001d53f
   1d62c:	0001d53f 	.word	0x0001d53f
   1d630:	0001d53f 	.word	0x0001d53f
   1d634:	0001d53f 	.word	0x0001d53f
   1d638:	0001d92f 	.word	0x0001d92f
   1d63c:	0001d91f 	.word	0x0001d91f
   1d640:	0001d649 	.word	0x0001d649
   1d644:	0001d809 	.word	0x0001d809
   1d648:	7862      	ldrb	r2, [r4, #1]
   1d64a:	7823      	ldrb	r3, [r4, #0]
   1d64c:	78a1      	ldrb	r1, [r4, #2]
   1d64e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d652:	78e2      	ldrb	r2, [r4, #3]
   1d654:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d658:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1d65c:	3404      	adds	r4, #4
   1d65e:	b14d      	cbz	r5, 1d674 <__gxx_personality_v0+0x208>
   1d660:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1d664:	2b10      	cmp	r3, #16
   1d666:	bf08      	it	eq
   1d668:	4660      	moveq	r0, ip
   1d66a:	182d      	adds	r5, r5, r0
   1d66c:	f018 0f80 	tst.w	r8, #128	; 0x80
   1d670:	bf18      	it	ne
   1d672:	682d      	ldrne	r5, [r5, #0]
   1d674:	2000      	movs	r0, #0
   1d676:	4601      	mov	r1, r0
   1d678:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d67c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d680:	408b      	lsls	r3, r1
   1d682:	3107      	adds	r1, #7
   1d684:	4318      	orrs	r0, r3
   1d686:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d68a:	d1f5      	bne.n	1d678 <__gxx_personality_v0+0x20c>
   1d68c:	9b09      	ldr	r3, [sp, #36]
   1d68e:	9a07      	ldr	r2, [sp, #28]
   1d690:	443b      	add	r3, r7
   1d692:	429a      	cmp	r2, r3
   1d694:	bf3c      	itt	cc
   1d696:	9c0d      	ldrcc	r4, [sp, #52]
   1d698:	4623      	movcc	r3, r4
   1d69a:	f4ff af30 	bcc.w	1d4fe <__gxx_personality_v0+0x92>
   1d69e:	9a07      	ldr	r2, [sp, #28]
   1d6a0:	4433      	add	r3, r6
   1d6a2:	429a      	cmp	r2, r3
   1d6a4:	f0c0 8189 	bcc.w	1d9ba <__gxx_personality_v0+0x54e>
   1d6a8:	9b0d      	ldr	r3, [sp, #52]
   1d6aa:	e728      	b.n	1d4fe <__gxx_personality_v0+0x92>
   1d6ac:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d6b0:	1ce3      	adds	r3, r4, #3
   1d6b2:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1d6b6:	2100      	movs	r1, #0
   1d6b8:	4628      	mov	r0, r5
   1d6ba:	f854 7b04 	ldr.w	r7, [r4], #4
   1d6be:	f7ff fde7 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d6c2:	2d50      	cmp	r5, #80
   1d6c4:	f47f af5c 	bne.w	1d580 <__gxx_personality_v0+0x114>
   1d6c8:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1d6cc:	1ce3      	adds	r3, r4, #3
   1d6ce:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1d6d2:	2100      	movs	r1, #0
   1d6d4:	4640      	mov	r0, r8
   1d6d6:	f854 6b04 	ldr.w	r6, [r4], #4
   1d6da:	f7ff fdd9 	bl	1d290 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d6de:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1d6e2:	d18e      	bne.n	1d602 <__gxx_personality_v0+0x196>
   1d6e4:	1ce3      	adds	r3, r4, #3
   1d6e6:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1d6ea:	f854 5b04 	ldr.w	r5, [r4], #4
   1d6ee:	e7c1      	b.n	1d674 <__gxx_personality_v0+0x208>
   1d6f0:	4650      	mov	r0, sl
   1d6f2:	4649      	mov	r1, r9
   1d6f4:	f7fe fdb6 	bl	1c264 <__gnu_unwind_frame>
   1d6f8:	2800      	cmp	r0, #0
   1d6fa:	d077      	beq.n	1d7ec <__gxx_personality_v0+0x380>
   1d6fc:	2009      	movs	r0, #9
   1d6fe:	b013      	add	sp, #76
   1d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d704:	f010 0508 	ands.w	r5, r0, #8	; 0x8
   1d708:	bf18      	it	ne
   1d70a:	f10d 0b3c 	addne.w	fp, sp, #60	; 0x3c
   1d70e:	d15f      	bne.n	1d7d0 <__gxx_personality_v0+0x364>
   1d710:	6a0c      	ldr	r4, [r1, #32]
   1d712:	4610      	mov	r0, r2
   1d714:	462b      	mov	r3, r5
   1d716:	220d      	movs	r2, #13
   1d718:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1d71c:	4629      	mov	r1, r5
   1d71e:	f8cd b000 	str.w	fp, [sp]
   1d722:	f7fd fdb7 	bl	1b294 <_Unwind_VRS_Get>
   1d726:	9b0f      	ldr	r3, [sp, #60]
   1d728:	429c      	cmp	r4, r3
   1d72a:	d151      	bne.n	1d7d0 <__gxx_personality_v0+0x364>
   1d72c:	462b      	mov	r3, r5
   1d72e:	4648      	mov	r0, r9
   1d730:	4629      	mov	r1, r5
   1d732:	220c      	movs	r2, #12
   1d734:	f8cd a03c 	str.w	sl, [sp, #60]
   1d738:	f8cd b000 	str.w	fp, [sp]
   1d73c:	f7fd fdd2 	bl	1b2e4 <_Unwind_VRS_Set>
   1d740:	2306      	movs	r3, #6
   1d742:	9306      	str	r3, [sp, #24]
   1d744:	f8da 8030 	ldr.w	r8, [sl, #48]
   1d748:	f8da 1028 	ldr.w	r1, [sl, #40]
   1d74c:	f8da 002c 	ldr.w	r0, [sl, #44]
   1d750:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1d754:	f000 8129 	beq.w	1d9aa <__gxx_personality_v0+0x53e>
   1d758:	460f      	mov	r7, r1
   1d75a:	9004      	str	r0, [sp, #16]
   1d75c:	2403      	movs	r4, #3
   1d75e:	9b06      	ldr	r3, [sp, #24]
   1d760:	f013 0508 	ands.w	r5, r3, #8	; 0x8
   1d764:	f000 81df 	beq.w	1db26 <__gxx_personality_v0+0x6ba>
   1d768:	2c01      	cmp	r4, #1
   1d76a:	f000 81da 	beq.w	1db22 <__gxx_personality_v0+0x6b6>
   1d76e:	2f00      	cmp	r7, #0
   1d770:	f2c0 81d5 	blt.w	1db1e <__gxx_personality_v0+0x6b2>
   1d774:	2100      	movs	r1, #0
   1d776:	460a      	mov	r2, r1
   1d778:	460b      	mov	r3, r1
   1d77a:	4648      	mov	r0, r9
   1d77c:	f8cd a03c 	str.w	sl, [sp, #60]
   1d780:	f8cd b000 	str.w	fp, [sp]
   1d784:	f7fd fdae 	bl	1b2e4 <_Unwind_VRS_Set>
   1d788:	2100      	movs	r1, #0
   1d78a:	2201      	movs	r2, #1
   1d78c:	460b      	mov	r3, r1
   1d78e:	4648      	mov	r0, r9
   1d790:	970f      	str	r7, [sp, #60]
   1d792:	f8cd b000 	str.w	fp, [sp]
   1d796:	f7fd fda5 	bl	1b2e4 <_Unwind_VRS_Set>
   1d79a:	2100      	movs	r1, #0
   1d79c:	220f      	movs	r2, #15
   1d79e:	460b      	mov	r3, r1
   1d7a0:	4648      	mov	r0, r9
   1d7a2:	f8cd b000 	str.w	fp, [sp]
   1d7a6:	f7fd fd75 	bl	1b294 <_Unwind_VRS_Get>
   1d7aa:	9b0f      	ldr	r3, [sp, #60]
   1d7ac:	2100      	movs	r1, #0
   1d7ae:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1d7b2:	ea48 0303 	orr.w	r3, r8, r3
   1d7b6:	930f      	str	r3, [sp, #60]
   1d7b8:	220f      	movs	r2, #15
   1d7ba:	4648      	mov	r0, r9
   1d7bc:	460b      	mov	r3, r1
   1d7be:	f8cd b000 	str.w	fp, [sp]
   1d7c2:	f7fd fd8f 	bl	1b2e4 <_Unwind_VRS_Set>
   1d7c6:	2c02      	cmp	r4, #2
   1d7c8:	f000 80f2 	beq.w	1d9b0 <__gxx_personality_v0+0x544>
   1d7cc:	2007      	movs	r0, #7
   1d7ce:	e796      	b.n	1d6fe <__gxx_personality_v0+0x292>
   1d7d0:	2302      	movs	r3, #2
   1d7d2:	e662      	b.n	1d49a <__gxx_personality_v0+0x2e>
   1d7d4:	7862      	ldrb	r2, [r4, #1]
   1d7d6:	7823      	ldrb	r3, [r4, #0]
   1d7d8:	78a1      	ldrb	r1, [r4, #2]
   1d7da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d7de:	78e2      	ldrb	r2, [r4, #3]
   1d7e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d7e4:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1d7e8:	3408      	adds	r4, #8
   1d7ea:	e6b5      	b.n	1d558 <__gxx_personality_v0+0xec>
   1d7ec:	2008      	movs	r0, #8
   1d7ee:	e786      	b.n	1d6fe <__gxx_personality_v0+0x292>
   1d7f0:	7862      	ldrb	r2, [r4, #1]
   1d7f2:	7823      	ldrb	r3, [r4, #0]
   1d7f4:	78a1      	ldrb	r1, [r4, #2]
   1d7f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d7fa:	78e2      	ldrb	r2, [r4, #3]
   1d7fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d800:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1d804:	3408      	adds	r4, #8
   1d806:	e6e8      	b.n	1d5da <__gxx_personality_v0+0x16e>
   1d808:	7862      	ldrb	r2, [r4, #1]
   1d80a:	7823      	ldrb	r3, [r4, #0]
   1d80c:	78a1      	ldrb	r1, [r4, #2]
   1d80e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d812:	78e2      	ldrb	r2, [r4, #3]
   1d814:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d818:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1d81c:	3408      	adds	r4, #8
   1d81e:	e71e      	b.n	1d65e <__gxx_personality_v0+0x1f2>
   1d820:	2700      	movs	r7, #0
   1d822:	4639      	mov	r1, r7
   1d824:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d828:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d82c:	408b      	lsls	r3, r1
   1d82e:	3107      	adds	r1, #7
   1d830:	431f      	orrs	r7, r3
   1d832:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d836:	d1f5      	bne.n	1d824 <__gxx_personality_v0+0x3b8>
   1d838:	e68e      	b.n	1d558 <__gxx_personality_v0+0xec>
   1d83a:	7822      	ldrb	r2, [r4, #0]
   1d83c:	7863      	ldrb	r3, [r4, #1]
   1d83e:	3402      	adds	r4, #2
   1d840:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1d844:	e688      	b.n	1d558 <__gxx_personality_v0+0xec>
   1d846:	7823      	ldrb	r3, [r4, #0]
   1d848:	7862      	ldrb	r2, [r4, #1]
   1d84a:	3402      	adds	r4, #2
   1d84c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d850:	041b      	lsls	r3, r3, #16
   1d852:	141f      	asrs	r7, r3, #16
   1d854:	e680      	b.n	1d558 <__gxx_personality_v0+0xec>
   1d856:	2700      	movs	r7, #0
   1d858:	4639      	mov	r1, r7
   1d85a:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d85e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d862:	408b      	lsls	r3, r1
   1d864:	3107      	adds	r1, #7
   1d866:	431f      	orrs	r7, r3
   1d868:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d86c:	d1f5      	bne.n	1d85a <__gxx_personality_v0+0x3ee>
   1d86e:	291f      	cmp	r1, #31
   1d870:	f63f ae72 	bhi.w	1d558 <__gxx_personality_v0+0xec>
   1d874:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d878:	f43f ae6e 	beq.w	1d558 <__gxx_personality_v0+0xec>
   1d87c:	2201      	movs	r2, #1
   1d87e:	fa12 f301 	lsls.w	r3, r2, r1
   1d882:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d886:	ea43 0707 	orr.w	r7, r3, r7
   1d88a:	e665      	b.n	1d558 <__gxx_personality_v0+0xec>
   1d88c:	7822      	ldrb	r2, [r4, #0]
   1d88e:	7863      	ldrb	r3, [r4, #1]
   1d890:	3402      	adds	r4, #2
   1d892:	ea42 2603 	orr.w	r6, r2, r3, lsl #8
   1d896:	e6a0      	b.n	1d5da <__gxx_personality_v0+0x16e>
   1d898:	2600      	movs	r6, #0
   1d89a:	4631      	mov	r1, r6
   1d89c:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d8a0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d8a4:	408b      	lsls	r3, r1
   1d8a6:	3107      	adds	r1, #7
   1d8a8:	431e      	orrs	r6, r3
   1d8aa:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d8ae:	d1f5      	bne.n	1d89c <__gxx_personality_v0+0x430>
   1d8b0:	e693      	b.n	1d5da <__gxx_personality_v0+0x16e>
   1d8b2:	7823      	ldrb	r3, [r4, #0]
   1d8b4:	7862      	ldrb	r2, [r4, #1]
   1d8b6:	3402      	adds	r4, #2
   1d8b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d8bc:	041b      	lsls	r3, r3, #16
   1d8be:	141e      	asrs	r6, r3, #16
   1d8c0:	e68b      	b.n	1d5da <__gxx_personality_v0+0x16e>
   1d8c2:	2600      	movs	r6, #0
   1d8c4:	4631      	mov	r1, r6
   1d8c6:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d8ca:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d8ce:	408b      	lsls	r3, r1
   1d8d0:	3107      	adds	r1, #7
   1d8d2:	431e      	orrs	r6, r3
   1d8d4:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d8d8:	d1f5      	bne.n	1d8c6 <__gxx_personality_v0+0x45a>
   1d8da:	291f      	cmp	r1, #31
   1d8dc:	f63f ae7d 	bhi.w	1d5da <__gxx_personality_v0+0x16e>
   1d8e0:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d8e4:	f43f ae79 	beq.w	1d5da <__gxx_personality_v0+0x16e>
   1d8e8:	2201      	movs	r2, #1
   1d8ea:	fa12 f301 	lsls.w	r3, r2, r1
   1d8ee:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d8f2:	ea43 0606 	orr.w	r6, r3, r6
   1d8f6:	e670      	b.n	1d5da <__gxx_personality_v0+0x16e>
   1d8f8:	7822      	ldrb	r2, [r4, #0]
   1d8fa:	7863      	ldrb	r3, [r4, #1]
   1d8fc:	3402      	adds	r4, #2
   1d8fe:	ea42 2503 	orr.w	r5, r2, r3, lsl #8
   1d902:	e6ac      	b.n	1d65e <__gxx_personality_v0+0x1f2>
   1d904:	2500      	movs	r5, #0
   1d906:	4629      	mov	r1, r5
   1d908:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d90c:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d910:	408b      	lsls	r3, r1
   1d912:	3107      	adds	r1, #7
   1d914:	431d      	orrs	r5, r3
   1d916:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d91a:	d1f5      	bne.n	1d908 <__gxx_personality_v0+0x49c>
   1d91c:	e69f      	b.n	1d65e <__gxx_personality_v0+0x1f2>
   1d91e:	7823      	ldrb	r3, [r4, #0]
   1d920:	7862      	ldrb	r2, [r4, #1]
   1d922:	3402      	adds	r4, #2
   1d924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d928:	041b      	lsls	r3, r3, #16
   1d92a:	141d      	asrs	r5, r3, #16
   1d92c:	e697      	b.n	1d65e <__gxx_personality_v0+0x1f2>
   1d92e:	2500      	movs	r5, #0
   1d930:	4629      	mov	r1, r5
   1d932:	f814 2b01 	ldrb.w	r2, [r4], #1
   1d936:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d93a:	408b      	lsls	r3, r1
   1d93c:	3107      	adds	r1, #7
   1d93e:	431d      	orrs	r5, r3
   1d940:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d944:	d1f5      	bne.n	1d932 <__gxx_personality_v0+0x4c6>
   1d946:	291f      	cmp	r1, #31
   1d948:	f63f ae89 	bhi.w	1d65e <__gxx_personality_v0+0x1f2>
   1d94c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d950:	f43f ae85 	beq.w	1d65e <__gxx_personality_v0+0x1f2>
   1d954:	2201      	movs	r2, #1
   1d956:	fa12 f301 	lsls.w	r3, r2, r1
   1d95a:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1d95e:	ea43 0505 	orr.w	r5, r3, r5
   1d962:	e67c      	b.n	1d65e <__gxx_personality_v0+0x1f2>
   1d964:	f04f 0800 	mov.w	r8, #0	; 0x0
   1d968:	2401      	movs	r4, #1
   1d96a:	4647      	mov	r7, r8
   1d96c:	9b06      	ldr	r3, [sp, #24]
   1d96e:	f013 0f01 	tst.w	r3, #1	; 0x1
   1d972:	f43f aef4 	beq.w	1d75e <__gxx_personality_v0+0x2f2>
   1d976:	2c02      	cmp	r4, #2
   1d978:	f43f aeba 	beq.w	1d6f0 <__gxx_personality_v0+0x284>
   1d97c:	2100      	movs	r1, #0
   1d97e:	220d      	movs	r2, #13
   1d980:	460b      	mov	r3, r1
   1d982:	4648      	mov	r0, r9
   1d984:	9c11      	ldr	r4, [sp, #68]
   1d986:	f8cd b000 	str.w	fp, [sp]
   1d98a:	f7fd fc83 	bl	1b294 <_Unwind_VRS_Get>
   1d98e:	9b0f      	ldr	r3, [sp, #60]
   1d990:	9a04      	ldr	r2, [sp, #16]
   1d992:	f8ca 3020 	str.w	r3, [sl, #32]
   1d996:	f8ca 4024 	str.w	r4, [sl, #36]
   1d99a:	f8ca 7028 	str.w	r7, [sl, #40]
   1d99e:	f8ca 202c 	str.w	r2, [sl, #44]
   1d9a2:	f8ca 8030 	str.w	r8, [sl, #48]
   1d9a6:	2006      	movs	r0, #6
   1d9a8:	e6a9      	b.n	1d6fe <__gxx_personality_v0+0x292>
   1d9aa:	4650      	mov	r0, sl
   1d9ac:	f000 f9c4 	bl	1dd38 <__cxa_call_terminate>
   1d9b0:	4650      	mov	r0, sl
   1d9b2:	f7ff fba1 	bl	1d0f8 <__cxa_begin_cleanup>
   1d9b6:	2007      	movs	r0, #7
   1d9b8:	e6a1      	b.n	1d6fe <__gxx_personality_v0+0x292>
   1d9ba:	2d00      	cmp	r5, #0
   1d9bc:	f040 80a0 	bne.w	1db00 <__gxx_personality_v0+0x694>
   1d9c0:	46a8      	mov	r8, r5
   1d9c2:	2800      	cmp	r0, #0
   1d9c4:	f000 809a 	beq.w	1dafc <__gxx_personality_v0+0x690>
   1d9c8:	9b0d      	ldr	r3, [sp, #52]
   1d9ca:	1e42      	subs	r2, r0, #1
   1d9cc:	441a      	add	r2, r3
   1d9ce:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1d9d2:	f43f ae8d 	beq.w	1d6f0 <__gxx_personality_v0+0x284>
   1d9d6:	2a00      	cmp	r2, #0
   1d9d8:	f000 809e 	beq.w	1db18 <__gxx_personality_v0+0x6ac>
   1d9dc:	9b06      	ldr	r3, [sp, #24]
   1d9de:	f013 0308 	ands.w	r3, r3, #8	; 0x8
   1d9e2:	9303      	str	r3, [sp, #12]
   1d9e4:	d001      	beq.n	1d9ea <__gxx_personality_v0+0x57e>
   1d9e6:	2300      	movs	r3, #0
   1d9e8:	9311      	str	r3, [sp, #68]
   1d9ea:	2300      	movs	r3, #0
   1d9ec:	9305      	str	r3, [sp, #20]
   1d9ee:	2000      	movs	r0, #0
   1d9f0:	4615      	mov	r5, r2
   1d9f2:	4601      	mov	r1, r0
   1d9f4:	f815 2b01 	ldrb.w	r2, [r5], #1
   1d9f8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d9fc:	408b      	lsls	r3, r1
   1d9fe:	3107      	adds	r1, #7
   1da00:	4318      	orrs	r0, r3
   1da02:	f012 0f80 	tst.w	r2, #128	; 0x80
   1da06:	d1f5      	bne.n	1d9f4 <__gxx_personality_v0+0x588>
   1da08:	291f      	cmp	r1, #31
   1da0a:	d809      	bhi.n	1da20 <__gxx_personality_v0+0x5b4>
   1da0c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1da10:	d006      	beq.n	1da20 <__gxx_personality_v0+0x5b4>
   1da12:	2201      	movs	r2, #1
   1da14:	fa12 f301 	lsls.w	r3, r2, r1
   1da18:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1da1c:	ea43 0000 	orr.w	r0, r3, r0
   1da20:	2400      	movs	r4, #0
   1da22:	4607      	mov	r7, r0
   1da24:	46a4      	mov	ip, r4
   1da26:	4622      	mov	r2, r4
   1da28:	5ca9      	ldrb	r1, [r5, r2]
   1da2a:	3201      	adds	r2, #1
   1da2c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1da30:	fa03 f30c 	lsl.w	r3, r3, ip
   1da34:	431c      	orrs	r4, r3
   1da36:	f011 0f80 	tst.w	r1, #128	; 0x80
   1da3a:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1da3e:	d1f3      	bne.n	1da28 <__gxx_personality_v0+0x5bc>
   1da40:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1da44:	d809      	bhi.n	1da5a <__gxx_personality_v0+0x5ee>
   1da46:	f011 0f40 	tst.w	r1, #64	; 0x40
   1da4a:	d006      	beq.n	1da5a <__gxx_personality_v0+0x5ee>
   1da4c:	2201      	movs	r2, #1
   1da4e:	fa02 f30c 	lsl.w	r3, r2, ip
   1da52:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1da56:	ea43 0404 	orr.w	r4, r3, r4
   1da5a:	2800      	cmp	r0, #0
   1da5c:	d106      	bne.n	1da6c <__gxx_personality_v0+0x600>
   1da5e:	2301      	movs	r3, #1
   1da60:	9305      	str	r3, [sp, #20]
   1da62:	2c00      	cmp	r4, #0
   1da64:	d054      	beq.n	1db10 <__gxx_personality_v0+0x6a4>
   1da66:	eb05 0204 	add.w	r2, r5, r4
   1da6a:	e7c0      	b.n	1d9ee <__gxx_personality_v0+0x582>
   1da6c:	dd15      	ble.n	1da9a <__gxx_personality_v0+0x62e>
   1da6e:	0083      	lsls	r3, r0, #2
   1da70:	9a0c      	ldr	r2, [sp, #48]
   1da72:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1da76:	58d0      	ldr	r0, [r2, r3]
   1da78:	eb02 0103 	add.w	r1, r2, r3
   1da7c:	b158      	cbz	r0, 1da96 <__gxx_personality_v0+0x62a>
   1da7e:	1841      	adds	r1, r0, r1
   1da80:	d009      	beq.n	1da96 <__gxx_personality_v0+0x62a>
   1da82:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1da86:	d0ec      	beq.n	1da62 <__gxx_personality_v0+0x5f6>
   1da88:	4650      	mov	r0, sl
   1da8a:	2200      	movs	r2, #0
   1da8c:	ab11      	add	r3, sp, #68
   1da8e:	f7ff fb69 	bl	1d164 <__cxa_type_match>
   1da92:	2800      	cmp	r0, #0
   1da94:	d0e5      	beq.n	1da62 <__gxx_personality_v0+0x5f6>
   1da96:	2403      	movs	r4, #3
   1da98:	e768      	b.n	1d96c <__gxx_personality_v0+0x500>
   1da9a:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1da9e:	d021      	beq.n	1dae4 <__gxx_personality_v0+0x678>
   1daa0:	9a03      	ldr	r2, [sp, #12]
   1daa2:	b9fa      	cbnz	r2, 1dae4 <__gxx_personality_v0+0x678>
   1daa4:	9b11      	ldr	r3, [sp, #68]
   1daa6:	9a0c      	ldr	r2, [sp, #48]
   1daa8:	ea6f 0000 	mvn.w	r0, r0
   1daac:	9310      	str	r3, [sp, #64]
   1daae:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1dab2:	0081      	lsls	r1, r0, #2
   1dab4:	4411      	add	r1, r2
   1dab6:	b33b      	cbz	r3, 1db08 <__gxx_personality_v0+0x69c>
   1dab8:	460e      	mov	r6, r1
   1daba:	e002      	b.n	1dac2 <__gxx_personality_v0+0x656>
   1dabc:	f856 3f04 	ldr.w	r3, [r6, #4]!
   1dac0:	b313      	cbz	r3, 1db08 <__gxx_personality_v0+0x69c>
   1dac2:	6831      	ldr	r1, [r6, #0]
   1dac4:	b101      	cbz	r1, 1dac8 <__gxx_personality_v0+0x65c>
   1dac6:	4431      	add	r1, r6
   1dac8:	4650      	mov	r0, sl
   1daca:	2200      	movs	r2, #0
   1dacc:	ab10      	add	r3, sp, #64
   1dace:	f7ff fb49 	bl	1d164 <__cxa_type_match>
   1dad2:	2800      	cmp	r0, #0
   1dad4:	d0f2      	beq.n	1dabc <__gxx_personality_v0+0x650>
   1dad6:	2101      	movs	r1, #1
   1dad8:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1dadc:	2800      	cmp	r0, #0
   1dade:	d0c0      	beq.n	1da62 <__gxx_personality_v0+0x5f6>
   1dae0:	2403      	movs	r4, #3
   1dae2:	e743      	b.n	1d96c <__gxx_personality_v0+0x500>
   1dae4:	9a0c      	ldr	r2, [sp, #48]
   1dae6:	ea6f 0300 	mvn.w	r3, r0
   1daea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1daee:	f1d1 0001 	rsbs	r0, r1, #1	; 0x1
   1daf2:	bf38      	it	cc
   1daf4:	2000      	movcc	r0, #0
   1daf6:	2800      	cmp	r0, #0
   1daf8:	d0b3      	beq.n	1da62 <__gxx_personality_v0+0x5f6>
   1dafa:	e7f1      	b.n	1dae0 <__gxx_personality_v0+0x674>
   1dafc:	4602      	mov	r2, r0
   1dafe:	e766      	b.n	1d9ce <__gxx_personality_v0+0x562>
   1db00:	9b0a      	ldr	r3, [sp, #40]
   1db02:	eb05 0803 	add.w	r8, r5, r3
   1db06:	e75c      	b.n	1d9c2 <__gxx_personality_v0+0x556>
   1db08:	2100      	movs	r1, #0
   1db0a:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1db0e:	e7e5      	b.n	1dadc <__gxx_personality_v0+0x670>
   1db10:	9a05      	ldr	r2, [sp, #20]
   1db12:	2a00      	cmp	r2, #0
   1db14:	f43f adec 	beq.w	1d6f0 <__gxx_personality_v0+0x284>
   1db18:	2402      	movs	r4, #2
   1db1a:	2700      	movs	r7, #0
   1db1c:	e726      	b.n	1d96c <__gxx_personality_v0+0x500>
   1db1e:	f7ff fae3 	bl	1d0e8 <_ZSt10unexpectedv>
   1db22:	f7ff fad3 	bl	1d0cc <_ZSt9terminatev>
   1db26:	2c01      	cmp	r4, #1
   1db28:	f43f af3f 	beq.w	1d9aa <__gxx_personality_v0+0x53e>
   1db2c:	2f00      	cmp	r7, #0
   1db2e:	f6bf ae21 	bge.w	1d774 <__gxx_personality_v0+0x308>
   1db32:	9904      	ldr	r1, [sp, #16]
   1db34:	aa09      	add	r2, sp, #36
   1db36:	4648      	mov	r0, r9
   1db38:	f7ff fbd0 	bl	1d2dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1db3c:	ea6f 0107 	mvn.w	r1, r7
   1db40:	9b0c      	ldr	r3, [sp, #48]
   1db42:	008a      	lsls	r2, r1, #2
   1db44:	eb03 0002 	add.w	r0, r3, r2
   1db48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1db4c:	b183      	cbz	r3, 1db70 <__gxx_personality_v0+0x704>
   1db4e:	462a      	mov	r2, r5
   1db50:	3201      	adds	r2, #1
   1db52:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   1db56:	2b00      	cmp	r3, #0
   1db58:	d1fa      	bne.n	1db50 <__gxx_personality_v0+0x6e4>
   1db5a:	f8ca 2028 	str.w	r2, [sl, #40]
   1db5e:	2300      	movs	r3, #0
   1db60:	2204      	movs	r2, #4
   1db62:	f8ca 302c 	str.w	r3, [sl, #44]
   1db66:	f8ca 2030 	str.w	r2, [sl, #48]
   1db6a:	f8ca 0034 	str.w	r0, [sl, #52]
   1db6e:	e601      	b.n	1d774 <__gxx_personality_v0+0x308>
   1db70:	461a      	mov	r2, r3
   1db72:	e7f2      	b.n	1db5a <__gxx_personality_v0+0x6ee>
   1db74:	f000 f9de 	bl	1df34 <__cxa_begin_catch>
   1db78:	f7ff faa8 	bl	1d0cc <_ZSt9terminatev>
   1db7c:	4604      	mov	r4, r0
   1db7e:	f000 f991 	bl	1dea4 <__cxa_end_catch>
   1db82:	4620      	mov	r0, r4
   1db84:	f7f9 fd84 	bl	17690 <__cxa_end_cleanup>

0001db88 <__cxa_bad_typeid>:
   1db88:	b500      	push	{lr}
   1db8a:	2004      	movs	r0, #4
   1db8c:	b081      	sub	sp, #4
   1db8e:	f000 fccb 	bl	1e528 <__cxa_allocate_exception>
   1db92:	4b03      	ldr	r3, [pc, #12]	(1dba0 <__cxa_bad_typeid+0x18>)
   1db94:	4903      	ldr	r1, [pc, #12]	(1dba4 <__cxa_bad_typeid+0x1c>)
   1db96:	6003      	str	r3, [r0, #0]
   1db98:	4a03      	ldr	r2, [pc, #12]	(1dba8 <__cxa_bad_typeid+0x20>)
   1db9a:	f000 fc53 	bl	1e444 <__cxa_throw>
   1db9e:	46c0      	nop			(mov r8, r8)
   1dba0:	000226d8 	.word	0x000226d8
   1dba4:	000226f8 	.word	0x000226f8
   1dba8:	0001dbd9 	.word	0x0001dbd9

0001dbac <__cxa_bad_cast>:
   1dbac:	b500      	push	{lr}
   1dbae:	2004      	movs	r0, #4
   1dbb0:	b081      	sub	sp, #4
   1dbb2:	f000 fcb9 	bl	1e528 <__cxa_allocate_exception>
   1dbb6:	4b03      	ldr	r3, [pc, #12]	(1dbc4 <__cxa_bad_cast+0x18>)
   1dbb8:	4903      	ldr	r1, [pc, #12]	(1dbc8 <__cxa_bad_cast+0x1c>)
   1dbba:	6003      	str	r3, [r0, #0]
   1dbbc:	4a03      	ldr	r2, [pc, #12]	(1dbcc <__cxa_bad_cast+0x20>)
   1dbbe:	f000 fc41 	bl	1e444 <__cxa_throw>
   1dbc2:	46c0      	nop			(mov r8, r8)
   1dbc4:	000227b0 	.word	0x000227b0
   1dbc8:	000227cc 	.word	0x000227cc
   1dbcc:	0001dfd5 	.word	0x0001dfd5

0001dbd0 <_ZNKSt10bad_typeid4whatEv>:
   1dbd0:	4800      	ldr	r0, [pc, #0]	(1dbd4 <_ZNKSt10bad_typeid4whatEv+0x4>)
   1dbd2:	4770      	bx	lr
   1dbd4:	000226bc 	.word	0x000226bc

0001dbd8 <_ZNSt10bad_typeidD1Ev>:
   1dbd8:	4b03      	ldr	r3, [pc, #12]	(1dbe8 <_ZNSt10bad_typeidD1Ev+0x10>)
   1dbda:	b510      	push	{r4, lr}
   1dbdc:	6003      	str	r3, [r0, #0]
   1dbde:	4604      	mov	r4, r0
   1dbe0:	f000 fad8 	bl	1e194 <_ZNSt9exceptionD2Ev>
   1dbe4:	4620      	mov	r0, r4
   1dbe6:	bd10      	pop	{r4, pc}
   1dbe8:	000226d8 	.word	0x000226d8

0001dbec <_ZNSt10bad_typeidD2Ev>:
   1dbec:	4b03      	ldr	r3, [pc, #12]	(1dbfc <_ZNSt10bad_typeidD2Ev+0x10>)
   1dbee:	b510      	push	{r4, lr}
   1dbf0:	6003      	str	r3, [r0, #0]
   1dbf2:	4604      	mov	r4, r0
   1dbf4:	f000 face 	bl	1e194 <_ZNSt9exceptionD2Ev>
   1dbf8:	4620      	mov	r0, r4
   1dbfa:	bd10      	pop	{r4, pc}
   1dbfc:	000226d8 	.word	0x000226d8

0001dc00 <_ZNSt10bad_typeidD0Ev>:
   1dc00:	4b05      	ldr	r3, [pc, #20]	(1dc18 <_ZNSt10bad_typeidD0Ev+0x18>)
   1dc02:	b510      	push	{r4, lr}
   1dc04:	6003      	str	r3, [r0, #0]
   1dc06:	4604      	mov	r4, r0
   1dc08:	f000 fac4 	bl	1e194 <_ZNSt9exceptionD2Ev>
   1dc0c:	4620      	mov	r0, r4
   1dc0e:	f7f0 fdf1 	bl	e7f4 <_ZdlPv>
   1dc12:	4620      	mov	r0, r4
   1dc14:	bd10      	pop	{r4, pc}
   1dc16:	46c0      	nop			(mov r8, r8)
   1dc18:	000226d8 	.word	0x000226d8

0001dc1c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1dc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc1e:	4b3f      	ldr	r3, [pc, #252]	(1dd1c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1dc20:	b083      	sub	sp, #12
   1dc22:	781c      	ldrb	r4, [r3, #0]
   1dc24:	2c00      	cmp	r4, #0
   1dc26:	d13f      	bne.n	1dca8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1dc28:	2501      	movs	r5, #1
   1dc2a:	701d      	strb	r5, [r3, #0]
   1dc2c:	f000 fbc8 	bl	1e3c0 <__cxa_current_exception_type>
   1dc30:	2800      	cmp	r0, #0
   1dc32:	d043      	beq.n	1dcbc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa0>
   1dc34:	6846      	ldr	r6, [r0, #4]
   1dc36:	ab02      	add	r3, sp, #8
   1dc38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dc3c:	f843 2d04 	str.w	r2, [r3, #-4]!
   1dc40:	4621      	mov	r1, r4
   1dc42:	4622      	mov	r2, r4
   1dc44:	4630      	mov	r0, r6
   1dc46:	f7fc facb 	bl	1a1e0 <__cxa_demangle>
   1dc4a:	4c35      	ldr	r4, [pc, #212]	(1dd20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1dc4c:	4607      	mov	r7, r0
   1dc4e:	6822      	ldr	r2, [r4, #0]
   1dc50:	4834      	ldr	r0, [pc, #208]	(1dd24 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   1dc52:	6893      	ldr	r3, [r2, #8]
   1dc54:	4629      	mov	r1, r5
   1dc56:	2230      	movs	r2, #48
   1dc58:	f002 fc08 	bl	2046c <fwrite>
   1dc5c:	9b01      	ldr	r3, [sp, #4]
   1dc5e:	b17b      	cbz	r3, 1dc80 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x64>
   1dc60:	6823      	ldr	r3, [r4, #0]
   1dc62:	4630      	mov	r0, r6
   1dc64:	6899      	ldr	r1, [r3, #8]
   1dc66:	f002 fa47 	bl	200f8 <fputs>
   1dc6a:	6822      	ldr	r2, [r4, #0]
   1dc6c:	482e      	ldr	r0, [pc, #184]	(1dd28 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1dc6e:	6893      	ldr	r3, [r2, #8]
   1dc70:	2101      	movs	r1, #1
   1dc72:	2202      	movs	r2, #2
   1dc74:	f002 fbfa 	bl	2046c <fwrite>
   1dc78:	9b01      	ldr	r3, [sp, #4]
   1dc7a:	b183      	cbz	r3, 1dc9e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x82>
   1dc7c:	f000 fbaa 	bl	1e3d4 <__cxa_rethrow>
   1dc80:	6823      	ldr	r3, [r4, #0]
   1dc82:	4638      	mov	r0, r7
   1dc84:	6899      	ldr	r1, [r3, #8]
   1dc86:	f002 fa37 	bl	200f8 <fputs>
   1dc8a:	6822      	ldr	r2, [r4, #0]
   1dc8c:	4826      	ldr	r0, [pc, #152]	(1dd28 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1dc8e:	6893      	ldr	r3, [r2, #8]
   1dc90:	2101      	movs	r1, #1
   1dc92:	2202      	movs	r2, #2
   1dc94:	f002 fbea 	bl	2046c <fwrite>
   1dc98:	9b01      	ldr	r3, [sp, #4]
   1dc9a:	2b00      	cmp	r3, #0
   1dc9c:	d1ee      	bne.n	1dc7c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x60>
   1dc9e:	4638      	mov	r0, r7
   1dca0:	f002 fbf6 	bl	20490 <free>
   1dca4:	f000 fb96 	bl	1e3d4 <__cxa_rethrow>
   1dca8:	4b1d      	ldr	r3, [pc, #116]	(1dd20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1dcaa:	2101      	movs	r1, #1
   1dcac:	681a      	ldr	r2, [r3, #0]
   1dcae:	481f      	ldr	r0, [pc, #124]	(1dd2c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
   1dcb0:	6893      	ldr	r3, [r2, #8]
   1dcb2:	221d      	movs	r2, #29
   1dcb4:	f002 fbda 	bl	2046c <fwrite>
   1dcb8:	f002 f9a4 	bl	20004 <abort>
   1dcbc:	4b18      	ldr	r3, [pc, #96]	(1dd20 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1dcbe:	4629      	mov	r1, r5
   1dcc0:	681a      	ldr	r2, [r3, #0]
   1dcc2:	481b      	ldr	r0, [pc, #108]	(1dd30 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
   1dcc4:	6893      	ldr	r3, [r2, #8]
   1dcc6:	222d      	movs	r2, #45
   1dcc8:	f002 fbd0 	bl	2046c <fwrite>
   1dccc:	f002 f99a 	bl	20004 <abort>
   1dcd0:	2902      	cmp	r1, #2
   1dcd2:	d005      	beq.n	1dce0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc4>
   1dcd4:	f000 f92e 	bl	1df34 <__cxa_begin_catch>
   1dcd8:	f000 f8e4 	bl	1dea4 <__cxa_end_catch>
   1dcdc:	f002 f992 	bl	20004 <abort>
   1dce0:	f000 f928 	bl	1df34 <__cxa_begin_catch>
   1dce4:	6803      	ldr	r3, [r0, #0]
   1dce6:	689a      	ldr	r2, [r3, #8]
   1dce8:	4790      	blx	r2
   1dcea:	6822      	ldr	r2, [r4, #0]
   1dcec:	4605      	mov	r5, r0
   1dcee:	6893      	ldr	r3, [r2, #8]
   1dcf0:	4810      	ldr	r0, [pc, #64]	(1dd34 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x118>)
   1dcf2:	2101      	movs	r1, #1
   1dcf4:	220b      	movs	r2, #11
   1dcf6:	f002 fbb9 	bl	2046c <fwrite>
   1dcfa:	6823      	ldr	r3, [r4, #0]
   1dcfc:	4628      	mov	r0, r5
   1dcfe:	6899      	ldr	r1, [r3, #8]
   1dd00:	f002 f9fa 	bl	200f8 <fputs>
   1dd04:	6823      	ldr	r3, [r4, #0]
   1dd06:	200a      	movs	r0, #10
   1dd08:	6899      	ldr	r1, [r3, #8]
   1dd0a:	f002 f9ab 	bl	20064 <fputc>
   1dd0e:	e7e3      	b.n	1dcd8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
   1dd10:	4605      	mov	r5, r0
   1dd12:	f000 f8c7 	bl	1dea4 <__cxa_end_catch>
   1dd16:	4628      	mov	r0, r5
   1dd18:	f7f9 fcba 	bl	17690 <__cxa_end_cleanup>
   1dd1c:	20000684 	.word	0x20000684
   1dd20:	20000044 	.word	0x20000044
   1dd24:	00022724 	.word	0x00022724
   1dd28:	00022758 	.word	0x00022758
   1dd2c:	00022704 	.word	0x00022704
   1dd30:	00022768 	.word	0x00022768
   1dd34:	0002275c 	.word	0x0002275c

0001dd38 <__cxa_call_terminate>:
   1dd38:	b510      	push	{r4, lr}
   1dd3a:	4604      	mov	r4, r0
   1dd3c:	b120      	cbz	r0, 1dd48 <__cxa_call_terminate+0x10>
   1dd3e:	f000 f8f9 	bl	1df34 <__cxa_begin_catch>
   1dd42:	7823      	ldrb	r3, [r4, #0]
   1dd44:	2b47      	cmp	r3, #71
   1dd46:	d001      	beq.n	1dd4c <__cxa_call_terminate+0x14>
   1dd48:	f7ff f9c0 	bl	1d0cc <_ZSt9terminatev>
   1dd4c:	7863      	ldrb	r3, [r4, #1]
   1dd4e:	2b4e      	cmp	r3, #78
   1dd50:	d1fa      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd52:	78a3      	ldrb	r3, [r4, #2]
   1dd54:	2b55      	cmp	r3, #85
   1dd56:	d1f7      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd58:	78e3      	ldrb	r3, [r4, #3]
   1dd5a:	2b43      	cmp	r3, #67
   1dd5c:	d1f4      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd5e:	7923      	ldrb	r3, [r4, #4]
   1dd60:	2b43      	cmp	r3, #67
   1dd62:	d1f1      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd64:	7963      	ldrb	r3, [r4, #5]
   1dd66:	2b2b      	cmp	r3, #43
   1dd68:	d1ee      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd6a:	79a3      	ldrb	r3, [r4, #6]
   1dd6c:	2b2b      	cmp	r3, #43
   1dd6e:	d1eb      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd70:	79e3      	ldrb	r3, [r4, #7]
   1dd72:	2b00      	cmp	r3, #0
   1dd74:	d1e8      	bne.n	1dd48 <__cxa_call_terminate+0x10>
   1dd76:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1dd7a:	f7ff f999 	bl	1d0b0 <_ZN10__cxxabiv111__terminateEPFvvE>
   1dd7e:	46c0      	nop			(mov r8, r8)

0001dd80 <__cxa_call_unexpected>:
   1dd80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd84:	7803      	ldrb	r3, [r0, #0]
   1dd86:	b085      	sub	sp, #20
   1dd88:	2b47      	cmp	r3, #71
   1dd8a:	d00a      	beq.n	1dda2 <__cxa_call_unexpected+0x22>
   1dd8c:	2400      	movs	r4, #0
   1dd8e:	4627      	mov	r7, r4
   1dd90:	46a2      	mov	sl, r4
   1dd92:	46a0      	mov	r8, r4
   1dd94:	2501      	movs	r5, #1
   1dd96:	4626      	mov	r6, r4
   1dd98:	f000 f8cc 	bl	1df34 <__cxa_begin_catch>
   1dd9c:	b30d      	cbz	r5, 1dde2 <__cxa_call_unexpected+0x62>
   1dd9e:	f7ff f9a3 	bl	1d0e8 <_ZSt10unexpectedv>
   1dda2:	7843      	ldrb	r3, [r0, #1]
   1dda4:	2b4e      	cmp	r3, #78
   1dda6:	d1f1      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1dda8:	7883      	ldrb	r3, [r0, #2]
   1ddaa:	2b55      	cmp	r3, #85
   1ddac:	d1ee      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1ddae:	78c3      	ldrb	r3, [r0, #3]
   1ddb0:	2b43      	cmp	r3, #67
   1ddb2:	d1eb      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1ddb4:	7903      	ldrb	r3, [r0, #4]
   1ddb6:	2b43      	cmp	r3, #67
   1ddb8:	d1e8      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1ddba:	7943      	ldrb	r3, [r0, #5]
   1ddbc:	2b2b      	cmp	r3, #43
   1ddbe:	d1e5      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1ddc0:	7983      	ldrb	r3, [r0, #6]
   1ddc2:	2b2b      	cmp	r3, #43
   1ddc4:	d1e2      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1ddc6:	79c2      	ldrb	r2, [r0, #7]
   1ddc8:	2a00      	cmp	r2, #0
   1ddca:	d1df      	bne.n	1dd8c <__cxa_call_unexpected+0xc>
   1ddcc:	f1a0 0320 	sub.w	r3, r0, #32	; 0x20
   1ddd0:	689e      	ldr	r6, [r3, #8]
   1ddd2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1ddd6:	f8d0 8028 	ldr.w	r8, [r0, #40]
   1ddda:	6b04      	ldr	r4, [r0, #48]
   1dddc:	6b47      	ldr	r7, [r0, #52]
   1ddde:	4615      	mov	r5, r2
   1dde0:	e7da      	b.n	1dd98 <__cxa_call_unexpected+0x18>
   1dde2:	4630      	mov	r0, r6
   1dde4:	f7ff f97a 	bl	1d0dc <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1dde8:	f000 f8a4 	bl	1df34 <__cxa_begin_catch>
   1ddec:	2d00      	cmp	r5, #0
   1ddee:	d135      	bne.n	1de5c <__cxa_call_unexpected+0xdc>
   1ddf0:	f000 fb72 	bl	1e4d8 <__cxa_get_globals_fast>
   1ddf4:	6800      	ldr	r0, [r0, #0]
   1ddf6:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1ddfa:	f100 0378 	add.w	r3, r0, #120	; 0x78
   1ddfe:	9303      	str	r3, [sp, #12]
   1de00:	dd3b      	ble.n	1de7a <__cxa_call_unexpected+0xfa>
   1de02:	3020      	adds	r0, #32
   1de04:	463e      	mov	r6, r7
   1de06:	f024 0b03 	bic.w	fp, r4, #3	; 0x3
   1de0a:	9001      	str	r0, [sp, #4]
   1de0c:	462f      	mov	r7, r5
   1de0e:	46a9      	mov	r9, r5
   1de10:	6830      	ldr	r0, [r6, #0]
   1de12:	2800      	cmp	r0, #0
   1de14:	d12e      	bne.n	1de74 <__cxa_call_unexpected+0xf4>
   1de16:	4605      	mov	r5, r0
   1de18:	9801      	ldr	r0, [sp, #4]
   1de1a:	4629      	mov	r1, r5
   1de1c:	2200      	movs	r2, #0
   1de1e:	ab03      	add	r3, sp, #12
   1de20:	f7ff f9a0 	bl	1d164 <__cxa_type_match>
   1de24:	4602      	mov	r2, r0
   1de26:	b9d8      	cbnz	r0, 1de60 <__cxa_call_unexpected+0xe0>
   1de28:	682b      	ldr	r3, [r5, #0]
   1de2a:	4628      	mov	r0, r5
   1de2c:	691c      	ldr	r4, [r3, #16]
   1de2e:	4914      	ldr	r1, [pc, #80]	(1de80 <__cxa_call_unexpected+0x100>)
   1de30:	2301      	movs	r3, #1
   1de32:	47a0      	blx	r4
   1de34:	3701      	adds	r7, #1
   1de36:	2800      	cmp	r0, #0
   1de38:	bf18      	it	ne
   1de3a:	f04f 0901 	movne.w	r9, #1	; 0x1
   1de3e:	45b8      	cmp	r8, r7
   1de40:	445e      	add	r6, fp
   1de42:	dce5      	bgt.n	1de10 <__cxa_call_unexpected+0x90>
   1de44:	f1b9 0f00 	cmp.w	r9, #0	; 0x0
   1de48:	d017      	beq.n	1de7a <__cxa_call_unexpected+0xfa>
   1de4a:	2004      	movs	r0, #4
   1de4c:	f000 fb6c 	bl	1e528 <__cxa_allocate_exception>
   1de50:	4b0c      	ldr	r3, [pc, #48]	(1de84 <__cxa_call_unexpected+0x104>)
   1de52:	490b      	ldr	r1, [pc, #44]	(1de80 <__cxa_call_unexpected+0x100>)
   1de54:	6003      	str	r3, [r0, #0]
   1de56:	4a0c      	ldr	r2, [pc, #48]	(1de88 <__cxa_call_unexpected+0x108>)
   1de58:	f000 faf4 	bl	1e444 <__cxa_throw>
   1de5c:	f7ff f936 	bl	1d0cc <_ZSt9terminatev>
   1de60:	f000 fab8 	bl	1e3d4 <__cxa_rethrow>
   1de64:	4606      	mov	r6, r0
   1de66:	f000 f81d 	bl	1dea4 <__cxa_end_catch>
   1de6a:	f000 f81b 	bl	1dea4 <__cxa_end_catch>
   1de6e:	4630      	mov	r0, r6
   1de70:	f7f9 fc0e 	bl	17690 <__cxa_end_cleanup>
   1de74:	eb06 0500 	add.w	r5, r6, r0
   1de78:	e7ce      	b.n	1de18 <__cxa_call_unexpected+0x98>
   1de7a:	4650      	mov	r0, sl
   1de7c:	f7ff f918 	bl	1d0b0 <_ZN10__cxxabiv111__terminateEPFvvE>
   1de80:	00022cf8 	.word	0x00022cf8
   1de84:	00022c68 	.word	0x00022c68
   1de88:	0001e1b9 	.word	0x0001e1b9

0001de8c <__cxa_get_exception_ptr>:
   1de8c:	6a40      	ldr	r0, [r0, #36]
   1de8e:	4770      	bx	lr

0001de90 <_ZSt18uncaught_exceptionv>:
   1de90:	b500      	push	{lr}
   1de92:	b081      	sub	sp, #4
   1de94:	f000 fb24 	bl	1e4e0 <__cxa_get_globals>
   1de98:	6840      	ldr	r0, [r0, #4]
   1de9a:	3800      	subs	r0, #0
   1de9c:	bf18      	it	ne
   1de9e:	2001      	movne	r0, #1
   1dea0:	b001      	add	sp, #4
   1dea2:	bd00      	pop	{pc}

0001dea4 <__cxa_end_catch>:
   1dea4:	b500      	push	{lr}
   1dea6:	b081      	sub	sp, #4
   1dea8:	f000 fb16 	bl	1e4d8 <__cxa_get_globals_fast>
   1deac:	4601      	mov	r1, r0
   1deae:	6800      	ldr	r0, [r0, #0]
   1deb0:	b140      	cbz	r0, 1dec4 <__cxa_end_catch+0x20>
   1deb2:	f890 3020 	ldrb.w	r3, [r0, #32]
   1deb6:	2b47      	cmp	r3, #71
   1deb8:	d006      	beq.n	1dec8 <__cxa_end_catch+0x24>
   1deba:	2300      	movs	r3, #0
   1debc:	600b      	str	r3, [r1, #0]
   1debe:	3020      	adds	r0, #32
   1dec0:	f7fd fa7e 	bl	1b3c0 <_Unwind_DeleteException>
   1dec4:	b001      	add	sp, #4
   1dec6:	bd00      	pop	{pc}
   1dec8:	f890 3021 	ldrb.w	r3, [r0, #33]
   1decc:	2b4e      	cmp	r3, #78
   1dece:	d1f4      	bne.n	1deba <__cxa_end_catch+0x16>
   1ded0:	f890 3022 	ldrb.w	r3, [r0, #34]
   1ded4:	2b55      	cmp	r3, #85
   1ded6:	d1f0      	bne.n	1deba <__cxa_end_catch+0x16>
   1ded8:	f890 3023 	ldrb.w	r3, [r0, #35]
   1dedc:	2b43      	cmp	r3, #67
   1dede:	d1ec      	bne.n	1deba <__cxa_end_catch+0x16>
   1dee0:	f890 3024 	ldrb.w	r3, [r0, #36]
   1dee4:	2b43      	cmp	r3, #67
   1dee6:	d1e8      	bne.n	1deba <__cxa_end_catch+0x16>
   1dee8:	f890 3025 	ldrb.w	r3, [r0, #37]
   1deec:	2b2b      	cmp	r3, #43
   1deee:	d1e4      	bne.n	1deba <__cxa_end_catch+0x16>
   1def0:	f890 3026 	ldrb.w	r3, [r0, #38]
   1def4:	2b2b      	cmp	r3, #43
   1def6:	d1e0      	bne.n	1deba <__cxa_end_catch+0x16>
   1def8:	f890 3027 	ldrb.w	r3, [r0, #39]
   1defc:	2b00      	cmp	r3, #0
   1defe:	d1dc      	bne.n	1deba <__cxa_end_catch+0x16>
   1df00:	6943      	ldr	r3, [r0, #20]
   1df02:	2b00      	cmp	r3, #0
   1df04:	db09      	blt.n	1df1a <__cxa_end_catch+0x76>
   1df06:	f113 32ff 	adds.w	r2, r3, #4294967295	; 0xffffffff
   1df0a:	d00d      	beq.n	1df28 <__cxa_end_catch+0x84>
   1df0c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1df10:	d001      	beq.n	1df16 <__cxa_end_catch+0x72>
   1df12:	6142      	str	r2, [r0, #20]
   1df14:	e7d6      	b.n	1dec4 <__cxa_end_catch+0x20>
   1df16:	f7ff f8d9 	bl	1d0cc <_ZSt9terminatev>
   1df1a:	1c5a      	adds	r2, r3, #1
   1df1c:	bf08      	it	eq
   1df1e:	6903      	ldreq	r3, [r0, #16]
   1df20:	6142      	str	r2, [r0, #20]
   1df22:	bf08      	it	eq
   1df24:	600b      	streq	r3, [r1, #0]
   1df26:	e7cd      	b.n	1dec4 <__cxa_end_catch+0x20>
   1df28:	6903      	ldr	r3, [r0, #16]
   1df2a:	3020      	adds	r0, #32
   1df2c:	600b      	str	r3, [r1, #0]
   1df2e:	f7fd fa47 	bl	1b3c0 <_Unwind_DeleteException>
   1df32:	e7c7      	b.n	1dec4 <__cxa_end_catch+0x20>

0001df34 <__cxa_begin_catch>:
   1df34:	b530      	push	{r4, r5, lr}
   1df36:	b081      	sub	sp, #4
   1df38:	4605      	mov	r5, r0
   1df3a:	f000 fad1 	bl	1e4e0 <__cxa_get_globals>
   1df3e:	462a      	mov	r2, r5
   1df40:	f812 3920 	ldrb.w	r3, [r2], #-32
   1df44:	6801      	ldr	r1, [r0, #0]
   1df46:	2b47      	cmp	r3, #71
   1df48:	d006      	beq.n	1df58 <__cxa_begin_catch+0x24>
   1df4a:	2900      	cmp	r1, #0
   1df4c:	d134      	bne.n	1dfb8 <__cxa_begin_catch+0x84>
   1df4e:	6002      	str	r2, [r0, #0]
   1df50:	460c      	mov	r4, r1
   1df52:	4620      	mov	r0, r4
   1df54:	b001      	add	sp, #4
   1df56:	bd30      	pop	{r4, r5, pc}
   1df58:	f892 3021 	ldrb.w	r3, [r2, #33]
   1df5c:	2b4e      	cmp	r3, #78
   1df5e:	d1f4      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df60:	f892 3022 	ldrb.w	r3, [r2, #34]
   1df64:	2b55      	cmp	r3, #85
   1df66:	d1f0      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df68:	f892 3023 	ldrb.w	r3, [r2, #35]
   1df6c:	2b43      	cmp	r3, #67
   1df6e:	d1ec      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df70:	f892 3024 	ldrb.w	r3, [r2, #36]
   1df74:	2b43      	cmp	r3, #67
   1df76:	d1e8      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df78:	f892 3025 	ldrb.w	r3, [r2, #37]
   1df7c:	2b2b      	cmp	r3, #43
   1df7e:	d1e4      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df80:	f892 3026 	ldrb.w	r3, [r2, #38]
   1df84:	2b2b      	cmp	r3, #43
   1df86:	d1e0      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df88:	f892 3027 	ldrb.w	r3, [r2, #39]
   1df8c:	2b00      	cmp	r3, #0
   1df8e:	d1dc      	bne.n	1df4a <__cxa_begin_catch+0x16>
   1df90:	6953      	ldr	r3, [r2, #20]
   1df92:	2b00      	cmp	r3, #0
   1df94:	db0d      	blt.n	1dfb2 <__cxa_begin_catch+0x7e>
   1df96:	3301      	adds	r3, #1
   1df98:	6153      	str	r3, [r2, #20]
   1df9a:	6843      	ldr	r3, [r0, #4]
   1df9c:	3b01      	subs	r3, #1
   1df9e:	4291      	cmp	r1, r2
   1dfa0:	6043      	str	r3, [r0, #4]
   1dfa2:	bf1c      	itt	ne
   1dfa4:	6111      	strne	r1, [r2, #16]
   1dfa6:	6002      	strne	r2, [r0, #0]
   1dfa8:	4628      	mov	r0, r5
   1dfaa:	6a6c      	ldr	r4, [r5, #36]
   1dfac:	f7fd fa06 	bl	1b3bc <_Unwind_Complete>
   1dfb0:	e7cf      	b.n	1df52 <__cxa_begin_catch+0x1e>
   1dfb2:	f1c3 0301 	rsb	r3, r3, #1	; 0x1
   1dfb6:	e7ef      	b.n	1df98 <__cxa_begin_catch+0x64>
   1dfb8:	f7ff f888 	bl	1d0cc <_ZSt9terminatev>
   1dfbc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1dfc0:	d001      	beq.n	1dfc6 <__cxa_begin_catch+0x92>
   1dfc2:	f7f9 fb65 	bl	17690 <__cxa_end_cleanup>
   1dfc6:	f7ff fedb 	bl	1dd80 <__cxa_call_unexpected>
   1dfca:	46c0      	nop			(mov r8, r8)

0001dfcc <_ZNKSt8bad_cast4whatEv>:
   1dfcc:	4800      	ldr	r0, [pc, #0]	(1dfd0 <_ZNKSt8bad_cast4whatEv+0x4>)
   1dfce:	4770      	bx	lr
   1dfd0:	00022798 	.word	0x00022798

0001dfd4 <_ZNSt8bad_castD1Ev>:
   1dfd4:	4b03      	ldr	r3, [pc, #12]	(1dfe4 <_ZNSt8bad_castD1Ev+0x10>)
   1dfd6:	b510      	push	{r4, lr}
   1dfd8:	6003      	str	r3, [r0, #0]
   1dfda:	4604      	mov	r4, r0
   1dfdc:	f000 f8da 	bl	1e194 <_ZNSt9exceptionD2Ev>
   1dfe0:	4620      	mov	r0, r4
   1dfe2:	bd10      	pop	{r4, pc}
   1dfe4:	000227b0 	.word	0x000227b0

0001dfe8 <_ZNSt8bad_castD2Ev>:
   1dfe8:	4b03      	ldr	r3, [pc, #12]	(1dff8 <_ZNSt8bad_castD2Ev+0x10>)
   1dfea:	b510      	push	{r4, lr}
   1dfec:	6003      	str	r3, [r0, #0]
   1dfee:	4604      	mov	r4, r0
   1dff0:	f000 f8d0 	bl	1e194 <_ZNSt9exceptionD2Ev>
   1dff4:	4620      	mov	r0, r4
   1dff6:	bd10      	pop	{r4, pc}
   1dff8:	000227b0 	.word	0x000227b0

0001dffc <_ZNSt8bad_castD0Ev>:
   1dffc:	4b05      	ldr	r3, [pc, #20]	(1e014 <_ZNSt8bad_castD0Ev+0x18>)
   1dffe:	b510      	push	{r4, lr}
   1e000:	6003      	str	r3, [r0, #0]
   1e002:	4604      	mov	r4, r0
   1e004:	f000 f8c6 	bl	1e194 <_ZNSt9exceptionD2Ev>
   1e008:	4620      	mov	r0, r4
   1e00a:	f7f0 fbf3 	bl	e7f4 <_ZdlPv>
   1e00e:	4620      	mov	r0, r4
   1e010:	bd10      	pop	{r4, pc}
   1e012:	46c0      	nop			(mov r8, r8)
   1e014:	000227b0 	.word	0x000227b0

0001e018 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1e018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e01a:	b081      	sub	sp, #4
   1e01c:	4604      	mov	r4, r0
   1e01e:	460d      	mov	r5, r1
   1e020:	4616      	mov	r6, r2
   1e022:	461f      	mov	r7, r3
   1e024:	f000 f938 	bl	1e298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   1e028:	b110      	cbz	r0, 1e030 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x18>
   1e02a:	2001      	movs	r0, #1
   1e02c:	b001      	add	sp, #4
   1e02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e030:	68a0      	ldr	r0, [r4, #8]
   1e032:	4629      	mov	r1, r5
   1e034:	6803      	ldr	r3, [r0, #0]
   1e036:	4632      	mov	r2, r6
   1e038:	699c      	ldr	r4, [r3, #24]
   1e03a:	463b      	mov	r3, r7
   1e03c:	47a0      	blx	r4
   1e03e:	e7f5      	b.n	1e02c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>

0001e040 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1e040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e044:	460e      	mov	r6, r1
   1e046:	b085      	sub	sp, #20
   1e048:	4619      	mov	r1, r3
   1e04a:	4604      	mov	r4, r0
   1e04c:	4617      	mov	r7, r2
   1e04e:	469b      	mov	fp, r3
   1e050:	f8dd 8038 	ldr.w	r8, [sp, #56]
   1e054:	f8dd 9040 	ldr.w	r9, [sp, #64]
   1e058:	f8dd a044 	ldr.w	sl, [sp, #68]
   1e05c:	f000 f990 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e060:	4605      	mov	r5, r0
   1e062:	b178      	cbz	r0, 1e084 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1e064:	2e00      	cmp	r6, #0
   1e066:	f8ca 8000 	str.w	r8, [sl]
   1e06a:	f88a 7004 	strb.w	r7, [sl, #4]
   1e06e:	db1d      	blt.n	1e0ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   1e070:	eb08 0306 	add.w	r3, r8, r6
   1e074:	4599      	cmp	r9, r3
   1e076:	bf0c      	ite	eq
   1e078:	2306      	moveq	r3, #6
   1e07a:	2301      	movne	r3, #1
   1e07c:	f88a 3006 	strb.w	r3, [sl, #6]
   1e080:	2000      	movs	r0, #0
   1e082:	e010      	b.n	1e0a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1e084:	45c8      	cmp	r8, r9
   1e086:	d01b      	beq.n	1e0c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>
   1e088:	68a0      	ldr	r0, [r4, #8]
   1e08a:	9a0f      	ldr	r2, [sp, #60]
   1e08c:	6803      	ldr	r3, [r0, #0]
   1e08e:	9201      	str	r2, [sp, #4]
   1e090:	f8cd 8000 	str.w	r8, [sp]
   1e094:	f8cd 9008 	str.w	r9, [sp, #8]
   1e098:	f8cd a00c 	str.w	sl, [sp, #12]
   1e09c:	69dc      	ldr	r4, [r3, #28]
   1e09e:	4631      	mov	r1, r6
   1e0a0:	463a      	mov	r2, r7
   1e0a2:	465b      	mov	r3, fp
   1e0a4:	47a0      	blx	r4
   1e0a6:	b005      	add	sp, #20
   1e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0ac:	f116 0f02 	cmn.w	r6, #2	; 0x2
   1e0b0:	d001      	beq.n	1e0b6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   1e0b2:	2000      	movs	r0, #0
   1e0b4:	e7f7      	b.n	1e0a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1e0b6:	2301      	movs	r3, #1
   1e0b8:	f88a 3006 	strb.w	r3, [sl, #6]
   1e0bc:	2000      	movs	r0, #0
   1e0be:	e7f2      	b.n	1e0a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1e0c0:	4620      	mov	r0, r4
   1e0c2:	990f      	ldr	r1, [sp, #60]
   1e0c4:	f000 f95c 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e0c8:	2800      	cmp	r0, #0
   1e0ca:	d0dd      	beq.n	1e088 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
   1e0cc:	f88a 7005 	strb.w	r7, [sl, #5]
   1e0d0:	4628      	mov	r0, r5
   1e0d2:	e7e8      	b.n	1e0a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>

0001e0d4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   1e0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0d8:	b082      	sub	sp, #8
   1e0da:	9e08      	ldr	r6, [sp, #32]
   1e0dc:	4604      	mov	r4, r0
   1e0de:	4296      	cmp	r6, r2
   1e0e0:	4688      	mov	r8, r1
   1e0e2:	4615      	mov	r5, r2
   1e0e4:	461f      	mov	r7, r3
   1e0e6:	d00a      	beq.n	1e0fe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2a>
   1e0e8:	68a0      	ldr	r0, [r4, #8]
   1e0ea:	4641      	mov	r1, r8
   1e0ec:	6803      	ldr	r3, [r0, #0]
   1e0ee:	9600      	str	r6, [sp, #0]
   1e0f0:	6a1c      	ldr	r4, [r3, #32]
   1e0f2:	462a      	mov	r2, r5
   1e0f4:	463b      	mov	r3, r7
   1e0f6:	47a0      	blx	r4
   1e0f8:	b002      	add	sp, #8
   1e0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e0fe:	4619      	mov	r1, r3
   1e100:	f000 f93e 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e104:	2800      	cmp	r0, #0
   1e106:	d0ef      	beq.n	1e0e8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
   1e108:	2006      	movs	r0, #6
   1e10a:	e7f5      	b.n	1e0f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>

0001e10c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   1e10c:	4b03      	ldr	r3, [pc, #12]	(1e11c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1e10e:	b510      	push	{r4, lr}
   1e110:	6003      	str	r3, [r0, #0]
   1e112:	4604      	mov	r4, r0
   1e114:	f000 f910 	bl	1e338 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1e118:	4620      	mov	r0, r4
   1e11a:	bd10      	pop	{r4, pc}
   1e11c:	000227e0 	.word	0x000227e0

0001e120 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   1e120:	4b03      	ldr	r3, [pc, #12]	(1e130 <_ZN10__cxxabiv120__si_class_type_infoD2Ev+0x10>)
   1e122:	b510      	push	{r4, lr}
   1e124:	6003      	str	r3, [r0, #0]
   1e126:	4604      	mov	r4, r0
   1e128:	f000 f906 	bl	1e338 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1e12c:	4620      	mov	r0, r4
   1e12e:	bd10      	pop	{r4, pc}
   1e130:	000227e0 	.word	0x000227e0

0001e134 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1e134:	4b05      	ldr	r3, [pc, #20]	(1e14c <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   1e136:	b510      	push	{r4, lr}
   1e138:	6003      	str	r3, [r0, #0]
   1e13a:	4604      	mov	r4, r0
   1e13c:	f000 f8fc 	bl	1e338 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1e140:	4620      	mov	r0, r4
   1e142:	f7f0 fb57 	bl	e7f4 <_ZdlPv>
   1e146:	4620      	mov	r0, r4
   1e148:	bd10      	pop	{r4, pc}
   1e14a:	46c0      	nop			(mov r8, r8)
   1e14c:	000227e0 	.word	0x000227e0

0001e150 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   1e150:	4b03      	ldr	r3, [pc, #12]	(1e160 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   1e152:	b510      	push	{r4, lr}
   1e154:	6003      	str	r3, [r0, #0]
   1e156:	4604      	mov	r4, r0
   1e158:	f000 f906 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e15c:	4620      	mov	r0, r4
   1e15e:	bd10      	pop	{r4, pc}
   1e160:	00022848 	.word	0x00022848

0001e164 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
   1e164:	4b03      	ldr	r3, [pc, #12]	(1e174 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev+0x10>)
   1e166:	b510      	push	{r4, lr}
   1e168:	6003      	str	r3, [r0, #0]
   1e16a:	4604      	mov	r4, r0
   1e16c:	f000 f8fc 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e170:	4620      	mov	r0, r4
   1e172:	bd10      	pop	{r4, pc}
   1e174:	00022848 	.word	0x00022848

0001e178 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   1e178:	4b05      	ldr	r3, [pc, #20]	(1e190 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   1e17a:	b510      	push	{r4, lr}
   1e17c:	6003      	str	r3, [r0, #0]
   1e17e:	4604      	mov	r4, r0
   1e180:	f000 f8f2 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e184:	4620      	mov	r0, r4
   1e186:	f7f0 fb35 	bl	e7f4 <_ZdlPv>
   1e18a:	4620      	mov	r0, r4
   1e18c:	bd10      	pop	{r4, pc}
   1e18e:	46c0      	nop			(mov r8, r8)
   1e190:	00022848 	.word	0x00022848

0001e194 <_ZNSt9exceptionD2Ev>:
   1e194:	4b01      	ldr	r3, [pc, #4]	(1e19c <_ZNSt9exceptionD2Ev+0x8>)
   1e196:	6003      	str	r3, [r0, #0]
   1e198:	4770      	bx	lr
   1e19a:	46c0      	nop			(mov r8, r8)
   1e19c:	00022c80 	.word	0x00022c80

0001e1a0 <_ZNSt9exceptionD1Ev>:
   1e1a0:	4b01      	ldr	r3, [pc, #4]	(1e1a8 <_ZNSt9exceptionD1Ev+0x8>)
   1e1a2:	6003      	str	r3, [r0, #0]
   1e1a4:	4770      	bx	lr
   1e1a6:	46c0      	nop			(mov r8, r8)
   1e1a8:	00022c80 	.word	0x00022c80

0001e1ac <_ZNSt13bad_exceptionD2Ev>:
   1e1ac:	4b01      	ldr	r3, [pc, #4]	(1e1b4 <_ZNSt13bad_exceptionD2Ev+0x8>)
   1e1ae:	6003      	str	r3, [r0, #0]
   1e1b0:	4770      	bx	lr
   1e1b2:	46c0      	nop			(mov r8, r8)
   1e1b4:	00022c80 	.word	0x00022c80

0001e1b8 <_ZNSt13bad_exceptionD1Ev>:
   1e1b8:	4b01      	ldr	r3, [pc, #4]	(1e1c0 <_ZNSt13bad_exceptionD1Ev+0x8>)
   1e1ba:	6003      	str	r3, [r0, #0]
   1e1bc:	4770      	bx	lr
   1e1be:	46c0      	nop			(mov r8, r8)
   1e1c0:	00022c80 	.word	0x00022c80

0001e1c4 <_ZN10__cxxabiv115__forced_unwindD2Ev>:
   1e1c4:	4b01      	ldr	r3, [pc, #4]	(1e1cc <_ZN10__cxxabiv115__forced_unwindD2Ev+0x8>)
   1e1c6:	6003      	str	r3, [r0, #0]
   1e1c8:	4770      	bx	lr
   1e1ca:	46c0      	nop			(mov r8, r8)
   1e1cc:	00022c50 	.word	0x00022c50

0001e1d0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   1e1d0:	4b01      	ldr	r3, [pc, #4]	(1e1d8 <_ZN10__cxxabiv115__forced_unwindD1Ev+0x8>)
   1e1d2:	6003      	str	r3, [r0, #0]
   1e1d4:	4770      	bx	lr
   1e1d6:	46c0      	nop			(mov r8, r8)
   1e1d8:	00022c50 	.word	0x00022c50

0001e1dc <_ZN10__cxxabiv119__foreign_exceptionD2Ev>:
   1e1dc:	4b01      	ldr	r3, [pc, #4]	(1e1e4 <_ZN10__cxxabiv119__foreign_exceptionD2Ev+0x8>)
   1e1de:	6003      	str	r3, [r0, #0]
   1e1e0:	4770      	bx	lr
   1e1e2:	46c0      	nop			(mov r8, r8)
   1e1e4:	00022c38 	.word	0x00022c38

0001e1e8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   1e1e8:	4b01      	ldr	r3, [pc, #4]	(1e1f0 <_ZN10__cxxabiv119__foreign_exceptionD1Ev+0x8>)
   1e1ea:	6003      	str	r3, [r0, #0]
   1e1ec:	4770      	bx	lr
   1e1ee:	46c0      	nop			(mov r8, r8)
   1e1f0:	00022c38 	.word	0x00022c38

0001e1f4 <_ZNKSt9exception4whatEv>:
   1e1f4:	4800      	ldr	r0, [pc, #0]	(1e1f8 <_ZNKSt9exception4whatEv+0x4>)
   1e1f6:	4770      	bx	lr
   1e1f8:	00022c08 	.word	0x00022c08

0001e1fc <_ZNKSt13bad_exception4whatEv>:
   1e1fc:	4800      	ldr	r0, [pc, #0]	(1e200 <_ZNKSt13bad_exception4whatEv+0x4>)
   1e1fe:	4770      	bx	lr
   1e200:	00022c18 	.word	0x00022c18

0001e204 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   1e204:	4b03      	ldr	r3, [pc, #12]	(1e214 <_ZN10__cxxabiv119__foreign_exceptionD0Ev+0x10>)
   1e206:	b510      	push	{r4, lr}
   1e208:	6003      	str	r3, [r0, #0]
   1e20a:	4604      	mov	r4, r0
   1e20c:	f7f0 faf2 	bl	e7f4 <_ZdlPv>
   1e210:	4620      	mov	r0, r4
   1e212:	bd10      	pop	{r4, pc}
   1e214:	00022c38 	.word	0x00022c38

0001e218 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   1e218:	4b03      	ldr	r3, [pc, #12]	(1e228 <_ZN10__cxxabiv115__forced_unwindD0Ev+0x10>)
   1e21a:	b510      	push	{r4, lr}
   1e21c:	6003      	str	r3, [r0, #0]
   1e21e:	4604      	mov	r4, r0
   1e220:	f7f0 fae8 	bl	e7f4 <_ZdlPv>
   1e224:	4620      	mov	r0, r4
   1e226:	bd10      	pop	{r4, pc}
   1e228:	00022c50 	.word	0x00022c50

0001e22c <_ZNSt9exceptionD0Ev>:
   1e22c:	4b03      	ldr	r3, [pc, #12]	(1e23c <_ZNSt9exceptionD0Ev+0x10>)
   1e22e:	b510      	push	{r4, lr}
   1e230:	6003      	str	r3, [r0, #0]
   1e232:	4604      	mov	r4, r0
   1e234:	f7f0 fade 	bl	e7f4 <_ZdlPv>
   1e238:	4620      	mov	r0, r4
   1e23a:	bd10      	pop	{r4, pc}
   1e23c:	00022c80 	.word	0x00022c80

0001e240 <_ZNSt13bad_exceptionD0Ev>:
   1e240:	4b03      	ldr	r3, [pc, #12]	(1e250 <_ZNSt13bad_exceptionD0Ev+0x10>)
   1e242:	b510      	push	{r4, lr}
   1e244:	6003      	str	r3, [r0, #0]
   1e246:	4604      	mov	r4, r0
   1e248:	f7f0 fad4 	bl	e7f4 <_ZdlPv>
   1e24c:	4620      	mov	r0, r4
   1e24e:	bd10      	pop	{r4, pc}
   1e250:	00022c80 	.word	0x00022c80

0001e254 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1e254:	b570      	push	{r4, r5, r6, lr}
   1e256:	2310      	movs	r3, #16
   1e258:	b084      	sub	sp, #16
   1e25a:	2500      	movs	r5, #0
   1e25c:	9302      	str	r3, [sp, #8]
   1e25e:	6803      	ldr	r3, [r0, #0]
   1e260:	9500      	str	r5, [sp, #0]
   1e262:	4616      	mov	r6, r2
   1e264:	699c      	ldr	r4, [r3, #24]
   1e266:	f88d 5004 	strb.w	r5, [sp, #4]
   1e26a:	466b      	mov	r3, sp
   1e26c:	9503      	str	r5, [sp, #12]
   1e26e:	6812      	ldr	r2, [r2, #0]
   1e270:	47a0      	blx	r4
   1e272:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e276:	f003 0306 	and.w	r3, r3, #6	; 0x6
   1e27a:	2b06      	cmp	r3, #6
   1e27c:	bf09      	itett	eq
   1e27e:	9b00      	ldreq	r3, [sp, #0]
   1e280:	4628      	movne	r0, r5
   1e282:	6033      	streq	r3, [r6, #0]
   1e284:	2001      	moveq	r0, #1
   1e286:	b004      	add	sp, #16
   1e288:	bd70      	pop	{r4, r5, r6, pc}
   1e28a:	46c0      	nop			(mov r8, r8)

0001e28c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1e28c:	9800      	ldr	r0, [sp, #0]
   1e28e:	4290      	cmp	r0, r2
   1e290:	bf0c      	ite	eq
   1e292:	2006      	moveq	r0, #6
   1e294:	2001      	movne	r0, #1
   1e296:	4770      	bx	lr

0001e298 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   1e298:	b530      	push	{r4, r5, lr}
   1e29a:	b081      	sub	sp, #4
   1e29c:	4615      	mov	r5, r2
   1e29e:	461c      	mov	r4, r3
   1e2a0:	f000 f86e 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e2a4:	b128      	cbz	r0, 1e2b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x1a>
   1e2a6:	2308      	movs	r3, #8
   1e2a8:	2206      	movs	r2, #6
   1e2aa:	6025      	str	r5, [r4, #0]
   1e2ac:	60e3      	str	r3, [r4, #12]
   1e2ae:	7122      	strb	r2, [r4, #4]
   1e2b0:	2001      	movs	r0, #1
   1e2b2:	b001      	add	sp, #4
   1e2b4:	bd30      	pop	{r4, r5, pc}
   1e2b6:	46c0      	nop			(mov r8, r8)

0001e2b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1e2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2ba:	b081      	sub	sp, #4
   1e2bc:	461c      	mov	r4, r3
   1e2be:	9e06      	ldr	r6, [sp, #24]
   1e2c0:	9b08      	ldr	r3, [sp, #32]
   1e2c2:	4605      	mov	r5, r0
   1e2c4:	429e      	cmp	r6, r3
   1e2c6:	4617      	mov	r7, r2
   1e2c8:	d00d      	beq.n	1e2e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   1e2ca:	4628      	mov	r0, r5
   1e2cc:	4621      	mov	r1, r4
   1e2ce:	f000 f857 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e2d2:	b128      	cbz	r0, 1e2e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1e2d4:	9b09      	ldr	r3, [sp, #36]
   1e2d6:	9a09      	ldr	r2, [sp, #36]
   1e2d8:	601e      	str	r6, [r3, #0]
   1e2da:	711f      	strb	r7, [r3, #4]
   1e2dc:	2301      	movs	r3, #1
   1e2de:	7193      	strb	r3, [r2, #6]
   1e2e0:	2000      	movs	r0, #0
   1e2e2:	b001      	add	sp, #4
   1e2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e2e6:	9907      	ldr	r1, [sp, #28]
   1e2e8:	f000 f84a 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e2ec:	2800      	cmp	r0, #0
   1e2ee:	d0ec      	beq.n	1e2ca <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
   1e2f0:	9a09      	ldr	r2, [sp, #36]
   1e2f2:	7157      	strb	r7, [r2, #5]
   1e2f4:	e7f4      	b.n	1e2e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1e2f6:	46c0      	nop			(mov r8, r8)

0001e2f8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   1e2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e2fa:	b081      	sub	sp, #4
   1e2fc:	4606      	mov	r6, r0
   1e2fe:	460d      	mov	r5, r1
   1e300:	4617      	mov	r7, r2
   1e302:	461c      	mov	r4, r3
   1e304:	f000 f83c 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e308:	b918      	cbnz	r0, 1e312 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1e30a:	2c03      	cmp	r4, #3
   1e30c:	d903      	bls.n	1e316 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1e>
   1e30e:	b001      	add	sp, #4
   1e310:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e312:	2001      	movs	r0, #1
   1e314:	e7fb      	b.n	1e30e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1e316:	682b      	ldr	r3, [r5, #0]
   1e318:	4628      	mov	r0, r5
   1e31a:	695c      	ldr	r4, [r3, #20]
   1e31c:	4631      	mov	r1, r6
   1e31e:	463a      	mov	r2, r7
   1e320:	47a0      	blx	r4
   1e322:	e7f4      	b.n	1e30e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>

0001e324 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1e324:	4b03      	ldr	r3, [pc, #12]	(1e334 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1e326:	b510      	push	{r4, lr}
   1e328:	6003      	str	r3, [r0, #0]
   1e32a:	4604      	mov	r4, r0
   1e32c:	f000 f81c 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e330:	4620      	mov	r0, r4
   1e332:	bd10      	pop	{r4, pc}
   1e334:	00022d28 	.word	0x00022d28

0001e338 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   1e338:	4b03      	ldr	r3, [pc, #12]	(1e348 <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>)
   1e33a:	b510      	push	{r4, lr}
   1e33c:	6003      	str	r3, [r0, #0]
   1e33e:	4604      	mov	r4, r0
   1e340:	f000 f812 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e344:	4620      	mov	r0, r4
   1e346:	bd10      	pop	{r4, pc}
   1e348:	00022d28 	.word	0x00022d28

0001e34c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1e34c:	4b05      	ldr	r3, [pc, #20]	(1e364 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   1e34e:	b510      	push	{r4, lr}
   1e350:	6003      	str	r3, [r0, #0]
   1e352:	4604      	mov	r4, r0
   1e354:	f000 f808 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e358:	4620      	mov	r0, r4
   1e35a:	f7f0 fa4b 	bl	e7f4 <_ZdlPv>
   1e35e:	4620      	mov	r0, r4
   1e360:	bd10      	pop	{r4, pc}
   1e362:	46c0      	nop			(mov r8, r8)
   1e364:	00022d28 	.word	0x00022d28

0001e368 <_ZNSt9type_infoD2Ev>:
   1e368:	4b01      	ldr	r3, [pc, #4]	(1e370 <_ZNSt9type_infoD2Ev+0x8>)
   1e36a:	6003      	str	r3, [r0, #0]
   1e36c:	4770      	bx	lr
   1e36e:	46c0      	nop			(mov r8, r8)
   1e370:	00022d88 	.word	0x00022d88

0001e374 <_ZNSt9type_infoD1Ev>:
   1e374:	4b01      	ldr	r3, [pc, #4]	(1e37c <_ZNSt9type_infoD1Ev+0x8>)
   1e376:	6003      	str	r3, [r0, #0]
   1e378:	4770      	bx	lr
   1e37a:	46c0      	nop			(mov r8, r8)
   1e37c:	00022d88 	.word	0x00022d88

0001e380 <_ZNKSt9type_infoeqERKS_>:
   1e380:	6840      	ldr	r0, [r0, #4]
   1e382:	684b      	ldr	r3, [r1, #4]
   1e384:	4298      	cmp	r0, r3
   1e386:	bf14      	ite	ne
   1e388:	2000      	movne	r0, #0
   1e38a:	2001      	moveq	r0, #1
   1e38c:	4770      	bx	lr
   1e38e:	46c0      	nop			(mov r8, r8)

0001e390 <_ZNKSt9type_info14__is_pointer_pEv>:
   1e390:	2000      	movs	r0, #0
   1e392:	4770      	bx	lr

0001e394 <_ZNKSt9type_info15__is_function_pEv>:
   1e394:	2000      	movs	r0, #0
   1e396:	4770      	bx	lr

0001e398 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   1e398:	6840      	ldr	r0, [r0, #4]
   1e39a:	684b      	ldr	r3, [r1, #4]
   1e39c:	4298      	cmp	r0, r3
   1e39e:	bf14      	ite	ne
   1e3a0:	2000      	movne	r0, #0
   1e3a2:	2001      	moveq	r0, #1
   1e3a4:	4770      	bx	lr
   1e3a6:	46c0      	nop			(mov r8, r8)

0001e3a8 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   1e3a8:	2000      	movs	r0, #0
   1e3aa:	4770      	bx	lr

0001e3ac <_ZNSt9type_infoD0Ev>:
   1e3ac:	4b03      	ldr	r3, [pc, #12]	(1e3bc <_ZNSt9type_infoD0Ev+0x10>)
   1e3ae:	b510      	push	{r4, lr}
   1e3b0:	6003      	str	r3, [r0, #0]
   1e3b2:	4604      	mov	r4, r0
   1e3b4:	f7f0 fa1e 	bl	e7f4 <_ZdlPv>
   1e3b8:	4620      	mov	r0, r4
   1e3ba:	bd10      	pop	{r4, pc}
   1e3bc:	00022d88 	.word	0x00022d88

0001e3c0 <__cxa_current_exception_type>:
   1e3c0:	b500      	push	{lr}
   1e3c2:	b081      	sub	sp, #4
   1e3c4:	f000 f88c 	bl	1e4e0 <__cxa_get_globals>
   1e3c8:	6800      	ldr	r0, [r0, #0]
   1e3ca:	b100      	cbz	r0, 1e3ce <__cxa_current_exception_type+0xe>
   1e3cc:	6800      	ldr	r0, [r0, #0]
   1e3ce:	b001      	add	sp, #4
   1e3d0:	bd00      	pop	{pc}
   1e3d2:	46c0      	nop			(mov r8, r8)

0001e3d4 <__cxa_rethrow>:
   1e3d4:	b510      	push	{r4, lr}
   1e3d6:	f000 f883 	bl	1e4e0 <__cxa_get_globals>
   1e3da:	6843      	ldr	r3, [r0, #4]
   1e3dc:	6804      	ldr	r4, [r0, #0]
   1e3de:	3301      	adds	r3, #1
   1e3e0:	6043      	str	r3, [r0, #4]
   1e3e2:	b164      	cbz	r4, 1e3fe <__cxa_rethrow+0x2a>
   1e3e4:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e3e8:	2b47      	cmp	r3, #71
   1e3ea:	d00a      	beq.n	1e402 <__cxa_rethrow+0x2e>
   1e3ec:	2300      	movs	r3, #0
   1e3ee:	6003      	str	r3, [r0, #0]
   1e3f0:	3420      	adds	r4, #32
   1e3f2:	4620      	mov	r0, r4
   1e3f4:	f7fd fd38 	bl	1be68 <_Unwind_Resume_or_Rethrow>
   1e3f8:	4620      	mov	r0, r4
   1e3fa:	f7ff fd9b 	bl	1df34 <__cxa_begin_catch>
   1e3fe:	f7fe fe65 	bl	1d0cc <_ZSt9terminatev>
   1e402:	f894 3021 	ldrb.w	r3, [r4, #33]
   1e406:	2b4e      	cmp	r3, #78
   1e408:	d1f0      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e40a:	f894 3022 	ldrb.w	r3, [r4, #34]
   1e40e:	2b55      	cmp	r3, #85
   1e410:	d1ec      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e412:	f894 3023 	ldrb.w	r3, [r4, #35]
   1e416:	2b43      	cmp	r3, #67
   1e418:	d1e8      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e41a:	f894 3024 	ldrb.w	r3, [r4, #36]
   1e41e:	2b43      	cmp	r3, #67
   1e420:	d1e4      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e422:	f894 3025 	ldrb.w	r3, [r4, #37]
   1e426:	2b2b      	cmp	r3, #43
   1e428:	d1e0      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e42a:	f894 3026 	ldrb.w	r3, [r4, #38]
   1e42e:	2b2b      	cmp	r3, #43
   1e430:	d1dc      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e432:	f894 3027 	ldrb.w	r3, [r4, #39]
   1e436:	2b00      	cmp	r3, #0
   1e438:	d1d8      	bne.n	1e3ec <__cxa_rethrow+0x18>
   1e43a:	6963      	ldr	r3, [r4, #20]
   1e43c:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1e440:	6163      	str	r3, [r4, #20]
   1e442:	e7d5      	b.n	1e3f0 <__cxa_rethrow+0x1c>

0001e444 <__cxa_throw>:
   1e444:	4b16      	ldr	r3, [pc, #88]	(1e4a0 <__cxa_throw+0x5c>)
   1e446:	b510      	push	{r4, lr}
   1e448:	4604      	mov	r4, r0
   1e44a:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
   1e44e:	6042      	str	r2, [r0, #4]
   1e450:	681a      	ldr	r2, [r3, #0]
   1e452:	4b14      	ldr	r3, [pc, #80]	(1e4a4 <__cxa_throw+0x60>)
   1e454:	6082      	str	r2, [r0, #8]
   1e456:	681a      	ldr	r2, [r3, #0]
   1e458:	2347      	movs	r3, #71
   1e45a:	60c2      	str	r2, [r0, #12]
   1e45c:	224e      	movs	r2, #78
   1e45e:	f880 2021 	strb.w	r2, [r0, #33]
   1e462:	3a0b      	subs	r2, #11
   1e464:	f880 3020 	strb.w	r3, [r0, #32]
   1e468:	f880 2023 	strb.w	r2, [r0, #35]
   1e46c:	f880 2024 	strb.w	r2, [r0, #36]
   1e470:	330e      	adds	r3, #14
   1e472:	4a0d      	ldr	r2, [pc, #52]	(1e4a8 <__cxa_throw+0x64>)
   1e474:	f844 1c78 	str.w	r1, [r4, #-120]
   1e478:	f880 3022 	strb.w	r3, [r0, #34]
   1e47c:	212b      	movs	r1, #43
   1e47e:	3b55      	subs	r3, #85
   1e480:	3c58      	subs	r4, #88
   1e482:	f880 1025 	strb.w	r1, [r0, #37]
   1e486:	f880 1026 	strb.w	r1, [r0, #38]
   1e48a:	f880 3027 	strb.w	r3, [r0, #39]
   1e48e:	6282      	str	r2, [r0, #40]
   1e490:	4620      	mov	r0, r4
   1e492:	f7fd fcc5 	bl	1be20 <_Unwind_RaiseException>
   1e496:	4620      	mov	r0, r4
   1e498:	f7ff fd4c 	bl	1df34 <__cxa_begin_catch>
   1e49c:	f7fe fe16 	bl	1d0cc <_ZSt9terminatev>
   1e4a0:	20000034 	.word	0x20000034
   1e4a4:	20000038 	.word	0x20000038
   1e4a8:	0001e4ad 	.word	0x0001e4ad

0001e4ac <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   1e4ac:	2801      	cmp	r0, #1
   1e4ae:	b510      	push	{r4, lr}
   1e4b0:	f1a1 0320 	sub.w	r3, r1, #32	; 0x20
   1e4b4:	d80c      	bhi.n	1e4d0 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x24>
   1e4b6:	685b      	ldr	r3, [r3, #4]
   1e4b8:	b13b      	cbz	r3, 1e4ca <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x1e>
   1e4ba:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1e4be:	4620      	mov	r0, r4
   1e4c0:	4798      	blx	r3
   1e4c2:	4620      	mov	r0, r4
   1e4c4:	f000 f812 	bl	1e4ec <__cxa_free_exception>
   1e4c8:	bd10      	pop	{r4, pc}
   1e4ca:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1e4ce:	e7f8      	b.n	1e4c2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
   1e4d0:	68d8      	ldr	r0, [r3, #12]
   1e4d2:	f7fe fded 	bl	1d0b0 <_ZN10__cxxabiv111__terminateEPFvvE>
   1e4d6:	46c0      	nop			(mov r8, r8)

0001e4d8 <__cxa_get_globals_fast>:
   1e4d8:	4800      	ldr	r0, [pc, #0]	(1e4dc <__cxa_get_globals_fast+0x4>)
   1e4da:	4770      	bx	lr
   1e4dc:	20000688 	.word	0x20000688

0001e4e0 <__cxa_get_globals>:
   1e4e0:	4800      	ldr	r0, [pc, #0]	(1e4e4 <__cxa_get_globals+0x4>)
   1e4e2:	4770      	bx	lr
   1e4e4:	20000688 	.word	0x20000688

0001e4e8 <_GLOBAL__I___cxa_allocate_exception>:
   1e4e8:	4770      	bx	lr
   1e4ea:	46c0      	nop			(mov r8, r8)

0001e4ec <__cxa_free_exception>:
   1e4ec:	b500      	push	{lr}
   1e4ee:	4a0c      	ldr	r2, [pc, #48]	(1e520 <__cxa_free_exception+0x34>)
   1e4f0:	b081      	sub	sp, #4
   1e4f2:	4282      	cmp	r2, r0
   1e4f4:	d803      	bhi.n	1e4fe <__cxa_free_exception+0x12>
   1e4f6:	f502 6300 	add.w	r3, r2, #2048	; 0x800
   1e4fa:	4298      	cmp	r0, r3
   1e4fc:	d304      	bcc.n	1e508 <__cxa_free_exception+0x1c>
   1e4fe:	3878      	subs	r0, #120
   1e500:	f001 ffc6 	bl	20490 <free>
   1e504:	b001      	add	sp, #4
   1e506:	bd00      	pop	{pc}
   1e508:	ebc2 0200 	rsb	r2, r2, r0
   1e50c:	0a52      	lsrs	r2, r2, #9
   1e50e:	2301      	movs	r3, #1
   1e510:	4093      	lsls	r3, r2
   1e512:	4904      	ldr	r1, [pc, #16]	(1e524 <__cxa_free_exception+0x38>)
   1e514:	ea6f 0303 	mvn.w	r3, r3
   1e518:	680a      	ldr	r2, [r1, #0]
   1e51a:	4013      	ands	r3, r2
   1e51c:	600b      	str	r3, [r1, #0]
   1e51e:	e7f1      	b.n	1e504 <__cxa_free_exception+0x18>
   1e520:	20000698 	.word	0x20000698
   1e524:	20000e98 	.word	0x20000e98

0001e528 <__cxa_allocate_exception>:
   1e528:	b530      	push	{r4, r5, lr}
   1e52a:	f100 0578 	add.w	r5, r0, #120	; 0x78
   1e52e:	b081      	sub	sp, #4
   1e530:	4628      	mov	r0, r5
   1e532:	f001 ffb9 	bl	204a8 <malloc>
   1e536:	4604      	mov	r4, r0
   1e538:	b168      	cbz	r0, 1e556 <__cxa_allocate_exception+0x2e>
   1e53a:	f7ff ffd1 	bl	1e4e0 <__cxa_get_globals>
   1e53e:	6843      	ldr	r3, [r0, #4]
   1e540:	2100      	movs	r1, #0
   1e542:	3301      	adds	r3, #1
   1e544:	6043      	str	r3, [r0, #4]
   1e546:	2278      	movs	r2, #120
   1e548:	4620      	mov	r0, r4
   1e54a:	f002 fa3d 	bl	209c8 <memset>
   1e54e:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1e552:	b001      	add	sp, #4
   1e554:	bd30      	pop	{r4, r5, pc}
   1e556:	4912      	ldr	r1, [pc, #72]	(1e5a0 <__cxa_allocate_exception+0x78>)
   1e558:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   1e55c:	680a      	ldr	r2, [r1, #0]
   1e55e:	bf9c      	itt	ls
   1e560:	4600      	movls	r0, r0
   1e562:	4613      	movls	r3, r2
   1e564:	d812      	bhi.n	1e58c <__cxa_allocate_exception+0x64>
   1e566:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e56a:	d006      	beq.n	1e57a <__cxa_allocate_exception+0x52>
   1e56c:	3001      	adds	r0, #1
   1e56e:	2804      	cmp	r0, #4
   1e570:	d00c      	beq.n	1e58c <__cxa_allocate_exception+0x64>
   1e572:	085b      	lsrs	r3, r3, #1
   1e574:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e578:	d1f8      	bne.n	1e56c <__cxa_allocate_exception+0x44>
   1e57a:	2301      	movs	r3, #1
   1e57c:	4083      	lsls	r3, r0
   1e57e:	4313      	orrs	r3, r2
   1e580:	600b      	str	r3, [r1, #0]
   1e582:	4b08      	ldr	r3, [pc, #32]	(1e5a4 <__cxa_allocate_exception+0x7c>)
   1e584:	0242      	lsls	r2, r0, #9
   1e586:	eb03 0402 	add.w	r4, r3, r2
   1e58a:	e7d6      	b.n	1e53a <__cxa_allocate_exception+0x12>
   1e58c:	f7fe fd9e 	bl	1d0cc <_ZSt9terminatev>
   1e590:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1e594:	d001      	beq.n	1e59a <__cxa_allocate_exception+0x72>
   1e596:	f7f9 f87b 	bl	17690 <__cxa_end_cleanup>
   1e59a:	f7ff fbf1 	bl	1dd80 <__cxa_call_unexpected>
   1e59e:	46c0      	nop			(mov r8, r8)
   1e5a0:	20000e98 	.word	0x20000e98
   1e5a4:	20000698 	.word	0x20000698

0001e5a8 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   1e5a8:	2001      	movs	r0, #1
   1e5aa:	4770      	bx	lr

0001e5ac <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   1e5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5ae:	2b01      	cmp	r3, #1
   1e5b0:	b081      	sub	sp, #4
   1e5b2:	4605      	mov	r5, r0
   1e5b4:	460e      	mov	r6, r1
   1e5b6:	4617      	mov	r7, r2
   1e5b8:	461c      	mov	r4, r3
   1e5ba:	d908      	bls.n	1e5ce <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
   1e5bc:	68e8      	ldr	r0, [r5, #12]
   1e5be:	1ca3      	adds	r3, r4, #2
   1e5c0:	6802      	ldr	r2, [r0, #0]
   1e5c2:	68f1      	ldr	r1, [r6, #12]
   1e5c4:	6914      	ldr	r4, [r2, #16]
   1e5c6:	463a      	mov	r2, r7
   1e5c8:	47a0      	blx	r4
   1e5ca:	b001      	add	sp, #4
   1e5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5ce:	68c0      	ldr	r0, [r0, #12]
   1e5d0:	4906      	ldr	r1, [pc, #24]	(1e5ec <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
   1e5d2:	f7ff fed5 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e5d6:	2800      	cmp	r0, #0
   1e5d8:	d0f0      	beq.n	1e5bc <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   1e5da:	68f0      	ldr	r0, [r6, #12]
   1e5dc:	6803      	ldr	r3, [r0, #0]
   1e5de:	68da      	ldr	r2, [r3, #12]
   1e5e0:	4790      	blx	r2
   1e5e2:	f080 0001 	eor.w	r0, r0, #1	; 0x1
   1e5e6:	b2c0      	uxtb	r0, r0
   1e5e8:	e7ef      	b.n	1e5ca <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
   1e5ea:	46c0      	nop			(mov r8, r8)
   1e5ec:	00022b00 	.word	0x00022b00

0001e5f0 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   1e5f0:	4b03      	ldr	r3, [pc, #12]	(1e600 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   1e5f2:	b510      	push	{r4, lr}
   1e5f4:	6003      	str	r3, [r0, #0]
   1e5f6:	4604      	mov	r4, r0
   1e5f8:	f000 f860 	bl	1e6bc <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1e5fc:	4620      	mov	r0, r4
   1e5fe:	bd10      	pop	{r4, pc}
   1e600:	000233e0 	.word	0x000233e0

0001e604 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
   1e604:	4b03      	ldr	r3, [pc, #12]	(1e614 <_ZN10__cxxabiv119__pointer_type_infoD2Ev+0x10>)
   1e606:	b510      	push	{r4, lr}
   1e608:	6003      	str	r3, [r0, #0]
   1e60a:	4604      	mov	r4, r0
   1e60c:	f000 f856 	bl	1e6bc <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1e610:	4620      	mov	r0, r4
   1e612:	bd10      	pop	{r4, pc}
   1e614:	000233e0 	.word	0x000233e0

0001e618 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   1e618:	4b05      	ldr	r3, [pc, #20]	(1e630 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   1e61a:	b510      	push	{r4, lr}
   1e61c:	6003      	str	r3, [r0, #0]
   1e61e:	4604      	mov	r4, r0
   1e620:	f000 f84c 	bl	1e6bc <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1e624:	4620      	mov	r0, r4
   1e626:	f7f0 f8e5 	bl	e7f4 <_ZdlPv>
   1e62a:	4620      	mov	r0, r4
   1e62c:	bd10      	pop	{r4, pc}
   1e62e:	46c0      	nop			(mov r8, r8)
   1e630:	000233e0 	.word	0x000233e0

0001e634 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   1e634:	68c0      	ldr	r0, [r0, #12]
   1e636:	b510      	push	{r4, lr}
   1e638:	f8d0 c000 	ldr.w	ip, [r0]
   1e63c:	68c9      	ldr	r1, [r1, #12]
   1e63e:	3302      	adds	r3, #2
   1e640:	f8dc 4010 	ldr.w	r4, [ip, #16]
   1e644:	47a0      	blx	r4
   1e646:	bd10      	pop	{r4, pc}

0001e648 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   1e648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e64c:	4606      	mov	r6, r0
   1e64e:	460d      	mov	r5, r1
   1e650:	4690      	mov	r8, r2
   1e652:	461f      	mov	r7, r3
   1e654:	f7ff fe94 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e658:	2800      	cmp	r0, #0
   1e65a:	d121      	bne.n	1e6a0 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   1e65c:	6833      	ldr	r3, [r6, #0]
   1e65e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1e662:	2d00      	cmp	r5, #0
   1e664:	d01e      	beq.n	1e6a4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   1e666:	682b      	ldr	r3, [r5, #0]
   1e668:	f853 1c04 	ldr.w	r1, [r3, #-4]
   1e66c:	f7ff fe88 	bl	1e380 <_ZNKSt9type_infoeqERKS_>
   1e670:	b198      	cbz	r0, 1e69a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1e672:	f017 0f01 	tst.w	r7, #1	; 0x1
   1e676:	d010      	beq.n	1e69a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1e678:	68b2      	ldr	r2, [r6, #8]
   1e67a:	68ab      	ldr	r3, [r5, #8]
   1e67c:	4393      	bics	r3, r2
   1e67e:	d10c      	bne.n	1e69a <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1e680:	f012 0f01 	tst.w	r2, #1	; 0x1
   1e684:	6833      	ldr	r3, [r6, #0]
   1e686:	bf08      	it	eq
   1e688:	f027 0701 	biceq.w	r7, r7, #1	; 0x1
   1e68c:	699c      	ldr	r4, [r3, #24]
   1e68e:	4630      	mov	r0, r6
   1e690:	4629      	mov	r1, r5
   1e692:	4642      	mov	r2, r8
   1e694:	463b      	mov	r3, r7
   1e696:	47a0      	blx	r4
   1e698:	e000      	b.n	1e69c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1e69a:	2000      	movs	r0, #0
   1e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6a0:	2001      	movs	r0, #1
   1e6a2:	e7fb      	b.n	1e69c <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1e6a4:	f7ff fa70 	bl	1db88 <__cxa_bad_typeid>

0001e6a8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   1e6a8:	4b03      	ldr	r3, [pc, #12]	(1e6b8 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   1e6aa:	b510      	push	{r4, lr}
   1e6ac:	6003      	str	r3, [r0, #0]
   1e6ae:	4604      	mov	r4, r0
   1e6b0:	f7ff fe5a 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e6b4:	4620      	mov	r0, r4
   1e6b6:	bd10      	pop	{r4, pc}
   1e6b8:	00023438 	.word	0x00023438

0001e6bc <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
   1e6bc:	4b03      	ldr	r3, [pc, #12]	(1e6cc <_ZN10__cxxabiv117__pbase_type_infoD2Ev+0x10>)
   1e6be:	b510      	push	{r4, lr}
   1e6c0:	6003      	str	r3, [r0, #0]
   1e6c2:	4604      	mov	r4, r0
   1e6c4:	f7ff fe50 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e6c8:	4620      	mov	r0, r4
   1e6ca:	bd10      	pop	{r4, pc}
   1e6cc:	00023438 	.word	0x00023438

0001e6d0 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   1e6d0:	4b05      	ldr	r3, [pc, #20]	(1e6e8 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   1e6d2:	b510      	push	{r4, lr}
   1e6d4:	6003      	str	r3, [r0, #0]
   1e6d6:	4604      	mov	r4, r0
   1e6d8:	f7ff fe46 	bl	1e368 <_ZNSt9type_infoD2Ev>
   1e6dc:	4620      	mov	r0, r4
   1e6de:	f7f0 f889 	bl	e7f4 <_ZdlPv>
   1e6e2:	4620      	mov	r0, r4
   1e6e4:	bd10      	pop	{r4, pc}
   1e6e6:	46c0      	nop			(mov r8, r8)
   1e6e8:	00023438 	.word	0x00023438

0001e6ec <cos>:
   1e6ec:	b530      	push	{r4, r5, lr}
   1e6ee:	4b1e      	ldr	r3, [pc, #120]	(1e768 <cos+0x7c>)
   1e6f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1e6f4:	429a      	cmp	r2, r3
   1e6f6:	b087      	sub	sp, #28
   1e6f8:	dc02      	bgt.n	1e700 <cos+0x14>
   1e6fa:	2200      	movs	r2, #0
   1e6fc:	2300      	movs	r3, #0
   1e6fe:	e017      	b.n	1e730 <cos+0x44>
   1e700:	4b1a      	ldr	r3, [pc, #104]	(1e76c <cos+0x80>)
   1e702:	429a      	cmp	r2, r3
   1e704:	dd04      	ble.n	1e710 <cos+0x24>
   1e706:	4602      	mov	r2, r0
   1e708:	460b      	mov	r3, r1
   1e70a:	f7fb fde1 	bl	1a2d0 <__aeabi_dsub>
   1e70e:	e029      	b.n	1e764 <cos+0x78>
   1e710:	aa02      	add	r2, sp, #8
   1e712:	f000 f9a9 	bl	1ea68 <__ieee754_rem_pio2>
   1e716:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1e71a:	2b01      	cmp	r3, #1
   1e71c:	d00b      	beq.n	1e736 <cos+0x4a>
   1e71e:	2b02      	cmp	r3, #2
   1e720:	d011      	beq.n	1e746 <cos+0x5a>
   1e722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e726:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1e72a:	b9ab      	cbnz	r3, 1e758 <cos+0x6c>
   1e72c:	4622      	mov	r2, r4
   1e72e:	462b      	mov	r3, r5
   1e730:	f000 fc82 	bl	1f038 <__kernel_cos>
   1e734:	e016      	b.n	1e764 <cos+0x78>
   1e736:	9300      	str	r3, [sp, #0]
   1e738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e73c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e740:	f001 f8ea 	bl	1f918 <__kernel_sin>
   1e744:	e005      	b.n	1e752 <cos+0x66>
   1e746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e74a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e74e:	f000 fc73 	bl	1f038 <__kernel_cos>
   1e752:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1e756:	e005      	b.n	1e764 <cos+0x78>
   1e758:	2301      	movs	r3, #1
   1e75a:	9300      	str	r3, [sp, #0]
   1e75c:	4622      	mov	r2, r4
   1e75e:	462b      	mov	r3, r5
   1e760:	f001 f8da 	bl	1f918 <__kernel_sin>
   1e764:	b007      	add	sp, #28
   1e766:	bd30      	pop	{r4, r5, pc}
   1e768:	3fe921fb 	.word	0x3fe921fb
   1e76c:	7fefffff 	.word	0x7fefffff

0001e770 <sin>:
   1e770:	b530      	push	{r4, r5, lr}
   1e772:	4b20      	ldr	r3, [pc, #128]	(1e7f4 <sin+0x84>)
   1e774:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1e778:	429a      	cmp	r2, r3
   1e77a:	b087      	sub	sp, #28
   1e77c:	dc04      	bgt.n	1e788 <sin+0x18>
   1e77e:	2300      	movs	r3, #0
   1e780:	9300      	str	r3, [sp, #0]
   1e782:	2200      	movs	r2, #0
   1e784:	2300      	movs	r3, #0
   1e786:	e019      	b.n	1e7bc <sin+0x4c>
   1e788:	4b1b      	ldr	r3, [pc, #108]	(1e7f8 <sin+0x88>)
   1e78a:	429a      	cmp	r2, r3
   1e78c:	dd04      	ble.n	1e798 <sin+0x28>
   1e78e:	4602      	mov	r2, r0
   1e790:	460b      	mov	r3, r1
   1e792:	f7fb fd9d 	bl	1a2d0 <__aeabi_dsub>
   1e796:	e02a      	b.n	1e7ee <sin+0x7e>
   1e798:	aa02      	add	r2, sp, #8
   1e79a:	f000 f965 	bl	1ea68 <__ieee754_rem_pio2>
   1e79e:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1e7a2:	2b01      	cmp	r3, #1
   1e7a4:	d00d      	beq.n	1e7c2 <sin+0x52>
   1e7a6:	2b02      	cmp	r3, #2
   1e7a8:	d012      	beq.n	1e7d0 <sin+0x60>
   1e7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e7ae:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1e7b2:	b9b3      	cbnz	r3, 1e7e2 <sin+0x72>
   1e7b4:	2301      	movs	r3, #1
   1e7b6:	9300      	str	r3, [sp, #0]
   1e7b8:	4622      	mov	r2, r4
   1e7ba:	462b      	mov	r3, r5
   1e7bc:	f001 f8ac 	bl	1f918 <__kernel_sin>
   1e7c0:	e015      	b.n	1e7ee <sin+0x7e>
   1e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e7ca:	f000 fc35 	bl	1f038 <__kernel_cos>
   1e7ce:	e00e      	b.n	1e7ee <sin+0x7e>
   1e7d0:	2301      	movs	r3, #1
   1e7d2:	9300      	str	r3, [sp, #0]
   1e7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e7d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e7dc:	f001 f89c 	bl	1f918 <__kernel_sin>
   1e7e0:	e003      	b.n	1e7ea <sin+0x7a>
   1e7e2:	4622      	mov	r2, r4
   1e7e4:	462b      	mov	r3, r5
   1e7e6:	f000 fc27 	bl	1f038 <__kernel_cos>
   1e7ea:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1e7ee:	b007      	add	sp, #28
   1e7f0:	bd30      	pop	{r4, r5, pc}
   1e7f2:	46c0      	nop			(mov r8, r8)
   1e7f4:	3fe921fb 	.word	0x3fe921fb
   1e7f8:	7fefffff 	.word	0x7fefffff

0001e7fc <atan2>:
   1e7fc:	b500      	push	{lr}
   1e7fe:	b081      	sub	sp, #4
   1e800:	f000 f856 	bl	1e8b0 <__ieee754_atan2>
   1e804:	b001      	add	sp, #4
   1e806:	bd00      	pop	{pc}

0001e808 <sqrt>:
   1e808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e80a:	b08f      	sub	sp, #60
   1e80c:	4604      	mov	r4, r0
   1e80e:	460d      	mov	r5, r1
   1e810:	f000 fb3e 	bl	1ee90 <__ieee754_sqrt>
   1e814:	4a24      	ldr	r2, [pc, #144]	(1e8a8 <sqrt+0xa0>)
   1e816:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e81a:	f992 3000 	ldrsb.w	r3, [r2]
   1e81e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e822:	d03c      	beq.n	1e89e <sqrt+0x96>
   1e824:	4620      	mov	r0, r4
   1e826:	4629      	mov	r1, r5
   1e828:	f001 fb56 	bl	1fed8 <__isnand>
   1e82c:	9001      	str	r0, [sp, #4]
   1e82e:	2800      	cmp	r0, #0
   1e830:	d135      	bne.n	1e89e <sqrt+0x96>
   1e832:	2600      	movs	r6, #0
   1e834:	2700      	movs	r7, #0
   1e836:	4620      	mov	r0, r4
   1e838:	4629      	mov	r1, r5
   1e83a:	4632      	mov	r2, r6
   1e83c:	463b      	mov	r3, r7
   1e83e:	f7fc f96b 	bl	1ab18 <__aeabi_dcmplt>
   1e842:	2800      	cmp	r0, #0
   1e844:	d02b      	beq.n	1e89e <sqrt+0x96>
   1e846:	2301      	movs	r3, #1
   1e848:	9304      	str	r3, [sp, #16]
   1e84a:	4a17      	ldr	r2, [pc, #92]	(1e8a8 <sqrt+0xa0>)
   1e84c:	4b17      	ldr	r3, [pc, #92]	(1e8ac <sqrt+0xa4>)
   1e84e:	e9cd 4508 	strd	r4, r5, [sp, #32]
   1e852:	9305      	str	r3, [sp, #20]
   1e854:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1e858:	9b01      	ldr	r3, [sp, #4]
   1e85a:	7814      	ldrb	r4, [r2, #0]
   1e85c:	930c      	str	r3, [sp, #48]
   1e85e:	b914      	cbnz	r4, 1e866 <sqrt+0x5e>
   1e860:	e9cd 670a 	strd	r6, r7, [sp, #40]
   1e864:	e009      	b.n	1e87a <sqrt+0x72>
   1e866:	4630      	mov	r0, r6
   1e868:	4639      	mov	r1, r7
   1e86a:	4632      	mov	r2, r6
   1e86c:	463b      	mov	r3, r7
   1e86e:	f7fc f80d 	bl	1a88c <__aeabi_ddiv>
   1e872:	2c02      	cmp	r4, #2
   1e874:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1e878:	d003      	beq.n	1e882 <sqrt+0x7a>
   1e87a:	a804      	add	r0, sp, #16
   1e87c:	f001 fb3a 	bl	1fef4 <matherr>
   1e880:	b918      	cbnz	r0, 1e88a <sqrt+0x82>
   1e882:	f001 fbc5 	bl	20010 <__errno>
   1e886:	2321      	movs	r3, #33
   1e888:	6003      	str	r3, [r0, #0]
   1e88a:	9b0c      	ldr	r3, [sp, #48]
   1e88c:	b11b      	cbz	r3, 1e896 <sqrt+0x8e>
   1e88e:	f001 fbbf 	bl	20010 <__errno>
   1e892:	9b0c      	ldr	r3, [sp, #48]
   1e894:	6003      	str	r3, [r0, #0]
   1e896:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1e89a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e89e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1e8a2:	b00f      	add	sp, #60
   1e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e8a6:	46c0      	nop			(mov r8, r8)
   1e8a8:	20000040 	.word	0x20000040
   1e8ac:	00023488 	.word	0x00023488

0001e8b0 <__ieee754_atan2>:
   1e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8b2:	b089      	sub	sp, #36
   1e8b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e8b8:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1e8bc:	9307      	str	r3, [sp, #28]
   1e8be:	f1c2 0300 	rsb	r3, r2, #0	; 0x0
   1e8c2:	4313      	orrs	r3, r2
   1e8c4:	4616      	mov	r6, r2
   1e8c6:	4a66      	ldr	r2, [pc, #408]	(1ea60 <__ieee754_atan2+0x1b0>)
   1e8c8:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
   1e8cc:	4293      	cmp	r3, r2
   1e8ce:	4604      	mov	r4, r0
   1e8d0:	460d      	mov	r5, r1
   1e8d2:	9001      	str	r0, [sp, #4]
   1e8d4:	d808      	bhi.n	1e8e8 <__ieee754_atan2+0x38>
   1e8d6:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
   1e8da:	4303      	orrs	r3, r0
   1e8dc:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   1e8e0:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   1e8e4:	4293      	cmp	r3, r2
   1e8e6:	d904      	bls.n	1e8f2 <__ieee754_atan2+0x42>
   1e8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e8ec:	f7fb fcf2 	bl	1a2d4 <__adddf3>
   1e8f0:	e08e      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e8f2:	9c07      	ldr	r4, [sp, #28]
   1e8f4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   1e8f8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1e8fc:	4333      	orrs	r3, r6
   1e8fe:	d102      	bne.n	1e906 <__ieee754_atan2+0x56>
   1e900:	f001 f8c2 	bl	1fa88 <atan>
   1e904:	e084      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e906:	9a07      	ldr	r2, [sp, #28]
   1e908:	1793      	asrs	r3, r2, #30
   1e90a:	f003 0302 	and.w	r3, r3, #2	; 0x2
   1e90e:	ea43 74d1 	orr.w	r4, r3, r1, lsr #31
   1e912:	9b01      	ldr	r3, [sp, #4]
   1e914:	ea5c 0303 	orrs.w	r3, ip, r3
   1e918:	d105      	bne.n	1e926 <__ieee754_atan2+0x76>
   1e91a:	2c03      	cmp	r4, #3
   1e91c:	d803      	bhi.n	1e926 <__ieee754_atan2+0x76>
   1e91e:	e8df f004 	tbb	[pc, r4]
   1e922:	7777      	.short	0x7777
   1e924:	2b28      	.short	0x2b28
   1e926:	433e      	orrs	r6, r7
   1e928:	d02c      	beq.n	1e984 <__ieee754_atan2+0xd4>
   1e92a:	4b4d      	ldr	r3, [pc, #308]	(1ea60 <__ieee754_atan2+0x1b0>)
   1e92c:	429f      	cmp	r7, r3
   1e92e:	d126      	bne.n	1e97e <__ieee754_atan2+0xce>
   1e930:	45bc      	cmp	ip, r7
   1e932:	d111      	bne.n	1e958 <__ieee754_atan2+0xa8>
   1e934:	2c03      	cmp	r4, #3
   1e936:	d822      	bhi.n	1e97e <__ieee754_atan2+0xce>
   1e938:	e8df f004 	tbb	[pc, r4]
   1e93c:	0b080205 	.word	0x0b080205
   1e940:	a035      	add	r0, pc, #212	(adr r0, 1ea18 <__ieee754_atan2+0x168>)
   1e942:	c803      	ldmia	r0!, {r0, r1}
   1e944:	e064      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e946:	a036      	add	r0, pc, #216	(adr r0, 1ea20 <__ieee754_atan2+0x170>)
   1e948:	c803      	ldmia	r0!, {r0, r1}
   1e94a:	e061      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e94c:	a036      	add	r0, pc, #216	(adr r0, 1ea28 <__ieee754_atan2+0x178>)
   1e94e:	c803      	ldmia	r0!, {r0, r1}
   1e950:	e05e      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e952:	a037      	add	r0, pc, #220	(adr r0, 1ea30 <__ieee754_atan2+0x180>)
   1e954:	c803      	ldmia	r0!, {r0, r1}
   1e956:	e05b      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e958:	2c03      	cmp	r4, #3
   1e95a:	d810      	bhi.n	1e97e <__ieee754_atan2+0xce>
   1e95c:	e8df f004 	tbb	[pc, r4]
   1e960:	0c090206 	.word	0x0c090206
   1e964:	2000      	movs	r0, #0
   1e966:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1e96a:	e051      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e96c:	2000      	movs	r0, #0
   1e96e:	2100      	movs	r1, #0
   1e970:	e04e      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e972:	a031      	add	r0, pc, #196	(adr r0, 1ea38 <__ieee754_atan2+0x188>)
   1e974:	c803      	ldmia	r0!, {r0, r1}
   1e976:	e04b      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e978:	a031      	add	r0, pc, #196	(adr r0, 1ea40 <__ieee754_atan2+0x190>)
   1e97a:	c803      	ldmia	r0!, {r0, r1}
   1e97c:	e048      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e97e:	4b38      	ldr	r3, [pc, #224]	(1ea60 <__ieee754_atan2+0x1b0>)
   1e980:	459c      	cmp	ip, r3
   1e982:	d107      	bne.n	1e994 <__ieee754_atan2+0xe4>
   1e984:	2d00      	cmp	r5, #0
   1e986:	db02      	blt.n	1e98e <__ieee754_atan2+0xde>
   1e988:	a02f      	add	r0, pc, #188	(adr r0, 1ea48 <__ieee754_atan2+0x198>)
   1e98a:	c803      	ldmia	r0!, {r0, r1}
   1e98c:	e040      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e98e:	a030      	add	r0, pc, #192	(adr r0, 1ea50 <__ieee754_atan2+0x1a0>)
   1e990:	c803      	ldmia	r0!, {r0, r1}
   1e992:	e03d      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e994:	ebc7 030c 	rsb	r3, r7, ip
   1e998:	151b      	asrs	r3, r3, #20
   1e99a:	2b3c      	cmp	r3, #60
   1e99c:	dd02      	ble.n	1e9a4 <__ieee754_atan2+0xf4>
   1e99e:	a22a      	add	r2, pc, #168	(adr r2, 1ea48 <__ieee754_atan2+0x198>)
   1e9a0:	ca0c      	ldmia	r2!, {r2, r3}
   1e9a2:	e015      	b.n	1e9d0 <__ieee754_atan2+0x120>
   1e9a4:	9a07      	ldr	r2, [sp, #28]
   1e9a6:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
   1e9aa:	bfac      	ite	ge
   1e9ac:	2300      	movge	r3, #0
   1e9ae:	2301      	movlt	r3, #1
   1e9b0:	ea13 72d2 	ands.w	r2, r3, r2, lsr #31
   1e9b4:	d002      	beq.n	1e9bc <__ieee754_atan2+0x10c>
   1e9b6:	2200      	movs	r2, #0
   1e9b8:	2300      	movs	r3, #0
   1e9ba:	e009      	b.n	1e9d0 <__ieee754_atan2+0x120>
   1e9bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e9c0:	f7fb ff64 	bl	1a88c <__aeabi_ddiv>
   1e9c4:	f001 fa08 	bl	1fdd8 <fabs>
   1e9c8:	f001 f85e 	bl	1fa88 <atan>
   1e9cc:	4602      	mov	r2, r0
   1e9ce:	460b      	mov	r3, r1
   1e9d0:	2c01      	cmp	r4, #1
   1e9d2:	d003      	beq.n	1e9dc <__ieee754_atan2+0x12c>
   1e9d4:	2c02      	cmp	r4, #2
   1e9d6:	d006      	beq.n	1e9e6 <__ieee754_atan2+0x136>
   1e9d8:	b984      	cbnz	r4, 1e9fc <__ieee754_atan2+0x14c>
   1e9da:	e001      	b.n	1e9e0 <__ieee754_atan2+0x130>
   1e9dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e9e0:	4610      	mov	r0, r2
   1e9e2:	4619      	mov	r1, r3
   1e9e4:	e014      	b.n	1ea10 <__ieee754_atan2+0x160>
   1e9e6:	4610      	mov	r0, r2
   1e9e8:	4619      	mov	r1, r3
   1e9ea:	a21b      	add	r2, pc, #108	(adr r2, 1ea58 <__ieee754_atan2+0x1a8>)
   1e9ec:	ca0c      	ldmia	r2!, {r2, r3}
   1e9ee:	f7fb fc6f 	bl	1a2d0 <__aeabi_dsub>
   1e9f2:	4602      	mov	r2, r0
   1e9f4:	460b      	mov	r3, r1
   1e9f6:	a010      	add	r0, pc, #64	(adr r0, 1ea38 <__ieee754_atan2+0x188>)
   1e9f8:	c803      	ldmia	r0!, {r0, r1}
   1e9fa:	e007      	b.n	1ea0c <__ieee754_atan2+0x15c>
   1e9fc:	4610      	mov	r0, r2
   1e9fe:	4619      	mov	r1, r3
   1ea00:	a215      	add	r2, pc, #84	(adr r2, 1ea58 <__ieee754_atan2+0x1a8>)
   1ea02:	ca0c      	ldmia	r2!, {r2, r3}
   1ea04:	f7fb fc64 	bl	1a2d0 <__aeabi_dsub>
   1ea08:	a20b      	add	r2, pc, #44	(adr r2, 1ea38 <__ieee754_atan2+0x188>)
   1ea0a:	ca0c      	ldmia	r2!, {r2, r3}
   1ea0c:	f7fb fc60 	bl	1a2d0 <__aeabi_dsub>
   1ea10:	b009      	add	sp, #36
   1ea12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea14:	46c0      	nop			(mov r8, r8)
   1ea16:	46c0      	nop			(mov r8, r8)
   1ea18:	54442d18 	.word	0x54442d18
   1ea1c:	bfe921fb 	.word	0xbfe921fb
   1ea20:	54442d18 	.word	0x54442d18
   1ea24:	3fe921fb 	.word	0x3fe921fb
   1ea28:	7f3321d2 	.word	0x7f3321d2
   1ea2c:	4002d97c 	.word	0x4002d97c
   1ea30:	7f3321d2 	.word	0x7f3321d2
   1ea34:	c002d97c 	.word	0xc002d97c
   1ea38:	54442d18 	.word	0x54442d18
   1ea3c:	400921fb 	.word	0x400921fb
   1ea40:	54442d18 	.word	0x54442d18
   1ea44:	c00921fb 	.word	0xc00921fb
   1ea48:	54442d18 	.word	0x54442d18
   1ea4c:	3ff921fb 	.word	0x3ff921fb
   1ea50:	54442d18 	.word	0x54442d18
   1ea54:	bff921fb 	.word	0xbff921fb
   1ea58:	33145c07 	.word	0x33145c07
   1ea5c:	3ca1a626 	.word	0x3ca1a626
   1ea60:	7ff00000 	.word	0x7ff00000
   1ea64:	46c046c0 	.word	0x46c046c0

0001ea68 <__ieee754_rem_pio2>:
   1ea68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea6a:	4b9b      	ldr	r3, [pc, #620]	(1ecd8 <__ieee754_rem_pio2+0x270>)
   1ea6c:	b093      	sub	sp, #76
   1ea6e:	9206      	str	r2, [sp, #24]
   1ea70:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1ea74:	429a      	cmp	r2, r3
   1ea76:	910a      	str	r1, [sp, #40]
   1ea78:	9209      	str	r2, [sp, #36]
   1ea7a:	dc09      	bgt.n	1ea90 <__ieee754_rem_pio2+0x28>
   1ea7c:	9b06      	ldr	r3, [sp, #24]
   1ea7e:	9e06      	ldr	r6, [sp, #24]
   1ea80:	e883 0003 	stmia.w	r3, {r0, r1}
   1ea84:	2200      	movs	r2, #0
   1ea86:	2300      	movs	r3, #0
   1ea88:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1ea8c:	2200      	movs	r2, #0
   1ea8e:	e17f      	b.n	1ed90 <__ieee754_rem_pio2+0x328>
   1ea90:	4b92      	ldr	r3, [pc, #584]	(1ecdc <__ieee754_rem_pio2+0x274>)
   1ea92:	9a09      	ldr	r2, [sp, #36]
   1ea94:	429a      	cmp	r2, r3
   1ea96:	dc7e      	bgt.n	1eb96 <__ieee754_rem_pio2+0x12e>
   1ea98:	9b0a      	ldr	r3, [sp, #40]
   1ea9a:	2b00      	cmp	r3, #0
   1ea9c:	dd3a      	ble.n	1eb14 <__ieee754_rem_pio2+0xac>
   1ea9e:	a282      	add	r2, pc, #520	(adr r2, 1eca8 <__ieee754_rem_pio2+0x240>)
   1eaa0:	ca0c      	ldmia	r2!, {r2, r3}
   1eaa2:	f7fb fc15 	bl	1a2d0 <__aeabi_dsub>
   1eaa6:	4b8e      	ldr	r3, [pc, #568]	(1ece0 <__ieee754_rem_pio2+0x278>)
   1eaa8:	9e09      	ldr	r6, [sp, #36]
   1eaaa:	4604      	mov	r4, r0
   1eaac:	429e      	cmp	r6, r3
   1eaae:	460d      	mov	r5, r1
   1eab0:	d015      	beq.n	1eade <__ieee754_rem_pio2+0x76>
   1eab2:	a27f      	add	r2, pc, #508	(adr r2, 1ecb0 <__ieee754_rem_pio2+0x248>)
   1eab4:	ca0c      	ldmia	r2!, {r2, r3}
   1eab6:	f7fb fc0b 	bl	1a2d0 <__aeabi_dsub>
   1eaba:	4602      	mov	r2, r0
   1eabc:	9806      	ldr	r0, [sp, #24]
   1eabe:	460b      	mov	r3, r1
   1eac0:	e880 000c 	stmia.w	r0, {r2, r3}
   1eac4:	4629      	mov	r1, r5
   1eac6:	4620      	mov	r0, r4
   1eac8:	f7fb fc02 	bl	1a2d0 <__aeabi_dsub>
   1eacc:	a278      	add	r2, pc, #480	(adr r2, 1ecb0 <__ieee754_rem_pio2+0x248>)
   1eace:	ca0c      	ldmia	r2!, {r2, r3}
   1ead0:	f7fb fbfe 	bl	1a2d0 <__aeabi_dsub>
   1ead4:	9a06      	ldr	r2, [sp, #24]
   1ead6:	2301      	movs	r3, #1
   1ead8:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1eadc:	e168      	b.n	1edb0 <__ieee754_rem_pio2+0x348>
   1eade:	a276      	add	r2, pc, #472	(adr r2, 1ecb8 <__ieee754_rem_pio2+0x250>)
   1eae0:	ca0c      	ldmia	r2!, {r2, r3}
   1eae2:	f7fb fbf5 	bl	1a2d0 <__aeabi_dsub>
   1eae6:	a276      	add	r2, pc, #472	(adr r2, 1ecc0 <__ieee754_rem_pio2+0x258>)
   1eae8:	ca0c      	ldmia	r2!, {r2, r3}
   1eaea:	4604      	mov	r4, r0
   1eaec:	460d      	mov	r5, r1
   1eaee:	f7fb fbef 	bl	1a2d0 <__aeabi_dsub>
   1eaf2:	9e06      	ldr	r6, [sp, #24]
   1eaf4:	4602      	mov	r2, r0
   1eaf6:	460b      	mov	r3, r1
   1eaf8:	e886 000c 	stmia.w	r6, {r2, r3}
   1eafc:	4620      	mov	r0, r4
   1eafe:	4629      	mov	r1, r5
   1eb00:	f7fb fbe6 	bl	1a2d0 <__aeabi_dsub>
   1eb04:	a26e      	add	r2, pc, #440	(adr r2, 1ecc0 <__ieee754_rem_pio2+0x258>)
   1eb06:	ca0c      	ldmia	r2!, {r2, r3}
   1eb08:	f7fb fbe2 	bl	1a2d0 <__aeabi_dsub>
   1eb0c:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1eb10:	2001      	movs	r0, #1
   1eb12:	e1a8      	b.n	1ee66 <__ieee754_rem_pio2+0x3fe>
   1eb14:	a264      	add	r2, pc, #400	(adr r2, 1eca8 <__ieee754_rem_pio2+0x240>)
   1eb16:	ca0c      	ldmia	r2!, {r2, r3}
   1eb18:	f7fb fbdc 	bl	1a2d4 <__adddf3>
   1eb1c:	4b70      	ldr	r3, [pc, #448]	(1ece0 <__ieee754_rem_pio2+0x278>)
   1eb1e:	460d      	mov	r5, r1
   1eb20:	9909      	ldr	r1, [sp, #36]
   1eb22:	4604      	mov	r4, r0
   1eb24:	4299      	cmp	r1, r3
   1eb26:	d017      	beq.n	1eb58 <__ieee754_rem_pio2+0xf0>
   1eb28:	a261      	add	r2, pc, #388	(adr r2, 1ecb0 <__ieee754_rem_pio2+0x248>)
   1eb2a:	ca0c      	ldmia	r2!, {r2, r3}
   1eb2c:	4620      	mov	r0, r4
   1eb2e:	4629      	mov	r1, r5
   1eb30:	f7fb fbd0 	bl	1a2d4 <__adddf3>
   1eb34:	9e06      	ldr	r6, [sp, #24]
   1eb36:	4602      	mov	r2, r0
   1eb38:	460b      	mov	r3, r1
   1eb3a:	e886 000c 	stmia.w	r6, {r2, r3}
   1eb3e:	4620      	mov	r0, r4
   1eb40:	4629      	mov	r1, r5
   1eb42:	f7fb fbc5 	bl	1a2d0 <__aeabi_dsub>
   1eb46:	a25a      	add	r2, pc, #360	(adr r2, 1ecb0 <__ieee754_rem_pio2+0x248>)
   1eb48:	ca0c      	ldmia	r2!, {r2, r3}
   1eb4a:	f7fb fbc3 	bl	1a2d4 <__adddf3>
   1eb4e:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1eb52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1eb56:	e186      	b.n	1ee66 <__ieee754_rem_pio2+0x3fe>
   1eb58:	4620      	mov	r0, r4
   1eb5a:	4629      	mov	r1, r5
   1eb5c:	a256      	add	r2, pc, #344	(adr r2, 1ecb8 <__ieee754_rem_pio2+0x250>)
   1eb5e:	ca0c      	ldmia	r2!, {r2, r3}
   1eb60:	f7fb fbb8 	bl	1a2d4 <__adddf3>
   1eb64:	a256      	add	r2, pc, #344	(adr r2, 1ecc0 <__ieee754_rem_pio2+0x258>)
   1eb66:	ca0c      	ldmia	r2!, {r2, r3}
   1eb68:	4604      	mov	r4, r0
   1eb6a:	460d      	mov	r5, r1
   1eb6c:	f7fb fbb2 	bl	1a2d4 <__adddf3>
   1eb70:	460b      	mov	r3, r1
   1eb72:	9906      	ldr	r1, [sp, #24]
   1eb74:	4602      	mov	r2, r0
   1eb76:	e881 000c 	stmia.w	r1, {r2, r3}
   1eb7a:	4620      	mov	r0, r4
   1eb7c:	4629      	mov	r1, r5
   1eb7e:	f7fb fba7 	bl	1a2d0 <__aeabi_dsub>
   1eb82:	a24f      	add	r2, pc, #316	(adr r2, 1ecc0 <__ieee754_rem_pio2+0x258>)
   1eb84:	ca0c      	ldmia	r2!, {r2, r3}
   1eb86:	f7fb fba5 	bl	1a2d4 <__adddf3>
   1eb8a:	9a06      	ldr	r2, [sp, #24]
   1eb8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1eb90:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1eb94:	e10c      	b.n	1edb0 <__ieee754_rem_pio2+0x348>
   1eb96:	4b53      	ldr	r3, [pc, #332]	(1ece4 <__ieee754_rem_pio2+0x27c>)
   1eb98:	9e09      	ldr	r6, [sp, #36]
   1eb9a:	429e      	cmp	r6, r3
   1eb9c:	f300 80fa 	bgt.w	1ed94 <__ieee754_rem_pio2+0x32c>
   1eba0:	f001 f91a 	bl	1fdd8 <fabs>
   1eba4:	a248      	add	r2, pc, #288	(adr r2, 1ecc8 <__ieee754_rem_pio2+0x260>)
   1eba6:	ca0c      	ldmia	r2!, {r2, r3}
   1eba8:	4604      	mov	r4, r0
   1ebaa:	460d      	mov	r5, r1
   1ebac:	f7fb fd44 	bl	1a638 <__aeabi_dmul>
   1ebb0:	2200      	movs	r2, #0
   1ebb2:	4b4d      	ldr	r3, [pc, #308]	(1ece8 <__ieee754_rem_pio2+0x280>)
   1ebb4:	f7fb fb8e 	bl	1a2d4 <__adddf3>
   1ebb8:	f7fb ffd6 	bl	1ab68 <__aeabi_d2iz>
   1ebbc:	9008      	str	r0, [sp, #32]
   1ebbe:	f7fb fcd5 	bl	1a56c <__aeabi_i2d>
   1ebc2:	a243      	add	r2, pc, #268	(adr r2, 1ecd0 <__ieee754_rem_pio2+0x268>)
   1ebc4:	ca0c      	ldmia	r2!, {r2, r3}
   1ebc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1ebca:	f7fb fd35 	bl	1a638 <__aeabi_dmul>
   1ebce:	4602      	mov	r2, r0
   1ebd0:	460b      	mov	r3, r1
   1ebd2:	4620      	mov	r0, r4
   1ebd4:	4629      	mov	r1, r5
   1ebd6:	f7fb fb7d 	bl	1a2d4 <__adddf3>
   1ebda:	a235      	add	r2, pc, #212	(adr r2, 1ecb0 <__ieee754_rem_pio2+0x248>)
   1ebdc:	ca0c      	ldmia	r2!, {r2, r3}
   1ebde:	4606      	mov	r6, r0
   1ebe0:	460f      	mov	r7, r1
   1ebe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ebe6:	f7fb fd27 	bl	1a638 <__aeabi_dmul>
   1ebea:	4604      	mov	r4, r0
   1ebec:	9808      	ldr	r0, [sp, #32]
   1ebee:	460d      	mov	r5, r1
   1ebf0:	281f      	cmp	r0, #31
   1ebf2:	dc07      	bgt.n	1ec04 <__ieee754_rem_pio2+0x19c>
   1ebf4:	4a3d      	ldr	r2, [pc, #244]	(1ecec <__ieee754_rem_pio2+0x284>)
   1ebf6:	1e43      	subs	r3, r0, #1
   1ebf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ebfc:	9909      	ldr	r1, [sp, #36]
   1ebfe:	4299      	cmp	r1, r3
   1ec00:	f040 809e 	bne.w	1ed40 <__ieee754_rem_pio2+0x2d8>
   1ec04:	462b      	mov	r3, r5
   1ec06:	4630      	mov	r0, r6
   1ec08:	4639      	mov	r1, r7
   1ec0a:	4622      	mov	r2, r4
   1ec0c:	f7fb fb60 	bl	1a2d0 <__aeabi_dsub>
   1ec10:	9b06      	ldr	r3, [sp, #24]
   1ec12:	e883 0003 	stmia.w	r3, {r0, r1}
   1ec16:	0d0b      	lsrs	r3, r1, #20
   1ec18:	9809      	ldr	r0, [sp, #36]
   1ec1a:	055b      	lsls	r3, r3, #21
   1ec1c:	1500      	asrs	r0, r0, #20
   1ec1e:	0d5b      	lsrs	r3, r3, #21
   1ec20:	ebc3 0300 	rsb	r3, r3, r0
   1ec24:	2b10      	cmp	r3, #16
   1ec26:	9007      	str	r0, [sp, #28]
   1ec28:	f340 8093 	ble.w	1ed52 <__ieee754_rem_pio2+0x2ea>
   1ec2c:	a222      	add	r2, pc, #136	(adr r2, 1ecb8 <__ieee754_rem_pio2+0x250>)
   1ec2e:	ca0c      	ldmia	r2!, {r2, r3}
   1ec30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ec34:	f7fb fd00 	bl	1a638 <__aeabi_dmul>
   1ec38:	4604      	mov	r4, r0
   1ec3a:	460d      	mov	r5, r1
   1ec3c:	4622      	mov	r2, r4
   1ec3e:	462b      	mov	r3, r5
   1ec40:	4630      	mov	r0, r6
   1ec42:	4639      	mov	r1, r7
   1ec44:	f7fb fb44 	bl	1a2d0 <__aeabi_dsub>
   1ec48:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ec4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ec50:	4630      	mov	r0, r6
   1ec52:	4639      	mov	r1, r7
   1ec54:	f7fb fb3c 	bl	1a2d0 <__aeabi_dsub>
   1ec58:	4622      	mov	r2, r4
   1ec5a:	462b      	mov	r3, r5
   1ec5c:	f7fb fb38 	bl	1a2d0 <__aeabi_dsub>
   1ec60:	a217      	add	r2, pc, #92	(adr r2, 1ecc0 <__ieee754_rem_pio2+0x258>)
   1ec62:	ca0c      	ldmia	r2!, {r2, r3}
   1ec64:	4604      	mov	r4, r0
   1ec66:	460d      	mov	r5, r1
   1ec68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ec6c:	f7fb fce4 	bl	1a638 <__aeabi_dmul>
   1ec70:	4622      	mov	r2, r4
   1ec72:	462b      	mov	r3, r5
   1ec74:	f7fb fb2c 	bl	1a2d0 <__aeabi_dsub>
   1ec78:	4604      	mov	r4, r0
   1ec7a:	460d      	mov	r5, r1
   1ec7c:	4622      	mov	r2, r4
   1ec7e:	462b      	mov	r3, r5
   1ec80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ec84:	f7fb fb24 	bl	1a2d0 <__aeabi_dsub>
   1ec88:	0d0b      	lsrs	r3, r1, #20
   1ec8a:	055b      	lsls	r3, r3, #21
   1ec8c:	9e07      	ldr	r6, [sp, #28]
   1ec8e:	0d5b      	lsrs	r3, r3, #21
   1ec90:	9a06      	ldr	r2, [sp, #24]
   1ec92:	ebc3 0306 	rsb	r3, r3, r6
   1ec96:	2b31      	cmp	r3, #49
   1ec98:	e882 0003 	stmia.w	r2, {r0, r1}
   1ec9c:	dc28      	bgt.n	1ecf0 <__ieee754_rem_pio2+0x288>
   1ec9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1eca2:	e056      	b.n	1ed52 <__ieee754_rem_pio2+0x2ea>
   1eca4:	46c0      	nop			(mov r8, r8)
   1eca6:	46c0      	nop			(mov r8, r8)
   1eca8:	54400000 	.word	0x54400000
   1ecac:	3ff921fb 	.word	0x3ff921fb
   1ecb0:	1a626331 	.word	0x1a626331
   1ecb4:	3dd0b461 	.word	0x3dd0b461
   1ecb8:	1a600000 	.word	0x1a600000
   1ecbc:	3dd0b461 	.word	0x3dd0b461
   1ecc0:	2e037073 	.word	0x2e037073
   1ecc4:	3ba3198a 	.word	0x3ba3198a
   1ecc8:	6dc9c883 	.word	0x6dc9c883
   1eccc:	3fe45f30 	.word	0x3fe45f30
   1ecd0:	54400000 	.word	0x54400000
   1ecd4:	bff921fb 	.word	0xbff921fb
   1ecd8:	3fe921fb 	.word	0x3fe921fb
   1ecdc:	4002d97b 	.word	0x4002d97b
   1ece0:	3ff921fb 	.word	0x3ff921fb
   1ece4:	413921fb 	.word	0x413921fb
   1ece8:	3fe00000 	.word	0x3fe00000
   1ecec:	00023490 	.word	0x00023490
   1ecf0:	a25f      	add	r2, pc, #380	(adr r2, 1ee70 <__ieee754_rem_pio2+0x408>)
   1ecf2:	ca0c      	ldmia	r2!, {r2, r3}
   1ecf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ecf8:	f7fb fc9e 	bl	1a638 <__aeabi_dmul>
   1ecfc:	4604      	mov	r4, r0
   1ecfe:	460d      	mov	r5, r1
   1ed00:	4622      	mov	r2, r4
   1ed02:	462b      	mov	r3, r5
   1ed04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ed08:	f7fb fae2 	bl	1a2d0 <__aeabi_dsub>
   1ed0c:	4606      	mov	r6, r0
   1ed0e:	460f      	mov	r7, r1
   1ed10:	4632      	mov	r2, r6
   1ed12:	463b      	mov	r3, r7
   1ed14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ed18:	f7fb fada 	bl	1a2d0 <__aeabi_dsub>
   1ed1c:	4622      	mov	r2, r4
   1ed1e:	462b      	mov	r3, r5
   1ed20:	f7fb fad6 	bl	1a2d0 <__aeabi_dsub>
   1ed24:	a254      	add	r2, pc, #336	(adr r2, 1ee78 <__ieee754_rem_pio2+0x410>)
   1ed26:	ca0c      	ldmia	r2!, {r2, r3}
   1ed28:	4604      	mov	r4, r0
   1ed2a:	460d      	mov	r5, r1
   1ed2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1ed30:	f7fb fc82 	bl	1a638 <__aeabi_dmul>
   1ed34:	4622      	mov	r2, r4
   1ed36:	462b      	mov	r3, r5
   1ed38:	f7fb faca 	bl	1a2d0 <__aeabi_dsub>
   1ed3c:	4604      	mov	r4, r0
   1ed3e:	460d      	mov	r5, r1
   1ed40:	4622      	mov	r2, r4
   1ed42:	4630      	mov	r0, r6
   1ed44:	4639      	mov	r1, r7
   1ed46:	462b      	mov	r3, r5
   1ed48:	f7fb fac2 	bl	1a2d0 <__aeabi_dsub>
   1ed4c:	9a06      	ldr	r2, [sp, #24]
   1ed4e:	e882 0003 	stmia.w	r2, {r0, r1}
   1ed52:	9b06      	ldr	r3, [sp, #24]
   1ed54:	4630      	mov	r0, r6
   1ed56:	9e06      	ldr	r6, [sp, #24]
   1ed58:	3308      	adds	r3, #8
   1ed5a:	930b      	str	r3, [sp, #44]
   1ed5c:	4639      	mov	r1, r7
   1ed5e:	e896 000c 	ldmia.w	r6, {r2, r3}
   1ed62:	f7fb fab5 	bl	1a2d0 <__aeabi_dsub>
   1ed66:	4622      	mov	r2, r4
   1ed68:	462b      	mov	r3, r5
   1ed6a:	f7fb fab1 	bl	1a2d0 <__aeabi_dsub>
   1ed6e:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1ed72:	980a      	ldr	r0, [sp, #40]
   1ed74:	2800      	cmp	r0, #0
   1ed76:	da77      	bge.n	1ee68 <__ieee754_rem_pio2+0x400>
   1ed78:	6873      	ldr	r3, [r6, #4]
   1ed7a:	990b      	ldr	r1, [sp, #44]
   1ed7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ed80:	6073      	str	r3, [r6, #4]
   1ed82:	684b      	ldr	r3, [r1, #4]
   1ed84:	9a08      	ldr	r2, [sp, #32]
   1ed86:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ed8a:	604b      	str	r3, [r1, #4]
   1ed8c:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1ed90:	9208      	str	r2, [sp, #32]
   1ed92:	e069      	b.n	1ee68 <__ieee754_rem_pio2+0x400>
   1ed94:	4b3a      	ldr	r3, [pc, #232]	(1ee80 <__ieee754_rem_pio2+0x418>)
   1ed96:	9e09      	ldr	r6, [sp, #36]
   1ed98:	429e      	cmp	r6, r3
   1ed9a:	dd0b      	ble.n	1edb4 <__ieee754_rem_pio2+0x34c>
   1ed9c:	4602      	mov	r2, r0
   1ed9e:	460b      	mov	r3, r1
   1eda0:	f7fb fa96 	bl	1a2d0 <__aeabi_dsub>
   1eda4:	9a06      	ldr	r2, [sp, #24]
   1eda6:	2300      	movs	r3, #0
   1eda8:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1edac:	e882 0003 	stmia.w	r2, {r0, r1}
   1edb0:	9308      	str	r3, [sp, #32]
   1edb2:	e059      	b.n	1ee68 <__ieee754_rem_pio2+0x400>
   1edb4:	9e09      	ldr	r6, [sp, #36]
   1edb6:	4602      	mov	r2, r0
   1edb8:	1531      	asrs	r1, r6, #20
   1edba:	f5a1 6682 	sub.w	r6, r1, #1040	; 0x410
   1edbe:	9809      	ldr	r0, [sp, #36]
   1edc0:	3e06      	subs	r6, #6
   1edc2:	eba0 5306 	sub.w	r3, r0, r6, lsl #20
   1edc6:	4619      	mov	r1, r3
   1edc8:	4610      	mov	r0, r2
   1edca:	4614      	mov	r4, r2
   1edcc:	461d      	mov	r5, r3
   1edce:	f7fb fecb 	bl	1ab68 <__aeabi_d2iz>
   1edd2:	f7fb fbcb 	bl	1a56c <__aeabi_i2d>
   1edd6:	4602      	mov	r2, r0
   1edd8:	460b      	mov	r3, r1
   1edda:	4620      	mov	r0, r4
   1eddc:	4629      	mov	r1, r5
   1edde:	e9cd 230c 	strd	r2, r3, [sp, #48]
   1ede2:	f7fb fa75 	bl	1a2d0 <__aeabi_dsub>
   1ede6:	2200      	movs	r2, #0
   1ede8:	4b26      	ldr	r3, [pc, #152]	(1ee84 <__ieee754_rem_pio2+0x41c>)
   1edea:	f7fb fc25 	bl	1a638 <__aeabi_dmul>
   1edee:	460d      	mov	r5, r1
   1edf0:	4604      	mov	r4, r0
   1edf2:	f7fb feb9 	bl	1ab68 <__aeabi_d2iz>
   1edf6:	f7fb fbb9 	bl	1a56c <__aeabi_i2d>
   1edfa:	4602      	mov	r2, r0
   1edfc:	460b      	mov	r3, r1
   1edfe:	4620      	mov	r0, r4
   1ee00:	4629      	mov	r1, r5
   1ee02:	e9cd 230e 	strd	r2, r3, [sp, #56]
   1ee06:	f7fb fa63 	bl	1a2d0 <__aeabi_dsub>
   1ee0a:	2200      	movs	r2, #0
   1ee0c:	4b1d      	ldr	r3, [pc, #116]	(1ee84 <__ieee754_rem_pio2+0x41c>)
   1ee0e:	f7fb fc13 	bl	1a638 <__aeabi_dmul>
   1ee12:	e9cd 0110 	strd	r0, r1, [sp, #64]
   1ee16:	ad0c      	add	r5, sp, #48
   1ee18:	2403      	movs	r4, #3
   1ee1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   1ee1e:	2200      	movs	r2, #0
   1ee20:	2300      	movs	r3, #0
   1ee22:	4627      	mov	r7, r4
   1ee24:	3d08      	subs	r5, #8
   1ee26:	3c01      	subs	r4, #1
   1ee28:	f7fb fe6c 	bl	1ab04 <__aeabi_dcmpeq>
   1ee2c:	2800      	cmp	r0, #0
   1ee2e:	d1f4      	bne.n	1ee1a <__ieee754_rem_pio2+0x3b2>
   1ee30:	2302      	movs	r3, #2
   1ee32:	9300      	str	r3, [sp, #0]
   1ee34:	4b14      	ldr	r3, [pc, #80]	(1ee88 <__ieee754_rem_pio2+0x420>)
   1ee36:	9906      	ldr	r1, [sp, #24]
   1ee38:	9301      	str	r3, [sp, #4]
   1ee3a:	a80c      	add	r0, sp, #48
   1ee3c:	4632      	mov	r2, r6
   1ee3e:	463b      	mov	r3, r7
   1ee40:	f000 f9da 	bl	1f1f8 <__kernel_rem_pio2>
   1ee44:	990a      	ldr	r1, [sp, #40]
   1ee46:	9008      	str	r0, [sp, #32]
   1ee48:	2900      	cmp	r1, #0
   1ee4a:	da0d      	bge.n	1ee68 <__ieee754_rem_pio2+0x400>
   1ee4c:	9a06      	ldr	r2, [sp, #24]
   1ee4e:	f1c0 0000 	rsb	r0, r0, #0	; 0x0
   1ee52:	6853      	ldr	r3, [r2, #4]
   1ee54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ee58:	6053      	str	r3, [r2, #4]
   1ee5a:	f102 0208 	add.w	r2, r2, #8	; 0x8
   1ee5e:	6853      	ldr	r3, [r2, #4]
   1ee60:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ee64:	6053      	str	r3, [r2, #4]
   1ee66:	9008      	str	r0, [sp, #32]
   1ee68:	9808      	ldr	r0, [sp, #32]
   1ee6a:	b013      	add	sp, #76
   1ee6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee6e:	46c0      	nop			(mov r8, r8)
   1ee70:	2e000000 	.word	0x2e000000
   1ee74:	3ba3198a 	.word	0x3ba3198a
   1ee78:	252049c1 	.word	0x252049c1
   1ee7c:	397b839a 	.word	0x397b839a
   1ee80:	7fefffff 	.word	0x7fefffff
   1ee84:	41700000 	.word	0x41700000
   1ee88:	00023510 	.word	0x00023510
   1ee8c:	46c046c0 	.word	0x46c046c0

0001ee90 <__ieee754_sqrt>:
   1ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee92:	4b67      	ldr	r3, [pc, #412]	(1f030 <__ieee754_sqrt+0x1a0>)
   1ee94:	4a66      	ldr	r2, [pc, #408]	(1f030 <__ieee754_sqrt+0x1a0>)
   1ee96:	ea01 0303 	and.w	r3, r1, r3
   1ee9a:	4604      	mov	r4, r0
   1ee9c:	4293      	cmp	r3, r2
   1ee9e:	b083      	sub	sp, #12
   1eea0:	460d      	mov	r5, r1
   1eea2:	4608      	mov	r0, r1
   1eea4:	46a4      	mov	ip, r4
   1eea6:	d10b      	bne.n	1eec0 <__ieee754_sqrt+0x30>
   1eea8:	4622      	mov	r2, r4
   1eeaa:	462b      	mov	r3, r5
   1eeac:	4620      	mov	r0, r4
   1eeae:	f7fb fbc3 	bl	1a638 <__aeabi_dmul>
   1eeb2:	4602      	mov	r2, r0
   1eeb4:	460b      	mov	r3, r1
   1eeb6:	4620      	mov	r0, r4
   1eeb8:	4629      	mov	r1, r5
   1eeba:	f7fb fa0b 	bl	1a2d4 <__adddf3>
   1eebe:	e010      	b.n	1eee2 <__ieee754_sqrt+0x52>
   1eec0:	2900      	cmp	r1, #0
   1eec2:	dc11      	bgt.n	1eee8 <__ieee754_sqrt+0x58>
   1eec4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1eec8:	4323      	orrs	r3, r4
   1eeca:	f000 80ad 	beq.w	1f028 <__ieee754_sqrt+0x198>
   1eece:	b159      	cbz	r1, 1eee8 <__ieee754_sqrt+0x58>
   1eed0:	4622      	mov	r2, r4
   1eed2:	460b      	mov	r3, r1
   1eed4:	4620      	mov	r0, r4
   1eed6:	f7fb f9fb 	bl	1a2d0 <__aeabi_dsub>
   1eeda:	4602      	mov	r2, r0
   1eedc:	460b      	mov	r3, r1
   1eede:	f7fb fcd5 	bl	1a88c <__aeabi_ddiv>
   1eee2:	4604      	mov	r4, r0
   1eee4:	460d      	mov	r5, r1
   1eee6:	e09f      	b.n	1f028 <__ieee754_sqrt+0x198>
   1eee8:	1501      	asrs	r1, r0, #20
   1eeea:	d005      	beq.n	1eef8 <__ieee754_sqrt+0x68>
   1eeec:	e018      	b.n	1ef20 <__ieee754_sqrt+0x90>
   1eeee:	ea4f 20dc 	mov.w	r0, ip, lsr #11
   1eef2:	3915      	subs	r1, #21
   1eef4:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   1eef8:	2800      	cmp	r0, #0
   1eefa:	d0f8      	beq.n	1eeee <__ieee754_sqrt+0x5e>
   1eefc:	2200      	movs	r2, #0
   1eefe:	e001      	b.n	1ef04 <__ieee754_sqrt+0x74>
   1ef00:	0040      	lsls	r0, r0, #1
   1ef02:	3201      	adds	r2, #1
   1ef04:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1ef08:	d0fa      	beq.n	1ef00 <__ieee754_sqrt+0x70>
   1ef0a:	1c4b      	adds	r3, r1, #1
   1ef0c:	ebc2 0103 	rsb	r1, r2, r3
   1ef10:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1ef14:	fa2c f303 	lsr.w	r3, ip, r3
   1ef18:	fa0c fc02 	lsl.w	ip, ip, r2
   1ef1c:	ea43 0000 	orr.w	r0, r3, r0
   1ef20:	f5a1 717e 	sub.w	r1, r1, #1016	; 0x3f8
   1ef24:	1fcb      	subs	r3, r1, #7
   1ef26:	9301      	str	r3, [sp, #4]
   1ef28:	9c01      	ldr	r4, [sp, #4]
   1ef2a:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1ef2e:	f014 0f01 	tst.w	r4, #1	; 0x1
   1ef32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1ef36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
   1ef3a:	bf1e      	ittt	ne
   1ef3c:	ea4f 73dc 	movne.w	r3, ip, lsr #31
   1ef40:	ea4f 0c4c 	movne.w	ip, ip, lsl #1
   1ef44:	eb03 0242 	addne.w	r2, r3, r2, lsl #1
   1ef48:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1ef4c:	2500      	movs	r5, #0
   1ef4e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1ef52:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1ef56:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   1ef5a:	9500      	str	r5, [sp, #0]
   1ef5c:	2400      	movs	r4, #0
   1ef5e:	eb05 0300 	add.w	r3, r5, r0
   1ef62:	4293      	cmp	r3, r2
   1ef64:	dc05      	bgt.n	1ef72 <__ieee754_sqrt+0xe2>
   1ef66:	eb03 0500 	add.w	r5, r3, r0
   1ef6a:	1ad2      	subs	r2, r2, r3
   1ef6c:	9b00      	ldr	r3, [sp, #0]
   1ef6e:	181b      	adds	r3, r3, r0
   1ef70:	9300      	str	r3, [sp, #0]
   1ef72:	3401      	adds	r4, #1
   1ef74:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1ef78:	0840      	lsrs	r0, r0, #1
   1ef7a:	2c16      	cmp	r4, #22
   1ef7c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1ef80:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1ef84:	d1eb      	bne.n	1ef5e <__ieee754_sqrt+0xce>
   1ef86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1ef8a:	2700      	movs	r7, #0
   1ef8c:	2000      	movs	r0, #0
   1ef8e:	2600      	movs	r6, #0
   1ef90:	4295      	cmp	r5, r2
   1ef92:	eb01 0407 	add.w	r4, r1, r7
   1ef96:	db08      	blt.n	1efaa <__ieee754_sqrt+0x11a>
   1ef98:	bf14      	ite	ne
   1ef9a:	2300      	movne	r3, #0
   1ef9c:	2301      	moveq	r3, #1
   1ef9e:	4564      	cmp	r4, ip
   1efa0:	bf8c      	ite	hi
   1efa2:	2300      	movhi	r3, #0
   1efa4:	f003 0301 	andls.w	r3, r3, #1	; 0x1
   1efa8:	b19b      	cbz	r3, 1efd2 <__ieee754_sqrt+0x142>
   1efaa:	f004 4300 	and.w	r3, r4, #2147483648	; 0x80000000
   1efae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1efb2:	eb04 0701 	add.w	r7, r4, r1
   1efb6:	d103      	bne.n	1efc0 <__ieee754_sqrt+0x130>
   1efb8:	421f      	tst	r7, r3
   1efba:	d101      	bne.n	1efc0 <__ieee754_sqrt+0x130>
   1efbc:	1c6b      	adds	r3, r5, #1
   1efbe:	e000      	b.n	1efc2 <__ieee754_sqrt+0x132>
   1efc0:	462b      	mov	r3, r5
   1efc2:	1b52      	subs	r2, r2, r5
   1efc4:	45a4      	cmp	ip, r4
   1efc6:	bf38      	it	cc
   1efc8:	3a01      	subcc	r2, #1
   1efca:	ebc4 0c0c 	rsb	ip, r4, ip
   1efce:	1840      	adds	r0, r0, r1
   1efd0:	461d      	mov	r5, r3
   1efd2:	3601      	adds	r6, #1
   1efd4:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1efd8:	0849      	lsrs	r1, r1, #1
   1efda:	2e20      	cmp	r6, #32
   1efdc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1efe0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1efe4:	d1d4      	bne.n	1ef90 <__ieee754_sqrt+0x100>
   1efe6:	ea52 020c 	orrs.w	r2, r2, ip
   1efea:	d00a      	beq.n	1f002 <__ieee754_sqrt+0x172>
   1efec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1eff0:	bf1c      	itt	ne
   1eff2:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1eff6:	1818      	addne	r0, r3, r0
   1eff8:	d103      	bne.n	1f002 <__ieee754_sqrt+0x172>
   1effa:	9c00      	ldr	r4, [sp, #0]
   1effc:	2000      	movs	r0, #0
   1effe:	3401      	adds	r4, #1
   1f000:	9400      	str	r4, [sp, #0]
   1f002:	9b00      	ldr	r3, [sp, #0]
   1f004:	9c01      	ldr	r4, [sp, #4]
   1f006:	0840      	lsrs	r0, r0, #1
   1f008:	f013 0f01 	tst.w	r3, #1	; 0x1
   1f00c:	bf18      	it	ne
   1f00e:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   1f012:	1061      	asrs	r1, r4, #1
   1f014:	0509      	lsls	r1, r1, #20
   1f016:	9c00      	ldr	r4, [sp, #0]
   1f018:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
   1f01c:	f501 01c0 	add.w	r1, r1, #6291456	; 0x600000
   1f020:	eb01 0364 	add.w	r3, r1, r4, asr #1
   1f024:	461d      	mov	r5, r3
   1f026:	4604      	mov	r4, r0
   1f028:	4620      	mov	r0, r4
   1f02a:	4629      	mov	r1, r5
   1f02c:	b003      	add	sp, #12
   1f02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f030:	7ff00000 	.word	0x7ff00000
   1f034:	00000000 	.word	0x00000000

0001f038 <__kernel_cos>:
   1f038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f03a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1f03e:	b08d      	sub	sp, #52
   1f040:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
   1f044:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1f048:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f04c:	da05      	bge.n	1f05a <__kernel_cos+0x22>
   1f04e:	f7fb fd8b 	bl	1ab68 <__aeabi_d2iz>
   1f052:	b910      	cbnz	r0, 1f05a <__kernel_cos+0x22>
   1f054:	2000      	movs	r0, #0
   1f056:	4962      	ldr	r1, [pc, #392]	(1f1e0 <__kernel_cos+0x1a8>)
   1f058:	e0a8      	b.n	1f1ac <__kernel_cos+0x174>
   1f05a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f05e:	4602      	mov	r2, r0
   1f060:	460b      	mov	r3, r1
   1f062:	f7fb fae9 	bl	1a638 <__aeabi_dmul>
   1f066:	a252      	add	r2, pc, #328	(adr r2, 1f1b0 <__kernel_cos+0x178>)
   1f068:	ca0c      	ldmia	r2!, {r2, r3}
   1f06a:	4606      	mov	r6, r0
   1f06c:	460f      	mov	r7, r1
   1f06e:	f7fb fae3 	bl	1a638 <__aeabi_dmul>
   1f072:	a251      	add	r2, pc, #324	(adr r2, 1f1b8 <__kernel_cos+0x180>)
   1f074:	ca0c      	ldmia	r2!, {r2, r3}
   1f076:	f7fb f92d 	bl	1a2d4 <__adddf3>
   1f07a:	4602      	mov	r2, r0
   1f07c:	460b      	mov	r3, r1
   1f07e:	4630      	mov	r0, r6
   1f080:	4639      	mov	r1, r7
   1f082:	f7fb fad9 	bl	1a638 <__aeabi_dmul>
   1f086:	a24e      	add	r2, pc, #312	(adr r2, 1f1c0 <__kernel_cos+0x188>)
   1f088:	ca0c      	ldmia	r2!, {r2, r3}
   1f08a:	f7fb f921 	bl	1a2d0 <__aeabi_dsub>
   1f08e:	4602      	mov	r2, r0
   1f090:	460b      	mov	r3, r1
   1f092:	4630      	mov	r0, r6
   1f094:	4639      	mov	r1, r7
   1f096:	f7fb facf 	bl	1a638 <__aeabi_dmul>
   1f09a:	a24b      	add	r2, pc, #300	(adr r2, 1f1c8 <__kernel_cos+0x190>)
   1f09c:	ca0c      	ldmia	r2!, {r2, r3}
   1f09e:	f7fb f919 	bl	1a2d4 <__adddf3>
   1f0a2:	4602      	mov	r2, r0
   1f0a4:	460b      	mov	r3, r1
   1f0a6:	4630      	mov	r0, r6
   1f0a8:	4639      	mov	r1, r7
   1f0aa:	f7fb fac5 	bl	1a638 <__aeabi_dmul>
   1f0ae:	a248      	add	r2, pc, #288	(adr r2, 1f1d0 <__kernel_cos+0x198>)
   1f0b0:	ca0c      	ldmia	r2!, {r2, r3}
   1f0b2:	f7fb f90d 	bl	1a2d0 <__aeabi_dsub>
   1f0b6:	4602      	mov	r2, r0
   1f0b8:	460b      	mov	r3, r1
   1f0ba:	4630      	mov	r0, r6
   1f0bc:	4639      	mov	r1, r7
   1f0be:	f7fb fabb 	bl	1a638 <__aeabi_dmul>
   1f0c2:	a245      	add	r2, pc, #276	(adr r2, 1f1d8 <__kernel_cos+0x1a0>)
   1f0c4:	ca0c      	ldmia	r2!, {r2, r3}
   1f0c6:	f7fb f905 	bl	1a2d4 <__adddf3>
   1f0ca:	460b      	mov	r3, r1
   1f0cc:	4602      	mov	r2, r0
   1f0ce:	4639      	mov	r1, r7
   1f0d0:	4630      	mov	r0, r6
   1f0d2:	f7fb fab1 	bl	1a638 <__aeabi_dmul>
   1f0d6:	4b43      	ldr	r3, [pc, #268]	(1f1e4 <__kernel_cos+0x1ac>)
   1f0d8:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1f0dc:	429c      	cmp	r4, r3
   1f0de:	dc26      	bgt.n	1f12e <__kernel_cos+0xf6>
   1f0e0:	2200      	movs	r2, #0
   1f0e2:	4b41      	ldr	r3, [pc, #260]	(1f1e8 <__kernel_cos+0x1b0>)
   1f0e4:	4630      	mov	r0, r6
   1f0e6:	4639      	mov	r1, r7
   1f0e8:	f7fb faa6 	bl	1a638 <__aeabi_dmul>
   1f0ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1f0f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1f0f4:	4630      	mov	r0, r6
   1f0f6:	4639      	mov	r1, r7
   1f0f8:	f7fb fa9e 	bl	1a638 <__aeabi_dmul>
   1f0fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f100:	4604      	mov	r4, r0
   1f102:	460d      	mov	r5, r1
   1f104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f108:	f7fb fa96 	bl	1a638 <__aeabi_dmul>
   1f10c:	4602      	mov	r2, r0
   1f10e:	460b      	mov	r3, r1
   1f110:	4620      	mov	r0, r4
   1f112:	4629      	mov	r1, r5
   1f114:	f7fb f8dc 	bl	1a2d0 <__aeabi_dsub>
   1f118:	4602      	mov	r2, r0
   1f11a:	460b      	mov	r3, r1
   1f11c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f120:	f7fb f8d6 	bl	1a2d0 <__aeabi_dsub>
   1f124:	4602      	mov	r2, r0
   1f126:	460b      	mov	r3, r1
   1f128:	2000      	movs	r0, #0
   1f12a:	492d      	ldr	r1, [pc, #180]	(1f1e0 <__kernel_cos+0x1a8>)
   1f12c:	e03c      	b.n	1f1a8 <__kernel_cos+0x170>
   1f12e:	4b2f      	ldr	r3, [pc, #188]	(1f1ec <__kernel_cos+0x1b4>)
   1f130:	429c      	cmp	r4, r3
   1f132:	dd02      	ble.n	1f13a <__kernel_cos+0x102>
   1f134:	2400      	movs	r4, #0
   1f136:	4d2e      	ldr	r5, [pc, #184]	(1f1f0 <__kernel_cos+0x1b8>)
   1f138:	e004      	b.n	1f144 <__kernel_cos+0x10c>
   1f13a:	f5a4 1300 	sub.w	r3, r4, #2097152	; 0x200000
   1f13e:	2200      	movs	r2, #0
   1f140:	4614      	mov	r4, r2
   1f142:	461d      	mov	r5, r3
   1f144:	4622      	mov	r2, r4
   1f146:	462b      	mov	r3, r5
   1f148:	2000      	movs	r0, #0
   1f14a:	4925      	ldr	r1, [pc, #148]	(1f1e0 <__kernel_cos+0x1a8>)
   1f14c:	f7fb f8c0 	bl	1a2d0 <__aeabi_dsub>
   1f150:	2200      	movs	r2, #0
   1f152:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f156:	4b24      	ldr	r3, [pc, #144]	(1f1e8 <__kernel_cos+0x1b0>)
   1f158:	4630      	mov	r0, r6
   1f15a:	4639      	mov	r1, r7
   1f15c:	f7fb fa6c 	bl	1a638 <__aeabi_dmul>
   1f160:	4622      	mov	r2, r4
   1f162:	462b      	mov	r3, r5
   1f164:	f7fb f8b4 	bl	1a2d0 <__aeabi_dsub>
   1f168:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1f16c:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f170:	4630      	mov	r0, r6
   1f172:	4639      	mov	r1, r7
   1f174:	f7fb fa60 	bl	1a638 <__aeabi_dmul>
   1f178:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f17c:	4604      	mov	r4, r0
   1f17e:	460d      	mov	r5, r1
   1f180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f184:	f7fb fa58 	bl	1a638 <__aeabi_dmul>
   1f188:	4602      	mov	r2, r0
   1f18a:	460b      	mov	r3, r1
   1f18c:	4620      	mov	r0, r4
   1f18e:	4629      	mov	r1, r5
   1f190:	f7fb f89e 	bl	1a2d0 <__aeabi_dsub>
   1f194:	4602      	mov	r2, r0
   1f196:	460b      	mov	r3, r1
   1f198:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1f19c:	f7fb f898 	bl	1a2d0 <__aeabi_dsub>
   1f1a0:	4602      	mov	r2, r0
   1f1a2:	460b      	mov	r3, r1
   1f1a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f1a8:	f7fb f892 	bl	1a2d0 <__aeabi_dsub>
   1f1ac:	b00d      	add	sp, #52
   1f1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f1b0:	be8838d4 	.word	0xbe8838d4
   1f1b4:	bda8fae9 	.word	0xbda8fae9
   1f1b8:	bdb4b1c4 	.word	0xbdb4b1c4
   1f1bc:	3e21ee9e 	.word	0x3e21ee9e
   1f1c0:	809c52ad 	.word	0x809c52ad
   1f1c4:	3e927e4f 	.word	0x3e927e4f
   1f1c8:	19cb1590 	.word	0x19cb1590
   1f1cc:	3efa01a0 	.word	0x3efa01a0
   1f1d0:	16c15177 	.word	0x16c15177
   1f1d4:	3f56c16c 	.word	0x3f56c16c
   1f1d8:	5555554c 	.word	0x5555554c
   1f1dc:	3fa55555 	.word	0x3fa55555
   1f1e0:	3ff00000 	.word	0x3ff00000
   1f1e4:	3fd33332 	.word	0x3fd33332
   1f1e8:	3fe00000 	.word	0x3fe00000
   1f1ec:	3fe90000 	.word	0x3fe90000
   1f1f0:	3fd20000 	.word	0x3fd20000
   1f1f4:	46c046c0 	.word	0x46c046c0

0001f1f8 <__kernel_rem_pio2>:
   1f1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f1fa:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
   1f1fe:	930a      	str	r3, [sp, #40]
   1f200:	900c      	str	r0, [sp, #48]
   1f202:	f8df 36f0 	ldr.w	r3, [pc, #1776]	; 1f8f4 <__kernel_rem_pio2+0x6fc>
   1f206:	98ba      	ldr	r0, [sp, #744]
   1f208:	910b      	str	r1, [sp, #44]
   1f20a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1f20e:	990a      	ldr	r1, [sp, #40]
   1f210:	f8df 06e4 	ldr.w	r0, [pc, #1764]	; 1f8f8 <__kernel_rem_pio2+0x700>
   1f214:	930f      	str	r3, [sp, #60]
   1f216:	3901      	subs	r1, #1
   1f218:	1ed3      	subs	r3, r2, #3
   1f21a:	910e      	str	r1, [sp, #56]
   1f21c:	fb83 0100 	smull	r0, r1, r3, r0
   1f220:	17db      	asrs	r3, r3, #31
   1f222:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1f226:	2b00      	cmp	r3, #0
   1f228:	bfb8      	it	lt
   1f22a:	2300      	movlt	r3, #0
   1f22c:	9327      	str	r3, [sp, #156]
   1f22e:	ea6f 0303 	mvn.w	r3, r3
   1f232:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f236:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f23a:	9c27      	ldr	r4, [sp, #156]
   1f23c:	9312      	str	r3, [sp, #72]
   1f23e:	9a0f      	ldr	r2, [sp, #60]
   1f240:	9b0e      	ldr	r3, [sp, #56]
   1f242:	98bb      	ldr	r0, [sp, #748]
   1f244:	ebc3 0604 	rsb	r6, r3, r4
   1f248:	18d2      	adds	r2, r2, r3
   1f24a:	9211      	str	r2, [sp, #68]
   1f24c:	af78      	add	r7, sp, #480
   1f24e:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1f252:	2400      	movs	r4, #0
   1f254:	e00a      	b.n	1f26c <__kernel_rem_pio2+0x74>
   1f256:	42f4      	cmn	r4, r6
   1f258:	d502      	bpl.n	1f260 <__kernel_rem_pio2+0x68>
   1f25a:	2000      	movs	r0, #0
   1f25c:	2100      	movs	r1, #0
   1f25e:	e002      	b.n	1f266 <__kernel_rem_pio2+0x6e>
   1f260:	6828      	ldr	r0, [r5, #0]
   1f262:	f7fb f983 	bl	1a56c <__aeabi_i2d>
   1f266:	c703      	stmia	r7!, {r0, r1}
   1f268:	3401      	adds	r4, #1
   1f26a:	3504      	adds	r5, #4
   1f26c:	9911      	ldr	r1, [sp, #68]
   1f26e:	428c      	cmp	r4, r1
   1f270:	ddf1      	ble.n	1f256 <__kernel_rem_pio2+0x5e>
   1f272:	9b0e      	ldr	r3, [sp, #56]
   1f274:	aa28      	add	r2, sp, #160
   1f276:	2400      	movs	r4, #0
   1f278:	921f      	str	r2, [sp, #124]
   1f27a:	9320      	str	r3, [sp, #128]
   1f27c:	9421      	str	r4, [sp, #132]
   1f27e:	e01f      	b.n	1f2c0 <__kernel_rem_pio2+0xc8>
   1f280:	9a1e      	ldr	r2, [sp, #120]
   1f282:	3601      	adds	r6, #1
   1f284:	e912 0003 	ldmdb	r2, {r0, r1}
   1f288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f28c:	f7fb f9d4 	bl	1a638 <__aeabi_dmul>
   1f290:	4602      	mov	r2, r0
   1f292:	460b      	mov	r3, r1
   1f294:	4620      	mov	r0, r4
   1f296:	4629      	mov	r1, r5
   1f298:	f7fb f81c 	bl	1a2d4 <__adddf3>
   1f29c:	4604      	mov	r4, r0
   1f29e:	460d      	mov	r5, r1
   1f2a0:	9b1e      	ldr	r3, [sp, #120]
   1f2a2:	980e      	ldr	r0, [sp, #56]
   1f2a4:	3308      	adds	r3, #8
   1f2a6:	3f08      	subs	r7, #8
   1f2a8:	4286      	cmp	r6, r0
   1f2aa:	931e      	str	r3, [sp, #120]
   1f2ac:	dde8      	ble.n	1f280 <__kernel_rem_pio2+0x88>
   1f2ae:	991f      	ldr	r1, [sp, #124]
   1f2b0:	9a21      	ldr	r2, [sp, #132]
   1f2b2:	9b20      	ldr	r3, [sp, #128]
   1f2b4:	c130      	stmia	r1!, {r4, r5}
   1f2b6:	3201      	adds	r2, #1
   1f2b8:	3301      	adds	r3, #1
   1f2ba:	911f      	str	r1, [sp, #124]
   1f2bc:	9221      	str	r2, [sp, #132]
   1f2be:	9320      	str	r3, [sp, #128]
   1f2c0:	9c21      	ldr	r4, [sp, #132]
   1f2c2:	9e0f      	ldr	r6, [sp, #60]
   1f2c4:	42b4      	cmp	r4, r6
   1f2c6:	dc09      	bgt.n	1f2dc <__kernel_rem_pio2+0xe4>
   1f2c8:	980c      	ldr	r0, [sp, #48]
   1f2ca:	9a20      	ldr	r2, [sp, #128]
   1f2cc:	a978      	add	r1, sp, #480
   1f2ce:	901e      	str	r0, [sp, #120]
   1f2d0:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
   1f2d4:	2600      	movs	r6, #0
   1f2d6:	2400      	movs	r4, #0
   1f2d8:	2500      	movs	r5, #0
   1f2da:	e7e1      	b.n	1f2a0 <__kernel_rem_pio2+0xa8>
   1f2dc:	9b0f      	ldr	r3, [sp, #60]
   1f2de:	930d      	str	r3, [sp, #52]
   1f2e0:	9c0d      	ldr	r4, [sp, #52]
   1f2e2:	aa28      	add	r2, sp, #160
   1f2e4:	1e60      	subs	r0, r4, #1
   1f2e6:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   1f2ea:	2100      	movs	r1, #0
   1f2ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   1f2f0:	e893 00c0 	ldmia.w	r3, {r6, r7}
   1f2f4:	9022      	str	r0, [sp, #136]
   1f2f6:	921d      	str	r2, [sp, #116]
   1f2f8:	9425      	str	r4, [sp, #148]
   1f2fa:	911c      	str	r1, [sp, #112]
   1f2fc:	e02b      	b.n	1f356 <__kernel_rem_pio2+0x15e>
   1f2fe:	2200      	movs	r2, #0
   1f300:	f8df 35f8 	ldr.w	r3, [pc, #1528]	; 1f8fc <__kernel_rem_pio2+0x704>
   1f304:	4630      	mov	r0, r6
   1f306:	4639      	mov	r1, r7
   1f308:	f7fb f996 	bl	1a638 <__aeabi_dmul>
   1f30c:	f7fb fc2c 	bl	1ab68 <__aeabi_d2iz>
   1f310:	f7fb f92c 	bl	1a56c <__aeabi_i2d>
   1f314:	2200      	movs	r2, #0
   1f316:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 1f900 <__kernel_rem_pio2+0x708>
   1f31a:	4604      	mov	r4, r0
   1f31c:	460d      	mov	r5, r1
   1f31e:	f7fb f98b 	bl	1a638 <__aeabi_dmul>
   1f322:	4602      	mov	r2, r0
   1f324:	460b      	mov	r3, r1
   1f326:	4630      	mov	r0, r6
   1f328:	4639      	mov	r1, r7
   1f32a:	f7fa ffd3 	bl	1a2d4 <__adddf3>
   1f32e:	f7fb fc1b 	bl	1ab68 <__aeabi_d2iz>
   1f332:	9b1c      	ldr	r3, [sp, #112]
   1f334:	aaa0      	add	r2, sp, #640
   1f336:	50d0      	str	r0, [r2, r3]
   1f338:	9e25      	ldr	r6, [sp, #148]
   1f33a:	4620      	mov	r0, r4
   1f33c:	9c1d      	ldr	r4, [sp, #116]
   1f33e:	3e01      	subs	r6, #1
   1f340:	4629      	mov	r1, r5
   1f342:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1f346:	9625      	str	r6, [sp, #148]
   1f348:	f7fa ffc4 	bl	1a2d4 <__adddf3>
   1f34c:	4606      	mov	r6, r0
   1f34e:	981c      	ldr	r0, [sp, #112]
   1f350:	460f      	mov	r7, r1
   1f352:	3004      	adds	r0, #4
   1f354:	901c      	str	r0, [sp, #112]
   1f356:	991d      	ldr	r1, [sp, #116]
   1f358:	9a25      	ldr	r2, [sp, #148]
   1f35a:	3908      	subs	r1, #8
   1f35c:	2a00      	cmp	r2, #0
   1f35e:	911d      	str	r1, [sp, #116]
   1f360:	dccd      	bgt.n	1f2fe <__kernel_rem_pio2+0x106>
   1f362:	9a12      	ldr	r2, [sp, #72]
   1f364:	4630      	mov	r0, r6
   1f366:	4639      	mov	r1, r7
   1f368:	f000 fdc6 	bl	1fef8 <scalbn>
   1f36c:	2200      	movs	r2, #0
   1f36e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1f372:	4604      	mov	r4, r0
   1f374:	460d      	mov	r5, r1
   1f376:	f7fb f95f 	bl	1a638 <__aeabi_dmul>
   1f37a:	f000 fd35 	bl	1fde8 <floor>
   1f37e:	2200      	movs	r2, #0
   1f380:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 1f904 <__kernel_rem_pio2+0x70c>
   1f384:	f7fb f958 	bl	1a638 <__aeabi_dmul>
   1f388:	4602      	mov	r2, r0
   1f38a:	460b      	mov	r3, r1
   1f38c:	4620      	mov	r0, r4
   1f38e:	4629      	mov	r1, r5
   1f390:	f7fa ffa0 	bl	1a2d4 <__adddf3>
   1f394:	460d      	mov	r5, r1
   1f396:	4604      	mov	r4, r0
   1f398:	f7fb fbe6 	bl	1ab68 <__aeabi_d2iz>
   1f39c:	9010      	str	r0, [sp, #64]
   1f39e:	f7fb f8e5 	bl	1a56c <__aeabi_i2d>
   1f3a2:	460b      	mov	r3, r1
   1f3a4:	4602      	mov	r2, r0
   1f3a6:	4629      	mov	r1, r5
   1f3a8:	4620      	mov	r0, r4
   1f3aa:	f7fa ff91 	bl	1a2d0 <__aeabi_dsub>
   1f3ae:	9b12      	ldr	r3, [sp, #72]
   1f3b0:	4604      	mov	r4, r0
   1f3b2:	2b00      	cmp	r3, #0
   1f3b4:	460d      	mov	r5, r1
   1f3b6:	dd16      	ble.n	1f3e6 <__kernel_rem_pio2+0x1ee>
   1f3b8:	9922      	ldr	r1, [sp, #136]
   1f3ba:	aeb4      	add	r6, sp, #720
   1f3bc:	eb06 0081 	add.w	r0, r6, r1, lsl #2
   1f3c0:	f850 2c50 	ldr.w	r2, [r0, #-80]
   1f3c4:	f1c3 0118 	rsb	r1, r3, #24	; 0x18
   1f3c8:	fa52 f301 	asrs.w	r3, r2, r1
   1f3cc:	9e10      	ldr	r6, [sp, #64]
   1f3ce:	18f6      	adds	r6, r6, r3
   1f3d0:	408b      	lsls	r3, r1
   1f3d2:	1ad2      	subs	r2, r2, r3
   1f3d4:	f840 2c50 	str.w	r2, [r0, #-80]
   1f3d8:	9812      	ldr	r0, [sp, #72]
   1f3da:	9610      	str	r6, [sp, #64]
   1f3dc:	f1c0 0317 	rsb	r3, r0, #23	; 0x17
   1f3e0:	fa52 f303 	asrs.w	r3, r2, r3
   1f3e4:	e007      	b.n	1f3f6 <__kernel_rem_pio2+0x1fe>
   1f3e6:	d10b      	bne.n	1f400 <__kernel_rem_pio2+0x208>
   1f3e8:	9a22      	ldr	r2, [sp, #136]
   1f3ea:	a9b4      	add	r1, sp, #720
   1f3ec:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   1f3f0:	f853 3c50 	ldr.w	r3, [r3, #-80]
   1f3f4:	15db      	asrs	r3, r3, #23
   1f3f6:	9313      	str	r3, [sp, #76]
   1f3f8:	9813      	ldr	r0, [sp, #76]
   1f3fa:	2800      	cmp	r0, #0
   1f3fc:	dc0b      	bgt.n	1f416 <__kernel_rem_pio2+0x21e>
   1f3fe:	e061      	b.n	1f4c4 <__kernel_rem_pio2+0x2cc>
   1f400:	2200      	movs	r2, #0
   1f402:	f8df 3504 	ldr.w	r3, [pc, #1284]	; 1f908 <__kernel_rem_pio2+0x710>
   1f406:	f7fb fb9b 	bl	1ab40 <__aeabi_dcmpge>
   1f40a:	b910      	cbnz	r0, 1f412 <__kernel_rem_pio2+0x21a>
   1f40c:	2300      	movs	r3, #0
   1f40e:	9313      	str	r3, [sp, #76]
   1f410:	e058      	b.n	1f4c4 <__kernel_rem_pio2+0x2cc>
   1f412:	2602      	movs	r6, #2
   1f414:	9613      	str	r6, [sp, #76]
   1f416:	9910      	ldr	r1, [sp, #64]
   1f418:	2600      	movs	r6, #0
   1f41a:	3101      	adds	r1, #1
   1f41c:	9110      	str	r1, [sp, #64]
   1f41e:	2000      	movs	r0, #0
   1f420:	2100      	movs	r1, #0
   1f422:	f50d 7c20 	add.w	ip, sp, #640	; 0x280
   1f426:	e010      	b.n	1f44a <__kernel_rem_pio2+0x252>
   1f428:	f85c 2001 	ldr.w	r2, [ip, r1]
   1f42c:	b936      	cbnz	r6, 1f43c <__kernel_rem_pio2+0x244>
   1f42e:	b152      	cbz	r2, 1f446 <__kernel_rem_pio2+0x24e>
   1f430:	f1c2 7380 	rsb	r3, r2, #16777216	; 0x1000000
   1f434:	f84c 3001 	str.w	r3, [ip, r1]
   1f438:	2601      	movs	r6, #1
   1f43a:	e004      	b.n	1f446 <__kernel_rem_pio2+0x24e>
   1f43c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1f440:	1a9b      	subs	r3, r3, r2
   1f442:	f84c 3001 	str.w	r3, [ip, r1]
   1f446:	3001      	adds	r0, #1
   1f448:	3104      	adds	r1, #4
   1f44a:	9a0d      	ldr	r2, [sp, #52]
   1f44c:	4290      	cmp	r0, r2
   1f44e:	dbeb      	blt.n	1f428 <__kernel_rem_pio2+0x230>
   1f450:	9b12      	ldr	r3, [sp, #72]
   1f452:	2b00      	cmp	r3, #0
   1f454:	dd1b      	ble.n	1f48e <__kernel_rem_pio2+0x296>
   1f456:	2b01      	cmp	r3, #1
   1f458:	d002      	beq.n	1f460 <__kernel_rem_pio2+0x268>
   1f45a:	2b02      	cmp	r3, #2
   1f45c:	d117      	bne.n	1f48e <__kernel_rem_pio2+0x296>
   1f45e:	e00a      	b.n	1f476 <__kernel_rem_pio2+0x27e>
   1f460:	9922      	ldr	r1, [sp, #136]
   1f462:	a8b4      	add	r0, sp, #720
   1f464:	eb00 0281 	add.w	r2, r0, r1, lsl #2
   1f468:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1f46c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f470:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1f474:	e009      	b.n	1f48a <__kernel_rem_pio2+0x292>
   1f476:	9822      	ldr	r0, [sp, #136]
   1f478:	abb4      	add	r3, sp, #720
   1f47a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
   1f47e:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1f482:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f486:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
   1f48a:	f842 3c50 	str.w	r3, [r2, #-80]
   1f48e:	9913      	ldr	r1, [sp, #76]
   1f490:	2902      	cmp	r1, #2
   1f492:	d117      	bne.n	1f4c4 <__kernel_rem_pio2+0x2cc>
   1f494:	4622      	mov	r2, r4
   1f496:	462b      	mov	r3, r5
   1f498:	2000      	movs	r0, #0
   1f49a:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 1f90c <__kernel_rem_pio2+0x714>
   1f49e:	f7fa ff17 	bl	1a2d0 <__aeabi_dsub>
   1f4a2:	4604      	mov	r4, r0
   1f4a4:	460d      	mov	r5, r1
   1f4a6:	b16e      	cbz	r6, 1f4c4 <__kernel_rem_pio2+0x2cc>
   1f4a8:	9a12      	ldr	r2, [sp, #72]
   1f4aa:	2000      	movs	r0, #0
   1f4ac:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 1f90c <__kernel_rem_pio2+0x714>
   1f4b0:	f000 fd22 	bl	1fef8 <scalbn>
   1f4b4:	4602      	mov	r2, r0
   1f4b6:	460b      	mov	r3, r1
   1f4b8:	4620      	mov	r0, r4
   1f4ba:	4629      	mov	r1, r5
   1f4bc:	f7fa ff08 	bl	1a2d0 <__aeabi_dsub>
   1f4c0:	4604      	mov	r4, r0
   1f4c2:	460d      	mov	r5, r1
   1f4c4:	2200      	movs	r2, #0
   1f4c6:	2300      	movs	r3, #0
   1f4c8:	4620      	mov	r0, r4
   1f4ca:	4629      	mov	r1, r5
   1f4cc:	f7fb fb1a 	bl	1ab04 <__aeabi_dcmpeq>
   1f4d0:	2800      	cmp	r0, #0
   1f4d2:	d073      	beq.n	1f5bc <__kernel_rem_pio2+0x3c4>
   1f4d4:	9a22      	ldr	r2, [sp, #136]
   1f4d6:	aba0      	add	r3, sp, #640
   1f4d8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1f4dc:	2200      	movs	r2, #0
   1f4de:	e004      	b.n	1f4ea <__kernel_rem_pio2+0x2f2>
   1f4e0:	684b      	ldr	r3, [r1, #4]
   1f4e2:	431a      	orrs	r2, r3
   1f4e4:	9b22      	ldr	r3, [sp, #136]
   1f4e6:	3b01      	subs	r3, #1
   1f4e8:	9322      	str	r3, [sp, #136]
   1f4ea:	9c22      	ldr	r4, [sp, #136]
   1f4ec:	9e0f      	ldr	r6, [sp, #60]
   1f4ee:	3904      	subs	r1, #4
   1f4f0:	42b4      	cmp	r4, r6
   1f4f2:	daf5      	bge.n	1f4e0 <__kernel_rem_pio2+0x2e8>
   1f4f4:	2a00      	cmp	r2, #0
   1f4f6:	d162      	bne.n	1f5be <__kernel_rem_pio2+0x3c6>
   1f4f8:	aba0      	add	r3, sp, #640
   1f4fa:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1f4fe:	2201      	movs	r2, #1
   1f500:	e000      	b.n	1f504 <__kernel_rem_pio2+0x30c>
   1f502:	3201      	adds	r2, #1
   1f504:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1f508:	2b00      	cmp	r3, #0
   1f50a:	d0fa      	beq.n	1f502 <__kernel_rem_pio2+0x30a>
   1f50c:	980d      	ldr	r0, [sp, #52]
   1f50e:	9927      	ldr	r1, [sp, #156]
   1f510:	ab28      	add	r3, sp, #160
   1f512:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1f516:	931a      	str	r3, [sp, #104]
   1f518:	1c4b      	adds	r3, r1, #1
   1f51a:	990a      	ldr	r1, [sp, #40]
   1f51c:	1812      	adds	r2, r2, r0
   1f51e:	9cbb      	ldr	r4, [sp, #748]
   1f520:	4401      	add	r1, r0
   1f522:	181b      	adds	r3, r3, r0
   1f524:	9205      	str	r2, [sp, #20]
   1f526:	aa78      	add	r2, sp, #480
   1f528:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1f52c:	2600      	movs	r6, #0
   1f52e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1f532:	931b      	str	r3, [sp, #108]
   1f534:	9619      	str	r6, [sp, #100]
   1f536:	9104      	str	r1, [sp, #16]
   1f538:	9203      	str	r2, [sp, #12]
   1f53a:	e036      	b.n	1f5aa <__kernel_rem_pio2+0x3b2>
   1f53c:	991b      	ldr	r1, [sp, #108]
   1f53e:	9b03      	ldr	r3, [sp, #12]
   1f540:	9e19      	ldr	r6, [sp, #100]
   1f542:	6808      	ldr	r0, [r1, #0]
   1f544:	eb03 04c6 	add.w	r4, r3, r6, lsl #3
   1f548:	f7fb f810 	bl	1a56c <__aeabi_i2d>
   1f54c:	e884 0003 	stmia.w	r4, {r0, r1}
   1f550:	9c04      	ldr	r4, [sp, #16]
   1f552:	9a0c      	ldr	r2, [sp, #48]
   1f554:	eb04 0306 	add.w	r3, r4, r6
   1f558:	ae78      	add	r6, sp, #480
   1f55a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
   1f55e:	9218      	str	r2, [sp, #96]
   1f560:	2600      	movs	r6, #0
   1f562:	2400      	movs	r4, #0
   1f564:	2500      	movs	r5, #0
   1f566:	e00f      	b.n	1f588 <__kernel_rem_pio2+0x390>
   1f568:	9a18      	ldr	r2, [sp, #96]
   1f56a:	3601      	adds	r6, #1
   1f56c:	e912 0003 	ldmdb	r2, {r0, r1}
   1f570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f574:	f7fb f860 	bl	1a638 <__aeabi_dmul>
   1f578:	4602      	mov	r2, r0
   1f57a:	460b      	mov	r3, r1
   1f57c:	4620      	mov	r0, r4
   1f57e:	4629      	mov	r1, r5
   1f580:	f7fa fea8 	bl	1a2d4 <__adddf3>
   1f584:	4604      	mov	r4, r0
   1f586:	460d      	mov	r5, r1
   1f588:	9b18      	ldr	r3, [sp, #96]
   1f58a:	980e      	ldr	r0, [sp, #56]
   1f58c:	3308      	adds	r3, #8
   1f58e:	3f08      	subs	r7, #8
   1f590:	4286      	cmp	r6, r0
   1f592:	9318      	str	r3, [sp, #96]
   1f594:	dde8      	ble.n	1f568 <__kernel_rem_pio2+0x370>
   1f596:	991a      	ldr	r1, [sp, #104]
   1f598:	9a19      	ldr	r2, [sp, #100]
   1f59a:	9b1b      	ldr	r3, [sp, #108]
   1f59c:	e9e1 4502 	strd	r4, r5, [r1, #8]!
   1f5a0:	3201      	adds	r2, #1
   1f5a2:	3304      	adds	r3, #4
   1f5a4:	911a      	str	r1, [sp, #104]
   1f5a6:	9219      	str	r2, [sp, #100]
   1f5a8:	931b      	str	r3, [sp, #108]
   1f5aa:	9c0d      	ldr	r4, [sp, #52]
   1f5ac:	9e19      	ldr	r6, [sp, #100]
   1f5ae:	1c63      	adds	r3, r4, #1
   1f5b0:	9805      	ldr	r0, [sp, #20]
   1f5b2:	199b      	adds	r3, r3, r6
   1f5b4:	4283      	cmp	r3, r0
   1f5b6:	ddc1      	ble.n	1f53c <__kernel_rem_pio2+0x344>
   1f5b8:	900d      	str	r0, [sp, #52]
   1f5ba:	e691      	b.n	1f2e0 <__kernel_rem_pio2+0xe8>
   1f5bc:	d014      	beq.n	1f5e8 <__kernel_rem_pio2+0x3f0>
   1f5be:	9c0d      	ldr	r4, [sp, #52]
   1f5c0:	9912      	ldr	r1, [sp, #72]
   1f5c2:	aba0      	add	r3, sp, #640
   1f5c4:	3918      	subs	r1, #24
   1f5c6:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1f5ca:	3c01      	subs	r4, #1
   1f5cc:	9112      	str	r1, [sp, #72]
   1f5ce:	940d      	str	r4, [sp, #52]
   1f5d0:	e005      	b.n	1f5de <__kernel_rem_pio2+0x3e6>
   1f5d2:	9e0d      	ldr	r6, [sp, #52]
   1f5d4:	9812      	ldr	r0, [sp, #72]
   1f5d6:	3e01      	subs	r6, #1
   1f5d8:	3818      	subs	r0, #24
   1f5da:	960d      	str	r6, [sp, #52]
   1f5dc:	9012      	str	r0, [sp, #72]
   1f5de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1f5e2:	2b00      	cmp	r3, #0
   1f5e4:	d0f5      	beq.n	1f5d2 <__kernel_rem_pio2+0x3da>
   1f5e6:	e03f      	b.n	1f668 <__kernel_rem_pio2+0x470>
   1f5e8:	9912      	ldr	r1, [sp, #72]
   1f5ea:	4620      	mov	r0, r4
   1f5ec:	f1c1 0200 	rsb	r2, r1, #0	; 0x0
   1f5f0:	4629      	mov	r1, r5
   1f5f2:	f000 fc81 	bl	1fef8 <scalbn>
   1f5f6:	2200      	movs	r2, #0
   1f5f8:	4bc5      	ldr	r3, [pc, #788]	(1f910 <__kernel_rem_pio2+0x718>)
   1f5fa:	4606      	mov	r6, r0
   1f5fc:	460f      	mov	r7, r1
   1f5fe:	f7fb fa9f 	bl	1ab40 <__aeabi_dcmpge>
   1f602:	9a0d      	ldr	r2, [sp, #52]
   1f604:	0094      	lsls	r4, r2, #2
   1f606:	b338      	cbz	r0, 1f658 <__kernel_rem_pio2+0x460>
   1f608:	2200      	movs	r2, #0
   1f60a:	4bbc      	ldr	r3, [pc, #752]	(1f8fc <__kernel_rem_pio2+0x704>)
   1f60c:	4630      	mov	r0, r6
   1f60e:	4639      	mov	r1, r7
   1f610:	f7fb f812 	bl	1a638 <__aeabi_dmul>
   1f614:	f7fb faa8 	bl	1ab68 <__aeabi_d2iz>
   1f618:	f7fa ffa8 	bl	1a56c <__aeabi_i2d>
   1f61c:	abb4      	add	r3, sp, #720
   1f61e:	441c      	add	r4, r3
   1f620:	2200      	movs	r2, #0
   1f622:	4bb7      	ldr	r3, [pc, #732]	(1f900 <__kernel_rem_pio2+0x708>)
   1f624:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1f628:	f7fb f806 	bl	1a638 <__aeabi_dmul>
   1f62c:	4602      	mov	r2, r0
   1f62e:	460b      	mov	r3, r1
   1f630:	4630      	mov	r0, r6
   1f632:	4639      	mov	r1, r7
   1f634:	f7fa fe4e 	bl	1a2d4 <__adddf3>
   1f638:	f7fb fa96 	bl	1ab68 <__aeabi_d2iz>
   1f63c:	9e12      	ldr	r6, [sp, #72]
   1f63e:	f844 0c50 	str.w	r0, [r4, #-80]
   1f642:	9c0d      	ldr	r4, [sp, #52]
   1f644:	a8b4      	add	r0, sp, #720
   1f646:	3401      	adds	r4, #1
   1f648:	3618      	adds	r6, #24
   1f64a:	940d      	str	r4, [sp, #52]
   1f64c:	9612      	str	r6, [sp, #72]
   1f64e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1f652:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f656:	e003      	b.n	1f660 <__kernel_rem_pio2+0x468>
   1f658:	a9b4      	add	r1, sp, #720
   1f65a:	440c      	add	r4, r1
   1f65c:	4630      	mov	r0, r6
   1f65e:	4639      	mov	r1, r7
   1f660:	f7fb fa82 	bl	1ab68 <__aeabi_d2iz>
   1f664:	f844 0c50 	str.w	r0, [r4, #-80]
   1f668:	9a12      	ldr	r2, [sp, #72]
   1f66a:	2000      	movs	r0, #0
   1f66c:	49a7      	ldr	r1, [pc, #668]	(1f90c <__kernel_rem_pio2+0x714>)
   1f66e:	f000 fc43 	bl	1fef8 <scalbn>
   1f672:	9a0d      	ldr	r2, [sp, #52]
   1f674:	aba0      	add	r3, sp, #640
   1f676:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1f67a:	9317      	str	r3, [sp, #92]
   1f67c:	ab28      	add	r3, sp, #160
   1f67e:	4604      	mov	r4, r0
   1f680:	460d      	mov	r5, r1
   1f682:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
   1f686:	4616      	mov	r6, r2
   1f688:	e014      	b.n	1f6b4 <__kernel_rem_pio2+0x4bc>
   1f68a:	9b17      	ldr	r3, [sp, #92]
   1f68c:	3e01      	subs	r6, #1
   1f68e:	6858      	ldr	r0, [r3, #4]
   1f690:	f7fa ff6c 	bl	1a56c <__aeabi_i2d>
   1f694:	4602      	mov	r2, r0
   1f696:	460b      	mov	r3, r1
   1f698:	4620      	mov	r0, r4
   1f69a:	4629      	mov	r1, r5
   1f69c:	f7fa ffcc 	bl	1a638 <__aeabi_dmul>
   1f6a0:	2200      	movs	r2, #0
   1f6a2:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1f6a6:	4b95      	ldr	r3, [pc, #596]	(1f8fc <__kernel_rem_pio2+0x704>)
   1f6a8:	4620      	mov	r0, r4
   1f6aa:	4629      	mov	r1, r5
   1f6ac:	f7fa ffc4 	bl	1a638 <__aeabi_dmul>
   1f6b0:	4604      	mov	r4, r0
   1f6b2:	460d      	mov	r5, r1
   1f6b4:	9817      	ldr	r0, [sp, #92]
   1f6b6:	3f08      	subs	r7, #8
   1f6b8:	3804      	subs	r0, #4
   1f6ba:	2e00      	cmp	r6, #0
   1f6bc:	9017      	str	r0, [sp, #92]
   1f6be:	dae4      	bge.n	1f68a <__kernel_rem_pio2+0x492>
   1f6c0:	9a0d      	ldr	r2, [sp, #52]
   1f6c2:	a950      	add	r1, sp, #320
   1f6c4:	2300      	movs	r3, #0
   1f6c6:	9116      	str	r1, [sp, #88]
   1f6c8:	9223      	str	r2, [sp, #140]
   1f6ca:	9315      	str	r3, [sp, #84]
   1f6cc:	e022      	b.n	1f714 <__kernel_rem_pio2+0x51c>
   1f6ce:	9a14      	ldr	r2, [sp, #80]
   1f6d0:	3601      	adds	r6, #1
   1f6d2:	e912 0003 	ldmdb	r2, {r0, r1}
   1f6d6:	e917 000c 	ldmdb	r7, {r2, r3}
   1f6da:	f7fa ffad 	bl	1a638 <__aeabi_dmul>
   1f6de:	4602      	mov	r2, r0
   1f6e0:	460b      	mov	r3, r1
   1f6e2:	4620      	mov	r0, r4
   1f6e4:	4629      	mov	r1, r5
   1f6e6:	f7fa fdf5 	bl	1a2d4 <__adddf3>
   1f6ea:	4604      	mov	r4, r0
   1f6ec:	460d      	mov	r5, r1
   1f6ee:	9b0f      	ldr	r3, [sp, #60]
   1f6f0:	429e      	cmp	r6, r3
   1f6f2:	dc06      	bgt.n	1f702 <__kernel_rem_pio2+0x50a>
   1f6f4:	9814      	ldr	r0, [sp, #80]
   1f6f6:	9915      	ldr	r1, [sp, #84]
   1f6f8:	3008      	adds	r0, #8
   1f6fa:	3708      	adds	r7, #8
   1f6fc:	428e      	cmp	r6, r1
   1f6fe:	9014      	str	r0, [sp, #80]
   1f700:	dde5      	ble.n	1f6ce <__kernel_rem_pio2+0x4d6>
   1f702:	9a16      	ldr	r2, [sp, #88]
   1f704:	9b23      	ldr	r3, [sp, #140]
   1f706:	c230      	stmia	r2!, {r4, r5}
   1f708:	9c15      	ldr	r4, [sp, #84]
   1f70a:	3b01      	subs	r3, #1
   1f70c:	3401      	adds	r4, #1
   1f70e:	9216      	str	r2, [sp, #88]
   1f710:	9323      	str	r3, [sp, #140]
   1f712:	9415      	str	r4, [sp, #84]
   1f714:	9e23      	ldr	r6, [sp, #140]
   1f716:	2e00      	cmp	r6, #0
   1f718:	db08      	blt.n	1f72c <__kernel_rem_pio2+0x534>
   1f71a:	487e      	ldr	r0, [pc, #504]	(1f914 <__kernel_rem_pio2+0x71c>)
   1f71c:	a928      	add	r1, sp, #160
   1f71e:	eb01 07c6 	add.w	r7, r1, r6, lsl #3
   1f722:	9014      	str	r0, [sp, #80]
   1f724:	2600      	movs	r6, #0
   1f726:	2400      	movs	r4, #0
   1f728:	2500      	movs	r5, #0
   1f72a:	e7e0      	b.n	1f6ee <__kernel_rem_pio2+0x4f6>
   1f72c:	9aba      	ldr	r2, [sp, #744]
   1f72e:	2a03      	cmp	r2, #3
   1f730:	f200 80d9 	bhi.w	1f8e6 <__kernel_rem_pio2+0x6ee>
   1f734:	e8df f002 	tbb	[pc, r2]
   1f738:	020b0b12 	.word	0x020b0b12
   1f73c:	9b0d      	ldr	r3, [sp, #52]
   1f73e:	9f0d      	ldr	r7, [sp, #52]
   1f740:	1e5a      	subs	r2, r3, #1
   1f742:	ab50      	add	r3, sp, #320
   1f744:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1f748:	9226      	str	r2, [sp, #152]
   1f74a:	4616      	mov	r6, r2
   1f74c:	e067      	b.n	1f81e <__kernel_rem_pio2+0x626>
   1f74e:	9c0d      	ldr	r4, [sp, #52]
   1f750:	ab50      	add	r3, sp, #320
   1f752:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1f756:	2000      	movs	r0, #0
   1f758:	2100      	movs	r1, #0
   1f75a:	e01c      	b.n	1f796 <__kernel_rem_pio2+0x59e>
   1f75c:	9e0d      	ldr	r6, [sp, #52]
   1f75e:	ab50      	add	r3, sp, #320
   1f760:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1f764:	4634      	mov	r4, r6
   1f766:	2000      	movs	r0, #0
   1f768:	2100      	movs	r1, #0
   1f76a:	e004      	b.n	1f776 <__kernel_rem_pio2+0x57e>
   1f76c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f770:	f7fa fdb0 	bl	1a2d4 <__adddf3>
   1f774:	3c01      	subs	r4, #1
   1f776:	3d08      	subs	r5, #8
   1f778:	2c00      	cmp	r4, #0
   1f77a:	daf7      	bge.n	1f76c <__kernel_rem_pio2+0x574>
   1f77c:	9c13      	ldr	r4, [sp, #76]
   1f77e:	b10c      	cbz	r4, 1f784 <__kernel_rem_pio2+0x58c>
   1f780:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1f784:	9e0b      	ldr	r6, [sp, #44]
   1f786:	e886 0003 	stmia.w	r6, {r0, r1}
   1f78a:	e0ac      	b.n	1f8e6 <__kernel_rem_pio2+0x6ee>
   1f78c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f790:	f7fa fda0 	bl	1a2d4 <__adddf3>
   1f794:	3c01      	subs	r4, #1
   1f796:	3d08      	subs	r5, #8
   1f798:	2c00      	cmp	r4, #0
   1f79a:	daf7      	bge.n	1f78c <__kernel_rem_pio2+0x594>
   1f79c:	9a13      	ldr	r2, [sp, #76]
   1f79e:	4604      	mov	r4, r0
   1f7a0:	460d      	mov	r5, r1
   1f7a2:	b10a      	cbz	r2, 1f7a8 <__kernel_rem_pio2+0x5b0>
   1f7a4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1f7a8:	9b0b      	ldr	r3, [sp, #44]
   1f7aa:	4622      	mov	r2, r4
   1f7ac:	e883 0003 	stmia.w	r3, {r0, r1}
   1f7b0:	ab50      	add	r3, sp, #320
   1f7b2:	e893 0003 	ldmia.w	r3, {r0, r1}
   1f7b6:	462b      	mov	r3, r5
   1f7b8:	f7fa fd8a 	bl	1a2d0 <__aeabi_dsub>
   1f7bc:	ad52      	add	r5, sp, #328
   1f7be:	2401      	movs	r4, #1
   1f7c0:	e004      	b.n	1f7cc <__kernel_rem_pio2+0x5d4>
   1f7c2:	e915 000c 	ldmdb	r5, {r2, r3}
   1f7c6:	f7fa fd85 	bl	1a2d4 <__adddf3>
   1f7ca:	3401      	adds	r4, #1
   1f7cc:	9e0d      	ldr	r6, [sp, #52]
   1f7ce:	3508      	adds	r5, #8
   1f7d0:	42b4      	cmp	r4, r6
   1f7d2:	ddf6      	ble.n	1f7c2 <__kernel_rem_pio2+0x5ca>
   1f7d4:	9c13      	ldr	r4, [sp, #76]
   1f7d6:	b10c      	cbz	r4, 1f7dc <__kernel_rem_pio2+0x5e4>
   1f7d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1f7dc:	9e0b      	ldr	r6, [sp, #44]
   1f7de:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1f7e2:	e080      	b.n	1f8e6 <__kernel_rem_pio2+0x6ee>
   1f7e4:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
   1f7e8:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1f7ec:	4620      	mov	r0, r4
   1f7ee:	4629      	mov	r1, r5
   1f7f0:	f7fa fd70 	bl	1a2d4 <__adddf3>
   1f7f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f7f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f7fc:	4620      	mov	r0, r4
   1f7fe:	4629      	mov	r1, r5
   1f800:	f7fa fd66 	bl	1a2d0 <__aeabi_dsub>
   1f804:	4602      	mov	r2, r0
   1f806:	460b      	mov	r3, r1
   1f808:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   1f80c:	f7fa fd62 	bl	1a2d4 <__adddf3>
   1f810:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1f814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f818:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1f81c:	3f01      	subs	r7, #1
   1f81e:	3e08      	subs	r6, #8
   1f820:	2f00      	cmp	r7, #0
   1f822:	dcdf      	bgt.n	1f7e4 <__kernel_rem_pio2+0x5ec>
   1f824:	990d      	ldr	r1, [sp, #52]
   1f826:	9124      	str	r1, [sp, #144]
   1f828:	e022      	b.n	1f870 <__kernel_rem_pio2+0x678>
   1f82a:	9b26      	ldr	r3, [sp, #152]
   1f82c:	9a24      	ldr	r2, [sp, #144]
   1f82e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   1f832:	3a01      	subs	r2, #1
   1f834:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f838:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   1f83c:	9224      	str	r2, [sp, #144]
   1f83e:	4620      	mov	r0, r4
   1f840:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1f844:	4629      	mov	r1, r5
   1f846:	f7fa fd45 	bl	1a2d4 <__adddf3>
   1f84a:	4606      	mov	r6, r0
   1f84c:	460f      	mov	r7, r1
   1f84e:	4632      	mov	r2, r6
   1f850:	463b      	mov	r3, r7
   1f852:	4620      	mov	r0, r4
   1f854:	4629      	mov	r1, r5
   1f856:	f7fa fd3b 	bl	1a2d0 <__aeabi_dsub>
   1f85a:	4602      	mov	r2, r0
   1f85c:	460b      	mov	r3, r1
   1f85e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1f862:	f7fa fd37 	bl	1a2d4 <__adddf3>
   1f866:	9a26      	ldr	r2, [sp, #152]
   1f868:	e9c2 0104 	strd	r0, r1, [r2, #16]
   1f86c:	e9c2 6702 	strd	r6, r7, [r2, #8]
   1f870:	9b26      	ldr	r3, [sp, #152]
   1f872:	9c24      	ldr	r4, [sp, #144]
   1f874:	3b08      	subs	r3, #8
   1f876:	2c01      	cmp	r4, #1
   1f878:	9326      	str	r3, [sp, #152]
   1f87a:	dcd6      	bgt.n	1f82a <__kernel_rem_pio2+0x632>
   1f87c:	9e0d      	ldr	r6, [sp, #52]
   1f87e:	ab50      	add	r3, sp, #320
   1f880:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1f884:	4634      	mov	r4, r6
   1f886:	2000      	movs	r0, #0
   1f888:	2100      	movs	r1, #0
   1f88a:	e004      	b.n	1f896 <__kernel_rem_pio2+0x69e>
   1f88c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1f890:	f7fa fd20 	bl	1a2d4 <__adddf3>
   1f894:	3c01      	subs	r4, #1
   1f896:	3d08      	subs	r5, #8
   1f898:	2c01      	cmp	r4, #1
   1f89a:	dcf7      	bgt.n	1f88c <__kernel_rem_pio2+0x694>
   1f89c:	9a13      	ldr	r2, [sp, #76]
   1f89e:	f50d 7ca0 	add.w	ip, sp, #320	; 0x140
   1f8a2:	b95a      	cbnz	r2, 1f8bc <__kernel_rem_pio2+0x6c4>
   1f8a4:	9c0b      	ldr	r4, [sp, #44]
   1f8a6:	e89c 000c 	ldmia.w	ip, {r2, r3}
   1f8aa:	e884 000c 	stmia.w	r4, {r2, r3}
   1f8ae:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   1f8b2:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1f8b6:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1f8ba:	e014      	b.n	1f8e6 <__kernel_rem_pio2+0x6ee>
   1f8bc:	f8dc 3000 	ldr.w	r3, [ip]
   1f8c0:	9e0b      	ldr	r6, [sp, #44]
   1f8c2:	6033      	str	r3, [r6, #0]
   1f8c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1f8c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f8cc:	6073      	str	r3, [r6, #4]
   1f8ce:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1f8d2:	60b3      	str	r3, [r6, #8]
   1f8d4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1f8d8:	6130      	str	r0, [r6, #16]
   1f8da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f8de:	60f3      	str	r3, [r6, #12]
   1f8e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f8e4:	6173      	str	r3, [r6, #20]
   1f8e6:	9910      	ldr	r1, [sp, #64]
   1f8e8:	f001 0007 	and.w	r0, r1, #7	; 0x7
   1f8ec:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
   1f8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f8f2:	46c0      	nop			(mov r8, r8)
   1f8f4:	00023618 	.word	0x00023618
   1f8f8:	2aaaaaab 	.word	0x2aaaaaab
   1f8fc:	3e700000 	.word	0x3e700000
   1f900:	c1700000 	.word	0xc1700000
   1f904:	c0200000 	.word	0xc0200000
   1f908:	3fe00000 	.word	0x3fe00000
   1f90c:	3ff00000 	.word	0x3ff00000
   1f910:	41700000 	.word	0x41700000
   1f914:	00023628 	.word	0x00023628

0001f918 <__kernel_sin>:
   1f918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f91a:	b089      	sub	sp, #36
   1f91c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f920:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f924:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f928:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f92c:	da04      	bge.n	1f938 <__kernel_sin+0x20>
   1f92e:	f7fb f91b 	bl	1ab68 <__aeabi_d2iz>
   1f932:	2800      	cmp	r0, #0
   1f934:	f000 8085 	beq.w	1fa42 <__kernel_sin+0x12a>
   1f938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f93c:	4602      	mov	r2, r0
   1f93e:	460b      	mov	r3, r1
   1f940:	f7fa fe7a 	bl	1a638 <__aeabi_dmul>
   1f944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f948:	4606      	mov	r6, r0
   1f94a:	460f      	mov	r7, r1
   1f94c:	f7fa fe74 	bl	1a638 <__aeabi_dmul>
   1f950:	a23f      	add	r2, pc, #252	(adr r2, 1fa50 <__kernel_sin+0x138>)
   1f952:	ca0c      	ldmia	r2!, {r2, r3}
   1f954:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f958:	4630      	mov	r0, r6
   1f95a:	4639      	mov	r1, r7
   1f95c:	f7fa fe6c 	bl	1a638 <__aeabi_dmul>
   1f960:	a23d      	add	r2, pc, #244	(adr r2, 1fa58 <__kernel_sin+0x140>)
   1f962:	ca0c      	ldmia	r2!, {r2, r3}
   1f964:	f7fa fcb4 	bl	1a2d0 <__aeabi_dsub>
   1f968:	4602      	mov	r2, r0
   1f96a:	460b      	mov	r3, r1
   1f96c:	4630      	mov	r0, r6
   1f96e:	4639      	mov	r1, r7
   1f970:	f7fa fe62 	bl	1a638 <__aeabi_dmul>
   1f974:	a23a      	add	r2, pc, #232	(adr r2, 1fa60 <__kernel_sin+0x148>)
   1f976:	ca0c      	ldmia	r2!, {r2, r3}
   1f978:	f7fa fcac 	bl	1a2d4 <__adddf3>
   1f97c:	4602      	mov	r2, r0
   1f97e:	460b      	mov	r3, r1
   1f980:	4630      	mov	r0, r6
   1f982:	4639      	mov	r1, r7
   1f984:	f7fa fe58 	bl	1a638 <__aeabi_dmul>
   1f988:	a237      	add	r2, pc, #220	(adr r2, 1fa68 <__kernel_sin+0x150>)
   1f98a:	ca0c      	ldmia	r2!, {r2, r3}
   1f98c:	f7fa fca0 	bl	1a2d0 <__aeabi_dsub>
   1f990:	4602      	mov	r2, r0
   1f992:	460b      	mov	r3, r1
   1f994:	4630      	mov	r0, r6
   1f996:	4639      	mov	r1, r7
   1f998:	f7fa fe4e 	bl	1a638 <__aeabi_dmul>
   1f99c:	a234      	add	r2, pc, #208	(adr r2, 1fa70 <__kernel_sin+0x158>)
   1f99e:	ca0c      	ldmia	r2!, {r2, r3}
   1f9a0:	f7fa fc98 	bl	1a2d4 <__adddf3>
   1f9a4:	9b0e      	ldr	r3, [sp, #56]
   1f9a6:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f9aa:	b9b3      	cbnz	r3, 1f9da <__kernel_sin+0xc2>
   1f9ac:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1f9b0:	4630      	mov	r0, r6
   1f9b2:	4639      	mov	r1, r7
   1f9b4:	f7fa fe40 	bl	1a638 <__aeabi_dmul>
   1f9b8:	a22f      	add	r2, pc, #188	(adr r2, 1fa78 <__kernel_sin+0x160>)
   1f9ba:	ca0c      	ldmia	r2!, {r2, r3}
   1f9bc:	f7fa fc88 	bl	1a2d0 <__aeabi_dsub>
   1f9c0:	4602      	mov	r2, r0
   1f9c2:	460b      	mov	r3, r1
   1f9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f9c8:	f7fa fe36 	bl	1a638 <__aeabi_dmul>
   1f9cc:	4602      	mov	r2, r0
   1f9ce:	460b      	mov	r3, r1
   1f9d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1f9d4:	f7fa fc7e 	bl	1a2d4 <__adddf3>
   1f9d8:	e031      	b.n	1fa3e <__kernel_sin+0x126>
   1f9da:	2200      	movs	r2, #0
   1f9dc:	4b28      	ldr	r3, [pc, #160]	(1fa80 <__kernel_sin+0x168>)
   1f9de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f9e2:	f7fa fe29 	bl	1a638 <__aeabi_dmul>
   1f9e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1f9ea:	4604      	mov	r4, r0
   1f9ec:	460d      	mov	r5, r1
   1f9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f9f2:	f7fa fe21 	bl	1a638 <__aeabi_dmul>
   1f9f6:	4602      	mov	r2, r0
   1f9f8:	460b      	mov	r3, r1
   1f9fa:	4620      	mov	r0, r4
   1f9fc:	4629      	mov	r1, r5
   1f9fe:	f7fa fc67 	bl	1a2d0 <__aeabi_dsub>
   1fa02:	4602      	mov	r2, r0
   1fa04:	460b      	mov	r3, r1
   1fa06:	4630      	mov	r0, r6
   1fa08:	4639      	mov	r1, r7
   1fa0a:	f7fa fe15 	bl	1a638 <__aeabi_dmul>
   1fa0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fa12:	f7fa fc5d 	bl	1a2d0 <__aeabi_dsub>
   1fa16:	a218      	add	r2, pc, #96	(adr r2, 1fa78 <__kernel_sin+0x160>)
   1fa18:	ca0c      	ldmia	r2!, {r2, r3}
   1fa1a:	4604      	mov	r4, r0
   1fa1c:	460d      	mov	r5, r1
   1fa1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1fa22:	f7fa fe09 	bl	1a638 <__aeabi_dmul>
   1fa26:	4602      	mov	r2, r0
   1fa28:	460b      	mov	r3, r1
   1fa2a:	4620      	mov	r0, r4
   1fa2c:	4629      	mov	r1, r5
   1fa2e:	f7fa fc51 	bl	1a2d4 <__adddf3>
   1fa32:	4602      	mov	r2, r0
   1fa34:	460b      	mov	r3, r1
   1fa36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fa3a:	f7fa fc49 	bl	1a2d0 <__aeabi_dsub>
   1fa3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1fa42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fa46:	b009      	add	sp, #36
   1fa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fa4a:	46c0      	nop			(mov r8, r8)
   1fa4c:	46c0      	nop			(mov r8, r8)
   1fa4e:	46c0      	nop			(mov r8, r8)
   1fa50:	5acfd57c 	.word	0x5acfd57c
   1fa54:	3de5d93a 	.word	0x3de5d93a
   1fa58:	8a2b9ceb 	.word	0x8a2b9ceb
   1fa5c:	3e5ae5e6 	.word	0x3e5ae5e6
   1fa60:	57b1fe7d 	.word	0x57b1fe7d
   1fa64:	3ec71de3 	.word	0x3ec71de3
   1fa68:	19c161d5 	.word	0x19c161d5
   1fa6c:	3f2a01a0 	.word	0x3f2a01a0
   1fa70:	1110f8a6 	.word	0x1110f8a6
   1fa74:	3f811111 	.word	0x3f811111
   1fa78:	55555549 	.word	0x55555549
   1fa7c:	3fc55555 	.word	0x3fc55555
   1fa80:	3fe00000 	.word	0x3fe00000
   1fa84:	46c046c0 	.word	0x46c046c0

0001fa88 <atan>:
   1fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa8a:	4bb3      	ldr	r3, [pc, #716]	(1fd58 <atan+0x2d0>)
   1fa8c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1fa90:	b087      	sub	sp, #28
   1fa92:	429c      	cmp	r4, r3
   1fa94:	4606      	mov	r6, r0
   1fa96:	460f      	mov	r7, r1
   1fa98:	9104      	str	r1, [sp, #16]
   1fa9a:	dd1b      	ble.n	1fad4 <atan+0x4c>
   1fa9c:	4baf      	ldr	r3, [pc, #700]	(1fd5c <atan+0x2d4>)
   1fa9e:	429c      	cmp	r4, r3
   1faa0:	dc08      	bgt.n	1fab4 <atan+0x2c>
   1faa2:	bf14      	ite	ne
   1faa4:	2300      	movne	r3, #0
   1faa6:	2301      	moveq	r3, #1
   1faa8:	2800      	cmp	r0, #0
   1faaa:	bf0c      	ite	eq
   1faac:	2300      	moveq	r3, #0
   1faae:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1fab2:	b133      	cbz	r3, 1fac2 <atan+0x3a>
   1fab4:	4630      	mov	r0, r6
   1fab6:	4639      	mov	r1, r7
   1fab8:	4632      	mov	r2, r6
   1faba:	463b      	mov	r3, r7
   1fabc:	f7fa fc0a 	bl	1a2d4 <__adddf3>
   1fac0:	e10c      	b.n	1fcdc <atan+0x254>
   1fac2:	9904      	ldr	r1, [sp, #16]
   1fac4:	2900      	cmp	r1, #0
   1fac6:	dd02      	ble.n	1face <atan+0x46>
   1fac8:	a687      	add	r6, pc, #540	(adr r6, 1fce8 <atan+0x260>)
   1faca:	cec0      	ldmia	r6!, {r6, r7}
   1facc:	e17b      	b.n	1fdc6 <atan+0x33e>
   1face:	a688      	add	r6, pc, #544	(adr r6, 1fcf0 <atan+0x268>)
   1fad0:	cec0      	ldmia	r6!, {r6, r7}
   1fad2:	e178      	b.n	1fdc6 <atan+0x33e>
   1fad4:	4ba2      	ldr	r3, [pc, #648]	(1fd60 <atan+0x2d8>)
   1fad6:	429c      	cmp	r4, r3
   1fad8:	dc0f      	bgt.n	1fafa <atan+0x72>
   1fada:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   1fade:	429c      	cmp	r4, r3
   1fae0:	dc6f      	bgt.n	1fbc2 <atan+0x13a>
   1fae2:	a285      	add	r2, pc, #532	(adr r2, 1fcf8 <atan+0x270>)
   1fae4:	ca0c      	ldmia	r2!, {r2, r3}
   1fae6:	f7fa fbf5 	bl	1a2d4 <__adddf3>
   1faea:	2200      	movs	r2, #0
   1faec:	4b9d      	ldr	r3, [pc, #628]	(1fd64 <atan+0x2dc>)
   1faee:	f7fb f831 	bl	1ab54 <__aeabi_dcmpgt>
   1faf2:	2800      	cmp	r0, #0
   1faf4:	f040 8167 	bne.w	1fdc6 <atan+0x33e>
   1faf8:	e063      	b.n	1fbc2 <atan+0x13a>
   1fafa:	f000 f96d 	bl	1fdd8 <fabs>
   1fafe:	4b9a      	ldr	r3, [pc, #616]	(1fd68 <atan+0x2e0>)
   1fb00:	4606      	mov	r6, r0
   1fb02:	429c      	cmp	r4, r3
   1fb04:	460f      	mov	r7, r1
   1fb06:	dc34      	bgt.n	1fb72 <atan+0xea>
   1fb08:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   1fb0c:	429c      	cmp	r4, r3
   1fb0e:	dc1a      	bgt.n	1fb46 <atan+0xbe>
   1fb10:	4632      	mov	r2, r6
   1fb12:	463b      	mov	r3, r7
   1fb14:	f7fa fbde 	bl	1a2d4 <__adddf3>
   1fb18:	2200      	movs	r2, #0
   1fb1a:	4b92      	ldr	r3, [pc, #584]	(1fd64 <atan+0x2dc>)
   1fb1c:	f7fa fbd8 	bl	1a2d0 <__aeabi_dsub>
   1fb20:	2200      	movs	r2, #0
   1fb22:	4604      	mov	r4, r0
   1fb24:	460d      	mov	r5, r1
   1fb26:	4630      	mov	r0, r6
   1fb28:	4639      	mov	r1, r7
   1fb2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fb2e:	f7fa fbd1 	bl	1a2d4 <__adddf3>
   1fb32:	460b      	mov	r3, r1
   1fb34:	4602      	mov	r2, r0
   1fb36:	4629      	mov	r1, r5
   1fb38:	4620      	mov	r0, r4
   1fb3a:	f7fa fea7 	bl	1a88c <__aeabi_ddiv>
   1fb3e:	2300      	movs	r3, #0
   1fb40:	4606      	mov	r6, r0
   1fb42:	460f      	mov	r7, r1
   1fb44:	e03f      	b.n	1fbc6 <atan+0x13e>
   1fb46:	2200      	movs	r2, #0
   1fb48:	4b86      	ldr	r3, [pc, #536]	(1fd64 <atan+0x2dc>)
   1fb4a:	f7fa fbc1 	bl	1a2d0 <__aeabi_dsub>
   1fb4e:	2200      	movs	r2, #0
   1fb50:	4604      	mov	r4, r0
   1fb52:	460d      	mov	r5, r1
   1fb54:	4630      	mov	r0, r6
   1fb56:	4639      	mov	r1, r7
   1fb58:	4b82      	ldr	r3, [pc, #520]	(1fd64 <atan+0x2dc>)
   1fb5a:	f7fa fbbb 	bl	1a2d4 <__adddf3>
   1fb5e:	4602      	mov	r2, r0
   1fb60:	460b      	mov	r3, r1
   1fb62:	4620      	mov	r0, r4
   1fb64:	4629      	mov	r1, r5
   1fb66:	f7fa fe91 	bl	1a88c <__aeabi_ddiv>
   1fb6a:	460f      	mov	r7, r1
   1fb6c:	4606      	mov	r6, r0
   1fb6e:	2101      	movs	r1, #1
   1fb70:	e025      	b.n	1fbbe <atan+0x136>
   1fb72:	4b7e      	ldr	r3, [pc, #504]	(1fd6c <atan+0x2e4>)
   1fb74:	429c      	cmp	r4, r3
   1fb76:	dc19      	bgt.n	1fbac <atan+0x124>
   1fb78:	2200      	movs	r2, #0
   1fb7a:	4b7d      	ldr	r3, [pc, #500]	(1fd70 <atan+0x2e8>)
   1fb7c:	f7fa fba8 	bl	1a2d0 <__aeabi_dsub>
   1fb80:	2200      	movs	r2, #0
   1fb82:	4604      	mov	r4, r0
   1fb84:	460d      	mov	r5, r1
   1fb86:	4630      	mov	r0, r6
   1fb88:	4639      	mov	r1, r7
   1fb8a:	4b79      	ldr	r3, [pc, #484]	(1fd70 <atan+0x2e8>)
   1fb8c:	f7fa fd54 	bl	1a638 <__aeabi_dmul>
   1fb90:	2200      	movs	r2, #0
   1fb92:	4b74      	ldr	r3, [pc, #464]	(1fd64 <atan+0x2dc>)
   1fb94:	f7fa fb9e 	bl	1a2d4 <__adddf3>
   1fb98:	460b      	mov	r3, r1
   1fb9a:	4602      	mov	r2, r0
   1fb9c:	4629      	mov	r1, r5
   1fb9e:	4620      	mov	r0, r4
   1fba0:	f7fa fe74 	bl	1a88c <__aeabi_ddiv>
   1fba4:	2302      	movs	r3, #2
   1fba6:	4606      	mov	r6, r0
   1fba8:	460f      	mov	r7, r1
   1fbaa:	e00c      	b.n	1fbc6 <atan+0x13e>
   1fbac:	4632      	mov	r2, r6
   1fbae:	463b      	mov	r3, r7
   1fbb0:	2000      	movs	r0, #0
   1fbb2:	4970      	ldr	r1, [pc, #448]	(1fd74 <atan+0x2ec>)
   1fbb4:	f7fa fe6a 	bl	1a88c <__aeabi_ddiv>
   1fbb8:	460f      	mov	r7, r1
   1fbba:	4606      	mov	r6, r0
   1fbbc:	2103      	movs	r1, #3
   1fbbe:	9105      	str	r1, [sp, #20]
   1fbc0:	e002      	b.n	1fbc8 <atan+0x140>
   1fbc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fbc6:	9305      	str	r3, [sp, #20]
   1fbc8:	4632      	mov	r2, r6
   1fbca:	463b      	mov	r3, r7
   1fbcc:	4630      	mov	r0, r6
   1fbce:	4639      	mov	r1, r7
   1fbd0:	f7fa fd32 	bl	1a638 <__aeabi_dmul>
   1fbd4:	4602      	mov	r2, r0
   1fbd6:	460b      	mov	r3, r1
   1fbd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1fbdc:	f7fa fd2c 	bl	1a638 <__aeabi_dmul>
   1fbe0:	a247      	add	r2, pc, #284	(adr r2, 1fd00 <atan+0x278>)
   1fbe2:	ca0c      	ldmia	r2!, {r2, r3}
   1fbe4:	4604      	mov	r4, r0
   1fbe6:	460d      	mov	r5, r1
   1fbe8:	f7fa fd26 	bl	1a638 <__aeabi_dmul>
   1fbec:	a246      	add	r2, pc, #280	(adr r2, 1fd08 <atan+0x280>)
   1fbee:	ca0c      	ldmia	r2!, {r2, r3}
   1fbf0:	f7fa fb70 	bl	1a2d4 <__adddf3>
   1fbf4:	4602      	mov	r2, r0
   1fbf6:	460b      	mov	r3, r1
   1fbf8:	4620      	mov	r0, r4
   1fbfa:	4629      	mov	r1, r5
   1fbfc:	f7fa fd1c 	bl	1a638 <__aeabi_dmul>
   1fc00:	a243      	add	r2, pc, #268	(adr r2, 1fd10 <atan+0x288>)
   1fc02:	ca0c      	ldmia	r2!, {r2, r3}
   1fc04:	f7fa fb66 	bl	1a2d4 <__adddf3>
   1fc08:	4602      	mov	r2, r0
   1fc0a:	460b      	mov	r3, r1
   1fc0c:	4620      	mov	r0, r4
   1fc0e:	4629      	mov	r1, r5
   1fc10:	f7fa fd12 	bl	1a638 <__aeabi_dmul>
   1fc14:	a240      	add	r2, pc, #256	(adr r2, 1fd18 <atan+0x290>)
   1fc16:	ca0c      	ldmia	r2!, {r2, r3}
   1fc18:	f7fa fb5c 	bl	1a2d4 <__adddf3>
   1fc1c:	4602      	mov	r2, r0
   1fc1e:	460b      	mov	r3, r1
   1fc20:	4620      	mov	r0, r4
   1fc22:	4629      	mov	r1, r5
   1fc24:	f7fa fd08 	bl	1a638 <__aeabi_dmul>
   1fc28:	a23d      	add	r2, pc, #244	(adr r2, 1fd20 <atan+0x298>)
   1fc2a:	ca0c      	ldmia	r2!, {r2, r3}
   1fc2c:	f7fa fb52 	bl	1a2d4 <__adddf3>
   1fc30:	4602      	mov	r2, r0
   1fc32:	460b      	mov	r3, r1
   1fc34:	4620      	mov	r0, r4
   1fc36:	4629      	mov	r1, r5
   1fc38:	f7fa fcfe 	bl	1a638 <__aeabi_dmul>
   1fc3c:	a23a      	add	r2, pc, #232	(adr r2, 1fd28 <atan+0x2a0>)
   1fc3e:	ca0c      	ldmia	r2!, {r2, r3}
   1fc40:	f7fa fb48 	bl	1a2d4 <__adddf3>
   1fc44:	4602      	mov	r2, r0
   1fc46:	460b      	mov	r3, r1
   1fc48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1fc4c:	f7fa fcf4 	bl	1a638 <__aeabi_dmul>
   1fc50:	a237      	add	r2, pc, #220	(adr r2, 1fd30 <atan+0x2a8>)
   1fc52:	ca0c      	ldmia	r2!, {r2, r3}
   1fc54:	e88d 0003 	stmia.w	sp, {r0, r1}
   1fc58:	4620      	mov	r0, r4
   1fc5a:	4629      	mov	r1, r5
   1fc5c:	f7fa fcec 	bl	1a638 <__aeabi_dmul>
   1fc60:	a235      	add	r2, pc, #212	(adr r2, 1fd38 <atan+0x2b0>)
   1fc62:	ca0c      	ldmia	r2!, {r2, r3}
   1fc64:	f7fa fb34 	bl	1a2d0 <__aeabi_dsub>
   1fc68:	4602      	mov	r2, r0
   1fc6a:	460b      	mov	r3, r1
   1fc6c:	4620      	mov	r0, r4
   1fc6e:	4629      	mov	r1, r5
   1fc70:	f7fa fce2 	bl	1a638 <__aeabi_dmul>
   1fc74:	a232      	add	r2, pc, #200	(adr r2, 1fd40 <atan+0x2b8>)
   1fc76:	ca0c      	ldmia	r2!, {r2, r3}
   1fc78:	f7fa fb2a 	bl	1a2d0 <__aeabi_dsub>
   1fc7c:	4602      	mov	r2, r0
   1fc7e:	460b      	mov	r3, r1
   1fc80:	4620      	mov	r0, r4
   1fc82:	4629      	mov	r1, r5
   1fc84:	f7fa fcd8 	bl	1a638 <__aeabi_dmul>
   1fc88:	a22f      	add	r2, pc, #188	(adr r2, 1fd48 <atan+0x2c0>)
   1fc8a:	ca0c      	ldmia	r2!, {r2, r3}
   1fc8c:	f7fa fb20 	bl	1a2d0 <__aeabi_dsub>
   1fc90:	4602      	mov	r2, r0
   1fc92:	460b      	mov	r3, r1
   1fc94:	4620      	mov	r0, r4
   1fc96:	4629      	mov	r1, r5
   1fc98:	f7fa fcce 	bl	1a638 <__aeabi_dmul>
   1fc9c:	a22c      	add	r2, pc, #176	(adr r2, 1fd50 <atan+0x2c8>)
   1fc9e:	ca0c      	ldmia	r2!, {r2, r3}
   1fca0:	f7fa fb16 	bl	1a2d0 <__aeabi_dsub>
   1fca4:	4602      	mov	r2, r0
   1fca6:	460b      	mov	r3, r1
   1fca8:	4620      	mov	r0, r4
   1fcaa:	4629      	mov	r1, r5
   1fcac:	f7fa fcc4 	bl	1a638 <__aeabi_dmul>
   1fcb0:	460b      	mov	r3, r1
   1fcb2:	9905      	ldr	r1, [sp, #20]
   1fcb4:	4602      	mov	r2, r0
   1fcb6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1fcba:	d15d      	bne.n	1fd78 <atan+0x2f0>
   1fcbc:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1fcc0:	f7fa fb08 	bl	1a2d4 <__adddf3>
   1fcc4:	4602      	mov	r2, r0
   1fcc6:	460b      	mov	r3, r1
   1fcc8:	4630      	mov	r0, r6
   1fcca:	4639      	mov	r1, r7
   1fccc:	f7fa fcb4 	bl	1a638 <__aeabi_dmul>
   1fcd0:	4602      	mov	r2, r0
   1fcd2:	460b      	mov	r3, r1
   1fcd4:	4630      	mov	r0, r6
   1fcd6:	4639      	mov	r1, r7
   1fcd8:	f7fa fafa 	bl	1a2d0 <__aeabi_dsub>
   1fcdc:	4606      	mov	r6, r0
   1fcde:	460f      	mov	r7, r1
   1fce0:	e071      	b.n	1fdc6 <atan+0x33e>
   1fce2:	46c0      	nop			(mov r8, r8)
   1fce4:	46c0      	nop			(mov r8, r8)
   1fce6:	46c0      	nop			(mov r8, r8)
   1fce8:	54442d18 	.word	0x54442d18
   1fcec:	3ff921fb 	.word	0x3ff921fb
   1fcf0:	54442d18 	.word	0x54442d18
   1fcf4:	bff921fb 	.word	0xbff921fb
   1fcf8:	8800759c 	.word	0x8800759c
   1fcfc:	7e37e43c 	.word	0x7e37e43c
   1fd00:	e322da11 	.word	0xe322da11
   1fd04:	3f90ad3a 	.word	0x3f90ad3a
   1fd08:	24760deb 	.word	0x24760deb
   1fd0c:	3fa97b4b 	.word	0x3fa97b4b
   1fd10:	a0d03d51 	.word	0xa0d03d51
   1fd14:	3fb10d66 	.word	0x3fb10d66
   1fd18:	c54c206e 	.word	0xc54c206e
   1fd1c:	3fb745cd 	.word	0x3fb745cd
   1fd20:	920083ff 	.word	0x920083ff
   1fd24:	3fc24924 	.word	0x3fc24924
   1fd28:	5555550d 	.word	0x5555550d
   1fd2c:	3fd55555 	.word	0x3fd55555
   1fd30:	2c6a6c2f 	.word	0x2c6a6c2f
   1fd34:	bfa2b444 	.word	0xbfa2b444
   1fd38:	52defd9a 	.word	0x52defd9a
   1fd3c:	3fadde2d 	.word	0x3fadde2d
   1fd40:	af749a6d 	.word	0xaf749a6d
   1fd44:	3fb3b0f2 	.word	0x3fb3b0f2
   1fd48:	fe231671 	.word	0xfe231671
   1fd4c:	3fbc71c6 	.word	0x3fbc71c6
   1fd50:	9998ebc4 	.word	0x9998ebc4
   1fd54:	3fc99999 	.word	0x3fc99999
   1fd58:	440fffff 	.word	0x440fffff
   1fd5c:	7ff00000 	.word	0x7ff00000
   1fd60:	3fdbffff 	.word	0x3fdbffff
   1fd64:	3ff00000 	.word	0x3ff00000
   1fd68:	3ff2ffff 	.word	0x3ff2ffff
   1fd6c:	40037fff 	.word	0x40037fff
   1fd70:	3ff80000 	.word	0x3ff80000
   1fd74:	bff00000 	.word	0xbff00000
   1fd78:	9905      	ldr	r1, [sp, #20]
   1fd7a:	4c15      	ldr	r4, [pc, #84]	(1fdd0 <atan+0x348>)
   1fd7c:	00cd      	lsls	r5, r1, #3
   1fd7e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1fd82:	f7fa faa7 	bl	1a2d4 <__adddf3>
   1fd86:	4602      	mov	r2, r0
   1fd88:	460b      	mov	r3, r1
   1fd8a:	4630      	mov	r0, r6
   1fd8c:	4639      	mov	r1, r7
   1fd8e:	f7fa fc53 	bl	1a638 <__aeabi_dmul>
   1fd92:	4b10      	ldr	r3, [pc, #64]	(1fdd4 <atan+0x34c>)
   1fd94:	1964      	adds	r4, r4, r5
   1fd96:	195b      	adds	r3, r3, r5
   1fd98:	cb0c      	ldmia	r3!, {r2, r3}
   1fd9a:	f7fa fa99 	bl	1a2d0 <__aeabi_dsub>
   1fd9e:	4632      	mov	r2, r6
   1fda0:	463b      	mov	r3, r7
   1fda2:	f7fa fa95 	bl	1a2d0 <__aeabi_dsub>
   1fda6:	4602      	mov	r2, r0
   1fda8:	460b      	mov	r3, r1
   1fdaa:	e894 0003 	ldmia.w	r4, {r0, r1}
   1fdae:	f7fa fa8f 	bl	1a2d0 <__aeabi_dsub>
   1fdb2:	9b04      	ldr	r3, [sp, #16]
   1fdb4:	2b00      	cmp	r3, #0
   1fdb6:	bfa7      	ittee	ge
   1fdb8:	4602      	movge	r2, r0
   1fdba:	460b      	movge	r3, r1
   1fdbc:	4602      	movlt	r2, r0
   1fdbe:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
   1fdc2:	4616      	mov	r6, r2
   1fdc4:	461f      	mov	r7, r3
   1fdc6:	4630      	mov	r0, r6
   1fdc8:	4639      	mov	r1, r7
   1fdca:	b007      	add	sp, #28
   1fdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fdce:	46c0      	nop			(mov r8, r8)
   1fdd0:	00023668 	.word	0x00023668
   1fdd4:	00023688 	.word	0x00023688

0001fdd8 <fabs>:
   1fdd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1fddc:	b530      	push	{r4, r5, lr}
   1fdde:	460d      	mov	r5, r1
   1fde0:	4604      	mov	r4, r0
   1fde2:	4619      	mov	r1, r3
   1fde4:	bd30      	pop	{r4, r5, pc}
   1fde6:	46c0      	nop			(mov r8, r8)

0001fde8 <floor>:
   1fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdea:	150b      	asrs	r3, r1, #20
   1fdec:	055b      	lsls	r3, r3, #21
   1fdee:	0d5b      	lsrs	r3, r3, #21
   1fdf0:	f5a3 757e 	sub.w	r5, r3, #1016	; 0x3f8
   1fdf4:	3d07      	subs	r5, #7
   1fdf6:	b083      	sub	sp, #12
   1fdf8:	2d13      	cmp	r5, #19
   1fdfa:	460c      	mov	r4, r1
   1fdfc:	9001      	str	r0, [sp, #4]
   1fdfe:	4606      	mov	r6, r0
   1fe00:	dc32      	bgt.n	1fe68 <floor+0x80>
   1fe02:	2d00      	cmp	r5, #0
   1fe04:	da14      	bge.n	1fe30 <floor+0x48>
   1fe06:	a230      	add	r2, pc, #192	(adr r2, 1fec8 <floor+0xe0>)
   1fe08:	ca0c      	ldmia	r2!, {r2, r3}
   1fe0a:	f7fa fa63 	bl	1a2d4 <__adddf3>
   1fe0e:	2200      	movs	r2, #0
   1fe10:	2300      	movs	r3, #0
   1fe12:	f7fa fe9f 	bl	1ab54 <__aeabi_dcmpgt>
   1fe16:	2800      	cmp	r0, #0
   1fe18:	d051      	beq.n	1febe <floor+0xd6>
   1fe1a:	2c00      	cmp	r4, #0
   1fe1c:	db01      	blt.n	1fe22 <floor+0x3a>
   1fe1e:	2400      	movs	r4, #0
   1fe20:	e020      	b.n	1fe64 <floor+0x7c>
   1fe22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1fe26:	4333      	orrs	r3, r6
   1fe28:	4b29      	ldr	r3, [pc, #164]	(1fed0 <floor+0xe8>)
   1fe2a:	bf18      	it	ne
   1fe2c:	461c      	movne	r4, r3
   1fe2e:	e019      	b.n	1fe64 <floor+0x7c>
   1fe30:	4b28      	ldr	r3, [pc, #160]	(1fed4 <floor+0xec>)
   1fe32:	9a01      	ldr	r2, [sp, #4]
   1fe34:	fa53 f705 	asrs.w	r7, r3, r5
   1fe38:	ea07 0301 	and.w	r3, r7, r1
   1fe3c:	431a      	orrs	r2, r3
   1fe3e:	d040      	beq.n	1fec2 <floor+0xda>
   1fe40:	a221      	add	r2, pc, #132	(adr r2, 1fec8 <floor+0xe0>)
   1fe42:	ca0c      	ldmia	r2!, {r2, r3}
   1fe44:	f7fa fa46 	bl	1a2d4 <__adddf3>
   1fe48:	2200      	movs	r2, #0
   1fe4a:	2300      	movs	r3, #0
   1fe4c:	f7fa fe82 	bl	1ab54 <__aeabi_dcmpgt>
   1fe50:	2800      	cmp	r0, #0
   1fe52:	d034      	beq.n	1febe <floor+0xd6>
   1fe54:	2c00      	cmp	r4, #0
   1fe56:	da03      	bge.n	1fe60 <floor+0x78>
   1fe58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1fe5c:	412b      	asrs	r3, r5
   1fe5e:	18e4      	adds	r4, r4, r3
   1fe60:	ea24 0407 	bic.w	r4, r4, r7
   1fe64:	2600      	movs	r6, #0
   1fe66:	e02a      	b.n	1febe <floor+0xd6>
   1fe68:	2d33      	cmp	r5, #51
   1fe6a:	dd07      	ble.n	1fe7c <floor+0x94>
   1fe6c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1fe70:	d127      	bne.n	1fec2 <floor+0xda>
   1fe72:	4602      	mov	r2, r0
   1fe74:	460b      	mov	r3, r1
   1fe76:	f7fa fa2d 	bl	1a2d4 <__adddf3>
   1fe7a:	e022      	b.n	1fec2 <floor+0xda>
   1fe7c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
   1fe80:	3b03      	subs	r3, #3
   1fe82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fe86:	fa32 f703 	lsrs.w	r7, r2, r3
   1fe8a:	4207      	tst	r7, r0
   1fe8c:	d019      	beq.n	1fec2 <floor+0xda>
   1fe8e:	a20e      	add	r2, pc, #56	(adr r2, 1fec8 <floor+0xe0>)
   1fe90:	ca0c      	ldmia	r2!, {r2, r3}
   1fe92:	f7fa fa1f 	bl	1a2d4 <__adddf3>
   1fe96:	2200      	movs	r2, #0
   1fe98:	2300      	movs	r3, #0
   1fe9a:	f7fa fe5b 	bl	1ab54 <__aeabi_dcmpgt>
   1fe9e:	b170      	cbz	r0, 1febe <floor+0xd6>
   1fea0:	2c00      	cmp	r4, #0
   1fea2:	da0a      	bge.n	1feba <floor+0xd2>
   1fea4:	2d14      	cmp	r5, #20
   1fea6:	d007      	beq.n	1feb8 <floor+0xd0>
   1fea8:	2301      	movs	r3, #1
   1feaa:	f1c5 0234 	rsb	r2, r5, #52	; 0x34
   1feae:	4093      	lsls	r3, r2
   1feb0:	18f6      	adds	r6, r6, r3
   1feb2:	9b01      	ldr	r3, [sp, #4]
   1feb4:	429e      	cmp	r6, r3
   1feb6:	d200      	bcs.n	1feba <floor+0xd2>
   1feb8:	3401      	adds	r4, #1
   1feba:	ea26 0607 	bic.w	r6, r6, r7
   1febe:	4630      	mov	r0, r6
   1fec0:	4621      	mov	r1, r4
   1fec2:	b003      	add	sp, #12
   1fec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fec6:	46c0      	nop			(mov r8, r8)
   1fec8:	8800759c 	.word	0x8800759c
   1fecc:	7e37e43c 	.word	0x7e37e43c
   1fed0:	bff00000 	.word	0xbff00000
   1fed4:	000fffff 	.word	0x000fffff

0001fed8 <__isnand>:
   1fed8:	460b      	mov	r3, r1
   1feda:	f1c0 0100 	rsb	r1, r0, #0	; 0x0
   1fede:	4301      	orrs	r1, r0
   1fee0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1fee4:	ea40 70d1 	orr.w	r0, r0, r1, lsr #31
   1fee8:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
   1feec:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
   1fef0:	0fc0      	lsrs	r0, r0, #31
   1fef2:	4770      	bx	lr

0001fef4 <matherr>:
   1fef4:	2000      	movs	r0, #0
   1fef6:	4770      	bx	lr

0001fef8 <scalbn>:
   1fef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fefa:	4b37      	ldr	r3, [pc, #220]	(1ffd8 <scalbn+0xe0>)
   1fefc:	460d      	mov	r5, r1
   1fefe:	ea05 0303 	and.w	r3, r5, r3
   1ff02:	4617      	mov	r7, r2
   1ff04:	b081      	sub	sp, #4
   1ff06:	4604      	mov	r4, r0
   1ff08:	460e      	mov	r6, r1
   1ff0a:	151a      	asrs	r2, r3, #20
   1ff0c:	b973      	cbnz	r3, 1ff2c <scalbn+0x34>
   1ff0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1ff12:	4303      	orrs	r3, r0
   1ff14:	d054      	beq.n	1ffc0 <scalbn+0xc8>
   1ff16:	4629      	mov	r1, r5
   1ff18:	2200      	movs	r2, #0
   1ff1a:	4b30      	ldr	r3, [pc, #192]	(1ffdc <scalbn+0xe4>)
   1ff1c:	f7fa fb8c 	bl	1a638 <__aeabi_dmul>
   1ff20:	4b2f      	ldr	r3, [pc, #188]	(1ffe0 <scalbn+0xe8>)
   1ff22:	4604      	mov	r4, r0
   1ff24:	429f      	cmp	r7, r3
   1ff26:	460d      	mov	r5, r1
   1ff28:	da0a      	bge.n	1ff40 <scalbn+0x48>
   1ff2a:	e037      	b.n	1ff9c <scalbn+0xa4>
   1ff2c:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1ff30:	429a      	cmp	r2, r3
   1ff32:	d10c      	bne.n	1ff4e <scalbn+0x56>
   1ff34:	4629      	mov	r1, r5
   1ff36:	4602      	mov	r2, r0
   1ff38:	462b      	mov	r3, r5
   1ff3a:	f7fa f9cb 	bl	1a2d4 <__adddf3>
   1ff3e:	e03d      	b.n	1ffbc <scalbn+0xc4>
   1ff40:	4b25      	ldr	r3, [pc, #148]	(1ffd8 <scalbn+0xe0>)
   1ff42:	460e      	mov	r6, r1
   1ff44:	ea01 0303 	and.w	r3, r1, r3
   1ff48:	151b      	asrs	r3, r3, #20
   1ff4a:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
   1ff4e:	eb02 0c07 	add.w	ip, r2, r7
   1ff52:	f240 73fe 	movw	r3, #2046	; 0x7fe
   1ff56:	459c      	cmp	ip, r3
   1ff58:	dc11      	bgt.n	1ff7e <scalbn+0x86>
   1ff5a:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1ff5e:	dd07      	ble.n	1ff70 <scalbn+0x78>
   1ff60:	f026 41fe 	bic.w	r1, r6, #2130706432	; 0x7f000000
   1ff64:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
   1ff68:	ea41 530c 	orr.w	r3, r1, ip, lsl #20
   1ff6c:	461d      	mov	r5, r3
   1ff6e:	e027      	b.n	1ffc0 <scalbn+0xc8>
   1ff70:	f11c 0f35 	cmn.w	ip, #53	; 0x35
   1ff74:	da15      	bge.n	1ffa2 <scalbn+0xaa>
   1ff76:	f24c 3350 	movw	r3, #50000	; 0xc350
   1ff7a:	429f      	cmp	r7, r3
   1ff7c:	dd08      	ble.n	1ff90 <scalbn+0x98>
   1ff7e:	4622      	mov	r2, r4
   1ff80:	462b      	mov	r3, r5
   1ff82:	a011      	add	r0, pc, #68	(adr r0, 1ffc8 <scalbn+0xd0>)
   1ff84:	c803      	ldmia	r0!, {r0, r1}
   1ff86:	f000 f82f 	bl	1ffe8 <copysign>
   1ff8a:	a20f      	add	r2, pc, #60	(adr r2, 1ffc8 <scalbn+0xd0>)
   1ff8c:	ca0c      	ldmia	r2!, {r2, r3}
   1ff8e:	e013      	b.n	1ffb8 <scalbn+0xc0>
   1ff90:	a00f      	add	r0, pc, #60	(adr r0, 1ffd0 <scalbn+0xd8>)
   1ff92:	c803      	ldmia	r0!, {r0, r1}
   1ff94:	4622      	mov	r2, r4
   1ff96:	462b      	mov	r3, r5
   1ff98:	f000 f826 	bl	1ffe8 <copysign>
   1ff9c:	a20c      	add	r2, pc, #48	(adr r2, 1ffd0 <scalbn+0xd8>)
   1ff9e:	ca0c      	ldmia	r2!, {r2, r3}
   1ffa0:	e00a      	b.n	1ffb8 <scalbn+0xc0>
   1ffa2:	f026 43fe 	bic.w	r3, r6, #2130706432	; 0x7f000000
   1ffa6:	f10c 0236 	add.w	r2, ip, #54	; 0x36
   1ffaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1ffae:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
   1ffb2:	4b0c      	ldr	r3, [pc, #48]	(1ffe4 <scalbn+0xec>)
   1ffb4:	4620      	mov	r0, r4
   1ffb6:	2200      	movs	r2, #0
   1ffb8:	f7fa fb3e 	bl	1a638 <__aeabi_dmul>
   1ffbc:	4604      	mov	r4, r0
   1ffbe:	460d      	mov	r5, r1
   1ffc0:	4620      	mov	r0, r4
   1ffc2:	4629      	mov	r1, r5
   1ffc4:	b001      	add	sp, #4
   1ffc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ffc8:	8800759c 	.word	0x8800759c
   1ffcc:	7e37e43c 	.word	0x7e37e43c
   1ffd0:	c2f8f359 	.word	0xc2f8f359
   1ffd4:	01a56e1f 	.word	0x01a56e1f
   1ffd8:	7ff00000 	.word	0x7ff00000
   1ffdc:	43500000 	.word	0x43500000
   1ffe0:	ffff3cb0 	.word	0xffff3cb0
   1ffe4:	3c900000 	.word	0x3c900000

0001ffe8 <copysign>:
   1ffe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffea:	4606      	mov	r6, r0
   1ffec:	460f      	mov	r7, r1
   1ffee:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
   1fff2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1fff6:	461d      	mov	r5, r3
   1fff8:	ea40 0301 	orr.w	r3, r0, r1
   1fffc:	4614      	mov	r4, r2
   1fffe:	4630      	mov	r0, r6
   20000:	4619      	mov	r1, r3
   20002:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020004 <abort>:
   20004:	2006      	movs	r0, #6
   20006:	f000 ffb1 	bl	20f6c <raise>
   2000a:	2001      	movs	r0, #1
   2000c:	f7f7 fa24 	bl	17458 <_exit>

00020010 <__errno>:
   20010:	4b01      	ldr	r3, [pc, #4]	(20018 <__errno+0x8>)
   20012:	6818      	ldr	r0, [r3, #0]
   20014:	300c      	adds	r0, #12
   20016:	4770      	bx	lr
   20018:	20000044 	.word	0x20000044

0002001c <_fputc_r>:
   2001c:	b570      	push	{r4, r5, r6, lr}
   2001e:	4604      	mov	r4, r0
   20020:	460e      	mov	r6, r1
   20022:	4615      	mov	r5, r2
   20024:	b118      	cbz	r0, 2002e <_fputc_r+0x12>
   20026:	6983      	ldr	r3, [r0, #24]
   20028:	b90b      	cbnz	r3, 2002e <_fputc_r+0x12>
   2002a:	f001 faf9 	bl	21620 <__sinit>
   2002e:	4b0a      	ldr	r3, [pc, #40]	(20058 <_fputc_r+0x3c>)
   20030:	429d      	cmp	r5, r3
   20032:	bf08      	it	eq
   20034:	6825      	ldreq	r5, [r4, #0]
   20036:	d008      	beq.n	2004a <_fputc_r+0x2e>
   20038:	4b08      	ldr	r3, [pc, #32]	(2005c <_fputc_r+0x40>)
   2003a:	429d      	cmp	r5, r3
   2003c:	bf08      	it	eq
   2003e:	6865      	ldreq	r5, [r4, #4]
   20040:	d003      	beq.n	2004a <_fputc_r+0x2e>
   20042:	4b07      	ldr	r3, [pc, #28]	(20060 <_fputc_r+0x44>)
   20044:	429d      	cmp	r5, r3
   20046:	bf08      	it	eq
   20048:	68a5      	ldreq	r5, [r4, #8]
   2004a:	4620      	mov	r0, r4
   2004c:	4631      	mov	r1, r6
   2004e:	462a      	mov	r2, r5
   20050:	f000 fcc6 	bl	209e0 <_putc_r>
   20054:	bd70      	pop	{r4, r5, r6, pc}
   20056:	46c0      	nop			(mov r8, r8)
   20058:	000236b0 	.word	0x000236b0
   2005c:	000236d0 	.word	0x000236d0
   20060:	000236f0 	.word	0x000236f0

00020064 <fputc>:
   20064:	b500      	push	{lr}
   20066:	4b05      	ldr	r3, [pc, #20]	(2007c <fputc+0x18>)
   20068:	4684      	mov	ip, r0
   2006a:	460a      	mov	r2, r1
   2006c:	b081      	sub	sp, #4
   2006e:	6818      	ldr	r0, [r3, #0]
   20070:	4661      	mov	r1, ip
   20072:	f7ff ffd3 	bl	2001c <_fputc_r>
   20076:	b001      	add	sp, #4
   20078:	bd00      	pop	{pc}
   2007a:	46c0      	nop			(mov r8, r8)
   2007c:	20000044 	.word	0x20000044

00020080 <_fputs_r>:
   20080:	b530      	push	{r4, r5, lr}
   20082:	4605      	mov	r5, r0
   20084:	b087      	sub	sp, #28
   20086:	4608      	mov	r0, r1
   20088:	4614      	mov	r4, r2
   2008a:	9104      	str	r1, [sp, #16]
   2008c:	f001 f824 	bl	210d8 <strlen>
   20090:	ab04      	add	r3, sp, #16
   20092:	9301      	str	r3, [sp, #4]
   20094:	2301      	movs	r3, #1
   20096:	9003      	str	r0, [sp, #12]
   20098:	9005      	str	r0, [sp, #20]
   2009a:	9302      	str	r3, [sp, #8]
   2009c:	b125      	cbz	r5, 200a8 <_fputs_r+0x28>
   2009e:	69ab      	ldr	r3, [r5, #24]
   200a0:	b913      	cbnz	r3, 200a8 <_fputs_r+0x28>
   200a2:	4628      	mov	r0, r5
   200a4:	f001 fabc 	bl	21620 <__sinit>
   200a8:	4b10      	ldr	r3, [pc, #64]	(200ec <_fputs_r+0x6c>)
   200aa:	429c      	cmp	r4, r3
   200ac:	bf08      	it	eq
   200ae:	682c      	ldreq	r4, [r5, #0]
   200b0:	d008      	beq.n	200c4 <_fputs_r+0x44>
   200b2:	4b0f      	ldr	r3, [pc, #60]	(200f0 <_fputs_r+0x70>)
   200b4:	429c      	cmp	r4, r3
   200b6:	bf08      	it	eq
   200b8:	686c      	ldreq	r4, [r5, #4]
   200ba:	d003      	beq.n	200c4 <_fputs_r+0x44>
   200bc:	4b0d      	ldr	r3, [pc, #52]	(200f4 <_fputs_r+0x74>)
   200be:	429c      	cmp	r4, r3
   200c0:	bf08      	it	eq
   200c2:	68ac      	ldreq	r4, [r5, #8]
   200c4:	89a3      	ldrh	r3, [r4, #12]
   200c6:	4628      	mov	r0, r5
   200c8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   200cc:	bf02      	ittt	eq
   200ce:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   200d2:	81a3      	strheq	r3, [r4, #12]
   200d4:	6e63      	ldreq	r3, [r4, #100]
   200d6:	4621      	mov	r1, r4
   200d8:	bf04      	itt	eq
   200da:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   200de:	6663      	streq	r3, [r4, #100]
   200e0:	aa01      	add	r2, sp, #4
   200e2:	f000 f817 	bl	20114 <__sfvwrite_r>
   200e6:	b007      	add	sp, #28
   200e8:	bd30      	pop	{r4, r5, pc}
   200ea:	46c0      	nop			(mov r8, r8)
   200ec:	000236b0 	.word	0x000236b0
   200f0:	000236d0 	.word	0x000236d0
   200f4:	000236f0 	.word	0x000236f0

000200f8 <fputs>:
   200f8:	b500      	push	{lr}
   200fa:	4b05      	ldr	r3, [pc, #20]	(20110 <fputs+0x18>)
   200fc:	4684      	mov	ip, r0
   200fe:	460a      	mov	r2, r1
   20100:	b081      	sub	sp, #4
   20102:	6818      	ldr	r0, [r3, #0]
   20104:	4661      	mov	r1, ip
   20106:	f7ff ffbb 	bl	20080 <_fputs_r>
   2010a:	b001      	add	sp, #4
   2010c:	bd00      	pop	{pc}
   2010e:	46c0      	nop			(mov r8, r8)
   20110:	20000044 	.word	0x20000044

00020114 <__sfvwrite_r>:
   20114:	b5f0      	push	{r4, r5, r6, r7, lr}
   20116:	6893      	ldr	r3, [r2, #8]
   20118:	b089      	sub	sp, #36
   2011a:	9001      	str	r0, [sp, #4]
   2011c:	460d      	mov	r5, r1
   2011e:	9200      	str	r2, [sp, #0]
   20120:	2b00      	cmp	r3, #0
   20122:	f000 815b 	beq.w	203dc <__sfvwrite_r+0x2c8>
   20126:	898b      	ldrh	r3, [r1, #12]
   20128:	f013 0f08 	tst.w	r3, #8	; 0x8
   2012c:	d001      	beq.n	20132 <__sfvwrite_r+0x1e>
   2012e:	690b      	ldr	r3, [r1, #16]
   20130:	b963      	cbnz	r3, 2014c <__sfvwrite_r+0x38>
   20132:	9801      	ldr	r0, [sp, #4]
   20134:	4629      	mov	r1, r5
   20136:	f001 f891 	bl	2125c <__swsetup_r>
   2013a:	b138      	cbz	r0, 2014c <__sfvwrite_r+0x38>
   2013c:	89ab      	ldrh	r3, [r5, #12]
   2013e:	9801      	ldr	r0, [sp, #4]
   20140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20144:	81ab      	strh	r3, [r5, #12]
   20146:	2309      	movs	r3, #9
   20148:	60c3      	str	r3, [r0, #12]
   2014a:	e144      	b.n	203d6 <__sfvwrite_r+0x2c2>
   2014c:	9a00      	ldr	r2, [sp, #0]
   2014e:	89ab      	ldrh	r3, [r5, #12]
   20150:	6812      	ldr	r2, [r2, #0]
   20152:	f013 0f02 	tst.w	r3, #2	; 0x2
   20156:	9202      	str	r2, [sp, #8]
   20158:	d021      	beq.n	2019e <__sfvwrite_r+0x8a>
   2015a:	2600      	movs	r6, #0
   2015c:	2700      	movs	r7, #0
   2015e:	e004      	b.n	2016a <__sfvwrite_r+0x56>
   20160:	9b02      	ldr	r3, [sp, #8]
   20162:	681f      	ldr	r7, [r3, #0]
   20164:	685e      	ldr	r6, [r3, #4]
   20166:	3308      	adds	r3, #8
   20168:	9302      	str	r3, [sp, #8]
   2016a:	2e00      	cmp	r6, #0
   2016c:	d0f8      	beq.n	20160 <__sfvwrite_r+0x4c>
   2016e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   20172:	bf34      	ite	cc
   20174:	4633      	movcc	r3, r6
   20176:	f44f 7380 	movcs.w	r3, #256	; 0x100
   2017a:	6a29      	ldr	r1, [r5, #32]
   2017c:	6aac      	ldr	r4, [r5, #40]
   2017e:	9801      	ldr	r0, [sp, #4]
   20180:	463a      	mov	r2, r7
   20182:	47a0      	blx	r4
   20184:	2800      	cmp	r0, #0
   20186:	f340 8122 	ble.w	203ce <__sfvwrite_r+0x2ba>
   2018a:	9a00      	ldr	r2, [sp, #0]
   2018c:	6893      	ldr	r3, [r2, #8]
   2018e:	1a1b      	subs	r3, r3, r0
   20190:	6093      	str	r3, [r2, #8]
   20192:	2b00      	cmp	r3, #0
   20194:	f000 8122 	beq.w	203dc <__sfvwrite_r+0x2c8>
   20198:	183f      	adds	r7, r7, r0
   2019a:	1a36      	subs	r6, r6, r0
   2019c:	e7e5      	b.n	2016a <__sfvwrite_r+0x56>
   2019e:	f013 0f01 	tst.w	r3, #1	; 0x1
   201a2:	d005      	beq.n	201b0 <__sfvwrite_r+0x9c>
   201a4:	2700      	movs	r7, #0
   201a6:	2300      	movs	r3, #0
   201a8:	9306      	str	r3, [sp, #24]
   201aa:	9703      	str	r7, [sp, #12]
   201ac:	9704      	str	r7, [sp, #16]
   201ae:	e0aa      	b.n	20306 <__sfvwrite_r+0x1f2>
   201b0:	2600      	movs	r6, #0
   201b2:	9607      	str	r6, [sp, #28]
   201b4:	e006      	b.n	201c4 <__sfvwrite_r+0xb0>
   201b6:	9802      	ldr	r0, [sp, #8]
   201b8:	9a02      	ldr	r2, [sp, #8]
   201ba:	6800      	ldr	r0, [r0, #0]
   201bc:	6856      	ldr	r6, [r2, #4]
   201be:	3208      	adds	r2, #8
   201c0:	9007      	str	r0, [sp, #28]
   201c2:	9202      	str	r2, [sp, #8]
   201c4:	2e00      	cmp	r6, #0
   201c6:	d0f6      	beq.n	201b6 <__sfvwrite_r+0xa2>
   201c8:	89aa      	ldrh	r2, [r5, #12]
   201ca:	68ac      	ldr	r4, [r5, #8]
   201cc:	f412 7f00 	tst.w	r2, #512	; 0x200
   201d0:	d056      	beq.n	20280 <__sfvwrite_r+0x16c>
   201d2:	42a6      	cmp	r6, r4
   201d4:	d346      	bcc.n	20264 <__sfvwrite_r+0x150>
   201d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
   201da:	d041      	beq.n	20260 <__sfvwrite_r+0x14c>
   201dc:	6929      	ldr	r1, [r5, #16]
   201de:	682b      	ldr	r3, [r5, #0]
   201e0:	1a5b      	subs	r3, r3, r1
   201e2:	9305      	str	r3, [sp, #20]
   201e4:	696b      	ldr	r3, [r5, #20]
   201e6:	9805      	ldr	r0, [sp, #20]
   201e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   201ec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   201f0:	105f      	asrs	r7, r3, #1
   201f2:	1c43      	adds	r3, r0, #1
   201f4:	199b      	adds	r3, r3, r6
   201f6:	429f      	cmp	r7, r3
   201f8:	bf38      	it	cc
   201fa:	461f      	movcc	r7, r3
   201fc:	f412 6f80 	tst.w	r2, #1024	; 0x400
   20200:	d016      	beq.n	20230 <__sfvwrite_r+0x11c>
   20202:	9801      	ldr	r0, [sp, #4]
   20204:	4639      	mov	r1, r7
   20206:	f000 f95b 	bl	204c0 <_malloc_r>
   2020a:	4604      	mov	r4, r0
   2020c:	b918      	cbnz	r0, 20216 <__sfvwrite_r+0x102>
   2020e:	9a01      	ldr	r2, [sp, #4]
   20210:	230c      	movs	r3, #12
   20212:	60d3      	str	r3, [r2, #12]
   20214:	e0db      	b.n	203ce <__sfvwrite_r+0x2ba>
   20216:	6929      	ldr	r1, [r5, #16]
   20218:	9a05      	ldr	r2, [sp, #20]
   2021a:	f000 fba7 	bl	2096c <memcpy>
   2021e:	89ab      	ldrh	r3, [r5, #12]
   20220:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   20224:	041b      	lsls	r3, r3, #16
   20226:	0c1b      	lsrs	r3, r3, #16
   20228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2022c:	81ab      	strh	r3, [r5, #12]
   2022e:	e00d      	b.n	2024c <__sfvwrite_r+0x138>
   20230:	9801      	ldr	r0, [sp, #4]
   20232:	463a      	mov	r2, r7
   20234:	f000 fc2e 	bl	20a94 <_realloc_r>
   20238:	4604      	mov	r4, r0
   2023a:	b938      	cbnz	r0, 2024c <__sfvwrite_r+0x138>
   2023c:	9801      	ldr	r0, [sp, #4]
   2023e:	6929      	ldr	r1, [r5, #16]
   20240:	f001 fa74 	bl	2172c <_free_r>
   20244:	9801      	ldr	r0, [sp, #4]
   20246:	230c      	movs	r3, #12
   20248:	60c3      	str	r3, [r0, #12]
   2024a:	e0c0      	b.n	203ce <__sfvwrite_r+0x2ba>
   2024c:	9a05      	ldr	r2, [sp, #20]
   2024e:	612c      	str	r4, [r5, #16]
   20250:	eb04 0302 	add.w	r3, r4, r2
   20254:	602b      	str	r3, [r5, #0]
   20256:	ebc2 0307 	rsb	r3, r2, r7
   2025a:	616f      	str	r7, [r5, #20]
   2025c:	4634      	mov	r4, r6
   2025e:	60ab      	str	r3, [r5, #8]
   20260:	42a6      	cmp	r6, r4
   20262:	d200      	bcs.n	20266 <__sfvwrite_r+0x152>
   20264:	4634      	mov	r4, r6
   20266:	4622      	mov	r2, r4
   20268:	6828      	ldr	r0, [r5, #0]
   2026a:	9907      	ldr	r1, [sp, #28]
   2026c:	f000 fb8c 	bl	20988 <memmove>
   20270:	68ab      	ldr	r3, [r5, #8]
   20272:	1b1b      	subs	r3, r3, r4
   20274:	60ab      	str	r3, [r5, #8]
   20276:	682b      	ldr	r3, [r5, #0]
   20278:	191b      	adds	r3, r3, r4
   2027a:	602b      	str	r3, [r5, #0]
   2027c:	4634      	mov	r4, r6
   2027e:	e02f      	b.n	202e0 <__sfvwrite_r+0x1cc>
   20280:	6828      	ldr	r0, [r5, #0]
   20282:	692a      	ldr	r2, [r5, #16]
   20284:	42a6      	cmp	r6, r4
   20286:	bf94      	ite	ls
   20288:	2300      	movls	r3, #0
   2028a:	2301      	movhi	r3, #1
   2028c:	4290      	cmp	r0, r2
   2028e:	bf94      	ite	ls
   20290:	2300      	movls	r3, #0
   20292:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   20296:	b163      	cbz	r3, 202b2 <__sfvwrite_r+0x19e>
   20298:	9907      	ldr	r1, [sp, #28]
   2029a:	4622      	mov	r2, r4
   2029c:	f000 fb74 	bl	20988 <memmove>
   202a0:	682b      	ldr	r3, [r5, #0]
   202a2:	9801      	ldr	r0, [sp, #4]
   202a4:	191b      	adds	r3, r3, r4
   202a6:	602b      	str	r3, [r5, #0]
   202a8:	4629      	mov	r1, r5
   202aa:	f001 f849 	bl	21340 <_fflush_r>
   202ae:	b1b8      	cbz	r0, 202e0 <__sfvwrite_r+0x1cc>
   202b0:	e08d      	b.n	203ce <__sfvwrite_r+0x2ba>
   202b2:	696b      	ldr	r3, [r5, #20]
   202b4:	429e      	cmp	r6, r3
   202b6:	d308      	bcc.n	202ca <__sfvwrite_r+0x1b6>
   202b8:	6aac      	ldr	r4, [r5, #40]
   202ba:	6a29      	ldr	r1, [r5, #32]
   202bc:	9801      	ldr	r0, [sp, #4]
   202be:	9a07      	ldr	r2, [sp, #28]
   202c0:	47a0      	blx	r4
   202c2:	2800      	cmp	r0, #0
   202c4:	4604      	mov	r4, r0
   202c6:	dc0b      	bgt.n	202e0 <__sfvwrite_r+0x1cc>
   202c8:	e081      	b.n	203ce <__sfvwrite_r+0x2ba>
   202ca:	9907      	ldr	r1, [sp, #28]
   202cc:	4632      	mov	r2, r6
   202ce:	f000 fb5b 	bl	20988 <memmove>
   202d2:	68ab      	ldr	r3, [r5, #8]
   202d4:	4634      	mov	r4, r6
   202d6:	1b9b      	subs	r3, r3, r6
   202d8:	60ab      	str	r3, [r5, #8]
   202da:	682b      	ldr	r3, [r5, #0]
   202dc:	199b      	adds	r3, r3, r6
   202de:	602b      	str	r3, [r5, #0]
   202e0:	9800      	ldr	r0, [sp, #0]
   202e2:	6883      	ldr	r3, [r0, #8]
   202e4:	1b1b      	subs	r3, r3, r4
   202e6:	6083      	str	r3, [r0, #8]
   202e8:	2b00      	cmp	r3, #0
   202ea:	d077      	beq.n	203dc <__sfvwrite_r+0x2c8>
   202ec:	9a07      	ldr	r2, [sp, #28]
   202ee:	1b36      	subs	r6, r6, r4
   202f0:	1912      	adds	r2, r2, r4
   202f2:	9207      	str	r2, [sp, #28]
   202f4:	e766      	b.n	201c4 <__sfvwrite_r+0xb0>
   202f6:	9b02      	ldr	r3, [sp, #8]
   202f8:	2200      	movs	r2, #0
   202fa:	6858      	ldr	r0, [r3, #4]
   202fc:	681f      	ldr	r7, [r3, #0]
   202fe:	3308      	adds	r3, #8
   20300:	9006      	str	r0, [sp, #24]
   20302:	9302      	str	r3, [sp, #8]
   20304:	9203      	str	r2, [sp, #12]
   20306:	9b06      	ldr	r3, [sp, #24]
   20308:	2b00      	cmp	r3, #0
   2030a:	d0f4      	beq.n	202f6 <__sfvwrite_r+0x1e2>
   2030c:	9803      	ldr	r0, [sp, #12]
   2030e:	b980      	cbnz	r0, 20332 <__sfvwrite_r+0x21e>
   20310:	4638      	mov	r0, r7
   20312:	210a      	movs	r1, #10
   20314:	461a      	mov	r2, r3
   20316:	f000 fb0b 	bl	20930 <memchr>
   2031a:	b128      	cbz	r0, 20328 <__sfvwrite_r+0x214>
   2031c:	1c43      	adds	r3, r0, #1
   2031e:	1bdb      	subs	r3, r3, r7
   20320:	2201      	movs	r2, #1
   20322:	9304      	str	r3, [sp, #16]
   20324:	9203      	str	r2, [sp, #12]
   20326:	e004      	b.n	20332 <__sfvwrite_r+0x21e>
   20328:	9b06      	ldr	r3, [sp, #24]
   2032a:	2001      	movs	r0, #1
   2032c:	3301      	adds	r3, #1
   2032e:	9304      	str	r3, [sp, #16]
   20330:	9003      	str	r0, [sp, #12]
   20332:	9a06      	ldr	r2, [sp, #24]
   20334:	68ab      	ldr	r3, [r5, #8]
   20336:	9e04      	ldr	r6, [sp, #16]
   20338:	f8d5 c014 	ldr.w	ip, [r5, #20]
   2033c:	4296      	cmp	r6, r2
   2033e:	bf28      	it	cs
   20340:	4616      	movcs	r6, r2
   20342:	eb0c 0403 	add.w	r4, ip, r3
   20346:	6828      	ldr	r0, [r5, #0]
   20348:	692a      	ldr	r2, [r5, #16]
   2034a:	42a6      	cmp	r6, r4
   2034c:	bfd4      	ite	le
   2034e:	2300      	movle	r3, #0
   20350:	2301      	movgt	r3, #1
   20352:	4290      	cmp	r0, r2
   20354:	bf94      	ite	ls
   20356:	2300      	movls	r3, #0
   20358:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   2035c:	b163      	cbz	r3, 20378 <__sfvwrite_r+0x264>
   2035e:	4639      	mov	r1, r7
   20360:	4622      	mov	r2, r4
   20362:	f000 fb11 	bl	20988 <memmove>
   20366:	682b      	ldr	r3, [r5, #0]
   20368:	9801      	ldr	r0, [sp, #4]
   2036a:	191b      	adds	r3, r3, r4
   2036c:	602b      	str	r3, [r5, #0]
   2036e:	4629      	mov	r1, r5
   20370:	f000 ffe6 	bl	21340 <_fflush_r>
   20374:	b1b8      	cbz	r0, 203a6 <__sfvwrite_r+0x292>
   20376:	e02a      	b.n	203ce <__sfvwrite_r+0x2ba>
   20378:	4566      	cmp	r6, ip
   2037a:	db09      	blt.n	20390 <__sfvwrite_r+0x27c>
   2037c:	6aac      	ldr	r4, [r5, #40]
   2037e:	6a29      	ldr	r1, [r5, #32]
   20380:	9801      	ldr	r0, [sp, #4]
   20382:	463a      	mov	r2, r7
   20384:	4663      	mov	r3, ip
   20386:	47a0      	blx	r4
   20388:	2800      	cmp	r0, #0
   2038a:	4604      	mov	r4, r0
   2038c:	dc0b      	bgt.n	203a6 <__sfvwrite_r+0x292>
   2038e:	e01e      	b.n	203ce <__sfvwrite_r+0x2ba>
   20390:	4639      	mov	r1, r7
   20392:	4632      	mov	r2, r6
   20394:	f000 faf8 	bl	20988 <memmove>
   20398:	68ab      	ldr	r3, [r5, #8]
   2039a:	4634      	mov	r4, r6
   2039c:	1b9b      	subs	r3, r3, r6
   2039e:	60ab      	str	r3, [r5, #8]
   203a0:	682b      	ldr	r3, [r5, #0]
   203a2:	199b      	adds	r3, r3, r6
   203a4:	602b      	str	r3, [r5, #0]
   203a6:	9b04      	ldr	r3, [sp, #16]
   203a8:	1b1b      	subs	r3, r3, r4
   203aa:	9304      	str	r3, [sp, #16]
   203ac:	d105      	bne.n	203ba <__sfvwrite_r+0x2a6>
   203ae:	9801      	ldr	r0, [sp, #4]
   203b0:	4629      	mov	r1, r5
   203b2:	f000 ffc5 	bl	21340 <_fflush_r>
   203b6:	b950      	cbnz	r0, 203ce <__sfvwrite_r+0x2ba>
   203b8:	9003      	str	r0, [sp, #12]
   203ba:	9a00      	ldr	r2, [sp, #0]
   203bc:	6893      	ldr	r3, [r2, #8]
   203be:	1b1b      	subs	r3, r3, r4
   203c0:	6093      	str	r3, [r2, #8]
   203c2:	b15b      	cbz	r3, 203dc <__sfvwrite_r+0x2c8>
   203c4:	9b06      	ldr	r3, [sp, #24]
   203c6:	193f      	adds	r7, r7, r4
   203c8:	1b1b      	subs	r3, r3, r4
   203ca:	9306      	str	r3, [sp, #24]
   203cc:	e79b      	b.n	20306 <__sfvwrite_r+0x1f2>
   203ce:	89ab      	ldrh	r3, [r5, #12]
   203d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   203d4:	81ab      	strh	r3, [r5, #12]
   203d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   203da:	e000      	b.n	203de <__sfvwrite_r+0x2ca>
   203dc:	2000      	movs	r0, #0
   203de:	b009      	add	sp, #36
   203e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   203e2:	46c0      	nop			(mov r8, r8)

000203e4 <_fwrite_r>:
   203e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   203e6:	fb02 f603 	mul.w	r6, r2, r3
   203ea:	b089      	sub	sp, #36
   203ec:	461f      	mov	r7, r3
   203ee:	ab06      	add	r3, sp, #24
   203f0:	9303      	str	r3, [sp, #12]
   203f2:	2301      	movs	r3, #1
   203f4:	4605      	mov	r5, r0
   203f6:	9201      	str	r2, [sp, #4]
   203f8:	9c0e      	ldr	r4, [sp, #56]
   203fa:	9106      	str	r1, [sp, #24]
   203fc:	9607      	str	r6, [sp, #28]
   203fe:	9605      	str	r6, [sp, #20]
   20400:	9304      	str	r3, [sp, #16]
   20402:	b118      	cbz	r0, 2040c <_fwrite_r+0x28>
   20404:	6983      	ldr	r3, [r0, #24]
   20406:	b90b      	cbnz	r3, 2040c <_fwrite_r+0x28>
   20408:	f001 f90a 	bl	21620 <__sinit>
   2040c:	4b14      	ldr	r3, [pc, #80]	(20460 <_fwrite_r+0x7c>)
   2040e:	429c      	cmp	r4, r3
   20410:	bf08      	it	eq
   20412:	682c      	ldreq	r4, [r5, #0]
   20414:	d008      	beq.n	20428 <_fwrite_r+0x44>
   20416:	4b13      	ldr	r3, [pc, #76]	(20464 <_fwrite_r+0x80>)
   20418:	429c      	cmp	r4, r3
   2041a:	bf08      	it	eq
   2041c:	686c      	ldreq	r4, [r5, #4]
   2041e:	d003      	beq.n	20428 <_fwrite_r+0x44>
   20420:	4b11      	ldr	r3, [pc, #68]	(20468 <_fwrite_r+0x84>)
   20422:	429c      	cmp	r4, r3
   20424:	bf08      	it	eq
   20426:	68ac      	ldreq	r4, [r5, #8]
   20428:	89a3      	ldrh	r3, [r4, #12]
   2042a:	4628      	mov	r0, r5
   2042c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   20430:	bf02      	ittt	eq
   20432:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   20436:	81a3      	strheq	r3, [r4, #12]
   20438:	6e63      	ldreq	r3, [r4, #100]
   2043a:	4621      	mov	r1, r4
   2043c:	bf04      	itt	eq
   2043e:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   20442:	6663      	streq	r3, [r4, #100]
   20444:	aa03      	add	r2, sp, #12
   20446:	f7ff fe65 	bl	20114 <__sfvwrite_r>
   2044a:	b128      	cbz	r0, 20458 <_fwrite_r+0x74>
   2044c:	9b05      	ldr	r3, [sp, #20]
   2044e:	9a01      	ldr	r2, [sp, #4]
   20450:	ebc3 0306 	rsb	r3, r3, r6
   20454:	fbb3 f7f2 	udiv	r7, r3, r2
   20458:	4638      	mov	r0, r7
   2045a:	b009      	add	sp, #36
   2045c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2045e:	46c0      	nop			(mov r8, r8)
   20460:	000236b0 	.word	0x000236b0
   20464:	000236d0 	.word	0x000236d0
   20468:	000236f0 	.word	0x000236f0

0002046c <fwrite>:
   2046c:	b510      	push	{r4, lr}
   2046e:	4614      	mov	r4, r2
   20470:	4a06      	ldr	r2, [pc, #24]	(2048c <fwrite+0x20>)
   20472:	4684      	mov	ip, r0
   20474:	468e      	mov	lr, r1
   20476:	b082      	sub	sp, #8
   20478:	6810      	ldr	r0, [r2, #0]
   2047a:	4661      	mov	r1, ip
   2047c:	9300      	str	r3, [sp, #0]
   2047e:	4672      	mov	r2, lr
   20480:	4623      	mov	r3, r4
   20482:	f7ff ffaf 	bl	203e4 <_fwrite_r>
   20486:	b002      	add	sp, #8
   20488:	bd10      	pop	{r4, pc}
   2048a:	46c0      	nop			(mov r8, r8)
   2048c:	20000044 	.word	0x20000044

00020490 <free>:
   20490:	b500      	push	{lr}
   20492:	4b04      	ldr	r3, [pc, #16]	(204a4 <free+0x14>)
   20494:	4601      	mov	r1, r0
   20496:	b081      	sub	sp, #4
   20498:	6818      	ldr	r0, [r3, #0]
   2049a:	f001 f947 	bl	2172c <_free_r>
   2049e:	b001      	add	sp, #4
   204a0:	bd00      	pop	{pc}
   204a2:	46c0      	nop			(mov r8, r8)
   204a4:	20000044 	.word	0x20000044

000204a8 <malloc>:
   204a8:	b500      	push	{lr}
   204aa:	4b04      	ldr	r3, [pc, #16]	(204bc <malloc+0x14>)
   204ac:	4601      	mov	r1, r0
   204ae:	b081      	sub	sp, #4
   204b0:	6818      	ldr	r0, [r3, #0]
   204b2:	f000 f805 	bl	204c0 <_malloc_r>
   204b6:	b001      	add	sp, #4
   204b8:	bd00      	pop	{pc}
   204ba:	46c0      	nop			(mov r8, r8)
   204bc:	20000044 	.word	0x20000044

000204c0 <_malloc_r>:
   204c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   204c2:	f101 020b 	add.w	r2, r1, #11	; 0xb
   204c6:	2a16      	cmp	r2, #22
   204c8:	bf8c      	ite	hi
   204ca:	f022 0607 	bichi.w	r6, r2, #7	; 0x7
   204ce:	2610      	movls	r6, #16
   204d0:	428e      	cmp	r6, r1
   204d2:	bf2c      	ite	cs
   204d4:	2300      	movcs	r3, #0
   204d6:	2301      	movcc	r3, #1
   204d8:	b083      	sub	sp, #12
   204da:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
   204de:	9000      	str	r0, [sp, #0]
   204e0:	d003      	beq.n	204ea <_malloc_r+0x2a>
   204e2:	9900      	ldr	r1, [sp, #0]
   204e4:	230c      	movs	r3, #12
   204e6:	60cb      	str	r3, [r1, #12]
   204e8:	e1fe      	b.n	208e8 <_malloc_r+0x428>
   204ea:	9800      	ldr	r0, [sp, #0]
   204ec:	f000 fa74 	bl	209d8 <__malloc_lock>
   204f0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   204f4:	d218      	bcs.n	20528 <_malloc_r+0x68>
   204f6:	f8df 341c 	ldr.w	r3, [pc, #1052]	; 20914 <_malloc_r+0x454>
   204fa:	08f2      	lsrs	r2, r6, #3
   204fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20500:	68dc      	ldr	r4, [r3, #12]
   20502:	429c      	cmp	r4, r3
   20504:	d107      	bne.n	20516 <_malloc_r+0x56>
   20506:	f104 0308 	add.w	r3, r4, #8	; 0x8
   2050a:	68dc      	ldr	r4, [r3, #12]
   2050c:	429c      	cmp	r4, r3
   2050e:	bf08      	it	eq
   20510:	f102 0e02 	addeq.w	lr, r2, #2	; 0x2
   20514:	d04c      	beq.n	205b0 <_malloc_r+0xf0>
   20516:	6862      	ldr	r2, [r4, #4]
   20518:	68e1      	ldr	r1, [r4, #12]
   2051a:	68a3      	ldr	r3, [r4, #8]
   2051c:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   20520:	60d9      	str	r1, [r3, #12]
   20522:	608b      	str	r3, [r1, #8]
   20524:	4422      	add	r2, r4
   20526:	e03a      	b.n	2059e <_malloc_r+0xde>
   20528:	0a72      	lsrs	r2, r6, #9
   2052a:	d101      	bne.n	20530 <_malloc_r+0x70>
   2052c:	08f2      	lsrs	r2, r6, #3
   2052e:	e01f      	b.n	20570 <_malloc_r+0xb0>
   20530:	2a04      	cmp	r2, #4
   20532:	d803      	bhi.n	2053c <_malloc_r+0x7c>
   20534:	09b3      	lsrs	r3, r6, #6
   20536:	f103 0238 	add.w	r2, r3, #56	; 0x38
   2053a:	e019      	b.n	20570 <_malloc_r+0xb0>
   2053c:	2a14      	cmp	r2, #20
   2053e:	d801      	bhi.n	20544 <_malloc_r+0x84>
   20540:	325b      	adds	r2, #91
   20542:	e015      	b.n	20570 <_malloc_r+0xb0>
   20544:	2a54      	cmp	r2, #84
   20546:	d803      	bhi.n	20550 <_malloc_r+0x90>
   20548:	0b33      	lsrs	r3, r6, #12
   2054a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   2054e:	e00f      	b.n	20570 <_malloc_r+0xb0>
   20550:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   20554:	d803      	bhi.n	2055e <_malloc_r+0x9e>
   20556:	0bf3      	lsrs	r3, r6, #15
   20558:	f103 0277 	add.w	r2, r3, #119	; 0x77
   2055c:	e008      	b.n	20570 <_malloc_r+0xb0>
   2055e:	f240 5354 	movw	r3, #1364	; 0x554
   20562:	429a      	cmp	r2, r3
   20564:	d901      	bls.n	2056a <_malloc_r+0xaa>
   20566:	227e      	movs	r2, #126
   20568:	e002      	b.n	20570 <_malloc_r+0xb0>
   2056a:	0cb3      	lsrs	r3, r6, #18
   2056c:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   20570:	4be8      	ldr	r3, [pc, #928]	(20914 <_malloc_r+0x454>)
   20572:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   20576:	f8dc 400c 	ldr.w	r4, [ip, #12]
   2057a:	e015      	b.n	205a8 <_malloc_r+0xe8>
   2057c:	6863      	ldr	r3, [r4, #4]
   2057e:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   20582:	ebc6 0300 	rsb	r3, r6, r0
   20586:	2b0f      	cmp	r3, #15
   20588:	dd01      	ble.n	2058e <_malloc_r+0xce>
   2058a:	3a01      	subs	r2, #1
   2058c:	e00e      	b.n	205ac <_malloc_r+0xec>
   2058e:	2b00      	cmp	r3, #0
   20590:	68e1      	ldr	r1, [r4, #12]
   20592:	db08      	blt.n	205a6 <_malloc_r+0xe6>
   20594:	68a3      	ldr	r3, [r4, #8]
   20596:	60d9      	str	r1, [r3, #12]
   20598:	608b      	str	r3, [r1, #8]
   2059a:	eb04 0200 	add.w	r2, r4, r0
   2059e:	6853      	ldr	r3, [r2, #4]
   205a0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   205a4:	e1ad      	b.n	20902 <_malloc_r+0x442>
   205a6:	460c      	mov	r4, r1
   205a8:	4564      	cmp	r4, ip
   205aa:	d1e7      	bne.n	2057c <_malloc_r+0xbc>
   205ac:	f102 0e01 	add.w	lr, r2, #1	; 0x1
   205b0:	4dd9      	ldr	r5, [pc, #868]	(20918 <_malloc_r+0x458>)
   205b2:	68ac      	ldr	r4, [r5, #8]
   205b4:	42ac      	cmp	r4, r5
   205b6:	d068      	beq.n	2068a <_malloc_r+0x1ca>
   205b8:	6863      	ldr	r3, [r4, #4]
   205ba:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   205be:	ebc6 0100 	rsb	r1, r6, r0
   205c2:	290f      	cmp	r1, #15
   205c4:	dd0d      	ble.n	205e2 <_malloc_r+0x122>
   205c6:	f046 0201 	orr.w	r2, r6, #1	; 0x1
   205ca:	eb04 0306 	add.w	r3, r4, r6
   205ce:	6062      	str	r2, [r4, #4]
   205d0:	f041 0201 	orr.w	r2, r1, #1	; 0x1
   205d4:	60eb      	str	r3, [r5, #12]
   205d6:	60ab      	str	r3, [r5, #8]
   205d8:	60dd      	str	r5, [r3, #12]
   205da:	609d      	str	r5, [r3, #8]
   205dc:	605a      	str	r2, [r3, #4]
   205de:	5059      	str	r1, [r3, r1]
   205e0:	e190      	b.n	20904 <_malloc_r+0x444>
   205e2:	2900      	cmp	r1, #0
   205e4:	60ed      	str	r5, [r5, #12]
   205e6:	60ad      	str	r5, [r5, #8]
   205e8:	dad7      	bge.n	2059a <_malloc_r+0xda>
   205ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   205ee:	d210      	bcs.n	20612 <_malloc_r+0x152>
   205f0:	08c0      	lsrs	r0, r0, #3
   205f2:	1083      	asrs	r3, r0, #2
   205f4:	2201      	movs	r2, #1
   205f6:	409a      	lsls	r2, r3
   205f8:	f1a5 0108 	sub.w	r1, r5, #8	; 0x8
   205fc:	684b      	ldr	r3, [r1, #4]
   205fe:	4313      	orrs	r3, r2
   20600:	604b      	str	r3, [r1, #4]
   20602:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   20606:	688b      	ldr	r3, [r1, #8]
   20608:	60e1      	str	r1, [r4, #12]
   2060a:	60a3      	str	r3, [r4, #8]
   2060c:	60dc      	str	r4, [r3, #12]
   2060e:	608c      	str	r4, [r1, #8]
   20610:	e03b      	b.n	2068a <_malloc_r+0x1ca>
   20612:	0a42      	lsrs	r2, r0, #9
   20614:	2a04      	cmp	r2, #4
   20616:	d802      	bhi.n	2061e <_malloc_r+0x15e>
   20618:	0983      	lsrs	r3, r0, #6
   2061a:	3338      	adds	r3, #56
   2061c:	e017      	b.n	2064e <_malloc_r+0x18e>
   2061e:	2a14      	cmp	r2, #20
   20620:	bf98      	it	ls
   20622:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   20626:	d912      	bls.n	2064e <_malloc_r+0x18e>
   20628:	2a54      	cmp	r2, #84
   2062a:	d802      	bhi.n	20632 <_malloc_r+0x172>
   2062c:	0b03      	lsrs	r3, r0, #12
   2062e:	336e      	adds	r3, #110
   20630:	e00d      	b.n	2064e <_malloc_r+0x18e>
   20632:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   20636:	d802      	bhi.n	2063e <_malloc_r+0x17e>
   20638:	0bc3      	lsrs	r3, r0, #15
   2063a:	3377      	adds	r3, #119
   2063c:	e007      	b.n	2064e <_malloc_r+0x18e>
   2063e:	f240 5354 	movw	r3, #1364	; 0x554
   20642:	429a      	cmp	r2, r3
   20644:	d901      	bls.n	2064a <_malloc_r+0x18a>
   20646:	237e      	movs	r3, #126
   20648:	e001      	b.n	2064e <_malloc_r+0x18e>
   2064a:	0c83      	lsrs	r3, r0, #18
   2064c:	337c      	adds	r3, #124
   2064e:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 20914 <_malloc_r+0x454>
   20652:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   20656:	6891      	ldr	r1, [r2, #8]
   20658:	4291      	cmp	r1, r2
   2065a:	d10c      	bne.n	20676 <_malloc_r+0x1b6>
   2065c:	109b      	asrs	r3, r3, #2
   2065e:	2201      	movs	r2, #1
   20660:	409a      	lsls	r2, r3
   20662:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20666:	4313      	orrs	r3, r2
   20668:	f8cc 3004 	str.w	r3, [ip, #4]
   2066c:	460b      	mov	r3, r1
   2066e:	e008      	b.n	20682 <_malloc_r+0x1c2>
   20670:	6889      	ldr	r1, [r1, #8]
   20672:	4291      	cmp	r1, r2
   20674:	d004      	beq.n	20680 <_malloc_r+0x1c0>
   20676:	684b      	ldr	r3, [r1, #4]
   20678:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   2067c:	4298      	cmp	r0, r3
   2067e:	d3f7      	bcc.n	20670 <_malloc_r+0x1b0>
   20680:	68cb      	ldr	r3, [r1, #12]
   20682:	60e3      	str	r3, [r4, #12]
   20684:	60a1      	str	r1, [r4, #8]
   20686:	60cc      	str	r4, [r1, #12]
   20688:	609c      	str	r4, [r3, #8]
   2068a:	2301      	movs	r3, #1
   2068c:	ea4f 02ae 	mov.w	r2, lr, asr #2
   20690:	fa13 f102 	lsls.w	r1, r3, r2
   20694:	4b9f      	ldr	r3, [pc, #636]	(20914 <_malloc_r+0x454>)
   20696:	685a      	ldr	r2, [r3, #4]
   20698:	4291      	cmp	r1, r2
   2069a:	d86e      	bhi.n	2077a <_malloc_r+0x2ba>
   2069c:	4211      	tst	r1, r2
   2069e:	bf04      	itt	eq
   206a0:	f02e 0303 	biceq.w	r3, lr, #3	; 0x3
   206a4:	f103 0e04 	addeq.w	lr, r3, #4	; 0x4
   206a8:	d002      	beq.n	206b0 <_malloc_r+0x1f0>
   206aa:	e004      	b.n	206b6 <_malloc_r+0x1f6>
   206ac:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   206b0:	0049      	lsls	r1, r1, #1
   206b2:	4211      	tst	r1, r2
   206b4:	d0fa      	beq.n	206ac <_malloc_r+0x1ec>
   206b6:	4a97      	ldr	r2, [pc, #604]	(20914 <_malloc_r+0x454>)
   206b8:	4674      	mov	r4, lr
   206ba:	eb02 07ce 	add.w	r7, r2, lr, lsl #3
   206be:	463a      	mov	r2, r7
   206c0:	68d0      	ldr	r0, [r2, #12]
   206c2:	e032      	b.n	2072a <_malloc_r+0x26a>
   206c4:	6843      	ldr	r3, [r0, #4]
   206c6:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   206ca:	ebc6 0c03 	rsb	ip, r6, r3
   206ce:	f1bc 0f0f 	cmp.w	ip, #15	; 0xf
   206d2:	dd14      	ble.n	206fe <_malloc_r+0x23e>
   206d4:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   206d8:	4604      	mov	r4, r0
   206da:	68c1      	ldr	r1, [r0, #12]
   206dc:	6043      	str	r3, [r0, #4]
   206de:	f854 3f08 	ldr.w	r3, [r4, #8]!
   206e2:	eb00 0206 	add.w	r2, r0, r6
   206e6:	60d9      	str	r1, [r3, #12]
   206e8:	608b      	str	r3, [r1, #8]
   206ea:	f04c 0301 	orr.w	r3, ip, #1	; 0x1
   206ee:	60ea      	str	r2, [r5, #12]
   206f0:	60aa      	str	r2, [r5, #8]
   206f2:	60d5      	str	r5, [r2, #12]
   206f4:	6095      	str	r5, [r2, #8]
   206f6:	6053      	str	r3, [r2, #4]
   206f8:	f842 c00c 	str.w	ip, [r2, ip]
   206fc:	e010      	b.n	20720 <_malloc_r+0x260>
   206fe:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   20702:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   20706:	db0f      	blt.n	20728 <_malloc_r+0x268>
   20708:	4403      	add	r3, r0
   2070a:	685a      	ldr	r2, [r3, #4]
   2070c:	4604      	mov	r4, r0
   2070e:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   20712:	605a      	str	r2, [r3, #4]
   20714:	f854 3f08 	ldr.w	r3, [r4, #8]!
   20718:	f8c3 c00c 	str.w	ip, [r3, #12]
   2071c:	f8cc 3008 	str.w	r3, [ip, #8]
   20720:	9800      	ldr	r0, [sp, #0]
   20722:	f000 f95b 	bl	209dc <__malloc_unlock>
   20726:	e0f1      	b.n	2090c <_malloc_r+0x44c>
   20728:	4660      	mov	r0, ip
   2072a:	4290      	cmp	r0, r2
   2072c:	d1ca      	bne.n	206c4 <_malloc_r+0x204>
   2072e:	3401      	adds	r4, #1
   20730:	f014 0f03 	tst.w	r4, #3	; 0x3
   20734:	d001      	beq.n	2073a <_malloc_r+0x27a>
   20736:	3208      	adds	r2, #8
   20738:	e7c2      	b.n	206c0 <_malloc_r+0x200>
   2073a:	4672      	mov	r2, lr
   2073c:	4638      	mov	r0, r7
   2073e:	f012 0f03 	tst.w	r2, #3	; 0x3
   20742:	d105      	bne.n	20750 <_malloc_r+0x290>
   20744:	4a73      	ldr	r2, [pc, #460]	(20914 <_malloc_r+0x454>)
   20746:	6853      	ldr	r3, [r2, #4]
   20748:	ea23 0301 	bic.w	r3, r3, r1
   2074c:	6053      	str	r3, [r2, #4]
   2074e:	e006      	b.n	2075e <_malloc_r+0x29e>
   20750:	4603      	mov	r3, r0
   20752:	f853 0908 	ldr.w	r0, [r3], #-8
   20756:	4298      	cmp	r0, r3
   20758:	d101      	bne.n	2075e <_malloc_r+0x29e>
   2075a:	3a01      	subs	r2, #1
   2075c:	e7ef      	b.n	2073e <_malloc_r+0x27e>
   2075e:	4a6d      	ldr	r2, [pc, #436]	(20914 <_malloc_r+0x454>)
   20760:	0049      	lsls	r1, r1, #1
   20762:	6853      	ldr	r3, [r2, #4]
   20764:	4299      	cmp	r1, r3
   20766:	d808      	bhi.n	2077a <_malloc_r+0x2ba>
   20768:	b139      	cbz	r1, 2077a <_malloc_r+0x2ba>
   2076a:	46a6      	mov	lr, r4
   2076c:	e002      	b.n	20774 <_malloc_r+0x2b4>
   2076e:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   20772:	0049      	lsls	r1, r1, #1
   20774:	4219      	tst	r1, r3
   20776:	d19e      	bne.n	206b6 <_malloc_r+0x1f6>
   20778:	e7f9      	b.n	2076e <_malloc_r+0x2ae>
   2077a:	4b66      	ldr	r3, [pc, #408]	(20914 <_malloc_r+0x454>)
   2077c:	689f      	ldr	r7, [r3, #8]
   2077e:	687b      	ldr	r3, [r7, #4]
   20780:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20784:	9301      	str	r3, [sp, #4]
   20786:	ebc6 0103 	rsb	r1, r6, r3
   2078a:	9a01      	ldr	r2, [sp, #4]
   2078c:	290f      	cmp	r1, #15
   2078e:	bfcc      	ite	gt
   20790:	2300      	movgt	r3, #0
   20792:	2301      	movle	r3, #1
   20794:	42b2      	cmp	r2, r6
   20796:	bf38      	it	cc
   20798:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   2079c:	2b00      	cmp	r3, #0
   2079e:	f000 80a5 	beq.w	208ec <_malloc_r+0x42c>
   207a2:	4b5e      	ldr	r3, [pc, #376]	(2091c <_malloc_r+0x45c>)
   207a4:	681b      	ldr	r3, [r3, #0]
   207a6:	3310      	adds	r3, #16
   207a8:	eb03 0506 	add.w	r5, r3, r6
   207ac:	4b5c      	ldr	r3, [pc, #368]	(20920 <_malloc_r+0x460>)
   207ae:	681b      	ldr	r3, [r3, #0]
   207b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   207b4:	d006      	beq.n	207c4 <_malloc_r+0x304>
   207b6:	f505 637e 	add.w	r3, r5, #4064	; 0xfe0
   207ba:	331f      	adds	r3, #31
   207bc:	f423 657e 	bic.w	r5, r3, #4064	; 0xfe0
   207c0:	f025 051f 	bic.w	r5, r5, #31	; 0x1f
   207c4:	9800      	ldr	r0, [sp, #0]
   207c6:	4629      	mov	r1, r5
   207c8:	f000 fb92 	bl	20ef0 <_sbrk_r>
   207cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   207d0:	4604      	mov	r4, r0
   207d2:	d076      	beq.n	208c2 <_malloc_r+0x402>
   207d4:	9b01      	ldr	r3, [sp, #4]
   207d6:	eb07 0103 	add.w	r1, r7, r3
   207da:	4288      	cmp	r0, r1
   207dc:	d202      	bcs.n	207e4 <_malloc_r+0x324>
   207de:	4a4d      	ldr	r2, [pc, #308]	(20914 <_malloc_r+0x454>)
   207e0:	4297      	cmp	r7, r2
   207e2:	d16e      	bne.n	208c2 <_malloc_r+0x402>
   207e4:	4a4f      	ldr	r2, [pc, #316]	(20924 <_malloc_r+0x464>)
   207e6:	428c      	cmp	r4, r1
   207e8:	6813      	ldr	r3, [r2, #0]
   207ea:	eb05 0003 	add.w	r0, r5, r3
   207ee:	6010      	str	r0, [r2, #0]
   207f0:	d10b      	bne.n	2080a <_malloc_r+0x34a>
   207f2:	0523      	lsls	r3, r4, #20
   207f4:	0d1b      	lsrs	r3, r3, #20
   207f6:	b943      	cbnz	r3, 2080a <_malloc_r+0x34a>
   207f8:	4b46      	ldr	r3, [pc, #280]	(20914 <_malloc_r+0x454>)
   207fa:	9901      	ldr	r1, [sp, #4]
   207fc:	689a      	ldr	r2, [r3, #8]
   207fe:	eb05 0301 	add.w	r3, r5, r1
   20802:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20806:	6053      	str	r3, [r2, #4]
   20808:	e04f      	b.n	208aa <_malloc_r+0x3ea>
   2080a:	4a45      	ldr	r2, [pc, #276]	(20920 <_malloc_r+0x460>)
   2080c:	6813      	ldr	r3, [r2, #0]
   2080e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20812:	bf08      	it	eq
   20814:	6014      	streq	r4, [r2, #0]
   20816:	d004      	beq.n	20822 <_malloc_r+0x362>
   20818:	eb04 0300 	add.w	r3, r4, r0
   2081c:	4a41      	ldr	r2, [pc, #260]	(20924 <_malloc_r+0x464>)
   2081e:	1a5b      	subs	r3, r3, r1
   20820:	6013      	str	r3, [r2, #0]
   20822:	f014 0207 	ands.w	r2, r4, #7	; 0x7
   20826:	d101      	bne.n	2082c <_malloc_r+0x36c>
   20828:	2200      	movs	r2, #0
   2082a:	e002      	b.n	20832 <_malloc_r+0x372>
   2082c:	f1c2 0208 	rsb	r2, r2, #8	; 0x8
   20830:	18a4      	adds	r4, r4, r2
   20832:	eb04 0305 	add.w	r3, r4, r5
   20836:	051b      	lsls	r3, r3, #20
   20838:	0d1b      	lsrs	r3, r3, #20
   2083a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   2083e:	ebc3 0502 	rsb	r5, r3, r2
   20842:	4629      	mov	r1, r5
   20844:	9800      	ldr	r0, [sp, #0]
   20846:	f000 fb53 	bl	20ef0 <_sbrk_r>
   2084a:	4b36      	ldr	r3, [pc, #216]	(20924 <_malloc_r+0x464>)
   2084c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20850:	681a      	ldr	r2, [r3, #0]
   20852:	bf04      	itt	eq
   20854:	4620      	moveq	r0, r4
   20856:	2500      	moveq	r5, #0
   20858:	442a      	add	r2, r5
   2085a:	601a      	str	r2, [r3, #0]
   2085c:	4a2d      	ldr	r2, [pc, #180]	(20914 <_malloc_r+0x454>)
   2085e:	ebc4 0300 	rsb	r3, r4, r0
   20862:	195b      	adds	r3, r3, r5
   20864:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20868:	4297      	cmp	r7, r2
   2086a:	6094      	str	r4, [r2, #8]
   2086c:	6063      	str	r3, [r4, #4]
   2086e:	d01c      	beq.n	208aa <_malloc_r+0x3ea>
   20870:	9b01      	ldr	r3, [sp, #4]
   20872:	2b0f      	cmp	r3, #15
   20874:	d802      	bhi.n	2087c <_malloc_r+0x3bc>
   20876:	2301      	movs	r3, #1
   20878:	6063      	str	r3, [r4, #4]
   2087a:	e022      	b.n	208c2 <_malloc_r+0x402>
   2087c:	9901      	ldr	r1, [sp, #4]
   2087e:	2305      	movs	r3, #5
   20880:	f1a1 020c 	sub.w	r2, r1, #12	; 0xc
   20884:	f022 0207 	bic.w	r2, r2, #7	; 0x7
   20888:	eb07 0102 	add.w	r1, r7, r2
   2088c:	604b      	str	r3, [r1, #4]
   2088e:	608b      	str	r3, [r1, #8]
   20890:	687b      	ldr	r3, [r7, #4]
   20892:	2a0f      	cmp	r2, #15
   20894:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20898:	ea42 0303 	orr.w	r3, r2, r3
   2089c:	607b      	str	r3, [r7, #4]
   2089e:	d904      	bls.n	208aa <_malloc_r+0x3ea>
   208a0:	f107 0108 	add.w	r1, r7, #8	; 0x8
   208a4:	9800      	ldr	r0, [sp, #0]
   208a6:	f000 ff41 	bl	2172c <_free_r>
   208aa:	491f      	ldr	r1, [pc, #124]	(20928 <_malloc_r+0x468>)
   208ac:	4b1d      	ldr	r3, [pc, #116]	(20924 <_malloc_r+0x464>)
   208ae:	681a      	ldr	r2, [r3, #0]
   208b0:	680b      	ldr	r3, [r1, #0]
   208b2:	429a      	cmp	r2, r3
   208b4:	bf88      	it	hi
   208b6:	600a      	strhi	r2, [r1, #0]
   208b8:	491c      	ldr	r1, [pc, #112]	(2092c <_malloc_r+0x46c>)
   208ba:	680b      	ldr	r3, [r1, #0]
   208bc:	429a      	cmp	r2, r3
   208be:	bf88      	it	hi
   208c0:	600a      	strhi	r2, [r1, #0]
   208c2:	4a14      	ldr	r2, [pc, #80]	(20914 <_malloc_r+0x454>)
   208c4:	6893      	ldr	r3, [r2, #8]
   208c6:	685a      	ldr	r2, [r3, #4]
   208c8:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   208cc:	ebc6 0102 	rsb	r1, r6, r2
   208d0:	290f      	cmp	r1, #15
   208d2:	bfcc      	ite	gt
   208d4:	2300      	movgt	r3, #0
   208d6:	2301      	movle	r3, #1
   208d8:	42b2      	cmp	r2, r6
   208da:	bf38      	it	cc
   208dc:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   208e0:	b123      	cbz	r3, 208ec <_malloc_r+0x42c>
   208e2:	9800      	ldr	r0, [sp, #0]
   208e4:	f000 f87a 	bl	209dc <__malloc_unlock>
   208e8:	2400      	movs	r4, #0
   208ea:	e00f      	b.n	2090c <_malloc_r+0x44c>
   208ec:	4b09      	ldr	r3, [pc, #36]	(20914 <_malloc_r+0x454>)
   208ee:	689c      	ldr	r4, [r3, #8]
   208f0:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   208f4:	6063      	str	r3, [r4, #4]
   208f6:	4b07      	ldr	r3, [pc, #28]	(20914 <_malloc_r+0x454>)
   208f8:	eb04 0206 	add.w	r2, r4, r6
   208fc:	609a      	str	r2, [r3, #8]
   208fe:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   20902:	6053      	str	r3, [r2, #4]
   20904:	9800      	ldr	r0, [sp, #0]
   20906:	f000 f869 	bl	209dc <__malloc_unlock>
   2090a:	3408      	adds	r4, #8
   2090c:	4620      	mov	r0, r4
   2090e:	b003      	add	sp, #12
   20910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20912:	46c0      	nop			(mov r8, r8)
   20914:	20000138 	.word	0x20000138
   20918:	20000140 	.word	0x20000140
   2091c:	20000e9c 	.word	0x20000e9c
   20920:	20000544 	.word	0x20000544
   20924:	20000ea8 	.word	0x20000ea8
   20928:	20000ea0 	.word	0x20000ea0
   2092c:	20000ea4 	.word	0x20000ea4

00020930 <memchr>:
   20930:	b2c9      	uxtb	r1, r1
   20932:	e004      	b.n	2093e <memchr+0xe>
   20934:	7803      	ldrb	r3, [r0, #0]
   20936:	3a01      	subs	r2, #1
   20938:	428b      	cmp	r3, r1
   2093a:	d003      	beq.n	20944 <memchr+0x14>
   2093c:	3001      	adds	r0, #1
   2093e:	2a00      	cmp	r2, #0
   20940:	d1f8      	bne.n	20934 <memchr+0x4>
   20942:	2000      	movs	r0, #0
   20944:	4770      	bx	lr
   20946:	46c0      	nop			(mov r8, r8)

00020948 <memcmp>:
   20948:	b510      	push	{r4, lr}
   2094a:	2300      	movs	r3, #0
   2094c:	4604      	mov	r4, r0
   2094e:	e009      	b.n	20964 <memcmp+0x1c>
   20950:	f814 c003 	ldrb.w	ip, [r4, r3]
   20954:	5cc8      	ldrb	r0, [r1, r3]
   20956:	3a01      	subs	r2, #1
   20958:	3301      	adds	r3, #1
   2095a:	4584      	cmp	ip, r0
   2095c:	d002      	beq.n	20964 <memcmp+0x1c>
   2095e:	ebc0 000c 	rsb	r0, r0, ip
   20962:	e002      	b.n	2096a <memcmp+0x22>
   20964:	2a00      	cmp	r2, #0
   20966:	d1f3      	bne.n	20950 <memcmp+0x8>
   20968:	2000      	movs	r0, #0
   2096a:	bd10      	pop	{r4, pc}

0002096c <memcpy>:
   2096c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   20970:	e006      	b.n	20980 <memcpy+0x14>
   20972:	f811 300c 	ldrb.w	r3, [r1, ip]
   20976:	3a01      	subs	r2, #1
   20978:	f800 300c 	strb.w	r3, [r0, ip]
   2097c:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   20980:	2a00      	cmp	r2, #0
   20982:	d1f6      	bne.n	20972 <memcpy+0x6>
   20984:	4770      	bx	lr
   20986:	46c0      	nop			(mov r8, r8)

00020988 <memmove>:
   20988:	4281      	cmp	r1, r0
   2098a:	b510      	push	{r4, lr}
   2098c:	d217      	bcs.n	209be <memmove+0x36>
   2098e:	eb01 0c02 	add.w	ip, r1, r2
   20992:	4560      	cmp	r0, ip
   20994:	d213      	bcs.n	209be <memmove+0x36>
   20996:	eb00 0402 	add.w	r4, r0, r2
   2099a:	2100      	movs	r1, #0
   2099c:	e003      	b.n	209a6 <memmove+0x1e>
   2099e:	f81c 3001 	ldrb.w	r3, [ip, r1]
   209a2:	3a01      	subs	r2, #1
   209a4:	5463      	strb	r3, [r4, r1]
   209a6:	3901      	subs	r1, #1
   209a8:	2a00      	cmp	r2, #0
   209aa:	d1f8      	bne.n	2099e <memmove+0x16>
   209ac:	e00b      	b.n	209c6 <memmove+0x3e>
   209ae:	f811 300c 	ldrb.w	r3, [r1, ip]
   209b2:	3a01      	subs	r2, #1
   209b4:	f800 300c 	strb.w	r3, [r0, ip]
   209b8:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   209bc:	e001      	b.n	209c2 <memmove+0x3a>
   209be:	f04f 0c00 	mov.w	ip, #0	; 0x0
   209c2:	2a00      	cmp	r2, #0
   209c4:	d1f3      	bne.n	209ae <memmove+0x26>
   209c6:	bd10      	pop	{r4, pc}

000209c8 <memset>:
   209c8:	2300      	movs	r3, #0
   209ca:	e002      	b.n	209d2 <memset+0xa>
   209cc:	54c1      	strb	r1, [r0, r3]
   209ce:	3a01      	subs	r2, #1
   209d0:	3301      	adds	r3, #1
   209d2:	2a00      	cmp	r2, #0
   209d4:	d1fa      	bne.n	209cc <memset+0x4>
   209d6:	4770      	bx	lr

000209d8 <__malloc_lock>:
   209d8:	4770      	bx	lr
   209da:	46c0      	nop			(mov r8, r8)

000209dc <__malloc_unlock>:
   209dc:	4770      	bx	lr
   209de:	46c0      	nop			(mov r8, r8)

000209e0 <_putc_r>:
   209e0:	b570      	push	{r4, r5, r6, lr}
   209e2:	4605      	mov	r5, r0
   209e4:	460e      	mov	r6, r1
   209e6:	4614      	mov	r4, r2
   209e8:	b118      	cbz	r0, 209f2 <_putc_r+0x12>
   209ea:	6983      	ldr	r3, [r0, #24]
   209ec:	b90b      	cbnz	r3, 209f2 <_putc_r+0x12>
   209ee:	f000 fe17 	bl	21620 <__sinit>
   209f2:	4b17      	ldr	r3, [pc, #92]	(20a50 <_putc_r+0x70>)
   209f4:	429c      	cmp	r4, r3
   209f6:	bf08      	it	eq
   209f8:	682c      	ldreq	r4, [r5, #0]
   209fa:	d008      	beq.n	20a0e <_putc_r+0x2e>
   209fc:	4b15      	ldr	r3, [pc, #84]	(20a54 <_putc_r+0x74>)
   209fe:	429c      	cmp	r4, r3
   20a00:	bf08      	it	eq
   20a02:	686c      	ldreq	r4, [r5, #4]
   20a04:	d003      	beq.n	20a0e <_putc_r+0x2e>
   20a06:	4b14      	ldr	r3, [pc, #80]	(20a58 <_putc_r+0x78>)
   20a08:	429c      	cmp	r4, r3
   20a0a:	bf08      	it	eq
   20a0c:	68ac      	ldreq	r4, [r5, #8]
   20a0e:	68a3      	ldr	r3, [r4, #8]
   20a10:	1e5a      	subs	r2, r3, #1
   20a12:	2a00      	cmp	r2, #0
   20a14:	60a2      	str	r2, [r4, #8]
   20a16:	da13      	bge.n	20a40 <_putc_r+0x60>
   20a18:	69a3      	ldr	r3, [r4, #24]
   20a1a:	429a      	cmp	r2, r3
   20a1c:	db0a      	blt.n	20a34 <_putc_r+0x54>
   20a1e:	6823      	ldr	r3, [r4, #0]
   20a20:	701e      	strb	r6, [r3, #0]
   20a22:	6823      	ldr	r3, [r4, #0]
   20a24:	7818      	ldrb	r0, [r3, #0]
   20a26:	280a      	cmp	r0, #10
   20a28:	d001      	beq.n	20a2e <_putc_r+0x4e>
   20a2a:	3301      	adds	r3, #1
   20a2c:	e00d      	b.n	20a4a <_putc_r+0x6a>
   20a2e:	4628      	mov	r0, r5
   20a30:	210a      	movs	r1, #10
   20a32:	e001      	b.n	20a38 <_putc_r+0x58>
   20a34:	4628      	mov	r0, r5
   20a36:	4631      	mov	r1, r6
   20a38:	4622      	mov	r2, r4
   20a3a:	f000 fb85 	bl	21148 <__swbuf_r>
   20a3e:	e005      	b.n	20a4c <_putc_r+0x6c>
   20a40:	6823      	ldr	r3, [r4, #0]
   20a42:	701e      	strb	r6, [r3, #0]
   20a44:	6823      	ldr	r3, [r4, #0]
   20a46:	f813 0b01 	ldrb.w	r0, [r3], #1
   20a4a:	6023      	str	r3, [r4, #0]
   20a4c:	bd70      	pop	{r4, r5, r6, pc}
   20a4e:	46c0      	nop			(mov r8, r8)
   20a50:	000236b0 	.word	0x000236b0
   20a54:	000236d0 	.word	0x000236d0
   20a58:	000236f0 	.word	0x000236f0

00020a5c <putc>:
   20a5c:	b500      	push	{lr}
   20a5e:	4b05      	ldr	r3, [pc, #20]	(20a74 <putc+0x18>)
   20a60:	4684      	mov	ip, r0
   20a62:	460a      	mov	r2, r1
   20a64:	b081      	sub	sp, #4
   20a66:	6818      	ldr	r0, [r3, #0]
   20a68:	4661      	mov	r1, ip
   20a6a:	f7ff ffb9 	bl	209e0 <_putc_r>
   20a6e:	b001      	add	sp, #4
   20a70:	bd00      	pop	{pc}
   20a72:	46c0      	nop			(mov r8, r8)
   20a74:	20000044 	.word	0x20000044

00020a78 <realloc>:
   20a78:	b500      	push	{lr}
   20a7a:	4b05      	ldr	r3, [pc, #20]	(20a90 <realloc+0x18>)
   20a7c:	4684      	mov	ip, r0
   20a7e:	460a      	mov	r2, r1
   20a80:	b081      	sub	sp, #4
   20a82:	6818      	ldr	r0, [r3, #0]
   20a84:	4661      	mov	r1, ip
   20a86:	f000 f805 	bl	20a94 <_realloc_r>
   20a8a:	b001      	add	sp, #4
   20a8c:	bd00      	pop	{pc}
   20a8e:	46c0      	nop			(mov r8, r8)
   20a90:	20000044 	.word	0x20000044

00020a94 <_realloc_r>:
   20a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a96:	b087      	sub	sp, #28
   20a98:	9002      	str	r0, [sp, #8]
   20a9a:	460e      	mov	r6, r1
   20a9c:	9201      	str	r2, [sp, #4]
   20a9e:	b921      	cbnz	r1, 20aaa <_realloc_r+0x16>
   20aa0:	4611      	mov	r1, r2
   20aa2:	f7ff fd0d 	bl	204c0 <_malloc_r>
   20aa6:	4605      	mov	r5, r0
   20aa8:	e19d      	b.n	20de6 <_realloc_r+0x352>
   20aaa:	9802      	ldr	r0, [sp, #8]
   20aac:	f7ff ff94 	bl	209d8 <__malloc_lock>
   20ab0:	9801      	ldr	r0, [sp, #4]
   20ab2:	f1a6 0708 	sub.w	r7, r6, #8	; 0x8
   20ab6:	f100 030b 	add.w	r3, r0, #11	; 0xb
   20aba:	2b16      	cmp	r3, #22
   20abc:	bf88      	it	hi
   20abe:	f023 0307 	bichi.w	r3, r3, #7	; 0x7
   20ac2:	687c      	ldr	r4, [r7, #4]
   20ac4:	bf88      	it	hi
   20ac6:	9303      	strhi	r3, [sp, #12]
   20ac8:	d801      	bhi.n	20ace <_realloc_r+0x3a>
   20aca:	2110      	movs	r1, #16
   20acc:	9103      	str	r1, [sp, #12]
   20ace:	9a03      	ldr	r2, [sp, #12]
   20ad0:	9d01      	ldr	r5, [sp, #4]
   20ad2:	42aa      	cmp	r2, r5
   20ad4:	bf2c      	ite	cs
   20ad6:	2300      	movcs	r3, #0
   20ad8:	2301      	movcc	r3, #1
   20ada:	ea53 72d2 	orrs.w	r2, r3, r2, lsr #31
   20ade:	d004      	beq.n	20aea <_realloc_r+0x56>
   20ae0:	9802      	ldr	r0, [sp, #8]
   20ae2:	230c      	movs	r3, #12
   20ae4:	60c3      	str	r3, [r0, #12]
   20ae6:	2500      	movs	r5, #0
   20ae8:	e17d      	b.n	20de6 <_realloc_r+0x352>
   20aea:	9903      	ldr	r1, [sp, #12]
   20aec:	f024 0c03 	bic.w	ip, r4, #3	; 0x3
   20af0:	458c      	cmp	ip, r1
   20af2:	bfa4      	itt	ge
   20af4:	463c      	movge	r4, r7
   20af6:	4665      	movge	r5, ip
   20af8:	f280 814b 	bge.w	20d92 <_realloc_r+0x2fe>
   20afc:	4abb      	ldr	r2, [pc, #748]	(20dec <_realloc_r+0x358>)
   20afe:	eb07 010c 	add.w	r1, r7, ip
   20b02:	f8d2 e008 	ldr.w	lr, [r2, #8]
   20b06:	4571      	cmp	r1, lr
   20b08:	d007      	beq.n	20b1a <_realloc_r+0x86>
   20b0a:	684b      	ldr	r3, [r1, #4]
   20b0c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   20b10:	440b      	add	r3, r1
   20b12:	685b      	ldr	r3, [r3, #4]
   20b14:	f013 0f01 	tst.w	r3, #1	; 0x1
   20b18:	d128      	bne.n	20b6c <_realloc_r+0xd8>
   20b1a:	684b      	ldr	r3, [r1, #4]
   20b1c:	4571      	cmp	r1, lr
   20b1e:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   20b22:	eb00 020c 	add.w	r2, r0, ip
   20b26:	d118      	bne.n	20b5a <_realloc_r+0xc6>
   20b28:	9d03      	ldr	r5, [sp, #12]
   20b2a:	f105 0310 	add.w	r3, r5, #16	; 0x10
   20b2e:	429a      	cmp	r2, r3
   20b30:	db1e      	blt.n	20b70 <_realloc_r+0xdc>
   20b32:	1b52      	subs	r2, r2, r5
   20b34:	eb07 0305 	add.w	r3, r7, r5
   20b38:	48ac      	ldr	r0, [pc, #688]	(20dec <_realloc_r+0x358>)
   20b3a:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   20b3e:	605a      	str	r2, [r3, #4]
   20b40:	6083      	str	r3, [r0, #8]
   20b42:	687b      	ldr	r3, [r7, #4]
   20b44:	9802      	ldr	r0, [sp, #8]
   20b46:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20b4a:	ea45 0303 	orr.w	r3, r5, r3
   20b4e:	607b      	str	r3, [r7, #4]
   20b50:	f7ff ff44 	bl	209dc <__malloc_unlock>
   20b54:	f107 0508 	add.w	r5, r7, #8	; 0x8
   20b58:	e145      	b.n	20de6 <_realloc_r+0x352>
   20b5a:	4615      	mov	r5, r2
   20b5c:	9a03      	ldr	r2, [sp, #12]
   20b5e:	4295      	cmp	r5, r2
   20b60:	db06      	blt.n	20b70 <_realloc_r+0xdc>
   20b62:	68ca      	ldr	r2, [r1, #12]
   20b64:	688b      	ldr	r3, [r1, #8]
   20b66:	60da      	str	r2, [r3, #12]
   20b68:	6093      	str	r3, [r2, #8]
   20b6a:	e0cc      	b.n	20d06 <_realloc_r+0x272>
   20b6c:	2100      	movs	r1, #0
   20b6e:	2000      	movs	r0, #0
   20b70:	f014 0f01 	tst.w	r4, #1	; 0x1
   20b74:	f040 80af 	bne.w	20cd6 <_realloc_r+0x242>
   20b78:	f856 3c08 	ldr.w	r3, [r6, #-8]
   20b7c:	ebc3 0407 	rsb	r4, r3, r7
   20b80:	6863      	ldr	r3, [r4, #4]
   20b82:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20b86:	9304      	str	r3, [sp, #16]
   20b88:	2900      	cmp	r1, #0
   20b8a:	d05f      	beq.n	20c4c <_realloc_r+0x1b8>
   20b8c:	4571      	cmp	r1, lr
   20b8e:	eb03 020c 	add.w	r2, r3, ip
   20b92:	d151      	bne.n	20c38 <_realloc_r+0x1a4>
   20b94:	9d03      	ldr	r5, [sp, #12]
   20b96:	1812      	adds	r2, r2, r0
   20b98:	f105 0310 	add.w	r3, r5, #16	; 0x10
   20b9c:	429a      	cmp	r2, r3
   20b9e:	9205      	str	r2, [sp, #20]
   20ba0:	db54      	blt.n	20c4c <_realloc_r+0x1b8>
   20ba2:	4625      	mov	r5, r4
   20ba4:	68e2      	ldr	r2, [r4, #12]
   20ba6:	f855 3f08 	ldr.w	r3, [r5, #8]!
   20baa:	60da      	str	r2, [r3, #12]
   20bac:	6093      	str	r3, [r2, #8]
   20bae:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   20bb2:	2a24      	cmp	r2, #36
   20bb4:	d82a      	bhi.n	20c0c <_realloc_r+0x178>
   20bb6:	2a13      	cmp	r2, #19
   20bb8:	4630      	mov	r0, r6
   20bba:	46ac      	mov	ip, r5
   20bbc:	d91a      	bls.n	20bf4 <_realloc_r+0x160>
   20bbe:	6833      	ldr	r3, [r6, #0]
   20bc0:	1d31      	adds	r1, r6, #4
   20bc2:	60a3      	str	r3, [r4, #8]
   20bc4:	6873      	ldr	r3, [r6, #4]
   20bc6:	1d08      	adds	r0, r1, #4
   20bc8:	2a1b      	cmp	r2, #27
   20bca:	60e3      	str	r3, [r4, #12]
   20bcc:	f104 0c10 	add.w	ip, r4, #16	; 0x10
   20bd0:	d910      	bls.n	20bf4 <_realloc_r+0x160>
   20bd2:	684b      	ldr	r3, [r1, #4]
   20bd4:	1d01      	adds	r1, r0, #4
   20bd6:	6123      	str	r3, [r4, #16]
   20bd8:	6843      	ldr	r3, [r0, #4]
   20bda:	1d08      	adds	r0, r1, #4
   20bdc:	2a24      	cmp	r2, #36
   20bde:	6163      	str	r3, [r4, #20]
   20be0:	f104 0c18 	add.w	ip, r4, #24	; 0x18
   20be4:	d106      	bne.n	20bf4 <_realloc_r+0x160>
   20be6:	684b      	ldr	r3, [r1, #4]
   20be8:	f104 0c20 	add.w	ip, r4, #32	; 0x20
   20bec:	61a3      	str	r3, [r4, #24]
   20bee:	6843      	ldr	r3, [r0, #4]
   20bf0:	3008      	adds	r0, #8
   20bf2:	61e3      	str	r3, [r4, #28]
   20bf4:	4601      	mov	r1, r0
   20bf6:	f851 3b04 	ldr.w	r3, [r1], #4
   20bfa:	4662      	mov	r2, ip
   20bfc:	f842 3b04 	str.w	r3, [r2], #4
   20c00:	6843      	ldr	r3, [r0, #4]
   20c02:	f8cc 3004 	str.w	r3, [ip, #4]
   20c06:	684b      	ldr	r3, [r1, #4]
   20c08:	6053      	str	r3, [r2, #4]
   20c0a:	e003      	b.n	20c14 <_realloc_r+0x180>
   20c0c:	4628      	mov	r0, r5
   20c0e:	4631      	mov	r1, r6
   20c10:	f7ff feba 	bl	20988 <memmove>
   20c14:	9803      	ldr	r0, [sp, #12]
   20c16:	4975      	ldr	r1, [pc, #468]	(20dec <_realloc_r+0x358>)
   20c18:	eb04 0300 	add.w	r3, r4, r0
   20c1c:	608b      	str	r3, [r1, #8]
   20c1e:	9905      	ldr	r1, [sp, #20]
   20c20:	ebc0 0201 	rsb	r2, r0, r1
   20c24:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   20c28:	605a      	str	r2, [r3, #4]
   20c2a:	6863      	ldr	r3, [r4, #4]
   20c2c:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20c30:	ea40 0303 	orr.w	r3, r0, r3
   20c34:	6063      	str	r3, [r4, #4]
   20c36:	e0a8      	b.n	20d8a <_realloc_r+0x2f6>
   20c38:	eb02 0500 	add.w	r5, r2, r0
   20c3c:	9a03      	ldr	r2, [sp, #12]
   20c3e:	4295      	cmp	r5, r2
   20c40:	db04      	blt.n	20c4c <_realloc_r+0x1b8>
   20c42:	68ca      	ldr	r2, [r1, #12]
   20c44:	688b      	ldr	r3, [r1, #8]
   20c46:	60da      	str	r2, [r3, #12]
   20c48:	6093      	str	r3, [r2, #8]
   20c4a:	e005      	b.n	20c58 <_realloc_r+0x1c4>
   20c4c:	9b04      	ldr	r3, [sp, #16]
   20c4e:	9803      	ldr	r0, [sp, #12]
   20c50:	eb03 050c 	add.w	r5, r3, ip
   20c54:	4285      	cmp	r5, r0
   20c56:	db3e      	blt.n	20cd6 <_realloc_r+0x242>
   20c58:	4620      	mov	r0, r4
   20c5a:	68e2      	ldr	r2, [r4, #12]
   20c5c:	f850 3f08 	ldr.w	r3, [r0, #8]!
   20c60:	60da      	str	r2, [r3, #12]
   20c62:	6093      	str	r3, [r2, #8]
   20c64:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   20c68:	2a24      	cmp	r2, #36
   20c6a:	d830      	bhi.n	20cce <_realloc_r+0x23a>
   20c6c:	2a13      	cmp	r2, #19
   20c6e:	46b4      	mov	ip, r6
   20c70:	d921      	bls.n	20cb6 <_realloc_r+0x222>
   20c72:	6833      	ldr	r3, [r6, #0]
   20c74:	f106 0104 	add.w	r1, r6, #4	; 0x4
   20c78:	60a3      	str	r3, [r4, #8]
   20c7a:	6873      	ldr	r3, [r6, #4]
   20c7c:	2a1b      	cmp	r2, #27
   20c7e:	60e3      	str	r3, [r4, #12]
   20c80:	f104 0010 	add.w	r0, r4, #16	; 0x10
   20c84:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   20c88:	d915      	bls.n	20cb6 <_realloc_r+0x222>
   20c8a:	684b      	ldr	r3, [r1, #4]
   20c8c:	2a24      	cmp	r2, #36
   20c8e:	6123      	str	r3, [r4, #16]
   20c90:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20c94:	f10c 0104 	add.w	r1, ip, #4	; 0x4
   20c98:	6163      	str	r3, [r4, #20]
   20c9a:	f104 0018 	add.w	r0, r4, #24	; 0x18
   20c9e:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   20ca2:	d108      	bne.n	20cb6 <_realloc_r+0x222>
   20ca4:	684b      	ldr	r3, [r1, #4]
   20ca6:	f104 0020 	add.w	r0, r4, #32	; 0x20
   20caa:	61a3      	str	r3, [r4, #24]
   20cac:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20cb0:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   20cb4:	61e3      	str	r3, [r4, #28]
   20cb6:	4661      	mov	r1, ip
   20cb8:	f851 3b04 	ldr.w	r3, [r1], #4
   20cbc:	4602      	mov	r2, r0
   20cbe:	f842 3b04 	str.w	r3, [r2], #4
   20cc2:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20cc6:	6043      	str	r3, [r0, #4]
   20cc8:	684b      	ldr	r3, [r1, #4]
   20cca:	6053      	str	r3, [r2, #4]
   20ccc:	e061      	b.n	20d92 <_realloc_r+0x2fe>
   20cce:	4631      	mov	r1, r6
   20cd0:	f7ff fe5a 	bl	20988 <memmove>
   20cd4:	e05d      	b.n	20d92 <_realloc_r+0x2fe>
   20cd6:	9802      	ldr	r0, [sp, #8]
   20cd8:	9901      	ldr	r1, [sp, #4]
   20cda:	f8cd c000 	str.w	ip, [sp]
   20cde:	f7ff fbef 	bl	204c0 <_malloc_r>
   20ce2:	f8dd c000 	ldr.w	ip, [sp]
   20ce6:	4605      	mov	r5, r0
   20ce8:	2800      	cmp	r0, #0
   20cea:	d04e      	beq.n	20d8a <_realloc_r+0x2f6>
   20cec:	687b      	ldr	r3, [r7, #4]
   20cee:	f1a0 0208 	sub.w	r2, r0, #8	; 0x8
   20cf2:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   20cf6:	443b      	add	r3, r7
   20cf8:	429a      	cmp	r2, r3
   20cfa:	d106      	bne.n	20d0a <_realloc_r+0x276>
   20cfc:	6853      	ldr	r3, [r2, #4]
   20cfe:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20d02:	eb03 050c 	add.w	r5, r3, ip
   20d06:	463c      	mov	r4, r7
   20d08:	e043      	b.n	20d92 <_realloc_r+0x2fe>
   20d0a:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   20d0e:	2a24      	cmp	r2, #36
   20d10:	d834      	bhi.n	20d7c <_realloc_r+0x2e8>
   20d12:	2a13      	cmp	r2, #19
   20d14:	4630      	mov	r0, r6
   20d16:	46ac      	mov	ip, r5
   20d18:	d924      	bls.n	20d64 <_realloc_r+0x2d0>
   20d1a:	46b6      	mov	lr, r6
   20d1c:	f85e 3b04 	ldr.w	r3, [lr], #4
   20d20:	4629      	mov	r1, r5
   20d22:	f841 3b04 	str.w	r3, [r1], #4
   20d26:	6873      	ldr	r3, [r6, #4]
   20d28:	2a1b      	cmp	r2, #27
   20d2a:	606b      	str	r3, [r5, #4]
   20d2c:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   20d30:	f10e 0004 	add.w	r0, lr, #4	; 0x4
   20d34:	d916      	bls.n	20d64 <_realloc_r+0x2d0>
   20d36:	f8de 3004 	ldr.w	r3, [lr, #4]
   20d3a:	f10c 0e04 	add.w	lr, ip, #4	; 0x4
   20d3e:	604b      	str	r3, [r1, #4]
   20d40:	6843      	ldr	r3, [r0, #4]
   20d42:	1d01      	adds	r1, r0, #4
   20d44:	1d08      	adds	r0, r1, #4
   20d46:	2a24      	cmp	r2, #36
   20d48:	f8cc 3004 	str.w	r3, [ip, #4]
   20d4c:	f10e 0c04 	add.w	ip, lr, #4	; 0x4
   20d50:	d108      	bne.n	20d64 <_realloc_r+0x2d0>
   20d52:	684b      	ldr	r3, [r1, #4]
   20d54:	f8ce 3004 	str.w	r3, [lr, #4]
   20d58:	6843      	ldr	r3, [r0, #4]
   20d5a:	3008      	adds	r0, #8
   20d5c:	f8cc 3004 	str.w	r3, [ip, #4]
   20d60:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   20d64:	4601      	mov	r1, r0
   20d66:	f851 3b04 	ldr.w	r3, [r1], #4
   20d6a:	4662      	mov	r2, ip
   20d6c:	f842 3b04 	str.w	r3, [r2], #4
   20d70:	6843      	ldr	r3, [r0, #4]
   20d72:	f8cc 3004 	str.w	r3, [ip, #4]
   20d76:	684b      	ldr	r3, [r1, #4]
   20d78:	6053      	str	r3, [r2, #4]
   20d7a:	e002      	b.n	20d82 <_realloc_r+0x2ee>
   20d7c:	4631      	mov	r1, r6
   20d7e:	f7ff fe03 	bl	20988 <memmove>
   20d82:	9802      	ldr	r0, [sp, #8]
   20d84:	4631      	mov	r1, r6
   20d86:	f000 fcd1 	bl	2172c <_free_r>
   20d8a:	9802      	ldr	r0, [sp, #8]
   20d8c:	f7ff fe26 	bl	209dc <__malloc_unlock>
   20d90:	e029      	b.n	20de6 <_realloc_r+0x352>
   20d92:	9903      	ldr	r1, [sp, #12]
   20d94:	6863      	ldr	r3, [r4, #4]
   20d96:	ebc1 0205 	rsb	r2, r1, r5
   20d9a:	2a0f      	cmp	r2, #15
   20d9c:	d913      	bls.n	20dc6 <_realloc_r+0x332>
   20d9e:	9d03      	ldr	r5, [sp, #12]
   20da0:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20da4:	ea45 0303 	orr.w	r3, r5, r3
   20da8:	6063      	str	r3, [r4, #4]
   20daa:	4421      	add	r1, r4
   20dac:	f042 0301 	orr.w	r3, r2, #1	; 0x1
   20db0:	604b      	str	r3, [r1, #4]
   20db2:	440a      	add	r2, r1
   20db4:	6853      	ldr	r3, [r2, #4]
   20db6:	3108      	adds	r1, #8
   20db8:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20dbc:	6053      	str	r3, [r2, #4]
   20dbe:	9802      	ldr	r0, [sp, #8]
   20dc0:	f000 fcb4 	bl	2172c <_free_r>
   20dc4:	e00a      	b.n	20ddc <_realloc_r+0x348>
   20dc6:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20dca:	ea45 0303 	orr.w	r3, r5, r3
   20dce:	6063      	str	r3, [r4, #4]
   20dd0:	eb04 0205 	add.w	r2, r4, r5
   20dd4:	6853      	ldr	r3, [r2, #4]
   20dd6:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20dda:	6053      	str	r3, [r2, #4]
   20ddc:	9802      	ldr	r0, [sp, #8]
   20dde:	f7ff fdfd 	bl	209dc <__malloc_unlock>
   20de2:	f104 0508 	add.w	r5, r4, #8	; 0x8
   20de6:	4628      	mov	r0, r5
   20de8:	b007      	add	sp, #28
   20dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20dec:	20000138 	.word	0x20000138

00020df0 <_wrapup_reent>:
   20df0:	b570      	push	{r4, r5, r6, lr}
   20df2:	4606      	mov	r6, r0
   20df4:	b908      	cbnz	r0, 20dfa <_wrapup_reent+0xa>
   20df6:	4b0a      	ldr	r3, [pc, #40]	(20e20 <_wrapup_reent+0x30>)
   20df8:	681e      	ldr	r6, [r3, #0]
   20dfa:	f106 0248 	add.w	r2, r6, #72	; 0x48
   20dfe:	6855      	ldr	r5, [r2, #4]
   20e00:	1c6b      	adds	r3, r5, #1
   20e02:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   20e06:	e001      	b.n	20e0c <_wrapup_reent+0x1c>
   20e08:	6863      	ldr	r3, [r4, #4]
   20e0a:	4798      	blx	r3
   20e0c:	3c04      	subs	r4, #4
   20e0e:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   20e12:	d5f9      	bpl.n	20e08 <_wrapup_reent+0x18>
   20e14:	6ab3      	ldr	r3, [r6, #40]
   20e16:	b10b      	cbz	r3, 20e1c <_wrapup_reent+0x2c>
   20e18:	4630      	mov	r0, r6
   20e1a:	4798      	blx	r3
   20e1c:	bd70      	pop	{r4, r5, r6, pc}
   20e1e:	46c0      	nop			(mov r8, r8)
   20e20:	20000044 	.word	0x20000044

00020e24 <cleanup_glue>:
   20e24:	b530      	push	{r4, r5, lr}
   20e26:	460d      	mov	r5, r1
   20e28:	6809      	ldr	r1, [r1, #0]
   20e2a:	b081      	sub	sp, #4
   20e2c:	4604      	mov	r4, r0
   20e2e:	b109      	cbz	r1, 20e34 <cleanup_glue+0x10>
   20e30:	f7ff fff8 	bl	20e24 <cleanup_glue>
   20e34:	4620      	mov	r0, r4
   20e36:	4629      	mov	r1, r5
   20e38:	f000 fc78 	bl	2172c <_free_r>
   20e3c:	b001      	add	sp, #4
   20e3e:	bd30      	pop	{r4, r5, pc}

00020e40 <_reclaim_reent>:
   20e40:	4b2a      	ldr	r3, [pc, #168]	(20eec <_reclaim_reent+0xac>)
   20e42:	b570      	push	{r4, r5, r6, lr}
   20e44:	681b      	ldr	r3, [r3, #0]
   20e46:	4605      	mov	r5, r0
   20e48:	4298      	cmp	r0, r3
   20e4a:	d04d      	beq.n	20ee8 <_reclaim_reent+0xa8>
   20e4c:	6a43      	ldr	r3, [r0, #36]
   20e4e:	b1ab      	cbz	r3, 20e7c <_reclaim_reent+0x3c>
   20e50:	68db      	ldr	r3, [r3, #12]
   20e52:	b19b      	cbz	r3, 20e7c <_reclaim_reent+0x3c>
   20e54:	2600      	movs	r6, #0
   20e56:	6a6b      	ldr	r3, [r5, #36]
   20e58:	68db      	ldr	r3, [r3, #12]
   20e5a:	5999      	ldr	r1, [r3, r6]
   20e5c:	e004      	b.n	20e68 <_reclaim_reent+0x28>
   20e5e:	680c      	ldr	r4, [r1, #0]
   20e60:	4628      	mov	r0, r5
   20e62:	f000 fc63 	bl	2172c <_free_r>
   20e66:	4621      	mov	r1, r4
   20e68:	2900      	cmp	r1, #0
   20e6a:	d1f8      	bne.n	20e5e <_reclaim_reent+0x1e>
   20e6c:	3604      	adds	r6, #4
   20e6e:	2e3c      	cmp	r6, #60
   20e70:	d1f1      	bne.n	20e56 <_reclaim_reent+0x16>
   20e72:	6a6b      	ldr	r3, [r5, #36]
   20e74:	4628      	mov	r0, r5
   20e76:	68d9      	ldr	r1, [r3, #12]
   20e78:	f000 fc58 	bl	2172c <_free_r>
   20e7c:	6a6b      	ldr	r3, [r5, #36]
   20e7e:	6819      	ldr	r1, [r3, #0]
   20e80:	b111      	cbz	r1, 20e88 <_reclaim_reent+0x48>
   20e82:	4628      	mov	r0, r5
   20e84:	f000 fc52 	bl	2172c <_free_r>
   20e88:	6969      	ldr	r1, [r5, #20]
   20e8a:	b111      	cbz	r1, 20e92 <_reclaim_reent+0x52>
   20e8c:	4628      	mov	r0, r5
   20e8e:	f000 fc4d 	bl	2172c <_free_r>
   20e92:	6a69      	ldr	r1, [r5, #36]
   20e94:	b111      	cbz	r1, 20e9c <_reclaim_reent+0x5c>
   20e96:	4628      	mov	r0, r5
   20e98:	f000 fc48 	bl	2172c <_free_r>
   20e9c:	6ba9      	ldr	r1, [r5, #56]
   20e9e:	b111      	cbz	r1, 20ea6 <_reclaim_reent+0x66>
   20ea0:	4628      	mov	r0, r5
   20ea2:	f000 fc43 	bl	2172c <_free_r>
   20ea6:	6be9      	ldr	r1, [r5, #60]
   20ea8:	b111      	cbz	r1, 20eb0 <_reclaim_reent+0x70>
   20eaa:	4628      	mov	r0, r5
   20eac:	f000 fc3e 	bl	2172c <_free_r>
   20eb0:	6c29      	ldr	r1, [r5, #64]
   20eb2:	b111      	cbz	r1, 20eba <_reclaim_reent+0x7a>
   20eb4:	4628      	mov	r0, r5
   20eb6:	f000 fc39 	bl	2172c <_free_r>
   20eba:	6cab      	ldr	r3, [r5, #72]
   20ebc:	f8d3 1088 	ldr.w	r1, [r3, #136]
   20ec0:	b111      	cbz	r1, 20ec8 <_reclaim_reent+0x88>
   20ec2:	4628      	mov	r0, r5
   20ec4:	f000 fc32 	bl	2172c <_free_r>
   20ec8:	6b69      	ldr	r1, [r5, #52]
   20eca:	b111      	cbz	r1, 20ed2 <_reclaim_reent+0x92>
   20ecc:	4628      	mov	r0, r5
   20ece:	f000 fc2d 	bl	2172c <_free_r>
   20ed2:	69ab      	ldr	r3, [r5, #24]
   20ed4:	b143      	cbz	r3, 20ee8 <_reclaim_reent+0xa8>
   20ed6:	6aab      	ldr	r3, [r5, #40]
   20ed8:	4628      	mov	r0, r5
   20eda:	4798      	blx	r3
   20edc:	f8d5 10d8 	ldr.w	r1, [r5, #216]
   20ee0:	b111      	cbz	r1, 20ee8 <_reclaim_reent+0xa8>
   20ee2:	4628      	mov	r0, r5
   20ee4:	f7ff ff9e 	bl	20e24 <cleanup_glue>
   20ee8:	bd70      	pop	{r4, r5, r6, pc}
   20eea:	46c0      	nop			(mov r8, r8)
   20eec:	20000044 	.word	0x20000044

00020ef0 <_sbrk_r>:
   20ef0:	b530      	push	{r4, r5, lr}
   20ef2:	4c08      	ldr	r4, [pc, #32]	(20f14 <_sbrk_r+0x24>)
   20ef4:	2300      	movs	r3, #0
   20ef6:	b081      	sub	sp, #4
   20ef8:	4605      	mov	r5, r0
   20efa:	4608      	mov	r0, r1
   20efc:	6023      	str	r3, [r4, #0]
   20efe:	f7f6 fb57 	bl	175b0 <_sbrk>
   20f02:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20f06:	d102      	bne.n	20f0e <_sbrk_r+0x1e>
   20f08:	6823      	ldr	r3, [r4, #0]
   20f0a:	b103      	cbz	r3, 20f0e <_sbrk_r+0x1e>
   20f0c:	60eb      	str	r3, [r5, #12]
   20f0e:	b001      	add	sp, #4
   20f10:	bd30      	pop	{r4, r5, pc}
   20f12:	46c0      	nop			(mov r8, r8)
   20f14:	20000680 	.word	0x20000680

00020f18 <_raise_r>:
   20f18:	b530      	push	{r4, r5, lr}
   20f1a:	291f      	cmp	r1, #31
   20f1c:	b081      	sub	sp, #4
   20f1e:	4604      	mov	r4, r0
   20f20:	460d      	mov	r5, r1
   20f22:	d904      	bls.n	20f2e <_raise_r+0x16>
   20f24:	2316      	movs	r3, #22
   20f26:	60c3      	str	r3, [r0, #12]
   20f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20f2c:	e01c      	b.n	20f68 <_raise_r+0x50>
   20f2e:	6c41      	ldr	r1, [r0, #68]
   20f30:	b111      	cbz	r1, 20f38 <_raise_r+0x20>
   20f32:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
   20f36:	b942      	cbnz	r2, 20f4a <_raise_r+0x32>
   20f38:	4620      	mov	r0, r4
   20f3a:	f000 f899 	bl	21070 <_getpid_r>
   20f3e:	462a      	mov	r2, r5
   20f40:	4601      	mov	r1, r0
   20f42:	4620      	mov	r0, r4
   20f44:	f000 f89a 	bl	2107c <_kill_r>
   20f48:	e00e      	b.n	20f68 <_raise_r+0x50>
   20f4a:	2a01      	cmp	r2, #1
   20f4c:	d00b      	beq.n	20f66 <_raise_r+0x4e>
   20f4e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20f52:	d103      	bne.n	20f5c <_raise_r+0x44>
   20f54:	2316      	movs	r3, #22
   20f56:	60c3      	str	r3, [r0, #12]
   20f58:	2001      	movs	r0, #1
   20f5a:	e005      	b.n	20f68 <_raise_r+0x50>
   20f5c:	2300      	movs	r3, #0
   20f5e:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
   20f62:	4628      	mov	r0, r5
   20f64:	4790      	blx	r2
   20f66:	2000      	movs	r0, #0
   20f68:	b001      	add	sp, #4
   20f6a:	bd30      	pop	{r4, r5, pc}

00020f6c <raise>:
   20f6c:	b500      	push	{lr}
   20f6e:	4b04      	ldr	r3, [pc, #16]	(20f80 <raise+0x14>)
   20f70:	4601      	mov	r1, r0
   20f72:	b081      	sub	sp, #4
   20f74:	6818      	ldr	r0, [r3, #0]
   20f76:	f7ff ffcf 	bl	20f18 <_raise_r>
   20f7a:	b001      	add	sp, #4
   20f7c:	bd00      	pop	{pc}
   20f7e:	46c0      	nop			(mov r8, r8)
   20f80:	20000044 	.word	0x20000044

00020f84 <_init_signal_r>:
   20f84:	6c43      	ldr	r3, [r0, #68]
   20f86:	b510      	push	{r4, lr}
   20f88:	4604      	mov	r4, r0
   20f8a:	b963      	cbnz	r3, 20fa6 <_init_signal_r+0x22>
   20f8c:	2180      	movs	r1, #128
   20f8e:	f7ff fa97 	bl	204c0 <_malloc_r>
   20f92:	6460      	str	r0, [r4, #68]
   20f94:	b908      	cbnz	r0, 20f9a <_init_signal_r+0x16>
   20f96:	3801      	subs	r0, #1
   20f98:	e006      	b.n	20fa8 <_init_signal_r+0x24>
   20f9a:	2300      	movs	r3, #0
   20f9c:	2200      	movs	r2, #0
   20f9e:	50c2      	str	r2, [r0, r3]
   20fa0:	3304      	adds	r3, #4
   20fa2:	2b80      	cmp	r3, #128
   20fa4:	d1fb      	bne.n	20f9e <_init_signal_r+0x1a>
   20fa6:	2000      	movs	r0, #0
   20fa8:	bd10      	pop	{r4, pc}
   20faa:	46c0      	nop			(mov r8, r8)

00020fac <_init_signal>:
   20fac:	b500      	push	{lr}
   20fae:	4b03      	ldr	r3, [pc, #12]	(20fbc <_init_signal+0x10>)
   20fb0:	b081      	sub	sp, #4
   20fb2:	6818      	ldr	r0, [r3, #0]
   20fb4:	f7ff ffe6 	bl	20f84 <_init_signal_r>
   20fb8:	b001      	add	sp, #4
   20fba:	bd00      	pop	{pc}
   20fbc:	20000044 	.word	0x20000044

00020fc0 <__sigtramp_r>:
   20fc0:	b530      	push	{r4, r5, lr}
   20fc2:	291f      	cmp	r1, #31
   20fc4:	b081      	sub	sp, #4
   20fc6:	4604      	mov	r4, r0
   20fc8:	460d      	mov	r5, r1
   20fca:	d81a      	bhi.n	21002 <__sigtramp_r+0x42>
   20fcc:	6c43      	ldr	r3, [r0, #68]
   20fce:	b913      	cbnz	r3, 20fd6 <__sigtramp_r+0x16>
   20fd0:	f7ff ffd8 	bl	20f84 <_init_signal_r>
   20fd4:	b9a8      	cbnz	r0, 21002 <__sigtramp_r+0x42>
   20fd6:	6c60      	ldr	r0, [r4, #68]
   20fd8:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   20fdc:	b90a      	cbnz	r2, 20fe2 <__sigtramp_r+0x22>
   20fde:	2001      	movs	r0, #1
   20fe0:	e011      	b.n	21006 <__sigtramp_r+0x46>
   20fe2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20fe6:	d101      	bne.n	20fec <__sigtramp_r+0x2c>
   20fe8:	2002      	movs	r0, #2
   20fea:	e00c      	b.n	21006 <__sigtramp_r+0x46>
   20fec:	2a01      	cmp	r2, #1
   20fee:	d101      	bne.n	20ff4 <__sigtramp_r+0x34>
   20ff0:	2003      	movs	r0, #3
   20ff2:	e008      	b.n	21006 <__sigtramp_r+0x46>
   20ff4:	2300      	movs	r3, #0
   20ff6:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   20ffa:	4628      	mov	r0, r5
   20ffc:	4790      	blx	r2
   20ffe:	2000      	movs	r0, #0
   21000:	e001      	b.n	21006 <__sigtramp_r+0x46>
   21002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21006:	b001      	add	sp, #4
   21008:	bd30      	pop	{r4, r5, pc}
   2100a:	46c0      	nop			(mov r8, r8)

0002100c <__sigtramp>:
   2100c:	b500      	push	{lr}
   2100e:	4b04      	ldr	r3, [pc, #16]	(21020 <__sigtramp+0x14>)
   21010:	4601      	mov	r1, r0
   21012:	b081      	sub	sp, #4
   21014:	6818      	ldr	r0, [r3, #0]
   21016:	f7ff ffd3 	bl	20fc0 <__sigtramp_r>
   2101a:	b001      	add	sp, #4
   2101c:	bd00      	pop	{pc}
   2101e:	46c0      	nop			(mov r8, r8)
   21020:	20000044 	.word	0x20000044

00021024 <_signal_r>:
   21024:	291f      	cmp	r1, #31
   21026:	b570      	push	{r4, r5, r6, lr}
   21028:	4604      	mov	r4, r0
   2102a:	460d      	mov	r5, r1
   2102c:	4616      	mov	r6, r2
   2102e:	d902      	bls.n	21036 <_signal_r+0x12>
   21030:	2316      	movs	r3, #22
   21032:	60c3      	str	r3, [r0, #12]
   21034:	e004      	b.n	21040 <_signal_r+0x1c>
   21036:	6c43      	ldr	r3, [r0, #68]
   21038:	b92b      	cbnz	r3, 21046 <_signal_r+0x22>
   2103a:	f7ff ffa3 	bl	20f84 <_init_signal_r>
   2103e:	b110      	cbz	r0, 21046 <_signal_r+0x22>
   21040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21044:	e004      	b.n	21050 <_signal_r+0x2c>
   21046:	6c63      	ldr	r3, [r4, #68]
   21048:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2104c:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
   21050:	bd70      	pop	{r4, r5, r6, pc}
   21052:	46c0      	nop			(mov r8, r8)

00021054 <signal>:
   21054:	b500      	push	{lr}
   21056:	4b05      	ldr	r3, [pc, #20]	(2106c <signal+0x18>)
   21058:	4684      	mov	ip, r0
   2105a:	460a      	mov	r2, r1
   2105c:	b081      	sub	sp, #4
   2105e:	6818      	ldr	r0, [r3, #0]
   21060:	4661      	mov	r1, ip
   21062:	f7ff ffdf 	bl	21024 <_signal_r>
   21066:	b001      	add	sp, #4
   21068:	bd00      	pop	{pc}
   2106a:	46c0      	nop			(mov r8, r8)
   2106c:	20000044 	.word	0x20000044

00021070 <_getpid_r>:
   21070:	b500      	push	{lr}
   21072:	b081      	sub	sp, #4
   21074:	f7f6 fa36 	bl	174e4 <_getpid>
   21078:	b001      	add	sp, #4
   2107a:	bd00      	pop	{pc}

0002107c <_kill_r>:
   2107c:	b530      	push	{r4, r5, lr}
   2107e:	4c08      	ldr	r4, [pc, #32]	(210a0 <_kill_r+0x24>)
   21080:	2300      	movs	r3, #0
   21082:	b081      	sub	sp, #4
   21084:	4605      	mov	r5, r0
   21086:	4608      	mov	r0, r1
   21088:	4611      	mov	r1, r2
   2108a:	6023      	str	r3, [r4, #0]
   2108c:	f7f6 fa3e 	bl	1750c <_kill>
   21090:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21094:	d102      	bne.n	2109c <_kill_r+0x20>
   21096:	6823      	ldr	r3, [r4, #0]
   21098:	b103      	cbz	r3, 2109c <_kill_r+0x20>
   2109a:	60eb      	str	r3, [r5, #12]
   2109c:	b001      	add	sp, #4
   2109e:	bd30      	pop	{r4, r5, pc}
   210a0:	20000680 	.word	0x20000680

000210a4 <strcmp>:
   210a4:	b530      	push	{r4, r5, lr}
   210a6:	468c      	mov	ip, r1
   210a8:	2200      	movs	r2, #0
   210aa:	5c81      	ldrb	r1, [r0, r2]
   210ac:	eb00 0402 	add.w	r4, r0, r2
   210b0:	eb0c 0502 	add.w	r5, ip, r2
   210b4:	b121      	cbz	r1, 210c0 <strcmp+0x1c>
   210b6:	f81c 3002 	ldrb.w	r3, [ip, r2]
   210ba:	3201      	adds	r2, #1
   210bc:	4299      	cmp	r1, r3
   210be:	d0f4      	beq.n	210aa <strcmp+0x6>
   210c0:	7820      	ldrb	r0, [r4, #0]
   210c2:	782b      	ldrb	r3, [r5, #0]
   210c4:	1ac0      	subs	r0, r0, r3
   210c6:	bd30      	pop	{r4, r5, pc}

000210c8 <strcpy>:
   210c8:	2200      	movs	r2, #0
   210ca:	5c8b      	ldrb	r3, [r1, r2]
   210cc:	5483      	strb	r3, [r0, r2]
   210ce:	3201      	adds	r2, #1
   210d0:	2b00      	cmp	r3, #0
   210d2:	d1fa      	bne.n	210ca <strcpy+0x2>
   210d4:	4770      	bx	lr
   210d6:	46c0      	nop			(mov r8, r8)

000210d8 <strlen>:
   210d8:	4602      	mov	r2, r0
   210da:	e000      	b.n	210de <strlen+0x6>
   210dc:	3001      	adds	r0, #1
   210de:	7803      	ldrb	r3, [r0, #0]
   210e0:	2b00      	cmp	r3, #0
   210e2:	d1fb      	bne.n	210dc <strlen+0x4>
   210e4:	1a80      	subs	r0, r0, r2
   210e6:	4770      	bx	lr

000210e8 <strncmp>:
   210e8:	b570      	push	{r4, r5, r6, lr}
   210ea:	4604      	mov	r4, r0
   210ec:	4608      	mov	r0, r1
   210ee:	b90a      	cbnz	r2, 210f4 <strncmp+0xc>
   210f0:	2000      	movs	r0, #0
   210f2:	e017      	b.n	21124 <strncmp+0x3c>
   210f4:	f04f 0c00 	mov.w	ip, #0	; 0x0
   210f8:	e005      	b.n	21106 <strncmp+0x1e>
   210fa:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   210fe:	d00d      	beq.n	2111c <strncmp+0x34>
   21100:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   21104:	b151      	cbz	r1, 2111c <strncmp+0x34>
   21106:	eb04 050c 	add.w	r5, r4, ip
   2110a:	eb00 060c 	add.w	r6, r0, ip
   2110e:	b12a      	cbz	r2, 2111c <strncmp+0x34>
   21110:	f814 300c 	ldrb.w	r3, [r4, ip]
   21114:	f810 100c 	ldrb.w	r1, [r0, ip]
   21118:	4299      	cmp	r1, r3
   2111a:	d0ee      	beq.n	210fa <strncmp+0x12>
   2111c:	782a      	ldrb	r2, [r5, #0]
   2111e:	7833      	ldrb	r3, [r6, #0]
   21120:	ebc3 0002 	rsb	r0, r3, r2
   21124:	bd70      	pop	{r4, r5, r6, pc}
   21126:	46c0      	nop			(mov r8, r8)

00021128 <write>:
   21128:	b500      	push	{lr}
   2112a:	4613      	mov	r3, r2
   2112c:	4a05      	ldr	r2, [pc, #20]	(21144 <write+0x1c>)
   2112e:	4684      	mov	ip, r0
   21130:	468e      	mov	lr, r1
   21132:	b081      	sub	sp, #4
   21134:	6810      	ldr	r0, [r2, #0]
   21136:	4661      	mov	r1, ip
   21138:	4672      	mov	r2, lr
   2113a:	f000 f879 	bl	21230 <_write_r>
   2113e:	b001      	add	sp, #4
   21140:	bd00      	pop	{pc}
   21142:	46c0      	nop			(mov r8, r8)
   21144:	20000044 	.word	0x20000044

00021148 <__swbuf_r>:
   21148:	b570      	push	{r4, r5, r6, lr}
   2114a:	4606      	mov	r6, r0
   2114c:	460d      	mov	r5, r1
   2114e:	4614      	mov	r4, r2
   21150:	b118      	cbz	r0, 2115a <__swbuf_r+0x12>
   21152:	6983      	ldr	r3, [r0, #24]
   21154:	b90b      	cbnz	r3, 2115a <__swbuf_r+0x12>
   21156:	f000 fa63 	bl	21620 <__sinit>
   2115a:	4b2b      	ldr	r3, [pc, #172]	(21208 <__swbuf_r+0xc0>)
   2115c:	429c      	cmp	r4, r3
   2115e:	bf08      	it	eq
   21160:	6834      	ldreq	r4, [r6, #0]
   21162:	d008      	beq.n	21176 <__swbuf_r+0x2e>
   21164:	4b29      	ldr	r3, [pc, #164]	(2120c <__swbuf_r+0xc4>)
   21166:	429c      	cmp	r4, r3
   21168:	bf08      	it	eq
   2116a:	6874      	ldreq	r4, [r6, #4]
   2116c:	d003      	beq.n	21176 <__swbuf_r+0x2e>
   2116e:	4b28      	ldr	r3, [pc, #160]	(21210 <__swbuf_r+0xc8>)
   21170:	429c      	cmp	r4, r3
   21172:	bf08      	it	eq
   21174:	68b4      	ldreq	r4, [r6, #8]
   21176:	69a3      	ldr	r3, [r4, #24]
   21178:	60a3      	str	r3, [r4, #8]
   2117a:	89a3      	ldrh	r3, [r4, #12]
   2117c:	f013 0f08 	tst.w	r3, #8	; 0x8
   21180:	d001      	beq.n	21186 <__swbuf_r+0x3e>
   21182:	6923      	ldr	r3, [r4, #16]
   21184:	b95b      	cbnz	r3, 2119e <__swbuf_r+0x56>
   21186:	4630      	mov	r0, r6
   21188:	4621      	mov	r1, r4
   2118a:	f000 f867 	bl	2125c <__swsetup_r>
   2118e:	b130      	cbz	r0, 2119e <__swbuf_r+0x56>
   21190:	89a3      	ldrh	r3, [r4, #12]
   21192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21196:	81a3      	strh	r3, [r4, #12]
   21198:	2309      	movs	r3, #9
   2119a:	60f3      	str	r3, [r6, #12]
   2119c:	e030      	b.n	21200 <__swbuf_r+0xb8>
   2119e:	89a3      	ldrh	r3, [r4, #12]
   211a0:	6922      	ldr	r2, [r4, #16]
   211a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   211a6:	bf01      	itttt	eq
   211a8:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   211ac:	81a3      	strheq	r3, [r4, #12]
   211ae:	6e63      	ldreq	r3, [r4, #100]
   211b0:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   211b4:	bf08      	it	eq
   211b6:	6663      	streq	r3, [r4, #100]
   211b8:	6823      	ldr	r3, [r4, #0]
   211ba:	ebc2 0203 	rsb	r2, r2, r3
   211be:	6963      	ldr	r3, [r4, #20]
   211c0:	429a      	cmp	r2, r3
   211c2:	db05      	blt.n	211d0 <__swbuf_r+0x88>
   211c4:	4630      	mov	r0, r6
   211c6:	4621      	mov	r1, r4
   211c8:	f000 f8ba 	bl	21340 <_fflush_r>
   211cc:	b9c0      	cbnz	r0, 21200 <__swbuf_r+0xb8>
   211ce:	2200      	movs	r2, #0
   211d0:	68a3      	ldr	r3, [r4, #8]
   211d2:	b2ed      	uxtb	r5, r5
   211d4:	3b01      	subs	r3, #1
   211d6:	60a3      	str	r3, [r4, #8]
   211d8:	6823      	ldr	r3, [r4, #0]
   211da:	3201      	adds	r2, #1
   211dc:	f803 5b01 	strb.w	r5, [r3], #1
   211e0:	6023      	str	r3, [r4, #0]
   211e2:	6963      	ldr	r3, [r4, #20]
   211e4:	429a      	cmp	r2, r3
   211e6:	d006      	beq.n	211f6 <__swbuf_r+0xae>
   211e8:	7b23      	ldrb	r3, [r4, #12]
   211ea:	2d0a      	cmp	r5, #10
   211ec:	bf14      	ite	ne
   211ee:	2300      	movne	r3, #0
   211f0:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   211f4:	b133      	cbz	r3, 21204 <__swbuf_r+0xbc>
   211f6:	4630      	mov	r0, r6
   211f8:	4621      	mov	r1, r4
   211fa:	f000 f8a1 	bl	21340 <_fflush_r>
   211fe:	b108      	cbz	r0, 21204 <__swbuf_r+0xbc>
   21200:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21204:	4628      	mov	r0, r5
   21206:	bd70      	pop	{r4, r5, r6, pc}
   21208:	000236b0 	.word	0x000236b0
   2120c:	000236d0 	.word	0x000236d0
   21210:	000236f0 	.word	0x000236f0

00021214 <__swbuf>:
   21214:	b500      	push	{lr}
   21216:	4b05      	ldr	r3, [pc, #20]	(2122c <__swbuf+0x18>)
   21218:	4684      	mov	ip, r0
   2121a:	460a      	mov	r2, r1
   2121c:	b081      	sub	sp, #4
   2121e:	6818      	ldr	r0, [r3, #0]
   21220:	4661      	mov	r1, ip
   21222:	f7ff ff91 	bl	21148 <__swbuf_r>
   21226:	b001      	add	sp, #4
   21228:	bd00      	pop	{pc}
   2122a:	46c0      	nop			(mov r8, r8)
   2122c:	20000044 	.word	0x20000044

00021230 <_write_r>:
   21230:	b530      	push	{r4, r5, lr}
   21232:	4c09      	ldr	r4, [pc, #36]	(21258 <_write_r+0x28>)
   21234:	4605      	mov	r5, r0
   21236:	2000      	movs	r0, #0
   21238:	6020      	str	r0, [r4, #0]
   2123a:	b081      	sub	sp, #4
   2123c:	4608      	mov	r0, r1
   2123e:	4611      	mov	r1, r2
   21240:	461a      	mov	r2, r3
   21242:	f7f6 fa17 	bl	17674 <_write>
   21246:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2124a:	d102      	bne.n	21252 <_write_r+0x22>
   2124c:	6823      	ldr	r3, [r4, #0]
   2124e:	b103      	cbz	r3, 21252 <_write_r+0x22>
   21250:	60eb      	str	r3, [r5, #12]
   21252:	b001      	add	sp, #4
   21254:	bd30      	pop	{r4, r5, pc}
   21256:	46c0      	nop			(mov r8, r8)
   21258:	20000680 	.word	0x20000680

0002125c <__swsetup_r>:
   2125c:	b530      	push	{r4, r5, lr}
   2125e:	4b34      	ldr	r3, [pc, #208]	(21330 <__swsetup_r+0xd4>)
   21260:	4605      	mov	r5, r0
   21262:	6818      	ldr	r0, [r3, #0]
   21264:	b081      	sub	sp, #4
   21266:	460c      	mov	r4, r1
   21268:	b118      	cbz	r0, 21272 <__swsetup_r+0x16>
   2126a:	6983      	ldr	r3, [r0, #24]
   2126c:	b90b      	cbnz	r3, 21272 <__swsetup_r+0x16>
   2126e:	f000 f9d7 	bl	21620 <__sinit>
   21272:	4b30      	ldr	r3, [pc, #192]	(21334 <__swsetup_r+0xd8>)
   21274:	429c      	cmp	r4, r3
   21276:	d103      	bne.n	21280 <__swsetup_r+0x24>
   21278:	4b2d      	ldr	r3, [pc, #180]	(21330 <__swsetup_r+0xd4>)
   2127a:	681b      	ldr	r3, [r3, #0]
   2127c:	681c      	ldr	r4, [r3, #0]
   2127e:	e00c      	b.n	2129a <__swsetup_r+0x3e>
   21280:	4b2d      	ldr	r3, [pc, #180]	(21338 <__swsetup_r+0xdc>)
   21282:	429c      	cmp	r4, r3
   21284:	d103      	bne.n	2128e <__swsetup_r+0x32>
   21286:	4b2a      	ldr	r3, [pc, #168]	(21330 <__swsetup_r+0xd4>)
   21288:	681b      	ldr	r3, [r3, #0]
   2128a:	685c      	ldr	r4, [r3, #4]
   2128c:	e005      	b.n	2129a <__swsetup_r+0x3e>
   2128e:	4b2b      	ldr	r3, [pc, #172]	(2133c <__swsetup_r+0xe0>)
   21290:	429c      	cmp	r4, r3
   21292:	bf02      	ittt	eq
   21294:	4b26      	ldreq	r3, [pc, #152]	(21330 <__swsetup_r+0xd4>)
   21296:	681b      	ldreq	r3, [r3, #0]
   21298:	689c      	ldreq	r4, [r3, #8]
   2129a:	89a3      	ldrh	r3, [r4, #12]
   2129c:	f013 0f08 	tst.w	r3, #8	; 0x8
   212a0:	d11c      	bne.n	212dc <__swsetup_r+0x80>
   212a2:	f013 0f10 	tst.w	r3, #16	; 0x10
   212a6:	d03c      	beq.n	21322 <__swsetup_r+0xc6>
   212a8:	f013 0f04 	tst.w	r3, #4	; 0x4
   212ac:	d012      	beq.n	212d4 <__swsetup_r+0x78>
   212ae:	6b61      	ldr	r1, [r4, #52]
   212b0:	b141      	cbz	r1, 212c4 <__swsetup_r+0x68>
   212b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
   212b6:	4299      	cmp	r1, r3
   212b8:	d002      	beq.n	212c0 <__swsetup_r+0x64>
   212ba:	4628      	mov	r0, r5
   212bc:	f000 fa36 	bl	2172c <_free_r>
   212c0:	2300      	movs	r3, #0
   212c2:	6363      	str	r3, [r4, #52]
   212c4:	89a3      	ldrh	r3, [r4, #12]
   212c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   212ca:	81a3      	strh	r3, [r4, #12]
   212cc:	2300      	movs	r3, #0
   212ce:	6063      	str	r3, [r4, #4]
   212d0:	6923      	ldr	r3, [r4, #16]
   212d2:	6023      	str	r3, [r4, #0]
   212d4:	89a3      	ldrh	r3, [r4, #12]
   212d6:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   212da:	81a3      	strh	r3, [r4, #12]
   212dc:	6923      	ldr	r3, [r4, #16]
   212de:	b94b      	cbnz	r3, 212f4 <__swsetup_r+0x98>
   212e0:	89a3      	ldrh	r3, [r4, #12]
   212e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
   212e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   212ea:	d003      	beq.n	212f4 <__swsetup_r+0x98>
   212ec:	4628      	mov	r0, r5
   212ee:	4621      	mov	r1, r4
   212f0:	f000 fb36 	bl	21960 <__smakebuf_r>
   212f4:	89a3      	ldrh	r3, [r4, #12]
   212f6:	f013 0f01 	tst.w	r3, #1	; 0x1
   212fa:	d006      	beq.n	2130a <__swsetup_r+0xae>
   212fc:	2300      	movs	r3, #0
   212fe:	60a3      	str	r3, [r4, #8]
   21300:	6963      	ldr	r3, [r4, #20]
   21302:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   21306:	61a3      	str	r3, [r4, #24]
   21308:	e005      	b.n	21316 <__swsetup_r+0xba>
   2130a:	f013 0f02 	tst.w	r3, #2	; 0x2
   2130e:	bf0c      	ite	eq
   21310:	6963      	ldreq	r3, [r4, #20]
   21312:	2300      	movne	r3, #0
   21314:	60a3      	str	r3, [r4, #8]
   21316:	6923      	ldr	r3, [r4, #16]
   21318:	b933      	cbnz	r3, 21328 <__swsetup_r+0xcc>
   2131a:	89a3      	ldrh	r3, [r4, #12]
   2131c:	f013 0f80 	tst.w	r3, #128	; 0x80
   21320:	d002      	beq.n	21328 <__swsetup_r+0xcc>
   21322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21326:	e000      	b.n	2132a <__swsetup_r+0xce>
   21328:	2000      	movs	r0, #0
   2132a:	b001      	add	sp, #4
   2132c:	bd30      	pop	{r4, r5, pc}
   2132e:	46c0      	nop			(mov r8, r8)
   21330:	20000044 	.word	0x20000044
   21334:	000236b0 	.word	0x000236b0
   21338:	000236d0 	.word	0x000236d0
   2133c:	000236f0 	.word	0x000236f0

00021340 <_fflush_r>:
   21340:	b5f0      	push	{r4, r5, r6, r7, lr}
   21342:	690b      	ldr	r3, [r1, #16]
   21344:	b083      	sub	sp, #12
   21346:	9001      	str	r0, [sp, #4]
   21348:	460d      	mov	r5, r1
   2134a:	2b00      	cmp	r3, #0
   2134c:	f000 808c 	beq.w	21468 <_fflush_r+0x128>
   21350:	b118      	cbz	r0, 2135a <_fflush_r+0x1a>
   21352:	6983      	ldr	r3, [r0, #24]
   21354:	b90b      	cbnz	r3, 2135a <_fflush_r+0x1a>
   21356:	f000 f963 	bl	21620 <__sinit>
   2135a:	4b45      	ldr	r3, [pc, #276]	(21470 <_fflush_r+0x130>)
   2135c:	429d      	cmp	r5, r3
   2135e:	d102      	bne.n	21366 <_fflush_r+0x26>
   21360:	9a01      	ldr	r2, [sp, #4]
   21362:	6815      	ldr	r5, [r2, #0]
   21364:	e00a      	b.n	2137c <_fflush_r+0x3c>
   21366:	4b43      	ldr	r3, [pc, #268]	(21474 <_fflush_r+0x134>)
   21368:	429d      	cmp	r5, r3
   2136a:	d102      	bne.n	21372 <_fflush_r+0x32>
   2136c:	9b01      	ldr	r3, [sp, #4]
   2136e:	685d      	ldr	r5, [r3, #4]
   21370:	e004      	b.n	2137c <_fflush_r+0x3c>
   21372:	4b41      	ldr	r3, [pc, #260]	(21478 <_fflush_r+0x138>)
   21374:	429d      	cmp	r5, r3
   21376:	bf04      	itt	eq
   21378:	9a01      	ldreq	r2, [sp, #4]
   2137a:	6895      	ldreq	r5, [r2, #8]
   2137c:	89ab      	ldrh	r3, [r5, #12]
   2137e:	b21a      	sxth	r2, r3
   21380:	f012 0f08 	tst.w	r2, #8	; 0x8
   21384:	d150      	bne.n	21428 <_fflush_r+0xe8>
   21386:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   2138a:	686b      	ldr	r3, [r5, #4]
   2138c:	81aa      	strh	r2, [r5, #12]
   2138e:	2b00      	cmp	r3, #0
   21390:	dc02      	bgt.n	21398 <_fflush_r+0x58>
   21392:	6c2b      	ldr	r3, [r5, #64]
   21394:	2b00      	cmp	r3, #0
   21396:	dd67      	ble.n	21468 <_fflush_r+0x128>
   21398:	6aec      	ldr	r4, [r5, #44]
   2139a:	2c00      	cmp	r4, #0
   2139c:	d064      	beq.n	21468 <_fflush_r+0x128>
   2139e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   213a2:	bf18      	it	ne
   213a4:	6d6e      	ldrne	r6, [r5, #84]
   213a6:	d111      	bne.n	213cc <_fflush_r+0x8c>
   213a8:	2200      	movs	r2, #0
   213aa:	2301      	movs	r3, #1
   213ac:	6a29      	ldr	r1, [r5, #32]
   213ae:	9801      	ldr	r0, [sp, #4]
   213b0:	47a0      	blx	r4
   213b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   213b6:	4606      	mov	r6, r0
   213b8:	d108      	bne.n	213cc <_fflush_r+0x8c>
   213ba:	9a01      	ldr	r2, [sp, #4]
   213bc:	68d3      	ldr	r3, [r2, #12]
   213be:	2b1d      	cmp	r3, #29
   213c0:	d052      	beq.n	21468 <_fflush_r+0x128>
   213c2:	89ab      	ldrh	r3, [r5, #12]
   213c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   213c8:	81ab      	strh	r3, [r5, #12]
   213ca:	e04e      	b.n	2146a <_fflush_r+0x12a>
   213cc:	89ab      	ldrh	r3, [r5, #12]
   213ce:	f013 0f04 	tst.w	r3, #4	; 0x4
   213d2:	d005      	beq.n	213e0 <_fflush_r+0xa0>
   213d4:	686b      	ldr	r3, [r5, #4]
   213d6:	1af6      	subs	r6, r6, r3
   213d8:	6b6b      	ldr	r3, [r5, #52]
   213da:	b10b      	cbz	r3, 213e0 <_fflush_r+0xa0>
   213dc:	6c2b      	ldr	r3, [r5, #64]
   213de:	1af6      	subs	r6, r6, r3
   213e0:	2300      	movs	r3, #0
   213e2:	6a29      	ldr	r1, [r5, #32]
   213e4:	6aec      	ldr	r4, [r5, #44]
   213e6:	9801      	ldr	r0, [sp, #4]
   213e8:	4632      	mov	r2, r6
   213ea:	47a0      	blx	r4
   213ec:	42b0      	cmp	r0, r6
   213ee:	89ab      	ldrh	r3, [r5, #12]
   213f0:	d130      	bne.n	21454 <_fflush_r+0x114>
   213f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   213f6:	041b      	lsls	r3, r3, #16
   213f8:	0c1b      	lsrs	r3, r3, #16
   213fa:	81ab      	strh	r3, [r5, #12]
   213fc:	2300      	movs	r3, #0
   213fe:	606b      	str	r3, [r5, #4]
   21400:	692b      	ldr	r3, [r5, #16]
   21402:	6b69      	ldr	r1, [r5, #52]
   21404:	602b      	str	r3, [r5, #0]
   21406:	89ab      	ldrh	r3, [r5, #12]
   21408:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2140c:	bf18      	it	ne
   2140e:	656e      	strne	r6, [r5, #84]
   21410:	2900      	cmp	r1, #0
   21412:	d029      	beq.n	21468 <_fflush_r+0x128>
   21414:	f105 0344 	add.w	r3, r5, #68	; 0x44
   21418:	4299      	cmp	r1, r3
   2141a:	d002      	beq.n	21422 <_fflush_r+0xe2>
   2141c:	9801      	ldr	r0, [sp, #4]
   2141e:	f000 f985 	bl	2172c <_free_r>
   21422:	2300      	movs	r3, #0
   21424:	636b      	str	r3, [r5, #52]
   21426:	e01f      	b.n	21468 <_fflush_r+0x128>
   21428:	692f      	ldr	r7, [r5, #16]
   2142a:	b1ef      	cbz	r7, 21468 <_fflush_r+0x128>
   2142c:	f012 0f03 	tst.w	r2, #3	; 0x3
   21430:	682b      	ldr	r3, [r5, #0]
   21432:	bf0c      	ite	eq
   21434:	696a      	ldreq	r2, [r5, #20]
   21436:	2200      	movne	r2, #0
   21438:	602f      	str	r7, [r5, #0]
   2143a:	ebc7 0603 	rsb	r6, r7, r3
   2143e:	60aa      	str	r2, [r5, #8]
   21440:	e010      	b.n	21464 <_fflush_r+0x124>
   21442:	6a29      	ldr	r1, [r5, #32]
   21444:	6aac      	ldr	r4, [r5, #40]
   21446:	9801      	ldr	r0, [sp, #4]
   21448:	463a      	mov	r2, r7
   2144a:	4633      	mov	r3, r6
   2144c:	47a0      	blx	r4
   2144e:	2800      	cmp	r0, #0
   21450:	dc06      	bgt.n	21460 <_fflush_r+0x120>
   21452:	89ab      	ldrh	r3, [r5, #12]
   21454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21458:	81ab      	strh	r3, [r5, #12]
   2145a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2145e:	e004      	b.n	2146a <_fflush_r+0x12a>
   21460:	183f      	adds	r7, r7, r0
   21462:	1a36      	subs	r6, r6, r0
   21464:	2e00      	cmp	r6, #0
   21466:	dcec      	bgt.n	21442 <_fflush_r+0x102>
   21468:	2000      	movs	r0, #0
   2146a:	b003      	add	sp, #12
   2146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2146e:	46c0      	nop			(mov r8, r8)
   21470:	000236b0 	.word	0x000236b0
   21474:	000236d0 	.word	0x000236d0
   21478:	000236f0 	.word	0x000236f0

0002147c <fflush>:
   2147c:	b500      	push	{lr}
   2147e:	4601      	mov	r1, r0
   21480:	b081      	sub	sp, #4
   21482:	b928      	cbnz	r0, 21490 <fflush+0x14>
   21484:	4b05      	ldr	r3, [pc, #20]	(2149c <fflush+0x20>)
   21486:	4906      	ldr	r1, [pc, #24]	(214a0 <fflush+0x24>)
   21488:	6818      	ldr	r0, [r3, #0]
   2148a:	f000 fa1b 	bl	218c4 <_fwalk_reent>
   2148e:	e003      	b.n	21498 <fflush+0x1c>
   21490:	4b04      	ldr	r3, [pc, #16]	(214a4 <fflush+0x28>)
   21492:	6818      	ldr	r0, [r3, #0]
   21494:	f7ff ff54 	bl	21340 <_fflush_r>
   21498:	b001      	add	sp, #4
   2149a:	bd00      	pop	{pc}
   2149c:	000236a8 	.word	0x000236a8
   214a0:	00021341 	.word	0x00021341
   214a4:	20000044 	.word	0x20000044

000214a8 <__sfp_lock_acquire>:
   214a8:	4770      	bx	lr
   214aa:	46c0      	nop			(mov r8, r8)

000214ac <__sfp_lock_release>:
   214ac:	4770      	bx	lr
   214ae:	46c0      	nop			(mov r8, r8)

000214b0 <__sinit_lock_acquire>:
   214b0:	4770      	bx	lr
   214b2:	46c0      	nop			(mov r8, r8)

000214b4 <__sinit_lock_release>:
   214b4:	4770      	bx	lr
   214b6:	46c0      	nop			(mov r8, r8)

000214b8 <__fp_lock>:
   214b8:	2000      	movs	r0, #0
   214ba:	4770      	bx	lr

000214bc <__fp_unlock>:
   214bc:	2000      	movs	r0, #0
   214be:	4770      	bx	lr

000214c0 <__fp_unlock_all>:
   214c0:	b500      	push	{lr}
   214c2:	4b04      	ldr	r3, [pc, #16]	(214d4 <__fp_unlock_all+0x14>)
   214c4:	b081      	sub	sp, #4
   214c6:	6818      	ldr	r0, [r3, #0]
   214c8:	4903      	ldr	r1, [pc, #12]	(214d8 <__fp_unlock_all+0x18>)
   214ca:	f000 fa23 	bl	21914 <_fwalk>
   214ce:	b001      	add	sp, #4
   214d0:	bd00      	pop	{pc}
   214d2:	46c0      	nop			(mov r8, r8)
   214d4:	20000044 	.word	0x20000044
   214d8:	000214bd 	.word	0x000214bd

000214dc <__fp_lock_all>:
   214dc:	b500      	push	{lr}
   214de:	4b04      	ldr	r3, [pc, #16]	(214f0 <__fp_lock_all+0x14>)
   214e0:	b081      	sub	sp, #4
   214e2:	6818      	ldr	r0, [r3, #0]
   214e4:	4903      	ldr	r1, [pc, #12]	(214f4 <__fp_lock_all+0x18>)
   214e6:	f000 fa15 	bl	21914 <_fwalk>
   214ea:	b001      	add	sp, #4
   214ec:	bd00      	pop	{pc}
   214ee:	46c0      	nop			(mov r8, r8)
   214f0:	20000044 	.word	0x20000044
   214f4:	000214b9 	.word	0x000214b9

000214f8 <_cleanup_r>:
   214f8:	b500      	push	{lr}
   214fa:	4903      	ldr	r1, [pc, #12]	(21508 <_cleanup_r+0x10>)
   214fc:	b081      	sub	sp, #4
   214fe:	f000 fa09 	bl	21914 <_fwalk>
   21502:	b001      	add	sp, #4
   21504:	bd00      	pop	{pc}
   21506:	46c0      	nop			(mov r8, r8)
   21508:	00021bad 	.word	0x00021bad

0002150c <_cleanup>:
   2150c:	b500      	push	{lr}
   2150e:	4b04      	ldr	r3, [pc, #16]	(21520 <_cleanup+0x14>)
   21510:	b081      	sub	sp, #4
   21512:	6818      	ldr	r0, [r3, #0]
   21514:	4903      	ldr	r1, [pc, #12]	(21524 <_cleanup+0x18>)
   21516:	f000 f9fd 	bl	21914 <_fwalk>
   2151a:	b001      	add	sp, #4
   2151c:	bd00      	pop	{pc}
   2151e:	46c0      	nop			(mov r8, r8)
   21520:	000236a8 	.word	0x000236a8
   21524:	00021bad 	.word	0x00021bad

00021528 <std>:
   21528:	2300      	movs	r3, #0
   2152a:	6003      	str	r3, [r0, #0]
   2152c:	6043      	str	r3, [r0, #4]
   2152e:	6083      	str	r3, [r0, #8]
   21530:	8181      	strh	r1, [r0, #12]
   21532:	6643      	str	r3, [r0, #100]
   21534:	81c2      	strh	r2, [r0, #14]
   21536:	6103      	str	r3, [r0, #16]
   21538:	6143      	str	r3, [r0, #20]
   2153a:	6183      	str	r3, [r0, #24]
   2153c:	b510      	push	{r4, lr}
   2153e:	2100      	movs	r1, #0
   21540:	4604      	mov	r4, r0
   21542:	2208      	movs	r2, #8
   21544:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   21548:	f7ff fa3e 	bl	209c8 <memset>
   2154c:	4b04      	ldr	r3, [pc, #16]	(21560 <std+0x38>)
   2154e:	6224      	str	r4, [r4, #32]
   21550:	6263      	str	r3, [r4, #36]
   21552:	4b04      	ldr	r3, [pc, #16]	(21564 <std+0x3c>)
   21554:	62a3      	str	r3, [r4, #40]
   21556:	4b04      	ldr	r3, [pc, #16]	(21568 <std+0x40>)
   21558:	62e3      	str	r3, [r4, #44]
   2155a:	4b04      	ldr	r3, [pc, #16]	(2156c <std+0x44>)
   2155c:	6323      	str	r3, [r4, #48]
   2155e:	bd10      	pop	{r4, pc}
   21560:	00021aad 	.word	0x00021aad
   21564:	00021a6d 	.word	0x00021a6d
   21568:	00021a41 	.word	0x00021a41
   2156c:	00021a31 	.word	0x00021a31

00021570 <__sfmoreglue>:
   21570:	2368      	movs	r3, #104
   21572:	b570      	push	{r4, r5, r6, lr}
   21574:	fb03 f601 	mul.w	r6, r3, r1
   21578:	460d      	mov	r5, r1
   2157a:	f106 010c 	add.w	r1, r6, #12	; 0xc
   2157e:	f7fe ff9f 	bl	204c0 <_malloc_r>
   21582:	4604      	mov	r4, r0
   21584:	b148      	cbz	r0, 2159a <__sfmoreglue+0x2a>
   21586:	f100 000c 	add.w	r0, r0, #12	; 0xc
   2158a:	2300      	movs	r3, #0
   2158c:	6023      	str	r3, [r4, #0]
   2158e:	6065      	str	r5, [r4, #4]
   21590:	60a0      	str	r0, [r4, #8]
   21592:	2100      	movs	r1, #0
   21594:	4632      	mov	r2, r6
   21596:	f7ff fa17 	bl	209c8 <memset>
   2159a:	4620      	mov	r0, r4
   2159c:	bd70      	pop	{r4, r5, r6, pc}
   2159e:	46c0      	nop			(mov r8, r8)

000215a0 <__sfp>:
   215a0:	4b1e      	ldr	r3, [pc, #120]	(2161c <__sfp+0x7c>)
   215a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   215a4:	681c      	ldr	r4, [r3, #0]
   215a6:	b081      	sub	sp, #4
   215a8:	69a3      	ldr	r3, [r4, #24]
   215aa:	4607      	mov	r7, r0
   215ac:	b913      	cbnz	r3, 215b4 <__sfp+0x14>
   215ae:	4620      	mov	r0, r4
   215b0:	f000 f836 	bl	21620 <__sinit>
   215b4:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
   215b8:	68b4      	ldr	r4, [r6, #8]
   215ba:	6873      	ldr	r3, [r6, #4]
   215bc:	e003      	b.n	215c6 <__sfp+0x26>
   215be:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   215c2:	b18d      	cbz	r5, 215e8 <__sfp+0x48>
   215c4:	3468      	adds	r4, #104
   215c6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   215ca:	d5f8      	bpl.n	215be <__sfp+0x1e>
   215cc:	6833      	ldr	r3, [r6, #0]
   215ce:	b92b      	cbnz	r3, 215dc <__sfp+0x3c>
   215d0:	4638      	mov	r0, r7
   215d2:	2104      	movs	r1, #4
   215d4:	f7ff ffcc 	bl	21570 <__sfmoreglue>
   215d8:	6030      	str	r0, [r6, #0]
   215da:	b108      	cbz	r0, 215e0 <__sfp+0x40>
   215dc:	6836      	ldr	r6, [r6, #0]
   215de:	e7eb      	b.n	215b8 <__sfp+0x18>
   215e0:	230c      	movs	r3, #12
   215e2:	60fb      	str	r3, [r7, #12]
   215e4:	2400      	movs	r4, #0
   215e6:	e016      	b.n	21616 <__sfp+0x76>
   215e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   215ec:	81e3      	strh	r3, [r4, #14]
   215ee:	f04f 0301 	mov.w	r3, #1	; 0x1
   215f2:	81a3      	strh	r3, [r4, #12]
   215f4:	6665      	str	r5, [r4, #100]
   215f6:	6025      	str	r5, [r4, #0]
   215f8:	60a5      	str	r5, [r4, #8]
   215fa:	6065      	str	r5, [r4, #4]
   215fc:	6125      	str	r5, [r4, #16]
   215fe:	6165      	str	r5, [r4, #20]
   21600:	61a5      	str	r5, [r4, #24]
   21602:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21606:	2100      	movs	r1, #0
   21608:	2208      	movs	r2, #8
   2160a:	f7ff f9dd 	bl	209c8 <memset>
   2160e:	6365      	str	r5, [r4, #52]
   21610:	63a5      	str	r5, [r4, #56]
   21612:	64a5      	str	r5, [r4, #72]
   21614:	64e5      	str	r5, [r4, #76]
   21616:	4620      	mov	r0, r4
   21618:	b001      	add	sp, #4
   2161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2161c:	000236a8 	.word	0x000236a8

00021620 <__sinit>:
   21620:	6982      	ldr	r2, [r0, #24]
   21622:	b510      	push	{r4, lr}
   21624:	4604      	mov	r4, r0
   21626:	bb32      	cbnz	r2, 21676 <__sinit+0x56>
   21628:	4b13      	ldr	r3, [pc, #76]	(21678 <__sinit+0x58>)
   2162a:	f8c0 20d8 	str.w	r2, [r0, #216]
   2162e:	6283      	str	r3, [r0, #40]
   21630:	2301      	movs	r3, #1
   21632:	6183      	str	r3, [r0, #24]
   21634:	f8c0 20dc 	str.w	r2, [r0, #220]
   21638:	f8c0 20e0 	str.w	r2, [r0, #224]
   2163c:	f7ff ffb0 	bl	215a0 <__sfp>
   21640:	6020      	str	r0, [r4, #0]
   21642:	4620      	mov	r0, r4
   21644:	f7ff ffac 	bl	215a0 <__sfp>
   21648:	6060      	str	r0, [r4, #4]
   2164a:	4620      	mov	r0, r4
   2164c:	f7ff ffa8 	bl	215a0 <__sfp>
   21650:	2104      	movs	r1, #4
   21652:	60a0      	str	r0, [r4, #8]
   21654:	2200      	movs	r2, #0
   21656:	6820      	ldr	r0, [r4, #0]
   21658:	4623      	mov	r3, r4
   2165a:	f7ff ff65 	bl	21528 <std>
   2165e:	6860      	ldr	r0, [r4, #4]
   21660:	2109      	movs	r1, #9
   21662:	2201      	movs	r2, #1
   21664:	4623      	mov	r3, r4
   21666:	f7ff ff5f 	bl	21528 <std>
   2166a:	68a0      	ldr	r0, [r4, #8]
   2166c:	2112      	movs	r1, #18
   2166e:	2202      	movs	r2, #2
   21670:	4623      	mov	r3, r4
   21672:	f7ff ff59 	bl	21528 <std>
   21676:	bd10      	pop	{r4, pc}
   21678:	000214f9 	.word	0x000214f9

0002167c <_malloc_trim_r>:
   2167c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2167e:	4f28      	ldr	r7, [pc, #160]	(21720 <_malloc_trim_r+0xa4>)
   21680:	b081      	sub	sp, #4
   21682:	460c      	mov	r4, r1
   21684:	4605      	mov	r5, r0
   21686:	f7ff f9a7 	bl	209d8 <__malloc_lock>
   2168a:	68bb      	ldr	r3, [r7, #8]
   2168c:	685b      	ldr	r3, [r3, #4]
   2168e:	f023 0603 	bic.w	r6, r3, #3	; 0x3
   21692:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   21696:	330f      	adds	r3, #15
   21698:	1b1b      	subs	r3, r3, r4
   2169a:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   2169e:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
   216a2:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   216a6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   216aa:	db23      	blt.n	216f4 <_malloc_trim_r+0x78>
   216ac:	2100      	movs	r1, #0
   216ae:	4628      	mov	r0, r5
   216b0:	f7ff fc1e 	bl	20ef0 <_sbrk_r>
   216b4:	68bb      	ldr	r3, [r7, #8]
   216b6:	199b      	adds	r3, r3, r6
   216b8:	4298      	cmp	r0, r3
   216ba:	d11b      	bne.n	216f4 <_malloc_trim_r+0x78>
   216bc:	f1c4 0100 	rsb	r1, r4, #0	; 0x0
   216c0:	4628      	mov	r0, r5
   216c2:	f7ff fc15 	bl	20ef0 <_sbrk_r>
   216c6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   216ca:	d118      	bne.n	216fe <_malloc_trim_r+0x82>
   216cc:	2100      	movs	r1, #0
   216ce:	4628      	mov	r0, r5
   216d0:	f7ff fc0e 	bl	20ef0 <_sbrk_r>
   216d4:	f8d7 c008 	ldr.w	ip, [r7, #8]
   216d8:	ebcc 0100 	rsb	r1, ip, r0
   216dc:	290f      	cmp	r1, #15
   216de:	dd09      	ble.n	216f4 <_malloc_trim_r+0x78>
   216e0:	4b10      	ldr	r3, [pc, #64]	(21724 <_malloc_trim_r+0xa8>)
   216e2:	4a11      	ldr	r2, [pc, #68]	(21728 <_malloc_trim_r+0xac>)
   216e4:	681b      	ldr	r3, [r3, #0]
   216e6:	ebc3 0300 	rsb	r3, r3, r0
   216ea:	6013      	str	r3, [r2, #0]
   216ec:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   216f0:	f8cc 3004 	str.w	r3, [ip, #4]
   216f4:	4628      	mov	r0, r5
   216f6:	f7ff f971 	bl	209dc <__malloc_unlock>
   216fa:	2000      	movs	r0, #0
   216fc:	e00d      	b.n	2171a <_malloc_trim_r+0x9e>
   216fe:	68ba      	ldr	r2, [r7, #8]
   21700:	ebc4 0306 	rsb	r3, r4, r6
   21704:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21708:	6053      	str	r3, [r2, #4]
   2170a:	4a07      	ldr	r2, [pc, #28]	(21728 <_malloc_trim_r+0xac>)
   2170c:	4628      	mov	r0, r5
   2170e:	6813      	ldr	r3, [r2, #0]
   21710:	1b1b      	subs	r3, r3, r4
   21712:	6013      	str	r3, [r2, #0]
   21714:	f7ff f962 	bl	209dc <__malloc_unlock>
   21718:	2001      	movs	r0, #1
   2171a:	b001      	add	sp, #4
   2171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2171e:	46c0      	nop			(mov r8, r8)
   21720:	20000138 	.word	0x20000138
   21724:	20000544 	.word	0x20000544
   21728:	20000ea8 	.word	0x20000ea8

0002172c <_free_r>:
   2172c:	b570      	push	{r4, r5, r6, lr}
   2172e:	4606      	mov	r6, r0
   21730:	460c      	mov	r4, r1
   21732:	2900      	cmp	r1, #0
   21734:	f000 80bd 	beq.w	218b2 <_free_r+0x186>
   21738:	f7ff f94e 	bl	209d8 <__malloc_lock>
   2173c:	f1a4 0c08 	sub.w	ip, r4, #8	; 0x8
   21740:	f8dc 3004 	ldr.w	r3, [ip, #4]
   21744:	4d5b      	ldr	r5, [pc, #364]	(218b4 <_free_r+0x188>)
   21746:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   2174a:	eb0c 0001 	add.w	r0, ip, r1
   2174e:	6842      	ldr	r2, [r0, #4]
   21750:	f003 0301 	and.w	r3, r3, #1	; 0x1
   21754:	f022 0e03 	bic.w	lr, r2, #3	; 0x3
   21758:	68aa      	ldr	r2, [r5, #8]
   2175a:	4290      	cmp	r0, r2
   2175c:	d11d      	bne.n	2179a <_free_r+0x6e>
   2175e:	4471      	add	r1, lr
   21760:	b953      	cbnz	r3, 21778 <_free_r+0x4c>
   21762:	f854 3c08 	ldr.w	r3, [r4, #-8]
   21766:	ebc3 0c0c 	rsb	ip, r3, ip
   2176a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2176e:	18c9      	adds	r1, r1, r3
   21770:	f8dc 3008 	ldr.w	r3, [ip, #8]
   21774:	60da      	str	r2, [r3, #12]
   21776:	6093      	str	r3, [r2, #8]
   21778:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   2177c:	f8cc 3004 	str.w	r3, [ip, #4]
   21780:	4b4d      	ldr	r3, [pc, #308]	(218b8 <_free_r+0x18c>)
   21782:	f8c5 c008 	str.w	ip, [r5, #8]
   21786:	681b      	ldr	r3, [r3, #0]
   21788:	4299      	cmp	r1, r3
   2178a:	f0c0 808f 	bcc.w	218ac <_free_r+0x180>
   2178e:	4b4b      	ldr	r3, [pc, #300]	(218bc <_free_r+0x190>)
   21790:	4630      	mov	r0, r6
   21792:	6819      	ldr	r1, [r3, #0]
   21794:	f7ff ff72 	bl	2167c <_malloc_trim_r>
   21798:	e088      	b.n	218ac <_free_r+0x180>
   2179a:	f8c0 e004 	str.w	lr, [r0, #4]
   2179e:	b983      	cbnz	r3, 217c2 <_free_r+0x96>
   217a0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   217a4:	ebc3 0c0c 	rsb	ip, r3, ip
   217a8:	f8dc 2008 	ldr.w	r2, [ip, #8]
   217ac:	18c9      	adds	r1, r1, r3
   217ae:	f105 0308 	add.w	r3, r5, #8	; 0x8
   217b2:	429a      	cmp	r2, r3
   217b4:	d101      	bne.n	217ba <_free_r+0x8e>
   217b6:	2401      	movs	r4, #1
   217b8:	e004      	b.n	217c4 <_free_r+0x98>
   217ba:	f8dc 300c 	ldr.w	r3, [ip, #12]
   217be:	60d3      	str	r3, [r2, #12]
   217c0:	609a      	str	r2, [r3, #8]
   217c2:	2400      	movs	r4, #0
   217c4:	eb00 030e 	add.w	r3, r0, lr
   217c8:	685b      	ldr	r3, [r3, #4]
   217ca:	f013 0f01 	tst.w	r3, #1	; 0x1
   217ce:	d113      	bne.n	217f8 <_free_r+0xcc>
   217d0:	4471      	add	r1, lr
   217d2:	b96c      	cbnz	r4, 217f0 <_free_r+0xc4>
   217d4:	6882      	ldr	r2, [r0, #8]
   217d6:	4b3a      	ldr	r3, [pc, #232]	(218c0 <_free_r+0x194>)
   217d8:	429a      	cmp	r2, r3
   217da:	d109      	bne.n	217f0 <_free_r+0xc4>
   217dc:	f8c2 c00c 	str.w	ip, [r2, #12]
   217e0:	f8c2 c008 	str.w	ip, [r2, #8]
   217e4:	f8cc 200c 	str.w	r2, [ip, #12]
   217e8:	f8cc 2008 	str.w	r2, [ip, #8]
   217ec:	2401      	movs	r4, #1
   217ee:	e003      	b.n	217f8 <_free_r+0xcc>
   217f0:	68c2      	ldr	r2, [r0, #12]
   217f2:	6883      	ldr	r3, [r0, #8]
   217f4:	60da      	str	r2, [r3, #12]
   217f6:	6093      	str	r3, [r2, #8]
   217f8:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   217fc:	f8cc 3004 	str.w	r3, [ip, #4]
   21800:	f84c 1001 	str.w	r1, [ip, r1]
   21804:	2c00      	cmp	r4, #0
   21806:	d151      	bne.n	218ac <_free_r+0x180>
   21808:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2180c:	d212      	bcs.n	21834 <_free_r+0x108>
   2180e:	08c9      	lsrs	r1, r1, #3
   21810:	108b      	asrs	r3, r1, #2
   21812:	2201      	movs	r2, #1
   21814:	409a      	lsls	r2, r3
   21816:	686b      	ldr	r3, [r5, #4]
   21818:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   2181c:	4313      	orrs	r3, r2
   2181e:	606b      	str	r3, [r5, #4]
   21820:	688b      	ldr	r3, [r1, #8]
   21822:	f8cc 100c 	str.w	r1, [ip, #12]
   21826:	f8cc 3008 	str.w	r3, [ip, #8]
   2182a:	f8c3 c00c 	str.w	ip, [r3, #12]
   2182e:	f8c1 c008 	str.w	ip, [r1, #8]
   21832:	e03b      	b.n	218ac <_free_r+0x180>
   21834:	0a4a      	lsrs	r2, r1, #9
   21836:	2a04      	cmp	r2, #4
   21838:	d802      	bhi.n	21840 <_free_r+0x114>
   2183a:	098b      	lsrs	r3, r1, #6
   2183c:	3338      	adds	r3, #56
   2183e:	e017      	b.n	21870 <_free_r+0x144>
   21840:	2a14      	cmp	r2, #20
   21842:	bf98      	it	ls
   21844:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   21848:	d912      	bls.n	21870 <_free_r+0x144>
   2184a:	2a54      	cmp	r2, #84
   2184c:	d802      	bhi.n	21854 <_free_r+0x128>
   2184e:	0b0b      	lsrs	r3, r1, #12
   21850:	336e      	adds	r3, #110
   21852:	e00d      	b.n	21870 <_free_r+0x144>
   21854:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21858:	d802      	bhi.n	21860 <_free_r+0x134>
   2185a:	0bcb      	lsrs	r3, r1, #15
   2185c:	3377      	adds	r3, #119
   2185e:	e007      	b.n	21870 <_free_r+0x144>
   21860:	f240 5354 	movw	r3, #1364	; 0x554
   21864:	429a      	cmp	r2, r3
   21866:	d901      	bls.n	2186c <_free_r+0x140>
   21868:	237e      	movs	r3, #126
   2186a:	e001      	b.n	21870 <_free_r+0x144>
   2186c:	0c8b      	lsrs	r3, r1, #18
   2186e:	337c      	adds	r3, #124
   21870:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   21874:	6890      	ldr	r0, [r2, #8]
   21876:	4290      	cmp	r0, r2
   21878:	d10a      	bne.n	21890 <_free_r+0x164>
   2187a:	109b      	asrs	r3, r3, #2
   2187c:	2201      	movs	r2, #1
   2187e:	409a      	lsls	r2, r3
   21880:	686b      	ldr	r3, [r5, #4]
   21882:	4313      	orrs	r3, r2
   21884:	606b      	str	r3, [r5, #4]
   21886:	4603      	mov	r3, r0
   21888:	e008      	b.n	2189c <_free_r+0x170>
   2188a:	6880      	ldr	r0, [r0, #8]
   2188c:	4290      	cmp	r0, r2
   2188e:	d004      	beq.n	2189a <_free_r+0x16e>
   21890:	6843      	ldr	r3, [r0, #4]
   21892:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   21896:	4299      	cmp	r1, r3
   21898:	d3f7      	bcc.n	2188a <_free_r+0x15e>
   2189a:	68c3      	ldr	r3, [r0, #12]
   2189c:	f8cc 300c 	str.w	r3, [ip, #12]
   218a0:	f8cc 0008 	str.w	r0, [ip, #8]
   218a4:	f8c0 c00c 	str.w	ip, [r0, #12]
   218a8:	f8c3 c008 	str.w	ip, [r3, #8]
   218ac:	4630      	mov	r0, r6
   218ae:	f7ff f895 	bl	209dc <__malloc_unlock>
   218b2:	bd70      	pop	{r4, r5, r6, pc}
   218b4:	20000138 	.word	0x20000138
   218b8:	20000540 	.word	0x20000540
   218bc:	20000e9c 	.word	0x20000e9c
   218c0:	20000140 	.word	0x20000140

000218c4 <_fwalk_reent>:
   218c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   218c6:	b083      	sub	sp, #12
   218c8:	9001      	str	r0, [sp, #4]
   218ca:	9100      	str	r1, [sp, #0]
   218cc:	f7ff fdec 	bl	214a8 <__sfp_lock_acquire>
   218d0:	9b01      	ldr	r3, [sp, #4]
   218d2:	2700      	movs	r7, #0
   218d4:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
   218d8:	e014      	b.n	21904 <_fwalk_reent+0x40>
   218da:	68ac      	ldr	r4, [r5, #8]
   218dc:	686e      	ldr	r6, [r5, #4]
   218de:	e00d      	b.n	218fc <_fwalk_reent+0x38>
   218e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   218e4:	b14b      	cbz	r3, 218fa <_fwalk_reent+0x36>
   218e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   218ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   218ee:	d004      	beq.n	218fa <_fwalk_reent+0x36>
   218f0:	9801      	ldr	r0, [sp, #4]
   218f2:	4621      	mov	r1, r4
   218f4:	9b00      	ldr	r3, [sp, #0]
   218f6:	4798      	blx	r3
   218f8:	4307      	orrs	r7, r0
   218fa:	3468      	adds	r4, #104
   218fc:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   21900:	d5ee      	bpl.n	218e0 <_fwalk_reent+0x1c>
   21902:	682d      	ldr	r5, [r5, #0]
   21904:	2d00      	cmp	r5, #0
   21906:	d1e8      	bne.n	218da <_fwalk_reent+0x16>
   21908:	f7ff fdd0 	bl	214ac <__sfp_lock_release>
   2190c:	4638      	mov	r0, r7
   2190e:	b003      	add	sp, #12
   21910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21912:	46c0      	nop			(mov r8, r8)

00021914 <_fwalk>:
   21914:	b5f0      	push	{r4, r5, r6, r7, lr}
   21916:	4604      	mov	r4, r0
   21918:	b083      	sub	sp, #12
   2191a:	9101      	str	r1, [sp, #4]
   2191c:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   21920:	f7ff fdc2 	bl	214a8 <__sfp_lock_acquire>
   21924:	2700      	movs	r7, #0
   21926:	e013      	b.n	21950 <_fwalk+0x3c>
   21928:	68ac      	ldr	r4, [r5, #8]
   2192a:	686e      	ldr	r6, [r5, #4]
   2192c:	e00c      	b.n	21948 <_fwalk+0x34>
   2192e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21932:	b143      	cbz	r3, 21946 <_fwalk+0x32>
   21934:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2193c:	d003      	beq.n	21946 <_fwalk+0x32>
   2193e:	4620      	mov	r0, r4
   21940:	9b01      	ldr	r3, [sp, #4]
   21942:	4798      	blx	r3
   21944:	4307      	orrs	r7, r0
   21946:	3468      	adds	r4, #104
   21948:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   2194c:	d5ef      	bpl.n	2192e <_fwalk+0x1a>
   2194e:	682d      	ldr	r5, [r5, #0]
   21950:	2d00      	cmp	r5, #0
   21952:	d1e9      	bne.n	21928 <_fwalk+0x14>
   21954:	f7ff fdaa 	bl	214ac <__sfp_lock_release>
   21958:	4638      	mov	r0, r7
   2195a:	b003      	add	sp, #12
   2195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2195e:	46c0      	nop			(mov r8, r8)

00021960 <__smakebuf_r>:
   21960:	b5f0      	push	{r4, r5, r6, r7, lr}
   21962:	898b      	ldrh	r3, [r1, #12]
   21964:	b091      	sub	sp, #68
   21966:	f013 0f02 	tst.w	r3, #2	; 0x2
   2196a:	4606      	mov	r6, r0
   2196c:	460c      	mov	r4, r1
   2196e:	d13d      	bne.n	219ec <__smakebuf_r+0x8c>
   21970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21974:	2900      	cmp	r1, #0
   21976:	db04      	blt.n	21982 <__smakebuf_r+0x22>
   21978:	aa01      	add	r2, sp, #4
   2197a:	f000 f923 	bl	21bc4 <_fstat_r>
   2197e:	2800      	cmp	r0, #0
   21980:	da0b      	bge.n	2199a <__smakebuf_r+0x3a>
   21982:	89a3      	ldrh	r3, [r4, #12]
   21984:	f013 0f80 	tst.w	r3, #128	; 0x80
   21988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2198c:	bf14      	ite	ne
   2198e:	2540      	movne	r5, #64
   21990:	f44f 7580 	moveq.w	r5, #256	; 0x100
   21994:	81a3      	strh	r3, [r4, #12]
   21996:	2700      	movs	r7, #0
   21998:	e01c      	b.n	219d4 <__smakebuf_r+0x74>
   2199a:	9b02      	ldr	r3, [sp, #8]
   2199c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   219a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   219a4:	bf14      	ite	ne
   219a6:	2700      	movne	r7, #0
   219a8:	2701      	moveq	r7, #1
   219aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   219ae:	d10b      	bne.n	219c8 <__smakebuf_r+0x68>
   219b0:	6ae2      	ldr	r2, [r4, #44]
   219b2:	4b1d      	ldr	r3, [pc, #116]	(21a28 <__smakebuf_r+0xc8>)
   219b4:	429a      	cmp	r2, r3
   219b6:	d107      	bne.n	219c8 <__smakebuf_r+0x68>
   219b8:	89a3      	ldrh	r3, [r4, #12]
   219ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   219be:	81a3      	strh	r3, [r4, #12]
   219c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   219c4:	6523      	str	r3, [r4, #80]
   219c6:	e003      	b.n	219d0 <__smakebuf_r+0x70>
   219c8:	89a3      	ldrh	r3, [r4, #12]
   219ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   219ce:	81a3      	strh	r3, [r4, #12]
   219d0:	f44f 7580 	mov.w	r5, #256	; 0x100
   219d4:	4630      	mov	r0, r6
   219d6:	4629      	mov	r1, r5
   219d8:	f7fe fd72 	bl	204c0 <_malloc_r>
   219dc:	b968      	cbnz	r0, 219fa <__smakebuf_r+0x9a>
   219de:	89a3      	ldrh	r3, [r4, #12]
   219e0:	f413 7f00 	tst.w	r3, #512	; 0x200
   219e4:	d11d      	bne.n	21a22 <__smakebuf_r+0xc2>
   219e6:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   219ea:	81a3      	strh	r3, [r4, #12]
   219ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
   219f0:	6023      	str	r3, [r4, #0]
   219f2:	6123      	str	r3, [r4, #16]
   219f4:	2301      	movs	r3, #1
   219f6:	6163      	str	r3, [r4, #20]
   219f8:	e013      	b.n	21a22 <__smakebuf_r+0xc2>
   219fa:	4b0c      	ldr	r3, [pc, #48]	(21a2c <__smakebuf_r+0xcc>)
   219fc:	6020      	str	r0, [r4, #0]
   219fe:	62b3      	str	r3, [r6, #40]
   21a00:	89a3      	ldrh	r3, [r4, #12]
   21a02:	6120      	str	r0, [r4, #16]
   21a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21a08:	81a3      	strh	r3, [r4, #12]
   21a0a:	6165      	str	r5, [r4, #20]
   21a0c:	b14f      	cbz	r7, 21a22 <__smakebuf_r+0xc2>
   21a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21a12:	4630      	mov	r0, r6
   21a14:	f000 f8ea 	bl	21bec <_isatty_r>
   21a18:	b118      	cbz	r0, 21a22 <__smakebuf_r+0xc2>
   21a1a:	89a3      	ldrh	r3, [r4, #12]
   21a1c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21a20:	81a3      	strh	r3, [r4, #12]
   21a22:	b011      	add	sp, #68
   21a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a26:	46c0      	nop			(mov r8, r8)
   21a28:	00021a41 	.word	0x00021a41
   21a2c:	000214f9 	.word	0x000214f9

00021a30 <__sclose>:
   21a30:	b500      	push	{lr}
   21a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21a36:	b081      	sub	sp, #4
   21a38:	f000 f84c 	bl	21ad4 <_close_r>
   21a3c:	b001      	add	sp, #4
   21a3e:	bd00      	pop	{pc}

00021a40 <__sseek>:
   21a40:	b510      	push	{r4, lr}
   21a42:	460c      	mov	r4, r1
   21a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21a48:	f000 f8e4 	bl	21c14 <_lseek_r>
   21a4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21a50:	89a3      	ldrh	r3, [r4, #12]
   21a52:	d105      	bne.n	21a60 <__sseek+0x20>
   21a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21a58:	041b      	lsls	r3, r3, #16
   21a5a:	0c1b      	lsrs	r3, r3, #16
   21a5c:	81a3      	strh	r3, [r4, #12]
   21a5e:	e003      	b.n	21a68 <__sseek+0x28>
   21a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   21a64:	81a3      	strh	r3, [r4, #12]
   21a66:	6560      	str	r0, [r4, #84]
   21a68:	bd10      	pop	{r4, pc}
   21a6a:	46c0      	nop			(mov r8, r8)

00021a6c <__swrite>:
   21a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a6e:	461f      	mov	r7, r3
   21a70:	898b      	ldrh	r3, [r1, #12]
   21a72:	b081      	sub	sp, #4
   21a74:	f413 7f80 	tst.w	r3, #256	; 0x100
   21a78:	4605      	mov	r5, r0
   21a7a:	460c      	mov	r4, r1
   21a7c:	4616      	mov	r6, r2
   21a7e:	d005      	beq.n	21a8c <__swrite+0x20>
   21a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21a84:	2200      	movs	r2, #0
   21a86:	2302      	movs	r3, #2
   21a88:	f000 f8c4 	bl	21c14 <_lseek_r>
   21a8c:	89a3      	ldrh	r3, [r4, #12]
   21a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21a92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21a96:	041b      	lsls	r3, r3, #16
   21a98:	0c1b      	lsrs	r3, r3, #16
   21a9a:	81a3      	strh	r3, [r4, #12]
   21a9c:	4628      	mov	r0, r5
   21a9e:	4632      	mov	r2, r6
   21aa0:	463b      	mov	r3, r7
   21aa2:	f7ff fbc5 	bl	21230 <_write_r>
   21aa6:	b001      	add	sp, #4
   21aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21aaa:	46c0      	nop			(mov r8, r8)

00021aac <__sread>:
   21aac:	b510      	push	{r4, lr}
   21aae:	460c      	mov	r4, r1
   21ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21ab4:	f000 f8c4 	bl	21c40 <_read_r>
   21ab8:	2800      	cmp	r0, #0
   21aba:	db03      	blt.n	21ac4 <__sread+0x18>
   21abc:	6d63      	ldr	r3, [r4, #84]
   21abe:	181b      	adds	r3, r3, r0
   21ac0:	6563      	str	r3, [r4, #84]
   21ac2:	e005      	b.n	21ad0 <__sread+0x24>
   21ac4:	89a3      	ldrh	r3, [r4, #12]
   21ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21aca:	041b      	lsls	r3, r3, #16
   21acc:	0c1b      	lsrs	r3, r3, #16
   21ace:	81a3      	strh	r3, [r4, #12]
   21ad0:	bd10      	pop	{r4, pc}
   21ad2:	46c0      	nop			(mov r8, r8)

00021ad4 <_close_r>:
   21ad4:	b530      	push	{r4, r5, lr}
   21ad6:	4c08      	ldr	r4, [pc, #32]	(21af8 <_close_r+0x24>)
   21ad8:	2300      	movs	r3, #0
   21ada:	b081      	sub	sp, #4
   21adc:	4605      	mov	r5, r0
   21ade:	4608      	mov	r0, r1
   21ae0:	6023      	str	r3, [r4, #0]
   21ae2:	f7f5 fcbf 	bl	17464 <_close>
   21ae6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21aea:	d102      	bne.n	21af2 <_close_r+0x1e>
   21aec:	6823      	ldr	r3, [r4, #0]
   21aee:	b103      	cbz	r3, 21af2 <_close_r+0x1e>
   21af0:	60eb      	str	r3, [r5, #12]
   21af2:	b001      	add	sp, #4
   21af4:	bd30      	pop	{r4, r5, pc}
   21af6:	46c0      	nop			(mov r8, r8)
   21af8:	20000680 	.word	0x20000680

00021afc <_fclose_r>:
   21afc:	b570      	push	{r4, r5, r6, lr}
   21afe:	4605      	mov	r5, r0
   21b00:	460c      	mov	r4, r1
   21b02:	b1d1      	cbz	r1, 21b3a <_fclose_r+0x3e>
   21b04:	f7ff fcd0 	bl	214a8 <__sfp_lock_acquire>
   21b08:	b125      	cbz	r5, 21b14 <_fclose_r+0x18>
   21b0a:	69ab      	ldr	r3, [r5, #24]
   21b0c:	b913      	cbnz	r3, 21b14 <_fclose_r+0x18>
   21b0e:	4628      	mov	r0, r5
   21b10:	f7ff fd86 	bl	21620 <__sinit>
   21b14:	4b22      	ldr	r3, [pc, #136]	(21ba0 <_fclose_r+0xa4>)
   21b16:	429c      	cmp	r4, r3
   21b18:	bf08      	it	eq
   21b1a:	682c      	ldreq	r4, [r5, #0]
   21b1c:	d008      	beq.n	21b30 <_fclose_r+0x34>
   21b1e:	4b21      	ldr	r3, [pc, #132]	(21ba4 <_fclose_r+0xa8>)
   21b20:	429c      	cmp	r4, r3
   21b22:	bf08      	it	eq
   21b24:	686c      	ldreq	r4, [r5, #4]
   21b26:	d003      	beq.n	21b30 <_fclose_r+0x34>
   21b28:	4b1f      	ldr	r3, [pc, #124]	(21ba8 <_fclose_r+0xac>)
   21b2a:	429c      	cmp	r4, r3
   21b2c:	bf08      	it	eq
   21b2e:	68ac      	ldreq	r4, [r5, #8]
   21b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21b34:	b91b      	cbnz	r3, 21b3e <_fclose_r+0x42>
   21b36:	f7ff fcb9 	bl	214ac <__sfp_lock_release>
   21b3a:	2600      	movs	r6, #0
   21b3c:	e02d      	b.n	21b9a <_fclose_r+0x9e>
   21b3e:	4628      	mov	r0, r5
   21b40:	4621      	mov	r1, r4
   21b42:	f7ff fbfd 	bl	21340 <_fflush_r>
   21b46:	6b23      	ldr	r3, [r4, #48]
   21b48:	4606      	mov	r6, r0
   21b4a:	b13b      	cbz	r3, 21b5c <_fclose_r+0x60>
   21b4c:	6a21      	ldr	r1, [r4, #32]
   21b4e:	4628      	mov	r0, r5
   21b50:	4798      	blx	r3
   21b52:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   21b56:	bf28      	it	cs
   21b58:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
   21b5c:	89a3      	ldrh	r3, [r4, #12]
   21b5e:	f013 0f80 	tst.w	r3, #128	; 0x80
   21b62:	d003      	beq.n	21b6c <_fclose_r+0x70>
   21b64:	6921      	ldr	r1, [r4, #16]
   21b66:	4628      	mov	r0, r5
   21b68:	f7ff fde0 	bl	2172c <_free_r>
   21b6c:	6b61      	ldr	r1, [r4, #52]
   21b6e:	b141      	cbz	r1, 21b82 <_fclose_r+0x86>
   21b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
   21b74:	4299      	cmp	r1, r3
   21b76:	d002      	beq.n	21b7e <_fclose_r+0x82>
   21b78:	4628      	mov	r0, r5
   21b7a:	f7ff fdd7 	bl	2172c <_free_r>
   21b7e:	2300      	movs	r3, #0
   21b80:	6363      	str	r3, [r4, #52]
   21b82:	6ca1      	ldr	r1, [r4, #72]
   21b84:	b121      	cbz	r1, 21b90 <_fclose_r+0x94>
   21b86:	4628      	mov	r0, r5
   21b88:	f7ff fdd0 	bl	2172c <_free_r>
   21b8c:	2300      	movs	r3, #0
   21b8e:	64a3      	str	r3, [r4, #72]
   21b90:	f04f 0300 	mov.w	r3, #0	; 0x0
   21b94:	81a3      	strh	r3, [r4, #12]
   21b96:	f7ff fc89 	bl	214ac <__sfp_lock_release>
   21b9a:	4630      	mov	r0, r6
   21b9c:	bd70      	pop	{r4, r5, r6, pc}
   21b9e:	46c0      	nop			(mov r8, r8)
   21ba0:	000236b0 	.word	0x000236b0
   21ba4:	000236d0 	.word	0x000236d0
   21ba8:	000236f0 	.word	0x000236f0

00021bac <fclose>:
   21bac:	b500      	push	{lr}
   21bae:	4b04      	ldr	r3, [pc, #16]	(21bc0 <fclose+0x14>)
   21bb0:	4601      	mov	r1, r0
   21bb2:	b081      	sub	sp, #4
   21bb4:	6818      	ldr	r0, [r3, #0]
   21bb6:	f7ff ffa1 	bl	21afc <_fclose_r>
   21bba:	b001      	add	sp, #4
   21bbc:	bd00      	pop	{pc}
   21bbe:	46c0      	nop			(mov r8, r8)
   21bc0:	20000044 	.word	0x20000044

00021bc4 <_fstat_r>:
   21bc4:	b530      	push	{r4, r5, lr}
   21bc6:	4c08      	ldr	r4, [pc, #32]	(21be8 <_fstat_r+0x24>)
   21bc8:	2300      	movs	r3, #0
   21bca:	b081      	sub	sp, #4
   21bcc:	4605      	mov	r5, r0
   21bce:	4608      	mov	r0, r1
   21bd0:	4611      	mov	r1, r2
   21bd2:	6023      	str	r3, [r4, #0]
   21bd4:	f7f5 fc74 	bl	174c0 <_fstat>
   21bd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21bdc:	d102      	bne.n	21be4 <_fstat_r+0x20>
   21bde:	6823      	ldr	r3, [r4, #0]
   21be0:	b103      	cbz	r3, 21be4 <_fstat_r+0x20>
   21be2:	60eb      	str	r3, [r5, #12]
   21be4:	b001      	add	sp, #4
   21be6:	bd30      	pop	{r4, r5, pc}
   21be8:	20000680 	.word	0x20000680

00021bec <_isatty_r>:
   21bec:	b530      	push	{r4, r5, lr}
   21bee:	4c08      	ldr	r4, [pc, #32]	(21c10 <_isatty_r+0x24>)
   21bf0:	2300      	movs	r3, #0
   21bf2:	b081      	sub	sp, #4
   21bf4:	4605      	mov	r5, r0
   21bf6:	4608      	mov	r0, r1
   21bf8:	6023      	str	r3, [r4, #0]
   21bfa:	f7f5 fc7b 	bl	174f4 <_isatty>
   21bfe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21c02:	d102      	bne.n	21c0a <_isatty_r+0x1e>
   21c04:	6823      	ldr	r3, [r4, #0]
   21c06:	b103      	cbz	r3, 21c0a <_isatty_r+0x1e>
   21c08:	60eb      	str	r3, [r5, #12]
   21c0a:	b001      	add	sp, #4
   21c0c:	bd30      	pop	{r4, r5, pc}
   21c0e:	46c0      	nop			(mov r8, r8)
   21c10:	20000680 	.word	0x20000680

00021c14 <_lseek_r>:
   21c14:	b530      	push	{r4, r5, lr}
   21c16:	4c09      	ldr	r4, [pc, #36]	(21c3c <_lseek_r+0x28>)
   21c18:	4605      	mov	r5, r0
   21c1a:	2000      	movs	r0, #0
   21c1c:	6020      	str	r0, [r4, #0]
   21c1e:	b081      	sub	sp, #4
   21c20:	4608      	mov	r0, r1
   21c22:	4611      	mov	r1, r2
   21c24:	461a      	mov	r2, r3
   21c26:	f7f5 fc99 	bl	1755c <_lseek>
   21c2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21c2e:	d102      	bne.n	21c36 <_lseek_r+0x22>
   21c30:	6823      	ldr	r3, [r4, #0]
   21c32:	b103      	cbz	r3, 21c36 <_lseek_r+0x22>
   21c34:	60eb      	str	r3, [r5, #12]
   21c36:	b001      	add	sp, #4
   21c38:	bd30      	pop	{r4, r5, pc}
   21c3a:	46c0      	nop			(mov r8, r8)
   21c3c:	20000680 	.word	0x20000680

00021c40 <_read_r>:
   21c40:	b530      	push	{r4, r5, lr}
   21c42:	4c09      	ldr	r4, [pc, #36]	(21c68 <_read_r+0x28>)
   21c44:	4605      	mov	r5, r0
   21c46:	2000      	movs	r0, #0
   21c48:	6020      	str	r0, [r4, #0]
   21c4a:	b081      	sub	sp, #4
   21c4c:	4608      	mov	r0, r1
   21c4e:	4611      	mov	r1, r2
   21c50:	461a      	mov	r2, r3
   21c52:	f7f5 fc9f 	bl	17594 <_read>
   21c56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21c5a:	d102      	bne.n	21c62 <_read_r+0x22>
   21c5c:	6823      	ldr	r3, [r4, #0]
   21c5e:	b103      	cbz	r3, 21c62 <_read_r+0x22>
   21c60:	60eb      	str	r3, [r5, #12]
   21c62:	b001      	add	sp, #4
   21c64:	bd30      	pop	{r4, r5, pc}
   21c66:	46c0      	nop			(mov r8, r8)
   21c68:	20000680 	.word	0x20000680
   21c6c:	00000000 	.word	0x00000000

00021c70 <_ZTV6Sensor>:
	...
   21c78:	00005cf5 00005cc5 0001d079 00000000     .\...\..y.......

00021c88 <_ZTV7Sensors>:
	...
   21c90:	0000676d 00006515                       mg...e..

00021c98 <_ZZN7SensorsC1EvE4C.23>:
   21c98:	0b0d0e09 0c0f0405 00000a08 00000000     ................

00021ca8 <_ZN14Asservissement21nb_ms_between_updatesE>:
   21ca8:	00000005 00000000                       ........

00021cb0 <_ZTV7Command>:
	...
   21cb8:	000080f9 000080c9 0001d079 00007d4d     ........y...M}..
   21cc8:	0001d079 0001d079 00007d81 00000000     y...y....}......

00021cd8 <_ZTV24CommandTestTournerGauche>:
	...
   21ce0:	0001cb9d 0001cb65 00008415 00007d4d     ....e.......M}..
   21cf0:	00008429 00008445 00007d81 00000000     )...E....}......

00021d00 <_ZTV18CommandTestAvancer>:
	...
   21d08:	0001cb2d 0001caf5 000083c9 00007d4d     -...........M}..
   21d18:	000083dd 000083f9 00007d81 00000000     .........}......

00021d28 <_ZTV15CommandAttendre>:
	...
   21d30:	0001cabd 0001ca85 0000834d 00007d4d     ........M...M}..
   21d40:	0000836d 00008389 000083a5 00000000     m...............

00021d50 <_ZTV13CommandVirage>:
	...
   21d58:	0001ca4d 0001ca15 00008561 00007d4d     M.......a...M}..
   21d68:	00008305 0000831d 00008335 00000000     ........5.......

00021d78 <_ZTV18CommandTournerVers>:
	...
   21d80:	0001c9dd 0001c9a5 00008949 00007d4d     ........I...M}..
   21d90:	000082b9 000082d5 000082ed 00000000     ................

00021da0 <_ZTV13CommandAllerA>:
	...
   21da8:	0001c96d 0001c935 000092a1 00008915     m...5...........
   21db8:	0000826d 00008285 0000829d 00000000     m...............

00021dc8 <_ZTV18CommandAllerEnArcA>:
	...
   21dd0:	0001c8fd 0001c8c5 00009a19 00007d4d     ............M}..
   21de0:	00008221 00008239 00008251 00000000     !...9...Q.......

00021df0 <_ZN14PIDFilterAngle2KpE>:
   21df0:	42960000                                ...B

00021df4 <_ZN14PIDFilterAngle2KdE>:
   21df4:	3f000000                                ...?

00021df8 <_ZN14PIDFilterAngle2KiE>:
   21df8:	3f333333                                333?

00021dfc <_ZN17PIDFilterDistance2KpE>:
   21dfc:	3e4ccccd                                ..L>

00021e00 <_ZN17PIDFilterDistance2KdE>:
   21e00:	3f333333                                333?

00021e04 <_ZN17PIDFilterDistance2KiE>:
   21e04:	3ba3d70a                                ...;

00021e08 <_ZTV12AnalogSensor>:
	...
   21e10:	0000ac65 0000ac2d 0001d079 00000000     e...-...y.......

00021e20 <_ZTV19CommandCheckCouleur>:
	...
   21e28:	0001cc7d 0001cc45 0000b7cd 00007d4d     }...E.......M}..
   21e38:	0000b2b5 0000b2d1 0000b2ed 00000000     ................

00021e48 <_ZTV29CommandCalibrerCapteurCouleur>:
	...
   21e50:	0001cc0d 0001cbd5 0000b555 00007d4d     ........U...M}..
   21e60:	0000b241 0000b25d 0000b279 00000000     A...]...y.......

00021e70 <_ZZN8CapteursC1EvE4C.21>:
   21e70:	0d0c0b0a 0000000f                       ........

00021e78 <_ZTV18LigthBarrierSensor>:
	...
   21e80:	0000c3ad 0000c375 0000c2a9 00000000     ....u...........

00021e90 <_ZTV17LimitSwitchSensor>:
	...
   21e98:	0000c5d9 0000c5a1 0000c4fd 00000000     ................
   21ea8:	a7c36552 61202c75 746e6176 756f7420     Re..u, avant tou
   21eb8:	63206574 616d6d6f 6e61646e 00212074     te commandant !.
   21ec8:	3a746f47 00000000                       Got:....

00021ed0 <_ZTV11SharpSensor>:
	...
   21ed8:	0000d2d1 0000d299 0000d159 00000000     ........Y.......
   21ee8:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   21ef8:	65747465 6d657220 27657369 00000000     ette remise'....
   21f08:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   21f18:	65747465 6c6e6520 27657665 00000000     ette enleve'....

00021f28 <_ZTV16UltrasoundSensor>:
	...
   21f30:	0000dab1 0000da79 0000da11 00000000     ....y...........
   21f40:	74696e49 00000000                       Init....

00021f48 <_ZTV10ActionGoTo>:
	...
   21f50:	0000f351 0000f319 0000f1c9 00014e15     Q............N..
   21f60:	0000f191 0000f1ad                       ........

00021f68 <_ZTV4Clap>:
	...
   21f70:	0000f721 0000f6e9 0000f499 00014e15     !............N..
   21f80:	00014e2d 00014e65                       -N..eN..

00021f88 <_ZTV7Gobelet>:
	...
   21f90:	00010949 00010911 00010809 00014e15     I............N..
   21fa0:	00014e2d 00014e65                       -N..eN..

00021fa8 <_ZTV9Krabi2015>:
	...
   21fb0:	0001cdc1 0001cced 00016a55 00014e15     ........Uj...N..
   21fc0:	000167ed 00014e65 00010bb1 00010ae1     .g..eN..........

00021fd0 <_ZTV17MediumLevelAction>:
	...
   21fd8:	00014ec5 00014e95 0001d079 00014e15     .N...N..y....N..
   21fe8:	00014e2d 00014e65                       -N..eN..

00021ff0 <_ZTV19RecalibrerOdometrie>:
	...
   21ff8:	00015825 000157ed 00014fc5 00014e15     %X...W...O...N..
   22008:	00014e2d 00014e65                       -N..eN..

00022010 <_ZTV11StrategieV2>:
	...
   22018:	0001657d 0001654d                       }e..Me..

00022020 <_ZTV11StrategieV3>:
	...
   22028:	0001d041 0001d009 00016a55 00014e15     A.......Uj...N..
   22038:	000167ed 00014e65 0001d079 0001d079     .g..eN..y...y...

00022048 <_ZTV5Tapis>:
	...
   22050:	00017229 000171f1 00017081 00014e15     )r...q...p...N..
   22060:	00014e2d 00014e65 70616548 646e6120     -N..eN..Heap and
   22070:	61747320 63206b63 696c6c6f 6e6f6973      stack collision
   22080:	0000000a                                ....

00022084 <cplus_demangle_builtin_types>:
   22084:	00022fd4 0000000b 00022fd4 0000000b     ./......./......
   22094:	00000000 00022fe0 00000004 00022fe8     ...../......./..
   220a4:	00000007 00000007 00022ff0 00000004     ........./......
   220b4:	00022ff8 00000004 00000000 00023000     ./...........0..
   220c4:	00000006 00023000 00000006 00000008     .....0..........
   220d4:	00023008 0000000b 00023008 0000000b     .0.......0......
   220e4:	00000008 00023014 00000005 00023014     .....0.......0..
   220f4:	00000005 00000008 0002301c 0000000a     .........0......
   22104:	0002301c 0000000a 00000008 00023028     .0..........(0..
   22114:	0000000d 00023028 0000000d 00000000     ....(0..........
   22124:	00023038 00000003 00023038 00000003     80......80......
   22134:	00000001 0002303c 0000000c 0002304c     ....<0......L0..
   22144:	00000008 00000002 00000000 00000000     ................
	...
   22160:	00023058 00000004 00023058 00000004     X0......X0......
   22170:	00000003 00023060 0000000d 00023060     ....`0......`0..
   22180:	0000000d 00000004 00023070 00000008     ........p0......
   22190:	00023070 00000008 00000000 0002307c     p0..........|0..
   221a0:	00000011 0002307c 00000011 00000000     ....|0..........
	...
   221ec:	00023090 00000005 00023090 00000005     .0.......0......
   221fc:	00000000 00023098 0000000e 00023098     .....0.......0..
   2220c:	0000000e 00000000 00000000 00000000     ................
	...
   22228:	000230a8 00000004 000230a8 00000004     .0.......0......
   22238:	00000009 000230b0 00000007 00022ff0     .....0......./..
   22248:	00000004 00000000 000230b8 00000009     .........0......
   22258:	00023058 00000004 00000005 000230c4     X0...........0..
   22268:	00000012 000230c4 00000012 00000006     .....0..........
   22278:	000230d8 00000003 000230d8 00000003     .0.......0......
   22288:	00000000                                ....

0002228c <cplus_demangle_operators>:
   2228c:	000230dc 000230e0 00000002 00000002     .0...0..........
   2229c:	000230e4 000230e8 00000001 00000002     .0...0..........
   222ac:	000230ec 00022f78 00000002 00000002     .0..x/..........
   222bc:	000230f0 000230f4 00000001 00000001     .0...0..........
   222cc:	000230f8 000230f4 00000001 00000002     .0...0..........
   222dc:	000230fc 00023100 00000002 00000000     .0...1..........
   222ec:	00023104 00023108 00000001 00000002     .1...1..........
   222fc:	0002310c 00023110 00000001 00000001     .1...1..........
   2230c:	00023114 00023118 00000002 00000002     .1...1..........
   2231c:	0002311c 00023120 00000008 00000001     .1.. 1..........
   2232c:	0002312c 00023130 00000001 00000001     ,1..01..........
   2233c:	00023134 00023138 00000006 00000001     41..81..........
   2234c:	00023140 00023144 00000001 00000002     @1..D1..........
   2235c:	00023148 0002314c 00000002 00000002     H1..L1..........
   2236c:	00023150 00023154 00000001 00000002     P1..T1..........
   2237c:	00023158 0002315c 00000002 00000002     X1..\1..........
   2238c:	00023160 00023164 00000002 00000002     `1..d1..........
   2239c:	00023168 0002331c 00000001 00000002     h1...3..........
   223ac:	0002316c 00022dfc 00000002 00000002     l1...-..........
   223bc:	00023170 00023174 00000003 00000002     p1..t1..........
   223cc:	00023004 00023178 00000002 00000002     .0..x1..........
   223dc:	0002317c 00023180 00000002 00000002     |1...1..........
   223ec:	00023184 00023188 00000001 00000002     .1...1..........
   223fc:	0002318c 00023190 00000002 00000002     .1...1..........
   2240c:	00023194 00023198 00000002 00000002     .1...1..........
   2241c:	0002319c 000231a0 00000001 00000002     .1...1..........
   2242c:	000231a4 00023130 00000001 00000002     .1..01..........
   2243c:	000231a8 000231ac 00000002 00000001     .1...1..........
   2244c:	000231b0 000231b4 00000005 00000001     .1...1..........
   2245c:	000231bc 000231c0 00000002 00000002     .1...1..........
   2246c:	000230d4 000231a0 00000001 00000001     .0...1..........
   2247c:	000231c4 000231c8 00000001 00000001     .1...1..........
   2248c:	000231cc 000231d0 00000003 00000001     .1...1..........
   2249c:	000231d4 000231d8 00000002 00000002     .1...1..........
   224ac:	000231dc 000231e0 00000002 00000002     .1...1..........
   224bc:	00023254 000231e4 00000001 00000002     T2...1..........
   224cc:	000231e8 000231ec 00000002 00000002     .1...1..........
   224dc:	000231f0 000231f4 00000001 00000002     .1...1..........
   224ec:	000231f8 000231fc 00000003 00000002     .1...1..........
   224fc:	00023200 00023204 00000002 00000001     .2...2..........
   2250c:	00023208 000231f4 00000001 00000001     .2...1..........
   2251c:	0002320c 00023210 00000002 00000002     .2...2..........
   2252c:	00023214 00023218 00000001 00000003     .2...2..........
   2253c:	0002321c 00023220 00000002 00000002     .2.. 2..........
   2254c:	00023224 00023228 00000003 00000002     $2..(2..........
   2255c:	0002322c 00023230 00000001 00000002     ,2..02..........
   2256c:	00023234 00023238 00000002 00000002     42..82..........
   2257c:	00022f74 0002323c 00000007 00000001     t/..<2..........
   2258c:	00023244 0002323c 00000007 00000001     D2..<2..........
	...

000225ac <standard_subs>:
   225ac:	00000074 00022dec 00000003 00022dec     t....-.......-..
   225bc:	00000003 00000000 00000000 00000061     ............a...
   225cc:	00023248 0000000e 00023248 0000000e     H2......H2......
   225dc:	00023258 00000009 00000062 00023264     X2......b...d2..
   225ec:	00000011 00023264 00000011 00023278     ....d2......x2..
   225fc:	0000000c 00000073 00023288 0000000b     ....s....2......
   2260c:	00023294 00000046 00023278 0000000c     .2..F...x2......
   2261c:	00000069 000232dc 0000000c 000232ec     i....2.......2..
   2262c:	00000031 00023320 0000000d 0000006f     1... 3......o...
   2263c:	00023330 0000000c 00023340 00000031     03......@3..1...
   2264c:	00023374 0000000d 00000064 00023384     t3......d....3..
   2265c:	0000000d 00023394 00000032 000233c8     .....3..2....3..
   2266c:	0000000e                                ....

00022670 <_ZTV6vectorIN6Sensor12OutputSensorEE>:
	...
   22678:	0001c785 0001c745                       ....E...

00022680 <_ZTV6vectorIN17LimitSwitchSensor15LimitSwitchNameEE>:
	...
   22688:	0001c805 0001c7c5                       ........

00022690 <_ZTV6vectorIN18LigthBarrierSensor16LigthBarrierNameEE>:
	...
   22698:	0001c885 0001c845 65727570 72697620     ....E...pure vir
   226a8:	6c617574 74656d20 20646f68 6c6c6163     tual method call
   226b8:	000a6465 3a647473 6461623a 7079745f     ed..std::bad_typ
   226c8:	00646965 00000000                       eid.....

000226d0 <_ZTVSt10bad_typeid>:
   226d0:	00000000 000226f8 0001dbd9 0001dc01     .....&..........
   226e0:	0001dbd1 00000000                       ........

000226e8 <_ZTSSt10bad_typeid>:
   226e8:	30317453 5f646162 65707974 00006469     St10bad_typeid..

000226f8 <_ZTISt10bad_typeid>:
   226f8:	000227e0 000226e8 00022d14 6d726574     .'...&...-..term
   22708:	74616e69 61632065 64656c6c 63657220     inate called rec
   22718:	69737275 796c6576 0000000a 6d726574     ursively....term
   22728:	74616e69 61632065 64656c6c 74666120     inate called aft
   22738:	74207265 776f7268 20676e69 69206e61     er throwing an i
   22748:	6174736e 2065636e 2720666f 00000000     nstance of '....
   22758:	00000a27 68772020 29287461 0020203a     '...  what():  .
   22768:	6d726574 74616e69 61632065 64656c6c     terminate called
   22778:	74697720 74756f68 206e6120 69746361      without an acti
   22788:	65206576 70656378 6e6f6974 0000000a     ve exception....
   22798:	3a647473 6461623a 7361635f 00000074     std::bad_cast...

000227a8 <_ZTVSt8bad_cast>:
   227a8:	00000000 000227cc 0001dfd5 0001dffd     .....'..........
   227b8:	0001dfcd 00000000                       ........

000227c0 <_ZTSSt8bad_cast>:
   227c0:	62387453 635f6461 00747361              St8bad_cast.

000227cc <_ZTISt8bad_cast>:
   227cc:	000227e0 000227c0 00022d14              .'...'...-..

000227d8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   227d8:	00000000 00022830 0001e10d 0001e135     ....0(......5...
   227e8:	0001e391 0001e395 0001e2f9 0001e255     ............U...
   227f8:	0001e019 0001e041 0001e0d5 00000000     ....A...........

00022808 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   22808:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   22818:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   22828:	456f666e 00000000                       nfoE....

00022830 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   22830:	000227e0 00022808 00022d74 00000000     .'...(..t-......

00022840 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   22840:	00000000 00022b30 0001e151 0001e179     ....0+..Q...y...
   22850:	0001e391 0001e395 0001e399 0001e3a9     ................

00022860 <_ZTIPKe>:
   22860:	000233e0 00022b3c 00000001 00022880     .3..<+.......(..

00022870 <_ZTIPe>:
   22870:	000233e0 00022b40 00000000 00022880     .3..@+.......(..

00022880 <_ZTIe>:
   22880:	00022848 00022b44                       H(..D+..

00022888 <_ZTIPKd>:
   22888:	000233e0 00022b48 00000001 000228a8     .3..H+.......(..

00022898 <_ZTIPd>:
   22898:	000233e0 00022b4c 00000000 000228a8     .3..L+.......(..

000228a8 <_ZTId>:
   228a8:	00022848 00022b50                       H(..P+..

000228b0 <_ZTIPKf>:
   228b0:	000233e0 00022b54 00000001 000228d0     .3..T+.......(..

000228c0 <_ZTIPf>:
   228c0:	000233e0 00022b58 00000000 000228d0     .3..X+.......(..

000228d0 <_ZTIf>:
   228d0:	00022848 00022b5c                       H(..\+..

000228d8 <_ZTIPKy>:
   228d8:	000233e0 00022b60 00000001 000228f8     .3..`+.......(..

000228e8 <_ZTIPy>:
   228e8:	000233e0 00022b64 00000000 000228f8     .3..d+.......(..

000228f8 <_ZTIy>:
   228f8:	00022848 00022b68                       H(..h+..

00022900 <_ZTIPKx>:
   22900:	000233e0 00022b6c 00000001 00022920     .3..l+...... )..

00022910 <_ZTIPx>:
   22910:	000233e0 00022b70 00000000 00022920     .3..p+...... )..

00022920 <_ZTIx>:
   22920:	00022848 00022b74                       H(..t+..

00022928 <_ZTIPKm>:
   22928:	000233e0 00022b78 00000001 00022948     .3..x+......H)..

00022938 <_ZTIPm>:
   22938:	000233e0 00022b7c 00000000 00022948     .3..|+......H)..

00022948 <_ZTIm>:
   22948:	00022848 00022b80                       H(...+..

00022950 <_ZTIPKl>:
   22950:	000233e0 00022b84 00000001 00022970     .3...+......p)..

00022960 <_ZTIPl>:
   22960:	000233e0 00022b88 00000000 00022970     .3...+......p)..

00022970 <_ZTIl>:
   22970:	00022848 00022b8c                       H(...+..

00022978 <_ZTIPKj>:
   22978:	000233e0 00022b90 00000001 00022998     .3...+.......)..

00022988 <_ZTIPj>:
   22988:	000233e0 00022b94 00000000 00022998     .3...+.......)..

00022998 <_ZTIj>:
   22998:	00022848 00022b98                       H(...+..

000229a0 <_ZTIPKi>:
   229a0:	000233e0 00022b9c 00000001 000229c0     .3...+.......)..

000229b0 <_ZTIPi>:
   229b0:	000233e0 00022ba0 00000000 000229c0     .3...+.......)..

000229c0 <_ZTIi>:
   229c0:	00022848 00022ba4                       H(...+..

000229c8 <_ZTIPKt>:
   229c8:	000233e0 00022ba8 00000001 000229e8     .3...+.......)..

000229d8 <_ZTIPt>:
   229d8:	000233e0 00022bac 00000000 000229e8     .3...+.......)..

000229e8 <_ZTIt>:
   229e8:	00022848 00022bb0                       H(...+..

000229f0 <_ZTIPKs>:
   229f0:	000233e0 00022bb4 00000001 00022a10     .3...+.......*..

00022a00 <_ZTIPs>:
   22a00:	000233e0 00022bb8 00000000 00022a10     .3...+.......*..

00022a10 <_ZTIs>:
   22a10:	00022848 00022bbc                       H(...+..

00022a18 <_ZTIPKh>:
   22a18:	000233e0 00022bc0 00000001 00022a38     .3...+......8*..

00022a28 <_ZTIPh>:
   22a28:	000233e0 00022bc4 00000000 00022a38     .3...+......8*..

00022a38 <_ZTIh>:
   22a38:	00022848 00022bc8                       H(...+..

00022a40 <_ZTIPKa>:
   22a40:	000233e0 00022bcc 00000001 00022a60     .3...+......`*..

00022a50 <_ZTIPa>:
   22a50:	000233e0 00022bd0 00000000 00022a60     .3...+......`*..

00022a60 <_ZTIa>:
   22a60:	00022848 00022bd4                       H(...+..

00022a68 <_ZTIPKc>:
   22a68:	000233e0 00022bd8 00000001 00022a88     .3...+.......*..

00022a78 <_ZTIPc>:
   22a78:	000233e0 00022bdc 00000000 00022a88     .3...+.......*..

00022a88 <_ZTIc>:
   22a88:	00022848 00022be0                       H(...+..

00022a90 <_ZTIPKw>:
   22a90:	000233e0 00022be4 00000001 00022ab0     .3...+.......*..

00022aa0 <_ZTIPw>:
   22aa0:	000233e0 00022be8 00000000 00022ab0     .3...+.......*..

00022ab0 <_ZTIw>:
   22ab0:	00022848 00022bec                       H(...+..

00022ab8 <_ZTIPKb>:
   22ab8:	000233e0 00022bf0 00000001 00022ad8     .3...+.......*..

00022ac8 <_ZTIPb>:
   22ac8:	000233e0 00022bf4 00000000 00022ad8     .3...+.......*..

00022ad8 <_ZTIb>:
   22ad8:	00022848 00022bf8                       H(...+..

00022ae0 <_ZTIPKv>:
   22ae0:	000233e0 00022bfc 00000001 00022b00     .3...+.......+..

00022af0 <_ZTIPv>:
   22af0:	000233e0 00022c00 00000000 00022b00     .3...,.......+..

00022b00 <_ZTIv>:
   22b00:	00022848 00022c04                       H(...,..

00022b08 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   22b08:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   22b18:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   22b28:	6e695f65 00456f66                       e_infoE.

00022b30 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   22b30:	000227e0 00022b08 00022db0              .'...+...-..

00022b3c <_ZTSPKe>:
   22b3c:	00654b50                                PKe.

00022b40 <_ZTSPe>:
   22b40:	00006550                                Pe..

00022b44 <_ZTSe>:
   22b44:	00000065                                e...

00022b48 <_ZTSPKd>:
   22b48:	00644b50                                PKd.

00022b4c <_ZTSPd>:
   22b4c:	00006450                                Pd..

00022b50 <_ZTSd>:
   22b50:	00000064                                d...

00022b54 <_ZTSPKf>:
   22b54:	00664b50                                PKf.

00022b58 <_ZTSPf>:
   22b58:	00006650                                Pf..

00022b5c <_ZTSf>:
   22b5c:	00000066                                f...

00022b60 <_ZTSPKy>:
   22b60:	00794b50                                PKy.

00022b64 <_ZTSPy>:
   22b64:	00007950                                Py..

00022b68 <_ZTSy>:
   22b68:	00000079                                y...

00022b6c <_ZTSPKx>:
   22b6c:	00784b50                                PKx.

00022b70 <_ZTSPx>:
   22b70:	00007850                                Px..

00022b74 <_ZTSx>:
   22b74:	00000078                                x...

00022b78 <_ZTSPKm>:
   22b78:	006d4b50                                PKm.

00022b7c <_ZTSPm>:
   22b7c:	00006d50                                Pm..

00022b80 <_ZTSm>:
   22b80:	0000006d                                m...

00022b84 <_ZTSPKl>:
   22b84:	006c4b50                                PKl.

00022b88 <_ZTSPl>:
   22b88:	00006c50                                Pl..

00022b8c <_ZTSl>:
   22b8c:	0000006c                                l...

00022b90 <_ZTSPKj>:
   22b90:	006a4b50                                PKj.

00022b94 <_ZTSPj>:
   22b94:	00006a50                                Pj..

00022b98 <_ZTSj>:
   22b98:	0000006a                                j...

00022b9c <_ZTSPKi>:
   22b9c:	00694b50                                PKi.

00022ba0 <_ZTSPi>:
   22ba0:	00006950                                Pi..

00022ba4 <_ZTSi>:
   22ba4:	00000069                                i...

00022ba8 <_ZTSPKt>:
   22ba8:	00744b50                                PKt.

00022bac <_ZTSPt>:
   22bac:	00007450                                Pt..

00022bb0 <_ZTSt>:
   22bb0:	00000074                                t...

00022bb4 <_ZTSPKs>:
   22bb4:	00734b50                                PKs.

00022bb8 <_ZTSPs>:
   22bb8:	00007350                                Ps..

00022bbc <_ZTSs>:
   22bbc:	00000073                                s...

00022bc0 <_ZTSPKh>:
   22bc0:	00684b50                                PKh.

00022bc4 <_ZTSPh>:
   22bc4:	00006850                                Ph..

00022bc8 <_ZTSh>:
   22bc8:	00000068                                h...

00022bcc <_ZTSPKa>:
   22bcc:	00614b50                                PKa.

00022bd0 <_ZTSPa>:
   22bd0:	00006150                                Pa..

00022bd4 <_ZTSa>:
   22bd4:	00000061                                a...

00022bd8 <_ZTSPKc>:
   22bd8:	00634b50                                PKc.

00022bdc <_ZTSPc>:
   22bdc:	00006350                                Pc..

00022be0 <_ZTSc>:
   22be0:	00000063                                c...

00022be4 <_ZTSPKw>:
   22be4:	00774b50                                PKw.

00022be8 <_ZTSPw>:
   22be8:	00007750                                Pw..

00022bec <_ZTSw>:
   22bec:	00000077                                w...

00022bf0 <_ZTSPKb>:
   22bf0:	00624b50                                PKb.

00022bf4 <_ZTSPb>:
   22bf4:	00006250                                Pb..

00022bf8 <_ZTSb>:
   22bf8:	00000062                                b...

00022bfc <_ZTSPKv>:
   22bfc:	00764b50                                PKv.

00022c00 <_ZTSPv>:
   22c00:	00007650                                Pv..

00022c04 <_ZTSv>:
   22c04:	00000076 3a647473 6378653a 69747065     v...std::excepti
   22c14:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   22c24:	69747065 00006e6f 00000000              eption......

00022c30 <_ZTVN10__cxxabiv119__foreign_exceptionE>:
   22c30:	00000000 00022cb4 0001e1e9 0001e205     .....,..........
   22c40:	0001d079 00000000                       y.......

00022c48 <_ZTVN10__cxxabiv115__forced_unwindE>:
   22c48:	00000000 00022cdc 0001e1d1 0001e219     .....,..........
   22c58:	0001d079 00000000                       y.......

00022c60 <_ZTVSt13bad_exception>:
   22c60:	00000000 00022cf8 0001e1b9 0001e241     .....,......A...
   22c70:	0001e1fd 00000000                       ........

00022c78 <_ZTVSt9exception>:
   22c78:	00000000 00022d14 0001e1a1 0001e22d     .....-......-...
   22c88:	0001e1f5 00000000                       ........

00022c90 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   22c90:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   22ca0:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   22cb0:	00456e6f                                onE.

00022cb4 <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   22cb4:	00022d28 00022c90                       (-...,..

00022cbc <_ZTSN10__cxxabiv115__forced_unwindE>:
   22cbc:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   22ccc:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00022cdc <_ZTIN10__cxxabiv115__forced_unwindE>:
   22cdc:	00022d28 00022cbc                       (-...,..

00022ce4 <_ZTSSt13bad_exception>:
   22ce4:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   22cf4:	0000006e                                n...

00022cf8 <_ZTISt13bad_exception>:
   22cf8:	000227e0 00022ce4 00022d14              .'...,...-..

00022d04 <_ZTSSt9exception>:
   22d04:	65397453 70656378 6e6f6974 00000000     St9exception....

00022d14 <_ZTISt9exception>:
   22d14:	00022d28 00022d04 00000000              (-...-......

00022d20 <_ZTVN10__cxxabiv117__class_type_infoE>:
   22d20:	00000000 00022d74 0001e325 0001e34d     ....t-..%...M...
   22d30:	0001e391 0001e395 0001e2f9 0001e255     ............U...
   22d40:	0001e299 0001e2b9 0001e28d 00000000     ................

00022d50 <_ZTSN10__cxxabiv117__class_type_infoE>:
   22d50:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   22d60:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   22d70:	00000045                                E...

00022d74 <_ZTIN10__cxxabiv117__class_type_infoE>:
   22d74:	000227e0 00022d50 00022db0              .'..P-...-..

00022d80 <_ZTVSt9type_info>:
   22d80:	00000000 00022db0 0001e375 0001e3ad     .....-..u.......
   22d90:	0001e391 0001e395 0001e399 0001e3a9     ................

00022da0 <_ZTSSt9type_info>:
   22da0:	74397453 5f657079 6f666e69 00000000     St9type_info....

00022db0 <_ZTISt9type_info>:
   22db0:	00022d28 00022da0 4f4c475f 5f4c4142     (-...-.._GLOBAL_
   22dc0:	00000000 6f6e6128 6f6d796e 6e207375     ....(anonymous n
   22dd0:	73656d61 65636170 00000029 69727473     amespace)...stri
   22de0:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   22df0:	00003a3a 7272414a 00007961 00005d5b     ::..JArray..[]..
   22e00:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   22e10:	20726f66 00000000 736e6f63 63757274     for ....construc
   22e20:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   22e30:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   22e40:	6f666e69 726f6620 00000020 65707974     info for ...type
   22e50:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   22e60:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   22e70:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   22e80:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   22e90:	6e616972 65722074 6e727574 75687420     riant return thu
   22ea0:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   22eb0:	66207373 0020726f 72617567 61762064     ss for .guard va
   22ec0:	62616972 6620656c 0020726f 65666572     riable for .refe
   22ed0:	636e6572 65742065 726f706d 20797261     rence temporary 
   22ee0:	20726f66 00000000 64646968 61206e65     for ....hidden a
   22ef0:	7361696c 726f6620 00000020 002a3a3a     lias for ...::*.
   22f00:	0000202c 7265706f 726f7461 00000000     , ..operator....
   22f10:	7265706f 726f7461 00000020 00002029     operator ...) ..
   22f20:	00002820 203a2029 00000028 00006c75      (..) : (...ul..
   22f30:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
   22f40:	65757274 00000000 6176616a 73657220     true....java res
   22f50:	6372756f 00002065 73657220 63697274     ource .. restric
   22f60:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   22f70:	6e6f6320 00007473 00002626 706d6f63      const..&&..comp
   22f80:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   22f90:	00002079 626f6c67 64206c61 72747365     y ..global destr
   22fa0:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   22fb0:	00000000 626f6c67 63206c61 74736e6f     ....global const
   22fc0:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   22fd0:	00000020 6e676973 63206465 00726168      ...signed char.
   22fe0:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   22ff0:	72616863 00000000 65747962 00000000     char....byte....
   23000:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   23010:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   23020:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   23030:	61686320 00000072 00746e69 69736e75      char...int.unsi
   23040:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   23050:	64656e67 00000000 676e6f6c 00000000     gned....long....
   23060:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   23070:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   23080:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   23090:	726f6873 00000074 69736e75 64656e67     short...unsigned
   230a0:	6f687320 00007472 64696f76 00000000      short..void....
   230b0:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   230c0:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   230d0:	6f6c2067 0000676e 002e2e2e 00004e61     g long......aN..
   230e0:	00003d26 00005361 0000003d 00006161     &=..aS..=...aa..
   230f0:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
   23100:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   23110:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   23120:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
   23130:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
   23140:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   23150:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   23160:	00006567 00003d3e 00007467 00007869     ge..>=..gt..ix..
   23170:	0000536c 003d3c3c 00003d3c 0000736c     lS..<<=.<=..ls..
   23180:	00003c3c 0000746c 0000003c 0000496d     <<..lt..<...mI..
   23190:	00003d2d 00004c6d 00003d2a 0000696d     -=..mL..*=..mi..
   231a0:	0000002d 00006c6d 00006d6d 00002d2d     -...ml..mm..--..
   231b0:	0000616e 5b77656e 0000005d 0000656e     na..new[]...ne..
   231c0:	00003d21 0000746e 00000021 0000776e     !=..nt..!...nw..
   231d0:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   231e0:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   231f0:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   23200:	00007070 00002b2b 00007370 00007470     pp..++..ps..pt..
   23210:	00003e2d 00007571 0000003f 00004d72     ->..qu..?...rM..
   23220:	00003d25 00005372 003d3e3e 00006d72     %=..rS..>>=.rm..
   23230:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   23240:	0020666f 00007a73 3a647473 6c6c613a     of .sz..std::all
   23250:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   23260:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   23270:	6e697274 00000067 69736162 74735f63     tring...basic_st
   23280:	676e6972 00000000 3a647473 7274733a     ring....std::str
   23290:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   232a0:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   232b0:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   232c0:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   232d0:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   232e0:	7473693a 6d616572 00000000 3a647473     :istream....std:
   232f0:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   23300:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   23310:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   23320:	69736162 73695f63 61657274 0000006d     basic_istream...
   23330:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   23340:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   23350:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   23360:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   23370:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   23380:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   23390:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   233a0:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   233b0:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   233c0:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   233d0:	65727473 00006d61                       stream..

000233d8 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   233d8:	00000000 00023424 0001e5f1 0001e619     ....$4..........
   233e8:	0001e5a9 0001e395 0001e649 0001e3a9     ........I.......
   233f8:	0001e5ad 00000000                       ........

00023400 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   23400:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23410:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   23420:	00456f66                                foE.

00023424 <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   23424:	000227e0 00023400 0002347c              .'...4..|4..

00023430 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   23430:	00000000 0002347c 0001e6a9 0001e6d1     ....|4..........
   23440:	0001e391 0001e395 0001e649 0001e3a9     ........I.......
   23450:	0001e635 00000000                       5.......

00023458 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   23458:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   23468:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   23478:	00000045                                E...

0002347c <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   2347c:	000227e0 00023458 00022db0 74727173     .'..X4...-..sqrt
   2348c:	00000000                                ....

00023490 <npio2_hw>:
   23490:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   234a0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   234b0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   234c0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   234d0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   234e0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   234f0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   23500:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00023510 <two_over_pi>:
   23510:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   23520:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   23530:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   23540:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   23550:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   23560:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   23570:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   23580:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   23590:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   235a0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   235b0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   235c0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   235d0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   235e0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   235f0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   23600:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   23610:	0060e27b 00c08c6b                       {.`.k...

00023618 <init_jk>:
   23618:	00000002 00000003 00000004 00000006     ................

00023628 <PIo2>:
   23628:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   23638:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   23648:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   23658:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00023668 <atanhi>:
   23668:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   23678:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00023688 <atanlo>:
   23688:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   23698:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

000236a8 <_global_impure_ptr>:
   236a8:	20000048 00000043                       H.. C...

000236b0 <__sf_fake_stdin>:
	...

000236d0 <__sf_fake_stdout>:
	...

000236f0 <__sf_fake_stderr>:
	...
