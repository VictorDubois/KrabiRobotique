
main107.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 dd c6 01 00 1d c7 01 00 1d c7 01 00     ... ............
      10:	1d c7 01 00 1d c7 01 00 1d c7 01 00 00 00 00 00     ................
	...
      2c:	1d c7 01 00 1d c7 01 00 00 00 00 00 1d c7 01 00     ................
      3c:	31 7f 00 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     1...............
      4c:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      5c:	1d c7 01 00 1d c7 01 00 a1 dc 00 00 1d c7 01 00     ................
      6c:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      7c:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      8c:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      9c:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      ac:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      bc:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      cc:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
      dc:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
	...
     108:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
     118:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
     128:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
     138:	1d c7 01 00 1d c7 01 00 1d c7 01 00 1d c7 01 00     ................
     148:	1d c7 01 00 1d c7 01 00 00 00 00 00 00 00 00 00     ................
	...
     1e0:	5f f8 e0 f1 40 40 02 00 00 00 00 20 34 00 00 20     _...@@..... 4.. 
     1f0:	48 05 00 20 88 06 00 20                             H.. ... 

000001f8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
     1f8:	b480      	push	{r7}
     1fa:	b083      	sub	sp, #12
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
     200:	4a05      	ldr	r2, [pc, #20]	(218 <NVIC_PriorityGroupConfig+0x20>)
     202:	687b      	ldr	r3, [r7, #4]
     204:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
     208:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     20c:	60d3      	str	r3, [r2, #12]
}
     20e:	f107 070c 	add.w	r7, r7, #12	; 0xc
     212:	46bd      	mov	sp, r7
     214:	bc80      	pop	{r7}
     216:	4770      	bx	lr
     218:	e000ed00 	.word	0xe000ed00

0000021c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     21c:	b480      	push	{r7}
     21e:	b087      	sub	sp, #28
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
     224:	f04f 0300 	mov.w	r3, #0	; 0x0
     228:	60fb      	str	r3, [r7, #12]
     22a:	f04f 0300 	mov.w	r3, #0	; 0x0
     22e:	613b      	str	r3, [r7, #16]
     230:	f04f 030f 	mov.w	r3, #15	; 0xf
     234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     236:	687b      	ldr	r3, [r7, #4]
     238:	78db      	ldrb	r3, [r3, #3]
     23a:	2b00      	cmp	r3, #0
     23c:	d041      	beq.n	2c2 <NVIC_Init+0xa6>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
     23e:	4b2d      	ldr	r3, [pc, #180]	(2f4 <NVIC_Init+0xd8>)
     240:	68db      	ldr	r3, [r3, #12]
     242:	ea6f 0303 	mvn.w	r3, r3
     246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     24a:	ea4f 2313 	mov.w	r3, r3, lsr #8
     24e:	60fb      	str	r3, [r7, #12]
    tmppre = (0x4 - tmppriority);
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f1c3 0304 	rsb	r3, r3, #4	; 0x4
     256:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	697b      	ldr	r3, [r7, #20]
     25c:	fa23 f302 	lsr.w	r3, r3, r2
     260:	617b      	str	r3, [r7, #20]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     262:	687b      	ldr	r3, [r7, #4]
     264:	785b      	ldrb	r3, [r3, #1]
     266:	461a      	mov	r2, r3
     268:	693b      	ldr	r3, [r7, #16]
     26a:	fa02 f303 	lsl.w	r3, r2, r3
     26e:	60fb      	str	r3, [r7, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     270:	687b      	ldr	r3, [r7, #4]
     272:	789b      	ldrb	r3, [r3, #2]
     274:	461a      	mov	r2, r3
     276:	697b      	ldr	r3, [r7, #20]
     278:	ea02 0203 	and.w	r2, r2, r3
     27c:	68fb      	ldr	r3, [r7, #12]
     27e:	ea43 0302 	orr.w	r3, r3, r2
     282:	60fb      	str	r3, [r7, #12]
    tmppriority = tmppriority << 0x04;
     284:	68fb      	ldr	r3, [r7, #12]
     286:	ea4f 1303 	mov.w	r3, r3, lsl #4
     28a:	60fb      	str	r3, [r7, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     28c:	491a      	ldr	r1, [pc, #104]	(2f8 <NVIC_Init+0xdc>)
     28e:	687b      	ldr	r3, [r7, #4]
     290:	781b      	ldrb	r3, [r3, #0]
     292:	461a      	mov	r2, r3
     294:	68fb      	ldr	r3, [r7, #12]
     296:	b2db      	uxtb	r3, r3
     298:	440a      	add	r2, r1
     29a:	f882 3300 	strb.w	r3, [r2, #768]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     29e:	4816      	ldr	r0, [pc, #88]	(2f8 <NVIC_Init+0xdc>)
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2a8:	b2db      	uxtb	r3, r3
     2aa:	4619      	mov	r1, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2b4:	f04f 0301 	mov.w	r3, #1	; 0x1
     2b8:	fa03 f302 	lsl.w	r3, r3, r2
     2bc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     2c0:	e012      	b.n	2e8 <NVIC_Init+0xcc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     2c2:	480d      	ldr	r0, [pc, #52]	(2f8 <NVIC_Init+0xdc>)
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2cc:	b2db      	uxtb	r3, r3
     2ce:	4619      	mov	r1, r3
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2d8:	f04f 0301 	mov.w	r3, #1	; 0x1
     2dc:	fa03 f202 	lsl.w	r2, r3, r2
     2e0:	f101 0320 	add.w	r3, r1, #32	; 0x20
     2e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     2e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     2ec:	46bd      	mov	sp, r7
     2ee:	bc80      	pop	{r7}
     2f0:	4770      	bx	lr
     2f2:	46c0      	nop			(mov r8, r8)
     2f4:	e000ed00 	.word	0xe000ed00
     2f8:	e000e100 	.word	0xe000e100

000002fc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
     306:	4907      	ldr	r1, [pc, #28]	(324 <NVIC_SetVectorTable+0x28>)
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     30e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     312:	687a      	ldr	r2, [r7, #4]
     314:	ea43 0302 	orr.w	r3, r3, r2
     318:	608b      	str	r3, [r1, #8]
}
     31a:	f107 070c 	add.w	r7, r7, #12	; 0xc
     31e:	46bd      	mov	sp, r7
     320:	bc80      	pop	{r7}
     322:	4770      	bx	lr
     324:	e000ed00 	.word	0xe000ed00

00000328 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
     328:	b480      	push	{r7}
     32a:	b083      	sub	sp, #12
     32c:	af00      	add	r7, sp, #0
     32e:	4603      	mov	r3, r0
     330:	460a      	mov	r2, r1
     332:	71fb      	strb	r3, [r7, #7]
     334:	4613      	mov	r3, r2
     336:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
     338:	79bb      	ldrb	r3, [r7, #6]
     33a:	2b00      	cmp	r3, #0
     33c:	d007      	beq.n	34e <NVIC_SystemLPConfig+0x26>
  {
    SCB->SCR |= LowPowerMode;
     33e:	490b      	ldr	r1, [pc, #44]	(36c <NVIC_SystemLPConfig+0x44>)
     340:	4b0a      	ldr	r3, [pc, #40]	(36c <NVIC_SystemLPConfig+0x44>)
     342:	691a      	ldr	r2, [r3, #16]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	ea42 0303 	orr.w	r3, r2, r3
     34a:	610b      	str	r3, [r1, #16]
     34c:	e008      	b.n	360 <NVIC_SystemLPConfig+0x38>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
     34e:	4907      	ldr	r1, [pc, #28]	(36c <NVIC_SystemLPConfig+0x44>)
     350:	4b06      	ldr	r3, [pc, #24]	(36c <NVIC_SystemLPConfig+0x44>)
     352:	691a      	ldr	r2, [r3, #16]
     354:	79fb      	ldrb	r3, [r7, #7]
     356:	ea6f 0303 	mvn.w	r3, r3
     35a:	ea02 0303 	and.w	r3, r2, r3
     35e:	610b      	str	r3, [r1, #16]
  }
}
     360:	f107 070c 	add.w	r7, r7, #12	; 0xc
     364:	46bd      	mov	sp, r7
     366:	bc80      	pop	{r7}
     368:	4770      	bx	lr
     36a:	46c0      	nop			(mov r8, r8)
     36c:	e000ed00 	.word	0xe000ed00

00000370 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
     370:	b480      	push	{r7}
     372:	b083      	sub	sp, #12
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
     378:	687b      	ldr	r3, [r7, #4]
     37a:	2b04      	cmp	r3, #4
     37c:	d106      	bne.n	38c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
     37e:	4a09      	ldr	r2, [pc, #36]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     380:	4b08      	ldr	r3, [pc, #32]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f043 0304 	orr.w	r3, r3, #4	; 0x4
     388:	6013      	str	r3, [r2, #0]
     38a:	e005      	b.n	398 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
     38c:	4a05      	ldr	r2, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     38e:	4b05      	ldr	r3, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	f023 0304 	bic.w	r3, r3, #4	; 0x4
     396:	6013      	str	r3, [r2, #0]
  }
}
     398:	f107 070c 	add.w	r7, r7, #12	; 0xc
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	46c0      	nop			(mov r8, r8)
     3a4:	e000e010 	.word	0xe000e010

000003a8 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
     3b0:	687a      	ldr	r2, [r7, #4]
     3b2:	4b1a      	ldr	r3, [pc, #104]	(41c <ADC_DeInit+0x74>)
     3b4:	429a      	cmp	r2, r3
     3b6:	d10c      	bne.n	3d2 <ADC_DeInit+0x2a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
     3b8:	f44f 7000 	mov.w	r0, #512	; 0x200
     3bc:	f04f 0101 	mov.w	r1, #1	; 0x1
     3c0:	f002 f8a8 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
     3c4:	f44f 7000 	mov.w	r0, #512	; 0x200
     3c8:	f04f 0100 	mov.w	r1, #0	; 0x0
     3cc:	f002 f8a2 	bl	2514 <RCC_APB2PeriphResetCmd>
     3d0:	e020      	b.n	414 <ADC_DeInit+0x6c>
  }
  else if (ADCx == ADC2)
     3d2:	687a      	ldr	r2, [r7, #4]
     3d4:	4b12      	ldr	r3, [pc, #72]	(420 <ADC_DeInit+0x78>)
     3d6:	429a      	cmp	r2, r3
     3d8:	d10c      	bne.n	3f4 <ADC_DeInit+0x4c>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
     3da:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3de:	f04f 0101 	mov.w	r1, #1	; 0x1
     3e2:	f002 f897 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
     3e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3ea:	f04f 0100 	mov.w	r1, #0	; 0x0
     3ee:	f002 f891 	bl	2514 <RCC_APB2PeriphResetCmd>
     3f2:	e00f      	b.n	414 <ADC_DeInit+0x6c>
  }
  else
  {
    if (ADCx == ADC3)
     3f4:	687a      	ldr	r2, [r7, #4]
     3f6:	4b0b      	ldr	r3, [pc, #44]	(424 <ADC_DeInit+0x7c>)
     3f8:	429a      	cmp	r2, r3
     3fa:	d10b      	bne.n	414 <ADC_DeInit+0x6c>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
     3fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     400:	f04f 0101 	mov.w	r1, #1	; 0x1
     404:	f002 f886 	bl	2514 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
     408:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     40c:	f04f 0100 	mov.w	r1, #0	; 0x0
     410:	f002 f880 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
     414:	f107 0708 	add.w	r7, r7, #8	; 0x8
     418:	46bd      	mov	sp, r7
     41a:	bd80      	pop	{r7, pc}
     41c:	40012400 	.word	0x40012400
     420:	40012800 	.word	0x40012800
     424:	40013c00 	.word	0x40013c00

00000428 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *   the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
     432:	f04f 0300 	mov.w	r3, #0	; 0x0
     436:	60bb      	str	r3, [r7, #8]
  uint8_t tmpreg2 = 0;
     438:	f04f 0300 	mov.w	r3, #0	; 0x0
     43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
     43e:	687b      	ldr	r3, [r7, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	60bb      	str	r3, [r7, #8]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
     444:	68bb      	ldr	r3, [r7, #8]
     446:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     44a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     44e:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     450:	683b      	ldr	r3, [r7, #0]
     452:	681a      	ldr	r2, [r3, #0]
     454:	683b      	ldr	r3, [r7, #0]
     456:	791b      	ldrb	r3, [r3, #4]
     458:	ea4f 2303 	mov.w	r3, r3, lsl #8
     45c:	ea42 0203 	orr.w	r2, r2, r3
     460:	68bb      	ldr	r3, [r7, #8]
     462:	ea43 0302 	orr.w	r3, r3, r2
     466:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
     468:	687a      	ldr	r2, [r7, #4]
     46a:	68bb      	ldr	r3, [r7, #8]
     46c:	6053      	str	r3, [r2, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	689b      	ldr	r3, [r3, #8]
     472:	60bb      	str	r3, [r7, #8]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
     474:	68ba      	ldr	r2, [r7, #8]
     476:	4b1b      	ldr	r3, [pc, #108]	(4e4 <ADC_Init+0xbc>)
     478:	ea02 0303 	and.w	r3, r2, r3
     47c:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     47e:	683b      	ldr	r3, [r7, #0]
     480:	68da      	ldr	r2, [r3, #12]
     482:	683b      	ldr	r3, [r7, #0]
     484:	689b      	ldr	r3, [r3, #8]
     486:	ea42 0203 	orr.w	r2, r2, r3
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	795b      	ldrb	r3, [r3, #5]
     48e:	ea4f 0343 	mov.w	r3, r3, lsl #1
     492:	ea42 0203 	orr.w	r2, r2, r3
     496:	68bb      	ldr	r3, [r7, #8]
     498:	ea43 0302 	orr.w	r3, r3, r2
     49c:	60bb      	str	r3, [r7, #8]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
     49e:	687a      	ldr	r2, [r7, #4]
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	6adb      	ldr	r3, [r3, #44]
     4a8:	60bb      	str	r3, [r7, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
     4aa:	68bb      	ldr	r3, [r7, #8]
     4ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
     4b0:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	7c1b      	ldrb	r3, [r3, #16]
     4b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     4ba:	b2da      	uxtb	r2, r3
     4bc:	7bfb      	ldrb	r3, [r7, #15]
     4be:	ea42 0303 	orr.w	r3, r2, r3
     4c2:	73fb      	strb	r3, [r7, #15]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
     4c4:	7bfb      	ldrb	r3, [r7, #15]
     4c6:	ea4f 5203 	mov.w	r2, r3, lsl #20
     4ca:	68bb      	ldr	r3, [r7, #8]
     4cc:	ea43 0302 	orr.w	r3, r3, r2
     4d0:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	68bb      	ldr	r3, [r7, #8]
     4d6:	62d3      	str	r3, [r2, #44]
}
     4d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
     4dc:	46bd      	mov	sp, r7
     4de:	bc80      	pop	{r7}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			(mov r8, r8)
     4e4:	fff1f7fd 	.word	0xfff1f7fd

000004e8 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     4f6:	6013      	str	r3, [r2, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
     4fe:	7113      	strb	r3, [r2, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
     500:	687a      	ldr	r2, [r7, #4]
     502:	f04f 0300 	mov.w	r3, #0	; 0x0
     506:	7153      	strb	r3, [r2, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
     508:	687a      	ldr	r2, [r7, #4]
     50a:	f04f 0300 	mov.w	r3, #0	; 0x0
     50e:	6093      	str	r3, [r2, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
     510:	687a      	ldr	r2, [r7, #4]
     512:	f04f 0300 	mov.w	r3, #0	; 0x0
     516:	60d3      	str	r3, [r2, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
     518:	687a      	ldr	r2, [r7, #4]
     51a:	f04f 0301 	mov.w	r3, #1	; 0x1
     51e:	7413      	strb	r3, [r2, #16]
}
     520:	f107 070c 	add.w	r7, r7, #12	; 0xc
     524:	46bd      	mov	sp, r7
     526:	bc80      	pop	{r7}
     528:	4770      	bx	lr
     52a:	46c0      	nop			(mov r8, r8)

0000052c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
     534:	460b      	mov	r3, r1
     536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     538:	78fb      	ldrb	r3, [r7, #3]
     53a:	2b00      	cmp	r3, #0
     53c:	d006      	beq.n	54c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	689b      	ldr	r3, [r3, #8]
     542:	f043 0201 	orr.w	r2, r3, #1	; 0x1
     546:	687b      	ldr	r3, [r7, #4]
     548:	609a      	str	r2, [r3, #8]
     54a:	e005      	b.n	558 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     554:	687b      	ldr	r3, [r7, #4]
     556:	609a      	str	r2, [r3, #8]
  }
}
     558:	f107 070c 	add.w	r7, r7, #12	; 0xc
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	46c0      	nop			(mov r8, r8)

00000564 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	460b      	mov	r3, r1
     56e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     570:	78fb      	ldrb	r3, [r7, #3]
     572:	2b00      	cmp	r3, #0
     574:	d006      	beq.n	584 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
     576:	687b      	ldr	r3, [r7, #4]
     578:	689b      	ldr	r3, [r3, #8]
     57a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     57e:	687b      	ldr	r3, [r7, #4]
     580:	609a      	str	r2, [r3, #8]
     582:	e005      	b.n	590 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
     584:	687b      	ldr	r3, [r7, #4]
     586:	689b      	ldr	r3, [r3, #8]
     588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	609a      	str	r2, [r3, #8]
  }
}
     590:	f107 070c 	add.w	r7, r7, #12	; 0xc
     594:	46bd      	mov	sp, r7
     596:	bc80      	pop	{r7}
     598:	4770      	bx	lr
     59a:	46c0      	nop			(mov r8, r8)

0000059c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
     59c:	b480      	push	{r7}
     59e:	b085      	sub	sp, #20
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
     5a4:	460b      	mov	r3, r1
     5a6:	807b      	strh	r3, [r7, #2]
     5a8:	4613      	mov	r3, r2
     5aa:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
     5ac:	f04f 0300 	mov.w	r3, #0	; 0x0
     5b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
     5b2:	887b      	ldrh	r3, [r7, #2]
     5b4:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
     5b6:	787b      	ldrb	r3, [r7, #1]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d007      	beq.n	5cc <ADC_ITConfig+0x30>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	7bfb      	ldrb	r3, [r7, #15]
     5c2:	ea42 0203 	orr.w	r2, r2, r3
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	e008      	b.n	5de <ADC_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	685a      	ldr	r2, [r3, #4]
     5d0:	7bfb      	ldrb	r3, [r7, #15]
     5d2:	ea6f 0303 	mvn.w	r3, r3
     5d6:	ea02 0203 	and.w	r2, r2, r3
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	605a      	str	r2, [r3, #4]
  }
}
     5de:	f107 0714 	add.w	r7, r7, #20	; 0x14
     5e2:	46bd      	mov	sp, r7
     5e4:	bc80      	pop	{r7}
     5e6:	4770      	bx	lr

000005e8 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	689b      	ldr	r3, [r3, #8]
     5f4:	f043 0208 	orr.w	r2, r3, #8	; 0x8
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	609a      	str	r2, [r3, #8]
}
     5fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
     600:	46bd      	mov	sp, r7
     602:	bc80      	pop	{r7}
     604:	4770      	bx	lr
     606:	46c0      	nop			(mov r8, r8)

00000608 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
     608:	b480      	push	{r7}
     60a:	b085      	sub	sp, #20
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     610:	f04f 0300 	mov.w	r3, #0	; 0x0
     614:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
     616:	687b      	ldr	r3, [r7, #4]
     618:	689b      	ldr	r3, [r3, #8]
     61a:	f003 0308 	and.w	r3, r3, #8	; 0x8
     61e:	2b00      	cmp	r3, #0
     620:	d003      	beq.n	62a <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
     622:	f04f 0301 	mov.w	r3, #1	; 0x1
     626:	73fb      	strb	r3, [r7, #15]
     628:	e002      	b.n	630 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
     62a:	f04f 0300 	mov.w	r3, #0	; 0x0
     62e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
     630:	7bfb      	ldrb	r3, [r7, #15]
}
     632:	4618      	mov	r0, r3
     634:	f107 0714 	add.w	r7, r7, #20	; 0x14
     638:	46bd      	mov	sp, r7
     63a:	bc80      	pop	{r7}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			(mov r8, r8)

00000640 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	689b      	ldr	r3, [r3, #8]
     64c:	f043 0204 	orr.w	r2, r3, #4	; 0x4
     650:	687b      	ldr	r3, [r7, #4]
     652:	609a      	str	r2, [r3, #8]
}
     654:	f107 070c 	add.w	r7, r7, #12	; 0xc
     658:	46bd      	mov	sp, r7
     65a:	bc80      	pop	{r7}
     65c:	4770      	bx	lr
     65e:	46c0      	nop			(mov r8, r8)

00000660 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
     660:	b480      	push	{r7}
     662:	b085      	sub	sp, #20
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     668:	f04f 0300 	mov.w	r3, #0	; 0x0
     66c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
     66e:	687b      	ldr	r3, [r7, #4]
     670:	689b      	ldr	r3, [r3, #8]
     672:	f003 0304 	and.w	r3, r3, #4	; 0x4
     676:	2b00      	cmp	r3, #0
     678:	d003      	beq.n	682 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
     67a:	f04f 0301 	mov.w	r3, #1	; 0x1
     67e:	73fb      	strb	r3, [r7, #15]
     680:	e002      	b.n	688 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
     682:	f04f 0300 	mov.w	r3, #0	; 0x0
     686:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
     688:	7bfb      	ldrb	r3, [r7, #15]
}
     68a:	4618      	mov	r0, r3
     68c:	f107 0714 	add.w	r7, r7, #20	; 0x14
     690:	46bd      	mov	sp, r7
     692:	bc80      	pop	{r7}
     694:	4770      	bx	lr
     696:	46c0      	nop			(mov r8, r8)

00000698 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	460b      	mov	r3, r1
     6a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     6a4:	78fb      	ldrb	r3, [r7, #3]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d006      	beq.n	6b8 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	689b      	ldr	r3, [r3, #8]
     6ae:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	609a      	str	r2, [r3, #8]
     6b6:	e005      	b.n	6c4 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	689b      	ldr	r3, [r3, #8]
     6bc:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	609a      	str	r2, [r3, #8]
  }
}
     6c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
     6c8:	46bd      	mov	sp, r7
     6ca:	bc80      	pop	{r7}
     6cc:	4770      	bx	lr
     6ce:	46c0      	nop			(mov r8, r8)

000006d0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
     6d0:	b480      	push	{r7}
     6d2:	b085      	sub	sp, #20
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     6d8:	f04f 0300 	mov.w	r3, #0	; 0x0
     6dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	689b      	ldr	r3, [r3, #8]
     6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     6e6:	2b00      	cmp	r3, #0
     6e8:	d003      	beq.n	6f2 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
     6ea:	f04f 0301 	mov.w	r3, #1	; 0x1
     6ee:	73fb      	strb	r3, [r7, #15]
     6f0:	e002      	b.n	6f8 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
     6f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     6f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
     6f8:	7bfb      	ldrb	r3, [r7, #15]
}
     6fa:	4618      	mov	r0, r3
     6fc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     700:	46bd      	mov	sp, r7
     702:	bc80      	pop	{r7}
     704:	4770      	bx	lr
     706:	46c0      	nop			(mov r8, r8)

00000708 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *   count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
     708:	b480      	push	{r7}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	460b      	mov	r3, r1
     712:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     714:	f04f 0300 	mov.w	r3, #0	; 0x0
     718:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     71a:	f04f 0300 	mov.w	r3, #0	; 0x0
     71e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
     720:	687b      	ldr	r3, [r7, #4]
     722:	685b      	ldr	r3, [r3, #4]
     724:	60bb      	str	r3, [r7, #8]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
     726:	68bb      	ldr	r3, [r7, #8]
     728:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
     72c:	60bb      	str	r3, [r7, #8]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
     72e:	78fb      	ldrb	r3, [r7, #3]
     730:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     734:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 13;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	ea4f 3243 	mov.w	r2, r3, lsl #13
     73c:	68bb      	ldr	r3, [r7, #8]
     73e:	ea43 0302 	orr.w	r3, r3, r2
     742:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
     744:	687a      	ldr	r2, [r7, #4]
     746:	68bb      	ldr	r3, [r7, #8]
     748:	6053      	str	r3, [r2, #4]
}
     74a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     74e:	46bd      	mov	sp, r7
     750:	bc80      	pop	{r7}
     752:	4770      	bx	lr

00000754 <ADC_DiscModeCmd>:
  *   on regular group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     754:	b480      	push	{r7}
     756:	b083      	sub	sp, #12
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]
     75c:	460b      	mov	r3, r1
     75e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     760:	78fb      	ldrb	r3, [r7, #3]
     762:	2b00      	cmp	r3, #0
     764:	d006      	beq.n	774 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
     766:	687b      	ldr	r3, [r7, #4]
     768:	685b      	ldr	r3, [r3, #4]
     76a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     76e:	687b      	ldr	r3, [r7, #4]
     770:	605a      	str	r2, [r3, #4]
     772:	e005      	b.n	780 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
     774:	687b      	ldr	r3, [r7, #4]
     776:	685b      	ldr	r3, [r3, #4]
     778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	605a      	str	r2, [r3, #4]
  }
}
     780:	f107 070c 	add.w	r7, r7, #12	; 0xc
     784:	46bd      	mov	sp, r7
     786:	bc80      	pop	{r7}
     788:	4770      	bx	lr
     78a:	46c0      	nop			(mov r8, r8)

0000078c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     78c:	b480      	push	{r7}
     78e:	b085      	sub	sp, #20
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	4618      	mov	r0, r3
     796:	460b      	mov	r3, r1
     798:	70fb      	strb	r3, [r7, #3]
     79a:	4613      	mov	r3, r2
     79c:	70bb      	strb	r3, [r7, #2]
     79e:	4603      	mov	r3, r0
     7a0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
     7a2:	f04f 0300 	mov.w	r3, #0	; 0x0
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	f04f 0300 	mov.w	r3, #0	; 0x0
     7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     7ae:	78fb      	ldrb	r3, [r7, #3]
     7b0:	2b09      	cmp	r3, #9
     7b2:	d929      	bls.n	808 <ADC_RegularChannelConfig+0x7c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	68db      	ldr	r3, [r3, #12]
     7b8:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
     7ba:	78fa      	ldrb	r2, [r7, #3]
     7bc:	4613      	mov	r3, r2
     7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7c2:	4413      	add	r3, r2
     7c4:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     7c8:	f04f 0307 	mov.w	r3, #7	; 0x7
     7cc:	fa03 f302 	lsl.w	r3, r3, r2
     7d0:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	ea6f 0203 	mvn.w	r2, r3
     7d8:	68bb      	ldr	r3, [r7, #8]
     7da:	ea03 0302 	and.w	r3, r3, r2
     7de:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     7e0:	7879      	ldrb	r1, [r7, #1]
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	4613      	mov	r3, r2
     7e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7ea:	4413      	add	r3, r2
     7ec:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     7f0:	fa01 f303 	lsl.w	r3, r1, r3
     7f4:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     7f6:	68ba      	ldr	r2, [r7, #8]
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	ea42 0303 	orr.w	r3, r2, r3
     7fe:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     800:	687a      	ldr	r2, [r7, #4]
     802:	68bb      	ldr	r3, [r7, #8]
     804:	60d3      	str	r3, [r2, #12]
     806:	e024      	b.n	852 <ADC_RegularChannelConfig+0xc6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	691b      	ldr	r3, [r3, #16]
     80c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     80e:	78fa      	ldrb	r2, [r7, #3]
     810:	4613      	mov	r3, r2
     812:	ea4f 0343 	mov.w	r3, r3, lsl #1
     816:	441a      	add	r2, r3
     818:	f04f 0307 	mov.w	r3, #7	; 0x7
     81c:	fa03 f302 	lsl.w	r3, r3, r2
     820:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	ea6f 0203 	mvn.w	r2, r3
     828:	68bb      	ldr	r3, [r7, #8]
     82a:	ea03 0302 	and.w	r3, r3, r2
     82e:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     830:	7879      	ldrb	r1, [r7, #1]
     832:	78fa      	ldrb	r2, [r7, #3]
     834:	4613      	mov	r3, r2
     836:	ea4f 0343 	mov.w	r3, r3, lsl #1
     83a:	4413      	add	r3, r2
     83c:	fa01 f303 	lsl.w	r3, r1, r3
     840:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     842:	68ba      	ldr	r2, [r7, #8]
     844:	68fb      	ldr	r3, [r7, #12]
     846:	ea42 0303 	orr.w	r3, r2, r3
     84a:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     84c:	687a      	ldr	r2, [r7, #4]
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6113      	str	r3, [r2, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
     852:	78bb      	ldrb	r3, [r7, #2]
     854:	2b06      	cmp	r3, #6
     856:	d829      	bhi.n	8ac <ADC_RegularChannelConfig+0x120>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	6b5b      	ldr	r3, [r3, #52]
     85c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
     85e:	78bb      	ldrb	r3, [r7, #2]
     860:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     864:	4613      	mov	r3, r2
     866:	ea4f 0383 	mov.w	r3, r3, lsl #2
     86a:	441a      	add	r2, r3
     86c:	f04f 031f 	mov.w	r3, #31	; 0x1f
     870:	fa03 f302 	lsl.w	r3, r3, r2
     874:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     876:	68fb      	ldr	r3, [r7, #12]
     878:	ea6f 0203 	mvn.w	r2, r3
     87c:	68bb      	ldr	r3, [r7, #8]
     87e:	ea03 0302 	and.w	r3, r3, r2
     882:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
     884:	78f9      	ldrb	r1, [r7, #3]
     886:	78bb      	ldrb	r3, [r7, #2]
     888:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     88c:	4613      	mov	r3, r2
     88e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     892:	4413      	add	r3, r2
     894:	fa01 f303 	lsl.w	r3, r1, r3
     898:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     89a:	68ba      	ldr	r2, [r7, #8]
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	ea42 0303 	orr.w	r3, r2, r3
     8a2:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	6353      	str	r3, [r2, #52]
     8aa:	e055      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
     8ac:	78bb      	ldrb	r3, [r7, #2]
     8ae:	2b0c      	cmp	r3, #12
     8b0:	d829      	bhi.n	906 <ADC_RegularChannelConfig+0x17a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	6b1b      	ldr	r3, [r3, #48]
     8b6:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
     8b8:	78ba      	ldrb	r2, [r7, #2]
     8ba:	4613      	mov	r3, r2
     8bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8c0:	4413      	add	r3, r2
     8c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
     8c6:	f04f 031f 	mov.w	r3, #31	; 0x1f
     8ca:	fa03 f302 	lsl.w	r3, r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	ea6f 0203 	mvn.w	r2, r3
     8d6:	68bb      	ldr	r3, [r7, #8]
     8d8:	ea03 0302 	and.w	r3, r3, r2
     8dc:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
     8de:	78f9      	ldrb	r1, [r7, #3]
     8e0:	78ba      	ldrb	r2, [r7, #2]
     8e2:	4613      	mov	r3, r2
     8e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8e8:	4413      	add	r3, r2
     8ea:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
     8ee:	fa01 f303 	lsl.w	r3, r1, r3
     8f2:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	ea42 0303 	orr.w	r3, r2, r3
     8fc:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
     8fe:	687a      	ldr	r2, [r7, #4]
     900:	68bb      	ldr	r3, [r7, #8]
     902:	6313      	str	r3, [r2, #48]
     904:	e028      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
     906:	687b      	ldr	r3, [r7, #4]
     908:	6adb      	ldr	r3, [r3, #44]
     90a:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
     90c:	78ba      	ldrb	r2, [r7, #2]
     90e:	4613      	mov	r3, r2
     910:	ea4f 0383 	mov.w	r3, r3, lsl #2
     914:	4413      	add	r3, r2
     916:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     91a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     91e:	fa03 f302 	lsl.w	r3, r3, r2
     922:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     924:	68fb      	ldr	r3, [r7, #12]
     926:	ea6f 0203 	mvn.w	r2, r3
     92a:	68bb      	ldr	r3, [r7, #8]
     92c:	ea03 0302 	and.w	r3, r3, r2
     930:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
     932:	78f9      	ldrb	r1, [r7, #3]
     934:	78ba      	ldrb	r2, [r7, #2]
     936:	4613      	mov	r3, r2
     938:	ea4f 0383 	mov.w	r3, r3, lsl #2
     93c:	4413      	add	r3, r2
     93e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
     942:	fa01 f303 	lsl.w	r3, r1, r3
     946:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     948:	68ba      	ldr	r2, [r7, #8]
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	ea42 0303 	orr.w	r3, r2, r3
     950:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
     952:	687a      	ldr	r2, [r7, #4]
     954:	68bb      	ldr	r3, [r7, #8]
     956:	62d3      	str	r3, [r2, #44]
  }
}
     958:	f107 0714 	add.w	r7, r7, #20	; 0x14
     95c:	46bd      	mov	sp, r7
     95e:	bc80      	pop	{r7}
     960:	4770      	bx	lr
     962:	46c0      	nop			(mov r8, r8)

00000964 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	460b      	mov	r3, r1
     96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     970:	78fb      	ldrb	r3, [r7, #3]
     972:	2b00      	cmp	r3, #0
     974:	d006      	beq.n	984 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
     976:	687b      	ldr	r3, [r7, #4]
     978:	689b      	ldr	r3, [r3, #8]
     97a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
     97e:	687b      	ldr	r3, [r7, #4]
     980:	609a      	str	r2, [r3, #8]
     982:	e005      	b.n	990 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
     984:	687b      	ldr	r3, [r7, #4]
     986:	689b      	ldr	r3, [r3, #8]
     988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	609a      	str	r2, [r3, #8]
  }
}
     990:	f107 070c 	add.w	r7, r7, #12	; 0xc
     994:	46bd      	mov	sp, r7
     996:	bc80      	pop	{r7}
     998:	4770      	bx	lr
     99a:	46c0      	nop			(mov r8, r8)

0000099c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
     99c:	b480      	push	{r7}
     99e:	b083      	sub	sp, #12
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	6cdb      	ldr	r3, [r3, #76]
     9a8:	b29b      	uxth	r3, r3
}
     9aa:	4618      	mov	r0, r3
     9ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9b0:	46bd      	mov	sp, r7
     9b2:	bc80      	pop	{r7}
     9b4:	4770      	bx	lr
     9b6:	46c0      	nop			(mov r8, r8)

000009b8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
     9b8:	b480      	push	{r7}
     9ba:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
     9bc:	4b02      	ldr	r3, [pc, #8]	(9c8 <ADC_GetDualModeConversionValue+0x10>)
     9be:	681b      	ldr	r3, [r3, #0]
}
     9c0:	4618      	mov	r0, r3
     9c2:	46bd      	mov	sp, r7
     9c4:	bc80      	pop	{r7}
     9c6:	4770      	bx	lr
     9c8:	4001244c 	.word	0x4001244c

000009cc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     9cc:	b480      	push	{r7}
     9ce:	b083      	sub	sp, #12
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	460b      	mov	r3, r1
     9d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     9d8:	78fb      	ldrb	r3, [r7, #3]
     9da:	2b00      	cmp	r3, #0
     9dc:	d006      	beq.n	9ec <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	605a      	str	r2, [r3, #4]
     9ea:	e005      	b.n	9f8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	685b      	ldr	r3, [r3, #4]
     9f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	605a      	str	r2, [r3, #4]
  }
}
     9f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9fc:	46bd      	mov	sp, r7
     9fe:	bc80      	pop	{r7}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			(mov r8, r8)

00000a04 <ADC_InjectedDiscModeCmd>:
  *   on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a04:	b480      	push	{r7}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	460b      	mov	r3, r1
     a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a10:	78fb      	ldrb	r3, [r7, #3]
     a12:	2b00      	cmp	r3, #0
     a14:	d006      	beq.n	a24 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	605a      	str	r2, [r3, #4]
     a22:	e005      	b.n	a30 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	605a      	str	r2, [r3, #4]
  }
}
     a30:	f107 070c 	add.w	r7, r7, #12	; 0xc
     a34:	46bd      	mov	sp, r7
     a36:	bc80      	pop	{r7}
     a38:	4770      	bx	lr
     a3a:	46c0      	nop			(mov r8, r8)

00000a3c <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
     a3c:	b480      	push	{r7}
     a3e:	b085      	sub	sp, #20
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     a46:	f04f 0300 	mov.w	r3, #0	; 0x0
     a4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	689b      	ldr	r3, [r3, #8]
     a50:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     a58:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
     a5a:	68fa      	ldr	r2, [r7, #12]
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	ea42 0303 	orr.w	r3, r2, r3
     a62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
     a64:	687a      	ldr	r2, [r7, #4]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	6093      	str	r3, [r2, #8]
}
     a6a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     a6e:	46bd      	mov	sp, r7
     a70:	bc80      	pop	{r7}
     a72:	4770      	bx	lr

00000a74 <ADC_ExternalTrigInjectedConvCmd>:
  *   injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a74:	b480      	push	{r7}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	460b      	mov	r3, r1
     a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a80:	78fb      	ldrb	r3, [r7, #3]
     a82:	2b00      	cmp	r3, #0
     a84:	d006      	beq.n	a94 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	689b      	ldr	r3, [r3, #8]
     a8a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	609a      	str	r2, [r3, #8]
     a92:	e005      	b.n	aa0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	689b      	ldr	r3, [r3, #8]
     a98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	609a      	str	r2, [r3, #8]
  }
}
     aa0:	f107 070c 	add.w	r7, r7, #12	; 0xc
     aa4:	46bd      	mov	sp, r7
     aa6:	bc80      	pop	{r7}
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			(mov r8, r8)

00000aac <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     aac:	b480      	push	{r7}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	460b      	mov	r3, r1
     ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ab8:	78fb      	ldrb	r3, [r7, #3]
     aba:	2b00      	cmp	r3, #0
     abc:	d006      	beq.n	acc <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	689b      	ldr	r3, [r3, #8]
     ac2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	609a      	str	r2, [r3, #8]
     aca:	e005      	b.n	ad8 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	609a      	str	r2, [r3, #8]
  }
}
     ad8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     adc:	46bd      	mov	sp, r7
     ade:	bc80      	pop	{r7}
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			(mov r8, r8)

00000ae4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
     ae4:	b480      	push	{r7}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     aec:	f04f 0300 	mov.w	r3, #0	; 0x0
     af0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	689b      	ldr	r3, [r3, #8]
     af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     afa:	2b00      	cmp	r3, #0
     afc:	d003      	beq.n	b06 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
     afe:	f04f 0301 	mov.w	r3, #1	; 0x1
     b02:	73fb      	strb	r3, [r7, #15]
     b04:	e002      	b.n	b0c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
     b06:	f04f 0300 	mov.w	r3, #0	; 0x0
     b0a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
     b0c:	7bfb      	ldrb	r3, [r7, #15]
}
     b0e:	4618      	mov	r0, r3
     b10:	f107 0714 	add.w	r7, r7, #20	; 0x14
     b14:	46bd      	mov	sp, r7
     b16:	bc80      	pop	{r7}
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			(mov r8, r8)

00000b1c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     b1c:	b480      	push	{r7}
     b1e:	b087      	sub	sp, #28
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	4618      	mov	r0, r3
     b26:	460b      	mov	r3, r1
     b28:	70fb      	strb	r3, [r7, #3]
     b2a:	4613      	mov	r3, r2
     b2c:	70bb      	strb	r3, [r7, #2]
     b2e:	4603      	mov	r3, r0
     b30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
     b32:	f04f 0300 	mov.w	r3, #0	; 0x0
     b36:	60fb      	str	r3, [r7, #12]
     b38:	f04f 0300 	mov.w	r3, #0	; 0x0
     b3c:	613b      	str	r3, [r7, #16]
     b3e:	f04f 0300 	mov.w	r3, #0	; 0x0
     b42:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     b44:	78fb      	ldrb	r3, [r7, #3]
     b46:	2b09      	cmp	r3, #9
     b48:	d929      	bls.n	b9e <ADC_InjectedChannelConfig+0x82>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	68db      	ldr	r3, [r3, #12]
     b4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
     b50:	78fa      	ldrb	r2, [r7, #3]
     b52:	4613      	mov	r3, r2
     b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b58:	4413      	add	r3, r2
     b5a:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     b5e:	f04f 0307 	mov.w	r3, #7	; 0x7
     b62:	fa03 f302 	lsl.w	r3, r3, r2
     b66:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	ea6f 0203 	mvn.w	r2, r3
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	ea03 0302 	and.w	r3, r3, r2
     b74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
     b76:	7879      	ldrb	r1, [r7, #1]
     b78:	78fa      	ldrb	r2, [r7, #3]
     b7a:	4613      	mov	r3, r2
     b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b80:	4413      	add	r3, r2
     b82:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     b86:	fa01 f303 	lsl.w	r3, r1, r3
     b8a:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     b8c:	68fa      	ldr	r2, [r7, #12]
     b8e:	693b      	ldr	r3, [r7, #16]
     b90:	ea42 0303 	orr.w	r3, r2, r3
     b94:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	60d3      	str	r3, [r2, #12]
     b9c:	e024      	b.n	be8 <ADC_InjectedChannelConfig+0xcc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	691b      	ldr	r3, [r3, #16]
     ba2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     ba4:	78fa      	ldrb	r2, [r7, #3]
     ba6:	4613      	mov	r3, r2
     ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bac:	441a      	add	r2, r3
     bae:	f04f 0307 	mov.w	r3, #7	; 0x7
     bb2:	fa03 f302 	lsl.w	r3, r3, r2
     bb6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	ea6f 0203 	mvn.w	r2, r3
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	ea03 0302 	and.w	r3, r3, r2
     bc4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     bc6:	7879      	ldrb	r1, [r7, #1]
     bc8:	78fa      	ldrb	r2, [r7, #3]
     bca:	4613      	mov	r3, r2
     bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bd0:	4413      	add	r3, r2
     bd2:	fa01 f303 	lsl.w	r3, r1, r3
     bd6:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     bd8:	68fa      	ldr	r2, [r7, #12]
     bda:	693b      	ldr	r3, [r7, #16]
     bdc:	ea42 0303 	orr.w	r3, r2, r3
     be0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	6113      	str	r3, [r2, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	6b9b      	ldr	r3, [r3, #56]
     bec:	60fb      	str	r3, [r7, #12]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
     bee:	68fb      	ldr	r3, [r7, #12]
     bf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     bf4:	ea4f 5313 	mov.w	r3, r3, lsr #20
     bf8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     bfa:	697b      	ldr	r3, [r7, #20]
     bfc:	b2db      	uxtb	r3, r3
     bfe:	ea6f 0303 	mvn.w	r3, r3
     c02:	b2da      	uxtb	r2, r3
     c04:	78bb      	ldrb	r3, [r7, #2]
     c06:	4413      	add	r3, r2
     c08:	b2db      	uxtb	r3, r3
     c0a:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c0e:	b2db      	uxtb	r3, r3
     c10:	461a      	mov	r2, r3
     c12:	4613      	mov	r3, r2
     c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c18:	441a      	add	r2, r3
     c1a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     c1e:	fa03 f302 	lsl.w	r3, r3, r2
     c22:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
     c24:	693b      	ldr	r3, [r7, #16]
     c26:	ea6f 0203 	mvn.w	r2, r3
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	ea03 0302 	and.w	r3, r3, r2
     c30:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     c32:	78f9      	ldrb	r1, [r7, #3]
     c34:	697b      	ldr	r3, [r7, #20]
     c36:	b2db      	uxtb	r3, r3
     c38:	ea6f 0303 	mvn.w	r3, r3
     c3c:	b2da      	uxtb	r2, r3
     c3e:	78bb      	ldrb	r3, [r7, #2]
     c40:	4413      	add	r3, r2
     c42:	b2db      	uxtb	r3, r3
     c44:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c48:	b2db      	uxtb	r3, r3
     c4a:	461a      	mov	r2, r3
     c4c:	4613      	mov	r3, r2
     c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c52:	4413      	add	r3, r2
     c54:	fa01 f303 	lsl.w	r3, r1, r3
     c58:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	693b      	ldr	r3, [r7, #16]
     c5e:	ea42 0303 	orr.w	r3, r2, r3
     c62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     c64:	687a      	ldr	r2, [r7, #4]
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	6393      	str	r3, [r2, #56]
}
     c6a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     c6e:	46bd      	mov	sp, r7
     c70:	bc80      	pop	{r7}
     c72:	4770      	bx	lr

00000c74 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
     c74:	b480      	push	{r7}
     c76:	b085      	sub	sp, #20
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	460b      	mov	r3, r1
     c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     c80:	f04f 0300 	mov.w	r3, #0	; 0x0
     c84:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     c86:	f04f 0300 	mov.w	r3, #0	; 0x0
     c8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	6b9b      	ldr	r3, [r3, #56]
     c90:	60bb      	str	r3, [r7, #8]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
     c98:	60bb      	str	r3, [r7, #8]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
     c9a:	78fb      	ldrb	r3, [r7, #3]
     c9c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ca0:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 20;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	ea4f 5203 	mov.w	r2, r3, lsl #20
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	ea43 0302 	orr.w	r3, r3, r2
     cae:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     cb0:	687a      	ldr	r2, [r7, #4]
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	6393      	str	r3, [r2, #56]
}
     cb6:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cba:	46bd      	mov	sp, r7
     cbc:	bc80      	pop	{r7}
     cbe:	4770      	bx	lr

00000cc0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
     cc0:	b480      	push	{r7}
     cc2:	b085      	sub	sp, #20
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	460b      	mov	r3, r1
     cca:	70fb      	strb	r3, [r7, #3]
     ccc:	4613      	mov	r3, r2
     cce:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
     cd0:	f04f 0300 	mov.w	r3, #0	; 0x0
     cd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
     cda:	78fa      	ldrb	r2, [r7, #3]
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	4413      	add	r3, r2
     ce0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	461a      	mov	r2, r3
     ce6:	883b      	ldrh	r3, [r7, #0]
     ce8:	6013      	str	r3, [r2, #0]
}
     cea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cee:	46bd      	mov	sp, r7
     cf0:	bc80      	pop	{r7}
     cf2:	4770      	bx	lr

00000cf4 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
     cf4:	b480      	push	{r7}
     cf6:	b085      	sub	sp, #20
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	460b      	mov	r3, r1
     cfe:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
     d00:	f04f 0300 	mov.w	r3, #0	; 0x0
     d04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
     d0a:	78fa      	ldrb	r2, [r7, #3]
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	4413      	add	r3, r2
     d10:	f103 0328 	add.w	r3, r3, #40	; 0x28
     d14:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	b29b      	uxth	r3, r3
}
     d1c:	4618      	mov	r0, r3
     d1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d22:	46bd      	mov	sp, r7
     d24:	bc80      	pop	{r7}
     d26:	4770      	bx	lr

00000d28 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
     d28:	b480      	push	{r7}
     d2a:	b085      	sub	sp, #20
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
     d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     d32:	f04f 0300 	mov.w	r3, #0	; 0x0
     d36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	685b      	ldr	r3, [r3, #4]
     d3c:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
     d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     d48:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
     d4a:	68fa      	ldr	r2, [r7, #12]
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	ea42 0303 	orr.w	r3, r2, r3
     d52:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     d54:	687a      	ldr	r2, [r7, #4]
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	6053      	str	r3, [r2, #4]
}
     d5a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d5e:	46bd      	mov	sp, r7
     d60:	bc80      	pop	{r7}
     d62:	4770      	bx	lr

00000d64 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     d64:	b480      	push	{r7}
     d66:	b083      	sub	sp, #12
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	460b      	mov	r3, r1
     d6e:	807b      	strh	r3, [r7, #2]
     d70:	4613      	mov	r3, r2
     d72:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
     d74:	887a      	ldrh	r2, [r7, #2]
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	625a      	str	r2, [r3, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
     d7a:	883a      	ldrh	r2, [r7, #0]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	629a      	str	r2, [r3, #40]
}
     d80:	f107 070c 	add.w	r7, r7, #12	; 0xc
     d84:	46bd      	mov	sp, r7
     d86:	bc80      	pop	{r7}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			(mov r8, r8)

00000d8c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
     d8c:	b480      	push	{r7}
     d8e:	b085      	sub	sp, #20
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	460b      	mov	r3, r1
     d96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
     d98:	f04f 0300 	mov.w	r3, #0	; 0x0
     d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
     daa:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
     dac:	78fa      	ldrb	r2, [r7, #3]
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	ea43 0302 	orr.w	r3, r3, r2
     db4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	6053      	str	r3, [r2, #4]
}
     dbc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     dc0:	46bd      	mov	sp, r7
     dc2:	bc80      	pop	{r7}
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			(mov r8, r8)

00000dc8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
     dc8:	b480      	push	{r7}
     dca:	b083      	sub	sp, #12
     dcc:	af00      	add	r7, sp, #0
     dce:	4603      	mov	r3, r0
     dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dd2:	79fb      	ldrb	r3, [r7, #7]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d006      	beq.n	de6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
     dd8:	4a08      	ldr	r2, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dda:	4b08      	ldr	r3, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     ddc:	689b      	ldr	r3, [r3, #8]
     dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     de2:	6093      	str	r3, [r2, #8]
     de4:	e005      	b.n	df2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
     de6:	4a05      	ldr	r2, [pc, #20]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     de8:	4b04      	ldr	r3, [pc, #16]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dea:	689b      	ldr	r3, [r3, #8]
     dec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
     df0:	6093      	str	r3, [r2, #8]
  }
}
     df2:	f107 070c 	add.w	r7, r7, #12	; 0xc
     df6:	46bd      	mov	sp, r7
     df8:	bc80      	pop	{r7}
     dfa:	4770      	bx	lr
     dfc:	40012400 	.word	0x40012400

00000e00 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e00:	b480      	push	{r7}
     e02:	b085      	sub	sp, #20
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
     e08:	460b      	mov	r3, r1
     e0a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
     e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
     e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681a      	ldr	r2, [r3, #0]
     e16:	78fb      	ldrb	r3, [r7, #3]
     e18:	ea02 0303 	and.w	r3, r2, r3
     e1c:	2b00      	cmp	r3, #0
     e1e:	d003      	beq.n	e28 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
     e20:	f04f 0301 	mov.w	r3, #1	; 0x1
     e24:	73fb      	strb	r3, [r7, #15]
     e26:	e002      	b.n	e2e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
     e28:	f04f 0300 	mov.w	r3, #0	; 0x0
     e2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
     e2e:	7bfb      	ldrb	r3, [r7, #15]
}
     e30:	4618      	mov	r0, r3
     e32:	f107 0714 	add.w	r7, r7, #20	; 0x14
     e36:	46bd      	mov	sp, r7
     e38:	bc80      	pop	{r7}
     e3a:	4770      	bx	lr

00000e3c <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e3c:	b480      	push	{r7}
     e3e:	b083      	sub	sp, #12
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
     e44:	460b      	mov	r3, r1
     e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
     e48:	78fb      	ldrb	r3, [r7, #3]
     e4a:	ea6f 0203 	mvn.w	r2, r3
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	601a      	str	r2, [r3, #0]
}
     e52:	f107 070c 	add.w	r7, r7, #12	; 0xc
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr

00000e5c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     e5c:	b480      	push	{r7}
     e5e:	b087      	sub	sp, #28
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	460b      	mov	r3, r1
     e66:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
     e68:	f04f 0300 	mov.w	r3, #0	; 0x0
     e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t itmask = 0, enablestatus = 0;
     e6e:	f04f 0300 	mov.w	r3, #0	; 0x0
     e72:	613b      	str	r3, [r7, #16]
     e74:	f04f 0300 	mov.w	r3, #0	; 0x0
     e78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
     e7a:	887b      	ldrh	r3, [r7, #2]
     e7c:	ea4f 2313 	mov.w	r3, r3, lsr #8
     e80:	b29b      	uxth	r3, r3
     e82:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	685a      	ldr	r2, [r3, #4]
     e88:	887b      	ldrh	r3, [r7, #2]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	ea02 0303 	and.w	r3, r2, r3
     e90:	617b      	str	r3, [r7, #20]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	681a      	ldr	r2, [r3, #0]
     e96:	693b      	ldr	r3, [r7, #16]
     e98:	ea02 0303 	and.w	r3, r2, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	d006      	beq.n	eae <ADC_GetITStatus+0x52>
     ea0:	697b      	ldr	r3, [r7, #20]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d003      	beq.n	eae <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
     ea6:	f04f 0301 	mov.w	r3, #1	; 0x1
     eaa:	73fb      	strb	r3, [r7, #15]
     eac:	e002      	b.n	eb4 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
     eae:	f04f 0300 	mov.w	r3, #0	; 0x0
     eb2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
     eb4:	7bfb      	ldrb	r3, [r7, #15]
}
     eb6:	4618      	mov	r0, r3
     eb8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     ebc:	46bd      	mov	sp, r7
     ebe:	bc80      	pop	{r7}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			(mov r8, r8)

00000ec4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     ec4:	b480      	push	{r7}
     ec6:	b085      	sub	sp, #20
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	460b      	mov	r3, r1
     ece:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
     ed0:	f04f 0300 	mov.w	r3, #0	; 0x0
     ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
     ed6:	887b      	ldrh	r3, [r7, #2]
     ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
     edc:	b29b      	uxth	r3, r3
     ede:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
     ee0:	7bfb      	ldrb	r3, [r7, #15]
     ee2:	ea6f 0203 	mvn.w	r2, r3
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	601a      	str	r2, [r3, #0]
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
     f08:	687a      	ldr	r2, [r7, #4]
     f0a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f0e:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
     f10:	687a      	ldr	r2, [r7, #4]
     f12:	f04f 0300 	mov.w	r3, #0	; 0x0
     f16:	6053      	str	r3, [r2, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
     f18:	687a      	ldr	r2, [r7, #4]
     f1a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f1e:	6093      	str	r3, [r2, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	f04f 0300 	mov.w	r3, #0	; 0x0
     f26:	60d3      	str	r3, [r2, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
     f28:	687a      	ldr	r2, [r7, #4]
     f2a:	4b43      	ldr	r3, [pc, #268]	(1038 <DMA_DeInit+0x144>)
     f2c:	429a      	cmp	r2, r3
     f2e:	d106      	bne.n	f3e <DMA_DeInit+0x4a>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
     f30:	4a42      	ldr	r2, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f32:	4b42      	ldr	r3, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f34:	685b      	ldr	r3, [r3, #4]
     f36:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     f3a:	6053      	str	r3, [r2, #4]
     f3c:	e077      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	4b3f      	ldr	r3, [pc, #252]	(1040 <DMA_DeInit+0x14c>)
     f42:	429a      	cmp	r2, r3
     f44:	d106      	bne.n	f54 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
     f46:	4a3d      	ldr	r2, [pc, #244]	(103c <DMA_DeInit+0x148>)
     f48:	4b3c      	ldr	r3, [pc, #240]	(103c <DMA_DeInit+0x148>)
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     f50:	6053      	str	r3, [r2, #4]
     f52:	e06c      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	4b3b      	ldr	r3, [pc, #236]	(1044 <DMA_DeInit+0x150>)
     f58:	429a      	cmp	r2, r3
     f5a:	d106      	bne.n	f6a <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
     f5c:	4a37      	ldr	r2, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f5e:	4b37      	ldr	r3, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f60:	685b      	ldr	r3, [r3, #4]
     f62:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f66:	6053      	str	r3, [r2, #4]
     f68:	e061      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	4b36      	ldr	r3, [pc, #216]	(1048 <DMA_DeInit+0x154>)
     f6e:	429a      	cmp	r2, r3
     f70:	d106      	bne.n	f80 <DMA_DeInit+0x8c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
     f72:	4a32      	ldr	r2, [pc, #200]	(103c <DMA_DeInit+0x148>)
     f74:	4b31      	ldr	r3, [pc, #196]	(103c <DMA_DeInit+0x148>)
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
     f7c:	6053      	str	r3, [r2, #4]
     f7e:	e056      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	4b32      	ldr	r3, [pc, #200]	(104c <DMA_DeInit+0x158>)
     f84:	429a      	cmp	r2, r3
     f86:	d106      	bne.n	f96 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
     f88:	4a2c      	ldr	r2, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8a:	4b2c      	ldr	r3, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8c:	685b      	ldr	r3, [r3, #4]
     f8e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
     f92:	6053      	str	r3, [r2, #4]
     f94:	e04b      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
     f96:	687a      	ldr	r2, [r7, #4]
     f98:	4b2d      	ldr	r3, [pc, #180]	(1050 <DMA_DeInit+0x15c>)
     f9a:	429a      	cmp	r2, r3
     f9c:	d106      	bne.n	fac <DMA_DeInit+0xb8>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
     f9e:	4a27      	ldr	r2, [pc, #156]	(103c <DMA_DeInit+0x148>)
     fa0:	4b26      	ldr	r3, [pc, #152]	(103c <DMA_DeInit+0x148>)
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     fa8:	6053      	str	r3, [r2, #4]
     faa:	e040      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	4b29      	ldr	r3, [pc, #164]	(1054 <DMA_DeInit+0x160>)
     fb0:	429a      	cmp	r2, r3
     fb2:	d106      	bne.n	fc2 <DMA_DeInit+0xce>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
     fb4:	4a21      	ldr	r2, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb6:	4b21      	ldr	r3, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
     fbe:	6053      	str	r3, [r2, #4]
     fc0:	e035      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	4b24      	ldr	r3, [pc, #144]	(1058 <DMA_DeInit+0x164>)
     fc6:	429a      	cmp	r2, r3
     fc8:	d106      	bne.n	fd8 <DMA_DeInit+0xe4>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
     fca:	4a24      	ldr	r2, [pc, #144]	(105c <DMA_DeInit+0x168>)
     fcc:	4b23      	ldr	r3, [pc, #140]	(105c <DMA_DeInit+0x168>)
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     fd4:	6053      	str	r3, [r2, #4]
     fd6:	e02a      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
     fd8:	687a      	ldr	r2, [r7, #4]
     fda:	4b21      	ldr	r3, [pc, #132]	(1060 <DMA_DeInit+0x16c>)
     fdc:	429a      	cmp	r2, r3
     fde:	d106      	bne.n	fee <DMA_DeInit+0xfa>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
     fe0:	4a1e      	ldr	r2, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe2:	4b1e      	ldr	r3, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     fea:	6053      	str	r3, [r2, #4]
     fec:	e01f      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
     fee:	687a      	ldr	r2, [r7, #4]
     ff0:	4b1c      	ldr	r3, [pc, #112]	(1064 <DMA_DeInit+0x170>)
     ff2:	429a      	cmp	r2, r3
     ff4:	d106      	bne.n	1004 <DMA_DeInit+0x110>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
     ff6:	4a19      	ldr	r2, [pc, #100]	(105c <DMA_DeInit+0x168>)
     ff8:	4b18      	ldr	r3, [pc, #96]	(105c <DMA_DeInit+0x168>)
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1000:	6053      	str	r3, [r2, #4]
    1002:	e014      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	4b18      	ldr	r3, [pc, #96]	(1068 <DMA_DeInit+0x174>)
    1008:	429a      	cmp	r2, r3
    100a:	d106      	bne.n	101a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
    100c:	4a13      	ldr	r2, [pc, #76]	(105c <DMA_DeInit+0x168>)
    100e:	4b13      	ldr	r3, [pc, #76]	(105c <DMA_DeInit+0x168>)
    1010:	685b      	ldr	r3, [r3, #4]
    1012:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    1016:	6053      	str	r3, [r2, #4]
    1018:	e009      	b.n	102e <DMA_DeInit+0x13a>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    101a:	687a      	ldr	r2, [r7, #4]
    101c:	4b13      	ldr	r3, [pc, #76]	(106c <DMA_DeInit+0x178>)
    101e:	429a      	cmp	r2, r3
    1020:	d105      	bne.n	102e <DMA_DeInit+0x13a>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    1022:	4a0e      	ldr	r2, [pc, #56]	(105c <DMA_DeInit+0x168>)
    1024:	4b0d      	ldr	r3, [pc, #52]	(105c <DMA_DeInit+0x168>)
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    102c:	6053      	str	r3, [r2, #4]
    }
  }
}
    102e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1032:	46bd      	mov	sp, r7
    1034:	bc80      	pop	{r7}
    1036:	4770      	bx	lr
    1038:	40020008 	.word	0x40020008
    103c:	40020000 	.word	0x40020000
    1040:	4002001c 	.word	0x4002001c
    1044:	40020030 	.word	0x40020030
    1048:	40020044 	.word	0x40020044
    104c:	40020058 	.word	0x40020058
    1050:	4002006c 	.word	0x4002006c
    1054:	40020080 	.word	0x40020080
    1058:	40020408 	.word	0x40020408
    105c:	40020400 	.word	0x40020400
    1060:	4002041c 	.word	0x4002041c
    1064:	40020430 	.word	0x40020430
    1068:	40020444 	.word	0x40020444
    106c:	40020458 	.word	0x40020458

00001070 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
    1070:	b480      	push	{r7}
    1072:	b085      	sub	sp, #20
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    107a:	f04f 0300 	mov.w	r3, #0	; 0x0
    107e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1090:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    1092:	683b      	ldr	r3, [r7, #0]
    1094:	689a      	ldr	r2, [r3, #8]
    1096:	683b      	ldr	r3, [r7, #0]
    1098:	6a1b      	ldr	r3, [r3, #32]
    109a:	ea42 0203 	orr.w	r2, r2, r3
    109e:	683b      	ldr	r3, [r7, #0]
    10a0:	691b      	ldr	r3, [r3, #16]
    10a2:	ea42 0203 	orr.w	r2, r2, r3
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	695b      	ldr	r3, [r3, #20]
    10aa:	ea42 0203 	orr.w	r2, r2, r3
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	699b      	ldr	r3, [r3, #24]
    10b2:	ea42 0203 	orr.w	r2, r2, r3
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	69db      	ldr	r3, [r3, #28]
    10ba:	ea42 0203 	orr.w	r2, r2, r3
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	6a5b      	ldr	r3, [r3, #36]
    10c2:	ea42 0203 	orr.w	r2, r2, r3
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	6a9b      	ldr	r3, [r3, #40]
    10ca:	ea42 0203 	orr.w	r2, r2, r3
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	ea43 0302 	orr.w	r3, r3, r2
    10d4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	6013      	str	r3, [r2, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	68da      	ldr	r2, [r3, #12]
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	681a      	ldr	r2, [r3, #0]
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	60da      	str	r2, [r3, #12]
}
    10f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	46c0      	nop			(mov r8, r8)

00001100 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
    1100:	b480      	push	{r7}
    1102:	b083      	sub	sp, #12
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f04f 0300 	mov.w	r3, #0	; 0x0
    110e:	6013      	str	r3, [r2, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    1110:	687a      	ldr	r2, [r7, #4]
    1112:	f04f 0300 	mov.w	r3, #0	; 0x0
    1116:	6053      	str	r3, [r2, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f04f 0300 	mov.w	r3, #0	; 0x0
    111e:	6093      	str	r3, [r2, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
    1120:	687a      	ldr	r2, [r7, #4]
    1122:	f04f 0300 	mov.w	r3, #0	; 0x0
    1126:	60d3      	str	r3, [r2, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f04f 0300 	mov.w	r3, #0	; 0x0
    112e:	6113      	str	r3, [r2, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	f04f 0300 	mov.w	r3, #0	; 0x0
    1136:	6153      	str	r3, [r2, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f04f 0300 	mov.w	r3, #0	; 0x0
    113e:	6193      	str	r3, [r2, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    1140:	687a      	ldr	r2, [r7, #4]
    1142:	f04f 0300 	mov.w	r3, #0	; 0x0
    1146:	61d3      	str	r3, [r2, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    1148:	687a      	ldr	r2, [r7, #4]
    114a:	f04f 0300 	mov.w	r3, #0	; 0x0
    114e:	6213      	str	r3, [r2, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f04f 0300 	mov.w	r3, #0	; 0x0
    1156:	6253      	str	r3, [r2, #36]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f04f 0300 	mov.w	r3, #0	; 0x0
    115e:	6293      	str	r3, [r2, #40]
}
    1160:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1164:	46bd      	mov	sp, r7
    1166:	bc80      	pop	{r7}
    1168:	4770      	bx	lr
    116a:	46c0      	nop			(mov r8, r8)

0000116c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	460b      	mov	r3, r1
    1176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1178:	78fb      	ldrb	r3, [r7, #3]
    117a:	2b00      	cmp	r3, #0
    117c:	d006      	beq.n	118c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	f043 0201 	orr.w	r2, r3, #1	; 0x1
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	601a      	str	r2, [r3, #0]
    118a:	e005      	b.n	1198 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	f023 0201 	bic.w	r2, r3, #1	; 0x1
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	601a      	str	r2, [r3, #0]
  }
}
    1198:	f107 070c 	add.w	r7, r7, #12	; 0xc
    119c:	46bd      	mov	sp, r7
    119e:	bc80      	pop	{r7}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			(mov r8, r8)

000011a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
    11a4:	b480      	push	{r7}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	60f8      	str	r0, [r7, #12]
    11ac:	60b9      	str	r1, [r7, #8]
    11ae:	4613      	mov	r3, r2
    11b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d007      	beq.n	11c8 <DMA_ITConfig+0x24>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	ea42 0203 	orr.w	r2, r2, r3
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	601a      	str	r2, [r3, #0]
    11c6:	e008      	b.n	11da <DMA_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	ea6f 0303 	mvn.w	r3, r3
    11d2:	ea02 0203 	and.w	r2, r2, r3
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	601a      	str	r2, [r3, #0]
  }
}
    11da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr

000011e4 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *   transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	b29b      	uxth	r3, r3
}
    11f2:	4618      	mov	r0, r3
    11f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    11f8:	46bd      	mov	sp, r7
    11fa:	bc80      	pop	{r7}
    11fc:	4770      	bx	lr
    11fe:	46c0      	nop			(mov r8, r8)

00001200 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
    1200:	b480      	push	{r7}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    1208:	f04f 0300 	mov.w	r3, #0	; 0x0
    120c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    120e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1212:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    121a:	2b00      	cmp	r3, #0
    121c:	d003      	beq.n	1226 <DMA_GetFlagStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    121e:	4b0d      	ldr	r3, [pc, #52]	(1254 <DMA_GetFlagStatus+0x54>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	60fb      	str	r3, [r7, #12]
    1224:	e002      	b.n	122c <DMA_GetFlagStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    1226:	4b0c      	ldr	r3, [pc, #48]	(1258 <DMA_GetFlagStatus+0x58>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	687a      	ldr	r2, [r7, #4]
    1230:	ea03 0302 	and.w	r3, r3, r2
    1234:	2b00      	cmp	r3, #0
    1236:	d003      	beq.n	1240 <DMA_GetFlagStatus+0x40>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
    1238:	f04f 0301 	mov.w	r3, #1	; 0x1
    123c:	72fb      	strb	r3, [r7, #11]
    123e:	e002      	b.n	1246 <DMA_GetFlagStatus+0x46>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
    1240:	f04f 0300 	mov.w	r3, #0	; 0x0
    1244:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
    1246:	7afb      	ldrb	r3, [r7, #11]
}
    1248:	4618      	mov	r0, r3
    124a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    124e:	46bd      	mov	sp, r7
    1250:	bc80      	pop	{r7}
    1252:	4770      	bx	lr
    1254:	40020400 	.word	0x40020400
    1258:	40020000 	.word	0x40020000

0000125c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
    125c:	b480      	push	{r7}
    125e:	b083      	sub	sp, #12
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    126a:	2b00      	cmp	r3, #0
    126c:	d003      	beq.n	1276 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
    126e:	4a06      	ldr	r2, [pc, #24]	(1288 <DMA_ClearFlag+0x2c>)
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6053      	str	r3, [r2, #4]
    1274:	e002      	b.n	127c <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
    1276:	4a05      	ldr	r2, [pc, #20]	(128c <DMA_ClearFlag+0x30>)
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	6053      	str	r3, [r2, #4]
  }
}
    127c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1280:	46bd      	mov	sp, r7
    1282:	bc80      	pop	{r7}
    1284:	4770      	bx	lr
    1286:	46c0      	nop			(mov r8, r8)
    1288:	40020400 	.word	0x40020400
    128c:	40020000 	.word	0x40020000

00001290 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
    1290:	b480      	push	{r7}
    1292:	b085      	sub	sp, #20
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1298:	f04f 0300 	mov.w	r3, #0	; 0x0
    129c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    129e:	f04f 0300 	mov.w	r3, #0	; 0x0
    12a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <DMA_GetITStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    12ae:	4b0d      	ldr	r3, [pc, #52]	(12e4 <DMA_GetITStatus+0x54>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	60fb      	str	r3, [r7, #12]
    12b4:	e002      	b.n	12bc <DMA_GetITStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    12b6:	4b0c      	ldr	r3, [pc, #48]	(12e8 <DMA_GetITStatus+0x58>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	ea03 0302 	and.w	r3, r3, r2
    12c4:	2b00      	cmp	r3, #0
    12c6:	d003      	beq.n	12d0 <DMA_GetITStatus+0x40>
  {
    /* DMA_IT is set */
    bitstatus = SET;
    12c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    12cc:	72fb      	strb	r3, [r7, #11]
    12ce:	e002      	b.n	12d6 <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
    12d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    12d4:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
    12d6:	7afb      	ldrb	r3, [r7, #11]
}
    12d8:	4618      	mov	r0, r3
    12da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    12de:	46bd      	mov	sp, r7
    12e0:	bc80      	pop	{r7}
    12e2:	4770      	bx	lr
    12e4:	40020400 	.word	0x40020400
    12e8:	40020000 	.word	0x40020000

000012ec <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
    12ec:	b480      	push	{r7}
    12ee:	b083      	sub	sp, #12
    12f0:	af00      	add	r7, sp, #0
    12f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12fa:	2b00      	cmp	r3, #0
    12fc:	d003      	beq.n	1306 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
    12fe:	4a06      	ldr	r2, [pc, #24]	(1318 <DMA_ClearITPendingBit+0x2c>)
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	6053      	str	r3, [r2, #4]
    1304:	e002      	b.n	130c <DMA_ClearITPendingBit+0x20>
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
    1306:	4a05      	ldr	r2, [pc, #20]	(131c <DMA_ClearITPendingBit+0x30>)
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	6053      	str	r3, [r2, #4]
  }
}
    130c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1310:	46bd      	mov	sp, r7
    1312:	bc80      	pop	{r7}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			(mov r8, r8)
    1318:	40020400 	.word	0x40020400
    131c:	40020000 	.word	0x40020000

00001320 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1324:	4a0a      	ldr	r2, [pc, #40]	(1350 <EXTI_DeInit+0x30>)
    1326:	f04f 0300 	mov.w	r3, #0	; 0x0
    132a:	6013      	str	r3, [r2, #0]
  EXTI->EMR = 0x00000000;
    132c:	4a08      	ldr	r2, [pc, #32]	(1350 <EXTI_DeInit+0x30>)
    132e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1332:	6053      	str	r3, [r2, #4]
  EXTI->RTSR = 0x00000000; 
    1334:	4a06      	ldr	r2, [pc, #24]	(1350 <EXTI_DeInit+0x30>)
    1336:	f04f 0300 	mov.w	r3, #0	; 0x0
    133a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR = 0x00000000; 
    133c:	4a04      	ldr	r2, [pc, #16]	(1350 <EXTI_DeInit+0x30>)
    133e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1342:	60d3      	str	r3, [r2, #12]
  EXTI->PR = 0x000FFFFF;
    1344:	4a02      	ldr	r2, [pc, #8]	(1350 <EXTI_DeInit+0x30>)
    1346:	4b03      	ldr	r3, [pc, #12]	(1354 <EXTI_DeInit+0x34>)
    1348:	6153      	str	r3, [r2, #20]
}
    134a:	46bd      	mov	sp, r7
    134c:	bc80      	pop	{r7}
    134e:	4770      	bx	lr
    1350:	40010400 	.word	0x40010400
    1354:	000fffff 	.word	0x000fffff

00001358 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1360:	f04f 0300 	mov.w	r3, #0	; 0x0
    1364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1366:	4b3b      	ldr	r3, [pc, #236]	(1454 <EXTI_Init+0xfc>)
    1368:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	799b      	ldrb	r3, [r3, #6]
    136e:	2b00      	cmp	r3, #0
    1370:	d05b      	beq.n	142a <EXTI_Init+0xd2>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1372:	4938      	ldr	r1, [pc, #224]	(1454 <EXTI_Init+0xfc>)
    1374:	4b37      	ldr	r3, [pc, #220]	(1454 <EXTI_Init+0xfc>)
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	ea6f 0303 	mvn.w	r3, r3
    1380:	ea02 0303 	and.w	r3, r2, r3
    1384:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    1386:	4933      	ldr	r1, [pc, #204]	(1454 <EXTI_Init+0xfc>)
    1388:	4b32      	ldr	r3, [pc, #200]	(1454 <EXTI_Init+0xfc>)
    138a:	685a      	ldr	r2, [r3, #4]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	ea6f 0303 	mvn.w	r3, r3
    1394:	ea02 0303 	and.w	r3, r2, r3
    1398:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	791b      	ldrb	r3, [r3, #4]
    139e:	461a      	mov	r2, r3
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	4413      	add	r3, r2
    13a4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    13a6:	68f9      	ldr	r1, [r7, #12]
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	681a      	ldr	r2, [r3, #0]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	ea42 0303 	orr.w	r3, r2, r3
    13b4:	600b      	str	r3, [r1, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    13b6:	4927      	ldr	r1, [pc, #156]	(1454 <EXTI_Init+0xfc>)
    13b8:	4b26      	ldr	r3, [pc, #152]	(1454 <EXTI_Init+0xfc>)
    13ba:	689a      	ldr	r2, [r3, #8]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	ea6f 0303 	mvn.w	r3, r3
    13c4:	ea02 0303 	and.w	r3, r2, r3
    13c8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    13ca:	4922      	ldr	r1, [pc, #136]	(1454 <EXTI_Init+0xfc>)
    13cc:	4b21      	ldr	r3, [pc, #132]	(1454 <EXTI_Init+0xfc>)
    13ce:	68da      	ldr	r2, [r3, #12]
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	ea6f 0303 	mvn.w	r3, r3
    13d8:	ea02 0303 	and.w	r3, r2, r3
    13dc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	795b      	ldrb	r3, [r3, #5]
    13e2:	2b10      	cmp	r3, #16
    13e4:	d110      	bne.n	1408 <EXTI_Init+0xb0>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    13e6:	491b      	ldr	r1, [pc, #108]	(1454 <EXTI_Init+0xfc>)
    13e8:	4b1a      	ldr	r3, [pc, #104]	(1454 <EXTI_Init+0xfc>)
    13ea:	689a      	ldr	r2, [r3, #8]
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	ea42 0303 	orr.w	r3, r2, r3
    13f4:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    13f6:	4917      	ldr	r1, [pc, #92]	(1454 <EXTI_Init+0xfc>)
    13f8:	4b16      	ldr	r3, [pc, #88]	(1454 <EXTI_Init+0xfc>)
    13fa:	68da      	ldr	r2, [r3, #12]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	ea42 0303 	orr.w	r3, r2, r3
    1404:	60cb      	str	r3, [r1, #12]
    1406:	e020      	b.n	144a <EXTI_Init+0xf2>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    1408:	4b12      	ldr	r3, [pc, #72]	(1454 <EXTI_Init+0xfc>)
    140a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	461a      	mov	r2, r3
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	4413      	add	r3, r2
    1416:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    1418:	68f9      	ldr	r1, [r7, #12]
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	ea42 0303 	orr.w	r3, r2, r3
    1426:	600b      	str	r3, [r1, #0]
    1428:	e00f      	b.n	144a <EXTI_Init+0xf2>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	791b      	ldrb	r3, [r3, #4]
    142e:	461a      	mov	r2, r3
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	4413      	add	r3, r2
    1434:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    1436:	68f9      	ldr	r1, [r7, #12]
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	681a      	ldr	r2, [r3, #0]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	ea6f 0303 	mvn.w	r3, r3
    1444:	ea02 0303 	and.w	r3, r2, r3
    1448:	600b      	str	r3, [r1, #0]
  }
}
    144a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    144e:	46bd      	mov	sp, r7
    1450:	bc80      	pop	{r7}
    1452:	4770      	bx	lr
    1454:	40010400 	.word	0x40010400

00001458 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1458:	b480      	push	{r7}
    145a:	b083      	sub	sp, #12
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	f04f 0300 	mov.w	r3, #0	; 0x0
    1466:	6013      	str	r3, [r2, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    1468:	687a      	ldr	r2, [r7, #4]
    146a:	f04f 0300 	mov.w	r3, #0	; 0x0
    146e:	7113      	strb	r3, [r2, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    1470:	687a      	ldr	r2, [r7, #4]
    1472:	f04f 030c 	mov.w	r3, #12	; 0xc
    1476:	7153      	strb	r3, [r2, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    1478:	687a      	ldr	r2, [r7, #4]
    147a:	f04f 0300 	mov.w	r3, #0	; 0x0
    147e:	7193      	strb	r3, [r2, #6]
}
    1480:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1484:	46bd      	mov	sp, r7
    1486:	bc80      	pop	{r7}
    1488:	4770      	bx	lr
    148a:	46c0      	nop			(mov r8, r8)

0000148c <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    148c:	b480      	push	{r7}
    148e:	b083      	sub	sp, #12
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    1494:	4905      	ldr	r1, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1496:	4b05      	ldr	r3, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1498:	691a      	ldr	r2, [r3, #16]
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	ea42 0303 	orr.w	r3, r2, r3
    14a0:	610b      	str	r3, [r1, #16]
}
    14a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14a6:	46bd      	mov	sp, r7
    14a8:	bc80      	pop	{r7}
    14aa:	4770      	bx	lr
    14ac:	40010400 	.word	0x40010400

000014b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    14b0:	b480      	push	{r7}
    14b2:	b085      	sub	sp, #20
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    14b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    14bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    14be:	4b0a      	ldr	r3, [pc, #40]	(14e8 <EXTI_GetFlagStatus+0x38>)
    14c0:	695a      	ldr	r2, [r3, #20]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	ea02 0303 	and.w	r3, r2, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d003      	beq.n	14d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    14cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    14d0:	73fb      	strb	r3, [r7, #15]
    14d2:	e002      	b.n	14da <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    14d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    14d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14da:	7bfb      	ldrb	r3, [r7, #15]
}
    14dc:	4618      	mov	r0, r3
    14de:	f107 0714 	add.w	r7, r7, #20	; 0x14
    14e2:	46bd      	mov	sp, r7
    14e4:	bc80      	pop	{r7}
    14e6:	4770      	bx	lr
    14e8:	40010400 	.word	0x40010400

000014ec <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    14ec:	b480      	push	{r7}
    14ee:	b083      	sub	sp, #12
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    14f4:	4a03      	ldr	r2, [pc, #12]	(1504 <EXTI_ClearFlag+0x18>)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	6153      	str	r3, [r2, #20]
}
    14fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14fe:	46bd      	mov	sp, r7
    1500:	bc80      	pop	{r7}
    1502:	4770      	bx	lr
    1504:	40010400 	.word	0x40010400

00001508 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    1508:	b480      	push	{r7}
    150a:	b085      	sub	sp, #20
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1510:	f04f 0300 	mov.w	r3, #0	; 0x0
    1514:	72fb      	strb	r3, [r7, #11]
  uint32_t enablestatus = 0;
    1516:	f04f 0300 	mov.w	r3, #0	; 0x0
    151a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    151c:	4b0e      	ldr	r3, [pc, #56]	(1558 <EXTI_GetITStatus+0x50>)
    151e:	681a      	ldr	r2, [r3, #0]
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	ea02 0303 	and.w	r3, r2, r3
    1526:	60fb      	str	r3, [r7, #12]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    1528:	4b0b      	ldr	r3, [pc, #44]	(1558 <EXTI_GetITStatus+0x50>)
    152a:	695a      	ldr	r2, [r3, #20]
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	ea02 0303 	and.w	r3, r2, r3
    1532:	2b00      	cmp	r3, #0
    1534:	d006      	beq.n	1544 <EXTI_GetITStatus+0x3c>
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2b00      	cmp	r3, #0
    153a:	d003      	beq.n	1544 <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
    153c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1540:	72fb      	strb	r3, [r7, #11]
    1542:	e002      	b.n	154a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    1544:	f04f 0300 	mov.w	r3, #0	; 0x0
    1548:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    154a:	7afb      	ldrb	r3, [r7, #11]
}
    154c:	4618      	mov	r0, r3
    154e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1552:	46bd      	mov	sp, r7
    1554:	bc80      	pop	{r7}
    1556:	4770      	bx	lr
    1558:	40010400 	.word	0x40010400

0000155c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    155c:	b480      	push	{r7}
    155e:	b083      	sub	sp, #12
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    1564:	4a03      	ldr	r2, [pc, #12]	(1574 <EXTI_ClearITPendingBit+0x18>)
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	6153      	str	r3, [r2, #20]
}
    156a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr
    1574:	40010400 	.word	0x40010400

00001578 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	4b3c      	ldr	r3, [pc, #240]	(1674 <GPIO_DeInit+0xfc>)
    1584:	429a      	cmp	r2, r3
    1586:	d10c      	bne.n	15a2 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1588:	f04f 0004 	mov.w	r0, #4	; 0x4
    158c:	f04f 0101 	mov.w	r1, #1	; 0x1
    1590:	f000 ffc0 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1594:	f04f 0004 	mov.w	r0, #4	; 0x4
    1598:	f04f 0100 	mov.w	r1, #0	; 0x0
    159c:	f000 ffba 	bl	2514 <RCC_APB2PeriphResetCmd>
    15a0:	e064      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    15a2:	687a      	ldr	r2, [r7, #4]
    15a4:	4b34      	ldr	r3, [pc, #208]	(1678 <GPIO_DeInit+0x100>)
    15a6:	429a      	cmp	r2, r3
    15a8:	d10c      	bne.n	15c4 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    15aa:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    15b2:	f000 ffaf 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    15b6:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ba:	f04f 0100 	mov.w	r1, #0	; 0x0
    15be:	f000 ffa9 	bl	2514 <RCC_APB2PeriphResetCmd>
    15c2:	e053      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	4b2d      	ldr	r3, [pc, #180]	(167c <GPIO_DeInit+0x104>)
    15c8:	429a      	cmp	r2, r3
    15ca:	d10c      	bne.n	15e6 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    15cc:	f04f 0010 	mov.w	r0, #16	; 0x10
    15d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    15d4:	f000 ff9e 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    15d8:	f04f 0010 	mov.w	r0, #16	; 0x10
    15dc:	f04f 0100 	mov.w	r1, #0	; 0x0
    15e0:	f000 ff98 	bl	2514 <RCC_APB2PeriphResetCmd>
    15e4:	e042      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    15e6:	687a      	ldr	r2, [r7, #4]
    15e8:	4b25      	ldr	r3, [pc, #148]	(1680 <GPIO_DeInit+0x108>)
    15ea:	429a      	cmp	r2, r3
    15ec:	d10c      	bne.n	1608 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    15ee:	f04f 0020 	mov.w	r0, #32	; 0x20
    15f2:	f04f 0101 	mov.w	r1, #1	; 0x1
    15f6:	f000 ff8d 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    15fa:	f04f 0020 	mov.w	r0, #32	; 0x20
    15fe:	f04f 0100 	mov.w	r1, #0	; 0x0
    1602:	f000 ff87 	bl	2514 <RCC_APB2PeriphResetCmd>
    1606:	e031      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
    1608:	687a      	ldr	r2, [r7, #4]
    160a:	4b1e      	ldr	r3, [pc, #120]	(1684 <GPIO_DeInit+0x10c>)
    160c:	429a      	cmp	r2, r3
    160e:	d10c      	bne.n	162a <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1610:	f04f 0040 	mov.w	r0, #64	; 0x40
    1614:	f04f 0101 	mov.w	r1, #1	; 0x1
    1618:	f000 ff7c 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    161c:	f04f 0040 	mov.w	r0, #64	; 0x40
    1620:	f04f 0100 	mov.w	r1, #0	; 0x0
    1624:	f000 ff76 	bl	2514 <RCC_APB2PeriphResetCmd>
    1628:	e020      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
    162a:	687a      	ldr	r2, [r7, #4]
    162c:	4b16      	ldr	r3, [pc, #88]	(1688 <GPIO_DeInit+0x110>)
    162e:	429a      	cmp	r2, r3
    1630:	d10c      	bne.n	164c <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1632:	f04f 0080 	mov.w	r0, #128	; 0x80
    1636:	f04f 0101 	mov.w	r1, #1	; 0x1
    163a:	f000 ff6b 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    163e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1642:	f04f 0100 	mov.w	r1, #0	; 0x0
    1646:	f000 ff65 	bl	2514 <RCC_APB2PeriphResetCmd>
    164a:	e00f      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    164c:	687a      	ldr	r2, [r7, #4]
    164e:	4b0f      	ldr	r3, [pc, #60]	(168c <GPIO_DeInit+0x114>)
    1650:	429a      	cmp	r2, r3
    1652:	d10b      	bne.n	166c <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1654:	f44f 7080 	mov.w	r0, #256	; 0x100
    1658:	f04f 0101 	mov.w	r1, #1	; 0x1
    165c:	f000 ff5a 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1660:	f44f 7080 	mov.w	r0, #256	; 0x100
    1664:	f04f 0100 	mov.w	r1, #0	; 0x0
    1668:	f000 ff54 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
    166c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}
    1674:	40010800 	.word	0x40010800
    1678:	40010c00 	.word	0x40010c00
    167c:	40011000 	.word	0x40011000
    1680:	40011400 	.word	0x40011400
    1684:	40011800 	.word	0x40011800
    1688:	40011c00 	.word	0x40011c00
    168c:	40012000 	.word	0x40012000

00001690 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1694:	f04f 0001 	mov.w	r0, #1	; 0x1
    1698:	f04f 0101 	mov.w	r1, #1	; 0x1
    169c:	f000 ff3a 	bl	2514 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    16a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    16a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    16a8:	f000 ff34 	bl	2514 <RCC_APB2PeriphResetCmd>
}
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}

000016b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    16b0:	b480      	push	{r7}
    16b2:	b089      	sub	sp, #36
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    16ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    16be:	60bb      	str	r3, [r7, #8]
    16c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    16c4:	60fb      	str	r3, [r7, #12]
    16c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    16ca:	613b      	str	r3, [r7, #16]
    16cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    16d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d6:	61bb      	str	r3, [r7, #24]
    16d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    16dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    16de:	683b      	ldr	r3, [r7, #0]
    16e0:	78db      	ldrb	r3, [r3, #3]
    16e2:	f003 030f 	and.w	r3, r3, #15	; 0xf
    16e6:	60bb      	str	r3, [r7, #8]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	78db      	ldrb	r3, [r3, #3]
    16ec:	f003 0310 	and.w	r3, r3, #16	; 0x10
    16f0:	2b00      	cmp	r3, #0
    16f2:	d006      	beq.n	1702 <GPIO_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	789b      	ldrb	r3, [r3, #2]
    16f8:	461a      	mov	r2, r3
    16fa:	68bb      	ldr	r3, [r7, #8]
    16fc:	ea43 0302 	orr.w	r3, r3, r2
    1700:	60bb      	str	r3, [r7, #8]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    170a:	2b00      	cmp	r3, #0
    170c:	d051      	beq.n	17b2 <GPIO_Init+0x102>
  {
    tmpreg = GPIOx->CRL;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1714:	f04f 0300 	mov.w	r3, #0	; 0x0
    1718:	613b      	str	r3, [r7, #16]
    171a:	e044      	b.n	17a6 <GPIO_Init+0xf6>
    {
      pos = ((uint32_t)0x01) << pinpos;
    171c:	693a      	ldr	r2, [r7, #16]
    171e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1722:	fa03 f302 	lsl.w	r3, r3, r2
    1726:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	881b      	ldrh	r3, [r3, #0]
    172c:	461a      	mov	r2, r3
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	ea02 0303 	and.w	r3, r2, r3
    1734:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    1736:	68fa      	ldr	r2, [r7, #12]
    1738:	697b      	ldr	r3, [r7, #20]
    173a:	429a      	cmp	r2, r3
    173c:	d12f      	bne.n	179e <GPIO_Init+0xee>
      {
        pos = pinpos << 2;
    173e:	693b      	ldr	r3, [r7, #16]
    1740:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1744:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	f04f 030f 	mov.w	r3, #15	; 0xf
    174c:	fa03 f302 	lsl.w	r3, r3, r2
    1750:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1752:	69fb      	ldr	r3, [r7, #28]
    1754:	ea6f 0203 	mvn.w	r2, r3
    1758:	69bb      	ldr	r3, [r7, #24]
    175a:	ea03 0302 	and.w	r3, r3, r2
    175e:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1760:	697a      	ldr	r2, [r7, #20]
    1762:	68bb      	ldr	r3, [r7, #8]
    1764:	fa03 f202 	lsl.w	r2, r3, r2
    1768:	69bb      	ldr	r3, [r7, #24]
    176a:	ea43 0302 	orr.w	r3, r3, r2
    176e:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	78db      	ldrb	r3, [r3, #3]
    1774:	2b28      	cmp	r3, #40
    1776:	d107      	bne.n	1788 <GPIO_Init+0xd8>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1778:	693a      	ldr	r2, [r7, #16]
    177a:	f04f 0301 	mov.w	r3, #1	; 0x1
    177e:	fa03 f202 	lsl.w	r2, r3, r2
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	615a      	str	r2, [r3, #20]
    1786:	e00a      	b.n	179e <GPIO_Init+0xee>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1788:	683b      	ldr	r3, [r7, #0]
    178a:	78db      	ldrb	r3, [r3, #3]
    178c:	2b48      	cmp	r3, #72
    178e:	d106      	bne.n	179e <GPIO_Init+0xee>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1790:	693a      	ldr	r2, [r7, #16]
    1792:	f04f 0301 	mov.w	r3, #1	; 0x1
    1796:	fa03 f202 	lsl.w	r2, r3, r2
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    179e:	693b      	ldr	r3, [r7, #16]
    17a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    17a4:	613b      	str	r3, [r7, #16]
    17a6:	693b      	ldr	r3, [r7, #16]
    17a8:	2b07      	cmp	r3, #7
    17aa:	d9b7      	bls.n	171c <GPIO_Init+0x6c>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	6013      	str	r3, [r2, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	881b      	ldrh	r3, [r3, #0]
    17b6:	2bff      	cmp	r3, #255
    17b8:	d959      	bls.n	186e <GPIO_Init+0x1be>
  {
    tmpreg = GPIOx->CRH;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    17c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    17c4:	613b      	str	r3, [r7, #16]
    17c6:	e04c      	b.n	1862 <GPIO_Init+0x1b2>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	f103 0308 	add.w	r3, r3, #8	; 0x8
    17ce:	461a      	mov	r2, r3
    17d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    17d4:	fa03 f302 	lsl.w	r3, r3, r2
    17d8:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    17da:	683b      	ldr	r3, [r7, #0]
    17dc:	881b      	ldrh	r3, [r3, #0]
    17de:	461a      	mov	r2, r3
    17e0:	697b      	ldr	r3, [r7, #20]
    17e2:	ea02 0303 	and.w	r3, r2, r3
    17e6:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    17e8:	68fa      	ldr	r2, [r7, #12]
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	429a      	cmp	r2, r3
    17ee:	d134      	bne.n	185a <GPIO_Init+0x1aa>
      {
        pos = pinpos << 2;
    17f0:	693b      	ldr	r3, [r7, #16]
    17f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    17f6:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    17f8:	697a      	ldr	r2, [r7, #20]
    17fa:	f04f 030f 	mov.w	r3, #15	; 0xf
    17fe:	fa03 f302 	lsl.w	r3, r3, r2
    1802:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	ea6f 0203 	mvn.w	r2, r3
    180a:	69bb      	ldr	r3, [r7, #24]
    180c:	ea03 0302 	and.w	r3, r3, r2
    1810:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1812:	697a      	ldr	r2, [r7, #20]
    1814:	68bb      	ldr	r3, [r7, #8]
    1816:	fa03 f202 	lsl.w	r2, r3, r2
    181a:	69bb      	ldr	r3, [r7, #24]
    181c:	ea43 0302 	orr.w	r3, r3, r2
    1820:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	78db      	ldrb	r3, [r3, #3]
    1826:	2b28      	cmp	r3, #40
    1828:	d109      	bne.n	183e <GPIO_Init+0x18e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    182a:	693b      	ldr	r3, [r7, #16]
    182c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    1830:	461a      	mov	r2, r3
    1832:	f04f 0301 	mov.w	r3, #1	; 0x1
    1836:	fa03 f202 	lsl.w	r2, r3, r2
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	78db      	ldrb	r3, [r3, #3]
    1842:	2b48      	cmp	r3, #72
    1844:	d109      	bne.n	185a <GPIO_Init+0x1aa>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1846:	693b      	ldr	r3, [r7, #16]
    1848:	f103 0308 	add.w	r3, r3, #8	; 0x8
    184c:	461a      	mov	r2, r3
    184e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1852:	fa03 f202 	lsl.w	r2, r3, r2
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    185a:	693b      	ldr	r3, [r7, #16]
    185c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1860:	613b      	str	r3, [r7, #16]
    1862:	693b      	ldr	r3, [r7, #16]
    1864:	2b07      	cmp	r3, #7
    1866:	d9af      	bls.n	17c8 <GPIO_Init+0x118>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1868:	687a      	ldr	r2, [r7, #4]
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	6053      	str	r3, [r2, #4]
  }
}
    186e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1872:	46bd      	mov	sp, r7
    1874:	bc80      	pop	{r7}
    1876:	4770      	bx	lr

00001878 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1878:	b480      	push	{r7}
    187a:	b083      	sub	sp, #12
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1886:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	f04f 0302 	mov.w	r3, #2	; 0x2
    188e:	7093      	strb	r3, [r2, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	f04f 0304 	mov.w	r3, #4	; 0x4
    1896:	70d3      	strb	r3, [r2, #3]
}
    1898:	f107 070c 	add.w	r7, r7, #12	; 0xc
    189c:	46bd      	mov	sp, r7
    189e:	bc80      	pop	{r7}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			(mov r8, r8)

000018a4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18a4:	b480      	push	{r7}
    18a6:	b085      	sub	sp, #20
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
    18ac:	460b      	mov	r3, r1
    18ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    18b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    18b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	689a      	ldr	r2, [r3, #8]
    18ba:	887b      	ldrh	r3, [r7, #2]
    18bc:	ea02 0303 	and.w	r3, r2, r3
    18c0:	2b00      	cmp	r3, #0
    18c2:	d003      	beq.n	18cc <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    18c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    18c8:	73fb      	strb	r3, [r7, #15]
    18ca:	e002      	b.n	18d2 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    18cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    18d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    18d2:	7bfb      	ldrb	r3, [r7, #15]
}
    18d4:	4618      	mov	r0, r3
    18d6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    18da:	46bd      	mov	sp, r7
    18dc:	bc80      	pop	{r7}
    18de:	4770      	bx	lr

000018e0 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    18e0:	b480      	push	{r7}
    18e2:	b083      	sub	sp, #12
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	689b      	ldr	r3, [r3, #8]
    18ec:	b29b      	uxth	r3, r3
}
    18ee:	4618      	mov	r0, r3
    18f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    18f4:	46bd      	mov	sp, r7
    18f6:	bc80      	pop	{r7}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			(mov r8, r8)

000018fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18fc:	b480      	push	{r7}
    18fe:	b085      	sub	sp, #20
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	460b      	mov	r3, r1
    1906:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1908:	f04f 0300 	mov.w	r3, #0	; 0x0
    190c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	68da      	ldr	r2, [r3, #12]
    1912:	887b      	ldrh	r3, [r7, #2]
    1914:	ea02 0303 	and.w	r3, r2, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d003      	beq.n	1924 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    191c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1920:	73fb      	strb	r3, [r7, #15]
    1922:	e002      	b.n	192a <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1924:	f04f 0300 	mov.w	r3, #0	; 0x0
    1928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    192a:	7bfb      	ldrb	r3, [r7, #15]
}
    192c:	4618      	mov	r0, r3
    192e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1932:	46bd      	mov	sp, r7
    1934:	bc80      	pop	{r7}
    1936:	4770      	bx	lr

00001938 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1938:	b480      	push	{r7}
    193a:	b083      	sub	sp, #12
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	68db      	ldr	r3, [r3, #12]
    1944:	b29b      	uxth	r3, r3
}
    1946:	4618      	mov	r0, r3
    1948:	f107 070c 	add.w	r7, r7, #12	; 0xc
    194c:	46bd      	mov	sp, r7
    194e:	bc80      	pop	{r7}
    1950:	4770      	bx	lr
    1952:	46c0      	nop			(mov r8, r8)

00001954 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	460b      	mov	r3, r1
    195e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1960:	887a      	ldrh	r2, [r7, #2]
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	611a      	str	r2, [r3, #16]
}
    1966:	f107 070c 	add.w	r7, r7, #12	; 0xc
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	460b      	mov	r3, r1
    197a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    197c:	887a      	ldrh	r2, [r7, #2]
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	615a      	str	r2, [r3, #20]
}
    1982:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1986:	46bd      	mov	sp, r7
    1988:	bc80      	pop	{r7}
    198a:	4770      	bx	lr

0000198c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	460b      	mov	r3, r1
    1996:	807b      	strh	r3, [r7, #2]
    1998:	4613      	mov	r3, r2
    199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    199c:	787b      	ldrb	r3, [r7, #1]
    199e:	2b00      	cmp	r3, #0
    19a0:	d003      	beq.n	19aa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    19a2:	887a      	ldrh	r2, [r7, #2]
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	611a      	str	r2, [r3, #16]
    19a8:	e002      	b.n	19b0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    19aa:	887a      	ldrh	r2, [r7, #2]
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	615a      	str	r2, [r3, #20]
  }
}
    19b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19b4:	46bd      	mov	sp, r7
    19b6:	bc80      	pop	{r7}
    19b8:	4770      	bx	lr
    19ba:	46c0      	nop			(mov r8, r8)

000019bc <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	460b      	mov	r3, r1
    19c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    19c8:	887a      	ldrh	r2, [r7, #2]
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	60da      	str	r2, [r3, #12]
}
    19ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19d2:	46bd      	mov	sp, r7
    19d4:	bc80      	pop	{r7}
    19d6:	4770      	bx	lr

000019d8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    19d8:	b480      	push	{r7}
    19da:	b085      	sub	sp, #20
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
    19e0:	460b      	mov	r3, r1
    19e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    19e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    19ea:	887a      	ldrh	r2, [r7, #2]
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	ea43 0302 	orr.w	r3, r3, r2
    19f2:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    19fa:	887a      	ldrh	r2, [r7, #2]
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1a00:	687a      	ldr	r2, [r7, #4]
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	699b      	ldr	r3, [r3, #24]
    1a0a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	699b      	ldr	r3, [r3, #24]
    1a10:	60fb      	str	r3, [r7, #12]
}
    1a12:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr

00001a1c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1a1c:	b480      	push	{r7}
    1a1e:	b085      	sub	sp, #20
    1a20:	af00      	add	r7, sp, #0
    1a22:	4603      	mov	r3, r0
    1a24:	460a      	mov	r2, r1
    1a26:	71fb      	strb	r3, [r7, #7]
    1a28:	4613      	mov	r3, r2
    1a2a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1a2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1a30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1a32:	4b0e      	ldr	r3, [pc, #56]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1a38:	68fa      	ldr	r2, [r7, #12]
    1a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
    1a3e:	ea02 0303 	and.w	r3, r2, r3
    1a42:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1a44:	79fb      	ldrb	r3, [r7, #7]
    1a46:	ea4f 1203 	mov.w	r2, r3, lsl #4
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	ea43 0302 	orr.w	r3, r3, r2
    1a50:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1a52:	79ba      	ldrb	r2, [r7, #6]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	ea43 0302 	orr.w	r3, r3, r2
    1a5a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1a5c:	4a03      	ldr	r2, [pc, #12]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	6013      	str	r3, [r2, #0]
}
    1a62:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a66:	46bd      	mov	sp, r7
    1a68:	bc80      	pop	{r7}
    1a6a:	4770      	bx	lr
    1a6c:	40010000 	.word	0x40010000

00001a70 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1a70:	b480      	push	{r7}
    1a72:	b083      	sub	sp, #12
    1a74:	af00      	add	r7, sp, #0
    1a76:	4603      	mov	r3, r0
    1a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1a7a:	4a04      	ldr	r2, [pc, #16]	(1a8c <GPIO_EventOutputCmd+0x1c>)
    1a7c:	79fb      	ldrb	r3, [r7, #7]
    1a7e:	6013      	str	r3, [r2, #0]
}
    1a80:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1a84:	46bd      	mov	sp, r7
    1a86:	bc80      	pop	{r7}
    1a88:	4770      	bx	lr
    1a8a:	46c0      	nop			(mov r8, r8)
    1a8c:	4220001c 	.word	0x4220001c

00001a90 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1a90:	b480      	push	{r7}
    1a92:	b087      	sub	sp, #28
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
    1a98:	460b      	mov	r3, r1
    1a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1a9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa0:	60bb      	str	r3, [r7, #8]
    1aa2:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa6:	60fb      	str	r3, [r7, #12]
    1aa8:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aac:	613b      	str	r3, [r7, #16]
    1aae:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  tmpreg = AFIO->MAPR;
    1ab4:	4b30      	ldr	r3, [pc, #192]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ab6:	685b      	ldr	r3, [r3, #4]
    1ab8:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1ac0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ac4:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1acc:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ad0:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1adc:	d10a      	bne.n	1af4 <GPIO_PinRemapConfig+0x64>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ade:	693b      	ldr	r3, [r7, #16]
    1ae0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1ae4:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1ae6:	4a24      	ldr	r2, [pc, #144]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ae8:	4b23      	ldr	r3, [pc, #140]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1aea:	685b      	ldr	r3, [r3, #4]
    1aec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1af0:	6053      	str	r3, [r2, #4]
    1af2:	e029      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1afa:	2b00      	cmp	r3, #0
    1afc:	d011      	beq.n	1b22 <GPIO_PinRemapConfig+0x92>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1afe:	697a      	ldr	r2, [r7, #20]
    1b00:	f04f 0303 	mov.w	r3, #3	; 0x3
    1b04:	fa03 f302 	lsl.w	r3, r3, r2
    1b08:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	ea6f 0203 	mvn.w	r2, r3
    1b10:	693b      	ldr	r3, [r7, #16]
    1b12:	ea03 0302 	and.w	r3, r3, r2
    1b16:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b18:	693b      	ldr	r3, [r7, #16]
    1b1a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b1e:	613b      	str	r3, [r7, #16]
    1b20:	e012      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b28:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b2c:	461a      	mov	r2, r3
    1b2e:	68bb      	ldr	r3, [r7, #8]
    1b30:	fa03 f302 	lsl.w	r3, r3, r2
    1b34:	ea6f 0203 	mvn.w	r2, r3
    1b38:	693b      	ldr	r3, [r7, #16]
    1b3a:	ea03 0302 	and.w	r3, r3, r2
    1b3e:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b46:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    1b48:	78fb      	ldrb	r3, [r7, #3]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d00c      	beq.n	1b68 <GPIO_PinRemapConfig+0xd8>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b58:	461a      	mov	r2, r3
    1b5a:	68bb      	ldr	r3, [r7, #8]
    1b5c:	fa03 f202 	lsl.w	r2, r3, r2
    1b60:	693b      	ldr	r3, [r7, #16]
    1b62:	ea43 0302 	orr.w	r3, r3, r2
    1b66:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    1b68:	4a03      	ldr	r2, [pc, #12]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1b6a:	693b      	ldr	r3, [r7, #16]
    1b6c:	6053      	str	r3, [r2, #4]
}
    1b6e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    1b72:	46bd      	mov	sp, r7
    1b74:	bc80      	pop	{r7}
    1b76:	4770      	bx	lr
    1b78:	40010000 	.word	0x40010000

00001b7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1b7c:	b480      	push	{r7}
    1b7e:	b085      	sub	sp, #20
    1b80:	af00      	add	r7, sp, #0
    1b82:	4603      	mov	r3, r0
    1b84:	460a      	mov	r2, r1
    1b86:	71fb      	strb	r3, [r7, #7]
    1b88:	4613      	mov	r3, r2
    1b8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1b8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1b90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1b92:	79bb      	ldrb	r3, [r7, #6]
    1b94:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1b98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b9c:	f04f 030f 	mov.w	r3, #15	; 0xf
    1ba0:	fa03 f302 	lsl.w	r3, r3, r2
    1ba4:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1ba6:	491d      	ldr	r1, [pc, #116]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1ba8:	79bb      	ldrb	r3, [r7, #6]
    1baa:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	4618      	mov	r0, r3
    1bb2:	4a1a      	ldr	r2, [pc, #104]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bb4:	79bb      	ldrb	r3, [r7, #6]
    1bb6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1bc4:	68fb      	ldr	r3, [r7, #12]
    1bc6:	ea6f 0303 	mvn.w	r3, r3
    1bca:	ea02 0203 	and.w	r2, r2, r3
    1bce:	f100 0302 	add.w	r3, r0, #2	; 0x2
    1bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1bd6:	4811      	ldr	r0, [pc, #68]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bd8:	79bb      	ldrb	r3, [r7, #6]
    1bda:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bde:	b2db      	uxtb	r3, r3
    1be0:	469c      	mov	ip, r3
    1be2:	4a0e      	ldr	r2, [pc, #56]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1be4:	79bb      	ldrb	r3, [r7, #6]
    1be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bea:	b2db      	uxtb	r3, r3
    1bec:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1bf4:	79fa      	ldrb	r2, [r7, #7]
    1bf6:	79bb      	ldrb	r3, [r7, #6]
    1bf8:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c00:	fa02 f303 	lsl.w	r3, r2, r3
    1c04:	ea41 0203 	orr.w	r2, r1, r3
    1c08:	f10c 0302 	add.w	r3, ip, #2	; 0x2
    1c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    1c10:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1c14:	46bd      	mov	sp, r7
    1c16:	bc80      	pop	{r7}
    1c18:	4770      	bx	lr
    1c1a:	46c0      	nop			(mov r8, r8)
    1c1c:	40010000 	.word	0x40010000

00001c20 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1c28:	4a03      	ldr	r2, [pc, #12]	(1c38 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	6013      	str	r3, [r2, #0]
}
    1c2e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1c32:	46bd      	mov	sp, r7
    1c34:	bc80      	pop	{r7}
    1c36:	4770      	bx	lr
    1c38:	422000dc 	.word	0x422000dc

00001c3c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1c3c:	b480      	push	{r7}
    1c3e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    1c40:	4a18      	ldr	r2, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c42:	4b18      	ldr	r3, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    1c4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
    1c4c:	4915      	ldr	r1, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c4e:	4b15      	ldr	r3, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c50:	685a      	ldr	r2, [r3, #4]
    1c52:	4b15      	ldr	r3, [pc, #84]	(1ca8 <RCC_DeInit+0x6c>)
    1c54:	ea02 0303 	and.w	r3, r2, r3
    1c58:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1c5a:	4a12      	ldr	r2, [pc, #72]	(1ca4 <RCC_DeInit+0x68>)
    1c5c:	4b11      	ldr	r3, [pc, #68]	(1ca4 <RCC_DeInit+0x68>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1c68:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1c6a:	4a0e      	ldr	r2, [pc, #56]	(1ca4 <RCC_DeInit+0x68>)
    1c6c:	4b0d      	ldr	r3, [pc, #52]	(1ca4 <RCC_DeInit+0x68>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1c76:	4a0b      	ldr	r2, [pc, #44]	(1ca4 <RCC_DeInit+0x68>)
    1c78:	4b0a      	ldr	r3, [pc, #40]	(1ca4 <RCC_DeInit+0x68>)
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1c80:	6053      	str	r3, [r2, #4]
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
    1c82:	4a08      	ldr	r2, [pc, #32]	(1ca4 <RCC_DeInit+0x68>)
    1c84:	4b07      	ldr	r3, [pc, #28]	(1ca4 <RCC_DeInit+0x68>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
    1c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
    1c8e:	4a05      	ldr	r2, [pc, #20]	(1ca4 <RCC_DeInit+0x68>)
    1c90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    1c94:	6093      	str	r3, [r2, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
    1c96:	4a03      	ldr	r2, [pc, #12]	(1ca4 <RCC_DeInit+0x68>)
    1c98:	f04f 0300 	mov.w	r3, #0	; 0x0
    1c9c:	62d3      	str	r3, [r2, #44]
#endif /* STM32F10X_CL */
}
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bc80      	pop	{r7}
    1ca2:	4770      	bx	lr
    1ca4:	40021000 	.word	0x40021000
    1ca8:	f0ff0000 	.word	0xf0ff0000

00001cac <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1cac:	b480      	push	{r7}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1cb4:	4a14      	ldr	r2, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb6:	4b14      	ldr	r3, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1cbe:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1cc0:	4a11      	ldr	r2, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc2:	4b11      	ldr	r3, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1cca:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	603b      	str	r3, [r7, #0]
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1cd6:	d004      	beq.n	1ce2 <RCC_HSEConfig+0x36>
    1cd8:	683b      	ldr	r3, [r7, #0]
    1cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1cde:	d007      	beq.n	1cf0 <RCC_HSEConfig+0x44>
    1ce0:	e00c      	b.n	1cfc <RCC_HSEConfig+0x50>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1ce2:	4a09      	ldr	r2, [pc, #36]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce4:	4b08      	ldr	r3, [pc, #32]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cec:	6013      	str	r3, [r2, #0]
    1cee:	e005      	b.n	1cfc <RCC_HSEConfig+0x50>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1cf0:	4a05      	ldr	r2, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf2:	4b05      	ldr	r3, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    1cfa:	6013      	str	r3, [r2, #0]
      break;
      
    default:
      break;
  }
}
    1cfc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			(mov r8, r8)
    1d08:	40021000 	.word	0x40021000

00001d0c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b082      	sub	sp, #8
    1d10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1d12:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d16:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1d18:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d1c:	71bb      	strb	r3, [r7, #6]
  FlagStatus HSEStatus = RESET;
    1d1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d22:	71fb      	strb	r3, [r7, #7]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1d24:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d28:	f000 fc68 	bl	25fc <RCC_GetFlagStatus>
    1d2c:	4603      	mov	r3, r0
    1d2e:	71fb      	strb	r3, [r7, #7]
    StartUpCounter++;  
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1d36:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
    1d38:	683b      	ldr	r3, [r7, #0]
    1d3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1d3e:	d002      	beq.n	1d46 <RCC_WaitForHSEStartUp+0x3a>
    1d40:	79fb      	ldrb	r3, [r7, #7]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d0ee      	beq.n	1d24 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1d46:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d4a:	f000 fc57 	bl	25fc <RCC_GetFlagStatus>
    1d4e:	4603      	mov	r3, r0
    1d50:	2b00      	cmp	r3, #0
    1d52:	d003      	beq.n	1d5c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1d54:	f04f 0301 	mov.w	r3, #1	; 0x1
    1d58:	71bb      	strb	r3, [r7, #6]
    1d5a:	e002      	b.n	1d62 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d60:	71bb      	strb	r3, [r7, #6]
  }  
  return (status);
    1d62:	79bb      	ldrb	r3, [r7, #6]
}
    1d64:	4618      	mov	r0, r3
    1d66:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	46c0      	nop			(mov r8, r8)

00001d70 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1d70:	b480      	push	{r7}
    1d72:	b085      	sub	sp, #20
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1d7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1d80:	4b0a      	ldr	r3, [pc, #40]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1d8c:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1d8e:	79fb      	ldrb	r3, [r7, #7]
    1d90:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	ea43 0302 	orr.w	r3, r3, r2
    1d9a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1d9c:	4a03      	ldr	r2, [pc, #12]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	6013      	str	r3, [r2, #0]
}
    1da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr
    1dac:	40021000 	.word	0x40021000

00001db0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	4603      	mov	r3, r0
    1db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1dba:	4a04      	ldr	r2, [pc, #16]	(1dcc <RCC_HSICmd+0x1c>)
    1dbc:	79fb      	ldrb	r3, [r7, #7]
    1dbe:	6013      	str	r3, [r2, #0]
}
    1dc0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1dc4:	46bd      	mov	sp, r7
    1dc6:	bc80      	pop	{r7}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			(mov r8, r8)
    1dcc:	42420000 	.word	0x42420000

00001dd0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b085      	sub	sp, #20
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1dda:	f04f 0300 	mov.w	r3, #0	; 0x0
    1dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1de0:	4b0b      	ldr	r3, [pc, #44]	(1e10 <RCC_PLLConfig+0x40>)
    1de2:	685b      	ldr	r3, [r3, #4]
    1de4:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1de6:	68fb      	ldr	r3, [r7, #12]
    1de8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
    1dec:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1dee:	687a      	ldr	r2, [r7, #4]
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	ea42 0203 	orr.w	r2, r2, r3
    1df6:	68fb      	ldr	r3, [r7, #12]
    1df8:	ea43 0302 	orr.w	r3, r3, r2
    1dfc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1dfe:	4a04      	ldr	r2, [pc, #16]	(1e10 <RCC_PLLConfig+0x40>)
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	6053      	str	r3, [r2, #4]
}
    1e04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e08:	46bd      	mov	sp, r7
    1e0a:	bc80      	pop	{r7}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			(mov r8, r8)
    1e10:	40021000 	.word	0x40021000

00001e14 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	4603      	mov	r3, r0
    1e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1e1e:	4a04      	ldr	r2, [pc, #16]	(1e30 <RCC_PLLCmd+0x1c>)
    1e20:	79fb      	ldrb	r3, [r7, #7]
    1e22:	6013      	str	r3, [r2, #0]
}
    1e24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1e28:	46bd      	mov	sp, r7
    1e2a:	bc80      	pop	{r7}
    1e2c:	4770      	bx	lr
    1e2e:	46c0      	nop			(mov r8, r8)
    1e30:	42420060 	.word	0x42420060

00001e34 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
    1e34:	b480      	push	{r7}
    1e36:	b085      	sub	sp, #20
    1e38:	af00      	add	r7, sp, #0
    1e3a:	6078      	str	r0, [r7, #4]
    1e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
    1e44:	4b0c      	ldr	r3, [pc, #48]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e46:	6adb      	ldr	r3, [r3, #44]
    1e48:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1e50:	f023 030f 	bic.w	r3, r3, #15	; 0xf
    1e54:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
    1e56:	687a      	ldr	r2, [r7, #4]
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	ea42 0203 	orr.w	r2, r2, r3
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	ea43 0302 	orr.w	r3, r3, r2
    1e64:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1e66:	4a04      	ldr	r2, [pc, #16]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	62d3      	str	r3, [r2, #44]
}
    1e6c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e70:	46bd      	mov	sp, r7
    1e72:	bc80      	pop	{r7}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			(mov r8, r8)
    1e78:	40021000 	.word	0x40021000

00001e7c <RCC_PREDIV2Config>:
  * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
  *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b085      	sub	sp, #20
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1e84:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
    1e8a:	4b0a      	ldr	r3, [pc, #40]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1e8c:	6adb      	ldr	r3, [r3, #44]
    1e8e:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e96:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	ea42 0303 	orr.w	r3, r2, r3
    1ea0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ea2:	4a04      	ldr	r2, [pc, #16]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	62d3      	str	r3, [r2, #44]
}
    1ea8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1eac:	46bd      	mov	sp, r7
    1eae:	bc80      	pop	{r7}
    1eb0:	4770      	bx	lr
    1eb2:	46c0      	nop			(mov r8, r8)
    1eb4:	40021000 	.word	0x40021000

00001eb8 <RCC_PLL2Config>:
  * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
  *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
{
    1eb8:	b480      	push	{r7}
    1eba:	b085      	sub	sp, #20
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1ec0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
    1ec6:	4b0a      	ldr	r3, [pc, #40]	(1ef0 <RCC_PLL2Config+0x38>)
    1ec8:	6adb      	ldr	r3, [r3, #44]
    1eca:	60fb      	str	r3, [r7, #12]
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
    1ecc:	68fb      	ldr	r3, [r7, #12]
    1ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    1ed2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
    1ed4:	68fa      	ldr	r2, [r7, #12]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	ea42 0303 	orr.w	r3, r2, r3
    1edc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ede:	4a04      	ldr	r2, [pc, #16]	(1ef0 <RCC_PLL2Config+0x38>)
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	62d3      	str	r3, [r2, #44]
}
    1ee4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ee8:	46bd      	mov	sp, r7
    1eea:	bc80      	pop	{r7}
    1eec:	4770      	bx	lr
    1eee:	46c0      	nop			(mov r8, r8)
    1ef0:	40021000 	.word	0x40021000

00001ef4 <RCC_PLL2Cmd>:
  *   - This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL2Cmd(FunctionalState NewState)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	4603      	mov	r3, r0
    1efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
    1efe:	4a04      	ldr	r2, [pc, #16]	(1f10 <RCC_PLL2Cmd+0x1c>)
    1f00:	79fb      	ldrb	r3, [r7, #7]
    1f02:	6013      	str	r3, [r2, #0]
}
    1f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f08:	46bd      	mov	sp, r7
    1f0a:	bc80      	pop	{r7}
    1f0c:	4770      	bx	lr
    1f0e:	46c0      	nop			(mov r8, r8)
    1f10:	42420068 	.word	0x42420068

00001f14 <RCC_PLL3Config>:
  * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
  *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
{
    1f14:	b480      	push	{r7}
    1f16:	b085      	sub	sp, #20
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
    1f22:	4b0a      	ldr	r3, [pc, #40]	(1f4c <RCC_PLL3Config+0x38>)
    1f24:	6adb      	ldr	r3, [r3, #44]
    1f26:	60fb      	str	r3, [r7, #12]
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    1f2e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
    1f30:	68fa      	ldr	r2, [r7, #12]
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	ea42 0303 	orr.w	r3, r2, r3
    1f38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1f3a:	4a04      	ldr	r2, [pc, #16]	(1f4c <RCC_PLL3Config+0x38>)
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	62d3      	str	r3, [r2, #44]
}
    1f40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1f44:	46bd      	mov	sp, r7
    1f46:	bc80      	pop	{r7}
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			(mov r8, r8)
    1f4c:	40021000 	.word	0x40021000

00001f50 <RCC_PLL3Cmd>:
  * @note   This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL3Cmd(FunctionalState NewState)
{
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	4603      	mov	r3, r0
    1f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
    1f5a:	4a04      	ldr	r2, [pc, #16]	(1f6c <RCC_PLL3Cmd+0x1c>)
    1f5c:	79fb      	ldrb	r3, [r7, #7]
    1f5e:	6013      	str	r3, [r2, #0]
}
    1f60:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f64:	46bd      	mov	sp, r7
    1f66:	bc80      	pop	{r7}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			(mov r8, r8)
    1f6c:	42420070 	.word	0x42420070

00001f70 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1f70:	b480      	push	{r7}
    1f72:	b085      	sub	sp, #20
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f78:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1f7e:	4b0a      	ldr	r3, [pc, #40]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f80:	685b      	ldr	r3, [r3, #4]
    1f82:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    1f8a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1f8c:	68fa      	ldr	r2, [r7, #12]
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	ea42 0303 	orr.w	r3, r2, r3
    1f94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1f96:	4a04      	ldr	r2, [pc, #16]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	6053      	str	r3, [r2, #4]
}
    1f9c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bc80      	pop	{r7}
    1fa4:	4770      	bx	lr
    1fa6:	46c0      	nop			(mov r8, r8)
    1fa8:	40021000 	.word	0x40021000

00001fac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1fac:	b480      	push	{r7}
    1fae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1fb0:	4b04      	ldr	r3, [pc, #16]	(1fc4 <RCC_GetSYSCLKSource+0x18>)
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
    1fba:	4618      	mov	r0, r3
    1fbc:	46bd      	mov	sp, r7
    1fbe:	bc80      	pop	{r7}
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			(mov r8, r8)
    1fc4:	40021000 	.word	0x40021000

00001fc8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1fc8:	b480      	push	{r7}
    1fca:	b085      	sub	sp, #20
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1fd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1fd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1fd6:	4b0a      	ldr	r3, [pc, #40]	(2000 <RCC_HCLKConfig+0x38>)
    1fd8:	685b      	ldr	r3, [r3, #4]
    1fda:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fe2:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1fe4:	68fa      	ldr	r2, [r7, #12]
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	ea42 0303 	orr.w	r3, r2, r3
    1fec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1fee:	4a04      	ldr	r2, [pc, #16]	(2000 <RCC_HCLKConfig+0x38>)
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	6053      	str	r3, [r2, #4]
}
    1ff4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bc80      	pop	{r7}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			(mov r8, r8)
    2000:	40021000 	.word	0x40021000

00002004 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    2004:	b480      	push	{r7}
    2006:	b085      	sub	sp, #20
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    200c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2010:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2012:	4b0a      	ldr	r3, [pc, #40]	(203c <RCC_PCLK1Config+0x38>)
    2014:	685b      	ldr	r3, [r3, #4]
    2016:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    201e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    2020:	68fa      	ldr	r2, [r7, #12]
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	ea42 0303 	orr.w	r3, r2, r3
    2028:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    202a:	4a04      	ldr	r2, [pc, #16]	(203c <RCC_PCLK1Config+0x38>)
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	6053      	str	r3, [r2, #4]
}
    2030:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2034:	46bd      	mov	sp, r7
    2036:	bc80      	pop	{r7}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			(mov r8, r8)
    203c:	40021000 	.word	0x40021000

00002040 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    2040:	b480      	push	{r7}
    2042:	b085      	sub	sp, #20
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2048:	f04f 0300 	mov.w	r3, #0	; 0x0
    204c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    204e:	4b0b      	ldr	r3, [pc, #44]	(207c <RCC_PCLK2Config+0x3c>)
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    205a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	ea43 0302 	orr.w	r3, r3, r2
    2068:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    206a:	4a04      	ldr	r2, [pc, #16]	(207c <RCC_PCLK2Config+0x3c>)
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	6053      	str	r3, [r2, #4]
}
    2070:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2074:	46bd      	mov	sp, r7
    2076:	bc80      	pop	{r7}
    2078:	4770      	bx	lr
    207a:	46c0      	nop			(mov r8, r8)
    207c:	40021000 	.word	0x40021000

00002080 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    2080:	b480      	push	{r7}
    2082:	b083      	sub	sp, #12
    2084:	af00      	add	r7, sp, #0
    2086:	4603      	mov	r3, r0
    2088:	460a      	mov	r2, r1
    208a:	71fb      	strb	r3, [r7, #7]
    208c:	4613      	mov	r3, r2
    208e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2090:	79bb      	ldrb	r3, [r7, #6]
    2092:	2b00      	cmp	r3, #0
    2094:	d009      	beq.n	20aa <RCC_ITConfig+0x2a>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    2096:	490d      	ldr	r1, [pc, #52]	(20cc <RCC_ITConfig+0x4c>)
    2098:	4b0c      	ldr	r3, [pc, #48]	(20cc <RCC_ITConfig+0x4c>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b2da      	uxtb	r2, r3
    209e:	79fb      	ldrb	r3, [r7, #7]
    20a0:	ea42 0303 	orr.w	r3, r2, r3
    20a4:	b2db      	uxtb	r3, r3
    20a6:	700b      	strb	r3, [r1, #0]
    20a8:	e00b      	b.n	20c2 <RCC_ITConfig+0x42>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    20aa:	4908      	ldr	r1, [pc, #32]	(20cc <RCC_ITConfig+0x4c>)
    20ac:	4b07      	ldr	r3, [pc, #28]	(20cc <RCC_ITConfig+0x4c>)
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	b2da      	uxtb	r2, r3
    20b2:	79fb      	ldrb	r3, [r7, #7]
    20b4:	ea6f 0303 	mvn.w	r3, r3
    20b8:	b2db      	uxtb	r3, r3
    20ba:	ea02 0303 	and.w	r3, r2, r3
    20be:	b2db      	uxtb	r3, r3
    20c0:	700b      	strb	r3, [r1, #0]
  }
}
    20c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20c6:	46bd      	mov	sp, r7
    20c8:	bc80      	pop	{r7}
    20ca:	4770      	bx	lr
    20cc:	40021009 	.word	0x40021009

000020d0 <RCC_OTGFSCLKConfig>:
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  * @retval None
  */
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
    20d0:	b480      	push	{r7}
    20d2:	b083      	sub	sp, #12
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
    20d8:	4a03      	ldr	r2, [pc, #12]	(20e8 <RCC_OTGFSCLKConfig+0x18>)
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	6013      	str	r3, [r2, #0]
}
    20de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20e2:	46bd      	mov	sp, r7
    20e4:	bc80      	pop	{r7}
    20e6:	4770      	bx	lr
    20e8:	424200d8 	.word	0x424200d8

000020ec <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    20ec:	b480      	push	{r7}
    20ee:	b085      	sub	sp, #20
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    20f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    20f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    20fa:	4b0a      	ldr	r3, [pc, #40]	(2124 <RCC_ADCCLKConfig+0x38>)
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    2106:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    2108:	68fa      	ldr	r2, [r7, #12]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	ea42 0303 	orr.w	r3, r2, r3
    2110:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2112:	4a04      	ldr	r2, [pc, #16]	(2124 <RCC_ADCCLKConfig+0x38>)
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	6053      	str	r3, [r2, #4]
}
    2118:	f107 0714 	add.w	r7, r7, #20	; 0x14
    211c:	46bd      	mov	sp, r7
    211e:	bc80      	pop	{r7}
    2120:	4770      	bx	lr
    2122:	46c0      	nop			(mov r8, r8)
    2124:	40021000 	.word	0x40021000

00002128 <RCC_I2S2CLKConfig>:
  *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
  *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
  * @retval None
  */
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
    2128:	b480      	push	{r7}
    212a:	b083      	sub	sp, #12
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
    2130:	4a03      	ldr	r2, [pc, #12]	(2140 <RCC_I2S2CLKConfig+0x18>)
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	6013      	str	r3, [r2, #0]
}
    2136:	f107 070c 	add.w	r7, r7, #12	; 0xc
    213a:	46bd      	mov	sp, r7
    213c:	bc80      	pop	{r7}
    213e:	4770      	bx	lr
    2140:	424205c4 	.word	0x424205c4

00002144 <RCC_I2S3CLKConfig>:
  *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
  *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
  * @retval None
  */
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
    2144:	b480      	push	{r7}
    2146:	b083      	sub	sp, #12
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
    214c:	4a03      	ldr	r2, [pc, #12]	(215c <RCC_I2S3CLKConfig+0x18>)
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	6013      	str	r3, [r2, #0]
}
    2152:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2156:	46bd      	mov	sp, r7
    2158:	bc80      	pop	{r7}
    215a:	4770      	bx	lr
    215c:	424205c8 	.word	0x424205c8

00002160 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    2160:	b480      	push	{r7}
    2162:	b083      	sub	sp, #12
    2164:	af00      	add	r7, sp, #0
    2166:	4603      	mov	r3, r0
    2168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    216a:	4a0f      	ldr	r2, [pc, #60]	(21a8 <RCC_LSEConfig+0x48>)
    216c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2170:	7013      	strb	r3, [r2, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2172:	4a0d      	ldr	r2, [pc, #52]	(21a8 <RCC_LSEConfig+0x48>)
    2174:	f04f 0300 	mov.w	r3, #0	; 0x0
    2178:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    217a:	79fb      	ldrb	r3, [r7, #7]
    217c:	603b      	str	r3, [r7, #0]
    217e:	683b      	ldr	r3, [r7, #0]
    2180:	2b01      	cmp	r3, #1
    2182:	d003      	beq.n	218c <RCC_LSEConfig+0x2c>
    2184:	683b      	ldr	r3, [r7, #0]
    2186:	2b04      	cmp	r3, #4
    2188:	d005      	beq.n	2196 <RCC_LSEConfig+0x36>
    218a:	e008      	b.n	219e <RCC_LSEConfig+0x3e>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    218c:	4b06      	ldr	r3, [pc, #24]	(21a8 <RCC_LSEConfig+0x48>)
    218e:	f04f 0201 	mov.w	r2, #1	; 0x1
    2192:	701a      	strb	r2, [r3, #0]
    2194:	e003      	b.n	219e <RCC_LSEConfig+0x3e>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    2196:	4b04      	ldr	r3, [pc, #16]	(21a8 <RCC_LSEConfig+0x48>)
    2198:	f04f 0205 	mov.w	r2, #5	; 0x5
    219c:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    219e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21a2:	46bd      	mov	sp, r7
    21a4:	bc80      	pop	{r7}
    21a6:	4770      	bx	lr
    21a8:	40021020 	.word	0x40021020

000021ac <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    21ac:	b480      	push	{r7}
    21ae:	b083      	sub	sp, #12
    21b0:	af00      	add	r7, sp, #0
    21b2:	4603      	mov	r3, r0
    21b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    21b6:	4a04      	ldr	r2, [pc, #16]	(21c8 <RCC_LSICmd+0x1c>)
    21b8:	79fb      	ldrb	r3, [r7, #7]
    21ba:	6013      	str	r3, [r2, #0]
}
    21bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21c0:	46bd      	mov	sp, r7
    21c2:	bc80      	pop	{r7}
    21c4:	4770      	bx	lr
    21c6:	46c0      	nop			(mov r8, r8)
    21c8:	42420480 	.word	0x42420480

000021cc <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    21cc:	b480      	push	{r7}
    21ce:	b083      	sub	sp, #12
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    21d4:	4905      	ldr	r1, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d6:	4b05      	ldr	r3, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d8:	6a1a      	ldr	r2, [r3, #32]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	ea42 0303 	orr.w	r3, r2, r3
    21e0:	620b      	str	r3, [r1, #32]
}
    21e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21e6:	46bd      	mov	sp, r7
    21e8:	bc80      	pop	{r7}
    21ea:	4770      	bx	lr
    21ec:	40021000 	.word	0x40021000

000021f0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    21f0:	b480      	push	{r7}
    21f2:	b083      	sub	sp, #12
    21f4:	af00      	add	r7, sp, #0
    21f6:	4603      	mov	r3, r0
    21f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    21fa:	4a04      	ldr	r2, [pc, #16]	(220c <RCC_RTCCLKCmd+0x1c>)
    21fc:	79fb      	ldrb	r3, [r7, #7]
    21fe:	6013      	str	r3, [r2, #0]
}
    2200:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2204:	46bd      	mov	sp, r7
    2206:	bc80      	pop	{r7}
    2208:	4770      	bx	lr
    220a:	46c0      	nop			(mov r8, r8)
    220c:	4242043c 	.word	0x4242043c

00002210 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    2210:	b480      	push	{r7}
    2212:	b08b      	sub	sp, #44
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    2218:	f04f 0300 	mov.w	r3, #0	; 0x0
    221c:	60bb      	str	r3, [r7, #8]
    221e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2222:	60fb      	str	r3, [r7, #12]
    2224:	f04f 0300 	mov.w	r3, #0	; 0x0
    2228:	613b      	str	r3, [r7, #16]
    222a:	f04f 0300 	mov.w	r3, #0	; 0x0
    222e:	617b      	str	r3, [r7, #20]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
    2230:	f04f 0300 	mov.w	r3, #0	; 0x0
    2234:	61bb      	str	r3, [r7, #24]
    2236:	f04f 0300 	mov.w	r3, #0	; 0x0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2240:	623b      	str	r3, [r7, #32]
    2242:	f04f 0300 	mov.w	r3, #0	; 0x0
    2246:	627b      	str	r3, [r7, #36]
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    2248:	4b68      	ldr	r3, [pc, #416]	(23ec <RCC_GetClocksFreq+0x1dc>)
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	f003 030c 	and.w	r3, r3, #12	; 0xc
    2250:	60bb      	str	r3, [r7, #8]
  
  switch (tmp)
    2252:	68bb      	ldr	r3, [r7, #8]
    2254:	603b      	str	r3, [r7, #0]
    2256:	683b      	ldr	r3, [r7, #0]
    2258:	2b04      	cmp	r3, #4
    225a:	d009      	beq.n	2270 <RCC_GetClocksFreq+0x60>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b08      	cmp	r3, #8
    2260:	d00a      	beq.n	2278 <RCC_GetClocksFreq+0x68>
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	2b00      	cmp	r3, #0
    2266:	d165      	bne.n	2334 <RCC_GetClocksFreq+0x124>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	4b61      	ldr	r3, [pc, #388]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    226c:	6013      	str	r3, [r2, #0]
    226e:	e064      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    2270:	687a      	ldr	r2, [r7, #4]
    2272:	4b60      	ldr	r3, [pc, #384]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2274:	6013      	str	r3, [r2, #0]
    2276:	e060      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    2278:	4b5c      	ldr	r3, [pc, #368]	(23ec <RCC_GetClocksFreq+0x1dc>)
    227a:	685b      	ldr	r3, [r3, #4]
    227c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    2280:	60fb      	str	r3, [r7, #12]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    2282:	4b5a      	ldr	r3, [pc, #360]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    228a:	613b      	str	r3, [r7, #16]
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
#else
      pllmull = pllmull >> 18;
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2292:	60fb      	str	r3, [r7, #12]
      
      if (pllmull != 0x0D)
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2b0d      	cmp	r3, #13
    2298:	d004      	beq.n	22a4 <RCC_GetClocksFreq+0x94>
      {
         pllmull += 2;
    229a:	68fb      	ldr	r3, [r7, #12]
    229c:	f103 0302 	add.w	r3, r3, #2	; 0x2
    22a0:	60fb      	str	r3, [r7, #12]
    22a2:	e002      	b.n	22aa <RCC_GetClocksFreq+0x9a>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
    22a4:	f04f 0306 	mov.w	r3, #6	; 0x6
    22a8:	60fb      	str	r3, [r7, #12]
      }
            
      if (pllsource == 0x00)
    22aa:	693b      	ldr	r3, [r7, #16]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d106      	bne.n	22be <RCC_GetClocksFreq+0xae>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    22b0:	68fa      	ldr	r2, [r7, #12]
    22b2:	4b51      	ldr	r3, [pc, #324]	(23f8 <RCC_GetClocksFreq+0x1e8>)
    22b4:	fb03 f202 	mul.w	r2, r3, r2
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	601a      	str	r2, [r3, #0]
    22bc:	e03d      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
    22be:	4b4b      	ldr	r3, [pc, #300]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22c0:	6adb      	ldr	r3, [r3, #44]
    22c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    22c6:	61bb      	str	r3, [r7, #24]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
    22c8:	4b48      	ldr	r3, [pc, #288]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22ca:	6adb      	ldr	r3, [r3, #44]
    22cc:	f003 030f 	and.w	r3, r3, #15	; 0xf
    22d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    22d4:	61fb      	str	r3, [r7, #28]
        
        if (prediv1source == 0)
    22d6:	69bb      	ldr	r3, [r7, #24]
    22d8:	2b00      	cmp	r3, #0
    22da:	d109      	bne.n	22f0 <RCC_GetClocksFreq+0xe0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
    22dc:	4a45      	ldr	r2, [pc, #276]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    22de:	69fb      	ldr	r3, [r7, #28]
    22e0:	fbb2 f2f3 	udiv	r2, r2, r3
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	fb03 f202 	mul.w	r2, r3, r2
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	601a      	str	r2, [r3, #0]
    22ee:	e024      	b.n	233a <RCC_GetClocksFreq+0x12a>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
    22f0:	4b3e      	ldr	r3, [pc, #248]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22f2:	6adb      	ldr	r3, [r3, #44]
    22f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    22f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    22fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    2300:	623b      	str	r3, [r7, #32]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
    2302:	4b3a      	ldr	r3, [pc, #232]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2304:	6adb      	ldr	r3, [r3, #44]
    2306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    230a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    230e:	f103 0302 	add.w	r3, r3, #2	; 0x2
    2312:	627b      	str	r3, [r7, #36]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
    2314:	4a37      	ldr	r2, [pc, #220]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2316:	6a3b      	ldr	r3, [r7, #32]
    2318:	fbb2 f2f3 	udiv	r2, r2, r3
    231c:	6a7b      	ldr	r3, [r7, #36]
    231e:	fb03 f202 	mul.w	r2, r3, r2
    2322:	69fb      	ldr	r3, [r7, #28]
    2324:	fbb2 f2f3 	udiv	r2, r2, r3
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	fb03 f202 	mul.w	r2, r3, r2
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	601a      	str	r2, [r3, #0]
    2332:	e002      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2334:	687a      	ldr	r2, [r7, #4]
    2336:	4b2e      	ldr	r3, [pc, #184]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    2338:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    233a:	4b2c      	ldr	r3, [pc, #176]	(23ec <RCC_GetClocksFreq+0x1dc>)
    233c:	685b      	ldr	r3, [r3, #4]
    233e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2342:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    2344:	68bb      	ldr	r3, [r7, #8]
    2346:	ea4f 1313 	mov.w	r3, r3, lsr #4
    234a:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    234c:	68ba      	ldr	r2, [r7, #8]
    234e:	4b2b      	ldr	r3, [pc, #172]	(23fc <RCC_GetClocksFreq+0x1ec>)
    2350:	5c9b      	ldrb	r3, [r3, r2]
    2352:	b2db      	uxtb	r3, r3
    2354:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	fa22 f203 	lsr.w	r2, r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    2364:	4b21      	ldr	r3, [pc, #132]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    236c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    236e:	68bb      	ldr	r3, [r7, #8]
    2370:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2374:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    2376:	68ba      	ldr	r2, [r7, #8]
    2378:	4b20      	ldr	r3, [pc, #128]	(23fc <RCC_GetClocksFreq+0x1ec>)
    237a:	5c9b      	ldrb	r3, [r3, r2]
    237c:	b2db      	uxtb	r3, r3
    237e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	685a      	ldr	r2, [r3, #4]
    2384:	697b      	ldr	r3, [r7, #20]
    2386:	fa22 f203 	lsr.w	r2, r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    238e:	4b17      	ldr	r3, [pc, #92]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    2396:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    239e:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    23a0:	68ba      	ldr	r2, [r7, #8]
    23a2:	4b16      	ldr	r3, [pc, #88]	(23fc <RCC_GetClocksFreq+0x1ec>)
    23a4:	5c9b      	ldrb	r3, [r3, r2]
    23a6:	b2db      	uxtb	r3, r3
    23a8:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	685a      	ldr	r2, [r3, #4]
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	fa22 f203 	lsr.w	r2, r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    23b8:	4b0c      	ldr	r3, [pc, #48]	(23ec <RCC_GetClocksFreq+0x1dc>)
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    23c0:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    23c2:	68bb      	ldr	r3, [r7, #8]
    23c4:	ea4f 3393 	mov.w	r3, r3, lsr #14
    23c8:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    23ca:	68ba      	ldr	r2, [r7, #8]
    23cc:	4b0c      	ldr	r3, [pc, #48]	(2400 <RCC_GetClocksFreq+0x1f0>)
    23ce:	5c9b      	ldrb	r3, [r3, r2]
    23d0:	b2db      	uxtb	r3, r3
    23d2:	617b      	str	r3, [r7, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68da      	ldr	r2, [r3, #12]
    23d8:	697b      	ldr	r3, [r7, #20]
    23da:	fbb2 f2f3 	udiv	r2, r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	611a      	str	r2, [r3, #16]
}
    23e2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    23e6:	46bd      	mov	sp, r7
    23e8:	bc80      	pop	{r7}
    23ea:	4770      	bx	lr
    23ec:	40021000 	.word	0x40021000
    23f0:	007a1200 	.word	0x007a1200
    23f4:	017d7840 	.word	0x017d7840
    23f8:	003d0900 	.word	0x003d0900
    23fc:	20000000 	.word	0x20000000
    2400:	20000010 	.word	0x20000010

00002404 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	460b      	mov	r3, r1
    240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2410:	78fb      	ldrb	r3, [r7, #3]
    2412:	2b00      	cmp	r3, #0
    2414:	d007      	beq.n	2426 <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    2416:	490b      	ldr	r1, [pc, #44]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2418:	4b0a      	ldr	r3, [pc, #40]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    241a:	695a      	ldr	r2, [r3, #20]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	ea42 0303 	orr.w	r3, r2, r3
    2422:	614b      	str	r3, [r1, #20]
    2424:	e008      	b.n	2438 <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    2426:	4907      	ldr	r1, [pc, #28]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2428:	4b06      	ldr	r3, [pc, #24]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    242a:	695a      	ldr	r2, [r3, #20]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	ea6f 0303 	mvn.w	r3, r3
    2432:	ea02 0303 	and.w	r3, r2, r3
    2436:	614b      	str	r3, [r1, #20]
  }
}
    2438:	f107 070c 	add.w	r7, r7, #12	; 0xc
    243c:	46bd      	mov	sp, r7
    243e:	bc80      	pop	{r7}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			(mov r8, r8)
    2444:	40021000 	.word	0x40021000

00002448 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2448:	b480      	push	{r7}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2454:	78fb      	ldrb	r3, [r7, #3]
    2456:	2b00      	cmp	r3, #0
    2458:	d007      	beq.n	246a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    245a:	490b      	ldr	r1, [pc, #44]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245c:	4b0a      	ldr	r3, [pc, #40]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245e:	699a      	ldr	r2, [r3, #24]
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	ea42 0303 	orr.w	r3, r2, r3
    2466:	618b      	str	r3, [r1, #24]
    2468:	e008      	b.n	247c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    246a:	4907      	ldr	r1, [pc, #28]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246c:	4b06      	ldr	r3, [pc, #24]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246e:	699a      	ldr	r2, [r3, #24]
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	ea6f 0303 	mvn.w	r3, r3
    2476:	ea02 0303 	and.w	r3, r2, r3
    247a:	618b      	str	r3, [r1, #24]
  }
}
    247c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2480:	46bd      	mov	sp, r7
    2482:	bc80      	pop	{r7}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			(mov r8, r8)
    2488:	40021000 	.word	0x40021000

0000248c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    248c:	b480      	push	{r7}
    248e:	b083      	sub	sp, #12
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    2494:	460b      	mov	r3, r1
    2496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2498:	78fb      	ldrb	r3, [r7, #3]
    249a:	2b00      	cmp	r3, #0
    249c:	d007      	beq.n	24ae <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    249e:	490b      	ldr	r1, [pc, #44]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a0:	4b0a      	ldr	r3, [pc, #40]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a2:	69da      	ldr	r2, [r3, #28]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	ea42 0303 	orr.w	r3, r2, r3
    24aa:	61cb      	str	r3, [r1, #28]
    24ac:	e008      	b.n	24c0 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    24ae:	4907      	ldr	r1, [pc, #28]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b0:	4b06      	ldr	r3, [pc, #24]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b2:	69da      	ldr	r2, [r3, #28]
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	ea6f 0303 	mvn.w	r3, r3
    24ba:	ea02 0303 	and.w	r3, r2, r3
    24be:	61cb      	str	r3, [r1, #28]
  }
}
    24c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    24c4:	46bd      	mov	sp, r7
    24c6:	bc80      	pop	{r7}
    24c8:	4770      	bx	lr
    24ca:	46c0      	nop			(mov r8, r8)
    24cc:	40021000 	.word	0x40021000

000024d0 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    24d0:	b480      	push	{r7}
    24d2:	b083      	sub	sp, #12
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    24d8:	460b      	mov	r3, r1
    24da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    24dc:	78fb      	ldrb	r3, [r7, #3]
    24de:	2b00      	cmp	r3, #0
    24e0:	d007      	beq.n	24f2 <RCC_AHBPeriphResetCmd+0x22>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
    24e2:	490b      	ldr	r1, [pc, #44]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e4:	4b0a      	ldr	r3, [pc, #40]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e6:	6a9a      	ldr	r2, [r3, #40]
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	ea42 0303 	orr.w	r3, r2, r3
    24ee:	628b      	str	r3, [r1, #40]
    24f0:	e008      	b.n	2504 <RCC_AHBPeriphResetCmd+0x34>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
    24f2:	4907      	ldr	r1, [pc, #28]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f4:	4b06      	ldr	r3, [pc, #24]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f6:	6a9a      	ldr	r2, [r3, #40]
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	ea6f 0303 	mvn.w	r3, r3
    24fe:	ea02 0303 	and.w	r3, r2, r3
    2502:	628b      	str	r3, [r1, #40]
  }
}
    2504:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2508:	46bd      	mov	sp, r7
    250a:	bc80      	pop	{r7}
    250c:	4770      	bx	lr
    250e:	46c0      	nop			(mov r8, r8)
    2510:	40021000 	.word	0x40021000

00002514 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2514:	b480      	push	{r7}
    2516:	b083      	sub	sp, #12
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	460b      	mov	r3, r1
    251e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2520:	78fb      	ldrb	r3, [r7, #3]
    2522:	2b00      	cmp	r3, #0
    2524:	d007      	beq.n	2536 <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2526:	490b      	ldr	r1, [pc, #44]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2528:	4b0a      	ldr	r3, [pc, #40]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    252a:	68da      	ldr	r2, [r3, #12]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	ea42 0303 	orr.w	r3, r2, r3
    2532:	60cb      	str	r3, [r1, #12]
    2534:	e008      	b.n	2548 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2536:	4907      	ldr	r1, [pc, #28]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2538:	4b06      	ldr	r3, [pc, #24]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    253a:	68da      	ldr	r2, [r3, #12]
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	ea6f 0303 	mvn.w	r3, r3
    2542:	ea02 0303 	and.w	r3, r2, r3
    2546:	60cb      	str	r3, [r1, #12]
  }
}
    2548:	f107 070c 	add.w	r7, r7, #12	; 0xc
    254c:	46bd      	mov	sp, r7
    254e:	bc80      	pop	{r7}
    2550:	4770      	bx	lr
    2552:	46c0      	nop			(mov r8, r8)
    2554:	40021000 	.word	0x40021000

00002558 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2558:	b480      	push	{r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	460b      	mov	r3, r1
    2562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2564:	78fb      	ldrb	r3, [r7, #3]
    2566:	2b00      	cmp	r3, #0
    2568:	d007      	beq.n	257a <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    256a:	490b      	ldr	r1, [pc, #44]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256c:	4b0a      	ldr	r3, [pc, #40]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256e:	691a      	ldr	r2, [r3, #16]
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	ea42 0303 	orr.w	r3, r2, r3
    2576:	610b      	str	r3, [r1, #16]
    2578:	e008      	b.n	258c <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    257a:	4907      	ldr	r1, [pc, #28]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257c:	4b06      	ldr	r3, [pc, #24]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257e:	691a      	ldr	r2, [r3, #16]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	ea6f 0303 	mvn.w	r3, r3
    2586:	ea02 0303 	and.w	r3, r2, r3
    258a:	610b      	str	r3, [r1, #16]
  }
}
    258c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2590:	46bd      	mov	sp, r7
    2592:	bc80      	pop	{r7}
    2594:	4770      	bx	lr
    2596:	46c0      	nop			(mov r8, r8)
    2598:	40021000 	.word	0x40021000

0000259c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	4603      	mov	r3, r0
    25a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    25a6:	4a04      	ldr	r2, [pc, #16]	(25b8 <RCC_BackupResetCmd+0x1c>)
    25a8:	79fb      	ldrb	r3, [r7, #7]
    25aa:	6013      	str	r3, [r2, #0]
}
    25ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25b0:	46bd      	mov	sp, r7
    25b2:	bc80      	pop	{r7}
    25b4:	4770      	bx	lr
    25b6:	46c0      	nop			(mov r8, r8)
    25b8:	42420440 	.word	0x42420440

000025bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    25bc:	b480      	push	{r7}
    25be:	b083      	sub	sp, #12
    25c0:	af00      	add	r7, sp, #0
    25c2:	4603      	mov	r3, r0
    25c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    25c6:	4a04      	ldr	r2, [pc, #16]	(25d8 <RCC_ClockSecuritySystemCmd+0x1c>)
    25c8:	79fb      	ldrb	r3, [r7, #7]
    25ca:	6013      	str	r3, [r2, #0]
}
    25cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25d0:	46bd      	mov	sp, r7
    25d2:	bc80      	pop	{r7}
    25d4:	4770      	bx	lr
    25d6:	46c0      	nop			(mov r8, r8)
    25d8:	4242004c 	.word	0x4242004c

000025dc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    25dc:	b480      	push	{r7}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
    25e2:	4603      	mov	r3, r0
    25e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    25e6:	4a04      	ldr	r2, [pc, #16]	(25f8 <RCC_MCOConfig+0x1c>)
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	7013      	strb	r3, [r2, #0]
}
    25ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25f0:	46bd      	mov	sp, r7
    25f2:	bc80      	pop	{r7}
    25f4:	4770      	bx	lr
    25f6:	46c0      	nop			(mov r8, r8)
    25f8:	40021007 	.word	0x40021007

000025fc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    25fc:	b480      	push	{r7}
    25fe:	b087      	sub	sp, #28
    2600:	af00      	add	r7, sp, #0
    2602:	4603      	mov	r3, r0
    2604:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2606:	f04f 0300 	mov.w	r3, #0	; 0x0
    260a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    260c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2610:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    2612:	f04f 0300 	mov.w	r3, #0	; 0x0
    2616:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2618:	79fb      	ldrb	r3, [r7, #7]
    261a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    261e:	b2db      	uxtb	r3, r3
    2620:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	2b01      	cmp	r3, #1
    2626:	d103      	bne.n	2630 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    2628:	4b14      	ldr	r3, [pc, #80]	(267c <RCC_GetFlagStatus+0x80>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	613b      	str	r3, [r7, #16]
    262e:	e009      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	2b02      	cmp	r3, #2
    2634:	d103      	bne.n	263e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    2636:	4b11      	ldr	r3, [pc, #68]	(267c <RCC_GetFlagStatus+0x80>)
    2638:	6a1b      	ldr	r3, [r3, #32]
    263a:	613b      	str	r3, [r7, #16]
    263c:	e002      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    263e:	4b0f      	ldr	r3, [pc, #60]	(267c <RCC_GetFlagStatus+0x80>)
    2640:	6a5b      	ldr	r3, [r3, #36]
    2642:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2644:	79fb      	ldrb	r3, [r7, #7]
    2646:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    264a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    264c:	68fa      	ldr	r2, [r7, #12]
    264e:	693b      	ldr	r3, [r7, #16]
    2650:	fa23 f302 	lsr.w	r3, r3, r2
    2654:	f003 0301 	and.w	r3, r3, #1	; 0x1
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d003      	beq.n	2666 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
    265e:	f04f 0301 	mov.w	r3, #1	; 0x1
    2662:	75fb      	strb	r3, [r7, #23]
    2664:	e002      	b.n	266c <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
    2666:	f04f 0300 	mov.w	r3, #0	; 0x0
    266a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the flag status */
  return bitstatus;
    266c:	7dfb      	ldrb	r3, [r7, #23]
}
    266e:	4618      	mov	r0, r3
    2670:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2674:	46bd      	mov	sp, r7
    2676:	bc80      	pop	{r7}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			(mov r8, r8)
    267c:	40021000 	.word	0x40021000

00002680 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    2680:	b480      	push	{r7}
    2682:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    2684:	4a04      	ldr	r2, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2686:	4b04      	ldr	r3, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2688:	6a5b      	ldr	r3, [r3, #36]
    268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    268e:	6253      	str	r3, [r2, #36]
}
    2690:	46bd      	mov	sp, r7
    2692:	bc80      	pop	{r7}
    2694:	4770      	bx	lr
    2696:	46c0      	nop			(mov r8, r8)
    2698:	40021000 	.word	0x40021000

0000269c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    269c:	b480      	push	{r7}
    269e:	b085      	sub	sp, #20
    26a0:	af00      	add	r7, sp, #0
    26a2:	4603      	mov	r3, r0
    26a4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    26a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    26aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    26ac:	4b0a      	ldr	r3, [pc, #40]	(26d8 <RCC_GetITStatus+0x3c>)
    26ae:	689a      	ldr	r2, [r3, #8]
    26b0:	79fb      	ldrb	r3, [r7, #7]
    26b2:	ea02 0303 	and.w	r3, r2, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	d003      	beq.n	26c2 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    26ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    26be:	73fb      	strb	r3, [r7, #15]
    26c0:	e002      	b.n	26c8 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    26c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    26c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    26c8:	7bfb      	ldrb	r3, [r7, #15]
}
    26ca:	4618      	mov	r0, r3
    26cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    26d0:	46bd      	mov	sp, r7
    26d2:	bc80      	pop	{r7}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			(mov r8, r8)
    26d8:	40021000 	.word	0x40021000

000026dc <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    26dc:	b480      	push	{r7}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	4603      	mov	r3, r0
    26e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    26e6:	4a04      	ldr	r2, [pc, #16]	(26f8 <RCC_ClearITPendingBit+0x1c>)
    26e8:	79fb      	ldrb	r3, [r7, #7]
    26ea:	7013      	strb	r3, [r2, #0]
}
    26ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    26f0:	46bd      	mov	sp, r7
    26f2:	bc80      	pop	{r7}
    26f4:	4770      	bx	lr
    26f6:	46c0      	nop			(mov r8, r8)
    26f8:	4002100a 	.word	0x4002100a

000026fc <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    2704:	687a      	ldr	r2, [r7, #4]
    2706:	4b45      	ldr	r3, [pc, #276]	(281c <TIM_DeInit+0x120>)
    2708:	429a      	cmp	r2, r3
    270a:	d10c      	bne.n	2726 <TIM_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    270c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2710:	f04f 0101 	mov.w	r1, #1	; 0x1
    2714:	f7ff fefe 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    2718:	f44f 6000 	mov.w	r0, #2048	; 0x800
    271c:	f04f 0100 	mov.w	r1, #0	; 0x0
    2720:	f7ff fef8 	bl	2514 <RCC_APB2PeriphResetCmd>
    2724:	e075      	b.n	2812 <TIM_DeInit+0x116>
  }     
  else if (TIMx == TIM2)
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    272c:	d10c      	bne.n	2748 <TIM_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    272e:	f04f 0001 	mov.w	r0, #1	; 0x1
    2732:	f04f 0101 	mov.w	r1, #1	; 0x1
    2736:	f7ff ff0f 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    273a:	f04f 0001 	mov.w	r0, #1	; 0x1
    273e:	f04f 0100 	mov.w	r1, #0	; 0x0
    2742:	f7ff ff09 	bl	2558 <RCC_APB1PeriphResetCmd>
    2746:	e064      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM3)
    2748:	687a      	ldr	r2, [r7, #4]
    274a:	4b35      	ldr	r3, [pc, #212]	(2820 <TIM_DeInit+0x124>)
    274c:	429a      	cmp	r2, r3
    274e:	d10c      	bne.n	276a <TIM_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    2750:	f04f 0002 	mov.w	r0, #2	; 0x2
    2754:	f04f 0101 	mov.w	r1, #1	; 0x1
    2758:	f7ff fefe 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    275c:	f04f 0002 	mov.w	r0, #2	; 0x2
    2760:	f04f 0100 	mov.w	r1, #0	; 0x0
    2764:	f7ff fef8 	bl	2558 <RCC_APB1PeriphResetCmd>
    2768:	e053      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM4)
    276a:	687a      	ldr	r2, [r7, #4]
    276c:	4b2d      	ldr	r3, [pc, #180]	(2824 <TIM_DeInit+0x128>)
    276e:	429a      	cmp	r2, r3
    2770:	d10c      	bne.n	278c <TIM_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    2772:	f04f 0004 	mov.w	r0, #4	; 0x4
    2776:	f04f 0101 	mov.w	r1, #1	; 0x1
    277a:	f7ff feed 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    277e:	f04f 0004 	mov.w	r0, #4	; 0x4
    2782:	f04f 0100 	mov.w	r1, #0	; 0x0
    2786:	f7ff fee7 	bl	2558 <RCC_APB1PeriphResetCmd>
    278a:	e042      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM5)
    278c:	687a      	ldr	r2, [r7, #4]
    278e:	4b26      	ldr	r3, [pc, #152]	(2828 <TIM_DeInit+0x12c>)
    2790:	429a      	cmp	r2, r3
    2792:	d10c      	bne.n	27ae <TIM_DeInit+0xb2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    2794:	f04f 0008 	mov.w	r0, #8	; 0x8
    2798:	f04f 0101 	mov.w	r1, #1	; 0x1
    279c:	f7ff fedc 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    27a0:	f04f 0008 	mov.w	r0, #8	; 0x8
    27a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    27a8:	f7ff fed6 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ac:	e031      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM6)
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	4b1e      	ldr	r3, [pc, #120]	(282c <TIM_DeInit+0x130>)
    27b2:	429a      	cmp	r2, r3
    27b4:	d10c      	bne.n	27d0 <TIM_DeInit+0xd4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    27b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    27ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    27be:	f7ff fecb 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    27c2:	f04f 0010 	mov.w	r0, #16	; 0x10
    27c6:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ca:	f7ff fec5 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ce:	e020      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM7)
    27d0:	687a      	ldr	r2, [r7, #4]
    27d2:	4b17      	ldr	r3, [pc, #92]	(2830 <TIM_DeInit+0x134>)
    27d4:	429a      	cmp	r2, r3
    27d6:	d10c      	bne.n	27f2 <TIM_DeInit+0xf6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    27d8:	f04f 0020 	mov.w	r0, #32	; 0x20
    27dc:	f04f 0101 	mov.w	r1, #1	; 0x1
    27e0:	f7ff feba 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    27e4:	f04f 0020 	mov.w	r0, #32	; 0x20
    27e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ec:	f7ff feb4 	bl	2558 <RCC_APB1PeriphResetCmd>
    27f0:	e00f      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else
  {
    if (TIMx == TIM8)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	4b0f      	ldr	r3, [pc, #60]	(2834 <TIM_DeInit+0x138>)
    27f6:	429a      	cmp	r2, r3
    27f8:	d10b      	bne.n	2812 <TIM_DeInit+0x116>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    27fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    27fe:	f04f 0101 	mov.w	r1, #1	; 0x1
    2802:	f7ff fe87 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    2806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    280a:	f04f 0100 	mov.w	r1, #0	; 0x0
    280e:	f7ff fe81 	bl	2514 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    2812:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			(mov r8, r8)
    281c:	40012c00 	.word	0x40012c00
    2820:	40000400 	.word	0x40000400
    2824:	40000800 	.word	0x40000800
    2828:	40000c00 	.word	0x40000c00
    282c:	40001000 	.word	0x40001000
    2830:	40001400 	.word	0x40001400
    2834:	40013400 	.word	0x40013400

00002838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2838:	b480      	push	{r7}
    283a:	b083      	sub	sp, #12
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	b29b      	uxth	r3, r3
    2848:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	8013      	strh	r3, [r2, #0]
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	b299      	uxth	r1, r3
    2856:	683b      	ldr	r3, [r7, #0]
    2858:	88da      	ldrh	r2, [r3, #6]
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	885b      	ldrh	r3, [r3, #2]
    285e:	ea42 0303 	orr.w	r3, r2, r3
    2862:	b29b      	uxth	r3, r3
    2864:	ea41 0303 	orr.w	r3, r1, r3
    2868:	b29b      	uxth	r3, r3
    286a:	687a      	ldr	r2, [r7, #4]
    286c:	8013      	strh	r3, [r2, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	889b      	ldrh	r3, [r3, #4]
    2872:	687a      	ldr	r2, [r7, #4]
    2874:	8593      	strh	r3, [r2, #44]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    2876:	683b      	ldr	r3, [r7, #0]
    2878:	881b      	ldrh	r3, [r3, #0]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	8513      	strh	r3, [r2, #40]
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
    287e:	687a      	ldr	r2, [r7, #4]
    2880:	4b09      	ldr	r3, [pc, #36]	(28a8 <TIM_TimeBaseInit+0x70>)
    2882:	429a      	cmp	r2, r3
    2884:	d003      	beq.n	288e <TIM_TimeBaseInit+0x56>
    2886:	687a      	ldr	r2, [r7, #4]
    2888:	4b08      	ldr	r3, [pc, #32]	(28ac <TIM_TimeBaseInit+0x74>)
    288a:	429a      	cmp	r2, r3
    288c:	d103      	bne.n	2896 <TIM_TimeBaseInit+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	7a1b      	ldrb	r3, [r3, #8]
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	8613      	strh	r3, [r2, #48]
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	f04f 0201 	mov.w	r2, #1	; 0x1
    289c:	829a      	strh	r2, [r3, #20]
}
    289e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr
    28a8:	40012c00 	.word	0x40012c00
    28ac:	40013400 	.word	0x40013400

000028b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    28b0:	b480      	push	{r7}
    28b2:	b087      	sub	sp, #28
    28b4:	af00      	add	r7, sp, #0
    28b6:	60f8      	str	r0, [r7, #12]
    28b8:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    28ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    28be:	827b      	strh	r3, [r7, #18]
    28c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    28c4:	82bb      	strh	r3, [r7, #20]
    28c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    28ca:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	8c1b      	ldrh	r3, [r3, #32]
    28d0:	b29b      	uxth	r3, r3
    28d2:	607b      	str	r3, [r7, #4]
    28d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    28d8:	6879      	ldr	r1, [r7, #4]
    28da:	ea01 0303 	and.w	r3, r1, r3
    28de:	607b      	str	r3, [r7, #4]
    28e0:	68fa      	ldr	r2, [r7, #12]
    28e2:	6879      	ldr	r1, [r7, #4]
    28e4:	460b      	mov	r3, r1
    28e6:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    28e8:	68fb      	ldr	r3, [r7, #12]
    28ea:	8c1b      	ldrh	r3, [r3, #32]
    28ec:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	889b      	ldrh	r3, [r3, #4]
    28f2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	8b1b      	ldrh	r3, [r3, #24]
    28f8:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
    28fa:	8a7b      	ldrh	r3, [r7, #18]
    28fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2900:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	881a      	ldrh	r2, [r3, #0]
    2906:	8a7b      	ldrh	r3, [r7, #18]
    2908:	ea42 0303 	orr.w	r3, r2, r3
    290c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
    290e:	8abb      	ldrh	r3, [r7, #20]
    2910:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    2914:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	891a      	ldrh	r2, [r3, #8]
    291a:	8abb      	ldrh	r3, [r7, #20]
    291c:	ea42 0303 	orr.w	r3, r2, r3
    2920:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	885a      	ldrh	r2, [r3, #2]
    2926:	8abb      	ldrh	r3, [r7, #20]
    2928:	ea42 0303 	orr.w	r3, r2, r3
    292c:	82bb      	strh	r3, [r7, #20]
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    292e:	68fa      	ldr	r2, [r7, #12]
    2930:	4b24      	ldr	r3, [pc, #144]	(29c4 <TIM_OC1Init+0x114>)
    2932:	429a      	cmp	r2, r3
    2934:	d003      	beq.n	293e <TIM_OC1Init+0x8e>
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4b23      	ldr	r3, [pc, #140]	(29c8 <TIM_OC1Init+0x118>)
    293a:	429a      	cmp	r2, r3
    293c:	d12f      	bne.n	299e <TIM_OC1Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    293e:	8abb      	ldrh	r3, [r7, #20]
    2940:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    2944:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    2946:	68bb      	ldr	r3, [r7, #8]
    2948:	895a      	ldrh	r2, [r3, #10]
    294a:	8abb      	ldrh	r3, [r7, #20]
    294c:	ea42 0303 	orr.w	r3, r2, r3
    2950:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    2952:	8abb      	ldrh	r3, [r7, #20]
    2954:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    2958:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    295a:	68bb      	ldr	r3, [r7, #8]
    295c:	889a      	ldrh	r2, [r3, #4]
    295e:	8abb      	ldrh	r3, [r7, #20]
    2960:	ea42 0303 	orr.w	r3, r2, r3
    2964:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    2966:	8afb      	ldrh	r3, [r7, #22]
    2968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    296c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2970:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2974:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS1N_Reset;
    2976:	8afb      	ldrh	r3, [r7, #22]
    2978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    297c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2980:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2984:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    2986:	68bb      	ldr	r3, [r7, #8]
    2988:	899a      	ldrh	r2, [r3, #12]
    298a:	8afb      	ldrh	r3, [r7, #22]
    298c:	ea42 0303 	orr.w	r3, r2, r3
    2990:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    2992:	68bb      	ldr	r3, [r7, #8]
    2994:	89da      	ldrh	r2, [r3, #14]
    2996:	8afb      	ldrh	r3, [r7, #22]
    2998:	ea42 0303 	orr.w	r3, r2, r3
    299c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	8afb      	ldrh	r3, [r7, #22]
    29a2:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	8a7b      	ldrh	r3, [r7, #18]
    29a8:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
    29aa:	68bb      	ldr	r3, [r7, #8]
    29ac:	88db      	ldrh	r3, [r3, #6]
    29ae:	68fa      	ldr	r2, [r7, #12]
    29b0:	8693      	strh	r3, [r2, #52]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    29b2:	68fa      	ldr	r2, [r7, #12]
    29b4:	8abb      	ldrh	r3, [r7, #20]
    29b6:	8413      	strh	r3, [r2, #32]
}
    29b8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    29bc:	46bd      	mov	sp, r7
    29be:	bc80      	pop	{r7}
    29c0:	4770      	bx	lr
    29c2:	46c0      	nop			(mov r8, r8)
    29c4:	40012c00 	.word	0x40012c00
    29c8:	40013400 	.word	0x40013400

000029cc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    29cc:	b480      	push	{r7}
    29ce:	b087      	sub	sp, #28
    29d0:	af00      	add	r7, sp, #0
    29d2:	60f8      	str	r0, [r7, #12]
    29d4:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    29d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    29da:	827b      	strh	r3, [r7, #18]
    29dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e0:	82bb      	strh	r3, [r7, #20]
    29e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	8c1b      	ldrh	r3, [r3, #32]
    29ec:	b29b      	uxth	r3, r3
    29ee:	607b      	str	r3, [r7, #4]
    29f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
    29f4:	6879      	ldr	r1, [r7, #4]
    29f6:	ea01 0303 	and.w	r3, r1, r3
    29fa:	607b      	str	r3, [r7, #4]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	6879      	ldr	r1, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	8c1b      	ldrh	r3, [r3, #32]
    2a08:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2a0a:	68fb      	ldr	r3, [r7, #12]
    2a0c:	889b      	ldrh	r3, [r3, #4]
    2a0e:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    2a10:	68fb      	ldr	r3, [r7, #12]
    2a12:	8b1b      	ldrh	r3, [r3, #24]
    2a14:	827b      	strh	r3, [r7, #18]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
    2a16:	8a7b      	ldrh	r3, [r7, #18]
    2a18:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2a1c:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2a1e:	68bb      	ldr	r3, [r7, #8]
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2a26:	b29a      	uxth	r2, r3
    2a28:	8a7b      	ldrh	r3, [r7, #18]
    2a2a:	ea42 0303 	orr.w	r3, r2, r3
    2a2e:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
    2a30:	8abb      	ldrh	r3, [r7, #20]
    2a32:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    2a36:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    2a38:	68bb      	ldr	r3, [r7, #8]
    2a3a:	891b      	ldrh	r3, [r3, #8]
    2a3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a40:	b29a      	uxth	r2, r3
    2a42:	8abb      	ldrh	r3, [r7, #20]
    2a44:	ea42 0303 	orr.w	r3, r2, r3
    2a48:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    2a4a:	68bb      	ldr	r3, [r7, #8]
    2a4c:	885b      	ldrh	r3, [r3, #2]
    2a4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a52:	b29a      	uxth	r2, r3
    2a54:	8abb      	ldrh	r3, [r7, #20]
    2a56:	ea42 0303 	orr.w	r3, r2, r3
    2a5a:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2a5c:	68fa      	ldr	r2, [r7, #12]
    2a5e:	4b2a      	ldr	r3, [pc, #168]	(2b08 <TIM_OC2Init+0x13c>)
    2a60:	429a      	cmp	r2, r3
    2a62:	d003      	beq.n	2a6c <TIM_OC2Init+0xa0>
    2a64:	68fa      	ldr	r2, [r7, #12]
    2a66:	4b29      	ldr	r3, [pc, #164]	(2b0c <TIM_OC2Init+0x140>)
    2a68:	429a      	cmp	r2, r3
    2a6a:	d13b      	bne.n	2ae4 <TIM_OC2Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    2a6c:	8abb      	ldrh	r3, [r7, #20]
    2a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2a72:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    2a74:	68bb      	ldr	r3, [r7, #8]
    2a76:	895b      	ldrh	r3, [r3, #10]
    2a78:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a7c:	b29a      	uxth	r2, r3
    2a7e:	8abb      	ldrh	r3, [r7, #20]
    2a80:	ea42 0303 	orr.w	r3, r2, r3
    2a84:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    2a86:	8abb      	ldrh	r3, [r7, #20]
    2a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2a8c:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    2a8e:	68bb      	ldr	r3, [r7, #8]
    2a90:	889b      	ldrh	r3, [r3, #4]
    2a92:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a96:	b29a      	uxth	r2, r3
    2a98:	8abb      	ldrh	r3, [r7, #20]
    2a9a:	ea42 0303 	orr.w	r3, r2, r3
    2a9e:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    2aa0:	8afb      	ldrh	r3, [r7, #22]
    2aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2aa6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aaa:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2aae:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS2N_Reset;
    2ab0:	8afb      	ldrh	r3, [r7, #22]
    2ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2ab6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aba:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2abe:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    2ac0:	68bb      	ldr	r3, [r7, #8]
    2ac2:	899b      	ldrh	r3, [r3, #12]
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	b29a      	uxth	r2, r3
    2aca:	8afb      	ldrh	r3, [r7, #22]
    2acc:	ea42 0303 	orr.w	r3, r2, r3
    2ad0:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	89db      	ldrh	r3, [r3, #14]
    2ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ada:	b29a      	uxth	r2, r3
    2adc:	8afb      	ldrh	r3, [r7, #22]
    2ade:	ea42 0303 	orr.w	r3, r2, r3
    2ae2:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2ae4:	68fa      	ldr	r2, [r7, #12]
    2ae6:	8afb      	ldrh	r3, [r7, #22]
    2ae8:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    2aea:	68fa      	ldr	r2, [r7, #12]
    2aec:	8a7b      	ldrh	r3, [r7, #18]
    2aee:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    2af0:	68bb      	ldr	r3, [r7, #8]
    2af2:	88db      	ldrh	r3, [r3, #6]
    2af4:	68fa      	ldr	r2, [r7, #12]
    2af6:	8713      	strh	r3, [r2, #56]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	8abb      	ldrh	r3, [r7, #20]
    2afc:	8413      	strh	r3, [r2, #32]
}
    2afe:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2b02:	46bd      	mov	sp, r7
    2b04:	bc80      	pop	{r7}
    2b06:	4770      	bx	lr
    2b08:	40012c00 	.word	0x40012c00
    2b0c:	40013400 	.word	0x40013400

00002b10 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2b10:	b480      	push	{r7}
    2b12:	b087      	sub	sp, #28
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b1e:	827b      	strh	r3, [r7, #18]
    2b20:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b24:	82bb      	strh	r3, [r7, #20]
    2b26:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b2a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	8c1b      	ldrh	r3, [r3, #32]
    2b30:	b29b      	uxth	r3, r3
    2b32:	607b      	str	r3, [r7, #4]
    2b34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    2b38:	6879      	ldr	r1, [r7, #4]
    2b3a:	ea01 0303 	and.w	r3, r1, r3
    2b3e:	607b      	str	r3, [r7, #4]
    2b40:	68fa      	ldr	r2, [r7, #12]
    2b42:	6879      	ldr	r1, [r7, #4]
    2b44:	460b      	mov	r3, r1
    2b46:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	8c1b      	ldrh	r3, [r3, #32]
    2b4c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	889b      	ldrh	r3, [r3, #4]
    2b52:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	8b9b      	ldrh	r3, [r3, #28]
    2b58:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
    2b5a:	8a7b      	ldrh	r3, [r7, #18]
    2b5c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2b60:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2b62:	68bb      	ldr	r3, [r7, #8]
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	8a7b      	ldrh	r3, [r7, #18]
    2b68:	ea42 0303 	orr.w	r3, r2, r3
    2b6c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
    2b6e:	8abb      	ldrh	r3, [r7, #20]
    2b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2b74:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    2b76:	68bb      	ldr	r3, [r7, #8]
    2b78:	891b      	ldrh	r3, [r3, #8]
    2b7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b7e:	b29a      	uxth	r2, r3
    2b80:	8abb      	ldrh	r3, [r7, #20]
    2b82:	ea42 0303 	orr.w	r3, r2, r3
    2b86:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    2b88:	68bb      	ldr	r3, [r7, #8]
    2b8a:	885b      	ldrh	r3, [r3, #2]
    2b8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b90:	b29a      	uxth	r2, r3
    2b92:	8abb      	ldrh	r3, [r7, #20]
    2b94:	ea42 0303 	orr.w	r3, r2, r3
    2b98:	82bb      	strh	r3, [r7, #20]
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2b9a:	68fa      	ldr	r2, [r7, #12]
    2b9c:	4b2a      	ldr	r3, [pc, #168]	(2c48 <TIM_OC3Init+0x138>)
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d003      	beq.n	2baa <TIM_OC3Init+0x9a>
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	4b29      	ldr	r3, [pc, #164]	(2c4c <TIM_OC3Init+0x13c>)
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d13b      	bne.n	2c22 <TIM_OC3Init+0x112>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    2baa:	8abb      	ldrh	r3, [r7, #20]
    2bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bb0:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    2bb2:	68bb      	ldr	r3, [r7, #8]
    2bb4:	895b      	ldrh	r3, [r3, #10]
    2bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bba:	b29a      	uxth	r2, r3
    2bbc:	8abb      	ldrh	r3, [r7, #20]
    2bbe:	ea42 0303 	orr.w	r3, r2, r3
    2bc2:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    2bc4:	8abb      	ldrh	r3, [r7, #20]
    2bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2bca:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	889b      	ldrh	r3, [r3, #4]
    2bd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bd4:	b29a      	uxth	r2, r3
    2bd6:	8abb      	ldrh	r3, [r7, #20]
    2bd8:	ea42 0303 	orr.w	r3, r2, r3
    2bdc:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    2bde:	8afb      	ldrh	r3, [r7, #22]
    2be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2be4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2be8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bec:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS3N_Reset;
    2bee:	8afb      	ldrh	r3, [r7, #22]
    2bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2bf4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2bf8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bfc:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    2bfe:	68bb      	ldr	r3, [r7, #8]
    2c00:	899b      	ldrh	r3, [r3, #12]
    2c02:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c06:	b29a      	uxth	r2, r3
    2c08:	8afb      	ldrh	r3, [r7, #22]
    2c0a:	ea42 0303 	orr.w	r3, r2, r3
    2c0e:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    2c10:	68bb      	ldr	r3, [r7, #8]
    2c12:	89db      	ldrh	r3, [r3, #14]
    2c14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c18:	b29a      	uxth	r2, r3
    2c1a:	8afb      	ldrh	r3, [r7, #22]
    2c1c:	ea42 0303 	orr.w	r3, r2, r3
    2c20:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2c22:	68fa      	ldr	r2, [r7, #12]
    2c24:	8afb      	ldrh	r3, [r7, #22]
    2c26:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    2c28:	68fa      	ldr	r2, [r7, #12]
    2c2a:	8a7b      	ldrh	r3, [r7, #18]
    2c2c:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	88db      	ldrh	r3, [r3, #6]
    2c32:	68fa      	ldr	r2, [r7, #12]
    2c34:	8793      	strh	r3, [r2, #60]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2c36:	68fa      	ldr	r2, [r7, #12]
    2c38:	8abb      	ldrh	r3, [r7, #20]
    2c3a:	8413      	strh	r3, [r2, #32]
}
    2c3c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2c40:	46bd      	mov	sp, r7
    2c42:	bc80      	pop	{r7}
    2c44:	4770      	bx	lr
    2c46:	46c0      	nop			(mov r8, r8)
    2c48:	40012c00 	.word	0x40012c00
    2c4c:	40013400 	.word	0x40013400

00002c50 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2c50:	b480      	push	{r7}
    2c52:	b087      	sub	sp, #28
    2c54:	af00      	add	r7, sp, #0
    2c56:	60f8      	str	r0, [r7, #12]
    2c58:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c5e:	827b      	strh	r3, [r7, #18]
    2c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c64:	82bb      	strh	r3, [r7, #20]
    2c66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c6a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	8c1b      	ldrh	r3, [r3, #32]
    2c70:	b29b      	uxth	r3, r3
    2c72:	607b      	str	r3, [r7, #4]
    2c74:	f64e 73ff 	movw	r3, #61439	; 0xefff
    2c78:	6879      	ldr	r1, [r7, #4]
    2c7a:	ea01 0303 	and.w	r3, r1, r3
    2c7e:	607b      	str	r3, [r7, #4]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6879      	ldr	r1, [r7, #4]
    2c84:	460b      	mov	r3, r1
    2c86:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	8c1b      	ldrh	r3, [r3, #32]
    2c8c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	889b      	ldrh	r3, [r3, #4]
    2c92:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	8b9b      	ldrh	r3, [r3, #28]
    2c98:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
    2c9a:	8a7b      	ldrh	r3, [r7, #18]
    2c9c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2ca0:	827b      	strh	r3, [r7, #18]
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2ca2:	68bb      	ldr	r3, [r7, #8]
    2ca4:	881b      	ldrh	r3, [r3, #0]
    2ca6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2caa:	b29a      	uxth	r2, r3
    2cac:	8a7b      	ldrh	r3, [r7, #18]
    2cae:	ea42 0303 	orr.w	r3, r2, r3
    2cb2:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
    2cb4:	8abb      	ldrh	r3, [r7, #20]
    2cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2cba:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	891b      	ldrh	r3, [r3, #8]
    2cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cc4:	b29a      	uxth	r2, r3
    2cc6:	8abb      	ldrh	r3, [r7, #20]
    2cc8:	ea42 0303 	orr.w	r3, r2, r3
    2ccc:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    2cce:	68bb      	ldr	r3, [r7, #8]
    2cd0:	885b      	ldrh	r3, [r3, #2]
    2cd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cd6:	b29a      	uxth	r2, r3
    2cd8:	8abb      	ldrh	r3, [r7, #20]
    2cda:	ea42 0303 	orr.w	r3, r2, r3
    2cde:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	4b14      	ldr	r3, [pc, #80]	(2d34 <TIM_OC4Init+0xe4>)
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d003      	beq.n	2cf0 <TIM_OC4Init+0xa0>
    2ce8:	68fa      	ldr	r2, [r7, #12]
    2cea:	4b13      	ldr	r3, [pc, #76]	(2d38 <TIM_OC4Init+0xe8>)
    2cec:	429a      	cmp	r2, r3
    2cee:	d10e      	bne.n	2d0e <TIM_OC4Init+0xbe>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
    2cf0:	8afb      	ldrh	r3, [r7, #22]
    2cf2:	ea4f 4383 	mov.w	r3, r3, lsl #18
    2cf6:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2cfa:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    2cfc:	68bb      	ldr	r3, [r7, #8]
    2cfe:	899b      	ldrh	r3, [r3, #12]
    2d00:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2d04:	b29a      	uxth	r2, r3
    2d06:	8afb      	ldrh	r3, [r7, #22]
    2d08:	ea42 0303 	orr.w	r3, r2, r3
    2d0c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2d0e:	68fa      	ldr	r2, [r7, #12]
    2d10:	8afb      	ldrh	r3, [r7, #22]
    2d12:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	8a7b      	ldrh	r3, [r7, #18]
    2d18:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	88db      	ldrh	r3, [r3, #6]
    2d1e:	68fa      	ldr	r2, [r7, #12]
    2d20:	f8a2 3040 	strh.w	r3, [r2, #64]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	8abb      	ldrh	r3, [r7, #20]
    2d28:	8413      	strh	r3, [r2, #32]
}
    2d2a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2d2e:	46bd      	mov	sp, r7
    2d30:	bc80      	pop	{r7}
    2d32:	4770      	bx	lr
    2d34:	40012c00 	.word	0x40012c00
    2d38:	40013400 	.word	0x40013400

00002d3c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	881b      	ldrh	r3, [r3, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d10f      	bne.n	2d6e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d4e:	683b      	ldr	r3, [r7, #0]
    2d50:	8859      	ldrh	r1, [r3, #2]
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	889a      	ldrh	r2, [r3, #4]
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	891b      	ldrh	r3, [r3, #8]
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	f001 faa2 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	88db      	ldrh	r3, [r3, #6]
    2d64:	6878      	ldr	r0, [r7, #4]
    2d66:	4619      	mov	r1, r3
    2d68:	f001 f926 	bl	3fb8 <TIM_SetIC1Prescaler>
    2d6c:	e036      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	2b04      	cmp	r3, #4
    2d74:	d10f      	bne.n	2d96 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	8859      	ldrh	r1, [r3, #2]
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	889a      	ldrh	r2, [r3, #4]
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	891b      	ldrh	r3, [r3, #8]
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f001 fada 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d88:	683b      	ldr	r3, [r7, #0]
    2d8a:	88db      	ldrh	r3, [r3, #6]
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	4619      	mov	r1, r3
    2d90:	f001 f934 	bl	3ffc <TIM_SetIC2Prescaler>
    2d94:	e022      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	881b      	ldrh	r3, [r3, #0]
    2d9a:	2b08      	cmp	r3, #8
    2d9c:	d10f      	bne.n	2dbe <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    2d9e:	683b      	ldr	r3, [r7, #0]
    2da0:	8859      	ldrh	r1, [r3, #2]
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	889a      	ldrh	r2, [r3, #4]
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	891b      	ldrh	r3, [r3, #8]
    2daa:	6878      	ldr	r0, [r7, #4]
    2dac:	f001 fb22 	bl	43f4 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	88db      	ldrh	r3, [r3, #6]
    2db4:	6878      	ldr	r0, [r7, #4]
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f946 	bl	4048 <TIM_SetIC3Prescaler>
    2dbc:	e00e      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2dbe:	683b      	ldr	r3, [r7, #0]
    2dc0:	8859      	ldrh	r1, [r3, #2]
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	889a      	ldrh	r2, [r3, #4]
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	891b      	ldrh	r3, [r3, #8]
    2dca:	6878      	ldr	r0, [r7, #4]
    2dcc:	f001 fb66 	bl	449c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2dd0:	683b      	ldr	r3, [r7, #0]
    2dd2:	88db      	ldrh	r3, [r3, #6]
    2dd4:	6878      	ldr	r0, [r7, #4]
    2dd6:	4619      	mov	r1, r3
    2dd8:	f001 f958 	bl	408c <TIM_SetIC4Prescaler>
  }
}
    2ddc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}

00002de4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    2dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2df2:	81bb      	strh	r3, [r7, #12]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    2df4:	f04f 0301 	mov.w	r3, #1	; 0x1
    2df8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	885b      	ldrh	r3, [r3, #2]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d103      	bne.n	2e0a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    2e02:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e06:	81bb      	strh	r3, [r7, #12]
    2e08:	e002      	b.n	2e10 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    2e0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2e0e:	81bb      	strh	r3, [r7, #12]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	889b      	ldrh	r3, [r3, #4]
    2e14:	2b01      	cmp	r3, #1
    2e16:	d103      	bne.n	2e20 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    2e18:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e1c:	81fb      	strh	r3, [r7, #14]
    2e1e:	e002      	b.n	2e26 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    2e20:	f04f 0301 	mov.w	r3, #1	; 0x1
    2e24:	81fb      	strh	r3, [r7, #14]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d11f      	bne.n	2e6e <TIM_PWMIConfig+0x8a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	8859      	ldrh	r1, [r3, #2]
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	889a      	ldrh	r2, [r3, #4]
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	891b      	ldrh	r3, [r3, #8]
    2e3a:	6878      	ldr	r0, [r7, #4]
    2e3c:	f001 fa32 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	88db      	ldrh	r3, [r3, #6]
    2e44:	6878      	ldr	r0, [r7, #4]
    2e46:	4619      	mov	r1, r3
    2e48:	f001 f8b6 	bl	3fb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e52:	89bb      	ldrh	r3, [r7, #12]
    2e54:	89fa      	ldrh	r2, [r7, #14]
    2e56:	6878      	ldr	r0, [r7, #4]
    2e58:	4619      	mov	r1, r3
    2e5a:	4663      	mov	r3, ip
    2e5c:	f001 fa6e 	bl	433c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	88db      	ldrh	r3, [r3, #6]
    2e64:	6878      	ldr	r0, [r7, #4]
    2e66:	4619      	mov	r1, r3
    2e68:	f001 f8c8 	bl	3ffc <TIM_SetIC2Prescaler>
    2e6c:	e01e      	b.n	2eac <TIM_PWMIConfig+0xc8>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e6e:	683b      	ldr	r3, [r7, #0]
    2e70:	8859      	ldrh	r1, [r3, #2]
    2e72:	683b      	ldr	r3, [r7, #0]
    2e74:	889a      	ldrh	r2, [r3, #4]
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	891b      	ldrh	r3, [r3, #8]
    2e7a:	6878      	ldr	r0, [r7, #4]
    2e7c:	f001 fa5e 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	88db      	ldrh	r3, [r3, #6]
    2e84:	6878      	ldr	r0, [r7, #4]
    2e86:	4619      	mov	r1, r3
    2e88:	f001 f8b8 	bl	3ffc <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e92:	89bb      	ldrh	r3, [r7, #12]
    2e94:	89fa      	ldrh	r2, [r7, #14]
    2e96:	6878      	ldr	r0, [r7, #4]
    2e98:	4619      	mov	r1, r3
    2e9a:	4663      	mov	r3, ip
    2e9c:	f001 fa02 	bl	42a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	88db      	ldrh	r3, [r3, #6]
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	4619      	mov	r1, r3
    2ea8:	f001 f886 	bl	3fb8 <TIM_SetIC1Prescaler>
  }
}
    2eac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}

00002eb4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    2eb4:	b480      	push	{r7}
    2eb6:	b083      	sub	sp, #12
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    2ebe:	683b      	ldr	r3, [r7, #0]
    2ec0:	881a      	ldrh	r2, [r3, #0]
    2ec2:	683b      	ldr	r3, [r7, #0]
    2ec4:	885b      	ldrh	r3, [r3, #2]
    2ec6:	ea42 0303 	orr.w	r3, r2, r3
    2eca:	b29a      	uxth	r2, r3
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	889b      	ldrh	r3, [r3, #4]
    2ed0:	ea42 0303 	orr.w	r3, r2, r3
    2ed4:	b29a      	uxth	r2, r3
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	88db      	ldrh	r3, [r3, #6]
    2eda:	ea42 0303 	orr.w	r3, r2, r3
    2ede:	b29a      	uxth	r2, r3
    2ee0:	683b      	ldr	r3, [r7, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	ea42 0303 	orr.w	r3, r2, r3
    2ee8:	b29a      	uxth	r2, r3
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	895b      	ldrh	r3, [r3, #10]
    2eee:	ea42 0303 	orr.w	r3, r2, r3
    2ef2:	b29a      	uxth	r2, r3
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	899b      	ldrh	r3, [r3, #12]
    2ef8:	ea42 0303 	orr.w	r3, r2, r3
    2efc:	b29b      	uxth	r3, r3
    2efe:	687a      	ldr	r2, [r7, #4]
    2f00:	f8a2 3044 	strh.w	r3, [r2, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    2f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f08:	46bd      	mov	sp, r7
    2f0a:	bc80      	pop	{r7}
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			(mov r8, r8)

00002f10 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2f10:	b480      	push	{r7}
    2f12:	b083      	sub	sp, #12
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    2f18:	687a      	ldr	r2, [r7, #4]
    2f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f1e:	8093      	strh	r3, [r2, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    2f20:	687a      	ldr	r2, [r7, #4]
    2f22:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f26:	8013      	strh	r3, [r2, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    2f28:	687a      	ldr	r2, [r7, #4]
    2f2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f2e:	80d3      	strh	r3, [r2, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f36:	8053      	strh	r3, [r2, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    2f38:	687a      	ldr	r2, [r7, #4]
    2f3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f3e:	7213      	strb	r3, [r2, #8]
}
    2f40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f44:	46bd      	mov	sp, r7
    2f46:	bc80      	pop	{r7}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			(mov r8, r8)

00002f4c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2f4c:	b480      	push	{r7}
    2f4e:	b083      	sub	sp, #12
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f5a:	8013      	strh	r3, [r2, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    2f5c:	687a      	ldr	r2, [r7, #4]
    2f5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f62:	8053      	strh	r3, [r2, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    2f64:	687a      	ldr	r2, [r7, #4]
    2f66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f6a:	8093      	strh	r3, [r2, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    2f6c:	687a      	ldr	r2, [r7, #4]
    2f6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f72:	80d3      	strh	r3, [r2, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f7a:	8113      	strh	r3, [r2, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    2f7c:	687a      	ldr	r2, [r7, #4]
    2f7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f82:	8153      	strh	r3, [r2, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    2f84:	687a      	ldr	r2, [r7, #4]
    2f86:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f8a:	8193      	strh	r3, [r2, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    2f8c:	687a      	ldr	r2, [r7, #4]
    2f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f92:	81d3      	strh	r3, [r2, #14]
}
    2f94:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f98:	46bd      	mov	sp, r7
    2f9a:	bc80      	pop	{r7}
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			(mov r8, r8)

00002fa0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2fa0:	b480      	push	{r7}
    2fa2:	b083      	sub	sp, #12
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    2fa8:	687a      	ldr	r2, [r7, #4]
    2faa:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fae:	8013      	strh	r3, [r2, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    2fb0:	687a      	ldr	r2, [r7, #4]
    2fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fb6:	8053      	strh	r3, [r2, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    2fb8:	687a      	ldr	r2, [r7, #4]
    2fba:	f04f 0301 	mov.w	r3, #1	; 0x1
    2fbe:	8093      	strh	r3, [r2, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fc6:	80d3      	strh	r3, [r2, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    2fc8:	687a      	ldr	r2, [r7, #4]
    2fca:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fce:	8113      	strh	r3, [r2, #8]
}
    2fd0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2fd4:	46bd      	mov	sp, r7
    2fd6:	bc80      	pop	{r7}
    2fd8:	4770      	bx	lr
    2fda:	46c0      	nop			(mov r8, r8)

00002fdc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    2fe4:	687a      	ldr	r2, [r7, #4]
    2fe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fea:	8013      	strh	r3, [r2, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    2fec:	687a      	ldr	r2, [r7, #4]
    2fee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ff2:	8053      	strh	r3, [r2, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    2ff4:	687a      	ldr	r2, [r7, #4]
    2ff6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ffa:	8093      	strh	r3, [r2, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f04f 0300 	mov.w	r3, #0	; 0x0
    3002:	80d3      	strh	r3, [r2, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3004:	687a      	ldr	r2, [r7, #4]
    3006:	f04f 0300 	mov.w	r3, #0	; 0x0
    300a:	8113      	strh	r3, [r2, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    300c:	687a      	ldr	r2, [r7, #4]
    300e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3012:	8153      	strh	r3, [r2, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3014:	687a      	ldr	r2, [r7, #4]
    3016:	f04f 0300 	mov.w	r3, #0	; 0x0
    301a:	8193      	strh	r3, [r2, #12]
}
    301c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3020:	46bd      	mov	sp, r7
    3022:	bc80      	pop	{r7}
    3024:	4770      	bx	lr
    3026:	46c0      	nop			(mov r8, r8)

00003028 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3028:	b480      	push	{r7}
    302a:	b085      	sub	sp, #20
    302c:	af00      	add	r7, sp, #0
    302e:	60f8      	str	r0, [r7, #12]
    3030:	460b      	mov	r3, r1
    3032:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3034:	7afb      	ldrb	r3, [r7, #11]
    3036:	2b00      	cmp	r3, #0
    3038:	d008      	beq.n	304c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	b29b      	uxth	r3, r3
    3040:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    3044:	b29b      	uxth	r3, r3
    3046:	68fa      	ldr	r2, [r7, #12]
    3048:	8013      	strh	r3, [r2, #0]
    304a:	e00d      	b.n	3068 <TIM_Cmd+0x40>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	881b      	ldrh	r3, [r3, #0]
    3050:	b29b      	uxth	r3, r3
    3052:	607b      	str	r3, [r7, #4]
    3054:	f240 33fe 	movw	r3, #1022	; 0x3fe
    3058:	6879      	ldr	r1, [r7, #4]
    305a:	ea01 0303 	and.w	r3, r1, r3
    305e:	607b      	str	r3, [r7, #4]
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	6879      	ldr	r1, [r7, #4]
    3064:	460b      	mov	r3, r1
    3066:	8013      	strh	r3, [r2, #0]
  }
}
    3068:	f107 0714 	add.w	r7, r7, #20	; 0x14
    306c:	46bd      	mov	sp, r7
    306e:	bc80      	pop	{r7}
    3070:	4770      	bx	lr
    3072:	46c0      	nop			(mov r8, r8)

00003074 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3074:	b480      	push	{r7}
    3076:	b085      	sub	sp, #20
    3078:	af00      	add	r7, sp, #0
    307a:	60f8      	str	r0, [r7, #12]
    307c:	460b      	mov	r3, r1
    307e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3080:	7afb      	ldrb	r3, [r7, #11]
    3082:	2b00      	cmp	r3, #0
    3084:	d00c      	beq.n	30a0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    308c:	b29b      	uxth	r3, r3
    308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3096:	b29b      	uxth	r3, r3
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	f8a2 3044 	strh.w	r3, [r2, #68]
    309e:	e00f      	b.n	30c0 <TIM_CtrlPWMOutputs+0x4c>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    30a6:	b29b      	uxth	r3, r3
    30a8:	607b      	str	r3, [r7, #4]
    30aa:	6879      	ldr	r1, [r7, #4]
    30ac:	ea4f 4341 	mov.w	r3, r1, lsl #17
    30b0:	ea4f 4353 	mov.w	r3, r3, lsr #17
    30b4:	607b      	str	r3, [r7, #4]
    30b6:	68fa      	ldr	r2, [r7, #12]
    30b8:	6879      	ldr	r1, [r7, #4]
    30ba:	460b      	mov	r3, r1
    30bc:	f8a2 3044 	strh.w	r3, [r2, #68]
  }  
}
    30c0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    30c4:	46bd      	mov	sp, r7
    30c6:	bc80      	pop	{r7}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			(mov r8, r8)

000030cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    30cc:	b480      	push	{r7}
    30ce:	b083      	sub	sp, #12
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
    30d4:	460b      	mov	r3, r1
    30d6:	807b      	strh	r3, [r7, #2]
    30d8:	4613      	mov	r3, r2
    30da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    30dc:	787b      	ldrb	r3, [r7, #1]
    30de:	2b00      	cmp	r3, #0
    30e0:	d009      	beq.n	30f6 <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	899b      	ldrh	r3, [r3, #12]
    30e6:	b29a      	uxth	r2, r3
    30e8:	887b      	ldrh	r3, [r7, #2]
    30ea:	ea42 0303 	orr.w	r3, r2, r3
    30ee:	b29b      	uxth	r3, r3
    30f0:	687a      	ldr	r2, [r7, #4]
    30f2:	8193      	strh	r3, [r2, #12]
    30f4:	e00b      	b.n	310e <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	899b      	ldrh	r3, [r3, #12]
    30fa:	b29a      	uxth	r2, r3
    30fc:	887b      	ldrh	r3, [r7, #2]
    30fe:	ea6f 0303 	mvn.w	r3, r3
    3102:	b29b      	uxth	r3, r3
    3104:	ea02 0303 	and.w	r3, r2, r3
    3108:	b29b      	uxth	r3, r3
    310a:	687a      	ldr	r2, [r7, #4]
    310c:	8193      	strh	r3, [r2, #12]
  }
}
    310e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3112:	46bd      	mov	sp, r7
    3114:	bc80      	pop	{r7}
    3116:	4770      	bx	lr

00003118 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3118:	b480      	push	{r7}
    311a:	b083      	sub	sp, #12
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
    3120:	460b      	mov	r3, r1
    3122:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3124:	687a      	ldr	r2, [r7, #4]
    3126:	887b      	ldrh	r3, [r7, #2]
    3128:	8293      	strh	r3, [r2, #20]
}
    312a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    312e:	46bd      	mov	sp, r7
    3130:	bc80      	pop	{r7}
    3132:	4770      	bx	lr

00003134 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3134:	b480      	push	{r7}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	460b      	mov	r3, r1
    313e:	807b      	strh	r3, [r7, #2]
    3140:	4613      	mov	r3, r2
    3142:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3144:	887a      	ldrh	r2, [r7, #2]
    3146:	883b      	ldrh	r3, [r7, #0]
    3148:	ea42 0303 	orr.w	r3, r2, r3
    314c:	b29b      	uxth	r3, r3
    314e:	687a      	ldr	r2, [r7, #4]
    3150:	f8a2 3048 	strh.w	r3, [r2, #72]
}
    3154:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3158:	46bd      	mov	sp, r7
    315a:	bc80      	pop	{r7}
    315c:	4770      	bx	lr
    315e:	46c0      	nop			(mov r8, r8)

00003160 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3160:	b480      	push	{r7}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	807b      	strh	r3, [r7, #2]
    316c:	4613      	mov	r3, r2
    316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3170:	787b      	ldrb	r3, [r7, #1]
    3172:	2b00      	cmp	r3, #0
    3174:	d009      	beq.n	318a <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	899b      	ldrh	r3, [r3, #12]
    317a:	b29a      	uxth	r2, r3
    317c:	887b      	ldrh	r3, [r7, #2]
    317e:	ea42 0303 	orr.w	r3, r2, r3
    3182:	b29b      	uxth	r3, r3
    3184:	687a      	ldr	r2, [r7, #4]
    3186:	8193      	strh	r3, [r2, #12]
    3188:	e00b      	b.n	31a2 <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	899b      	ldrh	r3, [r3, #12]
    318e:	b29a      	uxth	r2, r3
    3190:	887b      	ldrh	r3, [r7, #2]
    3192:	ea6f 0303 	mvn.w	r3, r3
    3196:	b29b      	uxth	r3, r3
    3198:	ea02 0303 	and.w	r3, r2, r3
    319c:	b29b      	uxth	r3, r3
    319e:	687a      	ldr	r2, [r7, #4]
    31a0:	8193      	strh	r3, [r2, #12]
  }
}
    31a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31a6:	46bd      	mov	sp, r7
    31a8:	bc80      	pop	{r7}
    31aa:	4770      	bx	lr

000031ac <TIM_InternalClockConfig>:
  * @brief  Configures the TIMx interrnal Clock
  * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	891b      	ldrh	r3, [r3, #8]
    31b8:	b29b      	uxth	r3, r3
    31ba:	603b      	str	r3, [r7, #0]
    31bc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    31c0:	6839      	ldr	r1, [r7, #0]
    31c2:	ea01 0303 	and.w	r3, r1, r3
    31c6:	603b      	str	r3, [r7, #0]
    31c8:	687a      	ldr	r2, [r7, #4]
    31ca:	6839      	ldr	r1, [r7, #0]
    31cc:	460b      	mov	r3, r1
    31ce:	8113      	strh	r3, [r2, #8]
}
    31d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31d4:	46bd      	mov	sp, r7
    31d6:	bc80      	pop	{r7}
    31d8:	4770      	bx	lr
    31da:	46c0      	nop			(mov r8, r8)

000031dc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	460b      	mov	r3, r1
    31e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    31e8:	887b      	ldrh	r3, [r7, #2]
    31ea:	6878      	ldr	r0, [r7, #4]
    31ec:	4619      	mov	r1, r3
    31ee:	f000 f8f7 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	891b      	ldrh	r3, [r3, #8]
    31f6:	b29b      	uxth	r3, r3
    31f8:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    31fc:	b29b      	uxth	r3, r3
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	8113      	strh	r3, [r2, #8]
}
    3202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}
    320a:	46c0      	nop			(mov r8, r8)

0000320c <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    320c:	b580      	push	{r7, lr}
    320e:	b084      	sub	sp, #16
    3210:	af00      	add	r7, sp, #0
    3212:	60f8      	str	r0, [r7, #12]
    3214:	4618      	mov	r0, r3
    3216:	460b      	mov	r3, r1
    3218:	817b      	strh	r3, [r7, #10]
    321a:	4613      	mov	r3, r2
    321c:	813b      	strh	r3, [r7, #8]
    321e:	4603      	mov	r3, r0
    3220:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    3222:	897b      	ldrh	r3, [r7, #10]
    3224:	2b60      	cmp	r3, #96
    3226:	d10a      	bne.n	323e <TIM_TIxExternalClockConfig+0x32>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3228:	893b      	ldrh	r3, [r7, #8]
    322a:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    322e:	68f8      	ldr	r0, [r7, #12]
    3230:	4619      	mov	r1, r3
    3232:	f04f 0201 	mov.w	r2, #1	; 0x1
    3236:	4663      	mov	r3, ip
    3238:	f001 f880 	bl	433c <TI2_Config>
    323c:	e009      	b.n	3252 <TIM_TIxExternalClockConfig+0x46>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    323e:	893b      	ldrh	r3, [r7, #8]
    3240:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3244:	68f8      	ldr	r0, [r7, #12]
    3246:	4619      	mov	r1, r3
    3248:	f04f 0201 	mov.w	r2, #1	; 0x1
    324c:	4663      	mov	r3, ip
    324e:	f001 f829 	bl	42a4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3252:	897b      	ldrh	r3, [r7, #10]
    3254:	68f8      	ldr	r0, [r7, #12]
    3256:	4619      	mov	r1, r3
    3258:	f000 f8c2 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	891b      	ldrh	r3, [r3, #8]
    3260:	b29b      	uxth	r3, r3
    3262:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    3266:	b29b      	uxth	r3, r3
    3268:	68fa      	ldr	r2, [r7, #12]
    326a:	8113      	strh	r3, [r2, #8]
}
    326c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3270:	46bd      	mov	sp, r7
    3272:	bd80      	pop	{r7, pc}

00003274 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	60f8      	str	r0, [r7, #12]
    327c:	4618      	mov	r0, r3
    327e:	460b      	mov	r3, r1
    3280:	817b      	strh	r3, [r7, #10]
    3282:	4613      	mov	r3, r2
    3284:	813b      	strh	r3, [r7, #8]
    3286:	4603      	mov	r3, r0
    3288:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    328a:	f04f 0300 	mov.w	r3, #0	; 0x0
    328e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3290:	897b      	ldrh	r3, [r7, #10]
    3292:	893a      	ldrh	r2, [r7, #8]
    3294:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	4619      	mov	r1, r3
    329c:	4663      	mov	r3, ip
    329e:	f000 f83b 	bl	3318 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	891b      	ldrh	r3, [r3, #8]
    32a6:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
    32a8:	8afb      	ldrh	r3, [r7, #22]
    32aa:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    32ae:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    32b0:	8afb      	ldrh	r3, [r7, #22]
    32b2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    32b6:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
    32b8:	8afb      	ldrh	r3, [r7, #22]
    32ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    32be:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    32c0:	8afb      	ldrh	r3, [r7, #22]
    32c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    32c6:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    32c8:	68fa      	ldr	r2, [r7, #12]
    32ca:	8afb      	ldrh	r3, [r7, #22]
    32cc:	8113      	strh	r3, [r2, #8]
}
    32ce:	f107 0718 	add.w	r7, r7, #24	; 0x18
    32d2:	46bd      	mov	sp, r7
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			(mov r8, r8)

000032d8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	4618      	mov	r0, r3
    32e2:	460b      	mov	r3, r1
    32e4:	817b      	strh	r3, [r7, #10]
    32e6:	4613      	mov	r3, r2
    32e8:	813b      	strh	r3, [r7, #8]
    32ea:	4603      	mov	r3, r0
    32ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    32ee:	897b      	ldrh	r3, [r7, #10]
    32f0:	893a      	ldrh	r2, [r7, #8]
    32f2:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    32f6:	68f8      	ldr	r0, [r7, #12]
    32f8:	4619      	mov	r1, r3
    32fa:	4663      	mov	r3, ip
    32fc:	f000 f80c 	bl	3318 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
    3300:	68fb      	ldr	r3, [r7, #12]
    3302:	891b      	ldrh	r3, [r3, #8]
    3304:	b29b      	uxth	r3, r3
    3306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    330a:	b29b      	uxth	r3, r3
    330c:	68fa      	ldr	r2, [r7, #12]
    330e:	8113      	strh	r3, [r2, #8]
}
    3310:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3314:	46bd      	mov	sp, r7
    3316:	bd80      	pop	{r7, pc}

00003318 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    3318:	b480      	push	{r7}
    331a:	b087      	sub	sp, #28
    331c:	af00      	add	r7, sp, #0
    331e:	60f8      	str	r0, [r7, #12]
    3320:	4618      	mov	r0, r3
    3322:	460b      	mov	r3, r1
    3324:	817b      	strh	r3, [r7, #10]
    3326:	4613      	mov	r3, r2
    3328:	813b      	strh	r3, [r7, #8]
    332a:	4603      	mov	r3, r0
    332c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    332e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3332:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	891b      	ldrh	r3, [r3, #8]
    3338:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    333a:	8afb      	ldrh	r3, [r7, #22]
    333c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3340:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    3342:	88fb      	ldrh	r3, [r7, #6]
    3344:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3348:	b29a      	uxth	r2, r3
    334a:	893b      	ldrh	r3, [r7, #8]
    334c:	ea42 0303 	orr.w	r3, r2, r3
    3350:	b29a      	uxth	r2, r3
    3352:	897b      	ldrh	r3, [r7, #10]
    3354:	ea42 0303 	orr.w	r3, r2, r3
    3358:	b29a      	uxth	r2, r3
    335a:	8afb      	ldrh	r3, [r7, #22]
    335c:	ea42 0303 	orr.w	r3, r2, r3
    3360:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3362:	68fa      	ldr	r2, [r7, #12]
    3364:	8afb      	ldrh	r3, [r7, #22]
    3366:	8113      	strh	r3, [r2, #8]
}
    3368:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    336c:	46bd      	mov	sp, r7
    336e:	bc80      	pop	{r7}
    3370:	4770      	bx	lr
    3372:	46c0      	nop			(mov r8, r8)

00003374 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    3374:	b480      	push	{r7}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	460b      	mov	r3, r1
    337e:	807b      	strh	r3, [r7, #2]
    3380:	4613      	mov	r3, r2
    3382:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	887b      	ldrh	r3, [r7, #2]
    3388:	8513      	strh	r3, [r2, #40]
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    338a:	687a      	ldr	r2, [r7, #4]
    338c:	883b      	ldrh	r3, [r7, #0]
    338e:	8293      	strh	r3, [r2, #20]
}
    3390:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3394:	46bd      	mov	sp, r7
    3396:	bc80      	pop	{r7}
    3398:	4770      	bx	lr
    339a:	46c0      	nop			(mov r8, r8)

0000339c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    339c:	b480      	push	{r7}
    339e:	b085      	sub	sp, #20
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	460b      	mov	r3, r1
    33a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    33a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    33ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	881b      	ldrh	r3, [r3, #0]
    33b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
    33b4:	89fb      	ldrh	r3, [r7, #14]
    33b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33ba:	ea4f 5383 	mov.w	r3, r3, lsl #22
    33be:	ea4f 5393 	mov.w	r3, r3, lsr #22
    33c2:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    33c4:	89fa      	ldrh	r2, [r7, #14]
    33c6:	887b      	ldrh	r3, [r7, #2]
    33c8:	ea42 0303 	orr.w	r3, r2, r3
    33cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    33ce:	687a      	ldr	r2, [r7, #4]
    33d0:	89fb      	ldrh	r3, [r7, #14]
    33d2:	8013      	strh	r3, [r2, #0]
}
    33d4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    33d8:	46bd      	mov	sp, r7
    33da:	bc80      	pop	{r7}
    33dc:	4770      	bx	lr
    33de:	46c0      	nop			(mov r8, r8)

000033e0 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    33e0:	b480      	push	{r7}
    33e2:	b085      	sub	sp, #20
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
    33e8:	460b      	mov	r3, r1
    33ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    33ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    33f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	891b      	ldrh	r3, [r3, #8]
    33f6:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
    33f8:	89fb      	ldrh	r3, [r7, #14]
    33fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33fe:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    3400:	89fa      	ldrh	r2, [r7, #14]
    3402:	887b      	ldrh	r3, [r7, #2]
    3404:	ea42 0303 	orr.w	r3, r2, r3
    3408:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    340a:	687a      	ldr	r2, [r7, #4]
    340c:	89fb      	ldrh	r3, [r7, #14]
    340e:	8113      	strh	r3, [r2, #8]
}
    3410:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3414:	46bd      	mov	sp, r7
    3416:	bc80      	pop	{r7}
    3418:	4770      	bx	lr
    341a:	46c0      	nop			(mov r8, r8)

0000341c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    341c:	b480      	push	{r7}
    341e:	b087      	sub	sp, #28
    3420:	af00      	add	r7, sp, #0
    3422:	60f8      	str	r0, [r7, #12]
    3424:	4618      	mov	r0, r3
    3426:	460b      	mov	r3, r1
    3428:	817b      	strh	r3, [r7, #10]
    342a:	4613      	mov	r3, r2
    342c:	813b      	strh	r3, [r7, #8]
    342e:	4603      	mov	r3, r0
    3430:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3432:	f04f 0300 	mov.w	r3, #0	; 0x0
    3436:	827b      	strh	r3, [r7, #18]
  uint16_t tmpccmr1 = 0;
    3438:	f04f 0300 	mov.w	r3, #0	; 0x0
    343c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    343e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3442:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	891b      	ldrh	r3, [r3, #8]
    3448:	827b      	strh	r3, [r7, #18]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	8b1b      	ldrh	r3, [r3, #24]
    344e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	8c1b      	ldrh	r3, [r3, #32]
    3454:	82fb      	strh	r3, [r7, #22]

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
    3456:	8a7b      	ldrh	r3, [r7, #18]
    3458:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    345c:	827b      	strh	r3, [r7, #18]
  tmpsmcr |= TIM_EncoderMode;
    345e:	8a7a      	ldrh	r2, [r7, #18]
    3460:	897b      	ldrh	r3, [r7, #10]
    3462:	ea42 0303 	orr.w	r3, r2, r3
    3466:	827b      	strh	r3, [r7, #18]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
    3468:	8abb      	ldrh	r3, [r7, #20]
    346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    346e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    3472:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
    3474:	8abb      	ldrh	r3, [r7, #20]
    3476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    347a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    347e:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
    3480:	8afb      	ldrh	r3, [r7, #22]
    3482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    3486:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    3488:	88fb      	ldrh	r3, [r7, #6]
    348a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    348e:	b29a      	uxth	r2, r3
    3490:	893b      	ldrh	r3, [r7, #8]
    3492:	ea42 0303 	orr.w	r3, r2, r3
    3496:	b29a      	uxth	r2, r3
    3498:	8afb      	ldrh	r3, [r7, #22]
    349a:	ea42 0303 	orr.w	r3, r2, r3
    349e:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	8a7b      	ldrh	r3, [r7, #18]
    34a4:	8113      	strh	r3, [r2, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    34a6:	68fa      	ldr	r2, [r7, #12]
    34a8:	8abb      	ldrh	r3, [r7, #20]
    34aa:	8313      	strh	r3, [r2, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    34ac:	68fa      	ldr	r2, [r7, #12]
    34ae:	8afb      	ldrh	r3, [r7, #22]
    34b0:	8413      	strh	r3, [r2, #32]
}
    34b2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    34b6:	46bd      	mov	sp, r7
    34b8:	bc80      	pop	{r7}
    34ba:	4770      	bx	lr

000034bc <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34bc:	b480      	push	{r7}
    34be:	b085      	sub	sp, #20
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	460b      	mov	r3, r1
    34c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    34c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    34cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	8b1b      	ldrh	r3, [r3, #24]
    34d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
    34d4:	89fb      	ldrh	r3, [r7, #14]
    34d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    34da:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    34dc:	89fa      	ldrh	r2, [r7, #14]
    34de:	887b      	ldrh	r3, [r7, #2]
    34e0:	ea42 0303 	orr.w	r3, r2, r3
    34e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	89fb      	ldrh	r3, [r7, #14]
    34ea:	8313      	strh	r3, [r2, #24]
}
    34ec:	f107 0714 	add.w	r7, r7, #20	; 0x14
    34f0:	46bd      	mov	sp, r7
    34f2:	bc80      	pop	{r7}
    34f4:	4770      	bx	lr
    34f6:	46c0      	nop			(mov r8, r8)

000034f8 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34f8:	b480      	push	{r7}
    34fa:	b085      	sub	sp, #20
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	460b      	mov	r3, r1
    3502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3504:	f04f 0300 	mov.w	r3, #0	; 0x0
    3508:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	8b1b      	ldrh	r3, [r3, #24]
    350e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
    3510:	89fb      	ldrh	r3, [r7, #14]
    3512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3516:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    3518:	887b      	ldrh	r3, [r7, #2]
    351a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    351e:	b29a      	uxth	r2, r3
    3520:	89fb      	ldrh	r3, [r7, #14]
    3522:	ea42 0303 	orr.w	r3, r2, r3
    3526:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3528:	687a      	ldr	r2, [r7, #4]
    352a:	89fb      	ldrh	r3, [r7, #14]
    352c:	8313      	strh	r3, [r2, #24]
}
    352e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3532:	46bd      	mov	sp, r7
    3534:	bc80      	pop	{r7}
    3536:	4770      	bx	lr

00003538 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3538:	b480      	push	{r7}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	460b      	mov	r3, r1
    3542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3544:	f04f 0300 	mov.w	r3, #0	; 0x0
    3548:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	8b9b      	ldrh	r3, [r3, #28]
    354e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
    3550:	89fb      	ldrh	r3, [r7, #14]
    3552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3556:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    3558:	89fa      	ldrh	r2, [r7, #14]
    355a:	887b      	ldrh	r3, [r7, #2]
    355c:	ea42 0303 	orr.w	r3, r2, r3
    3560:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3562:	687a      	ldr	r2, [r7, #4]
    3564:	89fb      	ldrh	r3, [r7, #14]
    3566:	8393      	strh	r3, [r2, #28]
}
    3568:	f107 0714 	add.w	r7, r7, #20	; 0x14
    356c:	46bd      	mov	sp, r7
    356e:	bc80      	pop	{r7}
    3570:	4770      	bx	lr
    3572:	46c0      	nop			(mov r8, r8)

00003574 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	460b      	mov	r3, r1
    357e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3580:	f04f 0300 	mov.w	r3, #0	; 0x0
    3584:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	8b9b      	ldrh	r3, [r3, #28]
    358a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
    358c:	89fb      	ldrh	r3, [r7, #14]
    358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3592:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    3594:	887b      	ldrh	r3, [r7, #2]
    3596:	ea4f 2303 	mov.w	r3, r3, lsl #8
    359a:	b29a      	uxth	r2, r3
    359c:	89fb      	ldrh	r3, [r7, #14]
    359e:	ea42 0303 	orr.w	r3, r2, r3
    35a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    35a4:	687a      	ldr	r2, [r7, #4]
    35a6:	89fb      	ldrh	r3, [r7, #14]
    35a8:	8393      	strh	r3, [r2, #28]
}
    35aa:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35ae:	46bd      	mov	sp, r7
    35b0:	bc80      	pop	{r7}
    35b2:	4770      	bx	lr

000035b4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    35b4:	b480      	push	{r7}
    35b6:	b085      	sub	sp, #20
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	460b      	mov	r3, r1
    35be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    35c0:	7afb      	ldrb	r3, [r7, #11]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d008      	beq.n	35d8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	881b      	ldrh	r3, [r3, #0]
    35ca:	b29b      	uxth	r3, r3
    35cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35d0:	b29b      	uxth	r3, r3
    35d2:	68fa      	ldr	r2, [r7, #12]
    35d4:	8013      	strh	r3, [r2, #0]
    35d6:	e00d      	b.n	35f4 <TIM_ARRPreloadConfig+0x40>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b29b      	uxth	r3, r3
    35de:	607b      	str	r3, [r7, #4]
    35e0:	f240 337f 	movw	r3, #895	; 0x37f
    35e4:	6879      	ldr	r1, [r7, #4]
    35e6:	ea01 0303 	and.w	r3, r1, r3
    35ea:	607b      	str	r3, [r7, #4]
    35ec:	68fa      	ldr	r2, [r7, #12]
    35ee:	6879      	ldr	r1, [r7, #4]
    35f0:	460b      	mov	r3, r1
    35f2:	8013      	strh	r3, [r2, #0]
  }
}
    35f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35f8:	46bd      	mov	sp, r7
    35fa:	bc80      	pop	{r7}
    35fc:	4770      	bx	lr
    35fe:	46c0      	nop			(mov r8, r8)

00003600 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3600:	b480      	push	{r7}
    3602:	b085      	sub	sp, #20
    3604:	af00      	add	r7, sp, #0
    3606:	60f8      	str	r0, [r7, #12]
    3608:	460b      	mov	r3, r1
    360a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    360c:	7afb      	ldrb	r3, [r7, #11]
    360e:	2b00      	cmp	r3, #0
    3610:	d008      	beq.n	3624 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	889b      	ldrh	r3, [r3, #4]
    3616:	b29b      	uxth	r3, r3
    3618:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    361c:	b29b      	uxth	r3, r3
    361e:	68fa      	ldr	r2, [r7, #12]
    3620:	8093      	strh	r3, [r2, #4]
    3622:	e00d      	b.n	3640 <TIM_SelectCOM+0x40>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	889b      	ldrh	r3, [r3, #4]
    3628:	b29b      	uxth	r3, r3
    362a:	607b      	str	r3, [r7, #4]
    362c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    3630:	6879      	ldr	r1, [r7, #4]
    3632:	ea01 0303 	and.w	r3, r1, r3
    3636:	607b      	str	r3, [r7, #4]
    3638:	68fa      	ldr	r2, [r7, #12]
    363a:	6879      	ldr	r1, [r7, #4]
    363c:	460b      	mov	r3, r1
    363e:	8093      	strh	r3, [r2, #4]
  }
}
    3640:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3644:	46bd      	mov	sp, r7
    3646:	bc80      	pop	{r7}
    3648:	4770      	bx	lr
    364a:	46c0      	nop			(mov r8, r8)

0000364c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    364c:	b480      	push	{r7}
    364e:	b085      	sub	sp, #20
    3650:	af00      	add	r7, sp, #0
    3652:	60f8      	str	r0, [r7, #12]
    3654:	460b      	mov	r3, r1
    3656:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3658:	7afb      	ldrb	r3, [r7, #11]
    365a:	2b00      	cmp	r3, #0
    365c:	d008      	beq.n	3670 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	889b      	ldrh	r3, [r3, #4]
    3662:	b29b      	uxth	r3, r3
    3664:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    3668:	b29b      	uxth	r3, r3
    366a:	68fa      	ldr	r2, [r7, #12]
    366c:	8093      	strh	r3, [r2, #4]
    366e:	e00d      	b.n	368c <TIM_SelectCCDMA+0x40>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	889b      	ldrh	r3, [r3, #4]
    3674:	b29b      	uxth	r3, r3
    3676:	607b      	str	r3, [r7, #4]
    3678:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    367c:	6879      	ldr	r1, [r7, #4]
    367e:	ea01 0303 	and.w	r3, r1, r3
    3682:	607b      	str	r3, [r7, #4]
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	6879      	ldr	r1, [r7, #4]
    3688:	460b      	mov	r3, r1
    368a:	8093      	strh	r3, [r2, #4]
  }
}
    368c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3690:	46bd      	mov	sp, r7
    3692:	bc80      	pop	{r7}
    3694:	4770      	bx	lr
    3696:	46c0      	nop			(mov r8, r8)

00003698 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    3698:	b480      	push	{r7}
    369a:	b085      	sub	sp, #20
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	460b      	mov	r3, r1
    36a2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36a4:	7afb      	ldrb	r3, [r7, #11]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d008      	beq.n	36bc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	889b      	ldrh	r3, [r3, #4]
    36ae:	b29b      	uxth	r3, r3
    36b0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    36b4:	b29b      	uxth	r3, r3
    36b6:	68fa      	ldr	r2, [r7, #12]
    36b8:	8093      	strh	r3, [r2, #4]
    36ba:	e00d      	b.n	36d8 <TIM_CCPreloadControl+0x40>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
    36bc:	68fb      	ldr	r3, [r7, #12]
    36be:	889b      	ldrh	r3, [r3, #4]
    36c0:	b29b      	uxth	r3, r3
    36c2:	607b      	str	r3, [r7, #4]
    36c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    36c8:	6879      	ldr	r1, [r7, #4]
    36ca:	ea01 0303 	and.w	r3, r1, r3
    36ce:	607b      	str	r3, [r7, #4]
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	6879      	ldr	r1, [r7, #4]
    36d4:	460b      	mov	r3, r1
    36d6:	8093      	strh	r3, [r2, #4]
  }
}
    36d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    36dc:	46bd      	mov	sp, r7
    36de:	bc80      	pop	{r7}
    36e0:	4770      	bx	lr
    36e2:	46c0      	nop			(mov r8, r8)

000036e4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    36e4:	b480      	push	{r7}
    36e6:	b085      	sub	sp, #20
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
    36ec:	460b      	mov	r3, r1
    36ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    36f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    36f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	8b1b      	ldrh	r3, [r3, #24]
    36fa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
    36fc:	89fb      	ldrh	r3, [r7, #14]
    36fe:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3702:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    3704:	89fa      	ldrh	r2, [r7, #14]
    3706:	887b      	ldrh	r3, [r7, #2]
    3708:	ea42 0303 	orr.w	r3, r2, r3
    370c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    370e:	687a      	ldr	r2, [r7, #4]
    3710:	89fb      	ldrh	r3, [r7, #14]
    3712:	8313      	strh	r3, [r2, #24]
}
    3714:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3718:	46bd      	mov	sp, r7
    371a:	bc80      	pop	{r7}
    371c:	4770      	bx	lr
    371e:	46c0      	nop			(mov r8, r8)

00003720 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	460b      	mov	r3, r1
    372a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    372c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3730:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	8b1b      	ldrh	r3, [r3, #24]
    3736:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
    3738:	89fb      	ldrh	r3, [r7, #14]
    373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    373e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    3740:	887b      	ldrh	r3, [r7, #2]
    3742:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3746:	b29a      	uxth	r2, r3
    3748:	89fb      	ldrh	r3, [r7, #14]
    374a:	ea42 0303 	orr.w	r3, r2, r3
    374e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	89fb      	ldrh	r3, [r7, #14]
    3754:	8313      	strh	r3, [r2, #24]
}
    3756:	f107 0714 	add.w	r7, r7, #20	; 0x14
    375a:	46bd      	mov	sp, r7
    375c:	bc80      	pop	{r7}
    375e:	4770      	bx	lr

00003760 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3760:	b480      	push	{r7}
    3762:	b085      	sub	sp, #20
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
    3768:	460b      	mov	r3, r1
    376a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    376c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3770:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	8b9b      	ldrh	r3, [r3, #28]
    3776:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
    3778:	89fb      	ldrh	r3, [r7, #14]
    377a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    377e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    3780:	89fa      	ldrh	r2, [r7, #14]
    3782:	887b      	ldrh	r3, [r7, #2]
    3784:	ea42 0303 	orr.w	r3, r2, r3
    3788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    378a:	687a      	ldr	r2, [r7, #4]
    378c:	89fb      	ldrh	r3, [r7, #14]
    378e:	8393      	strh	r3, [r2, #28]
}
    3790:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3794:	46bd      	mov	sp, r7
    3796:	bc80      	pop	{r7}
    3798:	4770      	bx	lr
    379a:	46c0      	nop			(mov r8, r8)

0000379c <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    379c:	b480      	push	{r7}
    379e:	b085      	sub	sp, #20
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    37a4:	460b      	mov	r3, r1
    37a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    37a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	8b9b      	ldrh	r3, [r3, #28]
    37b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
    37b4:	89fb      	ldrh	r3, [r7, #14]
    37b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    37ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    37bc:	887b      	ldrh	r3, [r7, #2]
    37be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    37c2:	b29a      	uxth	r2, r3
    37c4:	89fb      	ldrh	r3, [r7, #14]
    37c6:	ea42 0303 	orr.w	r3, r2, r3
    37ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	89fb      	ldrh	r3, [r7, #14]
    37d0:	8393      	strh	r3, [r2, #28]
}
    37d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    37d6:	46bd      	mov	sp, r7
    37d8:	bc80      	pop	{r7}
    37da:	4770      	bx	lr

000037dc <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	460b      	mov	r3, r1
    37e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    37e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	8b1b      	ldrh	r3, [r3, #24]
    37f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
    37f4:	89fb      	ldrh	r3, [r7, #14]
    37f6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    37fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    37fc:	89fa      	ldrh	r2, [r7, #14]
    37fe:	887b      	ldrh	r3, [r7, #2]
    3800:	ea42 0303 	orr.w	r3, r2, r3
    3804:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3806:	687a      	ldr	r2, [r7, #4]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	8313      	strh	r3, [r2, #24]
}
    380c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3810:	46bd      	mov	sp, r7
    3812:	bc80      	pop	{r7}
    3814:	4770      	bx	lr
    3816:	46c0      	nop			(mov r8, r8)

00003818 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3818:	b480      	push	{r7}
    381a:	b085      	sub	sp, #20
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	460b      	mov	r3, r1
    3822:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3824:	f04f 0300 	mov.w	r3, #0	; 0x0
    3828:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	8b1b      	ldrh	r3, [r3, #24]
    382e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
    3830:	89fb      	ldrh	r3, [r7, #14]
    3832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3836:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    3838:	887b      	ldrh	r3, [r7, #2]
    383a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    383e:	b29a      	uxth	r2, r3
    3840:	89fb      	ldrh	r3, [r7, #14]
    3842:	ea42 0303 	orr.w	r3, r2, r3
    3846:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3848:	687a      	ldr	r2, [r7, #4]
    384a:	89fb      	ldrh	r3, [r7, #14]
    384c:	8313      	strh	r3, [r2, #24]
}
    384e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3852:	46bd      	mov	sp, r7
    3854:	bc80      	pop	{r7}
    3856:	4770      	bx	lr

00003858 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3858:	b480      	push	{r7}
    385a:	b085      	sub	sp, #20
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	460b      	mov	r3, r1
    3862:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3864:	f04f 0300 	mov.w	r3, #0	; 0x0
    3868:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	8b9b      	ldrh	r3, [r3, #28]
    386e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
    3870:	89fb      	ldrh	r3, [r7, #14]
    3872:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    3876:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    3878:	89fa      	ldrh	r2, [r7, #14]
    387a:	887b      	ldrh	r3, [r7, #2]
    387c:	ea42 0303 	orr.w	r3, r2, r3
    3880:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3882:	687a      	ldr	r2, [r7, #4]
    3884:	89fb      	ldrh	r3, [r7, #14]
    3886:	8393      	strh	r3, [r2, #28]
}
    3888:	f107 0714 	add.w	r7, r7, #20	; 0x14
    388c:	46bd      	mov	sp, r7
    388e:	bc80      	pop	{r7}
    3890:	4770      	bx	lr
    3892:	46c0      	nop			(mov r8, r8)

00003894 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3894:	b480      	push	{r7}
    3896:	b085      	sub	sp, #20
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    389c:	460b      	mov	r3, r1
    389e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    38a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	8b9b      	ldrh	r3, [r3, #28]
    38aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
    38ac:	89fb      	ldrh	r3, [r7, #14]
    38ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    38b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    38b4:	887b      	ldrh	r3, [r7, #2]
    38b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    38ba:	b29a      	uxth	r2, r3
    38bc:	89fb      	ldrh	r3, [r7, #14]
    38be:	ea42 0303 	orr.w	r3, r2, r3
    38c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    38c4:	687a      	ldr	r2, [r7, #4]
    38c6:	89fb      	ldrh	r3, [r7, #14]
    38c8:	8393      	strh	r3, [r2, #28]
}
    38ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    38d4:	b480      	push	{r7}
    38d6:	b085      	sub	sp, #20
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	460b      	mov	r3, r1
    38de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    38e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	8b1b      	ldrh	r3, [r3, #24]
    38ea:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
    38ec:	89fb      	ldrh	r3, [r7, #14]
    38ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    38f2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    38f4:	89fa      	ldrh	r2, [r7, #14]
    38f6:	887b      	ldrh	r3, [r7, #2]
    38f8:	ea42 0303 	orr.w	r3, r2, r3
    38fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    38fe:	687a      	ldr	r2, [r7, #4]
    3900:	89fb      	ldrh	r3, [r7, #14]
    3902:	8313      	strh	r3, [r2, #24]
}
    3904:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3908:	46bd      	mov	sp, r7
    390a:	bc80      	pop	{r7}
    390c:	4770      	bx	lr
    390e:	46c0      	nop			(mov r8, r8)

00003910 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	460b      	mov	r3, r1
    391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    391c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3920:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	8b1b      	ldrh	r3, [r3, #24]
    3926:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
    3928:	89fb      	ldrh	r3, [r7, #14]
    392a:	ea4f 4343 	mov.w	r3, r3, lsl #17
    392e:	ea4f 4353 	mov.w	r3, r3, lsr #17
    3932:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    3934:	887b      	ldrh	r3, [r7, #2]
    3936:	ea4f 2303 	mov.w	r3, r3, lsl #8
    393a:	b29a      	uxth	r2, r3
    393c:	89fb      	ldrh	r3, [r7, #14]
    393e:	ea42 0303 	orr.w	r3, r2, r3
    3942:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3944:	687a      	ldr	r2, [r7, #4]
    3946:	89fb      	ldrh	r3, [r7, #14]
    3948:	8313      	strh	r3, [r2, #24]
}
    394a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    394e:	46bd      	mov	sp, r7
    3950:	bc80      	pop	{r7}
    3952:	4770      	bx	lr

00003954 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3954:	b480      	push	{r7}
    3956:	b085      	sub	sp, #20
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	460b      	mov	r3, r1
    395e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3960:	f04f 0300 	mov.w	r3, #0	; 0x0
    3964:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	8b9b      	ldrh	r3, [r3, #28]
    396a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
    396c:	89fb      	ldrh	r3, [r7, #14]
    396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3972:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    3974:	89fa      	ldrh	r2, [r7, #14]
    3976:	887b      	ldrh	r3, [r7, #2]
    3978:	ea42 0303 	orr.w	r3, r2, r3
    397c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    397e:	687a      	ldr	r2, [r7, #4]
    3980:	89fb      	ldrh	r3, [r7, #14]
    3982:	8393      	strh	r3, [r2, #28]
}
    3984:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3988:	46bd      	mov	sp, r7
    398a:	bc80      	pop	{r7}
    398c:	4770      	bx	lr
    398e:	46c0      	nop			(mov r8, r8)

00003990 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	460b      	mov	r3, r1
    399a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    399c:	f04f 0300 	mov.w	r3, #0	; 0x0
    39a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8b9b      	ldrh	r3, [r3, #28]
    39a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
    39a8:	89fb      	ldrh	r3, [r7, #14]
    39aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
    39ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
    39b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    39b4:	887b      	ldrh	r3, [r7, #2]
    39b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39ba:	b29a      	uxth	r2, r3
    39bc:	89fb      	ldrh	r3, [r7, #14]
    39be:	ea42 0303 	orr.w	r3, r2, r3
    39c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    39c4:	687a      	ldr	r2, [r7, #4]
    39c6:	89fb      	ldrh	r3, [r7, #14]
    39c8:	8393      	strh	r3, [r2, #28]
}
    39ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    39ce:	46bd      	mov	sp, r7
    39d0:	bc80      	pop	{r7}
    39d2:	4770      	bx	lr

000039d4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	460b      	mov	r3, r1
    39de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    39e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    39e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	8c1b      	ldrh	r3, [r3, #32]
    39ea:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
    39ec:	89fb      	ldrh	r3, [r7, #14]
    39ee:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    39f2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    39f4:	89fa      	ldrh	r2, [r7, #14]
    39f6:	887b      	ldrh	r3, [r7, #2]
    39f8:	ea42 0303 	orr.w	r3, r2, r3
    39fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    39fe:	687a      	ldr	r2, [r7, #4]
    3a00:	89fb      	ldrh	r3, [r7, #14]
    3a02:	8413      	strh	r3, [r2, #32]
}
    3a04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a08:	46bd      	mov	sp, r7
    3a0a:	bc80      	pop	{r7}
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			(mov r8, r8)

00003a10 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a10:	b480      	push	{r7}
    3a12:	b085      	sub	sp, #20
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    3a18:	460b      	mov	r3, r1
    3a1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	8c1b      	ldrh	r3, [r3, #32]
    3a26:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
    3a28:	89fb      	ldrh	r3, [r7, #14]
    3a2a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3a2e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    3a30:	89fa      	ldrh	r2, [r7, #14]
    3a32:	887b      	ldrh	r3, [r7, #2]
    3a34:	ea42 0303 	orr.w	r3, r2, r3
    3a38:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a3a:	687a      	ldr	r2, [r7, #4]
    3a3c:	89fb      	ldrh	r3, [r7, #14]
    3a3e:	8413      	strh	r3, [r2, #32]
}
    3a40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a44:	46bd      	mov	sp, r7
    3a46:	bc80      	pop	{r7}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			(mov r8, r8)

00003a4c <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3a4c:	b480      	push	{r7}
    3a4e:	b085      	sub	sp, #20
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	460b      	mov	r3, r1
    3a56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	8c1b      	ldrh	r3, [r3, #32]
    3a62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
    3a64:	89fb      	ldrh	r3, [r7, #14]
    3a66:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    3a6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    3a6c:	887b      	ldrh	r3, [r7, #2]
    3a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a72:	b29a      	uxth	r2, r3
    3a74:	89fb      	ldrh	r3, [r7, #14]
    3a76:	ea42 0303 	orr.w	r3, r2, r3
    3a7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a7c:	687a      	ldr	r2, [r7, #4]
    3a7e:	89fb      	ldrh	r3, [r7, #14]
    3a80:	8413      	strh	r3, [r2, #32]
}
    3a82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a86:	46bd      	mov	sp, r7
    3a88:	bc80      	pop	{r7}
    3a8a:	4770      	bx	lr

00003a8c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a8c:	b480      	push	{r7}
    3a8e:	b085      	sub	sp, #20
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	460b      	mov	r3, r1
    3a96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a98:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a9c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	8c1b      	ldrh	r3, [r3, #32]
    3aa2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
    3aa4:	89fb      	ldrh	r3, [r7, #14]
    3aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3aaa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    3aac:	887b      	ldrh	r3, [r7, #2]
    3aae:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3ab2:	b29a      	uxth	r2, r3
    3ab4:	89fb      	ldrh	r3, [r7, #14]
    3ab6:	ea42 0303 	orr.w	r3, r2, r3
    3aba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3abc:	687a      	ldr	r2, [r7, #4]
    3abe:	89fb      	ldrh	r3, [r7, #14]
    3ac0:	8413      	strh	r3, [r2, #32]
}
    3ac2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ac6:	46bd      	mov	sp, r7
    3ac8:	bc80      	pop	{r7}
    3aca:	4770      	bx	lr

00003acc <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3acc:	b480      	push	{r7}
    3ace:	b085      	sub	sp, #20
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	460b      	mov	r3, r1
    3ad6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3ad8:	f04f 0300 	mov.w	r3, #0	; 0x0
    3adc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	8c1b      	ldrh	r3, [r3, #32]
    3ae2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
    3ae4:	89fb      	ldrh	r3, [r7, #14]
    3ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3aea:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    3aec:	887b      	ldrh	r3, [r7, #2]
    3aee:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3af2:	b29a      	uxth	r2, r3
    3af4:	89fb      	ldrh	r3, [r7, #14]
    3af6:	ea42 0303 	orr.w	r3, r2, r3
    3afa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3afc:	687a      	ldr	r2, [r7, #4]
    3afe:	89fb      	ldrh	r3, [r7, #14]
    3b00:	8413      	strh	r3, [r2, #32]
}
    3b02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b06:	46bd      	mov	sp, r7
    3b08:	bc80      	pop	{r7}
    3b0a:	4770      	bx	lr

00003b0c <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
    3b14:	460b      	mov	r3, r1
    3b16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b18:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b1c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	8c1b      	ldrh	r3, [r3, #32]
    3b22:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
    3b24:	89fb      	ldrh	r3, [r7, #14]
    3b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b2a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    3b2c:	887b      	ldrh	r3, [r7, #2]
    3b2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3b32:	b29a      	uxth	r2, r3
    3b34:	89fb      	ldrh	r3, [r7, #14]
    3b36:	ea42 0303 	orr.w	r3, r2, r3
    3b3a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b3c:	687a      	ldr	r2, [r7, #4]
    3b3e:	89fb      	ldrh	r3, [r7, #14]
    3b40:	8413      	strh	r3, [r2, #32]
}
    3b42:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b46:	46bd      	mov	sp, r7
    3b48:	bc80      	pop	{r7}
    3b4a:	4770      	bx	lr

00003b4c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3b4c:	b480      	push	{r7}
    3b4e:	b085      	sub	sp, #20
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
    3b54:	460b      	mov	r3, r1
    3b56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	8c1b      	ldrh	r3, [r3, #32]
    3b62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
    3b64:	89fb      	ldrh	r3, [r7, #14]
    3b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    3b6c:	887b      	ldrh	r3, [r7, #2]
    3b6e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b72:	b29a      	uxth	r2, r3
    3b74:	89fb      	ldrh	r3, [r7, #14]
    3b76:	ea42 0303 	orr.w	r3, r2, r3
    3b7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b7c:	687a      	ldr	r2, [r7, #4]
    3b7e:	89fb      	ldrh	r3, [r7, #14]
    3b80:	8413      	strh	r3, [r2, #32]
}
    3b82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b86:	46bd      	mov	sp, r7
    3b88:	bc80      	pop	{r7}
    3b8a:	4770      	bx	lr

00003b8c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	460b      	mov	r3, r1
    3b96:	807b      	strh	r3, [r7, #2]
    3b98:	4613      	mov	r3, r2
    3b9a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3b9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    3ba2:	887a      	ldrh	r2, [r7, #2]
    3ba4:	f04f 0301 	mov.w	r3, #1	; 0x1
    3ba8:	fa03 f302 	lsl.w	r3, r3, r2
    3bac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	8c1b      	ldrh	r3, [r3, #32]
    3bb2:	b29a      	uxth	r2, r3
    3bb4:	89fb      	ldrh	r3, [r7, #14]
    3bb6:	ea6f 0303 	mvn.w	r3, r3
    3bba:	b29b      	uxth	r3, r3
    3bbc:	ea02 0303 	and.w	r3, r2, r3
    3bc0:	b29b      	uxth	r3, r3
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	8c1b      	ldrh	r3, [r3, #32]
    3bca:	b299      	uxth	r1, r3
    3bcc:	883a      	ldrh	r2, [r7, #0]
    3bce:	887b      	ldrh	r3, [r7, #2]
    3bd0:	fa02 f303 	lsl.w	r3, r2, r3
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	ea41 0303 	orr.w	r3, r1, r3
    3bda:	b29b      	uxth	r3, r3
    3bdc:	687a      	ldr	r2, [r7, #4]
    3bde:	8413      	strh	r3, [r2, #32]
}
    3be0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3be4:	46bd      	mov	sp, r7
    3be6:	bc80      	pop	{r7}
    3be8:	4770      	bx	lr
    3bea:	46c0      	nop			(mov r8, r8)

00003bec <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	460b      	mov	r3, r1
    3bf6:	807b      	strh	r3, [r7, #2]
    3bf8:	4613      	mov	r3, r2
    3bfa:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c00:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    3c02:	887a      	ldrh	r2, [r7, #2]
    3c04:	f04f 0304 	mov.w	r3, #4	; 0x4
    3c08:	fa03 f302 	lsl.w	r3, r3, r2
    3c0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	8c1b      	ldrh	r3, [r3, #32]
    3c12:	b29a      	uxth	r2, r3
    3c14:	89fb      	ldrh	r3, [r7, #14]
    3c16:	ea6f 0303 	mvn.w	r3, r3
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	ea02 0303 	and.w	r3, r2, r3
    3c20:	b29b      	uxth	r3, r3
    3c22:	687a      	ldr	r2, [r7, #4]
    3c24:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	8c1b      	ldrh	r3, [r3, #32]
    3c2a:	b299      	uxth	r1, r3
    3c2c:	883a      	ldrh	r2, [r7, #0]
    3c2e:	887b      	ldrh	r3, [r7, #2]
    3c30:	fa02 f303 	lsl.w	r3, r2, r3
    3c34:	b29b      	uxth	r3, r3
    3c36:	ea41 0303 	orr.w	r3, r1, r3
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	687a      	ldr	r2, [r7, #4]
    3c3e:	8413      	strh	r3, [r2, #32]
}
    3c40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3c44:	46bd      	mov	sp, r7
    3c46:	bc80      	pop	{r7}
    3c48:	4770      	bx	lr
    3c4a:	46c0      	nop			(mov r8, r8)

00003c4c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    3c4c:	b480      	push	{r7}
    3c4e:	b085      	sub	sp, #20
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	460b      	mov	r3, r1
    3c56:	807b      	strh	r3, [r7, #2]
    3c58:	4613      	mov	r3, r2
    3c5a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    3c5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c60:	60bb      	str	r3, [r7, #8]
  uint16_t tmp1 = 0;
    3c62:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c66:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	60bb      	str	r3, [r7, #8]
  tmp += CCMR_Offset;
    3c6c:	68bb      	ldr	r3, [r7, #8]
    3c6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    3c72:	60bb      	str	r3, [r7, #8]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    3c74:	887a      	ldrh	r2, [r7, #2]
    3c76:	f04f 0301 	mov.w	r3, #1	; 0x1
    3c7a:	fa03 f302 	lsl.w	r3, r3, r2
    3c7e:	81fb      	strh	r3, [r7, #14]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	8c1b      	ldrh	r3, [r3, #32]
    3c84:	b29a      	uxth	r2, r3
    3c86:	89fb      	ldrh	r3, [r7, #14]
    3c88:	ea6f 0303 	mvn.w	r3, r3
    3c8c:	b29b      	uxth	r3, r3
    3c8e:	ea02 0303 	and.w	r3, r2, r3
    3c92:	b29b      	uxth	r3, r3
    3c94:	687a      	ldr	r2, [r7, #4]
    3c96:	8413      	strh	r3, [r2, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    3c98:	887b      	ldrh	r3, [r7, #2]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d002      	beq.n	3ca4 <TIM_SelectOCxM+0x58>
    3c9e:	887b      	ldrh	r3, [r7, #2]
    3ca0:	2b08      	cmp	r3, #8
    3ca2:	d117      	bne.n	3cd4 <TIM_SelectOCxM+0x88>
  {
    tmp += (TIM_Channel>>1);
    3ca4:	887b      	ldrh	r3, [r7, #2]
    3ca6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3caa:	b29b      	uxth	r3, r3
    3cac:	461a      	mov	r2, r3
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	4413      	add	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
    3cb4:	68b9      	ldr	r1, [r7, #8]
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	681a      	ldr	r2, [r3, #0]
    3cba:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3cbe:	ea02 0303 	and.w	r3, r2, r3
    3cc2:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    3cc4:	68b9      	ldr	r1, [r7, #8]
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	681a      	ldr	r2, [r3, #0]
    3cca:	883b      	ldrh	r3, [r7, #0]
    3ccc:	ea42 0303 	orr.w	r3, r2, r3
    3cd0:	600b      	str	r3, [r1, #0]
    3cd2:	e01c      	b.n	3d0e <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    3cd4:	887b      	ldrh	r3, [r7, #2]
    3cd6:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
    3cda:	b29b      	uxth	r3, r3
    3cdc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	461a      	mov	r2, r3
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	4413      	add	r3, r2
    3ce8:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
    3cea:	68b9      	ldr	r1, [r7, #8]
    3cec:	68bb      	ldr	r3, [r7, #8]
    3cee:	681a      	ldr	r2, [r3, #0]
    3cf0:	f648 73ff 	movw	r3, #36863	; 0x8fff
    3cf4:	ea02 0303 	and.w	r3, r2, r3
    3cf8:	600b      	str	r3, [r1, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    3cfa:	68b9      	ldr	r1, [r7, #8]
    3cfc:	68bb      	ldr	r3, [r7, #8]
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	883b      	ldrh	r3, [r7, #0]
    3d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3d06:	b29b      	uxth	r3, r3
    3d08:	ea42 0303 	orr.w	r3, r2, r3
    3d0c:	600b      	str	r3, [r1, #0]
  }
}
    3d0e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d12:	46bd      	mov	sp, r7
    3d14:	bc80      	pop	{r7}
    3d16:	4770      	bx	lr

00003d18 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3d18:	b480      	push	{r7}
    3d1a:	b085      	sub	sp, #20
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	60f8      	str	r0, [r7, #12]
    3d20:	460b      	mov	r3, r1
    3d22:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3d24:	7afb      	ldrb	r3, [r7, #11]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d008      	beq.n	3d3c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	881b      	ldrh	r3, [r3, #0]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    3d34:	b29b      	uxth	r3, r3
    3d36:	68fa      	ldr	r2, [r7, #12]
    3d38:	8013      	strh	r3, [r2, #0]
    3d3a:	e00d      	b.n	3d58 <TIM_UpdateDisableConfig+0x40>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	881b      	ldrh	r3, [r3, #0]
    3d40:	b29b      	uxth	r3, r3
    3d42:	607b      	str	r3, [r7, #4]
    3d44:	f240 33fd 	movw	r3, #1021	; 0x3fd
    3d48:	6879      	ldr	r1, [r7, #4]
    3d4a:	ea01 0303 	and.w	r3, r1, r3
    3d4e:	607b      	str	r3, [r7, #4]
    3d50:	68fa      	ldr	r2, [r7, #12]
    3d52:	6879      	ldr	r1, [r7, #4]
    3d54:	460b      	mov	r3, r1
    3d56:	8013      	strh	r3, [r2, #0]
  }
}
    3d58:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bc80      	pop	{r7}
    3d60:	4770      	bx	lr
    3d62:	46c0      	nop			(mov r8, r8)

00003d64 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    3d64:	b480      	push	{r7}
    3d66:	b085      	sub	sp, #20
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	460b      	mov	r3, r1
    3d6e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    3d70:	897b      	ldrh	r3, [r7, #10]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d008      	beq.n	3d88 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	881b      	ldrh	r3, [r3, #0]
    3d7a:	b29b      	uxth	r3, r3
    3d7c:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    3d80:	b29b      	uxth	r3, r3
    3d82:	68fa      	ldr	r2, [r7, #12]
    3d84:	8013      	strh	r3, [r2, #0]
    3d86:	e00d      	b.n	3da4 <TIM_UpdateRequestConfig+0x40>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	607b      	str	r3, [r7, #4]
    3d90:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3d94:	6879      	ldr	r1, [r7, #4]
    3d96:	ea01 0303 	and.w	r3, r1, r3
    3d9a:	607b      	str	r3, [r7, #4]
    3d9c:	68fa      	ldr	r2, [r7, #12]
    3d9e:	6879      	ldr	r1, [r7, #4]
    3da0:	460b      	mov	r3, r1
    3da2:	8013      	strh	r3, [r2, #0]
  }
}
    3da4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3da8:	46bd      	mov	sp, r7
    3daa:	bc80      	pop	{r7}
    3dac:	4770      	bx	lr
    3dae:	46c0      	nop			(mov r8, r8)

00003db0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3db0:	b480      	push	{r7}
    3db2:	b085      	sub	sp, #20
    3db4:	af00      	add	r7, sp, #0
    3db6:	60f8      	str	r0, [r7, #12]
    3db8:	460b      	mov	r3, r1
    3dba:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3dbc:	7afb      	ldrb	r3, [r7, #11]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d008      	beq.n	3dd4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	889b      	ldrh	r3, [r3, #4]
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3dcc:	b29b      	uxth	r3, r3
    3dce:	68fa      	ldr	r2, [r7, #12]
    3dd0:	8093      	strh	r3, [r2, #4]
    3dd2:	e00d      	b.n	3df0 <TIM_SelectHallSensor+0x40>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	889b      	ldrh	r3, [r3, #4]
    3dd8:	b29b      	uxth	r3, r3
    3dda:	607b      	str	r3, [r7, #4]
    3ddc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	ea01 0303 	and.w	r3, r1, r3
    3de6:	607b      	str	r3, [r7, #4]
    3de8:	68fa      	ldr	r2, [r7, #12]
    3dea:	6879      	ldr	r1, [r7, #4]
    3dec:	460b      	mov	r3, r1
    3dee:	8093      	strh	r3, [r2, #4]
  }
}
    3df0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3df4:	46bd      	mov	sp, r7
    3df6:	bc80      	pop	{r7}
    3df8:	4770      	bx	lr
    3dfa:	46c0      	nop			(mov r8, r8)

00003dfc <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b085      	sub	sp, #20
    3e00:	af00      	add	r7, sp, #0
    3e02:	60f8      	str	r0, [r7, #12]
    3e04:	460b      	mov	r3, r1
    3e06:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	881b      	ldrh	r3, [r3, #0]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	607b      	str	r3, [r7, #4]
    3e10:	f240 33f7 	movw	r3, #1015	; 0x3f7
    3e14:	6879      	ldr	r1, [r7, #4]
    3e16:	ea01 0303 	and.w	r3, r1, r3
    3e1a:	607b      	str	r3, [r7, #4]
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	6879      	ldr	r1, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	8013      	strh	r3, [r2, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	881b      	ldrh	r3, [r3, #0]
    3e28:	b29a      	uxth	r2, r3
    3e2a:	897b      	ldrh	r3, [r7, #10]
    3e2c:	ea42 0303 	orr.w	r3, r2, r3
    3e30:	b29b      	uxth	r3, r3
    3e32:	68fa      	ldr	r2, [r7, #12]
    3e34:	8013      	strh	r3, [r2, #0]
}
    3e36:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e3a:	46bd      	mov	sp, r7
    3e3c:	bc80      	pop	{r7}
    3e3e:	4770      	bx	lr

00003e40 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    3e40:	b480      	push	{r7}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	460b      	mov	r3, r1
    3e4a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	889b      	ldrh	r3, [r3, #4]
    3e50:	b29b      	uxth	r3, r3
    3e52:	607b      	str	r3, [r7, #4]
    3e54:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	ea01 0303 	and.w	r3, r1, r3
    3e5e:	607b      	str	r3, [r7, #4]
    3e60:	68fa      	ldr	r2, [r7, #12]
    3e62:	6879      	ldr	r1, [r7, #4]
    3e64:	460b      	mov	r3, r1
    3e66:	8093      	strh	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	889b      	ldrh	r3, [r3, #4]
    3e6c:	b29a      	uxth	r2, r3
    3e6e:	897b      	ldrh	r3, [r7, #10]
    3e70:	ea42 0303 	orr.w	r3, r2, r3
    3e74:	b29b      	uxth	r3, r3
    3e76:	68fa      	ldr	r2, [r7, #12]
    3e78:	8093      	strh	r3, [r2, #4]
}
    3e7a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e7e:	46bd      	mov	sp, r7
    3e80:	bc80      	pop	{r7}
    3e82:	4770      	bx	lr

00003e84 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    3e84:	b480      	push	{r7}
    3e86:	b085      	sub	sp, #20
    3e88:	af00      	add	r7, sp, #0
    3e8a:	60f8      	str	r0, [r7, #12]
    3e8c:	460b      	mov	r3, r1
    3e8e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	891b      	ldrh	r3, [r3, #8]
    3e94:	b29b      	uxth	r3, r3
    3e96:	607b      	str	r3, [r7, #4]
    3e98:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    3e9c:	6879      	ldr	r1, [r7, #4]
    3e9e:	ea01 0303 	and.w	r3, r1, r3
    3ea2:	607b      	str	r3, [r7, #4]
    3ea4:	68fa      	ldr	r2, [r7, #12]
    3ea6:	6879      	ldr	r1, [r7, #4]
    3ea8:	460b      	mov	r3, r1
    3eaa:	8113      	strh	r3, [r2, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    3eac:	68fb      	ldr	r3, [r7, #12]
    3eae:	891b      	ldrh	r3, [r3, #8]
    3eb0:	b29a      	uxth	r2, r3
    3eb2:	897b      	ldrh	r3, [r7, #10]
    3eb4:	ea42 0303 	orr.w	r3, r2, r3
    3eb8:	b29b      	uxth	r3, r3
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	8113      	strh	r3, [r2, #8]
}
    3ebe:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    3ec8:	b480      	push	{r7}
    3eca:	b085      	sub	sp, #20
    3ecc:	af00      	add	r7, sp, #0
    3ece:	60f8      	str	r0, [r7, #12]
    3ed0:	460b      	mov	r3, r1
    3ed2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	891b      	ldrh	r3, [r3, #8]
    3ed8:	b29b      	uxth	r3, r3
    3eda:	607b      	str	r3, [r7, #4]
    3edc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3ee0:	6879      	ldr	r1, [r7, #4]
    3ee2:	ea01 0303 	and.w	r3, r1, r3
    3ee6:	607b      	str	r3, [r7, #4]
    3ee8:	68fa      	ldr	r2, [r7, #12]
    3eea:	6879      	ldr	r1, [r7, #4]
    3eec:	460b      	mov	r3, r1
    3eee:	8113      	strh	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    3ef0:	68fb      	ldr	r3, [r7, #12]
    3ef2:	891b      	ldrh	r3, [r3, #8]
    3ef4:	b29a      	uxth	r2, r3
    3ef6:	897b      	ldrh	r3, [r7, #10]
    3ef8:	ea42 0303 	orr.w	r3, r2, r3
    3efc:	b29b      	uxth	r3, r3
    3efe:	68fa      	ldr	r2, [r7, #12]
    3f00:	8113      	strh	r3, [r2, #8]
}
    3f02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3f06:	46bd      	mov	sp, r7
    3f08:	bc80      	pop	{r7}
    3f0a:	4770      	bx	lr

00003f0c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	460b      	mov	r3, r1
    3f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    3f18:	687a      	ldr	r2, [r7, #4]
    3f1a:	887b      	ldrh	r3, [r7, #2]
    3f1c:	8493      	strh	r3, [r2, #36]
}
    3f1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f22:	46bd      	mov	sp, r7
    3f24:	bc80      	pop	{r7}
    3f26:	4770      	bx	lr

00003f28 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    3f30:	460b      	mov	r3, r1
    3f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    3f34:	687a      	ldr	r2, [r7, #4]
    3f36:	887b      	ldrh	r3, [r7, #2]
    3f38:	8593      	strh	r3, [r2, #44]
}
    3f3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f3e:	46bd      	mov	sp, r7
    3f40:	bc80      	pop	{r7}
    3f42:	4770      	bx	lr

00003f44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    3f44:	b480      	push	{r7}
    3f46:	b083      	sub	sp, #12
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	460b      	mov	r3, r1
    3f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    3f50:	687a      	ldr	r2, [r7, #4]
    3f52:	887b      	ldrh	r3, [r7, #2]
    3f54:	8693      	strh	r3, [r2, #52]
}
    3f56:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bc80      	pop	{r7}
    3f5e:	4770      	bx	lr

00003f60 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	460b      	mov	r3, r1
    3f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    3f6c:	687a      	ldr	r2, [r7, #4]
    3f6e:	887b      	ldrh	r3, [r7, #2]
    3f70:	8713      	strh	r3, [r2, #56]
}
    3f72:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f76:	46bd      	mov	sp, r7
    3f78:	bc80      	pop	{r7}
    3f7a:	4770      	bx	lr

00003f7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b083      	sub	sp, #12
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	460b      	mov	r3, r1
    3f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    3f88:	687a      	ldr	r2, [r7, #4]
    3f8a:	887b      	ldrh	r3, [r7, #2]
    3f8c:	8793      	strh	r3, [r2, #60]
}
    3f8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f92:	46bd      	mov	sp, r7
    3f94:	bc80      	pop	{r7}
    3f96:	4770      	bx	lr

00003f98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    3f98:	b480      	push	{r7}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	460b      	mov	r3, r1
    3fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    3fa4:	687a      	ldr	r2, [r7, #4]
    3fa6:	887b      	ldrh	r3, [r7, #2]
    3fa8:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    3fac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bc80      	pop	{r7}
    3fb4:	4770      	bx	lr
    3fb6:	46c0      	nop			(mov r8, r8)

00003fb8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3fb8:	b480      	push	{r7}
    3fba:	b085      	sub	sp, #20
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	60f8      	str	r0, [r7, #12]
    3fc0:	460b      	mov	r3, r1
    3fc2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	8b1b      	ldrh	r3, [r3, #24]
    3fc8:	b29b      	uxth	r3, r3
    3fca:	607b      	str	r3, [r7, #4]
    3fcc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    3fd0:	6879      	ldr	r1, [r7, #4]
    3fd2:	ea01 0303 	and.w	r3, r1, r3
    3fd6:	607b      	str	r3, [r7, #4]
    3fd8:	68fa      	ldr	r2, [r7, #12]
    3fda:	6879      	ldr	r1, [r7, #4]
    3fdc:	460b      	mov	r3, r1
    3fde:	8313      	strh	r3, [r2, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	8b1b      	ldrh	r3, [r3, #24]
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	897b      	ldrh	r3, [r7, #10]
    3fe8:	ea42 0303 	orr.w	r3, r2, r3
    3fec:	b29b      	uxth	r3, r3
    3fee:	68fa      	ldr	r2, [r7, #12]
    3ff0:	8313      	strh	r3, [r2, #24]
}
    3ff2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bc80      	pop	{r7}
    3ffa:	4770      	bx	lr

00003ffc <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	60f8      	str	r0, [r7, #12]
    4004:	460b      	mov	r3, r1
    4006:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	8b1b      	ldrh	r3, [r3, #24]
    400c:	b29b      	uxth	r3, r3
    400e:	607b      	str	r3, [r7, #4]
    4010:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    4014:	6879      	ldr	r1, [r7, #4]
    4016:	ea01 0303 	and.w	r3, r1, r3
    401a:	607b      	str	r3, [r7, #4]
    401c:	68fa      	ldr	r2, [r7, #12]
    401e:	6879      	ldr	r1, [r7, #4]
    4020:	460b      	mov	r3, r1
    4022:	8313      	strh	r3, [r2, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	8b1b      	ldrh	r3, [r3, #24]
    4028:	b29a      	uxth	r2, r3
    402a:	897b      	ldrh	r3, [r7, #10]
    402c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4030:	b29b      	uxth	r3, r3
    4032:	ea42 0303 	orr.w	r3, r2, r3
    4036:	b29b      	uxth	r3, r3
    4038:	68fa      	ldr	r2, [r7, #12]
    403a:	8313      	strh	r3, [r2, #24]
}
    403c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4040:	46bd      	mov	sp, r7
    4042:	bc80      	pop	{r7}
    4044:	4770      	bx	lr
    4046:	46c0      	nop			(mov r8, r8)

00004048 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4048:	b480      	push	{r7}
    404a:	b085      	sub	sp, #20
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	460b      	mov	r3, r1
    4052:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	8b9b      	ldrh	r3, [r3, #28]
    4058:	b29b      	uxth	r3, r3
    405a:	607b      	str	r3, [r7, #4]
    405c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    4060:	6879      	ldr	r1, [r7, #4]
    4062:	ea01 0303 	and.w	r3, r1, r3
    4066:	607b      	str	r3, [r7, #4]
    4068:	68fa      	ldr	r2, [r7, #12]
    406a:	6879      	ldr	r1, [r7, #4]
    406c:	460b      	mov	r3, r1
    406e:	8393      	strh	r3, [r2, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	8b9b      	ldrh	r3, [r3, #28]
    4074:	b29a      	uxth	r2, r3
    4076:	897b      	ldrh	r3, [r7, #10]
    4078:	ea42 0303 	orr.w	r3, r2, r3
    407c:	b29b      	uxth	r3, r3
    407e:	68fa      	ldr	r2, [r7, #12]
    4080:	8393      	strh	r3, [r2, #28]
}
    4082:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4086:	46bd      	mov	sp, r7
    4088:	bc80      	pop	{r7}
    408a:	4770      	bx	lr

0000408c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    408c:	b480      	push	{r7}
    408e:	b085      	sub	sp, #20
    4090:	af00      	add	r7, sp, #0
    4092:	60f8      	str	r0, [r7, #12]
    4094:	460b      	mov	r3, r1
    4096:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	8b9b      	ldrh	r3, [r3, #28]
    409c:	b29b      	uxth	r3, r3
    409e:	607b      	str	r3, [r7, #4]
    40a0:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    40a4:	6879      	ldr	r1, [r7, #4]
    40a6:	ea01 0303 	and.w	r3, r1, r3
    40aa:	607b      	str	r3, [r7, #4]
    40ac:	68fa      	ldr	r2, [r7, #12]
    40ae:	6879      	ldr	r1, [r7, #4]
    40b0:	460b      	mov	r3, r1
    40b2:	8393      	strh	r3, [r2, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	8b9b      	ldrh	r3, [r3, #28]
    40b8:	b29a      	uxth	r2, r3
    40ba:	897b      	ldrh	r3, [r7, #10]
    40bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
    40c0:	b29b      	uxth	r3, r3
    40c2:	ea42 0303 	orr.w	r3, r2, r3
    40c6:	b29b      	uxth	r3, r3
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	8393      	strh	r3, [r2, #28]
}
    40cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    40d0:	46bd      	mov	sp, r7
    40d2:	bc80      	pop	{r7}
    40d4:	4770      	bx	lr
    40d6:	46c0      	nop			(mov r8, r8)

000040d8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	460b      	mov	r3, r1
    40e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	881b      	ldrh	r3, [r3, #0]
    40e8:	b29b      	uxth	r3, r3
    40ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    40ee:	687a      	ldr	r2, [r7, #4]
    40f0:	8013      	strh	r3, [r2, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	881b      	ldrh	r3, [r3, #0]
    40f6:	b29a      	uxth	r2, r3
    40f8:	887b      	ldrh	r3, [r7, #2]
    40fa:	ea42 0303 	orr.w	r3, r2, r3
    40fe:	b29b      	uxth	r3, r3
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	8013      	strh	r3, [r2, #0]
}
    4104:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4108:	46bd      	mov	sp, r7
    410a:	bc80      	pop	{r7}
    410c:	4770      	bx	lr
    410e:	46c0      	nop			(mov r8, r8)

00004110 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	8e9b      	ldrh	r3, [r3, #52]
    411c:	b29b      	uxth	r3, r3
}
    411e:	4618      	mov	r0, r3
    4120:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4124:	46bd      	mov	sp, r7
    4126:	bc80      	pop	{r7}
    4128:	4770      	bx	lr
    412a:	46c0      	nop			(mov r8, r8)

0000412c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	8f1b      	ldrh	r3, [r3, #56]
    4138:	b29b      	uxth	r3, r3
}
    413a:	4618      	mov	r0, r3
    413c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4140:	46bd      	mov	sp, r7
    4142:	bc80      	pop	{r7}
    4144:	4770      	bx	lr
    4146:	46c0      	nop			(mov r8, r8)

00004148 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	8f9b      	ldrh	r3, [r3, #60]
    4154:	b29b      	uxth	r3, r3
}
    4156:	4618      	mov	r0, r3
    4158:	f107 070c 	add.w	r7, r7, #12	; 0xc
    415c:	46bd      	mov	sp, r7
    415e:	bc80      	pop	{r7}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			(mov r8, r8)

00004164 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	f8b3 3040 	ldrh.w	r3, [r3, #64]
    4172:	b29b      	uxth	r3, r3
}
    4174:	4618      	mov	r0, r3
    4176:	f107 070c 	add.w	r7, r7, #12	; 0xc
    417a:	46bd      	mov	sp, r7
    417c:	bc80      	pop	{r7}
    417e:	4770      	bx	lr

00004180 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	8c9b      	ldrh	r3, [r3, #36]
    418c:	b29b      	uxth	r3, r3
}
    418e:	4618      	mov	r0, r3
    4190:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4194:	46bd      	mov	sp, r7
    4196:	bc80      	pop	{r7}
    4198:	4770      	bx	lr
    419a:	46c0      	nop			(mov r8, r8)

0000419c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	8d1b      	ldrh	r3, [r3, #40]
    41a8:	b29b      	uxth	r3, r3
}
    41aa:	4618      	mov	r0, r3
    41ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    41b0:	46bd      	mov	sp, r7
    41b2:	bc80      	pop	{r7}
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			(mov r8, r8)

000041b8 <TIM_GetFlagStatus>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    41b8:	b480      	push	{r7}
    41ba:	b085      	sub	sp, #20
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    41c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	8a1b      	ldrh	r3, [r3, #16]
    41ce:	b29a      	uxth	r2, r3
    41d0:	887b      	ldrh	r3, [r7, #2]
    41d2:	ea02 0303 	and.w	r3, r2, r3
    41d6:	b29b      	uxth	r3, r3
    41d8:	2b00      	cmp	r3, #0
    41da:	d003      	beq.n	41e4 <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    41dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    41e0:	73fb      	strb	r3, [r7, #15]
    41e2:	e002      	b.n	41ea <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    41e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    41ea:	7bfb      	ldrb	r3, [r7, #15]
}
    41ec:	4618      	mov	r0, r3
    41ee:	f107 0714 	add.w	r7, r7, #20	; 0x14
    41f2:	46bd      	mov	sp, r7
    41f4:	bc80      	pop	{r7}
    41f6:	4770      	bx	lr

000041f8 <TIM_ClearFlag>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.  
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    41f8:	b480      	push	{r7}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4204:	887b      	ldrh	r3, [r7, #2]
    4206:	ea6f 0303 	mvn.w	r3, r3
    420a:	b29b      	uxth	r3, r3
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	8213      	strh	r3, [r2, #16]
}
    4210:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4214:	46bd      	mov	sp, r7
    4216:	bc80      	pop	{r7}
    4218:	4770      	bx	lr
    421a:	46c0      	nop			(mov r8, r8)

0000421c <TIM_GetITStatus>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    421c:	b480      	push	{r7}
    421e:	b085      	sub	sp, #20
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	460b      	mov	r3, r1
    4226:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4228:	f04f 0300 	mov.w	r3, #0	; 0x0
    422c:	72fb      	strb	r3, [r7, #11]
  uint16_t itstatus = 0x0, itenable = 0x0;
    422e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4232:	81bb      	strh	r3, [r7, #12]
    4234:	f04f 0300 	mov.w	r3, #0	; 0x0
    4238:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	8a1b      	ldrh	r3, [r3, #16]
    423e:	b29a      	uxth	r2, r3
    4240:	887b      	ldrh	r3, [r7, #2]
    4242:	ea02 0303 	and.w	r3, r2, r3
    4246:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	899b      	ldrh	r3, [r3, #12]
    424c:	b29a      	uxth	r2, r3
    424e:	887b      	ldrh	r3, [r7, #2]
    4250:	ea02 0303 	and.w	r3, r2, r3
    4254:	81fb      	strh	r3, [r7, #14]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4256:	89bb      	ldrh	r3, [r7, #12]
    4258:	2b00      	cmp	r3, #0
    425a:	d006      	beq.n	426a <TIM_GetITStatus+0x4e>
    425c:	89fb      	ldrh	r3, [r7, #14]
    425e:	2b00      	cmp	r3, #0
    4260:	d003      	beq.n	426a <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
    4262:	f04f 0301 	mov.w	r3, #1	; 0x1
    4266:	72fb      	strb	r3, [r7, #11]
    4268:	e002      	b.n	4270 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
    426a:	f04f 0300 	mov.w	r3, #0	; 0x0
    426e:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    4270:	7afb      	ldrb	r3, [r7, #11]
}
    4272:	4618      	mov	r0, r3
    4274:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4278:	46bd      	mov	sp, r7
    427a:	bc80      	pop	{r7}
    427c:	4770      	bx	lr
    427e:	46c0      	nop			(mov r8, r8)

00004280 <TIM_ClearITPendingBit>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	460b      	mov	r3, r1
    428a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    428c:	887b      	ldrh	r3, [r7, #2]
    428e:	ea6f 0303 	mvn.w	r3, r3
    4292:	b29b      	uxth	r3, r3
    4294:	687a      	ldr	r2, [r7, #4]
    4296:	8213      	strh	r3, [r2, #16]
}
    4298:	f107 070c 	add.w	r7, r7, #12	; 0xc
    429c:	46bd      	mov	sp, r7
    429e:	bc80      	pop	{r7}
    42a0:	4770      	bx	lr
    42a2:	46c0      	nop			(mov r8, r8)

000042a4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    42a4:	b480      	push	{r7}
    42a6:	b087      	sub	sp, #28
    42a8:	af00      	add	r7, sp, #0
    42aa:	60f8      	str	r0, [r7, #12]
    42ac:	4618      	mov	r0, r3
    42ae:	460b      	mov	r3, r1
    42b0:	817b      	strh	r3, [r7, #10]
    42b2:	4613      	mov	r3, r2
    42b4:	813b      	strh	r3, [r7, #8]
    42b6:	4603      	mov	r3, r0
    42b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    42ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    42be:	82bb      	strh	r3, [r7, #20]
    42c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    42c4:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	8c1b      	ldrh	r3, [r3, #32]
    42ca:	b29b      	uxth	r3, r3
    42cc:	603b      	str	r3, [r7, #0]
    42ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    42d2:	6839      	ldr	r1, [r7, #0]
    42d4:	ea01 0303 	and.w	r3, r1, r3
    42d8:	603b      	str	r3, [r7, #0]
    42da:	68fa      	ldr	r2, [r7, #12]
    42dc:	6839      	ldr	r1, [r7, #0]
    42de:	460b      	mov	r3, r1
    42e0:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	8b1b      	ldrh	r3, [r3, #24]
    42e6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	8c1b      	ldrh	r3, [r3, #32]
    42ec:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    42ee:	8abb      	ldrh	r3, [r7, #20]
    42f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    42f4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    42f6:	88fb      	ldrh	r3, [r7, #6]
    42f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    42fc:	b29a      	uxth	r2, r3
    42fe:	893b      	ldrh	r3, [r7, #8]
    4300:	ea42 0303 	orr.w	r3, r2, r3
    4304:	b29a      	uxth	r2, r3
    4306:	8abb      	ldrh	r3, [r7, #20]
    4308:	ea42 0303 	orr.w	r3, r2, r3
    430c:	82bb      	strh	r3, [r7, #20]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
    430e:	8afb      	ldrh	r3, [r7, #22]
    4310:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    4314:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
    4316:	897a      	ldrh	r2, [r7, #10]
    4318:	8afb      	ldrh	r3, [r7, #22]
    431a:	ea42 0303 	orr.w	r3, r2, r3
    431e:	b29b      	uxth	r3, r3
    4320:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4324:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4326:	68fa      	ldr	r2, [r7, #12]
    4328:	8abb      	ldrh	r3, [r7, #20]
    432a:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    432c:	68fa      	ldr	r2, [r7, #12]
    432e:	8afb      	ldrh	r3, [r7, #22]
    4330:	8413      	strh	r3, [r2, #32]
}
    4332:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4336:	46bd      	mov	sp, r7
    4338:	bc80      	pop	{r7}
    433a:	4770      	bx	lr

0000433c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    433c:	b480      	push	{r7}
    433e:	b087      	sub	sp, #28
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	4618      	mov	r0, r3
    4346:	460b      	mov	r3, r1
    4348:	817b      	strh	r3, [r7, #10]
    434a:	4613      	mov	r3, r2
    434c:	813b      	strh	r3, [r7, #8]
    434e:	4603      	mov	r3, r0
    4350:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    4352:	f04f 0300 	mov.w	r3, #0	; 0x0
    4356:	827b      	strh	r3, [r7, #18]
    4358:	f04f 0300 	mov.w	r3, #0	; 0x0
    435c:	82bb      	strh	r3, [r7, #20]
    435e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4362:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	8c1b      	ldrh	r3, [r3, #32]
    4368:	b29b      	uxth	r3, r3
    436a:	603b      	str	r3, [r7, #0]
    436c:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4370:	6839      	ldr	r1, [r7, #0]
    4372:	ea01 0303 	and.w	r3, r1, r3
    4376:	603b      	str	r3, [r7, #0]
    4378:	68fa      	ldr	r2, [r7, #12]
    437a:	6839      	ldr	r1, [r7, #0]
    437c:	460b      	mov	r3, r1
    437e:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	8b1b      	ldrh	r3, [r3, #24]
    4384:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	8c1b      	ldrh	r3, [r3, #32]
    438a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    438c:	897b      	ldrh	r3, [r7, #10]
    438e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4392:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    4394:	8a7b      	ldrh	r3, [r7, #18]
    4396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    439a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    439e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    43a2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    43a4:	88fb      	ldrh	r3, [r7, #6]
    43a6:	ea4f 3303 	mov.w	r3, r3, lsl #12
    43aa:	b29a      	uxth	r2, r3
    43ac:	8a7b      	ldrh	r3, [r7, #18]
    43ae:	ea42 0303 	orr.w	r3, r2, r3
    43b2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    43b4:	893b      	ldrh	r3, [r7, #8]
    43b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    43ba:	b29a      	uxth	r2, r3
    43bc:	8a7b      	ldrh	r3, [r7, #18]
    43be:	ea42 0303 	orr.w	r3, r2, r3
    43c2:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
    43c4:	8abb      	ldrh	r3, [r7, #20]
    43c6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    43ca:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
    43cc:	8afa      	ldrh	r2, [r7, #22]
    43ce:	8abb      	ldrh	r3, [r7, #20]
    43d0:	ea42 0303 	orr.w	r3, r2, r3
    43d4:	b29b      	uxth	r3, r3
    43d6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    43da:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	8a7b      	ldrh	r3, [r7, #18]
    43e0:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    43e2:	68fa      	ldr	r2, [r7, #12]
    43e4:	8abb      	ldrh	r3, [r7, #20]
    43e6:	8413      	strh	r3, [r2, #32]
}
    43e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    43ec:	46bd      	mov	sp, r7
    43ee:	bc80      	pop	{r7}
    43f0:	4770      	bx	lr
    43f2:	46c0      	nop			(mov r8, r8)

000043f4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    43f4:	b480      	push	{r7}
    43f6:	b087      	sub	sp, #28
    43f8:	af00      	add	r7, sp, #0
    43fa:	60f8      	str	r0, [r7, #12]
    43fc:	4618      	mov	r0, r3
    43fe:	460b      	mov	r3, r1
    4400:	817b      	strh	r3, [r7, #10]
    4402:	4613      	mov	r3, r2
    4404:	813b      	strh	r3, [r7, #8]
    4406:	4603      	mov	r3, r0
    4408:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    440a:	f04f 0300 	mov.w	r3, #0	; 0x0
    440e:	827b      	strh	r3, [r7, #18]
    4410:	f04f 0300 	mov.w	r3, #0	; 0x0
    4414:	82bb      	strh	r3, [r7, #20]
    4416:	f04f 0300 	mov.w	r3, #0	; 0x0
    441a:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	8c1b      	ldrh	r3, [r3, #32]
    4420:	b29b      	uxth	r3, r3
    4422:	603b      	str	r3, [r7, #0]
    4424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    4428:	6839      	ldr	r1, [r7, #0]
    442a:	ea01 0303 	and.w	r3, r1, r3
    442e:	603b      	str	r3, [r7, #0]
    4430:	68fa      	ldr	r2, [r7, #12]
    4432:	6839      	ldr	r1, [r7, #0]
    4434:	460b      	mov	r3, r1
    4436:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	8b9b      	ldrh	r3, [r3, #28]
    443c:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	8c1b      	ldrh	r3, [r3, #32]
    4442:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    4444:	897b      	ldrh	r3, [r7, #10]
    4446:	ea4f 2303 	mov.w	r3, r3, lsl #8
    444a:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    444c:	8a7b      	ldrh	r3, [r7, #18]
    444e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4452:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4454:	88fb      	ldrh	r3, [r7, #6]
    4456:	ea4f 1303 	mov.w	r3, r3, lsl #4
    445a:	b29a      	uxth	r2, r3
    445c:	893b      	ldrh	r3, [r7, #8]
    445e:	ea42 0303 	orr.w	r3, r2, r3
    4462:	b29a      	uxth	r2, r3
    4464:	8a7b      	ldrh	r3, [r7, #18]
    4466:	ea42 0303 	orr.w	r3, r2, r3
    446a:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
    446c:	8abb      	ldrh	r3, [r7, #20]
    446e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4472:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
    4474:	8afa      	ldrh	r2, [r7, #22]
    4476:	8abb      	ldrh	r3, [r7, #20]
    4478:	ea42 0303 	orr.w	r3, r2, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4482:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    4484:	68fa      	ldr	r2, [r7, #12]
    4486:	8a7b      	ldrh	r3, [r7, #18]
    4488:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer;
    448a:	68fa      	ldr	r2, [r7, #12]
    448c:	8abb      	ldrh	r3, [r7, #20]
    448e:	8413      	strh	r3, [r2, #32]
}
    4490:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	46c0      	nop			(mov r8, r8)

0000449c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    449c:	b480      	push	{r7}
    449e:	b087      	sub	sp, #28
    44a0:	af00      	add	r7, sp, #0
    44a2:	60f8      	str	r0, [r7, #12]
    44a4:	4618      	mov	r0, r3
    44a6:	460b      	mov	r3, r1
    44a8:	817b      	strh	r3, [r7, #10]
    44aa:	4613      	mov	r3, r2
    44ac:	813b      	strh	r3, [r7, #8]
    44ae:	4603      	mov	r3, r0
    44b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    44b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    44b6:	827b      	strh	r3, [r7, #18]
    44b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    44bc:	82bb      	strh	r3, [r7, #20]
    44be:	f04f 0300 	mov.w	r3, #0	; 0x0
    44c2:	82fb      	strh	r3, [r7, #22]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	8c1b      	ldrh	r3, [r3, #32]
    44c8:	b29b      	uxth	r3, r3
    44ca:	603b      	str	r3, [r7, #0]
    44cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
    44d0:	6839      	ldr	r1, [r7, #0]
    44d2:	ea01 0303 	and.w	r3, r1, r3
    44d6:	603b      	str	r3, [r7, #0]
    44d8:	68fa      	ldr	r2, [r7, #12]
    44da:	6839      	ldr	r1, [r7, #0]
    44dc:	460b      	mov	r3, r1
    44de:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	8b9b      	ldrh	r3, [r3, #28]
    44e4:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	8c1b      	ldrh	r3, [r3, #32]
    44ea:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    44ec:	897b      	ldrh	r3, [r7, #10]
    44ee:	ea4f 3303 	mov.w	r3, r3, lsl #12
    44f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    44f4:	8a7b      	ldrh	r3, [r7, #18]
    44f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    44fa:	ea4f 5303 	mov.w	r3, r3, lsl #20
    44fe:	ea4f 5313 	mov.w	r3, r3, lsr #20
    4502:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    4504:	893b      	ldrh	r3, [r7, #8]
    4506:	ea4f 2303 	mov.w	r3, r3, lsl #8
    450a:	b29a      	uxth	r2, r3
    450c:	8a7b      	ldrh	r3, [r7, #18]
    450e:	ea42 0303 	orr.w	r3, r2, r3
    4512:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    4514:	88fb      	ldrh	r3, [r7, #6]
    4516:	ea4f 3303 	mov.w	r3, r3, lsl #12
    451a:	b29a      	uxth	r2, r3
    451c:	8a7b      	ldrh	r3, [r7, #18]
    451e:	ea42 0303 	orr.w	r3, r2, r3
    4522:	827b      	strh	r3, [r7, #18]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
    4524:	8abb      	ldrh	r3, [r7, #20]
    4526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    452a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
    452c:	8afa      	ldrh	r2, [r7, #22]
    452e:	8abb      	ldrh	r3, [r7, #20]
    4530:	ea42 0303 	orr.w	r3, r2, r3
    4534:	b29b      	uxth	r3, r3
    4536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    453a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    453c:	68fa      	ldr	r2, [r7, #12]
    453e:	8a7b      	ldrh	r3, [r7, #18]
    4540:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer ;
    4542:	68fa      	ldr	r2, [r7, #12]
    4544:	8abb      	ldrh	r3, [r7, #20]
    4546:	8413      	strh	r3, [r2, #32]
}
    4548:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    454c:	46bd      	mov	sp, r7
    454e:	bc80      	pop	{r7}
    4550:	4770      	bx	lr
    4552:	46c0      	nop			(mov r8, r8)

00004554 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    4554:	b580      	push	{r7, lr}
    4556:	b082      	sub	sp, #8
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    455c:	687a      	ldr	r2, [r7, #4]
    455e:	4b2b      	ldr	r3, [pc, #172]	(460c <USART_DeInit+0xb8>)
    4560:	429a      	cmp	r2, r3
    4562:	d10c      	bne.n	457e <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    4564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4568:	f04f 0101 	mov.w	r1, #1	; 0x1
    456c:	f7fd ffd2 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    4570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4574:	f04f 0100 	mov.w	r1, #0	; 0x0
    4578:	f7fd ffcc 	bl	2514 <RCC_APB2PeriphResetCmd>
    457c:	e042      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    457e:	687a      	ldr	r2, [r7, #4]
    4580:	4b23      	ldr	r3, [pc, #140]	(4610 <USART_DeInit+0xbc>)
    4582:	429a      	cmp	r2, r3
    4584:	d10c      	bne.n	45a0 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    4586:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    458a:	f04f 0101 	mov.w	r1, #1	; 0x1
    458e:	f7fd ffe3 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    4592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4596:	f04f 0100 	mov.w	r1, #0	; 0x0
    459a:	f7fd ffdd 	bl	2558 <RCC_APB1PeriphResetCmd>
    459e:	e031      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	4b1c      	ldr	r3, [pc, #112]	(4614 <USART_DeInit+0xc0>)
    45a4:	429a      	cmp	r2, r3
    45a6:	d10c      	bne.n	45c2 <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    45a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45ac:	f04f 0101 	mov.w	r1, #1	; 0x1
    45b0:	f7fd ffd2 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    45b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45b8:	f04f 0100 	mov.w	r1, #0	; 0x0
    45bc:	f7fd ffcc 	bl	2558 <RCC_APB1PeriphResetCmd>
    45c0:	e020      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	4b14      	ldr	r3, [pc, #80]	(4618 <USART_DeInit+0xc4>)
    45c6:	429a      	cmp	r2, r3
    45c8:	d10c      	bne.n	45e4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    45ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    45d2:	f7fd ffc1 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    45d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45da:	f04f 0100 	mov.w	r1, #0	; 0x0
    45de:	f7fd ffbb 	bl	2558 <RCC_APB1PeriphResetCmd>
    45e2:	e00f      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    45e4:	687a      	ldr	r2, [r7, #4]
    45e6:	4b0d      	ldr	r3, [pc, #52]	(461c <USART_DeInit+0xc8>)
    45e8:	429a      	cmp	r2, r3
    45ea:	d10b      	bne.n	4604 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    45ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45f0:	f04f 0101 	mov.w	r1, #1	; 0x1
    45f4:	f7fd ffb0 	bl	2558 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    45f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45fc:	f04f 0100 	mov.w	r1, #0	; 0x0
    4600:	f7fd ffaa 	bl	2558 <RCC_APB1PeriphResetCmd>
    }
  }
}
    4604:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	40013800 	.word	0x40013800
    4610:	40004400 	.word	0x40004400
    4614:	40004800 	.word	0x40004800
    4618:	40004c00 	.word	0x40004c00
    461c:	40005000 	.word	0x40005000

00004620 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    4620:	b580      	push	{r7, lr}
    4622:	b08c      	sub	sp, #48
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    462a:	f04f 0300 	mov.w	r3, #0	; 0x0
    462e:	61fb      	str	r3, [r7, #28]
    4630:	f04f 0300 	mov.w	r3, #0	; 0x0
    4634:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
    4636:	f04f 0300 	mov.w	r3, #0	; 0x0
    463a:	627b      	str	r3, [r7, #36]
  uint32_t fractionaldivider = 0x00;
    463c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4640:	62bb      	str	r3, [r7, #40]
  uint32_t usartxbase = 0;
    4642:	f04f 0300 	mov.w	r3, #0	; 0x0
    4646:	62fb      	str	r3, [r7, #44]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	62fb      	str	r3, [r7, #44]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	8a1b      	ldrh	r3, [r3, #16]
    4650:	b29b      	uxth	r3, r3
    4652:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    4654:	69fa      	ldr	r2, [r7, #28]
    4656:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    465a:	ea02 0303 	and.w	r3, r2, r3
    465e:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    4660:	683b      	ldr	r3, [r7, #0]
    4662:	88db      	ldrh	r3, [r3, #6]
    4664:	461a      	mov	r2, r3
    4666:	69fb      	ldr	r3, [r7, #28]
    4668:	ea43 0302 	orr.w	r3, r3, r2
    466c:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	b29b      	uxth	r3, r3
    4672:	687a      	ldr	r2, [r7, #4]
    4674:	8213      	strh	r3, [r2, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	899b      	ldrh	r3, [r3, #12]
    467a:	b29b      	uxth	r3, r3
    467c:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    467e:	69fa      	ldr	r2, [r7, #28]
    4680:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    4684:	ea02 0303 	and.w	r3, r2, r3
    4688:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	889a      	ldrh	r2, [r3, #4]
    468e:	683b      	ldr	r3, [r7, #0]
    4690:	891b      	ldrh	r3, [r3, #8]
    4692:	ea42 0303 	orr.w	r3, r2, r3
    4696:	b29a      	uxth	r2, r3
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	895b      	ldrh	r3, [r3, #10]
    469c:	ea42 0303 	orr.w	r3, r2, r3
    46a0:	b29b      	uxth	r3, r3
    46a2:	461a      	mov	r2, r3
    46a4:	69fb      	ldr	r3, [r7, #28]
    46a6:	ea43 0302 	orr.w	r3, r3, r2
    46aa:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    46ac:	69fb      	ldr	r3, [r7, #28]
    46ae:	b29b      	uxth	r3, r3
    46b0:	687a      	ldr	r2, [r7, #4]
    46b2:	8193      	strh	r3, [r2, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	8a9b      	ldrh	r3, [r3, #20]
    46b8:	b29b      	uxth	r3, r3
    46ba:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    46bc:	69fa      	ldr	r2, [r7, #28]
    46be:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    46c2:	ea02 0303 	and.w	r3, r2, r3
    46c6:	61fb      	str	r3, [r7, #28]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    46c8:	683b      	ldr	r3, [r7, #0]
    46ca:	899b      	ldrh	r3, [r3, #12]
    46cc:	461a      	mov	r2, r3
    46ce:	69fb      	ldr	r3, [r7, #28]
    46d0:	ea43 0302 	orr.w	r3, r3, r2
    46d4:	61fb      	str	r3, [r7, #28]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    46d6:	69fb      	ldr	r3, [r7, #28]
    46d8:	b29b      	uxth	r3, r3
    46da:	687a      	ldr	r2, [r7, #4]
    46dc:	8293      	strh	r3, [r2, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    46de:	f107 0308 	add.w	r3, r7, #8	; 0x8
    46e2:	4618      	mov	r0, r3
    46e4:	f7fd fd94 	bl	2210 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    46e8:	6afa      	ldr	r2, [r7, #44]
    46ea:	4b24      	ldr	r3, [pc, #144]	(477c <USART_Init+0x15c>)
    46ec:	429a      	cmp	r2, r3
    46ee:	d102      	bne.n	46f6 <USART_Init+0xd6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    46f0:	697b      	ldr	r3, [r7, #20]
    46f2:	623b      	str	r3, [r7, #32]
    46f4:	e001      	b.n	46fa <USART_Init+0xda>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    46f6:	693b      	ldr	r3, [r7, #16]
    46f8:	623b      	str	r3, [r7, #32]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    46fa:	6a39      	ldr	r1, [r7, #32]
    46fc:	460b      	mov	r3, r1
    46fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    4702:	ea4f 0382 	mov.w	r3, r2, lsl #2
    4706:	ebc2 0303 	rsb	r3, r2, r3
    470a:	eb03 0201 	add.w	r2, r3, r1
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4716:	fbb2 f3f3 	udiv	r3, r2, r3
    471a:	627b      	str	r3, [r7, #36]
  tmpreg = (integerdivider / 0x64) << 0x04;
    471c:	6a7a      	ldr	r2, [r7, #36]
    471e:	4b18      	ldr	r3, [pc, #96]	(4780 <USART_Init+0x160>)
    4720:	fba3 1302 	umull	r1, r3, r3, r2
    4724:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4728:	ea4f 1303 	mov.w	r3, r3, lsl #4
    472c:	61fb      	str	r3, [r7, #28]
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	ea4f 1313 	mov.w	r3, r3, lsr #4
    4734:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4738:	ea4f 0283 	mov.w	r2, r3, lsl #2
    473c:	4413      	add	r3, r2
    473e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4742:	441a      	add	r2, r3
    4744:	6a7b      	ldr	r3, [r7, #36]
    4746:	ebc2 0303 	rsb	r3, r2, r3
    474a:	62bb      	str	r3, [r7, #40]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
    474c:	6abb      	ldr	r3, [r7, #40]
    474e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4752:	f103 0232 	add.w	r2, r3, #50	; 0x32
    4756:	4b0a      	ldr	r3, [pc, #40]	(4780 <USART_Init+0x160>)
    4758:	fba3 1302 	umull	r1, r3, r3, r2
    475c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4760:	f003 020f 	and.w	r2, r3, #15	; 0xf
    4764:	69fb      	ldr	r3, [r7, #28]
    4766:	ea43 0302 	orr.w	r3, r3, r2
    476a:	61fb      	str	r3, [r7, #28]
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    476c:	69fb      	ldr	r3, [r7, #28]
    476e:	b29b      	uxth	r3, r3
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	8113      	strh	r3, [r2, #8]
}
    4774:	f107 0730 	add.w	r7, r7, #48	; 0x30
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}
    477c:	40013800 	.word	0x40013800
    4780:	51eb851f 	.word	0x51eb851f

00004784 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    4784:	b480      	push	{r7}
    4786:	b083      	sub	sp, #12
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    478c:	687a      	ldr	r2, [r7, #4]
    478e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4792:	6013      	str	r3, [r2, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    4794:	687a      	ldr	r2, [r7, #4]
    4796:	f04f 0300 	mov.w	r3, #0	; 0x0
    479a:	8093      	strh	r3, [r2, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    479c:	687a      	ldr	r2, [r7, #4]
    479e:	f04f 0300 	mov.w	r3, #0	; 0x0
    47a2:	80d3      	strh	r3, [r2, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    47a4:	687a      	ldr	r2, [r7, #4]
    47a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47aa:	8113      	strh	r3, [r2, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    47ac:	687a      	ldr	r2, [r7, #4]
    47ae:	f04f 030c 	mov.w	r3, #12	; 0xc
    47b2:	8153      	strh	r3, [r2, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47ba:	8193      	strh	r3, [r2, #12]
}
    47bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    47c0:	46bd      	mov	sp, r7
    47c2:	bc80      	pop	{r7}
    47c4:	4770      	bx	lr
    47c6:	46c0      	nop			(mov r8, r8)

000047c8 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    47c8:	b480      	push	{r7}
    47ca:	b085      	sub	sp, #20
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    47d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    47d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	8a1b      	ldrh	r3, [r3, #16]
    47dc:	b29b      	uxth	r3, r3
    47de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    47e0:	68fa      	ldr	r2, [r7, #12]
    47e2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    47e6:	ea02 0303 	and.w	r3, r2, r3
    47ea:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	881a      	ldrh	r2, [r3, #0]
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	885b      	ldrh	r3, [r3, #2]
    47f4:	ea42 0303 	orr.w	r3, r2, r3
    47f8:	b29a      	uxth	r2, r3
    47fa:	683b      	ldr	r3, [r7, #0]
    47fc:	889b      	ldrh	r3, [r3, #4]
    47fe:	ea42 0303 	orr.w	r3, r2, r3
    4802:	b29a      	uxth	r2, r3
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	88db      	ldrh	r3, [r3, #6]
    4808:	ea42 0303 	orr.w	r3, r2, r3
    480c:	b29b      	uxth	r3, r3
    480e:	461a      	mov	r2, r3
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	ea43 0302 	orr.w	r3, r3, r2
    4816:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	b29b      	uxth	r3, r3
    481c:	687a      	ldr	r2, [r7, #4]
    481e:	8213      	strh	r3, [r2, #16]
}
    4820:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4824:	46bd      	mov	sp, r7
    4826:	bc80      	pop	{r7}
    4828:	4770      	bx	lr
    482a:	46c0      	nop			(mov r8, r8)

0000482c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    482c:	b480      	push	{r7}
    482e:	b083      	sub	sp, #12
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    4834:	687a      	ldr	r2, [r7, #4]
    4836:	f04f 0300 	mov.w	r3, #0	; 0x0
    483a:	8013      	strh	r3, [r2, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    483c:	687a      	ldr	r2, [r7, #4]
    483e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4842:	8053      	strh	r3, [r2, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	f04f 0300 	mov.w	r3, #0	; 0x0
    484a:	8093      	strh	r3, [r2, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    484c:	687a      	ldr	r2, [r7, #4]
    484e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4852:	80d3      	strh	r3, [r2, #6]
}
    4854:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4858:	46bd      	mov	sp, r7
    485a:	bc80      	pop	{r7}
    485c:	4770      	bx	lr
    485e:	46c0      	nop			(mov r8, r8)

00004860 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4860:	b480      	push	{r7}
    4862:	b085      	sub	sp, #20
    4864:	af00      	add	r7, sp, #0
    4866:	60f8      	str	r0, [r7, #12]
    4868:	460b      	mov	r3, r1
    486a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    486c:	7afb      	ldrb	r3, [r7, #11]
    486e:	2b00      	cmp	r3, #0
    4870:	d008      	beq.n	4884 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	899b      	ldrh	r3, [r3, #12]
    4876:	b29b      	uxth	r3, r3
    4878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    487c:	b29b      	uxth	r3, r3
    487e:	68fa      	ldr	r2, [r7, #12]
    4880:	8193      	strh	r3, [r2, #12]
    4882:	e00d      	b.n	48a0 <USART_Cmd+0x40>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	899b      	ldrh	r3, [r3, #12]
    4888:	b29b      	uxth	r3, r3
    488a:	607b      	str	r3, [r7, #4]
    488c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    4890:	6879      	ldr	r1, [r7, #4]
    4892:	ea01 0303 	and.w	r3, r1, r3
    4896:	607b      	str	r3, [r7, #4]
    4898:	68fa      	ldr	r2, [r7, #12]
    489a:	6879      	ldr	r1, [r7, #4]
    489c:	460b      	mov	r3, r1
    489e:	8193      	strh	r3, [r2, #12]
  }
}
    48a0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    48a4:	46bd      	mov	sp, r7
    48a6:	bc80      	pop	{r7}
    48a8:	4770      	bx	lr
    48aa:	46c0      	nop			(mov r8, r8)

000048ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    48ac:	b480      	push	{r7}
    48ae:	b087      	sub	sp, #28
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
    48b4:	460b      	mov	r3, r1
    48b6:	807b      	strh	r3, [r7, #2]
    48b8:	4613      	mov	r3, r2
    48ba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    48bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c0:	60bb      	str	r3, [r7, #8]
    48c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c6:	60fb      	str	r3, [r7, #12]
    48c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    48cc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0x00;
    48ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    48d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    48d8:	887b      	ldrh	r3, [r7, #2]
    48da:	b2db      	uxtb	r3, r3
    48dc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    48e0:	b2db      	uxtb	r3, r3
    48e2:	60bb      	str	r3, [r7, #8]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    48e4:	887b      	ldrh	r3, [r7, #2]
    48e6:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    48ea:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    48ec:	68fa      	ldr	r2, [r7, #12]
    48ee:	f04f 0301 	mov.w	r3, #1	; 0x1
    48f2:	fa03 f302 	lsl.w	r3, r3, r2
    48f6:	613b      	str	r3, [r7, #16]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    48f8:	68bb      	ldr	r3, [r7, #8]
    48fa:	2b01      	cmp	r3, #1
    48fc:	d104      	bne.n	4908 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	f103 030c 	add.w	r3, r3, #12	; 0xc
    4904:	617b      	str	r3, [r7, #20]
    4906:	e00b      	b.n	4920 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	2b02      	cmp	r3, #2
    490c:	d104      	bne.n	4918 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	f103 0310 	add.w	r3, r3, #16	; 0x10
    4914:	617b      	str	r3, [r7, #20]
    4916:	e003      	b.n	4920 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	f103 0314 	add.w	r3, r3, #20	; 0x14
    491e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    4920:	787b      	ldrb	r3, [r7, #1]
    4922:	2b00      	cmp	r3, #0
    4924:	d007      	beq.n	4936 <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    4926:	6979      	ldr	r1, [r7, #20]
    4928:	697b      	ldr	r3, [r7, #20]
    492a:	681a      	ldr	r2, [r3, #0]
    492c:	693b      	ldr	r3, [r7, #16]
    492e:	ea42 0303 	orr.w	r3, r2, r3
    4932:	600b      	str	r3, [r1, #0]
    4934:	e008      	b.n	4948 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    4936:	6979      	ldr	r1, [r7, #20]
    4938:	697b      	ldr	r3, [r7, #20]
    493a:	681a      	ldr	r2, [r3, #0]
    493c:	693b      	ldr	r3, [r7, #16]
    493e:	ea6f 0303 	mvn.w	r3, r3
    4942:	ea02 0303 	and.w	r3, r2, r3
    4946:	600b      	str	r3, [r1, #0]
  }
}
    4948:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    494c:	46bd      	mov	sp, r7
    494e:	bc80      	pop	{r7}
    4950:	4770      	bx	lr
    4952:	46c0      	nop			(mov r8, r8)

00004954 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    4954:	b480      	push	{r7}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
    495c:	460b      	mov	r3, r1
    495e:	807b      	strh	r3, [r7, #2]
    4960:	4613      	mov	r3, r2
    4962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    4964:	787b      	ldrb	r3, [r7, #1]
    4966:	2b00      	cmp	r3, #0
    4968:	d009      	beq.n	497e <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	8a9b      	ldrh	r3, [r3, #20]
    496e:	b29a      	uxth	r2, r3
    4970:	887b      	ldrh	r3, [r7, #2]
    4972:	ea42 0303 	orr.w	r3, r2, r3
    4976:	b29b      	uxth	r3, r3
    4978:	687a      	ldr	r2, [r7, #4]
    497a:	8293      	strh	r3, [r2, #20]
    497c:	e00b      	b.n	4996 <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	8a9b      	ldrh	r3, [r3, #20]
    4982:	b29a      	uxth	r2, r3
    4984:	887b      	ldrh	r3, [r7, #2]
    4986:	ea6f 0303 	mvn.w	r3, r3
    498a:	b29b      	uxth	r3, r3
    498c:	ea02 0303 	and.w	r3, r2, r3
    4990:	b29b      	uxth	r3, r3
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	8293      	strh	r3, [r2, #20]
  }
}
    4996:	f107 070c 	add.w	r7, r7, #12	; 0xc
    499a:	46bd      	mov	sp, r7
    499c:	bc80      	pop	{r7}
    499e:	4770      	bx	lr

000049a0 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    49a0:	b480      	push	{r7}
    49a2:	b085      	sub	sp, #20
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	460b      	mov	r3, r1
    49aa:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    49ac:	68fb      	ldr	r3, [r7, #12]
    49ae:	8a1b      	ldrh	r3, [r3, #16]
    49b0:	b29b      	uxth	r3, r3
    49b2:	607b      	str	r3, [r7, #4]
    49b4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    49b8:	6879      	ldr	r1, [r7, #4]
    49ba:	ea01 0303 	and.w	r3, r1, r3
    49be:	607b      	str	r3, [r7, #4]
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	6879      	ldr	r1, [r7, #4]
    49c4:	460b      	mov	r3, r1
    49c6:	8213      	strh	r3, [r2, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	8a1b      	ldrh	r3, [r3, #16]
    49cc:	b29a      	uxth	r2, r3
    49ce:	7afb      	ldrb	r3, [r7, #11]
    49d0:	ea42 0303 	orr.w	r3, r2, r3
    49d4:	b29b      	uxth	r3, r3
    49d6:	68fa      	ldr	r2, [r7, #12]
    49d8:	8213      	strh	r3, [r2, #16]
}
    49da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    49de:	46bd      	mov	sp, r7
    49e0:	bc80      	pop	{r7}
    49e2:	4770      	bx	lr

000049e4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    49e4:	b480      	push	{r7}
    49e6:	b085      	sub	sp, #20
    49e8:	af00      	add	r7, sp, #0
    49ea:	60f8      	str	r0, [r7, #12]
    49ec:	460b      	mov	r3, r1
    49ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	899b      	ldrh	r3, [r3, #12]
    49f4:	b29b      	uxth	r3, r3
    49f6:	607b      	str	r3, [r7, #4]
    49f8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    49fc:	6879      	ldr	r1, [r7, #4]
    49fe:	ea01 0303 	and.w	r3, r1, r3
    4a02:	607b      	str	r3, [r7, #4]
    4a04:	68fa      	ldr	r2, [r7, #12]
    4a06:	6879      	ldr	r1, [r7, #4]
    4a08:	460b      	mov	r3, r1
    4a0a:	8193      	strh	r3, [r2, #12]
  USARTx->CR1 |= USART_WakeUp;
    4a0c:	68fb      	ldr	r3, [r7, #12]
    4a0e:	899b      	ldrh	r3, [r3, #12]
    4a10:	b29a      	uxth	r2, r3
    4a12:	897b      	ldrh	r3, [r7, #10]
    4a14:	ea42 0303 	orr.w	r3, r2, r3
    4a18:	b29b      	uxth	r3, r3
    4a1a:	68fa      	ldr	r2, [r7, #12]
    4a1c:	8193      	strh	r3, [r2, #12]
}
    4a1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a22:	46bd      	mov	sp, r7
    4a24:	bc80      	pop	{r7}
    4a26:	4770      	bx	lr

00004a28 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4a28:	b480      	push	{r7}
    4a2a:	b085      	sub	sp, #20
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	460b      	mov	r3, r1
    4a32:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    4a34:	7afb      	ldrb	r3, [r7, #11]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d008      	beq.n	4a4c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	899b      	ldrh	r3, [r3, #12]
    4a3e:	b29b      	uxth	r3, r3
    4a40:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4a44:	b29b      	uxth	r3, r3
    4a46:	68fa      	ldr	r2, [r7, #12]
    4a48:	8193      	strh	r3, [r2, #12]
    4a4a:	e00d      	b.n	4a68 <USART_ReceiverWakeUpCmd+0x40>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	899b      	ldrh	r3, [r3, #12]
    4a50:	b29b      	uxth	r3, r3
    4a52:	607b      	str	r3, [r7, #4]
    4a54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4a58:	6879      	ldr	r1, [r7, #4]
    4a5a:	ea01 0303 	and.w	r3, r1, r3
    4a5e:	607b      	str	r3, [r7, #4]
    4a60:	68fa      	ldr	r2, [r7, #12]
    4a62:	6879      	ldr	r1, [r7, #4]
    4a64:	460b      	mov	r3, r1
    4a66:	8193      	strh	r3, [r2, #12]
  }
}
    4a68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bc80      	pop	{r7}
    4a70:	4770      	bx	lr
    4a72:	46c0      	nop			(mov r8, r8)

00004a74 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	460b      	mov	r3, r1
    4a7e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	8a1b      	ldrh	r3, [r3, #16]
    4a84:	b29b      	uxth	r3, r3
    4a86:	607b      	str	r3, [r7, #4]
    4a88:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4a8c:	6879      	ldr	r1, [r7, #4]
    4a8e:	ea01 0303 	and.w	r3, r1, r3
    4a92:	607b      	str	r3, [r7, #4]
    4a94:	68fa      	ldr	r2, [r7, #12]
    4a96:	6879      	ldr	r1, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	8213      	strh	r3, [r2, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	8a1b      	ldrh	r3, [r3, #16]
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	897b      	ldrh	r3, [r7, #10]
    4aa4:	ea42 0303 	orr.w	r3, r2, r3
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	68fa      	ldr	r2, [r7, #12]
    4aac:	8213      	strh	r3, [r2, #16]
}
    4aae:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ab2:	46bd      	mov	sp, r7
    4ab4:	bc80      	pop	{r7}
    4ab6:	4770      	bx	lr

00004ab8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4ab8:	b480      	push	{r7}
    4aba:	b085      	sub	sp, #20
    4abc:	af00      	add	r7, sp, #0
    4abe:	60f8      	str	r0, [r7, #12]
    4ac0:	460b      	mov	r3, r1
    4ac2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4ac4:	7afb      	ldrb	r3, [r7, #11]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d008      	beq.n	4adc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    4aca:	68fb      	ldr	r3, [r7, #12]
    4acc:	8a1b      	ldrh	r3, [r3, #16]
    4ace:	b29b      	uxth	r3, r3
    4ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	68fa      	ldr	r2, [r7, #12]
    4ad8:	8213      	strh	r3, [r2, #16]
    4ada:	e00d      	b.n	4af8 <USART_LINCmd+0x40>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	8a1b      	ldrh	r3, [r3, #16]
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	607b      	str	r3, [r7, #4]
    4ae4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    4ae8:	6879      	ldr	r1, [r7, #4]
    4aea:	ea01 0303 	and.w	r3, r1, r3
    4aee:	607b      	str	r3, [r7, #4]
    4af0:	68fa      	ldr	r2, [r7, #12]
    4af2:	6879      	ldr	r1, [r7, #4]
    4af4:	460b      	mov	r3, r1
    4af6:	8213      	strh	r3, [r2, #16]
  }
}
    4af8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4afc:	46bd      	mov	sp, r7
    4afe:	bc80      	pop	{r7}
    4b00:	4770      	bx	lr
    4b02:	46c0      	nop			(mov r8, r8)

00004b04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    4b04:	b480      	push	{r7}
    4b06:	b085      	sub	sp, #20
    4b08:	af00      	add	r7, sp, #0
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	460b      	mov	r3, r1
    4b0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    4b10:	8979      	ldrh	r1, [r7, #10]
    4b12:	6079      	str	r1, [r7, #4]
    4b14:	687a      	ldr	r2, [r7, #4]
    4b16:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b1a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b1e:	607b      	str	r3, [r7, #4]
    4b20:	68fa      	ldr	r2, [r7, #12]
    4b22:	6879      	ldr	r1, [r7, #4]
    4b24:	460b      	mov	r3, r1
    4b26:	8093      	strh	r3, [r2, #4]
}
    4b28:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bc80      	pop	{r7}
    4b30:	4770      	bx	lr
    4b32:	46c0      	nop			(mov r8, r8)

00004b34 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	889b      	ldrh	r3, [r3, #4]
    4b40:	b29b      	uxth	r3, r3
    4b42:	603b      	str	r3, [r7, #0]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b4a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b4e:	603b      	str	r3, [r7, #0]
    4b50:	683b      	ldr	r3, [r7, #0]
}
    4b52:	4618      	mov	r0, r3
    4b54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b58:	46bd      	mov	sp, r7
    4b5a:	bc80      	pop	{r7}
    4b5c:	4770      	bx	lr
    4b5e:	46c0      	nop			(mov r8, r8)

00004b60 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	899b      	ldrh	r3, [r3, #12]
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4b72:	b29b      	uxth	r3, r3
    4b74:	687a      	ldr	r2, [r7, #4]
    4b76:	8193      	strh	r3, [r2, #12]
}
    4b78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bc80      	pop	{r7}
    4b80:	4770      	bx	lr
    4b82:	46c0      	nop			(mov r8, r8)

00004b84 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    4b84:	b480      	push	{r7}
    4b86:	b083      	sub	sp, #12
    4b88:	af00      	add	r7, sp, #0
    4b8a:	6078      	str	r0, [r7, #4]
    4b8c:	460b      	mov	r3, r1
    4b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	8b1b      	ldrh	r3, [r3, #24]
    4b94:	b29b      	uxth	r3, r3
    4b96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4b9a:	687a      	ldr	r2, [r7, #4]
    4b9c:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	8b1b      	ldrh	r3, [r3, #24]
    4ba2:	b29a      	uxth	r2, r3
    4ba4:	78fb      	ldrb	r3, [r7, #3]
    4ba6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4baa:	b29b      	uxth	r3, r3
    4bac:	ea42 0303 	orr.w	r3, r2, r3
    4bb0:	b29b      	uxth	r3, r3
    4bb2:	687a      	ldr	r2, [r7, #4]
    4bb4:	8313      	strh	r3, [r2, #24]
}
    4bb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bba:	46bd      	mov	sp, r7
    4bbc:	bc80      	pop	{r7}
    4bbe:	4770      	bx	lr

00004bc0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	8b1b      	ldrh	r3, [r3, #24]
    4bd0:	b29b      	uxth	r3, r3
    4bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4bd6:	687a      	ldr	r2, [r7, #4]
    4bd8:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	8b1b      	ldrh	r3, [r3, #24]
    4bde:	b29a      	uxth	r2, r3
    4be0:	78fb      	ldrb	r3, [r7, #3]
    4be2:	ea42 0303 	orr.w	r3, r2, r3
    4be6:	b29b      	uxth	r3, r3
    4be8:	687a      	ldr	r2, [r7, #4]
    4bea:	8313      	strh	r3, [r2, #24]
}
    4bec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bc80      	pop	{r7}
    4bf4:	4770      	bx	lr
    4bf6:	46c0      	nop			(mov r8, r8)

00004bf8 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4bf8:	b480      	push	{r7}
    4bfa:	b085      	sub	sp, #20
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	460b      	mov	r3, r1
    4c02:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c04:	7afb      	ldrb	r3, [r7, #11]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d008      	beq.n	4c1c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	8a9b      	ldrh	r3, [r3, #20]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    4c14:	b29b      	uxth	r3, r3
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	8293      	strh	r3, [r2, #20]
    4c1a:	e00d      	b.n	4c38 <USART_SmartCardCmd+0x40>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	8a9b      	ldrh	r3, [r3, #20]
    4c20:	b29b      	uxth	r3, r3
    4c22:	607b      	str	r3, [r7, #4]
    4c24:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4c28:	6879      	ldr	r1, [r7, #4]
    4c2a:	ea01 0303 	and.w	r3, r1, r3
    4c2e:	607b      	str	r3, [r7, #4]
    4c30:	68fa      	ldr	r2, [r7, #12]
    4c32:	6879      	ldr	r1, [r7, #4]
    4c34:	460b      	mov	r3, r1
    4c36:	8293      	strh	r3, [r2, #20]
  }
}
    4c38:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bc80      	pop	{r7}
    4c40:	4770      	bx	lr
    4c42:	46c0      	nop			(mov r8, r8)

00004c44 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c44:	b480      	push	{r7}
    4c46:	b085      	sub	sp, #20
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	460b      	mov	r3, r1
    4c4e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c50:	7afb      	ldrb	r3, [r7, #11]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d008      	beq.n	4c68 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	8a9b      	ldrh	r3, [r3, #20]
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4c60:	b29b      	uxth	r3, r3
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	8293      	strh	r3, [r2, #20]
    4c66:	e00d      	b.n	4c84 <USART_SmartCardNACKCmd+0x40>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	8a9b      	ldrh	r3, [r3, #20]
    4c6c:	b29b      	uxth	r3, r3
    4c6e:	607b      	str	r3, [r7, #4]
    4c70:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4c74:	6879      	ldr	r1, [r7, #4]
    4c76:	ea01 0303 	and.w	r3, r1, r3
    4c7a:	607b      	str	r3, [r7, #4]
    4c7c:	68fa      	ldr	r2, [r7, #12]
    4c7e:	6879      	ldr	r1, [r7, #4]
    4c80:	460b      	mov	r3, r1
    4c82:	8293      	strh	r3, [r2, #20]
  }
}
    4c84:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c88:	46bd      	mov	sp, r7
    4c8a:	bc80      	pop	{r7}
    4c8c:	4770      	bx	lr
    4c8e:	46c0      	nop			(mov r8, r8)

00004c90 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c90:	b480      	push	{r7}
    4c92:	b085      	sub	sp, #20
    4c94:	af00      	add	r7, sp, #0
    4c96:	60f8      	str	r0, [r7, #12]
    4c98:	460b      	mov	r3, r1
    4c9a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4c9c:	7afb      	ldrb	r3, [r7, #11]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d008      	beq.n	4cb4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	8a9b      	ldrh	r3, [r3, #20]
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    4cac:	b29b      	uxth	r3, r3
    4cae:	68fa      	ldr	r2, [r7, #12]
    4cb0:	8293      	strh	r3, [r2, #20]
    4cb2:	e00d      	b.n	4cd0 <USART_HalfDuplexCmd+0x40>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	8a9b      	ldrh	r3, [r3, #20]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	607b      	str	r3, [r7, #4]
    4cbc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    4cc0:	6879      	ldr	r1, [r7, #4]
    4cc2:	ea01 0303 	and.w	r3, r1, r3
    4cc6:	607b      	str	r3, [r7, #4]
    4cc8:	68fa      	ldr	r2, [r7, #12]
    4cca:	6879      	ldr	r1, [r7, #4]
    4ccc:	460b      	mov	r3, r1
    4cce:	8293      	strh	r3, [r2, #20]
  }
}
    4cd0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4cd4:	46bd      	mov	sp, r7
    4cd6:	bc80      	pop	{r7}
    4cd8:	4770      	bx	lr
    4cda:	46c0      	nop			(mov r8, r8)

00004cdc <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	460b      	mov	r3, r1
    4ce6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    4ce8:	68fb      	ldr	r3, [r7, #12]
    4cea:	8a9b      	ldrh	r3, [r3, #20]
    4cec:	b29b      	uxth	r3, r3
    4cee:	607b      	str	r3, [r7, #4]
    4cf0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    4cf4:	6879      	ldr	r1, [r7, #4]
    4cf6:	ea01 0303 	and.w	r3, r1, r3
    4cfa:	607b      	str	r3, [r7, #4]
    4cfc:	68fa      	ldr	r2, [r7, #12]
    4cfe:	6879      	ldr	r1, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	8293      	strh	r3, [r2, #20]
  USARTx->CR3 |= USART_IrDAMode;
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	8a9b      	ldrh	r3, [r3, #20]
    4d08:	b29a      	uxth	r2, r3
    4d0a:	897b      	ldrh	r3, [r7, #10]
    4d0c:	ea42 0303 	orr.w	r3, r2, r3
    4d10:	b29b      	uxth	r3, r3
    4d12:	68fa      	ldr	r2, [r7, #12]
    4d14:	8293      	strh	r3, [r2, #20]
}
    4d16:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bc80      	pop	{r7}
    4d1e:	4770      	bx	lr

00004d20 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4d20:	b480      	push	{r7}
    4d22:	b085      	sub	sp, #20
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	460b      	mov	r3, r1
    4d2a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    4d2c:	7afb      	ldrb	r3, [r7, #11]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d008      	beq.n	4d44 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	8a9b      	ldrh	r3, [r3, #20]
    4d36:	b29b      	uxth	r3, r3
    4d38:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	68fa      	ldr	r2, [r7, #12]
    4d40:	8293      	strh	r3, [r2, #20]
    4d42:	e00d      	b.n	4d60 <USART_IrDACmd+0x40>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	8a9b      	ldrh	r3, [r3, #20]
    4d48:	b29b      	uxth	r3, r3
    4d4a:	607b      	str	r3, [r7, #4]
    4d4c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4d50:	6879      	ldr	r1, [r7, #4]
    4d52:	ea01 0303 	and.w	r3, r1, r3
    4d56:	607b      	str	r3, [r7, #4]
    4d58:	68fa      	ldr	r2, [r7, #12]
    4d5a:	6879      	ldr	r1, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	8293      	strh	r3, [r2, #20]
  }
}
    4d60:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			(mov r8, r8)

00004d6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b085      	sub	sp, #20
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
    4d74:	460b      	mov	r3, r1
    4d76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    4d78:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d7c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	881b      	ldrh	r3, [r3, #0]
    4d82:	b29a      	uxth	r2, r3
    4d84:	887b      	ldrh	r3, [r7, #2]
    4d86:	ea02 0303 	and.w	r3, r2, r3
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d003      	beq.n	4d98 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    4d90:	f04f 0301 	mov.w	r3, #1	; 0x1
    4d94:	73fb      	strb	r3, [r7, #15]
    4d96:	e002      	b.n	4d9e <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    4d98:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d9e:	7bfb      	ldrb	r3, [r7, #15]
}
    4da0:	4618      	mov	r0, r3
    4da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4da6:	46bd      	mov	sp, r7
    4da8:	bc80      	pop	{r7}
    4daa:	4770      	bx	lr

00004dac <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]
    4db4:	460b      	mov	r3, r1
    4db6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    4db8:	887b      	ldrh	r3, [r7, #2]
    4dba:	ea6f 0303 	mvn.w	r3, r3
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	687a      	ldr	r2, [r7, #4]
    4dc2:	8013      	strh	r3, [r2, #0]
}
    4dc4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4dc8:	46bd      	mov	sp, r7
    4dca:	bc80      	pop	{r7}
    4dcc:	4770      	bx	lr
    4dce:	46c0      	nop			(mov r8, r8)

00004dd0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4dd0:	b480      	push	{r7}
    4dd2:	b087      	sub	sp, #28
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    4dd8:	460b      	mov	r3, r1
    4dda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    4ddc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de0:	60bb      	str	r3, [r7, #8]
    4de2:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de6:	60fb      	str	r3, [r7, #12]
    4de8:	f04f 0300 	mov.w	r3, #0	; 0x0
    4dec:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    4dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    4df2:	75fb      	strb	r3, [r7, #23]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    4df4:	887b      	ldrh	r3, [r7, #2]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	613b      	str	r3, [r7, #16]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    4e00:	887b      	ldrh	r3, [r7, #2]
    4e02:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    4e06:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;
    4e08:	68fa      	ldr	r2, [r7, #12]
    4e0a:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e0e:	fa03 f302 	lsl.w	r3, r3, r2
    4e12:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	2b01      	cmp	r3, #1
    4e18:	d108      	bne.n	4e2c <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR1;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	899b      	ldrh	r3, [r3, #12]
    4e1e:	b29b      	uxth	r3, r3
    4e20:	461a      	mov	r2, r3
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	ea03 0302 	and.w	r3, r3, r2
    4e28:	60fb      	str	r3, [r7, #12]
    4e2a:	e013      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    4e2c:	693b      	ldr	r3, [r7, #16]
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d108      	bne.n	4e44 <USART_GetITStatus+0x74>
  {
    itmask &= USARTx->CR2;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	8a1b      	ldrh	r3, [r3, #16]
    4e36:	b29b      	uxth	r3, r3
    4e38:	461a      	mov	r2, r3
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	ea03 0302 	and.w	r3, r3, r2
    4e40:	60fb      	str	r3, [r7, #12]
    4e42:	e007      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	8a9b      	ldrh	r3, [r3, #20]
    4e48:	b29b      	uxth	r3, r3
    4e4a:	461a      	mov	r2, r3
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	ea03 0302 	and.w	r3, r3, r2
    4e52:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    4e54:	887b      	ldrh	r3, [r7, #2]
    4e56:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	60bb      	str	r3, [r7, #8]
  bitpos = (uint32_t)0x01 << bitpos;
    4e5e:	68ba      	ldr	r2, [r7, #8]
    4e60:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e64:	fa03 f302 	lsl.w	r3, r3, r2
    4e68:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	b29b      	uxth	r3, r3
    4e70:	461a      	mov	r2, r3
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	ea03 0302 	and.w	r3, r3, r2
    4e78:	60bb      	str	r3, [r7, #8]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d006      	beq.n	4e8e <USART_GetITStatus+0xbe>
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <USART_GetITStatus+0xbe>
  {
    bitstatus = SET;
    4e86:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e8a:	75fb      	strb	r3, [r7, #23]
    4e8c:	e002      	b.n	4e94 <USART_GetITStatus+0xc4>
  }
  else
  {
    bitstatus = RESET;
    4e8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4e92:	75fb      	strb	r3, [r7, #23]
  }
  
  return bitstatus;  
    4e94:	7dfb      	ldrb	r3, [r7, #23]
}
    4e96:	4618      	mov	r0, r3
    4e98:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bc80      	pop	{r7}
    4ea0:	4770      	bx	lr
    4ea2:	46c0      	nop			(mov r8, r8)

00004ea4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4ea4:	b480      	push	{r7}
    4ea6:	b085      	sub	sp, #20
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    4eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb4:	81bb      	strh	r3, [r7, #12]
    4eb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eba:	81fb      	strh	r3, [r7, #14]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    4ebc:	887b      	ldrh	r3, [r7, #2]
    4ebe:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4ec2:	81bb      	strh	r3, [r7, #12]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    4ec4:	89ba      	ldrh	r2, [r7, #12]
    4ec6:	f04f 0301 	mov.w	r3, #1	; 0x1
    4eca:	fa03 f302 	lsl.w	r3, r3, r2
    4ece:	81fb      	strh	r3, [r7, #14]
  USARTx->SR = (uint16_t)~itmask;
    4ed0:	89fb      	ldrh	r3, [r7, #14]
    4ed2:	ea6f 0303 	mvn.w	r3, r3
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	687a      	ldr	r2, [r7, #4]
    4eda:	8013      	strh	r3, [r2, #0]
}
    4edc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bc80      	pop	{r7}
    4ee4:	4770      	bx	lr
    4ee6:	46c0      	nop			(mov r8, r8)

00004ee8 <_ZN9AscenseurD2Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4ee8:	b480      	push	{r7}
    4eea:	b083      	sub	sp, #12
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4ef0:	4b07      	ldr	r3, [pc, #28]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4ef2:	681a      	ldr	r2, [r3, #0]
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	429a      	cmp	r2, r3
    4ef8:	d103      	bne.n	4f02 <_ZN9AscenseurD2Ev+0x1a>
        m_ascenseur = NULL;
    4efa:	4a05      	ldr	r2, [pc, #20]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4efc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f00:	6013      	str	r3, [r2, #0]
}
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	4618      	mov	r0, r3
    4f06:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f0a:	46bd      	mov	sp, r7
    4f0c:	bc80      	pop	{r7}
    4f0e:	4770      	bx	lr
    4f10:	20000548 	.word	0x20000548

00004f14 <_ZN9AscenseurD1Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4f14:	b480      	push	{r7}
    4f16:	b083      	sub	sp, #12
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4f1c:	4b07      	ldr	r3, [pc, #28]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f1e:	681a      	ldr	r2, [r3, #0]
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	429a      	cmp	r2, r3
    4f24:	d103      	bne.n	4f2e <_ZN9AscenseurD1Ev+0x1a>
        m_ascenseur = NULL;
    4f26:	4a05      	ldr	r2, [pc, #20]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f28:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f2c:	6013      	str	r3, [r2, #0]
}
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	4618      	mov	r0, r3
    4f32:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f36:	46bd      	mov	sp, r7
    4f38:	bc80      	pop	{r7}
    4f3a:	4770      	bx	lr
    4f3c:	20000548 	.word	0x20000548

00004f40 <_ZNK9Ascenseur5aFiniEv>:
        }
    }
}

// est ce que l'ascenseur a fini sa montée/descente
bool Ascenseur::aFini() const
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
{
    return !m_tourne;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    4f50:	b2db      	uxtb	r3, r3
}
    4f52:	4618      	mov	r0, r3
    4f54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f58:	46bd      	mov	sp, r7
    4f5a:	bc80      	pop	{r7}
    4f5c:	4770      	bx	lr
    4f5e:	46c0      	nop			(mov r8, r8)

00004f60 <_ZNK9Ascenseur8vaEnHautEv>:

// est ce que l'ascenseur va/est en haut ?
bool Ascenseur::vaEnHaut() const
    4f60:	b480      	push	{r7}
    4f62:	b083      	sub	sp, #12
    4f64:	af00      	add	r7, sp, #0
    4f66:	6078      	str	r0, [r7, #4]
{
    return m_vaEnHaut;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	785b      	ldrb	r3, [r3, #1]
}
    4f6c:	4618      	mov	r0, r3
    4f6e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f72:	46bd      	mov	sp, r7
    4f74:	bc80      	pop	{r7}
    4f76:	4770      	bx	lr

00004f78 <_ZNK9Ascenseur10toutEnHautEv>:

// est ce que les fdc sont activés ?
bool Ascenseur::toutEnHaut() const
    4f78:	b580      	push	{r7, lr}
    4f7a:	b086      	sub	sp, #24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
{
    return m_fdcHaut->getValue().b;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	689b      	ldr	r3, [r3, #8]
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4f8a:	f8d3 c000 	ldr.w	ip, [r3]
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	689a      	ldr	r2, [r3, #8]
    4f92:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4f96:	4618      	mov	r0, r3
    4f98:	4611      	mov	r1, r2
    4f9a:	47e0      	blx	ip
    4f9c:	7d3b      	ldrb	r3, [r7, #20]
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fa4:	46bd      	mov	sp, r7
    4fa6:	bd80      	pop	{r7, pc}

00004fa8 <_ZNK9Ascenseur9toutEnBasEv>:

bool Ascenseur::toutEnBas() const
    4fa8:	b580      	push	{r7, lr}
    4faa:	b086      	sub	sp, #24
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
{
    return m_fdcBas->getValue().b;
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	68db      	ldr	r3, [r3, #12]
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4fba:	f8d3 c000 	ldr.w	ip, [r3]
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	68da      	ldr	r2, [r3, #12]
    4fc2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4fc6:	4618      	mov	r0, r3
    4fc8:	4611      	mov	r1, r2
    4fca:	47e0      	blx	ip
    4fcc:	7d3b      	ldrb	r3, [r7, #20]
}
    4fce:	4618      	mov	r0, r3
    4fd0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}

00004fd8 <_ZN9Ascenseur3getEv>:

// renvoit l'ascenseur
Ascenseur* Ascenseur::get()
    4fd8:	b480      	push	{r7}
    4fda:	af00      	add	r7, sp, #0
{
    return m_ascenseur;
    4fdc:	4b02      	ldr	r3, [pc, #8]	(4fe8 <_ZN9Ascenseur3getEv+0x10>)
    4fde:	681b      	ldr	r3, [r3, #0]
}
    4fe0:	4618      	mov	r0, r3
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bc80      	pop	{r7}
    4fe6:	4770      	bx	lr
    4fe8:	20000548 	.word	0x20000548

00004fec <_ZN9Ascenseur6updateEv>:
        m_vis->tourne(-0.5f);
    }
}

// met à jour l'état de l'ascenseur pour l'arreter si il est arrivé à son but
void Ascenseur::update()
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
{
    if (m_tourne)
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d01b      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
    {
        if (m_vaEnHaut ? toutEnHaut() : toutEnBas())
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	785b      	ldrb	r3, [r3, #1]
    5000:	2b00      	cmp	r3, #0
    5002:	d005      	beq.n	5010 <_ZN9Ascenseur6updateEv+0x24>
    5004:	6878      	ldr	r0, [r7, #4]
    5006:	f7ff ffb7 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    500a:	4603      	mov	r3, r0
    500c:	603b      	str	r3, [r7, #0]
    500e:	e004      	b.n	501a <_ZN9Ascenseur6updateEv+0x2e>
    5010:	6878      	ldr	r0, [r7, #4]
    5012:	f7ff ffc9 	bl	4fa8 <_ZNK9Ascenseur9toutEnBasEv>
    5016:	4603      	mov	r3, r0
    5018:	603b      	str	r3, [r7, #0]
    501a:	683b      	ldr	r3, [r7, #0]
    501c:	2b00      	cmp	r3, #0
    501e:	d009      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
        {
            m_tourne = false;
    5020:	687a      	ldr	r2, [r7, #4]
    5022:	f04f 0300 	mov.w	r3, #0	; 0x0
    5026:	7013      	strb	r3, [r2, #0]
            m_vis->tourne(0.0f);
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	685b      	ldr	r3, [r3, #4]
    502c:	4618      	mov	r0, r3
    502e:	4903      	ldr	r1, [pc, #12]	(503c <_ZN9Ascenseur6updateEv+0x50>)
    5030:	f008 fa26 	bl	d480 <_ZN4Roue6tourneEf>
        }
    }
}
    5034:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}
    503c:	00000000 	.word	0x00000000

00005040 <_ZN9Ascenseur9descendreEv>:
        m_vis->tourne(0.5f);
    }
}

// l'ascenseur descend tout en bas
void Ascenseur::descendre()
    5040:	b580      	push	{r7, lr}
    5042:	b082      	sub	sp, #8
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = false;
    5048:	687a      	ldr	r2, [r7, #4]
    504a:	f04f 0300 	mov.w	r3, #0	; 0x0
    504e:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5050:	6878      	ldr	r0, [r7, #4]
    5052:	f7ff ff91 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    5056:	4603      	mov	r3, r0
    5058:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    505c:	b2db      	uxtb	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d009      	beq.n	5076 <_ZN9Ascenseur9descendreEv+0x36>
    {
        m_tourne = true;
    5062:	687a      	ldr	r2, [r7, #4]
    5064:	f04f 0301 	mov.w	r3, #1	; 0x1
    5068:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(-0.5f);
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	685b      	ldr	r3, [r3, #4]
    506e:	4618      	mov	r0, r3
    5070:	4903      	ldr	r1, [pc, #12]	(5080 <_ZN9Ascenseur9descendreEv+0x40>)
    5072:	f008 fa05 	bl	d480 <_ZN4Roue6tourneEf>
    }
}
    5076:	f107 0708 	add.w	r7, r7, #8	; 0x8
    507a:	46bd      	mov	sp, r7
    507c:	bd80      	pop	{r7, pc}
    507e:	46c0      	nop			(mov r8, r8)
    5080:	bf000000 	.word	0xbf000000

00005084 <_ZN9Ascenseur6monterEv>:
    if (m_ascenseur == this)
        m_ascenseur = NULL;
}

// l'ascenseur monte tout en haut
void Ascenseur::monter()
    5084:	b580      	push	{r7, lr}
    5086:	b082      	sub	sp, #8
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = true;
    508c:	687a      	ldr	r2, [r7, #4]
    508e:	f04f 0301 	mov.w	r3, #1	; 0x1
    5092:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5094:	6878      	ldr	r0, [r7, #4]
    5096:	f7ff ff6f 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    509a:	4603      	mov	r3, r0
    509c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    50a0:	b2db      	uxtb	r3, r3
    50a2:	2b00      	cmp	r3, #0
    50a4:	d009      	beq.n	50ba <_ZN9Ascenseur6monterEv+0x36>
    {
        m_tourne = true;
    50a6:	687a      	ldr	r2, [r7, #4]
    50a8:	f04f 0301 	mov.w	r3, #1	; 0x1
    50ac:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(0.5f);
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	685b      	ldr	r3, [r3, #4]
    50b2:	4618      	mov	r0, r3
    50b4:	4903      	ldr	r1, [pc, #12]	(50c4 <_ZN9Ascenseur6monterEv+0x40>)
    50b6:	f008 f9e3 	bl	d480 <_ZN4Roue6tourneEf>
    }
}
    50ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50be:	46bd      	mov	sp, r7
    50c0:	bd80      	pop	{r7, pc}
    50c2:	46c0      	nop			(mov r8, r8)
    50c4:	3f000000 	.word	0x3f000000

000050c8 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    50c8:	b580      	push	{r7, lr}
    50ca:	b084      	sub	sp, #16
    50cc:	af00      	add	r7, sp, #0
    50ce:	60f8      	str	r0, [r7, #12]
    50d0:	60b9      	str	r1, [r7, #8]
    50d2:	607a      	str	r2, [r7, #4]
    50d4:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    50d6:	68fa      	ldr	r2, [r7, #12]
    50d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    50dc:	7013      	strb	r3, [r2, #0]
    50de:	68fa      	ldr	r2, [r7, #12]
    50e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    50e4:	7053      	strb	r3, [r2, #1]
    50e6:	68fa      	ldr	r2, [r7, #12]
    50e8:	68bb      	ldr	r3, [r7, #8]
    50ea:	6053      	str	r3, [r2, #4]
    50ec:	68fa      	ldr	r2, [r7, #12]
    50ee:	687b      	ldr	r3, [r7, #4]
    50f0:	6093      	str	r3, [r2, #8]
    50f2:	68fa      	ldr	r2, [r7, #12]
    50f4:	683b      	ldr	r3, [r7, #0]
    50f6:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    50f8:	68b8      	ldr	r0, [r7, #8]
    50fa:	4906      	ldr	r1, [pc, #24]	(5114 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    50fc:	f008 f9c0 	bl	d480 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5100:	4a05      	ldr	r2, [pc, #20]	(5118 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5102:	68fb      	ldr	r3, [r7, #12]
    5104:	6013      	str	r3, [r2, #0]
}
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	4618      	mov	r0, r3
    510a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    510e:	46bd      	mov	sp, r7
    5110:	bd80      	pop	{r7, pc}
    5112:	46c0      	nop			(mov r8, r8)
    5114:	00000000 	.word	0x00000000
    5118:	20000548 	.word	0x20000548

0000511c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    511c:	b580      	push	{r7, lr}
    511e:	b084      	sub	sp, #16
    5120:	af00      	add	r7, sp, #0
    5122:	60f8      	str	r0, [r7, #12]
    5124:	60b9      	str	r1, [r7, #8]
    5126:	607a      	str	r2, [r7, #4]
    5128:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    512a:	68fa      	ldr	r2, [r7, #12]
    512c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5130:	7013      	strb	r3, [r2, #0]
    5132:	68fa      	ldr	r2, [r7, #12]
    5134:	f04f 0301 	mov.w	r3, #1	; 0x1
    5138:	7053      	strb	r3, [r2, #1]
    513a:	68fa      	ldr	r2, [r7, #12]
    513c:	68bb      	ldr	r3, [r7, #8]
    513e:	6053      	str	r3, [r2, #4]
    5140:	68fa      	ldr	r2, [r7, #12]
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	6093      	str	r3, [r2, #8]
    5146:	68fa      	ldr	r2, [r7, #12]
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    514c:	68b8      	ldr	r0, [r7, #8]
    514e:	4906      	ldr	r1, [pc, #24]	(5168 <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    5150:	f008 f996 	bl	d480 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5154:	4a05      	ldr	r2, [pc, #20]	(516c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	6013      	str	r3, [r2, #0]
}
    515a:	68fb      	ldr	r3, [r7, #12]
    515c:	4618      	mov	r0, r3
    515e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5162:	46bd      	mov	sp, r7
    5164:	bd80      	pop	{r7, pc}
    5166:	46c0      	nop			(mov r8, r8)
    5168:	00000000 	.word	0x00000000
    516c:	20000548 	.word	0x20000548

00005170 <_ZN4BrasC2Ev>:

Bras* Bras::bras = NULL;

#ifdef ROBOTHW

Bras::Bras()
    5170:	b480      	push	{r7}
    5172:	b083      	sub	sp, #12
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    5178:	687a      	ldr	r2, [r7, #4]
    517a:	4b06      	ldr	r3, [pc, #24]	(5194 <_ZN4BrasC2Ev+0x24>)
    517c:	6013      	str	r3, [r2, #0]
{
    Bras::bras = this;
    517e:	4a06      	ldr	r2, [pc, #24]	(5198 <_ZN4BrasC2Ev+0x28>)
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	6013      	str	r3, [r2, #0]
    balaiDroite = new Servo(2);
    balaiDroite->goToAngle(BALAI_D_CLOSED);

    rateau = new Servo(4);
    rateau->goToAngle(RATEAU_HAUT);*/
}
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	4618      	mov	r0, r3
    5188:	f107 070c 	add.w	r7, r7, #12	; 0xc
    518c:	46bd      	mov	sp, r7
    518e:	bc80      	pop	{r7}
    5190:	4770      	bx	lr
    5192:	46c0      	nop			(mov r8, r8)
    5194:	000220c0 	.word	0x000220c0
    5198:	2000054c 	.word	0x2000054c

0000519c <_ZN4BrasC1Ev>:

Bras* Bras::bras = NULL;

#ifdef ROBOTHW

Bras::Bras()
    519c:	b480      	push	{r7}
    519e:	b083      	sub	sp, #12
    51a0:	af00      	add	r7, sp, #0
    51a2:	6078      	str	r0, [r7, #4]
    51a4:	687a      	ldr	r2, [r7, #4]
    51a6:	4b06      	ldr	r3, [pc, #24]	(51c0 <_ZN4BrasC1Ev+0x24>)
    51a8:	6013      	str	r3, [r2, #0]
{
    Bras::bras = this;
    51aa:	4a06      	ldr	r2, [pc, #24]	(51c4 <_ZN4BrasC1Ev+0x28>)
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	6013      	str	r3, [r2, #0]
    balaiDroite = new Servo(2);
    balaiDroite->goToAngle(BALAI_D_CLOSED);

    rateau = new Servo(4);
    rateau->goToAngle(RATEAU_HAUT);*/
}
    51b0:	687b      	ldr	r3, [r7, #4]
    51b2:	4618      	mov	r0, r3
    51b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    51b8:	46bd      	mov	sp, r7
    51ba:	bc80      	pop	{r7}
    51bc:	4770      	bx	lr
    51be:	46c0      	nop			(mov r8, r8)
    51c0:	000220c0 	.word	0x000220c0
    51c4:	2000054c 	.word	0x2000054c

000051c8 <_ZN4Bras7getBrasEv>:

void Bras::arretUrgence(){}

#endif // ROBOTHW

Bras* Bras::getBras()
    51c8:	b480      	push	{r7}
    51ca:	af00      	add	r7, sp, #0
{
    return Bras::bras;
    51cc:	4b02      	ldr	r3, [pc, #8]	(51d8 <_ZN4Bras7getBrasEv+0x10>)
    51ce:	681b      	ldr	r3, [r3, #0]
}
    51d0:	4618      	mov	r0, r3
    51d2:	46bd      	mov	sp, r7
    51d4:	bc80      	pop	{r7}
    51d6:	4770      	bx	lr
    51d8:	2000054c 	.word	0x2000054c

000051dc <_ZN4Bras12arretUrgenceEv>:
void Bras::monterRateau()
{
    rateau->goToAngle(RATEAU_HAUT);
}

void Bras::arretUrgence()
    51dc:	b580      	push	{r7, lr}
    51de:	b082      	sub	sp, #8
    51e0:	af00      	add	r7, sp, #0
    51e2:	6078      	str	r0, [r7, #4]
{
    rateau->shutDownServo();
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	68db      	ldr	r3, [r3, #12]
    51e8:	4618      	mov	r0, r3
    51ea:	f002 fa13 	bl	7614 <_ZN5Servo13shutDownServoEv>
    balaiDroite->shutDownServo();
    51ee:	687b      	ldr	r3, [r7, #4]
    51f0:	689b      	ldr	r3, [r3, #8]
    51f2:	4618      	mov	r0, r3
    51f4:	f002 fa0e 	bl	7614 <_ZN5Servo13shutDownServoEv>
    balaiGauche->shutDownServo();
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	685b      	ldr	r3, [r3, #4]
    51fc:	4618      	mov	r0, r3
    51fe:	f002 fa09 	bl	7614 <_ZN5Servo13shutDownServoEv>
}
    5202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5206:	46bd      	mov	sp, r7
    5208:	bd80      	pop	{r7, pc}
    520a:	46c0      	nop			(mov r8, r8)

0000520c <_ZN4Bras10dropRateauEv>:
void Bras::descendreRateau()
{
    rateau->goToAngle(RATEAU_BAS);
}

void Bras::dropRateau()
    520c:	b580      	push	{r7, lr}
    520e:	b082      	sub	sp, #8
    5210:	af00      	add	r7, sp, #0
    5212:	6078      	str	r0, [r7, #4]
{
    rateau->shutDownServo();
    5214:	687b      	ldr	r3, [r7, #4]
    5216:	68db      	ldr	r3, [r3, #12]
    5218:	4618      	mov	r0, r3
    521a:	f002 f9fb 	bl	7614 <_ZN5Servo13shutDownServoEv>
}
    521e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5222:	46bd      	mov	sp, r7
    5224:	bd80      	pop	{r7, pc}
    5226:	46c0      	nop			(mov r8, r8)

00005228 <_ZN4Bras12monterRateauEv>:

void Bras::monterRateau()
    5228:	b580      	push	{r7, lr}
    522a:	b082      	sub	sp, #8
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
{
    rateau->goToAngle(RATEAU_HAUT);
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	68db      	ldr	r3, [r3, #12]
    5234:	4618      	mov	r0, r3
    5236:	4903      	ldr	r1, [pc, #12]	(5244 <_ZN4Bras12monterRateauEv+0x1c>)
    5238:	f002 f9fa 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    523c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5240:	46bd      	mov	sp, r7
    5242:	bd80      	pop	{r7, pc}
    5244:	c3870000 	.word	0xc3870000

00005248 <_ZN4Bras15descendreRateauEv>:
{
    balaiDroite->goToAngle(BALAI_D_OPEN);
    balaiGauche->goToAngle(BALAI_G_OPEN);
}

void Bras::descendreRateau()
    5248:	b580      	push	{r7, lr}
    524a:	b082      	sub	sp, #8
    524c:	af00      	add	r7, sp, #0
    524e:	6078      	str	r0, [r7, #4]
{
    rateau->goToAngle(RATEAU_BAS);
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	68db      	ldr	r3, [r3, #12]
    5254:	4618      	mov	r0, r3
    5256:	4903      	ldr	r1, [pc, #12]	(5264 <_ZN4Bras15descendreRateauEv+0x1c>)
    5258:	f002 f9ea 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    525c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5260:	46bd      	mov	sp, r7
    5262:	bd80      	pop	{r7, pc}
    5264:	c3340000 	.word	0xc3340000

00005268 <_ZN4Bras12ouvrirBalaisEv>:
{
    balaiDroite->goToAngle(BALAI_D_CLOSED);
    balaiGauche->goToAngle(BALAI_G_CLOSED);
}

void Bras::ouvrirBalais()
    5268:	b580      	push	{r7, lr}
    526a:	b082      	sub	sp, #8
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
{
    balaiDroite->goToAngle(BALAI_D_OPEN);
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	689b      	ldr	r3, [r3, #8]
    5274:	4618      	mov	r0, r3
    5276:	4906      	ldr	r1, [pc, #24]	(5290 <_ZN4Bras12ouvrirBalaisEv+0x28>)
    5278:	f002 f9da 	bl	7630 <_ZN5Servo9goToAngleEf>
    balaiGauche->goToAngle(BALAI_G_OPEN);
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	685b      	ldr	r3, [r3, #4]
    5280:	4618      	mov	r0, r3
    5282:	4904      	ldr	r1, [pc, #16]	(5294 <_ZN4Bras12ouvrirBalaisEv+0x2c>)
    5284:	f002 f9d4 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    5288:	f107 0708 	add.w	r7, r7, #8	; 0x8
    528c:	46bd      	mov	sp, r7
    528e:	bd80      	pop	{r7, pc}
    5290:	c3160000 	.word	0xc3160000
    5294:	42dc0000 	.word	0x42dc0000

00005298 <_ZN4Bras12fermerBalaisEv>:
void Bras::fermerBalaiGauche()
{
    balaiGauche->goToAngle(BALAI_G_CLOSED);
}

void Bras::fermerBalais()
    5298:	b580      	push	{r7, lr}
    529a:	b082      	sub	sp, #8
    529c:	af00      	add	r7, sp, #0
    529e:	6078      	str	r0, [r7, #4]
{
    balaiDroite->goToAngle(BALAI_D_CLOSED);
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	689b      	ldr	r3, [r3, #8]
    52a4:	4618      	mov	r0, r3
    52a6:	4906      	ldr	r1, [pc, #24]	(52c0 <_ZN4Bras12fermerBalaisEv+0x28>)
    52a8:	f002 f9c2 	bl	7630 <_ZN5Servo9goToAngleEf>
    balaiGauche->goToAngle(BALAI_G_CLOSED);
    52ac:	687b      	ldr	r3, [r7, #4]
    52ae:	685b      	ldr	r3, [r3, #4]
    52b0:	4618      	mov	r0, r3
    52b2:	4904      	ldr	r1, [pc, #16]	(52c4 <_ZN4Bras12fermerBalaisEv+0x2c>)
    52b4:	f002 f9bc 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    52b8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52bc:	46bd      	mov	sp, r7
    52be:	bd80      	pop	{r7, pc}
    52c0:	42dc0000 	.word	0x42dc0000
    52c4:	c3160000 	.word	0xc3160000

000052c8 <_ZN4Bras17fermerBalaiGaucheEv>:
void Bras::fermerBalaiDroit()
{
    balaiDroite->goToAngle(BALAI_D_CLOSED);
}

void Bras::fermerBalaiGauche()
    52c8:	b580      	push	{r7, lr}
    52ca:	b082      	sub	sp, #8
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
{
    balaiGauche->goToAngle(BALAI_G_CLOSED);
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	685b      	ldr	r3, [r3, #4]
    52d4:	4618      	mov	r0, r3
    52d6:	4903      	ldr	r1, [pc, #12]	(52e4 <_ZN4Bras17fermerBalaiGaucheEv+0x1c>)
    52d8:	f002 f9aa 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    52dc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    52e0:	46bd      	mov	sp, r7
    52e2:	bd80      	pop	{r7, pc}
    52e4:	c3160000 	.word	0xc3160000

000052e8 <_ZN4Bras16fermerBalaiDroitEv>:
void Bras::ouvrirBalaiGauche()
{
    balaiGauche->goToAngle(BALAI_G_OPEN);
}

void Bras::fermerBalaiDroit()
    52e8:	b580      	push	{r7, lr}
    52ea:	b082      	sub	sp, #8
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
{
    balaiDroite->goToAngle(BALAI_D_CLOSED);
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	689b      	ldr	r3, [r3, #8]
    52f4:	4618      	mov	r0, r3
    52f6:	4903      	ldr	r1, [pc, #12]	(5304 <_ZN4Bras16fermerBalaiDroitEv+0x1c>)
    52f8:	f002 f99a 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    52fc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5300:	46bd      	mov	sp, r7
    5302:	bd80      	pop	{r7, pc}
    5304:	42dc0000 	.word	0x42dc0000

00005308 <_ZN4Bras17ouvrirBalaiGaucheEv>:
void Bras::ouvrirBalaiDroit()
{
    balaiDroite->goToAngle(BALAI_D_OPEN);
}

void Bras::ouvrirBalaiGauche()
    5308:	b580      	push	{r7, lr}
    530a:	b082      	sub	sp, #8
    530c:	af00      	add	r7, sp, #0
    530e:	6078      	str	r0, [r7, #4]
{
    balaiGauche->goToAngle(BALAI_G_OPEN);
    5310:	687b      	ldr	r3, [r7, #4]
    5312:	685b      	ldr	r3, [r3, #4]
    5314:	4618      	mov	r0, r3
    5316:	4903      	ldr	r1, [pc, #12]	(5324 <_ZN4Bras17ouvrirBalaiGaucheEv+0x1c>)
    5318:	f002 f98a 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    531c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5320:	46bd      	mov	sp, r7
    5322:	bd80      	pop	{r7, pc}
    5324:	42dc0000 	.word	0x42dc0000

00005328 <_ZN4Bras16ouvrirBalaiDroitEv>:
    delete balaiDroite;
    delete balaiGauche;
    delete rateau;
}

void Bras::ouvrirBalaiDroit()
    5328:	b580      	push	{r7, lr}
    532a:	b082      	sub	sp, #8
    532c:	af00      	add	r7, sp, #0
    532e:	6078      	str	r0, [r7, #4]
{
    balaiDroite->goToAngle(BALAI_D_OPEN);
    5330:	687b      	ldr	r3, [r7, #4]
    5332:	689b      	ldr	r3, [r3, #8]
    5334:	4618      	mov	r0, r3
    5336:	4903      	ldr	r1, [pc, #12]	(5344 <_ZN4Bras16ouvrirBalaiDroitEv+0x1c>)
    5338:	f002 f97a 	bl	7630 <_ZN5Servo9goToAngleEf>
}
    533c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5340:	46bd      	mov	sp, r7
    5342:	bd80      	pop	{r7, pc}
    5344:	c3160000 	.word	0xc3160000

00005348 <_ZN4BrasD0Ev>:

    rateau = new Servo(4);
    rateau->goToAngle(RATEAU_HAUT);*/
}

Bras::~Bras()
    5348:	b580      	push	{r7, lr}
    534a:	b084      	sub	sp, #16
    534c:	af00      	add	r7, sp, #0
    534e:	60f8      	str	r0, [r7, #12]
    5350:	68fb      	ldr	r3, [r7, #12]
    5352:	4a1a      	ldr	r2, [pc, #104]	(53bc <_ZN4BrasD0Ev+0x74>)
    5354:	601a      	str	r2, [r3, #0]
{
    delete balaiDroite;
    5356:	68fb      	ldr	r3, [r7, #12]
    5358:	689b      	ldr	r3, [r3, #8]
    535a:	603b      	str	r3, [r7, #0]
    535c:	683b      	ldr	r3, [r7, #0]
    535e:	2b00      	cmp	r3, #0
    5360:	d005      	beq.n	536e <_ZN4BrasD0Ev+0x26>
    5362:	6838      	ldr	r0, [r7, #0]
    5364:	f002 f9b0 	bl	76c8 <_ZN5ServoD1Ev>
    5368:	6838      	ldr	r0, [r7, #0]
    536a:	f009 fc67 	bl	ec3c <_ZdlPv>
    delete balaiGauche;
    536e:	68fb      	ldr	r3, [r7, #12]
    5370:	685b      	ldr	r3, [r3, #4]
    5372:	607b      	str	r3, [r7, #4]
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	2b00      	cmp	r3, #0
    5378:	d005      	beq.n	5386 <_ZN4BrasD0Ev+0x3e>
    537a:	6878      	ldr	r0, [r7, #4]
    537c:	f002 f9a4 	bl	76c8 <_ZN5ServoD1Ev>
    5380:	6878      	ldr	r0, [r7, #4]
    5382:	f009 fc5b 	bl	ec3c <_ZdlPv>
    delete rateau;
    5386:	68fb      	ldr	r3, [r7, #12]
    5388:	68db      	ldr	r3, [r3, #12]
    538a:	60bb      	str	r3, [r7, #8]
    538c:	68bb      	ldr	r3, [r7, #8]
    538e:	2b00      	cmp	r3, #0
    5390:	d005      	beq.n	539e <_ZN4BrasD0Ev+0x56>
    5392:	68b8      	ldr	r0, [r7, #8]
    5394:	f002 f998 	bl	76c8 <_ZN5ServoD1Ev>
    5398:	68b8      	ldr	r0, [r7, #8]
    539a:	f009 fc4f 	bl	ec3c <_ZdlPv>
}
    539e:	f04f 0301 	mov.w	r3, #1	; 0x1
    53a2:	b2db      	uxtb	r3, r3
    53a4:	2b00      	cmp	r3, #0
    53a6:	d002      	beq.n	53ae <_ZN4BrasD0Ev+0x66>
    53a8:	68f8      	ldr	r0, [r7, #12]
    53aa:	f009 fc47 	bl	ec3c <_ZdlPv>
    53ae:	68fb      	ldr	r3, [r7, #12]
    53b0:	4618      	mov	r0, r3
    53b2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    53b6:	46bd      	mov	sp, r7
    53b8:	bd80      	pop	{r7, pc}
    53ba:	46c0      	nop			(mov r8, r8)
    53bc:	000220c0 	.word	0x000220c0

000053c0 <_ZN4BrasD1Ev>:

    rateau = new Servo(4);
    rateau->goToAngle(RATEAU_HAUT);*/
}

Bras::~Bras()
    53c0:	b580      	push	{r7, lr}
    53c2:	b084      	sub	sp, #16
    53c4:	af00      	add	r7, sp, #0
    53c6:	60f8      	str	r0, [r7, #12]
    53c8:	68fb      	ldr	r3, [r7, #12]
    53ca:	4a1a      	ldr	r2, [pc, #104]	(5434 <_ZN4BrasD1Ev+0x74>)
    53cc:	601a      	str	r2, [r3, #0]
{
    delete balaiDroite;
    53ce:	68fb      	ldr	r3, [r7, #12]
    53d0:	689b      	ldr	r3, [r3, #8]
    53d2:	603b      	str	r3, [r7, #0]
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	2b00      	cmp	r3, #0
    53d8:	d005      	beq.n	53e6 <_ZN4BrasD1Ev+0x26>
    53da:	6838      	ldr	r0, [r7, #0]
    53dc:	f002 f974 	bl	76c8 <_ZN5ServoD1Ev>
    53e0:	6838      	ldr	r0, [r7, #0]
    53e2:	f009 fc2b 	bl	ec3c <_ZdlPv>
    delete balaiGauche;
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	685b      	ldr	r3, [r3, #4]
    53ea:	607b      	str	r3, [r7, #4]
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d005      	beq.n	53fe <_ZN4BrasD1Ev+0x3e>
    53f2:	6878      	ldr	r0, [r7, #4]
    53f4:	f002 f968 	bl	76c8 <_ZN5ServoD1Ev>
    53f8:	6878      	ldr	r0, [r7, #4]
    53fa:	f009 fc1f 	bl	ec3c <_ZdlPv>
    delete rateau;
    53fe:	68fb      	ldr	r3, [r7, #12]
    5400:	68db      	ldr	r3, [r3, #12]
    5402:	60bb      	str	r3, [r7, #8]
    5404:	68bb      	ldr	r3, [r7, #8]
    5406:	2b00      	cmp	r3, #0
    5408:	d005      	beq.n	5416 <_ZN4BrasD1Ev+0x56>
    540a:	68b8      	ldr	r0, [r7, #8]
    540c:	f002 f95c 	bl	76c8 <_ZN5ServoD1Ev>
    5410:	68b8      	ldr	r0, [r7, #8]
    5412:	f009 fc13 	bl	ec3c <_ZdlPv>
}
    5416:	f04f 0300 	mov.w	r3, #0	; 0x0
    541a:	b2db      	uxtb	r3, r3
    541c:	2b00      	cmp	r3, #0
    541e:	d002      	beq.n	5426 <_ZN4BrasD1Ev+0x66>
    5420:	68f8      	ldr	r0, [r7, #12]
    5422:	f009 fc0b 	bl	ec3c <_ZdlPv>
    5426:	68fb      	ldr	r3, [r7, #12]
    5428:	4618      	mov	r0, r3
    542a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    542e:	46bd      	mov	sp, r7
    5430:	bd80      	pop	{r7, pc}
    5432:	46c0      	nop			(mov r8, r8)
    5434:	000220c0 	.word	0x000220c0

00005438 <_ZN4BrasD2Ev>:

    rateau = new Servo(4);
    rateau->goToAngle(RATEAU_HAUT);*/
}

Bras::~Bras()
    5438:	b580      	push	{r7, lr}
    543a:	b084      	sub	sp, #16
    543c:	af00      	add	r7, sp, #0
    543e:	60f8      	str	r0, [r7, #12]
    5440:	68fb      	ldr	r3, [r7, #12]
    5442:	4a1a      	ldr	r2, [pc, #104]	(54ac <_ZN4BrasD2Ev+0x74>)
    5444:	601a      	str	r2, [r3, #0]
{
    delete balaiDroite;
    5446:	68fb      	ldr	r3, [r7, #12]
    5448:	689b      	ldr	r3, [r3, #8]
    544a:	603b      	str	r3, [r7, #0]
    544c:	683b      	ldr	r3, [r7, #0]
    544e:	2b00      	cmp	r3, #0
    5450:	d005      	beq.n	545e <_ZN4BrasD2Ev+0x26>
    5452:	6838      	ldr	r0, [r7, #0]
    5454:	f002 f938 	bl	76c8 <_ZN5ServoD1Ev>
    5458:	6838      	ldr	r0, [r7, #0]
    545a:	f009 fbef 	bl	ec3c <_ZdlPv>
    delete balaiGauche;
    545e:	68fb      	ldr	r3, [r7, #12]
    5460:	685b      	ldr	r3, [r3, #4]
    5462:	607b      	str	r3, [r7, #4]
    5464:	687b      	ldr	r3, [r7, #4]
    5466:	2b00      	cmp	r3, #0
    5468:	d005      	beq.n	5476 <_ZN4BrasD2Ev+0x3e>
    546a:	6878      	ldr	r0, [r7, #4]
    546c:	f002 f92c 	bl	76c8 <_ZN5ServoD1Ev>
    5470:	6878      	ldr	r0, [r7, #4]
    5472:	f009 fbe3 	bl	ec3c <_ZdlPv>
    delete rateau;
    5476:	68fb      	ldr	r3, [r7, #12]
    5478:	68db      	ldr	r3, [r3, #12]
    547a:	60bb      	str	r3, [r7, #8]
    547c:	68bb      	ldr	r3, [r7, #8]
    547e:	2b00      	cmp	r3, #0
    5480:	d005      	beq.n	548e <_ZN4BrasD2Ev+0x56>
    5482:	68b8      	ldr	r0, [r7, #8]
    5484:	f002 f920 	bl	76c8 <_ZN5ServoD1Ev>
    5488:	68b8      	ldr	r0, [r7, #8]
    548a:	f009 fbd7 	bl	ec3c <_ZdlPv>
}
    548e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5492:	b2db      	uxtb	r3, r3
    5494:	2b00      	cmp	r3, #0
    5496:	d002      	beq.n	549e <_ZN4BrasD2Ev+0x66>
    5498:	68f8      	ldr	r0, [r7, #12]
    549a:	f009 fbcf 	bl	ec3c <_ZdlPv>
    549e:	68fb      	ldr	r3, [r7, #12]
    54a0:	4618      	mov	r0, r3
    54a2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    54a6:	46bd      	mov	sp, r7
    54a8:	bd80      	pop	{r7, pc}
    54aa:	46c0      	nop			(mov r8, r8)
    54ac:	000220c0 	.word	0x000220c0

000054b0 <_ZN9BrasKrabi5frontEv>:
    void BrasKrabi::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasKrabi::front()
    54b0:	b580      	push	{r7, lr}
    54b2:	b082      	sub	sp, #8
    54b4:	af00      	add	r7, sp, #0
    54b6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    54b8:	687b      	ldr	r3, [r7, #4]
    54ba:	681a      	ldr	r2, [r3, #0]
    54bc:	687b      	ldr	r3, [r7, #4]
    54be:	68db      	ldr	r3, [r3, #12]
    54c0:	4610      	mov	r0, r2
    54c2:	4619      	mov	r1, r3
    54c4:	f002 f8b4 	bl	7630 <_ZN5Servo9goToAngleEf>
    }
    54c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54cc:	46bd      	mov	sp, r7
    54ce:	bd80      	pop	{r7, pc}

000054d0 <_ZN9BrasKrabi8collapseEv>:
    void BrasKrabi::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasKrabi::collapse()
    54d0:	b580      	push	{r7, lr}
    54d2:	b082      	sub	sp, #8
    54d4:	af00      	add	r7, sp, #0
    54d6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	681a      	ldr	r2, [r3, #0]
    54dc:	687b      	ldr	r3, [r7, #4]
    54de:	685b      	ldr	r3, [r3, #4]
    54e0:	4610      	mov	r0, r2
    54e2:	4619      	mov	r1, r3
    54e4:	f002 f8a4 	bl	7630 <_ZN5Servo9goToAngleEf>
    }
    54e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54ec:	46bd      	mov	sp, r7
    54ee:	bd80      	pop	{r7, pc}

000054f0 <_ZN9BrasKrabi6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasKrabi::expand()
    54f0:	b580      	push	{r7, lr}
    54f2:	b082      	sub	sp, #8
    54f4:	af00      	add	r7, sp, #0
    54f6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	681a      	ldr	r2, [r3, #0]
    54fc:	687b      	ldr	r3, [r7, #4]
    54fe:	689b      	ldr	r3, [r3, #8]
    5500:	4610      	mov	r0, r2
    5502:	4619      	mov	r1, r3
    5504:	f002 f894 	bl	7630 <_ZN5Servo9goToAngleEf>
    }
    5508:	f107 0708 	add.w	r7, r7, #8	; 0x8
    550c:	46bd      	mov	sp, r7
    550e:	bd80      	pop	{r7, pc}

00005510 <_ZN9BrasKrabiC1EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5510:	b580      	push	{r7, lr}
    5512:	b088      	sub	sp, #32
    5514:	af02      	add	r7, sp, #8
    5516:	6178      	str	r0, [r7, #20]
    5518:	6139      	str	r1, [r7, #16]
    551a:	60bb      	str	r3, [r7, #8]
    551c:	4613      	mov	r3, r2
    551e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5520:	697a      	ldr	r2, [r7, #20]
    5522:	6a7b      	ldr	r3, [r7, #36]
    5524:	6053      	str	r3, [r2, #4]
    5526:	697a      	ldr	r2, [r7, #20]
    5528:	6abb      	ldr	r3, [r7, #40]
    552a:	6093      	str	r3, [r2, #8]
    552c:	697a      	ldr	r2, [r7, #20]
    552e:	6afb      	ldr	r3, [r7, #44]
    5530:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5532:	f04f 0014 	mov.w	r0, #20	; 0x14
    5536:	f009 fadb 	bl	eaf0 <_Znwj>
    553a:	4603      	mov	r3, r0
    553c:	603b      	str	r3, [r7, #0]
    553e:	683a      	ldr	r2, [r7, #0]
    5540:	2a00      	cmp	r2, #0
    5542:	d00a      	beq.n	555a <_ZN9BrasKrabiC1EP5Timerhfffff+0x4a>
    5544:	7bfa      	ldrb	r2, [r7, #15]
    5546:	6a3b      	ldr	r3, [r7, #32]
    5548:	9300      	str	r3, [sp, #0]
    554a:	6838      	ldr	r0, [r7, #0]
    554c:	6939      	ldr	r1, [r7, #16]
    554e:	68bb      	ldr	r3, [r7, #8]
    5550:	f002 f8de 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    5554:	683b      	ldr	r3, [r7, #0]
    5556:	607b      	str	r3, [r7, #4]
    5558:	e001      	b.n	555e <_ZN9BrasKrabiC1EP5Timerhfffff+0x4e>
    555a:	683a      	ldr	r2, [r7, #0]
    555c:	607a      	str	r2, [r7, #4]
    555e:	697b      	ldr	r3, [r7, #20]
    5560:	687a      	ldr	r2, [r7, #4]
    5562:	601a      	str	r2, [r3, #0]
    }
    5564:	697b      	ldr	r3, [r7, #20]
    5566:	4618      	mov	r0, r3
    5568:	f107 0718 	add.w	r7, r7, #24	; 0x18
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}

00005570 <_ZN9BrasKrabiC2EP5Timerhfffff>:
#include "brasKrabi.h"

#ifdef ROBOTHW

    BrasKrabi::BrasKrabi(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5570:	b580      	push	{r7, lr}
    5572:	b088      	sub	sp, #32
    5574:	af02      	add	r7, sp, #8
    5576:	6178      	str	r0, [r7, #20]
    5578:	6139      	str	r1, [r7, #16]
    557a:	60bb      	str	r3, [r7, #8]
    557c:	4613      	mov	r3, r2
    557e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5580:	697a      	ldr	r2, [r7, #20]
    5582:	6a7b      	ldr	r3, [r7, #36]
    5584:	6053      	str	r3, [r2, #4]
    5586:	697a      	ldr	r2, [r7, #20]
    5588:	6abb      	ldr	r3, [r7, #40]
    558a:	6093      	str	r3, [r2, #8]
    558c:	697a      	ldr	r2, [r7, #20]
    558e:	6afb      	ldr	r3, [r7, #44]
    5590:	60d3      	str	r3, [r2, #12]
    {
        this->servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5592:	f04f 0014 	mov.w	r0, #20	; 0x14
    5596:	f009 faab 	bl	eaf0 <_Znwj>
    559a:	4603      	mov	r3, r0
    559c:	603b      	str	r3, [r7, #0]
    559e:	683a      	ldr	r2, [r7, #0]
    55a0:	2a00      	cmp	r2, #0
    55a2:	d00a      	beq.n	55ba <_ZN9BrasKrabiC2EP5Timerhfffff+0x4a>
    55a4:	7bfa      	ldrb	r2, [r7, #15]
    55a6:	6a3b      	ldr	r3, [r7, #32]
    55a8:	9300      	str	r3, [sp, #0]
    55aa:	6838      	ldr	r0, [r7, #0]
    55ac:	6939      	ldr	r1, [r7, #16]
    55ae:	68bb      	ldr	r3, [r7, #8]
    55b0:	f002 f8ae 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    55b4:	683b      	ldr	r3, [r7, #0]
    55b6:	607b      	str	r3, [r7, #4]
    55b8:	e001      	b.n	55be <_ZN9BrasKrabiC2EP5Timerhfffff+0x4e>
    55ba:	683a      	ldr	r2, [r7, #0]
    55bc:	607a      	str	r2, [r7, #4]
    55be:	697b      	ldr	r3, [r7, #20]
    55c0:	687a      	ldr	r2, [r7, #4]
    55c2:	601a      	str	r2, [r3, #0]
    }
    55c4:	697b      	ldr	r3, [r7, #20]
    55c6:	4618      	mov	r0, r3
    55c8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    55cc:	46bd      	mov	sp, r7
    55ce:	bd80      	pop	{r7, pc}

000055d0 <_ZN12BrasLateraux5frontEv>:
    void BrasLateraux::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasLateraux::front()
    55d0:	b580      	push	{r7, lr}
    55d2:	b082      	sub	sp, #8
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	681a      	ldr	r2, [r3, #0]
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	68db      	ldr	r3, [r3, #12]
    55e0:	4610      	mov	r0, r2
    55e2:	4619      	mov	r1, r3
    55e4:	f002 f824 	bl	7630 <_ZN5Servo9goToAngleEf>
    }
    55e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    55ec:	46bd      	mov	sp, r7
    55ee:	bd80      	pop	{r7, pc}

000055f0 <_ZN12BrasLateraux8collapseEv>:
    void BrasLateraux::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasLateraux::collapse()
    55f0:	b580      	push	{r7, lr}
    55f2:	b082      	sub	sp, #8
    55f4:	af00      	add	r7, sp, #0
    55f6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	681a      	ldr	r2, [r3, #0]
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	685b      	ldr	r3, [r3, #4]
    5600:	4610      	mov	r0, r2
    5602:	4619      	mov	r1, r3
    5604:	f002 f814 	bl	7630 <_ZN5Servo9goToAngleEf>
    }
    5608:	f107 0708 	add.w	r7, r7, #8	; 0x8
    560c:	46bd      	mov	sp, r7
    560e:	bd80      	pop	{r7, pc}

00005610 <_ZN12BrasLateraux6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasLateraux::expand()
    5610:	b580      	push	{r7, lr}
    5612:	b082      	sub	sp, #8
    5614:	af00      	add	r7, sp, #0
    5616:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	681a      	ldr	r2, [r3, #0]
    561c:	687b      	ldr	r3, [r7, #4]
    561e:	689b      	ldr	r3, [r3, #8]
    5620:	4610      	mov	r0, r2
    5622:	4619      	mov	r1, r3
    5624:	f002 f804 	bl	7630 <_ZN5Servo9goToAngleEf>
    }
    5628:	f107 0708 	add.w	r7, r7, #8	; 0x8
    562c:	46bd      	mov	sp, r7
    562e:	bd80      	pop	{r7, pc}

00005630 <_ZN12BrasLaterauxC1EP5Timerhfffff>:
BrasLateraux* BrasLateraux::left = 0;
BrasLateraux* BrasLateraux::right = 0;

#ifdef ROBOTHW

    BrasLateraux::BrasLateraux(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5630:	b580      	push	{r7, lr}
    5632:	b088      	sub	sp, #32
    5634:	af02      	add	r7, sp, #8
    5636:	6178      	str	r0, [r7, #20]
    5638:	6139      	str	r1, [r7, #16]
    563a:	60bb      	str	r3, [r7, #8]
    563c:	4613      	mov	r3, r2
    563e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5640:	697a      	ldr	r2, [r7, #20]
    5642:	6a7b      	ldr	r3, [r7, #36]
    5644:	6053      	str	r3, [r2, #4]
    5646:	697a      	ldr	r2, [r7, #20]
    5648:	6abb      	ldr	r3, [r7, #40]
    564a:	6093      	str	r3, [r2, #8]
    564c:	697a      	ldr	r2, [r7, #20]
    564e:	6afb      	ldr	r3, [r7, #44]
    5650:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5652:	f04f 0014 	mov.w	r0, #20	; 0x14
    5656:	f009 fa4b 	bl	eaf0 <_Znwj>
    565a:	4603      	mov	r3, r0
    565c:	603b      	str	r3, [r7, #0]
    565e:	683a      	ldr	r2, [r7, #0]
    5660:	2a00      	cmp	r2, #0
    5662:	d00a      	beq.n	567a <_ZN12BrasLaterauxC1EP5Timerhfffff+0x4a>
    5664:	7bfa      	ldrb	r2, [r7, #15]
    5666:	6a3b      	ldr	r3, [r7, #32]
    5668:	9300      	str	r3, [sp, #0]
    566a:	6838      	ldr	r0, [r7, #0]
    566c:	6939      	ldr	r1, [r7, #16]
    566e:	68bb      	ldr	r3, [r7, #8]
    5670:	f002 f84e 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    5674:	683b      	ldr	r3, [r7, #0]
    5676:	607b      	str	r3, [r7, #4]
    5678:	e001      	b.n	567e <_ZN12BrasLaterauxC1EP5Timerhfffff+0x4e>
    567a:	683a      	ldr	r2, [r7, #0]
    567c:	607a      	str	r2, [r7, #4]
    567e:	697b      	ldr	r3, [r7, #20]
    5680:	687a      	ldr	r2, [r7, #4]
    5682:	601a      	str	r2, [r3, #0]
    }
    5684:	697b      	ldr	r3, [r7, #20]
    5686:	4618      	mov	r0, r3
    5688:	f107 0718 	add.w	r7, r7, #24	; 0x18
    568c:	46bd      	mov	sp, r7
    568e:	bd80      	pop	{r7, pc}

00005690 <_ZN12BrasLateraux16initBrasLaterauxEv>:
    void BrasLateraux::front()
    {
        servo->goToAngle(angleFront);
    }

    void BrasLateraux::initBrasLateraux()
    5690:	b580      	push	{r7, lr}
    5692:	b08c      	sub	sp, #48
    5694:	af04      	add	r7, sp, #16
            TIM_CtrlPWMOutputs(TIM3, ENABLE);

            left = new BrasLateraux(timer, 1, 0.01f, 0.11f, 87.f, 51.f, 15.f);
            right = new BrasLateraux(timer, 3, 0.01f, 0.11f, 0.f, 40.f, 77.f);
        #else // Krabi - STM32 H107
            Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5696:	f04f 000c 	mov.w	r0, #12	; 0xc
    569a:	f009 fa29 	bl	eaf0 <_Znwj>
    569e:	4603      	mov	r3, r0
    56a0:	603b      	str	r3, [r7, #0]
    56a2:	683a      	ldr	r2, [r7, #0]
    56a4:	2a00      	cmp	r2, #0
    56a6:	d00d      	beq.n	56c4 <_ZN12BrasLateraux16initBrasLaterauxEv+0x34>
    56a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    56ac:	9300      	str	r3, [sp, #0]
    56ae:	6838      	ldr	r0, [r7, #0]
    56b0:	4930      	ldr	r1, [pc, #192]	(5774 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe4>)
    56b2:	f644 6220 	movw	r2, #20000	; 0x4e20
    56b6:	f04f 0347 	mov.w	r3, #71	; 0x47
    56ba:	f008 f98d 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    56be:	683b      	ldr	r3, [r7, #0]
    56c0:	607b      	str	r3, [r7, #4]
    56c2:	e001      	b.n	56c8 <_ZN12BrasLateraux16initBrasLaterauxEv+0x38>
    56c4:	683a      	ldr	r2, [r7, #0]
    56c6:	607a      	str	r2, [r7, #4]
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	61fb      	str	r3, [r7, #28]
            TIM_CtrlPWMOutputs(TIM1, ENABLE);
    56cc:	4829      	ldr	r0, [pc, #164]	(5774 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe4>)
    56ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    56d2:	f7fd fccf 	bl	3074 <TIM_CtrlPWMOutputs>

            right = new BrasLateraux(timer, 2, 0.01f, 0.11f, 20.f, 86.f, 84.f);
    56d6:	f04f 0010 	mov.w	r0, #16	; 0x10
    56da:	f009 fa09 	bl	eaf0 <_Znwj>
    56de:	4603      	mov	r3, r0
    56e0:	60bb      	str	r3, [r7, #8]
    56e2:	68ba      	ldr	r2, [r7, #8]
    56e4:	2a00      	cmp	r2, #0
    56e6:	d011      	beq.n	570c <_ZN12BrasLateraux16initBrasLaterauxEv+0x7c>
    56e8:	4b23      	ldr	r3, [pc, #140]	(5778 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe8>)
    56ea:	9300      	str	r3, [sp, #0]
    56ec:	4b23      	ldr	r3, [pc, #140]	(577c <_ZN12BrasLateraux16initBrasLaterauxEv+0xec>)
    56ee:	9301      	str	r3, [sp, #4]
    56f0:	4b23      	ldr	r3, [pc, #140]	(5780 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf0>)
    56f2:	9302      	str	r3, [sp, #8]
    56f4:	4b23      	ldr	r3, [pc, #140]	(5784 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf4>)
    56f6:	9303      	str	r3, [sp, #12]
    56f8:	68b8      	ldr	r0, [r7, #8]
    56fa:	69f9      	ldr	r1, [r7, #28]
    56fc:	f04f 0202 	mov.w	r2, #2	; 0x2
    5700:	4b21      	ldr	r3, [pc, #132]	(5788 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf8>)
    5702:	f7ff ff95 	bl	5630 <_ZN12BrasLaterauxC1EP5Timerhfffff>
    5706:	68bb      	ldr	r3, [r7, #8]
    5708:	60fb      	str	r3, [r7, #12]
    570a:	e001      	b.n	5710 <_ZN12BrasLateraux16initBrasLaterauxEv+0x80>
    570c:	68ba      	ldr	r2, [r7, #8]
    570e:	60fa      	str	r2, [r7, #12]
    5710:	4b1e      	ldr	r3, [pc, #120]	(578c <_ZN12BrasLateraux16initBrasLaterauxEv+0xfc>)
    5712:	68fa      	ldr	r2, [r7, #12]
    5714:	601a      	str	r2, [r3, #0]
            left = new BrasLateraux(timer, 3, 0.01f, 0.11f, 120.f, 36.f, 1.f);
    5716:	f04f 0010 	mov.w	r0, #16	; 0x10
    571a:	f009 f9e9 	bl	eaf0 <_Znwj>
    571e:	4603      	mov	r3, r0
    5720:	613b      	str	r3, [r7, #16]
    5722:	693b      	ldr	r3, [r7, #16]
    5724:	2b00      	cmp	r3, #0
    5726:	d011      	beq.n	574c <_ZN12BrasLateraux16initBrasLaterauxEv+0xbc>
    5728:	4b13      	ldr	r3, [pc, #76]	(5778 <_ZN12BrasLateraux16initBrasLaterauxEv+0xe8>)
    572a:	9300      	str	r3, [sp, #0]
    572c:	4b18      	ldr	r3, [pc, #96]	(5790 <_ZN12BrasLateraux16initBrasLaterauxEv+0x100>)
    572e:	9301      	str	r3, [sp, #4]
    5730:	4b18      	ldr	r3, [pc, #96]	(5794 <_ZN12BrasLateraux16initBrasLaterauxEv+0x104>)
    5732:	9302      	str	r3, [sp, #8]
    5734:	4b18      	ldr	r3, [pc, #96]	(5798 <_ZN12BrasLateraux16initBrasLaterauxEv+0x108>)
    5736:	9303      	str	r3, [sp, #12]
    5738:	6938      	ldr	r0, [r7, #16]
    573a:	69f9      	ldr	r1, [r7, #28]
    573c:	f04f 0203 	mov.w	r2, #3	; 0x3
    5740:	4b11      	ldr	r3, [pc, #68]	(5788 <_ZN12BrasLateraux16initBrasLaterauxEv+0xf8>)
    5742:	f7ff ff75 	bl	5630 <_ZN12BrasLaterauxC1EP5Timerhfffff>
    5746:	693a      	ldr	r2, [r7, #16]
    5748:	617a      	str	r2, [r7, #20]
    574a:	e001      	b.n	5750 <_ZN12BrasLateraux16initBrasLaterauxEv+0xc0>
    574c:	693b      	ldr	r3, [r7, #16]
    574e:	617b      	str	r3, [r7, #20]
    5750:	4b12      	ldr	r3, [pc, #72]	(579c <_ZN12BrasLateraux16initBrasLaterauxEv+0x10c>)
    5752:	697a      	ldr	r2, [r7, #20]
    5754:	601a      	str	r2, [r3, #0]


        #endif

        left->collapse();
    5756:	4b11      	ldr	r3, [pc, #68]	(579c <_ZN12BrasLateraux16initBrasLaterauxEv+0x10c>)
    5758:	681b      	ldr	r3, [r3, #0]
    575a:	4618      	mov	r0, r3
    575c:	f7ff ff48 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
        right->collapse();
    5760:	4b0a      	ldr	r3, [pc, #40]	(578c <_ZN12BrasLateraux16initBrasLaterauxEv+0xfc>)
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	4618      	mov	r0, r3
    5766:	f7ff ff43 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
    }
    576a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    576e:	46bd      	mov	sp, r7
    5770:	bd80      	pop	{r7, pc}
    5772:	46c0      	nop			(mov r8, r8)
    5774:	40012c00 	.word	0x40012c00
    5778:	3de147ae 	.word	0x3de147ae
    577c:	41a00000 	.word	0x41a00000
    5780:	42ac0000 	.word	0x42ac0000
    5784:	42a80000 	.word	0x42a80000
    5788:	3c23d70a 	.word	0x3c23d70a
    578c:	20000554 	.word	0x20000554
    5790:	42f00000 	.word	0x42f00000
    5794:	42100000 	.word	0x42100000
    5798:	3f800000 	.word	0x3f800000
    579c:	20000550 	.word	0x20000550

000057a0 <_ZN12BrasLateraux8getRightEv>:
        initBrasLateraux();

    return left;
}

BrasLateraux* BrasLateraux::getRight()
    57a0:	b580      	push	{r7, lr}
    57a2:	af00      	add	r7, sp, #0
{
    if (right==0)
    57a4:	4b05      	ldr	r3, [pc, #20]	(57bc <_ZN12BrasLateraux8getRightEv+0x1c>)
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	2b00      	cmp	r3, #0
    57aa:	d101      	bne.n	57b0 <_ZN12BrasLateraux8getRightEv+0x10>
        initBrasLateraux();
    57ac:	f7ff ff70 	bl	5690 <_ZN12BrasLateraux16initBrasLaterauxEv>

    return right;
    57b0:	4b02      	ldr	r3, [pc, #8]	(57bc <_ZN12BrasLateraux8getRightEv+0x1c>)
    57b2:	681b      	ldr	r3, [r3, #0]
}
    57b4:	4618      	mov	r0, r3
    57b6:	46bd      	mov	sp, r7
    57b8:	bd80      	pop	{r7, pc}
    57ba:	46c0      	nop			(mov r8, r8)
    57bc:	20000554 	.word	0x20000554

000057c0 <_ZN12BrasLateraux7getLeftEv>:
        right = new BrasLateraux();
    }

#endif

BrasLateraux* BrasLateraux::getLeft()
    57c0:	b580      	push	{r7, lr}
    57c2:	af00      	add	r7, sp, #0
{
    if (left==0)
    57c4:	4b05      	ldr	r3, [pc, #20]	(57dc <_ZN12BrasLateraux7getLeftEv+0x1c>)
    57c6:	681b      	ldr	r3, [r3, #0]
    57c8:	2b00      	cmp	r3, #0
    57ca:	d101      	bne.n	57d0 <_ZN12BrasLateraux7getLeftEv+0x10>
        initBrasLateraux();
    57cc:	f7ff ff60 	bl	5690 <_ZN12BrasLateraux16initBrasLaterauxEv>

    return left;
    57d0:	4b02      	ldr	r3, [pc, #8]	(57dc <_ZN12BrasLateraux7getLeftEv+0x1c>)
    57d2:	681b      	ldr	r3, [r3, #0]
}
    57d4:	4618      	mov	r0, r3
    57d6:	46bd      	mov	sp, r7
    57d8:	bd80      	pop	{r7, pc}
    57da:	46c0      	nop			(mov r8, r8)
    57dc:	20000550 	.word	0x20000550

000057e0 <_ZN12BrasLaterauxC2EP5Timerhfffff>:
BrasLateraux* BrasLateraux::left = 0;
BrasLateraux* BrasLateraux::right = 0;

#ifdef ROBOTHW

    BrasLateraux::BrasLateraux(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    57e0:	b580      	push	{r7, lr}
    57e2:	b088      	sub	sp, #32
    57e4:	af02      	add	r7, sp, #8
    57e6:	6178      	str	r0, [r7, #20]
    57e8:	6139      	str	r1, [r7, #16]
    57ea:	60bb      	str	r3, [r7, #8]
    57ec:	4613      	mov	r3, r2
    57ee:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    57f0:	697a      	ldr	r2, [r7, #20]
    57f2:	6a7b      	ldr	r3, [r7, #36]
    57f4:	6053      	str	r3, [r2, #4]
    57f6:	697a      	ldr	r2, [r7, #20]
    57f8:	6abb      	ldr	r3, [r7, #40]
    57fa:	6093      	str	r3, [r2, #8]
    57fc:	697a      	ldr	r2, [r7, #20]
    57fe:	6afb      	ldr	r3, [r7, #44]
    5800:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    5802:	f04f 0014 	mov.w	r0, #20	; 0x14
    5806:	f009 f973 	bl	eaf0 <_Znwj>
    580a:	4603      	mov	r3, r0
    580c:	603b      	str	r3, [r7, #0]
    580e:	683a      	ldr	r2, [r7, #0]
    5810:	2a00      	cmp	r2, #0
    5812:	d00a      	beq.n	582a <_ZN12BrasLaterauxC2EP5Timerhfffff+0x4a>
    5814:	7bfa      	ldrb	r2, [r7, #15]
    5816:	6a3b      	ldr	r3, [r7, #32]
    5818:	9300      	str	r3, [sp, #0]
    581a:	6838      	ldr	r0, [r7, #0]
    581c:	6939      	ldr	r1, [r7, #16]
    581e:	68bb      	ldr	r3, [r7, #8]
    5820:	f001 ff76 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    5824:	683b      	ldr	r3, [r7, #0]
    5826:	607b      	str	r3, [r7, #4]
    5828:	e001      	b.n	582e <_ZN12BrasLaterauxC2EP5Timerhfffff+0x4e>
    582a:	683a      	ldr	r2, [r7, #0]
    582c:	607a      	str	r2, [r7, #4]
    582e:	697b      	ldr	r3, [r7, #20]
    5830:	687a      	ldr	r2, [r7, #4]
    5832:	601a      	str	r2, [r3, #0]
    }
    5834:	697b      	ldr	r3, [r7, #20]
    5836:	4618      	mov	r0, r3
    5838:	f107 0718 	add.w	r7, r7, #24	; 0x18
    583c:	46bd      	mov	sp, r7
    583e:	bd80      	pop	{r7, pc}

00005840 <_ZN17BrasLaterauxKrabiC2Ev>:

BrasLaterauxKrabi* BrasLaterauxKrabi::brasLaterauxKrabi = 0;
//BrasLaterauxKrabi* BrasLaterauxKrabi::brasDroit = new Servo(TIM1,1,0,RC180DEGRES_BRAS);
//BrasLaterauxKrabi* BrasLaterauxKrabi::brasGauche = new Servo(TIM1,2,0,RC180DEGRES_BRAS);

BrasLaterauxKrabi::BrasLaterauxKrabi():
    5840:	b480      	push	{r7}
    5842:	b083      	sub	sp, #12
    5844:	af00      	add	r7, sp, #0
    5846:	6078      	str	r0, [r7, #4]
brasGaucheDeploye(false), brasDroitDeploye(false)
    5848:	687a      	ldr	r2, [r7, #4]
    584a:	4b0a      	ldr	r3, [pc, #40]	(5874 <_ZN17BrasLaterauxKrabiC2Ev+0x34>)
    584c:	6013      	str	r3, [r2, #0]
    584e:	687a      	ldr	r2, [r7, #4]
    5850:	f04f 0300 	mov.w	r3, #0	; 0x0
    5854:	7113      	strb	r3, [r2, #4]
    5856:	687a      	ldr	r2, [r7, #4]
    5858:	f04f 0300 	mov.w	r3, #0	; 0x0
    585c:	7153      	strb	r3, [r2, #5]
{
BrasLaterauxKrabi::brasLaterauxKrabi=this;
    585e:	4a06      	ldr	r2, [pc, #24]	(5878 <_ZN17BrasLaterauxKrabiC2Ev+0x38>)
    5860:	687b      	ldr	r3, [r7, #4]
    5862:	6013      	str	r3, [r2, #0]
}
    5864:	687b      	ldr	r3, [r7, #4]
    5866:	4618      	mov	r0, r3
    5868:	f107 070c 	add.w	r7, r7, #12	; 0xc
    586c:	46bd      	mov	sp, r7
    586e:	bc80      	pop	{r7}
    5870:	4770      	bx	lr
    5872:	46c0      	nop			(mov r8, r8)
    5874:	000220d0 	.word	0x000220d0
    5878:	20000558 	.word	0x20000558

0000587c <_ZN17BrasLaterauxKrabiC1Ev>:

BrasLaterauxKrabi* BrasLaterauxKrabi::brasLaterauxKrabi = 0;
//BrasLaterauxKrabi* BrasLaterauxKrabi::brasDroit = new Servo(TIM1,1,0,RC180DEGRES_BRAS);
//BrasLaterauxKrabi* BrasLaterauxKrabi::brasGauche = new Servo(TIM1,2,0,RC180DEGRES_BRAS);

BrasLaterauxKrabi::BrasLaterauxKrabi():
    587c:	b480      	push	{r7}
    587e:	b083      	sub	sp, #12
    5880:	af00      	add	r7, sp, #0
    5882:	6078      	str	r0, [r7, #4]
brasGaucheDeploye(false), brasDroitDeploye(false)
    5884:	687a      	ldr	r2, [r7, #4]
    5886:	4b0a      	ldr	r3, [pc, #40]	(58b0 <_ZN17BrasLaterauxKrabiC1Ev+0x34>)
    5888:	6013      	str	r3, [r2, #0]
    588a:	687a      	ldr	r2, [r7, #4]
    588c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5890:	7113      	strb	r3, [r2, #4]
    5892:	687a      	ldr	r2, [r7, #4]
    5894:	f04f 0300 	mov.w	r3, #0	; 0x0
    5898:	7153      	strb	r3, [r2, #5]
{
BrasLaterauxKrabi::brasLaterauxKrabi=this;
    589a:	4a06      	ldr	r2, [pc, #24]	(58b4 <_ZN17BrasLaterauxKrabiC1Ev+0x38>)
    589c:	687b      	ldr	r3, [r7, #4]
    589e:	6013      	str	r3, [r2, #0]
}
    58a0:	687b      	ldr	r3, [r7, #4]
    58a2:	4618      	mov	r0, r3
    58a4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    58a8:	46bd      	mov	sp, r7
    58aa:	bc80      	pop	{r7}
    58ac:	4770      	bx	lr
    58ae:	46c0      	nop			(mov r8, r8)
    58b0:	000220d0 	.word	0x000220d0
    58b4:	20000558 	.word	0x20000558

000058b8 <_ZN17BrasLaterauxKrabi20getBrasLaterauxKrabiEv>:
{
    brasDroit->goToAngle(BRAS_DROIT_REPLIE);
    brasDroitDeploye=false;
}

BrasLaterauxKrabi* BrasLaterauxKrabi::getBrasLaterauxKrabi()
    58b8:	b480      	push	{r7}
    58ba:	af00      	add	r7, sp, #0
{
    return BrasLaterauxKrabi::brasLaterauxKrabi;
    58bc:	4b02      	ldr	r3, [pc, #8]	(58c8 <_ZN17BrasLaterauxKrabi20getBrasLaterauxKrabiEv+0x10>)
    58be:	681b      	ldr	r3, [r3, #0]
}
    58c0:	4618      	mov	r0, r3
    58c2:	46bd      	mov	sp, r7
    58c4:	bc80      	pop	{r7}
    58c6:	4770      	bx	lr
    58c8:	20000558 	.word	0x20000558

000058cc <_ZN17BrasLaterauxKrabi16replierBrasDroitEv>:
{
    brasDroit->goToAngle(BRAS_DROIT_DEPLOYE);
    brasDroitDeploye=true;
}

void BrasLaterauxKrabi::replierBrasDroit()
    58cc:	b580      	push	{r7, lr}
    58ce:	b082      	sub	sp, #8
    58d0:	af00      	add	r7, sp, #0
    58d2:	6078      	str	r0, [r7, #4]
{
    brasDroit->goToAngle(BRAS_DROIT_REPLIE);
    58d4:	687b      	ldr	r3, [r7, #4]
    58d6:	68db      	ldr	r3, [r3, #12]
    58d8:	4618      	mov	r0, r3
    58da:	4905      	ldr	r1, [pc, #20]	(58f0 <_ZN17BrasLaterauxKrabi16replierBrasDroitEv+0x24>)
    58dc:	f001 fea8 	bl	7630 <_ZN5Servo9goToAngleEf>
    brasDroitDeploye=false;
    58e0:	687a      	ldr	r2, [r7, #4]
    58e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    58e6:	7153      	strb	r3, [r2, #5]
}
    58e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    58ec:	46bd      	mov	sp, r7
    58ee:	bd80      	pop	{r7, pc}
    58f0:	42b40000 	.word	0x42b40000

000058f4 <_ZN17BrasLaterauxKrabi17deployerBrasDroitEv>:
{
    brasGauche->goToAngle(BRAS_GAUCHE_REPLIE);
    brasGaucheDeploye=false;
}

void BrasLaterauxKrabi::deployerBrasDroit()
    58f4:	b580      	push	{r7, lr}
    58f6:	b082      	sub	sp, #8
    58f8:	af00      	add	r7, sp, #0
    58fa:	6078      	str	r0, [r7, #4]
{
    brasDroit->goToAngle(BRAS_DROIT_DEPLOYE);
    58fc:	687b      	ldr	r3, [r7, #4]
    58fe:	68db      	ldr	r3, [r3, #12]
    5900:	4618      	mov	r0, r3
    5902:	4905      	ldr	r1, [pc, #20]	(5918 <_ZN17BrasLaterauxKrabi17deployerBrasDroitEv+0x24>)
    5904:	f001 fe94 	bl	7630 <_ZN5Servo9goToAngleEf>
    brasDroitDeploye=true;
    5908:	687a      	ldr	r2, [r7, #4]
    590a:	f04f 0301 	mov.w	r3, #1	; 0x1
    590e:	7153      	strb	r3, [r2, #5]
}
    5910:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5914:	46bd      	mov	sp, r7
    5916:	bd80      	pop	{r7, pc}
    5918:	42b40000 	.word	0x42b40000

0000591c <_ZN17BrasLaterauxKrabi17replierBrasGaucheEv>:
{
    brasGauche->goToAngle(BRAS_GAUCHE_DEPLOYE);
    brasGaucheDeploye=true;
}

void BrasLaterauxKrabi::replierBrasGauche()
    591c:	b580      	push	{r7, lr}
    591e:	b082      	sub	sp, #8
    5920:	af00      	add	r7, sp, #0
    5922:	6078      	str	r0, [r7, #4]
{
    brasGauche->goToAngle(BRAS_GAUCHE_REPLIE);
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	689b      	ldr	r3, [r3, #8]
    5928:	4618      	mov	r0, r3
    592a:	4905      	ldr	r1, [pc, #20]	(5940 <_ZN17BrasLaterauxKrabi17replierBrasGaucheEv+0x24>)
    592c:	f001 fe80 	bl	7630 <_ZN5Servo9goToAngleEf>
    brasGaucheDeploye=false;
    5930:	687a      	ldr	r2, [r7, #4]
    5932:	f04f 0300 	mov.w	r3, #0	; 0x0
    5936:	7113      	strb	r3, [r2, #4]
}
    5938:	f107 0708 	add.w	r7, r7, #8	; 0x8
    593c:	46bd      	mov	sp, r7
    593e:	bd80      	pop	{r7, pc}
    5940:	42b40000 	.word	0x42b40000

00005944 <_ZN17BrasLaterauxKrabi18deployerBrasGaucheEv>:
    delete brasGauche;
    delete brasDroit;
    delete brasLaterauxKrabi;
}

void BrasLaterauxKrabi::deployerBrasGauche()
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	6078      	str	r0, [r7, #4]
{
    brasGauche->goToAngle(BRAS_GAUCHE_DEPLOYE);
    594c:	687b      	ldr	r3, [r7, #4]
    594e:	689b      	ldr	r3, [r3, #8]
    5950:	4618      	mov	r0, r3
    5952:	4905      	ldr	r1, [pc, #20]	(5968 <_ZN17BrasLaterauxKrabi18deployerBrasGaucheEv+0x24>)
    5954:	f001 fe6c 	bl	7630 <_ZN5Servo9goToAngleEf>
    brasGaucheDeploye=true;
    5958:	687a      	ldr	r2, [r7, #4]
    595a:	f04f 0301 	mov.w	r3, #1	; 0x1
    595e:	7113      	strb	r3, [r2, #4]
}
    5960:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5964:	46bd      	mov	sp, r7
    5966:	bd80      	pop	{r7, pc}
    5968:	42b40000 	.word	0x42b40000

0000596c <_ZN17BrasLaterauxKrabiD0Ev>:
brasGaucheDeploye(false), brasDroitDeploye(false)
{
BrasLaterauxKrabi::brasLaterauxKrabi=this;
}

BrasLaterauxKrabi::~BrasLaterauxKrabi()
    596c:	b580      	push	{r7, lr}
    596e:	b084      	sub	sp, #16
    5970:	af00      	add	r7, sp, #0
    5972:	60f8      	str	r0, [r7, #12]
    5974:	68fa      	ldr	r2, [r7, #12]
    5976:	4b20      	ldr	r3, [pc, #128]	(59f8 <_ZN17BrasLaterauxKrabiD0Ev+0x8c>)
    5978:	6013      	str	r3, [r2, #0]
{
    brasGauche->shutDownServo();
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	689b      	ldr	r3, [r3, #8]
    597e:	4618      	mov	r0, r3
    5980:	f001 fe48 	bl	7614 <_ZN5Servo13shutDownServoEv>
    brasDroit->shutDownServo();
    5984:	68fb      	ldr	r3, [r7, #12]
    5986:	68db      	ldr	r3, [r3, #12]
    5988:	4618      	mov	r0, r3
    598a:	f001 fe43 	bl	7614 <_ZN5Servo13shutDownServoEv>
    delete brasGauche;
    598e:	68fb      	ldr	r3, [r7, #12]
    5990:	689b      	ldr	r3, [r3, #8]
    5992:	607b      	str	r3, [r7, #4]
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	2b00      	cmp	r3, #0
    5998:	d005      	beq.n	59a6 <_ZN17BrasLaterauxKrabiD0Ev+0x3a>
    599a:	6878      	ldr	r0, [r7, #4]
    599c:	f001 fe94 	bl	76c8 <_ZN5ServoD1Ev>
    59a0:	6878      	ldr	r0, [r7, #4]
    59a2:	f009 f94b 	bl	ec3c <_ZdlPv>
    delete brasDroit;
    59a6:	68fb      	ldr	r3, [r7, #12]
    59a8:	68db      	ldr	r3, [r3, #12]
    59aa:	60bb      	str	r3, [r7, #8]
    59ac:	68bb      	ldr	r3, [r7, #8]
    59ae:	2b00      	cmp	r3, #0
    59b0:	d005      	beq.n	59be <_ZN17BrasLaterauxKrabiD0Ev+0x52>
    59b2:	68b8      	ldr	r0, [r7, #8]
    59b4:	f001 fe88 	bl	76c8 <_ZN5ServoD1Ev>
    59b8:	68b8      	ldr	r0, [r7, #8]
    59ba:	f009 f93f 	bl	ec3c <_ZdlPv>
    delete brasLaterauxKrabi;
    59be:	4b0f      	ldr	r3, [pc, #60]	(59fc <_ZN17BrasLaterauxKrabiD0Ev+0x90>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	2b00      	cmp	r3, #0
    59c4:	d009      	beq.n	59da <_ZN17BrasLaterauxKrabiD0Ev+0x6e>
    59c6:	4b0d      	ldr	r3, [pc, #52]	(59fc <_ZN17BrasLaterauxKrabiD0Ev+0x90>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	681b      	ldr	r3, [r3, #0]
    59cc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    59d0:	681a      	ldr	r2, [r3, #0]
    59d2:	4b0a      	ldr	r3, [pc, #40]	(59fc <_ZN17BrasLaterauxKrabiD0Ev+0x90>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	4618      	mov	r0, r3
    59d8:	4790      	blx	r2
}
    59da:	f04f 0301 	mov.w	r3, #1	; 0x1
    59de:	b2db      	uxtb	r3, r3
    59e0:	2b00      	cmp	r3, #0
    59e2:	d002      	beq.n	59ea <_ZN17BrasLaterauxKrabiD0Ev+0x7e>
    59e4:	68f8      	ldr	r0, [r7, #12]
    59e6:	f009 f929 	bl	ec3c <_ZdlPv>
    59ea:	68fb      	ldr	r3, [r7, #12]
    59ec:	4618      	mov	r0, r3
    59ee:	f107 0710 	add.w	r7, r7, #16	; 0x10
    59f2:	46bd      	mov	sp, r7
    59f4:	bd80      	pop	{r7, pc}
    59f6:	46c0      	nop			(mov r8, r8)
    59f8:	000220d0 	.word	0x000220d0
    59fc:	20000558 	.word	0x20000558

00005a00 <_ZN17BrasLaterauxKrabiD1Ev>:
brasGaucheDeploye(false), brasDroitDeploye(false)
{
BrasLaterauxKrabi::brasLaterauxKrabi=this;
}

BrasLaterauxKrabi::~BrasLaterauxKrabi()
    5a00:	b580      	push	{r7, lr}
    5a02:	b084      	sub	sp, #16
    5a04:	af00      	add	r7, sp, #0
    5a06:	60f8      	str	r0, [r7, #12]
    5a08:	68fa      	ldr	r2, [r7, #12]
    5a0a:	4b20      	ldr	r3, [pc, #128]	(5a8c <_ZN17BrasLaterauxKrabiD1Ev+0x8c>)
    5a0c:	6013      	str	r3, [r2, #0]
{
    brasGauche->shutDownServo();
    5a0e:	68fb      	ldr	r3, [r7, #12]
    5a10:	689b      	ldr	r3, [r3, #8]
    5a12:	4618      	mov	r0, r3
    5a14:	f001 fdfe 	bl	7614 <_ZN5Servo13shutDownServoEv>
    brasDroit->shutDownServo();
    5a18:	68fb      	ldr	r3, [r7, #12]
    5a1a:	68db      	ldr	r3, [r3, #12]
    5a1c:	4618      	mov	r0, r3
    5a1e:	f001 fdf9 	bl	7614 <_ZN5Servo13shutDownServoEv>
    delete brasGauche;
    5a22:	68fb      	ldr	r3, [r7, #12]
    5a24:	689b      	ldr	r3, [r3, #8]
    5a26:	607b      	str	r3, [r7, #4]
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d005      	beq.n	5a3a <_ZN17BrasLaterauxKrabiD1Ev+0x3a>
    5a2e:	6878      	ldr	r0, [r7, #4]
    5a30:	f001 fe4a 	bl	76c8 <_ZN5ServoD1Ev>
    5a34:	6878      	ldr	r0, [r7, #4]
    5a36:	f009 f901 	bl	ec3c <_ZdlPv>
    delete brasDroit;
    5a3a:	68fb      	ldr	r3, [r7, #12]
    5a3c:	68db      	ldr	r3, [r3, #12]
    5a3e:	60bb      	str	r3, [r7, #8]
    5a40:	68bb      	ldr	r3, [r7, #8]
    5a42:	2b00      	cmp	r3, #0
    5a44:	d005      	beq.n	5a52 <_ZN17BrasLaterauxKrabiD1Ev+0x52>
    5a46:	68b8      	ldr	r0, [r7, #8]
    5a48:	f001 fe3e 	bl	76c8 <_ZN5ServoD1Ev>
    5a4c:	68b8      	ldr	r0, [r7, #8]
    5a4e:	f009 f8f5 	bl	ec3c <_ZdlPv>
    delete brasLaterauxKrabi;
    5a52:	4b0f      	ldr	r3, [pc, #60]	(5a90 <_ZN17BrasLaterauxKrabiD1Ev+0x90>)
    5a54:	681b      	ldr	r3, [r3, #0]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d009      	beq.n	5a6e <_ZN17BrasLaterauxKrabiD1Ev+0x6e>
    5a5a:	4b0d      	ldr	r3, [pc, #52]	(5a90 <_ZN17BrasLaterauxKrabiD1Ev+0x90>)
    5a5c:	681b      	ldr	r3, [r3, #0]
    5a5e:	681b      	ldr	r3, [r3, #0]
    5a60:	f103 0304 	add.w	r3, r3, #4	; 0x4
    5a64:	681a      	ldr	r2, [r3, #0]
    5a66:	4b0a      	ldr	r3, [pc, #40]	(5a90 <_ZN17BrasLaterauxKrabiD1Ev+0x90>)
    5a68:	681b      	ldr	r3, [r3, #0]
    5a6a:	4618      	mov	r0, r3
    5a6c:	4790      	blx	r2
}
    5a6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a72:	b2db      	uxtb	r3, r3
    5a74:	2b00      	cmp	r3, #0
    5a76:	d002      	beq.n	5a7e <_ZN17BrasLaterauxKrabiD1Ev+0x7e>
    5a78:	68f8      	ldr	r0, [r7, #12]
    5a7a:	f009 f8df 	bl	ec3c <_ZdlPv>
    5a7e:	68fb      	ldr	r3, [r7, #12]
    5a80:	4618      	mov	r0, r3
    5a82:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5a86:	46bd      	mov	sp, r7
    5a88:	bd80      	pop	{r7, pc}
    5a8a:	46c0      	nop			(mov r8, r8)
    5a8c:	000220d0 	.word	0x000220d0
    5a90:	20000558 	.word	0x20000558

00005a94 <_ZN17BrasLaterauxKrabiD2Ev>:
brasGaucheDeploye(false), brasDroitDeploye(false)
{
BrasLaterauxKrabi::brasLaterauxKrabi=this;
}

BrasLaterauxKrabi::~BrasLaterauxKrabi()
    5a94:	b580      	push	{r7, lr}
    5a96:	b084      	sub	sp, #16
    5a98:	af00      	add	r7, sp, #0
    5a9a:	60f8      	str	r0, [r7, #12]
    5a9c:	68fa      	ldr	r2, [r7, #12]
    5a9e:	4b20      	ldr	r3, [pc, #128]	(5b20 <_ZN17BrasLaterauxKrabiD2Ev+0x8c>)
    5aa0:	6013      	str	r3, [r2, #0]
{
    brasGauche->shutDownServo();
    5aa2:	68fb      	ldr	r3, [r7, #12]
    5aa4:	689b      	ldr	r3, [r3, #8]
    5aa6:	4618      	mov	r0, r3
    5aa8:	f001 fdb4 	bl	7614 <_ZN5Servo13shutDownServoEv>
    brasDroit->shutDownServo();
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	68db      	ldr	r3, [r3, #12]
    5ab0:	4618      	mov	r0, r3
    5ab2:	f001 fdaf 	bl	7614 <_ZN5Servo13shutDownServoEv>
    delete brasGauche;
    5ab6:	68fb      	ldr	r3, [r7, #12]
    5ab8:	689b      	ldr	r3, [r3, #8]
    5aba:	607b      	str	r3, [r7, #4]
    5abc:	687b      	ldr	r3, [r7, #4]
    5abe:	2b00      	cmp	r3, #0
    5ac0:	d005      	beq.n	5ace <_ZN17BrasLaterauxKrabiD2Ev+0x3a>
    5ac2:	6878      	ldr	r0, [r7, #4]
    5ac4:	f001 fe00 	bl	76c8 <_ZN5ServoD1Ev>
    5ac8:	6878      	ldr	r0, [r7, #4]
    5aca:	f009 f8b7 	bl	ec3c <_ZdlPv>
    delete brasDroit;
    5ace:	68fb      	ldr	r3, [r7, #12]
    5ad0:	68db      	ldr	r3, [r3, #12]
    5ad2:	60bb      	str	r3, [r7, #8]
    5ad4:	68bb      	ldr	r3, [r7, #8]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d005      	beq.n	5ae6 <_ZN17BrasLaterauxKrabiD2Ev+0x52>
    5ada:	68b8      	ldr	r0, [r7, #8]
    5adc:	f001 fdf4 	bl	76c8 <_ZN5ServoD1Ev>
    5ae0:	68b8      	ldr	r0, [r7, #8]
    5ae2:	f009 f8ab 	bl	ec3c <_ZdlPv>
    delete brasLaterauxKrabi;
    5ae6:	4b0f      	ldr	r3, [pc, #60]	(5b24 <_ZN17BrasLaterauxKrabiD2Ev+0x90>)
    5ae8:	681b      	ldr	r3, [r3, #0]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d009      	beq.n	5b02 <_ZN17BrasLaterauxKrabiD2Ev+0x6e>
    5aee:	4b0d      	ldr	r3, [pc, #52]	(5b24 <_ZN17BrasLaterauxKrabiD2Ev+0x90>)
    5af0:	681b      	ldr	r3, [r3, #0]
    5af2:	681b      	ldr	r3, [r3, #0]
    5af4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    5af8:	681a      	ldr	r2, [r3, #0]
    5afa:	4b0a      	ldr	r3, [pc, #40]	(5b24 <_ZN17BrasLaterauxKrabiD2Ev+0x90>)
    5afc:	681b      	ldr	r3, [r3, #0]
    5afe:	4618      	mov	r0, r3
    5b00:	4790      	blx	r2
}
    5b02:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b06:	b2db      	uxtb	r3, r3
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d002      	beq.n	5b12 <_ZN17BrasLaterauxKrabiD2Ev+0x7e>
    5b0c:	68f8      	ldr	r0, [r7, #12]
    5b0e:	f009 f895 	bl	ec3c <_ZdlPv>
    5b12:	68fb      	ldr	r3, [r7, #12]
    5b14:	4618      	mov	r0, r3
    5b16:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5b1a:	46bd      	mov	sp, r7
    5b1c:	bd80      	pop	{r7, pc}
    5b1e:	46c0      	nop			(mov r8, r8)
    5b20:	000220d0 	.word	0x000220d0
    5b24:	20000558 	.word	0x20000558

00005b28 <_ZN9BrasTapis6expandEv>:
 //   #endif
    brasTapisLeft->collapse();
    brasTapisRight->collapse();
}

void BrasTapis::expand()
    5b28:	b580      	push	{r7, lr}
    5b2a:	b082      	sub	sp, #8
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	6078      	str	r0, [r7, #4]
{
    brasTapisRight->expand();
    5b30:	4b06      	ldr	r3, [pc, #24]	(5b4c <_ZN9BrasTapis6expandEv+0x24>)
    5b32:	681b      	ldr	r3, [r3, #0]
    5b34:	4618      	mov	r0, r3
    5b36:	f7ff fff7 	bl	5b28 <_ZN9BrasTapis6expandEv>
    brasTapisLeft->expand();
    5b3a:	4b05      	ldr	r3, [pc, #20]	(5b50 <_ZN9BrasTapis6expandEv+0x28>)
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	4618      	mov	r0, r3
    5b40:	f7ff fff2 	bl	5b28 <_ZN9BrasTapis6expandEv>
}
    5b44:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5b48:	46bd      	mov	sp, r7
    5b4a:	bd80      	pop	{r7, pc}
    5b4c:	20000560 	.word	0x20000560
    5b50:	2000055c 	.word	0x2000055c

00005b54 <_ZN9BrasTapis8collapseEv>:

void BrasTapis::collapse()
    5b54:	b580      	push	{r7, lr}
    5b56:	b082      	sub	sp, #8
    5b58:	af00      	add	r7, sp, #0
    5b5a:	6078      	str	r0, [r7, #4]
{
    brasTapisRight->collapse();
    5b5c:	4b06      	ldr	r3, [pc, #24]	(5b78 <_ZN9BrasTapis8collapseEv+0x24>)
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	4618      	mov	r0, r3
    5b62:	f7ff fff7 	bl	5b54 <_ZN9BrasTapis8collapseEv>
    brasTapisLeft->collapse();
    5b66:	4b05      	ldr	r3, [pc, #20]	(5b7c <_ZN9BrasTapis8collapseEv+0x28>)
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	4618      	mov	r0, r3
    5b6c:	f7ff fff2 	bl	5b54 <_ZN9BrasTapis8collapseEv>
}
    5b70:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5b74:	46bd      	mov	sp, r7
    5b76:	bd80      	pop	{r7, pc}
    5b78:	20000560 	.word	0x20000560
    5b7c:	2000055c 	.word	0x2000055c

00005b80 <_ZN9BrasTapisC1EP5Timerhffff>:

BrasTapis* BrasTapis::brasTapisLeft = 0;
BrasTapis* BrasTapis::brasTapisRight = 0;

#ifdef ROBOTHW
BrasTapis::BrasTapis(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded):BrasKrabi(timer, OCx, RC0degre, RC180degres, angleCollapsed, angleExpanded, 0.f)
    5b80:	b580      	push	{r7, lr}
    5b82:	b088      	sub	sp, #32
    5b84:	af04      	add	r7, sp, #16
    5b86:	60f8      	str	r0, [r7, #12]
    5b88:	60b9      	str	r1, [r7, #8]
    5b8a:	603b      	str	r3, [r7, #0]
    5b8c:	4613      	mov	r3, r2
    5b8e:	71fb      	strb	r3, [r7, #7]
    5b90:	68fa      	ldr	r2, [r7, #12]
    5b92:	f897 c007 	ldrb.w	ip, [r7, #7]
    5b96:	69bb      	ldr	r3, [r7, #24]
    5b98:	9300      	str	r3, [sp, #0]
    5b9a:	69fb      	ldr	r3, [r7, #28]
    5b9c:	9301      	str	r3, [sp, #4]
    5b9e:	6a3b      	ldr	r3, [r7, #32]
    5ba0:	9302      	str	r3, [sp, #8]
    5ba2:	4b07      	ldr	r3, [pc, #28]	(5bc0 <_ZN9BrasTapisC1EP5Timerhffff+0x40>)
    5ba4:	9303      	str	r3, [sp, #12]
    5ba6:	4610      	mov	r0, r2
    5ba8:	68b9      	ldr	r1, [r7, #8]
    5baa:	4662      	mov	r2, ip
    5bac:	683b      	ldr	r3, [r7, #0]
    5bae:	f7ff fcdf 	bl	5570 <_ZN9BrasKrabiC2EP5Timerhfffff>
{}
    5bb2:	68fb      	ldr	r3, [r7, #12]
    5bb4:	4618      	mov	r0, r3
    5bb6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5bba:	46bd      	mov	sp, r7
    5bbc:	bd80      	pop	{r7, pc}
    5bbe:	46c0      	nop			(mov r8, r8)
    5bc0:	00000000 	.word	0x00000000

00005bc4 <_ZN9BrasTapis13initBrasTapisEv>:

void BrasTapis::initBrasTapis()
    5bc4:	b580      	push	{r7, lr}
    5bc6:	b08c      	sub	sp, #48
    5bc8:	af04      	add	r7, sp, #16
//        TIM_CtrlPWMOutputs(TIM3, ENABLE);
//        this->brasTapisLeft = new BrasTapis(timer, 1, 0.01f, 0.11f, 87.f, 51.f);
//        this->brasTapisRight = new BrasTapis(2timer, 3, 0.01f, 0.11f, 0.f, 40.f);

//    #else // Krabi - STM32 H107
        Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5bca:	f04f 000c 	mov.w	r0, #12	; 0xc
    5bce:	f008 ff8f 	bl	eaf0 <_Znwj>
    5bd2:	4603      	mov	r3, r0
    5bd4:	603b      	str	r3, [r7, #0]
    5bd6:	683a      	ldr	r2, [r7, #0]
    5bd8:	2a00      	cmp	r2, #0
    5bda:	d00d      	beq.n	5bf8 <_ZN9BrasTapis13initBrasTapisEv+0x34>
    5bdc:	f04f 0300 	mov.w	r3, #0	; 0x0
    5be0:	9300      	str	r3, [sp, #0]
    5be2:	6838      	ldr	r0, [r7, #0]
    5be4:	492e      	ldr	r1, [pc, #184]	(5ca0 <_ZN9BrasTapis13initBrasTapisEv+0xdc>)
    5be6:	f644 6220 	movw	r2, #20000	; 0x4e20
    5bea:	f04f 0347 	mov.w	r3, #71	; 0x47
    5bee:	f007 fef3 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5bf2:	683b      	ldr	r3, [r7, #0]
    5bf4:	607b      	str	r3, [r7, #4]
    5bf6:	e001      	b.n	5bfc <_ZN9BrasTapis13initBrasTapisEv+0x38>
    5bf8:	683a      	ldr	r2, [r7, #0]
    5bfa:	607a      	str	r2, [r7, #4]
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	61fb      	str	r3, [r7, #28]
        TIM_CtrlPWMOutputs(TIM1, ENABLE);
    5c00:	4827      	ldr	r0, [pc, #156]	(5ca0 <_ZN9BrasTapis13initBrasTapisEv+0xdc>)
    5c02:	f04f 0101 	mov.w	r1, #1	; 0x1
    5c06:	f7fd fa35 	bl	3074 <TIM_CtrlPWMOutputs>
        brasTapisLeft = new BrasTapis(timer, 2, 0.01f, 0.11f, 20.f, 86.f);
    5c0a:	f04f 0010 	mov.w	r0, #16	; 0x10
    5c0e:	f008 ff6f 	bl	eaf0 <_Znwj>
    5c12:	4603      	mov	r3, r0
    5c14:	60bb      	str	r3, [r7, #8]
    5c16:	68ba      	ldr	r2, [r7, #8]
    5c18:	2a00      	cmp	r2, #0
    5c1a:	d00f      	beq.n	5c3c <_ZN9BrasTapis13initBrasTapisEv+0x78>
    5c1c:	4b21      	ldr	r3, [pc, #132]	(5ca4 <_ZN9BrasTapis13initBrasTapisEv+0xe0>)
    5c1e:	9300      	str	r3, [sp, #0]
    5c20:	4b21      	ldr	r3, [pc, #132]	(5ca8 <_ZN9BrasTapis13initBrasTapisEv+0xe4>)
    5c22:	9301      	str	r3, [sp, #4]
    5c24:	4b21      	ldr	r3, [pc, #132]	(5cac <_ZN9BrasTapis13initBrasTapisEv+0xe8>)
    5c26:	9302      	str	r3, [sp, #8]
    5c28:	68b8      	ldr	r0, [r7, #8]
    5c2a:	69f9      	ldr	r1, [r7, #28]
    5c2c:	f04f 0202 	mov.w	r2, #2	; 0x2
    5c30:	4b1f      	ldr	r3, [pc, #124]	(5cb0 <_ZN9BrasTapis13initBrasTapisEv+0xec>)
    5c32:	f7ff ffa5 	bl	5b80 <_ZN9BrasTapisC1EP5Timerhffff>
    5c36:	68bb      	ldr	r3, [r7, #8]
    5c38:	60fb      	str	r3, [r7, #12]
    5c3a:	e001      	b.n	5c40 <_ZN9BrasTapis13initBrasTapisEv+0x7c>
    5c3c:	68ba      	ldr	r2, [r7, #8]
    5c3e:	60fa      	str	r2, [r7, #12]
    5c40:	4b1c      	ldr	r3, [pc, #112]	(5cb4 <_ZN9BrasTapis13initBrasTapisEv+0xf0>)
    5c42:	68fa      	ldr	r2, [r7, #12]
    5c44:	601a      	str	r2, [r3, #0]
        brasTapisRight = new BrasTapis(timer, 3, 0.01f, 0.11f, 120.f, 36.f);
    5c46:	f04f 0010 	mov.w	r0, #16	; 0x10
    5c4a:	f008 ff51 	bl	eaf0 <_Znwj>
    5c4e:	4603      	mov	r3, r0
    5c50:	613b      	str	r3, [r7, #16]
    5c52:	693b      	ldr	r3, [r7, #16]
    5c54:	2b00      	cmp	r3, #0
    5c56:	d00f      	beq.n	5c78 <_ZN9BrasTapis13initBrasTapisEv+0xb4>
    5c58:	4b12      	ldr	r3, [pc, #72]	(5ca4 <_ZN9BrasTapis13initBrasTapisEv+0xe0>)
    5c5a:	9300      	str	r3, [sp, #0]
    5c5c:	4b16      	ldr	r3, [pc, #88]	(5cb8 <_ZN9BrasTapis13initBrasTapisEv+0xf4>)
    5c5e:	9301      	str	r3, [sp, #4]
    5c60:	4b16      	ldr	r3, [pc, #88]	(5cbc <_ZN9BrasTapis13initBrasTapisEv+0xf8>)
    5c62:	9302      	str	r3, [sp, #8]
    5c64:	6938      	ldr	r0, [r7, #16]
    5c66:	69f9      	ldr	r1, [r7, #28]
    5c68:	f04f 0203 	mov.w	r2, #3	; 0x3
    5c6c:	4b10      	ldr	r3, [pc, #64]	(5cb0 <_ZN9BrasTapis13initBrasTapisEv+0xec>)
    5c6e:	f7ff ff87 	bl	5b80 <_ZN9BrasTapisC1EP5Timerhffff>
    5c72:	693a      	ldr	r2, [r7, #16]
    5c74:	617a      	str	r2, [r7, #20]
    5c76:	e001      	b.n	5c7c <_ZN9BrasTapis13initBrasTapisEv+0xb8>
    5c78:	693b      	ldr	r3, [r7, #16]
    5c7a:	617b      	str	r3, [r7, #20]
    5c7c:	4b10      	ldr	r3, [pc, #64]	(5cc0 <_ZN9BrasTapis13initBrasTapisEv+0xfc>)
    5c7e:	697a      	ldr	r2, [r7, #20]
    5c80:	601a      	str	r2, [r3, #0]

 //   #endif
    brasTapisLeft->collapse();
    5c82:	4b0c      	ldr	r3, [pc, #48]	(5cb4 <_ZN9BrasTapis13initBrasTapisEv+0xf0>)
    5c84:	681b      	ldr	r3, [r3, #0]
    5c86:	4618      	mov	r0, r3
    5c88:	f7ff ff64 	bl	5b54 <_ZN9BrasTapis8collapseEv>
    brasTapisRight->collapse();
    5c8c:	4b0c      	ldr	r3, [pc, #48]	(5cc0 <_ZN9BrasTapis13initBrasTapisEv+0xfc>)
    5c8e:	681b      	ldr	r3, [r3, #0]
    5c90:	4618      	mov	r0, r3
    5c92:	f7ff ff5f 	bl	5b54 <_ZN9BrasTapis8collapseEv>
}
    5c96:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5c9a:	46bd      	mov	sp, r7
    5c9c:	bd80      	pop	{r7, pc}
    5c9e:	46c0      	nop			(mov r8, r8)
    5ca0:	40012c00 	.word	0x40012c00
    5ca4:	3de147ae 	.word	0x3de147ae
    5ca8:	41a00000 	.word	0x41a00000
    5cac:	42ac0000 	.word	0x42ac0000
    5cb0:	3c23d70a 	.word	0x3c23d70a
    5cb4:	2000055c 	.word	0x2000055c
    5cb8:	42f00000 	.word	0x42f00000
    5cbc:	42100000 	.word	0x42100000
    5cc0:	20000560 	.word	0x20000560

00005cc4 <_ZN9BrasTapis7getLeftEv>:
    if (brasTapisRight == 0)
        initBrasTapis();
    return brasTapisRight;
}

BrasTapis *BrasTapis::getLeft()
    5cc4:	b580      	push	{r7, lr}
    5cc6:	b082      	sub	sp, #8
    5cc8:	af00      	add	r7, sp, #0
    5cca:	6078      	str	r0, [r7, #4]
{
    if (brasTapisLeft == 0)
    5ccc:	4b06      	ldr	r3, [pc, #24]	(5ce8 <_ZN9BrasTapis7getLeftEv+0x24>)
    5cce:	681b      	ldr	r3, [r3, #0]
    5cd0:	2b00      	cmp	r3, #0
    5cd2:	d101      	bne.n	5cd8 <_ZN9BrasTapis7getLeftEv+0x14>
        initBrasTapis();
    5cd4:	f7ff ff76 	bl	5bc4 <_ZN9BrasTapis13initBrasTapisEv>
    return brasTapisLeft;
    5cd8:	4b03      	ldr	r3, [pc, #12]	(5ce8 <_ZN9BrasTapis7getLeftEv+0x24>)
    5cda:	681b      	ldr	r3, [r3, #0]
}
    5cdc:	4618      	mov	r0, r3
    5cde:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5ce2:	46bd      	mov	sp, r7
    5ce4:	bd80      	pop	{r7, pc}
    5ce6:	46c0      	nop			(mov r8, r8)
    5ce8:	2000055c 	.word	0x2000055c

00005cec <_ZN9BrasTapis8getRightEv>:
{
    brasTapisRight->collapse();
    brasTapisLeft->collapse();
}

BrasTapis *BrasTapis::getRight()
    5cec:	b580      	push	{r7, lr}
    5cee:	b082      	sub	sp, #8
    5cf0:	af00      	add	r7, sp, #0
    5cf2:	6078      	str	r0, [r7, #4]
{
    if (brasTapisRight == 0)
    5cf4:	4b06      	ldr	r3, [pc, #24]	(5d10 <_ZN9BrasTapis8getRightEv+0x24>)
    5cf6:	681b      	ldr	r3, [r3, #0]
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	d101      	bne.n	5d00 <_ZN9BrasTapis8getRightEv+0x14>
        initBrasTapis();
    5cfc:	f7ff ff62 	bl	5bc4 <_ZN9BrasTapis13initBrasTapisEv>
    return brasTapisRight;
    5d00:	4b03      	ldr	r3, [pc, #12]	(5d10 <_ZN9BrasTapis8getRightEv+0x24>)
    5d02:	681b      	ldr	r3, [r3, #0]
}
    5d04:	4618      	mov	r0, r3
    5d06:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5d0a:	46bd      	mov	sp, r7
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	46c0      	nop			(mov r8, r8)
    5d10:	20000560 	.word	0x20000560

00005d14 <_ZN9BrasTapisC2EP5Timerhffff>:

BrasTapis* BrasTapis::brasTapisLeft = 0;
BrasTapis* BrasTapis::brasTapisRight = 0;

#ifdef ROBOTHW
BrasTapis::BrasTapis(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded):BrasKrabi(timer, OCx, RC0degre, RC180degres, angleCollapsed, angleExpanded, 0.f)
    5d14:	b580      	push	{r7, lr}
    5d16:	b088      	sub	sp, #32
    5d18:	af04      	add	r7, sp, #16
    5d1a:	60f8      	str	r0, [r7, #12]
    5d1c:	60b9      	str	r1, [r7, #8]
    5d1e:	603b      	str	r3, [r7, #0]
    5d20:	4613      	mov	r3, r2
    5d22:	71fb      	strb	r3, [r7, #7]
    5d24:	68fa      	ldr	r2, [r7, #12]
    5d26:	f897 c007 	ldrb.w	ip, [r7, #7]
    5d2a:	69bb      	ldr	r3, [r7, #24]
    5d2c:	9300      	str	r3, [sp, #0]
    5d2e:	69fb      	ldr	r3, [r7, #28]
    5d30:	9301      	str	r3, [sp, #4]
    5d32:	6a3b      	ldr	r3, [r7, #32]
    5d34:	9302      	str	r3, [sp, #8]
    5d36:	4b07      	ldr	r3, [pc, #28]	(5d54 <_ZN9BrasTapisC2EP5Timerhffff+0x40>)
    5d38:	9303      	str	r3, [sp, #12]
    5d3a:	4610      	mov	r0, r2
    5d3c:	68b9      	ldr	r1, [r7, #8]
    5d3e:	4662      	mov	r2, ip
    5d40:	683b      	ldr	r3, [r7, #0]
    5d42:	f7ff fc15 	bl	5570 <_ZN9BrasKrabiC2EP5Timerhfffff>
{}
    5d46:	68fb      	ldr	r3, [r7, #12]
    5d48:	4618      	mov	r0, r3
    5d4a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5d4e:	46bd      	mov	sp, r7
    5d50:	bd80      	pop	{r7, pc}
    5d52:	46c0      	nop			(mov r8, r8)
    5d54:	00000000 	.word	0x00000000

00005d58 <_ZN9Container5closeEv>:
#else
    qDebug() << "Ouvre Conteneur";
#endif
}

void Container::close()
    5d58:	b580      	push	{r7, lr}
    5d5a:	b082      	sub	sp, #8
    5d5c:	af00      	add	r7, sp, #0
    5d5e:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    servo->goToAngle(CONTAINER_ANGLE_CLOSE);
    5d60:	687b      	ldr	r3, [r7, #4]
    5d62:	681b      	ldr	r3, [r3, #0]
    5d64:	4618      	mov	r0, r3
    5d66:	4903      	ldr	r1, [pc, #12]	(5d74 <_ZN9Container5closeEv+0x1c>)
    5d68:	f001 fc62 	bl	7630 <_ZN5Servo9goToAngleEf>
#else
    qDebug() << "Ferme Conteneur";
#endif
}
    5d6c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5d70:	46bd      	mov	sp, r7
    5d72:	bd80      	pop	{r7, pc}
    5d74:	41200000 	.word	0x41200000

00005d78 <_ZN9Container4openEv>:
    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    close();
#endif
}

void Container::open()
    5d78:	b580      	push	{r7, lr}
    5d7a:	b082      	sub	sp, #8
    5d7c:	af00      	add	r7, sp, #0
    5d7e:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    servo->goToAngle(CONTAINER_ANGLE_OPEN);
    5d80:	687b      	ldr	r3, [r7, #4]
    5d82:	681b      	ldr	r3, [r3, #0]
    5d84:	4618      	mov	r0, r3
    5d86:	4903      	ldr	r1, [pc, #12]	(5d94 <_ZN9Container4openEv+0x1c>)
    5d88:	f001 fc52 	bl	7630 <_ZN5Servo9goToAngleEf>
#else
    qDebug() << "Ouvre Conteneur";
#endif
}
    5d8c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5d90:	46bd      	mov	sp, r7
    5d92:	bd80      	pop	{r7, pc}
    5d94:	42a00000 	.word	0x42a00000

00005d98 <_ZN9ContainerC1Ev>:
        singleton = new Container();

    return singleton;
}

Container::Container()
    5d98:	b580      	push	{r7, lr}
    5d9a:	b08a      	sub	sp, #40
    5d9c:	af02      	add	r7, sp, #8
    5d9e:	6178      	str	r0, [r7, #20]
{
#ifdef ROBOTHW
    Timer* timer3 = new Timer(TIM3, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5da0:	f04f 000c 	mov.w	r0, #12	; 0xc
    5da4:	f008 fea4 	bl	eaf0 <_Znwj>
    5da8:	4603      	mov	r3, r0
    5daa:	607b      	str	r3, [r7, #4]
    5dac:	687a      	ldr	r2, [r7, #4]
    5dae:	2a00      	cmp	r2, #0
    5db0:	d00d      	beq.n	5dce <_ZN9ContainerC1Ev+0x36>
    5db2:	f04f 0300 	mov.w	r3, #0	; 0x0
    5db6:	9300      	str	r3, [sp, #0]
    5db8:	6878      	ldr	r0, [r7, #4]
    5dba:	491b      	ldr	r1, [pc, #108]	(5e28 <_ZN9ContainerC1Ev+0x90>)
    5dbc:	f644 6220 	movw	r2, #20000	; 0x4e20
    5dc0:	f04f 0347 	mov.w	r3, #71	; 0x47
    5dc4:	f007 fe08 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	60bb      	str	r3, [r7, #8]
    5dcc:	e001      	b.n	5dd2 <_ZN9ContainerC1Ev+0x3a>
    5dce:	687a      	ldr	r2, [r7, #4]
    5dd0:	60ba      	str	r2, [r7, #8]
    5dd2:	68bb      	ldr	r3, [r7, #8]
    5dd4:	61fb      	str	r3, [r7, #28]
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    5dd6:	4814      	ldr	r0, [pc, #80]	(5e28 <_ZN9ContainerC1Ev+0x90>)
    5dd8:	f04f 0101 	mov.w	r1, #1	; 0x1
    5ddc:	f7fd f94a 	bl	3074 <TIM_CtrlPWMOutputs>

    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    5de0:	f04f 0014 	mov.w	r0, #20	; 0x14
    5de4:	f008 fe84 	bl	eaf0 <_Znwj>
    5de8:	4603      	mov	r3, r0
    5dea:	60fb      	str	r3, [r7, #12]
    5dec:	68fa      	ldr	r2, [r7, #12]
    5dee:	2a00      	cmp	r2, #0
    5df0:	d00b      	beq.n	5e0a <_ZN9ContainerC1Ev+0x72>
    5df2:	4b0e      	ldr	r3, [pc, #56]	(5e2c <_ZN9ContainerC1Ev+0x94>)
    5df4:	9300      	str	r3, [sp, #0]
    5df6:	68f8      	ldr	r0, [r7, #12]
    5df8:	69f9      	ldr	r1, [r7, #28]
    5dfa:	f04f 0202 	mov.w	r2, #2	; 0x2
    5dfe:	4b0c      	ldr	r3, [pc, #48]	(5e30 <_ZN9ContainerC1Ev+0x98>)
    5e00:	f001 fc86 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    5e04:	68fb      	ldr	r3, [r7, #12]
    5e06:	613b      	str	r3, [r7, #16]
    5e08:	e001      	b.n	5e0e <_ZN9ContainerC1Ev+0x76>
    5e0a:	68fa      	ldr	r2, [r7, #12]
    5e0c:	613a      	str	r2, [r7, #16]
    5e0e:	697b      	ldr	r3, [r7, #20]
    5e10:	693a      	ldr	r2, [r7, #16]
    5e12:	601a      	str	r2, [r3, #0]
    close();
    5e14:	6978      	ldr	r0, [r7, #20]
    5e16:	f7ff ff9f 	bl	5d58 <_ZN9Container5closeEv>
#endif
}
    5e1a:	697b      	ldr	r3, [r7, #20]
    5e1c:	4618      	mov	r0, r3
    5e1e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5e22:	46bd      	mov	sp, r7
    5e24:	bd80      	pop	{r7, pc}
    5e26:	46c0      	nop			(mov r8, r8)
    5e28:	40000400 	.word	0x40000400
    5e2c:	3de147ae 	.word	0x3de147ae
    5e30:	3c23d70a 	.word	0x3c23d70a

00005e34 <_ZN9Container12getSingletonEv>:
#define CONTAINER_ANGLE_OPEN 80.
#define CONTAINER_ANGLE_CLOSE 10.

Container* Container::singleton = 0;

Container* Container::getSingleton()
    5e34:	b580      	push	{r7, lr}
    5e36:	b082      	sub	sp, #8
    5e38:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    5e3a:	4b0f      	ldr	r3, [pc, #60]	(5e78 <_ZN9Container12getSingletonEv+0x44>)
    5e3c:	681b      	ldr	r3, [r3, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d113      	bne.n	5e6a <_ZN9Container12getSingletonEv+0x36>
        singleton = new Container();
    5e42:	f04f 0004 	mov.w	r0, #4	; 0x4
    5e46:	f008 fe53 	bl	eaf0 <_Znwj>
    5e4a:	4603      	mov	r3, r0
    5e4c:	603b      	str	r3, [r7, #0]
    5e4e:	683a      	ldr	r2, [r7, #0]
    5e50:	2a00      	cmp	r2, #0
    5e52:	d005      	beq.n	5e60 <_ZN9Container12getSingletonEv+0x2c>
    5e54:	6838      	ldr	r0, [r7, #0]
    5e56:	f7ff ff9f 	bl	5d98 <_ZN9ContainerC1Ev>
    5e5a:	683b      	ldr	r3, [r7, #0]
    5e5c:	607b      	str	r3, [r7, #4]
    5e5e:	e001      	b.n	5e64 <_ZN9Container12getSingletonEv+0x30>
    5e60:	683a      	ldr	r2, [r7, #0]
    5e62:	607a      	str	r2, [r7, #4]
    5e64:	4b04      	ldr	r3, [pc, #16]	(5e78 <_ZN9Container12getSingletonEv+0x44>)
    5e66:	687a      	ldr	r2, [r7, #4]
    5e68:	601a      	str	r2, [r3, #0]

    return singleton;
    5e6a:	4b03      	ldr	r3, [pc, #12]	(5e78 <_ZN9Container12getSingletonEv+0x44>)
    5e6c:	681b      	ldr	r3, [r3, #0]
}
    5e6e:	4618      	mov	r0, r3
    5e70:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5e74:	46bd      	mov	sp, r7
    5e76:	bd80      	pop	{r7, pc}
    5e78:	20000564 	.word	0x20000564

00005e7c <_ZN9ContainerC2Ev>:

Container::Container()
    5e7c:	b580      	push	{r7, lr}
    5e7e:	b08a      	sub	sp, #40
    5e80:	af02      	add	r7, sp, #8
    5e82:	6178      	str	r0, [r7, #20]
{
#ifdef ROBOTHW
    Timer* timer3 = new Timer(TIM3, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5e84:	f04f 000c 	mov.w	r0, #12	; 0xc
    5e88:	f008 fe32 	bl	eaf0 <_Znwj>
    5e8c:	4603      	mov	r3, r0
    5e8e:	607b      	str	r3, [r7, #4]
    5e90:	687a      	ldr	r2, [r7, #4]
    5e92:	2a00      	cmp	r2, #0
    5e94:	d00d      	beq.n	5eb2 <_ZN9ContainerC2Ev+0x36>
    5e96:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e9a:	9300      	str	r3, [sp, #0]
    5e9c:	6878      	ldr	r0, [r7, #4]
    5e9e:	491b      	ldr	r1, [pc, #108]	(5f0c <_ZN9ContainerC2Ev+0x90>)
    5ea0:	f644 6220 	movw	r2, #20000	; 0x4e20
    5ea4:	f04f 0347 	mov.w	r3, #71	; 0x47
    5ea8:	f007 fd96 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	60bb      	str	r3, [r7, #8]
    5eb0:	e001      	b.n	5eb6 <_ZN9ContainerC2Ev+0x3a>
    5eb2:	687a      	ldr	r2, [r7, #4]
    5eb4:	60ba      	str	r2, [r7, #8]
    5eb6:	68bb      	ldr	r3, [r7, #8]
    5eb8:	61fb      	str	r3, [r7, #28]
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    5eba:	4814      	ldr	r0, [pc, #80]	(5f0c <_ZN9ContainerC2Ev+0x90>)
    5ebc:	f04f 0101 	mov.w	r1, #1	; 0x1
    5ec0:	f7fd f8d8 	bl	3074 <TIM_CtrlPWMOutputs>

    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    5ec4:	f04f 0014 	mov.w	r0, #20	; 0x14
    5ec8:	f008 fe12 	bl	eaf0 <_Znwj>
    5ecc:	4603      	mov	r3, r0
    5ece:	60fb      	str	r3, [r7, #12]
    5ed0:	68fa      	ldr	r2, [r7, #12]
    5ed2:	2a00      	cmp	r2, #0
    5ed4:	d00b      	beq.n	5eee <_ZN9ContainerC2Ev+0x72>
    5ed6:	4b0e      	ldr	r3, [pc, #56]	(5f10 <_ZN9ContainerC2Ev+0x94>)
    5ed8:	9300      	str	r3, [sp, #0]
    5eda:	68f8      	ldr	r0, [r7, #12]
    5edc:	69f9      	ldr	r1, [r7, #28]
    5ede:	f04f 0202 	mov.w	r2, #2	; 0x2
    5ee2:	4b0c      	ldr	r3, [pc, #48]	(5f14 <_ZN9ContainerC2Ev+0x98>)
    5ee4:	f001 fc14 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    5ee8:	68fb      	ldr	r3, [r7, #12]
    5eea:	613b      	str	r3, [r7, #16]
    5eec:	e001      	b.n	5ef2 <_ZN9ContainerC2Ev+0x76>
    5eee:	68fa      	ldr	r2, [r7, #12]
    5ef0:	613a      	str	r2, [r7, #16]
    5ef2:	697b      	ldr	r3, [r7, #20]
    5ef4:	693a      	ldr	r2, [r7, #16]
    5ef6:	601a      	str	r2, [r3, #0]
    close();
    5ef8:	6978      	ldr	r0, [r7, #20]
    5efa:	f7ff ff2d 	bl	5d58 <_ZN9Container5closeEv>
#endif
}
    5efe:	697b      	ldr	r3, [r7, #20]
    5f00:	4618      	mov	r0, r3
    5f02:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5f06:	46bd      	mov	sp, r7
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	46c0      	nop			(mov r8, r8)
    5f0c:	40000400 	.word	0x40000400
    5f10:	3de147ae 	.word	0x3de147ae
    5f14:	3c23d70a 	.word	0x3c23d70a

00005f18 <_ZN6Moteur6tourneEf>:
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
}

void Moteur::tourne(float rapport)
    5f18:	b580      	push	{r7, lr}
    5f1a:	b082      	sub	sp, #8
    5f1c:	af00      	add	r7, sp, #0
    5f1e:	6078      	str	r0, [r7, #4]
    5f20:	6039      	str	r1, [r7, #0]
{
    pwm.setDutyCycle(rapport);
    5f22:	687b      	ldr	r3, [r7, #4]
    5f24:	4618      	mov	r0, r3
    5f26:	6839      	ldr	r1, [r7, #0]
    5f28:	f006 fe74 	bl	cc14 <_ZN10PWMHandler12setDutyCycleEf>
}
    5f2c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5f30:	46bd      	mov	sp, r7
    5f32:	bd80      	pop	{r7, pc}

00005f34 <_ZN6MoteurC1EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    5f34:	b5b0      	push	{r4, r5, r7, lr}
    5f36:	b088      	sub	sp, #32
    5f38:	af02      	add	r7, sp, #8
    5f3a:	60f8      	str	r0, [r7, #12]
    5f3c:	60b9      	str	r1, [r7, #8]
    5f3e:	603b      	str	r3, [r7, #0]
    5f40:	4613      	mov	r3, r2
    5f42:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    5f44:	68fd      	ldr	r5, [r7, #12]
    5f46:	f04f 000c 	mov.w	r0, #12	; 0xc
    5f4a:	f008 fdd1 	bl	eaf0 <_Znwj>
    5f4e:	4603      	mov	r3, r0
    5f50:	461c      	mov	r4, r3
    5f52:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f56:	9300      	str	r3, [sp, #0]
    5f58:	4620      	mov	r0, r4
    5f5a:	68b9      	ldr	r1, [r7, #8]
    5f5c:	f04f 0228 	mov.w	r2, #40	; 0x28
    5f60:	f04f 0347 	mov.w	r3, #71	; 0x47
    5f64:	f007 fd38 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5f68:	79fb      	ldrb	r3, [r7, #7]
    5f6a:	4628      	mov	r0, r5
    5f6c:	4621      	mov	r1, r4
    5f6e:	461a      	mov	r2, r3
    5f70:	f006 fe72 	bl	cc58 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    5f74:	8d3b      	ldrh	r3, [r7, #40]
    5f76:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5f78:	f04f 0318 	mov.w	r3, #24	; 0x18
    5f7c:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    5f7e:	f04f 0303 	mov.w	r3, #3	; 0x3
    5f82:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    5f84:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5f88:	6838      	ldr	r0, [r7, #0]
    5f8a:	4619      	mov	r1, r3
    5f8c:	f7fb fb90 	bl	16b0 <GPIO_Init>
}
    5f90:	68fb      	ldr	r3, [r7, #12]
    5f92:	4618      	mov	r0, r3
    5f94:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5f98:	46bd      	mov	sp, r7
    5f9a:	bdb0      	pop	{r4, r5, r7, pc}

00005f9c <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    5f9c:	b5b0      	push	{r4, r5, r7, lr}
    5f9e:	b088      	sub	sp, #32
    5fa0:	af02      	add	r7, sp, #8
    5fa2:	60f8      	str	r0, [r7, #12]
    5fa4:	60b9      	str	r1, [r7, #8]
    5fa6:	603b      	str	r3, [r7, #0]
    5fa8:	4613      	mov	r3, r2
    5faa:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    5fac:	68fd      	ldr	r5, [r7, #12]
    5fae:	f04f 000c 	mov.w	r0, #12	; 0xc
    5fb2:	f008 fd9d 	bl	eaf0 <_Znwj>
    5fb6:	4603      	mov	r3, r0
    5fb8:	461c      	mov	r4, r3
    5fba:	f04f 0300 	mov.w	r3, #0	; 0x0
    5fbe:	9300      	str	r3, [sp, #0]
    5fc0:	4620      	mov	r0, r4
    5fc2:	68b9      	ldr	r1, [r7, #8]
    5fc4:	f04f 0228 	mov.w	r2, #40	; 0x28
    5fc8:	f04f 0347 	mov.w	r3, #71	; 0x47
    5fcc:	f007 fd04 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5fd0:	79fb      	ldrb	r3, [r7, #7]
    5fd2:	4628      	mov	r0, r5
    5fd4:	4621      	mov	r1, r4
    5fd6:	461a      	mov	r2, r3
    5fd8:	f006 fe3e 	bl	cc58 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    5fdc:	8d3b      	ldrh	r3, [r7, #40]
    5fde:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5fe0:	f04f 0318 	mov.w	r3, #24	; 0x18
    5fe4:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    5fe6:	f04f 0303 	mov.w	r3, #3	; 0x3
    5fea:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    5fec:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5ff0:	6838      	ldr	r0, [r7, #0]
    5ff2:	4619      	mov	r1, r3
    5ff4:	f7fb fb5c 	bl	16b0 <GPIO_Init>
}
    5ff8:	68fb      	ldr	r3, [r7, #12]
    5ffa:	4618      	mov	r0, r3
    5ffc:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6000:	46bd      	mov	sp, r7
    6002:	bdb0      	pop	{r4, r5, r7, pc}

00006004 <_ZN5RouesC1Ev>:
#include "roues.h"

Roues::Roues()
    6004:	b580      	push	{r7, lr}
    6006:	b086      	sub	sp, #24
    6008:	af04      	add	r7, sp, #16
    600a:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    600c:	687a      	ldr	r2, [r7, #4]
    600e:	f04f 0302 	mov.w	r3, #2	; 0x2
    6012:	9300      	str	r3, [sp, #0]
    6014:	4b11      	ldr	r3, [pc, #68]	(605c <_ZN5RouesC1Ev+0x58>)
    6016:	9301      	str	r3, [sp, #4]
    6018:	f04f 0340 	mov.w	r3, #64	; 0x40
    601c:	9302      	str	r3, [sp, #8]
    601e:	4610      	mov	r0, r2
    6020:	490f      	ldr	r1, [pc, #60]	(6060 <_ZN5RouesC1Ev+0x5c>)
    6022:	f04f 0202 	mov.w	r2, #2	; 0x2
    6026:	4b0f      	ldr	r3, [pc, #60]	(6064 <_ZN5RouesC1Ev+0x60>)
    6028:	f007 fa5e 	bl	d4e8 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    602c:	687b      	ldr	r3, [r7, #4]
    602e:	f103 0210 	add.w	r2, r3, #16	; 0x10
    6032:	f04f 0308 	mov.w	r3, #8	; 0x8
    6036:	9300      	str	r3, [sp, #0]
    6038:	4b08      	ldr	r3, [pc, #32]	(605c <_ZN5RouesC1Ev+0x58>)
    603a:	9301      	str	r3, [sp, #4]
    603c:	f04f 0310 	mov.w	r3, #16	; 0x10
    6040:	9302      	str	r3, [sp, #8]
    6042:	4610      	mov	r0, r2
    6044:	4906      	ldr	r1, [pc, #24]	(6060 <_ZN5RouesC1Ev+0x5c>)
    6046:	f04f 0204 	mov.w	r2, #4	; 0x4
    604a:	4b06      	ldr	r3, [pc, #24]	(6064 <_ZN5RouesC1Ev+0x60>)
    604c:	f007 fa4c 	bl	d4e8 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	4618      	mov	r0, r3
    6054:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6058:	46bd      	mov	sp, r7
    605a:	bd80      	pop	{r7, pc}
    605c:	40011400 	.word	0x40011400
    6060:	40000c00 	.word	0x40000c00
    6064:	40010800 	.word	0x40010800

00006068 <_ZN5RouesC2Ev>:
#include "roues.h"

Roues::Roues()
    6068:	b580      	push	{r7, lr}
    606a:	b086      	sub	sp, #24
    606c:	af04      	add	r7, sp, #16
    606e:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    6070:	687a      	ldr	r2, [r7, #4]
    6072:	f04f 0302 	mov.w	r3, #2	; 0x2
    6076:	9300      	str	r3, [sp, #0]
    6078:	4b11      	ldr	r3, [pc, #68]	(60c0 <_ZN5RouesC2Ev+0x58>)
    607a:	9301      	str	r3, [sp, #4]
    607c:	f04f 0340 	mov.w	r3, #64	; 0x40
    6080:	9302      	str	r3, [sp, #8]
    6082:	4610      	mov	r0, r2
    6084:	490f      	ldr	r1, [pc, #60]	(60c4 <_ZN5RouesC2Ev+0x5c>)
    6086:	f04f 0202 	mov.w	r2, #2	; 0x2
    608a:	4b0f      	ldr	r3, [pc, #60]	(60c8 <_ZN5RouesC2Ev+0x60>)
    608c:	f007 fa2c 	bl	d4e8 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	f103 0210 	add.w	r2, r3, #16	; 0x10
    6096:	f04f 0308 	mov.w	r3, #8	; 0x8
    609a:	9300      	str	r3, [sp, #0]
    609c:	4b08      	ldr	r3, [pc, #32]	(60c0 <_ZN5RouesC2Ev+0x58>)
    609e:	9301      	str	r3, [sp, #4]
    60a0:	f04f 0310 	mov.w	r3, #16	; 0x10
    60a4:	9302      	str	r3, [sp, #8]
    60a6:	4610      	mov	r0, r2
    60a8:	4906      	ldr	r1, [pc, #24]	(60c4 <_ZN5RouesC2Ev+0x5c>)
    60aa:	f04f 0204 	mov.w	r2, #4	; 0x4
    60ae:	4b06      	ldr	r3, [pc, #24]	(60c8 <_ZN5RouesC2Ev+0x60>)
    60b0:	f007 fa1a 	bl	d4e8 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	4618      	mov	r0, r3
    60b8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    60bc:	46bd      	mov	sp, r7
    60be:	bd80      	pop	{r7, pc}
    60c0:	40011400 	.word	0x40011400
    60c4:	40000c00 	.word	0x40000c00
    60c8:	40010800 	.word	0x40010800

000060cc <_ZN6SensorC2Ev>:
#include "sensor.h"

Sensor::Sensor()
    60cc:	b480      	push	{r7}
    60ce:	b083      	sub	sp, #12
    60d0:	af00      	add	r7, sp, #0
    60d2:	6078      	str	r0, [r7, #4]
    60d4:	687a      	ldr	r2, [r7, #4]
    60d6:	4b04      	ldr	r3, [pc, #16]	(60e8 <_ZN6SensorC2Ev+0x1c>)
    60d8:	6013      	str	r3, [r2, #0]
{
}
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	4618      	mov	r0, r3
    60de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    60e2:	46bd      	mov	sp, r7
    60e4:	bc80      	pop	{r7}
    60e6:	4770      	bx	lr
    60e8:	000220e0 	.word	0x000220e0

000060ec <_ZN6SensorC1Ev>:
#include "sensor.h"

Sensor::Sensor()
    60ec:	b480      	push	{r7}
    60ee:	b083      	sub	sp, #12
    60f0:	af00      	add	r7, sp, #0
    60f2:	6078      	str	r0, [r7, #4]
    60f4:	687a      	ldr	r2, [r7, #4]
    60f6:	4b04      	ldr	r3, [pc, #16]	(6108 <_ZN6SensorC1Ev+0x1c>)
    60f8:	6013      	str	r3, [r2, #0]
{
}
    60fa:	687b      	ldr	r3, [r7, #4]
    60fc:	4618      	mov	r0, r3
    60fe:	f107 070c 	add.w	r7, r7, #12	; 0xc
    6102:	46bd      	mov	sp, r7
    6104:	bc80      	pop	{r7}
    6106:	4770      	bx	lr
    6108:	000220e0 	.word	0x000220e0

0000610c <_ZN6SensorD0Ev>:

Sensor::~Sensor()
    610c:	b580      	push	{r7, lr}
    610e:	b082      	sub	sp, #8
    6110:	af00      	add	r7, sp, #0
    6112:	6078      	str	r0, [r7, #4]
    6114:	687a      	ldr	r2, [r7, #4]
    6116:	4b08      	ldr	r3, [pc, #32]	(6138 <_ZN6SensorD0Ev+0x2c>)
    6118:	6013      	str	r3, [r2, #0]
{
}
    611a:	f04f 0301 	mov.w	r3, #1	; 0x1
    611e:	b2db      	uxtb	r3, r3
    6120:	2b00      	cmp	r3, #0
    6122:	d002      	beq.n	612a <_ZN6SensorD0Ev+0x1e>
    6124:	6878      	ldr	r0, [r7, #4]
    6126:	f008 fd89 	bl	ec3c <_ZdlPv>
    612a:	687b      	ldr	r3, [r7, #4]
    612c:	4618      	mov	r0, r3
    612e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6132:	46bd      	mov	sp, r7
    6134:	bd80      	pop	{r7, pc}
    6136:	46c0      	nop			(mov r8, r8)
    6138:	000220e0 	.word	0x000220e0

0000613c <_ZN6SensorD1Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    613c:	b580      	push	{r7, lr}
    613e:	b082      	sub	sp, #8
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
    6144:	687a      	ldr	r2, [r7, #4]
    6146:	4b08      	ldr	r3, [pc, #32]	(6168 <_ZN6SensorD1Ev+0x2c>)
    6148:	6013      	str	r3, [r2, #0]
{
}
    614a:	f04f 0300 	mov.w	r3, #0	; 0x0
    614e:	b2db      	uxtb	r3, r3
    6150:	2b00      	cmp	r3, #0
    6152:	d002      	beq.n	615a <_ZN6SensorD1Ev+0x1e>
    6154:	6878      	ldr	r0, [r7, #4]
    6156:	f008 fd71 	bl	ec3c <_ZdlPv>
    615a:	687b      	ldr	r3, [r7, #4]
    615c:	4618      	mov	r0, r3
    615e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6162:	46bd      	mov	sp, r7
    6164:	bd80      	pop	{r7, pc}
    6166:	46c0      	nop			(mov r8, r8)
    6168:	000220e0 	.word	0x000220e0

0000616c <_ZN6SensorD2Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    616c:	b580      	push	{r7, lr}
    616e:	b082      	sub	sp, #8
    6170:	af00      	add	r7, sp, #0
    6172:	6078      	str	r0, [r7, #4]
    6174:	687a      	ldr	r2, [r7, #4]
    6176:	4b08      	ldr	r3, [pc, #32]	(6198 <_ZN6SensorD2Ev+0x2c>)
    6178:	6013      	str	r3, [r2, #0]
{
}
    617a:	f04f 0300 	mov.w	r3, #0	; 0x0
    617e:	b2db      	uxtb	r3, r3
    6180:	2b00      	cmp	r3, #0
    6182:	d002      	beq.n	618a <_ZN6SensorD2Ev+0x1e>
    6184:	6878      	ldr	r0, [r7, #4]
    6186:	f008 fd59 	bl	ec3c <_ZdlPv>
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	4618      	mov	r0, r3
    618e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6192:	46bd      	mov	sp, r7
    6194:	bd80      	pop	{r7, pc}
    6196:	46c0      	nop			(mov r8, r8)
    6198:	000220e0 	.word	0x000220e0

0000619c <_ZN7Sensors11sharpDetectEv>:
    }
   // sharpNameVector->resize();
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
    619c:	b580      	push	{r7, lr}
    619e:	b086      	sub	sp, #24
    61a0:	af00      	add	r7, sp, #0
    61a2:	6078      	str	r0, [r7, #4]
{
    for (int i = 0; i< nbSharp; i++)
    61a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    61a8:	617b      	str	r3, [r7, #20]
    61aa:	e022      	b.n	61f2 <_ZN7Sensors11sharpDetectEv+0x56>
    {
        if (sharps[i]->getValue().b == true)
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	685a      	ldr	r2, [r3, #4]
    61b0:	697b      	ldr	r3, [r7, #20]
    61b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61b6:	4413      	add	r3, r2
    61b8:	681b      	ldr	r3, [r3, #0]
    61ba:	681b      	ldr	r3, [r3, #0]
    61bc:	f103 0308 	add.w	r3, r3, #8	; 0x8
    61c0:	f8d3 c000 	ldr.w	ip, [r3]
    61c4:	687b      	ldr	r3, [r7, #4]
    61c6:	685a      	ldr	r2, [r3, #4]
    61c8:	697b      	ldr	r3, [r7, #20]
    61ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61ce:	4413      	add	r3, r2
    61d0:	681a      	ldr	r2, [r3, #0]
    61d2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    61d6:	4618      	mov	r0, r3
    61d8:	4611      	mov	r1, r2
    61da:	47e0      	blx	ip
    61dc:	7c3b      	ldrb	r3, [r7, #16]
    61de:	2b00      	cmp	r3, #0
    61e0:	d003      	beq.n	61ea <_ZN7Sensors11sharpDetectEv+0x4e>
        {
            return true;
    61e2:	f04f 0301 	mov.w	r3, #1	; 0x1
    61e6:	603b      	str	r3, [r7, #0]
    61e8:	e00b      	b.n	6202 <_ZN7Sensors11sharpDetectEv+0x66>
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
{
    for (int i = 0; i< nbSharp; i++)
    61ea:	697b      	ldr	r3, [r7, #20]
    61ec:	f103 0301 	add.w	r3, r3, #1	; 0x1
    61f0:	617b      	str	r3, [r7, #20]
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	689a      	ldr	r2, [r3, #8]
    61f6:	697b      	ldr	r3, [r7, #20]
    61f8:	429a      	cmp	r2, r3
    61fa:	dcd7      	bgt.n	61ac <_ZN7Sensors11sharpDetectEv+0x10>
        if (sharps[i]->getValue().b == true)
        {
            return true;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    61fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    6200:	603b      	str	r3, [r7, #0]
    6202:	683b      	ldr	r3, [r7, #0]
}
    6204:	4618      	mov	r0, r3
    6206:	f107 0718 	add.w	r7, r7, #24	; 0x18
    620a:	46bd      	mov	sp, r7
    620c:	bd80      	pop	{r7, pc}
    620e:	46c0      	nop			(mov r8, r8)

00006210 <_ZN7Sensors10getSensorsEv>:
    return outputSensorVector;
}

#endif

Sensors* Sensors::getSensors()
    6210:	b480      	push	{r7}
    6212:	af00      	add	r7, sp, #0
{
    return Sensors::sensors;
    6214:	4b02      	ldr	r3, [pc, #8]	(6220 <_ZN7Sensors10getSensorsEv+0x10>)
    6216:	681b      	ldr	r3, [r3, #0]
}
    6218:	4618      	mov	r0, r3
    621a:	46bd      	mov	sp, r7
    621c:	bc80      	pop	{r7}
    621e:	4770      	bx	lr
    6220:	20000568 	.word	0x20000568

00006224 <_ZN7Sensors19getSharpSensorsListEv>:
       sharps[i]->setActif();
    }
}


SharpSensor** Sensors::getSharpSensorsList()
    6224:	b480      	push	{r7}
    6226:	b083      	sub	sp, #12
    6228:	af00      	add	r7, sp, #0
    622a:	6078      	str	r0, [r7, #4]
{
    return Sensors::sharps;
    622c:	687b      	ldr	r3, [r7, #4]
    622e:	685b      	ldr	r3, [r3, #4]
}
    6230:	4618      	mov	r0, r3
    6232:	f107 070c 	add.w	r7, r7, #12	; 0xc
    6236:	46bd      	mov	sp, r7
    6238:	bc80      	pop	{r7}
    623a:	4770      	bx	lr

0000623c <_ZN7Sensors14activeAllSharpEv>:
            sharps[i]->unsetActif();
            break;
        }
    }
}
void Sensors::activeAllSharp()
    623c:	b580      	push	{r7, lr}
    623e:	b084      	sub	sp, #16
    6240:	af00      	add	r7, sp, #0
    6242:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp;i++)
    6244:	f04f 0300 	mov.w	r3, #0	; 0x0
    6248:	60fb      	str	r3, [r7, #12]
    624a:	e00d      	b.n	6268 <_ZN7Sensors14activeAllSharpEv+0x2c>
    {
       sharps[i]->setActif();
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	685a      	ldr	r2, [r3, #4]
    6250:	68fb      	ldr	r3, [r7, #12]
    6252:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6256:	4413      	add	r3, r2
    6258:	681b      	ldr	r3, [r3, #0]
    625a:	4618      	mov	r0, r3
    625c:	f007 f9dc 	bl	d618 <_ZN11SharpSensor8setActifEv>
        }
    }
}
void Sensors::activeAllSharp()
{
    for (int i=0; i<nbSharp;i++)
    6260:	68fb      	ldr	r3, [r7, #12]
    6262:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6266:	60fb      	str	r3, [r7, #12]
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	689a      	ldr	r2, [r3, #8]
    626c:	68fb      	ldr	r3, [r7, #12]
    626e:	429a      	cmp	r2, r3
    6270:	dcec      	bgt.n	624c <_ZN7Sensors14activeAllSharpEv+0x10>
    {
       sharps[i]->setActif();
    }
}
    6272:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6276:	46bd      	mov	sp, r7
    6278:	bd80      	pop	{r7, pc}
    627a:	46c0      	nop			(mov r8, r8)

0000627c <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE>:
    }
    return false;
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
    627c:	b580      	push	{r7, lr}
    627e:	b084      	sub	sp, #16
    6280:	af00      	add	r7, sp, #0
    6282:	6078      	str	r0, [r7, #4]
    6284:	460b      	mov	r3, r1
    6286:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    6288:	f04f 0300 	mov.w	r3, #0	; 0x0
    628c:	60fb      	str	r3, [r7, #12]
    628e:	e022      	b.n	62d6 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    6290:	687b      	ldr	r3, [r7, #4]
    6292:	685a      	ldr	r2, [r3, #4]
    6294:	68fb      	ldr	r3, [r7, #12]
    6296:	ea4f 0383 	mov.w	r3, r3, lsl #2
    629a:	4413      	add	r3, r2
    629c:	681b      	ldr	r3, [r3, #0]
    629e:	4618      	mov	r0, r3
    62a0:	f007 f9ae 	bl	d600 <_ZN11SharpSensor7getNameEv>
    62a4:	4603      	mov	r3, r0
    62a6:	461a      	mov	r2, r3
    62a8:	78fb      	ldrb	r3, [r7, #3]
    62aa:	4293      	cmp	r3, r2
    62ac:	bf14      	ite	ne
    62ae:	2300      	movne	r3, #0
    62b0:	2301      	moveq	r3, #1
    62b2:	b2db      	uxtb	r3, r3
    62b4:	2b00      	cmp	r3, #0
    62b6:	d00a      	beq.n	62ce <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->setActif();
    62b8:	687b      	ldr	r3, [r7, #4]
    62ba:	685a      	ldr	r2, [r3, #4]
    62bc:	68fb      	ldr	r3, [r7, #12]
    62be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62c2:	4413      	add	r3, r2
    62c4:	681b      	ldr	r3, [r3, #0]
    62c6:	4618      	mov	r0, r3
    62c8:	f007 f9a6 	bl	d618 <_ZN11SharpSensor8setActifEv>
    62cc:	e008      	b.n	62e0 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x64>
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    62ce:	68fb      	ldr	r3, [r7, #12]
    62d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    62d4:	60fb      	str	r3, [r7, #12]
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	689a      	ldr	r2, [r3, #8]
    62da:	68fb      	ldr	r3, [r7, #12]
    62dc:	429a      	cmp	r2, r3
    62de:	dcd7      	bgt.n	6290 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->setActif();
            break;
        }
    }
}
    62e0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}

000062e8 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE>:
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
    62e8:	b580      	push	{r7, lr}
    62ea:	b088      	sub	sp, #32
    62ec:	af00      	add	r7, sp, #0
    62ee:	60f8      	str	r0, [r7, #12]
    62f0:	460b      	mov	r3, r1
    62f2:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i< nbSharp; i++)
    62f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    62f8:	61fb      	str	r3, [r7, #28]
    62fa:	e032      	b.n	6362 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x7a>
    {
        if (sharps[i]->getName() == name)
    62fc:	68fb      	ldr	r3, [r7, #12]
    62fe:	685a      	ldr	r2, [r3, #4]
    6300:	69fb      	ldr	r3, [r7, #28]
    6302:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6306:	4413      	add	r3, r2
    6308:	681b      	ldr	r3, [r3, #0]
    630a:	4618      	mov	r0, r3
    630c:	f007 f978 	bl	d600 <_ZN11SharpSensor7getNameEv>
    6310:	4603      	mov	r3, r0
    6312:	461a      	mov	r2, r3
    6314:	7afb      	ldrb	r3, [r7, #11]
    6316:	4293      	cmp	r3, r2
    6318:	bf14      	ite	ne
    631a:	2300      	movne	r3, #0
    631c:	2301      	moveq	r3, #1
    631e:	b2db      	uxtb	r3, r3
    6320:	2b00      	cmp	r3, #0
    6322:	d01a      	beq.n	635a <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x72>
            return sharps[i]->getValue().b;
    6324:	68fb      	ldr	r3, [r7, #12]
    6326:	685a      	ldr	r2, [r3, #4]
    6328:	69fb      	ldr	r3, [r7, #28]
    632a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    632e:	4413      	add	r3, r2
    6330:	681b      	ldr	r3, [r3, #0]
    6332:	681b      	ldr	r3, [r3, #0]
    6334:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6338:	f8d3 c000 	ldr.w	ip, [r3]
    633c:	68fb      	ldr	r3, [r7, #12]
    633e:	685a      	ldr	r2, [r3, #4]
    6340:	69fb      	ldr	r3, [r7, #28]
    6342:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6346:	4413      	add	r3, r2
    6348:	681a      	ldr	r2, [r3, #0]
    634a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    634e:	4618      	mov	r0, r3
    6350:	4611      	mov	r1, r2
    6352:	47e0      	blx	ip
    6354:	7e3b      	ldrb	r3, [r7, #24]
    6356:	607b      	str	r3, [r7, #4]
    6358:	e00b      	b.n	6372 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x8a>
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i< nbSharp; i++)
    635a:	69fb      	ldr	r3, [r7, #28]
    635c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6360:	61fb      	str	r3, [r7, #28]
    6362:	68fb      	ldr	r3, [r7, #12]
    6364:	689a      	ldr	r2, [r3, #8]
    6366:	69fb      	ldr	r3, [r7, #28]
    6368:	429a      	cmp	r2, r3
    636a:	dcc7      	bgt.n	62fc <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x14>
    {
        if (sharps[i]->getName() == name)
            return sharps[i]->getValue().b;
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    636c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6370:	607b      	str	r3, [r7, #4]
    6372:	687b      	ldr	r3, [r7, #4]
}
    6374:	4618      	mov	r0, r3
    6376:	f107 0720 	add.w	r7, r7, #32	; 0x20
    637a:	46bd      	mov	sp, r7
    637c:	bd80      	pop	{r7, pc}
    637e:	46c0      	nop			(mov r8, r8)

00006380 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE>:
            break;
        }
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
    6380:	b580      	push	{r7, lr}
    6382:	b084      	sub	sp, #16
    6384:	af00      	add	r7, sp, #0
    6386:	6078      	str	r0, [r7, #4]
    6388:	460b      	mov	r3, r1
    638a:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    638c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6390:	60fb      	str	r3, [r7, #12]
    6392:	e022      	b.n	63da <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    6394:	687b      	ldr	r3, [r7, #4]
    6396:	685a      	ldr	r2, [r3, #4]
    6398:	68fb      	ldr	r3, [r7, #12]
    639a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    639e:	4413      	add	r3, r2
    63a0:	681b      	ldr	r3, [r3, #0]
    63a2:	4618      	mov	r0, r3
    63a4:	f007 f92c 	bl	d600 <_ZN11SharpSensor7getNameEv>
    63a8:	4603      	mov	r3, r0
    63aa:	461a      	mov	r2, r3
    63ac:	78fb      	ldrb	r3, [r7, #3]
    63ae:	4293      	cmp	r3, r2
    63b0:	bf14      	ite	ne
    63b2:	2300      	movne	r3, #0
    63b4:	2301      	moveq	r3, #1
    63b6:	b2db      	uxtb	r3, r3
    63b8:	2b00      	cmp	r3, #0
    63ba:	d00a      	beq.n	63d2 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->unsetActif();
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	685a      	ldr	r2, [r3, #4]
    63c0:	68fb      	ldr	r3, [r7, #12]
    63c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    63c6:	4413      	add	r3, r2
    63c8:	681b      	ldr	r3, [r3, #0]
    63ca:	4618      	mov	r0, r3
    63cc:	f007 f932 	bl	d634 <_ZN11SharpSensor10unsetActifEv>
    63d0:	e008      	b.n	63e4 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x64>
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    63d2:	68fb      	ldr	r3, [r7, #12]
    63d4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    63d8:	60fb      	str	r3, [r7, #12]
    63da:	687b      	ldr	r3, [r7, #4]
    63dc:	689a      	ldr	r2, [r3, #8]
    63de:	68fb      	ldr	r3, [r7, #12]
    63e0:	429a      	cmp	r2, r3
    63e2:	dcd7      	bgt.n	6394 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->unsetActif();
            break;
        }
    }
}
    63e4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    63e8:	46bd      	mov	sp, r7
    63ea:	bd80      	pop	{r7, pc}

000063ec <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE>:
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
    63ec:	b580      	push	{r7, lr}
    63ee:	b088      	sub	sp, #32
    63f0:	af00      	add	r7, sp, #0
    63f2:	60f8      	str	r0, [r7, #12]
    63f4:	460b      	mov	r3, r1
    63f6:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i<nbLimitSwitch; i++)
    63f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    63fc:	61fb      	str	r3, [r7, #28]
    63fe:	e032      	b.n	6466 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x7a>
    {
        if (limitSwitchs[i]->getName() == limitSwitchName)
    6400:	68fb      	ldr	r3, [r7, #12]
    6402:	69da      	ldr	r2, [r3, #28]
    6404:	69fb      	ldr	r3, [r7, #28]
    6406:	ea4f 0383 	mov.w	r3, r3, lsl #2
    640a:	4413      	add	r3, r2
    640c:	681b      	ldr	r3, [r3, #0]
    640e:	4618      	mov	r0, r3
    6410:	f006 faae 	bl	c970 <_ZN17LimitSwitchSensor7getNameEv>
    6414:	4603      	mov	r3, r0
    6416:	461a      	mov	r2, r3
    6418:	7afb      	ldrb	r3, [r7, #11]
    641a:	4293      	cmp	r3, r2
    641c:	bf14      	ite	ne
    641e:	2300      	movne	r3, #0
    6420:	2301      	moveq	r3, #1
    6422:	b2db      	uxtb	r3, r3
    6424:	2b00      	cmp	r3, #0
    6426:	d01a      	beq.n	645e <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x72>
        {
            return limitSwitchs[i]->getValue().b;
    6428:	68fb      	ldr	r3, [r7, #12]
    642a:	69da      	ldr	r2, [r3, #28]
    642c:	69fb      	ldr	r3, [r7, #28]
    642e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6432:	4413      	add	r3, r2
    6434:	681b      	ldr	r3, [r3, #0]
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	f103 0308 	add.w	r3, r3, #8	; 0x8
    643c:	f8d3 c000 	ldr.w	ip, [r3]
    6440:	68fb      	ldr	r3, [r7, #12]
    6442:	69da      	ldr	r2, [r3, #28]
    6444:	69fb      	ldr	r3, [r7, #28]
    6446:	ea4f 0383 	mov.w	r3, r3, lsl #2
    644a:	4413      	add	r3, r2
    644c:	681a      	ldr	r2, [r3, #0]
    644e:	f107 0310 	add.w	r3, r7, #16	; 0x10
    6452:	4618      	mov	r0, r3
    6454:	4611      	mov	r1, r2
    6456:	47e0      	blx	ip
    6458:	7e3b      	ldrb	r3, [r7, #24]
    645a:	607b      	str	r3, [r7, #4]
    645c:	e00b      	b.n	6476 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x8a>
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
{
    for (int i = 0; i<nbLimitSwitch; i++)
    645e:	69fb      	ldr	r3, [r7, #28]
    6460:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6464:	61fb      	str	r3, [r7, #28]
    6466:	68fb      	ldr	r3, [r7, #12]
    6468:	6a1a      	ldr	r2, [r3, #32]
    646a:	69fb      	ldr	r3, [r7, #28]
    646c:	429a      	cmp	r2, r3
    646e:	dcc7      	bgt.n	6400 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x14>
        if (limitSwitchs[i]->getName() == limitSwitchName)
        {
            return limitSwitchs[i]->getValue().b;
        }
    }
    return false;
    6470:	f04f 0300 	mov.w	r3, #0	; 0x0
    6474:	607b      	str	r3, [r7, #4]
    6476:	687b      	ldr	r3, [r7, #4]
}
    6478:	4618      	mov	r0, r3
    647a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    647e:	46bd      	mov	sp, r7
    6480:	bd80      	pop	{r7, pc}
    6482:	46c0      	nop			(mov r8, r8)

00006484 <_ZN7Sensors6updateEv>:
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#endif

void Sensors::update()
    6484:	b580      	push	{r7, lr}
    6486:	b086      	sub	sp, #24
    6488:	af00      	add	r7, sp, #0
    648a:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp; i++)
    648c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6490:	60fb      	str	r3, [r7, #12]
    6492:	e00d      	b.n	64b0 <_ZN7Sensors6updateEv+0x2c>
    {
        sharps[i]->updateValue();
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	685a      	ldr	r2, [r3, #4]
    6498:	68fb      	ldr	r3, [r7, #12]
    649a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    649e:	4413      	add	r3, r2
    64a0:	681b      	ldr	r3, [r3, #0]
    64a2:	4618      	mov	r0, r3
    64a4:	f007 f8d4 	bl	d650 <_ZN11SharpSensor11updateValueEv>

#endif

void Sensors::update()
{
    for (int i=0; i<nbSharp; i++)
    64a8:	68fb      	ldr	r3, [r7, #12]
    64aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    64ae:	60fb      	str	r3, [r7, #12]
    64b0:	687b      	ldr	r3, [r7, #4]
    64b2:	689a      	ldr	r2, [r3, #8]
    64b4:	68fb      	ldr	r3, [r7, #12]
    64b6:	429a      	cmp	r2, r3
    64b8:	dcec      	bgt.n	6494 <_ZN7Sensors6updateEv+0x10>
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    64ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    64be:	613b      	str	r3, [r7, #16]
    64c0:	e00d      	b.n	64de <_ZN7Sensors6updateEv+0x5a>
    {
        ligthBarriers[i]->updateValue();
    64c2:	687b      	ldr	r3, [r7, #4]
    64c4:	695a      	ldr	r2, [r3, #20]
    64c6:	693b      	ldr	r3, [r7, #16]
    64c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64cc:	4413      	add	r3, r2
    64ce:	681b      	ldr	r3, [r3, #0]
    64d0:	4618      	mov	r0, r3
    64d2:	f006 f92f 	bl	c734 <_ZN18LigthBarrierSensor11updateValueEv>
    for (int i=0; i<nbSharp; i++)
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    64d6:	693b      	ldr	r3, [r7, #16]
    64d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    64dc:	613b      	str	r3, [r7, #16]
    64de:	687b      	ldr	r3, [r7, #4]
    64e0:	699a      	ldr	r2, [r3, #24]
    64e2:	693b      	ldr	r3, [r7, #16]
    64e4:	429a      	cmp	r2, r3
    64e6:	dcec      	bgt.n	64c2 <_ZN7Sensors6updateEv+0x3e>
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    64e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    64ec:	617b      	str	r3, [r7, #20]
    64ee:	e00d      	b.n	650c <_ZN7Sensors6updateEv+0x88>
    {
        limitSwitchs[i]->updateValue();
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	69da      	ldr	r2, [r3, #28]
    64f4:	697b      	ldr	r3, [r7, #20]
    64f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64fa:	4413      	add	r3, r2
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	4618      	mov	r0, r3
    6500:	f006 fa42 	bl	c988 <_ZN17LimitSwitchSensor11updateValueEv>
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    6504:	697b      	ldr	r3, [r7, #20]
    6506:	f103 0301 	add.w	r3, r3, #1	; 0x1
    650a:	617b      	str	r3, [r7, #20]
    650c:	687b      	ldr	r3, [r7, #4]
    650e:	6a1a      	ldr	r2, [r3, #32]
    6510:	697b      	ldr	r3, [r7, #20]
    6512:	429a      	cmp	r2, r3
    6514:	dcec      	bgt.n	64f0 <_ZN7Sensors6updateEv+0x6c>
    {
        limitSwitchs[i]->updateValue();
    }
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}
    6516:	f107 0718 	add.w	r7, r7, #24	; 0x18
    651a:	46bd      	mov	sp, r7
    651c:	bd80      	pop	{r7, pc}
    651e:	46c0      	nop			(mov r8, r8)

00006520 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE>:
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
    6520:	b580      	push	{r7, lr}
    6522:	b088      	sub	sp, #32
    6524:	af00      	add	r7, sp, #0
    6526:	60f8      	str	r0, [r7, #12]
    6528:	460b      	mov	r3, r1
    652a:	72fb      	strb	r3, [r7, #11]
{
    for (int i=0; i<nbLigthBarrier; i++)
    652c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6530:	61fb      	str	r3, [r7, #28]
    6532:	e032      	b.n	659a <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x7a>
    {
        if(ligthBarriers[i]->getName() == name)
    6534:	68fb      	ldr	r3, [r7, #12]
    6536:	695a      	ldr	r2, [r3, #20]
    6538:	69fb      	ldr	r3, [r7, #28]
    653a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    653e:	4413      	add	r3, r2
    6540:	681b      	ldr	r3, [r3, #0]
    6542:	4618      	mov	r0, r3
    6544:	f006 f8ea 	bl	c71c <_ZN18LigthBarrierSensor7getNameEv>
    6548:	4603      	mov	r3, r0
    654a:	461a      	mov	r2, r3
    654c:	7afb      	ldrb	r3, [r7, #11]
    654e:	4293      	cmp	r3, r2
    6550:	bf14      	ite	ne
    6552:	2300      	movne	r3, #0
    6554:	2301      	moveq	r3, #1
    6556:	b2db      	uxtb	r3, r3
    6558:	2b00      	cmp	r3, #0
    655a:	d01a      	beq.n	6592 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x72>
        {
            return ligthBarriers[i]->getValue().b;
    655c:	68fb      	ldr	r3, [r7, #12]
    655e:	695a      	ldr	r2, [r3, #20]
    6560:	69fb      	ldr	r3, [r7, #28]
    6562:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6566:	4413      	add	r3, r2
    6568:	681b      	ldr	r3, [r3, #0]
    656a:	681b      	ldr	r3, [r3, #0]
    656c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6570:	f8d3 c000 	ldr.w	ip, [r3]
    6574:	68fb      	ldr	r3, [r7, #12]
    6576:	695a      	ldr	r2, [r3, #20]
    6578:	69fb      	ldr	r3, [r7, #28]
    657a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    657e:	4413      	add	r3, r2
    6580:	681a      	ldr	r2, [r3, #0]
    6582:	f107 0310 	add.w	r3, r7, #16	; 0x10
    6586:	4618      	mov	r0, r3
    6588:	4611      	mov	r1, r2
    658a:	47e0      	blx	ip
    658c:	7e3b      	ldrb	r3, [r7, #24]
    658e:	607b      	str	r3, [r7, #4]
    6590:	e00b      	b.n	65aa <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x8a>
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
{
    for (int i=0; i<nbLigthBarrier; i++)
    6592:	69fb      	ldr	r3, [r7, #28]
    6594:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6598:	61fb      	str	r3, [r7, #28]
    659a:	68fb      	ldr	r3, [r7, #12]
    659c:	699a      	ldr	r2, [r3, #24]
    659e:	69fb      	ldr	r3, [r7, #28]
    65a0:	429a      	cmp	r2, r3
    65a2:	dcc7      	bgt.n	6534 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x14>
        if(ligthBarriers[i]->getName() == name)
        {
            return ligthBarriers[i]->getValue().b;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    65a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    65a8:	607b      	str	r3, [r7, #4]
    65aa:	687b      	ldr	r3, [r7, #4]
}
    65ac:	4618      	mov	r0, r3
    65ae:	f107 0720 	add.w	r7, r7, #32	; 0x20
    65b2:	46bd      	mov	sp, r7
    65b4:	bd80      	pop	{r7, pc}
    65b6:	46c0      	nop			(mov r8, r8)

000065b8 <_ZN7Sensors20detectedLigthBarrierEv>:
    }
    return -1;
}

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
    65b8:	b590      	push	{r4, r7, lr}
    65ba:	b089      	sub	sp, #36
    65bc:	af00      	add	r7, sp, #0
    65be:	6078      	str	r0, [r7, #4]
{
    ligthBarrierNameVector->reset();
    65c0:	687b      	ldr	r3, [r7, #4]
    65c2:	6adb      	ldr	r3, [r3, #44]
    65c4:	4618      	mov	r0, r3
    65c6:	f016 f8d5 	bl	1c774 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>
    for (int i=0; i<nbLigthBarrier; i++)
    65ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    65ce:	61fb      	str	r3, [r7, #28]
    65d0:	e032      	b.n	6638 <_ZN7Sensors20detectedLigthBarrierEv+0x80>
    {
        if(ligthBarriers[i]->getValue().b)
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	695a      	ldr	r2, [r3, #20]
    65d6:	69fb      	ldr	r3, [r7, #28]
    65d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65dc:	4413      	add	r3, r2
    65de:	681b      	ldr	r3, [r3, #0]
    65e0:	681b      	ldr	r3, [r3, #0]
    65e2:	f103 0308 	add.w	r3, r3, #8	; 0x8
    65e6:	f8d3 c000 	ldr.w	ip, [r3]
    65ea:	687b      	ldr	r3, [r7, #4]
    65ec:	695a      	ldr	r2, [r3, #20]
    65ee:	69fb      	ldr	r3, [r7, #28]
    65f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    65f4:	4413      	add	r3, r2
    65f6:	681a      	ldr	r2, [r3, #0]
    65f8:	f107 030c 	add.w	r3, r7, #12	; 0xc
    65fc:	4618      	mov	r0, r3
    65fe:	4611      	mov	r1, r2
    6600:	47e0      	blx	ip
    6602:	7d3b      	ldrb	r3, [r7, #20]
    6604:	2b00      	cmp	r3, #0
    6606:	d013      	beq.n	6630 <_ZN7Sensors20detectedLigthBarrierEv+0x78>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
    6608:	687b      	ldr	r3, [r7, #4]
    660a:	6adc      	ldr	r4, [r3, #44]
    660c:	687b      	ldr	r3, [r7, #4]
    660e:	695a      	ldr	r2, [r3, #20]
    6610:	69fb      	ldr	r3, [r7, #28]
    6612:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6616:	4413      	add	r3, r2
    6618:	681b      	ldr	r3, [r3, #0]
    661a:	4618      	mov	r0, r3
    661c:	f006 f87e 	bl	c71c <_ZN18LigthBarrierSensor7getNameEv>
    6620:	4603      	mov	r3, r0
    6622:	76fb      	strb	r3, [r7, #27]
    6624:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    6628:	4620      	mov	r0, r4
    662a:	4619      	mov	r1, r3
    662c:	f016 f916 	bl	1c85c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
{
    ligthBarrierNameVector->reset();
    for (int i=0; i<nbLigthBarrier; i++)
    6630:	69fb      	ldr	r3, [r7, #28]
    6632:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6636:	61fb      	str	r3, [r7, #28]
    6638:	687b      	ldr	r3, [r7, #4]
    663a:	699a      	ldr	r2, [r3, #24]
    663c:	69fb      	ldr	r3, [r7, #28]
    663e:	429a      	cmp	r2, r3
    6640:	dcc7      	bgt.n	65d2 <_ZN7Sensors20detectedLigthBarrierEv+0x1a>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
        }
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
    6642:	687b      	ldr	r3, [r7, #4]
    6644:	6adb      	ldr	r3, [r3, #44]
}
    6646:	4618      	mov	r0, r3
    6648:	f107 0724 	add.w	r7, r7, #36	; 0x24
    664c:	46bd      	mov	sp, r7
    664e:	bd90      	pop	{r4, r7, pc}

00006650 <_ZN7Sensors18getValueUltrasoundEt>:
    return Sensors::sensors;
}



Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
    6650:	b590      	push	{r4, r7, lr}
    6652:	b087      	sub	sp, #28
    6654:	af00      	add	r7, sp, #0
    6656:	6078      	str	r0, [r7, #4]
    6658:	460b      	mov	r3, r1
    665a:	807b      	strh	r3, [r7, #2]
{
    outputSensorVector->reset();
    665c:	687b      	ldr	r3, [r7, #4]
    665e:	6b1b      	ldr	r3, [r3, #48]
    6660:	4618      	mov	r0, r3
    6662:	f016 f879 	bl	1c758 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    6666:	f04f 0300 	mov.w	r3, #0	; 0x0
    666a:	617b      	str	r3, [r7, #20]
    666c:	e030      	b.n	66d0 <_ZN7Sensors18getValueUltrasoundEt+0x80>
    {
        Sensor::OutputSensor v = ultrasounds[i]->getValue();
    666e:	687b      	ldr	r3, [r7, #4]
    6670:	68da      	ldr	r2, [r3, #12]
    6672:	697b      	ldr	r3, [r7, #20]
    6674:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6678:	4413      	add	r3, r2
    667a:	681b      	ldr	r3, [r3, #0]
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6682:	f8d3 c000 	ldr.w	ip, [r3]
    6686:	687b      	ldr	r3, [r7, #4]
    6688:	68da      	ldr	r2, [r3, #12]
    668a:	697b      	ldr	r3, [r7, #20]
    668c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6690:	4413      	add	r3, r2
    6692:	681a      	ldr	r2, [r3, #0]
    6694:	f107 0308 	add.w	r3, r7, #8	; 0x8
    6698:	4618      	mov	r0, r3
    669a:	4611      	mov	r1, r2
    669c:	47e0      	blx	ip
         if (v.f < distance)
    669e:	68fc      	ldr	r4, [r7, #12]
    66a0:	887b      	ldrh	r3, [r7, #2]
    66a2:	4618      	mov	r0, r3
    66a4:	f014 fdb6 	bl	1b214 <__aeabi_i2f>
    66a8:	4603      	mov	r3, r0
    66aa:	4620      	mov	r0, r4
    66ac:	4619      	mov	r1, r3
    66ae:	f014 ffa1 	bl	1b5f4 <__aeabi_fcmplt>
    66b2:	4603      	mov	r3, r0
    66b4:	2b00      	cmp	r3, #0
    66b6:	d007      	beq.n	66c8 <_ZN7Sensors18getValueUltrasoundEt+0x78>
         {
             outputSensorVector->push_back(v);
    66b8:	687b      	ldr	r3, [r7, #4]
    66ba:	6b1b      	ldr	r3, [r3, #48]
    66bc:	f107 0208 	add.w	r2, r7, #8	; 0x8
    66c0:	4618      	mov	r0, r3
    66c2:	4611      	mov	r1, r2
    66c4:	f016 f926 	bl	1c914 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    66c8:	697b      	ldr	r3, [r7, #20]
    66ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
    66ce:	617b      	str	r3, [r7, #20]
    66d0:	687b      	ldr	r3, [r7, #4]
    66d2:	691a      	ldr	r2, [r3, #16]
    66d4:	697b      	ldr	r3, [r7, #20]
    66d6:	429a      	cmp	r2, r3
    66d8:	dcc9      	bgt.n	666e <_ZN7Sensors18getValueUltrasoundEt+0x1e>
         {
             outputSensorVector->push_back(v);
         }
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	6b1b      	ldr	r3, [r3, #48]
}
    66de:	4618      	mov	r0, r3
    66e0:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    66e4:	46bd      	mov	sp, r7
    66e6:	bd90      	pop	{r4, r7, pc}

000066e8 <_ZN7Sensors18getValueUltrasoundEv>:
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
}


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
    66e8:	b590      	push	{r4, r7, lr}
    66ea:	b087      	sub	sp, #28
    66ec:	af00      	add	r7, sp, #0
    66ee:	6078      	str	r0, [r7, #4]
{
    outputSensorVector->reset();
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	6b1b      	ldr	r3, [r3, #48]
    66f4:	4618      	mov	r0, r3
    66f6:	f016 f82f 	bl	1c758 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    66fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    66fe:	617b      	str	r3, [r7, #20]
    6700:	e023      	b.n	674a <_ZN7Sensors18getValueUltrasoundEv+0x62>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    6702:	687b      	ldr	r3, [r7, #4]
    6704:	6b1c      	ldr	r4, [r3, #48]
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	68da      	ldr	r2, [r3, #12]
    670a:	697b      	ldr	r3, [r7, #20]
    670c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6710:	4413      	add	r3, r2
    6712:	681b      	ldr	r3, [r3, #0]
    6714:	681b      	ldr	r3, [r3, #0]
    6716:	f103 0308 	add.w	r3, r3, #8	; 0x8
    671a:	f8d3 c000 	ldr.w	ip, [r3]
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	68da      	ldr	r2, [r3, #12]
    6722:	697b      	ldr	r3, [r7, #20]
    6724:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6728:	4413      	add	r3, r2
    672a:	681a      	ldr	r2, [r3, #0]
    672c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    6730:	4618      	mov	r0, r3
    6732:	4611      	mov	r1, r2
    6734:	47e0      	blx	ip
    6736:	f107 0308 	add.w	r3, r7, #8	; 0x8
    673a:	4620      	mov	r0, r4
    673c:	4619      	mov	r1, r3
    673e:	f016 f8e9 	bl	1c914 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    6742:	697b      	ldr	r3, [r7, #20]
    6744:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6748:	617b      	str	r3, [r7, #20]
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	691a      	ldr	r2, [r3, #16]
    674e:	697b      	ldr	r3, [r7, #20]
    6750:	429a      	cmp	r2, r3
    6752:	dcd6      	bgt.n	6702 <_ZN7Sensors18getValueUltrasoundEv+0x1a>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	6b1b      	ldr	r3, [r3, #48]
}
    6758:	4618      	mov	r0, r3
    675a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    675e:	46bd      	mov	sp, r7
    6760:	bd90      	pop	{r4, r7, pc}
    6762:	46c0      	nop			(mov r8, r8)

00006764 <_ZN7Sensors19detectedLimitSwitchEv>:
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
    6764:	b590      	push	{r4, r7, lr}
    6766:	b089      	sub	sp, #36
    6768:	af00      	add	r7, sp, #0
    676a:	6078      	str	r0, [r7, #4]
{
    limitSwitchNameVector->reset();
    676c:	687b      	ldr	r3, [r7, #4]
    676e:	6a9b      	ldr	r3, [r3, #40]
    6770:	4618      	mov	r0, r3
    6772:	f015 ffe3 	bl	1c73c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>
    for (int i = 0; i<nbLimitSwitch; i++)
    6776:	f04f 0300 	mov.w	r3, #0	; 0x0
    677a:	61fb      	str	r3, [r7, #28]
    677c:	e032      	b.n	67e4 <_ZN7Sensors19detectedLimitSwitchEv+0x80>
    {
        if (limitSwitchs[i]->getValue().b)
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	69da      	ldr	r2, [r3, #28]
    6782:	69fb      	ldr	r3, [r7, #28]
    6784:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6788:	4413      	add	r3, r2
    678a:	681b      	ldr	r3, [r3, #0]
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6792:	f8d3 c000 	ldr.w	ip, [r3]
    6796:	687b      	ldr	r3, [r7, #4]
    6798:	69da      	ldr	r2, [r3, #28]
    679a:	69fb      	ldr	r3, [r7, #28]
    679c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67a0:	4413      	add	r3, r2
    67a2:	681a      	ldr	r2, [r3, #0]
    67a4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    67a8:	4618      	mov	r0, r3
    67aa:	4611      	mov	r1, r2
    67ac:	47e0      	blx	ip
    67ae:	7d3b      	ldrb	r3, [r7, #20]
    67b0:	2b00      	cmp	r3, #0
    67b2:	d013      	beq.n	67dc <_ZN7Sensors19detectedLimitSwitchEv+0x78>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
    67b4:	687b      	ldr	r3, [r7, #4]
    67b6:	6a9c      	ldr	r4, [r3, #40]
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	69da      	ldr	r2, [r3, #28]
    67bc:	69fb      	ldr	r3, [r7, #28]
    67be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67c2:	4413      	add	r3, r2
    67c4:	681b      	ldr	r3, [r3, #0]
    67c6:	4618      	mov	r0, r3
    67c8:	f006 f8d2 	bl	c970 <_ZN17LimitSwitchSensor7getNameEv>
    67cc:	4603      	mov	r3, r0
    67ce:	76fb      	strb	r3, [r7, #27]
    67d0:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    67d4:	4620      	mov	r0, r4
    67d6:	4619      	mov	r1, r3
    67d8:	f016 f920 	bl	1ca1c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
{
    limitSwitchNameVector->reset();
    for (int i = 0; i<nbLimitSwitch; i++)
    67dc:	69fb      	ldr	r3, [r7, #28]
    67de:	f103 0301 	add.w	r3, r3, #1	; 0x1
    67e2:	61fb      	str	r3, [r7, #28]
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	6a1a      	ldr	r2, [r3, #32]
    67e8:	69fb      	ldr	r3, [r7, #28]
    67ea:	429a      	cmp	r2, r3
    67ec:	dcc7      	bgt.n	677e <_ZN7Sensors19detectedLimitSwitchEv+0x1a>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
        }
    }
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	6a9b      	ldr	r3, [r3, #40]
}
    67f2:	4618      	mov	r0, r3
    67f4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    67f8:	46bd      	mov	sp, r7
    67fa:	bd90      	pop	{r4, r7, pc}

000067fc <_ZN7Sensors13detectedSharpEv>:
    #endif
    if (outputSensorVector)
        delete outputSensorVector;
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
    67fc:	b590      	push	{r4, r7, lr}
    67fe:	b089      	sub	sp, #36
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
{
    sharpNameVector->reset();
    6804:	687b      	ldr	r3, [r7, #4]
    6806:	6a5b      	ldr	r3, [r3, #36]
    6808:	4618      	mov	r0, r3
    680a:	f015 ff89 	bl	1c720 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>
    for (int i = 0; i< nbSharp; i++)
    680e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6812:	61fb      	str	r3, [r7, #28]
    6814:	e032      	b.n	687c <_ZN7Sensors13detectedSharpEv+0x80>
    {
       if (sharps[i]->getValue().b)
    6816:	687b      	ldr	r3, [r7, #4]
    6818:	685a      	ldr	r2, [r3, #4]
    681a:	69fb      	ldr	r3, [r7, #28]
    681c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6820:	4413      	add	r3, r2
    6822:	681b      	ldr	r3, [r3, #0]
    6824:	681b      	ldr	r3, [r3, #0]
    6826:	f103 0308 	add.w	r3, r3, #8	; 0x8
    682a:	f8d3 c000 	ldr.w	ip, [r3]
    682e:	687b      	ldr	r3, [r7, #4]
    6830:	685a      	ldr	r2, [r3, #4]
    6832:	69fb      	ldr	r3, [r7, #28]
    6834:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6838:	4413      	add	r3, r2
    683a:	681a      	ldr	r2, [r3, #0]
    683c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6840:	4618      	mov	r0, r3
    6842:	4611      	mov	r1, r2
    6844:	47e0      	blx	ip
    6846:	7d3b      	ldrb	r3, [r7, #20]
    6848:	2b00      	cmp	r3, #0
    684a:	d013      	beq.n	6874 <_ZN7Sensors13detectedSharpEv+0x78>
       {
            sharpNameVector->push_back(sharps[i]->getName());
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	6a5c      	ldr	r4, [r3, #36]
    6850:	687b      	ldr	r3, [r7, #4]
    6852:	685a      	ldr	r2, [r3, #4]
    6854:	69fb      	ldr	r3, [r7, #28]
    6856:	ea4f 0383 	mov.w	r3, r3, lsl #2
    685a:	4413      	add	r3, r2
    685c:	681b      	ldr	r3, [r3, #0]
    685e:	4618      	mov	r0, r3
    6860:	f006 fece 	bl	d600 <_ZN11SharpSensor7getNameEv>
    6864:	4603      	mov	r3, r0
    6866:	76fb      	strb	r3, [r7, #27]
    6868:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    686c:	4620      	mov	r0, r4
    686e:	4619      	mov	r1, r3
    6870:	f016 f930 	bl	1cad4 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
{
    sharpNameVector->reset();
    for (int i = 0; i< nbSharp; i++)
    6874:	69fb      	ldr	r3, [r7, #28]
    6876:	f103 0301 	add.w	r3, r3, #1	; 0x1
    687a:	61fb      	str	r3, [r7, #28]
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	689a      	ldr	r2, [r3, #8]
    6880:	69fb      	ldr	r3, [r7, #28]
    6882:	429a      	cmp	r2, r3
    6884:	dcc7      	bgt.n	6816 <_ZN7Sensors13detectedSharpEv+0x1a>
       {
            sharpNameVector->push_back(sharps[i]->getName());
       }
    }
   // sharpNameVector->resize();
    return sharpNameVector;
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	6a5b      	ldr	r3, [r3, #36]
}
    688a:	4618      	mov	r0, r3
    688c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6890:	46bd      	mov	sp, r7
    6892:	bd90      	pop	{r4, r7, pc}

00006894 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE>:
//    outputSensorVector->resize();
    return outputSensorVector;
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
    6894:	b580      	push	{r7, lr}
    6896:	b08c      	sub	sp, #48
    6898:	af00      	add	r7, sp, #0
    689a:	60f8      	str	r0, [r7, #12]
    689c:	460b      	mov	r3, r1
    689e:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i < nbUltrasound; i++)
    68a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    68a4:	62fb      	str	r3, [r7, #44]
    68a6:	e04a      	b.n	693e <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xaa>
    {
        ultrasounds[i]->getValue();
    68a8:	68fb      	ldr	r3, [r7, #12]
    68aa:	68da      	ldr	r2, [r3, #12]
    68ac:	6afb      	ldr	r3, [r7, #44]
    68ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    68b2:	4413      	add	r3, r2
    68b4:	681b      	ldr	r3, [r3, #0]
    68b6:	681b      	ldr	r3, [r3, #0]
    68b8:	f103 0308 	add.w	r3, r3, #8	; 0x8
    68bc:	f8d3 c000 	ldr.w	ip, [r3]
    68c0:	68fb      	ldr	r3, [r7, #12]
    68c2:	68da      	ldr	r2, [r3, #12]
    68c4:	6afb      	ldr	r3, [r7, #44]
    68c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    68ca:	4413      	add	r3, r2
    68cc:	681a      	ldr	r2, [r3, #0]
    68ce:	f107 0314 	add.w	r3, r7, #20	; 0x14
    68d2:	4618      	mov	r0, r3
    68d4:	4611      	mov	r1, r2
    68d6:	47e0      	blx	ip
         if (ultrasounds[i]->getName() == name)
    68d8:	68fb      	ldr	r3, [r7, #12]
    68da:	68da      	ldr	r2, [r3, #12]
    68dc:	6afb      	ldr	r3, [r7, #44]
    68de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    68e2:	4413      	add	r3, r2
    68e4:	681b      	ldr	r3, [r3, #0]
    68e6:	4618      	mov	r0, r3
    68e8:	f007 faaa 	bl	de40 <_ZN16UltrasoundSensor7getNameEv>
    68ec:	4603      	mov	r3, r0
    68ee:	461a      	mov	r2, r3
    68f0:	7afb      	ldrb	r3, [r7, #11]
    68f2:	4293      	cmp	r3, r2
    68f4:	bf14      	ite	ne
    68f6:	2300      	movne	r3, #0
    68f8:	2301      	moveq	r3, #1
    68fa:	b2db      	uxtb	r3, r3
    68fc:	2b00      	cmp	r3, #0
    68fe:	d01a      	beq.n	6936 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xa2>
         {
             return ultrasounds[i]->getValue().f;
    6900:	68fb      	ldr	r3, [r7, #12]
    6902:	68da      	ldr	r2, [r3, #12]
    6904:	6afb      	ldr	r3, [r7, #44]
    6906:	ea4f 0383 	mov.w	r3, r3, lsl #2
    690a:	4413      	add	r3, r2
    690c:	681b      	ldr	r3, [r3, #0]
    690e:	681b      	ldr	r3, [r3, #0]
    6910:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6914:	f8d3 c000 	ldr.w	ip, [r3]
    6918:	68fb      	ldr	r3, [r7, #12]
    691a:	68da      	ldr	r2, [r3, #12]
    691c:	6afb      	ldr	r3, [r7, #44]
    691e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6922:	4413      	add	r3, r2
    6924:	681a      	ldr	r2, [r3, #0]
    6926:	f107 0320 	add.w	r3, r7, #32	; 0x20
    692a:	4618      	mov	r0, r3
    692c:	4611      	mov	r1, r2
    692e:	47e0      	blx	ip
    6930:	6a7b      	ldr	r3, [r7, #36]
    6932:	607b      	str	r3, [r7, #4]
    6934:	e00a      	b.n	694c <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xb8>
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
{
    for (int i = 0; i < nbUltrasound; i++)
    6936:	6afb      	ldr	r3, [r7, #44]
    6938:	f103 0301 	add.w	r3, r3, #1	; 0x1
    693c:	62fb      	str	r3, [r7, #44]
    693e:	68fb      	ldr	r3, [r7, #12]
    6940:	691a      	ldr	r2, [r3, #16]
    6942:	6afb      	ldr	r3, [r7, #44]
    6944:	429a      	cmp	r2, r3
    6946:	dcaf      	bgt.n	68a8 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0x14>
         if (ultrasounds[i]->getName() == name)
         {
             return ultrasounds[i]->getValue().f;
         }
    }
    return -1;
    6948:	4b03      	ldr	r3, [pc, #12]	(6958 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xc4>)
    694a:	607b      	str	r3, [r7, #4]
    694c:	687b      	ldr	r3, [r7, #4]
}
    694e:	4618      	mov	r0, r3
    6950:	f107 0730 	add.w	r7, r7, #48	; 0x30
    6954:	46bd      	mov	sp, r7
    6956:	bd80      	pop	{r7, pc}
    6958:	bf800000 	.word	0xbf800000

0000695c <_ZN7SensorsD0Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    695c:	b580      	push	{r7, lr}
    695e:	b086      	sub	sp, #24
    6960:	af00      	add	r7, sp, #0
    6962:	6078      	str	r0, [r7, #4]
    6964:	687b      	ldr	r3, [r7, #4]
    6966:	4a92      	ldr	r2, [pc, #584]	(6bb0 <_ZN7SensorsD0Ev+0x254>)
    6968:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    696a:	f04f 0300 	mov.w	r3, #0	; 0x0
    696e:	60bb      	str	r3, [r7, #8]
    6970:	e020      	b.n	69b4 <_ZN7SensorsD0Ev+0x58>
        delete sharps[i];
    6972:	687b      	ldr	r3, [r7, #4]
    6974:	685a      	ldr	r2, [r3, #4]
    6976:	68bb      	ldr	r3, [r7, #8]
    6978:	ea4f 0383 	mov.w	r3, r3, lsl #2
    697c:	4413      	add	r3, r2
    697e:	681b      	ldr	r3, [r3, #0]
    6980:	2b00      	cmp	r3, #0
    6982:	d013      	beq.n	69ac <_ZN7SensorsD0Ev+0x50>
    6984:	687b      	ldr	r3, [r7, #4]
    6986:	685a      	ldr	r2, [r3, #4]
    6988:	68bb      	ldr	r3, [r7, #8]
    698a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    698e:	4413      	add	r3, r2
    6990:	681b      	ldr	r3, [r3, #0]
    6992:	681b      	ldr	r3, [r3, #0]
    6994:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6998:	6819      	ldr	r1, [r3, #0]
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	685a      	ldr	r2, [r3, #4]
    699e:	68bb      	ldr	r3, [r7, #8]
    69a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69a4:	4413      	add	r3, r2
    69a6:	681b      	ldr	r3, [r3, #0]
    69a8:	4618      	mov	r0, r3
    69aa:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    69ac:	68bb      	ldr	r3, [r7, #8]
    69ae:	f103 0301 	add.w	r3, r3, #1	; 0x1
    69b2:	60bb      	str	r3, [r7, #8]
    69b4:	687b      	ldr	r3, [r7, #4]
    69b6:	689a      	ldr	r2, [r3, #8]
    69b8:	68bb      	ldr	r3, [r7, #8]
    69ba:	429a      	cmp	r2, r3
    69bc:	dcd9      	bgt.n	6972 <_ZN7SensorsD0Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    69be:	f04f 0300 	mov.w	r3, #0	; 0x0
    69c2:	60fb      	str	r3, [r7, #12]
    69c4:	e020      	b.n	6a08 <_ZN7SensorsD0Ev+0xac>
        delete ultrasounds[i];
    69c6:	687b      	ldr	r3, [r7, #4]
    69c8:	68da      	ldr	r2, [r3, #12]
    69ca:	68fb      	ldr	r3, [r7, #12]
    69cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69d0:	4413      	add	r3, r2
    69d2:	681b      	ldr	r3, [r3, #0]
    69d4:	2b00      	cmp	r3, #0
    69d6:	d013      	beq.n	6a00 <_ZN7SensorsD0Ev+0xa4>
    69d8:	687b      	ldr	r3, [r7, #4]
    69da:	68da      	ldr	r2, [r3, #12]
    69dc:	68fb      	ldr	r3, [r7, #12]
    69de:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69e2:	4413      	add	r3, r2
    69e4:	681b      	ldr	r3, [r3, #0]
    69e6:	681b      	ldr	r3, [r3, #0]
    69e8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    69ec:	6819      	ldr	r1, [r3, #0]
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	68da      	ldr	r2, [r3, #12]
    69f2:	68fb      	ldr	r3, [r7, #12]
    69f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    69f8:	4413      	add	r3, r2
    69fa:	681b      	ldr	r3, [r3, #0]
    69fc:	4618      	mov	r0, r3
    69fe:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6a00:	68fb      	ldr	r3, [r7, #12]
    6a02:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6a06:	60fb      	str	r3, [r7, #12]
    6a08:	687b      	ldr	r3, [r7, #4]
    6a0a:	691a      	ldr	r2, [r3, #16]
    6a0c:	68fb      	ldr	r3, [r7, #12]
    6a0e:	429a      	cmp	r2, r3
    6a10:	dcd9      	bgt.n	69c6 <_ZN7SensorsD0Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6a12:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a16:	613b      	str	r3, [r7, #16]
    6a18:	e020      	b.n	6a5c <_ZN7SensorsD0Ev+0x100>
        delete limitSwitchs[i];
    6a1a:	687b      	ldr	r3, [r7, #4]
    6a1c:	69da      	ldr	r2, [r3, #28]
    6a1e:	693b      	ldr	r3, [r7, #16]
    6a20:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a24:	4413      	add	r3, r2
    6a26:	681b      	ldr	r3, [r3, #0]
    6a28:	2b00      	cmp	r3, #0
    6a2a:	d013      	beq.n	6a54 <_ZN7SensorsD0Ev+0xf8>
    6a2c:	687b      	ldr	r3, [r7, #4]
    6a2e:	69da      	ldr	r2, [r3, #28]
    6a30:	693b      	ldr	r3, [r7, #16]
    6a32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a36:	4413      	add	r3, r2
    6a38:	681b      	ldr	r3, [r3, #0]
    6a3a:	681b      	ldr	r3, [r3, #0]
    6a3c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a40:	6819      	ldr	r1, [r3, #0]
    6a42:	687b      	ldr	r3, [r7, #4]
    6a44:	69da      	ldr	r2, [r3, #28]
    6a46:	693b      	ldr	r3, [r7, #16]
    6a48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a4c:	4413      	add	r3, r2
    6a4e:	681b      	ldr	r3, [r3, #0]
    6a50:	4618      	mov	r0, r3
    6a52:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6a54:	693b      	ldr	r3, [r7, #16]
    6a56:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6a5a:	613b      	str	r3, [r7, #16]
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	6a1a      	ldr	r2, [r3, #32]
    6a60:	693b      	ldr	r3, [r7, #16]
    6a62:	429a      	cmp	r2, r3
    6a64:	dcd9      	bgt.n	6a1a <_ZN7SensorsD0Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6a66:	f04f 0300 	mov.w	r3, #0	; 0x0
    6a6a:	617b      	str	r3, [r7, #20]
    6a6c:	e020      	b.n	6ab0 <_ZN7SensorsD0Ev+0x154>
        delete ligthBarriers[i];
    6a6e:	687b      	ldr	r3, [r7, #4]
    6a70:	695a      	ldr	r2, [r3, #20]
    6a72:	697b      	ldr	r3, [r7, #20]
    6a74:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a78:	4413      	add	r3, r2
    6a7a:	681b      	ldr	r3, [r3, #0]
    6a7c:	2b00      	cmp	r3, #0
    6a7e:	d013      	beq.n	6aa8 <_ZN7SensorsD0Ev+0x14c>
    6a80:	687b      	ldr	r3, [r7, #4]
    6a82:	695a      	ldr	r2, [r3, #20]
    6a84:	697b      	ldr	r3, [r7, #20]
    6a86:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a8a:	4413      	add	r3, r2
    6a8c:	681b      	ldr	r3, [r3, #0]
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6a94:	6819      	ldr	r1, [r3, #0]
    6a96:	687b      	ldr	r3, [r7, #4]
    6a98:	695a      	ldr	r2, [r3, #20]
    6a9a:	697b      	ldr	r3, [r7, #20]
    6a9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6aa0:	4413      	add	r3, r2
    6aa2:	681b      	ldr	r3, [r3, #0]
    6aa4:	4618      	mov	r0, r3
    6aa6:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6aa8:	697b      	ldr	r3, [r7, #20]
    6aaa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6aae:	617b      	str	r3, [r7, #20]
    6ab0:	687b      	ldr	r3, [r7, #4]
    6ab2:	699a      	ldr	r2, [r3, #24]
    6ab4:	697b      	ldr	r3, [r7, #20]
    6ab6:	429a      	cmp	r2, r3
    6ab8:	dcd9      	bgt.n	6a6e <_ZN7SensorsD0Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	685b      	ldr	r3, [r3, #4]
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d004      	beq.n	6acc <_ZN7SensorsD0Ev+0x170>
    6ac2:	687b      	ldr	r3, [r7, #4]
    6ac4:	685b      	ldr	r3, [r3, #4]
    6ac6:	4618      	mov	r0, r3
    6ac8:	f008 f930 	bl	ed2c <_ZdaPv>
    delete[] ultrasounds;
    6acc:	687b      	ldr	r3, [r7, #4]
    6ace:	68db      	ldr	r3, [r3, #12]
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d004      	beq.n	6ade <_ZN7SensorsD0Ev+0x182>
    6ad4:	687b      	ldr	r3, [r7, #4]
    6ad6:	68db      	ldr	r3, [r3, #12]
    6ad8:	4618      	mov	r0, r3
    6ada:	f008 f927 	bl	ed2c <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6ade:	687b      	ldr	r3, [r7, #4]
    6ae0:	69db      	ldr	r3, [r3, #28]
    6ae2:	2b00      	cmp	r3, #0
    6ae4:	d004      	beq.n	6af0 <_ZN7SensorsD0Ev+0x194>
    6ae6:	687b      	ldr	r3, [r7, #4]
    6ae8:	69db      	ldr	r3, [r3, #28]
    6aea:	4618      	mov	r0, r3
    6aec:	f008 f91e 	bl	ed2c <_ZdaPv>
    delete[] ligthBarriers;
    6af0:	687b      	ldr	r3, [r7, #4]
    6af2:	695b      	ldr	r3, [r3, #20]
    6af4:	2b00      	cmp	r3, #0
    6af6:	d004      	beq.n	6b02 <_ZN7SensorsD0Ev+0x1a6>
    6af8:	687b      	ldr	r3, [r7, #4]
    6afa:	695b      	ldr	r3, [r3, #20]
    6afc:	4618      	mov	r0, r3
    6afe:	f008 f915 	bl	ed2c <_ZdaPv>
    #endif

    if (sharpNameVector)
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	6a5b      	ldr	r3, [r3, #36]
    6b06:	2b00      	cmp	r3, #0
    6b08:	d00d      	beq.n	6b26 <_ZN7SensorsD0Ev+0x1ca>
        delete sharpNameVector;
    6b0a:	687b      	ldr	r3, [r7, #4]
    6b0c:	6a5b      	ldr	r3, [r3, #36]
    6b0e:	2b00      	cmp	r3, #0
    6b10:	d009      	beq.n	6b26 <_ZN7SensorsD0Ev+0x1ca>
    6b12:	687b      	ldr	r3, [r7, #4]
    6b14:	6a5b      	ldr	r3, [r3, #36]
    6b16:	681b      	ldr	r3, [r3, #0]
    6b18:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6b1c:	681a      	ldr	r2, [r3, #0]
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	6a5b      	ldr	r3, [r3, #36]
    6b22:	4618      	mov	r0, r3
    6b24:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6b26:	687b      	ldr	r3, [r7, #4]
    6b28:	6adb      	ldr	r3, [r3, #44]
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d00d      	beq.n	6b4a <_ZN7SensorsD0Ev+0x1ee>
        delete ligthBarrierNameVector;
    6b2e:	687b      	ldr	r3, [r7, #4]
    6b30:	6adb      	ldr	r3, [r3, #44]
    6b32:	2b00      	cmp	r3, #0
    6b34:	d009      	beq.n	6b4a <_ZN7SensorsD0Ev+0x1ee>
    6b36:	687b      	ldr	r3, [r7, #4]
    6b38:	6adb      	ldr	r3, [r3, #44]
    6b3a:	681b      	ldr	r3, [r3, #0]
    6b3c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6b40:	681a      	ldr	r2, [r3, #0]
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	6adb      	ldr	r3, [r3, #44]
    6b46:	4618      	mov	r0, r3
    6b48:	4790      	blx	r2
    if (limitSwitchNameVector)
    6b4a:	687b      	ldr	r3, [r7, #4]
    6b4c:	6a9b      	ldr	r3, [r3, #40]
    6b4e:	2b00      	cmp	r3, #0
    6b50:	d00d      	beq.n	6b6e <_ZN7SensorsD0Ev+0x212>
        delete limitSwitchNameVector;
    6b52:	687b      	ldr	r3, [r7, #4]
    6b54:	6a9b      	ldr	r3, [r3, #40]
    6b56:	2b00      	cmp	r3, #0
    6b58:	d009      	beq.n	6b6e <_ZN7SensorsD0Ev+0x212>
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	6a9b      	ldr	r3, [r3, #40]
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6b64:	681a      	ldr	r2, [r3, #0]
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	6a9b      	ldr	r3, [r3, #40]
    6b6a:	4618      	mov	r0, r3
    6b6c:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6b6e:	687b      	ldr	r3, [r7, #4]
    6b70:	6b1b      	ldr	r3, [r3, #48]
    6b72:	2b00      	cmp	r3, #0
    6b74:	d00d      	beq.n	6b92 <_ZN7SensorsD0Ev+0x236>
        delete outputSensorVector;
    6b76:	687b      	ldr	r3, [r7, #4]
    6b78:	6b1b      	ldr	r3, [r3, #48]
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d009      	beq.n	6b92 <_ZN7SensorsD0Ev+0x236>
    6b7e:	687b      	ldr	r3, [r7, #4]
    6b80:	6b1b      	ldr	r3, [r3, #48]
    6b82:	681b      	ldr	r3, [r3, #0]
    6b84:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6b88:	681a      	ldr	r2, [r3, #0]
    6b8a:	687b      	ldr	r3, [r7, #4]
    6b8c:	6b1b      	ldr	r3, [r3, #48]
    6b8e:	4618      	mov	r0, r3
    6b90:	4790      	blx	r2
}
    6b92:	f04f 0301 	mov.w	r3, #1	; 0x1
    6b96:	b2db      	uxtb	r3, r3
    6b98:	2b00      	cmp	r3, #0
    6b9a:	d002      	beq.n	6ba2 <_ZN7SensorsD0Ev+0x246>
    6b9c:	6878      	ldr	r0, [r7, #4]
    6b9e:	f008 f84d 	bl	ec3c <_ZdlPv>
    6ba2:	687b      	ldr	r3, [r7, #4]
    6ba4:	4618      	mov	r0, r3
    6ba6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6baa:	46bd      	mov	sp, r7
    6bac:	bd80      	pop	{r7, pc}
    6bae:	46c0      	nop			(mov r8, r8)
    6bb0:	000220f8 	.word	0x000220f8

00006bb4 <_ZN7SensorsD1Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6bb4:	b580      	push	{r7, lr}
    6bb6:	b086      	sub	sp, #24
    6bb8:	af00      	add	r7, sp, #0
    6bba:	6078      	str	r0, [r7, #4]
    6bbc:	687b      	ldr	r3, [r7, #4]
    6bbe:	4a92      	ldr	r2, [pc, #584]	(6e08 <_ZN7SensorsD1Ev+0x254>)
    6bc0:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    6bc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    6bc6:	60bb      	str	r3, [r7, #8]
    6bc8:	e020      	b.n	6c0c <_ZN7SensorsD1Ev+0x58>
        delete sharps[i];
    6bca:	687b      	ldr	r3, [r7, #4]
    6bcc:	685a      	ldr	r2, [r3, #4]
    6bce:	68bb      	ldr	r3, [r7, #8]
    6bd0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6bd4:	4413      	add	r3, r2
    6bd6:	681b      	ldr	r3, [r3, #0]
    6bd8:	2b00      	cmp	r3, #0
    6bda:	d013      	beq.n	6c04 <_ZN7SensorsD1Ev+0x50>
    6bdc:	687b      	ldr	r3, [r7, #4]
    6bde:	685a      	ldr	r2, [r3, #4]
    6be0:	68bb      	ldr	r3, [r7, #8]
    6be2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6be6:	4413      	add	r3, r2
    6be8:	681b      	ldr	r3, [r3, #0]
    6bea:	681b      	ldr	r3, [r3, #0]
    6bec:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6bf0:	6819      	ldr	r1, [r3, #0]
    6bf2:	687b      	ldr	r3, [r7, #4]
    6bf4:	685a      	ldr	r2, [r3, #4]
    6bf6:	68bb      	ldr	r3, [r7, #8]
    6bf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6bfc:	4413      	add	r3, r2
    6bfe:	681b      	ldr	r3, [r3, #0]
    6c00:	4618      	mov	r0, r3
    6c02:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    6c04:	68bb      	ldr	r3, [r7, #8]
    6c06:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6c0a:	60bb      	str	r3, [r7, #8]
    6c0c:	687b      	ldr	r3, [r7, #4]
    6c0e:	689a      	ldr	r2, [r3, #8]
    6c10:	68bb      	ldr	r3, [r7, #8]
    6c12:	429a      	cmp	r2, r3
    6c14:	dcd9      	bgt.n	6bca <_ZN7SensorsD1Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6c16:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c1a:	60fb      	str	r3, [r7, #12]
    6c1c:	e020      	b.n	6c60 <_ZN7SensorsD1Ev+0xac>
        delete ultrasounds[i];
    6c1e:	687b      	ldr	r3, [r7, #4]
    6c20:	68da      	ldr	r2, [r3, #12]
    6c22:	68fb      	ldr	r3, [r7, #12]
    6c24:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c28:	4413      	add	r3, r2
    6c2a:	681b      	ldr	r3, [r3, #0]
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d013      	beq.n	6c58 <_ZN7SensorsD1Ev+0xa4>
    6c30:	687b      	ldr	r3, [r7, #4]
    6c32:	68da      	ldr	r2, [r3, #12]
    6c34:	68fb      	ldr	r3, [r7, #12]
    6c36:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c3a:	4413      	add	r3, r2
    6c3c:	681b      	ldr	r3, [r3, #0]
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6c44:	6819      	ldr	r1, [r3, #0]
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	68da      	ldr	r2, [r3, #12]
    6c4a:	68fb      	ldr	r3, [r7, #12]
    6c4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c50:	4413      	add	r3, r2
    6c52:	681b      	ldr	r3, [r3, #0]
    6c54:	4618      	mov	r0, r3
    6c56:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6c58:	68fb      	ldr	r3, [r7, #12]
    6c5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6c5e:	60fb      	str	r3, [r7, #12]
    6c60:	687b      	ldr	r3, [r7, #4]
    6c62:	691a      	ldr	r2, [r3, #16]
    6c64:	68fb      	ldr	r3, [r7, #12]
    6c66:	429a      	cmp	r2, r3
    6c68:	dcd9      	bgt.n	6c1e <_ZN7SensorsD1Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6c6a:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c6e:	613b      	str	r3, [r7, #16]
    6c70:	e020      	b.n	6cb4 <_ZN7SensorsD1Ev+0x100>
        delete limitSwitchs[i];
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	69da      	ldr	r2, [r3, #28]
    6c76:	693b      	ldr	r3, [r7, #16]
    6c78:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c7c:	4413      	add	r3, r2
    6c7e:	681b      	ldr	r3, [r3, #0]
    6c80:	2b00      	cmp	r3, #0
    6c82:	d013      	beq.n	6cac <_ZN7SensorsD1Ev+0xf8>
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	69da      	ldr	r2, [r3, #28]
    6c88:	693b      	ldr	r3, [r7, #16]
    6c8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c8e:	4413      	add	r3, r2
    6c90:	681b      	ldr	r3, [r3, #0]
    6c92:	681b      	ldr	r3, [r3, #0]
    6c94:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6c98:	6819      	ldr	r1, [r3, #0]
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	69da      	ldr	r2, [r3, #28]
    6c9e:	693b      	ldr	r3, [r7, #16]
    6ca0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ca4:	4413      	add	r3, r2
    6ca6:	681b      	ldr	r3, [r3, #0]
    6ca8:	4618      	mov	r0, r3
    6caa:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6cac:	693b      	ldr	r3, [r7, #16]
    6cae:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6cb2:	613b      	str	r3, [r7, #16]
    6cb4:	687b      	ldr	r3, [r7, #4]
    6cb6:	6a1a      	ldr	r2, [r3, #32]
    6cb8:	693b      	ldr	r3, [r7, #16]
    6cba:	429a      	cmp	r2, r3
    6cbc:	dcd9      	bgt.n	6c72 <_ZN7SensorsD1Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6cbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    6cc2:	617b      	str	r3, [r7, #20]
    6cc4:	e020      	b.n	6d08 <_ZN7SensorsD1Ev+0x154>
        delete ligthBarriers[i];
    6cc6:	687b      	ldr	r3, [r7, #4]
    6cc8:	695a      	ldr	r2, [r3, #20]
    6cca:	697b      	ldr	r3, [r7, #20]
    6ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6cd0:	4413      	add	r3, r2
    6cd2:	681b      	ldr	r3, [r3, #0]
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d013      	beq.n	6d00 <_ZN7SensorsD1Ev+0x14c>
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	695a      	ldr	r2, [r3, #20]
    6cdc:	697b      	ldr	r3, [r7, #20]
    6cde:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ce2:	4413      	add	r3, r2
    6ce4:	681b      	ldr	r3, [r3, #0]
    6ce6:	681b      	ldr	r3, [r3, #0]
    6ce8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6cec:	6819      	ldr	r1, [r3, #0]
    6cee:	687b      	ldr	r3, [r7, #4]
    6cf0:	695a      	ldr	r2, [r3, #20]
    6cf2:	697b      	ldr	r3, [r7, #20]
    6cf4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6cf8:	4413      	add	r3, r2
    6cfa:	681b      	ldr	r3, [r3, #0]
    6cfc:	4618      	mov	r0, r3
    6cfe:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6d00:	697b      	ldr	r3, [r7, #20]
    6d02:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6d06:	617b      	str	r3, [r7, #20]
    6d08:	687b      	ldr	r3, [r7, #4]
    6d0a:	699a      	ldr	r2, [r3, #24]
    6d0c:	697b      	ldr	r3, [r7, #20]
    6d0e:	429a      	cmp	r2, r3
    6d10:	dcd9      	bgt.n	6cc6 <_ZN7SensorsD1Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6d12:	687b      	ldr	r3, [r7, #4]
    6d14:	685b      	ldr	r3, [r3, #4]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d004      	beq.n	6d24 <_ZN7SensorsD1Ev+0x170>
    6d1a:	687b      	ldr	r3, [r7, #4]
    6d1c:	685b      	ldr	r3, [r3, #4]
    6d1e:	4618      	mov	r0, r3
    6d20:	f008 f804 	bl	ed2c <_ZdaPv>
    delete[] ultrasounds;
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	68db      	ldr	r3, [r3, #12]
    6d28:	2b00      	cmp	r3, #0
    6d2a:	d004      	beq.n	6d36 <_ZN7SensorsD1Ev+0x182>
    6d2c:	687b      	ldr	r3, [r7, #4]
    6d2e:	68db      	ldr	r3, [r3, #12]
    6d30:	4618      	mov	r0, r3
    6d32:	f007 fffb 	bl	ed2c <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6d36:	687b      	ldr	r3, [r7, #4]
    6d38:	69db      	ldr	r3, [r3, #28]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d004      	beq.n	6d48 <_ZN7SensorsD1Ev+0x194>
    6d3e:	687b      	ldr	r3, [r7, #4]
    6d40:	69db      	ldr	r3, [r3, #28]
    6d42:	4618      	mov	r0, r3
    6d44:	f007 fff2 	bl	ed2c <_ZdaPv>
    delete[] ligthBarriers;
    6d48:	687b      	ldr	r3, [r7, #4]
    6d4a:	695b      	ldr	r3, [r3, #20]
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	d004      	beq.n	6d5a <_ZN7SensorsD1Ev+0x1a6>
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	695b      	ldr	r3, [r3, #20]
    6d54:	4618      	mov	r0, r3
    6d56:	f007 ffe9 	bl	ed2c <_ZdaPv>
    #endif

    if (sharpNameVector)
    6d5a:	687b      	ldr	r3, [r7, #4]
    6d5c:	6a5b      	ldr	r3, [r3, #36]
    6d5e:	2b00      	cmp	r3, #0
    6d60:	d00d      	beq.n	6d7e <_ZN7SensorsD1Ev+0x1ca>
        delete sharpNameVector;
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	6a5b      	ldr	r3, [r3, #36]
    6d66:	2b00      	cmp	r3, #0
    6d68:	d009      	beq.n	6d7e <_ZN7SensorsD1Ev+0x1ca>
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	6a5b      	ldr	r3, [r3, #36]
    6d6e:	681b      	ldr	r3, [r3, #0]
    6d70:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6d74:	681a      	ldr	r2, [r3, #0]
    6d76:	687b      	ldr	r3, [r7, #4]
    6d78:	6a5b      	ldr	r3, [r3, #36]
    6d7a:	4618      	mov	r0, r3
    6d7c:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6d7e:	687b      	ldr	r3, [r7, #4]
    6d80:	6adb      	ldr	r3, [r3, #44]
    6d82:	2b00      	cmp	r3, #0
    6d84:	d00d      	beq.n	6da2 <_ZN7SensorsD1Ev+0x1ee>
        delete ligthBarrierNameVector;
    6d86:	687b      	ldr	r3, [r7, #4]
    6d88:	6adb      	ldr	r3, [r3, #44]
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d009      	beq.n	6da2 <_ZN7SensorsD1Ev+0x1ee>
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	6adb      	ldr	r3, [r3, #44]
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6d98:	681a      	ldr	r2, [r3, #0]
    6d9a:	687b      	ldr	r3, [r7, #4]
    6d9c:	6adb      	ldr	r3, [r3, #44]
    6d9e:	4618      	mov	r0, r3
    6da0:	4790      	blx	r2
    if (limitSwitchNameVector)
    6da2:	687b      	ldr	r3, [r7, #4]
    6da4:	6a9b      	ldr	r3, [r3, #40]
    6da6:	2b00      	cmp	r3, #0
    6da8:	d00d      	beq.n	6dc6 <_ZN7SensorsD1Ev+0x212>
        delete limitSwitchNameVector;
    6daa:	687b      	ldr	r3, [r7, #4]
    6dac:	6a9b      	ldr	r3, [r3, #40]
    6dae:	2b00      	cmp	r3, #0
    6db0:	d009      	beq.n	6dc6 <_ZN7SensorsD1Ev+0x212>
    6db2:	687b      	ldr	r3, [r7, #4]
    6db4:	6a9b      	ldr	r3, [r3, #40]
    6db6:	681b      	ldr	r3, [r3, #0]
    6db8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6dbc:	681a      	ldr	r2, [r3, #0]
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	6a9b      	ldr	r3, [r3, #40]
    6dc2:	4618      	mov	r0, r3
    6dc4:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6dc6:	687b      	ldr	r3, [r7, #4]
    6dc8:	6b1b      	ldr	r3, [r3, #48]
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d00d      	beq.n	6dea <_ZN7SensorsD1Ev+0x236>
        delete outputSensorVector;
    6dce:	687b      	ldr	r3, [r7, #4]
    6dd0:	6b1b      	ldr	r3, [r3, #48]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d009      	beq.n	6dea <_ZN7SensorsD1Ev+0x236>
    6dd6:	687b      	ldr	r3, [r7, #4]
    6dd8:	6b1b      	ldr	r3, [r3, #48]
    6dda:	681b      	ldr	r3, [r3, #0]
    6ddc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6de0:	681a      	ldr	r2, [r3, #0]
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	6b1b      	ldr	r3, [r3, #48]
    6de6:	4618      	mov	r0, r3
    6de8:	4790      	blx	r2
}
    6dea:	f04f 0300 	mov.w	r3, #0	; 0x0
    6dee:	b2db      	uxtb	r3, r3
    6df0:	2b00      	cmp	r3, #0
    6df2:	d002      	beq.n	6dfa <_ZN7SensorsD1Ev+0x246>
    6df4:	6878      	ldr	r0, [r7, #4]
    6df6:	f007 ff21 	bl	ec3c <_ZdlPv>
    6dfa:	687b      	ldr	r3, [r7, #4]
    6dfc:	4618      	mov	r0, r3
    6dfe:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6e02:	46bd      	mov	sp, r7
    6e04:	bd80      	pop	{r7, pc}
    6e06:	46c0      	nop			(mov r8, r8)
    6e08:	000220f8 	.word	0x000220f8

00006e0c <_ZN7SensorsD2Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6e0c:	b580      	push	{r7, lr}
    6e0e:	b086      	sub	sp, #24
    6e10:	af00      	add	r7, sp, #0
    6e12:	6078      	str	r0, [r7, #4]
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	4a92      	ldr	r2, [pc, #584]	(7060 <_ZN7SensorsD2Ev+0x254>)
    6e18:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    6e1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    6e1e:	60bb      	str	r3, [r7, #8]
    6e20:	e020      	b.n	6e64 <_ZN7SensorsD2Ev+0x58>
        delete sharps[i];
    6e22:	687b      	ldr	r3, [r7, #4]
    6e24:	685a      	ldr	r2, [r3, #4]
    6e26:	68bb      	ldr	r3, [r7, #8]
    6e28:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e2c:	4413      	add	r3, r2
    6e2e:	681b      	ldr	r3, [r3, #0]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d013      	beq.n	6e5c <_ZN7SensorsD2Ev+0x50>
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	685a      	ldr	r2, [r3, #4]
    6e38:	68bb      	ldr	r3, [r7, #8]
    6e3a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e3e:	4413      	add	r3, r2
    6e40:	681b      	ldr	r3, [r3, #0]
    6e42:	681b      	ldr	r3, [r3, #0]
    6e44:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6e48:	6819      	ldr	r1, [r3, #0]
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	685a      	ldr	r2, [r3, #4]
    6e4e:	68bb      	ldr	r3, [r7, #8]
    6e50:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e54:	4413      	add	r3, r2
    6e56:	681b      	ldr	r3, [r3, #0]
    6e58:	4618      	mov	r0, r3
    6e5a:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    6e5c:	68bb      	ldr	r3, [r7, #8]
    6e5e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6e62:	60bb      	str	r3, [r7, #8]
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	689a      	ldr	r2, [r3, #8]
    6e68:	68bb      	ldr	r3, [r7, #8]
    6e6a:	429a      	cmp	r2, r3
    6e6c:	dcd9      	bgt.n	6e22 <_ZN7SensorsD2Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6e6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6e72:	60fb      	str	r3, [r7, #12]
    6e74:	e020      	b.n	6eb8 <_ZN7SensorsD2Ev+0xac>
        delete ultrasounds[i];
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	68da      	ldr	r2, [r3, #12]
    6e7a:	68fb      	ldr	r3, [r7, #12]
    6e7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e80:	4413      	add	r3, r2
    6e82:	681b      	ldr	r3, [r3, #0]
    6e84:	2b00      	cmp	r3, #0
    6e86:	d013      	beq.n	6eb0 <_ZN7SensorsD2Ev+0xa4>
    6e88:	687b      	ldr	r3, [r7, #4]
    6e8a:	68da      	ldr	r2, [r3, #12]
    6e8c:	68fb      	ldr	r3, [r7, #12]
    6e8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e92:	4413      	add	r3, r2
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	681b      	ldr	r3, [r3, #0]
    6e98:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6e9c:	6819      	ldr	r1, [r3, #0]
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	68da      	ldr	r2, [r3, #12]
    6ea2:	68fb      	ldr	r3, [r7, #12]
    6ea4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ea8:	4413      	add	r3, r2
    6eaa:	681b      	ldr	r3, [r3, #0]
    6eac:	4618      	mov	r0, r3
    6eae:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6eb0:	68fb      	ldr	r3, [r7, #12]
    6eb2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6eb6:	60fb      	str	r3, [r7, #12]
    6eb8:	687b      	ldr	r3, [r7, #4]
    6eba:	691a      	ldr	r2, [r3, #16]
    6ebc:	68fb      	ldr	r3, [r7, #12]
    6ebe:	429a      	cmp	r2, r3
    6ec0:	dcd9      	bgt.n	6e76 <_ZN7SensorsD2Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6ec2:	f04f 0300 	mov.w	r3, #0	; 0x0
    6ec6:	613b      	str	r3, [r7, #16]
    6ec8:	e020      	b.n	6f0c <_ZN7SensorsD2Ev+0x100>
        delete limitSwitchs[i];
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	69da      	ldr	r2, [r3, #28]
    6ece:	693b      	ldr	r3, [r7, #16]
    6ed0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ed4:	4413      	add	r3, r2
    6ed6:	681b      	ldr	r3, [r3, #0]
    6ed8:	2b00      	cmp	r3, #0
    6eda:	d013      	beq.n	6f04 <_ZN7SensorsD2Ev+0xf8>
    6edc:	687b      	ldr	r3, [r7, #4]
    6ede:	69da      	ldr	r2, [r3, #28]
    6ee0:	693b      	ldr	r3, [r7, #16]
    6ee2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ee6:	4413      	add	r3, r2
    6ee8:	681b      	ldr	r3, [r3, #0]
    6eea:	681b      	ldr	r3, [r3, #0]
    6eec:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6ef0:	6819      	ldr	r1, [r3, #0]
    6ef2:	687b      	ldr	r3, [r7, #4]
    6ef4:	69da      	ldr	r2, [r3, #28]
    6ef6:	693b      	ldr	r3, [r7, #16]
    6ef8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6efc:	4413      	add	r3, r2
    6efe:	681b      	ldr	r3, [r3, #0]
    6f00:	4618      	mov	r0, r3
    6f02:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6f04:	693b      	ldr	r3, [r7, #16]
    6f06:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6f0a:	613b      	str	r3, [r7, #16]
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	6a1a      	ldr	r2, [r3, #32]
    6f10:	693b      	ldr	r3, [r7, #16]
    6f12:	429a      	cmp	r2, r3
    6f14:	dcd9      	bgt.n	6eca <_ZN7SensorsD2Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6f16:	f04f 0300 	mov.w	r3, #0	; 0x0
    6f1a:	617b      	str	r3, [r7, #20]
    6f1c:	e020      	b.n	6f60 <_ZN7SensorsD2Ev+0x154>
        delete ligthBarriers[i];
    6f1e:	687b      	ldr	r3, [r7, #4]
    6f20:	695a      	ldr	r2, [r3, #20]
    6f22:	697b      	ldr	r3, [r7, #20]
    6f24:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6f28:	4413      	add	r3, r2
    6f2a:	681b      	ldr	r3, [r3, #0]
    6f2c:	2b00      	cmp	r3, #0
    6f2e:	d013      	beq.n	6f58 <_ZN7SensorsD2Ev+0x14c>
    6f30:	687b      	ldr	r3, [r7, #4]
    6f32:	695a      	ldr	r2, [r3, #20]
    6f34:	697b      	ldr	r3, [r7, #20]
    6f36:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6f3a:	4413      	add	r3, r2
    6f3c:	681b      	ldr	r3, [r3, #0]
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6f44:	6819      	ldr	r1, [r3, #0]
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	695a      	ldr	r2, [r3, #20]
    6f4a:	697b      	ldr	r3, [r7, #20]
    6f4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6f50:	4413      	add	r3, r2
    6f52:	681b      	ldr	r3, [r3, #0]
    6f54:	4618      	mov	r0, r3
    6f56:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6f58:	697b      	ldr	r3, [r7, #20]
    6f5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6f5e:	617b      	str	r3, [r7, #20]
    6f60:	687b      	ldr	r3, [r7, #4]
    6f62:	699a      	ldr	r2, [r3, #24]
    6f64:	697b      	ldr	r3, [r7, #20]
    6f66:	429a      	cmp	r2, r3
    6f68:	dcd9      	bgt.n	6f1e <_ZN7SensorsD2Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	685b      	ldr	r3, [r3, #4]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d004      	beq.n	6f7c <_ZN7SensorsD2Ev+0x170>
    6f72:	687b      	ldr	r3, [r7, #4]
    6f74:	685b      	ldr	r3, [r3, #4]
    6f76:	4618      	mov	r0, r3
    6f78:	f007 fed8 	bl	ed2c <_ZdaPv>
    delete[] ultrasounds;
    6f7c:	687b      	ldr	r3, [r7, #4]
    6f7e:	68db      	ldr	r3, [r3, #12]
    6f80:	2b00      	cmp	r3, #0
    6f82:	d004      	beq.n	6f8e <_ZN7SensorsD2Ev+0x182>
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	68db      	ldr	r3, [r3, #12]
    6f88:	4618      	mov	r0, r3
    6f8a:	f007 fecf 	bl	ed2c <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6f8e:	687b      	ldr	r3, [r7, #4]
    6f90:	69db      	ldr	r3, [r3, #28]
    6f92:	2b00      	cmp	r3, #0
    6f94:	d004      	beq.n	6fa0 <_ZN7SensorsD2Ev+0x194>
    6f96:	687b      	ldr	r3, [r7, #4]
    6f98:	69db      	ldr	r3, [r3, #28]
    6f9a:	4618      	mov	r0, r3
    6f9c:	f007 fec6 	bl	ed2c <_ZdaPv>
    delete[] ligthBarriers;
    6fa0:	687b      	ldr	r3, [r7, #4]
    6fa2:	695b      	ldr	r3, [r3, #20]
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	d004      	beq.n	6fb2 <_ZN7SensorsD2Ev+0x1a6>
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	695b      	ldr	r3, [r3, #20]
    6fac:	4618      	mov	r0, r3
    6fae:	f007 febd 	bl	ed2c <_ZdaPv>
    #endif

    if (sharpNameVector)
    6fb2:	687b      	ldr	r3, [r7, #4]
    6fb4:	6a5b      	ldr	r3, [r3, #36]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d00d      	beq.n	6fd6 <_ZN7SensorsD2Ev+0x1ca>
        delete sharpNameVector;
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	6a5b      	ldr	r3, [r3, #36]
    6fbe:	2b00      	cmp	r3, #0
    6fc0:	d009      	beq.n	6fd6 <_ZN7SensorsD2Ev+0x1ca>
    6fc2:	687b      	ldr	r3, [r7, #4]
    6fc4:	6a5b      	ldr	r3, [r3, #36]
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6fcc:	681a      	ldr	r2, [r3, #0]
    6fce:	687b      	ldr	r3, [r7, #4]
    6fd0:	6a5b      	ldr	r3, [r3, #36]
    6fd2:	4618      	mov	r0, r3
    6fd4:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    6fd6:	687b      	ldr	r3, [r7, #4]
    6fd8:	6adb      	ldr	r3, [r3, #44]
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d00d      	beq.n	6ffa <_ZN7SensorsD2Ev+0x1ee>
        delete ligthBarrierNameVector;
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	6adb      	ldr	r3, [r3, #44]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d009      	beq.n	6ffa <_ZN7SensorsD2Ev+0x1ee>
    6fe6:	687b      	ldr	r3, [r7, #4]
    6fe8:	6adb      	ldr	r3, [r3, #44]
    6fea:	681b      	ldr	r3, [r3, #0]
    6fec:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6ff0:	681a      	ldr	r2, [r3, #0]
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	6adb      	ldr	r3, [r3, #44]
    6ff6:	4618      	mov	r0, r3
    6ff8:	4790      	blx	r2
    if (limitSwitchNameVector)
    6ffa:	687b      	ldr	r3, [r7, #4]
    6ffc:	6a9b      	ldr	r3, [r3, #40]
    6ffe:	2b00      	cmp	r3, #0
    7000:	d00d      	beq.n	701e <_ZN7SensorsD2Ev+0x212>
        delete limitSwitchNameVector;
    7002:	687b      	ldr	r3, [r7, #4]
    7004:	6a9b      	ldr	r3, [r3, #40]
    7006:	2b00      	cmp	r3, #0
    7008:	d009      	beq.n	701e <_ZN7SensorsD2Ev+0x212>
    700a:	687b      	ldr	r3, [r7, #4]
    700c:	6a9b      	ldr	r3, [r3, #40]
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	f103 0304 	add.w	r3, r3, #4	; 0x4
    7014:	681a      	ldr	r2, [r3, #0]
    7016:	687b      	ldr	r3, [r7, #4]
    7018:	6a9b      	ldr	r3, [r3, #40]
    701a:	4618      	mov	r0, r3
    701c:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    701e:	687b      	ldr	r3, [r7, #4]
    7020:	6b1b      	ldr	r3, [r3, #48]
    7022:	2b00      	cmp	r3, #0
    7024:	d00d      	beq.n	7042 <_ZN7SensorsD2Ev+0x236>
        delete outputSensorVector;
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	6b1b      	ldr	r3, [r3, #48]
    702a:	2b00      	cmp	r3, #0
    702c:	d009      	beq.n	7042 <_ZN7SensorsD2Ev+0x236>
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	6b1b      	ldr	r3, [r3, #48]
    7032:	681b      	ldr	r3, [r3, #0]
    7034:	f103 0304 	add.w	r3, r3, #4	; 0x4
    7038:	681a      	ldr	r2, [r3, #0]
    703a:	687b      	ldr	r3, [r7, #4]
    703c:	6b1b      	ldr	r3, [r3, #48]
    703e:	4618      	mov	r0, r3
    7040:	4790      	blx	r2
}
    7042:	f04f 0300 	mov.w	r3, #0	; 0x0
    7046:	b2db      	uxtb	r3, r3
    7048:	2b00      	cmp	r3, #0
    704a:	d002      	beq.n	7052 <_ZN7SensorsD2Ev+0x246>
    704c:	6878      	ldr	r0, [r7, #4]
    704e:	f007 fdf5 	bl	ec3c <_ZdlPv>
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	4618      	mov	r0, r3
    7056:	f107 0718 	add.w	r7, r7, #24	; 0x18
    705a:	46bd      	mov	sp, r7
    705c:	bd80      	pop	{r7, pc}
    705e:	46c0      	nop			(mov r8, r8)
    7060:	000220f8 	.word	0x000220f8

00007064 <_ZN7SensorsC1Ev>:
        singleton = new Sensors;
    }
    return singleton;
}

Sensors::Sensors()
    7064:	b5b0      	push	{r4, r5, r7, lr}
    7066:	b088      	sub	sp, #32
    7068:	af02      	add	r7, sp, #8
    706a:	6078      	str	r0, [r7, #4]
    706c:	687a      	ldr	r2, [r7, #4]
    706e:	4ba9      	ldr	r3, [pc, #676]	(7314 <_ZN7SensorsC1Ev+0x2b0>)
    7070:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    7072:	4aa9      	ldr	r2, [pc, #676]	(7318 <_ZN7SensorsC1Ev+0x2b4>)
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    7078:	4ba8      	ldr	r3, [pc, #672]	(731c <_ZN7SensorsC1Ev+0x2b8>)
    707a:	f107 020a 	add.w	r2, r7, #10	; 0xa
    707e:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    7082:	4610      	mov	r0, r2
    7084:	4619      	mov	r1, r3
    7086:	4662      	mov	r2, ip
    7088:	f019 fe94 	bl	20db4 <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    708c:	f107 030a 	add.w	r3, r7, #10	; 0xa
    7090:	f04f 000a 	mov.w	r0, #10	; 0xa
    7094:	4619      	mov	r1, r3
    7096:	f003 ff4d 	bl	af34 <_ZN12AnalogSensor14initialiserADCEhPh>
    709a:	4603      	mov	r3, r0
    709c:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    709e:	687a      	ldr	r2, [r7, #4]
    70a0:	f04f 030a 	mov.w	r3, #10	; 0xa
    70a4:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    70a6:	687a      	ldr	r2, [r7, #4]
    70a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    70ac:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    70ae:	687a      	ldr	r2, [r7, #4]
    70b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    70b4:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    70b6:	687a      	ldr	r2, [r7, #4]
    70b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    70bc:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    70be:	f04f 0010 	mov.w	r0, #16	; 0x10
    70c2:	f007 fd15 	bl	eaf0 <_Znwj>
    70c6:	4603      	mov	r3, r0
    70c8:	461c      	mov	r4, r3
    70ca:	687b      	ldr	r3, [r7, #4]
    70cc:	691b      	ldr	r3, [r3, #16]
    70ce:	4620      	mov	r0, r4
    70d0:	4619      	mov	r1, r3
    70d2:	f015 fb5d 	bl	1c790 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    70da:	f04f 0010 	mov.w	r0, #16	; 0x10
    70de:	f007 fd07 	bl	eaf0 <_Znwj>
    70e2:	4603      	mov	r3, r0
    70e4:	461c      	mov	r4, r3
    70e6:	687b      	ldr	r3, [r7, #4]
    70e8:	6a1b      	ldr	r3, [r3, #32]
    70ea:	4620      	mov	r0, r4
    70ec:	4619      	mov	r1, r3
    70ee:	f015 fb75 	bl	1c7dc <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    70f6:	f04f 0010 	mov.w	r0, #16	; 0x10
    70fa:	f007 fcf9 	bl	eaf0 <_Znwj>
    70fe:	4603      	mov	r3, r0
    7100:	461c      	mov	r4, r3
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	699b      	ldr	r3, [r3, #24]
    7106:	4620      	mov	r0, r4
    7108:	4619      	mov	r1, r3
    710a:	f015 fb87 	bl	1c81c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    710e:	687b      	ldr	r3, [r7, #4]
    7110:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    7112:	687b      	ldr	r3, [r7, #4]
    7114:	689b      	ldr	r3, [r3, #8]
    7116:	ea4f 0383 	mov.w	r3, r3, lsl #2
    711a:	4618      	mov	r0, r3
    711c:	f007 fd80 	bl	ec20 <_Znaj>
    7120:	4603      	mov	r3, r0
    7122:	461a      	mov	r2, r3
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    7128:	687b      	ldr	r3, [r7, #4]
    712a:	685d      	ldr	r5, [r3, #4]
    712c:	f04f 0018 	mov.w	r0, #24	; 0x18
    7130:	f007 fcde 	bl	eaf0 <_Znwj>
    7134:	4603      	mov	r3, r0
    7136:	461c      	mov	r4, r3
    7138:	f640 13c4 	movw	r3, #2500	; 0x9c4
    713c:	9300      	str	r3, [sp, #0]
    713e:	4620      	mov	r0, r4
    7140:	f04f 0102 	mov.w	r1, #2	; 0x2
    7144:	f04f 0209 	mov.w	r2, #9	; 0x9
    7148:	697b      	ldr	r3, [r7, #20]
    714a:	f006 fb1d 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    714e:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    7150:	687b      	ldr	r3, [r7, #4]
    7152:	685b      	ldr	r3, [r3, #4]
    7154:	f103 0504 	add.w	r5, r3, #4	; 0x4
    7158:	f04f 0018 	mov.w	r0, #24	; 0x18
    715c:	f007 fcc8 	bl	eaf0 <_Znwj>
    7160:	4603      	mov	r3, r0
    7162:	461c      	mov	r4, r3
    7164:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7168:	9300      	str	r3, [sp, #0]
    716a:	4620      	mov	r0, r4
    716c:	f04f 0103 	mov.w	r1, #3	; 0x3
    7170:	f04f 020e 	mov.w	r2, #14	; 0xe
    7174:	697b      	ldr	r3, [r7, #20]
    7176:	f006 fb07 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    717a:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    717c:	687b      	ldr	r3, [r7, #4]
    717e:	685b      	ldr	r3, [r3, #4]
    7180:	f103 0508 	add.w	r5, r3, #8	; 0x8
    7184:	f04f 0018 	mov.w	r0, #24	; 0x18
    7188:	f007 fcb2 	bl	eaf0 <_Znwj>
    718c:	4603      	mov	r3, r0
    718e:	461c      	mov	r4, r3
    7190:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7194:	9300      	str	r3, [sp, #0]
    7196:	4620      	mov	r0, r4
    7198:	f04f 0104 	mov.w	r1, #4	; 0x4
    719c:	f04f 020d 	mov.w	r2, #13	; 0xd
    71a0:	697b      	ldr	r3, [r7, #20]
    71a2:	f006 faf1 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    71a6:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	685b      	ldr	r3, [r3, #4]
    71ac:	f103 050c 	add.w	r5, r3, #12	; 0xc
    71b0:	f04f 0018 	mov.w	r0, #24	; 0x18
    71b4:	f007 fc9c 	bl	eaf0 <_Znwj>
    71b8:	4603      	mov	r3, r0
    71ba:	461c      	mov	r4, r3
    71bc:	f640 13c4 	movw	r3, #2500	; 0x9c4
    71c0:	9300      	str	r3, [sp, #0]
    71c2:	4620      	mov	r0, r4
    71c4:	f04f 0105 	mov.w	r1, #5	; 0x5
    71c8:	f04f 020b 	mov.w	r2, #11	; 0xb
    71cc:	697b      	ldr	r3, [r7, #20]
    71ce:	f006 fadb 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    71d2:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	685b      	ldr	r3, [r3, #4]
    71d8:	f103 0510 	add.w	r5, r3, #16	; 0x10
    71dc:	f04f 0018 	mov.w	r0, #24	; 0x18
    71e0:	f007 fc86 	bl	eaf0 <_Znwj>
    71e4:	4603      	mov	r3, r0
    71e6:	461c      	mov	r4, r3
    71e8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    71ec:	9300      	str	r3, [sp, #0]
    71ee:	4620      	mov	r0, r4
    71f0:	f04f 0100 	mov.w	r1, #0	; 0x0
    71f4:	f04f 0205 	mov.w	r2, #5	; 0x5
    71f8:	697b      	ldr	r3, [r7, #20]
    71fa:	f006 fac5 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    71fe:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	685b      	ldr	r3, [r3, #4]
    7204:	f103 0514 	add.w	r5, r3, #20	; 0x14
    7208:	f04f 0018 	mov.w	r0, #24	; 0x18
    720c:	f007 fc70 	bl	eaf0 <_Znwj>
    7210:	4603      	mov	r3, r0
    7212:	461c      	mov	r4, r3
    7214:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7218:	9300      	str	r3, [sp, #0]
    721a:	4620      	mov	r0, r4
    721c:	f04f 0101 	mov.w	r1, #1	; 0x1
    7220:	f04f 0204 	mov.w	r2, #4	; 0x4
    7224:	697b      	ldr	r3, [r7, #20]
    7226:	f006 faaf 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    722a:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	685b      	ldr	r3, [r3, #4]
    7230:	f103 0518 	add.w	r5, r3, #24	; 0x18
    7234:	f04f 0018 	mov.w	r0, #24	; 0x18
    7238:	f007 fc5a 	bl	eaf0 <_Znwj>
    723c:	4603      	mov	r3, r0
    723e:	461c      	mov	r4, r3
    7240:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7244:	9300      	str	r3, [sp, #0]
    7246:	4620      	mov	r0, r4
    7248:	f04f 0106 	mov.w	r1, #6	; 0x6
    724c:	f04f 020f 	mov.w	r2, #15	; 0xf
    7250:	697b      	ldr	r3, [r7, #20]
    7252:	f006 fa99 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7256:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    7258:	687b      	ldr	r3, [r7, #4]
    725a:	685b      	ldr	r3, [r3, #4]
    725c:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    7260:	f04f 0018 	mov.w	r0, #24	; 0x18
    7264:	f007 fc44 	bl	eaf0 <_Znwj>
    7268:	4603      	mov	r3, r0
    726a:	461c      	mov	r4, r3
    726c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7270:	9300      	str	r3, [sp, #0]
    7272:	4620      	mov	r0, r4
    7274:	f04f 0107 	mov.w	r1, #7	; 0x7
    7278:	f04f 020c 	mov.w	r2, #12	; 0xc
    727c:	697b      	ldr	r3, [r7, #20]
    727e:	f006 fa83 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7282:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	685b      	ldr	r3, [r3, #4]
    7288:	f103 0520 	add.w	r5, r3, #32	; 0x20
    728c:	f04f 0018 	mov.w	r0, #24	; 0x18
    7290:	f007 fc2e 	bl	eaf0 <_Znwj>
    7294:	4603      	mov	r3, r0
    7296:	461c      	mov	r4, r3
    7298:	f640 13c4 	movw	r3, #2500	; 0x9c4
    729c:	9300      	str	r3, [sp, #0]
    729e:	4620      	mov	r0, r4
    72a0:	f04f 0108 	mov.w	r1, #8	; 0x8
    72a4:	f04f 0208 	mov.w	r2, #8	; 0x8
    72a8:	697b      	ldr	r3, [r7, #20]
    72aa:	f006 fa6d 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    72ae:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    72b0:	687b      	ldr	r3, [r7, #4]
    72b2:	685b      	ldr	r3, [r3, #4]
    72b4:	f103 0524 	add.w	r5, r3, #36	; 0x24
    72b8:	f04f 0018 	mov.w	r0, #24	; 0x18
    72bc:	f007 fc18 	bl	eaf0 <_Znwj>
    72c0:	4603      	mov	r3, r0
    72c2:	461c      	mov	r4, r3
    72c4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    72c8:	9300      	str	r3, [sp, #0]
    72ca:	4620      	mov	r0, r4
    72cc:	f04f 0108 	mov.w	r1, #8	; 0x8
    72d0:	f04f 020a 	mov.w	r2, #10	; 0xa
    72d4:	697b      	ldr	r3, [r7, #20]
    72d6:	f006 fa57 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    72da:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	691b      	ldr	r3, [r3, #16]
    72e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    72e4:	4618      	mov	r0, r3
    72e6:	f007 fc9b 	bl	ec20 <_Znaj>
    72ea:	4603      	mov	r3, r0
    72ec:	461a      	mov	r2, r3
    72ee:	687b      	ldr	r3, [r7, #4]
    72f0:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    72f2:	687b      	ldr	r3, [r7, #4]
    72f4:	6a1b      	ldr	r3, [r3, #32]
    72f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    72fa:	4618      	mov	r0, r3
    72fc:	f007 fc90 	bl	ec20 <_Znaj>
    7300:	4603      	mov	r3, r0
    7302:	461a      	mov	r2, r3
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	4618      	mov	r0, r3
    730c:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7310:	46bd      	mov	sp, r7
    7312:	bdb0      	pop	{r4, r5, r7, pc}
    7314:	000220f8 	.word	0x000220f8
    7318:	20000568 	.word	0x20000568
    731c:	00022100 	.word	0x00022100

00007320 <_ZN7Sensors12getSingletonEv>:
#include "sensors.h"

Sensors* Sensors::sensors = NULL;
Sensors* Sensors::singleton = 0;

Sensors* Sensors::getSingleton()
    7320:	b590      	push	{r4, r7, lr}
    7322:	b081      	sub	sp, #4
    7324:	af00      	add	r7, sp, #0
{
    if(singleton == 0)
    7326:	4b0b      	ldr	r3, [pc, #44]	(7354 <_ZN7Sensors12getSingletonEv+0x34>)
    7328:	681b      	ldr	r3, [r3, #0]
    732a:	2b00      	cmp	r3, #0
    732c:	d10a      	bne.n	7344 <_ZN7Sensors12getSingletonEv+0x24>
    {
        singleton = new Sensors;
    732e:	f04f 0034 	mov.w	r0, #52	; 0x34
    7332:	f007 fbdd 	bl	eaf0 <_Znwj>
    7336:	4603      	mov	r3, r0
    7338:	461c      	mov	r4, r3
    733a:	4620      	mov	r0, r4
    733c:	f7ff fe92 	bl	7064 <_ZN7SensorsC1Ev>
    7340:	4b04      	ldr	r3, [pc, #16]	(7354 <_ZN7Sensors12getSingletonEv+0x34>)
    7342:	601c      	str	r4, [r3, #0]
    }
    return singleton;
    7344:	4b03      	ldr	r3, [pc, #12]	(7354 <_ZN7Sensors12getSingletonEv+0x34>)
    7346:	681b      	ldr	r3, [r3, #0]
}
    7348:	4618      	mov	r0, r3
    734a:	f107 0704 	add.w	r7, r7, #4	; 0x4
    734e:	46bd      	mov	sp, r7
    7350:	bd90      	pop	{r4, r7, pc}
    7352:	46c0      	nop			(mov r8, r8)
    7354:	2000056c 	.word	0x2000056c

00007358 <_ZN7SensorsC2Ev>:

Sensors::Sensors()
    7358:	b5b0      	push	{r4, r5, r7, lr}
    735a:	b088      	sub	sp, #32
    735c:	af02      	add	r7, sp, #8
    735e:	6078      	str	r0, [r7, #4]
    7360:	687a      	ldr	r2, [r7, #4]
    7362:	4ba9      	ldr	r3, [pc, #676]	(7608 <_ZN7SensorsC2Ev+0x2b0>)
    7364:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    7366:	4aa9      	ldr	r2, [pc, #676]	(760c <_ZN7SensorsC2Ev+0x2b4>)
    7368:	687b      	ldr	r3, [r7, #4]
    736a:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    736c:	4ba8      	ldr	r3, [pc, #672]	(7610 <_ZN7SensorsC2Ev+0x2b8>)
    736e:	f107 020a 	add.w	r2, r7, #10	; 0xa
    7372:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    7376:	4610      	mov	r0, r2
    7378:	4619      	mov	r1, r3
    737a:	4662      	mov	r2, ip
    737c:	f019 fd1a 	bl	20db4 <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    7380:	f107 030a 	add.w	r3, r7, #10	; 0xa
    7384:	f04f 000a 	mov.w	r0, #10	; 0xa
    7388:	4619      	mov	r1, r3
    738a:	f003 fdd3 	bl	af34 <_ZN12AnalogSensor14initialiserADCEhPh>
    738e:	4603      	mov	r3, r0
    7390:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    7392:	687a      	ldr	r2, [r7, #4]
    7394:	f04f 030a 	mov.w	r3, #10	; 0xa
    7398:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    739a:	687a      	ldr	r2, [r7, #4]
    739c:	f04f 0300 	mov.w	r3, #0	; 0x0
    73a0:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    73a2:	687a      	ldr	r2, [r7, #4]
    73a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    73a8:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    73aa:	687a      	ldr	r2, [r7, #4]
    73ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    73b0:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    73b2:	f04f 0010 	mov.w	r0, #16	; 0x10
    73b6:	f007 fb9b 	bl	eaf0 <_Znwj>
    73ba:	4603      	mov	r3, r0
    73bc:	461c      	mov	r4, r3
    73be:	687b      	ldr	r3, [r7, #4]
    73c0:	691b      	ldr	r3, [r3, #16]
    73c2:	4620      	mov	r0, r4
    73c4:	4619      	mov	r1, r3
    73c6:	f015 f9e3 	bl	1c790 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    73ca:	687b      	ldr	r3, [r7, #4]
    73cc:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    73ce:	f04f 0010 	mov.w	r0, #16	; 0x10
    73d2:	f007 fb8d 	bl	eaf0 <_Znwj>
    73d6:	4603      	mov	r3, r0
    73d8:	461c      	mov	r4, r3
    73da:	687b      	ldr	r3, [r7, #4]
    73dc:	6a1b      	ldr	r3, [r3, #32]
    73de:	4620      	mov	r0, r4
    73e0:	4619      	mov	r1, r3
    73e2:	f015 f9fb 	bl	1c7dc <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    73e6:	687b      	ldr	r3, [r7, #4]
    73e8:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    73ea:	f04f 0010 	mov.w	r0, #16	; 0x10
    73ee:	f007 fb7f 	bl	eaf0 <_Znwj>
    73f2:	4603      	mov	r3, r0
    73f4:	461c      	mov	r4, r3
    73f6:	687b      	ldr	r3, [r7, #4]
    73f8:	699b      	ldr	r3, [r3, #24]
    73fa:	4620      	mov	r0, r4
    73fc:	4619      	mov	r1, r3
    73fe:	f015 fa0d 	bl	1c81c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    7402:	687b      	ldr	r3, [r7, #4]
    7404:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    7406:	687b      	ldr	r3, [r7, #4]
    7408:	689b      	ldr	r3, [r3, #8]
    740a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    740e:	4618      	mov	r0, r3
    7410:	f007 fc06 	bl	ec20 <_Znaj>
    7414:	4603      	mov	r3, r0
    7416:	461a      	mov	r2, r3
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	685d      	ldr	r5, [r3, #4]
    7420:	f04f 0018 	mov.w	r0, #24	; 0x18
    7424:	f007 fb64 	bl	eaf0 <_Znwj>
    7428:	4603      	mov	r3, r0
    742a:	461c      	mov	r4, r3
    742c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7430:	9300      	str	r3, [sp, #0]
    7432:	4620      	mov	r0, r4
    7434:	f04f 0102 	mov.w	r1, #2	; 0x2
    7438:	f04f 0209 	mov.w	r2, #9	; 0x9
    743c:	697b      	ldr	r3, [r7, #20]
    743e:	f006 f9a3 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7442:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    7444:	687b      	ldr	r3, [r7, #4]
    7446:	685b      	ldr	r3, [r3, #4]
    7448:	f103 0504 	add.w	r5, r3, #4	; 0x4
    744c:	f04f 0018 	mov.w	r0, #24	; 0x18
    7450:	f007 fb4e 	bl	eaf0 <_Znwj>
    7454:	4603      	mov	r3, r0
    7456:	461c      	mov	r4, r3
    7458:	f640 13c4 	movw	r3, #2500	; 0x9c4
    745c:	9300      	str	r3, [sp, #0]
    745e:	4620      	mov	r0, r4
    7460:	f04f 0103 	mov.w	r1, #3	; 0x3
    7464:	f04f 020e 	mov.w	r2, #14	; 0xe
    7468:	697b      	ldr	r3, [r7, #20]
    746a:	f006 f98d 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    746e:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    7470:	687b      	ldr	r3, [r7, #4]
    7472:	685b      	ldr	r3, [r3, #4]
    7474:	f103 0508 	add.w	r5, r3, #8	; 0x8
    7478:	f04f 0018 	mov.w	r0, #24	; 0x18
    747c:	f007 fb38 	bl	eaf0 <_Znwj>
    7480:	4603      	mov	r3, r0
    7482:	461c      	mov	r4, r3
    7484:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7488:	9300      	str	r3, [sp, #0]
    748a:	4620      	mov	r0, r4
    748c:	f04f 0104 	mov.w	r1, #4	; 0x4
    7490:	f04f 020d 	mov.w	r2, #13	; 0xd
    7494:	697b      	ldr	r3, [r7, #20]
    7496:	f006 f977 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    749a:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    749c:	687b      	ldr	r3, [r7, #4]
    749e:	685b      	ldr	r3, [r3, #4]
    74a0:	f103 050c 	add.w	r5, r3, #12	; 0xc
    74a4:	f04f 0018 	mov.w	r0, #24	; 0x18
    74a8:	f007 fb22 	bl	eaf0 <_Znwj>
    74ac:	4603      	mov	r3, r0
    74ae:	461c      	mov	r4, r3
    74b0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    74b4:	9300      	str	r3, [sp, #0]
    74b6:	4620      	mov	r0, r4
    74b8:	f04f 0105 	mov.w	r1, #5	; 0x5
    74bc:	f04f 020b 	mov.w	r2, #11	; 0xb
    74c0:	697b      	ldr	r3, [r7, #20]
    74c2:	f006 f961 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    74c6:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    74c8:	687b      	ldr	r3, [r7, #4]
    74ca:	685b      	ldr	r3, [r3, #4]
    74cc:	f103 0510 	add.w	r5, r3, #16	; 0x10
    74d0:	f04f 0018 	mov.w	r0, #24	; 0x18
    74d4:	f007 fb0c 	bl	eaf0 <_Znwj>
    74d8:	4603      	mov	r3, r0
    74da:	461c      	mov	r4, r3
    74dc:	f640 13c4 	movw	r3, #2500	; 0x9c4
    74e0:	9300      	str	r3, [sp, #0]
    74e2:	4620      	mov	r0, r4
    74e4:	f04f 0100 	mov.w	r1, #0	; 0x0
    74e8:	f04f 0205 	mov.w	r2, #5	; 0x5
    74ec:	697b      	ldr	r3, [r7, #20]
    74ee:	f006 f94b 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    74f2:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    74f4:	687b      	ldr	r3, [r7, #4]
    74f6:	685b      	ldr	r3, [r3, #4]
    74f8:	f103 0514 	add.w	r5, r3, #20	; 0x14
    74fc:	f04f 0018 	mov.w	r0, #24	; 0x18
    7500:	f007 faf6 	bl	eaf0 <_Znwj>
    7504:	4603      	mov	r3, r0
    7506:	461c      	mov	r4, r3
    7508:	f640 13c4 	movw	r3, #2500	; 0x9c4
    750c:	9300      	str	r3, [sp, #0]
    750e:	4620      	mov	r0, r4
    7510:	f04f 0101 	mov.w	r1, #1	; 0x1
    7514:	f04f 0204 	mov.w	r2, #4	; 0x4
    7518:	697b      	ldr	r3, [r7, #20]
    751a:	f006 f935 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    751e:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    7520:	687b      	ldr	r3, [r7, #4]
    7522:	685b      	ldr	r3, [r3, #4]
    7524:	f103 0518 	add.w	r5, r3, #24	; 0x18
    7528:	f04f 0018 	mov.w	r0, #24	; 0x18
    752c:	f007 fae0 	bl	eaf0 <_Znwj>
    7530:	4603      	mov	r3, r0
    7532:	461c      	mov	r4, r3
    7534:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7538:	9300      	str	r3, [sp, #0]
    753a:	4620      	mov	r0, r4
    753c:	f04f 0106 	mov.w	r1, #6	; 0x6
    7540:	f04f 020f 	mov.w	r2, #15	; 0xf
    7544:	697b      	ldr	r3, [r7, #20]
    7546:	f006 f91f 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    754a:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    754c:	687b      	ldr	r3, [r7, #4]
    754e:	685b      	ldr	r3, [r3, #4]
    7550:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    7554:	f04f 0018 	mov.w	r0, #24	; 0x18
    7558:	f007 faca 	bl	eaf0 <_Znwj>
    755c:	4603      	mov	r3, r0
    755e:	461c      	mov	r4, r3
    7560:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7564:	9300      	str	r3, [sp, #0]
    7566:	4620      	mov	r0, r4
    7568:	f04f 0107 	mov.w	r1, #7	; 0x7
    756c:	f04f 020c 	mov.w	r2, #12	; 0xc
    7570:	697b      	ldr	r3, [r7, #20]
    7572:	f006 f909 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    7576:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    7578:	687b      	ldr	r3, [r7, #4]
    757a:	685b      	ldr	r3, [r3, #4]
    757c:	f103 0520 	add.w	r5, r3, #32	; 0x20
    7580:	f04f 0018 	mov.w	r0, #24	; 0x18
    7584:	f007 fab4 	bl	eaf0 <_Znwj>
    7588:	4603      	mov	r3, r0
    758a:	461c      	mov	r4, r3
    758c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    7590:	9300      	str	r3, [sp, #0]
    7592:	4620      	mov	r0, r4
    7594:	f04f 0108 	mov.w	r1, #8	; 0x8
    7598:	f04f 0208 	mov.w	r2, #8	; 0x8
    759c:	697b      	ldr	r3, [r7, #20]
    759e:	f006 f8f3 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    75a2:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    75a4:	687b      	ldr	r3, [r7, #4]
    75a6:	685b      	ldr	r3, [r3, #4]
    75a8:	f103 0524 	add.w	r5, r3, #36	; 0x24
    75ac:	f04f 0018 	mov.w	r0, #24	; 0x18
    75b0:	f007 fa9e 	bl	eaf0 <_Znwj>
    75b4:	4603      	mov	r3, r0
    75b6:	461c      	mov	r4, r3
    75b8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    75bc:	9300      	str	r3, [sp, #0]
    75be:	4620      	mov	r0, r4
    75c0:	f04f 0108 	mov.w	r1, #8	; 0x8
    75c4:	f04f 020a 	mov.w	r2, #10	; 0xa
    75c8:	697b      	ldr	r3, [r7, #20]
    75ca:	f006 f8dd 	bl	d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    75ce:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	691b      	ldr	r3, [r3, #16]
    75d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    75d8:	4618      	mov	r0, r3
    75da:	f007 fb21 	bl	ec20 <_Znaj>
    75de:	4603      	mov	r3, r0
    75e0:	461a      	mov	r2, r3
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    75e6:	687b      	ldr	r3, [r7, #4]
    75e8:	6a1b      	ldr	r3, [r3, #32]
    75ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    75ee:	4618      	mov	r0, r3
    75f0:	f007 fb16 	bl	ec20 <_Znaj>
    75f4:	4603      	mov	r3, r0
    75f6:	461a      	mov	r2, r3
    75f8:	687b      	ldr	r3, [r7, #4]
    75fa:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    75fc:	687b      	ldr	r3, [r7, #4]
    75fe:	4618      	mov	r0, r3
    7600:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7604:	46bd      	mov	sp, r7
    7606:	bdb0      	pop	{r4, r5, r7, pc}
    7608:	000220f8 	.word	0x000220f8
    760c:	20000568 	.word	0x20000568
    7610:	00022100 	.word	0x00022100

00007614 <_ZN5Servo13shutDownServoEv>:

    float rc = m_RC0degre + m_coefRC * angle;
	pwm_handler.setDutyCycle(rc);
}

void Servo::shutDownServo()
    7614:	b580      	push	{r7, lr}
    7616:	b082      	sub	sp, #8
    7618:	af00      	add	r7, sp, #0
    761a:	6078      	str	r0, [r7, #4]
{
    pwm_handler.setPulseWidth(0);
    761c:	687b      	ldr	r3, [r7, #4]
    761e:	4618      	mov	r0, r3
    7620:	f04f 0100 	mov.w	r1, #0	; 0x0
    7624:	f005 faa4 	bl	cb70 <_ZN10PWMHandler13setPulseWidthEt>
}
    7628:	f107 0708 	add.w	r7, r7, #8	; 0x8
    762c:	46bd      	mov	sp, r7
    762e:	bd80      	pop	{r7, pc}

00007630 <_ZN5Servo9goToAngleEf>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}

void Servo::goToAngle(Angle angle)
    7630:	b590      	push	{r4, r7, lr}
    7632:	b085      	sub	sp, #20
    7634:	af00      	add	r7, sp, #0
    7636:	6078      	str	r0, [r7, #4]
    7638:	6039      	str	r1, [r7, #0]
	float pulseWidth = angle*19.5f+1200.0f; // pour le servo ES 539 made in malaysia

    // Donner la rapport au PWM
	pwm_handler.setPulseWidth(pulseWidth);*/

    if (angle < 0.0)
    763a:	6838      	ldr	r0, [r7, #0]
    763c:	4914      	ldr	r1, [pc, #80]	(7690 <_ZN5Servo9goToAngleEf+0x60>)
    763e:	f013 ffd9 	bl	1b5f4 <__aeabi_fcmplt>
    7642:	4603      	mov	r3, r0
    7644:	2b00      	cmp	r3, #0
    7646:	d002      	beq.n	764e <_ZN5Servo9goToAngleEf+0x1e>
        angle = 0.0f;
    7648:	4b11      	ldr	r3, [pc, #68]	(7690 <_ZN5Servo9goToAngleEf+0x60>)
    764a:	603b      	str	r3, [r7, #0]
    764c:	e008      	b.n	7660 <_ZN5Servo9goToAngleEf+0x30>
    else if (angle > 180.0f)
    764e:	6838      	ldr	r0, [r7, #0]
    7650:	4910      	ldr	r1, [pc, #64]	(7694 <_ZN5Servo9goToAngleEf+0x64>)
    7652:	f013 ffed 	bl	1b630 <__aeabi_fcmpgt>
    7656:	4603      	mov	r3, r0
    7658:	2b00      	cmp	r3, #0
    765a:	d001      	beq.n	7660 <_ZN5Servo9goToAngleEf+0x30>
        angle = 180.0f;
    765c:	4b0d      	ldr	r3, [pc, #52]	(7694 <_ZN5Servo9goToAngleEf+0x64>)
    765e:	603b      	str	r3, [r7, #0]

    float rc = m_RC0degre + m_coefRC * angle;
    7660:	687b      	ldr	r3, [r7, #4]
    7662:	68dc      	ldr	r4, [r3, #12]
    7664:	687b      	ldr	r3, [r7, #4]
    7666:	691b      	ldr	r3, [r3, #16]
    7668:	4618      	mov	r0, r3
    766a:	6839      	ldr	r1, [r7, #0]
    766c:	f013 fe26 	bl	1b2bc <__aeabi_fmul>
    7670:	4603      	mov	r3, r0
    7672:	4620      	mov	r0, r4
    7674:	4619      	mov	r1, r3
    7676:	f013 fd19 	bl	1b0ac <__addsf3>
    767a:	4603      	mov	r3, r0
    767c:	60fb      	str	r3, [r7, #12]
	pwm_handler.setDutyCycle(rc);
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	4618      	mov	r0, r3
    7682:	68f9      	ldr	r1, [r7, #12]
    7684:	f005 fac6 	bl	cc14 <_ZN10PWMHandler12setDutyCycleEf>
}
    7688:	f107 0714 	add.w	r7, r7, #20	; 0x14
    768c:	46bd      	mov	sp, r7
    768e:	bd90      	pop	{r4, r7, pc}
    7690:	00000000 	.word	0x00000000
    7694:	43340000 	.word	0x43340000

00007698 <_ZN5Servo7initPinEP12GPIO_TypeDeft>:
{
    shutDownServo();
}

// initialise la pin du servo
void Servo::initPin(GPIO_TypeDef* GPIOx, uint16_t pinX)
    7698:	b580      	push	{r7, lr}
    769a:	b084      	sub	sp, #16
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
    76a0:	460b      	mov	r3, r1
    76a2:	807b      	strh	r3, [r7, #2]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = pinX;
    76a4:	887b      	ldrh	r3, [r7, #2]
    76a6:	81bb      	strh	r3, [r7, #12]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    76a8:	f04f 0348 	mov.w	r3, #72	; 0x48
    76ac:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    76ae:	f04f 0303 	mov.w	r3, #3	; 0x3
    76b2:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    76b4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    76b8:	6878      	ldr	r0, [r7, #4]
    76ba:	4619      	mov	r1, r3
    76bc:	f7f9 fff8 	bl	16b0 <GPIO_Init>
}
    76c0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    76c4:	46bd      	mov	sp, r7
    76c6:	bd80      	pop	{r7, pc}

000076c8 <_ZN5ServoD1Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    76c8:	b580      	push	{r7, lr}
    76ca:	b082      	sub	sp, #8
    76cc:	af00      	add	r7, sp, #0
    76ce:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    76d0:	6878      	ldr	r0, [r7, #4]
    76d2:	f7ff ff9f 	bl	7614 <_ZN5Servo13shutDownServoEv>
}
    76d6:	687b      	ldr	r3, [r7, #4]
    76d8:	4618      	mov	r0, r3
    76da:	f005 fa7b 	bl	cbd4 <_ZN10PWMHandlerD1Ev>
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	4618      	mov	r0, r3
    76e2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    76e6:	46bd      	mov	sp, r7
    76e8:	bd80      	pop	{r7, pc}
    76ea:	46c0      	nop			(mov r8, r8)

000076ec <_ZN5ServoD2Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    76ec:	b580      	push	{r7, lr}
    76ee:	b082      	sub	sp, #8
    76f0:	af00      	add	r7, sp, #0
    76f2:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    76f4:	6878      	ldr	r0, [r7, #4]
    76f6:	f7ff ff8d 	bl	7614 <_ZN5Servo13shutDownServoEv>
}
    76fa:	687b      	ldr	r3, [r7, #4]
    76fc:	4618      	mov	r0, r3
    76fe:	f005 fa69 	bl	cbd4 <_ZN10PWMHandlerD1Ev>
    7702:	687b      	ldr	r3, [r7, #4]
    7704:	4618      	mov	r0, r3
    7706:	f107 0708 	add.w	r7, r7, #8	; 0x8
    770a:	46bd      	mov	sp, r7
    770c:	bd80      	pop	{r7, pc}
    770e:	46c0      	nop			(mov r8, r8)

00007710 <_ZN5ServoC1EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    7710:	b580      	push	{r7, lr}
    7712:	b084      	sub	sp, #16
    7714:	af00      	add	r7, sp, #0
    7716:	60f8      	str	r0, [r7, #12]
    7718:	60b9      	str	r1, [r7, #8]
    771a:	603b      	str	r3, [r7, #0]
    771c:	4613      	mov	r3, r2
    771e:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    7720:	68fb      	ldr	r3, [r7, #12]
    7722:	79fa      	ldrb	r2, [r7, #7]
    7724:	4618      	mov	r0, r3
    7726:	68b9      	ldr	r1, [r7, #8]
    7728:	f005 fa96 	bl	cc58 <_ZN10PWMHandlerC1EP5Timerh>
    772c:	68fa      	ldr	r2, [r7, #12]
    772e:	68bb      	ldr	r3, [r7, #8]
    7730:	6093      	str	r3, [r2, #8]
    7732:	68fa      	ldr	r2, [r7, #12]
    7734:	683b      	ldr	r3, [r7, #0]
    7736:	60d3      	str	r3, [r2, #12]
    7738:	69b8      	ldr	r0, [r7, #24]
    773a:	6839      	ldr	r1, [r7, #0]
    773c:	f013 fcb4 	bl	1b0a8 <__aeabi_fsub>
    7740:	4603      	mov	r3, r0
    7742:	4618      	mov	r0, r3
    7744:	4906      	ldr	r1, [pc, #24]	(7760 <_ZN5ServoC1EP5Timerhff+0x50>)
    7746:	f013 fe6d 	bl	1b424 <__aeabi_fdiv>
    774a:	4603      	mov	r3, r0
    774c:	461a      	mov	r2, r3
    774e:	68fb      	ldr	r3, [r7, #12]
    7750:	611a      	str	r2, [r3, #16]
{
}
    7752:	68fb      	ldr	r3, [r7, #12]
    7754:	4618      	mov	r0, r3
    7756:	f107 0710 	add.w	r7, r7, #16	; 0x10
    775a:	46bd      	mov	sp, r7
    775c:	bd80      	pop	{r7, pc}
    775e:	46c0      	nop			(mov r8, r8)
    7760:	43340000 	.word	0x43340000

00007764 <_ZN5ServoC2EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    7764:	b580      	push	{r7, lr}
    7766:	b084      	sub	sp, #16
    7768:	af00      	add	r7, sp, #0
    776a:	60f8      	str	r0, [r7, #12]
    776c:	60b9      	str	r1, [r7, #8]
    776e:	603b      	str	r3, [r7, #0]
    7770:	4613      	mov	r3, r2
    7772:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    7774:	68fb      	ldr	r3, [r7, #12]
    7776:	79fa      	ldrb	r2, [r7, #7]
    7778:	4618      	mov	r0, r3
    777a:	68b9      	ldr	r1, [r7, #8]
    777c:	f005 fa6c 	bl	cc58 <_ZN10PWMHandlerC1EP5Timerh>
    7780:	68fa      	ldr	r2, [r7, #12]
    7782:	68bb      	ldr	r3, [r7, #8]
    7784:	6093      	str	r3, [r2, #8]
    7786:	68fa      	ldr	r2, [r7, #12]
    7788:	683b      	ldr	r3, [r7, #0]
    778a:	60d3      	str	r3, [r2, #12]
    778c:	69b8      	ldr	r0, [r7, #24]
    778e:	6839      	ldr	r1, [r7, #0]
    7790:	f013 fc8a 	bl	1b0a8 <__aeabi_fsub>
    7794:	4603      	mov	r3, r0
    7796:	4618      	mov	r0, r3
    7798:	4906      	ldr	r1, [pc, #24]	(77b4 <_ZN5ServoC2EP5Timerhff+0x50>)
    779a:	f013 fe43 	bl	1b424 <__aeabi_fdiv>
    779e:	4603      	mov	r3, r0
    77a0:	461a      	mov	r2, r3
    77a2:	68fb      	ldr	r3, [r7, #12]
    77a4:	611a      	str	r2, [r3, #16]
{
}
    77a6:	68fb      	ldr	r3, [r7, #12]
    77a8:	4618      	mov	r0, r3
    77aa:	f107 0710 	add.w	r7, r7, #16	; 0x10
    77ae:	46bd      	mov	sp, r7
    77b0:	bd80      	pop	{r7, pc}
    77b2:	46c0      	nop			(mov r8, r8)
    77b4:	43340000 	.word	0x43340000

000077b8 <_Z9wrapAnglef>:
#include "angle.h"
#include <math.h>

// Retourne la valeur de l'angle dans un float entre -PI et PI.
Angle wrapAngle(Angle angle)
    77b8:	b580      	push	{r7, lr}
    77ba:	b082      	sub	sp, #8
    77bc:	af00      	add	r7, sp, #0
    77be:	6078      	str	r0, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    77c0:	6878      	ldr	r0, [r7, #4]
    77c2:	491f      	ldr	r1, [pc, #124]	(7840 <_Z9wrapAnglef+0x88>)
    77c4:	f013 ff34 	bl	1b630 <__aeabi_fcmpgt>
    77c8:	4603      	mov	r3, r0
    77ca:	2b00      	cmp	r3, #0
    77cc:	d106      	bne.n	77dc <_Z9wrapAnglef+0x24>
    77ce:	e01a      	b.n	7806 <_Z9wrapAnglef+0x4e>
    {
        while (angle > M_PI)
            angle -= M_2PI;
    77d0:	6878      	ldr	r0, [r7, #4]
    77d2:	491c      	ldr	r1, [pc, #112]	(7844 <_Z9wrapAnglef+0x8c>)
    77d4:	f013 fc68 	bl	1b0a8 <__aeabi_fsub>
    77d8:	4603      	mov	r3, r0
    77da:	607b      	str	r3, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    {
        while (angle > M_PI)
    77dc:	6878      	ldr	r0, [r7, #4]
    77de:	f013 f8fb 	bl	1a9d8 <__aeabi_f2d>
    77e2:	4602      	mov	r2, r0
    77e4:	460b      	mov	r3, r1
    77e6:	4610      	mov	r0, r2
    77e8:	4619      	mov	r1, r3
    77ea:	a211      	add	r2, pc, #68	(adr r2, 7830 <_Z9wrapAnglef+0x78>)
    77ec:	ca0c      	ldmia	r2!, {r2, r3}
    77ee:	f013 fbd5 	bl	1af9c <__aeabi_dcmpgt>
    77f2:	4603      	mov	r3, r0
    77f4:	2b00      	cmp	r3, #0
    77f6:	d1eb      	bne.n	77d0 <_Z9wrapAnglef+0x18>
    77f8:	e013      	b.n	7822 <_Z9wrapAnglef+0x6a>
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
            angle += M_2PI;
    77fa:	6878      	ldr	r0, [r7, #4]
    77fc:	4911      	ldr	r1, [pc, #68]	(7844 <_Z9wrapAnglef+0x8c>)
    77fe:	f013 fc55 	bl	1b0ac <__addsf3>
    7802:	4603      	mov	r3, r0
    7804:	607b      	str	r3, [r7, #4]
        while (angle > M_PI)
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
    7806:	6878      	ldr	r0, [r7, #4]
    7808:	f013 f8e6 	bl	1a9d8 <__aeabi_f2d>
    780c:	4602      	mov	r2, r0
    780e:	460b      	mov	r3, r1
    7810:	4610      	mov	r0, r2
    7812:	4619      	mov	r1, r3
    7814:	a208      	add	r2, pc, #32	(adr r2, 7838 <_Z9wrapAnglef+0x80>)
    7816:	ca0c      	ldmia	r2!, {r2, r3}
    7818:	f013 fba2 	bl	1af60 <__aeabi_dcmplt>
    781c:	4603      	mov	r3, r0
    781e:	2b00      	cmp	r3, #0
    7820:	d1eb      	bne.n	77fa <_Z9wrapAnglef+0x42>
            angle += M_2PI;
    }
    return angle;
    7822:	687b      	ldr	r3, [r7, #4]
}
    7824:	4618      	mov	r0, r3
    7826:	f107 0708 	add.w	r7, r7, #8	; 0x8
    782a:	46bd      	mov	sp, r7
    782c:	bd80      	pop	{r7, pc}
    782e:	46c0      	nop			(mov r8, r8)
    7830:	54442d18 	.word	0x54442d18
    7834:	400921fb 	.word	0x400921fb
    7838:	54442d18 	.word	0x54442d18
    783c:	c00921fb 	.word	0xc00921fb
    7840:	00000000 	.word	0x00000000
    7844:	40c90fdb 	.word	0x40c90fdb

00007848 <_Z7angleEqff>:

// Vérifie s'il y a égalité ou presque entre deux angles.
bool angleEq(Angle a1, Angle a2)
    7848:	b580      	push	{r7, lr}
    784a:	b084      	sub	sp, #16
    784c:	af00      	add	r7, sp, #0
    784e:	60f8      	str	r0, [r7, #12]
    7850:	60b9      	str	r1, [r7, #8]
{
    static const Angle epsilon = 0.1;
    return (fabs(wrapAngle(a1 - a2)) < epsilon);
    7852:	68f8      	ldr	r0, [r7, #12]
    7854:	68b9      	ldr	r1, [r7, #8]
    7856:	f013 fc27 	bl	1b0a8 <__aeabi_fsub>
    785a:	4603      	mov	r3, r0
    785c:	4618      	mov	r0, r3
    785e:	f7ff ffab 	bl	77b8 <_Z9wrapAnglef>
    7862:	4603      	mov	r3, r0
    7864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7868:	f04f 0300 	mov.w	r3, #0	; 0x0
    786c:	71fb      	strb	r3, [r7, #7]
    786e:	4610      	mov	r0, r2
    7870:	4907      	ldr	r1, [pc, #28]	(7890 <_Z7angleEqff+0x48>)
    7872:	f013 febf 	bl	1b5f4 <__aeabi_fcmplt>
    7876:	4603      	mov	r3, r0
    7878:	2b00      	cmp	r3, #0
    787a:	d002      	beq.n	7882 <_Z7angleEqff+0x3a>
    787c:	f04f 0301 	mov.w	r3, #1	; 0x1
    7880:	71fb      	strb	r3, [r7, #7]
    7882:	79fb      	ldrb	r3, [r7, #7]
}
    7884:	4618      	mov	r0, r3
    7886:	f107 0710 	add.w	r7, r7, #16	; 0x10
    788a:	46bd      	mov	sp, r7
    788c:	bd80      	pop	{r7, pc}
    788e:	46c0      	nop			(mov r8, r8)
    7890:	3dcccccd 	.word	0x3dcccccd
    7894:	46c046c0 	.word	0x46c046c0

00007898 <_ZN14Asservissement14setLinearSpeedEf>:
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    NVIC_Init(&SysTick_IRQ);
#endif
}

void Asservissement::setLinearSpeed(Vitesse vitesse)
    7898:	b480      	push	{r7}
    789a:	b083      	sub	sp, #12
    789c:	af00      	add	r7, sp, #0
    789e:	6078      	str	r0, [r7, #4]
    78a0:	6039      	str	r1, [r7, #0]
{
    vitesseLineaire = vitesse;
    78a2:	687a      	ldr	r2, [r7, #4]
    78a4:	683b      	ldr	r3, [r7, #0]
    78a6:	64d3      	str	r3, [r2, #76]
    //setEnabledPIDDistance(true);
}
    78a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    78ac:	46bd      	mov	sp, r7
    78ae:	bc80      	pop	{r7}
    78b0:	4770      	bx	lr
    78b2:	46c0      	nop			(mov r8, r8)

000078b4 <_ZN14Asservissement15setAngularSpeedEf>:

void Asservissement::setAngularSpeed(VitesseAngulaire vitesse)
    78b4:	b480      	push	{r7}
    78b6:	b083      	sub	sp, #12
    78b8:	af00      	add	r7, sp, #0
    78ba:	6078      	str	r0, [r7, #4]
    78bc:	6039      	str	r1, [r7, #0]
{
    vitesseAngulaire = vitesse;
    78be:	687a      	ldr	r2, [r7, #4]
    78c0:	683b      	ldr	r3, [r7, #0]
    78c2:	6513      	str	r3, [r2, #80]
    //setEnabledPIDAngle(true);
}
    78c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    78c8:	46bd      	mov	sp, r7
    78ca:	bc80      	pop	{r7}
    78cc:	4770      	bx	lr
    78ce:	46c0      	nop			(mov r8, r8)

000078d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>:

void Asservissement::setCommandSpeeds(Command* command)
    78d0:	b580      	push	{r7, lr}
    78d2:	b082      	sub	sp, #8
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
    78d8:	6039      	str	r1, [r7, #0]
{
    if (command != NULL)
    78da:	683b      	ldr	r3, [r7, #0]
    78dc:	2b00      	cmp	r3, #0
    78de:	d018      	beq.n	7912 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x42>
    {
        setLinearSpeed(command->getLinearSpeed());
    78e0:	683b      	ldr	r3, [r7, #0]
    78e2:	681b      	ldr	r3, [r3, #0]
    78e4:	f103 0310 	add.w	r3, r3, #16	; 0x10
    78e8:	681b      	ldr	r3, [r3, #0]
    78ea:	6838      	ldr	r0, [r7, #0]
    78ec:	4798      	blx	r3
    78ee:	4603      	mov	r3, r0
    78f0:	6878      	ldr	r0, [r7, #4]
    78f2:	4619      	mov	r1, r3
    78f4:	f7ff ffd0 	bl	7898 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(command->getAngularSpeed());
    78f8:	683b      	ldr	r3, [r7, #0]
    78fa:	681b      	ldr	r3, [r3, #0]
    78fc:	f103 0314 	add.w	r3, r3, #20	; 0x14
    7900:	681b      	ldr	r3, [r3, #0]
    7902:	6838      	ldr	r0, [r7, #0]
    7904:	4798      	blx	r3
    7906:	4603      	mov	r3, r0
    7908:	6878      	ldr	r0, [r7, #4]
    790a:	4619      	mov	r1, r3
    790c:	f7ff ffd2 	bl	78b4 <_ZN14Asservissement15setAngularSpeedEf>
    7910:	e007      	b.n	7922 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x52>
    }
    else
    {
        setLinearSpeed(0.0f);
    7912:	6878      	ldr	r0, [r7, #4]
    7914:	4905      	ldr	r1, [pc, #20]	(792c <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    7916:	f7ff ffbf 	bl	7898 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(0.0f);
    791a:	6878      	ldr	r0, [r7, #4]
    791c:	4903      	ldr	r1, [pc, #12]	(792c <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    791e:	f7ff ffc9 	bl	78b4 <_ZN14Asservissement15setAngularSpeedEf>
    }

    /*setEnabledPIDDistance(true);
    setEnabledPIDAngle(true);
    resetFixedDuty();*/
}
    7922:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7926:	46bd      	mov	sp, r7
    7928:	bd80      	pop	{r7, pc}
    792a:	46c0      	nop			(mov r8, r8)
    792c:	00000000 	.word	0x00000000

00007930 <_ZN14Asservissement14getLinearSpeedEv>:

Distance Asservissement::getLinearSpeed()
    7930:	b480      	push	{r7}
    7932:	b083      	sub	sp, #12
    7934:	af00      	add	r7, sp, #0
    7936:	6078      	str	r0, [r7, #4]
{
  /*  if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getLeftPWM();
    else*/
        return vitesseLineaire;
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	6cdb      	ldr	r3, [r3, #76]
}
    793c:	4618      	mov	r0, r3
    793e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7942:	46bd      	mov	sp, r7
    7944:	bc80      	pop	{r7}
    7946:	4770      	bx	lr

00007948 <_ZN14Asservissement15getAngularSpeedEv>:

Angle Asservissement::getAngularSpeed()
    7948:	b480      	push	{r7}
    794a:	b083      	sub	sp, #12
    794c:	af00      	add	r7, sp, #0
    794e:	6078      	str	r0, [r7, #4]
{
   /* if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
    7950:	687b      	ldr	r3, [r7, #4]
    7952:	6d1b      	ldr	r3, [r3, #80]
}
    7954:	4618      	mov	r0, r3
    7956:	f107 070c 	add.w	r7, r7, #12	; 0xc
    795a:	46bd      	mov	sp, r7
    795c:	bc80      	pop	{r7}
    795e:	4770      	bx	lr

00007960 <_ZN14Asservissement8finMatchEv>:
    Asservissement::asservissement->update();
}

#endif

void Asservissement::finMatch()
    7960:	b480      	push	{r7}
    7962:	af00      	add	r7, sp, #0
{
    Asservissement::matchFini = true;
    7964:	4b03      	ldr	r3, [pc, #12]	(7974 <_ZN14Asservissement8finMatchEv+0x14>)
    7966:	f04f 0201 	mov.w	r2, #1	; 0x1
    796a:	701a      	strb	r2, [r3, #0]
    #ifdef ROBOTHW


    #endif
}
    796c:	46bd      	mov	sp, r7
    796e:	bc80      	pop	{r7}
    7970:	4770      	bx	lr
    7972:	46c0      	nop			(mov r8, r8)
    7974:	20000574 	.word	0x20000574

00007978 <_ZN14Asservissement21setEnabledPIDDistanceEb>:

void Asservissement::setEnabledPIDDistance(bool enabled)
    7978:	b480      	push	{r7}
    797a:	b083      	sub	sp, #12
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	460b      	mov	r3, r1
    7982:	70fb      	strb	r3, [r7, #3]
{
    activePIDDistance = enabled;
    7984:	687a      	ldr	r2, [r7, #4]
    7986:	78fb      	ldrb	r3, [r7, #3]
    7988:	f882 3054 	strb.w	r3, [r2, #84]
}
    798c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7990:	46bd      	mov	sp, r7
    7992:	bc80      	pop	{r7}
    7994:	4770      	bx	lr
    7996:	46c0      	nop			(mov r8, r8)

00007998 <_ZN14Asservissement18setEnabledPIDAngleEb>:

void Asservissement::setEnabledPIDAngle(bool enabled)
    7998:	b480      	push	{r7}
    799a:	b083      	sub	sp, #12
    799c:	af00      	add	r7, sp, #0
    799e:	6078      	str	r0, [r7, #4]
    79a0:	460b      	mov	r3, r1
    79a2:	70fb      	strb	r3, [r7, #3]
{
    activePIDAngle = enabled;
    79a4:	687a      	ldr	r2, [r7, #4]
    79a6:	78fb      	ldrb	r3, [r7, #3]
    79a8:	f882 3055 	strb.w	r3, [r2, #85]
}
    79ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    79b0:	46bd      	mov	sp, r7
    79b2:	bc80      	pop	{r7}
    79b4:	4770      	bx	lr
    79b6:	46c0      	nop			(mov r8, r8)

000079b8 <_ZN14Asservissement13setLinearDutyEf>:

void Asservissement::setLinearDuty(float duty)
    79b8:	b580      	push	{r7, lr}
    79ba:	b086      	sub	sp, #24
    79bc:	af00      	add	r7, sp, #0
    79be:	6178      	str	r0, [r7, #20]
    79c0:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDDistance(false);
    79c2:	6978      	ldr	r0, [r7, #20]
    79c4:	f04f 0100 	mov.w	r1, #0	; 0x0
    79c8:	f7ff ffd6 	bl	7978 <_ZN14Asservissement21setEnabledPIDDistanceEb>
    fixedLinearDuty = MAX( MIN( duty, FIXED_LINEAR_DUTY_MAX), -FIXED_LINEAR_DUTY_MAX);
    79cc:	6938      	ldr	r0, [r7, #16]
    79ce:	f013 f803 	bl	1a9d8 <__aeabi_f2d>
    79d2:	4602      	mov	r2, r0
    79d4:	460b      	mov	r3, r1
    79d6:	4610      	mov	r0, r2
    79d8:	4619      	mov	r1, r3
    79da:	a221      	add	r2, pc, #132	(adr r2, 7a60 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    79dc:	ca0c      	ldmia	r2!, {r2, r3}
    79de:	f013 fadd 	bl	1af9c <__aeabi_dcmpgt>
    79e2:	4603      	mov	r3, r0
    79e4:	2b00      	cmp	r3, #0
    79e6:	d003      	beq.n	79f0 <_ZN14Asservissement13setLinearDutyEf+0x38>
    79e8:	f04f 0200 	mov.w	r2, #0	; 0x0
    79ec:	60ba      	str	r2, [r7, #8]
    79ee:	e015      	b.n	7a1c <_ZN14Asservissement13setLinearDutyEf+0x64>
    79f0:	6938      	ldr	r0, [r7, #16]
    79f2:	f012 fff1 	bl	1a9d8 <__aeabi_f2d>
    79f6:	4602      	mov	r2, r0
    79f8:	460b      	mov	r3, r1
    79fa:	f04f 0100 	mov.w	r1, #0	; 0x0
    79fe:	70f9      	strb	r1, [r7, #3]
    7a00:	4610      	mov	r0, r2
    7a02:	4619      	mov	r1, r3
    7a04:	a218      	add	r2, pc, #96	(adr r2, 7a68 <_ZN14Asservissement13setLinearDutyEf+0xb0>)
    7a06:	ca0c      	ldmia	r2!, {r2, r3}
    7a08:	f013 faaa 	bl	1af60 <__aeabi_dcmplt>
    7a0c:	4603      	mov	r3, r0
    7a0e:	2b00      	cmp	r3, #0
    7a10:	d002      	beq.n	7a18 <_ZN14Asservissement13setLinearDutyEf+0x60>
    7a12:	f04f 0301 	mov.w	r3, #1	; 0x1
    7a16:	70fb      	strb	r3, [r7, #3]
    7a18:	78fb      	ldrb	r3, [r7, #3]
    7a1a:	60bb      	str	r3, [r7, #8]
    7a1c:	68ba      	ldr	r2, [r7, #8]
    7a1e:	2a00      	cmp	r2, #0
    7a20:	d002      	beq.n	7a28 <_ZN14Asservissement13setLinearDutyEf+0x70>
    7a22:	4b13      	ldr	r3, [pc, #76]	(7a70 <_ZN14Asservissement13setLinearDutyEf+0xb8>)
    7a24:	607b      	str	r3, [r7, #4]
    7a26:	e014      	b.n	7a52 <_ZN14Asservissement13setLinearDutyEf+0x9a>
    7a28:	6938      	ldr	r0, [r7, #16]
    7a2a:	f012 ffd5 	bl	1a9d8 <__aeabi_f2d>
    7a2e:	4602      	mov	r2, r0
    7a30:	460b      	mov	r3, r1
    7a32:	4610      	mov	r0, r2
    7a34:	4619      	mov	r1, r3
    7a36:	a20a      	add	r2, pc, #40	(adr r2, 7a60 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    7a38:	ca0c      	ldmia	r2!, {r2, r3}
    7a3a:	f013 faaf 	bl	1af9c <__aeabi_dcmpgt>
    7a3e:	4603      	mov	r3, r0
    7a40:	2b00      	cmp	r3, #0
    7a42:	d002      	beq.n	7a4a <_ZN14Asservissement13setLinearDutyEf+0x92>
    7a44:	4a0b      	ldr	r2, [pc, #44]	(7a74 <_ZN14Asservissement13setLinearDutyEf+0xbc>)
    7a46:	60fa      	str	r2, [r7, #12]
    7a48:	e001      	b.n	7a4e <_ZN14Asservissement13setLinearDutyEf+0x96>
    7a4a:	693b      	ldr	r3, [r7, #16]
    7a4c:	60fb      	str	r3, [r7, #12]
    7a4e:	68fa      	ldr	r2, [r7, #12]
    7a50:	607a      	str	r2, [r7, #4]
    7a52:	697b      	ldr	r3, [r7, #20]
    7a54:	687a      	ldr	r2, [r7, #4]
    7a56:	659a      	str	r2, [r3, #88]
}
    7a58:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7a5c:	46bd      	mov	sp, r7
    7a5e:	bd80      	pop	{r7, pc}
    7a60:	9999999a 	.word	0x9999999a
    7a64:	3fc99999 	.word	0x3fc99999
    7a68:	9999999a 	.word	0x9999999a
    7a6c:	bfc99999 	.word	0xbfc99999
    7a70:	be4ccccd 	.word	0xbe4ccccd
    7a74:	3e4ccccd 	.word	0x3e4ccccd

00007a78 <_ZN14Asservissement14setAngularDutyEf>:

void Asservissement::setAngularDuty(float duty)
    7a78:	b580      	push	{r7, lr}
    7a7a:	b086      	sub	sp, #24
    7a7c:	af00      	add	r7, sp, #0
    7a7e:	6178      	str	r0, [r7, #20]
    7a80:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDAngle(false);
    7a82:	6978      	ldr	r0, [r7, #20]
    7a84:	f04f 0100 	mov.w	r1, #0	; 0x0
    7a88:	f7ff ff86 	bl	7998 <_ZN14Asservissement18setEnabledPIDAngleEb>
    fixedAngularDuty = MAX( MIN( duty, FIXED_ANGULAR_DUTY_MAX), -FIXED_ANGULAR_DUTY_MAX);
    7a8c:	6938      	ldr	r0, [r7, #16]
    7a8e:	f012 ffa3 	bl	1a9d8 <__aeabi_f2d>
    7a92:	4602      	mov	r2, r0
    7a94:	460b      	mov	r3, r1
    7a96:	4610      	mov	r0, r2
    7a98:	4619      	mov	r1, r3
    7a9a:	a221      	add	r2, pc, #132	(adr r2, 7b20 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    7a9c:	ca0c      	ldmia	r2!, {r2, r3}
    7a9e:	f013 fa7d 	bl	1af9c <__aeabi_dcmpgt>
    7aa2:	4603      	mov	r3, r0
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d003      	beq.n	7ab0 <_ZN14Asservissement14setAngularDutyEf+0x38>
    7aa8:	f04f 0200 	mov.w	r2, #0	; 0x0
    7aac:	60ba      	str	r2, [r7, #8]
    7aae:	e015      	b.n	7adc <_ZN14Asservissement14setAngularDutyEf+0x64>
    7ab0:	6938      	ldr	r0, [r7, #16]
    7ab2:	f012 ff91 	bl	1a9d8 <__aeabi_f2d>
    7ab6:	4602      	mov	r2, r0
    7ab8:	460b      	mov	r3, r1
    7aba:	f04f 0100 	mov.w	r1, #0	; 0x0
    7abe:	70f9      	strb	r1, [r7, #3]
    7ac0:	4610      	mov	r0, r2
    7ac2:	4619      	mov	r1, r3
    7ac4:	a218      	add	r2, pc, #96	(adr r2, 7b28 <_ZN14Asservissement14setAngularDutyEf+0xb0>)
    7ac6:	ca0c      	ldmia	r2!, {r2, r3}
    7ac8:	f013 fa4a 	bl	1af60 <__aeabi_dcmplt>
    7acc:	4603      	mov	r3, r0
    7ace:	2b00      	cmp	r3, #0
    7ad0:	d002      	beq.n	7ad8 <_ZN14Asservissement14setAngularDutyEf+0x60>
    7ad2:	f04f 0301 	mov.w	r3, #1	; 0x1
    7ad6:	70fb      	strb	r3, [r7, #3]
    7ad8:	78fb      	ldrb	r3, [r7, #3]
    7ada:	60bb      	str	r3, [r7, #8]
    7adc:	68ba      	ldr	r2, [r7, #8]
    7ade:	2a00      	cmp	r2, #0
    7ae0:	d002      	beq.n	7ae8 <_ZN14Asservissement14setAngularDutyEf+0x70>
    7ae2:	4b13      	ldr	r3, [pc, #76]	(7b30 <_ZN14Asservissement14setAngularDutyEf+0xb8>)
    7ae4:	607b      	str	r3, [r7, #4]
    7ae6:	e014      	b.n	7b12 <_ZN14Asservissement14setAngularDutyEf+0x9a>
    7ae8:	6938      	ldr	r0, [r7, #16]
    7aea:	f012 ff75 	bl	1a9d8 <__aeabi_f2d>
    7aee:	4602      	mov	r2, r0
    7af0:	460b      	mov	r3, r1
    7af2:	4610      	mov	r0, r2
    7af4:	4619      	mov	r1, r3
    7af6:	a20a      	add	r2, pc, #40	(adr r2, 7b20 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    7af8:	ca0c      	ldmia	r2!, {r2, r3}
    7afa:	f013 fa4f 	bl	1af9c <__aeabi_dcmpgt>
    7afe:	4603      	mov	r3, r0
    7b00:	2b00      	cmp	r3, #0
    7b02:	d002      	beq.n	7b0a <_ZN14Asservissement14setAngularDutyEf+0x92>
    7b04:	4a0b      	ldr	r2, [pc, #44]	(7b34 <_ZN14Asservissement14setAngularDutyEf+0xbc>)
    7b06:	60fa      	str	r2, [r7, #12]
    7b08:	e001      	b.n	7b0e <_ZN14Asservissement14setAngularDutyEf+0x96>
    7b0a:	693b      	ldr	r3, [r7, #16]
    7b0c:	60fb      	str	r3, [r7, #12]
    7b0e:	68fa      	ldr	r2, [r7, #12]
    7b10:	607a      	str	r2, [r7, #4]
    7b12:	697b      	ldr	r3, [r7, #20]
    7b14:	687a      	ldr	r2, [r7, #4]
    7b16:	65da      	str	r2, [r3, #92]
}
    7b18:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7b1c:	46bd      	mov	sp, r7
    7b1e:	bd80      	pop	{r7, pc}
    7b20:	9999999a 	.word	0x9999999a
    7b24:	3fc99999 	.word	0x3fc99999
    7b28:	9999999a 	.word	0x9999999a
    7b2c:	bfc99999 	.word	0xbfc99999
    7b30:	be4ccccd 	.word	0xbe4ccccd
    7b34:	3e4ccccd 	.word	0x3e4ccccd

00007b38 <_ZN14Asservissement14resetFixedDutyEv>:

void Asservissement::resetFixedDuty()
    7b38:	b480      	push	{r7}
    7b3a:	b083      	sub	sp, #12
    7b3c:	af00      	add	r7, sp, #0
    7b3e:	6078      	str	r0, [r7, #4]
{
    fixedLinearDuty = 0.;
    7b40:	687a      	ldr	r2, [r7, #4]
    7b42:	4b05      	ldr	r3, [pc, #20]	(7b58 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    7b44:	6593      	str	r3, [r2, #88]
    fixedAngularDuty = 0.;
    7b46:	687a      	ldr	r2, [r7, #4]
    7b48:	4b03      	ldr	r3, [pc, #12]	(7b58 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    7b4a:	65d3      	str	r3, [r2, #92]
}
    7b4c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7b50:	46bd      	mov	sp, r7
    7b52:	bc80      	pop	{r7}
    7b54:	4770      	bx	lr
    7b56:	46c0      	nop			(mov r8, r8)
    7b58:	00000000 	.word	0x00000000

00007b5c <_ZN14Asservissement6updateEv>:
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
}

void Asservissement::update(void)
    7b5c:	b590      	push	{r4, r7, lr}
    7b5e:	b09f      	sub	sp, #124
    7b60:	af00      	add	r7, sp, #0
    7b62:	6478      	str	r0, [r7, #68]
{
#ifdef ROBOTHW
    #if DEBUG_ODOMEDTRIE == 1
    PositionPlusAngle pos = Odometrie::odometrie->getPos();
    7b64:	4bee      	ldr	r3, [pc, #952]	(7f20 <_ZN14Asservissement6updateEv+0x3c4>)
    7b66:	681a      	ldr	r2, [r3, #0]
    7b68:	f107 0354 	add.w	r3, r7, #84	; 0x54
    7b6c:	4618      	mov	r0, r3
    7b6e:	4611      	mov	r1, r2
    7b70:	f002 f9ea 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    Angle absAngle = Odometrie::odometrie->getAbsoluteAngle();
    7b74:	4bea      	ldr	r3, [pc, #936]	(7f20 <_ZN14Asservissement6updateEv+0x3c4>)
    7b76:	681b      	ldr	r3, [r3, #0]
    7b78:	4618      	mov	r0, r3
    7b7a:	f002 f9d9 	bl	9f30 <_ZNK9Odometrie16getAbsoluteAngleEv>
    7b7e:	4603      	mov	r3, r0
    7b80:	663b      	str	r3, [r7, #96]
    if ( pos.position.x > 400. /* absAngle > 3.14159265358979323846*2.*/)
    7b82:	6d7b      	ldr	r3, [r7, #84]
    7b84:	4618      	mov	r0, r3
    7b86:	49e7      	ldr	r1, [pc, #924]	(7f24 <_ZN14Asservissement6updateEv+0x3c8>)
    7b88:	f013 fd52 	bl	1b630 <__aeabi_fcmpgt>
    7b8c:	4603      	mov	r3, r0
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d004      	beq.n	7b9c <_ZN14Asservissement6updateEv+0x40>
        Led::setOn(0);
    7b92:	f04f 0000 	mov.w	r0, #0	; 0x0
    7b96:	f004 fd4f 	bl	c638 <_ZN3Led5setOnEi>
    7b9a:	e003      	b.n	7ba4 <_ZN14Asservissement6updateEv+0x48>
    else
        Led::setOff(0);
    7b9c:	f04f 0000 	mov.w	r0, #0	; 0x0
    7ba0:	f004 fd0a 	bl	c5b8 <_ZN3Led6setOffEi>
    #endif
#endif

    asserCount++;
    7ba4:	6c7b      	ldr	r3, [r7, #68]
    7ba6:	6c9b      	ldr	r3, [r3, #72]
    7ba8:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7bac:	6c7b      	ldr	r3, [r7, #68]
    7bae:	649a      	str	r2, [r3, #72]

    if (true)
    {

        PositionPlusAngle positionPlusAngleActuelle = odometrie->getPos();      //Variable juste pour avoir un code plus lisible par la suite
    7bb0:	6c7b      	ldr	r3, [r7, #68]
    7bb2:	6c5a      	ldr	r2, [r3, #68]
    7bb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
    7bb8:	4618      	mov	r0, r3
    7bba:	4611      	mov	r1, r2
    7bbc:	f002 f9c4 	bl	9f48 <_ZNK9Odometrie6getPosEv>
        Angle vitesse_angulaire_atteinte = odometrie->getVitesseAngulaire();    //idem
    7bc0:	6c7b      	ldr	r3, [r7, #68]
    7bc2:	6c5b      	ldr	r3, [r3, #68]
    7bc4:	4618      	mov	r0, r3
    7bc6:	f002 f99b 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    7bca:	4603      	mov	r3, r0
    7bcc:	667b      	str	r3, [r7, #100]
        Distance vitesse_lineaire_atteinte = odometrie->getVitesseLineaire();   //idem
    7bce:	6c7b      	ldr	r3, [r7, #68]
    7bd0:	6c5b      	ldr	r3, [r3, #68]
    7bd2:	4618      	mov	r0, r3
    7bd4:	f002 f9a0 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    7bd8:	4603      	mov	r3, r0
    7bda:	66bb      	str	r3, [r7, #104]

        //Puis on les récupéres

        float vitesse_lineaire_a_atteindre = getLinearSpeed();
    7bdc:	6c78      	ldr	r0, [r7, #68]
    7bde:	f7ff fea7 	bl	7930 <_ZN14Asservissement14getLinearSpeedEv>
    7be2:	4603      	mov	r3, r0
    7be4:	66fb      	str	r3, [r7, #108]
        float vitesse_angulaire_a_atteindre = getAngularSpeed();
    7be6:	6c78      	ldr	r0, [r7, #68]
    7be8:	f7ff feae 	bl	7948 <_ZN14Asservissement15getAngularSpeedEv>
    7bec:	4603      	mov	r3, r0
    7bee:	673b      	str	r3, [r7, #112]

#ifdef ROUES


        //on filtre l'erreur de vitesse lineaire et angulaire
        linearDutySent = activePIDDistance ? pid_filter_distance.getFilteredValue(vitesse_lineaire_a_atteindre-vitesse_lineaire_atteinte) : fixedLinearDuty;
    7bf0:	6c7b      	ldr	r3, [r7, #68]
    7bf2:	f893 3054 	ldrb.w	r3, [r3, #84]
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	d00e      	beq.n	7c18 <_ZN14Asservissement6updateEv+0xbc>
    7bfa:	6c7b      	ldr	r3, [r7, #68]
    7bfc:	f103 0408 	add.w	r4, r3, #8	; 0x8
    7c00:	6ef8      	ldr	r0, [r7, #108]
    7c02:	6eb9      	ldr	r1, [r7, #104]
    7c04:	f013 fa50 	bl	1b0a8 <__aeabi_fsub>
    7c08:	4603      	mov	r3, r0
    7c0a:	4620      	mov	r0, r4
    7c0c:	4619      	mov	r1, r3
    7c0e:	f002 feed 	bl	a9ec <_ZN17PIDFilterDistance16getFilteredValueEf>
    7c12:	4603      	mov	r3, r0
    7c14:	607b      	str	r3, [r7, #4]
    7c16:	e002      	b.n	7c1e <_ZN14Asservissement6updateEv+0xc2>
    7c18:	6c7b      	ldr	r3, [r7, #68]
    7c1a:	6d9b      	ldr	r3, [r3, #88]
    7c1c:	607b      	str	r3, [r7, #4]
    7c1e:	6c7b      	ldr	r3, [r7, #68]
    7c20:	687a      	ldr	r2, [r7, #4]
    7c22:	601a      	str	r2, [r3, #0]
        angularDutySent = activePIDAngle ? pid_filter_angle.getFilteredValue(vitesse_angulaire_a_atteindre-vitesse_angulaire_atteinte) : fixedAngularDuty;
    7c24:	6c7b      	ldr	r3, [r7, #68]
    7c26:	f893 3055 	ldrb.w	r3, [r3, #85]
    7c2a:	2b00      	cmp	r3, #0
    7c2c:	d00e      	beq.n	7c4c <_ZN14Asservissement6updateEv+0xf0>
    7c2e:	6c7b      	ldr	r3, [r7, #68]
    7c30:	f103 0410 	add.w	r4, r3, #16	; 0x10
    7c34:	6f38      	ldr	r0, [r7, #112]
    7c36:	6e79      	ldr	r1, [r7, #100]
    7c38:	f013 fa36 	bl	1b0a8 <__aeabi_fsub>
    7c3c:	4603      	mov	r3, r0
    7c3e:	4620      	mov	r0, r4
    7c40:	4619      	mov	r1, r3
    7c42:	f002 fe65 	bl	a910 <_ZN14PIDFilterAngle16getFilteredValueEf>
    7c46:	4603      	mov	r3, r0
    7c48:	60bb      	str	r3, [r7, #8]
    7c4a:	e002      	b.n	7c52 <_ZN14Asservissement6updateEv+0xf6>
    7c4c:	6c7b      	ldr	r3, [r7, #68]
    7c4e:	6ddb      	ldr	r3, [r3, #92]
    7c50:	60bb      	str	r3, [r7, #8]
    7c52:	6c7b      	ldr	r3, [r7, #68]
    7c54:	68ba      	ldr	r2, [r7, #8]
    7c56:	605a      	str	r2, [r3, #4]

        //Et on borne la somme de ces valeurs filtrée entre -> voir ci dessous
        float limit = 1.0f;
    7c58:	4bb3      	ldr	r3, [pc, #716]	(7f28 <_ZN14Asservissement6updateEv+0x3cc>)
    7c5a:	677b      	str	r3, [r7, #116]
        linearDutySent =  MIN(MAX(linearDutySent, -limit),limit);
    7c5c:	6c7b      	ldr	r3, [r7, #68]
    7c5e:	681a      	ldr	r2, [r3, #0]
    7c60:	6f7b      	ldr	r3, [r7, #116]
    7c62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7c66:	4610      	mov	r0, r2
    7c68:	4619      	mov	r1, r3
    7c6a:	f013 fcc3 	bl	1b5f4 <__aeabi_fcmplt>
    7c6e:	4603      	mov	r3, r0
    7c70:	2b00      	cmp	r3, #0
    7c72:	d004      	beq.n	7c7e <_ZN14Asservissement6updateEv+0x122>
    7c74:	6f7b      	ldr	r3, [r7, #116]
    7c76:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7c7a:	613b      	str	r3, [r7, #16]
    7c7c:	e002      	b.n	7c84 <_ZN14Asservissement6updateEv+0x128>
    7c7e:	6c7b      	ldr	r3, [r7, #68]
    7c80:	681b      	ldr	r3, [r3, #0]
    7c82:	613b      	str	r3, [r7, #16]
    7c84:	6938      	ldr	r0, [r7, #16]
    7c86:	6f79      	ldr	r1, [r7, #116]
    7c88:	f013 fcd2 	bl	1b630 <__aeabi_fcmpgt>
    7c8c:	4603      	mov	r3, r0
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d002      	beq.n	7c98 <_ZN14Asservissement6updateEv+0x13c>
    7c92:	6f7b      	ldr	r3, [r7, #116]
    7c94:	60fb      	str	r3, [r7, #12]
    7c96:	e015      	b.n	7cc4 <_ZN14Asservissement6updateEv+0x168>
    7c98:	6c7b      	ldr	r3, [r7, #68]
    7c9a:	681a      	ldr	r2, [r3, #0]
    7c9c:	6f7b      	ldr	r3, [r7, #116]
    7c9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7ca2:	4610      	mov	r0, r2
    7ca4:	4619      	mov	r1, r3
    7ca6:	f013 fca5 	bl	1b5f4 <__aeabi_fcmplt>
    7caa:	4603      	mov	r3, r0
    7cac:	2b00      	cmp	r3, #0
    7cae:	d004      	beq.n	7cba <_ZN14Asservissement6updateEv+0x15e>
    7cb0:	6f7b      	ldr	r3, [r7, #116]
    7cb2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7cb6:	617b      	str	r3, [r7, #20]
    7cb8:	e002      	b.n	7cc0 <_ZN14Asservissement6updateEv+0x164>
    7cba:	6c7b      	ldr	r3, [r7, #68]
    7cbc:	681b      	ldr	r3, [r3, #0]
    7cbe:	617b      	str	r3, [r7, #20]
    7cc0:	697a      	ldr	r2, [r7, #20]
    7cc2:	60fa      	str	r2, [r7, #12]
    7cc4:	6c7b      	ldr	r3, [r7, #68]
    7cc6:	68fa      	ldr	r2, [r7, #12]
    7cc8:	601a      	str	r2, [r3, #0]
        angularDutySent = MIN(MAX(angularDutySent, -limit),limit);
    7cca:	6c7b      	ldr	r3, [r7, #68]
    7ccc:	685a      	ldr	r2, [r3, #4]
    7cce:	6f7b      	ldr	r3, [r7, #116]
    7cd0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7cd4:	4610      	mov	r0, r2
    7cd6:	4619      	mov	r1, r3
    7cd8:	f013 fc8c 	bl	1b5f4 <__aeabi_fcmplt>
    7cdc:	4603      	mov	r3, r0
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d004      	beq.n	7cec <_ZN14Asservissement6updateEv+0x190>
    7ce2:	6f7b      	ldr	r3, [r7, #116]
    7ce4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7ce8:	61fb      	str	r3, [r7, #28]
    7cea:	e002      	b.n	7cf2 <_ZN14Asservissement6updateEv+0x196>
    7cec:	6c7b      	ldr	r3, [r7, #68]
    7cee:	685b      	ldr	r3, [r3, #4]
    7cf0:	61fb      	str	r3, [r7, #28]
    7cf2:	69f8      	ldr	r0, [r7, #28]
    7cf4:	6f79      	ldr	r1, [r7, #116]
    7cf6:	f013 fc9b 	bl	1b630 <__aeabi_fcmpgt>
    7cfa:	4603      	mov	r3, r0
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d002      	beq.n	7d06 <_ZN14Asservissement6updateEv+0x1aa>
    7d00:	6f7b      	ldr	r3, [r7, #116]
    7d02:	61bb      	str	r3, [r7, #24]
    7d04:	e015      	b.n	7d32 <_ZN14Asservissement6updateEv+0x1d6>
    7d06:	6c7b      	ldr	r3, [r7, #68]
    7d08:	685a      	ldr	r2, [r3, #4]
    7d0a:	6f7b      	ldr	r3, [r7, #116]
    7d0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7d10:	4610      	mov	r0, r2
    7d12:	4619      	mov	r1, r3
    7d14:	f013 fc6e 	bl	1b5f4 <__aeabi_fcmplt>
    7d18:	4603      	mov	r3, r0
    7d1a:	2b00      	cmp	r3, #0
    7d1c:	d004      	beq.n	7d28 <_ZN14Asservissement6updateEv+0x1cc>
    7d1e:	6f7b      	ldr	r3, [r7, #116]
    7d20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7d24:	623b      	str	r3, [r7, #32]
    7d26:	e002      	b.n	7d2e <_ZN14Asservissement6updateEv+0x1d2>
    7d28:	6c7b      	ldr	r3, [r7, #68]
    7d2a:	685b      	ldr	r3, [r3, #4]
    7d2c:	623b      	str	r3, [r7, #32]
    7d2e:	6a3a      	ldr	r2, [r7, #32]
    7d30:	61ba      	str	r2, [r7, #24]
    7d32:	6c7b      	ldr	r3, [r7, #68]
    7d34:	69ba      	ldr	r2, [r7, #24]
    7d36:	605a      	str	r2, [r3, #4]
 //       linearDutySent = fabs(linearDutySent) > 0.05 || vitesse_lineaire_a_atteindre > 0.01 ? linearDutySent : 0;
 //       angularDutySent = fabs(angularDutySent) > 0.05 || vitesse_angulaire_a_atteindre > 0.0001 ? angularDutySent : 0;


        // test d'arret complet si c'est l'ordre qu'on lui donne
        if (vitesse_lineaire_a_atteindre == 0.0f && vitesse_angulaire_a_atteindre == 0.0f)
    7d38:	6ef8      	ldr	r0, [r7, #108]
    7d3a:	497c      	ldr	r1, [pc, #496]	(7f2c <_ZN14Asservissement6updateEv+0x3d0>)
    7d3c:	f013 fc50 	bl	1b5e0 <__aeabi_fcmpeq>
    7d40:	4603      	mov	r3, r0
    7d42:	2b00      	cmp	r3, #0
    7d44:	d00c      	beq.n	7d60 <_ZN14Asservissement6updateEv+0x204>
    7d46:	6f38      	ldr	r0, [r7, #112]
    7d48:	4978      	ldr	r1, [pc, #480]	(7f2c <_ZN14Asservissement6updateEv+0x3d0>)
    7d4a:	f013 fc49 	bl	1b5e0 <__aeabi_fcmpeq>
    7d4e:	4603      	mov	r3, r0
    7d50:	2b00      	cmp	r3, #0
    7d52:	d005      	beq.n	7d60 <_ZN14Asservissement6updateEv+0x204>
        {
            linearDutySent = 0.0f;
    7d54:	6c7a      	ldr	r2, [r7, #68]
    7d56:	4b75      	ldr	r3, [pc, #468]	(7f2c <_ZN14Asservissement6updateEv+0x3d0>)
    7d58:	6013      	str	r3, [r2, #0]
            angularDutySent = 0.0f;
    7d5a:	6c7a      	ldr	r2, [r7, #68]
    7d5c:	4b73      	ldr	r3, [pc, #460]	(7f2c <_ZN14Asservissement6updateEv+0x3d0>)
    7d5e:	6053      	str	r3, [r2, #4]
        {
        #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
            roues.droite.tourne(0.8*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));
            roues.gauche.tourne(0.8*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));
        #else
            roues.droite.tourne(0.95*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));//*1
    7d60:	6c7b      	ldr	r3, [r7, #68]
    7d62:	f103 0328 	add.w	r3, r3, #40	; 0x28
    7d66:	627b      	str	r3, [r7, #36]
    7d68:	6c7b      	ldr	r3, [r7, #68]
    7d6a:	681a      	ldr	r2, [r3, #0]
    7d6c:	6c7b      	ldr	r3, [r7, #68]
    7d6e:	685b      	ldr	r3, [r3, #4]
    7d70:	4610      	mov	r0, r2
    7d72:	4619      	mov	r1, r3
    7d74:	f013 f99a 	bl	1b0ac <__addsf3>
    7d78:	4603      	mov	r3, r0
    7d7a:	461a      	mov	r2, r3
    7d7c:	6f7b      	ldr	r3, [r7, #116]
    7d7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7d82:	4610      	mov	r0, r2
    7d84:	4619      	mov	r1, r3
    7d86:	f013 fc35 	bl	1b5f4 <__aeabi_fcmplt>
    7d8a:	4603      	mov	r3, r0
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d004      	beq.n	7d9a <_ZN14Asservissement6updateEv+0x23e>
    7d90:	6f7b      	ldr	r3, [r7, #116]
    7d92:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7d96:	62fb      	str	r3, [r7, #44]
    7d98:	e009      	b.n	7dae <_ZN14Asservissement6updateEv+0x252>
    7d9a:	6c7b      	ldr	r3, [r7, #68]
    7d9c:	681a      	ldr	r2, [r3, #0]
    7d9e:	6c7b      	ldr	r3, [r7, #68]
    7da0:	685b      	ldr	r3, [r3, #4]
    7da2:	4610      	mov	r0, r2
    7da4:	4619      	mov	r1, r3
    7da6:	f013 f981 	bl	1b0ac <__addsf3>
    7daa:	4603      	mov	r3, r0
    7dac:	62fb      	str	r3, [r7, #44]
    7dae:	6af8      	ldr	r0, [r7, #44]
    7db0:	6f79      	ldr	r1, [r7, #116]
    7db2:	f013 fc3d 	bl	1b630 <__aeabi_fcmpgt>
    7db6:	4603      	mov	r3, r0
    7db8:	2b00      	cmp	r3, #0
    7dba:	d002      	beq.n	7dc2 <_ZN14Asservissement6updateEv+0x266>
    7dbc:	6f7b      	ldr	r3, [r7, #116]
    7dbe:	62bb      	str	r3, [r7, #40]
    7dc0:	e024      	b.n	7e0c <_ZN14Asservissement6updateEv+0x2b0>
    7dc2:	6c7b      	ldr	r3, [r7, #68]
    7dc4:	681a      	ldr	r2, [r3, #0]
    7dc6:	6c7b      	ldr	r3, [r7, #68]
    7dc8:	685b      	ldr	r3, [r3, #4]
    7dca:	4610      	mov	r0, r2
    7dcc:	4619      	mov	r1, r3
    7dce:	f013 f96d 	bl	1b0ac <__addsf3>
    7dd2:	4603      	mov	r3, r0
    7dd4:	461a      	mov	r2, r3
    7dd6:	6f7b      	ldr	r3, [r7, #116]
    7dd8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7ddc:	4610      	mov	r0, r2
    7dde:	4619      	mov	r1, r3
    7de0:	f013 fc08 	bl	1b5f4 <__aeabi_fcmplt>
    7de4:	4603      	mov	r3, r0
    7de6:	2b00      	cmp	r3, #0
    7de8:	d004      	beq.n	7df4 <_ZN14Asservissement6updateEv+0x298>
    7dea:	6f7b      	ldr	r3, [r7, #116]
    7dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7df0:	633b      	str	r3, [r7, #48]
    7df2:	e009      	b.n	7e08 <_ZN14Asservissement6updateEv+0x2ac>
    7df4:	6c7b      	ldr	r3, [r7, #68]
    7df6:	681a      	ldr	r2, [r3, #0]
    7df8:	6c7b      	ldr	r3, [r7, #68]
    7dfa:	685b      	ldr	r3, [r3, #4]
    7dfc:	4610      	mov	r0, r2
    7dfe:	4619      	mov	r1, r3
    7e00:	f013 f954 	bl	1b0ac <__addsf3>
    7e04:	4603      	mov	r3, r0
    7e06:	633b      	str	r3, [r7, #48]
    7e08:	6b3a      	ldr	r2, [r7, #48]
    7e0a:	62ba      	str	r2, [r7, #40]
    7e0c:	6ab8      	ldr	r0, [r7, #40]
    7e0e:	f012 fde3 	bl	1a9d8 <__aeabi_f2d>
    7e12:	4602      	mov	r2, r0
    7e14:	460b      	mov	r3, r1
    7e16:	4610      	mov	r0, r2
    7e18:	4619      	mov	r1, r3
    7e1a:	a23f      	add	r2, pc, #252	(adr r2, 7f18 <_ZN14Asservissement6updateEv+0x3bc>)
    7e1c:	ca0c      	ldmia	r2!, {r2, r3}
    7e1e:	f012 fe2f 	bl	1aa80 <__aeabi_dmul>
    7e22:	4602      	mov	r2, r0
    7e24:	460b      	mov	r3, r1
    7e26:	4610      	mov	r0, r2
    7e28:	4619      	mov	r1, r3
    7e2a:	f013 f8e9 	bl	1b000 <__aeabi_d2f>
    7e2e:	4603      	mov	r3, r0
    7e30:	6a78      	ldr	r0, [r7, #36]
    7e32:	4619      	mov	r1, r3
    7e34:	f005 fb24 	bl	d480 <_ZN4Roue6tourneEf>
            roues.gauche.tourne(0.95*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));//*1
    7e38:	6c7b      	ldr	r3, [r7, #68]
    7e3a:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7e3e:	637b      	str	r3, [r7, #52]
    7e40:	6c7b      	ldr	r3, [r7, #68]
    7e42:	681a      	ldr	r2, [r3, #0]
    7e44:	6c7b      	ldr	r3, [r7, #68]
    7e46:	685b      	ldr	r3, [r3, #4]
    7e48:	4610      	mov	r0, r2
    7e4a:	4619      	mov	r1, r3
    7e4c:	f013 f92c 	bl	1b0a8 <__aeabi_fsub>
    7e50:	4603      	mov	r3, r0
    7e52:	461a      	mov	r2, r3
    7e54:	6f7b      	ldr	r3, [r7, #116]
    7e56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7e5a:	4610      	mov	r0, r2
    7e5c:	4619      	mov	r1, r3
    7e5e:	f013 fbc9 	bl	1b5f4 <__aeabi_fcmplt>
    7e62:	4603      	mov	r3, r0
    7e64:	2b00      	cmp	r3, #0
    7e66:	d004      	beq.n	7e72 <_ZN14Asservissement6updateEv+0x316>
    7e68:	6f7b      	ldr	r3, [r7, #116]
    7e6a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7e6e:	63fb      	str	r3, [r7, #60]
    7e70:	e009      	b.n	7e86 <_ZN14Asservissement6updateEv+0x32a>
    7e72:	6c7b      	ldr	r3, [r7, #68]
    7e74:	681a      	ldr	r2, [r3, #0]
    7e76:	6c7b      	ldr	r3, [r7, #68]
    7e78:	685b      	ldr	r3, [r3, #4]
    7e7a:	4610      	mov	r0, r2
    7e7c:	4619      	mov	r1, r3
    7e7e:	f013 f913 	bl	1b0a8 <__aeabi_fsub>
    7e82:	4603      	mov	r3, r0
    7e84:	63fb      	str	r3, [r7, #60]
    7e86:	6bf8      	ldr	r0, [r7, #60]
    7e88:	6f79      	ldr	r1, [r7, #116]
    7e8a:	f013 fbd1 	bl	1b630 <__aeabi_fcmpgt>
    7e8e:	4603      	mov	r3, r0
    7e90:	2b00      	cmp	r3, #0
    7e92:	d002      	beq.n	7e9a <_ZN14Asservissement6updateEv+0x33e>
    7e94:	6f7b      	ldr	r3, [r7, #116]
    7e96:	63bb      	str	r3, [r7, #56]
    7e98:	e024      	b.n	7ee4 <_ZN14Asservissement6updateEv+0x388>
    7e9a:	6c7b      	ldr	r3, [r7, #68]
    7e9c:	681a      	ldr	r2, [r3, #0]
    7e9e:	6c7b      	ldr	r3, [r7, #68]
    7ea0:	685b      	ldr	r3, [r3, #4]
    7ea2:	4610      	mov	r0, r2
    7ea4:	4619      	mov	r1, r3
    7ea6:	f013 f8ff 	bl	1b0a8 <__aeabi_fsub>
    7eaa:	4603      	mov	r3, r0
    7eac:	461a      	mov	r2, r3
    7eae:	6f7b      	ldr	r3, [r7, #116]
    7eb0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7eb4:	4610      	mov	r0, r2
    7eb6:	4619      	mov	r1, r3
    7eb8:	f013 fb9c 	bl	1b5f4 <__aeabi_fcmplt>
    7ebc:	4603      	mov	r3, r0
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d004      	beq.n	7ecc <_ZN14Asservissement6updateEv+0x370>
    7ec2:	6f7b      	ldr	r3, [r7, #116]
    7ec4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7ec8:	643b      	str	r3, [r7, #64]
    7eca:	e009      	b.n	7ee0 <_ZN14Asservissement6updateEv+0x384>
    7ecc:	6c7b      	ldr	r3, [r7, #68]
    7ece:	681a      	ldr	r2, [r3, #0]
    7ed0:	6c7b      	ldr	r3, [r7, #68]
    7ed2:	685b      	ldr	r3, [r3, #4]
    7ed4:	4610      	mov	r0, r2
    7ed6:	4619      	mov	r1, r3
    7ed8:	f013 f8e6 	bl	1b0a8 <__aeabi_fsub>
    7edc:	4603      	mov	r3, r0
    7ede:	643b      	str	r3, [r7, #64]
    7ee0:	6c3a      	ldr	r2, [r7, #64]
    7ee2:	63ba      	str	r2, [r7, #56]
    7ee4:	6bb8      	ldr	r0, [r7, #56]
    7ee6:	f012 fd77 	bl	1a9d8 <__aeabi_f2d>
    7eea:	4602      	mov	r2, r0
    7eec:	460b      	mov	r3, r1
    7eee:	4610      	mov	r0, r2
    7ef0:	4619      	mov	r1, r3
    7ef2:	a209      	add	r2, pc, #36	(adr r2, 7f18 <_ZN14Asservissement6updateEv+0x3bc>)
    7ef4:	ca0c      	ldmia	r2!, {r2, r3}
    7ef6:	f012 fdc3 	bl	1aa80 <__aeabi_dmul>
    7efa:	4602      	mov	r2, r0
    7efc:	460b      	mov	r3, r1
    7efe:	4610      	mov	r0, r2
    7f00:	4619      	mov	r1, r3
    7f02:	f013 f87d 	bl	1b000 <__aeabi_d2f>
    7f06:	4603      	mov	r3, r0
    7f08:	6b78      	ldr	r0, [r7, #52]
    7f0a:	4619      	mov	r1, r3
    7f0c:	f005 fab8 	bl	d480 <_ZN4Roue6tourneEf>
        roues.droite.tourne(0.);
    }
#else
}
#endif
}
    7f10:	f107 077c 	add.w	r7, r7, #124	; 0x7c
    7f14:	46bd      	mov	sp, r7
    7f16:	bd90      	pop	{r4, r7, pc}
    7f18:	66666666 	.word	0x66666666
    7f1c:	3fee6666 	.word	0x3fee6666
    7f20:	20000580 	.word	0x20000580
    7f24:	43c80000 	.word	0x43c80000
    7f28:	3f800000 	.word	0x3f800000
    7f2c:	00000000 	.word	0x00000000

00007f30 <SysTick_Handler>:

#ifdef ROBOTHW
//pour lancer l'update à chaque tic d'horloge
extern "C" void SysTick_Handler()
    7f30:	b580      	push	{r7, lr}
    7f32:	af00      	add	r7, sp, #0
{
    // Count the number of SysTick_Handler call
    systick_count++;
    7f34:	4b09      	ldr	r3, [pc, #36]	(7f5c <SysTick_Handler+0x2c>)
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7f3c:	4b07      	ldr	r3, [pc, #28]	(7f5c <SysTick_Handler+0x2c>)
    7f3e:	601a      	str	r2, [r3, #0]
    if (systick_count%200 == 0){
        Led::toggle(0);
    }
#endif

    Odometrie::odometrie->update();
    7f40:	4b07      	ldr	r3, [pc, #28]	(7f60 <SysTick_Handler+0x30>)
    7f42:	681b      	ldr	r3, [r3, #0]
    7f44:	4618      	mov	r0, r3
    7f46:	f002 f8e9 	bl	a11c <_ZN9Odometrie6updateEv>

    StrategieV2::update();
    7f4a:	f00e fa39 	bl	163c0 <_ZN11StrategieV26updateEv>

    Asservissement::asservissement->update();
    7f4e:	4b05      	ldr	r3, [pc, #20]	(7f64 <SysTick_Handler+0x34>)
    7f50:	681b      	ldr	r3, [r3, #0]
    7f52:	4618      	mov	r0, r3
    7f54:	f7ff fe02 	bl	7b5c <_ZN14Asservissement6updateEv>
}
    7f58:	46bd      	mov	sp, r7
    7f5a:	bd80      	pop	{r7, pc}
    7f5c:	20000578 	.word	0x20000578
    7f60:	20000580 	.word	0x20000580
    7f64:	20000570 	.word	0x20000570

00007f68 <_ZN14AsservissementC1EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    7f68:	b580      	push	{r7, lr}
    7f6a:	b084      	sub	sp, #16
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	6078      	str	r0, [r7, #4]
    7f70:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    7f72:	687b      	ldr	r3, [r7, #4]
    7f74:	f103 0308 	add.w	r3, r3, #8	; 0x8
    7f78:	4618      	mov	r0, r3
    7f7a:	f002 fd23 	bl	a9c4 <_ZN17PIDFilterDistanceC1Ev>
    7f7e:	687b      	ldr	r3, [r7, #4]
    7f80:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7f84:	4618      	mov	r0, r3
    7f86:	f002 fcaf 	bl	a8e8 <_ZN14PIDFilterAngleC1Ev>
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	f103 0318 	add.w	r3, r3, #24	; 0x18
    7f90:	4618      	mov	r0, r3
    7f92:	f7fe f837 	bl	6004 <_ZN5RouesC1Ev>
    7f96:	687a      	ldr	r2, [r7, #4]
    7f98:	4b26      	ldr	r3, [pc, #152]	(8034 <_ZN14AsservissementC1EP9Odometrie+0xcc>)
    7f9a:	63d3      	str	r3, [r2, #60]
    7f9c:	687a      	ldr	r2, [r7, #4]
    7f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fa2:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    7fa4:	687a      	ldr	r2, [r7, #4]
    7fa6:	4b24      	ldr	r3, [pc, #144]	(8038 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7fa8:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    7faa:	687a      	ldr	r2, [r7, #4]
    7fac:	4b22      	ldr	r3, [pc, #136]	(8038 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7fae:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    7fb0:	687a      	ldr	r2, [r7, #4]
    7fb2:	683b      	ldr	r3, [r7, #0]
    7fb4:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    7fb6:	687a      	ldr	r2, [r7, #4]
    7fb8:	f04f 0301 	mov.w	r3, #1	; 0x1
    7fbc:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    7fc0:	687a      	ldr	r2, [r7, #4]
    7fc2:	f04f 0301 	mov.w	r3, #1	; 0x1
    7fc6:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    7fca:	6878      	ldr	r0, [r7, #4]
    7fcc:	f7ff fdb4 	bl	7b38 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7fd0:	687a      	ldr	r2, [r7, #4]
    7fd2:	4b19      	ldr	r3, [pc, #100]	(8038 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7fd4:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    7fd6:	687a      	ldr	r2, [r7, #4]
    7fd8:	4b17      	ldr	r3, [pc, #92]	(8038 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7fda:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7fdc:	4a17      	ldr	r2, [pc, #92]	(803c <_ZN14AsservissementC1EP9Odometrie+0xd4>)
    7fde:	687b      	ldr	r3, [r7, #4]
    7fe0:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    7fe2:	687a      	ldr	r2, [r7, #4]
    7fe4:	f04f 0300 	mov.w	r3, #0	; 0x0
    7fe8:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7fea:	f7fe f911 	bl	6210 <_ZN7Sensors10getSensorsEv>
    7fee:	4602      	mov	r2, r0
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    7ff4:	4a12      	ldr	r2, [pc, #72]	(8040 <_ZN14AsservissementC1EP9Odometrie+0xd8>)
    7ff6:	f04f 0303 	mov.w	r3, #3	; 0x3
    7ffa:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7ffc:	4a11      	ldr	r2, [pc, #68]	(8044 <_ZN14AsservissementC1EP9Odometrie+0xdc>)
    7ffe:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    8002:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    8004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8008:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    800a:	f04f 0301 	mov.w	r3, #1	; 0x1
    800e:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    8010:	f04f 0300 	mov.w	r3, #0	; 0x0
    8014:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    8016:	f04f 0301 	mov.w	r3, #1	; 0x1
    801a:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    801c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    8020:	4618      	mov	r0, r3
    8022:	f7f8 f8fb 	bl	21c <NVIC_Init>
#endif
}
    8026:	687b      	ldr	r3, [r7, #4]
    8028:	4618      	mov	r0, r3
    802a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    802e:	46bd      	mov	sp, r7
    8030:	bd80      	pop	{r7, pc}
    8032:	46c0      	nop			(mov r8, r8)
    8034:	3f800000 	.word	0x3f800000
    8038:	00000000 	.word	0x00000000
    803c:	20000570 	.word	0x20000570
    8040:	e000e010 	.word	0xe000e010
    8044:	e000e014 	.word	0xe000e014

00008048 <_ZN14AsservissementC2EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    8048:	b580      	push	{r7, lr}
    804a:	b084      	sub	sp, #16
    804c:	af00      	add	r7, sp, #0
    804e:	6078      	str	r0, [r7, #4]
    8050:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    8052:	687b      	ldr	r3, [r7, #4]
    8054:	f103 0308 	add.w	r3, r3, #8	; 0x8
    8058:	4618      	mov	r0, r3
    805a:	f002 fcb3 	bl	a9c4 <_ZN17PIDFilterDistanceC1Ev>
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	f103 0310 	add.w	r3, r3, #16	; 0x10
    8064:	4618      	mov	r0, r3
    8066:	f002 fc3f 	bl	a8e8 <_ZN14PIDFilterAngleC1Ev>
    806a:	687b      	ldr	r3, [r7, #4]
    806c:	f103 0318 	add.w	r3, r3, #24	; 0x18
    8070:	4618      	mov	r0, r3
    8072:	f7fd ffc7 	bl	6004 <_ZN5RouesC1Ev>
    8076:	687a      	ldr	r2, [r7, #4]
    8078:	4b26      	ldr	r3, [pc, #152]	(8114 <_ZN14AsservissementC2EP9Odometrie+0xcc>)
    807a:	63d3      	str	r3, [r2, #60]
    807c:	687a      	ldr	r2, [r7, #4]
    807e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8082:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    8084:	687a      	ldr	r2, [r7, #4]
    8086:	4b24      	ldr	r3, [pc, #144]	(8118 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    8088:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    808a:	687a      	ldr	r2, [r7, #4]
    808c:	4b22      	ldr	r3, [pc, #136]	(8118 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    808e:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    8090:	687a      	ldr	r2, [r7, #4]
    8092:	683b      	ldr	r3, [r7, #0]
    8094:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    8096:	687a      	ldr	r2, [r7, #4]
    8098:	f04f 0301 	mov.w	r3, #1	; 0x1
    809c:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    80a0:	687a      	ldr	r2, [r7, #4]
    80a2:	f04f 0301 	mov.w	r3, #1	; 0x1
    80a6:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    80aa:	6878      	ldr	r0, [r7, #4]
    80ac:	f7ff fd44 	bl	7b38 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    80b0:	687a      	ldr	r2, [r7, #4]
    80b2:	4b19      	ldr	r3, [pc, #100]	(8118 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    80b4:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    80b6:	687a      	ldr	r2, [r7, #4]
    80b8:	4b17      	ldr	r3, [pc, #92]	(8118 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    80ba:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    80bc:	4a17      	ldr	r2, [pc, #92]	(811c <_ZN14AsservissementC2EP9Odometrie+0xd4>)
    80be:	687b      	ldr	r3, [r7, #4]
    80c0:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    80c2:	687a      	ldr	r2, [r7, #4]
    80c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    80c8:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    80ca:	f7fe f8a1 	bl	6210 <_ZN7Sensors10getSensorsEv>
    80ce:	4602      	mov	r2, r0
    80d0:	687b      	ldr	r3, [r7, #4]
    80d2:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    80d4:	4a12      	ldr	r2, [pc, #72]	(8120 <_ZN14AsservissementC2EP9Odometrie+0xd8>)
    80d6:	f04f 0303 	mov.w	r3, #3	; 0x3
    80da:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    80dc:	4a11      	ldr	r2, [pc, #68]	(8124 <_ZN14AsservissementC2EP9Odometrie+0xdc>)
    80de:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    80e2:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    80e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80e8:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    80ea:	f04f 0301 	mov.w	r3, #1	; 0x1
    80ee:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    80f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    80f4:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    80f6:	f04f 0301 	mov.w	r3, #1	; 0x1
    80fa:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    80fc:	f107 030c 	add.w	r3, r7, #12	; 0xc
    8100:	4618      	mov	r0, r3
    8102:	f7f8 f88b 	bl	21c <NVIC_Init>
#endif
}
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	4618      	mov	r0, r3
    810a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    810e:	46bd      	mov	sp, r7
    8110:	bd80      	pop	{r7, pc}
    8112:	46c0      	nop			(mov r8, r8)
    8114:	3f800000 	.word	0x3f800000
    8118:	00000000 	.word	0x00000000
    811c:	20000570 	.word	0x20000570
    8120:	e000e010 	.word	0xe000e010
    8124:	e000e014 	.word	0xe000e014

00008128 <_ZN7CommandC2Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    8128:	b480      	push	{r7}
    812a:	b083      	sub	sp, #12
    812c:	af00      	add	r7, sp, #0
    812e:	6078      	str	r0, [r7, #4]
    8130:	687a      	ldr	r2, [r7, #4]
    8132:	4b06      	ldr	r3, [pc, #24]	(814c <_ZN7CommandC2Ev+0x24>)
    8134:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    8136:	4a06      	ldr	r2, [pc, #24]	(8150 <_ZN7CommandC2Ev+0x28>)
    8138:	f04f 0300 	mov.w	r3, #0	; 0x0
    813c:	7013      	strb	r3, [r2, #0]
}
    813e:	687b      	ldr	r3, [r7, #4]
    8140:	4618      	mov	r0, r3
    8142:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8146:	46bd      	mov	sp, r7
    8148:	bc80      	pop	{r7}
    814a:	4770      	bx	lr
    814c:	00022120 	.word	0x00022120
    8150:	2000057c 	.word	0x2000057c

00008154 <_ZN7CommandC1Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    8154:	b480      	push	{r7}
    8156:	b083      	sub	sp, #12
    8158:	af00      	add	r7, sp, #0
    815a:	6078      	str	r0, [r7, #4]
    815c:	687a      	ldr	r2, [r7, #4]
    815e:	4b06      	ldr	r3, [pc, #24]	(8178 <_ZN7CommandC1Ev+0x24>)
    8160:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    8162:	4a06      	ldr	r2, [pc, #24]	(817c <_ZN7CommandC1Ev+0x28>)
    8164:	f04f 0300 	mov.w	r3, #0	; 0x0
    8168:	7013      	strb	r3, [r2, #0]
}
    816a:	687b      	ldr	r3, [r7, #4]
    816c:	4618      	mov	r0, r3
    816e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8172:	46bd      	mov	sp, r7
    8174:	bc80      	pop	{r7}
    8176:	4770      	bx	lr
    8178:	00022120 	.word	0x00022120
    817c:	2000057c 	.word	0x2000057c

00008180 <_ZN7Command7getStopEv>:

Command::~Command()
{
}

bool Command::getStop(void)
    8180:	b480      	push	{r7}
    8182:	af00      	add	r7, sp, #0
{
    return Command::stop;
    8184:	4b02      	ldr	r3, [pc, #8]	(8190 <_ZN7Command7getStopEv+0x10>)
    8186:	781b      	ldrb	r3, [r3, #0]
}
    8188:	4618      	mov	r0, r3
    818a:	46bd      	mov	sp, r7
    818c:	bc80      	pop	{r7}
    818e:	4770      	bx	lr
    8190:	2000057c 	.word	0x2000057c

00008194 <_ZN7Command11resetSpeedsEv>:

void Command::resetSpeeds()
    8194:	b480      	push	{r7}
    8196:	b083      	sub	sp, #12
    8198:	af00      	add	r7, sp, #0
    819a:	6078      	str	r0, [r7, #4]
{

}
    819c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    81a0:	46bd      	mov	sp, r7
    81a2:	bc80      	pop	{r7}
    81a4:	4770      	bx	lr
    81a6:	46c0      	nop			(mov r8, r8)

000081a8 <_ZN7Command16freinageDUrgenceEb>:

void Command::freinageDUrgence(bool doitFreiner)
    81a8:	b480      	push	{r7}
    81aa:	b083      	sub	sp, #12
    81ac:	af00      	add	r7, sp, #0
    81ae:	4603      	mov	r3, r0
    81b0:	71fb      	strb	r3, [r7, #7]
{
    Command::stop = doitFreiner;
    81b2:	4a04      	ldr	r2, [pc, #16]	(81c4 <_ZN7Command16freinageDUrgenceEb+0x1c>)
    81b4:	79fb      	ldrb	r3, [r7, #7]
    81b6:	7013      	strb	r3, [r2, #0]
}
    81b8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    81bc:	46bd      	mov	sp, r7
    81be:	bc80      	pop	{r7}
    81c0:	4770      	bx	lr
    81c2:	46c0      	nop			(mov r8, r8)
    81c4:	2000057c 	.word	0x2000057c

000081c8 <_ZNK7Command4finiEv>:

// est ce que la commande a fini ?
bool Command::fini() const
    81c8:	b480      	push	{r7}
    81ca:	b083      	sub	sp, #12
    81cc:	af00      	add	r7, sp, #0
    81ce:	6078      	str	r0, [r7, #4]
{
    return false;
    81d0:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    81d4:	4618      	mov	r0, r3
    81d6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    81da:	46bd      	mov	sp, r7
    81dc:	bc80      	pop	{r7}
    81de:	4770      	bx	lr

000081e0 <_ZN7Command10limitSpeedEb>:

void Command::limitSpeed(bool doitLimiter)
    81e0:	b480      	push	{r7}
    81e2:	b083      	sub	sp, #12
    81e4:	af00      	add	r7, sp, #0
    81e6:	4603      	mov	r3, r0
    81e8:	71fb      	strb	r3, [r7, #7]
{
    Command::limiter = doitLimiter;
    81ea:	4a04      	ldr	r2, [pc, #16]	(81fc <_ZN7Command10limitSpeedEb+0x1c>)
    81ec:	79fb      	ldrb	r3, [r7, #7]
    81ee:	7013      	strb	r3, [r2, #0]
    //vitesseLinMax = 1;//TODO : mettre une valeur réaliste, ou bien sauvegarder la première valeure et la diviser
}
    81f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    81f4:	46bd      	mov	sp, r7
    81f6:	bc80      	pop	{r7}
    81f8:	4770      	bx	lr
    81fa:	46c0      	nop			(mov r8, r8)
    81fc:	2000057d 	.word	0x2000057d

00008200 <_ZN7Command8getLimitEv>:

bool Command::getLimit(void)
    8200:	b480      	push	{r7}
    8202:	af00      	add	r7, sp, #0
{
    return Command::limiter;
    8204:	4b02      	ldr	r3, [pc, #8]	(8210 <_ZN7Command8getLimitEv+0x10>)
    8206:	781b      	ldrb	r3, [r3, #0]
}
    8208:	4618      	mov	r0, r3
    820a:	46bd      	mov	sp, r7
    820c:	bc80      	pop	{r7}
    820e:	4770      	bx	lr
    8210:	2000057d 	.word	0x2000057d

00008214 <_ZN7Command11isLookingAtEff>:
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();

    return (vect.getNorme() < (int) precision);
}

bool Command::isLookingAt(Angle a, float precision)
    8214:	b580      	push	{r7, lr}
    8216:	b088      	sub	sp, #32
    8218:	af00      	add	r7, sp, #0
    821a:	60f8      	str	r0, [r7, #12]
    821c:	60b9      	str	r1, [r7, #8]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;
    821e:	4b3a      	ldr	r3, [pc, #232]	(8308 <_ZN7Command11isLookingAtEff+0xf4>)
    8220:	681a      	ldr	r2, [r3, #0]
    8222:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8226:	4618      	mov	r0, r3
    8228:	4611      	mov	r1, r2
    822a:	f001 fe8d 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    822e:	69bb      	ldr	r3, [r7, #24]
    8230:	68f8      	ldr	r0, [r7, #12]
    8232:	4619      	mov	r1, r3
    8234:	f012 ff38 	bl	1b0a8 <__aeabi_fsub>
    8238:	4603      	mov	r3, r0
    823a:	61fb      	str	r3, [r7, #28]
    823c:	e012      	b.n	8264 <_ZN7Command11isLookingAtEff+0x50>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    823e:	69f8      	ldr	r0, [r7, #28]
    8240:	f012 fbca 	bl	1a9d8 <__aeabi_f2d>
    8244:	4602      	mov	r2, r0
    8246:	460b      	mov	r3, r1
    8248:	4610      	mov	r0, r2
    824a:	4619      	mov	r1, r3
    824c:	a228      	add	r2, pc, #160	(adr r2, 82f0 <_ZN7Command11isLookingAtEff+0xdc>)
    824e:	ca0c      	ldmia	r2!, {r2, r3}
    8250:	f012 fa62 	bl	1a718 <__aeabi_dsub>
    8254:	4602      	mov	r2, r0
    8256:	460b      	mov	r3, r1
    8258:	4610      	mov	r0, r2
    825a:	4619      	mov	r1, r3
    825c:	f012 fed0 	bl	1b000 <__aeabi_d2f>
    8260:	4603      	mov	r3, r0
    8262:	61fb      	str	r3, [r7, #28]

bool Command::isLookingAt(Angle a, float precision)
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    8264:	69f8      	ldr	r0, [r7, #28]
    8266:	f012 fbb7 	bl	1a9d8 <__aeabi_f2d>
    826a:	4602      	mov	r2, r0
    826c:	460b      	mov	r3, r1
    826e:	4610      	mov	r0, r2
    8270:	4619      	mov	r1, r3
    8272:	a221      	add	r2, pc, #132	(adr r2, 82f8 <_ZN7Command11isLookingAtEff+0xe4>)
    8274:	ca0c      	ldmia	r2!, {r2, r3}
    8276:	f012 fe87 	bl	1af88 <__aeabi_dcmpge>
    827a:	4603      	mov	r3, r0
    827c:	2b00      	cmp	r3, #0
    827e:	d1de      	bne.n	823e <_ZN7Command11isLookingAtEff+0x2a>
    8280:	e012      	b.n	82a8 <_ZN7Command11isLookingAtEff+0x94>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    8282:	69f8      	ldr	r0, [r7, #28]
    8284:	f012 fba8 	bl	1a9d8 <__aeabi_f2d>
    8288:	4602      	mov	r2, r0
    828a:	460b      	mov	r3, r1
    828c:	4610      	mov	r0, r2
    828e:	4619      	mov	r1, r3
    8290:	a217      	add	r2, pc, #92	(adr r2, 82f0 <_ZN7Command11isLookingAtEff+0xdc>)
    8292:	ca0c      	ldmia	r2!, {r2, r3}
    8294:	f012 fa42 	bl	1a71c <__adddf3>
    8298:	4602      	mov	r2, r0
    829a:	460b      	mov	r3, r1
    829c:	4610      	mov	r0, r2
    829e:	4619      	mov	r1, r3
    82a0:	f012 feae 	bl	1b000 <__aeabi_d2f>
    82a4:	4603      	mov	r3, r0
    82a6:	61fb      	str	r3, [r7, #28]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    82a8:	69f8      	ldr	r0, [r7, #28]
    82aa:	f012 fb95 	bl	1a9d8 <__aeabi_f2d>
    82ae:	4602      	mov	r2, r0
    82b0:	460b      	mov	r3, r1
    82b2:	4610      	mov	r0, r2
    82b4:	4619      	mov	r1, r3
    82b6:	a212      	add	r2, pc, #72	(adr r2, 8300 <_ZN7Command11isLookingAtEff+0xec>)
    82b8:	ca0c      	ldmia	r2!, {r2, r3}
    82ba:	f012 fe51 	bl	1af60 <__aeabi_dcmplt>
    82be:	4603      	mov	r3, r0
    82c0:	2b00      	cmp	r3, #0
    82c2:	d1de      	bne.n	8282 <_ZN7Command11isLookingAtEff+0x6e>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    82c4:	69fb      	ldr	r3, [r7, #28]
    82c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    82ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    82ce:	71fb      	strb	r3, [r7, #7]
    82d0:	4610      	mov	r0, r2
    82d2:	68b9      	ldr	r1, [r7, #8]
    82d4:	f013 f98e 	bl	1b5f4 <__aeabi_fcmplt>
    82d8:	4603      	mov	r3, r0
    82da:	2b00      	cmp	r3, #0
    82dc:	d002      	beq.n	82e4 <_ZN7Command11isLookingAtEff+0xd0>
    82de:	f04f 0301 	mov.w	r3, #1	; 0x1
    82e2:	71fb      	strb	r3, [r7, #7]
    82e4:	79fb      	ldrb	r3, [r7, #7]
}
    82e6:	4618      	mov	r0, r3
    82e8:	f107 0720 	add.w	r7, r7, #32	; 0x20
    82ec:	46bd      	mov	sp, r7
    82ee:	bd80      	pop	{r7, pc}
    82f0:	54442d18 	.word	0x54442d18
    82f4:	401921fb 	.word	0x401921fb
    82f8:	54442d18 	.word	0x54442d18
    82fc:	400921fb 	.word	0x400921fb
    8300:	54442d18 	.word	0x54442d18
    8304:	c00921fb 	.word	0xc00921fb
    8308:	20000580 	.word	0x20000580

0000830c <_ZN7Command11isLookingAtE8Positionf>:

bool Command::isLookingAt(Position pos, float precision)
    830c:	b5b0      	push	{r4, r5, r7, lr}
    830e:	b090      	sub	sp, #64
    8310:	af00      	add	r7, sp, #0
    8312:	f107 0308 	add.w	r3, r7, #8	; 0x8
    8316:	e883 0003 	stmia.w	r3, {r0, r1}
    831a:	607a      	str	r2, [r7, #4]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    831c:	4b58      	ldr	r3, [pc, #352]	(8480 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    831e:	681a      	ldr	r2, [r3, #0]
    8320:	f107 0320 	add.w	r3, r7, #32	; 0x20
    8324:	4618      	mov	r0, r3
    8326:	4611      	mov	r1, r2
    8328:	f001 fe0e 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    832c:	f107 0318 	add.w	r3, r7, #24	; 0x18
    8330:	f107 0220 	add.w	r2, r7, #32	; 0x20
    8334:	4618      	mov	r0, r3
    8336:	4611      	mov	r1, r2
    8338:	f006 ff7c 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    833c:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8340:	f107 0208 	add.w	r2, r7, #8	; 0x8
    8344:	f107 0c18 	add.w	ip, r7, #24	; 0x18
    8348:	4618      	mov	r0, r3
    834a:	4611      	mov	r1, r2
    834c:	4662      	mov	r2, ip
    834e:	f006 fda3 	bl	ee98 <_ZNK8PositionmiERKS_>
    Angle angleVise = atan2(delta.getY(),delta.getX());
    8352:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8356:	4618      	mov	r0, r3
    8358:	f006 fd50 	bl	edfc <_ZNK8Position4getYEv>
    835c:	4603      	mov	r3, r0
    835e:	4618      	mov	r0, r3
    8360:	f012 fb3a 	bl	1a9d8 <__aeabi_f2d>
    8364:	4604      	mov	r4, r0
    8366:	460d      	mov	r5, r1
    8368:	f107 0310 	add.w	r3, r7, #16	; 0x10
    836c:	4618      	mov	r0, r3
    836e:	f006 fd39 	bl	ede4 <_ZNK8Position4getXEv>
    8372:	4603      	mov	r3, r0
    8374:	4618      	mov	r0, r3
    8376:	f012 fb2f 	bl	1a9d8 <__aeabi_f2d>
    837a:	4602      	mov	r2, r0
    837c:	460b      	mov	r3, r1
    837e:	4620      	mov	r0, r4
    8380:	4629      	mov	r1, r5
    8382:	f016 fc5f 	bl	1ec44 <atan2>
    8386:	4602      	mov	r2, r0
    8388:	460b      	mov	r3, r1
    838a:	4610      	mov	r0, r2
    838c:	4619      	mov	r1, r3
    838e:	f012 fe37 	bl	1b000 <__aeabi_d2f>
    8392:	4603      	mov	r3, r0
    8394:	63bb      	str	r3, [r7, #56]
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;
    8396:	4b3a      	ldr	r3, [pc, #232]	(8480 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    8398:	681a      	ldr	r2, [r3, #0]
    839a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    839e:	4618      	mov	r0, r3
    83a0:	4611      	mov	r1, r2
    83a2:	f001 fdd1 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    83a6:	6b7b      	ldr	r3, [r7, #52]
    83a8:	6bb8      	ldr	r0, [r7, #56]
    83aa:	4619      	mov	r1, r3
    83ac:	f012 fe7c 	bl	1b0a8 <__aeabi_fsub>
    83b0:	4603      	mov	r3, r0
    83b2:	63fb      	str	r3, [r7, #60]
    83b4:	e012      	b.n	83dc <_ZN7Command11isLookingAtE8Positionf+0xd0>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    83b6:	6bf8      	ldr	r0, [r7, #60]
    83b8:	f012 fb0e 	bl	1a9d8 <__aeabi_f2d>
    83bc:	4602      	mov	r2, r0
    83be:	460b      	mov	r3, r1
    83c0:	4610      	mov	r0, r2
    83c2:	4619      	mov	r1, r3
    83c4:	a228      	add	r2, pc, #160	(adr r2, 8468 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    83c6:	ca0c      	ldmia	r2!, {r2, r3}
    83c8:	f012 f9a6 	bl	1a718 <__aeabi_dsub>
    83cc:	4602      	mov	r2, r0
    83ce:	460b      	mov	r3, r1
    83d0:	4610      	mov	r0, r2
    83d2:	4619      	mov	r1, r3
    83d4:	f012 fe14 	bl	1b000 <__aeabi_d2f>
    83d8:	4603      	mov	r3, r0
    83da:	63fb      	str	r3, [r7, #60]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    83dc:	6bf8      	ldr	r0, [r7, #60]
    83de:	f012 fafb 	bl	1a9d8 <__aeabi_f2d>
    83e2:	4602      	mov	r2, r0
    83e4:	460b      	mov	r3, r1
    83e6:	4610      	mov	r0, r2
    83e8:	4619      	mov	r1, r3
    83ea:	a221      	add	r2, pc, #132	(adr r2, 8470 <_ZN7Command11isLookingAtE8Positionf+0x164>)
    83ec:	ca0c      	ldmia	r2!, {r2, r3}
    83ee:	f012 fdcb 	bl	1af88 <__aeabi_dcmpge>
    83f2:	4603      	mov	r3, r0
    83f4:	2b00      	cmp	r3, #0
    83f6:	d1de      	bne.n	83b6 <_ZN7Command11isLookingAtE8Positionf+0xaa>
    83f8:	e012      	b.n	8420 <_ZN7Command11isLookingAtE8Positionf+0x114>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    83fa:	6bf8      	ldr	r0, [r7, #60]
    83fc:	f012 faec 	bl	1a9d8 <__aeabi_f2d>
    8400:	4602      	mov	r2, r0
    8402:	460b      	mov	r3, r1
    8404:	4610      	mov	r0, r2
    8406:	4619      	mov	r1, r3
    8408:	a217      	add	r2, pc, #92	(adr r2, 8468 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    840a:	ca0c      	ldmia	r2!, {r2, r3}
    840c:	f012 f986 	bl	1a71c <__adddf3>
    8410:	4602      	mov	r2, r0
    8412:	460b      	mov	r3, r1
    8414:	4610      	mov	r0, r2
    8416:	4619      	mov	r1, r3
    8418:	f012 fdf2 	bl	1b000 <__aeabi_d2f>
    841c:	4603      	mov	r3, r0
    841e:	63fb      	str	r3, [r7, #60]
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    8420:	6bf8      	ldr	r0, [r7, #60]
    8422:	f012 fad9 	bl	1a9d8 <__aeabi_f2d>
    8426:	4602      	mov	r2, r0
    8428:	460b      	mov	r3, r1
    842a:	4610      	mov	r0, r2
    842c:	4619      	mov	r1, r3
    842e:	a212      	add	r2, pc, #72	(adr r2, 8478 <_ZN7Command11isLookingAtE8Positionf+0x16c>)
    8430:	ca0c      	ldmia	r2!, {r2, r3}
    8432:	f012 fd95 	bl	1af60 <__aeabi_dcmplt>
    8436:	4603      	mov	r3, r0
    8438:	2b00      	cmp	r3, #0
    843a:	d1de      	bne.n	83fa <_ZN7Command11isLookingAtE8Positionf+0xee>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    843c:	6bfb      	ldr	r3, [r7, #60]
    843e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    8442:	f04f 0300 	mov.w	r3, #0	; 0x0
    8446:	70fb      	strb	r3, [r7, #3]
    8448:	4610      	mov	r0, r2
    844a:	6879      	ldr	r1, [r7, #4]
    844c:	f013 f8d2 	bl	1b5f4 <__aeabi_fcmplt>
    8450:	4603      	mov	r3, r0
    8452:	2b00      	cmp	r3, #0
    8454:	d002      	beq.n	845c <_ZN7Command11isLookingAtE8Positionf+0x150>
    8456:	f04f 0301 	mov.w	r3, #1	; 0x1
    845a:	70fb      	strb	r3, [r7, #3]
    845c:	78fb      	ldrb	r3, [r7, #3]
}
    845e:	4618      	mov	r0, r3
    8460:	f107 0740 	add.w	r7, r7, #64	; 0x40
    8464:	46bd      	mov	sp, r7
    8466:	bdb0      	pop	{r4, r5, r7, pc}
    8468:	54442d18 	.word	0x54442d18
    846c:	401921fb 	.word	0x401921fb
    8470:	54442d18 	.word	0x54442d18
    8474:	400921fb 	.word	0x400921fb
    8478:	54442d18 	.word	0x54442d18
    847c:	c00921fb 	.word	0xc00921fb
    8480:	20000580 	.word	0x20000580

00008484 <_ZN7Command6isNearE8Positionf>:
bool Command::getLimit(void)
{
    return Command::limiter;
}

bool Command::isNear(Position pos, float precision)
    8484:	b590      	push	{r4, r7, lr}
    8486:	b08d      	sub	sp, #52
    8488:	af00      	add	r7, sp, #0
    848a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    848e:	e883 0003 	stmia.w	r3, {r0, r1}
    8492:	607a      	str	r2, [r7, #4]
{
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();
    8494:	4b1d      	ldr	r3, [pc, #116]	(850c <_ZN7Command6isNearE8Positionf+0x88>)
    8496:	681a      	ldr	r2, [r3, #0]
    8498:	f107 0324 	add.w	r3, r7, #36	; 0x24
    849c:	4618      	mov	r0, r3
    849e:	4611      	mov	r1, r2
    84a0:	f001 fd52 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    84a4:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    84a8:	f107 0224 	add.w	r2, r7, #36	; 0x24
    84ac:	4618      	mov	r0, r3
    84ae:	4611      	mov	r1, r2
    84b0:	f006 fec0 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    84b4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    84b8:	f107 0208 	add.w	r2, r7, #8	; 0x8
    84bc:	f107 0c1c 	add.w	ip, r7, #28	; 0x1c
    84c0:	4618      	mov	r0, r3
    84c2:	4611      	mov	r1, r2
    84c4:	4662      	mov	r2, ip
    84c6:	f006 fce7 	bl	ee98 <_ZNK8PositionmiERKS_>

    return (vect.getNorme() < (int) precision);
    84ca:	f107 0314 	add.w	r3, r7, #20	; 0x14
    84ce:	4618      	mov	r0, r3
    84d0:	f006 fdf0 	bl	f0b4 <_ZNK8Position8getNormeEv>
    84d4:	4604      	mov	r4, r0
    84d6:	6878      	ldr	r0, [r7, #4]
    84d8:	f013 f8b4 	bl	1b644 <__aeabi_f2iz>
    84dc:	4603      	mov	r3, r0
    84de:	4618      	mov	r0, r3
    84e0:	f012 fe98 	bl	1b214 <__aeabi_i2f>
    84e4:	4602      	mov	r2, r0
    84e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    84ea:	70fb      	strb	r3, [r7, #3]
    84ec:	4620      	mov	r0, r4
    84ee:	4611      	mov	r1, r2
    84f0:	f013 f880 	bl	1b5f4 <__aeabi_fcmplt>
    84f4:	4603      	mov	r3, r0
    84f6:	2b00      	cmp	r3, #0
    84f8:	d002      	beq.n	8500 <_ZN7Command6isNearE8Positionf+0x7c>
    84fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    84fe:	70fb      	strb	r3, [r7, #3]
    8500:	78fb      	ldrb	r3, [r7, #3]
}
    8502:	4618      	mov	r0, r3
    8504:	f107 0734 	add.w	r7, r7, #52	; 0x34
    8508:	46bd      	mov	sp, r7
    850a:	bd90      	pop	{r4, r7, pc}
    850c:	20000580 	.word	0x20000580

00008510 <_ZN7CommandD0Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    8510:	b580      	push	{r7, lr}
    8512:	b082      	sub	sp, #8
    8514:	af00      	add	r7, sp, #0
    8516:	6078      	str	r0, [r7, #4]
    8518:	687a      	ldr	r2, [r7, #4]
    851a:	4b08      	ldr	r3, [pc, #32]	(853c <_ZN7CommandD0Ev+0x2c>)
    851c:	6013      	str	r3, [r2, #0]
{
}
    851e:	f04f 0301 	mov.w	r3, #1	; 0x1
    8522:	b2db      	uxtb	r3, r3
    8524:	2b00      	cmp	r3, #0
    8526:	d002      	beq.n	852e <_ZN7CommandD0Ev+0x1e>
    8528:	6878      	ldr	r0, [r7, #4]
    852a:	f006 fb87 	bl	ec3c <_ZdlPv>
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	4618      	mov	r0, r3
    8532:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8536:	46bd      	mov	sp, r7
    8538:	bd80      	pop	{r7, pc}
    853a:	46c0      	nop			(mov r8, r8)
    853c:	00022120 	.word	0x00022120

00008540 <_ZN7CommandD1Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    8540:	b580      	push	{r7, lr}
    8542:	b082      	sub	sp, #8
    8544:	af00      	add	r7, sp, #0
    8546:	6078      	str	r0, [r7, #4]
    8548:	687a      	ldr	r2, [r7, #4]
    854a:	4b08      	ldr	r3, [pc, #32]	(856c <_ZN7CommandD1Ev+0x2c>)
    854c:	6013      	str	r3, [r2, #0]
{
}
    854e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8552:	b2db      	uxtb	r3, r3
    8554:	2b00      	cmp	r3, #0
    8556:	d002      	beq.n	855e <_ZN7CommandD1Ev+0x1e>
    8558:	6878      	ldr	r0, [r7, #4]
    855a:	f006 fb6f 	bl	ec3c <_ZdlPv>
    855e:	687b      	ldr	r3, [r7, #4]
    8560:	4618      	mov	r0, r3
    8562:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8566:	46bd      	mov	sp, r7
    8568:	bd80      	pop	{r7, pc}
    856a:	46c0      	nop			(mov r8, r8)
    856c:	00022120 	.word	0x00022120

00008570 <_ZN7CommandD2Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    8570:	b580      	push	{r7, lr}
    8572:	b082      	sub	sp, #8
    8574:	af00      	add	r7, sp, #0
    8576:	6078      	str	r0, [r7, #4]
    8578:	687a      	ldr	r2, [r7, #4]
    857a:	4b08      	ldr	r3, [pc, #32]	(859c <_ZN7CommandD2Ev+0x2c>)
    857c:	6013      	str	r3, [r2, #0]
{
}
    857e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8582:	b2db      	uxtb	r3, r3
    8584:	2b00      	cmp	r3, #0
    8586:	d002      	beq.n	858e <_ZN7CommandD2Ev+0x1e>
    8588:	6878      	ldr	r0, [r7, #4]
    858a:	f006 fb57 	bl	ec3c <_ZdlPv>
    858e:	687b      	ldr	r3, [r7, #4]
    8590:	4618      	mov	r0, r3
    8592:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8596:	46bd      	mov	sp, r7
    8598:	bd80      	pop	{r7, pc}
    859a:	46c0      	nop			(mov r8, r8)
    859c:	00022120 	.word	0x00022120

000085a0 <_Z9diffAngleff>:

#ifndef abs
#define abs(x) fabs(x)
#endif

float diffAngle(float a, float b)
    85a0:	b580      	push	{r7, lr}
    85a2:	b084      	sub	sp, #16
    85a4:	af00      	add	r7, sp, #0
    85a6:	6078      	str	r0, [r7, #4]
    85a8:	6039      	str	r1, [r7, #0]
{
    float t = a-b;
    85aa:	6878      	ldr	r0, [r7, #4]
    85ac:	6839      	ldr	r1, [r7, #0]
    85ae:	f012 fd7b 	bl	1b0a8 <__aeabi_fsub>
    85b2:	4603      	mov	r3, r0
    85b4:	60fb      	str	r3, [r7, #12]
    85b6:	e012      	b.n	85de <_Z9diffAngleff+0x3e>
    while (t > M_PI)
    {
        t -= 2*M_PI;
    85b8:	68f8      	ldr	r0, [r7, #12]
    85ba:	f012 fa0d 	bl	1a9d8 <__aeabi_f2d>
    85be:	4602      	mov	r2, r0
    85c0:	460b      	mov	r3, r1
    85c2:	4610      	mov	r0, r2
    85c4:	4619      	mov	r1, r3
    85c6:	a222      	add	r2, pc, #136	(adr r2, 8650 <_Z9diffAngleff+0xb0>)
    85c8:	ca0c      	ldmia	r2!, {r2, r3}
    85ca:	f012 f8a5 	bl	1a718 <__aeabi_dsub>
    85ce:	4602      	mov	r2, r0
    85d0:	460b      	mov	r3, r1
    85d2:	4610      	mov	r0, r2
    85d4:	4619      	mov	r1, r3
    85d6:	f012 fd13 	bl	1b000 <__aeabi_d2f>
    85da:	4603      	mov	r3, r0
    85dc:	60fb      	str	r3, [r7, #12]
#endif

float diffAngle(float a, float b)
{
    float t = a-b;
    while (t > M_PI)
    85de:	68f8      	ldr	r0, [r7, #12]
    85e0:	f012 f9fa 	bl	1a9d8 <__aeabi_f2d>
    85e4:	4602      	mov	r2, r0
    85e6:	460b      	mov	r3, r1
    85e8:	4610      	mov	r0, r2
    85ea:	4619      	mov	r1, r3
    85ec:	a21a      	add	r2, pc, #104	(adr r2, 8658 <_Z9diffAngleff+0xb8>)
    85ee:	ca0c      	ldmia	r2!, {r2, r3}
    85f0:	f012 fcd4 	bl	1af9c <__aeabi_dcmpgt>
    85f4:	4603      	mov	r3, r0
    85f6:	2b00      	cmp	r3, #0
    85f8:	d1de      	bne.n	85b8 <_Z9diffAngleff+0x18>
    85fa:	e012      	b.n	8622 <_Z9diffAngleff+0x82>
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    {
        t += 2*M_PI;
    85fc:	68f8      	ldr	r0, [r7, #12]
    85fe:	f012 f9eb 	bl	1a9d8 <__aeabi_f2d>
    8602:	4602      	mov	r2, r0
    8604:	460b      	mov	r3, r1
    8606:	4610      	mov	r0, r2
    8608:	4619      	mov	r1, r3
    860a:	a211      	add	r2, pc, #68	(adr r2, 8650 <_Z9diffAngleff+0xb0>)
    860c:	ca0c      	ldmia	r2!, {r2, r3}
    860e:	f012 f885 	bl	1a71c <__adddf3>
    8612:	4602      	mov	r2, r0
    8614:	460b      	mov	r3, r1
    8616:	4610      	mov	r0, r2
    8618:	4619      	mov	r1, r3
    861a:	f012 fcf1 	bl	1b000 <__aeabi_d2f>
    861e:	4603      	mov	r3, r0
    8620:	60fb      	str	r3, [r7, #12]
    float t = a-b;
    while (t > M_PI)
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    8622:	68f8      	ldr	r0, [r7, #12]
    8624:	f012 f9d8 	bl	1a9d8 <__aeabi_f2d>
    8628:	4602      	mov	r2, r0
    862a:	460b      	mov	r3, r1
    862c:	4610      	mov	r0, r2
    862e:	4619      	mov	r1, r3
    8630:	a20b      	add	r2, pc, #44	(adr r2, 8660 <_Z9diffAngleff+0xc0>)
    8632:	ca0c      	ldmia	r2!, {r2, r3}
    8634:	f012 fc94 	bl	1af60 <__aeabi_dcmplt>
    8638:	4603      	mov	r3, r0
    863a:	2b00      	cmp	r3, #0
    863c:	d1de      	bne.n	85fc <_Z9diffAngleff+0x5c>
    {
        t += 2*M_PI;
    }
    return t;
    863e:	68fb      	ldr	r3, [r7, #12]
}
    8640:	4618      	mov	r0, r3
    8642:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8646:	46bd      	mov	sp, r7
    8648:	bd80      	pop	{r7, pc}
    864a:	46c0      	nop			(mov r8, r8)
    864c:	46c0      	nop			(mov r8, r8)
    864e:	46c0      	nop			(mov r8, r8)
    8650:	54442d18 	.word	0x54442d18
    8654:	401921fb 	.word	0x401921fb
    8658:	54442d18 	.word	0x54442d18
    865c:	400921fb 	.word	0x400921fb
    8660:	54442d18 	.word	0x54442d18
    8664:	c00921fb 	.word	0xc00921fb

00008668 <_ZN18CommandAllerEnArcA14getLinearSpeedEv>:
        linSpeed = rVise*angSpeed;*/


}

Vitesse CommandAllerEnArcA::getLinearSpeed()
    8668:	b480      	push	{r7}
    866a:	b083      	sub	sp, #12
    866c:	af00      	add	r7, sp, #0
    866e:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	695b      	ldr	r3, [r3, #20]
}
    8674:	4618      	mov	r0, r3
    8676:	f107 070c 	add.w	r7, r7, #12	; 0xc
    867a:	46bd      	mov	sp, r7
    867c:	bc80      	pop	{r7}
    867e:	4770      	bx	lr

00008680 <_ZN18CommandAllerEnArcA15getAngularSpeedEv>:

Angle CommandAllerEnArcA::getAngularSpeed()
    8680:	b480      	push	{r7}
    8682:	b083      	sub	sp, #12
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    8688:	687b      	ldr	r3, [r7, #4]
    868a:	699b      	ldr	r3, [r3, #24]
}
    868c:	4618      	mov	r0, r3
    868e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8692:	46bd      	mov	sp, r7
    8694:	bc80      	pop	{r7}
    8696:	4770      	bx	lr

00008698 <_ZNK18CommandAllerEnArcA4finiEv>:

// est ce que la commande a fini ?
bool CommandAllerEnArcA::fini() const
    8698:	b480      	push	{r7}
    869a:	b083      	sub	sp, #12
    869c:	af00      	add	r7, sp, #0
    869e:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    86a0:	687b      	ldr	r3, [r7, #4]
    86a2:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    86a6:	4618      	mov	r0, r3
    86a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86ac:	46bd      	mov	sp, r7
    86ae:	bc80      	pop	{r7}
    86b0:	4770      	bx	lr
    86b2:	46c0      	nop			(mov r8, r8)

000086b4 <_ZN13CommandAllerA14getLinearSpeedEv>:
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
}

Vitesse CommandAllerA::getLinearSpeed()
    86b4:	b480      	push	{r7}
    86b6:	b083      	sub	sp, #12
    86b8:	af00      	add	r7, sp, #0
    86ba:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    86bc:	687b      	ldr	r3, [r7, #4]
    86be:	699b      	ldr	r3, [r3, #24]
}
    86c0:	4618      	mov	r0, r3
    86c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86c6:	46bd      	mov	sp, r7
    86c8:	bc80      	pop	{r7}
    86ca:	4770      	bx	lr

000086cc <_ZN13CommandAllerA15getAngularSpeedEv>:

Angle CommandAllerA::getAngularSpeed()
    86cc:	b480      	push	{r7}
    86ce:	b083      	sub	sp, #12
    86d0:	af00      	add	r7, sp, #0
    86d2:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    86d4:	687b      	ldr	r3, [r7, #4]
    86d6:	69db      	ldr	r3, [r3, #28]
}
    86d8:	4618      	mov	r0, r3
    86da:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86de:	46bd      	mov	sp, r7
    86e0:	bc80      	pop	{r7}
    86e2:	4770      	bx	lr

000086e4 <_ZNK13CommandAllerA4finiEv>:

bool CommandAllerA::fini() const
    86e4:	b480      	push	{r7}
    86e6:	b083      	sub	sp, #12
    86e8:	af00      	add	r7, sp, #0
    86ea:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    86ec:	687b      	ldr	r3, [r7, #4]
    86ee:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    86f2:	4618      	mov	r0, r3
    86f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    86f8:	46bd      	mov	sp, r7
    86fa:	bc80      	pop	{r7}
    86fc:	4770      	bx	lr
    86fe:	46c0      	nop			(mov r8, r8)

00008700 <_ZN18CommandTournerVers14getLinearSpeedEv>:
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}

Vitesse CommandTournerVers::getLinearSpeed()
    8700:	b480      	push	{r7}
    8702:	b083      	sub	sp, #12
    8704:	af00      	add	r7, sp, #0
    8706:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8708:	4b03      	ldr	r3, [pc, #12]	(8718 <_ZN18CommandTournerVers14getLinearSpeedEv+0x18>)
}
    870a:	4618      	mov	r0, r3
    870c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8710:	46bd      	mov	sp, r7
    8712:	bc80      	pop	{r7}
    8714:	4770      	bx	lr
    8716:	46c0      	nop			(mov r8, r8)
    8718:	00000000 	.word	0x00000000

0000871c <_ZN18CommandTournerVers15getAngularSpeedEv>:

Angle CommandTournerVers::getAngularSpeed()
    871c:	b480      	push	{r7}
    871e:	b083      	sub	sp, #12
    8720:	af00      	add	r7, sp, #0
    8722:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    8724:	687b      	ldr	r3, [r7, #4]
    8726:	68db      	ldr	r3, [r3, #12]
}
    8728:	4618      	mov	r0, r3
    872a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    872e:	46bd      	mov	sp, r7
    8730:	bc80      	pop	{r7}
    8732:	4770      	bx	lr

00008734 <_ZNK18CommandTournerVers4finiEv>:

bool CommandTournerVers::fini() const
    8734:	b480      	push	{r7}
    8736:	b083      	sub	sp, #12
    8738:	af00      	add	r7, sp, #0
    873a:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    873c:	687b      	ldr	r3, [r7, #4]
    873e:	7d1b      	ldrb	r3, [r3, #20]
}
    8740:	4618      	mov	r0, r3
    8742:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8746:	46bd      	mov	sp, r7
    8748:	bc80      	pop	{r7}
    874a:	4770      	bx	lr

0000874c <_ZN13CommandVirage14getLinearSpeedEv>:

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
}

Vitesse CommandVirage::getLinearSpeed()
    874c:	b480      	push	{r7}
    874e:	b083      	sub	sp, #12
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	689b      	ldr	r3, [r3, #8]
}
    8758:	4618      	mov	r0, r3
    875a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    875e:	46bd      	mov	sp, r7
    8760:	bc80      	pop	{r7}
    8762:	4770      	bx	lr

00008764 <_ZN13CommandVirage15getAngularSpeedEv>:

Angle CommandVirage::getAngularSpeed()
    8764:	b480      	push	{r7}
    8766:	b083      	sub	sp, #12
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	68db      	ldr	r3, [r3, #12]
}
    8770:	4618      	mov	r0, r3
    8772:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8776:	46bd      	mov	sp, r7
    8778:	bc80      	pop	{r7}
    877a:	4770      	bx	lr

0000877c <_ZNK13CommandVirage4finiEv>:

// est ce que la commande a fini ?
bool CommandVirage::fini() const
    877c:	b480      	push	{r7}
    877e:	b083      	sub	sp, #12
    8780:	af00      	add	r7, sp, #0
    8782:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    8784:	687b      	ldr	r3, [r7, #4]
    8786:	7f1b      	ldrb	r3, [r3, #28]
}
    8788:	4618      	mov	r0, r3
    878a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    878e:	46bd      	mov	sp, r7
    8790:	bc80      	pop	{r7}
    8792:	4770      	bx	lr

00008794 <_ZN15CommandAttendre6updateEv>:
CommandAttendre::CommandAttendre(int nbUpdates)
    : Command(), compte(nbUpdates)
{
}

void CommandAttendre::update()
    8794:	b480      	push	{r7}
    8796:	b083      	sub	sp, #12
    8798:	af00      	add	r7, sp, #0
    879a:	6078      	str	r0, [r7, #4]
{
    compte--;
    879c:	687b      	ldr	r3, [r7, #4]
    879e:	685b      	ldr	r3, [r3, #4]
    87a0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    87a4:	687b      	ldr	r3, [r7, #4]
    87a6:	605a      	str	r2, [r3, #4]
}
    87a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    87ac:	46bd      	mov	sp, r7
    87ae:	bc80      	pop	{r7}
    87b0:	4770      	bx	lr
    87b2:	46c0      	nop			(mov r8, r8)

000087b4 <_ZN15CommandAttendre14getLinearSpeedEv>:

Vitesse CommandAttendre::getLinearSpeed()
    87b4:	b480      	push	{r7}
    87b6:	b083      	sub	sp, #12
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    87bc:	4b03      	ldr	r3, [pc, #12]	(87cc <_ZN15CommandAttendre14getLinearSpeedEv+0x18>)
}
    87be:	4618      	mov	r0, r3
    87c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    87c4:	46bd      	mov	sp, r7
    87c6:	bc80      	pop	{r7}
    87c8:	4770      	bx	lr
    87ca:	46c0      	nop			(mov r8, r8)
    87cc:	00000000 	.word	0x00000000

000087d0 <_ZN15CommandAttendre15getAngularSpeedEv>:

Angle CommandAttendre::getAngularSpeed()
    87d0:	b480      	push	{r7}
    87d2:	b083      	sub	sp, #12
    87d4:	af00      	add	r7, sp, #0
    87d6:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    87d8:	4b03      	ldr	r3, [pc, #12]	(87e8 <_ZN15CommandAttendre15getAngularSpeedEv+0x18>)
}
    87da:	4618      	mov	r0, r3
    87dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    87e0:	46bd      	mov	sp, r7
    87e2:	bc80      	pop	{r7}
    87e4:	4770      	bx	lr
    87e6:	46c0      	nop			(mov r8, r8)
    87e8:	00000000 	.word	0x00000000

000087ec <_ZNK15CommandAttendre4finiEv>:

bool CommandAttendre::fini() const
    87ec:	b480      	push	{r7}
    87ee:	b083      	sub	sp, #12
    87f0:	af00      	add	r7, sp, #0
    87f2:	6078      	str	r0, [r7, #4]
{
    return (compte <= 0);
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	685b      	ldr	r3, [r3, #4]
    87f8:	2b00      	cmp	r3, #0
    87fa:	bfcc      	ite	gt
    87fc:	2300      	movgt	r3, #0
    87fe:	2301      	movle	r3, #1
    8800:	b2db      	uxtb	r3, r3
}
    8802:	4618      	mov	r0, r3
    8804:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8808:	46bd      	mov	sp, r7
    880a:	bc80      	pop	{r7}
    880c:	4770      	bx	lr
    880e:	46c0      	nop			(mov r8, r8)

00008810 <_ZN18CommandTestAvancer6updateEv>:
CommandTestAvancer::CommandTestAvancer()
    : Command()
{
}

void CommandTestAvancer::update()
    8810:	b480      	push	{r7}
    8812:	b083      	sub	sp, #12
    8814:	af00      	add	r7, sp, #0
    8816:	6078      	str	r0, [r7, #4]
{
}
    8818:	f107 070c 	add.w	r7, r7, #12	; 0xc
    881c:	46bd      	mov	sp, r7
    881e:	bc80      	pop	{r7}
    8820:	4770      	bx	lr
    8822:	46c0      	nop			(mov r8, r8)

00008824 <_ZN18CommandTestAvancer14getLinearSpeedEv>:

Vitesse CommandTestAvancer::getLinearSpeed()
    8824:	b480      	push	{r7}
    8826:	b083      	sub	sp, #12
    8828:	af00      	add	r7, sp, #0
    882a:	6078      	str	r0, [r7, #4]
{
    return VITESSE_LINEAIRE_MAX;
    882c:	4b03      	ldr	r3, [pc, #12]	(883c <_ZN18CommandTestAvancer14getLinearSpeedEv+0x18>)
}
    882e:	4618      	mov	r0, r3
    8830:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8834:	46bd      	mov	sp, r7
    8836:	bc80      	pop	{r7}
    8838:	4770      	bx	lr
    883a:	46c0      	nop			(mov r8, r8)
    883c:	40400000 	.word	0x40400000

00008840 <_ZN18CommandTestAvancer15getAngularSpeedEv>:

Angle CommandTestAvancer::getAngularSpeed()
    8840:	b480      	push	{r7}
    8842:	b083      	sub	sp, #12
    8844:	af00      	add	r7, sp, #0
    8846:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8848:	4b03      	ldr	r3, [pc, #12]	(8858 <_ZN18CommandTestAvancer15getAngularSpeedEv+0x18>)
}
    884a:	4618      	mov	r0, r3
    884c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8850:	46bd      	mov	sp, r7
    8852:	bc80      	pop	{r7}
    8854:	4770      	bx	lr
    8856:	46c0      	nop			(mov r8, r8)
    8858:	00000000 	.word	0x00000000

0000885c <_ZN24CommandTestTournerGauche6updateEv>:
CommandTestTournerGauche::CommandTestTournerGauche()
    : Command()
{
}

void CommandTestTournerGauche::update()
    885c:	b480      	push	{r7}
    885e:	b083      	sub	sp, #12
    8860:	af00      	add	r7, sp, #0
    8862:	6078      	str	r0, [r7, #4]
{
}
    8864:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8868:	46bd      	mov	sp, r7
    886a:	bc80      	pop	{r7}
    886c:	4770      	bx	lr
    886e:	46c0      	nop			(mov r8, r8)

00008870 <_ZN24CommandTestTournerGauche14getLinearSpeedEv>:

Vitesse CommandTestTournerGauche::getLinearSpeed()
    8870:	b480      	push	{r7}
    8872:	b083      	sub	sp, #12
    8874:	af00      	add	r7, sp, #0
    8876:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8878:	4b03      	ldr	r3, [pc, #12]	(8888 <_ZN24CommandTestTournerGauche14getLinearSpeedEv+0x18>)
}
    887a:	4618      	mov	r0, r3
    887c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8880:	46bd      	mov	sp, r7
    8882:	bc80      	pop	{r7}
    8884:	4770      	bx	lr
    8886:	46c0      	nop			(mov r8, r8)
    8888:	00000000 	.word	0x00000000

0000888c <_ZN24CommandTestTournerGauche15getAngularSpeedEv>:

Angle CommandTestTournerGauche::getAngularSpeed()
    888c:	b480      	push	{r7}
    888e:	b083      	sub	sp, #12
    8890:	af00      	add	r7, sp, #0
    8892:	6078      	str	r0, [r7, #4]
{
    return VITESSE_ANGULAIRE_MAX;
    8894:	4b03      	ldr	r3, [pc, #12]	(88a4 <_ZN24CommandTestTournerGauche15getAngularSpeedEv+0x18>)
}
    8896:	4618      	mov	r0, r3
    8898:	f107 070c 	add.w	r7, r7, #12	; 0xc
    889c:	46bd      	mov	sp, r7
    889e:	bc80      	pop	{r7}
    88a0:	4770      	bx	lr
    88a2:	46c0      	nop			(mov r8, r8)
    88a4:	3cf5c28f 	.word	0x3cf5c28f

000088a8 <_ZN24CommandTestTournerGaucheC1Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    88a8:	b580      	push	{r7, lr}
    88aa:	b082      	sub	sp, #8
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    : Command()
    88b0:	687b      	ldr	r3, [r7, #4]
    88b2:	4618      	mov	r0, r3
    88b4:	f7ff fc38 	bl	8128 <_ZN7CommandC2Ev>
    88b8:	687a      	ldr	r2, [r7, #4]
    88ba:	4b04      	ldr	r3, [pc, #16]	(88cc <_ZN24CommandTestTournerGaucheC1Ev+0x24>)
    88bc:	6013      	str	r3, [r2, #0]
{
}
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	4618      	mov	r0, r3
    88c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    88c6:	46bd      	mov	sp, r7
    88c8:	bd80      	pop	{r7, pc}
    88ca:	46c0      	nop			(mov r8, r8)
    88cc:	00022148 	.word	0x00022148

000088d0 <_ZN24CommandTestTournerGaucheC2Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    88d0:	b580      	push	{r7, lr}
    88d2:	b082      	sub	sp, #8
    88d4:	af00      	add	r7, sp, #0
    88d6:	6078      	str	r0, [r7, #4]
    : Command()
    88d8:	687b      	ldr	r3, [r7, #4]
    88da:	4618      	mov	r0, r3
    88dc:	f7ff fc24 	bl	8128 <_ZN7CommandC2Ev>
    88e0:	687a      	ldr	r2, [r7, #4]
    88e2:	4b04      	ldr	r3, [pc, #16]	(88f4 <_ZN24CommandTestTournerGaucheC2Ev+0x24>)
    88e4:	6013      	str	r3, [r2, #0]
{
}
    88e6:	687b      	ldr	r3, [r7, #4]
    88e8:	4618      	mov	r0, r3
    88ea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    88ee:	46bd      	mov	sp, r7
    88f0:	bd80      	pop	{r7, pc}
    88f2:	46c0      	nop			(mov r8, r8)
    88f4:	00022148 	.word	0x00022148

000088f8 <_ZN18CommandTestAvancerC1Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    88f8:	b580      	push	{r7, lr}
    88fa:	b082      	sub	sp, #8
    88fc:	af00      	add	r7, sp, #0
    88fe:	6078      	str	r0, [r7, #4]
    : Command()
    8900:	687b      	ldr	r3, [r7, #4]
    8902:	4618      	mov	r0, r3
    8904:	f7ff fc10 	bl	8128 <_ZN7CommandC2Ev>
    8908:	687a      	ldr	r2, [r7, #4]
    890a:	4b04      	ldr	r3, [pc, #16]	(891c <_ZN18CommandTestAvancerC1Ev+0x24>)
    890c:	6013      	str	r3, [r2, #0]
{
}
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	4618      	mov	r0, r3
    8912:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8916:	46bd      	mov	sp, r7
    8918:	bd80      	pop	{r7, pc}
    891a:	46c0      	nop			(mov r8, r8)
    891c:	00022170 	.word	0x00022170

00008920 <_ZN18CommandTestAvancerC2Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    8920:	b580      	push	{r7, lr}
    8922:	b082      	sub	sp, #8
    8924:	af00      	add	r7, sp, #0
    8926:	6078      	str	r0, [r7, #4]
    : Command()
    8928:	687b      	ldr	r3, [r7, #4]
    892a:	4618      	mov	r0, r3
    892c:	f7ff fbfc 	bl	8128 <_ZN7CommandC2Ev>
    8930:	687a      	ldr	r2, [r7, #4]
    8932:	4b04      	ldr	r3, [pc, #16]	(8944 <_ZN18CommandTestAvancerC2Ev+0x24>)
    8934:	6013      	str	r3, [r2, #0]
{
}
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	4618      	mov	r0, r3
    893a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    893e:	46bd      	mov	sp, r7
    8940:	bd80      	pop	{r7, pc}
    8942:	46c0      	nop			(mov r8, r8)
    8944:	00022170 	.word	0x00022170

00008948 <_ZN15CommandAttendreC1Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8948:	b580      	push	{r7, lr}
    894a:	b082      	sub	sp, #8
    894c:	af00      	add	r7, sp, #0
    894e:	6078      	str	r0, [r7, #4]
    8950:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    8952:	687b      	ldr	r3, [r7, #4]
    8954:	4618      	mov	r0, r3
    8956:	f7ff fbe7 	bl	8128 <_ZN7CommandC2Ev>
    895a:	687a      	ldr	r2, [r7, #4]
    895c:	4b05      	ldr	r3, [pc, #20]	(8974 <_ZN15CommandAttendreC1Ei+0x2c>)
    895e:	6013      	str	r3, [r2, #0]
    8960:	687a      	ldr	r2, [r7, #4]
    8962:	683b      	ldr	r3, [r7, #0]
    8964:	6053      	str	r3, [r2, #4]
{
}
    8966:	687b      	ldr	r3, [r7, #4]
    8968:	4618      	mov	r0, r3
    896a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    896e:	46bd      	mov	sp, r7
    8970:	bd80      	pop	{r7, pc}
    8972:	46c0      	nop			(mov r8, r8)
    8974:	00022198 	.word	0x00022198

00008978 <_ZN15CommandAttendreC2Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    8978:	b580      	push	{r7, lr}
    897a:	b082      	sub	sp, #8
    897c:	af00      	add	r7, sp, #0
    897e:	6078      	str	r0, [r7, #4]
    8980:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    8982:	687b      	ldr	r3, [r7, #4]
    8984:	4618      	mov	r0, r3
    8986:	f7ff fbcf 	bl	8128 <_ZN7CommandC2Ev>
    898a:	687a      	ldr	r2, [r7, #4]
    898c:	4b05      	ldr	r3, [pc, #20]	(89a4 <_ZN15CommandAttendreC2Ei+0x2c>)
    898e:	6013      	str	r3, [r2, #0]
    8990:	687a      	ldr	r2, [r7, #4]
    8992:	683b      	ldr	r3, [r7, #0]
    8994:	6053      	str	r3, [r2, #4]
{
}
    8996:	687b      	ldr	r3, [r7, #4]
    8998:	4618      	mov	r0, r3
    899a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    899e:	46bd      	mov	sp, r7
    89a0:	bd80      	pop	{r7, pc}
    89a2:	46c0      	nop			(mov r8, r8)
    89a4:	00022198 	.word	0x00022198

000089a8 <_ZN13CommandVirage6updateEv>:
    vitesseLinMax = vitesseLineaireMax;

    m_fini = false;
}

void CommandVirage::update()
    89a8:	b590      	push	{r4, r7, lr}
    89aa:	b091      	sub	sp, #68
    89ac:	af00      	add	r7, sp, #0
    89ae:	6178      	str	r0, [r7, #20]
{
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    89b0:	4b85      	ldr	r3, [pc, #532]	(8bc8 <_ZN13CommandVirage6updateEv+0x220>)
    89b2:	62bb      	str	r3, [r7, #40]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    89b4:	4b85      	ldr	r3, [pc, #532]	(8bcc <_ZN13CommandVirage6updateEv+0x224>)
    89b6:	62fb      	str	r3, [r7, #44]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    89b8:	697b      	ldr	r3, [r7, #20]
    89ba:	695b      	ldr	r3, [r3, #20]
    89bc:	633b      	str	r3, [r7, #48]

    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    89be:	6b38      	ldr	r0, [r7, #48]
    89c0:	6b39      	ldr	r1, [r7, #48]
    89c2:	f012 fc7b 	bl	1b2bc <__aeabi_fmul>
    89c6:	4603      	mov	r3, r0
    89c8:	461a      	mov	r2, r3
    89ca:	697b      	ldr	r3, [r7, #20]
    89cc:	699b      	ldr	r3, [r3, #24]
    89ce:	4610      	mov	r0, r2
    89d0:	4619      	mov	r1, r3
    89d2:	f012 fb69 	bl	1b0a8 <__aeabi_fsub>
    89d6:	4603      	mov	r3, r0
    89d8:	4618      	mov	r0, r3
    89da:	497d      	ldr	r1, [pc, #500]	(8bd0 <_ZN13CommandVirage6updateEv+0x228>)
    89dc:	f012 fc6e 	bl	1b2bc <__aeabi_fmul>
    89e0:	4603      	mov	r3, r0
    89e2:	4618      	mov	r0, r3
    89e4:	6af9      	ldr	r1, [r7, #44]
    89e6:	f012 fd1d 	bl	1b424 <__aeabi_fdiv>
    89ea:	4603      	mov	r3, r0
    89ec:	637b      	str	r3, [r7, #52]

    float angleRestant = diffAngle(angleVise, Odometrie::odometrie->getPos().getAngle());
    89ee:	697b      	ldr	r3, [r7, #20]
    89f0:	691c      	ldr	r4, [r3, #16]
    89f2:	4b78      	ldr	r3, [pc, #480]	(8bd4 <_ZN13CommandVirage6updateEv+0x22c>)
    89f4:	681a      	ldr	r2, [r3, #0]
    89f6:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    89fa:	4618      	mov	r0, r3
    89fc:	4611      	mov	r1, r2
    89fe:	f001 faa3 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    8a02:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8a06:	4618      	mov	r0, r3
    8a08:	f006 fc26 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    8a0c:	4603      	mov	r3, r0
    8a0e:	4620      	mov	r0, r4
    8a10:	4619      	mov	r1, r3
    8a12:	f7ff fdc5 	bl	85a0 <_Z9diffAngleff>
    8a16:	4603      	mov	r3, r0
    8a18:	63bb      	str	r3, [r7, #56]
    float distanceRestante = abs(rayonCourbure*angleRestant);
    8a1a:	697b      	ldr	r3, [r7, #20]
    8a1c:	685b      	ldr	r3, [r3, #4]
    8a1e:	4618      	mov	r0, r3
    8a20:	6bb9      	ldr	r1, [r7, #56]
    8a22:	f012 fc4b 	bl	1b2bc <__aeabi_fmul>
    8a26:	4603      	mov	r3, r0
    8a28:	4618      	mov	r0, r3
    8a2a:	496b      	ldr	r1, [pc, #428]	(8bd8 <_ZN13CommandVirage6updateEv+0x230>)
    8a2c:	f012 fe00 	bl	1b630 <__aeabi_fcmpgt>
    8a30:	4603      	mov	r3, r0
    8a32:	2b00      	cmp	r3, #0
    8a34:	d008      	beq.n	8a48 <_ZN13CommandVirage6updateEv+0xa0>
    8a36:	697b      	ldr	r3, [r7, #20]
    8a38:	685b      	ldr	r3, [r3, #4]
    8a3a:	4618      	mov	r0, r3
    8a3c:	6bb9      	ldr	r1, [r7, #56]
    8a3e:	f012 fc3d 	bl	1b2bc <__aeabi_fmul>
    8a42:	4603      	mov	r3, r0
    8a44:	607b      	str	r3, [r7, #4]
    8a46:	e009      	b.n	8a5c <_ZN13CommandVirage6updateEv+0xb4>
    8a48:	697b      	ldr	r3, [r7, #20]
    8a4a:	685b      	ldr	r3, [r3, #4]
    8a4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8a50:	4618      	mov	r0, r3
    8a52:	6bb9      	ldr	r1, [r7, #56]
    8a54:	f012 fc32 	bl	1b2bc <__aeabi_fmul>
    8a58:	4603      	mov	r3, r0
    8a5a:	607b      	str	r3, [r7, #4]
    8a5c:	687a      	ldr	r2, [r7, #4]
    8a5e:	63fa      	str	r2, [r7, #60]

    // gestion de si la commande a fini
    // si l'angle restant est bon ou si on a dépassé l'angle visé
    if (abs(angleRestant) < M_PI/90.0f || ((angleRestant > 0.0f) != (rayonCourbure > 0.0f)))
    8a60:	6bb8      	ldr	r0, [r7, #56]
    8a62:	495d      	ldr	r1, [pc, #372]	(8bd8 <_ZN13CommandVirage6updateEv+0x230>)
    8a64:	f012 fde4 	bl	1b630 <__aeabi_fcmpgt>
    8a68:	4603      	mov	r3, r0
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d00f      	beq.n	8a8e <_ZN13CommandVirage6updateEv+0xe6>
    8a6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a72:	70fb      	strb	r3, [r7, #3]
    8a74:	6bb8      	ldr	r0, [r7, #56]
    8a76:	4958      	ldr	r1, [pc, #352]	(8bd8 <_ZN13CommandVirage6updateEv+0x230>)
    8a78:	f012 fdb2 	bl	1b5e0 <__aeabi_fcmpeq>
    8a7c:	4603      	mov	r3, r0
    8a7e:	2b00      	cmp	r3, #0
    8a80:	d102      	bne.n	8a88 <_ZN13CommandVirage6updateEv+0xe0>
    8a82:	f04f 0301 	mov.w	r3, #1	; 0x1
    8a86:	70fb      	strb	r3, [r7, #3]
    8a88:	78fb      	ldrb	r3, [r7, #3]
    8a8a:	60bb      	str	r3, [r7, #8]
    8a8c:	e03e      	b.n	8b0c <_ZN13CommandVirage6updateEv+0x164>
    8a8e:	6bbb      	ldr	r3, [r7, #56]
    8a90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    8a94:	4618      	mov	r0, r3
    8a96:	f011 ff9f 	bl	1a9d8 <__aeabi_f2d>
    8a9a:	4602      	mov	r2, r0
    8a9c:	460b      	mov	r3, r1
    8a9e:	4610      	mov	r0, r2
    8aa0:	4619      	mov	r1, r3
    8aa2:	a247      	add	r2, pc, #284	(adr r2, 8bc0 <_ZN13CommandVirage6updateEv+0x218>)
    8aa4:	ca0c      	ldmia	r2!, {r2, r3}
    8aa6:	f012 fa5b 	bl	1af60 <__aeabi_dcmplt>
    8aaa:	4603      	mov	r3, r0
    8aac:	2b00      	cmp	r3, #0
    8aae:	d124      	bne.n	8afa <_ZN13CommandVirage6updateEv+0x152>
    8ab0:	f04f 0300 	mov.w	r3, #0	; 0x0
    8ab4:	70bb      	strb	r3, [r7, #2]
    8ab6:	6bb8      	ldr	r0, [r7, #56]
    8ab8:	4947      	ldr	r1, [pc, #284]	(8bd8 <_ZN13CommandVirage6updateEv+0x230>)
    8aba:	f012 fdb9 	bl	1b630 <__aeabi_fcmpgt>
    8abe:	4603      	mov	r3, r0
    8ac0:	2b00      	cmp	r3, #0
    8ac2:	d002      	beq.n	8aca <_ZN13CommandVirage6updateEv+0x122>
    8ac4:	f04f 0301 	mov.w	r3, #1	; 0x1
    8ac8:	70bb      	strb	r3, [r7, #2]
    8aca:	78ba      	ldrb	r2, [r7, #2]
    8acc:	613a      	str	r2, [r7, #16]
    8ace:	697b      	ldr	r3, [r7, #20]
    8ad0:	685a      	ldr	r2, [r3, #4]
    8ad2:	f04f 0300 	mov.w	r3, #0	; 0x0
    8ad6:	707b      	strb	r3, [r7, #1]
    8ad8:	4610      	mov	r0, r2
    8ada:	493f      	ldr	r1, [pc, #252]	(8bd8 <_ZN13CommandVirage6updateEv+0x230>)
    8adc:	f012 fda8 	bl	1b630 <__aeabi_fcmpgt>
    8ae0:	4603      	mov	r3, r0
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d002      	beq.n	8aec <_ZN13CommandVirage6updateEv+0x144>
    8ae6:	f04f 0301 	mov.w	r3, #1	; 0x1
    8aea:	707b      	strb	r3, [r7, #1]
    8aec:	787b      	ldrb	r3, [r7, #1]
    8aee:	693a      	ldr	r2, [r7, #16]
    8af0:	ea82 0303 	eor.w	r3, r2, r3
    8af4:	b2db      	uxtb	r3, r3
    8af6:	2b00      	cmp	r3, #0
    8af8:	d003      	beq.n	8b02 <_ZN13CommandVirage6updateEv+0x15a>
    8afa:	f04f 0301 	mov.w	r3, #1	; 0x1
    8afe:	60fb      	str	r3, [r7, #12]
    8b00:	e002      	b.n	8b08 <_ZN13CommandVirage6updateEv+0x160>
    8b02:	f04f 0200 	mov.w	r2, #0	; 0x0
    8b06:	60fa      	str	r2, [r7, #12]
    8b08:	68fb      	ldr	r3, [r7, #12]
    8b0a:	60bb      	str	r3, [r7, #8]
    8b0c:	68ba      	ldr	r2, [r7, #8]
    8b0e:	2a00      	cmp	r2, #0
    8b10:	d003      	beq.n	8b1a <_ZN13CommandVirage6updateEv+0x172>
    {
        m_fini = true;
    8b12:	697b      	ldr	r3, [r7, #20]
    8b14:	f04f 0201 	mov.w	r2, #1	; 0x1
    8b18:	771a      	strb	r2, [r3, #28]
    }

    // phase de vitesse max
    if (distanceRestante > distanceVitesseMax)
    8b1a:	6bf8      	ldr	r0, [r7, #60]
    8b1c:	6b79      	ldr	r1, [r7, #52]
    8b1e:	f012 fd87 	bl	1b630 <__aeabi_fcmpgt>
    8b22:	4603      	mov	r3, r0
    8b24:	2b00      	cmp	r3, #0
    8b26:	d016      	beq.n	8b56 <_ZN13CommandVirage6updateEv+0x1ae>
    {
            linSpeed += accLinMax;
    8b28:	697b      	ldr	r3, [r7, #20]
    8b2a:	689b      	ldr	r3, [r3, #8]
    8b2c:	4618      	mov	r0, r3
    8b2e:	6ab9      	ldr	r1, [r7, #40]
    8b30:	f012 fabc 	bl	1b0ac <__addsf3>
    8b34:	4603      	mov	r3, r0
    8b36:	461a      	mov	r2, r3
    8b38:	697b      	ldr	r3, [r7, #20]
    8b3a:	609a      	str	r2, [r3, #8]
        if (linSpeed > vitLinMax)
    8b3c:	697b      	ldr	r3, [r7, #20]
    8b3e:	689b      	ldr	r3, [r3, #8]
    8b40:	4618      	mov	r0, r3
    8b42:	6b39      	ldr	r1, [r7, #48]
    8b44:	f012 fd74 	bl	1b630 <__aeabi_fcmpgt>
    8b48:	4603      	mov	r3, r0
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	d027      	beq.n	8b9e <_ZN13CommandVirage6updateEv+0x1f6>
            linSpeed = vitLinMax;
    8b4e:	697a      	ldr	r2, [r7, #20]
    8b50:	6b3b      	ldr	r3, [r7, #48]
    8b52:	6093      	str	r3, [r2, #8]
    8b54:	e023      	b.n	8b9e <_ZN13CommandVirage6updateEv+0x1f6>
    }

    // phase de décéleration
    else
    {
        linSpeed = sqrt(vFin2+2.0f*distanceRestante*decLinMax);
    8b56:	697b      	ldr	r3, [r7, #20]
    8b58:	699c      	ldr	r4, [r3, #24]
    8b5a:	6bfb      	ldr	r3, [r7, #60]
    8b5c:	4618      	mov	r0, r3
    8b5e:	4619      	mov	r1, r3
    8b60:	f012 faa4 	bl	1b0ac <__addsf3>
    8b64:	4603      	mov	r3, r0
    8b66:	4618      	mov	r0, r3
    8b68:	6af9      	ldr	r1, [r7, #44]
    8b6a:	f012 fba7 	bl	1b2bc <__aeabi_fmul>
    8b6e:	4603      	mov	r3, r0
    8b70:	4620      	mov	r0, r4
    8b72:	4619      	mov	r1, r3
    8b74:	f012 fa9a 	bl	1b0ac <__addsf3>
    8b78:	4603      	mov	r3, r0
    8b7a:	4618      	mov	r0, r3
    8b7c:	f011 ff2c 	bl	1a9d8 <__aeabi_f2d>
    8b80:	4602      	mov	r2, r0
    8b82:	460b      	mov	r3, r1
    8b84:	4610      	mov	r0, r2
    8b86:	4619      	mov	r1, r3
    8b88:	f016 f862 	bl	1ec50 <sqrt>
    8b8c:	4602      	mov	r2, r0
    8b8e:	460b      	mov	r3, r1
    8b90:	4610      	mov	r0, r2
    8b92:	4619      	mov	r1, r3
    8b94:	f012 fa34 	bl	1b000 <__aeabi_d2f>
    8b98:	4602      	mov	r2, r0
    8b9a:	697b      	ldr	r3, [r7, #20]
    8b9c:	609a      	str	r2, [r3, #8]
    }

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
    8b9e:	697b      	ldr	r3, [r7, #20]
    8ba0:	689a      	ldr	r2, [r3, #8]
    8ba2:	697b      	ldr	r3, [r7, #20]
    8ba4:	685b      	ldr	r3, [r3, #4]
    8ba6:	4610      	mov	r0, r2
    8ba8:	4619      	mov	r1, r3
    8baa:	f012 fc3b 	bl	1b424 <__aeabi_fdiv>
    8bae:	4603      	mov	r3, r0
    8bb0:	461a      	mov	r2, r3
    8bb2:	697b      	ldr	r3, [r7, #20]
    8bb4:	60da      	str	r2, [r3, #12]
}
    8bb6:	f107 0744 	add.w	r7, r7, #68	; 0x44
    8bba:	46bd      	mov	sp, r7
    8bbc:	bd90      	pop	{r4, r7, pc}
    8bbe:	46c0      	nop			(mov r8, r8)
    8bc0:	a2529d39 	.word	0xa2529d39
    8bc4:	3fa1df46 	.word	0x3fa1df46
    8bc8:	3ccccccd 	.word	0x3ccccccd
    8bcc:	3ca3d70a 	.word	0x3ca3d70a
    8bd0:	3f000000 	.word	0x3f000000
    8bd4:	0580      	.short	0x0580
    8bd6:	00          	.byte	0x00
    8bd7:	20          	.byte	0x20
    8bd8:	00000000 	.word	0x00000000

00008bdc <_ZN13CommandVirageC1Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8bdc:	b580      	push	{r7, lr}
    8bde:	b088      	sub	sp, #32
    8be0:	af00      	add	r7, sp, #0
    8be2:	60f8      	str	r0, [r7, #12]
    8be4:	60b9      	str	r1, [r7, #8]
    8be6:	607a      	str	r2, [r7, #4]
    8be8:	603b      	str	r3, [r7, #0]
    8bea:	68fb      	ldr	r3, [r7, #12]
    8bec:	4618      	mov	r0, r3
    8bee:	f7ff fa9b 	bl	8128 <_ZN7CommandC2Ev>
    8bf2:	68fa      	ldr	r2, [r7, #12]
    8bf4:	4b26      	ldr	r3, [pc, #152]	(8c90 <_ZN13CommandVirageC1Effff+0xb4>)
    8bf6:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8bf8:	6878      	ldr	r0, [r7, #4]
    8bfa:	4926      	ldr	r1, [pc, #152]	(8c94 <_ZN13CommandVirageC1Effff+0xb8>)
    8bfc:	f012 fd18 	bl	1b630 <__aeabi_fcmpgt>
    8c00:	4603      	mov	r3, r0
    8c02:	2b00      	cmp	r3, #0
    8c04:	d003      	beq.n	8c0e <_ZN13CommandVirageC1Effff+0x32>
        rayonCourbure = rayon;
    8c06:	68fa      	ldr	r2, [r7, #12]
    8c08:	68bb      	ldr	r3, [r7, #8]
    8c0a:	6053      	str	r3, [r2, #4]
    8c0c:	e004      	b.n	8c18 <_ZN13CommandVirageC1Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8c0e:	68bb      	ldr	r3, [r7, #8]
    8c10:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8c14:	68fb      	ldr	r3, [r7, #12]
    8c16:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8c18:	4b1f      	ldr	r3, [pc, #124]	(8c98 <_ZN13CommandVirageC1Effff+0xbc>)
    8c1a:	681b      	ldr	r3, [r3, #0]
    8c1c:	4618      	mov	r0, r3
    8c1e:	f001 f97b 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    8c22:	4602      	mov	r2, r0
    8c24:	68fb      	ldr	r3, [r7, #12]
    8c26:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8c28:	4b1b      	ldr	r3, [pc, #108]	(8c98 <_ZN13CommandVirageC1Effff+0xbc>)
    8c2a:	681b      	ldr	r3, [r3, #0]
    8c2c:	4618      	mov	r0, r3
    8c2e:	f001 f967 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8c32:	4602      	mov	r2, r0
    8c34:	68fb      	ldr	r3, [r7, #12]
    8c36:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8c38:	4b17      	ldr	r3, [pc, #92]	(8c98 <_ZN13CommandVirageC1Effff+0xbc>)
    8c3a:	681a      	ldr	r2, [r3, #0]
    8c3c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8c40:	4618      	mov	r0, r3
    8c42:	4611      	mov	r1, r2
    8c44:	f001 f980 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    8c48:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8c4c:	4618      	mov	r0, r3
    8c4e:	f006 fb03 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    8c52:	4603      	mov	r3, r0
    8c54:	4618      	mov	r0, r3
    8c56:	6879      	ldr	r1, [r7, #4]
    8c58:	f012 fa28 	bl	1b0ac <__addsf3>
    8c5c:	4603      	mov	r3, r0
    8c5e:	461a      	mov	r2, r3
    8c60:	68fb      	ldr	r3, [r7, #12]
    8c62:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    8c64:	6ab8      	ldr	r0, [r7, #40]
    8c66:	6ab9      	ldr	r1, [r7, #40]
    8c68:	f012 fb28 	bl	1b2bc <__aeabi_fmul>
    8c6c:	4603      	mov	r3, r0
    8c6e:	461a      	mov	r2, r3
    8c70:	68fb      	ldr	r3, [r7, #12]
    8c72:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    8c74:	68fa      	ldr	r2, [r7, #12]
    8c76:	683b      	ldr	r3, [r7, #0]
    8c78:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8c7a:	68fa      	ldr	r2, [r7, #12]
    8c7c:	f04f 0300 	mov.w	r3, #0	; 0x0
    8c80:	7713      	strb	r3, [r2, #28]
}
    8c82:	68fb      	ldr	r3, [r7, #12]
    8c84:	4618      	mov	r0, r3
    8c86:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8c8a:	46bd      	mov	sp, r7
    8c8c:	bd80      	pop	{r7, pc}
    8c8e:	46c0      	nop			(mov r8, r8)
    8c90:	000221c0 	.word	0x000221c0
    8c94:	00000000 	.word	0x00000000
    8c98:	20000580 	.word	0x20000580

00008c9c <_ZN13CommandVirageC2Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8c9c:	b580      	push	{r7, lr}
    8c9e:	b088      	sub	sp, #32
    8ca0:	af00      	add	r7, sp, #0
    8ca2:	60f8      	str	r0, [r7, #12]
    8ca4:	60b9      	str	r1, [r7, #8]
    8ca6:	607a      	str	r2, [r7, #4]
    8ca8:	603b      	str	r3, [r7, #0]
    8caa:	68fb      	ldr	r3, [r7, #12]
    8cac:	4618      	mov	r0, r3
    8cae:	f7ff fa3b 	bl	8128 <_ZN7CommandC2Ev>
    8cb2:	68fa      	ldr	r2, [r7, #12]
    8cb4:	4b26      	ldr	r3, [pc, #152]	(8d50 <_ZN13CommandVirageC2Effff+0xb4>)
    8cb6:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8cb8:	6878      	ldr	r0, [r7, #4]
    8cba:	4926      	ldr	r1, [pc, #152]	(8d54 <_ZN13CommandVirageC2Effff+0xb8>)
    8cbc:	f012 fcb8 	bl	1b630 <__aeabi_fcmpgt>
    8cc0:	4603      	mov	r3, r0
    8cc2:	2b00      	cmp	r3, #0
    8cc4:	d003      	beq.n	8cce <_ZN13CommandVirageC2Effff+0x32>
        rayonCourbure = rayon;
    8cc6:	68fa      	ldr	r2, [r7, #12]
    8cc8:	68bb      	ldr	r3, [r7, #8]
    8cca:	6053      	str	r3, [r2, #4]
    8ccc:	e004      	b.n	8cd8 <_ZN13CommandVirageC2Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8cce:	68bb      	ldr	r3, [r7, #8]
    8cd0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8cd4:	68fb      	ldr	r3, [r7, #12]
    8cd6:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8cd8:	4b1f      	ldr	r3, [pc, #124]	(8d58 <_ZN13CommandVirageC2Effff+0xbc>)
    8cda:	681b      	ldr	r3, [r3, #0]
    8cdc:	4618      	mov	r0, r3
    8cde:	f001 f91b 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    8ce2:	4602      	mov	r2, r0
    8ce4:	68fb      	ldr	r3, [r7, #12]
    8ce6:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8ce8:	4b1b      	ldr	r3, [pc, #108]	(8d58 <_ZN13CommandVirageC2Effff+0xbc>)
    8cea:	681b      	ldr	r3, [r3, #0]
    8cec:	4618      	mov	r0, r3
    8cee:	f001 f907 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8cf2:	4602      	mov	r2, r0
    8cf4:	68fb      	ldr	r3, [r7, #12]
    8cf6:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8cf8:	4b17      	ldr	r3, [pc, #92]	(8d58 <_ZN13CommandVirageC2Effff+0xbc>)
    8cfa:	681a      	ldr	r2, [r3, #0]
    8cfc:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8d00:	4618      	mov	r0, r3
    8d02:	4611      	mov	r1, r2
    8d04:	f001 f920 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    8d08:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8d0c:	4618      	mov	r0, r3
    8d0e:	f006 faa3 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    8d12:	4603      	mov	r3, r0
    8d14:	4618      	mov	r0, r3
    8d16:	6879      	ldr	r1, [r7, #4]
    8d18:	f012 f9c8 	bl	1b0ac <__addsf3>
    8d1c:	4603      	mov	r3, r0
    8d1e:	461a      	mov	r2, r3
    8d20:	68fb      	ldr	r3, [r7, #12]
    8d22:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    8d24:	6ab8      	ldr	r0, [r7, #40]
    8d26:	6ab9      	ldr	r1, [r7, #40]
    8d28:	f012 fac8 	bl	1b2bc <__aeabi_fmul>
    8d2c:	4603      	mov	r3, r0
    8d2e:	461a      	mov	r2, r3
    8d30:	68fb      	ldr	r3, [r7, #12]
    8d32:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    8d34:	68fa      	ldr	r2, [r7, #12]
    8d36:	683b      	ldr	r3, [r7, #0]
    8d38:	6153      	str	r3, [r2, #20]

    m_fini = false;
    8d3a:	68fa      	ldr	r2, [r7, #12]
    8d3c:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d40:	7713      	strb	r3, [r2, #28]
}
    8d42:	68fb      	ldr	r3, [r7, #12]
    8d44:	4618      	mov	r0, r3
    8d46:	f107 0720 	add.w	r7, r7, #32	; 0x20
    8d4a:	46bd      	mov	sp, r7
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	46c0      	nop			(mov r8, r8)
    8d50:	000221c0 	.word	0x000221c0
    8d54:	00000000 	.word	0x00000000
    8d58:	20000580 	.word	0x20000580

00008d5c <_ZN13CommandAllerA11resetSpeedsEv>:
                linSpeed = linSpeedVisee;
        }
    }
}

void CommandAllerA::resetSpeeds()
    8d5c:	b580      	push	{r7, lr}
    8d5e:	b082      	sub	sp, #8
    8d60:	af00      	add	r7, sp, #0
    8d62:	6078      	str	r0, [r7, #4]
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8d64:	4b09      	ldr	r3, [pc, #36]	(8d8c <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    8d66:	681b      	ldr	r3, [r3, #0]
    8d68:	4618      	mov	r0, r3
    8d6a:	f001 f8d5 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    8d6e:	4602      	mov	r2, r0
    8d70:	687b      	ldr	r3, [r7, #4]
    8d72:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8d74:	4b05      	ldr	r3, [pc, #20]	(8d8c <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    8d76:	681b      	ldr	r3, [r3, #0]
    8d78:	4618      	mov	r0, r3
    8d7a:	f001 f8c1 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8d7e:	4602      	mov	r2, r0
    8d80:	687b      	ldr	r3, [r7, #4]
    8d82:	61da      	str	r2, [r3, #28]
}
    8d84:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8d88:	46bd      	mov	sp, r7
    8d8a:	bd80      	pop	{r7, pc}
    8d8c:	20000580 	.word	0x20000580

00008d90 <_ZN18CommandTournerVers6updateEv>:
    signeAngle = SGN_UNDEF;

    maxAngSpeed = maxSpeed;
}

void CommandTournerVers::update()
    8d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    8d94:	b096      	sub	sp, #88
    8d96:	af00      	add	r7, sp, #0
    8d98:	60f8      	str	r0, [r7, #12]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    8d9a:	4bbe      	ldr	r3, [pc, #760]	(9094 <_ZN18CommandTournerVers6updateEv+0x304>)
    8d9c:	63fb      	str	r3, [r7, #60]
    float vitAngMax = maxAngSpeed;
    8d9e:	68fb      	ldr	r3, [r7, #12]
    8da0:	69db      	ldr	r3, [r3, #28]
    8da2:	643b      	str	r3, [r7, #64]
    // float angleVitesseMax = M_PI/6.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    8da4:	6c38      	ldr	r0, [r7, #64]
    8da6:	49bc      	ldr	r1, [pc, #752]	(9098 <_ZN18CommandTournerVers6updateEv+0x308>)
    8da8:	f012 fa88 	bl	1b2bc <__aeabi_fmul>
    8dac:	4603      	mov	r3, r0
    8dae:	4618      	mov	r0, r3
    8db0:	6c39      	ldr	r1, [r7, #64]
    8db2:	f012 fa83 	bl	1b2bc <__aeabi_fmul>
    8db6:	4603      	mov	r3, r0
    8db8:	4618      	mov	r0, r3
    8dba:	6bf9      	ldr	r1, [r7, #60]
    8dbc:	f012 fb32 	bl	1b424 <__aeabi_fdiv>
    8dc0:	4603      	mov	r3, r0
    8dc2:	647b      	str	r3, [r7, #68]
    float angle = Odometrie::odometrie->getPos().getAngle();
    8dc4:	4bb5      	ldr	r3, [pc, #724]	(909c <_ZN18CommandTournerVers6updateEv+0x30c>)
    8dc6:	681a      	ldr	r2, [r3, #0]
    8dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8dcc:	4618      	mov	r0, r3
    8dce:	4611      	mov	r1, r2
    8dd0:	f001 f8ba 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    8dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8dd8:	4618      	mov	r0, r3
    8dda:	f006 fa3d 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    8dde:	4603      	mov	r3, r0
    8de0:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    8de2:	4bae      	ldr	r3, [pc, #696]	(909c <_ZN18CommandTournerVers6updateEv+0x30c>)
    8de4:	681a      	ldr	r2, [r3, #0]
    8de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
    8dea:	4618      	mov	r0, r3
    8dec:	4611      	mov	r1, r2
    8dee:	f001 f8ab 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    8df2:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8df6:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8dfa:	4618      	mov	r0, r3
    8dfc:	4611      	mov	r1, r2
    8dfe:	f006 fa19 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    float angleVise;
    if (!useAngle)
    8e02:	68fb      	ldr	r3, [r7, #12]
    8e04:	7d5b      	ldrb	r3, [r3, #21]
    8e06:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8e0a:	b2db      	uxtb	r3, r3
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d02c      	beq.n	8e6a <_ZN18CommandTournerVers6updateEv+0xda>
    {
        Position delta = but-pos;
    8e10:	68fb      	ldr	r3, [r7, #12]
    8e12:	f103 0104 	add.w	r1, r3, #4	; 0x4
    8e16:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8e1a:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8e1e:	4618      	mov	r0, r3
    8e20:	f006 f83a 	bl	ee98 <_ZNK8PositionmiERKS_>
        angleVise = atan2(delta.getY(),delta.getX());
    8e24:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8e28:	4618      	mov	r0, r3
    8e2a:	f005 ffe7 	bl	edfc <_ZNK8Position4getYEv>
    8e2e:	4603      	mov	r3, r0
    8e30:	4618      	mov	r0, r3
    8e32:	f011 fdd1 	bl	1a9d8 <__aeabi_f2d>
    8e36:	4604      	mov	r4, r0
    8e38:	460d      	mov	r5, r1
    8e3a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8e3e:	4618      	mov	r0, r3
    8e40:	f005 ffd0 	bl	ede4 <_ZNK8Position4getXEv>
    8e44:	4603      	mov	r3, r0
    8e46:	4618      	mov	r0, r3
    8e48:	f011 fdc6 	bl	1a9d8 <__aeabi_f2d>
    8e4c:	4602      	mov	r2, r0
    8e4e:	460b      	mov	r3, r1
    8e50:	4620      	mov	r0, r4
    8e52:	4629      	mov	r1, r5
    8e54:	f015 fef6 	bl	1ec44 <atan2>
    8e58:	4602      	mov	r2, r0
    8e5a:	460b      	mov	r3, r1
    8e5c:	4610      	mov	r0, r2
    8e5e:	4619      	mov	r1, r3
    8e60:	f012 f8ce 	bl	1b000 <__aeabi_d2f>
    8e64:	4603      	mov	r3, r0
    8e66:	64fb      	str	r3, [r7, #76]
    8e68:	e002      	b.n	8e70 <_ZN18CommandTournerVers6updateEv+0xe0>
    }
    else
    {
        angleVise = butAngle;
    8e6a:	68fb      	ldr	r3, [r7, #12]
    8e6c:	691b      	ldr	r3, [r3, #16]
    8e6e:	64fb      	str	r3, [r7, #76]
    }
    float diffAng = diffAngle(angleVise,angle);
    8e70:	6cf8      	ldr	r0, [r7, #76]
    8e72:	6cb9      	ldr	r1, [r7, #72]
    8e74:	f7ff fb94 	bl	85a0 <_Z9diffAngleff>
    8e78:	4603      	mov	r3, r0
    8e7a:	653b      	str	r3, [r7, #80]

    // Check sharps
    StrategieV2::setTourneSurSoiMeme(true);
    8e7c:	f04f 0001 	mov.w	r0, #1	; 0x1
    8e80:	f00d f88a 	bl	15f98 <_ZN11StrategieV219setTourneSurSoiMemeEb>


    //qDebug() << abs(angleVise)*180./3.14 << angleVitesseMax;

    if (abs(diffAng) > angleVitesseMax)
    8e84:	6d38      	ldr	r0, [r7, #80]
    8e86:	4986      	ldr	r1, [pc, #536]	(90a0 <_ZN18CommandTournerVers6updateEv+0x310>)
    8e88:	f012 fbd2 	bl	1b630 <__aeabi_fcmpgt>
    8e8c:	4603      	mov	r3, r0
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d00f      	beq.n	8eb2 <_ZN18CommandTournerVers6updateEv+0x122>
    8e92:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e96:	71fb      	strb	r3, [r7, #7]
    8e98:	6d38      	ldr	r0, [r7, #80]
    8e9a:	4981      	ldr	r1, [pc, #516]	(90a0 <_ZN18CommandTournerVers6updateEv+0x310>)
    8e9c:	f012 fba0 	bl	1b5e0 <__aeabi_fcmpeq>
    8ea0:	4603      	mov	r3, r0
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d102      	bne.n	8eac <_ZN18CommandTournerVers6updateEv+0x11c>
    8ea6:	f04f 0301 	mov.w	r3, #1	; 0x1
    8eaa:	71fb      	strb	r3, [r7, #7]
    8eac:	79fb      	ldrb	r3, [r7, #7]
    8eae:	60bb      	str	r3, [r7, #8]
    8eb0:	e011      	b.n	8ed6 <_ZN18CommandTournerVers6updateEv+0x146>
    8eb2:	6d3b      	ldr	r3, [r7, #80]
    8eb4:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8eb8:	f04f 0300 	mov.w	r3, #0	; 0x0
    8ebc:	71bb      	strb	r3, [r7, #6]
    8ebe:	4610      	mov	r0, r2
    8ec0:	6c79      	ldr	r1, [r7, #68]
    8ec2:	f012 fbb5 	bl	1b630 <__aeabi_fcmpgt>
    8ec6:	4603      	mov	r3, r0
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d002      	beq.n	8ed2 <_ZN18CommandTournerVers6updateEv+0x142>
    8ecc:	f04f 0301 	mov.w	r3, #1	; 0x1
    8ed0:	71bb      	strb	r3, [r7, #6]
    8ed2:	79bb      	ldrb	r3, [r7, #6]
    8ed4:	60bb      	str	r3, [r7, #8]
    8ed6:	68bb      	ldr	r3, [r7, #8]
    8ed8:	2b00      	cmp	r3, #0
    8eda:	f000 80c9 	beq.w	9070 <_ZN18CommandTournerVers6updateEv+0x2e0>
    {
        bool hasToDecelerate = (fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    8ede:	6d3b      	ldr	r3, [r7, #80]
    8ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8ee4:	4618      	mov	r0, r3
    8ee6:	f011 fd77 	bl	1a9d8 <__aeabi_f2d>
    8eea:	4680      	mov	r8, r0
    8eec:	4689      	mov	r9, r1
    8eee:	68fb      	ldr	r3, [r7, #12]
    8ef0:	68da      	ldr	r2, [r3, #12]
    8ef2:	68fb      	ldr	r3, [r7, #12]
    8ef4:	68db      	ldr	r3, [r3, #12]
    8ef6:	4610      	mov	r0, r2
    8ef8:	4619      	mov	r1, r3
    8efa:	f012 f9df 	bl	1b2bc <__aeabi_fmul>
    8efe:	4603      	mov	r3, r0
    8f00:	4618      	mov	r0, r3
    8f02:	6bf9      	ldr	r1, [r7, #60]
    8f04:	f012 fa8e 	bl	1b424 <__aeabi_fdiv>
    8f08:	4603      	mov	r3, r0
    8f0a:	4618      	mov	r0, r3
    8f0c:	f011 fd64 	bl	1a9d8 <__aeabi_f2d>
    8f10:	4604      	mov	r4, r0
    8f12:	460d      	mov	r5, r1
    8f14:	6bf8      	ldr	r0, [r7, #60]
    8f16:	f011 fd5f 	bl	1a9d8 <__aeabi_f2d>
    8f1a:	4602      	mov	r2, r0
    8f1c:	460b      	mov	r3, r1
    8f1e:	4610      	mov	r0, r2
    8f20:	4619      	mov	r1, r3
    8f22:	f04f 0200 	mov.w	r2, #0	; 0x0
    8f26:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    8f2a:	f011 fda9 	bl	1aa80 <__aeabi_dmul>
    8f2e:	4602      	mov	r2, r0
    8f30:	460b      	mov	r3, r1
    8f32:	4620      	mov	r0, r4
    8f34:	4629      	mov	r1, r5
    8f36:	f011 fbf1 	bl	1a71c <__adddf3>
    8f3a:	4602      	mov	r2, r0
    8f3c:	460b      	mov	r3, r1
    8f3e:	4614      	mov	r4, r2
    8f40:	461d      	mov	r5, r3
    8f42:	f04f 0300 	mov.w	r3, #0	; 0x0
    8f46:	f887 3057 	strb.w	r3, [r7, #87]
    8f4a:	4640      	mov	r0, r8
    8f4c:	4649      	mov	r1, r9
    8f4e:	4622      	mov	r2, r4
    8f50:	462b      	mov	r3, r5
    8f52:	f012 f805 	bl	1af60 <__aeabi_dcmplt>
    8f56:	4603      	mov	r3, r0
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d003      	beq.n	8f64 <_ZN18CommandTournerVers6updateEv+0x1d4>
    8f5c:	f04f 0301 	mov.w	r3, #1	; 0x1
    8f60:	f887 3057 	strb.w	r3, [r7, #87]
        if (diffAng > 0)
    8f64:	6d38      	ldr	r0, [r7, #80]
    8f66:	494e      	ldr	r1, [pc, #312]	(90a0 <_ZN18CommandTournerVers6updateEv+0x310>)
    8f68:	f012 fb62 	bl	1b630 <__aeabi_fcmpgt>
    8f6c:	4603      	mov	r3, r0
    8f6e:	2b00      	cmp	r3, #0
    8f70:	d03c      	beq.n	8fec <_ZN18CommandTournerVers6updateEv+0x25c>
        {
            if (!hasToDecelerate)
    8f72:	f897 3057 	ldrb.w	r3, [r7, #87]
    8f76:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8f7a:	b2db      	uxtb	r3, r3
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	d00a      	beq.n	8f96 <_ZN18CommandTournerVers6updateEv+0x206>
                angSpeed += accAngMax;
    8f80:	68fb      	ldr	r3, [r7, #12]
    8f82:	68db      	ldr	r3, [r3, #12]
    8f84:	4618      	mov	r0, r3
    8f86:	6bf9      	ldr	r1, [r7, #60]
    8f88:	f012 f890 	bl	1b0ac <__addsf3>
    8f8c:	4603      	mov	r3, r0
    8f8e:	461a      	mov	r2, r3
    8f90:	68fb      	ldr	r3, [r7, #12]
    8f92:	60da      	str	r2, [r3, #12]
    8f94:	e01d      	b.n	8fd2 <_ZN18CommandTournerVers6updateEv+0x242>
            else if (angSpeed > accAngMax*2)
    8f96:	68fb      	ldr	r3, [r7, #12]
    8f98:	68dc      	ldr	r4, [r3, #12]
    8f9a:	6bfb      	ldr	r3, [r7, #60]
    8f9c:	4618      	mov	r0, r3
    8f9e:	4619      	mov	r1, r3
    8fa0:	f012 f884 	bl	1b0ac <__addsf3>
    8fa4:	4603      	mov	r3, r0
    8fa6:	4620      	mov	r0, r4
    8fa8:	4619      	mov	r1, r3
    8faa:	f012 fb41 	bl	1b630 <__aeabi_fcmpgt>
    8fae:	4603      	mov	r3, r0
    8fb0:	2b00      	cmp	r3, #0
    8fb2:	d00e      	beq.n	8fd2 <_ZN18CommandTournerVers6updateEv+0x242>
                angSpeed -= accAngMax*2;
    8fb4:	68fb      	ldr	r3, [r7, #12]
    8fb6:	68dc      	ldr	r4, [r3, #12]
    8fb8:	6bf8      	ldr	r0, [r7, #60]
    8fba:	493a      	ldr	r1, [pc, #232]	(90a4 <_ZN18CommandTournerVers6updateEv+0x314>)
    8fbc:	f012 f97e 	bl	1b2bc <__aeabi_fmul>
    8fc0:	4603      	mov	r3, r0
    8fc2:	4620      	mov	r0, r4
    8fc4:	4619      	mov	r1, r3
    8fc6:	f012 f871 	bl	1b0ac <__addsf3>
    8fca:	4603      	mov	r3, r0
    8fcc:	461a      	mov	r2, r3
    8fce:	68fb      	ldr	r3, [r7, #12]
    8fd0:	60da      	str	r2, [r3, #12]

            if (angSpeed > vitAngMax)
    8fd2:	68fb      	ldr	r3, [r7, #12]
    8fd4:	68db      	ldr	r3, [r3, #12]
    8fd6:	4618      	mov	r0, r3
    8fd8:	6c39      	ldr	r1, [r7, #64]
    8fda:	f012 fb29 	bl	1b630 <__aeabi_fcmpgt>
    8fde:	4603      	mov	r3, r0
    8fe0:	2b00      	cmp	r3, #0
    8fe2:	d052      	beq.n	908a <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = vitAngMax;
    8fe4:	68fa      	ldr	r2, [r7, #12]
    8fe6:	6c3b      	ldr	r3, [r7, #64]
    8fe8:	60d3      	str	r3, [r2, #12]
    8fea:	e04e      	b.n	908a <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
        else
        {
            if (!hasToDecelerate)
    8fec:	f897 3057 	ldrb.w	r3, [r7, #87]
    8ff0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8ff4:	b2db      	uxtb	r3, r3
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d00a      	beq.n	9010 <_ZN18CommandTournerVers6updateEv+0x280>
                angSpeed -= accAngMax;
    8ffa:	68fb      	ldr	r3, [r7, #12]
    8ffc:	68db      	ldr	r3, [r3, #12]
    8ffe:	4618      	mov	r0, r3
    9000:	6bf9      	ldr	r1, [r7, #60]
    9002:	f012 f851 	bl	1b0a8 <__aeabi_fsub>
    9006:	4603      	mov	r3, r0
    9008:	461a      	mov	r2, r3
    900a:	68fb      	ldr	r3, [r7, #12]
    900c:	60da      	str	r2, [r3, #12]
    900e:	e01d      	b.n	904c <_ZN18CommandTournerVers6updateEv+0x2bc>
            else if (angSpeed < -accAngMax*2)
    9010:	68fb      	ldr	r3, [r7, #12]
    9012:	68dc      	ldr	r4, [r3, #12]
    9014:	6bf8      	ldr	r0, [r7, #60]
    9016:	4923      	ldr	r1, [pc, #140]	(90a4 <_ZN18CommandTournerVers6updateEv+0x314>)
    9018:	f012 f950 	bl	1b2bc <__aeabi_fmul>
    901c:	4603      	mov	r3, r0
    901e:	4620      	mov	r0, r4
    9020:	4619      	mov	r1, r3
    9022:	f012 fae7 	bl	1b5f4 <__aeabi_fcmplt>
    9026:	4603      	mov	r3, r0
    9028:	2b00      	cmp	r3, #0
    902a:	d00f      	beq.n	904c <_ZN18CommandTournerVers6updateEv+0x2bc>
                angSpeed += accAngMax*2;
    902c:	68fb      	ldr	r3, [r7, #12]
    902e:	68dc      	ldr	r4, [r3, #12]
    9030:	6bfb      	ldr	r3, [r7, #60]
    9032:	4618      	mov	r0, r3
    9034:	4619      	mov	r1, r3
    9036:	f012 f839 	bl	1b0ac <__addsf3>
    903a:	4603      	mov	r3, r0
    903c:	4620      	mov	r0, r4
    903e:	4619      	mov	r1, r3
    9040:	f012 f834 	bl	1b0ac <__addsf3>
    9044:	4603      	mov	r3, r0
    9046:	461a      	mov	r2, r3
    9048:	68fb      	ldr	r3, [r7, #12]
    904a:	60da      	str	r2, [r3, #12]

            if (angSpeed < -vitAngMax)
    904c:	68fb      	ldr	r3, [r7, #12]
    904e:	68da      	ldr	r2, [r3, #12]
    9050:	6c3b      	ldr	r3, [r7, #64]
    9052:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9056:	4610      	mov	r0, r2
    9058:	4619      	mov	r1, r3
    905a:	f012 facb 	bl	1b5f4 <__aeabi_fcmplt>
    905e:	4603      	mov	r3, r0
    9060:	2b00      	cmp	r3, #0
    9062:	d012      	beq.n	908a <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = -vitAngMax;
    9064:	6c3b      	ldr	r3, [r7, #64]
    9066:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    906a:	68fb      	ldr	r3, [r7, #12]
    906c:	60da      	str	r2, [r3, #12]
    906e:	e00c      	b.n	908a <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    9070:	6d38      	ldr	r0, [r7, #80]
    9072:	6c39      	ldr	r1, [r7, #64]
    9074:	f012 f922 	bl	1b2bc <__aeabi_fmul>
    9078:	4603      	mov	r3, r0
    907a:	4618      	mov	r0, r3
    907c:	6c79      	ldr	r1, [r7, #68]
    907e:	f012 f9d1 	bl	1b424 <__aeabi_fdiv>
    9082:	4603      	mov	r3, r0
    9084:	461a      	mov	r2, r3
    9086:	68fb      	ldr	r3, [r7, #12]
    9088:	60da      	str	r2, [r3, #12]
            angSpeed = sqrt(2.0f*diff*accAngMax);
        else
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}
    908a:	f107 0758 	add.w	r7, r7, #88	; 0x58
    908e:	46bd      	mov	sp, r7
    9090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9094:	3983126f 	.word	0x3983126f
    9098:	3f000000 	.word	0x3f000000
    909c:	20000580 	.word	0x20000580
    90a0:	00000000 	.word	0x00000000
    90a4:	c0000000 	.word	0xc0000000

000090a8 <_ZN18CommandTournerVersC1Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    90a8:	b590      	push	{r4, r7, lr}
    90aa:	b087      	sub	sp, #28
    90ac:	af00      	add	r7, sp, #0
    90ae:	60f8      	str	r0, [r7, #12]
    90b0:	60b9      	str	r1, [r7, #8]
    90b2:	607a      	str	r2, [r7, #4]
    : Command()
    90b4:	68fb      	ldr	r3, [r7, #12]
    90b6:	4618      	mov	r0, r3
    90b8:	f7ff f836 	bl	8128 <_ZN7CommandC2Ev>
    90bc:	68fa      	ldr	r2, [r7, #12]
    90be:	4b19      	ldr	r3, [pc, #100]	(9124 <_ZN18CommandTournerVersC1Eff+0x7c>)
    90c0:	6013      	str	r3, [r2, #0]
    90c2:	68fb      	ldr	r3, [r7, #12]
    90c4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    90c8:	4618      	mov	r0, r3
    90ca:	f005 fe4f 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = Position();
    90ce:	68fb      	ldr	r3, [r7, #12]
    90d0:	f103 0404 	add.w	r4, r3, #4	; 0x4
    90d4:	f107 0310 	add.w	r3, r7, #16	; 0x10
    90d8:	4618      	mov	r0, r3
    90da:	f005 fe47 	bl	ed6c <_ZN8PositionC1Ev>
    90de:	4620      	mov	r0, r4
    90e0:	f107 0310 	add.w	r3, r7, #16	; 0x10
    90e4:	e893 0006 	ldmia.w	r3, {r1, r2}
    90e8:	f005 fefc 	bl	eee4 <_ZN8PositionaSES_>
    butAngle = a;
    90ec:	68fa      	ldr	r2, [r7, #12]
    90ee:	68bb      	ldr	r3, [r7, #8]
    90f0:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    90f2:	68fa      	ldr	r2, [r7, #12]
    90f4:	4b0c      	ldr	r3, [pc, #48]	(9128 <_ZN18CommandTournerVersC1Eff+0x80>)
    90f6:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    90f8:	68fa      	ldr	r2, [r7, #12]
    90fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    90fe:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    9100:	68fa      	ldr	r2, [r7, #12]
    9102:	f04f 0300 	mov.w	r3, #0	; 0x0
    9106:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    9108:	68fa      	ldr	r2, [r7, #12]
    910a:	f04f 0300 	mov.w	r3, #0	; 0x0
    910e:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    9110:	68fa      	ldr	r2, [r7, #12]
    9112:	687b      	ldr	r3, [r7, #4]
    9114:	61d3      	str	r3, [r2, #28]
}
    9116:	68fb      	ldr	r3, [r7, #12]
    9118:	4618      	mov	r0, r3
    911a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    911e:	46bd      	mov	sp, r7
    9120:	bd90      	pop	{r4, r7, pc}
    9122:	46c0      	nop			(mov r8, r8)
    9124:	000221e8 	.word	0x000221e8
    9128:	00000000 	.word	0x00000000

0000912c <_ZN18CommandTournerVersC2Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    912c:	b590      	push	{r4, r7, lr}
    912e:	b087      	sub	sp, #28
    9130:	af00      	add	r7, sp, #0
    9132:	60f8      	str	r0, [r7, #12]
    9134:	60b9      	str	r1, [r7, #8]
    9136:	607a      	str	r2, [r7, #4]
    : Command()
    9138:	68fb      	ldr	r3, [r7, #12]
    913a:	4618      	mov	r0, r3
    913c:	f7fe fff4 	bl	8128 <_ZN7CommandC2Ev>
    9140:	68fa      	ldr	r2, [r7, #12]
    9142:	4b19      	ldr	r3, [pc, #100]	(91a8 <_ZN18CommandTournerVersC2Eff+0x7c>)
    9144:	6013      	str	r3, [r2, #0]
    9146:	68fb      	ldr	r3, [r7, #12]
    9148:	f103 0304 	add.w	r3, r3, #4	; 0x4
    914c:	4618      	mov	r0, r3
    914e:	f005 fe0d 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = Position();
    9152:	68fb      	ldr	r3, [r7, #12]
    9154:	f103 0404 	add.w	r4, r3, #4	; 0x4
    9158:	f107 0310 	add.w	r3, r7, #16	; 0x10
    915c:	4618      	mov	r0, r3
    915e:	f005 fe05 	bl	ed6c <_ZN8PositionC1Ev>
    9162:	4620      	mov	r0, r4
    9164:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9168:	e893 0006 	ldmia.w	r3, {r1, r2}
    916c:	f005 feba 	bl	eee4 <_ZN8PositionaSES_>
    butAngle = a;
    9170:	68fa      	ldr	r2, [r7, #12]
    9172:	68bb      	ldr	r3, [r7, #8]
    9174:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    9176:	68fa      	ldr	r2, [r7, #12]
    9178:	4b0c      	ldr	r3, [pc, #48]	(91ac <_ZN18CommandTournerVersC2Eff+0x80>)
    917a:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    917c:	68fa      	ldr	r2, [r7, #12]
    917e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9182:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    9184:	68fa      	ldr	r2, [r7, #12]
    9186:	f04f 0300 	mov.w	r3, #0	; 0x0
    918a:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    918c:	68fa      	ldr	r2, [r7, #12]
    918e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9192:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    9194:	68fa      	ldr	r2, [r7, #12]
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	61d3      	str	r3, [r2, #28]
}
    919a:	68fb      	ldr	r3, [r7, #12]
    919c:	4618      	mov	r0, r3
    919e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    91a2:	46bd      	mov	sp, r7
    91a4:	bd90      	pop	{r4, r7, pc}
    91a6:	46c0      	nop			(mov r8, r8)
    91a8:	000221e8 	.word	0x000221e8
    91ac:	00000000 	.word	0x00000000

000091b0 <_ZN18CommandTournerVersC1E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    91b0:	b580      	push	{r7, lr}
    91b2:	b084      	sub	sp, #16
    91b4:	af00      	add	r7, sp, #0
    91b6:	60f8      	str	r0, [r7, #12]
    91b8:	f107 0004 	add.w	r0, r7, #4	; 0x4
    91bc:	e880 0006 	stmia.w	r0, {r1, r2}
    91c0:	603b      	str	r3, [r7, #0]
    : Command()
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	4618      	mov	r0, r3
    91c6:	f7fe ffaf 	bl	8128 <_ZN7CommandC2Ev>
    91ca:	68fa      	ldr	r2, [r7, #12]
    91cc:	4b16      	ldr	r3, [pc, #88]	(9228 <_ZN18CommandTournerVersC1E8Positionf+0x78>)
    91ce:	6013      	str	r3, [r2, #0]
    91d0:	68fb      	ldr	r3, [r7, #12]
    91d2:	f103 0304 	add.w	r3, r3, #4	; 0x4
    91d6:	4618      	mov	r0, r3
    91d8:	f005 fdc8 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = p;
    91dc:	68fb      	ldr	r3, [r7, #12]
    91de:	f103 0304 	add.w	r3, r3, #4	; 0x4
    91e2:	4618      	mov	r0, r3
    91e4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    91e8:	e893 0006 	ldmia.w	r3, {r1, r2}
    91ec:	f005 fe7a 	bl	eee4 <_ZN8PositionaSES_>
    butAngle = 0;
    91f0:	68fa      	ldr	r2, [r7, #12]
    91f2:	4b0e      	ldr	r3, [pc, #56]	(922c <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    91f4:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    91f6:	68fa      	ldr	r2, [r7, #12]
    91f8:	4b0c      	ldr	r3, [pc, #48]	(922c <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    91fa:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    91fc:	68fa      	ldr	r2, [r7, #12]
    91fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    9202:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    9204:	68fa      	ldr	r2, [r7, #12]
    9206:	f04f 0300 	mov.w	r3, #0	; 0x0
    920a:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    920c:	68fa      	ldr	r2, [r7, #12]
    920e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9212:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    9214:	68fa      	ldr	r2, [r7, #12]
    9216:	683b      	ldr	r3, [r7, #0]
    9218:	61d3      	str	r3, [r2, #28]
}
    921a:	68fb      	ldr	r3, [r7, #12]
    921c:	4618      	mov	r0, r3
    921e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    9222:	46bd      	mov	sp, r7
    9224:	bd80      	pop	{r7, pc}
    9226:	46c0      	nop			(mov r8, r8)
    9228:	000221e8 	.word	0x000221e8
    922c:	00000000 	.word	0x00000000

00009230 <_ZN18CommandTournerVersC2E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    9230:	b580      	push	{r7, lr}
    9232:	b084      	sub	sp, #16
    9234:	af00      	add	r7, sp, #0
    9236:	60f8      	str	r0, [r7, #12]
    9238:	f107 0004 	add.w	r0, r7, #4	; 0x4
    923c:	e880 0006 	stmia.w	r0, {r1, r2}
    9240:	603b      	str	r3, [r7, #0]
    : Command()
    9242:	68fb      	ldr	r3, [r7, #12]
    9244:	4618      	mov	r0, r3
    9246:	f7fe ff6f 	bl	8128 <_ZN7CommandC2Ev>
    924a:	68fa      	ldr	r2, [r7, #12]
    924c:	4b16      	ldr	r3, [pc, #88]	(92a8 <_ZN18CommandTournerVersC2E8Positionf+0x78>)
    924e:	6013      	str	r3, [r2, #0]
    9250:	68fb      	ldr	r3, [r7, #12]
    9252:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9256:	4618      	mov	r0, r3
    9258:	f005 fd88 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = p;
    925c:	68fb      	ldr	r3, [r7, #12]
    925e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9262:	4618      	mov	r0, r3
    9264:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9268:	e893 0006 	ldmia.w	r3, {r1, r2}
    926c:	f005 fe3a 	bl	eee4 <_ZN8PositionaSES_>
    butAngle = 0;
    9270:	68fa      	ldr	r2, [r7, #12]
    9272:	4b0e      	ldr	r3, [pc, #56]	(92ac <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    9274:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    9276:	68fa      	ldr	r2, [r7, #12]
    9278:	4b0c      	ldr	r3, [pc, #48]	(92ac <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    927a:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    927c:	68fa      	ldr	r2, [r7, #12]
    927e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9282:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    9284:	68fa      	ldr	r2, [r7, #12]
    9286:	f04f 0300 	mov.w	r3, #0	; 0x0
    928a:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    928c:	68fa      	ldr	r2, [r7, #12]
    928e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9292:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    9294:	68fa      	ldr	r2, [r7, #12]
    9296:	683b      	ldr	r3, [r7, #0]
    9298:	61d3      	str	r3, [r2, #28]
}
    929a:	68fb      	ldr	r3, [r7, #12]
    929c:	4618      	mov	r0, r3
    929e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    92a2:	46bd      	mov	sp, r7
    92a4:	bd80      	pop	{r7, pc}
    92a6:	46c0      	nop			(mov r8, r8)
    92a8:	000221e8 	.word	0x000221e8
    92ac:	00000000 	.word	0x00000000

000092b0 <_ZN13CommandAllerAC1E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    92b0:	b580      	push	{r7, lr}
    92b2:	b084      	sub	sp, #16
    92b4:	af00      	add	r7, sp, #0
    92b6:	60f8      	str	r0, [r7, #12]
    92b8:	f107 0004 	add.w	r0, r7, #4	; 0x4
    92bc:	e880 0006 	stmia.w	r0, {r1, r2}
    92c0:	70fb      	strb	r3, [r7, #3]
    : Command()
    92c2:	68fb      	ldr	r3, [r7, #12]
    92c4:	4618      	mov	r0, r3
    92c6:	f7fe ff2f 	bl	8128 <_ZN7CommandC2Ev>
    92ca:	68fa      	ldr	r2, [r7, #12]
    92cc:	4b21      	ldr	r3, [pc, #132]	(9354 <_ZN13CommandAllerAC1E8Positionbfff+0xa4>)
    92ce:	6013      	str	r3, [r2, #0]
    92d0:	68fb      	ldr	r3, [r7, #12]
    92d2:	f103 0304 	add.w	r3, r3, #4	; 0x4
    92d6:	4618      	mov	r0, r3
    92d8:	f005 fd48 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = p;
    92dc:	68fb      	ldr	r3, [r7, #12]
    92de:	f103 0304 	add.w	r3, r3, #4	; 0x4
    92e2:	4618      	mov	r0, r3
    92e4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    92e8:	e893 0006 	ldmia.w	r3, {r1, r2}
    92ec:	f005 fdfa 	bl	eee4 <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    92f0:	68fa      	ldr	r2, [r7, #12]
    92f2:	69bb      	ldr	r3, [r7, #24]
    92f4:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    92f6:	69f8      	ldr	r0, [r7, #28]
    92f8:	69f9      	ldr	r1, [r7, #28]
    92fa:	f011 ffdf 	bl	1b2bc <__aeabi_fmul>
    92fe:	4603      	mov	r3, r0
    9300:	461a      	mov	r2, r3
    9302:	68fb      	ldr	r3, [r7, #12]
    9304:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    9306:	68fa      	ldr	r2, [r7, #12]
    9308:	78fb      	ldrb	r3, [r7, #3]
    930a:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    930e:	4b12      	ldr	r3, [pc, #72]	(9358 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    9310:	681b      	ldr	r3, [r3, #0]
    9312:	4618      	mov	r0, r3
    9314:	f000 fe00 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    9318:	4602      	mov	r2, r0
    931a:	68fb      	ldr	r3, [r7, #12]
    931c:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    931e:	4b0e      	ldr	r3, [pc, #56]	(9358 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    9320:	681b      	ldr	r3, [r3, #0]
    9322:	4618      	mov	r0, r3
    9324:	f000 fdec 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    9328:	4602      	mov	r2, r0
    932a:	68fb      	ldr	r3, [r7, #12]
    932c:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    932e:	68fa      	ldr	r2, [r7, #12]
    9330:	f04f 0300 	mov.w	r3, #0	; 0x0
    9334:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    9336:	68fa      	ldr	r2, [r7, #12]
    9338:	4b08      	ldr	r3, [pc, #32]	(935c <_ZN13CommandAllerAC1E8Positionbfff+0xac>)
    933a:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    933c:	68fa      	ldr	r2, [r7, #12]
    933e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9342:	f882 3028 	strb.w	r3, [r2, #40]
}
    9346:	68fb      	ldr	r3, [r7, #12]
    9348:	4618      	mov	r0, r3
    934a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    934e:	46bd      	mov	sp, r7
    9350:	bd80      	pop	{r7, pc}
    9352:	46c0      	nop			(mov r8, r8)
    9354:	00022210 	.word	0x00022210
    9358:	20000580 	.word	0x20000580
    935c:	bf800000 	.word	0xbf800000

00009360 <_ZN13CommandAllerAC2E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    9360:	b580      	push	{r7, lr}
    9362:	b084      	sub	sp, #16
    9364:	af00      	add	r7, sp, #0
    9366:	60f8      	str	r0, [r7, #12]
    9368:	f107 0004 	add.w	r0, r7, #4	; 0x4
    936c:	e880 0006 	stmia.w	r0, {r1, r2}
    9370:	70fb      	strb	r3, [r7, #3]
    : Command()
    9372:	68fb      	ldr	r3, [r7, #12]
    9374:	4618      	mov	r0, r3
    9376:	f7fe fed7 	bl	8128 <_ZN7CommandC2Ev>
    937a:	68fa      	ldr	r2, [r7, #12]
    937c:	4b21      	ldr	r3, [pc, #132]	(9404 <_ZN13CommandAllerAC2E8Positionbfff+0xa4>)
    937e:	6013      	str	r3, [r2, #0]
    9380:	68fb      	ldr	r3, [r7, #12]
    9382:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9386:	4618      	mov	r0, r3
    9388:	f005 fcf0 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = p;
    938c:	68fb      	ldr	r3, [r7, #12]
    938e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9392:	4618      	mov	r0, r3
    9394:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9398:	e893 0006 	ldmia.w	r3, {r1, r2}
    939c:	f005 fda2 	bl	eee4 <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    93a0:	68fa      	ldr	r2, [r7, #12]
    93a2:	69bb      	ldr	r3, [r7, #24]
    93a4:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    93a6:	69f8      	ldr	r0, [r7, #28]
    93a8:	69f9      	ldr	r1, [r7, #28]
    93aa:	f011 ff87 	bl	1b2bc <__aeabi_fmul>
    93ae:	4603      	mov	r3, r0
    93b0:	461a      	mov	r2, r3
    93b2:	68fb      	ldr	r3, [r7, #12]
    93b4:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    93b6:	68fa      	ldr	r2, [r7, #12]
    93b8:	78fb      	ldrb	r3, [r7, #3]
    93ba:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    93be:	4b12      	ldr	r3, [pc, #72]	(9408 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    93c0:	681b      	ldr	r3, [r3, #0]
    93c2:	4618      	mov	r0, r3
    93c4:	f000 fda8 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    93c8:	4602      	mov	r2, r0
    93ca:	68fb      	ldr	r3, [r7, #12]
    93cc:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    93ce:	4b0e      	ldr	r3, [pc, #56]	(9408 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    93d0:	681b      	ldr	r3, [r3, #0]
    93d2:	4618      	mov	r0, r3
    93d4:	f000 fd94 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    93d8:	4602      	mov	r2, r0
    93da:	68fb      	ldr	r3, [r7, #12]
    93dc:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    93de:	68fa      	ldr	r2, [r7, #12]
    93e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    93e4:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    93e6:	68fa      	ldr	r2, [r7, #12]
    93e8:	4b08      	ldr	r3, [pc, #32]	(940c <_ZN13CommandAllerAC2E8Positionbfff+0xac>)
    93ea:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    93ec:	68fa      	ldr	r2, [r7, #12]
    93ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    93f2:	f882 3028 	strb.w	r3, [r2, #40]
}
    93f6:	68fb      	ldr	r3, [r7, #12]
    93f8:	4618      	mov	r0, r3
    93fa:	f107 0710 	add.w	r7, r7, #16	; 0x10
    93fe:	46bd      	mov	sp, r7
    9400:	bd80      	pop	{r7, pc}
    9402:	46c0      	nop			(mov r8, r8)
    9404:	00022210 	.word	0x00022210
    9408:	20000580 	.word	0x20000580
    940c:	bf800000 	.word	0xbf800000

00009410 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    9410:	b082      	sub	sp, #8
    9412:	b590      	push	{r4, r7, lr}
    9414:	b08f      	sub	sp, #60
    9416:	af00      	add	r7, sp, #0
    9418:	60f8      	str	r0, [r7, #12]
    941a:	f107 0004 	add.w	r0, r7, #4	; 0x4
    941e:	e880 0006 	stmia.w	r0, {r1, r2}
    9422:	64fb      	str	r3, [r7, #76]
    : Command()
    9424:	68fb      	ldr	r3, [r7, #12]
    9426:	4618      	mov	r0, r3
    9428:	f7fe fe7e 	bl	8128 <_ZN7CommandC2Ev>
    942c:	68fa      	ldr	r2, [r7, #12]
    942e:	4b50      	ldr	r3, [pc, #320]	(9570 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x160>)
    9430:	6013      	str	r3, [r2, #0]
    9432:	68fb      	ldr	r3, [r7, #12]
    9434:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9438:	4618      	mov	r0, r3
    943a:	f005 fc97 	bl	ed6c <_ZN8PositionC1Ev>
    943e:	68fb      	ldr	r3, [r7, #12]
    9440:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9444:	4618      	mov	r0, r3
    9446:	f005 fc91 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = p;
    944a:	68fb      	ldr	r3, [r7, #12]
    944c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    9450:	4618      	mov	r0, r3
    9452:	f107 0304 	add.w	r3, r7, #4	; 0x4
    9456:	e893 0006 	ldmia.w	r3, {r1, r2}
    945a:	f005 fd43 	bl	eee4 <_ZN8PositionaSES_>
    centre = c;
    945e:	68fb      	ldr	r3, [r7, #12]
    9460:	f103 0320 	add.w	r3, r3, #32	; 0x20
    9464:	4618      	mov	r0, r3
    9466:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    946a:	e893 0006 	ldmia.w	r3, {r1, r2}
    946e:	f005 fd39 	bl	eee4 <_ZN8PositionaSES_>
    vMax = v;
    9472:	68fa      	ldr	r2, [r7, #12]
    9474:	6d7b      	ldr	r3, [r7, #84]
    9476:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    9478:	68fa      	ldr	r2, [r7, #12]
    947a:	f897 3058 	ldrb.w	r3, [r7, #88]
    947e:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    9480:	4b3c      	ldr	r3, [pc, #240]	(9574 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	4618      	mov	r0, r3
    9486:	f000 fd47 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    948a:	4602      	mov	r2, r0
    948c:	68fb      	ldr	r3, [r7, #12]
    948e:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    9490:	4b38      	ldr	r3, [pc, #224]	(9574 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    9492:	681b      	ldr	r3, [r3, #0]
    9494:	4618      	mov	r0, r3
    9496:	f000 fd33 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    949a:	4602      	mov	r2, r0
    949c:	68fb      	ldr	r3, [r7, #12]
    949e:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    94a0:	68fa      	ldr	r2, [r7, #12]
    94a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    94a6:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    94a8:	68fa      	ldr	r2, [r7, #12]
    94aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    94ae:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    94b2:	4b30      	ldr	r3, [pc, #192]	(9574 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    94b4:	681a      	ldr	r2, [r3, #0]
    94b6:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    94ba:	4618      	mov	r0, r3
    94bc:	4611      	mov	r1, r2
    94be:	f000 fd43 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    94c2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    94c6:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    94ca:	4618      	mov	r0, r3
    94cc:	4611      	mov	r1, r2
    94ce:	f005 feb1 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    94d2:	697a      	ldr	r2, [r7, #20]
    94d4:	68fb      	ldr	r3, [r7, #12]
    94d6:	6a1b      	ldr	r3, [r3, #32]
    94d8:	4610      	mov	r0, r2
    94da:	4619      	mov	r1, r3
    94dc:	f011 fde4 	bl	1b0a8 <__aeabi_fsub>
    94e0:	4603      	mov	r3, r0
    94e2:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    94e4:	69ba      	ldr	r2, [r7, #24]
    94e6:	68fb      	ldr	r3, [r7, #12]
    94e8:	6a5b      	ldr	r3, [r3, #36]
    94ea:	4610      	mov	r0, r2
    94ec:	4619      	mov	r1, r3
    94ee:	f011 fddb 	bl	1b0a8 <__aeabi_fsub>
    94f2:	4603      	mov	r3, r0
    94f4:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    94f6:	68fb      	ldr	r3, [r7, #12]
    94f8:	685a      	ldr	r2, [r3, #4]
    94fa:	68fb      	ldr	r3, [r7, #12]
    94fc:	6a1b      	ldr	r3, [r3, #32]
    94fe:	4610      	mov	r0, r2
    9500:	4619      	mov	r1, r3
    9502:	f011 fdd1 	bl	1b0a8 <__aeabi_fsub>
    9506:	4603      	mov	r3, r0
    9508:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    950a:	68fb      	ldr	r3, [r7, #12]
    950c:	689a      	ldr	r2, [r3, #8]
    950e:	68fb      	ldr	r3, [r7, #12]
    9510:	6a5b      	ldr	r3, [r3, #36]
    9512:	4610      	mov	r0, r2
    9514:	4619      	mov	r1, r3
    9516:	f011 fdc7 	bl	1b0a8 <__aeabi_fsub>
    951a:	4603      	mov	r3, r0
    951c:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    951e:	6ab8      	ldr	r0, [r7, #40]
    9520:	6b79      	ldr	r1, [r7, #52]
    9522:	f011 fecb 	bl	1b2bc <__aeabi_fmul>
    9526:	4603      	mov	r3, r0
    9528:	461c      	mov	r4, r3
    952a:	6af8      	ldr	r0, [r7, #44]
    952c:	6b39      	ldr	r1, [r7, #48]
    952e:	f011 fec5 	bl	1b2bc <__aeabi_fmul>
    9532:	4603      	mov	r3, r0
    9534:	4620      	mov	r0, r4
    9536:	4619      	mov	r1, r3
    9538:	f011 fdb6 	bl	1b0a8 <__aeabi_fsub>
    953c:	4603      	mov	r3, r0
    953e:	4618      	mov	r0, r3
    9540:	490d      	ldr	r1, [pc, #52]	(9578 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x168>)
    9542:	f012 f875 	bl	1b630 <__aeabi_fcmpgt>
    9546:	4603      	mov	r3, r0
    9548:	2b00      	cmp	r3, #0
    954a:	d004      	beq.n	9556 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x146>
        cote = SGN_POS;
    954c:	68fa      	ldr	r2, [r7, #12]
    954e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9552:	62d3      	str	r3, [r2, #44]
    9554:	e003      	b.n	955e <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    9556:	68fa      	ldr	r2, [r7, #12]
    9558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    955c:	62d3      	str	r3, [r2, #44]
}
    955e:	68fb      	ldr	r3, [r7, #12]
    9560:	4618      	mov	r0, r3
    9562:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    9566:	46bd      	mov	sp, r7
    9568:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    956c:	b002      	add	sp, #8
    956e:	4770      	bx	lr
    9570:	00022238 	.word	0x00022238
    9574:	20000580 	.word	0x20000580
    9578:	00000000 	.word	0x00000000

0000957c <_ZN18CommandAllerEnArcAC2E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    957c:	b082      	sub	sp, #8
    957e:	b590      	push	{r4, r7, lr}
    9580:	b08f      	sub	sp, #60
    9582:	af00      	add	r7, sp, #0
    9584:	60f8      	str	r0, [r7, #12]
    9586:	f107 0004 	add.w	r0, r7, #4	; 0x4
    958a:	e880 0006 	stmia.w	r0, {r1, r2}
    958e:	64fb      	str	r3, [r7, #76]
    : Command()
    9590:	68fb      	ldr	r3, [r7, #12]
    9592:	4618      	mov	r0, r3
    9594:	f7fe fdc8 	bl	8128 <_ZN7CommandC2Ev>
    9598:	68fa      	ldr	r2, [r7, #12]
    959a:	4b50      	ldr	r3, [pc, #320]	(96dc <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x160>)
    959c:	6013      	str	r3, [r2, #0]
    959e:	68fb      	ldr	r3, [r7, #12]
    95a0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    95a4:	4618      	mov	r0, r3
    95a6:	f005 fbe1 	bl	ed6c <_ZN8PositionC1Ev>
    95aa:	68fb      	ldr	r3, [r7, #12]
    95ac:	f103 0320 	add.w	r3, r3, #32	; 0x20
    95b0:	4618      	mov	r0, r3
    95b2:	f005 fbdb 	bl	ed6c <_ZN8PositionC1Ev>
{
    but = p;
    95b6:	68fb      	ldr	r3, [r7, #12]
    95b8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    95bc:	4618      	mov	r0, r3
    95be:	f107 0304 	add.w	r3, r7, #4	; 0x4
    95c2:	e893 0006 	ldmia.w	r3, {r1, r2}
    95c6:	f005 fc8d 	bl	eee4 <_ZN8PositionaSES_>
    centre = c;
    95ca:	68fb      	ldr	r3, [r7, #12]
    95cc:	f103 0320 	add.w	r3, r3, #32	; 0x20
    95d0:	4618      	mov	r0, r3
    95d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    95d6:	e893 0006 	ldmia.w	r3, {r1, r2}
    95da:	f005 fc83 	bl	eee4 <_ZN8PositionaSES_>
    vMax = v;
    95de:	68fa      	ldr	r2, [r7, #12]
    95e0:	6d7b      	ldr	r3, [r7, #84]
    95e2:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    95e4:	68fa      	ldr	r2, [r7, #12]
    95e6:	f897 3058 	ldrb.w	r3, [r7, #88]
    95ea:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    95ec:	4b3c      	ldr	r3, [pc, #240]	(96e0 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    95ee:	681b      	ldr	r3, [r3, #0]
    95f0:	4618      	mov	r0, r3
    95f2:	f000 fc91 	bl	9f18 <_ZNK9Odometrie18getVitesseLineaireEv>
    95f6:	4602      	mov	r2, r0
    95f8:	68fb      	ldr	r3, [r7, #12]
    95fa:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    95fc:	4b38      	ldr	r3, [pc, #224]	(96e0 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    95fe:	681b      	ldr	r3, [r3, #0]
    9600:	4618      	mov	r0, r3
    9602:	f000 fc7d 	bl	9f00 <_ZNK9Odometrie19getVitesseAngulaireEv>
    9606:	4602      	mov	r2, r0
    9608:	68fb      	ldr	r3, [r7, #12]
    960a:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    960c:	68fa      	ldr	r2, [r7, #12]
    960e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9612:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    9614:	68fa      	ldr	r2, [r7, #12]
    9616:	f04f 0300 	mov.w	r3, #0	; 0x0
    961a:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    961e:	4b30      	ldr	r3, [pc, #192]	(96e0 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    9620:	681a      	ldr	r2, [r3, #0]
    9622:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    9626:	4618      	mov	r0, r3
    9628:	4611      	mov	r1, r2
    962a:	f000 fc8d 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    962e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9632:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    9636:	4618      	mov	r0, r3
    9638:	4611      	mov	r1, r2
    963a:	f005 fdfb 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    963e:	697a      	ldr	r2, [r7, #20]
    9640:	68fb      	ldr	r3, [r7, #12]
    9642:	6a1b      	ldr	r3, [r3, #32]
    9644:	4610      	mov	r0, r2
    9646:	4619      	mov	r1, r3
    9648:	f011 fd2e 	bl	1b0a8 <__aeabi_fsub>
    964c:	4603      	mov	r3, r0
    964e:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    9650:	69ba      	ldr	r2, [r7, #24]
    9652:	68fb      	ldr	r3, [r7, #12]
    9654:	6a5b      	ldr	r3, [r3, #36]
    9656:	4610      	mov	r0, r2
    9658:	4619      	mov	r1, r3
    965a:	f011 fd25 	bl	1b0a8 <__aeabi_fsub>
    965e:	4603      	mov	r3, r0
    9660:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    9662:	68fb      	ldr	r3, [r7, #12]
    9664:	685a      	ldr	r2, [r3, #4]
    9666:	68fb      	ldr	r3, [r7, #12]
    9668:	6a1b      	ldr	r3, [r3, #32]
    966a:	4610      	mov	r0, r2
    966c:	4619      	mov	r1, r3
    966e:	f011 fd1b 	bl	1b0a8 <__aeabi_fsub>
    9672:	4603      	mov	r3, r0
    9674:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    9676:	68fb      	ldr	r3, [r7, #12]
    9678:	689a      	ldr	r2, [r3, #8]
    967a:	68fb      	ldr	r3, [r7, #12]
    967c:	6a5b      	ldr	r3, [r3, #36]
    967e:	4610      	mov	r0, r2
    9680:	4619      	mov	r1, r3
    9682:	f011 fd11 	bl	1b0a8 <__aeabi_fsub>
    9686:	4603      	mov	r3, r0
    9688:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    968a:	6ab8      	ldr	r0, [r7, #40]
    968c:	6b79      	ldr	r1, [r7, #52]
    968e:	f011 fe15 	bl	1b2bc <__aeabi_fmul>
    9692:	4603      	mov	r3, r0
    9694:	461c      	mov	r4, r3
    9696:	6af8      	ldr	r0, [r7, #44]
    9698:	6b39      	ldr	r1, [r7, #48]
    969a:	f011 fe0f 	bl	1b2bc <__aeabi_fmul>
    969e:	4603      	mov	r3, r0
    96a0:	4620      	mov	r0, r4
    96a2:	4619      	mov	r1, r3
    96a4:	f011 fd00 	bl	1b0a8 <__aeabi_fsub>
    96a8:	4603      	mov	r3, r0
    96aa:	4618      	mov	r0, r3
    96ac:	490d      	ldr	r1, [pc, #52]	(96e4 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x168>)
    96ae:	f011 ffbf 	bl	1b630 <__aeabi_fcmpgt>
    96b2:	4603      	mov	r3, r0
    96b4:	2b00      	cmp	r3, #0
    96b6:	d004      	beq.n	96c2 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x146>
        cote = SGN_POS;
    96b8:	68fa      	ldr	r2, [r7, #12]
    96ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    96be:	62d3      	str	r3, [r2, #44]
    96c0:	e003      	b.n	96ca <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    96c2:	68fa      	ldr	r2, [r7, #12]
    96c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    96c8:	62d3      	str	r3, [r2, #44]
}
    96ca:	68fb      	ldr	r3, [r7, #12]
    96cc:	4618      	mov	r0, r3
    96ce:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    96d2:	46bd      	mov	sp, r7
    96d4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    96d8:	b002      	add	sp, #8
    96da:	4770      	bx	lr
    96dc:	00022238 	.word	0x00022238
    96e0:	20000580 	.word	0x20000580
    96e4:	00000000 	.word	0x00000000

000096e8 <_ZN13CommandAllerA6updateEv>:
    this->precisionAngle = -1.f;//precisionAngle;

    m_fini = false;
}

void CommandAllerA::update()
    96e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    96ec:	b09e      	sub	sp, #120
    96ee:	af00      	add	r7, sp, #0
    96f0:	6178      	str	r0, [r7, #20]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    96f2:	4bcb      	ldr	r3, [pc, #812]	(9a20 <_ZN13CommandAllerA6updateEv+0x338>)
    96f4:	643b      	str	r3, [r7, #64]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    96f6:	4bcb      	ldr	r3, [pc, #812]	(9a24 <_ZN13CommandAllerA6updateEv+0x33c>)
    96f8:	647b      	str	r3, [r7, #68]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    96fa:	4bcb      	ldr	r3, [pc, #812]	(9a28 <_ZN13CommandAllerA6updateEv+0x340>)
    96fc:	64bb      	str	r3, [r7, #72]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    96fe:	4bcb      	ldr	r3, [pc, #812]	(9a2c <_ZN13CommandAllerA6updateEv+0x344>)
    9700:	64fb      	str	r3, [r7, #76]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    9702:	697b      	ldr	r3, [r7, #20]
    9704:	68db      	ldr	r3, [r3, #12]
    9706:	653b      	str	r3, [r7, #80]

    if(this->getLimit())
    9708:	f7fe fd7a 	bl	8200 <_ZN7Command8getLimitEv>
    970c:	4603      	mov	r3, r0
    970e:	2b00      	cmp	r3, #0
    9710:	d00b      	beq.n	972a <_ZN13CommandAllerA6updateEv+0x42>
    {
        vitLinMax = vitesseLinMax/3;
    9712:	697b      	ldr	r3, [r7, #20]
    9714:	68db      	ldr	r3, [r3, #12]
    9716:	4618      	mov	r0, r3
    9718:	49c5      	ldr	r1, [pc, #788]	(9a30 <_ZN13CommandAllerA6updateEv+0x348>)
    971a:	f011 fe83 	bl	1b424 <__aeabi_fdiv>
    971e:	4603      	mov	r3, r0
    9720:	653b      	str	r3, [r7, #80]
        allumerLED();
    9722:	f002 ffdd 	bl	c6e0 <_Z10allumerLEDv>
        allumerLED2();
    9726:	f002 ffd3 	bl	c6d0 <_Z11allumerLED2v>
    {
        //eteindreLED();
    }

    //float angleVitesseMax = M_PI/10.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    972a:	6c78      	ldr	r0, [r7, #68]
    972c:	49c1      	ldr	r1, [pc, #772]	(9a34 <_ZN13CommandAllerA6updateEv+0x34c>)
    972e:	f011 fdc5 	bl	1b2bc <__aeabi_fmul>
    9732:	4603      	mov	r3, r0
    9734:	4618      	mov	r0, r3
    9736:	6c79      	ldr	r1, [r7, #68]
    9738:	f011 fdc0 	bl	1b2bc <__aeabi_fmul>
    973c:	4603      	mov	r3, r0
    973e:	4618      	mov	r0, r3
    9740:	6c39      	ldr	r1, [r7, #64]
    9742:	f011 fe6f 	bl	1b424 <__aeabi_fdiv>
    9746:	4603      	mov	r3, r0
    9748:	657b      	str	r3, [r7, #84]
    //float distanceVitesseMax = 350.0f;
    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    974a:	6d38      	ldr	r0, [r7, #80]
    974c:	6d39      	ldr	r1, [r7, #80]
    974e:	f011 fdb5 	bl	1b2bc <__aeabi_fmul>
    9752:	4603      	mov	r3, r0
    9754:	461a      	mov	r2, r3
    9756:	697b      	ldr	r3, [r7, #20]
    9758:	691b      	ldr	r3, [r3, #16]
    975a:	4610      	mov	r0, r2
    975c:	4619      	mov	r1, r3
    975e:	f011 fca3 	bl	1b0a8 <__aeabi_fsub>
    9762:	4603      	mov	r3, r0
    9764:	4618      	mov	r0, r3
    9766:	49b3      	ldr	r1, [pc, #716]	(9a34 <_ZN13CommandAllerA6updateEv+0x34c>)
    9768:	f011 fda8 	bl	1b2bc <__aeabi_fmul>
    976c:	4603      	mov	r3, r0
    976e:	4618      	mov	r0, r3
    9770:	6cf9      	ldr	r1, [r7, #76]
    9772:	f011 fe57 	bl	1b424 <__aeabi_fdiv>
    9776:	4603      	mov	r3, r0
    9778:	65bb      	str	r3, [r7, #88]
    float angle = Odometrie::odometrie->getPos().getAngle();
    977a:	4baf      	ldr	r3, [pc, #700]	(9a38 <_ZN13CommandAllerA6updateEv+0x350>)
    977c:	681a      	ldr	r2, [r3, #0]
    977e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    9782:	4618      	mov	r0, r3
    9784:	4611      	mov	r1, r2
    9786:	f000 fbdf 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    978a:	f107 0328 	add.w	r3, r7, #40	; 0x28
    978e:	4618      	mov	r0, r3
    9790:	f005 fd62 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    9794:	4603      	mov	r3, r0
    9796:	65fb      	str	r3, [r7, #92]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9798:	4ba7      	ldr	r3, [pc, #668]	(9a38 <_ZN13CommandAllerA6updateEv+0x350>)
    979a:	681a      	ldr	r2, [r3, #0]
    979c:	f107 0334 	add.w	r3, r7, #52	; 0x34
    97a0:	4618      	mov	r0, r3
    97a2:	4611      	mov	r1, r2
    97a4:	f000 fbd0 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    97a8:	f107 0320 	add.w	r3, r7, #32	; 0x20
    97ac:	f107 0234 	add.w	r2, r7, #52	; 0x34
    97b0:	4618      	mov	r0, r3
    97b2:	4611      	mov	r1, r2
    97b4:	f005 fd3e 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    Position delta = but-pos;
    97b8:	697b      	ldr	r3, [r7, #20]
    97ba:	f103 0104 	add.w	r1, r3, #4	; 0x4
    97be:	f107 0318 	add.w	r3, r7, #24	; 0x18
    97c2:	f107 0220 	add.w	r2, r7, #32	; 0x20
    97c6:	4618      	mov	r0, r3
    97c8:	f005 fb66 	bl	ee98 <_ZNK8PositionmiERKS_>
    float angleVise = atan2(delta.getY(),delta.getX());
    97cc:	f107 0318 	add.w	r3, r7, #24	; 0x18
    97d0:	4618      	mov	r0, r3
    97d2:	f005 fb13 	bl	edfc <_ZNK8Position4getYEv>
    97d6:	4603      	mov	r3, r0
    97d8:	4618      	mov	r0, r3
    97da:	f011 f8fd 	bl	1a9d8 <__aeabi_f2d>
    97de:	4604      	mov	r4, r0
    97e0:	460d      	mov	r5, r1
    97e2:	f107 0318 	add.w	r3, r7, #24	; 0x18
    97e6:	4618      	mov	r0, r3
    97e8:	f005 fafc 	bl	ede4 <_ZNK8Position4getXEv>
    97ec:	4603      	mov	r3, r0
    97ee:	4618      	mov	r0, r3
    97f0:	f011 f8f2 	bl	1a9d8 <__aeabi_f2d>
    97f4:	4602      	mov	r2, r0
    97f6:	460b      	mov	r3, r1
    97f8:	4620      	mov	r0, r4
    97fa:	4629      	mov	r1, r5
    97fc:	f015 fa22 	bl	1ec44 <atan2>
    9800:	4602      	mov	r2, r0
    9802:	460b      	mov	r3, r1
    9804:	4610      	mov	r0, r2
    9806:	4619      	mov	r1, r3
    9808:	f011 fbfa 	bl	1b000 <__aeabi_d2f>
    980c:	4603      	mov	r3, r0
    980e:	663b      	str	r3, [r7, #96]

    if (m_reculer)
    9810:	697b      	ldr	r3, [r7, #20]
    9812:	f893 3020 	ldrb.w	r3, [r3, #32]
    9816:	2b00      	cmp	r3, #0
    9818:	d012      	beq.n	9840 <_ZN13CommandAllerA6updateEv+0x158>
        angleVise += M_PI;
    981a:	6e38      	ldr	r0, [r7, #96]
    981c:	f011 f8dc 	bl	1a9d8 <__aeabi_f2d>
    9820:	4602      	mov	r2, r0
    9822:	460b      	mov	r3, r1
    9824:	4610      	mov	r0, r2
    9826:	4619      	mov	r1, r3
    9828:	a27b      	add	r2, pc, #492	(adr r2, 9a18 <_ZN13CommandAllerA6updateEv+0x330>)
    982a:	ca0c      	ldmia	r2!, {r2, r3}
    982c:	f010 ff76 	bl	1a71c <__adddf3>
    9830:	4602      	mov	r2, r0
    9832:	460b      	mov	r3, r1
    9834:	4610      	mov	r0, r2
    9836:	4619      	mov	r1, r3
    9838:	f011 fbe2 	bl	1b000 <__aeabi_d2f>
    983c:	4603      	mov	r3, r0
    983e:	663b      	str	r3, [r7, #96]

    float diffAng = diffAngle(angleVise,angle);
    9840:	6e38      	ldr	r0, [r7, #96]
    9842:	6df9      	ldr	r1, [r7, #92]
    9844:	f7fe feac 	bl	85a0 <_Z9diffAngleff>
    9848:	4603      	mov	r3, r0
    984a:	667b      	str	r3, [r7, #100]

    // reste sur place tant que le robot n'a pas le bon angle
    float angleMaxPourAvancer;
    if (precisionAngle<0.)
    984c:	697b      	ldr	r3, [r7, #20]
    984e:	6adb      	ldr	r3, [r3, #44]
    9850:	4618      	mov	r0, r3
    9852:	497a      	ldr	r1, [pc, #488]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    9854:	f011 fece 	bl	1b5f4 <__aeabi_fcmplt>
    9858:	4603      	mov	r3, r0
    985a:	2b00      	cmp	r3, #0
    985c:	d002      	beq.n	9864 <_ZN13CommandAllerA6updateEv+0x17c>
        angleMaxPourAvancer = M_PI/25.0f;//25.0f;
    985e:	4b78      	ldr	r3, [pc, #480]	(9a40 <_ZN13CommandAllerA6updateEv+0x358>)
    9860:	66bb      	str	r3, [r7, #104]
    9862:	e001      	b.n	9868 <_ZN13CommandAllerA6updateEv+0x180>
    else
        angleMaxPourAvancer = DEGTORAD(3.);//25.0f;
    9864:	4b77      	ldr	r3, [pc, #476]	(9a44 <_ZN13CommandAllerA6updateEv+0x35c>)
    9866:	66bb      	str	r3, [r7, #104]
    if (!bonAngle)
    9868:	697b      	ldr	r3, [r7, #20]
    986a:	7d1b      	ldrb	r3, [r3, #20]
    986c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9870:	b2db      	uxtb	r3, r3
    9872:	2b00      	cmp	r3, #0
    9874:	d01b      	beq.n	98ae <_ZN13CommandAllerA6updateEv+0x1c6>
    {
        if (fabs(diffAng) < angleMaxPourAvancer)
    9876:	6e7b      	ldr	r3, [r7, #100]
    9878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    987c:	4618      	mov	r0, r3
    987e:	6eb9      	ldr	r1, [r7, #104]
    9880:	f011 feb8 	bl	1b5f4 <__aeabi_fcmplt>
    9884:	4603      	mov	r3, r0
    9886:	2b00      	cmp	r3, #0
    9888:	d007      	beq.n	989a <_ZN13CommandAllerA6updateEv+0x1b2>
        {
            bonAngle = true;
    988a:	697a      	ldr	r2, [r7, #20]
    988c:	f04f 0301 	mov.w	r3, #1	; 0x1
    9890:	7513      	strb	r3, [r2, #20]
            derniereDistance = 1000000.0f;
    9892:	697a      	ldr	r2, [r7, #20]
    9894:	4b6c      	ldr	r3, [pc, #432]	(9a48 <_ZN13CommandAllerA6updateEv+0x360>)
    9896:	6253      	str	r3, [r2, #36]
    9898:	e009      	b.n	98ae <_ZN13CommandAllerA6updateEv+0x1c6>
        }
        else
        {
            linSpeed *= 0.95f;
    989a:	697b      	ldr	r3, [r7, #20]
    989c:	699b      	ldr	r3, [r3, #24]
    989e:	4618      	mov	r0, r3
    98a0:	496a      	ldr	r1, [pc, #424]	(9a4c <_ZN13CommandAllerA6updateEv+0x364>)
    98a2:	f011 fd0b 	bl	1b2bc <__aeabi_fmul>
    98a6:	4603      	mov	r3, r0
    98a8:	461a      	mov	r2, r3
    98aa:	697b      	ldr	r3, [r7, #20]
    98ac:	619a      	str	r2, [r3, #24]
        }
    }

    // Check sharps
    StrategieV2::setTourneSurSoiMeme((!bonAngle)&&(abs(linSpeed)<0.2f));
    98ae:	697b      	ldr	r3, [r7, #20]
    98b0:	7d1b      	ldrb	r3, [r3, #20]
    98b2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    98b6:	b2db      	uxtb	r3, r3
    98b8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    98bc:	b2db      	uxtb	r3, r3
    98be:	2b00      	cmp	r3, #0
    98c0:	d137      	bne.n	9932 <_ZN13CommandAllerA6updateEv+0x24a>
    98c2:	697b      	ldr	r3, [r7, #20]
    98c4:	699b      	ldr	r3, [r3, #24]
    98c6:	4618      	mov	r0, r3
    98c8:	495c      	ldr	r1, [pc, #368]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    98ca:	f011 feb1 	bl	1b630 <__aeabi_fcmpgt>
    98ce:	4603      	mov	r3, r0
    98d0:	2b00      	cmp	r3, #0
    98d2:	d015      	beq.n	9900 <_ZN13CommandAllerA6updateEv+0x218>
    98d4:	697b      	ldr	r3, [r7, #20]
    98d6:	699a      	ldr	r2, [r3, #24]
    98d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    98dc:	71fb      	strb	r3, [r7, #7]
    98de:	4610      	mov	r0, r2
    98e0:	4956      	ldr	r1, [pc, #344]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    98e2:	f011 fe7d 	bl	1b5e0 <__aeabi_fcmpeq>
    98e6:	4603      	mov	r3, r0
    98e8:	2b00      	cmp	r3, #0
    98ea:	d102      	bne.n	98f2 <_ZN13CommandAllerA6updateEv+0x20a>
    98ec:	f04f 0301 	mov.w	r3, #1	; 0x1
    98f0:	71fb      	strb	r3, [r7, #7]
    98f2:	79fb      	ldrb	r3, [r7, #7]
    98f4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    98f8:	b2db      	uxtb	r3, r3
    98fa:	2b00      	cmp	r3, #0
    98fc:	d119      	bne.n	9932 <_ZN13CommandAllerA6updateEv+0x24a>
    98fe:	e014      	b.n	992a <_ZN13CommandAllerA6updateEv+0x242>
    9900:	697b      	ldr	r3, [r7, #20]
    9902:	699a      	ldr	r2, [r3, #24]
    9904:	f04f 0300 	mov.w	r3, #0	; 0x0
    9908:	71bb      	strb	r3, [r7, #6]
    990a:	4610      	mov	r0, r2
    990c:	4950      	ldr	r1, [pc, #320]	(9a50 <_ZN13CommandAllerA6updateEv+0x368>)
    990e:	f011 fe8f 	bl	1b630 <__aeabi_fcmpgt>
    9912:	4603      	mov	r3, r0
    9914:	2b00      	cmp	r3, #0
    9916:	d002      	beq.n	991e <_ZN13CommandAllerA6updateEv+0x236>
    9918:	f04f 0301 	mov.w	r3, #1	; 0x1
    991c:	71bb      	strb	r3, [r7, #6]
    991e:	79bb      	ldrb	r3, [r7, #6]
    9920:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9924:	b2db      	uxtb	r3, r3
    9926:	2b00      	cmp	r3, #0
    9928:	d103      	bne.n	9932 <_ZN13CommandAllerA6updateEv+0x24a>
    992a:	f04f 0301 	mov.w	r3, #1	; 0x1
    992e:	60bb      	str	r3, [r7, #8]
    9930:	e002      	b.n	9938 <_ZN13CommandAllerA6updateEv+0x250>
    9932:	f04f 0300 	mov.w	r3, #0	; 0x0
    9936:	60bb      	str	r3, [r7, #8]
    9938:	68b8      	ldr	r0, [r7, #8]
    993a:	f00c fb2d 	bl	15f98 <_ZN11StrategieV219setTourneSurSoiMemeEb>

    if (linSpeed > 0.2f)
    993e:	697b      	ldr	r3, [r7, #20]
    9940:	699b      	ldr	r3, [r3, #24]
    9942:	4618      	mov	r0, r3
    9944:	4943      	ldr	r1, [pc, #268]	(9a54 <_ZN13CommandAllerA6updateEv+0x36c>)
    9946:	f011 fe73 	bl	1b630 <__aeabi_fcmpgt>
    994a:	4603      	mov	r3, r0
    994c:	2b00      	cmp	r3, #0
    994e:	d004      	beq.n	995a <_ZN13CommandAllerA6updateEv+0x272>
        StrategieV2::enableSharpsGroup(true);
    9950:	f04f 0001 	mov.w	r0, #1	; 0x1
    9954:	f00c fbc4 	bl	160e0 <_ZN11StrategieV217enableSharpsGroupEb>
    9958:	e00f      	b.n	997a <_ZN13CommandAllerA6updateEv+0x292>
    else if (linSpeed < -0.2f)
    995a:	697b      	ldr	r3, [r7, #20]
    995c:	699b      	ldr	r3, [r3, #24]
    995e:	4618      	mov	r0, r3
    9960:	493b      	ldr	r1, [pc, #236]	(9a50 <_ZN13CommandAllerA6updateEv+0x368>)
    9962:	f011 fe47 	bl	1b5f4 <__aeabi_fcmplt>
    9966:	4603      	mov	r3, r0
    9968:	2b00      	cmp	r3, #0
    996a:	d004      	beq.n	9976 <_ZN13CommandAllerA6updateEv+0x28e>
        StrategieV2::enableSharpsGroup(false);
    996c:	f04f 0000 	mov.w	r0, #0	; 0x0
    9970:	f00c fbb6 	bl	160e0 <_ZN11StrategieV217enableSharpsGroupEb>
    9974:	e001      	b.n	997a <_ZN13CommandAllerA6updateEv+0x292>
    else
        StrategieV2::emptySharpsToCheck();
    9976:	f00c fae7 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>

    float distanceBut = delta.getNorme();
    997a:	f107 0318 	add.w	r3, r7, #24	; 0x18
    997e:	4618      	mov	r0, r3
    9980:	f005 fb98 	bl	f0b4 <_ZNK8Position8getNormeEv>
    9984:	4603      	mov	r3, r0
    9986:	66fb      	str	r3, [r7, #108]

    bool distanceOk = /*(distanceBut > derniereDistance) || */(distanceBut < 30.0f);
    9988:	f04f 0300 	mov.w	r3, #0	; 0x0
    998c:	f887 3072 	strb.w	r3, [r7, #114]
    9990:	6ef8      	ldr	r0, [r7, #108]
    9992:	4931      	ldr	r1, [pc, #196]	(9a58 <_ZN13CommandAllerA6updateEv+0x370>)
    9994:	f011 fe2e 	bl	1b5f4 <__aeabi_fcmplt>
    9998:	4603      	mov	r3, r0
    999a:	2b00      	cmp	r3, #0
    999c:	d003      	beq.n	99a6 <_ZN13CommandAllerA6updateEv+0x2be>
    999e:	f04f 0301 	mov.w	r3, #1	; 0x1
    99a2:	f887 3072 	strb.w	r3, [r7, #114]
    if (distanceOk)
    {
        //vitAngMax = VITESSE_ANGULAIRE_SLOW_MAX;
        //linSpeed = 0.;
    }
    if (bonAngle && precisionAngle>0.)
    99a6:	697b      	ldr	r3, [r7, #20]
    99a8:	7d1b      	ldrb	r3, [r3, #20]
    99aa:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    99ae:	b2db      	uxtb	r3, r3
    99b0:	2b00      	cmp	r3, #0
    99b2:	d118      	bne.n	99e6 <_ZN13CommandAllerA6updateEv+0x2fe>
    99b4:	697b      	ldr	r3, [r7, #20]
    99b6:	6ada      	ldr	r2, [r3, #44]
    99b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    99bc:	717b      	strb	r3, [r7, #5]
    99be:	4610      	mov	r0, r2
    99c0:	491e      	ldr	r1, [pc, #120]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    99c2:	f011 fe35 	bl	1b630 <__aeabi_fcmpgt>
    99c6:	4603      	mov	r3, r0
    99c8:	2b00      	cmp	r3, #0
    99ca:	d002      	beq.n	99d2 <_ZN13CommandAllerA6updateEv+0x2ea>
    99cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    99d0:	717b      	strb	r3, [r7, #5]
    99d2:	797b      	ldrb	r3, [r7, #5]
    99d4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    99d8:	b2db      	uxtb	r3, r3
    99da:	2b00      	cmp	r3, #0
    99dc:	d103      	bne.n	99e6 <_ZN13CommandAllerA6updateEv+0x2fe>
    {
        angSpeed = 0.;
    99de:	697a      	ldr	r2, [r7, #20]
    99e0:	4b16      	ldr	r3, [pc, #88]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    99e2:	61d3      	str	r3, [r2, #28]
    99e4:	e126      	b.n	9c34 <_ZN13CommandAllerA6updateEv+0x54c>
    }
    else if (abs(diffAng) > angleVitesseMax)
    99e6:	6e78      	ldr	r0, [r7, #100]
    99e8:	4914      	ldr	r1, [pc, #80]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    99ea:	f011 fe21 	bl	1b630 <__aeabi_fcmpgt>
    99ee:	4603      	mov	r3, r0
    99f0:	2b00      	cmp	r3, #0
    99f2:	d033      	beq.n	9a5c <_ZN13CommandAllerA6updateEv+0x374>
    99f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    99f8:	713b      	strb	r3, [r7, #4]
    99fa:	6e78      	ldr	r0, [r7, #100]
    99fc:	490f      	ldr	r1, [pc, #60]	(9a3c <_ZN13CommandAllerA6updateEv+0x354>)
    99fe:	f011 fdef 	bl	1b5e0 <__aeabi_fcmpeq>
    9a02:	4603      	mov	r3, r0
    9a04:	2b00      	cmp	r3, #0
    9a06:	d102      	bne.n	9a0e <_ZN13CommandAllerA6updateEv+0x326>
    9a08:	f04f 0301 	mov.w	r3, #1	; 0x1
    9a0c:	713b      	strb	r3, [r7, #4]
    9a0e:	793b      	ldrb	r3, [r7, #4]
    9a10:	60fb      	str	r3, [r7, #12]
    9a12:	e035      	b.n	9a80 <_ZN13CommandAllerA6updateEv+0x398>
    9a14:	46c0      	nop			(mov r8, r8)
    9a16:	46c0      	nop			(mov r8, r8)
    9a18:	54442d18 	.word	0x54442d18
    9a1c:	400921fb 	.word	0x400921fb
    9a20:	3983126f 	.word	0x3983126f
    9a24:	3cf5c28f 	.word	0x3cf5c28f
    9a28:	3ccccccd 	.word	0x3ccccccd
    9a2c:	3ca3d70a 	.word	0x3ca3d70a
    9a30:	40400000 	.word	0x40400000
    9a34:	3f000000 	.word	0x3f000000
    9a38:	20000580 	.word	0x20000580
    9a3c:	00000000 	.word	0x00000000
    9a40:	3e00adfd 	.word	0x3e00adfd
    9a44:	3d567750 	.word	0x3d567750
    9a48:	49742400 	.word	0x49742400
    9a4c:	3f733333 	.word	0x3f733333
    9a50:	be4ccccd 	.word	0xbe4ccccd
    9a54:	3e4ccccd 	.word	0x3e4ccccd
    9a58:	41f00000 	.word	0x41f00000
    9a5c:	6e7b      	ldr	r3, [r7, #100]
    9a5e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9a62:	f04f 0300 	mov.w	r3, #0	; 0x0
    9a66:	70fb      	strb	r3, [r7, #3]
    9a68:	4610      	mov	r0, r2
    9a6a:	6d79      	ldr	r1, [r7, #84]
    9a6c:	f011 fde0 	bl	1b630 <__aeabi_fcmpgt>
    9a70:	4603      	mov	r3, r0
    9a72:	2b00      	cmp	r3, #0
    9a74:	d002      	beq.n	9a7c <_ZN13CommandAllerA6updateEv+0x394>
    9a76:	f04f 0301 	mov.w	r3, #1	; 0x1
    9a7a:	70fb      	strb	r3, [r7, #3]
    9a7c:	78fb      	ldrb	r3, [r7, #3]
    9a7e:	60fb      	str	r3, [r7, #12]
    9a80:	68fb      	ldr	r3, [r7, #12]
    9a82:	2b00      	cmp	r3, #0
    9a84:	f000 80c9 	beq.w	9c1a <_ZN13CommandAllerA6updateEv+0x532>
    {
        bool hasToDecelerate = /*(!distanceOk) && */(fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    9a88:	6e7b      	ldr	r3, [r7, #100]
    9a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9a8e:	4618      	mov	r0, r3
    9a90:	f010 ffa2 	bl	1a9d8 <__aeabi_f2d>
    9a94:	4680      	mov	r8, r0
    9a96:	4689      	mov	r9, r1
    9a98:	697b      	ldr	r3, [r7, #20]
    9a9a:	69da      	ldr	r2, [r3, #28]
    9a9c:	697b      	ldr	r3, [r7, #20]
    9a9e:	69db      	ldr	r3, [r3, #28]
    9aa0:	4610      	mov	r0, r2
    9aa2:	4619      	mov	r1, r3
    9aa4:	f011 fc0a 	bl	1b2bc <__aeabi_fmul>
    9aa8:	4603      	mov	r3, r0
    9aaa:	4618      	mov	r0, r3
    9aac:	6c39      	ldr	r1, [r7, #64]
    9aae:	f011 fcb9 	bl	1b424 <__aeabi_fdiv>
    9ab2:	4603      	mov	r3, r0
    9ab4:	4618      	mov	r0, r3
    9ab6:	f010 ff8f 	bl	1a9d8 <__aeabi_f2d>
    9aba:	4604      	mov	r4, r0
    9abc:	460d      	mov	r5, r1
    9abe:	6c38      	ldr	r0, [r7, #64]
    9ac0:	f010 ff8a 	bl	1a9d8 <__aeabi_f2d>
    9ac4:	4602      	mov	r2, r0
    9ac6:	460b      	mov	r3, r1
    9ac8:	4610      	mov	r0, r2
    9aca:	4619      	mov	r1, r3
    9acc:	f04f 0200 	mov.w	r2, #0	; 0x0
    9ad0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    9ad4:	f010 ffd4 	bl	1aa80 <__aeabi_dmul>
    9ad8:	4602      	mov	r2, r0
    9ada:	460b      	mov	r3, r1
    9adc:	4620      	mov	r0, r4
    9ade:	4629      	mov	r1, r5
    9ae0:	f010 fe1c 	bl	1a71c <__adddf3>
    9ae4:	4602      	mov	r2, r0
    9ae6:	460b      	mov	r3, r1
    9ae8:	4614      	mov	r4, r2
    9aea:	461d      	mov	r5, r3
    9aec:	f04f 0300 	mov.w	r3, #0	; 0x0
    9af0:	f887 3073 	strb.w	r3, [r7, #115]
    9af4:	4640      	mov	r0, r8
    9af6:	4649      	mov	r1, r9
    9af8:	4622      	mov	r2, r4
    9afa:	462b      	mov	r3, r5
    9afc:	f011 fa30 	bl	1af60 <__aeabi_dcmplt>
    9b00:	4603      	mov	r3, r0
    9b02:	2b00      	cmp	r3, #0
    9b04:	d003      	beq.n	9b0e <_ZN13CommandAllerA6updateEv+0x426>
    9b06:	f04f 0301 	mov.w	r3, #1	; 0x1
    9b0a:	f887 3073 	strb.w	r3, [r7, #115]
        if (diffAng > 0)
    9b0e:	6e78      	ldr	r0, [r7, #100]
    9b10:	49cf      	ldr	r1, [pc, #828]	(9e50 <_ZN13CommandAllerA6updateEv+0x768>)
    9b12:	f011 fd8d 	bl	1b630 <__aeabi_fcmpgt>
    9b16:	4603      	mov	r3, r0
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d03c      	beq.n	9b96 <_ZN13CommandAllerA6updateEv+0x4ae>
        {
            if (!hasToDecelerate)
    9b1c:	f897 3073 	ldrb.w	r3, [r7, #115]
    9b20:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9b24:	b2db      	uxtb	r3, r3
    9b26:	2b00      	cmp	r3, #0
    9b28:	d00a      	beq.n	9b40 <_ZN13CommandAllerA6updateEv+0x458>
                angSpeed += accAngMax;
    9b2a:	697b      	ldr	r3, [r7, #20]
    9b2c:	69db      	ldr	r3, [r3, #28]
    9b2e:	4618      	mov	r0, r3
    9b30:	6c39      	ldr	r1, [r7, #64]
    9b32:	f011 fabb 	bl	1b0ac <__addsf3>
    9b36:	4603      	mov	r3, r0
    9b38:	461a      	mov	r2, r3
    9b3a:	697b      	ldr	r3, [r7, #20]
    9b3c:	61da      	str	r2, [r3, #28]
    9b3e:	e01d      	b.n	9b7c <_ZN13CommandAllerA6updateEv+0x494>
            else if (angSpeed > accAngMax*2)
    9b40:	697b      	ldr	r3, [r7, #20]
    9b42:	69dc      	ldr	r4, [r3, #28]
    9b44:	6c3b      	ldr	r3, [r7, #64]
    9b46:	4618      	mov	r0, r3
    9b48:	4619      	mov	r1, r3
    9b4a:	f011 faaf 	bl	1b0ac <__addsf3>
    9b4e:	4603      	mov	r3, r0
    9b50:	4620      	mov	r0, r4
    9b52:	4619      	mov	r1, r3
    9b54:	f011 fd6c 	bl	1b630 <__aeabi_fcmpgt>
    9b58:	4603      	mov	r3, r0
    9b5a:	2b00      	cmp	r3, #0
    9b5c:	d00e      	beq.n	9b7c <_ZN13CommandAllerA6updateEv+0x494>
                angSpeed -= accAngMax*2;
    9b5e:	697b      	ldr	r3, [r7, #20]
    9b60:	69dc      	ldr	r4, [r3, #28]
    9b62:	6c38      	ldr	r0, [r7, #64]
    9b64:	49bb      	ldr	r1, [pc, #748]	(9e54 <_ZN13CommandAllerA6updateEv+0x76c>)
    9b66:	f011 fba9 	bl	1b2bc <__aeabi_fmul>
    9b6a:	4603      	mov	r3, r0
    9b6c:	4620      	mov	r0, r4
    9b6e:	4619      	mov	r1, r3
    9b70:	f011 fa9c 	bl	1b0ac <__addsf3>
    9b74:	4603      	mov	r3, r0
    9b76:	461a      	mov	r2, r3
    9b78:	697b      	ldr	r3, [r7, #20]
    9b7a:	61da      	str	r2, [r3, #28]

            if (angSpeed > vitAngMax)
    9b7c:	697b      	ldr	r3, [r7, #20]
    9b7e:	69db      	ldr	r3, [r3, #28]
    9b80:	4618      	mov	r0, r3
    9b82:	6c79      	ldr	r1, [r7, #68]
    9b84:	f011 fd54 	bl	1b630 <__aeabi_fcmpgt>
    9b88:	4603      	mov	r3, r0
    9b8a:	2b00      	cmp	r3, #0
    9b8c:	d052      	beq.n	9c34 <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = vitAngMax;
    9b8e:	697a      	ldr	r2, [r7, #20]
    9b90:	6c7b      	ldr	r3, [r7, #68]
    9b92:	61d3      	str	r3, [r2, #28]
    9b94:	e04e      	b.n	9c34 <_ZN13CommandAllerA6updateEv+0x54c>
        }
        else
        {
            if (!hasToDecelerate)
    9b96:	f897 3073 	ldrb.w	r3, [r7, #115]
    9b9a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9b9e:	b2db      	uxtb	r3, r3
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d00a      	beq.n	9bba <_ZN13CommandAllerA6updateEv+0x4d2>
                angSpeed -= accAngMax;
    9ba4:	697b      	ldr	r3, [r7, #20]
    9ba6:	69db      	ldr	r3, [r3, #28]
    9ba8:	4618      	mov	r0, r3
    9baa:	6c39      	ldr	r1, [r7, #64]
    9bac:	f011 fa7c 	bl	1b0a8 <__aeabi_fsub>
    9bb0:	4603      	mov	r3, r0
    9bb2:	461a      	mov	r2, r3
    9bb4:	697b      	ldr	r3, [r7, #20]
    9bb6:	61da      	str	r2, [r3, #28]
    9bb8:	e01d      	b.n	9bf6 <_ZN13CommandAllerA6updateEv+0x50e>
            else if (angSpeed < -accAngMax*2)
    9bba:	697b      	ldr	r3, [r7, #20]
    9bbc:	69dc      	ldr	r4, [r3, #28]
    9bbe:	6c38      	ldr	r0, [r7, #64]
    9bc0:	49a4      	ldr	r1, [pc, #656]	(9e54 <_ZN13CommandAllerA6updateEv+0x76c>)
    9bc2:	f011 fb7b 	bl	1b2bc <__aeabi_fmul>
    9bc6:	4603      	mov	r3, r0
    9bc8:	4620      	mov	r0, r4
    9bca:	4619      	mov	r1, r3
    9bcc:	f011 fd12 	bl	1b5f4 <__aeabi_fcmplt>
    9bd0:	4603      	mov	r3, r0
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d00f      	beq.n	9bf6 <_ZN13CommandAllerA6updateEv+0x50e>
                angSpeed += accAngMax*2;
    9bd6:	697b      	ldr	r3, [r7, #20]
    9bd8:	69dc      	ldr	r4, [r3, #28]
    9bda:	6c3b      	ldr	r3, [r7, #64]
    9bdc:	4618      	mov	r0, r3
    9bde:	4619      	mov	r1, r3
    9be0:	f011 fa64 	bl	1b0ac <__addsf3>
    9be4:	4603      	mov	r3, r0
    9be6:	4620      	mov	r0, r4
    9be8:	4619      	mov	r1, r3
    9bea:	f011 fa5f 	bl	1b0ac <__addsf3>
    9bee:	4603      	mov	r3, r0
    9bf0:	461a      	mov	r2, r3
    9bf2:	697b      	ldr	r3, [r7, #20]
    9bf4:	61da      	str	r2, [r3, #28]

            if (angSpeed < -vitAngMax)
    9bf6:	697b      	ldr	r3, [r7, #20]
    9bf8:	69da      	ldr	r2, [r3, #28]
    9bfa:	6c7b      	ldr	r3, [r7, #68]
    9bfc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9c00:	4610      	mov	r0, r2
    9c02:	4619      	mov	r1, r3
    9c04:	f011 fcf6 	bl	1b5f4 <__aeabi_fcmplt>
    9c08:	4603      	mov	r3, r0
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d012      	beq.n	9c34 <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = -vitAngMax;
    9c0e:	6c7b      	ldr	r3, [r7, #68]
    9c10:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9c14:	697b      	ldr	r3, [r7, #20]
    9c16:	61da      	str	r2, [r3, #28]
    9c18:	e00c      	b.n	9c34 <_ZN13CommandAllerA6updateEv+0x54c>
        }

    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    9c1a:	6e78      	ldr	r0, [r7, #100]
    9c1c:	6c79      	ldr	r1, [r7, #68]
    9c1e:	f011 fb4d 	bl	1b2bc <__aeabi_fmul>
    9c22:	4603      	mov	r3, r0
    9c24:	4618      	mov	r0, r3
    9c26:	6d79      	ldr	r1, [r7, #84]
    9c28:	f011 fbfc 	bl	1b424 <__aeabi_fdiv>
    9c2c:	4603      	mov	r3, r0
    9c2e:	461a      	mov	r2, r3
    9c30:	697b      	ldr	r3, [r7, #20]
    9c32:	61da      	str	r2, [r3, #28]
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    }*/

    // vitesse linéaire
    if (distanceBut > derniereDistance || distanceBut < 10.0f)
    9c34:	697b      	ldr	r3, [r7, #20]
    9c36:	6a5b      	ldr	r3, [r3, #36]
    9c38:	4618      	mov	r0, r3
    9c3a:	6ef9      	ldr	r1, [r7, #108]
    9c3c:	f011 fcda 	bl	1b5f4 <__aeabi_fcmplt>
    9c40:	4603      	mov	r3, r0
    9c42:	2b00      	cmp	r3, #0
    9c44:	d106      	bne.n	9c54 <_ZN13CommandAllerA6updateEv+0x56c>
    9c46:	6ef8      	ldr	r0, [r7, #108]
    9c48:	4983      	ldr	r1, [pc, #524]	(9e58 <_ZN13CommandAllerA6updateEv+0x770>)
    9c4a:	f011 fcd3 	bl	1b5f4 <__aeabi_fcmplt>
    9c4e:	4603      	mov	r3, r0
    9c50:	2b00      	cmp	r3, #0
    9c52:	d004      	beq.n	9c5e <_ZN13CommandAllerA6updateEv+0x576>
    {
        m_fini = true;
    9c54:	697b      	ldr	r3, [r7, #20]
    9c56:	f04f 0201 	mov.w	r2, #1	; 0x1
    9c5a:	f883 2028 	strb.w	r2, [r3, #40]
    }

    if (bonAngle)
    9c5e:	697b      	ldr	r3, [r7, #20]
    9c60:	7d1b      	ldrb	r3, [r3, #20]
    9c62:	2b00      	cmp	r3, #0
    9c64:	f000 80ee 	beq.w	9e44 <_ZN13CommandAllerA6updateEv+0x75c>
    {

        if (fabs(diffAng) > angleMaxPourAvancer)
    9c68:	6e7b      	ldr	r3, [r7, #100]
    9c6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    9c6e:	4618      	mov	r0, r3
    9c70:	6eb9      	ldr	r1, [r7, #104]
    9c72:	f011 fcdd 	bl	1b630 <__aeabi_fcmpgt>
    9c76:	4603      	mov	r3, r0
    9c78:	2b00      	cmp	r3, #0
    9c7a:	d00a      	beq.n	9c92 <_ZN13CommandAllerA6updateEv+0x5aa>
        {
            linSpeed *= 0.97f;
    9c7c:	697b      	ldr	r3, [r7, #20]
    9c7e:	699b      	ldr	r3, [r3, #24]
    9c80:	4618      	mov	r0, r3
    9c82:	4976      	ldr	r1, [pc, #472]	(9e5c <_ZN13CommandAllerA6updateEv+0x774>)
    9c84:	f011 fb1a 	bl	1b2bc <__aeabi_fmul>
    9c88:	4603      	mov	r3, r0
    9c8a:	461a      	mov	r2, r3
    9c8c:	697b      	ldr	r3, [r7, #20]
    9c8e:	619a      	str	r2, [r3, #24]
    9c90:	e0d8      	b.n	9e44 <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else if (distanceBut > distanceVitesseMax)
    9c92:	6ef8      	ldr	r0, [r7, #108]
    9c94:	6db9      	ldr	r1, [r7, #88]
    9c96:	f011 fccb 	bl	1b630 <__aeabi_fcmpgt>
    9c9a:	4603      	mov	r3, r0
    9c9c:	2b00      	cmp	r3, #0
    9c9e:	d039      	beq.n	9d14 <_ZN13CommandAllerA6updateEv+0x62c>
        {
             if (m_reculer)
    9ca0:	697b      	ldr	r3, [r7, #20]
    9ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
    9ca6:	2b00      	cmp	r3, #0
    9ca8:	d00a      	beq.n	9cc0 <_ZN13CommandAllerA6updateEv+0x5d8>
                linSpeed -= accLinMax;
    9caa:	697b      	ldr	r3, [r7, #20]
    9cac:	699b      	ldr	r3, [r3, #24]
    9cae:	4618      	mov	r0, r3
    9cb0:	6cb9      	ldr	r1, [r7, #72]
    9cb2:	f011 f9f9 	bl	1b0a8 <__aeabi_fsub>
    9cb6:	4603      	mov	r3, r0
    9cb8:	461a      	mov	r2, r3
    9cba:	697b      	ldr	r3, [r7, #20]
    9cbc:	619a      	str	r2, [r3, #24]
    9cbe:	e009      	b.n	9cd4 <_ZN13CommandAllerA6updateEv+0x5ec>
             else
                linSpeed += accLinMax;
    9cc0:	697b      	ldr	r3, [r7, #20]
    9cc2:	699b      	ldr	r3, [r3, #24]
    9cc4:	4618      	mov	r0, r3
    9cc6:	6cb9      	ldr	r1, [r7, #72]
    9cc8:	f011 f9f0 	bl	1b0ac <__addsf3>
    9ccc:	4603      	mov	r3, r0
    9cce:	461a      	mov	r2, r3
    9cd0:	697b      	ldr	r3, [r7, #20]
    9cd2:	619a      	str	r2, [r3, #24]

            if (linSpeed > vitLinMax)
    9cd4:	697b      	ldr	r3, [r7, #20]
    9cd6:	699b      	ldr	r3, [r3, #24]
    9cd8:	4618      	mov	r0, r3
    9cda:	6d39      	ldr	r1, [r7, #80]
    9cdc:	f011 fca8 	bl	1b630 <__aeabi_fcmpgt>
    9ce0:	4603      	mov	r3, r0
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	d003      	beq.n	9cee <_ZN13CommandAllerA6updateEv+0x606>
                linSpeed = vitLinMax;
    9ce6:	697a      	ldr	r2, [r7, #20]
    9ce8:	6d3b      	ldr	r3, [r7, #80]
    9cea:	6193      	str	r3, [r2, #24]
    9cec:	e0aa      	b.n	9e44 <_ZN13CommandAllerA6updateEv+0x75c>
            else if (linSpeed < -vitLinMax)
    9cee:	697b      	ldr	r3, [r7, #20]
    9cf0:	699a      	ldr	r2, [r3, #24]
    9cf2:	6d3b      	ldr	r3, [r7, #80]
    9cf4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9cf8:	4610      	mov	r0, r2
    9cfa:	4619      	mov	r1, r3
    9cfc:	f011 fc7a 	bl	1b5f4 <__aeabi_fcmplt>
    9d00:	4603      	mov	r3, r0
    9d02:	2b00      	cmp	r3, #0
    9d04:	f000 809e 	beq.w	9e44 <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = -vitLinMax;
    9d08:	6d3b      	ldr	r3, [r7, #80]
    9d0a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9d0e:	697b      	ldr	r3, [r7, #20]
    9d10:	619a      	str	r2, [r3, #24]
    9d12:	e097      	b.n	9e44 <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else
        {
            float linSpeedVisee;
            if (m_reculer)
    9d14:	697b      	ldr	r3, [r7, #20]
    9d16:	f893 3020 	ldrb.w	r3, [r3, #32]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d025      	beq.n	9d6a <_ZN13CommandAllerA6updateEv+0x682>
                linSpeedVisee = -sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9d1e:	697b      	ldr	r3, [r7, #20]
    9d20:	691c      	ldr	r4, [r3, #16]
    9d22:	6efb      	ldr	r3, [r7, #108]
    9d24:	4618      	mov	r0, r3
    9d26:	4619      	mov	r1, r3
    9d28:	f011 f9c0 	bl	1b0ac <__addsf3>
    9d2c:	4603      	mov	r3, r0
    9d2e:	4618      	mov	r0, r3
    9d30:	6cf9      	ldr	r1, [r7, #76]
    9d32:	f011 fac3 	bl	1b2bc <__aeabi_fmul>
    9d36:	4603      	mov	r3, r0
    9d38:	4620      	mov	r0, r4
    9d3a:	4619      	mov	r1, r3
    9d3c:	f011 f9b6 	bl	1b0ac <__addsf3>
    9d40:	4603      	mov	r3, r0
    9d42:	4618      	mov	r0, r3
    9d44:	f010 fe48 	bl	1a9d8 <__aeabi_f2d>
    9d48:	4602      	mov	r2, r0
    9d4a:	460b      	mov	r3, r1
    9d4c:	4610      	mov	r0, r2
    9d4e:	4619      	mov	r1, r3
    9d50:	f014 ff7e 	bl	1ec50 <sqrt>
    9d54:	4602      	mov	r2, r0
    9d56:	460b      	mov	r3, r1
    9d58:	4610      	mov	r0, r2
    9d5a:	4619      	mov	r1, r3
    9d5c:	f011 f950 	bl	1b000 <__aeabi_d2f>
    9d60:	4603      	mov	r3, r0
    9d62:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9d66:	677b      	str	r3, [r7, #116]
    9d68:	e022      	b.n	9db0 <_ZN13CommandAllerA6updateEv+0x6c8>
            else
                linSpeedVisee = sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9d6a:	697b      	ldr	r3, [r7, #20]
    9d6c:	691c      	ldr	r4, [r3, #16]
    9d6e:	6efb      	ldr	r3, [r7, #108]
    9d70:	4618      	mov	r0, r3
    9d72:	4619      	mov	r1, r3
    9d74:	f011 f99a 	bl	1b0ac <__addsf3>
    9d78:	4603      	mov	r3, r0
    9d7a:	4618      	mov	r0, r3
    9d7c:	6cf9      	ldr	r1, [r7, #76]
    9d7e:	f011 fa9d 	bl	1b2bc <__aeabi_fmul>
    9d82:	4603      	mov	r3, r0
    9d84:	4620      	mov	r0, r4
    9d86:	4619      	mov	r1, r3
    9d88:	f011 f990 	bl	1b0ac <__addsf3>
    9d8c:	4603      	mov	r3, r0
    9d8e:	4618      	mov	r0, r3
    9d90:	f010 fe22 	bl	1a9d8 <__aeabi_f2d>
    9d94:	4602      	mov	r2, r0
    9d96:	460b      	mov	r3, r1
    9d98:	4610      	mov	r0, r2
    9d9a:	4619      	mov	r1, r3
    9d9c:	f014 ff58 	bl	1ec50 <sqrt>
    9da0:	4602      	mov	r2, r0
    9da2:	460b      	mov	r3, r1
    9da4:	4610      	mov	r0, r2
    9da6:	4619      	mov	r1, r3
    9da8:	f011 f92a 	bl	1b000 <__aeabi_d2f>
    9dac:	4603      	mov	r3, r0
    9dae:	677b      	str	r3, [r7, #116]

             if (m_reculer)
    9db0:	697b      	ldr	r3, [r7, #20]
    9db2:	f893 3020 	ldrb.w	r3, [r3, #32]
    9db6:	2b00      	cmp	r3, #0
    9db8:	d00a      	beq.n	9dd0 <_ZN13CommandAllerA6updateEv+0x6e8>
                linSpeed -= accLinMax;
    9dba:	697b      	ldr	r3, [r7, #20]
    9dbc:	699b      	ldr	r3, [r3, #24]
    9dbe:	4618      	mov	r0, r3
    9dc0:	6cb9      	ldr	r1, [r7, #72]
    9dc2:	f011 f971 	bl	1b0a8 <__aeabi_fsub>
    9dc6:	4603      	mov	r3, r0
    9dc8:	461a      	mov	r2, r3
    9dca:	697b      	ldr	r3, [r7, #20]
    9dcc:	619a      	str	r2, [r3, #24]
    9dce:	e009      	b.n	9de4 <_ZN13CommandAllerA6updateEv+0x6fc>
             else
                linSpeed += accLinMax;
    9dd0:	697b      	ldr	r3, [r7, #20]
    9dd2:	699b      	ldr	r3, [r3, #24]
    9dd4:	4618      	mov	r0, r3
    9dd6:	6cb9      	ldr	r1, [r7, #72]
    9dd8:	f011 f968 	bl	1b0ac <__addsf3>
    9ddc:	4603      	mov	r3, r0
    9dde:	461a      	mov	r2, r3
    9de0:	697b      	ldr	r3, [r7, #20]
    9de2:	619a      	str	r2, [r3, #24]

            if (abs(linSpeed) > abs(linSpeedVisee))
    9de4:	697b      	ldr	r3, [r7, #20]
    9de6:	699b      	ldr	r3, [r3, #24]
    9de8:	4618      	mov	r0, r3
    9dea:	4919      	ldr	r1, [pc, #100]	(9e50 <_ZN13CommandAllerA6updateEv+0x768>)
    9dec:	f011 fc20 	bl	1b630 <__aeabi_fcmpgt>
    9df0:	4603      	mov	r3, r0
    9df2:	2b00      	cmp	r3, #0
    9df4:	d011      	beq.n	9e1a <_ZN13CommandAllerA6updateEv+0x732>
    9df6:	697b      	ldr	r3, [r7, #20]
    9df8:	699a      	ldr	r2, [r3, #24]
    9dfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    9dfe:	70bb      	strb	r3, [r7, #2]
    9e00:	4610      	mov	r0, r2
    9e02:	4913      	ldr	r1, [pc, #76]	(9e50 <_ZN13CommandAllerA6updateEv+0x768>)
    9e04:	f011 fbec 	bl	1b5e0 <__aeabi_fcmpeq>
    9e08:	4603      	mov	r3, r0
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d102      	bne.n	9e14 <_ZN13CommandAllerA6updateEv+0x72c>
    9e0e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9e12:	70bb      	strb	r3, [r7, #2]
    9e14:	78bb      	ldrb	r3, [r7, #2]
    9e16:	613b      	str	r3, [r7, #16]
    9e18:	e00e      	b.n	9e38 <_ZN13CommandAllerA6updateEv+0x750>
    9e1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    9e1e:	707b      	strb	r3, [r7, #1]
    9e20:	6f78      	ldr	r0, [r7, #116]
    9e22:	490b      	ldr	r1, [pc, #44]	(9e50 <_ZN13CommandAllerA6updateEv+0x768>)
    9e24:	f011 fbdc 	bl	1b5e0 <__aeabi_fcmpeq>
    9e28:	4603      	mov	r3, r0
    9e2a:	2b00      	cmp	r3, #0
    9e2c:	d102      	bne.n	9e34 <_ZN13CommandAllerA6updateEv+0x74c>
    9e2e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9e32:	707b      	strb	r3, [r7, #1]
    9e34:	787b      	ldrb	r3, [r7, #1]
    9e36:	613b      	str	r3, [r7, #16]
    9e38:	693b      	ldr	r3, [r7, #16]
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d002      	beq.n	9e44 <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = linSpeedVisee;
    9e3e:	697a      	ldr	r2, [r7, #20]
    9e40:	6f7b      	ldr	r3, [r7, #116]
    9e42:	6193      	str	r3, [r2, #24]
        }
    }
}
    9e44:	f107 0778 	add.w	r7, r7, #120	; 0x78
    9e48:	46bd      	mov	sp, r7
    9e4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9e4e:	46c0      	nop			(mov r8, r8)
    9e50:	00000000 	.word	0x00000000
    9e54:	c0000000 	.word	0xc0000000
    9e58:	41200000 	.word	0x41200000
    9e5c:	3f7851ec 	.word	0x3f7851ec

00009e60 <_ZN18CommandAllerEnArcA6updateEv>:
        cote = SGN_POS;
    else
        cote = SGN_NEG;
}

void CommandAllerEnArcA::update()
    9e60:	b580      	push	{r7, lr}
    9e62:	b094      	sub	sp, #80
    9e64:	af00      	add	r7, sp, #0
    9e66:	6078      	str	r0, [r7, #4]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    9e68:	4b20      	ldr	r3, [pc, #128]	(9eec <_ZN18CommandAllerEnArcA6updateEv+0x8c>)
    9e6a:	637b      	str	r3, [r7, #52]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    9e6c:	4b20      	ldr	r3, [pc, #128]	(9ef0 <_ZN18CommandAllerEnArcA6updateEv+0x90>)
    9e6e:	63bb      	str	r3, [r7, #56]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    9e70:	4b20      	ldr	r3, [pc, #128]	(9ef4 <_ZN18CommandAllerEnArcA6updateEv+0x94>)
    9e72:	63fb      	str	r3, [r7, #60]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    9e74:	4b20      	ldr	r3, [pc, #128]	(9ef8 <_ZN18CommandAllerEnArcA6updateEv+0x98>)
    9e76:	643b      	str	r3, [r7, #64]
    float vitLinMax = vMax;//VITESSE_LINEAIRE_MAX;
    9e78:	687b      	ldr	r3, [r7, #4]
    9e7a:	68db      	ldr	r3, [r3, #12]
    9e7c:	647b      	str	r3, [r7, #68]

    float angle = Odometrie::odometrie->getPos().getAngle();
    9e7e:	4b1f      	ldr	r3, [pc, #124]	(9efc <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9e80:	681a      	ldr	r2, [r3, #0]
    9e82:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9e86:	4618      	mov	r0, r3
    9e88:	4611      	mov	r1, r2
    9e8a:	f000 f85d 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    9e8e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9e92:	4618      	mov	r0, r3
    9e94:	f005 f9e0 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    9e98:	4603      	mov	r3, r0
    9e9a:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9e9c:	4b17      	ldr	r3, [pc, #92]	(9efc <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9e9e:	681a      	ldr	r2, [r3, #0]
    9ea0:	f107 0320 	add.w	r3, r7, #32	; 0x20
    9ea4:	4618      	mov	r0, r3
    9ea6:	4611      	mov	r1, r2
    9ea8:	f000 f84e 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    9eac:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9eb0:	f107 0220 	add.w	r2, r7, #32	; 0x20
    9eb4:	4618      	mov	r0, r3
    9eb6:	4611      	mov	r1, r2
    9eb8:	f005 f9bc 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>

    float rayon = (centre-but).getNorme();
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	f103 0220 	add.w	r2, r3, #32	; 0x20
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	f103 0c04 	add.w	ip, r3, #4	; 0x4
    9ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9ecc:	4618      	mov	r0, r3
    9ece:	4611      	mov	r1, r2
    9ed0:	4662      	mov	r2, ip
    9ed2:	f004 ffe1 	bl	ee98 <_ZNK8PositionmiERKS_>
    9ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9eda:	4618      	mov	r0, r3
    9edc:	f005 f8ea 	bl	f0b4 <_ZNK8Position8getNormeEv>
    9ee0:	4603      	mov	r3, r0
    9ee2:	64fb      	str	r3, [r7, #76]
        angSpeed = linSpeed/rVise;
    else if (abs(linSpeed) > abs(rVise*angSpeed))
        linSpeed = rVise*angSpeed;*/


}
    9ee4:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9ee8:	46bd      	mov	sp, r7
    9eea:	bd80      	pop	{r7, pc}
    9eec:	3983126f 	.word	0x3983126f
    9ef0:	3cf5c28f 	.word	0x3cf5c28f
    9ef4:	3ccccccd 	.word	0x3ccccccd
    9ef8:	3ca3d70a 	.word	0x3ca3d70a
    9efc:	20000580 	.word	0x20000580

00009f00 <_ZNK9Odometrie19getVitesseAngulaireEv>:
PositionPlusAngle Odometrie::getPos() const
{
    return positionPlusAngle;
}

Angle Odometrie::getVitesseAngulaire() const
    9f00:	b480      	push	{r7}
    9f02:	b083      	sub	sp, #12
    9f04:	af00      	add	r7, sp, #0
    9f06:	6078      	str	r0, [r7, #4]
{
    return vitesseAngulaire;
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	699b      	ldr	r3, [r3, #24]
}
    9f0c:	4618      	mov	r0, r3
    9f0e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9f12:	46bd      	mov	sp, r7
    9f14:	bc80      	pop	{r7}
    9f16:	4770      	bx	lr

00009f18 <_ZNK9Odometrie18getVitesseLineaireEv>:

Distance Odometrie::getVitesseLineaire() const
    9f18:	b480      	push	{r7}
    9f1a:	b083      	sub	sp, #12
    9f1c:	af00      	add	r7, sp, #0
    9f1e:	6078      	str	r0, [r7, #4]
{
    return vitesseLineaire;
    9f20:	687b      	ldr	r3, [r7, #4]
    9f22:	695b      	ldr	r3, [r3, #20]
}
    9f24:	4618      	mov	r0, r3
    9f26:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9f2a:	46bd      	mov	sp, r7
    9f2c:	bc80      	pop	{r7}
    9f2e:	4770      	bx	lr

00009f30 <_ZNK9Odometrie16getAbsoluteAngleEv>:

Angle Odometrie::getAbsoluteAngle() const
    9f30:	b480      	push	{r7}
    9f32:	b083      	sub	sp, #12
    9f34:	af00      	add	r7, sp, #0
    9f36:	6078      	str	r0, [r7, #4]
{
    return absAngle;
    9f38:	687b      	ldr	r3, [r7, #4]
    9f3a:	6f1b      	ldr	r3, [r3, #112]
}
    9f3c:	4618      	mov	r0, r3
    9f3e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9f42:	46bd      	mov	sp, r7
    9f44:	bc80      	pop	{r7}
    9f46:	4770      	bx	lr

00009f48 <_ZNK9Odometrie6getPosEv>:
    posY = p.getPosition().getY();
    ang = p.getAngle();
    positionPlusAngle = p;
}

PositionPlusAngle Odometrie::getPos() const
    9f48:	b590      	push	{r4, r7, lr}
    9f4a:	b083      	sub	sp, #12
    9f4c:	af00      	add	r7, sp, #0
    9f4e:	4604      	mov	r4, r0
    9f50:	6079      	str	r1, [r7, #4]
{
    return positionPlusAngle;
    9f52:	4622      	mov	r2, r4
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9f5a:	4610      	mov	r0, r2
    9f5c:	4619      	mov	r1, r3
    9f5e:	f005 f951 	bl	f204 <_ZN17PositionPlusAngleC1ERKS_>
}
    9f62:	4620      	mov	r0, r4
    9f64:	4620      	mov	r0, r4
    9f66:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9f6a:	46bd      	mov	sp, r7
    9f6c:	bd90      	pop	{r4, r7, pc}
    9f6e:	46c0      	nop			(mov r8, r8)

00009f70 <_ZN9Odometrie6setPosERK17PositionPlusAngle>:
    positionPlusAngle.setX(posX);
    positionPlusAngle.setY(posY);

}

void Odometrie::setPos(const PositionPlusAngle& p)
    9f70:	b580      	push	{r7, lr}
    9f72:	b086      	sub	sp, #24
    9f74:	af00      	add	r7, sp, #0
    9f76:	6078      	str	r0, [r7, #4]
    9f78:	6039      	str	r1, [r7, #0]
{
    posX = p.getPosition().getX();
    9f7a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9f7e:	4618      	mov	r0, r3
    9f80:	6839      	ldr	r1, [r7, #0]
    9f82:	f005 f957 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    9f86:	f107 0308 	add.w	r3, r7, #8	; 0x8
    9f8a:	4618      	mov	r0, r3
    9f8c:	f004 ff2a 	bl	ede4 <_ZNK8Position4getXEv>
    9f90:	4603      	mov	r3, r0
    9f92:	4618      	mov	r0, r3
    9f94:	f010 fd20 	bl	1a9d8 <__aeabi_f2d>
    9f98:	4602      	mov	r2, r0
    9f9a:	460b      	mov	r3, r1
    9f9c:	6879      	ldr	r1, [r7, #4]
    9f9e:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = p.getPosition().getY();
    9fa2:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9fa6:	4618      	mov	r0, r3
    9fa8:	6839      	ldr	r1, [r7, #0]
    9faa:	f005 f943 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    9fae:	f107 0310 	add.w	r3, r7, #16	; 0x10
    9fb2:	4618      	mov	r0, r3
    9fb4:	f004 ff22 	bl	edfc <_ZNK8Position4getYEv>
    9fb8:	4603      	mov	r3, r0
    9fba:	4618      	mov	r0, r3
    9fbc:	f010 fd0c 	bl	1a9d8 <__aeabi_f2d>
    9fc0:	4602      	mov	r2, r0
    9fc2:	460b      	mov	r3, r1
    9fc4:	6879      	ldr	r1, [r7, #4]
    9fc6:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = p.getAngle();
    9fca:	6838      	ldr	r0, [r7, #0]
    9fcc:	f005 f944 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    9fd0:	4603      	mov	r3, r0
    9fd2:	4618      	mov	r0, r3
    9fd4:	f010 fd00 	bl	1a9d8 <__aeabi_f2d>
    9fd8:	4602      	mov	r2, r0
    9fda:	460b      	mov	r3, r1
    9fdc:	6879      	ldr	r1, [r7, #4]
    9fde:	e9c1 231a 	strd	r2, r3, [r1, #104]
    positionPlusAngle = p;
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9fe8:	4618      	mov	r0, r3
    9fea:	6839      	ldr	r1, [r7, #0]
    9fec:	f005 f97a 	bl	f2e4 <_ZN17PositionPlusAngleaSERKS_>
}
    9ff0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    9ff4:	46bd      	mov	sp, r7
    9ff6:	bd80      	pop	{r7, pc}

00009ff8 <_ZN9Odometrie8setAngleEf>:
    setPos(posPA);

    odometrie->posY = y;
}

void Odometrie::setAngle(Angle a)
    9ff8:	b590      	push	{r4, r7, lr}
    9ffa:	b087      	sub	sp, #28
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	6078      	str	r0, [r7, #4]
    a000:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    a002:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a006:	4618      	mov	r0, r3
    a008:	6879      	ldr	r1, [r7, #4]
    a00a:	f7ff ff9d 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    posPA.setAngle(a);
    a00e:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a012:	4618      	mov	r0, r3
    a014:	6839      	ldr	r1, [r7, #0]
    a016:	f005 f92b 	bl	f270 <_ZN17PositionPlusAngle8setAngleEf>
    setPos(posPA);
    a01a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a01e:	6878      	ldr	r0, [r7, #4]
    a020:	4619      	mov	r1, r3
    a022:	f7ff ffa5 	bl	9f70 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->ang = a;
    a026:	4b06      	ldr	r3, [pc, #24]	(a040 <_ZN9Odometrie8setAngleEf+0x48>)
    a028:	681c      	ldr	r4, [r3, #0]
    a02a:	6838      	ldr	r0, [r7, #0]
    a02c:	f010 fcd4 	bl	1a9d8 <__aeabi_f2d>
    a030:	4602      	mov	r2, r0
    a032:	460b      	mov	r3, r1
    a034:	e9c4 231a 	strd	r2, r3, [r4, #104]
}
    a038:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a03c:	46bd      	mov	sp, r7
    a03e:	bd90      	pop	{r4, r7, pc}
    a040:	20000580 	.word	0x20000580

0000a044 <_ZN9Odometrie4setYEf>:
    posPA.setPosition(pos);
    setPos(posPA);
    odometrie->posX = x;
}

void Odometrie::setY(Distance y)
    a044:	b590      	push	{r4, r7, lr}
    a046:	b089      	sub	sp, #36
    a048:	af00      	add	r7, sp, #0
    a04a:	6078      	str	r0, [r7, #4]
    a04c:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    a04e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    a052:	4618      	mov	r0, r3
    a054:	6879      	ldr	r1, [r7, #4]
    a056:	f7ff ff77 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    a05a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a05e:	f107 0214 	add.w	r2, r7, #20	; 0x14
    a062:	4618      	mov	r0, r3
    a064:	4611      	mov	r1, r2
    a066:	f005 f8e5 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setY(y);
    a06a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a06e:	4618      	mov	r0, r3
    a070:	6839      	ldr	r1, [r7, #0]
    a072:	f004 fedd 	bl	ee30 <_ZN8Position4setYEf>
    posPA.setPosition(pos);
    a076:	f107 0314 	add.w	r3, r7, #20	; 0x14
    a07a:	f107 020c 	add.w	r2, r7, #12	; 0xc
    a07e:	4618      	mov	r0, r3
    a080:	4611      	mov	r1, r2
    a082:	f005 f91f 	bl	f2c4 <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    a086:	f107 0314 	add.w	r3, r7, #20	; 0x14
    a08a:	6878      	ldr	r0, [r7, #4]
    a08c:	4619      	mov	r1, r3
    a08e:	f7ff ff6f 	bl	9f70 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->posY = y;
    a092:	4b06      	ldr	r3, [pc, #24]	(a0ac <_ZN9Odometrie4setYEf+0x68>)
    a094:	681c      	ldr	r4, [r3, #0]
    a096:	6838      	ldr	r0, [r7, #0]
    a098:	f010 fc9e 	bl	1a9d8 <__aeabi_f2d>
    a09c:	4602      	mov	r2, r0
    a09e:	460b      	mov	r3, r1
    a0a0:	e9c4 2318 	strd	r2, r3, [r4, #96]
}
    a0a4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    a0a8:	46bd      	mov	sp, r7
    a0aa:	bd90      	pop	{r4, r7, pc}
    a0ac:	20000580 	.word	0x20000580

0000a0b0 <_ZN9Odometrie4setXEf>:
Angle Odometrie::getAbsoluteAngle() const
{
    return absAngle;
}

void Odometrie::setX(Distance x)
    a0b0:	b590      	push	{r4, r7, lr}
    a0b2:	b089      	sub	sp, #36
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	6078      	str	r0, [r7, #4]
    a0b8:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    a0ba:	f107 0314 	add.w	r3, r7, #20	; 0x14
    a0be:	4618      	mov	r0, r3
    a0c0:	6879      	ldr	r1, [r7, #4]
    a0c2:	f7ff ff41 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    a0c6:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a0ca:	f107 0214 	add.w	r2, r7, #20	; 0x14
    a0ce:	4618      	mov	r0, r3
    a0d0:	4611      	mov	r1, r2
    a0d2:	f005 f8af 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setX(x);
    a0d6:	f107 030c 	add.w	r3, r7, #12	; 0xc
    a0da:	4618      	mov	r0, r3
    a0dc:	6839      	ldr	r1, [r7, #0]
    a0de:	f004 fe99 	bl	ee14 <_ZN8Position4setXEf>
    posPA.setPosition(pos);
    a0e2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    a0e6:	f107 020c 	add.w	r2, r7, #12	; 0xc
    a0ea:	4618      	mov	r0, r3
    a0ec:	4611      	mov	r1, r2
    a0ee:	f005 f8e9 	bl	f2c4 <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    a0f2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    a0f6:	6878      	ldr	r0, [r7, #4]
    a0f8:	4619      	mov	r1, r3
    a0fa:	f7ff ff39 	bl	9f70 <_ZN9Odometrie6setPosERK17PositionPlusAngle>
    odometrie->posX = x;
    a0fe:	4b06      	ldr	r3, [pc, #24]	(a118 <_ZN9Odometrie4setXEf+0x68>)
    a100:	681c      	ldr	r4, [r3, #0]
    a102:	6838      	ldr	r0, [r7, #0]
    a104:	f010 fc68 	bl	1a9d8 <__aeabi_f2d>
    a108:	4602      	mov	r2, r0
    a10a:	460b      	mov	r3, r1
    a10c:	e9c4 2316 	strd	r2, r3, [r4, #88]
}
    a110:	f107 0724 	add.w	r7, r7, #36	; 0x24
    a114:	46bd      	mov	sp, r7
    a116:	bd90      	pop	{r4, r7, pc}
    a118:	20000580 	.word	0x20000580

0000a11c <_ZN9Odometrie6updateEv>:
{
    delete roueCodeuseGauche;
    delete roueCodeuseDroite;
}

void Odometrie::update()
    a11c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    a120:	b094      	sub	sp, #80
    a122:	af00      	add	r7, sp, #0
    a124:	6078      	str	r0, [r7, #4]
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    a126:	f04f 0300 	mov.w	r3, #0	; 0x0
    a12a:	633b      	str	r3, [r7, #48]
    a12c:	e027      	b.n	a17e <_ZN9Odometrie6updateEv+0x62>
    {
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
    a12e:	6b3b      	ldr	r3, [r7, #48]
    a130:	f103 0001 	add.w	r0, r3, #1	; 0x1
    a134:	6b3b      	ldr	r3, [r7, #48]
    a136:	687a      	ldr	r2, [r7, #4]
    a138:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a13c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a140:	4413      	add	r3, r2
    a142:	6859      	ldr	r1, [r3, #4]
    a144:	687a      	ldr	r2, [r7, #4]
    a146:	f100 0308 	add.w	r3, r0, #8	; 0x8
    a14a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a14e:	4413      	add	r3, r2
    a150:	6059      	str	r1, [r3, #4]
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    a152:	6b3b      	ldr	r3, [r7, #48]
    a154:	f103 0001 	add.w	r0, r3, #1	; 0x1
    a158:	6b3b      	ldr	r3, [r7, #48]
    a15a:	687a      	ldr	r2, [r7, #4]
    a15c:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a160:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a164:	4413      	add	r3, r2
    a166:	6859      	ldr	r1, [r3, #4]
    a168:	687a      	ldr	r2, [r7, #4]
    a16a:	f100 0306 	add.w	r3, r0, #6	; 0x6
    a16e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a172:	4413      	add	r3, r2
    a174:	6059      	str	r1, [r3, #4]
}

void Odometrie::update()
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    a176:	6b3b      	ldr	r3, [r7, #48]
    a178:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    a17c:	633b      	str	r3, [r7, #48]
    a17e:	6b3b      	ldr	r3, [r7, #48]
    a180:	2b00      	cmp	r3, #0
    a182:	dad4      	bge.n	a12e <_ZN9Odometrie6updateEv+0x12>
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    }

    // On a le moins pour prendre en compte que les deux roux codeuses sont montées dans des sens opposés car pas du même coté du robot
    prevDeltaTicksRoueDroite[0] = -roueCodeuseDroite->getTickValue();
    a184:	687b      	ldr	r3, [r7, #4]
    a186:	681b      	ldr	r3, [r3, #0]
    a188:	4618      	mov	r0, r3
    a18a:	f002 fe41 	bl	ce10 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a18e:	4603      	mov	r3, r0
    a190:	b29b      	uxth	r3, r3
    a192:	b21b      	sxth	r3, r3
    a194:	f1c3 0200 	rsb	r2, r3, #0	; 0x0
    a198:	687b      	ldr	r3, [r7, #4]
    a19a:	625a      	str	r2, [r3, #36]
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
        prevDeltaTicksRoueGauche[0] = -roueCodeuseGauche->getTickValue();
    #else
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	685b      	ldr	r3, [r3, #4]
    a1a0:	4618      	mov	r0, r3
    a1a2:	f002 fe35 	bl	ce10 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a1a6:	4603      	mov	r3, r0
    a1a8:	b29b      	uxth	r3, r3
    a1aa:	b21a      	sxth	r2, r3
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	61da      	str	r2, [r3, #28]
    #endif

    int32_t sommeGauche = 0;
    a1b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    a1b4:	60bb      	str	r3, [r7, #8]
    int32_t sommeDroite = 0;
    a1b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a1ba:	60fb      	str	r3, [r7, #12]
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a1bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    a1c0:	637b      	str	r3, [r7, #52]
    a1c2:	e019      	b.n	a1f8 <_ZN9Odometrie6updateEv+0xdc>
    {
        sommeGauche += prevDeltaTicksRoueGauche[i];
    a1c4:	6b7b      	ldr	r3, [r7, #52]
    a1c6:	687a      	ldr	r2, [r7, #4]
    a1c8:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a1cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a1d0:	4413      	add	r3, r2
    a1d2:	685a      	ldr	r2, [r3, #4]
    a1d4:	68bb      	ldr	r3, [r7, #8]
    a1d6:	4413      	add	r3, r2
    a1d8:	60bb      	str	r3, [r7, #8]
        sommeDroite += prevDeltaTicksRoueDroite[i];
    a1da:	6b7b      	ldr	r3, [r7, #52]
    a1dc:	687a      	ldr	r2, [r7, #4]
    a1de:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a1e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a1e6:	4413      	add	r3, r2
    a1e8:	685a      	ldr	r2, [r3, #4]
    a1ea:	68fb      	ldr	r3, [r7, #12]
    a1ec:	4413      	add	r3, r2
    a1ee:	60fb      	str	r3, [r7, #12]
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    #endif

    int32_t sommeGauche = 0;
    int32_t sommeDroite = 0;
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a1f0:	6b7b      	ldr	r3, [r7, #52]
    a1f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a1f6:	637b      	str	r3, [r7, #52]
    a1f8:	6b7b      	ldr	r3, [r7, #52]
    a1fa:	2b01      	cmp	r3, #1
    a1fc:	dde2      	ble.n	a1c4 <_ZN9Odometrie6updateEv+0xa8>
        sommeGauche += prevDeltaTicksRoueGauche[i];
        sommeDroite += prevDeltaTicksRoueDroite[i];
    }

    // double filteredDeltaTicksRoueGauche = (deltaTicksRoueGauche+prevDeltaTicksRoueGauche)/2.0;
    double filteredDeltaTicksRoueGauche = (double)sommeGauche/(double)tailleTabPrevTicks;
    a1fe:	68b8      	ldr	r0, [r7, #8]
    a200:	f010 fbd8 	bl	1a9b4 <__aeabi_i2d>
    a204:	4602      	mov	r2, r0
    a206:	460b      	mov	r3, r1
    a208:	4610      	mov	r0, r2
    a20a:	4619      	mov	r1, r3
    a20c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a214:	f010 fd5e 	bl	1acd4 <__aeabi_ddiv>
    a218:	4602      	mov	r2, r0
    a21a:	460b      	mov	r3, r1
    a21c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // double filteredDeltaTicksRoueDroite = (deltaTicksRoueDroite+prevDeltaTicksRoueDroite)/2.0;
    double filteredDeltaTicksRoueDroite = (double)sommeDroite/(double)tailleTabPrevTicks;
    a220:	68f8      	ldr	r0, [r7, #12]
    a222:	f010 fbc7 	bl	1a9b4 <__aeabi_i2d>
    a226:	4602      	mov	r2, r0
    a228:	460b      	mov	r3, r1
    a22a:	4610      	mov	r0, r2
    a22c:	4619      	mov	r1, r3
    a22e:	f04f 0200 	mov.w	r2, #0	; 0x0
    a232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a236:	f010 fd4d 	bl	1acd4 <__aeabi_ddiv>
    a23a:	4602      	mov	r2, r0
    a23c:	460b      	mov	r3, r1
    a23e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double tmpDeltaAngle = (filteredDeltaTicksRoueGauche-filteredDeltaTicksRoueDroite)*coeffAngle;  // cf coef angle
    a242:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    a246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    a24a:	f010 fa65 	bl	1a718 <__aeabi_dsub>
    a24e:	4602      	mov	r2, r0
    a250:	460b      	mov	r3, r1
    a252:	4610      	mov	r0, r2
    a254:	4619      	mov	r1, r3
    a256:	687b      	ldr	r3, [r7, #4]
    a258:	e9d3 2314 	ldrd	r2, r3, [r3, #80]
    a25c:	f010 fc10 	bl	1aa80 <__aeabi_dmul>
    a260:	4602      	mov	r2, r0
    a262:	460b      	mov	r3, r1
    a264:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double tmpDist = (filteredDeltaTicksRoueGauche+filteredDeltaTicksRoueDroite)*coeffDistance;     // soit le nombre moyen de tours de roue * le perimetre de la roue
    a268:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    a26c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    a270:	f010 fa54 	bl	1a71c <__adddf3>
    a274:	4602      	mov	r2, r0
    a276:	460b      	mov	r3, r1
    a278:	4610      	mov	r0, r2
    a27a:	4619      	mov	r1, r3
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a282:	f010 fbfd 	bl	1aa80 <__aeabi_dmul>
    a286:	4602      	mov	r2, r0
    a288:	460b      	mov	r3, r1
    a28a:	e9c7 230a 	strd	r2, r3, [r7, #40]

    vitesseLineaire = Distance(tmpDist);
    a28e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    a292:	f010 feb5 	bl	1b000 <__aeabi_d2f>
    a296:	4602      	mov	r2, r0
    a298:	687b      	ldr	r3, [r7, #4]
    a29a:	615a      	str	r2, [r3, #20]

    vitesseAngulaire = Angle(tmpDeltaAngle);
    a29c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a2a0:	f010 feae 	bl	1b000 <__aeabi_d2f>
    a2a4:	4602      	mov	r2, r0
    a2a6:	687b      	ldr	r3, [r7, #4]
    a2a8:	619a      	str	r2, [r3, #24]

	//positionPlusAngle.setAngle(positionPlusAngle.getAngle()+vitesseAngulaire);
	//positionPlusAngle.setPosition(positionPlusAngle.getPosition() + Position(tmpDist*cos(positionPlusAngle.getAngle()), tmpDist*sin(positionPlusAngle.getAngle())));    //mettre sinx si ça marche pas et non sin


    if (tmpDeltaAngle == 0.0)
    a2aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a2ae:	f04f 0200 	mov.w	r2, #0	; 0x0
    a2b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a2b6:	f010 fe49 	bl	1af4c <__aeabi_dcmpeq>
    a2ba:	4603      	mov	r3, r0
    a2bc:	2b00      	cmp	r3, #0
    a2be:	d03a      	beq.n	a336 <_ZN9Odometrie6updateEv+0x21a>
    {
        posX += tmpDist*cos(ang);
    a2c0:	687b      	ldr	r3, [r7, #4]
    a2c2:	e9d3 4516 	ldrd	r4, r5, [r3, #88]
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a2cc:	4610      	mov	r0, r2
    a2ce:	4619      	mov	r1, r3
    a2d0:	f014 fc30 	bl	1eb34 <cos>
    a2d4:	4602      	mov	r2, r0
    a2d6:	460b      	mov	r3, r1
    a2d8:	4610      	mov	r0, r2
    a2da:	4619      	mov	r1, r3
    a2dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    a2e0:	f010 fbce 	bl	1aa80 <__aeabi_dmul>
    a2e4:	4602      	mov	r2, r0
    a2e6:	460b      	mov	r3, r1
    a2e8:	4620      	mov	r0, r4
    a2ea:	4629      	mov	r1, r5
    a2ec:	f010 fa16 	bl	1a71c <__adddf3>
    a2f0:	4602      	mov	r2, r0
    a2f2:	460b      	mov	r3, r1
    a2f4:	6879      	ldr	r1, [r7, #4]
    a2f6:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += tmpDist*sin(ang);
    a2fa:	687b      	ldr	r3, [r7, #4]
    a2fc:	e9d3 4518 	ldrd	r4, r5, [r3, #96]
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a306:	4610      	mov	r0, r2
    a308:	4619      	mov	r1, r3
    a30a:	f014 fc55 	bl	1ebb8 <sin>
    a30e:	4602      	mov	r2, r0
    a310:	460b      	mov	r3, r1
    a312:	4610      	mov	r0, r2
    a314:	4619      	mov	r1, r3
    a316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    a31a:	f010 fbb1 	bl	1aa80 <__aeabi_dmul>
    a31e:	4602      	mov	r2, r0
    a320:	460b      	mov	r3, r1
    a322:	4620      	mov	r0, r4
    a324:	4629      	mov	r1, r5
    a326:	f010 f9f9 	bl	1a71c <__adddf3>
    a32a:	4602      	mov	r2, r0
    a32c:	460b      	mov	r3, r1
    a32e:	6879      	ldr	r1, [r7, #4]
    a330:	e9c1 2318 	strd	r2, r3, [r1, #96]
    a334:	e0f3      	b.n	a51e <_ZN9Odometrie6updateEv+0x402>
    }
    else
    {
        double rayonCourbure = tmpDist/tmpDeltaAngle;
    a336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    a33a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    a33e:	f010 fcc9 	bl	1acd4 <__aeabi_ddiv>
    a342:	4602      	mov	r2, r0
    a344:	460b      	mov	r3, r1
    a346:	e9c7 230e 	strd	r2, r3, [r7, #56]
        double distAvancee = rayonCourbure*sin(tmpDeltaAngle);
    a34a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a34e:	f014 fc33 	bl	1ebb8 <sin>
    a352:	4602      	mov	r2, r0
    a354:	460b      	mov	r3, r1
    a356:	4610      	mov	r0, r2
    a358:	4619      	mov	r1, r3
    a35a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    a35e:	f010 fb8f 	bl	1aa80 <__aeabi_dmul>
    a362:	4602      	mov	r2, r0
    a364:	460b      	mov	r3, r1
    a366:	e9c7 2310 	strd	r2, r3, [r7, #64]
        double distTranslatee = rayonCourbure*(1.0-cos(tmpDeltaAngle));
    a36a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    a36e:	f014 fbe1 	bl	1eb34 <cos>
    a372:	4602      	mov	r2, r0
    a374:	460b      	mov	r3, r1
    a376:	f04f 0000 	mov.w	r0, #0	; 0x0
    a37a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    a37e:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
    a382:	f010 f9c9 	bl	1a718 <__aeabi_dsub>
    a386:	4602      	mov	r2, r0
    a388:	460b      	mov	r3, r1
    a38a:	4610      	mov	r0, r2
    a38c:	4619      	mov	r1, r3
    a38e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    a392:	f010 fb75 	bl	1aa80 <__aeabi_dmul>
    a396:	4602      	mov	r2, r0
    a398:	460b      	mov	r3, r1
    a39a:	e9c7 2312 	strd	r2, r3, [r7, #72]

        posX += distAvancee*cos(ang)-distTranslatee*sin(ang);
    a39e:	687b      	ldr	r3, [r7, #4]
    a3a0:	e9d3 8916 	ldrd	r8, r9, [r3, #88]
    a3a4:	687b      	ldr	r3, [r7, #4]
    a3a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a3aa:	4610      	mov	r0, r2
    a3ac:	4619      	mov	r1, r3
    a3ae:	f014 fbc1 	bl	1eb34 <cos>
    a3b2:	4602      	mov	r2, r0
    a3b4:	460b      	mov	r3, r1
    a3b6:	4610      	mov	r0, r2
    a3b8:	4619      	mov	r1, r3
    a3ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    a3be:	f010 fb5f 	bl	1aa80 <__aeabi_dmul>
    a3c2:	4602      	mov	r2, r0
    a3c4:	460b      	mov	r3, r1
    a3c6:	4614      	mov	r4, r2
    a3c8:	461d      	mov	r5, r3
    a3ca:	687b      	ldr	r3, [r7, #4]
    a3cc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a3d0:	4610      	mov	r0, r2
    a3d2:	4619      	mov	r1, r3
    a3d4:	f014 fbf0 	bl	1ebb8 <sin>
    a3d8:	4602      	mov	r2, r0
    a3da:	460b      	mov	r3, r1
    a3dc:	4610      	mov	r0, r2
    a3de:	4619      	mov	r1, r3
    a3e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    a3e4:	f010 fb4c 	bl	1aa80 <__aeabi_dmul>
    a3e8:	4602      	mov	r2, r0
    a3ea:	460b      	mov	r3, r1
    a3ec:	4620      	mov	r0, r4
    a3ee:	4629      	mov	r1, r5
    a3f0:	f010 f992 	bl	1a718 <__aeabi_dsub>
    a3f4:	4602      	mov	r2, r0
    a3f6:	460b      	mov	r3, r1
    a3f8:	4640      	mov	r0, r8
    a3fa:	4649      	mov	r1, r9
    a3fc:	f010 f98e 	bl	1a71c <__adddf3>
    a400:	4602      	mov	r2, r0
    a402:	460b      	mov	r3, r1
    a404:	6879      	ldr	r1, [r7, #4]
    a406:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += distAvancee*sin(ang)+distTranslatee*cos(ang);
    a40a:	687b      	ldr	r3, [r7, #4]
    a40c:	e9d3 8918 	ldrd	r8, r9, [r3, #96]
    a410:	687b      	ldr	r3, [r7, #4]
    a412:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a416:	4610      	mov	r0, r2
    a418:	4619      	mov	r1, r3
    a41a:	f014 fbcd 	bl	1ebb8 <sin>
    a41e:	4602      	mov	r2, r0
    a420:	460b      	mov	r3, r1
    a422:	4610      	mov	r0, r2
    a424:	4619      	mov	r1, r3
    a426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    a42a:	f010 fb29 	bl	1aa80 <__aeabi_dmul>
    a42e:	4602      	mov	r2, r0
    a430:	460b      	mov	r3, r1
    a432:	4614      	mov	r4, r2
    a434:	461d      	mov	r5, r3
    a436:	687b      	ldr	r3, [r7, #4]
    a438:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a43c:	4610      	mov	r0, r2
    a43e:	4619      	mov	r1, r3
    a440:	f014 fb78 	bl	1eb34 <cos>
    a444:	4602      	mov	r2, r0
    a446:	460b      	mov	r3, r1
    a448:	4610      	mov	r0, r2
    a44a:	4619      	mov	r1, r3
    a44c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    a450:	f010 fb16 	bl	1aa80 <__aeabi_dmul>
    a454:	4602      	mov	r2, r0
    a456:	460b      	mov	r3, r1
    a458:	4620      	mov	r0, r4
    a45a:	4629      	mov	r1, r5
    a45c:	f010 f95e 	bl	1a71c <__adddf3>
    a460:	4602      	mov	r2, r0
    a462:	460b      	mov	r3, r1
    a464:	4640      	mov	r0, r8
    a466:	4649      	mov	r1, r9
    a468:	f010 f958 	bl	1a71c <__adddf3>
    a46c:	4602      	mov	r2, r0
    a46e:	460b      	mov	r3, r1
    a470:	6879      	ldr	r1, [r7, #4]
    a472:	e9c1 2318 	strd	r2, r3, [r1, #96]

        ang += vitesseAngulaire;
    a476:	687b      	ldr	r3, [r7, #4]
    a478:	e9d3 451a 	ldrd	r4, r5, [r3, #104]
    a47c:	687b      	ldr	r3, [r7, #4]
    a47e:	699b      	ldr	r3, [r3, #24]
    a480:	4618      	mov	r0, r3
    a482:	f010 faa9 	bl	1a9d8 <__aeabi_f2d>
    a486:	4602      	mov	r2, r0
    a488:	460b      	mov	r3, r1
    a48a:	4620      	mov	r0, r4
    a48c:	4629      	mov	r1, r5
    a48e:	f010 f945 	bl	1a71c <__adddf3>
    a492:	4602      	mov	r2, r0
    a494:	460b      	mov	r3, r1
    a496:	6879      	ldr	r1, [r7, #4]
    a498:	e9c1 231a 	strd	r2, r3, [r1, #104]
        absAngle += vitesseAngulaire;
    a49c:	687b      	ldr	r3, [r7, #4]
    a49e:	6f1a      	ldr	r2, [r3, #112]
    a4a0:	687b      	ldr	r3, [r7, #4]
    a4a2:	699b      	ldr	r3, [r3, #24]
    a4a4:	4610      	mov	r0, r2
    a4a6:	4619      	mov	r1, r3
    a4a8:	f010 fe00 	bl	1b0ac <__addsf3>
    a4ac:	4603      	mov	r3, r0
    a4ae:	461a      	mov	r2, r3
    a4b0:	687b      	ldr	r3, [r7, #4]
    a4b2:	671a      	str	r2, [r3, #112]
        if (ang > M_PI)
    a4b4:	687b      	ldr	r3, [r7, #4]
    a4b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a4ba:	4610      	mov	r0, r2
    a4bc:	4619      	mov	r1, r3
    a4be:	a232      	add	r2, pc, #200	(adr r2, a588 <_ZN9Odometrie6updateEv+0x46c>)
    a4c0:	ca0c      	ldmia	r2!, {r2, r3}
    a4c2:	f010 fd6b 	bl	1af9c <__aeabi_dcmpgt>
    a4c6:	4603      	mov	r3, r0
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d00e      	beq.n	a4ea <_ZN9Odometrie6updateEv+0x3ce>
            ang -= 2.0*M_PI;
    a4cc:	687b      	ldr	r3, [r7, #4]
    a4ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a4d2:	4610      	mov	r0, r2
    a4d4:	4619      	mov	r1, r3
    a4d6:	a22e      	add	r2, pc, #184	(adr r2, a590 <_ZN9Odometrie6updateEv+0x474>)
    a4d8:	ca0c      	ldmia	r2!, {r2, r3}
    a4da:	f010 f91d 	bl	1a718 <__aeabi_dsub>
    a4de:	4602      	mov	r2, r0
    a4e0:	460b      	mov	r3, r1
    a4e2:	6879      	ldr	r1, [r7, #4]
    a4e4:	e9c1 231a 	strd	r2, r3, [r1, #104]
    a4e8:	e019      	b.n	a51e <_ZN9Odometrie6updateEv+0x402>
        else if (ang < -M_PI)
    a4ea:	687b      	ldr	r3, [r7, #4]
    a4ec:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a4f0:	4610      	mov	r0, r2
    a4f2:	4619      	mov	r1, r3
    a4f4:	a228      	add	r2, pc, #160	(adr r2, a598 <_ZN9Odometrie6updateEv+0x47c>)
    a4f6:	ca0c      	ldmia	r2!, {r2, r3}
    a4f8:	f010 fd32 	bl	1af60 <__aeabi_dcmplt>
    a4fc:	4603      	mov	r3, r0
    a4fe:	2b00      	cmp	r3, #0
    a500:	d00d      	beq.n	a51e <_ZN9Odometrie6updateEv+0x402>
            ang += 2.0*M_PI;
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a508:	4610      	mov	r0, r2
    a50a:	4619      	mov	r1, r3
    a50c:	a220      	add	r2, pc, #128	(adr r2, a590 <_ZN9Odometrie6updateEv+0x474>)
    a50e:	ca0c      	ldmia	r2!, {r2, r3}
    a510:	f010 f904 	bl	1a71c <__adddf3>
    a514:	4602      	mov	r2, r0
    a516:	460b      	mov	r3, r1
    a518:	6879      	ldr	r1, [r7, #4]
    a51a:	e9c1 231a 	strd	r2, r3, [r1, #104]
    }

    positionPlusAngle.setAngle(ang);
    a51e:	687b      	ldr	r3, [r7, #4]
    a520:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a524:	687b      	ldr	r3, [r7, #4]
    a526:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    a52a:	4610      	mov	r0, r2
    a52c:	4619      	mov	r1, r3
    a52e:	f010 fd67 	bl	1b000 <__aeabi_d2f>
    a532:	4603      	mov	r3, r0
    a534:	4620      	mov	r0, r4
    a536:	4619      	mov	r1, r3
    a538:	f004 fe9a 	bl	f270 <_ZN17PositionPlusAngle8setAngleEf>
    positionPlusAngle.setX(posX);
    a53c:	687b      	ldr	r3, [r7, #4]
    a53e:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a542:	687b      	ldr	r3, [r7, #4]
    a544:	e9d3 2316 	ldrd	r2, r3, [r3, #88]
    a548:	4610      	mov	r0, r2
    a54a:	4619      	mov	r1, r3
    a54c:	f010 fd58 	bl	1b000 <__aeabi_d2f>
    a550:	4603      	mov	r3, r0
    a552:	4620      	mov	r0, r4
    a554:	4619      	mov	r1, r3
    a556:	f004 fea7 	bl	f2a8 <_ZN17PositionPlusAngle4setXEf>
    positionPlusAngle.setY(posY);
    a55a:	687b      	ldr	r3, [r7, #4]
    a55c:	f103 0408 	add.w	r4, r3, #8	; 0x8
    a560:	687b      	ldr	r3, [r7, #4]
    a562:	e9d3 2318 	ldrd	r2, r3, [r3, #96]
    a566:	4610      	mov	r0, r2
    a568:	4619      	mov	r1, r3
    a56a:	f010 fd49 	bl	1b000 <__aeabi_d2f>
    a56e:	4603      	mov	r3, r0
    a570:	4620      	mov	r0, r4
    a572:	4619      	mov	r1, r3
    a574:	f004 fe8a 	bl	f28c <_ZN17PositionPlusAngle4setYEf>

}
    a578:	f107 0750 	add.w	r7, r7, #80	; 0x50
    a57c:	46bd      	mov	sp, r7
    a57e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    a582:	46c0      	nop			(mov r8, r8)
    a584:	46c0      	nop			(mov r8, r8)
    a586:	46c0      	nop			(mov r8, r8)
    a588:	54442d18 	.word	0x54442d18
    a58c:	400921fb 	.word	0x400921fb
    a590:	54442d18 	.word	0x54442d18
    a594:	401921fb 	.word	0x401921fb
    a598:	54442d18 	.word	0x54442d18
    a59c:	c00921fb 	.word	0xc00921fb

0000a5a0 <_ZN9OdometrieD1Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    a5a0:	b580      	push	{r7, lr}
    a5a2:	b082      	sub	sp, #8
    a5a4:	af00      	add	r7, sp, #0
    a5a6:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    a5a8:	687b      	ldr	r3, [r7, #4]
    a5aa:	685b      	ldr	r3, [r3, #4]
    a5ac:	4618      	mov	r0, r3
    a5ae:	f004 fb45 	bl	ec3c <_ZdlPv>
    delete roueCodeuseDroite;
    a5b2:	687b      	ldr	r3, [r7, #4]
    a5b4:	681b      	ldr	r3, [r3, #0]
    a5b6:	4618      	mov	r0, r3
    a5b8:	f004 fb40 	bl	ec3c <_ZdlPv>
}
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	4618      	mov	r0, r3
    a5c0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a5c4:	46bd      	mov	sp, r7
    a5c6:	bd80      	pop	{r7, pc}

0000a5c8 <_ZN9OdometrieD2Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    a5c8:	b580      	push	{r7, lr}
    a5ca:	b082      	sub	sp, #8
    a5cc:	af00      	add	r7, sp, #0
    a5ce:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    a5d0:	687b      	ldr	r3, [r7, #4]
    a5d2:	685b      	ldr	r3, [r3, #4]
    a5d4:	4618      	mov	r0, r3
    a5d6:	f004 fb31 	bl	ec3c <_ZdlPv>
    delete roueCodeuseDroite;
    a5da:	687b      	ldr	r3, [r7, #4]
    a5dc:	681b      	ldr	r3, [r3, #0]
    a5de:	4618      	mov	r0, r3
    a5e0:	f004 fb2c 	bl	ec3c <_ZdlPv>
}
    a5e4:	687b      	ldr	r3, [r7, #4]
    a5e6:	4618      	mov	r0, r3
    a5e8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a5ec:	46bd      	mov	sp, r7
    a5ee:	bd80      	pop	{r7, pc}

0000a5f0 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    a5f0:	b580      	push	{r7, lr}
    a5f2:	b086      	sub	sp, #24
    a5f4:	af00      	add	r7, sp, #0
    a5f6:	60f8      	str	r0, [r7, #12]
    a5f8:	60b9      	str	r1, [r7, #8]
    a5fa:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    a5fc:	68fb      	ldr	r3, [r7, #12]
    a5fe:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a602:	4618      	mov	r0, r3
    a604:	f004 ffcc 	bl	f5a0 <_ZN17PositionPlusAngleC1Ev>
    a608:	68f9      	ldr	r1, [r7, #12]
    a60a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a60e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a612:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a616:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    a61a:	68fa      	ldr	r2, [r7, #12]
    a61c:	4b4c      	ldr	r3, [pc, #304]	(a750 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a61e:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    a620:	68fa      	ldr	r2, [r7, #12]
    a622:	4b4b      	ldr	r3, [pc, #300]	(a750 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a624:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    a626:	68f9      	ldr	r1, [r7, #12]
    a628:	a245      	add	r2, pc, #276	(adr r2, a740 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x150>)
    a62a:	ca0c      	ldmia	r2!, {r2, r3}
    a62c:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a630:	68f9      	ldr	r1, [r7, #12]
    a632:	f04f 0200 	mov.w	r2, #0	; 0x0
    a636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a63a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a63e:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a642:	68f9      	ldr	r1, [r7, #12]
    a644:	f04f 0200 	mov.w	r2, #0	; 0x0
    a648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a64c:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a650:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a654:	68fb      	ldr	r3, [r7, #12]
    a656:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a65a:	4610      	mov	r0, r2
    a65c:	4619      	mov	r1, r3
    a65e:	a23a      	add	r2, pc, #232	(adr r2, a748 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x158>)
    a660:	ca0c      	ldmia	r2!, {r2, r3}
    a662:	f010 fa0d 	bl	1aa80 <__aeabi_dmul>
    a666:	4602      	mov	r2, r0
    a668:	460b      	mov	r3, r1
    a66a:	4610      	mov	r0, r2
    a66c:	4619      	mov	r1, r3
    a66e:	68fb      	ldr	r3, [r7, #12]
    a670:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a674:	f010 fb2e 	bl	1acd4 <__aeabi_ddiv>
    a678:	4602      	mov	r2, r0
    a67a:	460b      	mov	r3, r1
    a67c:	68f9      	ldr	r1, [r7, #12]
    a67e:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a682:	68fb      	ldr	r3, [r7, #12]
    a684:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a688:	4610      	mov	r0, r2
    a68a:	4619      	mov	r1, r3
    a68c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a690:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a694:	f010 f9f4 	bl	1aa80 <__aeabi_dmul>
    a698:	4602      	mov	r2, r0
    a69a:	460b      	mov	r3, r1
    a69c:	4610      	mov	r0, r2
    a69e:	4619      	mov	r1, r3
    a6a0:	68fb      	ldr	r3, [r7, #12]
    a6a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a6a6:	f010 fb15 	bl	1acd4 <__aeabi_ddiv>
    a6aa:	4602      	mov	r2, r0
    a6ac:	460b      	mov	r3, r1
    a6ae:	68f9      	ldr	r1, [r7, #12]
    a6b0:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a6b4:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6b8:	617b      	str	r3, [r7, #20]
    a6ba:	e017      	b.n	a6ec <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a6bc:	697b      	ldr	r3, [r7, #20]
    a6be:	68fa      	ldr	r2, [r7, #12]
    a6c0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a6c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a6c8:	4413      	add	r3, r2
    a6ca:	f04f 0200 	mov.w	r2, #0	; 0x0
    a6ce:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a6d0:	697b      	ldr	r3, [r7, #20]
    a6d2:	68fa      	ldr	r2, [r7, #12]
    a6d4:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a6d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a6dc:	4413      	add	r3, r2
    a6de:	f04f 0200 	mov.w	r2, #0	; 0x0
    a6e2:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a6e4:	697b      	ldr	r3, [r7, #20]
    a6e6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a6ea:	617b      	str	r3, [r7, #20]
    a6ec:	697b      	ldr	r3, [r7, #20]
    a6ee:	2b01      	cmp	r3, #1
    a6f0:	dde4      	ble.n	a6bc <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a6f2:	68fa      	ldr	r2, [r7, #12]
    a6f4:	68bb      	ldr	r3, [r7, #8]
    a6f6:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a6f8:	68fa      	ldr	r2, [r7, #12]
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a6fe:	4a15      	ldr	r2, [pc, #84]	(a754 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x164>)
    a700:	68fb      	ldr	r3, [r7, #12]
    a702:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a704:	68f9      	ldr	r1, [r7, #12]
    a706:	f04f 0200 	mov.w	r2, #0	; 0x0
    a70a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a70e:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a712:	68f9      	ldr	r1, [r7, #12]
    a714:	f04f 0200 	mov.w	r2, #0	; 0x0
    a718:	f04f 0300 	mov.w	r3, #0	; 0x0
    a71c:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a720:	68f9      	ldr	r1, [r7, #12]
    a722:	f04f 0200 	mov.w	r2, #0	; 0x0
    a726:	f04f 0300 	mov.w	r3, #0	; 0x0
    a72a:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a72e:	68fa      	ldr	r2, [r7, #12]
    a730:	4b07      	ldr	r3, [pc, #28]	(a750 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    a732:	6713      	str	r3, [r2, #112]

}
    a734:	68fb      	ldr	r3, [r7, #12]
    a736:	4618      	mov	r0, r3
    a738:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a73c:	46bd      	mov	sp, r7
    a73e:	bd80      	pop	{r7, pc}
    a740:	045fe111 	.word	0x045fe111
    a744:	4075908d 	.word	0x4075908d
    a748:	54442d18 	.word	0x54442d18
    a74c:	400921fb 	.word	0x400921fb
    a750:	00000000 	.word	0x00000000
    a754:	20000580 	.word	0x20000580

0000a758 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    a758:	b580      	push	{r7, lr}
    a75a:	b086      	sub	sp, #24
    a75c:	af00      	add	r7, sp, #0
    a75e:	60f8      	str	r0, [r7, #12]
    a760:	60b9      	str	r1, [r7, #8]
    a762:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    a764:	68fb      	ldr	r3, [r7, #12]
    a766:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a76a:	4618      	mov	r0, r3
    a76c:	f004 ff18 	bl	f5a0 <_ZN17PositionPlusAngleC1Ev>
    a770:	68f9      	ldr	r1, [r7, #12]
    a772:	f04f 0200 	mov.w	r2, #0	; 0x0
    a776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a77a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a77e:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    a782:	68fa      	ldr	r2, [r7, #12]
    a784:	4b4c      	ldr	r3, [pc, #304]	(a8b8 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a786:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    a788:	68fa      	ldr	r2, [r7, #12]
    a78a:	4b4b      	ldr	r3, [pc, #300]	(a8b8 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a78c:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    a78e:	68f9      	ldr	r1, [r7, #12]
    a790:	a245      	add	r2, pc, #276	(adr r2, a8a8 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x150>)
    a792:	ca0c      	ldmia	r2!, {r2, r3}
    a794:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a798:	68f9      	ldr	r1, [r7, #12]
    a79a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a79e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7a2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a7a6:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a7aa:	68f9      	ldr	r1, [r7, #12]
    a7ac:	f04f 0200 	mov.w	r2, #0	; 0x0
    a7b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7b4:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a7b8:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a7bc:	68fb      	ldr	r3, [r7, #12]
    a7be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a7c2:	4610      	mov	r0, r2
    a7c4:	4619      	mov	r1, r3
    a7c6:	a23a      	add	r2, pc, #232	(adr r2, a8b0 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x158>)
    a7c8:	ca0c      	ldmia	r2!, {r2, r3}
    a7ca:	f010 f959 	bl	1aa80 <__aeabi_dmul>
    a7ce:	4602      	mov	r2, r0
    a7d0:	460b      	mov	r3, r1
    a7d2:	4610      	mov	r0, r2
    a7d4:	4619      	mov	r1, r3
    a7d6:	68fb      	ldr	r3, [r7, #12]
    a7d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a7dc:	f010 fa7a 	bl	1acd4 <__aeabi_ddiv>
    a7e0:	4602      	mov	r2, r0
    a7e2:	460b      	mov	r3, r1
    a7e4:	68f9      	ldr	r1, [r7, #12]
    a7e6:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a7ea:	68fb      	ldr	r3, [r7, #12]
    a7ec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a7f0:	4610      	mov	r0, r2
    a7f2:	4619      	mov	r1, r3
    a7f4:	f04f 0200 	mov.w	r2, #0	; 0x0
    a7f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a7fc:	f010 f940 	bl	1aa80 <__aeabi_dmul>
    a800:	4602      	mov	r2, r0
    a802:	460b      	mov	r3, r1
    a804:	4610      	mov	r0, r2
    a806:	4619      	mov	r1, r3
    a808:	68fb      	ldr	r3, [r7, #12]
    a80a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a80e:	f010 fa61 	bl	1acd4 <__aeabi_ddiv>
    a812:	4602      	mov	r2, r0
    a814:	460b      	mov	r3, r1
    a816:	68f9      	ldr	r1, [r7, #12]
    a818:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a81c:	f04f 0300 	mov.w	r3, #0	; 0x0
    a820:	617b      	str	r3, [r7, #20]
    a822:	e017      	b.n	a854 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a824:	697b      	ldr	r3, [r7, #20]
    a826:	68fa      	ldr	r2, [r7, #12]
    a828:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a82c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a830:	4413      	add	r3, r2
    a832:	f04f 0200 	mov.w	r2, #0	; 0x0
    a836:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a838:	697b      	ldr	r3, [r7, #20]
    a83a:	68fa      	ldr	r2, [r7, #12]
    a83c:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a840:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a844:	4413      	add	r3, r2
    a846:	f04f 0200 	mov.w	r2, #0	; 0x0
    a84a:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a84c:	697b      	ldr	r3, [r7, #20]
    a84e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a852:	617b      	str	r3, [r7, #20]
    a854:	697b      	ldr	r3, [r7, #20]
    a856:	2b01      	cmp	r3, #1
    a858:	dde4      	ble.n	a824 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a85a:	68fa      	ldr	r2, [r7, #12]
    a85c:	68bb      	ldr	r3, [r7, #8]
    a85e:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a860:	68fa      	ldr	r2, [r7, #12]
    a862:	687b      	ldr	r3, [r7, #4]
    a864:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a866:	4a15      	ldr	r2, [pc, #84]	(a8bc <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x164>)
    a868:	68fb      	ldr	r3, [r7, #12]
    a86a:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a86c:	68f9      	ldr	r1, [r7, #12]
    a86e:	f04f 0200 	mov.w	r2, #0	; 0x0
    a872:	f04f 0300 	mov.w	r3, #0	; 0x0
    a876:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a87a:	68f9      	ldr	r1, [r7, #12]
    a87c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a880:	f04f 0300 	mov.w	r3, #0	; 0x0
    a884:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a888:	68f9      	ldr	r1, [r7, #12]
    a88a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a88e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a892:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a896:	68fa      	ldr	r2, [r7, #12]
    a898:	4b07      	ldr	r3, [pc, #28]	(a8b8 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a89a:	6713      	str	r3, [r2, #112]

}
    a89c:	68fb      	ldr	r3, [r7, #12]
    a89e:	4618      	mov	r0, r3
    a8a0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a8a4:	46bd      	mov	sp, r7
    a8a6:	bd80      	pop	{r7, pc}
    a8a8:	045fe111 	.word	0x045fe111
    a8ac:	4075908d 	.word	0x4075908d
    a8b0:	54442d18 	.word	0x54442d18
    a8b4:	400921fb 	.word	0x400921fb
    a8b8:	00000000 	.word	0x00000000
    a8bc:	20000580 	.word	0x20000580

0000a8c0 <_ZN14PIDFilterAngleC2Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a8c0:	b480      	push	{r7}
    a8c2:	b083      	sub	sp, #12
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a8c8:	687a      	ldr	r2, [r7, #4]
    a8ca:	4b06      	ldr	r3, [pc, #24]	(a8e4 <_ZN14PIDFilterAngleC2Ev+0x24>)
    a8cc:	6013      	str	r3, [r2, #0]
    a8ce:	687a      	ldr	r2, [r7, #4]
    a8d0:	4b04      	ldr	r3, [pc, #16]	(a8e4 <_ZN14PIDFilterAngleC2Ev+0x24>)
    a8d2:	6053      	str	r3, [r2, #4]
{
}
    a8d4:	687b      	ldr	r3, [r7, #4]
    a8d6:	4618      	mov	r0, r3
    a8d8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a8dc:	46bd      	mov	sp, r7
    a8de:	bc80      	pop	{r7}
    a8e0:	4770      	bx	lr
    a8e2:	46c0      	nop			(mov r8, r8)
    a8e4:	00000000 	.word	0x00000000

0000a8e8 <_ZN14PIDFilterAngleC1Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a8e8:	b480      	push	{r7}
    a8ea:	b083      	sub	sp, #12
    a8ec:	af00      	add	r7, sp, #0
    a8ee:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a8f0:	687a      	ldr	r2, [r7, #4]
    a8f2:	4b06      	ldr	r3, [pc, #24]	(a90c <_ZN14PIDFilterAngleC1Ev+0x24>)
    a8f4:	6013      	str	r3, [r2, #0]
    a8f6:	687a      	ldr	r2, [r7, #4]
    a8f8:	4b04      	ldr	r3, [pc, #16]	(a90c <_ZN14PIDFilterAngleC1Ev+0x24>)
    a8fa:	6053      	str	r3, [r2, #4]
{
}
    a8fc:	687b      	ldr	r3, [r7, #4]
    a8fe:	4618      	mov	r0, r3
    a900:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a904:	46bd      	mov	sp, r7
    a906:	bc80      	pop	{r7}
    a908:	4770      	bx	lr
    a90a:	46c0      	nop			(mov r8, r8)
    a90c:	00000000 	.word	0x00000000

0000a910 <_ZN14PIDFilterAngle16getFilteredValueEf>:

float PIDFilterAngle::getFilteredValue(Angle erreur){
    a910:	b590      	push	{r4, r7, lr}
    a912:	b087      	sub	sp, #28
    a914:	af00      	add	r7, sp, #0
    a916:	6078      	str	r0, [r7, #4]
    a918:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_ANGLE_COEF+erreur;
    a91a:	687b      	ldr	r3, [r7, #4]
    a91c:	681b      	ldr	r3, [r3, #0]
    a91e:	4618      	mov	r0, r3
    a920:	6839      	ldr	r1, [r7, #0]
    a922:	f010 fbc3 	bl	1b0ac <__addsf3>
    a926:	4603      	mov	r3, r0
    a928:	461a      	mov	r2, r3
    a92a:	687b      	ldr	r3, [r7, #4]
    a92c:	601a      	str	r2, [r3, #0]
    Angle proportionnel = erreur;
    a92e:	683b      	ldr	r3, [r7, #0]
    a930:	60fb      	str	r3, [r7, #12]
    Angle integrale = sommeErreurs;
    a932:	687b      	ldr	r3, [r7, #4]
    a934:	681b      	ldr	r3, [r3, #0]
    a936:	613b      	str	r3, [r7, #16]
    Angle derivee = erreur - erreurPrecedente;
    a938:	687b      	ldr	r3, [r7, #4]
    a93a:	685b      	ldr	r3, [r3, #4]
    a93c:	6838      	ldr	r0, [r7, #0]
    a93e:	4619      	mov	r1, r3
    a940:	f010 fbb2 	bl	1b0a8 <__aeabi_fsub>
    a944:	4603      	mov	r3, r0
    a946:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a948:	687a      	ldr	r2, [r7, #4]
    a94a:	683b      	ldr	r3, [r7, #0]
    a94c:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a94e:	68f8      	ldr	r0, [r7, #12]
    a950:	490f      	ldr	r1, [pc, #60]	(a990 <_ZN14PIDFilterAngle16getFilteredValueEf+0x80>)
    a952:	f010 fcb3 	bl	1b2bc <__aeabi_fmul>
    a956:	4603      	mov	r3, r0
    a958:	461c      	mov	r4, r3
    a95a:	6938      	ldr	r0, [r7, #16]
    a95c:	490d      	ldr	r1, [pc, #52]	(a994 <_ZN14PIDFilterAngle16getFilteredValueEf+0x84>)
    a95e:	f010 fcad 	bl	1b2bc <__aeabi_fmul>
    a962:	4603      	mov	r3, r0
    a964:	4620      	mov	r0, r4
    a966:	4619      	mov	r1, r3
    a968:	f010 fba0 	bl	1b0ac <__addsf3>
    a96c:	4603      	mov	r3, r0
    a96e:	461c      	mov	r4, r3
    a970:	6978      	ldr	r0, [r7, #20]
    a972:	4909      	ldr	r1, [pc, #36]	(a998 <_ZN14PIDFilterAngle16getFilteredValueEf+0x88>)
    a974:	f010 fca2 	bl	1b2bc <__aeabi_fmul>
    a978:	4603      	mov	r3, r0
    a97a:	4620      	mov	r0, r4
    a97c:	4619      	mov	r1, r3
    a97e:	f010 fb95 	bl	1b0ac <__addsf3>
    a982:	4603      	mov	r3, r0
}
    a984:	4618      	mov	r0, r3
    a986:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a98a:	46bd      	mov	sp, r7
    a98c:	bd90      	pop	{r4, r7, pc}
    a98e:	46c0      	nop			(mov r8, r8)
    a990:	42960000 	.word	0x42960000
    a994:	3f333333 	.word	0x3f333333
    a998:	3f000000 	.word	0x3f000000

0000a99c <_ZN17PIDFilterDistanceC2Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a99c:	b480      	push	{r7}
    a99e:	b083      	sub	sp, #12
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a9a4:	687a      	ldr	r2, [r7, #4]
    a9a6:	4b06      	ldr	r3, [pc, #24]	(a9c0 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a9a8:	6013      	str	r3, [r2, #0]
    a9aa:	687a      	ldr	r2, [r7, #4]
    a9ac:	4b04      	ldr	r3, [pc, #16]	(a9c0 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a9ae:	6053      	str	r3, [r2, #4]
{
}
    a9b0:	687b      	ldr	r3, [r7, #4]
    a9b2:	4618      	mov	r0, r3
    a9b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a9b8:	46bd      	mov	sp, r7
    a9ba:	bc80      	pop	{r7}
    a9bc:	4770      	bx	lr
    a9be:	46c0      	nop			(mov r8, r8)
    a9c0:	00000000 	.word	0x00000000

0000a9c4 <_ZN17PIDFilterDistanceC1Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a9c4:	b480      	push	{r7}
    a9c6:	b083      	sub	sp, #12
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a9cc:	687a      	ldr	r2, [r7, #4]
    a9ce:	4b06      	ldr	r3, [pc, #24]	(a9e8 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a9d0:	6013      	str	r3, [r2, #0]
    a9d2:	687a      	ldr	r2, [r7, #4]
    a9d4:	4b04      	ldr	r3, [pc, #16]	(a9e8 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a9d6:	6053      	str	r3, [r2, #4]
{
}
    a9d8:	687b      	ldr	r3, [r7, #4]
    a9da:	4618      	mov	r0, r3
    a9dc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a9e0:	46bd      	mov	sp, r7
    a9e2:	bc80      	pop	{r7}
    a9e4:	4770      	bx	lr
    a9e6:	46c0      	nop			(mov r8, r8)
    a9e8:	00000000 	.word	0x00000000

0000a9ec <_ZN17PIDFilterDistance16getFilteredValueEf>:

float PIDFilterDistance::getFilteredValue(Distance erreur){
    a9ec:	b590      	push	{r4, r7, lr}
    a9ee:	b087      	sub	sp, #28
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	6078      	str	r0, [r7, #4]
    a9f4:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_LINEAIRE_COEF+erreur;
    a9f6:	687b      	ldr	r3, [r7, #4]
    a9f8:	681b      	ldr	r3, [r3, #0]
    a9fa:	4618      	mov	r0, r3
    a9fc:	6839      	ldr	r1, [r7, #0]
    a9fe:	f010 fb55 	bl	1b0ac <__addsf3>
    aa02:	4603      	mov	r3, r0
    aa04:	461a      	mov	r2, r3
    aa06:	687b      	ldr	r3, [r7, #4]
    aa08:	601a      	str	r2, [r3, #0]
    Distance proportionnel = erreur;
    aa0a:	683b      	ldr	r3, [r7, #0]
    aa0c:	60fb      	str	r3, [r7, #12]
    Distance integrale = sommeErreurs;
    aa0e:	687b      	ldr	r3, [r7, #4]
    aa10:	681b      	ldr	r3, [r3, #0]
    aa12:	613b      	str	r3, [r7, #16]
    Distance derivee = erreur - erreurPrecedente;
    aa14:	687b      	ldr	r3, [r7, #4]
    aa16:	685b      	ldr	r3, [r3, #4]
    aa18:	6838      	ldr	r0, [r7, #0]
    aa1a:	4619      	mov	r1, r3
    aa1c:	f010 fb44 	bl	1b0a8 <__aeabi_fsub>
    aa20:	4603      	mov	r3, r0
    aa22:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    aa24:	687a      	ldr	r2, [r7, #4]
    aa26:	683b      	ldr	r3, [r7, #0]
    aa28:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    aa2a:	68f8      	ldr	r0, [r7, #12]
    aa2c:	490f      	ldr	r1, [pc, #60]	(aa6c <_ZN17PIDFilterDistance16getFilteredValueEf+0x80>)
    aa2e:	f010 fc45 	bl	1b2bc <__aeabi_fmul>
    aa32:	4603      	mov	r3, r0
    aa34:	461c      	mov	r4, r3
    aa36:	6938      	ldr	r0, [r7, #16]
    aa38:	490d      	ldr	r1, [pc, #52]	(aa70 <_ZN17PIDFilterDistance16getFilteredValueEf+0x84>)
    aa3a:	f010 fc3f 	bl	1b2bc <__aeabi_fmul>
    aa3e:	4603      	mov	r3, r0
    aa40:	4620      	mov	r0, r4
    aa42:	4619      	mov	r1, r3
    aa44:	f010 fb32 	bl	1b0ac <__addsf3>
    aa48:	4603      	mov	r3, r0
    aa4a:	461c      	mov	r4, r3
    aa4c:	6978      	ldr	r0, [r7, #20]
    aa4e:	4909      	ldr	r1, [pc, #36]	(aa74 <_ZN17PIDFilterDistance16getFilteredValueEf+0x88>)
    aa50:	f010 fc34 	bl	1b2bc <__aeabi_fmul>
    aa54:	4603      	mov	r3, r0
    aa56:	4620      	mov	r0, r4
    aa58:	4619      	mov	r1, r3
    aa5a:	f010 fb27 	bl	1b0ac <__addsf3>
    aa5e:	4603      	mov	r3, r0
}
    aa60:	4618      	mov	r0, r3
    aa62:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    aa66:	46bd      	mov	sp, r7
    aa68:	bd90      	pop	{r4, r7, pc}
    aa6a:	46c0      	nop			(mov r8, r8)
    aa6c:	3e4ccccd 	.word	0x3e4ccccd
    aa70:	3ba3d70a 	.word	0x3ba3d70a
    aa74:	3f333333 	.word	0x3f333333

0000aa78 <_ZN5Debug3runEv>:
//#include "krabipacket.h"

// DMA
#define ADC3_DR_ADDRESS     ((uint32_t)0x4001224C)

void Debug::run()
    aa78:	b480      	push	{r7}
    aa7a:	af00      	add	r7, sp, #0
{
    // test run
}
    aa7c:	46bd      	mov	sp, r7
    aa7e:	bc80      	pop	{r7}
    aa80:	4770      	bx	lr
    aa82:	46c0      	nop			(mov r8, r8)

0000aa84 <_ZN5Debug27__ADCSampleF4_adc_configureEv>:
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    }
}

void Debug::__ADCSampleF4_adc_configure()
    aa84:	b480      	push	{r7}
    aa86:	af00      	add	r7, sp, #0
    //Enable ADC conversion
    ADC_Cmd(ADC1,ENABLE);
    //Select the channel to be read from
    ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
#endif
}
    aa88:	46bd      	mov	sp, r7
    aa8a:	bc80      	pop	{r7}
    aa8c:	4770      	bx	lr
    aa8e:	46c0      	nop			(mov r8, r8)

0000aa90 <_ZN5Debug25__ADCSampleF4_adc_convertEv>:

int Debug::__ADCSampleF4_adc_convert(){
    aa90:	b480      	push	{r7}
    aa92:	b083      	sub	sp, #12
    aa94:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx)
    ADC_SoftwareStartConv(ADC1);//Start the conversion
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}
    aa96:	f107 070c 	add.w	r7, r7, #12	; 0xc
    aa9a:	46bd      	mov	sp, r7
    aa9c:	bc80      	pop	{r7}
    aa9e:	4770      	bx	lr

0000aaa0 <_ZN5Debug15testADCSampleF4Ev>:
}

/**
    @brief Read the PC0 pin
*/
void Debug::testADCSampleF4()
    aaa0:	b580      	push	{r7, lr}
    aaa2:	b082      	sub	sp, #8
    aaa4:	af00      	add	r7, sp, #0
{
    __ADCSampleF4_adc_configure();//Start configuration
    aaa6:	f7ff ffed 	bl	aa84 <_ZN5Debug27__ADCSampleF4_adc_configureEv>

    int convertedValue = -1;
    aaaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aaae:	607b      	str	r3, [r7, #4]
    while(true)
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    aab0:	f7ff ffee 	bl	aa90 <_ZN5Debug25__ADCSampleF4_adc_convertEv>
    aab4:	4603      	mov	r3, r0
    aab6:	607b      	str	r3, [r7, #4]
    aab8:	e7fa      	b.n	aab0 <_ZN5Debug15testADCSampleF4Ev+0x10>
    aaba:	46c0      	nop			(mov r8, r8)

0000aabc <_ZN5Debug10testSharpsEv>:
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}

void Debug::testSharps()
    aabc:	b480      	push	{r7}
    aabe:	af00      	add	r7, sp, #0
        for (int i = 0; i < 1000; i++)
        {
        }*/
  //  }

}
    aac0:	46bd      	mov	sp, r7
    aac2:	bc80      	pop	{r7}
    aac4:	4770      	bx	lr
    aac6:	46c0      	nop			(mov r8, r8)

0000aac8 <_ZN5Debug19testADC_DMASampleF4Ev>:


//__IO uint32_t ADC3ConvertedValue[4];
__IO uint16_t ADC3ConvertedValueN = 0;

void Debug::testADC_DMASampleF4()
    aac8:	b480      	push	{r7}
    aaca:	af00      	add	r7, sp, #0
    while(true)
    {
        convertedValue = ADC3ConvertedValueN;//Read the ADC converted value
    }
#endif
}
    aacc:	46bd      	mov	sp, r7
    aace:	bc80      	pop	{r7}
    aad0:	4770      	bx	lr
    aad2:	46c0      	nop			(mov r8, r8)

0000aad4 <_ZN5Debug22__ADC_DMASampleF4_initEv>:

void Debug::__ADC_DMASampleF4_init(void)
    aad4:	b480      	push	{r7}
    aad6:	af00      	add	r7, sp, #0
    ADC_DMACmd(ADC3, ENABLE);

    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}
    aad8:	46bd      	mov	sp, r7
    aada:	bc80      	pop	{r7}
    aadc:	4770      	bx	lr
    aade:	46c0      	nop			(mov r8, r8)

0000aae0 <_ZN5Debug10testRemoteEv>:
        else
            Led::setOn(0);
    }
}

void Debug::testRemote()
    aae0:	b580      	push	{r7, lr}
    aae2:	b082      	sub	sp, #8
    aae4:	af00      	add	r7, sp, #0
{
    Remote::getSingleton();
    aae6:	f002 fb9f 	bl	d228 <_ZN6Remote12getSingletonEv>
//    packet.add(6);
//    packet.add(2048);

//    Remote::getSingleton()->sendData(&packet);

    int timer = 0;
    aaea:	f04f 0300 	mov.w	r3, #0	; 0x0
    aaee:	607b      	str	r3, [r7, #4]
    while(true)
    {
        if (Remote::getSingleton()->dataAvailable()) {
    aaf0:	f002 fb9a 	bl	d228 <_ZN6Remote12getSingletonEv>
    aaf4:	4603      	mov	r3, r0
    aaf6:	4618      	mov	r0, r3
    aaf8:	f002 fa56 	bl	cfa8 <_ZN6Remote13dataAvailableEv>
    aafc:	4603      	mov	r3, r0
    aafe:	2b00      	cmp	r3, #0
    ab00:	d009      	beq.n	ab16 <_ZN5Debug10testRemoteEv+0x36>
            Remote::getSingleton()->receiveData();
    ab02:	f002 fb91 	bl	d228 <_ZN6Remote12getSingletonEv>
    ab06:	4603      	mov	r3, r0
    ab08:	4618      	mov	r0, r3
    ab0a:	f002 fa63 	bl	cfd4 <_ZN6Remote11receiveDataEv>
            Led::toggle(0);
    ab0e:	f04f 0000 	mov.w	r0, #0	; 0x0
    ab12:	f001 fdc1 	bl	c698 <_ZN3Led6toggleEi>
        }

        if (timer==0) {
    ab16:	687b      	ldr	r3, [r7, #4]
    ab18:	2b00      	cmp	r3, #0
    ab1a:	d10b      	bne.n	ab34 <_ZN5Debug10testRemoteEv+0x54>
            Remote::getSingleton()->sendData('a');
    ab1c:	f002 fb84 	bl	d228 <_ZN6Remote12getSingletonEv>
    ab20:	4603      	mov	r3, r0
    ab22:	4618      	mov	r0, r3
    ab24:	f04f 0161 	mov.w	r1, #97	; 0x61
    ab28:	f002 fa98 	bl	d05c <_ZN6Remote8sendDataEi>
            Led::toggle(0);
    ab2c:	f04f 0000 	mov.w	r0, #0	; 0x0
    ab30:	f001 fdb2 	bl	c698 <_ZN3Led6toggleEi>
        }

        timer++;
    ab34:	687b      	ldr	r3, [r7, #4]
    ab36:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ab3a:	607b      	str	r3, [r7, #4]
        if (timer==1000000)
    ab3c:	687a      	ldr	r2, [r7, #4]
    ab3e:	4b03      	ldr	r3, [pc, #12]	(ab4c <_ZN5Debug10testRemoteEv+0x6c>)
    ab40:	429a      	cmp	r2, r3
    ab42:	d1d5      	bne.n	aaf0 <_ZN5Debug10testRemoteEv+0x10>
            timer = 0;
    ab44:	f04f 0300 	mov.w	r3, #0	; 0x0
    ab48:	607b      	str	r3, [r7, #4]
    ab4a:	e7d1      	b.n	aaf0 <_ZN5Debug10testRemoteEv+0x10>
    ab4c:	000f4240 	.word	0x000f4240

0000ab50 <_ZN5Debug11testTiretteEP7Tirette>:

        for(int i=0; i<10000000; i++);
    }*/
}

void Debug::testTirette(Tirette* t)
    ab50:	b580      	push	{r7, lr}
    ab52:	b082      	sub	sp, #8
    ab54:	af00      	add	r7, sp, #0
    ab56:	6078      	str	r0, [r7, #4]
{
    while(true)
    {
        if (t->enlevee())
    ab58:	6878      	ldr	r0, [r7, #4]
    ab5a:	f002 ffa9 	bl	dab0 <_ZNK7Tirette7enleveeEv>
    ab5e:	4603      	mov	r3, r0
    ab60:	2b00      	cmp	r3, #0
    ab62:	d004      	beq.n	ab6e <_ZN5Debug11testTiretteEP7Tirette+0x1e>
            Led::setOff(0);
    ab64:	f04f 0000 	mov.w	r0, #0	; 0x0
    ab68:	f001 fd26 	bl	c5b8 <_ZN3Led6setOffEi>
    ab6c:	e7f4      	b.n	ab58 <_ZN5Debug11testTiretteEP7Tirette+0x8>
        else
            Led::setOn(0);
    ab6e:	f04f 0000 	mov.w	r0, #0	; 0x0
    ab72:	f001 fd61 	bl	c638 <_ZN3Led5setOnEi>
    ab76:	e7ef      	b.n	ab58 <_ZN5Debug11testTiretteEP7Tirette+0x8>

0000ab78 <_ZN5Debug13testContainerEv>:

        for(int i=0; i<10000000; i++);
    }
}

void Debug::testContainer()
    ab78:	b580      	push	{r7, lr}
    ab7a:	b084      	sub	sp, #16
    ab7c:	af00      	add	r7, sp, #0
{
    Container::getSingleton();
    ab7e:	f7fb f959 	bl	5e34 <_ZN9Container12getSingletonEv>
    BrasLateraux::initBrasLateraux();
    ab82:	f7fa fd85 	bl	5690 <_ZN12BrasLateraux16initBrasLaterauxEv>

    while(true)
    {
        Container::getSingleton()->open();
    ab86:	f7fb f955 	bl	5e34 <_ZN9Container12getSingletonEv>
    ab8a:	4603      	mov	r3, r0
    ab8c:	4618      	mov	r0, r3
    ab8e:	f7fb f8f3 	bl	5d78 <_ZN9Container4openEv>
        BrasLateraux::getLeft()->expand();
    ab92:	f7fa fe15 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    ab96:	4603      	mov	r3, r0
    ab98:	4618      	mov	r0, r3
    ab9a:	f7fa fd39 	bl	5610 <_ZN12BrasLateraux6expandEv>
        BrasLateraux::getRight()->expand();
    ab9e:	f7fa fdff 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    aba2:	4603      	mov	r3, r0
    aba4:	4618      	mov	r0, r3
    aba6:	f7fa fd33 	bl	5610 <_ZN12BrasLateraux6expandEv>
        Led::toggle(0);
    abaa:	f04f 0000 	mov.w	r0, #0	; 0x0
    abae:	f001 fd73 	bl	c698 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    abb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    abb6:	607b      	str	r3, [r7, #4]
    abb8:	e003      	b.n	abc2 <_ZN5Debug13testContainerEv+0x4a>
    abba:	687b      	ldr	r3, [r7, #4]
    abbc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    abc0:	607b      	str	r3, [r7, #4]
    abc2:	687a      	ldr	r2, [r7, #4]
    abc4:	4b20      	ldr	r3, [pc, #128]	(ac48 <_ZN5Debug13testContainerEv+0xd0>)
    abc6:	429a      	cmp	r2, r3
    abc8:	ddf7      	ble.n	abba <_ZN5Debug13testContainerEv+0x42>

        BrasLateraux::getLeft()->front();
    abca:	f7fa fdf9 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    abce:	4603      	mov	r3, r0
    abd0:	4618      	mov	r0, r3
    abd2:	f7fa fcfd 	bl	55d0 <_ZN12BrasLateraux5frontEv>
        BrasLateraux::getRight()->front();
    abd6:	f7fa fde3 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    abda:	4603      	mov	r3, r0
    abdc:	4618      	mov	r0, r3
    abde:	f7fa fcf7 	bl	55d0 <_ZN12BrasLateraux5frontEv>
        Led::toggle(0);
    abe2:	f04f 0000 	mov.w	r0, #0	; 0x0
    abe6:	f001 fd57 	bl	c698 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    abea:	f04f 0300 	mov.w	r3, #0	; 0x0
    abee:	60bb      	str	r3, [r7, #8]
    abf0:	e003      	b.n	abfa <_ZN5Debug13testContainerEv+0x82>
    abf2:	68bb      	ldr	r3, [r7, #8]
    abf4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    abf8:	60bb      	str	r3, [r7, #8]
    abfa:	68ba      	ldr	r2, [r7, #8]
    abfc:	4b12      	ldr	r3, [pc, #72]	(ac48 <_ZN5Debug13testContainerEv+0xd0>)
    abfe:	429a      	cmp	r2, r3
    ac00:	ddf7      	ble.n	abf2 <_ZN5Debug13testContainerEv+0x7a>

        Container::getSingleton()->close();
    ac02:	f7fb f917 	bl	5e34 <_ZN9Container12getSingletonEv>
    ac06:	4603      	mov	r3, r0
    ac08:	4618      	mov	r0, r3
    ac0a:	f7fb f8a5 	bl	5d58 <_ZN9Container5closeEv>
        BrasLateraux::getLeft()->collapse();
    ac0e:	f7fa fdd7 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    ac12:	4603      	mov	r3, r0
    ac14:	4618      	mov	r0, r3
    ac16:	f7fa fceb 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
        BrasLateraux::getRight()->collapse();
    ac1a:	f7fa fdc1 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    ac1e:	4603      	mov	r3, r0
    ac20:	4618      	mov	r0, r3
    ac22:	f7fa fce5 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
        Led::toggle(0);
    ac26:	f04f 0000 	mov.w	r0, #0	; 0x0
    ac2a:	f001 fd35 	bl	c698 <_ZN3Led6toggleEi>

        for(int i=0; i<20000000; i++);
    ac2e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ac32:	60fb      	str	r3, [r7, #12]
    ac34:	e003      	b.n	ac3e <_ZN5Debug13testContainerEv+0xc6>
    ac36:	68fb      	ldr	r3, [r7, #12]
    ac38:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ac3c:	60fb      	str	r3, [r7, #12]
    ac3e:	68fa      	ldr	r2, [r7, #12]
    ac40:	4b02      	ldr	r3, [pc, #8]	(ac4c <_ZN5Debug13testContainerEv+0xd4>)
    ac42:	429a      	cmp	r2, r3
    ac44:	ddf7      	ble.n	ac36 <_ZN5Debug13testContainerEv+0xbe>
    ac46:	e79e      	b.n	ab86 <_ZN5Debug13testContainerEv+0xe>
    ac48:	0098967f 	.word	0x0098967f
    ac4c:	01312cff 	.word	0x01312cff

0000ac50 <_ZN5Debug16testBrasLaterauxEv>:
        l += rcg->getTickValue();
        for(int i=0; i<1000000; i++);
    }
}

void Debug::testBrasLateraux()
    ac50:	b580      	push	{r7, lr}
    ac52:	b082      	sub	sp, #8
    ac54:	af00      	add	r7, sp, #0
        porteDroiteBas->goToAngle(90.0f);
        porteGaucheBas->goToAngle(90.0f);
        for (int i = 0; i < 10000000; i++);
    }*/

    BrasLateraux::initBrasLateraux();
    ac56:	f7fa fd1b 	bl	5690 <_ZN12BrasLateraux16initBrasLaterauxEv>

    while(true)
    {
        BrasLateraux::getLeft()->expand();
    ac5a:	f7fa fdb1 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    ac5e:	4603      	mov	r3, r0
    ac60:	4618      	mov	r0, r3
    ac62:	f7fa fcd5 	bl	5610 <_ZN12BrasLateraux6expandEv>
        BrasLateraux::getRight()->expand();
    ac66:	f7fa fd9b 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    ac6a:	4603      	mov	r3, r0
    ac6c:	4618      	mov	r0, r3
    ac6e:	f7fa fccf 	bl	5610 <_ZN12BrasLateraux6expandEv>
        Led::toggle(0);
    ac72:	f04f 0000 	mov.w	r0, #0	; 0x0
    ac76:	f001 fd0f 	bl	c698 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    ac7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ac7e:	603b      	str	r3, [r7, #0]
    ac80:	e003      	b.n	ac8a <_ZN5Debug16testBrasLaterauxEv+0x3a>
    ac82:	683b      	ldr	r3, [r7, #0]
    ac84:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ac88:	603b      	str	r3, [r7, #0]
    ac8a:	683a      	ldr	r2, [r7, #0]
    ac8c:	4b0f      	ldr	r3, [pc, #60]	(accc <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    ac8e:	429a      	cmp	r2, r3
    ac90:	ddf7      	ble.n	ac82 <_ZN5Debug16testBrasLaterauxEv+0x32>
        /*BrasLateral::getRight()->front();
        Led::toggle(0);

        for(int i=0; i<10000000; i++);*/

        BrasLateraux::getLeft()->collapse();
    ac92:	f7fa fd95 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    ac96:	4603      	mov	r3, r0
    ac98:	4618      	mov	r0, r3
    ac9a:	f7fa fca9 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
        BrasLateraux::getRight()->collapse();
    ac9e:	f7fa fd7f 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    aca2:	4603      	mov	r3, r0
    aca4:	4618      	mov	r0, r3
    aca6:	f7fa fca3 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
        Led::toggle(0);
    acaa:	f04f 0000 	mov.w	r0, #0	; 0x0
    acae:	f001 fcf3 	bl	c698 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    acb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    acb6:	607b      	str	r3, [r7, #4]
    acb8:	e003      	b.n	acc2 <_ZN5Debug16testBrasLaterauxEv+0x72>
    acba:	687b      	ldr	r3, [r7, #4]
    acbc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    acc0:	607b      	str	r3, [r7, #4]
    acc2:	687a      	ldr	r2, [r7, #4]
    acc4:	4b01      	ldr	r3, [pc, #4]	(accc <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    acc6:	429a      	cmp	r2, r3
    acc8:	ddf7      	ble.n	acba <_ZN5Debug16testBrasLaterauxEv+0x6a>
    acca:	e7c6      	b.n	ac5a <_ZN5Debug16testBrasLaterauxEv+0xa>
    accc:	0098967f 	.word	0x0098967f

0000acd0 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_>:
    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}

void Debug::testQuadrature(QuadratureCoderHandler* rcg, QuadratureCoderHandler* rcd)
    acd0:	b580      	push	{r7, lr}
    acd2:	b086      	sub	sp, #24
    acd4:	af00      	add	r7, sp, #0
    acd6:	6078      	str	r0, [r7, #4]
    acd8:	6039      	str	r1, [r7, #0]
{
    long r = 0, l = 0;
    acda:	f04f 0300 	mov.w	r3, #0	; 0x0
    acde:	60fb      	str	r3, [r7, #12]
    ace0:	f04f 0300 	mov.w	r3, #0	; 0x0
    ace4:	613b      	str	r3, [r7, #16]
    while(true)
    {
        r += rcd->getTickValue();
    ace6:	6838      	ldr	r0, [r7, #0]
    ace8:	f002 f892 	bl	ce10 <_ZN22QuadratureCoderHandler12getTickValueEv>
    acec:	4603      	mov	r3, r0
    acee:	b29b      	uxth	r3, r3
    acf0:	b21a      	sxth	r2, r3
    acf2:	68fb      	ldr	r3, [r7, #12]
    acf4:	4413      	add	r3, r2
    acf6:	60fb      	str	r3, [r7, #12]
        l += rcg->getTickValue();
    acf8:	6878      	ldr	r0, [r7, #4]
    acfa:	f002 f889 	bl	ce10 <_ZN22QuadratureCoderHandler12getTickValueEv>
    acfe:	4603      	mov	r3, r0
    ad00:	b29b      	uxth	r3, r3
    ad02:	b21a      	sxth	r2, r3
    ad04:	693b      	ldr	r3, [r7, #16]
    ad06:	4413      	add	r3, r2
    ad08:	613b      	str	r3, [r7, #16]
        for(int i=0; i<1000000; i++);
    ad0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad0e:	617b      	str	r3, [r7, #20]
    ad10:	e003      	b.n	ad1a <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x4a>
    ad12:	697b      	ldr	r3, [r7, #20]
    ad14:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ad18:	617b      	str	r3, [r7, #20]
    ad1a:	697a      	ldr	r2, [r7, #20]
    ad1c:	4b01      	ldr	r3, [pc, #4]	(ad24 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x54>)
    ad1e:	429a      	cmp	r2, r3
    ad20:	ddf7      	ble.n	ad12 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x42>
    ad22:	e7e0      	b.n	ace6 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x16>
    ad24:	000f423f 	.word	0x000f423f

0000ad28 <_ZN5Debug15testServoAnalogEv>:
void Debug::run()
{
    // test run
}

void Debug::testServoAnalog()
    ad28:	b580      	push	{r7, lr}
    ad2a:	b094      	sub	sp, #80
    ad2c:	af02      	add	r7, sp, #8
{
    Timer* timer1 = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    ad2e:	f04f 000c 	mov.w	r0, #12	; 0xc
    ad32:	f003 fedd 	bl	eaf0 <_Znwj>
    ad36:	4603      	mov	r3, r0
    ad38:	603b      	str	r3, [r7, #0]
    ad3a:	683b      	ldr	r3, [r7, #0]
    ad3c:	2b00      	cmp	r3, #0
    ad3e:	d00d      	beq.n	ad5c <_ZN5Debug15testServoAnalogEv+0x34>
    ad40:	f04f 0300 	mov.w	r3, #0	; 0x0
    ad44:	9300      	str	r3, [sp, #0]
    ad46:	6838      	ldr	r0, [r7, #0]
    ad48:	4955      	ldr	r1, [pc, #340]	(aea0 <_ZN5Debug15testServoAnalogEv+0x178>)
    ad4a:	f644 6220 	movw	r2, #20000	; 0x4e20
    ad4e:	f04f 0347 	mov.w	r3, #71	; 0x47
    ad52:	f002 fe41 	bl	d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    ad56:	683b      	ldr	r3, [r7, #0]
    ad58:	607b      	str	r3, [r7, #4]
    ad5a:	e001      	b.n	ad60 <_ZN5Debug15testServoAnalogEv+0x38>
    ad5c:	683b      	ldr	r3, [r7, #0]
    ad5e:	607b      	str	r3, [r7, #4]
    ad60:	687b      	ldr	r3, [r7, #4]
    ad62:	62bb      	str	r3, [r7, #40]
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
    ad64:	484e      	ldr	r0, [pc, #312]	(aea0 <_ZN5Debug15testServoAnalogEv+0x178>)
    ad66:	f04f 0101 	mov.w	r1, #1	; 0x1
    ad6a:	f7f8 f983 	bl	3074 <TIM_CtrlPWMOutputs>

    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    ad6e:	f04f 0014 	mov.w	r0, #20	; 0x14
    ad72:	f003 febd 	bl	eaf0 <_Znwj>
    ad76:	4603      	mov	r3, r0
    ad78:	60bb      	str	r3, [r7, #8]
    ad7a:	68bb      	ldr	r3, [r7, #8]
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d00b      	beq.n	ad98 <_ZN5Debug15testServoAnalogEv+0x70>
    ad80:	4b48      	ldr	r3, [pc, #288]	(aea4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    ad82:	9300      	str	r3, [sp, #0]
    ad84:	68b8      	ldr	r0, [r7, #8]
    ad86:	6ab9      	ldr	r1, [r7, #40]
    ad88:	f04f 0201 	mov.w	r2, #1	; 0x1
    ad8c:	4b46      	ldr	r3, [pc, #280]	(aea8 <_ZN5Debug15testServoAnalogEv+0x180>)
    ad8e:	f7fc fcbf 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    ad92:	68bb      	ldr	r3, [r7, #8]
    ad94:	60fb      	str	r3, [r7, #12]
    ad96:	e001      	b.n	ad9c <_ZN5Debug15testServoAnalogEv+0x74>
    ad98:	68bb      	ldr	r3, [r7, #8]
    ad9a:	60fb      	str	r3, [r7, #12]
    ad9c:	68fb      	ldr	r3, [r7, #12]
    ad9e:	62fb      	str	r3, [r7, #44]
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    ada0:	f04f 0014 	mov.w	r0, #20	; 0x14
    ada4:	f003 fea4 	bl	eaf0 <_Znwj>
    ada8:	4603      	mov	r3, r0
    adaa:	613b      	str	r3, [r7, #16]
    adac:	693b      	ldr	r3, [r7, #16]
    adae:	2b00      	cmp	r3, #0
    adb0:	d00b      	beq.n	adca <_ZN5Debug15testServoAnalogEv+0xa2>
    adb2:	4b3c      	ldr	r3, [pc, #240]	(aea4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    adb4:	9300      	str	r3, [sp, #0]
    adb6:	6938      	ldr	r0, [r7, #16]
    adb8:	6ab9      	ldr	r1, [r7, #40]
    adba:	f04f 0202 	mov.w	r2, #2	; 0x2
    adbe:	4b3a      	ldr	r3, [pc, #232]	(aea8 <_ZN5Debug15testServoAnalogEv+0x180>)
    adc0:	f7fc fca6 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    adc4:	693b      	ldr	r3, [r7, #16]
    adc6:	617b      	str	r3, [r7, #20]
    adc8:	e001      	b.n	adce <_ZN5Debug15testServoAnalogEv+0xa6>
    adca:	693b      	ldr	r3, [r7, #16]
    adcc:	617b      	str	r3, [r7, #20]
    adce:	697b      	ldr	r3, [r7, #20]
    add0:	633b      	str	r3, [r7, #48]
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    add2:	f04f 0014 	mov.w	r0, #20	; 0x14
    add6:	f003 fe8b 	bl	eaf0 <_Znwj>
    adda:	4603      	mov	r3, r0
    addc:	61bb      	str	r3, [r7, #24]
    adde:	69bb      	ldr	r3, [r7, #24]
    ade0:	2b00      	cmp	r3, #0
    ade2:	d00b      	beq.n	adfc <_ZN5Debug15testServoAnalogEv+0xd4>
    ade4:	4b2f      	ldr	r3, [pc, #188]	(aea4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    ade6:	9300      	str	r3, [sp, #0]
    ade8:	69b8      	ldr	r0, [r7, #24]
    adea:	6ab9      	ldr	r1, [r7, #40]
    adec:	f04f 0203 	mov.w	r2, #3	; 0x3
    adf0:	4b2d      	ldr	r3, [pc, #180]	(aea8 <_ZN5Debug15testServoAnalogEv+0x180>)
    adf2:	f7fc fc8d 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    adf6:	69bb      	ldr	r3, [r7, #24]
    adf8:	61fb      	str	r3, [r7, #28]
    adfa:	e001      	b.n	ae00 <_ZN5Debug15testServoAnalogEv+0xd8>
    adfc:	69bb      	ldr	r3, [r7, #24]
    adfe:	61fb      	str	r3, [r7, #28]
    ae00:	69fb      	ldr	r3, [r7, #28]
    ae02:	637b      	str	r3, [r7, #52]
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);
    ae04:	f04f 0014 	mov.w	r0, #20	; 0x14
    ae08:	f003 fe72 	bl	eaf0 <_Znwj>
    ae0c:	4603      	mov	r3, r0
    ae0e:	623b      	str	r3, [r7, #32]
    ae10:	6a3b      	ldr	r3, [r7, #32]
    ae12:	2b00      	cmp	r3, #0
    ae14:	d00b      	beq.n	ae2e <_ZN5Debug15testServoAnalogEv+0x106>
    ae16:	4b23      	ldr	r3, [pc, #140]	(aea4 <_ZN5Debug15testServoAnalogEv+0x17c>)
    ae18:	9300      	str	r3, [sp, #0]
    ae1a:	6a38      	ldr	r0, [r7, #32]
    ae1c:	6ab9      	ldr	r1, [r7, #40]
    ae1e:	f04f 0204 	mov.w	r2, #4	; 0x4
    ae22:	4b21      	ldr	r3, [pc, #132]	(aea8 <_ZN5Debug15testServoAnalogEv+0x180>)
    ae24:	f7fc fc74 	bl	7710 <_ZN5ServoC1EP5Timerhff>
    ae28:	6a3b      	ldr	r3, [r7, #32]
    ae2a:	627b      	str	r3, [r7, #36]
    ae2c:	e001      	b.n	ae32 <_ZN5Debug15testServoAnalogEv+0x10a>
    ae2e:	6a3b      	ldr	r3, [r7, #32]
    ae30:	627b      	str	r3, [r7, #36]
    ae32:	6a7b      	ldr	r3, [r7, #36]
    ae34:	63bb      	str	r3, [r7, #56]

    for(int i=0; i<2000; i++)
    ae36:	f04f 0300 	mov.w	r3, #0	; 0x0
    ae3a:	63fb      	str	r3, [r7, #60]
    ae3c:	e027      	b.n	ae8e <_ZN5Debug15testServoAnalogEv+0x166>
    {
        servo1->goToAngle(70);
    ae3e:	6af8      	ldr	r0, [r7, #44]
    ae40:	491a      	ldr	r1, [pc, #104]	(aeac <_ZN5Debug15testServoAnalogEv+0x184>)
    ae42:	f7fc fbf5 	bl	7630 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_CLOSED);
        servo3->goToAngle(BALAI_G_CLOSED);
        servo4->goToAngle(BALAI_G_CLOSED);*/
        allumerLED();
    ae46:	f001 fc4b 	bl	c6e0 <_Z10allumerLEDv>

        for(int j=0; j<10000000; j++);
    ae4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ae4e:	643b      	str	r3, [r7, #64]
    ae50:	e003      	b.n	ae5a <_ZN5Debug15testServoAnalogEv+0x132>
    ae52:	6c3b      	ldr	r3, [r7, #64]
    ae54:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ae58:	643b      	str	r3, [r7, #64]
    ae5a:	6c3a      	ldr	r2, [r7, #64]
    ae5c:	4b14      	ldr	r3, [pc, #80]	(aeb0 <_ZN5Debug15testServoAnalogEv+0x188>)
    ae5e:	429a      	cmp	r2, r3
    ae60:	ddf7      	ble.n	ae52 <_ZN5Debug15testServoAnalogEv+0x12a>

        servo1->goToAngle(165);
    ae62:	6af8      	ldr	r0, [r7, #44]
    ae64:	4913      	ldr	r1, [pc, #76]	(aeb4 <_ZN5Debug15testServoAnalogEv+0x18c>)
    ae66:	f7fc fbe3 	bl	7630 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_OPEN);
        servo3->goToAngle(BALAI_G_OPEN);
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();
    ae6a:	f001 fbdd 	bl	c628 <_Z11eteindreLEDv>

        for(int j=0; j<10000000; j++);
    ae6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ae72:	647b      	str	r3, [r7, #68]
    ae74:	e003      	b.n	ae7e <_ZN5Debug15testServoAnalogEv+0x156>
    ae76:	6c7b      	ldr	r3, [r7, #68]
    ae78:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ae7c:	647b      	str	r3, [r7, #68]
    ae7e:	6c7a      	ldr	r2, [r7, #68]
    ae80:	4b0b      	ldr	r3, [pc, #44]	(aeb0 <_ZN5Debug15testServoAnalogEv+0x188>)
    ae82:	429a      	cmp	r2, r3
    ae84:	ddf7      	ble.n	ae76 <_ZN5Debug15testServoAnalogEv+0x14e>
    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);

    for(int i=0; i<2000; i++)
    ae86:	6bfb      	ldr	r3, [r7, #60]
    ae88:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ae8c:	63fb      	str	r3, [r7, #60]
    ae8e:	6bfa      	ldr	r2, [r7, #60]
    ae90:	f240 73cf 	movw	r3, #1999	; 0x7cf
    ae94:	429a      	cmp	r2, r3
    ae96:	ddd2      	ble.n	ae3e <_ZN5Debug15testServoAnalogEv+0x116>
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();

        for(int j=0; j<10000000; j++);
    }
}
    ae98:	f107 0748 	add.w	r7, r7, #72	; 0x48
    ae9c:	46bd      	mov	sp, r7
    ae9e:	bd80      	pop	{r7, pc}
    aea0:	40012c00 	.word	0x40012c00
    aea4:	3de147ae 	.word	0x3de147ae
    aea8:	3c23d70a 	.word	0x3c23d70a
    aeac:	428c0000 	.word	0x428c0000
    aeb0:	0098967f 	.word	0x0098967f
    aeb4:	43250000 	.word	0x43250000

0000aeb8 <_Z21distancePresqueEgalesff>:
#include "distance.h"

#include <math.h>

// On vérifie qu'il y a égalité ou presque entre deux distances
bool distancePresqueEgales(Distance d1, Distance d2)
    aeb8:	b580      	push	{r7, lr}
    aeba:	b084      	sub	sp, #16
    aebc:	af00      	add	r7, sp, #0
    aebe:	60f8      	str	r0, [r7, #12]
    aec0:	60b9      	str	r1, [r7, #8]
{
    static const Distance epsilon = 10;
    return (fabs(d1 - d2) < epsilon);
    aec2:	68f8      	ldr	r0, [r7, #12]
    aec4:	68b9      	ldr	r1, [r7, #8]
    aec6:	f010 f8ef 	bl	1b0a8 <__aeabi_fsub>
    aeca:	4603      	mov	r3, r0
    aecc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    aed0:	f04f 0300 	mov.w	r3, #0	; 0x0
    aed4:	71fb      	strb	r3, [r7, #7]
    aed6:	4610      	mov	r0, r2
    aed8:	4907      	ldr	r1, [pc, #28]	(aef8 <_Z21distancePresqueEgalesff+0x40>)
    aeda:	f010 fb8b 	bl	1b5f4 <__aeabi_fcmplt>
    aede:	4603      	mov	r3, r0
    aee0:	2b00      	cmp	r3, #0
    aee2:	d002      	beq.n	aeea <_Z21distancePresqueEgalesff+0x32>
    aee4:	f04f 0301 	mov.w	r3, #1	; 0x1
    aee8:	71fb      	strb	r3, [r7, #7]
    aeea:	79fb      	ldrb	r3, [r7, #7]
}
    aeec:	4618      	mov	r0, r3
    aeee:	f107 0710 	add.w	r7, r7, #16	; 0x10
    aef2:	46bd      	mov	sp, r7
    aef4:	bd80      	pop	{r7, pc}
    aef6:	46c0      	nop			(mov r8, r8)
    aef8:	41200000 	.word	0x41200000

0000aefc <_ZN12AnalogSensor18conversionFinishedEv>:
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    #endif
}

bool AnalogSensor::conversionFinished()
    aefc:	b580      	push	{r7, lr}
    aefe:	af00      	add	r7, sp, #0
   //return DMA_GetFlagStatus(DMA1_Stream1, DMA_FLAG_TCIF1);//I have no idea what I am doing
    //TOBECONTINUED
    #ifdef STM32F40_41xxx
        return true;
    #else
        return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    af00:	f04f 0002 	mov.w	r0, #2	; 0x2
    af04:	f7f6 f97c 	bl	1200 <DMA_GetFlagStatus>
    af08:	4603      	mov	r3, r0
    af0a:	2b00      	cmp	r3, #0
    af0c:	bf0c      	ite	eq
    af0e:	2300      	moveq	r3, #0
    af10:	2301      	movne	r3, #1
    af12:	b2db      	uxtb	r3, r3
    #endif
}
    af14:	4618      	mov	r0, r3
    af16:	46bd      	mov	sp, r7
    af18:	bd80      	pop	{r7, pc}
    af1a:	46c0      	nop			(mov r8, r8)

0000af1c <_ZN12AnalogSensor15startConversionEv>:
        DMA_Cmd(DMA1_Channel1, ENABLE);
        return data;
    #endif
}

void AnalogSensor::startConversion()
    af1c:	b580      	push	{r7, lr}
    af1e:	af00      	add	r7, sp, #0
{
    #ifdef STM32F40_41xxx
        ADC_SoftwareStartConv(ADC1);
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    af20:	4803      	ldr	r0, [pc, #12]	(af30 <_ZN12AnalogSensor15startConversionEv+0x14>)
    af22:	f04f 0101 	mov.w	r1, #1	; 0x1
    af26:	f7f5 fbb7 	bl	698 <ADC_SoftwareStartConvCmd>
    #endif
}
    af2a:	46bd      	mov	sp, r7
    af2c:	bd80      	pop	{r7, pc}
    af2e:	46c0      	nop			(mov r8, r8)
    af30:	40012400 	.word	0x40012400

0000af34 <_ZN12AnalogSensor14initialiserADCEhPh>:
{
}

#ifdef ROBOTHW // pour le vrai robot

DMA_MEMORY_TYPE* AnalogSensor::initialiserADC(uint8_t nbChannel, uint8_t* channels)
    af34:	b580      	push	{r7, lr}
    af36:	b094      	sub	sp, #80
    af38:	af00      	add	r7, sp, #0
    af3a:	4603      	mov	r3, r0
    af3c:	6039      	str	r1, [r7, #0]
    af3e:	71fb      	strb	r3, [r7, #7]
        /* Start ADC3 Software Conversion */
        ADC_SoftwareStartConv(ADC3);

        return data;
    #else
        DMA_MEMORY_TYPE* data = new DMA_MEMORY_TYPE[nbChannel];
    af40:	79fb      	ldrb	r3, [r7, #7]
    af42:	ea4f 0343 	mov.w	r3, r3, lsl #1
    af46:	4618      	mov	r0, r3
    af48:	f003 fe6a 	bl	ec20 <_Znaj>
    af4c:	4603      	mov	r3, r0
    af4e:	64bb      	str	r3, [r7, #72]

        ADC_InitTypeDef ADC_InitStructure;
        // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
        ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    af50:	f04f 0300 	mov.w	r3, #0	; 0x0
    af54:	637b      	str	r3, [r7, #52]
        // On scanne tous les channels
        ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    af56:	f04f 0301 	mov.w	r3, #1	; 0x1
    af5a:	f887 3038 	strb.w	r3, [r7, #56]
        // Single conversion mode
        ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    af5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    af62:	f887 3039 	strb.w	r3, [r7, #57]
        // Pas d'external trigger (on lance la conversion à la main)
        ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    af66:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    af6a:	63fb      	str	r3, [r7, #60]
        ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    af6c:	f04f 0300 	mov.w	r3, #0	; 0x0
    af70:	643b      	str	r3, [r7, #64]
        ADC_InitStructure.ADC_NbrOfChannel = nbChannel;
    af72:	79fb      	ldrb	r3, [r7, #7]
    af74:	f887 3044 	strb.w	r3, [r7, #68]
        ADC_Init(ADC1, &ADC_InitStructure);
    af78:	f107 0334 	add.w	r3, r7, #52	; 0x34
    af7c:	483b      	ldr	r0, [pc, #236]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    af7e:	4619      	mov	r1, r3
    af80:	f7f5 fa52 	bl	428 <ADC_Init>

        // Activation du périphérique
        ADC_Cmd(ADC1, ENABLE);
    af84:	4839      	ldr	r0, [pc, #228]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    af86:	f04f 0101 	mov.w	r1, #1	; 0x1
    af8a:	f7f5 facf 	bl	52c <ADC_Cmd>

        // Calibrage
        // On remet la calibration à zéro
        ADC_ResetCalibration(ADC1);
    af8e:	4837      	ldr	r0, [pc, #220]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    af90:	f7f5 fb2a 	bl	5e8 <ADC_ResetCalibration>
        while(ADC_GetResetCalibrationStatus(ADC1));
    af94:	4835      	ldr	r0, [pc, #212]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    af96:	f7f5 fb37 	bl	608 <ADC_GetResetCalibrationStatus>
    af9a:	4603      	mov	r3, r0
    af9c:	2b00      	cmp	r3, #0
    af9e:	bf0c      	ite	eq
    afa0:	2300      	moveq	r3, #0
    afa2:	2301      	movne	r3, #1
    afa4:	b2db      	uxtb	r3, r3
    afa6:	2b00      	cmp	r3, #0
    afa8:	d1f4      	bne.n	af94 <_ZN12AnalogSensor14initialiserADCEhPh+0x60>
        // On lance la calibration
        ADC_StartCalibration(ADC1);
    afaa:	4830      	ldr	r0, [pc, #192]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    afac:	f7f5 fb48 	bl	640 <ADC_StartCalibration>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));
    afb0:	482e      	ldr	r0, [pc, #184]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    afb2:	f7f5 fb55 	bl	660 <ADC_GetCalibrationStatus>
    afb6:	4603      	mov	r3, r0
    afb8:	2b00      	cmp	r3, #0
    afba:	bf0c      	ite	eq
    afbc:	2300      	moveq	r3, #0
    afbe:	2301      	movne	r3, #1
    afc0:	b2db      	uxtb	r3, r3
    afc2:	2b00      	cmp	r3, #0
    afc4:	d1f4      	bne.n	afb0 <_ZN12AnalogSensor14initialiserADCEhPh+0x7c>

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    afc6:	f04f 0300 	mov.w	r3, #0	; 0x0
    afca:	64fb      	str	r3, [r7, #76]
    afcc:	e013      	b.n	aff6 <_ZN12AnalogSensor14initialiserADCEhPh+0xc2>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);
    afce:	6cfa      	ldr	r2, [r7, #76]
    afd0:	683b      	ldr	r3, [r7, #0]
    afd2:	4413      	add	r3, r2
    afd4:	781a      	ldrb	r2, [r3, #0]
    afd6:	6cfb      	ldr	r3, [r7, #76]
    afd8:	b2db      	uxtb	r3, r3
    afda:	f103 0301 	add.w	r3, r3, #1	; 0x1
    afde:	b2db      	uxtb	r3, r3
    afe0:	4822      	ldr	r0, [pc, #136]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    afe2:	4611      	mov	r1, r2
    afe4:	461a      	mov	r2, r3
    afe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    afea:	f7f5 fbcf 	bl	78c <ADC_RegularChannelConfig>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    afee:	6cfb      	ldr	r3, [r7, #76]
    aff0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aff4:	64fb      	str	r3, [r7, #76]
    aff6:	79fa      	ldrb	r2, [r7, #7]
    aff8:	6cfb      	ldr	r3, [r7, #76]
    affa:	429a      	cmp	r2, r3
    affc:	dce7      	bgt.n	afce <_ZN12AnalogSensor14initialiserADCEhPh+0x9a>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);

        // active le transfert des résultats de conversion en SRAM
        ADC_DMACmd(ADC1, ENABLE);
    affe:	481b      	ldr	r0, [pc, #108]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    b000:	f04f 0101 	mov.w	r1, #1	; 0x1
    b004:	f7f5 faae 	bl	564 <ADC_DMACmd>

        DMA_InitTypeDef DMA_InitStructure;
        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    b008:	4b18      	ldr	r3, [pc, #96]	(b06c <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    b00a:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    b00e:	60bb      	str	r3, [r7, #8]
        DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    b010:	6cbb      	ldr	r3, [r7, #72]
    b012:	60fb      	str	r3, [r7, #12]
        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    b014:	f04f 0300 	mov.w	r3, #0	; 0x0
    b018:	613b      	str	r3, [r7, #16]
        DMA_InitStructure.DMA_BufferSize = nbChannel; // Nombre de conversions à transférer
    b01a:	79fb      	ldrb	r3, [r7, #7]
    b01c:	617b      	str	r3, [r7, #20]
        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    b01e:	f04f 0300 	mov.w	r3, #0	; 0x0
    b022:	61bb      	str	r3, [r7, #24]
        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    b024:	f04f 0380 	mov.w	r3, #128	; 0x80
    b028:	61fb      	str	r3, [r7, #28]
        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    b02a:	f44f 7300 	mov.w	r3, #512	; 0x200
    b02e:	623b      	str	r3, [r7, #32]
        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    b030:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b034:	627b      	str	r3, [r7, #36]
        // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
        // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
        DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    b036:	f04f 0320 	mov.w	r3, #32	; 0x20
    b03a:	62bb      	str	r3, [r7, #40]
        DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    b03c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    b040:	62fb      	str	r3, [r7, #44]
        // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
        DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    b042:	f04f 0300 	mov.w	r3, #0	; 0x0
    b046:	633b      	str	r3, [r7, #48]
        // Channel1 : cf p.192 tableau 58
        DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    b048:	f107 0308 	add.w	r3, r7, #8	; 0x8
    b04c:	4808      	ldr	r0, [pc, #32]	(b070 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    b04e:	4619      	mov	r1, r3
    b050:	f7f6 f80e 	bl	1070 <DMA_Init>
        DMA_Cmd(DMA1_Channel1, ENABLE);
    b054:	4806      	ldr	r0, [pc, #24]	(b070 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    b056:	f04f 0101 	mov.w	r1, #1	; 0x1
    b05a:	f7f6 f887 	bl	116c <DMA_Cmd>
        return data;
    b05e:	6cbb      	ldr	r3, [r7, #72]
    #endif
}
    b060:	4618      	mov	r0, r3
    b062:	f107 0750 	add.w	r7, r7, #80	; 0x50
    b066:	46bd      	mov	sp, r7
    b068:	bd80      	pop	{r7, pc}
    b06a:	46c0      	nop			(mov r8, r8)
    b06c:	40012400 	.word	0x40012400
    b070:	40020008 	.word	0x40020008

0000b074 <_ZN12AnalogSensorD0Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    b074:	b580      	push	{r7, lr}
    b076:	b082      	sub	sp, #8
    b078:	af00      	add	r7, sp, #0
    b07a:	6078      	str	r0, [r7, #4]
    b07c:	687a      	ldr	r2, [r7, #4]
    b07e:	4b0a      	ldr	r3, [pc, #40]	(b0a8 <_ZN12AnalogSensorD0Ev+0x34>)
    b080:	6013      	str	r3, [r2, #0]
{
}
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	4618      	mov	r0, r3
    b086:	f7fb f871 	bl	616c <_ZN6SensorD2Ev>
    b08a:	f04f 0301 	mov.w	r3, #1	; 0x1
    b08e:	b2db      	uxtb	r3, r3
    b090:	2b00      	cmp	r3, #0
    b092:	d002      	beq.n	b09a <_ZN12AnalogSensorD0Ev+0x26>
    b094:	6878      	ldr	r0, [r7, #4]
    b096:	f003 fdd1 	bl	ec3c <_ZdlPv>
    b09a:	687b      	ldr	r3, [r7, #4]
    b09c:	4618      	mov	r0, r3
    b09e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b0a2:	46bd      	mov	sp, r7
    b0a4:	bd80      	pop	{r7, pc}
    b0a6:	46c0      	nop			(mov r8, r8)
    b0a8:	00022278 	.word	0x00022278

0000b0ac <_ZN12AnalogSensorD1Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    b0ac:	b580      	push	{r7, lr}
    b0ae:	b082      	sub	sp, #8
    b0b0:	af00      	add	r7, sp, #0
    b0b2:	6078      	str	r0, [r7, #4]
    b0b4:	687a      	ldr	r2, [r7, #4]
    b0b6:	4b0a      	ldr	r3, [pc, #40]	(b0e0 <_ZN12AnalogSensorD1Ev+0x34>)
    b0b8:	6013      	str	r3, [r2, #0]
{
}
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	4618      	mov	r0, r3
    b0be:	f7fb f855 	bl	616c <_ZN6SensorD2Ev>
    b0c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    b0c6:	b2db      	uxtb	r3, r3
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	d002      	beq.n	b0d2 <_ZN12AnalogSensorD1Ev+0x26>
    b0cc:	6878      	ldr	r0, [r7, #4]
    b0ce:	f003 fdb5 	bl	ec3c <_ZdlPv>
    b0d2:	687b      	ldr	r3, [r7, #4]
    b0d4:	4618      	mov	r0, r3
    b0d6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b0da:	46bd      	mov	sp, r7
    b0dc:	bd80      	pop	{r7, pc}
    b0de:	46c0      	nop			(mov r8, r8)
    b0e0:	00022278 	.word	0x00022278

0000b0e4 <_ZN12AnalogSensorD2Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    b0e4:	b580      	push	{r7, lr}
    b0e6:	b082      	sub	sp, #8
    b0e8:	af00      	add	r7, sp, #0
    b0ea:	6078      	str	r0, [r7, #4]
    b0ec:	687a      	ldr	r2, [r7, #4]
    b0ee:	4b0a      	ldr	r3, [pc, #40]	(b118 <_ZN12AnalogSensorD2Ev+0x34>)
    b0f0:	6013      	str	r3, [r2, #0]
{
}
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	4618      	mov	r0, r3
    b0f6:	f7fb f839 	bl	616c <_ZN6SensorD2Ev>
    b0fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    b0fe:	b2db      	uxtb	r3, r3
    b100:	2b00      	cmp	r3, #0
    b102:	d002      	beq.n	b10a <_ZN12AnalogSensorD2Ev+0x26>
    b104:	6878      	ldr	r0, [r7, #4]
    b106:	f003 fd99 	bl	ec3c <_ZdlPv>
    b10a:	687b      	ldr	r3, [r7, #4]
    b10c:	4618      	mov	r0, r3
    b10e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b112:	46bd      	mov	sp, r7
    b114:	bd80      	pop	{r7, pc}
    b116:	46c0      	nop			(mov r8, r8)
    b118:	00022278 	.word	0x00022278

0000b11c <_ZN12AnalogSensorC1EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    b11c:	b580      	push	{r7, lr}
    b11e:	b084      	sub	sp, #16
    b120:	af00      	add	r7, sp, #0
    b122:	60f8      	str	r0, [r7, #12]
    b124:	460b      	mov	r3, r1
    b126:	607a      	str	r2, [r7, #4]
    b128:	72fb      	strb	r3, [r7, #11]
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	4618      	mov	r0, r3
    b12e:	f7fa ffcd 	bl	60cc <_ZN6SensorC2Ev>
    b132:	68fa      	ldr	r2, [r7, #12]
    b134:	4b0c      	ldr	r3, [pc, #48]	(b168 <_ZN12AnalogSensorC1EhPt+0x4c>)
    b136:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    b138:	68fa      	ldr	r2, [r7, #12]
    b13a:	7afb      	ldrb	r3, [r7, #11]
    b13c:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    b13e:	4b0b      	ldr	r3, [pc, #44]	(b16c <_ZN12AnalogSensorC1EhPt+0x50>)
    b140:	681b      	ldr	r3, [r3, #0]
    b142:	ea4f 0243 	mov.w	r2, r3, lsl #1
    b146:	687b      	ldr	r3, [r7, #4]
    b148:	441a      	add	r2, r3
    b14a:	68fb      	ldr	r3, [r7, #12]
    b14c:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    b14e:	4b07      	ldr	r3, [pc, #28]	(b16c <_ZN12AnalogSensorC1EhPt+0x50>)
    b150:	681b      	ldr	r3, [r3, #0]
    b152:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b156:	4b05      	ldr	r3, [pc, #20]	(b16c <_ZN12AnalogSensorC1EhPt+0x50>)
    b158:	601a      	str	r2, [r3, #0]
}
    b15a:	68fb      	ldr	r3, [r7, #12]
    b15c:	4618      	mov	r0, r3
    b15e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b162:	46bd      	mov	sp, r7
    b164:	bd80      	pop	{r7, pc}
    b166:	46c0      	nop			(mov r8, r8)
    b168:	00022278 	.word	0x00022278
    b16c:	20000588 	.word	0x20000588

0000b170 <_ZN12AnalogSensorC2EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    b170:	b580      	push	{r7, lr}
    b172:	b084      	sub	sp, #16
    b174:	af00      	add	r7, sp, #0
    b176:	60f8      	str	r0, [r7, #12]
    b178:	460b      	mov	r3, r1
    b17a:	607a      	str	r2, [r7, #4]
    b17c:	72fb      	strb	r3, [r7, #11]
    b17e:	68fb      	ldr	r3, [r7, #12]
    b180:	4618      	mov	r0, r3
    b182:	f7fa ffa3 	bl	60cc <_ZN6SensorC2Ev>
    b186:	68fa      	ldr	r2, [r7, #12]
    b188:	4b0c      	ldr	r3, [pc, #48]	(b1bc <_ZN12AnalogSensorC2EhPt+0x4c>)
    b18a:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    b18c:	68fa      	ldr	r2, [r7, #12]
    b18e:	7afb      	ldrb	r3, [r7, #11]
    b190:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    b192:	4b0b      	ldr	r3, [pc, #44]	(b1c0 <_ZN12AnalogSensorC2EhPt+0x50>)
    b194:	681b      	ldr	r3, [r3, #0]
    b196:	ea4f 0243 	mov.w	r2, r3, lsl #1
    b19a:	687b      	ldr	r3, [r7, #4]
    b19c:	441a      	add	r2, r3
    b19e:	68fb      	ldr	r3, [r7, #12]
    b1a0:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    b1a2:	4b07      	ldr	r3, [pc, #28]	(b1c0 <_ZN12AnalogSensorC2EhPt+0x50>)
    b1a4:	681b      	ldr	r3, [r3, #0]
    b1a6:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b1aa:	4b05      	ldr	r3, [pc, #20]	(b1c0 <_ZN12AnalogSensorC2EhPt+0x50>)
    b1ac:	601a      	str	r2, [r3, #0]
}
    b1ae:	68fb      	ldr	r3, [r7, #12]
    b1b0:	4618      	mov	r0, r3
    b1b2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b1b6:	46bd      	mov	sp, r7
    b1b8:	bd80      	pop	{r7, pc}
    b1ba:	46c0      	nop			(mov r8, r8)
    b1bc:	00022278 	.word	0x00022278
    b1c0:	20000588 	.word	0x20000588

0000b1c4 <_Z12ax12ChecksumaPi>:
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
    b1c4:	b480      	push	{r7}
    b1c6:	b085      	sub	sp, #20
    b1c8:	af00      	add	r7, sp, #0
    b1ca:	4603      	mov	r3, r0
    b1cc:	6039      	str	r1, [r7, #0]
    b1ce:	71fb      	strb	r3, [r7, #7]
{
	int checksum = 0;
    b1d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b1d4:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < length+1; i++) {
    b1d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    b1da:	60fb      	str	r3, [r7, #12]
    b1dc:	e00c      	b.n	b1f8 <_Z12ax12ChecksumaPi+0x34>
		checksum += parameters[i];
    b1de:	68fb      	ldr	r3, [r7, #12]
    b1e0:	ea4f 0283 	mov.w	r2, r3, lsl #2
    b1e4:	683b      	ldr	r3, [r7, #0]
    b1e6:	4413      	add	r3, r2
    b1e8:	681a      	ldr	r2, [r3, #0]
    b1ea:	68bb      	ldr	r3, [r7, #8]
    b1ec:	4413      	add	r3, r2
    b1ee:	60bb      	str	r3, [r7, #8]
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
{
	int checksum = 0;
    for(int i = 0; i < length+1; i++) {
    b1f0:	68fb      	ldr	r3, [r7, #12]
    b1f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    b1f6:	60fb      	str	r3, [r7, #12]
    b1f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    b1fc:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b200:	68fb      	ldr	r3, [r7, #12]
    b202:	429a      	cmp	r2, r3
    b204:	dceb      	bgt.n	b1de <_Z12ax12ChecksumaPi+0x1a>
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
    b206:	68bb      	ldr	r3, [r7, #8]
    b208:	b2db      	uxtb	r3, r3
    b20a:	ea6f 0303 	mvn.w	r3, r3
    b20e:	b2db      	uxtb	r3, r3
    b210:	b25b      	sxtb	r3, r3
}
    b212:	4618      	mov	r0, r3
    b214:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b218:	46bd      	mov	sp, r7
    b21a:	bc80      	pop	{r7}
    b21c:	4770      	bx	lr
    b21e:	46c0      	nop			(mov r8, r8)

0000b220 <_ZN4AX1217createWriteHeaderEPiii>:
    return 8;
}



void AX12::createWriteHeader(int* retour, int servo, int nombreParamsAjoutes)
    b220:	b480      	push	{r7}
    b222:	b085      	sub	sp, #20
    b224:	af00      	add	r7, sp, #0
    b226:	60f8      	str	r0, [r7, #12]
    b228:	60b9      	str	r1, [r7, #8]
    b22a:	607a      	str	r2, [r7, #4]
{
    retour[0] = 0xff;
    b22c:	68fa      	ldr	r2, [r7, #12]
    b22e:	f04f 03ff 	mov.w	r3, #255	; 0xff
    b232:	6013      	str	r3, [r2, #0]
    retour[1] = 0xff;
    b234:	68fb      	ldr	r3, [r7, #12]
    b236:	f103 0204 	add.w	r2, r3, #4	; 0x4
    b23a:	f04f 03ff 	mov.w	r3, #255	; 0xff
    b23e:	6013      	str	r3, [r2, #0]
    retour[2] = servo;
    b240:	68fb      	ldr	r3, [r7, #12]
    b242:	f103 0208 	add.w	r2, r3, #8	; 0x8
    b246:	68bb      	ldr	r3, [r7, #8]
    b248:	6013      	str	r3, [r2, #0]
    retour[3] = AX12_WRITE_DATA_PARAMS+2+nombreParamsAjoutes;
    b24a:	68fb      	ldr	r3, [r7, #12]
    b24c:	f103 020c 	add.w	r2, r3, #12	; 0xc
    b250:	687b      	ldr	r3, [r7, #4]
    b252:	f103 0304 	add.w	r3, r3, #4	; 0x4
    b256:	6013      	str	r3, [r2, #0]
    retour[4] = AX12_WRITE_DATA;
    b258:	68fb      	ldr	r3, [r7, #12]
    b25a:	f103 0210 	add.w	r2, r3, #16	; 0x10
    b25e:	f04f 0303 	mov.w	r3, #3	; 0x3
    b262:	6013      	str	r3, [r2, #0]
}
    b264:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b268:	46bd      	mov	sp, r7
    b26a:	bc80      	pop	{r7}
    b26c:	4770      	bx	lr
    b26e:	46c0      	nop			(mov r8, r8)

0000b270 <_ZN4AX1222getBaudRateInstructionEPihi>:
    retour[5] = AX12_LED;
    retour[6] = ledOn;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}
int AX12::getBaudRateInstruction(int* retour, uint8_t baudRate, int servo)
    b270:	b590      	push	{r4, r7, lr}
    b272:	b085      	sub	sp, #20
    b274:	af00      	add	r7, sp, #0
    b276:	60f8      	str	r0, [r7, #12]
    b278:	460b      	mov	r3, r1
    b27a:	607a      	str	r2, [r7, #4]
    b27c:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    b27e:	68f8      	ldr	r0, [r7, #12]
    b280:	6879      	ldr	r1, [r7, #4]
    b282:	f04f 0200 	mov.w	r2, #0	; 0x0
    b286:	f7ff ffcb 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_BAUD_RATE;
    b28a:	68fb      	ldr	r3, [r7, #12]
    b28c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b290:	f04f 0304 	mov.w	r3, #4	; 0x4
    b294:	6013      	str	r3, [r2, #0]
    retour[6] = baudRate;
    b296:	68fb      	ldr	r3, [r7, #12]
    b298:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b29c:	7afb      	ldrb	r3, [r7, #11]
    b29e:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    b2a0:	68fb      	ldr	r3, [r7, #12]
    b2a2:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    b2a6:	68fb      	ldr	r3, [r7, #12]
    b2a8:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b2ac:	681b      	ldr	r3, [r3, #0]
    b2ae:	b2da      	uxtb	r2, r3
    b2b0:	68fb      	ldr	r3, [r7, #12]
    b2b2:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b2b6:	b253      	sxtb	r3, r2
    b2b8:	4618      	mov	r0, r3
    b2ba:	f7ff ff83 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b2be:	4603      	mov	r3, r0
    b2c0:	6023      	str	r3, [r4, #0]
    return 8;
    b2c2:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    b2c6:	4618      	mov	r0, r3
    b2c8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b2cc:	46bd      	mov	sp, r7
    b2ce:	bd90      	pop	{r4, r7, pc}

0000b2d0 <_ZN4AX1217getLedInstructionEPihi>:
    retour[6] = (uint8_t)(maxTorque);
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getLedInstruction(int* retour, uint8_t ledOn, int servo)
    b2d0:	b590      	push	{r4, r7, lr}
    b2d2:	b085      	sub	sp, #20
    b2d4:	af00      	add	r7, sp, #0
    b2d6:	60f8      	str	r0, [r7, #12]
    b2d8:	460b      	mov	r3, r1
    b2da:	607a      	str	r2, [r7, #4]
    b2dc:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    b2de:	68f8      	ldr	r0, [r7, #12]
    b2e0:	6879      	ldr	r1, [r7, #4]
    b2e2:	f04f 0200 	mov.w	r2, #0	; 0x0
    b2e6:	f7ff ff9b 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_LED;
    b2ea:	68fb      	ldr	r3, [r7, #12]
    b2ec:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b2f0:	f04f 0319 	mov.w	r3, #25	; 0x19
    b2f4:	6013      	str	r3, [r2, #0]
    retour[6] = ledOn;
    b2f6:	68fb      	ldr	r3, [r7, #12]
    b2f8:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b2fc:	7afb      	ldrb	r3, [r7, #11]
    b2fe:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    b300:	68fb      	ldr	r3, [r7, #12]
    b302:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    b306:	68fb      	ldr	r3, [r7, #12]
    b308:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b30c:	681b      	ldr	r3, [r3, #0]
    b30e:	b2da      	uxtb	r2, r3
    b310:	68fb      	ldr	r3, [r7, #12]
    b312:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b316:	b253      	sxtb	r3, r2
    b318:	4618      	mov	r0, r3
    b31a:	f7ff ff53 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b31e:	4603      	mov	r3, r0
    b320:	6023      	str	r3, [r4, #0]
    return 8;
    b322:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    b326:	4618      	mov	r0, r3
    b328:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b32c:	46bd      	mov	sp, r7
    b32e:	bd90      	pop	{r4, r7, pc}

0000b330 <_ZN4AX1223getMaxTorqueInstructionEPiti>:
    retour[6] = (uint8_t)(torqueLimite);
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMaxTorqueInstruction(int* retour, uint16_t maxTorque, int servo) // torque dans l'eeprom (pour l'écrire dans la ram au démarrage)
    b330:	b590      	push	{r4, r7, lr}
    b332:	b085      	sub	sp, #20
    b334:	af00      	add	r7, sp, #0
    b336:	60f8      	str	r0, [r7, #12]
    b338:	460b      	mov	r3, r1
    b33a:	607a      	str	r2, [r7, #4]
    b33c:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b33e:	68f8      	ldr	r0, [r7, #12]
    b340:	6879      	ldr	r1, [r7, #4]
    b342:	f04f 0201 	mov.w	r2, #1	; 0x1
    b346:	f7ff ff6b 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MAX_TORQUE_L;
    b34a:	68fb      	ldr	r3, [r7, #12]
    b34c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b350:	f04f 030e 	mov.w	r3, #14	; 0xe
    b354:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(maxTorque);
    b356:	68fb      	ldr	r3, [r7, #12]
    b358:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b35c:	897b      	ldrh	r3, [r7, #10]
    b35e:	b2db      	uxtb	r3, r3
    b360:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    b362:	68fb      	ldr	r3, [r7, #12]
    b364:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b368:	897b      	ldrh	r3, [r7, #10]
    b36a:	ea4f 2323 	mov.w	r3, r3, asr #8
    b36e:	b2db      	uxtb	r3, r3
    b370:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b372:	68fb      	ldr	r3, [r7, #12]
    b374:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b378:	68fb      	ldr	r3, [r7, #12]
    b37a:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b37e:	681b      	ldr	r3, [r3, #0]
    b380:	b2da      	uxtb	r2, r3
    b382:	68fb      	ldr	r3, [r7, #12]
    b384:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b388:	b253      	sxtb	r3, r2
    b38a:	4618      	mov	r0, r3
    b38c:	f7ff ff1a 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b390:	4603      	mov	r3, r0
    b392:	6023      	str	r3, [r4, #0]
    return 9;
    b394:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b398:	4618      	mov	r0, r3
    b39a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b39e:	46bd      	mov	sp, r7
    b3a0:	bd90      	pop	{r4, r7, pc}
    b3a2:	46c0      	nop			(mov r8, r8)

0000b3a4 <_ZN4AX1225getTorqueLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getTorqueLimitInstruction(int* retour, uint16_t torqueLimite, int servo) // la torque dans la RAM
    b3a4:	b590      	push	{r4, r7, lr}
    b3a6:	b085      	sub	sp, #20
    b3a8:	af00      	add	r7, sp, #0
    b3aa:	60f8      	str	r0, [r7, #12]
    b3ac:	460b      	mov	r3, r1
    b3ae:	607a      	str	r2, [r7, #4]
    b3b0:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b3b2:	68f8      	ldr	r0, [r7, #12]
    b3b4:	6879      	ldr	r1, [r7, #4]
    b3b6:	f04f 0201 	mov.w	r2, #1	; 0x1
    b3ba:	f7ff ff31 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_TORQUE_LIMIT_L;
    b3be:	68fb      	ldr	r3, [r7, #12]
    b3c0:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b3c4:	f04f 0322 	mov.w	r3, #34	; 0x22
    b3c8:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(torqueLimite);
    b3ca:	68fb      	ldr	r3, [r7, #12]
    b3cc:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b3d0:	897b      	ldrh	r3, [r7, #10]
    b3d2:	b2db      	uxtb	r3, r3
    b3d4:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    b3d6:	68fb      	ldr	r3, [r7, #12]
    b3d8:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b3dc:	897b      	ldrh	r3, [r7, #10]
    b3de:	ea4f 2323 	mov.w	r3, r3, asr #8
    b3e2:	b2db      	uxtb	r3, r3
    b3e4:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b3e6:	68fb      	ldr	r3, [r7, #12]
    b3e8:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b3ec:	68fb      	ldr	r3, [r7, #12]
    b3ee:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b3f2:	681b      	ldr	r3, [r3, #0]
    b3f4:	b2da      	uxtb	r2, r3
    b3f6:	68fb      	ldr	r3, [r7, #12]
    b3f8:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b3fc:	b253      	sxtb	r3, r2
    b3fe:	4618      	mov	r0, r3
    b400:	f7ff fee0 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b404:	4603      	mov	r3, r0
    b406:	6023      	str	r3, [r4, #0]
    return 9;
    b408:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b40c:	4618      	mov	r0, r3
    b40e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b412:	46bd      	mov	sp, r7
    b414:	bd90      	pop	{r4, r7, pc}
    b416:	46c0      	nop			(mov r8, r8)

0000b418 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleUpperLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    b418:	b590      	push	{r4, r7, lr}
    b41a:	b085      	sub	sp, #20
    b41c:	af00      	add	r7, sp, #0
    b41e:	60f8      	str	r0, [r7, #12]
    b420:	460b      	mov	r3, r1
    b422:	607a      	str	r2, [r7, #4]
    b424:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b426:	68f8      	ldr	r0, [r7, #12]
    b428:	6879      	ldr	r1, [r7, #4]
    b42a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b42e:	f7ff fef7 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CCW_ANGLE_LIMIT_L;
    b432:	68fb      	ldr	r3, [r7, #12]
    b434:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b438:	f04f 0308 	mov.w	r3, #8	; 0x8
    b43c:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    b43e:	68fb      	ldr	r3, [r7, #12]
    b440:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b444:	897b      	ldrh	r3, [r7, #10]
    b446:	b2db      	uxtb	r3, r3
    b448:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    b44a:	68fb      	ldr	r3, [r7, #12]
    b44c:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b450:	897b      	ldrh	r3, [r7, #10]
    b452:	ea4f 2323 	mov.w	r3, r3, asr #8
    b456:	b2db      	uxtb	r3, r3
    b458:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b45a:	68fb      	ldr	r3, [r7, #12]
    b45c:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b460:	68fb      	ldr	r3, [r7, #12]
    b462:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b466:	681b      	ldr	r3, [r3, #0]
    b468:	b2da      	uxtb	r2, r3
    b46a:	68fb      	ldr	r3, [r7, #12]
    b46c:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b470:	b253      	sxtb	r3, r2
    b472:	4618      	mov	r0, r3
    b474:	f7ff fea6 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b478:	4603      	mov	r3, r0
    b47a:	6023      	str	r3, [r4, #0]
    return 9;
    b47c:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b480:	4618      	mov	r0, r3
    b482:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b486:	46bd      	mov	sp, r7
    b488:	bd90      	pop	{r4, r7, pc}
    b48a:	46c0      	nop			(mov r8, r8)

0000b48c <_ZN4AX1229getAngleLowerLimitInstructionEPiti>:
    retour[6] = (uint8_t)(vitesse);
    retour[7] = (uint8_t)(vitesse>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleLowerLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    b48c:	b590      	push	{r4, r7, lr}
    b48e:	b085      	sub	sp, #20
    b490:	af00      	add	r7, sp, #0
    b492:	60f8      	str	r0, [r7, #12]
    b494:	460b      	mov	r3, r1
    b496:	607a      	str	r2, [r7, #4]
    b498:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    b49a:	68f8      	ldr	r0, [r7, #12]
    b49c:	6879      	ldr	r1, [r7, #4]
    b49e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b4a2:	f7ff febd 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CW_ANGLE_LIMIT_L;
    b4a6:	68fb      	ldr	r3, [r7, #12]
    b4a8:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b4ac:	f04f 0306 	mov.w	r3, #6	; 0x6
    b4b0:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    b4b2:	68fb      	ldr	r3, [r7, #12]
    b4b4:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b4b8:	897b      	ldrh	r3, [r7, #10]
    b4ba:	b2db      	uxtb	r3, r3
    b4bc:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    b4be:	68fb      	ldr	r3, [r7, #12]
    b4c0:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b4c4:	897b      	ldrh	r3, [r7, #10]
    b4c6:	ea4f 2323 	mov.w	r3, r3, asr #8
    b4ca:	b2db      	uxtb	r3, r3
    b4cc:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b4ce:	68fb      	ldr	r3, [r7, #12]
    b4d0:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b4d4:	68fb      	ldr	r3, [r7, #12]
    b4d6:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b4da:	681b      	ldr	r3, [r3, #0]
    b4dc:	b2da      	uxtb	r2, r3
    b4de:	68fb      	ldr	r3, [r7, #12]
    b4e0:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b4e4:	b253      	sxtb	r3, r2
    b4e6:	4618      	mov	r0, r3
    b4e8:	f7ff fe6c 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b4ec:	4603      	mov	r3, r0
    b4ee:	6023      	str	r3, [r4, #0]
    return 9;
    b4f0:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b4f4:	4618      	mov	r0, r3
    b4f6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b4fa:	46bd      	mov	sp, r7
    b4fc:	bd90      	pop	{r4, r7, pc}
    b4fe:	46c0      	nop			(mov r8, r8)

0000b500 <_ZN4AX1223getMoveSpeedInstructionEPith>:
    retour[6] = (uint8_t)(position);
    retour[7] = (uint8_t)(position>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMoveSpeedInstruction(int* retour, uint16_t vitesse, uint8_t servo)
    b500:	b590      	push	{r4, r7, lr}
    b502:	b083      	sub	sp, #12
    b504:	af00      	add	r7, sp, #0
    b506:	6078      	str	r0, [r7, #4]
    b508:	460b      	mov	r3, r1
    b50a:	807b      	strh	r3, [r7, #2]
    b50c:	4613      	mov	r3, r2
    b50e:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high speed)
    b510:	787b      	ldrb	r3, [r7, #1]
    b512:	6878      	ldr	r0, [r7, #4]
    b514:	4619      	mov	r1, r3
    b516:	f04f 0201 	mov.w	r2, #1	; 0x1
    b51a:	f7ff fe81 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MOVING_SPEED_L;
    b51e:	687b      	ldr	r3, [r7, #4]
    b520:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b524:	f04f 0320 	mov.w	r3, #32	; 0x20
    b528:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(vitesse);
    b52a:	687b      	ldr	r3, [r7, #4]
    b52c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b530:	887b      	ldrh	r3, [r7, #2]
    b532:	b2db      	uxtb	r3, r3
    b534:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(vitesse>>8);
    b536:	687b      	ldr	r3, [r7, #4]
    b538:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b53c:	887b      	ldrh	r3, [r7, #2]
    b53e:	ea4f 2323 	mov.w	r3, r3, asr #8
    b542:	b2db      	uxtb	r3, r3
    b544:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b546:	687b      	ldr	r3, [r7, #4]
    b548:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b54c:	687b      	ldr	r3, [r7, #4]
    b54e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b552:	681b      	ldr	r3, [r3, #0]
    b554:	b2da      	uxtb	r2, r3
    b556:	687b      	ldr	r3, [r7, #4]
    b558:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b55c:	b253      	sxtb	r3, r2
    b55e:	4618      	mov	r0, r3
    b560:	f7ff fe30 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b564:	4603      	mov	r3, r0
    b566:	6023      	str	r3, [r4, #0]
    return 9;
    b568:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b56c:	4618      	mov	r0, r3
    b56e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b572:	46bd      	mov	sp, r7
    b574:	bd90      	pop	{r4, r7, pc}
    b576:	46c0      	nop			(mov r8, r8)

0000b578 <_ZN4AX1220getMoveToInstructionEPith>:
    retour[8] = (uint8_t)(vitesse);
    retour[9] = (uint8_t)(vitesse>>8);
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    return 11;
}
int AX12::getMoveToInstruction(int* retour, uint16_t position, uint8_t servo)
    b578:	b590      	push	{r4, r7, lr}
    b57a:	b083      	sub	sp, #12
    b57c:	af00      	add	r7, sp, #0
    b57e:	6078      	str	r0, [r7, #4]
    b580:	460b      	mov	r3, r1
    b582:	807b      	strh	r3, [r7, #2]
    b584:	4613      	mov	r3, r2
    b586:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high position bits)
    b588:	787b      	ldrb	r3, [r7, #1]
    b58a:	6878      	ldr	r0, [r7, #4]
    b58c:	4619      	mov	r1, r3
    b58e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b592:	f7ff fe45 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    b596:	687b      	ldr	r3, [r7, #4]
    b598:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b59c:	f04f 031e 	mov.w	r3, #30	; 0x1e
    b5a0:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    b5a2:	687b      	ldr	r3, [r7, #4]
    b5a4:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b5a8:	887b      	ldrh	r3, [r7, #2]
    b5aa:	b2db      	uxtb	r3, r3
    b5ac:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    b5ae:	687b      	ldr	r3, [r7, #4]
    b5b0:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b5b4:	887b      	ldrh	r3, [r7, #2]
    b5b6:	ea4f 2323 	mov.w	r3, r3, asr #8
    b5ba:	b2db      	uxtb	r3, r3
    b5bc:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    b5be:	687b      	ldr	r3, [r7, #4]
    b5c0:	f103 0420 	add.w	r4, r3, #32	; 0x20
    b5c4:	687b      	ldr	r3, [r7, #4]
    b5c6:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b5ca:	681b      	ldr	r3, [r3, #0]
    b5cc:	b2da      	uxtb	r2, r3
    b5ce:	687b      	ldr	r3, [r7, #4]
    b5d0:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b5d4:	b253      	sxtb	r3, r2
    b5d6:	4618      	mov	r0, r3
    b5d8:	f7ff fdf4 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b5dc:	4603      	mov	r3, r0
    b5de:	6023      	str	r3, [r4, #0]
    return 9;
    b5e0:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    b5e4:	4618      	mov	r0, r3
    b5e6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b5ea:	46bd      	mov	sp, r7
    b5ec:	bd90      	pop	{r4, r7, pc}
    b5ee:	46c0      	nop			(mov r8, r8)

0000b5f0 <_ZN4AX1218getMoveInstructionEPitth>:
    for(int i = 0; i < length+1; i++) {
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
}
int AX12::getMoveInstruction(int* retour, uint16_t position, uint16_t vitesse, uint8_t servo)
    b5f0:	b590      	push	{r4, r7, lr}
    b5f2:	b085      	sub	sp, #20
    b5f4:	af00      	add	r7, sp, #0
    b5f6:	60f8      	str	r0, [r7, #12]
    b5f8:	4618      	mov	r0, r3
    b5fa:	460b      	mov	r3, r1
    b5fc:	817b      	strh	r3, [r7, #10]
    b5fe:	4613      	mov	r3, r2
    b600:	813b      	strh	r3, [r7, #8]
    b602:	4603      	mov	r3, r0
    b604:	71fb      	strb	r3, [r7, #7]
{
    createWriteHeader(retour, servo, 3); // first, we create a write header with 3 more params (for low/height pos and low/height speed)
    b606:	79fb      	ldrb	r3, [r7, #7]
    b608:	68f8      	ldr	r0, [r7, #12]
    b60a:	4619      	mov	r1, r3
    b60c:	f04f 0203 	mov.w	r2, #3	; 0x3
    b610:	f7ff fe06 	bl	b220 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    b614:	68fb      	ldr	r3, [r7, #12]
    b616:	f103 0214 	add.w	r2, r3, #20	; 0x14
    b61a:	f04f 031e 	mov.w	r3, #30	; 0x1e
    b61e:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    b620:	68fb      	ldr	r3, [r7, #12]
    b622:	f103 0218 	add.w	r2, r3, #24	; 0x18
    b626:	897b      	ldrh	r3, [r7, #10]
    b628:	b2db      	uxtb	r3, r3
    b62a:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    b62c:	68fb      	ldr	r3, [r7, #12]
    b62e:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    b632:	897b      	ldrh	r3, [r7, #10]
    b634:	ea4f 2323 	mov.w	r3, r3, asr #8
    b638:	b2db      	uxtb	r3, r3
    b63a:	6013      	str	r3, [r2, #0]
    retour[8] = (uint8_t)(vitesse);
    b63c:	68fb      	ldr	r3, [r7, #12]
    b63e:	f103 0220 	add.w	r2, r3, #32	; 0x20
    b642:	893b      	ldrh	r3, [r7, #8]
    b644:	b2db      	uxtb	r3, r3
    b646:	6013      	str	r3, [r2, #0]
    retour[9] = (uint8_t)(vitesse>>8);
    b648:	68fb      	ldr	r3, [r7, #12]
    b64a:	f103 0224 	add.w	r2, r3, #36	; 0x24
    b64e:	893b      	ldrh	r3, [r7, #8]
    b650:	ea4f 2323 	mov.w	r3, r3, asr #8
    b654:	b2db      	uxtb	r3, r3
    b656:	6013      	str	r3, [r2, #0]
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    b658:	68fb      	ldr	r3, [r7, #12]
    b65a:	f103 0428 	add.w	r4, r3, #40	; 0x28
    b65e:	68fb      	ldr	r3, [r7, #12]
    b660:	f103 030c 	add.w	r3, r3, #12	; 0xc
    b664:	681b      	ldr	r3, [r3, #0]
    b666:	b2da      	uxtb	r2, r3
    b668:	68fb      	ldr	r3, [r7, #12]
    b66a:	f103 0108 	add.w	r1, r3, #8	; 0x8
    b66e:	b253      	sxtb	r3, r2
    b670:	4618      	mov	r0, r3
    b672:	f7ff fda7 	bl	b1c4 <_Z12ax12ChecksumaPi>
    b676:	4603      	mov	r3, r0
    b678:	6023      	str	r3, [r4, #0]
    return 11;
    b67a:	f04f 030b 	mov.w	r3, #11	; 0xb
}
    b67e:	4618      	mov	r0, r3
    b680:	f107 0714 	add.w	r7, r7, #20	; 0x14
    b684:	46bd      	mov	sp, r7
    b686:	bd90      	pop	{r4, r7, pc}

0000b688 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv>:
            break;
    }
}

// renvoient 0
Vitesse CommandCalibrerCapteurCouleur::getLinearSpeed()
    b688:	b480      	push	{r7}
    b68a:	b083      	sub	sp, #12
    b68c:	af00      	add	r7, sp, #0
    b68e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b690:	4b03      	ldr	r3, [pc, #12]	(b6a0 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv+0x18>)
}
    b692:	4618      	mov	r0, r3
    b694:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b698:	46bd      	mov	sp, r7
    b69a:	bc80      	pop	{r7}
    b69c:	4770      	bx	lr
    b69e:	46c0      	nop			(mov r8, r8)
    b6a0:	00000000 	.word	0x00000000

0000b6a4 <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv>:

Angle CommandCalibrerCapteurCouleur::getAngularSpeed()
    b6a4:	b480      	push	{r7}
    b6a6:	b083      	sub	sp, #12
    b6a8:	af00      	add	r7, sp, #0
    b6aa:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b6ac:	4b03      	ldr	r3, [pc, #12]	(b6bc <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv+0x18>)
}
    b6ae:	4618      	mov	r0, r3
    b6b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b6b4:	46bd      	mov	sp, r7
    b6b6:	bc80      	pop	{r7}
    b6b8:	4770      	bx	lr
    b6ba:	46c0      	nop			(mov r8, r8)
    b6bc:	00000000 	.word	0x00000000

0000b6c0 <_ZNK29CommandCalibrerCapteurCouleur4finiEv>:

// renvoit si le capteur a fini sa calibration
// le résultat est lisible dans getTicksMoyens()
bool CommandCalibrerCapteurCouleur::fini() const
    b6c0:	b480      	push	{r7}
    b6c2:	b083      	sub	sp, #12
    b6c4:	af00      	add	r7, sp, #0
    b6c6:	6078      	str	r0, [r7, #4]
{
    return (state > 4);
    b6c8:	687b      	ldr	r3, [r7, #4]
    b6ca:	689b      	ldr	r3, [r3, #8]
    b6cc:	2b04      	cmp	r3, #4
    b6ce:	bfd4      	ite	le
    b6d0:	2300      	movle	r3, #0
    b6d2:	2301      	movgt	r3, #1
    b6d4:	b2db      	uxtb	r3, r3
}
    b6d6:	4618      	mov	r0, r3
    b6d8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b6dc:	46bd      	mov	sp, r7
    b6de:	bc80      	pop	{r7}
    b6e0:	4770      	bx	lr
    b6e2:	46c0      	nop			(mov r8, r8)

0000b6e4 <_ZNK29CommandCalibrerCapteurCouleur14getTicksMoyensEv>:

// une fois fini, renvoit le seuil calculé
uint16_t CommandCalibrerCapteurCouleur::getTicksMoyens() const
    b6e4:	b480      	push	{r7}
    b6e6:	b083      	sub	sp, #12
    b6e8:	af00      	add	r7, sp, #0
    b6ea:	6078      	str	r0, [r7, #4]
{
    return resultat;
    b6ec:	687b      	ldr	r3, [r7, #4]
    b6ee:	899b      	ldrh	r3, [r3, #12]
}
    b6f0:	4618      	mov	r0, r3
    b6f2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b6f6:	46bd      	mov	sp, r7
    b6f8:	bc80      	pop	{r7}
    b6fa:	4770      	bx	lr

0000b6fc <_ZN19CommandCheckCouleur14getLinearSpeedEv>:
            state++;
    }
}

// renvoient 0
Vitesse CommandCheckCouleur::getLinearSpeed()
    b6fc:	b480      	push	{r7}
    b6fe:	b083      	sub	sp, #12
    b700:	af00      	add	r7, sp, #0
    b702:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b704:	4b03      	ldr	r3, [pc, #12]	(b714 <_ZN19CommandCheckCouleur14getLinearSpeedEv+0x18>)
}
    b706:	4618      	mov	r0, r3
    b708:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b70c:	46bd      	mov	sp, r7
    b70e:	bc80      	pop	{r7}
    b710:	4770      	bx	lr
    b712:	46c0      	nop			(mov r8, r8)
    b714:	00000000 	.word	0x00000000

0000b718 <_ZN19CommandCheckCouleur15getAngularSpeedEv>:

Angle CommandCheckCouleur::getAngularSpeed()
    b718:	b480      	push	{r7}
    b71a:	b083      	sub	sp, #12
    b71c:	af00      	add	r7, sp, #0
    b71e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    b720:	4b03      	ldr	r3, [pc, #12]	(b730 <_ZN19CommandCheckCouleur15getAngularSpeedEv+0x18>)
}
    b722:	4618      	mov	r0, r3
    b724:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b728:	46bd      	mov	sp, r7
    b72a:	bc80      	pop	{r7}
    b72c:	4770      	bx	lr
    b72e:	46c0      	nop			(mov r8, r8)
    b730:	00000000 	.word	0x00000000

0000b734 <_ZNK19CommandCheckCouleur4finiEv>:

// renvoit si le capteur a fini de check la couleur
// le résultat est disponible dans les fonctions bleue() et rouge()
bool CommandCheckCouleur::fini() const
    b734:	b480      	push	{r7}
    b736:	b083      	sub	sp, #12
    b738:	af00      	add	r7, sp, #0
    b73a:	6078      	str	r0, [r7, #4]
{
    return (state >= 4);
    b73c:	687b      	ldr	r3, [r7, #4]
    b73e:	695b      	ldr	r3, [r3, #20]
    b740:	2b03      	cmp	r3, #3
    b742:	bfd4      	ite	le
    b744:	2300      	movle	r3, #0
    b746:	2301      	movgt	r3, #1
    b748:	b2db      	uxtb	r3, r3
}
    b74a:	4618      	mov	r0, r3
    b74c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b750:	46bd      	mov	sp, r7
    b752:	bc80      	pop	{r7}
    b754:	4770      	bx	lr
    b756:	46c0      	nop			(mov r8, r8)

0000b758 <_ZNK19CommandCheckCouleur5bleueEv>:

// une fois fini, renvoit la couleur
// les 2 peuvent renvoyer true si on est pas sur de la couleur
bool CommandCheckCouleur::bleue() const
    b758:	b590      	push	{r4, r7, lr}
    b75a:	b083      	sub	sp, #12
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]
{
    return (float)bleuMesure > 1.15f*(float)seuilMoyenne;
    b760:	687b      	ldr	r3, [r7, #4]
    b762:	899b      	ldrh	r3, [r3, #12]
    b764:	4618      	mov	r0, r3
    b766:	f00f fd51 	bl	1b20c <__aeabi_ui2f>
    b76a:	4604      	mov	r4, r0
    b76c:	687b      	ldr	r3, [r7, #4]
    b76e:	889b      	ldrh	r3, [r3, #4]
    b770:	4618      	mov	r0, r3
    b772:	f00f fd4b 	bl	1b20c <__aeabi_ui2f>
    b776:	4603      	mov	r3, r0
    b778:	4618      	mov	r0, r3
    b77a:	490c      	ldr	r1, [pc, #48]	(b7ac <_ZNK19CommandCheckCouleur5bleueEv+0x54>)
    b77c:	f00f fd9e 	bl	1b2bc <__aeabi_fmul>
    b780:	4603      	mov	r3, r0
    b782:	461a      	mov	r2, r3
    b784:	f04f 0300 	mov.w	r3, #0	; 0x0
    b788:	70fb      	strb	r3, [r7, #3]
    b78a:	4620      	mov	r0, r4
    b78c:	4611      	mov	r1, r2
    b78e:	f00f ff4f 	bl	1b630 <__aeabi_fcmpgt>
    b792:	4603      	mov	r3, r0
    b794:	2b00      	cmp	r3, #0
    b796:	d002      	beq.n	b79e <_ZNK19CommandCheckCouleur5bleueEv+0x46>
    b798:	f04f 0301 	mov.w	r3, #1	; 0x1
    b79c:	70fb      	strb	r3, [r7, #3]
    b79e:	78fb      	ldrb	r3, [r7, #3]
}
    b7a0:	4618      	mov	r0, r3
    b7a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b7a6:	46bd      	mov	sp, r7
    b7a8:	bd90      	pop	{r4, r7, pc}
    b7aa:	46c0      	nop			(mov r8, r8)
    b7ac:	3f933333 	.word	0x3f933333

0000b7b0 <_ZNK19CommandCheckCouleur5rougeEv>:

bool CommandCheckCouleur::rouge() const
    b7b0:	b590      	push	{r4, r7, lr}
    b7b2:	b083      	sub	sp, #12
    b7b4:	af00      	add	r7, sp, #0
    b7b6:	6078      	str	r0, [r7, #4]
{
    return (float)rougeMesure > 1.15f*(float)seuilMoyenne;
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	89db      	ldrh	r3, [r3, #14]
    b7bc:	4618      	mov	r0, r3
    b7be:	f00f fd25 	bl	1b20c <__aeabi_ui2f>
    b7c2:	4604      	mov	r4, r0
    b7c4:	687b      	ldr	r3, [r7, #4]
    b7c6:	889b      	ldrh	r3, [r3, #4]
    b7c8:	4618      	mov	r0, r3
    b7ca:	f00f fd1f 	bl	1b20c <__aeabi_ui2f>
    b7ce:	4603      	mov	r3, r0
    b7d0:	4618      	mov	r0, r3
    b7d2:	490c      	ldr	r1, [pc, #48]	(b804 <_ZNK19CommandCheckCouleur5rougeEv+0x54>)
    b7d4:	f00f fd72 	bl	1b2bc <__aeabi_fmul>
    b7d8:	4603      	mov	r3, r0
    b7da:	461a      	mov	r2, r3
    b7dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    b7e0:	70fb      	strb	r3, [r7, #3]
    b7e2:	4620      	mov	r0, r4
    b7e4:	4611      	mov	r1, r2
    b7e6:	f00f ff23 	bl	1b630 <__aeabi_fcmpgt>
    b7ea:	4603      	mov	r3, r0
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d002      	beq.n	b7f6 <_ZNK19CommandCheckCouleur5rougeEv+0x46>
    b7f0:	f04f 0301 	mov.w	r3, #1	; 0x1
    b7f4:	70fb      	strb	r3, [r7, #3]
    b7f6:	78fb      	ldrb	r3, [r7, #3]
}
    b7f8:	4618      	mov	r0, r3
    b7fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b7fe:	46bd      	mov	sp, r7
    b800:	bd90      	pop	{r4, r7, pc}
    b802:	46c0      	nop			(mov r8, r8)
    b804:	3f933333 	.word	0x3f933333

0000b808 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b808:	b580      	push	{r7, lr}
    b80a:	b082      	sub	sp, #8
    b80c:	af00      	add	r7, sp, #0
    b80e:	6078      	str	r0, [r7, #4]
    b810:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b812:	687b      	ldr	r3, [r7, #4]
    b814:	4618      	mov	r0, r3
    b816:	f7fc fc87 	bl	8128 <_ZN7CommandC2Ev>
    b81a:	687a      	ldr	r2, [r7, #4]
    b81c:	4b09      	ldr	r3, [pc, #36]	(b844 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur+0x3c>)
    b81e:	6013      	str	r3, [r2, #0]
    b820:	687a      	ldr	r2, [r7, #4]
    b822:	683b      	ldr	r3, [r7, #0]
    b824:	6053      	str	r3, [r2, #4]
    b826:	687a      	ldr	r2, [r7, #4]
    b828:	f04f 0300 	mov.w	r3, #0	; 0x0
    b82c:	6093      	str	r3, [r2, #8]
    b82e:	687a      	ldr	r2, [r7, #4]
    b830:	f04f 0300 	mov.w	r3, #0	; 0x0
    b834:	8193      	strh	r3, [r2, #12]
{
}
    b836:	687b      	ldr	r3, [r7, #4]
    b838:	4618      	mov	r0, r3
    b83a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b83e:	46bd      	mov	sp, r7
    b840:	bd80      	pop	{r7, pc}
    b842:	46c0      	nop			(mov r8, r8)
    b844:	000222b8 	.word	0x000222b8

0000b848 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b848:	b580      	push	{r7, lr}
    b84a:	b082      	sub	sp, #8
    b84c:	af00      	add	r7, sp, #0
    b84e:	6078      	str	r0, [r7, #4]
    b850:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b852:	687b      	ldr	r3, [r7, #4]
    b854:	4618      	mov	r0, r3
    b856:	f7fc fc67 	bl	8128 <_ZN7CommandC2Ev>
    b85a:	687a      	ldr	r2, [r7, #4]
    b85c:	4b09      	ldr	r3, [pc, #36]	(b884 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur+0x3c>)
    b85e:	6013      	str	r3, [r2, #0]
    b860:	687a      	ldr	r2, [r7, #4]
    b862:	683b      	ldr	r3, [r7, #0]
    b864:	6053      	str	r3, [r2, #4]
    b866:	687a      	ldr	r2, [r7, #4]
    b868:	f04f 0300 	mov.w	r3, #0	; 0x0
    b86c:	6093      	str	r3, [r2, #8]
    b86e:	687a      	ldr	r2, [r7, #4]
    b870:	f04f 0300 	mov.w	r3, #0	; 0x0
    b874:	8193      	strh	r3, [r2, #12]
{
}
    b876:	687b      	ldr	r3, [r7, #4]
    b878:	4618      	mov	r0, r3
    b87a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b87e:	46bd      	mov	sp, r7
    b880:	bd80      	pop	{r7, pc}
    b882:	46c0      	nop			(mov r8, r8)
    b884:	000222b8 	.word	0x000222b8

0000b888 <_ZN14CapteurCouleur12getTickValueEv>:
    TIM_SetCounter(m_TIMx, 0);
}

// Permet de connaitre le nombre de ticks depuis le dernier appel de cette fonction
// ou depuis le dernier appel de la selection du capteur
uint16_t CapteurCouleur::getTickValue()
    b888:	b580      	push	{r7, lr}
    b88a:	b084      	sub	sp, #16
    b88c:	af00      	add	r7, sp, #0
    b88e:	6078      	str	r0, [r7, #4]
{
    // récupère le nombre de ticks depuis la dernière mise à 0
    uint16_t tick = TIM_GetCounter(m_TIMx);
    b890:	687b      	ldr	r3, [r7, #4]
    b892:	681b      	ldr	r3, [r3, #0]
    b894:	4618      	mov	r0, r3
    b896:	f7f8 fc73 	bl	4180 <TIM_GetCounter>
    b89a:	4603      	mov	r3, r0
    b89c:	81fb      	strh	r3, [r7, #14]

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b89e:	687b      	ldr	r3, [r7, #4]
    b8a0:	681b      	ldr	r3, [r3, #0]
    b8a2:	4618      	mov	r0, r3
    b8a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    b8a8:	f7f8 fb30 	bl	3f0c <TIM_SetCounter>

    return tick;
    b8ac:	89fb      	ldrh	r3, [r7, #14]
}
    b8ae:	4618      	mov	r0, r3
    b8b0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b8b4:	46bd      	mov	sp, r7
    b8b6:	bd80      	pop	{r7, pc}

0000b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>:
            break;
    }
}

// selectionne le capteur
void CapteurCouleur::activerCapteur(PositionCapteurCouleur position)
    b8b8:	b580      	push	{r7, lr}
    b8ba:	b082      	sub	sp, #8
    b8bc:	af00      	add	r7, sp, #0
    b8be:	6078      	str	r0, [r7, #4]
    b8c0:	460b      	mov	r3, r1
    b8c2:	70fb      	strb	r3, [r7, #3]
{
    // selection du capteur
    switch (position)
    b8c4:	78fb      	ldrb	r3, [r7, #3]
    b8c6:	2b03      	cmp	r3, #3
    b8c8:	d85d      	bhi.n	b986 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
    b8ca:	a201      	add	r2, pc, #4	(adr r2, b8d0 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0x18>)
    b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b8d0:	0000b8e1 	.word	0x0000b8e1
    b8d4:	0000b90b 	.word	0x0000b90b
    b8d8:	0000b935 	.word	0x0000b935
    b8dc:	0000b95f 	.word	0x0000b95f
    {
        case GAUCHE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b8e0:	687b      	ldr	r3, [r7, #4]
    b8e2:	695a      	ldr	r2, [r3, #20]
    b8e4:	687b      	ldr	r3, [r7, #4]
    b8e6:	8b1b      	ldrh	r3, [r3, #24]
    b8e8:	4610      	mov	r0, r2
    b8ea:	4619      	mov	r1, r3
    b8ec:	f04f 0200 	mov.w	r2, #0	; 0x0
    b8f0:	f7f6 f84c 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b8f4:	687b      	ldr	r3, [r7, #4]
    b8f6:	69da      	ldr	r2, [r3, #28]
    b8f8:	687b      	ldr	r3, [r7, #4]
    b8fa:	8c1b      	ldrh	r3, [r3, #32]
    b8fc:	4610      	mov	r0, r2
    b8fe:	4619      	mov	r1, r3
    b900:	f04f 0201 	mov.w	r2, #1	; 0x1
    b904:	f7f6 f842 	bl	198c <GPIO_WriteBit>
    b908:	e03d      	b.n	b986 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case GAUCHE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b90a:	687b      	ldr	r3, [r7, #4]
    b90c:	695a      	ldr	r2, [r3, #20]
    b90e:	687b      	ldr	r3, [r7, #4]
    b910:	8b1b      	ldrh	r3, [r3, #24]
    b912:	4610      	mov	r0, r2
    b914:	4619      	mov	r1, r3
    b916:	f04f 0201 	mov.w	r2, #1	; 0x1
    b91a:	f7f6 f837 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b91e:	687b      	ldr	r3, [r7, #4]
    b920:	69da      	ldr	r2, [r3, #28]
    b922:	687b      	ldr	r3, [r7, #4]
    b924:	8c1b      	ldrh	r3, [r3, #32]
    b926:	4610      	mov	r0, r2
    b928:	4619      	mov	r1, r3
    b92a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b92e:	f7f6 f82d 	bl	198c <GPIO_WriteBit>
    b932:	e028      	b.n	b986 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b934:	687b      	ldr	r3, [r7, #4]
    b936:	695a      	ldr	r2, [r3, #20]
    b938:	687b      	ldr	r3, [r7, #4]
    b93a:	8b1b      	ldrh	r3, [r3, #24]
    b93c:	4610      	mov	r0, r2
    b93e:	4619      	mov	r1, r3
    b940:	f04f 0200 	mov.w	r2, #0	; 0x0
    b944:	f7f6 f822 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b948:	687b      	ldr	r3, [r7, #4]
    b94a:	69da      	ldr	r2, [r3, #28]
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	8c1b      	ldrh	r3, [r3, #32]
    b950:	4610      	mov	r0, r2
    b952:	4619      	mov	r1, r3
    b954:	f04f 0200 	mov.w	r2, #0	; 0x0
    b958:	f7f6 f818 	bl	198c <GPIO_WriteBit>
    b95c:	e013      	b.n	b986 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b95e:	687b      	ldr	r3, [r7, #4]
    b960:	695a      	ldr	r2, [r3, #20]
    b962:	687b      	ldr	r3, [r7, #4]
    b964:	8b1b      	ldrh	r3, [r3, #24]
    b966:	4610      	mov	r0, r2
    b968:	4619      	mov	r1, r3
    b96a:	f04f 0201 	mov.w	r2, #1	; 0x1
    b96e:	f7f6 f80d 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b972:	687b      	ldr	r3, [r7, #4]
    b974:	69da      	ldr	r2, [r3, #28]
    b976:	687b      	ldr	r3, [r7, #4]
    b978:	8c1b      	ldrh	r3, [r3, #32]
    b97a:	4610      	mov	r0, r2
    b97c:	4619      	mov	r1, r3
    b97e:	f04f 0200 	mov.w	r2, #0	; 0x0
    b982:	f7f6 f803 	bl	198c <GPIO_WriteBit>
            break;
    }

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b986:	687b      	ldr	r3, [r7, #4]
    b988:	681b      	ldr	r3, [r3, #0]
    b98a:	4618      	mov	r0, r3
    b98c:	f04f 0100 	mov.w	r1, #0	; 0x0
    b990:	f7f8 fabc 	bl	3f0c <TIM_SetCounter>
}
    b994:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b998:	46bd      	mov	sp, r7
    b99a:	bd80      	pop	{r7, pc}

0000b99c <_ZN29CommandCalibrerCapteurCouleur6updateEv>:
    : capteurCouleur(capteur), state(0), resultat(0)
{
}

// récupère la valeur d'un capteur et passe à un autre
void CommandCalibrerCapteurCouleur::update()
    b99c:	b590      	push	{r4, r7, lr}
    b99e:	b083      	sub	sp, #12
    b9a0:	af00      	add	r7, sp, #0
    b9a2:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b9a4:	687b      	ldr	r3, [r7, #4]
    b9a6:	689b      	ldr	r3, [r3, #8]
    b9a8:	2b04      	cmp	r3, #4
    b9aa:	f200 8082 	bhi.w	bab2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
    b9ae:	a201      	add	r2, pc, #4	(adr r2, b9b4 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x18>)
    b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b9b4:	0000b9c9 	.word	0x0000b9c9
    b9b8:	0000b9e5 	.word	0x0000b9e5
    b9bc:	0000ba19 	.word	0x0000ba19
    b9c0:	0000ba4d 	.word	0x0000ba4d
    b9c4:	0000ba81 	.word	0x0000ba81
    {
        case 0:
            capteurCouleur->activerCapteur(GAUCHE_HAUT);
    b9c8:	687b      	ldr	r3, [r7, #4]
    b9ca:	685b      	ldr	r3, [r3, #4]
    b9cc:	4618      	mov	r0, r3
    b9ce:	f04f 0100 	mov.w	r1, #0	; 0x0
    b9d2:	f7ff ff71 	bl	b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b9d6:	687b      	ldr	r3, [r7, #4]
    b9d8:	689b      	ldr	r3, [r3, #8]
    b9da:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b9de:	687b      	ldr	r3, [r7, #4]
    b9e0:	609a      	str	r2, [r3, #8]
    b9e2:	e066      	b.n	bab2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 1:
            resultat += capteurCouleur->getTickValue();
    b9e4:	687b      	ldr	r3, [r7, #4]
    b9e6:	899c      	ldrh	r4, [r3, #12]
    b9e8:	687b      	ldr	r3, [r7, #4]
    b9ea:	685b      	ldr	r3, [r3, #4]
    b9ec:	4618      	mov	r0, r3
    b9ee:	f7ff ff4b 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    b9f2:	4603      	mov	r3, r0
    b9f4:	4423      	add	r3, r4
    b9f6:	b29b      	uxth	r3, r3
    b9f8:	687a      	ldr	r2, [r7, #4]
    b9fa:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(GAUCHE_BAS);
    b9fc:	687b      	ldr	r3, [r7, #4]
    b9fe:	685b      	ldr	r3, [r3, #4]
    ba00:	4618      	mov	r0, r3
    ba02:	f04f 0101 	mov.w	r1, #1	; 0x1
    ba06:	f7ff ff57 	bl	b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    ba0a:	687b      	ldr	r3, [r7, #4]
    ba0c:	689b      	ldr	r3, [r3, #8]
    ba0e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    ba12:	687b      	ldr	r3, [r7, #4]
    ba14:	609a      	str	r2, [r3, #8]
    ba16:	e04c      	b.n	bab2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 2:
            resultat += capteurCouleur->getTickValue();
    ba18:	687b      	ldr	r3, [r7, #4]
    ba1a:	899c      	ldrh	r4, [r3, #12]
    ba1c:	687b      	ldr	r3, [r7, #4]
    ba1e:	685b      	ldr	r3, [r3, #4]
    ba20:	4618      	mov	r0, r3
    ba22:	f7ff ff31 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    ba26:	4603      	mov	r3, r0
    ba28:	4423      	add	r3, r4
    ba2a:	b29b      	uxth	r3, r3
    ba2c:	687a      	ldr	r2, [r7, #4]
    ba2e:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_HAUT);
    ba30:	687b      	ldr	r3, [r7, #4]
    ba32:	685b      	ldr	r3, [r3, #4]
    ba34:	4618      	mov	r0, r3
    ba36:	f04f 0102 	mov.w	r1, #2	; 0x2
    ba3a:	f7ff ff3d 	bl	b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    ba3e:	687b      	ldr	r3, [r7, #4]
    ba40:	689b      	ldr	r3, [r3, #8]
    ba42:	f103 0201 	add.w	r2, r3, #1	; 0x1
    ba46:	687b      	ldr	r3, [r7, #4]
    ba48:	609a      	str	r2, [r3, #8]
    ba4a:	e032      	b.n	bab2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 3:
            resultat += capteurCouleur->getTickValue();
    ba4c:	687b      	ldr	r3, [r7, #4]
    ba4e:	899c      	ldrh	r4, [r3, #12]
    ba50:	687b      	ldr	r3, [r7, #4]
    ba52:	685b      	ldr	r3, [r3, #4]
    ba54:	4618      	mov	r0, r3
    ba56:	f7ff ff17 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    ba5a:	4603      	mov	r3, r0
    ba5c:	4423      	add	r3, r4
    ba5e:	b29b      	uxth	r3, r3
    ba60:	687a      	ldr	r2, [r7, #4]
    ba62:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_BAS);
    ba64:	687b      	ldr	r3, [r7, #4]
    ba66:	685b      	ldr	r3, [r3, #4]
    ba68:	4618      	mov	r0, r3
    ba6a:	f04f 0103 	mov.w	r1, #3	; 0x3
    ba6e:	f7ff ff23 	bl	b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    ba72:	687b      	ldr	r3, [r7, #4]
    ba74:	689b      	ldr	r3, [r3, #8]
    ba76:	f103 0201 	add.w	r2, r3, #1	; 0x1
    ba7a:	687b      	ldr	r3, [r7, #4]
    ba7c:	609a      	str	r2, [r3, #8]
    ba7e:	e018      	b.n	bab2 <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 4:
            resultat += capteurCouleur->getTickValue();
    ba80:	687b      	ldr	r3, [r7, #4]
    ba82:	899c      	ldrh	r4, [r3, #12]
    ba84:	687b      	ldr	r3, [r7, #4]
    ba86:	685b      	ldr	r3, [r3, #4]
    ba88:	4618      	mov	r0, r3
    ba8a:	f7ff fefd 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    ba8e:	4603      	mov	r3, r0
    ba90:	4423      	add	r3, r4
    ba92:	b29b      	uxth	r3, r3
    ba94:	687a      	ldr	r2, [r7, #4]
    ba96:	8193      	strh	r3, [r2, #12]
            resultat /= 4;
    ba98:	687b      	ldr	r3, [r7, #4]
    ba9a:	899b      	ldrh	r3, [r3, #12]
    ba9c:	ea4f 0393 	mov.w	r3, r3, lsr #2
    baa0:	b29b      	uxth	r3, r3
    baa2:	687a      	ldr	r2, [r7, #4]
    baa4:	8193      	strh	r3, [r2, #12]
            state++;
    baa6:	687b      	ldr	r3, [r7, #4]
    baa8:	689b      	ldr	r3, [r3, #8]
    baaa:	f103 0201 	add.w	r2, r3, #1	; 0x1
    baae:	687b      	ldr	r3, [r7, #4]
    bab0:	609a      	str	r2, [r3, #8]
            break;
    }
}
    bab2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    bab6:	46bd      	mov	sp, r7
    bab8:	bd90      	pop	{r4, r7, pc}
    baba:	46c0      	nop			(mov r8, r8)

0000babc <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur>:
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
}

// selectionne un filtre
void CapteurCouleur::selectionnerFiltre(FiltreCapteurCouleur filtre)
    babc:	b580      	push	{r7, lr}
    babe:	b082      	sub	sp, #8
    bac0:	af00      	add	r7, sp, #0
    bac2:	6078      	str	r0, [r7, #4]
    bac4:	460b      	mov	r3, r1
    bac6:	70fb      	strb	r3, [r7, #3]
{
    switch (filtre)
    bac8:	78fb      	ldrb	r3, [r7, #3]
    baca:	2b03      	cmp	r3, #3
    bacc:	d85d      	bhi.n	bb8a <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
    bace:	a201      	add	r2, pc, #4	(adr r2, bad4 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0x18>)
    bad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bad4:	0000bae5 	.word	0x0000bae5
    bad8:	0000bb63 	.word	0x0000bb63
    badc:	0000bb0f 	.word	0x0000bb0f
    bae0:	0000bb39 	.word	0x0000bb39
    {
        case FILTRE_ROUGE:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    bae4:	687b      	ldr	r3, [r7, #4]
    bae6:	6a5a      	ldr	r2, [r3, #36]
    bae8:	687b      	ldr	r3, [r7, #4]
    baea:	8d1b      	ldrh	r3, [r3, #40]
    baec:	4610      	mov	r0, r2
    baee:	4619      	mov	r1, r3
    baf0:	f04f 0200 	mov.w	r2, #0	; 0x0
    baf4:	f7f5 ff4a 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    baf8:	687b      	ldr	r3, [r7, #4]
    bafa:	6ada      	ldr	r2, [r3, #44]
    bafc:	687b      	ldr	r3, [r7, #4]
    bafe:	8e1b      	ldrh	r3, [r3, #48]
    bb00:	4610      	mov	r0, r2
    bb02:	4619      	mov	r1, r3
    bb04:	f04f 0200 	mov.w	r2, #0	; 0x0
    bb08:	f7f5 ff40 	bl	198c <GPIO_WriteBit>
    bb0c:	e03d      	b.n	bb8a <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>

            break;
        case FILTRE_BLEU:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    bb0e:	687b      	ldr	r3, [r7, #4]
    bb10:	6a5a      	ldr	r2, [r3, #36]
    bb12:	687b      	ldr	r3, [r7, #4]
    bb14:	8d1b      	ldrh	r3, [r3, #40]
    bb16:	4610      	mov	r0, r2
    bb18:	4619      	mov	r1, r3
    bb1a:	f04f 0201 	mov.w	r2, #1	; 0x1
    bb1e:	f7f5 ff35 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    bb22:	687b      	ldr	r3, [r7, #4]
    bb24:	6ada      	ldr	r2, [r3, #44]
    bb26:	687b      	ldr	r3, [r7, #4]
    bb28:	8e1b      	ldrh	r3, [r3, #48]
    bb2a:	4610      	mov	r0, r2
    bb2c:	4619      	mov	r1, r3
    bb2e:	f04f 0200 	mov.w	r2, #0	; 0x0
    bb32:	f7f5 ff2b 	bl	198c <GPIO_WriteBit>
    bb36:	e028      	b.n	bb8a <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_BLANC:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    bb38:	687b      	ldr	r3, [r7, #4]
    bb3a:	6a5a      	ldr	r2, [r3, #36]
    bb3c:	687b      	ldr	r3, [r7, #4]
    bb3e:	8d1b      	ldrh	r3, [r3, #40]
    bb40:	4610      	mov	r0, r2
    bb42:	4619      	mov	r1, r3
    bb44:	f04f 0200 	mov.w	r2, #0	; 0x0
    bb48:	f7f5 ff20 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    bb4c:	687b      	ldr	r3, [r7, #4]
    bb4e:	6ada      	ldr	r2, [r3, #44]
    bb50:	687b      	ldr	r3, [r7, #4]
    bb52:	8e1b      	ldrh	r3, [r3, #48]
    bb54:	4610      	mov	r0, r2
    bb56:	4619      	mov	r1, r3
    bb58:	f04f 0201 	mov.w	r2, #1	; 0x1
    bb5c:	f7f5 ff16 	bl	198c <GPIO_WriteBit>
    bb60:	e013      	b.n	bb8a <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_VERT:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    bb62:	687b      	ldr	r3, [r7, #4]
    bb64:	6a5a      	ldr	r2, [r3, #36]
    bb66:	687b      	ldr	r3, [r7, #4]
    bb68:	8d1b      	ldrh	r3, [r3, #40]
    bb6a:	4610      	mov	r0, r2
    bb6c:	4619      	mov	r1, r3
    bb6e:	f04f 0201 	mov.w	r2, #1	; 0x1
    bb72:	f7f5 ff0b 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    bb76:	687b      	ldr	r3, [r7, #4]
    bb78:	6ada      	ldr	r2, [r3, #44]
    bb7a:	687b      	ldr	r3, [r7, #4]
    bb7c:	8e1b      	ldrh	r3, [r3, #48]
    bb7e:	4610      	mov	r0, r2
    bb80:	4619      	mov	r1, r3
    bb82:	f04f 0201 	mov.w	r2, #1	; 0x1
    bb86:	f7f5 ff01 	bl	198c <GPIO_WriteBit>
            break;
    }
}
    bb8a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bb8e:	46bd      	mov	sp, r7
    bb90:	bd80      	pop	{r7, pc}
    bb92:	46c0      	nop			(mov r8, r8)

0000bb94 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>:
void CapteurCouleur::allumerDiodesRouges(bool allumer)
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
}

void CapteurCouleur::allumerDiodesBleues(bool allumer)
    bb94:	b580      	push	{r7, lr}
    bb96:	b086      	sub	sp, #24
    bb98:	af00      	add	r7, sp, #0
    bb9a:	6178      	str	r0, [r7, #20]
    bb9c:	460b      	mov	r3, r1
    bb9e:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
    bba0:	697b      	ldr	r3, [r7, #20]
    bba2:	68db      	ldr	r3, [r3, #12]
    bba4:	607b      	str	r3, [r7, #4]
    bba6:	697b      	ldr	r3, [r7, #20]
    bba8:	8a1b      	ldrh	r3, [r3, #16]
    bbaa:	60bb      	str	r3, [r7, #8]
    bbac:	7cfb      	ldrb	r3, [r7, #19]
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d003      	beq.n	bbba <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x26>
    bbb2:	f04f 0301 	mov.w	r3, #1	; 0x1
    bbb6:	60fb      	str	r3, [r7, #12]
    bbb8:	e002      	b.n	bbc0 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x2c>
    bbba:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbbe:	60fb      	str	r3, [r7, #12]
    bbc0:	6878      	ldr	r0, [r7, #4]
    bbc2:	68b9      	ldr	r1, [r7, #8]
    bbc4:	68fa      	ldr	r2, [r7, #12]
    bbc6:	f7f5 fee1 	bl	198c <GPIO_WriteBit>
}
    bbca:	f107 0718 	add.w	r7, r7, #24	; 0x18
    bbce:	46bd      	mov	sp, r7
    bbd0:	bd80      	pop	{r7, pc}
    bbd2:	46c0      	nop			(mov r8, r8)

0000bbd4 <_ZN14CapteurCouleur19allumerDiodesRougesEb>:
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
}

// allume/éteint les diodes
void CapteurCouleur::allumerDiodesRouges(bool allumer)
    bbd4:	b580      	push	{r7, lr}
    bbd6:	b086      	sub	sp, #24
    bbd8:	af00      	add	r7, sp, #0
    bbda:	6178      	str	r0, [r7, #20]
    bbdc:	460b      	mov	r3, r1
    bbde:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
    bbe0:	697b      	ldr	r3, [r7, #20]
    bbe2:	685b      	ldr	r3, [r3, #4]
    bbe4:	607b      	str	r3, [r7, #4]
    bbe6:	697b      	ldr	r3, [r7, #20]
    bbe8:	891b      	ldrh	r3, [r3, #8]
    bbea:	60bb      	str	r3, [r7, #8]
    bbec:	7cfb      	ldrb	r3, [r7, #19]
    bbee:	2b00      	cmp	r3, #0
    bbf0:	d003      	beq.n	bbfa <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x26>
    bbf2:	f04f 0301 	mov.w	r3, #1	; 0x1
    bbf6:	60fb      	str	r3, [r7, #12]
    bbf8:	e002      	b.n	bc00 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x2c>
    bbfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbfe:	60fb      	str	r3, [r7, #12]
    bc00:	6878      	ldr	r0, [r7, #4]
    bc02:	68b9      	ldr	r1, [r7, #8]
    bc04:	68fa      	ldr	r2, [r7, #12]
    bc06:	f7f5 fec1 	bl	198c <GPIO_WriteBit>
}
    bc0a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    bc0e:	46bd      	mov	sp, r7
    bc10:	bd80      	pop	{r7, pc}
    bc12:	46c0      	nop			(mov r8, r8)

0000bc14 <_ZN19CommandCheckCouleur6updateEv>:
    capteur->activerCapteur(pos);
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
}

// check la couleur
void CommandCheckCouleur::update()
    bc14:	b580      	push	{r7, lr}
    bc16:	b082      	sub	sp, #8
    bc18:	af00      	add	r7, sp, #0
    bc1a:	6078      	str	r0, [r7, #4]
{
    switch (state)
    bc1c:	687b      	ldr	r3, [r7, #4]
    bc1e:	695b      	ldr	r3, [r3, #20]
    bc20:	2b03      	cmp	r3, #3
    bc22:	d875      	bhi.n	bd10 <_ZN19CommandCheckCouleur6updateEv+0xfc>
    bc24:	a201      	add	r2, pc, #4	(adr r2, bc2c <_ZN19CommandCheckCouleur6updateEv+0x18>)
    bc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bc2a:	46c0      	nop			(mov r8, r8)
    bc2c:	0000bc3d 	.word	0x0000bc3d
    bc30:	0000bc6b 	.word	0x0000bc6b
    bc34:	0000bcab 	.word	0x0000bcab
    bc38:	0000bcd9 	.word	0x0000bcd9
    {
        // attente d'allumage de la diode bleu
        case 0:
            if (nbUpdatesRestantes >=0)
    bc3c:	687b      	ldr	r3, [r7, #4]
    bc3e:	691b      	ldr	r3, [r3, #16]
    bc40:	2b00      	cmp	r3, #0
    bc42:	db06      	blt.n	bc52 <_ZN19CommandCheckCouleur6updateEv+0x3e>
                nbUpdatesRestantes--;
    bc44:	687b      	ldr	r3, [r7, #4]
    bc46:	691b      	ldr	r3, [r3, #16]
    bc48:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    bc4c:	687b      	ldr	r3, [r7, #4]
    bc4e:	611a      	str	r2, [r3, #16]
    bc50:	e05e      	b.n	bd10 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    bc52:	687b      	ldr	r3, [r7, #4]
    bc54:	695b      	ldr	r3, [r3, #20]
    bc56:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bc5a:	687b      	ldr	r3, [r7, #4]
    bc5c:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    bc5e:	687b      	ldr	r3, [r7, #4]
    bc60:	689b      	ldr	r3, [r3, #8]
    bc62:	4618      	mov	r0, r3
    bc64:	f7ff fe10 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    bc68:	e052      	b.n	bd10 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;

        // récupération de la valeur bleu
        case 1:
            bleuMesure = capteurCouleur->getTickValue();
    bc6a:	687b      	ldr	r3, [r7, #4]
    bc6c:	689b      	ldr	r3, [r3, #8]
    bc6e:	4618      	mov	r0, r3
    bc70:	f7ff fe0a 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    bc74:	4603      	mov	r3, r0
    bc76:	687a      	ldr	r2, [r7, #4]
    bc78:	8193      	strh	r3, [r2, #12]
            capteurCouleur->allumerDiodesBleues(false);
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	689b      	ldr	r3, [r3, #8]
    bc7e:	4618      	mov	r0, r3
    bc80:	f04f 0100 	mov.w	r1, #0	; 0x0
    bc84:	f7ff ff86 	bl	bb94 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(true);
    bc88:	687b      	ldr	r3, [r7, #4]
    bc8a:	689b      	ldr	r3, [r3, #8]
    bc8c:	4618      	mov	r0, r3
    bc8e:	f04f 0101 	mov.w	r1, #1	; 0x1
    bc92:	f7ff ff9f 	bl	bbd4 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            nbUpdatesRestantes = nbUpdatePourAllumerLed;
    bc96:	687a      	ldr	r2, [r7, #4]
    bc98:	f04f 030a 	mov.w	r3, #10	; 0xa
    bc9c:	6113      	str	r3, [r2, #16]
            state++;
    bc9e:	687b      	ldr	r3, [r7, #4]
    bca0:	695b      	ldr	r3, [r3, #20]
    bca2:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bca6:	687b      	ldr	r3, [r7, #4]
    bca8:	615a      	str	r2, [r3, #20]

        // attente d'allumage de la diode rouge
        case 2:
            if (nbUpdatesRestantes >=0)
    bcaa:	687b      	ldr	r3, [r7, #4]
    bcac:	691b      	ldr	r3, [r3, #16]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	db06      	blt.n	bcc0 <_ZN19CommandCheckCouleur6updateEv+0xac>
                nbUpdatesRestantes--;
    bcb2:	687b      	ldr	r3, [r7, #4]
    bcb4:	691b      	ldr	r3, [r3, #16]
    bcb6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    bcba:	687b      	ldr	r3, [r7, #4]
    bcbc:	611a      	str	r2, [r3, #16]
    bcbe:	e027      	b.n	bd10 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    bcc0:	687b      	ldr	r3, [r7, #4]
    bcc2:	695b      	ldr	r3, [r3, #20]
    bcc4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bcc8:	687b      	ldr	r3, [r7, #4]
    bcca:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    bccc:	687b      	ldr	r3, [r7, #4]
    bcce:	689b      	ldr	r3, [r3, #8]
    bcd0:	4618      	mov	r0, r3
    bcd2:	f7ff fdd9 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    bcd6:	e01b      	b.n	bd10 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;
        // récupération de la valeur bleu
        case 3:
            rougeMesure = capteurCouleur->getTickValue();
    bcd8:	687b      	ldr	r3, [r7, #4]
    bcda:	689b      	ldr	r3, [r3, #8]
    bcdc:	4618      	mov	r0, r3
    bcde:	f7ff fdd3 	bl	b888 <_ZN14CapteurCouleur12getTickValueEv>
    bce2:	4603      	mov	r3, r0
    bce4:	687a      	ldr	r2, [r7, #4]
    bce6:	81d3      	strh	r3, [r2, #14]
            capteurCouleur->allumerDiodesBleues(false);
    bce8:	687b      	ldr	r3, [r7, #4]
    bcea:	689b      	ldr	r3, [r3, #8]
    bcec:	4618      	mov	r0, r3
    bcee:	f04f 0100 	mov.w	r1, #0	; 0x0
    bcf2:	f7ff ff4f 	bl	bb94 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(false);
    bcf6:	687b      	ldr	r3, [r7, #4]
    bcf8:	689b      	ldr	r3, [r3, #8]
    bcfa:	4618      	mov	r0, r3
    bcfc:	f04f 0100 	mov.w	r1, #0	; 0x0
    bd00:	f7ff ff68 	bl	bbd4 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            state++;
    bd04:	687b      	ldr	r3, [r7, #4]
    bd06:	695b      	ldr	r3, [r3, #20]
    bd08:	f103 0201 	add.w	r2, r3, #1	; 0x1
    bd0c:	687b      	ldr	r3, [r7, #4]
    bd0e:	615a      	str	r2, [r3, #20]
    }
}
    bd10:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bd14:	46bd      	mov	sp, r7
    bd16:	bd80      	pop	{r7, pc}

0000bd18 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    bd18:	b580      	push	{r7, lr}
    bd1a:	b084      	sub	sp, #16
    bd1c:	af00      	add	r7, sp, #0
    bd1e:	60f8      	str	r0, [r7, #12]
    bd20:	60b9      	str	r1, [r7, #8]
    bd22:	4619      	mov	r1, r3
    bd24:	4613      	mov	r3, r2
    bd26:	71fb      	strb	r3, [r7, #7]
    bd28:	460b      	mov	r3, r1
    bd2a:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    bd2c:	68fb      	ldr	r3, [r7, #12]
    bd2e:	4618      	mov	r0, r3
    bd30:	f7fc f9fa 	bl	8128 <_ZN7CommandC2Ev>
    bd34:	68fa      	ldr	r2, [r7, #12]
    bd36:	4b18      	ldr	r3, [pc, #96]	(bd98 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    bd38:	6013      	str	r3, [r2, #0]
    bd3a:	68fa      	ldr	r2, [r7, #12]
    bd3c:	88bb      	ldrh	r3, [r7, #4]
    bd3e:	8093      	strh	r3, [r2, #4]
    bd40:	68fa      	ldr	r2, [r7, #12]
    bd42:	68bb      	ldr	r3, [r7, #8]
    bd44:	6093      	str	r3, [r2, #8]
    bd46:	68fa      	ldr	r2, [r7, #12]
    bd48:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd4c:	8193      	strh	r3, [r2, #12]
    bd4e:	68fa      	ldr	r2, [r7, #12]
    bd50:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd54:	81d3      	strh	r3, [r2, #14]
    bd56:	68fa      	ldr	r2, [r7, #12]
    bd58:	f04f 030a 	mov.w	r3, #10	; 0xa
    bd5c:	6113      	str	r3, [r2, #16]
    bd5e:	68fa      	ldr	r2, [r7, #12]
    bd60:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd64:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    bd66:	68b8      	ldr	r0, [r7, #8]
    bd68:	f04f 0101 	mov.w	r1, #1	; 0x1
    bd6c:	f7ff ff12 	bl	bb94 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    bd70:	68b8      	ldr	r0, [r7, #8]
    bd72:	f04f 0100 	mov.w	r1, #0	; 0x0
    bd76:	f7ff ff2d 	bl	bbd4 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    bd7a:	79fb      	ldrb	r3, [r7, #7]
    bd7c:	68b8      	ldr	r0, [r7, #8]
    bd7e:	4619      	mov	r1, r3
    bd80:	f7ff fd9a 	bl	b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    bd84:	68fa      	ldr	r2, [r7, #12]
    bd86:	f04f 030a 	mov.w	r3, #10	; 0xa
    bd8a:	6113      	str	r3, [r2, #16]
}
    bd8c:	68fb      	ldr	r3, [r7, #12]
    bd8e:	4618      	mov	r0, r3
    bd90:	f107 0710 	add.w	r7, r7, #16	; 0x10
    bd94:	46bd      	mov	sp, r7
    bd96:	bd80      	pop	{r7, pc}
    bd98:	00022290 	.word	0x00022290

0000bd9c <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    bd9c:	b580      	push	{r7, lr}
    bd9e:	b084      	sub	sp, #16
    bda0:	af00      	add	r7, sp, #0
    bda2:	60f8      	str	r0, [r7, #12]
    bda4:	60b9      	str	r1, [r7, #8]
    bda6:	4619      	mov	r1, r3
    bda8:	4613      	mov	r3, r2
    bdaa:	71fb      	strb	r3, [r7, #7]
    bdac:	460b      	mov	r3, r1
    bdae:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    bdb0:	68fb      	ldr	r3, [r7, #12]
    bdb2:	4618      	mov	r0, r3
    bdb4:	f7fc f9b8 	bl	8128 <_ZN7CommandC2Ev>
    bdb8:	68fa      	ldr	r2, [r7, #12]
    bdba:	4b18      	ldr	r3, [pc, #96]	(be1c <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    bdbc:	6013      	str	r3, [r2, #0]
    bdbe:	68fa      	ldr	r2, [r7, #12]
    bdc0:	88bb      	ldrh	r3, [r7, #4]
    bdc2:	8093      	strh	r3, [r2, #4]
    bdc4:	68fa      	ldr	r2, [r7, #12]
    bdc6:	68bb      	ldr	r3, [r7, #8]
    bdc8:	6093      	str	r3, [r2, #8]
    bdca:	68fa      	ldr	r2, [r7, #12]
    bdcc:	f04f 0300 	mov.w	r3, #0	; 0x0
    bdd0:	8193      	strh	r3, [r2, #12]
    bdd2:	68fa      	ldr	r2, [r7, #12]
    bdd4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bdd8:	81d3      	strh	r3, [r2, #14]
    bdda:	68fa      	ldr	r2, [r7, #12]
    bddc:	f04f 030a 	mov.w	r3, #10	; 0xa
    bde0:	6113      	str	r3, [r2, #16]
    bde2:	68fa      	ldr	r2, [r7, #12]
    bde4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bde8:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    bdea:	68b8      	ldr	r0, [r7, #8]
    bdec:	f04f 0101 	mov.w	r1, #1	; 0x1
    bdf0:	f7ff fed0 	bl	bb94 <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    bdf4:	68b8      	ldr	r0, [r7, #8]
    bdf6:	f04f 0100 	mov.w	r1, #0	; 0x0
    bdfa:	f7ff feeb 	bl	bbd4 <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    bdfe:	79fb      	ldrb	r3, [r7, #7]
    be00:	68b8      	ldr	r0, [r7, #8]
    be02:	4619      	mov	r1, r3
    be04:	f7ff fd58 	bl	b8b8 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    be08:	68fa      	ldr	r2, [r7, #12]
    be0a:	f04f 030a 	mov.w	r3, #10	; 0xa
    be0e:	6113      	str	r3, [r2, #16]
}
    be10:	68fb      	ldr	r3, [r7, #12]
    be12:	4618      	mov	r0, r3
    be14:	f107 0710 	add.w	r7, r7, #16	; 0x10
    be18:	46bd      	mov	sp, r7
    be1a:	bd80      	pop	{r7, pc}
    be1c:	00022290 	.word	0x00022290

0000be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>:

#include "capteurCouleur.h"
#include "timerHandler.h"

// permet d'initialiser une pin
void initialiserPinCapteur(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x)
    be20:	b580      	push	{r7, lr}
    be22:	b084      	sub	sp, #16
    be24:	af00      	add	r7, sp, #0
    be26:	6078      	str	r0, [r7, #4]
    be28:	460b      	mov	r3, r1
    be2a:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    be2c:	f04f 0310 	mov.w	r3, #16	; 0x10
    be30:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    be32:	f04f 0303 	mov.w	r3, #3	; 0x3
    be36:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_x;
    be38:	887b      	ldrh	r3, [r7, #2]
    be3a:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    be3c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    be40:	6878      	ldr	r0, [r7, #4]
    be42:	4619      	mov	r1, r3
    be44:	f7f5 fc34 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOx, GPIO_Pin_x, Bit_RESET);
    be48:	887b      	ldrh	r3, [r7, #2]
    be4a:	6878      	ldr	r0, [r7, #4]
    be4c:	4619      	mov	r1, r3
    be4e:	f04f 0200 	mov.w	r2, #0	; 0x0
    be52:	f7f5 fd9b 	bl	198c <GPIO_WriteBit>
}
    be56:	f107 0710 	add.w	r7, r7, #16	; 0x10
    be5a:	46bd      	mov	sp, r7
    be5c:	bd80      	pop	{r7, pc}
    be5e:	46c0      	nop			(mov r8, r8)

0000be60 <_ZN14CapteurCouleurC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    be60:	b580      	push	{r7, lr}
    be62:	b088      	sub	sp, #32
    be64:	af00      	add	r7, sp, #0
    be66:	60f8      	str	r0, [r7, #12]
    be68:	60b9      	str	r1, [r7, #8]
    be6a:	607a      	str	r2, [r7, #4]
    be6c:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    be6e:	68fa      	ldr	r2, [r7, #12]
    be70:	68bb      	ldr	r3, [r7, #8]
    be72:	6013      	str	r3, [r2, #0]
    be74:	68fa      	ldr	r2, [r7, #12]
    be76:	6abb      	ldr	r3, [r7, #40]
    be78:	6053      	str	r3, [r2, #4]
    be7a:	68fa      	ldr	r2, [r7, #12]
    be7c:	8dbb      	ldrh	r3, [r7, #44]
    be7e:	8113      	strh	r3, [r2, #8]
    be80:	68fa      	ldr	r2, [r7, #12]
    be82:	6b3b      	ldr	r3, [r7, #48]
    be84:	60d3      	str	r3, [r2, #12]
    be86:	68fa      	ldr	r2, [r7, #12]
    be88:	8ebb      	ldrh	r3, [r7, #52]
    be8a:	8213      	strh	r3, [r2, #16]
    be8c:	68fa      	ldr	r2, [r7, #12]
    be8e:	6bbb      	ldr	r3, [r7, #56]
    be90:	6153      	str	r3, [r2, #20]
    be92:	68fa      	ldr	r2, [r7, #12]
    be94:	8fbb      	ldrh	r3, [r7, #60]
    be96:	8313      	strh	r3, [r2, #24]
    be98:	68fa      	ldr	r2, [r7, #12]
    be9a:	6c3b      	ldr	r3, [r7, #64]
    be9c:	61d3      	str	r3, [r2, #28]
    be9e:	68fa      	ldr	r2, [r7, #12]
    bea0:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    bea4:	8413      	strh	r3, [r2, #32]
    bea6:	68fa      	ldr	r2, [r7, #12]
    bea8:	6cbb      	ldr	r3, [r7, #72]
    beaa:	6253      	str	r3, [r2, #36]
    beac:	68fa      	ldr	r2, [r7, #12]
    beae:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    beb2:	8513      	strh	r3, [r2, #40]
    beb4:	68fa      	ldr	r2, [r7, #12]
    beb6:	6d3b      	ldr	r3, [r7, #80]
    beb8:	62d3      	str	r3, [r2, #44]
    beba:	68fa      	ldr	r2, [r7, #12]
    bebc:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    bec0:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    bec2:	f04f 0348 	mov.w	r3, #72	; 0x48
    bec6:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    bec8:	f04f 0303 	mov.w	r3, #3	; 0x3
    becc:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    bece:	887b      	ldrh	r3, [r7, #2]
    bed0:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    bed2:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    bed6:	6878      	ldr	r0, [r7, #4]
    bed8:	4619      	mov	r1, r3
    beda:	f7f5 fbe9 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    bede:	68b8      	ldr	r0, [r7, #8]
    bee0:	f001 fcce 	bl	d880 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    bee4:	f04f 0300 	mov.w	r3, #0	; 0x0
    bee8:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    beea:	f04f 0300 	mov.w	r3, #0	; 0x0
    beee:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    bef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bef4:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    bef6:	f04f 0300 	mov.w	r3, #0	; 0x0
    befa:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    befc:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf00:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    bf02:	f107 0312 	add.w	r3, r7, #18	; 0x12
    bf06:	68b8      	ldr	r0, [r7, #8]
    bf08:	4619      	mov	r1, r3
    bf0a:	f7f6 fc95 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    bf0e:	68b8      	ldr	r0, [r7, #8]
    bf10:	f04f 0140 	mov.w	r1, #64	; 0x40
    bf14:	f04f 0200 	mov.w	r2, #0	; 0x0
    bf18:	f04f 0300 	mov.w	r3, #0	; 0x0
    bf1c:	f7f7 f976 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    bf20:	68b8      	ldr	r0, [r7, #8]
    bf22:	f04f 0101 	mov.w	r1, #1	; 0x1
    bf26:	f7f7 f87f 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    bf2a:	68b8      	ldr	r0, [r7, #8]
    bf2c:	f04f 0100 	mov.w	r1, #0	; 0x0
    bf30:	f7f7 ffec 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    bf34:	68fb      	ldr	r3, [r7, #12]
    bf36:	685a      	ldr	r2, [r3, #4]
    bf38:	68fb      	ldr	r3, [r7, #12]
    bf3a:	891b      	ldrh	r3, [r3, #8]
    bf3c:	4610      	mov	r0, r2
    bf3e:	4619      	mov	r1, r3
    bf40:	f7ff ff6e 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    bf44:	68fb      	ldr	r3, [r7, #12]
    bf46:	68da      	ldr	r2, [r3, #12]
    bf48:	68fb      	ldr	r3, [r7, #12]
    bf4a:	8a1b      	ldrh	r3, [r3, #16]
    bf4c:	4610      	mov	r0, r2
    bf4e:	4619      	mov	r1, r3
    bf50:	f7ff ff66 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    bf54:	68fb      	ldr	r3, [r7, #12]
    bf56:	695a      	ldr	r2, [r3, #20]
    bf58:	68fb      	ldr	r3, [r7, #12]
    bf5a:	8b1b      	ldrh	r3, [r3, #24]
    bf5c:	4610      	mov	r0, r2
    bf5e:	4619      	mov	r1, r3
    bf60:	f7ff ff5e 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    bf64:	68fb      	ldr	r3, [r7, #12]
    bf66:	69da      	ldr	r2, [r3, #28]
    bf68:	68fb      	ldr	r3, [r7, #12]
    bf6a:	8c1b      	ldrh	r3, [r3, #32]
    bf6c:	4610      	mov	r0, r2
    bf6e:	4619      	mov	r1, r3
    bf70:	f7ff ff56 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    bf74:	68fb      	ldr	r3, [r7, #12]
    bf76:	6a5a      	ldr	r2, [r3, #36]
    bf78:	68fb      	ldr	r3, [r7, #12]
    bf7a:	8d1b      	ldrh	r3, [r3, #40]
    bf7c:	4610      	mov	r0, r2
    bf7e:	4619      	mov	r1, r3
    bf80:	f7ff ff4e 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    bf84:	68fb      	ldr	r3, [r7, #12]
    bf86:	6ada      	ldr	r2, [r3, #44]
    bf88:	68fb      	ldr	r3, [r7, #12]
    bf8a:	8e1b      	ldrh	r3, [r3, #48]
    bf8c:	4610      	mov	r0, r2
    bf8e:	4619      	mov	r1, r3
    bf90:	f7ff ff46 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    bf94:	68fb      	ldr	r3, [r7, #12]
    bf96:	4618      	mov	r0, r3
    bf98:	f107 0720 	add.w	r7, r7, #32	; 0x20
    bf9c:	46bd      	mov	sp, r7
    bf9e:	bd80      	pop	{r7, pc}

0000bfa0 <_ZN14CapteurCouleurC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    bfa0:	b580      	push	{r7, lr}
    bfa2:	b088      	sub	sp, #32
    bfa4:	af00      	add	r7, sp, #0
    bfa6:	60f8      	str	r0, [r7, #12]
    bfa8:	60b9      	str	r1, [r7, #8]
    bfaa:	607a      	str	r2, [r7, #4]
    bfac:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    bfae:	68fa      	ldr	r2, [r7, #12]
    bfb0:	68bb      	ldr	r3, [r7, #8]
    bfb2:	6013      	str	r3, [r2, #0]
    bfb4:	68fa      	ldr	r2, [r7, #12]
    bfb6:	6abb      	ldr	r3, [r7, #40]
    bfb8:	6053      	str	r3, [r2, #4]
    bfba:	68fa      	ldr	r2, [r7, #12]
    bfbc:	8dbb      	ldrh	r3, [r7, #44]
    bfbe:	8113      	strh	r3, [r2, #8]
    bfc0:	68fa      	ldr	r2, [r7, #12]
    bfc2:	6b3b      	ldr	r3, [r7, #48]
    bfc4:	60d3      	str	r3, [r2, #12]
    bfc6:	68fa      	ldr	r2, [r7, #12]
    bfc8:	8ebb      	ldrh	r3, [r7, #52]
    bfca:	8213      	strh	r3, [r2, #16]
    bfcc:	68fa      	ldr	r2, [r7, #12]
    bfce:	6bbb      	ldr	r3, [r7, #56]
    bfd0:	6153      	str	r3, [r2, #20]
    bfd2:	68fa      	ldr	r2, [r7, #12]
    bfd4:	8fbb      	ldrh	r3, [r7, #60]
    bfd6:	8313      	strh	r3, [r2, #24]
    bfd8:	68fa      	ldr	r2, [r7, #12]
    bfda:	6c3b      	ldr	r3, [r7, #64]
    bfdc:	61d3      	str	r3, [r2, #28]
    bfde:	68fa      	ldr	r2, [r7, #12]
    bfe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    bfe4:	8413      	strh	r3, [r2, #32]
    bfe6:	68fa      	ldr	r2, [r7, #12]
    bfe8:	6cbb      	ldr	r3, [r7, #72]
    bfea:	6253      	str	r3, [r2, #36]
    bfec:	68fa      	ldr	r2, [r7, #12]
    bfee:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    bff2:	8513      	strh	r3, [r2, #40]
    bff4:	68fa      	ldr	r2, [r7, #12]
    bff6:	6d3b      	ldr	r3, [r7, #80]
    bff8:	62d3      	str	r3, [r2, #44]
    bffa:	68fa      	ldr	r2, [r7, #12]
    bffc:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    c000:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c002:	f04f 0348 	mov.w	r3, #72	; 0x48
    c006:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    c008:	f04f 0303 	mov.w	r3, #3	; 0x3
    c00c:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    c00e:	887b      	ldrh	r3, [r7, #2]
    c010:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    c012:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    c016:	6878      	ldr	r0, [r7, #4]
    c018:	4619      	mov	r1, r3
    c01a:	f7f5 fb49 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    c01e:	68b8      	ldr	r0, [r7, #8]
    c020:	f001 fc2e 	bl	d880 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    c024:	f04f 0300 	mov.w	r3, #0	; 0x0
    c028:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    c02a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c02e:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    c030:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c034:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    c036:	f04f 0300 	mov.w	r3, #0	; 0x0
    c03a:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    c03c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c040:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    c042:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c046:	68b8      	ldr	r0, [r7, #8]
    c048:	4619      	mov	r1, r3
    c04a:	f7f6 fbf5 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    c04e:	68b8      	ldr	r0, [r7, #8]
    c050:	f04f 0140 	mov.w	r1, #64	; 0x40
    c054:	f04f 0200 	mov.w	r2, #0	; 0x0
    c058:	f04f 0300 	mov.w	r3, #0	; 0x0
    c05c:	f7f7 f8d6 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    c060:	68b8      	ldr	r0, [r7, #8]
    c062:	f04f 0101 	mov.w	r1, #1	; 0x1
    c066:	f7f6 ffdf 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    c06a:	68b8      	ldr	r0, [r7, #8]
    c06c:	f04f 0100 	mov.w	r1, #0	; 0x0
    c070:	f7f7 ff4c 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    c074:	68fb      	ldr	r3, [r7, #12]
    c076:	685a      	ldr	r2, [r3, #4]
    c078:	68fb      	ldr	r3, [r7, #12]
    c07a:	891b      	ldrh	r3, [r3, #8]
    c07c:	4610      	mov	r0, r2
    c07e:	4619      	mov	r1, r3
    c080:	f7ff fece 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    c084:	68fb      	ldr	r3, [r7, #12]
    c086:	68da      	ldr	r2, [r3, #12]
    c088:	68fb      	ldr	r3, [r7, #12]
    c08a:	8a1b      	ldrh	r3, [r3, #16]
    c08c:	4610      	mov	r0, r2
    c08e:	4619      	mov	r1, r3
    c090:	f7ff fec6 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    c094:	68fb      	ldr	r3, [r7, #12]
    c096:	695a      	ldr	r2, [r3, #20]
    c098:	68fb      	ldr	r3, [r7, #12]
    c09a:	8b1b      	ldrh	r3, [r3, #24]
    c09c:	4610      	mov	r0, r2
    c09e:	4619      	mov	r1, r3
    c0a0:	f7ff febe 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    c0a4:	68fb      	ldr	r3, [r7, #12]
    c0a6:	69da      	ldr	r2, [r3, #28]
    c0a8:	68fb      	ldr	r3, [r7, #12]
    c0aa:	8c1b      	ldrh	r3, [r3, #32]
    c0ac:	4610      	mov	r0, r2
    c0ae:	4619      	mov	r1, r3
    c0b0:	f7ff feb6 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    c0b4:	68fb      	ldr	r3, [r7, #12]
    c0b6:	6a5a      	ldr	r2, [r3, #36]
    c0b8:	68fb      	ldr	r3, [r7, #12]
    c0ba:	8d1b      	ldrh	r3, [r3, #40]
    c0bc:	4610      	mov	r0, r2
    c0be:	4619      	mov	r1, r3
    c0c0:	f7ff feae 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    c0c4:	68fb      	ldr	r3, [r7, #12]
    c0c6:	6ada      	ldr	r2, [r3, #44]
    c0c8:	68fb      	ldr	r3, [r7, #12]
    c0ca:	8e1b      	ldrh	r3, [r3, #48]
    c0cc:	4610      	mov	r0, r2
    c0ce:	4619      	mov	r1, r3
    c0d0:	f7ff fea6 	bl	be20 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    c0d4:	68fb      	ldr	r3, [r7, #12]
    c0d6:	4618      	mov	r0, r3
    c0d8:	f107 0720 	add.w	r7, r7, #32	; 0x20
    c0dc:	46bd      	mov	sp, r7
    c0de:	bd80      	pop	{r7, pc}

0000c0e0 <_ZN8Capteurs15getNbrOfChannelEv>:
    if (!isConverted)
        convertirDonnees();
    return (output[direction] & 0xff) == 0xff;
}

uint8_t Capteurs::getNbrOfChannel(){
    c0e0:	b480      	push	{r7}
    c0e2:	b083      	sub	sp, #12
    c0e4:	af00      	add	r7, sp, #0
    c0e6:	6078      	str	r0, [r7, #4]
    return NbrOfChannel;
    c0e8:	687b      	ldr	r3, [r7, #4]
    c0ea:	781b      	ldrb	r3, [r3, #0]
}
    c0ec:	4618      	mov	r0, r3
    c0ee:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c0f2:	46bd      	mov	sp, r7
    c0f4:	bc80      	pop	{r7}
    c0f6:	4770      	bx	lr

0000c0f8 <_ZN8Capteurs18conversionFinishedEv>:
{
    isConverted = false;
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
}

bool Capteurs::conversionFinished()
    c0f8:	b580      	push	{r7, lr}
    c0fa:	b082      	sub	sp, #8
    c0fc:	af00      	add	r7, sp, #0
    c0fe:	6078      	str	r0, [r7, #4]
{
    //return (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET);
    return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    c100:	f04f 0002 	mov.w	r0, #2	; 0x2
    c104:	f7f5 f87c 	bl	1200 <DMA_GetFlagStatus>
    c108:	4603      	mov	r3, r0
    c10a:	2b00      	cmp	r3, #0
    c10c:	bf0c      	ite	eq
    c10e:	2300      	moveq	r3, #0
    c110:	2301      	movne	r3, #1
    c112:	b2db      	uxtb	r3, r3
}
    c114:	4618      	mov	r0, r3
    c116:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c11a:	46bd      	mov	sp, r7
    c11c:	bd80      	pop	{r7, pc}
    c11e:	46c0      	nop			(mov r8, r8)

0000c120 <_ZN8Capteurs16convertirDonneesEv>:

void Capteurs::convertirDonnees()
    c120:	b580      	push	{r7, lr}
    c122:	b084      	sub	sp, #16
    c124:	af00      	add	r7, sp, #0
    c126:	6078      	str	r0, [r7, #4]
{
    isConverted = true;
    c128:	687b      	ldr	r3, [r7, #4]
    c12a:	f04f 0201 	mov.w	r2, #1	; 0x1
    c12e:	739a      	strb	r2, [r3, #14]
    while (!conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    c130:	6878      	ldr	r0, [r7, #4]
    c132:	f7ff ffe1 	bl	c0f8 <_ZN8Capteurs18conversionFinishedEv>
    c136:	4603      	mov	r3, r0
    c138:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    c13c:	b2db      	uxtb	r3, r3
    c13e:	2b00      	cmp	r3, #0
    c140:	d1f6      	bne.n	c130 <_ZN8Capteurs16convertirDonneesEv+0x10>
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    c142:	f04f 0300 	mov.w	r3, #0	; 0x0
    c146:	60fb      	str	r3, [r7, #12]
    c148:	e032      	b.n	c1b0 <_ZN8Capteurs16convertirDonneesEv+0x90>
        output[i] <<= 1;
    c14a:	687b      	ldr	r3, [r7, #4]
    c14c:	689a      	ldr	r2, [r3, #8]
    c14e:	68fb      	ldr	r3, [r7, #12]
    c150:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c154:	eb02 0103 	add.w	r1, r2, r3
    c158:	687b      	ldr	r3, [r7, #4]
    c15a:	689a      	ldr	r2, [r3, #8]
    c15c:	68fb      	ldr	r3, [r7, #12]
    c15e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c162:	4413      	add	r3, r2
    c164:	681b      	ldr	r3, [r3, #0]
    c166:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c16a:	600b      	str	r3, [r1, #0]
        output[i] |= (data[i] > threshold);
    c16c:	687b      	ldr	r3, [r7, #4]
    c16e:	689a      	ldr	r2, [r3, #8]
    c170:	68fb      	ldr	r3, [r7, #12]
    c172:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c176:	eb02 0103 	add.w	r1, r2, r3
    c17a:	687b      	ldr	r3, [r7, #4]
    c17c:	689a      	ldr	r2, [r3, #8]
    c17e:	68fb      	ldr	r3, [r7, #12]
    c180:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c184:	4413      	add	r3, r2
    c186:	6818      	ldr	r0, [r3, #0]
    c188:	687b      	ldr	r3, [r7, #4]
    c18a:	685a      	ldr	r2, [r3, #4]
    c18c:	68fb      	ldr	r3, [r7, #12]
    c18e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c192:	4413      	add	r3, r2
    c194:	881a      	ldrh	r2, [r3, #0]
    c196:	687b      	ldr	r3, [r7, #4]
    c198:	899b      	ldrh	r3, [r3, #12]
    c19a:	429a      	cmp	r2, r3
    c19c:	bf94      	ite	ls
    c19e:	2300      	movls	r3, #0
    c1a0:	2301      	movhi	r3, #1
    c1a2:	ea40 0303 	orr.w	r3, r0, r3
    c1a6:	600b      	str	r3, [r1, #0]
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    c1a8:	68fb      	ldr	r3, [r7, #12]
    c1aa:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c1ae:	60fb      	str	r3, [r7, #12]
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	781b      	ldrb	r3, [r3, #0]
    c1b4:	461a      	mov	r2, r3
    c1b6:	68fb      	ldr	r3, [r7, #12]
    c1b8:	429a      	cmp	r2, r3
    c1ba:	dcc6      	bgt.n	c14a <_ZN8Capteurs16convertirDonneesEv+0x2a>
        output[i] <<= 1;
        output[i] |= (data[i] > threshold);
    }
}
    c1bc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c1c0:	46bd      	mov	sp, r7
    c1c2:	bd80      	pop	{r7, pc}

0000c1c4 <_ZN8Capteurs8getValueENS_9DirectionE>:

uint16_t Capteurs::getValue(Capteurs::Direction direction) // Retourne vrai si et seulement si le seuil du capteur a été dépassé pendant plus de 8 coups d'horloge car àxff = 8bits à 1
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b082      	sub	sp, #8
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	6078      	str	r0, [r7, #4]
    c1cc:	460b      	mov	r3, r1
    c1ce:	70fb      	strb	r3, [r7, #3]
{
    if (!isConverted)
    c1d0:	687b      	ldr	r3, [r7, #4]
    c1d2:	7b9b      	ldrb	r3, [r3, #14]
    c1d4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    c1d8:	b2db      	uxtb	r3, r3
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d002      	beq.n	c1e4 <_ZN8Capteurs8getValueENS_9DirectionE+0x20>
        convertirDonnees();
    c1de:	6878      	ldr	r0, [r7, #4]
    c1e0:	f7ff ff9e 	bl	c120 <_ZN8Capteurs16convertirDonneesEv>
    return (output[direction] & 0xff) == 0xff;
    c1e4:	687b      	ldr	r3, [r7, #4]
    c1e6:	689a      	ldr	r2, [r3, #8]
    c1e8:	78fb      	ldrb	r3, [r7, #3]
    c1ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c1ee:	4413      	add	r3, r2
    c1f0:	681b      	ldr	r3, [r3, #0]
    c1f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c1f6:	2bff      	cmp	r3, #255
    c1f8:	bf14      	ite	ne
    c1fa:	2300      	movne	r3, #0
    c1fc:	2301      	moveq	r3, #1
}
    c1fe:	4618      	mov	r0, r3
    c200:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c204:	46bd      	mov	sp, r7
    c206:	bd80      	pop	{r7, pc}

0000c208 <_ZN8Capteurs15startConversionEv>:
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    DMA_Cmd(DMA1_Channel1, ENABLE);
}

void Capteurs::startConversion()
    c208:	b580      	push	{r7, lr}
    c20a:	b082      	sub	sp, #8
    c20c:	af00      	add	r7, sp, #0
    c20e:	6078      	str	r0, [r7, #4]
{
    isConverted = false;
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	f04f 0200 	mov.w	r2, #0	; 0x0
    c216:	739a      	strb	r2, [r3, #14]
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    c218:	4804      	ldr	r0, [pc, #16]	(c22c <_ZN8Capteurs15startConversionEv+0x24>)
    c21a:	f04f 0101 	mov.w	r1, #1	; 0x1
    c21e:	f7f4 fa3b 	bl	698 <ADC_SoftwareStartConvCmd>
}
    c222:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c226:	46bd      	mov	sp, r7
    c228:	bd80      	pop	{r7, pc}
    c22a:	46c0      	nop			(mov r8, r8)
    c22c:	40012400 	.word	0x40012400

0000c230 <_ZN8CapteursC1Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    c230:	b580      	push	{r7, lr}
    c232:	b096      	sub	sp, #88
    c234:	af00      	add	r7, sp, #0
    c236:	6078      	str	r0, [r7, #4]
    c238:	687a      	ldr	r2, [r7, #4]
    c23a:	f640 13c4 	movw	r3, #2500	; 0x9c4
    c23e:	8193      	strh	r3, [r2, #12]
    c240:	687a      	ldr	r2, [r7, #4]
    c242:	f04f 0300 	mov.w	r3, #0	; 0x0
    c246:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    c248:	4b67      	ldr	r3, [pc, #412]	(c3e8 <_ZN8CapteursC1Ev+0x1b8>)
    c24a:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    c24e:	f04f 0c05 	mov.w	ip, #5	; 0x5
    c252:	4610      	mov	r0, r2
    c254:	4619      	mov	r1, r3
    c256:	4662      	mov	r2, ip
    c258:	f014 fdac 	bl	20db4 <memcpy>
        NbrOfChannel = 5;
    c25c:	687a      	ldr	r2, [r7, #4]
    c25e:	f04f 0305 	mov.w	r3, #5	; 0x5
    c262:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    c264:	687b      	ldr	r3, [r7, #4]
    c266:	781b      	ldrb	r3, [r3, #0]
    c268:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c26c:	4618      	mov	r0, r3
    c26e:	f002 fcd7 	bl	ec20 <_Znaj>
    c272:	4603      	mov	r3, r0
    c274:	461a      	mov	r2, r3
    c276:	687b      	ldr	r3, [r7, #4]
    c278:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    c27a:	687b      	ldr	r3, [r7, #4]
    c27c:	781b      	ldrb	r3, [r3, #0]
    c27e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c282:	4618      	mov	r0, r3
    c284:	f002 fccc 	bl	ec20 <_Znaj>
    c288:	4603      	mov	r3, r0
    c28a:	461a      	mov	r2, r3
    c28c:	687b      	ldr	r3, [r7, #4]
    c28e:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c290:	f04f 0300 	mov.w	r3, #0	; 0x0
    c294:	653b      	str	r3, [r7, #80]
    c296:	e00c      	b.n	c2b2 <_ZN8CapteursC1Ev+0x82>
        output[i] = 0;
    c298:	687b      	ldr	r3, [r7, #4]
    c29a:	689a      	ldr	r2, [r3, #8]
    c29c:	6d3b      	ldr	r3, [r7, #80]
    c29e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c2a2:	441a      	add	r2, r3
    c2a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2a8:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c2aa:	6d3b      	ldr	r3, [r7, #80]
    c2ac:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c2b0:	653b      	str	r3, [r7, #80]
    c2b2:	687b      	ldr	r3, [r7, #4]
    c2b4:	781b      	ldrb	r3, [r3, #0]
    c2b6:	461a      	mov	r2, r3
    c2b8:	6d3b      	ldr	r3, [r7, #80]
    c2ba:	429a      	cmp	r2, r3
    c2bc:	d8ec      	bhi.n	c298 <_ZN8CapteursC1Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    c2be:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2c2:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    c2c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    c2c8:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    c2cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2d0:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    c2d4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    c2d8:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    c2da:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2de:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	781b      	ldrb	r3, [r3, #0]
    c2e4:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    c2e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c2ec:	483f      	ldr	r0, [pc, #252]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c2ee:	4619      	mov	r1, r3
    c2f0:	f7f4 f89a 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    c2f4:	483d      	ldr	r0, [pc, #244]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c2f6:	f04f 0101 	mov.w	r1, #1	; 0x1
    c2fa:	f7f4 f917 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    c2fe:	483b      	ldr	r0, [pc, #236]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c300:	f7f4 f972 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    c304:	4839      	ldr	r0, [pc, #228]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c306:	f7f4 f97f 	bl	608 <ADC_GetResetCalibrationStatus>
    c30a:	4603      	mov	r3, r0
    c30c:	2b00      	cmp	r3, #0
    c30e:	bf0c      	ite	eq
    c310:	2300      	moveq	r3, #0
    c312:	2301      	movne	r3, #1
    c314:	b2db      	uxtb	r3, r3
    c316:	2b00      	cmp	r3, #0
    c318:	d1f4      	bne.n	c304 <_ZN8CapteursC1Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    c31a:	4834      	ldr	r0, [pc, #208]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c31c:	f7f4 f990 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    c320:	4832      	ldr	r0, [pc, #200]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c322:	f7f4 f99d 	bl	660 <ADC_GetCalibrationStatus>
    c326:	4603      	mov	r3, r0
    c328:	2b00      	cmp	r3, #0
    c32a:	bf0c      	ite	eq
    c32c:	2300      	moveq	r3, #0
    c32e:	2301      	movne	r3, #1
    c330:	b2db      	uxtb	r3, r3
    c332:	2b00      	cmp	r3, #0
    c334:	d1f4      	bne.n	c320 <_ZN8CapteursC1Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c336:	f04f 0300 	mov.w	r3, #0	; 0x0
    c33a:	657b      	str	r3, [r7, #84]
    c33c:	e015      	b.n	c36a <_ZN8CapteursC1Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    c33e:	6d7b      	ldr	r3, [r7, #84]
    c340:	f107 0258 	add.w	r2, r7, #88	; 0x58
    c344:	4413      	add	r3, r2
    c346:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    c34a:	6d7b      	ldr	r3, [r7, #84]
    c34c:	b2db      	uxtb	r3, r3
    c34e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c352:	b2db      	uxtb	r3, r3
    c354:	4825      	ldr	r0, [pc, #148]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c356:	4611      	mov	r1, r2
    c358:	461a      	mov	r2, r3
    c35a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c35e:	f7f4 fa15 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c362:	6d7b      	ldr	r3, [r7, #84]
    c364:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c368:	657b      	str	r3, [r7, #84]
    c36a:	687b      	ldr	r3, [r7, #4]
    c36c:	781b      	ldrb	r3, [r3, #0]
    c36e:	461a      	mov	r2, r3
    c370:	6d7b      	ldr	r3, [r7, #84]
    c372:	429a      	cmp	r2, r3
    c374:	dce3      	bgt.n	c33e <_ZN8CapteursC1Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    c376:	481d      	ldr	r0, [pc, #116]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c378:	f04f 0101 	mov.w	r1, #1	; 0x1
    c37c:	f7f4 f8f2 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    c380:	4b1a      	ldr	r3, [pc, #104]	(c3ec <_ZN8CapteursC1Ev+0x1bc>)
    c382:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    c386:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    c388:	687b      	ldr	r3, [r7, #4]
    c38a:	685b      	ldr	r3, [r3, #4]
    c38c:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    c38e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c392:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    c394:	687b      	ldr	r3, [r7, #4]
    c396:	781b      	ldrb	r3, [r3, #0]
    c398:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    c39a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c39e:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    c3a0:	f04f 0380 	mov.w	r3, #128	; 0x80
    c3a4:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    c3a6:	f44f 7300 	mov.w	r3, #512	; 0x200
    c3aa:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    c3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c3b0:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    c3b2:	f04f 0320 	mov.w	r3, #32	; 0x20
    c3b6:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    c3b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c3bc:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    c3be:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3c2:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    c3c4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c3c8:	4809      	ldr	r0, [pc, #36]	(c3f0 <_ZN8CapteursC1Ev+0x1c0>)
    c3ca:	4619      	mov	r1, r3
    c3cc:	f7f4 fe50 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    c3d0:	4807      	ldr	r0, [pc, #28]	(c3f0 <_ZN8CapteursC1Ev+0x1c0>)
    c3d2:	f04f 0101 	mov.w	r1, #1	; 0x1
    c3d6:	f7f4 fec9 	bl	116c <DMA_Cmd>
}
    c3da:	687b      	ldr	r3, [r7, #4]
    c3dc:	4618      	mov	r0, r3
    c3de:	f107 0758 	add.w	r7, r7, #88	; 0x58
    c3e2:	46bd      	mov	sp, r7
    c3e4:	bd80      	pop	{r7, pc}
    c3e6:	46c0      	nop			(mov r8, r8)
    c3e8:	000222d8 	.word	0x000222d8
    c3ec:	40012400 	.word	0x40012400
    c3f0:	40020008 	.word	0x40020008

0000c3f4 <_ZN8CapteursC2Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    c3f4:	b580      	push	{r7, lr}
    c3f6:	b096      	sub	sp, #88
    c3f8:	af00      	add	r7, sp, #0
    c3fa:	6078      	str	r0, [r7, #4]
    c3fc:	687a      	ldr	r2, [r7, #4]
    c3fe:	f640 13c4 	movw	r3, #2500	; 0x9c4
    c402:	8193      	strh	r3, [r2, #12]
    c404:	687a      	ldr	r2, [r7, #4]
    c406:	f04f 0300 	mov.w	r3, #0	; 0x0
    c40a:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    c40c:	4b67      	ldr	r3, [pc, #412]	(c5ac <_ZN8CapteursC2Ev+0x1b8>)
    c40e:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    c412:	f04f 0c05 	mov.w	ip, #5	; 0x5
    c416:	4610      	mov	r0, r2
    c418:	4619      	mov	r1, r3
    c41a:	4662      	mov	r2, ip
    c41c:	f014 fcca 	bl	20db4 <memcpy>
        NbrOfChannel = 5;
    c420:	687a      	ldr	r2, [r7, #4]
    c422:	f04f 0305 	mov.w	r3, #5	; 0x5
    c426:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    c428:	687b      	ldr	r3, [r7, #4]
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c430:	4618      	mov	r0, r3
    c432:	f002 fbf5 	bl	ec20 <_Znaj>
    c436:	4603      	mov	r3, r0
    c438:	461a      	mov	r2, r3
    c43a:	687b      	ldr	r3, [r7, #4]
    c43c:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    c43e:	687b      	ldr	r3, [r7, #4]
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c446:	4618      	mov	r0, r3
    c448:	f002 fbea 	bl	ec20 <_Znaj>
    c44c:	4603      	mov	r3, r0
    c44e:	461a      	mov	r2, r3
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c454:	f04f 0300 	mov.w	r3, #0	; 0x0
    c458:	653b      	str	r3, [r7, #80]
    c45a:	e00c      	b.n	c476 <_ZN8CapteursC2Ev+0x82>
        output[i] = 0;
    c45c:	687b      	ldr	r3, [r7, #4]
    c45e:	689a      	ldr	r2, [r3, #8]
    c460:	6d3b      	ldr	r3, [r7, #80]
    c462:	ea4f 0383 	mov.w	r3, r3, lsl #2
    c466:	441a      	add	r2, r3
    c468:	f04f 0300 	mov.w	r3, #0	; 0x0
    c46c:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    c46e:	6d3b      	ldr	r3, [r7, #80]
    c470:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c474:	653b      	str	r3, [r7, #80]
    c476:	687b      	ldr	r3, [r7, #4]
    c478:	781b      	ldrb	r3, [r3, #0]
    c47a:	461a      	mov	r2, r3
    c47c:	6d3b      	ldr	r3, [r7, #80]
    c47e:	429a      	cmp	r2, r3
    c480:	d8ec      	bhi.n	c45c <_ZN8CapteursC2Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    c482:	f04f 0300 	mov.w	r3, #0	; 0x0
    c486:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    c488:	f04f 0301 	mov.w	r3, #1	; 0x1
    c48c:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    c490:	f04f 0300 	mov.w	r3, #0	; 0x0
    c494:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    c498:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    c49c:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    c49e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4a2:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    c4a4:	687b      	ldr	r3, [r7, #4]
    c4a6:	781b      	ldrb	r3, [r3, #0]
    c4a8:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    c4ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
    c4b0:	483f      	ldr	r0, [pc, #252]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c4b2:	4619      	mov	r1, r3
    c4b4:	f7f3 ffb8 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    c4b8:	483d      	ldr	r0, [pc, #244]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c4ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    c4be:	f7f4 f835 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    c4c2:	483b      	ldr	r0, [pc, #236]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c4c4:	f7f4 f890 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    c4c8:	4839      	ldr	r0, [pc, #228]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c4ca:	f7f4 f89d 	bl	608 <ADC_GetResetCalibrationStatus>
    c4ce:	4603      	mov	r3, r0
    c4d0:	2b00      	cmp	r3, #0
    c4d2:	bf0c      	ite	eq
    c4d4:	2300      	moveq	r3, #0
    c4d6:	2301      	movne	r3, #1
    c4d8:	b2db      	uxtb	r3, r3
    c4da:	2b00      	cmp	r3, #0
    c4dc:	d1f4      	bne.n	c4c8 <_ZN8CapteursC2Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    c4de:	4834      	ldr	r0, [pc, #208]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c4e0:	f7f4 f8ae 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    c4e4:	4832      	ldr	r0, [pc, #200]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c4e6:	f7f4 f8bb 	bl	660 <ADC_GetCalibrationStatus>
    c4ea:	4603      	mov	r3, r0
    c4ec:	2b00      	cmp	r3, #0
    c4ee:	bf0c      	ite	eq
    c4f0:	2300      	moveq	r3, #0
    c4f2:	2301      	movne	r3, #1
    c4f4:	b2db      	uxtb	r3, r3
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	d1f4      	bne.n	c4e4 <_ZN8CapteursC2Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4fe:	657b      	str	r3, [r7, #84]
    c500:	e015      	b.n	c52e <_ZN8CapteursC2Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    c502:	6d7b      	ldr	r3, [r7, #84]
    c504:	f107 0258 	add.w	r2, r7, #88	; 0x58
    c508:	4413      	add	r3, r2
    c50a:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    c50e:	6d7b      	ldr	r3, [r7, #84]
    c510:	b2db      	uxtb	r3, r3
    c512:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c516:	b2db      	uxtb	r3, r3
    c518:	4825      	ldr	r0, [pc, #148]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c51a:	4611      	mov	r1, r2
    c51c:	461a      	mov	r2, r3
    c51e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c522:	f7f4 f933 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    c526:	6d7b      	ldr	r3, [r7, #84]
    c528:	f103 0301 	add.w	r3, r3, #1	; 0x1
    c52c:	657b      	str	r3, [r7, #84]
    c52e:	687b      	ldr	r3, [r7, #4]
    c530:	781b      	ldrb	r3, [r3, #0]
    c532:	461a      	mov	r2, r3
    c534:	6d7b      	ldr	r3, [r7, #84]
    c536:	429a      	cmp	r2, r3
    c538:	dce3      	bgt.n	c502 <_ZN8CapteursC2Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    c53a:	481d      	ldr	r0, [pc, #116]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c53c:	f04f 0101 	mov.w	r1, #1	; 0x1
    c540:	f7f4 f810 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    c544:	4b1a      	ldr	r3, [pc, #104]	(c5b0 <_ZN8CapteursC2Ev+0x1bc>)
    c546:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    c54a:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    c54c:	687b      	ldr	r3, [r7, #4]
    c54e:	685b      	ldr	r3, [r3, #4]
    c550:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    c552:	f04f 0300 	mov.w	r3, #0	; 0x0
    c556:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	781b      	ldrb	r3, [r3, #0]
    c55c:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    c55e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c562:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    c564:	f04f 0380 	mov.w	r3, #128	; 0x80
    c568:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    c56a:	f44f 7300 	mov.w	r3, #512	; 0x200
    c56e:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    c570:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c574:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    c576:	f04f 0320 	mov.w	r3, #32	; 0x20
    c57a:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    c57c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    c580:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    c582:	f04f 0300 	mov.w	r3, #0	; 0x0
    c586:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    c588:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c58c:	4809      	ldr	r0, [pc, #36]	(c5b4 <_ZN8CapteursC2Ev+0x1c0>)
    c58e:	4619      	mov	r1, r3
    c590:	f7f4 fd6e 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    c594:	4807      	ldr	r0, [pc, #28]	(c5b4 <_ZN8CapteursC2Ev+0x1c0>)
    c596:	f04f 0101 	mov.w	r1, #1	; 0x1
    c59a:	f7f4 fde7 	bl	116c <DMA_Cmd>
}
    c59e:	687b      	ldr	r3, [r7, #4]
    c5a0:	4618      	mov	r0, r3
    c5a2:	f107 0758 	add.w	r7, r7, #88	; 0x58
    c5a6:	46bd      	mov	sp, r7
    c5a8:	bd80      	pop	{r7, pc}
    c5aa:	46c0      	nop			(mov r8, r8)
    c5ac:	000222d8 	.word	0x000222d8
    c5b0:	40012400 	.word	0x40012400
    c5b4:	40020008 	.word	0x40020008

0000c5b8 <_ZN3Led6setOffEi>:
        default:
            break;
    }
}

void Led::setOff(int index)
    c5b8:	b580      	push	{r7, lr}
    c5ba:	b082      	sub	sp, #8
    c5bc:	af00      	add	r7, sp, #0
    c5be:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c5c0:	687b      	ldr	r3, [r7, #4]
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	db07      	blt.n	c5d6 <_ZN3Led6setOffEi+0x1e>
    c5c6:	687b      	ldr	r3, [r7, #4]
    c5c8:	2b01      	cmp	r3, #1
    c5ca:	dc04      	bgt.n	c5d6 <_ZN3Led6setOffEi+0x1e>
        ledOn[index] = false;
    c5cc:	6879      	ldr	r1, [r7, #4]
    c5ce:	4a10      	ldr	r2, [pc, #64]	(c610 <_ZN3Led6setOffEi+0x58>)
    c5d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5d4:	5453      	strb	r3, [r2, r1]

    switch(index)
    c5d6:	687b      	ldr	r3, [r7, #4]
    c5d8:	603b      	str	r3, [r7, #0]
    c5da:	683b      	ldr	r3, [r7, #0]
    c5dc:	2b00      	cmp	r3, #0
    c5de:	d003      	beq.n	c5e8 <_ZN3Led6setOffEi+0x30>
    c5e0:	683b      	ldr	r3, [r7, #0]
    c5e2:	2b01      	cmp	r3, #1
    c5e4:	d008      	beq.n	c5f8 <_ZN3Led6setOffEi+0x40>
    c5e6:	e00e      	b.n	c606 <_ZN3Led6setOffEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET); // LED verte
    c5e8:	480a      	ldr	r0, [pc, #40]	(c614 <_ZN3Led6setOffEi+0x5c>)
    c5ea:	f04f 0140 	mov.w	r1, #64	; 0x40
    c5ee:	f04f 0200 	mov.w	r2, #0	; 0x0
    c5f2:	f7f5 f9cb 	bl	198c <GPIO_WriteBit>
    c5f6:	e006      	b.n	c606 <_ZN3Led6setOffEi+0x4e>
            break;

        case 1:
        #ifdef ROBOTHW
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET); // LED jaune
    c5f8:	4806      	ldr	r0, [pc, #24]	(c614 <_ZN3Led6setOffEi+0x5c>)
    c5fa:	f04f 0180 	mov.w	r1, #128	; 0x80
    c5fe:	f04f 0200 	mov.w	r2, #0	; 0x0
    c602:	f7f5 f9c3 	bl	198c <GPIO_WriteBit>
        #endif
            break;
        default:
            break;
    }
}
    c606:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c60a:	46bd      	mov	sp, r7
    c60c:	bd80      	pop	{r7, pc}
    c60e:	46c0      	nop			(mov r8, r8)
    c610:	2000058c 	.word	0x2000058c
    c614:	40011000 	.word	0x40011000

0000c618 <_Z12eteindreLED2v>:
void allumerLED2()
{
    Led::setOn(1);
}

void eteindreLED2()
    c618:	b580      	push	{r7, lr}
    c61a:	af00      	add	r7, sp, #0
{
    Led::setOff(1);
    c61c:	f04f 0001 	mov.w	r0, #1	; 0x1
    c620:	f7ff ffca 	bl	c5b8 <_ZN3Led6setOffEi>
}
    c624:	46bd      	mov	sp, r7
    c626:	bd80      	pop	{r7, pc}

0000c628 <_Z11eteindreLEDv>:
void allumerLED()
{
    Led::setOn(0);
}

void eteindreLED()
    c628:	b580      	push	{r7, lr}
    c62a:	af00      	add	r7, sp, #0
{
    Led::setOff(0);
    c62c:	f04f 0000 	mov.w	r0, #0	; 0x0
    c630:	f7ff ffc2 	bl	c5b8 <_ZN3Led6setOffEi>
}
    c634:	46bd      	mov	sp, r7
    c636:	bd80      	pop	{r7, pc}

0000c638 <_ZN3Led5setOnEi>:
        else
            setOn(index);
    }
}

void Led::setOn(int index)
    c638:	b580      	push	{r7, lr}
    c63a:	b082      	sub	sp, #8
    c63c:	af00      	add	r7, sp, #0
    c63e:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c640:	687b      	ldr	r3, [r7, #4]
    c642:	2b00      	cmp	r3, #0
    c644:	db07      	blt.n	c656 <_ZN3Led5setOnEi+0x1e>
    c646:	687b      	ldr	r3, [r7, #4]
    c648:	2b01      	cmp	r3, #1
    c64a:	dc04      	bgt.n	c656 <_ZN3Led5setOnEi+0x1e>
        ledOn[index] = true;
    c64c:	6879      	ldr	r1, [r7, #4]
    c64e:	4a10      	ldr	r2, [pc, #64]	(c690 <_ZN3Led5setOnEi+0x58>)
    c650:	f04f 0301 	mov.w	r3, #1	; 0x1
    c654:	5453      	strb	r3, [r2, r1]

    switch(index)
    c656:	687b      	ldr	r3, [r7, #4]
    c658:	603b      	str	r3, [r7, #0]
    c65a:	683b      	ldr	r3, [r7, #0]
    c65c:	2b00      	cmp	r3, #0
    c65e:	d003      	beq.n	c668 <_ZN3Led5setOnEi+0x30>
    c660:	683b      	ldr	r3, [r7, #0]
    c662:	2b01      	cmp	r3, #1
    c664:	d008      	beq.n	c678 <_ZN3Led5setOnEi+0x40>
    c666:	e00e      	b.n	c686 <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_RESET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET); // LED verte
    c668:	480a      	ldr	r0, [pc, #40]	(c694 <_ZN3Led5setOnEi+0x5c>)
    c66a:	f04f 0140 	mov.w	r1, #64	; 0x40
    c66e:	f04f 0201 	mov.w	r2, #1	; 0x1
    c672:	f7f5 f98b 	bl	198c <GPIO_WriteBit>
    c676:	e006      	b.n	c686 <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
               // Pas de LED jaune sur le H103 :'(
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_SET); // LED jaune
    c678:	4806      	ldr	r0, [pc, #24]	(c694 <_ZN3Led5setOnEi+0x5c>)
    c67a:	f04f 0180 	mov.w	r1, #128	; 0x80
    c67e:	f04f 0201 	mov.w	r2, #1	; 0x1
    c682:	f7f5 f983 	bl	198c <GPIO_WriteBit>
            break;

        default:
            break;
    }
}
    c686:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c68a:	46bd      	mov	sp, r7
    c68c:	bd80      	pop	{r7, pc}
    c68e:	46c0      	nop			(mov r8, r8)
    c690:	2000058c 	.word	0x2000058c
    c694:	40011000 	.word	0x40011000

0000c698 <_ZN3Led6toggleEi>:
    Led::setOff(1);
}

bool Led::ledOn[LED_NUMBER] = {0};

void Led::toggle(int index)
    c698:	b580      	push	{r7, lr}
    c69a:	b082      	sub	sp, #8
    c69c:	af00      	add	r7, sp, #0
    c69e:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    c6a0:	687b      	ldr	r3, [r7, #4]
    c6a2:	2b00      	cmp	r3, #0
    c6a4:	db0e      	blt.n	c6c4 <_ZN3Led6toggleEi+0x2c>
    c6a6:	687b      	ldr	r3, [r7, #4]
    c6a8:	2b01      	cmp	r3, #1
    c6aa:	dc0b      	bgt.n	c6c4 <_ZN3Led6toggleEi+0x2c>
    {
        if (ledOn[index])
    c6ac:	687b      	ldr	r3, [r7, #4]
    c6ae:	4a07      	ldr	r2, [pc, #28]	(c6cc <_ZN3Led6toggleEi+0x34>)
    c6b0:	5cd3      	ldrb	r3, [r2, r3]
    c6b2:	2b00      	cmp	r3, #0
    c6b4:	d003      	beq.n	c6be <_ZN3Led6toggleEi+0x26>
            setOff(index);
    c6b6:	6878      	ldr	r0, [r7, #4]
    c6b8:	f7ff ff7e 	bl	c5b8 <_ZN3Led6setOffEi>
    c6bc:	e002      	b.n	c6c4 <_ZN3Led6toggleEi+0x2c>
        else
            setOn(index);
    c6be:	6878      	ldr	r0, [r7, #4]
    c6c0:	f7ff ffba 	bl	c638 <_ZN3Led5setOnEi>
    }
}
    c6c4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c6c8:	46bd      	mov	sp, r7
    c6ca:	bd80      	pop	{r7, pc}
    c6cc:	2000058c 	.word	0x2000058c

0000c6d0 <_Z11allumerLED2v>:
void eteindreLED()
{
    Led::setOff(0);
}

void allumerLED2()
    c6d0:	b580      	push	{r7, lr}
    c6d2:	af00      	add	r7, sp, #0
{
    Led::setOn(1);
    c6d4:	f04f 0001 	mov.w	r0, #1	; 0x1
    c6d8:	f7ff ffae 	bl	c638 <_ZN3Led5setOnEi>
}
    c6dc:	46bd      	mov	sp, r7
    c6de:	bd80      	pop	{r7, pc}

0000c6e0 <_Z10allumerLEDv>:
#include "leds.h"

// allume ou éteint une LED
void allumerLED()
    c6e0:	b580      	push	{r7, lr}
    c6e2:	af00      	add	r7, sp, #0
{
    Led::setOn(0);
    c6e4:	f04f 0000 	mov.w	r0, #0	; 0x0
    c6e8:	f7ff ffa6 	bl	c638 <_ZN3Led5setOnEi>
}
    c6ec:	46bd      	mov	sp, r7
    c6ee:	bd80      	pop	{r7, pc}

0000c6f0 <_ZN18LigthBarrierSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
}

Sensor::OutputSensor LigthBarrierSensor::getValue()
    c6f0:	b480      	push	{r7}
    c6f2:	b087      	sub	sp, #28
    c6f4:	af00      	add	r7, sp, #0
    c6f6:	4602      	mov	r2, r0
    c6f8:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c6fa:	f04f 0302 	mov.w	r3, #2	; 0x2
    c6fe:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c700:	4b05      	ldr	r3, [pc, #20]	(c718 <_ZN18LigthBarrierSensor8getValueEv+0x28>)
    c702:	6053      	str	r3, [r2, #4]
    outputR.b = output;
    c704:	687b      	ldr	r3, [r7, #4]
    c706:	7bdb      	ldrb	r3, [r3, #15]
    c708:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c70a:	4610      	mov	r0, r2
    c70c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c710:	46bd      	mov	sp, r7
    c712:	bc80      	pop	{r7}
    c714:	4770      	bx	lr
    c716:	46c0      	nop			(mov r8, r8)
    c718:	00000000 	.word	0x00000000

0000c71c <_ZN18LigthBarrierSensor7getNameEv>:

LigthBarrierSensor::LigthBarrierName LigthBarrierSensor::getName()
    c71c:	b480      	push	{r7}
    c71e:	b083      	sub	sp, #12
    c720:	af00      	add	r7, sp, #0
    c722:	6078      	str	r0, [r7, #4]
{
    return name;
    c724:	687b      	ldr	r3, [r7, #4]
    c726:	7b9b      	ldrb	r3, [r3, #14]
}
    c728:	4618      	mov	r0, r3
    c72a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c72e:	46bd      	mov	sp, r7
    c730:	bc80      	pop	{r7}
    c732:	4770      	bx	lr

0000c734 <_ZN18LigthBarrierSensor11updateValueEv>:

LigthBarrierSensor::~LigthBarrierSensor()
{
}

void LigthBarrierSensor::updateValue()
    c734:	b590      	push	{r4, r7, lr}
    c736:	b083      	sub	sp, #12
    c738:	af00      	add	r7, sp, #0
    c73a:	6078      	str	r0, [r7, #4]
{
    counter <<=1;
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	899b      	ldrh	r3, [r3, #12]
    c740:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c744:	b29b      	uxth	r3, r3
    c746:	687a      	ldr	r2, [r7, #4]
    c748:	8193      	strh	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)==SET);
    c74a:	687b      	ldr	r3, [r7, #4]
    c74c:	899b      	ldrh	r3, [r3, #12]
    c74e:	461c      	mov	r4, r3
    c750:	687b      	ldr	r3, [r7, #4]
    c752:	689a      	ldr	r2, [r3, #8]
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	889b      	ldrh	r3, [r3, #4]
    c758:	4610      	mov	r0, r2
    c75a:	4619      	mov	r1, r3
    c75c:	f7f5 f8a2 	bl	18a4 <GPIO_ReadInputDataBit>
    c760:	4603      	mov	r3, r0
    c762:	2b01      	cmp	r3, #1
    c764:	bf14      	ite	ne
    c766:	2300      	movne	r3, #0
    c768:	2301      	moveq	r3, #1
    c76a:	4622      	mov	r2, r4
    c76c:	ea42 0303 	orr.w	r3, r2, r3
    c770:	b29b      	uxth	r3, r3
    c772:	b29b      	uxth	r3, r3
    c774:	687a      	ldr	r2, [r7, #4]
    c776:	8193      	strh	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
    c778:	687b      	ldr	r3, [r7, #4]
    c77a:	7bdb      	ldrb	r3, [r3, #15]
    c77c:	2b00      	cmp	r3, #0
    c77e:	d00a      	beq.n	c796 <_ZN18LigthBarrierSensor11updateValueEv+0x62>
    c780:	687b      	ldr	r3, [r7, #4]
    c782:	899b      	ldrh	r3, [r3, #12]
    c784:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c788:	2b00      	cmp	r3, #0
    c78a:	bf0c      	ite	eq
    c78c:	2300      	moveq	r3, #0
    c78e:	2301      	movne	r3, #1
    c790:	b2db      	uxtb	r3, r3
    c792:	603b      	str	r3, [r7, #0]
    c794:	e009      	b.n	c7aa <_ZN18LigthBarrierSensor11updateValueEv+0x76>
    c796:	687b      	ldr	r3, [r7, #4]
    c798:	899b      	ldrh	r3, [r3, #12]
    c79a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c79e:	2bff      	cmp	r3, #255
    c7a0:	bf14      	ite	ne
    c7a2:	2300      	movne	r3, #0
    c7a4:	2301      	moveq	r3, #1
    c7a6:	b2db      	uxtb	r3, r3
    c7a8:	603b      	str	r3, [r7, #0]
    c7aa:	687a      	ldr	r2, [r7, #4]
    c7ac:	6839      	ldr	r1, [r7, #0]
    c7ae:	460b      	mov	r3, r1
    c7b0:	73d3      	strb	r3, [r2, #15]
}
    c7b2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c7b6:	46bd      	mov	sp, r7
    c7b8:	bd90      	pop	{r4, r7, pc}
    c7ba:	46c0      	nop			(mov r8, r8)

0000c7bc <_ZN18LigthBarrierSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c7bc:	b580      	push	{r7, lr}
    c7be:	b082      	sub	sp, #8
    c7c0:	af00      	add	r7, sp, #0
    c7c2:	6078      	str	r0, [r7, #4]
    c7c4:	687a      	ldr	r2, [r7, #4]
    c7c6:	4b0a      	ldr	r3, [pc, #40]	(c7f0 <_ZN18LigthBarrierSensorD0Ev+0x34>)
    c7c8:	6013      	str	r3, [r2, #0]
{
}
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	4618      	mov	r0, r3
    c7ce:	f7f9 fccd 	bl	616c <_ZN6SensorD2Ev>
    c7d2:	f04f 0301 	mov.w	r3, #1	; 0x1
    c7d6:	b2db      	uxtb	r3, r3
    c7d8:	2b00      	cmp	r3, #0
    c7da:	d002      	beq.n	c7e2 <_ZN18LigthBarrierSensorD0Ev+0x26>
    c7dc:	6878      	ldr	r0, [r7, #4]
    c7de:	f002 fa2d 	bl	ec3c <_ZdlPv>
    c7e2:	687b      	ldr	r3, [r7, #4]
    c7e4:	4618      	mov	r0, r3
    c7e6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c7ea:	46bd      	mov	sp, r7
    c7ec:	bd80      	pop	{r7, pc}
    c7ee:	46c0      	nop			(mov r8, r8)
    c7f0:	000222e8 	.word	0x000222e8

0000c7f4 <_ZN18LigthBarrierSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c7f4:	b580      	push	{r7, lr}
    c7f6:	b082      	sub	sp, #8
    c7f8:	af00      	add	r7, sp, #0
    c7fa:	6078      	str	r0, [r7, #4]
    c7fc:	687a      	ldr	r2, [r7, #4]
    c7fe:	4b0a      	ldr	r3, [pc, #40]	(c828 <_ZN18LigthBarrierSensorD1Ev+0x34>)
    c800:	6013      	str	r3, [r2, #0]
{
}
    c802:	687b      	ldr	r3, [r7, #4]
    c804:	4618      	mov	r0, r3
    c806:	f7f9 fcb1 	bl	616c <_ZN6SensorD2Ev>
    c80a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c80e:	b2db      	uxtb	r3, r3
    c810:	2b00      	cmp	r3, #0
    c812:	d002      	beq.n	c81a <_ZN18LigthBarrierSensorD1Ev+0x26>
    c814:	6878      	ldr	r0, [r7, #4]
    c816:	f002 fa11 	bl	ec3c <_ZdlPv>
    c81a:	687b      	ldr	r3, [r7, #4]
    c81c:	4618      	mov	r0, r3
    c81e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c822:	46bd      	mov	sp, r7
    c824:	bd80      	pop	{r7, pc}
    c826:	46c0      	nop			(mov r8, r8)
    c828:	000222e8 	.word	0x000222e8

0000c82c <_ZN18LigthBarrierSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c82c:	b580      	push	{r7, lr}
    c82e:	b082      	sub	sp, #8
    c830:	af00      	add	r7, sp, #0
    c832:	6078      	str	r0, [r7, #4]
    c834:	687a      	ldr	r2, [r7, #4]
    c836:	4b0a      	ldr	r3, [pc, #40]	(c860 <_ZN18LigthBarrierSensorD2Ev+0x34>)
    c838:	6013      	str	r3, [r2, #0]
{
}
    c83a:	687b      	ldr	r3, [r7, #4]
    c83c:	4618      	mov	r0, r3
    c83e:	f7f9 fc95 	bl	616c <_ZN6SensorD2Ev>
    c842:	f04f 0300 	mov.w	r3, #0	; 0x0
    c846:	b2db      	uxtb	r3, r3
    c848:	2b00      	cmp	r3, #0
    c84a:	d002      	beq.n	c852 <_ZN18LigthBarrierSensorD2Ev+0x26>
    c84c:	6878      	ldr	r0, [r7, #4]
    c84e:	f002 f9f5 	bl	ec3c <_ZdlPv>
    c852:	687b      	ldr	r3, [r7, #4]
    c854:	4618      	mov	r0, r3
    c856:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c85a:	46bd      	mov	sp, r7
    c85c:	bd80      	pop	{r7, pc}
    c85e:	46c0      	nop			(mov r8, r8)
    c860:	000222e8 	.word	0x000222e8

0000c864 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c864:	b580      	push	{r7, lr}
    c866:	b086      	sub	sp, #24
    c868:	af00      	add	r7, sp, #0
    c86a:	60f8      	str	r0, [r7, #12]
    c86c:	607b      	str	r3, [r7, #4]
    c86e:	460b      	mov	r3, r1
    c870:	72fb      	strb	r3, [r7, #11]
    c872:	4613      	mov	r3, r2
    c874:	813b      	strh	r3, [r7, #8]
    c876:	68fb      	ldr	r3, [r7, #12]
    c878:	4618      	mov	r0, r3
    c87a:	f7f9 fc27 	bl	60cc <_ZN6SensorC2Ev>
    c87e:	68fa      	ldr	r2, [r7, #12]
    c880:	4b13      	ldr	r3, [pc, #76]	(c8d0 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c882:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c884:	68fa      	ldr	r2, [r7, #12]
    c886:	893b      	ldrh	r3, [r7, #8]
    c888:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c88a:	68fa      	ldr	r2, [r7, #12]
    c88c:	687b      	ldr	r3, [r7, #4]
    c88e:	6093      	str	r3, [r2, #8]
    counter = 0;
    c890:	68fa      	ldr	r2, [r7, #12]
    c892:	f04f 0300 	mov.w	r3, #0	; 0x0
    c896:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c898:	68fa      	ldr	r2, [r7, #12]
    c89a:	7afb      	ldrb	r3, [r7, #11]
    c89c:	7393      	strb	r3, [r2, #14]
    output = false;
    c89e:	68fa      	ldr	r2, [r7, #12]
    c8a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    c8a4:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c8a6:	893b      	ldrh	r3, [r7, #8]
    c8a8:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c8aa:	f04f 0348 	mov.w	r3, #72	; 0x48
    c8ae:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c8b0:	f04f 0303 	mov.w	r3, #3	; 0x3
    c8b4:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c8b6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c8ba:	6878      	ldr	r0, [r7, #4]
    c8bc:	4619      	mov	r1, r3
    c8be:	f7f4 fef7 	bl	16b0 <GPIO_Init>
}
    c8c2:	68fb      	ldr	r3, [r7, #12]
    c8c4:	4618      	mov	r0, r3
    c8c6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c8ca:	46bd      	mov	sp, r7
    c8cc:	bd80      	pop	{r7, pc}
    c8ce:	46c0      	nop			(mov r8, r8)
    c8d0:	000222e8 	.word	0x000222e8

0000c8d4 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c8d4:	b580      	push	{r7, lr}
    c8d6:	b086      	sub	sp, #24
    c8d8:	af00      	add	r7, sp, #0
    c8da:	60f8      	str	r0, [r7, #12]
    c8dc:	607b      	str	r3, [r7, #4]
    c8de:	460b      	mov	r3, r1
    c8e0:	72fb      	strb	r3, [r7, #11]
    c8e2:	4613      	mov	r3, r2
    c8e4:	813b      	strh	r3, [r7, #8]
    c8e6:	68fb      	ldr	r3, [r7, #12]
    c8e8:	4618      	mov	r0, r3
    c8ea:	f7f9 fbef 	bl	60cc <_ZN6SensorC2Ev>
    c8ee:	68fa      	ldr	r2, [r7, #12]
    c8f0:	4b13      	ldr	r3, [pc, #76]	(c940 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c8f2:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c8f4:	68fa      	ldr	r2, [r7, #12]
    c8f6:	893b      	ldrh	r3, [r7, #8]
    c8f8:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c8fa:	68fa      	ldr	r2, [r7, #12]
    c8fc:	687b      	ldr	r3, [r7, #4]
    c8fe:	6093      	str	r3, [r2, #8]
    counter = 0;
    c900:	68fa      	ldr	r2, [r7, #12]
    c902:	f04f 0300 	mov.w	r3, #0	; 0x0
    c906:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c908:	68fa      	ldr	r2, [r7, #12]
    c90a:	7afb      	ldrb	r3, [r7, #11]
    c90c:	7393      	strb	r3, [r2, #14]
    output = false;
    c90e:	68fa      	ldr	r2, [r7, #12]
    c910:	f04f 0300 	mov.w	r3, #0	; 0x0
    c914:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c916:	893b      	ldrh	r3, [r7, #8]
    c918:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c91a:	f04f 0348 	mov.w	r3, #72	; 0x48
    c91e:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c920:	f04f 0303 	mov.w	r3, #3	; 0x3
    c924:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c926:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c92a:	6878      	ldr	r0, [r7, #4]
    c92c:	4619      	mov	r1, r3
    c92e:	f7f4 febf 	bl	16b0 <GPIO_Init>
}
    c932:	68fb      	ldr	r3, [r7, #12]
    c934:	4618      	mov	r0, r3
    c936:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c93a:	46bd      	mov	sp, r7
    c93c:	bd80      	pop	{r7, pc}
    c93e:	46c0      	nop			(mov r8, r8)
    c940:	000222e8 	.word	0x000222e8

0000c944 <_ZN17LimitSwitchSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
}

Sensor::OutputSensor LimitSwitchSensor::getValue()
    c944:	b480      	push	{r7}
    c946:	b087      	sub	sp, #28
    c948:	af00      	add	r7, sp, #0
    c94a:	4602      	mov	r2, r0
    c94c:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c94e:	f04f 0302 	mov.w	r3, #2	; 0x2
    c952:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c954:	4b05      	ldr	r3, [pc, #20]	(c96c <_ZN17LimitSwitchSensor8getValueEv+0x28>)
    c956:	6053      	str	r3, [r2, #4]
    outputR.b = this->output;
    c958:	687b      	ldr	r3, [r7, #4]
    c95a:	7b9b      	ldrb	r3, [r3, #14]
    c95c:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c95e:	4610      	mov	r0, r2
    c960:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c964:	46bd      	mov	sp, r7
    c966:	bc80      	pop	{r7}
    c968:	4770      	bx	lr
    c96a:	46c0      	nop			(mov r8, r8)
    c96c:	00000000 	.word	0x00000000

0000c970 <_ZN17LimitSwitchSensor7getNameEv>:

LimitSwitchSensor::LimitSwitchName LimitSwitchSensor::getName()
    c970:	b480      	push	{r7}
    c972:	b083      	sub	sp, #12
    c974:	af00      	add	r7, sp, #0
    c976:	6078      	str	r0, [r7, #4]
{
    return name;
    c978:	687b      	ldr	r3, [r7, #4]
    c97a:	7b5b      	ldrb	r3, [r3, #13]
}
    c97c:	4618      	mov	r0, r3
    c97e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c982:	46bd      	mov	sp, r7
    c984:	bc80      	pop	{r7}
    c986:	4770      	bx	lr

0000c988 <_ZN17LimitSwitchSensor11updateValueEv>:

LimitSwitchSensor::~LimitSwitchSensor()
{
}

void  LimitSwitchSensor::updateValue()
    c988:	b590      	push	{r4, r7, lr}
    c98a:	b083      	sub	sp, #12
    c98c:	af00      	add	r7, sp, #0
    c98e:	6078      	str	r0, [r7, #4]
{
    counter <<= 1;
    c990:	687b      	ldr	r3, [r7, #4]
    c992:	7b1b      	ldrb	r3, [r3, #12]
    c994:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c998:	b2db      	uxtb	r3, r3
    c99a:	687a      	ldr	r2, [r7, #4]
    c99c:	7313      	strb	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)== Bit_SET);
    c99e:	687b      	ldr	r3, [r7, #4]
    c9a0:	7b1b      	ldrb	r3, [r3, #12]
    c9a2:	461c      	mov	r4, r3
    c9a4:	687b      	ldr	r3, [r7, #4]
    c9a6:	689a      	ldr	r2, [r3, #8]
    c9a8:	687b      	ldr	r3, [r7, #4]
    c9aa:	889b      	ldrh	r3, [r3, #4]
    c9ac:	4610      	mov	r0, r2
    c9ae:	4619      	mov	r1, r3
    c9b0:	f7f4 ff78 	bl	18a4 <GPIO_ReadInputDataBit>
    c9b4:	4603      	mov	r3, r0
    c9b6:	2b01      	cmp	r3, #1
    c9b8:	bf14      	ite	ne
    c9ba:	2300      	movne	r3, #0
    c9bc:	2301      	moveq	r3, #1
    c9be:	4622      	mov	r2, r4
    c9c0:	ea42 0303 	orr.w	r3, r2, r3
    c9c4:	b2db      	uxtb	r3, r3
    c9c6:	b2db      	uxtb	r3, r3
    c9c8:	687a      	ldr	r2, [r7, #4]
    c9ca:	7313      	strb	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
    c9cc:	687b      	ldr	r3, [r7, #4]
    c9ce:	7b1b      	ldrb	r3, [r3, #12]
    c9d0:	2bff      	cmp	r3, #255
    c9d2:	bf14      	ite	ne
    c9d4:	2300      	movne	r3, #0
    c9d6:	2301      	moveq	r3, #1
    c9d8:	b2db      	uxtb	r3, r3
    c9da:	687a      	ldr	r2, [r7, #4]
    c9dc:	7393      	strb	r3, [r2, #14]
}
    c9de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c9e2:	46bd      	mov	sp, r7
    c9e4:	bd90      	pop	{r4, r7, pc}
    c9e6:	46c0      	nop			(mov r8, r8)

0000c9e8 <_ZN17LimitSwitchSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c9e8:	b580      	push	{r7, lr}
    c9ea:	b082      	sub	sp, #8
    c9ec:	af00      	add	r7, sp, #0
    c9ee:	6078      	str	r0, [r7, #4]
    c9f0:	687a      	ldr	r2, [r7, #4]
    c9f2:	4b0a      	ldr	r3, [pc, #40]	(ca1c <_ZN17LimitSwitchSensorD0Ev+0x34>)
    c9f4:	6013      	str	r3, [r2, #0]
{
}
    c9f6:	687b      	ldr	r3, [r7, #4]
    c9f8:	4618      	mov	r0, r3
    c9fa:	f7f9 fbb7 	bl	616c <_ZN6SensorD2Ev>
    c9fe:	f04f 0301 	mov.w	r3, #1	; 0x1
    ca02:	b2db      	uxtb	r3, r3
    ca04:	2b00      	cmp	r3, #0
    ca06:	d002      	beq.n	ca0e <_ZN17LimitSwitchSensorD0Ev+0x26>
    ca08:	6878      	ldr	r0, [r7, #4]
    ca0a:	f002 f917 	bl	ec3c <_ZdlPv>
    ca0e:	687b      	ldr	r3, [r7, #4]
    ca10:	4618      	mov	r0, r3
    ca12:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca16:	46bd      	mov	sp, r7
    ca18:	bd80      	pop	{r7, pc}
    ca1a:	46c0      	nop			(mov r8, r8)
    ca1c:	00022300 	.word	0x00022300

0000ca20 <_ZN17LimitSwitchSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    ca20:	b580      	push	{r7, lr}
    ca22:	b082      	sub	sp, #8
    ca24:	af00      	add	r7, sp, #0
    ca26:	6078      	str	r0, [r7, #4]
    ca28:	687a      	ldr	r2, [r7, #4]
    ca2a:	4b0a      	ldr	r3, [pc, #40]	(ca54 <_ZN17LimitSwitchSensorD1Ev+0x34>)
    ca2c:	6013      	str	r3, [r2, #0]
{
}
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	4618      	mov	r0, r3
    ca32:	f7f9 fb9b 	bl	616c <_ZN6SensorD2Ev>
    ca36:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca3a:	b2db      	uxtb	r3, r3
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d002      	beq.n	ca46 <_ZN17LimitSwitchSensorD1Ev+0x26>
    ca40:	6878      	ldr	r0, [r7, #4]
    ca42:	f002 f8fb 	bl	ec3c <_ZdlPv>
    ca46:	687b      	ldr	r3, [r7, #4]
    ca48:	4618      	mov	r0, r3
    ca4a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca4e:	46bd      	mov	sp, r7
    ca50:	bd80      	pop	{r7, pc}
    ca52:	46c0      	nop			(mov r8, r8)
    ca54:	00022300 	.word	0x00022300

0000ca58 <_ZN17LimitSwitchSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    ca58:	b580      	push	{r7, lr}
    ca5a:	b082      	sub	sp, #8
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	6078      	str	r0, [r7, #4]
    ca60:	687a      	ldr	r2, [r7, #4]
    ca62:	4b0a      	ldr	r3, [pc, #40]	(ca8c <_ZN17LimitSwitchSensorD2Ev+0x34>)
    ca64:	6013      	str	r3, [r2, #0]
{
}
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	4618      	mov	r0, r3
    ca6a:	f7f9 fb7f 	bl	616c <_ZN6SensorD2Ev>
    ca6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca72:	b2db      	uxtb	r3, r3
    ca74:	2b00      	cmp	r3, #0
    ca76:	d002      	beq.n	ca7e <_ZN17LimitSwitchSensorD2Ev+0x26>
    ca78:	6878      	ldr	r0, [r7, #4]
    ca7a:	f002 f8df 	bl	ec3c <_ZdlPv>
    ca7e:	687b      	ldr	r3, [r7, #4]
    ca80:	4618      	mov	r0, r3
    ca82:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca86:	46bd      	mov	sp, r7
    ca88:	bd80      	pop	{r7, pc}
    ca8a:	46c0      	nop			(mov r8, r8)
    ca8c:	00022300 	.word	0x00022300

0000ca90 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    ca90:	b580      	push	{r7, lr}
    ca92:	b086      	sub	sp, #24
    ca94:	af00      	add	r7, sp, #0
    ca96:	60f8      	str	r0, [r7, #12]
    ca98:	607b      	str	r3, [r7, #4]
    ca9a:	460b      	mov	r3, r1
    ca9c:	72fb      	strb	r3, [r7, #11]
    ca9e:	4613      	mov	r3, r2
    caa0:	813b      	strh	r3, [r7, #8]
    caa2:	68fb      	ldr	r3, [r7, #12]
    caa4:	4618      	mov	r0, r3
    caa6:	f7f9 fb11 	bl	60cc <_ZN6SensorC2Ev>
    caaa:	68fa      	ldr	r2, [r7, #12]
    caac:	4b13      	ldr	r3, [pc, #76]	(cafc <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    caae:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    cab0:	68fa      	ldr	r2, [r7, #12]
    cab2:	7afb      	ldrb	r3, [r7, #11]
    cab4:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    cab6:	68fa      	ldr	r2, [r7, #12]
    cab8:	893b      	ldrh	r3, [r7, #8]
    caba:	8093      	strh	r3, [r2, #4]
    this->group = group;
    cabc:	68fa      	ldr	r2, [r7, #12]
    cabe:	687b      	ldr	r3, [r7, #4]
    cac0:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    cac2:	68fa      	ldr	r2, [r7, #12]
    cac4:	f04f 0300 	mov.w	r3, #0	; 0x0
    cac8:	7313      	strb	r3, [r2, #12]
    output = false;
    caca:	68fa      	ldr	r2, [r7, #12]
    cacc:	f04f 0300 	mov.w	r3, #0	; 0x0
    cad0:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    cad2:	893b      	ldrh	r3, [r7, #8]
    cad4:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    cad6:	f04f 0304 	mov.w	r3, #4	; 0x4
    cada:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    cadc:	f04f 0303 	mov.w	r3, #3	; 0x3
    cae0:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    cae2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cae6:	6878      	ldr	r0, [r7, #4]
    cae8:	4619      	mov	r1, r3
    caea:	f7f4 fde1 	bl	16b0 <GPIO_Init>
}
    caee:	68fb      	ldr	r3, [r7, #12]
    caf0:	4618      	mov	r0, r3
    caf2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    caf6:	46bd      	mov	sp, r7
    caf8:	bd80      	pop	{r7, pc}
    cafa:	46c0      	nop			(mov r8, r8)
    cafc:	00022300 	.word	0x00022300

0000cb00 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    cb00:	b580      	push	{r7, lr}
    cb02:	b086      	sub	sp, #24
    cb04:	af00      	add	r7, sp, #0
    cb06:	60f8      	str	r0, [r7, #12]
    cb08:	607b      	str	r3, [r7, #4]
    cb0a:	460b      	mov	r3, r1
    cb0c:	72fb      	strb	r3, [r7, #11]
    cb0e:	4613      	mov	r3, r2
    cb10:	813b      	strh	r3, [r7, #8]
    cb12:	68fb      	ldr	r3, [r7, #12]
    cb14:	4618      	mov	r0, r3
    cb16:	f7f9 fad9 	bl	60cc <_ZN6SensorC2Ev>
    cb1a:	68fa      	ldr	r2, [r7, #12]
    cb1c:	4b13      	ldr	r3, [pc, #76]	(cb6c <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    cb1e:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    cb20:	68fa      	ldr	r2, [r7, #12]
    cb22:	7afb      	ldrb	r3, [r7, #11]
    cb24:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    cb26:	68fa      	ldr	r2, [r7, #12]
    cb28:	893b      	ldrh	r3, [r7, #8]
    cb2a:	8093      	strh	r3, [r2, #4]
    this->group = group;
    cb2c:	68fa      	ldr	r2, [r7, #12]
    cb2e:	687b      	ldr	r3, [r7, #4]
    cb30:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    cb32:	68fa      	ldr	r2, [r7, #12]
    cb34:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb38:	7313      	strb	r3, [r2, #12]
    output = false;
    cb3a:	68fa      	ldr	r2, [r7, #12]
    cb3c:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb40:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    cb42:	893b      	ldrh	r3, [r7, #8]
    cb44:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    cb46:	f04f 0304 	mov.w	r3, #4	; 0x4
    cb4a:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    cb4c:	f04f 0303 	mov.w	r3, #3	; 0x3
    cb50:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    cb52:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cb56:	6878      	ldr	r0, [r7, #4]
    cb58:	4619      	mov	r1, r3
    cb5a:	f7f4 fda9 	bl	16b0 <GPIO_Init>
}
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	4618      	mov	r0, r3
    cb62:	f107 0718 	add.w	r7, r7, #24	; 0x18
    cb66:	46bd      	mov	sp, r7
    cb68:	bd80      	pop	{r7, pc}
    cb6a:	46c0      	nop			(mov r8, r8)
    cb6c:	00022300 	.word	0x00022300

0000cb70 <_ZN10PWMHandler13setPulseWidthEt>:
{
    setPulseWidth(dutyCycle*timer->getPeriod());
}

// Change la taille de l’impulsion.
void PWMHandler::setPulseWidth(uint16_t pulseWidth)
    cb70:	b580      	push	{r7, lr}
    cb72:	b084      	sub	sp, #16
    cb74:	af00      	add	r7, sp, #0
    cb76:	6078      	str	r0, [r7, #4]
    cb78:	460b      	mov	r3, r1
    cb7a:	807b      	strh	r3, [r7, #2]
{
    TIM_TypeDef* TIMx = timer->getTIMx();
    cb7c:	687b      	ldr	r3, [r7, #4]
    cb7e:	681b      	ldr	r3, [r3, #0]
    cb80:	4618      	mov	r0, r3
    cb82:	f000 fe65 	bl	d850 <_ZN5Timer7getTIMxEv>
    cb86:	4603      	mov	r3, r0
    cb88:	60fb      	str	r3, [r7, #12]
    if(OCx == 1)
    cb8a:	687b      	ldr	r3, [r7, #4]
    cb8c:	791b      	ldrb	r3, [r3, #4]
    cb8e:	2b01      	cmp	r3, #1
    cb90:	d103      	bne.n	cb9a <_ZN10PWMHandler13setPulseWidthEt+0x2a>
        TIMx->CCR1 = pulseWidth;
    cb92:	68fa      	ldr	r2, [r7, #12]
    cb94:	887b      	ldrh	r3, [r7, #2]
    cb96:	8693      	strh	r3, [r2, #52]
    cb98:	e017      	b.n	cbca <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 2)
    cb9a:	687b      	ldr	r3, [r7, #4]
    cb9c:	791b      	ldrb	r3, [r3, #4]
    cb9e:	2b02      	cmp	r3, #2
    cba0:	d103      	bne.n	cbaa <_ZN10PWMHandler13setPulseWidthEt+0x3a>
        TIMx->CCR2 = pulseWidth;
    cba2:	68fa      	ldr	r2, [r7, #12]
    cba4:	887b      	ldrh	r3, [r7, #2]
    cba6:	8713      	strh	r3, [r2, #56]
    cba8:	e00f      	b.n	cbca <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 3)
    cbaa:	687b      	ldr	r3, [r7, #4]
    cbac:	791b      	ldrb	r3, [r3, #4]
    cbae:	2b03      	cmp	r3, #3
    cbb0:	d103      	bne.n	cbba <_ZN10PWMHandler13setPulseWidthEt+0x4a>
        TIMx->CCR3 = pulseWidth;
    cbb2:	68fa      	ldr	r2, [r7, #12]
    cbb4:	887b      	ldrh	r3, [r7, #2]
    cbb6:	8793      	strh	r3, [r2, #60]
    cbb8:	e007      	b.n	cbca <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 4)
    cbba:	687b      	ldr	r3, [r7, #4]
    cbbc:	791b      	ldrb	r3, [r3, #4]
    cbbe:	2b04      	cmp	r3, #4
    cbc0:	d103      	bne.n	cbca <_ZN10PWMHandler13setPulseWidthEt+0x5a>
        TIMx->CCR4 = pulseWidth;
    cbc2:	68fa      	ldr	r2, [r7, #12]
    cbc4:	887b      	ldrh	r3, [r7, #2]
    cbc6:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    cbca:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cbce:	46bd      	mov	sp, r7
    cbd0:	bd80      	pop	{r7, pc}
    cbd2:	46c0      	nop			(mov r8, r8)

0000cbd4 <_ZN10PWMHandlerD1Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    cbd4:	b580      	push	{r7, lr}
    cbd6:	b082      	sub	sp, #8
    cbd8:	af00      	add	r7, sp, #0
    cbda:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    cbdc:	6878      	ldr	r0, [r7, #4]
    cbde:	f04f 0100 	mov.w	r1, #0	; 0x0
    cbe2:	f7ff ffc5 	bl	cb70 <_ZN10PWMHandler13setPulseWidthEt>
}
    cbe6:	687b      	ldr	r3, [r7, #4]
    cbe8:	4618      	mov	r0, r3
    cbea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cbee:	46bd      	mov	sp, r7
    cbf0:	bd80      	pop	{r7, pc}
    cbf2:	46c0      	nop			(mov r8, r8)

0000cbf4 <_ZN10PWMHandlerD2Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    cbf4:	b580      	push	{r7, lr}
    cbf6:	b082      	sub	sp, #8
    cbf8:	af00      	add	r7, sp, #0
    cbfa:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    cbfc:	6878      	ldr	r0, [r7, #4]
    cbfe:	f04f 0100 	mov.w	r1, #0	; 0x0
    cc02:	f7ff ffb5 	bl	cb70 <_ZN10PWMHandler13setPulseWidthEt>
}
    cc06:	687b      	ldr	r3, [r7, #4]
    cc08:	4618      	mov	r0, r3
    cc0a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cc0e:	46bd      	mov	sp, r7
    cc10:	bd80      	pop	{r7, pc}
    cc12:	46c0      	nop			(mov r8, r8)

0000cc14 <_ZN10PWMHandler12setDutyCycleEf>:

//Change le rapport cyclique
void PWMHandler::setDutyCycle(float dutyCycle)
    cc14:	b580      	push	{r7, lr}
    cc16:	b082      	sub	sp, #8
    cc18:	af00      	add	r7, sp, #0
    cc1a:	6078      	str	r0, [r7, #4]
    cc1c:	6039      	str	r1, [r7, #0]
{
    setPulseWidth(dutyCycle*timer->getPeriod());
    cc1e:	687b      	ldr	r3, [r7, #4]
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	4618      	mov	r0, r3
    cc24:	f000 fe20 	bl	d868 <_ZN5Timer9getPeriodEv>
    cc28:	4603      	mov	r3, r0
    cc2a:	4618      	mov	r0, r3
    cc2c:	f00e faf2 	bl	1b214 <__aeabi_i2f>
    cc30:	4603      	mov	r3, r0
    cc32:	4618      	mov	r0, r3
    cc34:	6839      	ldr	r1, [r7, #0]
    cc36:	f00e fb41 	bl	1b2bc <__aeabi_fmul>
    cc3a:	4603      	mov	r3, r0
    cc3c:	4618      	mov	r0, r3
    cc3e:	f00e fd27 	bl	1b690 <__aeabi_f2uiz>
    cc42:	4603      	mov	r3, r0
    cc44:	b29b      	uxth	r3, r3
    cc46:	6878      	ldr	r0, [r7, #4]
    cc48:	4619      	mov	r1, r3
    cc4a:	f7ff ff91 	bl	cb70 <_ZN10PWMHandler13setPulseWidthEt>
}
    cc4e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cc52:	46bd      	mov	sp, r7
    cc54:	bd80      	pop	{r7, pc}
    cc56:	46c0      	nop			(mov r8, r8)

0000cc58 <_ZN10PWMHandlerC1EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    cc58:	b580      	push	{r7, lr}
    cc5a:	b08a      	sub	sp, #40
    cc5c:	af00      	add	r7, sp, #0
    cc5e:	60f8      	str	r0, [r7, #12]
    cc60:	60b9      	str	r1, [r7, #8]
    cc62:	4613      	mov	r3, r2
    cc64:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    cc66:	68fa      	ldr	r2, [r7, #12]
    cc68:	68bb      	ldr	r3, [r7, #8]
    cc6a:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    cc6c:	68fa      	ldr	r2, [r7, #12]
    cc6e:	79fb      	ldrb	r3, [r7, #7]
    cc70:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    cc72:	f04f 0360 	mov.w	r3, #96	; 0x60
    cc76:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    cc78:	f04f 0301 	mov.w	r3, #1	; 0x1
    cc7c:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    cc7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    cc82:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    cc84:	f04f 0300 	mov.w	r3, #0	; 0x0
    cc88:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    cc8a:	68b8      	ldr	r0, [r7, #8]
    cc8c:	f000 fde0 	bl	d850 <_ZN5Timer7getTIMxEv>
    cc90:	4603      	mov	r3, r0
    cc92:	627b      	str	r3, [r7, #36]

    switch(OCx)
    cc94:	79fb      	ldrb	r3, [r7, #7]
    cc96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    cc9a:	2b03      	cmp	r3, #3
    cc9c:	d839      	bhi.n	cd12 <_ZN10PWMHandlerC1EP5Timerh+0xba>
    cc9e:	a201      	add	r2, pc, #4	(adr r2, cca4 <_ZN10PWMHandlerC1EP5Timerh+0x4c>)
    cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cca4:	0000ccb5 	.word	0x0000ccb5
    cca8:	0000cccd 	.word	0x0000cccd
    ccac:	0000cce5 	.word	0x0000cce5
    ccb0:	0000ccfd 	.word	0x0000ccfd
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    ccb4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    ccb8:	6a78      	ldr	r0, [r7, #36]
    ccba:	4619      	mov	r1, r3
    ccbc:	f7f5 fdf8 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    ccc0:	6a78      	ldr	r0, [r7, #36]
    ccc2:	f04f 0108 	mov.w	r1, #8	; 0x8
    ccc6:	f7f6 fd0d 	bl	36e4 <TIM_OC1PreloadConfig>
    ccca:	e022      	b.n	cd12 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    cccc:	f107 0314 	add.w	r3, r7, #20	; 0x14
    ccd0:	6a78      	ldr	r0, [r7, #36]
    ccd2:	4619      	mov	r1, r3
    ccd4:	f7f5 fe7a 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    ccd8:	6a78      	ldr	r0, [r7, #36]
    ccda:	f04f 0108 	mov.w	r1, #8	; 0x8
    ccde:	f7f6 fd1f 	bl	3720 <TIM_OC2PreloadConfig>
    cce2:	e016      	b.n	cd12 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    cce4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cce8:	6a78      	ldr	r0, [r7, #36]
    ccea:	4619      	mov	r1, r3
    ccec:	f7f5 ff10 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    ccf0:	6a78      	ldr	r0, [r7, #36]
    ccf2:	f04f 0108 	mov.w	r1, #8	; 0x8
    ccf6:	f7f6 fd33 	bl	3760 <TIM_OC3PreloadConfig>
    ccfa:	e00a      	b.n	cd12 <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    ccfc:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cd00:	6a78      	ldr	r0, [r7, #36]
    cd02:	4619      	mov	r1, r3
    cd04:	f7f5 ffa4 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cd08:	6a78      	ldr	r0, [r7, #36]
    cd0a:	f04f 0108 	mov.w	r1, #8	; 0x8
    cd0e:	f7f6 fd45 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    cd12:	6a78      	ldr	r0, [r7, #36]
    cd14:	f04f 0101 	mov.w	r1, #1	; 0x1
    cd18:	f7f6 fc4c 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    cd1c:	6a78      	ldr	r0, [r7, #36]
    cd1e:	f04f 0101 	mov.w	r1, #1	; 0x1
    cd22:	f7f6 f981 	bl	3028 <TIM_Cmd>
}
    cd26:	68fb      	ldr	r3, [r7, #12]
    cd28:	4618      	mov	r0, r3
    cd2a:	f107 0728 	add.w	r7, r7, #40	; 0x28
    cd2e:	46bd      	mov	sp, r7
    cd30:	bd80      	pop	{r7, pc}
    cd32:	46c0      	nop			(mov r8, r8)

0000cd34 <_ZN10PWMHandlerC2EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    cd34:	b580      	push	{r7, lr}
    cd36:	b08a      	sub	sp, #40
    cd38:	af00      	add	r7, sp, #0
    cd3a:	60f8      	str	r0, [r7, #12]
    cd3c:	60b9      	str	r1, [r7, #8]
    cd3e:	4613      	mov	r3, r2
    cd40:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    cd42:	68fa      	ldr	r2, [r7, #12]
    cd44:	68bb      	ldr	r3, [r7, #8]
    cd46:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    cd48:	68fa      	ldr	r2, [r7, #12]
    cd4a:	79fb      	ldrb	r3, [r7, #7]
    cd4c:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    cd4e:	f04f 0360 	mov.w	r3, #96	; 0x60
    cd52:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    cd54:	f04f 0301 	mov.w	r3, #1	; 0x1
    cd58:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    cd5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd5e:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    cd60:	f04f 0300 	mov.w	r3, #0	; 0x0
    cd64:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    cd66:	68b8      	ldr	r0, [r7, #8]
    cd68:	f000 fd72 	bl	d850 <_ZN5Timer7getTIMxEv>
    cd6c:	4603      	mov	r3, r0
    cd6e:	627b      	str	r3, [r7, #36]

    switch(OCx)
    cd70:	79fb      	ldrb	r3, [r7, #7]
    cd72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    cd76:	2b03      	cmp	r3, #3
    cd78:	d839      	bhi.n	cdee <_ZN10PWMHandlerC2EP5Timerh+0xba>
    cd7a:	a201      	add	r2, pc, #4	(adr r2, cd80 <_ZN10PWMHandlerC2EP5Timerh+0x4c>)
    cd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    cd80:	0000cd91 	.word	0x0000cd91
    cd84:	0000cda9 	.word	0x0000cda9
    cd88:	0000cdc1 	.word	0x0000cdc1
    cd8c:	0000cdd9 	.word	0x0000cdd9
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    cd90:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cd94:	6a78      	ldr	r0, [r7, #36]
    cd96:	4619      	mov	r1, r3
    cd98:	f7f5 fd8a 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cd9c:	6a78      	ldr	r0, [r7, #36]
    cd9e:	f04f 0108 	mov.w	r1, #8	; 0x8
    cda2:	f7f6 fc9f 	bl	36e4 <TIM_OC1PreloadConfig>
    cda6:	e022      	b.n	cdee <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    cda8:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cdac:	6a78      	ldr	r0, [r7, #36]
    cdae:	4619      	mov	r1, r3
    cdb0:	f7f5 fe0c 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cdb4:	6a78      	ldr	r0, [r7, #36]
    cdb6:	f04f 0108 	mov.w	r1, #8	; 0x8
    cdba:	f7f6 fcb1 	bl	3720 <TIM_OC2PreloadConfig>
    cdbe:	e016      	b.n	cdee <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    cdc0:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cdc4:	6a78      	ldr	r0, [r7, #36]
    cdc6:	4619      	mov	r1, r3
    cdc8:	f7f5 fea2 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cdcc:	6a78      	ldr	r0, [r7, #36]
    cdce:	f04f 0108 	mov.w	r1, #8	; 0x8
    cdd2:	f7f6 fcc5 	bl	3760 <TIM_OC3PreloadConfig>
    cdd6:	e00a      	b.n	cdee <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    cdd8:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cddc:	6a78      	ldr	r0, [r7, #36]
    cdde:	4619      	mov	r1, r3
    cde0:	f7f5 ff36 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    cde4:	6a78      	ldr	r0, [r7, #36]
    cde6:	f04f 0108 	mov.w	r1, #8	; 0x8
    cdea:	f7f6 fcd7 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    cdee:	6a78      	ldr	r0, [r7, #36]
    cdf0:	f04f 0101 	mov.w	r1, #1	; 0x1
    cdf4:	f7f6 fbde 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    cdf8:	6a78      	ldr	r0, [r7, #36]
    cdfa:	f04f 0101 	mov.w	r1, #1	; 0x1
    cdfe:	f7f6 f913 	bl	3028 <TIM_Cmd>
}
    ce02:	68fb      	ldr	r3, [r7, #12]
    ce04:	4618      	mov	r0, r3
    ce06:	f107 0728 	add.w	r7, r7, #40	; 0x28
    ce0a:	46bd      	mov	sp, r7
    ce0c:	bd80      	pop	{r7, pc}
    ce0e:	46c0      	nop			(mov r8, r8)

0000ce10 <_ZN22QuadratureCoderHandler12getTickValueEv>:

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
}

int16_t QuadratureCoderHandler::getTickValue()
    ce10:	b580      	push	{r7, lr}
    ce12:	b084      	sub	sp, #16
    ce14:	af00      	add	r7, sp, #0
    ce16:	6078      	str	r0, [r7, #4]
{
    // On enregistre le nbr de tick depuis la dernière remise à zero
    int16_t tick = TIM_GetCounter(coder_tim_port);
    ce18:	687b      	ldr	r3, [r7, #4]
    ce1a:	681b      	ldr	r3, [r3, #0]
    ce1c:	4618      	mov	r0, r3
    ce1e:	f7f7 f9af 	bl	4180 <TIM_GetCounter>
    ce22:	4603      	mov	r3, r0
    ce24:	81fb      	strh	r3, [r7, #14]

    // On remet à zero
    TIM_SetCounter(coder_tim_port, 0);
    ce26:	687b      	ldr	r3, [r7, #4]
    ce28:	681b      	ldr	r3, [r3, #0]
    ce2a:	4618      	mov	r0, r3
    ce2c:	f04f 0100 	mov.w	r1, #0	; 0x0
    ce30:	f7f7 f86c 	bl	3f0c <TIM_SetCounter>

    // On retourne ces ticks
    return tick;
    ce34:	89fb      	ldrh	r3, [r7, #14]
    ce36:	b21b      	sxth	r3, r3
}
    ce38:	4618      	mov	r0, r3
    ce3a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ce3e:	46bd      	mov	sp, r7
    ce40:	bd80      	pop	{r7, pc}
    ce42:	46c0      	nop			(mov r8, r8)

0000ce44 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    ce44:	b580      	push	{r7, lr}
    ce46:	b088      	sub	sp, #32
    ce48:	af00      	add	r7, sp, #0
    ce4a:	60f8      	str	r0, [r7, #12]
    ce4c:	60b9      	str	r1, [r7, #8]
    ce4e:	607a      	str	r2, [r7, #4]
    ce50:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    ce52:	68fa      	ldr	r2, [r7, #12]
    ce54:	68bb      	ldr	r3, [r7, #8]
    ce56:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    ce58:	68b8      	ldr	r0, [r7, #8]
    ce5a:	f000 fd11 	bl	d880 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    ce5e:	f04f 0348 	mov.w	r3, #72	; 0x48
    ce62:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    ce64:	f04f 0301 	mov.w	r3, #1	; 0x1
    ce68:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    ce6a:	887b      	ldrh	r3, [r7, #2]
    ce6c:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    ce6e:	f107 0312 	add.w	r3, r7, #18	; 0x12
    ce72:	6878      	ldr	r0, [r7, #4]
    ce74:	4619      	mov	r1, r3
    ce76:	f7f4 fc1b 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    ce7a:	f04f 0348 	mov.w	r3, #72	; 0x48
    ce7e:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    ce80:	f04f 0301 	mov.w	r3, #1	; 0x1
    ce84:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    ce86:	8dbb      	ldrh	r3, [r7, #44]
    ce88:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    ce8a:	f107 0312 	add.w	r3, r7, #18	; 0x12
    ce8e:	6ab8      	ldr	r0, [r7, #40]
    ce90:	4619      	mov	r1, r3
    ce92:	f7f4 fc0d 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    ce96:	f04f 0300 	mov.w	r3, #0	; 0x0
    ce9a:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    ce9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    cea0:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    cea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cea6:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    cea8:	f04f 0300 	mov.w	r3, #0	; 0x0
    ceac:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    ceae:	f04f 0300 	mov.w	r3, #0	; 0x0
    ceb2:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    ceb4:	68fb      	ldr	r3, [r7, #12]
    ceb6:	681b      	ldr	r3, [r3, #0]
    ceb8:	f107 0216 	add.w	r2, r7, #22	; 0x16
    cebc:	4618      	mov	r0, r3
    cebe:	4611      	mov	r1, r2
    cec0:	f7f5 fcba 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    cec4:	68fb      	ldr	r3, [r7, #12]
    cec6:	681b      	ldr	r3, [r3, #0]
    cec8:	4618      	mov	r0, r3
    ceca:	f04f 0103 	mov.w	r1, #3	; 0x3
    cece:	f04f 0200 	mov.w	r2, #0	; 0x0
    ced2:	f04f 0300 	mov.w	r3, #0	; 0x0
    ced6:	f7f6 faa1 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    ceda:	68fb      	ldr	r3, [r7, #12]
    cedc:	681b      	ldr	r3, [r3, #0]
    cede:	4618      	mov	r0, r3
    cee0:	f04f 0101 	mov.w	r1, #1	; 0x1
    cee4:	f7f6 f8a0 	bl	3028 <TIM_Cmd>
}
    cee8:	68fb      	ldr	r3, [r7, #12]
    ceea:	4618      	mov	r0, r3
    ceec:	f107 0720 	add.w	r7, r7, #32	; 0x20
    cef0:	46bd      	mov	sp, r7
    cef2:	bd80      	pop	{r7, pc}

0000cef4 <_ZN22QuadratureCoderHandlerC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    cef4:	b580      	push	{r7, lr}
    cef6:	b088      	sub	sp, #32
    cef8:	af00      	add	r7, sp, #0
    cefa:	60f8      	str	r0, [r7, #12]
    cefc:	60b9      	str	r1, [r7, #8]
    cefe:	607a      	str	r2, [r7, #4]
    cf00:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    cf02:	68fa      	ldr	r2, [r7, #12]
    cf04:	68bb      	ldr	r3, [r7, #8]
    cf06:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    cf08:	68b8      	ldr	r0, [r7, #8]
    cf0a:	f000 fcb9 	bl	d880 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    cf0e:	f04f 0348 	mov.w	r3, #72	; 0x48
    cf12:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cf14:	f04f 0301 	mov.w	r3, #1	; 0x1
    cf18:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    cf1a:	887b      	ldrh	r3, [r7, #2]
    cf1c:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    cf1e:	f107 0312 	add.w	r3, r7, #18	; 0x12
    cf22:	6878      	ldr	r0, [r7, #4]
    cf24:	4619      	mov	r1, r3
    cf26:	f7f4 fbc3 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    cf2a:	f04f 0348 	mov.w	r3, #72	; 0x48
    cf2e:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    cf30:	f04f 0301 	mov.w	r3, #1	; 0x1
    cf34:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    cf36:	8dbb      	ldrh	r3, [r7, #44]
    cf38:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    cf3a:	f107 0312 	add.w	r3, r7, #18	; 0x12
    cf3e:	6ab8      	ldr	r0, [r7, #40]
    cf40:	4619      	mov	r1, r3
    cf42:	f7f4 fbb5 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    cf46:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf4a:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    cf4c:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf50:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    cf52:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cf56:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    cf58:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf5c:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    cf5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf62:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    cf64:	68fb      	ldr	r3, [r7, #12]
    cf66:	681b      	ldr	r3, [r3, #0]
    cf68:	f107 0216 	add.w	r2, r7, #22	; 0x16
    cf6c:	4618      	mov	r0, r3
    cf6e:	4611      	mov	r1, r2
    cf70:	f7f5 fc62 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    cf74:	68fb      	ldr	r3, [r7, #12]
    cf76:	681b      	ldr	r3, [r3, #0]
    cf78:	4618      	mov	r0, r3
    cf7a:	f04f 0103 	mov.w	r1, #3	; 0x3
    cf7e:	f04f 0200 	mov.w	r2, #0	; 0x0
    cf82:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf86:	f7f6 fa49 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    cf8a:	68fb      	ldr	r3, [r7, #12]
    cf8c:	681b      	ldr	r3, [r3, #0]
    cf8e:	4618      	mov	r0, r3
    cf90:	f04f 0101 	mov.w	r1, #1	; 0x1
    cf94:	f7f6 f848 	bl	3028 <TIM_Cmd>
}
    cf98:	68fb      	ldr	r3, [r7, #12]
    cf9a:	4618      	mov	r0, r3
    cf9c:	f107 0720 	add.w	r7, r7, #32	; 0x20
    cfa0:	46bd      	mov	sp, r7
    cfa2:	bd80      	pop	{r7, pc}
    cfa4:	0000      	lsls	r0, r0, #0
	...

0000cfa8 <_ZN6Remote13dataAvailableEv>:
    }
    for(int i=0; i<10; i++)
        Remote::getSingleton()->sendData(' ');
}

bool Remote::dataAvailable()
    cfa8:	b480      	push	{r7}
    cfaa:	b083      	sub	sp, #12
    cfac:	af00      	add	r7, sp, #0
    cfae:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    return REMOTE_USART_INDEX->SR & USART_FLAG_RXNE;
    cfb0:	4b07      	ldr	r3, [pc, #28]	(cfd0 <_ZN6Remote13dataAvailableEv+0x28>)
    cfb2:	881b      	ldrh	r3, [r3, #0]
    cfb4:	b29b      	uxth	r3, r3
    cfb6:	f003 0320 	and.w	r3, r3, #32	; 0x20
    cfba:	2b00      	cmp	r3, #0
    cfbc:	bf0c      	ite	eq
    cfbe:	2300      	moveq	r3, #0
    cfc0:	2301      	movne	r3, #1
    cfc2:	b2db      	uxtb	r3, r3
#else
    return false;
#endif
}
    cfc4:	4618      	mov	r0, r3
    cfc6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    cfca:	46bd      	mov	sp, r7
    cfcc:	bc80      	pop	{r7}
    cfce:	4770      	bx	lr
    cfd0:	40013800 	.word	0x40013800

0000cfd4 <_ZN6Remote11receiveDataEv>:

int Remote::receiveData()
    cfd4:	b480      	push	{r7}
    cfd6:	b083      	sub	sp, #12
    cfd8:	af00      	add	r7, sp, #0
    cfda:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    while (!(REMOTE_USART_INDEX->SR & USART_FLAG_RXNE));
    cfdc:	4b0c      	ldr	r3, [pc, #48]	(d010 <_ZN6Remote11receiveDataEv+0x3c>)
    cfde:	881b      	ldrh	r3, [r3, #0]
    cfe0:	b29b      	uxth	r3, r3
    cfe2:	f003 0320 	and.w	r3, r3, #32	; 0x20
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	bf14      	ite	ne
    cfea:	2300      	movne	r3, #0
    cfec:	2301      	moveq	r3, #1
    cfee:	b2db      	uxtb	r3, r3
    cff0:	2b00      	cmp	r3, #0
    cff2:	d1f3      	bne.n	cfdc <_ZN6Remote11receiveDataEv+0x8>

    return ((int)(REMOTE_USART_INDEX->DR & 0x1FF));
    cff4:	4b06      	ldr	r3, [pc, #24]	(d010 <_ZN6Remote11receiveDataEv+0x3c>)
    cff6:	889b      	ldrh	r3, [r3, #4]
    cff8:	b29b      	uxth	r3, r3
    cffa:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    cffe:	ea4f 53d3 	mov.w	r3, r3, lsr #23
#else
    return 0;
#endif
}
    d002:	4618      	mov	r0, r3
    d004:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d008:	46bd      	mov	sp, r7
    d00a:	bc80      	pop	{r7}
    d00c:	4770      	bx	lr
    d00e:	46c0      	nop			(mov r8, r8)
    d010:	40013800 	.word	0x40013800

0000d014 <_ZN6Remote12isRemoteModeEv>:
        if (order>=51 and order<=101)
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    }
}

bool Remote::isRemoteMode()
    d014:	b480      	push	{r7}
    d016:	b083      	sub	sp, #12
    d018:	af00      	add	r7, sp, #0
    d01a:	6078      	str	r0, [r7, #4]
{
    return remoteMode;
    d01c:	687b      	ldr	r3, [r7, #4]
    d01e:	791b      	ldrb	r3, [r3, #4]
}
    d020:	4618      	mov	r0, r3
    d022:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d026:	46bd      	mov	sp, r7
    d028:	bc80      	pop	{r7}
    d02a:	4770      	bx	lr

0000d02c <_ZN6Remote10getLeftPWMEv>:

float Remote::getLeftPWM()
    d02c:	b480      	push	{r7}
    d02e:	b083      	sub	sp, #12
    d030:	af00      	add	r7, sp, #0
    d032:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    d034:	687b      	ldr	r3, [r7, #4]
    d036:	68db      	ldr	r3, [r3, #12]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed + angSpeed;
#else
    return linSpeed - angSpeed;
#endif
}
    d038:	4618      	mov	r0, r3
    d03a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d03e:	46bd      	mov	sp, r7
    d040:	bc80      	pop	{r7}
    d042:	4770      	bx	lr

0000d044 <_ZN6Remote11getRightPWMEv>:

float Remote::getRightPWM()
    d044:	b480      	push	{r7}
    d046:	b083      	sub	sp, #12
    d048:	af00      	add	r7, sp, #0
    d04a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    d04c:	687b      	ldr	r3, [r7, #4]
    d04e:	691b      	ldr	r3, [r3, #16]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed - angSpeed;
#else
    return linSpeed + angSpeed;
#endif
}
    d050:	4618      	mov	r0, r3
    d052:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d056:	46bd      	mov	sp, r7
    d058:	bc80      	pop	{r7}
    d05a:	4770      	bx	lr

0000d05c <_ZN6Remote8sendDataEi>:

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
#endif
}

void Remote::sendData(int data)
    d05c:	b580      	push	{r7, lr}
    d05e:	b082      	sub	sp, #8
    d060:	af00      	add	r7, sp, #0
    d062:	6078      	str	r0, [r7, #4]
    d064:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(REMOTE_USART_INDEX, USART_FLAG_TXE) == RESET);
    d066:	480b      	ldr	r0, [pc, #44]	(d094 <_ZN6Remote8sendDataEi+0x38>)
    d068:	f04f 0180 	mov.w	r1, #128	; 0x80
    d06c:	f7f7 fe7e 	bl	4d6c <USART_GetFlagStatus>
    d070:	4603      	mov	r3, r0
    d072:	2b00      	cmp	r3, #0
    d074:	bf14      	ite	ne
    d076:	2300      	movne	r3, #0
    d078:	2301      	moveq	r3, #1
    d07a:	b2db      	uxtb	r3, r3
    d07c:	2b00      	cmp	r3, #0
    d07e:	d1f2      	bne.n	d066 <_ZN6Remote8sendDataEi+0xa>
    USART_SendData(REMOTE_USART_INDEX, (u16) data);
    d080:	683b      	ldr	r3, [r7, #0]
    d082:	b29b      	uxth	r3, r3
    d084:	4803      	ldr	r0, [pc, #12]	(d094 <_ZN6Remote8sendDataEi+0x38>)
    d086:	4619      	mov	r1, r3
    d088:	f7f7 fd3c 	bl	4b04 <USART_SendData>
#endif
}
    d08c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d090:	46bd      	mov	sp, r7
    d092:	bd80      	pop	{r7, pc}
    d094:	40013800 	.word	0x40013800

0000d098 <_ZN6Remote8initUARTEi>:

#endif

}

void Remote::initUART(int baudRate)
    d098:	b580      	push	{r7, lr}
    d09a:	b086      	sub	sp, #24
    d09c:	af00      	add	r7, sp, #0
    d09e:	6078      	str	r0, [r7, #4]
    d0a0:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = baudRate;
    d0a2:	683b      	ldr	r3, [r7, #0]
    d0a4:	60bb      	str	r3, [r7, #8]

    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    d0a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d0aa:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    d0ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    d0b0:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    d0b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d0b6:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    d0b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    d0bc:	82bb      	strh	r3, [r7, #20]

    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    d0be:	f04f 030c 	mov.w	r3, #12	; 0xc
    d0c2:	827b      	strh	r3, [r7, #18]

    USART_Init(REMOTE_USART_INDEX, &USART_InitStructure);
    d0c4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d0c8:	4806      	ldr	r0, [pc, #24]	(d0e4 <_ZN6Remote8initUARTEi+0x4c>)
    d0ca:	4619      	mov	r1, r3
    d0cc:	f7f7 faa8 	bl	4620 <USART_Init>

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
    d0d0:	4804      	ldr	r0, [pc, #16]	(d0e4 <_ZN6Remote8initUARTEi+0x4c>)
    d0d2:	f04f 0101 	mov.w	r1, #1	; 0x1
    d0d6:	f7f7 fbc3 	bl	4860 <USART_Cmd>
#endif
}
    d0da:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d0de:	46bd      	mov	sp, r7
    d0e0:	bd80      	pop	{r7, pc}
    d0e2:	46c0      	nop			(mov r8, r8)
    d0e4:	40013800 	.word	0x40013800

0000d0e8 <_ZN6Remote22initClocksAndPortsGPIOEv>:

    linSpeed = 0.;
    angSpeed = 0.;
}

void Remote::initClocksAndPortsGPIO()
    d0e8:	b580      	push	{r7, lr}
    d0ea:	b084      	sub	sp, #16
    d0ec:	af00      	add	r7, sp, #0
    d0ee:	6078      	str	r0, [r7, #4]
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    //RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    d0f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    d0f4:	f04f 0101 	mov.w	r1, #1	; 0x1
    d0f8:	f7f5 f9a6 	bl	2448 <RCC_APB2PeriphClockCmd>

    GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
    d0fc:	f04f 0004 	mov.w	r0, #4	; 0x4
    d100:	f04f 0101 	mov.w	r1, #1	; 0x1
    d104:	f7f4 fcc4 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
    // port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    d108:	f04f 0340 	mov.w	r3, #64	; 0x40
    d10c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d10e:	f04f 0318 	mov.w	r3, #24	; 0x18
    d112:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    d114:	f04f 0303 	mov.w	r3, #3	; 0x3
    d118:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    d11a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d11e:	480b      	ldr	r0, [pc, #44]	(d14c <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    d120:	4619      	mov	r1, r3
    d122:	f7f4 fac5 	bl	16b0 <GPIO_Init>

    // port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    d126:	f04f 0380 	mov.w	r3, #128	; 0x80
    d12a:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    d12c:	f04f 0304 	mov.w	r3, #4	; 0x4
    d130:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    d132:	f04f 0303 	mov.w	r3, #3	; 0x3
    d136:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    d138:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d13c:	4803      	ldr	r0, [pc, #12]	(d14c <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    d13e:	4619      	mov	r1, r3
    d140:	f7f4 fab6 	bl	16b0 <GPIO_Init>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);*/     // Rx
#endif

#endif

}
    d144:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d148:	46bd      	mov	sp, r7
    d14a:	bd80      	pop	{r7, pc}
    d14c:	40010c00 	.word	0x40010c00

0000d150 <_ZN6RemoteC1Ev>:

    return singleton;
}


Remote::Remote()
    d150:	b580      	push	{r7, lr}
    d152:	b082      	sub	sp, #8
    d154:	af00      	add	r7, sp, #0
    d156:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    d158:	6878      	ldr	r0, [r7, #4]
    d15a:	f7ff ffc5 	bl	d0e8 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    d15e:	6878      	ldr	r0, [r7, #4]
    d160:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    d164:	f7ff ff98 	bl	d098 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    d168:	687a      	ldr	r2, [r7, #4]
    d16a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d16e:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    d170:	687a      	ldr	r2, [r7, #4]
    d172:	f04f 0300 	mov.w	r3, #0	; 0x0
    d176:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    d178:	687a      	ldr	r2, [r7, #4]
    d17a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d17e:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    d180:	687a      	ldr	r2, [r7, #4]
    d182:	f04f 0300 	mov.w	r3, #0	; 0x0
    d186:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    d188:	687a      	ldr	r2, [r7, #4]
    d18a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d18e:	6013      	str	r3, [r2, #0]

    brakInv = false;
    d190:	687a      	ldr	r2, [r7, #4]
    d192:	f04f 0300 	mov.w	r3, #0	; 0x0
    d196:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    d198:	687a      	ldr	r2, [r7, #4]
    d19a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d19e:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    d1a0:	687a      	ldr	r2, [r7, #4]
    d1a2:	4b05      	ldr	r3, [pc, #20]	(d1b8 <_ZN6RemoteC1Ev+0x68>)
    d1a4:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    d1a6:	687a      	ldr	r2, [r7, #4]
    d1a8:	4b03      	ldr	r3, [pc, #12]	(d1b8 <_ZN6RemoteC1Ev+0x68>)
    d1aa:	6113      	str	r3, [r2, #16]
}
    d1ac:	687b      	ldr	r3, [r7, #4]
    d1ae:	4618      	mov	r0, r3
    d1b0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d1b4:	46bd      	mov	sp, r7
    d1b6:	bd80      	pop	{r7, pc}
    d1b8:	00000000 	.word	0x00000000

0000d1bc <_ZN6RemoteC2Ev>:

    return singleton;
}


Remote::Remote()
    d1bc:	b580      	push	{r7, lr}
    d1be:	b082      	sub	sp, #8
    d1c0:	af00      	add	r7, sp, #0
    d1c2:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    d1c4:	6878      	ldr	r0, [r7, #4]
    d1c6:	f7ff ff8f 	bl	d0e8 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    d1ca:	6878      	ldr	r0, [r7, #4]
    d1cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    d1d0:	f7ff ff62 	bl	d098 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    d1d4:	687a      	ldr	r2, [r7, #4]
    d1d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1da:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    d1dc:	687a      	ldr	r2, [r7, #4]
    d1de:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1e2:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    d1e4:	687a      	ldr	r2, [r7, #4]
    d1e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1ea:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    d1ec:	687a      	ldr	r2, [r7, #4]
    d1ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    d1f2:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    d1f4:	687a      	ldr	r2, [r7, #4]
    d1f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d1fa:	6013      	str	r3, [r2, #0]

    brakInv = false;
    d1fc:	687a      	ldr	r2, [r7, #4]
    d1fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    d202:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    d204:	687a      	ldr	r2, [r7, #4]
    d206:	f04f 0300 	mov.w	r3, #0	; 0x0
    d20a:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    d20c:	687a      	ldr	r2, [r7, #4]
    d20e:	4b05      	ldr	r3, [pc, #20]	(d224 <_ZN6RemoteC2Ev+0x68>)
    d210:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    d212:	687a      	ldr	r2, [r7, #4]
    d214:	4b03      	ldr	r3, [pc, #12]	(d224 <_ZN6RemoteC2Ev+0x68>)
    d216:	6113      	str	r3, [r2, #16]
}
    d218:	687b      	ldr	r3, [r7, #4]
    d21a:	4618      	mov	r0, r3
    d21c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d220:	46bd      	mov	sp, r7
    d222:	bd80      	pop	{r7, pc}
    d224:	00000000 	.word	0x00000000

0000d228 <_ZN6Remote12getSingletonEv>:
#include "brak.h"
#include "brasLateraux.h"

Remote* Remote::singleton = 0;

Remote* Remote::getSingleton()
    d228:	b580      	push	{r7, lr}
    d22a:	b082      	sub	sp, #8
    d22c:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    d22e:	4b0f      	ldr	r3, [pc, #60]	(d26c <_ZN6Remote12getSingletonEv+0x44>)
    d230:	681b      	ldr	r3, [r3, #0]
    d232:	2b00      	cmp	r3, #0
    d234:	d113      	bne.n	d25e <_ZN6Remote12getSingletonEv+0x36>
        singleton = new Remote();
    d236:	f04f 0014 	mov.w	r0, #20	; 0x14
    d23a:	f001 fc59 	bl	eaf0 <_Znwj>
    d23e:	4603      	mov	r3, r0
    d240:	603b      	str	r3, [r7, #0]
    d242:	683a      	ldr	r2, [r7, #0]
    d244:	2a00      	cmp	r2, #0
    d246:	d005      	beq.n	d254 <_ZN6Remote12getSingletonEv+0x2c>
    d248:	6838      	ldr	r0, [r7, #0]
    d24a:	f7ff ff81 	bl	d150 <_ZN6RemoteC1Ev>
    d24e:	683b      	ldr	r3, [r7, #0]
    d250:	607b      	str	r3, [r7, #4]
    d252:	e001      	b.n	d258 <_ZN6Remote12getSingletonEv+0x30>
    d254:	683a      	ldr	r2, [r7, #0]
    d256:	607a      	str	r2, [r7, #4]
    d258:	4b04      	ldr	r3, [pc, #16]	(d26c <_ZN6Remote12getSingletonEv+0x44>)
    d25a:	687a      	ldr	r2, [r7, #4]
    d25c:	601a      	str	r2, [r3, #0]

    return singleton;
    d25e:	4b03      	ldr	r3, [pc, #12]	(d26c <_ZN6Remote12getSingletonEv+0x44>)
    d260:	681b      	ldr	r3, [r3, #0]
}
    d262:	4618      	mov	r0, r3
    d264:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d268:	46bd      	mov	sp, r7
    d26a:	bd80      	pop	{r7, pc}
    d26c:	20000590 	.word	0x20000590

0000d270 <_ZN6Remote3logEPc>:
//        sendData(data[i]);

//    delete [] data;
//}

void Remote::log(char* msg)
    d270:	b580      	push	{r7, lr}
    d272:	b084      	sub	sp, #16
    d274:	af00      	add	r7, sp, #0
    d276:	6078      	str	r0, [r7, #4]
{
    int pos = 0;
    d278:	f04f 0300 	mov.w	r3, #0	; 0x0
    d27c:	60bb      	str	r3, [r7, #8]
    d27e:	e00e      	b.n	d29e <_ZN6Remote3logEPc+0x2e>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
    d280:	f7ff ffd2 	bl	d228 <_ZN6Remote12getSingletonEv>
    d284:	4601      	mov	r1, r0
    d286:	68ba      	ldr	r2, [r7, #8]
    d288:	687b      	ldr	r3, [r7, #4]
    d28a:	4413      	add	r3, r2
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	4608      	mov	r0, r1
    d290:	4619      	mov	r1, r3
    d292:	f7ff fee3 	bl	d05c <_ZN6Remote8sendDataEi>
        pos++;
    d296:	68bb      	ldr	r3, [r7, #8]
    d298:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d29c:	60bb      	str	r3, [r7, #8]
//}

void Remote::log(char* msg)
{
    int pos = 0;
    while(msg[pos] != '\0' )
    d29e:	68ba      	ldr	r2, [r7, #8]
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	4413      	add	r3, r2
    d2a4:	781b      	ldrb	r3, [r3, #0]
    d2a6:	2b00      	cmp	r3, #0
    d2a8:	d1ea      	bne.n	d280 <_ZN6Remote3logEPc+0x10>
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    d2aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    d2ae:	60fb      	str	r3, [r7, #12]
    d2b0:	e00b      	b.n	d2ca <_ZN6Remote3logEPc+0x5a>
        Remote::getSingleton()->sendData(' ');
    d2b2:	f7ff ffb9 	bl	d228 <_ZN6Remote12getSingletonEv>
    d2b6:	4603      	mov	r3, r0
    d2b8:	4618      	mov	r0, r3
    d2ba:	f04f 0120 	mov.w	r1, #32	; 0x20
    d2be:	f7ff fecd 	bl	d05c <_ZN6Remote8sendDataEi>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    d2c2:	68fb      	ldr	r3, [r7, #12]
    d2c4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d2c8:	60fb      	str	r3, [r7, #12]
    d2ca:	68fb      	ldr	r3, [r7, #12]
    d2cc:	2b09      	cmp	r3, #9
    d2ce:	ddf0      	ble.n	d2b2 <_ZN6Remote3logEPc+0x42>
        Remote::getSingleton()->sendData(' ');
}
    d2d0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d2d4:	46bd      	mov	sp, r7
    d2d6:	bd80      	pop	{r7, pc}

0000d2d8 <_ZN6Remote6updateEb>:
#else
    return 0;
#endif
}

void Remote::update(bool allowChangeMode)
    d2d8:	b580      	push	{r7, lr}
    d2da:	b086      	sub	sp, #24
    d2dc:	af00      	add	r7, sp, #0
    d2de:	60f8      	str	r0, [r7, #12]
    d2e0:	460b      	mov	r3, r1
    d2e2:	72fb      	strb	r3, [r7, #11]
    }
#endif
*/
    //if (allowChangeMode)
    {
        if (dataAvailable() && !remoteMode)
    d2e4:	68f8      	ldr	r0, [r7, #12]
    d2e6:	f7ff fe5f 	bl	cfa8 <_ZN6Remote13dataAvailableEv>
    d2ea:	4603      	mov	r3, r0
    d2ec:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d2f0:	b2db      	uxtb	r3, r3
    d2f2:	2b00      	cmp	r3, #0
    d2f4:	d10d      	bne.n	d312 <_ZN6Remote6updateEb+0x3a>
    d2f6:	68fb      	ldr	r3, [r7, #12]
    d2f8:	791b      	ldrb	r3, [r3, #4]
    d2fa:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d2fe:	b2db      	uxtb	r3, r3
    d300:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d304:	b2db      	uxtb	r3, r3
    d306:	2b00      	cmp	r3, #0
    d308:	d103      	bne.n	d312 <_ZN6Remote6updateEb+0x3a>
    d30a:	f04f 0301 	mov.w	r3, #1	; 0x1
    d30e:	603b      	str	r3, [r7, #0]
    d310:	e002      	b.n	d318 <_ZN6Remote6updateEb+0x40>
    d312:	f04f 0300 	mov.w	r3, #0	; 0x0
    d316:	603b      	str	r3, [r7, #0]
    d318:	683b      	ldr	r3, [r7, #0]
    d31a:	2b00      	cmp	r3, #0
    d31c:	d007      	beq.n	d32e <_ZN6Remote6updateEb+0x56>
        {
            remoteMode = true;
    d31e:	68fa      	ldr	r2, [r7, #12]
    d320:	f04f 0301 	mov.w	r3, #1	; 0x1
    d324:	7113      	strb	r3, [r2, #4]
            Remote::log("Reçu, avant toute commandant !");
    d326:	4b54      	ldr	r3, [pc, #336]	(d478 <_ZN6Remote6updateEb+0x1a0>)
    d328:	4618      	mov	r0, r3
    d32a:	f7ff ffa1 	bl	d270 <_ZN6Remote3logEPc>
        }
        if (remoteMode)
    d32e:	68fb      	ldr	r3, [r7, #12]
    d330:	791b      	ldrb	r3, [r3, #4]
    d332:	2b00      	cmp	r3, #0
    d334:	d004      	beq.n	d340 <_ZN6Remote6updateEb+0x68>
            Led::setOn(1);
    d336:	f04f 0001 	mov.w	r0, #1	; 0x1
    d33a:	f7ff f97d 	bl	c638 <_ZN3Led5setOnEi>
    d33e:	e003      	b.n	d348 <_ZN6Remote6updateEb+0x70>
        else
            Led::setOff(1);
    d340:	f04f 0001 	mov.w	r0, #1	; 0x1
    d344:	f7ff f938 	bl	c5b8 <_ZN3Led6setOffEi>
    }

    if (!allowChangeMode && remoteMode && dataAvailable())
    d348:	7afb      	ldrb	r3, [r7, #11]
    d34a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d34e:	b2db      	uxtb	r3, r3
    d350:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d354:	b2db      	uxtb	r3, r3
    d356:	2b00      	cmp	r3, #0
    d358:	d113      	bne.n	d382 <_ZN6Remote6updateEb+0xaa>
    d35a:	68fb      	ldr	r3, [r7, #12]
    d35c:	791b      	ldrb	r3, [r3, #4]
    d35e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d362:	b2db      	uxtb	r3, r3
    d364:	2b00      	cmp	r3, #0
    d366:	d10c      	bne.n	d382 <_ZN6Remote6updateEb+0xaa>
    d368:	68f8      	ldr	r0, [r7, #12]
    d36a:	f7ff fe1d 	bl	cfa8 <_ZN6Remote13dataAvailableEv>
    d36e:	4603      	mov	r3, r0
    d370:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d374:	b2db      	uxtb	r3, r3
    d376:	2b00      	cmp	r3, #0
    d378:	d103      	bne.n	d382 <_ZN6Remote6updateEb+0xaa>
    d37a:	f04f 0301 	mov.w	r3, #1	; 0x1
    d37e:	607b      	str	r3, [r7, #4]
    d380:	e002      	b.n	d388 <_ZN6Remote6updateEb+0xb0>
    d382:	f04f 0300 	mov.w	r3, #0	; 0x0
    d386:	607b      	str	r3, [r7, #4]
    d388:	687b      	ldr	r3, [r7, #4]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d069      	beq.n	d462 <_ZN6Remote6updateEb+0x18a>
    {
        int order = receiveData();
    d38e:	68f8      	ldr	r0, [r7, #12]
    d390:	f7ff fe20 	bl	cfd4 <_ZN6Remote11receiveDataEv>
    d394:	4603      	mov	r3, r0
    d396:	617b      	str	r3, [r7, #20]
        Remote::log("Got:");
    d398:	4b38      	ldr	r3, [pc, #224]	(d47c <_ZN6Remote6updateEb+0x1a4>)
    d39a:	4618      	mov	r0, r3
    d39c:	f7ff ff68 	bl	d270 <_ZN6Remote3logEPc>
        Remote::getSingleton()->sendData(order);
    d3a0:	f7ff ff42 	bl	d228 <_ZN6Remote12getSingletonEv>
    d3a4:	4603      	mov	r3, r0
    d3a6:	4618      	mov	r0, r3
    d3a8:	6979      	ldr	r1, [r7, #20]
    d3aa:	f7ff fe57 	bl	d05c <_ZN6Remote8sendDataEi>
            break;
        }
#endif
*/
        // Linear Speed
        if (order>=0 and order<=50)
    d3ae:	697b      	ldr	r3, [r7, #20]
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	db27      	blt.n	d404 <_ZN6Remote6updateEb+0x12c>
    d3b4:	697b      	ldr	r3, [r7, #20]
    d3b6:	2b32      	cmp	r3, #50
    d3b8:	dc24      	bgt.n	d404 <_ZN6Remote6updateEb+0x12c>
            linSpeed = ((float)(order-25)) / 25. * LINEAR_REMOTE_SPEED_LIMIT;
    d3ba:	697b      	ldr	r3, [r7, #20]
    d3bc:	f1a3 0319 	sub.w	r3, r3, #25	; 0x19
    d3c0:	4618      	mov	r0, r3
    d3c2:	f00d ff27 	bl	1b214 <__aeabi_i2f>
    d3c6:	4603      	mov	r3, r0
    d3c8:	4618      	mov	r0, r3
    d3ca:	f00d fb05 	bl	1a9d8 <__aeabi_f2d>
    d3ce:	4602      	mov	r2, r0
    d3d0:	460b      	mov	r3, r1
    d3d2:	4610      	mov	r0, r2
    d3d4:	4619      	mov	r1, r3
    d3d6:	f04f 0200 	mov.w	r2, #0	; 0x0
    d3da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d3de:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    d3e2:	f00d fc77 	bl	1acd4 <__aeabi_ddiv>
    d3e6:	4602      	mov	r2, r0
    d3e8:	460b      	mov	r3, r1
    d3ea:	4610      	mov	r0, r2
    d3ec:	4619      	mov	r1, r3
    d3ee:	f00d f995 	bl	1a71c <__adddf3>
    d3f2:	4602      	mov	r2, r0
    d3f4:	460b      	mov	r3, r1
    d3f6:	4610      	mov	r0, r2
    d3f8:	4619      	mov	r1, r3
    d3fa:	f00d fe01 	bl	1b000 <__aeabi_d2f>
    d3fe:	4602      	mov	r2, r0
    d400:	68fb      	ldr	r3, [r7, #12]
    d402:	60da      	str	r2, [r3, #12]

        // Angular Speed
        if (order>=51 and order<=101)
    d404:	697b      	ldr	r3, [r7, #20]
    d406:	2b32      	cmp	r3, #50
    d408:	dd2b      	ble.n	d462 <_ZN6Remote6updateEb+0x18a>
    d40a:	697b      	ldr	r3, [r7, #20]
    d40c:	2b65      	cmp	r3, #101
    d40e:	dc28      	bgt.n	d462 <_ZN6Remote6updateEb+0x18a>
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    d410:	697b      	ldr	r3, [r7, #20]
    d412:	f1a3 034b 	sub.w	r3, r3, #75	; 0x4b
    d416:	4618      	mov	r0, r3
    d418:	f00d fefc 	bl	1b214 <__aeabi_i2f>
    d41c:	4603      	mov	r3, r0
    d41e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d422:	4618      	mov	r0, r3
    d424:	f00d fad8 	bl	1a9d8 <__aeabi_f2d>
    d428:	4602      	mov	r2, r0
    d42a:	460b      	mov	r3, r1
    d42c:	4610      	mov	r0, r2
    d42e:	4619      	mov	r1, r3
    d430:	f04f 0200 	mov.w	r2, #0	; 0x0
    d434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d438:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    d43c:	f00d fc4a 	bl	1acd4 <__aeabi_ddiv>
    d440:	4602      	mov	r2, r0
    d442:	460b      	mov	r3, r1
    d444:	4610      	mov	r0, r2
    d446:	4619      	mov	r1, r3
    d448:	a209      	add	r2, pc, #36	(adr r2, d470 <_ZN6Remote6updateEb+0x198>)
    d44a:	ca0c      	ldmia	r2!, {r2, r3}
    d44c:	f00d fb18 	bl	1aa80 <__aeabi_dmul>
    d450:	4602      	mov	r2, r0
    d452:	460b      	mov	r3, r1
    d454:	4610      	mov	r0, r2
    d456:	4619      	mov	r1, r3
    d458:	f00d fdd2 	bl	1b000 <__aeabi_d2f>
    d45c:	4602      	mov	r2, r0
    d45e:	68fb      	ldr	r3, [r7, #12]
    d460:	611a      	str	r2, [r3, #16]
    }
}
    d462:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d466:	46bd      	mov	sp, r7
    d468:	bd80      	pop	{r7, pc}
    d46a:	46c0      	nop			(mov r8, r8)
    d46c:	46c0      	nop			(mov r8, r8)
    d46e:	46c0      	nop			(mov r8, r8)
    d470:	47ae147b 	.word	0x47ae147b
    d474:	3f847ae1 	.word	0x3f847ae1
    d478:	00022310 	.word	0x00022310
    d47c:	00022330 	.word	0x00022330

0000d480 <_ZN4Roue6tourneEf>:
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);

}

void Roue::tourne(float rapport)
    d480:	b580      	push	{r7, lr}
    d482:	b082      	sub	sp, #8
    d484:	af00      	add	r7, sp, #0
    d486:	6078      	str	r0, [r7, #4]
    d488:	6039      	str	r1, [r7, #0]
{
    //rapport = 1;
    if(rapport >=0)
    d48a:	6838      	ldr	r0, [r7, #0]
    d48c:	4915      	ldr	r1, [pc, #84]	(d4e4 <_ZN4Roue6tourneEf+0x64>)
    d48e:	f00e f8c5 	bl	1b61c <__aeabi_fcmpge>
    d492:	4603      	mov	r3, r0
    d494:	2b00      	cmp	r3, #0
    d496:	d00f      	beq.n	d4b8 <_ZN4Roue6tourneEf+0x38>
    //if((rapport >= 0 && !oppositeDirection) || (rapport<0 && oppositeDirection))
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_RESET);
    d498:	687b      	ldr	r3, [r7, #4]
    d49a:	689a      	ldr	r2, [r3, #8]
    d49c:	687b      	ldr	r3, [r7, #4]
    d49e:	899b      	ldrh	r3, [r3, #12]
    d4a0:	4610      	mov	r0, r2
    d4a2:	4619      	mov	r1, r3
    d4a4:	f04f 0200 	mov.w	r2, #0	; 0x0
    d4a8:	f7f4 fa70 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(rapport);
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	4618      	mov	r0, r3
    d4b0:	6839      	ldr	r1, [r7, #0]
    d4b2:	f7ff fbaf 	bl	cc14 <_ZN10PWMHandler12setDutyCycleEf>
    d4b6:	e011      	b.n	d4dc <_ZN4Roue6tourneEf+0x5c>
    }
    else
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_SET);
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	689a      	ldr	r2, [r3, #8]
    d4bc:	687b      	ldr	r3, [r7, #4]
    d4be:	899b      	ldrh	r3, [r3, #12]
    d4c0:	4610      	mov	r0, r2
    d4c2:	4619      	mov	r1, r3
    d4c4:	f04f 0201 	mov.w	r2, #1	; 0x1
    d4c8:	f7f4 fa60 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(-rapport);
    d4cc:	687a      	ldr	r2, [r7, #4]
    d4ce:	683b      	ldr	r3, [r7, #0]
    d4d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    d4d4:	4610      	mov	r0, r2
    d4d6:	4619      	mov	r1, r3
    d4d8:	f7ff fb9c 	bl	cc14 <_ZN10PWMHandler12setDutyCycleEf>
/*
    if(fabs(rapport) < RAPPORT_OK)
        pwm.setDutyCycle(0);
    else
        pwm.setDutyCycle(fabs(rapport)+RAPPORT_SUPPLEMENTAIRE);*/
}
    d4dc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d4e0:	46bd      	mov	sp, r7
    d4e2:	bd80      	pop	{r7, pc}
    d4e4:	00000000 	.word	0x00000000

0000d4e8 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    d4e8:	b580      	push	{r7, lr}
    d4ea:	b088      	sub	sp, #32
    d4ec:	af02      	add	r7, sp, #8
    d4ee:	60f8      	str	r0, [r7, #12]
    d4f0:	60b9      	str	r1, [r7, #8]
    d4f2:	603b      	str	r3, [r7, #0]
    d4f4:	4613      	mov	r3, r2
    d4f6:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    d4f8:	68fa      	ldr	r2, [r7, #12]
    d4fa:	f897 c007 	ldrb.w	ip, [r7, #7]
    d4fe:	8c3b      	ldrh	r3, [r7, #32]
    d500:	9300      	str	r3, [sp, #0]
    d502:	4610      	mov	r0, r2
    d504:	68b9      	ldr	r1, [r7, #8]
    d506:	4662      	mov	r2, ip
    d508:	683b      	ldr	r3, [r7, #0]
    d50a:	f7f8 fd47 	bl	5f9c <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    d50e:	68fa      	ldr	r2, [r7, #12]
    d510:	6a7b      	ldr	r3, [r7, #36]
    d512:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    d514:	68fa      	ldr	r2, [r7, #12]
    d516:	8d3b      	ldrh	r3, [r7, #40]
    d518:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    d51a:	8d3b      	ldrh	r3, [r7, #40]
    d51c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    d51e:	f04f 0310 	mov.w	r3, #16	; 0x10
    d522:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    d524:	f04f 0302 	mov.w	r3, #2	; 0x2
    d528:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    d52a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d52e:	6a78      	ldr	r0, [r7, #36]
    d530:	4619      	mov	r1, r3
    d532:	f7f4 f8bd 	bl	16b0 <GPIO_Init>

}
    d536:	68fb      	ldr	r3, [r7, #12]
    d538:	4618      	mov	r0, r3
    d53a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d53e:	46bd      	mov	sp, r7
    d540:	bd80      	pop	{r7, pc}
    d542:	46c0      	nop			(mov r8, r8)

0000d544 <_ZN4RoueC2EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    d544:	b580      	push	{r7, lr}
    d546:	b088      	sub	sp, #32
    d548:	af02      	add	r7, sp, #8
    d54a:	60f8      	str	r0, [r7, #12]
    d54c:	60b9      	str	r1, [r7, #8]
    d54e:	603b      	str	r3, [r7, #0]
    d550:	4613      	mov	r3, r2
    d552:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    d554:	68fa      	ldr	r2, [r7, #12]
    d556:	f897 c007 	ldrb.w	ip, [r7, #7]
    d55a:	8c3b      	ldrh	r3, [r7, #32]
    d55c:	9300      	str	r3, [sp, #0]
    d55e:	4610      	mov	r0, r2
    d560:	68b9      	ldr	r1, [r7, #8]
    d562:	4662      	mov	r2, ip
    d564:	683b      	ldr	r3, [r7, #0]
    d566:	f7f8 fd19 	bl	5f9c <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    d56a:	68fa      	ldr	r2, [r7, #12]
    d56c:	6a7b      	ldr	r3, [r7, #36]
    d56e:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    d570:	68fa      	ldr	r2, [r7, #12]
    d572:	8d3b      	ldrh	r3, [r7, #40]
    d574:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    d576:	8d3b      	ldrh	r3, [r7, #40]
    d578:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    d57a:	f04f 0310 	mov.w	r3, #16	; 0x10
    d57e:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    d580:	f04f 0302 	mov.w	r3, #2	; 0x2
    d584:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    d586:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d58a:	6a78      	ldr	r0, [r7, #36]
    d58c:	4619      	mov	r1, r3
    d58e:	f7f4 f88f 	bl	16b0 <GPIO_Init>

}
    d592:	68fb      	ldr	r3, [r7, #12]
    d594:	4618      	mov	r0, r3
    d596:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d59a:	46bd      	mov	sp, r7
    d59c:	bd80      	pop	{r7, pc}
    d59e:	46c0      	nop			(mov r8, r8)

0000d5a0 <_ZN11SharpSensor8getValueEv>:
        output = false;
    #endif

}

Sensor::OutputSensor SharpSensor::getValue()
    d5a0:	b580      	push	{r7, lr}
    d5a2:	b088      	sub	sp, #32
    d5a4:	af00      	add	r7, sp, #0
    d5a6:	6078      	str	r0, [r7, #4]
    d5a8:	60f9      	str	r1, [r7, #12]
{
    OutputSensor outputR;
    outputR.type = SHARP;
    d5aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    d5ae:	687a      	ldr	r2, [r7, #4]
    d5b0:	7013      	strb	r3, [r2, #0]
    outputR.f = (float)value;
    d5b2:	68fb      	ldr	r3, [r7, #12]
    d5b4:	691b      	ldr	r3, [r3, #16]
    d5b6:	4618      	mov	r0, r3
    d5b8:	f00d fe2c 	bl	1b214 <__aeabi_i2f>
    d5bc:	4603      	mov	r3, r0
    d5be:	687a      	ldr	r2, [r7, #4]
    d5c0:	6053      	str	r3, [r2, #4]
    outputR.b = (output && actif);// && actif && !SharpSensor::estDesactive);
    d5c2:	68fb      	ldr	r3, [r7, #12]
    d5c4:	7b9b      	ldrb	r3, [r3, #14]
    d5c6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d5ca:	b2db      	uxtb	r3, r3
    d5cc:	2b00      	cmp	r3, #0
    d5ce:	d10a      	bne.n	d5e6 <_ZN11SharpSensor8getValueEv+0x46>
    d5d0:	68fb      	ldr	r3, [r7, #12]
    d5d2:	7bdb      	ldrb	r3, [r3, #15]
    d5d4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d5d8:	b2db      	uxtb	r3, r3
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d103      	bne.n	d5e6 <_ZN11SharpSensor8getValueEv+0x46>
    d5de:	f04f 0301 	mov.w	r3, #1	; 0x1
    d5e2:	60bb      	str	r3, [r7, #8]
    d5e4:	e002      	b.n	d5ec <_ZN11SharpSensor8getValueEv+0x4c>
    d5e6:	f04f 0200 	mov.w	r2, #0	; 0x0
    d5ea:	60ba      	str	r2, [r7, #8]
    d5ec:	68ba      	ldr	r2, [r7, #8]
    d5ee:	4613      	mov	r3, r2
    d5f0:	687a      	ldr	r2, [r7, #4]
    d5f2:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    d5f4:	6878      	ldr	r0, [r7, #4]
    d5f6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d5fa:	46bd      	mov	sp, r7
    d5fc:	bd80      	pop	{r7, pc}
    d5fe:	46c0      	nop			(mov r8, r8)

0000d600 <_ZN11SharpSensor7getNameEv>:

SharpSensor::SharpName SharpSensor::getName()
    d600:	b480      	push	{r7}
    d602:	b083      	sub	sp, #12
    d604:	af00      	add	r7, sp, #0
    d606:	6078      	str	r0, [r7, #4]
{
    return name;
    d608:	687b      	ldr	r3, [r7, #4]
    d60a:	7b5b      	ldrb	r3, [r3, #13]
}
    d60c:	4618      	mov	r0, r3
    d60e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d612:	46bd      	mov	sp, r7
    d614:	bc80      	pop	{r7}
    d616:	4770      	bx	lr

0000d618 <_ZN11SharpSensor8setActifEv>:


void SharpSensor::setActif()
    d618:	b480      	push	{r7}
    d61a:	b083      	sub	sp, #12
    d61c:	af00      	add	r7, sp, #0
    d61e:	6078      	str	r0, [r7, #4]
{
    actif = true;
    d620:	687b      	ldr	r3, [r7, #4]
    d622:	f04f 0201 	mov.w	r2, #1	; 0x1
    d626:	73da      	strb	r2, [r3, #15]
}
    d628:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d62c:	46bd      	mov	sp, r7
    d62e:	bc80      	pop	{r7}
    d630:	4770      	bx	lr
    d632:	46c0      	nop			(mov r8, r8)

0000d634 <_ZN11SharpSensor10unsetActifEv>:

void SharpSensor::unsetActif()
    d634:	b480      	push	{r7}
    d636:	b083      	sub	sp, #12
    d638:	af00      	add	r7, sp, #0
    d63a:	6078      	str	r0, [r7, #4]
{
    actif = false;
    d63c:	687b      	ldr	r3, [r7, #4]
    d63e:	f04f 0200 	mov.w	r2, #0	; 0x0
    d642:	73da      	strb	r2, [r3, #15]
}
    d644:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d648:	46bd      	mov	sp, r7
    d64a:	bc80      	pop	{r7}
    d64c:	4770      	bx	lr
    d64e:	46c0      	nop			(mov r8, r8)

0000d650 <_ZN11SharpSensor11updateValueEv>:
SharpSensor::~SharpSensor()
{
    //dtor
}

void SharpSensor::updateValue()
    d650:	b580      	push	{r7, lr}
    d652:	b082      	sub	sp, #8
    d654:	af00      	add	r7, sp, #0
    d656:	6078      	str	r0, [r7, #4]
{
    #ifdef ROBOTHW
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    d658:	f7fd fc50 	bl	aefc <_ZN12AnalogSensor18conversionFinishedEv>
    d65c:	4603      	mov	r3, r0
    d65e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d662:	b2db      	uxtb	r3, r3
    d664:	2b00      	cmp	r3, #0
    d666:	d1f7      	bne.n	d658 <_ZN11SharpSensor11updateValueEv+0x8>

    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        value = *data;
        value >>= 4;
    #else // K - H107
        value = *data;
    d668:	687b      	ldr	r3, [r7, #4]
    d66a:	689b      	ldr	r3, [r3, #8]
    d66c:	881b      	ldrh	r3, [r3, #0]
    d66e:	461a      	mov	r2, r3
    d670:	687b      	ldr	r3, [r7, #4]
    d672:	611a      	str	r2, [r3, #16]
    #endif

    counter <<= 1;
    d674:	687b      	ldr	r3, [r7, #4]
    d676:	7b1b      	ldrb	r3, [r3, #12]
    d678:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d67c:	b2db      	uxtb	r3, r3
    d67e:	687a      	ldr	r2, [r7, #4]
    d680:	7313      	strb	r3, [r2, #12]
    counter |= (value > seuilDetection);
    d682:	687b      	ldr	r3, [r7, #4]
    d684:	7b1b      	ldrb	r3, [r3, #12]
    d686:	4619      	mov	r1, r3
    d688:	687b      	ldr	r3, [r7, #4]
    d68a:	691a      	ldr	r2, [r3, #16]
    d68c:	687b      	ldr	r3, [r7, #4]
    d68e:	8a9b      	ldrh	r3, [r3, #20]
    d690:	429a      	cmp	r2, r3
    d692:	bfd4      	ite	le
    d694:	2300      	movle	r3, #0
    d696:	2301      	movgt	r3, #1
    d698:	460a      	mov	r2, r1
    d69a:	ea42 0303 	orr.w	r3, r2, r3
    d69e:	b2db      	uxtb	r3, r3
    d6a0:	b2db      	uxtb	r3, r3
    d6a2:	687a      	ldr	r2, [r7, #4]
    d6a4:	7313      	strb	r3, [r2, #12]
    //if (*data > threshold)
    //    allumerLED();
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ; // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    d6a6:	687b      	ldr	r3, [r7, #4]
    d6a8:	7b9b      	ldrb	r3, [r3, #14]
    d6aa:	2b00      	cmp	r3, #0
    d6ac:	d008      	beq.n	d6c0 <_ZN11SharpSensor11updateValueEv+0x70>
    d6ae:	687b      	ldr	r3, [r7, #4]
    d6b0:	7b1b      	ldrb	r3, [r3, #12]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	bf0c      	ite	eq
    d6b6:	2300      	moveq	r3, #0
    d6b8:	2301      	movne	r3, #1
    d6ba:	b2db      	uxtb	r3, r3
    d6bc:	603b      	str	r3, [r7, #0]
    d6be:	e007      	b.n	d6d0 <_ZN11SharpSensor11updateValueEv+0x80>
    d6c0:	687b      	ldr	r3, [r7, #4]
    d6c2:	7b1b      	ldrb	r3, [r3, #12]
    d6c4:	2bff      	cmp	r3, #255
    d6c6:	bf14      	ite	ne
    d6c8:	2300      	movne	r3, #0
    d6ca:	2301      	moveq	r3, #1
    d6cc:	b2db      	uxtb	r3, r3
    d6ce:	603b      	str	r3, [r7, #0]
    d6d0:	687a      	ldr	r2, [r7, #4]
    d6d2:	6839      	ldr	r1, [r7, #0]
    d6d4:	460b      	mov	r3, r1
    d6d6:	7393      	strb	r3, [r2, #14]
    }
    else
        output = false;
    #endif

}
    d6d8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d6dc:	46bd      	mov	sp, r7
    d6de:	bd80      	pop	{r7, pc}

0000d6e0 <_ZN11SharpSensorD0Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d6e0:	b580      	push	{r7, lr}
    d6e2:	b082      	sub	sp, #8
    d6e4:	af00      	add	r7, sp, #0
    d6e6:	6078      	str	r0, [r7, #4]
    d6e8:	687a      	ldr	r2, [r7, #4]
    d6ea:	4b0a      	ldr	r3, [pc, #40]	(d714 <_ZN11SharpSensorD0Ev+0x34>)
    d6ec:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d6ee:	687b      	ldr	r3, [r7, #4]
    d6f0:	4618      	mov	r0, r3
    d6f2:	f7fd fcf7 	bl	b0e4 <_ZN12AnalogSensorD2Ev>
    d6f6:	f04f 0301 	mov.w	r3, #1	; 0x1
    d6fa:	b2db      	uxtb	r3, r3
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d002      	beq.n	d706 <_ZN11SharpSensorD0Ev+0x26>
    d700:	6878      	ldr	r0, [r7, #4]
    d702:	f001 fa9b 	bl	ec3c <_ZdlPv>
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	4618      	mov	r0, r3
    d70a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d70e:	46bd      	mov	sp, r7
    d710:	bd80      	pop	{r7, pc}
    d712:	46c0      	nop			(mov r8, r8)
    d714:	00022340 	.word	0x00022340

0000d718 <_ZN11SharpSensorD1Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d718:	b580      	push	{r7, lr}
    d71a:	b082      	sub	sp, #8
    d71c:	af00      	add	r7, sp, #0
    d71e:	6078      	str	r0, [r7, #4]
    d720:	687a      	ldr	r2, [r7, #4]
    d722:	4b0a      	ldr	r3, [pc, #40]	(d74c <_ZN11SharpSensorD1Ev+0x34>)
    d724:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d726:	687b      	ldr	r3, [r7, #4]
    d728:	4618      	mov	r0, r3
    d72a:	f7fd fcdb 	bl	b0e4 <_ZN12AnalogSensorD2Ev>
    d72e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d732:	b2db      	uxtb	r3, r3
    d734:	2b00      	cmp	r3, #0
    d736:	d002      	beq.n	d73e <_ZN11SharpSensorD1Ev+0x26>
    d738:	6878      	ldr	r0, [r7, #4]
    d73a:	f001 fa7f 	bl	ec3c <_ZdlPv>
    d73e:	687b      	ldr	r3, [r7, #4]
    d740:	4618      	mov	r0, r3
    d742:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d746:	46bd      	mov	sp, r7
    d748:	bd80      	pop	{r7, pc}
    d74a:	46c0      	nop			(mov r8, r8)
    d74c:	00022340 	.word	0x00022340

0000d750 <_ZN11SharpSensorD2Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    d750:	b580      	push	{r7, lr}
    d752:	b082      	sub	sp, #8
    d754:	af00      	add	r7, sp, #0
    d756:	6078      	str	r0, [r7, #4]
    d758:	687a      	ldr	r2, [r7, #4]
    d75a:	4b0a      	ldr	r3, [pc, #40]	(d784 <_ZN11SharpSensorD2Ev+0x34>)
    d75c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	4618      	mov	r0, r3
    d762:	f7fd fcbf 	bl	b0e4 <_ZN12AnalogSensorD2Ev>
    d766:	f04f 0300 	mov.w	r3, #0	; 0x0
    d76a:	b2db      	uxtb	r3, r3
    d76c:	2b00      	cmp	r3, #0
    d76e:	d002      	beq.n	d776 <_ZN11SharpSensorD2Ev+0x26>
    d770:	6878      	ldr	r0, [r7, #4]
    d772:	f001 fa63 	bl	ec3c <_ZdlPv>
    d776:	687b      	ldr	r3, [r7, #4]
    d778:	4618      	mov	r0, r3
    d77a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d77e:	46bd      	mov	sp, r7
    d780:	bd80      	pop	{r7, pc}
    d782:	46c0      	nop			(mov r8, r8)
    d784:	00022340 	.word	0x00022340

0000d788 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d788:	b580      	push	{r7, lr}
    d78a:	b084      	sub	sp, #16
    d78c:	af00      	add	r7, sp, #0
    d78e:	60f8      	str	r0, [r7, #12]
    d790:	607b      	str	r3, [r7, #4]
    d792:	460b      	mov	r3, r1
    d794:	72fb      	strb	r3, [r7, #11]
    d796:	4613      	mov	r3, r2
    d798:	72bb      	strb	r3, [r7, #10]
    d79a:	68fb      	ldr	r3, [r7, #12]
    d79c:	7aba      	ldrb	r2, [r7, #10]
    d79e:	4618      	mov	r0, r3
    d7a0:	4611      	mov	r1, r2
    d7a2:	687a      	ldr	r2, [r7, #4]
    d7a4:	f7fd fce4 	bl	b170 <_ZN12AnalogSensorC2EhPt>
    d7a8:	68fa      	ldr	r2, [r7, #12]
    d7aa:	4b0f      	ldr	r3, [pc, #60]	(d7e8 <_ZN11SharpSensorC1ENS_9SharpNameEhPti+0x60>)
    d7ac:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d7ae:	68fa      	ldr	r2, [r7, #12]
    d7b0:	7afb      	ldrb	r3, [r7, #11]
    d7b2:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d7b4:	68fa      	ldr	r2, [r7, #12]
    d7b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d7ba:	7313      	strb	r3, [r2, #12]
    output = false;
    d7bc:	68fa      	ldr	r2, [r7, #12]
    d7be:	f04f 0300 	mov.w	r3, #0	; 0x0
    d7c2:	7393      	strb	r3, [r2, #14]
    actif = true;
    d7c4:	68fa      	ldr	r2, [r7, #12]
    d7c6:	f04f 0301 	mov.w	r3, #1	; 0x1
    d7ca:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d7cc:	69bb      	ldr	r3, [r7, #24]
    d7ce:	b29b      	uxth	r3, r3
    d7d0:	68fa      	ldr	r2, [r7, #12]
    d7d2:	8293      	strh	r3, [r2, #20]
    value = 0;
    d7d4:	68fa      	ldr	r2, [r7, #12]
    d7d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    d7da:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d7dc:	68fb      	ldr	r3, [r7, #12]
    d7de:	4618      	mov	r0, r3
    d7e0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d7e4:	46bd      	mov	sp, r7
    d7e6:	bd80      	pop	{r7, pc}
    d7e8:	00022340 	.word	0x00022340

0000d7ec <_ZN11SharpSensorC2ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d7ec:	b580      	push	{r7, lr}
    d7ee:	b084      	sub	sp, #16
    d7f0:	af00      	add	r7, sp, #0
    d7f2:	60f8      	str	r0, [r7, #12]
    d7f4:	607b      	str	r3, [r7, #4]
    d7f6:	460b      	mov	r3, r1
    d7f8:	72fb      	strb	r3, [r7, #11]
    d7fa:	4613      	mov	r3, r2
    d7fc:	72bb      	strb	r3, [r7, #10]
    d7fe:	68fb      	ldr	r3, [r7, #12]
    d800:	7aba      	ldrb	r2, [r7, #10]
    d802:	4618      	mov	r0, r3
    d804:	4611      	mov	r1, r2
    d806:	687a      	ldr	r2, [r7, #4]
    d808:	f7fd fcb2 	bl	b170 <_ZN12AnalogSensorC2EhPt>
    d80c:	68fa      	ldr	r2, [r7, #12]
    d80e:	4b0f      	ldr	r3, [pc, #60]	(d84c <_ZN11SharpSensorC2ENS_9SharpNameEhPti+0x60>)
    d810:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d812:	68fa      	ldr	r2, [r7, #12]
    d814:	7afb      	ldrb	r3, [r7, #11]
    d816:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d818:	68fa      	ldr	r2, [r7, #12]
    d81a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d81e:	7313      	strb	r3, [r2, #12]
    output = false;
    d820:	68fa      	ldr	r2, [r7, #12]
    d822:	f04f 0300 	mov.w	r3, #0	; 0x0
    d826:	7393      	strb	r3, [r2, #14]
    actif = true;
    d828:	68fa      	ldr	r2, [r7, #12]
    d82a:	f04f 0301 	mov.w	r3, #1	; 0x1
    d82e:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d830:	69bb      	ldr	r3, [r7, #24]
    d832:	b29b      	uxth	r3, r3
    d834:	68fa      	ldr	r2, [r7, #12]
    d836:	8293      	strh	r3, [r2, #20]
    value = 0;
    d838:	68fa      	ldr	r2, [r7, #12]
    d83a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d83e:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d840:	68fb      	ldr	r3, [r7, #12]
    d842:	4618      	mov	r0, r3
    d844:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d848:	46bd      	mov	sp, r7
    d84a:	bd80      	pop	{r7, pc}
    d84c:	00022340 	.word	0x00022340

0000d850 <_ZN5Timer7getTIMxEv>:
    else if (m_TIMx == TIM5)
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
}

// Retourne le timer (TIM1, TIM2 ou TIM3), voir TIM_TypeDef.
TIM_TypeDef* Timer::getTIMx()
    d850:	b480      	push	{r7}
    d852:	b083      	sub	sp, #12
    d854:	af00      	add	r7, sp, #0
    d856:	6078      	str	r0, [r7, #4]
{
    return m_TIMx;
    d858:	687b      	ldr	r3, [r7, #4]
    d85a:	681b      	ldr	r3, [r3, #0]
}
    d85c:	4618      	mov	r0, r3
    d85e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d862:	46bd      	mov	sp, r7
    d864:	bc80      	pop	{r7}
    d866:	4770      	bx	lr

0000d868 <_ZN5Timer9getPeriodEv>:
    timInit.TIM_RepetitionCounter = 0;

    TIM_TimeBaseInit(getTIMx(), &timInit);
}

uint16_t Timer::getPeriod()
    d868:	b480      	push	{r7}
    d86a:	b083      	sub	sp, #12
    d86c:	af00      	add	r7, sp, #0
    d86e:	6078      	str	r0, [r7, #4]
{
    return m_period;
    d870:	687b      	ldr	r3, [r7, #4]
    d872:	891b      	ldrh	r3, [r3, #8]
}
    d874:	4618      	mov	r0, r3
    d876:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d87a:	46bd      	mov	sp, r7
    d87c:	bc80      	pop	{r7}
    d87e:	4770      	bx	lr

0000d880 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>:

void Timer::enableTimerClock(TIM_TypeDef* TIMx)
    d880:	b580      	push	{r7, lr}
    d882:	b082      	sub	sp, #8
    d884:	af00      	add	r7, sp, #0
    d886:	6078      	str	r0, [r7, #4]
{
    if (TIMx == TIM1)
    d888:	687a      	ldr	r2, [r7, #4]
    d88a:	4b27      	ldr	r3, [pc, #156]	(d928 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa8>)
    d88c:	429a      	cmp	r2, r3
    d88e:	d106      	bne.n	d89e <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x1e>
    {
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
    d890:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d894:	f04f 0101 	mov.w	r1, #1	; 0x1
    d898:	f7f4 fdd6 	bl	2448 <RCC_APB2PeriphClockCmd>
    d89c:	e040      	b.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM2)
    d89e:	687b      	ldr	r3, [r7, #4]
    d8a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d8a4:	d106      	bne.n	d8b4 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x34>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    d8a6:	f04f 0001 	mov.w	r0, #1	; 0x1
    d8aa:	f04f 0101 	mov.w	r1, #1	; 0x1
    d8ae:	f7f4 fded 	bl	248c <RCC_APB1PeriphClockCmd>
    d8b2:	e035      	b.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM3)
    d8b4:	687a      	ldr	r2, [r7, #4]
    d8b6:	4b1d      	ldr	r3, [pc, #116]	(d92c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xac>)
    d8b8:	429a      	cmp	r2, r3
    d8ba:	d106      	bne.n	d8ca <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x4a>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    d8bc:	f04f 0002 	mov.w	r0, #2	; 0x2
    d8c0:	f04f 0101 	mov.w	r1, #1	; 0x1
    d8c4:	f7f4 fde2 	bl	248c <RCC_APB1PeriphClockCmd>
    d8c8:	e02a      	b.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM4)
    d8ca:	687a      	ldr	r2, [r7, #4]
    d8cc:	4b18      	ldr	r3, [pc, #96]	(d930 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb0>)
    d8ce:	429a      	cmp	r2, r3
    d8d0:	d106      	bne.n	d8e0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x60>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    d8d2:	f04f 0004 	mov.w	r0, #4	; 0x4
    d8d6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d8da:	f7f4 fdd7 	bl	248c <RCC_APB1PeriphClockCmd>
    d8de:	e01f      	b.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM5)
    d8e0:	687a      	ldr	r2, [r7, #4]
    d8e2:	4b14      	ldr	r3, [pc, #80]	(d934 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb4>)
    d8e4:	429a      	cmp	r2, r3
    d8e6:	d106      	bne.n	d8f6 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x76>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
    d8e8:	f04f 0008 	mov.w	r0, #8	; 0x8
    d8ec:	f04f 0101 	mov.w	r1, #1	; 0x1
    d8f0:	f7f4 fdcc 	bl	248c <RCC_APB1PeriphClockCmd>
    d8f4:	e014      	b.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM6)
    d8f6:	687a      	ldr	r2, [r7, #4]
    d8f8:	4b0f      	ldr	r3, [pc, #60]	(d938 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb8>)
    d8fa:	429a      	cmp	r2, r3
    d8fc:	d106      	bne.n	d90c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x8c>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
    d8fe:	f04f 0010 	mov.w	r0, #16	; 0x10
    d902:	f04f 0101 	mov.w	r1, #1	; 0x1
    d906:	f7f4 fdc1 	bl	248c <RCC_APB1PeriphClockCmd>
    d90a:	e009      	b.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM7)
    d90c:	687a      	ldr	r2, [r7, #4]
    d90e:	4b0b      	ldr	r3, [pc, #44]	(d93c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xbc>)
    d910:	429a      	cmp	r2, r3
    d912:	d105      	bne.n	d920 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
    d914:	f04f 0020 	mov.w	r0, #32	; 0x20
    d918:	f04f 0101 	mov.w	r1, #1	; 0x1
    d91c:	f7f4 fdb6 	bl	248c <RCC_APB1PeriphClockCmd>
    }
}
    d920:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d924:	46bd      	mov	sp, r7
    d926:	bd80      	pop	{r7, pc}
    d928:	40012c00 	.word	0x40012c00
    d92c:	40000400 	.word	0x40000400
    d930:	40000800 	.word	0x40000800
    d934:	40000c00 	.word	0x40000c00
    d938:	40001000 	.word	0x40001000
    d93c:	40001400 	.word	0x40001400

0000d940 <_ZN5Timer11enableClockEv>:
#include "timerHandler.h"

// Propage le signal de l’horloge système au timer.
void Timer::enableClock()
    d940:	b580      	push	{r7, lr}
    d942:	b082      	sub	sp, #8
    d944:	af00      	add	r7, sp, #0
    d946:	6078      	str	r0, [r7, #4]
{
    if (m_TIMx == TIM1)
    d948:	687b      	ldr	r3, [r7, #4]
    d94a:	681a      	ldr	r2, [r3, #0]
    d94c:	4b1e      	ldr	r3, [pc, #120]	(d9c8 <_ZN5Timer11enableClockEv+0x88>)
    d94e:	429a      	cmp	r2, r3
    d950:	d106      	bne.n	d960 <_ZN5Timer11enableClockEv+0x20>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
    d952:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d956:	f04f 0101 	mov.w	r1, #1	; 0x1
    d95a:	f7f4 fd75 	bl	2448 <RCC_APB2PeriphClockCmd>
    d95e:	e02e      	b.n	d9be <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM2)
    d960:	687b      	ldr	r3, [r7, #4]
    d962:	681b      	ldr	r3, [r3, #0]
    d964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d968:	d106      	bne.n	d978 <_ZN5Timer11enableClockEv+0x38>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    d96a:	f04f 0001 	mov.w	r0, #1	; 0x1
    d96e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d972:	f7f4 fd8b 	bl	248c <RCC_APB1PeriphClockCmd>
    d976:	e022      	b.n	d9be <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM3)
    d978:	687b      	ldr	r3, [r7, #4]
    d97a:	681a      	ldr	r2, [r3, #0]
    d97c:	4b13      	ldr	r3, [pc, #76]	(d9cc <_ZN5Timer11enableClockEv+0x8c>)
    d97e:	429a      	cmp	r2, r3
    d980:	d106      	bne.n	d990 <_ZN5Timer11enableClockEv+0x50>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    d982:	f04f 0002 	mov.w	r0, #2	; 0x2
    d986:	f04f 0101 	mov.w	r1, #1	; 0x1
    d98a:	f7f4 fd7f 	bl	248c <RCC_APB1PeriphClockCmd>
    d98e:	e016      	b.n	d9be <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM4)
    d990:	687b      	ldr	r3, [r7, #4]
    d992:	681a      	ldr	r2, [r3, #0]
    d994:	4b0e      	ldr	r3, [pc, #56]	(d9d0 <_ZN5Timer11enableClockEv+0x90>)
    d996:	429a      	cmp	r2, r3
    d998:	d106      	bne.n	d9a8 <_ZN5Timer11enableClockEv+0x68>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    d99a:	f04f 0004 	mov.w	r0, #4	; 0x4
    d99e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d9a2:	f7f4 fd73 	bl	248c <RCC_APB1PeriphClockCmd>
    d9a6:	e00a      	b.n	d9be <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM5)
    d9a8:	687b      	ldr	r3, [r7, #4]
    d9aa:	681a      	ldr	r2, [r3, #0]
    d9ac:	4b09      	ldr	r3, [pc, #36]	(d9d4 <_ZN5Timer11enableClockEv+0x94>)
    d9ae:	429a      	cmp	r2, r3
    d9b0:	d105      	bne.n	d9be <_ZN5Timer11enableClockEv+0x7e>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
    d9b2:	f04f 0008 	mov.w	r0, #8	; 0x8
    d9b6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d9ba:	f7f4 fd67 	bl	248c <RCC_APB1PeriphClockCmd>
}
    d9be:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d9c2:	46bd      	mov	sp, r7
    d9c4:	bd80      	pop	{r7, pc}
    d9c6:	46c0      	nop			(mov r8, r8)
    d9c8:	40012c00 	.word	0x40012c00
    d9cc:	40000400 	.word	0x40000400
    d9d0:	40000800 	.word	0x40000800
    d9d4:	40000c00 	.word	0x40000c00

0000d9d8 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d9d8:	b580      	push	{r7, lr}
    d9da:	b088      	sub	sp, #32
    d9dc:	af00      	add	r7, sp, #0
    d9de:	60f8      	str	r0, [r7, #12]
    d9e0:	60b9      	str	r1, [r7, #8]
    d9e2:	4619      	mov	r1, r3
    d9e4:	4613      	mov	r3, r2
    d9e6:	80fb      	strh	r3, [r7, #6]
    d9e8:	460b      	mov	r3, r1
    d9ea:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d9ec:	68fa      	ldr	r2, [r7, #12]
    d9ee:	68bb      	ldr	r3, [r7, #8]
    d9f0:	6013      	str	r3, [r2, #0]
    m_period = period;
    d9f2:	68fa      	ldr	r2, [r7, #12]
    d9f4:	88fb      	ldrh	r3, [r7, #6]
    d9f6:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d9f8:	68fa      	ldr	r2, [r7, #12]
    d9fa:	88bb      	ldrh	r3, [r7, #4]
    d9fc:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d9fe:	68fa      	ldr	r2, [r7, #12]
    da00:	8d3b      	ldrh	r3, [r7, #40]
    da02:	80d3      	strh	r3, [r2, #6]

    enableClock();
    da04:	68f8      	ldr	r0, [r7, #12]
    da06:	f7ff ff9b 	bl	d940 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    da0a:	88bb      	ldrh	r3, [r7, #4]
    da0c:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    da0e:	f04f 0300 	mov.w	r3, #0	; 0x0
    da12:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    da14:	88fb      	ldrh	r3, [r7, #6]
    da16:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    da18:	8d3b      	ldrh	r3, [r7, #40]
    da1a:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    da1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    da20:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    da22:	68f8      	ldr	r0, [r7, #12]
    da24:	f7ff ff14 	bl	d850 <_ZN5Timer7getTIMxEv>
    da28:	4603      	mov	r3, r0
    da2a:	f107 0216 	add.w	r2, r7, #22	; 0x16
    da2e:	4618      	mov	r0, r3
    da30:	4611      	mov	r1, r2
    da32:	f7f4 ff01 	bl	2838 <TIM_TimeBaseInit>
}
    da36:	68fb      	ldr	r3, [r7, #12]
    da38:	4618      	mov	r0, r3
    da3a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    da3e:	46bd      	mov	sp, r7
    da40:	bd80      	pop	{r7, pc}
    da42:	46c0      	nop			(mov r8, r8)

0000da44 <_ZN5TimerC2EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    da44:	b580      	push	{r7, lr}
    da46:	b088      	sub	sp, #32
    da48:	af00      	add	r7, sp, #0
    da4a:	60f8      	str	r0, [r7, #12]
    da4c:	60b9      	str	r1, [r7, #8]
    da4e:	4619      	mov	r1, r3
    da50:	4613      	mov	r3, r2
    da52:	80fb      	strh	r3, [r7, #6]
    da54:	460b      	mov	r3, r1
    da56:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    da58:	68fa      	ldr	r2, [r7, #12]
    da5a:	68bb      	ldr	r3, [r7, #8]
    da5c:	6013      	str	r3, [r2, #0]
    m_period = period;
    da5e:	68fa      	ldr	r2, [r7, #12]
    da60:	88fb      	ldrh	r3, [r7, #6]
    da62:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    da64:	68fa      	ldr	r2, [r7, #12]
    da66:	88bb      	ldrh	r3, [r7, #4]
    da68:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    da6a:	68fa      	ldr	r2, [r7, #12]
    da6c:	8d3b      	ldrh	r3, [r7, #40]
    da6e:	80d3      	strh	r3, [r2, #6]

    enableClock();
    da70:	68f8      	ldr	r0, [r7, #12]
    da72:	f7ff ff65 	bl	d940 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    da76:	88bb      	ldrh	r3, [r7, #4]
    da78:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    da7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    da7e:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    da80:	88fb      	ldrh	r3, [r7, #6]
    da82:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    da84:	8d3b      	ldrh	r3, [r7, #40]
    da86:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    da88:	f04f 0300 	mov.w	r3, #0	; 0x0
    da8c:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    da8e:	68f8      	ldr	r0, [r7, #12]
    da90:	f7ff fede 	bl	d850 <_ZN5Timer7getTIMxEv>
    da94:	4603      	mov	r3, r0
    da96:	f107 0216 	add.w	r2, r7, #22	; 0x16
    da9a:	4618      	mov	r0, r3
    da9c:	4611      	mov	r1, r2
    da9e:	f7f4 fecb 	bl	2838 <TIM_TimeBaseInit>
}
    daa2:	68fb      	ldr	r3, [r7, #12]
    daa4:	4618      	mov	r0, r3
    daa6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    daaa:	46bd      	mov	sp, r7
    daac:	bd80      	pop	{r7, pc}
    daae:	46c0      	nop			(mov r8, r8)

0000dab0 <_ZNK7Tirette7enleveeEv>:
        buffer |= enlevee();
    }
}

// est ce que la tirette est enlevée ?
bool Tirette::enlevee() const
    dab0:	b580      	push	{r7, lr}
    dab2:	b082      	sub	sp, #8
    dab4:	af00      	add	r7, sp, #0
    dab6:	6078      	str	r0, [r7, #4]
{
    #ifdef STM32F40_41xxx
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_RESET;
    #else
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_SET;
    dab8:	687b      	ldr	r3, [r7, #4]
    daba:	681a      	ldr	r2, [r3, #0]
    dabc:	687b      	ldr	r3, [r7, #4]
    dabe:	889b      	ldrh	r3, [r3, #4]
    dac0:	4610      	mov	r0, r2
    dac2:	4619      	mov	r1, r3
    dac4:	f7f3 feee 	bl	18a4 <GPIO_ReadInputDataBit>
    dac8:	4603      	mov	r3, r0
    daca:	2b01      	cmp	r3, #1
    dacc:	bf14      	ite	ne
    dace:	2300      	movne	r3, #0
    dad0:	2301      	moveq	r3, #1
    dad2:	b2db      	uxtb	r3, r3
    #endif
}
    dad4:	4618      	mov	r0, r3
    dad6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dada:	46bd      	mov	sp, r7
    dadc:	bd80      	pop	{r7, pc}
    dade:	46c0      	nop			(mov r8, r8)

0000dae0 <_ZNK7Tirette14attendreRemiseEv>:
        buffer |= !enlevee();
    }
}

// attends jusqu'à ce que la tirette soit remise
void Tirette::attendreRemise() const
    dae0:	b580      	push	{r7, lr}
    dae2:	b084      	sub	sp, #16
    dae4:	af00      	add	r7, sp, #0
    dae6:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette remise'");
    dae8:	4b16      	ldr	r3, [pc, #88]	(db44 <_ZNK7Tirette14attendreRemiseEv+0x64>)
    daea:	4618      	mov	r0, r3
    daec:	f7ff fbc0 	bl	d270 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    daf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    daf4:	60fb      	str	r3, [r7, #12]
    daf6:	e01d      	b.n	db34 <_ZNK7Tirette14attendreRemiseEv+0x54>
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    daf8:	f7ff fb96 	bl	d228 <_ZN6Remote12getSingletonEv>
    dafc:	4603      	mov	r3, r0
    dafe:	4618      	mov	r0, r3
    db00:	f04f 0101 	mov.w	r1, #1	; 0x1
    db04:	f7ff fbe8 	bl	d2d8 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    db08:	f7ff fb8e 	bl	d228 <_ZN6Remote12getSingletonEv>
    db0c:	4603      	mov	r3, r0
    db0e:	4618      	mov	r0, r3
    db10:	f7ff fa80 	bl	d014 <_ZN6Remote12isRemoteModeEv>
    db14:	4603      	mov	r3, r0
    db16:	2b00      	cmp	r3, #0
    db18:	d10f      	bne.n	db3a <_ZNK7Tirette14attendreRemiseEv+0x5a>
            break;

        buffer <<= 1;
    db1a:	68fb      	ldr	r3, [r7, #12]
    db1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    db20:	60fb      	str	r3, [r7, #12]
        buffer |= enlevee();
    db22:	6878      	ldr	r0, [r7, #4]
    db24:	f7ff ffc4 	bl	dab0 <_ZNK7Tirette7enleveeEv>
    db28:	4603      	mov	r3, r0
    db2a:	461a      	mov	r2, r3
    db2c:	68fb      	ldr	r3, [r7, #12]
    db2e:	ea43 0302 	orr.w	r3, r3, r2
    db32:	60fb      	str	r3, [r7, #12]
void Tirette::attendreRemise() const
{
    Remote::log("Waiting for 'tirette remise'");

    int buffer = 0xffffffff;
    while (buffer)
    db34:	68fb      	ldr	r3, [r7, #12]
    db36:	2b00      	cmp	r3, #0
    db38:	d1de      	bne.n	daf8 <_ZNK7Tirette14attendreRemiseEv+0x18>
            break;

        buffer <<= 1;
        buffer |= enlevee();
    }
}
    db3a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    db3e:	46bd      	mov	sp, r7
    db40:	bd80      	pop	{r7, pc}
    db42:	46c0      	nop			(mov r8, r8)
    db44:	00022350 	.word	0x00022350

0000db48 <_ZNK7Tirette15attendreEnleveeEv>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
}

// attends jusqu'à ce que la tirette soit enlevée
void Tirette::attendreEnlevee() const
    db48:	b580      	push	{r7, lr}
    db4a:	b084      	sub	sp, #16
    db4c:	af00      	add	r7, sp, #0
    db4e:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette enleve'");
    db50:	4b17      	ldr	r3, [pc, #92]	(dbb0 <_ZNK7Tirette15attendreEnleveeEv+0x68>)
    db52:	4618      	mov	r0, r3
    db54:	f7ff fb8c 	bl	d270 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    db58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    db5c:	60fb      	str	r3, [r7, #12]
    db5e:	e020      	b.n	dba2 <_ZNK7Tirette15attendreEnleveeEv+0x5a>
    //int waiting = 0;
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    db60:	f7ff fb62 	bl	d228 <_ZN6Remote12getSingletonEv>
    db64:	4603      	mov	r3, r0
    db66:	4618      	mov	r0, r3
    db68:	f04f 0101 	mov.w	r1, #1	; 0x1
    db6c:	f7ff fbb4 	bl	d2d8 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    db70:	f7ff fb5a 	bl	d228 <_ZN6Remote12getSingletonEv>
    db74:	4603      	mov	r3, r0
    db76:	4618      	mov	r0, r3
    db78:	f7ff fa4c 	bl	d014 <_ZN6Remote12isRemoteModeEv>
    db7c:	4603      	mov	r3, r0
    db7e:	2b00      	cmp	r3, #0
    db80:	d112      	bne.n	dba8 <_ZNK7Tirette15attendreEnleveeEv+0x60>
            break;

        buffer <<= 1;
    db82:	68fb      	ldr	r3, [r7, #12]
    db84:	ea4f 0343 	mov.w	r3, r3, lsl #1
    db88:	60fb      	str	r3, [r7, #12]
        buffer |= !enlevee();
    db8a:	6878      	ldr	r0, [r7, #4]
    db8c:	f7ff ff90 	bl	dab0 <_ZNK7Tirette7enleveeEv>
    db90:	4603      	mov	r3, r0
    db92:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    db96:	b2db      	uxtb	r3, r3
    db98:	461a      	mov	r2, r3
    db9a:	68fb      	ldr	r3, [r7, #12]
    db9c:	ea43 0302 	orr.w	r3, r3, r2
    dba0:	60fb      	str	r3, [r7, #12]
{
    Remote::log("Waiting for 'tirette enleve'");

    int buffer = 0xffffffff;
    //int waiting = 0;
    while (buffer)
    dba2:	68fb      	ldr	r3, [r7, #12]
    dba4:	2b00      	cmp	r3, #0
    dba6:	d1db      	bne.n	db60 <_ZNK7Tirette15attendreEnleveeEv+0x18>
            break;

        buffer <<= 1;
        buffer |= !enlevee();
    }
}
    dba8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dbac:	46bd      	mov	sp, r7
    dbae:	bd80      	pop	{r7, pc}
    dbb0:	00022370 	.word	0x00022370

0000dbb4 <_ZN7TiretteC1EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    dbb4:	b580      	push	{r7, lr}
    dbb6:	b086      	sub	sp, #24
    dbb8:	af00      	add	r7, sp, #0
    dbba:	60f8      	str	r0, [r7, #12]
    dbbc:	60b9      	str	r1, [r7, #8]
    dbbe:	4613      	mov	r3, r2
    dbc0:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    dbc2:	68fa      	ldr	r2, [r7, #12]
    dbc4:	68bb      	ldr	r3, [r7, #8]
    dbc6:	6013      	str	r3, [r2, #0]
    dbc8:	68fa      	ldr	r2, [r7, #12]
    dbca:	88fb      	ldrh	r3, [r7, #6]
    dbcc:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    dbce:	88fb      	ldrh	r3, [r7, #6]
    dbd0:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    dbd2:	f04f 0348 	mov.w	r3, #72	; 0x48
    dbd6:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dbd8:	f04f 0303 	mov.w	r3, #3	; 0x3
    dbdc:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    dbde:	f107 0314 	add.w	r3, r7, #20	; 0x14
    dbe2:	68b8      	ldr	r0, [r7, #8]
    dbe4:	4619      	mov	r1, r3
    dbe6:	f7f3 fd63 	bl	16b0 <GPIO_Init>
}
    dbea:	68fb      	ldr	r3, [r7, #12]
    dbec:	4618      	mov	r0, r3
    dbee:	f107 0718 	add.w	r7, r7, #24	; 0x18
    dbf2:	46bd      	mov	sp, r7
    dbf4:	bd80      	pop	{r7, pc}
    dbf6:	46c0      	nop			(mov r8, r8)

0000dbf8 <_ZN7TiretteC2EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    dbf8:	b580      	push	{r7, lr}
    dbfa:	b086      	sub	sp, #24
    dbfc:	af00      	add	r7, sp, #0
    dbfe:	60f8      	str	r0, [r7, #12]
    dc00:	60b9      	str	r1, [r7, #8]
    dc02:	4613      	mov	r3, r2
    dc04:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    dc06:	68fa      	ldr	r2, [r7, #12]
    dc08:	68bb      	ldr	r3, [r7, #8]
    dc0a:	6013      	str	r3, [r2, #0]
    dc0c:	68fa      	ldr	r2, [r7, #12]
    dc0e:	88fb      	ldrh	r3, [r7, #6]
    dc10:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    dc12:	88fb      	ldrh	r3, [r7, #6]
    dc14:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    dc16:	f04f 0348 	mov.w	r3, #72	; 0x48
    dc1a:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    dc1c:	f04f 0303 	mov.w	r3, #3	; 0x3
    dc20:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    dc22:	f107 0314 	add.w	r3, r7, #20	; 0x14
    dc26:	68b8      	ldr	r0, [r7, #8]
    dc28:	4619      	mov	r1, r3
    dc2a:	f7f3 fd41 	bl	16b0 <GPIO_Init>
}
    dc2e:	68fb      	ldr	r3, [r7, #12]
    dc30:	4618      	mov	r0, r3
    dc32:	f107 0718 	add.w	r7, r7, #24	; 0x18
    dc36:	46bd      	mov	sp, r7
    dc38:	bd80      	pop	{r7, pc}
    dc3a:	46c0      	nop			(mov r8, r8)

0000dc3c <_ZN8Tourelle9getAlerteEv>:
//{
//    this->zonesCritiques[numeroZone][0] = (uint16_t) -1;
//    this->zonesCritiques[numeroZone][1] = (uint16_t) -1;
//}

bool Tourelle::getAlerte(void)
    dc3c:	b480      	push	{r7}
    dc3e:	b083      	sub	sp, #12
    dc40:	af00      	add	r7, sp, #0
    dc42:	6078      	str	r0, [r7, #4]
{
    return this->alerte;
    dc44:	687b      	ldr	r3, [r7, #4]
    dc46:	781b      	ldrb	r3, [r3, #0]
}
    dc48:	4618      	mov	r0, r3
    dc4a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    dc4e:	46bd      	mov	sp, r7
    dc50:	bc80      	pop	{r7}
    dc52:	4770      	bx	lr

0000dc54 <_ZN8Tourelle12updateSimpleEv>:
//    this->alerte = newAlerte;
//
//    return newAlerte;
//}

bool Tourelle::updateSimple(void)
    dc54:	b480      	push	{r7}
    dc56:	b085      	sub	sp, #20
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]
{
    //Copie locale pour être thread-safe, et avoir une chance infime de louper un objet une fois
    uint8_t nombreObjets = nombreObjetDetecte;
    dc5c:	4b0f      	ldr	r3, [pc, #60]	(dc9c <_ZN8Tourelle12updateSimpleEv+0x48>)
    dc5e:	781b      	ldrb	r3, [r3, #0]
    dc60:	73fb      	strb	r3, [r7, #15]
    nombreObjetDetecte = 0;
    dc62:	4a0e      	ldr	r2, [pc, #56]	(dc9c <_ZN8Tourelle12updateSimpleEv+0x48>)
    dc64:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc68:	7013      	strb	r3, [r2, #0]
    if(nombreObjets)
    dc6a:	7bfb      	ldrb	r3, [r7, #15]
    dc6c:	2b00      	cmp	r3, #0
    dc6e:	d007      	beq.n	dc80 <_ZN8Tourelle12updateSimpleEv+0x2c>
    {
        this->alerte = true;
    dc70:	687b      	ldr	r3, [r7, #4]
    dc72:	f04f 0201 	mov.w	r2, #1	; 0x1
    dc76:	701a      	strb	r2, [r3, #0]
        return true;
    dc78:	f04f 0301 	mov.w	r3, #1	; 0x1
    dc7c:	603b      	str	r3, [r7, #0]
    dc7e:	e006      	b.n	dc8e <_ZN8Tourelle12updateSimpleEv+0x3a>
    }
    else
    {
        this->alerte = false;
    dc80:	687b      	ldr	r3, [r7, #4]
    dc82:	f04f 0200 	mov.w	r2, #0	; 0x0
    dc86:	701a      	strb	r2, [r3, #0]
        return false;
    dc88:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc8c:	603b      	str	r3, [r7, #0]
    dc8e:	683b      	ldr	r3, [r7, #0]
    }
}
    dc90:	4618      	mov	r0, r3
    dc92:	f107 0714 	add.w	r7, r7, #20	; 0x14
    dc96:	46bd      	mov	sp, r7
    dc98:	bc80      	pop	{r7}
    dc9a:	4770      	bx	lr
    dc9c:	20000595 	.word	0x20000595

0000dca0 <EXTI3_IRQHandler>:
/**
  * @brief  This function handles External line 3 interrupt request.
  * @param  None
  * @retval None
  */
extern "C" void EXTI3_IRQHandler(void)
    dca0:	b580      	push	{r7, lr}
    dca2:	af00      	add	r7, sp, #0
{
    if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    dca4:	f04f 0008 	mov.w	r0, #8	; 0x8
    dca8:	f7f3 fc2e 	bl	1508 <EXTI_GetITStatus>
    dcac:	4603      	mov	r3, r0
    dcae:	2b00      	cmp	r3, #0
    dcb0:	bf0c      	ite	eq
    dcb2:	2300      	moveq	r3, #0
    dcb4:	2301      	movne	r3, #1
    dcb6:	b2db      	uxtb	r3, r3
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d00c      	beq.n	dcd6 <EXTI3_IRQHandler+0x36>

//        if(nombreObjetDetecte < 20)
//        {
            //Stocke l'instant de détection de l'objet
            //objectDetectionInstant[nombreObjetDetecte] = TIM_GetCounter(TIM6);
            nombreObjetDetecte++;
    dcbc:	4b07      	ldr	r3, [pc, #28]	(dcdc <EXTI3_IRQHandler+0x3c>)
    dcbe:	781b      	ldrb	r3, [r3, #0]
    dcc0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dcc4:	b2db      	uxtb	r3, r3
    dcc6:	4a05      	ldr	r2, [pc, #20]	(dcdc <EXTI3_IRQHandler+0x3c>)
    dcc8:	7013      	strb	r3, [r2, #0]

            allumerLED2();
    dcca:	f7fe fd01 	bl	c6d0 <_Z11allumerLED2v>

//        }

        /* Clear the EXTI line 2 pending bit */
        EXTI_ClearITPendingBit(EXTI_Line3);
    dcce:	f04f 0008 	mov.w	r0, #8	; 0x8
    dcd2:	f7f3 fc43 	bl	155c <EXTI_ClearITPendingBit>
    }
}
    dcd6:	46bd      	mov	sp, r7
    dcd8:	bd80      	pop	{r7, pc}
    dcda:	46c0      	nop			(mov r8, r8)
    dcdc:	20000595 	.word	0x20000595

0000dce0 <_Z16EXTILine5_Configv>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
#endif
}

void EXTILine5_Config(void)
    dce0:	b580      	push	{r7, lr}
    dce2:	b084      	sub	sp, #16
    dce4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    dce6:	f04f 0020 	mov.w	r0, #32	; 0x20
    dcea:	f04f 0101 	mov.w	r1, #1	; 0x1
    dcee:	f7f4 fb89 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    dcf2:	f04f 0328 	mov.w	r3, #40	; 0x28
    dcf6:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    dcf8:	f04f 0320 	mov.w	r3, #32	; 0x20
    dcfc:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    dcfe:	f107 030c 	add.w	r3, r7, #12	; 0xc
    dd02:	4817      	ldr	r0, [pc, #92]	(dd60 <_Z16EXTILine5_Configv+0x80>)
    dd04:	4619      	mov	r1, r3
    dd06:	f7f3 fcd3 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource5);
    dd0a:	f04f 0003 	mov.w	r0, #3	; 0x3
    dd0e:	f04f 0105 	mov.w	r1, #5	; 0x5
    dd12:	f7f3 ff33 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line5 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line5;
    dd16:	f04f 0320 	mov.w	r3, #32	; 0x20
    dd1a:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    dd1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    dd20:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    dd22:	f04f 0308 	mov.w	r3, #8	; 0x8
    dd26:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    dd28:	f04f 0301 	mov.w	r3, #1	; 0x1
    dd2c:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    dd2e:	463b      	mov	r3, r7
    dd30:	4618      	mov	r0, r3
    dd32:	f7f3 fb11 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;//EXTI5_IRQn;
    dd36:	f04f 0317 	mov.w	r3, #23	; 0x17
    dd3a:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//0x01 for lowest priority
    dd3c:	f04f 0301 	mov.w	r3, #1	; 0x1
    dd40:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    dd42:	f04f 0301 	mov.w	r3, #1	; 0x1
    dd46:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    dd48:	f04f 0301 	mov.w	r3, #1	; 0x1
    dd4c:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    dd4e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dd52:	4618      	mov	r0, r3
    dd54:	f7f2 fa62 	bl	21c <NVIC_Init>
#endif
}
    dd58:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dd5c:	46bd      	mov	sp, r7
    dd5e:	bd80      	pop	{r7, pc}
    dd60:	40010800 	.word	0x40010800

0000dd64 <_Z16EXTILine3_Configv>:
/**
  * @brief  Configures EXTI Line3 (connected to PA3 pin) in interrupt mode
  * @param  None
  * @retval None
  */
void EXTILine3_Config(void)
    dd64:	b580      	push	{r7, lr}
    dd66:	b084      	sub	sp, #16
    dd68:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    dd6a:	f04f 0020 	mov.w	r0, #32	; 0x20
    dd6e:	f04f 0101 	mov.w	r1, #1	; 0x1
    dd72:	f7f4 fb47 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    dd76:	f04f 0328 	mov.w	r3, #40	; 0x28
    dd7a:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    dd7c:	f04f 0308 	mov.w	r3, #8	; 0x8
    dd80:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    dd82:	f107 030c 	add.w	r3, r7, #12	; 0xc
    dd86:	4817      	ldr	r0, [pc, #92]	(dde4 <_Z16EXTILine3_Configv+0x80>)
    dd88:	4619      	mov	r1, r3
    dd8a:	f7f3 fc91 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource3);
    dd8e:	f04f 0003 	mov.w	r0, #3	; 0x3
    dd92:	f04f 0103 	mov.w	r1, #3	; 0x3
    dd96:	f7f3 fef1 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line3 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
    dd9a:	f04f 0308 	mov.w	r3, #8	; 0x8
    dd9e:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    dda0:	f04f 0300 	mov.w	r3, #0	; 0x0
    dda4:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    dda6:	f04f 0308 	mov.w	r3, #8	; 0x8
    ddaa:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    ddac:	f04f 0301 	mov.w	r3, #1	; 0x1
    ddb0:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    ddb2:	463b      	mov	r3, r7
    ddb4:	4618      	mov	r0, r3
    ddb6:	f7f3 facf 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;//EXTI5_IRQn;
    ddba:	f04f 0309 	mov.w	r3, #9	; 0x9
    ddbe:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x08;//0x01 for lowest priority
    ddc0:	f04f 0308 	mov.w	r3, #8	; 0x8
    ddc4:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    ddc6:	f04f 0301 	mov.w	r3, #1	; 0x1
    ddca:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    ddcc:	f04f 0301 	mov.w	r3, #1	; 0x1
    ddd0:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    ddd2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    ddd6:	4618      	mov	r0, r3
    ddd8:	f7f2 fa20 	bl	21c <NVIC_Init>
#endif
}
    dddc:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dde0:	46bd      	mov	sp, r7
    dde2:	bd80      	pop	{r7, pc}
    dde4:	40010800 	.word	0x40010800

0000dde8 <_ZN8TourelleC1Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    dde8:	b580      	push	{r7, lr}
    ddea:	b082      	sub	sp, #8
    ddec:	af00      	add	r7, sp, #0
    ddee:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    ddf0:	687a      	ldr	r2, [r7, #4]
    ddf2:	f04f 0300 	mov.w	r3, #0	; 0x0
    ddf6:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    ddf8:	4a05      	ldr	r2, [pc, #20]	(de10 <_ZN8TourelleC1Ev+0x28>)
    ddfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    ddfe:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    de00:	f7ff ffb0 	bl	dd64 <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    de04:	687b      	ldr	r3, [r7, #4]
    de06:	4618      	mov	r0, r3
    de08:	f107 0708 	add.w	r7, r7, #8	; 0x8
    de0c:	46bd      	mov	sp, r7
    de0e:	bd80      	pop	{r7, pc}
    de10:	20000595 	.word	0x20000595

0000de14 <_ZN8TourelleC2Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    de14:	b580      	push	{r7, lr}
    de16:	b082      	sub	sp, #8
    de18:	af00      	add	r7, sp, #0
    de1a:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    de1c:	687a      	ldr	r2, [r7, #4]
    de1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    de22:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    de24:	4a05      	ldr	r2, [pc, #20]	(de3c <_ZN8TourelleC2Ev+0x28>)
    de26:	f04f 0300 	mov.w	r3, #0	; 0x0
    de2a:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    de2c:	f7ff ff9a 	bl	dd64 <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	4618      	mov	r0, r3
    de34:	f107 0708 	add.w	r7, r7, #8	; 0x8
    de38:	46bd      	mov	sp, r7
    de3a:	bd80      	pop	{r7, pc}
    de3c:	20000595 	.word	0x20000595

0000de40 <_ZN16UltrasoundSensor7getNameEv>:
UltrasoundSensor::~UltrasoundSensor()
{
    //dtor
}

UltrasoundSensor::UltrasoundName UltrasoundSensor::getName()
    de40:	b480      	push	{r7}
    de42:	b083      	sub	sp, #12
    de44:	af00      	add	r7, sp, #0
    de46:	6078      	str	r0, [r7, #4]
{
    return name;
    de48:	687b      	ldr	r3, [r7, #4]
    de4a:	7b1b      	ldrb	r3, [r3, #12]
}
    de4c:	4618      	mov	r0, r3
    de4e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    de52:	46bd      	mov	sp, r7
    de54:	bc80      	pop	{r7}
    de56:	4770      	bx	lr

0000de58 <_ZN16UltrasoundSensor8getValueEv>:


Sensor::OutputSensor UltrasoundSensor::getValue()
    de58:	b580      	push	{r7, lr}
    de5a:	b086      	sub	sp, #24
    de5c:	af00      	add	r7, sp, #0
    de5e:	6038      	str	r0, [r7, #0]
    de60:	6079      	str	r1, [r7, #4]
{
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    de62:	f7fd f84b 	bl	aefc <_ZN12AnalogSensor18conversionFinishedEv>
    de66:	4603      	mov	r3, r0
    de68:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    de6c:	b2db      	uxtb	r3, r3
    de6e:	2b00      	cmp	r3, #0
    de70:	d1f7      	bne.n	de62 <_ZN16UltrasoundSensor8getValueEv+0xa>
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    OutputSensor output;
    output.type = ULTRASOUND;
    de72:	f04f 0301 	mov.w	r3, #1	; 0x1
    de76:	683a      	ldr	r2, [r7, #0]
    de78:	7013      	strb	r3, [r2, #0]
    output.b = false;
    de7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    de7e:	683a      	ldr	r2, [r7, #0]
    de80:	7213      	strb	r3, [r2, #8]
    #ifdef ROBOTHW
    output.f = coeff*(*data)/2.;
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	689b      	ldr	r3, [r3, #8]
    de86:	881b      	ldrh	r3, [r3, #0]
    de88:	4618      	mov	r0, r3
    de8a:	f00d f9c3 	bl	1b214 <__aeabi_i2f>
    de8e:	4602      	mov	r2, r0
    de90:	4b09      	ldr	r3, [pc, #36]	(deb8 <_ZN16UltrasoundSensor8getValueEv+0x60>)
    de92:	681b      	ldr	r3, [r3, #0]
    de94:	4610      	mov	r0, r2
    de96:	4619      	mov	r1, r3
    de98:	f00d fa10 	bl	1b2bc <__aeabi_fmul>
    de9c:	4603      	mov	r3, r0
    de9e:	4618      	mov	r0, r3
    dea0:	4906      	ldr	r1, [pc, #24]	(debc <_ZN16UltrasoundSensor8getValueEv+0x64>)
    dea2:	f00d fabf 	bl	1b424 <__aeabi_fdiv>
    dea6:	4603      	mov	r3, r0
    dea8:	683a      	ldr	r2, [r7, #0]
    deaa:	6053      	str	r3, [r2, #4]
    #else
    output.f = 0;
    #endif
    return output;
}
    deac:	6838      	ldr	r0, [r7, #0]
    deae:	f107 0718 	add.w	r7, r7, #24	; 0x18
    deb2:	46bd      	mov	sp, r7
    deb4:	bd80      	pop	{r7, pc}
    deb6:	46c0      	nop			(mov r8, r8)
    deb8:	20000028 	.word	0x20000028
    debc:	40000000 	.word	0x40000000

0000dec0 <_ZN16UltrasoundSensorD0Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    dec0:	b580      	push	{r7, lr}
    dec2:	b082      	sub	sp, #8
    dec4:	af00      	add	r7, sp, #0
    dec6:	6078      	str	r0, [r7, #4]
    dec8:	687a      	ldr	r2, [r7, #4]
    deca:	4b0a      	ldr	r3, [pc, #40]	(def4 <_ZN16UltrasoundSensorD0Ev+0x34>)
    decc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    dece:	687b      	ldr	r3, [r7, #4]
    ded0:	4618      	mov	r0, r3
    ded2:	f7fd f907 	bl	b0e4 <_ZN12AnalogSensorD2Ev>
    ded6:	f04f 0301 	mov.w	r3, #1	; 0x1
    deda:	b2db      	uxtb	r3, r3
    dedc:	2b00      	cmp	r3, #0
    dede:	d002      	beq.n	dee6 <_ZN16UltrasoundSensorD0Ev+0x26>
    dee0:	6878      	ldr	r0, [r7, #4]
    dee2:	f000 feab 	bl	ec3c <_ZdlPv>
    dee6:	687b      	ldr	r3, [r7, #4]
    dee8:	4618      	mov	r0, r3
    deea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    deee:	46bd      	mov	sp, r7
    def0:	bd80      	pop	{r7, pc}
    def2:	46c0      	nop			(mov r8, r8)
    def4:	00022398 	.word	0x00022398

0000def8 <_ZN16UltrasoundSensorD1Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    def8:	b580      	push	{r7, lr}
    defa:	b082      	sub	sp, #8
    defc:	af00      	add	r7, sp, #0
    defe:	6078      	str	r0, [r7, #4]
    df00:	687a      	ldr	r2, [r7, #4]
    df02:	4b0a      	ldr	r3, [pc, #40]	(df2c <_ZN16UltrasoundSensorD1Ev+0x34>)
    df04:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    df06:	687b      	ldr	r3, [r7, #4]
    df08:	4618      	mov	r0, r3
    df0a:	f7fd f8eb 	bl	b0e4 <_ZN12AnalogSensorD2Ev>
    df0e:	f04f 0300 	mov.w	r3, #0	; 0x0
    df12:	b2db      	uxtb	r3, r3
    df14:	2b00      	cmp	r3, #0
    df16:	d002      	beq.n	df1e <_ZN16UltrasoundSensorD1Ev+0x26>
    df18:	6878      	ldr	r0, [r7, #4]
    df1a:	f000 fe8f 	bl	ec3c <_ZdlPv>
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	4618      	mov	r0, r3
    df22:	f107 0708 	add.w	r7, r7, #8	; 0x8
    df26:	46bd      	mov	sp, r7
    df28:	bd80      	pop	{r7, pc}
    df2a:	46c0      	nop			(mov r8, r8)
    df2c:	00022398 	.word	0x00022398

0000df30 <_ZN16UltrasoundSensorD2Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    df30:	b580      	push	{r7, lr}
    df32:	b082      	sub	sp, #8
    df34:	af00      	add	r7, sp, #0
    df36:	6078      	str	r0, [r7, #4]
    df38:	687a      	ldr	r2, [r7, #4]
    df3a:	4b0a      	ldr	r3, [pc, #40]	(df64 <_ZN16UltrasoundSensorD2Ev+0x34>)
    df3c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    df3e:	687b      	ldr	r3, [r7, #4]
    df40:	4618      	mov	r0, r3
    df42:	f7fd f8cf 	bl	b0e4 <_ZN12AnalogSensorD2Ev>
    df46:	f04f 0300 	mov.w	r3, #0	; 0x0
    df4a:	b2db      	uxtb	r3, r3
    df4c:	2b00      	cmp	r3, #0
    df4e:	d002      	beq.n	df56 <_ZN16UltrasoundSensorD2Ev+0x26>
    df50:	6878      	ldr	r0, [r7, #4]
    df52:	f000 fe73 	bl	ec3c <_ZdlPv>
    df56:	687b      	ldr	r3, [r7, #4]
    df58:	4618      	mov	r0, r3
    df5a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    df5e:	46bd      	mov	sp, r7
    df60:	bd80      	pop	{r7, pc}
    df62:	46c0      	nop			(mov r8, r8)
    df64:	00022398 	.word	0x00022398

0000df68 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    df68:	b580      	push	{r7, lr}
    df6a:	b084      	sub	sp, #16
    df6c:	af00      	add	r7, sp, #0
    df6e:	60f8      	str	r0, [r7, #12]
    df70:	607b      	str	r3, [r7, #4]
    df72:	460b      	mov	r3, r1
    df74:	72fb      	strb	r3, [r7, #11]
    df76:	4613      	mov	r3, r2
    df78:	72bb      	strb	r3, [r7, #10]
    df7a:	68fb      	ldr	r3, [r7, #12]
    df7c:	7aba      	ldrb	r2, [r7, #10]
    df7e:	4618      	mov	r0, r3
    df80:	4611      	mov	r1, r2
    df82:	687a      	ldr	r2, [r7, #4]
    df84:	f7fd f8f4 	bl	b170 <_ZN12AnalogSensorC2EhPt>
    df88:	68fa      	ldr	r2, [r7, #12]
    df8a:	4b05      	ldr	r3, [pc, #20]	(dfa0 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt+0x38>)
    df8c:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    df8e:	68fa      	ldr	r2, [r7, #12]
    df90:	7afb      	ldrb	r3, [r7, #11]
    df92:	7313      	strb	r3, [r2, #12]
}
    df94:	68fb      	ldr	r3, [r7, #12]
    df96:	4618      	mov	r0, r3
    df98:	f107 0710 	add.w	r7, r7, #16	; 0x10
    df9c:	46bd      	mov	sp, r7
    df9e:	bd80      	pop	{r7, pc}
    dfa0:	00022398 	.word	0x00022398

0000dfa4 <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    dfa4:	b580      	push	{r7, lr}
    dfa6:	b084      	sub	sp, #16
    dfa8:	af00      	add	r7, sp, #0
    dfaa:	60f8      	str	r0, [r7, #12]
    dfac:	607b      	str	r3, [r7, #4]
    dfae:	460b      	mov	r3, r1
    dfb0:	72fb      	strb	r3, [r7, #11]
    dfb2:	4613      	mov	r3, r2
    dfb4:	72bb      	strb	r3, [r7, #10]
    dfb6:	68fb      	ldr	r3, [r7, #12]
    dfb8:	7aba      	ldrb	r2, [r7, #10]
    dfba:	4618      	mov	r0, r3
    dfbc:	4611      	mov	r1, r2
    dfbe:	687a      	ldr	r2, [r7, #4]
    dfc0:	f7fd f8d6 	bl	b170 <_ZN12AnalogSensorC2EhPt>
    dfc4:	68fa      	ldr	r2, [r7, #12]
    dfc6:	4b05      	ldr	r3, [pc, #20]	(dfdc <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt+0x38>)
    dfc8:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    dfca:	68fa      	ldr	r2, [r7, #12]
    dfcc:	7afb      	ldrb	r3, [r7, #11]
    dfce:	7313      	strb	r3, [r2, #12]
}
    dfd0:	68fb      	ldr	r3, [r7, #12]
    dfd2:	4618      	mov	r0, r3
    dfd4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    dfd8:	46bd      	mov	sp, r7
    dfda:	bd80      	pop	{r7, pc}
    dfdc:	00022398 	.word	0x00022398

0000dfe0 <_Z20initialisationDesPINv>:



// Mettez toutes vos initialisations de PIN dans la fonction "initialisation"
// On l'appellera ensuite dans le main au tout début pour tout initialiser d'un coup
void initialisationDesPIN()
    dfe0:	b580      	push	{r7, lr}
    dfe2:	b082      	sub	sp, #8
    dfe4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

#ifdef STM32F10X_CL // Pour le stm32 h107

    // Pompe à vide
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    dfe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    dfea:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    dfec:	f04f 0310 	mov.w	r3, #16	; 0x10
    dff0:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    dff2:	f04f 0302 	mov.w	r3, #2	; 0x2
    dff6:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    dff8:	f107 0304 	add.w	r3, r7, #4	; 0x4
    dffc:	4845      	ldr	r0, [pc, #276]	(e114 <_Z20initialisationDesPINv+0x134>)
    dffe:	4619      	mov	r1, r3
    e000:	f7f3 fb56 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOD, GPIO_Pin_14, Bit_RESET);
    e004:	4843      	ldr	r0, [pc, #268]	(e114 <_Z20initialisationDesPINv+0x134>)
    e006:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e00a:	f04f 0200 	mov.w	r2, #0	; 0x0
    e00e:	f7f3 fcbd 	bl	198c <GPIO_WriteBit>

    // Patte coté de la partie bleu ou jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    e012:	f04f 0310 	mov.w	r3, #16	; 0x10
    e016:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    e018:	f04f 0304 	mov.w	r3, #4	; 0x4
    e01c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    e01e:	f04f 0303 	mov.w	r3, #3	; 0x3
    e022:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    e024:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e028:	483b      	ldr	r0, [pc, #236]	(e118 <_Z20initialisationDesPINv+0x138>)
    e02a:	4619      	mov	r1, r3
    e02c:	f7f3 fb40 	bl	16b0 <GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
*/

    GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);
    e030:	483a      	ldr	r0, [pc, #232]	(e11c <_Z20initialisationDesPINv+0x13c>)
    e032:	f04f 0101 	mov.w	r1, #1	; 0x1
    e036:	f7f3 fd2b 	bl	1a90 <GPIO_PinRemapConfig>

    // Pattes des servos
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    e03a:	f44f 7300 	mov.w	r3, #512	; 0x200
    e03e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e040:	f04f 0318 	mov.w	r3, #24	; 0x18
    e044:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    e046:	f04f 0303 	mov.w	r3, #3	; 0x3
    e04a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    e04c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e050:	4831      	ldr	r0, [pc, #196]	(e118 <_Z20initialisationDesPINv+0x138>)
    e052:	4619      	mov	r1, r3
    e054:	f7f3 fb2c 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    e058:	f44f 6300 	mov.w	r3, #2048	; 0x800
    e05c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e05e:	f04f 0318 	mov.w	r3, #24	; 0x18
    e062:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    e064:	f04f 0303 	mov.w	r3, #3	; 0x3
    e068:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    e06a:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e06e:	482a      	ldr	r0, [pc, #168]	(e118 <_Z20initialisationDesPINv+0x138>)
    e070:	4619      	mov	r1, r3
    e072:	f7f3 fb1d 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    e076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e07a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e07c:	f04f 0318 	mov.w	r3, #24	; 0x18
    e080:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    e082:	f04f 0303 	mov.w	r3, #3	; 0x3
    e086:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    e088:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e08c:	4822      	ldr	r0, [pc, #136]	(e118 <_Z20initialisationDesPINv+0x138>)
    e08e:	4619      	mov	r1, r3
    e090:	f7f3 fb0e 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    e094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    e098:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e09a:	f04f 0318 	mov.w	r3, #24	; 0x18
    e09e:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    e0a0:	f04f 0303 	mov.w	r3, #3	; 0x3
    e0a4:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    e0a6:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e0aa:	481b      	ldr	r0, [pc, #108]	(e118 <_Z20initialisationDesPINv+0x138>)
    e0ac:	4619      	mov	r1, r3
    e0ae:	f7f3 faff 	bl	16b0 <GPIO_Init>

    // LED Verte
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    e0b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    e0b6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    e0b8:	f04f 0310 	mov.w	r3, #16	; 0x10
    e0bc:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    e0be:	f04f 0302 	mov.w	r3, #2	; 0x2
    e0c2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    e0c4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e0c8:	4815      	ldr	r0, [pc, #84]	(e120 <_Z20initialisationDesPINv+0x140>)
    e0ca:	4619      	mov	r1, r3
    e0cc:	f7f3 faf0 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
    e0d0:	4813      	ldr	r0, [pc, #76]	(e120 <_Z20initialisationDesPINv+0x140>)
    e0d2:	f04f 0140 	mov.w	r1, #64	; 0x40
    e0d6:	f04f 0200 	mov.w	r2, #0	; 0x0
    e0da:	f7f3 fc57 	bl	198c <GPIO_WriteBit>

    // LED Jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    e0de:	f04f 0380 	mov.w	r3, #128	; 0x80
    e0e2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    e0e4:	f04f 0310 	mov.w	r3, #16	; 0x10
    e0e8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    e0ea:	f04f 0302 	mov.w	r3, #2	; 0x2
    e0ee:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    e0f0:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e0f4:	480a      	ldr	r0, [pc, #40]	(e120 <_Z20initialisationDesPINv+0x140>)
    e0f6:	4619      	mov	r1, r3
    e0f8:	f7f3 fada 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET);
    e0fc:	4808      	ldr	r0, [pc, #32]	(e120 <_Z20initialisationDesPINv+0x140>)
    e0fe:	f04f 0180 	mov.w	r1, #128	; 0x80
    e102:	f04f 0200 	mov.w	r2, #0	; 0x0
    e106:	f7f3 fc41 	bl	198c <GPIO_WriteBit>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET);

#endif //STM32F40_41xxx

}
    e10a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e10e:	46bd      	mov	sp, r7
    e110:	bd80      	pop	{r7, pc}
    e112:	46c0      	nop			(mov r8, r8)
    e114:	40011400 	.word	0x40011400
    e118:	40011800 	.word	0x40011800
    e11c:	001600c0 	.word	0x001600c0
    e120:	40011000 	.word	0x40011000

0000e124 <_Z18initAutresHorlogesv>:
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    #endif
}

// Définit quelques horloges supplémentaires
void initAutresHorloges()
    e124:	b580      	push	{r7, lr}
    e126:	af00      	add	r7, sp, #0
        // Sharps
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    e128:	f04f 0001 	mov.w	r0, #1	; 0x1
    e12c:	f04f 0101 	mov.w	r1, #1	; 0x1
    e130:	f7f4 f968 	bl	2404 <RCC_AHBPeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    e134:	f44f 7000 	mov.w	r0, #512	; 0x200
    e138:	f04f 0101 	mov.w	r1, #1	; 0x1
    e13c:	f7f4 f984 	bl	2448 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    e140:	f04f 0001 	mov.w	r0, #1	; 0x1
    e144:	f04f 0101 	mov.w	r1, #1	; 0x1
    e148:	f7f4 f97e 	bl	2448 <RCC_APB2PeriphClockCmd>
        #ifdef STM32F10X_CL // stm h107
            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE, ENABLE);
    e14c:	f04f 007c 	mov.w	r0, #124	; 0x7c
    e150:	f04f 0101 	mov.w	r1, #1	; 0x1
    e154:	f7f4 f978 	bl	2448 <RCC_APB2PeriphClockCmd>
        #endif
    #endif
}
    e158:	46bd      	mov	sp, r7
    e15a:	bd80      	pop	{r7, pc}

0000e15c <_Z8Clk_Initv>:
//#include "stm32f10x_remap.h"

#include "initialisation.h"

// Initialise le système d'horloge
void Clk_Init()
    e15c:	b580      	push	{r7, lr}
    e15e:	af00      	add	r7, sp, #0
{
    //Rien pour le STM32F4, tout est déjà fait dans SystemInit(), appelée implicitement
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        // Démarre l'horloge interne (8 MHz)
        RCC_HSICmd(ENABLE);
    e160:	f04f 0001 	mov.w	r0, #1	; 0x1
    e164:	f7f3 fe24 	bl	1db0 <RCC_HSICmd>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
    e168:	f04f 0021 	mov.w	r0, #33	; 0x21
    e16c:	f7f4 fa46 	bl	25fc <RCC_GetFlagStatus>
    e170:	4603      	mov	r3, r0
    e172:	2b00      	cmp	r3, #0
    e174:	bf14      	ite	ne
    e176:	2300      	movne	r3, #0
    e178:	2301      	moveq	r3, #1
    e17a:	b2db      	uxtb	r3, r3
    e17c:	2b00      	cmp	r3, #0
    e17e:	d1f3      	bne.n	e168 <_Z8Clk_Initv+0xc>
        // Une fois demarée, on utilise celle ci
        RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
    e180:	f04f 0000 	mov.w	r0, #0	; 0x0
    e184:	f7f3 fef4 	bl	1f70 <RCC_SYSCLKConfig>

        // Démarre l'horloge externe à 25MHz
        RCC_HSEConfig(RCC_HSE_ON);
    e188:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e18c:	f7f3 fd8e 	bl	1cac <RCC_HSEConfig>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
    e190:	f04f 0031 	mov.w	r0, #49	; 0x31
    e194:	f7f4 fa32 	bl	25fc <RCC_GetFlagStatus>
    e198:	4603      	mov	r3, r0
    e19a:	2b00      	cmp	r3, #0
    e19c:	bf14      	ite	ne
    e19e:	2300      	movne	r3, #0
    e1a0:	2301      	moveq	r3, #1
    e1a2:	b2db      	uxtb	r3, r3
    e1a4:	2b00      	cmp	r3, #0
    e1a6:	d1f3      	bne.n	e190 <_Z8Clk_Initv+0x34>


        // PLL2 à (8/5) * 25Mhz = 40 Mhz
        RCC_PREDIV2Config(RCC_PREDIV2_Div5);
    e1a8:	f04f 0040 	mov.w	r0, #64	; 0x40
    e1ac:	f7f3 fe66 	bl	1e7c <RCC_PREDIV2Config>
        RCC_PLL2Config(RCC_PLL2Mul_8);
    e1b0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    e1b4:	f7f3 fe80 	bl	1eb8 <RCC_PLL2Config>
        // On démarre le PLL2 une fois la config entrée
        RCC_PLL2Cmd(ENABLE);
    e1b8:	f04f 0001 	mov.w	r0, #1	; 0x1
    e1bc:	f7f3 fe9a 	bl	1ef4 <RCC_PLL2Cmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET);
    e1c0:	f04f 003b 	mov.w	r0, #59	; 0x3b
    e1c4:	f7f4 fa1a 	bl	25fc <RCC_GetFlagStatus>
    e1c8:	4603      	mov	r3, r0
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	bf14      	ite	ne
    e1ce:	2300      	movne	r3, #0
    e1d0:	2301      	moveq	r3, #1
    e1d2:	b2db      	uxtb	r3, r3
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d1f3      	bne.n	e1c0 <_Z8Clk_Initv+0x64>

        // Initialisation du PL à (9/5) * 40MHz = 72MHz
        RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
    e1d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e1dc:	f04f 0104 	mov.w	r1, #4	; 0x4
    e1e0:	f7f3 fe28 	bl	1e34 <RCC_PREDIV1Config>
        RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
    e1e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    e1e8:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
    e1ec:	f7f3 fdf0 	bl	1dd0 <RCC_PLLConfig>
        // On démarre le PLL une fois la config entrée
        RCC_PLLCmd(ENABLE);
    e1f0:	f04f 0001 	mov.w	r0, #1	; 0x1
    e1f4:	f7f3 fe0e 	bl	1e14 <RCC_PLLCmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
    e1f8:	f04f 0039 	mov.w	r0, #57	; 0x39
    e1fc:	f7f4 f9fe 	bl	25fc <RCC_GetFlagStatus>
    e200:	4603      	mov	r3, r0
    e202:	2b00      	cmp	r3, #0
    e204:	bf14      	ite	ne
    e206:	2300      	movne	r3, #0
    e208:	2301      	moveq	r3, #1
    e20a:	b2db      	uxtb	r3, r3
    e20c:	2b00      	cmp	r3, #0
    e20e:	d1f3      	bne.n	e1f8 <_Z8Clk_Initv+0x9c>

        // On démarre les composants internes au microcontroleur
        RCC_OTGFSCLKConfig(RCC_OTGFSCLKSource_PLLVCO_Div3); // USB OTG FS clock (OTGFSCLK)
    e210:	f04f 0000 	mov.w	r0, #0	; 0x0
    e214:	f7f3 ff5c 	bl	20d0 <RCC_OTGFSCLKConfig>
        RCC_ADCCLKConfig(RCC_PCLK2_Div6); // ADC clock (ADCCLK) : 72MHz / 6 = 12MHz
    e218:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e21c:	f7f3 ff66 	bl	20ec <RCC_ADCCLKConfig>
        RCC_PCLK2Config(RCC_HCLK_Div1); // High Speed APB clock (PCLK2) : 72Mhz
    e220:	f04f 0000 	mov.w	r0, #0	; 0x0
    e224:	f7f3 ff0c 	bl	2040 <RCC_PCLK2Config>
        RCC_PCLK1Config(RCC_HCLK_Div2); // Low Speed APB clock (PCLK1) : 72Mhz / 2 = 36MHz
    e228:	f44f 6080 	mov.w	r0, #1024	; 0x400
    e22c:	f7f3 feea 	bl	2004 <RCC_PCLK1Config>
        RCC_HCLKConfig(RCC_SYSCLK_Div1); // AHB clock (HCLK) : 72Mhz
    e230:	f04f 0000 	mov.w	r0, #0	; 0x0
    e234:	f7f3 fec8 	bl	1fc8 <RCC_HCLKConfig>
        // Flash 1 wait state
        *(vu32 *)0x40022000 = 0x12;
    e238:	4a04      	ldr	r2, [pc, #16]	(e24c <_Z8Clk_Initv+0xf0>)
    e23a:	f04f 0312 	mov.w	r3, #18	; 0x12
    e23e:	6013      	str	r3, [r2, #0]
        // On utilise le PLL comme horloge de référence
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    e240:	f04f 0002 	mov.w	r0, #2	; 0x2
    e244:	f7f3 fe94 	bl	1f70 <RCC_SYSCLKConfig>
    #endif
}
    e248:	46bd      	mov	sp, r7
    e24a:	bd80      	pop	{r7, pc}
    e24c:	40022000 	.word	0x40022000

0000e250 <_ZN16ServosNumeriques11receiveDataEv>:
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    USART_SendData(USART3, (u16) data);
}

int receiveData()
    e250:	b480      	push	{r7}
    e252:	af00      	add	r7, sp, #0
{
    while (!(USART3->SR & USART_FLAG_RXNE));
    e254:	4b0b      	ldr	r3, [pc, #44]	(e284 <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    e256:	881b      	ldrh	r3, [r3, #0]
    e258:	b29b      	uxth	r3, r3
    e25a:	f003 0320 	and.w	r3, r3, #32	; 0x20
    e25e:	2b00      	cmp	r3, #0
    e260:	bf14      	ite	ne
    e262:	2300      	movne	r3, #0
    e264:	2301      	moveq	r3, #1
    e266:	b2db      	uxtb	r3, r3
    e268:	2b00      	cmp	r3, #0
    e26a:	d1f3      	bne.n	e254 <_ZN16ServosNumeriques11receiveDataEv+0x4>

    return ((int)(USART3->DR & 0x1FF));
    e26c:	4b05      	ldr	r3, [pc, #20]	(e284 <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    e26e:	889b      	ldrh	r3, [r3, #4]
    e270:	b29b      	uxth	r3, r3
    e272:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    e276:	ea4f 53d3 	mov.w	r3, r3, lsr #23
}
    e27a:	4618      	mov	r0, r3
    e27c:	46bd      	mov	sp, r7
    e27e:	bc80      	pop	{r7}
    e280:	4770      	bx	lr
    e282:	46c0      	nop			(mov r8, r8)
    e284:	40004800 	.word	0x40004800

0000e288 <_ZN16ServosNumeriques19receiveStatusPacketEPi>:

int receiveStatusPacket(int* tableau)
    e288:	b590      	push	{r4, r7, lr}
    e28a:	b089      	sub	sp, #36
    e28c:	af00      	add	r7, sp, #0
    e28e:	6078      	str	r0, [r7, #4]
{
    int msg = receiveData();
    e290:	f7ff ffde 	bl	e250 <_ZN16ServosNumeriques11receiveDataEv>
    e294:	4603      	mov	r3, r0
    e296:	60fb      	str	r3, [r7, #12]
    int i = 0;
    e298:	f04f 0300 	mov.w	r3, #0	; 0x0
    e29c:	613b      	str	r3, [r7, #16]
    e29e:	e003      	b.n	e2a8 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x20>
    while(msg == 0) {
        msg = receiveData();
    e2a0:	f7ff ffd6 	bl	e250 <_ZN16ServosNumeriques11receiveDataEv>
    e2a4:	4603      	mov	r3, r0
    e2a6:	60fb      	str	r3, [r7, #12]

int receiveStatusPacket(int* tableau)
{
    int msg = receiveData();
    int i = 0;
    while(msg == 0) {
    e2a8:	68fb      	ldr	r3, [r7, #12]
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d0f8      	beq.n	e2a0 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x18>
        msg = receiveData();
    } // on attend de lire quelque chose
    if (msg == 0xff) { // début fanion
    e2ae:	68fb      	ldr	r3, [r7, #12]
    e2b0:	2bff      	cmp	r3, #255
    e2b2:	d176      	bne.n	e3a2 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
        msg = receiveData();
    e2b4:	f7ff ffcc 	bl	e250 <_ZN16ServosNumeriques11receiveDataEv>
    e2b8:	4603      	mov	r3, r0
    e2ba:	60fb      	str	r3, [r7, #12]
        if (msg == 0xff) { // fin fanion
    e2bc:	68fb      	ldr	r3, [r7, #12]
    e2be:	2bff      	cmp	r3, #255
    e2c0:	d16f      	bne.n	e3a2 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
    e2c2:	693b      	ldr	r3, [r7, #16]
    e2c4:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e2c8:	687b      	ldr	r3, [r7, #4]
    e2ca:	eb03 0402 	add.w	r4, r3, r2
    e2ce:	f7ff ffbf 	bl	e250 <_ZN16ServosNumeriques11receiveDataEv>
    e2d2:	4603      	mov	r3, r0
    e2d4:	6023      	str	r3, [r4, #0]
    e2d6:	693b      	ldr	r3, [r7, #16]
    e2d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e2dc:	613b      	str	r3, [r7, #16]
            tableau[i++] = receiveData(); // on lit la taille du message
    e2de:	693b      	ldr	r3, [r7, #16]
    e2e0:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e2e4:	687b      	ldr	r3, [r7, #4]
    e2e6:	eb03 0402 	add.w	r4, r3, r2
    e2ea:	f7ff ffb1 	bl	e250 <_ZN16ServosNumeriques11receiveDataEv>
    e2ee:	4603      	mov	r3, r0
    e2f0:	6023      	str	r3, [r4, #0]
    e2f2:	693b      	ldr	r3, [r7, #16]
    e2f4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e2f8:	613b      	str	r3, [r7, #16]
            for (int i = 2; i < tableau[1]+2; i++) {
    e2fa:	f04f 0302 	mov.w	r3, #2	; 0x2
    e2fe:	61bb      	str	r3, [r7, #24]
    e300:	e00d      	b.n	e31e <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x96>
                tableau[i] = receiveData();
    e302:	69bb      	ldr	r3, [r7, #24]
    e304:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e308:	687b      	ldr	r3, [r7, #4]
    e30a:	eb03 0402 	add.w	r4, r3, r2
    e30e:	f7ff ff9f 	bl	e250 <_ZN16ServosNumeriques11receiveDataEv>
    e312:	4603      	mov	r3, r0
    e314:	6023      	str	r3, [r4, #0]
    if (msg == 0xff) { // début fanion
        msg = receiveData();
        if (msg == 0xff) { // fin fanion
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
            tableau[i++] = receiveData(); // on lit la taille du message
            for (int i = 2; i < tableau[1]+2; i++) {
    e316:	69bb      	ldr	r3, [r7, #24]
    e318:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e31c:	61bb      	str	r3, [r7, #24]
    e31e:	687b      	ldr	r3, [r7, #4]
    e320:	f103 0304 	add.w	r3, r3, #4	; 0x4
    e324:	681b      	ldr	r3, [r3, #0]
    e326:	f103 0202 	add.w	r2, r3, #2	; 0x2
    e32a:	69bb      	ldr	r3, [r7, #24]
    e32c:	429a      	cmp	r2, r3
    e32e:	dce8      	bgt.n	e302 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x7a>
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
    e330:	f04f 0300 	mov.w	r3, #0	; 0x0
    e334:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < tableau[1]+2; i++) {
    e336:	f04f 0300 	mov.w	r3, #0	; 0x0
    e33a:	61fb      	str	r3, [r7, #28]
    e33c:	e00d      	b.n	e35a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xd2>
                sum += tableau[i];
    e33e:	69fb      	ldr	r3, [r7, #28]
    e340:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	4413      	add	r3, r2
    e348:	681b      	ldr	r3, [r3, #0]
    e34a:	461a      	mov	r2, r3
    e34c:	697b      	ldr	r3, [r7, #20]
    e34e:	4413      	add	r3, r2
    e350:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < tableau[1]+2; i++) {
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
            for (int i = 0; i < tableau[1]+2; i++) {
    e352:	69fb      	ldr	r3, [r7, #28]
    e354:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e358:	61fb      	str	r3, [r7, #28]
    e35a:	687b      	ldr	r3, [r7, #4]
    e35c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    e360:	681b      	ldr	r3, [r3, #0]
    e362:	f103 0202 	add.w	r2, r3, #2	; 0x2
    e366:	69fb      	ldr	r3, [r7, #28]
    e368:	429a      	cmp	r2, r3
    e36a:	dce8      	bgt.n	e33e <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xb6>
                sum += tableau[i];
            }
            if ((int16_t)~(sum) != tableau[tableau[1]+1])
    e36c:	697b      	ldr	r3, [r7, #20]
    e36e:	b29b      	uxth	r3, r3
    e370:	ea6f 0303 	mvn.w	r3, r3
    e374:	b29b      	uxth	r3, r3
    e376:	b219      	sxth	r1, r3
    e378:	687b      	ldr	r3, [r7, #4]
    e37a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    e37e:	681b      	ldr	r3, [r3, #0]
    e380:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e384:	ea4f 0283 	mov.w	r2, r3, lsl #2
    e388:	687b      	ldr	r3, [r7, #4]
    e38a:	4413      	add	r3, r2
    e38c:	681b      	ldr	r3, [r3, #0]
    e38e:	4299      	cmp	r1, r3
    e390:	d003      	beq.n	e39a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x112>
                return -1;
    e392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e396:	603b      	str	r3, [r7, #0]
    e398:	e006      	b.n	e3a8 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
            return 0;
    e39a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e39e:	603b      	str	r3, [r7, #0]
    e3a0:	e002      	b.n	e3a8 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
        }
    }
    return 1;
    e3a2:	f04f 0301 	mov.w	r3, #1	; 0x1
    e3a6:	603b      	str	r3, [r7, #0]
    e3a8:	683b      	ldr	r3, [r7, #0]
}
    e3aa:	4618      	mov	r0, r3
    e3ac:	f107 0724 	add.w	r7, r7, #36	; 0x24
    e3b0:	46bd      	mov	sp, r7
    e3b2:	bd90      	pop	{r4, r7, pc}

0000e3b4 <_ZN16ServosNumeriques8sendDataEi>:
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}

void sendData(int data)
    e3b4:	b580      	push	{r7, lr}
    e3b6:	b082      	sub	sp, #8
    e3b8:	af00      	add	r7, sp, #0
    e3ba:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    e3bc:	480b      	ldr	r0, [pc, #44]	(e3ec <_ZN16ServosNumeriques8sendDataEi+0x38>)
    e3be:	f04f 0180 	mov.w	r1, #128	; 0x80
    e3c2:	f7f6 fcd3 	bl	4d6c <USART_GetFlagStatus>
    e3c6:	4603      	mov	r3, r0
    e3c8:	2b00      	cmp	r3, #0
    e3ca:	bf14      	ite	ne
    e3cc:	2300      	movne	r3, #0
    e3ce:	2301      	moveq	r3, #1
    e3d0:	b2db      	uxtb	r3, r3
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d1f2      	bne.n	e3bc <_ZN16ServosNumeriques8sendDataEi+0x8>
    USART_SendData(USART3, (u16) data);
    e3d6:	687b      	ldr	r3, [r7, #4]
    e3d8:	b29b      	uxth	r3, r3
    e3da:	4804      	ldr	r0, [pc, #16]	(e3ec <_ZN16ServosNumeriques8sendDataEi+0x38>)
    e3dc:	4619      	mov	r1, r3
    e3de:	f7f6 fb91 	bl	4b04 <USART_SendData>
}
    e3e2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e3e6:	46bd      	mov	sp, r7
    e3e8:	bd80      	pop	{r7, pc}
    e3ea:	46c0      	nop			(mov r8, r8)
    e3ec:	40004800 	.word	0x40004800

0000e3f0 <_ZN16ServosNumeriques12setMaxTorqueEth>:
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
    e3f0:	b580      	push	{r7, lr}
    e3f2:	b094      	sub	sp, #80
    e3f4:	af00      	add	r7, sp, #0
    e3f6:	4603      	mov	r3, r0
    e3f8:	460a      	mov	r2, r1
    e3fa:	80fb      	strh	r3, [r7, #6]
    e3fc:	4613      	mov	r3, r2
    e3fe:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    e400:	f897 c005 	ldrb.w	ip, [r7, #5]
    e404:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e408:	88fa      	ldrh	r2, [r7, #6]
    e40a:	4618      	mov	r0, r3
    e40c:	4611      	mov	r1, r2
    e40e:	4662      	mov	r2, ip
    e410:	f7fc ff8e 	bl	b330 <_ZN4AX1223getMaxTorqueInstructionEPiti>
    e414:	4603      	mov	r3, r0
    e416:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e418:	f04f 0300 	mov.w	r3, #0	; 0x0
    e41c:	64fb      	str	r3, [r7, #76]
    e41e:	e00e      	b.n	e43e <_ZN16ServosNumeriques12setMaxTorqueEth+0x4e>
        sendData(packet[i]);
    e420:	6cfb      	ldr	r3, [r7, #76]
    e422:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e426:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e42a:	4413      	add	r3, r2
    e42c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e430:	4618      	mov	r0, r3
    e432:	f7ff ffbf 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    e436:	6cfb      	ldr	r3, [r7, #76]
    e438:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e43c:	64fb      	str	r3, [r7, #76]
    e43e:	6cfa      	ldr	r2, [r7, #76]
    e440:	6cbb      	ldr	r3, [r7, #72]
    e442:	429a      	cmp	r2, r3
    e444:	dbec      	blt.n	e420 <_ZN16ServosNumeriques12setMaxTorqueEth+0x30>
        sendData(packet[i]);
    }
}
    e446:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e44a:	46bd      	mov	sp, r7
    e44c:	bd80      	pop	{r7, pc}
    e44e:	46c0      	nop			(mov r8, r8)

0000e450 <_ZN16ServosNumeriques15setTorqueLimiteEth>:
        sendData(packet[i]);
    }
}


void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
    e450:	b580      	push	{r7, lr}
    e452:	b094      	sub	sp, #80
    e454:	af00      	add	r7, sp, #0
    e456:	4603      	mov	r3, r0
    e458:	460a      	mov	r2, r1
    e45a:	80fb      	strh	r3, [r7, #6]
    e45c:	4613      	mov	r3, r2
    e45e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    e460:	f897 c005 	ldrb.w	ip, [r7, #5]
    e464:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e468:	88fa      	ldrh	r2, [r7, #6]
    e46a:	4618      	mov	r0, r3
    e46c:	4611      	mov	r1, r2
    e46e:	4662      	mov	r2, ip
    e470:	f7fc ff98 	bl	b3a4 <_ZN4AX1225getTorqueLimitInstructionEPiti>
    e474:	4603      	mov	r3, r0
    e476:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e478:	f04f 0300 	mov.w	r3, #0	; 0x0
    e47c:	64fb      	str	r3, [r7, #76]
    e47e:	e00e      	b.n	e49e <_ZN16ServosNumeriques15setTorqueLimiteEth+0x4e>
        sendData(packet[i]);
    e480:	6cfb      	ldr	r3, [r7, #76]
    e482:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e486:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e48a:	4413      	add	r3, r2
    e48c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e490:	4618      	mov	r0, r3
    e492:	f7ff ff8f 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>

void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    e496:	6cfb      	ldr	r3, [r7, #76]
    e498:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e49c:	64fb      	str	r3, [r7, #76]
    e49e:	6cfa      	ldr	r2, [r7, #76]
    e4a0:	6cbb      	ldr	r3, [r7, #72]
    e4a2:	429a      	cmp	r2, r3
    e4a4:	dbec      	blt.n	e480 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x30>
        sendData(packet[i]);
    }
}
    e4a6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e4aa:	46bd      	mov	sp, r7
    e4ac:	bd80      	pop	{r7, pc}
    e4ae:	46c0      	nop			(mov r8, r8)

0000e4b0 <_ZN16ServosNumeriques11setBaudRateEhh>:
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
    e4b0:	b580      	push	{r7, lr}
    e4b2:	b094      	sub	sp, #80
    e4b4:	af00      	add	r7, sp, #0
    e4b6:	4603      	mov	r3, r0
    e4b8:	460a      	mov	r2, r1
    e4ba:	71fb      	strb	r3, [r7, #7]
    e4bc:	4613      	mov	r3, r2
    e4be:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    e4c0:	f897 c006 	ldrb.w	ip, [r7, #6]
    e4c4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e4c8:	79fa      	ldrb	r2, [r7, #7]
    e4ca:	4618      	mov	r0, r3
    e4cc:	4611      	mov	r1, r2
    e4ce:	4662      	mov	r2, ip
    e4d0:	f7fc fece 	bl	b270 <_ZN4AX1222getBaudRateInstructionEPihi>
    e4d4:	4603      	mov	r3, r0
    e4d6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e4d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e4dc:	64fb      	str	r3, [r7, #76]
    e4de:	e00e      	b.n	e4fe <_ZN16ServosNumeriques11setBaudRateEhh+0x4e>
        sendData(packet[i]);
    e4e0:	6cfb      	ldr	r3, [r7, #76]
    e4e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e4e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e4ea:	4413      	add	r3, r2
    e4ec:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e4f0:	4618      	mov	r0, r3
    e4f2:	f7ff ff5f 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    for (int i = 0; i < packetLength; i++) {
    e4f6:	6cfb      	ldr	r3, [r7, #76]
    e4f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e4fc:	64fb      	str	r3, [r7, #76]
    e4fe:	6cfa      	ldr	r2, [r7, #76]
    e500:	6cbb      	ldr	r3, [r7, #72]
    e502:	429a      	cmp	r2, r3
    e504:	dbec      	blt.n	e4e0 <_ZN16ServosNumeriques11setBaudRateEhh+0x30>
        sendData(packet[i]);
    }
}
    e506:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e50a:	46bd      	mov	sp, r7
    e50c:	bd80      	pop	{r7, pc}
    e50e:	46c0      	nop			(mov r8, r8)

0000e510 <_ZN16ServosNumeriques15setMaximumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMaximumAngle(uint16_t angle, uint8_t servo)
    e510:	b580      	push	{r7, lr}
    e512:	b094      	sub	sp, #80
    e514:	af00      	add	r7, sp, #0
    e516:	4603      	mov	r3, r0
    e518:	460a      	mov	r2, r1
    e51a:	80fb      	strh	r3, [r7, #6]
    e51c:	4613      	mov	r3, r2
    e51e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    e520:	f897 c005 	ldrb.w	ip, [r7, #5]
    e524:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e528:	88fa      	ldrh	r2, [r7, #6]
    e52a:	4618      	mov	r0, r3
    e52c:	4611      	mov	r1, r2
    e52e:	4662      	mov	r2, ip
    e530:	f7fc ff72 	bl	b418 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>
    e534:	4603      	mov	r3, r0
    e536:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e538:	f04f 0300 	mov.w	r3, #0	; 0x0
    e53c:	64fb      	str	r3, [r7, #76]
    e53e:	e00e      	b.n	e55e <_ZN16ServosNumeriques15setMaximumAngleEth+0x4e>
        sendData(packet[i]);
    e540:	6cfb      	ldr	r3, [r7, #76]
    e542:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e546:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e54a:	4413      	add	r3, r2
    e54c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e550:	4618      	mov	r0, r3
    e552:	f7ff ff2f 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>

void setMaximumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    e556:	6cfb      	ldr	r3, [r7, #76]
    e558:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e55c:	64fb      	str	r3, [r7, #76]
    e55e:	6cfa      	ldr	r2, [r7, #76]
    e560:	6cbb      	ldr	r3, [r7, #72]
    e562:	429a      	cmp	r2, r3
    e564:	dbec      	blt.n	e540 <_ZN16ServosNumeriques15setMaximumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    e566:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e56a:	46bd      	mov	sp, r7
    e56c:	bd80      	pop	{r7, pc}
    e56e:	46c0      	nop			(mov r8, r8)

0000e570 <_ZN16ServosNumeriques15setMinimumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMinimumAngle(uint16_t angle, uint8_t servo)
    e570:	b580      	push	{r7, lr}
    e572:	b094      	sub	sp, #80
    e574:	af00      	add	r7, sp, #0
    e576:	4603      	mov	r3, r0
    e578:	460a      	mov	r2, r1
    e57a:	80fb      	strh	r3, [r7, #6]
    e57c:	4613      	mov	r3, r2
    e57e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    e580:	f897 c005 	ldrb.w	ip, [r7, #5]
    e584:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e588:	88fa      	ldrh	r2, [r7, #6]
    e58a:	4618      	mov	r0, r3
    e58c:	4611      	mov	r1, r2
    e58e:	4662      	mov	r2, ip
    e590:	f7fc ff7c 	bl	b48c <_ZN4AX1229getAngleLowerLimitInstructionEPiti>
    e594:	4603      	mov	r3, r0
    e596:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e598:	f04f 0300 	mov.w	r3, #0	; 0x0
    e59c:	64fb      	str	r3, [r7, #76]
    e59e:	e00e      	b.n	e5be <_ZN16ServosNumeriques15setMinimumAngleEth+0x4e>
        sendData(packet[i]);
    e5a0:	6cfb      	ldr	r3, [r7, #76]
    e5a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e5a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e5aa:	4413      	add	r3, r2
    e5ac:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e5b0:	4618      	mov	r0, r3
    e5b2:	f7ff feff 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>

void setMinimumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    e5b6:	6cfb      	ldr	r3, [r7, #76]
    e5b8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e5bc:	64fb      	str	r3, [r7, #76]
    e5be:	6cfa      	ldr	r2, [r7, #76]
    e5c0:	6cbb      	ldr	r3, [r7, #72]
    e5c2:	429a      	cmp	r2, r3
    e5c4:	dbec      	blt.n	e5a0 <_ZN16ServosNumeriques15setMinimumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    e5c6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e5ca:	46bd      	mov	sp, r7
    e5cc:	bd80      	pop	{r7, pc}
    e5ce:	46c0      	nop			(mov r8, r8)

0000e5d0 <_ZN16ServosNumeriques11setLedStateEhh>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setLedState(uint8_t ledOn, uint8_t servo)
    e5d0:	b580      	push	{r7, lr}
    e5d2:	b094      	sub	sp, #80
    e5d4:	af00      	add	r7, sp, #0
    e5d6:	4603      	mov	r3, r0
    e5d8:	460a      	mov	r2, r1
    e5da:	71fb      	strb	r3, [r7, #7]
    e5dc:	4613      	mov	r3, r2
    e5de:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    e5e0:	f897 c006 	ldrb.w	ip, [r7, #6]
    e5e4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e5e8:	79fa      	ldrb	r2, [r7, #7]
    e5ea:	4618      	mov	r0, r3
    e5ec:	4611      	mov	r1, r2
    e5ee:	4662      	mov	r2, ip
    e5f0:	f7fc fe6e 	bl	b2d0 <_ZN4AX1217getLedInstructionEPihi>
    e5f4:	4603      	mov	r3, r0
    e5f6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e5f8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e5fc:	64fb      	str	r3, [r7, #76]
    e5fe:	e00e      	b.n	e61e <_ZN16ServosNumeriques11setLedStateEhh+0x4e>
        sendData(packet[i]);
    e600:	6cfb      	ldr	r3, [r7, #76]
    e602:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e606:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e60a:	4413      	add	r3, r2
    e60c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e610:	4618      	mov	r0, r3
    e612:	f7ff fecf 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>

void setLedState(uint8_t ledOn, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    for (int i = 0; i < packetLength; i++) {
    e616:	6cfb      	ldr	r3, [r7, #76]
    e618:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e61c:	64fb      	str	r3, [r7, #76]
    e61e:	6cfa      	ldr	r2, [r7, #76]
    e620:	6cbb      	ldr	r3, [r7, #72]
    e622:	429a      	cmp	r2, r3
    e624:	dbec      	blt.n	e600 <_ZN16ServosNumeriques11setLedStateEhh+0x30>
        sendData(packet[i]);
    }
}
    e626:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e62a:	46bd      	mov	sp, r7
    e62c:	bd80      	pop	{r7, pc}
    e62e:	46c0      	nop			(mov r8, r8)

0000e630 <_ZN16ServosNumeriques11moveAtSpeedEth>:
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
    e630:	b580      	push	{r7, lr}
    e632:	b094      	sub	sp, #80
    e634:	af00      	add	r7, sp, #0
    e636:	4603      	mov	r3, r0
    e638:	460a      	mov	r2, r1
    e63a:	80fb      	strh	r3, [r7, #6]
    e63c:	4613      	mov	r3, r2
    e63e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    e640:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e644:	88fa      	ldrh	r2, [r7, #6]
    e646:	f897 c005 	ldrb.w	ip, [r7, #5]
    e64a:	4618      	mov	r0, r3
    e64c:	4611      	mov	r1, r2
    e64e:	4662      	mov	r2, ip
    e650:	f7fc ff56 	bl	b500 <_ZN4AX1223getMoveSpeedInstructionEPith>
    e654:	4603      	mov	r3, r0
    e656:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e658:	f04f 0300 	mov.w	r3, #0	; 0x0
    e65c:	64fb      	str	r3, [r7, #76]
    e65e:	e00e      	b.n	e67e <_ZN16ServosNumeriques11moveAtSpeedEth+0x4e>
        sendData(packet[i]);
    e660:	6cfb      	ldr	r3, [r7, #76]
    e662:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e666:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e66a:	4413      	add	r3, r2
    e66c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e670:	4618      	mov	r0, r3
    e672:	f7ff fe9f 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    e676:	6cfb      	ldr	r3, [r7, #76]
    e678:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e67c:	64fb      	str	r3, [r7, #76]
    e67e:	6cfa      	ldr	r2, [r7, #76]
    e680:	6cbb      	ldr	r3, [r7, #72]
    e682:	429a      	cmp	r2, r3
    e684:	dbec      	blt.n	e660 <_ZN16ServosNumeriques11moveAtSpeedEth+0x30>
        sendData(packet[i]);
    }
}
    e686:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e68a:	46bd      	mov	sp, r7
    e68c:	bd80      	pop	{r7, pc}
    e68e:	46c0      	nop			(mov r8, r8)

0000e690 <_ZN16ServosNumeriques6moveToEth>:
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveTo(uint16_t position, uint8_t servo)
    e690:	b580      	push	{r7, lr}
    e692:	b094      	sub	sp, #80
    e694:	af00      	add	r7, sp, #0
    e696:	4603      	mov	r3, r0
    e698:	460a      	mov	r2, r1
    e69a:	80fb      	strh	r3, [r7, #6]
    e69c:	4613      	mov	r3, r2
    e69e:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    e6a0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e6a4:	88fa      	ldrh	r2, [r7, #6]
    e6a6:	f897 c005 	ldrb.w	ip, [r7, #5]
    e6aa:	4618      	mov	r0, r3
    e6ac:	4611      	mov	r1, r2
    e6ae:	4662      	mov	r2, ip
    e6b0:	f7fc ff62 	bl	b578 <_ZN4AX1220getMoveToInstructionEPith>
    e6b4:	4603      	mov	r3, r0
    e6b6:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e6b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e6bc:	64fb      	str	r3, [r7, #76]
    e6be:	e00e      	b.n	e6de <_ZN16ServosNumeriques6moveToEth+0x4e>
        sendData(packet[i]);
    e6c0:	6cfb      	ldr	r3, [r7, #76]
    e6c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e6c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e6ca:	4413      	add	r3, r2
    e6cc:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e6d0:	4618      	mov	r0, r3
    e6d2:	f7ff fe6f 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>
}
void moveTo(uint16_t position, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
    e6d6:	6cfb      	ldr	r3, [r7, #76]
    e6d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e6dc:	64fb      	str	r3, [r7, #76]
    e6de:	6cfa      	ldr	r2, [r7, #76]
    e6e0:	6cbb      	ldr	r3, [r7, #72]
    e6e2:	429a      	cmp	r2, r3
    e6e4:	dbec      	blt.n	e6c0 <_ZN16ServosNumeriques6moveToEth+0x30>
        sendData(packet[i]);
    }
}
    e6e6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e6ea:	46bd      	mov	sp, r7
    e6ec:	bd80      	pop	{r7, pc}
    e6ee:	46c0      	nop			(mov r8, r8)

0000e6f0 <_ZN16ServosNumeriques13moveToAtSpeedEtth>:
        }
    }
    return 1;
}

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
    e6f0:	b580      	push	{r7, lr}
    e6f2:	b094      	sub	sp, #80
    e6f4:	af00      	add	r7, sp, #0
    e6f6:	4603      	mov	r3, r0
    e6f8:	80fb      	strh	r3, [r7, #6]
    e6fa:	460b      	mov	r3, r1
    e6fc:	80bb      	strh	r3, [r7, #4]
    e6fe:	4613      	mov	r3, r2
    e700:	70fb      	strb	r3, [r7, #3]
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    e702:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e706:	88fa      	ldrh	r2, [r7, #6]
    e708:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    e70c:	f897 e003 	ldrb.w	lr, [r7, #3]
    e710:	4618      	mov	r0, r3
    e712:	4611      	mov	r1, r2
    e714:	4662      	mov	r2, ip
    e716:	4673      	mov	r3, lr
    e718:	f7fc ff6a 	bl	b5f0 <_ZN4AX1218getMoveInstructionEPitth>
    e71c:	4603      	mov	r3, r0
    e71e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    e720:	f04f 0300 	mov.w	r3, #0	; 0x0
    e724:	64fb      	str	r3, [r7, #76]
    e726:	e00e      	b.n	e746 <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x56>
        sendData(packet[i]);
    e728:	6cfb      	ldr	r3, [r7, #76]
    e72a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    e72e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    e732:	4413      	add	r3, r2
    e734:	f853 3c48 	ldr.w	r3, [r3, #-72]
    e738:	4618      	mov	r0, r3
    e73a:	f7ff fe3b 	bl	e3b4 <_ZN16ServosNumeriques8sendDataEi>

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    e73e:	6cfb      	ldr	r3, [r7, #76]
    e740:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e744:	64fb      	str	r3, [r7, #76]
    e746:	6cfa      	ldr	r2, [r7, #76]
    e748:	6cbb      	ldr	r3, [r7, #72]
    e74a:	429a      	cmp	r2, r3
    e74c:	dbec      	blt.n	e728 <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x38>
        sendData(packet[i]);
    }
}
    e74e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    e752:	46bd      	mov	sp, r7
    e754:	bd80      	pop	{r7, pc}
    e756:	46c0      	nop			(mov r8, r8)

0000e758 <_Z25ServosNumeriques_sendDatai>:
#include "interfaceServosNumeriques.h"
//#include "stm32f4xx_usart.h"

void ServosNumeriques_sendData(int data)
    e758:	b580      	push	{r7, lr}
    e75a:	b082      	sub	sp, #8
    e75c:	af00      	add	r7, sp, #0
    e75e:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    e760:	480b      	ldr	r0, [pc, #44]	(e790 <_Z25ServosNumeriques_sendDatai+0x38>)
    e762:	f04f 0180 	mov.w	r1, #128	; 0x80
    e766:	f7f6 fb01 	bl	4d6c <USART_GetFlagStatus>
    e76a:	4603      	mov	r3, r0
    e76c:	2b00      	cmp	r3, #0
    e76e:	bf14      	ite	ne
    e770:	2300      	movne	r3, #0
    e772:	2301      	moveq	r3, #1
    e774:	b2db      	uxtb	r3, r3
    e776:	2b00      	cmp	r3, #0
    e778:	d1f2      	bne.n	e760 <_Z25ServosNumeriques_sendDatai+0x8>
    USART_SendData(USART3, (u16) data);
    e77a:	687b      	ldr	r3, [r7, #4]
    e77c:	b29b      	uxth	r3, r3
    e77e:	4804      	ldr	r0, [pc, #16]	(e790 <_Z25ServosNumeriques_sendDatai+0x38>)
    e780:	4619      	mov	r1, r3
    e782:	f7f6 f9bf 	bl	4b04 <USART_SendData>
}
    e786:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e78a:	46bd      	mov	sp, r7
    e78c:	bd80      	pop	{r7, pc}
    e78e:	46c0      	nop			(mov r8, r8)
    e790:	40004800 	.word	0x40004800

0000e794 <_ZN16ServosNumeriques11receiveModeEv>:
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
void receiveMode()
    e794:	b580      	push	{r7, lr}
    e796:	af00      	add	r7, sp, #0
{
	// on veut recevoir des paquets, on met le bit d'envoi à 0
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_RESET);
    e798:	4804      	ldr	r0, [pc, #16]	(e7ac <_ZN16ServosNumeriques11receiveModeEv+0x18>)
    e79a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e79e:	f04f 0200 	mov.w	r2, #0	; 0x0
    e7a2:	f7f3 f8f3 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e7a6:	46bd      	mov	sp, r7
    e7a8:	bd80      	pop	{r7, pc}
    e7aa:	46c0      	nop			(mov r8, r8)
    e7ac:	40011400 	.word	0x40011400

0000e7b0 <_ZN16ServosNumeriques8sendModeEv>:
	USART_Init(USART3, &USART_InitStruct);
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
}

void sendMode()
    e7b0:	b580      	push	{r7, lr}
    e7b2:	af00      	add	r7, sp, #0
{
	// on veut envoyer des paquets, on met le bit d'envoi à 1
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
    e7b4:	4804      	ldr	r0, [pc, #16]	(e7c8 <_ZN16ServosNumeriques8sendModeEv+0x18>)
    e7b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e7ba:	f04f 0201 	mov.w	r2, #1	; 0x1
    e7be:	f7f3 f8e5 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e7c2:	46bd      	mov	sp, r7
    e7c4:	bd80      	pop	{r7, pc}
    e7c6:	46c0      	nop			(mov r8, r8)
    e7c8:	40011400 	.word	0x40011400

0000e7cc <_ZN16ServosNumeriques8initUARTEi>:
#endif


}

void initUART(int baudRate)
    e7cc:	b580      	push	{r7, lr}
    e7ce:	b086      	sub	sp, #24
    e7d0:	af00      	add	r7, sp, #0
    e7d2:	6078      	str	r0, [r7, #4]
{
    USART_InitTypeDef USART_InitStruct;
	// Protocole ax12 : Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)
 	/* Initialisation des caracteristiques USART_InitStruct */
 	USART_InitStruct.USART_BaudRate = baudRate;
    e7d4:	687b      	ldr	r3, [r7, #4]
    e7d6:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
    e7d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e7dc:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
    e7de:	f04f 0300 	mov.w	r3, #0	; 0x0
    e7e2:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
    e7e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    e7e8:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    e7ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    e7ee:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    e7f0:	f04f 030c 	mov.w	r3, #12	; 0xc
    e7f4:	827b      	strh	r3, [r7, #18]

	/* On configure et on lance */
	USART_Init(USART3, &USART_InitStruct);
    e7f6:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e7fa:	4806      	ldr	r0, [pc, #24]	(e814 <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e7fc:	4619      	mov	r1, r3
    e7fe:	f7f5 ff0f 	bl	4620 <USART_Init>
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
    e802:	4804      	ldr	r0, [pc, #16]	(e814 <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e804:	f04f 0101 	mov.w	r1, #1	; 0x1
    e808:	f7f6 f82a 	bl	4860 <USART_Cmd>
}
    e80c:	f107 0718 	add.w	r7, r7, #24	; 0x18
    e810:	46bd      	mov	sp, r7
    e812:	bd80      	pop	{r7, pc}
    e814:	40004800 	.word	0x40004800

0000e818 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>:
}

namespace ServosNumeriques
{

void initClocksAndPortsGPIO()
    e818:	b580      	push	{r7, lr}
    e81a:	b082      	sub	sp, #8
    e81c:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    GPIO_Init(GPIOB, &GPIO_InitStructure);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    // bus APB1 : allow usart 3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    e81e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e822:	f04f 0101 	mov.w	r1, #1	; 0x1
    e826:	f7f3 fe31 	bl	248c <RCC_APB1PeriphClockCmd>

    // on remap l'usart3 pour que le stm soit bien configuré sur les ports 8 9 et 10 du GPIOD
    GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
    e82a:	481b      	ldr	r0, [pc, #108]	(e898 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x80>)
    e82c:	f04f 0101 	mov.w	r1, #1	; 0x1
    e830:	f7f3 f92e 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
 	// port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    e834:	f44f 7380 	mov.w	r3, #256	; 0x100
    e838:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e83a:	f04f 0318 	mov.w	r3, #24	; 0x18
    e83e:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e840:	f04f 0303 	mov.w	r3, #3	; 0x3
    e844:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e846:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e84a:	4814      	ldr	r0, [pc, #80]	(e89c <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e84c:	4619      	mov	r1, r3
    e84e:	f7f2 ff2f 	bl	16b0 <GPIO_Init>

 	// port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    e852:	f44f 7300 	mov.w	r3, #512	; 0x200
    e856:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    e858:	f04f 0304 	mov.w	r3, #4	; 0x4
    e85c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e85e:	f04f 0303 	mov.w	r3, #3	; 0x3
    e862:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e864:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e868:	480c      	ldr	r0, [pc, #48]	(e89c <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e86a:	4619      	mov	r1, r3
    e86c:	f7f2 ff20 	bl	16b0 <GPIO_Init>

 	// port D pin 10 : la direction (TX/RX)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    e870:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e874:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    e876:	f04f 0310 	mov.w	r3, #16	; 0x10
    e87a:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    e87c:	f04f 0302 	mov.w	r3, #2	; 0x2
    e880:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e882:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e886:	4805      	ldr	r0, [pc, #20]	(e89c <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e888:	4619      	mov	r1, r3
    e88a:	f7f2 ff11 	bl	16b0 <GPIO_Init>
#endif


}
    e88e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e892:	46bd      	mov	sp, r7
    e894:	bd80      	pop	{r7, pc}
    e896:	46c0      	nop			(mov r8, r8)
    e898:	00140030 	.word	0x00140030
    e89c:	40011400 	.word	0x40011400

0000e8a0 <_Z6isBluev>:


#define NVIC_CCR ((volatile unsigned long *)(0xE000ED14))

// Dit si on est du coté bleu
bool isBlue() // = ROUGE
    e8a0:	b580      	push	{r7, lr}
    e8a2:	af00      	add	r7, sp, #0
{
#ifdef STM32F40_41xxx // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    return GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_4) == Bit_RESET;
    e8a4:	4806      	ldr	r0, [pc, #24]	(e8c0 <_Z6isBluev+0x20>)
    e8a6:	f04f 0110 	mov.w	r1, #16	; 0x10
    e8aa:	f7f2 fffb 	bl	18a4 <GPIO_ReadInputDataBit>
    e8ae:	4603      	mov	r3, r0
    e8b0:	2b00      	cmp	r3, #0
    e8b2:	bf14      	ite	ne
    e8b4:	2300      	movne	r3, #0
    e8b6:	2301      	moveq	r3, #1
    e8b8:	b2db      	uxtb	r3, r3
#endif
#ifdef STM32F10X_MD // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
}
    e8ba:	4618      	mov	r0, r3
    e8bc:	46bd      	mov	sp, r7
    e8be:	bd80      	pop	{r7, pc}
    e8c0:	40011800 	.word	0x40011800

0000e8c4 <main>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}
*/

int main()
    e8c4:	b580      	push	{r7, lr}
    e8c6:	b0a2      	sub	sp, #136
    e8c8:	af06      	add	r7, sp, #24
{
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        *NVIC_CCR = *NVIC_CCR | 0x200; // Set STKALIGN in NVIC
    e8ca:	4a7f      	ldr	r2, [pc, #508]	(eac8 <main+0x204>)
    e8cc:	4b7e      	ldr	r3, [pc, #504]	(eac8 <main+0x204>)
    e8ce:	681b      	ldr	r3, [r3, #0]
    e8d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e8d4:	6013      	str	r3, [r2, #0]
    #else
        SystemInit(); // Appelée implicitement ?
    #endif

    // On initialise les horloges
    Clk_Init();
    e8d6:	f7ff fc41 	bl	e15c <_Z8Clk_Initv>

    // Définit quelques horloges supplémentaires
    initAutresHorloges();
    e8da:	f7ff fc23 	bl	e124 <_Z18initAutresHorlogesv>

    // Appel de la fonction qui permet d'initialiser tous les PINS
    initialisationDesPIN();
    e8de:	f7ff fb7f 	bl	dfe0 <_Z20initialisationDesPINv>

    Remote::log("Init");
    e8e2:	4b7a      	ldr	r3, [pc, #488]	(eacc <main+0x208>)
    e8e4:	4618      	mov	r0, r3
    e8e6:	f7fe fcc3 	bl	d270 <_ZN6Remote3logEPc>
    //Debug::testContainer();
    //Debug::testBrasLateraux();
    //Debug::testADC_DMASampleF4();
    //Debug::testSharps();
#endif
    allumerLED();
    e8ea:	f7fd fef9 	bl	c6e0 <_Z10allumerLEDv>
    eteindreLED();
    e8ee:	f7fd fe9b 	bl	c628 <_Z11eteindreLEDv>
    allumerLED2();
    e8f2:	f7fd feed 	bl	c6d0 <_Z11allumerLED2v>
    eteindreLED2();
    e8f6:	f7fd fe8f 	bl	c618 <_Z12eteindreLED2v>
    allumerLED();
    e8fa:	f7fd fef1 	bl	c6e0 <_Z10allumerLEDv>
//    UartDebug::sendData(42);
//    UartDebug::sendData(50);
//    UartDebug::sendData(51);
//    UartDebug::sendData(52);

    ServosNumeriques::initClocksAndPortsGPIO();
    e8fe:	f7ff ff8b 	bl	e818 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>
    ServosNumeriques::initUART(19231);
    e902:	f644 301f 	movw	r0, #19231	; 0x4b1f
    e906:	f7ff ff61 	bl	e7cc <_ZN16ServosNumeriques8initUARTEi>
    ServosNumeriques::sendMode();
    e90a:	f7ff ff51 	bl	e7b0 <_ZN16ServosNumeriques8sendModeEv>
    #endif
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        Tirette tirette(GPIOA, GPIO_Pin_10);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        Tirette tirette(GPIOE, GPIO_Pin_5);
    e90e:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e912:	4618      	mov	r0, r3
    e914:	496e      	ldr	r1, [pc, #440]	(ead0 <main+0x20c>)
    e916:	f04f 0220 	mov.w	r2, #32	; 0x20
    e91a:	f7ff f94b 	bl	dbb4 <_ZN7TiretteC1EP12GPIO_TypeDeft>
    // Initialisation des actionneurs 1
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405
        BrasLateraux::initBrasLateraux();
        Container::getSingleton();
    #elif defined(STM32F10X_CL) // H107
        BrasLateraux::initBrasLateraux();
    e91e:	f7f6 feb7 	bl	5690 <_ZN12BrasLateraux16initBrasLaterauxEv>
#endif

//    tirette.attendreRemise();
//    tirette.attendreEnlevee();

    Remote::getSingleton();
    e922:	f7fe fc81 	bl	d228 <_ZN6Remote12getSingletonEv>
    // Initialisation des actionneurs 2
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405

    #elif defined(STM32F10X_CL) // H107
//        Brak* bracquemart = Brak::getSingleton();
        Sensors* sensors = Sensors::getSingleton();
    e926:	f7f8 fcfb 	bl	7320 <_ZN7Sensors12getSingletonEv>
    e92a:	4603      	mov	r3, r0
    e92c:	65bb      	str	r3, [r7, #88]
        ServosNumeriques::setLedState(1, 12);
    e92e:	f04f 0001 	mov.w	r0, #1	; 0x1
    e932:	f04f 010c 	mov.w	r1, #12	; 0xc
    e936:	f7ff fe4b 	bl	e5d0 <_ZN16ServosNumeriques11setLedStateEhh>
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOB, GPIO_Pin_6, GPIOB, GPIO_Pin_7);
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM1, GPIOA, GPIO_Pin_8, GPIOA, GPIO_Pin_9);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOD, GPIO_Pin_12, GPIOD, GPIO_Pin_13);
    e93a:	f04f 0004 	mov.w	r0, #4	; 0x4
    e93e:	f000 f8d7 	bl	eaf0 <_Znwj>
    e942:	4603      	mov	r3, r0
    e944:	607b      	str	r3, [r7, #4]
    e946:	687b      	ldr	r3, [r7, #4]
    e948:	2b00      	cmp	r3, #0
    e94a:	d017      	beq.n	e97c <main+0xb8>
    e94c:	4b61      	ldr	r3, [pc, #388]	(ead4 <main+0x210>)
    e94e:	9300      	str	r3, [sp, #0]
    e950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e954:	9301      	str	r3, [sp, #4]
    e956:	f04f 0300 	mov.w	r3, #0	; 0x0
    e95a:	9302      	str	r3, [sp, #8]
    e95c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e960:	9303      	str	r3, [sp, #12]
    e962:	f04f 0300 	mov.w	r3, #0	; 0x0
    e966:	9304      	str	r3, [sp, #16]
    e968:	6878      	ldr	r0, [r7, #4]
    e96a:	495b      	ldr	r1, [pc, #364]	(ead8 <main+0x214>)
    e96c:	4a59      	ldr	r2, [pc, #356]	(ead4 <main+0x210>)
    e96e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e972:	f7fe fa67 	bl	ce44 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	60bb      	str	r3, [r7, #8]
    e97a:	e001      	b.n	e980 <main+0xbc>
    e97c:	687b      	ldr	r3, [r7, #4]
    e97e:	60bb      	str	r3, [r7, #8]
    e980:	68bb      	ldr	r3, [r7, #8]
    e982:	65fb      	str	r3, [r7, #92]
        GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);
    e984:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    e988:	f04f 0101 	mov.w	r1, #1	; 0x1
    e98c:	f7f3 f880 	bl	1a90 <GPIO_PinRemapConfig>
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    e990:	f04f 0004 	mov.w	r0, #4	; 0x4
    e994:	f000 f8ac 	bl	eaf0 <_Znwj>
    e998:	4603      	mov	r3, r0
    e99a:	60fb      	str	r3, [r7, #12]
    e99c:	68fb      	ldr	r3, [r7, #12]
    e99e:	2b00      	cmp	r3, #0
    e9a0:	d017      	beq.n	e9d2 <main+0x10e>
    e9a2:	4b4e      	ldr	r3, [pc, #312]	(eadc <main+0x218>)
    e9a4:	9300      	str	r3, [sp, #0]
    e9a6:	f04f 0380 	mov.w	r3, #128	; 0x80
    e9aa:	9301      	str	r3, [sp, #4]
    e9ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9b0:	9302      	str	r3, [sp, #8]
    e9b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9b6:	9303      	str	r3, [sp, #12]
    e9b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9bc:	9304      	str	r3, [sp, #16]
    e9be:	68f8      	ldr	r0, [r7, #12]
    e9c0:	4947      	ldr	r1, [pc, #284]	(eae0 <main+0x21c>)
    e9c2:	4a46      	ldr	r2, [pc, #280]	(eadc <main+0x218>)
    e9c4:	f04f 0340 	mov.w	r3, #64	; 0x40
    e9c8:	f7fe fa3c 	bl	ce44 <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e9cc:	68fb      	ldr	r3, [r7, #12]
    e9ce:	613b      	str	r3, [r7, #16]
    e9d0:	e001      	b.n	e9d6 <main+0x112>
    e9d2:	68fb      	ldr	r3, [r7, #12]
    e9d4:	613b      	str	r3, [r7, #16]
    e9d6:	693b      	ldr	r3, [r7, #16]
    e9d8:	663b      	str	r3, [r7, #96]


// Pour la v1 :
//    QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_1);
 //   QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    Odometrie* odometrie = new Odometrie(rcg, rcd);
    e9da:	f04f 0078 	mov.w	r0, #120	; 0x78
    e9de:	f000 f887 	bl	eaf0 <_Znwj>
    e9e2:	4603      	mov	r3, r0
    e9e4:	617b      	str	r3, [r7, #20]
    e9e6:	697b      	ldr	r3, [r7, #20]
    e9e8:	2b00      	cmp	r3, #0
    e9ea:	d007      	beq.n	e9fc <main+0x138>
    e9ec:	6978      	ldr	r0, [r7, #20]
    e9ee:	6e39      	ldr	r1, [r7, #96]
    e9f0:	6dfa      	ldr	r2, [r7, #92]
    e9f2:	f7fb fdfd 	bl	a5f0 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>
    e9f6:	697b      	ldr	r3, [r7, #20]
    e9f8:	61bb      	str	r3, [r7, #24]
    e9fa:	e001      	b.n	ea00 <main+0x13c>
    e9fc:	697b      	ldr	r3, [r7, #20]
    e9fe:	61bb      	str	r3, [r7, #24]
    ea00:	69bb      	ldr	r3, [r7, #24]
    ea02:	667b      	str	r3, [r7, #100]
    Position pos(200,1850, isBlue());//1500, isBlue());
    ea04:	f7ff ff4c 	bl	e8a0 <_Z6isBluev>
    ea08:	4603      	mov	r3, r0
    ea0a:	469c      	mov	ip, r3
    ea0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    ea10:	4618      	mov	r0, r3
    ea12:	4934      	ldr	r1, [pc, #208]	(eae4 <main+0x220>)
    ea14:	4a34      	ldr	r2, [pc, #208]	(eae8 <main+0x224>)
    ea16:	4663      	mov	r3, ip
    ea18:	f000 f9d0 	bl	edbc <_ZN8PositionC1Effb>
    PositionPlusAngle posPlusAngle(pos,-M_PI/2);
    ea1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
    ea20:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    ea24:	4618      	mov	r0, r3
    ea26:	4611      	mov	r1, r2
    ea28:	4a30      	ldr	r2, [pc, #192]	(eaec <main+0x228>)
    ea2a:	f000 fbbb 	bl	f1a4 <_ZN17PositionPlusAngleC1ERK8Positionf>
    if (!isBlue())
    ea2e:	f7ff ff37 	bl	e8a0 <_Z6isBluev>
    ea32:	4603      	mov	r3, r0
    ea34:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ea38:	b2db      	uxtb	r3, r3
    ea3a:	2b00      	cmp	r3, #0
    ea3c:	d010      	beq.n	ea60 <main+0x19c>
        posPlusAngle = PositionPlusAngle(pos,-M_PI/2);
    ea3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    ea42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    ea46:	4618      	mov	r0, r3
    ea48:	4611      	mov	r1, r2
    ea4a:	4a28      	ldr	r2, [pc, #160]	(eaec <main+0x228>)
    ea4c:	f000 fbaa 	bl	f1a4 <_ZN17PositionPlusAngleC1ERK8Positionf>
    ea50:	f107 0330 	add.w	r3, r7, #48	; 0x30
    ea54:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    ea58:	4618      	mov	r0, r3
    ea5a:	4611      	mov	r1, r2
    ea5c:	f000 fc42 	bl	f2e4 <_ZN17PositionPlusAngleaSERKS_>
    odometrie->setPos(posPlusAngle);
    ea60:	f107 0330 	add.w	r3, r7, #48	; 0x30
    ea64:	6e78      	ldr	r0, [r7, #100]
    ea66:	4619      	mov	r1, r3
    ea68:	f7fb fa82 	bl	9f70 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    StrategieV2* strat = new StrategieV2(isBlue());
    ea6c:	f7ff ff18 	bl	e8a0 <_Z6isBluev>
    ea70:	4603      	mov	r3, r0
    ea72:	61fb      	str	r3, [r7, #28]
    ea74:	f04f 0004 	mov.w	r0, #4	; 0x4
    ea78:	f000 f83a 	bl	eaf0 <_Znwj>
    ea7c:	4603      	mov	r3, r0
    ea7e:	623b      	str	r3, [r7, #32]
    ea80:	6a3b      	ldr	r3, [r7, #32]
    ea82:	2b00      	cmp	r3, #0
    ea84:	d006      	beq.n	ea94 <main+0x1d0>
    ea86:	6a38      	ldr	r0, [r7, #32]
    ea88:	69f9      	ldr	r1, [r7, #28]
    ea8a:	f007 ffcb 	bl	16a24 <_ZN11StrategieV2C1Eb>
    ea8e:	6a3b      	ldr	r3, [r7, #32]
    ea90:	627b      	str	r3, [r7, #36]
    ea92:	e001      	b.n	ea98 <main+0x1d4>
    ea94:	6a3b      	ldr	r3, [r7, #32]
    ea96:	627b      	str	r3, [r7, #36]
    ea98:	6a7b      	ldr	r3, [r7, #36]
    ea9a:	66bb      	str	r3, [r7, #104]
    Asservissement* asserv = new Asservissement(odometrie);
    ea9c:	f04f 0060 	mov.w	r0, #96	; 0x60
    eaa0:	f000 f826 	bl	eaf0 <_Znwj>
    eaa4:	4603      	mov	r3, r0
    eaa6:	62bb      	str	r3, [r7, #40]
    eaa8:	6abb      	ldr	r3, [r7, #40]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d006      	beq.n	eabc <main+0x1f8>
    eaae:	6ab8      	ldr	r0, [r7, #40]
    eab0:	6e79      	ldr	r1, [r7, #100]
    eab2:	f7f9 fa59 	bl	7f68 <_ZN14AsservissementC1EP9Odometrie>
    eab6:	6abb      	ldr	r3, [r7, #40]
    eab8:	62fb      	str	r3, [r7, #44]
    eaba:	e001      	b.n	eac0 <main+0x1fc>
    eabc:	6abb      	ldr	r3, [r7, #40]
    eabe:	62fb      	str	r3, [r7, #44]
    eac0:	6afb      	ldr	r3, [r7, #44]
    eac2:	66fb      	str	r3, [r7, #108]
    eac4:	e7fe      	b.n	eac4 <main+0x200>
    eac6:	46c0      	nop			(mov r8, r8)
    eac8:	e000ed14 	.word	0xe000ed14
    eacc:	000223a8 	.word	0x000223a8
    ead0:	40011800 	.word	0x40011800
    ead4:	40011400 	.word	0x40011400
    ead8:	40000800 	.word	0x40000800
    eadc:	40010800 	.word	0x40010800
    eae0:	40000400 	.word	0x40000400
    eae4:	43480000 	.word	0x43480000
    eae8:	44e74000 	.word	0x44e74000
    eaec:	bfc90fdb 	.word	0xbfc90fdb

0000eaf0 <_Znwj>:
static Header* nextFreeMemory;
static Header* base = NULL;
static int nbPlace = 0;
static int sizeM = 0;

void * operator new(size_t size) throw()
    eaf0:	b480      	push	{r7}
    eaf2:	b089      	sub	sp, #36
    eaf4:	af00      	add	r7, sp, #0
    eaf6:	6078      	str	r0, [r7, #4]
{
    nbPlace++;
    eaf8:	4b44      	ldr	r3, [pc, #272]	(ec0c <_Znwj+0x11c>)
    eafa:	681b      	ldr	r3, [r3, #0]
    eafc:	f103 0201 	add.w	r2, r3, #1	; 0x1
    eb00:	4b42      	ldr	r3, [pc, #264]	(ec0c <_Znwj+0x11c>)
    eb02:	601a      	str	r2, [r3, #0]
    if (base == NULL)
    eb04:	4b42      	ldr	r3, [pc, #264]	(ec10 <_Znwj+0x120>)
    eb06:	681b      	ldr	r3, [r3, #0]
    eb08:	2b00      	cmp	r3, #0
    eb0a:	d111      	bne.n	eb30 <_Znwj+0x40>
    {
        base = memory_ptr;
    eb0c:	4b41      	ldr	r3, [pc, #260]	(ec14 <_Znwj+0x124>)
    eb0e:	681a      	ldr	r2, [r3, #0]
    eb10:	4b3f      	ldr	r3, [pc, #252]	(ec10 <_Znwj+0x120>)
    eb12:	601a      	str	r2, [r3, #0]
        base->s.nextFree = memory_ptr;
    eb14:	4b3e      	ldr	r3, [pc, #248]	(ec10 <_Znwj+0x120>)
    eb16:	681a      	ldr	r2, [r3, #0]
    eb18:	4b3e      	ldr	r3, [pc, #248]	(ec14 <_Znwj+0x124>)
    eb1a:	681b      	ldr	r3, [r3, #0]
    eb1c:	6013      	str	r3, [r2, #0]
        #endif
        #ifdef STM32F10X_MD // stm h103
        base->s.size = 5000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 20kB -> 5000 unit
        #endif
        #ifdef STM32F10X_CL // stm h107
        base->s.size = 16000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 64kB -> 16000 unit
    eb1e:	4b3c      	ldr	r3, [pc, #240]	(ec10 <_Znwj+0x120>)
    eb20:	681a      	ldr	r2, [r3, #0]
    eb22:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    eb26:	6053      	str	r3, [r2, #4]
        #endif
        nextFreeMemory = memory_ptr;
    eb28:	4b3a      	ldr	r3, [pc, #232]	(ec14 <_Znwj+0x124>)
    eb2a:	681a      	ldr	r2, [r3, #0]
    eb2c:	4b3a      	ldr	r3, [pc, #232]	(ec18 <_Znwj+0x128>)
    eb2e:	601a      	str	r2, [r3, #0]

    }
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    eb30:	687b      	ldr	r3, [r7, #4]
    eb32:	f103 0307 	add.w	r3, r3, #7	; 0x7
    eb36:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    eb3a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    eb3e:	60fb      	str	r3, [r7, #12]
    sizeM += nunit;
    eb40:	4b36      	ldr	r3, [pc, #216]	(ec1c <_Znwj+0x12c>)
    eb42:	681b      	ldr	r3, [r3, #0]
    eb44:	461a      	mov	r2, r3
    eb46:	68fb      	ldr	r3, [r7, #12]
    eb48:	4413      	add	r3, r2
    eb4a:	461a      	mov	r2, r3
    eb4c:	4b33      	ldr	r3, [pc, #204]	(ec1c <_Znwj+0x12c>)
    eb4e:	601a      	str	r2, [r3, #0]
    Header *p = nextFreeMemory;
    eb50:	4b31      	ldr	r3, [pc, #196]	(ec18 <_Znwj+0x128>)
    eb52:	681b      	ldr	r3, [r3, #0]
    eb54:	613b      	str	r3, [r7, #16]
    Header  *oldP = p;
    eb56:	693b      	ldr	r3, [r7, #16]
    eb58:	617b      	str	r3, [r7, #20]
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    eb5a:	4b2f      	ldr	r3, [pc, #188]	(ec18 <_Znwj+0x128>)
    eb5c:	681b      	ldr	r3, [r3, #0]
    eb5e:	61bb      	str	r3, [r7, #24]
    {
        if (nunit <= ip->s.size )
    eb60:	69bb      	ldr	r3, [r7, #24]
    eb62:	685a      	ldr	r2, [r3, #4]
    eb64:	68fb      	ldr	r3, [r7, #12]
    eb66:	429a      	cmp	r2, r3
    eb68:	d33a      	bcc.n	ebe0 <_Znwj+0xf0>
        {
            if (nunit == ip->s.size)
    eb6a:	69bb      	ldr	r3, [r7, #24]
    eb6c:	685a      	ldr	r2, [r3, #4]
    eb6e:	68fb      	ldr	r3, [r7, #12]
    eb70:	429a      	cmp	r2, r3
    eb72:	d10e      	bne.n	eb92 <_Znwj+0xa2>
            {
                if (ip->s.nextFree != ip)
    eb74:	69bb      	ldr	r3, [r7, #24]
    eb76:	681a      	ldr	r2, [r3, #0]
    eb78:	69bb      	ldr	r3, [r7, #24]
    eb7a:	429a      	cmp	r2, r3
    eb7c:	d004      	beq.n	eb88 <_Znwj+0x98>
                {
                    nextFreeMemory = ip->s.nextFree;
    eb7e:	69bb      	ldr	r3, [r7, #24]
    eb80:	681a      	ldr	r2, [r3, #0]
    eb82:	4b25      	ldr	r3, [pc, #148]	(ec18 <_Znwj+0x128>)
    eb84:	601a      	str	r2, [r3, #0]
    eb86:	e026      	b.n	ebd6 <_Znwj+0xe6>
                }
                else
                {
                    nextFreeMemory = NULL;
    eb88:	4a23      	ldr	r2, [pc, #140]	(ec18 <_Znwj+0x128>)
    eb8a:	f04f 0300 	mov.w	r3, #0	; 0x0
    eb8e:	6013      	str	r3, [r2, #0]
    eb90:	e021      	b.n	ebd6 <_Znwj+0xe6>
                }
            }
            else
            {
                unsigned oldFreeUnit = p->s.size;
    eb92:	693b      	ldr	r3, [r7, #16]
    eb94:	685b      	ldr	r3, [r3, #4]
    eb96:	61fb      	str	r3, [r7, #28]
                p->s.size = nunit;
    eb98:	693a      	ldr	r2, [r7, #16]
    eb9a:	68fb      	ldr	r3, [r7, #12]
    eb9c:	6053      	str	r3, [r2, #4]
                oldP = p;
    eb9e:	693b      	ldr	r3, [r7, #16]
    eba0:	617b      	str	r3, [r7, #20]
                p += nunit;
    eba2:	68fb      	ldr	r3, [r7, #12]
    eba4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    eba8:	693b      	ldr	r3, [r7, #16]
    ebaa:	4413      	add	r3, r2
    ebac:	613b      	str	r3, [r7, #16]
                oldP->s.nextFree = p;
    ebae:	697a      	ldr	r2, [r7, #20]
    ebb0:	693b      	ldr	r3, [r7, #16]
    ebb2:	6013      	str	r3, [r2, #0]
                p->s.size = oldFreeUnit - nunit;
    ebb4:	69fa      	ldr	r2, [r7, #28]
    ebb6:	68fb      	ldr	r3, [r7, #12]
    ebb8:	ebc3 0202 	rsb	r2, r3, r2
    ebbc:	693b      	ldr	r3, [r7, #16]
    ebbe:	605a      	str	r2, [r3, #4]
                p->s.nextFree = p;
    ebc0:	693a      	ldr	r2, [r7, #16]
    ebc2:	693b      	ldr	r3, [r7, #16]
    ebc4:	6013      	str	r3, [r2, #0]
                if (ip == nextFreeMemory)
    ebc6:	4b14      	ldr	r3, [pc, #80]	(ec18 <_Znwj+0x128>)
    ebc8:	681a      	ldr	r2, [r3, #0]
    ebca:	69bb      	ldr	r3, [r7, #24]
    ebcc:	4293      	cmp	r3, r2
    ebce:	d102      	bne.n	ebd6 <_Znwj+0xe6>
                {
                   nextFreeMemory = p;
    ebd0:	4a11      	ldr	r2, [pc, #68]	(ec18 <_Znwj+0x128>)
    ebd2:	693b      	ldr	r3, [r7, #16]
    ebd4:	6013      	str	r3, [r2, #0]
                }
            }

            return ip+1;
    ebd6:	69bb      	ldr	r3, [r7, #24]
    ebd8:	f103 0308 	add.w	r3, r3, #8	; 0x8
    ebdc:	603b      	str	r3, [r7, #0]
    ebde:	e00d      	b.n	ebfc <_Znwj+0x10c>
        }
        if (ip==oldP)
    ebe0:	69ba      	ldr	r2, [r7, #24]
    ebe2:	697b      	ldr	r3, [r7, #20]
    ebe4:	429a      	cmp	r2, r3
    ebe6:	d103      	bne.n	ebf0 <_Znwj+0x100>
        {
            return NULL;
    ebe8:	f04f 0300 	mov.w	r3, #0	; 0x0
    ebec:	603b      	str	r3, [r7, #0]
    ebee:	e005      	b.n	ebfc <_Znwj+0x10c>
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    sizeM += nunit;
    Header *p = nextFreeMemory;
    Header  *oldP = p;
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    ebf0:	69bb      	ldr	r3, [r7, #24]
    ebf2:	613b      	str	r3, [r7, #16]
    ebf4:	69bb      	ldr	r3, [r7, #24]
    ebf6:	681b      	ldr	r3, [r3, #0]
    ebf8:	61bb      	str	r3, [r7, #24]
    ebfa:	e7b1      	b.n	eb60 <_Znwj+0x70>
    ebfc:	683b      	ldr	r3, [r7, #0]
        if (ip==oldP)
        {
            return NULL;
        }
    }
}
    ebfe:	4618      	mov	r0, r3
    ec00:	f107 0724 	add.w	r7, r7, #36	; 0x24
    ec04:	46bd      	mov	sp, r7
    ec06:	bc80      	pop	{r7}
    ec08:	4770      	bx	lr
    ec0a:	46c0      	nop			(mov r8, r8)
    ec0c:	20000598 	.word	0x20000598
    ec10:	200005a4 	.word	0x200005a4
    ec14:	2000002c 	.word	0x2000002c
    ec18:	200005a0 	.word	0x200005a0
    ec1c:	2000059c 	.word	0x2000059c

0000ec20 <_Znaj>:

void * operator new[](size_t size) throw()
    ec20:	b580      	push	{r7, lr}
    ec22:	b082      	sub	sp, #8
    ec24:	af00      	add	r7, sp, #0
    ec26:	6078      	str	r0, [r7, #4]
{
  return operator new(size);
    ec28:	6878      	ldr	r0, [r7, #4]
    ec2a:	f7ff ff61 	bl	eaf0 <_Znwj>
    ec2e:	4603      	mov	r3, r0
}
    ec30:	4618      	mov	r0, r3
    ec32:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ec36:	46bd      	mov	sp, r7
    ec38:	bd80      	pop	{r7, pc}
    ec3a:	46c0      	nop			(mov r8, r8)

0000ec3c <_ZdlPv>:

void operator delete(void * p)    throw()
    ec3c:	b480      	push	{r7}
    ec3e:	b085      	sub	sp, #20
    ec40:	af00      	add	r7, sp, #0
    ec42:	6078      	str	r0, [r7, #4]
{
    nbPlace--;
    ec44:	4b36      	ldr	r3, [pc, #216]	(ed20 <_ZdlPv+0xe4>)
    ec46:	681b      	ldr	r3, [r3, #0]
    ec48:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    ec4c:	4b34      	ldr	r3, [pc, #208]	(ed20 <_ZdlPv+0xe4>)
    ec4e:	601a      	str	r2, [r3, #0]
    Header* d = (Header*)p -1;
    ec50:	687b      	ldr	r3, [r7, #4]
    ec52:	f1a3 0308 	sub.w	r3, r3, #8	; 0x8
    ec56:	60bb      	str	r3, [r7, #8]
    sizeM -= d->s.size;
    ec58:	4b32      	ldr	r3, [pc, #200]	(ed24 <_ZdlPv+0xe8>)
    ec5a:	681b      	ldr	r3, [r3, #0]
    ec5c:	461a      	mov	r2, r3
    ec5e:	68bb      	ldr	r3, [r7, #8]
    ec60:	685b      	ldr	r3, [r3, #4]
    ec62:	ebc3 0302 	rsb	r3, r3, r2
    ec66:	461a      	mov	r2, r3
    ec68:	4b2e      	ldr	r3, [pc, #184]	(ed24 <_ZdlPv+0xe8>)
    ec6a:	601a      	str	r2, [r3, #0]
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    ec6c:	4b2e      	ldr	r3, [pc, #184]	(ed28 <_ZdlPv+0xec>)
    ec6e:	681b      	ldr	r3, [r3, #0]
    ec70:	60fb      	str	r3, [r7, #12]
    ec72:	e010      	b.n	ec96 <_ZdlPv+0x5a>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
    ec74:	68fb      	ldr	r3, [r7, #12]
    ec76:	681a      	ldr	r2, [r3, #0]
    ec78:	68fb      	ldr	r3, [r7, #12]
    ec7a:	429a      	cmp	r2, r3
    ec7c:	d808      	bhi.n	ec90 <_ZdlPv+0x54>
    ec7e:	68ba      	ldr	r2, [r7, #8]
    ec80:	68fb      	ldr	r3, [r7, #12]
    ec82:	429a      	cmp	r2, r3
    ec84:	d810      	bhi.n	eca8 <_ZdlPv+0x6c>
    ec86:	68fb      	ldr	r3, [r7, #12]
    ec88:	681a      	ldr	r2, [r3, #0]
    ec8a:	68bb      	ldr	r3, [r7, #8]
    ec8c:	429a      	cmp	r2, r3
    ec8e:	d80b      	bhi.n	eca8 <_ZdlPv+0x6c>
{
    nbPlace--;
    Header* d = (Header*)p -1;
    sizeM -= d->s.size;
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    ec90:	68fb      	ldr	r3, [r7, #12]
    ec92:	681b      	ldr	r3, [r3, #0]
    ec94:	60fb      	str	r3, [r7, #12]
    ec96:	68ba      	ldr	r2, [r7, #8]
    ec98:	68fb      	ldr	r3, [r7, #12]
    ec9a:	429a      	cmp	r2, r3
    ec9c:	d9ea      	bls.n	ec74 <_ZdlPv+0x38>
    ec9e:	68fb      	ldr	r3, [r7, #12]
    eca0:	681a      	ldr	r2, [r3, #0]
    eca2:	68bb      	ldr	r3, [r7, #8]
    eca4:	429a      	cmp	r2, r3
    eca6:	d9e5      	bls.n	ec74 <_ZdlPv+0x38>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
        break;
    }

    if ( d + d->s.size == predFree->s.nextFree ) // si le prochain vide est collé au block libéré
    eca8:	68bb      	ldr	r3, [r7, #8]
    ecaa:	685b      	ldr	r3, [r3, #4]
    ecac:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ecb0:	68bb      	ldr	r3, [r7, #8]
    ecb2:	441a      	add	r2, r3
    ecb4:	68fb      	ldr	r3, [r7, #12]
    ecb6:	681b      	ldr	r3, [r3, #0]
    ecb8:	429a      	cmp	r2, r3
    ecba:	d10d      	bne.n	ecd8 <_ZdlPv+0x9c>
    {
        d->s.size += predFree->s.nextFree->s.size;
    ecbc:	68bb      	ldr	r3, [r7, #8]
    ecbe:	685a      	ldr	r2, [r3, #4]
    ecc0:	68fb      	ldr	r3, [r7, #12]
    ecc2:	681b      	ldr	r3, [r3, #0]
    ecc4:	685b      	ldr	r3, [r3, #4]
    ecc6:	441a      	add	r2, r3
    ecc8:	68bb      	ldr	r3, [r7, #8]
    ecca:	605a      	str	r2, [r3, #4]
        d->s.nextFree = predFree->s.nextFree->s.nextFree;
    eccc:	68fb      	ldr	r3, [r7, #12]
    ecce:	681b      	ldr	r3, [r3, #0]
    ecd0:	681a      	ldr	r2, [r3, #0]
    ecd2:	68bb      	ldr	r3, [r7, #8]
    ecd4:	601a      	str	r2, [r3, #0]
    ecd6:	e003      	b.n	ece0 <_ZdlPv+0xa4>
    }
    else
    {
        d->s.nextFree = predFree->s.nextFree;
    ecd8:	68fb      	ldr	r3, [r7, #12]
    ecda:	681a      	ldr	r2, [r3, #0]
    ecdc:	68bb      	ldr	r3, [r7, #8]
    ecde:	601a      	str	r2, [r3, #0]
    }
    if (predFree+predFree->s.size == d)
    ece0:	68fb      	ldr	r3, [r7, #12]
    ece2:	685b      	ldr	r3, [r3, #4]
    ece4:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    ece8:	68fb      	ldr	r3, [r7, #12]
    ecea:	441a      	add	r2, r3
    ecec:	68bb      	ldr	r3, [r7, #8]
    ecee:	429a      	cmp	r2, r3
    ecf0:	d10b      	bne.n	ed0a <_ZdlPv+0xce>
    {
        predFree->s.nextFree = d->s.nextFree;
    ecf2:	68bb      	ldr	r3, [r7, #8]
    ecf4:	681a      	ldr	r2, [r3, #0]
    ecf6:	68fb      	ldr	r3, [r7, #12]
    ecf8:	601a      	str	r2, [r3, #0]
        predFree->s.size += d->s.size;
    ecfa:	68fb      	ldr	r3, [r7, #12]
    ecfc:	685a      	ldr	r2, [r3, #4]
    ecfe:	68bb      	ldr	r3, [r7, #8]
    ed00:	685b      	ldr	r3, [r3, #4]
    ed02:	441a      	add	r2, r3
    ed04:	68fb      	ldr	r3, [r7, #12]
    ed06:	605a      	str	r2, [r3, #4]
    ed08:	e002      	b.n	ed10 <_ZdlPv+0xd4>
    }
    else
    {
        predFree->s.nextFree = d;
    ed0a:	68fa      	ldr	r2, [r7, #12]
    ed0c:	68bb      	ldr	r3, [r7, #8]
    ed0e:	6013      	str	r3, [r2, #0]
    }
    nextFreeMemory = predFree;
    ed10:	4a05      	ldr	r2, [pc, #20]	(ed28 <_ZdlPv+0xec>)
    ed12:	68fb      	ldr	r3, [r7, #12]
    ed14:	6013      	str	r3, [r2, #0]

  /*  d--; // d est maintenant le Header de la zone mémoire contenant l'objet que l'on delete
    d->s.nextFree = nextFreeMemory; // On indique que la prochaîne mémoire vide sera la première mémoire vide au moment où on a lancé le delete
    nextFreeMemory = d;
    */
}
    ed16:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ed1a:	46bd      	mov	sp, r7
    ed1c:	bc80      	pop	{r7}
    ed1e:	4770      	bx	lr
    ed20:	20000598 	.word	0x20000598
    ed24:	2000059c 	.word	0x2000059c
    ed28:	200005a0 	.word	0x200005a0

0000ed2c <_ZdaPv>:

void operator delete[](void * p)    throw()
    ed2c:	b580      	push	{r7, lr}
    ed2e:	b082      	sub	sp, #8
    ed30:	af00      	add	r7, sp, #0
    ed32:	6078      	str	r0, [r7, #4]
{
    return operator delete(p);
    ed34:	6878      	ldr	r0, [r7, #4]
    ed36:	f7ff ff81 	bl	ec3c <_ZdlPv>
}
    ed3a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ed3e:	46bd      	mov	sp, r7
    ed40:	bd80      	pop	{r7, pc}
    ed42:	46c0      	nop			(mov r8, r8)

0000ed44 <_ZN8PositionC2Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    ed44:	b480      	push	{r7}
    ed46:	b083      	sub	sp, #12
    ed48:	af00      	add	r7, sp, #0
    ed4a:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    ed4c:	687a      	ldr	r2, [r7, #4]
    ed4e:	4b06      	ldr	r3, [pc, #24]	(ed68 <_ZN8PositionC2Ev+0x24>)
    ed50:	6013      	str	r3, [r2, #0]
    ed52:	687a      	ldr	r2, [r7, #4]
    ed54:	4b04      	ldr	r3, [pc, #16]	(ed68 <_ZN8PositionC2Ev+0x24>)
    ed56:	6053      	str	r3, [r2, #4]
{
}
    ed58:	687b      	ldr	r3, [r7, #4]
    ed5a:	4618      	mov	r0, r3
    ed5c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ed60:	46bd      	mov	sp, r7
    ed62:	bc80      	pop	{r7}
    ed64:	4770      	bx	lr
    ed66:	46c0      	nop			(mov r8, r8)
    ed68:	00000000 	.word	0x00000000

0000ed6c <_ZN8PositionC1Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    ed6c:	b480      	push	{r7}
    ed6e:	b083      	sub	sp, #12
    ed70:	af00      	add	r7, sp, #0
    ed72:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    ed74:	687a      	ldr	r2, [r7, #4]
    ed76:	4b06      	ldr	r3, [pc, #24]	(ed90 <_ZN8PositionC1Ev+0x24>)
    ed78:	6013      	str	r3, [r2, #0]
    ed7a:	687a      	ldr	r2, [r7, #4]
    ed7c:	4b04      	ldr	r3, [pc, #16]	(ed90 <_ZN8PositionC1Ev+0x24>)
    ed7e:	6053      	str	r3, [r2, #4]
{
}
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	4618      	mov	r0, r3
    ed84:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ed88:	46bd      	mov	sp, r7
    ed8a:	bc80      	pop	{r7}
    ed8c:	4770      	bx	lr
    ed8e:	46c0      	nop			(mov r8, r8)
    ed90:	00000000 	.word	0x00000000

0000ed94 <_ZN8PositionC2Effb>:

Position::Position(Distance X, Distance Y, bool isBlue)
    ed94:	b480      	push	{r7}
    ed96:	b085      	sub	sp, #20
    ed98:	af00      	add	r7, sp, #0
    ed9a:	60f8      	str	r0, [r7, #12]
    ed9c:	60b9      	str	r1, [r7, #8]
    ed9e:	607a      	str	r2, [r7, #4]
    eda0:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    eda2:	68fa      	ldr	r2, [r7, #12]
    eda4:	68bb      	ldr	r3, [r7, #8]
    eda6:	6013      	str	r3, [r2, #0]
    eda8:	68fa      	ldr	r2, [r7, #12]
    edaa:	687b      	ldr	r3, [r7, #4]
    edac:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    edae:	68fb      	ldr	r3, [r7, #12]
    edb0:	4618      	mov	r0, r3
    edb2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    edb6:	46bd      	mov	sp, r7
    edb8:	bc80      	pop	{r7}
    edba:	4770      	bx	lr

0000edbc <_ZN8PositionC1Effb>:
Position::Position()
    : x(0), y(0)
{
}

Position::Position(Distance X, Distance Y, bool isBlue)
    edbc:	b480      	push	{r7}
    edbe:	b085      	sub	sp, #20
    edc0:	af00      	add	r7, sp, #0
    edc2:	60f8      	str	r0, [r7, #12]
    edc4:	60b9      	str	r1, [r7, #8]
    edc6:	607a      	str	r2, [r7, #4]
    edc8:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    edca:	68fa      	ldr	r2, [r7, #12]
    edcc:	68bb      	ldr	r3, [r7, #8]
    edce:	6013      	str	r3, [r2, #0]
    edd0:	68fa      	ldr	r2, [r7, #12]
    edd2:	687b      	ldr	r3, [r7, #4]
    edd4:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    edd6:	68fb      	ldr	r3, [r7, #12]
    edd8:	4618      	mov	r0, r3
    edda:	f107 0714 	add.w	r7, r7, #20	; 0x14
    edde:	46bd      	mov	sp, r7
    ede0:	bc80      	pop	{r7}
    ede2:	4770      	bx	lr

0000ede4 <_ZNK8Position4getXEv>:

Distance Position::getX() const
    ede4:	b480      	push	{r7}
    ede6:	b083      	sub	sp, #12
    ede8:	af00      	add	r7, sp, #0
    edea:	6078      	str	r0, [r7, #4]
{
    return x;
    edec:	687b      	ldr	r3, [r7, #4]
    edee:	681b      	ldr	r3, [r3, #0]
}
    edf0:	4618      	mov	r0, r3
    edf2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    edf6:	46bd      	mov	sp, r7
    edf8:	bc80      	pop	{r7}
    edfa:	4770      	bx	lr

0000edfc <_ZNK8Position4getYEv>:

Distance Position::getY() const
    edfc:	b480      	push	{r7}
    edfe:	b083      	sub	sp, #12
    ee00:	af00      	add	r7, sp, #0
    ee02:	6078      	str	r0, [r7, #4]
{
    return y;
    ee04:	687b      	ldr	r3, [r7, #4]
    ee06:	685b      	ldr	r3, [r3, #4]
}
    ee08:	4618      	mov	r0, r3
    ee0a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee0e:	46bd      	mov	sp, r7
    ee10:	bc80      	pop	{r7}
    ee12:	4770      	bx	lr

0000ee14 <_ZN8Position4setXEf>:

void Position::setX(Distance X)
    ee14:	b480      	push	{r7}
    ee16:	b083      	sub	sp, #12
    ee18:	af00      	add	r7, sp, #0
    ee1a:	6078      	str	r0, [r7, #4]
    ee1c:	6039      	str	r1, [r7, #0]
{
    x = X;
    ee1e:	687a      	ldr	r2, [r7, #4]
    ee20:	683b      	ldr	r3, [r7, #0]
    ee22:	6013      	str	r3, [r2, #0]
}
    ee24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee28:	46bd      	mov	sp, r7
    ee2a:	bc80      	pop	{r7}
    ee2c:	4770      	bx	lr
    ee2e:	46c0      	nop			(mov r8, r8)

0000ee30 <_ZN8Position4setYEf>:

void Position::setY(Distance Y)
    ee30:	b480      	push	{r7}
    ee32:	b083      	sub	sp, #12
    ee34:	af00      	add	r7, sp, #0
    ee36:	6078      	str	r0, [r7, #4]
    ee38:	6039      	str	r1, [r7, #0]
{
    y = Y;
    ee3a:	687a      	ldr	r2, [r7, #4]
    ee3c:	683b      	ldr	r3, [r7, #0]
    ee3e:	6053      	str	r3, [r2, #4]
}
    ee40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee44:	46bd      	mov	sp, r7
    ee46:	bc80      	pop	{r7}
    ee48:	4770      	bx	lr
    ee4a:	46c0      	nop			(mov r8, r8)

0000ee4c <_ZNK8PositionplERKS_>:

Position Position::operator+(const Position &position) const
    ee4c:	b5b0      	push	{r4, r5, r7, lr}
    ee4e:	b084      	sub	sp, #16
    ee50:	af00      	add	r7, sp, #0
    ee52:	4604      	mov	r4, r0
    ee54:	6079      	str	r1, [r7, #4]
    ee56:	603a      	str	r2, [r7, #0]
{
    Position resultat(x+position.x,y+position.y);
    ee58:	687b      	ldr	r3, [r7, #4]
    ee5a:	681a      	ldr	r2, [r3, #0]
    ee5c:	683b      	ldr	r3, [r7, #0]
    ee5e:	681b      	ldr	r3, [r3, #0]
    ee60:	4610      	mov	r0, r2
    ee62:	4619      	mov	r1, r3
    ee64:	f00c f922 	bl	1b0ac <__addsf3>
    ee68:	4603      	mov	r3, r0
    ee6a:	461d      	mov	r5, r3
    ee6c:	687b      	ldr	r3, [r7, #4]
    ee6e:	685a      	ldr	r2, [r3, #4]
    ee70:	683b      	ldr	r3, [r7, #0]
    ee72:	685b      	ldr	r3, [r3, #4]
    ee74:	4610      	mov	r0, r2
    ee76:	4619      	mov	r1, r3
    ee78:	f00c f918 	bl	1b0ac <__addsf3>
    ee7c:	4603      	mov	r3, r0
    ee7e:	4620      	mov	r0, r4
    ee80:	4629      	mov	r1, r5
    ee82:	461a      	mov	r2, r3
    ee84:	f04f 0301 	mov.w	r3, #1	; 0x1
    ee88:	f7ff ff98 	bl	edbc <_ZN8PositionC1Effb>
    return resultat;
}
    ee8c:	4620      	mov	r0, r4
    ee8e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ee92:	46bd      	mov	sp, r7
    ee94:	bdb0      	pop	{r4, r5, r7, pc}
    ee96:	46c0      	nop			(mov r8, r8)

0000ee98 <_ZNK8PositionmiERKS_>:

Position Position::operator-(const Position &position) const
    ee98:	b5b0      	push	{r4, r5, r7, lr}
    ee9a:	b084      	sub	sp, #16
    ee9c:	af00      	add	r7, sp, #0
    ee9e:	4604      	mov	r4, r0
    eea0:	6079      	str	r1, [r7, #4]
    eea2:	603a      	str	r2, [r7, #0]
{
    Position resultat(x-position.x,y-position.y);
    eea4:	687b      	ldr	r3, [r7, #4]
    eea6:	681a      	ldr	r2, [r3, #0]
    eea8:	683b      	ldr	r3, [r7, #0]
    eeaa:	681b      	ldr	r3, [r3, #0]
    eeac:	4610      	mov	r0, r2
    eeae:	4619      	mov	r1, r3
    eeb0:	f00c f8fa 	bl	1b0a8 <__aeabi_fsub>
    eeb4:	4603      	mov	r3, r0
    eeb6:	461d      	mov	r5, r3
    eeb8:	687b      	ldr	r3, [r7, #4]
    eeba:	685a      	ldr	r2, [r3, #4]
    eebc:	683b      	ldr	r3, [r7, #0]
    eebe:	685b      	ldr	r3, [r3, #4]
    eec0:	4610      	mov	r0, r2
    eec2:	4619      	mov	r1, r3
    eec4:	f00c f8f0 	bl	1b0a8 <__aeabi_fsub>
    eec8:	4603      	mov	r3, r0
    eeca:	4620      	mov	r0, r4
    eecc:	4629      	mov	r1, r5
    eece:	461a      	mov	r2, r3
    eed0:	f04f 0301 	mov.w	r3, #1	; 0x1
    eed4:	f7ff ff72 	bl	edbc <_ZN8PositionC1Effb>
    return resultat;
}
    eed8:	4620      	mov	r0, r4
    eeda:	f107 0710 	add.w	r7, r7, #16	; 0x10
    eede:	46bd      	mov	sp, r7
    eee0:	bdb0      	pop	{r4, r5, r7, pc}
    eee2:	46c0      	nop			(mov r8, r8)

0000eee4 <_ZN8PositionaSES_>:

void Position::operator=(Position position)
    eee4:	b480      	push	{r7}
    eee6:	b085      	sub	sp, #20
    eee8:	af00      	add	r7, sp, #0
    eeea:	60f8      	str	r0, [r7, #12]
    eeec:	f107 0304 	add.w	r3, r7, #4	; 0x4
    eef0:	e883 0006 	stmia.w	r3, {r1, r2}
{

    x = position.x;
    eef4:	687a      	ldr	r2, [r7, #4]
    eef6:	68fb      	ldr	r3, [r7, #12]
    eef8:	601a      	str	r2, [r3, #0]
    y = position.y;
    eefa:	68ba      	ldr	r2, [r7, #8]
    eefc:	68fb      	ldr	r3, [r7, #12]
    eefe:	605a      	str	r2, [r3, #4]

}
    ef00:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ef04:	46bd      	mov	sp, r7
    ef06:	bc80      	pop	{r7}
    ef08:	4770      	bx	lr
    ef0a:	46c0      	nop			(mov r8, r8)

0000ef0c <_ZN8PositionpLERKS_>:

Position Position::operator+=(const Position &position)
    ef0c:	b590      	push	{r4, r7, lr}
    ef0e:	b083      	sub	sp, #12
    ef10:	af00      	add	r7, sp, #0
    ef12:	4604      	mov	r4, r0
    ef14:	6079      	str	r1, [r7, #4]
    ef16:	603a      	str	r2, [r7, #0]
{
    this->x+=position.x;
    ef18:	687b      	ldr	r3, [r7, #4]
    ef1a:	681a      	ldr	r2, [r3, #0]
    ef1c:	683b      	ldr	r3, [r7, #0]
    ef1e:	681b      	ldr	r3, [r3, #0]
    ef20:	4610      	mov	r0, r2
    ef22:	4619      	mov	r1, r3
    ef24:	f00c f8c2 	bl	1b0ac <__addsf3>
    ef28:	4603      	mov	r3, r0
    ef2a:	461a      	mov	r2, r3
    ef2c:	687b      	ldr	r3, [r7, #4]
    ef2e:	601a      	str	r2, [r3, #0]
    this->y+=position.y;
    ef30:	687b      	ldr	r3, [r7, #4]
    ef32:	685a      	ldr	r2, [r3, #4]
    ef34:	683b      	ldr	r3, [r7, #0]
    ef36:	685b      	ldr	r3, [r3, #4]
    ef38:	4610      	mov	r0, r2
    ef3a:	4619      	mov	r1, r3
    ef3c:	f00c f8b6 	bl	1b0ac <__addsf3>
    ef40:	4603      	mov	r3, r0
    ef42:	461a      	mov	r2, r3
    ef44:	687b      	ldr	r3, [r7, #4]
    ef46:	605a      	str	r2, [r3, #4]

    return *this;
    ef48:	687b      	ldr	r3, [r7, #4]
    ef4a:	4620      	mov	r0, r4
    ef4c:	4619      	mov	r1, r3
    ef4e:	f04f 0208 	mov.w	r2, #8	; 0x8
    ef52:	f011 ff3d 	bl	20dd0 <memmove>
}
    ef56:	4620      	mov	r0, r4
    ef58:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ef5c:	46bd      	mov	sp, r7
    ef5e:	bd90      	pop	{r4, r7, pc}

0000ef60 <_ZN8PositionmIERKS_>:

Position Position::operator-=(const Position &position)
    ef60:	b590      	push	{r4, r7, lr}
    ef62:	b083      	sub	sp, #12
    ef64:	af00      	add	r7, sp, #0
    ef66:	4604      	mov	r4, r0
    ef68:	6079      	str	r1, [r7, #4]
    ef6a:	603a      	str	r2, [r7, #0]
{
    this->x-=position.x;
    ef6c:	687b      	ldr	r3, [r7, #4]
    ef6e:	681a      	ldr	r2, [r3, #0]
    ef70:	683b      	ldr	r3, [r7, #0]
    ef72:	681b      	ldr	r3, [r3, #0]
    ef74:	4610      	mov	r0, r2
    ef76:	4619      	mov	r1, r3
    ef78:	f00c f896 	bl	1b0a8 <__aeabi_fsub>
    ef7c:	4603      	mov	r3, r0
    ef7e:	461a      	mov	r2, r3
    ef80:	687b      	ldr	r3, [r7, #4]
    ef82:	601a      	str	r2, [r3, #0]
    this->y-=position.y;
    ef84:	687b      	ldr	r3, [r7, #4]
    ef86:	685a      	ldr	r2, [r3, #4]
    ef88:	683b      	ldr	r3, [r7, #0]
    ef8a:	685b      	ldr	r3, [r3, #4]
    ef8c:	4610      	mov	r0, r2
    ef8e:	4619      	mov	r1, r3
    ef90:	f00c f88a 	bl	1b0a8 <__aeabi_fsub>
    ef94:	4603      	mov	r3, r0
    ef96:	461a      	mov	r2, r3
    ef98:	687b      	ldr	r3, [r7, #4]
    ef9a:	605a      	str	r2, [r3, #4]

    return *this;
    ef9c:	687b      	ldr	r3, [r7, #4]
    ef9e:	4620      	mov	r0, r4
    efa0:	4619      	mov	r1, r3
    efa2:	f04f 0208 	mov.w	r2, #8	; 0x8
    efa6:	f011 ff13 	bl	20dd0 <memmove>
}
    efaa:	4620      	mov	r0, r4
    efac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    efb0:	46bd      	mov	sp, r7
    efb2:	bd90      	pop	{r4, r7, pc}

0000efb4 <_ZNK8PositioneqERKS_>:
bool Position::presqueEgales(const Position &p) const
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
}

bool Position::operator==(const Position &p) const
    efb4:	b580      	push	{r7, lr}
    efb6:	b084      	sub	sp, #16
    efb8:	af00      	add	r7, sp, #0
    efba:	60f8      	str	r0, [r7, #12]
    efbc:	60b9      	str	r1, [r7, #8]
{
    return (x == p.x && y == p.y);
    efbe:	68fb      	ldr	r3, [r7, #12]
    efc0:	681a      	ldr	r2, [r3, #0]
    efc2:	68bb      	ldr	r3, [r7, #8]
    efc4:	6819      	ldr	r1, [r3, #0]
    efc6:	f04f 0300 	mov.w	r3, #0	; 0x0
    efca:	70fb      	strb	r3, [r7, #3]
    efcc:	4610      	mov	r0, r2
    efce:	f00c fb07 	bl	1b5e0 <__aeabi_fcmpeq>
    efd2:	4603      	mov	r3, r0
    efd4:	2b00      	cmp	r3, #0
    efd6:	d002      	beq.n	efde <_ZNK8PositioneqERKS_+0x2a>
    efd8:	f04f 0301 	mov.w	r3, #1	; 0x1
    efdc:	70fb      	strb	r3, [r7, #3]
    efde:	78fb      	ldrb	r3, [r7, #3]
    efe0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    efe4:	b2db      	uxtb	r3, r3
    efe6:	2b00      	cmp	r3, #0
    efe8:	d119      	bne.n	f01e <_ZNK8PositioneqERKS_+0x6a>
    efea:	68fb      	ldr	r3, [r7, #12]
    efec:	685a      	ldr	r2, [r3, #4]
    efee:	68bb      	ldr	r3, [r7, #8]
    eff0:	6859      	ldr	r1, [r3, #4]
    eff2:	f04f 0300 	mov.w	r3, #0	; 0x0
    eff6:	70bb      	strb	r3, [r7, #2]
    eff8:	4610      	mov	r0, r2
    effa:	f00c faf1 	bl	1b5e0 <__aeabi_fcmpeq>
    effe:	4603      	mov	r3, r0
    f000:	2b00      	cmp	r3, #0
    f002:	d002      	beq.n	f00a <_ZNK8PositioneqERKS_+0x56>
    f004:	f04f 0301 	mov.w	r3, #1	; 0x1
    f008:	70bb      	strb	r3, [r7, #2]
    f00a:	78bb      	ldrb	r3, [r7, #2]
    f00c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f010:	b2db      	uxtb	r3, r3
    f012:	2b00      	cmp	r3, #0
    f014:	d103      	bne.n	f01e <_ZNK8PositioneqERKS_+0x6a>
    f016:	f04f 0301 	mov.w	r3, #1	; 0x1
    f01a:	607b      	str	r3, [r7, #4]
    f01c:	e002      	b.n	f024 <_ZNK8PositioneqERKS_+0x70>
    f01e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f022:	607b      	str	r3, [r7, #4]
    f024:	687b      	ldr	r3, [r7, #4]
}
    f026:	4618      	mov	r0, r3
    f028:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f02c:	46bd      	mov	sp, r7
    f02e:	bd80      	pop	{r7, pc}

0000f030 <_ZN8PositionmLEf>:

bool Position::operator*=(float val)
    f030:	b580      	push	{r7, lr}
    f032:	b082      	sub	sp, #8
    f034:	af00      	add	r7, sp, #0
    f036:	6078      	str	r0, [r7, #4]
    f038:	6039      	str	r1, [r7, #0]
{
    this->x = this->x*val;
    f03a:	687b      	ldr	r3, [r7, #4]
    f03c:	681b      	ldr	r3, [r3, #0]
    f03e:	4618      	mov	r0, r3
    f040:	6839      	ldr	r1, [r7, #0]
    f042:	f00c f93b 	bl	1b2bc <__aeabi_fmul>
    f046:	4603      	mov	r3, r0
    f048:	461a      	mov	r2, r3
    f04a:	687b      	ldr	r3, [r7, #4]
    f04c:	601a      	str	r2, [r3, #0]
    this->y = this->y*val;
    f04e:	687b      	ldr	r3, [r7, #4]
    f050:	685b      	ldr	r3, [r3, #4]
    f052:	4618      	mov	r0, r3
    f054:	6839      	ldr	r1, [r7, #0]
    f056:	f00c f931 	bl	1b2bc <__aeabi_fmul>
    f05a:	4603      	mov	r3, r0
    f05c:	461a      	mov	r2, r3
    f05e:	687b      	ldr	r3, [r7, #4]
    f060:	605a      	str	r2, [r3, #4]

    return true;
    f062:	f04f 0301 	mov.w	r3, #1	; 0x1
}
    f066:	4618      	mov	r0, r3
    f068:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f06c:	46bd      	mov	sp, r7
    f06e:	bd80      	pop	{r7, pc}

0000f070 <_ZNK8Position8getAngleEv>:
Distance Position::getNorme() const
{
    return Distance(sqrt(x*x+y*y));
}

Angle Position::getAngle() const
    f070:	b5b0      	push	{r4, r5, r7, lr}
    f072:	b082      	sub	sp, #8
    f074:	af00      	add	r7, sp, #0
    f076:	6078      	str	r0, [r7, #4]
{
	return atan2(y,x);
    f078:	687b      	ldr	r3, [r7, #4]
    f07a:	685b      	ldr	r3, [r3, #4]
    f07c:	4618      	mov	r0, r3
    f07e:	f00b fcab 	bl	1a9d8 <__aeabi_f2d>
    f082:	4604      	mov	r4, r0
    f084:	460d      	mov	r5, r1
    f086:	687b      	ldr	r3, [r7, #4]
    f088:	681b      	ldr	r3, [r3, #0]
    f08a:	4618      	mov	r0, r3
    f08c:	f00b fca4 	bl	1a9d8 <__aeabi_f2d>
    f090:	4602      	mov	r2, r0
    f092:	460b      	mov	r3, r1
    f094:	4620      	mov	r0, r4
    f096:	4629      	mov	r1, r5
    f098:	f00f fdd4 	bl	1ec44 <atan2>
    f09c:	4602      	mov	r2, r0
    f09e:	460b      	mov	r3, r1
    f0a0:	4610      	mov	r0, r2
    f0a2:	4619      	mov	r1, r3
    f0a4:	f00b ffac 	bl	1b000 <__aeabi_d2f>
    f0a8:	4603      	mov	r3, r0
}
    f0aa:	4618      	mov	r0, r3
    f0ac:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f0b0:	46bd      	mov	sp, r7
    f0b2:	bdb0      	pop	{r4, r5, r7, pc}

0000f0b4 <_ZNK8Position8getNormeEv>:
    this->y = this->y*val;

    return true;
}

Distance Position::getNorme() const
    f0b4:	b590      	push	{r4, r7, lr}
    f0b6:	b083      	sub	sp, #12
    f0b8:	af00      	add	r7, sp, #0
    f0ba:	6078      	str	r0, [r7, #4]
{
    return Distance(sqrt(x*x+y*y));
    f0bc:	687b      	ldr	r3, [r7, #4]
    f0be:	681a      	ldr	r2, [r3, #0]
    f0c0:	687b      	ldr	r3, [r7, #4]
    f0c2:	681b      	ldr	r3, [r3, #0]
    f0c4:	4610      	mov	r0, r2
    f0c6:	4619      	mov	r1, r3
    f0c8:	f00c f8f8 	bl	1b2bc <__aeabi_fmul>
    f0cc:	4603      	mov	r3, r0
    f0ce:	461c      	mov	r4, r3
    f0d0:	687b      	ldr	r3, [r7, #4]
    f0d2:	685a      	ldr	r2, [r3, #4]
    f0d4:	687b      	ldr	r3, [r7, #4]
    f0d6:	685b      	ldr	r3, [r3, #4]
    f0d8:	4610      	mov	r0, r2
    f0da:	4619      	mov	r1, r3
    f0dc:	f00c f8ee 	bl	1b2bc <__aeabi_fmul>
    f0e0:	4603      	mov	r3, r0
    f0e2:	4620      	mov	r0, r4
    f0e4:	4619      	mov	r1, r3
    f0e6:	f00b ffe1 	bl	1b0ac <__addsf3>
    f0ea:	4603      	mov	r3, r0
    f0ec:	4618      	mov	r0, r3
    f0ee:	f00b fc73 	bl	1a9d8 <__aeabi_f2d>
    f0f2:	4602      	mov	r2, r0
    f0f4:	460b      	mov	r3, r1
    f0f6:	4610      	mov	r0, r2
    f0f8:	4619      	mov	r1, r3
    f0fa:	f00f fda9 	bl	1ec50 <sqrt>
    f0fe:	4602      	mov	r2, r0
    f100:	460b      	mov	r3, r1
    f102:	4610      	mov	r0, r2
    f104:	4619      	mov	r1, r3
    f106:	f00b ff7b 	bl	1b000 <__aeabi_d2f>
    f10a:	4603      	mov	r3, r0
}
    f10c:	4618      	mov	r0, r3
    f10e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f112:	46bd      	mov	sp, r7
    f114:	bd90      	pop	{r4, r7, pc}
    f116:	46c0      	nop			(mov r8, r8)

0000f118 <_ZNK8Position13presqueEgalesERKS_>:
    this->y-=position.y;

    return *this;
}

bool Position::presqueEgales(const Position &p) const
    f118:	b580      	push	{r7, lr}
    f11a:	b084      	sub	sp, #16
    f11c:	af00      	add	r7, sp, #0
    f11e:	60f8      	str	r0, [r7, #12]
    f120:	60b9      	str	r1, [r7, #8]
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
    f122:	68fb      	ldr	r3, [r7, #12]
    f124:	681a      	ldr	r2, [r3, #0]
    f126:	68bb      	ldr	r3, [r7, #8]
    f128:	681b      	ldr	r3, [r3, #0]
    f12a:	4610      	mov	r0, r2
    f12c:	4619      	mov	r1, r3
    f12e:	f7fb fec3 	bl	aeb8 <_Z21distancePresqueEgalesff>
    f132:	4603      	mov	r3, r0
    f134:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f138:	b2db      	uxtb	r3, r3
    f13a:	2b00      	cmp	r3, #0
    f13c:	d111      	bne.n	f162 <_ZNK8Position13presqueEgalesERKS_+0x4a>
    f13e:	68fb      	ldr	r3, [r7, #12]
    f140:	685a      	ldr	r2, [r3, #4]
    f142:	68bb      	ldr	r3, [r7, #8]
    f144:	685b      	ldr	r3, [r3, #4]
    f146:	4610      	mov	r0, r2
    f148:	4619      	mov	r1, r3
    f14a:	f7fb feb5 	bl	aeb8 <_Z21distancePresqueEgalesff>
    f14e:	4603      	mov	r3, r0
    f150:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f154:	b2db      	uxtb	r3, r3
    f156:	2b00      	cmp	r3, #0
    f158:	d103      	bne.n	f162 <_ZNK8Position13presqueEgalesERKS_+0x4a>
    f15a:	f04f 0301 	mov.w	r3, #1	; 0x1
    f15e:	607b      	str	r3, [r7, #4]
    f160:	e002      	b.n	f168 <_ZNK8Position13presqueEgalesERKS_+0x50>
    f162:	f04f 0300 	mov.w	r3, #0	; 0x0
    f166:	607b      	str	r3, [r7, #4]
    f168:	687b      	ldr	r3, [r7, #4]
}
    f16a:	4618      	mov	r0, r3
    f16c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f170:	46bd      	mov	sp, r7
    f172:	bd80      	pop	{r7, pc}

0000f174 <_ZN17PositionPlusAngleC2ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    f174:	b480      	push	{r7}
    f176:	b085      	sub	sp, #20
    f178:	af00      	add	r7, sp, #0
    f17a:	60f8      	str	r0, [r7, #12]
    f17c:	60b9      	str	r1, [r7, #8]
    f17e:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    f180:	68fb      	ldr	r3, [r7, #12]
    f182:	68ba      	ldr	r2, [r7, #8]
    f184:	469c      	mov	ip, r3
    f186:	4613      	mov	r3, r2
    f188:	e893 0003 	ldmia.w	r3, {r0, r1}
    f18c:	e88c 0003 	stmia.w	ip, {r0, r1}
    f190:	68fa      	ldr	r2, [r7, #12]
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	6093      	str	r3, [r2, #8]
{
}
    f196:	68fb      	ldr	r3, [r7, #12]
    f198:	4618      	mov	r0, r3
    f19a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f19e:	46bd      	mov	sp, r7
    f1a0:	bc80      	pop	{r7}
    f1a2:	4770      	bx	lr

0000f1a4 <_ZN17PositionPlusAngleC1ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    f1a4:	b480      	push	{r7}
    f1a6:	b085      	sub	sp, #20
    f1a8:	af00      	add	r7, sp, #0
    f1aa:	60f8      	str	r0, [r7, #12]
    f1ac:	60b9      	str	r1, [r7, #8]
    f1ae:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    f1b0:	68fb      	ldr	r3, [r7, #12]
    f1b2:	68ba      	ldr	r2, [r7, #8]
    f1b4:	469c      	mov	ip, r3
    f1b6:	4613      	mov	r3, r2
    f1b8:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1bc:	e88c 0003 	stmia.w	ip, {r0, r1}
    f1c0:	68fa      	ldr	r2, [r7, #12]
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	6093      	str	r3, [r2, #8]
{
}
    f1c6:	68fb      	ldr	r3, [r7, #12]
    f1c8:	4618      	mov	r0, r3
    f1ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f1ce:	46bd      	mov	sp, r7
    f1d0:	bc80      	pop	{r7}
    f1d2:	4770      	bx	lr

0000f1d4 <_ZN17PositionPlusAngleC2ERKS_>:

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    f1d4:	b480      	push	{r7}
    f1d6:	b083      	sub	sp, #12
    f1d8:	af00      	add	r7, sp, #0
    f1da:	6078      	str	r0, [r7, #4]
    f1dc:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    f1de:	687b      	ldr	r3, [r7, #4]
    f1e0:	683a      	ldr	r2, [r7, #0]
    f1e2:	469c      	mov	ip, r3
    f1e4:	4613      	mov	r3, r2
    f1e6:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1ea:	e88c 0003 	stmia.w	ip, {r0, r1}
    f1ee:	683b      	ldr	r3, [r7, #0]
    f1f0:	689a      	ldr	r2, [r3, #8]
    f1f2:	687b      	ldr	r3, [r7, #4]
    f1f4:	609a      	str	r2, [r3, #8]
{
}
    f1f6:	687b      	ldr	r3, [r7, #4]
    f1f8:	4618      	mov	r0, r3
    f1fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f1fe:	46bd      	mov	sp, r7
    f200:	bc80      	pop	{r7}
    f202:	4770      	bx	lr

0000f204 <_ZN17PositionPlusAngleC1ERKS_>:
PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    : position(pos), angle(ang)
{
}

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    f204:	b480      	push	{r7}
    f206:	b083      	sub	sp, #12
    f208:	af00      	add	r7, sp, #0
    f20a:	6078      	str	r0, [r7, #4]
    f20c:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    f20e:	687b      	ldr	r3, [r7, #4]
    f210:	683a      	ldr	r2, [r7, #0]
    f212:	469c      	mov	ip, r3
    f214:	4613      	mov	r3, r2
    f216:	e893 0003 	ldmia.w	r3, {r0, r1}
    f21a:	e88c 0003 	stmia.w	ip, {r0, r1}
    f21e:	683b      	ldr	r3, [r7, #0]
    f220:	689a      	ldr	r2, [r3, #8]
    f222:	687b      	ldr	r3, [r7, #4]
    f224:	609a      	str	r2, [r3, #8]
{
}
    f226:	687b      	ldr	r3, [r7, #4]
    f228:	4618      	mov	r0, r3
    f22a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f22e:	46bd      	mov	sp, r7
    f230:	bc80      	pop	{r7}
    f232:	4770      	bx	lr

0000f234 <_ZNK17PositionPlusAngle11getPositionEv>:
bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
}

Position PositionPlusAngle::getPosition() const
    f234:	b480      	push	{r7}
    f236:	b083      	sub	sp, #12
    f238:	af00      	add	r7, sp, #0
    f23a:	4684      	mov	ip, r0
    f23c:	6079      	str	r1, [r7, #4]
{
    return position;
    f23e:	687b      	ldr	r3, [r7, #4]
    f240:	4662      	mov	r2, ip
    f242:	e893 0003 	ldmia.w	r3, {r0, r1}
    f246:	e882 0003 	stmia.w	r2, {r0, r1}
}
    f24a:	4660      	mov	r0, ip
    f24c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f250:	46bd      	mov	sp, r7
    f252:	bc80      	pop	{r7}
    f254:	4770      	bx	lr
    f256:	46c0      	nop			(mov r8, r8)

0000f258 <_ZNK17PositionPlusAngle8getAngleEv>:
void PositionPlusAngle::setPosition(const Position& p)
{
    position = p;
}

Angle PositionPlusAngle::getAngle() const
    f258:	b480      	push	{r7}
    f25a:	b083      	sub	sp, #12
    f25c:	af00      	add	r7, sp, #0
    f25e:	6078      	str	r0, [r7, #4]
{
    return angle;
    f260:	687b      	ldr	r3, [r7, #4]
    f262:	689b      	ldr	r3, [r3, #8]
}
    f264:	4618      	mov	r0, r3
    f266:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f26a:	46bd      	mov	sp, r7
    f26c:	bc80      	pop	{r7}
    f26e:	4770      	bx	lr

0000f270 <_ZN17PositionPlusAngle8setAngleEf>:

void PositionPlusAngle::setAngle(Angle a)
    f270:	b480      	push	{r7}
    f272:	b083      	sub	sp, #12
    f274:	af00      	add	r7, sp, #0
    f276:	6078      	str	r0, [r7, #4]
    f278:	6039      	str	r1, [r7, #0]
{
    angle = a;
    f27a:	687a      	ldr	r2, [r7, #4]
    f27c:	683b      	ldr	r3, [r7, #0]
    f27e:	6093      	str	r3, [r2, #8]
}
    f280:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f284:	46bd      	mov	sp, r7
    f286:	bc80      	pop	{r7}
    f288:	4770      	bx	lr
    f28a:	46c0      	nop			(mov r8, r8)

0000f28c <_ZN17PositionPlusAngle4setYEf>:
void PositionPlusAngle::setX(Distance X)
{
    position.setX(X);
}

void PositionPlusAngle::setY(Distance Y)
    f28c:	b580      	push	{r7, lr}
    f28e:	b082      	sub	sp, #8
    f290:	af00      	add	r7, sp, #0
    f292:	6078      	str	r0, [r7, #4]
    f294:	6039      	str	r1, [r7, #0]
{
    position.setY(Y);
    f296:	687b      	ldr	r3, [r7, #4]
    f298:	4618      	mov	r0, r3
    f29a:	6839      	ldr	r1, [r7, #0]
    f29c:	f7ff fdc8 	bl	ee30 <_ZN8Position4setYEf>
}
    f2a0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f2a4:	46bd      	mov	sp, r7
    f2a6:	bd80      	pop	{r7, pc}

0000f2a8 <_ZN17PositionPlusAngle4setXEf>:
void PositionPlusAngle::setAngle(Angle a)
{
    angle = a;
}

void PositionPlusAngle::setX(Distance X)
    f2a8:	b580      	push	{r7, lr}
    f2aa:	b082      	sub	sp, #8
    f2ac:	af00      	add	r7, sp, #0
    f2ae:	6078      	str	r0, [r7, #4]
    f2b0:	6039      	str	r1, [r7, #0]
{
    position.setX(X);
    f2b2:	687b      	ldr	r3, [r7, #4]
    f2b4:	4618      	mov	r0, r3
    f2b6:	6839      	ldr	r1, [r7, #0]
    f2b8:	f7ff fdac 	bl	ee14 <_ZN8Position4setXEf>
}
    f2bc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f2c0:	46bd      	mov	sp, r7
    f2c2:	bd80      	pop	{r7, pc}

0000f2c4 <_ZN17PositionPlusAngle11setPositionERK8Position>:
Position PositionPlusAngle::getPosition() const
{
    return position;
}

void PositionPlusAngle::setPosition(const Position& p)
    f2c4:	b580      	push	{r7, lr}
    f2c6:	b082      	sub	sp, #8
    f2c8:	af00      	add	r7, sp, #0
    f2ca:	6078      	str	r0, [r7, #4]
    f2cc:	6039      	str	r1, [r7, #0]
{
    position = p;
    f2ce:	687a      	ldr	r2, [r7, #4]
    f2d0:	683b      	ldr	r3, [r7, #0]
    f2d2:	4610      	mov	r0, r2
    f2d4:	e893 0006 	ldmia.w	r3, {r1, r2}
    f2d8:	f7ff fe04 	bl	eee4 <_ZN8PositionaSES_>
}
    f2dc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f2e0:	46bd      	mov	sp, r7
    f2e2:	bd80      	pop	{r7, pc}

0000f2e4 <_ZN17PositionPlusAngleaSERKS_>:
PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
{
    return *this + (-distance);
}

const PositionPlusAngle& PositionPlusAngle::operator=(const PositionPlusAngle& positionPlusAngle)
    f2e4:	b580      	push	{r7, lr}
    f2e6:	b082      	sub	sp, #8
    f2e8:	af00      	add	r7, sp, #0
    f2ea:	6078      	str	r0, [r7, #4]
    f2ec:	6039      	str	r1, [r7, #0]
{
    position = positionPlusAngle.position;
    f2ee:	687a      	ldr	r2, [r7, #4]
    f2f0:	683b      	ldr	r3, [r7, #0]
    f2f2:	4610      	mov	r0, r2
    f2f4:	e893 0006 	ldmia.w	r3, {r1, r2}
    f2f8:	f7ff fdf4 	bl	eee4 <_ZN8PositionaSES_>
    angle = positionPlusAngle.angle;
    f2fc:	683b      	ldr	r3, [r7, #0]
    f2fe:	689a      	ldr	r2, [r3, #8]
    f300:	687b      	ldr	r3, [r7, #4]
    f302:	609a      	str	r2, [r3, #8]

    return *this;
    f304:	687b      	ldr	r3, [r7, #4]
}
    f306:	4618      	mov	r0, r3
    f308:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f30c:	46bd      	mov	sp, r7
    f30e:	bd80      	pop	{r7, pc}

0000f310 <_ZNK17PositionPlusAngle13presqueEgalesERKS_>:
bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
{
    return ((position==p.position) && (angle==p.angle));
}

bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
    f310:	b580      	push	{r7, lr}
    f312:	b084      	sub	sp, #16
    f314:	af00      	add	r7, sp, #0
    f316:	60f8      	str	r0, [r7, #12]
    f318:	60b9      	str	r1, [r7, #8]
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
    f31a:	68fb      	ldr	r3, [r7, #12]
    f31c:	68ba      	ldr	r2, [r7, #8]
    f31e:	4618      	mov	r0, r3
    f320:	4611      	mov	r1, r2
    f322:	f7ff fef9 	bl	f118 <_ZNK8Position13presqueEgalesERKS_>
    f326:	4603      	mov	r3, r0
    f328:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f32c:	b2db      	uxtb	r3, r3
    f32e:	2b00      	cmp	r3, #0
    f330:	d111      	bne.n	f356 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    f332:	68fb      	ldr	r3, [r7, #12]
    f334:	689a      	ldr	r2, [r3, #8]
    f336:	68bb      	ldr	r3, [r7, #8]
    f338:	689b      	ldr	r3, [r3, #8]
    f33a:	4610      	mov	r0, r2
    f33c:	4619      	mov	r1, r3
    f33e:	f7f8 fa83 	bl	7848 <_Z7angleEqff>
    f342:	4603      	mov	r3, r0
    f344:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f348:	b2db      	uxtb	r3, r3
    f34a:	2b00      	cmp	r3, #0
    f34c:	d103      	bne.n	f356 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    f34e:	f04f 0301 	mov.w	r3, #1	; 0x1
    f352:	607b      	str	r3, [r7, #4]
    f354:	e002      	b.n	f35c <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x4c>
    f356:	f04f 0300 	mov.w	r3, #0	; 0x0
    f35a:	607b      	str	r3, [r7, #4]
    f35c:	687b      	ldr	r3, [r7, #4]
}
    f35e:	4618      	mov	r0, r3
    f360:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f364:	46bd      	mov	sp, r7
    f366:	bd80      	pop	{r7, pc}

0000f368 <_ZNK17PositionPlusAngleeqERKS_>:
    angle = positionPlusAngle.angle;

    return *this;
}

bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
    f368:	b580      	push	{r7, lr}
    f36a:	b084      	sub	sp, #16
    f36c:	af00      	add	r7, sp, #0
    f36e:	60f8      	str	r0, [r7, #12]
    f370:	60b9      	str	r1, [r7, #8]
{
    return ((position==p.position) && (angle==p.angle));
    f372:	68fb      	ldr	r3, [r7, #12]
    f374:	68ba      	ldr	r2, [r7, #8]
    f376:	4618      	mov	r0, r3
    f378:	4611      	mov	r1, r2
    f37a:	f7ff fe1b 	bl	efb4 <_ZNK8PositioneqERKS_>
    f37e:	4603      	mov	r3, r0
    f380:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f384:	b2db      	uxtb	r3, r3
    f386:	2b00      	cmp	r3, #0
    f388:	d119      	bne.n	f3be <_ZNK17PositionPlusAngleeqERKS_+0x56>
    f38a:	68fb      	ldr	r3, [r7, #12]
    f38c:	689a      	ldr	r2, [r3, #8]
    f38e:	68bb      	ldr	r3, [r7, #8]
    f390:	6899      	ldr	r1, [r3, #8]
    f392:	f04f 0300 	mov.w	r3, #0	; 0x0
    f396:	70fb      	strb	r3, [r7, #3]
    f398:	4610      	mov	r0, r2
    f39a:	f00c f921 	bl	1b5e0 <__aeabi_fcmpeq>
    f39e:	4603      	mov	r3, r0
    f3a0:	2b00      	cmp	r3, #0
    f3a2:	d002      	beq.n	f3aa <_ZNK17PositionPlusAngleeqERKS_+0x42>
    f3a4:	f04f 0301 	mov.w	r3, #1	; 0x1
    f3a8:	70fb      	strb	r3, [r7, #3]
    f3aa:	78fb      	ldrb	r3, [r7, #3]
    f3ac:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f3b0:	b2db      	uxtb	r3, r3
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	d103      	bne.n	f3be <_ZNK17PositionPlusAngleeqERKS_+0x56>
    f3b6:	f04f 0301 	mov.w	r3, #1	; 0x1
    f3ba:	607b      	str	r3, [r7, #4]
    f3bc:	e002      	b.n	f3c4 <_ZNK17PositionPlusAngleeqERKS_+0x5c>
    f3be:	f04f 0300 	mov.w	r3, #0	; 0x0
    f3c2:	607b      	str	r3, [r7, #4]
    f3c4:	687b      	ldr	r3, [r7, #4]
}
    f3c6:	4618      	mov	r0, r3
    f3c8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f3cc:	46bd      	mov	sp, r7
    f3ce:	bd80      	pop	{r7, pc}

0000f3d0 <_ZNK17PositionPlusAngleplERKS_>:
PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
}

PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
    f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3d4:	b088      	sub	sp, #32
    f3d6:	af00      	add	r7, sp, #0
    f3d8:	4605      	mov	r5, r0
    f3da:	6079      	str	r1, [r7, #4]
    f3dc:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
    f3de:	462e      	mov	r6, r5
    f3e0:	687b      	ldr	r3, [r7, #4]
    f3e2:	4618      	mov	r0, r3
    f3e4:	f7ff fcfe 	bl	ede4 <_ZNK8Position4getXEv>
    f3e8:	4604      	mov	r4, r0
    f3ea:	f107 0310 	add.w	r3, r7, #16	; 0x10
    f3ee:	4618      	mov	r0, r3
    f3f0:	6839      	ldr	r1, [r7, #0]
    f3f2:	f7ff ff1f 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    f3f6:	f107 0310 	add.w	r3, r7, #16	; 0x10
    f3fa:	4618      	mov	r0, r3
    f3fc:	f7ff fcf2 	bl	ede4 <_ZNK8Position4getXEv>
    f400:	4603      	mov	r3, r0
    f402:	4620      	mov	r0, r4
    f404:	4619      	mov	r1, r3
    f406:	f00b fe51 	bl	1b0ac <__addsf3>
    f40a:	4603      	mov	r3, r0
    f40c:	4698      	mov	r8, r3
    f40e:	687b      	ldr	r3, [r7, #4]
    f410:	4618      	mov	r0, r3
    f412:	f7ff fcf3 	bl	edfc <_ZNK8Position4getYEv>
    f416:	4604      	mov	r4, r0
    f418:	f107 0318 	add.w	r3, r7, #24	; 0x18
    f41c:	4618      	mov	r0, r3
    f41e:	6839      	ldr	r1, [r7, #0]
    f420:	f7ff ff08 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    f424:	f107 0318 	add.w	r3, r7, #24	; 0x18
    f428:	4618      	mov	r0, r3
    f42a:	f7ff fce7 	bl	edfc <_ZNK8Position4getYEv>
    f42e:	4603      	mov	r3, r0
    f430:	4620      	mov	r0, r4
    f432:	4619      	mov	r1, r3
    f434:	f00b fe3a 	bl	1b0ac <__addsf3>
    f438:	4603      	mov	r3, r0
    f43a:	461a      	mov	r2, r3
    f43c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f440:	4618      	mov	r0, r3
    f442:	4641      	mov	r1, r8
    f444:	f04f 0301 	mov.w	r3, #1	; 0x1
    f448:	f7ff fcb8 	bl	edbc <_ZN8PositionC1Effb>
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	689c      	ldr	r4, [r3, #8]
    f450:	6838      	ldr	r0, [r7, #0]
    f452:	f7ff ff01 	bl	f258 <_ZNK17PositionPlusAngle8getAngleEv>
    f456:	4603      	mov	r3, r0
    f458:	4620      	mov	r0, r4
    f45a:	4619      	mov	r1, r3
    f45c:	f00b fe26 	bl	1b0ac <__addsf3>
    f460:	4603      	mov	r3, r0
    f462:	461a      	mov	r2, r3
    f464:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f468:	4630      	mov	r0, r6
    f46a:	4619      	mov	r1, r3
    f46c:	f7ff fe9a 	bl	f1a4 <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    f470:	4628      	mov	r0, r5
    f472:	4628      	mov	r0, r5
    f474:	f107 0720 	add.w	r7, r7, #32	; 0x20
    f478:	46bd      	mov	sp, r7
    f47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f47e:	46c0      	nop			(mov r8, r8)

0000f480 <_ZNK17PositionPlusAngleplEf>:
PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    : position(original.position), angle(original.angle)
{
}

PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
    f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f484:	b085      	sub	sp, #20
    f486:	af00      	add	r7, sp, #0
    f488:	4606      	mov	r6, r0
    f48a:	6079      	str	r1, [r7, #4]
    f48c:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
    f48e:	46b2      	mov	sl, r6
    f490:	687b      	ldr	r3, [r7, #4]
    f492:	4618      	mov	r0, r3
    f494:	f7ff fca6 	bl	ede4 <_ZNK8Position4getXEv>
    f498:	4603      	mov	r3, r0
    f49a:	4618      	mov	r0, r3
    f49c:	f00b fa9c 	bl	1a9d8 <__aeabi_f2d>
    f4a0:	4680      	mov	r8, r0
    f4a2:	4689      	mov	r9, r1
    f4a4:	6838      	ldr	r0, [r7, #0]
    f4a6:	f00b fa97 	bl	1a9d8 <__aeabi_f2d>
    f4aa:	4604      	mov	r4, r0
    f4ac:	460d      	mov	r5, r1
    f4ae:	687b      	ldr	r3, [r7, #4]
    f4b0:	689b      	ldr	r3, [r3, #8]
    f4b2:	4618      	mov	r0, r3
    f4b4:	f00b fa90 	bl	1a9d8 <__aeabi_f2d>
    f4b8:	4602      	mov	r2, r0
    f4ba:	460b      	mov	r3, r1
    f4bc:	4610      	mov	r0, r2
    f4be:	4619      	mov	r1, r3
    f4c0:	f00f fb38 	bl	1eb34 <cos>
    f4c4:	4602      	mov	r2, r0
    f4c6:	460b      	mov	r3, r1
    f4c8:	4620      	mov	r0, r4
    f4ca:	4629      	mov	r1, r5
    f4cc:	f00b fad8 	bl	1aa80 <__aeabi_dmul>
    f4d0:	4602      	mov	r2, r0
    f4d2:	460b      	mov	r3, r1
    f4d4:	4640      	mov	r0, r8
    f4d6:	4649      	mov	r1, r9
    f4d8:	f00b f920 	bl	1a71c <__adddf3>
    f4dc:	4602      	mov	r2, r0
    f4de:	460b      	mov	r3, r1
    f4e0:	4610      	mov	r0, r2
    f4e2:	4619      	mov	r1, r3
    f4e4:	f00b fd8c 	bl	1b000 <__aeabi_d2f>
    f4e8:	4683      	mov	fp, r0
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	4618      	mov	r0, r3
    f4ee:	f7ff fc85 	bl	edfc <_ZNK8Position4getYEv>
    f4f2:	4603      	mov	r3, r0
    f4f4:	4618      	mov	r0, r3
    f4f6:	f00b fa6f 	bl	1a9d8 <__aeabi_f2d>
    f4fa:	4680      	mov	r8, r0
    f4fc:	4689      	mov	r9, r1
    f4fe:	6838      	ldr	r0, [r7, #0]
    f500:	f00b fa6a 	bl	1a9d8 <__aeabi_f2d>
    f504:	4604      	mov	r4, r0
    f506:	460d      	mov	r5, r1
    f508:	687b      	ldr	r3, [r7, #4]
    f50a:	689b      	ldr	r3, [r3, #8]
    f50c:	4618      	mov	r0, r3
    f50e:	f00b fa63 	bl	1a9d8 <__aeabi_f2d>
    f512:	4602      	mov	r2, r0
    f514:	460b      	mov	r3, r1
    f516:	4610      	mov	r0, r2
    f518:	4619      	mov	r1, r3
    f51a:	f00f fb4d 	bl	1ebb8 <sin>
    f51e:	4602      	mov	r2, r0
    f520:	460b      	mov	r3, r1
    f522:	4620      	mov	r0, r4
    f524:	4629      	mov	r1, r5
    f526:	f00b faab 	bl	1aa80 <__aeabi_dmul>
    f52a:	4602      	mov	r2, r0
    f52c:	460b      	mov	r3, r1
    f52e:	4640      	mov	r0, r8
    f530:	4649      	mov	r1, r9
    f532:	f00b f8f3 	bl	1a71c <__adddf3>
    f536:	4602      	mov	r2, r0
    f538:	460b      	mov	r3, r1
    f53a:	4610      	mov	r0, r2
    f53c:	4619      	mov	r1, r3
    f53e:	f00b fd5f 	bl	1b000 <__aeabi_d2f>
    f542:	4602      	mov	r2, r0
    f544:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f548:	4618      	mov	r0, r3
    f54a:	4659      	mov	r1, fp
    f54c:	f04f 0301 	mov.w	r3, #1	; 0x1
    f550:	f7ff fc34 	bl	edbc <_ZN8PositionC1Effb>
    f554:	687b      	ldr	r3, [r7, #4]
    f556:	689a      	ldr	r2, [r3, #8]
    f558:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f55c:	4650      	mov	r0, sl
    f55e:	4619      	mov	r1, r3
    f560:	f7ff fe20 	bl	f1a4 <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    f564:	4630      	mov	r0, r6
    f566:	4630      	mov	r0, r6
    f568:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f56c:	46bd      	mov	sp, r7
    f56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f572:	46c0      	nop			(mov r8, r8)

0000f574 <_ZNK17PositionPlusAnglemiEf>:
PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
}

PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
    f574:	b590      	push	{r4, r7, lr}
    f576:	b083      	sub	sp, #12
    f578:	af00      	add	r7, sp, #0
    f57a:	4604      	mov	r4, r0
    f57c:	6079      	str	r1, [r7, #4]
    f57e:	603a      	str	r2, [r7, #0]
{
    return *this + (-distance);
    f580:	4622      	mov	r2, r4
    f582:	683b      	ldr	r3, [r7, #0]
    f584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    f588:	4610      	mov	r0, r2
    f58a:	6879      	ldr	r1, [r7, #4]
    f58c:	461a      	mov	r2, r3
    f58e:	f7ff ff77 	bl	f480 <_ZNK17PositionPlusAngleplEf>
}
    f592:	4620      	mov	r0, r4
    f594:	4620      	mov	r0, r4
    f596:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f59a:	46bd      	mov	sp, r7
    f59c:	bd90      	pop	{r4, r7, pc}
    f59e:	46c0      	nop			(mov r8, r8)

0000f5a0 <_ZN17PositionPlusAngleC1Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    f5a0:	b580      	push	{r7, lr}
    f5a2:	b082      	sub	sp, #8
    f5a4:	af00      	add	r7, sp, #0
    f5a6:	6078      	str	r0, [r7, #4]
    f5a8:	687b      	ldr	r3, [r7, #4]
    f5aa:	4618      	mov	r0, r3
    f5ac:	f7ff fbde 	bl	ed6c <_ZN8PositionC1Ev>
{
}
    f5b0:	687b      	ldr	r3, [r7, #4]
    f5b2:	4618      	mov	r0, r3
    f5b4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f5b8:	46bd      	mov	sp, r7
    f5ba:	bd80      	pop	{r7, pc}

0000f5bc <_ZN17PositionPlusAngleC2Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    f5bc:	b580      	push	{r7, lr}
    f5be:	b082      	sub	sp, #8
    f5c0:	af00      	add	r7, sp, #0
    f5c2:	6078      	str	r0, [r7, #4]
    f5c4:	687b      	ldr	r3, [r7, #4]
    f5c6:	4618      	mov	r0, r3
    f5c8:	f7ff fbd0 	bl	ed6c <_ZN8PositionC1Ev>
{
}
    f5cc:	687b      	ldr	r3, [r7, #4]
    f5ce:	4618      	mov	r0, r3
    f5d0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f5d4:	46bd      	mov	sp, r7
    f5d6:	bd80      	pop	{r7, pc}

0000f5d8 <_ZN10ActionGoTo16collisionAvoidedEv>:
            status = -1;
    }
    return status;
}

void ActionGoTo::collisionAvoided()
    f5d8:	b480      	push	{r7}
    f5da:	b083      	sub	sp, #12
    f5dc:	af00      	add	r7, sp, #0
    f5de:	6078      	str	r0, [r7, #4]
{
    //if (status > 0)
        this->status = 0;
    f5e0:	687a      	ldr	r2, [r7, #4]
    f5e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    f5e6:	60d3      	str	r3, [r2, #12]
}
    f5e8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f5ec:	46bd      	mov	sp, r7
    f5ee:	bc80      	pop	{r7}
    f5f0:	4770      	bx	lr
    f5f2:	46c0      	nop			(mov r8, r8)

0000f5f4 <_ZN10ActionGoTo5resetEv>:

void ActionGoTo::reset()
    f5f4:	b480      	push	{r7}
    f5f6:	b083      	sub	sp, #12
    f5f8:	af00      	add	r7, sp, #0
    f5fa:	6078      	str	r0, [r7, #4]
{
    this->status = 0;
    f5fc:	687a      	ldr	r2, [r7, #4]
    f5fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    f602:	60d3      	str	r3, [r2, #12]
}
    f604:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f608:	46bd      	mov	sp, r7
    f60a:	bc80      	pop	{r7}
    f60c:	4770      	bx	lr
    f60e:	46c0      	nop			(mov r8, r8)

0000f610 <_ZN10ActionGoTo6updateEv>:
ActionGoTo::~ActionGoTo()
{
    //dtor
}

int ActionGoTo::update()
    f610:	b590      	push	{r4, r7, lr}
    f612:	b099      	sub	sp, #100
    f614:	af02      	add	r7, sp, #8
    f616:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
    f618:	687b      	ldr	r3, [r7, #4]
    f61a:	68db      	ldr	r3, [r3, #12]
    f61c:	2b00      	cmp	r3, #0
    f61e:	d126      	bne.n	f66e <_ZN10ActionGoTo6updateEv+0x5e>
    {
#ifndef ROBOTHW
        qDebug() << "actionGoTo";
#endif
        //allumerLED2();
        Position pos = Odometrie::odometrie->getPos().getPosition();
    f620:	4b4c      	ldr	r3, [pc, #304]	(f754 <_ZN10ActionGoTo6updateEv+0x144>)
    f622:	681a      	ldr	r2, [r3, #0]
    f624:	f107 0324 	add.w	r3, r7, #36	; 0x24
    f628:	4618      	mov	r0, r3
    f62a:	4611      	mov	r1, r2
    f62c:	f7fa fc8c 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    f630:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f634:	f107 0224 	add.w	r2, r7, #36	; 0x24
    f638:	4618      	mov	r0, r3
    f63a:	4611      	mov	r1, r2
    f63c:	f7ff fdfa 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
        //Position vect = goalPosition - pos;
        //vect *= (1.f/vect.getNorme());

        goingCurve = false;//StrategieV2::getJustAvoided();
    f640:	687a      	ldr	r2, [r7, #4]
    f642:	f04f 0300 	mov.w	r3, #0	; 0x0
    f646:	7713      	strb	r3, [r2, #28]
            StrategieV2::setCurrentGoal(intermediateGoalPosition, true); // a changer selon le servo qui détecte
            status = 1;
        }
        else*/
        {
            StrategieV2::setCurrentGoal(goalPosition, goBack);
    f648:	687b      	ldr	r3, [r7, #4]
    f64a:	f893 c010 	ldrb.w	ip, [r3, #16]
    f64e:	687a      	ldr	r2, [r7, #4]
    f650:	4b41      	ldr	r3, [pc, #260]	(f758 <_ZN10ActionGoTo6updateEv+0x148>)
    f652:	9300      	str	r3, [sp, #0]
    f654:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f658:	e893 0003 	ldmia.w	r3, {r0, r1}
    f65c:	4662      	mov	r2, ip
    f65e:	4b3f      	ldr	r3, [pc, #252]	(f75c <_ZN10ActionGoTo6updateEv+0x14c>)
    f660:	f006 fe5c 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            status = 3;
    f664:	687a      	ldr	r2, [r7, #4]
    f666:	f04f 0303 	mov.w	r3, #3	; 0x3
    f66a:	60d3      	str	r3, [r2, #12]
    f66c:	e06b      	b.n	f746 <_ZN10ActionGoTo6updateEv+0x136>
        }

    }
    else if (status ==1) // on recule
    f66e:	687b      	ldr	r3, [r7, #4]
    f670:	68db      	ldr	r3, [r3, #12]
    f672:	2b01      	cmp	r3, #1
    f674:	d129      	bne.n	f6ca <_ZN10ActionGoTo6updateEv+0xba>
    {
        Position vect = intermediateGoalPosition - Odometrie::odometrie->getPos().getPosition();
    f676:	687b      	ldr	r3, [r7, #4]
    f678:	f103 0428 	add.w	r4, r3, #40	; 0x28
    f67c:	4b35      	ldr	r3, [pc, #212]	(f754 <_ZN10ActionGoTo6updateEv+0x144>)
    f67e:	681a      	ldr	r2, [r3, #0]
    f680:	f107 0338 	add.w	r3, r7, #56	; 0x38
    f684:	4618      	mov	r0, r3
    f686:	4611      	mov	r1, r2
    f688:	f7fa fc5e 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    f68c:	f107 0330 	add.w	r3, r7, #48	; 0x30
    f690:	f107 0238 	add.w	r2, r7, #56	; 0x38
    f694:	4618      	mov	r0, r3
    f696:	4611      	mov	r1, r2
    f698:	f7ff fdcc 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    f69c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    f6a0:	f107 0230 	add.w	r2, r7, #48	; 0x30
    f6a4:	4618      	mov	r0, r3
    f6a6:	4621      	mov	r1, r4
    f6a8:	f7ff fbf6 	bl	ee98 <_ZNK8PositionmiERKS_>
        //std::cout << "status = 1 " << vect.getNorme() << std::endl;
        if (vect.getNorme() < precision) // now we have
    f6ac:	f107 0314 	add.w	r3, r7, #20	; 0x14
    f6b0:	4618      	mov	r0, r3
    f6b2:	f7ff fcff 	bl	f0b4 <_ZNK8Position8getNormeEv>
    f6b6:	4602      	mov	r2, r0
    f6b8:	687b      	ldr	r3, [r7, #4]
    f6ba:	6a5b      	ldr	r3, [r3, #36]
    f6bc:	4610      	mov	r0, r2
    f6be:	4619      	mov	r1, r3
    f6c0:	f00b ff98 	bl	1b5f4 <__aeabi_fcmplt>
    f6c4:	4603      	mov	r3, r0
    f6c6:	2b00      	cmp	r3, #0
    f6c8:	e03d      	b.n	f746 <_ZN10ActionGoTo6updateEv+0x136>
                sign = -1;
            else if (vect.getX() < 0)
            vect = vect + Position(500*vect.getY(), 500*vect.getX());*/
        }
    }
    else if (status == 2)
    f6ca:	687b      	ldr	r3, [r7, #4]
    f6cc:	68db      	ldr	r3, [r3, #12]
    f6ce:	2b02      	cmp	r3, #2
    f6d0:	d039      	beq.n	f746 <_ZN10ActionGoTo6updateEv+0x136>
                StrategieV2::setCurrentGoal(goalPosition, goBack);
                status = 3;
            }
        }*/
    }
    else if (status == 3)
    f6d2:	687b      	ldr	r3, [r7, #4]
    f6d4:	68db      	ldr	r3, [r3, #12]
    f6d6:	2b03      	cmp	r3, #3
    f6d8:	d135      	bne.n	f746 <_ZN10ActionGoTo6updateEv+0x136>
    {
//        allumerLED();
        //std::cout << "status = 3" << std::endl;
        Position vect = goalPosition - Odometrie::odometrie->getPos().getPosition();
    f6da:	687b      	ldr	r3, [r7, #4]
    f6dc:	f103 0404 	add.w	r4, r3, #4	; 0x4
    f6e0:	4b1c      	ldr	r3, [pc, #112]	(f754 <_ZN10ActionGoTo6updateEv+0x144>)
    f6e2:	681a      	ldr	r2, [r3, #0]
    f6e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    f6e8:	4618      	mov	r0, r3
    f6ea:	4611      	mov	r1, r2
    f6ec:	f7fa fc2c 	bl	9f48 <_ZNK9Odometrie6getPosEv>
    f6f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
    f6f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    f6f8:	4618      	mov	r0, r3
    f6fa:	4611      	mov	r1, r2
    f6fc:	f7ff fd9a 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
    f700:	f107 030c 	add.w	r3, r7, #12	; 0xc
    f704:	f107 0244 	add.w	r2, r7, #68	; 0x44
    f708:	4618      	mov	r0, r3
    f70a:	4621      	mov	r1, r4
    f70c:	f7ff fbc4 	bl	ee98 <_ZNK8PositionmiERKS_>
        //std::cout << vect.getNorme() << std::endl;
        //std::cout << Odometrie::odometrie->getPos().getPosition().getX() << " "<< Odometrie::odometrie->getPos().getPosition().getY()   << std::endl;
        if (vect.getNorme() < precision)
    f710:	f107 030c 	add.w	r3, r7, #12	; 0xc
    f714:	4618      	mov	r0, r3
    f716:	f7ff fccd 	bl	f0b4 <_ZNK8Position8getNormeEv>
    f71a:	4602      	mov	r2, r0
    f71c:	687b      	ldr	r3, [r7, #4]
    f71e:	6a59      	ldr	r1, [r3, #36]
    f720:	f04f 0300 	mov.w	r3, #0	; 0x0
    f724:	70fb      	strb	r3, [r7, #3]
    f726:	4610      	mov	r0, r2
    f728:	f00b ff64 	bl	1b5f4 <__aeabi_fcmplt>
    f72c:	4603      	mov	r3, r0
    f72e:	2b00      	cmp	r3, #0
    f730:	d002      	beq.n	f738 <_ZN10ActionGoTo6updateEv+0x128>
    f732:	f04f 0301 	mov.w	r3, #1	; 0x1
    f736:	70fb      	strb	r3, [r7, #3]
    f738:	78fb      	ldrb	r3, [r7, #3]
    f73a:	2b00      	cmp	r3, #0
    f73c:	d003      	beq.n	f746 <_ZN10ActionGoTo6updateEv+0x136>
            status = -1;
    f73e:	687a      	ldr	r2, [r7, #4]
    f740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f744:	60d3      	str	r3, [r2, #12]
    }
    return status;
    f746:	687b      	ldr	r3, [r7, #4]
    f748:	68db      	ldr	r3, [r3, #12]
}
    f74a:	4618      	mov	r0, r3
    f74c:	f107 075c 	add.w	r7, r7, #92	; 0x5c
    f750:	46bd      	mov	sp, r7
    f752:	bd90      	pop	{r4, r7, pc}
    f754:	20000580 	.word	0x20000580
    f758:	c2c80000 	.word	0xc2c80000
    f75c:	40400000 	.word	0x40400000

0000f760 <_ZN10ActionGoToD0Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f760:	b580      	push	{r7, lr}
    f762:	b082      	sub	sp, #8
    f764:	af00      	add	r7, sp, #0
    f766:	6078      	str	r0, [r7, #4]
    f768:	687a      	ldr	r2, [r7, #4]
    f76a:	4b0a      	ldr	r3, [pc, #40]	(f794 <_ZN10ActionGoToD0Ev+0x34>)
    f76c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f76e:	687b      	ldr	r3, [r7, #4]
    f770:	4618      	mov	r0, r3
    f772:	f005 fde3 	bl	1533c <_ZN17MediumLevelActionD2Ev>
    f776:	f04f 0301 	mov.w	r3, #1	; 0x1
    f77a:	b2db      	uxtb	r3, r3
    f77c:	2b00      	cmp	r3, #0
    f77e:	d002      	beq.n	f786 <_ZN10ActionGoToD0Ev+0x26>
    f780:	6878      	ldr	r0, [r7, #4]
    f782:	f7ff fa5b 	bl	ec3c <_ZdlPv>
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	4618      	mov	r0, r3
    f78a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f78e:	46bd      	mov	sp, r7
    f790:	bd80      	pop	{r7, pc}
    f792:	46c0      	nop			(mov r8, r8)
    f794:	000223b8 	.word	0x000223b8

0000f798 <_ZN10ActionGoToD1Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f798:	b580      	push	{r7, lr}
    f79a:	b082      	sub	sp, #8
    f79c:	af00      	add	r7, sp, #0
    f79e:	6078      	str	r0, [r7, #4]
    f7a0:	687a      	ldr	r2, [r7, #4]
    f7a2:	4b0a      	ldr	r3, [pc, #40]	(f7cc <_ZN10ActionGoToD1Ev+0x34>)
    f7a4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f7a6:	687b      	ldr	r3, [r7, #4]
    f7a8:	4618      	mov	r0, r3
    f7aa:	f005 fdc7 	bl	1533c <_ZN17MediumLevelActionD2Ev>
    f7ae:	f04f 0300 	mov.w	r3, #0	; 0x0
    f7b2:	b2db      	uxtb	r3, r3
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d002      	beq.n	f7be <_ZN10ActionGoToD1Ev+0x26>
    f7b8:	6878      	ldr	r0, [r7, #4]
    f7ba:	f7ff fa3f 	bl	ec3c <_ZdlPv>
    f7be:	687b      	ldr	r3, [r7, #4]
    f7c0:	4618      	mov	r0, r3
    f7c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f7c6:	46bd      	mov	sp, r7
    f7c8:	bd80      	pop	{r7, pc}
    f7ca:	46c0      	nop			(mov r8, r8)
    f7cc:	000223b8 	.word	0x000223b8

0000f7d0 <_ZN10ActionGoToD2Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f7d0:	b580      	push	{r7, lr}
    f7d2:	b082      	sub	sp, #8
    f7d4:	af00      	add	r7, sp, #0
    f7d6:	6078      	str	r0, [r7, #4]
    f7d8:	687a      	ldr	r2, [r7, #4]
    f7da:	4b0a      	ldr	r3, [pc, #40]	(f804 <_ZN10ActionGoToD2Ev+0x34>)
    f7dc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f7de:	687b      	ldr	r3, [r7, #4]
    f7e0:	4618      	mov	r0, r3
    f7e2:	f005 fdab 	bl	1533c <_ZN17MediumLevelActionD2Ev>
    f7e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f7ea:	b2db      	uxtb	r3, r3
    f7ec:	2b00      	cmp	r3, #0
    f7ee:	d002      	beq.n	f7f6 <_ZN10ActionGoToD2Ev+0x26>
    f7f0:	6878      	ldr	r0, [r7, #4]
    f7f2:	f7ff fa23 	bl	ec3c <_ZdlPv>
    f7f6:	687b      	ldr	r3, [r7, #4]
    f7f8:	4618      	mov	r0, r3
    f7fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f7fe:	46bd      	mov	sp, r7
    f800:	bd80      	pop	{r7, pc}
    f802:	46c0      	nop			(mov r8, r8)
    f804:	000223b8 	.word	0x000223b8

0000f808 <_ZN10ActionGoToC1E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f808:	b580      	push	{r7, lr}
    f80a:	b084      	sub	sp, #16
    f80c:	af00      	add	r7, sp, #0
    f80e:	60f8      	str	r0, [r7, #12]
    f810:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f814:	e880 0006 	stmia.w	r0, {r1, r2}
    f818:	70fb      	strb	r3, [r7, #3]
    f81a:	68fb      	ldr	r3, [r7, #12]
    f81c:	4618      	mov	r0, r3
    f81e:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f822:	e893 0006 	ldmia.w	r3, {r1, r2}
    f826:	f005 fdc9 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
    f82a:	68fa      	ldr	r2, [r7, #12]
    f82c:	4b0f      	ldr	r3, [pc, #60]	(f86c <_ZN10ActionGoToC1E8Positionbf+0x64>)
    f82e:	6013      	str	r3, [r2, #0]
    f830:	68fb      	ldr	r3, [r7, #12]
    f832:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f836:	4618      	mov	r0, r3
    f838:	f7ff fa98 	bl	ed6c <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f83c:	68fa      	ldr	r2, [r7, #12]
    f83e:	78fb      	ldrb	r3, [r7, #3]
    f840:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f842:	68fa      	ldr	r2, [r7, #12]
    f844:	4b0a      	ldr	r3, [pc, #40]	(f870 <_ZN10ActionGoToC1E8Positionbf+0x68>)
    f846:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f848:	68fa      	ldr	r2, [r7, #12]
    f84a:	f04f 0300 	mov.w	r3, #0	; 0x0
    f84e:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f850:	68fa      	ldr	r2, [r7, #12]
    f852:	f04f 0301 	mov.w	r3, #1	; 0x1
    f856:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f858:	68fa      	ldr	r2, [r7, #12]
    f85a:	69bb      	ldr	r3, [r7, #24]
    f85c:	6253      	str	r3, [r2, #36]
}
    f85e:	68fb      	ldr	r3, [r7, #12]
    f860:	4618      	mov	r0, r3
    f862:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f866:	46bd      	mov	sp, r7
    f868:	bd80      	pop	{r7, pc}
    f86a:	46c0      	nop			(mov r8, r8)
    f86c:	000223b8 	.word	0x000223b8
    f870:	00000000 	.word	0x00000000

0000f874 <_ZN10ActionGoToC2E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f874:	b580      	push	{r7, lr}
    f876:	b084      	sub	sp, #16
    f878:	af00      	add	r7, sp, #0
    f87a:	60f8      	str	r0, [r7, #12]
    f87c:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f880:	e880 0006 	stmia.w	r0, {r1, r2}
    f884:	70fb      	strb	r3, [r7, #3]
    f886:	68fb      	ldr	r3, [r7, #12]
    f888:	4618      	mov	r0, r3
    f88a:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f88e:	e893 0006 	ldmia.w	r3, {r1, r2}
    f892:	f005 fd93 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
    f896:	68fa      	ldr	r2, [r7, #12]
    f898:	4b0f      	ldr	r3, [pc, #60]	(f8d8 <_ZN10ActionGoToC2E8Positionbf+0x64>)
    f89a:	6013      	str	r3, [r2, #0]
    f89c:	68fb      	ldr	r3, [r7, #12]
    f89e:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f8a2:	4618      	mov	r0, r3
    f8a4:	f7ff fa62 	bl	ed6c <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f8a8:	68fa      	ldr	r2, [r7, #12]
    f8aa:	78fb      	ldrb	r3, [r7, #3]
    f8ac:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f8ae:	68fa      	ldr	r2, [r7, #12]
    f8b0:	4b0a      	ldr	r3, [pc, #40]	(f8dc <_ZN10ActionGoToC2E8Positionbf+0x68>)
    f8b2:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f8b4:	68fa      	ldr	r2, [r7, #12]
    f8b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f8ba:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f8bc:	68fa      	ldr	r2, [r7, #12]
    f8be:	f04f 0301 	mov.w	r3, #1	; 0x1
    f8c2:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f8c4:	68fa      	ldr	r2, [r7, #12]
    f8c6:	69bb      	ldr	r3, [r7, #24]
    f8c8:	6253      	str	r3, [r2, #36]
}
    f8ca:	68fb      	ldr	r3, [r7, #12]
    f8cc:	4618      	mov	r0, r3
    f8ce:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f8d2:	46bd      	mov	sp, r7
    f8d4:	bd80      	pop	{r7, pc}
    f8d6:	46c0      	nop			(mov r8, r8)
    f8d8:	000223b8 	.word	0x000223b8
    f8dc:	00000000 	.word	0x00000000

0000f8e0 <_ZN4Clap6updateEv>:
}


Clap::~Clap(){}

int Clap::update()
    f8e0:	b590      	push	{r4, r7, lr}
    f8e2:	b085      	sub	sp, #20
    f8e4:	af02      	add	r7, sp, #8
    f8e6:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
    f8e8:	687b      	ldr	r3, [r7, #4]
    f8ea:	68db      	ldr	r3, [r3, #12]
    f8ec:	2b00      	cmp	r3, #0
    f8ee:	d106      	bne.n	f8fe <_ZN4Clap6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "clap";
        #endif
        status++;
    f8f0:	687b      	ldr	r3, [r7, #4]
    f8f2:	68db      	ldr	r3, [r3, #12]
    f8f4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f8f8:	687b      	ldr	r3, [r7, #4]
    f8fa:	60da      	str	r2, [r3, #12]
    f8fc:	e105      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 1)
    f8fe:	687b      	ldr	r3, [r7, #4]
    f900:	68db      	ldr	r3, [r3, #12]
    f902:	2b01      	cmp	r3, #1
    f904:	d114      	bne.n	f930 <_ZN4Clap6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
    f906:	687b      	ldr	r3, [r7, #4]
    f908:	f893 c010 	ldrb.w	ip, [r3, #16]
    f90c:	687a      	ldr	r2, [r7, #4]
    f90e:	4b82      	ldr	r3, [pc, #520]	(fb18 <_ZN4Clap6updateEv+0x238>)
    f910:	9300      	str	r3, [sp, #0]
    f912:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f916:	e893 0003 	ldmia.w	r3, {r0, r1}
    f91a:	4662      	mov	r2, ip
    f91c:	4b7f      	ldr	r3, [pc, #508]	(fb1c <_ZN4Clap6updateEv+0x23c>)
    f91e:	f006 fcfd 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f922:	687b      	ldr	r3, [r7, #4]
    f924:	68db      	ldr	r3, [r3, #12]
    f926:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f92a:	687b      	ldr	r3, [r7, #4]
    f92c:	60da      	str	r2, [r3, #12]
    f92e:	e0ec      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 2)
    f930:	687b      	ldr	r3, [r7, #4]
    f932:	68db      	ldr	r3, [r3, #12]
    f934:	2b02      	cmp	r3, #2
    f936:	d11a      	bne.n	f96e <_ZN4Clap6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition))
    f938:	687b      	ldr	r3, [r7, #4]
    f93a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f93e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f942:	4a77      	ldr	r2, [pc, #476]	(fb20 <_ZN4Clap6updateEv+0x240>)
    f944:	f7f8 fd9e 	bl	8484 <_ZN7Command6isNearE8Positionf>
    f948:	4603      	mov	r3, r0
    f94a:	2b00      	cmp	r3, #0
    f94c:	f000 80dd 	beq.w	fb0a <_ZN4Clap6updateEv+0x22a>
        {
            StrategieV2::lookAt(positionArrivee);
    f950:	687b      	ldr	r3, [r7, #4]
    f952:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f956:	e893 0003 	ldmia.w	r3, {r0, r1}
    f95a:	4a72      	ldr	r2, [pc, #456]	(fb24 <_ZN4Clap6updateEv+0x244>)
    f95c:	f006 fc46 	bl	161ec <_ZN11StrategieV26lookAtE8Positionf>
            status++;
    f960:	687b      	ldr	r3, [r7, #4]
    f962:	68db      	ldr	r3, [r3, #12]
    f964:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f968:	687b      	ldr	r3, [r7, #4]
    f96a:	60da      	str	r2, [r3, #12]
    f96c:	e0cd      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if (status == 3)
    f96e:	687b      	ldr	r3, [r7, #4]
    f970:	68db      	ldr	r3, [r3, #12]
    f972:	2b03      	cmp	r3, #3
    f974:	d143      	bne.n	f9fe <_ZN4Clap6updateEv+0x11e>
    {
        if (Command::isLookingAt(positionArrivee))
    f976:	687b      	ldr	r3, [r7, #4]
    f978:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f97c:	e893 0003 	ldmia.w	r3, {r0, r1}
    f980:	4a69      	ldr	r2, [pc, #420]	(fb28 <_ZN4Clap6updateEv+0x248>)
    f982:	f7f8 fcc3 	bl	830c <_ZN7Command11isLookingAtE8Positionf>
    f986:	4603      	mov	r3, r0
    f988:	2b00      	cmp	r3, #0
    f98a:	f000 80be 	beq.w	fb0a <_ZN4Clap6updateEv+0x22a>
        {
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f98e:	687b      	ldr	r3, [r7, #4]
    f990:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f994:	4618      	mov	r0, r3
    f996:	f7ff fa25 	bl	ede4 <_ZNK8Position4getXEv>
    f99a:	4604      	mov	r4, r0
    f99c:	687b      	ldr	r3, [r7, #4]
    f99e:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f9a2:	4618      	mov	r0, r3
    f9a4:	f7ff fa1e 	bl	ede4 <_ZNK8Position4getXEv>
    f9a8:	4603      	mov	r3, r0
    f9aa:	4620      	mov	r0, r4
    f9ac:	4619      	mov	r1, r3
    f9ae:	f00b fb7b 	bl	1b0a8 <__aeabi_fsub>
    f9b2:	4603      	mov	r3, r0
    f9b4:	461a      	mov	r2, r3
    f9b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f9ba:	70fb      	strb	r3, [r7, #3]
    f9bc:	4610      	mov	r0, r2
    f9be:	495b      	ldr	r1, [pc, #364]	(fb2c <_ZN4Clap6updateEv+0x24c>)
    f9c0:	f00b fe36 	bl	1b630 <__aeabi_fcmpgt>
    f9c4:	4603      	mov	r3, r0
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d002      	beq.n	f9d0 <_ZN4Clap6updateEv+0xf0>
    f9ca:	f04f 0301 	mov.w	r3, #1	; 0x1
    f9ce:	70fb      	strb	r3, [r7, #3]
    f9d0:	78fb      	ldrb	r3, [r7, #3]
    f9d2:	2b00      	cmp	r3, #0
    f9d4:	d006      	beq.n	f9e4 <_ZN4Clap6updateEv+0x104>
                BrasLateraux::getRight()->expand();
    f9d6:	f7f5 fee3 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    f9da:	4603      	mov	r3, r0
    f9dc:	4618      	mov	r0, r3
    f9de:	f7f5 fe17 	bl	5610 <_ZN12BrasLateraux6expandEv>
    f9e2:	e005      	b.n	f9f0 <_ZN4Clap6updateEv+0x110>
            else
                BrasLateraux::getLeft()->expand();
    f9e4:	f7f5 feec 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    f9e8:	4603      	mov	r3, r0
    f9ea:	4618      	mov	r0, r3
    f9ec:	f7f5 fe10 	bl	5610 <_ZN12BrasLateraux6expandEv>
            status++;
    f9f0:	687b      	ldr	r3, [r7, #4]
    f9f2:	68db      	ldr	r3, [r3, #12]
    f9f4:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f9f8:	687b      	ldr	r3, [r7, #4]
    f9fa:	60da      	str	r2, [r3, #12]
    f9fc:	e085      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que le bras du robot s'ouvre : 50ms par incrémentation du status
    f9fe:	687b      	ldr	r3, [r7, #4]
    fa00:	68db      	ldr	r3, [r3, #12]
    fa02:	2b35      	cmp	r3, #53
    fa04:	dc0a      	bgt.n	fa1c <_ZN4Clap6updateEv+0x13c>
    fa06:	687b      	ldr	r3, [r7, #4]
    fa08:	68db      	ldr	r3, [r3, #12]
    fa0a:	2b00      	cmp	r3, #0
    fa0c:	db06      	blt.n	fa1c <_ZN4Clap6updateEv+0x13c>
    {
        status++;
    fa0e:	687b      	ldr	r3, [r7, #4]
    fa10:	68db      	ldr	r3, [r3, #12]
    fa12:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fa16:	687b      	ldr	r3, [r7, #4]
    fa18:	60da      	str	r2, [r3, #12]
    fa1a:	e076      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 54)
    fa1c:	687b      	ldr	r3, [r7, #4]
    fa1e:	68db      	ldr	r3, [r3, #12]
    fa20:	2b36      	cmp	r3, #54
    fa22:	d114      	bne.n	fa4e <_ZN4Clap6updateEv+0x16e>
    {
        StrategieV2::setCurrentGoal(positionArrivee, goBack);
    fa24:	687b      	ldr	r3, [r7, #4]
    fa26:	f893 c010 	ldrb.w	ip, [r3, #16]
    fa2a:	687a      	ldr	r2, [r7, #4]
    fa2c:	4b3a      	ldr	r3, [pc, #232]	(fb18 <_ZN4Clap6updateEv+0x238>)
    fa2e:	9300      	str	r3, [sp, #0]
    fa30:	f102 0320 	add.w	r3, r2, #32	; 0x20
    fa34:	e893 0003 	ldmia.w	r3, {r0, r1}
    fa38:	4662      	mov	r2, ip
    fa3a:	4b38      	ldr	r3, [pc, #224]	(fb1c <_ZN4Clap6updateEv+0x23c>)
    fa3c:	f006 fc6e 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    fa40:	687b      	ldr	r3, [r7, #4]
    fa42:	68db      	ldr	r3, [r3, #12]
    fa44:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fa48:	687b      	ldr	r3, [r7, #4]
    fa4a:	60da      	str	r2, [r3, #12]
    fa4c:	e05d      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 55)
    fa4e:	687b      	ldr	r3, [r7, #4]
    fa50:	68db      	ldr	r3, [r3, #12]
    fa52:	2b37      	cmp	r3, #55
    fa54:	d142      	bne.n	fadc <_ZN4Clap6updateEv+0x1fc>
    {
        if (Command::isNear(positionArrivee))
    fa56:	687b      	ldr	r3, [r7, #4]
    fa58:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fa5c:	e893 0003 	ldmia.w	r3, {r0, r1}
    fa60:	4a2f      	ldr	r2, [pc, #188]	(fb20 <_ZN4Clap6updateEv+0x240>)
    fa62:	f7f8 fd0f 	bl	8484 <_ZN7Command6isNearE8Positionf>
    fa66:	4603      	mov	r3, r0
    fa68:	2b00      	cmp	r3, #0
    fa6a:	d04e      	beq.n	fb0a <_ZN4Clap6updateEv+0x22a>
        {
            //fermer bras
            #ifndef ROBOTHW
            qDebug() << "On ferme le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    fa6c:	687b      	ldr	r3, [r7, #4]
    fa6e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    fa72:	4618      	mov	r0, r3
    fa74:	f7ff f9b6 	bl	ede4 <_ZNK8Position4getXEv>
    fa78:	4604      	mov	r4, r0
    fa7a:	687b      	ldr	r3, [r7, #4]
    fa7c:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fa80:	4618      	mov	r0, r3
    fa82:	f7ff f9af 	bl	ede4 <_ZNK8Position4getXEv>
    fa86:	4603      	mov	r3, r0
    fa88:	4620      	mov	r0, r4
    fa8a:	4619      	mov	r1, r3
    fa8c:	f00b fb0c 	bl	1b0a8 <__aeabi_fsub>
    fa90:	4603      	mov	r3, r0
    fa92:	461a      	mov	r2, r3
    fa94:	f04f 0300 	mov.w	r3, #0	; 0x0
    fa98:	70bb      	strb	r3, [r7, #2]
    fa9a:	4610      	mov	r0, r2
    fa9c:	4923      	ldr	r1, [pc, #140]	(fb2c <_ZN4Clap6updateEv+0x24c>)
    fa9e:	f00b fdc7 	bl	1b630 <__aeabi_fcmpgt>
    faa2:	4603      	mov	r3, r0
    faa4:	2b00      	cmp	r3, #0
    faa6:	d002      	beq.n	faae <_ZN4Clap6updateEv+0x1ce>
    faa8:	f04f 0301 	mov.w	r3, #1	; 0x1
    faac:	70bb      	strb	r3, [r7, #2]
    faae:	78bb      	ldrb	r3, [r7, #2]
    fab0:	2b00      	cmp	r3, #0
    fab2:	d006      	beq.n	fac2 <_ZN4Clap6updateEv+0x1e2>
                BrasLateraux::getLeft()->collapse();
    fab4:	f7f5 fe84 	bl	57c0 <_ZN12BrasLateraux7getLeftEv>
    fab8:	4603      	mov	r3, r0
    faba:	4618      	mov	r0, r3
    fabc:	f7f5 fd98 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
    fac0:	e005      	b.n	face <_ZN4Clap6updateEv+0x1ee>
            else
                BrasLateraux::getRight()->collapse();
    fac2:	f7f5 fe6d 	bl	57a0 <_ZN12BrasLateraux8getRightEv>
    fac6:	4603      	mov	r3, r0
    fac8:	4618      	mov	r0, r3
    faca:	f7f5 fd91 	bl	55f0 <_ZN12BrasLateraux8collapseEv>
            status++;
    face:	687b      	ldr	r3, [r7, #4]
    fad0:	68db      	ldr	r3, [r3, #12]
    fad2:	f103 0201 	add.w	r2, r3, #1	; 0x1
    fad6:	687b      	ldr	r3, [r7, #4]
    fad8:	60da      	str	r2, [r3, #12]
    fada:	e016      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 105) && (status > -1))
    fadc:	687b      	ldr	r3, [r7, #4]
    fade:	68db      	ldr	r3, [r3, #12]
    fae0:	2b69      	cmp	r3, #105
    fae2:	dc0a      	bgt.n	fafa <_ZN4Clap6updateEv+0x21a>
    fae4:	687b      	ldr	r3, [r7, #4]
    fae6:	68db      	ldr	r3, [r3, #12]
    fae8:	2b00      	cmp	r3, #0
    faea:	db06      	blt.n	fafa <_ZN4Clap6updateEv+0x21a>
    {
        status++;
    faec:	687b      	ldr	r3, [r7, #4]
    faee:	68db      	ldr	r3, [r3, #12]
    faf0:	f103 0201 	add.w	r2, r3, #1	; 0x1
    faf4:	687b      	ldr	r3, [r7, #4]
    faf6:	60da      	str	r2, [r3, #12]
    faf8:	e007      	b.n	fb0a <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 106){
    fafa:	687b      	ldr	r3, [r7, #4]
    fafc:	68db      	ldr	r3, [r3, #12]
    fafe:	2b6a      	cmp	r3, #106
    fb00:	d103      	bne.n	fb0a <_ZN4Clap6updateEv+0x22a>
        status = -1;
    fb02:	687a      	ldr	r2, [r7, #4]
    fb04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fb08:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape clap finie";
#endif
    }

    return status;
    fb0a:	687b      	ldr	r3, [r7, #4]
    fb0c:	68db      	ldr	r3, [r3, #12]
}
    fb0e:	4618      	mov	r0, r3
    fb10:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fb14:	46bd      	mov	sp, r7
    fb16:	bd90      	pop	{r4, r7, pc}
    fb18:	c2c80000 	.word	0xc2c80000
    fb1c:	40400000 	.word	0x40400000
    fb20:	41f00000 	.word	0x41f00000
    fb24:	3cf5c28f 	.word	0x3cf5c28f
    fb28:	3db2b8c2 	.word	0x3db2b8c2
    fb2c:	00000000 	.word	0x00000000

0000fb30 <_ZN4ClapD0Ev>:
    this->positionArrivee = positionArrivee;
    this->goBack = false;
}


Clap::~Clap(){}
    fb30:	b580      	push	{r7, lr}
    fb32:	b082      	sub	sp, #8
    fb34:	af00      	add	r7, sp, #0
    fb36:	6078      	str	r0, [r7, #4]
    fb38:	687a      	ldr	r2, [r7, #4]
    fb3a:	4b0a      	ldr	r3, [pc, #40]	(fb64 <_ZN4ClapD0Ev+0x34>)
    fb3c:	6013      	str	r3, [r2, #0]
    fb3e:	687b      	ldr	r3, [r7, #4]
    fb40:	4618      	mov	r0, r3
    fb42:	f005 fbfb 	bl	1533c <_ZN17MediumLevelActionD2Ev>
    fb46:	f04f 0301 	mov.w	r3, #1	; 0x1
    fb4a:	b2db      	uxtb	r3, r3
    fb4c:	2b00      	cmp	r3, #0
    fb4e:	d002      	beq.n	fb56 <_ZN4ClapD0Ev+0x26>
    fb50:	6878      	ldr	r0, [r7, #4]
    fb52:	f7ff f873 	bl	ec3c <_ZdlPv>
    fb56:	687b      	ldr	r3, [r7, #4]
    fb58:	4618      	mov	r0, r3
    fb5a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fb5e:	46bd      	mov	sp, r7
    fb60:	bd80      	pop	{r7, pc}
    fb62:	46c0      	nop			(mov r8, r8)
    fb64:	000223d8 	.word	0x000223d8

0000fb68 <_ZN4ClapD1Ev>:
    fb68:	b580      	push	{r7, lr}
    fb6a:	b082      	sub	sp, #8
    fb6c:	af00      	add	r7, sp, #0
    fb6e:	6078      	str	r0, [r7, #4]
    fb70:	687a      	ldr	r2, [r7, #4]
    fb72:	4b0a      	ldr	r3, [pc, #40]	(fb9c <_ZN4ClapD1Ev+0x34>)
    fb74:	6013      	str	r3, [r2, #0]
    fb76:	687b      	ldr	r3, [r7, #4]
    fb78:	4618      	mov	r0, r3
    fb7a:	f005 fbdf 	bl	1533c <_ZN17MediumLevelActionD2Ev>
    fb7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    fb82:	b2db      	uxtb	r3, r3
    fb84:	2b00      	cmp	r3, #0
    fb86:	d002      	beq.n	fb8e <_ZN4ClapD1Ev+0x26>
    fb88:	6878      	ldr	r0, [r7, #4]
    fb8a:	f7ff f857 	bl	ec3c <_ZdlPv>
    fb8e:	687b      	ldr	r3, [r7, #4]
    fb90:	4618      	mov	r0, r3
    fb92:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fb96:	46bd      	mov	sp, r7
    fb98:	bd80      	pop	{r7, pc}
    fb9a:	46c0      	nop			(mov r8, r8)
    fb9c:	000223d8 	.word	0x000223d8

0000fba0 <_ZN4ClapD2Ev>:
    fba0:	b580      	push	{r7, lr}
    fba2:	b082      	sub	sp, #8
    fba4:	af00      	add	r7, sp, #0
    fba6:	6078      	str	r0, [r7, #4]
    fba8:	687a      	ldr	r2, [r7, #4]
    fbaa:	4b0a      	ldr	r3, [pc, #40]	(fbd4 <_ZN4ClapD2Ev+0x34>)
    fbac:	6013      	str	r3, [r2, #0]
    fbae:	687b      	ldr	r3, [r7, #4]
    fbb0:	4618      	mov	r0, r3
    fbb2:	f005 fbc3 	bl	1533c <_ZN17MediumLevelActionD2Ev>
    fbb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbba:	b2db      	uxtb	r3, r3
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	d002      	beq.n	fbc6 <_ZN4ClapD2Ev+0x26>
    fbc0:	6878      	ldr	r0, [r7, #4]
    fbc2:	f7ff f83b 	bl	ec3c <_ZdlPv>
    fbc6:	687b      	ldr	r3, [r7, #4]
    fbc8:	4618      	mov	r0, r3
    fbca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fbce:	46bd      	mov	sp, r7
    fbd0:	bd80      	pop	{r7, pc}
    fbd2:	46c0      	nop			(mov r8, r8)
    fbd4:	000223d8 	.word	0x000223d8

0000fbd8 <_ZN4ClapC1E8PositionS0_>:
#include "brasLateraux.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    fbd8:	b082      	sub	sp, #8
    fbda:	b580      	push	{r7, lr}
    fbdc:	b084      	sub	sp, #16
    fbde:	af00      	add	r7, sp, #0
    fbe0:	60f8      	str	r0, [r7, #12]
    fbe2:	f107 0004 	add.w	r0, r7, #4	; 0x4
    fbe6:	e880 0006 	stmia.w	r0, {r1, r2}
    fbea:	61fb      	str	r3, [r7, #28]
    fbec:	68fb      	ldr	r3, [r7, #12]
    fbee:	4618      	mov	r0, r3
    fbf0:	f107 0304 	add.w	r3, r7, #4	; 0x4
    fbf4:	e893 0006 	ldmia.w	r3, {r1, r2}
    fbf8:	f005 fbe0 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
    fbfc:	68fa      	ldr	r2, [r7, #12]
    fbfe:	4b12      	ldr	r3, [pc, #72]	(fc48 <_ZN4ClapC1E8PositionS0_+0x70>)
    fc00:	6013      	str	r3, [r2, #0]
    fc02:	68fb      	ldr	r3, [r7, #12]
    fc04:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fc08:	4618      	mov	r0, r3
    fc0a:	f7ff f8af 	bl	ed6c <_ZN8PositionC1Ev>
    fc0e:	68fb      	ldr	r3, [r7, #12]
    fc10:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fc14:	4618      	mov	r0, r3
    fc16:	f7ff f8a9 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    fc1a:	68fb      	ldr	r3, [r7, #12]
    fc1c:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fc20:	4618      	mov	r0, r3
    fc22:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    fc26:	e893 0006 	ldmia.w	r3, {r1, r2}
    fc2a:	f7ff f95b 	bl	eee4 <_ZN8PositionaSES_>
    this->goBack = false;
    fc2e:	68fa      	ldr	r2, [r7, #12]
    fc30:	f04f 0300 	mov.w	r3, #0	; 0x0
    fc34:	7413      	strb	r3, [r2, #16]
}
    fc36:	68fb      	ldr	r3, [r7, #12]
    fc38:	4618      	mov	r0, r3
    fc3a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fc3e:	46bd      	mov	sp, r7
    fc40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fc44:	b002      	add	sp, #8
    fc46:	4770      	bx	lr
    fc48:	000223d8 	.word	0x000223d8

0000fc4c <_ZN4ClapC2E8PositionS0_>:
#include "brasLateraux.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    fc4c:	b082      	sub	sp, #8
    fc4e:	b580      	push	{r7, lr}
    fc50:	b084      	sub	sp, #16
    fc52:	af00      	add	r7, sp, #0
    fc54:	60f8      	str	r0, [r7, #12]
    fc56:	f107 0004 	add.w	r0, r7, #4	; 0x4
    fc5a:	e880 0006 	stmia.w	r0, {r1, r2}
    fc5e:	61fb      	str	r3, [r7, #28]
    fc60:	68fb      	ldr	r3, [r7, #12]
    fc62:	4618      	mov	r0, r3
    fc64:	f107 0304 	add.w	r3, r7, #4	; 0x4
    fc68:	e893 0006 	ldmia.w	r3, {r1, r2}
    fc6c:	f005 fba6 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
    fc70:	68fa      	ldr	r2, [r7, #12]
    fc72:	4b12      	ldr	r3, [pc, #72]	(fcbc <_ZN4ClapC2E8PositionS0_+0x70>)
    fc74:	6013      	str	r3, [r2, #0]
    fc76:	68fb      	ldr	r3, [r7, #12]
    fc78:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fc7c:	4618      	mov	r0, r3
    fc7e:	f7ff f875 	bl	ed6c <_ZN8PositionC1Ev>
    fc82:	68fb      	ldr	r3, [r7, #12]
    fc84:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fc88:	4618      	mov	r0, r3
    fc8a:	f7ff f86f 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    fc8e:	68fb      	ldr	r3, [r7, #12]
    fc90:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fc94:	4618      	mov	r0, r3
    fc96:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    fc9a:	e893 0006 	ldmia.w	r3, {r1, r2}
    fc9e:	f7ff f921 	bl	eee4 <_ZN8PositionaSES_>
    this->goBack = false;
    fca2:	68fa      	ldr	r2, [r7, #12]
    fca4:	f04f 0300 	mov.w	r3, #0	; 0x0
    fca8:	7413      	strb	r3, [r2, #16]
}
    fcaa:	68fb      	ldr	r3, [r7, #12]
    fcac:	4618      	mov	r0, r3
    fcae:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fcb2:	46bd      	mov	sp, r7
    fcb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fcb8:	b002      	add	sp, #8
    fcba:	4770      	bx	lr
    fcbc:	000223d8 	.word	0x000223d8

0000fcc0 <_ZN4ClapC1Ev>:
#include "command.h"
#include "position.h"
#include "brasLateraux.h"


Clap::Clap(){}
    fcc0:	b590      	push	{r4, r7, lr}
    fcc2:	b085      	sub	sp, #20
    fcc4:	af00      	add	r7, sp, #0
    fcc6:	6078      	str	r0, [r7, #4]
    fcc8:	687c      	ldr	r4, [r7, #4]
    fcca:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fcce:	4618      	mov	r0, r3
    fcd0:	4910      	ldr	r1, [pc, #64]	(fd14 <_ZN4ClapC1Ev+0x54>)
    fcd2:	4a10      	ldr	r2, [pc, #64]	(fd14 <_ZN4ClapC1Ev+0x54>)
    fcd4:	f04f 0301 	mov.w	r3, #1	; 0x1
    fcd8:	f7ff f870 	bl	edbc <_ZN8PositionC1Effb>
    fcdc:	4620      	mov	r0, r4
    fcde:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fce2:	e893 0006 	ldmia.w	r3, {r1, r2}
    fce6:	f005 fb69 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
    fcea:	687a      	ldr	r2, [r7, #4]
    fcec:	4b0a      	ldr	r3, [pc, #40]	(fd18 <_ZN4ClapC1Ev+0x58>)
    fcee:	6013      	str	r3, [r2, #0]
    fcf0:	687b      	ldr	r3, [r7, #4]
    fcf2:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fcf6:	4618      	mov	r0, r3
    fcf8:	f7ff f838 	bl	ed6c <_ZN8PositionC1Ev>
    fcfc:	687b      	ldr	r3, [r7, #4]
    fcfe:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fd02:	4618      	mov	r0, r3
    fd04:	f7ff f832 	bl	ed6c <_ZN8PositionC1Ev>
    fd08:	687b      	ldr	r3, [r7, #4]
    fd0a:	4618      	mov	r0, r3
    fd0c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    fd10:	46bd      	mov	sp, r7
    fd12:	bd90      	pop	{r4, r7, pc}
    fd14:	00000000 	.word	0x00000000
    fd18:	000223d8 	.word	0x000223d8

0000fd1c <_ZN4ClapC2Ev>:
    fd1c:	b590      	push	{r4, r7, lr}
    fd1e:	b085      	sub	sp, #20
    fd20:	af00      	add	r7, sp, #0
    fd22:	6078      	str	r0, [r7, #4]
    fd24:	687c      	ldr	r4, [r7, #4]
    fd26:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fd2a:	4618      	mov	r0, r3
    fd2c:	4910      	ldr	r1, [pc, #64]	(fd70 <_ZN4ClapC2Ev+0x54>)
    fd2e:	4a10      	ldr	r2, [pc, #64]	(fd70 <_ZN4ClapC2Ev+0x54>)
    fd30:	f04f 0301 	mov.w	r3, #1	; 0x1
    fd34:	f7ff f842 	bl	edbc <_ZN8PositionC1Effb>
    fd38:	4620      	mov	r0, r4
    fd3a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fd3e:	e893 0006 	ldmia.w	r3, {r1, r2}
    fd42:	f005 fb3b 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
    fd46:	687a      	ldr	r2, [r7, #4]
    fd48:	4b0a      	ldr	r3, [pc, #40]	(fd74 <_ZN4ClapC2Ev+0x58>)
    fd4a:	6013      	str	r3, [r2, #0]
    fd4c:	687b      	ldr	r3, [r7, #4]
    fd4e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fd52:	4618      	mov	r0, r3
    fd54:	f7ff f80a 	bl	ed6c <_ZN8PositionC1Ev>
    fd58:	687b      	ldr	r3, [r7, #4]
    fd5a:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fd5e:	4618      	mov	r0, r3
    fd60:	f7ff f804 	bl	ed6c <_ZN8PositionC1Ev>
    fd64:	687b      	ldr	r3, [r7, #4]
    fd66:	4618      	mov	r0, r3
    fd68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    fd6c:	46bd      	mov	sp, r7
    fd6e:	bd90      	pop	{r4, r7, pc}
    fd70:	00000000 	.word	0x00000000
    fd74:	000223d8 	.word	0x000223d8

0000fd78 <_ZN8DijkstraC2Ev>:
//http://fr.wikipedia.org/wiki/Algorithme_de_Dijkstra

#include "dijkstra.h"
#include <math.h>

Dijkstra::Dijkstra(){}
    fd78:	b480      	push	{r7}
    fd7a:	b083      	sub	sp, #12
    fd7c:	af00      	add	r7, sp, #0
    fd7e:	6078      	str	r0, [r7, #4]
    fd80:	687b      	ldr	r3, [r7, #4]
    fd82:	4618      	mov	r0, r3
    fd84:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fd88:	46bd      	mov	sp, r7
    fd8a:	bc80      	pop	{r7}
    fd8c:	4770      	bx	lr
    fd8e:	46c0      	nop			(mov r8, r8)

0000fd90 <_ZN8DijkstraC1Ev>:
    fd90:	b480      	push	{r7}
    fd92:	b083      	sub	sp, #12
    fd94:	af00      	add	r7, sp, #0
    fd96:	6078      	str	r0, [r7, #4]
    fd98:	687b      	ldr	r3, [r7, #4]
    fd9a:	4618      	mov	r0, r3
    fd9c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fda0:	46bd      	mov	sp, r7
    fda2:	bc80      	pop	{r7}
    fda4:	4770      	bx	lr
    fda6:	46c0      	nop			(mov r8, r8)

0000fda8 <_ZN8DijkstraC2EPP5Etapei>:


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    fda8:	b480      	push	{r7}
    fdaa:	b085      	sub	sp, #20
    fdac:	af00      	add	r7, sp, #0
    fdae:	60f8      	str	r0, [r7, #12]
    fdb0:	60b9      	str	r1, [r7, #8]
    fdb2:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    fdb4:	68fa      	ldr	r2, [r7, #12]
    fdb6:	68bb      	ldr	r3, [r7, #8]
    fdb8:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    fdba:	68fa      	ldr	r2, [r7, #12]
    fdbc:	687b      	ldr	r3, [r7, #4]
    fdbe:	6053      	str	r3, [r2, #4]
}
    fdc0:	68fb      	ldr	r3, [r7, #12]
    fdc2:	4618      	mov	r0, r3
    fdc4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    fdc8:	46bd      	mov	sp, r7
    fdca:	bc80      	pop	{r7}
    fdcc:	4770      	bx	lr
    fdce:	46c0      	nop			(mov r8, r8)

0000fdd0 <_ZN8DijkstraC1EPP5Etapei>:
#include <math.h>

Dijkstra::Dijkstra(){}


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    fdd0:	b480      	push	{r7}
    fdd2:	b085      	sub	sp, #20
    fdd4:	af00      	add	r7, sp, #0
    fdd6:	60f8      	str	r0, [r7, #12]
    fdd8:	60b9      	str	r1, [r7, #8]
    fdda:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    fddc:	68fa      	ldr	r2, [r7, #12]
    fdde:	68bb      	ldr	r3, [r7, #8]
    fde0:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    fde2:	68fa      	ldr	r2, [r7, #12]
    fde4:	687b      	ldr	r3, [r7, #4]
    fde6:	6053      	str	r3, [r2, #4]
}
    fde8:	68fb      	ldr	r3, [r7, #12]
    fdea:	4618      	mov	r0, r3
    fdec:	f107 0714 	add.w	r7, r7, #20	; 0x14
    fdf0:	46bd      	mov	sp, r7
    fdf2:	bc80      	pop	{r7}
    fdf4:	4770      	bx	lr
    fdf6:	46c0      	nop			(mov r8, r8)

0000fdf8 <_ZN8Dijkstra16getEtapeCouranteEv>:

Etape* Dijkstra::getEtapeCourante()
    fdf8:	b480      	push	{r7}
    fdfa:	b083      	sub	sp, #12
    fdfc:	af00      	add	r7, sp, #0
    fdfe:	6078      	str	r0, [r7, #4]
{
    return tableauEtapes[this->numeroEtapeCourante];
    fe00:	687b      	ldr	r3, [r7, #4]
    fe02:	681a      	ldr	r2, [r3, #0]
    fe04:	687b      	ldr	r3, [r7, #4]
    fe06:	689b      	ldr	r3, [r3, #8]
    fe08:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fe0c:	4413      	add	r3, r2
    fe0e:	681b      	ldr	r3, [r3, #0]
}
    fe10:	4618      	mov	r0, r3
    fe12:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe16:	46bd      	mov	sp, r7
    fe18:	bc80      	pop	{r7}
    fe1a:	4770      	bx	lr

0000fe1c <_ZN8Dijkstra16setEtapeCouranteEi>:
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
}

void Dijkstra::setEtapeCourante(int numeroEtapeCourante)
    fe1c:	b480      	push	{r7}
    fe1e:	b083      	sub	sp, #12
    fe20:	af00      	add	r7, sp, #0
    fe22:	6078      	str	r0, [r7, #4]
    fe24:	6039      	str	r1, [r7, #0]
{
    this->numeroEtapeCourante = numeroEtapeCourante;
    fe26:	687a      	ldr	r2, [r7, #4]
    fe28:	683b      	ldr	r3, [r7, #0]
    fe2a:	6093      	str	r3, [r2, #8]
}
    fe2c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fe30:	46bd      	mov	sp, r7
    fe32:	bc80      	pop	{r7}
    fe34:	4770      	bx	lr
    fe36:	46c0      	nop			(mov r8, r8)

0000fe38 <_ZN8Dijkstra13etapeRapporteEP5Etape>:
int Dijkstra::getDistance(Etape* etape)
{
    return etape->getDistance();
}

bool Dijkstra::etapeRapporte(Etape* etape)
    fe38:	b580      	push	{r7, lr}
    fe3a:	b082      	sub	sp, #8
    fe3c:	af00      	add	r7, sp, #0
    fe3e:	6078      	str	r0, [r7, #4]
    fe40:	6039      	str	r1, [r7, #0]
{
    return (bool) etape->getScore();
    fe42:	6838      	ldr	r0, [r7, #0]
    fe44:	f000 fd6c 	bl	10920 <_ZN5Etape8getScoreEv>
    fe48:	4603      	mov	r3, r0
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	bf0c      	ite	eq
    fe4e:	2300      	moveq	r3, #0
    fe50:	2301      	movne	r3, #1
    fe52:	b2db      	uxtb	r3, r3
}
    fe54:	4618      	mov	r0, r3
    fe56:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fe5a:	46bd      	mov	sp, r7
    fe5c:	bd80      	pop	{r7, pc}
    fe5e:	46c0      	nop			(mov r8, r8)

0000fe60 <_ZN8Dijkstra11getDistanceEP5Etape>:
int Dijkstra::getDistance(int numeroEtape)
{
    return tableauEtapes[numeroEtape]->getDistance();
}

int Dijkstra::getDistance(Etape* etape)
    fe60:	b580      	push	{r7, lr}
    fe62:	b082      	sub	sp, #8
    fe64:	af00      	add	r7, sp, #0
    fe66:	6078      	str	r0, [r7, #4]
    fe68:	6039      	str	r1, [r7, #0]
{
    return etape->getDistance();
    fe6a:	6838      	ldr	r0, [r7, #0]
    fe6c:	f000 fc42 	bl	106f4 <_ZN5Etape11getDistanceEv>
    fe70:	4603      	mov	r3, r0
}
    fe72:	4618      	mov	r0, r3
    fe74:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fe78:	46bd      	mov	sp, r7
    fe7a:	bd80      	pop	{r7, pc}

0000fe7c <_ZN8Dijkstra11getDistanceEi>:
            }
        }
    }
}

int Dijkstra::getDistance(int numeroEtape)
    fe7c:	b580      	push	{r7, lr}
    fe7e:	b082      	sub	sp, #8
    fe80:	af00      	add	r7, sp, #0
    fe82:	6078      	str	r0, [r7, #4]
    fe84:	6039      	str	r1, [r7, #0]
{
    return tableauEtapes[numeroEtape]->getDistance();
    fe86:	687b      	ldr	r3, [r7, #4]
    fe88:	681a      	ldr	r2, [r3, #0]
    fe8a:	683b      	ldr	r3, [r7, #0]
    fe8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fe90:	4413      	add	r3, r2
    fe92:	681b      	ldr	r3, [r3, #0]
    fe94:	4618      	mov	r0, r3
    fe96:	f000 fc2d 	bl	106f4 <_ZN5Etape11getDistanceEv>
    fe9a:	4603      	mov	r3, r0
}
    fe9c:	4618      	mov	r0, r3
    fe9e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    fea2:	46bd      	mov	sp, r7
    fea4:	bd80      	pop	{r7, pc}
    fea6:	46c0      	nop			(mov r8, r8)

0000fea8 <_ZN8Dijkstra18mettreAJourVoisinsEi>:
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    return numeroEtapeLaPlusProche;
}

//Met à jour les voisin de l'étape spécifiée.
void Dijkstra::mettreAJourVoisins(int numeroEtape)
    fea8:	b580      	push	{r7, lr}
    feaa:	b086      	sub	sp, #24
    feac:	af00      	add	r7, sp, #0
    feae:	6078      	str	r0, [r7, #4]
    feb0:	6039      	str	r1, [r7, #0]
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    feb2:	687b      	ldr	r3, [r7, #4]
    feb4:	681a      	ldr	r2, [r3, #0]
    feb6:	683b      	ldr	r3, [r7, #0]
    feb8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    febc:	4413      	add	r3, r2
    febe:	681b      	ldr	r3, [r3, #0]
    fec0:	4618      	mov	r0, r3
    fec2:	f000 fc17 	bl	106f4 <_ZN5Etape11getDistanceEv>
    fec6:	4603      	mov	r3, r0
    fec8:	60bb      	str	r3, [r7, #8]
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    feca:	f04f 0300 	mov.w	r3, #0	; 0x0
    fece:	617b      	str	r3, [r7, #20]
    fed0:	e075      	b.n	ffbe <_ZN8Dijkstra18mettreAJourVoisinsEi+0x116>
    {
        //Si cette étape n'est pas bannie
        //if(this->tableauEtapes[numeroEtape]->getChild(i)->getState() > -2 && ((int) this->tableauEtapes[numeroEtape]->getChild(i)->getEtapeType() < 20))
        if(!(this->tableauEtapes[numeroEtape]->getChild(i)->aEviter()))
    fed2:	687b      	ldr	r3, [r7, #4]
    fed4:	681a      	ldr	r2, [r3, #0]
    fed6:	683b      	ldr	r3, [r7, #0]
    fed8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fedc:	4413      	add	r3, r2
    fede:	681b      	ldr	r3, [r3, #0]
    fee0:	4618      	mov	r0, r3
    fee2:	6979      	ldr	r1, [r7, #20]
    fee4:	f000 fbae 	bl	10644 <_ZN5Etape8getChildEi>
    fee8:	4603      	mov	r3, r0
    feea:	4618      	mov	r0, r3
    feec:	f000 fc6a 	bl	107c4 <_ZN5Etape7aEviterEv>
    fef0:	4603      	mov	r3, r0
    fef2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fef6:	b2db      	uxtb	r3, r3
    fef8:	2b00      	cmp	r3, #0
    fefa:	d05c      	beq.n	ffb6 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
        {
            distanceChildCourant = this->tableauEtapes[numeroEtape]->getChild(i)->getDistance();
    fefc:	687b      	ldr	r3, [r7, #4]
    fefe:	681a      	ldr	r2, [r3, #0]
    ff00:	683b      	ldr	r3, [r7, #0]
    ff02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff06:	4413      	add	r3, r2
    ff08:	681b      	ldr	r3, [r3, #0]
    ff0a:	4618      	mov	r0, r3
    ff0c:	6979      	ldr	r1, [r7, #20]
    ff0e:	f000 fb99 	bl	10644 <_ZN5Etape8getChildEi>
    ff12:	4603      	mov	r3, r0
    ff14:	4618      	mov	r0, r3
    ff16:	f000 fbed 	bl	106f4 <_ZN5Etape11getDistanceEv>
    ff1a:	4603      	mov	r3, r0
    ff1c:	60fb      	str	r3, [r7, #12]
            distanceEtapeVersChild = this->tableauEtapes[numeroEtape]->getDistances()[i];
    ff1e:	687b      	ldr	r3, [r7, #4]
    ff20:	681a      	ldr	r2, [r3, #0]
    ff22:	683b      	ldr	r3, [r7, #0]
    ff24:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff28:	4413      	add	r3, r2
    ff2a:	681b      	ldr	r3, [r3, #0]
    ff2c:	4618      	mov	r0, r3
    ff2e:	f000 fc97 	bl	10860 <_ZN5Etape12getDistancesEv>
    ff32:	4602      	mov	r2, r0
    ff34:	697b      	ldr	r3, [r7, #20]
    ff36:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff3a:	4413      	add	r3, r2
    ff3c:	681b      	ldr	r3, [r3, #0]
    ff3e:	613b      	str	r3, [r7, #16]
            //distanceEtapeVersChild = calculDistanceDirect(this->tableauEtapes[numeroEtape]->getChild(i), this->tableauEtapes[numeroEtape]);
            if(!distanceEtapeVersChild)
    ff40:	693b      	ldr	r3, [r7, #16]
    ff42:	2b00      	cmp	r3, #0
    ff44:	d102      	bne.n	ff4c <_ZN8Dijkstra18mettreAJourVoisinsEi+0xa4>
                distanceEtapeVersChild = 1;//Pas de distances nulles
    ff46:	f04f 0301 	mov.w	r3, #1	; 0x1
    ff4a:	613b      	str	r3, [r7, #16]
            //Si le chemin vers ce voisin est plus court en passant par l'étape actuelle, mise à jour de ce voisin
            //Si le voisin n'avait pas encore été atteind par un chemin, alors on le met à jour aussi (distanceChildCourant == -1)
            if(distanceChildCourant == -1 || distanceChildCourant > distanceEtapeCourante + distanceEtapeVersChild)
    ff4c:	68fb      	ldr	r3, [r7, #12]
    ff4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ff52:	d005      	beq.n	ff60 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xb8>
    ff54:	68ba      	ldr	r2, [r7, #8]
    ff56:	693b      	ldr	r3, [r7, #16]
    ff58:	441a      	add	r2, r3
    ff5a:	68fb      	ldr	r3, [r7, #12]
    ff5c:	429a      	cmp	r2, r3
    ff5e:	da2a      	bge.n	ffb6 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
            {
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
    ff60:	687b      	ldr	r3, [r7, #4]
    ff62:	681a      	ldr	r2, [r3, #0]
    ff64:	683b      	ldr	r3, [r7, #0]
    ff66:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff6a:	4413      	add	r3, r2
    ff6c:	681b      	ldr	r3, [r3, #0]
    ff6e:	4618      	mov	r0, r3
    ff70:	6979      	ldr	r1, [r7, #20]
    ff72:	f000 fb67 	bl	10644 <_ZN5Etape8getChildEi>
    ff76:	4601      	mov	r1, r0
    ff78:	68ba      	ldr	r2, [r7, #8]
    ff7a:	693b      	ldr	r3, [r7, #16]
    ff7c:	4413      	add	r3, r2
    ff7e:	4608      	mov	r0, r1
    ff80:	4619      	mov	r1, r3
    ff82:	f000 fbc3 	bl	1070c <_ZN5Etape11setDistanceEi>
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
    ff86:	687b      	ldr	r3, [r7, #4]
    ff88:	681a      	ldr	r2, [r3, #0]
    ff8a:	683b      	ldr	r3, [r7, #0]
    ff8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ff90:	4413      	add	r3, r2
    ff92:	681b      	ldr	r3, [r3, #0]
    ff94:	4618      	mov	r0, r3
    ff96:	6979      	ldr	r1, [r7, #20]
    ff98:	f000 fb54 	bl	10644 <_ZN5Etape8getChildEi>
    ff9c:	4601      	mov	r1, r0
    ff9e:	687b      	ldr	r3, [r7, #4]
    ffa0:	681a      	ldr	r2, [r3, #0]
    ffa2:	687b      	ldr	r3, [r7, #4]
    ffa4:	689b      	ldr	r3, [r3, #8]
    ffa6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ffaa:	4413      	add	r3, r2
    ffac:	681b      	ldr	r3, [r3, #0]
    ffae:	4608      	mov	r0, r1
    ffb0:	4619      	mov	r1, r3
    ffb2:	f000 fbb9 	bl	10728 <_ZN5Etape9setParentEPS_>
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    ffb6:	697b      	ldr	r3, [r7, #20]
    ffb8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ffbc:	617b      	str	r3, [r7, #20]
    ffbe:	687b      	ldr	r3, [r7, #4]
    ffc0:	681a      	ldr	r2, [r3, #0]
    ffc2:	683b      	ldr	r3, [r7, #0]
    ffc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ffc8:	4413      	add	r3, r2
    ffca:	681b      	ldr	r3, [r3, #0]
    ffcc:	4618      	mov	r0, r3
    ffce:	f000 fbb9 	bl	10744 <_ZN5Etape13getNbChildrenEv>
    ffd2:	4602      	mov	r2, r0
    ffd4:	697b      	ldr	r3, [r7, #20]
    ffd6:	429a      	cmp	r2, r3
    ffd8:	bfd4      	ite	le
    ffda:	2300      	movle	r3, #0
    ffdc:	2301      	movgt	r3, #1
    ffde:	b2db      	uxtb	r3, r3
    ffe0:	2b00      	cmp	r3, #0
    ffe2:	f47f af76 	bne.w	fed2 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x2a>
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
            }
        }
    }
}
    ffe6:	f107 0718 	add.w	r7, r7, #24	; 0x18
    ffea:	46bd      	mov	sp, r7
    ffec:	bd80      	pop	{r7, pc}
    ffee:	46c0      	nop			(mov r8, r8)

0000fff0 <_ZN8Dijkstra11initialiserEv>:
    }
    return 0;*/
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
    fff0:	b580      	push	{r7, lr}
    fff2:	b084      	sub	sp, #16
    fff4:	af00      	add	r7, sp, #0
    fff6:	6078      	str	r0, [r7, #4]
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    fff8:	f04f 0300 	mov.w	r3, #0	; 0x0
    fffc:	60fb      	str	r3, [r7, #12]
    fffe:	e038      	b.n	10072 <_ZN8Dijkstra11initialiserEv+0x82>
    {
        this->tableauEtapes[i]->setDistance(-1);
   10000:	687b      	ldr	r3, [r7, #4]
   10002:	681a      	ldr	r2, [r3, #0]
   10004:	68fb      	ldr	r3, [r7, #12]
   10006:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1000a:	4413      	add	r3, r2
   1000c:	681b      	ldr	r3, [r3, #0]
   1000e:	4618      	mov	r0, r3
   10010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10014:	f000 fb7a 	bl	1070c <_ZN5Etape11setDistanceEi>
        if(!(this->tableauEtapes[i]->aEviter()))//getState() != -2)
   10018:	687b      	ldr	r3, [r7, #4]
   1001a:	681a      	ldr	r2, [r3, #0]
   1001c:	68fb      	ldr	r3, [r7, #12]
   1001e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10022:	4413      	add	r3, r2
   10024:	681b      	ldr	r3, [r3, #0]
   10026:	4618      	mov	r0, r3
   10028:	f000 fbcc 	bl	107c4 <_ZN5Etape7aEviterEv>
   1002c:	4603      	mov	r3, r0
   1002e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10032:	b2db      	uxtb	r3, r3
   10034:	2b00      	cmp	r3, #0
   10036:	d00c      	beq.n	10052 <_ZN8Dijkstra11initialiserEv+0x62>
        {
            this->tableauEtapes[i]->setState(-1);
   10038:	687b      	ldr	r3, [r7, #4]
   1003a:	681a      	ldr	r2, [r3, #0]
   1003c:	68fb      	ldr	r3, [r7, #12]
   1003e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10042:	4413      	add	r3, r2
   10044:	681b      	ldr	r3, [r3, #0]
   10046:	4618      	mov	r0, r3
   10048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1004c:	f000 fb44 	bl	106d8 <_ZN5Etape8setStateEi>
   10050:	e00b      	b.n	1006a <_ZN8Dijkstra11initialiserEv+0x7a>
        }
        else
        {
            this->tableauEtapes[i]->setState(-2);
   10052:	687b      	ldr	r3, [r7, #4]
   10054:	681a      	ldr	r2, [r3, #0]
   10056:	68fb      	ldr	r3, [r7, #12]
   10058:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1005c:	4413      	add	r3, r2
   1005e:	681b      	ldr	r3, [r3, #0]
   10060:	4618      	mov	r0, r3
   10062:	f06f 0101 	mvn.w	r1, #1	; 0x1
   10066:	f000 fb37 	bl	106d8 <_ZN5Etape8setStateEi>
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
   1006a:	68fb      	ldr	r3, [r7, #12]
   1006c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10070:	60fb      	str	r3, [r7, #12]
   10072:	687b      	ldr	r3, [r7, #4]
   10074:	685a      	ldr	r2, [r3, #4]
   10076:	68fb      	ldr	r3, [r7, #12]
   10078:	429a      	cmp	r2, r3
   1007a:	dcc1      	bgt.n	10000 <_ZN8Dijkstra11initialiserEv+0x10>
        else
        {
            this->tableauEtapes[i]->setState(-2);
        }
    }
    this->tableauEtapes[this->numeroEtapeCourante]->setDistance(0);
   1007c:	687b      	ldr	r3, [r7, #4]
   1007e:	681a      	ldr	r2, [r3, #0]
   10080:	687b      	ldr	r3, [r7, #4]
   10082:	689b      	ldr	r3, [r3, #8]
   10084:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10088:	4413      	add	r3, r2
   1008a:	681b      	ldr	r3, [r3, #0]
   1008c:	4618      	mov	r0, r3
   1008e:	f04f 0100 	mov.w	r1, #0	; 0x0
   10092:	f000 fb3b 	bl	1070c <_ZN5Etape11setDistanceEi>
    this->tableauEtapes[this->numeroEtapeCourante]->setState(0);
   10096:	687b      	ldr	r3, [r7, #4]
   10098:	681a      	ldr	r2, [r3, #0]
   1009a:	687b      	ldr	r3, [r7, #4]
   1009c:	689b      	ldr	r3, [r3, #8]
   1009e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   100a2:	4413      	add	r3, r2
   100a4:	681b      	ldr	r3, [r3, #0]
   100a6:	4618      	mov	r0, r3
   100a8:	f04f 0100 	mov.w	r1, #0	; 0x0
   100ac:	f000 fb14 	bl	106d8 <_ZN5Etape8setStateEi>
}
   100b0:	f107 0710 	add.w	r7, r7, #16	; 0x10
   100b4:	46bd      	mov	sp, r7
   100b6:	bd80      	pop	{r7, pc}

000100b8 <_ZN8Dijkstra10trouverMinEi>:

// Renvoi le numéro de l'étape la plus proche dont on n'a pas encore mis à jour les voisins
int Dijkstra::trouverMin(int classementEtapeMinimale)
   100b8:	b580      	push	{r7, lr}
   100ba:	b0a2      	sub	sp, #136
   100bc:	af00      	add	r7, sp, #0
   100be:	6178      	str	r0, [r7, #20]
   100c0:	6139      	str	r1, [r7, #16]
{
    int minimum = -1;
   100c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   100c6:	61bb      	str	r3, [r7, #24]
    int numeroEtapeLaPlusProche = -1;
   100c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   100cc:	61fb      	str	r3, [r7, #28]

    for(int i = 0 ; i < this->nombreEtapes ; i++)
   100ce:	f04f 0300 	mov.w	r3, #0	; 0x0
   100d2:	67bb      	str	r3, [r7, #120]
   100d4:	e05c      	b.n	10190 <_ZN8Dijkstra10trouverMinEi+0xd8>
    {
        if(this->tableauEtapes[i]->getState()==-1 && (!(this->tableauEtapes[i]->aEviter())) && (!(this->tableauEtapes[i]->getDistance()==-1)) && (minimum == -1 || this->tableauEtapes[i]->getDistance() < minimum))
   100d6:	697b      	ldr	r3, [r7, #20]
   100d8:	681a      	ldr	r2, [r3, #0]
   100da:	6fbb      	ldr	r3, [r7, #120]
   100dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   100e0:	4413      	add	r3, r2
   100e2:	681b      	ldr	r3, [r3, #0]
   100e4:	4618      	mov	r0, r3
   100e6:	f000 faeb 	bl	106c0 <_ZN5Etape8getStateEv>
   100ea:	4603      	mov	r3, r0
   100ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   100f0:	d136      	bne.n	10160 <_ZN8Dijkstra10trouverMinEi+0xa8>
   100f2:	697b      	ldr	r3, [r7, #20]
   100f4:	681a      	ldr	r2, [r3, #0]
   100f6:	6fbb      	ldr	r3, [r7, #120]
   100f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   100fc:	4413      	add	r3, r2
   100fe:	681b      	ldr	r3, [r3, #0]
   10100:	4618      	mov	r0, r3
   10102:	f000 fb5f 	bl	107c4 <_ZN5Etape7aEviterEv>
   10106:	4603      	mov	r3, r0
   10108:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   1010c:	b2db      	uxtb	r3, r3
   1010e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10112:	b2db      	uxtb	r3, r3
   10114:	2b00      	cmp	r3, #0
   10116:	d123      	bne.n	10160 <_ZN8Dijkstra10trouverMinEi+0xa8>
   10118:	697b      	ldr	r3, [r7, #20]
   1011a:	681a      	ldr	r2, [r3, #0]
   1011c:	6fbb      	ldr	r3, [r7, #120]
   1011e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10122:	4413      	add	r3, r2
   10124:	681b      	ldr	r3, [r3, #0]
   10126:	4618      	mov	r0, r3
   10128:	f000 fae4 	bl	106f4 <_ZN5Etape11getDistanceEv>
   1012c:	4603      	mov	r3, r0
   1012e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10132:	d015      	beq.n	10160 <_ZN8Dijkstra10trouverMinEi+0xa8>
   10134:	69bb      	ldr	r3, [r7, #24]
   10136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1013a:	d00d      	beq.n	10158 <_ZN8Dijkstra10trouverMinEi+0xa0>
   1013c:	697b      	ldr	r3, [r7, #20]
   1013e:	681a      	ldr	r2, [r3, #0]
   10140:	6fbb      	ldr	r3, [r7, #120]
   10142:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10146:	4413      	add	r3, r2
   10148:	681b      	ldr	r3, [r3, #0]
   1014a:	4618      	mov	r0, r3
   1014c:	f000 fad2 	bl	106f4 <_ZN5Etape11getDistanceEv>
   10150:	4602      	mov	r2, r0
   10152:	69bb      	ldr	r3, [r7, #24]
   10154:	429a      	cmp	r2, r3
   10156:	da03      	bge.n	10160 <_ZN8Dijkstra10trouverMinEi+0xa8>
   10158:	f04f 0301 	mov.w	r3, #1	; 0x1
   1015c:	607b      	str	r3, [r7, #4]
   1015e:	e002      	b.n	10166 <_ZN8Dijkstra10trouverMinEi+0xae>
   10160:	f04f 0300 	mov.w	r3, #0	; 0x0
   10164:	607b      	str	r3, [r7, #4]
   10166:	687b      	ldr	r3, [r7, #4]
   10168:	2b00      	cmp	r3, #0
   1016a:	d00d      	beq.n	10188 <_ZN8Dijkstra10trouverMinEi+0xd0>
        {
            minimum = this->tableauEtapes[i]->getDistance();
   1016c:	697b      	ldr	r3, [r7, #20]
   1016e:	681a      	ldr	r2, [r3, #0]
   10170:	6fbb      	ldr	r3, [r7, #120]
   10172:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10176:	4413      	add	r3, r2
   10178:	681b      	ldr	r3, [r3, #0]
   1017a:	4618      	mov	r0, r3
   1017c:	f000 faba 	bl	106f4 <_ZN5Etape11getDistanceEv>
   10180:	4603      	mov	r3, r0
   10182:	61bb      	str	r3, [r7, #24]
            numeroEtapeLaPlusProche = i;
   10184:	6fbb      	ldr	r3, [r7, #120]
   10186:	61fb      	str	r3, [r7, #28]
int Dijkstra::trouverMin(int classementEtapeMinimale)
{
    int minimum = -1;
    int numeroEtapeLaPlusProche = -1;

    for(int i = 0 ; i < this->nombreEtapes ; i++)
   10188:	6fbb      	ldr	r3, [r7, #120]
   1018a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1018e:	67bb      	str	r3, [r7, #120]
   10190:	697b      	ldr	r3, [r7, #20]
   10192:	685a      	ldr	r2, [r3, #4]
   10194:	6fbb      	ldr	r3, [r7, #120]
   10196:	429a      	cmp	r2, r3
   10198:	dc9d      	bgt.n	100d6 <_ZN8Dijkstra10trouverMinEi+0x1e>
        }
    }
    /*TODO: WHAT THE HELL IS THAT ???*/


    Etape* etape1 = this->tableauEtapes[0];
   1019a:	697b      	ldr	r3, [r7, #20]
   1019c:	681b      	ldr	r3, [r3, #0]
   1019e:	681b      	ldr	r3, [r3, #0]
   101a0:	623b      	str	r3, [r7, #32]
    Etape* etape2 = this->tableauEtapes[1];
   101a2:	697b      	ldr	r3, [r7, #20]
   101a4:	681b      	ldr	r3, [r3, #0]
   101a6:	f103 0304 	add.w	r3, r3, #4	; 0x4
   101aa:	681b      	ldr	r3, [r3, #0]
   101ac:	627b      	str	r3, [r7, #36]
    Etape* etape3 = this->tableauEtapes[2];
   101ae:	697b      	ldr	r3, [r7, #20]
   101b0:	681b      	ldr	r3, [r3, #0]
   101b2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   101b6:	681b      	ldr	r3, [r3, #0]
   101b8:	62bb      	str	r3, [r7, #40]
    Etape* etape4 = this->tableauEtapes[3];
   101ba:	697b      	ldr	r3, [r7, #20]
   101bc:	681b      	ldr	r3, [r3, #0]
   101be:	f103 030c 	add.w	r3, r3, #12	; 0xc
   101c2:	681b      	ldr	r3, [r3, #0]
   101c4:	62fb      	str	r3, [r7, #44]
    Etape* etape5 = this->tableauEtapes[4];
   101c6:	697b      	ldr	r3, [r7, #20]
   101c8:	681b      	ldr	r3, [r3, #0]
   101ca:	f103 0310 	add.w	r3, r3, #16	; 0x10
   101ce:	681b      	ldr	r3, [r3, #0]
   101d0:	633b      	str	r3, [r7, #48]
    Etape* etape6 = this->tableauEtapes[5];
   101d2:	697b      	ldr	r3, [r7, #20]
   101d4:	681b      	ldr	r3, [r3, #0]
   101d6:	f103 0314 	add.w	r3, r3, #20	; 0x14
   101da:	681b      	ldr	r3, [r3, #0]
   101dc:	637b      	str	r3, [r7, #52]
    Etape* etape7 = this->tableauEtapes[6];
   101de:	697b      	ldr	r3, [r7, #20]
   101e0:	681b      	ldr	r3, [r3, #0]
   101e2:	f103 0318 	add.w	r3, r3, #24	; 0x18
   101e6:	681b      	ldr	r3, [r3, #0]
   101e8:	63bb      	str	r3, [r7, #56]
    Etape* etape8 = this->tableauEtapes[7];
   101ea:	697b      	ldr	r3, [r7, #20]
   101ec:	681b      	ldr	r3, [r3, #0]
   101ee:	f103 031c 	add.w	r3, r3, #28	; 0x1c
   101f2:	681b      	ldr	r3, [r3, #0]
   101f4:	63fb      	str	r3, [r7, #60]
    Etape* etape9 = this->tableauEtapes[8];
   101f6:	697b      	ldr	r3, [r7, #20]
   101f8:	681b      	ldr	r3, [r3, #0]
   101fa:	f103 0320 	add.w	r3, r3, #32	; 0x20
   101fe:	681b      	ldr	r3, [r3, #0]
   10200:	643b      	str	r3, [r7, #64]
    Etape* etape10 = this->tableauEtapes[9];
   10202:	697b      	ldr	r3, [r7, #20]
   10204:	681b      	ldr	r3, [r3, #0]
   10206:	f103 0324 	add.w	r3, r3, #36	; 0x24
   1020a:	681b      	ldr	r3, [r3, #0]
   1020c:	647b      	str	r3, [r7, #68]
    Etape* etape11 = this->tableauEtapes[10];
   1020e:	697b      	ldr	r3, [r7, #20]
   10210:	681b      	ldr	r3, [r3, #0]
   10212:	f103 0328 	add.w	r3, r3, #40	; 0x28
   10216:	681b      	ldr	r3, [r3, #0]
   10218:	64bb      	str	r3, [r7, #72]
    Etape* etape12 = this->tableauEtapes[11];
   1021a:	697b      	ldr	r3, [r7, #20]
   1021c:	681b      	ldr	r3, [r3, #0]
   1021e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   10222:	681b      	ldr	r3, [r3, #0]
   10224:	64fb      	str	r3, [r7, #76]
    Etape* etape13 = this->tableauEtapes[12];
   10226:	697b      	ldr	r3, [r7, #20]
   10228:	681b      	ldr	r3, [r3, #0]
   1022a:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1022e:	681b      	ldr	r3, [r3, #0]
   10230:	653b      	str	r3, [r7, #80]
    Etape* etape14 = this->tableauEtapes[13];
   10232:	697b      	ldr	r3, [r7, #20]
   10234:	681b      	ldr	r3, [r3, #0]
   10236:	f103 0334 	add.w	r3, r3, #52	; 0x34
   1023a:	681b      	ldr	r3, [r3, #0]
   1023c:	657b      	str	r3, [r7, #84]
    Etape* etape15 = this->tableauEtapes[14];
   1023e:	697b      	ldr	r3, [r7, #20]
   10240:	681b      	ldr	r3, [r3, #0]
   10242:	f103 0338 	add.w	r3, r3, #56	; 0x38
   10246:	681b      	ldr	r3, [r3, #0]
   10248:	65bb      	str	r3, [r7, #88]
    Etape* etape16 = this->tableauEtapes[15];
   1024a:	697b      	ldr	r3, [r7, #20]
   1024c:	681b      	ldr	r3, [r3, #0]
   1024e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
   10252:	681b      	ldr	r3, [r3, #0]
   10254:	65fb      	str	r3, [r7, #92]
    Etape* etape17 = this->tableauEtapes[16];
   10256:	697b      	ldr	r3, [r7, #20]
   10258:	681b      	ldr	r3, [r3, #0]
   1025a:	f103 0340 	add.w	r3, r3, #64	; 0x40
   1025e:	681b      	ldr	r3, [r3, #0]
   10260:	663b      	str	r3, [r7, #96]
    Etape* etape18 = this->tableauEtapes[17];
   10262:	697b      	ldr	r3, [r7, #20]
   10264:	681b      	ldr	r3, [r3, #0]
   10266:	f103 0344 	add.w	r3, r3, #68	; 0x44
   1026a:	681b      	ldr	r3, [r3, #0]
   1026c:	667b      	str	r3, [r7, #100]
    Etape* etape19 = this->tableauEtapes[18];
   1026e:	697b      	ldr	r3, [r7, #20]
   10270:	681b      	ldr	r3, [r3, #0]
   10272:	f103 0348 	add.w	r3, r3, #72	; 0x48
   10276:	681b      	ldr	r3, [r3, #0]
   10278:	66bb      	str	r3, [r7, #104]
    Etape* etape20 = this->tableauEtapes[19];
   1027a:	697b      	ldr	r3, [r7, #20]
   1027c:	681b      	ldr	r3, [r3, #0]
   1027e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
   10282:	681b      	ldr	r3, [r3, #0]
   10284:	66fb      	str	r3, [r7, #108]
    Etape* etape21 = this->tableauEtapes[20];
   10286:	697b      	ldr	r3, [r7, #20]
   10288:	681b      	ldr	r3, [r3, #0]
   1028a:	f103 0350 	add.w	r3, r3, #80	; 0x50
   1028e:	681b      	ldr	r3, [r3, #0]
   10290:	673b      	str	r3, [r7, #112]
    Etape* etape22= this->tableauEtapes[21];
   10292:	697b      	ldr	r3, [r7, #20]
   10294:	681b      	ldr	r3, [r3, #0]
   10296:	f103 0354 	add.w	r3, r3, #84	; 0x54
   1029a:	681b      	ldr	r3, [r3, #0]
   1029c:	677b      	str	r3, [r7, #116]
    //Si on ne trouve pas d'étape la plus proche, alors c'est qu'on est coincé par les autres robots.
    //Il faut donc faire des allers-retours entre les différentes étapes possibles.
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
   1029e:	69fb      	ldr	r3, [r7, #28]
   102a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   102a4:	f040 80a9 	bne.w	103fa <_ZN8Dijkstra10trouverMinEi+0x342>
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
   102a8:	f04f 0301 	mov.w	r3, #1	; 0x1
   102ac:	f887 307f 	strb.w	r3, [r7, #127]
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   102b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   102b4:	f8c7 3080 	str.w	r3, [r7, #128]
   102b8:	e057      	b.n	1036a <_ZN8Dijkstra10trouverMinEi+0x2b2>
        {
            if(this->etapeRapporte(this->tableauEtapes[i]) && (!(this->tableauEtapes[i]->aEviter())) && this->tableauEtapes[i]->getDistance() != -1 && this->tableauEtapes[i]->getState() != -2)
   102ba:	697b      	ldr	r3, [r7, #20]
   102bc:	681a      	ldr	r2, [r3, #0]
   102be:	f8d7 3080 	ldr.w	r3, [r7, #128]
   102c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102c6:	4413      	add	r3, r2
   102c8:	681b      	ldr	r3, [r3, #0]
   102ca:	6978      	ldr	r0, [r7, #20]
   102cc:	4619      	mov	r1, r3
   102ce:	f7ff fdb3 	bl	fe38 <_ZN8Dijkstra13etapeRapporteEP5Etape>
   102d2:	4603      	mov	r3, r0
   102d4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   102d8:	b2db      	uxtb	r3, r3
   102da:	2b00      	cmp	r3, #0
   102dc:	d135      	bne.n	1034a <_ZN8Dijkstra10trouverMinEi+0x292>
   102de:	697b      	ldr	r3, [r7, #20]
   102e0:	681a      	ldr	r2, [r3, #0]
   102e2:	f8d7 3080 	ldr.w	r3, [r7, #128]
   102e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102ea:	4413      	add	r3, r2
   102ec:	681b      	ldr	r3, [r3, #0]
   102ee:	4618      	mov	r0, r3
   102f0:	f000 fa68 	bl	107c4 <_ZN5Etape7aEviterEv>
   102f4:	4603      	mov	r3, r0
   102f6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   102fa:	b2db      	uxtb	r3, r3
   102fc:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10300:	b2db      	uxtb	r3, r3
   10302:	2b00      	cmp	r3, #0
   10304:	d121      	bne.n	1034a <_ZN8Dijkstra10trouverMinEi+0x292>
   10306:	697b      	ldr	r3, [r7, #20]
   10308:	681a      	ldr	r2, [r3, #0]
   1030a:	f8d7 3080 	ldr.w	r3, [r7, #128]
   1030e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10312:	4413      	add	r3, r2
   10314:	681b      	ldr	r3, [r3, #0]
   10316:	4618      	mov	r0, r3
   10318:	f000 f9ec 	bl	106f4 <_ZN5Etape11getDistanceEv>
   1031c:	4603      	mov	r3, r0
   1031e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10322:	d012      	beq.n	1034a <_ZN8Dijkstra10trouverMinEi+0x292>
   10324:	697b      	ldr	r3, [r7, #20]
   10326:	681a      	ldr	r2, [r3, #0]
   10328:	f8d7 3080 	ldr.w	r3, [r7, #128]
   1032c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10330:	4413      	add	r3, r2
   10332:	681b      	ldr	r3, [r3, #0]
   10334:	4618      	mov	r0, r3
   10336:	f000 f9c3 	bl	106c0 <_ZN5Etape8getStateEv>
   1033a:	4603      	mov	r3, r0
   1033c:	f113 0f02 	cmn.w	r3, #2	; 0x2
   10340:	d003      	beq.n	1034a <_ZN8Dijkstra10trouverMinEi+0x292>
   10342:	f04f 0301 	mov.w	r3, #1	; 0x1
   10346:	60bb      	str	r3, [r7, #8]
   10348:	e002      	b.n	10350 <_ZN8Dijkstra10trouverMinEi+0x298>
   1034a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1034e:	60bb      	str	r3, [r7, #8]
   10350:	68bb      	ldr	r3, [r7, #8]
   10352:	2b00      	cmp	r3, #0
   10354:	d003      	beq.n	1035e <_ZN8Dijkstra10trouverMinEi+0x2a6>
            {
                onEstCoinceDansUnEndroitPourri = false;
   10356:	f04f 0300 	mov.w	r3, #0	; 0x0
   1035a:	f887 307f 	strb.w	r3, [r7, #127]
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   1035e:	f8d7 3080 	ldr.w	r3, [r7, #128]
   10362:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10366:	f8c7 3080 	str.w	r3, [r7, #128]
   1036a:	697b      	ldr	r3, [r7, #20]
   1036c:	685a      	ldr	r2, [r3, #4]
   1036e:	f8d7 3080 	ldr.w	r3, [r7, #128]
   10372:	429a      	cmp	r2, r3
   10374:	dca1      	bgt.n	102ba <_ZN8Dijkstra10trouverMinEi+0x202>
            {
                onEstCoinceDansUnEndroitPourri = false;
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
   10376:	f897 307f 	ldrb.w	r3, [r7, #127]
   1037a:	2b00      	cmp	r3, #0
   1037c:	d039      	beq.n	103f2 <_ZN8Dijkstra10trouverMinEi+0x33a>
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   1037e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10382:	f8c7 3084 	str.w	r3, [r7, #132]
   10386:	e027      	b.n	103d8 <_ZN8Dijkstra10trouverMinEi+0x320>
            {
                //On reset numeroEtapeEnCours à l'étape où on est actuellement
                if(this->tableauEtapes[i]->getDistance() == 0)
   10388:	697b      	ldr	r3, [r7, #20]
   1038a:	681a      	ldr	r2, [r3, #0]
   1038c:	f8d7 3084 	ldr.w	r3, [r7, #132]
   10390:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10394:	4413      	add	r3, r2
   10396:	681b      	ldr	r3, [r3, #0]
   10398:	4618      	mov	r0, r3
   1039a:	f000 f9ab 	bl	106f4 <_ZN5Etape11getDistanceEv>
   1039e:	4603      	mov	r3, r0
   103a0:	2b00      	cmp	r3, #0
   103a2:	bf14      	ite	ne
   103a4:	2300      	movne	r3, #0
   103a6:	2301      	moveq	r3, #1
   103a8:	b2db      	uxtb	r3, r3
   103aa:	2b00      	cmp	r3, #0
   103ac:	d003      	beq.n	103b6 <_ZN8Dijkstra10trouverMinEi+0x2fe>
                {
                    this->numeroEtapeCourante = i; //-1?
   103ae:	697a      	ldr	r2, [r7, #20]
   103b0:	f8d7 3084 	ldr.w	r3, [r7, #132]
   103b4:	6093      	str	r3, [r2, #8]
                }

                this->tableauEtapes[i]->oublieRobotVu();
   103b6:	697b      	ldr	r3, [r7, #20]
   103b8:	681a      	ldr	r2, [r3, #0]
   103ba:	f8d7 3084 	ldr.w	r3, [r7, #132]
   103be:	ea4f 0383 	mov.w	r3, r3, lsl #2
   103c2:	4413      	add	r3, r2
   103c4:	681b      	ldr	r3, [r3, #0]
   103c6:	4618      	mov	r0, r3
   103c8:	f000 fa30 	bl	1082c <_ZN5Etape13oublieRobotVuEv>
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   103cc:	f8d7 3084 	ldr.w	r3, [r7, #132]
   103d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   103d4:	f8c7 3084 	str.w	r3, [r7, #132]
   103d8:	697b      	ldr	r3, [r7, #20]
   103da:	685a      	ldr	r2, [r3, #4]
   103dc:	f8d7 3084 	ldr.w	r3, [r7, #132]
   103e0:	429a      	cmp	r2, r3
   103e2:	dcd1      	bgt.n	10388 <_ZN8Dijkstra10trouverMinEi+0x2d0>
                }

                this->tableauEtapes[i]->oublieRobotVu();
            }

            this->run();
   103e4:	6978      	ldr	r0, [r7, #20]
   103e6:	f000 f81b 	bl	10420 <_ZN8Dijkstra3runEv>
            return -1;
   103ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   103ee:	60fb      	str	r3, [r7, #12]
   103f0:	e010      	b.n	10414 <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
        else
        {
            return -2;
   103f2:	f06f 0301 	mvn.w	r3, #1	; 0x1
   103f6:	60fb      	str	r3, [r7, #12]
   103f8:	e00c      	b.n	10414 <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
    }
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
   103fa:	697b      	ldr	r3, [r7, #20]
   103fc:	681a      	ldr	r2, [r3, #0]
   103fe:	69fb      	ldr	r3, [r7, #28]
   10400:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10404:	4413      	add	r3, r2
   10406:	681b      	ldr	r3, [r3, #0]
   10408:	4618      	mov	r0, r3
   1040a:	6939      	ldr	r1, [r7, #16]
   1040c:	f000 f964 	bl	106d8 <_ZN5Etape8setStateEi>
    return numeroEtapeLaPlusProche;
   10410:	69fb      	ldr	r3, [r7, #28]
   10412:	60fb      	str	r3, [r7, #12]
   10414:	68fb      	ldr	r3, [r7, #12]
}
   10416:	4618      	mov	r0, r3
   10418:	f107 0788 	add.w	r7, r7, #136	; 0x88
   1041c:	46bd      	mov	sp, r7
   1041e:	bd80      	pop	{r7, pc}

00010420 <_ZN8Dijkstra3runEv>:
{
    this->numeroEtapeCourante = numeroEtapeCourante;
}

//Calcul des distances de toutes les étapes par rapport à l'étape en cours (étape origine)
int Dijkstra::run()
   10420:	b580      	push	{r7, lr}
   10422:	b084      	sub	sp, #16
   10424:	af00      	add	r7, sp, #0
   10426:	6078      	str	r0, [r7, #4]
    else
        return 0;*/



    int min = -2;
   10428:	f06f 0301 	mvn.w	r3, #1	; 0x1
   1042c:	60bb      	str	r3, [r7, #8]
    initialiser();
   1042e:	6878      	ldr	r0, [r7, #4]
   10430:	f7ff fdde 	bl	fff0 <_ZN8Dijkstra11initialiserEv>

    mettreAJourVoisins(this->numeroEtapeCourante);
   10434:	687b      	ldr	r3, [r7, #4]
   10436:	689b      	ldr	r3, [r3, #8]
   10438:	6878      	ldr	r0, [r7, #4]
   1043a:	4619      	mov	r1, r3
   1043c:	f7ff fd34 	bl	fea8 <_ZN8Dijkstra18mettreAJourVoisinsEi>

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
   10440:	f04f 0300 	mov.w	r3, #0	; 0x0
   10444:	60fb      	str	r3, [r7, #12]
   10446:	e025      	b.n	10494 <_ZN8Dijkstra3runEv+0x74>
    {
        min = trouverMin(i+1);
   10448:	68fb      	ldr	r3, [r7, #12]
   1044a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1044e:	6878      	ldr	r0, [r7, #4]
   10450:	4619      	mov	r1, r3
   10452:	f7ff fe31 	bl	100b8 <_ZN8Dijkstra10trouverMinEi>
   10456:	4603      	mov	r3, r0
   10458:	60bb      	str	r3, [r7, #8]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
   1045a:	68bb      	ldr	r3, [r7, #8]
   1045c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10460:	d103      	bne.n	1046a <_ZN8Dijkstra3runEv+0x4a>
        {
            return -1;
   10462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10466:	603b      	str	r3, [r7, #0]
   10468:	e01e      	b.n	104a8 <_ZN8Dijkstra3runEv+0x88>
        }
        if(min == -2)
   1046a:	68bb      	ldr	r3, [r7, #8]
   1046c:	f113 0f02 	cmn.w	r3, #2	; 0x2
   10470:	d103      	bne.n	1047a <_ZN8Dijkstra3runEv+0x5a>
        {
            return 0;
   10472:	f04f 0300 	mov.w	r3, #0	; 0x0
   10476:	603b      	str	r3, [r7, #0]
   10478:	e016      	b.n	104a8 <_ZN8Dijkstra3runEv+0x88>
        }
        this->numeroEtapeCourante = min;
   1047a:	687a      	ldr	r2, [r7, #4]
   1047c:	68bb      	ldr	r3, [r7, #8]
   1047e:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
   10480:	687b      	ldr	r3, [r7, #4]
   10482:	689b      	ldr	r3, [r3, #8]
   10484:	6878      	ldr	r0, [r7, #4]
   10486:	4619      	mov	r1, r3
   10488:	f7ff fd0e 	bl	fea8 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    int min = -2;
    initialiser();

    mettreAJourVoisins(this->numeroEtapeCourante);

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
   1048c:	68fb      	ldr	r3, [r7, #12]
   1048e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10492:	60fb      	str	r3, [r7, #12]
   10494:	687b      	ldr	r3, [r7, #4]
   10496:	685b      	ldr	r3, [r3, #4]
   10498:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
   1049c:	68fb      	ldr	r3, [r7, #12]
   1049e:	429a      	cmp	r2, r3
   104a0:	dcd2      	bgt.n	10448 <_ZN8Dijkstra3runEv+0x28>
            return 0;
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;
   104a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   104a6:	603b      	str	r3, [r7, #0]
   104a8:	683b      	ldr	r3, [r7, #0]
}
   104aa:	4618      	mov	r0, r3
   104ac:	f107 0710 	add.w	r7, r7, #16	; 0x10
   104b0:	46bd      	mov	sp, r7
   104b2:	bd80      	pop	{r7, pc}

000104b4 <_ZN8Dijkstra7miniRunEi>:

int Dijkstra::miniRun(int step)
   104b4:	b580      	push	{r7, lr}
   104b6:	b086      	sub	sp, #24
   104b8:	af00      	add	r7, sp, #0
   104ba:	60f8      	str	r0, [r7, #12]
   104bc:	60b9      	str	r1, [r7, #8]
{
    if (step == 0)
   104be:	68bb      	ldr	r3, [r7, #8]
   104c0:	2b00      	cmp	r3, #0
   104c2:	d103      	bne.n	104cc <_ZN8Dijkstra7miniRunEi+0x18>
    {
        initialiser();
   104c4:	68f8      	ldr	r0, [r7, #12]
   104c6:	f7ff fd93 	bl	fff0 <_ZN8Dijkstra11initialiserEv>
   104ca:	e02d      	b.n	10528 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else if(step < this->nombreEtapes-2)
   104cc:	68fb      	ldr	r3, [r7, #12]
   104ce:	685b      	ldr	r3, [r3, #4]
   104d0:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
   104d4:	68bb      	ldr	r3, [r7, #8]
   104d6:	429a      	cmp	r2, r3
   104d8:	dd22      	ble.n	10520 <_ZN8Dijkstra7miniRunEi+0x6c>
    {
        int min = trouverMin(step+1);
   104da:	68bb      	ldr	r3, [r7, #8]
   104dc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   104e0:	68f8      	ldr	r0, [r7, #12]
   104e2:	4619      	mov	r1, r3
   104e4:	f7ff fde8 	bl	100b8 <_ZN8Dijkstra10trouverMinEi>
   104e8:	4603      	mov	r3, r0
   104ea:	617b      	str	r3, [r7, #20]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
   104ec:	697b      	ldr	r3, [r7, #20]
   104ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   104f2:	d103      	bne.n	104fc <_ZN8Dijkstra7miniRunEi+0x48>
        {
            return -1;
   104f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   104f8:	607b      	str	r3, [r7, #4]
   104fa:	e018      	b.n	1052e <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        if(min == -2)
   104fc:	697b      	ldr	r3, [r7, #20]
   104fe:	f113 0f02 	cmn.w	r3, #2	; 0x2
   10502:	d103      	bne.n	1050c <_ZN8Dijkstra7miniRunEi+0x58>
        {
            return 0;
   10504:	f04f 0300 	mov.w	r3, #0	; 0x0
   10508:	607b      	str	r3, [r7, #4]
   1050a:	e010      	b.n	1052e <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        this->numeroEtapeCourante = min;
   1050c:	68fa      	ldr	r2, [r7, #12]
   1050e:	697b      	ldr	r3, [r7, #20]
   10510:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
   10512:	68fb      	ldr	r3, [r7, #12]
   10514:	689b      	ldr	r3, [r3, #8]
   10516:	68f8      	ldr	r0, [r7, #12]
   10518:	4619      	mov	r1, r3
   1051a:	f7ff fcc5 	bl	fea8 <_ZN8Dijkstra18mettreAJourVoisinsEi>
   1051e:	e003      	b.n	10528 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else
    {
        return 0;
   10520:	f04f 0300 	mov.w	r3, #0	; 0x0
   10524:	607b      	str	r3, [r7, #4]
   10526:	e002      	b.n	1052e <_ZN8Dijkstra7miniRunEi+0x7a>
    }
    return -2;
   10528:	f06f 0301 	mvn.w	r3, #1	; 0x1
   1052c:	607b      	str	r3, [r7, #4]
   1052e:	687b      	ldr	r3, [r7, #4]
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;*/
}
   10530:	4618      	mov	r0, r3
   10532:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10536:	46bd      	mov	sp, r7
   10538:	bd80      	pop	{r7, pc}
   1053a:	46c0      	nop			(mov r8, r8)

0001053c <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>:
Etape* Dijkstra::getEtapeCourante()
{
    return tableauEtapes[this->numeroEtapeCourante];
}

int Dijkstra::calculDistanceDirect(Etape* etapeDepart, Etape* etapeArrivee)
   1053c:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   10540:	b08b      	sub	sp, #44
   10542:	af00      	add	r7, sp, #0
   10544:	6078      	str	r0, [r7, #4]
   10546:	6039      	str	r1, [r7, #0]
    //Une solution, vu que le STM32-H405 a plein de mémoire, serait de pré-calculer les distances, et de les stocker.
    //Cela permettrait aussi d'ajuster certaines distances si besoin, pour préférer certains passages à d'autres
    return sqrt(
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
   10548:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1054c:	4618      	mov	r0, r3
   1054e:	6879      	ldr	r1, [r7, #4]
   10550:	f000 f8a2 	bl	10698 <_ZN5Etape11getPositionEv>
   10554:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10558:	4618      	mov	r0, r3
   1055a:	f7fe fc43 	bl	ede4 <_ZNK8Position4getXEv>
   1055e:	4603      	mov	r3, r0
   10560:	4618      	mov	r0, r3
   10562:	f00b f86f 	bl	1b644 <__aeabi_f2iz>
   10566:	4603      	mov	r3, r0
   10568:	4618      	mov	r0, r3
   1056a:	f00a fe53 	bl	1b214 <__aeabi_i2f>
   1056e:	4604      	mov	r4, r0
   10570:	f107 0310 	add.w	r3, r7, #16	; 0x10
   10574:	4618      	mov	r0, r3
   10576:	6839      	ldr	r1, [r7, #0]
   10578:	f000 f88e 	bl	10698 <_ZN5Etape11getPositionEv>
   1057c:	f107 0310 	add.w	r3, r7, #16	; 0x10
   10580:	4618      	mov	r0, r3
   10582:	f7fe fc2f 	bl	ede4 <_ZNK8Position4getXEv>
   10586:	4603      	mov	r3, r0
   10588:	4620      	mov	r0, r4
   1058a:	4619      	mov	r1, r3
   1058c:	f00a fd8c 	bl	1b0a8 <__aeabi_fsub>
   10590:	4603      	mov	r3, r0
   10592:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10596:	4618      	mov	r0, r3
   10598:	f00a fa1e 	bl	1a9d8 <__aeabi_f2d>
   1059c:	4602      	mov	r2, r0
   1059e:	460b      	mov	r3, r1
   105a0:	4610      	mov	r0, r2
   105a2:	4619      	mov	r1, r3
   105a4:	f00a fa6c 	bl	1aa80 <__aeabi_dmul>
   105a8:	4602      	mov	r2, r0
   105aa:	460b      	mov	r3, r1
   105ac:	4690      	mov	r8, r2
   105ae:	4699      	mov	r9, r3
   105b0:	f107 0318 	add.w	r3, r7, #24	; 0x18
   105b4:	4618      	mov	r0, r3
   105b6:	6879      	ldr	r1, [r7, #4]
   105b8:	f000 f86e 	bl	10698 <_ZN5Etape11getPositionEv>
   105bc:	f107 0318 	add.w	r3, r7, #24	; 0x18
   105c0:	4618      	mov	r0, r3
   105c2:	f7fe fc1b 	bl	edfc <_ZNK8Position4getYEv>
   105c6:	4603      	mov	r3, r0
   105c8:	4618      	mov	r0, r3
   105ca:	f00b f83b 	bl	1b644 <__aeabi_f2iz>
   105ce:	4603      	mov	r3, r0
   105d0:	4618      	mov	r0, r3
   105d2:	f00a fe1f 	bl	1b214 <__aeabi_i2f>
   105d6:	4604      	mov	r4, r0
   105d8:	f107 0320 	add.w	r3, r7, #32	; 0x20
   105dc:	4618      	mov	r0, r3
   105de:	6839      	ldr	r1, [r7, #0]
   105e0:	f000 f85a 	bl	10698 <_ZN5Etape11getPositionEv>
   105e4:	f107 0320 	add.w	r3, r7, #32	; 0x20
   105e8:	4618      	mov	r0, r3
   105ea:	f7fe fc07 	bl	edfc <_ZNK8Position4getYEv>
   105ee:	4603      	mov	r3, r0
   105f0:	4620      	mov	r0, r4
   105f2:	4619      	mov	r1, r3
   105f4:	f00a fd58 	bl	1b0a8 <__aeabi_fsub>
   105f8:	4603      	mov	r3, r0
   105fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   105fe:	4618      	mov	r0, r3
   10600:	f00a f9ea 	bl	1a9d8 <__aeabi_f2d>
   10604:	4602      	mov	r2, r0
   10606:	460b      	mov	r3, r1
   10608:	4610      	mov	r0, r2
   1060a:	4619      	mov	r1, r3
   1060c:	f00a fa38 	bl	1aa80 <__aeabi_dmul>
   10610:	4602      	mov	r2, r0
   10612:	460b      	mov	r3, r1
   10614:	4640      	mov	r0, r8
   10616:	4649      	mov	r1, r9
   10618:	f00a f880 	bl	1a71c <__adddf3>
   1061c:	4602      	mov	r2, r0
   1061e:	460b      	mov	r3, r1
   10620:	4610      	mov	r0, r2
   10622:	4619      	mov	r1, r3
   10624:	f00e fb14 	bl	1ec50 <sqrt>
   10628:	4602      	mov	r2, r0
   1062a:	460b      	mov	r3, r1
   1062c:	4610      	mov	r0, r2
   1062e:	4619      	mov	r1, r3
   10630:	f00a fcbe 	bl	1afb0 <__aeabi_d2iz>
   10634:	4603      	mov	r3, r0
}
   10636:	4618      	mov	r0, r3
   10638:	f107 072c 	add.w	r7, r7, #44	; 0x2c
   1063c:	46bd      	mov	sp, r7
   1063e:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   10642:	46c0      	nop			(mov r8, r8)

00010644 <_ZN5Etape8getChildEi>:
    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}

Etape* Etape::getChild(int nb){
   10644:	b480      	push	{r7}
   10646:	b083      	sub	sp, #12
   10648:	af00      	add	r7, sp, #0
   1064a:	6078      	str	r0, [r7, #4]
   1064c:	6039      	str	r1, [r7, #0]
    return this->children[nb];
   1064e:	687b      	ldr	r3, [r7, #4]
   10650:	681a      	ldr	r2, [r3, #0]
   10652:	683b      	ldr	r3, [r7, #0]
   10654:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10658:	4413      	add	r3, r2
   1065a:	681b      	ldr	r3, [r3, #0]
}
   1065c:	4618      	mov	r0, r3
   1065e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10662:	46bd      	mov	sp, r7
   10664:	bc80      	pop	{r7}
   10666:	4770      	bx	lr

00010668 <_ZN5Etape11getChildrenEv>:

Etape** Etape::getChildren(){
   10668:	b480      	push	{r7}
   1066a:	b083      	sub	sp, #12
   1066c:	af00      	add	r7, sp, #0
   1066e:	6078      	str	r0, [r7, #4]
    return this->children;
   10670:	687b      	ldr	r3, [r7, #4]
   10672:	681b      	ldr	r3, [r3, #0]
}
   10674:	4618      	mov	r0, r3
   10676:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1067a:	46bd      	mov	sp, r7
   1067c:	bc80      	pop	{r7}
   1067e:	4770      	bx	lr

00010680 <_ZN5Etape9getParentEv>:

Etape* Etape::getParent(){
   10680:	b480      	push	{r7}
   10682:	b083      	sub	sp, #12
   10684:	af00      	add	r7, sp, #0
   10686:	6078      	str	r0, [r7, #4]
    return this->parent;
   10688:	687b      	ldr	r3, [r7, #4]
   1068a:	685b      	ldr	r3, [r3, #4]
}
   1068c:	4618      	mov	r0, r3
   1068e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10692:	46bd      	mov	sp, r7
   10694:	bc80      	pop	{r7}
   10696:	4770      	bx	lr

00010698 <_ZN5Etape11getPositionEv>:

Position Etape::getPosition()
   10698:	b480      	push	{r7}
   1069a:	b083      	sub	sp, #12
   1069c:	af00      	add	r7, sp, #0
   1069e:	4684      	mov	ip, r0
   106a0:	6079      	str	r1, [r7, #4]
{
    return this->position;
   106a2:	687b      	ldr	r3, [r7, #4]
   106a4:	4662      	mov	r2, ip
   106a6:	f103 0308 	add.w	r3, r3, #8	; 0x8
   106aa:	e893 0003 	ldmia.w	r3, {r0, r1}
   106ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
   106b2:	4660      	mov	r0, ip
   106b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   106b8:	46bd      	mov	sp, r7
   106ba:	bc80      	pop	{r7}
   106bc:	4770      	bx	lr
   106be:	46c0      	nop			(mov r8, r8)

000106c0 <_ZN5Etape8getStateEv>:

int Etape::getState(){
   106c0:	b480      	push	{r7}
   106c2:	b083      	sub	sp, #12
   106c4:	af00      	add	r7, sp, #0
   106c6:	6078      	str	r0, [r7, #4]
    return this->state;
   106c8:	687b      	ldr	r3, [r7, #4]
   106ca:	691b      	ldr	r3, [r3, #16]
}
   106cc:	4618      	mov	r0, r3
   106ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
   106d2:	46bd      	mov	sp, r7
   106d4:	bc80      	pop	{r7}
   106d6:	4770      	bx	lr

000106d8 <_ZN5Etape8setStateEi>:

void Etape::setState(int state){
   106d8:	b480      	push	{r7}
   106da:	b083      	sub	sp, #12
   106dc:	af00      	add	r7, sp, #0
   106de:	6078      	str	r0, [r7, #4]
   106e0:	6039      	str	r1, [r7, #0]
    this->state = state;
   106e2:	687a      	ldr	r2, [r7, #4]
   106e4:	683b      	ldr	r3, [r7, #0]
   106e6:	6113      	str	r3, [r2, #16]
}
   106e8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   106ec:	46bd      	mov	sp, r7
   106ee:	bc80      	pop	{r7}
   106f0:	4770      	bx	lr
   106f2:	46c0      	nop			(mov r8, r8)

000106f4 <_ZN5Etape11getDistanceEv>:

int Etape::getDistance(){
   106f4:	b480      	push	{r7}
   106f6:	b083      	sub	sp, #12
   106f8:	af00      	add	r7, sp, #0
   106fa:	6078      	str	r0, [r7, #4]
    return this->distance;
   106fc:	687b      	ldr	r3, [r7, #4]
   106fe:	695b      	ldr	r3, [r3, #20]
}
   10700:	4618      	mov	r0, r3
   10702:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10706:	46bd      	mov	sp, r7
   10708:	bc80      	pop	{r7}
   1070a:	4770      	bx	lr

0001070c <_ZN5Etape11setDistanceEi>:

void Etape::setDistance(int distance){
   1070c:	b480      	push	{r7}
   1070e:	b083      	sub	sp, #12
   10710:	af00      	add	r7, sp, #0
   10712:	6078      	str	r0, [r7, #4]
   10714:	6039      	str	r1, [r7, #0]
    this->distance = distance;
   10716:	687a      	ldr	r2, [r7, #4]
   10718:	683b      	ldr	r3, [r7, #0]
   1071a:	6153      	str	r3, [r2, #20]
}
   1071c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10720:	46bd      	mov	sp, r7
   10722:	bc80      	pop	{r7}
   10724:	4770      	bx	lr
   10726:	46c0      	nop			(mov r8, r8)

00010728 <_ZN5Etape9setParentEPS_>:

void Etape::setParent(Etape* parent){
   10728:	b480      	push	{r7}
   1072a:	b083      	sub	sp, #12
   1072c:	af00      	add	r7, sp, #0
   1072e:	6078      	str	r0, [r7, #4]
   10730:	6039      	str	r1, [r7, #0]
    this->parent = parent;
   10732:	687a      	ldr	r2, [r7, #4]
   10734:	683b      	ldr	r3, [r7, #0]
   10736:	6053      	str	r3, [r2, #4]
}
   10738:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1073c:	46bd      	mov	sp, r7
   1073e:	bc80      	pop	{r7}
   10740:	4770      	bx	lr
   10742:	46c0      	nop			(mov r8, r8)

00010744 <_ZN5Etape13getNbChildrenEv>:

int Etape::getNbChildren(){
   10744:	b480      	push	{r7}
   10746:	b083      	sub	sp, #12
   10748:	af00      	add	r7, sp, #0
   1074a:	6078      	str	r0, [r7, #4]
    return this->nbChildren;
   1074c:	687b      	ldr	r3, [r7, #4]
   1074e:	69db      	ldr	r3, [r3, #28]
}
   10750:	4618      	mov	r0, r3
   10752:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10756:	46bd      	mov	sp, r7
   10758:	bc80      	pop	{r7}
   1075a:	4770      	bx	lr

0001075c <_ZN5Etape11setChildrenEPPS_>:

void Etape::setChildren(Etape** children)
   1075c:	b480      	push	{r7}
   1075e:	b083      	sub	sp, #12
   10760:	af00      	add	r7, sp, #0
   10762:	6078      	str	r0, [r7, #4]
   10764:	6039      	str	r1, [r7, #0]
{
    this->children = children;
   10766:	687a      	ldr	r2, [r7, #4]
   10768:	683b      	ldr	r3, [r7, #0]
   1076a:	6013      	str	r3, [r2, #0]
}
   1076c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10770:	46bd      	mov	sp, r7
   10772:	bc80      	pop	{r7}
   10774:	4770      	bx	lr
   10776:	46c0      	nop			(mov r8, r8)

00010778 <_ZN5Etape12getEtapeTypeEv>:

Etape::EtapeType Etape::getEtapeType()
   10778:	b480      	push	{r7}
   1077a:	b083      	sub	sp, #12
   1077c:	af00      	add	r7, sp, #0
   1077e:	6078      	str	r0, [r7, #4]
{
    return this->type;
   10780:	687b      	ldr	r3, [r7, #4]
   10782:	7e1b      	ldrb	r3, [r3, #24]
}
   10784:	4618      	mov	r0, r3
   10786:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1078a:	46bd      	mov	sp, r7
   1078c:	bc80      	pop	{r7}
   1078e:	4770      	bx	lr

00010790 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>:

void Etape::setEtapeType(Etape::EtapeType type)
   10790:	b480      	push	{r7}
   10792:	b083      	sub	sp, #12
   10794:	af00      	add	r7, sp, #0
   10796:	6078      	str	r0, [r7, #4]
   10798:	460b      	mov	r3, r1
   1079a:	70fb      	strb	r3, [r7, #3]
{
    this->type = type;
   1079c:	687a      	ldr	r2, [r7, #4]
   1079e:	78fb      	ldrb	r3, [r7, #3]
   107a0:	7613      	strb	r3, [r2, #24]
}
   107a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   107a6:	46bd      	mov	sp, r7
   107a8:	bc80      	pop	{r7}
   107aa:	4770      	bx	lr

000107ac <_ZN5Etape9getNumeroEv>:
    {
        this->type = (EtapeType)(this->type + 20);
    }
}

int Etape::getNumero()
   107ac:	b480      	push	{r7}
   107ae:	b083      	sub	sp, #12
   107b0:	af00      	add	r7, sp, #0
   107b2:	6078      	str	r0, [r7, #4]
{
    return this->numero;
   107b4:	687b      	ldr	r3, [r7, #4]
   107b6:	6a1b      	ldr	r3, [r3, #32]
}
   107b8:	4618      	mov	r0, r3
   107ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
   107be:	46bd      	mov	sp, r7
   107c0:	bc80      	pop	{r7}
   107c2:	4770      	bx	lr

000107c4 <_ZN5Etape7aEviterEv>:

bool Etape::aEviter()
   107c4:	b580      	push	{r7, lr}
   107c6:	b082      	sub	sp, #8
   107c8:	af00      	add	r7, sp, #0
   107ca:	6078      	str	r0, [r7, #4]
{
    if(((int) this->getEtapeType()) > 19)
   107cc:	6878      	ldr	r0, [r7, #4]
   107ce:	f7ff ffd3 	bl	10778 <_ZN5Etape12getEtapeTypeEv>
   107d2:	4603      	mov	r3, r0
   107d4:	2b13      	cmp	r3, #19
   107d6:	bf94      	ite	ls
   107d8:	2300      	movls	r3, #0
   107da:	2301      	movhi	r3, #1
   107dc:	b2db      	uxtb	r3, r3
   107de:	2b00      	cmp	r3, #0
   107e0:	d003      	beq.n	107ea <_ZN5Etape7aEviterEv+0x26>
    {
        return true;
   107e2:	f04f 0301 	mov.w	r3, #1	; 0x1
   107e6:	603b      	str	r3, [r7, #0]
   107e8:	e002      	b.n	107f0 <_ZN5Etape7aEviterEv+0x2c>
    }
    else
    {
        return false;
   107ea:	f04f 0300 	mov.w	r3, #0	; 0x0
   107ee:	603b      	str	r3, [r7, #0]
   107f0:	683b      	ldr	r3, [r7, #0]
    }
}
   107f2:	4618      	mov	r0, r3
   107f4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   107f8:	46bd      	mov	sp, r7
   107fa:	bd80      	pop	{r7, pc}

000107fc <_ZN5Etape7robotVuEv>:
void Etape::setEtapeType(Etape::EtapeType type)
{
    this->type = type;
}

void Etape::robotVu()
   107fc:	b580      	push	{r7, lr}
   107fe:	b082      	sub	sp, #8
   10800:	af00      	add	r7, sp, #0
   10802:	6078      	str	r0, [r7, #4]
{
    if(!aEviter())
   10804:	6878      	ldr	r0, [r7, #4]
   10806:	f7ff ffdd 	bl	107c4 <_ZN5Etape7aEviterEv>
   1080a:	4603      	mov	r3, r0
   1080c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10810:	b2db      	uxtb	r3, r3
   10812:	2b00      	cmp	r3, #0
   10814:	d006      	beq.n	10824 <_ZN5Etape7robotVuEv+0x28>
    {
        this->type = (EtapeType)(this->type + 20);
   10816:	687b      	ldr	r3, [r7, #4]
   10818:	7e1b      	ldrb	r3, [r3, #24]
   1081a:	f103 0314 	add.w	r3, r3, #20	; 0x14
   1081e:	b2db      	uxtb	r3, r3
   10820:	687a      	ldr	r2, [r7, #4]
   10822:	7613      	strb	r3, [r2, #24]
    }
}
   10824:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10828:	46bd      	mov	sp, r7
   1082a:	bd80      	pop	{r7, pc}

0001082c <_ZN5Etape13oublieRobotVuEv>:
    {
        return false;
    }
}

void Etape::oublieRobotVu()
   1082c:	b580      	push	{r7, lr}
   1082e:	b082      	sub	sp, #8
   10830:	af00      	add	r7, sp, #0
   10832:	6078      	str	r0, [r7, #4]
{
    if(this->aEviter())
   10834:	6878      	ldr	r0, [r7, #4]
   10836:	f7ff ffc5 	bl	107c4 <_ZN5Etape7aEviterEv>
   1083a:	4603      	mov	r3, r0
   1083c:	2b00      	cmp	r3, #0
   1083e:	d00a      	beq.n	10856 <_ZN5Etape13oublieRobotVuEv+0x2a>
    {
        //On oublie qu'on a vu un robot
        this->setEtapeType((EtapeType) ((int)this->getEtapeType() - 20));
   10840:	6878      	ldr	r0, [r7, #4]
   10842:	f7ff ff99 	bl	10778 <_ZN5Etape12getEtapeTypeEv>
   10846:	4603      	mov	r3, r0
   10848:	f1a3 0314 	sub.w	r3, r3, #20	; 0x14
   1084c:	b2db      	uxtb	r3, r3
   1084e:	6878      	ldr	r0, [r7, #4]
   10850:	4619      	mov	r1, r3
   10852:	f7ff ff9d 	bl	10790 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   10856:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1085a:	46bd      	mov	sp, r7
   1085c:	bd80      	pop	{r7, pc}
   1085e:	46c0      	nop			(mov r8, r8)

00010860 <_ZN5Etape12getDistancesEv>:

int* Etape::getDistances()
   10860:	b480      	push	{r7}
   10862:	b083      	sub	sp, #12
   10864:	af00      	add	r7, sp, #0
   10866:	6078      	str	r0, [r7, #4]
{
    return this->distances;
   10868:	687b      	ldr	r3, [r7, #4]
   1086a:	6a5b      	ldr	r3, [r3, #36]
}
   1086c:	4618      	mov	r0, r3
   1086e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10872:	46bd      	mov	sp, r7
   10874:	bc80      	pop	{r7}
   10876:	4770      	bx	lr

00010878 <_ZN5Etape12setDistancesEPi>:

void Etape::setDistances(int* distances)
   10878:	b480      	push	{r7}
   1087a:	b083      	sub	sp, #12
   1087c:	af00      	add	r7, sp, #0
   1087e:	6078      	str	r0, [r7, #4]
   10880:	6039      	str	r1, [r7, #0]
{
    this->distances = distances;
   10882:	687a      	ldr	r2, [r7, #4]
   10884:	683b      	ldr	r3, [r7, #0]
   10886:	6253      	str	r3, [r2, #36]
}
   10888:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1088c:	46bd      	mov	sp, r7
   1088e:	bc80      	pop	{r7}
   10890:	4770      	bx	lr
   10892:	46c0      	nop			(mov r8, r8)

00010894 <_ZN5Etape27getEtapesLieesParFinirEtapeEv>:
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}

int* Etape::getEtapesLieesParFinirEtape()
   10894:	b480      	push	{r7}
   10896:	b083      	sub	sp, #12
   10898:	af00      	add	r7, sp, #0
   1089a:	6078      	str	r0, [r7, #4]
{
    return this->numerosEtapesLieesParFinirEtape;
   1089c:	687b      	ldr	r3, [r7, #4]
   1089e:	6adb      	ldr	r3, [r3, #44]
}
   108a0:	4618      	mov	r0, r3
   108a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108a6:	46bd      	mov	sp, r7
   108a8:	bc80      	pop	{r7}
   108aa:	4770      	bx	lr

000108ac <_ZN5Etape27setEtapesLieesParFinirEtapeEPi>:

void Etape::setEtapesLieesParFinirEtape(int* numerosEtapesLieesParFinirEtape)
   108ac:	b480      	push	{r7}
   108ae:	b083      	sub	sp, #12
   108b0:	af00      	add	r7, sp, #0
   108b2:	6078      	str	r0, [r7, #4]
   108b4:	6039      	str	r1, [r7, #0]
{
    this->numerosEtapesLieesParFinirEtape = numerosEtapesLieesParFinirEtape;
   108b6:	687a      	ldr	r2, [r7, #4]
   108b8:	683b      	ldr	r3, [r7, #0]
   108ba:	62d3      	str	r3, [r2, #44]
}
   108bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108c0:	46bd      	mov	sp, r7
   108c2:	bc80      	pop	{r7}
   108c4:	4770      	bx	lr
   108c6:	46c0      	nop			(mov r8, r8)

000108c8 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>:

int Etape::getNombreEtapesLieesParFinirEtape()
   108c8:	b480      	push	{r7}
   108ca:	b083      	sub	sp, #12
   108cc:	af00      	add	r7, sp, #0
   108ce:	6078      	str	r0, [r7, #4]
{
    return this->nombreEtapesLieesParFinirEtape;
   108d0:	687b      	ldr	r3, [r7, #4]
   108d2:	6a9b      	ldr	r3, [r3, #40]
}
   108d4:	4618      	mov	r0, r3
   108d6:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108da:	46bd      	mov	sp, r7
   108dc:	bc80      	pop	{r7}
   108de:	4770      	bx	lr

000108e0 <_ZN5Etape5finirEv>:

void Etape::finir(void)
   108e0:	b480      	push	{r7}
   108e2:	b083      	sub	sp, #12
   108e4:	af00      	add	r7, sp, #0
   108e6:	6078      	str	r0, [r7, #4]
{
    if(this->type == FRUIT)
   108e8:	687b      	ldr	r3, [r7, #4]
   108ea:	7e1b      	ldrb	r3, [r3, #24]
   108ec:	2b02      	cmp	r3, #2
   108ee:	d103      	bne.n	108f8 <_ZN5Etape5finirEv+0x18>
    {
        this->type = POINT_PASSAGE;
   108f0:	687b      	ldr	r3, [r7, #4]
   108f2:	f04f 0200 	mov.w	r2, #0	; 0x0
   108f6:	761a      	strb	r2, [r3, #24]
    }
}
   108f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   108fc:	46bd      	mov	sp, r7
   108fe:	bc80      	pop	{r7}
   10900:	4770      	bx	lr
   10902:	46c0      	nop			(mov r8, r8)

00010904 <_ZN5Etape8setScoreEi>:

void Etape::setScore(int score)
   10904:	b480      	push	{r7}
   10906:	b083      	sub	sp, #12
   10908:	af00      	add	r7, sp, #0
   1090a:	6078      	str	r0, [r7, #4]
   1090c:	6039      	str	r1, [r7, #0]
{
    this->score = score;
   1090e:	687a      	ldr	r2, [r7, #4]
   10910:	683b      	ldr	r3, [r7, #0]
   10912:	6313      	str	r3, [r2, #48]
}
   10914:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10918:	46bd      	mov	sp, r7
   1091a:	bc80      	pop	{r7}
   1091c:	4770      	bx	lr
   1091e:	46c0      	nop			(mov r8, r8)

00010920 <_ZN5Etape8getScoreEv>:

int Etape::getScore()
   10920:	b480      	push	{r7}
   10922:	b083      	sub	sp, #12
   10924:	af00      	add	r7, sp, #0
   10926:	6078      	str	r0, [r7, #4]
{
    return this->score;
   10928:	687b      	ldr	r3, [r7, #4]
   1092a:	6b1b      	ldr	r3, [r3, #48]
}
   1092c:	4618      	mov	r0, r3
   1092e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10932:	46bd      	mov	sp, r7
   10934:	bc80      	pop	{r7}
   10936:	4770      	bx	lr

00010938 <_ZN5Etape9addVoisinEPS_b>:

Etape* Etape::addVoisin(Etape* newVoisin, bool autreSens)
   10938:	b580      	push	{r7, lr}
   1093a:	b088      	sub	sp, #32
   1093c:	af00      	add	r7, sp, #0
   1093e:	60f8      	str	r0, [r7, #12]
   10940:	60b9      	str	r1, [r7, #8]
   10942:	4613      	mov	r3, r2
   10944:	71fb      	strb	r3, [r7, #7]
{
    if(this->nbChildren==0)
   10946:	68fb      	ldr	r3, [r7, #12]
   10948:	69db      	ldr	r3, [r3, #28]
   1094a:	2b00      	cmp	r3, #0
   1094c:	d112      	bne.n	10974 <_ZN5Etape9addVoisinEPS_b+0x3c>
    {
        this->children = new Etape*[1];
   1094e:	f04f 0004 	mov.w	r0, #4	; 0x4
   10952:	f7fe f965 	bl	ec20 <_Znaj>
   10956:	4603      	mov	r3, r0
   10958:	461a      	mov	r2, r3
   1095a:	68fb      	ldr	r3, [r7, #12]
   1095c:	601a      	str	r2, [r3, #0]
        this->children[0] = newVoisin;
   1095e:	68fb      	ldr	r3, [r7, #12]
   10960:	681a      	ldr	r2, [r3, #0]
   10962:	68bb      	ldr	r3, [r7, #8]
   10964:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   10966:	68fb      	ldr	r3, [r7, #12]
   10968:	69db      	ldr	r3, [r3, #28]
   1096a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1096e:	68fb      	ldr	r3, [r7, #12]
   10970:	61da      	str	r2, [r3, #28]
   10972:	e060      	b.n	10a36 <_ZN5Etape9addVoisinEPS_b+0xfe>
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
   10974:	68fb      	ldr	r3, [r7, #12]
   10976:	69db      	ldr	r3, [r3, #28]
   10978:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1097c:	4618      	mov	r0, r3
   1097e:	f7fe f94f 	bl	ec20 <_Znaj>
   10982:	4603      	mov	r3, r0
   10984:	617b      	str	r3, [r7, #20]
        for(int i=0; i<nbChildren; i++)
   10986:	f04f 0300 	mov.w	r3, #0	; 0x0
   1098a:	61bb      	str	r3, [r7, #24]
   1098c:	e011      	b.n	109b2 <_ZN5Etape9addVoisinEPS_b+0x7a>
        {
            temp[i] = this->children[i];
   1098e:	69bb      	ldr	r3, [r7, #24]
   10990:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10994:	697b      	ldr	r3, [r7, #20]
   10996:	eb03 0102 	add.w	r1, r3, r2
   1099a:	68fb      	ldr	r3, [r7, #12]
   1099c:	681a      	ldr	r2, [r3, #0]
   1099e:	69bb      	ldr	r3, [r7, #24]
   109a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   109a4:	4413      	add	r3, r2
   109a6:	681b      	ldr	r3, [r3, #0]
   109a8:	600b      	str	r3, [r1, #0]
        this->nbChildren++;
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
        for(int i=0; i<nbChildren; i++)
   109aa:	69bb      	ldr	r3, [r7, #24]
   109ac:	f103 0301 	add.w	r3, r3, #1	; 0x1
   109b0:	61bb      	str	r3, [r7, #24]
   109b2:	68fb      	ldr	r3, [r7, #12]
   109b4:	69da      	ldr	r2, [r3, #28]
   109b6:	69bb      	ldr	r3, [r7, #24]
   109b8:	429a      	cmp	r2, r3
   109ba:	dce8      	bgt.n	1098e <_ZN5Etape9addVoisinEPS_b+0x56>
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
   109bc:	68fb      	ldr	r3, [r7, #12]
   109be:	69db      	ldr	r3, [r3, #28]
   109c0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   109c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   109c8:	4618      	mov	r0, r3
   109ca:	f7fe f929 	bl	ec20 <_Znaj>
   109ce:	4603      	mov	r3, r0
   109d0:	461a      	mov	r2, r3
   109d2:	68fb      	ldr	r3, [r7, #12]
   109d4:	601a      	str	r2, [r3, #0]
        for(int i=0; i<nbChildren; i++)
   109d6:	f04f 0300 	mov.w	r3, #0	; 0x0
   109da:	61fb      	str	r3, [r7, #28]
   109dc:	e011      	b.n	10a02 <_ZN5Etape9addVoisinEPS_b+0xca>
        {
            this->children[i] = temp[i];
   109de:	68fb      	ldr	r3, [r7, #12]
   109e0:	681a      	ldr	r2, [r3, #0]
   109e2:	69fb      	ldr	r3, [r7, #28]
   109e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   109e8:	eb02 0103 	add.w	r1, r2, r3
   109ec:	69fb      	ldr	r3, [r7, #28]
   109ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
   109f2:	697b      	ldr	r3, [r7, #20]
   109f4:	4413      	add	r3, r2
   109f6:	681b      	ldr	r3, [r3, #0]
   109f8:	600b      	str	r3, [r1, #0]
        for(int i=0; i<nbChildren; i++)
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
        for(int i=0; i<nbChildren; i++)
   109fa:	69fb      	ldr	r3, [r7, #28]
   109fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10a00:	61fb      	str	r3, [r7, #28]
   10a02:	68fb      	ldr	r3, [r7, #12]
   10a04:	69da      	ldr	r2, [r3, #28]
   10a06:	69fb      	ldr	r3, [r7, #28]
   10a08:	429a      	cmp	r2, r3
   10a0a:	dce8      	bgt.n	109de <_ZN5Etape9addVoisinEPS_b+0xa6>
        {
            this->children[i] = temp[i];
        }
        delete[] temp;
   10a0c:	697b      	ldr	r3, [r7, #20]
   10a0e:	2b00      	cmp	r3, #0
   10a10:	d002      	beq.n	10a18 <_ZN5Etape9addVoisinEPS_b+0xe0>
   10a12:	6978      	ldr	r0, [r7, #20]
   10a14:	f7fe f98a 	bl	ed2c <_ZdaPv>
        this->children[nbChildren] = newVoisin;
   10a18:	68fb      	ldr	r3, [r7, #12]
   10a1a:	681a      	ldr	r2, [r3, #0]
   10a1c:	68fb      	ldr	r3, [r7, #12]
   10a1e:	69db      	ldr	r3, [r3, #28]
   10a20:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10a24:	441a      	add	r2, r3
   10a26:	68bb      	ldr	r3, [r7, #8]
   10a28:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   10a2a:	68fb      	ldr	r3, [r7, #12]
   10a2c:	69db      	ldr	r3, [r3, #28]
   10a2e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10a32:	68fb      	ldr	r3, [r7, #12]
   10a34:	61da      	str	r2, [r3, #28]
        qDebug() << "ERREUR, TROP DE VOISINS !!!";
#endif
    }
    this->children[i] = newVoisin;
    */
    if (autreSens)
   10a36:	79fb      	ldrb	r3, [r7, #7]
   10a38:	2b00      	cmp	r3, #0
   10a3a:	d005      	beq.n	10a48 <_ZN5Etape9addVoisinEPS_b+0x110>
    {
        newVoisin->addVoisin(this, false);
   10a3c:	68b8      	ldr	r0, [r7, #8]
   10a3e:	68f9      	ldr	r1, [r7, #12]
   10a40:	f04f 0200 	mov.w	r2, #0	; 0x0
   10a44:	f7ff ff78 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    }
}
   10a48:	f107 0720 	add.w	r7, r7, #32	; 0x20
   10a4c:	46bd      	mov	sp, r7
   10a4e:	bd80      	pop	{r7, pc}

00010a50 <_ZN5Etape21computeChildDistancesEv>:
void Etape::setDistances(int* distances)
{
    this->distances = distances;
}

void Etape::computeChildDistances(){
   10a50:	b590      	push	{r4, r7, lr}
   10a52:	b085      	sub	sp, #20
   10a54:	af00      	add	r7, sp, #0
   10a56:	6078      	str	r0, [r7, #4]
    this->distances = new int[this->nbChildren];
   10a58:	687b      	ldr	r3, [r7, #4]
   10a5a:	69db      	ldr	r3, [r3, #28]
   10a5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10a60:	4618      	mov	r0, r3
   10a62:	f7fe f8dd 	bl	ec20 <_Znaj>
   10a66:	4603      	mov	r3, r0
   10a68:	461a      	mov	r2, r3
   10a6a:	687b      	ldr	r3, [r7, #4]
   10a6c:	625a      	str	r2, [r3, #36]

    for(int i=0; i<this->nbChildren; i++)
   10a6e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10a72:	60fb      	str	r3, [r7, #12]
   10a74:	e017      	b.n	10aa6 <_ZN5Etape21computeChildDistancesEv+0x56>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
   10a76:	687b      	ldr	r3, [r7, #4]
   10a78:	6a5a      	ldr	r2, [r3, #36]
   10a7a:	68fb      	ldr	r3, [r7, #12]
   10a7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10a80:	eb02 0403 	add.w	r4, r2, r3
   10a84:	687b      	ldr	r3, [r7, #4]
   10a86:	681a      	ldr	r2, [r3, #0]
   10a88:	68fb      	ldr	r3, [r7, #12]
   10a8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10a8e:	4413      	add	r3, r2
   10a90:	681b      	ldr	r3, [r3, #0]
   10a92:	4618      	mov	r0, r3
   10a94:	6879      	ldr	r1, [r7, #4]
   10a96:	f7ff fd51 	bl	1053c <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>
   10a9a:	4603      	mov	r3, r0
   10a9c:	6023      	str	r3, [r4, #0]
}

void Etape::computeChildDistances(){
    this->distances = new int[this->nbChildren];

    for(int i=0; i<this->nbChildren; i++)
   10a9e:	68fb      	ldr	r3, [r7, #12]
   10aa0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10aa4:	60fb      	str	r3, [r7, #12]
   10aa6:	687b      	ldr	r3, [r7, #4]
   10aa8:	69da      	ldr	r2, [r3, #28]
   10aaa:	68fb      	ldr	r3, [r7, #12]
   10aac:	429a      	cmp	r2, r3
   10aae:	dce2      	bgt.n	10a76 <_ZN5Etape21computeChildDistancesEv+0x26>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}
   10ab0:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10ab4:	46bd      	mov	sp, r7
   10ab6:	bd90      	pop	{r4, r7, pc}

00010ab8 <_ZN5EtapeC1Ev>:
    }

    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){}
   10ab8:	b580      	push	{r7, lr}
   10aba:	b082      	sub	sp, #8
   10abc:	af00      	add	r7, sp, #0
   10abe:	6078      	str	r0, [r7, #4]
   10ac0:	687b      	ldr	r3, [r7, #4]
   10ac2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10ac6:	4618      	mov	r0, r3
   10ac8:	f7fe f950 	bl	ed6c <_ZN8PositionC1Ev>
   10acc:	687b      	ldr	r3, [r7, #4]
   10ace:	4618      	mov	r0, r3
   10ad0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10ad4:	46bd      	mov	sp, r7
   10ad6:	bd80      	pop	{r7, pc}

00010ad8 <_ZN5EtapeC2Ev>:
   10ad8:	b580      	push	{r7, lr}
   10ada:	b082      	sub	sp, #8
   10adc:	af00      	add	r7, sp, #0
   10ade:	6078      	str	r0, [r7, #4]
   10ae0:	687b      	ldr	r3, [r7, #4]
   10ae2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10ae6:	4618      	mov	r0, r3
   10ae8:	f7fe f940 	bl	ed6c <_ZN8PositionC1Ev>
   10aec:	687b      	ldr	r3, [r7, #4]
   10aee:	4618      	mov	r0, r3
   10af0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10af4:	46bd      	mov	sp, r7
   10af6:	bd80      	pop	{r7, pc}

00010af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10af8:	b580      	push	{r7, lr}
   10afa:	b086      	sub	sp, #24
   10afc:	af00      	add	r7, sp, #0
   10afe:	60f8      	str	r0, [r7, #12]
   10b00:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10b04:	e880 0006 	stmia.w	r0, {r1, r2}
   10b08:	603b      	str	r3, [r7, #0]
   10b0a:	68fb      	ldr	r3, [r7, #12]
   10b0c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10b10:	4618      	mov	r0, r3
   10b12:	f7fe f92b 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->position = position;
   10b16:	68fb      	ldr	r3, [r7, #12]
   10b18:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10b1c:	4618      	mov	r0, r3
   10b1e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10b22:	e893 0006 	ldmia.w	r3, {r1, r2}
   10b26:	f7fe f9dd 	bl	eee4 <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   10b2a:	68fa      	ldr	r2, [r7, #12]
   10b2c:	f897 3024 	ldrb.w	r3, [r7, #36]
   10b30:	7613      	strb	r3, [r2, #24]
    this->state = state;
   10b32:	68fa      	ldr	r2, [r7, #12]
   10b34:	6abb      	ldr	r3, [r7, #40]
   10b36:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10b38:	68fa      	ldr	r2, [r7, #12]
   10b3a:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b3e:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   10b40:	68fa      	ldr	r2, [r7, #12]
   10b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b46:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10b48:	68fa      	ldr	r2, [r7, #12]
   10b4a:	683b      	ldr	r3, [r7, #0]
   10b4c:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   10b4e:	68fa      	ldr	r2, [r7, #12]
   10b50:	6afb      	ldr	r3, [r7, #44]
   10b52:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10b54:	68fa      	ldr	r2, [r7, #12]
   10b56:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b5a:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10b5c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b60:	617b      	str	r3, [r7, #20]
   10b62:	e00c      	b.n	10b7e <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   10b64:	68fb      	ldr	r3, [r7, #12]
   10b66:	681a      	ldr	r2, [r3, #0]
   10b68:	697b      	ldr	r3, [r7, #20]
   10b6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10b6e:	441a      	add	r2, r3
   10b70:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b74:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10b76:	697b      	ldr	r3, [r7, #20]
   10b78:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10b7c:	617b      	str	r3, [r7, #20]
   10b7e:	68fb      	ldr	r3, [r7, #12]
   10b80:	69da      	ldr	r2, [r3, #28]
   10b82:	697b      	ldr	r3, [r7, #20]
   10b84:	429a      	cmp	r2, r3
   10b86:	dced      	bgt.n	10b64 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10b88:	683b      	ldr	r3, [r7, #0]
   10b8a:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10b8e:	6a3b      	ldr	r3, [r7, #32]
   10b90:	441a      	add	r2, r3
   10b92:	68fb      	ldr	r3, [r7, #12]
   10b94:	6013      	str	r3, [r2, #0]
}
   10b96:	68fb      	ldr	r3, [r7, #12]
   10b98:	4618      	mov	r0, r3
   10b9a:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10b9e:	46bd      	mov	sp, r7
   10ba0:	bd80      	pop	{r7, pc}
   10ba2:	46c0      	nop			(mov r8, r8)

00010ba4 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10ba4:	b580      	push	{r7, lr}
   10ba6:	b086      	sub	sp, #24
   10ba8:	af00      	add	r7, sp, #0
   10baa:	60f8      	str	r0, [r7, #12]
   10bac:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10bb0:	e880 0006 	stmia.w	r0, {r1, r2}
   10bb4:	603b      	str	r3, [r7, #0]
   10bb6:	68fb      	ldr	r3, [r7, #12]
   10bb8:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10bbc:	4618      	mov	r0, r3
   10bbe:	f7fe f8d5 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->position = position;
   10bc2:	68fb      	ldr	r3, [r7, #12]
   10bc4:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10bc8:	4618      	mov	r0, r3
   10bca:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10bce:	e893 0006 	ldmia.w	r3, {r1, r2}
   10bd2:	f7fe f987 	bl	eee4 <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   10bd6:	68fa      	ldr	r2, [r7, #12]
   10bd8:	f897 3024 	ldrb.w	r3, [r7, #36]
   10bdc:	7613      	strb	r3, [r2, #24]
    this->state = state;
   10bde:	68fa      	ldr	r2, [r7, #12]
   10be0:	6abb      	ldr	r3, [r7, #40]
   10be2:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10be4:	68fa      	ldr	r2, [r7, #12]
   10be6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10bea:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   10bec:	68fa      	ldr	r2, [r7, #12]
   10bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10bf2:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10bf4:	68fa      	ldr	r2, [r7, #12]
   10bf6:	683b      	ldr	r3, [r7, #0]
   10bf8:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   10bfa:	68fa      	ldr	r2, [r7, #12]
   10bfc:	6afb      	ldr	r3, [r7, #44]
   10bfe:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10c00:	68fa      	ldr	r2, [r7, #12]
   10c02:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c06:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10c08:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c0c:	617b      	str	r3, [r7, #20]
   10c0e:	e00c      	b.n	10c2a <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   10c10:	68fb      	ldr	r3, [r7, #12]
   10c12:	681a      	ldr	r2, [r3, #0]
   10c14:	697b      	ldr	r3, [r7, #20]
   10c16:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10c1a:	441a      	add	r2, r3
   10c1c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c20:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10c22:	697b      	ldr	r3, [r7, #20]
   10c24:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10c28:	617b      	str	r3, [r7, #20]
   10c2a:	68fb      	ldr	r3, [r7, #12]
   10c2c:	69da      	ldr	r2, [r3, #28]
   10c2e:	697b      	ldr	r3, [r7, #20]
   10c30:	429a      	cmp	r2, r3
   10c32:	dced      	bgt.n	10c10 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10c34:	683b      	ldr	r3, [r7, #0]
   10c36:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10c3a:	6a3b      	ldr	r3, [r7, #32]
   10c3c:	441a      	add	r2, r3
   10c3e:	68fb      	ldr	r3, [r7, #12]
   10c40:	6013      	str	r3, [r2, #0]
}
   10c42:	68fb      	ldr	r3, [r7, #12]
   10c44:	4618      	mov	r0, r3
   10c46:	f107 0718 	add.w	r7, r7, #24	; 0x18
   10c4a:	46bd      	mov	sp, r7
   10c4c:	bd80      	pop	{r7, pc}
   10c4e:	46c0      	nop			(mov r8, r8)

00010c50 <_ZN7Gobelet6updateEv>:

Gobelet::Gobelet(Position position):MediumLevelAction(position){}

Gobelet::~Gobelet(){}

int Gobelet::update()
   10c50:	b580      	push	{r7, lr}
   10c52:	b084      	sub	sp, #16
   10c54:	af02      	add	r7, sp, #8
   10c56:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
   10c58:	687b      	ldr	r3, [r7, #4]
   10c5a:	68db      	ldr	r3, [r3, #12]
   10c5c:	2b00      	cmp	r3, #0
   10c5e:	d106      	bne.n	10c6e <_ZN7Gobelet6updateEv+0x1e>
    {
        #ifndef ROBOTHW
            qDebug() << "gobelet";
        #endif
        status++;
   10c60:	687b      	ldr	r3, [r7, #4]
   10c62:	68db      	ldr	r3, [r3, #12]
   10c64:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10c68:	687b      	ldr	r3, [r7, #4]
   10c6a:	60da      	str	r2, [r3, #12]
   10c6c:	e063      	b.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 1)
   10c6e:	687b      	ldr	r3, [r7, #4]
   10c70:	68db      	ldr	r3, [r3, #12]
   10c72:	2b01      	cmp	r3, #1
   10c74:	d114      	bne.n	10ca0 <_ZN7Gobelet6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   10c76:	687b      	ldr	r3, [r7, #4]
   10c78:	f893 c010 	ldrb.w	ip, [r3, #16]
   10c7c:	687a      	ldr	r2, [r7, #4]
   10c7e:	4b31      	ldr	r3, [pc, #196]	(10d44 <_ZN7Gobelet6updateEv+0xf4>)
   10c80:	9300      	str	r3, [sp, #0]
   10c82:	f102 0304 	add.w	r3, r2, #4	; 0x4
   10c86:	e893 0003 	ldmia.w	r3, {r0, r1}
   10c8a:	4662      	mov	r2, ip
   10c8c:	4b2e      	ldr	r3, [pc, #184]	(10d48 <_ZN7Gobelet6updateEv+0xf8>)
   10c8e:	f005 fb45 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   10c92:	687b      	ldr	r3, [r7, #4]
   10c94:	68db      	ldr	r3, [r3, #12]
   10c96:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10c9a:	687b      	ldr	r3, [r7, #4]
   10c9c:	60da      	str	r2, [r3, #12]
   10c9e:	e04a      	b.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 2)
   10ca0:	687b      	ldr	r3, [r7, #4]
   10ca2:	68db      	ldr	r3, [r3, #12]
   10ca4:	2b02      	cmp	r3, #2
   10ca6:	d119      	bne.n	10cdc <_ZN7Gobelet6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
   10ca8:	687b      	ldr	r3, [r7, #4]
   10caa:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10cae:	e893 0003 	ldmia.w	r3, {r0, r1}
   10cb2:	4a26      	ldr	r2, [pc, #152]	(10d4c <_ZN7Gobelet6updateEv+0xfc>)
   10cb4:	f7f7 fbe6 	bl	8484 <_ZN7Command6isNearE8Positionf>
   10cb8:	4603      	mov	r3, r0
   10cba:	2b00      	cmp	r3, #0
   10cbc:	d03b      	beq.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
        {
            StrategieV2::lookAt(goalPosition);
   10cbe:	687b      	ldr	r3, [r7, #4]
   10cc0:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10cc4:	e893 0003 	ldmia.w	r3, {r0, r1}
   10cc8:	4a21      	ldr	r2, [pc, #132]	(10d50 <_ZN7Gobelet6updateEv+0x100>)
   10cca:	f005 fa8f 	bl	161ec <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   10cce:	687b      	ldr	r3, [r7, #4]
   10cd0:	68db      	ldr	r3, [r3, #12]
   10cd2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10cd6:	687b      	ldr	r3, [r7, #4]
   10cd8:	60da      	str	r2, [r3, #12]
   10cda:	e02c      	b.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
        }
    }

    else if (status == 3)
   10cdc:	687b      	ldr	r3, [r7, #4]
   10cde:	68db      	ldr	r3, [r3, #12]
   10ce0:	2b03      	cmp	r3, #3
   10ce2:	d111      	bne.n	10d08 <_ZN7Gobelet6updateEv+0xb8>
    {
        if (Command::isLookingAt(goalPosition))
   10ce4:	687b      	ldr	r3, [r7, #4]
   10ce6:	f103 0304 	add.w	r3, r3, #4	; 0x4
   10cea:	e893 0003 	ldmia.w	r3, {r0, r1}
   10cee:	4a19      	ldr	r2, [pc, #100]	(10d54 <_ZN7Gobelet6updateEv+0x104>)
   10cf0:	f7f7 fb0c 	bl	830c <_ZN7Command11isLookingAtE8Positionf>
   10cf4:	4603      	mov	r3, r0
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	d01d      	beq.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
        {
            //recuperer le gobelet
            #ifndef ROBOTHW
            qDebug() << "On recupere le gobelet";
            #endif
            status++;
   10cfa:	687b      	ldr	r3, [r7, #4]
   10cfc:	68db      	ldr	r3, [r3, #12]
   10cfe:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10d02:	687b      	ldr	r3, [r7, #4]
   10d04:	60da      	str	r2, [r3, #12]
   10d06:	e016      	b.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
        }
    }

    else if (status <=53 && status > -1)
   10d08:	687b      	ldr	r3, [r7, #4]
   10d0a:	68db      	ldr	r3, [r3, #12]
   10d0c:	2b35      	cmp	r3, #53
   10d0e:	dc0a      	bgt.n	10d26 <_ZN7Gobelet6updateEv+0xd6>
   10d10:	687b      	ldr	r3, [r7, #4]
   10d12:	68db      	ldr	r3, [r3, #12]
   10d14:	2b00      	cmp	r3, #0
   10d16:	db06      	blt.n	10d26 <_ZN7Gobelet6updateEv+0xd6>
    {
        status++;
   10d18:	687b      	ldr	r3, [r7, #4]
   10d1a:	68db      	ldr	r3, [r3, #12]
   10d1c:	f103 0201 	add.w	r2, r3, #1	; 0x1
   10d20:	687b      	ldr	r3, [r7, #4]
   10d22:	60da      	str	r2, [r3, #12]
   10d24:	e007      	b.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
    }

    else if (status == 54)
   10d26:	687b      	ldr	r3, [r7, #4]
   10d28:	68db      	ldr	r3, [r3, #12]
   10d2a:	2b36      	cmp	r3, #54
   10d2c:	d103      	bne.n	10d36 <_ZN7Gobelet6updateEv+0xe6>
    {
        status = -1;
   10d2e:	687a      	ldr	r2, [r7, #4]
   10d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d34:	60d3      	str	r3, [r2, #12]
    }

    return status;
   10d36:	687b      	ldr	r3, [r7, #4]
   10d38:	68db      	ldr	r3, [r3, #12]
}
   10d3a:	4618      	mov	r0, r3
   10d3c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10d40:	46bd      	mov	sp, r7
   10d42:	bd80      	pop	{r7, pc}
   10d44:	c2c80000 	.word	0xc2c80000
   10d48:	40400000 	.word	0x40400000
   10d4c:	41f00000 	.word	0x41f00000
   10d50:	3cf5c28f 	.word	0x3cf5c28f
   10d54:	3db2b8c2 	.word	0x3db2b8c2

00010d58 <_ZN7GobeletD0Ev>:

Gobelet::Gobelet(){}

Gobelet::Gobelet(Position position):MediumLevelAction(position){}

Gobelet::~Gobelet(){}
   10d58:	b580      	push	{r7, lr}
   10d5a:	b082      	sub	sp, #8
   10d5c:	af00      	add	r7, sp, #0
   10d5e:	6078      	str	r0, [r7, #4]
   10d60:	687a      	ldr	r2, [r7, #4]
   10d62:	4b0a      	ldr	r3, [pc, #40]	(10d8c <_ZN7GobeletD0Ev+0x34>)
   10d64:	6013      	str	r3, [r2, #0]
   10d66:	687b      	ldr	r3, [r7, #4]
   10d68:	4618      	mov	r0, r3
   10d6a:	f004 fae7 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   10d6e:	f04f 0301 	mov.w	r3, #1	; 0x1
   10d72:	b2db      	uxtb	r3, r3
   10d74:	2b00      	cmp	r3, #0
   10d76:	d002      	beq.n	10d7e <_ZN7GobeletD0Ev+0x26>
   10d78:	6878      	ldr	r0, [r7, #4]
   10d7a:	f7fd ff5f 	bl	ec3c <_ZdlPv>
   10d7e:	687b      	ldr	r3, [r7, #4]
   10d80:	4618      	mov	r0, r3
   10d82:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10d86:	46bd      	mov	sp, r7
   10d88:	bd80      	pop	{r7, pc}
   10d8a:	46c0      	nop			(mov r8, r8)
   10d8c:	000223f8 	.word	0x000223f8

00010d90 <_ZN7GobeletD1Ev>:
   10d90:	b580      	push	{r7, lr}
   10d92:	b082      	sub	sp, #8
   10d94:	af00      	add	r7, sp, #0
   10d96:	6078      	str	r0, [r7, #4]
   10d98:	687a      	ldr	r2, [r7, #4]
   10d9a:	4b0a      	ldr	r3, [pc, #40]	(10dc4 <_ZN7GobeletD1Ev+0x34>)
   10d9c:	6013      	str	r3, [r2, #0]
   10d9e:	687b      	ldr	r3, [r7, #4]
   10da0:	4618      	mov	r0, r3
   10da2:	f004 facb 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   10da6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10daa:	b2db      	uxtb	r3, r3
   10dac:	2b00      	cmp	r3, #0
   10dae:	d002      	beq.n	10db6 <_ZN7GobeletD1Ev+0x26>
   10db0:	6878      	ldr	r0, [r7, #4]
   10db2:	f7fd ff43 	bl	ec3c <_ZdlPv>
   10db6:	687b      	ldr	r3, [r7, #4]
   10db8:	4618      	mov	r0, r3
   10dba:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10dbe:	46bd      	mov	sp, r7
   10dc0:	bd80      	pop	{r7, pc}
   10dc2:	46c0      	nop			(mov r8, r8)
   10dc4:	000223f8 	.word	0x000223f8

00010dc8 <_ZN7GobeletD2Ev>:
   10dc8:	b580      	push	{r7, lr}
   10dca:	b082      	sub	sp, #8
   10dcc:	af00      	add	r7, sp, #0
   10dce:	6078      	str	r0, [r7, #4]
   10dd0:	687a      	ldr	r2, [r7, #4]
   10dd2:	4b0a      	ldr	r3, [pc, #40]	(10dfc <_ZN7GobeletD2Ev+0x34>)
   10dd4:	6013      	str	r3, [r2, #0]
   10dd6:	687b      	ldr	r3, [r7, #4]
   10dd8:	4618      	mov	r0, r3
   10dda:	f004 faaf 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   10dde:	f04f 0300 	mov.w	r3, #0	; 0x0
   10de2:	b2db      	uxtb	r3, r3
   10de4:	2b00      	cmp	r3, #0
   10de6:	d002      	beq.n	10dee <_ZN7GobeletD2Ev+0x26>
   10de8:	6878      	ldr	r0, [r7, #4]
   10dea:	f7fd ff27 	bl	ec3c <_ZdlPv>
   10dee:	687b      	ldr	r3, [r7, #4]
   10df0:	4618      	mov	r0, r3
   10df2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10df6:	46bd      	mov	sp, r7
   10df8:	bd80      	pop	{r7, pc}
   10dfa:	46c0      	nop			(mov r8, r8)
   10dfc:	000223f8 	.word	0x000223f8

00010e00 <_ZN7GobeletC1E8Position>:
#include "command.h"


Gobelet::Gobelet(){}

Gobelet::Gobelet(Position position):MediumLevelAction(position){}
   10e00:	b580      	push	{r7, lr}
   10e02:	b084      	sub	sp, #16
   10e04:	af00      	add	r7, sp, #0
   10e06:	60f8      	str	r0, [r7, #12]
   10e08:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10e0c:	e883 0006 	stmia.w	r3, {r1, r2}
   10e10:	68fb      	ldr	r3, [r7, #12]
   10e12:	4618      	mov	r0, r3
   10e14:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10e18:	e893 0006 	ldmia.w	r3, {r1, r2}
   10e1c:	f004 face 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   10e20:	68fa      	ldr	r2, [r7, #12]
   10e22:	4b07      	ldr	r3, [pc, #28]	(10e40 <_ZN7GobeletC1E8Position+0x40>)
   10e24:	6013      	str	r3, [r2, #0]
   10e26:	68fb      	ldr	r3, [r7, #12]
   10e28:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10e2c:	4618      	mov	r0, r3
   10e2e:	f7fd ff9d 	bl	ed6c <_ZN8PositionC1Ev>
   10e32:	68fb      	ldr	r3, [r7, #12]
   10e34:	4618      	mov	r0, r3
   10e36:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10e3a:	46bd      	mov	sp, r7
   10e3c:	bd80      	pop	{r7, pc}
   10e3e:	46c0      	nop			(mov r8, r8)
   10e40:	000223f8 	.word	0x000223f8

00010e44 <_ZN7GobeletC2E8Position>:
   10e44:	b580      	push	{r7, lr}
   10e46:	b084      	sub	sp, #16
   10e48:	af00      	add	r7, sp, #0
   10e4a:	60f8      	str	r0, [r7, #12]
   10e4c:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10e50:	e883 0006 	stmia.w	r3, {r1, r2}
   10e54:	68fb      	ldr	r3, [r7, #12]
   10e56:	4618      	mov	r0, r3
   10e58:	f107 0304 	add.w	r3, r7, #4	; 0x4
   10e5c:	e893 0006 	ldmia.w	r3, {r1, r2}
   10e60:	f004 faac 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   10e64:	68fa      	ldr	r2, [r7, #12]
   10e66:	4b07      	ldr	r3, [pc, #28]	(10e84 <_ZN7GobeletC2E8Position+0x40>)
   10e68:	6013      	str	r3, [r2, #0]
   10e6a:	68fb      	ldr	r3, [r7, #12]
   10e6c:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10e70:	4618      	mov	r0, r3
   10e72:	f7fd ff7b 	bl	ed6c <_ZN8PositionC1Ev>
   10e76:	68fb      	ldr	r3, [r7, #12]
   10e78:	4618      	mov	r0, r3
   10e7a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10e7e:	46bd      	mov	sp, r7
   10e80:	bd80      	pop	{r7, pc}
   10e82:	46c0      	nop			(mov r8, r8)
   10e84:	000223f8 	.word	0x000223f8

00010e88 <_ZN7GobeletC1Ev>:
#include "strategieV2.h"
#include "mediumLevelAction.h"
#include "command.h"


Gobelet::Gobelet(){}
   10e88:	b590      	push	{r4, r7, lr}
   10e8a:	b085      	sub	sp, #20
   10e8c:	af00      	add	r7, sp, #0
   10e8e:	6078      	str	r0, [r7, #4]
   10e90:	687c      	ldr	r4, [r7, #4]
   10e92:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10e96:	4618      	mov	r0, r3
   10e98:	490d      	ldr	r1, [pc, #52]	(10ed0 <_ZN7GobeletC1Ev+0x48>)
   10e9a:	4a0d      	ldr	r2, [pc, #52]	(10ed0 <_ZN7GobeletC1Ev+0x48>)
   10e9c:	f04f 0301 	mov.w	r3, #1	; 0x1
   10ea0:	f7fd ff8c 	bl	edbc <_ZN8PositionC1Effb>
   10ea4:	4620      	mov	r0, r4
   10ea6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10eaa:	e893 0006 	ldmia.w	r3, {r1, r2}
   10eae:	f004 fa85 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   10eb2:	687a      	ldr	r2, [r7, #4]
   10eb4:	4b07      	ldr	r3, [pc, #28]	(10ed4 <_ZN7GobeletC1Ev+0x4c>)
   10eb6:	6013      	str	r3, [r2, #0]
   10eb8:	687b      	ldr	r3, [r7, #4]
   10eba:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10ebe:	4618      	mov	r0, r3
   10ec0:	f7fd ff54 	bl	ed6c <_ZN8PositionC1Ev>
   10ec4:	687b      	ldr	r3, [r7, #4]
   10ec6:	4618      	mov	r0, r3
   10ec8:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10ecc:	46bd      	mov	sp, r7
   10ece:	bd90      	pop	{r4, r7, pc}
   10ed0:	00000000 	.word	0x00000000
   10ed4:	000223f8 	.word	0x000223f8

00010ed8 <_ZN7GobeletC2Ev>:
   10ed8:	b590      	push	{r4, r7, lr}
   10eda:	b085      	sub	sp, #20
   10edc:	af00      	add	r7, sp, #0
   10ede:	6078      	str	r0, [r7, #4]
   10ee0:	687c      	ldr	r4, [r7, #4]
   10ee2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10ee6:	4618      	mov	r0, r3
   10ee8:	490d      	ldr	r1, [pc, #52]	(10f20 <_ZN7GobeletC2Ev+0x48>)
   10eea:	4a0d      	ldr	r2, [pc, #52]	(10f20 <_ZN7GobeletC2Ev+0x48>)
   10eec:	f04f 0301 	mov.w	r3, #1	; 0x1
   10ef0:	f7fd ff64 	bl	edbc <_ZN8PositionC1Effb>
   10ef4:	4620      	mov	r0, r4
   10ef6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   10efa:	e893 0006 	ldmia.w	r3, {r1, r2}
   10efe:	f004 fa5d 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   10f02:	687a      	ldr	r2, [r7, #4]
   10f04:	4b07      	ldr	r3, [pc, #28]	(10f24 <_ZN7GobeletC2Ev+0x4c>)
   10f06:	6013      	str	r3, [r2, #0]
   10f08:	687b      	ldr	r3, [r7, #4]
   10f0a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   10f0e:	4618      	mov	r0, r3
   10f10:	f7fd ff2c 	bl	ed6c <_ZN8PositionC1Ev>
   10f14:	687b      	ldr	r3, [r7, #4]
   10f16:	4618      	mov	r0, r3
   10f18:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10f1c:	46bd      	mov	sp, r7
   10f1e:	bd90      	pop	{r4, r7, pc}
   10f20:	00000000 	.word	0x00000000
   10f24:	000223f8 	.word	0x000223f8

00010f28 <_ZN9Krabi201513getScoreEtapeEi>:
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
    }
}

int Krabi2015::getScoreEtape(int i){
   10f28:	b580      	push	{r7, lr}
   10f2a:	b084      	sub	sp, #16
   10f2c:	af00      	add	r7, sp, #0
   10f2e:	60f8      	str	r0, [r7, #12]
   10f30:	60b9      	str	r1, [r7, #8]
    /* TODO : Supprimer le modificateur temporel et inclure directement un coefficient dans le score pour les actions longues
       Plus tard : pourquoi pas changer le système en ayant les FEU etc... fils de Etape, ça éviterait aussi le switch dans updateStock().
       Juste faire attention à comment transmettre le stock à update.
     */
    switch (this->tableauEtapesTotal[i]->getEtapeType()){
   10f32:	68fb      	ldr	r3, [r7, #12]
   10f34:	6b5a      	ldr	r2, [r3, #52]
   10f36:	68bb      	ldr	r3, [r7, #8]
   10f38:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10f3c:	4413      	add	r3, r2
   10f3e:	681b      	ldr	r3, [r3, #0]
   10f40:	4618      	mov	r0, r3
   10f42:	f7ff fc19 	bl	10778 <_ZN5Etape12getEtapeTypeEv>
   10f46:	4603      	mov	r3, r0
   10f48:	2b15      	cmp	r3, #21
   10f4a:	d84b      	bhi.n	10fe4 <_ZN9Krabi201513getScoreEtapeEi+0xbc>
   10f4c:	a201      	add	r2, pc, #4	(adr r2, 10f54 <_ZN9Krabi201513getScoreEtapeEi+0x2c>)
   10f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10f52:	46c0      	nop			(mov r8, r8)
   10f54:	00010fdd 	.word	0x00010fdd
   10f58:	00010fe5 	.word	0x00010fe5
   10f5c:	00010fe5 	.word	0x00010fe5
   10f60:	00010fe5 	.word	0x00010fe5
   10f64:	00010fe5 	.word	0x00010fe5
   10f68:	00010fad 	.word	0x00010fad
   10f6c:	00010fe5 	.word	0x00010fe5
   10f70:	00010fe5 	.word	0x00010fe5
   10f74:	00010fe5 	.word	0x00010fe5
   10f78:	00010fe5 	.word	0x00010fe5
   10f7c:	00010fe5 	.word	0x00010fe5
   10f80:	00010fe5 	.word	0x00010fe5
   10f84:	00010fe5 	.word	0x00010fe5
   10f88:	00010fe5 	.word	0x00010fe5
   10f8c:	00010fe5 	.word	0x00010fe5
   10f90:	00010fe5 	.word	0x00010fe5
   10f94:	00010fe5 	.word	0x00010fe5
   10f98:	00010fb5 	.word	0x00010fb5
   10f9c:	00010fbd 	.word	0x00010fbd
   10fa0:	00010fcd 	.word	0x00010fcd
   10fa4:	00010fc5 	.word	0x00010fc5
   10fa8:	00010fd5 	.word	0x00010fd5
        case Etape::DEPART :
            return 0;
   10fac:	f04f 0300 	mov.w	r3, #0	; 0x0
   10fb0:	607b      	str	r3, [r7, #4]
   10fb2:	e01a      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::CLAP :
            return 50;
   10fb4:	f04f 0232 	mov.w	r2, #50	; 0x32
   10fb8:	607a      	str	r2, [r7, #4]
   10fba:	e016      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::GOBELET :
            return 0;//ce devrait être 40
   10fbc:	f04f 0300 	mov.w	r3, #0	; 0x0
   10fc0:	607b      	str	r3, [r7, #4]
   10fc2:	e012      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::AMPOULE :
            return 10;
   10fc4:	f04f 020a 	mov.w	r2, #10	; 0xa
   10fc8:	607a      	str	r2, [r7, #4]
   10fca:	e00e      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::PIED :
            return 0;//ce devrait être 20
   10fcc:	f04f 0300 	mov.w	r3, #0	; 0x0
   10fd0:	607b      	str	r3, [r7, #4]
   10fd2:	e00a      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::TAPIS :
            return 100;
   10fd4:	f04f 0264 	mov.w	r2, #100	; 0x64
   10fd8:	607a      	str	r2, [r7, #4]
   10fda:	e006      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        case Etape::POINT_PASSAGE :
            return 0;
   10fdc:	f04f 0300 	mov.w	r3, #0	; 0x0
   10fe0:	607b      	str	r3, [r7, #4]
   10fe2:	e002      	b.n	10fea <_ZN9Krabi201513getScoreEtapeEi+0xc2>
            break;
        default :
            return 0;
   10fe4:	f04f 0200 	mov.w	r2, #0	; 0x0
   10fe8:	607a      	str	r2, [r7, #4]
   10fea:	687b      	ldr	r3, [r7, #4]
            break;
    }
}
   10fec:	4618      	mov	r0, r3
   10fee:	f107 0710 	add.w	r7, r7, #16	; 0x10
   10ff2:	46bd      	mov	sp, r7
   10ff4:	bd80      	pop	{r7, pc}
   10ff6:	46c0      	nop			(mov r8, r8)

00010ff8 <_ZN9Krabi201511updateStockEv>:

    // Lancer Dijkstra
    startDijkstra();
}

void Krabi2015::updateStock(){
   10ff8:	b580      	push	{r7, lr}
   10ffa:	b082      	sub	sp, #8
   10ffc:	af00      	add	r7, sp, #0
   10ffe:	6078      	str	r0, [r7, #4]
    switch(this->tableauEtapes[this->etapeEnCours]->getEtapeType()){
   11000:	687b      	ldr	r3, [r7, #4]
   11002:	6b1a      	ldr	r2, [r3, #48]
   11004:	687b      	ldr	r3, [r7, #4]
   11006:	699b      	ldr	r3, [r3, #24]
   11008:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1100c:	4413      	add	r3, r2
   1100e:	681b      	ldr	r3, [r3, #0]
   11010:	4618      	mov	r0, r3
   11012:	f7ff fbb1 	bl	10778 <_ZN5Etape12getEtapeTypeEv>
   11016:	4603      	mov	r3, r0
   11018:	2b05      	cmp	r3, #5
   1101a:	d10d      	bne.n	11038 <_ZN9Krabi201511updateStockEv+0x40>
        case Etape::DEPART :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   1101c:	687b      	ldr	r3, [r7, #4]
   1101e:	6b1a      	ldr	r2, [r3, #48]
   11020:	687b      	ldr	r3, [r7, #4]
   11022:	699b      	ldr	r3, [r3, #24]
   11024:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11028:	4413      	add	r3, r2
   1102a:	681b      	ldr	r3, [r3, #0]
   1102c:	4618      	mov	r0, r3
   1102e:	f04f 0100 	mov.w	r1, #0	; 0x0
   11032:	f7ff fbad 	bl	10790 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
   11036:	e00c      	b.n	11052 <_ZN9Krabi201511updateStockEv+0x5a>
            break;
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   11038:	687b      	ldr	r3, [r7, #4]
   1103a:	6b1a      	ldr	r2, [r3, #48]
   1103c:	687b      	ldr	r3, [r7, #4]
   1103e:	699b      	ldr	r3, [r3, #24]
   11040:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11044:	4413      	add	r3, r2
   11046:	681b      	ldr	r3, [r3, #0]
   11048:	4618      	mov	r0, r3
   1104a:	f04f 0100 	mov.w	r1, #0	; 0x0
   1104e:	f7ff fb9f 	bl	10790 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   11052:	f107 0708 	add.w	r7, r7, #8	; 0x8
   11056:	46bd      	mov	sp, r7
   11058:	bd80      	pop	{r7, pc}
   1105a:	46c0      	nop			(mov r8, r8)

0001105c <_ZN9Krabi2015C1Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   1105c:	b590      	push	{r4, r7, lr}
   1105e:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
   11062:	b081      	sub	sp, #4
   11064:	af04      	add	r7, sp, #16
   11066:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1106a:	6018      	str	r0, [r3, #0]
   1106c:	460a      	mov	r2, r1
   1106e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11072:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11076:	701a      	strb	r2, [r3, #0]
   11078:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1107c:	681a      	ldr	r2, [r3, #0]
   1107e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11082:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11086:	781b      	ldrb	r3, [r3, #0]
   11088:	4610      	mov	r0, r2
   1108a:	4619      	mov	r1, r3
   1108c:	f006 f9dc 	bl	17448 <_ZN11StrategieV3C2Eb>
   11090:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11094:	681a      	ldr	r2, [r3, #0]
   11096:	f8df 3c70 	ldr.w	r3, [pc, #3184]	; 11d08 <_ZN9Krabi2015C1Eb+0xcac>
   1109a:	6013      	str	r3, [r2, #0]
   1109c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   110a0:	681b      	ldr	r3, [r3, #0]
   110a2:	f103 0348 	add.w	r3, r3, #72	; 0x48
   110a6:	607b      	str	r3, [r7, #4]
   110a8:	f04f 0302 	mov.w	r3, #2	; 0x2
   110ac:	60bb      	str	r3, [r7, #8]
   110ae:	e00a      	b.n	110c6 <_ZN9Krabi2015C1Eb+0x6a>
   110b0:	6878      	ldr	r0, [r7, #4]
   110b2:	f7fe fe05 	bl	fcc0 <_ZN4ClapC1Ev>
   110b6:	687b      	ldr	r3, [r7, #4]
   110b8:	f103 0328 	add.w	r3, r3, #40	; 0x28
   110bc:	607b      	str	r3, [r7, #4]
   110be:	68bb      	ldr	r3, [r7, #8]
   110c0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   110c4:	60bb      	str	r3, [r7, #8]
   110c6:	68bb      	ldr	r3, [r7, #8]
   110c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   110cc:	d1f0      	bne.n	110b0 <_ZN9Krabi2015C1Eb+0x54>
   110ce:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   110d2:	681b      	ldr	r3, [r3, #0]
   110d4:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   110d8:	60fb      	str	r3, [r7, #12]
   110da:	f04f 0304 	mov.w	r3, #4	; 0x4
   110de:	613b      	str	r3, [r7, #16]
   110e0:	e00a      	b.n	110f8 <_ZN9Krabi2015C1Eb+0x9c>
   110e2:	68f8      	ldr	r0, [r7, #12]
   110e4:	f7ff fed0 	bl	10e88 <_ZN7GobeletC1Ev>
   110e8:	68fb      	ldr	r3, [r7, #12]
   110ea:	f103 0320 	add.w	r3, r3, #32	; 0x20
   110ee:	60fb      	str	r3, [r7, #12]
   110f0:	693b      	ldr	r3, [r7, #16]
   110f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   110f6:	613b      	str	r3, [r7, #16]
   110f8:	693b      	ldr	r3, [r7, #16]
   110fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   110fe:	d1f0      	bne.n	110e2 <_ZN9Krabi2015C1Eb+0x86>
   11100:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11104:	681b      	ldr	r3, [r3, #0]
   11106:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1110a:	617b      	str	r3, [r7, #20]
   1110c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11110:	61bb      	str	r3, [r7, #24]
   11112:	e00a      	b.n	1112a <_ZN9Krabi2015C1Eb+0xce>
   11114:	6978      	ldr	r0, [r7, #20]
   11116:	f006 fae3 	bl	176e0 <_ZN5TapisC1Ev>
   1111a:	697b      	ldr	r3, [r7, #20]
   1111c:	f103 0328 	add.w	r3, r3, #40	; 0x28
   11120:	617b      	str	r3, [r7, #20]
   11122:	69bb      	ldr	r3, [r7, #24]
   11124:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11128:	61bb      	str	r3, [r7, #24]
   1112a:	69bb      	ldr	r3, [r7, #24]
   1112c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11130:	d1f0      	bne.n	11114 <_ZN9Krabi2015C1Eb+0xb8>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   11132:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11136:	681a      	ldr	r2, [r3, #0]
   11138:	f04f 0326 	mov.w	r3, #38	; 0x26
   1113c:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   1113e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11142:	681a      	ldr	r2, [r3, #0]
   11144:	f04f 0301 	mov.w	r3, #1	; 0x1
   11148:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   1114a:	f04f 0098 	mov.w	r0, #152	; 0x98
   1114e:	f7fd fd67 	bl	ec20 <_Znaj>
   11152:	4603      	mov	r3, r0
   11154:	461a      	mov	r2, r3
   11156:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1115a:	681b      	ldr	r3, [r3, #0]
   1115c:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   1115e:	f04f 0098 	mov.w	r0, #152	; 0x98
   11162:	f7fd fd5d 	bl	ec20 <_Znaj>
   11166:	4603      	mov	r3, r0
   11168:	461a      	mov	r2, r3
   1116a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1116e:	681b      	ldr	r3, [r3, #0]
   11170:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   11172:	f44f 60e5 	mov.w	r0, #1832	; 0x728
   11176:	f7fd fd53 	bl	ec20 <_Znaj>
   1117a:	4603      	mov	r3, r0
   1117c:	61fb      	str	r3, [r7, #28]
   1117e:	69fb      	ldr	r3, [r7, #28]
   11180:	2b00      	cmp	r3, #0
   11182:	d03c      	beq.n	111fe <_ZN9Krabi2015C1Eb+0x1a2>
   11184:	69fb      	ldr	r3, [r7, #28]
   11186:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1118a:	627b      	str	r3, [r7, #36]
   1118c:	6a7b      	ldr	r3, [r7, #36]
   1118e:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   11192:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   11196:	f04f 0330 	mov.w	r3, #48	; 0x30
   1119a:	6013      	str	r3, [r2, #0]
   1119c:	6a7b      	ldr	r3, [r7, #36]
   1119e:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   111a2:	f04f 0326 	mov.w	r3, #38	; 0x26
   111a6:	6013      	str	r3, [r2, #0]
   111a8:	6a7b      	ldr	r3, [r7, #36]
   111aa:	62bb      	str	r3, [r7, #40]
   111ac:	f04f 0325 	mov.w	r3, #37	; 0x25
   111b0:	62fb      	str	r3, [r7, #44]
   111b2:	e01d      	b.n	111f0 <_ZN9Krabi2015C1Eb+0x194>
   111b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   111b8:	4618      	mov	r0, r3
   111ba:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 11d0c <_ZN9Krabi2015C1Eb+0xcb0>
   111be:	f8df 2b4c 	ldr.w	r2, [pc, #2892]	; 11d0c <_ZN9Krabi2015C1Eb+0xcb0>
   111c2:	f04f 0301 	mov.w	r3, #1	; 0x1
   111c6:	f7fd fdf9 	bl	edbc <_ZN8PositionC1Effb>
   111ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
   111ce:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 11d10 <_ZN9Krabi2015C1Eb+0xcb4>
   111d2:	9300      	str	r3, [sp, #0]
   111d4:	6ab8      	ldr	r0, [r7, #40]
   111d6:	ca06      	ldmia	r2!, {r1, r2}
   111d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   111dc:	f7fe fb14 	bl	f808 <_ZN10ActionGoToC1E8Positionbf>
   111e0:	6abb      	ldr	r3, [r7, #40]
   111e2:	f103 0330 	add.w	r3, r3, #48	; 0x30
   111e6:	62bb      	str	r3, [r7, #40]
   111e8:	6afb      	ldr	r3, [r7, #44]
   111ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   111ee:	62fb      	str	r3, [r7, #44]
   111f0:	6afb      	ldr	r3, [r7, #44]
   111f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   111f6:	d1dd      	bne.n	111b4 <_ZN9Krabi2015C1Eb+0x158>
   111f8:	6a7b      	ldr	r3, [r7, #36]
   111fa:	623b      	str	r3, [r7, #32]
   111fc:	e001      	b.n	11202 <_ZN9Krabi2015C1Eb+0x1a6>
   111fe:	69fb      	ldr	r3, [r7, #28]
   11200:	623b      	str	r3, [r7, #32]
   11202:	6a3a      	ldr	r2, [r7, #32]
   11204:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11208:	681b      	ldr	r3, [r3, #0]
   1120a:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   1120c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11210:	f8c7 3510 	str.w	r3, [r7, #1296]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   11214:	f507 7202 	add.w	r2, r7, #520	; 0x208
   11218:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1121c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11220:	781b      	ldrb	r3, [r3, #0]
   11222:	4610      	mov	r0, r2
   11224:	f8df 1aec 	ldr.w	r1, [pc, #2796]	; 11d14 <_ZN9Krabi2015C1Eb+0xcb8>
   11228:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 11d18 <_ZN9Krabi2015C1Eb+0xcbc>
   1122c:	f7fd fdc6 	bl	edbc <_ZN8PositionC1Effb>
   11230:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11234:	633b      	str	r3, [r7, #48]
   11236:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1123a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1123e:	f8c7 3510 	str.w	r3, [r7, #1296]
   11242:	f04f 0034 	mov.w	r0, #52	; 0x34
   11246:	f7fd fc53 	bl	eaf0 <_Znwj>
   1124a:	4603      	mov	r3, r0
   1124c:	637b      	str	r3, [r7, #52]
   1124e:	6b7b      	ldr	r3, [r7, #52]
   11250:	2b00      	cmp	r3, #0
   11252:	d017      	beq.n	11284 <_ZN9Krabi2015C1Eb+0x228>
   11254:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11258:	681b      	ldr	r3, [r3, #0]
   1125a:	6b5b      	ldr	r3, [r3, #52]
   1125c:	f507 7202 	add.w	r2, r7, #520	; 0x208
   11260:	9300      	str	r3, [sp, #0]
   11262:	f04f 0305 	mov.w	r3, #5	; 0x5
   11266:	9301      	str	r3, [sp, #4]
   11268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1126c:	9302      	str	r3, [sp, #8]
   1126e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11272:	9303      	str	r3, [sp, #12]
   11274:	6b78      	ldr	r0, [r7, #52]
   11276:	ca06      	ldmia	r2!, {r1, r2}
   11278:	6b3b      	ldr	r3, [r7, #48]
   1127a:	f7ff fc3d 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1127e:	6b7b      	ldr	r3, [r7, #52]
   11280:	63bb      	str	r3, [r7, #56]
   11282:	e001      	b.n	11288 <_ZN9Krabi2015C1Eb+0x22c>
   11284:	6b7b      	ldr	r3, [r7, #52]
   11286:	63bb      	str	r3, [r7, #56]
   11288:	6bbb      	ldr	r3, [r7, #56]
   1128a:	f8c7 3514 	str.w	r3, [r7, #1300]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1128e:	f507 7204 	add.w	r2, r7, #528	; 0x210
   11292:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11296:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1129a:	781b      	ldrb	r3, [r3, #0]
   1129c:	4610      	mov	r0, r2
   1129e:	f8df 1a7c 	ldr.w	r1, [pc, #2684]	; 11d1c <_ZN9Krabi2015C1Eb+0xcc0>
   112a2:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 11d18 <_ZN9Krabi2015C1Eb+0xcbc>
   112a6:	f7fd fd89 	bl	edbc <_ZN8PositionC1Effb>
   112aa:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   112ae:	63fb      	str	r3, [r7, #60]
   112b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   112b4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   112b8:	f8c7 3510 	str.w	r3, [r7, #1296]
   112bc:	f04f 0034 	mov.w	r0, #52	; 0x34
   112c0:	f7fd fc16 	bl	eaf0 <_Znwj>
   112c4:	4603      	mov	r3, r0
   112c6:	643b      	str	r3, [r7, #64]
   112c8:	6c3b      	ldr	r3, [r7, #64]
   112ca:	2b00      	cmp	r3, #0
   112cc:	d017      	beq.n	112fe <_ZN9Krabi2015C1Eb+0x2a2>
   112ce:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   112d2:	681b      	ldr	r3, [r3, #0]
   112d4:	6b5b      	ldr	r3, [r3, #52]
   112d6:	f507 7204 	add.w	r2, r7, #528	; 0x210
   112da:	9300      	str	r3, [sp, #0]
   112dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   112e0:	9301      	str	r3, [sp, #4]
   112e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   112e6:	9302      	str	r3, [sp, #8]
   112e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   112ec:	9303      	str	r3, [sp, #12]
   112ee:	6c38      	ldr	r0, [r7, #64]
   112f0:	ca06      	ldmia	r2!, {r1, r2}
   112f2:	6bfb      	ldr	r3, [r7, #60]
   112f4:	f7ff fc00 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   112f8:	6c3b      	ldr	r3, [r7, #64]
   112fa:	647b      	str	r3, [r7, #68]
   112fc:	e001      	b.n	11302 <_ZN9Krabi2015C1Eb+0x2a6>
   112fe:	6c3b      	ldr	r3, [r7, #64]
   11300:	647b      	str	r3, [r7, #68]
   11302:	6c7b      	ldr	r3, [r7, #68]
   11304:	f8c7 3518 	str.w	r3, [r7, #1304]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   11308:	f507 7206 	add.w	r2, r7, #536	; 0x218
   1130c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11310:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11314:	781b      	ldrb	r3, [r3, #0]
   11316:	4610      	mov	r0, r2
   11318:	f8df 1a04 	ldr.w	r1, [pc, #2564]	; 11d20 <_ZN9Krabi2015C1Eb+0xcc4>
   1131c:	f8df 2a04 	ldr.w	r2, [pc, #2564]	; 11d24 <_ZN9Krabi2015C1Eb+0xcc8>
   11320:	f7fd fd4c 	bl	edbc <_ZN8PositionC1Effb>
   11324:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11328:	64bb      	str	r3, [r7, #72]
   1132a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1132e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11332:	f8c7 3510 	str.w	r3, [r7, #1296]
   11336:	f04f 0034 	mov.w	r0, #52	; 0x34
   1133a:	f7fd fbd9 	bl	eaf0 <_Znwj>
   1133e:	4603      	mov	r3, r0
   11340:	64fb      	str	r3, [r7, #76]
   11342:	6cfb      	ldr	r3, [r7, #76]
   11344:	2b00      	cmp	r3, #0
   11346:	d017      	beq.n	11378 <_ZN9Krabi2015C1Eb+0x31c>
   11348:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1134c:	681b      	ldr	r3, [r3, #0]
   1134e:	6b5b      	ldr	r3, [r3, #52]
   11350:	f507 7206 	add.w	r2, r7, #536	; 0x218
   11354:	9300      	str	r3, [sp, #0]
   11356:	f04f 0311 	mov.w	r3, #17	; 0x11
   1135a:	9301      	str	r3, [sp, #4]
   1135c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11360:	9302      	str	r3, [sp, #8]
   11362:	f04f 0300 	mov.w	r3, #0	; 0x0
   11366:	9303      	str	r3, [sp, #12]
   11368:	6cf8      	ldr	r0, [r7, #76]
   1136a:	ca06      	ldmia	r2!, {r1, r2}
   1136c:	6cbb      	ldr	r3, [r7, #72]
   1136e:	f7ff fbc3 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11372:	6cfb      	ldr	r3, [r7, #76]
   11374:	653b      	str	r3, [r7, #80]
   11376:	e001      	b.n	1137c <_ZN9Krabi2015C1Eb+0x320>
   11378:	6cfb      	ldr	r3, [r7, #76]
   1137a:	653b      	str	r3, [r7, #80]
   1137c:	6d3b      	ldr	r3, [r7, #80]
   1137e:	f8c7 351c 	str.w	r3, [r7, #1308]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11382:	f507 7208 	add.w	r2, r7, #544	; 0x220
   11386:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1138a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1138e:	781b      	ldrb	r3, [r3, #0]
   11390:	4610      	mov	r0, r2
   11392:	f8df 1984 	ldr.w	r1, [pc, #2436]	; 11d18 <_ZN9Krabi2015C1Eb+0xcbc>
   11396:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 11d24 <_ZN9Krabi2015C1Eb+0xcc8>
   1139a:	f7fd fd0f 	bl	edbc <_ZN8PositionC1Effb>
   1139e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   113a2:	657b      	str	r3, [r7, #84]
   113a4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   113a8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   113ac:	f8c7 3510 	str.w	r3, [r7, #1296]
   113b0:	f04f 0034 	mov.w	r0, #52	; 0x34
   113b4:	f7fd fb9c 	bl	eaf0 <_Znwj>
   113b8:	4603      	mov	r3, r0
   113ba:	65bb      	str	r3, [r7, #88]
   113bc:	6dbb      	ldr	r3, [r7, #88]
   113be:	2b00      	cmp	r3, #0
   113c0:	d017      	beq.n	113f2 <_ZN9Krabi2015C1Eb+0x396>
   113c2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   113c6:	681b      	ldr	r3, [r3, #0]
   113c8:	6b5b      	ldr	r3, [r3, #52]
   113ca:	f507 7208 	add.w	r2, r7, #544	; 0x220
   113ce:	9300      	str	r3, [sp, #0]
   113d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   113d4:	9301      	str	r3, [sp, #4]
   113d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   113da:	9302      	str	r3, [sp, #8]
   113dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   113e0:	9303      	str	r3, [sp, #12]
   113e2:	6db8      	ldr	r0, [r7, #88]
   113e4:	ca06      	ldmia	r2!, {r1, r2}
   113e6:	6d7b      	ldr	r3, [r7, #84]
   113e8:	f7ff fb86 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   113ec:	6dbb      	ldr	r3, [r7, #88]
   113ee:	65fb      	str	r3, [r7, #92]
   113f0:	e001      	b.n	113f6 <_ZN9Krabi2015C1Eb+0x39a>
   113f2:	6dbb      	ldr	r3, [r7, #88]
   113f4:	65fb      	str	r3, [r7, #92]
   113f6:	6dfb      	ldr	r3, [r7, #92]
   113f8:	f8c7 3520 	str.w	r3, [r7, #1312]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   113fc:	f507 720a 	add.w	r2, r7, #552	; 0x228
   11400:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11404:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11408:	781b      	ldrb	r3, [r3, #0]
   1140a:	4610      	mov	r0, r2
   1140c:	f8df 1918 	ldr.w	r1, [pc, #2328]	; 11d28 <_ZN9Krabi2015C1Eb+0xccc>
   11410:	f8df 2910 	ldr.w	r2, [pc, #2320]	; 11d24 <_ZN9Krabi2015C1Eb+0xcc8>
   11414:	f7fd fcd2 	bl	edbc <_ZN8PositionC1Effb>
   11418:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1141c:	663b      	str	r3, [r7, #96]
   1141e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11422:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11426:	f8c7 3510 	str.w	r3, [r7, #1296]
   1142a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1142e:	f7fd fb5f 	bl	eaf0 <_Znwj>
   11432:	4603      	mov	r3, r0
   11434:	667b      	str	r3, [r7, #100]
   11436:	6e7b      	ldr	r3, [r7, #100]
   11438:	2b00      	cmp	r3, #0
   1143a:	d017      	beq.n	1146c <_ZN9Krabi2015C1Eb+0x410>
   1143c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11440:	681b      	ldr	r3, [r3, #0]
   11442:	6b5b      	ldr	r3, [r3, #52]
   11444:	f507 720a 	add.w	r2, r7, #552	; 0x228
   11448:	9300      	str	r3, [sp, #0]
   1144a:	f04f 0311 	mov.w	r3, #17	; 0x11
   1144e:	9301      	str	r3, [sp, #4]
   11450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11454:	9302      	str	r3, [sp, #8]
   11456:	f04f 0300 	mov.w	r3, #0	; 0x0
   1145a:	9303      	str	r3, [sp, #12]
   1145c:	6e78      	ldr	r0, [r7, #100]
   1145e:	ca06      	ldmia	r2!, {r1, r2}
   11460:	6e3b      	ldr	r3, [r7, #96]
   11462:	f7ff fb49 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11466:	6e7b      	ldr	r3, [r7, #100]
   11468:	66bb      	str	r3, [r7, #104]
   1146a:	e001      	b.n	11470 <_ZN9Krabi2015C1Eb+0x414>
   1146c:	6e7b      	ldr	r3, [r7, #100]
   1146e:	66bb      	str	r3, [r7, #104]
   11470:	6ebb      	ldr	r3, [r7, #104]
   11472:	f8c7 3524 	str.w	r3, [r7, #1316]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11476:	f507 720c 	add.w	r2, r7, #560	; 0x230
   1147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1147e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11482:	781b      	ldrb	r3, [r3, #0]
   11484:	4610      	mov	r0, r2
   11486:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 11d2c <_ZN9Krabi2015C1Eb+0xcd0>
   1148a:	f8df 2898 	ldr.w	r2, [pc, #2200]	; 11d24 <_ZN9Krabi2015C1Eb+0xcc8>
   1148e:	f7fd fc95 	bl	edbc <_ZN8PositionC1Effb>
   11492:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11496:	66fb      	str	r3, [r7, #108]
   11498:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1149c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   114a0:	f8c7 3510 	str.w	r3, [r7, #1296]
   114a4:	f04f 0034 	mov.w	r0, #52	; 0x34
   114a8:	f7fd fb22 	bl	eaf0 <_Znwj>
   114ac:	4603      	mov	r3, r0
   114ae:	673b      	str	r3, [r7, #112]
   114b0:	6f3b      	ldr	r3, [r7, #112]
   114b2:	2b00      	cmp	r3, #0
   114b4:	d017      	beq.n	114e6 <_ZN9Krabi2015C1Eb+0x48a>
   114b6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   114ba:	681b      	ldr	r3, [r3, #0]
   114bc:	6b5b      	ldr	r3, [r3, #52]
   114be:	f507 720c 	add.w	r2, r7, #560	; 0x230
   114c2:	9300      	str	r3, [sp, #0]
   114c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   114c8:	9301      	str	r3, [sp, #4]
   114ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114ce:	9302      	str	r3, [sp, #8]
   114d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   114d4:	9303      	str	r3, [sp, #12]
   114d6:	6f38      	ldr	r0, [r7, #112]
   114d8:	ca06      	ldmia	r2!, {r1, r2}
   114da:	6efb      	ldr	r3, [r7, #108]
   114dc:	f7ff fb0c 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   114e0:	6f3b      	ldr	r3, [r7, #112]
   114e2:	677b      	str	r3, [r7, #116]
   114e4:	e001      	b.n	114ea <_ZN9Krabi2015C1Eb+0x48e>
   114e6:	6f3b      	ldr	r3, [r7, #112]
   114e8:	677b      	str	r3, [r7, #116]
   114ea:	6f7b      	ldr	r3, [r7, #116]
   114ec:	f8c7 3528 	str.w	r3, [r7, #1320]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   114f0:	f507 720e 	add.w	r2, r7, #568	; 0x238
   114f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   114f8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   114fc:	781b      	ldrb	r3, [r3, #0]
   114fe:	4610      	mov	r0, r2
   11500:	f8df 182c 	ldr.w	r1, [pc, #2092]	; 11d30 <_ZN9Krabi2015C1Eb+0xcd4>
   11504:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 11d24 <_ZN9Krabi2015C1Eb+0xcc8>
   11508:	f7fd fc58 	bl	edbc <_ZN8PositionC1Effb>
   1150c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11510:	67bb      	str	r3, [r7, #120]
   11512:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11516:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1151a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1151e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11522:	f7fd fae5 	bl	eaf0 <_Znwj>
   11526:	4603      	mov	r3, r0
   11528:	67fb      	str	r3, [r7, #124]
   1152a:	6ffb      	ldr	r3, [r7, #124]
   1152c:	2b00      	cmp	r3, #0
   1152e:	d018      	beq.n	11562 <_ZN9Krabi2015C1Eb+0x506>
   11530:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11534:	681b      	ldr	r3, [r3, #0]
   11536:	6b5b      	ldr	r3, [r3, #52]
   11538:	f507 720e 	add.w	r2, r7, #568	; 0x238
   1153c:	9300      	str	r3, [sp, #0]
   1153e:	f04f 0311 	mov.w	r3, #17	; 0x11
   11542:	9301      	str	r3, [sp, #4]
   11544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11548:	9302      	str	r3, [sp, #8]
   1154a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1154e:	9303      	str	r3, [sp, #12]
   11550:	6ff8      	ldr	r0, [r7, #124]
   11552:	ca06      	ldmia	r2!, {r1, r2}
   11554:	6fbb      	ldr	r3, [r7, #120]
   11556:	f7ff facf 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1155a:	6ffb      	ldr	r3, [r7, #124]
   1155c:	f8c7 3080 	str.w	r3, [r7, #128]
   11560:	e002      	b.n	11568 <_ZN9Krabi2015C1Eb+0x50c>
   11562:	6ffb      	ldr	r3, [r7, #124]
   11564:	f8c7 3080 	str.w	r3, [r7, #128]
   11568:	f8d7 3080 	ldr.w	r3, [r7, #128]
   1156c:	f8c7 352c 	str.w	r3, [r7, #1324]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11570:	f507 7210 	add.w	r2, r7, #576	; 0x240
   11574:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11578:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1157c:	781b      	ldrb	r3, [r3, #0]
   1157e:	4610      	mov	r0, r2
   11580:	f8df 17b0 	ldr.w	r1, [pc, #1968]	; 11d34 <_ZN9Krabi2015C1Eb+0xcd8>
   11584:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 11d24 <_ZN9Krabi2015C1Eb+0xcc8>
   11588:	f7fd fc18 	bl	edbc <_ZN8PositionC1Effb>
   1158c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11590:	f8c7 3084 	str.w	r3, [r7, #132]
   11594:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11598:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1159c:	f8c7 3510 	str.w	r3, [r7, #1296]
   115a0:	f04f 0034 	mov.w	r0, #52	; 0x34
   115a4:	f7fd faa4 	bl	eaf0 <_Znwj>
   115a8:	4603      	mov	r3, r0
   115aa:	f8c7 3088 	str.w	r3, [r7, #136]
   115ae:	f8d7 3088 	ldr.w	r3, [r7, #136]
   115b2:	2b00      	cmp	r3, #0
   115b4:	d01b      	beq.n	115ee <_ZN9Krabi2015C1Eb+0x592>
   115b6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   115ba:	681b      	ldr	r3, [r3, #0]
   115bc:	6b5b      	ldr	r3, [r3, #52]
   115be:	f507 7210 	add.w	r2, r7, #576	; 0x240
   115c2:	9300      	str	r3, [sp, #0]
   115c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   115c8:	9301      	str	r3, [sp, #4]
   115ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115ce:	9302      	str	r3, [sp, #8]
   115d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   115d4:	9303      	str	r3, [sp, #12]
   115d6:	f8d7 0088 	ldr.w	r0, [r7, #136]
   115da:	ca06      	ldmia	r2!, {r1, r2}
   115dc:	f8d7 3084 	ldr.w	r3, [r7, #132]
   115e0:	f7ff fa8a 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   115e4:	f8d7 3088 	ldr.w	r3, [r7, #136]
   115e8:	f8c7 308c 	str.w	r3, [r7, #140]
   115ec:	e003      	b.n	115f6 <_ZN9Krabi2015C1Eb+0x59a>
   115ee:	f8d7 3088 	ldr.w	r3, [r7, #136]
   115f2:	f8c7 308c 	str.w	r3, [r7, #140]
   115f6:	f8d7 308c 	ldr.w	r3, [r7, #140]
   115fa:	f8c7 3530 	str.w	r3, [r7, #1328]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   115fe:	f507 7212 	add.w	r2, r7, #584	; 0x248
   11602:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11606:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1160a:	781b      	ldrb	r3, [r3, #0]
   1160c:	4610      	mov	r0, r2
   1160e:	f8df 1704 	ldr.w	r1, [pc, #1796]	; 11d14 <_ZN9Krabi2015C1Eb+0xcb8>
   11612:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 11d38 <_ZN9Krabi2015C1Eb+0xcdc>
   11616:	f7fd fbd1 	bl	edbc <_ZN8PositionC1Effb>
   1161a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1161e:	f8c7 3090 	str.w	r3, [r7, #144]
   11622:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11626:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1162a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1162e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11632:	f7fd fa5d 	bl	eaf0 <_Znwj>
   11636:	4603      	mov	r3, r0
   11638:	f8c7 3094 	str.w	r3, [r7, #148]
   1163c:	f8d7 3094 	ldr.w	r3, [r7, #148]
   11640:	2b00      	cmp	r3, #0
   11642:	d01b      	beq.n	1167c <_ZN9Krabi2015C1Eb+0x620>
   11644:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11648:	681b      	ldr	r3, [r3, #0]
   1164a:	6b5b      	ldr	r3, [r3, #52]
   1164c:	f507 7212 	add.w	r2, r7, #584	; 0x248
   11650:	9300      	str	r3, [sp, #0]
   11652:	f04f 0312 	mov.w	r3, #18	; 0x12
   11656:	9301      	str	r3, [sp, #4]
   11658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1165c:	9302      	str	r3, [sp, #8]
   1165e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11662:	9303      	str	r3, [sp, #12]
   11664:	f8d7 0094 	ldr.w	r0, [r7, #148]
   11668:	ca06      	ldmia	r2!, {r1, r2}
   1166a:	f8d7 3090 	ldr.w	r3, [r7, #144]
   1166e:	f7ff fa43 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11672:	f8d7 3094 	ldr.w	r3, [r7, #148]
   11676:	f8c7 3098 	str.w	r3, [r7, #152]
   1167a:	e003      	b.n	11684 <_ZN9Krabi2015C1Eb+0x628>
   1167c:	f8d7 3094 	ldr.w	r3, [r7, #148]
   11680:	f8c7 3098 	str.w	r3, [r7, #152]
   11684:	f8d7 3098 	ldr.w	r3, [r7, #152]
   11688:	f8c7 3534 	str.w	r3, [r7, #1332]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   1168c:	f507 7214 	add.w	r2, r7, #592	; 0x250
   11690:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11694:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11698:	781b      	ldrb	r3, [r3, #0]
   1169a:	4610      	mov	r0, r2
   1169c:	f8df 169c 	ldr.w	r1, [pc, #1692]	; 11d3c <_ZN9Krabi2015C1Eb+0xce0>
   116a0:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 11d40 <_ZN9Krabi2015C1Eb+0xce4>
   116a4:	f7fd fb8a 	bl	edbc <_ZN8PositionC1Effb>
   116a8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   116ac:	f8c7 309c 	str.w	r3, [r7, #156]
   116b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   116b4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   116b8:	f8c7 3510 	str.w	r3, [r7, #1296]
   116bc:	f04f 0034 	mov.w	r0, #52	; 0x34
   116c0:	f7fd fa16 	bl	eaf0 <_Znwj>
   116c4:	4603      	mov	r3, r0
   116c6:	f8c7 30a0 	str.w	r3, [r7, #160]
   116ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   116ce:	2b00      	cmp	r3, #0
   116d0:	d01b      	beq.n	1170a <_ZN9Krabi2015C1Eb+0x6ae>
   116d2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   116d6:	681b      	ldr	r3, [r3, #0]
   116d8:	6b5b      	ldr	r3, [r3, #52]
   116da:	f507 7214 	add.w	r2, r7, #592	; 0x250
   116de:	9300      	str	r3, [sp, #0]
   116e0:	f04f 0312 	mov.w	r3, #18	; 0x12
   116e4:	9301      	str	r3, [sp, #4]
   116e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116ea:	9302      	str	r3, [sp, #8]
   116ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   116f0:	9303      	str	r3, [sp, #12]
   116f2:	f8d7 00a0 	ldr.w	r0, [r7, #160]
   116f6:	ca06      	ldmia	r2!, {r1, r2}
   116f8:	f8d7 309c 	ldr.w	r3, [r7, #156]
   116fc:	f7ff f9fc 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11700:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   11704:	f8c7 30a4 	str.w	r3, [r7, #164]
   11708:	e003      	b.n	11712 <_ZN9Krabi2015C1Eb+0x6b6>
   1170a:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   1170e:	f8c7 30a4 	str.w	r3, [r7, #164]
   11712:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   11716:	f8c7 3538 	str.w	r3, [r7, #1336]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   1171a:	f507 7216 	add.w	r2, r7, #600	; 0x258
   1171e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11722:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11726:	781b      	ldrb	r3, [r3, #0]
   11728:	4610      	mov	r0, r2
   1172a:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 11d44 <_ZN9Krabi2015C1Eb+0xce8>
   1172e:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 11d48 <_ZN9Krabi2015C1Eb+0xcec>
   11732:	f7fd fb43 	bl	edbc <_ZN8PositionC1Effb>
   11736:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1173a:	f8c7 30a8 	str.w	r3, [r7, #168]
   1173e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11742:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11746:	f8c7 3510 	str.w	r3, [r7, #1296]
   1174a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1174e:	f7fd f9cf 	bl	eaf0 <_Znwj>
   11752:	4603      	mov	r3, r0
   11754:	f8c7 30ac 	str.w	r3, [r7, #172]
   11758:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   1175c:	2b00      	cmp	r3, #0
   1175e:	d01b      	beq.n	11798 <_ZN9Krabi2015C1Eb+0x73c>
   11760:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11764:	681b      	ldr	r3, [r3, #0]
   11766:	6b5b      	ldr	r3, [r3, #52]
   11768:	f507 7216 	add.w	r2, r7, #600	; 0x258
   1176c:	9300      	str	r3, [sp, #0]
   1176e:	f04f 0312 	mov.w	r3, #18	; 0x12
   11772:	9301      	str	r3, [sp, #4]
   11774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11778:	9302      	str	r3, [sp, #8]
   1177a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1177e:	9303      	str	r3, [sp, #12]
   11780:	f8d7 00ac 	ldr.w	r0, [r7, #172]
   11784:	ca06      	ldmia	r2!, {r1, r2}
   11786:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1178a:	f7ff f9b5 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1178e:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   11792:	f8c7 30b0 	str.w	r3, [r7, #176]
   11796:	e003      	b.n	117a0 <_ZN9Krabi2015C1Eb+0x744>
   11798:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   1179c:	f8c7 30b0 	str.w	r3, [r7, #176]
   117a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   117a4:	f8c7 353c 	str.w	r3, [r7, #1340]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   117a8:	f507 7218 	add.w	r2, r7, #608	; 0x260
   117ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
   117b0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   117b4:	781b      	ldrb	r3, [r3, #0]
   117b6:	4610      	mov	r0, r2
   117b8:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 11d4c <_ZN9Krabi2015C1Eb+0xcf0>
   117bc:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 11d40 <_ZN9Krabi2015C1Eb+0xce4>
   117c0:	f7fd fafc 	bl	edbc <_ZN8PositionC1Effb>
   117c4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   117c8:	f8c7 30b4 	str.w	r3, [r7, #180]
   117cc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   117d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   117d4:	f8c7 3510 	str.w	r3, [r7, #1296]
   117d8:	f04f 0034 	mov.w	r0, #52	; 0x34
   117dc:	f7fd f988 	bl	eaf0 <_Znwj>
   117e0:	4603      	mov	r3, r0
   117e2:	f8c7 30b8 	str.w	r3, [r7, #184]
   117e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   117ea:	2b00      	cmp	r3, #0
   117ec:	d01b      	beq.n	11826 <_ZN9Krabi2015C1Eb+0x7ca>
   117ee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	6b5b      	ldr	r3, [r3, #52]
   117f6:	f507 7218 	add.w	r2, r7, #608	; 0x260
   117fa:	9300      	str	r3, [sp, #0]
   117fc:	f04f 0312 	mov.w	r3, #18	; 0x12
   11800:	9301      	str	r3, [sp, #4]
   11802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11806:	9302      	str	r3, [sp, #8]
   11808:	f04f 0300 	mov.w	r3, #0	; 0x0
   1180c:	9303      	str	r3, [sp, #12]
   1180e:	f8d7 00b8 	ldr.w	r0, [r7, #184]
   11812:	ca06      	ldmia	r2!, {r1, r2}
   11814:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   11818:	f7ff f96e 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1181c:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   11820:	f8c7 30bc 	str.w	r3, [r7, #188]
   11824:	e003      	b.n	1182e <_ZN9Krabi2015C1Eb+0x7d2>
   11826:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   1182a:	f8c7 30bc 	str.w	r3, [r7, #188]
   1182e:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   11832:	f8c7 3540 	str.w	r3, [r7, #1344]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   11836:	f507 721a 	add.w	r2, r7, #616	; 0x268
   1183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1183e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11842:	781b      	ldrb	r3, [r3, #0]
   11844:	4610      	mov	r0, r2
   11846:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 11d50 <_ZN9Krabi2015C1Eb+0xcf4>
   1184a:	f8df 24ec 	ldr.w	r2, [pc, #1260]	; 11d38 <_ZN9Krabi2015C1Eb+0xcdc>
   1184e:	f7fd fab5 	bl	edbc <_ZN8PositionC1Effb>
   11852:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11856:	f8c7 30c0 	str.w	r3, [r7, #192]
   1185a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1185e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11862:	f8c7 3510 	str.w	r3, [r7, #1296]
   11866:	f04f 0034 	mov.w	r0, #52	; 0x34
   1186a:	f7fd f941 	bl	eaf0 <_Znwj>
   1186e:	4603      	mov	r3, r0
   11870:	f8c7 30c4 	str.w	r3, [r7, #196]
   11874:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   11878:	2b00      	cmp	r3, #0
   1187a:	d01b      	beq.n	118b4 <_ZN9Krabi2015C1Eb+0x858>
   1187c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11880:	681b      	ldr	r3, [r3, #0]
   11882:	6b5b      	ldr	r3, [r3, #52]
   11884:	f507 721a 	add.w	r2, r7, #616	; 0x268
   11888:	9300      	str	r3, [sp, #0]
   1188a:	f04f 0312 	mov.w	r3, #18	; 0x12
   1188e:	9301      	str	r3, [sp, #4]
   11890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11894:	9302      	str	r3, [sp, #8]
   11896:	f04f 0300 	mov.w	r3, #0	; 0x0
   1189a:	9303      	str	r3, [sp, #12]
   1189c:	f8d7 00c4 	ldr.w	r0, [r7, #196]
   118a0:	ca06      	ldmia	r2!, {r1, r2}
   118a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   118a6:	f7ff f927 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   118aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   118ae:	f8c7 30c8 	str.w	r3, [r7, #200]
   118b2:	e003      	b.n	118bc <_ZN9Krabi2015C1Eb+0x860>
   118b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   118b8:	f8c7 30c8 	str.w	r3, [r7, #200]
   118bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   118c0:	f8c7 3544 	str.w	r3, [r7, #1348]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   118c4:	f507 721c 	add.w	r2, r7, #624	; 0x270
   118c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   118cc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   118d0:	781b      	ldrb	r3, [r3, #0]
   118d2:	4610      	mov	r0, r2
   118d4:	f8df 147c 	ldr.w	r1, [pc, #1148]	; 11d54 <_ZN9Krabi2015C1Eb+0xcf8>
   118d8:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 11d38 <_ZN9Krabi2015C1Eb+0xcdc>
   118dc:	f7fd fa6e 	bl	edbc <_ZN8PositionC1Effb>
   118e0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   118e4:	f8c7 30cc 	str.w	r3, [r7, #204]
   118e8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   118ec:	f103 0301 	add.w	r3, r3, #1	; 0x1
   118f0:	f8c7 3510 	str.w	r3, [r7, #1296]
   118f4:	f04f 0034 	mov.w	r0, #52	; 0x34
   118f8:	f7fd f8fa 	bl	eaf0 <_Znwj>
   118fc:	4603      	mov	r3, r0
   118fe:	f8c7 30d0 	str.w	r3, [r7, #208]
   11902:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   11906:	2b00      	cmp	r3, #0
   11908:	d01b      	beq.n	11942 <_ZN9Krabi2015C1Eb+0x8e6>
   1190a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1190e:	681b      	ldr	r3, [r3, #0]
   11910:	6b5b      	ldr	r3, [r3, #52]
   11912:	f507 721c 	add.w	r2, r7, #624	; 0x270
   11916:	9300      	str	r3, [sp, #0]
   11918:	f04f 0313 	mov.w	r3, #19	; 0x13
   1191c:	9301      	str	r3, [sp, #4]
   1191e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11922:	9302      	str	r3, [sp, #8]
   11924:	f04f 0300 	mov.w	r3, #0	; 0x0
   11928:	9303      	str	r3, [sp, #12]
   1192a:	f8d7 00d0 	ldr.w	r0, [r7, #208]
   1192e:	ca06      	ldmia	r2!, {r1, r2}
   11930:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   11934:	f7ff f8e0 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11938:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   1193c:	f8c7 30d4 	str.w	r3, [r7, #212]
   11940:	e003      	b.n	1194a <_ZN9Krabi2015C1Eb+0x8ee>
   11942:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   11946:	f8c7 30d4 	str.w	r3, [r7, #212]
   1194a:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   1194e:	f8c7 3548 	str.w	r3, [r7, #1352]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11952:	f507 721e 	add.w	r2, r7, #632	; 0x278
   11956:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1195a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1195e:	781b      	ldrb	r3, [r3, #0]
   11960:	4610      	mov	r0, r2
   11962:	49fc      	ldr	r1, [pc, #1008]	(11d54 <_ZN9Krabi2015C1Eb+0xcf8>)
   11964:	4afc      	ldr	r2, [pc, #1008]	(11d58 <_ZN9Krabi2015C1Eb+0xcfc>)
   11966:	f7fd fa29 	bl	edbc <_ZN8PositionC1Effb>
   1196a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1196e:	f8c7 30d8 	str.w	r3, [r7, #216]
   11972:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11976:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1197a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1197e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11982:	f7fd f8b5 	bl	eaf0 <_Znwj>
   11986:	4603      	mov	r3, r0
   11988:	f8c7 30dc 	str.w	r3, [r7, #220]
   1198c:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11990:	2b00      	cmp	r3, #0
   11992:	d01b      	beq.n	119cc <_ZN9Krabi2015C1Eb+0x970>
   11994:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11998:	681b      	ldr	r3, [r3, #0]
   1199a:	6b5b      	ldr	r3, [r3, #52]
   1199c:	f507 721e 	add.w	r2, r7, #632	; 0x278
   119a0:	9300      	str	r3, [sp, #0]
   119a2:	f04f 0313 	mov.w	r3, #19	; 0x13
   119a6:	9301      	str	r3, [sp, #4]
   119a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119ac:	9302      	str	r3, [sp, #8]
   119ae:	f04f 0300 	mov.w	r3, #0	; 0x0
   119b2:	9303      	str	r3, [sp, #12]
   119b4:	f8d7 00dc 	ldr.w	r0, [r7, #220]
   119b8:	ca06      	ldmia	r2!, {r1, r2}
   119ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   119be:	f7ff f89b 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   119c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   119c6:	f8c7 30e0 	str.w	r3, [r7, #224]
   119ca:	e003      	b.n	119d4 <_ZN9Krabi2015C1Eb+0x978>
   119cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   119d0:	f8c7 30e0 	str.w	r3, [r7, #224]
   119d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   119d8:	f8c7 354c 	str.w	r3, [r7, #1356]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   119dc:	f507 7220 	add.w	r2, r7, #640	; 0x280
   119e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   119e4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   119e8:	781b      	ldrb	r3, [r3, #0]
   119ea:	4610      	mov	r0, r2
   119ec:	49d9      	ldr	r1, [pc, #868]	(11d54 <_ZN9Krabi2015C1Eb+0xcf8>)
   119ee:	4adb      	ldr	r2, [pc, #876]	(11d5c <_ZN9Krabi2015C1Eb+0xd00>)
   119f0:	f7fd f9e4 	bl	edbc <_ZN8PositionC1Effb>
   119f4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   119f8:	f8c7 30e4 	str.w	r3, [r7, #228]
   119fc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a00:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11a04:	f8c7 3510 	str.w	r3, [r7, #1296]
   11a08:	f04f 0034 	mov.w	r0, #52	; 0x34
   11a0c:	f7fd f870 	bl	eaf0 <_Znwj>
   11a10:	4603      	mov	r3, r0
   11a12:	f8c7 30e8 	str.w	r3, [r7, #232]
   11a16:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	d01b      	beq.n	11a56 <_ZN9Krabi2015C1Eb+0x9fa>
   11a1e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11a22:	681b      	ldr	r3, [r3, #0]
   11a24:	6b5b      	ldr	r3, [r3, #52]
   11a26:	f507 7220 	add.w	r2, r7, #640	; 0x280
   11a2a:	9300      	str	r3, [sp, #0]
   11a2c:	f04f 0313 	mov.w	r3, #19	; 0x13
   11a30:	9301      	str	r3, [sp, #4]
   11a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a36:	9302      	str	r3, [sp, #8]
   11a38:	f04f 0300 	mov.w	r3, #0	; 0x0
   11a3c:	9303      	str	r3, [sp, #12]
   11a3e:	f8d7 00e8 	ldr.w	r0, [r7, #232]
   11a42:	ca06      	ldmia	r2!, {r1, r2}
   11a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11a48:	f7ff f856 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11a4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11a50:	f8c7 30ec 	str.w	r3, [r7, #236]
   11a54:	e003      	b.n	11a5e <_ZN9Krabi2015C1Eb+0xa02>
   11a56:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   11a5a:	f8c7 30ec 	str.w	r3, [r7, #236]
   11a5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   11a62:	f8c7 3550 	str.w	r3, [r7, #1360]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11a66:	f507 7222 	add.w	r2, r7, #648	; 0x288
   11a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11a6e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11a72:	781b      	ldrb	r3, [r3, #0]
   11a74:	4610      	mov	r0, r2
   11a76:	49ba      	ldr	r1, [pc, #744]	(11d60 <_ZN9Krabi2015C1Eb+0xd04>)
   11a78:	4aba      	ldr	r2, [pc, #744]	(11d64 <_ZN9Krabi2015C1Eb+0xd08>)
   11a7a:	f7fd f99f 	bl	edbc <_ZN8PositionC1Effb>
   11a7e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a82:	f8c7 30f0 	str.w	r3, [r7, #240]
   11a86:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11a8a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11a8e:	f8c7 3510 	str.w	r3, [r7, #1296]
   11a92:	f04f 0034 	mov.w	r0, #52	; 0x34
   11a96:	f7fd f82b 	bl	eaf0 <_Znwj>
   11a9a:	4603      	mov	r3, r0
   11a9c:	f8c7 30f4 	str.w	r3, [r7, #244]
   11aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   11aa4:	2b00      	cmp	r3, #0
   11aa6:	d01b      	beq.n	11ae0 <_ZN9Krabi2015C1Eb+0xa84>
   11aa8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11aac:	681b      	ldr	r3, [r3, #0]
   11aae:	6b5b      	ldr	r3, [r3, #52]
   11ab0:	f507 7222 	add.w	r2, r7, #648	; 0x288
   11ab4:	9300      	str	r3, [sp, #0]
   11ab6:	f04f 0313 	mov.w	r3, #19	; 0x13
   11aba:	9301      	str	r3, [sp, #4]
   11abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ac0:	9302      	str	r3, [sp, #8]
   11ac2:	f04f 0300 	mov.w	r3, #0	; 0x0
   11ac6:	9303      	str	r3, [sp, #12]
   11ac8:	f8d7 00f4 	ldr.w	r0, [r7, #244]
   11acc:	ca06      	ldmia	r2!, {r1, r2}
   11ace:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   11ad2:	f7ff f811 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   11ada:	f8c7 30f8 	str.w	r3, [r7, #248]
   11ade:	e003      	b.n	11ae8 <_ZN9Krabi2015C1Eb+0xa8c>
   11ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   11ae4:	f8c7 30f8 	str.w	r3, [r7, #248]
   11ae8:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   11aec:	f8c7 3554 	str.w	r3, [r7, #1364]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11af0:	f507 7224 	add.w	r2, r7, #656	; 0x290
   11af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11af8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11afc:	781b      	ldrb	r3, [r3, #0]
   11afe:	4610      	mov	r0, r2
   11b00:	4997      	ldr	r1, [pc, #604]	(11d60 <_ZN9Krabi2015C1Eb+0xd04>)
   11b02:	4a96      	ldr	r2, [pc, #600]	(11d5c <_ZN9Krabi2015C1Eb+0xd00>)
   11b04:	f7fd f95a 	bl	edbc <_ZN8PositionC1Effb>
   11b08:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b0c:	f8c7 30fc 	str.w	r3, [r7, #252]
   11b10:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b14:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11b18:	f8c7 3510 	str.w	r3, [r7, #1296]
   11b1c:	f04f 0034 	mov.w	r0, #52	; 0x34
   11b20:	f7fc ffe6 	bl	eaf0 <_Znwj>
   11b24:	4603      	mov	r3, r0
   11b26:	f8c7 3100 	str.w	r3, [r7, #256]
   11b2a:	f8d7 3100 	ldr.w	r3, [r7, #256]
   11b2e:	2b00      	cmp	r3, #0
   11b30:	d01b      	beq.n	11b6a <_ZN9Krabi2015C1Eb+0xb0e>
   11b32:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11b36:	681b      	ldr	r3, [r3, #0]
   11b38:	6b5b      	ldr	r3, [r3, #52]
   11b3a:	f507 7224 	add.w	r2, r7, #656	; 0x290
   11b3e:	9300      	str	r3, [sp, #0]
   11b40:	f04f 0313 	mov.w	r3, #19	; 0x13
   11b44:	9301      	str	r3, [sp, #4]
   11b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b4a:	9302      	str	r3, [sp, #8]
   11b4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11b50:	9303      	str	r3, [sp, #12]
   11b52:	f8d7 0100 	ldr.w	r0, [r7, #256]
   11b56:	ca06      	ldmia	r2!, {r1, r2}
   11b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   11b5c:	f7fe ffcc 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11b60:	f8d7 3100 	ldr.w	r3, [r7, #256]
   11b64:	f8c7 3104 	str.w	r3, [r7, #260]
   11b68:	e003      	b.n	11b72 <_ZN9Krabi2015C1Eb+0xb16>
   11b6a:	f8d7 3100 	ldr.w	r3, [r7, #256]
   11b6e:	f8c7 3104 	str.w	r3, [r7, #260]
   11b72:	f8d7 3104 	ldr.w	r3, [r7, #260]
   11b76:	f8c7 3558 	str.w	r3, [r7, #1368]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11b7a:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11b82:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11b86:	781b      	ldrb	r3, [r3, #0]
   11b88:	4610      	mov	r0, r2
   11b8a:	4977      	ldr	r1, [pc, #476]	(11d68 <_ZN9Krabi2015C1Eb+0xd0c>)
   11b8c:	4a77      	ldr	r2, [pc, #476]	(11d6c <_ZN9Krabi2015C1Eb+0xd10>)
   11b8e:	f7fd f915 	bl	edbc <_ZN8PositionC1Effb>
   11b92:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b96:	f8c7 3108 	str.w	r3, [r7, #264]
   11b9a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11b9e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11ba2:	f8c7 3510 	str.w	r3, [r7, #1296]
   11ba6:	f04f 0034 	mov.w	r0, #52	; 0x34
   11baa:	f7fc ffa1 	bl	eaf0 <_Znwj>
   11bae:	4603      	mov	r3, r0
   11bb0:	f8c7 310c 	str.w	r3, [r7, #268]
   11bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]
   11bb8:	2b00      	cmp	r3, #0
   11bba:	d01b      	beq.n	11bf4 <_ZN9Krabi2015C1Eb+0xb98>
   11bbc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11bc0:	681b      	ldr	r3, [r3, #0]
   11bc2:	6b5b      	ldr	r3, [r3, #52]
   11bc4:	f507 7226 	add.w	r2, r7, #664	; 0x298
   11bc8:	9300      	str	r3, [sp, #0]
   11bca:	f04f 0313 	mov.w	r3, #19	; 0x13
   11bce:	9301      	str	r3, [sp, #4]
   11bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11bd4:	9302      	str	r3, [sp, #8]
   11bd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   11bda:	9303      	str	r3, [sp, #12]
   11bdc:	f8d7 010c 	ldr.w	r0, [r7, #268]
   11be0:	ca06      	ldmia	r2!, {r1, r2}
   11be2:	f8d7 3108 	ldr.w	r3, [r7, #264]
   11be6:	f7fe ff87 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11bea:	f8d7 310c 	ldr.w	r3, [r7, #268]
   11bee:	f8c7 3110 	str.w	r3, [r7, #272]
   11bf2:	e003      	b.n	11bfc <_ZN9Krabi2015C1Eb+0xba0>
   11bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]
   11bf8:	f8c7 3110 	str.w	r3, [r7, #272]
   11bfc:	f8d7 3110 	ldr.w	r3, [r7, #272]
   11c00:	f8c7 355c 	str.w	r3, [r7, #1372]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11c04:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   11c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11c0c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11c10:	781b      	ldrb	r3, [r3, #0]
   11c12:	4610      	mov	r0, r2
   11c14:	4956      	ldr	r1, [pc, #344]	(11d70 <_ZN9Krabi2015C1Eb+0xd14>)
   11c16:	4a57      	ldr	r2, [pc, #348]	(11d74 <_ZN9Krabi2015C1Eb+0xd18>)
   11c18:	f7fd f8d0 	bl	edbc <_ZN8PositionC1Effb>
   11c1c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11c20:	f8c7 3114 	str.w	r3, [r7, #276]
   11c24:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11c28:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11c2c:	f8c7 3510 	str.w	r3, [r7, #1296]
   11c30:	f04f 0034 	mov.w	r0, #52	; 0x34
   11c34:	f7fc ff5c 	bl	eaf0 <_Znwj>
   11c38:	4603      	mov	r3, r0
   11c3a:	f8c7 3118 	str.w	r3, [r7, #280]
   11c3e:	f8d7 3118 	ldr.w	r3, [r7, #280]
   11c42:	2b00      	cmp	r3, #0
   11c44:	d01b      	beq.n	11c7e <_ZN9Krabi2015C1Eb+0xc22>
   11c46:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11c4a:	681b      	ldr	r3, [r3, #0]
   11c4c:	6b5b      	ldr	r3, [r3, #52]
   11c4e:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   11c52:	9300      	str	r3, [sp, #0]
   11c54:	f04f 0313 	mov.w	r3, #19	; 0x13
   11c58:	9301      	str	r3, [sp, #4]
   11c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c5e:	9302      	str	r3, [sp, #8]
   11c60:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c64:	9303      	str	r3, [sp, #12]
   11c66:	f8d7 0118 	ldr.w	r0, [r7, #280]
   11c6a:	ca06      	ldmia	r2!, {r1, r2}
   11c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]
   11c70:	f7fe ff42 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11c74:	f8d7 3118 	ldr.w	r3, [r7, #280]
   11c78:	f8c7 311c 	str.w	r3, [r7, #284]
   11c7c:	e003      	b.n	11c86 <_ZN9Krabi2015C1Eb+0xc2a>
   11c7e:	f8d7 3118 	ldr.w	r3, [r7, #280]
   11c82:	f8c7 311c 	str.w	r3, [r7, #284]
   11c86:	f8d7 311c 	ldr.w	r3, [r7, #284]
   11c8a:	f8c7 3560 	str.w	r3, [r7, #1376]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11c8e:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   11c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11c96:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11c9a:	781b      	ldrb	r3, [r3, #0]
   11c9c:	4610      	mov	r0, r2
   11c9e:	4936      	ldr	r1, [pc, #216]	(11d78 <_ZN9Krabi2015C1Eb+0xd1c>)
   11ca0:	4a36      	ldr	r2, [pc, #216]	(11d7c <_ZN9Krabi2015C1Eb+0xd20>)
   11ca2:	f7fd f88b 	bl	edbc <_ZN8PositionC1Effb>
   11ca6:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11caa:	f8c7 3120 	str.w	r3, [r7, #288]
   11cae:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11cb2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11cb6:	f8c7 3510 	str.w	r3, [r7, #1296]
   11cba:	f04f 0034 	mov.w	r0, #52	; 0x34
   11cbe:	f7fc ff17 	bl	eaf0 <_Znwj>
   11cc2:	4603      	mov	r3, r0
   11cc4:	f8c7 3124 	str.w	r3, [r7, #292]
   11cc8:	f8d7 3124 	ldr.w	r3, [r7, #292]
   11ccc:	2b00      	cmp	r3, #0
   11cce:	d057      	beq.n	11d80 <_ZN9Krabi2015C1Eb+0xd24>
   11cd0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11cd4:	681b      	ldr	r3, [r3, #0]
   11cd6:	6b5b      	ldr	r3, [r3, #52]
   11cd8:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   11cdc:	9300      	str	r3, [sp, #0]
   11cde:	f04f 0313 	mov.w	r3, #19	; 0x13
   11ce2:	9301      	str	r3, [sp, #4]
   11ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ce8:	9302      	str	r3, [sp, #8]
   11cea:	f04f 0300 	mov.w	r3, #0	; 0x0
   11cee:	9303      	str	r3, [sp, #12]
   11cf0:	f8d7 0124 	ldr.w	r0, [r7, #292]
   11cf4:	ca06      	ldmia	r2!, {r1, r2}
   11cf6:	f8d7 3120 	ldr.w	r3, [r7, #288]
   11cfa:	f7fe fefd 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11cfe:	f8d7 3124 	ldr.w	r3, [r7, #292]
   11d02:	f8c7 3128 	str.w	r3, [r7, #296]
   11d06:	e03f      	b.n	11d88 <_ZN9Krabi2015C1Eb+0xd2c>
   11d08:	00022418 	.word	0x00022418
   11d0c:	00000000 	.word	0x00000000
   11d10:	41f00000 	.word	0x41f00000
   11d14:	437a0000 	.word	0x437a0000
   11d18:	447a0000 	.word	0x447a0000
   11d1c:	442f0000 	.word	0x442f0000
   11d20:	44510000 	.word	0x44510000
   11d24:	44de8000 	.word	0x44de8000
   11d28:	436c0000 	.word	0x436c0000
   11d2c:	43c80000 	.word	0x43c80000
   11d30:	451c4000 	.word	0x451c4000
   11d34:	450fc000 	.word	0x450fc000
   11d38:	44dac000 	.word	0x44dac000
   11d3c:	44638000 	.word	0x44638000
   11d40:	444f8000 	.word	0x444f8000
   11d44:	44bb8000 	.word	0x44bb8000
   11d48:	44ce4000 	.word	0x44ce4000
   11d4c:	4502a000 	.word	0x4502a000
   11d50:	452be000 	.word	0x452be000
   11d54:	42b40000 	.word	0x42b40000
   11d58:	44e74000 	.word	0x44e74000
   11d5c:	43480000 	.word	0x43480000
   11d60:	44548000 	.word	0x44548000
   11d64:	42c80000 	.word	0x42c80000
   11d68:	44598000 	.word	0x44598000
   11d6c:	44a96000 	.word	0x44a96000
   11d70:	44898000 	.word	0x44898000
   11d74:	44dd4000 	.word	0x44dd4000
   11d78:	44a28000 	.word	0x44a28000
   11d7c:	44af0000 	.word	0x44af0000
   11d80:	f8d7 3124 	ldr.w	r3, [r7, #292]
   11d84:	f8c7 3128 	str.w	r3, [r7, #296]
   11d88:	f8d7 3128 	ldr.w	r3, [r7, #296]
   11d8c:	f8c7 3564 	str.w	r3, [r7, #1380]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   11d90:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   11d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11d98:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11d9c:	781b      	ldrb	r3, [r3, #0]
   11d9e:	4610      	mov	r0, r2
   11da0:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 126f0 <_ZN9Krabi2015C1Eb+0x1694>
   11da4:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 126f4 <_ZN9Krabi2015C1Eb+0x1698>
   11da8:	f7fd f808 	bl	edbc <_ZN8PositionC1Effb>
   11dac:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11db0:	f8c7 312c 	str.w	r3, [r7, #300]
   11db4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11db8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11dbc:	f8c7 3510 	str.w	r3, [r7, #1296]
   11dc0:	f04f 0034 	mov.w	r0, #52	; 0x34
   11dc4:	f7fc fe94 	bl	eaf0 <_Znwj>
   11dc8:	4603      	mov	r3, r0
   11dca:	f8c7 3130 	str.w	r3, [r7, #304]
   11dce:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	d01b      	beq.n	11e0e <_ZN9Krabi2015C1Eb+0xdb2>
   11dd6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11dda:	681b      	ldr	r3, [r3, #0]
   11ddc:	6b5b      	ldr	r3, [r3, #52]
   11dde:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   11de2:	9300      	str	r3, [sp, #0]
   11de4:	f04f 0314 	mov.w	r3, #20	; 0x14
   11de8:	9301      	str	r3, [sp, #4]
   11dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11dee:	9302      	str	r3, [sp, #8]
   11df0:	f04f 0300 	mov.w	r3, #0	; 0x0
   11df4:	9303      	str	r3, [sp, #12]
   11df6:	f8d7 0130 	ldr.w	r0, [r7, #304]
   11dfa:	ca06      	ldmia	r2!, {r1, r2}
   11dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]
   11e00:	f7fe fe7a 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11e04:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11e08:	f8c7 3134 	str.w	r3, [r7, #308]
   11e0c:	e003      	b.n	11e16 <_ZN9Krabi2015C1Eb+0xdba>
   11e0e:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11e12:	f8c7 3134 	str.w	r3, [r7, #308]
   11e16:	f8d7 3134 	ldr.w	r3, [r7, #308]
   11e1a:	f8c7 3568 	str.w	r3, [r7, #1384]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   11e1e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   11e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11e26:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11e2a:	781b      	ldrb	r3, [r3, #0]
   11e2c:	4610      	mov	r0, r2
   11e2e:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 126f8 <_ZN9Krabi2015C1Eb+0x169c>
   11e32:	f8df 28c0 	ldr.w	r2, [pc, #2240]	; 126f4 <_ZN9Krabi2015C1Eb+0x1698>
   11e36:	f7fc ffc1 	bl	edbc <_ZN8PositionC1Effb>
   11e3a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11e3e:	f8c7 3138 	str.w	r3, [r7, #312]
   11e42:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11e46:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11e4a:	f8c7 3510 	str.w	r3, [r7, #1296]
   11e4e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11e52:	f7fc fe4d 	bl	eaf0 <_Znwj>
   11e56:	4603      	mov	r3, r0
   11e58:	f8c7 313c 	str.w	r3, [r7, #316]
   11e5c:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11e60:	2b00      	cmp	r3, #0
   11e62:	d01b      	beq.n	11e9c <_ZN9Krabi2015C1Eb+0xe40>
   11e64:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11e68:	681b      	ldr	r3, [r3, #0]
   11e6a:	6b5b      	ldr	r3, [r3, #52]
   11e6c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   11e70:	9300      	str	r3, [sp, #0]
   11e72:	f04f 0314 	mov.w	r3, #20	; 0x14
   11e76:	9301      	str	r3, [sp, #4]
   11e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e7c:	9302      	str	r3, [sp, #8]
   11e7e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e82:	9303      	str	r3, [sp, #12]
   11e84:	f8d7 013c 	ldr.w	r0, [r7, #316]
   11e88:	ca06      	ldmia	r2!, {r1, r2}
   11e8a:	f8d7 3138 	ldr.w	r3, [r7, #312]
   11e8e:	f7fe fe33 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11e92:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11e96:	f8c7 3140 	str.w	r3, [r7, #320]
   11e9a:	e003      	b.n	11ea4 <_ZN9Krabi2015C1Eb+0xe48>
   11e9c:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11ea0:	f8c7 3140 	str.w	r3, [r7, #320]
   11ea4:	f8d7 3140 	ldr.w	r3, [r7, #320]
   11ea8:	f8c7 356c 	str.w	r3, [r7, #1388]
    Etape* etape23 = new Etape(Position(1230, 760, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   11eac:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   11eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11eb4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11eb8:	781b      	ldrb	r3, [r3, #0]
   11eba:	4610      	mov	r0, r2
   11ebc:	f8df 183c 	ldr.w	r1, [pc, #2108]	; 126fc <_ZN9Krabi2015C1Eb+0x16a0>
   11ec0:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 12700 <_ZN9Krabi2015C1Eb+0x16a4>
   11ec4:	f7fc ff7a 	bl	edbc <_ZN8PositionC1Effb>
   11ec8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ecc:	f8c7 3144 	str.w	r3, [r7, #324]
   11ed0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ed4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11ed8:	f8c7 3510 	str.w	r3, [r7, #1296]
   11edc:	f04f 0034 	mov.w	r0, #52	; 0x34
   11ee0:	f7fc fe06 	bl	eaf0 <_Znwj>
   11ee4:	4603      	mov	r3, r0
   11ee6:	f8c7 3148 	str.w	r3, [r7, #328]
   11eea:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11eee:	2b00      	cmp	r3, #0
   11ef0:	d01b      	beq.n	11f2a <_ZN9Krabi2015C1Eb+0xece>
   11ef2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11ef6:	681b      	ldr	r3, [r3, #0]
   11ef8:	6b5b      	ldr	r3, [r3, #52]
   11efa:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   11efe:	9300      	str	r3, [sp, #0]
   11f00:	f04f 0315 	mov.w	r3, #21	; 0x15
   11f04:	9301      	str	r3, [sp, #4]
   11f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f0a:	9302      	str	r3, [sp, #8]
   11f0c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f10:	9303      	str	r3, [sp, #12]
   11f12:	f8d7 0148 	ldr.w	r0, [r7, #328]
   11f16:	ca06      	ldmia	r2!, {r1, r2}
   11f18:	f8d7 3144 	ldr.w	r3, [r7, #324]
   11f1c:	f7fe fdec 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11f20:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11f24:	f8c7 314c 	str.w	r3, [r7, #332]
   11f28:	e003      	b.n	11f32 <_ZN9Krabi2015C1Eb+0xed6>
   11f2a:	f8d7 3148 	ldr.w	r3, [r7, #328]
   11f2e:	f8c7 314c 	str.w	r3, [r7, #332]
   11f32:	f8d7 314c 	ldr.w	r3, [r7, #332]
   11f36:	f8c7 3570 	str.w	r3, [r7, #1392]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11f3a:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   11f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11f42:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11f46:	781b      	ldrb	r3, [r3, #0]
   11f48:	4610      	mov	r0, r2
   11f4a:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 12704 <_ZN9Krabi2015C1Eb+0x16a8>
   11f4e:	f8df 27b8 	ldr.w	r2, [pc, #1976]	; 12708 <_ZN9Krabi2015C1Eb+0x16ac>
   11f52:	f7fc ff33 	bl	edbc <_ZN8PositionC1Effb>
   11f56:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11f5a:	f8c7 3150 	str.w	r3, [r7, #336]
   11f5e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11f62:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f66:	f8c7 3510 	str.w	r3, [r7, #1296]
   11f6a:	f04f 0034 	mov.w	r0, #52	; 0x34
   11f6e:	f7fc fdbf 	bl	eaf0 <_Znwj>
   11f72:	4603      	mov	r3, r0
   11f74:	f8c7 3154 	str.w	r3, [r7, #340]
   11f78:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d01b      	beq.n	11fb8 <_ZN9Krabi2015C1Eb+0xf5c>
   11f80:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11f84:	681b      	ldr	r3, [r3, #0]
   11f86:	6b5b      	ldr	r3, [r3, #52]
   11f88:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   11f8c:	9300      	str	r3, [sp, #0]
   11f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f92:	9301      	str	r3, [sp, #4]
   11f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f98:	9302      	str	r3, [sp, #8]
   11f9a:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f9e:	9303      	str	r3, [sp, #12]
   11fa0:	f8d7 0154 	ldr.w	r0, [r7, #340]
   11fa4:	ca06      	ldmia	r2!, {r1, r2}
   11fa6:	f8d7 3150 	ldr.w	r3, [r7, #336]
   11faa:	f7fe fda5 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11fae:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11fb2:	f8c7 3158 	str.w	r3, [r7, #344]
   11fb6:	e003      	b.n	11fc0 <_ZN9Krabi2015C1Eb+0xf64>
   11fb8:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11fbc:	f8c7 3158 	str.w	r3, [r7, #344]
   11fc0:	f8d7 3158 	ldr.w	r3, [r7, #344]
   11fc4:	f8c7 3574 	str.w	r3, [r7, #1396]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11fc8:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   11fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
   11fd0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   11fd4:	781b      	ldrb	r3, [r3, #0]
   11fd6:	4610      	mov	r0, r2
   11fd8:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 1270c <_ZN9Krabi2015C1Eb+0x16b0>
   11fdc:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 12708 <_ZN9Krabi2015C1Eb+0x16ac>
   11fe0:	f7fc feec 	bl	edbc <_ZN8PositionC1Effb>
   11fe4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11fe8:	f8c7 315c 	str.w	r3, [r7, #348]
   11fec:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   11ff0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11ff4:	f8c7 3510 	str.w	r3, [r7, #1296]
   11ff8:	f04f 0034 	mov.w	r0, #52	; 0x34
   11ffc:	f7fc fd78 	bl	eaf0 <_Znwj>
   12000:	4603      	mov	r3, r0
   12002:	f8c7 3160 	str.w	r3, [r7, #352]
   12006:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1200a:	2b00      	cmp	r3, #0
   1200c:	d01b      	beq.n	12046 <_ZN9Krabi2015C1Eb+0xfea>
   1200e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12012:	681b      	ldr	r3, [r3, #0]
   12014:	6b5b      	ldr	r3, [r3, #52]
   12016:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   1201a:	9300      	str	r3, [sp, #0]
   1201c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12020:	9301      	str	r3, [sp, #4]
   12022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12026:	9302      	str	r3, [sp, #8]
   12028:	f04f 0300 	mov.w	r3, #0	; 0x0
   1202c:	9303      	str	r3, [sp, #12]
   1202e:	f8d7 0160 	ldr.w	r0, [r7, #352]
   12032:	ca06      	ldmia	r2!, {r1, r2}
   12034:	f8d7 315c 	ldr.w	r3, [r7, #348]
   12038:	f7fe fd5e 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1203c:	f8d7 3160 	ldr.w	r3, [r7, #352]
   12040:	f8c7 3164 	str.w	r3, [r7, #356]
   12044:	e003      	b.n	1204e <_ZN9Krabi2015C1Eb+0xff2>
   12046:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1204a:	f8c7 3164 	str.w	r3, [r7, #356]
   1204e:	f8d7 3164 	ldr.w	r3, [r7, #356]
   12052:	f8c7 3578 	str.w	r3, [r7, #1400]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12056:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   1205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1205e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12062:	781b      	ldrb	r3, [r3, #0]
   12064:	4610      	mov	r0, r2
   12066:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 12710 <_ZN9Krabi2015C1Eb+0x16b4>
   1206a:	f8df 26a8 	ldr.w	r2, [pc, #1704]	; 12714 <_ZN9Krabi2015C1Eb+0x16b8>
   1206e:	f7fc fea5 	bl	edbc <_ZN8PositionC1Effb>
   12072:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12076:	f8c7 3168 	str.w	r3, [r7, #360]
   1207a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1207e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12082:	f8c7 3510 	str.w	r3, [r7, #1296]
   12086:	f04f 0034 	mov.w	r0, #52	; 0x34
   1208a:	f7fc fd31 	bl	eaf0 <_Znwj>
   1208e:	4603      	mov	r3, r0
   12090:	f8c7 316c 	str.w	r3, [r7, #364]
   12094:	f8d7 316c 	ldr.w	r3, [r7, #364]
   12098:	2b00      	cmp	r3, #0
   1209a:	d01b      	beq.n	120d4 <_ZN9Krabi2015C1Eb+0x1078>
   1209c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   120a0:	681b      	ldr	r3, [r3, #0]
   120a2:	6b5b      	ldr	r3, [r3, #52]
   120a4:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   120a8:	9300      	str	r3, [sp, #0]
   120aa:	f04f 0300 	mov.w	r3, #0	; 0x0
   120ae:	9301      	str	r3, [sp, #4]
   120b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120b4:	9302      	str	r3, [sp, #8]
   120b6:	f04f 0300 	mov.w	r3, #0	; 0x0
   120ba:	9303      	str	r3, [sp, #12]
   120bc:	f8d7 016c 	ldr.w	r0, [r7, #364]
   120c0:	ca06      	ldmia	r2!, {r1, r2}
   120c2:	f8d7 3168 	ldr.w	r3, [r7, #360]
   120c6:	f7fe fd17 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   120ca:	f8d7 316c 	ldr.w	r3, [r7, #364]
   120ce:	f8c7 3170 	str.w	r3, [r7, #368]
   120d2:	e003      	b.n	120dc <_ZN9Krabi2015C1Eb+0x1080>
   120d4:	f8d7 316c 	ldr.w	r3, [r7, #364]
   120d8:	f8c7 3170 	str.w	r3, [r7, #368]
   120dc:	f8d7 3170 	ldr.w	r3, [r7, #368]
   120e0:	f8c7 357c 	str.w	r3, [r7, #1404]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   120e4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   120e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   120ec:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   120f0:	781b      	ldrb	r3, [r3, #0]
   120f2:	4610      	mov	r0, r2
   120f4:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 12718 <_ZN9Krabi2015C1Eb+0x16bc>
   120f8:	f8df 2620 	ldr.w	r2, [pc, #1568]	; 1271c <_ZN9Krabi2015C1Eb+0x16c0>
   120fc:	f7fc fe5e 	bl	edbc <_ZN8PositionC1Effb>
   12100:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12104:	f8c7 3174 	str.w	r3, [r7, #372]
   12108:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1210c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12110:	f8c7 3510 	str.w	r3, [r7, #1296]
   12114:	f04f 0034 	mov.w	r0, #52	; 0x34
   12118:	f7fc fcea 	bl	eaf0 <_Znwj>
   1211c:	4603      	mov	r3, r0
   1211e:	f8c7 3178 	str.w	r3, [r7, #376]
   12122:	f8d7 3178 	ldr.w	r3, [r7, #376]
   12126:	2b00      	cmp	r3, #0
   12128:	d01b      	beq.n	12162 <_ZN9Krabi2015C1Eb+0x1106>
   1212a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1212e:	681b      	ldr	r3, [r3, #0]
   12130:	6b5b      	ldr	r3, [r3, #52]
   12132:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   12136:	9300      	str	r3, [sp, #0]
   12138:	f04f 0300 	mov.w	r3, #0	; 0x0
   1213c:	9301      	str	r3, [sp, #4]
   1213e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12142:	9302      	str	r3, [sp, #8]
   12144:	f04f 0300 	mov.w	r3, #0	; 0x0
   12148:	9303      	str	r3, [sp, #12]
   1214a:	f8d7 0178 	ldr.w	r0, [r7, #376]
   1214e:	ca06      	ldmia	r2!, {r1, r2}
   12150:	f8d7 3174 	ldr.w	r3, [r7, #372]
   12154:	f7fe fcd0 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12158:	f8d7 3178 	ldr.w	r3, [r7, #376]
   1215c:	f8c7 317c 	str.w	r3, [r7, #380]
   12160:	e003      	b.n	1216a <_ZN9Krabi2015C1Eb+0x110e>
   12162:	f8d7 3178 	ldr.w	r3, [r7, #376]
   12166:	f8c7 317c 	str.w	r3, [r7, #380]
   1216a:	f8d7 317c 	ldr.w	r3, [r7, #380]
   1216e:	f8c7 3580 	str.w	r3, [r7, #1408]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12172:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   12176:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1217a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1217e:	781b      	ldrb	r3, [r3, #0]
   12180:	4610      	mov	r0, r2
   12182:	f8df 159c 	ldr.w	r1, [pc, #1436]	; 12720 <_ZN9Krabi2015C1Eb+0x16c4>
   12186:	f8df 259c 	ldr.w	r2, [pc, #1436]	; 12724 <_ZN9Krabi2015C1Eb+0x16c8>
   1218a:	f7fc fe17 	bl	edbc <_ZN8PositionC1Effb>
   1218e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12192:	f8c7 3180 	str.w	r3, [r7, #384]
   12196:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1219a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1219e:	f8c7 3510 	str.w	r3, [r7, #1296]
   121a2:	f04f 0034 	mov.w	r0, #52	; 0x34
   121a6:	f7fc fca3 	bl	eaf0 <_Znwj>
   121aa:	4603      	mov	r3, r0
   121ac:	f8c7 3184 	str.w	r3, [r7, #388]
   121b0:	f8d7 3184 	ldr.w	r3, [r7, #388]
   121b4:	2b00      	cmp	r3, #0
   121b6:	d01b      	beq.n	121f0 <_ZN9Krabi2015C1Eb+0x1194>
   121b8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   121bc:	681b      	ldr	r3, [r3, #0]
   121be:	6b5b      	ldr	r3, [r3, #52]
   121c0:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   121c4:	9300      	str	r3, [sp, #0]
   121c6:	f04f 0300 	mov.w	r3, #0	; 0x0
   121ca:	9301      	str	r3, [sp, #4]
   121cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121d0:	9302      	str	r3, [sp, #8]
   121d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   121d6:	9303      	str	r3, [sp, #12]
   121d8:	f8d7 0184 	ldr.w	r0, [r7, #388]
   121dc:	ca06      	ldmia	r2!, {r1, r2}
   121de:	f8d7 3180 	ldr.w	r3, [r7, #384]
   121e2:	f7fe fc89 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   121e6:	f8d7 3184 	ldr.w	r3, [r7, #388]
   121ea:	f8c7 3188 	str.w	r3, [r7, #392]
   121ee:	e003      	b.n	121f8 <_ZN9Krabi2015C1Eb+0x119c>
   121f0:	f8d7 3184 	ldr.w	r3, [r7, #388]
   121f4:	f8c7 3188 	str.w	r3, [r7, #392]
   121f8:	f8d7 3188 	ldr.w	r3, [r7, #392]
   121fc:	f8c7 3584 	str.w	r3, [r7, #1412]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12200:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   12204:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12208:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1220c:	781b      	ldrb	r3, [r3, #0]
   1220e:	4610      	mov	r0, r2
   12210:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 12728 <_ZN9Krabi2015C1Eb+0x16cc>
   12214:	f8df 2514 	ldr.w	r2, [pc, #1300]	; 1272c <_ZN9Krabi2015C1Eb+0x16d0>
   12218:	f7fc fdd0 	bl	edbc <_ZN8PositionC1Effb>
   1221c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12220:	f8c7 318c 	str.w	r3, [r7, #396]
   12224:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12228:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1222c:	f8c7 3510 	str.w	r3, [r7, #1296]
   12230:	f04f 0034 	mov.w	r0, #52	; 0x34
   12234:	f7fc fc5c 	bl	eaf0 <_Znwj>
   12238:	4603      	mov	r3, r0
   1223a:	f8c7 3190 	str.w	r3, [r7, #400]
   1223e:	f8d7 3190 	ldr.w	r3, [r7, #400]
   12242:	2b00      	cmp	r3, #0
   12244:	d01b      	beq.n	1227e <_ZN9Krabi2015C1Eb+0x1222>
   12246:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1224a:	681b      	ldr	r3, [r3, #0]
   1224c:	6b5b      	ldr	r3, [r3, #52]
   1224e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   12252:	9300      	str	r3, [sp, #0]
   12254:	f04f 0300 	mov.w	r3, #0	; 0x0
   12258:	9301      	str	r3, [sp, #4]
   1225a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1225e:	9302      	str	r3, [sp, #8]
   12260:	f04f 0300 	mov.w	r3, #0	; 0x0
   12264:	9303      	str	r3, [sp, #12]
   12266:	f8d7 0190 	ldr.w	r0, [r7, #400]
   1226a:	ca06      	ldmia	r2!, {r1, r2}
   1226c:	f8d7 318c 	ldr.w	r3, [r7, #396]
   12270:	f7fe fc42 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12274:	f8d7 3190 	ldr.w	r3, [r7, #400]
   12278:	f8c7 3194 	str.w	r3, [r7, #404]
   1227c:	e003      	b.n	12286 <_ZN9Krabi2015C1Eb+0x122a>
   1227e:	f8d7 3190 	ldr.w	r3, [r7, #400]
   12282:	f8c7 3194 	str.w	r3, [r7, #404]
   12286:	f8d7 3194 	ldr.w	r3, [r7, #404]
   1228a:	f8c7 3588 	str.w	r3, [r7, #1416]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1228e:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   12292:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12296:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1229a:	781b      	ldrb	r3, [r3, #0]
   1229c:	4610      	mov	r0, r2
   1229e:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 12730 <_ZN9Krabi2015C1Eb+0x16d4>
   122a2:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 1272c <_ZN9Krabi2015C1Eb+0x16d0>
   122a6:	f7fc fd89 	bl	edbc <_ZN8PositionC1Effb>
   122aa:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   122ae:	f8c7 3198 	str.w	r3, [r7, #408]
   122b2:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   122b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   122ba:	f8c7 3510 	str.w	r3, [r7, #1296]
   122be:	f04f 0034 	mov.w	r0, #52	; 0x34
   122c2:	f7fc fc15 	bl	eaf0 <_Znwj>
   122c6:	4603      	mov	r3, r0
   122c8:	f8c7 319c 	str.w	r3, [r7, #412]
   122cc:	f8d7 319c 	ldr.w	r3, [r7, #412]
   122d0:	2b00      	cmp	r3, #0
   122d2:	d01b      	beq.n	1230c <_ZN9Krabi2015C1Eb+0x12b0>
   122d4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   122d8:	681b      	ldr	r3, [r3, #0]
   122da:	6b5b      	ldr	r3, [r3, #52]
   122dc:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   122e0:	9300      	str	r3, [sp, #0]
   122e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   122e6:	9301      	str	r3, [sp, #4]
   122e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   122ec:	9302      	str	r3, [sp, #8]
   122ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   122f2:	9303      	str	r3, [sp, #12]
   122f4:	f8d7 019c 	ldr.w	r0, [r7, #412]
   122f8:	ca06      	ldmia	r2!, {r1, r2}
   122fa:	f8d7 3198 	ldr.w	r3, [r7, #408]
   122fe:	f7fe fbfb 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12302:	f8d7 319c 	ldr.w	r3, [r7, #412]
   12306:	f8c7 31a0 	str.w	r3, [r7, #416]
   1230a:	e003      	b.n	12314 <_ZN9Krabi2015C1Eb+0x12b8>
   1230c:	f8d7 319c 	ldr.w	r3, [r7, #412]
   12310:	f8c7 31a0 	str.w	r3, [r7, #416]
   12314:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   12318:	f8c7 358c 	str.w	r3, [r7, #1420]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1231c:	f507 7240 	add.w	r2, r7, #768	; 0x300
   12320:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12324:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12328:	781b      	ldrb	r3, [r3, #0]
   1232a:	4610      	mov	r0, r2
   1232c:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 12734 <_ZN9Krabi2015C1Eb+0x16d8>
   12330:	4af5      	ldr	r2, [pc, #980]	(12708 <_ZN9Krabi2015C1Eb+0x16ac>)
   12332:	f7fc fd43 	bl	edbc <_ZN8PositionC1Effb>
   12336:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1233a:	f8c7 31a4 	str.w	r3, [r7, #420]
   1233e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12342:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12346:	f8c7 3510 	str.w	r3, [r7, #1296]
   1234a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1234e:	f7fc fbcf 	bl	eaf0 <_Znwj>
   12352:	4603      	mov	r3, r0
   12354:	f8c7 31a8 	str.w	r3, [r7, #424]
   12358:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   1235c:	2b00      	cmp	r3, #0
   1235e:	d01b      	beq.n	12398 <_ZN9Krabi2015C1Eb+0x133c>
   12360:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12364:	681b      	ldr	r3, [r3, #0]
   12366:	6b5b      	ldr	r3, [r3, #52]
   12368:	f507 7240 	add.w	r2, r7, #768	; 0x300
   1236c:	9300      	str	r3, [sp, #0]
   1236e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12372:	9301      	str	r3, [sp, #4]
   12374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12378:	9302      	str	r3, [sp, #8]
   1237a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1237e:	9303      	str	r3, [sp, #12]
   12380:	f8d7 01a8 	ldr.w	r0, [r7, #424]
   12384:	ca06      	ldmia	r2!, {r1, r2}
   12386:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   1238a:	f7fe fbb5 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1238e:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   12392:	f8c7 31ac 	str.w	r3, [r7, #428]
   12396:	e003      	b.n	123a0 <_ZN9Krabi2015C1Eb+0x1344>
   12398:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   1239c:	f8c7 31ac 	str.w	r3, [r7, #428]
   123a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   123a4:	f8c7 3590 	str.w	r3, [r7, #1424]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   123a8:	f507 7242 	add.w	r2, r7, #776	; 0x308
   123ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
   123b0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   123b4:	781b      	ldrb	r3, [r3, #0]
   123b6:	4610      	mov	r0, r2
   123b8:	49df      	ldr	r1, [pc, #892]	(12738 <_ZN9Krabi2015C1Eb+0x16dc>)
   123ba:	4ae0      	ldr	r2, [pc, #896]	(1273c <_ZN9Krabi2015C1Eb+0x16e0>)
   123bc:	f7fc fcfe 	bl	edbc <_ZN8PositionC1Effb>
   123c0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   123c4:	f8c7 31b0 	str.w	r3, [r7, #432]
   123c8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   123cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   123d0:	f8c7 3510 	str.w	r3, [r7, #1296]
   123d4:	f04f 0034 	mov.w	r0, #52	; 0x34
   123d8:	f7fc fb8a 	bl	eaf0 <_Znwj>
   123dc:	4603      	mov	r3, r0
   123de:	f8c7 31b4 	str.w	r3, [r7, #436]
   123e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   123e6:	2b00      	cmp	r3, #0
   123e8:	d01b      	beq.n	12422 <_ZN9Krabi2015C1Eb+0x13c6>
   123ea:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   123ee:	681b      	ldr	r3, [r3, #0]
   123f0:	6b5b      	ldr	r3, [r3, #52]
   123f2:	f507 7242 	add.w	r2, r7, #776	; 0x308
   123f6:	9300      	str	r3, [sp, #0]
   123f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   123fc:	9301      	str	r3, [sp, #4]
   123fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12402:	9302      	str	r3, [sp, #8]
   12404:	f04f 0300 	mov.w	r3, #0	; 0x0
   12408:	9303      	str	r3, [sp, #12]
   1240a:	f8d7 01b4 	ldr.w	r0, [r7, #436]
   1240e:	ca06      	ldmia	r2!, {r1, r2}
   12410:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   12414:	f7fe fb70 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12418:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   1241c:	f8c7 31b8 	str.w	r3, [r7, #440]
   12420:	e003      	b.n	1242a <_ZN9Krabi2015C1Eb+0x13ce>
   12422:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   12426:	f8c7 31b8 	str.w	r3, [r7, #440]
   1242a:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   1242e:	f8c7 3594 	str.w	r3, [r7, #1428]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12432:	f507 7244 	add.w	r2, r7, #784	; 0x310
   12436:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1243a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1243e:	781b      	ldrb	r3, [r3, #0]
   12440:	4610      	mov	r0, r2
   12442:	49bf      	ldr	r1, [pc, #764]	(12740 <_ZN9Krabi2015C1Eb+0x16e4>)
   12444:	4abf      	ldr	r2, [pc, #764]	(12744 <_ZN9Krabi2015C1Eb+0x16e8>)
   12446:	f7fc fcb9 	bl	edbc <_ZN8PositionC1Effb>
   1244a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1244e:	f8c7 31bc 	str.w	r3, [r7, #444]
   12452:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12456:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1245a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1245e:	f04f 0034 	mov.w	r0, #52	; 0x34
   12462:	f7fc fb45 	bl	eaf0 <_Znwj>
   12466:	4603      	mov	r3, r0
   12468:	f8c7 31c0 	str.w	r3, [r7, #448]
   1246c:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   12470:	2b00      	cmp	r3, #0
   12472:	d01b      	beq.n	124ac <_ZN9Krabi2015C1Eb+0x1450>
   12474:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	6b5b      	ldr	r3, [r3, #52]
   1247c:	f507 7244 	add.w	r2, r7, #784	; 0x310
   12480:	9300      	str	r3, [sp, #0]
   12482:	f04f 0300 	mov.w	r3, #0	; 0x0
   12486:	9301      	str	r3, [sp, #4]
   12488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1248c:	9302      	str	r3, [sp, #8]
   1248e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12492:	9303      	str	r3, [sp, #12]
   12494:	f8d7 01c0 	ldr.w	r0, [r7, #448]
   12498:	ca06      	ldmia	r2!, {r1, r2}
   1249a:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   1249e:	f7fe fb2b 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   124a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   124a6:	f8c7 31c4 	str.w	r3, [r7, #452]
   124aa:	e003      	b.n	124b4 <_ZN9Krabi2015C1Eb+0x1458>
   124ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   124b0:	f8c7 31c4 	str.w	r3, [r7, #452]
   124b4:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   124b8:	f8c7 3598 	str.w	r3, [r7, #1432]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   124bc:	f507 7246 	add.w	r2, r7, #792	; 0x318
   124c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   124c4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   124c8:	781b      	ldrb	r3, [r3, #0]
   124ca:	4610      	mov	r0, r2
   124cc:	499e      	ldr	r1, [pc, #632]	(12748 <_ZN9Krabi2015C1Eb+0x16ec>)
   124ce:	4a9f      	ldr	r2, [pc, #636]	(1274c <_ZN9Krabi2015C1Eb+0x16f0>)
   124d0:	f7fc fc74 	bl	edbc <_ZN8PositionC1Effb>
   124d4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   124d8:	f8c7 31c8 	str.w	r3, [r7, #456]
   124dc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   124e0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   124e4:	f8c7 3510 	str.w	r3, [r7, #1296]
   124e8:	f04f 0034 	mov.w	r0, #52	; 0x34
   124ec:	f7fc fb00 	bl	eaf0 <_Znwj>
   124f0:	4603      	mov	r3, r0
   124f2:	f8c7 31cc 	str.w	r3, [r7, #460]
   124f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   124fa:	2b00      	cmp	r3, #0
   124fc:	d01b      	beq.n	12536 <_ZN9Krabi2015C1Eb+0x14da>
   124fe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12502:	681b      	ldr	r3, [r3, #0]
   12504:	6b5b      	ldr	r3, [r3, #52]
   12506:	f507 7246 	add.w	r2, r7, #792	; 0x318
   1250a:	9300      	str	r3, [sp, #0]
   1250c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12510:	9301      	str	r3, [sp, #4]
   12512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12516:	9302      	str	r3, [sp, #8]
   12518:	f04f 0300 	mov.w	r3, #0	; 0x0
   1251c:	9303      	str	r3, [sp, #12]
   1251e:	f8d7 01cc 	ldr.w	r0, [r7, #460]
   12522:	ca06      	ldmia	r2!, {r1, r2}
   12524:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   12528:	f7fe fae6 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1252c:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   12530:	f8c7 31d0 	str.w	r3, [r7, #464]
   12534:	e003      	b.n	1253e <_ZN9Krabi2015C1Eb+0x14e2>
   12536:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   1253a:	f8c7 31d0 	str.w	r3, [r7, #464]
   1253e:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   12542:	f8c7 359c 	str.w	r3, [r7, #1436]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12546:	f507 7248 	add.w	r2, r7, #800	; 0x320
   1254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1254e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12552:	781b      	ldrb	r3, [r3, #0]
   12554:	4610      	mov	r0, r2
   12556:	497e      	ldr	r1, [pc, #504]	(12750 <_ZN9Krabi2015C1Eb+0x16f4>)
   12558:	4a7e      	ldr	r2, [pc, #504]	(12754 <_ZN9Krabi2015C1Eb+0x16f8>)
   1255a:	f7fc fc2f 	bl	edbc <_ZN8PositionC1Effb>
   1255e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12562:	f8c7 31d4 	str.w	r3, [r7, #468]
   12566:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1256a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1256e:	f8c7 3510 	str.w	r3, [r7, #1296]
   12572:	f04f 0034 	mov.w	r0, #52	; 0x34
   12576:	f7fc fabb 	bl	eaf0 <_Znwj>
   1257a:	4603      	mov	r3, r0
   1257c:	f8c7 31d8 	str.w	r3, [r7, #472]
   12580:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   12584:	2b00      	cmp	r3, #0
   12586:	d01b      	beq.n	125c0 <_ZN9Krabi2015C1Eb+0x1564>
   12588:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1258c:	681b      	ldr	r3, [r3, #0]
   1258e:	6b5b      	ldr	r3, [r3, #52]
   12590:	f507 7248 	add.w	r2, r7, #800	; 0x320
   12594:	9300      	str	r3, [sp, #0]
   12596:	f04f 0300 	mov.w	r3, #0	; 0x0
   1259a:	9301      	str	r3, [sp, #4]
   1259c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125a0:	9302      	str	r3, [sp, #8]
   125a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   125a6:	9303      	str	r3, [sp, #12]
   125a8:	f8d7 01d8 	ldr.w	r0, [r7, #472]
   125ac:	ca06      	ldmia	r2!, {r1, r2}
   125ae:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   125b2:	f7fe faa1 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   125b6:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   125ba:	f8c7 31dc 	str.w	r3, [r7, #476]
   125be:	e003      	b.n	125c8 <_ZN9Krabi2015C1Eb+0x156c>
   125c0:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   125c4:	f8c7 31dc 	str.w	r3, [r7, #476]
   125c8:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   125cc:	f8c7 35a0 	str.w	r3, [r7, #1440]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   125d0:	f507 724a 	add.w	r2, r7, #808	; 0x328
   125d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   125d8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   125dc:	781b      	ldrb	r3, [r3, #0]
   125de:	4610      	mov	r0, r2
   125e0:	495d      	ldr	r1, [pc, #372]	(12758 <_ZN9Krabi2015C1Eb+0x16fc>)
   125e2:	4a5e      	ldr	r2, [pc, #376]	(1275c <_ZN9Krabi2015C1Eb+0x1700>)
   125e4:	f7fc fbea 	bl	edbc <_ZN8PositionC1Effb>
   125e8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   125ec:	f8c7 31e0 	str.w	r3, [r7, #480]
   125f0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   125f4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   125f8:	f8c7 3510 	str.w	r3, [r7, #1296]
   125fc:	f04f 0034 	mov.w	r0, #52	; 0x34
   12600:	f7fc fa76 	bl	eaf0 <_Znwj>
   12604:	4603      	mov	r3, r0
   12606:	f8c7 31e4 	str.w	r3, [r7, #484]
   1260a:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   1260e:	2b00      	cmp	r3, #0
   12610:	d01b      	beq.n	1264a <_ZN9Krabi2015C1Eb+0x15ee>
   12612:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12616:	681b      	ldr	r3, [r3, #0]
   12618:	6b5b      	ldr	r3, [r3, #52]
   1261a:	f507 724a 	add.w	r2, r7, #808	; 0x328
   1261e:	9300      	str	r3, [sp, #0]
   12620:	f04f 0300 	mov.w	r3, #0	; 0x0
   12624:	9301      	str	r3, [sp, #4]
   12626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1262a:	9302      	str	r3, [sp, #8]
   1262c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12630:	9303      	str	r3, [sp, #12]
   12632:	f8d7 01e4 	ldr.w	r0, [r7, #484]
   12636:	ca06      	ldmia	r2!, {r1, r2}
   12638:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   1263c:	f7fe fa5c 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12640:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   12644:	f8c7 31e8 	str.w	r3, [r7, #488]
   12648:	e003      	b.n	12652 <_ZN9Krabi2015C1Eb+0x15f6>
   1264a:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   1264e:	f8c7 31e8 	str.w	r3, [r7, #488]
   12652:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   12656:	f8c7 35a4 	str.w	r3, [r7, #1444]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1265a:	f507 724c 	add.w	r2, r7, #816	; 0x330
   1265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12662:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12666:	781b      	ldrb	r3, [r3, #0]
   12668:	4610      	mov	r0, r2
   1266a:	493d      	ldr	r1, [pc, #244]	(12760 <_ZN9Krabi2015C1Eb+0x1704>)
   1266c:	4a3d      	ldr	r2, [pc, #244]	(12764 <_ZN9Krabi2015C1Eb+0x1708>)
   1266e:	f7fc fba5 	bl	edbc <_ZN8PositionC1Effb>
   12672:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   12676:	f8c7 31ec 	str.w	r3, [r7, #492]
   1267a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1267e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12682:	f8c7 3510 	str.w	r3, [r7, #1296]
   12686:	f04f 0034 	mov.w	r0, #52	; 0x34
   1268a:	f7fc fa31 	bl	eaf0 <_Znwj>
   1268e:	4603      	mov	r3, r0
   12690:	f8c7 31f0 	str.w	r3, [r7, #496]
   12694:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   12698:	2b00      	cmp	r3, #0
   1269a:	d01b      	beq.n	126d4 <_ZN9Krabi2015C1Eb+0x1678>
   1269c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   126a0:	681b      	ldr	r3, [r3, #0]
   126a2:	6b5b      	ldr	r3, [r3, #52]
   126a4:	f507 724c 	add.w	r2, r7, #816	; 0x330
   126a8:	9300      	str	r3, [sp, #0]
   126aa:	f04f 0300 	mov.w	r3, #0	; 0x0
   126ae:	9301      	str	r3, [sp, #4]
   126b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126b4:	9302      	str	r3, [sp, #8]
   126b6:	f04f 0300 	mov.w	r3, #0	; 0x0
   126ba:	9303      	str	r3, [sp, #12]
   126bc:	f8d7 01f0 	ldr.w	r0, [r7, #496]
   126c0:	ca06      	ldmia	r2!, {r1, r2}
   126c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   126c6:	f7fe fa17 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   126ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   126ce:	f8c7 31f4 	str.w	r3, [r7, #500]
   126d2:	e003      	b.n	126dc <_ZN9Krabi2015C1Eb+0x1680>
   126d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   126d8:	f8c7 31f4 	str.w	r3, [r7, #500]
   126dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   126e0:	f8c7 35a8 	str.w	r3, [r7, #1448]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   126e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   126e8:	f8c7 35ac 	str.w	r3, [r7, #1452]
   126ec:	e0a6      	b.n	1283c <_ZN9Krabi2015C1Eb+0x17e0>
   126ee:	46c0      	nop			(mov r8, r8)
   126f0:	449c4000 	.word	0x449c4000
   126f4:	44e10000 	.word	0x44e10000
   126f8:	44dac000 	.word	0x44dac000
   126fc:	4499c000 	.word	0x4499c000
   12700:	443e0000 	.word	0x443e0000
   12704:	450fc000 	.word	0x450fc000
   12708:	44bb8000 	.word	0x44bb8000
   1270c:	45296000 	.word	0x45296000
   12710:	45246000 	.word	0x45246000
   12714:	43e60000 	.word	0x43e60000
   12718:	44898000 	.word	0x44898000
   1271c:	44ce4000 	.word	0x44ce4000
   12720:	440c0000 	.word	0x440c0000
   12724:	44a14000 	.word	0x44a14000
   12728:	44340000 	.word	0x44340000
   1272c:	44c80000 	.word	0x44c80000
   12730:	43d20000 	.word	0x43d20000
   12734:	43960000 	.word	0x43960000
   12738:	43c80000 	.word	0x43c80000
   1273c:	43d70000 	.word	0x43d70000
   12740:	448ac000 	.word	0x448ac000
   12744:	448d4000 	.word	0x448d4000
   12748:	44b90000 	.word	0x44b90000
   1274c:	448fc000 	.word	0x448fc000
   12750:	44e74000 	.word	0x44e74000
   12754:	44910000 	.word	0x44910000
   12758:	44f3c000 	.word	0x44f3c000
   1275c:	44bf4000 	.word	0x44bf4000
   12760:	44ec4000 	.word	0x44ec4000
   12764:	44aaa000 	.word	0x44aaa000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   12768:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1276c:	681b      	ldr	r3, [r3, #0]
   1276e:	6b5a      	ldr	r2, [r3, #52]
   12770:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   12774:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12778:	4413      	add	r3, r2
   1277a:	681b      	ldr	r3, [r3, #0]
   1277c:	4618      	mov	r0, r3
   1277e:	f7fd ff9f 	bl	106c0 <_ZN5Etape8getStateEv>
   12782:	4603      	mov	r3, r0
   12784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12788:	bf14      	ite	ne
   1278a:	2300      	movne	r3, #0
   1278c:	2301      	moveq	r3, #1
   1278e:	b2db      	uxtb	r3, r3
   12790:	2b00      	cmp	r3, #0
   12792:	d04d      	beq.n	12830 <_ZN9Krabi2015C1Eb+0x17d4>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   12794:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12798:	681b      	ldr	r3, [r3, #0]
   1279a:	6a99      	ldr	r1, [r3, #40]
   1279c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   127a0:	ea4f 1203 	mov.w	r2, r3, lsl #4
   127a4:	ea4f 0382 	mov.w	r3, r2, lsl #2
   127a8:	ebc2 0303 	rsb	r3, r2, r3
   127ac:	eb01 0403 	add.w	r4, r1, r3
   127b0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   127b4:	681b      	ldr	r3, [r3, #0]
   127b6:	6b5a      	ldr	r2, [r3, #52]
   127b8:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   127bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   127c0:	4413      	add	r3, r2
   127c2:	681a      	ldr	r2, [r3, #0]
   127c4:	f507 735a 	add.w	r3, r7, #872	; 0x368
   127c8:	4618      	mov	r0, r3
   127ca:	4611      	mov	r1, r2
   127cc:	f7fd ff64 	bl	10698 <_ZN5Etape11getPositionEv>
   127d0:	f507 714e 	add.w	r1, r7, #824	; 0x338
   127d4:	f507 725a 	add.w	r2, r7, #872	; 0x368
   127d8:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 13100 <_ZN9Krabi2015C1Eb+0x20a4>
   127dc:	9300      	str	r3, [sp, #0]
   127de:	4608      	mov	r0, r1
   127e0:	ca06      	ldmia	r2!, {r1, r2}
   127e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   127e6:	f7fd f80f 	bl	f808 <_ZN10ActionGoToC1E8Positionbf>
   127ea:	f507 734e 	add.w	r3, r7, #824	; 0x338
   127ee:	4620      	mov	r0, r4
   127f0:	4619      	mov	r1, r3
   127f2:	f00a fd95 	bl	1d320 <_ZN10ActionGoToaSERKS_>
   127f6:	f507 734e 	add.w	r3, r7, #824	; 0x338
   127fa:	4618      	mov	r0, r3
   127fc:	f7fc ffcc 	bl	f798 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   12800:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12804:	681b      	ldr	r3, [r3, #0]
   12806:	6a5a      	ldr	r2, [r3, #36]
   12808:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1280c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12810:	eb02 0003 	add.w	r0, r2, r3
   12814:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12818:	681b      	ldr	r3, [r3, #0]
   1281a:	6a99      	ldr	r1, [r3, #40]
   1281c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   12820:	ea4f 1203 	mov.w	r2, r3, lsl #4
   12824:	ea4f 0382 	mov.w	r3, r2, lsl #2
   12828:	ebc2 0303 	rsb	r3, r2, r3
   1282c:	440b      	add	r3, r1
   1282e:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   12830:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   12834:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12838:	f8c7 35ac 	str.w	r3, [r7, #1452]
   1283c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   12840:	2b25      	cmp	r3, #37
   12842:	dd91      	ble.n	12768 <_ZN9Krabi2015C1Eb+0x170c>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   12844:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12848:	681b      	ldr	r3, [r3, #0]
   1284a:	f103 0448 	add.w	r4, r3, #72	; 0x48
   1284e:	f507 7266 	add.w	r2, r7, #920	; 0x398
   12852:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12856:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1285a:	781b      	ldrb	r3, [r3, #0]
   1285c:	4610      	mov	r0, r2
   1285e:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 13104 <_ZN9Krabi2015C1Eb+0x20a8>
   12862:	f8df 28a4 	ldr.w	r2, [pc, #2212]	; 13108 <_ZN9Krabi2015C1Eb+0x20ac>
   12866:	f7fc faa9 	bl	edbc <_ZN8PositionC1Effb>
   1286a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   1286e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12872:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12876:	781b      	ldrb	r3, [r3, #0]
   12878:	4610      	mov	r0, r2
   1287a:	f8df 1890 	ldr.w	r1, [pc, #2192]	; 1310c <_ZN9Krabi2015C1Eb+0x20b0>
   1287e:	f8df 2888 	ldr.w	r2, [pc, #2184]	; 13108 <_ZN9Krabi2015C1Eb+0x20ac>
   12882:	f7fc fa9b 	bl	edbc <_ZN8PositionC1Effb>
   12886:	f507 705c 	add.w	r0, r7, #880	; 0x370
   1288a:	f507 7166 	add.w	r1, r7, #920	; 0x398
   1288e:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   12892:	6853      	ldr	r3, [r2, #4]
   12894:	9300      	str	r3, [sp, #0]
   12896:	6813      	ldr	r3, [r2, #0]
   12898:	c906      	ldmia	r1!, {r1, r2}
   1289a:	f7fd f99d 	bl	fbd8 <_ZN4ClapC1E8PositionS0_>
   1289e:	f507 735c 	add.w	r3, r7, #880	; 0x370
   128a2:	4620      	mov	r0, r4
   128a4:	4619      	mov	r1, r3
   128a6:	f00a fd67 	bl	1d378 <_ZN4ClapaSERKS_>
   128aa:	f507 735c 	add.w	r3, r7, #880	; 0x370
   128ae:	4618      	mov	r0, r3
   128b0:	f7fd f95a 	bl	fb68 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   128b4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128b8:	681b      	ldr	r3, [r3, #0]
   128ba:	6a5b      	ldr	r3, [r3, #36]
   128bc:	f103 0208 	add.w	r2, r3, #8	; 0x8
   128c0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128c4:	681b      	ldr	r3, [r3, #0]
   128c6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   128ca:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   128cc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   128d0:	681b      	ldr	r3, [r3, #0]
   128d2:	f103 0470 	add.w	r4, r3, #112	; 0x70
   128d6:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   128da:	f507 7300 	add.w	r3, r7, #512	; 0x200
   128de:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   128e2:	781b      	ldrb	r3, [r3, #0]
   128e4:	4610      	mov	r0, r2
   128e6:	f8df 1828 	ldr.w	r1, [pc, #2088]	; 13110 <_ZN9Krabi2015C1Eb+0x20b4>
   128ea:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 13108 <_ZN9Krabi2015C1Eb+0x20ac>
   128ee:	f7fc fa65 	bl	edbc <_ZN8PositionC1Effb>
   128f2:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   128f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   128fa:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   128fe:	781b      	ldrb	r3, [r3, #0]
   12900:	4610      	mov	r0, r2
   12902:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 13114 <_ZN9Krabi2015C1Eb+0x20b8>
   12906:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 13108 <_ZN9Krabi2015C1Eb+0x20ac>
   1290a:	f7fc fa57 	bl	edbc <_ZN8PositionC1Effb>
   1290e:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   12912:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   12916:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   1291a:	6853      	ldr	r3, [r2, #4]
   1291c:	9300      	str	r3, [sp, #0]
   1291e:	6813      	ldr	r3, [r2, #0]
   12920:	c906      	ldmia	r1!, {r1, r2}
   12922:	f7fd f959 	bl	fbd8 <_ZN4ClapC1E8PositionS0_>
   12926:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   1292a:	4620      	mov	r0, r4
   1292c:	4619      	mov	r1, r3
   1292e:	f00a fd23 	bl	1d378 <_ZN4ClapaSERKS_>
   12932:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   12936:	4618      	mov	r0, r3
   12938:	f7fd f916 	bl	fb68 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   1293c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12940:	681b      	ldr	r3, [r3, #0]
   12942:	6a5b      	ldr	r3, [r3, #36]
   12944:	f103 0210 	add.w	r2, r3, #16	; 0x10
   12948:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1294c:	681b      	ldr	r3, [r3, #0]
   1294e:	f103 0370 	add.w	r3, r3, #112	; 0x70
   12952:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   12954:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12958:	681b      	ldr	r3, [r3, #0]
   1295a:	f103 0498 	add.w	r4, r3, #152	; 0x98
   1295e:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   12962:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12966:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1296a:	781b      	ldrb	r3, [r3, #0]
   1296c:	4610      	mov	r0, r2
   1296e:	f8df 17a8 	ldr.w	r1, [pc, #1960]	; 13118 <_ZN9Krabi2015C1Eb+0x20bc>
   12972:	f8df 2794 	ldr.w	r2, [pc, #1940]	; 13108 <_ZN9Krabi2015C1Eb+0x20ac>
   12976:	f7fc fa21 	bl	edbc <_ZN8PositionC1Effb>
   1297a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   1297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12982:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12986:	781b      	ldrb	r3, [r3, #0]
   12988:	4610      	mov	r0, r2
   1298a:	f8df 1790 	ldr.w	r1, [pc, #1936]	; 1311c <_ZN9Krabi2015C1Eb+0x20c0>
   1298e:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 13108 <_ZN9Krabi2015C1Eb+0x20ac>
   12992:	f7fc fa13 	bl	edbc <_ZN8PositionC1Effb>
   12996:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   1299a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   1299e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   129a2:	6853      	ldr	r3, [r2, #4]
   129a4:	9300      	str	r3, [sp, #0]
   129a6:	6813      	ldr	r3, [r2, #0]
   129a8:	c906      	ldmia	r1!, {r1, r2}
   129aa:	f7fd f915 	bl	fbd8 <_ZN4ClapC1E8PositionS0_>
   129ae:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   129b2:	4620      	mov	r0, r4
   129b4:	4619      	mov	r1, r3
   129b6:	f00a fcdf 	bl	1d378 <_ZN4ClapaSERKS_>
   129ba:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   129be:	4618      	mov	r0, r3
   129c0:	f7fd f8d2 	bl	fb68 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   129c4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   129c8:	681b      	ldr	r3, [r3, #0]
   129ca:	6a5b      	ldr	r3, [r3, #36]
   129cc:	f103 0218 	add.w	r2, r3, #24	; 0x18
   129d0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   129d4:	681b      	ldr	r3, [r3, #0]
   129d6:	f103 0398 	add.w	r3, r3, #152	; 0x98
   129da:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   129dc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   129e0:	681b      	ldr	r3, [r3, #0]
   129e2:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   129e6:	f507 6287 	add.w	r2, r7, #1080	; 0x438
   129ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
   129ee:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   129f2:	781b      	ldrb	r3, [r3, #0]
   129f4:	4610      	mov	r0, r2
   129f6:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 13120 <_ZN9Krabi2015C1Eb+0x20c4>
   129fa:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 13124 <_ZN9Krabi2015C1Eb+0x20c8>
   129fe:	f7fc f9dd 	bl	edbc <_ZN8PositionC1Effb>
   12a02:	f507 6283 	add.w	r2, r7, #1048	; 0x418
   12a06:	f507 6387 	add.w	r3, r7, #1080	; 0x438
   12a0a:	4610      	mov	r0, r2
   12a0c:	e893 0006 	ldmia.w	r3, {r1, r2}
   12a10:	f7fe f9f6 	bl	10e00 <_ZN7GobeletC1E8Position>
   12a14:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   12a18:	4620      	mov	r0, r4
   12a1a:	4619      	mov	r1, r3
   12a1c:	f00a fcd4 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   12a20:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   12a24:	4618      	mov	r0, r3
   12a26:	f7fe f9b3 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   12a2a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12a2e:	681b      	ldr	r3, [r3, #0]
   12a30:	6a5b      	ldr	r3, [r3, #36]
   12a32:	f103 0220 	add.w	r2, r3, #32	; 0x20
   12a36:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12a3a:	681b      	ldr	r3, [r3, #0]
   12a3c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   12a40:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   12a42:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12a46:	681b      	ldr	r3, [r3, #0]
   12a48:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   12a4c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   12a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12a54:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12a58:	781b      	ldrb	r3, [r3, #0]
   12a5a:	4610      	mov	r0, r2
   12a5c:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 13128 <_ZN9Krabi2015C1Eb+0x20cc>
   12a60:	f8df 26c8 	ldr.w	r2, [pc, #1736]	; 1312c <_ZN9Krabi2015C1Eb+0x20d0>
   12a64:	f7fc f9aa 	bl	edbc <_ZN8PositionC1Effb>
   12a68:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   12a6c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
   12a70:	4610      	mov	r0, r2
   12a72:	e893 0006 	ldmia.w	r3, {r1, r2}
   12a76:	f7fe f9c3 	bl	10e00 <_ZN7GobeletC1E8Position>
   12a7a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   12a7e:	4620      	mov	r0, r4
   12a80:	4619      	mov	r1, r3
   12a82:	f00a fca1 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   12a86:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   12a8a:	4618      	mov	r0, r3
   12a8c:	f7fe f980 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   12a90:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12a94:	681b      	ldr	r3, [r3, #0]
   12a96:	6a5b      	ldr	r3, [r3, #36]
   12a98:	f103 0224 	add.w	r2, r3, #36	; 0x24
   12a9c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12aa0:	681b      	ldr	r3, [r3, #0]
   12aa2:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   12aa6:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   12aa8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12aac:	681b      	ldr	r3, [r3, #0]
   12aae:	f503 7480 	add.w	r4, r3, #256	; 0x100
   12ab2:	f507 6291 	add.w	r2, r7, #1160	; 0x488
   12ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12aba:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12abe:	781b      	ldrb	r3, [r3, #0]
   12ac0:	4610      	mov	r0, r2
   12ac2:	f8df 166c 	ldr.w	r1, [pc, #1644]	; 13130 <_ZN9Krabi2015C1Eb+0x20d4>
   12ac6:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 13134 <_ZN9Krabi2015C1Eb+0x20d8>
   12aca:	f7fc f977 	bl	edbc <_ZN8PositionC1Effb>
   12ace:	f507 628d 	add.w	r2, r7, #1128	; 0x468
   12ad2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
   12ad6:	4610      	mov	r0, r2
   12ad8:	e893 0006 	ldmia.w	r3, {r1, r2}
   12adc:	f7fe f990 	bl	10e00 <_ZN7GobeletC1E8Position>
   12ae0:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   12ae4:	4620      	mov	r0, r4
   12ae6:	4619      	mov	r1, r3
   12ae8:	f00a fc6e 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   12aec:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   12af0:	4618      	mov	r0, r3
   12af2:	f7fe f94d 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   12af6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12afa:	681b      	ldr	r3, [r3, #0]
   12afc:	6a5b      	ldr	r3, [r3, #36]
   12afe:	f103 0228 	add.w	r2, r3, #40	; 0x28
   12b02:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12b06:	681b      	ldr	r3, [r3, #0]
   12b08:	f503 7380 	add.w	r3, r3, #256	; 0x100
   12b0c:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   12b0e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12b12:	681b      	ldr	r3, [r3, #0]
   12b14:	f503 7490 	add.w	r4, r3, #288	; 0x120
   12b18:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
   12b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12b20:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12b24:	781b      	ldrb	r3, [r3, #0]
   12b26:	4610      	mov	r0, r2
   12b28:	f8df 160c 	ldr.w	r1, [pc, #1548]	; 13138 <_ZN9Krabi2015C1Eb+0x20dc>
   12b2c:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 1312c <_ZN9Krabi2015C1Eb+0x20d0>
   12b30:	f7fc f944 	bl	edbc <_ZN8PositionC1Effb>
   12b34:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   12b38:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
   12b3c:	4610      	mov	r0, r2
   12b3e:	e893 0006 	ldmia.w	r3, {r1, r2}
   12b42:	f7fe f95d 	bl	10e00 <_ZN7GobeletC1E8Position>
   12b46:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   12b4a:	4620      	mov	r0, r4
   12b4c:	4619      	mov	r1, r3
   12b4e:	f00a fc3b 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   12b52:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   12b56:	4618      	mov	r0, r3
   12b58:	f7fe f91a 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   12b5c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12b60:	681b      	ldr	r3, [r3, #0]
   12b62:	6a5b      	ldr	r3, [r3, #36]
   12b64:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   12b68:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12b6c:	681b      	ldr	r3, [r3, #0]
   12b6e:	f503 7390 	add.w	r3, r3, #288	; 0x120
   12b72:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   12b74:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12b78:	681b      	ldr	r3, [r3, #0]
   12b7a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   12b7e:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
   12b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12b86:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12b8a:	781b      	ldrb	r3, [r3, #0]
   12b8c:	4610      	mov	r0, r2
   12b8e:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 1313c <_ZN9Krabi2015C1Eb+0x20e0>
   12b92:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 13124 <_ZN9Krabi2015C1Eb+0x20c8>
   12b96:	f7fc f911 	bl	edbc <_ZN8PositionC1Effb>
   12b9a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   12b9e:	4618      	mov	r0, r3
   12ba0:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
   12ba4:	e893 0006 	ldmia.w	r3, {r1, r2}
   12ba8:	f7fe f92a 	bl	10e00 <_ZN7GobeletC1E8Position>
   12bac:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   12bb0:	4620      	mov	r0, r4
   12bb2:	4619      	mov	r1, r3
   12bb4:	f00a fc08 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   12bb8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   12bbc:	4618      	mov	r0, r3
   12bbe:	f7fe f8e7 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   12bc2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12bc6:	681b      	ldr	r3, [r3, #0]
   12bc8:	6a5b      	ldr	r3, [r3, #36]
   12bca:	f103 0230 	add.w	r2, r3, #48	; 0x30
   12bce:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12bd2:	681b      	ldr	r3, [r3, #0]
   12bd4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   12bd8:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1220, 760, isYellow));
   12bda:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12bde:	681b      	ldr	r3, [r3, #0]
   12be0:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   12be4:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
   12be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   12bec:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   12bf0:	781b      	ldrb	r3, [r3, #0]
   12bf2:	4610      	mov	r0, r2
   12bf4:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 13140 <_ZN9Krabi2015C1Eb+0x20e4>
   12bf8:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 13144 <_ZN9Krabi2015C1Eb+0x20e8>
   12bfc:	f7fc f8de 	bl	edbc <_ZN8PositionC1Effb>
   12c00:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   12c04:	4618      	mov	r0, r3
   12c06:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
   12c0a:	e893 0006 	ldmia.w	r3, {r1, r2}
   12c0e:	f004 fdc3 	bl	17798 <_ZN5TapisC1E8Position>
   12c12:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   12c16:	4620      	mov	r0, r4
   12c18:	4619      	mov	r1, r3
   12c1a:	f00a fbf1 	bl	1d400 <_ZN5TapisaSERKS_>
   12c1e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   12c22:	4618      	mov	r0, r3
   12c24:	f004 fd24 	bl	17670 <_ZN5TapisD1Ev>
    actionEtape[23] = &actionTapis[0];
   12c28:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12c2c:	681b      	ldr	r3, [r3, #0]
   12c2e:	6a5b      	ldr	r3, [r3, #36]
   12c30:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   12c34:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12c38:	681b      	ldr	r3, [r3, #0]
   12c3a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   12c3e:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   12c40:	f8d7 0514 	ldr.w	r0, [r7, #1300]
   12c44:	f8d7 1518 	ldr.w	r1, [r7, #1304]
   12c48:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c4c:	f7fd fe74 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   12c50:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   12c54:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   12c58:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c5c:	f7fd fe6c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   12c60:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   12c64:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   12c68:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c6c:	f7fd fe64 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   12c70:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   12c74:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12c78:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c7c:	f7fd fe5c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   12c80:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   12c84:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   12c88:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c8c:	f7fd fe54 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   12c90:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12c94:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12c98:	f04f 0201 	mov.w	r2, #1	; 0x1
   12c9c:	f7fd fe4c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   12ca0:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   12ca4:	f8d7 1520 	ldr.w	r1, [r7, #1312]
   12ca8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cac:	f7fd fe44 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   12cb0:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   12cb4:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12cb8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cbc:	f7fd fe3c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   12cc0:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   12cc4:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12cc8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ccc:	f7fd fe34 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   12cd0:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   12cd4:	f8d7 1528 	ldr.w	r1, [r7, #1320]
   12cd8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cdc:	f7fd fe2c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   12ce0:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   12ce4:	f8d7 1548 	ldr.w	r1, [r7, #1352]
   12ce8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cec:	f7fd fe24 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   12cf0:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   12cf4:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   12cf8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cfc:	f7fd fe1c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   12d00:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   12d04:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   12d08:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d0c:	f7fd fe14 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   12d10:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   12d14:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12d18:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d1c:	f7fd fe0c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   12d20:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12d24:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   12d28:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d2c:	f7fd fe04 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   12d30:	f8d7 0548 	ldr.w	r0, [r7, #1352]
   12d34:	f8d7 154c 	ldr.w	r1, [r7, #1356]
   12d38:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d3c:	f7fd fdfc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   12d40:	f8d7 054c 	ldr.w	r0, [r7, #1356]
   12d44:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   12d48:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d4c:	f7fd fdf4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   12d50:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12d54:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12d58:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d5c:	f7fd fdec 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   12d60:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12d64:	f8d7 1560 	ldr.w	r1, [r7, #1376]
   12d68:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d6c:	f7fd fde4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   12d70:	f8d7 0560 	ldr.w	r0, [r7, #1376]
   12d74:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   12d78:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d7c:	f7fd fddc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   12d80:	f8d7 0580 	ldr.w	r0, [r7, #1408]
   12d84:	f8d7 1568 	ldr.w	r1, [r7, #1384]
   12d88:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d8c:	f7fd fdd4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   12d90:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   12d94:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   12d98:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d9c:	f7fd fdcc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   12da0:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12da4:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   12da8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dac:	f7fd fdc4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   12db0:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   12db4:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12db8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dbc:	f7fd fdbc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   12dc0:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12dc4:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12dc8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dcc:	f7fd fdb4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   12dd0:	f8d7 0568 	ldr.w	r0, [r7, #1384]
   12dd4:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   12dd8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ddc:	f7fd fdac 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   12de0:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12de4:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   12de8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dec:	f7fd fda4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   12df0:	f8d7 0564 	ldr.w	r0, [r7, #1380]
   12df4:	f8d7 153c 	ldr.w	r1, [r7, #1340]
   12df8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dfc:	f7fd fd9c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   12e00:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12e04:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   12e08:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e0c:	f7fd fd94 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   12e10:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   12e14:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12e18:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e1c:	f7fd fd8c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   12e20:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12e24:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12e28:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e2c:	f7fd fd84 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   12e30:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12e34:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   12e38:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e3c:	f7fd fd7c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   12e40:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12e44:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   12e48:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e4c:	f7fd fd74 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   12e50:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12e54:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   12e58:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e5c:	f7fd fd6c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   12e60:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12e64:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   12e68:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e6c:	f7fd fd64 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   12e70:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12e74:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   12e78:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e7c:	f7fd fd5c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   12e80:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   12e84:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   12e88:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e8c:	f7fd fd54 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   12e90:	f8d7 0544 	ldr.w	r0, [r7, #1348]
   12e94:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   12e98:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e9c:	f7fd fd4c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   12ea0:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   12ea4:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12ea8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12eac:	f7fd fd44 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   12eb0:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12eb4:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12eb8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ebc:	f7fd fd3c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   12ec0:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   12ec4:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12ec8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ecc:	f7fd fd34 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   12ed0:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12ed4:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12ed8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12edc:	f7fd fd2c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape26);
   12ee0:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   12ee4:	f8d7 157c 	ldr.w	r1, [r7, #1404]
   12ee8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12eec:	f7fd fd24 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape32);
   12ef0:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12ef4:	f8d7 1594 	ldr.w	r1, [r7, #1428]
   12ef8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12efc:	f7fd fd1c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   12f00:	f8d7 0594 	ldr.w	r0, [r7, #1428]
   12f04:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   12f08:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f0c:	f7fd fd14 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   12f10:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   12f14:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12f18:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f1c:	f7fd fd0c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   12f20:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   12f24:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12f28:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f2c:	f7fd fd04 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   12f30:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   12f34:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   12f38:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f3c:	f7fd fcfc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   12f40:	f8d7 0550 	ldr.w	r0, [r7, #1360]
   12f44:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   12f48:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f4c:	f7fd fcf4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   12f50:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12f54:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   12f58:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f5c:	f7fd fcec 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   12f60:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12f64:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   12f68:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f6c:	f7fd fce4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   12f70:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   12f74:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   12f78:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f7c:	f7fd fcdc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   12f80:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12f84:	f8d7 1584 	ldr.w	r1, [r7, #1412]
   12f88:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f8c:	f7fd fcd4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   12f90:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   12f94:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   12f98:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f9c:	f7fd fccc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   12fa0:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   12fa4:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   12fa8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12fac:	f7fd fcc4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   12fb0:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   12fb4:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12fb8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12fbc:	f7fd fcbc 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   12fc0:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12fc4:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   12fc8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12fcc:	f7fd fcb4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   12fd0:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12fd4:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   12fd8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12fdc:	f7fd fcac 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   12fe0:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   12fe4:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   12fe8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12fec:	f7fd fca4 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   12ff0:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   12ff4:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   12ff8:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ffc:	f7fd fc9c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   13000:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   13004:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   13008:	f04f 0201 	mov.w	r2, #1	; 0x1
   1300c:	f7fd fc94 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   13010:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   13014:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   13018:	f04f 0201 	mov.w	r2, #1	; 0x1
   1301c:	f7fd fc8c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   13020:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   13024:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   13028:	f04f 0201 	mov.w	r2, #1	; 0x1
   1302c:	f7fd fc84 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   13030:	f8d7 059c 	ldr.w	r0, [r7, #1436]
   13034:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   13038:	f04f 0201 	mov.w	r2, #1	; 0x1
   1303c:	f7fd fc7c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   13040:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   13044:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   13048:	f04f 0201 	mov.w	r2, #1	; 0x1
   1304c:	f7fd fc74 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   13050:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   13054:	f8d7 15a8 	ldr.w	r1, [r7, #1448]
   13058:	f04f 0201 	mov.w	r2, #1	; 0x1
   1305c:	f7fd fc6c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   13060:	f8d7 05a8 	ldr.w	r0, [r7, #1448]
   13064:	f8d7 15a4 	ldr.w	r1, [r7, #1444]
   13068:	f04f 0201 	mov.w	r2, #1	; 0x1
   1306c:	f7fd fc64 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   13070:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   13074:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   13078:	f04f 0201 	mov.w	r2, #1	; 0x1
   1307c:	f7fd fc5c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   13080:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   13084:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   13088:	f04f 0201 	mov.w	r2, #1	; 0x1
   1308c:	f7fd fc54 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   13090:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   13094:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   13098:	f04f 0201 	mov.w	r2, #1	; 0x1
   1309c:	f7fd fc4c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   130a0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   130a4:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   130a8:	f04f 0201 	mov.w	r2, #1	; 0x1
   130ac:	f7fd fc44 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   130b0:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   130b4:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   130b8:	f04f 0201 	mov.w	r2, #1	; 0x1
   130bc:	f7fd fc3c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   130c0:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   130c4:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   130c8:	f04f 0201 	mov.w	r2, #1	; 0x1
   130cc:	f7fd fc34 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   130d0:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   130d4:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   130d8:	f04f 0201 	mov.w	r2, #1	; 0x1
   130dc:	f7fd fc2c 	bl	10938 <_ZN5Etape9addVoisinEPS_b>

    // Lancer Dijkstra
    startDijkstra();
   130e0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   130e4:	681b      	ldr	r3, [r3, #0]
   130e6:	4618      	mov	r0, r3
   130e8:	f003 fdea 	bl	16cc0 <_ZN11StrategieV313startDijkstraEv>
}
   130ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   130f0:	681b      	ldr	r3, [r3, #0]
   130f2:	4618      	mov	r0, r3
   130f4:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
   130f8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   130fc:	46bd      	mov	sp, r7
   130fe:	bd90      	pop	{r4, r7, pc}
   13100:	41f00000 	.word	0x41f00000
   13104:	44510000 	.word	0x44510000
   13108:	44de8000 	.word	0x44de8000
   1310c:	447a0000 	.word	0x447a0000
   13110:	436c0000 	.word	0x436c0000
   13114:	43c80000 	.word	0x43c80000
   13118:	451c4000 	.word	0x451c4000
   1311c:	450fc000 	.word	0x450fc000
   13120:	437a0000 	.word	0x437a0000
   13124:	44dac000 	.word	0x44dac000
   13128:	44638000 	.word	0x44638000
   1312c:	444f8000 	.word	0x444f8000
   13130:	44bb8000 	.word	0x44bb8000
   13134:	44ce4000 	.word	0x44ce4000
   13138:	4502a000 	.word	0x4502a000
   1313c:	452be000 	.word	0x452be000
   13140:	44988000 	.word	0x44988000
   13144:	443e0000 	.word	0x443e0000

00013148 <_ZN9Krabi2015C2Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isYellow) : StrategieV3(isYellow)
   13148:	b590      	push	{r4, r7, lr}
   1314a:	f5ad 6db8 	sub.w	sp, sp, #1472	; 0x5c0
   1314e:	b081      	sub	sp, #4
   13150:	af04      	add	r7, sp, #16
   13152:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13156:	6018      	str	r0, [r3, #0]
   13158:	460a      	mov	r2, r1
   1315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1315e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13162:	701a      	strb	r2, [r3, #0]
   13164:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13168:	681a      	ldr	r2, [r3, #0]
   1316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1316e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13172:	781b      	ldrb	r3, [r3, #0]
   13174:	4610      	mov	r0, r2
   13176:	4619      	mov	r1, r3
   13178:	f004 f966 	bl	17448 <_ZN11StrategieV3C2Eb>
   1317c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13180:	681a      	ldr	r2, [r3, #0]
   13182:	f8df 3c70 	ldr.w	r3, [pc, #3184]	; 13df4 <_ZN9Krabi2015C2Eb+0xcac>
   13186:	6013      	str	r3, [r2, #0]
   13188:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1318c:	681b      	ldr	r3, [r3, #0]
   1318e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   13192:	607b      	str	r3, [r7, #4]
   13194:	f04f 0302 	mov.w	r3, #2	; 0x2
   13198:	60bb      	str	r3, [r7, #8]
   1319a:	e00a      	b.n	131b2 <_ZN9Krabi2015C2Eb+0x6a>
   1319c:	6878      	ldr	r0, [r7, #4]
   1319e:	f7fc fd8f 	bl	fcc0 <_ZN4ClapC1Ev>
   131a2:	687b      	ldr	r3, [r7, #4]
   131a4:	f103 0328 	add.w	r3, r3, #40	; 0x28
   131a8:	607b      	str	r3, [r7, #4]
   131aa:	68bb      	ldr	r3, [r7, #8]
   131ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   131b0:	60bb      	str	r3, [r7, #8]
   131b2:	68bb      	ldr	r3, [r7, #8]
   131b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   131b8:	d1f0      	bne.n	1319c <_ZN9Krabi2015C2Eb+0x54>
   131ba:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   131be:	681b      	ldr	r3, [r3, #0]
   131c0:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   131c4:	60fb      	str	r3, [r7, #12]
   131c6:	f04f 0304 	mov.w	r3, #4	; 0x4
   131ca:	613b      	str	r3, [r7, #16]
   131cc:	e00a      	b.n	131e4 <_ZN9Krabi2015C2Eb+0x9c>
   131ce:	68f8      	ldr	r0, [r7, #12]
   131d0:	f7fd fe5a 	bl	10e88 <_ZN7GobeletC1Ev>
   131d4:	68fb      	ldr	r3, [r7, #12]
   131d6:	f103 0320 	add.w	r3, r3, #32	; 0x20
   131da:	60fb      	str	r3, [r7, #12]
   131dc:	693b      	ldr	r3, [r7, #16]
   131de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   131e2:	613b      	str	r3, [r7, #16]
   131e4:	693b      	ldr	r3, [r7, #16]
   131e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   131ea:	d1f0      	bne.n	131ce <_ZN9Krabi2015C2Eb+0x86>
   131ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   131f0:	681b      	ldr	r3, [r3, #0]
   131f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   131f6:	617b      	str	r3, [r7, #20]
   131f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   131fc:	61bb      	str	r3, [r7, #24]
   131fe:	e00a      	b.n	13216 <_ZN9Krabi2015C2Eb+0xce>
   13200:	6978      	ldr	r0, [r7, #20]
   13202:	f004 fa6d 	bl	176e0 <_ZN5TapisC1Ev>
   13206:	697b      	ldr	r3, [r7, #20]
   13208:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1320c:	617b      	str	r3, [r7, #20]
   1320e:	69bb      	ldr	r3, [r7, #24]
   13210:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   13214:	61bb      	str	r3, [r7, #24]
   13216:	69bb      	ldr	r3, [r7, #24]
   13218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1321c:	d1f0      	bne.n	13200 <_ZN9Krabi2015C2Eb+0xb8>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   1321e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13222:	681a      	ldr	r2, [r3, #0]
   13224:	f04f 0326 	mov.w	r3, #38	; 0x26
   13228:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   1322a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1322e:	681a      	ldr	r2, [r3, #0]
   13230:	f04f 0301 	mov.w	r3, #1	; 0x1
   13234:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   13236:	f04f 0098 	mov.w	r0, #152	; 0x98
   1323a:	f7fb fcf1 	bl	ec20 <_Znaj>
   1323e:	4603      	mov	r3, r0
   13240:	461a      	mov	r2, r3
   13242:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13246:	681b      	ldr	r3, [r3, #0]
   13248:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   1324a:	f04f 0098 	mov.w	r0, #152	; 0x98
   1324e:	f7fb fce7 	bl	ec20 <_Znaj>
   13252:	4603      	mov	r3, r0
   13254:	461a      	mov	r2, r3
   13256:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1325a:	681b      	ldr	r3, [r3, #0]
   1325c:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   1325e:	f44f 60e5 	mov.w	r0, #1832	; 0x728
   13262:	f7fb fcdd 	bl	ec20 <_Znaj>
   13266:	4603      	mov	r3, r0
   13268:	61fb      	str	r3, [r7, #28]
   1326a:	69fb      	ldr	r3, [r7, #28]
   1326c:	2b00      	cmp	r3, #0
   1326e:	d03c      	beq.n	132ea <_ZN9Krabi2015C2Eb+0x1a2>
   13270:	69fb      	ldr	r3, [r7, #28]
   13272:	f103 0308 	add.w	r3, r3, #8	; 0x8
   13276:	627b      	str	r3, [r7, #36]
   13278:	6a7b      	ldr	r3, [r7, #36]
   1327a:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   1327e:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   13282:	f04f 0330 	mov.w	r3, #48	; 0x30
   13286:	6013      	str	r3, [r2, #0]
   13288:	6a7b      	ldr	r3, [r7, #36]
   1328a:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   1328e:	f04f 0326 	mov.w	r3, #38	; 0x26
   13292:	6013      	str	r3, [r2, #0]
   13294:	6a7b      	ldr	r3, [r7, #36]
   13296:	62bb      	str	r3, [r7, #40]
   13298:	f04f 0325 	mov.w	r3, #37	; 0x25
   1329c:	62fb      	str	r3, [r7, #44]
   1329e:	e01d      	b.n	132dc <_ZN9Krabi2015C2Eb+0x194>
   132a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   132a4:	4618      	mov	r0, r3
   132a6:	f8df 1b50 	ldr.w	r1, [pc, #2896]	; 13df8 <_ZN9Krabi2015C2Eb+0xcb0>
   132aa:	f8df 2b4c 	ldr.w	r2, [pc, #2892]	; 13df8 <_ZN9Krabi2015C2Eb+0xcb0>
   132ae:	f04f 0301 	mov.w	r3, #1	; 0x1
   132b2:	f7fb fd83 	bl	edbc <_ZN8PositionC1Effb>
   132b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
   132ba:	f8df 3b40 	ldr.w	r3, [pc, #2880]	; 13dfc <_ZN9Krabi2015C2Eb+0xcb4>
   132be:	9300      	str	r3, [sp, #0]
   132c0:	6ab8      	ldr	r0, [r7, #40]
   132c2:	ca06      	ldmia	r2!, {r1, r2}
   132c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   132c8:	f7fc fa9e 	bl	f808 <_ZN10ActionGoToC1E8Positionbf>
   132cc:	6abb      	ldr	r3, [r7, #40]
   132ce:	f103 0330 	add.w	r3, r3, #48	; 0x30
   132d2:	62bb      	str	r3, [r7, #40]
   132d4:	6afb      	ldr	r3, [r7, #44]
   132d6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   132da:	62fb      	str	r3, [r7, #44]
   132dc:	6afb      	ldr	r3, [r7, #44]
   132de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   132e2:	d1dd      	bne.n	132a0 <_ZN9Krabi2015C2Eb+0x158>
   132e4:	6a7b      	ldr	r3, [r7, #36]
   132e6:	623b      	str	r3, [r7, #32]
   132e8:	e001      	b.n	132ee <_ZN9Krabi2015C2Eb+0x1a6>
   132ea:	69fb      	ldr	r3, [r7, #28]
   132ec:	623b      	str	r3, [r7, #32]
   132ee:	6a3a      	ldr	r2, [r7, #32]
   132f0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   132f4:	681b      	ldr	r3, [r3, #0]
   132f6:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   132f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   132fc:	f8c7 3510 	str.w	r3, [r7, #1296]

    // Création des étapes
    // Arguments : Position, numéro étape, tableau des étapes, type d'étape, état de l'étape, nombre étapes liées
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   13300:	f507 7202 	add.w	r2, r7, #520	; 0x208
   13304:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13308:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1330c:	781b      	ldrb	r3, [r3, #0]
   1330e:	4610      	mov	r0, r2
   13310:	f8df 1aec 	ldr.w	r1, [pc, #2796]	; 13e00 <_ZN9Krabi2015C2Eb+0xcb8>
   13314:	f8df 2aec 	ldr.w	r2, [pc, #2796]	; 13e04 <_ZN9Krabi2015C2Eb+0xcbc>
   13318:	f7fb fd50 	bl	edbc <_ZN8PositionC1Effb>
   1331c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13320:	633b      	str	r3, [r7, #48]
   13322:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13326:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1332a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1332e:	f04f 0034 	mov.w	r0, #52	; 0x34
   13332:	f7fb fbdd 	bl	eaf0 <_Znwj>
   13336:	4603      	mov	r3, r0
   13338:	637b      	str	r3, [r7, #52]
   1333a:	6b7b      	ldr	r3, [r7, #52]
   1333c:	2b00      	cmp	r3, #0
   1333e:	d017      	beq.n	13370 <_ZN9Krabi2015C2Eb+0x228>
   13340:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13344:	681b      	ldr	r3, [r3, #0]
   13346:	6b5b      	ldr	r3, [r3, #52]
   13348:	f507 7202 	add.w	r2, r7, #520	; 0x208
   1334c:	9300      	str	r3, [sp, #0]
   1334e:	f04f 0305 	mov.w	r3, #5	; 0x5
   13352:	9301      	str	r3, [sp, #4]
   13354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13358:	9302      	str	r3, [sp, #8]
   1335a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1335e:	9303      	str	r3, [sp, #12]
   13360:	6b78      	ldr	r0, [r7, #52]
   13362:	ca06      	ldmia	r2!, {r1, r2}
   13364:	6b3b      	ldr	r3, [r7, #48]
   13366:	f7fd fbc7 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1336a:	6b7b      	ldr	r3, [r7, #52]
   1336c:	63bb      	str	r3, [r7, #56]
   1336e:	e001      	b.n	13374 <_ZN9Krabi2015C2Eb+0x22c>
   13370:	6b7b      	ldr	r3, [r7, #52]
   13372:	63bb      	str	r3, [r7, #56]
   13374:	6bbb      	ldr	r3, [r7, #56]
   13376:	f8c7 3514 	str.w	r3, [r7, #1300]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1337a:	f507 7204 	add.w	r2, r7, #528	; 0x210
   1337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13382:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13386:	781b      	ldrb	r3, [r3, #0]
   13388:	4610      	mov	r0, r2
   1338a:	f8df 1a7c 	ldr.w	r1, [pc, #2684]	; 13e08 <_ZN9Krabi2015C2Eb+0xcc0>
   1338e:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 13e04 <_ZN9Krabi2015C2Eb+0xcbc>
   13392:	f7fb fd13 	bl	edbc <_ZN8PositionC1Effb>
   13396:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1339a:	63fb      	str	r3, [r7, #60]
   1339c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   133a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   133a4:	f8c7 3510 	str.w	r3, [r7, #1296]
   133a8:	f04f 0034 	mov.w	r0, #52	; 0x34
   133ac:	f7fb fba0 	bl	eaf0 <_Znwj>
   133b0:	4603      	mov	r3, r0
   133b2:	643b      	str	r3, [r7, #64]
   133b4:	6c3b      	ldr	r3, [r7, #64]
   133b6:	2b00      	cmp	r3, #0
   133b8:	d017      	beq.n	133ea <_ZN9Krabi2015C2Eb+0x2a2>
   133ba:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   133be:	681b      	ldr	r3, [r3, #0]
   133c0:	6b5b      	ldr	r3, [r3, #52]
   133c2:	f507 7204 	add.w	r2, r7, #528	; 0x210
   133c6:	9300      	str	r3, [sp, #0]
   133c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   133cc:	9301      	str	r3, [sp, #4]
   133ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   133d2:	9302      	str	r3, [sp, #8]
   133d4:	f04f 0300 	mov.w	r3, #0	; 0x0
   133d8:	9303      	str	r3, [sp, #12]
   133da:	6c38      	ldr	r0, [r7, #64]
   133dc:	ca06      	ldmia	r2!, {r1, r2}
   133de:	6bfb      	ldr	r3, [r7, #60]
   133e0:	f7fd fb8a 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   133e4:	6c3b      	ldr	r3, [r7, #64]
   133e6:	647b      	str	r3, [r7, #68]
   133e8:	e001      	b.n	133ee <_ZN9Krabi2015C2Eb+0x2a6>
   133ea:	6c3b      	ldr	r3, [r7, #64]
   133ec:	647b      	str	r3, [r7, #68]
   133ee:	6c7b      	ldr	r3, [r7, #68]
   133f0:	f8c7 3518 	str.w	r3, [r7, #1304]
    Etape* etape2 = new Etape(Position(836, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   133f4:	f507 7206 	add.w	r2, r7, #536	; 0x218
   133f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   133fc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13400:	781b      	ldrb	r3, [r3, #0]
   13402:	4610      	mov	r0, r2
   13404:	f8df 1a04 	ldr.w	r1, [pc, #2564]	; 13e0c <_ZN9Krabi2015C2Eb+0xcc4>
   13408:	f8df 2a04 	ldr.w	r2, [pc, #2564]	; 13e10 <_ZN9Krabi2015C2Eb+0xcc8>
   1340c:	f7fb fcd6 	bl	edbc <_ZN8PositionC1Effb>
   13410:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13414:	64bb      	str	r3, [r7, #72]
   13416:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1341a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1341e:	f8c7 3510 	str.w	r3, [r7, #1296]
   13422:	f04f 0034 	mov.w	r0, #52	; 0x34
   13426:	f7fb fb63 	bl	eaf0 <_Znwj>
   1342a:	4603      	mov	r3, r0
   1342c:	64fb      	str	r3, [r7, #76]
   1342e:	6cfb      	ldr	r3, [r7, #76]
   13430:	2b00      	cmp	r3, #0
   13432:	d017      	beq.n	13464 <_ZN9Krabi2015C2Eb+0x31c>
   13434:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13438:	681b      	ldr	r3, [r3, #0]
   1343a:	6b5b      	ldr	r3, [r3, #52]
   1343c:	f507 7206 	add.w	r2, r7, #536	; 0x218
   13440:	9300      	str	r3, [sp, #0]
   13442:	f04f 0311 	mov.w	r3, #17	; 0x11
   13446:	9301      	str	r3, [sp, #4]
   13448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1344c:	9302      	str	r3, [sp, #8]
   1344e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13452:	9303      	str	r3, [sp, #12]
   13454:	6cf8      	ldr	r0, [r7, #76]
   13456:	ca06      	ldmia	r2!, {r1, r2}
   13458:	6cbb      	ldr	r3, [r7, #72]
   1345a:	f7fd fb4d 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1345e:	6cfb      	ldr	r3, [r7, #76]
   13460:	653b      	str	r3, [r7, #80]
   13462:	e001      	b.n	13468 <_ZN9Krabi2015C2Eb+0x320>
   13464:	6cfb      	ldr	r3, [r7, #76]
   13466:	653b      	str	r3, [r7, #80]
   13468:	6d3b      	ldr	r3, [r7, #80]
   1346a:	f8c7 351c 	str.w	r3, [r7, #1308]
    Etape* etape3 = new Etape(Position(1000, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1346e:	f507 7208 	add.w	r2, r7, #544	; 0x220
   13472:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13476:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1347a:	781b      	ldrb	r3, [r3, #0]
   1347c:	4610      	mov	r0, r2
   1347e:	f8df 1984 	ldr.w	r1, [pc, #2436]	; 13e04 <_ZN9Krabi2015C2Eb+0xcbc>
   13482:	f8df 298c 	ldr.w	r2, [pc, #2444]	; 13e10 <_ZN9Krabi2015C2Eb+0xcc8>
   13486:	f7fb fc99 	bl	edbc <_ZN8PositionC1Effb>
   1348a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1348e:	657b      	str	r3, [r7, #84]
   13490:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13494:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13498:	f8c7 3510 	str.w	r3, [r7, #1296]
   1349c:	f04f 0034 	mov.w	r0, #52	; 0x34
   134a0:	f7fb fb26 	bl	eaf0 <_Znwj>
   134a4:	4603      	mov	r3, r0
   134a6:	65bb      	str	r3, [r7, #88]
   134a8:	6dbb      	ldr	r3, [r7, #88]
   134aa:	2b00      	cmp	r3, #0
   134ac:	d017      	beq.n	134de <_ZN9Krabi2015C2Eb+0x396>
   134ae:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   134b2:	681b      	ldr	r3, [r3, #0]
   134b4:	6b5b      	ldr	r3, [r3, #52]
   134b6:	f507 7208 	add.w	r2, r7, #544	; 0x220
   134ba:	9300      	str	r3, [sp, #0]
   134bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   134c0:	9301      	str	r3, [sp, #4]
   134c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   134c6:	9302      	str	r3, [sp, #8]
   134c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   134cc:	9303      	str	r3, [sp, #12]
   134ce:	6db8      	ldr	r0, [r7, #88]
   134d0:	ca06      	ldmia	r2!, {r1, r2}
   134d2:	6d7b      	ldr	r3, [r7, #84]
   134d4:	f7fd fb10 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   134d8:	6dbb      	ldr	r3, [r7, #88]
   134da:	65fb      	str	r3, [r7, #92]
   134dc:	e001      	b.n	134e2 <_ZN9Krabi2015C2Eb+0x39a>
   134de:	6dbb      	ldr	r3, [r7, #88]
   134e0:	65fb      	str	r3, [r7, #92]
   134e2:	6dfb      	ldr	r3, [r7, #92]
   134e4:	f8c7 3520 	str.w	r3, [r7, #1312]
    Etape* etape4 = new Etape(Position(236, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   134e8:	f507 720a 	add.w	r2, r7, #552	; 0x228
   134ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
   134f0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   134f4:	781b      	ldrb	r3, [r3, #0]
   134f6:	4610      	mov	r0, r2
   134f8:	f8df 1918 	ldr.w	r1, [pc, #2328]	; 13e14 <_ZN9Krabi2015C2Eb+0xccc>
   134fc:	f8df 2910 	ldr.w	r2, [pc, #2320]	; 13e10 <_ZN9Krabi2015C2Eb+0xcc8>
   13500:	f7fb fc5c 	bl	edbc <_ZN8PositionC1Effb>
   13504:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13508:	663b      	str	r3, [r7, #96]
   1350a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1350e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13512:	f8c7 3510 	str.w	r3, [r7, #1296]
   13516:	f04f 0034 	mov.w	r0, #52	; 0x34
   1351a:	f7fb fae9 	bl	eaf0 <_Znwj>
   1351e:	4603      	mov	r3, r0
   13520:	667b      	str	r3, [r7, #100]
   13522:	6e7b      	ldr	r3, [r7, #100]
   13524:	2b00      	cmp	r3, #0
   13526:	d017      	beq.n	13558 <_ZN9Krabi2015C2Eb+0x410>
   13528:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1352c:	681b      	ldr	r3, [r3, #0]
   1352e:	6b5b      	ldr	r3, [r3, #52]
   13530:	f507 720a 	add.w	r2, r7, #552	; 0x228
   13534:	9300      	str	r3, [sp, #0]
   13536:	f04f 0311 	mov.w	r3, #17	; 0x11
   1353a:	9301      	str	r3, [sp, #4]
   1353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13540:	9302      	str	r3, [sp, #8]
   13542:	f04f 0300 	mov.w	r3, #0	; 0x0
   13546:	9303      	str	r3, [sp, #12]
   13548:	6e78      	ldr	r0, [r7, #100]
   1354a:	ca06      	ldmia	r2!, {r1, r2}
   1354c:	6e3b      	ldr	r3, [r7, #96]
   1354e:	f7fd fad3 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13552:	6e7b      	ldr	r3, [r7, #100]
   13554:	66bb      	str	r3, [r7, #104]
   13556:	e001      	b.n	1355c <_ZN9Krabi2015C2Eb+0x414>
   13558:	6e7b      	ldr	r3, [r7, #100]
   1355a:	66bb      	str	r3, [r7, #104]
   1355c:	6ebb      	ldr	r3, [r7, #104]
   1355e:	f8c7 3524 	str.w	r3, [r7, #1316]
    Etape* etape5 = new Etape(Position(400, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   13562:	f507 720c 	add.w	r2, r7, #560	; 0x230
   13566:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1356a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1356e:	781b      	ldrb	r3, [r3, #0]
   13570:	4610      	mov	r0, r2
   13572:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 13e18 <_ZN9Krabi2015C2Eb+0xcd0>
   13576:	f8df 2898 	ldr.w	r2, [pc, #2200]	; 13e10 <_ZN9Krabi2015C2Eb+0xcc8>
   1357a:	f7fb fc1f 	bl	edbc <_ZN8PositionC1Effb>
   1357e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13582:	66fb      	str	r3, [r7, #108]
   13584:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13588:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1358c:	f8c7 3510 	str.w	r3, [r7, #1296]
   13590:	f04f 0034 	mov.w	r0, #52	; 0x34
   13594:	f7fb faac 	bl	eaf0 <_Znwj>
   13598:	4603      	mov	r3, r0
   1359a:	673b      	str	r3, [r7, #112]
   1359c:	6f3b      	ldr	r3, [r7, #112]
   1359e:	2b00      	cmp	r3, #0
   135a0:	d017      	beq.n	135d2 <_ZN9Krabi2015C2Eb+0x48a>
   135a2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   135a6:	681b      	ldr	r3, [r3, #0]
   135a8:	6b5b      	ldr	r3, [r3, #52]
   135aa:	f507 720c 	add.w	r2, r7, #560	; 0x230
   135ae:	9300      	str	r3, [sp, #0]
   135b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   135b4:	9301      	str	r3, [sp, #4]
   135b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   135ba:	9302      	str	r3, [sp, #8]
   135bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   135c0:	9303      	str	r3, [sp, #12]
   135c2:	6f38      	ldr	r0, [r7, #112]
   135c4:	ca06      	ldmia	r2!, {r1, r2}
   135c6:	6efb      	ldr	r3, [r7, #108]
   135c8:	f7fd fa96 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   135cc:	6f3b      	ldr	r3, [r7, #112]
   135ce:	677b      	str	r3, [r7, #116]
   135d0:	e001      	b.n	135d6 <_ZN9Krabi2015C2Eb+0x48e>
   135d2:	6f3b      	ldr	r3, [r7, #112]
   135d4:	677b      	str	r3, [r7, #116]
   135d6:	6f7b      	ldr	r3, [r7, #116]
   135d8:	f8c7 3528 	str.w	r3, [r7, #1320]
    Etape* etape6 = new Etape(Position(2500, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   135dc:	f507 720e 	add.w	r2, r7, #568	; 0x238
   135e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   135e4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   135e8:	781b      	ldrb	r3, [r3, #0]
   135ea:	4610      	mov	r0, r2
   135ec:	f8df 182c 	ldr.w	r1, [pc, #2092]	; 13e1c <_ZN9Krabi2015C2Eb+0xcd4>
   135f0:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 13e10 <_ZN9Krabi2015C2Eb+0xcc8>
   135f4:	f7fb fbe2 	bl	edbc <_ZN8PositionC1Effb>
   135f8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   135fc:	67bb      	str	r3, [r7, #120]
   135fe:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13602:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13606:	f8c7 3510 	str.w	r3, [r7, #1296]
   1360a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1360e:	f7fb fa6f 	bl	eaf0 <_Znwj>
   13612:	4603      	mov	r3, r0
   13614:	67fb      	str	r3, [r7, #124]
   13616:	6ffb      	ldr	r3, [r7, #124]
   13618:	2b00      	cmp	r3, #0
   1361a:	d018      	beq.n	1364e <_ZN9Krabi2015C2Eb+0x506>
   1361c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13620:	681b      	ldr	r3, [r3, #0]
   13622:	6b5b      	ldr	r3, [r3, #52]
   13624:	f507 720e 	add.w	r2, r7, #568	; 0x238
   13628:	9300      	str	r3, [sp, #0]
   1362a:	f04f 0311 	mov.w	r3, #17	; 0x11
   1362e:	9301      	str	r3, [sp, #4]
   13630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13634:	9302      	str	r3, [sp, #8]
   13636:	f04f 0300 	mov.w	r3, #0	; 0x0
   1363a:	9303      	str	r3, [sp, #12]
   1363c:	6ff8      	ldr	r0, [r7, #124]
   1363e:	ca06      	ldmia	r2!, {r1, r2}
   13640:	6fbb      	ldr	r3, [r7, #120]
   13642:	f7fd fa59 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13646:	6ffb      	ldr	r3, [r7, #124]
   13648:	f8c7 3080 	str.w	r3, [r7, #128]
   1364c:	e002      	b.n	13654 <_ZN9Krabi2015C2Eb+0x50c>
   1364e:	6ffb      	ldr	r3, [r7, #124]
   13650:	f8c7 3080 	str.w	r3, [r7, #128]
   13654:	f8d7 3080 	ldr.w	r3, [r7, #128]
   13658:	f8c7 352c 	str.w	r3, [r7, #1324]
    Etape* etape7 = new Etape(Position(2300, 1780, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1365c:	f507 7210 	add.w	r2, r7, #576	; 0x240
   13660:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13664:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13668:	781b      	ldrb	r3, [r3, #0]
   1366a:	4610      	mov	r0, r2
   1366c:	f8df 17b0 	ldr.w	r1, [pc, #1968]	; 13e20 <_ZN9Krabi2015C2Eb+0xcd8>
   13670:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 13e10 <_ZN9Krabi2015C2Eb+0xcc8>
   13674:	f7fb fba2 	bl	edbc <_ZN8PositionC1Effb>
   13678:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1367c:	f8c7 3084 	str.w	r3, [r7, #132]
   13680:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13684:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13688:	f8c7 3510 	str.w	r3, [r7, #1296]
   1368c:	f04f 0034 	mov.w	r0, #52	; 0x34
   13690:	f7fb fa2e 	bl	eaf0 <_Znwj>
   13694:	4603      	mov	r3, r0
   13696:	f8c7 3088 	str.w	r3, [r7, #136]
   1369a:	f8d7 3088 	ldr.w	r3, [r7, #136]
   1369e:	2b00      	cmp	r3, #0
   136a0:	d01b      	beq.n	136da <_ZN9Krabi2015C2Eb+0x592>
   136a2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   136a6:	681b      	ldr	r3, [r3, #0]
   136a8:	6b5b      	ldr	r3, [r3, #52]
   136aa:	f507 7210 	add.w	r2, r7, #576	; 0x240
   136ae:	9300      	str	r3, [sp, #0]
   136b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   136b4:	9301      	str	r3, [sp, #4]
   136b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136ba:	9302      	str	r3, [sp, #8]
   136bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   136c0:	9303      	str	r3, [sp, #12]
   136c2:	f8d7 0088 	ldr.w	r0, [r7, #136]
   136c6:	ca06      	ldmia	r2!, {r1, r2}
   136c8:	f8d7 3084 	ldr.w	r3, [r7, #132]
   136cc:	f7fd fa14 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   136d0:	f8d7 3088 	ldr.w	r3, [r7, #136]
   136d4:	f8c7 308c 	str.w	r3, [r7, #140]
   136d8:	e003      	b.n	136e2 <_ZN9Krabi2015C2Eb+0x59a>
   136da:	f8d7 3088 	ldr.w	r3, [r7, #136]
   136de:	f8c7 308c 	str.w	r3, [r7, #140]
   136e2:	f8d7 308c 	ldr.w	r3, [r7, #140]
   136e6:	f8c7 3530 	str.w	r3, [r7, #1328]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   136ea:	f507 7212 	add.w	r2, r7, #584	; 0x248
   136ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
   136f2:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   136f6:	781b      	ldrb	r3, [r3, #0]
   136f8:	4610      	mov	r0, r2
   136fa:	f8df 1704 	ldr.w	r1, [pc, #1796]	; 13e00 <_ZN9Krabi2015C2Eb+0xcb8>
   136fe:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 13e24 <_ZN9Krabi2015C2Eb+0xcdc>
   13702:	f7fb fb5b 	bl	edbc <_ZN8PositionC1Effb>
   13706:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1370a:	f8c7 3090 	str.w	r3, [r7, #144]
   1370e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13712:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13716:	f8c7 3510 	str.w	r3, [r7, #1296]
   1371a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1371e:	f7fb f9e7 	bl	eaf0 <_Znwj>
   13722:	4603      	mov	r3, r0
   13724:	f8c7 3094 	str.w	r3, [r7, #148]
   13728:	f8d7 3094 	ldr.w	r3, [r7, #148]
   1372c:	2b00      	cmp	r3, #0
   1372e:	d01b      	beq.n	13768 <_ZN9Krabi2015C2Eb+0x620>
   13730:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13734:	681b      	ldr	r3, [r3, #0]
   13736:	6b5b      	ldr	r3, [r3, #52]
   13738:	f507 7212 	add.w	r2, r7, #584	; 0x248
   1373c:	9300      	str	r3, [sp, #0]
   1373e:	f04f 0312 	mov.w	r3, #18	; 0x12
   13742:	9301      	str	r3, [sp, #4]
   13744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13748:	9302      	str	r3, [sp, #8]
   1374a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1374e:	9303      	str	r3, [sp, #12]
   13750:	f8d7 0094 	ldr.w	r0, [r7, #148]
   13754:	ca06      	ldmia	r2!, {r1, r2}
   13756:	f8d7 3090 	ldr.w	r3, [r7, #144]
   1375a:	f7fd f9cd 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1375e:	f8d7 3094 	ldr.w	r3, [r7, #148]
   13762:	f8c7 3098 	str.w	r3, [r7, #152]
   13766:	e003      	b.n	13770 <_ZN9Krabi2015C2Eb+0x628>
   13768:	f8d7 3094 	ldr.w	r3, [r7, #148]
   1376c:	f8c7 3098 	str.w	r3, [r7, #152]
   13770:	f8d7 3098 	ldr.w	r3, [r7, #152]
   13774:	f8c7 3534 	str.w	r3, [r7, #1332]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   13778:	f507 7214 	add.w	r2, r7, #592	; 0x250
   1377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13780:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13784:	781b      	ldrb	r3, [r3, #0]
   13786:	4610      	mov	r0, r2
   13788:	f8df 169c 	ldr.w	r1, [pc, #1692]	; 13e28 <_ZN9Krabi2015C2Eb+0xce0>
   1378c:	f8df 269c 	ldr.w	r2, [pc, #1692]	; 13e2c <_ZN9Krabi2015C2Eb+0xce4>
   13790:	f7fb fb14 	bl	edbc <_ZN8PositionC1Effb>
   13794:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13798:	f8c7 309c 	str.w	r3, [r7, #156]
   1379c:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   137a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   137a4:	f8c7 3510 	str.w	r3, [r7, #1296]
   137a8:	f04f 0034 	mov.w	r0, #52	; 0x34
   137ac:	f7fb f9a0 	bl	eaf0 <_Znwj>
   137b0:	4603      	mov	r3, r0
   137b2:	f8c7 30a0 	str.w	r3, [r7, #160]
   137b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   137ba:	2b00      	cmp	r3, #0
   137bc:	d01b      	beq.n	137f6 <_ZN9Krabi2015C2Eb+0x6ae>
   137be:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   137c2:	681b      	ldr	r3, [r3, #0]
   137c4:	6b5b      	ldr	r3, [r3, #52]
   137c6:	f507 7214 	add.w	r2, r7, #592	; 0x250
   137ca:	9300      	str	r3, [sp, #0]
   137cc:	f04f 0312 	mov.w	r3, #18	; 0x12
   137d0:	9301      	str	r3, [sp, #4]
   137d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   137d6:	9302      	str	r3, [sp, #8]
   137d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   137dc:	9303      	str	r3, [sp, #12]
   137de:	f8d7 00a0 	ldr.w	r0, [r7, #160]
   137e2:	ca06      	ldmia	r2!, {r1, r2}
   137e4:	f8d7 309c 	ldr.w	r3, [r7, #156]
   137e8:	f7fd f986 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   137ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   137f0:	f8c7 30a4 	str.w	r3, [r7, #164]
   137f4:	e003      	b.n	137fe <_ZN9Krabi2015C2Eb+0x6b6>
   137f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   137fa:	f8c7 30a4 	str.w	r3, [r7, #164]
   137fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   13802:	f8c7 3538 	str.w	r3, [r7, #1336]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   13806:	f507 7216 	add.w	r2, r7, #600	; 0x258
   1380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1380e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13812:	781b      	ldrb	r3, [r3, #0]
   13814:	4610      	mov	r0, r2
   13816:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 13e30 <_ZN9Krabi2015C2Eb+0xce8>
   1381a:	f8df 2618 	ldr.w	r2, [pc, #1560]	; 13e34 <_ZN9Krabi2015C2Eb+0xcec>
   1381e:	f7fb facd 	bl	edbc <_ZN8PositionC1Effb>
   13822:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13826:	f8c7 30a8 	str.w	r3, [r7, #168]
   1382a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1382e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13832:	f8c7 3510 	str.w	r3, [r7, #1296]
   13836:	f04f 0034 	mov.w	r0, #52	; 0x34
   1383a:	f7fb f959 	bl	eaf0 <_Znwj>
   1383e:	4603      	mov	r3, r0
   13840:	f8c7 30ac 	str.w	r3, [r7, #172]
   13844:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   13848:	2b00      	cmp	r3, #0
   1384a:	d01b      	beq.n	13884 <_ZN9Krabi2015C2Eb+0x73c>
   1384c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13850:	681b      	ldr	r3, [r3, #0]
   13852:	6b5b      	ldr	r3, [r3, #52]
   13854:	f507 7216 	add.w	r2, r7, #600	; 0x258
   13858:	9300      	str	r3, [sp, #0]
   1385a:	f04f 0312 	mov.w	r3, #18	; 0x12
   1385e:	9301      	str	r3, [sp, #4]
   13860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13864:	9302      	str	r3, [sp, #8]
   13866:	f04f 0300 	mov.w	r3, #0	; 0x0
   1386a:	9303      	str	r3, [sp, #12]
   1386c:	f8d7 00ac 	ldr.w	r0, [r7, #172]
   13870:	ca06      	ldmia	r2!, {r1, r2}
   13872:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   13876:	f7fd f93f 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1387a:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   1387e:	f8c7 30b0 	str.w	r3, [r7, #176]
   13882:	e003      	b.n	1388c <_ZN9Krabi2015C2Eb+0x744>
   13884:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   13888:	f8c7 30b0 	str.w	r3, [r7, #176]
   1388c:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   13890:	f8c7 353c 	str.w	r3, [r7, #1340]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   13894:	f507 7218 	add.w	r2, r7, #608	; 0x260
   13898:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1389c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   138a0:	781b      	ldrb	r3, [r3, #0]
   138a2:	4610      	mov	r0, r2
   138a4:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 13e38 <_ZN9Krabi2015C2Eb+0xcf0>
   138a8:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 13e2c <_ZN9Krabi2015C2Eb+0xce4>
   138ac:	f7fb fa86 	bl	edbc <_ZN8PositionC1Effb>
   138b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   138b4:	f8c7 30b4 	str.w	r3, [r7, #180]
   138b8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   138bc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   138c0:	f8c7 3510 	str.w	r3, [r7, #1296]
   138c4:	f04f 0034 	mov.w	r0, #52	; 0x34
   138c8:	f7fb f912 	bl	eaf0 <_Znwj>
   138cc:	4603      	mov	r3, r0
   138ce:	f8c7 30b8 	str.w	r3, [r7, #184]
   138d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   138d6:	2b00      	cmp	r3, #0
   138d8:	d01b      	beq.n	13912 <_ZN9Krabi2015C2Eb+0x7ca>
   138da:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   138de:	681b      	ldr	r3, [r3, #0]
   138e0:	6b5b      	ldr	r3, [r3, #52]
   138e2:	f507 7218 	add.w	r2, r7, #608	; 0x260
   138e6:	9300      	str	r3, [sp, #0]
   138e8:	f04f 0312 	mov.w	r3, #18	; 0x12
   138ec:	9301      	str	r3, [sp, #4]
   138ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   138f2:	9302      	str	r3, [sp, #8]
   138f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   138f8:	9303      	str	r3, [sp, #12]
   138fa:	f8d7 00b8 	ldr.w	r0, [r7, #184]
   138fe:	ca06      	ldmia	r2!, {r1, r2}
   13900:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   13904:	f7fd f8f8 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13908:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   1390c:	f8c7 30bc 	str.w	r3, [r7, #188]
   13910:	e003      	b.n	1391a <_ZN9Krabi2015C2Eb+0x7d2>
   13912:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   13916:	f8c7 30bc 	str.w	r3, [r7, #188]
   1391a:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   1391e:	f8c7 3540 	str.w	r3, [r7, #1344]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   13922:	f507 721a 	add.w	r2, r7, #616	; 0x268
   13926:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1392a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1392e:	781b      	ldrb	r3, [r3, #0]
   13930:	4610      	mov	r0, r2
   13932:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 13e3c <_ZN9Krabi2015C2Eb+0xcf4>
   13936:	f8df 24ec 	ldr.w	r2, [pc, #1260]	; 13e24 <_ZN9Krabi2015C2Eb+0xcdc>
   1393a:	f7fb fa3f 	bl	edbc <_ZN8PositionC1Effb>
   1393e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13942:	f8c7 30c0 	str.w	r3, [r7, #192]
   13946:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1394a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1394e:	f8c7 3510 	str.w	r3, [r7, #1296]
   13952:	f04f 0034 	mov.w	r0, #52	; 0x34
   13956:	f7fb f8cb 	bl	eaf0 <_Znwj>
   1395a:	4603      	mov	r3, r0
   1395c:	f8c7 30c4 	str.w	r3, [r7, #196]
   13960:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   13964:	2b00      	cmp	r3, #0
   13966:	d01b      	beq.n	139a0 <_ZN9Krabi2015C2Eb+0x858>
   13968:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1396c:	681b      	ldr	r3, [r3, #0]
   1396e:	6b5b      	ldr	r3, [r3, #52]
   13970:	f507 721a 	add.w	r2, r7, #616	; 0x268
   13974:	9300      	str	r3, [sp, #0]
   13976:	f04f 0312 	mov.w	r3, #18	; 0x12
   1397a:	9301      	str	r3, [sp, #4]
   1397c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13980:	9302      	str	r3, [sp, #8]
   13982:	f04f 0300 	mov.w	r3, #0	; 0x0
   13986:	9303      	str	r3, [sp, #12]
   13988:	f8d7 00c4 	ldr.w	r0, [r7, #196]
   1398c:	ca06      	ldmia	r2!, {r1, r2}
   1398e:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   13992:	f7fd f8b1 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13996:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   1399a:	f8c7 30c8 	str.w	r3, [r7, #200]
   1399e:	e003      	b.n	139a8 <_ZN9Krabi2015C2Eb+0x860>
   139a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   139a4:	f8c7 30c8 	str.w	r3, [r7, #200]
   139a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   139ac:	f8c7 3544 	str.w	r3, [r7, #1348]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   139b0:	f507 721c 	add.w	r2, r7, #624	; 0x270
   139b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   139b8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   139bc:	781b      	ldrb	r3, [r3, #0]
   139be:	4610      	mov	r0, r2
   139c0:	f8df 147c 	ldr.w	r1, [pc, #1148]	; 13e40 <_ZN9Krabi2015C2Eb+0xcf8>
   139c4:	f8df 245c 	ldr.w	r2, [pc, #1116]	; 13e24 <_ZN9Krabi2015C2Eb+0xcdc>
   139c8:	f7fb f9f8 	bl	edbc <_ZN8PositionC1Effb>
   139cc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   139d0:	f8c7 30cc 	str.w	r3, [r7, #204]
   139d4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   139d8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   139dc:	f8c7 3510 	str.w	r3, [r7, #1296]
   139e0:	f04f 0034 	mov.w	r0, #52	; 0x34
   139e4:	f7fb f884 	bl	eaf0 <_Znwj>
   139e8:	4603      	mov	r3, r0
   139ea:	f8c7 30d0 	str.w	r3, [r7, #208]
   139ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   139f2:	2b00      	cmp	r3, #0
   139f4:	d01b      	beq.n	13a2e <_ZN9Krabi2015C2Eb+0x8e6>
   139f6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   139fa:	681b      	ldr	r3, [r3, #0]
   139fc:	6b5b      	ldr	r3, [r3, #52]
   139fe:	f507 721c 	add.w	r2, r7, #624	; 0x270
   13a02:	9300      	str	r3, [sp, #0]
   13a04:	f04f 0313 	mov.w	r3, #19	; 0x13
   13a08:	9301      	str	r3, [sp, #4]
   13a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a0e:	9302      	str	r3, [sp, #8]
   13a10:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a14:	9303      	str	r3, [sp, #12]
   13a16:	f8d7 00d0 	ldr.w	r0, [r7, #208]
   13a1a:	ca06      	ldmia	r2!, {r1, r2}
   13a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   13a20:	f7fd f86a 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13a24:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   13a28:	f8c7 30d4 	str.w	r3, [r7, #212]
   13a2c:	e003      	b.n	13a36 <_ZN9Krabi2015C2Eb+0x8ee>
   13a2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   13a32:	f8c7 30d4 	str.w	r3, [r7, #212]
   13a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   13a3a:	f8c7 3548 	str.w	r3, [r7, #1352]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13a3e:	f507 721e 	add.w	r2, r7, #632	; 0x278
   13a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13a46:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13a4a:	781b      	ldrb	r3, [r3, #0]
   13a4c:	4610      	mov	r0, r2
   13a4e:	49fc      	ldr	r1, [pc, #1008]	(13e40 <_ZN9Krabi2015C2Eb+0xcf8>)
   13a50:	4afc      	ldr	r2, [pc, #1008]	(13e44 <_ZN9Krabi2015C2Eb+0xcfc>)
   13a52:	f7fb f9b3 	bl	edbc <_ZN8PositionC1Effb>
   13a56:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13a5a:	f8c7 30d8 	str.w	r3, [r7, #216]
   13a5e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13a62:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13a66:	f8c7 3510 	str.w	r3, [r7, #1296]
   13a6a:	f04f 0034 	mov.w	r0, #52	; 0x34
   13a6e:	f7fb f83f 	bl	eaf0 <_Znwj>
   13a72:	4603      	mov	r3, r0
   13a74:	f8c7 30dc 	str.w	r3, [r7, #220]
   13a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   13a7c:	2b00      	cmp	r3, #0
   13a7e:	d01b      	beq.n	13ab8 <_ZN9Krabi2015C2Eb+0x970>
   13a80:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13a84:	681b      	ldr	r3, [r3, #0]
   13a86:	6b5b      	ldr	r3, [r3, #52]
   13a88:	f507 721e 	add.w	r2, r7, #632	; 0x278
   13a8c:	9300      	str	r3, [sp, #0]
   13a8e:	f04f 0313 	mov.w	r3, #19	; 0x13
   13a92:	9301      	str	r3, [sp, #4]
   13a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13a98:	9302      	str	r3, [sp, #8]
   13a9a:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a9e:	9303      	str	r3, [sp, #12]
   13aa0:	f8d7 00dc 	ldr.w	r0, [r7, #220]
   13aa4:	ca06      	ldmia	r2!, {r1, r2}
   13aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   13aaa:	f7fd f825 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   13ab2:	f8c7 30e0 	str.w	r3, [r7, #224]
   13ab6:	e003      	b.n	13ac0 <_ZN9Krabi2015C2Eb+0x978>
   13ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   13abc:	f8c7 30e0 	str.w	r3, [r7, #224]
   13ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   13ac4:	f8c7 354c 	str.w	r3, [r7, #1356]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13ac8:	f507 7220 	add.w	r2, r7, #640	; 0x280
   13acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13ad0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13ad4:	781b      	ldrb	r3, [r3, #0]
   13ad6:	4610      	mov	r0, r2
   13ad8:	49d9      	ldr	r1, [pc, #868]	(13e40 <_ZN9Krabi2015C2Eb+0xcf8>)
   13ada:	4adb      	ldr	r2, [pc, #876]	(13e48 <_ZN9Krabi2015C2Eb+0xd00>)
   13adc:	f7fb f96e 	bl	edbc <_ZN8PositionC1Effb>
   13ae0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ae4:	f8c7 30e4 	str.w	r3, [r7, #228]
   13ae8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13aec:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13af0:	f8c7 3510 	str.w	r3, [r7, #1296]
   13af4:	f04f 0034 	mov.w	r0, #52	; 0x34
   13af8:	f7fa fffa 	bl	eaf0 <_Znwj>
   13afc:	4603      	mov	r3, r0
   13afe:	f8c7 30e8 	str.w	r3, [r7, #232]
   13b02:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   13b06:	2b00      	cmp	r3, #0
   13b08:	d01b      	beq.n	13b42 <_ZN9Krabi2015C2Eb+0x9fa>
   13b0a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13b0e:	681b      	ldr	r3, [r3, #0]
   13b10:	6b5b      	ldr	r3, [r3, #52]
   13b12:	f507 7220 	add.w	r2, r7, #640	; 0x280
   13b16:	9300      	str	r3, [sp, #0]
   13b18:	f04f 0313 	mov.w	r3, #19	; 0x13
   13b1c:	9301      	str	r3, [sp, #4]
   13b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13b22:	9302      	str	r3, [sp, #8]
   13b24:	f04f 0300 	mov.w	r3, #0	; 0x0
   13b28:	9303      	str	r3, [sp, #12]
   13b2a:	f8d7 00e8 	ldr.w	r0, [r7, #232]
   13b2e:	ca06      	ldmia	r2!, {r1, r2}
   13b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   13b34:	f7fc ffe0 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   13b3c:	f8c7 30ec 	str.w	r3, [r7, #236]
   13b40:	e003      	b.n	13b4a <_ZN9Krabi2015C2Eb+0xa02>
   13b42:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   13b46:	f8c7 30ec 	str.w	r3, [r7, #236]
   13b4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   13b4e:	f8c7 3550 	str.w	r3, [r7, #1360]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13b52:	f507 7222 	add.w	r2, r7, #648	; 0x288
   13b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13b5a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13b5e:	781b      	ldrb	r3, [r3, #0]
   13b60:	4610      	mov	r0, r2
   13b62:	49ba      	ldr	r1, [pc, #744]	(13e4c <_ZN9Krabi2015C2Eb+0xd04>)
   13b64:	4aba      	ldr	r2, [pc, #744]	(13e50 <_ZN9Krabi2015C2Eb+0xd08>)
   13b66:	f7fb f929 	bl	edbc <_ZN8PositionC1Effb>
   13b6a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13b6e:	f8c7 30f0 	str.w	r3, [r7, #240]
   13b72:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13b76:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13b7a:	f8c7 3510 	str.w	r3, [r7, #1296]
   13b7e:	f04f 0034 	mov.w	r0, #52	; 0x34
   13b82:	f7fa ffb5 	bl	eaf0 <_Znwj>
   13b86:	4603      	mov	r3, r0
   13b88:	f8c7 30f4 	str.w	r3, [r7, #244]
   13b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13b90:	2b00      	cmp	r3, #0
   13b92:	d01b      	beq.n	13bcc <_ZN9Krabi2015C2Eb+0xa84>
   13b94:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13b98:	681b      	ldr	r3, [r3, #0]
   13b9a:	6b5b      	ldr	r3, [r3, #52]
   13b9c:	f507 7222 	add.w	r2, r7, #648	; 0x288
   13ba0:	9300      	str	r3, [sp, #0]
   13ba2:	f04f 0313 	mov.w	r3, #19	; 0x13
   13ba6:	9301      	str	r3, [sp, #4]
   13ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bac:	9302      	str	r3, [sp, #8]
   13bae:	f04f 0300 	mov.w	r3, #0	; 0x0
   13bb2:	9303      	str	r3, [sp, #12]
   13bb4:	f8d7 00f4 	ldr.w	r0, [r7, #244]
   13bb8:	ca06      	ldmia	r2!, {r1, r2}
   13bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   13bbe:	f7fc ff9b 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13bc6:	f8c7 30f8 	str.w	r3, [r7, #248]
   13bca:	e003      	b.n	13bd4 <_ZN9Krabi2015C2Eb+0xa8c>
   13bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   13bd0:	f8c7 30f8 	str.w	r3, [r7, #248]
   13bd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   13bd8:	f8c7 3554 	str.w	r3, [r7, #1364]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13bdc:	f507 7224 	add.w	r2, r7, #656	; 0x290
   13be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13be4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13be8:	781b      	ldrb	r3, [r3, #0]
   13bea:	4610      	mov	r0, r2
   13bec:	4997      	ldr	r1, [pc, #604]	(13e4c <_ZN9Krabi2015C2Eb+0xd04>)
   13bee:	4a96      	ldr	r2, [pc, #600]	(13e48 <_ZN9Krabi2015C2Eb+0xd00>)
   13bf0:	f7fb f8e4 	bl	edbc <_ZN8PositionC1Effb>
   13bf4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13bf8:	f8c7 30fc 	str.w	r3, [r7, #252]
   13bfc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c00:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13c04:	f8c7 3510 	str.w	r3, [r7, #1296]
   13c08:	f04f 0034 	mov.w	r0, #52	; 0x34
   13c0c:	f7fa ff70 	bl	eaf0 <_Znwj>
   13c10:	4603      	mov	r3, r0
   13c12:	f8c7 3100 	str.w	r3, [r7, #256]
   13c16:	f8d7 3100 	ldr.w	r3, [r7, #256]
   13c1a:	2b00      	cmp	r3, #0
   13c1c:	d01b      	beq.n	13c56 <_ZN9Krabi2015C2Eb+0xb0e>
   13c1e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13c22:	681b      	ldr	r3, [r3, #0]
   13c24:	6b5b      	ldr	r3, [r3, #52]
   13c26:	f507 7224 	add.w	r2, r7, #656	; 0x290
   13c2a:	9300      	str	r3, [sp, #0]
   13c2c:	f04f 0313 	mov.w	r3, #19	; 0x13
   13c30:	9301      	str	r3, [sp, #4]
   13c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13c36:	9302      	str	r3, [sp, #8]
   13c38:	f04f 0300 	mov.w	r3, #0	; 0x0
   13c3c:	9303      	str	r3, [sp, #12]
   13c3e:	f8d7 0100 	ldr.w	r0, [r7, #256]
   13c42:	ca06      	ldmia	r2!, {r1, r2}
   13c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   13c48:	f7fc ff56 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13c4c:	f8d7 3100 	ldr.w	r3, [r7, #256]
   13c50:	f8c7 3104 	str.w	r3, [r7, #260]
   13c54:	e003      	b.n	13c5e <_ZN9Krabi2015C2Eb+0xb16>
   13c56:	f8d7 3100 	ldr.w	r3, [r7, #256]
   13c5a:	f8c7 3104 	str.w	r3, [r7, #260]
   13c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]
   13c62:	f8c7 3558 	str.w	r3, [r7, #1368]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13c66:	f507 7226 	add.w	r2, r7, #664	; 0x298
   13c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13c6e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13c72:	781b      	ldrb	r3, [r3, #0]
   13c74:	4610      	mov	r0, r2
   13c76:	4977      	ldr	r1, [pc, #476]	(13e54 <_ZN9Krabi2015C2Eb+0xd0c>)
   13c78:	4a77      	ldr	r2, [pc, #476]	(13e58 <_ZN9Krabi2015C2Eb+0xd10>)
   13c7a:	f7fb f89f 	bl	edbc <_ZN8PositionC1Effb>
   13c7e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c82:	f8c7 3108 	str.w	r3, [r7, #264]
   13c86:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13c8a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13c8e:	f8c7 3510 	str.w	r3, [r7, #1296]
   13c92:	f04f 0034 	mov.w	r0, #52	; 0x34
   13c96:	f7fa ff2b 	bl	eaf0 <_Znwj>
   13c9a:	4603      	mov	r3, r0
   13c9c:	f8c7 310c 	str.w	r3, [r7, #268]
   13ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]
   13ca4:	2b00      	cmp	r3, #0
   13ca6:	d01b      	beq.n	13ce0 <_ZN9Krabi2015C2Eb+0xb98>
   13ca8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13cac:	681b      	ldr	r3, [r3, #0]
   13cae:	6b5b      	ldr	r3, [r3, #52]
   13cb0:	f507 7226 	add.w	r2, r7, #664	; 0x298
   13cb4:	9300      	str	r3, [sp, #0]
   13cb6:	f04f 0313 	mov.w	r3, #19	; 0x13
   13cba:	9301      	str	r3, [sp, #4]
   13cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13cc0:	9302      	str	r3, [sp, #8]
   13cc2:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cc6:	9303      	str	r3, [sp, #12]
   13cc8:	f8d7 010c 	ldr.w	r0, [r7, #268]
   13ccc:	ca06      	ldmia	r2!, {r1, r2}
   13cce:	f8d7 3108 	ldr.w	r3, [r7, #264]
   13cd2:	f7fc ff11 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]
   13cda:	f8c7 3110 	str.w	r3, [r7, #272]
   13cde:	e003      	b.n	13ce8 <_ZN9Krabi2015C2Eb+0xba0>
   13ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]
   13ce4:	f8c7 3110 	str.w	r3, [r7, #272]
   13ce8:	f8d7 3110 	ldr.w	r3, [r7, #272]
   13cec:	f8c7 355c 	str.w	r3, [r7, #1372]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13cf0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   13cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13cf8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13cfc:	781b      	ldrb	r3, [r3, #0]
   13cfe:	4610      	mov	r0, r2
   13d00:	4956      	ldr	r1, [pc, #344]	(13e5c <_ZN9Krabi2015C2Eb+0xd14>)
   13d02:	4a57      	ldr	r2, [pc, #348]	(13e60 <_ZN9Krabi2015C2Eb+0xd18>)
   13d04:	f7fb f85a 	bl	edbc <_ZN8PositionC1Effb>
   13d08:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d0c:	f8c7 3114 	str.w	r3, [r7, #276]
   13d10:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d14:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13d18:	f8c7 3510 	str.w	r3, [r7, #1296]
   13d1c:	f04f 0034 	mov.w	r0, #52	; 0x34
   13d20:	f7fa fee6 	bl	eaf0 <_Znwj>
   13d24:	4603      	mov	r3, r0
   13d26:	f8c7 3118 	str.w	r3, [r7, #280]
   13d2a:	f8d7 3118 	ldr.w	r3, [r7, #280]
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d01b      	beq.n	13d6a <_ZN9Krabi2015C2Eb+0xc22>
   13d32:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13d36:	681b      	ldr	r3, [r3, #0]
   13d38:	6b5b      	ldr	r3, [r3, #52]
   13d3a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   13d3e:	9300      	str	r3, [sp, #0]
   13d40:	f04f 0313 	mov.w	r3, #19	; 0x13
   13d44:	9301      	str	r3, [sp, #4]
   13d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d4a:	9302      	str	r3, [sp, #8]
   13d4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13d50:	9303      	str	r3, [sp, #12]
   13d52:	f8d7 0118 	ldr.w	r0, [r7, #280]
   13d56:	ca06      	ldmia	r2!, {r1, r2}
   13d58:	f8d7 3114 	ldr.w	r3, [r7, #276]
   13d5c:	f7fc fecc 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13d60:	f8d7 3118 	ldr.w	r3, [r7, #280]
   13d64:	f8c7 311c 	str.w	r3, [r7, #284]
   13d68:	e003      	b.n	13d72 <_ZN9Krabi2015C2Eb+0xc2a>
   13d6a:	f8d7 3118 	ldr.w	r3, [r7, #280]
   13d6e:	f8c7 311c 	str.w	r3, [r7, #284]
   13d72:	f8d7 311c 	ldr.w	r3, [r7, #284]
   13d76:	f8c7 3560 	str.w	r3, [r7, #1376]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   13d7a:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   13d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13d82:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13d86:	781b      	ldrb	r3, [r3, #0]
   13d88:	4610      	mov	r0, r2
   13d8a:	4936      	ldr	r1, [pc, #216]	(13e64 <_ZN9Krabi2015C2Eb+0xd1c>)
   13d8c:	4a36      	ldr	r2, [pc, #216]	(13e68 <_ZN9Krabi2015C2Eb+0xd20>)
   13d8e:	f7fb f815 	bl	edbc <_ZN8PositionC1Effb>
   13d92:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d96:	f8c7 3120 	str.w	r3, [r7, #288]
   13d9a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13d9e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13da2:	f8c7 3510 	str.w	r3, [r7, #1296]
   13da6:	f04f 0034 	mov.w	r0, #52	; 0x34
   13daa:	f7fa fea1 	bl	eaf0 <_Znwj>
   13dae:	4603      	mov	r3, r0
   13db0:	f8c7 3124 	str.w	r3, [r7, #292]
   13db4:	f8d7 3124 	ldr.w	r3, [r7, #292]
   13db8:	2b00      	cmp	r3, #0
   13dba:	d057      	beq.n	13e6c <_ZN9Krabi2015C2Eb+0xd24>
   13dbc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13dc0:	681b      	ldr	r3, [r3, #0]
   13dc2:	6b5b      	ldr	r3, [r3, #52]
   13dc4:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
   13dc8:	9300      	str	r3, [sp, #0]
   13dca:	f04f 0313 	mov.w	r3, #19	; 0x13
   13dce:	9301      	str	r3, [sp, #4]
   13dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13dd4:	9302      	str	r3, [sp, #8]
   13dd6:	f04f 0300 	mov.w	r3, #0	; 0x0
   13dda:	9303      	str	r3, [sp, #12]
   13ddc:	f8d7 0124 	ldr.w	r0, [r7, #292]
   13de0:	ca06      	ldmia	r2!, {r1, r2}
   13de2:	f8d7 3120 	ldr.w	r3, [r7, #288]
   13de6:	f7fc fe87 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13dea:	f8d7 3124 	ldr.w	r3, [r7, #292]
   13dee:	f8c7 3128 	str.w	r3, [r7, #296]
   13df2:	e03f      	b.n	13e74 <_ZN9Krabi2015C2Eb+0xd2c>
   13df4:	00022418 	.word	0x00022418
   13df8:	00000000 	.word	0x00000000
   13dfc:	41f00000 	.word	0x41f00000
   13e00:	437a0000 	.word	0x437a0000
   13e04:	447a0000 	.word	0x447a0000
   13e08:	442f0000 	.word	0x442f0000
   13e0c:	44510000 	.word	0x44510000
   13e10:	44de8000 	.word	0x44de8000
   13e14:	436c0000 	.word	0x436c0000
   13e18:	43c80000 	.word	0x43c80000
   13e1c:	451c4000 	.word	0x451c4000
   13e20:	450fc000 	.word	0x450fc000
   13e24:	44dac000 	.word	0x44dac000
   13e28:	44638000 	.word	0x44638000
   13e2c:	444f8000 	.word	0x444f8000
   13e30:	44bb8000 	.word	0x44bb8000
   13e34:	44ce4000 	.word	0x44ce4000
   13e38:	4502a000 	.word	0x4502a000
   13e3c:	452be000 	.word	0x452be000
   13e40:	42b40000 	.word	0x42b40000
   13e44:	44e74000 	.word	0x44e74000
   13e48:	43480000 	.word	0x43480000
   13e4c:	44548000 	.word	0x44548000
   13e50:	42c80000 	.word	0x42c80000
   13e54:	44598000 	.word	0x44598000
   13e58:	44a96000 	.word	0x44a96000
   13e5c:	44898000 	.word	0x44898000
   13e60:	44dd4000 	.word	0x44dd4000
   13e64:	44a28000 	.word	0x44a28000
   13e68:	44af0000 	.word	0x44af0000
   13e6c:	f8d7 3124 	ldr.w	r3, [r7, #292]
   13e70:	f8c7 3128 	str.w	r3, [r7, #296]
   13e74:	f8d7 3128 	ldr.w	r3, [r7, #296]
   13e78:	f8c7 3564 	str.w	r3, [r7, #1380]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   13e7c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   13e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13e84:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13e88:	781b      	ldrb	r3, [r3, #0]
   13e8a:	4610      	mov	r0, r2
   13e8c:	f8df 194c 	ldr.w	r1, [pc, #2380]	; 147dc <_ZN9Krabi2015C2Eb+0x1694>
   13e90:	f8df 294c 	ldr.w	r2, [pc, #2380]	; 147e0 <_ZN9Krabi2015C2Eb+0x1698>
   13e94:	f7fa ff92 	bl	edbc <_ZN8PositionC1Effb>
   13e98:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13e9c:	f8c7 312c 	str.w	r3, [r7, #300]
   13ea0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13ea4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13ea8:	f8c7 3510 	str.w	r3, [r7, #1296]
   13eac:	f04f 0034 	mov.w	r0, #52	; 0x34
   13eb0:	f7fa fe1e 	bl	eaf0 <_Znwj>
   13eb4:	4603      	mov	r3, r0
   13eb6:	f8c7 3130 	str.w	r3, [r7, #304]
   13eba:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13ebe:	2b00      	cmp	r3, #0
   13ec0:	d01b      	beq.n	13efa <_ZN9Krabi2015C2Eb+0xdb2>
   13ec2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13ec6:	681b      	ldr	r3, [r3, #0]
   13ec8:	6b5b      	ldr	r3, [r3, #52]
   13eca:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
   13ece:	9300      	str	r3, [sp, #0]
   13ed0:	f04f 0314 	mov.w	r3, #20	; 0x14
   13ed4:	9301      	str	r3, [sp, #4]
   13ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13eda:	9302      	str	r3, [sp, #8]
   13edc:	f04f 0300 	mov.w	r3, #0	; 0x0
   13ee0:	9303      	str	r3, [sp, #12]
   13ee2:	f8d7 0130 	ldr.w	r0, [r7, #304]
   13ee6:	ca06      	ldmia	r2!, {r1, r2}
   13ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]
   13eec:	f7fc fe04 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13ef0:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13ef4:	f8c7 3134 	str.w	r3, [r7, #308]
   13ef8:	e003      	b.n	13f02 <_ZN9Krabi2015C2Eb+0xdba>
   13efa:	f8d7 3130 	ldr.w	r3, [r7, #304]
   13efe:	f8c7 3134 	str.w	r3, [r7, #308]
   13f02:	f8d7 3134 	ldr.w	r3, [r7, #308]
   13f06:	f8c7 3568 	str.w	r3, [r7, #1384]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   13f0a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   13f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13f12:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13f16:	781b      	ldrb	r3, [r3, #0]
   13f18:	4610      	mov	r0, r2
   13f1a:	f8df 18c8 	ldr.w	r1, [pc, #2248]	; 147e4 <_ZN9Krabi2015C2Eb+0x169c>
   13f1e:	f8df 28c0 	ldr.w	r2, [pc, #2240]	; 147e0 <_ZN9Krabi2015C2Eb+0x1698>
   13f22:	f7fa ff4b 	bl	edbc <_ZN8PositionC1Effb>
   13f26:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13f2a:	f8c7 3138 	str.w	r3, [r7, #312]
   13f2e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13f32:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13f36:	f8c7 3510 	str.w	r3, [r7, #1296]
   13f3a:	f04f 0034 	mov.w	r0, #52	; 0x34
   13f3e:	f7fa fdd7 	bl	eaf0 <_Znwj>
   13f42:	4603      	mov	r3, r0
   13f44:	f8c7 313c 	str.w	r3, [r7, #316]
   13f48:	f8d7 313c 	ldr.w	r3, [r7, #316]
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	d01b      	beq.n	13f88 <_ZN9Krabi2015C2Eb+0xe40>
   13f50:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13f54:	681b      	ldr	r3, [r3, #0]
   13f56:	6b5b      	ldr	r3, [r3, #52]
   13f58:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
   13f5c:	9300      	str	r3, [sp, #0]
   13f5e:	f04f 0314 	mov.w	r3, #20	; 0x14
   13f62:	9301      	str	r3, [sp, #4]
   13f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f68:	9302      	str	r3, [sp, #8]
   13f6a:	f04f 0300 	mov.w	r3, #0	; 0x0
   13f6e:	9303      	str	r3, [sp, #12]
   13f70:	f8d7 013c 	ldr.w	r0, [r7, #316]
   13f74:	ca06      	ldmia	r2!, {r1, r2}
   13f76:	f8d7 3138 	ldr.w	r3, [r7, #312]
   13f7a:	f7fc fdbd 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   13f7e:	f8d7 313c 	ldr.w	r3, [r7, #316]
   13f82:	f8c7 3140 	str.w	r3, [r7, #320]
   13f86:	e003      	b.n	13f90 <_ZN9Krabi2015C2Eb+0xe48>
   13f88:	f8d7 313c 	ldr.w	r3, [r7, #316]
   13f8c:	f8c7 3140 	str.w	r3, [r7, #320]
   13f90:	f8d7 3140 	ldr.w	r3, [r7, #320]
   13f94:	f8c7 356c 	str.w	r3, [r7, #1388]
    Etape* etape23 = new Etape(Position(1230, 760, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::TAPIS, -1, 0);
   13f98:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   13f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   13fa0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   13fa4:	781b      	ldrb	r3, [r3, #0]
   13fa6:	4610      	mov	r0, r2
   13fa8:	f8df 183c 	ldr.w	r1, [pc, #2108]	; 147e8 <_ZN9Krabi2015C2Eb+0x16a0>
   13fac:	f8df 283c 	ldr.w	r2, [pc, #2108]	; 147ec <_ZN9Krabi2015C2Eb+0x16a4>
   13fb0:	f7fa ff04 	bl	edbc <_ZN8PositionC1Effb>
   13fb4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13fb8:	f8c7 3144 	str.w	r3, [r7, #324]
   13fbc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   13fc0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13fc4:	f8c7 3510 	str.w	r3, [r7, #1296]
   13fc8:	f04f 0034 	mov.w	r0, #52	; 0x34
   13fcc:	f7fa fd90 	bl	eaf0 <_Znwj>
   13fd0:	4603      	mov	r3, r0
   13fd2:	f8c7 3148 	str.w	r3, [r7, #328]
   13fd6:	f8d7 3148 	ldr.w	r3, [r7, #328]
   13fda:	2b00      	cmp	r3, #0
   13fdc:	d01b      	beq.n	14016 <_ZN9Krabi2015C2Eb+0xece>
   13fde:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   13fe2:	681b      	ldr	r3, [r3, #0]
   13fe4:	6b5b      	ldr	r3, [r3, #52]
   13fe6:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
   13fea:	9300      	str	r3, [sp, #0]
   13fec:	f04f 0315 	mov.w	r3, #21	; 0x15
   13ff0:	9301      	str	r3, [sp, #4]
   13ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13ff6:	9302      	str	r3, [sp, #8]
   13ff8:	f04f 0300 	mov.w	r3, #0	; 0x0
   13ffc:	9303      	str	r3, [sp, #12]
   13ffe:	f8d7 0148 	ldr.w	r0, [r7, #328]
   14002:	ca06      	ldmia	r2!, {r1, r2}
   14004:	f8d7 3144 	ldr.w	r3, [r7, #324]
   14008:	f7fc fd76 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1400c:	f8d7 3148 	ldr.w	r3, [r7, #328]
   14010:	f8c7 314c 	str.w	r3, [r7, #332]
   14014:	e003      	b.n	1401e <_ZN9Krabi2015C2Eb+0xed6>
   14016:	f8d7 3148 	ldr.w	r3, [r7, #328]
   1401a:	f8c7 314c 	str.w	r3, [r7, #332]
   1401e:	f8d7 314c 	ldr.w	r3, [r7, #332]
   14022:	f8c7 3570 	str.w	r3, [r7, #1392]
    Etape* etape24 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14026:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   1402a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1402e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14032:	781b      	ldrb	r3, [r3, #0]
   14034:	4610      	mov	r0, r2
   14036:	f8df 17b8 	ldr.w	r1, [pc, #1976]	; 147f0 <_ZN9Krabi2015C2Eb+0x16a8>
   1403a:	f8df 27b8 	ldr.w	r2, [pc, #1976]	; 147f4 <_ZN9Krabi2015C2Eb+0x16ac>
   1403e:	f7fa febd 	bl	edbc <_ZN8PositionC1Effb>
   14042:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14046:	f8c7 3150 	str.w	r3, [r7, #336]
   1404a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1404e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14052:	f8c7 3510 	str.w	r3, [r7, #1296]
   14056:	f04f 0034 	mov.w	r0, #52	; 0x34
   1405a:	f7fa fd49 	bl	eaf0 <_Znwj>
   1405e:	4603      	mov	r3, r0
   14060:	f8c7 3154 	str.w	r3, [r7, #340]
   14064:	f8d7 3154 	ldr.w	r3, [r7, #340]
   14068:	2b00      	cmp	r3, #0
   1406a:	d01b      	beq.n	140a4 <_ZN9Krabi2015C2Eb+0xf5c>
   1406c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14070:	681b      	ldr	r3, [r3, #0]
   14072:	6b5b      	ldr	r3, [r3, #52]
   14074:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
   14078:	9300      	str	r3, [sp, #0]
   1407a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1407e:	9301      	str	r3, [sp, #4]
   14080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14084:	9302      	str	r3, [sp, #8]
   14086:	f04f 0300 	mov.w	r3, #0	; 0x0
   1408a:	9303      	str	r3, [sp, #12]
   1408c:	f8d7 0154 	ldr.w	r0, [r7, #340]
   14090:	ca06      	ldmia	r2!, {r1, r2}
   14092:	f8d7 3150 	ldr.w	r3, [r7, #336]
   14096:	f7fc fd2f 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1409a:	f8d7 3154 	ldr.w	r3, [r7, #340]
   1409e:	f8c7 3158 	str.w	r3, [r7, #344]
   140a2:	e003      	b.n	140ac <_ZN9Krabi2015C2Eb+0xf64>
   140a4:	f8d7 3154 	ldr.w	r3, [r7, #340]
   140a8:	f8c7 3158 	str.w	r3, [r7, #344]
   140ac:	f8d7 3158 	ldr.w	r3, [r7, #344]
   140b0:	f8c7 3574 	str.w	r3, [r7, #1396]
    Etape* etape25 = new Etape(Position(2710, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   140b4:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   140b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
   140bc:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   140c0:	781b      	ldrb	r3, [r3, #0]
   140c2:	4610      	mov	r0, r2
   140c4:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 147f8 <_ZN9Krabi2015C2Eb+0x16b0>
   140c8:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 147f4 <_ZN9Krabi2015C2Eb+0x16ac>
   140cc:	f7fa fe76 	bl	edbc <_ZN8PositionC1Effb>
   140d0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   140d4:	f8c7 315c 	str.w	r3, [r7, #348]
   140d8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   140dc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   140e0:	f8c7 3510 	str.w	r3, [r7, #1296]
   140e4:	f04f 0034 	mov.w	r0, #52	; 0x34
   140e8:	f7fa fd02 	bl	eaf0 <_Znwj>
   140ec:	4603      	mov	r3, r0
   140ee:	f8c7 3160 	str.w	r3, [r7, #352]
   140f2:	f8d7 3160 	ldr.w	r3, [r7, #352]
   140f6:	2b00      	cmp	r3, #0
   140f8:	d01b      	beq.n	14132 <_ZN9Krabi2015C2Eb+0xfea>
   140fa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   140fe:	681b      	ldr	r3, [r3, #0]
   14100:	6b5b      	ldr	r3, [r3, #52]
   14102:	f507 7234 	add.w	r2, r7, #720	; 0x2d0
   14106:	9300      	str	r3, [sp, #0]
   14108:	f04f 0300 	mov.w	r3, #0	; 0x0
   1410c:	9301      	str	r3, [sp, #4]
   1410e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14112:	9302      	str	r3, [sp, #8]
   14114:	f04f 0300 	mov.w	r3, #0	; 0x0
   14118:	9303      	str	r3, [sp, #12]
   1411a:	f8d7 0160 	ldr.w	r0, [r7, #352]
   1411e:	ca06      	ldmia	r2!, {r1, r2}
   14120:	f8d7 315c 	ldr.w	r3, [r7, #348]
   14124:	f7fc fce8 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14128:	f8d7 3160 	ldr.w	r3, [r7, #352]
   1412c:	f8c7 3164 	str.w	r3, [r7, #356]
   14130:	e003      	b.n	1413a <_ZN9Krabi2015C2Eb+0xff2>
   14132:	f8d7 3160 	ldr.w	r3, [r7, #352]
   14136:	f8c7 3164 	str.w	r3, [r7, #356]
   1413a:	f8d7 3164 	ldr.w	r3, [r7, #356]
   1413e:	f8c7 3578 	str.w	r3, [r7, #1400]
    Etape* etape26 = new Etape(Position(2630, 460, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14142:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   14146:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1414a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1414e:	781b      	ldrb	r3, [r3, #0]
   14150:	4610      	mov	r0, r2
   14152:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 147fc <_ZN9Krabi2015C2Eb+0x16b4>
   14156:	f8df 26a8 	ldr.w	r2, [pc, #1704]	; 14800 <_ZN9Krabi2015C2Eb+0x16b8>
   1415a:	f7fa fe2f 	bl	edbc <_ZN8PositionC1Effb>
   1415e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14162:	f8c7 3168 	str.w	r3, [r7, #360]
   14166:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1416a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1416e:	f8c7 3510 	str.w	r3, [r7, #1296]
   14172:	f04f 0034 	mov.w	r0, #52	; 0x34
   14176:	f7fa fcbb 	bl	eaf0 <_Znwj>
   1417a:	4603      	mov	r3, r0
   1417c:	f8c7 316c 	str.w	r3, [r7, #364]
   14180:	f8d7 316c 	ldr.w	r3, [r7, #364]
   14184:	2b00      	cmp	r3, #0
   14186:	d01b      	beq.n	141c0 <_ZN9Krabi2015C2Eb+0x1078>
   14188:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1418c:	681b      	ldr	r3, [r3, #0]
   1418e:	6b5b      	ldr	r3, [r3, #52]
   14190:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
   14194:	9300      	str	r3, [sp, #0]
   14196:	f04f 0300 	mov.w	r3, #0	; 0x0
   1419a:	9301      	str	r3, [sp, #4]
   1419c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141a0:	9302      	str	r3, [sp, #8]
   141a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   141a6:	9303      	str	r3, [sp, #12]
   141a8:	f8d7 016c 	ldr.w	r0, [r7, #364]
   141ac:	ca06      	ldmia	r2!, {r1, r2}
   141ae:	f8d7 3168 	ldr.w	r3, [r7, #360]
   141b2:	f7fc fca1 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   141b6:	f8d7 316c 	ldr.w	r3, [r7, #364]
   141ba:	f8c7 3170 	str.w	r3, [r7, #368]
   141be:	e003      	b.n	141c8 <_ZN9Krabi2015C2Eb+0x1080>
   141c0:	f8d7 316c 	ldr.w	r3, [r7, #364]
   141c4:	f8c7 3170 	str.w	r3, [r7, #368]
   141c8:	f8d7 3170 	ldr.w	r3, [r7, #368]
   141cc:	f8c7 357c 	str.w	r3, [r7, #1404]
    Etape* etape27 = new Etape(Position(1100, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   141d0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   141d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   141d8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   141dc:	781b      	ldrb	r3, [r3, #0]
   141de:	4610      	mov	r0, r2
   141e0:	f8df 1620 	ldr.w	r1, [pc, #1568]	; 14804 <_ZN9Krabi2015C2Eb+0x16bc>
   141e4:	f8df 2620 	ldr.w	r2, [pc, #1568]	; 14808 <_ZN9Krabi2015C2Eb+0x16c0>
   141e8:	f7fa fde8 	bl	edbc <_ZN8PositionC1Effb>
   141ec:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   141f0:	f8c7 3174 	str.w	r3, [r7, #372]
   141f4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   141f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   141fc:	f8c7 3510 	str.w	r3, [r7, #1296]
   14200:	f04f 0034 	mov.w	r0, #52	; 0x34
   14204:	f7fa fc74 	bl	eaf0 <_Znwj>
   14208:	4603      	mov	r3, r0
   1420a:	f8c7 3178 	str.w	r3, [r7, #376]
   1420e:	f8d7 3178 	ldr.w	r3, [r7, #376]
   14212:	2b00      	cmp	r3, #0
   14214:	d01b      	beq.n	1424e <_ZN9Krabi2015C2Eb+0x1106>
   14216:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1421a:	681b      	ldr	r3, [r3, #0]
   1421c:	6b5b      	ldr	r3, [r3, #52]
   1421e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
   14222:	9300      	str	r3, [sp, #0]
   14224:	f04f 0300 	mov.w	r3, #0	; 0x0
   14228:	9301      	str	r3, [sp, #4]
   1422a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1422e:	9302      	str	r3, [sp, #8]
   14230:	f04f 0300 	mov.w	r3, #0	; 0x0
   14234:	9303      	str	r3, [sp, #12]
   14236:	f8d7 0178 	ldr.w	r0, [r7, #376]
   1423a:	ca06      	ldmia	r2!, {r1, r2}
   1423c:	f8d7 3174 	ldr.w	r3, [r7, #372]
   14240:	f7fc fc5a 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14244:	f8d7 3178 	ldr.w	r3, [r7, #376]
   14248:	f8c7 317c 	str.w	r3, [r7, #380]
   1424c:	e003      	b.n	14256 <_ZN9Krabi2015C2Eb+0x110e>
   1424e:	f8d7 3178 	ldr.w	r3, [r7, #376]
   14252:	f8c7 317c 	str.w	r3, [r7, #380]
   14256:	f8d7 317c 	ldr.w	r3, [r7, #380]
   1425a:	f8c7 3580 	str.w	r3, [r7, #1408]
    Etape* etape28 = new Etape(Position(560, 1290, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1425e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   14262:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14266:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1426a:	781b      	ldrb	r3, [r3, #0]
   1426c:	4610      	mov	r0, r2
   1426e:	f8df 159c 	ldr.w	r1, [pc, #1436]	; 1480c <_ZN9Krabi2015C2Eb+0x16c4>
   14272:	f8df 259c 	ldr.w	r2, [pc, #1436]	; 14810 <_ZN9Krabi2015C2Eb+0x16c8>
   14276:	f7fa fda1 	bl	edbc <_ZN8PositionC1Effb>
   1427a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1427e:	f8c7 3180 	str.w	r3, [r7, #384]
   14282:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14286:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1428a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1428e:	f04f 0034 	mov.w	r0, #52	; 0x34
   14292:	f7fa fc2d 	bl	eaf0 <_Znwj>
   14296:	4603      	mov	r3, r0
   14298:	f8c7 3184 	str.w	r3, [r7, #388]
   1429c:	f8d7 3184 	ldr.w	r3, [r7, #388]
   142a0:	2b00      	cmp	r3, #0
   142a2:	d01b      	beq.n	142dc <_ZN9Krabi2015C2Eb+0x1194>
   142a4:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   142a8:	681b      	ldr	r3, [r3, #0]
   142aa:	6b5b      	ldr	r3, [r3, #52]
   142ac:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
   142b0:	9300      	str	r3, [sp, #0]
   142b2:	f04f 0300 	mov.w	r3, #0	; 0x0
   142b6:	9301      	str	r3, [sp, #4]
   142b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   142bc:	9302      	str	r3, [sp, #8]
   142be:	f04f 0300 	mov.w	r3, #0	; 0x0
   142c2:	9303      	str	r3, [sp, #12]
   142c4:	f8d7 0184 	ldr.w	r0, [r7, #388]
   142c8:	ca06      	ldmia	r2!, {r1, r2}
   142ca:	f8d7 3180 	ldr.w	r3, [r7, #384]
   142ce:	f7fc fc13 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   142d2:	f8d7 3184 	ldr.w	r3, [r7, #388]
   142d6:	f8c7 3188 	str.w	r3, [r7, #392]
   142da:	e003      	b.n	142e4 <_ZN9Krabi2015C2Eb+0x119c>
   142dc:	f8d7 3184 	ldr.w	r3, [r7, #388]
   142e0:	f8c7 3188 	str.w	r3, [r7, #392]
   142e4:	f8d7 3188 	ldr.w	r3, [r7, #392]
   142e8:	f8c7 3584 	str.w	r3, [r7, #1412]
    Etape* etape29 = new Etape(Position(720, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   142ec:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   142f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   142f4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   142f8:	781b      	ldrb	r3, [r3, #0]
   142fa:	4610      	mov	r0, r2
   142fc:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 14814 <_ZN9Krabi2015C2Eb+0x16cc>
   14300:	f8df 2514 	ldr.w	r2, [pc, #1300]	; 14818 <_ZN9Krabi2015C2Eb+0x16d0>
   14304:	f7fa fd5a 	bl	edbc <_ZN8PositionC1Effb>
   14308:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1430c:	f8c7 318c 	str.w	r3, [r7, #396]
   14310:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14314:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14318:	f8c7 3510 	str.w	r3, [r7, #1296]
   1431c:	f04f 0034 	mov.w	r0, #52	; 0x34
   14320:	f7fa fbe6 	bl	eaf0 <_Znwj>
   14324:	4603      	mov	r3, r0
   14326:	f8c7 3190 	str.w	r3, [r7, #400]
   1432a:	f8d7 3190 	ldr.w	r3, [r7, #400]
   1432e:	2b00      	cmp	r3, #0
   14330:	d01b      	beq.n	1436a <_ZN9Krabi2015C2Eb+0x1222>
   14332:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14336:	681b      	ldr	r3, [r3, #0]
   14338:	6b5b      	ldr	r3, [r3, #52]
   1433a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
   1433e:	9300      	str	r3, [sp, #0]
   14340:	f04f 0300 	mov.w	r3, #0	; 0x0
   14344:	9301      	str	r3, [sp, #4]
   14346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1434a:	9302      	str	r3, [sp, #8]
   1434c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14350:	9303      	str	r3, [sp, #12]
   14352:	f8d7 0190 	ldr.w	r0, [r7, #400]
   14356:	ca06      	ldmia	r2!, {r1, r2}
   14358:	f8d7 318c 	ldr.w	r3, [r7, #396]
   1435c:	f7fc fbcc 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14360:	f8d7 3190 	ldr.w	r3, [r7, #400]
   14364:	f8c7 3194 	str.w	r3, [r7, #404]
   14368:	e003      	b.n	14372 <_ZN9Krabi2015C2Eb+0x122a>
   1436a:	f8d7 3190 	ldr.w	r3, [r7, #400]
   1436e:	f8c7 3194 	str.w	r3, [r7, #404]
   14372:	f8d7 3194 	ldr.w	r3, [r7, #404]
   14376:	f8c7 3588 	str.w	r3, [r7, #1416]
    Etape* etape30 = new Etape(Position(420, 1600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1437a:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   1437e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14382:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14386:	781b      	ldrb	r3, [r3, #0]
   14388:	4610      	mov	r0, r2
   1438a:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 1481c <_ZN9Krabi2015C2Eb+0x16d4>
   1438e:	f8df 2488 	ldr.w	r2, [pc, #1160]	; 14818 <_ZN9Krabi2015C2Eb+0x16d0>
   14392:	f7fa fd13 	bl	edbc <_ZN8PositionC1Effb>
   14396:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1439a:	f8c7 3198 	str.w	r3, [r7, #408]
   1439e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   143a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   143a6:	f8c7 3510 	str.w	r3, [r7, #1296]
   143aa:	f04f 0034 	mov.w	r0, #52	; 0x34
   143ae:	f7fa fb9f 	bl	eaf0 <_Znwj>
   143b2:	4603      	mov	r3, r0
   143b4:	f8c7 319c 	str.w	r3, [r7, #412]
   143b8:	f8d7 319c 	ldr.w	r3, [r7, #412]
   143bc:	2b00      	cmp	r3, #0
   143be:	d01b      	beq.n	143f8 <_ZN9Krabi2015C2Eb+0x12b0>
   143c0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   143c4:	681b      	ldr	r3, [r3, #0]
   143c6:	6b5b      	ldr	r3, [r3, #52]
   143c8:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
   143cc:	9300      	str	r3, [sp, #0]
   143ce:	f04f 0300 	mov.w	r3, #0	; 0x0
   143d2:	9301      	str	r3, [sp, #4]
   143d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   143d8:	9302      	str	r3, [sp, #8]
   143da:	f04f 0300 	mov.w	r3, #0	; 0x0
   143de:	9303      	str	r3, [sp, #12]
   143e0:	f8d7 019c 	ldr.w	r0, [r7, #412]
   143e4:	ca06      	ldmia	r2!, {r1, r2}
   143e6:	f8d7 3198 	ldr.w	r3, [r7, #408]
   143ea:	f7fc fb85 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   143ee:	f8d7 319c 	ldr.w	r3, [r7, #412]
   143f2:	f8c7 31a0 	str.w	r3, [r7, #416]
   143f6:	e003      	b.n	14400 <_ZN9Krabi2015C2Eb+0x12b8>
   143f8:	f8d7 319c 	ldr.w	r3, [r7, #412]
   143fc:	f8c7 31a0 	str.w	r3, [r7, #416]
   14400:	f8d7 31a0 	ldr.w	r3, [r7, #416]
   14404:	f8c7 358c 	str.w	r3, [r7, #1420]
    Etape* etape31 = new Etape(Position(300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14408:	f507 7240 	add.w	r2, r7, #768	; 0x300
   1440c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14410:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14414:	781b      	ldrb	r3, [r3, #0]
   14416:	4610      	mov	r0, r2
   14418:	f8df 1404 	ldr.w	r1, [pc, #1028]	; 14820 <_ZN9Krabi2015C2Eb+0x16d8>
   1441c:	4af5      	ldr	r2, [pc, #980]	(147f4 <_ZN9Krabi2015C2Eb+0x16ac>)
   1441e:	f7fa fccd 	bl	edbc <_ZN8PositionC1Effb>
   14422:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14426:	f8c7 31a4 	str.w	r3, [r7, #420]
   1442a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1442e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14432:	f8c7 3510 	str.w	r3, [r7, #1296]
   14436:	f04f 0034 	mov.w	r0, #52	; 0x34
   1443a:	f7fa fb59 	bl	eaf0 <_Znwj>
   1443e:	4603      	mov	r3, r0
   14440:	f8c7 31a8 	str.w	r3, [r7, #424]
   14444:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   14448:	2b00      	cmp	r3, #0
   1444a:	d01b      	beq.n	14484 <_ZN9Krabi2015C2Eb+0x133c>
   1444c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14450:	681b      	ldr	r3, [r3, #0]
   14452:	6b5b      	ldr	r3, [r3, #52]
   14454:	f507 7240 	add.w	r2, r7, #768	; 0x300
   14458:	9300      	str	r3, [sp, #0]
   1445a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1445e:	9301      	str	r3, [sp, #4]
   14460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14464:	9302      	str	r3, [sp, #8]
   14466:	f04f 0300 	mov.w	r3, #0	; 0x0
   1446a:	9303      	str	r3, [sp, #12]
   1446c:	f8d7 01a8 	ldr.w	r0, [r7, #424]
   14470:	ca06      	ldmia	r2!, {r1, r2}
   14472:	f8d7 31a4 	ldr.w	r3, [r7, #420]
   14476:	f7fc fb3f 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1447a:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   1447e:	f8c7 31ac 	str.w	r3, [r7, #428]
   14482:	e003      	b.n	1448c <_ZN9Krabi2015C2Eb+0x1344>
   14484:	f8d7 31a8 	ldr.w	r3, [r7, #424]
   14488:	f8c7 31ac 	str.w	r3, [r7, #428]
   1448c:	f8d7 31ac 	ldr.w	r3, [r7, #428]
   14490:	f8c7 3590 	str.w	r3, [r7, #1424]
    Etape* etape32 = new Etape(Position(400, 430, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14494:	f507 7242 	add.w	r2, r7, #776	; 0x308
   14498:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1449c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   144a0:	781b      	ldrb	r3, [r3, #0]
   144a2:	4610      	mov	r0, r2
   144a4:	49df      	ldr	r1, [pc, #892]	(14824 <_ZN9Krabi2015C2Eb+0x16dc>)
   144a6:	4ae0      	ldr	r2, [pc, #896]	(14828 <_ZN9Krabi2015C2Eb+0x16e0>)
   144a8:	f7fa fc88 	bl	edbc <_ZN8PositionC1Effb>
   144ac:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   144b0:	f8c7 31b0 	str.w	r3, [r7, #432]
   144b4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   144b8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   144bc:	f8c7 3510 	str.w	r3, [r7, #1296]
   144c0:	f04f 0034 	mov.w	r0, #52	; 0x34
   144c4:	f7fa fb14 	bl	eaf0 <_Znwj>
   144c8:	4603      	mov	r3, r0
   144ca:	f8c7 31b4 	str.w	r3, [r7, #436]
   144ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   144d2:	2b00      	cmp	r3, #0
   144d4:	d01b      	beq.n	1450e <_ZN9Krabi2015C2Eb+0x13c6>
   144d6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   144da:	681b      	ldr	r3, [r3, #0]
   144dc:	6b5b      	ldr	r3, [r3, #52]
   144de:	f507 7242 	add.w	r2, r7, #776	; 0x308
   144e2:	9300      	str	r3, [sp, #0]
   144e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   144e8:	9301      	str	r3, [sp, #4]
   144ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   144ee:	9302      	str	r3, [sp, #8]
   144f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   144f4:	9303      	str	r3, [sp, #12]
   144f6:	f8d7 01b4 	ldr.w	r0, [r7, #436]
   144fa:	ca06      	ldmia	r2!, {r1, r2}
   144fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]
   14500:	f7fc fafa 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14504:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   14508:	f8c7 31b8 	str.w	r3, [r7, #440]
   1450c:	e003      	b.n	14516 <_ZN9Krabi2015C2Eb+0x13ce>
   1450e:	f8d7 31b4 	ldr.w	r3, [r7, #436]
   14512:	f8c7 31b8 	str.w	r3, [r7, #440]
   14516:	f8d7 31b8 	ldr.w	r3, [r7, #440]
   1451a:	f8c7 3594 	str.w	r3, [r7, #1428]
    Etape* etape33 = new Etape(Position(1110, 1130, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1451e:	f507 7244 	add.w	r2, r7, #784	; 0x310
   14522:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14526:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1452a:	781b      	ldrb	r3, [r3, #0]
   1452c:	4610      	mov	r0, r2
   1452e:	49bf      	ldr	r1, [pc, #764]	(1482c <_ZN9Krabi2015C2Eb+0x16e4>)
   14530:	4abf      	ldr	r2, [pc, #764]	(14830 <_ZN9Krabi2015C2Eb+0x16e8>)
   14532:	f7fa fc43 	bl	edbc <_ZN8PositionC1Effb>
   14536:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1453a:	f8c7 31bc 	str.w	r3, [r7, #444]
   1453e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14542:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14546:	f8c7 3510 	str.w	r3, [r7, #1296]
   1454a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1454e:	f7fa facf 	bl	eaf0 <_Znwj>
   14552:	4603      	mov	r3, r0
   14554:	f8c7 31c0 	str.w	r3, [r7, #448]
   14558:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   1455c:	2b00      	cmp	r3, #0
   1455e:	d01b      	beq.n	14598 <_ZN9Krabi2015C2Eb+0x1450>
   14560:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14564:	681b      	ldr	r3, [r3, #0]
   14566:	6b5b      	ldr	r3, [r3, #52]
   14568:	f507 7244 	add.w	r2, r7, #784	; 0x310
   1456c:	9300      	str	r3, [sp, #0]
   1456e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14572:	9301      	str	r3, [sp, #4]
   14574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14578:	9302      	str	r3, [sp, #8]
   1457a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1457e:	9303      	str	r3, [sp, #12]
   14580:	f8d7 01c0 	ldr.w	r0, [r7, #448]
   14584:	ca06      	ldmia	r2!, {r1, r2}
   14586:	f8d7 31bc 	ldr.w	r3, [r7, #444]
   1458a:	f7fc fab5 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1458e:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   14592:	f8c7 31c4 	str.w	r3, [r7, #452]
   14596:	e003      	b.n	145a0 <_ZN9Krabi2015C2Eb+0x1458>
   14598:	f8d7 31c0 	ldr.w	r3, [r7, #448]
   1459c:	f8c7 31c4 	str.w	r3, [r7, #452]
   145a0:	f8d7 31c4 	ldr.w	r3, [r7, #452]
   145a4:	f8c7 3598 	str.w	r3, [r7, #1432]
    Etape* etape34 = new Etape(Position(1480, 1150, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   145a8:	f507 7246 	add.w	r2, r7, #792	; 0x318
   145ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
   145b0:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   145b4:	781b      	ldrb	r3, [r3, #0]
   145b6:	4610      	mov	r0, r2
   145b8:	499e      	ldr	r1, [pc, #632]	(14834 <_ZN9Krabi2015C2Eb+0x16ec>)
   145ba:	4a9f      	ldr	r2, [pc, #636]	(14838 <_ZN9Krabi2015C2Eb+0x16f0>)
   145bc:	f7fa fbfe 	bl	edbc <_ZN8PositionC1Effb>
   145c0:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   145c4:	f8c7 31c8 	str.w	r3, [r7, #456]
   145c8:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   145cc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   145d0:	f8c7 3510 	str.w	r3, [r7, #1296]
   145d4:	f04f 0034 	mov.w	r0, #52	; 0x34
   145d8:	f7fa fa8a 	bl	eaf0 <_Znwj>
   145dc:	4603      	mov	r3, r0
   145de:	f8c7 31cc 	str.w	r3, [r7, #460]
   145e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   145e6:	2b00      	cmp	r3, #0
   145e8:	d01b      	beq.n	14622 <_ZN9Krabi2015C2Eb+0x14da>
   145ea:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   145ee:	681b      	ldr	r3, [r3, #0]
   145f0:	6b5b      	ldr	r3, [r3, #52]
   145f2:	f507 7246 	add.w	r2, r7, #792	; 0x318
   145f6:	9300      	str	r3, [sp, #0]
   145f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   145fc:	9301      	str	r3, [sp, #4]
   145fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14602:	9302      	str	r3, [sp, #8]
   14604:	f04f 0300 	mov.w	r3, #0	; 0x0
   14608:	9303      	str	r3, [sp, #12]
   1460a:	f8d7 01cc 	ldr.w	r0, [r7, #460]
   1460e:	ca06      	ldmia	r2!, {r1, r2}
   14610:	f8d7 31c8 	ldr.w	r3, [r7, #456]
   14614:	f7fc fa70 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   14618:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   1461c:	f8c7 31d0 	str.w	r3, [r7, #464]
   14620:	e003      	b.n	1462a <_ZN9Krabi2015C2Eb+0x14e2>
   14622:	f8d7 31cc 	ldr.w	r3, [r7, #460]
   14626:	f8c7 31d0 	str.w	r3, [r7, #464]
   1462a:	f8d7 31d0 	ldr.w	r3, [r7, #464]
   1462e:	f8c7 359c 	str.w	r3, [r7, #1436]
    Etape* etape35 = new Etape(Position(1850, 1160, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14632:	f507 7248 	add.w	r2, r7, #800	; 0x320
   14636:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1463a:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   1463e:	781b      	ldrb	r3, [r3, #0]
   14640:	4610      	mov	r0, r2
   14642:	497e      	ldr	r1, [pc, #504]	(1483c <_ZN9Krabi2015C2Eb+0x16f4>)
   14644:	4a7e      	ldr	r2, [pc, #504]	(14840 <_ZN9Krabi2015C2Eb+0x16f8>)
   14646:	f7fa fbb9 	bl	edbc <_ZN8PositionC1Effb>
   1464a:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1464e:	f8c7 31d4 	str.w	r3, [r7, #468]
   14652:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14656:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1465a:	f8c7 3510 	str.w	r3, [r7, #1296]
   1465e:	f04f 0034 	mov.w	r0, #52	; 0x34
   14662:	f7fa fa45 	bl	eaf0 <_Znwj>
   14666:	4603      	mov	r3, r0
   14668:	f8c7 31d8 	str.w	r3, [r7, #472]
   1466c:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   14670:	2b00      	cmp	r3, #0
   14672:	d01b      	beq.n	146ac <_ZN9Krabi2015C2Eb+0x1564>
   14674:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14678:	681b      	ldr	r3, [r3, #0]
   1467a:	6b5b      	ldr	r3, [r3, #52]
   1467c:	f507 7248 	add.w	r2, r7, #800	; 0x320
   14680:	9300      	str	r3, [sp, #0]
   14682:	f04f 0300 	mov.w	r3, #0	; 0x0
   14686:	9301      	str	r3, [sp, #4]
   14688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1468c:	9302      	str	r3, [sp, #8]
   1468e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14692:	9303      	str	r3, [sp, #12]
   14694:	f8d7 01d8 	ldr.w	r0, [r7, #472]
   14698:	ca06      	ldmia	r2!, {r1, r2}
   1469a:	f8d7 31d4 	ldr.w	r3, [r7, #468]
   1469e:	f7fc fa2b 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   146a2:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   146a6:	f8c7 31dc 	str.w	r3, [r7, #476]
   146aa:	e003      	b.n	146b4 <_ZN9Krabi2015C2Eb+0x156c>
   146ac:	f8d7 31d8 	ldr.w	r3, [r7, #472]
   146b0:	f8c7 31dc 	str.w	r3, [r7, #476]
   146b4:	f8d7 31dc 	ldr.w	r3, [r7, #476]
   146b8:	f8c7 35a0 	str.w	r3, [r7, #1440]
    Etape* etape36 = new Etape(Position(1950, 1530, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   146bc:	f507 724a 	add.w	r2, r7, #808	; 0x328
   146c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
   146c4:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   146c8:	781b      	ldrb	r3, [r3, #0]
   146ca:	4610      	mov	r0, r2
   146cc:	495d      	ldr	r1, [pc, #372]	(14844 <_ZN9Krabi2015C2Eb+0x16fc>)
   146ce:	4a5e      	ldr	r2, [pc, #376]	(14848 <_ZN9Krabi2015C2Eb+0x1700>)
   146d0:	f7fa fb74 	bl	edbc <_ZN8PositionC1Effb>
   146d4:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   146d8:	f8c7 31e0 	str.w	r3, [r7, #480]
   146dc:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   146e0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   146e4:	f8c7 3510 	str.w	r3, [r7, #1296]
   146e8:	f04f 0034 	mov.w	r0, #52	; 0x34
   146ec:	f7fa fa00 	bl	eaf0 <_Znwj>
   146f0:	4603      	mov	r3, r0
   146f2:	f8c7 31e4 	str.w	r3, [r7, #484]
   146f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   146fa:	2b00      	cmp	r3, #0
   146fc:	d01b      	beq.n	14736 <_ZN9Krabi2015C2Eb+0x15ee>
   146fe:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	6b5b      	ldr	r3, [r3, #52]
   14706:	f507 724a 	add.w	r2, r7, #808	; 0x328
   1470a:	9300      	str	r3, [sp, #0]
   1470c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14710:	9301      	str	r3, [sp, #4]
   14712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14716:	9302      	str	r3, [sp, #8]
   14718:	f04f 0300 	mov.w	r3, #0	; 0x0
   1471c:	9303      	str	r3, [sp, #12]
   1471e:	f8d7 01e4 	ldr.w	r0, [r7, #484]
   14722:	ca06      	ldmia	r2!, {r1, r2}
   14724:	f8d7 31e0 	ldr.w	r3, [r7, #480]
   14728:	f7fc f9e6 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1472c:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   14730:	f8c7 31e8 	str.w	r3, [r7, #488]
   14734:	e003      	b.n	1473e <_ZN9Krabi2015C2Eb+0x15f6>
   14736:	f8d7 31e4 	ldr.w	r3, [r7, #484]
   1473a:	f8c7 31e8 	str.w	r3, [r7, #488]
   1473e:	f8d7 31e8 	ldr.w	r3, [r7, #488]
   14742:	f8c7 35a4 	str.w	r3, [r7, #1444]
    Etape* etape37 = new Etape(Position(1890, 1365, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   14746:	f507 724c 	add.w	r2, r7, #816	; 0x330
   1474a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1474e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14752:	781b      	ldrb	r3, [r3, #0]
   14754:	4610      	mov	r0, r2
   14756:	493d      	ldr	r1, [pc, #244]	(1484c <_ZN9Krabi2015C2Eb+0x1704>)
   14758:	4a3d      	ldr	r2, [pc, #244]	(14850 <_ZN9Krabi2015C2Eb+0x1708>)
   1475a:	f7fa fb2f 	bl	edbc <_ZN8PositionC1Effb>
   1475e:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   14762:	f8c7 31ec 	str.w	r3, [r7, #492]
   14766:	f8d7 3510 	ldr.w	r3, [r7, #1296]
   1476a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1476e:	f8c7 3510 	str.w	r3, [r7, #1296]
   14772:	f04f 0034 	mov.w	r0, #52	; 0x34
   14776:	f7fa f9bb 	bl	eaf0 <_Znwj>
   1477a:	4603      	mov	r3, r0
   1477c:	f8c7 31f0 	str.w	r3, [r7, #496]
   14780:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   14784:	2b00      	cmp	r3, #0
   14786:	d01b      	beq.n	147c0 <_ZN9Krabi2015C2Eb+0x1678>
   14788:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   1478c:	681b      	ldr	r3, [r3, #0]
   1478e:	6b5b      	ldr	r3, [r3, #52]
   14790:	f507 724c 	add.w	r2, r7, #816	; 0x330
   14794:	9300      	str	r3, [sp, #0]
   14796:	f04f 0300 	mov.w	r3, #0	; 0x0
   1479a:	9301      	str	r3, [sp, #4]
   1479c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147a0:	9302      	str	r3, [sp, #8]
   147a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   147a6:	9303      	str	r3, [sp, #12]
   147a8:	f8d7 01f0 	ldr.w	r0, [r7, #496]
   147ac:	ca06      	ldmia	r2!, {r1, r2}
   147ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]
   147b2:	f7fc f9a1 	bl	10af8 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   147b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   147ba:	f8c7 31f4 	str.w	r3, [r7, #500]
   147be:	e003      	b.n	147c8 <_ZN9Krabi2015C2Eb+0x1680>
   147c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]
   147c4:	f8c7 31f4 	str.w	r3, [r7, #500]
   147c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]
   147cc:	f8c7 35a8 	str.w	r3, [r7, #1448]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   147d0:	f04f 0300 	mov.w	r3, #0	; 0x0
   147d4:	f8c7 35ac 	str.w	r3, [r7, #1452]
   147d8:	e0a6      	b.n	14928 <_ZN9Krabi2015C2Eb+0x17e0>
   147da:	46c0      	nop			(mov r8, r8)
   147dc:	449c4000 	.word	0x449c4000
   147e0:	44e10000 	.word	0x44e10000
   147e4:	44dac000 	.word	0x44dac000
   147e8:	4499c000 	.word	0x4499c000
   147ec:	443e0000 	.word	0x443e0000
   147f0:	450fc000 	.word	0x450fc000
   147f4:	44bb8000 	.word	0x44bb8000
   147f8:	45296000 	.word	0x45296000
   147fc:	45246000 	.word	0x45246000
   14800:	43e60000 	.word	0x43e60000
   14804:	44898000 	.word	0x44898000
   14808:	44ce4000 	.word	0x44ce4000
   1480c:	440c0000 	.word	0x440c0000
   14810:	44a14000 	.word	0x44a14000
   14814:	44340000 	.word	0x44340000
   14818:	44c80000 	.word	0x44c80000
   1481c:	43d20000 	.word	0x43d20000
   14820:	43960000 	.word	0x43960000
   14824:	43c80000 	.word	0x43c80000
   14828:	43d70000 	.word	0x43d70000
   1482c:	448ac000 	.word	0x448ac000
   14830:	448d4000 	.word	0x448d4000
   14834:	44b90000 	.word	0x44b90000
   14838:	448fc000 	.word	0x448fc000
   1483c:	44e74000 	.word	0x44e74000
   14840:	44910000 	.word	0x44910000
   14844:	44f3c000 	.word	0x44f3c000
   14848:	44bf4000 	.word	0x44bf4000
   1484c:	44ec4000 	.word	0x44ec4000
   14850:	44aaa000 	.word	0x44aaa000
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   14854:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14858:	681b      	ldr	r3, [r3, #0]
   1485a:	6b5a      	ldr	r2, [r3, #52]
   1485c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14860:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14864:	4413      	add	r3, r2
   14866:	681b      	ldr	r3, [r3, #0]
   14868:	4618      	mov	r0, r3
   1486a:	f7fb ff29 	bl	106c0 <_ZN5Etape8getStateEv>
   1486e:	4603      	mov	r3, r0
   14870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   14874:	bf14      	ite	ne
   14876:	2300      	movne	r3, #0
   14878:	2301      	moveq	r3, #1
   1487a:	b2db      	uxtb	r3, r3
   1487c:	2b00      	cmp	r3, #0
   1487e:	d04d      	beq.n	1491c <_ZN9Krabi2015C2Eb+0x17d4>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   14880:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14884:	681b      	ldr	r3, [r3, #0]
   14886:	6a99      	ldr	r1, [r3, #40]
   14888:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1488c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14890:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14894:	ebc2 0303 	rsb	r3, r2, r3
   14898:	eb01 0403 	add.w	r4, r1, r3
   1489c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   148a0:	681b      	ldr	r3, [r3, #0]
   148a2:	6b5a      	ldr	r2, [r3, #52]
   148a4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   148a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   148ac:	4413      	add	r3, r2
   148ae:	681a      	ldr	r2, [r3, #0]
   148b0:	f507 735a 	add.w	r3, r7, #872	; 0x368
   148b4:	4618      	mov	r0, r3
   148b6:	4611      	mov	r1, r2
   148b8:	f7fb feee 	bl	10698 <_ZN5Etape11getPositionEv>
   148bc:	f507 714e 	add.w	r1, r7, #824	; 0x338
   148c0:	f507 725a 	add.w	r2, r7, #872	; 0x368
   148c4:	f8df 3924 	ldr.w	r3, [pc, #2340]	; 151ec <_ZN9Krabi2015C2Eb+0x20a4>
   148c8:	9300      	str	r3, [sp, #0]
   148ca:	4608      	mov	r0, r1
   148cc:	ca06      	ldmia	r2!, {r1, r2}
   148ce:	f04f 0300 	mov.w	r3, #0	; 0x0
   148d2:	f7fa ff99 	bl	f808 <_ZN10ActionGoToC1E8Positionbf>
   148d6:	f507 734e 	add.w	r3, r7, #824	; 0x338
   148da:	4620      	mov	r0, r4
   148dc:	4619      	mov	r1, r3
   148de:	f008 fd1f 	bl	1d320 <_ZN10ActionGoToaSERKS_>
   148e2:	f507 734e 	add.w	r3, r7, #824	; 0x338
   148e6:	4618      	mov	r0, r3
   148e8:	f7fa ff56 	bl	f798 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   148ec:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   148f0:	681b      	ldr	r3, [r3, #0]
   148f2:	6a5a      	ldr	r2, [r3, #36]
   148f4:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   148f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   148fc:	eb02 0003 	add.w	r0, r2, r3
   14900:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14904:	681b      	ldr	r3, [r3, #0]
   14906:	6a99      	ldr	r1, [r3, #40]
   14908:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1490c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14910:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14914:	ebc2 0303 	rsb	r3, r2, r3
   14918:	440b      	add	r3, r1
   1491a:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   1491c:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   14920:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14924:	f8c7 35ac 	str.w	r3, [r7, #1452]
   14928:	f8d7 35ac 	ldr.w	r3, [r7, #1452]
   1492c:	2b25      	cmp	r3, #37
   1492e:	dd91      	ble.n	14854 <_ZN9Krabi2015C2Eb+0x170c>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1780, isYellow),Position(1000, 1780, isYellow));
   14930:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14934:	681b      	ldr	r3, [r3, #0]
   14936:	f103 0448 	add.w	r4, r3, #72	; 0x48
   1493a:	f507 7266 	add.w	r2, r7, #920	; 0x398
   1493e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14942:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14946:	781b      	ldrb	r3, [r3, #0]
   14948:	4610      	mov	r0, r2
   1494a:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 151f0 <_ZN9Krabi2015C2Eb+0x20a8>
   1494e:	f8df 28a4 	ldr.w	r2, [pc, #2212]	; 151f4 <_ZN9Krabi2015C2Eb+0x20ac>
   14952:	f7fa fa33 	bl	edbc <_ZN8PositionC1Effb>
   14956:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   1495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   1495e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14962:	781b      	ldrb	r3, [r3, #0]
   14964:	4610      	mov	r0, r2
   14966:	f8df 1890 	ldr.w	r1, [pc, #2192]	; 151f8 <_ZN9Krabi2015C2Eb+0x20b0>
   1496a:	f8df 2888 	ldr.w	r2, [pc, #2184]	; 151f4 <_ZN9Krabi2015C2Eb+0x20ac>
   1496e:	f7fa fa25 	bl	edbc <_ZN8PositionC1Effb>
   14972:	f507 705c 	add.w	r0, r7, #880	; 0x370
   14976:	f507 7166 	add.w	r1, r7, #920	; 0x398
   1497a:	f507 7268 	add.w	r2, r7, #928	; 0x3a0
   1497e:	6853      	ldr	r3, [r2, #4]
   14980:	9300      	str	r3, [sp, #0]
   14982:	6813      	ldr	r3, [r2, #0]
   14984:	c906      	ldmia	r1!, {r1, r2}
   14986:	f7fb f927 	bl	fbd8 <_ZN4ClapC1E8PositionS0_>
   1498a:	f507 735c 	add.w	r3, r7, #880	; 0x370
   1498e:	4620      	mov	r0, r4
   14990:	4619      	mov	r1, r3
   14992:	f008 fcf1 	bl	1d378 <_ZN4ClapaSERKS_>
   14996:	f507 735c 	add.w	r3, r7, #880	; 0x370
   1499a:	4618      	mov	r0, r3
   1499c:	f7fb f8e4 	bl	fb68 <_ZN4ClapD1Ev>
    actionEtape[2]= &actionClap[0];
   149a0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   149a4:	681b      	ldr	r3, [r3, #0]
   149a6:	6a5b      	ldr	r3, [r3, #36]
   149a8:	f103 0208 	add.w	r2, r3, #8	; 0x8
   149ac:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   149b0:	681b      	ldr	r3, [r3, #0]
   149b2:	f103 0348 	add.w	r3, r3, #72	; 0x48
   149b6:	6013      	str	r3, [r2, #0]
    actionClap[1] = Clap(Position(236, 1780, isYellow),Position(400, 1780, isYellow));
   149b8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   149bc:	681b      	ldr	r3, [r3, #0]
   149be:	f103 0470 	add.w	r4, r3, #112	; 0x70
   149c2:	f507 7274 	add.w	r2, r7, #976	; 0x3d0
   149c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   149ca:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   149ce:	781b      	ldrb	r3, [r3, #0]
   149d0:	4610      	mov	r0, r2
   149d2:	f8df 1828 	ldr.w	r1, [pc, #2088]	; 151fc <_ZN9Krabi2015C2Eb+0x20b4>
   149d6:	f8df 281c 	ldr.w	r2, [pc, #2076]	; 151f4 <_ZN9Krabi2015C2Eb+0x20ac>
   149da:	f7fa f9ef 	bl	edbc <_ZN8PositionC1Effb>
   149de:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   149e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   149e6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   149ea:	781b      	ldrb	r3, [r3, #0]
   149ec:	4610      	mov	r0, r2
   149ee:	f8df 1810 	ldr.w	r1, [pc, #2064]	; 15200 <_ZN9Krabi2015C2Eb+0x20b8>
   149f2:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 151f4 <_ZN9Krabi2015C2Eb+0x20ac>
   149f6:	f7fa f9e1 	bl	edbc <_ZN8PositionC1Effb>
   149fa:	f507 706a 	add.w	r0, r7, #936	; 0x3a8
   149fe:	f507 7174 	add.w	r1, r7, #976	; 0x3d0
   14a02:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
   14a06:	6853      	ldr	r3, [r2, #4]
   14a08:	9300      	str	r3, [sp, #0]
   14a0a:	6813      	ldr	r3, [r2, #0]
   14a0c:	c906      	ldmia	r1!, {r1, r2}
   14a0e:	f7fb f8e3 	bl	fbd8 <_ZN4ClapC1E8PositionS0_>
   14a12:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   14a16:	4620      	mov	r0, r4
   14a18:	4619      	mov	r1, r3
   14a1a:	f008 fcad 	bl	1d378 <_ZN4ClapaSERKS_>
   14a1e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
   14a22:	4618      	mov	r0, r3
   14a24:	f7fb f8a0 	bl	fb68 <_ZN4ClapD1Ev>
    actionEtape[4] = &actionClap[1];
   14a28:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14a2c:	681b      	ldr	r3, [r3, #0]
   14a2e:	6a5b      	ldr	r3, [r3, #36]
   14a30:	f103 0210 	add.w	r2, r3, #16	; 0x10
   14a34:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14a38:	681b      	ldr	r3, [r3, #0]
   14a3a:	f103 0370 	add.w	r3, r3, #112	; 0x70
   14a3e:	6013      	str	r3, [r2, #0]
    actionClap[2] = Clap(Position(2500, 1780, isYellow),Position(2300, 1780, isYellow));
   14a40:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14a44:	681b      	ldr	r3, [r3, #0]
   14a46:	f103 0498 	add.w	r4, r3, #152	; 0x98
   14a4a:	f507 6281 	add.w	r2, r7, #1032	; 0x408
   14a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14a52:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14a56:	781b      	ldrb	r3, [r3, #0]
   14a58:	4610      	mov	r0, r2
   14a5a:	f8df 17a8 	ldr.w	r1, [pc, #1960]	; 15204 <_ZN9Krabi2015C2Eb+0x20bc>
   14a5e:	f8df 2794 	ldr.w	r2, [pc, #1940]	; 151f4 <_ZN9Krabi2015C2Eb+0x20ac>
   14a62:	f7fa f9ab 	bl	edbc <_ZN8PositionC1Effb>
   14a66:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   14a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14a6e:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14a72:	781b      	ldrb	r3, [r3, #0]
   14a74:	4610      	mov	r0, r2
   14a76:	f8df 1790 	ldr.w	r1, [pc, #1936]	; 15208 <_ZN9Krabi2015C2Eb+0x20c0>
   14a7a:	f8df 2778 	ldr.w	r2, [pc, #1912]	; 151f4 <_ZN9Krabi2015C2Eb+0x20ac>
   14a7e:	f7fa f99d 	bl	edbc <_ZN8PositionC1Effb>
   14a82:	f507 7078 	add.w	r0, r7, #992	; 0x3e0
   14a86:	f507 6181 	add.w	r1, r7, #1032	; 0x408
   14a8a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
   14a8e:	6853      	ldr	r3, [r2, #4]
   14a90:	9300      	str	r3, [sp, #0]
   14a92:	6813      	ldr	r3, [r2, #0]
   14a94:	c906      	ldmia	r1!, {r1, r2}
   14a96:	f7fb f89f 	bl	fbd8 <_ZN4ClapC1E8PositionS0_>
   14a9a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   14a9e:	4620      	mov	r0, r4
   14aa0:	4619      	mov	r1, r3
   14aa2:	f008 fc69 	bl	1d378 <_ZN4ClapaSERKS_>
   14aa6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
   14aaa:	4618      	mov	r0, r3
   14aac:	f7fb f85c 	bl	fb68 <_ZN4ClapD1Ev>
    actionEtape[6] = &actionClap[2];
   14ab0:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14ab4:	681b      	ldr	r3, [r3, #0]
   14ab6:	6a5b      	ldr	r3, [r3, #36]
   14ab8:	f103 0218 	add.w	r2, r3, #24	; 0x18
   14abc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14ac0:	681b      	ldr	r3, [r3, #0]
   14ac2:	f103 0398 	add.w	r3, r3, #152	; 0x98
   14ac6:	6013      	str	r3, [r2, #0]
    actionGobelet[0] = Gobelet(Position(250, 1750, isYellow));
   14ac8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14acc:	681b      	ldr	r3, [r3, #0]
   14ace:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
   14ad2:	f507 6287 	add.w	r2, r7, #1080	; 0x438
   14ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14ada:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14ade:	781b      	ldrb	r3, [r3, #0]
   14ae0:	4610      	mov	r0, r2
   14ae2:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 1520c <_ZN9Krabi2015C2Eb+0x20c4>
   14ae6:	f8df 2728 	ldr.w	r2, [pc, #1832]	; 15210 <_ZN9Krabi2015C2Eb+0x20c8>
   14aea:	f7fa f967 	bl	edbc <_ZN8PositionC1Effb>
   14aee:	f507 6283 	add.w	r2, r7, #1048	; 0x418
   14af2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
   14af6:	4610      	mov	r0, r2
   14af8:	e893 0006 	ldmia.w	r3, {r1, r2}
   14afc:	f7fc f980 	bl	10e00 <_ZN7GobeletC1E8Position>
   14b00:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   14b04:	4620      	mov	r0, r4
   14b06:	4619      	mov	r1, r3
   14b08:	f008 fc5e 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   14b0c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
   14b10:	4618      	mov	r0, r3
   14b12:	f7fc f93d 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[8] = &actionGobelet[0];
   14b16:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14b1a:	681b      	ldr	r3, [r3, #0]
   14b1c:	6a5b      	ldr	r3, [r3, #36]
   14b1e:	f103 0220 	add.w	r2, r3, #32	; 0x20
   14b22:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14b26:	681b      	ldr	r3, [r3, #0]
   14b28:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   14b2c:	6013      	str	r3, [r2, #0]
    actionGobelet[1] = Gobelet(Position(910, 830, isYellow));
   14b2e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14b32:	681b      	ldr	r3, [r3, #0]
   14b34:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
   14b38:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   14b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14b40:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14b44:	781b      	ldrb	r3, [r3, #0]
   14b46:	4610      	mov	r0, r2
   14b48:	f8df 16c8 	ldr.w	r1, [pc, #1736]	; 15214 <_ZN9Krabi2015C2Eb+0x20cc>
   14b4c:	f8df 26c8 	ldr.w	r2, [pc, #1736]	; 15218 <_ZN9Krabi2015C2Eb+0x20d0>
   14b50:	f7fa f934 	bl	edbc <_ZN8PositionC1Effb>
   14b54:	f507 6288 	add.w	r2, r7, #1088	; 0x440
   14b58:	f507 638c 	add.w	r3, r7, #1120	; 0x460
   14b5c:	4610      	mov	r0, r2
   14b5e:	e893 0006 	ldmia.w	r3, {r1, r2}
   14b62:	f7fc f94d 	bl	10e00 <_ZN7GobeletC1E8Position>
   14b66:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   14b6a:	4620      	mov	r0, r4
   14b6c:	4619      	mov	r1, r3
   14b6e:	f008 fc2b 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   14b72:	f507 6388 	add.w	r3, r7, #1088	; 0x440
   14b76:	4618      	mov	r0, r3
   14b78:	f7fc f90a 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[9] = &actionGobelet[1];
   14b7c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14b80:	681b      	ldr	r3, [r3, #0]
   14b82:	6a5b      	ldr	r3, [r3, #36]
   14b84:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14b88:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14b8c:	681b      	ldr	r3, [r3, #0]
   14b8e:	f103 03e0 	add.w	r3, r3, #224	; 0xe0
   14b92:	6013      	str	r3, [r2, #0]
    actionGobelet[2] = Gobelet(Position(1500, 1650, isYellow));
   14b94:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14b98:	681b      	ldr	r3, [r3, #0]
   14b9a:	f503 7480 	add.w	r4, r3, #256	; 0x100
   14b9e:	f507 6291 	add.w	r2, r7, #1160	; 0x488
   14ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14ba6:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14baa:	781b      	ldrb	r3, [r3, #0]
   14bac:	4610      	mov	r0, r2
   14bae:	f8df 166c 	ldr.w	r1, [pc, #1644]	; 1521c <_ZN9Krabi2015C2Eb+0x20d4>
   14bb2:	f8df 266c 	ldr.w	r2, [pc, #1644]	; 15220 <_ZN9Krabi2015C2Eb+0x20d8>
   14bb6:	f7fa f901 	bl	edbc <_ZN8PositionC1Effb>
   14bba:	f507 628d 	add.w	r2, r7, #1128	; 0x468
   14bbe:	f507 6391 	add.w	r3, r7, #1160	; 0x488
   14bc2:	4610      	mov	r0, r2
   14bc4:	e893 0006 	ldmia.w	r3, {r1, r2}
   14bc8:	f7fc f91a 	bl	10e00 <_ZN7GobeletC1E8Position>
   14bcc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   14bd0:	4620      	mov	r0, r4
   14bd2:	4619      	mov	r1, r3
   14bd4:	f008 fbf8 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   14bd8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
   14bdc:	4618      	mov	r0, r3
   14bde:	f7fc f8d7 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[10] = &actionGobelet[2];
   14be2:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14be6:	681b      	ldr	r3, [r3, #0]
   14be8:	6a5b      	ldr	r3, [r3, #36]
   14bea:	f103 0228 	add.w	r2, r3, #40	; 0x28
   14bee:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14bf2:	681b      	ldr	r3, [r3, #0]
   14bf4:	f503 7380 	add.w	r3, r3, #256	; 0x100
   14bf8:	6013      	str	r3, [r2, #0]
    actionGobelet[3] = Gobelet(Position(2090, 830, isYellow));
   14bfa:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14bfe:	681b      	ldr	r3, [r3, #0]
   14c00:	f503 7490 	add.w	r4, r3, #288	; 0x120
   14c04:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
   14c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14c0c:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14c10:	781b      	ldrb	r3, [r3, #0]
   14c12:	4610      	mov	r0, r2
   14c14:	f8df 160c 	ldr.w	r1, [pc, #1548]	; 15224 <_ZN9Krabi2015C2Eb+0x20dc>
   14c18:	f8df 25fc 	ldr.w	r2, [pc, #1532]	; 15218 <_ZN9Krabi2015C2Eb+0x20d0>
   14c1c:	f7fa f8ce 	bl	edbc <_ZN8PositionC1Effb>
   14c20:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   14c24:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
   14c28:	4610      	mov	r0, r2
   14c2a:	e893 0006 	ldmia.w	r3, {r1, r2}
   14c2e:	f7fc f8e7 	bl	10e00 <_ZN7GobeletC1E8Position>
   14c32:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   14c36:	4620      	mov	r0, r4
   14c38:	4619      	mov	r1, r3
   14c3a:	f008 fbc5 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   14c3e:	f507 6392 	add.w	r3, r7, #1168	; 0x490
   14c42:	4618      	mov	r0, r3
   14c44:	f7fc f8a4 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[11] = &actionGobelet[3];
   14c48:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14c4c:	681b      	ldr	r3, [r3, #0]
   14c4e:	6a5b      	ldr	r3, [r3, #36]
   14c50:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   14c54:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14c58:	681b      	ldr	r3, [r3, #0]
   14c5a:	f503 7390 	add.w	r3, r3, #288	; 0x120
   14c5e:	6013      	str	r3, [r2, #0]
    actionGobelet[4] = Gobelet(Position(2750, 1750, isYellow));
   14c60:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14c64:	681b      	ldr	r3, [r3, #0]
   14c66:	f503 74a0 	add.w	r4, r3, #320	; 0x140
   14c6a:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
   14c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14c72:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14c76:	781b      	ldrb	r3, [r3, #0]
   14c78:	4610      	mov	r0, r2
   14c7a:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 15228 <_ZN9Krabi2015C2Eb+0x20e0>
   14c7e:	f8df 2590 	ldr.w	r2, [pc, #1424]	; 15210 <_ZN9Krabi2015C2Eb+0x20c8>
   14c82:	f7fa f89b 	bl	edbc <_ZN8PositionC1Effb>
   14c86:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   14c8a:	4618      	mov	r0, r3
   14c8c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
   14c90:	e893 0006 	ldmia.w	r3, {r1, r2}
   14c94:	f7fc f8b4 	bl	10e00 <_ZN7GobeletC1E8Position>
   14c98:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   14c9c:	4620      	mov	r0, r4
   14c9e:	4619      	mov	r1, r3
   14ca0:	f008 fb92 	bl	1d3c8 <_ZN7GobeletaSERKS_>
   14ca4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
   14ca8:	4618      	mov	r0, r3
   14caa:	f7fc f871 	bl	10d90 <_ZN7GobeletD1Ev>
    actionEtape[12] = &actionGobelet[4];
   14cae:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14cb2:	681b      	ldr	r3, [r3, #0]
   14cb4:	6a5b      	ldr	r3, [r3, #36]
   14cb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
   14cba:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14cbe:	681b      	ldr	r3, [r3, #0]
   14cc0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   14cc4:	6013      	str	r3, [r2, #0]
    actionTapis[0] = Tapis(Position(1220, 760, isYellow));
   14cc6:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14cca:	681b      	ldr	r3, [r3, #0]
   14ccc:	f503 74b0 	add.w	r4, r3, #352	; 0x160
   14cd0:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
   14cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
   14cd8:	f1a3 0305 	sub.w	r3, r3, #5	; 0x5
   14cdc:	781b      	ldrb	r3, [r3, #0]
   14cde:	4610      	mov	r0, r2
   14ce0:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 1522c <_ZN9Krabi2015C2Eb+0x20e4>
   14ce4:	f8df 2548 	ldr.w	r2, [pc, #1352]	; 15230 <_ZN9Krabi2015C2Eb+0x20e8>
   14ce8:	f7fa f868 	bl	edbc <_ZN8PositionC1Effb>
   14cec:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   14cf0:	4618      	mov	r0, r3
   14cf2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
   14cf6:	e893 0006 	ldmia.w	r3, {r1, r2}
   14cfa:	f002 fd4d 	bl	17798 <_ZN5TapisC1E8Position>
   14cfe:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   14d02:	4620      	mov	r0, r4
   14d04:	4619      	mov	r1, r3
   14d06:	f008 fb7b 	bl	1d400 <_ZN5TapisaSERKS_>
   14d0a:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
   14d0e:	4618      	mov	r0, r3
   14d10:	f002 fcae 	bl	17670 <_ZN5TapisD1Ev>
    actionEtape[23] = &actionTapis[0];
   14d14:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14d18:	681b      	ldr	r3, [r3, #0]
   14d1a:	6a5b      	ldr	r3, [r3, #36]
   14d1c:	f103 025c 	add.w	r2, r3, #92	; 0x5c
   14d20:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   14d24:	681b      	ldr	r3, [r3, #0]
   14d26:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   14d2a:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   14d2c:	f8d7 0514 	ldr.w	r0, [r7, #1300]
   14d30:	f8d7 1518 	ldr.w	r1, [r7, #1304]
   14d34:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d38:	f7fb fdfe 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   14d3c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14d40:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   14d44:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d48:	f7fb fdf6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   14d4c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14d50:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   14d54:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d58:	f7fb fdee 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape33);
   14d5c:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14d60:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   14d64:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d68:	f7fb fde6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape24);
   14d6c:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   14d70:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   14d74:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d78:	f7fb fdde 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   14d7c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14d80:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   14d84:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d88:	f7fb fdd6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   14d8c:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   14d90:	f8d7 1520 	ldr.w	r1, [r7, #1312]
   14d94:	f04f 0201 	mov.w	r2, #1	; 0x1
   14d98:	f7fb fdce 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   14d9c:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   14da0:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   14da4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14da8:	f7fb fdc6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape4);
   14dac:	f8d7 051c 	ldr.w	r0, [r7, #1308]
   14db0:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   14db4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14db8:	f7fb fdbe 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   14dbc:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14dc0:	f8d7 1528 	ldr.w	r1, [r7, #1320]
   14dc4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14dc8:	f7fb fdb6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   14dcc:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14dd0:	f8d7 1548 	ldr.w	r1, [r7, #1352]
   14dd4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14dd8:	f7fb fdae 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   14ddc:	f8d7 0524 	ldr.w	r0, [r7, #1316]
   14de0:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   14de4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14de8:	f7fb fda6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   14dec:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   14df0:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   14df4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14df8:	f7fb fd9e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   14dfc:	f8d7 0518 	ldr.w	r0, [r7, #1304]
   14e00:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   14e04:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e08:	f7fb fd96 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   14e0c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14e10:	f8d7 151c 	ldr.w	r1, [r7, #1308]
   14e14:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e18:	f7fb fd8e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   14e1c:	f8d7 0548 	ldr.w	r0, [r7, #1352]
   14e20:	f8d7 154c 	ldr.w	r1, [r7, #1356]
   14e24:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e28:	f7fb fd86 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   14e2c:	f8d7 054c 	ldr.w	r0, [r7, #1356]
   14e30:	f8d7 1534 	ldr.w	r1, [r7, #1332]
   14e34:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e38:	f7fb fd7e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   14e3c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14e40:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14e44:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e48:	f7fb fd76 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   14e4c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   14e50:	f8d7 1560 	ldr.w	r1, [r7, #1376]
   14e54:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e58:	f7fb fd6e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape19->addVoisin(etape27);
   14e5c:	f8d7 0560 	ldr.w	r0, [r7, #1376]
   14e60:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   14e64:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e68:	f7fb fd66 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape27->addVoisin(etape21);
   14e6c:	f8d7 0580 	ldr.w	r0, [r7, #1408]
   14e70:	f8d7 1568 	ldr.w	r1, [r7, #1384]
   14e74:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e78:	f7fb fd5e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape27);
   14e7c:	f8d7 0520 	ldr.w	r0, [r7, #1312]
   14e80:	f8d7 1580 	ldr.w	r1, [r7, #1408]
   14e84:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e88:	f7fb fd56 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape33);
   14e8c:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14e90:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   14e94:	f04f 0201 	mov.w	r2, #1	; 0x1
   14e98:	f7fb fd4e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape20);
   14e9c:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   14ea0:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14ea4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ea8:	f7fb fd46 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   14eac:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14eb0:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   14eb4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14eb8:	f7fb fd3e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   14ebc:	f8d7 0568 	ldr.w	r0, [r7, #1384]
   14ec0:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   14ec4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ec8:	f7fb fd36 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   14ecc:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14ed0:	f8d7 156c 	ldr.w	r1, [r7, #1388]
   14ed4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ed8:	f7fb fd2e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   14edc:	f8d7 0564 	ldr.w	r0, [r7, #1380]
   14ee0:	f8d7 153c 	ldr.w	r1, [r7, #1340]
   14ee4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ee8:	f7fb fd26 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape35);
   14eec:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14ef0:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   14ef4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ef8:	f7fb fd1e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape11);
   14efc:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   14f00:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14f04:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f08:	f7fb fd16 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   14f0c:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   14f10:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   14f14:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f18:	f7fb fd0e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   14f1c:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14f20:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14f24:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f28:	f7fb fd06 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape6);
   14f2c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14f30:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   14f34:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f38:	f7fb fcfe 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape7);
   14f3c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14f40:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   14f44:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f48:	f7fb fcf6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape12);
   14f4c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14f50:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   14f54:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f58:	f7fb fcee 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape25);
   14f5c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14f60:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   14f64:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f68:	f7fb fce6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   14f6c:	f8d7 052c 	ldr.w	r0, [r7, #1324]
   14f70:	f8d7 1544 	ldr.w	r1, [r7, #1348]
   14f74:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f78:	f7fb fcde 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape25);
   14f7c:	f8d7 0544 	ldr.w	r0, [r7, #1348]
   14f80:	f8d7 1578 	ldr.w	r1, [r7, #1400]
   14f84:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f88:	f7fb fcd6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape24->addVoisin(etape11);
   14f8c:	f8d7 0574 	ldr.w	r0, [r7, #1396]
   14f90:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14f94:	f04f 0201 	mov.w	r2, #1	; 0x1
   14f98:	f7fb fcce 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   14f9c:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14fa0:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   14fa4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14fa8:	f7fb fcc6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   14fac:	f8d7 053c 	ldr.w	r0, [r7, #1340]
   14fb0:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14fb4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14fb8:	f7fb fcbe 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   14fbc:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14fc0:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   14fc4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14fc8:	f7fb fcb6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape26);
   14fcc:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   14fd0:	f8d7 157c 	ldr.w	r1, [r7, #1404]
   14fd4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14fd8:	f7fb fcae 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape32);
   14fdc:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   14fe0:	f8d7 1594 	ldr.w	r1, [r7, #1428]
   14fe4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14fe8:	f7fb fca6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape32->addVoisin(etape15);
   14fec:	f8d7 0594 	ldr.w	r0, [r7, #1428]
   14ff0:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   14ff4:	f04f 0201 	mov.w	r2, #1	; 0x1
   14ff8:	f7fb fc9e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   14ffc:	f8d7 0538 	ldr.w	r0, [r7, #1336]
   15000:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   15004:	f04f 0201 	mov.w	r2, #1	; 0x1
   15008:	f7fb fc96 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   1500c:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   15010:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   15014:	f04f 0201 	mov.w	r2, #1	; 0x1
   15018:	f7fb fc8e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   1501c:	f8d7 0554 	ldr.w	r0, [r7, #1364]
   15020:	f8d7 1550 	ldr.w	r1, [r7, #1360]
   15024:	f04f 0201 	mov.w	r2, #1	; 0x1
   15028:	f7fb fc86 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   1502c:	f8d7 0550 	ldr.w	r0, [r7, #1360]
   15030:	f8d7 1558 	ldr.w	r1, [r7, #1368]
   15034:	f04f 0201 	mov.w	r2, #1	; 0x1
   15038:	f7fb fc7e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape9);
   1503c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   15040:	f8d7 1538 	ldr.w	r1, [r7, #1336]
   15044:	f04f 0201 	mov.w	r2, #1	; 0x1
   15048:	f7fb fc76 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape20);
   1504c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   15050:	f8d7 1564 	ldr.w	r1, [r7, #1380]
   15054:	f04f 0201 	mov.w	r2, #1	; 0x1
   15058:	f7fb fc6e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   1505c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   15060:	f8d7 1540 	ldr.w	r1, [r7, #1344]
   15064:	f04f 0201 	mov.w	r2, #1	; 0x1
   15068:	f7fb fc66 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape28);
   1506c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   15070:	f8d7 1584 	ldr.w	r1, [r7, #1412]
   15074:	f04f 0201 	mov.w	r2, #1	; 0x1
   15078:	f7fb fc5e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape29);
   1507c:	f8d7 055c 	ldr.w	r0, [r7, #1372]
   15080:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   15084:	f04f 0201 	mov.w	r2, #1	; 0x1
   15088:	f7fb fc56 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape30);
   1508c:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   15090:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   15094:	f04f 0201 	mov.w	r2, #1	; 0x1
   15098:	f7fb fc4e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape29->addVoisin(etape31);
   1509c:	f8d7 0588 	ldr.w	r0, [r7, #1416]
   150a0:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   150a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   150a8:	f7fb fc46 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape31);
   150ac:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   150b0:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   150b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   150b8:	f7fb fc3e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape18);
   150bc:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   150c0:	f8d7 155c 	ldr.w	r1, [r7, #1372]
   150c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   150c8:	f7fb fc36 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape30->addVoisin(etape4);
   150cc:	f8d7 058c 	ldr.w	r0, [r7, #1420]
   150d0:	f8d7 1524 	ldr.w	r1, [r7, #1316]
   150d4:	f04f 0201 	mov.w	r2, #1	; 0x1
   150d8:	f7fb fc2e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape29);
   150dc:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   150e0:	f8d7 1588 	ldr.w	r1, [r7, #1416]
   150e4:	f04f 0201 	mov.w	r2, #1	; 0x1
   150e8:	f7fb fc26 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape30);
   150ec:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   150f0:	f8d7 158c 	ldr.w	r1, [r7, #1420]
   150f4:	f04f 0201 	mov.w	r2, #1	; 0x1
   150f8:	f7fb fc1e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape28->addVoisin(etape31);
   150fc:	f8d7 0584 	ldr.w	r0, [r7, #1412]
   15100:	f8d7 1590 	ldr.w	r1, [r7, #1424]
   15104:	f04f 0201 	mov.w	r2, #1	; 0x1
   15108:	f7fb fc16 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape33->addVoisin(etape34);
   1510c:	f8d7 0598 	ldr.w	r0, [r7, #1432]
   15110:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   15114:	f04f 0201 	mov.w	r2, #1	; 0x1
   15118:	f7fb fc0e 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape34->addVoisin(etape35);
   1511c:	f8d7 059c 	ldr.w	r0, [r7, #1436]
   15120:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   15124:	f04f 0201 	mov.w	r2, #1	; 0x1
   15128:	f7fb fc06 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape24);
   1512c:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   15130:	f8d7 1574 	ldr.w	r1, [r7, #1396]
   15134:	f04f 0201 	mov.w	r2, #1	; 0x1
   15138:	f7fb fbfe 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape35->addVoisin(etape37);
   1513c:	f8d7 05a0 	ldr.w	r0, [r7, #1440]
   15140:	f8d7 15a8 	ldr.w	r1, [r7, #1448]
   15144:	f04f 0201 	mov.w	r2, #1	; 0x1
   15148:	f7fb fbf6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape37->addVoisin(etape36);
   1514c:	f8d7 05a8 	ldr.w	r0, [r7, #1448]
   15150:	f8d7 15a4 	ldr.w	r1, [r7, #1444]
   15154:	f04f 0201 	mov.w	r2, #1	; 0x1
   15158:	f7fb fbee 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape6);
   1515c:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   15160:	f8d7 152c 	ldr.w	r1, [r7, #1324]
   15164:	f04f 0201 	mov.w	r2, #1	; 0x1
   15168:	f7fb fbe6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape36->addVoisin(etape7);
   1516c:	f8d7 05a4 	ldr.w	r0, [r7, #1444]
   15170:	f8d7 1530 	ldr.w	r1, [r7, #1328]
   15174:	f04f 0201 	mov.w	r2, #1	; 0x1
   15178:	f7fb fbde 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape33);
   1517c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   15180:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   15184:	f04f 0201 	mov.w	r2, #1	; 0x1
   15188:	f7fb fbd6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape34);
   1518c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   15190:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   15194:	f04f 0201 	mov.w	r2, #1	; 0x1
   15198:	f7fb fbce 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape35);
   1519c:	f8d7 0570 	ldr.w	r0, [r7, #1392]
   151a0:	f8d7 15a0 	ldr.w	r1, [r7, #1440]
   151a4:	f04f 0201 	mov.w	r2, #1	; 0x1
   151a8:	f7fb fbc6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape33);
   151ac:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   151b0:	f8d7 1598 	ldr.w	r1, [r7, #1432]
   151b4:	f04f 0201 	mov.w	r2, #1	; 0x1
   151b8:	f7fb fbbe 	bl	10938 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape34);
   151bc:	f8d7 0540 	ldr.w	r0, [r7, #1344]
   151c0:	f8d7 159c 	ldr.w	r1, [r7, #1436]
   151c4:	f04f 0201 	mov.w	r2, #1	; 0x1
   151c8:	f7fb fbb6 	bl	10938 <_ZN5Etape9addVoisinEPS_b>

    // Lancer Dijkstra
    startDijkstra();
   151cc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   151d0:	681b      	ldr	r3, [r3, #0]
   151d2:	4618      	mov	r0, r3
   151d4:	f001 fd74 	bl	16cc0 <_ZN11StrategieV313startDijkstraEv>
}
   151d8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   151dc:	681b      	ldr	r3, [r3, #0]
   151de:	4618      	mov	r0, r3
   151e0:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
   151e4:	f507 6780 	add.w	r7, r7, #1024	; 0x400
   151e8:	46bd      	mov	sp, r7
   151ea:	bd90      	pop	{r4, r7, pc}
   151ec:	41f00000 	.word	0x41f00000
   151f0:	44510000 	.word	0x44510000
   151f4:	44de8000 	.word	0x44de8000
   151f8:	447a0000 	.word	0x447a0000
   151fc:	436c0000 	.word	0x436c0000
   15200:	43c80000 	.word	0x43c80000
   15204:	451c4000 	.word	0x451c4000
   15208:	450fc000 	.word	0x450fc000
   1520c:	437a0000 	.word	0x437a0000
   15210:	44dac000 	.word	0x44dac000
   15214:	44638000 	.word	0x44638000
   15218:	444f8000 	.word	0x444f8000
   1521c:	44bb8000 	.word	0x44bb8000
   15220:	44ce4000 	.word	0x44ce4000
   15224:	4502a000 	.word	0x4502a000
   15228:	452be000 	.word	0x452be000
   1522c:	44988000 	.word	0x44988000
   15230:	443e0000 	.word	0x443e0000

00015234 <_ZN17MediumLevelAction15getGoalPositionEv>:
MediumLevelAction::~MediumLevelAction()
{
    //dtor
}

Position MediumLevelAction::getGoalPosition()
   15234:	b480      	push	{r7}
   15236:	b083      	sub	sp, #12
   15238:	af00      	add	r7, sp, #0
   1523a:	4684      	mov	ip, r0
   1523c:	6079      	str	r1, [r7, #4]
{
    return goalPosition;
   1523e:	687b      	ldr	r3, [r7, #4]
   15240:	4662      	mov	r2, ip
   15242:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15246:	e893 0003 	ldmia.w	r3, {r0, r1}
   1524a:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1524e:	4660      	mov	r0, ip
   15250:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15254:	46bd      	mov	sp, r7
   15256:	bc80      	pop	{r7}
   15258:	4770      	bx	lr
   1525a:	46c0      	nop			(mov r8, r8)

0001525c <_ZN17MediumLevelAction9getGoBackEv>:

bool MediumLevelAction::getGoBack()
   1525c:	b480      	push	{r7}
   1525e:	b083      	sub	sp, #12
   15260:	af00      	add	r7, sp, #0
   15262:	6078      	str	r0, [r7, #4]
{
    return goBack;
   15264:	687b      	ldr	r3, [r7, #4]
   15266:	7c1b      	ldrb	r3, [r3, #16]
}
   15268:	4618      	mov	r0, r3
   1526a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1526e:	46bd      	mov	sp, r7
   15270:	bc80      	pop	{r7}
   15272:	4770      	bx	lr

00015274 <_ZN17MediumLevelAction16collisionAvoidedEv>:

void MediumLevelAction::collisionAvoided()
   15274:	b480      	push	{r7}
   15276:	b083      	sub	sp, #12
   15278:	af00      	add	r7, sp, #0
   1527a:	6078      	str	r0, [r7, #4]
{
    status = 0; // reinitialize the status if function not overloaded
   1527c:	687a      	ldr	r2, [r7, #4]
   1527e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15282:	60d3      	str	r3, [r2, #12]
}
   15284:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15288:	46bd      	mov	sp, r7
   1528a:	bc80      	pop	{r7}
   1528c:	4770      	bx	lr
   1528e:	46c0      	nop			(mov r8, r8)

00015290 <_ZN17MediumLevelAction9setGoBackEb>:

void MediumLevelAction::setGoBack(bool val)
   15290:	b480      	push	{r7}
   15292:	b083      	sub	sp, #12
   15294:	af00      	add	r7, sp, #0
   15296:	6078      	str	r0, [r7, #4]
   15298:	460b      	mov	r3, r1
   1529a:	70fb      	strb	r3, [r7, #3]
{
    goBack = val;
   1529c:	687a      	ldr	r2, [r7, #4]
   1529e:	78fb      	ldrb	r3, [r7, #3]
   152a0:	7413      	strb	r3, [r2, #16]
}
   152a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   152a6:	46bd      	mov	sp, r7
   152a8:	bc80      	pop	{r7}
   152aa:	4770      	bx	lr

000152ac <_ZN17MediumLevelAction5resetEv>:

void MediumLevelAction::reset()
   152ac:	b480      	push	{r7}
   152ae:	b083      	sub	sp, #12
   152b0:	af00      	add	r7, sp, #0
   152b2:	6078      	str	r0, [r7, #4]
{

}
   152b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   152b8:	46bd      	mov	sp, r7
   152ba:	bc80      	pop	{r7}
   152bc:	4770      	bx	lr
   152be:	46c0      	nop			(mov r8, r8)

000152c0 <_ZN17MediumLevelAction10updateTimeEi>:
{

}
#endif

void MediumLevelAction::updateTime(int millisecondesRestantes)
   152c0:	b480      	push	{r7}
   152c2:	b083      	sub	sp, #12
   152c4:	af00      	add	r7, sp, #0
   152c6:	6078      	str	r0, [r7, #4]
   152c8:	6039      	str	r1, [r7, #0]
{
    this->millisecondesRestantes = millisecondesRestantes;
   152ca:	687a      	ldr	r2, [r7, #4]
   152cc:	683b      	ldr	r3, [r7, #0]
   152ce:	6153      	str	r3, [r2, #20]
}
   152d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   152d4:	46bd      	mov	sp, r7
   152d6:	bc80      	pop	{r7}
   152d8:	4770      	bx	lr
   152da:	46c0      	nop			(mov r8, r8)

000152dc <_ZN17MediumLevelActionD0Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   152dc:	b580      	push	{r7, lr}
   152de:	b082      	sub	sp, #8
   152e0:	af00      	add	r7, sp, #0
   152e2:	6078      	str	r0, [r7, #4]
   152e4:	687a      	ldr	r2, [r7, #4]
   152e6:	4b08      	ldr	r3, [pc, #32]	(15308 <_ZN17MediumLevelActionD0Ev+0x2c>)
   152e8:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   152ea:	f04f 0301 	mov.w	r3, #1	; 0x1
   152ee:	b2db      	uxtb	r3, r3
   152f0:	2b00      	cmp	r3, #0
   152f2:	d002      	beq.n	152fa <_ZN17MediumLevelActionD0Ev+0x1e>
   152f4:	6878      	ldr	r0, [r7, #4]
   152f6:	f7f9 fca1 	bl	ec3c <_ZdlPv>
   152fa:	687b      	ldr	r3, [r7, #4]
   152fc:	4618      	mov	r0, r3
   152fe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15302:	46bd      	mov	sp, r7
   15304:	bd80      	pop	{r7, pc}
   15306:	46c0      	nop			(mov r8, r8)
   15308:	00022440 	.word	0x00022440

0001530c <_ZN17MediumLevelActionD1Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   1530c:	b580      	push	{r7, lr}
   1530e:	b082      	sub	sp, #8
   15310:	af00      	add	r7, sp, #0
   15312:	6078      	str	r0, [r7, #4]
   15314:	687a      	ldr	r2, [r7, #4]
   15316:	4b08      	ldr	r3, [pc, #32]	(15338 <_ZN17MediumLevelActionD1Ev+0x2c>)
   15318:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1531a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1531e:	b2db      	uxtb	r3, r3
   15320:	2b00      	cmp	r3, #0
   15322:	d002      	beq.n	1532a <_ZN17MediumLevelActionD1Ev+0x1e>
   15324:	6878      	ldr	r0, [r7, #4]
   15326:	f7f9 fc89 	bl	ec3c <_ZdlPv>
   1532a:	687b      	ldr	r3, [r7, #4]
   1532c:	4618      	mov	r0, r3
   1532e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15332:	46bd      	mov	sp, r7
   15334:	bd80      	pop	{r7, pc}
   15336:	46c0      	nop			(mov r8, r8)
   15338:	00022440 	.word	0x00022440

0001533c <_ZN17MediumLevelActionD2Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   1533c:	b580      	push	{r7, lr}
   1533e:	b082      	sub	sp, #8
   15340:	af00      	add	r7, sp, #0
   15342:	6078      	str	r0, [r7, #4]
   15344:	687a      	ldr	r2, [r7, #4]
   15346:	4b08      	ldr	r3, [pc, #32]	(15368 <_ZN17MediumLevelActionD2Ev+0x2c>)
   15348:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1534a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1534e:	b2db      	uxtb	r3, r3
   15350:	2b00      	cmp	r3, #0
   15352:	d002      	beq.n	1535a <_ZN17MediumLevelActionD2Ev+0x1e>
   15354:	6878      	ldr	r0, [r7, #4]
   15356:	f7f9 fc71 	bl	ec3c <_ZdlPv>
   1535a:	687b      	ldr	r3, [r7, #4]
   1535c:	4618      	mov	r0, r3
   1535e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15362:	46bd      	mov	sp, r7
   15364:	bd80      	pop	{r7, pc}
   15366:	46c0      	nop			(mov r8, r8)
   15368:	00022440 	.word	0x00022440

0001536c <_ZN17MediumLevelActionC1E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   1536c:	b580      	push	{r7, lr}
   1536e:	b084      	sub	sp, #16
   15370:	af00      	add	r7, sp, #0
   15372:	60f8      	str	r0, [r7, #12]
   15374:	f107 0304 	add.w	r3, r7, #4	; 0x4
   15378:	e883 0006 	stmia.w	r3, {r1, r2}
   1537c:	68fa      	ldr	r2, [r7, #12]
   1537e:	4b0e      	ldr	r3, [pc, #56]	(153b8 <_ZN17MediumLevelActionC1E8Position+0x4c>)
   15380:	6013      	str	r3, [r2, #0]
   15382:	68fb      	ldr	r3, [r7, #12]
   15384:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15388:	4618      	mov	r0, r3
   1538a:	f7f9 fcef 	bl	ed6c <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   1538e:	68fb      	ldr	r3, [r7, #12]
   15390:	f103 0304 	add.w	r3, r3, #4	; 0x4
   15394:	4618      	mov	r0, r3
   15396:	f107 0304 	add.w	r3, r7, #4	; 0x4
   1539a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1539e:	f7f9 fda1 	bl	eee4 <_ZN8PositionaSES_>
    status = 0;
   153a2:	68fa      	ldr	r2, [r7, #12]
   153a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   153a8:	60d3      	str	r3, [r2, #12]
}
   153aa:	68fb      	ldr	r3, [r7, #12]
   153ac:	4618      	mov	r0, r3
   153ae:	f107 0710 	add.w	r7, r7, #16	; 0x10
   153b2:	46bd      	mov	sp, r7
   153b4:	bd80      	pop	{r7, pc}
   153b6:	46c0      	nop			(mov r8, r8)
   153b8:	00022440 	.word	0x00022440

000153bc <_ZN17MediumLevelActionC2E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   153bc:	b580      	push	{r7, lr}
   153be:	b084      	sub	sp, #16
   153c0:	af00      	add	r7, sp, #0
   153c2:	60f8      	str	r0, [r7, #12]
   153c4:	f107 0304 	add.w	r3, r7, #4	; 0x4
   153c8:	e883 0006 	stmia.w	r3, {r1, r2}
   153cc:	68fa      	ldr	r2, [r7, #12]
   153ce:	4b0e      	ldr	r3, [pc, #56]	(15408 <_ZN17MediumLevelActionC2E8Position+0x4c>)
   153d0:	6013      	str	r3, [r2, #0]
   153d2:	68fb      	ldr	r3, [r7, #12]
   153d4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   153d8:	4618      	mov	r0, r3
   153da:	f7f9 fcc7 	bl	ed6c <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   153de:	68fb      	ldr	r3, [r7, #12]
   153e0:	f103 0304 	add.w	r3, r3, #4	; 0x4
   153e4:	4618      	mov	r0, r3
   153e6:	f107 0304 	add.w	r3, r7, #4	; 0x4
   153ea:	e893 0006 	ldmia.w	r3, {r1, r2}
   153ee:	f7f9 fd79 	bl	eee4 <_ZN8PositionaSES_>
    status = 0;
   153f2:	68fa      	ldr	r2, [r7, #12]
   153f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   153f8:	60d3      	str	r3, [r2, #12]
}
   153fa:	68fb      	ldr	r3, [r7, #12]
   153fc:	4618      	mov	r0, r3
   153fe:	f107 0710 	add.w	r7, r7, #16	; 0x10
   15402:	46bd      	mov	sp, r7
   15404:	bd80      	pop	{r7, pc}
   15406:	46c0      	nop			(mov r8, r8)
   15408:	00022440 	.word	0x00022440

0001540c <_ZN19RecalibrerOdometrie6updateEv>:
RecalibrerOdometrie::~RecalibrerOdometrie()
{
    //dtor
}

int RecalibrerOdometrie::update()
   1540c:	b590      	push	{r4, r7, lr}
   1540e:	b0d9      	sub	sp, #356
   15410:	af02      	add	r7, sp, #8
   15412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15416:	6018      	str	r0, [r3, #0]
{
    allumerLED();
   15418:	f7f7 f962 	bl	c6e0 <_Z10allumerLEDv>
    allumerLED2();
   1541c:	f7f7 f958 	bl	c6d0 <_Z11allumerLED2v>
//#ifndef ROBOTHW
//    status = -1;
//    return -1;
//#else
    if (status == 0)
   15420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15424:	681b      	ldr	r3, [r3, #0]
   15426:	68db      	ldr	r3, [r3, #12]
   15428:	2b00      	cmp	r3, #0
   1542a:	d115      	bne.n	15458 <_ZN19RecalibrerOdometrie6updateEv+0x4c>
    {
#ifndef ROBOTHW
        qDebug() << "recalibrerOdometrie";
#endif
        StrategieV2::setCurrentGoal(positionDepart, false);//Position(700, 1360,isBlue), false);
   1542c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15430:	681a      	ldr	r2, [r3, #0]
   15432:	f8df 37bc 	ldr.w	r3, [pc, #1980]	; 15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   15436:	9300      	str	r3, [sp, #0]
   15438:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1543c:	e893 0003 	ldmia.w	r3, {r0, r1}
   15440:	f04f 0200 	mov.w	r2, #0	; 0x0
   15444:	f8df 37ac 	ldr.w	r3, [pc, #1964]	; 15bf4 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   15448:	f000 ff68 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status = 1;
   1544c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15450:	681a      	ldr	r2, [r3, #0]
   15452:	f04f 0301 	mov.w	r3, #1	; 0x1
   15456:	60d3      	str	r3, [r2, #12]
    }
    if (status == 1) // attend d'être replacé
   15458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1545c:	681b      	ldr	r3, [r3, #0]
   1545e:	68db      	ldr	r3, [r3, #12]
   15460:	2b01      	cmp	r3, #1
   15462:	f040 808a 	bne.w	1557a <_ZN19RecalibrerOdometrie6updateEv+0x16e>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   15466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1546a:	681b      	ldr	r3, [r3, #0]
   1546c:	f103 0418 	add.w	r4, r3, #24	; 0x18
   15470:	f8df 3784 	ldr.w	r3, [pc, #1924]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15474:	681a      	ldr	r2, [r3, #0]
   15476:	f107 0364 	add.w	r3, r7, #100	; 0x64
   1547a:	4618      	mov	r0, r3
   1547c:	4611      	mov	r1, r2
   1547e:	f7f4 fd63 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15482:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   15486:	f107 0264 	add.w	r2, r7, #100	; 0x64
   1548a:	4618      	mov	r0, r3
   1548c:	4611      	mov	r1, r2
   1548e:	f7f9 fed1 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15492:	f107 0354 	add.w	r3, r7, #84	; 0x54
   15496:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   1549a:	4618      	mov	r0, r3
   1549c:	4621      	mov	r1, r4
   1549e:	f7f9 fcfb 	bl	ee98 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   154a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   154a6:	4618      	mov	r0, r3
   154a8:	f7f9 fe04 	bl	f0b4 <_ZNK8Position8getNormeEv>
   154ac:	4602      	mov	r2, r0
   154ae:	f04f 0300 	mov.w	r3, #0	; 0x0
   154b2:	72fb      	strb	r3, [r7, #11]
   154b4:	4610      	mov	r0, r2
   154b6:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 15bfc <_ZN19RecalibrerOdometrie6updateEv+0x7f0>
   154ba:	f006 f89b 	bl	1b5f4 <__aeabi_fcmplt>
   154be:	4603      	mov	r3, r0
   154c0:	2b00      	cmp	r3, #0
   154c2:	d002      	beq.n	154ca <_ZN19RecalibrerOdometrie6updateEv+0xbe>
   154c4:	f04f 0301 	mov.w	r3, #1	; 0x1
   154c8:	72fb      	strb	r3, [r7, #11]
   154ca:	7afb      	ldrb	r3, [r7, #11]
   154cc:	2b00      	cmp	r3, #0
   154ce:	d054      	beq.n	1557a <_ZN19RecalibrerOdometrie6updateEv+0x16e>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   154d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   154d4:	681b      	ldr	r3, [r3, #0]
   154d6:	6a9b      	ldr	r3, [r3, #40]
   154d8:	2b03      	cmp	r3, #3
   154da:	d005      	beq.n	154e8 <_ZN19RecalibrerOdometrie6updateEv+0xdc>
   154dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   154e0:	681b      	ldr	r3, [r3, #0]
   154e2:	6a9b      	ldr	r3, [r3, #40]
   154e4:	2b02      	cmp	r3, #2
   154e6:	d11f      	bne.n	15528 <_ZN19RecalibrerOdometrie6updateEv+0x11c>
            {
                StrategieV2::setCurrentGoal(Position(0, positionDepart.getY()), true, 0.5);
   154e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   154ec:	681b      	ldr	r3, [r3, #0]
   154ee:	f103 0318 	add.w	r3, r3, #24	; 0x18
   154f2:	4618      	mov	r0, r3
   154f4:	f7f9 fc82 	bl	edfc <_ZNK8Position4getYEv>
   154f8:	4602      	mov	r2, r0
   154fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
   154fe:	4618      	mov	r0, r3
   15500:	f8df 16fc 	ldr.w	r1, [pc, #1788]	; 15c00 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   15504:	f04f 0301 	mov.w	r3, #1	; 0x1
   15508:	f7f9 fc58 	bl	edbc <_ZN8PositionC1Effb>
   1550c:	f8df 36e0 	ldr.w	r3, [pc, #1760]	; 15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   15510:	9300      	str	r3, [sp, #0]
   15512:	f107 0370 	add.w	r3, r7, #112	; 0x70
   15516:	e893 0003 	ldmia.w	r3, {r0, r1}
   1551a:	f04f 0201 	mov.w	r2, #1	; 0x1
   1551e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 15c04 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   15522:	f000 fefb 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   15526:	e01e      	b.n	15566 <_ZN19RecalibrerOdometrie6updateEv+0x15a>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(3000, positionDepart.getY()), true, 0.5);
   15528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1552c:	681b      	ldr	r3, [r3, #0]
   1552e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15532:	4618      	mov	r0, r3
   15534:	f7f9 fc62 	bl	edfc <_ZNK8Position4getYEv>
   15538:	4602      	mov	r2, r0
   1553a:	f107 0378 	add.w	r3, r7, #120	; 0x78
   1553e:	4618      	mov	r0, r3
   15540:	f8df 16c4 	ldr.w	r1, [pc, #1732]	; 15c08 <_ZN19RecalibrerOdometrie6updateEv+0x7fc>
   15544:	f04f 0301 	mov.w	r3, #1	; 0x1
   15548:	f7f9 fc38 	bl	edbc <_ZN8PositionC1Effb>
   1554c:	f8df 36a0 	ldr.w	r3, [pc, #1696]	; 15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   15550:	9300      	str	r3, [sp, #0]
   15552:	f107 0378 	add.w	r3, r7, #120	; 0x78
   15556:	e893 0003 	ldmia.w	r3, {r0, r1}
   1555a:	f04f 0201 	mov.w	r2, #1	; 0x1
   1555e:	f8df 36a4 	ldr.w	r3, [pc, #1700]	; 15c04 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   15562:	f000 fedb 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            StrategieV2::setEnTrainDeRecalibrer(true);
   15566:	f04f 0001 	mov.w	r0, #1	; 0x1
   1556a:	f000 fcdd 	bl	15f28 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 2;
   1556e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15572:	681a      	ldr	r2, [r3, #0]
   15574:	f04f 0302 	mov.w	r3, #2	; 0x2
   15578:	60d3      	str	r3, [r2, #12]
        }
    }
    if (status == 2) // attend d'avoir synchro sur X
   1557a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1557e:	681b      	ldr	r3, [r3, #0]
   15580:	68db      	ldr	r3, [r3, #12]
   15582:	2b02      	cmp	r3, #2
   15584:	f040 8144 	bne.w	15810 <_ZN19RecalibrerOdometrie6updateEv+0x404>
    {
        static int timeBlockedY = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) //if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   15588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1558c:	681b      	ldr	r3, [r3, #0]
   1558e:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15592:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15596:	681a      	ldr	r2, [r3, #0]
   15598:	f107 0388 	add.w	r3, r7, #136	; 0x88
   1559c:	4618      	mov	r0, r3
   1559e:	4611      	mov	r1, r2
   155a0:	f7f4 fcd2 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   155a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
   155a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
   155ac:	4618      	mov	r0, r3
   155ae:	4611      	mov	r1, r2
   155b0:	f7f9 fe40 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   155b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   155b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
   155bc:	4618      	mov	r0, r3
   155be:	4621      	mov	r1, r4
   155c0:	f7f9 fc6a 	bl	ee98 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   155c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   155c8:	4618      	mov	r0, r3
   155ca:	f7f9 fd73 	bl	f0b4 <_ZNK8Position8getNormeEv>
   155ce:	4603      	mov	r3, r0
   155d0:	4618      	mov	r0, r3
   155d2:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 15c00 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   155d6:	f006 f82b 	bl	1b630 <__aeabi_fcmpgt>
   155da:	4603      	mov	r3, r0
   155dc:	2b00      	cmp	r3, #0
   155de:	d016      	beq.n	1560e <_ZN19RecalibrerOdometrie6updateEv+0x202>
   155e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   155e4:	4618      	mov	r0, r3
   155e6:	f7f9 fd65 	bl	f0b4 <_ZNK8Position8getNormeEv>
   155ea:	4602      	mov	r2, r0
   155ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   155f0:	72bb      	strb	r3, [r7, #10]
   155f2:	4610      	mov	r0, r2
   155f4:	f8df 1608 	ldr.w	r1, [pc, #1544]	; 15c00 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   155f8:	f005 fff2 	bl	1b5e0 <__aeabi_fcmpeq>
   155fc:	4603      	mov	r3, r0
   155fe:	2b00      	cmp	r3, #0
   15600:	d102      	bne.n	15608 <_ZN19RecalibrerOdometrie6updateEv+0x1fc>
   15602:	f04f 0301 	mov.w	r3, #1	; 0x1
   15606:	72bb      	strb	r3, [r7, #10]
   15608:	7abb      	ldrb	r3, [r7, #10]
   1560a:	60fb      	str	r3, [r7, #12]
   1560c:	e015      	b.n	1563a <_ZN19RecalibrerOdometrie6updateEv+0x22e>
   1560e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   15612:	4618      	mov	r0, r3
   15614:	f7f9 fd4e 	bl	f0b4 <_ZNK8Position8getNormeEv>
   15618:	4602      	mov	r2, r0
   1561a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1561e:	727b      	strb	r3, [r7, #9]
   15620:	4610      	mov	r0, r2
   15622:	f8df 15e8 	ldr.w	r1, [pc, #1512]	; 15c0c <_ZN19RecalibrerOdometrie6updateEv+0x800>
   15626:	f006 f803 	bl	1b630 <__aeabi_fcmpgt>
   1562a:	4603      	mov	r3, r0
   1562c:	2b00      	cmp	r3, #0
   1562e:	d002      	beq.n	15636 <_ZN19RecalibrerOdometrie6updateEv+0x22a>
   15630:	f04f 0301 	mov.w	r3, #1	; 0x1
   15634:	727b      	strb	r3, [r7, #9]
   15636:	7a7b      	ldrb	r3, [r7, #9]
   15638:	60fb      	str	r3, [r7, #12]
   1563a:	68fb      	ldr	r3, [r7, #12]
   1563c:	2b00      	cmp	r3, #0
   1563e:	d008      	beq.n	15652 <_ZN19RecalibrerOdometrie6updateEv+0x246>
        {
            timeBlockedY ++;
   15640:	f8df 35cc 	ldr.w	r3, [pc, #1484]	; 15c10 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   15644:	681b      	ldr	r3, [r3, #0]
   15646:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1564a:	f8df 35c4 	ldr.w	r3, [pc, #1476]	; 15c10 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   1564e:	601a      	str	r2, [r3, #0]
   15650:	e023      	b.n	1569a <_ZN19RecalibrerOdometrie6updateEv+0x28e>
//            allumerLED2();
        }
        else {
            timeBlockedY = 0;
   15652:	f8df 25bc 	ldr.w	r2, [pc, #1468]	; 15c10 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   15656:	f04f 0300 	mov.w	r3, #0	; 0x0
   1565a:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   1565c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15660:	681b      	ldr	r3, [r3, #0]
   15662:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15666:	f8df 3590 	ldr.w	r3, [pc, #1424]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1566a:	681a      	ldr	r2, [r3, #0]
   1566c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   15670:	4618      	mov	r0, r3
   15672:	4611      	mov	r1, r2
   15674:	f7f4 fc68 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15678:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1567c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
   15680:	4618      	mov	r0, r3
   15682:	4611      	mov	r1, r2
   15684:	f7f9 fdd6 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15688:	4620      	mov	r0, r4
   1568a:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1568e:	e893 0006 	ldmia.w	r3, {r1, r2}
   15692:	f7f9 fc27 	bl	eee4 <_ZN8PositionaSES_>
            eteindreLED2();
   15696:	f7f6 ffbf 	bl	c618 <_Z12eteindreLED2v>
        }
        if (timeBlockedY > 100 &&
   1569a:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 15c10 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   1569e:	681b      	ldr	r3, [r3, #0]
   156a0:	2b64      	cmp	r3, #100
   156a2:	dd59      	ble.n	15758 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   156a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   156a8:	681b      	ldr	r3, [r3, #0]
   156aa:	6a9b      	ldr	r3, [r3, #40]
   156ac:	2b00      	cmp	r3, #0
   156ae:	d005      	beq.n	156bc <_ZN19RecalibrerOdometrie6updateEv+0x2b0>
   156b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   156b4:	681b      	ldr	r3, [r3, #0]
   156b6:	6a9b      	ldr	r3, [r3, #40]
   156b8:	2b01      	cmp	r3, #1
   156ba:	d11e      	bne.n	156fa <_ZN19RecalibrerOdometrie6updateEv+0x2ee>
   156bc:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   156c0:	681a      	ldr	r2, [r3, #0]
   156c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
   156c6:	4618      	mov	r0, r3
   156c8:	4611      	mov	r1, r2
   156ca:	f7f4 fc3d 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   156ce:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   156d2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   156d6:	4618      	mov	r0, r3
   156d8:	4611      	mov	r1, r2
   156da:	f7f9 fdab 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   156de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   156e2:	4618      	mov	r0, r3
   156e4:	f7f9 fb7e 	bl	ede4 <_ZNK8Position4getXEv>
   156e8:	4603      	mov	r3, r0
   156ea:	4618      	mov	r0, r3
   156ec:	f8df 1524 	ldr.w	r1, [pc, #1316]	; 15c14 <_ZN19RecalibrerOdometrie6updateEv+0x808>
   156f0:	f005 ff9e 	bl	1b630 <__aeabi_fcmpgt>
   156f4:	4603      	mov	r3, r0
   156f6:	2b00      	cmp	r3, #0
   156f8:	d12a      	bne.n	15750 <_ZN19RecalibrerOdometrie6updateEv+0x344>
   156fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   156fe:	681b      	ldr	r3, [r3, #0]
   15700:	6a9b      	ldr	r3, [r3, #40]
   15702:	2b02      	cmp	r3, #2
   15704:	d005      	beq.n	15712 <_ZN19RecalibrerOdometrie6updateEv+0x306>
   15706:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1570a:	681b      	ldr	r3, [r3, #0]
   1570c:	6a9b      	ldr	r3, [r3, #40]
   1570e:	2b03      	cmp	r3, #3
   15710:	d122      	bne.n	15758 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   15712:	f8df 34e4 	ldr.w	r3, [pc, #1252]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15716:	681a      	ldr	r2, [r3, #0]
   15718:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
   1571c:	4618      	mov	r0, r3
   1571e:	4611      	mov	r1, r2
   15720:	f7f4 fc12 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15724:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   15728:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
   1572c:	4618      	mov	r0, r3
   1572e:	4611      	mov	r1, r2
   15730:	f7f9 fd80 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15734:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   15738:	4618      	mov	r0, r3
   1573a:	f7f9 fb53 	bl	ede4 <_ZNK8Position4getXEv>
   1573e:	4603      	mov	r3, r0
   15740:	4618      	mov	r0, r3
   15742:	f8df 14d4 	ldr.w	r1, [pc, #1236]	; 15c18 <_ZN19RecalibrerOdometrie6updateEv+0x80c>
   15746:	f005 ff55 	bl	1b5f4 <__aeabi_fcmplt>
   1574a:	4603      	mov	r3, r0
   1574c:	2b00      	cmp	r3, #0
   1574e:	d003      	beq.n	15758 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   15750:	f04f 0301 	mov.w	r3, #1	; 0x1
   15754:	613b      	str	r3, [r7, #16]
   15756:	e002      	b.n	1575e <_ZN19RecalibrerOdometrie6updateEv+0x352>
   15758:	f04f 0300 	mov.w	r3, #0	; 0x0
   1575c:	613b      	str	r3, [r7, #16]
   1575e:	693b      	ldr	r3, [r7, #16]
   15760:	2b00      	cmp	r3, #0
   15762:	f000 823b 	beq.w	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
                || ((this->coinRecalage == COTE_NOTRE_DEPART_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_BAS)
                  && Odometrie::odometrie->getPos().getPosition().getX() < 150)
                 ))// && Odometrie::odometrie->getPos().getPosition().getY() > 1500)//1850)
        {
#ifdef ROBOTHW //A adapter à la taille du robot
            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   15766:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1576a:	681b      	ldr	r3, [r3, #0]
   1576c:	6a9b      	ldr	r3, [r3, #40]
   1576e:	2b00      	cmp	r3, #0
   15770:	d005      	beq.n	1577e <_ZN19RecalibrerOdometrie6updateEv+0x372>
   15772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15776:	681b      	ldr	r3, [r3, #0]
   15778:	6a9b      	ldr	r3, [r3, #40]
   1577a:	2b01      	cmp	r3, #1
   1577c:	d114      	bne.n	157a8 <_ZN19RecalibrerOdometrie6updateEv+0x39c>
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 95 : 2905)); // robot = 319mm de large
   1577e:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   15782:	681b      	ldr	r3, [r3, #0]
   15784:	617b      	str	r3, [r7, #20]
   15786:	f000 fba9 	bl	15edc <_ZN11StrategieV29getIsBlueEv>
   1578a:	4603      	mov	r3, r0
   1578c:	2b00      	cmp	r3, #0
   1578e:	d003      	beq.n	15798 <_ZN19RecalibrerOdometrie6updateEv+0x38c>
   15790:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 15c1c <_ZN19RecalibrerOdometrie6updateEv+0x810>
   15794:	61bb      	str	r3, [r7, #24]
   15796:	e002      	b.n	1579e <_ZN19RecalibrerOdometrie6updateEv+0x392>
   15798:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 15c20 <_ZN19RecalibrerOdometrie6updateEv+0x814>
   1579c:	61bb      	str	r3, [r7, #24]
   1579e:	6978      	ldr	r0, [r7, #20]
   157a0:	69b9      	ldr	r1, [r7, #24]
   157a2:	f7f4 fc85 	bl	a0b0 <_ZN9Odometrie4setXEf>
   157a6:	e013      	b.n	157d0 <_ZN19RecalibrerOdometrie6updateEv+0x3c4>
            else
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 2905 : 95)); // robot = 319mm de large
   157a8:	f8df 344c 	ldr.w	r3, [pc, #1100]	; 15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   157ac:	681b      	ldr	r3, [r3, #0]
   157ae:	61fb      	str	r3, [r7, #28]
   157b0:	f000 fb94 	bl	15edc <_ZN11StrategieV29getIsBlueEv>
   157b4:	4603      	mov	r3, r0
   157b6:	2b00      	cmp	r3, #0
   157b8:	d003      	beq.n	157c2 <_ZN19RecalibrerOdometrie6updateEv+0x3b6>
   157ba:	f8df 3464 	ldr.w	r3, [pc, #1124]	; 15c20 <_ZN19RecalibrerOdometrie6updateEv+0x814>
   157be:	623b      	str	r3, [r7, #32]
   157c0:	e002      	b.n	157c8 <_ZN19RecalibrerOdometrie6updateEv+0x3bc>
   157c2:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 15c1c <_ZN19RecalibrerOdometrie6updateEv+0x810>
   157c6:	623b      	str	r3, [r7, #32]
   157c8:	69f8      	ldr	r0, [r7, #28]
   157ca:	6a39      	ldr	r1, [r7, #32]
   157cc:	f7f4 fc70 	bl	a0b0 <_ZN9Odometrie4setXEf>
#endif
            //StrategieV2::setCurrentGoal(Position(goalPosition1.getX(), 1360), false);
            StrategieV2::setCurrentGoal(positionDepart, false);
   157d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   157d4:	681a      	ldr	r2, [r3, #0]
   157d6:	f8df 3418 	ldr.w	r3, [pc, #1048]	; 15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   157da:	9300      	str	r3, [sp, #0]
   157dc:	f102 0318 	add.w	r3, r2, #24	; 0x18
   157e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   157e4:	f04f 0200 	mov.w	r2, #0	; 0x0
   157e8:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 15bf4 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   157ec:	f000 fd96 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            StrategieV2::setEnTrainDeRecalibrer(false);
   157f0:	f04f 0000 	mov.w	r0, #0	; 0x0
   157f4:	f000 fb98 	bl	15f28 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 3;
   157f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   157fc:	681a      	ldr	r2, [r3, #0]
   157fe:	f04f 0303 	mov.w	r3, #3	; 0x3
   15802:	60d3      	str	r3, [r2, #12]
            timeBlockedY = 0;
   15804:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 15c10 <_ZN19RecalibrerOdometrie6updateEv+0x804>
   15808:	f04f 0300 	mov.w	r3, #0	; 0x0
   1580c:	6013      	str	r3, [r2, #0]
   1580e:	e1e5      	b.n	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 3) // attend d'être replacé
   15810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15814:	681b      	ldr	r3, [r3, #0]
   15816:	68db      	ldr	r3, [r3, #12]
   15818:	2b03      	cmp	r3, #3
   1581a:	f040 8082 	bne.w	15922 <_ZN19RecalibrerOdometrie6updateEv+0x516>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   1581e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15822:	681b      	ldr	r3, [r3, #0]
   15824:	f103 0418 	add.w	r4, r3, #24	; 0x18
   15828:	4bf3      	ldr	r3, [pc, #972]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1582a:	681a      	ldr	r2, [r3, #0]
   1582c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   15830:	4618      	mov	r0, r3
   15832:	4611      	mov	r1, r2
   15834:	f7f4 fb88 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15838:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   1583c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   15840:	4618      	mov	r0, r3
   15842:	4611      	mov	r1, r2
   15844:	f7f9 fcf6 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15848:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1584c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   15850:	4618      	mov	r0, r3
   15852:	4621      	mov	r1, r4
   15854:	f7f9 fb20 	bl	ee98 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   15858:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1585c:	4618      	mov	r0, r3
   1585e:	f7f9 fc29 	bl	f0b4 <_ZNK8Position8getNormeEv>
   15862:	4602      	mov	r2, r0
   15864:	f04f 0300 	mov.w	r3, #0	; 0x0
   15868:	723b      	strb	r3, [r7, #8]
   1586a:	4610      	mov	r0, r2
   1586c:	49e3      	ldr	r1, [pc, #908]	(15bfc <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   1586e:	f005 fec1 	bl	1b5f4 <__aeabi_fcmplt>
   15872:	4603      	mov	r3, r0
   15874:	2b00      	cmp	r3, #0
   15876:	d002      	beq.n	1587e <_ZN19RecalibrerOdometrie6updateEv+0x472>
   15878:	f04f 0301 	mov.w	r3, #1	; 0x1
   1587c:	723b      	strb	r3, [r7, #8]
   1587e:	7a3b      	ldrb	r3, [r7, #8]
   15880:	2b00      	cmp	r3, #0
   15882:	f000 81ab 	beq.w	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   15886:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1588a:	681b      	ldr	r3, [r3, #0]
   1588c:	6a9b      	ldr	r3, [r3, #40]
   1588e:	2b03      	cmp	r3, #3
   15890:	d005      	beq.n	1589e <_ZN19RecalibrerOdometrie6updateEv+0x492>
   15892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15896:	681b      	ldr	r3, [r3, #0]
   15898:	6a9b      	ldr	r3, [r3, #40]
   1589a:	2b01      	cmp	r3, #1
   1589c:	d11d      	bne.n	158da <_ZN19RecalibrerOdometrie6updateEv+0x4ce>
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 0), true, 0.5);
   1589e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   158a2:	681b      	ldr	r3, [r3, #0]
   158a4:	f103 0318 	add.w	r3, r3, #24	; 0x18
   158a8:	4618      	mov	r0, r3
   158aa:	f7f9 fa9b 	bl	ede4 <_ZNK8Position4getXEv>
   158ae:	4602      	mov	r2, r0
   158b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   158b4:	4618      	mov	r0, r3
   158b6:	4611      	mov	r1, r2
   158b8:	4ad1      	ldr	r2, [pc, #836]	(15c00 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   158ba:	f04f 0301 	mov.w	r3, #1	; 0x1
   158be:	f7f9 fa7d 	bl	edbc <_ZN8PositionC1Effb>
   158c2:	4bcb      	ldr	r3, [pc, #812]	(15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   158c4:	9300      	str	r3, [sp, #0]
   158c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   158ca:	e893 0003 	ldmia.w	r3, {r0, r1}
   158ce:	f04f 0201 	mov.w	r2, #1	; 0x1
   158d2:	4bcc      	ldr	r3, [pc, #816]	(15c04 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   158d4:	f000 fd22 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   158d8:	e01c      	b.n	15914 <_ZN19RecalibrerOdometrie6updateEv+0x508>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 2000), true, 0.5);
   158da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   158de:	681b      	ldr	r3, [r3, #0]
   158e0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   158e4:	4618      	mov	r0, r3
   158e6:	f7f9 fa7d 	bl	ede4 <_ZNK8Position4getXEv>
   158ea:	4602      	mov	r2, r0
   158ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   158f0:	4618      	mov	r0, r3
   158f2:	4611      	mov	r1, r2
   158f4:	4acb      	ldr	r2, [pc, #812]	(15c24 <_ZN19RecalibrerOdometrie6updateEv+0x818>)
   158f6:	f04f 0301 	mov.w	r3, #1	; 0x1
   158fa:	f7f9 fa5f 	bl	edbc <_ZN8PositionC1Effb>
   158fe:	4bbc      	ldr	r3, [pc, #752]	(15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   15900:	9300      	str	r3, [sp, #0]
   15902:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   15906:	e893 0003 	ldmia.w	r3, {r0, r1}
   1590a:	f04f 0201 	mov.w	r2, #1	; 0x1
   1590e:	4bbd      	ldr	r3, [pc, #756]	(15c04 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   15910:	f000 fd04 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            status  = 4;
   15914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15918:	681a      	ldr	r2, [r3, #0]
   1591a:	f04f 0304 	mov.w	r3, #4	; 0x4
   1591e:	60d3      	str	r3, [r2, #12]
   15920:	e15c      	b.n	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 4) // attend d'avoir synchro sur Y
   15922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15926:	681b      	ldr	r3, [r3, #0]
   15928:	68db      	ldr	r3, [r3, #12]
   1592a:	2b04      	cmp	r3, #4
   1592c:	f040 8117 	bne.w	15b5e <_ZN19RecalibrerOdometrie6updateEv+0x752>
    {

        static int timeBlockedX = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) // if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   15930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15934:	681b      	ldr	r3, [r3, #0]
   15936:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1593a:	4baf      	ldr	r3, [pc, #700]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1593c:	681a      	ldr	r2, [r3, #0]
   1593e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
   15942:	4618      	mov	r0, r3
   15944:	4611      	mov	r1, r2
   15946:	f7f4 faff 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   1594a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
   1594e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
   15952:	4618      	mov	r0, r3
   15954:	4611      	mov	r1, r2
   15956:	f7f9 fc6d 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   1595a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1595e:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
   15962:	4618      	mov	r0, r3
   15964:	4621      	mov	r1, r4
   15966:	f7f9 fa97 	bl	ee98 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   1596a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1596e:	4618      	mov	r0, r3
   15970:	f7f9 fba0 	bl	f0b4 <_ZNK8Position8getNormeEv>
   15974:	4603      	mov	r3, r0
   15976:	4618      	mov	r0, r3
   15978:	49a1      	ldr	r1, [pc, #644]	(15c00 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   1597a:	f005 fe59 	bl	1b630 <__aeabi_fcmpgt>
   1597e:	4603      	mov	r3, r0
   15980:	2b00      	cmp	r3, #0
   15982:	d015      	beq.n	159b0 <_ZN19RecalibrerOdometrie6updateEv+0x5a4>
   15984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   15988:	4618      	mov	r0, r3
   1598a:	f7f9 fb93 	bl	f0b4 <_ZNK8Position8getNormeEv>
   1598e:	4602      	mov	r2, r0
   15990:	f04f 0300 	mov.w	r3, #0	; 0x0
   15994:	71fb      	strb	r3, [r7, #7]
   15996:	4610      	mov	r0, r2
   15998:	4999      	ldr	r1, [pc, #612]	(15c00 <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   1599a:	f005 fe21 	bl	1b5e0 <__aeabi_fcmpeq>
   1599e:	4603      	mov	r3, r0
   159a0:	2b00      	cmp	r3, #0
   159a2:	d102      	bne.n	159aa <_ZN19RecalibrerOdometrie6updateEv+0x59e>
   159a4:	f04f 0301 	mov.w	r3, #1	; 0x1
   159a8:	71fb      	strb	r3, [r7, #7]
   159aa:	79fb      	ldrb	r3, [r7, #7]
   159ac:	627b      	str	r3, [r7, #36]
   159ae:	e014      	b.n	159da <_ZN19RecalibrerOdometrie6updateEv+0x5ce>
   159b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   159b4:	4618      	mov	r0, r3
   159b6:	f7f9 fb7d 	bl	f0b4 <_ZNK8Position8getNormeEv>
   159ba:	4602      	mov	r2, r0
   159bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   159c0:	71bb      	strb	r3, [r7, #6]
   159c2:	4610      	mov	r0, r2
   159c4:	4991      	ldr	r1, [pc, #580]	(15c0c <_ZN19RecalibrerOdometrie6updateEv+0x800>)
   159c6:	f005 fe33 	bl	1b630 <__aeabi_fcmpgt>
   159ca:	4603      	mov	r3, r0
   159cc:	2b00      	cmp	r3, #0
   159ce:	d002      	beq.n	159d6 <_ZN19RecalibrerOdometrie6updateEv+0x5ca>
   159d0:	f04f 0301 	mov.w	r3, #1	; 0x1
   159d4:	71bb      	strb	r3, [r7, #6]
   159d6:	79bb      	ldrb	r3, [r7, #6]
   159d8:	627b      	str	r3, [r7, #36]
   159da:	6a7b      	ldr	r3, [r7, #36]
   159dc:	2b00      	cmp	r3, #0
   159de:	d006      	beq.n	159ee <_ZN19RecalibrerOdometrie6updateEv+0x5e2>
        {
            timeBlockedX ++;
   159e0:	4b91      	ldr	r3, [pc, #580]	(15c28 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   159e2:	681b      	ldr	r3, [r3, #0]
   159e4:	f103 0201 	add.w	r2, r3, #1	; 0x1
   159e8:	4b8f      	ldr	r3, [pc, #572]	(15c28 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   159ea:	601a      	str	r2, [r3, #0]
   159ec:	e021      	b.n	15a32 <_ZN19RecalibrerOdometrie6updateEv+0x626>
//            allumerLED2();
        }
        else
        {
            timeBlockedX = 0;
   159ee:	4a8e      	ldr	r2, [pc, #568]	(15c28 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   159f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   159f4:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   159f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   159fa:	681b      	ldr	r3, [r3, #0]
   159fc:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15a00:	4b7d      	ldr	r3, [pc, #500]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15a02:	681a      	ldr	r2, [r3, #0]
   15a04:	f507 7388 	add.w	r3, r7, #272	; 0x110
   15a08:	4618      	mov	r0, r3
   15a0a:	4611      	mov	r1, r2
   15a0c:	f7f4 fa9c 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
   15a14:	f507 7288 	add.w	r2, r7, #272	; 0x110
   15a18:	4618      	mov	r0, r3
   15a1a:	4611      	mov	r1, r2
   15a1c:	f7f9 fc0a 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15a20:	4620      	mov	r0, r4
   15a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
   15a26:	e893 0006 	ldmia.w	r3, {r1, r2}
   15a2a:	f7f9 fa5b 	bl	eee4 <_ZN8PositionaSES_>
            eteindreLED2();
   15a2e:	f7f6 fdf3 	bl	c618 <_Z12eteindreLED2v>
        }
        if (timeBlockedX > 100 &&
   15a32:	4b7d      	ldr	r3, [pc, #500]	(15c28 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   15a34:	681b      	ldr	r3, [r3, #0]
   15a36:	2b64      	cmp	r3, #100
   15a38:	dd55      	ble.n	15ae6 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   15a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15a3e:	681b      	ldr	r3, [r3, #0]
   15a40:	6a9b      	ldr	r3, [r3, #40]
   15a42:	2b00      	cmp	r3, #0
   15a44:	d005      	beq.n	15a52 <_ZN19RecalibrerOdometrie6updateEv+0x646>
   15a46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15a4a:	681b      	ldr	r3, [r3, #0]
   15a4c:	6a9b      	ldr	r3, [r3, #40]
   15a4e:	2b02      	cmp	r3, #2
   15a50:	d11c      	bne.n	15a8c <_ZN19RecalibrerOdometrie6updateEv+0x680>
   15a52:	4b69      	ldr	r3, [pc, #420]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15a54:	681a      	ldr	r2, [r3, #0]
   15a56:	f507 7392 	add.w	r3, r7, #292	; 0x124
   15a5a:	4618      	mov	r0, r3
   15a5c:	4611      	mov	r1, r2
   15a5e:	f7f4 fa73 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15a62:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   15a66:	f507 7292 	add.w	r2, r7, #292	; 0x124
   15a6a:	4618      	mov	r0, r3
   15a6c:	4611      	mov	r1, r2
   15a6e:	f7f9 fbe1 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15a72:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   15a76:	4618      	mov	r0, r3
   15a78:	f7f9 f9c0 	bl	edfc <_ZNK8Position4getYEv>
   15a7c:	4603      	mov	r3, r0
   15a7e:	4618      	mov	r0, r3
   15a80:	496a      	ldr	r1, [pc, #424]	(15c2c <_ZN19RecalibrerOdometrie6updateEv+0x820>)
   15a82:	f005 fdd5 	bl	1b630 <__aeabi_fcmpgt>
   15a86:	4603      	mov	r3, r0
   15a88:	2b00      	cmp	r3, #0
   15a8a:	d128      	bne.n	15ade <_ZN19RecalibrerOdometrie6updateEv+0x6d2>
   15a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15a90:	681b      	ldr	r3, [r3, #0]
   15a92:	6a9b      	ldr	r3, [r3, #40]
   15a94:	2b01      	cmp	r3, #1
   15a96:	d005      	beq.n	15aa4 <_ZN19RecalibrerOdometrie6updateEv+0x698>
   15a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15a9c:	681b      	ldr	r3, [r3, #0]
   15a9e:	6a9b      	ldr	r3, [r3, #40]
   15aa0:	2b03      	cmp	r3, #3
   15aa2:	d120      	bne.n	15ae6 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   15aa4:	4b54      	ldr	r3, [pc, #336]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15aa6:	681a      	ldr	r2, [r3, #0]
   15aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
   15aac:	4618      	mov	r0, r3
   15aae:	4611      	mov	r1, r2
   15ab0:	f7f4 fa4a 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
   15ab8:	f507 729c 	add.w	r2, r7, #312	; 0x138
   15abc:	4618      	mov	r0, r3
   15abe:	4611      	mov	r1, r2
   15ac0:	f7f9 fbb8 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
   15ac8:	4618      	mov	r0, r3
   15aca:	f7f9 f997 	bl	edfc <_ZNK8Position4getYEv>
   15ace:	4603      	mov	r3, r0
   15ad0:	4618      	mov	r0, r3
   15ad2:	4951      	ldr	r1, [pc, #324]	(15c18 <_ZN19RecalibrerOdometrie6updateEv+0x80c>)
   15ad4:	f005 fd8e 	bl	1b5f4 <__aeabi_fcmplt>
   15ad8:	4603      	mov	r3, r0
   15ada:	2b00      	cmp	r3, #0
   15adc:	d003      	beq.n	15ae6 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   15ade:	f04f 0301 	mov.w	r3, #1	; 0x1
   15ae2:	62bb      	str	r3, [r7, #40]
   15ae4:	e002      	b.n	15aec <_ZN19RecalibrerOdometrie6updateEv+0x6e0>
   15ae6:	f04f 0300 	mov.w	r3, #0	; 0x0
   15aea:	62bb      	str	r3, [r7, #40]
   15aec:	6abb      	ldr	r3, [r7, #40]
   15aee:	2b00      	cmp	r3, #0
   15af0:	d074      	beq.n	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
              && Odometrie::odometrie->getPos().getPosition().getY() < 150)
             ))// && (StrategieV2::getIsBlue() ? Odometrie::odometrie->getPos().getPosition().getX() < 200 : Odometrie::odometrie->getPos().getPosition().getX() > 2800))
        {
#ifdef ROBOTHW //A adapter à la taille du robot

            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   15af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15af6:	681b      	ldr	r3, [r3, #0]
   15af8:	6a9b      	ldr	r3, [r3, #40]
   15afa:	2b00      	cmp	r3, #0
   15afc:	d005      	beq.n	15b0a <_ZN19RecalibrerOdometrie6updateEv+0x6fe>
   15afe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15b02:	681b      	ldr	r3, [r3, #0]
   15b04:	6a9b      	ldr	r3, [r3, #40]
   15b06:	2b02      	cmp	r3, #2
   15b08:	d106      	bne.n	15b18 <_ZN19RecalibrerOdometrie6updateEv+0x70c>
                Odometrie::odometrie->setY(2000-95);
   15b0a:	4b3b      	ldr	r3, [pc, #236]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15b0c:	681b      	ldr	r3, [r3, #0]
   15b0e:	4618      	mov	r0, r3
   15b10:	4947      	ldr	r1, [pc, #284]	(15c30 <_ZN19RecalibrerOdometrie6updateEv+0x824>)
   15b12:	f7f4 fa97 	bl	a044 <_ZN9Odometrie4setYEf>
   15b16:	e005      	b.n	15b24 <_ZN19RecalibrerOdometrie6updateEv+0x718>
            else
                Odometrie::odometrie->setY(95);
   15b18:	4b37      	ldr	r3, [pc, #220]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15b1a:	681b      	ldr	r3, [r3, #0]
   15b1c:	4618      	mov	r0, r3
   15b1e:	493f      	ldr	r1, [pc, #252]	(15c1c <_ZN19RecalibrerOdometrie6updateEv+0x810>)
   15b20:	f7f4 fa90 	bl	a044 <_ZN9Odometrie4setYEf>
#endif
            StrategieV2::setEnTrainDeRecalibrer(false);
   15b24:	f04f 0000 	mov.w	r0, #0	; 0x0
   15b28:	f000 f9fe 	bl	15f28 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            StrategieV2::setCurrentGoal(positionDepart, false);
   15b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15b30:	681a      	ldr	r2, [r3, #0]
   15b32:	4b2f      	ldr	r3, [pc, #188]	(15bf0 <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   15b34:	9300      	str	r3, [sp, #0]
   15b36:	f102 0318 	add.w	r3, r2, #24	; 0x18
   15b3a:	e893 0003 	ldmia.w	r3, {r0, r1}
   15b3e:	f04f 0200 	mov.w	r2, #0	; 0x0
   15b42:	4b2c      	ldr	r3, [pc, #176]	(15bf4 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>)
   15b44:	f000 fbea 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            //StrategieV2::setCurrentGoal(Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0), false, 1); // on avance  encore un peu
            //goalPosition2 = Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0);
            status = 5;
   15b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15b4c:	681a      	ldr	r2, [r3, #0]
   15b4e:	f04f 0305 	mov.w	r3, #5	; 0x5
   15b52:	60d3      	str	r3, [r2, #12]
            timeBlockedX = 0;
   15b54:	4a34      	ldr	r2, [pc, #208]	(15c28 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   15b56:	f04f 0300 	mov.w	r3, #0	; 0x0
   15b5a:	6013      	str	r3, [r2, #0]
   15b5c:	e03e      	b.n	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 5)
   15b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15b62:	681b      	ldr	r3, [r3, #0]
   15b64:	68db      	ldr	r3, [r3, #12]
   15b66:	2b05      	cmp	r3, #5
   15b68:	d138      	bne.n	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();//positionGoal2 -
   15b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15b6e:	681b      	ldr	r3, [r3, #0]
   15b70:	f103 0418 	add.w	r4, r3, #24	; 0x18
   15b74:	4b20      	ldr	r3, [pc, #128]	(15bf8 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   15b76:	681a      	ldr	r2, [r3, #0]
   15b78:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
   15b7c:	4618      	mov	r0, r3
   15b7e:	4611      	mov	r1, r2
   15b80:	f7f4 f9e2 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   15b84:	f507 73a2 	add.w	r3, r7, #324	; 0x144
   15b88:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
   15b8c:	4618      	mov	r0, r3
   15b8e:	4611      	mov	r1, r2
   15b90:	f7f9 fb50 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
   15b94:	f107 0334 	add.w	r3, r7, #52	; 0x34
   15b98:	f507 72a2 	add.w	r2, r7, #324	; 0x144
   15b9c:	4618      	mov	r0, r3
   15b9e:	4621      	mov	r1, r4
   15ba0:	f7f9 f97a 	bl	ee98 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   15ba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   15ba8:	4618      	mov	r0, r3
   15baa:	f7f9 fa83 	bl	f0b4 <_ZNK8Position8getNormeEv>
   15bae:	4602      	mov	r2, r0
   15bb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   15bb4:	717b      	strb	r3, [r7, #5]
   15bb6:	4610      	mov	r0, r2
   15bb8:	4910      	ldr	r1, [pc, #64]	(15bfc <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   15bba:	f005 fd1b 	bl	1b5f4 <__aeabi_fcmplt>
   15bbe:	4603      	mov	r3, r0
   15bc0:	2b00      	cmp	r3, #0
   15bc2:	d002      	beq.n	15bca <_ZN19RecalibrerOdometrie6updateEv+0x7be>
   15bc4:	f04f 0301 	mov.w	r3, #1	; 0x1
   15bc8:	717b      	strb	r3, [r7, #5]
   15bca:	797b      	ldrb	r3, [r7, #5]
   15bcc:	2b00      	cmp	r3, #0
   15bce:	d005      	beq.n	15bdc <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            status = -1;
   15bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15bd4:	681a      	ldr	r2, [r3, #0]
   15bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bda:	60d3      	str	r3, [r2, #12]
        }
    }
    return status;
   15bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   15be0:	681b      	ldr	r3, [r3, #0]
   15be2:	68db      	ldr	r3, [r3, #12]
//#endif
}
   15be4:	4618      	mov	r0, r3
   15be6:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   15bea:	46bd      	mov	sp, r7
   15bec:	bd90      	pop	{r4, r7, pc}
   15bee:	46c0      	nop			(mov r8, r8)
   15bf0:	c2c80000 	.word	0xc2c80000
   15bf4:	40400000 	.word	0x40400000
   15bf8:	20000580 	.word	0x20000580
   15bfc:	42200000 	.word	0x42200000
   15c00:	00000000 	.word	0x00000000
   15c04:	3f000000 	.word	0x3f000000
   15c08:	453b8000 	.word	0x453b8000
   15c0c:	c0a00000 	.word	0xc0a00000
   15c10:	200005ac 	.word	0x200005ac
   15c14:	45322000 	.word	0x45322000
   15c18:	43160000 	.word	0x43160000
   15c1c:	42be0000 	.word	0x42be0000
   15c20:	45359000 	.word	0x45359000
   15c24:	44fa0000 	.word	0x44fa0000
   15c28:	200005a8 	.word	0x200005a8
   15c2c:	44e74000 	.word	0x44e74000
   15c30:	44ee2000 	.word	0x44ee2000

00015c34 <_ZN19RecalibrerOdometrieD0Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   15c34:	b580      	push	{r7, lr}
   15c36:	b082      	sub	sp, #8
   15c38:	af00      	add	r7, sp, #0
   15c3a:	6078      	str	r0, [r7, #4]
   15c3c:	687a      	ldr	r2, [r7, #4]
   15c3e:	4b0a      	ldr	r3, [pc, #40]	(15c68 <_ZN19RecalibrerOdometrieD0Ev+0x34>)
   15c40:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   15c42:	687b      	ldr	r3, [r7, #4]
   15c44:	4618      	mov	r0, r3
   15c46:	f7ff fb79 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   15c4a:	f04f 0301 	mov.w	r3, #1	; 0x1
   15c4e:	b2db      	uxtb	r3, r3
   15c50:	2b00      	cmp	r3, #0
   15c52:	d002      	beq.n	15c5a <_ZN19RecalibrerOdometrieD0Ev+0x26>
   15c54:	6878      	ldr	r0, [r7, #4]
   15c56:	f7f8 fff1 	bl	ec3c <_ZdlPv>
   15c5a:	687b      	ldr	r3, [r7, #4]
   15c5c:	4618      	mov	r0, r3
   15c5e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15c62:	46bd      	mov	sp, r7
   15c64:	bd80      	pop	{r7, pc}
   15c66:	46c0      	nop			(mov r8, r8)
   15c68:	00022460 	.word	0x00022460

00015c6c <_ZN19RecalibrerOdometrieD1Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   15c6c:	b580      	push	{r7, lr}
   15c6e:	b082      	sub	sp, #8
   15c70:	af00      	add	r7, sp, #0
   15c72:	6078      	str	r0, [r7, #4]
   15c74:	687a      	ldr	r2, [r7, #4]
   15c76:	4b0a      	ldr	r3, [pc, #40]	(15ca0 <_ZN19RecalibrerOdometrieD1Ev+0x34>)
   15c78:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   15c7a:	687b      	ldr	r3, [r7, #4]
   15c7c:	4618      	mov	r0, r3
   15c7e:	f7ff fb5d 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   15c82:	f04f 0300 	mov.w	r3, #0	; 0x0
   15c86:	b2db      	uxtb	r3, r3
   15c88:	2b00      	cmp	r3, #0
   15c8a:	d002      	beq.n	15c92 <_ZN19RecalibrerOdometrieD1Ev+0x26>
   15c8c:	6878      	ldr	r0, [r7, #4]
   15c8e:	f7f8 ffd5 	bl	ec3c <_ZdlPv>
   15c92:	687b      	ldr	r3, [r7, #4]
   15c94:	4618      	mov	r0, r3
   15c96:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15c9a:	46bd      	mov	sp, r7
   15c9c:	bd80      	pop	{r7, pc}
   15c9e:	46c0      	nop			(mov r8, r8)
   15ca0:	00022460 	.word	0x00022460

00015ca4 <_ZN19RecalibrerOdometrieD2Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   15ca4:	b580      	push	{r7, lr}
   15ca6:	b082      	sub	sp, #8
   15ca8:	af00      	add	r7, sp, #0
   15caa:	6078      	str	r0, [r7, #4]
   15cac:	687a      	ldr	r2, [r7, #4]
   15cae:	4b0a      	ldr	r3, [pc, #40]	(15cd8 <_ZN19RecalibrerOdometrieD2Ev+0x34>)
   15cb0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   15cb2:	687b      	ldr	r3, [r7, #4]
   15cb4:	4618      	mov	r0, r3
   15cb6:	f7ff fb41 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   15cba:	f04f 0300 	mov.w	r3, #0	; 0x0
   15cbe:	b2db      	uxtb	r3, r3
   15cc0:	2b00      	cmp	r3, #0
   15cc2:	d002      	beq.n	15cca <_ZN19RecalibrerOdometrieD2Ev+0x26>
   15cc4:	6878      	ldr	r0, [r7, #4]
   15cc6:	f7f8 ffb9 	bl	ec3c <_ZdlPv>
   15cca:	687b      	ldr	r3, [r7, #4]
   15ccc:	4618      	mov	r0, r3
   15cce:	f107 0708 	add.w	r7, r7, #8	; 0x8
   15cd2:	46bd      	mov	sp, r7
   15cd4:	bd80      	pop	{r7, pc}
   15cd6:	46c0      	nop			(mov r8, r8)
   15cd8:	00022460 	.word	0x00022460

00015cdc <_ZN19RecalibrerOdometrieC1Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   15cdc:	b590      	push	{r4, r7, lr}
   15cde:	b089      	sub	sp, #36
   15ce0:	af00      	add	r7, sp, #0
   15ce2:	60f8      	str	r0, [r7, #12]
   15ce4:	4608      	mov	r0, r1
   15ce6:	4639      	mov	r1, r7
   15ce8:	e881 000c 	stmia.w	r1, {r2, r3}
   15cec:	4603      	mov	r3, r0
   15cee:	72fb      	strb	r3, [r7, #11]
   15cf0:	68fc      	ldr	r4, [r7, #12]
   15cf2:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15cf6:	4618      	mov	r0, r3
   15cf8:	4923      	ldr	r1, [pc, #140]	(15d88 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   15cfa:	4a23      	ldr	r2, [pc, #140]	(15d88 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   15cfc:	f04f 0301 	mov.w	r3, #1	; 0x1
   15d00:	f7f9 f85c 	bl	edbc <_ZN8PositionC1Effb>
   15d04:	4620      	mov	r0, r4
   15d06:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15d0a:	e893 0006 	ldmia.w	r3, {r1, r2}
   15d0e:	f7ff fb55 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   15d12:	68fa      	ldr	r2, [r7, #12]
   15d14:	4b1d      	ldr	r3, [pc, #116]	(15d8c <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xb0>)
   15d16:	6013      	str	r3, [r2, #0]
   15d18:	68fb      	ldr	r3, [r7, #12]
   15d1a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15d1e:	4618      	mov	r0, r3
   15d20:	f7f9 f824 	bl	ed6c <_ZN8PositionC1Ev>
   15d24:	68fb      	ldr	r3, [r7, #12]
   15d26:	f103 0320 	add.w	r3, r3, #32	; 0x20
   15d2a:	4618      	mov	r0, r3
   15d2c:	f7f9 f81e 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   15d30:	68fa      	ldr	r2, [r7, #12]
   15d32:	7afb      	ldrb	r3, [r7, #11]
   15d34:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   15d38:	68fb      	ldr	r3, [r7, #12]
   15d3a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15d3e:	4618      	mov	r0, r3
   15d40:	463b      	mov	r3, r7
   15d42:	e893 0006 	ldmia.w	r3, {r1, r2}
   15d46:	f7f9 f8cd 	bl	eee4 <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   15d4a:	68fb      	ldr	r3, [r7, #12]
   15d4c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15d50:	68fb      	ldr	r3, [r7, #12]
   15d52:	f893 c02c 	ldrb.w	ip, [r3, #44]
   15d56:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15d5a:	4618      	mov	r0, r3
   15d5c:	490a      	ldr	r1, [pc, #40]	(15d88 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   15d5e:	4a0a      	ldr	r2, [pc, #40]	(15d88 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   15d60:	4663      	mov	r3, ip
   15d62:	f7f9 f82b 	bl	edbc <_ZN8PositionC1Effb>
   15d66:	4620      	mov	r0, r4
   15d68:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15d6c:	e893 0006 	ldmia.w	r3, {r1, r2}
   15d70:	f7f9 f8b8 	bl	eee4 <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   15d74:	68fa      	ldr	r2, [r7, #12]
   15d76:	6b3b      	ldr	r3, [r7, #48]
   15d78:	6293      	str	r3, [r2, #40]
}
   15d7a:	68fb      	ldr	r3, [r7, #12]
   15d7c:	4618      	mov	r0, r3
   15d7e:	f107 0724 	add.w	r7, r7, #36	; 0x24
   15d82:	46bd      	mov	sp, r7
   15d84:	bd90      	pop	{r4, r7, pc}
   15d86:	46c0      	nop			(mov r8, r8)
   15d88:	00000000 	.word	0x00000000
   15d8c:	00022460 	.word	0x00022460

00015d90 <_ZN19RecalibrerOdometrieC2Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   15d90:	b590      	push	{r4, r7, lr}
   15d92:	b089      	sub	sp, #36
   15d94:	af00      	add	r7, sp, #0
   15d96:	60f8      	str	r0, [r7, #12]
   15d98:	4608      	mov	r0, r1
   15d9a:	4639      	mov	r1, r7
   15d9c:	e881 000c 	stmia.w	r1, {r2, r3}
   15da0:	4603      	mov	r3, r0
   15da2:	72fb      	strb	r3, [r7, #11]
   15da4:	68fc      	ldr	r4, [r7, #12]
   15da6:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15daa:	4618      	mov	r0, r3
   15dac:	4923      	ldr	r1, [pc, #140]	(15e3c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15dae:	4a23      	ldr	r2, [pc, #140]	(15e3c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15db0:	f04f 0301 	mov.w	r3, #1	; 0x1
   15db4:	f7f9 f802 	bl	edbc <_ZN8PositionC1Effb>
   15db8:	4620      	mov	r0, r4
   15dba:	f107 0310 	add.w	r3, r7, #16	; 0x10
   15dbe:	e893 0006 	ldmia.w	r3, {r1, r2}
   15dc2:	f7ff fafb 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   15dc6:	68fa      	ldr	r2, [r7, #12]
   15dc8:	4b1d      	ldr	r3, [pc, #116]	(15e40 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xb0>)
   15dca:	6013      	str	r3, [r2, #0]
   15dcc:	68fb      	ldr	r3, [r7, #12]
   15dce:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15dd2:	4618      	mov	r0, r3
   15dd4:	f7f8 ffca 	bl	ed6c <_ZN8PositionC1Ev>
   15dd8:	68fb      	ldr	r3, [r7, #12]
   15dda:	f103 0320 	add.w	r3, r3, #32	; 0x20
   15dde:	4618      	mov	r0, r3
   15de0:	f7f8 ffc4 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   15de4:	68fa      	ldr	r2, [r7, #12]
   15de6:	7afb      	ldrb	r3, [r7, #11]
   15de8:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   15dec:	68fb      	ldr	r3, [r7, #12]
   15dee:	f103 0318 	add.w	r3, r3, #24	; 0x18
   15df2:	4618      	mov	r0, r3
   15df4:	463b      	mov	r3, r7
   15df6:	e893 0006 	ldmia.w	r3, {r1, r2}
   15dfa:	f7f9 f873 	bl	eee4 <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   15dfe:	68fb      	ldr	r3, [r7, #12]
   15e00:	f103 0420 	add.w	r4, r3, #32	; 0x20
   15e04:	68fb      	ldr	r3, [r7, #12]
   15e06:	f893 c02c 	ldrb.w	ip, [r3, #44]
   15e0a:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15e0e:	4618      	mov	r0, r3
   15e10:	490a      	ldr	r1, [pc, #40]	(15e3c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15e12:	4a0a      	ldr	r2, [pc, #40]	(15e3c <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   15e14:	4663      	mov	r3, ip
   15e16:	f7f8 ffd1 	bl	edbc <_ZN8PositionC1Effb>
   15e1a:	4620      	mov	r0, r4
   15e1c:	f107 0318 	add.w	r3, r7, #24	; 0x18
   15e20:	e893 0006 	ldmia.w	r3, {r1, r2}
   15e24:	f7f9 f85e 	bl	eee4 <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   15e28:	68fa      	ldr	r2, [r7, #12]
   15e2a:	6b3b      	ldr	r3, [r7, #48]
   15e2c:	6293      	str	r3, [r2, #40]
}
   15e2e:	68fb      	ldr	r3, [r7, #12]
   15e30:	4618      	mov	r0, r3
   15e32:	f107 0724 	add.w	r7, r7, #36	; 0x24
   15e36:	46bd      	mov	sp, r7
   15e38:	bd90      	pop	{r4, r7, pc}
   15e3a:	46c0      	nop			(mov r8, r8)
   15e3c:	00000000 	.word	0x00000000
   15e40:	00022460 	.word	0x00022460

00015e44 <_ZN11StrategieV212getTimeSpentEv>:
StrategieV2::~StrategieV2()
{
    //dtor
}

long StrategieV2::getTimeSpent()
   15e44:	b480      	push	{r7}
   15e46:	af00      	add	r7, sp, #0
{
    return updateCount * 5;
   15e48:	4b04      	ldr	r3, [pc, #16]	(15e5c <_ZN11StrategieV212getTimeSpentEv+0x18>)
   15e4a:	681a      	ldr	r2, [r3, #0]
   15e4c:	4613      	mov	r3, r2
   15e4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15e52:	4413      	add	r3, r2
}
   15e54:	4618      	mov	r0, r3
   15e56:	46bd      	mov	sp, r7
   15e58:	bc80      	pop	{r7}
   15e5a:	4770      	bx	lr
   15e5c:	200005b4 	.word	0x200005b4

00015e60 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::addTemporaryAction(MediumLevelAction* action)
   15e60:	b480      	push	{r7}
   15e62:	b083      	sub	sp, #12
   15e64:	af00      	add	r7, sp, #0
   15e66:	6078      	str	r0, [r7, #4]
{
    currentAction = action;
   15e68:	4a05      	ldr	r2, [pc, #20]	(15e80 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x20>)
   15e6a:	687b      	ldr	r3, [r7, #4]
   15e6c:	6013      	str	r3, [r2, #0]
    mustDeleteAction = true; // this is a temporary action that needs to be deleted
   15e6e:	4a05      	ldr	r2, [pc, #20]	(15e84 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x24>)
   15e70:	f04f 0301 	mov.w	r3, #1	; 0x1
   15e74:	7013      	strb	r3, [r2, #0]
}
   15e76:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15e7a:	46bd      	mov	sp, r7
   15e7c:	bc80      	pop	{r7}
   15e7e:	4770      	bx	lr
   15e80:	200005bc 	.word	0x200005bc
   15e84:	2000064a 	.word	0x2000064a

00015e88 <_ZN11StrategieV214setJustAvoidedEb>:
void StrategieV2::setJustAvoided(bool avoided)
   15e88:	b480      	push	{r7}
   15e8a:	b083      	sub	sp, #12
   15e8c:	af00      	add	r7, sp, #0
   15e8e:	4603      	mov	r3, r0
   15e90:	71fb      	strb	r3, [r7, #7]
{
    hasJustAvoided = avoided;
   15e92:	4a04      	ldr	r2, [pc, #16]	(15ea4 <_ZN11StrategieV214setJustAvoidedEb+0x1c>)
   15e94:	79fb      	ldrb	r3, [r7, #7]
   15e96:	7013      	strb	r3, [r2, #0]
}
   15e98:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15e9c:	46bd      	mov	sp, r7
   15e9e:	bc80      	pop	{r7}
   15ea0:	4770      	bx	lr
   15ea2:	46c0      	nop			(mov r8, r8)
   15ea4:	20000649 	.word	0x20000649

00015ea8 <_ZN11StrategieV214getJustAvoidedEv>:
bool StrategieV2::getJustAvoided()
   15ea8:	b480      	push	{r7}
   15eaa:	af00      	add	r7, sp, #0
{
    return hasJustAvoided;
   15eac:	4b02      	ldr	r3, [pc, #8]	(15eb8 <_ZN11StrategieV214getJustAvoidedEv+0x10>)
   15eae:	781b      	ldrb	r3, [r3, #0]
}
   15eb0:	4618      	mov	r0, r3
   15eb2:	46bd      	mov	sp, r7
   15eb4:	bc80      	pop	{r7}
   15eb6:	4770      	bx	lr
   15eb8:	20000649 	.word	0x20000649

00015ebc <_ZN11StrategieV29setIsBlueEb>:
{
    somethingDetected = true;
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
}

void StrategieV2::setIsBlue(bool blue)
   15ebc:	b480      	push	{r7}
   15ebe:	b083      	sub	sp, #12
   15ec0:	af00      	add	r7, sp, #0
   15ec2:	4603      	mov	r3, r0
   15ec4:	71fb      	strb	r3, [r7, #7]
{
    isBlue = blue;
   15ec6:	4a04      	ldr	r2, [pc, #16]	(15ed8 <_ZN11StrategieV29setIsBlueEb+0x1c>)
   15ec8:	79fb      	ldrb	r3, [r7, #7]
   15eca:	7013      	strb	r3, [r2, #0]
}
   15ecc:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15ed0:	46bd      	mov	sp, r7
   15ed2:	bc80      	pop	{r7}
   15ed4:	4770      	bx	lr
   15ed6:	46c0      	nop			(mov r8, r8)
   15ed8:	20000655 	.word	0x20000655

00015edc <_ZN11StrategieV29getIsBlueEv>:
bool StrategieV2::getIsBlue()
   15edc:	b480      	push	{r7}
   15ede:	af00      	add	r7, sp, #0
{
    return isBlue;
   15ee0:	4b02      	ldr	r3, [pc, #8]	(15eec <_ZN11StrategieV29getIsBlueEv+0x10>)
   15ee2:	781b      	ldrb	r3, [r3, #0]
}
   15ee4:	4618      	mov	r0, r3
   15ee6:	46bd      	mov	sp, r7
   15ee8:	bc80      	pop	{r7}
   15eea:	4770      	bx	lr
   15eec:	20000655 	.word	0x20000655

00015ef0 <_ZN11StrategieV211gatherGlassEv>:

void StrategieV2::gatherGlass()
   15ef0:	b480      	push	{r7}
   15ef2:	af00      	add	r7, sp, #0
{
    glassGathered++;
   15ef4:	4b0a      	ldr	r3, [pc, #40]	(15f20 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15ef6:	681b      	ldr	r3, [r3, #0]
   15ef8:	f103 0201 	add.w	r2, r3, #1	; 0x1
   15efc:	4b08      	ldr	r3, [pc, #32]	(15f20 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15efe:	601a      	str	r2, [r3, #0]
    if (glassGathered > 0)
   15f00:	4b07      	ldr	r3, [pc, #28]	(15f20 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15f02:	681b      	ldr	r3, [r3, #0]
   15f04:	2b00      	cmp	r3, #0
   15f06:	dd07      	ble.n	15f18 <_ZN11StrategieV211gatherGlassEv+0x28>
    {
        glassGathered = 0;
   15f08:	4a05      	ldr	r2, [pc, #20]	(15f20 <_ZN11StrategieV211gatherGlassEv+0x30>)
   15f0a:	f04f 0300 	mov.w	r3, #0	; 0x0
   15f0e:	6013      	str	r3, [r2, #0]
        hasToGoBase = true;
   15f10:	4a04      	ldr	r2, [pc, #16]	(15f24 <_ZN11StrategieV211gatherGlassEv+0x34>)
   15f12:	f04f 0301 	mov.w	r3, #1	; 0x1
   15f16:	7013      	strb	r3, [r2, #0]
    }
}
   15f18:	46bd      	mov	sp, r7
   15f1a:	bc80      	pop	{r7}
   15f1c:	4770      	bx	lr
   15f1e:	46c0      	nop			(mov r8, r8)
   15f20:	2000064c 	.word	0x2000064c
   15f24:	20000648 	.word	0x20000648

00015f28 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>:

void StrategieV2::setEnTrainDeRecalibrer(bool recalibre)
   15f28:	b480      	push	{r7}
   15f2a:	b083      	sub	sp, #12
   15f2c:	af00      	add	r7, sp, #0
   15f2e:	4603      	mov	r3, r0
   15f30:	71fb      	strb	r3, [r7, #7]
{
    enTrainDeRecalibrerOdometrie = recalibre;
   15f32:	4a04      	ldr	r2, [pc, #16]	(15f44 <_ZN11StrategieV222setEnTrainDeRecalibrerEb+0x1c>)
   15f34:	79fb      	ldrb	r3, [r7, #7]
   15f36:	7013      	strb	r3, [r2, #0]
}
   15f38:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15f3c:	46bd      	mov	sp, r7
   15f3e:	bc80      	pop	{r7}
   15f40:	4770      	bx	lr
   15f42:	46c0      	nop			(mov r8, r8)
   15f44:	20000664 	.word	0x20000664

00015f48 <_ZN11StrategieV218emptySharpsToCheckEv>:

void StrategieV2::emptySharpsToCheck()
   15f48:	b480      	push	{r7}
   15f4a:	b083      	sub	sp, #12
   15f4c:	af00      	add	r7, sp, #0
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15f4e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15f52:	607b      	str	r3, [r7, #4]
   15f54:	e008      	b.n	15f68 <_ZN11StrategieV218emptySharpsToCheckEv+0x20>
        sharpsToCheck[i] = false;
   15f56:	6879      	ldr	r1, [r7, #4]
   15f58:	4a07      	ldr	r2, [pc, #28]	(15f78 <_ZN11StrategieV218emptySharpsToCheckEv+0x30>)
   15f5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   15f5e:	5453      	strb	r3, [r2, r1]
    enTrainDeRecalibrerOdometrie = recalibre;
}

void StrategieV2::emptySharpsToCheck()
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15f60:	687b      	ldr	r3, [r7, #4]
   15f62:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15f66:	607b      	str	r3, [r7, #4]
   15f68:	687b      	ldr	r3, [r7, #4]
   15f6a:	2b07      	cmp	r3, #7
   15f6c:	ddf3      	ble.n	15f56 <_ZN11StrategieV218emptySharpsToCheckEv+0xe>
        sharpsToCheck[i] = false;
}
   15f6e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15f72:	46bd      	mov	sp, r7
   15f74:	bc80      	pop	{r7}
   15f76:	4770      	bx	lr
   15f78:	20000656 	.word	0x20000656

00015f7c <_ZN11StrategieV210setCommandEP7Command>:
#endif
    }

}

void StrategieV2::setCommand(Command* command)
   15f7c:	b480      	push	{r7}
   15f7e:	b083      	sub	sp, #12
   15f80:	af00      	add	r7, sp, #0
   15f82:	6078      	str	r0, [r7, #4]
{
    currentCommand = command;
   15f84:	4a03      	ldr	r2, [pc, #12]	(15f94 <_ZN11StrategieV210setCommandEP7Command+0x18>)
   15f86:	687b      	ldr	r3, [r7, #4]
   15f88:	6013      	str	r3, [r2, #0]
}
   15f8a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15f8e:	46bd      	mov	sp, r7
   15f90:	bc80      	pop	{r7}
   15f92:	4770      	bx	lr
   15f94:	200005b8 	.word	0x200005b8

00015f98 <_ZN11StrategieV219setTourneSurSoiMemeEb>:
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}

void StrategieV2::setTourneSurSoiMeme(bool tourne)
   15f98:	b480      	push	{r7}
   15f9a:	b083      	sub	sp, #12
   15f9c:	af00      	add	r7, sp, #0
   15f9e:	4603      	mov	r3, r0
   15fa0:	71fb      	strb	r3, [r7, #7]
{
    tourneSurSoiMeme = tourne;
   15fa2:	4a04      	ldr	r2, [pc, #16]	(15fb4 <_ZN11StrategieV219setTourneSurSoiMemeEb+0x1c>)
   15fa4:	79fb      	ldrb	r3, [r7, #7]
   15fa6:	7013      	strb	r3, [r2, #0]
}
   15fa8:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15fac:	46bd      	mov	sp, r7
   15fae:	bc80      	pop	{r7}
   15fb0:	4770      	bx	lr
   15fb2:	46c0      	nop			(mov r8, r8)
   15fb4:	20000670 	.word	0x20000670

00015fb8 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE>:
void StrategieV2::setCommand(Command* command)
{
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
   15fb8:	b580      	push	{r7, lr}
   15fba:	b088      	sub	sp, #32
   15fbc:	af00      	add	r7, sp, #0
   15fbe:	4603      	mov	r3, r0
   15fc0:	73fb      	strb	r3, [r7, #15]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   15fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
   15fc6:	61fb      	str	r3, [r7, #28]
   15fc8:	e04a      	b.n	16060 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa8>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
   15fca:	4b29      	ldr	r3, [pc, #164]	(16070 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   15fcc:	681a      	ldr	r2, [r3, #0]
   15fce:	69fb      	ldr	r3, [r7, #28]
   15fd0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15fd4:	4413      	add	r3, r2
   15fd6:	681b      	ldr	r3, [r3, #0]
   15fd8:	4618      	mov	r0, r3
   15fda:	f7f7 fb11 	bl	d600 <_ZN11SharpSensor7getNameEv>
   15fde:	4603      	mov	r3, r0
   15fe0:	461a      	mov	r2, r3
   15fe2:	7bfb      	ldrb	r3, [r7, #15]
   15fe4:	4293      	cmp	r3, r2
   15fe6:	d115      	bne.n	16014 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15fe8:	69fa      	ldr	r2, [r7, #28]
   15fea:	4b22      	ldr	r3, [pc, #136]	(16074 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xbc>)
   15fec:	5c9b      	ldrb	r3, [r3, r2]
   15fee:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   15ff2:	b2db      	uxtb	r3, r3
   15ff4:	2b00      	cmp	r3, #0
   15ff6:	d10d      	bne.n	16014 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   15ff8:	4b1f      	ldr	r3, [pc, #124]	(16078 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xc0>)
   15ffa:	781b      	ldrb	r3, [r3, #0]
   15ffc:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16000:	b2db      	uxtb	r3, r3
   16002:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   16006:	b2db      	uxtb	r3, r3
   16008:	2b00      	cmp	r3, #0
   1600a:	d103      	bne.n	16014 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   1600c:	f04f 0301 	mov.w	r3, #1	; 0x1
   16010:	60bb      	str	r3, [r7, #8]
   16012:	e002      	b.n	1601a <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x62>
   16014:	f04f 0300 	mov.w	r3, #0	; 0x0
   16018:	60bb      	str	r3, [r7, #8]
   1601a:	68bb      	ldr	r3, [r7, #8]
   1601c:	2b00      	cmp	r3, #0
   1601e:	d01b      	beq.n	16058 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa0>
            return sharps[i]->getValue().b;
   16020:	4b13      	ldr	r3, [pc, #76]	(16070 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   16022:	681a      	ldr	r2, [r3, #0]
   16024:	69fb      	ldr	r3, [r7, #28]
   16026:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1602a:	4413      	add	r3, r2
   1602c:	681b      	ldr	r3, [r3, #0]
   1602e:	681b      	ldr	r3, [r3, #0]
   16030:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16034:	f8d3 c000 	ldr.w	ip, [r3]
   16038:	4b0d      	ldr	r3, [pc, #52]	(16070 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   1603a:	681a      	ldr	r2, [r3, #0]
   1603c:	69fb      	ldr	r3, [r7, #28]
   1603e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16042:	4413      	add	r3, r2
   16044:	681a      	ldr	r2, [r3, #0]
   16046:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1604a:	4618      	mov	r0, r3
   1604c:	4611      	mov	r1, r2
   1604e:	47e0      	blx	ip
   16050:	7e3b      	ldrb	r3, [r7, #24]
   16052:	607b      	str	r3, [r7, #4]
}
   16054:	6878      	ldr	r0, [r7, #4]
   16056:	e006      	b.n	16066 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xae>
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16058:	69fb      	ldr	r3, [r7, #28]
   1605a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1605e:	61fb      	str	r3, [r7, #28]
   16060:	69fb      	ldr	r3, [r7, #28]
   16062:	2b07      	cmp	r3, #7
   16064:	ddb1      	ble.n	15fca <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}
   16066:	f107 0720 	add.w	r7, r7, #32	; 0x20
   1606a:	46bd      	mov	sp, r7
   1606c:	bd80      	pop	{r7, pc}
   1606e:	46c0      	nop			(mov r8, r8)
   16070:	20000644 	.word	0x20000644
   16074:	20000656 	.word	0x20000656
   16078:	20000670 	.word	0x20000670

0001607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>:
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
   1607c:	b580      	push	{r7, lr}
   1607e:	b084      	sub	sp, #16
   16080:	af00      	add	r7, sp, #0
   16082:	4603      	mov	r3, r0
   16084:	71fb      	strb	r3, [r7, #7]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16086:	f04f 0300 	mov.w	r3, #0	; 0x0
   1608a:	60fb      	str	r3, [r7, #12]
   1608c:	e01c      	b.n	160c8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x4c>
        if (sharps[i]->getName() == name)
   1608e:	4b12      	ldr	r3, [pc, #72]	(160d8 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x5c>)
   16090:	681a      	ldr	r2, [r3, #0]
   16092:	68fb      	ldr	r3, [r7, #12]
   16094:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16098:	4413      	add	r3, r2
   1609a:	681b      	ldr	r3, [r3, #0]
   1609c:	4618      	mov	r0, r3
   1609e:	f7f7 faaf 	bl	d600 <_ZN11SharpSensor7getNameEv>
   160a2:	4603      	mov	r3, r0
   160a4:	461a      	mov	r2, r3
   160a6:	79fb      	ldrb	r3, [r7, #7]
   160a8:	4293      	cmp	r3, r2
   160aa:	bf14      	ite	ne
   160ac:	2300      	movne	r3, #0
   160ae:	2301      	moveq	r3, #1
   160b0:	b2db      	uxtb	r3, r3
   160b2:	2b00      	cmp	r3, #0
   160b4:	d004      	beq.n	160c0 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x44>
            sharpsToCheck[i] = true;
   160b6:	68f9      	ldr	r1, [r7, #12]
   160b8:	4a08      	ldr	r2, [pc, #32]	(160dc <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x60>)
   160ba:	f04f 0301 	mov.w	r3, #1	; 0x1
   160be:	5453      	strb	r3, [r2, r1]
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   160c0:	68fb      	ldr	r3, [r7, #12]
   160c2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   160c6:	60fb      	str	r3, [r7, #12]
   160c8:	68fb      	ldr	r3, [r7, #12]
   160ca:	2b07      	cmp	r3, #7
   160cc:	dddf      	ble.n	1608e <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name)
            sharpsToCheck[i] = true;
}
   160ce:	f107 0710 	add.w	r7, r7, #16	; 0x10
   160d2:	46bd      	mov	sp, r7
   160d4:	bd80      	pop	{r7, pc}
   160d6:	46c0      	nop			(mov r8, r8)
   160d8:	20000644 	.word	0x20000644
   160dc:	20000656 	.word	0x20000656

000160e0 <_ZN11StrategieV217enableSharpsGroupEb>:

void StrategieV2::enableSharpsGroup(bool front)
   160e0:	b580      	push	{r7, lr}
   160e2:	b082      	sub	sp, #8
   160e4:	af00      	add	r7, sp, #0
   160e6:	4603      	mov	r3, r0
   160e8:	71fb      	strb	r3, [r7, #7]
{
    emptySharpsToCheck();
   160ea:	f7ff ff2d 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>

    if (front)
   160ee:	79fb      	ldrb	r3, [r7, #7]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d010      	beq.n	16116 <_ZN11StrategieV217enableSharpsGroupEb+0x36>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::FRONT_LEFT);
        enableSharp(SharpSensor::FRONT_RIGHT);
        enableSharp(SharpSensor::FRONT_MIDDLE);
#else
        enableSharp(SharpSensor::FRONT_LEFT);
   160f4:	f04f 0002 	mov.w	r0, #2	; 0x2
   160f8:	f7ff ffc0 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::FRONT_RIGHT);
   160fc:	f04f 0003 	mov.w	r0, #3	; 0x3
   16100:	f7ff ffbc 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_FRONT);
   16104:	f04f 0004 	mov.w	r0, #4	; 0x4
   16108:	f7ff ffb8 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_FRONT);
   1610c:	f04f 0006 	mov.w	r0, #6	; 0x6
   16110:	f7ff ffb4 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
   16114:	e00f      	b.n	16136 <_ZN11StrategieV217enableSharpsGroupEb+0x56>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::BACK_LEFT);
        enableSharp(SharpSensor::BACK_RIGHT);
        enableSharp(SharpSensor::BACK_MIDDLE);
#else
        enableSharp(SharpSensor::BACK_LEFT);
   16116:	f04f 0001 	mov.w	r0, #1	; 0x1
   1611a:	f7ff ffaf 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::BACK_RIGHT);
   1611e:	f04f 0000 	mov.w	r0, #0	; 0x0
   16122:	f7ff ffab 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_BACK);
   16126:	f04f 0005 	mov.w	r0, #5	; 0x5
   1612a:	f7ff ffa7 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_BACK);
   1612e:	f04f 0007 	mov.w	r0, #7	; 0x7
   16132:	f7ff ffa3 	bl	1607c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
#endif
    }

}
   16136:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1613a:	46bd      	mov	sp, r7
   1613c:	bd80      	pop	{r7, pc}
   1613e:	46c0      	nop			(mov r8, r8)

00016140 <_ZN11StrategieV211willCollideEv>:
}
bool StrategieV2::getJustAvoided()
{
    return hasJustAvoided;
}
bool StrategieV2::willCollide()
   16140:	b580      	push	{r7, lr}
   16142:	b082      	sub	sp, #8
   16144:	af00      	add	r7, sp, #0
{
    somethingDetected = true;
   16146:	4a07      	ldr	r2, [pc, #28]	(16164 <_ZN11StrategieV211willCollideEv+0x24>)
   16148:	f04f 0301 	mov.w	r3, #1	; 0x1
   1614c:	7013      	strb	r3, [r2, #0]
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
   1614e:	4b06      	ldr	r3, [pc, #24]	(16168 <_ZN11StrategieV211willCollideEv+0x28>)
   16150:	681b      	ldr	r3, [r3, #0]
   16152:	4618      	mov	r0, r3
   16154:	f04f 0100 	mov.w	r1, #0	; 0x0
   16158:	f7f1 fbba 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   1615c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16160:	46bd      	mov	sp, r7
   16162:	bd80      	pop	{r7, pc}
   16164:	20000654 	.word	0x20000654
   16168:	20000570 	.word	0x20000570

0001616c <_ZN11StrategieV26lookAtEff>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::lookAt(Angle a, float maxSpeed)
   1616c:	b580      	push	{r7, lr}
   1616e:	b084      	sub	sp, #16
   16170:	af00      	add	r7, sp, #0
   16172:	60f8      	str	r0, [r7, #12]
   16174:	60b9      	str	r1, [r7, #8]
{
    if (currentCommand != NULL)
   16176:	4b1b      	ldr	r3, [pc, #108]	(161e4 <_ZN11StrategieV26lookAtEff+0x78>)
   16178:	681b      	ldr	r3, [r3, #0]
   1617a:	2b00      	cmp	r3, #0
   1617c:	d00d      	beq.n	1619a <_ZN11StrategieV26lookAtEff+0x2e>
        delete currentCommand;
   1617e:	4b19      	ldr	r3, [pc, #100]	(161e4 <_ZN11StrategieV26lookAtEff+0x78>)
   16180:	681b      	ldr	r3, [r3, #0]
   16182:	2b00      	cmp	r3, #0
   16184:	d009      	beq.n	1619a <_ZN11StrategieV26lookAtEff+0x2e>
   16186:	4b17      	ldr	r3, [pc, #92]	(161e4 <_ZN11StrategieV26lookAtEff+0x78>)
   16188:	681b      	ldr	r3, [r3, #0]
   1618a:	681b      	ldr	r3, [r3, #0]
   1618c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16190:	681a      	ldr	r2, [r3, #0]
   16192:	4b14      	ldr	r3, [pc, #80]	(161e4 <_ZN11StrategieV26lookAtEff+0x78>)
   16194:	681b      	ldr	r3, [r3, #0]
   16196:	4618      	mov	r0, r3
   16198:	4790      	blx	r2
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
   1619a:	f04f 0020 	mov.w	r0, #32	; 0x20
   1619e:	f7f8 fca7 	bl	eaf0 <_Znwj>
   161a2:	4603      	mov	r3, r0
   161a4:	603b      	str	r3, [r7, #0]
   161a6:	683b      	ldr	r3, [r7, #0]
   161a8:	2b00      	cmp	r3, #0
   161aa:	d007      	beq.n	161bc <_ZN11StrategieV26lookAtEff+0x50>
   161ac:	6838      	ldr	r0, [r7, #0]
   161ae:	68f9      	ldr	r1, [r7, #12]
   161b0:	68ba      	ldr	r2, [r7, #8]
   161b2:	f7f2 ff79 	bl	90a8 <_ZN18CommandTournerVersC1Eff>
   161b6:	683b      	ldr	r3, [r7, #0]
   161b8:	607b      	str	r3, [r7, #4]
   161ba:	e001      	b.n	161c0 <_ZN11StrategieV26lookAtEff+0x54>
   161bc:	683b      	ldr	r3, [r7, #0]
   161be:	607b      	str	r3, [r7, #4]
   161c0:	687a      	ldr	r2, [r7, #4]
   161c2:	4b08      	ldr	r3, [pc, #32]	(161e4 <_ZN11StrategieV26lookAtEff+0x78>)
   161c4:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   161c6:	4b08      	ldr	r3, [pc, #32]	(161e8 <_ZN11StrategieV26lookAtEff+0x7c>)
   161c8:	681a      	ldr	r2, [r3, #0]
   161ca:	4b06      	ldr	r3, [pc, #24]	(161e4 <_ZN11StrategieV26lookAtEff+0x78>)
   161cc:	681b      	ldr	r3, [r3, #0]
   161ce:	4610      	mov	r0, r2
   161d0:	4619      	mov	r1, r3
   161d2:	f7f1 fb7d 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   161d6:	f7ff feb7 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   161da:	f107 0710 	add.w	r7, r7, #16	; 0x10
   161de:	46bd      	mov	sp, r7
   161e0:	bd80      	pop	{r7, pc}
   161e2:	46c0      	nop			(mov r8, r8)
   161e4:	200005b8 	.word	0x200005b8
   161e8:	20000570 	.word	0x20000570

000161ec <_ZN11StrategieV26lookAtE8Positionf>:
    if (currentCommand != NULL)
        delete currentCommand;
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
}
void StrategieV2::lookAt(Position pos, float maxSpeed)
   161ec:	b580      	push	{r7, lr}
   161ee:	b086      	sub	sp, #24
   161f0:	af00      	add	r7, sp, #0
   161f2:	f107 0310 	add.w	r3, r7, #16	; 0x10
   161f6:	e883 0003 	stmia.w	r3, {r0, r1}
   161fa:	60fa      	str	r2, [r7, #12]
{
    if (currentCommand != NULL)
   161fc:	4b1c      	ldr	r3, [pc, #112]	(16270 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   161fe:	681b      	ldr	r3, [r3, #0]
   16200:	2b00      	cmp	r3, #0
   16202:	d00d      	beq.n	16220 <_ZN11StrategieV26lookAtE8Positionf+0x34>
        delete currentCommand;
   16204:	4b1a      	ldr	r3, [pc, #104]	(16270 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   16206:	681b      	ldr	r3, [r3, #0]
   16208:	2b00      	cmp	r3, #0
   1620a:	d009      	beq.n	16220 <_ZN11StrategieV26lookAtE8Positionf+0x34>
   1620c:	4b18      	ldr	r3, [pc, #96]	(16270 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   1620e:	681b      	ldr	r3, [r3, #0]
   16210:	681b      	ldr	r3, [r3, #0]
   16212:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16216:	681a      	ldr	r2, [r3, #0]
   16218:	4b15      	ldr	r3, [pc, #84]	(16270 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   1621a:	681b      	ldr	r3, [r3, #0]
   1621c:	4618      	mov	r0, r3
   1621e:	4790      	blx	r2
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
   16220:	f04f 0020 	mov.w	r0, #32	; 0x20
   16224:	f7f8 fc64 	bl	eaf0 <_Znwj>
   16228:	4603      	mov	r3, r0
   1622a:	607b      	str	r3, [r7, #4]
   1622c:	687b      	ldr	r3, [r7, #4]
   1622e:	2b00      	cmp	r3, #0
   16230:	d00a      	beq.n	16248 <_ZN11StrategieV26lookAtE8Positionf+0x5c>
   16232:	6878      	ldr	r0, [r7, #4]
   16234:	f107 0310 	add.w	r3, r7, #16	; 0x10
   16238:	e893 0006 	ldmia.w	r3, {r1, r2}
   1623c:	68fb      	ldr	r3, [r7, #12]
   1623e:	f7f2 ffb7 	bl	91b0 <_ZN18CommandTournerVersC1E8Positionf>
   16242:	687b      	ldr	r3, [r7, #4]
   16244:	60bb      	str	r3, [r7, #8]
   16246:	e001      	b.n	1624c <_ZN11StrategieV26lookAtE8Positionf+0x60>
   16248:	687b      	ldr	r3, [r7, #4]
   1624a:	60bb      	str	r3, [r7, #8]
   1624c:	68ba      	ldr	r2, [r7, #8]
   1624e:	4b08      	ldr	r3, [pc, #32]	(16270 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   16250:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   16252:	4b08      	ldr	r3, [pc, #32]	(16274 <_ZN11StrategieV26lookAtE8Positionf+0x88>)
   16254:	681a      	ldr	r2, [r3, #0]
   16256:	4b06      	ldr	r3, [pc, #24]	(16270 <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   16258:	681b      	ldr	r3, [r3, #0]
   1625a:	4610      	mov	r0, r2
   1625c:	4619      	mov	r1, r3
   1625e:	f7f1 fb37 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   16262:	f7ff fe71 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   16266:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1626a:	46bd      	mov	sp, r7
   1626c:	bd80      	pop	{r7, pc}
   1626e:	46c0      	nop			(mov r8, r8)
   16270:	200005b8 	.word	0x200005b8
   16274:	20000570 	.word	0x20000570

00016278 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf>:
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
void StrategieV2::setCurrentGoal(Position goal, Position center, float vitesse, bool goBack, Angle precisionAngle)
   16278:	b580      	push	{r7, lr}
   1627a:	b08a      	sub	sp, #40
   1627c:	af04      	add	r7, sp, #16
   1627e:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   16282:	e88c 0003 	stmia.w	ip, {r0, r1}
   16286:	f107 0108 	add.w	r1, r7, #8	; 0x8
   1628a:	e881 000c 	stmia.w	r1, {r2, r3}
{
    if (currentCommand != NULL)
   1628e:	4b20      	ldr	r3, [pc, #128]	(16310 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   16290:	681b      	ldr	r3, [r3, #0]
   16292:	2b00      	cmp	r3, #0
   16294:	d00d      	beq.n	162b2 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
        delete currentCommand;
   16296:	4b1e      	ldr	r3, [pc, #120]	(16310 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   16298:	681b      	ldr	r3, [r3, #0]
   1629a:	2b00      	cmp	r3, #0
   1629c:	d009      	beq.n	162b2 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
   1629e:	4b1c      	ldr	r3, [pc, #112]	(16310 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   162a0:	681b      	ldr	r3, [r3, #0]
   162a2:	681b      	ldr	r3, [r3, #0]
   162a4:	f103 0304 	add.w	r3, r3, #4	; 0x4
   162a8:	681a      	ldr	r2, [r3, #0]
   162aa:	4b19      	ldr	r3, [pc, #100]	(16310 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   162ac:	681b      	ldr	r3, [r3, #0]
   162ae:	4618      	mov	r0, r3
   162b0:	4790      	blx	r2
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
   162b2:	f04f 0030 	mov.w	r0, #48	; 0x30
   162b6:	f7f8 fc1b 	bl	eaf0 <_Znwj>
   162ba:	4603      	mov	r3, r0
   162bc:	603b      	str	r3, [r7, #0]
   162be:	683b      	ldr	r3, [r7, #0]
   162c0:	2b00      	cmp	r3, #0
   162c2:	d014      	beq.n	162ee <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x76>
   162c4:	6a38      	ldr	r0, [r7, #32]
   162c6:	4913      	ldr	r1, [pc, #76]	(16314 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x9c>)
   162c8:	f004 fff8 	bl	1b2bc <__aeabi_fmul>
   162cc:	4603      	mov	r3, r0
   162ce:	9301      	str	r3, [sp, #4]
   162d0:	f897 3024 	ldrb.w	r3, [r7, #36]
   162d4:	9302      	str	r3, [sp, #8]
   162d6:	68fb      	ldr	r3, [r7, #12]
   162d8:	9300      	str	r3, [sp, #0]
   162da:	68bb      	ldr	r3, [r7, #8]
   162dc:	6838      	ldr	r0, [r7, #0]
   162de:	f107 0210 	add.w	r2, r7, #16	; 0x10
   162e2:	ca06      	ldmia	r2!, {r1, r2}
   162e4:	f7f3 f894 	bl	9410 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>
   162e8:	683b      	ldr	r3, [r7, #0]
   162ea:	607b      	str	r3, [r7, #4]
   162ec:	e001      	b.n	162f2 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x7a>
   162ee:	683b      	ldr	r3, [r7, #0]
   162f0:	607b      	str	r3, [r7, #4]
   162f2:	687a      	ldr	r2, [r7, #4]
   162f4:	4b06      	ldr	r3, [pc, #24]	(16310 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   162f6:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   162f8:	4b07      	ldr	r3, [pc, #28]	(16318 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0xa0>)
   162fa:	681a      	ldr	r2, [r3, #0]
   162fc:	4b04      	ldr	r3, [pc, #16]	(16310 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   162fe:	681b      	ldr	r3, [r3, #0]
   16300:	4610      	mov	r0, r2
   16302:	4619      	mov	r1, r3
   16304:	f7f1 fae4 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   16308:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1630c:	46bd      	mov	sp, r7
   1630e:	bd80      	pop	{r7, pc}
   16310:	200005b8 	.word	0x200005b8
   16314:	40a00000 	.word	0x40a00000
   16318:	20000570 	.word	0x20000570

0001631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>:
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}

void StrategieV2::setCurrentGoal(Position goal, bool goBack, float maxSpeed, Angle precisionAngle)
   1631c:	b580      	push	{r7, lr}
   1631e:	b08a      	sub	sp, #40
   16320:	af04      	add	r7, sp, #16
   16322:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   16326:	e88c 0003 	stmia.w	ip, {r0, r1}
   1632a:	60bb      	str	r3, [r7, #8]
   1632c:	4613      	mov	r3, r2
   1632e:	73fb      	strb	r3, [r7, #15]
{
    if (currentCommand != NULL)
   16330:	4b20      	ldr	r3, [pc, #128]	(163b4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   16332:	681b      	ldr	r3, [r3, #0]
   16334:	2b00      	cmp	r3, #0
   16336:	d00d      	beq.n	16354 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
        delete currentCommand;
   16338:	4b1e      	ldr	r3, [pc, #120]	(163b4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   1633a:	681b      	ldr	r3, [r3, #0]
   1633c:	2b00      	cmp	r3, #0
   1633e:	d009      	beq.n	16354 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
   16340:	4b1c      	ldr	r3, [pc, #112]	(163b4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   16342:	681b      	ldr	r3, [r3, #0]
   16344:	681b      	ldr	r3, [r3, #0]
   16346:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1634a:	681a      	ldr	r2, [r3, #0]
   1634c:	4b19      	ldr	r3, [pc, #100]	(163b4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   1634e:	681b      	ldr	r3, [r3, #0]
   16350:	4618      	mov	r0, r3
   16352:	4790      	blx	r2
//    if (actionsCount == 0)
//        currentCommand = new CommandAllerA(goal, goBack, maxSpeed/2);
//    else
    currentCommand = new CommandAllerA(goal, goBack, maxSpeed, 0.0f, precisionAngle);
   16354:	f04f 0030 	mov.w	r0, #48	; 0x30
   16358:	f7f8 fbca 	bl	eaf0 <_Znwj>
   1635c:	4603      	mov	r3, r0
   1635e:	603b      	str	r3, [r7, #0]
   16360:	683b      	ldr	r3, [r7, #0]
   16362:	2b00      	cmp	r3, #0
   16364:	d012      	beq.n	1638c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x70>
   16366:	f897 c00f 	ldrb.w	ip, [r7, #15]
   1636a:	68bb      	ldr	r3, [r7, #8]
   1636c:	9300      	str	r3, [sp, #0]
   1636e:	4b12      	ldr	r3, [pc, #72]	(163b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x9c>)
   16370:	9301      	str	r3, [sp, #4]
   16372:	6a3b      	ldr	r3, [r7, #32]
   16374:	9302      	str	r3, [sp, #8]
   16376:	6838      	ldr	r0, [r7, #0]
   16378:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1637c:	e893 0006 	ldmia.w	r3, {r1, r2}
   16380:	4663      	mov	r3, ip
   16382:	f7f2 ff95 	bl	92b0 <_ZN13CommandAllerAC1E8Positionbfff>
   16386:	683b      	ldr	r3, [r7, #0]
   16388:	607b      	str	r3, [r7, #4]
   1638a:	e001      	b.n	16390 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x74>
   1638c:	683b      	ldr	r3, [r7, #0]
   1638e:	607b      	str	r3, [r7, #4]
   16390:	687a      	ldr	r2, [r7, #4]
   16392:	4b08      	ldr	r3, [pc, #32]	(163b4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   16394:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   16396:	4b09      	ldr	r3, [pc, #36]	(163bc <_ZN11StrategieV214setCurrentGoalE8Positionbff+0xa0>)
   16398:	681a      	ldr	r2, [r3, #0]
   1639a:	4b06      	ldr	r3, [pc, #24]	(163b4 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   1639c:	681b      	ldr	r3, [r3, #0]
   1639e:	4610      	mov	r0, r2
   163a0:	4619      	mov	r1, r3
   163a2:	f7f1 fa95 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   163a6:	f7ff fdcf 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>
        //StrategieV2::sharpsToCheck[SharpSensor::FRONT_RIGHT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
   163aa:	f107 0718 	add.w	r7, r7, #24	; 0x18
   163ae:	46bd      	mov	sp, r7
   163b0:	bd80      	pop	{r7, pc}
   163b2:	46c0      	nop			(mov r8, r8)
   163b4:	200005b8 	.word	0x200005b8
   163b8:	00000000 	.word	0x00000000
   163bc:	20000570 	.word	0x20000570

000163c0 <_ZN11StrategieV26updateEv>:
{
    return updateCount * 5;
}


void StrategieV2::update()
   163c0:	b590      	push	{r4, r7, lr}
   163c2:	b0af      	sub	sp, #188
   163c4:	af02      	add	r7, sp, #8

        resultUpdate = tourelle->update();

    */

    if (StrategieV2::strategie == NULL)
   163c6:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 1694c <_ZN11StrategieV26updateEv+0x58c>
   163ca:	681b      	ldr	r3, [r3, #0]
   163cc:	2b00      	cmp	r3, #0
   163ce:	f000 82b8 	beq.w	16942 <_ZN11StrategieV26updateEv+0x582>
        return;
    updateCount++;
   163d2:	f8df 357c 	ldr.w	r3, [pc, #1404]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   163d6:	681b      	ldr	r3, [r3, #0]
   163d8:	f103 0201 	add.w	r2, r3, #1	; 0x1
   163dc:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   163e0:	601a      	str	r2, [r3, #0]

    currentAction->updateTime(90*1000-updateCount*5);
   163e2:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 16954 <_ZN11StrategieV26updateEv+0x594>
   163e6:	6819      	ldr	r1, [r3, #0]
   163e8:	f8df 3564 	ldr.w	r3, [pc, #1380]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   163ec:	681a      	ldr	r2, [r3, #0]
   163ee:	4613      	mov	r3, r2
   163f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   163f4:	4413      	add	r3, r2
   163f6:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   163fa:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
   163fe:	f503 7364 	add.w	r3, r3, #912	; 0x390
   16402:	4608      	mov	r0, r1
   16404:	4619      	mov	r1, r3
   16406:	f7fe ff5b 	bl	152c0 <_ZN17MediumLevelAction10updateTimeEi>
//
//    //On donne l'ordre de ralentir, si besoin
//    currentCommand->limitSpeed(hysteresisTourelle);

#endif
    if (updateCount < 0)
   1640a:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   1640e:	681b      	ldr	r3, [r3, #0]
   16410:	2b00      	cmp	r3, #0
   16412:	da04      	bge.n	1641e <_ZN11StrategieV26updateEv+0x5e>
    {
        updateCount = 50000;
   16414:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   16418:	f24c 3350 	movw	r3, #50000	; 0xc350
   1641c:	6013      	str	r3, [r2, #0]

    if (updateCount <= 18000)
    {

    }
    if (updateCount >= 18000)
   1641e:	f8df 3530 	ldr.w	r3, [pc, #1328]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   16422:	681a      	ldr	r2, [r3, #0]
   16424:	f244 634f 	movw	r3, #17999	; 0x464f
   16428:	429a      	cmp	r2, r3
   1642a:	dd08      	ble.n	1643e <_ZN11StrategieV26updateEv+0x7e>
    {
        Asservissement::asservissement->setCommandSpeeds(NULL);
   1642c:	f8df 3528 	ldr.w	r3, [pc, #1320]	; 16958 <_ZN11StrategieV26updateEv+0x598>
   16430:	681b      	ldr	r3, [r3, #0]
   16432:	4618      	mov	r0, r3
   16434:	f04f 0100 	mov.w	r1, #0	; 0x0
   16438:	f7f1 fa4a 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
   1643c:	e281      	b.n	16942 <_ZN11StrategieV26updateEv+0x582>
    //if (updateCount > 6000 && updateCount < 10000) // attendre 15 secondes
    /*{
        Asservissement::asservissement->setCommandSpeeds(NULL);
        return;
    }*/
    if (actionsCount >= 1)
   1643e:	f8df 351c 	ldr.w	r3, [pc, #1308]	; 1695c <_ZN11StrategieV26updateEv+0x59c>
   16442:	681b      	ldr	r3, [r3, #0]
   16444:	2b00      	cmp	r3, #0
   16446:	dd05      	ble.n	16454 <_ZN11StrategieV26updateEv+0x94>
    {
        updateCount = 20000;
   16448:	f8df 2504 	ldr.w	r2, [pc, #1284]	; 16950 <_ZN11StrategieV26updateEv+0x590>
   1644c:	f644 6320 	movw	r3, #20000	; 0x4e20
   16450:	6013      	str	r3, [r2, #0]
   16452:	e276      	b.n	16942 <_ZN11StrategieV26updateEv+0x582>
        enableSharp(SharpSensor::BACK_MIDDLE);
        enableSharp(SharpSensor::BACK_RIGHT);
        */
    //std::cout << "update" << std::endl;
    // check sensors:
    AnalogSensor::startConversion();
   16454:	f7f4 fd62 	bl	af1c <_ZN12AnalogSensor15startConversionEv>

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   16458:	f04f 0300 	mov.w	r3, #0	; 0x0
   1645c:	f8c7 30a0 	str.w	r3, [r7, #160]
   16460:	e011      	b.n	16486 <_ZN11StrategieV26updateEv+0xc6>
    {
        sharps[i]->updateValue();
   16462:	f8df 34fc 	ldr.w	r3, [pc, #1276]	; 16960 <_ZN11StrategieV26updateEv+0x5a0>
   16466:	681a      	ldr	r2, [r3, #0]
   16468:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   1646c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16470:	4413      	add	r3, r2
   16472:	681b      	ldr	r3, [r3, #0]
   16474:	4618      	mov	r0, r3
   16476:	f7f7 f8eb 	bl	d650 <_ZN11SharpSensor11updateValueEv>
    AnalogSensor::startConversion();

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   1647a:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   1647e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16482:	f8c7 30a0 	str.w	r3, [r7, #160]
   16486:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   1648a:	2b07      	cmp	r3, #7
   1648c:	dde9      	ble.n	16462 <_ZN11StrategieV26updateEv+0xa2>
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
   1648e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16492:	f887 309f 	strb.w	r3, [r7, #159]
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16496:	f04f 0300 	mov.w	r3, #0	; 0x0
   1649a:	f8c7 30a4 	str.w	r3, [r7, #164]
   1649e:	e038      	b.n	16512 <_ZN11StrategieV26updateEv+0x152>
    {
        if (sharpsToCheck[i] && !tourneSurSoiMeme)
   164a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   164a4:	f8df 24bc 	ldr.w	r2, [pc, #1212]	; 16964 <_ZN11StrategieV26updateEv+0x5a4>
   164a8:	5cd3      	ldrb	r3, [r2, r3]
   164aa:	2b00      	cmp	r3, #0
   164ac:	d02b      	beq.n	16506 <_ZN11StrategieV26updateEv+0x146>
   164ae:	f8df 34b8 	ldr.w	r3, [pc, #1208]	; 16968 <_ZN11StrategieV26updateEv+0x5a8>
   164b2:	781b      	ldrb	r3, [r3, #0]
   164b4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   164b8:	b2db      	uxtb	r3, r3
   164ba:	2b00      	cmp	r3, #0
   164bc:	d023      	beq.n	16506 <_ZN11StrategieV26updateEv+0x146>
        {
            if (sharps[i]->getValue().b)
   164be:	f8df 34a0 	ldr.w	r3, [pc, #1184]	; 16960 <_ZN11StrategieV26updateEv+0x5a0>
   164c2:	681a      	ldr	r2, [r3, #0]
   164c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   164c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   164cc:	4413      	add	r3, r2
   164ce:	681b      	ldr	r3, [r3, #0]
   164d0:	681b      	ldr	r3, [r3, #0]
   164d2:	f103 0308 	add.w	r3, r3, #8	; 0x8
   164d6:	f8d3 c000 	ldr.w	ip, [r3]
   164da:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 16960 <_ZN11StrategieV26updateEv+0x5a0>
   164de:	681a      	ldr	r2, [r3, #0]
   164e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   164e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   164e8:	4413      	add	r3, r2
   164ea:	681a      	ldr	r2, [r3, #0]
   164ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
   164f0:	4618      	mov	r0, r3
   164f2:	4611      	mov	r1, r2
   164f4:	47e0      	blx	ip
   164f6:	f897 3068 	ldrb.w	r3, [r7, #104]
   164fa:	2b00      	cmp	r3, #0
   164fc:	d003      	beq.n	16506 <_ZN11StrategieV26updateEv+0x146>
            {
                allume = true;
   164fe:	f04f 0301 	mov.w	r3, #1	; 0x1
   16502:	f887 309f 	strb.w	r3, [r7, #159]
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16506:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   1650a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1650e:	f8c7 30a4 	str.w	r3, [r7, #164]
   16512:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   16516:	2b07      	cmp	r3, #7
   16518:	ddc2      	ble.n	164a0 <_ZN11StrategieV26updateEv+0xe0>
                allume = true;
            }
        }
    }

    float values[10] = {0};
   1651a:	f107 011c 	add.w	r1, r7, #28	; 0x1c
   1651e:	60b9      	str	r1, [r7, #8]
   16520:	f04f 0300 	mov.w	r3, #0	; 0x0
   16524:	68ba      	ldr	r2, [r7, #8]
   16526:	6013      	str	r3, [r2, #0]
   16528:	68bb      	ldr	r3, [r7, #8]
   1652a:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1652e:	60bb      	str	r3, [r7, #8]
   16530:	f04f 0300 	mov.w	r3, #0	; 0x0
   16534:	68b9      	ldr	r1, [r7, #8]
   16536:	600b      	str	r3, [r1, #0]
   16538:	68ba      	ldr	r2, [r7, #8]
   1653a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1653e:	60ba      	str	r2, [r7, #8]
   16540:	f04f 0300 	mov.w	r3, #0	; 0x0
   16544:	68b9      	ldr	r1, [r7, #8]
   16546:	600b      	str	r3, [r1, #0]
   16548:	68ba      	ldr	r2, [r7, #8]
   1654a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1654e:	60ba      	str	r2, [r7, #8]
   16550:	f04f 0300 	mov.w	r3, #0	; 0x0
   16554:	68b9      	ldr	r1, [r7, #8]
   16556:	600b      	str	r3, [r1, #0]
   16558:	68ba      	ldr	r2, [r7, #8]
   1655a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1655e:	60ba      	str	r2, [r7, #8]
   16560:	f04f 0300 	mov.w	r3, #0	; 0x0
   16564:	68b9      	ldr	r1, [r7, #8]
   16566:	600b      	str	r3, [r1, #0]
   16568:	68ba      	ldr	r2, [r7, #8]
   1656a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1656e:	60ba      	str	r2, [r7, #8]
   16570:	f04f 0300 	mov.w	r3, #0	; 0x0
   16574:	68b9      	ldr	r1, [r7, #8]
   16576:	600b      	str	r3, [r1, #0]
   16578:	68ba      	ldr	r2, [r7, #8]
   1657a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1657e:	60ba      	str	r2, [r7, #8]
   16580:	f04f 0300 	mov.w	r3, #0	; 0x0
   16584:	68b9      	ldr	r1, [r7, #8]
   16586:	600b      	str	r3, [r1, #0]
   16588:	68ba      	ldr	r2, [r7, #8]
   1658a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1658e:	60ba      	str	r2, [r7, #8]
   16590:	f04f 0300 	mov.w	r3, #0	; 0x0
   16594:	68b9      	ldr	r1, [r7, #8]
   16596:	600b      	str	r3, [r1, #0]
   16598:	68ba      	ldr	r2, [r7, #8]
   1659a:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1659e:	60ba      	str	r2, [r7, #8]
   165a0:	f04f 0300 	mov.w	r3, #0	; 0x0
   165a4:	68b9      	ldr	r1, [r7, #8]
   165a6:	600b      	str	r3, [r1, #0]
   165a8:	68ba      	ldr	r2, [r7, #8]
   165aa:	f102 0204 	add.w	r2, r2, #4	; 0x4
   165ae:	60ba      	str	r2, [r7, #8]
   165b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   165b4:	68b9      	ldr	r1, [r7, #8]
   165b6:	600b      	str	r3, [r1, #0]
   165b8:	68ba      	ldr	r2, [r7, #8]
   165ba:	f102 0204 	add.w	r2, r2, #4	; 0x4
    bool detected[10] = {false};
   165be:	f107 0356 	add.w	r3, r7, #86	; 0x56
   165c2:	607b      	str	r3, [r7, #4]
   165c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   165c8:	6879      	ldr	r1, [r7, #4]
   165ca:	800b      	strh	r3, [r1, #0]
   165cc:	687a      	ldr	r2, [r7, #4]
   165ce:	f102 0202 	add.w	r2, r2, #2	; 0x2
   165d2:	607a      	str	r2, [r7, #4]
   165d4:	f04f 0300 	mov.w	r3, #0	; 0x0
   165d8:	6879      	ldr	r1, [r7, #4]
   165da:	800b      	strh	r3, [r1, #0]
   165dc:	687a      	ldr	r2, [r7, #4]
   165de:	f102 0202 	add.w	r2, r2, #2	; 0x2
   165e2:	607a      	str	r2, [r7, #4]
   165e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   165e8:	6879      	ldr	r1, [r7, #4]
   165ea:	800b      	strh	r3, [r1, #0]
   165ec:	687a      	ldr	r2, [r7, #4]
   165ee:	f102 0202 	add.w	r2, r2, #2	; 0x2
   165f2:	607a      	str	r2, [r7, #4]
   165f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   165f8:	6879      	ldr	r1, [r7, #4]
   165fa:	800b      	strh	r3, [r1, #0]
   165fc:	687a      	ldr	r2, [r7, #4]
   165fe:	f102 0202 	add.w	r2, r2, #2	; 0x2
   16602:	607a      	str	r2, [r7, #4]
   16604:	f04f 0300 	mov.w	r3, #0	; 0x0
   16608:	6879      	ldr	r1, [r7, #4]
   1660a:	800b      	strh	r3, [r1, #0]
   1660c:	687a      	ldr	r2, [r7, #4]
   1660e:	f102 0202 	add.w	r2, r2, #2	; 0x2

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   16612:	f04f 0300 	mov.w	r3, #0	; 0x0
   16616:	f8c7 30a8 	str.w	r3, [r7, #168]
   1661a:	e04d      	b.n	166b8 <_ZN11StrategieV26updateEv+0x2f8>
    {
        values[i] = sharps[i]->getValue().f;
   1661c:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   16620:	4bcf      	ldr	r3, [pc, #828]	(16960 <_ZN11StrategieV26updateEv+0x5a0>)
   16622:	681a      	ldr	r2, [r3, #0]
   16624:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16628:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1662c:	4413      	add	r3, r2
   1662e:	681b      	ldr	r3, [r3, #0]
   16630:	681b      	ldr	r3, [r3, #0]
   16632:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16636:	f8d3 c000 	ldr.w	ip, [r3]
   1663a:	4bc9      	ldr	r3, [pc, #804]	(16960 <_ZN11StrategieV26updateEv+0x5a0>)
   1663c:	681a      	ldr	r2, [r3, #0]
   1663e:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16642:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16646:	4413      	add	r3, r2
   16648:	681a      	ldr	r2, [r3, #0]
   1664a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   1664e:	4618      	mov	r0, r3
   16650:	4611      	mov	r1, r2
   16652:	47e0      	blx	ip
   16654:	6f3a      	ldr	r2, [r7, #112]
   16656:	ea4f 0384 	mov.w	r3, r4, lsl #2
   1665a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   1665e:	440b      	add	r3, r1
   16660:	f843 2c94 	str.w	r2, [r3, #-148]
        detected[i] = sharps[i]->getValue().b;
   16664:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   16668:	4bbd      	ldr	r3, [pc, #756]	(16960 <_ZN11StrategieV26updateEv+0x5a0>)
   1666a:	681a      	ldr	r2, [r3, #0]
   1666c:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   16670:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16674:	4413      	add	r3, r2
   16676:	681b      	ldr	r3, [r3, #0]
   16678:	681b      	ldr	r3, [r3, #0]
   1667a:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1667e:	f8d3 c000 	ldr.w	ip, [r3]
   16682:	4bb7      	ldr	r3, [pc, #732]	(16960 <_ZN11StrategieV26updateEv+0x5a0>)
   16684:	681a      	ldr	r2, [r3, #0]
   16686:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1668a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1668e:	4413      	add	r3, r2
   16690:	681a      	ldr	r2, [r3, #0]
   16692:	f107 0378 	add.w	r3, r7, #120	; 0x78
   16696:	4618      	mov	r0, r3
   16698:	4611      	mov	r1, r2
   1669a:	47e0      	blx	ip
   1669c:	f897 3080 	ldrb.w	r3, [r7, #128]
   166a0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   166a4:	eb01 0204 	add.w	r2, r1, r4
   166a8:	f802 3c5a 	strb.w	r3, [r2, #-90]

    float values[10] = {0};
    bool detected[10] = {false};

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   166ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   166b0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   166b4:	f8c7 30a8 	str.w	r3, [r7, #168]
   166b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   166bc:	2b07      	cmp	r3, #7
   166be:	ddad      	ble.n	1661c <_ZN11StrategieV26updateEv+0x25c>
        updateCount = 10;
        Led::setOff(1);
    }
    else
    {*/
        Led::setOn(1);
   166c0:	f04f 0001 	mov.w	r0, #1	; 0x1
   166c4:	f7f5 ffb8 	bl	c638 <_ZN3Led5setOnEi>

        if (allume)
   166c8:	f897 309f 	ldrb.w	r3, [r7, #159]
   166cc:	2b00      	cmp	r3, #0
   166ce:	d00e      	beq.n	166ee <_ZN11StrategieV26updateEv+0x32e>
        {
            Asservissement::asservissement->setCommandSpeeds(NULL);
   166d0:	4ba1      	ldr	r3, [pc, #644]	(16958 <_ZN11StrategieV26updateEv+0x598>)
   166d2:	681b      	ldr	r3, [r3, #0]
   166d4:	4618      	mov	r0, r3
   166d6:	f04f 0100 	mov.w	r1, #0	; 0x0
   166da:	f7f1 f8f9 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->update();
   166de:	4b9e      	ldr	r3, [pc, #632]	(16958 <_ZN11StrategieV26updateEv+0x598>)
   166e0:	681b      	ldr	r3, [r3, #0]
   166e2:	4618      	mov	r0, r3
   166e4:	f7f1 fa3a 	bl	7b5c <_ZN14Asservissement6updateEv>
            allumerLED2();
   166e8:	f7f5 fff2 	bl	c6d0 <_Z11allumerLED2v>
   166ec:	e001      	b.n	166f2 <_ZN11StrategieV26updateEv+0x332>
        }
        else
        {
            eteindreLED2();
   166ee:	f7f5 ff93 	bl	c618 <_Z12eteindreLED2v>

        //allumerLED2();

        //allume = true;//(updateCount%30==0);
        //allume = false;
        if(timeToRestart)
   166f2:	4b9e      	ldr	r3, [pc, #632]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   166f4:	681b      	ldr	r3, [r3, #0]
   166f6:	2b00      	cmp	r3, #0
   166f8:	d005      	beq.n	16706 <_ZN11StrategieV26updateEv+0x346>
        {
            timeToRestart--;
   166fa:	4b9c      	ldr	r3, [pc, #624]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   166fc:	681b      	ldr	r3, [r3, #0]
   166fe:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   16702:	4b9a      	ldr	r3, [pc, #616]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   16704:	601a      	str	r2, [r3, #0]
        }
        if(timeToRestart == 1)//Dernière boucle d'évitement avant de repartir
   16706:	4b99      	ldr	r3, [pc, #612]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   16708:	681b      	ldr	r3, [r3, #0]
   1670a:	2b01      	cmp	r3, #1
   1670c:	d169      	bne.n	167e2 <_ZN11StrategieV26updateEv+0x422>
        {
            if (currentAction)
   1670e:	4b91      	ldr	r3, [pc, #580]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   16710:	681b      	ldr	r3, [r3, #0]
   16712:	2b00      	cmp	r3, #0
   16714:	d05e      	beq.n	167d4 <_ZN11StrategieV26updateEv+0x414>
            {
                //Pour changer de trajectoire, décommenter les lignes suivantes
                currentAction->collisionAvoided();
   16716:	4b8f      	ldr	r3, [pc, #572]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   16718:	681b      	ldr	r3, [r3, #0]
   1671a:	681b      	ldr	r3, [r3, #0]
   1671c:	f103 0310 	add.w	r3, r3, #16	; 0x10
   16720:	681a      	ldr	r2, [r3, #0]
   16722:	4b8c      	ldr	r3, [pc, #560]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   16724:	681b      	ldr	r3, [r3, #0]
   16726:	4618      	mov	r0, r3
   16728:	4790      	blx	r2
                actionsToDo[actionsCount]->collisionAvoided();
   1672a:	4b8c      	ldr	r3, [pc, #560]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   1672c:	681a      	ldr	r2, [r3, #0]
   1672e:	4b90      	ldr	r3, [pc, #576]	(16970 <_ZN11StrategieV26updateEv+0x5b0>)
   16730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16734:	681b      	ldr	r3, [r3, #0]
   16736:	f103 0310 	add.w	r3, r3, #16	; 0x10
   1673a:	6819      	ldr	r1, [r3, #0]
   1673c:	4b87      	ldr	r3, [pc, #540]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   1673e:	681a      	ldr	r2, [r3, #0]
   16740:	4b8b      	ldr	r3, [pc, #556]	(16970 <_ZN11StrategieV26updateEv+0x5b0>)
   16742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   16746:	4618      	mov	r0, r3
   16748:	4788      	blx	r1
                //currentCommand->collisionAvoided();
                currentAction->update();
   1674a:	4b82      	ldr	r3, [pc, #520]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   1674c:	681b      	ldr	r3, [r3, #0]
   1674e:	681b      	ldr	r3, [r3, #0]
   16750:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16754:	681a      	ldr	r2, [r3, #0]
   16756:	4b7f      	ldr	r3, [pc, #508]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   16758:	681b      	ldr	r3, [r3, #0]
   1675a:	4618      	mov	r0, r3
   1675c:	4790      	blx	r2
                Position pos = Odometrie::odometrie->getPos().getPosition();
   1675e:	4b85      	ldr	r3, [pc, #532]	(16974 <_ZN11StrategieV26updateEv+0x5b4>)
   16760:	681a      	ldr	r2, [r3, #0]
   16762:	f107 0384 	add.w	r3, r7, #132	; 0x84
   16766:	4618      	mov	r0, r3
   16768:	4611      	mov	r1, r2
   1676a:	f7f3 fbed 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   1676e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   16772:	f107 0284 	add.w	r2, r7, #132	; 0x84
   16776:	4618      	mov	r0, r3
   16778:	4611      	mov	r1, r2
   1677a:	f7f8 fd5b 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
                addTemporaryAction(new ActionGoTo(pos, true));
   1677e:	f04f 0030 	mov.w	r0, #48	; 0x30
   16782:	f7f8 f9b5 	bl	eaf0 <_Znwj>
   16786:	4603      	mov	r3, r0
   16788:	60fb      	str	r3, [r7, #12]
   1678a:	68fa      	ldr	r2, [r7, #12]
   1678c:	2a00      	cmp	r2, #0
   1678e:	d00d      	beq.n	167ac <_ZN11StrategieV26updateEv+0x3ec>
   16790:	4b79      	ldr	r3, [pc, #484]	(16978 <_ZN11StrategieV26updateEv+0x5b8>)
   16792:	9300      	str	r3, [sp, #0]
   16794:	68f8      	ldr	r0, [r7, #12]
   16796:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1679a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1679e:	f04f 0301 	mov.w	r3, #1	; 0x1
   167a2:	f7f9 f831 	bl	f808 <_ZN10ActionGoToC1E8Positionbf>
   167a6:	68fb      	ldr	r3, [r7, #12]
   167a8:	613b      	str	r3, [r7, #16]
   167aa:	e001      	b.n	167b0 <_ZN11StrategieV26updateEv+0x3f0>
   167ac:	68f9      	ldr	r1, [r7, #12]
   167ae:	6139      	str	r1, [r7, #16]
   167b0:	693b      	ldr	r3, [r7, #16]
   167b2:	4618      	mov	r0, r3
   167b4:	f7ff fb54 	bl	15e60 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>

                //On arrête le robot
                if (currentCommand)
   167b8:	4b70      	ldr	r3, [pc, #448]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   167ba:	681b      	ldr	r3, [r3, #0]
   167bc:	2b00      	cmp	r3, #0
   167be:	d009      	beq.n	167d4 <_ZN11StrategieV26updateEv+0x414>
                    currentCommand->resetSpeeds();
   167c0:	4b6e      	ldr	r3, [pc, #440]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   167c2:	681b      	ldr	r3, [r3, #0]
   167c4:	681b      	ldr	r3, [r3, #0]
   167c6:	f103 030c 	add.w	r3, r3, #12	; 0xc
   167ca:	681a      	ldr	r2, [r3, #0]
   167cc:	4b6b      	ldr	r3, [pc, #428]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   167ce:	681b      	ldr	r3, [r3, #0]
   167d0:	4618      	mov	r0, r3
   167d2:	4790      	blx	r2
            }
            timeToRestart--;
   167d4:	4b65      	ldr	r3, [pc, #404]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   167d6:	681b      	ldr	r3, [r3, #0]
   167d8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   167dc:	4b63      	ldr	r3, [pc, #396]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   167de:	601a      	str	r2, [r3, #0]
   167e0:	e022      	b.n	16828 <_ZN11StrategieV26updateEv+0x468>
        }

        else if (allume || timeToRestart) // Si un des sharp voit un adversaire, ou qu'on doit être arrêté suite à une détection
   167e2:	f897 309f 	ldrb.w	r3, [r7, #159]
   167e6:	2b00      	cmp	r3, #0
   167e8:	d103      	bne.n	167f2 <_ZN11StrategieV26updateEv+0x432>
   167ea:	4b60      	ldr	r3, [pc, #384]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   167ec:	681b      	ldr	r3, [r3, #0]
   167ee:	2b00      	cmp	r3, #0
   167f0:	d01a      	beq.n	16828 <_ZN11StrategieV26updateEv+0x468>
        {
            if(!timeToRestart)//Début de l'évitement
   167f2:	4b5e      	ldr	r3, [pc, #376]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   167f4:	681b      	ldr	r3, [r3, #0]
   167f6:	2b00      	cmp	r3, #0
   167f8:	d10f      	bne.n	1681a <_ZN11StrategieV26updateEv+0x45a>
            {
                timeToRestart = 400;
   167fa:	4a5c      	ldr	r2, [pc, #368]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   167fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
   16800:	6013      	str	r3, [r2, #0]
                hasJustAvoided = true;
   16802:	4a5f      	ldr	r2, [pc, #380]	(16980 <_ZN11StrategieV26updateEv+0x5c0>)
   16804:	f04f 0301 	mov.w	r3, #1	; 0x1
   16808:	7013      	strb	r3, [r2, #0]

//            if (true) // if (canStillDoAction)
//            {

//            }
                hasJustAvoided = false;
   1680a:	4a5d      	ldr	r2, [pc, #372]	(16980 <_ZN11StrategieV26updateEv+0x5c0>)
   1680c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16810:	7013      	strb	r3, [r2, #0]
                somethingDetected = false;
   16812:	4a5c      	ldr	r2, [pc, #368]	(16984 <_ZN11StrategieV26updateEv+0x5c4>)
   16814:	f04f 0300 	mov.w	r3, #0	; 0x0
   16818:	7013      	strb	r3, [r2, #0]
                // tentative d'évitement :
                //Position pos = Odometrie::odometrie->getPos().getPosition();
                //addTemporaryAction(new ActionGoTo(pos, true));

            }
            Asservissement::asservissement->setCommandSpeeds(NULL);
   1681a:	4b4f      	ldr	r3, [pc, #316]	(16958 <_ZN11StrategieV26updateEv+0x598>)
   1681c:	681b      	ldr	r3, [r3, #0]
   1681e:	4618      	mov	r0, r3
   16820:	f04f 0100 	mov.w	r1, #0	; 0x0
   16824:	f7f1 f854 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
        //std::cout << robotBloque << "\n";
    }*/

//    else
//        robotBloque = 0;
    if (currentAction->update() == -1 || (robotBloque > 50))// && !enTrainDeRecalibrerOdometrie))
   16828:	4b4a      	ldr	r3, [pc, #296]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   1682a:	681b      	ldr	r3, [r3, #0]
   1682c:	681b      	ldr	r3, [r3, #0]
   1682e:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16832:	681a      	ldr	r2, [r3, #0]
   16834:	4b47      	ldr	r3, [pc, #284]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   16836:	681b      	ldr	r3, [r3, #0]
   16838:	4618      	mov	r0, r3
   1683a:	4790      	blx	r2
   1683c:	4603      	mov	r3, r0
   1683e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16842:	d003      	beq.n	1684c <_ZN11StrategieV26updateEv+0x48c>
   16844:	4b50      	ldr	r3, [pc, #320]	(16988 <_ZN11StrategieV26updateEv+0x5c8>)
   16846:	681b      	ldr	r3, [r3, #0]
   16848:	2b32      	cmp	r3, #50
   1684a:	dd03      	ble.n	16854 <_ZN11StrategieV26updateEv+0x494>
   1684c:	f04f 0201 	mov.w	r2, #1	; 0x1
   16850:	617a      	str	r2, [r7, #20]
   16852:	e002      	b.n	1685a <_ZN11StrategieV26updateEv+0x49a>
   16854:	f04f 0300 	mov.w	r3, #0	; 0x0
   16858:	617b      	str	r3, [r7, #20]
   1685a:	697b      	ldr	r3, [r7, #20]
   1685c:	2b00      	cmp	r3, #0
   1685e:	d056      	beq.n	1690e <_ZN11StrategieV26updateEv+0x54e>
    {
        if (robotBloque > 1000) // si le robot est bloqué 2 secondes
   16860:	4b49      	ldr	r3, [pc, #292]	(16988 <_ZN11StrategieV26updateEv+0x5c8>)
   16862:	681b      	ldr	r3, [r3, #0]
   16864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   16868:	dd14      	ble.n	16894 <_ZN11StrategieV26updateEv+0x4d4>
        {
            // on recule de 20 cm
            Asservissement::asservissement->setCommandSpeeds(NULL);
   1686a:	4b3b      	ldr	r3, [pc, #236]	(16958 <_ZN11StrategieV26updateEv+0x598>)
   1686c:	681b      	ldr	r3, [r3, #0]
   1686e:	4618      	mov	r0, r3
   16870:	f04f 0100 	mov.w	r1, #0	; 0x0
   16874:	f7f1 f82c 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            currentCommand = NULL;
   16878:	4a40      	ldr	r2, [pc, #256]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   1687a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1687e:	6013      	str	r3, [r2, #0]
            actionsCount = 2;
   16880:	4a36      	ldr	r2, [pc, #216]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   16882:	f04f 0302 	mov.w	r3, #2	; 0x2
   16886:	6013      	str	r3, [r2, #0]
            bool mustGoBack = true;
   16888:	f04f 0301 	mov.w	r3, #1	; 0x1
   1688c:	f887 30af 	strb.w	r3, [r7, #175]
            allumerLED();
   16890:	f7f5 ff26 	bl	c6e0 <_Z10allumerLEDv>
            //StrategieV2::addTemporaryAction(new ActionGoTo(Odometrie::odometrie->getPos().getPosition(), mustGoBack));
        }
        robotBloque = 0;
   16894:	4a3c      	ldr	r2, [pc, #240]	(16988 <_ZN11StrategieV26updateEv+0x5c8>)
   16896:	f04f 0300 	mov.w	r3, #0	; 0x0
   1689a:	6013      	str	r3, [r2, #0]
        //std::cout << "Changing action" << std::endl;
        Position currentPos = Odometrie::odometrie->getPos().getPosition();
   1689c:	4b35      	ldr	r3, [pc, #212]	(16974 <_ZN11StrategieV26updateEv+0x5b4>)
   1689e:	681a      	ldr	r2, [r3, #0]
   168a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
   168a4:	4618      	mov	r0, r3
   168a6:	4611      	mov	r1, r2
   168a8:	f7f3 fb4e 	bl	9f48 <_ZNK9Odometrie6getPosEv>
   168ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
   168b0:	f107 0290 	add.w	r2, r7, #144	; 0x90
   168b4:	4618      	mov	r0, r3
   168b6:	4611      	mov	r1, r2
   168b8:	f7f8 fcbc 	bl	f234 <_ZNK17PositionPlusAngle11getPositionEv>
            mustDeleteAction = true;
            timeSinceLastRecalibration++;
        }*/
        //else
        //{
        if (mustDeleteAction) // temporary action
   168bc:	4b33      	ldr	r3, [pc, #204]	(1698c <_ZN11StrategieV26updateEv+0x5cc>)
   168be:	781b      	ldrb	r3, [r3, #0]
   168c0:	2b00      	cmp	r3, #0
   168c2:	d004      	beq.n	168ce <_ZN11StrategieV26updateEv+0x50e>
            mustDeleteAction = false;
   168c4:	4b31      	ldr	r3, [pc, #196]	(1698c <_ZN11StrategieV26updateEv+0x5cc>)
   168c6:	f04f 0200 	mov.w	r2, #0	; 0x0
   168ca:	701a      	strb	r2, [r3, #0]
   168cc:	e005      	b.n	168da <_ZN11StrategieV26updateEv+0x51a>
        else
            actionsCount++;
   168ce:	4b23      	ldr	r3, [pc, #140]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   168d0:	681b      	ldr	r3, [r3, #0]
   168d2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   168d6:	4b21      	ldr	r3, [pc, #132]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   168d8:	601a      	str	r2, [r3, #0]


        if (actionsCount == 2)
   168da:	4b20      	ldr	r3, [pc, #128]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   168dc:	681b      	ldr	r3, [r3, #0]
   168de:	2b02      	cmp	r3, #2
   168e0:	d10e      	bne.n	16900 <_ZN11StrategieV26updateEv+0x540>
        {
            currentCommand = NULL;
   168e2:	4a26      	ldr	r2, [pc, #152]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   168e4:	f04f 0300 	mov.w	r3, #0	; 0x0
   168e8:	6013      	str	r3, [r2, #0]
            Asservissement::asservissement->setCommandSpeeds(NULL);
   168ea:	4b1b      	ldr	r3, [pc, #108]	(16958 <_ZN11StrategieV26updateEv+0x598>)
   168ec:	681b      	ldr	r3, [r3, #0]
   168ee:	4618      	mov	r0, r3
   168f0:	f04f 0100 	mov.w	r1, #0	; 0x0
   168f4:	f7f0 ffec 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            updateCount = 170000;//17000;
   168f8:	4a15      	ldr	r2, [pc, #84]	(16950 <_ZN11StrategieV26updateEv+0x590>)
   168fa:	4b25      	ldr	r3, [pc, #148]	(16990 <_ZN11StrategieV26updateEv+0x5d0>)
   168fc:	6013      	str	r3, [r2, #0]
   168fe:	e020      	b.n	16942 <_ZN11StrategieV26updateEv+0x582>
            return;
        }
        else
        {
            currentAction = actionsToDo[actionsCount];
   16900:	4b16      	ldr	r3, [pc, #88]	(1695c <_ZN11StrategieV26updateEv+0x59c>)
   16902:	681a      	ldr	r2, [r3, #0]
   16904:	4b1a      	ldr	r3, [pc, #104]	(16970 <_ZN11StrategieV26updateEv+0x5b0>)
   16906:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1690a:	4b12      	ldr	r3, [pc, #72]	(16954 <_ZN11StrategieV26updateEv+0x594>)
   1690c:	601a      	str	r2, [r3, #0]
        //delete action;
        //if (currentAction)
        // currentAction->update();

    }
    if(!timeToRestart)
   1690e:	4b17      	ldr	r3, [pc, #92]	(1696c <_ZN11StrategieV26updateEv+0x5ac>)
   16910:	681b      	ldr	r3, [r3, #0]
   16912:	2b00      	cmp	r3, #0
   16914:	d115      	bne.n	16942 <_ZN11StrategieV26updateEv+0x582>
    {
        if (currentCommand)
   16916:	4b19      	ldr	r3, [pc, #100]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   16918:	681b      	ldr	r3, [r3, #0]
   1691a:	2b00      	cmp	r3, #0
   1691c:	d009      	beq.n	16932 <_ZN11StrategieV26updateEv+0x572>
            currentCommand->update();
   1691e:	4b17      	ldr	r3, [pc, #92]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   16920:	681b      	ldr	r3, [r3, #0]
   16922:	681b      	ldr	r3, [r3, #0]
   16924:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16928:	681a      	ldr	r2, [r3, #0]
   1692a:	4b14      	ldr	r3, [pc, #80]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   1692c:	681b      	ldr	r3, [r3, #0]
   1692e:	4618      	mov	r0, r3
   16930:	4790      	blx	r2
        Asservissement::asservissement->setCommandSpeeds(currentCommand);
   16932:	4b09      	ldr	r3, [pc, #36]	(16958 <_ZN11StrategieV26updateEv+0x598>)
   16934:	681a      	ldr	r2, [r3, #0]
   16936:	4b11      	ldr	r3, [pc, #68]	(1697c <_ZN11StrategieV26updateEv+0x5bc>)
   16938:	681b      	ldr	r3, [r3, #0]
   1693a:	4610      	mov	r0, r2
   1693c:	4619      	mov	r1, r3
   1693e:	f7f0 ffc7 	bl	78d0 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    }
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}
   16942:	f107 07b4 	add.w	r7, r7, #180	; 0xb4
   16946:	46bd      	mov	sp, r7
   16948:	bd90      	pop	{r4, r7, pc}
   1694a:	46c0      	nop			(mov r8, r8)
   1694c:	200005b0 	.word	0x200005b0
   16950:	200005b4 	.word	0x200005b4
   16954:	200005bc 	.word	0x200005bc
   16958:	20000570 	.word	0x20000570
   1695c:	200005c0 	.word	0x200005c0
   16960:	20000644 	.word	0x20000644
   16964:	20000656 	.word	0x20000656
   16968:	20000670 	.word	0x20000670
   1696c:	20000674 	.word	0x20000674
   16970:	200005c4 	.word	0x200005c4
   16974:	20000580 	.word	0x20000580
   16978:	41f00000 	.word	0x41f00000
   1697c:	200005b8 	.word	0x200005b8
   16980:	20000649 	.word	0x20000649
   16984:	20000654 	.word	0x20000654
   16988:	20000660 	.word	0x20000660
   1698c:	2000064a 	.word	0x2000064a
   16990:	00029810 	.word	0x00029810

00016994 <_ZN11StrategieV2D0Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   16994:	b580      	push	{r7, lr}
   16996:	b082      	sub	sp, #8
   16998:	af00      	add	r7, sp, #0
   1699a:	6078      	str	r0, [r7, #4]
   1699c:	687a      	ldr	r2, [r7, #4]
   1699e:	4b08      	ldr	r3, [pc, #32]	(169c0 <_ZN11StrategieV2D0Ev+0x2c>)
   169a0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   169a2:	f04f 0301 	mov.w	r3, #1	; 0x1
   169a6:	b2db      	uxtb	r3, r3
   169a8:	2b00      	cmp	r3, #0
   169aa:	d002      	beq.n	169b2 <_ZN11StrategieV2D0Ev+0x1e>
   169ac:	6878      	ldr	r0, [r7, #4]
   169ae:	f7f8 f945 	bl	ec3c <_ZdlPv>
   169b2:	687b      	ldr	r3, [r7, #4]
   169b4:	4618      	mov	r0, r3
   169b6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   169ba:	46bd      	mov	sp, r7
   169bc:	bd80      	pop	{r7, pc}
   169be:	46c0      	nop			(mov r8, r8)
   169c0:	00022480 	.word	0x00022480

000169c4 <_ZN11StrategieV2D1Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   169c4:	b580      	push	{r7, lr}
   169c6:	b082      	sub	sp, #8
   169c8:	af00      	add	r7, sp, #0
   169ca:	6078      	str	r0, [r7, #4]
   169cc:	687a      	ldr	r2, [r7, #4]
   169ce:	4b08      	ldr	r3, [pc, #32]	(169f0 <_ZN11StrategieV2D1Ev+0x2c>)
   169d0:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   169d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   169d6:	b2db      	uxtb	r3, r3
   169d8:	2b00      	cmp	r3, #0
   169da:	d002      	beq.n	169e2 <_ZN11StrategieV2D1Ev+0x1e>
   169dc:	6878      	ldr	r0, [r7, #4]
   169de:	f7f8 f92d 	bl	ec3c <_ZdlPv>
   169e2:	687b      	ldr	r3, [r7, #4]
   169e4:	4618      	mov	r0, r3
   169e6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   169ea:	46bd      	mov	sp, r7
   169ec:	bd80      	pop	{r7, pc}
   169ee:	46c0      	nop			(mov r8, r8)
   169f0:	00022480 	.word	0x00022480

000169f4 <_ZN11StrategieV2D2Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   169f4:	b580      	push	{r7, lr}
   169f6:	b082      	sub	sp, #8
   169f8:	af00      	add	r7, sp, #0
   169fa:	6078      	str	r0, [r7, #4]
   169fc:	687a      	ldr	r2, [r7, #4]
   169fe:	4b08      	ldr	r3, [pc, #32]	(16a20 <_ZN11StrategieV2D2Ev+0x2c>)
   16a00:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   16a02:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a06:	b2db      	uxtb	r3, r3
   16a08:	2b00      	cmp	r3, #0
   16a0a:	d002      	beq.n	16a12 <_ZN11StrategieV2D2Ev+0x1e>
   16a0c:	6878      	ldr	r0, [r7, #4]
   16a0e:	f7f8 f915 	bl	ec3c <_ZdlPv>
   16a12:	687b      	ldr	r3, [r7, #4]
   16a14:	4618      	mov	r0, r3
   16a16:	f107 0708 	add.w	r7, r7, #8	; 0x8
   16a1a:	46bd      	mov	sp, r7
   16a1c:	bd80      	pop	{r7, pc}
   16a1e:	46c0      	nop			(mov r8, r8)
   16a20:	00022480 	.word	0x00022480

00016a24 <_ZN11StrategieV2C1Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   16a24:	b580      	push	{r7, lr}
   16a26:	b08a      	sub	sp, #40
   16a28:	af00      	add	r7, sp, #0
   16a2a:	6178      	str	r0, [r7, #20]
   16a2c:	460b      	mov	r3, r1
   16a2e:	74fb      	strb	r3, [r7, #19]
   16a30:	697a      	ldr	r2, [r7, #20]
   16a32:	4b33      	ldr	r3, [pc, #204]	(16b00 <_ZN11StrategieV2C1Eb+0xdc>)
   16a34:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   16a36:	4a33      	ldr	r2, [pc, #204]	(16b04 <_ZN11StrategieV2C1Eb+0xe0>)
   16a38:	7cfb      	ldrb	r3, [r7, #19]
   16a3a:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   16a3c:	4a32      	ldr	r2, [pc, #200]	(16b08 <_ZN11StrategieV2C1Eb+0xe4>)
   16a3e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a42:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16a44:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a48:	627b      	str	r3, [r7, #36]
   16a4a:	e008      	b.n	16a5e <_ZN11StrategieV2C1Eb+0x3a>
        sharpsToCheck[i] = false;
   16a4c:	6a79      	ldr	r1, [r7, #36]
   16a4e:	4a2f      	ldr	r2, [pc, #188]	(16b0c <_ZN11StrategieV2C1Eb+0xe8>)
   16a50:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a54:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16a56:	6a7b      	ldr	r3, [r7, #36]
   16a58:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16a5c:	627b      	str	r3, [r7, #36]
   16a5e:	6a7b      	ldr	r3, [r7, #36]
   16a60:	2b07      	cmp	r3, #7
   16a62:	ddf3      	ble.n	16a4c <_ZN11StrategieV2C1Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   16a64:	f04f 0300 	mov.w	r3, #0	; 0x0
   16a68:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   16a6a:	f44f 70c4 	mov.w	r0, #392	; 0x188
   16a6e:	f7f8 f83f 	bl	eaf0 <_Znwj>
   16a72:	4603      	mov	r3, r0
   16a74:	603b      	str	r3, [r7, #0]
   16a76:	683a      	ldr	r2, [r7, #0]
   16a78:	2a00      	cmp	r2, #0
   16a7a:	d007      	beq.n	16a8c <_ZN11StrategieV2C1Eb+0x68>
   16a7c:	7cfb      	ldrb	r3, [r7, #19]
   16a7e:	6838      	ldr	r0, [r7, #0]
   16a80:	4619      	mov	r1, r3
   16a82:	f7fa faeb 	bl	1105c <_ZN9Krabi2015C1Eb>
   16a86:	683b      	ldr	r3, [r7, #0]
   16a88:	607b      	str	r3, [r7, #4]
   16a8a:	e001      	b.n	16a90 <_ZN11StrategieV2C1Eb+0x6c>
   16a8c:	683a      	ldr	r2, [r7, #0]
   16a8e:	607a      	str	r2, [r7, #4]
   16a90:	687a      	ldr	r2, [r7, #4]
   16a92:	4b1f      	ldr	r3, [pc, #124]	(16b10 <_ZN11StrategieV2C1Eb+0xec>)
   16a94:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   16a96:	4b1f      	ldr	r3, [pc, #124]	(16b14 <_ZN11StrategieV2C1Eb+0xf0>)
   16a98:	681a      	ldr	r2, [r3, #0]
   16a9a:	4b1d      	ldr	r3, [pc, #116]	(16b10 <_ZN11StrategieV2C1Eb+0xec>)
   16a9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16aa0:	4b1d      	ldr	r3, [pc, #116]	(16b18 <_ZN11StrategieV2C1Eb+0xf4>)
   16aa2:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   16aa4:	4a1d      	ldr	r2, [pc, #116]	(16b1c <_ZN11StrategieV2C1Eb+0xf8>)
   16aa6:	697b      	ldr	r3, [r7, #20]
   16aa8:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   16aaa:	f7f0 fc39 	bl	7320 <_ZN7Sensors12getSingletonEv>
   16aae:	4603      	mov	r3, r0
   16ab0:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   16ab2:	6a38      	ldr	r0, [r7, #32]
   16ab4:	f7ef fbb6 	bl	6224 <_ZN7Sensors19getSharpSensorsListEv>
   16ab8:	4602      	mov	r2, r0
   16aba:	4b19      	ldr	r3, [pc, #100]	(16b20 <_ZN11StrategieV2C1Eb+0xfc>)
   16abc:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   16abe:	f7ff fa43 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   16ac2:	f04f 0001 	mov.w	r0, #1	; 0x1
   16ac6:	f7f8 f813 	bl	eaf0 <_Znwj>
   16aca:	4603      	mov	r3, r0
   16acc:	60bb      	str	r3, [r7, #8]
   16ace:	68bb      	ldr	r3, [r7, #8]
   16ad0:	2b00      	cmp	r3, #0
   16ad2:	d005      	beq.n	16ae0 <_ZN11StrategieV2C1Eb+0xbc>
   16ad4:	68b8      	ldr	r0, [r7, #8]
   16ad6:	f7f7 f987 	bl	dde8 <_ZN8TourelleC1Ev>
   16ada:	68ba      	ldr	r2, [r7, #8]
   16adc:	60fa      	str	r2, [r7, #12]
   16ade:	e001      	b.n	16ae4 <_ZN11StrategieV2C1Eb+0xc0>
   16ae0:	68bb      	ldr	r3, [r7, #8]
   16ae2:	60fb      	str	r3, [r7, #12]
   16ae4:	4b0f      	ldr	r3, [pc, #60]	(16b24 <_ZN11StrategieV2C1Eb+0x100>)
   16ae6:	68fa      	ldr	r2, [r7, #12]
   16ae8:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   16aea:	4a0f      	ldr	r2, [pc, #60]	(16b28 <_ZN11StrategieV2C1Eb+0x104>)
   16aec:	f04f 0300 	mov.w	r3, #0	; 0x0
   16af0:	6013      	str	r3, [r2, #0]
}
   16af2:	697b      	ldr	r3, [r7, #20]
   16af4:	4618      	mov	r0, r3
   16af6:	f107 0728 	add.w	r7, r7, #40	; 0x28
   16afa:	46bd      	mov	sp, r7
   16afc:	bd80      	pop	{r7, pc}
   16afe:	46c0      	nop			(mov r8, r8)
   16b00:	00022480 	.word	0x00022480
   16b04:	20000655 	.word	0x20000655
   16b08:	20000674 	.word	0x20000674
   16b0c:	20000656 	.word	0x20000656
   16b10:	200005c4 	.word	0x200005c4
   16b14:	200005c0 	.word	0x200005c0
   16b18:	200005bc 	.word	0x200005bc
   16b1c:	200005b0 	.word	0x200005b0
   16b20:	20000644 	.word	0x20000644
   16b24:	20000678 	.word	0x20000678
   16b28:	200005b4 	.word	0x200005b4

00016b2c <_ZN11StrategieV2C2Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   16b2c:	b580      	push	{r7, lr}
   16b2e:	b08a      	sub	sp, #40
   16b30:	af00      	add	r7, sp, #0
   16b32:	6178      	str	r0, [r7, #20]
   16b34:	460b      	mov	r3, r1
   16b36:	74fb      	strb	r3, [r7, #19]
   16b38:	697a      	ldr	r2, [r7, #20]
   16b3a:	4b33      	ldr	r3, [pc, #204]	(16c08 <_ZN11StrategieV2C2Eb+0xdc>)
   16b3c:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   16b3e:	4a33      	ldr	r2, [pc, #204]	(16c0c <_ZN11StrategieV2C2Eb+0xe0>)
   16b40:	7cfb      	ldrb	r3, [r7, #19]
   16b42:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   16b44:	4a32      	ldr	r2, [pc, #200]	(16c10 <_ZN11StrategieV2C2Eb+0xe4>)
   16b46:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b4a:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16b4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b50:	627b      	str	r3, [r7, #36]
   16b52:	e008      	b.n	16b66 <_ZN11StrategieV2C2Eb+0x3a>
        sharpsToCheck[i] = false;
   16b54:	6a79      	ldr	r1, [r7, #36]
   16b56:	4a2f      	ldr	r2, [pc, #188]	(16c14 <_ZN11StrategieV2C2Eb+0xe8>)
   16b58:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b5c:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   16b5e:	6a7b      	ldr	r3, [r7, #36]
   16b60:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16b64:	627b      	str	r3, [r7, #36]
   16b66:	6a7b      	ldr	r3, [r7, #36]
   16b68:	2b07      	cmp	r3, #7
   16b6a:	ddf3      	ble.n	16b54 <_ZN11StrategieV2C2Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   16b6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16b70:	61fb      	str	r3, [r7, #28]
    //actionsToDo[0] = new StrategieV3(blue);

    /* Appel des stratégies */

    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   16b72:	f44f 70c4 	mov.w	r0, #392	; 0x188
   16b76:	f7f7 ffbb 	bl	eaf0 <_Znwj>
   16b7a:	4603      	mov	r3, r0
   16b7c:	603b      	str	r3, [r7, #0]
   16b7e:	683a      	ldr	r2, [r7, #0]
   16b80:	2a00      	cmp	r2, #0
   16b82:	d007      	beq.n	16b94 <_ZN11StrategieV2C2Eb+0x68>
   16b84:	7cfb      	ldrb	r3, [r7, #19]
   16b86:	6838      	ldr	r0, [r7, #0]
   16b88:	4619      	mov	r1, r3
   16b8a:	f7fa fa67 	bl	1105c <_ZN9Krabi2015C1Eb>
   16b8e:	683b      	ldr	r3, [r7, #0]
   16b90:	607b      	str	r3, [r7, #4]
   16b92:	e001      	b.n	16b98 <_ZN11StrategieV2C2Eb+0x6c>
   16b94:	683a      	ldr	r2, [r7, #0]
   16b96:	607a      	str	r2, [r7, #4]
   16b98:	687a      	ldr	r2, [r7, #4]
   16b9a:	4b1f      	ldr	r3, [pc, #124]	(16c18 <_ZN11StrategieV2C2Eb+0xec>)
   16b9c:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   16b9e:	4b1f      	ldr	r3, [pc, #124]	(16c1c <_ZN11StrategieV2C2Eb+0xf0>)
   16ba0:	681a      	ldr	r2, [r3, #0]
   16ba2:	4b1d      	ldr	r3, [pc, #116]	(16c18 <_ZN11StrategieV2C2Eb+0xec>)
   16ba4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16ba8:	4b1d      	ldr	r3, [pc, #116]	(16c20 <_ZN11StrategieV2C2Eb+0xf4>)
   16baa:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   16bac:	4a1d      	ldr	r2, [pc, #116]	(16c24 <_ZN11StrategieV2C2Eb+0xf8>)
   16bae:	697b      	ldr	r3, [r7, #20]
   16bb0:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   16bb2:	f7f0 fbb5 	bl	7320 <_ZN7Sensors12getSingletonEv>
   16bb6:	4603      	mov	r3, r0
   16bb8:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   16bba:	6a38      	ldr	r0, [r7, #32]
   16bbc:	f7ef fb32 	bl	6224 <_ZN7Sensors19getSharpSensorsListEv>
   16bc0:	4602      	mov	r2, r0
   16bc2:	4b19      	ldr	r3, [pc, #100]	(16c28 <_ZN11StrategieV2C2Eb+0xfc>)
   16bc4:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   16bc6:	f7ff f9bf 	bl	15f48 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   16bca:	f04f 0001 	mov.w	r0, #1	; 0x1
   16bce:	f7f7 ff8f 	bl	eaf0 <_Znwj>
   16bd2:	4603      	mov	r3, r0
   16bd4:	60bb      	str	r3, [r7, #8]
   16bd6:	68bb      	ldr	r3, [r7, #8]
   16bd8:	2b00      	cmp	r3, #0
   16bda:	d005      	beq.n	16be8 <_ZN11StrategieV2C2Eb+0xbc>
   16bdc:	68b8      	ldr	r0, [r7, #8]
   16bde:	f7f7 f903 	bl	dde8 <_ZN8TourelleC1Ev>
   16be2:	68ba      	ldr	r2, [r7, #8]
   16be4:	60fa      	str	r2, [r7, #12]
   16be6:	e001      	b.n	16bec <_ZN11StrategieV2C2Eb+0xc0>
   16be8:	68bb      	ldr	r3, [r7, #8]
   16bea:	60fb      	str	r3, [r7, #12]
   16bec:	4b0f      	ldr	r3, [pc, #60]	(16c2c <_ZN11StrategieV2C2Eb+0x100>)
   16bee:	68fa      	ldr	r2, [r7, #12]
   16bf0:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   16bf2:	4a0f      	ldr	r2, [pc, #60]	(16c30 <_ZN11StrategieV2C2Eb+0x104>)
   16bf4:	f04f 0300 	mov.w	r3, #0	; 0x0
   16bf8:	6013      	str	r3, [r2, #0]
}
   16bfa:	697b      	ldr	r3, [r7, #20]
   16bfc:	4618      	mov	r0, r3
   16bfe:	f107 0728 	add.w	r7, r7, #40	; 0x28
   16c02:	46bd      	mov	sp, r7
   16c04:	bd80      	pop	{r7, pc}
   16c06:	46c0      	nop			(mov r8, r8)
   16c08:	00022480 	.word	0x00022480
   16c0c:	20000655 	.word	0x20000655
   16c10:	20000674 	.word	0x20000674
   16c14:	20000656 	.word	0x20000656
   16c18:	200005c4 	.word	0x200005c4
   16c1c:	200005c0 	.word	0x200005c0
   16c20:	200005bc 	.word	0x200005bc
   16c24:	200005b0 	.word	0x200005b0
   16c28:	20000644 	.word	0x20000644
   16c2c:	20000678 	.word	0x20000678
   16c30:	200005b4 	.word	0x200005b4

00016c34 <_ZN11StrategieV316collisionAvoidedEv>:
    for(int i = 0 ; i < 10 ; i++){
        this->tableauEtapes[i]->setState(0);
    }
}

void StrategieV3::collisionAvoided(){
   16c34:	b480      	push	{r7}
   16c36:	b083      	sub	sp, #12
   16c38:	af00      	add	r7, sp, #0
   16c3a:	6078      	str	r0, [r7, #4]
    this->avoiding = true;
   16c3c:	687b      	ldr	r3, [r7, #4]
   16c3e:	f04f 0201 	mov.w	r2, #1	; 0x1
   16c42:	f883 2038 	strb.w	r2, [r3, #56]
}
   16c46:	f107 070c 	add.w	r7, r7, #12	; 0xc
   16c4a:	46bd      	mov	sp, r7
   16c4c:	bc80      	pop	{r7}
   16c4e:	4770      	bx	lr

00016c50 <_ZN11StrategieV312updateScoresEv>:
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}

bool StrategieV3::updateScores() {
   16c50:	b580      	push	{r7, lr}
   16c52:	b086      	sub	sp, #24
   16c54:	af00      	add	r7, sp, #0
   16c56:	6078      	str	r0, [r7, #4]
    //le temps restant done
    //la trajectoire de notre autre robot
    //...
    //C'est aussi utilisé pour savoir si on est dans un sous-graphe sans objectif,
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
   16c58:	f04f 0300 	mov.w	r3, #0	; 0x0
   16c5c:	60fb      	str	r3, [r7, #12]
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
   16c5e:	f04f 0300 	mov.w	r3, #0	; 0x0
   16c62:	74fb      	strb	r3, [r7, #19]
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   16c64:	f04f 0300 	mov.w	r3, #0	; 0x0
   16c68:	617b      	str	r3, [r7, #20]
   16c6a:	e01e      	b.n	16caa <_ZN11StrategieV312updateScoresEv+0x5a>
    {
        scoreTypeEtape=this->getScoreEtape(i);
   16c6c:	687b      	ldr	r3, [r7, #4]
   16c6e:	681b      	ldr	r3, [r3, #0]
   16c70:	f103 031c 	add.w	r3, r3, #28	; 0x1c
   16c74:	681b      	ldr	r3, [r3, #0]
   16c76:	6878      	ldr	r0, [r7, #4]
   16c78:	6979      	ldr	r1, [r7, #20]
   16c7a:	4798      	blx	r3
   16c7c:	4603      	mov	r3, r0
   16c7e:	60fb      	str	r3, [r7, #12]
        if(scoreTypeEtape)
   16c80:	68fb      	ldr	r3, [r7, #12]
   16c82:	2b00      	cmp	r3, #0
   16c84:	d002      	beq.n	16c8c <_ZN11StrategieV312updateScoresEv+0x3c>
        {
            resteDesChosesAFaire = true;
   16c86:	f04f 0301 	mov.w	r3, #1	; 0x1
   16c8a:	74fb      	strb	r3, [r7, #19]
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
   16c8c:	687b      	ldr	r3, [r7, #4]
   16c8e:	6b1a      	ldr	r2, [r3, #48]
   16c90:	697b      	ldr	r3, [r7, #20]
   16c92:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16c96:	4413      	add	r3, r2
   16c98:	681b      	ldr	r3, [r3, #0]
   16c9a:	4618      	mov	r0, r3
   16c9c:	68f9      	ldr	r1, [r7, #12]
   16c9e:	f7f9 fe31 	bl	10904 <_ZN5Etape8setScoreEi>
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   16ca2:	697b      	ldr	r3, [r7, #20]
   16ca4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16ca8:	617b      	str	r3, [r7, #20]
   16caa:	687b      	ldr	r3, [r7, #4]
   16cac:	69da      	ldr	r2, [r3, #28]
   16cae:	697b      	ldr	r3, [r7, #20]
   16cb0:	429a      	cmp	r2, r3
   16cb2:	dcdb      	bgt.n	16c6c <_ZN11StrategieV312updateScoresEv+0x1c>
            resteDesChosesAFaire = true;
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
    }
    return resteDesChosesAFaire;
   16cb4:	7cfb      	ldrb	r3, [r7, #19]
}
   16cb6:	4618      	mov	r0, r3
   16cb8:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16cbc:	46bd      	mov	sp, r7
   16cbe:	bd80      	pop	{r7, pc}

00016cc0 <_ZN11StrategieV313startDijkstraEv>:
    }
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
   16cc0:	b580      	push	{r7, lr}
   16cc2:	b086      	sub	sp, #24
   16cc4:	af00      	add	r7, sp, #0
   16cc6:	60f8      	str	r0, [r7, #12]
    for(int i=0; i<this->nombreEtapes; i++)
   16cc8:	f04f 0300 	mov.w	r3, #0	; 0x0
   16ccc:	617b      	str	r3, [r7, #20]
   16cce:	e00d      	b.n	16cec <_ZN11StrategieV313startDijkstraEv+0x2c>
        tableauEtapesTotal[i]->computeChildDistances();
   16cd0:	68fb      	ldr	r3, [r7, #12]
   16cd2:	6b5a      	ldr	r2, [r3, #52]
   16cd4:	697b      	ldr	r3, [r7, #20]
   16cd6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16cda:	4413      	add	r3, r2
   16cdc:	681b      	ldr	r3, [r3, #0]
   16cde:	4618      	mov	r0, r3
   16ce0:	f7f9 feb6 	bl	10a50 <_ZN5Etape21computeChildDistancesEv>
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
    for(int i=0; i<this->nombreEtapes; i++)
   16ce4:	697b      	ldr	r3, [r7, #20]
   16ce6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16cea:	617b      	str	r3, [r7, #20]
   16cec:	68fb      	ldr	r3, [r7, #12]
   16cee:	69da      	ldr	r2, [r3, #28]
   16cf0:	697b      	ldr	r3, [r7, #20]
   16cf2:	429a      	cmp	r2, r3
   16cf4:	dcec      	bgt.n	16cd0 <_ZN11StrategieV313startDijkstraEv+0x10>
        tableauEtapesTotal[i]->computeChildDistances();

    this->dijkstra = new Dijkstra(tableauEtapesTotal, this->nombreEtapes);
   16cf6:	f04f 0024 	mov.w	r0, #36	; 0x24
   16cfa:	f7f7 fef9 	bl	eaf0 <_Znwj>
   16cfe:	4603      	mov	r3, r0
   16d00:	607b      	str	r3, [r7, #4]
   16d02:	687a      	ldr	r2, [r7, #4]
   16d04:	2a00      	cmp	r2, #0
   16d06:	d00b      	beq.n	16d20 <_ZN11StrategieV313startDijkstraEv+0x60>
   16d08:	68fb      	ldr	r3, [r7, #12]
   16d0a:	6b5a      	ldr	r2, [r3, #52]
   16d0c:	68fb      	ldr	r3, [r7, #12]
   16d0e:	69db      	ldr	r3, [r3, #28]
   16d10:	6878      	ldr	r0, [r7, #4]
   16d12:	4611      	mov	r1, r2
   16d14:	461a      	mov	r2, r3
   16d16:	f7f9 f85b 	bl	fdd0 <_ZN8DijkstraC1EPP5Etapei>
   16d1a:	687b      	ldr	r3, [r7, #4]
   16d1c:	60bb      	str	r3, [r7, #8]
   16d1e:	e001      	b.n	16d24 <_ZN11StrategieV313startDijkstraEv+0x64>
   16d20:	687a      	ldr	r2, [r7, #4]
   16d22:	60ba      	str	r2, [r7, #8]
   16d24:	68fb      	ldr	r3, [r7, #12]
   16d26:	68ba      	ldr	r2, [r7, #8]
   16d28:	62da      	str	r2, [r3, #44]

    this->tableauEtapes = tableauEtapesTotal;
   16d2a:	68fb      	ldr	r3, [r7, #12]
   16d2c:	6b5a      	ldr	r2, [r3, #52]
   16d2e:	68fb      	ldr	r3, [r7, #12]
   16d30:	631a      	str	r2, [r3, #48]
    this->tableauEtapes[0]->setParent(this->tableauEtapes[0]);// Evite de planter si on detecte dès la première boucle (dans le simu)
   16d32:	68fb      	ldr	r3, [r7, #12]
   16d34:	6b1b      	ldr	r3, [r3, #48]
   16d36:	681a      	ldr	r2, [r3, #0]
   16d38:	68fb      	ldr	r3, [r7, #12]
   16d3a:	6b1b      	ldr	r3, [r3, #48]
   16d3c:	681b      	ldr	r3, [r3, #0]
   16d3e:	4610      	mov	r0, r2
   16d40:	4619      	mov	r1, r3
   16d42:	f7f9 fcf1 	bl	10728 <_ZN5Etape9setParentEPS_>

    dijkstra->setEtapeCourante(0);
   16d46:	68fb      	ldr	r3, [r7, #12]
   16d48:	6adb      	ldr	r3, [r3, #44]
   16d4a:	4618      	mov	r0, r3
   16d4c:	f04f 0100 	mov.w	r1, #0	; 0x0
   16d50:	f7f9 f864 	bl	fe1c <_ZN8Dijkstra16setEtapeCouranteEi>
    }
    // ###########################################################################################
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}
   16d54:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16d58:	46bd      	mov	sp, r7
   16d5a:	bd80      	pop	{r7, pc}

00016d5c <_ZN11StrategieV318updateIntermedaireEv>:
void StrategieV3::collisionAvoided(){
    this->avoiding = true;
}


void StrategieV3::updateIntermedaire()
   16d5c:	b580      	push	{r7, lr}
   16d5e:	b086      	sub	sp, #24
   16d60:	af00      	add	r7, sp, #0
   16d62:	6078      	str	r0, [r7, #4]
    //(sauf peut être le parent de l'étape d'origine, mais on s'en fout

    #ifndef ROBOTHW
        qDebug() << "updateIntermedaire\n";
    #endif
    int etapeOuOnVientDArriver = this->etapeEnCours;
   16d64:	687b      	ldr	r3, [r7, #4]
   16d66:	699b      	ldr	r3, [r3, #24]
   16d68:	60fb      	str	r3, [r7, #12]
    this->etapeEnCours = this->goal;
   16d6a:	687b      	ldr	r3, [r7, #4]
   16d6c:	6bda      	ldr	r2, [r3, #60]
   16d6e:	687b      	ldr	r3, [r7, #4]
   16d70:	619a      	str	r2, [r3, #24]
    Etape* toto = this->tableauEtapes[1];
   16d72:	687b      	ldr	r3, [r7, #4]
   16d74:	6b1b      	ldr	r3, [r3, #48]
   16d76:	f103 0304 	add.w	r3, r3, #4	; 0x4
   16d7a:	681b      	ldr	r3, [r3, #0]
   16d7c:	613b      	str	r3, [r7, #16]
    Etape* toto2 = this->tableauEtapes[2];
   16d7e:	687b      	ldr	r3, [r7, #4]
   16d80:	6b1b      	ldr	r3, [r3, #48]
   16d82:	f103 0308 	add.w	r3, r3, #8	; 0x8
   16d86:	681b      	ldr	r3, [r3, #0]
   16d88:	617b      	str	r3, [r7, #20]

    // Si la prochaine étape est le goal, alors au prochain update il faudra trouver un nouvel objectif -> status = 1;
    if(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) == etapeOuOnVientDArriver)
   16d8a:	687b      	ldr	r3, [r7, #4]
   16d8c:	6b1a      	ldr	r2, [r3, #48]
   16d8e:	687b      	ldr	r3, [r7, #4]
   16d90:	699b      	ldr	r3, [r3, #24]
   16d92:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16d96:	4413      	add	r3, r2
   16d98:	681b      	ldr	r3, [r3, #0]
   16d9a:	4618      	mov	r0, r3
   16d9c:	f7f9 fc70 	bl	10680 <_ZN5Etape9getParentEv>
   16da0:	4603      	mov	r3, r0
   16da2:	4618      	mov	r0, r3
   16da4:	f7f9 fd02 	bl	107ac <_ZN5Etape9getNumeroEv>
   16da8:	4602      	mov	r2, r0
   16daa:	68fb      	ldr	r3, [r7, #12]
   16dac:	429a      	cmp	r2, r3
   16dae:	bf14      	ite	ne
   16db0:	2300      	movne	r3, #0
   16db2:	2301      	moveq	r3, #1
   16db4:	b2db      	uxtb	r3, r3
   16db6:	2b00      	cmp	r3, #0
   16db8:	d016      	beq.n	16de8 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    {
        #ifndef ROBOTHW
            qDebug() << "la prochaine étape est le goal\n";
        #endif
        this->statusStrat = 1;
   16dba:	687a      	ldr	r2, [r7, #4]
   16dbc:	f04f 0301 	mov.w	r3, #1	; 0x1
   16dc0:	6413      	str	r3, [r2, #64]
   16dc2:	e011      	b.n	16de8 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
    {
        #ifndef ROBOTHW
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
   16dc4:	687b      	ldr	r3, [r7, #4]
   16dc6:	6b1a      	ldr	r2, [r3, #48]
   16dc8:	687b      	ldr	r3, [r7, #4]
   16dca:	699b      	ldr	r3, [r3, #24]
   16dcc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16dd0:	4413      	add	r3, r2
   16dd2:	681b      	ldr	r3, [r3, #0]
   16dd4:	4618      	mov	r0, r3
   16dd6:	f7f9 fc53 	bl	10680 <_ZN5Etape9getParentEv>
   16dda:	4603      	mov	r3, r0
   16ddc:	4618      	mov	r0, r3
   16dde:	f7f9 fce5 	bl	107ac <_ZN5Etape9getNumeroEv>
   16de2:	4602      	mov	r2, r0
   16de4:	687b      	ldr	r3, [r7, #4]
   16de6:	619a      	str	r2, [r3, #24]
        #endif
        this->statusStrat = 1;
    }

    //On cherche l'étape suivant vers l'etape - but
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
   16de8:	687b      	ldr	r3, [r7, #4]
   16dea:	6b1a      	ldr	r2, [r3, #48]
   16dec:	687b      	ldr	r3, [r7, #4]
   16dee:	699b      	ldr	r3, [r3, #24]
   16df0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16df4:	4413      	add	r3, r2
   16df6:	681b      	ldr	r3, [r3, #0]
   16df8:	4618      	mov	r0, r3
   16dfa:	f7f9 fc41 	bl	10680 <_ZN5Etape9getParentEv>
   16dfe:	4603      	mov	r3, r0
   16e00:	4618      	mov	r0, r3
   16e02:	f7f9 fcd3 	bl	107ac <_ZN5Etape9getNumeroEv>
   16e06:	4602      	mov	r2, r0
   16e08:	68fb      	ldr	r3, [r7, #12]
   16e0a:	429a      	cmp	r2, r3
   16e0c:	bf0c      	ite	eq
   16e0e:	2300      	moveq	r3, #0
   16e10:	2301      	movne	r3, #1
   16e12:	b2db      	uxtb	r3, r3
   16e14:	2b00      	cmp	r3, #0
   16e16:	d1d5      	bne.n	16dc4 <_ZN11StrategieV318updateIntermedaireEv+0x68>
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
    }

    if(this->statusStrat == 1)
   16e18:	687b      	ldr	r3, [r7, #4]
   16e1a:	6c1b      	ldr	r3, [r3, #64]
   16e1c:	2b01      	cmp	r3, #1
   16e1e:	d10b      	bne.n	16e38 <_ZN11StrategieV318updateIntermedaireEv+0xdc>
    {
        //On réalise l'action de l'étape - but
        StrategieV2::addTemporaryAction(actionEtape[this->etapeEnCours]);
   16e20:	687b      	ldr	r3, [r7, #4]
   16e22:	6a5a      	ldr	r2, [r3, #36]
   16e24:	687b      	ldr	r3, [r7, #4]
   16e26:	699b      	ldr	r3, [r3, #24]
   16e28:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16e2c:	4413      	add	r3, r2
   16e2e:	681b      	ldr	r3, [r3, #0]
   16e30:	4618      	mov	r0, r3
   16e32:	f7ff f815 	bl	15e60 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
   16e36:	e00d      	b.n	16e54 <_ZN11StrategieV318updateIntermedaireEv+0xf8>
    }
    else
    {
        //On ajoute l'action d'aller en ligne droite vers cette étape intermédiaire
        StrategieV2::addTemporaryAction(&actionGoto[this->etapeEnCours]);
   16e38:	687b      	ldr	r3, [r7, #4]
   16e3a:	6a99      	ldr	r1, [r3, #40]
   16e3c:	687b      	ldr	r3, [r7, #4]
   16e3e:	699b      	ldr	r3, [r3, #24]
   16e40:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16e44:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16e48:	ebc2 0303 	rsb	r3, r2, r3
   16e4c:	440b      	add	r3, r1
   16e4e:	4618      	mov	r0, r3
   16e50:	f7ff f806 	bl	15e60 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
    }
}
   16e54:	f107 0718 	add.w	r7, r7, #24	; 0x18
   16e58:	46bd      	mov	sp, r7
   16e5a:	bd80      	pop	{r7, pc}

00016e5c <_ZN11StrategieV315resetEverythingEv>:
        }
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
   16e5c:	b580      	push	{r7, lr}
   16e5e:	b084      	sub	sp, #16
   16e60:	af00      	add	r7, sp, #0
   16e62:	6078      	str	r0, [r7, #4]
    for(int i = 0 ; i < 10 ; i++){
   16e64:	f04f 0300 	mov.w	r3, #0	; 0x0
   16e68:	60fb      	str	r3, [r7, #12]
   16e6a:	e00f      	b.n	16e8c <_ZN11StrategieV315resetEverythingEv+0x30>
        this->tableauEtapes[i]->setState(0);
   16e6c:	687b      	ldr	r3, [r7, #4]
   16e6e:	6b1a      	ldr	r2, [r3, #48]
   16e70:	68fb      	ldr	r3, [r7, #12]
   16e72:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16e76:	4413      	add	r3, r2
   16e78:	681b      	ldr	r3, [r3, #0]
   16e7a:	4618      	mov	r0, r3
   16e7c:	f04f 0100 	mov.w	r1, #0	; 0x0
   16e80:	f7f9 fc2a 	bl	106d8 <_ZN5Etape8setStateEi>
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
    for(int i = 0 ; i < 10 ; i++){
   16e84:	68fb      	ldr	r3, [r7, #12]
   16e86:	f103 0301 	add.w	r3, r3, #1	; 0x1
   16e8a:	60fb      	str	r3, [r7, #12]
   16e8c:	68fb      	ldr	r3, [r7, #12]
   16e8e:	2b09      	cmp	r3, #9
   16e90:	ddec      	ble.n	16e6c <_ZN11StrategieV315resetEverythingEv+0x10>
        this->tableauEtapes[i]->setState(0);
    }
}
   16e92:	f107 0710 	add.w	r7, r7, #16	; 0x10
   16e96:	46bd      	mov	sp, r7
   16e98:	bd80      	pop	{r7, pc}
   16e9a:	46c0      	nop			(mov r8, r8)

00016e9c <_ZN11StrategieV36updateEv>:
    */


}

int StrategieV3::update()
   16e9c:	b580      	push	{r7, lr}
   16e9e:	b08e      	sub	sp, #56
   16ea0:	af00      	add	r7, sp, #0
   16ea2:	60f8      	str	r0, [r7, #12]
{

    this->actionEtape[this->etapeEnCours]->reset();
   16ea4:	68fb      	ldr	r3, [r7, #12]
   16ea6:	6a5a      	ldr	r2, [r3, #36]
   16ea8:	68fb      	ldr	r3, [r7, #12]
   16eaa:	699b      	ldr	r3, [r3, #24]
   16eac:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16eb0:	4413      	add	r3, r2
   16eb2:	681b      	ldr	r3, [r3, #0]
   16eb4:	681b      	ldr	r3, [r3, #0]
   16eb6:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16eba:	6819      	ldr	r1, [r3, #0]
   16ebc:	68fb      	ldr	r3, [r7, #12]
   16ebe:	6a5a      	ldr	r2, [r3, #36]
   16ec0:	68fb      	ldr	r3, [r7, #12]
   16ec2:	699b      	ldr	r3, [r3, #24]
   16ec4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16ec8:	4413      	add	r3, r2
   16eca:	681b      	ldr	r3, [r3, #0]
   16ecc:	4618      	mov	r0, r3
   16ece:	4788      	blx	r1
    this->actionGoto[this->etapeEnCours].reset();
   16ed0:	68fb      	ldr	r3, [r7, #12]
   16ed2:	6a99      	ldr	r1, [r3, #40]
   16ed4:	68fb      	ldr	r3, [r7, #12]
   16ed6:	699b      	ldr	r3, [r3, #24]
   16ed8:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16edc:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16ee0:	ebc2 0303 	rsb	r3, r2, r3
   16ee4:	440b      	add	r3, r1
   16ee6:	681b      	ldr	r3, [r3, #0]
   16ee8:	f103 0314 	add.w	r3, r3, #20	; 0x14
   16eec:	f8d3 c000 	ldr.w	ip, [r3]
   16ef0:	68fb      	ldr	r3, [r7, #12]
   16ef2:	6a99      	ldr	r1, [r3, #40]
   16ef4:	68fb      	ldr	r3, [r7, #12]
   16ef6:	699b      	ldr	r3, [r3, #24]
   16ef8:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16efc:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16f00:	ebc2 0303 	rsb	r3, r2, r3
   16f04:	440b      	add	r3, r1
   16f06:	4618      	mov	r0, r3
   16f08:	47e0      	blx	ip



    //Si on est en train d'éviter, on revient à l'étape précédente, et on marque l'étape comme à éviter
    if(this->avoiding)
   16f0a:	68fb      	ldr	r3, [r7, #12]
   16f0c:	f893 3038 	ldrb.w	r3, [r3, #56]
   16f10:	2b00      	cmp	r3, #0
   16f12:	f000 80cf 	beq.w	170b4 <_ZN11StrategieV36updateEv+0x218>
    {
        this->tableauEtapes[this->etapeEnCours]->robotVu();
   16f16:	68fb      	ldr	r3, [r7, #12]
   16f18:	6b1a      	ldr	r2, [r3, #48]
   16f1a:	68fb      	ldr	r3, [r7, #12]
   16f1c:	699b      	ldr	r3, [r3, #24]
   16f1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16f22:	4413      	add	r3, r2
   16f24:	681b      	ldr	r3, [r3, #0]
   16f26:	4618      	mov	r0, r3
   16f28:	f7f9 fc68 	bl	107fc <_ZN5Etape7robotVuEv>
        //this->tableauEtapes[this->etapeEnCours]->setState(-2);
        this->tableauEtapes[etapeEnCours]->getParent()->setParent(this->tableauEtapes[this->etapeEnCours]);
   16f2c:	68fb      	ldr	r3, [r7, #12]
   16f2e:	6b1a      	ldr	r2, [r3, #48]
   16f30:	68fb      	ldr	r3, [r7, #12]
   16f32:	699b      	ldr	r3, [r3, #24]
   16f34:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16f38:	4413      	add	r3, r2
   16f3a:	681b      	ldr	r3, [r3, #0]
   16f3c:	4618      	mov	r0, r3
   16f3e:	f7f9 fb9f 	bl	10680 <_ZN5Etape9getParentEv>
   16f42:	4601      	mov	r1, r0
   16f44:	68fb      	ldr	r3, [r7, #12]
   16f46:	6b1a      	ldr	r2, [r3, #48]
   16f48:	68fb      	ldr	r3, [r7, #12]
   16f4a:	699b      	ldr	r3, [r3, #24]
   16f4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16f50:	4413      	add	r3, r2
   16f52:	681b      	ldr	r3, [r3, #0]
   16f54:	4608      	mov	r0, r1
   16f56:	4619      	mov	r1, r3
   16f58:	f7f9 fbe6 	bl	10728 <_ZN5Etape9setParentEPS_>
        this->etapeEnCours = this->tableauEtapes[etapeEnCours]->getParent()->getNumero();
   16f5c:	68fb      	ldr	r3, [r7, #12]
   16f5e:	6b1a      	ldr	r2, [r3, #48]
   16f60:	68fb      	ldr	r3, [r7, #12]
   16f62:	699b      	ldr	r3, [r3, #24]
   16f64:	ea4f 0383 	mov.w	r3, r3, lsl #2
   16f68:	4413      	add	r3, r2
   16f6a:	681b      	ldr	r3, [r3, #0]
   16f6c:	4618      	mov	r0, r3
   16f6e:	f7f9 fb87 	bl	10680 <_ZN5Etape9getParentEv>
   16f72:	4603      	mov	r3, r0
   16f74:	4618      	mov	r0, r3
   16f76:	f7f9 fc19 	bl	107ac <_ZN5Etape9getNumeroEv>
   16f7a:	4602      	mov	r2, r0
   16f7c:	68fb      	ldr	r3, [r7, #12]
   16f7e:	619a      	str	r2, [r3, #24]



        //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
        dijkstra->setEtapeCourante(this->etapeEnCours);
   16f80:	68fb      	ldr	r3, [r7, #12]
   16f82:	6ada      	ldr	r2, [r3, #44]
   16f84:	68fb      	ldr	r3, [r7, #12]
   16f86:	699b      	ldr	r3, [r3, #24]
   16f88:	4610      	mov	r0, r2
   16f8a:	4619      	mov	r1, r3
   16f8c:	f7f8 ff46 	bl	fe1c <_ZN8Dijkstra16setEtapeCouranteEi>

        if(this->enTrainEviterReculant)
   16f90:	68fb      	ldr	r3, [r7, #12]
   16f92:	f893 3044 	ldrb.w	r3, [r3, #68]
   16f96:	2b00      	cmp	r3, #0
   16f98:	d01a      	beq.n	16fd0 <_ZN11StrategieV36updateEv+0x134>
        {
            this->enTrainEviterReculant = false;
   16f9a:	68fa      	ldr	r2, [r7, #12]
   16f9c:	f04f 0300 	mov.w	r3, #0	; 0x0
   16fa0:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = true;
   16fa4:	68fa      	ldr	r2, [r7, #12]
   16fa6:	f04f 0301 	mov.w	r3, #1	; 0x1
   16faa:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(false);
   16fae:	68fb      	ldr	r3, [r7, #12]
   16fb0:	6a99      	ldr	r1, [r3, #40]
   16fb2:	68fb      	ldr	r3, [r7, #12]
   16fb4:	699b      	ldr	r3, [r3, #24]
   16fb6:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16fba:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16fbe:	ebc2 0303 	rsb	r3, r2, r3
   16fc2:	440b      	add	r3, r1
   16fc4:	4618      	mov	r0, r3
   16fc6:	f04f 0100 	mov.w	r1, #0	; 0x0
   16fca:	f7fe f961 	bl	15290 <_ZN17MediumLevelAction9setGoBackEb>
   16fce:	e019      	b.n	17004 <_ZN11StrategieV36updateEv+0x168>
            //actionEtape[etapeEnCours]->setGoBack(false);
        }
        else
        {
            this->enTrainEviterReculant = true;
   16fd0:	68fa      	ldr	r2, [r7, #12]
   16fd2:	f04f 0301 	mov.w	r3, #1	; 0x1
   16fd6:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = false;
   16fda:	68fa      	ldr	r2, [r7, #12]
   16fdc:	f04f 0300 	mov.w	r3, #0	; 0x0
   16fe0:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(true);
   16fe4:	68fb      	ldr	r3, [r7, #12]
   16fe6:	6a99      	ldr	r1, [r3, #40]
   16fe8:	68fb      	ldr	r3, [r7, #12]
   16fea:	699b      	ldr	r3, [r3, #24]
   16fec:	ea4f 1203 	mov.w	r2, r3, lsl #4
   16ff0:	ea4f 0382 	mov.w	r3, r2, lsl #2
   16ff4:	ebc2 0303 	rsb	r3, r2, r3
   16ff8:	440b      	add	r3, r1
   16ffa:	4618      	mov	r0, r3
   16ffc:	f04f 0101 	mov.w	r1, #1	; 0x1
   17000:	f7fe f946 	bl	15290 <_ZN17MediumLevelAction9setGoBackEb>
            //actionEtape[etapeEnCours]->setGoBack(true);
        }

        StrategieV2::addTemporaryAction(&actionGoto[etapeEnCours]);
   17004:	68fb      	ldr	r3, [r7, #12]
   17006:	6a99      	ldr	r1, [r3, #40]
   17008:	68fb      	ldr	r3, [r7, #12]
   1700a:	699b      	ldr	r3, [r3, #24]
   1700c:	ea4f 1203 	mov.w	r2, r3, lsl #4
   17010:	ea4f 0382 	mov.w	r3, r2, lsl #2
   17014:	ebc2 0303 	rsb	r3, r2, r3
   17018:	440b      	add	r3, r1
   1701a:	4618      	mov	r0, r3
   1701c:	f7fe ff20 	bl	15e60 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
        //StrategieV2::addTemporaryAction(actionEtape[etapeEnCours]);
        //dijkstra->setEtapeCourante((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
        if(dijkstra->run() != 0)
   17020:	68fb      	ldr	r3, [r7, #12]
   17022:	6adb      	ldr	r3, [r3, #44]
   17024:	4618      	mov	r0, r3
   17026:	f7f9 f9fb 	bl	10420 <_ZN8Dijkstra3runEv>
   1702a:	4603      	mov	r3, r0
   1702c:	2b00      	cmp	r3, #0
   1702e:	bf0c      	ite	eq
   17030:	2300      	moveq	r3, #0
   17032:	2301      	movne	r3, #1
   17034:	b2db      	uxtb	r3, r3
   17036:	2b00      	cmp	r3, #0
   17038:	d032      	beq.n	170a0 <_ZN11StrategieV36updateEv+0x204>
        {
            // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
            // Cela arrive pour débloquer le robot
            //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
            //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
            this->actionEtape[this->etapeEnCours]->reset();
   1703a:	68fb      	ldr	r3, [r7, #12]
   1703c:	6a5a      	ldr	r2, [r3, #36]
   1703e:	68fb      	ldr	r3, [r7, #12]
   17040:	699b      	ldr	r3, [r3, #24]
   17042:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17046:	4413      	add	r3, r2
   17048:	681b      	ldr	r3, [r3, #0]
   1704a:	681b      	ldr	r3, [r3, #0]
   1704c:	f103 0314 	add.w	r3, r3, #20	; 0x14
   17050:	6819      	ldr	r1, [r3, #0]
   17052:	68fb      	ldr	r3, [r7, #12]
   17054:	6a5a      	ldr	r2, [r3, #36]
   17056:	68fb      	ldr	r3, [r7, #12]
   17058:	699b      	ldr	r3, [r3, #24]
   1705a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1705e:	4413      	add	r3, r2
   17060:	681b      	ldr	r3, [r3, #0]
   17062:	4618      	mov	r0, r3
   17064:	4788      	blx	r1
            this->actionGoto[this->etapeEnCours].reset();
   17066:	68fb      	ldr	r3, [r7, #12]
   17068:	6a99      	ldr	r1, [r3, #40]
   1706a:	68fb      	ldr	r3, [r7, #12]
   1706c:	699b      	ldr	r3, [r3, #24]
   1706e:	ea4f 1203 	mov.w	r2, r3, lsl #4
   17072:	ea4f 0382 	mov.w	r3, r2, lsl #2
   17076:	ebc2 0303 	rsb	r3, r2, r3
   1707a:	440b      	add	r3, r1
   1707c:	681b      	ldr	r3, [r3, #0]
   1707e:	f103 0314 	add.w	r3, r3, #20	; 0x14
   17082:	f8d3 c000 	ldr.w	ip, [r3]
   17086:	68fb      	ldr	r3, [r7, #12]
   17088:	6a99      	ldr	r1, [r3, #40]
   1708a:	68fb      	ldr	r3, [r7, #12]
   1708c:	699b      	ldr	r3, [r3, #24]
   1708e:	ea4f 1203 	mov.w	r2, r3, lsl #4
   17092:	ea4f 0382 	mov.w	r3, r2, lsl #2
   17096:	ebc2 0303 	rsb	r3, r2, r3
   1709a:	440b      	add	r3, r1
   1709c:	4618      	mov	r0, r3
   1709e:	47e0      	blx	ip
        }

        //On retourne à l'étape intermédiaire précédente, en marche arrière

        this->avoiding = false;
   170a0:	68fa      	ldr	r2, [r7, #12]
   170a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   170a6:	f882 3038 	strb.w	r3, [r2, #56]
        statusStrat=1;
   170aa:	68fa      	ldr	r2, [r7, #12]
   170ac:	f04f 0301 	mov.w	r3, #1	; 0x1
   170b0:	6413      	str	r3, [r2, #64]
   170b2:	e17e      	b.n	173b2 <_ZN11StrategieV36updateEv+0x516>
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   170b4:	f04f 0300 	mov.w	r3, #0	; 0x0
   170b8:	613b      	str	r3, [r7, #16]
   170ba:	e01e      	b.n	170fa <_ZN11StrategieV36updateEv+0x25e>
        {
            actionGoto[i].setGoBack(false);
   170bc:	68fb      	ldr	r3, [r7, #12]
   170be:	6a99      	ldr	r1, [r3, #40]
   170c0:	693b      	ldr	r3, [r7, #16]
   170c2:	ea4f 1203 	mov.w	r2, r3, lsl #4
   170c6:	ea4f 0382 	mov.w	r3, r2, lsl #2
   170ca:	ebc2 0303 	rsb	r3, r2, r3
   170ce:	440b      	add	r3, r1
   170d0:	4618      	mov	r0, r3
   170d2:	f04f 0100 	mov.w	r1, #0	; 0x0
   170d6:	f7fe f8db 	bl	15290 <_ZN17MediumLevelAction9setGoBackEb>
            actionEtape[i]->setGoBack(false);
   170da:	68fb      	ldr	r3, [r7, #12]
   170dc:	6a5a      	ldr	r2, [r3, #36]
   170de:	693b      	ldr	r3, [r7, #16]
   170e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   170e4:	4413      	add	r3, r2
   170e6:	681b      	ldr	r3, [r3, #0]
   170e8:	4618      	mov	r0, r3
   170ea:	f04f 0100 	mov.w	r1, #0	; 0x0
   170ee:	f7fe f8cf 	bl	15290 <_ZN17MediumLevelAction9setGoBackEb>
        statusStrat=1;
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   170f2:	693b      	ldr	r3, [r7, #16]
   170f4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   170f8:	613b      	str	r3, [r7, #16]
   170fa:	68fb      	ldr	r3, [r7, #12]
   170fc:	69da      	ldr	r2, [r3, #28]
   170fe:	693b      	ldr	r3, [r7, #16]
   17100:	429a      	cmp	r2, r3
   17102:	dcdb      	bgt.n	170bc <_ZN11StrategieV36updateEv+0x220>
        {
            actionGoto[i].setGoBack(false);
            actionEtape[i]->setGoBack(false);
        }
        this->enTrainEviterReculant = false;
   17104:	68fa      	ldr	r2, [r7, #12]
   17106:	f04f 0300 	mov.w	r3, #0	; 0x0
   1710a:	f882 3044 	strb.w	r3, [r2, #68]
        this->enTrainEviterAvancant = false;
   1710e:	68fa      	ldr	r2, [r7, #12]
   17110:	f04f 0300 	mov.w	r3, #0	; 0x0
   17114:	f882 3045 	strb.w	r3, [r2, #69]

        if(this->statusStrat==2)//Si on vient d'arriver à une étape intermédiare
   17118:	68fb      	ldr	r3, [r7, #12]
   1711a:	6c1b      	ldr	r3, [r3, #64]
   1711c:	2b02      	cmp	r3, #2
   1711e:	d103      	bne.n	17128 <_ZN11StrategieV36updateEv+0x28c>
        {
            this->updateIntermedaire();
   17120:	68f8      	ldr	r0, [r7, #12]
   17122:	f7ff fe1b 	bl	16d5c <_ZN11StrategieV318updateIntermedaireEv>
   17126:	e144      	b.n	173b2 <_ZN11StrategieV36updateEv+0x516>
        }
        else//Sinon, statusStrat==1, et il faut donc choisir un nouvel objectif
        {
            // Si on n'était pas en train d'éviter
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
   17128:	68fb      	ldr	r3, [r7, #12]
   1712a:	f893 3044 	ldrb.w	r3, [r3, #68]
   1712e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17132:	b2db      	uxtb	r3, r3
   17134:	2b00      	cmp	r3, #0
   17136:	d051      	beq.n	171dc <_ZN11StrategieV36updateEv+0x340>
   17138:	68fb      	ldr	r3, [r7, #12]
   1713a:	f893 3045 	ldrb.w	r3, [r3, #69]
   1713e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17142:	b2db      	uxtb	r3, r3
   17144:	2b00      	cmp	r3, #0
   17146:	d049      	beq.n	171dc <_ZN11StrategieV36updateEv+0x340>
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
   17148:	68fb      	ldr	r3, [r7, #12]
   1714a:	6b1a      	ldr	r2, [r3, #48]
   1714c:	68fb      	ldr	r3, [r7, #12]
   1714e:	699b      	ldr	r3, [r3, #24]
   17150:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17154:	4413      	add	r3, r2
   17156:	681b      	ldr	r3, [r3, #0]
   17158:	4618      	mov	r0, r3
   1715a:	f7f9 fbc1 	bl	108e0 <_ZN5Etape5finirEv>
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   1715e:	f04f 0300 	mov.w	r3, #0	; 0x0
   17162:	62bb      	str	r3, [r7, #40]
   17164:	e01f      	b.n	171a6 <_ZN11StrategieV36updateEv+0x30a>
                {
                    int numeroEtapeLiee = this->tableauEtapes[this->etapeEnCours]->getEtapesLieesParFinirEtape()[etapeLiee];
   17166:	68fb      	ldr	r3, [r7, #12]
   17168:	6b1a      	ldr	r2, [r3, #48]
   1716a:	68fb      	ldr	r3, [r7, #12]
   1716c:	699b      	ldr	r3, [r3, #24]
   1716e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17172:	4413      	add	r3, r2
   17174:	681b      	ldr	r3, [r3, #0]
   17176:	4618      	mov	r0, r3
   17178:	f7f9 fb8c 	bl	10894 <_ZN5Etape27getEtapesLieesParFinirEtapeEv>
   1717c:	4602      	mov	r2, r0
   1717e:	6abb      	ldr	r3, [r7, #40]
   17180:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17184:	4413      	add	r3, r2
   17186:	681b      	ldr	r3, [r3, #0]
   17188:	62fb      	str	r3, [r7, #44]
                    this->tableauEtapes[numeroEtapeLiee]->finir();
   1718a:	68fb      	ldr	r3, [r7, #12]
   1718c:	6b1a      	ldr	r2, [r3, #48]
   1718e:	6afb      	ldr	r3, [r7, #44]
   17190:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17194:	4413      	add	r3, r2
   17196:	681b      	ldr	r3, [r3, #0]
   17198:	4618      	mov	r0, r3
   1719a:	f7f9 fba1 	bl	108e0 <_ZN5Etape5finirEv>
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   1719e:	6abb      	ldr	r3, [r7, #40]
   171a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   171a4:	62bb      	str	r3, [r7, #40]
   171a6:	68fb      	ldr	r3, [r7, #12]
   171a8:	6b1a      	ldr	r2, [r3, #48]
   171aa:	68fb      	ldr	r3, [r7, #12]
   171ac:	699b      	ldr	r3, [r3, #24]
   171ae:	ea4f 0383 	mov.w	r3, r3, lsl #2
   171b2:	4413      	add	r3, r2
   171b4:	681b      	ldr	r3, [r3, #0]
   171b6:	4618      	mov	r0, r3
   171b8:	f7f9 fb86 	bl	108c8 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>
   171bc:	4602      	mov	r2, r0
   171be:	6abb      	ldr	r3, [r7, #40]
   171c0:	429a      	cmp	r2, r3
   171c2:	bfd4      	ite	le
   171c4:	2300      	movle	r3, #0
   171c6:	2301      	movgt	r3, #1
   171c8:	b2db      	uxtb	r3, r3
   171ca:	2b00      	cmp	r3, #0
   171cc:	d1cb      	bne.n	17166 <_ZN11StrategieV36updateEv+0x2ca>
                    this->tableauEtapes[numeroEtapeLiee]->finir();
                }

                //Mise à jour du stock

                this->updateStock();
   171ce:	68fb      	ldr	r3, [r7, #12]
   171d0:	681b      	ldr	r3, [r3, #0]
   171d2:	f103 0318 	add.w	r3, r3, #24	; 0x18
   171d6:	681b      	ldr	r3, [r3, #0]
   171d8:	68f8      	ldr	r0, [r7, #12]
   171da:	4798      	blx	r3

            }


            int score = 0;
   171dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   171e0:	617b      	str	r3, [r7, #20]
            bool resteDesChosesAFaire = updateScores();
   171e2:	68f8      	ldr	r0, [r7, #12]
   171e4:	f7ff fd34 	bl	16c50 <_ZN11StrategieV312updateScoresEv>
   171e8:	4603      	mov	r3, r0
   171ea:	76fb      	strb	r3, [r7, #27]

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
   171ec:	7efb      	ldrb	r3, [r7, #27]
   171ee:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   171f2:	b2db      	uxtb	r3, r3
   171f4:	2b00      	cmp	r3, #0
   171f6:	d03c      	beq.n	17272 <_ZN11StrategieV36updateEv+0x3d6>
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   171f8:	f04f 0300 	mov.w	r3, #0	; 0x0
   171fc:	633b      	str	r3, [r7, #48]
   171fe:	e00d      	b.n	1721c <_ZN11StrategieV36updateEv+0x380>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
   17200:	68fb      	ldr	r3, [r7, #12]
   17202:	6b5a      	ldr	r2, [r3, #52]
   17204:	6b3b      	ldr	r3, [r7, #48]
   17206:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1720a:	4413      	add	r3, r2
   1720c:	681b      	ldr	r3, [r3, #0]
   1720e:	4618      	mov	r0, r3
   17210:	f7f9 fb0c 	bl	1082c <_ZN5Etape13oublieRobotVuEv>

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   17214:	6b3b      	ldr	r3, [r7, #48]
   17216:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1721a:	633b      	str	r3, [r7, #48]
   1721c:	68fb      	ldr	r3, [r7, #12]
   1721e:	69da      	ldr	r2, [r3, #28]
   17220:	6b3b      	ldr	r3, [r7, #48]
   17222:	429a      	cmp	r2, r3
   17224:	dcec      	bgt.n	17200 <_ZN11StrategieV36updateEv+0x364>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
                }
                resteDesChosesAFaire = updateScores();
   17226:	68f8      	ldr	r0, [r7, #12]
   17228:	f7ff fd12 	bl	16c50 <_ZN11StrategieV312updateScoresEv>
   1722c:	4603      	mov	r3, r0
   1722e:	76fb      	strb	r3, [r7, #27]

                //S'il n'y a VRAIMENT plus rien à faire
                if(!resteDesChosesAFaire)
   17230:	7efb      	ldrb	r3, [r7, #27]
   17232:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   17236:	b2db      	uxtb	r3, r3
   17238:	2b00      	cmp	r3, #0
   1723a:	d01a      	beq.n	17272 <_ZN11StrategieV36updateEv+0x3d6>
                {
                    //Si on est au garage, on s'arrête
                    if(this->etapeEnCours == this->numeroEtapeGarage)
   1723c:	68fb      	ldr	r3, [r7, #12]
   1723e:	699a      	ldr	r2, [r3, #24]
   17240:	68fb      	ldr	r3, [r7, #12]
   17242:	6a1b      	ldr	r3, [r3, #32]
   17244:	429a      	cmp	r2, r3
   17246:	d107      	bne.n	17258 <_ZN11StrategieV36updateEv+0x3bc>
                    {
                        this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   17248:	68fb      	ldr	r3, [r7, #12]
   1724a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1724e:	641a      	str	r2, [r3, #64]
                        return this->statusStrat;
   17250:	68fb      	ldr	r3, [r7, #12]
   17252:	6c1b      	ldr	r3, [r3, #64]
   17254:	607b      	str	r3, [r7, #4]
   17256:	e0af      	b.n	173b8 <_ZN11StrategieV36updateEv+0x51c>
                    }
                    else
                    {
                        //Sinon on y va
                        this->tableauEtapes[this->numeroEtapeGarage]->setScore(1000);
   17258:	68fb      	ldr	r3, [r7, #12]
   1725a:	6b1a      	ldr	r2, [r3, #48]
   1725c:	68fb      	ldr	r3, [r7, #12]
   1725e:	6a1b      	ldr	r3, [r3, #32]
   17260:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17264:	4413      	add	r3, r2
   17266:	681b      	ldr	r3, [r3, #0]
   17268:	4618      	mov	r0, r3
   1726a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1726e:	f7f9 fb49 	bl	10904 <_ZN5Etape8setScoreEi>
                }

            }

            //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
            dijkstra->setEtapeCourante(this->etapeEnCours);
   17272:	68fb      	ldr	r3, [r7, #12]
   17274:	6ada      	ldr	r2, [r3, #44]
   17276:	68fb      	ldr	r3, [r7, #12]
   17278:	699b      	ldr	r3, [r3, #24]
   1727a:	4610      	mov	r0, r2
   1727c:	4619      	mov	r1, r3
   1727e:	f7f8 fdcd 	bl	fe1c <_ZN8Dijkstra16setEtapeCouranteEi>
            if(dijkstra->run() != 0)
   17282:	68fb      	ldr	r3, [r7, #12]
   17284:	6adb      	ldr	r3, [r3, #44]
   17286:	4618      	mov	r0, r3
   17288:	f7f9 f8ca 	bl	10420 <_ZN8Dijkstra3runEv>
   1728c:	4603      	mov	r3, r0
   1728e:	2b00      	cmp	r3, #0
   17290:	bf0c      	ite	eq
   17292:	2300      	moveq	r3, #0
   17294:	2301      	movne	r3, #1
   17296:	b2db      	uxtb	r3, r3
   17298:	2b00      	cmp	r3, #0
   1729a:	d015      	beq.n	172c8 <_ZN11StrategieV36updateEv+0x42c>
            {
                // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
                // Cela arrive pour débloquer le robot
                //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
                //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
                this->actionEtape[this->etapeEnCours]->reset();
   1729c:	68fb      	ldr	r3, [r7, #12]
   1729e:	6a5a      	ldr	r2, [r3, #36]
   172a0:	68fb      	ldr	r3, [r7, #12]
   172a2:	699b      	ldr	r3, [r3, #24]
   172a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   172a8:	4413      	add	r3, r2
   172aa:	681b      	ldr	r3, [r3, #0]
   172ac:	681b      	ldr	r3, [r3, #0]
   172ae:	f103 0314 	add.w	r3, r3, #20	; 0x14
   172b2:	6819      	ldr	r1, [r3, #0]
   172b4:	68fb      	ldr	r3, [r7, #12]
   172b6:	6a5a      	ldr	r2, [r3, #36]
   172b8:	68fb      	ldr	r3, [r7, #12]
   172ba:	699b      	ldr	r3, [r3, #24]
   172bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   172c0:	4413      	add	r3, r2
   172c2:	681b      	ldr	r3, [r3, #0]
   172c4:	4618      	mov	r0, r3
   172c6:	4788      	blx	r1
            }

            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
   172c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   172cc:	61fb      	str	r3, [r7, #28]
            int scoreMaxi = -100000;
   172ce:	4b3d      	ldr	r3, [pc, #244]	(173c4 <_ZN11StrategieV36updateEv+0x528>)
   172d0:	623b      	str	r3, [r7, #32]

            int scoreTypeEtape = 0;
   172d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   172d6:	627b      	str	r3, [r7, #36]
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   172d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   172dc:	637b      	str	r3, [r7, #52]
   172de:	e044      	b.n	1736a <_ZN11StrategieV36updateEv+0x4ce>
            {
                scoreTypeEtape = this->tableauEtapes[i]->getScore();
   172e0:	68fb      	ldr	r3, [r7, #12]
   172e2:	6b1a      	ldr	r2, [r3, #48]
   172e4:	6b7b      	ldr	r3, [r7, #52]
   172e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   172ea:	4413      	add	r3, r2
   172ec:	681b      	ldr	r3, [r3, #0]
   172ee:	4618      	mov	r0, r3
   172f0:	f7f9 fb16 	bl	10920 <_ZN5Etape8getScoreEv>
   172f4:	4603      	mov	r3, r0
   172f6:	627b      	str	r3, [r7, #36]
        //        score = modificateurTemporel*(10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
                score = (10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
   172f8:	68fb      	ldr	r3, [r7, #12]
   172fa:	6b1a      	ldr	r2, [r3, #48]
   172fc:	6b7b      	ldr	r3, [r7, #52]
   172fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17302:	4413      	add	r3, r2
   17304:	681b      	ldr	r3, [r3, #0]
   17306:	4618      	mov	r0, r3
   17308:	f7f9 f9f4 	bl	106f4 <_ZN5Etape11getDistanceEv>
   1730c:	4603      	mov	r3, r0
   1730e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
   17312:	f103 0310 	add.w	r3, r3, #16	; 0x10
   17316:	6a7a      	ldr	r2, [r7, #36]
   17318:	4413      	add	r3, r2
   1731a:	617b      	str	r3, [r7, #20]
                if((scoreMaxi < score) && scoreTypeEtape && (this->tableauEtapes[i]->getDistance() != -1))
   1731c:	6a3a      	ldr	r2, [r7, #32]
   1731e:	697b      	ldr	r3, [r7, #20]
   17320:	429a      	cmp	r2, r3
   17322:	da14      	bge.n	1734e <_ZN11StrategieV36updateEv+0x4b2>
   17324:	6a7b      	ldr	r3, [r7, #36]
   17326:	2b00      	cmp	r3, #0
   17328:	d011      	beq.n	1734e <_ZN11StrategieV36updateEv+0x4b2>
   1732a:	68fb      	ldr	r3, [r7, #12]
   1732c:	6b1a      	ldr	r2, [r3, #48]
   1732e:	6b7b      	ldr	r3, [r7, #52]
   17330:	ea4f 0383 	mov.w	r3, r3, lsl #2
   17334:	4413      	add	r3, r2
   17336:	681b      	ldr	r3, [r3, #0]
   17338:	4618      	mov	r0, r3
   1733a:	f7f9 f9db 	bl	106f4 <_ZN5Etape11getDistanceEv>
   1733e:	4603      	mov	r3, r0
   17340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17344:	d003      	beq.n	1734e <_ZN11StrategieV36updateEv+0x4b2>
   17346:	f04f 0301 	mov.w	r3, #1	; 0x1
   1734a:	60bb      	str	r3, [r7, #8]
   1734c:	e002      	b.n	17354 <_ZN11StrategieV36updateEv+0x4b8>
   1734e:	f04f 0300 	mov.w	r3, #0	; 0x0
   17352:	60bb      	str	r3, [r7, #8]
   17354:	68bb      	ldr	r3, [r7, #8]
   17356:	2b00      	cmp	r3, #0
   17358:	d003      	beq.n	17362 <_ZN11StrategieV36updateEv+0x4c6>
                {
                    scoreMaxi = score;
   1735a:	697b      	ldr	r3, [r7, #20]
   1735c:	623b      	str	r3, [r7, #32]
                    meilleurEtape = i;
   1735e:	6b7b      	ldr	r3, [r7, #52]
   17360:	61fb      	str	r3, [r7, #28]
            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
            int scoreMaxi = -100000;

            int scoreTypeEtape = 0;
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   17362:	6b7b      	ldr	r3, [r7, #52]
   17364:	f103 0301 	add.w	r3, r3, #1	; 0x1
   17368:	637b      	str	r3, [r7, #52]
   1736a:	68fb      	ldr	r3, [r7, #12]
   1736c:	69da      	ldr	r2, [r3, #28]
   1736e:	6b7b      	ldr	r3, [r7, #52]
   17370:	429a      	cmp	r2, r3
   17372:	dcb5      	bgt.n	172e0 <_ZN11StrategieV36updateEv+0x444>
                    scoreMaxi = score;
                    meilleurEtape = i;
                }
            }

            if(meilleurEtape==-1)
   17374:	69fb      	ldr	r3, [r7, #28]
   17376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1737a:	d110      	bne.n	1739e <_ZN11StrategieV36updateEv+0x502>
            {
                if(this->etapeEnCours == this->numeroEtapeGarage)
   1737c:	68fb      	ldr	r3, [r7, #12]
   1737e:	699a      	ldr	r2, [r3, #24]
   17380:	68fb      	ldr	r3, [r7, #12]
   17382:	6a1b      	ldr	r3, [r3, #32]
   17384:	429a      	cmp	r2, r3
   17386:	d107      	bne.n	17398 <_ZN11StrategieV36updateEv+0x4fc>
                {
                    this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   17388:	68fb      	ldr	r3, [r7, #12]
   1738a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1738e:	641a      	str	r2, [r3, #64]
                    return this->statusStrat;
   17390:	68fb      	ldr	r3, [r7, #12]
   17392:	6c1b      	ldr	r3, [r3, #64]
   17394:	607b      	str	r3, [r7, #4]
   17396:	e00f      	b.n	173b8 <_ZN11StrategieV36updateEv+0x51c>
                }
                else
                {
                    meilleurEtape = this->numeroEtapeGarage;
   17398:	68fb      	ldr	r3, [r7, #12]
   1739a:	6a1b      	ldr	r3, [r3, #32]
   1739c:	61fb      	str	r3, [r7, #28]
            /*if(this->tableauEtapes[meilleurEtape]->getEtapeType()==Etape::DEPOSE_FRUIT)
            {
                this->nombreFruitsTransporte++;
            }*/

            this->goal = meilleurEtape;
   1739e:	68fa      	ldr	r2, [r7, #12]
   173a0:	69fb      	ldr	r3, [r7, #28]
   173a2:	63d3      	str	r3, [r2, #60]
            this->statusStrat = 2;//Jusqu'à preuve du contraire, la prochaine étape est une étape intermédiaire
   173a4:	68fa      	ldr	r2, [r7, #12]
   173a6:	f04f 0302 	mov.w	r3, #2	; 0x2
   173aa:	6413      	str	r3, [r2, #64]
            this->updateIntermedaire();//On y va
   173ac:	68f8      	ldr	r0, [r7, #12]
   173ae:	f7ff fcd5 	bl	16d5c <_ZN11StrategieV318updateIntermedaireEv>
        }
    }
    return this->statusStrat;
   173b2:	68fb      	ldr	r3, [r7, #12]
   173b4:	6c1b      	ldr	r3, [r3, #64]
   173b6:	607b      	str	r3, [r7, #4]
   173b8:	687b      	ldr	r3, [r7, #4]
}
   173ba:	4618      	mov	r0, r3
   173bc:	f107 0738 	add.w	r7, r7, #56	; 0x38
   173c0:	46bd      	mov	sp, r7
   173c2:	bd80      	pop	{r7, pc}
   173c4:	fffe7960 	.word	0xfffe7960

000173c8 <_ZN11StrategieV3C1Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   173c8:	b590      	push	{r4, r7, lr}
   173ca:	b085      	sub	sp, #20
   173cc:	af00      	add	r7, sp, #0
   173ce:	6078      	str	r0, [r7, #4]
   173d0:	460b      	mov	r3, r1
   173d2:	70fb      	strb	r3, [r7, #3]
   173d4:	687c      	ldr	r4, [r7, #4]
   173d6:	f107 0308 	add.w	r3, r7, #8	; 0x8
   173da:	4618      	mov	r0, r3
   173dc:	4917      	ldr	r1, [pc, #92]	(1743c <_ZN11StrategieV3C1Eb+0x74>)
   173de:	4a17      	ldr	r2, [pc, #92]	(1743c <_ZN11StrategieV3C1Eb+0x74>)
   173e0:	f04f 0301 	mov.w	r3, #1	; 0x1
   173e4:	f7f7 fcea 	bl	edbc <_ZN8PositionC1Effb>
   173e8:	4620      	mov	r0, r4
   173ea:	f107 0308 	add.w	r3, r7, #8	; 0x8
   173ee:	e893 0006 	ldmia.w	r3, {r1, r2}
   173f2:	f7fd ffe3 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   173f6:	687a      	ldr	r2, [r7, #4]
   173f8:	4b11      	ldr	r3, [pc, #68]	(17440 <_ZN11StrategieV3C1Eb+0x78>)
   173fa:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   173fc:	687a      	ldr	r2, [r7, #4]
   173fe:	f04f 0300 	mov.w	r3, #0	; 0x0
   17402:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   17406:	687a      	ldr	r2, [r7, #4]
   17408:	f04f 0300 	mov.w	r3, #0	; 0x0
   1740c:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   1740e:	687a      	ldr	r2, [r7, #4]
   17410:	f04f 0301 	mov.w	r3, #1	; 0x1
   17414:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   17416:	687a      	ldr	r2, [r7, #4]
   17418:	f04f 0300 	mov.w	r3, #0	; 0x0
   1741c:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   17420:	687a      	ldr	r2, [r7, #4]
   17422:	f04f 0300 	mov.w	r3, #0	; 0x0
   17426:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   1742a:	687a      	ldr	r2, [r7, #4]
   1742c:	4b05      	ldr	r3, [pc, #20]	(17444 <_ZN11StrategieV3C1Eb+0x7c>)
   1742e:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   17430:	687b      	ldr	r3, [r7, #4]
   17432:	4618      	mov	r0, r3
   17434:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17438:	46bd      	mov	sp, r7
   1743a:	bd90      	pop	{r4, r7, pc}
   1743c:	00000000 	.word	0x00000000
   17440:	00022490 	.word	0x00022490
   17444:	00015f90 	.word	0x00015f90

00017448 <_ZN11StrategieV3C2Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   17448:	b590      	push	{r4, r7, lr}
   1744a:	b085      	sub	sp, #20
   1744c:	af00      	add	r7, sp, #0
   1744e:	6078      	str	r0, [r7, #4]
   17450:	460b      	mov	r3, r1
   17452:	70fb      	strb	r3, [r7, #3]
   17454:	687c      	ldr	r4, [r7, #4]
   17456:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1745a:	4618      	mov	r0, r3
   1745c:	4917      	ldr	r1, [pc, #92]	(174bc <_ZN11StrategieV3C2Eb+0x74>)
   1745e:	4a17      	ldr	r2, [pc, #92]	(174bc <_ZN11StrategieV3C2Eb+0x74>)
   17460:	f04f 0301 	mov.w	r3, #1	; 0x1
   17464:	f7f7 fcaa 	bl	edbc <_ZN8PositionC1Effb>
   17468:	4620      	mov	r0, r4
   1746a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1746e:	e893 0006 	ldmia.w	r3, {r1, r2}
   17472:	f7fd ffa3 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   17476:	687a      	ldr	r2, [r7, #4]
   17478:	4b11      	ldr	r3, [pc, #68]	(174c0 <_ZN11StrategieV3C2Eb+0x78>)
   1747a:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   1747c:	687a      	ldr	r2, [r7, #4]
   1747e:	f04f 0300 	mov.w	r3, #0	; 0x0
   17482:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   17486:	687a      	ldr	r2, [r7, #4]
   17488:	f04f 0300 	mov.w	r3, #0	; 0x0
   1748c:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   1748e:	687a      	ldr	r2, [r7, #4]
   17490:	f04f 0301 	mov.w	r3, #1	; 0x1
   17494:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   17496:	687a      	ldr	r2, [r7, #4]
   17498:	f04f 0300 	mov.w	r3, #0	; 0x0
   1749c:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   174a0:	687a      	ldr	r2, [r7, #4]
   174a2:	f04f 0300 	mov.w	r3, #0	; 0x0
   174a6:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   174aa:	687a      	ldr	r2, [r7, #4]
   174ac:	4b05      	ldr	r3, [pc, #20]	(174c4 <_ZN11StrategieV3C2Eb+0x7c>)
   174ae:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   174b0:	687b      	ldr	r3, [r7, #4]
   174b2:	4618      	mov	r0, r3
   174b4:	f107 0714 	add.w	r7, r7, #20	; 0x14
   174b8:	46bd      	mov	sp, r7
   174ba:	bd90      	pop	{r4, r7, pc}
   174bc:	00000000 	.word	0x00000000
   174c0:	00022490 	.word	0x00022490
   174c4:	00015f90 	.word	0x00015f90

000174c8 <_ZN5Tapis6updateEv>:
}


Tapis::~Tapis(){}

int Tapis::update()
   174c8:	b580      	push	{r7, lr}
   174ca:	b084      	sub	sp, #16
   174cc:	af02      	add	r7, sp, #8
   174ce:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
   174d0:	687b      	ldr	r3, [r7, #4]
   174d2:	68db      	ldr	r3, [r3, #12]
   174d4:	2b00      	cmp	r3, #0
   174d6:	d106      	bne.n	174e6 <_ZN5Tapis6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "tapis";
        #endif
        status++;
   174d8:	687b      	ldr	r3, [r7, #4]
   174da:	68db      	ldr	r3, [r3, #12]
   174dc:	f103 0201 	add.w	r2, r3, #1	; 0x1
   174e0:	687b      	ldr	r3, [r7, #4]
   174e2:	60da      	str	r2, [r3, #12]
   174e4:	e097      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 1)
   174e6:	687b      	ldr	r3, [r7, #4]
   174e8:	68db      	ldr	r3, [r3, #12]
   174ea:	2b01      	cmp	r3, #1
   174ec:	d114      	bne.n	17518 <_ZN5Tapis6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
   174ee:	687b      	ldr	r3, [r7, #4]
   174f0:	f893 c010 	ldrb.w	ip, [r3, #16]
   174f4:	687a      	ldr	r2, [r7, #4]
   174f6:	4b4b      	ldr	r3, [pc, #300]	(17624 <_ZN5Tapis6updateEv+0x15c>)
   174f8:	9300      	str	r3, [sp, #0]
   174fa:	f102 0304 	add.w	r3, r2, #4	; 0x4
   174fe:	e893 0003 	ldmia.w	r3, {r0, r1}
   17502:	4662      	mov	r2, ip
   17504:	4b48      	ldr	r3, [pc, #288]	(17628 <_ZN5Tapis6updateEv+0x160>)
   17506:	f7fe ff09 	bl	1631c <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
   1750a:	687b      	ldr	r3, [r7, #4]
   1750c:	68db      	ldr	r3, [r3, #12]
   1750e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17512:	687b      	ldr	r3, [r7, #4]
   17514:	60da      	str	r2, [r3, #12]
   17516:	e07e      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 2)
   17518:	687b      	ldr	r3, [r7, #4]
   1751a:	68db      	ldr	r3, [r3, #12]
   1751c:	2b02      	cmp	r3, #2
   1751e:	d119      	bne.n	17554 <_ZN5Tapis6updateEv+0x8c>
    {
        if (Command::isNear(goalPosition))
   17520:	687b      	ldr	r3, [r7, #4]
   17522:	f103 0304 	add.w	r3, r3, #4	; 0x4
   17526:	e893 0003 	ldmia.w	r3, {r0, r1}
   1752a:	4a40      	ldr	r2, [pc, #256]	(1762c <_ZN5Tapis6updateEv+0x164>)
   1752c:	f7f0 ffaa 	bl	8484 <_ZN7Command6isNearE8Positionf>
   17530:	4603      	mov	r3, r0
   17532:	2b00      	cmp	r3, #0
   17534:	d06f      	beq.n	17616 <_ZN5Tapis6updateEv+0x14e>
        {
            StrategieV2::lookAt(positionMarches);
   17536:	687b      	ldr	r3, [r7, #4]
   17538:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1753c:	e893 0003 	ldmia.w	r3, {r0, r1}
   17540:	4a3b      	ldr	r2, [pc, #236]	(17630 <_ZN5Tapis6updateEv+0x168>)
   17542:	f7fe fe53 	bl	161ec <_ZN11StrategieV26lookAtE8Positionf>
            status++;
   17546:	687b      	ldr	r3, [r7, #4]
   17548:	68db      	ldr	r3, [r3, #12]
   1754a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1754e:	687b      	ldr	r3, [r7, #4]
   17550:	60da      	str	r2, [r3, #12]
   17552:	e060      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
        }
    }

    else if (status == 3)
   17554:	687b      	ldr	r3, [r7, #4]
   17556:	68db      	ldr	r3, [r3, #12]
   17558:	2b03      	cmp	r3, #3
   1755a:	d111      	bne.n	17580 <_ZN5Tapis6updateEv+0xb8>
    {
        if (Command::isLookingAt(positionMarches))
   1755c:	687b      	ldr	r3, [r7, #4]
   1755e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   17562:	e893 0003 	ldmia.w	r3, {r0, r1}
   17566:	4a33      	ldr	r2, [pc, #204]	(17634 <_ZN5Tapis6updateEv+0x16c>)
   17568:	f7f0 fed0 	bl	830c <_ZN7Command11isLookingAtE8Positionf>
   1756c:	4603      	mov	r3, r0
   1756e:	2b00      	cmp	r3, #0
   17570:	d051      	beq.n	17616 <_ZN5Tapis6updateEv+0x14e>
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le brasdevant";
            #endif
           // BrasDevant::getBras()->expand();
            status++;
   17572:	687b      	ldr	r3, [r7, #4]
   17574:	68db      	ldr	r3, [r3, #12]
   17576:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1757a:	687b      	ldr	r3, [r7, #4]
   1757c:	60da      	str	r2, [r3, #12]
   1757e:	e04a      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que les bras du robot s'ouvrent : 50ms par incrémentation du status
   17580:	687b      	ldr	r3, [r7, #4]
   17582:	68db      	ldr	r3, [r3, #12]
   17584:	2b35      	cmp	r3, #53
   17586:	dc0a      	bgt.n	1759e <_ZN5Tapis6updateEv+0xd6>
   17588:	687b      	ldr	r3, [r7, #4]
   1758a:	68db      	ldr	r3, [r3, #12]
   1758c:	2b00      	cmp	r3, #0
   1758e:	db06      	blt.n	1759e <_ZN5Tapis6updateEv+0xd6>
    {
        status++;
   17590:	687b      	ldr	r3, [r7, #4]
   17592:	68db      	ldr	r3, [r3, #12]
   17594:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17598:	687b      	ldr	r3, [r7, #4]
   1759a:	60da      	str	r2, [r3, #12]
   1759c:	e03b      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 54)
   1759e:	687b      	ldr	r3, [r7, #4]
   175a0:	68db      	ldr	r3, [r3, #12]
   175a2:	2b36      	cmp	r3, #54
   175a4:	d106      	bne.n	175b4 <_ZN5Tapis6updateEv+0xec>
        //lacher les tapis
        #ifndef ROBOTHW
        qDebug() << "On ouvre la pince pour lacher les tapis";
        #endif
      //  Pince::getPince()->open();
        status++;
   175a6:	687b      	ldr	r3, [r7, #4]
   175a8:	68db      	ldr	r3, [r3, #12]
   175aa:	f103 0201 	add.w	r2, r3, #1	; 0x1
   175ae:	687b      	ldr	r3, [r7, #4]
   175b0:	60da      	str	r2, [r3, #12]
   175b2:	e030      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if ((status <= 104) && (status > -1 ))    //On attend que la pince s'ouvre
   175b4:	687b      	ldr	r3, [r7, #4]
   175b6:	68db      	ldr	r3, [r3, #12]
   175b8:	2b68      	cmp	r3, #104
   175ba:	dc0a      	bgt.n	175d2 <_ZN5Tapis6updateEv+0x10a>
   175bc:	687b      	ldr	r3, [r7, #4]
   175be:	68db      	ldr	r3, [r3, #12]
   175c0:	2b00      	cmp	r3, #0
   175c2:	db06      	blt.n	175d2 <_ZN5Tapis6updateEv+0x10a>
    {
        status++;
   175c4:	687b      	ldr	r3, [r7, #4]
   175c6:	68db      	ldr	r3, [r3, #12]
   175c8:	f103 0201 	add.w	r2, r3, #1	; 0x1
   175cc:	687b      	ldr	r3, [r7, #4]
   175ce:	60da      	str	r2, [r3, #12]
   175d0:	e021      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 105)
   175d2:	687b      	ldr	r3, [r7, #4]
   175d4:	68db      	ldr	r3, [r3, #12]
   175d6:	2b69      	cmp	r3, #105
   175d8:	d106      	bne.n	175e8 <_ZN5Tapis6updateEv+0x120>
        //fermer bras
        #ifndef ROBOTHW
        qDebug() << "On ferme le bras";
        #endif
      //  BrasDevant::getBras()->collapse();
        status++;
   175da:	687b      	ldr	r3, [r7, #4]
   175dc:	68db      	ldr	r3, [r3, #12]
   175de:	f103 0201 	add.w	r2, r3, #1	; 0x1
   175e2:	687b      	ldr	r3, [r7, #4]
   175e4:	60da      	str	r2, [r3, #12]
   175e6:	e016      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if ((status <= 155) && (status > -1))    //On attend que les bras se ferment.
   175e8:	687b      	ldr	r3, [r7, #4]
   175ea:	68db      	ldr	r3, [r3, #12]
   175ec:	2b9b      	cmp	r3, #155
   175ee:	dc0a      	bgt.n	17606 <_ZN5Tapis6updateEv+0x13e>
   175f0:	687b      	ldr	r3, [r7, #4]
   175f2:	68db      	ldr	r3, [r3, #12]
   175f4:	2b00      	cmp	r3, #0
   175f6:	db06      	blt.n	17606 <_ZN5Tapis6updateEv+0x13e>
    {
        status++;
   175f8:	687b      	ldr	r3, [r7, #4]
   175fa:	68db      	ldr	r3, [r3, #12]
   175fc:	f103 0201 	add.w	r2, r3, #1	; 0x1
   17600:	687b      	ldr	r3, [r7, #4]
   17602:	60da      	str	r2, [r3, #12]
   17604:	e007      	b.n	17616 <_ZN5Tapis6updateEv+0x14e>
    }

    else if (status == 156)
   17606:	687b      	ldr	r3, [r7, #4]
   17608:	68db      	ldr	r3, [r3, #12]
   1760a:	2b9c      	cmp	r3, #156
   1760c:	d103      	bne.n	17616 <_ZN5Tapis6updateEv+0x14e>
    {
        status = -1;
   1760e:	687a      	ldr	r2, [r7, #4]
   17610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17614:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape tapis finie";
#endif
    }

    return status;
   17616:	687b      	ldr	r3, [r7, #4]
   17618:	68db      	ldr	r3, [r3, #12]
}
   1761a:	4618      	mov	r0, r3
   1761c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   17620:	46bd      	mov	sp, r7
   17622:	bd80      	pop	{r7, pc}
   17624:	c2c80000 	.word	0xc2c80000
   17628:	40400000 	.word	0x40400000
   1762c:	41f00000 	.word	0x41f00000
   17630:	3cf5c28f 	.word	0x3cf5c28f
   17634:	3db2b8c2 	.word	0x3db2b8c2

00017638 <_ZN5TapisD0Ev>:
    this->goBack = false;
    this->positionMarches = Position(1230,150);
}


Tapis::~Tapis(){}
   17638:	b580      	push	{r7, lr}
   1763a:	b082      	sub	sp, #8
   1763c:	af00      	add	r7, sp, #0
   1763e:	6078      	str	r0, [r7, #4]
   17640:	687a      	ldr	r2, [r7, #4]
   17642:	4b0a      	ldr	r3, [pc, #40]	(1766c <_ZN5TapisD0Ev+0x34>)
   17644:	6013      	str	r3, [r2, #0]
   17646:	687b      	ldr	r3, [r7, #4]
   17648:	4618      	mov	r0, r3
   1764a:	f7fd fe77 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   1764e:	f04f 0301 	mov.w	r3, #1	; 0x1
   17652:	b2db      	uxtb	r3, r3
   17654:	2b00      	cmp	r3, #0
   17656:	d002      	beq.n	1765e <_ZN5TapisD0Ev+0x26>
   17658:	6878      	ldr	r0, [r7, #4]
   1765a:	f7f7 faef 	bl	ec3c <_ZdlPv>
   1765e:	687b      	ldr	r3, [r7, #4]
   17660:	4618      	mov	r0, r3
   17662:	f107 0708 	add.w	r7, r7, #8	; 0x8
   17666:	46bd      	mov	sp, r7
   17668:	bd80      	pop	{r7, pc}
   1766a:	46c0      	nop			(mov r8, r8)
   1766c:	000224b8 	.word	0x000224b8

00017670 <_ZN5TapisD1Ev>:
   17670:	b580      	push	{r7, lr}
   17672:	b082      	sub	sp, #8
   17674:	af00      	add	r7, sp, #0
   17676:	6078      	str	r0, [r7, #4]
   17678:	687a      	ldr	r2, [r7, #4]
   1767a:	4b0a      	ldr	r3, [pc, #40]	(176a4 <_ZN5TapisD1Ev+0x34>)
   1767c:	6013      	str	r3, [r2, #0]
   1767e:	687b      	ldr	r3, [r7, #4]
   17680:	4618      	mov	r0, r3
   17682:	f7fd fe5b 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   17686:	f04f 0300 	mov.w	r3, #0	; 0x0
   1768a:	b2db      	uxtb	r3, r3
   1768c:	2b00      	cmp	r3, #0
   1768e:	d002      	beq.n	17696 <_ZN5TapisD1Ev+0x26>
   17690:	6878      	ldr	r0, [r7, #4]
   17692:	f7f7 fad3 	bl	ec3c <_ZdlPv>
   17696:	687b      	ldr	r3, [r7, #4]
   17698:	4618      	mov	r0, r3
   1769a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1769e:	46bd      	mov	sp, r7
   176a0:	bd80      	pop	{r7, pc}
   176a2:	46c0      	nop			(mov r8, r8)
   176a4:	000224b8 	.word	0x000224b8

000176a8 <_ZN5TapisD2Ev>:
   176a8:	b580      	push	{r7, lr}
   176aa:	b082      	sub	sp, #8
   176ac:	af00      	add	r7, sp, #0
   176ae:	6078      	str	r0, [r7, #4]
   176b0:	687a      	ldr	r2, [r7, #4]
   176b2:	4b0a      	ldr	r3, [pc, #40]	(176dc <_ZN5TapisD2Ev+0x34>)
   176b4:	6013      	str	r3, [r2, #0]
   176b6:	687b      	ldr	r3, [r7, #4]
   176b8:	4618      	mov	r0, r3
   176ba:	f7fd fe3f 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   176be:	f04f 0300 	mov.w	r3, #0	; 0x0
   176c2:	b2db      	uxtb	r3, r3
   176c4:	2b00      	cmp	r3, #0
   176c6:	d002      	beq.n	176ce <_ZN5TapisD2Ev+0x26>
   176c8:	6878      	ldr	r0, [r7, #4]
   176ca:	f7f7 fab7 	bl	ec3c <_ZdlPv>
   176ce:	687b      	ldr	r3, [r7, #4]
   176d0:	4618      	mov	r0, r3
   176d2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   176d6:	46bd      	mov	sp, r7
   176d8:	bd80      	pop	{r7, pc}
   176da:	46c0      	nop			(mov r8, r8)
   176dc:	000224b8 	.word	0x000224b8

000176e0 <_ZN5TapisC1Ev>:
#include "command.h"
#include "position.h"
//#include "brasdevant.h"


Tapis::Tapis(){}
   176e0:	b590      	push	{r4, r7, lr}
   176e2:	b085      	sub	sp, #20
   176e4:	af00      	add	r7, sp, #0
   176e6:	6078      	str	r0, [r7, #4]
   176e8:	687c      	ldr	r4, [r7, #4]
   176ea:	f107 0308 	add.w	r3, r7, #8	; 0x8
   176ee:	4618      	mov	r0, r3
   176f0:	4910      	ldr	r1, [pc, #64]	(17734 <_ZN5TapisC1Ev+0x54>)
   176f2:	4a10      	ldr	r2, [pc, #64]	(17734 <_ZN5TapisC1Ev+0x54>)
   176f4:	f04f 0301 	mov.w	r3, #1	; 0x1
   176f8:	f7f7 fb60 	bl	edbc <_ZN8PositionC1Effb>
   176fc:	4620      	mov	r0, r4
   176fe:	f107 0308 	add.w	r3, r7, #8	; 0x8
   17702:	e893 0006 	ldmia.w	r3, {r1, r2}
   17706:	f7fd fe59 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   1770a:	687a      	ldr	r2, [r7, #4]
   1770c:	4b0a      	ldr	r3, [pc, #40]	(17738 <_ZN5TapisC1Ev+0x58>)
   1770e:	6013      	str	r3, [r2, #0]
   17710:	687b      	ldr	r3, [r7, #4]
   17712:	f103 0318 	add.w	r3, r3, #24	; 0x18
   17716:	4618      	mov	r0, r3
   17718:	f7f7 fb28 	bl	ed6c <_ZN8PositionC1Ev>
   1771c:	687b      	ldr	r3, [r7, #4]
   1771e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   17722:	4618      	mov	r0, r3
   17724:	f7f7 fb22 	bl	ed6c <_ZN8PositionC1Ev>
   17728:	687b      	ldr	r3, [r7, #4]
   1772a:	4618      	mov	r0, r3
   1772c:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17730:	46bd      	mov	sp, r7
   17732:	bd90      	pop	{r4, r7, pc}
   17734:	00000000 	.word	0x00000000
   17738:	000224b8 	.word	0x000224b8

0001773c <_ZN5TapisC2Ev>:
   1773c:	b590      	push	{r4, r7, lr}
   1773e:	b085      	sub	sp, #20
   17740:	af00      	add	r7, sp, #0
   17742:	6078      	str	r0, [r7, #4]
   17744:	687c      	ldr	r4, [r7, #4]
   17746:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1774a:	4618      	mov	r0, r3
   1774c:	4910      	ldr	r1, [pc, #64]	(17790 <_ZN5TapisC2Ev+0x54>)
   1774e:	4a10      	ldr	r2, [pc, #64]	(17790 <_ZN5TapisC2Ev+0x54>)
   17750:	f04f 0301 	mov.w	r3, #1	; 0x1
   17754:	f7f7 fb32 	bl	edbc <_ZN8PositionC1Effb>
   17758:	4620      	mov	r0, r4
   1775a:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1775e:	e893 0006 	ldmia.w	r3, {r1, r2}
   17762:	f7fd fe2b 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   17766:	687a      	ldr	r2, [r7, #4]
   17768:	4b0a      	ldr	r3, [pc, #40]	(17794 <_ZN5TapisC2Ev+0x58>)
   1776a:	6013      	str	r3, [r2, #0]
   1776c:	687b      	ldr	r3, [r7, #4]
   1776e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   17772:	4618      	mov	r0, r3
   17774:	f7f7 fafa 	bl	ed6c <_ZN8PositionC1Ev>
   17778:	687b      	ldr	r3, [r7, #4]
   1777a:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1777e:	4618      	mov	r0, r3
   17780:	f7f7 faf4 	bl	ed6c <_ZN8PositionC1Ev>
   17784:	687b      	ldr	r3, [r7, #4]
   17786:	4618      	mov	r0, r3
   17788:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1778c:	46bd      	mov	sp, r7
   1778e:	bd90      	pop	{r4, r7, pc}
   17790:	00000000 	.word	0x00000000
   17794:	000224b8 	.word	0x000224b8

00017798 <_ZN5TapisC1E8Position>:

Tapis::Tapis(Position position):MediumLevelAction(position)
   17798:	b590      	push	{r4, r7, lr}
   1779a:	b087      	sub	sp, #28
   1779c:	af00      	add	r7, sp, #0
   1779e:	60f8      	str	r0, [r7, #12]
   177a0:	f107 0304 	add.w	r3, r7, #4	; 0x4
   177a4:	e883 0006 	stmia.w	r3, {r1, r2}
   177a8:	68fb      	ldr	r3, [r7, #12]
   177aa:	4618      	mov	r0, r3
   177ac:	f107 0304 	add.w	r3, r7, #4	; 0x4
   177b0:	e893 0006 	ldmia.w	r3, {r1, r2}
   177b4:	f7fd fe02 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   177b8:	68fa      	ldr	r2, [r7, #12]
   177ba:	4b15      	ldr	r3, [pc, #84]	(17810 <_ZN5TapisC1E8Position+0x78>)
   177bc:	6013      	str	r3, [r2, #0]
   177be:	68fb      	ldr	r3, [r7, #12]
   177c0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   177c4:	4618      	mov	r0, r3
   177c6:	f7f7 fad1 	bl	ed6c <_ZN8PositionC1Ev>
   177ca:	68fb      	ldr	r3, [r7, #12]
   177cc:	f103 0320 	add.w	r3, r3, #32	; 0x20
   177d0:	4618      	mov	r0, r3
   177d2:	f7f7 facb 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->goBack = false;
   177d6:	68fa      	ldr	r2, [r7, #12]
   177d8:	f04f 0300 	mov.w	r3, #0	; 0x0
   177dc:	7413      	strb	r3, [r2, #16]
    this->positionMarches = Position(1230,150);
   177de:	68fb      	ldr	r3, [r7, #12]
   177e0:	f103 0420 	add.w	r4, r3, #32	; 0x20
   177e4:	f107 0310 	add.w	r3, r7, #16	; 0x10
   177e8:	4618      	mov	r0, r3
   177ea:	490a      	ldr	r1, [pc, #40]	(17814 <_ZN5TapisC1E8Position+0x7c>)
   177ec:	4a0a      	ldr	r2, [pc, #40]	(17818 <_ZN5TapisC1E8Position+0x80>)
   177ee:	f04f 0301 	mov.w	r3, #1	; 0x1
   177f2:	f7f7 fae3 	bl	edbc <_ZN8PositionC1Effb>
   177f6:	4620      	mov	r0, r4
   177f8:	f107 0310 	add.w	r3, r7, #16	; 0x10
   177fc:	e893 0006 	ldmia.w	r3, {r1, r2}
   17800:	f7f7 fb70 	bl	eee4 <_ZN8PositionaSES_>
}
   17804:	68fb      	ldr	r3, [r7, #12]
   17806:	4618      	mov	r0, r3
   17808:	f107 071c 	add.w	r7, r7, #28	; 0x1c
   1780c:	46bd      	mov	sp, r7
   1780e:	bd90      	pop	{r4, r7, pc}
   17810:	000224b8 	.word	0x000224b8
   17814:	4499c000 	.word	0x4499c000
   17818:	43160000 	.word	0x43160000

0001781c <_ZN5TapisC2E8Position>:
//#include "brasdevant.h"


Tapis::Tapis(){}

Tapis::Tapis(Position position):MediumLevelAction(position)
   1781c:	b590      	push	{r4, r7, lr}
   1781e:	b087      	sub	sp, #28
   17820:	af00      	add	r7, sp, #0
   17822:	60f8      	str	r0, [r7, #12]
   17824:	f107 0304 	add.w	r3, r7, #4	; 0x4
   17828:	e883 0006 	stmia.w	r3, {r1, r2}
   1782c:	68fb      	ldr	r3, [r7, #12]
   1782e:	4618      	mov	r0, r3
   17830:	f107 0304 	add.w	r3, r7, #4	; 0x4
   17834:	e893 0006 	ldmia.w	r3, {r1, r2}
   17838:	f7fd fdc0 	bl	153bc <_ZN17MediumLevelActionC2E8Position>
   1783c:	68fa      	ldr	r2, [r7, #12]
   1783e:	4b15      	ldr	r3, [pc, #84]	(17894 <_ZN5TapisC2E8Position+0x78>)
   17840:	6013      	str	r3, [r2, #0]
   17842:	68fb      	ldr	r3, [r7, #12]
   17844:	f103 0318 	add.w	r3, r3, #24	; 0x18
   17848:	4618      	mov	r0, r3
   1784a:	f7f7 fa8f 	bl	ed6c <_ZN8PositionC1Ev>
   1784e:	68fb      	ldr	r3, [r7, #12]
   17850:	f103 0320 	add.w	r3, r3, #32	; 0x20
   17854:	4618      	mov	r0, r3
   17856:	f7f7 fa89 	bl	ed6c <_ZN8PositionC1Ev>
{
    this->goBack = false;
   1785a:	68fa      	ldr	r2, [r7, #12]
   1785c:	f04f 0300 	mov.w	r3, #0	; 0x0
   17860:	7413      	strb	r3, [r2, #16]
    this->positionMarches = Position(1230,150);
   17862:	68fb      	ldr	r3, [r7, #12]
   17864:	f103 0420 	add.w	r4, r3, #32	; 0x20
   17868:	f107 0310 	add.w	r3, r7, #16	; 0x10
   1786c:	4618      	mov	r0, r3
   1786e:	490a      	ldr	r1, [pc, #40]	(17898 <_ZN5TapisC2E8Position+0x7c>)
   17870:	4a0a      	ldr	r2, [pc, #40]	(1789c <_ZN5TapisC2E8Position+0x80>)
   17872:	f04f 0301 	mov.w	r3, #1	; 0x1
   17876:	f7f7 faa1 	bl	edbc <_ZN8PositionC1Effb>
   1787a:	4620      	mov	r0, r4
   1787c:	f107 0310 	add.w	r3, r7, #16	; 0x10
   17880:	e893 0006 	ldmia.w	r3, {r1, r2}
   17884:	f7f7 fb2e 	bl	eee4 <_ZN8PositionaSES_>
}
   17888:	68fb      	ldr	r3, [r7, #12]
   1788a:	4618      	mov	r0, r3
   1788c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
   17890:	46bd      	mov	sp, r7
   17892:	bd90      	pop	{r4, r7, pc}
   17894:	000224b8 	.word	0x000224b8
   17898:	4499c000 	.word	0x4499c000
   1789c:	43160000 	.word	0x43160000

000178a0 <_exit>:

void _exit(int status)
{
    //Endless loop
    for(;;);
}
   178a0:	b480      	push	{r7}
   178a2:	b083      	sub	sp, #12
   178a4:	af00      	add	r7, sp, #0
   178a6:	6078      	str	r0, [r7, #4]
   178a8:	e7fe      	b.n	178a8 <_exit+0x8>
   178aa:	46c0      	nop			(mov r8, r8)

000178ac <_close>:

int _close(int file)
{
   178ac:	b480      	push	{r7}
   178ae:	b083      	sub	sp, #12
   178b0:	af00      	add	r7, sp, #0
   178b2:	6078      	str	r0, [r7, #4]
    return -1;
   178b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   178b8:	4618      	mov	r0, r3
   178ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
   178be:	46bd      	mov	sp, r7
   178c0:	bc80      	pop	{r7}
   178c2:	4770      	bx	lr

000178c4 <_execve>:

char* __env[1] = {0};
char** environ = __env;

int _execve(char* name, char** argv, char** env)
{
   178c4:	b480      	push	{r7}
   178c6:	b085      	sub	sp, #20
   178c8:	af00      	add	r7, sp, #0
   178ca:	60f8      	str	r0, [r7, #12]
   178cc:	60b9      	str	r1, [r7, #8]
   178ce:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
   178d0:	4a05      	ldr	r2, [pc, #20]	(178e8 <_execve+0x24>)
   178d2:	f04f 030c 	mov.w	r3, #12	; 0xc
   178d6:	6013      	str	r3, [r2, #0]
    return -1;
   178d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   178dc:	4618      	mov	r0, r3
   178de:	f107 0714 	add.w	r7, r7, #20	; 0x14
   178e2:	46bd      	mov	sp, r7
   178e4:	bc80      	pop	{r7}
   178e6:	4770      	bx	lr
   178e8:	20000688 	.word	0x20000688

000178ec <_fork>:

int _fork(void)
{
   178ec:	b480      	push	{r7}
   178ee:	af00      	add	r7, sp, #0
    errno = EAGAIN;
   178f0:	4a04      	ldr	r2, [pc, #16]	(17904 <_fork+0x18>)
   178f2:	f04f 030b 	mov.w	r3, #11	; 0xb
   178f6:	6013      	str	r3, [r2, #0]
    return -1;
   178f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   178fc:	4618      	mov	r0, r3
   178fe:	46bd      	mov	sp, r7
   17900:	bc80      	pop	{r7}
   17902:	4770      	bx	lr
   17904:	20000688 	.word	0x20000688

00017908 <_fstat>:

int _fstat(int file, struct stat* st)
{
   17908:	b480      	push	{r7}
   1790a:	b083      	sub	sp, #12
   1790c:	af00      	add	r7, sp, #0
   1790e:	6078      	str	r0, [r7, #4]
   17910:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
   17912:	683a      	ldr	r2, [r7, #0]
   17914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17918:	6053      	str	r3, [r2, #4]
    return 0;
   1791a:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   1791e:	4618      	mov	r0, r3
   17920:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17924:	46bd      	mov	sp, r7
   17926:	bc80      	pop	{r7}
   17928:	4770      	bx	lr
   1792a:	46c0      	nop			(mov r8, r8)

0001792c <_getpid>:

int _getpid(void)
{
   1792c:	b480      	push	{r7}
   1792e:	af00      	add	r7, sp, #0
    return 1;
   17930:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   17934:	4618      	mov	r0, r3
   17936:	46bd      	mov	sp, r7
   17938:	bc80      	pop	{r7}
   1793a:	4770      	bx	lr

0001793c <_isatty>:

int _isatty(int file)
{
   1793c:	b480      	push	{r7}
   1793e:	b083      	sub	sp, #12
   17940:	af00      	add	r7, sp, #0
   17942:	6078      	str	r0, [r7, #4]
    return 1;
   17944:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   17948:	4618      	mov	r0, r3
   1794a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1794e:	46bd      	mov	sp, r7
   17950:	bc80      	pop	{r7}
   17952:	4770      	bx	lr

00017954 <_kill>:

int _kill(int pid, int sig)
{
   17954:	b480      	push	{r7}
   17956:	b083      	sub	sp, #12
   17958:	af00      	add	r7, sp, #0
   1795a:	6078      	str	r0, [r7, #4]
   1795c:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
   1795e:	4a06      	ldr	r2, [pc, #24]	(17978 <_kill+0x24>)
   17960:	f04f 0316 	mov.w	r3, #22	; 0x16
   17964:	6013      	str	r3, [r2, #0]
    return -1;
   17966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1796a:	4618      	mov	r0, r3
   1796c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17970:	46bd      	mov	sp, r7
   17972:	bc80      	pop	{r7}
   17974:	4770      	bx	lr
   17976:	46c0      	nop			(mov r8, r8)
   17978:	20000688 	.word	0x20000688

0001797c <_link>:

int _link(char* old, char* new)
{
   1797c:	b480      	push	{r7}
   1797e:	b083      	sub	sp, #12
   17980:	af00      	add	r7, sp, #0
   17982:	6078      	str	r0, [r7, #4]
   17984:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
   17986:	4a06      	ldr	r2, [pc, #24]	(179a0 <_link+0x24>)
   17988:	f04f 031f 	mov.w	r3, #31	; 0x1f
   1798c:	6013      	str	r3, [r2, #0]
    return -1;
   1798e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17992:	4618      	mov	r0, r3
   17994:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17998:	46bd      	mov	sp, r7
   1799a:	bc80      	pop	{r7}
   1799c:	4770      	bx	lr
   1799e:	46c0      	nop			(mov r8, r8)
   179a0:	20000688 	.word	0x20000688

000179a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
   179a4:	b480      	push	{r7}
   179a6:	b085      	sub	sp, #20
   179a8:	af00      	add	r7, sp, #0
   179aa:	60f8      	str	r0, [r7, #12]
   179ac:	60b9      	str	r1, [r7, #8]
   179ae:	607a      	str	r2, [r7, #4]
    return 0;
   179b0:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   179b4:	4618      	mov	r0, r3
   179b6:	f107 0714 	add.w	r7, r7, #20	; 0x14
   179ba:	46bd      	mov	sp, r7
   179bc:	bc80      	pop	{r7}
   179be:	4770      	bx	lr

000179c0 <_open>:

int _open(const char* name, int flags, int mode)
{
   179c0:	b480      	push	{r7}
   179c2:	b085      	sub	sp, #20
   179c4:	af00      	add	r7, sp, #0
   179c6:	60f8      	str	r0, [r7, #12]
   179c8:	60b9      	str	r1, [r7, #8]
   179ca:	607a      	str	r2, [r7, #4]
    return -1;
   179cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   179d0:	4618      	mov	r0, r3
   179d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
   179d6:	46bd      	mov	sp, r7
   179d8:	bc80      	pop	{r7}
   179da:	4770      	bx	lr

000179dc <_read>:

int _read(int file, char* ptr, int len)
{
   179dc:	b480      	push	{r7}
   179de:	b085      	sub	sp, #20
   179e0:	af00      	add	r7, sp, #0
   179e2:	60f8      	str	r0, [r7, #12]
   179e4:	60b9      	str	r1, [r7, #8]
   179e6:	607a      	str	r2, [r7, #4]
    return 0;
   179e8:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   179ec:	4618      	mov	r0, r3
   179ee:	f107 0714 	add.w	r7, r7, #20	; 0x14
   179f2:	46bd      	mov	sp, r7
   179f4:	bc80      	pop	{r7}
   179f6:	4770      	bx	lr

000179f8 <_sbrk>:

caddr_t _sbrk(int incr)
{
   179f8:	b580      	push	{r7, lr}
   179fa:	b084      	sub	sp, #16
   179fc:	af00      	add	r7, sp, #0
   179fe:	6078      	str	r0, [r7, #4]
    extern char _end;
    static char* heap_end;
    char* prev_heap_end;
    char* stack_ptr = (char*)0xffffffff;
   17a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17a04:	60fb      	str	r3, [r7, #12]

    if(heap_end == 0)
   17a06:	4b12      	ldr	r3, [pc, #72]	(17a50 <_sbrk+0x58>)
   17a08:	681b      	ldr	r3, [r3, #0]
   17a0a:	2b00      	cmp	r3, #0
   17a0c:	d102      	bne.n	17a14 <_sbrk+0x1c>
        heap_end = &_end;
   17a0e:	4a10      	ldr	r2, [pc, #64]	(17a50 <_sbrk+0x58>)
   17a10:	4b10      	ldr	r3, [pc, #64]	(17a54 <_sbrk+0x5c>)
   17a12:	6013      	str	r3, [r2, #0]
    prev_heap_end = heap_end;
   17a14:	4b0e      	ldr	r3, [pc, #56]	(17a50 <_sbrk+0x58>)
   17a16:	681b      	ldr	r3, [r3, #0]
   17a18:	60bb      	str	r3, [r7, #8]
    if( heap_end + incr > stack_ptr)
   17a1a:	4b0d      	ldr	r3, [pc, #52]	(17a50 <_sbrk+0x58>)
   17a1c:	681a      	ldr	r2, [r3, #0]
   17a1e:	687b      	ldr	r3, [r7, #4]
   17a20:	441a      	add	r2, r3
   17a22:	68fb      	ldr	r3, [r7, #12]
   17a24:	429a      	cmp	r2, r3
   17a26:	d906      	bls.n	17a36 <_sbrk+0x3e>
    {
        write(1, "Heap and stack collision\n", 25);
   17a28:	f04f 0001 	mov.w	r0, #1	; 0x1
   17a2c:	490a      	ldr	r1, [pc, #40]	(17a58 <_sbrk+0x60>)
   17a2e:	f04f 0219 	mov.w	r2, #25	; 0x19
   17a32:	f009 fd9d 	bl	21570 <write>
      //  abort();
    }

    heap_end += incr;
   17a36:	4b06      	ldr	r3, [pc, #24]	(17a50 <_sbrk+0x58>)
   17a38:	681a      	ldr	r2, [r3, #0]
   17a3a:	687b      	ldr	r3, [r7, #4]
   17a3c:	441a      	add	r2, r3
   17a3e:	4b04      	ldr	r3, [pc, #16]	(17a50 <_sbrk+0x58>)
   17a40:	601a      	str	r2, [r3, #0]
    return (caddr_t)prev_heap_end;
   17a42:	68bb      	ldr	r3, [r7, #8]
}
   17a44:	4618      	mov	r0, r3
   17a46:	f107 0710 	add.w	r7, r7, #16	; 0x10
   17a4a:	46bd      	mov	sp, r7
   17a4c:	bd80      	pop	{r7, pc}
   17a4e:	46c0      	nop			(mov r8, r8)
   17a50:	20000684 	.word	0x20000684
   17a54:	2000068c 	.word	0x2000068c
   17a58:	000224d0 	.word	0x000224d0

00017a5c <_times>:

typedef struct tms tms;

int _times(tms* buf)
{
   17a5c:	b480      	push	{r7}
   17a5e:	b083      	sub	sp, #12
   17a60:	af00      	add	r7, sp, #0
   17a62:	6078      	str	r0, [r7, #4]
    return -1;
   17a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17a68:	4618      	mov	r0, r3
   17a6a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17a6e:	46bd      	mov	sp, r7
   17a70:	bc80      	pop	{r7}
   17a72:	4770      	bx	lr

00017a74 <_unlink>:

int _unlink(char* name)
{
   17a74:	b480      	push	{r7}
   17a76:	b083      	sub	sp, #12
   17a78:	af00      	add	r7, sp, #0
   17a7a:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
   17a7c:	4a05      	ldr	r2, [pc, #20]	(17a94 <_unlink+0x20>)
   17a7e:	f04f 0302 	mov.w	r3, #2	; 0x2
   17a82:	6013      	str	r3, [r2, #0]
    return -1;
   17a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17a88:	4618      	mov	r0, r3
   17a8a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17a8e:	46bd      	mov	sp, r7
   17a90:	bc80      	pop	{r7}
   17a92:	4770      	bx	lr
   17a94:	20000688 	.word	0x20000688

00017a98 <_wait>:

int _wait(int* status)
{
   17a98:	b480      	push	{r7}
   17a9a:	b083      	sub	sp, #12
   17a9c:	af00      	add	r7, sp, #0
   17a9e:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
   17aa0:	4a05      	ldr	r2, [pc, #20]	(17ab8 <_wait+0x20>)
   17aa2:	f04f 030a 	mov.w	r3, #10	; 0xa
   17aa6:	6013      	str	r3, [r2, #0]
    return -1;
   17aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   17aac:	4618      	mov	r0, r3
   17aae:	f107 070c 	add.w	r7, r7, #12	; 0xc
   17ab2:	46bd      	mov	sp, r7
   17ab4:	bc80      	pop	{r7}
   17ab6:	4770      	bx	lr
   17ab8:	20000688 	.word	0x20000688

00017abc <_write>:

int _write(int file, char* ptr, int len)
{
   17abc:	b480      	push	{r7}
   17abe:	b085      	sub	sp, #20
   17ac0:	af00      	add	r7, sp, #0
   17ac2:	60f8      	str	r0, [r7, #12]
   17ac4:	60b9      	str	r1, [r7, #8]
   17ac6:	607a      	str	r2, [r7, #4]
    return len;
   17ac8:	687b      	ldr	r3, [r7, #4]
}
   17aca:	4618      	mov	r0, r3
   17acc:	f107 0714 	add.w	r7, r7, #20	; 0x14
   17ad0:	46bd      	mov	sp, r7
   17ad2:	bc80      	pop	{r7}
   17ad4:	4770      	bx	lr
   17ad6:	46c0      	nop			(mov r8, r8)

00017ad8 <__cxa_end_cleanup>:
   17ad8:	b41e      	push	{r1, r2, r3, r4}
   17ada:	f005 fdc3 	bl	1d664 <__gnu_end_cleanup>
   17ade:	bc1e      	pop	{r1, r2, r3, r4}
   17ae0:	f004 fbd4 	bl	1c28c <_Unwind_Resume>

00017ae4 <d_make_comp>:
   17ae4:	b470      	push	{r4, r5, r6}
   17ae6:	461d      	mov	r5, r3
   17ae8:	1e4b      	subs	r3, r1, #1
   17aea:	460e      	mov	r6, r1
   17aec:	4614      	mov	r4, r2
   17aee:	2b34      	cmp	r3, #52
   17af0:	d821      	bhi.n	17b36 <d_make_comp+0x52>
   17af2:	e8df f003 	tbb	[pc, r3]
   17af6:	3232      	.short	0x3232
   17af8:	20203232 	.word	0x20203232
   17afc:	32414120 	.word	0x32414120
   17b00:	41414141 	.word	0x41414141
   17b04:	41414141 	.word	0x41414141
   17b08:	1c204141 	.word	0x1c204141
   17b0c:	1c1c1c1c 	.word	0x1c1c1c1c
   17b10:	4141321c 	.word	0x4141321c
   17b14:	20414141 	.word	0x20414141
   17b18:	321b1c41 	.word	0x321b1c41
   17b1c:	20204141 	.word	0x20204141
   17b20:	32323241 	.word	0x32323241
   17b24:	32323232 	.word	0x32323232
   17b28:	00324132 	.word	0x00324132
   17b2c:	b11d      	cbz	r5, 17b36 <d_make_comp+0x52>
   17b2e:	6941      	ldr	r1, [r0, #20]
   17b30:	6983      	ldr	r3, [r0, #24]
   17b32:	4299      	cmp	r1, r3
   17b34:	db02      	blt.n	17b3c <d_make_comp+0x58>
   17b36:	2000      	movs	r0, #0
   17b38:	bc70      	pop	{r4, r5, r6}
   17b3a:	4770      	bx	lr
   17b3c:	008b      	lsls	r3, r1, #2
   17b3e:	010a      	lsls	r2, r1, #4
   17b40:	f8d0 c010 	ldr.w	ip, [r0, #16]
   17b44:	1ad2      	subs	r2, r2, r3
   17b46:	1c4b      	adds	r3, r1, #1
   17b48:	6143      	str	r3, [r0, #20]
   17b4a:	eb1c 0002 	adds.w	r0, ip, r2
   17b4e:	bf1e      	ittt	ne
   17b50:	f80c 6002 	strbne.w	r6, [ip, r2]
   17b54:	6044      	strne	r4, [r0, #4]
   17b56:	6085      	strne	r5, [r0, #8]
   17b58:	e7ee      	b.n	17b38 <d_make_comp+0x54>
   17b5a:	f1d5 0301 	rsbs	r3, r5, #1	; 0x1
   17b5e:	bf38      	it	cc
   17b60:	2300      	movcc	r3, #0
   17b62:	2c00      	cmp	r4, #0
   17b64:	bf08      	it	eq
   17b66:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d1e3      	bne.n	17b36 <d_make_comp+0x52>
   17b6e:	6941      	ldr	r1, [r0, #20]
   17b70:	6983      	ldr	r3, [r0, #24]
   17b72:	4299      	cmp	r1, r3
   17b74:	dadf      	bge.n	17b36 <d_make_comp+0x52>
   17b76:	e7e1      	b.n	17b3c <d_make_comp+0x58>
   17b78:	2c00      	cmp	r4, #0
   17b7a:	d0dc      	beq.n	17b36 <d_make_comp+0x52>
   17b7c:	6941      	ldr	r1, [r0, #20]
   17b7e:	6983      	ldr	r3, [r0, #24]
   17b80:	4299      	cmp	r1, r3
   17b82:	dad8      	bge.n	17b36 <d_make_comp+0x52>
   17b84:	e7da      	b.n	17b3c <d_make_comp+0x58>
   17b86:	46c0      	nop			(mov r8, r8)

00017b88 <d_number>:
   17b88:	b410      	push	{r4}
   17b8a:	68c1      	ldr	r1, [r0, #12]
   17b8c:	f891 c000 	ldrb.w	ip, [r1]
   17b90:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
   17b94:	d01c      	beq.n	17bd0 <d_number+0x48>
   17b96:	2400      	movs	r4, #0
   17b98:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   17b9c:	b2db      	uxtb	r3, r3
   17b9e:	2b09      	cmp	r3, #9
   17ba0:	d81c      	bhi.n	17bdc <d_number+0x54>
   17ba2:	68c1      	ldr	r1, [r0, #12]
   17ba4:	2200      	movs	r2, #0
   17ba6:	0053      	lsls	r3, r2, #1
   17ba8:	3101      	adds	r1, #1
   17baa:	00d2      	lsls	r2, r2, #3
   17bac:	189b      	adds	r3, r3, r2
   17bae:	60c1      	str	r1, [r0, #12]
   17bb0:	4463      	add	r3, ip
   17bb2:	f891 c000 	ldrb.w	ip, [r1]
   17bb6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17bba:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   17bbe:	b2db      	uxtb	r3, r3
   17bc0:	2b09      	cmp	r3, #9
   17bc2:	d9f0      	bls.n	17ba6 <d_number+0x1e>
   17bc4:	4610      	mov	r0, r2
   17bc6:	b10c      	cbz	r4, 17bcc <d_number+0x44>
   17bc8:	f1c2 0000 	rsb	r0, r2, #0	; 0x0
   17bcc:	bc10      	pop	{r4}
   17bce:	4770      	bx	lr
   17bd0:	1c4b      	adds	r3, r1, #1
   17bd2:	60c3      	str	r3, [r0, #12]
   17bd4:	f891 c001 	ldrb.w	ip, [r1, #1]
   17bd8:	2401      	movs	r4, #1
   17bda:	e7dd      	b.n	17b98 <d_number+0x10>
   17bdc:	2200      	movs	r2, #0
   17bde:	e7f1      	b.n	17bc4 <d_number+0x3c>

00017be0 <d_call_offset>:
   17be0:	b510      	push	{r4, lr}
   17be2:	4604      	mov	r4, r0
   17be4:	b931      	cbnz	r1, 17bf4 <d_call_offset+0x14>
   17be6:	68c3      	ldr	r3, [r0, #12]
   17be8:	7819      	ldrb	r1, [r3, #0]
   17bea:	b909      	cbnz	r1, 17bf0 <d_call_offset+0x10>
   17bec:	2000      	movs	r0, #0
   17bee:	bd10      	pop	{r4, pc}
   17bf0:	3301      	adds	r3, #1
   17bf2:	60c3      	str	r3, [r0, #12]
   17bf4:	2968      	cmp	r1, #104
   17bf6:	d00a      	beq.n	17c0e <d_call_offset+0x2e>
   17bf8:	2976      	cmp	r1, #118
   17bfa:	d1f7      	bne.n	17bec <d_call_offset+0xc>
   17bfc:	4620      	mov	r0, r4
   17bfe:	f7ff ffc3 	bl	17b88 <d_number>
   17c02:	68e2      	ldr	r2, [r4, #12]
   17c04:	7813      	ldrb	r3, [r2, #0]
   17c06:	2b5f      	cmp	r3, #95
   17c08:	d1f0      	bne.n	17bec <d_call_offset+0xc>
   17c0a:	1c53      	adds	r3, r2, #1
   17c0c:	60e3      	str	r3, [r4, #12]
   17c0e:	4620      	mov	r0, r4
   17c10:	f7ff ffba 	bl	17b88 <d_number>
   17c14:	68e2      	ldr	r2, [r4, #12]
   17c16:	7813      	ldrb	r3, [r2, #0]
   17c18:	2b5f      	cmp	r3, #95
   17c1a:	d1e7      	bne.n	17bec <d_call_offset+0xc>
   17c1c:	1c53      	adds	r3, r2, #1
   17c1e:	60e3      	str	r3, [r4, #12]
   17c20:	2001      	movs	r0, #1
   17c22:	e7e4      	b.n	17bee <d_call_offset+0xe>

00017c24 <d_cv_qualifiers>:
   17c24:	b570      	push	{r4, r5, r6, lr}
   17c26:	68c3      	ldr	r3, [r0, #12]
   17c28:	4616      	mov	r6, r2
   17c2a:	781a      	ldrb	r2, [r3, #0]
   17c2c:	4604      	mov	r4, r0
   17c2e:	460d      	mov	r5, r1
   17c30:	2a72      	cmp	r2, #114
   17c32:	bf14      	ite	ne
   17c34:	2100      	movne	r1, #0
   17c36:	2101      	moveq	r1, #1
   17c38:	2a56      	cmp	r2, #86
   17c3a:	bf14      	ite	ne
   17c3c:	2000      	movne	r0, #0
   17c3e:	2001      	moveq	r0, #1
   17c40:	ea51 0c00 	orrs.w	ip, r1, r0
   17c44:	d128      	bne.n	17c98 <d_cv_qualifiers+0x74>
   17c46:	2a4b      	cmp	r2, #75
   17c48:	d124      	bne.n	17c94 <d_cv_qualifiers+0x70>
   17c4a:	3301      	adds	r3, #1
   17c4c:	60e3      	str	r3, [r4, #12]
   17c4e:	b988      	cbnz	r0, 17c74 <d_cv_qualifiers+0x50>
   17c50:	6b23      	ldr	r3, [r4, #48]
   17c52:	2e00      	cmp	r6, #0
   17c54:	bf14      	ite	ne
   17c56:	211b      	movne	r1, #27
   17c58:	2118      	moveq	r1, #24
   17c5a:	3306      	adds	r3, #6
   17c5c:	6323      	str	r3, [r4, #48]
   17c5e:	2200      	movs	r2, #0
   17c60:	4620      	mov	r0, r4
   17c62:	4613      	mov	r3, r2
   17c64:	f7ff ff3e 	bl	17ae4 <d_make_comp>
   17c68:	6028      	str	r0, [r5, #0]
   17c6a:	b190      	cbz	r0, 17c92 <d_cv_qualifiers+0x6e>
   17c6c:	68e3      	ldr	r3, [r4, #12]
   17c6e:	1d05      	adds	r5, r0, #4
   17c70:	781a      	ldrb	r2, [r3, #0]
   17c72:	e7dd      	b.n	17c30 <d_cv_qualifiers+0xc>
   17c74:	6b23      	ldr	r3, [r4, #48]
   17c76:	2200      	movs	r2, #0
   17c78:	3309      	adds	r3, #9
   17c7a:	6323      	str	r3, [r4, #48]
   17c7c:	2e00      	cmp	r6, #0
   17c7e:	bf14      	ite	ne
   17c80:	211a      	movne	r1, #26
   17c82:	2117      	moveq	r1, #23
   17c84:	4620      	mov	r0, r4
   17c86:	4613      	mov	r3, r2
   17c88:	f7ff ff2c 	bl	17ae4 <d_make_comp>
   17c8c:	6028      	str	r0, [r5, #0]
   17c8e:	2800      	cmp	r0, #0
   17c90:	d1ec      	bne.n	17c6c <d_cv_qualifiers+0x48>
   17c92:	4605      	mov	r5, r0
   17c94:	4628      	mov	r0, r5
   17c96:	bd70      	pop	{r4, r5, r6, pc}
   17c98:	3301      	adds	r3, #1
   17c9a:	60e3      	str	r3, [r4, #12]
   17c9c:	2900      	cmp	r1, #0
   17c9e:	d0d6      	beq.n	17c4e <d_cv_qualifiers+0x2a>
   17ca0:	6b23      	ldr	r3, [r4, #48]
   17ca2:	2e00      	cmp	r6, #0
   17ca4:	bf14      	ite	ne
   17ca6:	2119      	movne	r1, #25
   17ca8:	2116      	moveq	r1, #22
   17caa:	3309      	adds	r3, #9
   17cac:	6323      	str	r3, [r4, #48]
   17cae:	e7d6      	b.n	17c5e <d_cv_qualifiers+0x3a>

00017cb0 <d_template_param>:
   17cb0:	b530      	push	{r4, r5, lr}
   17cb2:	68c2      	ldr	r2, [r0, #12]
   17cb4:	b081      	sub	sp, #4
   17cb6:	7813      	ldrb	r3, [r2, #0]
   17cb8:	4604      	mov	r4, r0
   17cba:	2b54      	cmp	r3, #84
   17cbc:	d002      	beq.n	17cc4 <d_template_param+0x14>
   17cbe:	2000      	movs	r0, #0
   17cc0:	b001      	add	sp, #4
   17cc2:	bd30      	pop	{r4, r5, pc}
   17cc4:	1c51      	adds	r1, r2, #1
   17cc6:	60c1      	str	r1, [r0, #12]
   17cc8:	7853      	ldrb	r3, [r2, #1]
   17cca:	2b5f      	cmp	r3, #95
   17ccc:	d119      	bne.n	17d02 <d_template_param+0x52>
   17cce:	2500      	movs	r5, #0
   17cd0:	1c4b      	adds	r3, r1, #1
   17cd2:	6aa2      	ldr	r2, [r4, #40]
   17cd4:	60e3      	str	r3, [r4, #12]
   17cd6:	f8d4 c014 	ldr.w	ip, [r4, #20]
   17cda:	69a3      	ldr	r3, [r4, #24]
   17cdc:	3201      	adds	r2, #1
   17cde:	459c      	cmp	ip, r3
   17ce0:	62a2      	str	r2, [r4, #40]
   17ce2:	daec      	bge.n	17cbe <d_template_param+0xe>
   17ce4:	ea4f 038c 	mov.w	r3, ip, lsl #2
   17ce8:	ea4f 120c 	mov.w	r2, ip, lsl #4
   17cec:	6921      	ldr	r1, [r4, #16]
   17cee:	1ad2      	subs	r2, r2, r3
   17cf0:	1888      	adds	r0, r1, r2
   17cf2:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   17cf6:	6163      	str	r3, [r4, #20]
   17cf8:	d0e2      	beq.n	17cc0 <d_template_param+0x10>
   17cfa:	2305      	movs	r3, #5
   17cfc:	548b      	strb	r3, [r1, r2]
   17cfe:	6045      	str	r5, [r0, #4]
   17d00:	e7de      	b.n	17cc0 <d_template_param+0x10>
   17d02:	f7ff ff41 	bl	17b88 <d_number>
   17d06:	2800      	cmp	r0, #0
   17d08:	dbd9      	blt.n	17cbe <d_template_param+0xe>
   17d0a:	68e1      	ldr	r1, [r4, #12]
   17d0c:	780b      	ldrb	r3, [r1, #0]
   17d0e:	2b5f      	cmp	r3, #95
   17d10:	d1d5      	bne.n	17cbe <d_template_param+0xe>
   17d12:	1c45      	adds	r5, r0, #1
   17d14:	e7dc      	b.n	17cd0 <d_template_param+0x20>
   17d16:	46c0      	nop			(mov r8, r8)

00017d18 <d_substitution>:
   17d18:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
   17d1c:	68c2      	ldr	r2, [r0, #12]
   17d1e:	460c      	mov	r4, r1
   17d20:	7813      	ldrb	r3, [r2, #0]
   17d22:	2b53      	cmp	r3, #83
   17d24:	d003      	beq.n	17d2e <d_substitution+0x16>
   17d26:	2000      	movs	r0, #0
   17d28:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
   17d2c:	4770      	bx	lr
   17d2e:	1c53      	adds	r3, r2, #1
   17d30:	60c3      	str	r3, [r0, #12]
   17d32:	7851      	ldrb	r1, [r2, #1]
   17d34:	bb39      	cbnz	r1, 17d86 <d_substitution+0x6e>
   17d36:	6883      	ldr	r3, [r0, #8]
   17d38:	08db      	lsrs	r3, r3, #3
   17d3a:	f013 0701 	ands.w	r7, r3, #1	; 0x1
   17d3e:	bf14      	ite	ne
   17d40:	2200      	movne	r2, #0
   17d42:	2201      	moveq	r2, #1
   17d44:	2c00      	cmp	r4, #0
   17d46:	bf0c      	ite	eq
   17d48:	2200      	moveq	r2, #0
   17d4a:	f002 0201 	andne.w	r2, r2, #1	; 0x1
   17d4e:	b13a      	cbz	r2, 17d60 <d_substitution+0x48>
   17d50:	68c2      	ldr	r2, [r0, #12]
   17d52:	7813      	ldrb	r3, [r2, #0]
   17d54:	3b43      	subs	r3, #67
   17d56:	b2db      	uxtb	r3, r3
   17d58:	2b01      	cmp	r3, #1
   17d5a:	bf8c      	ite	hi
   17d5c:	2700      	movhi	r7, #0
   17d5e:	2701      	movls	r7, #1
   17d60:	4a51      	ldr	r2, [pc, #324]	(17ea8 <d_substitution+0x190>)
   17d62:	f1b2 03c4 	subs.w	r3, r2, #196	; 0xc4
   17d66:	d3de      	bcc.n	17d26 <d_substitution+0xe>
   17d68:	2974      	cmp	r1, #116
   17d6a:	bf08      	it	eq
   17d6c:	469c      	moveq	ip, r3
   17d6e:	d04f      	beq.n	17e10 <d_substitution+0xf8>
   17d70:	469c      	mov	ip, r3
   17d72:	e003      	b.n	17d7c <d_substitution+0x64>
   17d74:	f89c 3000 	ldrb.w	r3, [ip]
   17d78:	428b      	cmp	r3, r1
   17d7a:	d049      	beq.n	17e10 <d_substitution+0xf8>
   17d7c:	f10c 0c1c 	add.w	ip, ip, #28	; 0x1c
   17d80:	4594      	cmp	ip, r2
   17d82:	d1f7      	bne.n	17d74 <d_substitution+0x5c>
   17d84:	e7cf      	b.n	17d26 <d_substitution+0xe>
   17d86:	3301      	adds	r3, #1
   17d88:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   17d8c:	60c3      	str	r3, [r0, #12]
   17d8e:	fa5f f38c 	uxtb.w	r3, ip
   17d92:	2b09      	cmp	r3, #9
   17d94:	bf8c      	ite	hi
   17d96:	2300      	movhi	r3, #0
   17d98:	2301      	movls	r3, #1
   17d9a:	295f      	cmp	r1, #95
   17d9c:	bf08      	it	eq
   17d9e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17da2:	2b00      	cmp	r3, #0
   17da4:	d079      	beq.n	17e9a <d_substitution+0x182>
   17da6:	295f      	cmp	r1, #95
   17da8:	d030      	beq.n	17e0c <d_substitution+0xf4>
   17daa:	fa5f f38c 	uxtb.w	r3, ip
   17dae:	2200      	movs	r2, #0
   17db0:	2b09      	cmp	r3, #9
   17db2:	d814      	bhi.n	17dde <d_substitution+0xc6>
   17db4:	0093      	lsls	r3, r2, #2
   17db6:	0152      	lsls	r2, r2, #5
   17db8:	189b      	adds	r3, r3, r2
   17dba:	185b      	adds	r3, r3, r1
   17dbc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17dc0:	2a00      	cmp	r2, #0
   17dc2:	dbb0      	blt.n	17d26 <d_substitution+0xe>
   17dc4:	68c3      	ldr	r3, [r0, #12]
   17dc6:	7819      	ldrb	r1, [r3, #0]
   17dc8:	b119      	cbz	r1, 17dd2 <d_substitution+0xba>
   17dca:	3301      	adds	r3, #1
   17dcc:	295f      	cmp	r1, #95
   17dce:	60c3      	str	r3, [r0, #12]
   17dd0:	d011      	beq.n	17df6 <d_substitution+0xde>
   17dd2:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   17dd6:	fa5f f38c 	uxtb.w	r3, ip
   17dda:	2b09      	cmp	r3, #9
   17ddc:	d9ea      	bls.n	17db4 <d_substitution+0x9c>
   17dde:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   17de2:	b2db      	uxtb	r3, r3
   17de4:	2b19      	cmp	r3, #25
   17de6:	d89e      	bhi.n	17d26 <d_substitution+0xe>
   17de8:	0093      	lsls	r3, r2, #2
   17dea:	0152      	lsls	r2, r2, #5
   17dec:	189b      	adds	r3, r3, r2
   17dee:	185b      	adds	r3, r3, r1
   17df0:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   17df4:	e7e4      	b.n	17dc0 <d_substitution+0xa8>
   17df6:	1c51      	adds	r1, r2, #1
   17df8:	6a03      	ldr	r3, [r0, #32]
   17dfa:	4299      	cmp	r1, r3
   17dfc:	da93      	bge.n	17d26 <d_substitution+0xe>
   17dfe:	6a83      	ldr	r3, [r0, #40]
   17e00:	69c2      	ldr	r2, [r0, #28]
   17e02:	3301      	adds	r3, #1
   17e04:	6283      	str	r3, [r0, #40]
   17e06:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   17e0a:	e78d      	b.n	17d28 <d_substitution+0x10>
   17e0c:	395f      	subs	r1, #95
   17e0e:	e7f3      	b.n	17df8 <d_substitution+0xe0>
   17e10:	f8dc a014 	ldr.w	sl, [ip, #20]
   17e14:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   17e18:	d03c      	beq.n	17e94 <d_substitution+0x17c>
   17e1a:	6945      	ldr	r5, [r0, #20]
   17e1c:	6986      	ldr	r6, [r0, #24]
   17e1e:	f8dc 8018 	ldr.w	r8, [ip, #24]
   17e22:	42b5      	cmp	r5, r6
   17e24:	db1c      	blt.n	17e60 <d_substitution+0x148>
   17e26:	2200      	movs	r2, #0
   17e28:	62c2      	str	r2, [r0, #44]
   17e2a:	2f00      	cmp	r7, #0
   17e2c:	d02d      	beq.n	17e8a <d_substitution+0x172>
   17e2e:	f8dc 400c 	ldr.w	r4, [ip, #12]
   17e32:	f8dc c010 	ldr.w	ip, [ip, #16]
   17e36:	6b03      	ldr	r3, [r0, #48]
   17e38:	42b5      	cmp	r5, r6
   17e3a:	4463      	add	r3, ip
   17e3c:	6303      	str	r3, [r0, #48]
   17e3e:	f6bf af72 	bge.w	17d26 <d_substitution+0xe>
   17e42:	00ab      	lsls	r3, r5, #2
   17e44:	012a      	lsls	r2, r5, #4
   17e46:	6901      	ldr	r1, [r0, #16]
   17e48:	1ad2      	subs	r2, r2, r3
   17e4a:	1c6b      	adds	r3, r5, #1
   17e4c:	6143      	str	r3, [r0, #20]
   17e4e:	1888      	adds	r0, r1, r2
   17e50:	f43f af6a 	beq.w	17d28 <d_substitution+0x10>
   17e54:	2315      	movs	r3, #21
   17e56:	548b      	strb	r3, [r1, r2]
   17e58:	6044      	str	r4, [r0, #4]
   17e5a:	f8c0 c008 	str.w	ip, [r0, #8]
   17e5e:	e763      	b.n	17d28 <d_substitution+0x10>
   17e60:	012b      	lsls	r3, r5, #4
   17e62:	00aa      	lsls	r2, r5, #2
   17e64:	6901      	ldr	r1, [r0, #16]
   17e66:	ebc2 0403 	rsb	r4, r2, r3
   17e6a:	1c6b      	adds	r3, r5, #1
   17e6c:	190a      	adds	r2, r1, r4
   17e6e:	6143      	str	r3, [r0, #20]
   17e70:	bf08      	it	eq
   17e72:	461d      	moveq	r5, r3
   17e74:	d0d8      	beq.n	17e28 <d_substitution+0x110>
   17e76:	f8c2 a004 	str.w	sl, [r2, #4]
   17e7a:	f8c2 8008 	str.w	r8, [r2, #8]
   17e7e:	2315      	movs	r3, #21
   17e80:	550b      	strb	r3, [r1, r4]
   17e82:	6945      	ldr	r5, [r0, #20]
   17e84:	6986      	ldr	r6, [r0, #24]
   17e86:	62c2      	str	r2, [r0, #44]
   17e88:	e7cf      	b.n	17e2a <d_substitution+0x112>
   17e8a:	f8dc 4004 	ldr.w	r4, [ip, #4]
   17e8e:	f8dc c008 	ldr.w	ip, [ip, #8]
   17e92:	e7d0      	b.n	17e36 <d_substitution+0x11e>
   17e94:	6945      	ldr	r5, [r0, #20]
   17e96:	6986      	ldr	r6, [r0, #24]
   17e98:	e7c7      	b.n	17e2a <d_substitution+0x112>
   17e9a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   17e9e:	b2db      	uxtb	r3, r3
   17ea0:	2b19      	cmp	r3, #25
   17ea2:	d982      	bls.n	17daa <d_substitution+0x92>
   17ea4:	e747      	b.n	17d36 <d_substitution+0x1e>
   17ea6:	46c0      	nop			(mov r8, r8)
   17ea8:	00022ad8 	.word	0x00022ad8

00017eac <d_append_char>:
   17eac:	b570      	push	{r4, r5, r6, lr}
   17eae:	460e      	mov	r6, r1
   17eb0:	f8d0 1104 	ldr.w	r1, [r0, #260]
   17eb4:	4605      	mov	r5, r0
   17eb6:	29ff      	cmp	r1, #255
   17eb8:	d008      	beq.n	17ecc <d_append_char+0x20>
   17eba:	eb05 0301 	add.w	r3, r5, r1
   17ebe:	1c4a      	adds	r2, r1, #1
   17ec0:	711e      	strb	r6, [r3, #4]
   17ec2:	f8c5 2104 	str.w	r2, [r5, #260]
   17ec6:	f885 6108 	strb.w	r6, [r5, #264]
   17eca:	bd70      	pop	{r4, r5, r6, pc}
   17ecc:	2400      	movs	r4, #0
   17ece:	f880 4103 	strb.w	r4, [r0, #259]
   17ed2:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17ed6:	3004      	adds	r0, #4
   17ed8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17edc:	4798      	blx	r3
   17ede:	f8c5 4104 	str.w	r4, [r5, #260]
   17ee2:	4621      	mov	r1, r4
   17ee4:	e7e9      	b.n	17eba <d_append_char+0xe>
   17ee6:	46c0      	nop			(mov r8, r8)

00017ee8 <d_source_name>:
   17ee8:	b570      	push	{r4, r5, r6, lr}
   17eea:	4604      	mov	r4, r0
   17eec:	f7ff fe4c 	bl	17b88 <d_number>
   17ef0:	2800      	cmp	r0, #0
   17ef2:	4605      	mov	r5, r0
   17ef4:	dd30      	ble.n	17f58 <d_source_name+0x70>
   17ef6:	68e6      	ldr	r6, [r4, #12]
   17ef8:	6863      	ldr	r3, [r4, #4]
   17efa:	1b9b      	subs	r3, r3, r6
   17efc:	4298      	cmp	r0, r3
   17efe:	dd02      	ble.n	17f06 <d_source_name+0x1e>
   17f00:	2000      	movs	r0, #0
   17f02:	62e0      	str	r0, [r4, #44]
   17f04:	bd70      	pop	{r4, r5, r6, pc}
   17f06:	68a3      	ldr	r3, [r4, #8]
   17f08:	eb06 0200 	add.w	r2, r6, r0
   17f0c:	f013 0f04 	tst.w	r3, #4	; 0x4
   17f10:	60e2      	str	r2, [r4, #12]
   17f12:	d004      	beq.n	17f1e <d_source_name+0x36>
   17f14:	5c33      	ldrb	r3, [r6, r0]
   17f16:	2b24      	cmp	r3, #36
   17f18:	d101      	bne.n	17f1e <d_source_name+0x36>
   17f1a:	1c53      	adds	r3, r2, #1
   17f1c:	60e3      	str	r3, [r4, #12]
   17f1e:	2d09      	cmp	r5, #9
   17f20:	dc1c      	bgt.n	17f5c <d_source_name+0x74>
   17f22:	6961      	ldr	r1, [r4, #20]
   17f24:	69a3      	ldr	r3, [r4, #24]
   17f26:	4299      	cmp	r1, r3
   17f28:	daea      	bge.n	17f00 <d_source_name+0x18>
   17f2a:	008a      	lsls	r2, r1, #2
   17f2c:	010b      	lsls	r3, r1, #4
   17f2e:	ebc2 0c03 	rsb	ip, r2, r3
   17f32:	6922      	ldr	r2, [r4, #16]
   17f34:	1c4b      	adds	r3, r1, #1
   17f36:	eb12 000c 	adds.w	r0, r2, ip
   17f3a:	6163      	str	r3, [r4, #20]
   17f3c:	bf14      	ite	ne
   17f3e:	2300      	movne	r3, #0
   17f40:	2301      	moveq	r3, #1
   17f42:	2e00      	cmp	r6, #0
   17f44:	bf08      	it	eq
   17f46:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17f4a:	2b00      	cmp	r3, #0
   17f4c:	d1d8      	bne.n	17f00 <d_source_name+0x18>
   17f4e:	f802 300c 	strb.w	r3, [r2, ip]
   17f52:	6046      	str	r6, [r0, #4]
   17f54:	6085      	str	r5, [r0, #8]
   17f56:	e7d4      	b.n	17f02 <d_source_name+0x1a>
   17f58:	2000      	movs	r0, #0
   17f5a:	e7d3      	b.n	17f04 <d_source_name+0x1c>
   17f5c:	4630      	mov	r0, r6
   17f5e:	4919      	ldr	r1, [pc, #100]	(17fc4 <d_source_name+0xdc>)
   17f60:	2208      	movs	r2, #8
   17f62:	f008 ff15 	bl	20d90 <memcmp>
   17f66:	2800      	cmp	r0, #0
   17f68:	d1db      	bne.n	17f22 <d_source_name+0x3a>
   17f6a:	7a32      	ldrb	r2, [r6, #8]
   17f6c:	f106 0108 	add.w	r1, r6, #8	; 0x8
   17f70:	2a5f      	cmp	r2, #95
   17f72:	bf14      	ite	ne
   17f74:	2300      	movne	r3, #0
   17f76:	2301      	moveq	r3, #1
   17f78:	2a2e      	cmp	r2, #46
   17f7a:	bf08      	it	eq
   17f7c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17f80:	b1e3      	cbz	r3, 17fbc <d_source_name+0xd4>
   17f82:	784b      	ldrb	r3, [r1, #1]
   17f84:	2b4e      	cmp	r3, #78
   17f86:	d1cc      	bne.n	17f22 <d_source_name+0x3a>
   17f88:	6b23      	ldr	r3, [r4, #48]
   17f8a:	6961      	ldr	r1, [r4, #20]
   17f8c:	3316      	adds	r3, #22
   17f8e:	1b5b      	subs	r3, r3, r5
   17f90:	6323      	str	r3, [r4, #48]
   17f92:	69a3      	ldr	r3, [r4, #24]
   17f94:	4299      	cmp	r1, r3
   17f96:	dab3      	bge.n	17f00 <d_source_name+0x18>
   17f98:	008b      	lsls	r3, r1, #2
   17f9a:	010a      	lsls	r2, r1, #4
   17f9c:	f8d4 c010 	ldr.w	ip, [r4, #16]
   17fa0:	1ad2      	subs	r2, r2, r3
   17fa2:	1c4b      	adds	r3, r1, #1
   17fa4:	eb1c 0002 	adds.w	r0, ip, r2
   17fa8:	6163      	str	r3, [r4, #20]
   17faa:	d0aa      	beq.n	17f02 <d_source_name+0x1a>
   17fac:	2300      	movs	r3, #0
   17fae:	f80c 3002 	strb.w	r3, [ip, r2]
   17fb2:	4a05      	ldr	r2, [pc, #20]	(17fc8 <d_source_name+0xe0>)
   17fb4:	3315      	adds	r3, #21
   17fb6:	6042      	str	r2, [r0, #4]
   17fb8:	6083      	str	r3, [r0, #8]
   17fba:	e7a2      	b.n	17f02 <d_source_name+0x1a>
   17fbc:	2a24      	cmp	r2, #36
   17fbe:	d1b0      	bne.n	17f22 <d_source_name+0x3a>
   17fc0:	e7df      	b.n	17f82 <d_source_name+0x9a>
   17fc2:	46c0      	nop			(mov r8, r8)
   17fc4:	00023220 	.word	0x00023220
   17fc8:	0002322c 	.word	0x0002322c

00017fcc <d_type>:
   17fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fce:	4605      	mov	r5, r0
   17fd0:	68c0      	ldr	r0, [r0, #12]
   17fd2:	b083      	sub	sp, #12
   17fd4:	7801      	ldrb	r1, [r0, #0]
   17fd6:	2956      	cmp	r1, #86
   17fd8:	bf14      	ite	ne
   17fda:	2300      	movne	r3, #0
   17fdc:	2301      	moveq	r3, #1
   17fde:	2972      	cmp	r1, #114
   17fe0:	bf08      	it	eq
   17fe2:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17fe6:	b90b      	cbnz	r3, 17fec <d_type+0x20>
   17fe8:	294b      	cmp	r1, #75
   17fea:	d11d      	bne.n	18028 <d_type+0x5c>
   17fec:	4628      	mov	r0, r5
   17fee:	a901      	add	r1, sp, #4
   17ff0:	2200      	movs	r2, #0
   17ff2:	f7ff fe17 	bl	17c24 <d_cv_qualifiers>
   17ff6:	4604      	mov	r4, r0
   17ff8:	b910      	cbnz	r0, 18000 <d_type+0x34>
   17ffa:	2000      	movs	r0, #0
   17ffc:	b003      	add	sp, #12
   17ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18000:	4628      	mov	r0, r5
   18002:	f7ff ffe3 	bl	17fcc <d_type>
   18006:	6020      	str	r0, [r4, #0]
   18008:	2800      	cmp	r0, #0
   1800a:	d0f6      	beq.n	17ffa <d_type+0x2e>
   1800c:	9901      	ldr	r1, [sp, #4]
   1800e:	2900      	cmp	r1, #0
   18010:	d0f3      	beq.n	17ffa <d_type+0x2e>
   18012:	6a2a      	ldr	r2, [r5, #32]
   18014:	6a6b      	ldr	r3, [r5, #36]
   18016:	429a      	cmp	r2, r3
   18018:	daef      	bge.n	17ffa <d_type+0x2e>
   1801a:	69eb      	ldr	r3, [r5, #28]
   1801c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   18020:	3201      	adds	r2, #1
   18022:	622a      	str	r2, [r5, #32]
   18024:	9801      	ldr	r0, [sp, #4]
   18026:	e7e9      	b.n	17ffc <d_type+0x30>
   18028:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1802c:	2b4a      	cmp	r3, #74
   1802e:	d8e4      	bhi.n	17ffa <d_type+0x2e>
   18030:	a201      	add	r2, pc, #4	(adr r2, 18038 <d_type+0x6c>)
   18032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   18036:	46c0      	nop			(mov r8, r8)
   18038:	000183d7 	.word	0x000183d7
   1803c:	000183d7 	.word	0x000183d7
   18040:	000183d7 	.word	0x000183d7
   18044:	000183d7 	.word	0x000183d7
   18048:	000183d7 	.word	0x000183d7
   1804c:	000183d7 	.word	0x000183d7
   18050:	000183d7 	.word	0x000183d7
   18054:	000183d7 	.word	0x000183d7
   18058:	000183d7 	.word	0x000183d7
   1805c:	000183d7 	.word	0x000183d7
   18060:	00017ffb 	.word	0x00017ffb
   18064:	00017ffb 	.word	0x00017ffb
   18068:	00017ffb 	.word	0x00017ffb
   1806c:	00017ffb 	.word	0x00017ffb
   18070:	00017ffb 	.word	0x00017ffb
   18074:	00017ffb 	.word	0x00017ffb
   18078:	00017ffb 	.word	0x00017ffb
   1807c:	00018365 	.word	0x00018365
   18080:	00017ffb 	.word	0x00017ffb
   18084:	0001834b 	.word	0x0001834b
   18088:	00017ffb 	.word	0x00017ffb
   1808c:	00017ffb 	.word	0x00017ffb
   18090:	00018327 	.word	0x00018327
   18094:	0001830d 	.word	0x0001830d
   18098:	00017ffb 	.word	0x00017ffb
   1809c:	00017ffb 	.word	0x00017ffb
   180a0:	00017ffb 	.word	0x00017ffb
   180a4:	00017ffb 	.word	0x00017ffb
   180a8:	00017ffb 	.word	0x00017ffb
   180ac:	000182e9 	.word	0x000182e9
   180b0:	000183d7 	.word	0x000183d7
   180b4:	000182cf 	.word	0x000182cf
   180b8:	000182b5 	.word	0x000182b5
   180bc:	00017ffb 	.word	0x00017ffb
   180c0:	0001829b 	.word	0x0001829b
   180c4:	0001824b 	.word	0x0001824b
   180c8:	00018209 	.word	0x00018209
   180cc:	000181e7 	.word	0x000181e7
   180d0:	00017ffb 	.word	0x00017ffb
   180d4:	00017ffb 	.word	0x00017ffb
   180d8:	00017ffb 	.word	0x00017ffb
   180dc:	00017ffb 	.word	0x00017ffb
   180e0:	000183d7 	.word	0x000183d7
   180e4:	00017ffb 	.word	0x00017ffb
   180e8:	00017ffb 	.word	0x00017ffb
   180ec:	00017ffb 	.word	0x00017ffb
   180f0:	00017ffb 	.word	0x00017ffb
   180f4:	00017ffb 	.word	0x00017ffb
   180f8:	00017ffb 	.word	0x00017ffb
   180fc:	0001819d 	.word	0x0001819d
   18100:	0001819d 	.word	0x0001819d
   18104:	0001819d 	.word	0x0001819d
   18108:	0001819d 	.word	0x0001819d
   1810c:	0001819d 	.word	0x0001819d
   18110:	0001819d 	.word	0x0001819d
   18114:	0001819d 	.word	0x0001819d
   18118:	0001819d 	.word	0x0001819d
   1811c:	0001819d 	.word	0x0001819d
   18120:	0001819d 	.word	0x0001819d
   18124:	00017ffb 	.word	0x00017ffb
   18128:	0001819d 	.word	0x0001819d
   1812c:	0001819d 	.word	0x0001819d
   18130:	0001819d 	.word	0x0001819d
   18134:	0001819d 	.word	0x0001819d
   18138:	00017ffb 	.word	0x00017ffb
   1813c:	00017ffb 	.word	0x00017ffb
   18140:	00017ffb 	.word	0x00017ffb
   18144:	0001819d 	.word	0x0001819d
   18148:	0001819d 	.word	0x0001819d
   1814c:	00018165 	.word	0x00018165
   18150:	0001819d 	.word	0x0001819d
   18154:	0001819d 	.word	0x0001819d
   18158:	0001819d 	.word	0x0001819d
   1815c:	0001819d 	.word	0x0001819d
   18160:	0001819d 	.word	0x0001819d
   18164:	1c43      	adds	r3, r0, #1
   18166:	60eb      	str	r3, [r5, #12]
   18168:	4628      	mov	r0, r5
   1816a:	f7ff febd 	bl	17ee8 <d_source_name>
   1816e:	2123      	movs	r1, #35
   18170:	4602      	mov	r2, r0
   18172:	2300      	movs	r3, #0
   18174:	4628      	mov	r0, r5
   18176:	f7ff fcb5 	bl	17ae4 <d_make_comp>
   1817a:	9001      	str	r0, [sp, #4]
   1817c:	9801      	ldr	r0, [sp, #4]
   1817e:	2800      	cmp	r0, #0
   18180:	f43f af3b 	beq.w	17ffa <d_type+0x2e>
   18184:	6a2a      	ldr	r2, [r5, #32]
   18186:	6a6b      	ldr	r3, [r5, #36]
   18188:	429a      	cmp	r2, r3
   1818a:	f6bf af36 	bge.w	17ffa <d_type+0x2e>
   1818e:	69eb      	ldr	r3, [r5, #28]
   18190:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   18194:	3201      	adds	r2, #1
   18196:	622a      	str	r2, [r5, #32]
   18198:	9801      	ldr	r0, [sp, #4]
   1819a:	e72f      	b.n	17ffc <d_type+0x30>
   1819c:	008b      	lsls	r3, r1, #2
   1819e:	4aaf      	ldr	r2, [pc, #700]	(1845c <d_type+0x490>)
   181a0:	0109      	lsls	r1, r1, #4
   181a2:	185b      	adds	r3, r3, r1
   181a4:	189c      	adds	r4, r3, r2
   181a6:	f000 811b 	beq.w	183e0 <d_type+0x414>
   181aa:	6969      	ldr	r1, [r5, #20]
   181ac:	69ab      	ldr	r3, [r5, #24]
   181ae:	4299      	cmp	r1, r3
   181b0:	f280 8116 	bge.w	183e0 <d_type+0x414>
   181b4:	008b      	lsls	r3, r1, #2
   181b6:	010a      	lsls	r2, r1, #4
   181b8:	f8d5 c010 	ldr.w	ip, [r5, #16]
   181bc:	1ad2      	subs	r2, r2, r3
   181be:	1c4b      	adds	r3, r1, #1
   181c0:	eb1c 0102 	adds.w	r1, ip, r2
   181c4:	616b      	str	r3, [r5, #20]
   181c6:	d004      	beq.n	181d2 <d_type+0x206>
   181c8:	604c      	str	r4, [r1, #4]
   181ca:	2322      	movs	r3, #34
   181cc:	68e8      	ldr	r0, [r5, #12]
   181ce:	f80c 3002 	strb.w	r3, [ip, r2]
   181d2:	9101      	str	r1, [sp, #4]
   181d4:	6849      	ldr	r1, [r1, #4]
   181d6:	6b2b      	ldr	r3, [r5, #48]
   181d8:	684a      	ldr	r2, [r1, #4]
   181da:	189b      	adds	r3, r3, r2
   181dc:	1c42      	adds	r2, r0, #1
   181de:	632b      	str	r3, [r5, #48]
   181e0:	60ea      	str	r2, [r5, #12]
   181e2:	9801      	ldr	r0, [sp, #4]
   181e4:	e70a      	b.n	17ffc <d_type+0x30>
   181e6:	1c43      	adds	r3, r0, #1
   181e8:	60eb      	str	r3, [r5, #12]
   181ea:	4628      	mov	r0, r5
   181ec:	f7ff fe7c 	bl	17ee8 <d_source_name>
   181f0:	9001      	str	r0, [sp, #4]
   181f2:	4628      	mov	r0, r5
   181f4:	f7ff feea 	bl	17fcc <d_type>
   181f8:	211c      	movs	r1, #28
   181fa:	4602      	mov	r2, r0
   181fc:	9b01      	ldr	r3, [sp, #4]
   181fe:	4628      	mov	r0, r5
   18200:	f7ff fc70 	bl	17ae4 <d_make_comp>
   18204:	9001      	str	r0, [sp, #4]
   18206:	e7b9      	b.n	1817c <d_type+0x1b0>
   18208:	4628      	mov	r0, r5
   1820a:	f7ff fd51 	bl	17cb0 <d_template_param>
   1820e:	68eb      	ldr	r3, [r5, #12]
   18210:	9001      	str	r0, [sp, #4]
   18212:	781a      	ldrb	r2, [r3, #0]
   18214:	2a49      	cmp	r2, #73
   18216:	d1b1      	bne.n	1817c <d_type+0x1b0>
   18218:	2800      	cmp	r0, #0
   1821a:	f43f aeee 	beq.w	17ffa <d_type+0x2e>
   1821e:	6a2a      	ldr	r2, [r5, #32]
   18220:	6a6b      	ldr	r3, [r5, #36]
   18222:	429a      	cmp	r2, r3
   18224:	f6bf aee9 	bge.w	17ffa <d_type+0x2e>
   18228:	69eb      	ldr	r3, [r5, #28]
   1822a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   1822e:	3201      	adds	r2, #1
   18230:	622a      	str	r2, [r5, #32]
   18232:	4628      	mov	r0, r5
   18234:	9c01      	ldr	r4, [sp, #4]
   18236:	f000 fe45 	bl	18ec4 <d_template_args>
   1823a:	2104      	movs	r1, #4
   1823c:	4603      	mov	r3, r0
   1823e:	4622      	mov	r2, r4
   18240:	4628      	mov	r0, r5
   18242:	f7ff fc4f 	bl	17ae4 <d_make_comp>
   18246:	9001      	str	r0, [sp, #4]
   18248:	e798      	b.n	1817c <d_type+0x1b0>
   1824a:	7841      	ldrb	r1, [r0, #1]
   1824c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   18250:	b2d2      	uxtb	r2, r2
   18252:	295f      	cmp	r1, #95
   18254:	bf14      	ite	ne
   18256:	2300      	movne	r3, #0
   18258:	2301      	moveq	r3, #1
   1825a:	2a09      	cmp	r2, #9
   1825c:	bf98      	it	ls
   1825e:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   18262:	b92b      	cbnz	r3, 18270 <d_type+0x2a4>
   18264:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   18268:	b2db      	uxtb	r3, r3
   1826a:	2b19      	cmp	r3, #25
   1826c:	f200 80cf 	bhi.w	1840e <d_type+0x442>
   18270:	2100      	movs	r1, #0
   18272:	4628      	mov	r0, r5
   18274:	f7ff fd50 	bl	17d18 <d_substitution>
   18278:	68eb      	ldr	r3, [r5, #12]
   1827a:	9001      	str	r0, [sp, #4]
   1827c:	781a      	ldrb	r2, [r3, #0]
   1827e:	4604      	mov	r4, r0
   18280:	2a49      	cmp	r2, #73
   18282:	d189      	bne.n	18198 <d_type+0x1cc>
   18284:	4628      	mov	r0, r5
   18286:	f000 fe1d 	bl	18ec4 <d_template_args>
   1828a:	2104      	movs	r1, #4
   1828c:	4603      	mov	r3, r0
   1828e:	4622      	mov	r2, r4
   18290:	4628      	mov	r0, r5
   18292:	f7ff fc27 	bl	17ae4 <d_make_comp>
   18296:	9001      	str	r0, [sp, #4]
   18298:	e770      	b.n	1817c <d_type+0x1b0>
   1829a:	1c43      	adds	r3, r0, #1
   1829c:	60eb      	str	r3, [r5, #12]
   1829e:	4628      	mov	r0, r5
   182a0:	f7ff fe94 	bl	17fcc <d_type>
   182a4:	211e      	movs	r1, #30
   182a6:	4602      	mov	r2, r0
   182a8:	2300      	movs	r3, #0
   182aa:	4628      	mov	r0, r5
   182ac:	f7ff fc1a 	bl	17ae4 <d_make_comp>
   182b0:	9001      	str	r0, [sp, #4]
   182b2:	e763      	b.n	1817c <d_type+0x1b0>
   182b4:	1c43      	adds	r3, r0, #1
   182b6:	60eb      	str	r3, [r5, #12]
   182b8:	4628      	mov	r0, r5
   182ba:	f7ff fe87 	bl	17fcc <d_type>
   182be:	211d      	movs	r1, #29
   182c0:	4602      	mov	r2, r0
   182c2:	2300      	movs	r3, #0
   182c4:	4628      	mov	r0, r5
   182c6:	f7ff fc0d 	bl	17ae4 <d_make_comp>
   182ca:	9001      	str	r0, [sp, #4]
   182cc:	e756      	b.n	1817c <d_type+0x1b0>
   182ce:	1c43      	adds	r3, r0, #1
   182d0:	60eb      	str	r3, [r5, #12]
   182d2:	4628      	mov	r0, r5
   182d4:	f7ff fe7a 	bl	17fcc <d_type>
   182d8:	211f      	movs	r1, #31
   182da:	4602      	mov	r2, r0
   182dc:	2300      	movs	r3, #0
   182de:	4628      	mov	r0, r5
   182e0:	f7ff fc00 	bl	17ae4 <d_make_comp>
   182e4:	9001      	str	r0, [sp, #4]
   182e6:	e749      	b.n	1817c <d_type+0x1b0>
   182e8:	1c43      	adds	r3, r0, #1
   182ea:	60eb      	str	r3, [r5, #12]
   182ec:	4628      	mov	r0, r5
   182ee:	f7ff fe6d 	bl	17fcc <d_type>
   182f2:	4669      	mov	r1, sp
   182f4:	4607      	mov	r7, r0
   182f6:	2201      	movs	r2, #1
   182f8:	4628      	mov	r0, r5
   182fa:	f7ff fc93 	bl	17c24 <d_cv_qualifiers>
   182fe:	466e      	mov	r6, sp
   18300:	4604      	mov	r4, r0
   18302:	2800      	cmp	r0, #0
   18304:	d16e      	bne.n	183e4 <d_type+0x418>
   18306:	2000      	movs	r0, #0
   18308:	9001      	str	r0, [sp, #4]
   1830a:	e737      	b.n	1817c <d_type+0x1b0>
   1830c:	1c43      	adds	r3, r0, #1
   1830e:	60eb      	str	r3, [r5, #12]
   18310:	4628      	mov	r0, r5
   18312:	f7ff fe5b 	bl	17fcc <d_type>
   18316:	2121      	movs	r1, #33
   18318:	4602      	mov	r2, r0
   1831a:	2300      	movs	r3, #0
   1831c:	4628      	mov	r0, r5
   1831e:	f7ff fbe1 	bl	17ae4 <d_make_comp>
   18322:	9001      	str	r0, [sp, #4]
   18324:	e72a      	b.n	1817c <d_type+0x1b0>
   18326:	1c42      	adds	r2, r0, #1
   18328:	60ea      	str	r2, [r5, #12]
   1832a:	7843      	ldrb	r3, [r0, #1]
   1832c:	2b59      	cmp	r3, #89
   1832e:	f000 8083 	beq.w	18438 <d_type+0x46c>
   18332:	2101      	movs	r1, #1
   18334:	4628      	mov	r0, r5
   18336:	f000 f9b7 	bl	186a8 <d_bare_function_type>
   1833a:	68ea      	ldr	r2, [r5, #12]
   1833c:	7813      	ldrb	r3, [r2, #0]
   1833e:	2b45      	cmp	r3, #69
   18340:	d1e1      	bne.n	18306 <d_type+0x33a>
   18342:	1c53      	adds	r3, r2, #1
   18344:	60eb      	str	r3, [r5, #12]
   18346:	9001      	str	r0, [sp, #4]
   18348:	e718      	b.n	1817c <d_type+0x1b0>
   1834a:	1c43      	adds	r3, r0, #1
   1834c:	60eb      	str	r3, [r5, #12]
   1834e:	4628      	mov	r0, r5
   18350:	f7ff fe3c 	bl	17fcc <d_type>
   18354:	2120      	movs	r1, #32
   18356:	4602      	mov	r2, r0
   18358:	2300      	movs	r3, #0
   1835a:	4628      	mov	r0, r5
   1835c:	f7ff fbc2 	bl	17ae4 <d_make_comp>
   18360:	9001      	str	r0, [sp, #4]
   18362:	e70b      	b.n	1817c <d_type+0x1b0>
   18364:	1c41      	adds	r1, r0, #1
   18366:	60e9      	str	r1, [r5, #12]
   18368:	7842      	ldrb	r2, [r0, #1]
   1836a:	2a5f      	cmp	r2, #95
   1836c:	d04d      	beq.n	1840a <d_type+0x43e>
   1836e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   18372:	b2db      	uxtb	r3, r3
   18374:	2b09      	cmp	r3, #9
   18376:	d857      	bhi.n	18428 <d_type+0x45c>
   18378:	4608      	mov	r0, r1
   1837a:	3001      	adds	r0, #1
   1837c:	60e8      	str	r0, [r5, #12]
   1837e:	7803      	ldrb	r3, [r0, #0]
   18380:	3b30      	subs	r3, #48
   18382:	b2db      	uxtb	r3, r3
   18384:	2b09      	cmp	r3, #9
   18386:	d9f8      	bls.n	1837a <d_type+0x3ae>
   18388:	f8d5 c014 	ldr.w	ip, [r5, #20]
   1838c:	69ab      	ldr	r3, [r5, #24]
   1838e:	459c      	cmp	ip, r3
   18390:	dab9      	bge.n	18306 <d_type+0x33a>
   18392:	ea4f 038c 	mov.w	r3, ip, lsl #2
   18396:	ea4f 120c 	mov.w	r2, ip, lsl #4
   1839a:	692c      	ldr	r4, [r5, #16]
   1839c:	1ad2      	subs	r2, r2, r3
   1839e:	18a6      	adds	r6, r4, r2
   183a0:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   183a4:	616b      	str	r3, [r5, #20]
   183a6:	d0ae      	beq.n	18306 <d_type+0x33a>
   183a8:	1a40      	subs	r0, r0, r1
   183aa:	d0ac      	beq.n	18306 <d_type+0x33a>
   183ac:	2300      	movs	r3, #0
   183ae:	54a3      	strb	r3, [r4, r2]
   183b0:	6071      	str	r1, [r6, #4]
   183b2:	60b0      	str	r0, [r6, #8]
   183b4:	68e9      	ldr	r1, [r5, #12]
   183b6:	780b      	ldrb	r3, [r1, #0]
   183b8:	2b5f      	cmp	r3, #95
   183ba:	d1a4      	bne.n	18306 <d_type+0x33a>
   183bc:	1c4b      	adds	r3, r1, #1
   183be:	60eb      	str	r3, [r5, #12]
   183c0:	4628      	mov	r0, r5
   183c2:	f7ff fe03 	bl	17fcc <d_type>
   183c6:	2125      	movs	r1, #37
   183c8:	4603      	mov	r3, r0
   183ca:	4632      	mov	r2, r6
   183cc:	4628      	mov	r0, r5
   183ce:	f7ff fb89 	bl	17ae4 <d_make_comp>
   183d2:	9001      	str	r0, [sp, #4]
   183d4:	e6d2      	b.n	1817c <d_type+0x1b0>
   183d6:	4628      	mov	r0, r5
   183d8:	f000 fdb6 	bl	18f48 <d_name>
   183dc:	9001      	str	r0, [sp, #4]
   183de:	e6cd      	b.n	1817c <d_type+0x1b0>
   183e0:	2100      	movs	r1, #0
   183e2:	e6f6      	b.n	181d2 <d_type+0x206>
   183e4:	4628      	mov	r0, r5
   183e6:	f7ff fdf1 	bl	17fcc <d_type>
   183ea:	6020      	str	r0, [r4, #0]
   183ec:	2800      	cmp	r0, #0
   183ee:	d08a      	beq.n	18306 <d_type+0x33a>
   183f0:	456c      	cmp	r4, sp
   183f2:	d002      	beq.n	183fa <d_type+0x42e>
   183f4:	7803      	ldrb	r3, [r0, #0]
   183f6:	2b24      	cmp	r3, #36
   183f8:	d121      	bne.n	1843e <d_type+0x472>
   183fa:	4628      	mov	r0, r5
   183fc:	2126      	movs	r1, #38
   183fe:	463a      	mov	r2, r7
   18400:	9b00      	ldr	r3, [sp, #0]
   18402:	f7ff fb6f 	bl	17ae4 <d_make_comp>
   18406:	9001      	str	r0, [sp, #4]
   18408:	e6b8      	b.n	1817c <d_type+0x1b0>
   1840a:	2600      	movs	r6, #0
   1840c:	e7d6      	b.n	183bc <d_type+0x3f0>
   1840e:	4628      	mov	r0, r5
   18410:	f000 fd9a 	bl	18f48 <d_name>
   18414:	2800      	cmp	r0, #0
   18416:	f43f adf0 	beq.w	17ffa <d_type+0x2e>
   1841a:	7803      	ldrb	r3, [r0, #0]
   1841c:	9001      	str	r0, [sp, #4]
   1841e:	2b15      	cmp	r3, #21
   18420:	f47f aeb0 	bne.w	18184 <d_type+0x1b8>
   18424:	9801      	ldr	r0, [sp, #4]
   18426:	e5e9      	b.n	17ffc <d_type+0x30>
   18428:	4628      	mov	r0, r5
   1842a:	f000 fca9 	bl	18d80 <d_expression>
   1842e:	4606      	mov	r6, r0
   18430:	2800      	cmp	r0, #0
   18432:	d1bf      	bne.n	183b4 <d_type+0x3e8>
   18434:	2000      	movs	r0, #0
   18436:	e767      	b.n	18308 <d_type+0x33c>
   18438:	1c53      	adds	r3, r2, #1
   1843a:	60eb      	str	r3, [r5, #12]
   1843c:	e779      	b.n	18332 <d_type+0x366>
   1843e:	9900      	ldr	r1, [sp, #0]
   18440:	2900      	cmp	r1, #0
   18442:	f43f af60 	beq.w	18306 <d_type+0x33a>
   18446:	6a2a      	ldr	r2, [r5, #32]
   18448:	6a6b      	ldr	r3, [r5, #36]
   1844a:	429a      	cmp	r2, r3
   1844c:	f6bf af5b 	bge.w	18306 <d_type+0x33a>
   18450:	69eb      	ldr	r3, [r5, #28]
   18452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   18456:	3201      	adds	r2, #1
   18458:	622a      	str	r2, [r5, #32]
   1845a:	e7ce      	b.n	183fa <d_type+0x42e>
   1845c:	00021d58 	.word	0x00021d58

00018460 <d_operator_name>:
   18460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18464:	68c2      	ldr	r2, [r0, #12]
   18466:	4606      	mov	r6, r0
   18468:	7814      	ldrb	r4, [r2, #0]
   1846a:	2c00      	cmp	r4, #0
   1846c:	d02a      	beq.n	184c4 <d_operator_name+0x64>
   1846e:	1c53      	adds	r3, r2, #1
   18470:	60c3      	str	r3, [r0, #12]
   18472:	7855      	ldrb	r5, [r2, #1]
   18474:	b10d      	cbz	r5, 1847a <d_operator_name+0x1a>
   18476:	3301      	adds	r3, #1
   18478:	60c3      	str	r3, [r0, #12]
   1847a:	2c76      	cmp	r4, #118
   1847c:	d143      	bne.n	18506 <d_operator_name+0xa6>
   1847e:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
   18482:	b2fb      	uxtb	r3, r7
   18484:	2b09      	cmp	r3, #9
   18486:	d81e      	bhi.n	184c6 <d_operator_name+0x66>
   18488:	4630      	mov	r0, r6
   1848a:	f7ff fd2d 	bl	17ee8 <d_source_name>
   1848e:	6971      	ldr	r1, [r6, #20]
   18490:	69b3      	ldr	r3, [r6, #24]
   18492:	4604      	mov	r4, r0
   18494:	4299      	cmp	r1, r3
   18496:	da2f      	bge.n	184f8 <d_operator_name+0x98>
   18498:	008a      	lsls	r2, r1, #2
   1849a:	010b      	lsls	r3, r1, #4
   1849c:	ebc2 0c03 	rsb	ip, r2, r3
   184a0:	6932      	ldr	r2, [r6, #16]
   184a2:	1c4b      	adds	r3, r1, #1
   184a4:	eb12 000c 	adds.w	r0, r2, ip
   184a8:	6173      	str	r3, [r6, #20]
   184aa:	bf14      	ite	ne
   184ac:	2300      	movne	r3, #0
   184ae:	2301      	moveq	r3, #1
   184b0:	ea53 73d7 	orrs.w	r3, r3, r7, lsr #31
   184b4:	d120      	bne.n	184f8 <d_operator_name+0x98>
   184b6:	b1fc      	cbz	r4, 184f8 <d_operator_name+0x98>
   184b8:	232a      	movs	r3, #42
   184ba:	f802 300c 	strb.w	r3, [r2, ip]
   184be:	6047      	str	r7, [r0, #4]
   184c0:	6084      	str	r4, [r0, #8]
   184c2:	e01a      	b.n	184fa <d_operator_name+0x9a>
   184c4:	4625      	mov	r5, r4
   184c6:	4f24      	ldr	r7, [pc, #144]	(18558 <d_operator_name+0xf8>)
   184c8:	2000      	movs	r0, #0
   184ca:	f04f 0c31 	mov.w	ip, #49	; 0x31
   184ce:	ebc0 030c 	rsb	r3, r0, ip
   184d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   184d6:	eb00 0163 	add.w	r1, r0, r3, asr #1
   184da:	010a      	lsls	r2, r1, #4
   184dc:	58bb      	ldr	r3, [r7, r2]
   184de:	eb07 0802 	add.w	r8, r7, r2
   184e2:	781a      	ldrb	r2, [r3, #0]
   184e4:	4294      	cmp	r4, r2
   184e6:	d10a      	bne.n	184fe <d_operator_name+0x9e>
   184e8:	785b      	ldrb	r3, [r3, #1]
   184ea:	429d      	cmp	r5, r3
   184ec:	d020      	beq.n	18530 <d_operator_name+0xd0>
   184ee:	42ab      	cmp	r3, r5
   184f0:	d907      	bls.n	18502 <d_operator_name+0xa2>
   184f2:	468c      	mov	ip, r1
   184f4:	4560      	cmp	r0, ip
   184f6:	d1ea      	bne.n	184ce <d_operator_name+0x6e>
   184f8:	2000      	movs	r0, #0
   184fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   184fe:	42a2      	cmp	r2, r4
   18500:	d8f7      	bhi.n	184f2 <d_operator_name+0x92>
   18502:	1c48      	adds	r0, r1, #1
   18504:	e7f6      	b.n	184f4 <d_operator_name+0x94>
   18506:	2c63      	cmp	r4, #99
   18508:	bf14      	ite	ne
   1850a:	2300      	movne	r3, #0
   1850c:	2301      	moveq	r3, #1
   1850e:	2d76      	cmp	r5, #118
   18510:	bf14      	ite	ne
   18512:	2300      	movne	r3, #0
   18514:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   18518:	2b00      	cmp	r3, #0
   1851a:	d0d4      	beq.n	184c6 <d_operator_name+0x66>
   1851c:	4630      	mov	r0, r6
   1851e:	f7ff fd55 	bl	17fcc <d_type>
   18522:	212b      	movs	r1, #43
   18524:	4602      	mov	r2, r0
   18526:	2300      	movs	r3, #0
   18528:	4630      	mov	r0, r6
   1852a:	f7ff fadb 	bl	17ae4 <d_make_comp>
   1852e:	e7e4      	b.n	184fa <d_operator_name+0x9a>
   18530:	6971      	ldr	r1, [r6, #20]
   18532:	69b3      	ldr	r3, [r6, #24]
   18534:	4299      	cmp	r1, r3
   18536:	dadf      	bge.n	184f8 <d_operator_name+0x98>
   18538:	008b      	lsls	r3, r1, #2
   1853a:	010a      	lsls	r2, r1, #4
   1853c:	f8d6 c010 	ldr.w	ip, [r6, #16]
   18540:	1ad2      	subs	r2, r2, r3
   18542:	1c4b      	adds	r3, r1, #1
   18544:	eb1c 0002 	adds.w	r0, ip, r2
   18548:	6173      	str	r3, [r6, #20]
   1854a:	d0d6      	beq.n	184fa <d_operator_name+0x9a>
   1854c:	2329      	movs	r3, #41
   1854e:	f80c 3002 	strb.w	r3, [ip, r2]
   18552:	f8c0 8004 	str.w	r8, [r0, #4]
   18556:	e7d0      	b.n	184fa <d_operator_name+0x9a>
   18558:	000226f4 	.word	0x000226f4

0001855c <d_unqualified_name>:
   1855c:	b570      	push	{r4, r5, r6, lr}
   1855e:	68c1      	ldr	r1, [r0, #12]
   18560:	4604      	mov	r4, r0
   18562:	780a      	ldrb	r2, [r1, #0]
   18564:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   18568:	b2db      	uxtb	r3, r3
   1856a:	2b09      	cmp	r3, #9
   1856c:	d927      	bls.n	185be <d_unqualified_name+0x62>
   1856e:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   18572:	b2db      	uxtb	r3, r3
   18574:	2b19      	cmp	r3, #25
   18576:	d914      	bls.n	185a2 <d_unqualified_name+0x46>
   18578:	f1a2 0343 	sub.w	r3, r2, #67	; 0x43
   1857c:	b2db      	uxtb	r3, r3
   1857e:	2b01      	cmp	r3, #1
   18580:	d870      	bhi.n	18664 <d_unqualified_name+0x108>
   18582:	6ac5      	ldr	r5, [r0, #44]
   18584:	b13d      	cbz	r5, 18596 <d_unqualified_name+0x3a>
   18586:	782b      	ldrb	r3, [r5, #0]
   18588:	2b00      	cmp	r3, #0
   1858a:	d11b      	bne.n	185c4 <d_unqualified_name+0x68>
   1858c:	68aa      	ldr	r2, [r5, #8]
   1858e:	6b23      	ldr	r3, [r4, #48]
   18590:	189b      	adds	r3, r3, r2
   18592:	6323      	str	r3, [r4, #48]
   18594:	780a      	ldrb	r2, [r1, #0]
   18596:	2a43      	cmp	r2, #67
   18598:	d018      	beq.n	185cc <d_unqualified_name+0x70>
   1859a:	2a44      	cmp	r2, #68
   1859c:	d03c      	beq.n	18618 <d_unqualified_name+0xbc>
   1859e:	2000      	movs	r0, #0
   185a0:	bd70      	pop	{r4, r5, r6, pc}
   185a2:	f7ff ff5d 	bl	18460 <d_operator_name>
   185a6:	2800      	cmp	r0, #0
   185a8:	d0fa      	beq.n	185a0 <d_unqualified_name+0x44>
   185aa:	7803      	ldrb	r3, [r0, #0]
   185ac:	2b29      	cmp	r3, #41
   185ae:	d1f7      	bne.n	185a0 <d_unqualified_name+0x44>
   185b0:	6843      	ldr	r3, [r0, #4]
   185b2:	6b22      	ldr	r2, [r4, #48]
   185b4:	6899      	ldr	r1, [r3, #8]
   185b6:	1852      	adds	r2, r2, r1
   185b8:	3207      	adds	r2, #7
   185ba:	6322      	str	r2, [r4, #48]
   185bc:	e7f0      	b.n	185a0 <d_unqualified_name+0x44>
   185be:	f7ff fc93 	bl	17ee8 <d_source_name>
   185c2:	e7ed      	b.n	185a0 <d_unqualified_name+0x44>
   185c4:	2b15      	cmp	r3, #21
   185c6:	d0e1      	beq.n	1858c <d_unqualified_name+0x30>
   185c8:	2a43      	cmp	r2, #67
   185ca:	d1e6      	bne.n	1859a <d_unqualified_name+0x3e>
   185cc:	784b      	ldrb	r3, [r1, #1]
   185ce:	2b32      	cmp	r3, #50
   185d0:	d05d      	beq.n	1868e <d_unqualified_name+0x132>
   185d2:	2b33      	cmp	r3, #51
   185d4:	d059      	beq.n	1868a <d_unqualified_name+0x12e>
   185d6:	2b31      	cmp	r3, #49
   185d8:	d1e1      	bne.n	1859e <d_unqualified_name+0x42>
   185da:	2601      	movs	r6, #1
   185dc:	1c8b      	adds	r3, r1, #2
   185de:	60e3      	str	r3, [r4, #12]
   185e0:	6961      	ldr	r1, [r4, #20]
   185e2:	69a3      	ldr	r3, [r4, #24]
   185e4:	4299      	cmp	r1, r3
   185e6:	dada      	bge.n	1859e <d_unqualified_name+0x42>
   185e8:	008a      	lsls	r2, r1, #2
   185ea:	010b      	lsls	r3, r1, #4
   185ec:	ebc2 0c03 	rsb	ip, r2, r3
   185f0:	6922      	ldr	r2, [r4, #16]
   185f2:	1c4b      	adds	r3, r1, #1
   185f4:	eb12 000c 	adds.w	r0, r2, ip
   185f8:	6163      	str	r3, [r4, #20]
   185fa:	bf14      	ite	ne
   185fc:	2300      	movne	r3, #0
   185fe:	2301      	moveq	r3, #1
   18600:	2d00      	cmp	r5, #0
   18602:	bf08      	it	eq
   18604:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   18608:	2b00      	cmp	r3, #0
   1860a:	d1c8      	bne.n	1859e <d_unqualified_name+0x42>
   1860c:	3306      	adds	r3, #6
   1860e:	f802 300c 	strb.w	r3, [r2, ip]
   18612:	7106      	strb	r6, [r0, #4]
   18614:	6085      	str	r5, [r0, #8]
   18616:	e7c3      	b.n	185a0 <d_unqualified_name+0x44>
   18618:	784b      	ldrb	r3, [r1, #1]
   1861a:	2b31      	cmp	r3, #49
   1861c:	d033      	beq.n	18686 <d_unqualified_name+0x12a>
   1861e:	2b32      	cmp	r3, #50
   18620:	d02f      	beq.n	18682 <d_unqualified_name+0x126>
   18622:	2b30      	cmp	r3, #48
   18624:	d1bb      	bne.n	1859e <d_unqualified_name+0x42>
   18626:	2601      	movs	r6, #1
   18628:	1c8b      	adds	r3, r1, #2
   1862a:	60e3      	str	r3, [r4, #12]
   1862c:	6961      	ldr	r1, [r4, #20]
   1862e:	69a3      	ldr	r3, [r4, #24]
   18630:	4299      	cmp	r1, r3
   18632:	dab4      	bge.n	1859e <d_unqualified_name+0x42>
   18634:	008a      	lsls	r2, r1, #2
   18636:	010b      	lsls	r3, r1, #4
   18638:	ebc2 0c03 	rsb	ip, r2, r3
   1863c:	6922      	ldr	r2, [r4, #16]
   1863e:	1c4b      	adds	r3, r1, #1
   18640:	eb12 000c 	adds.w	r0, r2, ip
   18644:	6163      	str	r3, [r4, #20]
   18646:	bf14      	ite	ne
   18648:	2300      	movne	r3, #0
   1864a:	2301      	moveq	r3, #1
   1864c:	2d00      	cmp	r5, #0
   1864e:	bf08      	it	eq
   18650:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   18654:	2b00      	cmp	r3, #0
   18656:	d1a2      	bne.n	1859e <d_unqualified_name+0x42>
   18658:	3307      	adds	r3, #7
   1865a:	f802 300c 	strb.w	r3, [r2, ip]
   1865e:	7106      	strb	r6, [r0, #4]
   18660:	6085      	str	r5, [r0, #8]
   18662:	e79d      	b.n	185a0 <d_unqualified_name+0x44>
   18664:	2a4c      	cmp	r2, #76
   18666:	d19a      	bne.n	1859e <d_unqualified_name+0x42>
   18668:	1c4b      	adds	r3, r1, #1
   1866a:	60c3      	str	r3, [r0, #12]
   1866c:	f7ff fc3c 	bl	17ee8 <d_source_name>
   18670:	4605      	mov	r5, r0
   18672:	2800      	cmp	r0, #0
   18674:	d093      	beq.n	1859e <d_unqualified_name+0x42>
   18676:	68e2      	ldr	r2, [r4, #12]
   18678:	7813      	ldrb	r3, [r2, #0]
   1867a:	2b5f      	cmp	r3, #95
   1867c:	d009      	beq.n	18692 <d_unqualified_name+0x136>
   1867e:	4628      	mov	r0, r5
   18680:	e78e      	b.n	185a0 <d_unqualified_name+0x44>
   18682:	2603      	movs	r6, #3
   18684:	e7d0      	b.n	18628 <d_unqualified_name+0xcc>
   18686:	2602      	movs	r6, #2
   18688:	e7ce      	b.n	18628 <d_unqualified_name+0xcc>
   1868a:	2603      	movs	r6, #3
   1868c:	e7a6      	b.n	185dc <d_unqualified_name+0x80>
   1868e:	2602      	movs	r6, #2
   18690:	e7a4      	b.n	185dc <d_unqualified_name+0x80>
   18692:	1c53      	adds	r3, r2, #1
   18694:	60e3      	str	r3, [r4, #12]
   18696:	4620      	mov	r0, r4
   18698:	f7ff fa76 	bl	17b88 <d_number>
   1869c:	2800      	cmp	r0, #0
   1869e:	f6ff af7e 	blt.w	1859e <d_unqualified_name+0x42>
   186a2:	4628      	mov	r0, r5
   186a4:	e77c      	b.n	185a0 <d_unqualified_name+0x44>
   186a6:	46c0      	nop			(mov r8, r8)

000186a8 <d_bare_function_type>:
   186a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186ac:	460e      	mov	r6, r1
   186ae:	68c1      	ldr	r1, [r0, #12]
   186b0:	b082      	sub	sp, #8
   186b2:	780b      	ldrb	r3, [r1, #0]
   186b4:	4605      	mov	r5, r0
   186b6:	2b4a      	cmp	r3, #74
   186b8:	d035      	beq.n	18726 <d_bare_function_type+0x7e>
   186ba:	2300      	movs	r3, #0
   186bc:	af02      	add	r7, sp, #8
   186be:	f847 3d04 	str.w	r3, [r7, #-4]!
   186c2:	4698      	mov	r8, r3
   186c4:	e002      	b.n	186cc <d_bare_function_type+0x24>
   186c6:	68e9      	ldr	r1, [r5, #12]
   186c8:	4626      	mov	r6, r4
   186ca:	4680      	mov	r8, r0
   186cc:	780a      	ldrb	r2, [r1, #0]
   186ce:	2a45      	cmp	r2, #69
   186d0:	bf14      	ite	ne
   186d2:	2300      	movne	r3, #0
   186d4:	2301      	moveq	r3, #1
   186d6:	2a00      	cmp	r2, #0
   186d8:	bf14      	ite	ne
   186da:	461c      	movne	r4, r3
   186dc:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   186e0:	b9ac      	cbnz	r4, 1870e <d_bare_function_type+0x66>
   186e2:	4628      	mov	r0, r5
   186e4:	f7ff fc72 	bl	17fcc <d_type>
   186e8:	4602      	mov	r2, r0
   186ea:	b160      	cbz	r0, 18706 <d_bare_function_type+0x5e>
   186ec:	2e00      	cmp	r6, #0
   186ee:	d1ea      	bne.n	186c6 <d_bare_function_type+0x1e>
   186f0:	4628      	mov	r0, r5
   186f2:	2127      	movs	r1, #39
   186f4:	4633      	mov	r3, r6
   186f6:	f7ff f9f5 	bl	17ae4 <d_make_comp>
   186fa:	6038      	str	r0, [r7, #0]
   186fc:	b118      	cbz	r0, 18706 <d_bare_function_type+0x5e>
   186fe:	f100 0708 	add.w	r7, r0, #8	; 0x8
   18702:	68e9      	ldr	r1, [r5, #12]
   18704:	e7e2      	b.n	186cc <d_bare_function_type+0x24>
   18706:	2000      	movs	r0, #0
   18708:	b002      	add	sp, #8
   1870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1870e:	9c01      	ldr	r4, [sp, #4]
   18710:	2c00      	cmp	r4, #0
   18712:	d0f8      	beq.n	18706 <d_bare_function_type+0x5e>
   18714:	68a1      	ldr	r1, [r4, #8]
   18716:	b159      	cbz	r1, 18730 <d_bare_function_type+0x88>
   18718:	4628      	mov	r0, r5
   1871a:	2124      	movs	r1, #36
   1871c:	4642      	mov	r2, r8
   1871e:	4623      	mov	r3, r4
   18720:	f7ff f9e0 	bl	17ae4 <d_make_comp>
   18724:	e7f0      	b.n	18708 <d_bare_function_type+0x60>
   18726:	1c4b      	adds	r3, r1, #1
   18728:	60c3      	str	r3, [r0, #12]
   1872a:	2601      	movs	r6, #1
   1872c:	4619      	mov	r1, r3
   1872e:	e7c4      	b.n	186ba <d_bare_function_type+0x12>
   18730:	6862      	ldr	r2, [r4, #4]
   18732:	7813      	ldrb	r3, [r2, #0]
   18734:	2b22      	cmp	r3, #34
   18736:	d1ef      	bne.n	18718 <d_bare_function_type+0x70>
   18738:	6852      	ldr	r2, [r2, #4]
   1873a:	7c13      	ldrb	r3, [r2, #16]
   1873c:	2b09      	cmp	r3, #9
   1873e:	d1eb      	bne.n	18718 <d_bare_function_type+0x70>
   18740:	6b2b      	ldr	r3, [r5, #48]
   18742:	6852      	ldr	r2, [r2, #4]
   18744:	9101      	str	r1, [sp, #4]
   18746:	1a9b      	subs	r3, r3, r2
   18748:	632b      	str	r3, [r5, #48]
   1874a:	460c      	mov	r4, r1
   1874c:	e7e4      	b.n	18718 <d_bare_function_type+0x70>
   1874e:	46c0      	nop			(mov r8, r8)

00018750 <d_encoding>:
   18750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18754:	460d      	mov	r5, r1
   18756:	68c1      	ldr	r1, [r0, #12]
   18758:	4606      	mov	r6, r0
   1875a:	780a      	ldrb	r2, [r1, #0]
   1875c:	2a54      	cmp	r2, #84
   1875e:	bf14      	ite	ne
   18760:	2300      	movne	r3, #0
   18762:	2301      	moveq	r3, #1
   18764:	2a47      	cmp	r2, #71
   18766:	bf08      	it	eq
   18768:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1876c:	2b00      	cmp	r3, #0
   1876e:	d14e      	bne.n	1880e <d_encoding+0xbe>
   18770:	f000 fbea 	bl	18f48 <d_name>
   18774:	1e2b      	subs	r3, r5, #0
   18776:	bf18      	it	ne
   18778:	2301      	movne	r3, #1
   1877a:	2800      	cmp	r0, #0
   1877c:	bf0c      	ite	eq
   1877e:	2300      	moveq	r3, #0
   18780:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   18784:	4604      	mov	r4, r0
   18786:	bb0b      	cbnz	r3, 187cc <d_encoding+0x7c>
   18788:	68f2      	ldr	r2, [r6, #12]
   1878a:	7812      	ldrb	r2, [r2, #0]
   1878c:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   18790:	bf38      	it	cc
   18792:	2300      	movcc	r3, #0
   18794:	2c00      	cmp	r4, #0
   18796:	bf08      	it	eq
   18798:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1879c:	2b00      	cmp	r3, #0
   1879e:	d133      	bne.n	18808 <d_encoding+0xb8>
   187a0:	2a45      	cmp	r2, #69
   187a2:	d031      	beq.n	18808 <d_encoding+0xb8>
   187a4:	4622      	mov	r2, r4
   187a6:	7813      	ldrb	r3, [r2, #0]
   187a8:	2b04      	cmp	r3, #4
   187aa:	f000 80cd 	beq.w	18948 <d_encoding+0x1f8>
   187ae:	d302      	bcc.n	187b6 <d_encoding+0x66>
   187b0:	3b19      	subs	r3, #25
   187b2:	2b02      	cmp	r3, #2
   187b4:	d94f      	bls.n	18856 <d_encoding+0x106>
   187b6:	2100      	movs	r1, #0
   187b8:	4630      	mov	r0, r6
   187ba:	f7ff ff75 	bl	186a8 <d_bare_function_type>
   187be:	2103      	movs	r1, #3
   187c0:	4603      	mov	r3, r0
   187c2:	4622      	mov	r2, r4
   187c4:	4630      	mov	r0, r6
   187c6:	f7ff f98d 	bl	17ae4 <d_make_comp>
   187ca:	e01e      	b.n	1880a <d_encoding+0xba>
   187cc:	68b3      	ldr	r3, [r6, #8]
   187ce:	f013 0f01 	tst.w	r3, #1	; 0x1
   187d2:	d1d9      	bne.n	18788 <d_encoding+0x38>
   187d4:	7822      	ldrb	r2, [r4, #0]
   187d6:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   187da:	b2db      	uxtb	r3, r3
   187dc:	2b02      	cmp	r3, #2
   187de:	d806      	bhi.n	187ee <d_encoding+0x9e>
   187e0:	6864      	ldr	r4, [r4, #4]
   187e2:	7822      	ldrb	r2, [r4, #0]
   187e4:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   187e8:	b2db      	uxtb	r3, r3
   187ea:	2b02      	cmp	r3, #2
   187ec:	d9f8      	bls.n	187e0 <d_encoding+0x90>
   187ee:	2a02      	cmp	r2, #2
   187f0:	4620      	mov	r0, r4
   187f2:	d10a      	bne.n	1880a <d_encoding+0xba>
   187f4:	68a2      	ldr	r2, [r4, #8]
   187f6:	e000      	b.n	187fa <d_encoding+0xaa>
   187f8:	6852      	ldr	r2, [r2, #4]
   187fa:	7813      	ldrb	r3, [r2, #0]
   187fc:	3b19      	subs	r3, #25
   187fe:	b2db      	uxtb	r3, r3
   18800:	2b02      	cmp	r3, #2
   18802:	d9f9      	bls.n	187f8 <d_encoding+0xa8>
   18804:	60a2      	str	r2, [r4, #8]
   18806:	e000      	b.n	1880a <d_encoding+0xba>
   18808:	4620      	mov	r0, r4
   1880a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1880e:	6b03      	ldr	r3, [r0, #48]
   18810:	f103 0014 	add.w	r0, r3, #20	; 0x14
   18814:	6330      	str	r0, [r6, #48]
   18816:	780b      	ldrb	r3, [r1, #0]
   18818:	2b54      	cmp	r3, #84
   1881a:	d020      	beq.n	1885e <d_encoding+0x10e>
   1881c:	2b47      	cmp	r3, #71
   1881e:	d001      	beq.n	18824 <d_encoding+0xd4>
   18820:	2000      	movs	r0, #0
   18822:	e7f2      	b.n	1880a <d_encoding+0xba>
   18824:	1c4b      	adds	r3, r1, #1
   18826:	60f3      	str	r3, [r6, #12]
   18828:	784a      	ldrb	r2, [r1, #1]
   1882a:	2a00      	cmp	r2, #0
   1882c:	d0f8      	beq.n	18820 <d_encoding+0xd0>
   1882e:	3301      	adds	r3, #1
   18830:	2a52      	cmp	r2, #82
   18832:	60f3      	str	r3, [r6, #12]
   18834:	f000 8189 	beq.w	18b4a <d_encoding+0x3fa>
   18838:	f200 8191 	bhi.w	18b5e <d_encoding+0x40e>
   1883c:	2a41      	cmp	r2, #65
   1883e:	d1ef      	bne.n	18820 <d_encoding+0xd0>
   18840:	2100      	movs	r1, #0
   18842:	4630      	mov	r0, r6
   18844:	f7ff ff84 	bl	18750 <d_encoding>
   18848:	2114      	movs	r1, #20
   1884a:	4602      	mov	r2, r0
   1884c:	2300      	movs	r3, #0
   1884e:	4630      	mov	r0, r6
   18850:	f7ff f948 	bl	17ae4 <d_make_comp>
   18854:	e7d9      	b.n	1880a <d_encoding+0xba>
   18856:	6852      	ldr	r2, [r2, #4]
   18858:	2a00      	cmp	r2, #0
   1885a:	d1a4      	bne.n	187a6 <d_encoding+0x56>
   1885c:	e7ab      	b.n	187b6 <d_encoding+0x66>
   1885e:	1c4a      	adds	r2, r1, #1
   18860:	60f2      	str	r2, [r6, #12]
   18862:	784b      	ldrb	r3, [r1, #1]
   18864:	2b00      	cmp	r3, #0
   18866:	d0db      	beq.n	18820 <d_encoding+0xd0>
   18868:	3201      	adds	r2, #1
   1886a:	3b43      	subs	r3, #67
   1886c:	60f2      	str	r2, [r6, #12]
   1886e:	2b33      	cmp	r3, #51
   18870:	d8d6      	bhi.n	18820 <d_encoding+0xd0>
   18872:	a101      	add	r1, pc, #4	(adr r1, 18878 <d_encoding+0x128>)
   18874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   18878:	00018a8d 	.word	0x00018a8d
   1887c:	00018821 	.word	0x00018821
   18880:	00018821 	.word	0x00018821
   18884:	00018add 	.word	0x00018add
   18888:	00018821 	.word	0x00018821
   1888c:	00018821 	.word	0x00018821
   18890:	00018ac9 	.word	0x00018ac9
   18894:	00018b37 	.word	0x00018b37
   18898:	00018821 	.word	0x00018821
   1889c:	00018821 	.word	0x00018821
   188a0:	00018821 	.word	0x00018821
   188a4:	00018821 	.word	0x00018821
   188a8:	00018821 	.word	0x00018821
   188ac:	00018821 	.word	0x00018821
   188b0:	00018821 	.word	0x00018821
   188b4:	00018821 	.word	0x00018821
   188b8:	00018b23 	.word	0x00018b23
   188bc:	00018b09 	.word	0x00018b09
   188c0:	00018821 	.word	0x00018821
   188c4:	00018af1 	.word	0x00018af1
   188c8:	00018821 	.word	0x00018821
   188cc:	00018821 	.word	0x00018821
   188d0:	00018821 	.word	0x00018821
   188d4:	00018821 	.word	0x00018821
   188d8:	00018821 	.word	0x00018821
   188dc:	00018821 	.word	0x00018821
   188e0:	00018821 	.word	0x00018821
   188e4:	00018821 	.word	0x00018821
   188e8:	00018821 	.word	0x00018821
   188ec:	00018821 	.word	0x00018821
   188f0:	00018821 	.word	0x00018821
   188f4:	00018821 	.word	0x00018821
   188f8:	00018a37 	.word	0x00018a37
   188fc:	00018821 	.word	0x00018821
   18900:	00018821 	.word	0x00018821
   18904:	00018821 	.word	0x00018821
   18908:	00018821 	.word	0x00018821
   1890c:	00018a13 	.word	0x00018a13
   18910:	00018821 	.word	0x00018821
   18914:	00018821 	.word	0x00018821
   18918:	00018821 	.word	0x00018821
   1891c:	00018821 	.word	0x00018821
   18920:	00018821 	.word	0x00018821
   18924:	00018821 	.word	0x00018821
   18928:	00018821 	.word	0x00018821
   1892c:	00018821 	.word	0x00018821
   18930:	00018821 	.word	0x00018821
   18934:	00018821 	.word	0x00018821
   18938:	00018821 	.word	0x00018821
   1893c:	00018821 	.word	0x00018821
   18940:	00018821 	.word	0x00018821
   18944:	00018a69 	.word	0x00018a69
   18948:	6852      	ldr	r2, [r2, #4]
   1894a:	2a00      	cmp	r2, #0
   1894c:	d05f      	beq.n	18a0e <d_encoding+0x2be>
   1894e:	7813      	ldrb	r3, [r2, #0]
   18950:	3b01      	subs	r3, #1
   18952:	2b2a      	cmp	r3, #42
   18954:	d85b      	bhi.n	18a0e <d_encoding+0x2be>
   18956:	a101      	add	r1, pc, #4	(adr r1, 1895c <d_encoding+0x20c>)
   18958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1895c:	00018a09 	.word	0x00018a09
   18960:	00018a09 	.word	0x00018a09
   18964:	00018a0f 	.word	0x00018a0f
   18968:	00018a0f 	.word	0x00018a0f
   1896c:	00018a0f 	.word	0x00018a0f
   18970:	000187b7 	.word	0x000187b7
   18974:	000187b7 	.word	0x000187b7
   18978:	00018a0f 	.word	0x00018a0f
   1897c:	00018a0f 	.word	0x00018a0f
   18980:	00018a0f 	.word	0x00018a0f
   18984:	00018a0f 	.word	0x00018a0f
   18988:	00018a0f 	.word	0x00018a0f
   1898c:	00018a0f 	.word	0x00018a0f
   18990:	00018a0f 	.word	0x00018a0f
   18994:	00018a0f 	.word	0x00018a0f
   18998:	00018a0f 	.word	0x00018a0f
   1899c:	00018a0f 	.word	0x00018a0f
   189a0:	00018a0f 	.word	0x00018a0f
   189a4:	00018a0f 	.word	0x00018a0f
   189a8:	00018a0f 	.word	0x00018a0f
   189ac:	00018a0f 	.word	0x00018a0f
   189b0:	00018a0f 	.word	0x00018a0f
   189b4:	00018a0f 	.word	0x00018a0f
   189b8:	00018a0f 	.word	0x00018a0f
   189bc:	00018a0f 	.word	0x00018a0f
   189c0:	00018a0f 	.word	0x00018a0f
   189c4:	00018a0f 	.word	0x00018a0f
   189c8:	00018a0f 	.word	0x00018a0f
   189cc:	00018a0f 	.word	0x00018a0f
   189d0:	00018a0f 	.word	0x00018a0f
   189d4:	00018a0f 	.word	0x00018a0f
   189d8:	00018a0f 	.word	0x00018a0f
   189dc:	00018a0f 	.word	0x00018a0f
   189e0:	00018a0f 	.word	0x00018a0f
   189e4:	00018a0f 	.word	0x00018a0f
   189e8:	00018a0f 	.word	0x00018a0f
   189ec:	00018a0f 	.word	0x00018a0f
   189f0:	00018a0f 	.word	0x00018a0f
   189f4:	00018a0f 	.word	0x00018a0f
   189f8:	00018a0f 	.word	0x00018a0f
   189fc:	00018a0f 	.word	0x00018a0f
   18a00:	00018a0f 	.word	0x00018a0f
   18a04:	000187b7 	.word	0x000187b7
   18a08:	6892      	ldr	r2, [r2, #8]
   18a0a:	2a00      	cmp	r2, #0
   18a0c:	d19f      	bne.n	1894e <d_encoding+0x1fe>
   18a0e:	2101      	movs	r1, #1
   18a10:	e6d2      	b.n	187b8 <d_encoding+0x68>
   18a12:	4630      	mov	r0, r6
   18a14:	2168      	movs	r1, #104
   18a16:	f7ff f8e3 	bl	17be0 <d_call_offset>
   18a1a:	2800      	cmp	r0, #0
   18a1c:	f43f af00 	beq.w	18820 <d_encoding+0xd0>
   18a20:	2100      	movs	r1, #0
   18a22:	4630      	mov	r0, r6
   18a24:	f7ff fe94 	bl	18750 <d_encoding>
   18a28:	210e      	movs	r1, #14
   18a2a:	4602      	mov	r2, r0
   18a2c:	2300      	movs	r3, #0
   18a2e:	4630      	mov	r0, r6
   18a30:	f7ff f858 	bl	17ae4 <d_make_comp>
   18a34:	e6e9      	b.n	1880a <d_encoding+0xba>
   18a36:	4630      	mov	r0, r6
   18a38:	2100      	movs	r1, #0
   18a3a:	f7ff f8d1 	bl	17be0 <d_call_offset>
   18a3e:	2800      	cmp	r0, #0
   18a40:	f43f aeee 	beq.w	18820 <d_encoding+0xd0>
   18a44:	4630      	mov	r0, r6
   18a46:	2100      	movs	r1, #0
   18a48:	f7ff f8ca 	bl	17be0 <d_call_offset>
   18a4c:	2800      	cmp	r0, #0
   18a4e:	f43f aee7 	beq.w	18820 <d_encoding+0xd0>
   18a52:	2100      	movs	r1, #0
   18a54:	4630      	mov	r0, r6
   18a56:	f7ff fe7b 	bl	18750 <d_encoding>
   18a5a:	2110      	movs	r1, #16
   18a5c:	4602      	mov	r2, r0
   18a5e:	2300      	movs	r3, #0
   18a60:	4630      	mov	r0, r6
   18a62:	f7ff f83f 	bl	17ae4 <d_make_comp>
   18a66:	e6d0      	b.n	1880a <d_encoding+0xba>
   18a68:	4630      	mov	r0, r6
   18a6a:	2176      	movs	r1, #118
   18a6c:	f7ff f8b8 	bl	17be0 <d_call_offset>
   18a70:	2800      	cmp	r0, #0
   18a72:	f43f aed5 	beq.w	18820 <d_encoding+0xd0>
   18a76:	2100      	movs	r1, #0
   18a78:	4630      	mov	r0, r6
   18a7a:	f7ff fe69 	bl	18750 <d_encoding>
   18a7e:	210f      	movs	r1, #15
   18a80:	4602      	mov	r2, r0
   18a82:	2300      	movs	r3, #0
   18a84:	4630      	mov	r0, r6
   18a86:	f7ff f82d 	bl	17ae4 <d_make_comp>
   18a8a:	e6be      	b.n	1880a <d_encoding+0xba>
   18a8c:	4630      	mov	r0, r6
   18a8e:	f7ff fa9d 	bl	17fcc <d_type>
   18a92:	4604      	mov	r4, r0
   18a94:	4630      	mov	r0, r6
   18a96:	f7ff f877 	bl	17b88 <d_number>
   18a9a:	2800      	cmp	r0, #0
   18a9c:	f6ff aec0 	blt.w	18820 <d_encoding+0xd0>
   18aa0:	68f2      	ldr	r2, [r6, #12]
   18aa2:	7813      	ldrb	r3, [r2, #0]
   18aa4:	2b5f      	cmp	r3, #95
   18aa6:	f47f aebb 	bne.w	18820 <d_encoding+0xd0>
   18aaa:	1c53      	adds	r3, r2, #1
   18aac:	60f3      	str	r3, [r6, #12]
   18aae:	4630      	mov	r0, r6
   18ab0:	f7ff fa8c 	bl	17fcc <d_type>
   18ab4:	6b33      	ldr	r3, [r6, #48]
   18ab6:	4602      	mov	r2, r0
   18ab8:	3305      	adds	r3, #5
   18aba:	6333      	str	r3, [r6, #48]
   18abc:	4630      	mov	r0, r6
   18abe:	210a      	movs	r1, #10
   18ac0:	4623      	mov	r3, r4
   18ac2:	f7ff f80f 	bl	17ae4 <d_make_comp>
   18ac6:	e6a0      	b.n	1880a <d_encoding+0xba>
   18ac8:	4630      	mov	r0, r6
   18aca:	f7ff fa7f 	bl	17fcc <d_type>
   18ace:	210b      	movs	r1, #11
   18ad0:	4602      	mov	r2, r0
   18ad2:	2300      	movs	r3, #0
   18ad4:	4630      	mov	r0, r6
   18ad6:	f7ff f805 	bl	17ae4 <d_make_comp>
   18ada:	e696      	b.n	1880a <d_encoding+0xba>
   18adc:	4630      	mov	r0, r6
   18ade:	f7ff fa75 	bl	17fcc <d_type>
   18ae2:	210d      	movs	r1, #13
   18ae4:	4602      	mov	r2, r0
   18ae6:	2300      	movs	r3, #0
   18ae8:	4630      	mov	r0, r6
   18aea:	f7fe fffb 	bl	17ae4 <d_make_comp>
   18aee:	e68c      	b.n	1880a <d_encoding+0xba>
   18af0:	1f43      	subs	r3, r0, #5
   18af2:	6333      	str	r3, [r6, #48]
   18af4:	4630      	mov	r0, r6
   18af6:	f7ff fa69 	bl	17fcc <d_type>
   18afa:	2108      	movs	r1, #8
   18afc:	4602      	mov	r2, r0
   18afe:	2300      	movs	r3, #0
   18b00:	4630      	mov	r0, r6
   18b02:	f7fe ffef 	bl	17ae4 <d_make_comp>
   18b06:	e680      	b.n	1880a <d_encoding+0xba>
   18b08:	f1a0 030a 	sub.w	r3, r0, #10	; 0xa
   18b0c:	6333      	str	r3, [r6, #48]
   18b0e:	4630      	mov	r0, r6
   18b10:	f7ff fa5c 	bl	17fcc <d_type>
   18b14:	2109      	movs	r1, #9
   18b16:	4602      	mov	r2, r0
   18b18:	2300      	movs	r3, #0
   18b1a:	4630      	mov	r0, r6
   18b1c:	f7fe ffe2 	bl	17ae4 <d_make_comp>
   18b20:	e673      	b.n	1880a <d_encoding+0xba>
   18b22:	4630      	mov	r0, r6
   18b24:	f7ff fa52 	bl	17fcc <d_type>
   18b28:	210c      	movs	r1, #12
   18b2a:	4602      	mov	r2, r0
   18b2c:	2300      	movs	r3, #0
   18b2e:	4630      	mov	r0, r6
   18b30:	f7fe ffd8 	bl	17ae4 <d_make_comp>
   18b34:	e669      	b.n	1880a <d_encoding+0xba>
   18b36:	4630      	mov	r0, r6
   18b38:	f7ff fa48 	bl	17fcc <d_type>
   18b3c:	2111      	movs	r1, #17
   18b3e:	4602      	mov	r2, r0
   18b40:	2300      	movs	r3, #0
   18b42:	4630      	mov	r0, r6
   18b44:	f7fe ffce 	bl	17ae4 <d_make_comp>
   18b48:	e65f      	b.n	1880a <d_encoding+0xba>
   18b4a:	4630      	mov	r0, r6
   18b4c:	f000 f9fc 	bl	18f48 <d_name>
   18b50:	2113      	movs	r1, #19
   18b52:	4602      	mov	r2, r0
   18b54:	2300      	movs	r3, #0
   18b56:	4630      	mov	r0, r6
   18b58:	f7fe ffc4 	bl	17ae4 <d_make_comp>
   18b5c:	e655      	b.n	1880a <d_encoding+0xba>
   18b5e:	2a56      	cmp	r2, #86
   18b60:	d04f      	beq.n	18c02 <d_encoding+0x4b2>
   18b62:	2a72      	cmp	r2, #114
   18b64:	f47f ae5c 	bne.w	18820 <d_encoding+0xd0>
   18b68:	4630      	mov	r0, r6
   18b6a:	f7ff f80d 	bl	17b88 <d_number>
   18b6e:	2801      	cmp	r0, #1
   18b70:	f77f ae56 	ble.w	18820 <d_encoding+0xd0>
   18b74:	68f3      	ldr	r3, [r6, #12]
   18b76:	781a      	ldrb	r2, [r3, #0]
   18b78:	2a00      	cmp	r2, #0
   18b7a:	f43f ae51 	beq.w	18820 <d_encoding+0xd0>
   18b7e:	1c5d      	adds	r5, r3, #1
   18b80:	2a5f      	cmp	r2, #95
   18b82:	60f5      	str	r5, [r6, #12]
   18b84:	f47f ae4c 	bne.w	18820 <d_encoding+0xd0>
   18b88:	f04f 0800 	mov.w	r8, #0	; 0x0
   18b8c:	1e47      	subs	r7, r0, #1
   18b8e:	46c2      	mov	sl, r8
   18b90:	f04f 0936 	mov.w	r9, #54	; 0x36
   18b94:	782b      	ldrb	r3, [r5, #0]
   18b96:	2b00      	cmp	r3, #0
   18b98:	f43f ae42 	beq.w	18820 <d_encoding+0xd0>
   18b9c:	2b24      	cmp	r3, #36
   18b9e:	d054      	beq.n	18c4a <d_encoding+0x4fa>
   18ba0:	2f01      	cmp	r7, #1
   18ba2:	dd4f      	ble.n	18c44 <d_encoding+0x4f4>
   18ba4:	786b      	ldrb	r3, [r5, #1]
   18ba6:	2b00      	cmp	r3, #0
   18ba8:	d04c      	beq.n	18c44 <d_encoding+0x4f4>
   18baa:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18bae:	e007      	b.n	18bc0 <d_encoding+0x470>
   18bb0:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   18bb4:	45bc      	cmp	ip, r7
   18bb6:	da05      	bge.n	18bc4 <d_encoding+0x474>
   18bb8:	f815 300c 	ldrb.w	r3, [r5, ip]
   18bbc:	46e6      	mov	lr, ip
   18bbe:	b113      	cbz	r3, 18bc6 <d_encoding+0x476>
   18bc0:	2b24      	cmp	r3, #36
   18bc2:	d1f5      	bne.n	18bb0 <d_encoding+0x460>
   18bc4:	46e6      	mov	lr, ip
   18bc6:	6970      	ldr	r0, [r6, #20]
   18bc8:	69b3      	ldr	r3, [r6, #24]
   18bca:	4298      	cmp	r0, r3
   18bcc:	da35      	bge.n	18c3a <d_encoding+0x4ea>
   18bce:	0083      	lsls	r3, r0, #2
   18bd0:	0102      	lsls	r2, r0, #4
   18bd2:	6931      	ldr	r1, [r6, #16]
   18bd4:	1ad2      	subs	r2, r2, r3
   18bd6:	1c43      	adds	r3, r0, #1
   18bd8:	188c      	adds	r4, r1, r2
   18bda:	6173      	str	r3, [r6, #20]
   18bdc:	d02d      	beq.n	18c3a <d_encoding+0x4ea>
   18bde:	6065      	str	r5, [r4, #4]
   18be0:	f8c4 c008 	str.w	ip, [r4, #8]
   18be4:	68f3      	ldr	r3, [r6, #12]
   18be6:	f801 a002 	strb.w	sl, [r1, r2]
   18bea:	eb03 050e 	add.w	r5, r3, lr
   18bee:	60f5      	str	r5, [r6, #12]
   18bf0:	ebcc 0707 	rsb	r7, ip, r7
   18bf4:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   18bf8:	d114      	bne.n	18c24 <d_encoding+0x4d4>
   18bfa:	2f00      	cmp	r7, #0
   18bfc:	dd0b      	ble.n	18c16 <d_encoding+0x4c6>
   18bfe:	46a0      	mov	r8, r4
   18c00:	e7c8      	b.n	18b94 <d_encoding+0x444>
   18c02:	4630      	mov	r0, r6
   18c04:	f000 f9a0 	bl	18f48 <d_name>
   18c08:	2112      	movs	r1, #18
   18c0a:	4602      	mov	r2, r0
   18c0c:	2300      	movs	r3, #0
   18c0e:	4630      	mov	r0, r6
   18c10:	f7fe ff68 	bl	17ae4 <d_make_comp>
   18c14:	e5f9      	b.n	1880a <d_encoding+0xba>
   18c16:	4630      	mov	r0, r6
   18c18:	2134      	movs	r1, #52
   18c1a:	4622      	mov	r2, r4
   18c1c:	2300      	movs	r3, #0
   18c1e:	f7fe ff61 	bl	17ae4 <d_make_comp>
   18c22:	e5f2      	b.n	1880a <d_encoding+0xba>
   18c24:	4623      	mov	r3, r4
   18c26:	4630      	mov	r0, r6
   18c28:	2135      	movs	r1, #53
   18c2a:	4642      	mov	r2, r8
   18c2c:	f7fe ff5a 	bl	17ae4 <d_make_comp>
   18c30:	4604      	mov	r4, r0
   18c32:	2800      	cmp	r0, #0
   18c34:	d1e1      	bne.n	18bfa <d_encoding+0x4aa>
   18c36:	2000      	movs	r0, #0
   18c38:	e5e7      	b.n	1880a <d_encoding+0xba>
   18c3a:	68f3      	ldr	r3, [r6, #12]
   18c3c:	2000      	movs	r0, #0
   18c3e:	4473      	add	r3, lr
   18c40:	60f3      	str	r3, [r6, #12]
   18c42:	e5e2      	b.n	1880a <d_encoding+0xba>
   18c44:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18c48:	e7bc      	b.n	18bc4 <d_encoding+0x474>
   18c4a:	786b      	ldrb	r3, [r5, #1]
   18c4c:	2b53      	cmp	r3, #83
   18c4e:	d01a      	beq.n	18c86 <d_encoding+0x536>
   18c50:	2b5f      	cmp	r3, #95
   18c52:	d020      	beq.n	18c96 <d_encoding+0x546>
   18c54:	2b24      	cmp	r3, #36
   18c56:	f47f ade3 	bne.w	18820 <d_encoding+0xd0>
   18c5a:	469c      	mov	ip, r3
   18c5c:	6970      	ldr	r0, [r6, #20]
   18c5e:	69b3      	ldr	r3, [r6, #24]
   18c60:	4298      	cmp	r0, r3
   18c62:	da13      	bge.n	18c8c <d_encoding+0x53c>
   18c64:	0083      	lsls	r3, r0, #2
   18c66:	0102      	lsls	r2, r0, #4
   18c68:	6931      	ldr	r1, [r6, #16]
   18c6a:	1ad2      	subs	r2, r2, r3
   18c6c:	1c43      	adds	r3, r0, #1
   18c6e:	188c      	adds	r4, r1, r2
   18c70:	6173      	str	r3, [r6, #20]
   18c72:	d00b      	beq.n	18c8c <d_encoding+0x53c>
   18c74:	f8c4 c004 	str.w	ip, [r4, #4]
   18c78:	68f3      	ldr	r3, [r6, #12]
   18c7a:	f801 9002 	strb.w	r9, [r1, r2]
   18c7e:	1c9d      	adds	r5, r3, #2
   18c80:	60f5      	str	r5, [r6, #12]
   18c82:	3f02      	subs	r7, #2
   18c84:	e7b6      	b.n	18bf4 <d_encoding+0x4a4>
   18c86:	f04f 0c2f 	mov.w	ip, #47	; 0x2f
   18c8a:	e7e7      	b.n	18c5c <d_encoding+0x50c>
   18c8c:	68f3      	ldr	r3, [r6, #12]
   18c8e:	2000      	movs	r0, #0
   18c90:	3302      	adds	r3, #2
   18c92:	60f3      	str	r3, [r6, #12]
   18c94:	e5b9      	b.n	1880a <d_encoding+0xba>
   18c96:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   18c9a:	e7df      	b.n	18c5c <d_encoding+0x50c>

00018c9c <d_expr_primary>:
   18c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18c9e:	68c2      	ldr	r2, [r0, #12]
   18ca0:	b081      	sub	sp, #4
   18ca2:	7813      	ldrb	r3, [r2, #0]
   18ca4:	4604      	mov	r4, r0
   18ca6:	2b4c      	cmp	r3, #76
   18ca8:	d002      	beq.n	18cb0 <d_expr_primary+0x14>
   18caa:	2000      	movs	r0, #0
   18cac:	b001      	add	sp, #4
   18cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18cb0:	1c51      	adds	r1, r2, #1
   18cb2:	60c1      	str	r1, [r0, #12]
   18cb4:	7853      	ldrb	r3, [r2, #1]
   18cb6:	2b5f      	cmp	r3, #95
   18cb8:	d029      	beq.n	18d0e <d_expr_primary+0x72>
   18cba:	f7ff f987 	bl	17fcc <d_type>
   18cbe:	4606      	mov	r6, r0
   18cc0:	2800      	cmp	r0, #0
   18cc2:	d0f2      	beq.n	18caa <d_expr_primary+0xe>
   18cc4:	7803      	ldrb	r3, [r0, #0]
   18cc6:	2b22      	cmp	r3, #34
   18cc8:	d036      	beq.n	18d38 <d_expr_primary+0x9c>
   18cca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   18cce:	f89c 3000 	ldrb.w	r3, [ip]
   18cd2:	2b6e      	cmp	r3, #110
   18cd4:	d028      	beq.n	18d28 <d_expr_primary+0x8c>
   18cd6:	2732      	movs	r7, #50
   18cd8:	2b45      	cmp	r3, #69
   18cda:	d04f      	beq.n	18d7c <d_expr_primary+0xe0>
   18cdc:	2b00      	cmp	r3, #0
   18cde:	d0e4      	beq.n	18caa <d_expr_primary+0xe>
   18ce0:	4663      	mov	r3, ip
   18ce2:	e001      	b.n	18ce8 <d_expr_primary+0x4c>
   18ce4:	2a00      	cmp	r2, #0
   18ce6:	d0e0      	beq.n	18caa <d_expr_primary+0xe>
   18ce8:	3301      	adds	r3, #1
   18cea:	60e3      	str	r3, [r4, #12]
   18cec:	781a      	ldrb	r2, [r3, #0]
   18cee:	2a45      	cmp	r2, #69
   18cf0:	d1f8      	bne.n	18ce4 <d_expr_primary+0x48>
   18cf2:	ebcc 0103 	rsb	r1, ip, r3
   18cf6:	6960      	ldr	r0, [r4, #20]
   18cf8:	69a3      	ldr	r3, [r4, #24]
   18cfa:	4298      	cmp	r0, r3
   18cfc:	db25      	blt.n	18d4a <d_expr_primary+0xae>
   18cfe:	2500      	movs	r5, #0
   18d00:	4620      	mov	r0, r4
   18d02:	4639      	mov	r1, r7
   18d04:	4632      	mov	r2, r6
   18d06:	462b      	mov	r3, r5
   18d08:	f7fe feec 	bl	17ae4 <d_make_comp>
   18d0c:	e005      	b.n	18d1a <d_expr_primary+0x7e>
   18d0e:	1c4a      	adds	r2, r1, #1
   18d10:	60c2      	str	r2, [r0, #12]
   18d12:	784b      	ldrb	r3, [r1, #1]
   18d14:	2b5a      	cmp	r3, #90
   18d16:	d02b      	beq.n	18d70 <d_expr_primary+0xd4>
   18d18:	2000      	movs	r0, #0
   18d1a:	68e2      	ldr	r2, [r4, #12]
   18d1c:	7813      	ldrb	r3, [r2, #0]
   18d1e:	2b45      	cmp	r3, #69
   18d20:	d1c3      	bne.n	18caa <d_expr_primary+0xe>
   18d22:	1c53      	adds	r3, r2, #1
   18d24:	60e3      	str	r3, [r4, #12]
   18d26:	e7c1      	b.n	18cac <d_expr_primary+0x10>
   18d28:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   18d2c:	f8c4 c00c 	str.w	ip, [r4, #12]
   18d30:	f89c 3000 	ldrb.w	r3, [ip]
   18d34:	2733      	movs	r7, #51
   18d36:	e7cf      	b.n	18cd8 <d_expr_primary+0x3c>
   18d38:	6842      	ldr	r2, [r0, #4]
   18d3a:	7c13      	ldrb	r3, [r2, #16]
   18d3c:	2b00      	cmp	r3, #0
   18d3e:	d0c4      	beq.n	18cca <d_expr_primary+0x2e>
   18d40:	6b23      	ldr	r3, [r4, #48]
   18d42:	6852      	ldr	r2, [r2, #4]
   18d44:	1a9b      	subs	r3, r3, r2
   18d46:	6323      	str	r3, [r4, #48]
   18d48:	e7bf      	b.n	18cca <d_expr_primary+0x2e>
   18d4a:	0083      	lsls	r3, r0, #2
   18d4c:	0102      	lsls	r2, r0, #4
   18d4e:	f8d4 e010 	ldr.w	lr, [r4, #16]
   18d52:	1ad2      	subs	r2, r2, r3
   18d54:	1c43      	adds	r3, r0, #1
   18d56:	eb1e 0502 	adds.w	r5, lr, r2
   18d5a:	6163      	str	r3, [r4, #20]
   18d5c:	d0cf      	beq.n	18cfe <d_expr_primary+0x62>
   18d5e:	2900      	cmp	r1, #0
   18d60:	d0cd      	beq.n	18cfe <d_expr_primary+0x62>
   18d62:	2300      	movs	r3, #0
   18d64:	f80e 3002 	strb.w	r3, [lr, r2]
   18d68:	f8c5 c004 	str.w	ip, [r5, #4]
   18d6c:	60a9      	str	r1, [r5, #8]
   18d6e:	e7c7      	b.n	18d00 <d_expr_primary+0x64>
   18d70:	1c53      	adds	r3, r2, #1
   18d72:	60c3      	str	r3, [r0, #12]
   18d74:	2100      	movs	r1, #0
   18d76:	f7ff fceb 	bl	18750 <d_encoding>
   18d7a:	e7ce      	b.n	18d1a <d_expr_primary+0x7e>
   18d7c:	2100      	movs	r1, #0
   18d7e:	e7ba      	b.n	18cf6 <d_expr_primary+0x5a>

00018d80 <d_expression>:
   18d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d82:	68c2      	ldr	r2, [r0, #12]
   18d84:	b081      	sub	sp, #4
   18d86:	7813      	ldrb	r3, [r2, #0]
   18d88:	4606      	mov	r6, r0
   18d8a:	2b4c      	cmp	r3, #76
   18d8c:	d03a      	beq.n	18e04 <d_expression+0x84>
   18d8e:	2b54      	cmp	r3, #84
   18d90:	d03b      	beq.n	18e0a <d_expression+0x8a>
   18d92:	2b73      	cmp	r3, #115
   18d94:	d102      	bne.n	18d9c <d_expression+0x1c>
   18d96:	7853      	ldrb	r3, [r2, #1]
   18d98:	2b72      	cmp	r3, #114
   18d9a:	d039      	beq.n	18e10 <d_expression+0x90>
   18d9c:	4630      	mov	r0, r6
   18d9e:	f7ff fb5f 	bl	18460 <d_operator_name>
   18da2:	4607      	mov	r7, r0
   18da4:	b180      	cbz	r0, 18dc8 <d_expression+0x48>
   18da6:	7803      	ldrb	r3, [r0, #0]
   18da8:	2b29      	cmp	r3, #41
   18daa:	d010      	beq.n	18dce <d_expression+0x4e>
   18dac:	2b2a      	cmp	r3, #42
   18dae:	d043      	beq.n	18e38 <d_expression+0xb8>
   18db0:	2b2b      	cmp	r3, #43
   18db2:	d023      	beq.n	18dfc <d_expression+0x7c>
   18db4:	2b29      	cmp	r3, #41
   18db6:	d107      	bne.n	18dc8 <d_expression+0x48>
   18db8:	6844      	ldr	r4, [r0, #4]
   18dba:	68e0      	ldr	r0, [r4, #12]
   18dbc:	2802      	cmp	r0, #2
   18dbe:	d05b      	beq.n	18e78 <d_expression+0xf8>
   18dc0:	2803      	cmp	r0, #3
   18dc2:	d03b      	beq.n	18e3c <d_expression+0xbc>
   18dc4:	2801      	cmp	r0, #1
   18dc6:	d019      	beq.n	18dfc <d_expression+0x7c>
   18dc8:	2000      	movs	r0, #0
   18dca:	b001      	add	sp, #4
   18dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18dce:	6841      	ldr	r1, [r0, #4]
   18dd0:	6b33      	ldr	r3, [r6, #48]
   18dd2:	688a      	ldr	r2, [r1, #8]
   18dd4:	493a      	ldr	r1, [pc, #232]	(18ec0 <d_expression+0x140>)
   18dd6:	189b      	adds	r3, r3, r2
   18dd8:	3b02      	subs	r3, #2
   18dda:	6333      	str	r3, [r6, #48]
   18ddc:	6844      	ldr	r4, [r0, #4]
   18dde:	6820      	ldr	r0, [r4, #0]
   18de0:	f008 fb84 	bl	214ec <strcmp>
   18de4:	2800      	cmp	r0, #0
   18de6:	d1e8      	bne.n	18dba <d_expression+0x3a>
   18de8:	4630      	mov	r0, r6
   18dea:	f7ff f8ef 	bl	17fcc <d_type>
   18dee:	4603      	mov	r3, r0
   18df0:	212c      	movs	r1, #44
   18df2:	4630      	mov	r0, r6
   18df4:	463a      	mov	r2, r7
   18df6:	f7fe fe75 	bl	17ae4 <d_make_comp>
   18dfa:	e7e6      	b.n	18dca <d_expression+0x4a>
   18dfc:	4630      	mov	r0, r6
   18dfe:	f7ff ffbf 	bl	18d80 <d_expression>
   18e02:	e7f4      	b.n	18dee <d_expression+0x6e>
   18e04:	f7ff ff4a 	bl	18c9c <d_expr_primary>
   18e08:	e7df      	b.n	18dca <d_expression+0x4a>
   18e0a:	f7fe ff51 	bl	17cb0 <d_template_param>
   18e0e:	e7dc      	b.n	18dca <d_expression+0x4a>
   18e10:	1c93      	adds	r3, r2, #2
   18e12:	60c3      	str	r3, [r0, #12]
   18e14:	f7ff f8da 	bl	17fcc <d_type>
   18e18:	4605      	mov	r5, r0
   18e1a:	4630      	mov	r0, r6
   18e1c:	f7ff fb9e 	bl	1855c <d_unqualified_name>
   18e20:	68f3      	ldr	r3, [r6, #12]
   18e22:	4604      	mov	r4, r0
   18e24:	781a      	ldrb	r2, [r3, #0]
   18e26:	2a49      	cmp	r2, #73
   18e28:	d03a      	beq.n	18ea0 <d_expression+0x120>
   18e2a:	4630      	mov	r0, r6
   18e2c:	2101      	movs	r1, #1
   18e2e:	462a      	mov	r2, r5
   18e30:	4623      	mov	r3, r4
   18e32:	f7fe fe57 	bl	17ae4 <d_make_comp>
   18e36:	e7c8      	b.n	18dca <d_expression+0x4a>
   18e38:	6840      	ldr	r0, [r0, #4]
   18e3a:	e7bf      	b.n	18dbc <d_expression+0x3c>
   18e3c:	4630      	mov	r0, r6
   18e3e:	f7ff ff9f 	bl	18d80 <d_expression>
   18e42:	4605      	mov	r5, r0
   18e44:	4630      	mov	r0, r6
   18e46:	f7ff ff9b 	bl	18d80 <d_expression>
   18e4a:	4604      	mov	r4, r0
   18e4c:	4630      	mov	r0, r6
   18e4e:	f7ff ff97 	bl	18d80 <d_expression>
   18e52:	2131      	movs	r1, #49
   18e54:	4603      	mov	r3, r0
   18e56:	4622      	mov	r2, r4
   18e58:	4630      	mov	r0, r6
   18e5a:	f7fe fe43 	bl	17ae4 <d_make_comp>
   18e5e:	2130      	movs	r1, #48
   18e60:	4603      	mov	r3, r0
   18e62:	462a      	mov	r2, r5
   18e64:	4630      	mov	r0, r6
   18e66:	f7fe fe3d 	bl	17ae4 <d_make_comp>
   18e6a:	212f      	movs	r1, #47
   18e6c:	4603      	mov	r3, r0
   18e6e:	463a      	mov	r2, r7
   18e70:	4630      	mov	r0, r6
   18e72:	f7fe fe37 	bl	17ae4 <d_make_comp>
   18e76:	e7a8      	b.n	18dca <d_expression+0x4a>
   18e78:	4630      	mov	r0, r6
   18e7a:	f7ff ff81 	bl	18d80 <d_expression>
   18e7e:	4604      	mov	r4, r0
   18e80:	4630      	mov	r0, r6
   18e82:	f7ff ff7d 	bl	18d80 <d_expression>
   18e86:	212e      	movs	r1, #46
   18e88:	4603      	mov	r3, r0
   18e8a:	4622      	mov	r2, r4
   18e8c:	4630      	mov	r0, r6
   18e8e:	f7fe fe29 	bl	17ae4 <d_make_comp>
   18e92:	212d      	movs	r1, #45
   18e94:	4603      	mov	r3, r0
   18e96:	463a      	mov	r2, r7
   18e98:	4630      	mov	r0, r6
   18e9a:	f7fe fe23 	bl	17ae4 <d_make_comp>
   18e9e:	e794      	b.n	18dca <d_expression+0x4a>
   18ea0:	4630      	mov	r0, r6
   18ea2:	f000 f80f 	bl	18ec4 <d_template_args>
   18ea6:	2104      	movs	r1, #4
   18ea8:	4603      	mov	r3, r0
   18eaa:	4622      	mov	r2, r4
   18eac:	4630      	mov	r0, r6
   18eae:	f7fe fe19 	bl	17ae4 <d_make_comp>
   18eb2:	2101      	movs	r1, #1
   18eb4:	4603      	mov	r3, r0
   18eb6:	462a      	mov	r2, r5
   18eb8:	4630      	mov	r0, r6
   18eba:	f7fe fe13 	bl	17ae4 <d_make_comp>
   18ebe:	e784      	b.n	18dca <d_expression+0x4a>
   18ec0:	000233dc 	.word	0x000233dc

00018ec4 <d_template_args>:
   18ec4:	b570      	push	{r4, r5, r6, lr}
   18ec6:	68c2      	ldr	r2, [r0, #12]
   18ec8:	b082      	sub	sp, #8
   18eca:	7813      	ldrb	r3, [r2, #0]
   18ecc:	4604      	mov	r4, r0
   18ece:	2b49      	cmp	r3, #73
   18ed0:	6ac6      	ldr	r6, [r0, #44]
   18ed2:	d002      	beq.n	18eda <d_template_args+0x16>
   18ed4:	2000      	movs	r0, #0
   18ed6:	b002      	add	sp, #8
   18ed8:	bd70      	pop	{r4, r5, r6, pc}
   18eda:	3b49      	subs	r3, #73
   18edc:	1c51      	adds	r1, r2, #1
   18ede:	ad02      	add	r5, sp, #8
   18ee0:	60c1      	str	r1, [r0, #12]
   18ee2:	f845 3d04 	str.w	r3, [r5, #-4]!
   18ee6:	7853      	ldrb	r3, [r2, #1]
   18ee8:	2b4c      	cmp	r3, #76
   18eea:	d016      	beq.n	18f1a <d_template_args+0x56>
   18eec:	2b58      	cmp	r3, #88
   18eee:	d019      	beq.n	18f24 <d_template_args+0x60>
   18ef0:	4620      	mov	r0, r4
   18ef2:	f7ff f86b 	bl	17fcc <d_type>
   18ef6:	4602      	mov	r2, r0
   18ef8:	2a00      	cmp	r2, #0
   18efa:	d0eb      	beq.n	18ed4 <d_template_args+0x10>
   18efc:	4620      	mov	r0, r4
   18efe:	2128      	movs	r1, #40
   18f00:	2300      	movs	r3, #0
   18f02:	f7fe fdef 	bl	17ae4 <d_make_comp>
   18f06:	6028      	str	r0, [r5, #0]
   18f08:	2800      	cmp	r0, #0
   18f0a:	d0e3      	beq.n	18ed4 <d_template_args+0x10>
   18f0c:	68e1      	ldr	r1, [r4, #12]
   18f0e:	780b      	ldrb	r3, [r1, #0]
   18f10:	2b45      	cmp	r3, #69
   18f12:	d014      	beq.n	18f3e <d_template_args+0x7a>
   18f14:	f100 0508 	add.w	r5, r0, #8	; 0x8
   18f18:	e7e6      	b.n	18ee8 <d_template_args+0x24>
   18f1a:	4620      	mov	r0, r4
   18f1c:	f7ff febe 	bl	18c9c <d_expr_primary>
   18f20:	4602      	mov	r2, r0
   18f22:	e7e9      	b.n	18ef8 <d_template_args+0x34>
   18f24:	1c4b      	adds	r3, r1, #1
   18f26:	60e3      	str	r3, [r4, #12]
   18f28:	4620      	mov	r0, r4
   18f2a:	f7ff ff29 	bl	18d80 <d_expression>
   18f2e:	68e1      	ldr	r1, [r4, #12]
   18f30:	4602      	mov	r2, r0
   18f32:	780b      	ldrb	r3, [r1, #0]
   18f34:	2b45      	cmp	r3, #69
   18f36:	d1cd      	bne.n	18ed4 <d_template_args+0x10>
   18f38:	1c4b      	adds	r3, r1, #1
   18f3a:	60e3      	str	r3, [r4, #12]
   18f3c:	e7dc      	b.n	18ef8 <d_template_args+0x34>
   18f3e:	1c4b      	adds	r3, r1, #1
   18f40:	60e3      	str	r3, [r4, #12]
   18f42:	62e6      	str	r6, [r4, #44]
   18f44:	9801      	ldr	r0, [sp, #4]
   18f46:	e7c6      	b.n	18ed6 <d_template_args+0x12>

00018f48 <d_name>:
   18f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f4c:	68c2      	ldr	r2, [r0, #12]
   18f4e:	b082      	sub	sp, #8
   18f50:	7813      	ldrb	r3, [r2, #0]
   18f52:	4606      	mov	r6, r0
   18f54:	3b4c      	subs	r3, #76
   18f56:	2b0e      	cmp	r3, #14
   18f58:	d809      	bhi.n	18f6e <d_name+0x26>
   18f5a:	e8df f003 	tbb	[pc, r3]
   18f5e:	0883      	.short	0x0883
   18f60:	0808083b 	.word	0x0808083b
   18f64:	08082108 	.word	0x08082108
   18f68:	08080808 	.word	0x08080808
   18f6c:	0014      	.short	0x0014
   18f6e:	f7ff faf5 	bl	1855c <d_unqualified_name>
   18f72:	68f3      	ldr	r3, [r6, #12]
   18f74:	4604      	mov	r4, r0
   18f76:	781a      	ldrb	r2, [r3, #0]
   18f78:	2a49      	cmp	r2, #73
   18f7a:	f000 80d0 	beq.w	1911e <d_name+0x1d6>
   18f7e:	4620      	mov	r0, r4
   18f80:	b002      	add	sp, #8
   18f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f86:	1c53      	adds	r3, r2, #1
   18f88:	60c3      	str	r3, [r0, #12]
   18f8a:	2100      	movs	r1, #0
   18f8c:	f7ff fbe0 	bl	18750 <d_encoding>
   18f90:	68f2      	ldr	r2, [r6, #12]
   18f92:	4604      	mov	r4, r0
   18f94:	7813      	ldrb	r3, [r2, #0]
   18f96:	2b45      	cmp	r3, #69
   18f98:	f000 80a0 	beq.w	190dc <d_name+0x194>
   18f9c:	2400      	movs	r4, #0
   18f9e:	e7ee      	b.n	18f7e <d_name+0x36>
   18fa0:	7853      	ldrb	r3, [r2, #1]
   18fa2:	2b74      	cmp	r3, #116
   18fa4:	d06c      	beq.n	19080 <d_name+0x138>
   18fa6:	2100      	movs	r1, #0
   18fa8:	f7fe feb6 	bl	17d18 <d_substitution>
   18fac:	2101      	movs	r1, #1
   18fae:	4604      	mov	r4, r0
   18fb0:	68f3      	ldr	r3, [r6, #12]
   18fb2:	781a      	ldrb	r2, [r3, #0]
   18fb4:	2a49      	cmp	r2, #73
   18fb6:	d1e2      	bne.n	18f7e <d_name+0x36>
   18fb8:	2900      	cmp	r1, #0
   18fba:	f000 80b0 	beq.w	1911e <d_name+0x1d6>
   18fbe:	4630      	mov	r0, r6
   18fc0:	f7ff ff80 	bl	18ec4 <d_template_args>
   18fc4:	4622      	mov	r2, r4
   18fc6:	4603      	mov	r3, r0
   18fc8:	2104      	movs	r1, #4
   18fca:	4630      	mov	r0, r6
   18fcc:	f7fe fd8a 	bl	17ae4 <d_make_comp>
   18fd0:	4604      	mov	r4, r0
   18fd2:	e7d4      	b.n	18f7e <d_name+0x36>
   18fd4:	1c53      	adds	r3, r2, #1
   18fd6:	60c3      	str	r3, [r0, #12]
   18fd8:	a901      	add	r1, sp, #4
   18fda:	2201      	movs	r2, #1
   18fdc:	f7fe fe22 	bl	17c24 <d_cv_qualifiers>
   18fe0:	4680      	mov	r8, r0
   18fe2:	2800      	cmp	r0, #0
   18fe4:	d0da      	beq.n	18f9c <d_name+0x54>
   18fe6:	68f1      	ldr	r1, [r6, #12]
   18fe8:	2700      	movs	r7, #0
   18fea:	780c      	ldrb	r4, [r1, #0]
   18fec:	2c00      	cmp	r4, #0
   18fee:	d042      	beq.n	19076 <d_name+0x12e>
   18ff0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   18ff4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   18ff8:	b2db      	uxtb	r3, r3
   18ffa:	b2d2      	uxtb	r2, r2
   18ffc:	2b19      	cmp	r3, #25
   18ffe:	bf8c      	ite	hi
   19000:	2300      	movhi	r3, #0
   19002:	2301      	movls	r3, #1
   19004:	2a09      	cmp	r2, #9
   19006:	bf98      	it	ls
   19008:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   1900c:	2b00      	cmp	r3, #0
   1900e:	d15a      	bne.n	190c6 <d_name+0x17e>
   19010:	2c44      	cmp	r4, #68
   19012:	bf14      	ite	ne
   19014:	2300      	movne	r3, #0
   19016:	2301      	moveq	r3, #1
   19018:	2c43      	cmp	r4, #67
   1901a:	bf08      	it	eq
   1901c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   19020:	2b00      	cmp	r3, #0
   19022:	d150      	bne.n	190c6 <d_name+0x17e>
   19024:	2c4c      	cmp	r4, #76
   19026:	d04e      	beq.n	190c6 <d_name+0x17e>
   19028:	2c53      	cmp	r4, #83
   1902a:	d051      	beq.n	190d0 <d_name+0x188>
   1902c:	2c49      	cmp	r4, #73
   1902e:	f000 8093 	beq.w	19158 <d_name+0x210>
   19032:	2c54      	cmp	r4, #84
   19034:	f040 8081 	bne.w	1913a <d_name+0x1f2>
   19038:	4630      	mov	r0, r6
   1903a:	f7fe fe39 	bl	17cb0 <d_template_param>
   1903e:	4605      	mov	r5, r0
   19040:	b137      	cbz	r7, 19050 <d_name+0x108>
   19042:	2101      	movs	r1, #1
   19044:	462b      	mov	r3, r5
   19046:	4630      	mov	r0, r6
   19048:	463a      	mov	r2, r7
   1904a:	f7fe fd4b 	bl	17ae4 <d_make_comp>
   1904e:	4605      	mov	r5, r0
   19050:	2c53      	cmp	r4, #83
   19052:	bf08      	it	eq
   19054:	68f1      	ldreq	r1, [r6, #12]
   19056:	d003      	beq.n	19060 <d_name+0x118>
   19058:	68f1      	ldr	r1, [r6, #12]
   1905a:	780b      	ldrb	r3, [r1, #0]
   1905c:	2b45      	cmp	r3, #69
   1905e:	d105      	bne.n	1906c <d_name+0x124>
   19060:	462f      	mov	r7, r5
   19062:	e7c2      	b.n	18fea <d_name+0xa2>
   19064:	f7ff fa7a 	bl	1855c <d_unqualified_name>
   19068:	4604      	mov	r4, r0
   1906a:	e788      	b.n	18f7e <d_name+0x36>
   1906c:	b11d      	cbz	r5, 19076 <d_name+0x12e>
   1906e:	6a32      	ldr	r2, [r6, #32]
   19070:	6a73      	ldr	r3, [r6, #36]
   19072:	429a      	cmp	r2, r3
   19074:	db4c      	blt.n	19110 <d_name+0x1c8>
   19076:	2300      	movs	r3, #0
   19078:	f8c8 3000 	str.w	r3, [r8]
   1907c:	461c      	mov	r4, r3
   1907e:	e77e      	b.n	18f7e <d_name+0x36>
   19080:	1c93      	adds	r3, r2, #2
   19082:	60c3      	str	r3, [r0, #12]
   19084:	6941      	ldr	r1, [r0, #20]
   19086:	6983      	ldr	r3, [r0, #24]
   19088:	4299      	cmp	r1, r3
   1908a:	da3f      	bge.n	1910c <d_name+0x1c4>
   1908c:	008b      	lsls	r3, r1, #2
   1908e:	010a      	lsls	r2, r1, #4
   19090:	6900      	ldr	r0, [r0, #16]
   19092:	1ad2      	subs	r2, r2, r3
   19094:	1c4b      	adds	r3, r1, #1
   19096:	1884      	adds	r4, r0, r2
   19098:	6173      	str	r3, [r6, #20]
   1909a:	d037      	beq.n	1910c <d_name+0x1c4>
   1909c:	2300      	movs	r3, #0
   1909e:	5483      	strb	r3, [r0, r2]
   190a0:	4a4b      	ldr	r2, [pc, #300]	(191d0 <d_name+0x288>)
   190a2:	3303      	adds	r3, #3
   190a4:	6062      	str	r2, [r4, #4]
   190a6:	60a3      	str	r3, [r4, #8]
   190a8:	4630      	mov	r0, r6
   190aa:	f7ff fa57 	bl	1855c <d_unqualified_name>
   190ae:	2101      	movs	r1, #1
   190b0:	4603      	mov	r3, r0
   190b2:	4622      	mov	r2, r4
   190b4:	4630      	mov	r0, r6
   190b6:	f7fe fd15 	bl	17ae4 <d_make_comp>
   190ba:	6b33      	ldr	r3, [r6, #48]
   190bc:	4604      	mov	r4, r0
   190be:	3303      	adds	r3, #3
   190c0:	6333      	str	r3, [r6, #48]
   190c2:	2100      	movs	r1, #0
   190c4:	e774      	b.n	18fb0 <d_name+0x68>
   190c6:	4630      	mov	r0, r6
   190c8:	f7ff fa48 	bl	1855c <d_unqualified_name>
   190cc:	4605      	mov	r5, r0
   190ce:	e7b7      	b.n	19040 <d_name+0xf8>
   190d0:	4630      	mov	r0, r6
   190d2:	2101      	movs	r1, #1
   190d4:	f7fe fe20 	bl	17d18 <d_substitution>
   190d8:	4605      	mov	r5, r0
   190da:	e7b1      	b.n	19040 <d_name+0xf8>
   190dc:	1c51      	adds	r1, r2, #1
   190de:	60f1      	str	r1, [r6, #12]
   190e0:	7853      	ldrb	r3, [r2, #1]
   190e2:	2b73      	cmp	r3, #115
   190e4:	d140      	bne.n	19168 <d_name+0x220>
   190e6:	1c4a      	adds	r2, r1, #1
   190e8:	60f2      	str	r2, [r6, #12]
   190ea:	784b      	ldrb	r3, [r1, #1]
   190ec:	2b5f      	cmp	r3, #95
   190ee:	d05d      	beq.n	191ac <d_name+0x264>
   190f0:	6971      	ldr	r1, [r6, #20]
   190f2:	69b3      	ldr	r3, [r6, #24]
   190f4:	4299      	cmp	r1, r3
   190f6:	db47      	blt.n	19188 <d_name+0x240>
   190f8:	f04f 0c00 	mov.w	ip, #0	; 0x0
   190fc:	4622      	mov	r2, r4
   190fe:	4630      	mov	r0, r6
   19100:	2102      	movs	r1, #2
   19102:	4663      	mov	r3, ip
   19104:	f7fe fcee 	bl	17ae4 <d_make_comp>
   19108:	4604      	mov	r4, r0
   1910a:	e738      	b.n	18f7e <d_name+0x36>
   1910c:	2400      	movs	r4, #0
   1910e:	e7cb      	b.n	190a8 <d_name+0x160>
   19110:	69f3      	ldr	r3, [r6, #28]
   19112:	462f      	mov	r7, r5
   19114:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   19118:	3201      	adds	r2, #1
   1911a:	6232      	str	r2, [r6, #32]
   1911c:	e765      	b.n	18fea <d_name+0xa2>
   1911e:	2c00      	cmp	r4, #0
   19120:	f43f af2d 	beq.w	18f7e <d_name+0x36>
   19124:	6a32      	ldr	r2, [r6, #32]
   19126:	6a73      	ldr	r3, [r6, #36]
   19128:	429a      	cmp	r2, r3
   1912a:	f6bf af37 	bge.w	18f9c <d_name+0x54>
   1912e:	69f3      	ldr	r3, [r6, #28]
   19130:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   19134:	3201      	adds	r2, #1
   19136:	6232      	str	r2, [r6, #32]
   19138:	e741      	b.n	18fbe <d_name+0x76>
   1913a:	2c45      	cmp	r4, #69
   1913c:	d19b      	bne.n	19076 <d_name+0x12e>
   1913e:	f8c8 7000 	str.w	r7, [r8]
   19142:	2f00      	cmp	r7, #0
   19144:	f43f af2a 	beq.w	18f9c <d_name+0x54>
   19148:	780b      	ldrb	r3, [r1, #0]
   1914a:	2b45      	cmp	r3, #69
   1914c:	f47f af26 	bne.w	18f9c <d_name+0x54>
   19150:	1c4b      	adds	r3, r1, #1
   19152:	60f3      	str	r3, [r6, #12]
   19154:	9c01      	ldr	r4, [sp, #4]
   19156:	e712      	b.n	18f7e <d_name+0x36>
   19158:	2f00      	cmp	r7, #0
   1915a:	d08c      	beq.n	19076 <d_name+0x12e>
   1915c:	4630      	mov	r0, r6
   1915e:	f7ff feb1 	bl	18ec4 <d_template_args>
   19162:	2104      	movs	r1, #4
   19164:	4605      	mov	r5, r0
   19166:	e76d      	b.n	19044 <d_name+0xfc>
   19168:	4630      	mov	r0, r6
   1916a:	f7ff feed 	bl	18f48 <d_name>
   1916e:	68f2      	ldr	r2, [r6, #12]
   19170:	4605      	mov	r5, r0
   19172:	7813      	ldrb	r3, [r2, #0]
   19174:	2b5f      	cmp	r3, #95
   19176:	d022      	beq.n	191be <d_name+0x276>
   19178:	4622      	mov	r2, r4
   1917a:	4630      	mov	r0, r6
   1917c:	2102      	movs	r1, #2
   1917e:	462b      	mov	r3, r5
   19180:	f7fe fcb0 	bl	17ae4 <d_make_comp>
   19184:	4604      	mov	r4, r0
   19186:	e6fa      	b.n	18f7e <d_name+0x36>
   19188:	008b      	lsls	r3, r1, #2
   1918a:	010a      	lsls	r2, r1, #4
   1918c:	6930      	ldr	r0, [r6, #16]
   1918e:	1ad2      	subs	r2, r2, r3
   19190:	1c4b      	adds	r3, r1, #1
   19192:	eb10 0c02 	adds.w	ip, r0, r2
   19196:	6173      	str	r3, [r6, #20]
   19198:	d0ae      	beq.n	190f8 <d_name+0x1b0>
   1919a:	2300      	movs	r3, #0
   1919c:	5483      	strb	r3, [r0, r2]
   1919e:	4a0d      	ldr	r2, [pc, #52]	(191d4 <d_name+0x28c>)
   191a0:	330e      	adds	r3, #14
   191a2:	f8cc 2004 	str.w	r2, [ip, #4]
   191a6:	f8cc 3008 	str.w	r3, [ip, #8]
   191aa:	e7a7      	b.n	190fc <d_name+0x1b4>
   191ac:	1c53      	adds	r3, r2, #1
   191ae:	60f3      	str	r3, [r6, #12]
   191b0:	4630      	mov	r0, r6
   191b2:	f7fe fce9 	bl	17b88 <d_number>
   191b6:	2800      	cmp	r0, #0
   191b8:	da9a      	bge.n	190f0 <d_name+0x1a8>
   191ba:	2400      	movs	r4, #0
   191bc:	e6df      	b.n	18f7e <d_name+0x36>
   191be:	1c53      	adds	r3, r2, #1
   191c0:	60f3      	str	r3, [r6, #12]
   191c2:	4630      	mov	r0, r6
   191c4:	f7fe fce0 	bl	17b88 <d_number>
   191c8:	2800      	cmp	r0, #0
   191ca:	dad5      	bge.n	19178 <d_name+0x230>
   191cc:	2400      	movs	r4, #0
   191ce:	e6d6      	b.n	18f7e <d_name+0x36>
   191d0:	00023254 	.word	0x00023254
   191d4:	00023244 	.word	0x00023244

000191d8 <d_growable_string_callback_adapter>:
   191d8:	6853      	ldr	r3, [r2, #4]
   191da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191de:	4615      	mov	r5, r2
   191e0:	3301      	adds	r3, #1
   191e2:	68ac      	ldr	r4, [r5, #8]
   191e4:	eb03 0201 	add.w	r2, r3, r1
   191e8:	42a2      	cmp	r2, r4
   191ea:	4680      	mov	r8, r0
   191ec:	460e      	mov	r6, r1
   191ee:	d811      	bhi.n	19214 <d_growable_string_callback_adapter+0x3c>
   191f0:	68ec      	ldr	r4, [r5, #12]
   191f2:	b96c      	cbnz	r4, 19210 <d_growable_string_callback_adapter+0x38>
   191f4:	686b      	ldr	r3, [r5, #4]
   191f6:	6828      	ldr	r0, [r5, #0]
   191f8:	4641      	mov	r1, r8
   191fa:	18c0      	adds	r0, r0, r3
   191fc:	4632      	mov	r2, r6
   191fe:	f007 fdd9 	bl	20db4 <memcpy>
   19202:	682a      	ldr	r2, [r5, #0]
   19204:	6869      	ldr	r1, [r5, #4]
   19206:	1992      	adds	r2, r2, r6
   19208:	5454      	strb	r4, [r2, r1]
   1920a:	686b      	ldr	r3, [r5, #4]
   1920c:	199b      	adds	r3, r3, r6
   1920e:	606b      	str	r3, [r5, #4]
   19210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19214:	68eb      	ldr	r3, [r5, #12]
   19216:	2b00      	cmp	r3, #0
   19218:	d1fa      	bne.n	19210 <d_growable_string_callback_adapter+0x38>
   1921a:	b914      	cbnz	r4, 19222 <d_growable_string_callback_adapter+0x4a>
   1921c:	2a02      	cmp	r2, #2
   1921e:	d90c      	bls.n	1923a <d_growable_string_callback_adapter+0x62>
   19220:	2402      	movs	r4, #2
   19222:	0064      	lsls	r4, r4, #1
   19224:	42a2      	cmp	r2, r4
   19226:	d8fc      	bhi.n	19222 <d_growable_string_callback_adapter+0x4a>
   19228:	6828      	ldr	r0, [r5, #0]
   1922a:	4621      	mov	r1, r4
   1922c:	f007 fe48 	bl	20ec0 <realloc>
   19230:	4607      	mov	r7, r0
   19232:	b120      	cbz	r0, 1923e <d_growable_string_callback_adapter+0x66>
   19234:	6028      	str	r0, [r5, #0]
   19236:	60ac      	str	r4, [r5, #8]
   19238:	e7da      	b.n	191f0 <d_growable_string_callback_adapter+0x18>
   1923a:	3402      	adds	r4, #2
   1923c:	e7f4      	b.n	19228 <d_growable_string_callback_adapter+0x50>
   1923e:	6828      	ldr	r0, [r5, #0]
   19240:	f007 fb4a 	bl	208d8 <free>
   19244:	2301      	movs	r3, #1
   19246:	602f      	str	r7, [r5, #0]
   19248:	606f      	str	r7, [r5, #4]
   1924a:	60af      	str	r7, [r5, #8]
   1924c:	60eb      	str	r3, [r5, #12]
   1924e:	e7df      	b.n	19210 <d_growable_string_callback_adapter+0x38>

00019250 <d_append_buffer>:
   19250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19254:	4604      	mov	r4, r0
   19256:	4688      	mov	r8, r1
   19258:	4617      	mov	r7, r2
   1925a:	b35a      	cbz	r2, 192b4 <d_append_buffer+0x64>
   1925c:	2500      	movs	r5, #0
   1925e:	f100 0904 	add.w	r9, r0, #4	; 0x4
   19262:	46aa      	mov	sl, r5
   19264:	e00a      	b.n	1927c <d_append_buffer+0x2c>
   19266:	3501      	adds	r5, #1
   19268:	1c4a      	adds	r2, r1, #1
   1926a:	eb04 0301 	add.w	r3, r4, r1
   1926e:	42af      	cmp	r7, r5
   19270:	711e      	strb	r6, [r3, #4]
   19272:	f8c4 2104 	str.w	r2, [r4, #260]
   19276:	f884 6108 	strb.w	r6, [r4, #264]
   1927a:	d91b      	bls.n	192b4 <d_append_buffer+0x64>
   1927c:	f8d4 1104 	ldr.w	r1, [r4, #260]
   19280:	f818 6005 	ldrb.w	r6, [r8, r5]
   19284:	29ff      	cmp	r1, #255
   19286:	d1ee      	bne.n	19266 <d_append_buffer+0x16>
   19288:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1928c:	f8d4 310c 	ldr.w	r3, [r4, #268]
   19290:	f884 a103 	strb.w	sl, [r4, #259]
   19294:	4648      	mov	r0, r9
   19296:	4798      	blx	r3
   19298:	3501      	adds	r5, #1
   1929a:	4651      	mov	r1, sl
   1929c:	1c4a      	adds	r2, r1, #1
   1929e:	eb04 0301 	add.w	r3, r4, r1
   192a2:	42af      	cmp	r7, r5
   192a4:	f8c4 a104 	str.w	sl, [r4, #260]
   192a8:	711e      	strb	r6, [r3, #4]
   192aa:	f8c4 2104 	str.w	r2, [r4, #260]
   192ae:	f884 6108 	strb.w	r6, [r4, #264]
   192b2:	d8e3      	bhi.n	1927c <d_append_buffer+0x2c>
   192b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000192b8 <d_append_string>:
   192b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   192bc:	4604      	mov	r4, r0
   192be:	4608      	mov	r0, r1
   192c0:	4688      	mov	r8, r1
   192c2:	f008 f92d 	bl	21520 <strlen>
   192c6:	4607      	mov	r7, r0
   192c8:	b358      	cbz	r0, 19322 <d_append_string+0x6a>
   192ca:	2500      	movs	r5, #0
   192cc:	f104 0904 	add.w	r9, r4, #4	; 0x4
   192d0:	46aa      	mov	sl, r5
   192d2:	e00a      	b.n	192ea <d_append_string+0x32>
   192d4:	3501      	adds	r5, #1
   192d6:	1c4a      	adds	r2, r1, #1
   192d8:	eb04 0301 	add.w	r3, r4, r1
   192dc:	42af      	cmp	r7, r5
   192de:	711e      	strb	r6, [r3, #4]
   192e0:	f8c4 2104 	str.w	r2, [r4, #260]
   192e4:	f884 6108 	strb.w	r6, [r4, #264]
   192e8:	d91b      	bls.n	19322 <d_append_string+0x6a>
   192ea:	f8d4 1104 	ldr.w	r1, [r4, #260]
   192ee:	f818 6005 	ldrb.w	r6, [r8, r5]
   192f2:	29ff      	cmp	r1, #255
   192f4:	d1ee      	bne.n	192d4 <d_append_string+0x1c>
   192f6:	f8d4 2110 	ldr.w	r2, [r4, #272]
   192fa:	f8d4 310c 	ldr.w	r3, [r4, #268]
   192fe:	f884 a103 	strb.w	sl, [r4, #259]
   19302:	4648      	mov	r0, r9
   19304:	4798      	blx	r3
   19306:	3501      	adds	r5, #1
   19308:	4651      	mov	r1, sl
   1930a:	1c4a      	adds	r2, r1, #1
   1930c:	eb04 0301 	add.w	r3, r4, r1
   19310:	42af      	cmp	r7, r5
   19312:	f8c4 a104 	str.w	sl, [r4, #260]
   19316:	711e      	strb	r6, [r3, #4]
   19318:	f8c4 2104 	str.w	r2, [r4, #260]
   1931c:	f884 6108 	strb.w	r6, [r4, #264]
   19320:	d8e3      	bhi.n	192ea <d_append_string+0x32>
   19322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19326:	46c0      	nop			(mov r8, r8)

00019328 <d_print_array_type>:
   19328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1932c:	4605      	mov	r5, r0
   1932e:	4688      	mov	r8, r1
   19330:	4616      	mov	r6, r2
   19332:	2a00      	cmp	r2, #0
   19334:	d042      	beq.n	193bc <d_print_array_type+0x94>
   19336:	6894      	ldr	r4, [r2, #8]
   19338:	b13c      	cbz	r4, 1934a <d_print_array_type+0x22>
   1933a:	6812      	ldr	r2, [r2, #0]
   1933c:	2a00      	cmp	r2, #0
   1933e:	d1fa      	bne.n	19336 <d_print_array_type+0xe>
   19340:	4628      	mov	r0, r5
   19342:	4631      	mov	r1, r6
   19344:	f000 fe78 	bl	1a038 <d_print_mod_list>
   19348:	e038      	b.n	193bc <d_print_array_type+0x94>
   1934a:	6853      	ldr	r3, [r2, #4]
   1934c:	781a      	ldrb	r2, [r3, #0]
   1934e:	2a25      	cmp	r2, #37
   19350:	f000 8085 	beq.w	1945e <d_print_array_type+0x136>
   19354:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19358:	1d2f      	adds	r7, r5, #4
   1935a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1935e:	f000 8092 	beq.w	19486 <d_print_array_type+0x15e>
   19362:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19366:	2120      	movs	r1, #32
   19368:	eb05 030c 	add.w	r3, r5, ip
   1936c:	2aff      	cmp	r2, #255
   1936e:	7119      	strb	r1, [r3, #4]
   19370:	f8c5 2104 	str.w	r2, [r5, #260]
   19374:	f885 1108 	strb.w	r1, [r5, #264]
   19378:	4694      	mov	ip, r2
   1937a:	f000 8091 	beq.w	194a0 <d_print_array_type+0x178>
   1937e:	2128      	movs	r1, #40
   19380:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19384:	eb05 030c 	add.w	r3, r5, ip
   19388:	7119      	strb	r1, [r3, #4]
   1938a:	f8c5 2104 	str.w	r2, [r5, #260]
   1938e:	f885 1108 	strb.w	r1, [r5, #264]
   19392:	2200      	movs	r2, #0
   19394:	4628      	mov	r0, r5
   19396:	4631      	mov	r1, r6
   19398:	f000 fe4e 	bl	1a038 <d_print_mod_list>
   1939c:	f8d5 c104 	ldr.w	ip, [r5, #260]
   193a0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   193a4:	f000 808a 	beq.w	194bc <d_print_array_type+0x194>
   193a8:	2129      	movs	r1, #41
   193aa:	eb05 030c 	add.w	r3, r5, ip
   193ae:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   193b2:	7119      	strb	r1, [r3, #4]
   193b4:	f8c5 2104 	str.w	r2, [r5, #260]
   193b8:	f885 1108 	strb.w	r1, [r5, #264]
   193bc:	f8d5 c104 	ldr.w	ip, [r5, #260]
   193c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   193c4:	d051      	beq.n	1946a <d_print_array_type+0x142>
   193c6:	2120      	movs	r1, #32
   193c8:	eb05 030c 	add.w	r3, r5, ip
   193cc:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   193d0:	7119      	strb	r1, [r3, #4]
   193d2:	f8c5 2104 	str.w	r2, [r5, #260]
   193d6:	f885 1108 	strb.w	r1, [r5, #264]
   193da:	f8d5 c104 	ldr.w	ip, [r5, #260]
   193de:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   193e2:	d02e      	beq.n	19442 <d_print_array_type+0x11a>
   193e4:	215b      	movs	r1, #91
   193e6:	eb05 030c 	add.w	r3, r5, ip
   193ea:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   193ee:	7119      	strb	r1, [r3, #4]
   193f0:	f8c5 2104 	str.w	r2, [r5, #260]
   193f4:	f885 1108 	strb.w	r1, [r5, #264]
   193f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   193fc:	b111      	cbz	r1, 19404 <d_print_array_type+0xdc>
   193fe:	4628      	mov	r0, r5
   19400:	f000 f86a 	bl	194d8 <d_print_comp>
   19404:	f8d5 c104 	ldr.w	ip, [r5, #260]
   19408:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1940c:	d00b      	beq.n	19426 <d_print_array_type+0xfe>
   1940e:	215d      	movs	r1, #93
   19410:	eb05 030c 	add.w	r3, r5, ip
   19414:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   19418:	7119      	strb	r1, [r3, #4]
   1941a:	f8c5 2104 	str.w	r2, [r5, #260]
   1941e:	f885 1108 	strb.w	r1, [r5, #264]
   19422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19426:	2400      	movs	r4, #0
   19428:	4661      	mov	r1, ip
   1942a:	f885 4103 	strb.w	r4, [r5, #259]
   1942e:	1d28      	adds	r0, r5, #4
   19430:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19434:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19438:	4798      	blx	r3
   1943a:	f8c5 4104 	str.w	r4, [r5, #260]
   1943e:	46a4      	mov	ip, r4
   19440:	e7e5      	b.n	1940e <d_print_array_type+0xe6>
   19442:	2400      	movs	r4, #0
   19444:	4661      	mov	r1, ip
   19446:	f885 4103 	strb.w	r4, [r5, #259]
   1944a:	1d28      	adds	r0, r5, #4
   1944c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19450:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19454:	4798      	blx	r3
   19456:	f8c5 4104 	str.w	r4, [r5, #260]
   1945a:	46a4      	mov	ip, r4
   1945c:	e7c2      	b.n	193e4 <d_print_array_type+0xbc>
   1945e:	4628      	mov	r0, r5
   19460:	4631      	mov	r1, r6
   19462:	4622      	mov	r2, r4
   19464:	f000 fde8 	bl	1a038 <d_print_mod_list>
   19468:	e7b7      	b.n	193da <d_print_array_type+0xb2>
   1946a:	2400      	movs	r4, #0
   1946c:	4661      	mov	r1, ip
   1946e:	f885 4103 	strb.w	r4, [r5, #259]
   19472:	1d28      	adds	r0, r5, #4
   19474:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19478:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1947c:	4798      	blx	r3
   1947e:	f8c5 4104 	str.w	r4, [r5, #260]
   19482:	46a4      	mov	ip, r4
   19484:	e79f      	b.n	193c6 <d_print_array_type+0x9e>
   19486:	4661      	mov	r1, ip
   19488:	f885 4103 	strb.w	r4, [r5, #259]
   1948c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   19490:	f8d5 310c 	ldr.w	r3, [r5, #268]
   19494:	4638      	mov	r0, r7
   19496:	4798      	blx	r3
   19498:	f8c5 4104 	str.w	r4, [r5, #260]
   1949c:	46a4      	mov	ip, r4
   1949e:	e760      	b.n	19362 <d_print_array_type+0x3a>
   194a0:	2400      	movs	r4, #0
   194a2:	4661      	mov	r1, ip
   194a4:	f885 4103 	strb.w	r4, [r5, #259]
   194a8:	f8d5 2110 	ldr.w	r2, [r5, #272]
   194ac:	f8d5 310c 	ldr.w	r3, [r5, #268]
   194b0:	4638      	mov	r0, r7
   194b2:	4798      	blx	r3
   194b4:	f8c5 4104 	str.w	r4, [r5, #260]
   194b8:	46a4      	mov	ip, r4
   194ba:	e760      	b.n	1937e <d_print_array_type+0x56>
   194bc:	2400      	movs	r4, #0
   194be:	4661      	mov	r1, ip
   194c0:	f885 4103 	strb.w	r4, [r5, #259]
   194c4:	f8d5 2110 	ldr.w	r2, [r5, #272]
   194c8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   194cc:	4638      	mov	r0, r7
   194ce:	4798      	blx	r3
   194d0:	f8c5 4104 	str.w	r4, [r5, #260]
   194d4:	46a4      	mov	ip, r4
   194d6:	e767      	b.n	193a8 <d_print_array_type+0x80>

000194d8 <d_print_comp>:
   194d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194dc:	4680      	mov	r8, r0
   194de:	b09b      	sub	sp, #108
   194e0:	460f      	mov	r7, r1
   194e2:	2900      	cmp	r1, #0
   194e4:	d06e      	beq.n	195c4 <d_print_comp+0xec>
   194e6:	f8d0 311c 	ldr.w	r3, [r0, #284]
   194ea:	2b00      	cmp	r3, #0
   194ec:	d167      	bne.n	195be <d_print_comp+0xe6>
   194ee:	7808      	ldrb	r0, [r1, #0]
   194f0:	2836      	cmp	r0, #54
   194f2:	d867      	bhi.n	195c4 <d_print_comp+0xec>
   194f4:	e8df f010 	tbh	[pc, r0, lsl #1]
   194f8:	006a021a 	.word	0x006a021a
   194fc:	0127006a 	.word	0x0127006a
   19500:	02b9028b 	.word	0x02b9028b
   19504:	02e00079 	.word	0x02e00079
   19508:	03a103cc 	.word	0x03a103cc
   1950c:	03d503e7 	.word	0x03d503e7
   19510:	023b03de 	.word	0x023b03de
   19514:	024f0245 	.word	0x024f0245
   19518:	02630259 	.word	0x02630259
   1951c:	0277026d 	.word	0x0277026d
   19520:	00880281 	.word	0x00880281
   19524:	01c301c3 	.word	0x01c301c3
   19528:	031201c3 	.word	0x031201c3
   1952c:	03120312 	.word	0x03120312
   19530:	03120312 	.word	0x03120312
   19534:	03120312 	.word	0x03120312
   19538:	03120312 	.word	0x03120312
   1953c:	0083032d 	.word	0x0083032d
   19540:	033a01da 	.word	0x033a01da
   19544:	02e903aa 	.word	0x02e903aa
   19548:	02fb02e9 	.word	0x02fb02e9
   1954c:	011d0113 	.word	0x011d0113
   19550:	00a3008e 	.word	0x00a3008e
   19554:	00df0066 	.word	0x00df0066
   19558:	00660066 	.word	0x00660066
   1955c:	00370037 	.word	0x00370037
   19560:	0211007e 	.word	0x0211007e
   19564:	010e      	.short	0x010e
   19566:	684a      	ldr	r2, [r1, #4]
   19568:	7813      	ldrb	r3, [r2, #0]
   1956a:	2b22      	cmp	r3, #34
   1956c:	f040 8402 	bne.w	19d74 <d_print_comp+0x89c>
   19570:	6853      	ldr	r3, [r2, #4]
   19572:	7c1c      	ldrb	r4, [r3, #16]
   19574:	b12c      	cbz	r4, 19582 <d_print_comp+0xaa>
   19576:	2c06      	cmp	r4, #6
   19578:	f240 843f 	bls.w	19dfa <d_print_comp+0x922>
   1957c:	2c07      	cmp	r4, #7
   1957e:	f000 8423 	beq.w	19dc8 <d_print_comp+0x8f0>
   19582:	2128      	movs	r1, #40
   19584:	4640      	mov	r0, r8
   19586:	f7fe fc91 	bl	17eac <d_append_char>
   1958a:	6879      	ldr	r1, [r7, #4]
   1958c:	4640      	mov	r0, r8
   1958e:	f7ff ffa3 	bl	194d8 <d_print_comp>
   19592:	2129      	movs	r1, #41
   19594:	4640      	mov	r0, r8
   19596:	f7fe fc89 	bl	17eac <d_append_char>
   1959a:	783b      	ldrb	r3, [r7, #0]
   1959c:	2b33      	cmp	r3, #51
   1959e:	f000 8467 	beq.w	19e70 <d_print_comp+0x998>
   195a2:	2c08      	cmp	r4, #8
   195a4:	d121      	bne.n	195ea <d_print_comp+0x112>
   195a6:	4640      	mov	r0, r8
   195a8:	215b      	movs	r1, #91
   195aa:	f7fe fc7f 	bl	17eac <d_append_char>
   195ae:	68b9      	ldr	r1, [r7, #8]
   195b0:	4640      	mov	r0, r8
   195b2:	f7ff ff91 	bl	194d8 <d_print_comp>
   195b6:	4640      	mov	r0, r8
   195b8:	215d      	movs	r1, #93
   195ba:	f7fe fc77 	bl	17eac <d_append_char>
   195be:	b01b      	add	sp, #108
   195c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195c4:	2301      	movs	r3, #1
   195c6:	f8c8 311c 	str.w	r3, [r8, #284]
   195ca:	e7f8      	b.n	195be <d_print_comp+0xe6>
   195cc:	6849      	ldr	r1, [r1, #4]
   195ce:	4640      	mov	r0, r8
   195d0:	f7ff ff82 	bl	194d8 <d_print_comp>
   195d4:	f8d8 3000 	ldr.w	r3, [r8]
   195d8:	f013 0f04 	tst.w	r3, #4	; 0x4
   195dc:	f040 83c5 	bne.w	19d6a <d_print_comp+0x892>
   195e0:	4640      	mov	r0, r8
   195e2:	f8df 1900 	ldr.w	r1, [pc, #2304]	; 19ee4 <d_print_comp+0xa0c>
   195e6:	f7ff fe67 	bl	192b8 <d_append_string>
   195ea:	68b9      	ldr	r1, [r7, #8]
   195ec:	4640      	mov	r0, r8
   195ee:	f7ff ff73 	bl	194d8 <d_print_comp>
   195f2:	e7e4      	b.n	195be <d_print_comp+0xe6>
   195f4:	4640      	mov	r0, r8
   195f6:	f8df 18f0 	ldr.w	r1, [pc, #2288]	; 19ee8 <d_print_comp+0xa10>
   195fa:	f7ff fe5d 	bl	192b8 <d_append_string>
   195fe:	6879      	ldr	r1, [r7, #4]
   19600:	4640      	mov	r0, r8
   19602:	f7ff ff69 	bl	194d8 <d_print_comp>
   19606:	e7da      	b.n	195be <d_print_comp+0xe6>
   19608:	6879      	ldr	r1, [r7, #4]
   1960a:	68ba      	ldr	r2, [r7, #8]
   1960c:	4640      	mov	r0, r8
   1960e:	f7ff fe1f 	bl	19250 <d_append_buffer>
   19612:	e7d4      	b.n	195be <d_print_comp+0xe6>
   19614:	6849      	ldr	r1, [r1, #4]
   19616:	780b      	ldrb	r3, [r1, #0]
   19618:	2b2b      	cmp	r3, #43
   1961a:	f000 83ba 	beq.w	19d92 <d_print_comp+0x8ba>
   1961e:	4640      	mov	r0, r8
   19620:	f000 feda 	bl	1a3d8 <d_print_expr_op>
   19624:	2128      	movs	r1, #40
   19626:	4640      	mov	r0, r8
   19628:	f7fe fc40 	bl	17eac <d_append_char>
   1962c:	68b9      	ldr	r1, [r7, #8]
   1962e:	4640      	mov	r0, r8
   19630:	f7ff ff52 	bl	194d8 <d_print_comp>
   19634:	4640      	mov	r0, r8
   19636:	2129      	movs	r1, #41
   19638:	f7fe fc38 	bl	17eac <d_append_char>
   1963c:	e7bf      	b.n	195be <d_print_comp+0xe6>
   1963e:	688b      	ldr	r3, [r1, #8]
   19640:	781a      	ldrb	r2, [r3, #0]
   19642:	2a2e      	cmp	r2, #46
   19644:	d1be      	bne.n	195c4 <d_print_comp+0xec>
   19646:	684a      	ldr	r2, [r1, #4]
   19648:	7813      	ldrb	r3, [r2, #0]
   1964a:	2b29      	cmp	r3, #41
   1964c:	f000 8416 	beq.w	19e7c <d_print_comp+0x9a4>
   19650:	2128      	movs	r1, #40
   19652:	4640      	mov	r0, r8
   19654:	f7fe fc2a 	bl	17eac <d_append_char>
   19658:	68bb      	ldr	r3, [r7, #8]
   1965a:	4640      	mov	r0, r8
   1965c:	6859      	ldr	r1, [r3, #4]
   1965e:	f7ff ff3b 	bl	194d8 <d_print_comp>
   19662:	4640      	mov	r0, r8
   19664:	f8df 1884 	ldr.w	r1, [pc, #2180]	; 19eec <d_print_comp+0xa14>
   19668:	f7ff fe26 	bl	192b8 <d_append_string>
   1966c:	6879      	ldr	r1, [r7, #4]
   1966e:	4640      	mov	r0, r8
   19670:	f000 feb2 	bl	1a3d8 <d_print_expr_op>
   19674:	4640      	mov	r0, r8
   19676:	f8df 1878 	ldr.w	r1, [pc, #2168]	; 19ef0 <d_print_comp+0xa18>
   1967a:	f7ff fe1d 	bl	192b8 <d_append_string>
   1967e:	68bb      	ldr	r3, [r7, #8]
   19680:	4640      	mov	r0, r8
   19682:	6899      	ldr	r1, [r3, #8]
   19684:	f7ff ff28 	bl	194d8 <d_print_comp>
   19688:	2129      	movs	r1, #41
   1968a:	4640      	mov	r0, r8
   1968c:	f7fe fc0e 	bl	17eac <d_append_char>
   19690:	6879      	ldr	r1, [r7, #4]
   19692:	f891 c000 	ldrb.w	ip, [r1]
   19696:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
   1969a:	d190      	bne.n	195be <d_print_comp+0xe6>
   1969c:	6849      	ldr	r1, [r1, #4]
   1969e:	688b      	ldr	r3, [r1, #8]
   196a0:	2b01      	cmp	r3, #1
   196a2:	d18c      	bne.n	195be <d_print_comp+0xe6>
   196a4:	684b      	ldr	r3, [r1, #4]
   196a6:	781a      	ldrb	r2, [r3, #0]
   196a8:	2a3e      	cmp	r2, #62
   196aa:	d188      	bne.n	195be <d_print_comp+0xe6>
   196ac:	4640      	mov	r0, r8
   196ae:	4661      	mov	r1, ip
   196b0:	f7fe fbfc 	bl	17eac <d_append_char>
   196b4:	e783      	b.n	195be <d_print_comp+0xe6>
   196b6:	688a      	ldr	r2, [r1, #8]
   196b8:	7813      	ldrb	r3, [r2, #0]
   196ba:	2b30      	cmp	r3, #48
   196bc:	d182      	bne.n	195c4 <d_print_comp+0xec>
   196be:	6893      	ldr	r3, [r2, #8]
   196c0:	781a      	ldrb	r2, [r3, #0]
   196c2:	2a31      	cmp	r2, #49
   196c4:	f47f af7e 	bne.w	195c4 <d_print_comp+0xec>
   196c8:	4640      	mov	r0, r8
   196ca:	2128      	movs	r1, #40
   196cc:	f7fe fbee 	bl	17eac <d_append_char>
   196d0:	68bb      	ldr	r3, [r7, #8]
   196d2:	4640      	mov	r0, r8
   196d4:	6859      	ldr	r1, [r3, #4]
   196d6:	f7ff feff 	bl	194d8 <d_print_comp>
   196da:	4640      	mov	r0, r8
   196dc:	f8df 180c 	ldr.w	r1, [pc, #2060]	; 19eec <d_print_comp+0xa14>
   196e0:	f7ff fdea 	bl	192b8 <d_append_string>
   196e4:	6879      	ldr	r1, [r7, #4]
   196e6:	4640      	mov	r0, r8
   196e8:	f000 fe76 	bl	1a3d8 <d_print_expr_op>
   196ec:	4640      	mov	r0, r8
   196ee:	f8df 1800 	ldr.w	r1, [pc, #2048]	; 19ef0 <d_print_comp+0xa18>
   196f2:	f7ff fde1 	bl	192b8 <d_append_string>
   196f6:	68bb      	ldr	r3, [r7, #8]
   196f8:	4640      	mov	r0, r8
   196fa:	689a      	ldr	r2, [r3, #8]
   196fc:	6851      	ldr	r1, [r2, #4]
   196fe:	f7ff feeb 	bl	194d8 <d_print_comp>
   19702:	f8df 17f0 	ldr.w	r1, [pc, #2032]	; 19ef4 <d_print_comp+0xa1c>
   19706:	4640      	mov	r0, r8
   19708:	f7ff fdd6 	bl	192b8 <d_append_string>
   1970c:	68bb      	ldr	r3, [r7, #8]
   1970e:	689a      	ldr	r2, [r3, #8]
   19710:	6891      	ldr	r1, [r2, #8]
   19712:	e78c      	b.n	1962e <d_print_comp+0x156>
   19714:	7909      	ldrb	r1, [r1, #4]
   19716:	4640      	mov	r0, r8
   19718:	f7fe fbc8 	bl	17eac <d_append_char>
   1971c:	e74f      	b.n	195be <d_print_comp+0xe6>
   1971e:	4640      	mov	r0, r8
   19720:	f8df 17d4 	ldr.w	r1, [pc, #2004]	; 19ef8 <d_print_comp+0xa20>
   19724:	f7ff fdc8 	bl	192b8 <d_append_string>
   19728:	68b9      	ldr	r1, [r7, #8]
   1972a:	4640      	mov	r0, r8
   1972c:	f7ff fed4 	bl	194d8 <d_print_comp>
   19730:	e745      	b.n	195be <d_print_comp+0xe6>
   19732:	4640      	mov	r0, r8
   19734:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 19ef8 <d_print_comp+0xa20>
   19738:	f7ff fdbe 	bl	192b8 <d_append_string>
   1973c:	4640      	mov	r0, r8
   1973e:	4639      	mov	r1, r7
   19740:	f000 fdd6 	bl	1a2f0 <d_print_cast>
   19744:	e73b      	b.n	195be <d_print_comp+0xe6>
   19746:	f8d8 3118 	ldr.w	r3, [r8, #280]
   1974a:	9302      	str	r3, [sp, #8]
   1974c:	684d      	ldr	r5, [r1, #4]
   1974e:	2d00      	cmp	r5, #0
   19750:	f43f af38 	beq.w	195c4 <d_print_comp+0xec>
   19754:	7829      	ldrb	r1, [r5, #0]
   19756:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   1975a:	f84b 3d58 	str.w	r3, [fp, #-88]!
   1975e:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   19762:	f8d8 0114 	ldr.w	r0, [r8, #276]
   19766:	b2db      	uxtb	r3, r3
   19768:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1976c:	2b02      	cmp	r3, #2
   1976e:	f8c8 b118 	str.w	fp, [r8, #280]
   19772:	9505      	str	r5, [sp, #20]
   19774:	f8cd c018 	str.w	ip, [sp, #24]
   19778:	9007      	str	r0, [sp, #28]
   1977a:	f200 83a5 	bhi.w	19ec8 <d_print_comp+0x9f0>
   1977e:	aa08      	add	r2, sp, #32
   19780:	2601      	movs	r6, #1
   19782:	686d      	ldr	r5, [r5, #4]
   19784:	2d00      	cmp	r5, #0
   19786:	f43f af1d 	beq.w	195c4 <d_print_comp+0xec>
   1978a:	2e04      	cmp	r6, #4
   1978c:	f43f af1a 	beq.w	195c4 <d_print_comp+0xec>
   19790:	f8d8 3118 	ldr.w	r3, [r8, #280]
   19794:	7829      	ldrb	r1, [r5, #0]
   19796:	6013      	str	r3, [r2, #0]
   19798:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   1979c:	b2db      	uxtb	r3, r3
   1979e:	f8c8 2118 	str.w	r2, [r8, #280]
   197a2:	6055      	str	r5, [r2, #4]
   197a4:	f8c2 c008 	str.w	ip, [r2, #8]
   197a8:	60d0      	str	r0, [r2, #12]
   197aa:	3601      	adds	r6, #1
   197ac:	3210      	adds	r2, #16
   197ae:	2b02      	cmp	r3, #2
   197b0:	d9e7      	bls.n	19782 <d_print_comp+0x2aa>
   197b2:	2904      	cmp	r1, #4
   197b4:	bf01      	itttt	eq
   197b6:	ab1a      	addeq	r3, sp, #104
   197b8:	f843 0d08 	streq.w	r0, [r3, #-8]!
   197bc:	f8c8 3114 	streq.w	r3, [r8, #276]
   197c0:	9519      	streq	r5, [sp, #100]
   197c2:	d042      	beq.n	1984a <d_print_comp+0x372>
   197c4:	2902      	cmp	r1, #2
   197c6:	d140      	bne.n	1984a <d_print_comp+0x372>
   197c8:	f8d5 c008 	ldr.w	ip, [r5, #8]
   197cc:	f89c 3000 	ldrb.w	r3, [ip]
   197d0:	3b19      	subs	r3, #25
   197d2:	b2db      	uxtb	r3, r3
   197d4:	2b02      	cmp	r3, #2
   197d6:	d838      	bhi.n	1984a <d_print_comp+0x372>
   197d8:	2e03      	cmp	r6, #3
   197da:	f63f aef3 	bhi.w	195c4 <d_print_comp+0xec>
   197de:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
   197e2:	3b01      	subs	r3, #1
   197e4:	011b      	lsls	r3, r3, #4
   197e6:	1e72      	subs	r2, r6, #1
   197e8:	eb0b 0403 	add.w	r4, fp, r3
   197ec:	0112      	lsls	r2, r2, #4
   197ee:	0133      	lsls	r3, r6, #4
   197f0:	eb0b 0902 	add.w	r9, fp, r2
   197f4:	eb0b 0a03 	add.w	sl, fp, r3
   197f8:	e007      	b.n	1980a <d_print_comp+0x332>
   197fa:	2e03      	cmp	r6, #3
   197fc:	9c01      	ldr	r4, [sp, #4]
   197fe:	f109 0910 	add.w	r9, r9, #16	; 0x10
   19802:	f10a 0a10 	add.w	sl, sl, #16	; 0x10
   19806:	f63f aedd 	bhi.w	195c4 <d_print_comp+0xec>
   1980a:	f104 0210 	add.w	r2, r4, #16	; 0x10
   1980e:	9201      	str	r2, [sp, #4]
   19810:	4610      	mov	r0, r2
   19812:	4621      	mov	r1, r4
   19814:	2210      	movs	r2, #16
   19816:	f8cd c000 	str.w	ip, [sp]
   1981a:	f007 facb 	bl	20db4 <memcpy>
   1981e:	2300      	movs	r3, #0
   19820:	f8dd c000 	ldr.w	ip, [sp]
   19824:	60a3      	str	r3, [r4, #8]
   19826:	f8d8 3114 	ldr.w	r3, [r8, #276]
   1982a:	f8c4 9010 	str.w	r9, [r4, #16]
   1982e:	60e3      	str	r3, [r4, #12]
   19830:	f8c8 a118 	str.w	sl, [r8, #280]
   19834:	f8c4 c004 	str.w	ip, [r4, #4]
   19838:	f8dc c004 	ldr.w	ip, [ip, #4]
   1983c:	3601      	adds	r6, #1
   1983e:	f89c 3000 	ldrb.w	r3, [ip]
   19842:	3b19      	subs	r3, #25
   19844:	b2db      	uxtb	r3, r3
   19846:	2b02      	cmp	r3, #2
   19848:	d9d7      	bls.n	197fa <d_print_comp+0x322>
   1984a:	68b9      	ldr	r1, [r7, #8]
   1984c:	4640      	mov	r0, r8
   1984e:	f7ff fe43 	bl	194d8 <d_print_comp>
   19852:	782b      	ldrb	r3, [r5, #0]
   19854:	2b04      	cmp	r3, #4
   19856:	bf04      	itt	eq
   19858:	9b18      	ldreq	r3, [sp, #96]
   1985a:	f8c8 3114 	streq.w	r3, [r8, #276]
   1985e:	b156      	cbz	r6, 19876 <d_print_comp+0x39e>
   19860:	0133      	lsls	r3, r6, #4
   19862:	eb0b 0403 	add.w	r4, fp, r3
   19866:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1986a:	2b00      	cmp	r3, #0
   1986c:	f000 82a2 	beq.w	19db4 <d_print_comp+0x8dc>
   19870:	3c10      	subs	r4, #16
   19872:	455c      	cmp	r4, fp
   19874:	d1f7      	bne.n	19866 <d_print_comp+0x38e>
   19876:	9a02      	ldr	r2, [sp, #8]
   19878:	f8c8 2118 	str.w	r2, [r8, #280]
   1987c:	e69f      	b.n	195be <d_print_comp+0xe6>
   1987e:	f8d8 4118 	ldr.w	r4, [r8, #280]
   19882:	2c00      	cmp	r4, #0
   19884:	f000 814c 	beq.w	19b20 <d_print_comp+0x648>
   19888:	4621      	mov	r1, r4
   1988a:	688b      	ldr	r3, [r1, #8]
   1988c:	b953      	cbnz	r3, 198a4 <d_print_comp+0x3cc>
   1988e:	684a      	ldr	r2, [r1, #4]
   19890:	7812      	ldrb	r2, [r2, #0]
   19892:	f1a2 0316 	sub.w	r3, r2, #22	; 0x16
   19896:	b2db      	uxtb	r3, r3
   19898:	2b02      	cmp	r3, #2
   1989a:	f200 8141 	bhi.w	19b20 <d_print_comp+0x648>
   1989e:	4290      	cmp	r0, r2
   198a0:	f43f aead 	beq.w	195fe <d_print_comp+0x126>
   198a4:	6809      	ldr	r1, [r1, #0]
   198a6:	2900      	cmp	r1, #0
   198a8:	d1ef      	bne.n	1988a <d_print_comp+0x3b2>
   198aa:	e139      	b.n	19b20 <d_print_comp+0x648>
   198ac:	f8d8 3000 	ldr.w	r3, [r8]
   198b0:	f013 0f20 	tst.w	r3, #32	; 0x20
   198b4:	f040 8267 	bne.w	19d86 <d_print_comp+0x8ae>
   198b8:	687b      	ldr	r3, [r7, #4]
   198ba:	b30b      	cbz	r3, 19900 <d_print_comp+0x428>
   198bc:	f8d8 2118 	ldr.w	r2, [r8, #280]
   198c0:	ab1a      	add	r3, sp, #104
   198c2:	f843 2d18 	str.w	r2, [r3, #-24]!
   198c6:	f8d8 2114 	ldr.w	r2, [r8, #276]
   198ca:	f8c8 3118 	str.w	r3, [r8, #280]
   198ce:	2300      	movs	r3, #0
   198d0:	9316      	str	r3, [sp, #88]
   198d2:	9217      	str	r2, [sp, #92]
   198d4:	9715      	str	r7, [sp, #84]
   198d6:	6879      	ldr	r1, [r7, #4]
   198d8:	4640      	mov	r0, r8
   198da:	f7ff fdfd 	bl	194d8 <d_print_comp>
   198de:	9b14      	ldr	r3, [sp, #80]
   198e0:	9a16      	ldr	r2, [sp, #88]
   198e2:	f8c8 3118 	str.w	r3, [r8, #280]
   198e6:	2a00      	cmp	r2, #0
   198e8:	f47f ae69 	bne.w	195be <d_print_comp+0xe6>
   198ec:	f8d8 3000 	ldr.w	r3, [r8]
   198f0:	f013 0f20 	tst.w	r3, #32	; 0x20
   198f4:	f47f ae63 	bne.w	195be <d_print_comp+0xe6>
   198f8:	4640      	mov	r0, r8
   198fa:	2120      	movs	r1, #32
   198fc:	f7fe fad6 	bl	17eac <d_append_char>
   19900:	f8d8 3000 	ldr.w	r3, [r8]
   19904:	f013 0f20 	tst.w	r3, #32	; 0x20
   19908:	f47f ae59 	bne.w	195be <d_print_comp+0xe6>
   1990c:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19910:	4640      	mov	r0, r8
   19912:	4639      	mov	r1, r7
   19914:	f000 fbfe 	bl	1a114 <d_print_function_type>
   19918:	e651      	b.n	195be <d_print_comp+0xe6>
   1991a:	4640      	mov	r0, r8
   1991c:	6849      	ldr	r1, [r1, #4]
   1991e:	f7ff fddb 	bl	194d8 <d_print_comp>
   19922:	68b9      	ldr	r1, [r7, #8]
   19924:	4640      	mov	r0, r8
   19926:	f7ff fdd7 	bl	194d8 <d_print_comp>
   1992a:	e648      	b.n	195be <d_print_comp+0xe6>
   1992c:	f8d8 3000 	ldr.w	r3, [r8]
   19930:	f013 0f04 	tst.w	r3, #4	; 0x4
   19934:	f43f ae68 	beq.w	19608 <d_print_comp+0x130>
   19938:	684a      	ldr	r2, [r1, #4]
   1993a:	688b      	ldr	r3, [r1, #8]
   1993c:	eb02 0503 	add.w	r5, r2, r3
   19940:	42aa      	cmp	r2, r5
   19942:	d30c      	bcc.n	1995e <d_print_comp+0x486>
   19944:	e63b      	b.n	195be <d_print_comp+0xe6>
   19946:	7811      	ldrb	r1, [r2, #0]
   19948:	295f      	cmp	r1, #95
   1994a:	f000 81cd 	beq.w	19ce8 <d_print_comp+0x810>
   1994e:	1c54      	adds	r4, r2, #1
   19950:	4640      	mov	r0, r8
   19952:	f7fe faab 	bl	17eac <d_append_char>
   19956:	42a5      	cmp	r5, r4
   19958:	f67f ae31 	bls.w	195be <d_print_comp+0xe6>
   1995c:	4622      	mov	r2, r4
   1995e:	ebc2 0305 	rsb	r3, r2, r5
   19962:	2b03      	cmp	r3, #3
   19964:	dcef      	bgt.n	19946 <d_print_comp+0x46e>
   19966:	4614      	mov	r4, r2
   19968:	f814 1b01 	ldrb.w	r1, [r4], #1
   1996c:	e7f0      	b.n	19950 <d_print_comp+0x478>
   1996e:	4640      	mov	r0, r8
   19970:	f8df 1588 	ldr.w	r1, [pc, #1416]	; 19efc <d_print_comp+0xa24>
   19974:	f7ff fca0 	bl	192b8 <d_append_string>
   19978:	6879      	ldr	r1, [r7, #4]
   1997a:	4640      	mov	r0, r8
   1997c:	f7ff fdac 	bl	194d8 <d_print_comp>
   19980:	e61d      	b.n	195be <d_print_comp+0xe6>
   19982:	4640      	mov	r0, r8
   19984:	f8df 1578 	ldr.w	r1, [pc, #1400]	; 19f00 <d_print_comp+0xa28>
   19988:	f7ff fc96 	bl	192b8 <d_append_string>
   1998c:	6879      	ldr	r1, [r7, #4]
   1998e:	4640      	mov	r0, r8
   19990:	f7ff fda2 	bl	194d8 <d_print_comp>
   19994:	e613      	b.n	195be <d_print_comp+0xe6>
   19996:	4640      	mov	r0, r8
   19998:	f8df 1568 	ldr.w	r1, [pc, #1384]	; 19f04 <d_print_comp+0xa2c>
   1999c:	f7ff fc8c 	bl	192b8 <d_append_string>
   199a0:	6879      	ldr	r1, [r7, #4]
   199a2:	4640      	mov	r0, r8
   199a4:	f7ff fd98 	bl	194d8 <d_print_comp>
   199a8:	e609      	b.n	195be <d_print_comp+0xe6>
   199aa:	4640      	mov	r0, r8
   199ac:	f8df 1558 	ldr.w	r1, [pc, #1368]	; 19f08 <d_print_comp+0xa30>
   199b0:	f7ff fc82 	bl	192b8 <d_append_string>
   199b4:	6879      	ldr	r1, [r7, #4]
   199b6:	4640      	mov	r0, r8
   199b8:	f7ff fd8e 	bl	194d8 <d_print_comp>
   199bc:	e5ff      	b.n	195be <d_print_comp+0xe6>
   199be:	4640      	mov	r0, r8
   199c0:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 19f0c <d_print_comp+0xa34>
   199c4:	f7ff fc78 	bl	192b8 <d_append_string>
   199c8:	6879      	ldr	r1, [r7, #4]
   199ca:	4640      	mov	r0, r8
   199cc:	f7ff fd84 	bl	194d8 <d_print_comp>
   199d0:	e5f5      	b.n	195be <d_print_comp+0xe6>
   199d2:	4640      	mov	r0, r8
   199d4:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 19f10 <d_print_comp+0xa38>
   199d8:	f7ff fc6e 	bl	192b8 <d_append_string>
   199dc:	6879      	ldr	r1, [r7, #4]
   199de:	4640      	mov	r0, r8
   199e0:	f7ff fd7a 	bl	194d8 <d_print_comp>
   199e4:	e5eb      	b.n	195be <d_print_comp+0xe6>
   199e6:	4640      	mov	r0, r8
   199e8:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 19f14 <d_print_comp+0xa3c>
   199ec:	f7ff fc64 	bl	192b8 <d_append_string>
   199f0:	6879      	ldr	r1, [r7, #4]
   199f2:	4640      	mov	r0, r8
   199f4:	f7ff fd70 	bl	194d8 <d_print_comp>
   199f8:	e5e1      	b.n	195be <d_print_comp+0xe6>
   199fa:	4640      	mov	r0, r8
   199fc:	f8df 1518 	ldr.w	r1, [pc, #1304]	; 19f18 <d_print_comp+0xa40>
   19a00:	f7ff fc5a 	bl	192b8 <d_append_string>
   19a04:	6879      	ldr	r1, [r7, #4]
   19a06:	4640      	mov	r0, r8
   19a08:	f7ff fd66 	bl	194d8 <d_print_comp>
   19a0c:	e5d7      	b.n	195be <d_print_comp+0xe6>
   19a0e:	2300      	movs	r3, #0
   19a10:	f8d8 5118 	ldr.w	r5, [r8, #280]
   19a14:	f8c8 3118 	str.w	r3, [r8, #280]
   19a18:	f8d8 3000 	ldr.w	r3, [r8]
   19a1c:	684c      	ldr	r4, [r1, #4]
   19a1e:	f013 0f04 	tst.w	r3, #4	; 0x4
   19a22:	d005      	beq.n	19a30 <d_print_comp+0x558>
   19a24:	7823      	ldrb	r3, [r4, #0]
   19a26:	b91b      	cbnz	r3, 19a30 <d_print_comp+0x558>
   19a28:	68a2      	ldr	r2, [r4, #8]
   19a2a:	2a06      	cmp	r2, #6
   19a2c:	f000 8239 	beq.w	19ea2 <d_print_comp+0x9ca>
   19a30:	4640      	mov	r0, r8
   19a32:	4621      	mov	r1, r4
   19a34:	f7ff fd50 	bl	194d8 <d_print_comp>
   19a38:	f898 3108 	ldrb.w	r3, [r8, #264]
   19a3c:	2b3c      	cmp	r3, #60
   19a3e:	f000 8212 	beq.w	19e66 <d_print_comp+0x98e>
   19a42:	213c      	movs	r1, #60
   19a44:	4640      	mov	r0, r8
   19a46:	f7fe fa31 	bl	17eac <d_append_char>
   19a4a:	68b9      	ldr	r1, [r7, #8]
   19a4c:	4640      	mov	r0, r8
   19a4e:	f7ff fd43 	bl	194d8 <d_print_comp>
   19a52:	f898 3108 	ldrb.w	r3, [r8, #264]
   19a56:	2b3e      	cmp	r3, #62
   19a58:	f000 8200 	beq.w	19e5c <d_print_comp+0x984>
   19a5c:	4640      	mov	r0, r8
   19a5e:	213e      	movs	r1, #62
   19a60:	f7fe fa24 	bl	17eac <d_append_char>
   19a64:	f8c8 5118 	str.w	r5, [r8, #280]
   19a68:	e5a9      	b.n	195be <d_print_comp+0xe6>
   19a6a:	f8d8 4114 	ldr.w	r4, [r8, #276]
   19a6e:	2c00      	cmp	r4, #0
   19a70:	f43f ada8 	beq.w	195c4 <d_print_comp+0xec>
   19a74:	6863      	ldr	r3, [r4, #4]
   19a76:	6849      	ldr	r1, [r1, #4]
   19a78:	689a      	ldr	r2, [r3, #8]
   19a7a:	2a00      	cmp	r2, #0
   19a7c:	f43f ada2 	beq.w	195c4 <d_print_comp+0xec>
   19a80:	7813      	ldrb	r3, [r2, #0]
   19a82:	2b28      	cmp	r3, #40
   19a84:	d009      	beq.n	19a9a <d_print_comp+0x5c2>
   19a86:	e59d      	b.n	195c4 <d_print_comp+0xec>
   19a88:	6892      	ldr	r2, [r2, #8]
   19a8a:	2a00      	cmp	r2, #0
   19a8c:	f43f ad9a 	beq.w	195c4 <d_print_comp+0xec>
   19a90:	7813      	ldrb	r3, [r2, #0]
   19a92:	2b28      	cmp	r3, #40
   19a94:	f47f ad96 	bne.w	195c4 <d_print_comp+0xec>
   19a98:	3901      	subs	r1, #1
   19a9a:	2900      	cmp	r1, #0
   19a9c:	dcf4      	bgt.n	19a88 <d_print_comp+0x5b0>
   19a9e:	2900      	cmp	r1, #0
   19aa0:	f47f ad90 	bne.w	195c4 <d_print_comp+0xec>
   19aa4:	6823      	ldr	r3, [r4, #0]
   19aa6:	4640      	mov	r0, r8
   19aa8:	f8c8 3114 	str.w	r3, [r8, #276]
   19aac:	6851      	ldr	r1, [r2, #4]
   19aae:	f7ff fd13 	bl	194d8 <d_print_comp>
   19ab2:	f8c8 4114 	str.w	r4, [r8, #276]
   19ab6:	e582      	b.n	195be <d_print_comp+0xe6>
   19ab8:	4640      	mov	r0, r8
   19aba:	217e      	movs	r1, #126
   19abc:	f7fe f9f6 	bl	17eac <d_append_char>
   19ac0:	68b9      	ldr	r1, [r7, #8]
   19ac2:	4640      	mov	r0, r8
   19ac4:	f7ff fd08 	bl	194d8 <d_print_comp>
   19ac8:	e579      	b.n	195be <d_print_comp+0xe6>
   19aca:	6849      	ldr	r1, [r1, #4]
   19acc:	4640      	mov	r0, r8
   19ace:	f7ff fd03 	bl	194d8 <d_print_comp>
   19ad2:	68bb      	ldr	r3, [r7, #8]
   19ad4:	2b00      	cmp	r3, #0
   19ad6:	f43f ad72 	beq.w	195be <d_print_comp+0xe6>
   19ada:	4640      	mov	r0, r8
   19adc:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 19f1c <d_print_comp+0xa44>
   19ae0:	f7ff fbea 	bl	192b8 <d_append_string>
   19ae4:	68b9      	ldr	r1, [r7, #8]
   19ae6:	4640      	mov	r0, r8
   19ae8:	f7ff fcf6 	bl	194d8 <d_print_comp>
   19aec:	e567      	b.n	195be <d_print_comp+0xe6>
   19aee:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 19f20 <d_print_comp+0xa48>
   19af2:	4640      	mov	r0, r8
   19af4:	f7ff fbe0 	bl	192b8 <d_append_string>
   19af8:	687a      	ldr	r2, [r7, #4]
   19afa:	6851      	ldr	r1, [r2, #4]
   19afc:	780b      	ldrb	r3, [r1, #0]
   19afe:	3b61      	subs	r3, #97
   19b00:	b2db      	uxtb	r3, r3
   19b02:	2b19      	cmp	r3, #25
   19b04:	d805      	bhi.n	19b12 <d_print_comp+0x63a>
   19b06:	2120      	movs	r1, #32
   19b08:	4640      	mov	r0, r8
   19b0a:	f7fe f9cf 	bl	17eac <d_append_char>
   19b0e:	687a      	ldr	r2, [r7, #4]
   19b10:	6851      	ldr	r1, [r2, #4]
   19b12:	6892      	ldr	r2, [r2, #8]
   19b14:	4640      	mov	r0, r8
   19b16:	f7ff fb9b 	bl	19250 <d_append_buffer>
   19b1a:	e550      	b.n	195be <d_print_comp+0xe6>
   19b1c:	f8d8 4118 	ldr.w	r4, [r8, #280]
   19b20:	ab1a      	add	r3, sp, #104
   19b22:	f843 4d18 	str.w	r4, [r3, #-24]!
   19b26:	f8d8 2114 	ldr.w	r2, [r8, #276]
   19b2a:	f8c8 3118 	str.w	r3, [r8, #280]
   19b2e:	2300      	movs	r3, #0
   19b30:	9316      	str	r3, [sp, #88]
   19b32:	9715      	str	r7, [sp, #84]
   19b34:	9217      	str	r2, [sp, #92]
   19b36:	6879      	ldr	r1, [r7, #4]
   19b38:	4640      	mov	r0, r8
   19b3a:	f7ff fccd 	bl	194d8 <d_print_comp>
   19b3e:	9b16      	ldr	r3, [sp, #88]
   19b40:	b91b      	cbnz	r3, 19b4a <d_print_comp+0x672>
   19b42:	4640      	mov	r0, r8
   19b44:	4639      	mov	r1, r7
   19b46:	f000 fa09 	bl	19f5c <d_print_mod>
   19b4a:	9b14      	ldr	r3, [sp, #80]
   19b4c:	f8c8 3118 	str.w	r3, [r8, #280]
   19b50:	e535      	b.n	195be <d_print_comp+0xe6>
   19b52:	f8d8 3000 	ldr.w	r3, [r8]
   19b56:	f013 0f04 	tst.w	r3, #4	; 0x4
   19b5a:	f040 810d 	bne.w	19d78 <d_print_comp+0x8a0>
   19b5e:	684b      	ldr	r3, [r1, #4]
   19b60:	4640      	mov	r0, r8
   19b62:	6819      	ldr	r1, [r3, #0]
   19b64:	685a      	ldr	r2, [r3, #4]
   19b66:	f7ff fb73 	bl	19250 <d_append_buffer>
   19b6a:	e528      	b.n	195be <d_print_comp+0xe6>
   19b6c:	f8d8 9118 	ldr.w	r9, [r8, #280]
   19b70:	f8d8 2114 	ldr.w	r2, [r8, #276]
   19b74:	f8cd 900c 	str.w	r9, [sp, #12]
   19b78:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   19b7c:	9207      	str	r2, [sp, #28]
   19b7e:	9a03      	ldr	r2, [sp, #12]
   19b80:	f84b 9d58 	str.w	r9, [fp, #-88]!
   19b84:	2300      	movs	r3, #0
   19b86:	46d9      	mov	r9, fp
   19b88:	f8c8 b118 	str.w	fp, [r8, #280]
   19b8c:	9105      	str	r1, [sp, #20]
   19b8e:	9306      	str	r3, [sp, #24]
   19b90:	2a00      	cmp	r2, #0
   19b92:	f000 8183 	beq.w	19e9c <d_print_comp+0x9c4>
   19b96:	6852      	ldr	r2, [r2, #4]
   19b98:	7813      	ldrb	r3, [r2, #0]
   19b9a:	3b16      	subs	r3, #22
   19b9c:	b2db      	uxtb	r3, r3
   19b9e:	2b02      	cmp	r3, #2
   19ba0:	f200 817c 	bhi.w	19e9c <d_print_comp+0x9c4>
   19ba4:	9e03      	ldr	r6, [sp, #12]
   19ba6:	f04f 0a01 	mov.w	sl, #1	; 0x1
   19baa:	e005      	b.n	19bb8 <d_print_comp+0x6e0>
   19bac:	6872      	ldr	r2, [r6, #4]
   19bae:	7813      	ldrb	r3, [r2, #0]
   19bb0:	3b16      	subs	r3, #22
   19bb2:	b2db      	uxtb	r3, r3
   19bb4:	2b02      	cmp	r3, #2
   19bb6:	d81c      	bhi.n	19bf2 <d_print_comp+0x71a>
   19bb8:	68b3      	ldr	r3, [r6, #8]
   19bba:	b9bb      	cbnz	r3, 19bec <d_print_comp+0x714>
   19bbc:	f1ba 0f03 	cmp.w	sl, #3	; 0x3
   19bc0:	f200 80f4 	bhi.w	19dac <d_print_comp+0x8d4>
   19bc4:	ea4f 150a 	mov.w	r5, sl, lsl #4
   19bc8:	ab1a      	add	r3, sp, #104
   19bca:	eb03 0405 	add.w	r4, r3, r5
   19bce:	f1a4 0c58 	sub.w	ip, r4, #88	; 0x58
   19bd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   19bd6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   19bda:	f844 9c58 	str.w	r9, [r4, #-88]
   19bde:	2201      	movs	r2, #1
   19be0:	eb0b 0905 	add.w	r9, fp, r5
   19be4:	f8c8 9118 	str.w	r9, [r8, #280]
   19be8:	60b2      	str	r2, [r6, #8]
   19bea:	4492      	add	sl, r2
   19bec:	6836      	ldr	r6, [r6, #0]
   19bee:	2e00      	cmp	r6, #0
   19bf0:	d1dc      	bne.n	19bac <d_print_comp+0x6d4>
   19bf2:	68b9      	ldr	r1, [r7, #8]
   19bf4:	4640      	mov	r0, r8
   19bf6:	f7ff fc6f 	bl	194d8 <d_print_comp>
   19bfa:	9b03      	ldr	r3, [sp, #12]
   19bfc:	f8c8 3118 	str.w	r3, [r8, #280]
   19c00:	9b06      	ldr	r3, [sp, #24]
   19c02:	2b00      	cmp	r3, #0
   19c04:	f47f acdb 	bne.w	195be <d_print_comp+0xe6>
   19c08:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   19c0c:	d00e      	beq.n	19c2c <d_print_comp+0x754>
   19c0e:	ea4f 130a 	mov.w	r3, sl, lsl #4
   19c12:	eb0b 0403 	add.w	r4, fp, r3
   19c16:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   19c1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   19c1e:	4640      	mov	r0, r8
   19c20:	f000 f99c 	bl	19f5c <d_print_mod>
   19c24:	3c10      	subs	r4, #16
   19c26:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   19c2a:	d8f4      	bhi.n	19c16 <d_print_comp+0x73e>
   19c2c:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19c30:	4640      	mov	r0, r8
   19c32:	4639      	mov	r1, r7
   19c34:	f7ff fb78 	bl	19328 <d_print_array_type>
   19c38:	e4c1      	b.n	195be <d_print_comp+0xe6>
   19c3a:	4640      	mov	r0, r8
   19c3c:	49b9      	ldr	r1, [pc, #740]	(19f24 <d_print_comp+0xa4c>)
   19c3e:	f7ff fb3b 	bl	192b8 <d_append_string>
   19c42:	6879      	ldr	r1, [r7, #4]
   19c44:	4640      	mov	r0, r8
   19c46:	f7ff fc47 	bl	194d8 <d_print_comp>
   19c4a:	e4b8      	b.n	195be <d_print_comp+0xe6>
   19c4c:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19c50:	ab1a      	add	r3, sp, #104
   19c52:	f843 2d18 	str.w	r2, [r3, #-24]!
   19c56:	f8d8 2114 	ldr.w	r2, [r8, #276]
   19c5a:	f8c8 3118 	str.w	r3, [r8, #280]
   19c5e:	2300      	movs	r3, #0
   19c60:	9316      	str	r3, [sp, #88]
   19c62:	9115      	str	r1, [sp, #84]
   19c64:	9217      	str	r2, [sp, #92]
   19c66:	6889      	ldr	r1, [r1, #8]
   19c68:	4640      	mov	r0, r8
   19c6a:	f7ff fc35 	bl	194d8 <d_print_comp>
   19c6e:	9b16      	ldr	r3, [sp, #88]
   19c70:	2b00      	cmp	r3, #0
   19c72:	f47f af6a 	bne.w	19b4a <d_print_comp+0x672>
   19c76:	4640      	mov	r0, r8
   19c78:	2120      	movs	r1, #32
   19c7a:	f7fe f917 	bl	17eac <d_append_char>
   19c7e:	6879      	ldr	r1, [r7, #4]
   19c80:	4640      	mov	r0, r8
   19c82:	f7ff fc29 	bl	194d8 <d_print_comp>
   19c86:	4640      	mov	r0, r8
   19c88:	49a7      	ldr	r1, [pc, #668]	(19f28 <d_print_comp+0xa50>)
   19c8a:	f7ff fb15 	bl	192b8 <d_append_string>
   19c8e:	e75c      	b.n	19b4a <d_print_comp+0x672>
   19c90:	4640      	mov	r0, r8
   19c92:	49a6      	ldr	r1, [pc, #664]	(19f2c <d_print_comp+0xa54>)
   19c94:	f7ff fb10 	bl	192b8 <d_append_string>
   19c98:	6879      	ldr	r1, [r7, #4]
   19c9a:	4640      	mov	r0, r8
   19c9c:	f7ff fc1c 	bl	194d8 <d_print_comp>
   19ca0:	e48d      	b.n	195be <d_print_comp+0xe6>
   19ca2:	4640      	mov	r0, r8
   19ca4:	49a2      	ldr	r1, [pc, #648]	(19f30 <d_print_comp+0xa58>)
   19ca6:	f7ff fb07 	bl	192b8 <d_append_string>
   19caa:	6879      	ldr	r1, [r7, #4]
   19cac:	4640      	mov	r0, r8
   19cae:	f7ff fc13 	bl	194d8 <d_print_comp>
   19cb2:	e484      	b.n	195be <d_print_comp+0xe6>
   19cb4:	4640      	mov	r0, r8
   19cb6:	499f      	ldr	r1, [pc, #636]	(19f34 <d_print_comp+0xa5c>)
   19cb8:	f7ff fafe 	bl	192b8 <d_append_string>
   19cbc:	6879      	ldr	r1, [r7, #4]
   19cbe:	4640      	mov	r0, r8
   19cc0:	f7ff fc0a 	bl	194d8 <d_print_comp>
   19cc4:	e47b      	b.n	195be <d_print_comp+0xe6>
   19cc6:	4640      	mov	r0, r8
   19cc8:	499b      	ldr	r1, [pc, #620]	(19f38 <d_print_comp+0xa60>)
   19cca:	f7ff faf5 	bl	192b8 <d_append_string>
   19cce:	6879      	ldr	r1, [r7, #4]
   19cd0:	4640      	mov	r0, r8
   19cd2:	f7ff fc01 	bl	194d8 <d_print_comp>
   19cd6:	4640      	mov	r0, r8
   19cd8:	4998      	ldr	r1, [pc, #608]	(19f3c <d_print_comp+0xa64>)
   19cda:	f7ff faed 	bl	192b8 <d_append_string>
   19cde:	68b9      	ldr	r1, [r7, #8]
   19ce0:	4640      	mov	r0, r8
   19ce2:	f7ff fbf9 	bl	194d8 <d_print_comp>
   19ce6:	e46a      	b.n	195be <d_print_comp+0xe6>
   19ce8:	7853      	ldrb	r3, [r2, #1]
   19cea:	1c54      	adds	r4, r2, #1
   19cec:	2b5f      	cmp	r3, #95
   19cee:	f47f ae2f 	bne.w	19950 <d_print_comp+0x478>
   19cf2:	7893      	ldrb	r3, [r2, #2]
   19cf4:	2b55      	cmp	r3, #85
   19cf6:	f47f ae2b 	bne.w	19950 <d_print_comp+0x478>
   19cfa:	1cd6      	adds	r6, r2, #3
   19cfc:	42b5      	cmp	r5, r6
   19cfe:	f67f ae27 	bls.w	19950 <d_print_comp+0x478>
   19d02:	f04f 0c00 	mov.w	ip, #0	; 0x0
   19d06:	e009      	b.n	19d1c <d_print_comp+0x844>
   19d08:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
   19d0c:	3601      	adds	r6, #1
   19d0e:	42b5      	cmp	r5, r6
   19d10:	f67f ae1e 	bls.w	19950 <d_print_comp+0x478>
   19d14:	ea4f 130c 	mov.w	r3, ip, lsl #4
   19d18:	eb02 0c03 	add.w	ip, r2, r3
   19d1c:	7830      	ldrb	r0, [r6, #0]
   19d1e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   19d22:	b2d3      	uxtb	r3, r2
   19d24:	2b09      	cmp	r3, #9
   19d26:	d9f1      	bls.n	19d0c <d_print_comp+0x834>
   19d28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19d2c:	b2db      	uxtb	r3, r3
   19d2e:	2b05      	cmp	r3, #5
   19d30:	bf98      	it	ls
   19d32:	f1a0 0237 	subls.w	r2, r0, #55	; 0x37
   19d36:	d9e9      	bls.n	19d0c <d_print_comp+0x834>
   19d38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19d3c:	b2db      	uxtb	r3, r3
   19d3e:	2b05      	cmp	r3, #5
   19d40:	d9e2      	bls.n	19d08 <d_print_comp+0x830>
   19d42:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   19d46:	bf8c      	ite	hi
   19d48:	2300      	movhi	r3, #0
   19d4a:	2301      	movls	r3, #1
   19d4c:	285f      	cmp	r0, #95
   19d4e:	bf14      	ite	ne
   19d50:	2300      	movne	r3, #0
   19d52:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   19d56:	2b00      	cmp	r3, #0
   19d58:	f43f adfa 	beq.w	19950 <d_print_comp+0x478>
   19d5c:	fa5f f18c 	uxtb.w	r1, ip
   19d60:	4640      	mov	r0, r8
   19d62:	f7fe f8a3 	bl	17eac <d_append_char>
   19d66:	1c74      	adds	r4, r6, #1
   19d68:	e5f5      	b.n	19956 <d_print_comp+0x47e>
   19d6a:	4640      	mov	r0, r8
   19d6c:	212e      	movs	r1, #46
   19d6e:	f7fe f89d 	bl	17eac <d_append_char>
   19d72:	e43a      	b.n	195ea <d_print_comp+0x112>
   19d74:	2400      	movs	r4, #0
   19d76:	e404      	b.n	19582 <d_print_comp+0xaa>
   19d78:	684b      	ldr	r3, [r1, #4]
   19d7a:	4640      	mov	r0, r8
   19d7c:	6899      	ldr	r1, [r3, #8]
   19d7e:	68da      	ldr	r2, [r3, #12]
   19d80:	f7ff fa66 	bl	19250 <d_append_buffer>
   19d84:	e41b      	b.n	195be <d_print_comp+0xe6>
   19d86:	f8d8 2118 	ldr.w	r2, [r8, #280]
   19d8a:	4640      	mov	r0, r8
   19d8c:	f000 f9c2 	bl	1a114 <d_print_function_type>
   19d90:	e592      	b.n	198b8 <d_print_comp+0x3e0>
   19d92:	4640      	mov	r0, r8
   19d94:	2128      	movs	r1, #40
   19d96:	f7fe f889 	bl	17eac <d_append_char>
   19d9a:	6879      	ldr	r1, [r7, #4]
   19d9c:	4640      	mov	r0, r8
   19d9e:	f000 faa7 	bl	1a2f0 <d_print_cast>
   19da2:	4640      	mov	r0, r8
   19da4:	2129      	movs	r1, #41
   19da6:	f7fe f881 	bl	17eac <d_append_char>
   19daa:	e43b      	b.n	19624 <d_print_comp+0x14c>
   19dac:	3301      	adds	r3, #1
   19dae:	f8c8 311c 	str.w	r3, [r8, #284]
   19db2:	e404      	b.n	195be <d_print_comp+0xe6>
   19db4:	4640      	mov	r0, r8
   19db6:	2120      	movs	r1, #32
   19db8:	f7fe f878 	bl	17eac <d_append_char>
   19dbc:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   19dc0:	4640      	mov	r0, r8
   19dc2:	f000 f8cb 	bl	19f5c <d_print_mod>
   19dc6:	e553      	b.n	19870 <d_print_comp+0x398>
   19dc8:	688a      	ldr	r2, [r1, #8]
   19dca:	7813      	ldrb	r3, [r2, #0]
   19dcc:	2b00      	cmp	r3, #0
   19dce:	f47f abd8 	bne.w	19582 <d_print_comp+0xaa>
   19dd2:	6893      	ldr	r3, [r2, #8]
   19dd4:	2b01      	cmp	r3, #1
   19dd6:	f47f abd4 	bne.w	19582 <d_print_comp+0xaa>
   19dda:	2832      	cmp	r0, #50
   19ddc:	f47f abd1 	bne.w	19582 <d_print_comp+0xaa>
   19de0:	6853      	ldr	r3, [r2, #4]
   19de2:	781b      	ldrb	r3, [r3, #0]
   19de4:	2b30      	cmp	r3, #48
   19de6:	d077      	beq.n	19ed8 <d_print_comp+0xa00>
   19de8:	2b31      	cmp	r3, #49
   19dea:	f47f abca 	bne.w	19582 <d_print_comp+0xaa>
   19dee:	4640      	mov	r0, r8
   19df0:	4953      	ldr	r1, [pc, #332]	(19f40 <d_print_comp+0xa68>)
   19df2:	f7ff fa61 	bl	192b8 <d_append_string>
   19df6:	f7ff bbe2 	b.w	195be <d_print_comp+0xe6>
   19dfa:	6889      	ldr	r1, [r1, #8]
   19dfc:	780b      	ldrb	r3, [r1, #0]
   19dfe:	2b00      	cmp	r3, #0
   19e00:	f47f abbf 	bne.w	19582 <d_print_comp+0xaa>
   19e04:	2833      	cmp	r0, #51
   19e06:	d061      	beq.n	19ecc <d_print_comp+0x9f4>
   19e08:	4640      	mov	r0, r8
   19e0a:	f7ff fb65 	bl	194d8 <d_print_comp>
   19e0e:	1ea3      	subs	r3, r4, #2
   19e10:	2b04      	cmp	r3, #4
   19e12:	f63f abd4 	bhi.w	195be <d_print_comp+0xe6>
   19e16:	e8df f003 	tbb	[pc, r3]
   19e1a:	151b      	.short	0x151b
   19e1c:	0003090f 	.word	0x0003090f
   19e20:	4640      	mov	r0, r8
   19e22:	4948      	ldr	r1, [pc, #288]	(19f44 <d_print_comp+0xa6c>)
   19e24:	f7ff fa48 	bl	192b8 <d_append_string>
   19e28:	f7ff bbc9 	b.w	195be <d_print_comp+0xe6>
   19e2c:	4640      	mov	r0, r8
   19e2e:	4946      	ldr	r1, [pc, #280]	(19f48 <d_print_comp+0xa70>)
   19e30:	f7ff fa42 	bl	192b8 <d_append_string>
   19e34:	f7ff bbc3 	b.w	195be <d_print_comp+0xe6>
   19e38:	4640      	mov	r0, r8
   19e3a:	4944      	ldr	r1, [pc, #272]	(19f4c <d_print_comp+0xa74>)
   19e3c:	f7ff fa3c 	bl	192b8 <d_append_string>
   19e40:	f7ff bbbd 	b.w	195be <d_print_comp+0xe6>
   19e44:	4640      	mov	r0, r8
   19e46:	216c      	movs	r1, #108
   19e48:	f7fe f830 	bl	17eac <d_append_char>
   19e4c:	f7ff bbb7 	b.w	195be <d_print_comp+0xe6>
   19e50:	4640      	mov	r0, r8
   19e52:	2175      	movs	r1, #117
   19e54:	f7fe f82a 	bl	17eac <d_append_char>
   19e58:	f7ff bbb1 	b.w	195be <d_print_comp+0xe6>
   19e5c:	4640      	mov	r0, r8
   19e5e:	2120      	movs	r1, #32
   19e60:	f7fe f824 	bl	17eac <d_append_char>
   19e64:	e5fa      	b.n	19a5c <d_print_comp+0x584>
   19e66:	4640      	mov	r0, r8
   19e68:	2120      	movs	r1, #32
   19e6a:	f7fe f81f 	bl	17eac <d_append_char>
   19e6e:	e5e8      	b.n	19a42 <d_print_comp+0x56a>
   19e70:	4640      	mov	r0, r8
   19e72:	212d      	movs	r1, #45
   19e74:	f7fe f81a 	bl	17eac <d_append_char>
   19e78:	f7ff bb93 	b.w	195a2 <d_print_comp+0xca>
   19e7c:	6852      	ldr	r2, [r2, #4]
   19e7e:	6893      	ldr	r3, [r2, #8]
   19e80:	2b01      	cmp	r3, #1
   19e82:	f47f abe5 	bne.w	19650 <d_print_comp+0x178>
   19e86:	6853      	ldr	r3, [r2, #4]
   19e88:	781a      	ldrb	r2, [r3, #0]
   19e8a:	2a3e      	cmp	r2, #62
   19e8c:	f47f abe0 	bne.w	19650 <d_print_comp+0x178>
   19e90:	4640      	mov	r0, r8
   19e92:	2128      	movs	r1, #40
   19e94:	f7fe f80a 	bl	17eac <d_append_char>
   19e98:	f7ff bbda 	b.w	19650 <d_print_comp+0x178>
   19e9c:	f04f 0a01 	mov.w	sl, #1	; 0x1
   19ea0:	e6a7      	b.n	19bf2 <d_print_comp+0x71a>
   19ea2:	6860      	ldr	r0, [r4, #4]
   19ea4:	492a      	ldr	r1, [pc, #168]	(19f50 <d_print_comp+0xa78>)
   19ea6:	f007 fb43 	bl	21530 <strncmp>
   19eaa:	2800      	cmp	r0, #0
   19eac:	f47f adc0 	bne.w	19a30 <d_print_comp+0x558>
   19eb0:	68b9      	ldr	r1, [r7, #8]
   19eb2:	4640      	mov	r0, r8
   19eb4:	f7ff fb10 	bl	194d8 <d_print_comp>
   19eb8:	4640      	mov	r0, r8
   19eba:	4926      	ldr	r1, [pc, #152]	(19f54 <d_print_comp+0xa7c>)
   19ebc:	f7ff f9fc 	bl	192b8 <d_append_string>
   19ec0:	f8c8 5118 	str.w	r5, [r8, #280]
   19ec4:	f7ff bb7b 	b.w	195be <d_print_comp+0xe6>
   19ec8:	2601      	movs	r6, #1
   19eca:	e472      	b.n	197b2 <d_print_comp+0x2da>
   19ecc:	212d      	movs	r1, #45
   19ece:	4640      	mov	r0, r8
   19ed0:	f7fd ffec 	bl	17eac <d_append_char>
   19ed4:	68b9      	ldr	r1, [r7, #8]
   19ed6:	e797      	b.n	19e08 <d_print_comp+0x930>
   19ed8:	4640      	mov	r0, r8
   19eda:	491f      	ldr	r1, [pc, #124]	(19f58 <d_print_comp+0xa80>)
   19edc:	f7ff f9ec 	bl	192b8 <d_append_string>
   19ee0:	f7ff bb6d 	b.w	195be <d_print_comp+0xe6>
   19ee4:	00023258 	.word	0x00023258
   19ee8:	000233b0 	.word	0x000233b0
   19eec:	00023384 	.word	0x00023384
   19ef0:	00023388 	.word	0x00023388
   19ef4:	0002338c 	.word	0x0002338c
   19ef8:	00023378 	.word	0x00023378
   19efc:	000232c8 	.word	0x000232c8
   19f00:	000232dc 	.word	0x000232dc
   19f04:	000232e0 	.word	0x000232e0
   19f08:	000232f4 	.word	0x000232f4
   19f0c:	00023310 	.word	0x00023310
   19f10:	00023320 	.word	0x00023320
   19f14:	00023334 	.word	0x00023334
   19f18:	00023350 	.word	0x00023350
   19f1c:	00023368 	.word	0x00023368
   19f20:	0002336c 	.word	0x0002336c
   19f24:	00023274 	.word	0x00023274
   19f28:	00023364 	.word	0x00023364
   19f2c:	00023268 	.word	0x00023268
   19f30:	000232a4 	.word	0x000232a4
   19f34:	000232b4 	.word	0x000232b4
   19f38:	00023280 	.word	0x00023280
   19f3c:	0002329c 	.word	0x0002329c
   19f40:	000233a8 	.word	0x000233a8
   19f44:	0002339c 	.word	0x0002339c
   19f48:	00023398 	.word	0x00023398
   19f4c:	00023394 	.word	0x00023394
   19f50:	0002325c 	.word	0x0002325c
   19f54:	00023264 	.word	0x00023264
   19f58:	000233a0 	.word	0x000233a0

00019f5c <d_print_mod>:
   19f5c:	b530      	push	{r4, r5, lr}
   19f5e:	780b      	ldrb	r3, [r1, #0]
   19f60:	b081      	sub	sp, #4
   19f62:	3b03      	subs	r3, #3
   19f64:	4604      	mov	r4, r0
   19f66:	460d      	mov	r5, r1
   19f68:	2b23      	cmp	r3, #35
   19f6a:	d813      	bhi.n	19f94 <d_print_mod+0x38>
   19f6c:	e8df f003 	tbb	[pc, r3]
   19f70:	12121216 	.word	0x12121216
   19f74:	12121212 	.word	0x12121212
   19f78:	12121212 	.word	0x12121212
   19f7c:	12121212 	.word	0x12121212
   19f80:	1a121212 	.word	0x1a121212
   19f84:	1e1a221e 	.word	0x1e1a221e
   19f88:	362e2622 	.word	0x362e2622
   19f8c:	12423e3a 	.word	0x12423e3a
   19f90:	46121212 	.word	0x46121212
   19f94:	f7ff faa0 	bl	194d8 <d_print_comp>
   19f98:	b001      	add	sp, #4
   19f9a:	bd30      	pop	{r4, r5, pc}
   19f9c:	6849      	ldr	r1, [r1, #4]
   19f9e:	f7ff fa9b 	bl	194d8 <d_print_comp>
   19fa2:	e7f9      	b.n	19f98 <d_print_mod+0x3c>
   19fa4:	491d      	ldr	r1, [pc, #116]	(1a01c <d_print_mod+0xc0>)
   19fa6:	f7ff f987 	bl	192b8 <d_append_string>
   19faa:	e7f5      	b.n	19f98 <d_print_mod+0x3c>
   19fac:	491c      	ldr	r1, [pc, #112]	(1a020 <d_print_mod+0xc4>)
   19fae:	f7ff f983 	bl	192b8 <d_append_string>
   19fb2:	e7f1      	b.n	19f98 <d_print_mod+0x3c>
   19fb4:	491b      	ldr	r1, [pc, #108]	(1a024 <d_print_mod+0xc8>)
   19fb6:	f7ff f97f 	bl	192b8 <d_append_string>
   19fba:	e7ed      	b.n	19f98 <d_print_mod+0x3c>
   19fbc:	2120      	movs	r1, #32
   19fbe:	f7fd ff75 	bl	17eac <d_append_char>
   19fc2:	68a9      	ldr	r1, [r5, #8]
   19fc4:	4620      	mov	r0, r4
   19fc6:	f7ff fa87 	bl	194d8 <d_print_comp>
   19fca:	e7e5      	b.n	19f98 <d_print_mod+0x3c>
   19fcc:	6803      	ldr	r3, [r0, #0]
   19fce:	f013 0f04 	tst.w	r3, #4	; 0x4
   19fd2:	d1e1      	bne.n	19f98 <d_print_mod+0x3c>
   19fd4:	212a      	movs	r1, #42
   19fd6:	f7fd ff69 	bl	17eac <d_append_char>
   19fda:	e7dd      	b.n	19f98 <d_print_mod+0x3c>
   19fdc:	2126      	movs	r1, #38
   19fde:	f7fd ff65 	bl	17eac <d_append_char>
   19fe2:	e7d9      	b.n	19f98 <d_print_mod+0x3c>
   19fe4:	4910      	ldr	r1, [pc, #64]	(1a028 <d_print_mod+0xcc>)
   19fe6:	f7ff f967 	bl	192b8 <d_append_string>
   19fea:	e7d5      	b.n	19f98 <d_print_mod+0x3c>
   19fec:	490f      	ldr	r1, [pc, #60]	(1a02c <d_print_mod+0xd0>)
   19fee:	f7ff f963 	bl	192b8 <d_append_string>
   19ff2:	e7d1      	b.n	19f98 <d_print_mod+0x3c>
   19ff4:	490e      	ldr	r1, [pc, #56]	(1a030 <d_print_mod+0xd4>)
   19ff6:	f7ff f95f 	bl	192b8 <d_append_string>
   19ffa:	e7cd      	b.n	19f98 <d_print_mod+0x3c>
   19ffc:	f890 3108 	ldrb.w	r3, [r0, #264]
   1a000:	2b28      	cmp	r3, #40
   1a002:	d002      	beq.n	1a00a <d_print_mod+0xae>
   1a004:	2120      	movs	r1, #32
   1a006:	f7fd ff51 	bl	17eac <d_append_char>
   1a00a:	6869      	ldr	r1, [r5, #4]
   1a00c:	4620      	mov	r0, r4
   1a00e:	f7ff fa63 	bl	194d8 <d_print_comp>
   1a012:	4620      	mov	r0, r4
   1a014:	4907      	ldr	r1, [pc, #28]	(1a034 <d_print_mod+0xd8>)
   1a016:	f7ff f94f 	bl	192b8 <d_append_string>
   1a01a:	e7bd      	b.n	19f98 <d_print_mod+0x3c>
   1a01c:	000233c0 	.word	0x000233c0
   1a020:	000233cc 	.word	0x000233cc
   1a024:	000233d8 	.word	0x000233d8
   1a028:	000233e0 	.word	0x000233e0
   1a02c:	000233e4 	.word	0x000233e4
   1a030:	000233f0 	.word	0x000233f0
   1a034:	00023364 	.word	0x00023364

0001a038 <d_print_mod_list>:
   1a038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a03c:	4606      	mov	r6, r0
   1a03e:	460d      	mov	r5, r1
   1a040:	4614      	mov	r4, r2
   1a042:	2900      	cmp	r1, #0
   1a044:	d02d      	beq.n	1a0a2 <d_print_mod_list+0x6a>
   1a046:	f8d0 311c 	ldr.w	r3, [r0, #284]
   1a04a:	2b00      	cmp	r3, #0
   1a04c:	d129      	bne.n	1a0a2 <d_print_mod_list+0x6a>
   1a04e:	f04f 0801 	mov.w	r8, #1	; 0x1
   1a052:	e018      	b.n	1a086 <d_print_mod_list+0x4e>
   1a054:	6869      	ldr	r1, [r5, #4]
   1a056:	68eb      	ldr	r3, [r5, #12]
   1a058:	f8d6 7114 	ldr.w	r7, [r6, #276]
   1a05c:	f8c6 3114 	str.w	r3, [r6, #276]
   1a060:	780b      	ldrb	r3, [r1, #0]
   1a062:	f8c5 8008 	str.w	r8, [r5, #8]
   1a066:	2b24      	cmp	r3, #36
   1a068:	d01d      	beq.n	1a0a6 <d_print_mod_list+0x6e>
   1a06a:	2b25      	cmp	r3, #37
   1a06c:	d022      	beq.n	1a0b4 <d_print_mod_list+0x7c>
   1a06e:	2b02      	cmp	r3, #2
   1a070:	d027      	beq.n	1a0c2 <d_print_mod_list+0x8a>
   1a072:	4630      	mov	r0, r6
   1a074:	f7ff ff72 	bl	19f5c <d_print_mod>
   1a078:	f8c6 7114 	str.w	r7, [r6, #276]
   1a07c:	682d      	ldr	r5, [r5, #0]
   1a07e:	b185      	cbz	r5, 1a0a2 <d_print_mod_list+0x6a>
   1a080:	f8d6 311c 	ldr.w	r3, [r6, #284]
   1a084:	b96b      	cbnz	r3, 1a0a2 <d_print_mod_list+0x6a>
   1a086:	68ab      	ldr	r3, [r5, #8]
   1a088:	2b00      	cmp	r3, #0
   1a08a:	d1f7      	bne.n	1a07c <d_print_mod_list+0x44>
   1a08c:	2c00      	cmp	r4, #0
   1a08e:	d1e1      	bne.n	1a054 <d_print_mod_list+0x1c>
   1a090:	6869      	ldr	r1, [r5, #4]
   1a092:	780b      	ldrb	r3, [r1, #0]
   1a094:	3b19      	subs	r3, #25
   1a096:	b2db      	uxtb	r3, r3
   1a098:	2b02      	cmp	r3, #2
   1a09a:	d8dc      	bhi.n	1a056 <d_print_mod_list+0x1e>
   1a09c:	682d      	ldr	r5, [r5, #0]
   1a09e:	2d00      	cmp	r5, #0
   1a0a0:	d1ee      	bne.n	1a080 <d_print_mod_list+0x48>
   1a0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a0a6:	682a      	ldr	r2, [r5, #0]
   1a0a8:	4630      	mov	r0, r6
   1a0aa:	f000 f833 	bl	1a114 <d_print_function_type>
   1a0ae:	f8c6 7114 	str.w	r7, [r6, #276]
   1a0b2:	e7f6      	b.n	1a0a2 <d_print_mod_list+0x6a>
   1a0b4:	682a      	ldr	r2, [r5, #0]
   1a0b6:	4630      	mov	r0, r6
   1a0b8:	f7ff f936 	bl	19328 <d_print_array_type>
   1a0bc:	f8c6 7114 	str.w	r7, [r6, #276]
   1a0c0:	e7ef      	b.n	1a0a2 <d_print_mod_list+0x6a>
   1a0c2:	3b02      	subs	r3, #2
   1a0c4:	f8d6 4118 	ldr.w	r4, [r6, #280]
   1a0c8:	f8c6 3118 	str.w	r3, [r6, #280]
   1a0cc:	6849      	ldr	r1, [r1, #4]
   1a0ce:	4630      	mov	r0, r6
   1a0d0:	f7ff fa02 	bl	194d8 <d_print_comp>
   1a0d4:	6833      	ldr	r3, [r6, #0]
   1a0d6:	f8c6 4118 	str.w	r4, [r6, #280]
   1a0da:	f013 0f04 	tst.w	r3, #4	; 0x4
   1a0de:	d112      	bne.n	1a106 <d_print_mod_list+0xce>
   1a0e0:	4630      	mov	r0, r6
   1a0e2:	490b      	ldr	r1, [pc, #44]	(1a110 <d_print_mod_list+0xd8>)
   1a0e4:	f7ff f8e8 	bl	192b8 <d_append_string>
   1a0e8:	686a      	ldr	r2, [r5, #4]
   1a0ea:	6891      	ldr	r1, [r2, #8]
   1a0ec:	e000      	b.n	1a0f0 <d_print_mod_list+0xb8>
   1a0ee:	6849      	ldr	r1, [r1, #4]
   1a0f0:	780b      	ldrb	r3, [r1, #0]
   1a0f2:	3b19      	subs	r3, #25
   1a0f4:	b2db      	uxtb	r3, r3
   1a0f6:	2b02      	cmp	r3, #2
   1a0f8:	d9f9      	bls.n	1a0ee <d_print_mod_list+0xb6>
   1a0fa:	4630      	mov	r0, r6
   1a0fc:	f7ff f9ec 	bl	194d8 <d_print_comp>
   1a100:	f8c6 7114 	str.w	r7, [r6, #276]
   1a104:	e7cd      	b.n	1a0a2 <d_print_mod_list+0x6a>
   1a106:	4630      	mov	r0, r6
   1a108:	212e      	movs	r1, #46
   1a10a:	f7fd fecf 	bl	17eac <d_append_char>
   1a10e:	e7eb      	b.n	1a0e8 <d_print_mod_list+0xb0>
   1a110:	00023258 	.word	0x00023258

0001a114 <d_print_function_type>:
   1a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a118:	4605      	mov	r5, r0
   1a11a:	4688      	mov	r8, r1
   1a11c:	4616      	mov	r6, r2
   1a11e:	2a00      	cmp	r2, #0
   1a120:	f000 80de 	beq.w	1a2e0 <d_print_function_type+0x1cc>
   1a124:	6893      	ldr	r3, [r2, #8]
   1a126:	2b00      	cmp	r3, #0
   1a128:	f040 80da 	bne.w	1a2e0 <d_print_function_type+0x1cc>
   1a12c:	4611      	mov	r1, r2
   1a12e:	2001      	movs	r0, #1
   1a130:	684b      	ldr	r3, [r1, #4]
   1a132:	781a      	ldrb	r2, [r3, #0]
   1a134:	3a16      	subs	r2, #22
   1a136:	b2d3      	uxtb	r3, r2
   1a138:	2b10      	cmp	r3, #16
   1a13a:	d865      	bhi.n	1a208 <d_print_function_type+0xf4>
   1a13c:	b252      	sxtb	r2, r2
   1a13e:	fa10 f202 	lsls.w	r2, r0, r2
   1a142:	4b6a      	ldr	r3, [pc, #424]	(1a2ec <d_print_function_type+0x1d8>)
   1a144:	ea02 0303 	and.w	r3, r2, r3
   1a148:	2b00      	cmp	r3, #0
   1a14a:	d16c      	bne.n	1a226 <d_print_function_type+0x112>
   1a14c:	f412 7f60 	tst.w	r2, #896	; 0x380
   1a150:	d05a      	beq.n	1a208 <d_print_function_type+0xf4>
   1a152:	f895 3108 	ldrb.w	r3, [r5, #264]
   1a156:	2b28      	cmp	r3, #40
   1a158:	d001      	beq.n	1a15e <d_print_function_type+0x4a>
   1a15a:	2b2a      	cmp	r3, #42
   1a15c:	d165      	bne.n	1a22a <d_print_function_type+0x116>
   1a15e:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a162:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a166:	d076      	beq.n	1a256 <d_print_function_type+0x142>
   1a168:	2128      	movs	r1, #40
   1a16a:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1a16e:	eb05 030c 	add.w	r3, r5, ip
   1a172:	2400      	movs	r4, #0
   1a174:	7119      	strb	r1, [r3, #4]
   1a176:	f8c5 2104 	str.w	r2, [r5, #260]
   1a17a:	f885 1108 	strb.w	r1, [r5, #264]
   1a17e:	f8d5 7118 	ldr.w	r7, [r5, #280]
   1a182:	4628      	mov	r0, r5
   1a184:	f8c5 4118 	str.w	r4, [r5, #280]
   1a188:	4631      	mov	r1, r6
   1a18a:	4622      	mov	r2, r4
   1a18c:	f7ff ff54 	bl	1a038 <d_print_mod_list>
   1a190:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a194:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a198:	d06b      	beq.n	1a272 <d_print_function_type+0x15e>
   1a19a:	2129      	movs	r1, #41
   1a19c:	eb05 030c 	add.w	r3, r5, ip
   1a1a0:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1a1a4:	7119      	strb	r1, [r3, #4]
   1a1a6:	f8c5 2104 	str.w	r2, [r5, #260]
   1a1aa:	f885 1108 	strb.w	r1, [r5, #264]
   1a1ae:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a1b2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a1b6:	d077      	beq.n	1a2a8 <d_print_function_type+0x194>
   1a1b8:	2128      	movs	r1, #40
   1a1ba:	eb05 030c 	add.w	r3, r5, ip
   1a1be:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1a1c2:	7119      	strb	r1, [r3, #4]
   1a1c4:	f8c5 2104 	str.w	r2, [r5, #260]
   1a1c8:	f885 1108 	strb.w	r1, [r5, #264]
   1a1cc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   1a1d0:	b111      	cbz	r1, 1a1d8 <d_print_function_type+0xc4>
   1a1d2:	4628      	mov	r0, r5
   1a1d4:	f7ff f980 	bl	194d8 <d_print_comp>
   1a1d8:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a1dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a1e0:	d054      	beq.n	1a28c <d_print_function_type+0x178>
   1a1e2:	2129      	movs	r1, #41
   1a1e4:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1a1e8:	eb05 030c 	add.w	r3, r5, ip
   1a1ec:	7119      	strb	r1, [r3, #4]
   1a1ee:	f8c5 2104 	str.w	r2, [r5, #260]
   1a1f2:	f885 1108 	strb.w	r1, [r5, #264]
   1a1f6:	4628      	mov	r0, r5
   1a1f8:	4631      	mov	r1, r6
   1a1fa:	2201      	movs	r2, #1
   1a1fc:	f7ff ff1c 	bl	1a038 <d_print_mod_list>
   1a200:	f8c5 7118 	str.w	r7, [r5, #280]
   1a204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a208:	6809      	ldr	r1, [r1, #0]
   1a20a:	b111      	cbz	r1, 1a212 <d_print_function_type+0xfe>
   1a20c:	688b      	ldr	r3, [r1, #8]
   1a20e:	2b00      	cmp	r3, #0
   1a210:	d08e      	beq.n	1a130 <d_print_function_type+0x1c>
   1a212:	2200      	movs	r2, #0
   1a214:	f8d5 7118 	ldr.w	r7, [r5, #280]
   1a218:	4628      	mov	r0, r5
   1a21a:	f8c5 2118 	str.w	r2, [r5, #280]
   1a21e:	4631      	mov	r1, r6
   1a220:	f7ff ff0a 	bl	1a038 <d_print_mod_list>
   1a224:	e7c3      	b.n	1a1ae <d_print_function_type+0x9a>
   1a226:	f895 3108 	ldrb.w	r3, [r5, #264]
   1a22a:	2b20      	cmp	r3, #32
   1a22c:	d097      	beq.n	1a15e <d_print_function_type+0x4a>
   1a22e:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a232:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a236:	d045      	beq.n	1a2c4 <d_print_function_type+0x1b0>
   1a238:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1a23c:	f8c5 2104 	str.w	r2, [r5, #260]
   1a240:	eb05 030c 	add.w	r3, r5, ip
   1a244:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a248:	2120      	movs	r1, #32
   1a24a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a24e:	7119      	strb	r1, [r3, #4]
   1a250:	f885 1108 	strb.w	r1, [r5, #264]
   1a254:	d188      	bne.n	1a168 <d_print_function_type+0x54>
   1a256:	2400      	movs	r4, #0
   1a258:	4661      	mov	r1, ip
   1a25a:	f885 4103 	strb.w	r4, [r5, #259]
   1a25e:	1d28      	adds	r0, r5, #4
   1a260:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a264:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a268:	4798      	blx	r3
   1a26a:	f8c5 4104 	str.w	r4, [r5, #260]
   1a26e:	46a4      	mov	ip, r4
   1a270:	e77a      	b.n	1a168 <d_print_function_type+0x54>
   1a272:	4661      	mov	r1, ip
   1a274:	f885 4103 	strb.w	r4, [r5, #259]
   1a278:	1d28      	adds	r0, r5, #4
   1a27a:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a27e:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a282:	4798      	blx	r3
   1a284:	f8c5 4104 	str.w	r4, [r5, #260]
   1a288:	46a4      	mov	ip, r4
   1a28a:	e786      	b.n	1a19a <d_print_function_type+0x86>
   1a28c:	2400      	movs	r4, #0
   1a28e:	4661      	mov	r1, ip
   1a290:	f885 4103 	strb.w	r4, [r5, #259]
   1a294:	1d28      	adds	r0, r5, #4
   1a296:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a29a:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a29e:	4798      	blx	r3
   1a2a0:	f8c5 4104 	str.w	r4, [r5, #260]
   1a2a4:	46a4      	mov	ip, r4
   1a2a6:	e79c      	b.n	1a1e2 <d_print_function_type+0xce>
   1a2a8:	2400      	movs	r4, #0
   1a2aa:	4661      	mov	r1, ip
   1a2ac:	f885 4103 	strb.w	r4, [r5, #259]
   1a2b0:	1d28      	adds	r0, r5, #4
   1a2b2:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a2b6:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a2ba:	4798      	blx	r3
   1a2bc:	f8c5 4104 	str.w	r4, [r5, #260]
   1a2c0:	46a4      	mov	ip, r4
   1a2c2:	e779      	b.n	1a1b8 <d_print_function_type+0xa4>
   1a2c4:	2400      	movs	r4, #0
   1a2c6:	4661      	mov	r1, ip
   1a2c8:	f885 4103 	strb.w	r4, [r5, #259]
   1a2cc:	1d28      	adds	r0, r5, #4
   1a2ce:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a2d2:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a2d6:	4798      	blx	r3
   1a2d8:	f8c5 4104 	str.w	r4, [r5, #260]
   1a2dc:	46a4      	mov	ip, r4
   1a2de:	e7ab      	b.n	1a238 <d_print_function_type+0x124>
   1a2e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a2e4:	2b00      	cmp	r3, #0
   1a2e6:	f47f af34 	bne.w	1a152 <d_print_function_type+0x3e>
   1a2ea:	e792      	b.n	1a212 <d_print_function_type+0xfe>
   1a2ec:	00010c47 	.word	0x00010c47

0001a2f0 <d_print_cast>:
   1a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2f2:	460e      	mov	r6, r1
   1a2f4:	6849      	ldr	r1, [r1, #4]
   1a2f6:	b083      	sub	sp, #12
   1a2f8:	780b      	ldrb	r3, [r1, #0]
   1a2fa:	4605      	mov	r5, r0
   1a2fc:	2b04      	cmp	r3, #4
   1a2fe:	d003      	beq.n	1a308 <d_print_cast+0x18>
   1a300:	f7ff f8ea 	bl	194d8 <d_print_comp>
   1a304:	b003      	add	sp, #12
   1a306:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a308:	f8d0 2114 	ldr.w	r2, [r0, #276]
   1a30c:	2300      	movs	r3, #0
   1a30e:	f8d0 7118 	ldr.w	r7, [r0, #280]
   1a312:	f8c0 3118 	str.w	r3, [r0, #280]
   1a316:	ab02      	add	r3, sp, #8
   1a318:	f843 2d08 	str.w	r2, [r3, #-8]!
   1a31c:	f8c0 3114 	str.w	r3, [r0, #276]
   1a320:	9101      	str	r1, [sp, #4]
   1a322:	6849      	ldr	r1, [r1, #4]
   1a324:	f7ff f8d8 	bl	194d8 <d_print_comp>
   1a328:	f895 2108 	ldrb.w	r2, [r5, #264]
   1a32c:	9b00      	ldr	r3, [sp, #0]
   1a32e:	2a3c      	cmp	r2, #60
   1a330:	f8c5 3114 	str.w	r3, [r5, #276]
   1a334:	d045      	beq.n	1a3c2 <d_print_cast+0xd2>
   1a336:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a33a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a33e:	d024      	beq.n	1a38a <d_print_cast+0x9a>
   1a340:	213c      	movs	r1, #60
   1a342:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   1a346:	eb05 020c 	add.w	r2, r5, ip
   1a34a:	7111      	strb	r1, [r2, #4]
   1a34c:	f8c5 3104 	str.w	r3, [r5, #260]
   1a350:	f885 1108 	strb.w	r1, [r5, #264]
   1a354:	6873      	ldr	r3, [r6, #4]
   1a356:	4628      	mov	r0, r5
   1a358:	6899      	ldr	r1, [r3, #8]
   1a35a:	f7ff f8bd 	bl	194d8 <d_print_comp>
   1a35e:	f895 3108 	ldrb.w	r3, [r5, #264]
   1a362:	2b3e      	cmp	r3, #62
   1a364:	d032      	beq.n	1a3cc <d_print_cast+0xdc>
   1a366:	f8d5 c104 	ldr.w	ip, [r5, #260]
   1a36a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a36e:	d01a      	beq.n	1a3a6 <d_print_cast+0xb6>
   1a370:	213e      	movs	r1, #62
   1a372:	eb05 030c 	add.w	r3, r5, ip
   1a376:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   1a37a:	7119      	strb	r1, [r3, #4]
   1a37c:	f8c5 2104 	str.w	r2, [r5, #260]
   1a380:	f885 1108 	strb.w	r1, [r5, #264]
   1a384:	f8c5 7118 	str.w	r7, [r5, #280]
   1a388:	e7bc      	b.n	1a304 <d_print_cast+0x14>
   1a38a:	2400      	movs	r4, #0
   1a38c:	4661      	mov	r1, ip
   1a38e:	f885 4103 	strb.w	r4, [r5, #259]
   1a392:	1d28      	adds	r0, r5, #4
   1a394:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a398:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a39c:	4798      	blx	r3
   1a39e:	f8c5 4104 	str.w	r4, [r5, #260]
   1a3a2:	46a4      	mov	ip, r4
   1a3a4:	e7cc      	b.n	1a340 <d_print_cast+0x50>
   1a3a6:	2400      	movs	r4, #0
   1a3a8:	4661      	mov	r1, ip
   1a3aa:	f885 4103 	strb.w	r4, [r5, #259]
   1a3ae:	1d28      	adds	r0, r5, #4
   1a3b0:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1a3b4:	f8d5 310c 	ldr.w	r3, [r5, #268]
   1a3b8:	4798      	blx	r3
   1a3ba:	f8c5 4104 	str.w	r4, [r5, #260]
   1a3be:	46a4      	mov	ip, r4
   1a3c0:	e7d6      	b.n	1a370 <d_print_cast+0x80>
   1a3c2:	4628      	mov	r0, r5
   1a3c4:	2120      	movs	r1, #32
   1a3c6:	f7fd fd71 	bl	17eac <d_append_char>
   1a3ca:	e7b4      	b.n	1a336 <d_print_cast+0x46>
   1a3cc:	4628      	mov	r0, r5
   1a3ce:	2120      	movs	r1, #32
   1a3d0:	f7fd fd6c 	bl	17eac <d_append_char>
   1a3d4:	e7c7      	b.n	1a366 <d_print_cast+0x76>
   1a3d6:	46c0      	nop			(mov r8, r8)

0001a3d8 <d_print_expr_op>:
   1a3d8:	780b      	ldrb	r3, [r1, #0]
   1a3da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3de:	2b29      	cmp	r3, #41
   1a3e0:	4604      	mov	r4, r0
   1a3e2:	d003      	beq.n	1a3ec <d_print_expr_op+0x14>
   1a3e4:	f7ff f878 	bl	194d8 <d_print_comp>
   1a3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a3ec:	684b      	ldr	r3, [r1, #4]
   1a3ee:	689f      	ldr	r7, [r3, #8]
   1a3f0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1a3f4:	2f00      	cmp	r7, #0
   1a3f6:	d0f7      	beq.n	1a3e8 <d_print_expr_op+0x10>
   1a3f8:	2500      	movs	r5, #0
   1a3fa:	f100 0904 	add.w	r9, r0, #4	; 0x4
   1a3fe:	46aa      	mov	sl, r5
   1a400:	e00a      	b.n	1a418 <d_print_expr_op+0x40>
   1a402:	3501      	adds	r5, #1
   1a404:	1c4a      	adds	r2, r1, #1
   1a406:	eb04 0301 	add.w	r3, r4, r1
   1a40a:	42af      	cmp	r7, r5
   1a40c:	711e      	strb	r6, [r3, #4]
   1a40e:	f8c4 2104 	str.w	r2, [r4, #260]
   1a412:	f884 6108 	strb.w	r6, [r4, #264]
   1a416:	d9e7      	bls.n	1a3e8 <d_print_expr_op+0x10>
   1a418:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1a41c:	f818 6005 	ldrb.w	r6, [r8, r5]
   1a420:	29ff      	cmp	r1, #255
   1a422:	d1ee      	bne.n	1a402 <d_print_expr_op+0x2a>
   1a424:	f884 a103 	strb.w	sl, [r4, #259]
   1a428:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1a42c:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1a430:	4648      	mov	r0, r9
   1a432:	4798      	blx	r3
   1a434:	f8c4 a104 	str.w	sl, [r4, #260]
   1a438:	4651      	mov	r1, sl
   1a43a:	e7e2      	b.n	1a402 <d_print_expr_op+0x2a>

0001a43c <d_demangle_callback>:
   1a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a440:	b0d7      	sub	sp, #348
   1a442:	7806      	ldrb	r6, [r0, #0]
   1a444:	af00      	add	r7, sp, #0
   1a446:	2e5f      	cmp	r6, #95
   1a448:	4604      	mov	r4, r0
   1a44a:	460d      	mov	r5, r1
   1a44c:	4691      	mov	r9, r2
   1a44e:	469a      	mov	sl, r3
   1a450:	d105      	bne.n	1a45e <d_demangle_callback+0x22>
   1a452:	7843      	ldrb	r3, [r0, #1]
   1a454:	2b5a      	cmp	r3, #90
   1a456:	bf08      	it	eq
   1a458:	f04f 0800 	moveq.w	r8, #0	; 0x0
   1a45c:	d017      	beq.n	1a48e <d_demangle_callback+0x52>
   1a45e:	4620      	mov	r0, r4
   1a460:	4961      	ldr	r1, [pc, #388]	(1a5e8 <d_demangle_callback+0x1ac>)
   1a462:	2208      	movs	r2, #8
   1a464:	f007 f864 	bl	21530 <strncmp>
   1a468:	b960      	cbnz	r0, 1a484 <d_demangle_callback+0x48>
   1a46a:	7a22      	ldrb	r2, [r4, #8]
   1a46c:	2a5f      	cmp	r2, #95
   1a46e:	bf14      	ite	ne
   1a470:	2300      	movne	r3, #0
   1a472:	2301      	moveq	r3, #1
   1a474:	2a2e      	cmp	r2, #46
   1a476:	bf08      	it	eq
   1a478:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a47c:	2b00      	cmp	r3, #0
   1a47e:	d175      	bne.n	1a56c <d_demangle_callback+0x130>
   1a480:	2a24      	cmp	r2, #36
   1a482:	d073      	beq.n	1a56c <d_demangle_callback+0x130>
   1a484:	f015 0010 	ands.w	r0, r5, #16	; 0x10
   1a488:	d06b      	beq.n	1a562 <d_demangle_callback+0x126>
   1a48a:	f04f 0801 	mov.w	r8, #1	; 0x1
   1a48e:	4620      	mov	r0, r4
   1a490:	f007 f846 	bl	21520 <strlen>
   1a494:	eb04 0300 	add.w	r3, r4, r0
   1a498:	2200      	movs	r2, #0
   1a49a:	f8c7 3128 	str.w	r3, [r7, #296]
   1a49e:	0043      	lsls	r3, r0, #1
   1a4a0:	f8c7 313c 	str.w	r3, [r7, #316]
   1a4a4:	f8c7 2138 	str.w	r2, [r7, #312]
   1a4a8:	0143      	lsls	r3, r0, #5
   1a4aa:	f8c7 2144 	str.w	r2, [r7, #324]
   1a4ae:	f8c7 214c 	str.w	r2, [r7, #332]
   1a4b2:	f8c7 2150 	str.w	r2, [r7, #336]
   1a4b6:	f8c7 2154 	str.w	r2, [r7, #340]
   1a4ba:	00c2      	lsls	r2, r0, #3
   1a4bc:	1a9b      	subs	r3, r3, r2
   1a4be:	f8c7 0148 	str.w	r0, [r7, #328]
   1a4c2:	3308      	adds	r3, #8
   1a4c4:	0080      	lsls	r0, r0, #2
   1a4c6:	46eb      	mov	fp, sp
   1a4c8:	300e      	adds	r0, #14
   1a4ca:	ebc3 0d0d 	rsb	sp, r3, sp
   1a4ce:	ea4f 02dd 	mov.w	r2, sp, lsr #3
   1a4d2:	f020 0007 	bic.w	r0, r0, #7	; 0x7
   1a4d6:	00d2      	lsls	r2, r2, #3
   1a4d8:	ebc0 0d0d 	rsb	sp, r0, sp
   1a4dc:	f8c7 4124 	str.w	r4, [r7, #292]
   1a4e0:	f8c7 512c 	str.w	r5, [r7, #300]
   1a4e4:	f8c7 4130 	str.w	r4, [r7, #304]
   1a4e8:	f8c7 2134 	str.w	r2, [r7, #308]
   1a4ec:	f8c7 d140 	str.w	sp, [r7, #320]
   1a4f0:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a4f4:	d15f      	bne.n	1a5b6 <d_demangle_callback+0x17a>
   1a4f6:	2e5f      	cmp	r6, #95
   1a4f8:	d066      	beq.n	1a5c8 <d_demangle_callback+0x18c>
   1a4fa:	2100      	movs	r1, #0
   1a4fc:	f015 0f01 	tst.w	r5, #1	; 0x1
   1a500:	d004      	beq.n	1a50c <d_demangle_callback+0xd0>
   1a502:	f8d7 3130 	ldr.w	r3, [r7, #304]
   1a506:	781a      	ldrb	r2, [r3, #0]
   1a508:	2a00      	cmp	r2, #0
   1a50a:	d15a      	bne.n	1a5c2 <d_demangle_callback+0x186>
   1a50c:	2900      	cmp	r1, #0
   1a50e:	d058      	beq.n	1a5c2 <d_demangle_callback+0x186>
   1a510:	1d3c      	adds	r4, r7, #4
   1a512:	6025      	str	r5, [r4, #0]
   1a514:	2500      	movs	r5, #0
   1a516:	4620      	mov	r0, r4
   1a518:	f8c4 5104 	str.w	r5, [r4, #260]
   1a51c:	f884 5108 	strb.w	r5, [r4, #264]
   1a520:	f8c4 5114 	str.w	r5, [r4, #276]
   1a524:	f8c4 5118 	str.w	r5, [r4, #280]
   1a528:	f8c4 910c 	str.w	r9, [r4, #268]
   1a52c:	f8c4 a110 	str.w	sl, [r4, #272]
   1a530:	f8c4 511c 	str.w	r5, [r4, #284]
   1a534:	f7fe ffd0 	bl	194d8 <d_print_comp>
   1a538:	f8d4 1104 	ldr.w	r1, [r4, #260]
   1a53c:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1a540:	eb04 0301 	add.w	r3, r4, r1
   1a544:	711d      	strb	r5, [r3, #4]
   1a546:	f8d4 2110 	ldr.w	r2, [r4, #272]
   1a54a:	f8d4 310c 	ldr.w	r3, [r4, #268]
   1a54e:	4798      	blx	r3
   1a550:	f8d4 311c 	ldr.w	r3, [r4, #284]
   1a554:	f8c4 5104 	str.w	r5, [r4, #260]
   1a558:	42ab      	cmp	r3, r5
   1a55a:	bf14      	ite	ne
   1a55c:	2000      	movne	r0, #0
   1a55e:	2001      	moveq	r0, #1
   1a560:	46dd      	mov	sp, fp
   1a562:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   1a566:	46bd      	mov	sp, r7
   1a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a56c:	7a63      	ldrb	r3, [r4, #9]
   1a56e:	2b49      	cmp	r3, #73
   1a570:	bf14      	ite	ne
   1a572:	2200      	movne	r2, #0
   1a574:	2201      	moveq	r2, #1
   1a576:	2b44      	cmp	r3, #68
   1a578:	bf14      	ite	ne
   1a57a:	4613      	movne	r3, r2
   1a57c:	f042 0301 	orreq.w	r3, r2, #1	; 0x1
   1a580:	2b00      	cmp	r3, #0
   1a582:	f43f af7f 	beq.w	1a484 <d_demangle_callback+0x48>
   1a586:	7aa3      	ldrb	r3, [r4, #10]
   1a588:	2b5f      	cmp	r3, #95
   1a58a:	f47f af7b 	bne.w	1a484 <d_demangle_callback+0x48>
   1a58e:	4b17      	ldr	r3, [pc, #92]	(1a5ec <d_demangle_callback+0x1b0>)
   1a590:	4817      	ldr	r0, [pc, #92]	(1a5f0 <d_demangle_callback+0x1b4>)
   1a592:	2a00      	cmp	r2, #0
   1a594:	bf08      	it	eq
   1a596:	4618      	moveq	r0, r3
   1a598:	bf14      	ite	ne
   1a59a:	211d      	movne	r1, #29
   1a59c:	211c      	moveq	r1, #28
   1a59e:	4652      	mov	r2, sl
   1a5a0:	340b      	adds	r4, #11
   1a5a2:	47c8      	blx	r9
   1a5a4:	4620      	mov	r0, r4
   1a5a6:	f006 ffbb 	bl	21520 <strlen>
   1a5aa:	4652      	mov	r2, sl
   1a5ac:	4601      	mov	r1, r0
   1a5ae:	4620      	mov	r0, r4
   1a5b0:	47c8      	blx	r9
   1a5b2:	2001      	movs	r0, #1
   1a5b4:	e7d5      	b.n	1a562 <d_demangle_callback+0x126>
   1a5b6:	f507 7092 	add.w	r0, r7, #292	; 0x124
   1a5ba:	f7fd fd07 	bl	17fcc <d_type>
   1a5be:	4601      	mov	r1, r0
   1a5c0:	e79c      	b.n	1a4fc <d_demangle_callback+0xc0>
   1a5c2:	2000      	movs	r0, #0
   1a5c4:	46dd      	mov	sp, fp
   1a5c6:	e7cc      	b.n	1a562 <d_demangle_callback+0x126>
   1a5c8:	1c62      	adds	r2, r4, #1
   1a5ca:	f8c7 2130 	str.w	r2, [r7, #304]
   1a5ce:	7863      	ldrb	r3, [r4, #1]
   1a5d0:	2b5a      	cmp	r3, #90
   1a5d2:	d192      	bne.n	1a4fa <d_demangle_callback+0xbe>
   1a5d4:	1c53      	adds	r3, r2, #1
   1a5d6:	2101      	movs	r1, #1
   1a5d8:	f507 7092 	add.w	r0, r7, #292	; 0x124
   1a5dc:	f8c7 3130 	str.w	r3, [r7, #304]
   1a5e0:	f7fe f8b6 	bl	18750 <d_encoding>
   1a5e4:	4601      	mov	r1, r0
   1a5e6:	e789      	b.n	1a4fc <d_demangle_callback+0xc0>
   1a5e8:	00023220 	.word	0x00023220
   1a5ec:	000233fc 	.word	0x000233fc
   1a5f0:	0002341c 	.word	0x0002341c

0001a5f4 <__gcclibcxx_demangle_callback>:
   1a5f4:	f1d1 0301 	rsbs	r3, r1, #1	; 0x1
   1a5f8:	bf38      	it	cc
   1a5fa:	2300      	movcc	r3, #0
   1a5fc:	2800      	cmp	r0, #0
   1a5fe:	bf08      	it	eq
   1a600:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1a604:	b510      	push	{r4, lr}
   1a606:	468c      	mov	ip, r1
   1a608:	4614      	mov	r4, r2
   1a60a:	b113      	cbz	r3, 1a612 <__gcclibcxx_demangle_callback+0x1e>
   1a60c:	f06f 0002 	mvn.w	r0, #2	; 0x2
   1a610:	bd10      	pop	{r4, pc}
   1a612:	2111      	movs	r1, #17
   1a614:	4662      	mov	r2, ip
   1a616:	4623      	mov	r3, r4
   1a618:	f7ff ff10 	bl	1a43c <d_demangle_callback>
   1a61c:	2800      	cmp	r0, #0
   1a61e:	bf0c      	ite	eq
   1a620:	f06f 0001 	mvneq.w	r0, #1	; 0x1
   1a624:	2000      	movne	r0, #0
   1a626:	e7f3      	b.n	1a610 <__gcclibcxx_demangle_callback+0x1c>

0001a628 <__cxa_demangle>:
   1a628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a62c:	460e      	mov	r6, r1
   1a62e:	b084      	sub	sp, #16
   1a630:	4617      	mov	r7, r2
   1a632:	4698      	mov	r8, r3
   1a634:	2800      	cmp	r0, #0
   1a636:	d05b      	beq.n	1a6f0 <__cxa_demangle+0xc8>
   1a638:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   1a63c:	bf38      	it	cc
   1a63e:	2300      	movcc	r3, #0
   1a640:	2900      	cmp	r1, #0
   1a642:	bf0c      	ite	eq
   1a644:	2300      	moveq	r3, #0
   1a646:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1a64a:	2b00      	cmp	r3, #0
   1a64c:	d145      	bne.n	1a6da <__cxa_demangle+0xb2>
   1a64e:	9300      	str	r3, [sp, #0]
   1a650:	9301      	str	r3, [sp, #4]
   1a652:	9302      	str	r3, [sp, #8]
   1a654:	9303      	str	r3, [sp, #12]
   1a656:	2111      	movs	r1, #17
   1a658:	4a2c      	ldr	r2, [pc, #176]	(1a70c <__cxa_demangle+0xe4>)
   1a65a:	466b      	mov	r3, sp
   1a65c:	f7ff feee 	bl	1a43c <d_demangle_callback>
   1a660:	4604      	mov	r4, r0
   1a662:	2800      	cmp	r0, #0
   1a664:	d026      	beq.n	1a6b4 <__cxa_demangle+0x8c>
   1a666:	9b03      	ldr	r3, [sp, #12]
   1a668:	9c00      	ldr	r4, [sp, #0]
   1a66a:	1e1d      	subs	r5, r3, #0
   1a66c:	bf18      	it	ne
   1a66e:	2501      	movne	r5, #1
   1a670:	4628      	mov	r0, r5
   1a672:	2c00      	cmp	r4, #0
   1a674:	d022      	beq.n	1a6bc <__cxa_demangle+0x94>
   1a676:	2e00      	cmp	r6, #0
   1a678:	d02b      	beq.n	1a6d2 <__cxa_demangle+0xaa>
   1a67a:	4620      	mov	r0, r4
   1a67c:	f006 ff50 	bl	21520 <strlen>
   1a680:	683b      	ldr	r3, [r7, #0]
   1a682:	4298      	cmp	r0, r3
   1a684:	d211      	bcs.n	1a6aa <__cxa_demangle+0x82>
   1a686:	4621      	mov	r1, r4
   1a688:	4630      	mov	r0, r6
   1a68a:	f006 ff41 	bl	21510 <strcpy>
   1a68e:	4620      	mov	r0, r4
   1a690:	f006 f922 	bl	208d8 <free>
   1a694:	4634      	mov	r4, r6
   1a696:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a69a:	d002      	beq.n	1a6a2 <__cxa_demangle+0x7a>
   1a69c:	2300      	movs	r3, #0
   1a69e:	f8c8 3000 	str.w	r3, [r8]
   1a6a2:	4620      	mov	r0, r4
   1a6a4:	b004      	add	sp, #16
   1a6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a6aa:	4630      	mov	r0, r6
   1a6ac:	f006 f914 	bl	208d8 <free>
   1a6b0:	603d      	str	r5, [r7, #0]
   1a6b2:	e7f0      	b.n	1a696 <__cxa_demangle+0x6e>
   1a6b4:	9800      	ldr	r0, [sp, #0]
   1a6b6:	f006 f90f 	bl	208d8 <free>
   1a6ba:	4620      	mov	r0, r4
   1a6bc:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a6c0:	d00e      	beq.n	1a6e0 <__cxa_demangle+0xb8>
   1a6c2:	2801      	cmp	r0, #1
   1a6c4:	d01c      	beq.n	1a700 <__cxa_demangle+0xd8>
   1a6c6:	f06f 0301 	mvn.w	r3, #1	; 0x1
   1a6ca:	f8c8 3000 	str.w	r3, [r8]
   1a6ce:	2400      	movs	r4, #0
   1a6d0:	e7e7      	b.n	1a6a2 <__cxa_demangle+0x7a>
   1a6d2:	2f00      	cmp	r7, #0
   1a6d4:	d0df      	beq.n	1a696 <__cxa_demangle+0x6e>
   1a6d6:	603d      	str	r5, [r7, #0]
   1a6d8:	e7dd      	b.n	1a696 <__cxa_demangle+0x6e>
   1a6da:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1a6de:	d101      	bne.n	1a6e4 <__cxa_demangle+0xbc>
   1a6e0:	2400      	movs	r4, #0
   1a6e2:	e7de      	b.n	1a6a2 <__cxa_demangle+0x7a>
   1a6e4:	f06f 0302 	mvn.w	r3, #2	; 0x2
   1a6e8:	f8c8 3000 	str.w	r3, [r8]
   1a6ec:	2400      	movs	r4, #0
   1a6ee:	e7d8      	b.n	1a6a2 <__cxa_demangle+0x7a>
   1a6f0:	2b00      	cmp	r3, #0
   1a6f2:	d0f5      	beq.n	1a6e0 <__cxa_demangle+0xb8>
   1a6f4:	f06f 0302 	mvn.w	r3, #2	; 0x2
   1a6f8:	f8c8 3000 	str.w	r3, [r8]
   1a6fc:	4604      	mov	r4, r0
   1a6fe:	e7d0      	b.n	1a6a2 <__cxa_demangle+0x7a>
   1a700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a704:	f8c8 3000 	str.w	r3, [r8]
   1a708:	2400      	movs	r4, #0
   1a70a:	e7ca      	b.n	1a6a2 <__cxa_demangle+0x7a>
   1a70c:	000191d9 	.word	0x000191d9

0001a710 <__aeabi_drsub>:
   1a710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1a714:	e002      	b.n	1a71c <__adddf3>
   1a716:	46c0      	nop			(mov r8, r8)

0001a718 <__aeabi_dsub>:
   1a718:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001a71c <__adddf3>:
   1a71c:	b530      	push	{r4, r5, lr}
   1a71e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1a722:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1a726:	ea94 0f05 	teq	r4, r5
   1a72a:	bf08      	it	eq
   1a72c:	ea90 0f02 	teqeq	r0, r2
   1a730:	bf1f      	itttt	ne
   1a732:	ea54 0c00 	orrsne.w	ip, r4, r0
   1a736:	ea55 0c02 	orrsne.w	ip, r5, r2
   1a73a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1a73e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a742:	f000 80e2 	beq.w	1a90a <__adddf3+0x1ee>
   1a746:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1a74a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1a74e:	bfb8      	it	lt
   1a750:	426d      	neglt	r5, r5
   1a752:	dd0c      	ble.n	1a76e <__adddf3+0x52>
   1a754:	442c      	add	r4, r5
   1a756:	ea80 0202 	eor.w	r2, r0, r2
   1a75a:	ea81 0303 	eor.w	r3, r1, r3
   1a75e:	ea82 0000 	eor.w	r0, r2, r0
   1a762:	ea83 0101 	eor.w	r1, r3, r1
   1a766:	ea80 0202 	eor.w	r2, r0, r2
   1a76a:	ea81 0303 	eor.w	r3, r1, r3
   1a76e:	2d36      	cmp	r5, #54
   1a770:	bf88      	it	hi
   1a772:	bd30      	pophi	{r4, r5, pc}
   1a774:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a778:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a77c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1a780:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1a784:	d002      	beq.n	1a78c <__adddf3+0x70>
   1a786:	4240      	negs	r0, r0
   1a788:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a78c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1a790:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a794:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1a798:	d002      	beq.n	1a7a0 <__adddf3+0x84>
   1a79a:	4252      	negs	r2, r2
   1a79c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1a7a0:	ea94 0f05 	teq	r4, r5
   1a7a4:	f000 80a7 	beq.w	1a8f6 <__adddf3+0x1da>
   1a7a8:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   1a7ac:	f1d5 0e20 	rsbs	lr, r5, #32	; 0x20
   1a7b0:	db0d      	blt.n	1a7ce <__adddf3+0xb2>
   1a7b2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1a7b6:	fa22 f205 	lsr.w	r2, r2, r5
   1a7ba:	1880      	adds	r0, r0, r2
   1a7bc:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1a7c0:	fa03 f20e 	lsl.w	r2, r3, lr
   1a7c4:	1880      	adds	r0, r0, r2
   1a7c6:	fa43 f305 	asr.w	r3, r3, r5
   1a7ca:	4159      	adcs	r1, r3
   1a7cc:	e00e      	b.n	1a7ec <__adddf3+0xd0>
   1a7ce:	f1a5 0520 	sub.w	r5, r5, #32	; 0x20
   1a7d2:	f10e 0e20 	add.w	lr, lr, #32	; 0x20
   1a7d6:	2a01      	cmp	r2, #1
   1a7d8:	fa03 fc0e 	lsl.w	ip, r3, lr
   1a7dc:	bf28      	it	cs
   1a7de:	f04c 0c02 	orrcs.w	ip, ip, #2	; 0x2
   1a7e2:	fa43 f305 	asr.w	r3, r3, r5
   1a7e6:	18c0      	adds	r0, r0, r3
   1a7e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1a7ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a7f0:	d507      	bpl.n	1a802 <__adddf3+0xe6>
   1a7f2:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1a7f6:	f1dc 0c00 	rsbs	ip, ip, #0	; 0x0
   1a7fa:	eb7e 0000 	sbcs.w	r0, lr, r0
   1a7fe:	eb6e 0101 	sbc.w	r1, lr, r1
   1a802:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1a806:	d31b      	bcc.n	1a840 <__adddf3+0x124>
   1a808:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1a80c:	d30c      	bcc.n	1a828 <__adddf3+0x10c>
   1a80e:	0849      	lsrs	r1, r1, #1
   1a810:	ea5f 0030 	movs.w	r0, r0, rrx
   1a814:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1a818:	f104 0401 	add.w	r4, r4, #1	; 0x1
   1a81c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1a820:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1a824:	f080 809a 	bcs.w	1a95c <__adddf3+0x240>
   1a828:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a82c:	bf08      	it	eq
   1a82e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a832:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1a836:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a83a:	ea41 0105 	orr.w	r1, r1, r5
   1a83e:	bd30      	pop	{r4, r5, pc}
   1a840:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1a844:	4140      	adcs	r0, r0
   1a846:	eb41 0101 	adc.w	r1, r1, r1
   1a84a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1a84e:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   1a852:	d1e9      	bne.n	1a828 <__adddf3+0x10c>
   1a854:	f091 0f00 	teq	r1, #0	; 0x0
   1a858:	bf04      	itt	eq
   1a85a:	4601      	moveq	r1, r0
   1a85c:	2000      	moveq	r0, #0
   1a85e:	fab1 f381 	clz	r3, r1
   1a862:	bf08      	it	eq
   1a864:	3320      	addeq	r3, #32
   1a866:	f1a3 030b 	sub.w	r3, r3, #11	; 0xb
   1a86a:	f1b3 0220 	subs.w	r2, r3, #32	; 0x20
   1a86e:	da0c      	bge.n	1a88a <__adddf3+0x16e>
   1a870:	320c      	adds	r2, #12
   1a872:	dd08      	ble.n	1a886 <__adddf3+0x16a>
   1a874:	f102 0c14 	add.w	ip, r2, #20	; 0x14
   1a878:	f1c2 020c 	rsb	r2, r2, #12	; 0xc
   1a87c:	fa01 f00c 	lsl.w	r0, r1, ip
   1a880:	fa21 f102 	lsr.w	r1, r1, r2
   1a884:	e00c      	b.n	1a8a0 <__adddf3+0x184>
   1a886:	f102 0214 	add.w	r2, r2, #20	; 0x14
   1a88a:	bfd8      	it	le
   1a88c:	f1c2 0c20 	rsble	ip, r2, #32	; 0x20
   1a890:	fa01 f102 	lsl.w	r1, r1, r2
   1a894:	fa20 fc0c 	lsr.w	ip, r0, ip
   1a898:	bfdc      	itt	le
   1a89a:	ea41 010c 	orrle.w	r1, r1, ip
   1a89e:	4090      	lslle	r0, r2
   1a8a0:	1ae4      	subs	r4, r4, r3
   1a8a2:	bfa2      	ittt	ge
   1a8a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1a8a8:	4329      	orrge	r1, r5
   1a8aa:	bd30      	popge	{r4, r5, pc}
   1a8ac:	ea6f 0404 	mvn.w	r4, r4
   1a8b0:	3c1f      	subs	r4, #31
   1a8b2:	da1c      	bge.n	1a8ee <__adddf3+0x1d2>
   1a8b4:	340c      	adds	r4, #12
   1a8b6:	dc0e      	bgt.n	1a8d6 <__adddf3+0x1ba>
   1a8b8:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1a8bc:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1a8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1a8c4:	fa01 f302 	lsl.w	r3, r1, r2
   1a8c8:	ea40 0003 	orr.w	r0, r0, r3
   1a8cc:	fa21 f304 	lsr.w	r3, r1, r4
   1a8d0:	ea45 0103 	orr.w	r1, r5, r3
   1a8d4:	bd30      	pop	{r4, r5, pc}
   1a8d6:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1a8da:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   1a8de:	fa20 f002 	lsr.w	r0, r0, r2
   1a8e2:	fa01 f304 	lsl.w	r3, r1, r4
   1a8e6:	ea40 0003 	orr.w	r0, r0, r3
   1a8ea:	4629      	mov	r1, r5
   1a8ec:	bd30      	pop	{r4, r5, pc}
   1a8ee:	fa21 f004 	lsr.w	r0, r1, r4
   1a8f2:	4629      	mov	r1, r5
   1a8f4:	bd30      	pop	{r4, r5, pc}
   1a8f6:	f094 0f00 	teq	r4, #0	; 0x0
   1a8fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a8fe:	bf06      	itte	eq
   1a900:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a904:	3401      	addeq	r4, #1
   1a906:	3d01      	subne	r5, #1
   1a908:	e74e      	b.n	1a7a8 <__adddf3+0x8c>
   1a90a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a90e:	bf18      	it	ne
   1a910:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a914:	d029      	beq.n	1a96a <__adddf3+0x24e>
   1a916:	ea94 0f05 	teq	r4, r5
   1a91a:	bf08      	it	eq
   1a91c:	ea90 0f02 	teqeq	r0, r2
   1a920:	d005      	beq.n	1a92e <__adddf3+0x212>
   1a922:	ea54 0c00 	orrs.w	ip, r4, r0
   1a926:	bf04      	itt	eq
   1a928:	4619      	moveq	r1, r3
   1a92a:	4610      	moveq	r0, r2
   1a92c:	bd30      	pop	{r4, r5, pc}
   1a92e:	ea91 0f03 	teq	r1, r3
   1a932:	bf1e      	ittt	ne
   1a934:	2100      	movne	r1, #0
   1a936:	2000      	movne	r0, #0
   1a938:	bd30      	popne	{r4, r5, pc}
   1a93a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a93e:	d105      	bne.n	1a94c <__adddf3+0x230>
   1a940:	0040      	lsls	r0, r0, #1
   1a942:	4149      	adcs	r1, r1
   1a944:	bf28      	it	cs
   1a946:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a94a:	bd30      	pop	{r4, r5, pc}
   1a94c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a950:	bf3c      	itt	cc
   1a952:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a956:	bd30      	popcc	{r4, r5, pc}
   1a958:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a95c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a960:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a964:	f04f 0000 	mov.w	r0, #0	; 0x0
   1a968:	bd30      	pop	{r4, r5, pc}
   1a96a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a96e:	bf1a      	itte	ne
   1a970:	4619      	movne	r1, r3
   1a972:	4610      	movne	r0, r2
   1a974:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a978:	bf1c      	itt	ne
   1a97a:	460b      	movne	r3, r1
   1a97c:	4602      	movne	r2, r0
   1a97e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a982:	bf06      	itte	eq
   1a984:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a988:	ea91 0f03 	teqeq	r1, r3
   1a98c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a990:	bd30      	pop	{r4, r5, pc}
   1a992:	46c0      	nop			(mov r8, r8)

0001a994 <__aeabi_ui2d>:
   1a994:	f090 0f00 	teq	r0, #0	; 0x0
   1a998:	bf04      	itt	eq
   1a99a:	2100      	moveq	r1, #0
   1a99c:	4770      	bxeq	lr
   1a99e:	b530      	push	{r4, r5, lr}
   1a9a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a9a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a9a8:	f04f 0500 	mov.w	r5, #0	; 0x0
   1a9ac:	f04f 0100 	mov.w	r1, #0	; 0x0
   1a9b0:	e750      	b.n	1a854 <__adddf3+0x138>
   1a9b2:	46c0      	nop			(mov r8, r8)

0001a9b4 <__aeabi_i2d>:
   1a9b4:	f090 0f00 	teq	r0, #0	; 0x0
   1a9b8:	bf04      	itt	eq
   1a9ba:	2100      	moveq	r1, #0
   1a9bc:	4770      	bxeq	lr
   1a9be:	b530      	push	{r4, r5, lr}
   1a9c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a9c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a9c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a9cc:	bf48      	it	mi
   1a9ce:	4240      	negmi	r0, r0
   1a9d0:	f04f 0100 	mov.w	r1, #0	; 0x0
   1a9d4:	e73e      	b.n	1a854 <__adddf3+0x138>
   1a9d6:	46c0      	nop			(mov r8, r8)

0001a9d8 <__aeabi_f2d>:
   1a9d8:	0042      	lsls	r2, r0, #1
   1a9da:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a9de:	ea4f 0131 	mov.w	r1, r1, rrx
   1a9e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a9e6:	bf1f      	itttt	ne
   1a9e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a9ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a9f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a9f4:	4770      	bxne	lr
   1a9f6:	f092 0f00 	teq	r2, #0	; 0x0
   1a9fa:	bf14      	ite	ne
   1a9fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1aa00:	4770      	bxeq	lr
   1aa02:	b530      	push	{r4, r5, lr}
   1aa04:	f44f 7460 	mov.w	r4, #896	; 0x380
   1aa08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1aa0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1aa10:	e720      	b.n	1a854 <__adddf3+0x138>
   1aa12:	46c0      	nop			(mov r8, r8)

0001aa14 <__aeabi_ul2d>:
   1aa14:	ea50 0201 	orrs.w	r2, r0, r1
   1aa18:	bf08      	it	eq
   1aa1a:	4770      	bxeq	lr
   1aa1c:	b530      	push	{r4, r5, lr}
   1aa1e:	f04f 0500 	mov.w	r5, #0	; 0x0
   1aa22:	e00a      	b.n	1aa3a <__aeabi_l2d+0x16>

0001aa24 <__aeabi_l2d>:
   1aa24:	ea50 0201 	orrs.w	r2, r0, r1
   1aa28:	bf08      	it	eq
   1aa2a:	4770      	bxeq	lr
   1aa2c:	b530      	push	{r4, r5, lr}
   1aa2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1aa32:	d502      	bpl.n	1aa3a <__aeabi_l2d+0x16>
   1aa34:	4240      	negs	r0, r0
   1aa36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1aa3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1aa3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1aa42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1aa46:	f43f aedc 	beq.w	1a802 <__adddf3+0xe6>
   1aa4a:	f04f 0203 	mov.w	r2, #3	; 0x3
   1aa4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1aa52:	bf18      	it	ne
   1aa54:	3203      	addne	r2, #3
   1aa56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1aa5a:	bf18      	it	ne
   1aa5c:	3203      	addne	r2, #3
   1aa5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1aa62:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1aa66:	fa00 fc03 	lsl.w	ip, r0, r3
   1aa6a:	fa20 f002 	lsr.w	r0, r0, r2
   1aa6e:	fa01 fe03 	lsl.w	lr, r1, r3
   1aa72:	ea40 000e 	orr.w	r0, r0, lr
   1aa76:	fa21 f102 	lsr.w	r1, r1, r2
   1aa7a:	4414      	add	r4, r2
   1aa7c:	e6c1      	b.n	1a802 <__adddf3+0xe6>
   1aa7e:	46c0      	nop			(mov r8, r8)

0001aa80 <__aeabi_dmul>:
   1aa80:	b570      	push	{r4, r5, r6, lr}
   1aa82:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1aa86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1aa8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1aa8e:	bf1d      	ittte	ne
   1aa90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1aa94:	ea94 0f0c 	teqne	r4, ip
   1aa98:	ea95 0f0c 	teqne	r5, ip
   1aa9c:	f000 f8de 	bleq	1ac5c <__aeabi_dmul+0x1dc>
   1aaa0:	442c      	add	r4, r5
   1aaa2:	ea81 0603 	eor.w	r6, r1, r3
   1aaa6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1aaaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1aaae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1aab2:	bf18      	it	ne
   1aab4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1aab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1aabc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1aac0:	d038      	beq.n	1ab34 <__aeabi_dmul+0xb4>
   1aac2:	fba0 ce02 	umull	ip, lr, r0, r2
   1aac6:	f04f 0500 	mov.w	r5, #0	; 0x0
   1aaca:	fbe1 e502 	umlal	lr, r5, r1, r2
   1aace:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1aad2:	fbe0 e503 	umlal	lr, r5, r0, r3
   1aad6:	f04f 0600 	mov.w	r6, #0	; 0x0
   1aada:	fbe1 5603 	umlal	r5, r6, r1, r3
   1aade:	f09c 0f00 	teq	ip, #0	; 0x0
   1aae2:	bf18      	it	ne
   1aae4:	f04e 0e01 	orrne.w	lr, lr, #1	; 0x1
   1aae8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1aaec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1aaf0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1aaf4:	d204      	bcs.n	1ab00 <__aeabi_dmul+0x80>
   1aaf6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1aafa:	416d      	adcs	r5, r5
   1aafc:	eb46 0606 	adc.w	r6, r6, r6
   1ab00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1ab04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1ab08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1ab0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1ab10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1ab14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ab18:	bf88      	it	hi
   1ab1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ab1e:	d81e      	bhi.n	1ab5e <__aeabi_dmul+0xde>
   1ab20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1ab24:	bf08      	it	eq
   1ab26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1ab2a:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1ab2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ab32:	bd70      	pop	{r4, r5, r6, pc}
   1ab34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1ab38:	ea46 0101 	orr.w	r1, r6, r1
   1ab3c:	ea40 0002 	orr.w	r0, r0, r2
   1ab40:	ea81 0103 	eor.w	r1, r1, r3
   1ab44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1ab48:	bfc2      	ittt	gt
   1ab4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ab4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ab52:	bd70      	popgt	{r4, r5, r6, pc}
   1ab54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ab58:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1ab5c:	3c01      	subs	r4, #1
   1ab5e:	f300 80ab 	bgt.w	1acb8 <__aeabi_dmul+0x238>
   1ab62:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1ab66:	bfde      	ittt	le
   1ab68:	2000      	movle	r0, #0
   1ab6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1ab6e:	bd70      	pople	{r4, r5, r6, pc}
   1ab70:	f1c4 0400 	rsb	r4, r4, #0	; 0x0
   1ab74:	3c20      	subs	r4, #32
   1ab76:	da35      	bge.n	1abe4 <__aeabi_dmul+0x164>
   1ab78:	340c      	adds	r4, #12
   1ab7a:	dc1b      	bgt.n	1abb4 <__aeabi_dmul+0x134>
   1ab7c:	f104 0414 	add.w	r4, r4, #20	; 0x14
   1ab80:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1ab84:	fa00 f305 	lsl.w	r3, r0, r5
   1ab88:	fa20 f004 	lsr.w	r0, r0, r4
   1ab8c:	fa01 f205 	lsl.w	r2, r1, r5
   1ab90:	ea40 0002 	orr.w	r0, r0, r2
   1ab94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1ab98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1ab9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1aba0:	fa21 f604 	lsr.w	r6, r1, r4
   1aba4:	eb42 0106 	adc.w	r1, r2, r6
   1aba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1abac:	bf08      	it	eq
   1abae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1abb2:	bd70      	pop	{r4, r5, r6, pc}
   1abb4:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1abb8:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1abbc:	fa00 f304 	lsl.w	r3, r0, r4
   1abc0:	fa20 f005 	lsr.w	r0, r0, r5
   1abc4:	fa01 f204 	lsl.w	r2, r1, r4
   1abc8:	ea40 0002 	orr.w	r0, r0, r2
   1abcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1abd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1abd4:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1abd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1abdc:	bf08      	it	eq
   1abde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1abe2:	bd70      	pop	{r4, r5, r6, pc}
   1abe4:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   1abe8:	fa00 f205 	lsl.w	r2, r0, r5
   1abec:	ea4e 0e02 	orr.w	lr, lr, r2
   1abf0:	fa20 f304 	lsr.w	r3, r0, r4
   1abf4:	fa01 f205 	lsl.w	r2, r1, r5
   1abf8:	ea43 0302 	orr.w	r3, r3, r2
   1abfc:	fa21 f004 	lsr.w	r0, r1, r4
   1ac00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ac04:	fa21 f204 	lsr.w	r2, r1, r4
   1ac08:	ea20 0002 	bic.w	r0, r0, r2
   1ac0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1ac10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1ac14:	bf08      	it	eq
   1ac16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1ac1a:	bd70      	pop	{r4, r5, r6, pc}
   1ac1c:	f094 0f00 	teq	r4, #0	; 0x0
   1ac20:	d10f      	bne.n	1ac42 <__aeabi_dmul+0x1c2>
   1ac22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1ac26:	0040      	lsls	r0, r0, #1
   1ac28:	eb41 0101 	adc.w	r1, r1, r1
   1ac2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ac30:	bf08      	it	eq
   1ac32:	3c01      	subeq	r4, #1
   1ac34:	d0f7      	beq.n	1ac26 <__aeabi_dmul+0x1a6>
   1ac36:	ea41 0106 	orr.w	r1, r1, r6
   1ac3a:	f095 0f00 	teq	r5, #0	; 0x0
   1ac3e:	bf18      	it	ne
   1ac40:	46f7      	movne	pc, lr
   1ac42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1ac46:	0052      	lsls	r2, r2, #1
   1ac48:	eb43 0303 	adc.w	r3, r3, r3
   1ac4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1ac50:	bf08      	it	eq
   1ac52:	3d01      	subeq	r5, #1
   1ac54:	d0f7      	beq.n	1ac46 <__aeabi_dmul+0x1c6>
   1ac56:	ea43 0306 	orr.w	r3, r3, r6
   1ac5a:	46f7      	mov	pc, lr
   1ac5c:	ea94 0f0c 	teq	r4, ip
   1ac60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ac64:	bf18      	it	ne
   1ac66:	ea95 0f0c 	teqne	r5, ip
   1ac6a:	d00c      	beq.n	1ac86 <__aeabi_dmul+0x206>
   1ac6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ac70:	bf18      	it	ne
   1ac72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ac76:	d1d1      	bne.n	1ac1c <__aeabi_dmul+0x19c>
   1ac78:	ea81 0103 	eor.w	r1, r1, r3
   1ac7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1ac80:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ac84:	bd70      	pop	{r4, r5, r6, pc}
   1ac86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ac8a:	bf06      	itte	eq
   1ac8c:	4610      	moveq	r0, r2
   1ac8e:	4619      	moveq	r1, r3
   1ac90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ac94:	d019      	beq.n	1acca <__aeabi_dmul+0x24a>
   1ac96:	ea94 0f0c 	teq	r4, ip
   1ac9a:	d102      	bne.n	1aca2 <__aeabi_dmul+0x222>
   1ac9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1aca0:	d113      	bne.n	1acca <__aeabi_dmul+0x24a>
   1aca2:	ea95 0f0c 	teq	r5, ip
   1aca6:	d105      	bne.n	1acb4 <__aeabi_dmul+0x234>
   1aca8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1acac:	bf1c      	itt	ne
   1acae:	4610      	movne	r0, r2
   1acb0:	4619      	movne	r1, r3
   1acb2:	d10a      	bne.n	1acca <__aeabi_dmul+0x24a>
   1acb4:	ea81 0103 	eor.w	r1, r1, r3
   1acb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1acbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1acc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1acc4:	f04f 0000 	mov.w	r0, #0	; 0x0
   1acc8:	bd70      	pop	{r4, r5, r6, pc}
   1acca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1acce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1acd2:	bd70      	pop	{r4, r5, r6, pc}

0001acd4 <__aeabi_ddiv>:
   1acd4:	b570      	push	{r4, r5, r6, lr}
   1acd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1acda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1acde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ace2:	bf1d      	ittte	ne
   1ace4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ace8:	ea94 0f0c 	teqne	r4, ip
   1acec:	ea95 0f0c 	teqne	r5, ip
   1acf0:	f000 f8a7 	bleq	1ae42 <__aeabi_ddiv+0x16e>
   1acf4:	eba4 0405 	sub.w	r4, r4, r5
   1acf8:	ea81 0e03 	eor.w	lr, r1, r3
   1acfc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ad00:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ad04:	f000 8088 	beq.w	1ae18 <__aeabi_ddiv+0x144>
   1ad08:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ad0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ad10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ad14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ad18:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ad1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ad20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ad24:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ad28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ad2c:	429d      	cmp	r5, r3
   1ad2e:	bf08      	it	eq
   1ad30:	4296      	cmpeq	r6, r2
   1ad32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ad36:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ad3a:	d202      	bcs.n	1ad42 <__aeabi_ddiv+0x6e>
   1ad3c:	085b      	lsrs	r3, r3, #1
   1ad3e:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad42:	1ab6      	subs	r6, r6, r2
   1ad44:	eb65 0503 	sbc.w	r5, r5, r3
   1ad48:	085b      	lsrs	r3, r3, #1
   1ad4a:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ad52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ad56:	ebb6 0e02 	subs.w	lr, r6, r2
   1ad5a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ad5e:	bf22      	ittt	cs
   1ad60:	1ab6      	subcs	r6, r6, r2
   1ad62:	4675      	movcs	r5, lr
   1ad64:	ea40 000c 	orrcs.w	r0, r0, ip
   1ad68:	085b      	lsrs	r3, r3, #1
   1ad6a:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad6e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ad72:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ad76:	bf22      	ittt	cs
   1ad78:	1ab6      	subcs	r6, r6, r2
   1ad7a:	4675      	movcs	r5, lr
   1ad7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1ad80:	085b      	lsrs	r3, r3, #1
   1ad82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad86:	ebb6 0e02 	subs.w	lr, r6, r2
   1ad8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ad8e:	bf22      	ittt	cs
   1ad90:	1ab6      	subcs	r6, r6, r2
   1ad92:	4675      	movcs	r5, lr
   1ad94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1ad98:	085b      	lsrs	r3, r3, #1
   1ad9a:	ea4f 0232 	mov.w	r2, r2, rrx
   1ad9e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ada2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ada6:	bf22      	ittt	cs
   1ada8:	1ab6      	subcs	r6, r6, r2
   1adaa:	4675      	movcs	r5, lr
   1adac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1adb0:	ea55 0e06 	orrs.w	lr, r5, r6
   1adb4:	d018      	beq.n	1ade8 <__aeabi_ddiv+0x114>
   1adb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1adba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1adbe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1adc2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1adc6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1adca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1adce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1add2:	d1c0      	bne.n	1ad56 <__aeabi_ddiv+0x82>
   1add4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1add8:	d10b      	bne.n	1adf2 <__aeabi_ddiv+0x11e>
   1adda:	ea41 0100 	orr.w	r1, r1, r0
   1adde:	f04f 0000 	mov.w	r0, #0	; 0x0
   1ade2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ade6:	e7b6      	b.n	1ad56 <__aeabi_ddiv+0x82>
   1ade8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1adec:	bf04      	itt	eq
   1adee:	4301      	orreq	r1, r0
   1adf0:	2000      	moveq	r0, #0
   1adf2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1adf6:	bf88      	it	hi
   1adf8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1adfc:	f63f aeaf 	bhi.w	1ab5e <__aeabi_dmul+0xde>
   1ae00:	ebb5 0c03 	subs.w	ip, r5, r3
   1ae04:	bf04      	itt	eq
   1ae06:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ae0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ae0e:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   1ae12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ae16:	bd70      	pop	{r4, r5, r6, pc}
   1ae18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ae1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ae20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ae24:	bfc2      	ittt	gt
   1ae26:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ae2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ae2e:	bd70      	popgt	{r4, r5, r6, pc}
   1ae30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ae34:	f04f 0e00 	mov.w	lr, #0	; 0x0
   1ae38:	3c01      	subs	r4, #1
   1ae3a:	e690      	b.n	1ab5e <__aeabi_dmul+0xde>
   1ae3c:	ea45 0e06 	orr.w	lr, r5, r6
   1ae40:	e68d      	b.n	1ab5e <__aeabi_dmul+0xde>
   1ae42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ae46:	ea94 0f0c 	teq	r4, ip
   1ae4a:	bf08      	it	eq
   1ae4c:	ea95 0f0c 	teqeq	r5, ip
   1ae50:	f43f af3b 	beq.w	1acca <__aeabi_dmul+0x24a>
   1ae54:	ea94 0f0c 	teq	r4, ip
   1ae58:	d10a      	bne.n	1ae70 <__aeabi_ddiv+0x19c>
   1ae5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ae5e:	f47f af34 	bne.w	1acca <__aeabi_dmul+0x24a>
   1ae62:	ea95 0f0c 	teq	r5, ip
   1ae66:	f47f af25 	bne.w	1acb4 <__aeabi_dmul+0x234>
   1ae6a:	4610      	mov	r0, r2
   1ae6c:	4619      	mov	r1, r3
   1ae6e:	e72c      	b.n	1acca <__aeabi_dmul+0x24a>
   1ae70:	ea95 0f0c 	teq	r5, ip
   1ae74:	d106      	bne.n	1ae84 <__aeabi_ddiv+0x1b0>
   1ae76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ae7a:	f43f aefd 	beq.w	1ac78 <__aeabi_dmul+0x1f8>
   1ae7e:	4610      	mov	r0, r2
   1ae80:	4619      	mov	r1, r3
   1ae82:	e722      	b.n	1acca <__aeabi_dmul+0x24a>
   1ae84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1ae88:	bf18      	it	ne
   1ae8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1ae8e:	f47f aec5 	bne.w	1ac1c <__aeabi_dmul+0x19c>
   1ae92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1ae96:	f47f af0d 	bne.w	1acb4 <__aeabi_dmul+0x234>
   1ae9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1ae9e:	f47f aeeb 	bne.w	1ac78 <__aeabi_dmul+0x1f8>
   1aea2:	e712      	b.n	1acca <__aeabi_dmul+0x24a>

0001aea4 <__gedf2>:
   1aea4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1aea8:	e006      	b.n	1aeb8 <__cmpdf2+0x4>
   1aeaa:	46c0      	nop			(mov r8, r8)

0001aeac <__ledf2>:
   1aeac:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1aeb0:	e002      	b.n	1aeb8 <__cmpdf2+0x4>
   1aeb2:	46c0      	nop			(mov r8, r8)

0001aeb4 <__cmpdf2>:
   1aeb4:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1aeb8:	f84d cc04 	str.w	ip, [sp, #-4]
   1aebc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1aec0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1aec4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1aec8:	bf18      	it	ne
   1aeca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1aece:	d01a      	beq.n	1af06 <__cmpdf2+0x52>
   1aed0:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1aed4:	bf0c      	ite	eq
   1aed6:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1aeda:	ea91 0f03 	teqne	r1, r3
   1aede:	bf02      	ittt	eq
   1aee0:	ea90 0f02 	teqeq	r0, r2
   1aee4:	2000      	moveq	r0, #0
   1aee6:	4770      	bxeq	lr
   1aee8:	f110 0f00 	cmn.w	r0, #0	; 0x0
   1aeec:	ea91 0f03 	teq	r1, r3
   1aef0:	bf58      	it	pl
   1aef2:	4299      	cmppl	r1, r3
   1aef4:	bf08      	it	eq
   1aef6:	4290      	cmpeq	r0, r2
   1aef8:	bf2c      	ite	cs
   1aefa:	17d8      	asrcs	r0, r3, #31
   1aefc:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1af00:	f040 0001 	orr.w	r0, r0, #1	; 0x1
   1af04:	4770      	bx	lr
   1af06:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1af0a:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1af0e:	d102      	bne.n	1af16 <__cmpdf2+0x62>
   1af10:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1af14:	d107      	bne.n	1af26 <__cmpdf2+0x72>
   1af16:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1af1a:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1af1e:	d1d7      	bne.n	1aed0 <__cmpdf2+0x1c>
   1af20:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1af24:	d0d4      	beq.n	1aed0 <__cmpdf2+0x1c>
   1af26:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1af2a:	4770      	bx	lr

0001af2c <__aeabi_cdrcmple>:
   1af2c:	4684      	mov	ip, r0
   1af2e:	4610      	mov	r0, r2
   1af30:	4662      	mov	r2, ip
   1af32:	468c      	mov	ip, r1
   1af34:	4619      	mov	r1, r3
   1af36:	4663      	mov	r3, ip
   1af38:	e000      	b.n	1af3c <__aeabi_cdcmpeq>
   1af3a:	46c0      	nop			(mov r8, r8)

0001af3c <__aeabi_cdcmpeq>:
   1af3c:	b501      	push	{r0, lr}
   1af3e:	f7ff ffb9 	bl	1aeb4 <__cmpdf2>
   1af42:	2800      	cmp	r0, #0
   1af44:	bf48      	it	mi
   1af46:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1af4a:	bd01      	pop	{r0, pc}

0001af4c <__aeabi_dcmpeq>:
   1af4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af50:	f7ff fff4 	bl	1af3c <__aeabi_cdcmpeq>
   1af54:	bf0c      	ite	eq
   1af56:	2001      	moveq	r0, #1
   1af58:	2000      	movne	r0, #0
   1af5a:	f85d fb08 	ldr.w	pc, [sp], #8
   1af5e:	46c0      	nop			(mov r8, r8)

0001af60 <__aeabi_dcmplt>:
   1af60:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af64:	f7ff ffea 	bl	1af3c <__aeabi_cdcmpeq>
   1af68:	bf34      	ite	cc
   1af6a:	2001      	movcc	r0, #1
   1af6c:	2000      	movcs	r0, #0
   1af6e:	f85d fb08 	ldr.w	pc, [sp], #8
   1af72:	46c0      	nop			(mov r8, r8)

0001af74 <__aeabi_dcmple>:
   1af74:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af78:	f7ff ffe0 	bl	1af3c <__aeabi_cdcmpeq>
   1af7c:	bf94      	ite	ls
   1af7e:	2001      	movls	r0, #1
   1af80:	2000      	movhi	r0, #0
   1af82:	f85d fb08 	ldr.w	pc, [sp], #8
   1af86:	46c0      	nop			(mov r8, r8)

0001af88 <__aeabi_dcmpge>:
   1af88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1af8c:	f7ff ffce 	bl	1af2c <__aeabi_cdrcmple>
   1af90:	bf94      	ite	ls
   1af92:	2001      	movls	r0, #1
   1af94:	2000      	movhi	r0, #0
   1af96:	f85d fb08 	ldr.w	pc, [sp], #8
   1af9a:	46c0      	nop			(mov r8, r8)

0001af9c <__aeabi_dcmpgt>:
   1af9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1afa0:	f7ff ffc4 	bl	1af2c <__aeabi_cdrcmple>
   1afa4:	bf34      	ite	cc
   1afa6:	2001      	movcc	r0, #1
   1afa8:	2000      	movcs	r0, #0
   1afaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1afae:	46c0      	nop			(mov r8, r8)

0001afb0 <__aeabi_d2iz>:
   1afb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1afb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1afb8:	d215      	bcs.n	1afe6 <__aeabi_d2iz+0x36>
   1afba:	d511      	bpl.n	1afe0 <__aeabi_d2iz+0x30>
   1afbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1afc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1afc4:	d912      	bls.n	1afec <__aeabi_d2iz+0x3c>
   1afc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1afca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1afce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1afd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1afd6:	fa23 f002 	lsr.w	r0, r3, r2
   1afda:	bf18      	it	ne
   1afdc:	4240      	negne	r0, r0
   1afde:	4770      	bx	lr
   1afe0:	f04f 0000 	mov.w	r0, #0	; 0x0
   1afe4:	4770      	bx	lr
   1afe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1afea:	d105      	bne.n	1aff8 <__aeabi_d2iz+0x48>
   1afec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1aff0:	bf08      	it	eq
   1aff2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1aff6:	4770      	bx	lr
   1aff8:	f04f 0000 	mov.w	r0, #0	; 0x0
   1affc:	4770      	bx	lr
   1affe:	46c0      	nop			(mov r8, r8)

0001b000 <__aeabi_d2f>:
   1b000:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1b004:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1b008:	bf24      	itt	cs
   1b00a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1b00e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1b012:	d90d      	bls.n	1b030 <__aeabi_d2f+0x30>
   1b014:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1b018:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1b01c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1b020:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b024:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1b028:	bf08      	it	eq
   1b02a:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1b02e:	4770      	bx	lr
   1b030:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1b034:	d121      	bne.n	1b07a <__aeabi_d2f+0x7a>
   1b036:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1b03a:	bfbc      	itt	lt
   1b03c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1b040:	4770      	bxlt	lr
   1b042:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1b046:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1b04a:	f1c2 0218 	rsb	r2, r2, #24	; 0x18
   1b04e:	f1c2 0c20 	rsb	ip, r2, #32	; 0x20
   1b052:	fa10 f30c 	lsls.w	r3, r0, ip
   1b056:	fa20 f002 	lsr.w	r0, r0, r2
   1b05a:	bf18      	it	ne
   1b05c:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1b060:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1b064:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1b068:	fa03 fc0c 	lsl.w	ip, r3, ip
   1b06c:	ea40 000c 	orr.w	r0, r0, ip
   1b070:	fa23 f302 	lsr.w	r3, r3, r2
   1b074:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1b078:	e7cc      	b.n	1b014 <__aeabi_d2f+0x14>
   1b07a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1b07e:	d107      	bne.n	1b090 <__aeabi_d2f+0x90>
   1b080:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1b084:	bf1e      	ittt	ne
   1b086:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1b08a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1b08e:	4770      	bxne	lr
   1b090:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1b094:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1b098:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b09c:	4770      	bx	lr
   1b09e:	46c0      	nop			(mov r8, r8)

0001b0a0 <__aeabi_frsub>:
   1b0a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   1b0a4:	e002      	b.n	1b0ac <__addsf3>
   1b0a6:	46c0      	nop			(mov r8, r8)

0001b0a8 <__aeabi_fsub>:
   1b0a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0001b0ac <__addsf3>:
   1b0ac:	0042      	lsls	r2, r0, #1
   1b0ae:	bf1f      	itttt	ne
   1b0b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   1b0b4:	ea92 0f03 	teqne	r2, r3
   1b0b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   1b0bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b0c0:	d06a      	beq.n	1b198 <__addsf3+0xec>
   1b0c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1b0c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1b0ca:	bfc1      	itttt	gt
   1b0cc:	18d2      	addgt	r2, r2, r3
   1b0ce:	4041      	eorgt	r1, r0
   1b0d0:	4048      	eorgt	r0, r1
   1b0d2:	4041      	eorgt	r1, r0
   1b0d4:	bfb8      	it	lt
   1b0d6:	425b      	neglt	r3, r3
   1b0d8:	2b19      	cmp	r3, #25
   1b0da:	bf88      	it	hi
   1b0dc:	4770      	bxhi	lr
   1b0de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1b0e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b0e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1b0ea:	bf18      	it	ne
   1b0ec:	4240      	negne	r0, r0
   1b0ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1b0f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1b0f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b0fa:	bf18      	it	ne
   1b0fc:	4249      	negne	r1, r1
   1b0fe:	ea92 0f03 	teq	r2, r3
   1b102:	d03f      	beq.n	1b184 <__addsf3+0xd8>
   1b104:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1b108:	fa41 fc03 	asr.w	ip, r1, r3
   1b10c:	eb10 000c 	adds.w	r0, r0, ip
   1b110:	f1c3 0320 	rsb	r3, r3, #32	; 0x20
   1b114:	fa01 f103 	lsl.w	r1, r1, r3
   1b118:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b11c:	d502      	bpl.n	1b124 <__addsf3+0x78>
   1b11e:	4249      	negs	r1, r1
   1b120:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   1b124:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b128:	d313      	bcc.n	1b152 <__addsf3+0xa6>
   1b12a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1b12e:	d306      	bcc.n	1b13e <__addsf3+0x92>
   1b130:	0840      	lsrs	r0, r0, #1
   1b132:	ea4f 0131 	mov.w	r1, r1, rrx
   1b136:	f102 0201 	add.w	r2, r2, #1	; 0x1
   1b13a:	2afe      	cmp	r2, #254
   1b13c:	d251      	bcs.n	1b1e2 <__addsf3+0x136>
   1b13e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1b142:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b146:	bf08      	it	eq
   1b148:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1b14c:	ea40 0003 	orr.w	r0, r0, r3
   1b150:	4770      	bx	lr
   1b152:	0049      	lsls	r1, r1, #1
   1b154:	eb40 0000 	adc.w	r0, r0, r0
   1b158:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   1b15c:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   1b160:	d1ed      	bne.n	1b13e <__addsf3+0x92>
   1b162:	fab0 fc80 	clz	ip, r0
   1b166:	f1ac 0c08 	sub.w	ip, ip, #8	; 0x8
   1b16a:	ebb2 020c 	subs.w	r2, r2, ip
   1b16e:	fa00 f00c 	lsl.w	r0, r0, ip
   1b172:	bfaa      	itet	ge
   1b174:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   1b178:	4252      	neglt	r2, r2
   1b17a:	4318      	orrge	r0, r3
   1b17c:	bfbc      	itt	lt
   1b17e:	40d0      	lsrlt	r0, r2
   1b180:	4318      	orrlt	r0, r3
   1b182:	4770      	bx	lr
   1b184:	f092 0f00 	teq	r2, #0	; 0x0
   1b188:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   1b18c:	bf06      	itte	eq
   1b18e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1b192:	3201      	addeq	r2, #1
   1b194:	3b01      	subne	r3, #1
   1b196:	e7b5      	b.n	1b104 <__addsf3+0x58>
   1b198:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b19c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b1a0:	bf18      	it	ne
   1b1a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b1a6:	d021      	beq.n	1b1ec <__addsf3+0x140>
   1b1a8:	ea92 0f03 	teq	r2, r3
   1b1ac:	d004      	beq.n	1b1b8 <__addsf3+0x10c>
   1b1ae:	f092 0f00 	teq	r2, #0	; 0x0
   1b1b2:	bf08      	it	eq
   1b1b4:	4608      	moveq	r0, r1
   1b1b6:	4770      	bx	lr
   1b1b8:	ea90 0f01 	teq	r0, r1
   1b1bc:	bf1c      	itt	ne
   1b1be:	2000      	movne	r0, #0
   1b1c0:	4770      	bxne	lr
   1b1c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   1b1c6:	d104      	bne.n	1b1d2 <__addsf3+0x126>
   1b1c8:	0040      	lsls	r0, r0, #1
   1b1ca:	bf28      	it	cs
   1b1cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   1b1d0:	4770      	bx	lr
   1b1d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   1b1d6:	bf3c      	itt	cc
   1b1d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   1b1dc:	4770      	bxcc	lr
   1b1de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   1b1e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   1b1e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b1ea:	4770      	bx	lr
   1b1ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
   1b1f0:	bf16      	itet	ne
   1b1f2:	4608      	movne	r0, r1
   1b1f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   1b1f8:	4601      	movne	r1, r0
   1b1fa:	0242      	lsls	r2, r0, #9
   1b1fc:	bf06      	itte	eq
   1b1fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   1b202:	ea90 0f01 	teqeq	r0, r1
   1b206:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   1b20a:	4770      	bx	lr

0001b20c <__aeabi_ui2f>:
   1b20c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b210:	e004      	b.n	1b21c <__aeabi_i2f+0x8>
   1b212:	46c0      	nop			(mov r8, r8)

0001b214 <__aeabi_i2f>:
   1b214:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   1b218:	bf48      	it	mi
   1b21a:	4240      	negmi	r0, r0
   1b21c:	ea5f 0c00 	movs.w	ip, r0
   1b220:	bf08      	it	eq
   1b222:	4770      	bxeq	lr
   1b224:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   1b228:	4601      	mov	r1, r0
   1b22a:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b22e:	e01c      	b.n	1b26a <__aeabi_l2f+0x2a>

0001b230 <__aeabi_ul2f>:
   1b230:	ea50 0201 	orrs.w	r2, r0, r1
   1b234:	bf08      	it	eq
   1b236:	4770      	bxeq	lr
   1b238:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b23c:	e00a      	b.n	1b254 <__aeabi_l2f+0x14>
   1b23e:	46c0      	nop			(mov r8, r8)

0001b240 <__aeabi_l2f>:
   1b240:	ea50 0201 	orrs.w	r2, r0, r1
   1b244:	bf08      	it	eq
   1b246:	4770      	bxeq	lr
   1b248:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   1b24c:	d502      	bpl.n	1b254 <__aeabi_l2f+0x14>
   1b24e:	4240      	negs	r0, r0
   1b250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b254:	ea5f 0c01 	movs.w	ip, r1
   1b258:	bf02      	ittt	eq
   1b25a:	4684      	moveq	ip, r0
   1b25c:	4601      	moveq	r1, r0
   1b25e:	2000      	moveq	r0, #0
   1b260:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   1b264:	bf08      	it	eq
   1b266:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   1b26a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1b26e:	fabc f28c 	clz	r2, ip
   1b272:	3a08      	subs	r2, #8
   1b274:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   1b278:	db10      	blt.n	1b29c <__aeabi_l2f+0x5c>
   1b27a:	fa01 fc02 	lsl.w	ip, r1, r2
   1b27e:	4463      	add	r3, ip
   1b280:	fa00 fc02 	lsl.w	ip, r0, r2
   1b284:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1b288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b28c:	fa20 f202 	lsr.w	r2, r0, r2
   1b290:	eb43 0002 	adc.w	r0, r3, r2
   1b294:	bf08      	it	eq
   1b296:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1b29a:	4770      	bx	lr
   1b29c:	f102 0220 	add.w	r2, r2, #32	; 0x20
   1b2a0:	fa01 fc02 	lsl.w	ip, r1, r2
   1b2a4:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1b2a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   1b2ac:	fa21 f202 	lsr.w	r2, r1, r2
   1b2b0:	eb43 0002 	adc.w	r0, r3, r2
   1b2b4:	bf08      	it	eq
   1b2b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1b2ba:	4770      	bx	lr

0001b2bc <__aeabi_fmul>:
   1b2bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b2c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1b2c4:	bf1e      	ittt	ne
   1b2c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1b2ca:	ea92 0f0c 	teqne	r2, ip
   1b2ce:	ea93 0f0c 	teqne	r3, ip
   1b2d2:	d06f      	beq.n	1b3b4 <__aeabi_fmul+0xf8>
   1b2d4:	441a      	add	r2, r3
   1b2d6:	ea80 0c01 	eor.w	ip, r0, r1
   1b2da:	0240      	lsls	r0, r0, #9
   1b2dc:	bf18      	it	ne
   1b2de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   1b2e2:	d01e      	beq.n	1b322 <__aeabi_fmul+0x66>
   1b2e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1b2e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   1b2ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   1b2f0:	fba0 3101 	umull	r3, r1, r0, r1
   1b2f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1b2f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   1b2fc:	bf3e      	ittt	cc
   1b2fe:	0049      	lslcc	r1, r1, #1
   1b300:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   1b304:	005b      	lslcc	r3, r3, #1
   1b306:	ea40 0001 	orr.w	r0, r0, r1
   1b30a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   1b30e:	2afd      	cmp	r2, #253
   1b310:	d81d      	bhi.n	1b34e <__aeabi_fmul+0x92>
   1b312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1b316:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b31a:	bf08      	it	eq
   1b31c:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1b320:	4770      	bx	lr
   1b322:	f090 0f00 	teq	r0, #0	; 0x0
   1b326:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1b32a:	bf08      	it	eq
   1b32c:	0249      	lsleq	r1, r1, #9
   1b32e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1b332:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   1b336:	3a7f      	subs	r2, #127
   1b338:	bfc2      	ittt	gt
   1b33a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1b33e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1b342:	4770      	bxgt	lr
   1b344:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b348:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b34c:	3a01      	subs	r2, #1
   1b34e:	dc5d      	bgt.n	1b40c <__aeabi_fmul+0x150>
   1b350:	f112 0f19 	cmn.w	r2, #25	; 0x19
   1b354:	bfdc      	itt	le
   1b356:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   1b35a:	4770      	bxle	lr
   1b35c:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1b360:	0041      	lsls	r1, r0, #1
   1b362:	fa21 f102 	lsr.w	r1, r1, r2
   1b366:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   1b36a:	fa00 fc02 	lsl.w	ip, r0, r2
   1b36e:	ea5f 0031 	movs.w	r0, r1, rrx
   1b372:	f140 0000 	adc.w	r0, r0, #0	; 0x0
   1b376:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   1b37a:	bf08      	it	eq
   1b37c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   1b380:	4770      	bx	lr
   1b382:	f092 0f00 	teq	r2, #0	; 0x0
   1b386:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1b38a:	bf02      	ittt	eq
   1b38c:	0040      	lsleq	r0, r0, #1
   1b38e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1b392:	3a01      	subeq	r2, #1
   1b394:	d0f9      	beq.n	1b38a <__aeabi_fmul+0xce>
   1b396:	ea40 000c 	orr.w	r0, r0, ip
   1b39a:	f093 0f00 	teq	r3, #0	; 0x0
   1b39e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1b3a2:	bf02      	ittt	eq
   1b3a4:	0049      	lsleq	r1, r1, #1
   1b3a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1b3aa:	3b01      	subeq	r3, #1
   1b3ac:	d0f9      	beq.n	1b3a2 <__aeabi_fmul+0xe6>
   1b3ae:	ea41 010c 	orr.w	r1, r1, ip
   1b3b2:	e78f      	b.n	1b2d4 <__aeabi_fmul+0x18>
   1b3b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1b3b8:	ea92 0f0c 	teq	r2, ip
   1b3bc:	bf18      	it	ne
   1b3be:	ea93 0f0c 	teqne	r3, ip
   1b3c2:	d00a      	beq.n	1b3da <__aeabi_fmul+0x11e>
   1b3c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1b3c8:	bf18      	it	ne
   1b3ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1b3ce:	d1d8      	bne.n	1b382 <__aeabi_fmul+0xc6>
   1b3d0:	ea80 0001 	eor.w	r0, r0, r1
   1b3d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1b3d8:	4770      	bx	lr
   1b3da:	f090 0f00 	teq	r0, #0	; 0x0
   1b3de:	bf17      	itett	ne
   1b3e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   1b3e4:	4608      	moveq	r0, r1
   1b3e6:	f091 0f00 	teqne	r1, #0	; 0x0
   1b3ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   1b3ee:	d014      	beq.n	1b41a <__aeabi_fmul+0x15e>
   1b3f0:	ea92 0f0c 	teq	r2, ip
   1b3f4:	d101      	bne.n	1b3fa <__aeabi_fmul+0x13e>
   1b3f6:	0242      	lsls	r2, r0, #9
   1b3f8:	d10f      	bne.n	1b41a <__aeabi_fmul+0x15e>
   1b3fa:	ea93 0f0c 	teq	r3, ip
   1b3fe:	d103      	bne.n	1b408 <__aeabi_fmul+0x14c>
   1b400:	024b      	lsls	r3, r1, #9
   1b402:	bf18      	it	ne
   1b404:	4608      	movne	r0, r1
   1b406:	d108      	bne.n	1b41a <__aeabi_fmul+0x15e>
   1b408:	ea80 0001 	eor.w	r0, r0, r1
   1b40c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   1b410:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1b414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b418:	4770      	bx	lr
   1b41a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1b41e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   1b422:	4770      	bx	lr

0001b424 <__aeabi_fdiv>:
   1b424:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1b428:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1b42c:	bf1e      	ittt	ne
   1b42e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   1b432:	ea92 0f0c 	teqne	r2, ip
   1b436:	ea93 0f0c 	teqne	r3, ip
   1b43a:	d069      	beq.n	1b510 <__aeabi_fdiv+0xec>
   1b43c:	eba2 0203 	sub.w	r2, r2, r3
   1b440:	ea80 0c01 	eor.w	ip, r0, r1
   1b444:	0249      	lsls	r1, r1, #9
   1b446:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1b44a:	d037      	beq.n	1b4bc <__aeabi_fdiv+0x98>
   1b44c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b450:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   1b454:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   1b458:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1b45c:	428b      	cmp	r3, r1
   1b45e:	bf38      	it	cc
   1b460:	005b      	lslcc	r3, r3, #1
   1b462:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   1b466:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1b46a:	428b      	cmp	r3, r1
   1b46c:	bf24      	itt	cs
   1b46e:	1a5b      	subcs	r3, r3, r1
   1b470:	ea40 000c 	orrcs.w	r0, r0, ip
   1b474:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   1b478:	bf24      	itt	cs
   1b47a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1b47e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1b482:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   1b486:	bf24      	itt	cs
   1b488:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1b48c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1b490:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1b494:	bf24      	itt	cs
   1b496:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1b49a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1b49e:	011b      	lsls	r3, r3, #4
   1b4a0:	bf18      	it	ne
   1b4a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   1b4a6:	d1e0      	bne.n	1b46a <__aeabi_fdiv+0x46>
   1b4a8:	2afd      	cmp	r2, #253
   1b4aa:	f63f af50 	bhi.w	1b34e <__aeabi_fmul+0x92>
   1b4ae:	428b      	cmp	r3, r1
   1b4b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1b4b4:	bf08      	it	eq
   1b4b6:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   1b4ba:	4770      	bx	lr
   1b4bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   1b4c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   1b4c4:	327f      	adds	r2, #127
   1b4c6:	bfc2      	ittt	gt
   1b4c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   1b4cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   1b4d0:	4770      	bxgt	lr
   1b4d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1b4d6:	f04f 0300 	mov.w	r3, #0	; 0x0
   1b4da:	3a01      	subs	r2, #1
   1b4dc:	e737      	b.n	1b34e <__aeabi_fmul+0x92>
   1b4de:	f092 0f00 	teq	r2, #0	; 0x0
   1b4e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   1b4e6:	bf02      	ittt	eq
   1b4e8:	0040      	lsleq	r0, r0, #1
   1b4ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   1b4ee:	3a01      	subeq	r2, #1
   1b4f0:	d0f9      	beq.n	1b4e6 <__aeabi_fdiv+0xc2>
   1b4f2:	ea40 000c 	orr.w	r0, r0, ip
   1b4f6:	f093 0f00 	teq	r3, #0	; 0x0
   1b4fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1b4fe:	bf02      	ittt	eq
   1b500:	0049      	lsleq	r1, r1, #1
   1b502:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   1b506:	3b01      	subeq	r3, #1
   1b508:	d0f9      	beq.n	1b4fe <__aeabi_fdiv+0xda>
   1b50a:	ea41 010c 	orr.w	r1, r1, ip
   1b50e:	e795      	b.n	1b43c <__aeabi_fdiv+0x18>
   1b510:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   1b514:	ea92 0f0c 	teq	r2, ip
   1b518:	d108      	bne.n	1b52c <__aeabi_fdiv+0x108>
   1b51a:	0242      	lsls	r2, r0, #9
   1b51c:	f47f af7d 	bne.w	1b41a <__aeabi_fmul+0x15e>
   1b520:	ea93 0f0c 	teq	r3, ip
   1b524:	f47f af70 	bne.w	1b408 <__aeabi_fmul+0x14c>
   1b528:	4608      	mov	r0, r1
   1b52a:	e776      	b.n	1b41a <__aeabi_fmul+0x15e>
   1b52c:	ea93 0f0c 	teq	r3, ip
   1b530:	d104      	bne.n	1b53c <__aeabi_fdiv+0x118>
   1b532:	024b      	lsls	r3, r1, #9
   1b534:	f43f af4c 	beq.w	1b3d0 <__aeabi_fmul+0x114>
   1b538:	4608      	mov	r0, r1
   1b53a:	e76e      	b.n	1b41a <__aeabi_fmul+0x15e>
   1b53c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   1b540:	bf18      	it	ne
   1b542:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   1b546:	d1ca      	bne.n	1b4de <__aeabi_fdiv+0xba>
   1b548:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1b54c:	f47f af5c 	bne.w	1b408 <__aeabi_fmul+0x14c>
   1b550:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   1b554:	f47f af3c 	bne.w	1b3d0 <__aeabi_fmul+0x114>
   1b558:	e75f      	b.n	1b41a <__aeabi_fmul+0x15e>
   1b55a:	46c0      	nop			(mov r8, r8)

0001b55c <__gesf2>:
   1b55c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b560:	e006      	b.n	1b570 <__cmpsf2+0x4>
   1b562:	46c0      	nop			(mov r8, r8)

0001b564 <__lesf2>:
   1b564:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1b568:	e002      	b.n	1b570 <__cmpsf2+0x4>
   1b56a:	46c0      	nop			(mov r8, r8)

0001b56c <__cmpsf2>:
   1b56c:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1b570:	f84d cc04 	str.w	ip, [sp, #-4]
   1b574:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1b578:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1b57c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b580:	bf18      	it	ne
   1b582:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   1b586:	d010      	beq.n	1b5aa <__cmpsf2+0x3e>
   1b588:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1b58c:	bf18      	it	ne
   1b58e:	ea90 0f01 	teqne	r0, r1
   1b592:	bf58      	it	pl
   1b594:	ebb2 0003 	subspl.w	r0, r2, r3
   1b598:	bf88      	it	hi
   1b59a:	17c8      	asrhi	r0, r1, #31
   1b59c:	bf38      	it	cc
   1b59e:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   1b5a2:	bf18      	it	ne
   1b5a4:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   1b5a8:	4770      	bx	lr
   1b5aa:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   1b5ae:	d102      	bne.n	1b5b6 <__cmpsf2+0x4a>
   1b5b0:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   1b5b4:	d105      	bne.n	1b5c2 <__cmpsf2+0x56>
   1b5b6:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   1b5ba:	d1e5      	bne.n	1b588 <__cmpsf2+0x1c>
   1b5bc:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   1b5c0:	d0e2      	beq.n	1b588 <__cmpsf2+0x1c>
   1b5c2:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   1b5c6:	4770      	bx	lr

0001b5c8 <__aeabi_cfrcmple>:
   1b5c8:	4684      	mov	ip, r0
   1b5ca:	4608      	mov	r0, r1
   1b5cc:	4661      	mov	r1, ip
   1b5ce:	e7ff      	b.n	1b5d0 <__aeabi_cfcmpeq>

0001b5d0 <__aeabi_cfcmpeq>:
   1b5d0:	b50f      	push	{r0, r1, r2, r3, lr}
   1b5d2:	f7ff ffcb 	bl	1b56c <__cmpsf2>
   1b5d6:	2800      	cmp	r0, #0
   1b5d8:	bf48      	it	mi
   1b5da:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1b5de:	bd0f      	pop	{r0, r1, r2, r3, pc}

0001b5e0 <__aeabi_fcmpeq>:
   1b5e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b5e4:	f7ff fff4 	bl	1b5d0 <__aeabi_cfcmpeq>
   1b5e8:	bf0c      	ite	eq
   1b5ea:	2001      	moveq	r0, #1
   1b5ec:	2000      	movne	r0, #0
   1b5ee:	f85d fb08 	ldr.w	pc, [sp], #8
   1b5f2:	46c0      	nop			(mov r8, r8)

0001b5f4 <__aeabi_fcmplt>:
   1b5f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b5f8:	f7ff ffea 	bl	1b5d0 <__aeabi_cfcmpeq>
   1b5fc:	bf34      	ite	cc
   1b5fe:	2001      	movcc	r0, #1
   1b600:	2000      	movcs	r0, #0
   1b602:	f85d fb08 	ldr.w	pc, [sp], #8
   1b606:	46c0      	nop			(mov r8, r8)

0001b608 <__aeabi_fcmple>:
   1b608:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b60c:	f7ff ffe0 	bl	1b5d0 <__aeabi_cfcmpeq>
   1b610:	bf94      	ite	ls
   1b612:	2001      	movls	r0, #1
   1b614:	2000      	movhi	r0, #0
   1b616:	f85d fb08 	ldr.w	pc, [sp], #8
   1b61a:	46c0      	nop			(mov r8, r8)

0001b61c <__aeabi_fcmpge>:
   1b61c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b620:	f7ff ffd2 	bl	1b5c8 <__aeabi_cfrcmple>
   1b624:	bf94      	ite	ls
   1b626:	2001      	movls	r0, #1
   1b628:	2000      	movhi	r0, #0
   1b62a:	f85d fb08 	ldr.w	pc, [sp], #8
   1b62e:	46c0      	nop			(mov r8, r8)

0001b630 <__aeabi_fcmpgt>:
   1b630:	f84d ed08 	str.w	lr, [sp, #-8]!
   1b634:	f7ff ffc8 	bl	1b5c8 <__aeabi_cfrcmple>
   1b638:	bf34      	ite	cc
   1b63a:	2001      	movcc	r0, #1
   1b63c:	2000      	movcs	r0, #0
   1b63e:	f85d fb08 	ldr.w	pc, [sp], #8
   1b642:	46c0      	nop			(mov r8, r8)

0001b644 <__aeabi_f2iz>:
   1b644:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1b648:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1b64c:	d30f      	bcc.n	1b66e <__aeabi_f2iz+0x2a>
   1b64e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1b652:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1b656:	d90d      	bls.n	1b674 <__aeabi_f2iz+0x30>
   1b658:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1b65c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b660:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   1b664:	fa23 f002 	lsr.w	r0, r3, r2
   1b668:	bf18      	it	ne
   1b66a:	4240      	negne	r0, r0
   1b66c:	4770      	bx	lr
   1b66e:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b672:	4770      	bx	lr
   1b674:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1b678:	d101      	bne.n	1b67e <__aeabi_f2iz+0x3a>
   1b67a:	0242      	lsls	r2, r0, #9
   1b67c:	d105      	bne.n	1b68a <__aeabi_f2iz+0x46>
   1b67e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   1b682:	bf08      	it	eq
   1b684:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1b688:	4770      	bx	lr
   1b68a:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b68e:	4770      	bx	lr

0001b690 <__aeabi_f2uiz>:
   1b690:	0042      	lsls	r2, r0, #1
   1b692:	d20e      	bcs.n	1b6b2 <__aeabi_f2uiz+0x22>
   1b694:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1b698:	d30b      	bcc.n	1b6b2 <__aeabi_f2uiz+0x22>
   1b69a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   1b69e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1b6a2:	d409      	bmi.n	1b6b8 <__aeabi_f2uiz+0x28>
   1b6a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1b6a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1b6ac:	fa23 f002 	lsr.w	r0, r3, r2
   1b6b0:	4770      	bx	lr
   1b6b2:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b6b6:	4770      	bx	lr
   1b6b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1b6bc:	d101      	bne.n	1b6c2 <__aeabi_f2uiz+0x32>
   1b6be:	0242      	lsls	r2, r0, #9
   1b6c0:	d102      	bne.n	1b6c8 <__aeabi_f2uiz+0x38>
   1b6c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b6c6:	4770      	bx	lr
   1b6c8:	f04f 0000 	mov.w	r0, #0	; 0x0
   1b6cc:	4770      	bx	lr
   1b6ce:	46c0      	nop			(mov r8, r8)

0001b6d0 <_Unwind_decode_target2>:
   1b6d0:	4603      	mov	r3, r0
   1b6d2:	6800      	ldr	r0, [r0, #0]
   1b6d4:	b100      	cbz	r0, 1b6d8 <_Unwind_decode_target2+0x8>
   1b6d6:	18c0      	adds	r0, r0, r3
   1b6d8:	4770      	bx	lr
   1b6da:	46c0      	nop			(mov r8, r8)

0001b6dc <_Unwind_VRS_Get>:
   1b6dc:	b410      	push	{r4}
   1b6de:	469c      	mov	ip, r3
   1b6e0:	4604      	mov	r4, r0
   1b6e2:	b969      	cbnz	r1, 1b700 <_Unwind_VRS_Get+0x24>
   1b6e4:	2a0f      	cmp	r2, #15
   1b6e6:	bf94      	ite	ls
   1b6e8:	2300      	movls	r3, #0
   1b6ea:	2301      	movhi	r3, #1
   1b6ec:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1b6f0:	bf0c      	ite	eq
   1b6f2:	4618      	moveq	r0, r3
   1b6f4:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1b6f8:	b130      	cbz	r0, 1b708 <_Unwind_VRS_Get+0x2c>
   1b6fa:	2002      	movs	r0, #2
   1b6fc:	bc10      	pop	{r4}
   1b6fe:	4770      	bx	lr
   1b700:	2904      	cmp	r1, #4
   1b702:	d8fa      	bhi.n	1b6fa <_Unwind_VRS_Get+0x1e>
   1b704:	2001      	movs	r0, #1
   1b706:	e7f9      	b.n	1b6fc <_Unwind_VRS_Get+0x20>
   1b708:	0093      	lsls	r3, r2, #2
   1b70a:	4423      	add	r3, r4
   1b70c:	685a      	ldr	r2, [r3, #4]
   1b70e:	9b01      	ldr	r3, [sp, #4]
   1b710:	601a      	str	r2, [r3, #0]
   1b712:	e7f3      	b.n	1b6fc <_Unwind_VRS_Get+0x20>

0001b714 <_Unwind_GetGR>:
   1b714:	b500      	push	{lr}
   1b716:	b085      	sub	sp, #20
   1b718:	460a      	mov	r2, r1
   1b71a:	ab03      	add	r3, sp, #12
   1b71c:	2100      	movs	r1, #0
   1b71e:	9300      	str	r3, [sp, #0]
   1b720:	460b      	mov	r3, r1
   1b722:	f7ff ffdb 	bl	1b6dc <_Unwind_VRS_Get>
   1b726:	9803      	ldr	r0, [sp, #12]
   1b728:	b005      	add	sp, #20
   1b72a:	bd00      	pop	{pc}

0001b72c <_Unwind_VRS_Set>:
   1b72c:	b410      	push	{r4}
   1b72e:	469c      	mov	ip, r3
   1b730:	4604      	mov	r4, r0
   1b732:	b969      	cbnz	r1, 1b750 <_Unwind_VRS_Set+0x24>
   1b734:	2a0f      	cmp	r2, #15
   1b736:	bf94      	ite	ls
   1b738:	2300      	movls	r3, #0
   1b73a:	2301      	movhi	r3, #1
   1b73c:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1b740:	bf0c      	ite	eq
   1b742:	4618      	moveq	r0, r3
   1b744:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1b748:	b130      	cbz	r0, 1b758 <_Unwind_VRS_Set+0x2c>
   1b74a:	2002      	movs	r0, #2
   1b74c:	bc10      	pop	{r4}
   1b74e:	4770      	bx	lr
   1b750:	2904      	cmp	r1, #4
   1b752:	d8fa      	bhi.n	1b74a <_Unwind_VRS_Set+0x1e>
   1b754:	2001      	movs	r0, #1
   1b756:	e7f9      	b.n	1b74c <_Unwind_VRS_Set+0x20>
   1b758:	9901      	ldr	r1, [sp, #4]
   1b75a:	0093      	lsls	r3, r2, #2
   1b75c:	680a      	ldr	r2, [r1, #0]
   1b75e:	4423      	add	r3, r4
   1b760:	605a      	str	r2, [r3, #4]
   1b762:	e7f3      	b.n	1b74c <_Unwind_VRS_Set+0x20>

0001b764 <_Unwind_SetGR>:
   1b764:	b500      	push	{lr}
   1b766:	b085      	sub	sp, #20
   1b768:	ab04      	add	r3, sp, #16
   1b76a:	468c      	mov	ip, r1
   1b76c:	f843 2d04 	str.w	r2, [r3, #-4]!
   1b770:	2100      	movs	r1, #0
   1b772:	9300      	str	r3, [sp, #0]
   1b774:	4662      	mov	r2, ip
   1b776:	460b      	mov	r3, r1
   1b778:	f7ff ffd8 	bl	1b72c <_Unwind_VRS_Set>
   1b77c:	b005      	add	sp, #20
   1b77e:	bd00      	pop	{pc}

0001b780 <selfrel_offset31>:
   1b780:	6803      	ldr	r3, [r0, #0]
   1b782:	4602      	mov	r2, r0
   1b784:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1b788:	bf14      	ite	ne
   1b78a:	f043 4000 	orrne.w	r0, r3, #2147483648	; 0x80000000
   1b78e:	f023 4000 	biceq.w	r0, r3, #2147483648	; 0x80000000
   1b792:	4410      	add	r0, r2
   1b794:	4770      	bx	lr
   1b796:	46c0      	nop			(mov r8, r8)

0001b798 <search_EIT_table>:
   1b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b79c:	4682      	mov	sl, r0
   1b79e:	b081      	sub	sp, #4
   1b7a0:	4690      	mov	r8, r2
   1b7a2:	2900      	cmp	r1, #0
   1b7a4:	d024      	beq.n	1b7f0 <search_EIT_table+0x58>
   1b7a6:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
   1b7aa:	46d9      	mov	r9, fp
   1b7ac:	2700      	movs	r7, #0
   1b7ae:	e000      	b.n	1b7b2 <search_EIT_table+0x1a>
   1b7b0:	1c67      	adds	r7, r4, #1
   1b7b2:	eb09 0307 	add.w	r3, r9, r7
   1b7b6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1b7ba:	105c      	asrs	r4, r3, #1
   1b7bc:	00e2      	lsls	r2, r4, #3
   1b7be:	eb0a 0502 	add.w	r5, sl, r2
   1b7c2:	4628      	mov	r0, r5
   1b7c4:	f7ff ffdc 	bl	1b780 <selfrel_offset31>
   1b7c8:	45a3      	cmp	fp, r4
   1b7ca:	4606      	mov	r6, r0
   1b7cc:	bf08      	it	eq
   1b7ce:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   1b7d2:	d005      	beq.n	1b7e0 <search_EIT_table+0x48>
   1b7d4:	1c60      	adds	r0, r4, #1
   1b7d6:	00c0      	lsls	r0, r0, #3
   1b7d8:	4450      	add	r0, sl
   1b7da:	f7ff ffd1 	bl	1b780 <selfrel_offset31>
   1b7de:	3801      	subs	r0, #1
   1b7e0:	4546      	cmp	r6, r8
   1b7e2:	d807      	bhi.n	1b7f4 <search_EIT_table+0x5c>
   1b7e4:	4540      	cmp	r0, r8
   1b7e6:	d3e3      	bcc.n	1b7b0 <search_EIT_table+0x18>
   1b7e8:	4628      	mov	r0, r5
   1b7ea:	b001      	add	sp, #4
   1b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7f0:	2500      	movs	r5, #0
   1b7f2:	e7f9      	b.n	1b7e8 <search_EIT_table+0x50>
   1b7f4:	42bc      	cmp	r4, r7
   1b7f6:	d0fb      	beq.n	1b7f0 <search_EIT_table+0x58>
   1b7f8:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   1b7fc:	e7d9      	b.n	1b7b2 <search_EIT_table+0x1a>
   1b7fe:	46c0      	nop			(mov r8, r8)

0001b800 <_Unwind_GetCFA>:
   1b800:	6c40      	ldr	r0, [r0, #68]
   1b802:	4770      	bx	lr

0001b804 <_Unwind_Complete>:
   1b804:	4770      	bx	lr
   1b806:	46c0      	nop			(mov r8, r8)

0001b808 <_Unwind_DeleteException>:
   1b808:	b500      	push	{lr}
   1b80a:	6883      	ldr	r3, [r0, #8]
   1b80c:	b081      	sub	sp, #4
   1b80e:	4601      	mov	r1, r0
   1b810:	b10b      	cbz	r3, 1b816 <_Unwind_DeleteException+0xe>
   1b812:	2001      	movs	r0, #1
   1b814:	4798      	blx	r3
   1b816:	b001      	add	sp, #4
   1b818:	bd00      	pop	{pc}
   1b81a:	46c0      	nop			(mov r8, r8)

0001b81c <__gnu_unwind_pr_common>:
   1b81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b820:	4688      	mov	r8, r1
   1b822:	b089      	sub	sp, #36
   1b824:	f000 0108 	and.w	r1, r0, #8	; 0x8
   1b828:	f000 0003 	and.w	r0, r0, #3	; 0x3
   1b82c:	9003      	str	r0, [sp, #12]
   1b82e:	f8d8 004c 	ldr.w	r0, [r8, #76]
   1b832:	4691      	mov	r9, r2
   1b834:	f850 2b04 	ldr.w	r2, [r0], #4
   1b838:	469b      	mov	fp, r3
   1b83a:	9102      	str	r1, [sp, #8]
   1b83c:	9005      	str	r0, [sp, #20]
   1b83e:	2b00      	cmp	r3, #0
   1b840:	f040 80c1 	bne.w	1b9c6 <__gnu_unwind_pr_common+0x1aa>
   1b844:	0213      	lsls	r3, r2, #8
   1b846:	9304      	str	r3, [sp, #16]
   1b848:	2303      	movs	r3, #3
   1b84a:	f88d b019 	strb.w	fp, [sp, #25]
   1b84e:	f88d 3018 	strb.w	r3, [sp, #24]
   1b852:	9a03      	ldr	r2, [sp, #12]
   1b854:	f8d8 3050 	ldr.w	r3, [r8, #80]
   1b858:	2a02      	cmp	r2, #2
   1b85a:	bf08      	it	eq
   1b85c:	f8d8 0038 	ldreq.w	r0, [r8, #56]
   1b860:	f013 0301 	ands.w	r3, r3, #1	; 0x1
   1b864:	bf02      	ittt	eq
   1b866:	f108 0158 	addeq.w	r1, r8, #88	; 0x58
   1b86a:	9301      	streq	r3, [sp, #4]
   1b86c:	9100      	streq	r1, [sp, #0]
   1b86e:	f040 80b6 	bne.w	1b9de <__gnu_unwind_pr_common+0x1c2>
   1b872:	6803      	ldr	r3, [r0, #0]
   1b874:	2b00      	cmp	r3, #0
   1b876:	d02e      	beq.n	1b8d6 <__gnu_unwind_pr_common+0xba>
   1b878:	f1bb 0f02 	cmp.w	fp, #2	; 0x2
   1b87c:	bf0a      	itet	eq
   1b87e:	6844      	ldreq	r4, [r0, #4]
   1b880:	8844      	ldrhne	r4, [r0, #2]
   1b882:	461e      	moveq	r6, r3
   1b884:	f8d8 3048 	ldr.w	r3, [r8, #72]
   1b888:	bf0c      	ite	eq
   1b88a:	f100 0708 	addeq.w	r7, r0, #8	; 0x8
   1b88e:	8806      	ldrhne	r6, [r0, #0]
   1b890:	f024 0201 	bic.w	r2, r4, #1	; 0x1
   1b894:	bf18      	it	ne
   1b896:	1d07      	addne	r7, r0, #4
   1b898:	210f      	movs	r1, #15
   1b89a:	4648      	mov	r0, r9
   1b89c:	eb02 0503 	add.w	r5, r2, r3
   1b8a0:	f7ff ff38 	bl	1b714 <_Unwind_GetGR>
   1b8a4:	4285      	cmp	r5, r0
   1b8a6:	d922      	bls.n	1b8ee <__gnu_unwind_pr_common+0xd2>
   1b8a8:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1b8ac:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1b8b0:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1b8b4:	2000      	movs	r0, #0
   1b8b6:	2a01      	cmp	r2, #1
   1b8b8:	d028      	beq.n	1b90c <__gnu_unwind_pr_common+0xf0>
   1b8ba:	d248      	bcs.n	1b94e <__gnu_unwind_pr_common+0x132>
   1b8bc:	9a03      	ldr	r2, [sp, #12]
   1b8be:	2a00      	cmp	r2, #0
   1b8c0:	bf0c      	ite	eq
   1b8c2:	2300      	moveq	r3, #0
   1b8c4:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1b8c8:	2b00      	cmp	r3, #0
   1b8ca:	f040 80ec 	bne.w	1baa6 <__gnu_unwind_pr_common+0x28a>
   1b8ce:	1d38      	adds	r0, r7, #4
   1b8d0:	6803      	ldr	r3, [r0, #0]
   1b8d2:	2b00      	cmp	r3, #0
   1b8d4:	d1d0      	bne.n	1b878 <__gnu_unwind_pr_common+0x5c>
   1b8d6:	4648      	mov	r0, r9
   1b8d8:	a904      	add	r1, sp, #16
   1b8da:	f000 fd67 	bl	1c3ac <__gnu_unwind_execute>
   1b8de:	2800      	cmp	r0, #0
   1b8e0:	d137      	bne.n	1b952 <__gnu_unwind_pr_common+0x136>
   1b8e2:	9b01      	ldr	r3, [sp, #4]
   1b8e4:	2b00      	cmp	r3, #0
   1b8e6:	f040 80ce 	bne.w	1ba86 <__gnu_unwind_pr_common+0x26a>
   1b8ea:	3008      	adds	r0, #8
   1b8ec:	e032      	b.n	1b954 <__gnu_unwind_pr_common+0x138>
   1b8ee:	f026 0301 	bic.w	r3, r6, #1	; 0x1
   1b8f2:	442b      	add	r3, r5
   1b8f4:	4298      	cmp	r0, r3
   1b8f6:	bf2c      	ite	cs
   1b8f8:	2000      	movcs	r0, #0
   1b8fa:	2001      	movcc	r0, #1
   1b8fc:	f004 0201 	and.w	r2, r4, #1	; 0x1
   1b900:	f006 0301 	and.w	r3, r6, #1	; 0x1
   1b904:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   1b908:	2a01      	cmp	r2, #1
   1b90a:	d1d6      	bne.n	1b8ba <__gnu_unwind_pr_common+0x9e>
   1b90c:	9b03      	ldr	r3, [sp, #12]
   1b90e:	2b00      	cmp	r3, #0
   1b910:	d16f      	bne.n	1b9f2 <__gnu_unwind_pr_common+0x1d6>
   1b912:	b1c8      	cbz	r0, 1b948 <__gnu_unwind_pr_common+0x12c>
   1b914:	687b      	ldr	r3, [r7, #4]
   1b916:	4638      	mov	r0, r7
   1b918:	f113 0f02 	cmn.w	r3, #2	; 0x2
   1b91c:	f850 4b04 	ldr.w	r4, [r0], #4
   1b920:	d017      	beq.n	1b952 <__gnu_unwind_pr_common+0x136>
   1b922:	9900      	ldr	r1, [sp, #0]
   1b924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b928:	9107      	str	r1, [sp, #28]
   1b92a:	f000 809b 	beq.w	1ba64 <__gnu_unwind_pr_common+0x248>
   1b92e:	f7ff fecf 	bl	1b6d0 <_Unwind_decode_target2>
   1b932:	0fe2      	lsrs	r2, r4, #31
   1b934:	4601      	mov	r1, r0
   1b936:	ab07      	add	r3, sp, #28
   1b938:	4640      	mov	r0, r8
   1b93a:	f001 fe37 	bl	1d5ac <__cxa_type_match>
   1b93e:	2800      	cmp	r0, #0
   1b940:	f040 8090 	bne.w	1ba64 <__gnu_unwind_pr_common+0x248>
   1b944:	9a03      	ldr	r2, [sp, #12]
   1b946:	9207      	str	r2, [sp, #28]
   1b948:	f107 0008 	add.w	r0, r7, #8	; 0x8
   1b94c:	e791      	b.n	1b872 <__gnu_unwind_pr_common+0x56>
   1b94e:	2a02      	cmp	r2, #2
   1b950:	d003      	beq.n	1b95a <__gnu_unwind_pr_common+0x13e>
   1b952:	2009      	movs	r0, #9
   1b954:	b009      	add	sp, #36
   1b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b95a:	683a      	ldr	r2, [r7, #0]
   1b95c:	9b03      	ldr	r3, [sp, #12]
   1b95e:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   1b962:	2b00      	cmp	r3, #0
   1b964:	d160      	bne.n	1ba28 <__gnu_unwind_pr_common+0x20c>
   1b966:	b328      	cbz	r0, 1b9b4 <__gnu_unwind_pr_common+0x198>
   1b968:	9902      	ldr	r1, [sp, #8]
   1b96a:	f1da 0301 	rsbs	r3, sl, #1	; 0x1
   1b96e:	bf38      	it	cc
   1b970:	2300      	movcc	r3, #0
   1b972:	2900      	cmp	r1, #0
   1b974:	bf08      	it	eq
   1b976:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1b97a:	b1db      	cbz	r3, 1b9b4 <__gnu_unwind_pr_common+0x198>
   1b97c:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1b980:	d074      	beq.n	1ba6c <__gnu_unwind_pr_common+0x250>
   1b982:	1d3d      	adds	r5, r7, #4
   1b984:	9e03      	ldr	r6, [sp, #12]
   1b986:	e003      	b.n	1b990 <__gnu_unwind_pr_common+0x174>
   1b988:	3504      	adds	r5, #4
   1b98a:	45a2      	cmp	sl, r4
   1b98c:	d90f      	bls.n	1b9ae <__gnu_unwind_pr_common+0x192>
   1b98e:	4626      	mov	r6, r4
   1b990:	9a00      	ldr	r2, [sp, #0]
   1b992:	4628      	mov	r0, r5
   1b994:	9207      	str	r2, [sp, #28]
   1b996:	f7ff fe9b 	bl	1b6d0 <_Unwind_decode_target2>
   1b99a:	2200      	movs	r2, #0
   1b99c:	4601      	mov	r1, r0
   1b99e:	ab07      	add	r3, sp, #28
   1b9a0:	4640      	mov	r0, r8
   1b9a2:	1c74      	adds	r4, r6, #1
   1b9a4:	f001 fe02 	bl	1d5ac <__cxa_type_match>
   1b9a8:	2800      	cmp	r0, #0
   1b9aa:	d0ed      	beq.n	1b988 <__gnu_unwind_pr_common+0x16c>
   1b9ac:	4634      	mov	r4, r6
   1b9ae:	4554      	cmp	r4, sl
   1b9b0:	d05c      	beq.n	1ba6c <__gnu_unwind_pr_common+0x250>
   1b9b2:	683a      	ldr	r2, [r7, #0]
   1b9b4:	2a00      	cmp	r2, #0
   1b9b6:	bfac      	ite	ge
   1b9b8:	4638      	movge	r0, r7
   1b9ba:	1d38      	addlt	r0, r7, #4
   1b9bc:	f10a 0301 	add.w	r3, sl, #1	; 0x1
   1b9c0:	009b      	lsls	r3, r3, #2
   1b9c2:	18c0      	adds	r0, r0, r3
   1b9c4:	e755      	b.n	1b872 <__gnu_unwind_pr_common+0x56>
   1b9c6:	0c13      	lsrs	r3, r2, #16
   1b9c8:	b2db      	uxtb	r3, r3
   1b9ca:	2102      	movs	r1, #2
   1b9cc:	f88d 3019 	strb.w	r3, [sp, #25]
   1b9d0:	408b      	lsls	r3, r1
   1b9d2:	0412      	lsls	r2, r2, #16
   1b9d4:	9204      	str	r2, [sp, #16]
   1b9d6:	f88d 1018 	strb.w	r1, [sp, #24]
   1b9da:	18c0      	adds	r0, r0, r3
   1b9dc:	e739      	b.n	1b852 <__gnu_unwind_pr_common+0x36>
   1b9de:	2300      	movs	r3, #0
   1b9e0:	4648      	mov	r0, r9
   1b9e2:	a904      	add	r1, sp, #16
   1b9e4:	9301      	str	r3, [sp, #4]
   1b9e6:	f000 fce1 	bl	1c3ac <__gnu_unwind_execute>
   1b9ea:	2800      	cmp	r0, #0
   1b9ec:	f43f af79 	beq.w	1b8e2 <__gnu_unwind_pr_common+0xc6>
   1b9f0:	e7af      	b.n	1b952 <__gnu_unwind_pr_common+0x136>
   1b9f2:	210d      	movs	r1, #13
   1b9f4:	4648      	mov	r0, r9
   1b9f6:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1b9fa:	f7ff fe8b 	bl	1b714 <_Unwind_GetGR>
   1b9fe:	4284      	cmp	r4, r0
   1ba00:	d1a2      	bne.n	1b948 <__gnu_unwind_pr_common+0x12c>
   1ba02:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1ba06:	429f      	cmp	r7, r3
   1ba08:	d19e      	bne.n	1b948 <__gnu_unwind_pr_common+0x12c>
   1ba0a:	4638      	mov	r0, r7
   1ba0c:	f7ff feb8 	bl	1b780 <selfrel_offset31>
   1ba10:	4602      	mov	r2, r0
   1ba12:	210f      	movs	r1, #15
   1ba14:	4648      	mov	r0, r9
   1ba16:	f7ff fea5 	bl	1b764 <_Unwind_SetGR>
   1ba1a:	4648      	mov	r0, r9
   1ba1c:	2100      	movs	r1, #0
   1ba1e:	4642      	mov	r2, r8
   1ba20:	f7ff fea0 	bl	1b764 <_Unwind_SetGR>
   1ba24:	2007      	movs	r0, #7
   1ba26:	e795      	b.n	1b954 <__gnu_unwind_pr_common+0x138>
   1ba28:	210d      	movs	r1, #13
   1ba2a:	4648      	mov	r0, r9
   1ba2c:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1ba30:	f7ff fe70 	bl	1b714 <_Unwind_GetGR>
   1ba34:	4284      	cmp	r4, r0
   1ba36:	d1bc      	bne.n	1b9b2 <__gnu_unwind_pr_common+0x196>
   1ba38:	f8d8 3028 	ldr.w	r3, [r8, #40]
   1ba3c:	429f      	cmp	r7, r3
   1ba3e:	d1b8      	bne.n	1b9b2 <__gnu_unwind_pr_common+0x196>
   1ba40:	2104      	movs	r1, #4
   1ba42:	2300      	movs	r3, #0
   1ba44:	eb07 0001 	add.w	r0, r7, r1
   1ba48:	f8c8 a028 	str.w	sl, [r8, #40]
   1ba4c:	f8c8 302c 	str.w	r3, [r8, #44]
   1ba50:	f8c8 1030 	str.w	r1, [r8, #48]
   1ba54:	f8c8 0034 	str.w	r0, [r8, #52]
   1ba58:	683b      	ldr	r3, [r7, #0]
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	da37      	bge.n	1bace <__gnu_unwind_pr_common+0x2b2>
   1ba5e:	2201      	movs	r2, #1
   1ba60:	9201      	str	r2, [sp, #4]
   1ba62:	e7ab      	b.n	1b9bc <__gnu_unwind_pr_common+0x1a0>
   1ba64:	9b07      	ldr	r3, [sp, #28]
   1ba66:	2b00      	cmp	r3, #0
   1ba68:	f43f af6e 	beq.w	1b948 <__gnu_unwind_pr_common+0x12c>
   1ba6c:	4648      	mov	r0, r9
   1ba6e:	210d      	movs	r1, #13
   1ba70:	f7ff fe50 	bl	1b714 <_Unwind_GetGR>
   1ba74:	9b07      	ldr	r3, [sp, #28]
   1ba76:	f8c8 0020 	str.w	r0, [r8, #32]
   1ba7a:	f8c8 3024 	str.w	r3, [r8, #36]
   1ba7e:	f8c8 7028 	str.w	r7, [r8, #40]
   1ba82:	2006      	movs	r0, #6
   1ba84:	e766      	b.n	1b954 <__gnu_unwind_pr_common+0x138>
   1ba86:	210f      	movs	r1, #15
   1ba88:	4648      	mov	r0, r9
   1ba8a:	f7ff fe43 	bl	1b714 <_Unwind_GetGR>
   1ba8e:	210e      	movs	r1, #14
   1ba90:	4602      	mov	r2, r0
   1ba92:	4648      	mov	r0, r9
   1ba94:	f7ff fe66 	bl	1b764 <_Unwind_SetGR>
   1ba98:	4648      	mov	r0, r9
   1ba9a:	210f      	movs	r1, #15
   1ba9c:	4a0f      	ldr	r2, [pc, #60]	(1badc <__gnu_unwind_pr_common+0x2c0>)
   1ba9e:	f7ff fe61 	bl	1b764 <_Unwind_SetGR>
   1baa2:	2007      	movs	r0, #7
   1baa4:	e756      	b.n	1b954 <__gnu_unwind_pr_common+0x138>
   1baa6:	4638      	mov	r0, r7
   1baa8:	f7ff fe6a 	bl	1b780 <selfrel_offset31>
   1baac:	1d3b      	adds	r3, r7, #4
   1baae:	4604      	mov	r4, r0
   1bab0:	f8c8 3038 	str.w	r3, [r8, #56]
   1bab4:	4640      	mov	r0, r8
   1bab6:	f001 fd43 	bl	1d540 <__cxa_begin_cleanup>
   1baba:	2800      	cmp	r0, #0
   1babc:	f43f af49 	beq.w	1b952 <__gnu_unwind_pr_common+0x136>
   1bac0:	4648      	mov	r0, r9
   1bac2:	210f      	movs	r1, #15
   1bac4:	4622      	mov	r2, r4
   1bac6:	f7ff fe4d 	bl	1b764 <_Unwind_SetGR>
   1baca:	2007      	movs	r0, #7
   1bacc:	e742      	b.n	1b954 <__gnu_unwind_pr_common+0x138>
   1bace:	f10a 0001 	add.w	r0, sl, #1	; 0x1
   1bad2:	0080      	lsls	r0, r0, #2
   1bad4:	4438      	add	r0, r7
   1bad6:	f7ff fe53 	bl	1b780 <selfrel_offset31>
   1bada:	e799      	b.n	1ba10 <__gnu_unwind_pr_common+0x1f4>
   1badc:	0001e1c9 	.word	0x0001e1c9

0001bae0 <__aeabi_unwind_cpp_pr2>:
   1bae0:	b500      	push	{lr}
   1bae2:	2302      	movs	r3, #2
   1bae4:	b081      	sub	sp, #4
   1bae6:	f7ff fe99 	bl	1b81c <__gnu_unwind_pr_common>
   1baea:	b001      	add	sp, #4
   1baec:	bd00      	pop	{pc}
   1baee:	46c0      	nop			(mov r8, r8)

0001baf0 <__aeabi_unwind_cpp_pr1>:
   1baf0:	b500      	push	{lr}
   1baf2:	2301      	movs	r3, #1
   1baf4:	b081      	sub	sp, #4
   1baf6:	f7ff fe91 	bl	1b81c <__gnu_unwind_pr_common>
   1bafa:	b001      	add	sp, #4
   1bafc:	bd00      	pop	{pc}
   1bafe:	46c0      	nop			(mov r8, r8)

0001bb00 <__aeabi_unwind_cpp_pr0>:
   1bb00:	b500      	push	{lr}
   1bb02:	2300      	movs	r3, #0
   1bb04:	b081      	sub	sp, #4
   1bb06:	f7ff fe89 	bl	1b81c <__gnu_unwind_pr_common>
   1bb0a:	b001      	add	sp, #4
   1bb0c:	bd00      	pop	{pc}
   1bb0e:	46c0      	nop			(mov r8, r8)

0001bb10 <get_eit_entry>:
   1bb10:	b530      	push	{r4, r5, lr}
   1bb12:	4b2d      	ldr	r3, [pc, #180]	(1bbc8 <get_eit_entry+0xb8>)
   1bb14:	b083      	sub	sp, #12
   1bb16:	4605      	mov	r5, r0
   1bb18:	1e8c      	subs	r4, r1, #2
   1bb1a:	2b00      	cmp	r3, #0
   1bb1c:	d04a      	beq.n	1bbb4 <get_eit_entry+0xa4>
   1bb1e:	4620      	mov	r0, r4
   1bb20:	a901      	add	r1, sp, #4
   1bb22:	e000      	b.n	1bb26 <get_eit_entry+0x16>
   1bb24:	bf00      	nop
   1bb26:	4602      	mov	r2, r0
   1bb28:	2800      	cmp	r0, #0
   1bb2a:	d02b      	beq.n	1bb84 <get_eit_entry+0x74>
   1bb2c:	4610      	mov	r0, r2
   1bb2e:	9901      	ldr	r1, [sp, #4]
   1bb30:	4622      	mov	r2, r4
   1bb32:	f7ff fe31 	bl	1b798 <search_EIT_table>
   1bb36:	4604      	mov	r4, r0
   1bb38:	b300      	cbz	r0, 1bb7c <get_eit_entry+0x6c>
   1bb3a:	f7ff fe21 	bl	1b780 <selfrel_offset31>
   1bb3e:	64a8      	str	r0, [r5, #72]
   1bb40:	6863      	ldr	r3, [r4, #4]
   1bb42:	2b01      	cmp	r3, #1
   1bb44:	d02e      	beq.n	1bba4 <get_eit_entry+0x94>
   1bb46:	2b00      	cmp	r3, #0
   1bb48:	db1f      	blt.n	1bb8a <get_eit_entry+0x7a>
   1bb4a:	1d20      	adds	r0, r4, #4
   1bb4c:	f7ff fe18 	bl	1b780 <selfrel_offset31>
   1bb50:	64e8      	str	r0, [r5, #76]
   1bb52:	2300      	movs	r3, #0
   1bb54:	6ce8      	ldr	r0, [r5, #76]
   1bb56:	652b      	str	r3, [r5, #80]
   1bb58:	6803      	ldr	r3, [r0, #0]
   1bb5a:	2b00      	cmp	r3, #0
   1bb5c:	da1d      	bge.n	1bb9a <get_eit_entry+0x8a>
   1bb5e:	0e1b      	lsrs	r3, r3, #24
   1bb60:	f013 000f 	ands.w	r0, r3, #15	; 0xf
   1bb64:	bf04      	itt	eq
   1bb66:	4b19      	ldreq	r3, [pc, #100]	(1bbcc <get_eit_entry+0xbc>)
   1bb68:	612b      	streq	r3, [r5, #16]
   1bb6a:	d009      	beq.n	1bb80 <get_eit_entry+0x70>
   1bb6c:	2801      	cmp	r0, #1
   1bb6e:	d01d      	beq.n	1bbac <get_eit_entry+0x9c>
   1bb70:	2802      	cmp	r0, #2
   1bb72:	d025      	beq.n	1bbc0 <get_eit_entry+0xb0>
   1bb74:	2300      	movs	r3, #0
   1bb76:	612b      	str	r3, [r5, #16]
   1bb78:	2009      	movs	r0, #9
   1bb7a:	e001      	b.n	1bb80 <get_eit_entry+0x70>
   1bb7c:	6128      	str	r0, [r5, #16]
   1bb7e:	2009      	movs	r0, #9
   1bb80:	b003      	add	sp, #12
   1bb82:	bd30      	pop	{r4, r5, pc}
   1bb84:	6128      	str	r0, [r5, #16]
   1bb86:	3009      	adds	r0, #9
   1bb88:	e7fa      	b.n	1bb80 <get_eit_entry+0x70>
   1bb8a:	1d23      	adds	r3, r4, #4
   1bb8c:	64eb      	str	r3, [r5, #76]
   1bb8e:	2201      	movs	r2, #1
   1bb90:	6ce8      	ldr	r0, [r5, #76]
   1bb92:	652a      	str	r2, [r5, #80]
   1bb94:	6803      	ldr	r3, [r0, #0]
   1bb96:	2b00      	cmp	r3, #0
   1bb98:	dbe1      	blt.n	1bb5e <get_eit_entry+0x4e>
   1bb9a:	f7ff fdf1 	bl	1b780 <selfrel_offset31>
   1bb9e:	6128      	str	r0, [r5, #16]
   1bba0:	2000      	movs	r0, #0
   1bba2:	e7ed      	b.n	1bb80 <get_eit_entry+0x70>
   1bba4:	3b01      	subs	r3, #1
   1bba6:	612b      	str	r3, [r5, #16]
   1bba8:	2005      	movs	r0, #5
   1bbaa:	e7e9      	b.n	1bb80 <get_eit_entry+0x70>
   1bbac:	4b08      	ldr	r3, [pc, #32]	(1bbd0 <get_eit_entry+0xc0>)
   1bbae:	3801      	subs	r0, #1
   1bbb0:	612b      	str	r3, [r5, #16]
   1bbb2:	e7e5      	b.n	1bb80 <get_eit_entry+0x70>
   1bbb4:	4a07      	ldr	r2, [pc, #28]	(1bbd4 <get_eit_entry+0xc4>)
   1bbb6:	4b08      	ldr	r3, [pc, #32]	(1bbd8 <get_eit_entry+0xc8>)
   1bbb8:	1a9b      	subs	r3, r3, r2
   1bbba:	10db      	asrs	r3, r3, #3
   1bbbc:	9301      	str	r3, [sp, #4]
   1bbbe:	e7b5      	b.n	1bb2c <get_eit_entry+0x1c>
   1bbc0:	4b06      	ldr	r3, [pc, #24]	(1bbdc <get_eit_entry+0xcc>)
   1bbc2:	3802      	subs	r0, #2
   1bbc4:	612b      	str	r3, [r5, #16]
   1bbc6:	e7db      	b.n	1bb80 <get_eit_entry+0x70>
   1bbc8:	00000000 	.word	0x00000000
   1bbcc:	0001bb01 	.word	0x0001bb01
   1bbd0:	0001baf1 	.word	0x0001baf1
   1bbd4:	00023b78 	.word	0x00023b78
   1bbd8:	00023f40 	.word	0x00023f40
   1bbdc:	0001bae1 	.word	0x0001bae1

0001bbe0 <restore_non_core_regs>:
   1bbe0:	6803      	ldr	r3, [r0, #0]
   1bbe2:	b510      	push	{r4, lr}
   1bbe4:	f013 0f01 	tst.w	r3, #1	; 0x1
   1bbe8:	4604      	mov	r4, r0
   1bbea:	d107      	bne.n	1bbfc <restore_non_core_regs+0x1c>
   1bbec:	f013 0f02 	tst.w	r3, #2	; 0x2
   1bbf0:	d012      	beq.n	1bc18 <restore_non_core_regs+0x38>
   1bbf2:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1bbf6:	f000 facf 	bl	1c198 <__gnu_Unwind_Restore_VFP_D>
   1bbfa:	6823      	ldr	r3, [r4, #0]
   1bbfc:	f013 0f04 	tst.w	r3, #4	; 0x4
   1bc00:	d012      	beq.n	1bc28 <restore_non_core_regs+0x48>
   1bc02:	f013 0f08 	tst.w	r3, #8	; 0x8
   1bc06:	d017      	beq.n	1bc38 <restore_non_core_regs+0x58>
   1bc08:	f013 0f10 	tst.w	r3, #16	; 0x10
   1bc0c:	d103      	bne.n	1bc16 <restore_non_core_regs+0x36>
   1bc0e:	f504 700c 	add.w	r0, r4, #560	; 0x230
   1bc12:	f000 fb15 	bl	1c240 <__gnu_Unwind_Restore_WMMXC>
   1bc16:	bd10      	pop	{r4, pc}
   1bc18:	f100 0048 	add.w	r0, r0, #72	; 0x48
   1bc1c:	f000 fab4 	bl	1c188 <__gnu_Unwind_Restore_VFP>
   1bc20:	6823      	ldr	r3, [r4, #0]
   1bc22:	f013 0f04 	tst.w	r3, #4	; 0x4
   1bc26:	d1ec      	bne.n	1bc02 <restore_non_core_regs+0x22>
   1bc28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   1bc2c:	f000 fabc 	bl	1c1a8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1bc30:	6823      	ldr	r3, [r4, #0]
   1bc32:	f013 0f08 	tst.w	r3, #8	; 0x8
   1bc36:	d1e7      	bne.n	1bc08 <restore_non_core_regs+0x28>
   1bc38:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   1bc3c:	f000 fabc 	bl	1c1b8 <__gnu_Unwind_Restore_WMMXD>
   1bc40:	6823      	ldr	r3, [r4, #0]
   1bc42:	e7e1      	b.n	1bc08 <restore_non_core_regs+0x28>

0001bc44 <__gnu_Unwind_Backtrace>:
   1bc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc48:	6bd3      	ldr	r3, [r2, #60]
   1bc4a:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
   1bc4e:	6413      	str	r3, [r2, #64]
   1bc50:	f10d 0c04 	add.w	ip, sp, #4	; 0x4
   1bc54:	f102 0e04 	add.w	lr, r2, #4	; 0x4
   1bc58:	4680      	mov	r8, r0
   1bc5a:	460f      	mov	r7, r1
   1bc5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bc60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bc64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bc68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bc6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bc70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1bc74:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1bc78:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1bc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bc80:	466e      	mov	r6, sp
   1bc82:	9300      	str	r3, [sp, #0]
   1bc84:	ad90      	add	r5, sp, #576
   1bc86:	6c31      	ldr	r1, [r6, #64]
   1bc88:	4628      	mov	r0, r5
   1bc8a:	f7ff ff41 	bl	1bb10 <get_eit_entry>
   1bc8e:	2800      	cmp	r0, #0
   1bc90:	d121      	bne.n	1bcd6 <__gnu_Unwind_Backtrace+0x92>
   1bc92:	4668      	mov	r0, sp
   1bc94:	210c      	movs	r1, #12
   1bc96:	462a      	mov	r2, r5
   1bc98:	f7ff fd64 	bl	1b764 <_Unwind_SetGR>
   1bc9c:	4668      	mov	r0, sp
   1bc9e:	4639      	mov	r1, r7
   1bca0:	47c0      	blx	r8
   1bca2:	b9c0      	cbnz	r0, 1bcd6 <__gnu_Unwind_Backtrace+0x92>
   1bca4:	9b94      	ldr	r3, [sp, #592]
   1bca6:	3008      	adds	r0, #8
   1bca8:	4629      	mov	r1, r5
   1bcaa:	466a      	mov	r2, sp
   1bcac:	4798      	blx	r3
   1bcae:	f1b0 0309 	subs.w	r3, r0, #9	; 0x9
   1bcb2:	bf18      	it	ne
   1bcb4:	2301      	movne	r3, #1
   1bcb6:	2805      	cmp	r0, #5
   1bcb8:	bf0c      	ite	eq
   1bcba:	2300      	moveq	r3, #0
   1bcbc:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1bcc0:	4604      	mov	r4, r0
   1bcc2:	2b00      	cmp	r3, #0
   1bcc4:	d1df      	bne.n	1bc86 <__gnu_Unwind_Backtrace+0x42>
   1bcc6:	4668      	mov	r0, sp
   1bcc8:	f7ff ff8a 	bl	1bbe0 <restore_non_core_regs>
   1bccc:	4620      	mov	r0, r4
   1bcce:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
   1bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bcd6:	2409      	movs	r4, #9
   1bcd8:	e7f5      	b.n	1bcc6 <__gnu_Unwind_Backtrace+0x82>
   1bcda:	46c0      	nop			(mov r8, r8)

0001bcdc <unwind_phase2_forced>:
   1bcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bce0:	68c3      	ldr	r3, [r0, #12]
   1bce2:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
   1bce6:	b083      	sub	sp, #12
   1bce8:	6984      	ldr	r4, [r0, #24]
   1bcea:	9304      	str	r3, [sp, #16]
   1bcec:	ab97      	add	r3, sp, #604
   1bcee:	9303      	str	r3, [sp, #12]
   1bcf0:	9405      	str	r4, [sp, #20]
   1bcf2:	9c03      	ldr	r4, [sp, #12]
   1bcf4:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1bcf8:	4606      	mov	r6, r0
   1bcfa:	4693      	mov	fp, r2
   1bcfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bd00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bd02:	46a6      	mov	lr, r4
   1bd04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bd08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1bd0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bd10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1bd14:	af96      	add	r7, sp, #600
   1bd16:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1bd1a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1bd1e:	2300      	movs	r3, #0
   1bd20:	603b      	str	r3, [r7, #0]
   1bd22:	4698      	mov	r8, r3
   1bd24:	f10d 0a18 	add.w	sl, sp, #24	; 0x18
   1bd28:	6c39      	ldr	r1, [r7, #64]
   1bd2a:	4630      	mov	r0, r6
   1bd2c:	f7ff fef0 	bl	1bb10 <get_eit_entry>
   1bd30:	4605      	mov	r5, r0
   1bd32:	4681      	mov	r9, r0
   1bd34:	f1bb 0f00 	cmp.w	fp, #0	; 0x0
   1bd38:	d125      	bne.n	1bd86 <unwind_phase2_forced+0xaa>
   1bd3a:	2409      	movs	r4, #9
   1bd3c:	2d00      	cmp	r5, #0
   1bd3e:	d027      	beq.n	1bd90 <unwind_phase2_forced+0xb4>
   1bd40:	6bbb      	ldr	r3, [r7, #56]
   1bd42:	f044 0410 	orr.w	r4, r4, #16	; 0x10
   1bd46:	647b      	str	r3, [r7, #68]
   1bd48:	9b05      	ldr	r3, [sp, #20]
   1bd4a:	4621      	mov	r1, r4
   1bd4c:	9301      	str	r3, [sp, #4]
   1bd4e:	9700      	str	r7, [sp, #0]
   1bd50:	2001      	movs	r0, #1
   1bd52:	4632      	mov	r2, r6
   1bd54:	4633      	mov	r3, r6
   1bd56:	9c04      	ldr	r4, [sp, #16]
   1bd58:	47a0      	blx	r4
   1bd5a:	b960      	cbnz	r0, 1bd76 <unwind_phase2_forced+0x9a>
   1bd5c:	b96d      	cbnz	r5, 1bd7a <unwind_phase2_forced+0x9e>
   1bd5e:	4638      	mov	r0, r7
   1bd60:	4651      	mov	r1, sl
   1bd62:	f44f 7210 	mov.w	r2, #576	; 0x240
   1bd66:	f005 f825 	bl	20db4 <memcpy>
   1bd6a:	f1b8 0f08 	cmp.w	r8, #8	; 0x8
   1bd6e:	d0db      	beq.n	1bd28 <unwind_phase2_forced+0x4c>
   1bd70:	f1b8 0f07 	cmp.w	r8, #7	; 0x7
   1bd74:	d01e      	beq.n	1bdb4 <unwind_phase2_forced+0xd8>
   1bd76:	f04f 0909 	mov.w	r9, #9	; 0x9
   1bd7a:	4648      	mov	r0, r9
   1bd7c:	b027      	add	sp, #156
   1bd7e:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   1bd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd86:	240a      	movs	r4, #10
   1bd88:	f04f 0b00 	mov.w	fp, #0	; 0x0
   1bd8c:	2d00      	cmp	r5, #0
   1bd8e:	d1d7      	bne.n	1bd40 <unwind_phase2_forced+0x64>
   1bd90:	6c3b      	ldr	r3, [r7, #64]
   1bd92:	4639      	mov	r1, r7
   1bd94:	6173      	str	r3, [r6, #20]
   1bd96:	f44f 7210 	mov.w	r2, #576	; 0x240
   1bd9a:	4650      	mov	r0, sl
   1bd9c:	f005 f80a 	bl	20db4 <memcpy>
   1bda0:	6933      	ldr	r3, [r6, #16]
   1bda2:	4620      	mov	r0, r4
   1bda4:	4631      	mov	r1, r6
   1bda6:	4652      	mov	r2, sl
   1bda8:	4798      	blx	r3
   1bdaa:	f8da 3038 	ldr.w	r3, [sl, #56]
   1bdae:	4680      	mov	r8, r0
   1bdb0:	647b      	str	r3, [r7, #68]
   1bdb2:	e7c9      	b.n	1bd48 <unwind_phase2_forced+0x6c>
   1bdb4:	a897      	add	r0, sp, #604
   1bdb6:	f000 f9db 	bl	1c170 <__restore_core_regs>
   1bdba:	46c0      	nop			(mov r8, r8)

0001bdbc <__gnu_Unwind_ForcedUnwind>:
   1bdbc:	b500      	push	{lr}
   1bdbe:	60c1      	str	r1, [r0, #12]
   1bdc0:	6182      	str	r2, [r0, #24]
   1bdc2:	6bda      	ldr	r2, [r3, #60]
   1bdc4:	b081      	sub	sp, #4
   1bdc6:	641a      	str	r2, [r3, #64]
   1bdc8:	4619      	mov	r1, r3
   1bdca:	2200      	movs	r2, #0
   1bdcc:	f7ff ff86 	bl	1bcdc <unwind_phase2_forced>
   1bdd0:	b001      	add	sp, #4
   1bdd2:	bd00      	pop	{pc}

0001bdd4 <unwind_phase2>:
   1bdd4:	b570      	push	{r4, r5, r6, lr}
   1bdd6:	4605      	mov	r5, r0
   1bdd8:	460e      	mov	r6, r1
   1bdda:	6c31      	ldr	r1, [r6, #64]
   1bddc:	4628      	mov	r0, r5
   1bdde:	f7ff fe97 	bl	1bb10 <get_eit_entry>
   1bde2:	b950      	cbnz	r0, 1bdfa <unwind_phase2+0x26>
   1bde4:	6c33      	ldr	r3, [r6, #64]
   1bde6:	2001      	movs	r0, #1
   1bde8:	616b      	str	r3, [r5, #20]
   1bdea:	692c      	ldr	r4, [r5, #16]
   1bdec:	4629      	mov	r1, r5
   1bdee:	4632      	mov	r2, r6
   1bdf0:	47a0      	blx	r4
   1bdf2:	2808      	cmp	r0, #8
   1bdf4:	d0f1      	beq.n	1bdda <unwind_phase2+0x6>
   1bdf6:	2807      	cmp	r0, #7
   1bdf8:	d001      	beq.n	1bdfe <unwind_phase2+0x2a>
   1bdfa:	f004 fb27 	bl	2044c <abort>
   1bdfe:	1d30      	adds	r0, r6, #4
   1be00:	f000 f9b6 	bl	1c170 <__restore_core_regs>

0001be04 <__gnu_Unwind_RaiseException>:
   1be04:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be06:	6bcb      	ldr	r3, [r1, #60]
   1be08:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   1be0c:	640b      	str	r3, [r1, #64]
   1be0e:	f10d 0e04 	add.w	lr, sp, #4	; 0x4
   1be12:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1be16:	4605      	mov	r5, r0
   1be18:	460f      	mov	r7, r1
   1be1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1be1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1be22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1be26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1be2a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1be2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1be32:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1be36:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   1be3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1be3e:	466e      	mov	r6, sp
   1be40:	9300      	str	r3, [sp, #0]
   1be42:	6c31      	ldr	r1, [r6, #64]
   1be44:	4628      	mov	r0, r5
   1be46:	f7ff fe63 	bl	1bb10 <get_eit_entry>
   1be4a:	b958      	cbnz	r0, 1be64 <__gnu_Unwind_RaiseException+0x60>
   1be4c:	692b      	ldr	r3, [r5, #16]
   1be4e:	4629      	mov	r1, r5
   1be50:	466a      	mov	r2, sp
   1be52:	4798      	blx	r3
   1be54:	2808      	cmp	r0, #8
   1be56:	4604      	mov	r4, r0
   1be58:	d0f3      	beq.n	1be42 <__gnu_Unwind_RaiseException+0x3e>
   1be5a:	4668      	mov	r0, sp
   1be5c:	f7ff fec0 	bl	1bbe0 <restore_non_core_regs>
   1be60:	2c06      	cmp	r4, #6
   1be62:	d003      	beq.n	1be6c <__gnu_Unwind_RaiseException+0x68>
   1be64:	2009      	movs	r0, #9
   1be66:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   1be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1be6c:	4628      	mov	r0, r5
   1be6e:	4639      	mov	r1, r7
   1be70:	f7ff ffb0 	bl	1bdd4 <unwind_phase2>

0001be74 <__gnu_Unwind_Resume_or_Rethrow>:
   1be74:	b500      	push	{lr}
   1be76:	68c3      	ldr	r3, [r0, #12]
   1be78:	b081      	sub	sp, #4
   1be7a:	b133      	cbz	r3, 1be8a <__gnu_Unwind_Resume_or_Rethrow+0x16>
   1be7c:	6bcb      	ldr	r3, [r1, #60]
   1be7e:	2200      	movs	r2, #0
   1be80:	640b      	str	r3, [r1, #64]
   1be82:	f7ff ff2b 	bl	1bcdc <unwind_phase2_forced>
   1be86:	b001      	add	sp, #4
   1be88:	bd00      	pop	{pc}
   1be8a:	f7ff ffbb 	bl	1be04 <__gnu_Unwind_RaiseException>
   1be8e:	e7fa      	b.n	1be86 <__gnu_Unwind_Resume_or_Rethrow+0x12>

0001be90 <__gnu_Unwind_Resume>:
   1be90:	b530      	push	{r4, r5, lr}
   1be92:	6943      	ldr	r3, [r0, #20]
   1be94:	b081      	sub	sp, #4
   1be96:	640b      	str	r3, [r1, #64]
   1be98:	68c2      	ldr	r2, [r0, #12]
   1be9a:	4604      	mov	r4, r0
   1be9c:	460d      	mov	r5, r1
   1be9e:	b98a      	cbnz	r2, 1bec4 <__gnu_Unwind_Resume+0x34>
   1bea0:	6903      	ldr	r3, [r0, #16]
   1bea2:	4621      	mov	r1, r4
   1bea4:	2002      	movs	r0, #2
   1bea6:	462a      	mov	r2, r5
   1bea8:	4798      	blx	r3
   1beaa:	2807      	cmp	r0, #7
   1beac:	d007      	beq.n	1bebe <__gnu_Unwind_Resume+0x2e>
   1beae:	2808      	cmp	r0, #8
   1beb0:	d001      	beq.n	1beb6 <__gnu_Unwind_Resume+0x26>
   1beb2:	f004 facb 	bl	2044c <abort>
   1beb6:	4620      	mov	r0, r4
   1beb8:	4629      	mov	r1, r5
   1beba:	f7ff ff8b 	bl	1bdd4 <unwind_phase2>
   1bebe:	1d28      	adds	r0, r5, #4
   1bec0:	f000 f956 	bl	1c170 <__restore_core_regs>
   1bec4:	2201      	movs	r2, #1
   1bec6:	f7ff ff09 	bl	1bcdc <unwind_phase2_forced>
   1beca:	f004 fabf 	bl	2044c <abort>
   1bece:	46c0      	nop			(mov r8, r8)

0001bed0 <_Unwind_VRS_Pop>:
   1bed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bed4:	4614      	mov	r4, r2
   1bed6:	b0e6      	sub	sp, #408
   1bed8:	4605      	mov	r5, r0
   1beda:	461a      	mov	r2, r3
   1bedc:	2904      	cmp	r1, #4
   1bede:	d80e      	bhi.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bee0:	e8df f001 	tbb	[pc, r1]
   1bee4:	03545638 	.word	0x03545638
   1bee8:	0011      	.short	0x0011
   1beea:	2a03      	cmp	r2, #3
   1beec:	d107      	bne.n	1befe <_Unwind_VRS_Pop+0x2e>
   1beee:	0c26      	lsrs	r6, r4, #16
   1bef0:	0424      	lsls	r4, r4, #16
   1bef2:	0c24      	lsrs	r4, r4, #16
   1bef4:	eb04 0306 	add.w	r3, r4, r6
   1bef8:	2b10      	cmp	r3, #16
   1befa:	f240 80d9 	bls.w	1c0b0 <_Unwind_VRS_Pop+0x1e0>
   1befe:	2002      	movs	r0, #2
   1bf00:	b066      	add	sp, #408
   1bf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bf06:	2c10      	cmp	r4, #16
   1bf08:	bf94      	ite	ls
   1bf0a:	2300      	movls	r3, #0
   1bf0c:	2301      	movhi	r3, #1
   1bf0e:	2a00      	cmp	r2, #0
   1bf10:	bf18      	it	ne
   1bf12:	f043 0301 	orrne.w	r3, r3, #1	; 0x1
   1bf16:	2b00      	cmp	r3, #0
   1bf18:	d1f1      	bne.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bf1a:	6803      	ldr	r3, [r0, #0]
   1bf1c:	f013 0f10 	tst.w	r3, #16	; 0x10
   1bf20:	f040 8101 	bne.w	1c126 <_Unwind_VRS_Pop+0x256>
   1bf24:	ae62      	add	r6, sp, #392
   1bf26:	4630      	mov	r0, r6
   1bf28:	f000 f994 	bl	1c254 <__gnu_Unwind_Save_WMMXC>
   1bf2c:	6ba9      	ldr	r1, [r5, #56]
   1bf2e:	2200      	movs	r2, #0
   1bf30:	2001      	movs	r0, #1
   1bf32:	fa10 f302 	lsls.w	r3, r0, r2
   1bf36:	4223      	tst	r3, r4
   1bf38:	bf1c      	itt	ne
   1bf3a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1bf3e:	f846 3022 	strne.w	r3, [r6, r2, lsl #2]
   1bf42:	3201      	adds	r2, #1
   1bf44:	2a04      	cmp	r2, #4
   1bf46:	d1f4      	bne.n	1bf32 <_Unwind_VRS_Pop+0x62>
   1bf48:	4630      	mov	r0, r6
   1bf4a:	63a9      	str	r1, [r5, #56]
   1bf4c:	f000 f978 	bl	1c240 <__gnu_Unwind_Restore_WMMXC>
   1bf50:	2000      	movs	r0, #0
   1bf52:	e7d5      	b.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1bf54:	2a00      	cmp	r2, #0
   1bf56:	d1d2      	bne.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bf58:	0420      	lsls	r0, r4, #16
   1bf5a:	f8d5 c038 	ldr.w	ip, [r5, #56]
   1bf5e:	0c00      	lsrs	r0, r0, #16
   1bf60:	4611      	mov	r1, r2
   1bf62:	2401      	movs	r4, #1
   1bf64:	fa14 f301 	lsls.w	r3, r4, r1
   1bf68:	4203      	tst	r3, r0
   1bf6a:	d004      	beq.n	1bf76 <_Unwind_VRS_Pop+0xa6>
   1bf6c:	008b      	lsls	r3, r1, #2
   1bf6e:	f85c 2b04 	ldr.w	r2, [ip], #4
   1bf72:	442b      	add	r3, r5
   1bf74:	605a      	str	r2, [r3, #4]
   1bf76:	3101      	adds	r1, #1
   1bf78:	2910      	cmp	r1, #16
   1bf7a:	d1f3      	bne.n	1bf64 <_Unwind_VRS_Pop+0x94>
   1bf7c:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
   1bf80:	bf08      	it	eq
   1bf82:	f8c5 c038 	streq.w	ip, [r5, #56]
   1bf86:	d0bb      	beq.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1bf88:	2000      	movs	r0, #0
   1bf8a:	e7b9      	b.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1bf8c:	2001      	movs	r0, #1
   1bf8e:	e7b7      	b.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1bf90:	1f50      	subs	r0, r2, #5
   1bf92:	bf18      	it	ne
   1bf94:	2001      	movne	r0, #1
   1bf96:	2a01      	cmp	r2, #1
   1bf98:	bf0c      	ite	eq
   1bf9a:	2300      	moveq	r3, #0
   1bf9c:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d1ac      	bne.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bfa4:	0c26      	lsrs	r6, r4, #16
   1bfa6:	0424      	lsls	r4, r4, #16
   1bfa8:	0c24      	lsrs	r4, r4, #16
   1bfaa:	eb04 0106 	add.w	r1, r4, r6
   1bfae:	2a01      	cmp	r2, #1
   1bfb0:	bf0c      	ite	eq
   1bfb2:	2310      	moveq	r3, #16
   1bfb4:	2320      	movne	r3, #32
   1bfb6:	428b      	cmp	r3, r1
   1bfb8:	d3a1      	bcc.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bfba:	2a01      	cmp	r2, #1
   1bfbc:	bf14      	ite	ne
   1bfbe:	f04f 0800 	movne.w	r8, #0	; 0x0
   1bfc2:	f04f 0801 	moveq.w	r8, #1	; 0x1
   1bfc6:	2e0f      	cmp	r6, #15
   1bfc8:	bf94      	ite	ls
   1bfca:	2300      	movls	r3, #0
   1bfcc:	2301      	movhi	r3, #1
   1bfce:	ea18 0f03 	tst.w	r8, r3
   1bfd2:	d194      	bne.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bfd4:	2b00      	cmp	r3, #0
   1bfd6:	f040 808d 	bne.w	1c0f4 <_Unwind_VRS_Pop+0x224>
   1bfda:	2910      	cmp	r1, #16
   1bfdc:	bf98      	it	ls
   1bfde:	461f      	movls	r7, r3
   1bfe0:	d908      	bls.n	1bff4 <_Unwind_VRS_Pop+0x124>
   1bfe2:	f1a1 0710 	sub.w	r7, r1, #16	; 0x10
   1bfe6:	2f00      	cmp	r7, #0
   1bfe8:	bf0c      	ite	eq
   1bfea:	2300      	moveq	r3, #0
   1bfec:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1bff0:	2b00      	cmp	r3, #0
   1bff2:	d184      	bne.n	1befe <_Unwind_VRS_Pop+0x2e>
   1bff4:	2e0f      	cmp	r6, #15
   1bff6:	d810      	bhi.n	1c01a <_Unwind_VRS_Pop+0x14a>
   1bff8:	682b      	ldr	r3, [r5, #0]
   1bffa:	f013 0f01 	tst.w	r3, #1	; 0x1
   1bffe:	d00c      	beq.n	1c01a <_Unwind_VRS_Pop+0x14a>
   1c000:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   1c004:	2a05      	cmp	r2, #5
   1c006:	6029      	str	r1, [r5, #0]
   1c008:	f000 80a9 	beq.w	1c15e <_Unwind_VRS_Pop+0x28e>
   1c00c:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1c010:	4628      	mov	r0, r5
   1c012:	f840 3b48 	str.w	r3, [r0], #72
   1c016:	f000 f8bb 	bl	1c190 <__gnu_Unwind_Save_VFP>
   1c01a:	2f00      	cmp	r7, #0
   1c01c:	dd03      	ble.n	1c026 <_Unwind_VRS_Pop+0x156>
   1c01e:	682b      	ldr	r3, [r5, #0]
   1c020:	f013 0f04 	tst.w	r3, #4	; 0x4
   1c024:	d177      	bne.n	1c116 <_Unwind_VRS_Pop+0x246>
   1c026:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c02a:	f040 8094 	bne.w	1c156 <_Unwind_VRS_Pop+0x286>
   1c02e:	2e0f      	cmp	r6, #15
   1c030:	d96b      	bls.n	1c10a <_Unwind_VRS_Pop+0x23a>
   1c032:	2f00      	cmp	r7, #0
   1c034:	d160      	bne.n	1c0f8 <_Unwind_VRS_Pop+0x228>
   1c036:	4622      	mov	r2, r4
   1c038:	6ba8      	ldr	r0, [r5, #56]
   1c03a:	2a00      	cmp	r2, #0
   1c03c:	4684      	mov	ip, r0
   1c03e:	dd0f      	ble.n	1c060 <_Unwind_VRS_Pop+0x190>
   1c040:	0054      	lsls	r4, r2, #1
   1c042:	2100      	movs	r1, #0
   1c044:	00f2      	lsls	r2, r6, #3
   1c046:	eb0d 0c02 	add.w	ip, sp, r2
   1c04a:	460a      	mov	r2, r1
   1c04c:	5813      	ldr	r3, [r2, r0]
   1c04e:	3101      	adds	r1, #1
   1c050:	f84c 3002 	str.w	r3, [ip, r2]
   1c054:	3204      	adds	r2, #4
   1c056:	42a1      	cmp	r1, r4
   1c058:	d1f8      	bne.n	1c04c <_Unwind_VRS_Pop+0x17c>
   1c05a:	008b      	lsls	r3, r1, #2
   1c05c:	eb00 0c03 	add.w	ip, r0, r3
   1c060:	2f00      	cmp	r7, #0
   1c062:	dd13      	ble.n	1c08c <_Unwind_VRS_Pop+0x1bc>
   1c064:	2e10      	cmp	r6, #16
   1c066:	bf2c      	ite	cs
   1c068:	4633      	movcs	r3, r6
   1c06a:	2310      	movcc	r3, #16
   1c06c:	3b10      	subs	r3, #16
   1c06e:	00db      	lsls	r3, r3, #3
   1c070:	aa42      	add	r2, sp, #264
   1c072:	2000      	movs	r0, #0
   1c074:	007c      	lsls	r4, r7, #1
   1c076:	18d2      	adds	r2, r2, r3
   1c078:	4601      	mov	r1, r0
   1c07a:	f85c 3001 	ldr.w	r3, [ip, r1]
   1c07e:	3001      	adds	r0, #1
   1c080:	5053      	str	r3, [r2, r1]
   1c082:	3104      	adds	r1, #4
   1c084:	42a0      	cmp	r0, r4
   1c086:	d1f8      	bne.n	1c07a <_Unwind_VRS_Pop+0x1aa>
   1c088:	0083      	lsls	r3, r0, #2
   1c08a:	449c      	add	ip, r3
   1c08c:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c090:	d159      	bne.n	1c146 <_Unwind_VRS_Pop+0x276>
   1c092:	2e0f      	cmp	r6, #15
   1c094:	f8c5 c038 	str.w	ip, [r5, #56]
   1c098:	d802      	bhi.n	1c0a0 <_Unwind_VRS_Pop+0x1d0>
   1c09a:	4668      	mov	r0, sp
   1c09c:	f000 f87c 	bl	1c198 <__gnu_Unwind_Restore_VFP_D>
   1c0a0:	2f00      	cmp	r7, #0
   1c0a2:	f77f af71 	ble.w	1bf88 <_Unwind_VRS_Pop+0xb8>
   1c0a6:	a842      	add	r0, sp, #264
   1c0a8:	f000 f87e 	bl	1c1a8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   1c0ac:	2000      	movs	r0, #0
   1c0ae:	e727      	b.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1c0b0:	6803      	ldr	r3, [r0, #0]
   1c0b2:	f013 0f08 	tst.w	r3, #8	; 0x8
   1c0b6:	d13e      	bne.n	1c136 <_Unwind_VRS_Pop+0x266>
   1c0b8:	af22      	add	r7, sp, #136
   1c0ba:	4638      	mov	r0, r7
   1c0bc:	f000 f89e 	bl	1c1fc <__gnu_Unwind_Save_WMMXD>
   1c0c0:	6ba8      	ldr	r0, [r5, #56]
   1c0c2:	ea4f 0e44 	mov.w	lr, r4, lsl #1
   1c0c6:	4603      	mov	r3, r0
   1c0c8:	b174      	cbz	r4, 1c0e8 <_Unwind_VRS_Pop+0x218>
   1c0ca:	00f3      	lsls	r3, r6, #3
   1c0cc:	eb07 0c03 	add.w	ip, r7, r3
   1c0d0:	4671      	mov	r1, lr
   1c0d2:	2200      	movs	r2, #0
   1c0d4:	5813      	ldr	r3, [r2, r0]
   1c0d6:	f84c 3002 	str.w	r3, [ip, r2]
   1c0da:	3204      	adds	r2, #4
   1c0dc:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
   1c0e0:	d1f8      	bne.n	1c0d4 <_Unwind_VRS_Pop+0x204>
   1c0e2:	ea4f 038e 	mov.w	r3, lr, lsl #2
   1c0e6:	4403      	add	r3, r0
   1c0e8:	4638      	mov	r0, r7
   1c0ea:	63ab      	str	r3, [r5, #56]
   1c0ec:	f000 f864 	bl	1c1b8 <__gnu_Unwind_Restore_WMMXD>
   1c0f0:	2000      	movs	r0, #0
   1c0f2:	e705      	b.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1c0f4:	4627      	mov	r7, r4
   1c0f6:	e776      	b.n	1bfe6 <_Unwind_VRS_Pop+0x116>
   1c0f8:	a842      	add	r0, sp, #264
   1c0fa:	f000 f859 	bl	1c1b0 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1c0fe:	2f00      	cmp	r7, #0
   1c100:	bfc8      	it	gt
   1c102:	f1c6 0210 	rsbgt	r2, r6, #16	; 0x10
   1c106:	dc97      	bgt.n	1c038 <_Unwind_VRS_Pop+0x168>
   1c108:	e795      	b.n	1c036 <_Unwind_VRS_Pop+0x166>
   1c10a:	4668      	mov	r0, sp
   1c10c:	f000 f848 	bl	1c1a0 <__gnu_Unwind_Save_VFP_D>
   1c110:	2f00      	cmp	r7, #0
   1c112:	d090      	beq.n	1c036 <_Unwind_VRS_Pop+0x166>
   1c114:	e7f0      	b.n	1c0f8 <_Unwind_VRS_Pop+0x228>
   1c116:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   1c11a:	4628      	mov	r0, r5
   1c11c:	f840 3bd0 	str.w	r3, [r0], #208
   1c120:	f000 f846 	bl	1c1b0 <__gnu_Unwind_Save_VFP_D_16_to_31>
   1c124:	e77f      	b.n	1c026 <_Unwind_VRS_Pop+0x156>
   1c126:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   1c12a:	6003      	str	r3, [r0, #0]
   1c12c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   1c130:	f000 f890 	bl	1c254 <__gnu_Unwind_Save_WMMXC>
   1c134:	e6f6      	b.n	1bf24 <_Unwind_VRS_Pop+0x54>
   1c136:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   1c13a:	6003      	str	r3, [r0, #0]
   1c13c:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   1c140:	f000 f85c 	bl	1c1fc <__gnu_Unwind_Save_WMMXD>
   1c144:	e7b8      	b.n	1c0b8 <_Unwind_VRS_Pop+0x1e8>
   1c146:	f10c 0304 	add.w	r3, ip, #4	; 0x4
   1c14a:	4668      	mov	r0, sp
   1c14c:	63ab      	str	r3, [r5, #56]
   1c14e:	f000 f81b 	bl	1c188 <__gnu_Unwind_Restore_VFP>
   1c152:	2000      	movs	r0, #0
   1c154:	e6d4      	b.n	1bf00 <_Unwind_VRS_Pop+0x30>
   1c156:	4668      	mov	r0, sp
   1c158:	f000 f81a 	bl	1c190 <__gnu_Unwind_Save_VFP>
   1c15c:	e7cf      	b.n	1c0fe <_Unwind_VRS_Pop+0x22e>
   1c15e:	f041 0302 	orr.w	r3, r1, #2	; 0x2
   1c162:	4628      	mov	r0, r5
   1c164:	f840 3b48 	str.w	r3, [r0], #72
   1c168:	f000 f81a 	bl	1c1a0 <__gnu_Unwind_Save_VFP_D>
   1c16c:	e755      	b.n	1c01a <_Unwind_VRS_Pop+0x14a>
   1c16e:	46c0      	nop			(mov r8, r8)

0001c170 <__restore_core_regs>:
   1c170:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1c174:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   1c178:	469c      	mov	ip, r3
   1c17a:	46a6      	mov	lr, r4
   1c17c:	f84c 5d04 	str.w	r5, [ip, #-4]!
   1c180:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1c184:	46e5      	mov	sp, ip
   1c186:	bd00      	pop	{pc}

0001c188 <__gnu_Unwind_Restore_VFP>:
   1c188:	ec90 0b21 	fldmiax	r0, {d0-d15}
   1c18c:	4770      	bx	lr
   1c18e:	46c0      	nop			(mov r8, r8)

0001c190 <__gnu_Unwind_Save_VFP>:
   1c190:	ec80 0b21 	fstmiax	r0, {d0-d15}
   1c194:	4770      	bx	lr
   1c196:	46c0      	nop			(mov r8, r8)

0001c198 <__gnu_Unwind_Restore_VFP_D>:
   1c198:	ec90 0b20 	vldmia	r0, {d0-d15}
   1c19c:	4770      	bx	lr
   1c19e:	46c0      	nop			(mov r8, r8)

0001c1a0 <__gnu_Unwind_Save_VFP_D>:
   1c1a0:	ec80 0b20 	vstmia	r0, {d0-d15}
   1c1a4:	4770      	bx	lr
   1c1a6:	46c0      	nop			(mov r8, r8)

0001c1a8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   1c1a8:	ecd0 0b20 	vldmia	r0, {d16-d31}
   1c1ac:	4770      	bx	lr
   1c1ae:	46c0      	nop			(mov r8, r8)

0001c1b0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   1c1b0:	ecc0 0b20 	vstmia	r0, {d16-d31}
   1c1b4:	4770      	bx	lr
   1c1b6:	46c0      	nop			(mov r8, r8)

0001c1b8 <__gnu_Unwind_Restore_WMMXD>:
   1c1b8:	ecf0 0102 	ldfe	f0, [r0], #8
   1c1bc:	ecf0 1102 	ldfe	f1, [r0], #8
   1c1c0:	ecf0 2102 	ldfe	f2, [r0], #8
   1c1c4:	ecf0 3102 	ldfe	f3, [r0], #8
   1c1c8:	ecf0 4102 	ldfe	f4, [r0], #8
   1c1cc:	ecf0 5102 	ldfe	f5, [r0], #8
   1c1d0:	ecf0 6102 	ldfe	f6, [r0], #8
   1c1d4:	ecf0 7102 	ldfe	f7, [r0], #8
   1c1d8:	ecf0 8102 	ldfp	f0, [r0], #8
   1c1dc:	ecf0 9102 	ldfp	f1, [r0], #8
   1c1e0:	ecf0 a102 	ldfp	f2, [r0], #8
   1c1e4:	ecf0 b102 	ldfp	f3, [r0], #8
   1c1e8:	ecf0 c102 	ldfp	f4, [r0], #8
   1c1ec:	ecf0 d102 	ldfp	f5, [r0], #8
   1c1f0:	ecf0 e102 	ldfp	f6, [r0], #8
   1c1f4:	ecf0 f102 	ldfp	f7, [r0], #8
   1c1f8:	4770      	bx	lr
   1c1fa:	46c0      	nop			(mov r8, r8)

0001c1fc <__gnu_Unwind_Save_WMMXD>:
   1c1fc:	ece0 0102 	stfe	f0, [r0], #8
   1c200:	ece0 1102 	stfe	f1, [r0], #8
   1c204:	ece0 2102 	stfe	f2, [r0], #8
   1c208:	ece0 3102 	stfe	f3, [r0], #8
   1c20c:	ece0 4102 	stfe	f4, [r0], #8
   1c210:	ece0 5102 	stfe	f5, [r0], #8
   1c214:	ece0 6102 	stfe	f6, [r0], #8
   1c218:	ece0 7102 	stfe	f7, [r0], #8
   1c21c:	ece0 8102 	stfp	f0, [r0], #8
   1c220:	ece0 9102 	stfp	f1, [r0], #8
   1c224:	ece0 a102 	stfp	f2, [r0], #8
   1c228:	ece0 b102 	stfp	f3, [r0], #8
   1c22c:	ece0 c102 	stfp	f4, [r0], #8
   1c230:	ece0 d102 	stfp	f5, [r0], #8
   1c234:	ece0 e102 	stfp	f6, [r0], #8
   1c238:	ece0 f102 	stfp	f7, [r0], #8
   1c23c:	4770      	bx	lr
   1c23e:	46c0      	nop			(mov r8, r8)

0001c240 <__gnu_Unwind_Restore_WMMXC>:
   1c240:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1c244:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   1c248:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   1c24c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   1c250:	4770      	bx	lr
   1c252:	46c0      	nop			(mov r8, r8)

0001c254 <__gnu_Unwind_Save_WMMXC>:
   1c254:	fca0 8101 	stc2	1, cr8, [r0], #4
   1c258:	fca0 9101 	stc2	1, cr9, [r0], #4
   1c25c:	fca0 a101 	stc2	1, cr10, [r0], #4
   1c260:	fca0 b101 	stc2	1, cr11, [r0], #4
   1c264:	4770      	bx	lr
   1c266:	46c0      	nop			(mov r8, r8)

0001c268 <_Unwind_RaiseException>:
   1c268:	46ec      	mov	ip, sp
   1c26a:	b500      	push	{lr}
   1c26c:	e92d 5000 	stmdb	sp!, {ip, lr}
   1c270:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1c274:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c278:	e92d 000c 	stmdb	sp!, {r2, r3}
   1c27c:	a901      	add	r1, sp, #4
   1c27e:	f7ff fdc1 	bl	1be04 <__gnu_Unwind_RaiseException>
   1c282:	f8dd e040 	ldr.w	lr, [sp, #64]
   1c286:	b012      	add	sp, #72
   1c288:	4770      	bx	lr
   1c28a:	46c0      	nop			(mov r8, r8)

0001c28c <_Unwind_Resume>:
   1c28c:	46ec      	mov	ip, sp
   1c28e:	b500      	push	{lr}
   1c290:	e92d 5000 	stmdb	sp!, {ip, lr}
   1c294:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1c298:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c29c:	e92d 000c 	stmdb	sp!, {r2, r3}
   1c2a0:	a901      	add	r1, sp, #4
   1c2a2:	f7ff fdf5 	bl	1be90 <__gnu_Unwind_Resume>
   1c2a6:	f8dd e040 	ldr.w	lr, [sp, #64]
   1c2aa:	b012      	add	sp, #72
   1c2ac:	4770      	bx	lr
   1c2ae:	46c0      	nop			(mov r8, r8)

0001c2b0 <_Unwind_Resume_or_Rethrow>:
   1c2b0:	46ec      	mov	ip, sp
   1c2b2:	b500      	push	{lr}
   1c2b4:	e92d 5000 	stmdb	sp!, {ip, lr}
   1c2b8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1c2bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c2c0:	e92d 000c 	stmdb	sp!, {r2, r3}
   1c2c4:	a901      	add	r1, sp, #4
   1c2c6:	f7ff fdd5 	bl	1be74 <__gnu_Unwind_Resume_or_Rethrow>
   1c2ca:	f8dd e040 	ldr.w	lr, [sp, #64]
   1c2ce:	b012      	add	sp, #72
   1c2d0:	4770      	bx	lr
   1c2d2:	46c0      	nop			(mov r8, r8)

0001c2d4 <_Unwind_ForcedUnwind>:
   1c2d4:	46ec      	mov	ip, sp
   1c2d6:	b500      	push	{lr}
   1c2d8:	e92d 5000 	stmdb	sp!, {ip, lr}
   1c2dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1c2e0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c2e4:	e92d 000c 	stmdb	sp!, {r2, r3}
   1c2e8:	ab01      	add	r3, sp, #4
   1c2ea:	f7ff fd67 	bl	1bdbc <__gnu_Unwind_ForcedUnwind>
   1c2ee:	f8dd e040 	ldr.w	lr, [sp, #64]
   1c2f2:	b012      	add	sp, #72
   1c2f4:	4770      	bx	lr
   1c2f6:	46c0      	nop			(mov r8, r8)

0001c2f8 <_Unwind_Backtrace>:
   1c2f8:	46ec      	mov	ip, sp
   1c2fa:	b500      	push	{lr}
   1c2fc:	e92d 5000 	stmdb	sp!, {ip, lr}
   1c300:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1c304:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c308:	e92d 000c 	stmdb	sp!, {r2, r3}
   1c30c:	aa01      	add	r2, sp, #4
   1c30e:	f7ff fc99 	bl	1bc44 <__gnu_Unwind_Backtrace>
   1c312:	f8dd e040 	ldr.w	lr, [sp, #64]
   1c316:	b012      	add	sp, #72
   1c318:	4770      	bx	lr
   1c31a:	46c0      	nop			(mov r8, r8)

0001c31c <next_unwind_byte>:
   1c31c:	7a03      	ldrb	r3, [r0, #8]
   1c31e:	b993      	cbnz	r3, 1c346 <next_unwind_byte+0x2a>
   1c320:	7a42      	ldrb	r2, [r0, #9]
   1c322:	b172      	cbz	r2, 1c342 <next_unwind_byte+0x26>
   1c324:	3a01      	subs	r2, #1
   1c326:	6843      	ldr	r3, [r0, #4]
   1c328:	7242      	strb	r2, [r0, #9]
   1c32a:	f853 2b04 	ldr.w	r2, [r3], #4
   1c32e:	6002      	str	r2, [r0, #0]
   1c330:	2203      	movs	r2, #3
   1c332:	6043      	str	r3, [r0, #4]
   1c334:	7202      	strb	r2, [r0, #8]
   1c336:	6803      	ldr	r3, [r0, #0]
   1c338:	0e1a      	lsrs	r2, r3, #24
   1c33a:	021b      	lsls	r3, r3, #8
   1c33c:	6003      	str	r3, [r0, #0]
   1c33e:	4610      	mov	r0, r2
   1c340:	4770      	bx	lr
   1c342:	32b0      	adds	r2, #176
   1c344:	e7fb      	b.n	1c33e <next_unwind_byte+0x22>
   1c346:	3b01      	subs	r3, #1
   1c348:	7203      	strb	r3, [r0, #8]
   1c34a:	e7f4      	b.n	1c336 <next_unwind_byte+0x1a>

0001c34c <_Unwind_GetTextRelBase>:
   1c34c:	b500      	push	{lr}
   1c34e:	b081      	sub	sp, #4
   1c350:	f004 f87c 	bl	2044c <abort>

0001c354 <_Unwind_GetDataRelBase>:
   1c354:	b500      	push	{lr}
   1c356:	b081      	sub	sp, #4
   1c358:	f004 f878 	bl	2044c <abort>

0001c35c <_Unwind_GetGR>:
   1c35c:	b500      	push	{lr}
   1c35e:	b085      	sub	sp, #20
   1c360:	460a      	mov	r2, r1
   1c362:	ab03      	add	r3, sp, #12
   1c364:	2100      	movs	r1, #0
   1c366:	9300      	str	r3, [sp, #0]
   1c368:	460b      	mov	r3, r1
   1c36a:	f7ff f9b7 	bl	1b6dc <_Unwind_VRS_Get>
   1c36e:	9803      	ldr	r0, [sp, #12]
   1c370:	b005      	add	sp, #20
   1c372:	bd00      	pop	{pc}

0001c374 <unwind_UCB_from_context>:
   1c374:	b500      	push	{lr}
   1c376:	210c      	movs	r1, #12
   1c378:	b081      	sub	sp, #4
   1c37a:	f7ff ffef 	bl	1c35c <_Unwind_GetGR>
   1c37e:	b001      	add	sp, #4
   1c380:	bd00      	pop	{pc}
   1c382:	46c0      	nop			(mov r8, r8)

0001c384 <_Unwind_GetLanguageSpecificData>:
   1c384:	b500      	push	{lr}
   1c386:	b081      	sub	sp, #4
   1c388:	f7ff fff4 	bl	1c374 <unwind_UCB_from_context>
   1c38c:	6cc2      	ldr	r2, [r0, #76]
   1c38e:	79d3      	ldrb	r3, [r2, #7]
   1c390:	1d10      	adds	r0, r2, #4
   1c392:	3301      	adds	r3, #1
   1c394:	009b      	lsls	r3, r3, #2
   1c396:	18c0      	adds	r0, r0, r3
   1c398:	b001      	add	sp, #4
   1c39a:	bd00      	pop	{pc}

0001c39c <_Unwind_GetRegionStart>:
   1c39c:	b500      	push	{lr}
   1c39e:	b081      	sub	sp, #4
   1c3a0:	f7ff ffe8 	bl	1c374 <unwind_UCB_from_context>
   1c3a4:	6c80      	ldr	r0, [r0, #72]
   1c3a6:	b001      	add	sp, #4
   1c3a8:	bd00      	pop	{pc}
   1c3aa:	46c0      	nop			(mov r8, r8)

0001c3ac <__gnu_unwind_execute>:
   1c3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c3b0:	b084      	sub	sp, #16
   1c3b2:	4606      	mov	r6, r0
   1c3b4:	460f      	mov	r7, r1
   1c3b6:	f04f 0800 	mov.w	r8, #0	; 0x0
   1c3ba:	f10d 0a0c 	add.w	sl, sp, #12	; 0xc
   1c3be:	f44f 697f 	mov.w	r9, #4080	; 0xff0
   1c3c2:	4638      	mov	r0, r7
   1c3c4:	f7ff ffaa 	bl	1c31c <next_unwind_byte>
   1c3c8:	28b0      	cmp	r0, #176
   1c3ca:	4604      	mov	r4, r0
   1c3cc:	d02a      	beq.n	1c424 <__gnu_unwind_execute+0x78>
   1c3ce:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   1c3d2:	d02f      	beq.n	1c434 <__gnu_unwind_execute+0x88>
   1c3d4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c3d8:	2b80      	cmp	r3, #128
   1c3da:	d05d      	beq.n	1c498 <__gnu_unwind_execute+0xec>
   1c3dc:	2b90      	cmp	r3, #144
   1c3de:	d143      	bne.n	1c468 <__gnu_unwind_execute+0xbc>
   1c3e0:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c3e4:	2a0f      	cmp	r2, #15
   1c3e6:	bf14      	ite	ne
   1c3e8:	2300      	movne	r3, #0
   1c3ea:	2301      	moveq	r3, #1
   1c3ec:	2a0d      	cmp	r2, #13
   1c3ee:	bf14      	ite	ne
   1c3f0:	461c      	movne	r4, r3
   1c3f2:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   1c3f6:	2c00      	cmp	r4, #0
   1c3f8:	d14c      	bne.n	1c494 <__gnu_unwind_execute+0xe8>
   1c3fa:	4621      	mov	r1, r4
   1c3fc:	4623      	mov	r3, r4
   1c3fe:	4630      	mov	r0, r6
   1c400:	f8cd a000 	str.w	sl, [sp]
   1c404:	f7ff f96a 	bl	1b6dc <_Unwind_VRS_Get>
   1c408:	4621      	mov	r1, r4
   1c40a:	220d      	movs	r2, #13
   1c40c:	4623      	mov	r3, r4
   1c40e:	4630      	mov	r0, r6
   1c410:	f8cd a000 	str.w	sl, [sp]
   1c414:	f7ff f98a 	bl	1b72c <_Unwind_VRS_Set>
   1c418:	4638      	mov	r0, r7
   1c41a:	f7ff ff7f 	bl	1c31c <next_unwind_byte>
   1c41e:	28b0      	cmp	r0, #176
   1c420:	4604      	mov	r4, r0
   1c422:	d1d4      	bne.n	1c3ce <__gnu_unwind_execute+0x22>
   1c424:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1c428:	f000 80c3 	beq.w	1c5b2 <__gnu_unwind_execute+0x206>
   1c42c:	2000      	movs	r0, #0
   1c42e:	b004      	add	sp, #16
   1c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c434:	0083      	lsls	r3, r0, #2
   1c436:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1c43a:	1d1d      	adds	r5, r3, #4
   1c43c:	220d      	movs	r2, #13
   1c43e:	4630      	mov	r0, r6
   1c440:	460b      	mov	r3, r1
   1c442:	f8cd a000 	str.w	sl, [sp]
   1c446:	f7ff f949 	bl	1b6dc <_Unwind_VRS_Get>
   1c44a:	f014 0f40 	tst.w	r4, #64	; 0x40
   1c44e:	d03b      	beq.n	1c4c8 <__gnu_unwind_execute+0x11c>
   1c450:	9b03      	ldr	r3, [sp, #12]
   1c452:	1b5b      	subs	r3, r3, r5
   1c454:	9303      	str	r3, [sp, #12]
   1c456:	2100      	movs	r1, #0
   1c458:	4630      	mov	r0, r6
   1c45a:	220d      	movs	r2, #13
   1c45c:	460b      	mov	r3, r1
   1c45e:	f8cd a000 	str.w	sl, [sp]
   1c462:	f7ff f963 	bl	1b72c <_Unwind_VRS_Set>
   1c466:	e7ac      	b.n	1c3c2 <__gnu_unwind_execute+0x16>
   1c468:	2ba0      	cmp	r3, #160
   1c46a:	d131      	bne.n	1c4d0 <__gnu_unwind_execute+0x124>
   1c46c:	ea6f 0300 	mvn.w	r3, r0
   1c470:	f003 0307 	and.w	r3, r3, #7	; 0x7
   1c474:	fa49 f303 	asr.w	r3, r9, r3
   1c478:	f010 0f08 	tst.w	r0, #8	; 0x8
   1c47c:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   1c480:	bf18      	it	ne
   1c482:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
   1c486:	2100      	movs	r1, #0
   1c488:	4630      	mov	r0, r6
   1c48a:	460b      	mov	r3, r1
   1c48c:	f7ff fd20 	bl	1bed0 <_Unwind_VRS_Pop>
   1c490:	2800      	cmp	r0, #0
   1c492:	d096      	beq.n	1c3c2 <__gnu_unwind_execute+0x16>
   1c494:	2009      	movs	r0, #9
   1c496:	e7ca      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c498:	0204      	lsls	r4, r0, #8
   1c49a:	4638      	mov	r0, r7
   1c49c:	f7ff ff3e 	bl	1c31c <next_unwind_byte>
   1c4a0:	4320      	orrs	r0, r4
   1c4a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c4a6:	d0f5      	beq.n	1c494 <__gnu_unwind_execute+0xe8>
   1c4a8:	0104      	lsls	r4, r0, #4
   1c4aa:	0422      	lsls	r2, r4, #16
   1c4ac:	2100      	movs	r1, #0
   1c4ae:	0c12      	lsrs	r2, r2, #16
   1c4b0:	4630      	mov	r0, r6
   1c4b2:	460b      	mov	r3, r1
   1c4b4:	f7ff fd0c 	bl	1bed0 <_Unwind_VRS_Pop>
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	d1eb      	bne.n	1c494 <__gnu_unwind_execute+0xe8>
   1c4bc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1c4c0:	bf18      	it	ne
   1c4c2:	f04f 0801 	movne.w	r8, #1	; 0x1
   1c4c6:	e77c      	b.n	1c3c2 <__gnu_unwind_execute+0x16>
   1c4c8:	9b03      	ldr	r3, [sp, #12]
   1c4ca:	195b      	adds	r3, r3, r5
   1c4cc:	9303      	str	r3, [sp, #12]
   1c4ce:	e7c2      	b.n	1c456 <__gnu_unwind_execute+0xaa>
   1c4d0:	2bb0      	cmp	r3, #176
   1c4d2:	d014      	beq.n	1c4fe <__gnu_unwind_execute+0x152>
   1c4d4:	2bc0      	cmp	r3, #192
   1c4d6:	d02c      	beq.n	1c532 <__gnu_unwind_execute+0x186>
   1c4d8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1c4dc:	2bd0      	cmp	r3, #208
   1c4de:	d1d9      	bne.n	1c494 <__gnu_unwind_execute+0xe8>
   1c4e0:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1c4e4:	3201      	adds	r2, #1
   1c4e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1c4ea:	4630      	mov	r0, r6
   1c4ec:	2101      	movs	r1, #1
   1c4ee:	3bcb      	subs	r3, #203
   1c4f0:	f7ff fcee 	bl	1bed0 <_Unwind_VRS_Pop>
   1c4f4:	2800      	cmp	r0, #0
   1c4f6:	f43f af64 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c4fa:	2009      	movs	r0, #9
   1c4fc:	e797      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c4fe:	28b1      	cmp	r0, #177
   1c500:	d03a      	beq.n	1c578 <__gnu_unwind_execute+0x1cc>
   1c502:	28b2      	cmp	r0, #178
   1c504:	f000 808f 	beq.w	1c626 <__gnu_unwind_execute+0x27a>
   1c508:	28b3      	cmp	r0, #179
   1c50a:	d047      	beq.n	1c59c <__gnu_unwind_execute+0x1f0>
   1c50c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   1c510:	2bb4      	cmp	r3, #180
   1c512:	d06e      	beq.n	1c5f2 <__gnu_unwind_execute+0x246>
   1c514:	f000 0207 	and.w	r2, r0, #7	; 0x7
   1c518:	3201      	adds	r2, #1
   1c51a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   1c51e:	2101      	movs	r1, #1
   1c520:	4630      	mov	r0, r6
   1c522:	460b      	mov	r3, r1
   1c524:	f7ff fcd4 	bl	1bed0 <_Unwind_VRS_Pop>
   1c528:	2800      	cmp	r0, #0
   1c52a:	f43f af4a 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c52e:	2009      	movs	r0, #9
   1c530:	e77d      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c532:	28c6      	cmp	r0, #198
   1c534:	d06c      	beq.n	1c610 <__gnu_unwind_execute+0x264>
   1c536:	28c7      	cmp	r0, #199
   1c538:	f000 809a 	beq.w	1c670 <__gnu_unwind_execute+0x2c4>
   1c53c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   1c540:	2bc0      	cmp	r3, #192
   1c542:	d047      	beq.n	1c5d4 <__gnu_unwind_execute+0x228>
   1c544:	28c8      	cmp	r0, #200
   1c546:	f000 80a7 	beq.w	1c698 <__gnu_unwind_execute+0x2ec>
   1c54a:	28c9      	cmp	r0, #201
   1c54c:	d1a2      	bne.n	1c494 <__gnu_unwind_execute+0xe8>
   1c54e:	4638      	mov	r0, r7
   1c550:	f7ff fee4 	bl	1c31c <next_unwind_byte>
   1c554:	4602      	mov	r2, r0
   1c556:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c55a:	f002 020f 	and.w	r2, r2, #15	; 0xf
   1c55e:	3201      	adds	r2, #1
   1c560:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1c564:	4630      	mov	r0, r6
   1c566:	2101      	movs	r1, #1
   1c568:	2305      	movs	r3, #5
   1c56a:	f7ff fcb1 	bl	1bed0 <_Unwind_VRS_Pop>
   1c56e:	2800      	cmp	r0, #0
   1c570:	f43f af27 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c574:	2009      	movs	r0, #9
   1c576:	e75a      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c578:	4638      	mov	r0, r7
   1c57a:	f7ff fecf 	bl	1c31c <next_unwind_byte>
   1c57e:	4602      	mov	r2, r0
   1c580:	2800      	cmp	r0, #0
   1c582:	d087      	beq.n	1c494 <__gnu_unwind_execute+0xe8>
   1c584:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   1c588:	d184      	bne.n	1c494 <__gnu_unwind_execute+0xe8>
   1c58a:	4630      	mov	r0, r6
   1c58c:	460b      	mov	r3, r1
   1c58e:	f7ff fc9f 	bl	1bed0 <_Unwind_VRS_Pop>
   1c592:	2800      	cmp	r0, #0
   1c594:	f43f af15 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c598:	2009      	movs	r0, #9
   1c59a:	e748      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c59c:	4638      	mov	r0, r7
   1c59e:	f7ff febd 	bl	1c31c <next_unwind_byte>
   1c5a2:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c5a6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c5aa:	3201      	adds	r2, #1
   1c5ac:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1c5b0:	e7b5      	b.n	1c51e <__gnu_unwind_execute+0x172>
   1c5b2:	ac03      	add	r4, sp, #12
   1c5b4:	4641      	mov	r1, r8
   1c5b6:	220e      	movs	r2, #14
   1c5b8:	4643      	mov	r3, r8
   1c5ba:	4630      	mov	r0, r6
   1c5bc:	9400      	str	r4, [sp, #0]
   1c5be:	f7ff f88d 	bl	1b6dc <_Unwind_VRS_Get>
   1c5c2:	4630      	mov	r0, r6
   1c5c4:	4641      	mov	r1, r8
   1c5c6:	220f      	movs	r2, #15
   1c5c8:	4643      	mov	r3, r8
   1c5ca:	9400      	str	r4, [sp, #0]
   1c5cc:	f7ff f8ae 	bl	1b72c <_Unwind_VRS_Set>
   1c5d0:	4640      	mov	r0, r8
   1c5d2:	e72c      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c5d4:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c5d8:	3201      	adds	r2, #1
   1c5da:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   1c5de:	2103      	movs	r1, #3
   1c5e0:	4630      	mov	r0, r6
   1c5e2:	460b      	mov	r3, r1
   1c5e4:	f7ff fc74 	bl	1bed0 <_Unwind_VRS_Pop>
   1c5e8:	2800      	cmp	r0, #0
   1c5ea:	f43f aeea 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c5ee:	2009      	movs	r0, #9
   1c5f0:	e71d      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c5f2:	f000 0203 	and.w	r2, r0, #3	; 0x3
   1c5f6:	3201      	adds	r2, #1
   1c5f8:	2102      	movs	r1, #2
   1c5fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   1c5fe:	4630      	mov	r0, r6
   1c600:	460b      	mov	r3, r1
   1c602:	f7ff fc65 	bl	1bed0 <_Unwind_VRS_Pop>
   1c606:	2800      	cmp	r0, #0
   1c608:	f43f aedb 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c60c:	2009      	movs	r0, #9
   1c60e:	e70e      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c610:	4638      	mov	r0, r7
   1c612:	f7ff fe83 	bl	1c31c <next_unwind_byte>
   1c616:	f000 020f 	and.w	r2, r0, #15	; 0xf
   1c61a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c61e:	3201      	adds	r2, #1
   1c620:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   1c624:	e7db      	b.n	1c5de <__gnu_unwind_execute+0x232>
   1c626:	2100      	movs	r1, #0
   1c628:	220d      	movs	r2, #13
   1c62a:	460b      	mov	r3, r1
   1c62c:	4630      	mov	r0, r6
   1c62e:	f8cd a000 	str.w	sl, [sp]
   1c632:	f7ff f853 	bl	1b6dc <_Unwind_VRS_Get>
   1c636:	4638      	mov	r0, r7
   1c638:	f7ff fe70 	bl	1c31c <next_unwind_byte>
   1c63c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c640:	d032      	beq.n	1c6a8 <__gnu_unwind_execute+0x2fc>
   1c642:	2402      	movs	r4, #2
   1c644:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1c648:	40a2      	lsls	r2, r4
   1c64a:	9b03      	ldr	r3, [sp, #12]
   1c64c:	4638      	mov	r0, r7
   1c64e:	189b      	adds	r3, r3, r2
   1c650:	9303      	str	r3, [sp, #12]
   1c652:	f7ff fe63 	bl	1c31c <next_unwind_byte>
   1c656:	3407      	adds	r4, #7
   1c658:	f010 0f80 	tst.w	r0, #128	; 0x80
   1c65c:	d1f2      	bne.n	1c644 <__gnu_unwind_execute+0x298>
   1c65e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c662:	40a3      	lsls	r3, r4
   1c664:	9a03      	ldr	r2, [sp, #12]
   1c666:	f502 7201 	add.w	r2, r2, #516	; 0x204
   1c66a:	18d2      	adds	r2, r2, r3
   1c66c:	9203      	str	r2, [sp, #12]
   1c66e:	e6f2      	b.n	1c456 <__gnu_unwind_execute+0xaa>
   1c670:	4638      	mov	r0, r7
   1c672:	f7ff fe53 	bl	1c31c <next_unwind_byte>
   1c676:	4602      	mov	r2, r0
   1c678:	2800      	cmp	r0, #0
   1c67a:	f43f af0b 	beq.w	1c494 <__gnu_unwind_execute+0xe8>
   1c67e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1c682:	f47f af07 	bne.w	1c494 <__gnu_unwind_execute+0xe8>
   1c686:	4630      	mov	r0, r6
   1c688:	2104      	movs	r1, #4
   1c68a:	f7ff fc21 	bl	1bed0 <_Unwind_VRS_Pop>
   1c68e:	2800      	cmp	r0, #0
   1c690:	f43f ae97 	beq.w	1c3c2 <__gnu_unwind_execute+0x16>
   1c694:	2009      	movs	r0, #9
   1c696:	e6ca      	b.n	1c42e <__gnu_unwind_execute+0x82>
   1c698:	4638      	mov	r0, r7
   1c69a:	f7ff fe3f 	bl	1c31c <next_unwind_byte>
   1c69e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1c6a2:	4602      	mov	r2, r0
   1c6a4:	3310      	adds	r3, #16
   1c6a6:	e758      	b.n	1c55a <__gnu_unwind_execute+0x1ae>
   1c6a8:	3cb0      	subs	r4, #176
   1c6aa:	e7d8      	b.n	1c65e <__gnu_unwind_execute+0x2b2>

0001c6ac <__gnu_unwind_frame>:
   1c6ac:	b500      	push	{lr}
   1c6ae:	f8d0 c04c 	ldr.w	ip, [r0, #76]
   1c6b2:	b085      	sub	sp, #20
   1c6b4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1c6b8:	f10c 0208 	add.w	r2, ip, #8	; 0x8
   1c6bc:	021b      	lsls	r3, r3, #8
   1c6be:	9301      	str	r3, [sp, #4]
   1c6c0:	2303      	movs	r3, #3
   1c6c2:	f88d 300c 	strb.w	r3, [sp, #12]
   1c6c6:	9202      	str	r2, [sp, #8]
   1c6c8:	f89c 2007 	ldrb.w	r2, [ip, #7]
   1c6cc:	4608      	mov	r0, r1
   1c6ce:	a901      	add	r1, sp, #4
   1c6d0:	f88d 200d 	strb.w	r2, [sp, #13]
   1c6d4:	f7ff fe6a 	bl	1c3ac <__gnu_unwind_execute>
   1c6d8:	b005      	add	sp, #20
   1c6da:	bd00      	pop	{pc}

0001c6dc <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
   1c6dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
   1c6de:	e003      	b.n	1c6e8 <LoopCopyDataInit>

0001c6e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
   1c6e0:	4b09      	ldr	r3, [pc, #36]	(1c708 <LoopFillZerobss+0xc>)
  ldr  r3, [r3, r1]
   1c6e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
   1c6e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
   1c6e6:	3104      	adds	r1, #4

0001c6e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
   1c6e8:	4808      	ldr	r0, [pc, #32]	(1c70c <LoopFillZerobss+0x10>)
  ldr  r3, =_edata
   1c6ea:	4b09      	ldr	r3, [pc, #36]	(1c710 <LoopFillZerobss+0x14>)
  adds  r2, r0, r1
   1c6ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
   1c6ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
   1c6f0:	d3f6      	bcc.n	1c6e0 <CopyDataInit>
  ldr  r2, =_sbss
   1c6f2:	4a08      	ldr	r2, [pc, #32]	(1c714 <LoopFillZerobss+0x18>)
  b  LoopFillZerobss
   1c6f4:	e002      	b.n	1c6fc <LoopFillZerobss>

0001c6f6 <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
   1c6f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
   1c6f8:	f842 3b04 	str.w	r3, [r2], #4

0001c6fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
   1c6fc:	4b06      	ldr	r3, [pc, #24]	(1c718 <LoopFillZerobss+0x1c>)
  cmp  r2, r3
   1c6fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
   1c700:	d3f9      	bcc.n	1c6f6 <FillZerobss>
/* Call the application's entry point.*/
  bl  main
   1c702:	f7f2 f8df 	bl	e8c4 <main>
  bx  lr    
   1c706:	4770      	bx	lr
   1c708:	00024040 	.word	0x00024040
   1c70c:	20000000 	.word	0x20000000
   1c710:	20000034 	.word	0x20000034
   1c714:	20000548 	.word	0x20000548
   1c718:	20000688 	.word	0x20000688

0001c71c <ADC1_2_IRQHandler>:
 * @retval : None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
   1c71c:	e7fe      	b.n	1c71c <ADC1_2_IRQHandler>
	...

0001c720 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c720:	b480      	push	{r7}
   1c722:	b083      	sub	sp, #12
   1c724:	af00      	add	r7, sp, #0
   1c726:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c728:	687a      	ldr	r2, [r7, #4]
   1c72a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c72e:	6093      	str	r3, [r2, #8]
}
   1c730:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c734:	46bd      	mov	sp, r7
   1c736:	bc80      	pop	{r7}
   1c738:	4770      	bx	lr
   1c73a:	46c0      	nop			(mov r8, r8)

0001c73c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c73c:	b480      	push	{r7}
   1c73e:	b083      	sub	sp, #12
   1c740:	af00      	add	r7, sp, #0
   1c742:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c744:	687a      	ldr	r2, [r7, #4]
   1c746:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c74a:	6093      	str	r3, [r2, #8]
}
   1c74c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c750:	46bd      	mov	sp, r7
   1c752:	bc80      	pop	{r7}
   1c754:	4770      	bx	lr
   1c756:	46c0      	nop			(mov r8, r8)

0001c758 <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c758:	b480      	push	{r7}
   1c75a:	b083      	sub	sp, #12
   1c75c:	af00      	add	r7, sp, #0
   1c75e:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c760:	687a      	ldr	r2, [r7, #4]
   1c762:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c766:	6093      	str	r3, [r2, #8]
}
   1c768:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c76c:	46bd      	mov	sp, r7
   1c76e:	bc80      	pop	{r7}
   1c770:	4770      	bx	lr
   1c772:	46c0      	nop			(mov r8, r8)

0001c774 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1c774:	b480      	push	{r7}
   1c776:	b083      	sub	sp, #12
   1c778:	af00      	add	r7, sp, #0
   1c77a:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1c77c:	687a      	ldr	r2, [r7, #4]
   1c77e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c782:	6093      	str	r3, [r2, #8]
}
   1c784:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1c788:	46bd      	mov	sp, r7
   1c78a:	bc80      	pop	{r7}
   1c78c:	4770      	bx	lr
   1c78e:	46c0      	nop			(mov r8, r8)

0001c790 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1c790:	b580      	push	{r7, lr}
   1c792:	b082      	sub	sp, #8
   1c794:	af00      	add	r7, sp, #0
   1c796:	6078      	str	r0, [r7, #4]
   1c798:	6039      	str	r1, [r7, #0]
   1c79a:	687a      	ldr	r2, [r7, #4]
   1c79c:	4b0e      	ldr	r3, [pc, #56]	(1c7d8 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei+0x48>)
   1c79e:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1c7a0:	687a      	ldr	r2, [r7, #4]
   1c7a2:	683b      	ldr	r3, [r7, #0]
   1c7a4:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1c7a6:	683b      	ldr	r3, [r7, #0]
   1c7a8:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c7ac:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c7b0:	ebc2 0303 	rsb	r3, r2, r3
   1c7b4:	4618      	mov	r0, r3
   1c7b6:	f7f2 fa33 	bl	ec20 <_Znaj>
   1c7ba:	4603      	mov	r3, r0
   1c7bc:	461a      	mov	r2, r3
   1c7be:	687b      	ldr	r3, [r7, #4]
   1c7c0:	605a      	str	r2, [r3, #4]
    size = 0;
   1c7c2:	687a      	ldr	r2, [r7, #4]
   1c7c4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c7c8:	6093      	str	r3, [r2, #8]
   1c7ca:	687b      	ldr	r3, [r7, #4]
}
   1c7cc:	4618      	mov	r0, r3
   1c7ce:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c7d2:	46bd      	mov	sp, r7
   1c7d4:	bd80      	pop	{r7, pc}
   1c7d6:	46c0      	nop			(mov r8, r8)
   1c7d8:	00022ae0 	.word	0x00022ae0

0001c7dc <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1c7dc:	b580      	push	{r7, lr}
   1c7de:	b082      	sub	sp, #8
   1c7e0:	af00      	add	r7, sp, #0
   1c7e2:	6078      	str	r0, [r7, #4]
   1c7e4:	6039      	str	r1, [r7, #0]
   1c7e6:	687a      	ldr	r2, [r7, #4]
   1c7e8:	4b0b      	ldr	r3, [pc, #44]	(1c818 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei+0x3c>)
   1c7ea:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1c7ec:	687a      	ldr	r2, [r7, #4]
   1c7ee:	683b      	ldr	r3, [r7, #0]
   1c7f0:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1c7f2:	683b      	ldr	r3, [r7, #0]
   1c7f4:	4618      	mov	r0, r3
   1c7f6:	f7f2 fa13 	bl	ec20 <_Znaj>
   1c7fa:	4603      	mov	r3, r0
   1c7fc:	461a      	mov	r2, r3
   1c7fe:	687b      	ldr	r3, [r7, #4]
   1c800:	605a      	str	r2, [r3, #4]
    size = 0;
   1c802:	687a      	ldr	r2, [r7, #4]
   1c804:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c808:	6093      	str	r3, [r2, #8]
   1c80a:	687b      	ldr	r3, [r7, #4]
}
   1c80c:	4618      	mov	r0, r3
   1c80e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c812:	46bd      	mov	sp, r7
   1c814:	bd80      	pop	{r7, pc}
   1c816:	46c0      	nop			(mov r8, r8)
   1c818:	00022af0 	.word	0x00022af0

0001c81c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1c81c:	b580      	push	{r7, lr}
   1c81e:	b082      	sub	sp, #8
   1c820:	af00      	add	r7, sp, #0
   1c822:	6078      	str	r0, [r7, #4]
   1c824:	6039      	str	r1, [r7, #0]
   1c826:	687a      	ldr	r2, [r7, #4]
   1c828:	4b0b      	ldr	r3, [pc, #44]	(1c858 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei+0x3c>)
   1c82a:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1c82c:	687a      	ldr	r2, [r7, #4]
   1c82e:	683b      	ldr	r3, [r7, #0]
   1c830:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1c832:	683b      	ldr	r3, [r7, #0]
   1c834:	4618      	mov	r0, r3
   1c836:	f7f2 f9f3 	bl	ec20 <_Znaj>
   1c83a:	4603      	mov	r3, r0
   1c83c:	461a      	mov	r2, r3
   1c83e:	687b      	ldr	r3, [r7, #4]
   1c840:	605a      	str	r2, [r3, #4]
    size = 0;
   1c842:	687a      	ldr	r2, [r7, #4]
   1c844:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c848:	6093      	str	r3, [r2, #8]
   1c84a:	687b      	ldr	r3, [r7, #4]
}
   1c84c:	4618      	mov	r0, r3
   1c84e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1c852:	46bd      	mov	sp, r7
   1c854:	bd80      	pop	{r7, pc}
   1c856:	46c0      	nop			(mov r8, r8)
   1c858:	00022b00 	.word	0x00022b00

0001c85c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c85c:	b580      	push	{r7, lr}
   1c85e:	b084      	sub	sp, #16
   1c860:	af00      	add	r7, sp, #0
   1c862:	6078      	str	r0, [r7, #4]
   1c864:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c866:	687b      	ldr	r3, [r7, #4]
   1c868:	689a      	ldr	r2, [r3, #8]
   1c86a:	687b      	ldr	r3, [r7, #4]
   1c86c:	68db      	ldr	r3, [r3, #12]
   1c86e:	429a      	cmp	r2, r3
   1c870:	da0e      	bge.n	1c890 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1c872:	687b      	ldr	r3, [r7, #4]
   1c874:	685a      	ldr	r2, [r3, #4]
   1c876:	687b      	ldr	r3, [r7, #4]
   1c878:	689b      	ldr	r3, [r3, #8]
   1c87a:	441a      	add	r2, r3
   1c87c:	683b      	ldr	r3, [r7, #0]
   1c87e:	781b      	ldrb	r3, [r3, #0]
   1c880:	7013      	strb	r3, [r2, #0]
        size++;
   1c882:	687b      	ldr	r3, [r7, #4]
   1c884:	689b      	ldr	r3, [r3, #8]
   1c886:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c88a:	687b      	ldr	r3, [r7, #4]
   1c88c:	609a      	str	r2, [r3, #8]
   1c88e:	e03c      	b.n	1c90a <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c890:	687b      	ldr	r3, [r7, #4]
   1c892:	685b      	ldr	r3, [r3, #4]
   1c894:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c896:	687b      	ldr	r3, [r7, #4]
   1c898:	68db      	ldr	r3, [r3, #12]
   1c89a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c89e:	687b      	ldr	r3, [r7, #4]
   1c8a0:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c8a2:	687b      	ldr	r3, [r7, #4]
   1c8a4:	68db      	ldr	r3, [r3, #12]
   1c8a6:	4618      	mov	r0, r3
   1c8a8:	f7f2 f9ba 	bl	ec20 <_Znaj>
   1c8ac:	4603      	mov	r3, r0
   1c8ae:	461a      	mov	r2, r3
   1c8b0:	687b      	ldr	r3, [r7, #4]
   1c8b2:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c8b4:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c8b8:	60fb      	str	r3, [r7, #12]
   1c8ba:	e00d      	b.n	1c8d8 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1c8bc:	687b      	ldr	r3, [r7, #4]
   1c8be:	685a      	ldr	r2, [r3, #4]
   1c8c0:	68fb      	ldr	r3, [r7, #12]
   1c8c2:	eb02 0103 	add.w	r1, r2, r3
   1c8c6:	68fa      	ldr	r2, [r7, #12]
   1c8c8:	68bb      	ldr	r3, [r7, #8]
   1c8ca:	4413      	add	r3, r2
   1c8cc:	781b      	ldrb	r3, [r3, #0]
   1c8ce:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c8d0:	68fb      	ldr	r3, [r7, #12]
   1c8d2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c8d6:	60fb      	str	r3, [r7, #12]
   1c8d8:	687b      	ldr	r3, [r7, #4]
   1c8da:	689a      	ldr	r2, [r3, #8]
   1c8dc:	68fb      	ldr	r3, [r7, #12]
   1c8de:	429a      	cmp	r2, r3
   1c8e0:	dcec      	bgt.n	1c8bc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c8e2:	68bb      	ldr	r3, [r7, #8]
   1c8e4:	2b00      	cmp	r3, #0
   1c8e6:	d002      	beq.n	1c8ee <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x92>
   1c8e8:	68b8      	ldr	r0, [r7, #8]
   1c8ea:	f7f2 fa1f 	bl	ed2c <_ZdaPv>
        table[size] = value;
   1c8ee:	687b      	ldr	r3, [r7, #4]
   1c8f0:	685a      	ldr	r2, [r3, #4]
   1c8f2:	687b      	ldr	r3, [r7, #4]
   1c8f4:	689b      	ldr	r3, [r3, #8]
   1c8f6:	441a      	add	r2, r3
   1c8f8:	683b      	ldr	r3, [r7, #0]
   1c8fa:	781b      	ldrb	r3, [r3, #0]
   1c8fc:	7013      	strb	r3, [r2, #0]
        size++;
   1c8fe:	687b      	ldr	r3, [r7, #4]
   1c900:	689b      	ldr	r3, [r3, #8]
   1c902:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c906:	687b      	ldr	r3, [r7, #4]
   1c908:	609a      	str	r2, [r3, #8]
    }
}
   1c90a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1c90e:	46bd      	mov	sp, r7
   1c910:	bd80      	pop	{r7, pc}
   1c912:	46c0      	nop			(mov r8, r8)

0001c914 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1c914:	b580      	push	{r7, lr}
   1c916:	b084      	sub	sp, #16
   1c918:	af00      	add	r7, sp, #0
   1c91a:	6078      	str	r0, [r7, #4]
   1c91c:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1c91e:	687b      	ldr	r3, [r7, #4]
   1c920:	689a      	ldr	r2, [r3, #8]
   1c922:	687b      	ldr	r3, [r7, #4]
   1c924:	68db      	ldr	r3, [r3, #12]
   1c926:	429a      	cmp	r2, r3
   1c928:	da18      	bge.n	1c95c <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x48>
    {
        table[size] = value;
   1c92a:	687b      	ldr	r3, [r7, #4]
   1c92c:	6859      	ldr	r1, [r3, #4]
   1c92e:	687b      	ldr	r3, [r7, #4]
   1c930:	689b      	ldr	r3, [r3, #8]
   1c932:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c936:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c93a:	ebc2 0303 	rsb	r3, r2, r3
   1c93e:	440b      	add	r3, r1
   1c940:	683a      	ldr	r2, [r7, #0]
   1c942:	469c      	mov	ip, r3
   1c944:	4613      	mov	r3, r2
   1c946:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c94a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1c94e:	687b      	ldr	r3, [r7, #4]
   1c950:	689b      	ldr	r3, [r3, #8]
   1c952:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c956:	687b      	ldr	r3, [r7, #4]
   1c958:	609a      	str	r2, [r3, #8]
   1c95a:	e05a      	b.n	1ca12 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xfe>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1c95c:	687b      	ldr	r3, [r7, #4]
   1c95e:	685b      	ldr	r3, [r3, #4]
   1c960:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1c962:	687b      	ldr	r3, [r7, #4]
   1c964:	68db      	ldr	r3, [r3, #12]
   1c966:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1c96a:	687b      	ldr	r3, [r7, #4]
   1c96c:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1c96e:	687b      	ldr	r3, [r7, #4]
   1c970:	68db      	ldr	r3, [r3, #12]
   1c972:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c976:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c97a:	ebc2 0303 	rsb	r3, r2, r3
   1c97e:	4618      	mov	r0, r3
   1c980:	f7f2 f94e 	bl	ec20 <_Znaj>
   1c984:	4603      	mov	r3, r0
   1c986:	461a      	mov	r2, r3
   1c988:	687b      	ldr	r3, [r7, #4]
   1c98a:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1c98c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1c990:	60fb      	str	r3, [r7, #12]
   1c992:	e01b      	b.n	1c9cc <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xb8>
            table[i] = oldTable[i];
   1c994:	687b      	ldr	r3, [r7, #4]
   1c996:	6859      	ldr	r1, [r3, #4]
   1c998:	68fb      	ldr	r3, [r7, #12]
   1c99a:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c99e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c9a2:	ebc2 0303 	rsb	r3, r2, r3
   1c9a6:	4419      	add	r1, r3
   1c9a8:	68fb      	ldr	r3, [r7, #12]
   1c9aa:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c9ae:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c9b2:	ebc2 0203 	rsb	r2, r2, r3
   1c9b6:	68bb      	ldr	r3, [r7, #8]
   1c9b8:	4413      	add	r3, r2
   1c9ba:	468c      	mov	ip, r1
   1c9bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1c9c0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1c9c4:	68fb      	ldr	r3, [r7, #12]
   1c9c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1c9ca:	60fb      	str	r3, [r7, #12]
   1c9cc:	687b      	ldr	r3, [r7, #4]
   1c9ce:	689a      	ldr	r2, [r3, #8]
   1c9d0:	68fb      	ldr	r3, [r7, #12]
   1c9d2:	429a      	cmp	r2, r3
   1c9d4:	dcde      	bgt.n	1c994 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x80>
            table[i] = oldTable[i];
        delete[] oldTable;
   1c9d6:	68bb      	ldr	r3, [r7, #8]
   1c9d8:	2b00      	cmp	r3, #0
   1c9da:	d002      	beq.n	1c9e2 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xce>
   1c9dc:	68b8      	ldr	r0, [r7, #8]
   1c9de:	f7f2 f9a5 	bl	ed2c <_ZdaPv>
        table[size] = value;
   1c9e2:	687b      	ldr	r3, [r7, #4]
   1c9e4:	6859      	ldr	r1, [r3, #4]
   1c9e6:	687b      	ldr	r3, [r7, #4]
   1c9e8:	689b      	ldr	r3, [r3, #8]
   1c9ea:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1c9ee:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1c9f2:	ebc2 0303 	rsb	r3, r2, r3
   1c9f6:	440b      	add	r3, r1
   1c9f8:	683a      	ldr	r2, [r7, #0]
   1c9fa:	469c      	mov	ip, r3
   1c9fc:	4613      	mov	r3, r2
   1c9fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1ca02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1ca06:	687b      	ldr	r3, [r7, #4]
   1ca08:	689b      	ldr	r3, [r3, #8]
   1ca0a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1ca0e:	687b      	ldr	r3, [r7, #4]
   1ca10:	609a      	str	r2, [r3, #8]
    }
}
   1ca12:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1ca16:	46bd      	mov	sp, r7
   1ca18:	bd80      	pop	{r7, pc}
   1ca1a:	46c0      	nop			(mov r8, r8)

0001ca1c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1ca1c:	b580      	push	{r7, lr}
   1ca1e:	b084      	sub	sp, #16
   1ca20:	af00      	add	r7, sp, #0
   1ca22:	6078      	str	r0, [r7, #4]
   1ca24:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1ca26:	687b      	ldr	r3, [r7, #4]
   1ca28:	689a      	ldr	r2, [r3, #8]
   1ca2a:	687b      	ldr	r3, [r7, #4]
   1ca2c:	68db      	ldr	r3, [r3, #12]
   1ca2e:	429a      	cmp	r2, r3
   1ca30:	da0e      	bge.n	1ca50 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1ca32:	687b      	ldr	r3, [r7, #4]
   1ca34:	685a      	ldr	r2, [r3, #4]
   1ca36:	687b      	ldr	r3, [r7, #4]
   1ca38:	689b      	ldr	r3, [r3, #8]
   1ca3a:	441a      	add	r2, r3
   1ca3c:	683b      	ldr	r3, [r7, #0]
   1ca3e:	781b      	ldrb	r3, [r3, #0]
   1ca40:	7013      	strb	r3, [r2, #0]
        size++;
   1ca42:	687b      	ldr	r3, [r7, #4]
   1ca44:	689b      	ldr	r3, [r3, #8]
   1ca46:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1ca4a:	687b      	ldr	r3, [r7, #4]
   1ca4c:	609a      	str	r2, [r3, #8]
   1ca4e:	e03c      	b.n	1caca <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1ca50:	687b      	ldr	r3, [r7, #4]
   1ca52:	685b      	ldr	r3, [r3, #4]
   1ca54:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1ca56:	687b      	ldr	r3, [r7, #4]
   1ca58:	68db      	ldr	r3, [r3, #12]
   1ca5a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1ca5e:	687b      	ldr	r3, [r7, #4]
   1ca60:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1ca62:	687b      	ldr	r3, [r7, #4]
   1ca64:	68db      	ldr	r3, [r3, #12]
   1ca66:	4618      	mov	r0, r3
   1ca68:	f7f2 f8da 	bl	ec20 <_Znaj>
   1ca6c:	4603      	mov	r3, r0
   1ca6e:	461a      	mov	r2, r3
   1ca70:	687b      	ldr	r3, [r7, #4]
   1ca72:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1ca74:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ca78:	60fb      	str	r3, [r7, #12]
   1ca7a:	e00d      	b.n	1ca98 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1ca7c:	687b      	ldr	r3, [r7, #4]
   1ca7e:	685a      	ldr	r2, [r3, #4]
   1ca80:	68fb      	ldr	r3, [r7, #12]
   1ca82:	eb02 0103 	add.w	r1, r2, r3
   1ca86:	68fa      	ldr	r2, [r7, #12]
   1ca88:	68bb      	ldr	r3, [r7, #8]
   1ca8a:	4413      	add	r3, r2
   1ca8c:	781b      	ldrb	r3, [r3, #0]
   1ca8e:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1ca90:	68fb      	ldr	r3, [r7, #12]
   1ca92:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1ca96:	60fb      	str	r3, [r7, #12]
   1ca98:	687b      	ldr	r3, [r7, #4]
   1ca9a:	689a      	ldr	r2, [r3, #8]
   1ca9c:	68fb      	ldr	r3, [r7, #12]
   1ca9e:	429a      	cmp	r2, r3
   1caa0:	dcec      	bgt.n	1ca7c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1caa2:	68bb      	ldr	r3, [r7, #8]
   1caa4:	2b00      	cmp	r3, #0
   1caa6:	d002      	beq.n	1caae <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x92>
   1caa8:	68b8      	ldr	r0, [r7, #8]
   1caaa:	f7f2 f93f 	bl	ed2c <_ZdaPv>
        table[size] = value;
   1caae:	687b      	ldr	r3, [r7, #4]
   1cab0:	685a      	ldr	r2, [r3, #4]
   1cab2:	687b      	ldr	r3, [r7, #4]
   1cab4:	689b      	ldr	r3, [r3, #8]
   1cab6:	441a      	add	r2, r3
   1cab8:	683b      	ldr	r3, [r7, #0]
   1caba:	781b      	ldrb	r3, [r3, #0]
   1cabc:	7013      	strb	r3, [r2, #0]
        size++;
   1cabe:	687b      	ldr	r3, [r7, #4]
   1cac0:	689b      	ldr	r3, [r3, #8]
   1cac2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1cac6:	687b      	ldr	r3, [r7, #4]
   1cac8:	609a      	str	r2, [r3, #8]
    }
}
   1caca:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1cace:	46bd      	mov	sp, r7
   1cad0:	bd80      	pop	{r7, pc}
   1cad2:	46c0      	nop			(mov r8, r8)

0001cad4 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1cad4:	b580      	push	{r7, lr}
   1cad6:	b084      	sub	sp, #16
   1cad8:	af00      	add	r7, sp, #0
   1cada:	6078      	str	r0, [r7, #4]
   1cadc:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1cade:	687b      	ldr	r3, [r7, #4]
   1cae0:	689a      	ldr	r2, [r3, #8]
   1cae2:	687b      	ldr	r3, [r7, #4]
   1cae4:	68db      	ldr	r3, [r3, #12]
   1cae6:	429a      	cmp	r2, r3
   1cae8:	da0e      	bge.n	1cb08 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1caea:	687b      	ldr	r3, [r7, #4]
   1caec:	685a      	ldr	r2, [r3, #4]
   1caee:	687b      	ldr	r3, [r7, #4]
   1caf0:	689b      	ldr	r3, [r3, #8]
   1caf2:	441a      	add	r2, r3
   1caf4:	683b      	ldr	r3, [r7, #0]
   1caf6:	781b      	ldrb	r3, [r3, #0]
   1caf8:	7013      	strb	r3, [r2, #0]
        size++;
   1cafa:	687b      	ldr	r3, [r7, #4]
   1cafc:	689b      	ldr	r3, [r3, #8]
   1cafe:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1cb02:	687b      	ldr	r3, [r7, #4]
   1cb04:	609a      	str	r2, [r3, #8]
   1cb06:	e03c      	b.n	1cb82 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1cb08:	687b      	ldr	r3, [r7, #4]
   1cb0a:	685b      	ldr	r3, [r3, #4]
   1cb0c:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1cb0e:	687b      	ldr	r3, [r7, #4]
   1cb10:	68db      	ldr	r3, [r3, #12]
   1cb12:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1cb16:	687b      	ldr	r3, [r7, #4]
   1cb18:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1cb1a:	687b      	ldr	r3, [r7, #4]
   1cb1c:	68db      	ldr	r3, [r3, #12]
   1cb1e:	4618      	mov	r0, r3
   1cb20:	f7f2 f87e 	bl	ec20 <_Znaj>
   1cb24:	4603      	mov	r3, r0
   1cb26:	461a      	mov	r2, r3
   1cb28:	687b      	ldr	r3, [r7, #4]
   1cb2a:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1cb2c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cb30:	60fb      	str	r3, [r7, #12]
   1cb32:	e00d      	b.n	1cb50 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1cb34:	687b      	ldr	r3, [r7, #4]
   1cb36:	685a      	ldr	r2, [r3, #4]
   1cb38:	68fb      	ldr	r3, [r7, #12]
   1cb3a:	eb02 0103 	add.w	r1, r2, r3
   1cb3e:	68fa      	ldr	r2, [r7, #12]
   1cb40:	68bb      	ldr	r3, [r7, #8]
   1cb42:	4413      	add	r3, r2
   1cb44:	781b      	ldrb	r3, [r3, #0]
   1cb46:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1cb48:	68fb      	ldr	r3, [r7, #12]
   1cb4a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1cb4e:	60fb      	str	r3, [r7, #12]
   1cb50:	687b      	ldr	r3, [r7, #4]
   1cb52:	689a      	ldr	r2, [r3, #8]
   1cb54:	68fb      	ldr	r3, [r7, #12]
   1cb56:	429a      	cmp	r2, r3
   1cb58:	dcec      	bgt.n	1cb34 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1cb5a:	68bb      	ldr	r3, [r7, #8]
   1cb5c:	2b00      	cmp	r3, #0
   1cb5e:	d002      	beq.n	1cb66 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x92>
   1cb60:	68b8      	ldr	r0, [r7, #8]
   1cb62:	f7f2 f8e3 	bl	ed2c <_ZdaPv>
        table[size] = value;
   1cb66:	687b      	ldr	r3, [r7, #4]
   1cb68:	685a      	ldr	r2, [r3, #4]
   1cb6a:	687b      	ldr	r3, [r7, #4]
   1cb6c:	689b      	ldr	r3, [r3, #8]
   1cb6e:	441a      	add	r2, r3
   1cb70:	683b      	ldr	r3, [r7, #0]
   1cb72:	781b      	ldrb	r3, [r3, #0]
   1cb74:	7013      	strb	r3, [r2, #0]
        size++;
   1cb76:	687b      	ldr	r3, [r7, #4]
   1cb78:	689b      	ldr	r3, [r3, #8]
   1cb7a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1cb7e:	687b      	ldr	r3, [r7, #4]
   1cb80:	609a      	str	r2, [r3, #8]
    }
}
   1cb82:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1cb86:	46bd      	mov	sp, r7
   1cb88:	bd80      	pop	{r7, pc}
   1cb8a:	46c0      	nop			(mov r8, r8)

0001cb8c <_ZN6vectorIN6Sensor12OutputSensorEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1cb8c:	b580      	push	{r7, lr}
   1cb8e:	b082      	sub	sp, #8
   1cb90:	af00      	add	r7, sp, #0
   1cb92:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1cb94:	687a      	ldr	r2, [r7, #4]
   1cb96:	4b0c      	ldr	r3, [pc, #48]	(1cbc8 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x3c>)
   1cb98:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1cb9a:	687b      	ldr	r3, [r7, #4]
   1cb9c:	685b      	ldr	r3, [r3, #4]
   1cb9e:	2b00      	cmp	r3, #0
   1cba0:	d004      	beq.n	1cbac <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x20>
   1cba2:	687b      	ldr	r3, [r7, #4]
   1cba4:	685b      	ldr	r3, [r3, #4]
   1cba6:	4618      	mov	r0, r3
   1cba8:	f7f2 f8c0 	bl	ed2c <_ZdaPv>
   1cbac:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cbb0:	b2db      	uxtb	r3, r3
   1cbb2:	2b00      	cmp	r3, #0
   1cbb4:	d002      	beq.n	1cbbc <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x30>
   1cbb6:	6878      	ldr	r0, [r7, #4]
   1cbb8:	f7f2 f840 	bl	ec3c <_ZdlPv>
   1cbbc:	687b      	ldr	r3, [r7, #4]
}
   1cbbe:	4618      	mov	r0, r3
   1cbc0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cbc4:	46bd      	mov	sp, r7
   1cbc6:	bd80      	pop	{r7, pc}
   1cbc8:	00022ae0 	.word	0x00022ae0

0001cbcc <_ZN6vectorIN6Sensor12OutputSensorEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1cbcc:	b580      	push	{r7, lr}
   1cbce:	b082      	sub	sp, #8
   1cbd0:	af00      	add	r7, sp, #0
   1cbd2:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1cbd4:	687a      	ldr	r2, [r7, #4]
   1cbd6:	4b0c      	ldr	r3, [pc, #48]	(1cc08 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x3c>)
   1cbd8:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1cbda:	687b      	ldr	r3, [r7, #4]
   1cbdc:	685b      	ldr	r3, [r3, #4]
   1cbde:	2b00      	cmp	r3, #0
   1cbe0:	d004      	beq.n	1cbec <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x20>
   1cbe2:	687b      	ldr	r3, [r7, #4]
   1cbe4:	685b      	ldr	r3, [r3, #4]
   1cbe6:	4618      	mov	r0, r3
   1cbe8:	f7f2 f8a0 	bl	ed2c <_ZdaPv>
   1cbec:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cbf0:	b2db      	uxtb	r3, r3
   1cbf2:	2b00      	cmp	r3, #0
   1cbf4:	d002      	beq.n	1cbfc <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x30>
   1cbf6:	6878      	ldr	r0, [r7, #4]
   1cbf8:	f7f2 f820 	bl	ec3c <_ZdlPv>
   1cbfc:	687b      	ldr	r3, [r7, #4]
}
   1cbfe:	4618      	mov	r0, r3
   1cc00:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cc04:	46bd      	mov	sp, r7
   1cc06:	bd80      	pop	{r7, pc}
   1cc08:	00022ae0 	.word	0x00022ae0

0001cc0c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1cc0c:	b580      	push	{r7, lr}
   1cc0e:	b082      	sub	sp, #8
   1cc10:	af00      	add	r7, sp, #0
   1cc12:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1cc14:	687a      	ldr	r2, [r7, #4]
   1cc16:	4b0c      	ldr	r3, [pc, #48]	(1cc48 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x3c>)
   1cc18:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1cc1a:	687b      	ldr	r3, [r7, #4]
   1cc1c:	685b      	ldr	r3, [r3, #4]
   1cc1e:	2b00      	cmp	r3, #0
   1cc20:	d004      	beq.n	1cc2c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x20>
   1cc22:	687b      	ldr	r3, [r7, #4]
   1cc24:	685b      	ldr	r3, [r3, #4]
   1cc26:	4618      	mov	r0, r3
   1cc28:	f7f2 f880 	bl	ed2c <_ZdaPv>
   1cc2c:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cc30:	b2db      	uxtb	r3, r3
   1cc32:	2b00      	cmp	r3, #0
   1cc34:	d002      	beq.n	1cc3c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x30>
   1cc36:	6878      	ldr	r0, [r7, #4]
   1cc38:	f7f2 f800 	bl	ec3c <_ZdlPv>
   1cc3c:	687b      	ldr	r3, [r7, #4]
}
   1cc3e:	4618      	mov	r0, r3
   1cc40:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cc44:	46bd      	mov	sp, r7
   1cc46:	bd80      	pop	{r7, pc}
   1cc48:	00022af0 	.word	0x00022af0

0001cc4c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1cc4c:	b580      	push	{r7, lr}
   1cc4e:	b082      	sub	sp, #8
   1cc50:	af00      	add	r7, sp, #0
   1cc52:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1cc54:	687a      	ldr	r2, [r7, #4]
   1cc56:	4b0c      	ldr	r3, [pc, #48]	(1cc88 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x3c>)
   1cc58:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1cc5a:	687b      	ldr	r3, [r7, #4]
   1cc5c:	685b      	ldr	r3, [r3, #4]
   1cc5e:	2b00      	cmp	r3, #0
   1cc60:	d004      	beq.n	1cc6c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x20>
   1cc62:	687b      	ldr	r3, [r7, #4]
   1cc64:	685b      	ldr	r3, [r3, #4]
   1cc66:	4618      	mov	r0, r3
   1cc68:	f7f2 f860 	bl	ed2c <_ZdaPv>
   1cc6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cc70:	b2db      	uxtb	r3, r3
   1cc72:	2b00      	cmp	r3, #0
   1cc74:	d002      	beq.n	1cc7c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x30>
   1cc76:	6878      	ldr	r0, [r7, #4]
   1cc78:	f7f1 ffe0 	bl	ec3c <_ZdlPv>
   1cc7c:	687b      	ldr	r3, [r7, #4]
}
   1cc7e:	4618      	mov	r0, r3
   1cc80:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cc84:	46bd      	mov	sp, r7
   1cc86:	bd80      	pop	{r7, pc}
   1cc88:	00022af0 	.word	0x00022af0

0001cc8c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1cc8c:	b580      	push	{r7, lr}
   1cc8e:	b082      	sub	sp, #8
   1cc90:	af00      	add	r7, sp, #0
   1cc92:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1cc94:	687a      	ldr	r2, [r7, #4]
   1cc96:	4b0c      	ldr	r3, [pc, #48]	(1ccc8 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x3c>)
   1cc98:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1cc9a:	687b      	ldr	r3, [r7, #4]
   1cc9c:	685b      	ldr	r3, [r3, #4]
   1cc9e:	2b00      	cmp	r3, #0
   1cca0:	d004      	beq.n	1ccac <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x20>
   1cca2:	687b      	ldr	r3, [r7, #4]
   1cca4:	685b      	ldr	r3, [r3, #4]
   1cca6:	4618      	mov	r0, r3
   1cca8:	f7f2 f840 	bl	ed2c <_ZdaPv>
   1ccac:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ccb0:	b2db      	uxtb	r3, r3
   1ccb2:	2b00      	cmp	r3, #0
   1ccb4:	d002      	beq.n	1ccbc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x30>
   1ccb6:	6878      	ldr	r0, [r7, #4]
   1ccb8:	f7f1 ffc0 	bl	ec3c <_ZdlPv>
   1ccbc:	687b      	ldr	r3, [r7, #4]
}
   1ccbe:	4618      	mov	r0, r3
   1ccc0:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ccc4:	46bd      	mov	sp, r7
   1ccc6:	bd80      	pop	{r7, pc}
   1ccc8:	00022b00 	.word	0x00022b00

0001cccc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1cccc:	b580      	push	{r7, lr}
   1ccce:	b082      	sub	sp, #8
   1ccd0:	af00      	add	r7, sp, #0
   1ccd2:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1ccd4:	687a      	ldr	r2, [r7, #4]
   1ccd6:	4b0c      	ldr	r3, [pc, #48]	(1cd08 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x3c>)
   1ccd8:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1ccda:	687b      	ldr	r3, [r7, #4]
   1ccdc:	685b      	ldr	r3, [r3, #4]
   1ccde:	2b00      	cmp	r3, #0
   1cce0:	d004      	beq.n	1ccec <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x20>
   1cce2:	687b      	ldr	r3, [r7, #4]
   1cce4:	685b      	ldr	r3, [r3, #4]
   1cce6:	4618      	mov	r0, r3
   1cce8:	f7f2 f820 	bl	ed2c <_ZdaPv>
   1ccec:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ccf0:	b2db      	uxtb	r3, r3
   1ccf2:	2b00      	cmp	r3, #0
   1ccf4:	d002      	beq.n	1ccfc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x30>
   1ccf6:	6878      	ldr	r0, [r7, #4]
   1ccf8:	f7f1 ffa0 	bl	ec3c <_ZdlPv>
   1ccfc:	687b      	ldr	r3, [r7, #4]
}
   1ccfe:	4618      	mov	r0, r3
   1cd00:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cd04:	46bd      	mov	sp, r7
   1cd06:	bd80      	pop	{r7, pc}
   1cd08:	00022b00 	.word	0x00022b00

0001cd0c <_ZN18CommandAllerEnArcAD0Ev>:
    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

class CommandAllerEnArcA : public Command
{
   1cd0c:	b580      	push	{r7, lr}
   1cd0e:	b082      	sub	sp, #8
   1cd10:	af00      	add	r7, sp, #0
   1cd12:	6078      	str	r0, [r7, #4]
   1cd14:	687a      	ldr	r2, [r7, #4]
   1cd16:	4b0a      	ldr	r3, [pc, #40]	(1cd40 <_ZN18CommandAllerEnArcAD0Ev+0x34>)
   1cd18:	6013      	str	r3, [r2, #0]
   1cd1a:	687b      	ldr	r3, [r7, #4]
   1cd1c:	4618      	mov	r0, r3
   1cd1e:	f7eb fc27 	bl	8570 <_ZN7CommandD2Ev>
   1cd22:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cd26:	b2db      	uxtb	r3, r3
   1cd28:	2b00      	cmp	r3, #0
   1cd2a:	d002      	beq.n	1cd32 <_ZN18CommandAllerEnArcAD0Ev+0x26>
   1cd2c:	6878      	ldr	r0, [r7, #4]
   1cd2e:	f7f1 ff85 	bl	ec3c <_ZdlPv>
   1cd32:	687b      	ldr	r3, [r7, #4]
   1cd34:	4618      	mov	r0, r3
   1cd36:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cd3a:	46bd      	mov	sp, r7
   1cd3c:	bd80      	pop	{r7, pc}
   1cd3e:	46c0      	nop			(mov r8, r8)
   1cd40:	00022238 	.word	0x00022238

0001cd44 <_ZN18CommandAllerEnArcAD1Ev>:
   1cd44:	b580      	push	{r7, lr}
   1cd46:	b082      	sub	sp, #8
   1cd48:	af00      	add	r7, sp, #0
   1cd4a:	6078      	str	r0, [r7, #4]
   1cd4c:	687a      	ldr	r2, [r7, #4]
   1cd4e:	4b0a      	ldr	r3, [pc, #40]	(1cd78 <_ZN18CommandAllerEnArcAD1Ev+0x34>)
   1cd50:	6013      	str	r3, [r2, #0]
   1cd52:	687b      	ldr	r3, [r7, #4]
   1cd54:	4618      	mov	r0, r3
   1cd56:	f7eb fc0b 	bl	8570 <_ZN7CommandD2Ev>
   1cd5a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cd5e:	b2db      	uxtb	r3, r3
   1cd60:	2b00      	cmp	r3, #0
   1cd62:	d002      	beq.n	1cd6a <_ZN18CommandAllerEnArcAD1Ev+0x26>
   1cd64:	6878      	ldr	r0, [r7, #4]
   1cd66:	f7f1 ff69 	bl	ec3c <_ZdlPv>
   1cd6a:	687b      	ldr	r3, [r7, #4]
   1cd6c:	4618      	mov	r0, r3
   1cd6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cd72:	46bd      	mov	sp, r7
   1cd74:	bd80      	pop	{r7, pc}
   1cd76:	46c0      	nop			(mov r8, r8)
   1cd78:	00022238 	.word	0x00022238

0001cd7c <_ZN13CommandAllerAD0Ev>:
    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

class CommandAllerA : public Command
{
   1cd7c:	b580      	push	{r7, lr}
   1cd7e:	b082      	sub	sp, #8
   1cd80:	af00      	add	r7, sp, #0
   1cd82:	6078      	str	r0, [r7, #4]
   1cd84:	687a      	ldr	r2, [r7, #4]
   1cd86:	4b0a      	ldr	r3, [pc, #40]	(1cdb0 <_ZN13CommandAllerAD0Ev+0x34>)
   1cd88:	6013      	str	r3, [r2, #0]
   1cd8a:	687b      	ldr	r3, [r7, #4]
   1cd8c:	4618      	mov	r0, r3
   1cd8e:	f7eb fbef 	bl	8570 <_ZN7CommandD2Ev>
   1cd92:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cd96:	b2db      	uxtb	r3, r3
   1cd98:	2b00      	cmp	r3, #0
   1cd9a:	d002      	beq.n	1cda2 <_ZN13CommandAllerAD0Ev+0x26>
   1cd9c:	6878      	ldr	r0, [r7, #4]
   1cd9e:	f7f1 ff4d 	bl	ec3c <_ZdlPv>
   1cda2:	687b      	ldr	r3, [r7, #4]
   1cda4:	4618      	mov	r0, r3
   1cda6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cdaa:	46bd      	mov	sp, r7
   1cdac:	bd80      	pop	{r7, pc}
   1cdae:	46c0      	nop			(mov r8, r8)
   1cdb0:	00022210 	.word	0x00022210

0001cdb4 <_ZN13CommandAllerAD1Ev>:
   1cdb4:	b580      	push	{r7, lr}
   1cdb6:	b082      	sub	sp, #8
   1cdb8:	af00      	add	r7, sp, #0
   1cdba:	6078      	str	r0, [r7, #4]
   1cdbc:	687a      	ldr	r2, [r7, #4]
   1cdbe:	4b0a      	ldr	r3, [pc, #40]	(1cde8 <_ZN13CommandAllerAD1Ev+0x34>)
   1cdc0:	6013      	str	r3, [r2, #0]
   1cdc2:	687b      	ldr	r3, [r7, #4]
   1cdc4:	4618      	mov	r0, r3
   1cdc6:	f7eb fbd3 	bl	8570 <_ZN7CommandD2Ev>
   1cdca:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cdce:	b2db      	uxtb	r3, r3
   1cdd0:	2b00      	cmp	r3, #0
   1cdd2:	d002      	beq.n	1cdda <_ZN13CommandAllerAD1Ev+0x26>
   1cdd4:	6878      	ldr	r0, [r7, #4]
   1cdd6:	f7f1 ff31 	bl	ec3c <_ZdlPv>
   1cdda:	687b      	ldr	r3, [r7, #4]
   1cddc:	4618      	mov	r0, r3
   1cdde:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cde2:	46bd      	mov	sp, r7
   1cde4:	bd80      	pop	{r7, pc}
   1cde6:	46c0      	nop			(mov r8, r8)
   1cde8:	00022210 	.word	0x00022210

0001cdec <_ZN18CommandTournerVersD0Ev>:
    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

class CommandTournerVers : public Command
{
   1cdec:	b580      	push	{r7, lr}
   1cdee:	b082      	sub	sp, #8
   1cdf0:	af00      	add	r7, sp, #0
   1cdf2:	6078      	str	r0, [r7, #4]
   1cdf4:	687a      	ldr	r2, [r7, #4]
   1cdf6:	4b0a      	ldr	r3, [pc, #40]	(1ce20 <_ZN18CommandTournerVersD0Ev+0x34>)
   1cdf8:	6013      	str	r3, [r2, #0]
   1cdfa:	687b      	ldr	r3, [r7, #4]
   1cdfc:	4618      	mov	r0, r3
   1cdfe:	f7eb fbb7 	bl	8570 <_ZN7CommandD2Ev>
   1ce02:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ce06:	b2db      	uxtb	r3, r3
   1ce08:	2b00      	cmp	r3, #0
   1ce0a:	d002      	beq.n	1ce12 <_ZN18CommandTournerVersD0Ev+0x26>
   1ce0c:	6878      	ldr	r0, [r7, #4]
   1ce0e:	f7f1 ff15 	bl	ec3c <_ZdlPv>
   1ce12:	687b      	ldr	r3, [r7, #4]
   1ce14:	4618      	mov	r0, r3
   1ce16:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ce1a:	46bd      	mov	sp, r7
   1ce1c:	bd80      	pop	{r7, pc}
   1ce1e:	46c0      	nop			(mov r8, r8)
   1ce20:	000221e8 	.word	0x000221e8

0001ce24 <_ZN18CommandTournerVersD1Ev>:
   1ce24:	b580      	push	{r7, lr}
   1ce26:	b082      	sub	sp, #8
   1ce28:	af00      	add	r7, sp, #0
   1ce2a:	6078      	str	r0, [r7, #4]
   1ce2c:	687a      	ldr	r2, [r7, #4]
   1ce2e:	4b0a      	ldr	r3, [pc, #40]	(1ce58 <_ZN18CommandTournerVersD1Ev+0x34>)
   1ce30:	6013      	str	r3, [r2, #0]
   1ce32:	687b      	ldr	r3, [r7, #4]
   1ce34:	4618      	mov	r0, r3
   1ce36:	f7eb fb9b 	bl	8570 <_ZN7CommandD2Ev>
   1ce3a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ce3e:	b2db      	uxtb	r3, r3
   1ce40:	2b00      	cmp	r3, #0
   1ce42:	d002      	beq.n	1ce4a <_ZN18CommandTournerVersD1Ev+0x26>
   1ce44:	6878      	ldr	r0, [r7, #4]
   1ce46:	f7f1 fef9 	bl	ec3c <_ZdlPv>
   1ce4a:	687b      	ldr	r3, [r7, #4]
   1ce4c:	4618      	mov	r0, r3
   1ce4e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ce52:	46bd      	mov	sp, r7
   1ce54:	bd80      	pop	{r7, pc}
   1ce56:	46c0      	nop			(mov r8, r8)
   1ce58:	000221e8 	.word	0x000221e8

0001ce5c <_ZN13CommandVirageD0Ev>:

// fait un virage d'un certain angle à la vitesse max suivant un certain rayon de courbure
// arrive avec un certaine vitesse de fin
// marche que vers l'avant
class CommandVirage : public Command
{
   1ce5c:	b580      	push	{r7, lr}
   1ce5e:	b082      	sub	sp, #8
   1ce60:	af00      	add	r7, sp, #0
   1ce62:	6078      	str	r0, [r7, #4]
   1ce64:	687a      	ldr	r2, [r7, #4]
   1ce66:	4b0a      	ldr	r3, [pc, #40]	(1ce90 <_ZN13CommandVirageD0Ev+0x34>)
   1ce68:	6013      	str	r3, [r2, #0]
   1ce6a:	687b      	ldr	r3, [r7, #4]
   1ce6c:	4618      	mov	r0, r3
   1ce6e:	f7eb fb7f 	bl	8570 <_ZN7CommandD2Ev>
   1ce72:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ce76:	b2db      	uxtb	r3, r3
   1ce78:	2b00      	cmp	r3, #0
   1ce7a:	d002      	beq.n	1ce82 <_ZN13CommandVirageD0Ev+0x26>
   1ce7c:	6878      	ldr	r0, [r7, #4]
   1ce7e:	f7f1 fedd 	bl	ec3c <_ZdlPv>
   1ce82:	687b      	ldr	r3, [r7, #4]
   1ce84:	4618      	mov	r0, r3
   1ce86:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ce8a:	46bd      	mov	sp, r7
   1ce8c:	bd80      	pop	{r7, pc}
   1ce8e:	46c0      	nop			(mov r8, r8)
   1ce90:	000221c0 	.word	0x000221c0

0001ce94 <_ZN13CommandVirageD1Ev>:
   1ce94:	b580      	push	{r7, lr}
   1ce96:	b082      	sub	sp, #8
   1ce98:	af00      	add	r7, sp, #0
   1ce9a:	6078      	str	r0, [r7, #4]
   1ce9c:	687a      	ldr	r2, [r7, #4]
   1ce9e:	4b0a      	ldr	r3, [pc, #40]	(1cec8 <_ZN13CommandVirageD1Ev+0x34>)
   1cea0:	6013      	str	r3, [r2, #0]
   1cea2:	687b      	ldr	r3, [r7, #4]
   1cea4:	4618      	mov	r0, r3
   1cea6:	f7eb fb63 	bl	8570 <_ZN7CommandD2Ev>
   1ceaa:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ceae:	b2db      	uxtb	r3, r3
   1ceb0:	2b00      	cmp	r3, #0
   1ceb2:	d002      	beq.n	1ceba <_ZN13CommandVirageD1Ev+0x26>
   1ceb4:	6878      	ldr	r0, [r7, #4]
   1ceb6:	f7f1 fec1 	bl	ec3c <_ZdlPv>
   1ceba:	687b      	ldr	r3, [r7, #4]
   1cebc:	4618      	mov	r0, r3
   1cebe:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cec2:	46bd      	mov	sp, r7
   1cec4:	bd80      	pop	{r7, pc}
   1cec6:	46c0      	nop			(mov r8, r8)
   1cec8:	000221c0 	.word	0x000221c0

0001cecc <_ZN15CommandAttendreD0Ev>:
    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

class CommandAttendre : public Command
{
   1cecc:	b580      	push	{r7, lr}
   1cece:	b082      	sub	sp, #8
   1ced0:	af00      	add	r7, sp, #0
   1ced2:	6078      	str	r0, [r7, #4]
   1ced4:	687a      	ldr	r2, [r7, #4]
   1ced6:	4b0a      	ldr	r3, [pc, #40]	(1cf00 <_ZN15CommandAttendreD0Ev+0x34>)
   1ced8:	6013      	str	r3, [r2, #0]
   1ceda:	687b      	ldr	r3, [r7, #4]
   1cedc:	4618      	mov	r0, r3
   1cede:	f7eb fb47 	bl	8570 <_ZN7CommandD2Ev>
   1cee2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cee6:	b2db      	uxtb	r3, r3
   1cee8:	2b00      	cmp	r3, #0
   1ceea:	d002      	beq.n	1cef2 <_ZN15CommandAttendreD0Ev+0x26>
   1ceec:	6878      	ldr	r0, [r7, #4]
   1ceee:	f7f1 fea5 	bl	ec3c <_ZdlPv>
   1cef2:	687b      	ldr	r3, [r7, #4]
   1cef4:	4618      	mov	r0, r3
   1cef6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cefa:	46bd      	mov	sp, r7
   1cefc:	bd80      	pop	{r7, pc}
   1cefe:	46c0      	nop			(mov r8, r8)
   1cf00:	00022198 	.word	0x00022198

0001cf04 <_ZN15CommandAttendreD1Ev>:
   1cf04:	b580      	push	{r7, lr}
   1cf06:	b082      	sub	sp, #8
   1cf08:	af00      	add	r7, sp, #0
   1cf0a:	6078      	str	r0, [r7, #4]
   1cf0c:	687a      	ldr	r2, [r7, #4]
   1cf0e:	4b0a      	ldr	r3, [pc, #40]	(1cf38 <_ZN15CommandAttendreD1Ev+0x34>)
   1cf10:	6013      	str	r3, [r2, #0]
   1cf12:	687b      	ldr	r3, [r7, #4]
   1cf14:	4618      	mov	r0, r3
   1cf16:	f7eb fb2b 	bl	8570 <_ZN7CommandD2Ev>
   1cf1a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cf1e:	b2db      	uxtb	r3, r3
   1cf20:	2b00      	cmp	r3, #0
   1cf22:	d002      	beq.n	1cf2a <_ZN15CommandAttendreD1Ev+0x26>
   1cf24:	6878      	ldr	r0, [r7, #4]
   1cf26:	f7f1 fe89 	bl	ec3c <_ZdlPv>
   1cf2a:	687b      	ldr	r3, [r7, #4]
   1cf2c:	4618      	mov	r0, r3
   1cf2e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cf32:	46bd      	mov	sp, r7
   1cf34:	bd80      	pop	{r7, pc}
   1cf36:	46c0      	nop			(mov r8, r8)
   1cf38:	00022198 	.word	0x00022198

0001cf3c <_ZN18CommandTestAvancerD0Ev>:
    ////////////////////////////////
    //    CommandTestAvancer      //
    ////////////////////////////////

class CommandTestAvancer : public Command
{
   1cf3c:	b580      	push	{r7, lr}
   1cf3e:	b082      	sub	sp, #8
   1cf40:	af00      	add	r7, sp, #0
   1cf42:	6078      	str	r0, [r7, #4]
   1cf44:	687a      	ldr	r2, [r7, #4]
   1cf46:	4b0a      	ldr	r3, [pc, #40]	(1cf70 <_ZN18CommandTestAvancerD0Ev+0x34>)
   1cf48:	6013      	str	r3, [r2, #0]
   1cf4a:	687b      	ldr	r3, [r7, #4]
   1cf4c:	4618      	mov	r0, r3
   1cf4e:	f7eb fb0f 	bl	8570 <_ZN7CommandD2Ev>
   1cf52:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cf56:	b2db      	uxtb	r3, r3
   1cf58:	2b00      	cmp	r3, #0
   1cf5a:	d002      	beq.n	1cf62 <_ZN18CommandTestAvancerD0Ev+0x26>
   1cf5c:	6878      	ldr	r0, [r7, #4]
   1cf5e:	f7f1 fe6d 	bl	ec3c <_ZdlPv>
   1cf62:	687b      	ldr	r3, [r7, #4]
   1cf64:	4618      	mov	r0, r3
   1cf66:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cf6a:	46bd      	mov	sp, r7
   1cf6c:	bd80      	pop	{r7, pc}
   1cf6e:	46c0      	nop			(mov r8, r8)
   1cf70:	00022170 	.word	0x00022170

0001cf74 <_ZN18CommandTestAvancerD1Ev>:
   1cf74:	b580      	push	{r7, lr}
   1cf76:	b082      	sub	sp, #8
   1cf78:	af00      	add	r7, sp, #0
   1cf7a:	6078      	str	r0, [r7, #4]
   1cf7c:	687a      	ldr	r2, [r7, #4]
   1cf7e:	4b0a      	ldr	r3, [pc, #40]	(1cfa8 <_ZN18CommandTestAvancerD1Ev+0x34>)
   1cf80:	6013      	str	r3, [r2, #0]
   1cf82:	687b      	ldr	r3, [r7, #4]
   1cf84:	4618      	mov	r0, r3
   1cf86:	f7eb faf3 	bl	8570 <_ZN7CommandD2Ev>
   1cf8a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cf8e:	b2db      	uxtb	r3, r3
   1cf90:	2b00      	cmp	r3, #0
   1cf92:	d002      	beq.n	1cf9a <_ZN18CommandTestAvancerD1Ev+0x26>
   1cf94:	6878      	ldr	r0, [r7, #4]
   1cf96:	f7f1 fe51 	bl	ec3c <_ZdlPv>
   1cf9a:	687b      	ldr	r3, [r7, #4]
   1cf9c:	4618      	mov	r0, r3
   1cf9e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cfa2:	46bd      	mov	sp, r7
   1cfa4:	bd80      	pop	{r7, pc}
   1cfa6:	46c0      	nop			(mov r8, r8)
   1cfa8:	00022170 	.word	0x00022170

0001cfac <_ZN24CommandTestTournerGaucheD0Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////

class CommandTestTournerGauche : public Command
{
   1cfac:	b580      	push	{r7, lr}
   1cfae:	b082      	sub	sp, #8
   1cfb0:	af00      	add	r7, sp, #0
   1cfb2:	6078      	str	r0, [r7, #4]
   1cfb4:	687a      	ldr	r2, [r7, #4]
   1cfb6:	4b0a      	ldr	r3, [pc, #40]	(1cfe0 <_ZN24CommandTestTournerGaucheD0Ev+0x34>)
   1cfb8:	6013      	str	r3, [r2, #0]
   1cfba:	687b      	ldr	r3, [r7, #4]
   1cfbc:	4618      	mov	r0, r3
   1cfbe:	f7eb fad7 	bl	8570 <_ZN7CommandD2Ev>
   1cfc2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1cfc6:	b2db      	uxtb	r3, r3
   1cfc8:	2b00      	cmp	r3, #0
   1cfca:	d002      	beq.n	1cfd2 <_ZN24CommandTestTournerGaucheD0Ev+0x26>
   1cfcc:	6878      	ldr	r0, [r7, #4]
   1cfce:	f7f1 fe35 	bl	ec3c <_ZdlPv>
   1cfd2:	687b      	ldr	r3, [r7, #4]
   1cfd4:	4618      	mov	r0, r3
   1cfd6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1cfda:	46bd      	mov	sp, r7
   1cfdc:	bd80      	pop	{r7, pc}
   1cfde:	46c0      	nop			(mov r8, r8)
   1cfe0:	00022148 	.word	0x00022148

0001cfe4 <_ZN24CommandTestTournerGaucheD1Ev>:
   1cfe4:	b580      	push	{r7, lr}
   1cfe6:	b082      	sub	sp, #8
   1cfe8:	af00      	add	r7, sp, #0
   1cfea:	6078      	str	r0, [r7, #4]
   1cfec:	687a      	ldr	r2, [r7, #4]
   1cfee:	4b0a      	ldr	r3, [pc, #40]	(1d018 <_ZN24CommandTestTournerGaucheD1Ev+0x34>)
   1cff0:	6013      	str	r3, [r2, #0]
   1cff2:	687b      	ldr	r3, [r7, #4]
   1cff4:	4618      	mov	r0, r3
   1cff6:	f7eb fabb 	bl	8570 <_ZN7CommandD2Ev>
   1cffa:	f04f 0300 	mov.w	r3, #0	; 0x0
   1cffe:	b2db      	uxtb	r3, r3
   1d000:	2b00      	cmp	r3, #0
   1d002:	d002      	beq.n	1d00a <_ZN24CommandTestTournerGaucheD1Ev+0x26>
   1d004:	6878      	ldr	r0, [r7, #4]
   1d006:	f7f1 fe19 	bl	ec3c <_ZdlPv>
   1d00a:	687b      	ldr	r3, [r7, #4]
   1d00c:	4618      	mov	r0, r3
   1d00e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d012:	46bd      	mov	sp, r7
   1d014:	bd80      	pop	{r7, pc}
   1d016:	46c0      	nop			(mov r8, r8)
   1d018:	00022148 	.word	0x00022148

0001d01c <_ZN29CommandCalibrerCapteurCouleurD0Ev>:
        // ou depuis le dernier appel de la selection du capteur
        uint16_t getTickValue();
};

class CommandCalibrerCapteurCouleur : public Command
{
   1d01c:	b580      	push	{r7, lr}
   1d01e:	b082      	sub	sp, #8
   1d020:	af00      	add	r7, sp, #0
   1d022:	6078      	str	r0, [r7, #4]
   1d024:	687a      	ldr	r2, [r7, #4]
   1d026:	4b0a      	ldr	r3, [pc, #40]	(1d050 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x34>)
   1d028:	6013      	str	r3, [r2, #0]
   1d02a:	687b      	ldr	r3, [r7, #4]
   1d02c:	4618      	mov	r0, r3
   1d02e:	f7eb fa9f 	bl	8570 <_ZN7CommandD2Ev>
   1d032:	f04f 0301 	mov.w	r3, #1	; 0x1
   1d036:	b2db      	uxtb	r3, r3
   1d038:	2b00      	cmp	r3, #0
   1d03a:	d002      	beq.n	1d042 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x26>
   1d03c:	6878      	ldr	r0, [r7, #4]
   1d03e:	f7f1 fdfd 	bl	ec3c <_ZdlPv>
   1d042:	687b      	ldr	r3, [r7, #4]
   1d044:	4618      	mov	r0, r3
   1d046:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d04a:	46bd      	mov	sp, r7
   1d04c:	bd80      	pop	{r7, pc}
   1d04e:	46c0      	nop			(mov r8, r8)
   1d050:	000222b8 	.word	0x000222b8

0001d054 <_ZN29CommandCalibrerCapteurCouleurD1Ev>:
   1d054:	b580      	push	{r7, lr}
   1d056:	b082      	sub	sp, #8
   1d058:	af00      	add	r7, sp, #0
   1d05a:	6078      	str	r0, [r7, #4]
   1d05c:	687a      	ldr	r2, [r7, #4]
   1d05e:	4b0a      	ldr	r3, [pc, #40]	(1d088 <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x34>)
   1d060:	6013      	str	r3, [r2, #0]
   1d062:	687b      	ldr	r3, [r7, #4]
   1d064:	4618      	mov	r0, r3
   1d066:	f7eb fa83 	bl	8570 <_ZN7CommandD2Ev>
   1d06a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d06e:	b2db      	uxtb	r3, r3
   1d070:	2b00      	cmp	r3, #0
   1d072:	d002      	beq.n	1d07a <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x26>
   1d074:	6878      	ldr	r0, [r7, #4]
   1d076:	f7f1 fde1 	bl	ec3c <_ZdlPv>
   1d07a:	687b      	ldr	r3, [r7, #4]
   1d07c:	4618      	mov	r0, r3
   1d07e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d082:	46bd      	mov	sp, r7
   1d084:	bd80      	pop	{r7, pc}
   1d086:	46c0      	nop			(mov r8, r8)
   1d088:	000222b8 	.word	0x000222b8

0001d08c <_ZN19CommandCheckCouleurD0Ev>:

        uint16_t resultat;
};

class CommandCheckCouleur : public Command
{
   1d08c:	b580      	push	{r7, lr}
   1d08e:	b082      	sub	sp, #8
   1d090:	af00      	add	r7, sp, #0
   1d092:	6078      	str	r0, [r7, #4]
   1d094:	687a      	ldr	r2, [r7, #4]
   1d096:	4b0a      	ldr	r3, [pc, #40]	(1d0c0 <_ZN19CommandCheckCouleurD0Ev+0x34>)
   1d098:	6013      	str	r3, [r2, #0]
   1d09a:	687b      	ldr	r3, [r7, #4]
   1d09c:	4618      	mov	r0, r3
   1d09e:	f7eb fa67 	bl	8570 <_ZN7CommandD2Ev>
   1d0a2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1d0a6:	b2db      	uxtb	r3, r3
   1d0a8:	2b00      	cmp	r3, #0
   1d0aa:	d002      	beq.n	1d0b2 <_ZN19CommandCheckCouleurD0Ev+0x26>
   1d0ac:	6878      	ldr	r0, [r7, #4]
   1d0ae:	f7f1 fdc5 	bl	ec3c <_ZdlPv>
   1d0b2:	687b      	ldr	r3, [r7, #4]
   1d0b4:	4618      	mov	r0, r3
   1d0b6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d0ba:	46bd      	mov	sp, r7
   1d0bc:	bd80      	pop	{r7, pc}
   1d0be:	46c0      	nop			(mov r8, r8)
   1d0c0:	00022290 	.word	0x00022290

0001d0c4 <_ZN19CommandCheckCouleurD1Ev>:
   1d0c4:	b580      	push	{r7, lr}
   1d0c6:	b082      	sub	sp, #8
   1d0c8:	af00      	add	r7, sp, #0
   1d0ca:	6078      	str	r0, [r7, #4]
   1d0cc:	687a      	ldr	r2, [r7, #4]
   1d0ce:	4b0a      	ldr	r3, [pc, #40]	(1d0f8 <_ZN19CommandCheckCouleurD1Ev+0x34>)
   1d0d0:	6013      	str	r3, [r2, #0]
   1d0d2:	687b      	ldr	r3, [r7, #4]
   1d0d4:	4618      	mov	r0, r3
   1d0d6:	f7eb fa4b 	bl	8570 <_ZN7CommandD2Ev>
   1d0da:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d0de:	b2db      	uxtb	r3, r3
   1d0e0:	2b00      	cmp	r3, #0
   1d0e2:	d002      	beq.n	1d0ea <_ZN19CommandCheckCouleurD1Ev+0x26>
   1d0e4:	6878      	ldr	r0, [r7, #4]
   1d0e6:	f7f1 fda9 	bl	ec3c <_ZdlPv>
   1d0ea:	687b      	ldr	r3, [r7, #4]
   1d0ec:	4618      	mov	r0, r3
   1d0ee:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d0f2:	46bd      	mov	sp, r7
   1d0f4:	bd80      	pop	{r7, pc}
   1d0f6:	46c0      	nop			(mov r8, r8)
   1d0f8:	00022290 	.word	0x00022290

0001d0fc <_ZN11StrategieV3D2Ev>:

#endif*/
//#define ETAPE_GARAGE 1
//#define NOMBRE_ETAPES 10
class StrategieV3 : public MediumLevelAction
{
   1d0fc:	b580      	push	{r7, lr}
   1d0fe:	b082      	sub	sp, #8
   1d100:	af00      	add	r7, sp, #0
   1d102:	6078      	str	r0, [r7, #4]
   1d104:	687a      	ldr	r2, [r7, #4]
   1d106:	4b0a      	ldr	r3, [pc, #40]	(1d130 <_ZN11StrategieV3D2Ev+0x34>)
   1d108:	6013      	str	r3, [r2, #0]
   1d10a:	687b      	ldr	r3, [r7, #4]
   1d10c:	4618      	mov	r0, r3
   1d10e:	f7f8 f915 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   1d112:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d116:	b2db      	uxtb	r3, r3
   1d118:	2b00      	cmp	r3, #0
   1d11a:	d002      	beq.n	1d122 <_ZN11StrategieV3D2Ev+0x26>
   1d11c:	6878      	ldr	r0, [r7, #4]
   1d11e:	f7f1 fd8d 	bl	ec3c <_ZdlPv>
   1d122:	687b      	ldr	r3, [r7, #4]
   1d124:	4618      	mov	r0, r3
   1d126:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d12a:	46bd      	mov	sp, r7
   1d12c:	bd80      	pop	{r7, pc}
   1d12e:	46c0      	nop			(mov r8, r8)
   1d130:	00022490 	.word	0x00022490

0001d134 <_ZN9Krabi2015D0Ev>:
#include "clap.h"
#include "gobelet.h"
#include "tapis.h"

class Krabi2015 : public StrategieV3
{
   1d134:	b580      	push	{r7, lr}
   1d136:	b084      	sub	sp, #16
   1d138:	af00      	add	r7, sp, #0
   1d13a:	60f8      	str	r0, [r7, #12]
   1d13c:	68fa      	ldr	r2, [r7, #12]
   1d13e:	4b31      	ldr	r3, [pc, #196]	(1d204 <_ZN9Krabi2015D0Ev+0xd0>)
   1d140:	6013      	str	r3, [r2, #0]
   1d142:	68fb      	ldr	r3, [r7, #12]
   1d144:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1d148:	2b00      	cmp	r3, #0
   1d14a:	d013      	beq.n	1d174 <_ZN9Krabi2015D0Ev+0x40>
   1d14c:	68fb      	ldr	r3, [r7, #12]
   1d14e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   1d152:	603b      	str	r3, [r7, #0]
   1d154:	68fb      	ldr	r3, [r7, #12]
   1d156:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1d15a:	683a      	ldr	r2, [r7, #0]
   1d15c:	429a      	cmp	r2, r3
   1d15e:	d009      	beq.n	1d174 <_ZN9Krabi2015D0Ev+0x40>
   1d160:	683b      	ldr	r3, [r7, #0]
   1d162:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1d166:	603b      	str	r3, [r7, #0]
   1d168:	683a      	ldr	r2, [r7, #0]
   1d16a:	6813      	ldr	r3, [r2, #0]
   1d16c:	681b      	ldr	r3, [r3, #0]
   1d16e:	6838      	ldr	r0, [r7, #0]
   1d170:	4798      	blx	r3
   1d172:	e7ef      	b.n	1d154 <_ZN9Krabi2015D0Ev+0x20>
   1d174:	68fb      	ldr	r3, [r7, #12]
   1d176:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1d17a:	2b00      	cmp	r3, #0
   1d17c:	d015      	beq.n	1d1aa <_ZN9Krabi2015D0Ev+0x76>
   1d17e:	68fb      	ldr	r3, [r7, #12]
   1d180:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1d184:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1d188:	607b      	str	r3, [r7, #4]
   1d18a:	68fb      	ldr	r3, [r7, #12]
   1d18c:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1d190:	687a      	ldr	r2, [r7, #4]
   1d192:	429a      	cmp	r2, r3
   1d194:	d009      	beq.n	1d1aa <_ZN9Krabi2015D0Ev+0x76>
   1d196:	687b      	ldr	r3, [r7, #4]
   1d198:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1d19c:	607b      	str	r3, [r7, #4]
   1d19e:	687a      	ldr	r2, [r7, #4]
   1d1a0:	6813      	ldr	r3, [r2, #0]
   1d1a2:	681b      	ldr	r3, [r3, #0]
   1d1a4:	6878      	ldr	r0, [r7, #4]
   1d1a6:	4798      	blx	r3
   1d1a8:	e7ef      	b.n	1d18a <_ZN9Krabi2015D0Ev+0x56>
   1d1aa:	68fb      	ldr	r3, [r7, #12]
   1d1ac:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1d1b0:	2b00      	cmp	r3, #0
   1d1b2:	d015      	beq.n	1d1e0 <_ZN9Krabi2015D0Ev+0xac>
   1d1b4:	68fb      	ldr	r3, [r7, #12]
   1d1b6:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1d1ba:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1d1be:	60bb      	str	r3, [r7, #8]
   1d1c0:	68fb      	ldr	r3, [r7, #12]
   1d1c2:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1d1c6:	68ba      	ldr	r2, [r7, #8]
   1d1c8:	429a      	cmp	r2, r3
   1d1ca:	d009      	beq.n	1d1e0 <_ZN9Krabi2015D0Ev+0xac>
   1d1cc:	68bb      	ldr	r3, [r7, #8]
   1d1ce:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1d1d2:	60bb      	str	r3, [r7, #8]
   1d1d4:	68ba      	ldr	r2, [r7, #8]
   1d1d6:	6813      	ldr	r3, [r2, #0]
   1d1d8:	681b      	ldr	r3, [r3, #0]
   1d1da:	68b8      	ldr	r0, [r7, #8]
   1d1dc:	4798      	blx	r3
   1d1de:	e7ef      	b.n	1d1c0 <_ZN9Krabi2015D0Ev+0x8c>
   1d1e0:	68fb      	ldr	r3, [r7, #12]
   1d1e2:	4618      	mov	r0, r3
   1d1e4:	f7ff ff8a 	bl	1d0fc <_ZN11StrategieV3D2Ev>
   1d1e8:	f04f 0301 	mov.w	r3, #1	; 0x1
   1d1ec:	b2db      	uxtb	r3, r3
   1d1ee:	2b00      	cmp	r3, #0
   1d1f0:	d002      	beq.n	1d1f8 <_ZN9Krabi2015D0Ev+0xc4>
   1d1f2:	68f8      	ldr	r0, [r7, #12]
   1d1f4:	f7f1 fd22 	bl	ec3c <_ZdlPv>
   1d1f8:	68fb      	ldr	r3, [r7, #12]
   1d1fa:	4618      	mov	r0, r3
   1d1fc:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1d200:	46bd      	mov	sp, r7
   1d202:	bd80      	pop	{r7, pc}
   1d204:	00022418 	.word	0x00022418

0001d208 <_ZN9Krabi2015D1Ev>:
   1d208:	b580      	push	{r7, lr}
   1d20a:	b084      	sub	sp, #16
   1d20c:	af00      	add	r7, sp, #0
   1d20e:	60f8      	str	r0, [r7, #12]
   1d210:	68fa      	ldr	r2, [r7, #12]
   1d212:	4b31      	ldr	r3, [pc, #196]	(1d2d8 <_ZN9Krabi2015D1Ev+0xd0>)
   1d214:	6013      	str	r3, [r2, #0]
   1d216:	68fb      	ldr	r3, [r7, #12]
   1d218:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1d21c:	2b00      	cmp	r3, #0
   1d21e:	d013      	beq.n	1d248 <_ZN9Krabi2015D1Ev+0x40>
   1d220:	68fb      	ldr	r3, [r7, #12]
   1d222:	f503 73c4 	add.w	r3, r3, #392	; 0x188
   1d226:	603b      	str	r3, [r7, #0]
   1d228:	68fb      	ldr	r3, [r7, #12]
   1d22a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1d22e:	683a      	ldr	r2, [r7, #0]
   1d230:	429a      	cmp	r2, r3
   1d232:	d009      	beq.n	1d248 <_ZN9Krabi2015D1Ev+0x40>
   1d234:	683b      	ldr	r3, [r7, #0]
   1d236:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1d23a:	603b      	str	r3, [r7, #0]
   1d23c:	683a      	ldr	r2, [r7, #0]
   1d23e:	6813      	ldr	r3, [r2, #0]
   1d240:	681b      	ldr	r3, [r3, #0]
   1d242:	6838      	ldr	r0, [r7, #0]
   1d244:	4798      	blx	r3
   1d246:	e7ef      	b.n	1d228 <_ZN9Krabi2015D1Ev+0x20>
   1d248:	68fb      	ldr	r3, [r7, #12]
   1d24a:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1d24e:	2b00      	cmp	r3, #0
   1d250:	d015      	beq.n	1d27e <_ZN9Krabi2015D1Ev+0x76>
   1d252:	68fb      	ldr	r3, [r7, #12]
   1d254:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1d258:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
   1d25c:	607b      	str	r3, [r7, #4]
   1d25e:	68fb      	ldr	r3, [r7, #12]
   1d260:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
   1d264:	687a      	ldr	r2, [r7, #4]
   1d266:	429a      	cmp	r2, r3
   1d268:	d009      	beq.n	1d27e <_ZN9Krabi2015D1Ev+0x76>
   1d26a:	687b      	ldr	r3, [r7, #4]
   1d26c:	f1a3 0320 	sub.w	r3, r3, #32	; 0x20
   1d270:	607b      	str	r3, [r7, #4]
   1d272:	687a      	ldr	r2, [r7, #4]
   1d274:	6813      	ldr	r3, [r2, #0]
   1d276:	681b      	ldr	r3, [r3, #0]
   1d278:	6878      	ldr	r0, [r7, #4]
   1d27a:	4798      	blx	r3
   1d27c:	e7ef      	b.n	1d25e <_ZN9Krabi2015D1Ev+0x56>
   1d27e:	68fb      	ldr	r3, [r7, #12]
   1d280:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1d284:	2b00      	cmp	r3, #0
   1d286:	d015      	beq.n	1d2b4 <_ZN9Krabi2015D1Ev+0xac>
   1d288:	68fb      	ldr	r3, [r7, #12]
   1d28a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1d28e:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1d292:	60bb      	str	r3, [r7, #8]
   1d294:	68fb      	ldr	r3, [r7, #12]
   1d296:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1d29a:	68ba      	ldr	r2, [r7, #8]
   1d29c:	429a      	cmp	r2, r3
   1d29e:	d009      	beq.n	1d2b4 <_ZN9Krabi2015D1Ev+0xac>
   1d2a0:	68bb      	ldr	r3, [r7, #8]
   1d2a2:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1d2a6:	60bb      	str	r3, [r7, #8]
   1d2a8:	68ba      	ldr	r2, [r7, #8]
   1d2aa:	6813      	ldr	r3, [r2, #0]
   1d2ac:	681b      	ldr	r3, [r3, #0]
   1d2ae:	68b8      	ldr	r0, [r7, #8]
   1d2b0:	4798      	blx	r3
   1d2b2:	e7ef      	b.n	1d294 <_ZN9Krabi2015D1Ev+0x8c>
   1d2b4:	68fb      	ldr	r3, [r7, #12]
   1d2b6:	4618      	mov	r0, r3
   1d2b8:	f7ff ff20 	bl	1d0fc <_ZN11StrategieV3D2Ev>
   1d2bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d2c0:	b2db      	uxtb	r3, r3
   1d2c2:	2b00      	cmp	r3, #0
   1d2c4:	d002      	beq.n	1d2cc <_ZN9Krabi2015D1Ev+0xc4>
   1d2c6:	68f8      	ldr	r0, [r7, #12]
   1d2c8:	f7f1 fcb8 	bl	ec3c <_ZdlPv>
   1d2cc:	68fb      	ldr	r3, [r7, #12]
   1d2ce:	4618      	mov	r0, r3
   1d2d0:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1d2d4:	46bd      	mov	sp, r7
   1d2d6:	bd80      	pop	{r7, pc}
   1d2d8:	00022418 	.word	0x00022418

0001d2dc <_ZN17MediumLevelActionaSERKS_>:
#ifndef ROBOTHW
#include <QPainter>;
#endif

class MediumLevelAction
{
   1d2dc:	b580      	push	{r7, lr}
   1d2de:	b082      	sub	sp, #8
   1d2e0:	af00      	add	r7, sp, #0
   1d2e2:	6078      	str	r0, [r7, #4]
   1d2e4:	6039      	str	r1, [r7, #0]
   1d2e6:	687b      	ldr	r3, [r7, #4]
   1d2e8:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1d2ec:	683a      	ldr	r2, [r7, #0]
   1d2ee:	4618      	mov	r0, r3
   1d2f0:	f102 0304 	add.w	r3, r2, #4	; 0x4
   1d2f4:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d2f8:	f7f1 fdf4 	bl	eee4 <_ZN8PositionaSES_>
   1d2fc:	683b      	ldr	r3, [r7, #0]
   1d2fe:	68da      	ldr	r2, [r3, #12]
   1d300:	687b      	ldr	r3, [r7, #4]
   1d302:	60da      	str	r2, [r3, #12]
   1d304:	683b      	ldr	r3, [r7, #0]
   1d306:	7c1b      	ldrb	r3, [r3, #16]
   1d308:	687a      	ldr	r2, [r7, #4]
   1d30a:	7413      	strb	r3, [r2, #16]
   1d30c:	683b      	ldr	r3, [r7, #0]
   1d30e:	695a      	ldr	r2, [r3, #20]
   1d310:	687b      	ldr	r3, [r7, #4]
   1d312:	615a      	str	r2, [r3, #20]
   1d314:	687b      	ldr	r3, [r7, #4]
   1d316:	4618      	mov	r0, r3
   1d318:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d31c:	46bd      	mov	sp, r7
   1d31e:	bd80      	pop	{r7, pc}

0001d320 <_ZN10ActionGoToaSERKS_>:
#include "position.h"
//#include <stdint.h>


class ActionGoTo : public MediumLevelAction
{
   1d320:	b580      	push	{r7, lr}
   1d322:	b082      	sub	sp, #8
   1d324:	af00      	add	r7, sp, #0
   1d326:	6078      	str	r0, [r7, #4]
   1d328:	6039      	str	r1, [r7, #0]
   1d32a:	687b      	ldr	r3, [r7, #4]
   1d32c:	683a      	ldr	r2, [r7, #0]
   1d32e:	4618      	mov	r0, r3
   1d330:	4611      	mov	r1, r2
   1d332:	f7ff ffd3 	bl	1d2dc <_ZN17MediumLevelActionaSERKS_>
   1d336:	683b      	ldr	r3, [r7, #0]
   1d338:	699a      	ldr	r2, [r3, #24]
   1d33a:	687b      	ldr	r3, [r7, #4]
   1d33c:	619a      	str	r2, [r3, #24]
   1d33e:	683b      	ldr	r3, [r7, #0]
   1d340:	7f1b      	ldrb	r3, [r3, #28]
   1d342:	687a      	ldr	r2, [r7, #4]
   1d344:	7713      	strb	r3, [r2, #28]
   1d346:	683b      	ldr	r3, [r7, #0]
   1d348:	6a1a      	ldr	r2, [r3, #32]
   1d34a:	687b      	ldr	r3, [r7, #4]
   1d34c:	621a      	str	r2, [r3, #32]
   1d34e:	683b      	ldr	r3, [r7, #0]
   1d350:	6a5a      	ldr	r2, [r3, #36]
   1d352:	687b      	ldr	r3, [r7, #4]
   1d354:	625a      	str	r2, [r3, #36]
   1d356:	687b      	ldr	r3, [r7, #4]
   1d358:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1d35c:	683a      	ldr	r2, [r7, #0]
   1d35e:	4618      	mov	r0, r3
   1d360:	f102 0328 	add.w	r3, r2, #40	; 0x28
   1d364:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d368:	f7f1 fdbc 	bl	eee4 <_ZN8PositionaSES_>
   1d36c:	687b      	ldr	r3, [r7, #4]
   1d36e:	4618      	mov	r0, r3
   1d370:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d374:	46bd      	mov	sp, r7
   1d376:	bd80      	pop	{r7, pc}

0001d378 <_ZN4ClapaSERKS_>:

/** @class clap : le robot doit fermer 3 claps du bord de la table
*/

class Clap : public MediumLevelAction
{
   1d378:	b580      	push	{r7, lr}
   1d37a:	b082      	sub	sp, #8
   1d37c:	af00      	add	r7, sp, #0
   1d37e:	6078      	str	r0, [r7, #4]
   1d380:	6039      	str	r1, [r7, #0]
   1d382:	687b      	ldr	r3, [r7, #4]
   1d384:	683a      	ldr	r2, [r7, #0]
   1d386:	4618      	mov	r0, r3
   1d388:	4611      	mov	r1, r2
   1d38a:	f7ff ffa7 	bl	1d2dc <_ZN17MediumLevelActionaSERKS_>
   1d38e:	687b      	ldr	r3, [r7, #4]
   1d390:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1d394:	683a      	ldr	r2, [r7, #0]
   1d396:	4618      	mov	r0, r3
   1d398:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1d39c:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d3a0:	f7f1 fda0 	bl	eee4 <_ZN8PositionaSES_>
   1d3a4:	687b      	ldr	r3, [r7, #4]
   1d3a6:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1d3aa:	683a      	ldr	r2, [r7, #0]
   1d3ac:	4618      	mov	r0, r3
   1d3ae:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1d3b2:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d3b6:	f7f1 fd95 	bl	eee4 <_ZN8PositionaSES_>
   1d3ba:	687b      	ldr	r3, [r7, #4]
   1d3bc:	4618      	mov	r0, r3
   1d3be:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d3c2:	46bd      	mov	sp, r7
   1d3c4:	bd80      	pop	{r7, pc}
   1d3c6:	46c0      	nop			(mov r8, r8)

0001d3c8 <_ZN7GobeletaSERKS_>:
#include "position.h"
#include "mediumLevelAction.h"
#include "command.h"

class Gobelet : public MediumLevelAction
{
   1d3c8:	b580      	push	{r7, lr}
   1d3ca:	b082      	sub	sp, #8
   1d3cc:	af00      	add	r7, sp, #0
   1d3ce:	6078      	str	r0, [r7, #4]
   1d3d0:	6039      	str	r1, [r7, #0]
   1d3d2:	687b      	ldr	r3, [r7, #4]
   1d3d4:	683a      	ldr	r2, [r7, #0]
   1d3d6:	4618      	mov	r0, r3
   1d3d8:	4611      	mov	r1, r2
   1d3da:	f7ff ff7f 	bl	1d2dc <_ZN17MediumLevelActionaSERKS_>
   1d3de:	687b      	ldr	r3, [r7, #4]
   1d3e0:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1d3e4:	683a      	ldr	r2, [r7, #0]
   1d3e6:	4618      	mov	r0, r3
   1d3e8:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1d3ec:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d3f0:	f7f1 fd78 	bl	eee4 <_ZN8PositionaSES_>
   1d3f4:	687b      	ldr	r3, [r7, #4]
   1d3f6:	4618      	mov	r0, r3
   1d3f8:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d3fc:	46bd      	mov	sp, r7
   1d3fe:	bd80      	pop	{r7, pc}

0001d400 <_ZN5TapisaSERKS_>:

/** @class Tapis : le robot doit poser 2 tapis sur les marches.
*/

class Tapis : public MediumLevelAction
{
   1d400:	b580      	push	{r7, lr}
   1d402:	b082      	sub	sp, #8
   1d404:	af00      	add	r7, sp, #0
   1d406:	6078      	str	r0, [r7, #4]
   1d408:	6039      	str	r1, [r7, #0]
   1d40a:	687b      	ldr	r3, [r7, #4]
   1d40c:	683a      	ldr	r2, [r7, #0]
   1d40e:	4618      	mov	r0, r3
   1d410:	4611      	mov	r1, r2
   1d412:	f7ff ff63 	bl	1d2dc <_ZN17MediumLevelActionaSERKS_>
   1d416:	687b      	ldr	r3, [r7, #4]
   1d418:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1d41c:	683a      	ldr	r2, [r7, #0]
   1d41e:	4618      	mov	r0, r3
   1d420:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1d424:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d428:	f7f1 fd5c 	bl	eee4 <_ZN8PositionaSES_>
   1d42c:	687b      	ldr	r3, [r7, #4]
   1d42e:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1d432:	683a      	ldr	r2, [r7, #0]
   1d434:	4618      	mov	r0, r3
   1d436:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1d43a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1d43e:	f7f1 fd51 	bl	eee4 <_ZN8PositionaSES_>
   1d442:	687b      	ldr	r3, [r7, #4]
   1d444:	4618      	mov	r0, r3
   1d446:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d44a:	46bd      	mov	sp, r7
   1d44c:	bd80      	pop	{r7, pc}
   1d44e:	46c0      	nop			(mov r8, r8)

0001d450 <_ZN11StrategieV3D0Ev>:
   1d450:	b580      	push	{r7, lr}
   1d452:	b082      	sub	sp, #8
   1d454:	af00      	add	r7, sp, #0
   1d456:	6078      	str	r0, [r7, #4]
   1d458:	687a      	ldr	r2, [r7, #4]
   1d45a:	4b0a      	ldr	r3, [pc, #40]	(1d484 <_ZN11StrategieV3D0Ev+0x34>)
   1d45c:	6013      	str	r3, [r2, #0]
   1d45e:	687b      	ldr	r3, [r7, #4]
   1d460:	4618      	mov	r0, r3
   1d462:	f7f7 ff6b 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   1d466:	f04f 0301 	mov.w	r3, #1	; 0x1
   1d46a:	b2db      	uxtb	r3, r3
   1d46c:	2b00      	cmp	r3, #0
   1d46e:	d002      	beq.n	1d476 <_ZN11StrategieV3D0Ev+0x26>
   1d470:	6878      	ldr	r0, [r7, #4]
   1d472:	f7f1 fbe3 	bl	ec3c <_ZdlPv>
   1d476:	687b      	ldr	r3, [r7, #4]
   1d478:	4618      	mov	r0, r3
   1d47a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d47e:	46bd      	mov	sp, r7
   1d480:	bd80      	pop	{r7, pc}
   1d482:	46c0      	nop			(mov r8, r8)
   1d484:	00022490 	.word	0x00022490

0001d488 <_ZN11StrategieV3D1Ev>:
   1d488:	b580      	push	{r7, lr}
   1d48a:	b082      	sub	sp, #8
   1d48c:	af00      	add	r7, sp, #0
   1d48e:	6078      	str	r0, [r7, #4]
   1d490:	687a      	ldr	r2, [r7, #4]
   1d492:	4b0a      	ldr	r3, [pc, #40]	(1d4bc <_ZN11StrategieV3D1Ev+0x34>)
   1d494:	6013      	str	r3, [r2, #0]
   1d496:	687b      	ldr	r3, [r7, #4]
   1d498:	4618      	mov	r0, r3
   1d49a:	f7f7 ff4f 	bl	1533c <_ZN17MediumLevelActionD2Ev>
   1d49e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1d4a2:	b2db      	uxtb	r3, r3
   1d4a4:	2b00      	cmp	r3, #0
   1d4a6:	d002      	beq.n	1d4ae <_ZN11StrategieV3D1Ev+0x26>
   1d4a8:	6878      	ldr	r0, [r7, #4]
   1d4aa:	f7f1 fbc7 	bl	ec3c <_ZdlPv>
   1d4ae:	687b      	ldr	r3, [r7, #4]
   1d4b0:	4618      	mov	r0, r3
   1d4b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1d4b6:	46bd      	mov	sp, r7
   1d4b8:	bd80      	pop	{r7, pc}
   1d4ba:	46c0      	nop			(mov r8, r8)
   1d4bc:	00022490 	.word	0x00022490

0001d4c0 <__cxa_pure_virtual>:
   1d4c0:	b500      	push	{lr}
   1d4c2:	4904      	ldr	r1, [pc, #16]	(1d4d4 <__cxa_pure_virtual+0x14>)
   1d4c4:	b081      	sub	sp, #4
   1d4c6:	221b      	movs	r2, #27
   1d4c8:	2002      	movs	r0, #2
   1d4ca:	f004 f851 	bl	21570 <write>
   1d4ce:	f000 f821 	bl	1d514 <_ZSt9terminatev>
   1d4d2:	46c0      	nop			(mov r8, r8)
   1d4d4:	00022b08 	.word	0x00022b08

0001d4d8 <_ZSt13set_terminatePFvvE>:
   1d4d8:	4b02      	ldr	r3, [pc, #8]	(1d4e4 <_ZSt13set_terminatePFvvE+0xc>)
   1d4da:	681a      	ldr	r2, [r3, #0]
   1d4dc:	6018      	str	r0, [r3, #0]
   1d4de:	4610      	mov	r0, r2
   1d4e0:	4770      	bx	lr
   1d4e2:	46c0      	nop			(mov r8, r8)
   1d4e4:	20000038 	.word	0x20000038

0001d4e8 <_ZSt14set_unexpectedPFvvE>:
   1d4e8:	4b02      	ldr	r3, [pc, #8]	(1d4f4 <_ZSt14set_unexpectedPFvvE+0xc>)
   1d4ea:	681a      	ldr	r2, [r3, #0]
   1d4ec:	6018      	str	r0, [r3, #0]
   1d4ee:	4610      	mov	r0, r2
   1d4f0:	4770      	bx	lr
   1d4f2:	46c0      	nop			(mov r8, r8)
   1d4f4:	20000034 	.word	0x20000034

0001d4f8 <_ZN10__cxxabiv111__terminateEPFvvE>:
   1d4f8:	b510      	push	{r4, lr}
   1d4fa:	4780      	blx	r0
   1d4fc:	f002 ffa6 	bl	2044c <abort>
   1d500:	f000 ff3c 	bl	1e37c <__cxa_begin_catch>
   1d504:	f002 ffa2 	bl	2044c <abort>
   1d508:	4604      	mov	r4, r0
   1d50a:	f000 feef 	bl	1e2ec <__cxa_end_catch>
   1d50e:	4620      	mov	r0, r4
   1d510:	f7fa fae2 	bl	17ad8 <__cxa_end_cleanup>

0001d514 <_ZSt9terminatev>:
   1d514:	b500      	push	{lr}
   1d516:	4b02      	ldr	r3, [pc, #8]	(1d520 <_ZSt9terminatev+0xc>)
   1d518:	b081      	sub	sp, #4
   1d51a:	6818      	ldr	r0, [r3, #0]
   1d51c:	f7ff ffec 	bl	1d4f8 <_ZN10__cxxabiv111__terminateEPFvvE>
   1d520:	20000038 	.word	0x20000038

0001d524 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1d524:	b500      	push	{lr}
   1d526:	b081      	sub	sp, #4
   1d528:	4780      	blx	r0
   1d52a:	f7ff fff3 	bl	1d514 <_ZSt9terminatev>
   1d52e:	46c0      	nop			(mov r8, r8)

0001d530 <_ZSt10unexpectedv>:
   1d530:	b500      	push	{lr}
   1d532:	4b02      	ldr	r3, [pc, #8]	(1d53c <_ZSt10unexpectedv+0xc>)
   1d534:	b081      	sub	sp, #4
   1d536:	6818      	ldr	r0, [r3, #0]
   1d538:	f7ff fff4 	bl	1d524 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1d53c:	20000034 	.word	0x20000034

0001d540 <__cxa_begin_cleanup>:
   1d540:	b510      	push	{r4, lr}
   1d542:	4604      	mov	r4, r0
   1d544:	f001 f9f0 	bl	1e928 <__cxa_get_globals>
   1d548:	f814 3920 	ldrb.w	r3, [r4], #-32
   1d54c:	2b47      	cmp	r3, #71
   1d54e:	d005      	beq.n	1d55c <__cxa_begin_cleanup+0x1c>
   1d550:	6883      	ldr	r3, [r0, #8]
   1d552:	2b00      	cmp	r3, #0
   1d554:	d127      	bne.n	1d5a6 <__cxa_begin_cleanup+0x66>
   1d556:	6084      	str	r4, [r0, #8]
   1d558:	2001      	movs	r0, #1
   1d55a:	bd10      	pop	{r4, pc}
   1d55c:	f894 3021 	ldrb.w	r3, [r4, #33]
   1d560:	2b4e      	cmp	r3, #78
   1d562:	d1f5      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d564:	f894 3022 	ldrb.w	r3, [r4, #34]
   1d568:	2b55      	cmp	r3, #85
   1d56a:	d1f1      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d56c:	f894 3023 	ldrb.w	r3, [r4, #35]
   1d570:	2b43      	cmp	r3, #67
   1d572:	d1ed      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d574:	f894 3024 	ldrb.w	r3, [r4, #36]
   1d578:	2b43      	cmp	r3, #67
   1d57a:	d1e9      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d57c:	f894 3025 	ldrb.w	r3, [r4, #37]
   1d580:	2b2b      	cmp	r3, #43
   1d582:	d1e5      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d584:	f894 3026 	ldrb.w	r3, [r4, #38]
   1d588:	2b2b      	cmp	r3, #43
   1d58a:	d1e1      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d58c:	f894 3027 	ldrb.w	r3, [r4, #39]
   1d590:	2b00      	cmp	r3, #0
   1d592:	d1dd      	bne.n	1d550 <__cxa_begin_cleanup+0x10>
   1d594:	69e3      	ldr	r3, [r4, #28]
   1d596:	3301      	adds	r3, #1
   1d598:	2b01      	cmp	r3, #1
   1d59a:	61e3      	str	r3, [r4, #28]
   1d59c:	d1dc      	bne.n	1d558 <__cxa_begin_cleanup+0x18>
   1d59e:	6883      	ldr	r3, [r0, #8]
   1d5a0:	61a3      	str	r3, [r4, #24]
   1d5a2:	6084      	str	r4, [r0, #8]
   1d5a4:	e7d8      	b.n	1d558 <__cxa_begin_cleanup+0x18>
   1d5a6:	f7ff ffb5 	bl	1d514 <_ZSt9terminatev>
   1d5aa:	46c0      	nop			(mov r8, r8)

0001d5ac <__cxa_type_match>:
   1d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5ae:	461f      	mov	r7, r3
   1d5b0:	7803      	ldrb	r3, [r0, #0]
   1d5b2:	b083      	sub	sp, #12
   1d5b4:	2b47      	cmp	r3, #71
   1d5b6:	460e      	mov	r6, r1
   1d5b8:	d02c      	beq.n	1d614 <__cxa_type_match+0x68>
   1d5ba:	4d27      	ldr	r5, [pc, #156]	(1d658 <__cxa_type_match+0xac>)
   1d5bc:	683b      	ldr	r3, [r7, #0]
   1d5be:	682a      	ldr	r2, [r5, #0]
   1d5c0:	9301      	str	r3, [sp, #4]
   1d5c2:	4628      	mov	r0, r5
   1d5c4:	6893      	ldr	r3, [r2, #8]
   1d5c6:	4798      	blx	r3
   1d5c8:	b110      	cbz	r0, 1d5d0 <__cxa_type_match+0x24>
   1d5ca:	9b01      	ldr	r3, [sp, #4]
   1d5cc:	681a      	ldr	r2, [r3, #0]
   1d5ce:	9201      	str	r2, [sp, #4]
   1d5d0:	6833      	ldr	r3, [r6, #0]
   1d5d2:	4630      	mov	r0, r6
   1d5d4:	691c      	ldr	r4, [r3, #16]
   1d5d6:	4629      	mov	r1, r5
   1d5d8:	aa01      	add	r2, sp, #4
   1d5da:	2301      	movs	r3, #1
   1d5dc:	47a0      	blx	r4
   1d5de:	b1b8      	cbz	r0, 1d610 <__cxa_type_match+0x64>
   1d5e0:	9b01      	ldr	r3, [sp, #4]
   1d5e2:	6832      	ldr	r2, [r6, #0]
   1d5e4:	603b      	str	r3, [r7, #0]
   1d5e6:	4b1d      	ldr	r3, [pc, #116]	(1d65c <__cxa_type_match+0xb0>)
   1d5e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1d5ec:	681a      	ldr	r2, [r3, #0]
   1d5ee:	f852 1c04 	ldr.w	r1, [r2, #-4]
   1d5f2:	f001 f8e9 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1d5f6:	b150      	cbz	r0, 1d60e <__cxa_type_match+0x62>
   1d5f8:	68f3      	ldr	r3, [r6, #12]
   1d5fa:	2b00      	cmp	r3, #0
   1d5fc:	d02a      	beq.n	1d654 <__cxa_type_match+0xa8>
   1d5fe:	681b      	ldr	r3, [r3, #0]
   1d600:	4917      	ldr	r1, [pc, #92]	(1d660 <__cxa_type_match+0xb4>)
   1d602:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1d606:	f001 f8df 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1d60a:	2800      	cmp	r0, #0
   1d60c:	d01a      	beq.n	1d644 <__cxa_type_match+0x98>
   1d60e:	2001      	movs	r0, #1
   1d610:	b003      	add	sp, #12
   1d612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d614:	7843      	ldrb	r3, [r0, #1]
   1d616:	2b4e      	cmp	r3, #78
   1d618:	d1cf      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d61a:	7883      	ldrb	r3, [r0, #2]
   1d61c:	2b55      	cmp	r3, #85
   1d61e:	d1cc      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d620:	78c3      	ldrb	r3, [r0, #3]
   1d622:	2b43      	cmp	r3, #67
   1d624:	d1c9      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d626:	7903      	ldrb	r3, [r0, #4]
   1d628:	2b43      	cmp	r3, #67
   1d62a:	d1c6      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d62c:	7943      	ldrb	r3, [r0, #5]
   1d62e:	2b2b      	cmp	r3, #43
   1d630:	d1c3      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d632:	7983      	ldrb	r3, [r0, #6]
   1d634:	2b2b      	cmp	r3, #43
   1d636:	d1c0      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d638:	79c3      	ldrb	r3, [r0, #7]
   1d63a:	2b00      	cmp	r3, #0
   1d63c:	d1bd      	bne.n	1d5ba <__cxa_type_match+0xe>
   1d63e:	f850 5c20 	ldr.w	r5, [r0, #-32]
   1d642:	e7bb      	b.n	1d5bc <__cxa_type_match+0x10>
   1d644:	68f0      	ldr	r0, [r6, #12]
   1d646:	68e9      	ldr	r1, [r5, #12]
   1d648:	f001 f8be 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1d64c:	2800      	cmp	r0, #0
   1d64e:	d1de      	bne.n	1d60e <__cxa_type_match+0x62>
   1d650:	3002      	adds	r0, #2
   1d652:	e7dd      	b.n	1d610 <__cxa_type_match+0x64>
   1d654:	f000 fcbc 	bl	1dfd0 <__cxa_bad_typeid>
   1d658:	0002311c 	.word	0x0002311c
   1d65c:	00022f58 	.word	0x00022f58
   1d660:	00022f68 	.word	0x00022f68

0001d664 <__gnu_end_cleanup>:
   1d664:	b500      	push	{lr}
   1d666:	b081      	sub	sp, #4
   1d668:	f001 f95e 	bl	1e928 <__cxa_get_globals>
   1d66c:	4602      	mov	r2, r0
   1d66e:	6880      	ldr	r0, [r0, #8]
   1d670:	2800      	cmp	r0, #0
   1d672:	d02e      	beq.n	1d6d2 <__gnu_end_cleanup+0x6e>
   1d674:	f890 3020 	ldrb.w	r3, [r0, #32]
   1d678:	2b47      	cmp	r3, #71
   1d67a:	d004      	beq.n	1d686 <__gnu_end_cleanup+0x22>
   1d67c:	2300      	movs	r3, #0
   1d67e:	6093      	str	r3, [r2, #8]
   1d680:	3020      	adds	r0, #32
   1d682:	b001      	add	sp, #4
   1d684:	bd00      	pop	{pc}
   1d686:	f890 3021 	ldrb.w	r3, [r0, #33]
   1d68a:	2b4e      	cmp	r3, #78
   1d68c:	d1f6      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d68e:	f890 3022 	ldrb.w	r3, [r0, #34]
   1d692:	2b55      	cmp	r3, #85
   1d694:	d1f2      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d696:	f890 3023 	ldrb.w	r3, [r0, #35]
   1d69a:	2b43      	cmp	r3, #67
   1d69c:	d1ee      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d69e:	f890 3024 	ldrb.w	r3, [r0, #36]
   1d6a2:	2b43      	cmp	r3, #67
   1d6a4:	d1ea      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d6a6:	f890 3025 	ldrb.w	r3, [r0, #37]
   1d6aa:	2b2b      	cmp	r3, #43
   1d6ac:	d1e6      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d6ae:	f890 3026 	ldrb.w	r3, [r0, #38]
   1d6b2:	2b2b      	cmp	r3, #43
   1d6b4:	d1e2      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d6b6:	f890 3027 	ldrb.w	r3, [r0, #39]
   1d6ba:	2b00      	cmp	r3, #0
   1d6bc:	d1de      	bne.n	1d67c <__gnu_end_cleanup+0x18>
   1d6be:	69c3      	ldr	r3, [r0, #28]
   1d6c0:	3b01      	subs	r3, #1
   1d6c2:	61c3      	str	r3, [r0, #28]
   1d6c4:	2b00      	cmp	r3, #0
   1d6c6:	d1db      	bne.n	1d680 <__gnu_end_cleanup+0x1c>
   1d6c8:	6983      	ldr	r3, [r0, #24]
   1d6ca:	6093      	str	r3, [r2, #8]
   1d6cc:	2200      	movs	r2, #0
   1d6ce:	6182      	str	r2, [r0, #24]
   1d6d0:	e7d6      	b.n	1d680 <__gnu_end_cleanup+0x1c>
   1d6d2:	f7ff ff1f 	bl	1d514 <_ZSt9terminatev>
   1d6d6:	46c0      	nop			(mov r8, r8)

0001d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1d6d8:	b500      	push	{lr}
   1d6da:	28ff      	cmp	r0, #255
   1d6dc:	b081      	sub	sp, #4
   1d6de:	d00d      	beq.n	1d6fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d6e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1d6e4:	2820      	cmp	r0, #32
   1d6e6:	d018      	beq.n	1d71a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
   1d6e8:	dd07      	ble.n	1d6fa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
   1d6ea:	2840      	cmp	r0, #64
   1d6ec:	d00d      	beq.n	1d70a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1d6ee:	2850      	cmp	r0, #80
   1d6f0:	d004      	beq.n	1d6fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d6f2:	2830      	cmp	r0, #48
   1d6f4:	d00d      	beq.n	1d712 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   1d6f6:	f002 fea9 	bl	2044c <abort>
   1d6fa:	b910      	cbnz	r0, 1d702 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
   1d6fc:	2000      	movs	r0, #0
   1d6fe:	b001      	add	sp, #4
   1d700:	bd00      	pop	{pc}
   1d702:	2810      	cmp	r0, #16
   1d704:	d0fa      	beq.n	1d6fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1d706:	f002 fea1 	bl	2044c <abort>
   1d70a:	4608      	mov	r0, r1
   1d70c:	f7fe fe46 	bl	1c39c <_Unwind_GetRegionStart>
   1d710:	e7f5      	b.n	1d6fe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1d712:	4608      	mov	r0, r1
   1d714:	f7fe fe1e 	bl	1c354 <_Unwind_GetDataRelBase>
   1d718:	e7f1      	b.n	1d6fe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1d71a:	4608      	mov	r0, r1
   1d71c:	f7fe fe16 	bl	1c34c <_Unwind_GetTextRelBase>
   1d720:	e7ed      	b.n	1d6fe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1d722:	46c0      	nop			(mov r8, r8)

0001d724 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1d724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d728:	4604      	mov	r4, r0
   1d72a:	460e      	mov	r6, r1
   1d72c:	4617      	mov	r7, r2
   1d72e:	b108      	cbz	r0, 1d734 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   1d730:	f7fe fe34 	bl	1c39c <_Unwind_GetRegionStart>
   1d734:	6038      	str	r0, [r7, #0]
   1d736:	4635      	mov	r5, r6
   1d738:	f815 8b01 	ldrb.w	r8, [r5], #1
   1d73c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1d740:	bf08      	it	eq
   1d742:	6078      	streq	r0, [r7, #4]
   1d744:	d03d      	beq.n	1d7c2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1d746:	4640      	mov	r0, r8
   1d748:	4621      	mov	r1, r4
   1d74a:	f7ff ffc5 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d74e:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1d752:	d06d      	beq.n	1d830 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10c>
   1d754:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1d758:	46ae      	mov	lr, r5
   1d75a:	2b0c      	cmp	r3, #12
   1d75c:	f200 808d 	bhi.w	1d87a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x156>
   1d760:	e8df f003 	tbb	[pc, r3]
   1d764:	6d858d6d 	.word	0x6d858d6d
   1d768:	8b8b8b79 	.word	0x8b8b8b79
   1d76c:	6d9f078b 	.word	0x6d9f078b
   1d770:	0079      	.short	0x0079
   1d772:	2400      	movs	r4, #0
   1d774:	1cb1      	adds	r1, r6, #2
   1d776:	46a4      	mov	ip, r4
   1d778:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d77c:	460d      	mov	r5, r1
   1d77e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d782:	fa03 f30c 	lsl.w	r3, r3, ip
   1d786:	3101      	adds	r1, #1
   1d788:	431c      	orrs	r4, r3
   1d78a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d78e:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d792:	d1f1      	bne.n	1d778 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
   1d794:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1d798:	d807      	bhi.n	1d7aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d79a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1d79e:	bf1e      	ittt	ne
   1d7a0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1d7a4:	fa03 f30c 	lslne.w	r3, r3, ip
   1d7a8:	431c      	orrne	r4, r3
   1d7aa:	b14c      	cbz	r4, 1d7c0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9c>
   1d7ac:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1d7b0:	2b10      	cmp	r3, #16
   1d7b2:	bf08      	it	eq
   1d7b4:	4670      	moveq	r0, lr
   1d7b6:	1824      	adds	r4, r4, r0
   1d7b8:	f018 0f80 	tst.w	r8, #128	; 0x80
   1d7bc:	bf18      	it	ne
   1d7be:	6824      	ldrne	r4, [r4, #0]
   1d7c0:	607c      	str	r4, [r7, #4]
   1d7c2:	462c      	mov	r4, r5
   1d7c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   1d7c8:	2bff      	cmp	r3, #255
   1d7ca:	753b      	strb	r3, [r7, #20]
   1d7cc:	d02d      	beq.n	1d82a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x106>
   1d7ce:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1d7d2:	1ca9      	adds	r1, r5, #2
   1d7d4:	4660      	mov	r0, ip
   1d7d6:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d7da:	460c      	mov	r4, r1
   1d7dc:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d7e0:	4083      	lsls	r3, r0
   1d7e2:	3101      	adds	r1, #1
   1d7e4:	3007      	adds	r0, #7
   1d7e6:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d7ea:	ea4c 0c03 	orr.w	ip, ip, r3
   1d7ee:	d1f2      	bne.n	1d7d6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xb2>
   1d7f0:	eb04 030c 	add.w	r3, r4, ip
   1d7f4:	60fb      	str	r3, [r7, #12]
   1d7f6:	4621      	mov	r1, r4
   1d7f8:	f811 3b02 	ldrb.w	r3, [r1], #2
   1d7fc:	2000      	movs	r0, #0
   1d7fe:	757b      	strb	r3, [r7, #21]
   1d800:	4684      	mov	ip, r0
   1d802:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d806:	460c      	mov	r4, r1
   1d808:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d80c:	fa03 f30c 	lsl.w	r3, r3, ip
   1d810:	3101      	adds	r1, #1
   1d812:	4318      	orrs	r0, r3
   1d814:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d818:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d81c:	d1f1      	bne.n	1d802 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xde>
   1d81e:	eb04 0300 	add.w	r3, r4, r0
   1d822:	613b      	str	r3, [r7, #16]
   1d824:	4620      	mov	r0, r4
   1d826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d82a:	2300      	movs	r3, #0
   1d82c:	60fb      	str	r3, [r7, #12]
   1d82e:	e7e2      	b.n	1d7f6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd2>
   1d830:	1d33      	adds	r3, r6, #4
   1d832:	f023 0503 	bic.w	r5, r3, #3	; 0x3
   1d836:	f855 4b04 	ldr.w	r4, [r5], #4
   1d83a:	607c      	str	r4, [r7, #4]
   1d83c:	e7c1      	b.n	1d7c2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1d83e:	786a      	ldrb	r2, [r5, #1]
   1d840:	7873      	ldrb	r3, [r6, #1]
   1d842:	78a9      	ldrb	r1, [r5, #2]
   1d844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d848:	78ea      	ldrb	r2, [r5, #3]
   1d84a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d84e:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1d852:	3504      	adds	r5, #4
   1d854:	e7a9      	b.n	1d7aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d856:	786a      	ldrb	r2, [r5, #1]
   1d858:	7873      	ldrb	r3, [r6, #1]
   1d85a:	78a9      	ldrb	r1, [r5, #2]
   1d85c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d860:	78ea      	ldrb	r2, [r5, #3]
   1d862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d866:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1d86a:	3508      	adds	r5, #8
   1d86c:	e79d      	b.n	1d7aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d86e:	786b      	ldrb	r3, [r5, #1]
   1d870:	7872      	ldrb	r2, [r6, #1]
   1d872:	3502      	adds	r5, #2
   1d874:	ea42 2403 	orr.w	r4, r2, r3, lsl #8
   1d878:	e797      	b.n	1d7aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d87a:	f002 fde7 	bl	2044c <abort>
   1d87e:	2400      	movs	r4, #0
   1d880:	1cb1      	adds	r1, r6, #2
   1d882:	46a4      	mov	ip, r4
   1d884:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1d888:	460d      	mov	r5, r1
   1d88a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1d88e:	fa03 f30c 	lsl.w	r3, r3, ip
   1d892:	3101      	adds	r1, #1
   1d894:	431c      	orrs	r4, r3
   1d896:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d89a:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1d89e:	d1f1      	bne.n	1d884 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x160>
   1d8a0:	e783      	b.n	1d7aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d8a2:	786a      	ldrb	r2, [r5, #1]
   1d8a4:	7873      	ldrb	r3, [r6, #1]
   1d8a6:	3502      	adds	r5, #2
   1d8a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d8ac:	041b      	lsls	r3, r3, #16
   1d8ae:	141c      	asrs	r4, r3, #16
   1d8b0:	e77b      	b.n	1d7aa <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1d8b2:	46c0      	nop			(mov r8, r8)

0001d8b4 <__gxx_personality_v0>:
   1d8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8b8:	f101 0358 	add.w	r3, r1, #88	; 0x58
   1d8bc:	b093      	sub	sp, #76
   1d8be:	9311      	str	r3, [sp, #68]
   1d8c0:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1d8c4:	2b01      	cmp	r3, #1
   1d8c6:	468a      	mov	sl, r1
   1d8c8:	4691      	mov	r9, r2
   1d8ca:	f000 813f 	beq.w	1db4c <__gxx_personality_v0+0x298>
   1d8ce:	2b02      	cmp	r3, #2
   1d8d0:	f000 8132 	beq.w	1db38 <__gxx_personality_v0+0x284>
   1d8d4:	2b00      	cmp	r3, #0
   1d8d6:	d156      	bne.n	1d986 <__gxx_personality_v0+0xd2>
   1d8d8:	f000 0508 	and.w	r5, r0, #8	; 0x8
   1d8dc:	2301      	movs	r3, #1
   1d8de:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1d8e2:	2100      	movs	r1, #0
   1d8e4:	ea45 0303 	orr.w	r3, r5, r3
   1d8e8:	220c      	movs	r2, #12
   1d8ea:	9306      	str	r3, [sp, #24]
   1d8ec:	4648      	mov	r0, r9
   1d8ee:	460b      	mov	r3, r1
   1d8f0:	f8cd a03c 	str.w	sl, [sp, #60]
   1d8f4:	f8cd b000 	str.w	fp, [sp]
   1d8f8:	f7fd ff18 	bl	1b72c <_Unwind_VRS_Set>
   1d8fc:	9a06      	ldr	r2, [sp, #24]
   1d8fe:	2a06      	cmp	r2, #6
   1d900:	f000 8144 	beq.w	1db8c <__gxx_personality_v0+0x2d8>
   1d904:	4648      	mov	r0, r9
   1d906:	f7fe fd3d 	bl	1c384 <_Unwind_GetLanguageSpecificData>
   1d90a:	9004      	str	r0, [sp, #16]
   1d90c:	2800      	cmp	r0, #0
   1d90e:	f000 8113 	beq.w	1db38 <__gxx_personality_v0+0x284>
   1d912:	aa09      	add	r2, sp, #36
   1d914:	9904      	ldr	r1, [sp, #16]
   1d916:	4648      	mov	r0, r9
   1d918:	f7ff ff04 	bl	1d724 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1d91c:	4649      	mov	r1, r9
   1d91e:	4604      	mov	r4, r0
   1d920:	f89d 0038 	ldrb.w	r0, [sp, #56]
   1d924:	f7ff fed8 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d928:	2100      	movs	r1, #0
   1d92a:	900b      	str	r0, [sp, #44]
   1d92c:	460b      	mov	r3, r1
   1d92e:	4648      	mov	r0, r9
   1d930:	220f      	movs	r2, #15
   1d932:	f8cd b000 	str.w	fp, [sp]
   1d936:	f7fd fed1 	bl	1b6dc <_Unwind_VRS_Get>
   1d93a:	9b0f      	ldr	r3, [sp, #60]
   1d93c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1d940:	3b01      	subs	r3, #1
   1d942:	9307      	str	r3, [sp, #28]
   1d944:	9b0d      	ldr	r3, [sp, #52]
   1d946:	429c      	cmp	r4, r3
   1d948:	f080 8230 	bcs.w	1ddac <__gxx_personality_v0+0x4f8>
   1d94c:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d950:	2100      	movs	r1, #0
   1d952:	4628      	mov	r0, r5
   1d954:	f7ff fec0 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d958:	2d50      	cmp	r5, #80
   1d95a:	f000 80cb 	beq.w	1daf4 <__gxx_personality_v0+0x240>
   1d95e:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1d962:	46a4      	mov	ip, r4
   1d964:	2b0c      	cmp	r3, #12
   1d966:	d80e      	bhi.n	1d986 <__gxx_personality_v0+0xd2>
   1d968:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d96c:	017e000f 	.word	0x017e000f
   1d970:	000f018b 	.word	0x000f018b
   1d974:	000d0158 	.word	0x000d0158
   1d978:	000d000d 	.word	0x000d000d
   1d97c:	0199000d 	.word	0x0199000d
   1d980:	000f0191 	.word	0x000f0191
   1d984:	0158      	.short	0x0158
   1d986:	f002 fd61 	bl	2044c <abort>
   1d98a:	7862      	ldrb	r2, [r4, #1]
   1d98c:	7823      	ldrb	r3, [r4, #0]
   1d98e:	78a1      	ldrb	r1, [r4, #2]
   1d990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d994:	78e2      	ldrb	r2, [r4, #3]
   1d996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d99a:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1d99e:	3404      	adds	r4, #4
   1d9a0:	b14f      	cbz	r7, 1d9b6 <__gxx_personality_v0+0x102>
   1d9a2:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1d9a6:	2b10      	cmp	r3, #16
   1d9a8:	bf08      	it	eq
   1d9aa:	4660      	moveq	r0, ip
   1d9ac:	183f      	adds	r7, r7, r0
   1d9ae:	f015 0f80 	tst.w	r5, #128	; 0x80
   1d9b2:	bf18      	it	ne
   1d9b4:	683f      	ldrne	r7, [r7, #0]
   1d9b6:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1d9ba:	2100      	movs	r1, #0
   1d9bc:	4628      	mov	r0, r5
   1d9be:	f7ff fe8b 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1d9c2:	2d50      	cmp	r5, #80
   1d9c4:	f000 80a4 	beq.w	1db10 <__gxx_personality_v0+0x25c>
   1d9c8:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1d9cc:	46a4      	mov	ip, r4
   1d9ce:	2b0c      	cmp	r3, #12
   1d9d0:	d8d9      	bhi.n	1d986 <__gxx_personality_v0+0xd2>
   1d9d2:	a201      	add	r2, pc, #4	(adr r2, 1d9d8 <__gxx_personality_v0+0x124>)
   1d9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d9d8:	0001da0d 	.word	0x0001da0d
   1d9dc:	0001dce1 	.word	0x0001dce1
   1d9e0:	0001dcd5 	.word	0x0001dcd5
   1d9e4:	0001da0d 	.word	0x0001da0d
   1d9e8:	0001dc39 	.word	0x0001dc39
   1d9ec:	0001d987 	.word	0x0001d987
   1d9f0:	0001d987 	.word	0x0001d987
   1d9f4:	0001d987 	.word	0x0001d987
   1d9f8:	0001d987 	.word	0x0001d987
   1d9fc:	0001dd0b 	.word	0x0001dd0b
   1da00:	0001dcfb 	.word	0x0001dcfb
   1da04:	0001da0d 	.word	0x0001da0d
   1da08:	0001dc39 	.word	0x0001dc39
   1da0c:	7862      	ldrb	r2, [r4, #1]
   1da0e:	7823      	ldrb	r3, [r4, #0]
   1da10:	78a1      	ldrb	r1, [r4, #2]
   1da12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1da16:	78e2      	ldrb	r2, [r4, #3]
   1da18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1da1c:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1da20:	3404      	adds	r4, #4
   1da22:	b14e      	cbz	r6, 1da38 <__gxx_personality_v0+0x184>
   1da24:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1da28:	2b10      	cmp	r3, #16
   1da2a:	bf08      	it	eq
   1da2c:	4660      	moveq	r0, ip
   1da2e:	1836      	adds	r6, r6, r0
   1da30:	f015 0f80 	tst.w	r5, #128	; 0x80
   1da34:	bf18      	it	ne
   1da36:	6836      	ldrne	r6, [r6, #0]
   1da38:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1da3c:	2100      	movs	r1, #0
   1da3e:	4640      	mov	r0, r8
   1da40:	f7ff fe4a 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1da44:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1da48:	d070      	beq.n	1db2c <__gxx_personality_v0+0x278>
   1da4a:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1da4e:	46a4      	mov	ip, r4
   1da50:	2b0c      	cmp	r3, #12
   1da52:	d898      	bhi.n	1d986 <__gxx_personality_v0+0xd2>
   1da54:	a201      	add	r2, pc, #4	(adr r2, 1da5c <__gxx_personality_v0+0x1a8>)
   1da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1da5a:	46c0      	nop			(mov r8, r8)
   1da5c:	0001da91 	.word	0x0001da91
   1da60:	0001dd4d 	.word	0x0001dd4d
   1da64:	0001dd41 	.word	0x0001dd41
   1da68:	0001da91 	.word	0x0001da91
   1da6c:	0001dc51 	.word	0x0001dc51
   1da70:	0001d987 	.word	0x0001d987
   1da74:	0001d987 	.word	0x0001d987
   1da78:	0001d987 	.word	0x0001d987
   1da7c:	0001d987 	.word	0x0001d987
   1da80:	0001dd77 	.word	0x0001dd77
   1da84:	0001dd67 	.word	0x0001dd67
   1da88:	0001da91 	.word	0x0001da91
   1da8c:	0001dc51 	.word	0x0001dc51
   1da90:	7862      	ldrb	r2, [r4, #1]
   1da92:	7823      	ldrb	r3, [r4, #0]
   1da94:	78a1      	ldrb	r1, [r4, #2]
   1da96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1da9a:	78e2      	ldrb	r2, [r4, #3]
   1da9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1daa0:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1daa4:	3404      	adds	r4, #4
   1daa6:	b14d      	cbz	r5, 1dabc <__gxx_personality_v0+0x208>
   1daa8:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1daac:	2b10      	cmp	r3, #16
   1daae:	bf08      	it	eq
   1dab0:	4660      	moveq	r0, ip
   1dab2:	182d      	adds	r5, r5, r0
   1dab4:	f018 0f80 	tst.w	r8, #128	; 0x80
   1dab8:	bf18      	it	ne
   1daba:	682d      	ldrne	r5, [r5, #0]
   1dabc:	2000      	movs	r0, #0
   1dabe:	4601      	mov	r1, r0
   1dac0:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dac4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dac8:	408b      	lsls	r3, r1
   1daca:	3107      	adds	r1, #7
   1dacc:	4318      	orrs	r0, r3
   1dace:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dad2:	d1f5      	bne.n	1dac0 <__gxx_personality_v0+0x20c>
   1dad4:	9b09      	ldr	r3, [sp, #36]
   1dad6:	9a07      	ldr	r2, [sp, #28]
   1dad8:	443b      	add	r3, r7
   1dada:	429a      	cmp	r2, r3
   1dadc:	bf3c      	itt	cc
   1dade:	9c0d      	ldrcc	r4, [sp, #52]
   1dae0:	4623      	movcc	r3, r4
   1dae2:	f4ff af30 	bcc.w	1d946 <__gxx_personality_v0+0x92>
   1dae6:	9a07      	ldr	r2, [sp, #28]
   1dae8:	4433      	add	r3, r6
   1daea:	429a      	cmp	r2, r3
   1daec:	f0c0 8189 	bcc.w	1de02 <__gxx_personality_v0+0x54e>
   1daf0:	9b0d      	ldr	r3, [sp, #52]
   1daf2:	e728      	b.n	1d946 <__gxx_personality_v0+0x92>
   1daf4:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1daf8:	1ce3      	adds	r3, r4, #3
   1dafa:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1dafe:	2100      	movs	r1, #0
   1db00:	4628      	mov	r0, r5
   1db02:	f854 7b04 	ldr.w	r7, [r4], #4
   1db06:	f7ff fde7 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1db0a:	2d50      	cmp	r5, #80
   1db0c:	f47f af5c 	bne.w	1d9c8 <__gxx_personality_v0+0x114>
   1db10:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1db14:	1ce3      	adds	r3, r4, #3
   1db16:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1db1a:	2100      	movs	r1, #0
   1db1c:	4640      	mov	r0, r8
   1db1e:	f854 6b04 	ldr.w	r6, [r4], #4
   1db22:	f7ff fdd9 	bl	1d6d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1db26:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1db2a:	d18e      	bne.n	1da4a <__gxx_personality_v0+0x196>
   1db2c:	1ce3      	adds	r3, r4, #3
   1db2e:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1db32:	f854 5b04 	ldr.w	r5, [r4], #4
   1db36:	e7c1      	b.n	1dabc <__gxx_personality_v0+0x208>
   1db38:	4650      	mov	r0, sl
   1db3a:	4649      	mov	r1, r9
   1db3c:	f7fe fdb6 	bl	1c6ac <__gnu_unwind_frame>
   1db40:	2800      	cmp	r0, #0
   1db42:	d077      	beq.n	1dc34 <__gxx_personality_v0+0x380>
   1db44:	2009      	movs	r0, #9
   1db46:	b013      	add	sp, #76
   1db48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db4c:	f010 0508 	ands.w	r5, r0, #8	; 0x8
   1db50:	bf18      	it	ne
   1db52:	f10d 0b3c 	addne.w	fp, sp, #60	; 0x3c
   1db56:	d15f      	bne.n	1dc18 <__gxx_personality_v0+0x364>
   1db58:	6a0c      	ldr	r4, [r1, #32]
   1db5a:	4610      	mov	r0, r2
   1db5c:	462b      	mov	r3, r5
   1db5e:	220d      	movs	r2, #13
   1db60:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1db64:	4629      	mov	r1, r5
   1db66:	f8cd b000 	str.w	fp, [sp]
   1db6a:	f7fd fdb7 	bl	1b6dc <_Unwind_VRS_Get>
   1db6e:	9b0f      	ldr	r3, [sp, #60]
   1db70:	429c      	cmp	r4, r3
   1db72:	d151      	bne.n	1dc18 <__gxx_personality_v0+0x364>
   1db74:	462b      	mov	r3, r5
   1db76:	4648      	mov	r0, r9
   1db78:	4629      	mov	r1, r5
   1db7a:	220c      	movs	r2, #12
   1db7c:	f8cd a03c 	str.w	sl, [sp, #60]
   1db80:	f8cd b000 	str.w	fp, [sp]
   1db84:	f7fd fdd2 	bl	1b72c <_Unwind_VRS_Set>
   1db88:	2306      	movs	r3, #6
   1db8a:	9306      	str	r3, [sp, #24]
   1db8c:	f8da 8030 	ldr.w	r8, [sl, #48]
   1db90:	f8da 1028 	ldr.w	r1, [sl, #40]
   1db94:	f8da 002c 	ldr.w	r0, [sl, #44]
   1db98:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1db9c:	f000 8129 	beq.w	1ddf2 <__gxx_personality_v0+0x53e>
   1dba0:	460f      	mov	r7, r1
   1dba2:	9004      	str	r0, [sp, #16]
   1dba4:	2403      	movs	r4, #3
   1dba6:	9b06      	ldr	r3, [sp, #24]
   1dba8:	f013 0508 	ands.w	r5, r3, #8	; 0x8
   1dbac:	f000 81df 	beq.w	1df6e <__gxx_personality_v0+0x6ba>
   1dbb0:	2c01      	cmp	r4, #1
   1dbb2:	f000 81da 	beq.w	1df6a <__gxx_personality_v0+0x6b6>
   1dbb6:	2f00      	cmp	r7, #0
   1dbb8:	f2c0 81d5 	blt.w	1df66 <__gxx_personality_v0+0x6b2>
   1dbbc:	2100      	movs	r1, #0
   1dbbe:	460a      	mov	r2, r1
   1dbc0:	460b      	mov	r3, r1
   1dbc2:	4648      	mov	r0, r9
   1dbc4:	f8cd a03c 	str.w	sl, [sp, #60]
   1dbc8:	f8cd b000 	str.w	fp, [sp]
   1dbcc:	f7fd fdae 	bl	1b72c <_Unwind_VRS_Set>
   1dbd0:	2100      	movs	r1, #0
   1dbd2:	2201      	movs	r2, #1
   1dbd4:	460b      	mov	r3, r1
   1dbd6:	4648      	mov	r0, r9
   1dbd8:	970f      	str	r7, [sp, #60]
   1dbda:	f8cd b000 	str.w	fp, [sp]
   1dbde:	f7fd fda5 	bl	1b72c <_Unwind_VRS_Set>
   1dbe2:	2100      	movs	r1, #0
   1dbe4:	220f      	movs	r2, #15
   1dbe6:	460b      	mov	r3, r1
   1dbe8:	4648      	mov	r0, r9
   1dbea:	f8cd b000 	str.w	fp, [sp]
   1dbee:	f7fd fd75 	bl	1b6dc <_Unwind_VRS_Get>
   1dbf2:	9b0f      	ldr	r3, [sp, #60]
   1dbf4:	2100      	movs	r1, #0
   1dbf6:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1dbfa:	ea48 0303 	orr.w	r3, r8, r3
   1dbfe:	930f      	str	r3, [sp, #60]
   1dc00:	220f      	movs	r2, #15
   1dc02:	4648      	mov	r0, r9
   1dc04:	460b      	mov	r3, r1
   1dc06:	f8cd b000 	str.w	fp, [sp]
   1dc0a:	f7fd fd8f 	bl	1b72c <_Unwind_VRS_Set>
   1dc0e:	2c02      	cmp	r4, #2
   1dc10:	f000 80f2 	beq.w	1ddf8 <__gxx_personality_v0+0x544>
   1dc14:	2007      	movs	r0, #7
   1dc16:	e796      	b.n	1db46 <__gxx_personality_v0+0x292>
   1dc18:	2302      	movs	r3, #2
   1dc1a:	e662      	b.n	1d8e2 <__gxx_personality_v0+0x2e>
   1dc1c:	7862      	ldrb	r2, [r4, #1]
   1dc1e:	7823      	ldrb	r3, [r4, #0]
   1dc20:	78a1      	ldrb	r1, [r4, #2]
   1dc22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dc26:	78e2      	ldrb	r2, [r4, #3]
   1dc28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dc2c:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1dc30:	3408      	adds	r4, #8
   1dc32:	e6b5      	b.n	1d9a0 <__gxx_personality_v0+0xec>
   1dc34:	2008      	movs	r0, #8
   1dc36:	e786      	b.n	1db46 <__gxx_personality_v0+0x292>
   1dc38:	7862      	ldrb	r2, [r4, #1]
   1dc3a:	7823      	ldrb	r3, [r4, #0]
   1dc3c:	78a1      	ldrb	r1, [r4, #2]
   1dc3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dc42:	78e2      	ldrb	r2, [r4, #3]
   1dc44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dc48:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1dc4c:	3408      	adds	r4, #8
   1dc4e:	e6e8      	b.n	1da22 <__gxx_personality_v0+0x16e>
   1dc50:	7862      	ldrb	r2, [r4, #1]
   1dc52:	7823      	ldrb	r3, [r4, #0]
   1dc54:	78a1      	ldrb	r1, [r4, #2]
   1dc56:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dc5a:	78e2      	ldrb	r2, [r4, #3]
   1dc5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dc60:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1dc64:	3408      	adds	r4, #8
   1dc66:	e71e      	b.n	1daa6 <__gxx_personality_v0+0x1f2>
   1dc68:	2700      	movs	r7, #0
   1dc6a:	4639      	mov	r1, r7
   1dc6c:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dc70:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dc74:	408b      	lsls	r3, r1
   1dc76:	3107      	adds	r1, #7
   1dc78:	431f      	orrs	r7, r3
   1dc7a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dc7e:	d1f5      	bne.n	1dc6c <__gxx_personality_v0+0x3b8>
   1dc80:	e68e      	b.n	1d9a0 <__gxx_personality_v0+0xec>
   1dc82:	7822      	ldrb	r2, [r4, #0]
   1dc84:	7863      	ldrb	r3, [r4, #1]
   1dc86:	3402      	adds	r4, #2
   1dc88:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1dc8c:	e688      	b.n	1d9a0 <__gxx_personality_v0+0xec>
   1dc8e:	7823      	ldrb	r3, [r4, #0]
   1dc90:	7862      	ldrb	r2, [r4, #1]
   1dc92:	3402      	adds	r4, #2
   1dc94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dc98:	041b      	lsls	r3, r3, #16
   1dc9a:	141f      	asrs	r7, r3, #16
   1dc9c:	e680      	b.n	1d9a0 <__gxx_personality_v0+0xec>
   1dc9e:	2700      	movs	r7, #0
   1dca0:	4639      	mov	r1, r7
   1dca2:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dca6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dcaa:	408b      	lsls	r3, r1
   1dcac:	3107      	adds	r1, #7
   1dcae:	431f      	orrs	r7, r3
   1dcb0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dcb4:	d1f5      	bne.n	1dca2 <__gxx_personality_v0+0x3ee>
   1dcb6:	291f      	cmp	r1, #31
   1dcb8:	f63f ae72 	bhi.w	1d9a0 <__gxx_personality_v0+0xec>
   1dcbc:	f012 0f40 	tst.w	r2, #64	; 0x40
   1dcc0:	f43f ae6e 	beq.w	1d9a0 <__gxx_personality_v0+0xec>
   1dcc4:	2201      	movs	r2, #1
   1dcc6:	fa12 f301 	lsls.w	r3, r2, r1
   1dcca:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1dcce:	ea43 0707 	orr.w	r7, r3, r7
   1dcd2:	e665      	b.n	1d9a0 <__gxx_personality_v0+0xec>
   1dcd4:	7822      	ldrb	r2, [r4, #0]
   1dcd6:	7863      	ldrb	r3, [r4, #1]
   1dcd8:	3402      	adds	r4, #2
   1dcda:	ea42 2603 	orr.w	r6, r2, r3, lsl #8
   1dcde:	e6a0      	b.n	1da22 <__gxx_personality_v0+0x16e>
   1dce0:	2600      	movs	r6, #0
   1dce2:	4631      	mov	r1, r6
   1dce4:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dce8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dcec:	408b      	lsls	r3, r1
   1dcee:	3107      	adds	r1, #7
   1dcf0:	431e      	orrs	r6, r3
   1dcf2:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dcf6:	d1f5      	bne.n	1dce4 <__gxx_personality_v0+0x430>
   1dcf8:	e693      	b.n	1da22 <__gxx_personality_v0+0x16e>
   1dcfa:	7823      	ldrb	r3, [r4, #0]
   1dcfc:	7862      	ldrb	r2, [r4, #1]
   1dcfe:	3402      	adds	r4, #2
   1dd00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dd04:	041b      	lsls	r3, r3, #16
   1dd06:	141e      	asrs	r6, r3, #16
   1dd08:	e68b      	b.n	1da22 <__gxx_personality_v0+0x16e>
   1dd0a:	2600      	movs	r6, #0
   1dd0c:	4631      	mov	r1, r6
   1dd0e:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dd12:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dd16:	408b      	lsls	r3, r1
   1dd18:	3107      	adds	r1, #7
   1dd1a:	431e      	orrs	r6, r3
   1dd1c:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dd20:	d1f5      	bne.n	1dd0e <__gxx_personality_v0+0x45a>
   1dd22:	291f      	cmp	r1, #31
   1dd24:	f63f ae7d 	bhi.w	1da22 <__gxx_personality_v0+0x16e>
   1dd28:	f012 0f40 	tst.w	r2, #64	; 0x40
   1dd2c:	f43f ae79 	beq.w	1da22 <__gxx_personality_v0+0x16e>
   1dd30:	2201      	movs	r2, #1
   1dd32:	fa12 f301 	lsls.w	r3, r2, r1
   1dd36:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1dd3a:	ea43 0606 	orr.w	r6, r3, r6
   1dd3e:	e670      	b.n	1da22 <__gxx_personality_v0+0x16e>
   1dd40:	7822      	ldrb	r2, [r4, #0]
   1dd42:	7863      	ldrb	r3, [r4, #1]
   1dd44:	3402      	adds	r4, #2
   1dd46:	ea42 2503 	orr.w	r5, r2, r3, lsl #8
   1dd4a:	e6ac      	b.n	1daa6 <__gxx_personality_v0+0x1f2>
   1dd4c:	2500      	movs	r5, #0
   1dd4e:	4629      	mov	r1, r5
   1dd50:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dd54:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dd58:	408b      	lsls	r3, r1
   1dd5a:	3107      	adds	r1, #7
   1dd5c:	431d      	orrs	r5, r3
   1dd5e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dd62:	d1f5      	bne.n	1dd50 <__gxx_personality_v0+0x49c>
   1dd64:	e69f      	b.n	1daa6 <__gxx_personality_v0+0x1f2>
   1dd66:	7823      	ldrb	r3, [r4, #0]
   1dd68:	7862      	ldrb	r2, [r4, #1]
   1dd6a:	3402      	adds	r4, #2
   1dd6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dd70:	041b      	lsls	r3, r3, #16
   1dd72:	141d      	asrs	r5, r3, #16
   1dd74:	e697      	b.n	1daa6 <__gxx_personality_v0+0x1f2>
   1dd76:	2500      	movs	r5, #0
   1dd78:	4629      	mov	r1, r5
   1dd7a:	f814 2b01 	ldrb.w	r2, [r4], #1
   1dd7e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1dd82:	408b      	lsls	r3, r1
   1dd84:	3107      	adds	r1, #7
   1dd86:	431d      	orrs	r5, r3
   1dd88:	f012 0f80 	tst.w	r2, #128	; 0x80
   1dd8c:	d1f5      	bne.n	1dd7a <__gxx_personality_v0+0x4c6>
   1dd8e:	291f      	cmp	r1, #31
   1dd90:	f63f ae89 	bhi.w	1daa6 <__gxx_personality_v0+0x1f2>
   1dd94:	f012 0f40 	tst.w	r2, #64	; 0x40
   1dd98:	f43f ae85 	beq.w	1daa6 <__gxx_personality_v0+0x1f2>
   1dd9c:	2201      	movs	r2, #1
   1dd9e:	fa12 f301 	lsls.w	r3, r2, r1
   1dda2:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1dda6:	ea43 0505 	orr.w	r5, r3, r5
   1ddaa:	e67c      	b.n	1daa6 <__gxx_personality_v0+0x1f2>
   1ddac:	f04f 0800 	mov.w	r8, #0	; 0x0
   1ddb0:	2401      	movs	r4, #1
   1ddb2:	4647      	mov	r7, r8
   1ddb4:	9b06      	ldr	r3, [sp, #24]
   1ddb6:	f013 0f01 	tst.w	r3, #1	; 0x1
   1ddba:	f43f aef4 	beq.w	1dba6 <__gxx_personality_v0+0x2f2>
   1ddbe:	2c02      	cmp	r4, #2
   1ddc0:	f43f aeba 	beq.w	1db38 <__gxx_personality_v0+0x284>
   1ddc4:	2100      	movs	r1, #0
   1ddc6:	220d      	movs	r2, #13
   1ddc8:	460b      	mov	r3, r1
   1ddca:	4648      	mov	r0, r9
   1ddcc:	9c11      	ldr	r4, [sp, #68]
   1ddce:	f8cd b000 	str.w	fp, [sp]
   1ddd2:	f7fd fc83 	bl	1b6dc <_Unwind_VRS_Get>
   1ddd6:	9b0f      	ldr	r3, [sp, #60]
   1ddd8:	9a04      	ldr	r2, [sp, #16]
   1ddda:	f8ca 3020 	str.w	r3, [sl, #32]
   1ddde:	f8ca 4024 	str.w	r4, [sl, #36]
   1dde2:	f8ca 7028 	str.w	r7, [sl, #40]
   1dde6:	f8ca 202c 	str.w	r2, [sl, #44]
   1ddea:	f8ca 8030 	str.w	r8, [sl, #48]
   1ddee:	2006      	movs	r0, #6
   1ddf0:	e6a9      	b.n	1db46 <__gxx_personality_v0+0x292>
   1ddf2:	4650      	mov	r0, sl
   1ddf4:	f000 f9c4 	bl	1e180 <__cxa_call_terminate>
   1ddf8:	4650      	mov	r0, sl
   1ddfa:	f7ff fba1 	bl	1d540 <__cxa_begin_cleanup>
   1ddfe:	2007      	movs	r0, #7
   1de00:	e6a1      	b.n	1db46 <__gxx_personality_v0+0x292>
   1de02:	2d00      	cmp	r5, #0
   1de04:	f040 80a0 	bne.w	1df48 <__gxx_personality_v0+0x694>
   1de08:	46a8      	mov	r8, r5
   1de0a:	2800      	cmp	r0, #0
   1de0c:	f000 809a 	beq.w	1df44 <__gxx_personality_v0+0x690>
   1de10:	9b0d      	ldr	r3, [sp, #52]
   1de12:	1e42      	subs	r2, r0, #1
   1de14:	441a      	add	r2, r3
   1de16:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1de1a:	f43f ae8d 	beq.w	1db38 <__gxx_personality_v0+0x284>
   1de1e:	2a00      	cmp	r2, #0
   1de20:	f000 809e 	beq.w	1df60 <__gxx_personality_v0+0x6ac>
   1de24:	9b06      	ldr	r3, [sp, #24]
   1de26:	f013 0308 	ands.w	r3, r3, #8	; 0x8
   1de2a:	9303      	str	r3, [sp, #12]
   1de2c:	d001      	beq.n	1de32 <__gxx_personality_v0+0x57e>
   1de2e:	2300      	movs	r3, #0
   1de30:	9311      	str	r3, [sp, #68]
   1de32:	2300      	movs	r3, #0
   1de34:	9305      	str	r3, [sp, #20]
   1de36:	2000      	movs	r0, #0
   1de38:	4615      	mov	r5, r2
   1de3a:	4601      	mov	r1, r0
   1de3c:	f815 2b01 	ldrb.w	r2, [r5], #1
   1de40:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1de44:	408b      	lsls	r3, r1
   1de46:	3107      	adds	r1, #7
   1de48:	4318      	orrs	r0, r3
   1de4a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1de4e:	d1f5      	bne.n	1de3c <__gxx_personality_v0+0x588>
   1de50:	291f      	cmp	r1, #31
   1de52:	d809      	bhi.n	1de68 <__gxx_personality_v0+0x5b4>
   1de54:	f012 0f40 	tst.w	r2, #64	; 0x40
   1de58:	d006      	beq.n	1de68 <__gxx_personality_v0+0x5b4>
   1de5a:	2201      	movs	r2, #1
   1de5c:	fa12 f301 	lsls.w	r3, r2, r1
   1de60:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1de64:	ea43 0000 	orr.w	r0, r3, r0
   1de68:	2400      	movs	r4, #0
   1de6a:	4607      	mov	r7, r0
   1de6c:	46a4      	mov	ip, r4
   1de6e:	4622      	mov	r2, r4
   1de70:	5ca9      	ldrb	r1, [r5, r2]
   1de72:	3201      	adds	r2, #1
   1de74:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1de78:	fa03 f30c 	lsl.w	r3, r3, ip
   1de7c:	431c      	orrs	r4, r3
   1de7e:	f011 0f80 	tst.w	r1, #128	; 0x80
   1de82:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1de86:	d1f3      	bne.n	1de70 <__gxx_personality_v0+0x5bc>
   1de88:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1de8c:	d809      	bhi.n	1dea2 <__gxx_personality_v0+0x5ee>
   1de8e:	f011 0f40 	tst.w	r1, #64	; 0x40
   1de92:	d006      	beq.n	1dea2 <__gxx_personality_v0+0x5ee>
   1de94:	2201      	movs	r2, #1
   1de96:	fa02 f30c 	lsl.w	r3, r2, ip
   1de9a:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1de9e:	ea43 0404 	orr.w	r4, r3, r4
   1dea2:	2800      	cmp	r0, #0
   1dea4:	d106      	bne.n	1deb4 <__gxx_personality_v0+0x600>
   1dea6:	2301      	movs	r3, #1
   1dea8:	9305      	str	r3, [sp, #20]
   1deaa:	2c00      	cmp	r4, #0
   1deac:	d054      	beq.n	1df58 <__gxx_personality_v0+0x6a4>
   1deae:	eb05 0204 	add.w	r2, r5, r4
   1deb2:	e7c0      	b.n	1de36 <__gxx_personality_v0+0x582>
   1deb4:	dd15      	ble.n	1dee2 <__gxx_personality_v0+0x62e>
   1deb6:	0083      	lsls	r3, r0, #2
   1deb8:	9a0c      	ldr	r2, [sp, #48]
   1deba:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1debe:	58d0      	ldr	r0, [r2, r3]
   1dec0:	eb02 0103 	add.w	r1, r2, r3
   1dec4:	b158      	cbz	r0, 1dede <__gxx_personality_v0+0x62a>
   1dec6:	1841      	adds	r1, r0, r1
   1dec8:	d009      	beq.n	1dede <__gxx_personality_v0+0x62a>
   1deca:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1dece:	d0ec      	beq.n	1deaa <__gxx_personality_v0+0x5f6>
   1ded0:	4650      	mov	r0, sl
   1ded2:	2200      	movs	r2, #0
   1ded4:	ab11      	add	r3, sp, #68
   1ded6:	f7ff fb69 	bl	1d5ac <__cxa_type_match>
   1deda:	2800      	cmp	r0, #0
   1dedc:	d0e5      	beq.n	1deaa <__gxx_personality_v0+0x5f6>
   1dede:	2403      	movs	r4, #3
   1dee0:	e768      	b.n	1ddb4 <__gxx_personality_v0+0x500>
   1dee2:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1dee6:	d021      	beq.n	1df2c <__gxx_personality_v0+0x678>
   1dee8:	9a03      	ldr	r2, [sp, #12]
   1deea:	b9fa      	cbnz	r2, 1df2c <__gxx_personality_v0+0x678>
   1deec:	9b11      	ldr	r3, [sp, #68]
   1deee:	9a0c      	ldr	r2, [sp, #48]
   1def0:	ea6f 0000 	mvn.w	r0, r0
   1def4:	9310      	str	r3, [sp, #64]
   1def6:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1defa:	0081      	lsls	r1, r0, #2
   1defc:	4411      	add	r1, r2
   1defe:	b33b      	cbz	r3, 1df50 <__gxx_personality_v0+0x69c>
   1df00:	460e      	mov	r6, r1
   1df02:	e002      	b.n	1df0a <__gxx_personality_v0+0x656>
   1df04:	f856 3f04 	ldr.w	r3, [r6, #4]!
   1df08:	b313      	cbz	r3, 1df50 <__gxx_personality_v0+0x69c>
   1df0a:	6831      	ldr	r1, [r6, #0]
   1df0c:	b101      	cbz	r1, 1df10 <__gxx_personality_v0+0x65c>
   1df0e:	4431      	add	r1, r6
   1df10:	4650      	mov	r0, sl
   1df12:	2200      	movs	r2, #0
   1df14:	ab10      	add	r3, sp, #64
   1df16:	f7ff fb49 	bl	1d5ac <__cxa_type_match>
   1df1a:	2800      	cmp	r0, #0
   1df1c:	d0f2      	beq.n	1df04 <__gxx_personality_v0+0x650>
   1df1e:	2101      	movs	r1, #1
   1df20:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1df24:	2800      	cmp	r0, #0
   1df26:	d0c0      	beq.n	1deaa <__gxx_personality_v0+0x5f6>
   1df28:	2403      	movs	r4, #3
   1df2a:	e743      	b.n	1ddb4 <__gxx_personality_v0+0x500>
   1df2c:	9a0c      	ldr	r2, [sp, #48]
   1df2e:	ea6f 0300 	mvn.w	r3, r0
   1df32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1df36:	f1d1 0001 	rsbs	r0, r1, #1	; 0x1
   1df3a:	bf38      	it	cc
   1df3c:	2000      	movcc	r0, #0
   1df3e:	2800      	cmp	r0, #0
   1df40:	d0b3      	beq.n	1deaa <__gxx_personality_v0+0x5f6>
   1df42:	e7f1      	b.n	1df28 <__gxx_personality_v0+0x674>
   1df44:	4602      	mov	r2, r0
   1df46:	e766      	b.n	1de16 <__gxx_personality_v0+0x562>
   1df48:	9b0a      	ldr	r3, [sp, #40]
   1df4a:	eb05 0803 	add.w	r8, r5, r3
   1df4e:	e75c      	b.n	1de0a <__gxx_personality_v0+0x556>
   1df50:	2100      	movs	r1, #0
   1df52:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1df56:	e7e5      	b.n	1df24 <__gxx_personality_v0+0x670>
   1df58:	9a05      	ldr	r2, [sp, #20]
   1df5a:	2a00      	cmp	r2, #0
   1df5c:	f43f adec 	beq.w	1db38 <__gxx_personality_v0+0x284>
   1df60:	2402      	movs	r4, #2
   1df62:	2700      	movs	r7, #0
   1df64:	e726      	b.n	1ddb4 <__gxx_personality_v0+0x500>
   1df66:	f7ff fae3 	bl	1d530 <_ZSt10unexpectedv>
   1df6a:	f7ff fad3 	bl	1d514 <_ZSt9terminatev>
   1df6e:	2c01      	cmp	r4, #1
   1df70:	f43f af3f 	beq.w	1ddf2 <__gxx_personality_v0+0x53e>
   1df74:	2f00      	cmp	r7, #0
   1df76:	f6bf ae21 	bge.w	1dbbc <__gxx_personality_v0+0x308>
   1df7a:	9904      	ldr	r1, [sp, #16]
   1df7c:	aa09      	add	r2, sp, #36
   1df7e:	4648      	mov	r0, r9
   1df80:	f7ff fbd0 	bl	1d724 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1df84:	ea6f 0107 	mvn.w	r1, r7
   1df88:	9b0c      	ldr	r3, [sp, #48]
   1df8a:	008a      	lsls	r2, r1, #2
   1df8c:	eb03 0002 	add.w	r0, r3, r2
   1df90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1df94:	b183      	cbz	r3, 1dfb8 <__gxx_personality_v0+0x704>
   1df96:	462a      	mov	r2, r5
   1df98:	3201      	adds	r2, #1
   1df9a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   1df9e:	2b00      	cmp	r3, #0
   1dfa0:	d1fa      	bne.n	1df98 <__gxx_personality_v0+0x6e4>
   1dfa2:	f8ca 2028 	str.w	r2, [sl, #40]
   1dfa6:	2300      	movs	r3, #0
   1dfa8:	2204      	movs	r2, #4
   1dfaa:	f8ca 302c 	str.w	r3, [sl, #44]
   1dfae:	f8ca 2030 	str.w	r2, [sl, #48]
   1dfb2:	f8ca 0034 	str.w	r0, [sl, #52]
   1dfb6:	e601      	b.n	1dbbc <__gxx_personality_v0+0x308>
   1dfb8:	461a      	mov	r2, r3
   1dfba:	e7f2      	b.n	1dfa2 <__gxx_personality_v0+0x6ee>
   1dfbc:	f000 f9de 	bl	1e37c <__cxa_begin_catch>
   1dfc0:	f7ff faa8 	bl	1d514 <_ZSt9terminatev>
   1dfc4:	4604      	mov	r4, r0
   1dfc6:	f000 f991 	bl	1e2ec <__cxa_end_catch>
   1dfca:	4620      	mov	r0, r4
   1dfcc:	f7f9 fd84 	bl	17ad8 <__cxa_end_cleanup>

0001dfd0 <__cxa_bad_typeid>:
   1dfd0:	b500      	push	{lr}
   1dfd2:	2004      	movs	r0, #4
   1dfd4:	b081      	sub	sp, #4
   1dfd6:	f000 fccb 	bl	1e970 <__cxa_allocate_exception>
   1dfda:	4b03      	ldr	r3, [pc, #12]	(1dfe8 <__cxa_bad_typeid+0x18>)
   1dfdc:	4903      	ldr	r1, [pc, #12]	(1dfec <__cxa_bad_typeid+0x1c>)
   1dfde:	6003      	str	r3, [r0, #0]
   1dfe0:	4a03      	ldr	r2, [pc, #12]	(1dff0 <__cxa_bad_typeid+0x20>)
   1dfe2:	f000 fc53 	bl	1e88c <__cxa_throw>
   1dfe6:	46c0      	nop			(mov r8, r8)
   1dfe8:	00022b40 	.word	0x00022b40
   1dfec:	00022b60 	.word	0x00022b60
   1dff0:	0001e021 	.word	0x0001e021

0001dff4 <__cxa_bad_cast>:
   1dff4:	b500      	push	{lr}
   1dff6:	2004      	movs	r0, #4
   1dff8:	b081      	sub	sp, #4
   1dffa:	f000 fcb9 	bl	1e970 <__cxa_allocate_exception>
   1dffe:	4b03      	ldr	r3, [pc, #12]	(1e00c <__cxa_bad_cast+0x18>)
   1e000:	4903      	ldr	r1, [pc, #12]	(1e010 <__cxa_bad_cast+0x1c>)
   1e002:	6003      	str	r3, [r0, #0]
   1e004:	4a03      	ldr	r2, [pc, #12]	(1e014 <__cxa_bad_cast+0x20>)
   1e006:	f000 fc41 	bl	1e88c <__cxa_throw>
   1e00a:	46c0      	nop			(mov r8, r8)
   1e00c:	00022c18 	.word	0x00022c18
   1e010:	00022c34 	.word	0x00022c34
   1e014:	0001e41d 	.word	0x0001e41d

0001e018 <_ZNKSt10bad_typeid4whatEv>:
   1e018:	4800      	ldr	r0, [pc, #0]	(1e01c <_ZNKSt10bad_typeid4whatEv+0x4>)
   1e01a:	4770      	bx	lr
   1e01c:	00022b24 	.word	0x00022b24

0001e020 <_ZNSt10bad_typeidD1Ev>:
   1e020:	4b03      	ldr	r3, [pc, #12]	(1e030 <_ZNSt10bad_typeidD1Ev+0x10>)
   1e022:	b510      	push	{r4, lr}
   1e024:	6003      	str	r3, [r0, #0]
   1e026:	4604      	mov	r4, r0
   1e028:	f000 fad8 	bl	1e5dc <_ZNSt9exceptionD2Ev>
   1e02c:	4620      	mov	r0, r4
   1e02e:	bd10      	pop	{r4, pc}
   1e030:	00022b40 	.word	0x00022b40

0001e034 <_ZNSt10bad_typeidD2Ev>:
   1e034:	4b03      	ldr	r3, [pc, #12]	(1e044 <_ZNSt10bad_typeidD2Ev+0x10>)
   1e036:	b510      	push	{r4, lr}
   1e038:	6003      	str	r3, [r0, #0]
   1e03a:	4604      	mov	r4, r0
   1e03c:	f000 face 	bl	1e5dc <_ZNSt9exceptionD2Ev>
   1e040:	4620      	mov	r0, r4
   1e042:	bd10      	pop	{r4, pc}
   1e044:	00022b40 	.word	0x00022b40

0001e048 <_ZNSt10bad_typeidD0Ev>:
   1e048:	4b05      	ldr	r3, [pc, #20]	(1e060 <_ZNSt10bad_typeidD0Ev+0x18>)
   1e04a:	b510      	push	{r4, lr}
   1e04c:	6003      	str	r3, [r0, #0]
   1e04e:	4604      	mov	r4, r0
   1e050:	f000 fac4 	bl	1e5dc <_ZNSt9exceptionD2Ev>
   1e054:	4620      	mov	r0, r4
   1e056:	f7f0 fdf1 	bl	ec3c <_ZdlPv>
   1e05a:	4620      	mov	r0, r4
   1e05c:	bd10      	pop	{r4, pc}
   1e05e:	46c0      	nop			(mov r8, r8)
   1e060:	00022b40 	.word	0x00022b40

0001e064 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1e064:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e066:	4b3f      	ldr	r3, [pc, #252]	(1e164 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1e068:	b083      	sub	sp, #12
   1e06a:	781c      	ldrb	r4, [r3, #0]
   1e06c:	2c00      	cmp	r4, #0
   1e06e:	d13f      	bne.n	1e0f0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1e070:	2501      	movs	r5, #1
   1e072:	701d      	strb	r5, [r3, #0]
   1e074:	f000 fbc8 	bl	1e808 <__cxa_current_exception_type>
   1e078:	2800      	cmp	r0, #0
   1e07a:	d043      	beq.n	1e104 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa0>
   1e07c:	6846      	ldr	r6, [r0, #4]
   1e07e:	ab02      	add	r3, sp, #8
   1e080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e084:	f843 2d04 	str.w	r2, [r3, #-4]!
   1e088:	4621      	mov	r1, r4
   1e08a:	4622      	mov	r2, r4
   1e08c:	4630      	mov	r0, r6
   1e08e:	f7fc facb 	bl	1a628 <__cxa_demangle>
   1e092:	4c35      	ldr	r4, [pc, #212]	(1e168 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1e094:	4607      	mov	r7, r0
   1e096:	6822      	ldr	r2, [r4, #0]
   1e098:	4834      	ldr	r0, [pc, #208]	(1e16c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   1e09a:	6893      	ldr	r3, [r2, #8]
   1e09c:	4629      	mov	r1, r5
   1e09e:	2230      	movs	r2, #48
   1e0a0:	f002 fc08 	bl	208b4 <fwrite>
   1e0a4:	9b01      	ldr	r3, [sp, #4]
   1e0a6:	b17b      	cbz	r3, 1e0c8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x64>
   1e0a8:	6823      	ldr	r3, [r4, #0]
   1e0aa:	4630      	mov	r0, r6
   1e0ac:	6899      	ldr	r1, [r3, #8]
   1e0ae:	f002 fa47 	bl	20540 <fputs>
   1e0b2:	6822      	ldr	r2, [r4, #0]
   1e0b4:	482e      	ldr	r0, [pc, #184]	(1e170 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1e0b6:	6893      	ldr	r3, [r2, #8]
   1e0b8:	2101      	movs	r1, #1
   1e0ba:	2202      	movs	r2, #2
   1e0bc:	f002 fbfa 	bl	208b4 <fwrite>
   1e0c0:	9b01      	ldr	r3, [sp, #4]
   1e0c2:	b183      	cbz	r3, 1e0e6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x82>
   1e0c4:	f000 fbaa 	bl	1e81c <__cxa_rethrow>
   1e0c8:	6823      	ldr	r3, [r4, #0]
   1e0ca:	4638      	mov	r0, r7
   1e0cc:	6899      	ldr	r1, [r3, #8]
   1e0ce:	f002 fa37 	bl	20540 <fputs>
   1e0d2:	6822      	ldr	r2, [r4, #0]
   1e0d4:	4826      	ldr	r0, [pc, #152]	(1e170 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1e0d6:	6893      	ldr	r3, [r2, #8]
   1e0d8:	2101      	movs	r1, #1
   1e0da:	2202      	movs	r2, #2
   1e0dc:	f002 fbea 	bl	208b4 <fwrite>
   1e0e0:	9b01      	ldr	r3, [sp, #4]
   1e0e2:	2b00      	cmp	r3, #0
   1e0e4:	d1ee      	bne.n	1e0c4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x60>
   1e0e6:	4638      	mov	r0, r7
   1e0e8:	f002 fbf6 	bl	208d8 <free>
   1e0ec:	f000 fb96 	bl	1e81c <__cxa_rethrow>
   1e0f0:	4b1d      	ldr	r3, [pc, #116]	(1e168 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1e0f2:	2101      	movs	r1, #1
   1e0f4:	681a      	ldr	r2, [r3, #0]
   1e0f6:	481f      	ldr	r0, [pc, #124]	(1e174 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
   1e0f8:	6893      	ldr	r3, [r2, #8]
   1e0fa:	221d      	movs	r2, #29
   1e0fc:	f002 fbda 	bl	208b4 <fwrite>
   1e100:	f002 f9a4 	bl	2044c <abort>
   1e104:	4b18      	ldr	r3, [pc, #96]	(1e168 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1e106:	4629      	mov	r1, r5
   1e108:	681a      	ldr	r2, [r3, #0]
   1e10a:	481b      	ldr	r0, [pc, #108]	(1e178 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
   1e10c:	6893      	ldr	r3, [r2, #8]
   1e10e:	222d      	movs	r2, #45
   1e110:	f002 fbd0 	bl	208b4 <fwrite>
   1e114:	f002 f99a 	bl	2044c <abort>
   1e118:	2902      	cmp	r1, #2
   1e11a:	d005      	beq.n	1e128 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc4>
   1e11c:	f000 f92e 	bl	1e37c <__cxa_begin_catch>
   1e120:	f000 f8e4 	bl	1e2ec <__cxa_end_catch>
   1e124:	f002 f992 	bl	2044c <abort>
   1e128:	f000 f928 	bl	1e37c <__cxa_begin_catch>
   1e12c:	6803      	ldr	r3, [r0, #0]
   1e12e:	689a      	ldr	r2, [r3, #8]
   1e130:	4790      	blx	r2
   1e132:	6822      	ldr	r2, [r4, #0]
   1e134:	4605      	mov	r5, r0
   1e136:	6893      	ldr	r3, [r2, #8]
   1e138:	4810      	ldr	r0, [pc, #64]	(1e17c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x118>)
   1e13a:	2101      	movs	r1, #1
   1e13c:	220b      	movs	r2, #11
   1e13e:	f002 fbb9 	bl	208b4 <fwrite>
   1e142:	6823      	ldr	r3, [r4, #0]
   1e144:	4628      	mov	r0, r5
   1e146:	6899      	ldr	r1, [r3, #8]
   1e148:	f002 f9fa 	bl	20540 <fputs>
   1e14c:	6823      	ldr	r3, [r4, #0]
   1e14e:	200a      	movs	r0, #10
   1e150:	6899      	ldr	r1, [r3, #8]
   1e152:	f002 f9ab 	bl	204ac <fputc>
   1e156:	e7e3      	b.n	1e120 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
   1e158:	4605      	mov	r5, r0
   1e15a:	f000 f8c7 	bl	1e2ec <__cxa_end_catch>
   1e15e:	4628      	mov	r0, r5
   1e160:	f7f9 fcba 	bl	17ad8 <__cxa_end_cleanup>
   1e164:	2000068c 	.word	0x2000068c
   1e168:	20000044 	.word	0x20000044
   1e16c:	00022b8c 	.word	0x00022b8c
   1e170:	00022bc0 	.word	0x00022bc0
   1e174:	00022b6c 	.word	0x00022b6c
   1e178:	00022bd0 	.word	0x00022bd0
   1e17c:	00022bc4 	.word	0x00022bc4

0001e180 <__cxa_call_terminate>:
   1e180:	b510      	push	{r4, lr}
   1e182:	4604      	mov	r4, r0
   1e184:	b120      	cbz	r0, 1e190 <__cxa_call_terminate+0x10>
   1e186:	f000 f8f9 	bl	1e37c <__cxa_begin_catch>
   1e18a:	7823      	ldrb	r3, [r4, #0]
   1e18c:	2b47      	cmp	r3, #71
   1e18e:	d001      	beq.n	1e194 <__cxa_call_terminate+0x14>
   1e190:	f7ff f9c0 	bl	1d514 <_ZSt9terminatev>
   1e194:	7863      	ldrb	r3, [r4, #1]
   1e196:	2b4e      	cmp	r3, #78
   1e198:	d1fa      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e19a:	78a3      	ldrb	r3, [r4, #2]
   1e19c:	2b55      	cmp	r3, #85
   1e19e:	d1f7      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e1a0:	78e3      	ldrb	r3, [r4, #3]
   1e1a2:	2b43      	cmp	r3, #67
   1e1a4:	d1f4      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e1a6:	7923      	ldrb	r3, [r4, #4]
   1e1a8:	2b43      	cmp	r3, #67
   1e1aa:	d1f1      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e1ac:	7963      	ldrb	r3, [r4, #5]
   1e1ae:	2b2b      	cmp	r3, #43
   1e1b0:	d1ee      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e1b2:	79a3      	ldrb	r3, [r4, #6]
   1e1b4:	2b2b      	cmp	r3, #43
   1e1b6:	d1eb      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e1b8:	79e3      	ldrb	r3, [r4, #7]
   1e1ba:	2b00      	cmp	r3, #0
   1e1bc:	d1e8      	bne.n	1e190 <__cxa_call_terminate+0x10>
   1e1be:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1e1c2:	f7ff f999 	bl	1d4f8 <_ZN10__cxxabiv111__terminateEPFvvE>
   1e1c6:	46c0      	nop			(mov r8, r8)

0001e1c8 <__cxa_call_unexpected>:
   1e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1cc:	7803      	ldrb	r3, [r0, #0]
   1e1ce:	b085      	sub	sp, #20
   1e1d0:	2b47      	cmp	r3, #71
   1e1d2:	d00a      	beq.n	1e1ea <__cxa_call_unexpected+0x22>
   1e1d4:	2400      	movs	r4, #0
   1e1d6:	4627      	mov	r7, r4
   1e1d8:	46a2      	mov	sl, r4
   1e1da:	46a0      	mov	r8, r4
   1e1dc:	2501      	movs	r5, #1
   1e1de:	4626      	mov	r6, r4
   1e1e0:	f000 f8cc 	bl	1e37c <__cxa_begin_catch>
   1e1e4:	b30d      	cbz	r5, 1e22a <__cxa_call_unexpected+0x62>
   1e1e6:	f7ff f9a3 	bl	1d530 <_ZSt10unexpectedv>
   1e1ea:	7843      	ldrb	r3, [r0, #1]
   1e1ec:	2b4e      	cmp	r3, #78
   1e1ee:	d1f1      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e1f0:	7883      	ldrb	r3, [r0, #2]
   1e1f2:	2b55      	cmp	r3, #85
   1e1f4:	d1ee      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e1f6:	78c3      	ldrb	r3, [r0, #3]
   1e1f8:	2b43      	cmp	r3, #67
   1e1fa:	d1eb      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e1fc:	7903      	ldrb	r3, [r0, #4]
   1e1fe:	2b43      	cmp	r3, #67
   1e200:	d1e8      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e202:	7943      	ldrb	r3, [r0, #5]
   1e204:	2b2b      	cmp	r3, #43
   1e206:	d1e5      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e208:	7983      	ldrb	r3, [r0, #6]
   1e20a:	2b2b      	cmp	r3, #43
   1e20c:	d1e2      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e20e:	79c2      	ldrb	r2, [r0, #7]
   1e210:	2a00      	cmp	r2, #0
   1e212:	d1df      	bne.n	1e1d4 <__cxa_call_unexpected+0xc>
   1e214:	f1a0 0320 	sub.w	r3, r0, #32	; 0x20
   1e218:	689e      	ldr	r6, [r3, #8]
   1e21a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1e21e:	f8d0 8028 	ldr.w	r8, [r0, #40]
   1e222:	6b04      	ldr	r4, [r0, #48]
   1e224:	6b47      	ldr	r7, [r0, #52]
   1e226:	4615      	mov	r5, r2
   1e228:	e7da      	b.n	1e1e0 <__cxa_call_unexpected+0x18>
   1e22a:	4630      	mov	r0, r6
   1e22c:	f7ff f97a 	bl	1d524 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1e230:	f000 f8a4 	bl	1e37c <__cxa_begin_catch>
   1e234:	2d00      	cmp	r5, #0
   1e236:	d135      	bne.n	1e2a4 <__cxa_call_unexpected+0xdc>
   1e238:	f000 fb72 	bl	1e920 <__cxa_get_globals_fast>
   1e23c:	6800      	ldr	r0, [r0, #0]
   1e23e:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1e242:	f100 0378 	add.w	r3, r0, #120	; 0x78
   1e246:	9303      	str	r3, [sp, #12]
   1e248:	dd3b      	ble.n	1e2c2 <__cxa_call_unexpected+0xfa>
   1e24a:	3020      	adds	r0, #32
   1e24c:	463e      	mov	r6, r7
   1e24e:	f024 0b03 	bic.w	fp, r4, #3	; 0x3
   1e252:	9001      	str	r0, [sp, #4]
   1e254:	462f      	mov	r7, r5
   1e256:	46a9      	mov	r9, r5
   1e258:	6830      	ldr	r0, [r6, #0]
   1e25a:	2800      	cmp	r0, #0
   1e25c:	d12e      	bne.n	1e2bc <__cxa_call_unexpected+0xf4>
   1e25e:	4605      	mov	r5, r0
   1e260:	9801      	ldr	r0, [sp, #4]
   1e262:	4629      	mov	r1, r5
   1e264:	2200      	movs	r2, #0
   1e266:	ab03      	add	r3, sp, #12
   1e268:	f7ff f9a0 	bl	1d5ac <__cxa_type_match>
   1e26c:	4602      	mov	r2, r0
   1e26e:	b9d8      	cbnz	r0, 1e2a8 <__cxa_call_unexpected+0xe0>
   1e270:	682b      	ldr	r3, [r5, #0]
   1e272:	4628      	mov	r0, r5
   1e274:	691c      	ldr	r4, [r3, #16]
   1e276:	4914      	ldr	r1, [pc, #80]	(1e2c8 <__cxa_call_unexpected+0x100>)
   1e278:	2301      	movs	r3, #1
   1e27a:	47a0      	blx	r4
   1e27c:	3701      	adds	r7, #1
   1e27e:	2800      	cmp	r0, #0
   1e280:	bf18      	it	ne
   1e282:	f04f 0901 	movne.w	r9, #1	; 0x1
   1e286:	45b8      	cmp	r8, r7
   1e288:	445e      	add	r6, fp
   1e28a:	dce5      	bgt.n	1e258 <__cxa_call_unexpected+0x90>
   1e28c:	f1b9 0f00 	cmp.w	r9, #0	; 0x0
   1e290:	d017      	beq.n	1e2c2 <__cxa_call_unexpected+0xfa>
   1e292:	2004      	movs	r0, #4
   1e294:	f000 fb6c 	bl	1e970 <__cxa_allocate_exception>
   1e298:	4b0c      	ldr	r3, [pc, #48]	(1e2cc <__cxa_call_unexpected+0x104>)
   1e29a:	490b      	ldr	r1, [pc, #44]	(1e2c8 <__cxa_call_unexpected+0x100>)
   1e29c:	6003      	str	r3, [r0, #0]
   1e29e:	4a0c      	ldr	r2, [pc, #48]	(1e2d0 <__cxa_call_unexpected+0x108>)
   1e2a0:	f000 faf4 	bl	1e88c <__cxa_throw>
   1e2a4:	f7ff f936 	bl	1d514 <_ZSt9terminatev>
   1e2a8:	f000 fab8 	bl	1e81c <__cxa_rethrow>
   1e2ac:	4606      	mov	r6, r0
   1e2ae:	f000 f81d 	bl	1e2ec <__cxa_end_catch>
   1e2b2:	f000 f81b 	bl	1e2ec <__cxa_end_catch>
   1e2b6:	4630      	mov	r0, r6
   1e2b8:	f7f9 fc0e 	bl	17ad8 <__cxa_end_cleanup>
   1e2bc:	eb06 0500 	add.w	r5, r6, r0
   1e2c0:	e7ce      	b.n	1e260 <__cxa_call_unexpected+0x98>
   1e2c2:	4650      	mov	r0, sl
   1e2c4:	f7ff f918 	bl	1d4f8 <_ZN10__cxxabiv111__terminateEPFvvE>
   1e2c8:	00023160 	.word	0x00023160
   1e2cc:	000230d0 	.word	0x000230d0
   1e2d0:	0001e601 	.word	0x0001e601

0001e2d4 <__cxa_get_exception_ptr>:
   1e2d4:	6a40      	ldr	r0, [r0, #36]
   1e2d6:	4770      	bx	lr

0001e2d8 <_ZSt18uncaught_exceptionv>:
   1e2d8:	b500      	push	{lr}
   1e2da:	b081      	sub	sp, #4
   1e2dc:	f000 fb24 	bl	1e928 <__cxa_get_globals>
   1e2e0:	6840      	ldr	r0, [r0, #4]
   1e2e2:	3800      	subs	r0, #0
   1e2e4:	bf18      	it	ne
   1e2e6:	2001      	movne	r0, #1
   1e2e8:	b001      	add	sp, #4
   1e2ea:	bd00      	pop	{pc}

0001e2ec <__cxa_end_catch>:
   1e2ec:	b500      	push	{lr}
   1e2ee:	b081      	sub	sp, #4
   1e2f0:	f000 fb16 	bl	1e920 <__cxa_get_globals_fast>
   1e2f4:	4601      	mov	r1, r0
   1e2f6:	6800      	ldr	r0, [r0, #0]
   1e2f8:	b140      	cbz	r0, 1e30c <__cxa_end_catch+0x20>
   1e2fa:	f890 3020 	ldrb.w	r3, [r0, #32]
   1e2fe:	2b47      	cmp	r3, #71
   1e300:	d006      	beq.n	1e310 <__cxa_end_catch+0x24>
   1e302:	2300      	movs	r3, #0
   1e304:	600b      	str	r3, [r1, #0]
   1e306:	3020      	adds	r0, #32
   1e308:	f7fd fa7e 	bl	1b808 <_Unwind_DeleteException>
   1e30c:	b001      	add	sp, #4
   1e30e:	bd00      	pop	{pc}
   1e310:	f890 3021 	ldrb.w	r3, [r0, #33]
   1e314:	2b4e      	cmp	r3, #78
   1e316:	d1f4      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e318:	f890 3022 	ldrb.w	r3, [r0, #34]
   1e31c:	2b55      	cmp	r3, #85
   1e31e:	d1f0      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e320:	f890 3023 	ldrb.w	r3, [r0, #35]
   1e324:	2b43      	cmp	r3, #67
   1e326:	d1ec      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e328:	f890 3024 	ldrb.w	r3, [r0, #36]
   1e32c:	2b43      	cmp	r3, #67
   1e32e:	d1e8      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e330:	f890 3025 	ldrb.w	r3, [r0, #37]
   1e334:	2b2b      	cmp	r3, #43
   1e336:	d1e4      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e338:	f890 3026 	ldrb.w	r3, [r0, #38]
   1e33c:	2b2b      	cmp	r3, #43
   1e33e:	d1e0      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e340:	f890 3027 	ldrb.w	r3, [r0, #39]
   1e344:	2b00      	cmp	r3, #0
   1e346:	d1dc      	bne.n	1e302 <__cxa_end_catch+0x16>
   1e348:	6943      	ldr	r3, [r0, #20]
   1e34a:	2b00      	cmp	r3, #0
   1e34c:	db09      	blt.n	1e362 <__cxa_end_catch+0x76>
   1e34e:	f113 32ff 	adds.w	r2, r3, #4294967295	; 0xffffffff
   1e352:	d00d      	beq.n	1e370 <__cxa_end_catch+0x84>
   1e354:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1e358:	d001      	beq.n	1e35e <__cxa_end_catch+0x72>
   1e35a:	6142      	str	r2, [r0, #20]
   1e35c:	e7d6      	b.n	1e30c <__cxa_end_catch+0x20>
   1e35e:	f7ff f8d9 	bl	1d514 <_ZSt9terminatev>
   1e362:	1c5a      	adds	r2, r3, #1
   1e364:	bf08      	it	eq
   1e366:	6903      	ldreq	r3, [r0, #16]
   1e368:	6142      	str	r2, [r0, #20]
   1e36a:	bf08      	it	eq
   1e36c:	600b      	streq	r3, [r1, #0]
   1e36e:	e7cd      	b.n	1e30c <__cxa_end_catch+0x20>
   1e370:	6903      	ldr	r3, [r0, #16]
   1e372:	3020      	adds	r0, #32
   1e374:	600b      	str	r3, [r1, #0]
   1e376:	f7fd fa47 	bl	1b808 <_Unwind_DeleteException>
   1e37a:	e7c7      	b.n	1e30c <__cxa_end_catch+0x20>

0001e37c <__cxa_begin_catch>:
   1e37c:	b530      	push	{r4, r5, lr}
   1e37e:	b081      	sub	sp, #4
   1e380:	4605      	mov	r5, r0
   1e382:	f000 fad1 	bl	1e928 <__cxa_get_globals>
   1e386:	462a      	mov	r2, r5
   1e388:	f812 3920 	ldrb.w	r3, [r2], #-32
   1e38c:	6801      	ldr	r1, [r0, #0]
   1e38e:	2b47      	cmp	r3, #71
   1e390:	d006      	beq.n	1e3a0 <__cxa_begin_catch+0x24>
   1e392:	2900      	cmp	r1, #0
   1e394:	d134      	bne.n	1e400 <__cxa_begin_catch+0x84>
   1e396:	6002      	str	r2, [r0, #0]
   1e398:	460c      	mov	r4, r1
   1e39a:	4620      	mov	r0, r4
   1e39c:	b001      	add	sp, #4
   1e39e:	bd30      	pop	{r4, r5, pc}
   1e3a0:	f892 3021 	ldrb.w	r3, [r2, #33]
   1e3a4:	2b4e      	cmp	r3, #78
   1e3a6:	d1f4      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3a8:	f892 3022 	ldrb.w	r3, [r2, #34]
   1e3ac:	2b55      	cmp	r3, #85
   1e3ae:	d1f0      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3b0:	f892 3023 	ldrb.w	r3, [r2, #35]
   1e3b4:	2b43      	cmp	r3, #67
   1e3b6:	d1ec      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3b8:	f892 3024 	ldrb.w	r3, [r2, #36]
   1e3bc:	2b43      	cmp	r3, #67
   1e3be:	d1e8      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3c0:	f892 3025 	ldrb.w	r3, [r2, #37]
   1e3c4:	2b2b      	cmp	r3, #43
   1e3c6:	d1e4      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3c8:	f892 3026 	ldrb.w	r3, [r2, #38]
   1e3cc:	2b2b      	cmp	r3, #43
   1e3ce:	d1e0      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3d0:	f892 3027 	ldrb.w	r3, [r2, #39]
   1e3d4:	2b00      	cmp	r3, #0
   1e3d6:	d1dc      	bne.n	1e392 <__cxa_begin_catch+0x16>
   1e3d8:	6953      	ldr	r3, [r2, #20]
   1e3da:	2b00      	cmp	r3, #0
   1e3dc:	db0d      	blt.n	1e3fa <__cxa_begin_catch+0x7e>
   1e3de:	3301      	adds	r3, #1
   1e3e0:	6153      	str	r3, [r2, #20]
   1e3e2:	6843      	ldr	r3, [r0, #4]
   1e3e4:	3b01      	subs	r3, #1
   1e3e6:	4291      	cmp	r1, r2
   1e3e8:	6043      	str	r3, [r0, #4]
   1e3ea:	bf1c      	itt	ne
   1e3ec:	6111      	strne	r1, [r2, #16]
   1e3ee:	6002      	strne	r2, [r0, #0]
   1e3f0:	4628      	mov	r0, r5
   1e3f2:	6a6c      	ldr	r4, [r5, #36]
   1e3f4:	f7fd fa06 	bl	1b804 <_Unwind_Complete>
   1e3f8:	e7cf      	b.n	1e39a <__cxa_begin_catch+0x1e>
   1e3fa:	f1c3 0301 	rsb	r3, r3, #1	; 0x1
   1e3fe:	e7ef      	b.n	1e3e0 <__cxa_begin_catch+0x64>
   1e400:	f7ff f888 	bl	1d514 <_ZSt9terminatev>
   1e404:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1e408:	d001      	beq.n	1e40e <__cxa_begin_catch+0x92>
   1e40a:	f7f9 fb65 	bl	17ad8 <__cxa_end_cleanup>
   1e40e:	f7ff fedb 	bl	1e1c8 <__cxa_call_unexpected>
   1e412:	46c0      	nop			(mov r8, r8)

0001e414 <_ZNKSt8bad_cast4whatEv>:
   1e414:	4800      	ldr	r0, [pc, #0]	(1e418 <_ZNKSt8bad_cast4whatEv+0x4>)
   1e416:	4770      	bx	lr
   1e418:	00022c00 	.word	0x00022c00

0001e41c <_ZNSt8bad_castD1Ev>:
   1e41c:	4b03      	ldr	r3, [pc, #12]	(1e42c <_ZNSt8bad_castD1Ev+0x10>)
   1e41e:	b510      	push	{r4, lr}
   1e420:	6003      	str	r3, [r0, #0]
   1e422:	4604      	mov	r4, r0
   1e424:	f000 f8da 	bl	1e5dc <_ZNSt9exceptionD2Ev>
   1e428:	4620      	mov	r0, r4
   1e42a:	bd10      	pop	{r4, pc}
   1e42c:	00022c18 	.word	0x00022c18

0001e430 <_ZNSt8bad_castD2Ev>:
   1e430:	4b03      	ldr	r3, [pc, #12]	(1e440 <_ZNSt8bad_castD2Ev+0x10>)
   1e432:	b510      	push	{r4, lr}
   1e434:	6003      	str	r3, [r0, #0]
   1e436:	4604      	mov	r4, r0
   1e438:	f000 f8d0 	bl	1e5dc <_ZNSt9exceptionD2Ev>
   1e43c:	4620      	mov	r0, r4
   1e43e:	bd10      	pop	{r4, pc}
   1e440:	00022c18 	.word	0x00022c18

0001e444 <_ZNSt8bad_castD0Ev>:
   1e444:	4b05      	ldr	r3, [pc, #20]	(1e45c <_ZNSt8bad_castD0Ev+0x18>)
   1e446:	b510      	push	{r4, lr}
   1e448:	6003      	str	r3, [r0, #0]
   1e44a:	4604      	mov	r4, r0
   1e44c:	f000 f8c6 	bl	1e5dc <_ZNSt9exceptionD2Ev>
   1e450:	4620      	mov	r0, r4
   1e452:	f7f0 fbf3 	bl	ec3c <_ZdlPv>
   1e456:	4620      	mov	r0, r4
   1e458:	bd10      	pop	{r4, pc}
   1e45a:	46c0      	nop			(mov r8, r8)
   1e45c:	00022c18 	.word	0x00022c18

0001e460 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1e460:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e462:	b081      	sub	sp, #4
   1e464:	4604      	mov	r4, r0
   1e466:	460d      	mov	r5, r1
   1e468:	4616      	mov	r6, r2
   1e46a:	461f      	mov	r7, r3
   1e46c:	f000 f938 	bl	1e6e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   1e470:	b110      	cbz	r0, 1e478 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x18>
   1e472:	2001      	movs	r0, #1
   1e474:	b001      	add	sp, #4
   1e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e478:	68a0      	ldr	r0, [r4, #8]
   1e47a:	4629      	mov	r1, r5
   1e47c:	6803      	ldr	r3, [r0, #0]
   1e47e:	4632      	mov	r2, r6
   1e480:	699c      	ldr	r4, [r3, #24]
   1e482:	463b      	mov	r3, r7
   1e484:	47a0      	blx	r4
   1e486:	e7f5      	b.n	1e474 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>

0001e488 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1e488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e48c:	460e      	mov	r6, r1
   1e48e:	b085      	sub	sp, #20
   1e490:	4619      	mov	r1, r3
   1e492:	4604      	mov	r4, r0
   1e494:	4617      	mov	r7, r2
   1e496:	469b      	mov	fp, r3
   1e498:	f8dd 8038 	ldr.w	r8, [sp, #56]
   1e49c:	f8dd 9040 	ldr.w	r9, [sp, #64]
   1e4a0:	f8dd a044 	ldr.w	sl, [sp, #68]
   1e4a4:	f000 f990 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e4a8:	4605      	mov	r5, r0
   1e4aa:	b178      	cbz	r0, 1e4cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1e4ac:	2e00      	cmp	r6, #0
   1e4ae:	f8ca 8000 	str.w	r8, [sl]
   1e4b2:	f88a 7004 	strb.w	r7, [sl, #4]
   1e4b6:	db1d      	blt.n	1e4f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   1e4b8:	eb08 0306 	add.w	r3, r8, r6
   1e4bc:	4599      	cmp	r9, r3
   1e4be:	bf0c      	ite	eq
   1e4c0:	2306      	moveq	r3, #6
   1e4c2:	2301      	movne	r3, #1
   1e4c4:	f88a 3006 	strb.w	r3, [sl, #6]
   1e4c8:	2000      	movs	r0, #0
   1e4ca:	e010      	b.n	1e4ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1e4cc:	45c8      	cmp	r8, r9
   1e4ce:	d01b      	beq.n	1e508 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>
   1e4d0:	68a0      	ldr	r0, [r4, #8]
   1e4d2:	9a0f      	ldr	r2, [sp, #60]
   1e4d4:	6803      	ldr	r3, [r0, #0]
   1e4d6:	9201      	str	r2, [sp, #4]
   1e4d8:	f8cd 8000 	str.w	r8, [sp]
   1e4dc:	f8cd 9008 	str.w	r9, [sp, #8]
   1e4e0:	f8cd a00c 	str.w	sl, [sp, #12]
   1e4e4:	69dc      	ldr	r4, [r3, #28]
   1e4e6:	4631      	mov	r1, r6
   1e4e8:	463a      	mov	r2, r7
   1e4ea:	465b      	mov	r3, fp
   1e4ec:	47a0      	blx	r4
   1e4ee:	b005      	add	sp, #20
   1e4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4f4:	f116 0f02 	cmn.w	r6, #2	; 0x2
   1e4f8:	d001      	beq.n	1e4fe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   1e4fa:	2000      	movs	r0, #0
   1e4fc:	e7f7      	b.n	1e4ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1e4fe:	2301      	movs	r3, #1
   1e500:	f88a 3006 	strb.w	r3, [sl, #6]
   1e504:	2000      	movs	r0, #0
   1e506:	e7f2      	b.n	1e4ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1e508:	4620      	mov	r0, r4
   1e50a:	990f      	ldr	r1, [sp, #60]
   1e50c:	f000 f95c 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e510:	2800      	cmp	r0, #0
   1e512:	d0dd      	beq.n	1e4d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
   1e514:	f88a 7005 	strb.w	r7, [sl, #5]
   1e518:	4628      	mov	r0, r5
   1e51a:	e7e8      	b.n	1e4ee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>

0001e51c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   1e51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e520:	b082      	sub	sp, #8
   1e522:	9e08      	ldr	r6, [sp, #32]
   1e524:	4604      	mov	r4, r0
   1e526:	4296      	cmp	r6, r2
   1e528:	4688      	mov	r8, r1
   1e52a:	4615      	mov	r5, r2
   1e52c:	461f      	mov	r7, r3
   1e52e:	d00a      	beq.n	1e546 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2a>
   1e530:	68a0      	ldr	r0, [r4, #8]
   1e532:	4641      	mov	r1, r8
   1e534:	6803      	ldr	r3, [r0, #0]
   1e536:	9600      	str	r6, [sp, #0]
   1e538:	6a1c      	ldr	r4, [r3, #32]
   1e53a:	462a      	mov	r2, r5
   1e53c:	463b      	mov	r3, r7
   1e53e:	47a0      	blx	r4
   1e540:	b002      	add	sp, #8
   1e542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e546:	4619      	mov	r1, r3
   1e548:	f000 f93e 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e54c:	2800      	cmp	r0, #0
   1e54e:	d0ef      	beq.n	1e530 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
   1e550:	2006      	movs	r0, #6
   1e552:	e7f5      	b.n	1e540 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>

0001e554 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   1e554:	4b03      	ldr	r3, [pc, #12]	(1e564 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1e556:	b510      	push	{r4, lr}
   1e558:	6003      	str	r3, [r0, #0]
   1e55a:	4604      	mov	r4, r0
   1e55c:	f000 f910 	bl	1e780 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1e560:	4620      	mov	r0, r4
   1e562:	bd10      	pop	{r4, pc}
   1e564:	00022c48 	.word	0x00022c48

0001e568 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   1e568:	4b03      	ldr	r3, [pc, #12]	(1e578 <_ZN10__cxxabiv120__si_class_type_infoD2Ev+0x10>)
   1e56a:	b510      	push	{r4, lr}
   1e56c:	6003      	str	r3, [r0, #0]
   1e56e:	4604      	mov	r4, r0
   1e570:	f000 f906 	bl	1e780 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1e574:	4620      	mov	r0, r4
   1e576:	bd10      	pop	{r4, pc}
   1e578:	00022c48 	.word	0x00022c48

0001e57c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1e57c:	4b05      	ldr	r3, [pc, #20]	(1e594 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   1e57e:	b510      	push	{r4, lr}
   1e580:	6003      	str	r3, [r0, #0]
   1e582:	4604      	mov	r4, r0
   1e584:	f000 f8fc 	bl	1e780 <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1e588:	4620      	mov	r0, r4
   1e58a:	f7f0 fb57 	bl	ec3c <_ZdlPv>
   1e58e:	4620      	mov	r0, r4
   1e590:	bd10      	pop	{r4, pc}
   1e592:	46c0      	nop			(mov r8, r8)
   1e594:	00022c48 	.word	0x00022c48

0001e598 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   1e598:	4b03      	ldr	r3, [pc, #12]	(1e5a8 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   1e59a:	b510      	push	{r4, lr}
   1e59c:	6003      	str	r3, [r0, #0]
   1e59e:	4604      	mov	r4, r0
   1e5a0:	f000 f906 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1e5a4:	4620      	mov	r0, r4
   1e5a6:	bd10      	pop	{r4, pc}
   1e5a8:	00022cb0 	.word	0x00022cb0

0001e5ac <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
   1e5ac:	4b03      	ldr	r3, [pc, #12]	(1e5bc <_ZN10__cxxabiv123__fundamental_type_infoD2Ev+0x10>)
   1e5ae:	b510      	push	{r4, lr}
   1e5b0:	6003      	str	r3, [r0, #0]
   1e5b2:	4604      	mov	r4, r0
   1e5b4:	f000 f8fc 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1e5b8:	4620      	mov	r0, r4
   1e5ba:	bd10      	pop	{r4, pc}
   1e5bc:	00022cb0 	.word	0x00022cb0

0001e5c0 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   1e5c0:	4b05      	ldr	r3, [pc, #20]	(1e5d8 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   1e5c2:	b510      	push	{r4, lr}
   1e5c4:	6003      	str	r3, [r0, #0]
   1e5c6:	4604      	mov	r4, r0
   1e5c8:	f000 f8f2 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1e5cc:	4620      	mov	r0, r4
   1e5ce:	f7f0 fb35 	bl	ec3c <_ZdlPv>
   1e5d2:	4620      	mov	r0, r4
   1e5d4:	bd10      	pop	{r4, pc}
   1e5d6:	46c0      	nop			(mov r8, r8)
   1e5d8:	00022cb0 	.word	0x00022cb0

0001e5dc <_ZNSt9exceptionD2Ev>:
   1e5dc:	4b01      	ldr	r3, [pc, #4]	(1e5e4 <_ZNSt9exceptionD2Ev+0x8>)
   1e5de:	6003      	str	r3, [r0, #0]
   1e5e0:	4770      	bx	lr
   1e5e2:	46c0      	nop			(mov r8, r8)
   1e5e4:	000230e8 	.word	0x000230e8

0001e5e8 <_ZNSt9exceptionD1Ev>:
   1e5e8:	4b01      	ldr	r3, [pc, #4]	(1e5f0 <_ZNSt9exceptionD1Ev+0x8>)
   1e5ea:	6003      	str	r3, [r0, #0]
   1e5ec:	4770      	bx	lr
   1e5ee:	46c0      	nop			(mov r8, r8)
   1e5f0:	000230e8 	.word	0x000230e8

0001e5f4 <_ZNSt13bad_exceptionD2Ev>:
   1e5f4:	4b01      	ldr	r3, [pc, #4]	(1e5fc <_ZNSt13bad_exceptionD2Ev+0x8>)
   1e5f6:	6003      	str	r3, [r0, #0]
   1e5f8:	4770      	bx	lr
   1e5fa:	46c0      	nop			(mov r8, r8)
   1e5fc:	000230e8 	.word	0x000230e8

0001e600 <_ZNSt13bad_exceptionD1Ev>:
   1e600:	4b01      	ldr	r3, [pc, #4]	(1e608 <_ZNSt13bad_exceptionD1Ev+0x8>)
   1e602:	6003      	str	r3, [r0, #0]
   1e604:	4770      	bx	lr
   1e606:	46c0      	nop			(mov r8, r8)
   1e608:	000230e8 	.word	0x000230e8

0001e60c <_ZN10__cxxabiv115__forced_unwindD2Ev>:
   1e60c:	4b01      	ldr	r3, [pc, #4]	(1e614 <_ZN10__cxxabiv115__forced_unwindD2Ev+0x8>)
   1e60e:	6003      	str	r3, [r0, #0]
   1e610:	4770      	bx	lr
   1e612:	46c0      	nop			(mov r8, r8)
   1e614:	000230b8 	.word	0x000230b8

0001e618 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   1e618:	4b01      	ldr	r3, [pc, #4]	(1e620 <_ZN10__cxxabiv115__forced_unwindD1Ev+0x8>)
   1e61a:	6003      	str	r3, [r0, #0]
   1e61c:	4770      	bx	lr
   1e61e:	46c0      	nop			(mov r8, r8)
   1e620:	000230b8 	.word	0x000230b8

0001e624 <_ZN10__cxxabiv119__foreign_exceptionD2Ev>:
   1e624:	4b01      	ldr	r3, [pc, #4]	(1e62c <_ZN10__cxxabiv119__foreign_exceptionD2Ev+0x8>)
   1e626:	6003      	str	r3, [r0, #0]
   1e628:	4770      	bx	lr
   1e62a:	46c0      	nop			(mov r8, r8)
   1e62c:	000230a0 	.word	0x000230a0

0001e630 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   1e630:	4b01      	ldr	r3, [pc, #4]	(1e638 <_ZN10__cxxabiv119__foreign_exceptionD1Ev+0x8>)
   1e632:	6003      	str	r3, [r0, #0]
   1e634:	4770      	bx	lr
   1e636:	46c0      	nop			(mov r8, r8)
   1e638:	000230a0 	.word	0x000230a0

0001e63c <_ZNKSt9exception4whatEv>:
   1e63c:	4800      	ldr	r0, [pc, #0]	(1e640 <_ZNKSt9exception4whatEv+0x4>)
   1e63e:	4770      	bx	lr
   1e640:	00023070 	.word	0x00023070

0001e644 <_ZNKSt13bad_exception4whatEv>:
   1e644:	4800      	ldr	r0, [pc, #0]	(1e648 <_ZNKSt13bad_exception4whatEv+0x4>)
   1e646:	4770      	bx	lr
   1e648:	00023080 	.word	0x00023080

0001e64c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   1e64c:	4b03      	ldr	r3, [pc, #12]	(1e65c <_ZN10__cxxabiv119__foreign_exceptionD0Ev+0x10>)
   1e64e:	b510      	push	{r4, lr}
   1e650:	6003      	str	r3, [r0, #0]
   1e652:	4604      	mov	r4, r0
   1e654:	f7f0 faf2 	bl	ec3c <_ZdlPv>
   1e658:	4620      	mov	r0, r4
   1e65a:	bd10      	pop	{r4, pc}
   1e65c:	000230a0 	.word	0x000230a0

0001e660 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   1e660:	4b03      	ldr	r3, [pc, #12]	(1e670 <_ZN10__cxxabiv115__forced_unwindD0Ev+0x10>)
   1e662:	b510      	push	{r4, lr}
   1e664:	6003      	str	r3, [r0, #0]
   1e666:	4604      	mov	r4, r0
   1e668:	f7f0 fae8 	bl	ec3c <_ZdlPv>
   1e66c:	4620      	mov	r0, r4
   1e66e:	bd10      	pop	{r4, pc}
   1e670:	000230b8 	.word	0x000230b8

0001e674 <_ZNSt9exceptionD0Ev>:
   1e674:	4b03      	ldr	r3, [pc, #12]	(1e684 <_ZNSt9exceptionD0Ev+0x10>)
   1e676:	b510      	push	{r4, lr}
   1e678:	6003      	str	r3, [r0, #0]
   1e67a:	4604      	mov	r4, r0
   1e67c:	f7f0 fade 	bl	ec3c <_ZdlPv>
   1e680:	4620      	mov	r0, r4
   1e682:	bd10      	pop	{r4, pc}
   1e684:	000230e8 	.word	0x000230e8

0001e688 <_ZNSt13bad_exceptionD0Ev>:
   1e688:	4b03      	ldr	r3, [pc, #12]	(1e698 <_ZNSt13bad_exceptionD0Ev+0x10>)
   1e68a:	b510      	push	{r4, lr}
   1e68c:	6003      	str	r3, [r0, #0]
   1e68e:	4604      	mov	r4, r0
   1e690:	f7f0 fad4 	bl	ec3c <_ZdlPv>
   1e694:	4620      	mov	r0, r4
   1e696:	bd10      	pop	{r4, pc}
   1e698:	000230e8 	.word	0x000230e8

0001e69c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1e69c:	b570      	push	{r4, r5, r6, lr}
   1e69e:	2310      	movs	r3, #16
   1e6a0:	b084      	sub	sp, #16
   1e6a2:	2500      	movs	r5, #0
   1e6a4:	9302      	str	r3, [sp, #8]
   1e6a6:	6803      	ldr	r3, [r0, #0]
   1e6a8:	9500      	str	r5, [sp, #0]
   1e6aa:	4616      	mov	r6, r2
   1e6ac:	699c      	ldr	r4, [r3, #24]
   1e6ae:	f88d 5004 	strb.w	r5, [sp, #4]
   1e6b2:	466b      	mov	r3, sp
   1e6b4:	9503      	str	r5, [sp, #12]
   1e6b6:	6812      	ldr	r2, [r2, #0]
   1e6b8:	47a0      	blx	r4
   1e6ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e6be:	f003 0306 	and.w	r3, r3, #6	; 0x6
   1e6c2:	2b06      	cmp	r3, #6
   1e6c4:	bf09      	itett	eq
   1e6c6:	9b00      	ldreq	r3, [sp, #0]
   1e6c8:	4628      	movne	r0, r5
   1e6ca:	6033      	streq	r3, [r6, #0]
   1e6cc:	2001      	moveq	r0, #1
   1e6ce:	b004      	add	sp, #16
   1e6d0:	bd70      	pop	{r4, r5, r6, pc}
   1e6d2:	46c0      	nop			(mov r8, r8)

0001e6d4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1e6d4:	9800      	ldr	r0, [sp, #0]
   1e6d6:	4290      	cmp	r0, r2
   1e6d8:	bf0c      	ite	eq
   1e6da:	2006      	moveq	r0, #6
   1e6dc:	2001      	movne	r0, #1
   1e6de:	4770      	bx	lr

0001e6e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   1e6e0:	b530      	push	{r4, r5, lr}
   1e6e2:	b081      	sub	sp, #4
   1e6e4:	4615      	mov	r5, r2
   1e6e6:	461c      	mov	r4, r3
   1e6e8:	f000 f86e 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e6ec:	b128      	cbz	r0, 1e6fa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x1a>
   1e6ee:	2308      	movs	r3, #8
   1e6f0:	2206      	movs	r2, #6
   1e6f2:	6025      	str	r5, [r4, #0]
   1e6f4:	60e3      	str	r3, [r4, #12]
   1e6f6:	7122      	strb	r2, [r4, #4]
   1e6f8:	2001      	movs	r0, #1
   1e6fa:	b001      	add	sp, #4
   1e6fc:	bd30      	pop	{r4, r5, pc}
   1e6fe:	46c0      	nop			(mov r8, r8)

0001e700 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1e700:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e702:	b081      	sub	sp, #4
   1e704:	461c      	mov	r4, r3
   1e706:	9e06      	ldr	r6, [sp, #24]
   1e708:	9b08      	ldr	r3, [sp, #32]
   1e70a:	4605      	mov	r5, r0
   1e70c:	429e      	cmp	r6, r3
   1e70e:	4617      	mov	r7, r2
   1e710:	d00d      	beq.n	1e72e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   1e712:	4628      	mov	r0, r5
   1e714:	4621      	mov	r1, r4
   1e716:	f000 f857 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e71a:	b128      	cbz	r0, 1e728 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1e71c:	9b09      	ldr	r3, [sp, #36]
   1e71e:	9a09      	ldr	r2, [sp, #36]
   1e720:	601e      	str	r6, [r3, #0]
   1e722:	711f      	strb	r7, [r3, #4]
   1e724:	2301      	movs	r3, #1
   1e726:	7193      	strb	r3, [r2, #6]
   1e728:	2000      	movs	r0, #0
   1e72a:	b001      	add	sp, #4
   1e72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e72e:	9907      	ldr	r1, [sp, #28]
   1e730:	f000 f84a 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e734:	2800      	cmp	r0, #0
   1e736:	d0ec      	beq.n	1e712 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
   1e738:	9a09      	ldr	r2, [sp, #36]
   1e73a:	7157      	strb	r7, [r2, #5]
   1e73c:	e7f4      	b.n	1e728 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1e73e:	46c0      	nop			(mov r8, r8)

0001e740 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   1e740:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e742:	b081      	sub	sp, #4
   1e744:	4606      	mov	r6, r0
   1e746:	460d      	mov	r5, r1
   1e748:	4617      	mov	r7, r2
   1e74a:	461c      	mov	r4, r3
   1e74c:	f000 f83c 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1e750:	b918      	cbnz	r0, 1e75a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1e752:	2c03      	cmp	r4, #3
   1e754:	d903      	bls.n	1e75e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1e>
   1e756:	b001      	add	sp, #4
   1e758:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e75a:	2001      	movs	r0, #1
   1e75c:	e7fb      	b.n	1e756 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1e75e:	682b      	ldr	r3, [r5, #0]
   1e760:	4628      	mov	r0, r5
   1e762:	695c      	ldr	r4, [r3, #20]
   1e764:	4631      	mov	r1, r6
   1e766:	463a      	mov	r2, r7
   1e768:	47a0      	blx	r4
   1e76a:	e7f4      	b.n	1e756 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>

0001e76c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1e76c:	4b03      	ldr	r3, [pc, #12]	(1e77c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1e76e:	b510      	push	{r4, lr}
   1e770:	6003      	str	r3, [r0, #0]
   1e772:	4604      	mov	r4, r0
   1e774:	f000 f81c 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1e778:	4620      	mov	r0, r4
   1e77a:	bd10      	pop	{r4, pc}
   1e77c:	00023190 	.word	0x00023190

0001e780 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   1e780:	4b03      	ldr	r3, [pc, #12]	(1e790 <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>)
   1e782:	b510      	push	{r4, lr}
   1e784:	6003      	str	r3, [r0, #0]
   1e786:	4604      	mov	r4, r0
   1e788:	f000 f812 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1e78c:	4620      	mov	r0, r4
   1e78e:	bd10      	pop	{r4, pc}
   1e790:	00023190 	.word	0x00023190

0001e794 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1e794:	4b05      	ldr	r3, [pc, #20]	(1e7ac <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   1e796:	b510      	push	{r4, lr}
   1e798:	6003      	str	r3, [r0, #0]
   1e79a:	4604      	mov	r4, r0
   1e79c:	f000 f808 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1e7a0:	4620      	mov	r0, r4
   1e7a2:	f7f0 fa4b 	bl	ec3c <_ZdlPv>
   1e7a6:	4620      	mov	r0, r4
   1e7a8:	bd10      	pop	{r4, pc}
   1e7aa:	46c0      	nop			(mov r8, r8)
   1e7ac:	00023190 	.word	0x00023190

0001e7b0 <_ZNSt9type_infoD2Ev>:
   1e7b0:	4b01      	ldr	r3, [pc, #4]	(1e7b8 <_ZNSt9type_infoD2Ev+0x8>)
   1e7b2:	6003      	str	r3, [r0, #0]
   1e7b4:	4770      	bx	lr
   1e7b6:	46c0      	nop			(mov r8, r8)
   1e7b8:	000231f0 	.word	0x000231f0

0001e7bc <_ZNSt9type_infoD1Ev>:
   1e7bc:	4b01      	ldr	r3, [pc, #4]	(1e7c4 <_ZNSt9type_infoD1Ev+0x8>)
   1e7be:	6003      	str	r3, [r0, #0]
   1e7c0:	4770      	bx	lr
   1e7c2:	46c0      	nop			(mov r8, r8)
   1e7c4:	000231f0 	.word	0x000231f0

0001e7c8 <_ZNKSt9type_infoeqERKS_>:
   1e7c8:	6840      	ldr	r0, [r0, #4]
   1e7ca:	684b      	ldr	r3, [r1, #4]
   1e7cc:	4298      	cmp	r0, r3
   1e7ce:	bf14      	ite	ne
   1e7d0:	2000      	movne	r0, #0
   1e7d2:	2001      	moveq	r0, #1
   1e7d4:	4770      	bx	lr
   1e7d6:	46c0      	nop			(mov r8, r8)

0001e7d8 <_ZNKSt9type_info14__is_pointer_pEv>:
   1e7d8:	2000      	movs	r0, #0
   1e7da:	4770      	bx	lr

0001e7dc <_ZNKSt9type_info15__is_function_pEv>:
   1e7dc:	2000      	movs	r0, #0
   1e7de:	4770      	bx	lr

0001e7e0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   1e7e0:	6840      	ldr	r0, [r0, #4]
   1e7e2:	684b      	ldr	r3, [r1, #4]
   1e7e4:	4298      	cmp	r0, r3
   1e7e6:	bf14      	ite	ne
   1e7e8:	2000      	movne	r0, #0
   1e7ea:	2001      	moveq	r0, #1
   1e7ec:	4770      	bx	lr
   1e7ee:	46c0      	nop			(mov r8, r8)

0001e7f0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   1e7f0:	2000      	movs	r0, #0
   1e7f2:	4770      	bx	lr

0001e7f4 <_ZNSt9type_infoD0Ev>:
   1e7f4:	4b03      	ldr	r3, [pc, #12]	(1e804 <_ZNSt9type_infoD0Ev+0x10>)
   1e7f6:	b510      	push	{r4, lr}
   1e7f8:	6003      	str	r3, [r0, #0]
   1e7fa:	4604      	mov	r4, r0
   1e7fc:	f7f0 fa1e 	bl	ec3c <_ZdlPv>
   1e800:	4620      	mov	r0, r4
   1e802:	bd10      	pop	{r4, pc}
   1e804:	000231f0 	.word	0x000231f0

0001e808 <__cxa_current_exception_type>:
   1e808:	b500      	push	{lr}
   1e80a:	b081      	sub	sp, #4
   1e80c:	f000 f88c 	bl	1e928 <__cxa_get_globals>
   1e810:	6800      	ldr	r0, [r0, #0]
   1e812:	b100      	cbz	r0, 1e816 <__cxa_current_exception_type+0xe>
   1e814:	6800      	ldr	r0, [r0, #0]
   1e816:	b001      	add	sp, #4
   1e818:	bd00      	pop	{pc}
   1e81a:	46c0      	nop			(mov r8, r8)

0001e81c <__cxa_rethrow>:
   1e81c:	b510      	push	{r4, lr}
   1e81e:	f000 f883 	bl	1e928 <__cxa_get_globals>
   1e822:	6843      	ldr	r3, [r0, #4]
   1e824:	6804      	ldr	r4, [r0, #0]
   1e826:	3301      	adds	r3, #1
   1e828:	6043      	str	r3, [r0, #4]
   1e82a:	b164      	cbz	r4, 1e846 <__cxa_rethrow+0x2a>
   1e82c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e830:	2b47      	cmp	r3, #71
   1e832:	d00a      	beq.n	1e84a <__cxa_rethrow+0x2e>
   1e834:	2300      	movs	r3, #0
   1e836:	6003      	str	r3, [r0, #0]
   1e838:	3420      	adds	r4, #32
   1e83a:	4620      	mov	r0, r4
   1e83c:	f7fd fd38 	bl	1c2b0 <_Unwind_Resume_or_Rethrow>
   1e840:	4620      	mov	r0, r4
   1e842:	f7ff fd9b 	bl	1e37c <__cxa_begin_catch>
   1e846:	f7fe fe65 	bl	1d514 <_ZSt9terminatev>
   1e84a:	f894 3021 	ldrb.w	r3, [r4, #33]
   1e84e:	2b4e      	cmp	r3, #78
   1e850:	d1f0      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e852:	f894 3022 	ldrb.w	r3, [r4, #34]
   1e856:	2b55      	cmp	r3, #85
   1e858:	d1ec      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e85a:	f894 3023 	ldrb.w	r3, [r4, #35]
   1e85e:	2b43      	cmp	r3, #67
   1e860:	d1e8      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e862:	f894 3024 	ldrb.w	r3, [r4, #36]
   1e866:	2b43      	cmp	r3, #67
   1e868:	d1e4      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e86a:	f894 3025 	ldrb.w	r3, [r4, #37]
   1e86e:	2b2b      	cmp	r3, #43
   1e870:	d1e0      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e872:	f894 3026 	ldrb.w	r3, [r4, #38]
   1e876:	2b2b      	cmp	r3, #43
   1e878:	d1dc      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e87a:	f894 3027 	ldrb.w	r3, [r4, #39]
   1e87e:	2b00      	cmp	r3, #0
   1e880:	d1d8      	bne.n	1e834 <__cxa_rethrow+0x18>
   1e882:	6963      	ldr	r3, [r4, #20]
   1e884:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1e888:	6163      	str	r3, [r4, #20]
   1e88a:	e7d5      	b.n	1e838 <__cxa_rethrow+0x1c>

0001e88c <__cxa_throw>:
   1e88c:	4b16      	ldr	r3, [pc, #88]	(1e8e8 <__cxa_throw+0x5c>)
   1e88e:	b510      	push	{r4, lr}
   1e890:	4604      	mov	r4, r0
   1e892:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
   1e896:	6042      	str	r2, [r0, #4]
   1e898:	681a      	ldr	r2, [r3, #0]
   1e89a:	4b14      	ldr	r3, [pc, #80]	(1e8ec <__cxa_throw+0x60>)
   1e89c:	6082      	str	r2, [r0, #8]
   1e89e:	681a      	ldr	r2, [r3, #0]
   1e8a0:	2347      	movs	r3, #71
   1e8a2:	60c2      	str	r2, [r0, #12]
   1e8a4:	224e      	movs	r2, #78
   1e8a6:	f880 2021 	strb.w	r2, [r0, #33]
   1e8aa:	3a0b      	subs	r2, #11
   1e8ac:	f880 3020 	strb.w	r3, [r0, #32]
   1e8b0:	f880 2023 	strb.w	r2, [r0, #35]
   1e8b4:	f880 2024 	strb.w	r2, [r0, #36]
   1e8b8:	330e      	adds	r3, #14
   1e8ba:	4a0d      	ldr	r2, [pc, #52]	(1e8f0 <__cxa_throw+0x64>)
   1e8bc:	f844 1c78 	str.w	r1, [r4, #-120]
   1e8c0:	f880 3022 	strb.w	r3, [r0, #34]
   1e8c4:	212b      	movs	r1, #43
   1e8c6:	3b55      	subs	r3, #85
   1e8c8:	3c58      	subs	r4, #88
   1e8ca:	f880 1025 	strb.w	r1, [r0, #37]
   1e8ce:	f880 1026 	strb.w	r1, [r0, #38]
   1e8d2:	f880 3027 	strb.w	r3, [r0, #39]
   1e8d6:	6282      	str	r2, [r0, #40]
   1e8d8:	4620      	mov	r0, r4
   1e8da:	f7fd fcc5 	bl	1c268 <_Unwind_RaiseException>
   1e8de:	4620      	mov	r0, r4
   1e8e0:	f7ff fd4c 	bl	1e37c <__cxa_begin_catch>
   1e8e4:	f7fe fe16 	bl	1d514 <_ZSt9terminatev>
   1e8e8:	20000034 	.word	0x20000034
   1e8ec:	20000038 	.word	0x20000038
   1e8f0:	0001e8f5 	.word	0x0001e8f5

0001e8f4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   1e8f4:	2801      	cmp	r0, #1
   1e8f6:	b510      	push	{r4, lr}
   1e8f8:	f1a1 0320 	sub.w	r3, r1, #32	; 0x20
   1e8fc:	d80c      	bhi.n	1e918 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x24>
   1e8fe:	685b      	ldr	r3, [r3, #4]
   1e900:	b13b      	cbz	r3, 1e912 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x1e>
   1e902:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1e906:	4620      	mov	r0, r4
   1e908:	4798      	blx	r3
   1e90a:	4620      	mov	r0, r4
   1e90c:	f000 f812 	bl	1e934 <__cxa_free_exception>
   1e910:	bd10      	pop	{r4, pc}
   1e912:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1e916:	e7f8      	b.n	1e90a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
   1e918:	68d8      	ldr	r0, [r3, #12]
   1e91a:	f7fe fded 	bl	1d4f8 <_ZN10__cxxabiv111__terminateEPFvvE>
   1e91e:	46c0      	nop			(mov r8, r8)

0001e920 <__cxa_get_globals_fast>:
   1e920:	4800      	ldr	r0, [pc, #0]	(1e924 <__cxa_get_globals_fast+0x4>)
   1e922:	4770      	bx	lr
   1e924:	20000690 	.word	0x20000690

0001e928 <__cxa_get_globals>:
   1e928:	4800      	ldr	r0, [pc, #0]	(1e92c <__cxa_get_globals+0x4>)
   1e92a:	4770      	bx	lr
   1e92c:	20000690 	.word	0x20000690

0001e930 <_GLOBAL__I___cxa_allocate_exception>:
   1e930:	4770      	bx	lr
   1e932:	46c0      	nop			(mov r8, r8)

0001e934 <__cxa_free_exception>:
   1e934:	b500      	push	{lr}
   1e936:	4a0c      	ldr	r2, [pc, #48]	(1e968 <__cxa_free_exception+0x34>)
   1e938:	b081      	sub	sp, #4
   1e93a:	4282      	cmp	r2, r0
   1e93c:	d803      	bhi.n	1e946 <__cxa_free_exception+0x12>
   1e93e:	f502 6300 	add.w	r3, r2, #2048	; 0x800
   1e942:	4298      	cmp	r0, r3
   1e944:	d304      	bcc.n	1e950 <__cxa_free_exception+0x1c>
   1e946:	3878      	subs	r0, #120
   1e948:	f001 ffc6 	bl	208d8 <free>
   1e94c:	b001      	add	sp, #4
   1e94e:	bd00      	pop	{pc}
   1e950:	ebc2 0200 	rsb	r2, r2, r0
   1e954:	0a52      	lsrs	r2, r2, #9
   1e956:	2301      	movs	r3, #1
   1e958:	4093      	lsls	r3, r2
   1e95a:	4904      	ldr	r1, [pc, #16]	(1e96c <__cxa_free_exception+0x38>)
   1e95c:	ea6f 0303 	mvn.w	r3, r3
   1e960:	680a      	ldr	r2, [r1, #0]
   1e962:	4013      	ands	r3, r2
   1e964:	600b      	str	r3, [r1, #0]
   1e966:	e7f1      	b.n	1e94c <__cxa_free_exception+0x18>
   1e968:	200006a0 	.word	0x200006a0
   1e96c:	20000ea0 	.word	0x20000ea0

0001e970 <__cxa_allocate_exception>:
   1e970:	b530      	push	{r4, r5, lr}
   1e972:	f100 0578 	add.w	r5, r0, #120	; 0x78
   1e976:	b081      	sub	sp, #4
   1e978:	4628      	mov	r0, r5
   1e97a:	f001 ffb9 	bl	208f0 <malloc>
   1e97e:	4604      	mov	r4, r0
   1e980:	b168      	cbz	r0, 1e99e <__cxa_allocate_exception+0x2e>
   1e982:	f7ff ffd1 	bl	1e928 <__cxa_get_globals>
   1e986:	6843      	ldr	r3, [r0, #4]
   1e988:	2100      	movs	r1, #0
   1e98a:	3301      	adds	r3, #1
   1e98c:	6043      	str	r3, [r0, #4]
   1e98e:	2278      	movs	r2, #120
   1e990:	4620      	mov	r0, r4
   1e992:	f002 fa3d 	bl	20e10 <memset>
   1e996:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1e99a:	b001      	add	sp, #4
   1e99c:	bd30      	pop	{r4, r5, pc}
   1e99e:	4912      	ldr	r1, [pc, #72]	(1e9e8 <__cxa_allocate_exception+0x78>)
   1e9a0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   1e9a4:	680a      	ldr	r2, [r1, #0]
   1e9a6:	bf9c      	itt	ls
   1e9a8:	4600      	movls	r0, r0
   1e9aa:	4613      	movls	r3, r2
   1e9ac:	d812      	bhi.n	1e9d4 <__cxa_allocate_exception+0x64>
   1e9ae:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e9b2:	d006      	beq.n	1e9c2 <__cxa_allocate_exception+0x52>
   1e9b4:	3001      	adds	r0, #1
   1e9b6:	2804      	cmp	r0, #4
   1e9b8:	d00c      	beq.n	1e9d4 <__cxa_allocate_exception+0x64>
   1e9ba:	085b      	lsrs	r3, r3, #1
   1e9bc:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e9c0:	d1f8      	bne.n	1e9b4 <__cxa_allocate_exception+0x44>
   1e9c2:	2301      	movs	r3, #1
   1e9c4:	4083      	lsls	r3, r0
   1e9c6:	4313      	orrs	r3, r2
   1e9c8:	600b      	str	r3, [r1, #0]
   1e9ca:	4b08      	ldr	r3, [pc, #32]	(1e9ec <__cxa_allocate_exception+0x7c>)
   1e9cc:	0242      	lsls	r2, r0, #9
   1e9ce:	eb03 0402 	add.w	r4, r3, r2
   1e9d2:	e7d6      	b.n	1e982 <__cxa_allocate_exception+0x12>
   1e9d4:	f7fe fd9e 	bl	1d514 <_ZSt9terminatev>
   1e9d8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1e9dc:	d001      	beq.n	1e9e2 <__cxa_allocate_exception+0x72>
   1e9de:	f7f9 f87b 	bl	17ad8 <__cxa_end_cleanup>
   1e9e2:	f7ff fbf1 	bl	1e1c8 <__cxa_call_unexpected>
   1e9e6:	46c0      	nop			(mov r8, r8)
   1e9e8:	20000ea0 	.word	0x20000ea0
   1e9ec:	200006a0 	.word	0x200006a0

0001e9f0 <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   1e9f0:	2001      	movs	r0, #1
   1e9f2:	4770      	bx	lr

0001e9f4 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   1e9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e9f6:	2b01      	cmp	r3, #1
   1e9f8:	b081      	sub	sp, #4
   1e9fa:	4605      	mov	r5, r0
   1e9fc:	460e      	mov	r6, r1
   1e9fe:	4617      	mov	r7, r2
   1ea00:	461c      	mov	r4, r3
   1ea02:	d908      	bls.n	1ea16 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
   1ea04:	68e8      	ldr	r0, [r5, #12]
   1ea06:	1ca3      	adds	r3, r4, #2
   1ea08:	6802      	ldr	r2, [r0, #0]
   1ea0a:	68f1      	ldr	r1, [r6, #12]
   1ea0c:	6914      	ldr	r4, [r2, #16]
   1ea0e:	463a      	mov	r2, r7
   1ea10:	47a0      	blx	r4
   1ea12:	b001      	add	sp, #4
   1ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea16:	68c0      	ldr	r0, [r0, #12]
   1ea18:	4906      	ldr	r1, [pc, #24]	(1ea34 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
   1ea1a:	f7ff fed5 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1ea1e:	2800      	cmp	r0, #0
   1ea20:	d0f0      	beq.n	1ea04 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   1ea22:	68f0      	ldr	r0, [r6, #12]
   1ea24:	6803      	ldr	r3, [r0, #0]
   1ea26:	68da      	ldr	r2, [r3, #12]
   1ea28:	4790      	blx	r2
   1ea2a:	f080 0001 	eor.w	r0, r0, #1	; 0x1
   1ea2e:	b2c0      	uxtb	r0, r0
   1ea30:	e7ef      	b.n	1ea12 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
   1ea32:	46c0      	nop			(mov r8, r8)
   1ea34:	00022f68 	.word	0x00022f68

0001ea38 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   1ea38:	4b03      	ldr	r3, [pc, #12]	(1ea48 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   1ea3a:	b510      	push	{r4, lr}
   1ea3c:	6003      	str	r3, [r0, #0]
   1ea3e:	4604      	mov	r4, r0
   1ea40:	f000 f860 	bl	1eb04 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1ea44:	4620      	mov	r0, r4
   1ea46:	bd10      	pop	{r4, pc}
   1ea48:	00023848 	.word	0x00023848

0001ea4c <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
   1ea4c:	4b03      	ldr	r3, [pc, #12]	(1ea5c <_ZN10__cxxabiv119__pointer_type_infoD2Ev+0x10>)
   1ea4e:	b510      	push	{r4, lr}
   1ea50:	6003      	str	r3, [r0, #0]
   1ea52:	4604      	mov	r4, r0
   1ea54:	f000 f856 	bl	1eb04 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1ea58:	4620      	mov	r0, r4
   1ea5a:	bd10      	pop	{r4, pc}
   1ea5c:	00023848 	.word	0x00023848

0001ea60 <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   1ea60:	4b05      	ldr	r3, [pc, #20]	(1ea78 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   1ea62:	b510      	push	{r4, lr}
   1ea64:	6003      	str	r3, [r0, #0]
   1ea66:	4604      	mov	r4, r0
   1ea68:	f000 f84c 	bl	1eb04 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	f7f0 f8e5 	bl	ec3c <_ZdlPv>
   1ea72:	4620      	mov	r0, r4
   1ea74:	bd10      	pop	{r4, pc}
   1ea76:	46c0      	nop			(mov r8, r8)
   1ea78:	00023848 	.word	0x00023848

0001ea7c <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   1ea7c:	68c0      	ldr	r0, [r0, #12]
   1ea7e:	b510      	push	{r4, lr}
   1ea80:	f8d0 c000 	ldr.w	ip, [r0]
   1ea84:	68c9      	ldr	r1, [r1, #12]
   1ea86:	3302      	adds	r3, #2
   1ea88:	f8dc 4010 	ldr.w	r4, [ip, #16]
   1ea8c:	47a0      	blx	r4
   1ea8e:	bd10      	pop	{r4, pc}

0001ea90 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   1ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea94:	4606      	mov	r6, r0
   1ea96:	460d      	mov	r5, r1
   1ea98:	4690      	mov	r8, r2
   1ea9a:	461f      	mov	r7, r3
   1ea9c:	f7ff fe94 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1eaa0:	2800      	cmp	r0, #0
   1eaa2:	d121      	bne.n	1eae8 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   1eaa4:	6833      	ldr	r3, [r6, #0]
   1eaa6:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1eaaa:	2d00      	cmp	r5, #0
   1eaac:	d01e      	beq.n	1eaec <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   1eaae:	682b      	ldr	r3, [r5, #0]
   1eab0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   1eab4:	f7ff fe88 	bl	1e7c8 <_ZNKSt9type_infoeqERKS_>
   1eab8:	b198      	cbz	r0, 1eae2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1eaba:	f017 0f01 	tst.w	r7, #1	; 0x1
   1eabe:	d010      	beq.n	1eae2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1eac0:	68b2      	ldr	r2, [r6, #8]
   1eac2:	68ab      	ldr	r3, [r5, #8]
   1eac4:	4393      	bics	r3, r2
   1eac6:	d10c      	bne.n	1eae2 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1eac8:	f012 0f01 	tst.w	r2, #1	; 0x1
   1eacc:	6833      	ldr	r3, [r6, #0]
   1eace:	bf08      	it	eq
   1ead0:	f027 0701 	biceq.w	r7, r7, #1	; 0x1
   1ead4:	699c      	ldr	r4, [r3, #24]
   1ead6:	4630      	mov	r0, r6
   1ead8:	4629      	mov	r1, r5
   1eada:	4642      	mov	r2, r8
   1eadc:	463b      	mov	r3, r7
   1eade:	47a0      	blx	r4
   1eae0:	e000      	b.n	1eae4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1eae2:	2000      	movs	r0, #0
   1eae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eae8:	2001      	movs	r0, #1
   1eaea:	e7fb      	b.n	1eae4 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1eaec:	f7ff fa70 	bl	1dfd0 <__cxa_bad_typeid>

0001eaf0 <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   1eaf0:	4b03      	ldr	r3, [pc, #12]	(1eb00 <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   1eaf2:	b510      	push	{r4, lr}
   1eaf4:	6003      	str	r3, [r0, #0]
   1eaf6:	4604      	mov	r4, r0
   1eaf8:	f7ff fe5a 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1eafc:	4620      	mov	r0, r4
   1eafe:	bd10      	pop	{r4, pc}
   1eb00:	000238a0 	.word	0x000238a0

0001eb04 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
   1eb04:	4b03      	ldr	r3, [pc, #12]	(1eb14 <_ZN10__cxxabiv117__pbase_type_infoD2Ev+0x10>)
   1eb06:	b510      	push	{r4, lr}
   1eb08:	6003      	str	r3, [r0, #0]
   1eb0a:	4604      	mov	r4, r0
   1eb0c:	f7ff fe50 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1eb10:	4620      	mov	r0, r4
   1eb12:	bd10      	pop	{r4, pc}
   1eb14:	000238a0 	.word	0x000238a0

0001eb18 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   1eb18:	4b05      	ldr	r3, [pc, #20]	(1eb30 <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   1eb1a:	b510      	push	{r4, lr}
   1eb1c:	6003      	str	r3, [r0, #0]
   1eb1e:	4604      	mov	r4, r0
   1eb20:	f7ff fe46 	bl	1e7b0 <_ZNSt9type_infoD2Ev>
   1eb24:	4620      	mov	r0, r4
   1eb26:	f7f0 f889 	bl	ec3c <_ZdlPv>
   1eb2a:	4620      	mov	r0, r4
   1eb2c:	bd10      	pop	{r4, pc}
   1eb2e:	46c0      	nop			(mov r8, r8)
   1eb30:	000238a0 	.word	0x000238a0

0001eb34 <cos>:
   1eb34:	b530      	push	{r4, r5, lr}
   1eb36:	4b1e      	ldr	r3, [pc, #120]	(1ebb0 <cos+0x7c>)
   1eb38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1eb3c:	429a      	cmp	r2, r3
   1eb3e:	b087      	sub	sp, #28
   1eb40:	dc02      	bgt.n	1eb48 <cos+0x14>
   1eb42:	2200      	movs	r2, #0
   1eb44:	2300      	movs	r3, #0
   1eb46:	e017      	b.n	1eb78 <cos+0x44>
   1eb48:	4b1a      	ldr	r3, [pc, #104]	(1ebb4 <cos+0x80>)
   1eb4a:	429a      	cmp	r2, r3
   1eb4c:	dd04      	ble.n	1eb58 <cos+0x24>
   1eb4e:	4602      	mov	r2, r0
   1eb50:	460b      	mov	r3, r1
   1eb52:	f7fb fde1 	bl	1a718 <__aeabi_dsub>
   1eb56:	e029      	b.n	1ebac <cos+0x78>
   1eb58:	aa02      	add	r2, sp, #8
   1eb5a:	f000 f9a9 	bl	1eeb0 <__ieee754_rem_pio2>
   1eb5e:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1eb62:	2b01      	cmp	r3, #1
   1eb64:	d00b      	beq.n	1eb7e <cos+0x4a>
   1eb66:	2b02      	cmp	r3, #2
   1eb68:	d011      	beq.n	1eb8e <cos+0x5a>
   1eb6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1eb6e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1eb72:	b9ab      	cbnz	r3, 1eba0 <cos+0x6c>
   1eb74:	4622      	mov	r2, r4
   1eb76:	462b      	mov	r3, r5
   1eb78:	f000 fc82 	bl	1f480 <__kernel_cos>
   1eb7c:	e016      	b.n	1ebac <cos+0x78>
   1eb7e:	9300      	str	r3, [sp, #0]
   1eb80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1eb84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1eb88:	f001 f8ea 	bl	1fd60 <__kernel_sin>
   1eb8c:	e005      	b.n	1eb9a <cos+0x66>
   1eb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1eb92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1eb96:	f000 fc73 	bl	1f480 <__kernel_cos>
   1eb9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1eb9e:	e005      	b.n	1ebac <cos+0x78>
   1eba0:	2301      	movs	r3, #1
   1eba2:	9300      	str	r3, [sp, #0]
   1eba4:	4622      	mov	r2, r4
   1eba6:	462b      	mov	r3, r5
   1eba8:	f001 f8da 	bl	1fd60 <__kernel_sin>
   1ebac:	b007      	add	sp, #28
   1ebae:	bd30      	pop	{r4, r5, pc}
   1ebb0:	3fe921fb 	.word	0x3fe921fb
   1ebb4:	7fefffff 	.word	0x7fefffff

0001ebb8 <sin>:
   1ebb8:	b530      	push	{r4, r5, lr}
   1ebba:	4b20      	ldr	r3, [pc, #128]	(1ec3c <sin+0x84>)
   1ebbc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1ebc0:	429a      	cmp	r2, r3
   1ebc2:	b087      	sub	sp, #28
   1ebc4:	dc04      	bgt.n	1ebd0 <sin+0x18>
   1ebc6:	2300      	movs	r3, #0
   1ebc8:	9300      	str	r3, [sp, #0]
   1ebca:	2200      	movs	r2, #0
   1ebcc:	2300      	movs	r3, #0
   1ebce:	e019      	b.n	1ec04 <sin+0x4c>
   1ebd0:	4b1b      	ldr	r3, [pc, #108]	(1ec40 <sin+0x88>)
   1ebd2:	429a      	cmp	r2, r3
   1ebd4:	dd04      	ble.n	1ebe0 <sin+0x28>
   1ebd6:	4602      	mov	r2, r0
   1ebd8:	460b      	mov	r3, r1
   1ebda:	f7fb fd9d 	bl	1a718 <__aeabi_dsub>
   1ebde:	e02a      	b.n	1ec36 <sin+0x7e>
   1ebe0:	aa02      	add	r2, sp, #8
   1ebe2:	f000 f965 	bl	1eeb0 <__ieee754_rem_pio2>
   1ebe6:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1ebea:	2b01      	cmp	r3, #1
   1ebec:	d00d      	beq.n	1ec0a <sin+0x52>
   1ebee:	2b02      	cmp	r3, #2
   1ebf0:	d012      	beq.n	1ec18 <sin+0x60>
   1ebf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ebf6:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1ebfa:	b9b3      	cbnz	r3, 1ec2a <sin+0x72>
   1ebfc:	2301      	movs	r3, #1
   1ebfe:	9300      	str	r3, [sp, #0]
   1ec00:	4622      	mov	r2, r4
   1ec02:	462b      	mov	r3, r5
   1ec04:	f001 f8ac 	bl	1fd60 <__kernel_sin>
   1ec08:	e015      	b.n	1ec36 <sin+0x7e>
   1ec0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ec0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ec12:	f000 fc35 	bl	1f480 <__kernel_cos>
   1ec16:	e00e      	b.n	1ec36 <sin+0x7e>
   1ec18:	2301      	movs	r3, #1
   1ec1a:	9300      	str	r3, [sp, #0]
   1ec1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ec20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ec24:	f001 f89c 	bl	1fd60 <__kernel_sin>
   1ec28:	e003      	b.n	1ec32 <sin+0x7a>
   1ec2a:	4622      	mov	r2, r4
   1ec2c:	462b      	mov	r3, r5
   1ec2e:	f000 fc27 	bl	1f480 <__kernel_cos>
   1ec32:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1ec36:	b007      	add	sp, #28
   1ec38:	bd30      	pop	{r4, r5, pc}
   1ec3a:	46c0      	nop			(mov r8, r8)
   1ec3c:	3fe921fb 	.word	0x3fe921fb
   1ec40:	7fefffff 	.word	0x7fefffff

0001ec44 <atan2>:
   1ec44:	b500      	push	{lr}
   1ec46:	b081      	sub	sp, #4
   1ec48:	f000 f856 	bl	1ecf8 <__ieee754_atan2>
   1ec4c:	b001      	add	sp, #4
   1ec4e:	bd00      	pop	{pc}

0001ec50 <sqrt>:
   1ec50:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec52:	b08f      	sub	sp, #60
   1ec54:	4604      	mov	r4, r0
   1ec56:	460d      	mov	r5, r1
   1ec58:	f000 fb3e 	bl	1f2d8 <__ieee754_sqrt>
   1ec5c:	4a24      	ldr	r2, [pc, #144]	(1ecf0 <sqrt+0xa0>)
   1ec5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ec62:	f992 3000 	ldrsb.w	r3, [r2]
   1ec66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ec6a:	d03c      	beq.n	1ece6 <sqrt+0x96>
   1ec6c:	4620      	mov	r0, r4
   1ec6e:	4629      	mov	r1, r5
   1ec70:	f001 fb56 	bl	20320 <__isnand>
   1ec74:	9001      	str	r0, [sp, #4]
   1ec76:	2800      	cmp	r0, #0
   1ec78:	d135      	bne.n	1ece6 <sqrt+0x96>
   1ec7a:	2600      	movs	r6, #0
   1ec7c:	2700      	movs	r7, #0
   1ec7e:	4620      	mov	r0, r4
   1ec80:	4629      	mov	r1, r5
   1ec82:	4632      	mov	r2, r6
   1ec84:	463b      	mov	r3, r7
   1ec86:	f7fc f96b 	bl	1af60 <__aeabi_dcmplt>
   1ec8a:	2800      	cmp	r0, #0
   1ec8c:	d02b      	beq.n	1ece6 <sqrt+0x96>
   1ec8e:	2301      	movs	r3, #1
   1ec90:	9304      	str	r3, [sp, #16]
   1ec92:	4a17      	ldr	r2, [pc, #92]	(1ecf0 <sqrt+0xa0>)
   1ec94:	4b17      	ldr	r3, [pc, #92]	(1ecf4 <sqrt+0xa4>)
   1ec96:	e9cd 4508 	strd	r4, r5, [sp, #32]
   1ec9a:	9305      	str	r3, [sp, #20]
   1ec9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1eca0:	9b01      	ldr	r3, [sp, #4]
   1eca2:	7814      	ldrb	r4, [r2, #0]
   1eca4:	930c      	str	r3, [sp, #48]
   1eca6:	b914      	cbnz	r4, 1ecae <sqrt+0x5e>
   1eca8:	e9cd 670a 	strd	r6, r7, [sp, #40]
   1ecac:	e009      	b.n	1ecc2 <sqrt+0x72>
   1ecae:	4630      	mov	r0, r6
   1ecb0:	4639      	mov	r1, r7
   1ecb2:	4632      	mov	r2, r6
   1ecb4:	463b      	mov	r3, r7
   1ecb6:	f7fc f80d 	bl	1acd4 <__aeabi_ddiv>
   1ecba:	2c02      	cmp	r4, #2
   1ecbc:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1ecc0:	d003      	beq.n	1ecca <sqrt+0x7a>
   1ecc2:	a804      	add	r0, sp, #16
   1ecc4:	f001 fb3a 	bl	2033c <matherr>
   1ecc8:	b918      	cbnz	r0, 1ecd2 <sqrt+0x82>
   1ecca:	f001 fbc5 	bl	20458 <__errno>
   1ecce:	2321      	movs	r3, #33
   1ecd0:	6003      	str	r3, [r0, #0]
   1ecd2:	9b0c      	ldr	r3, [sp, #48]
   1ecd4:	b11b      	cbz	r3, 1ecde <sqrt+0x8e>
   1ecd6:	f001 fbbf 	bl	20458 <__errno>
   1ecda:	9b0c      	ldr	r3, [sp, #48]
   1ecdc:	6003      	str	r3, [r0, #0]
   1ecde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1ece2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ece6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ecea:	b00f      	add	sp, #60
   1ecec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ecee:	46c0      	nop			(mov r8, r8)
   1ecf0:	20000040 	.word	0x20000040
   1ecf4:	000238f0 	.word	0x000238f0

0001ecf8 <__ieee754_atan2>:
   1ecf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ecfa:	b089      	sub	sp, #36
   1ecfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ed00:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1ed04:	9307      	str	r3, [sp, #28]
   1ed06:	f1c2 0300 	rsb	r3, r2, #0	; 0x0
   1ed0a:	4313      	orrs	r3, r2
   1ed0c:	4616      	mov	r6, r2
   1ed0e:	4a66      	ldr	r2, [pc, #408]	(1eea8 <__ieee754_atan2+0x1b0>)
   1ed10:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
   1ed14:	4293      	cmp	r3, r2
   1ed16:	4604      	mov	r4, r0
   1ed18:	460d      	mov	r5, r1
   1ed1a:	9001      	str	r0, [sp, #4]
   1ed1c:	d808      	bhi.n	1ed30 <__ieee754_atan2+0x38>
   1ed1e:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
   1ed22:	4303      	orrs	r3, r0
   1ed24:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   1ed28:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   1ed2c:	4293      	cmp	r3, r2
   1ed2e:	d904      	bls.n	1ed3a <__ieee754_atan2+0x42>
   1ed30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ed34:	f7fb fcf2 	bl	1a71c <__adddf3>
   1ed38:	e08e      	b.n	1ee58 <__ieee754_atan2+0x160>
   1ed3a:	9c07      	ldr	r4, [sp, #28]
   1ed3c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   1ed40:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1ed44:	4333      	orrs	r3, r6
   1ed46:	d102      	bne.n	1ed4e <__ieee754_atan2+0x56>
   1ed48:	f001 f8c2 	bl	1fed0 <atan>
   1ed4c:	e084      	b.n	1ee58 <__ieee754_atan2+0x160>
   1ed4e:	9a07      	ldr	r2, [sp, #28]
   1ed50:	1793      	asrs	r3, r2, #30
   1ed52:	f003 0302 	and.w	r3, r3, #2	; 0x2
   1ed56:	ea43 74d1 	orr.w	r4, r3, r1, lsr #31
   1ed5a:	9b01      	ldr	r3, [sp, #4]
   1ed5c:	ea5c 0303 	orrs.w	r3, ip, r3
   1ed60:	d105      	bne.n	1ed6e <__ieee754_atan2+0x76>
   1ed62:	2c03      	cmp	r4, #3
   1ed64:	d803      	bhi.n	1ed6e <__ieee754_atan2+0x76>
   1ed66:	e8df f004 	tbb	[pc, r4]
   1ed6a:	7777      	.short	0x7777
   1ed6c:	2b28      	.short	0x2b28
   1ed6e:	433e      	orrs	r6, r7
   1ed70:	d02c      	beq.n	1edcc <__ieee754_atan2+0xd4>
   1ed72:	4b4d      	ldr	r3, [pc, #308]	(1eea8 <__ieee754_atan2+0x1b0>)
   1ed74:	429f      	cmp	r7, r3
   1ed76:	d126      	bne.n	1edc6 <__ieee754_atan2+0xce>
   1ed78:	45bc      	cmp	ip, r7
   1ed7a:	d111      	bne.n	1eda0 <__ieee754_atan2+0xa8>
   1ed7c:	2c03      	cmp	r4, #3
   1ed7e:	d822      	bhi.n	1edc6 <__ieee754_atan2+0xce>
   1ed80:	e8df f004 	tbb	[pc, r4]
   1ed84:	0b080205 	.word	0x0b080205
   1ed88:	a035      	add	r0, pc, #212	(adr r0, 1ee60 <__ieee754_atan2+0x168>)
   1ed8a:	c803      	ldmia	r0!, {r0, r1}
   1ed8c:	e064      	b.n	1ee58 <__ieee754_atan2+0x160>
   1ed8e:	a036      	add	r0, pc, #216	(adr r0, 1ee68 <__ieee754_atan2+0x170>)
   1ed90:	c803      	ldmia	r0!, {r0, r1}
   1ed92:	e061      	b.n	1ee58 <__ieee754_atan2+0x160>
   1ed94:	a036      	add	r0, pc, #216	(adr r0, 1ee70 <__ieee754_atan2+0x178>)
   1ed96:	c803      	ldmia	r0!, {r0, r1}
   1ed98:	e05e      	b.n	1ee58 <__ieee754_atan2+0x160>
   1ed9a:	a037      	add	r0, pc, #220	(adr r0, 1ee78 <__ieee754_atan2+0x180>)
   1ed9c:	c803      	ldmia	r0!, {r0, r1}
   1ed9e:	e05b      	b.n	1ee58 <__ieee754_atan2+0x160>
   1eda0:	2c03      	cmp	r4, #3
   1eda2:	d810      	bhi.n	1edc6 <__ieee754_atan2+0xce>
   1eda4:	e8df f004 	tbb	[pc, r4]
   1eda8:	0c090206 	.word	0x0c090206
   1edac:	2000      	movs	r0, #0
   1edae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1edb2:	e051      	b.n	1ee58 <__ieee754_atan2+0x160>
   1edb4:	2000      	movs	r0, #0
   1edb6:	2100      	movs	r1, #0
   1edb8:	e04e      	b.n	1ee58 <__ieee754_atan2+0x160>
   1edba:	a031      	add	r0, pc, #196	(adr r0, 1ee80 <__ieee754_atan2+0x188>)
   1edbc:	c803      	ldmia	r0!, {r0, r1}
   1edbe:	e04b      	b.n	1ee58 <__ieee754_atan2+0x160>
   1edc0:	a031      	add	r0, pc, #196	(adr r0, 1ee88 <__ieee754_atan2+0x190>)
   1edc2:	c803      	ldmia	r0!, {r0, r1}
   1edc4:	e048      	b.n	1ee58 <__ieee754_atan2+0x160>
   1edc6:	4b38      	ldr	r3, [pc, #224]	(1eea8 <__ieee754_atan2+0x1b0>)
   1edc8:	459c      	cmp	ip, r3
   1edca:	d107      	bne.n	1eddc <__ieee754_atan2+0xe4>
   1edcc:	2d00      	cmp	r5, #0
   1edce:	db02      	blt.n	1edd6 <__ieee754_atan2+0xde>
   1edd0:	a02f      	add	r0, pc, #188	(adr r0, 1ee90 <__ieee754_atan2+0x198>)
   1edd2:	c803      	ldmia	r0!, {r0, r1}
   1edd4:	e040      	b.n	1ee58 <__ieee754_atan2+0x160>
   1edd6:	a030      	add	r0, pc, #192	(adr r0, 1ee98 <__ieee754_atan2+0x1a0>)
   1edd8:	c803      	ldmia	r0!, {r0, r1}
   1edda:	e03d      	b.n	1ee58 <__ieee754_atan2+0x160>
   1eddc:	ebc7 030c 	rsb	r3, r7, ip
   1ede0:	151b      	asrs	r3, r3, #20
   1ede2:	2b3c      	cmp	r3, #60
   1ede4:	dd02      	ble.n	1edec <__ieee754_atan2+0xf4>
   1ede6:	a22a      	add	r2, pc, #168	(adr r2, 1ee90 <__ieee754_atan2+0x198>)
   1ede8:	ca0c      	ldmia	r2!, {r2, r3}
   1edea:	e015      	b.n	1ee18 <__ieee754_atan2+0x120>
   1edec:	9a07      	ldr	r2, [sp, #28]
   1edee:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
   1edf2:	bfac      	ite	ge
   1edf4:	2300      	movge	r3, #0
   1edf6:	2301      	movlt	r3, #1
   1edf8:	ea13 72d2 	ands.w	r2, r3, r2, lsr #31
   1edfc:	d002      	beq.n	1ee04 <__ieee754_atan2+0x10c>
   1edfe:	2200      	movs	r2, #0
   1ee00:	2300      	movs	r3, #0
   1ee02:	e009      	b.n	1ee18 <__ieee754_atan2+0x120>
   1ee04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ee08:	f7fb ff64 	bl	1acd4 <__aeabi_ddiv>
   1ee0c:	f001 fa08 	bl	20220 <fabs>
   1ee10:	f001 f85e 	bl	1fed0 <atan>
   1ee14:	4602      	mov	r2, r0
   1ee16:	460b      	mov	r3, r1
   1ee18:	2c01      	cmp	r4, #1
   1ee1a:	d003      	beq.n	1ee24 <__ieee754_atan2+0x12c>
   1ee1c:	2c02      	cmp	r4, #2
   1ee1e:	d006      	beq.n	1ee2e <__ieee754_atan2+0x136>
   1ee20:	b984      	cbnz	r4, 1ee44 <__ieee754_atan2+0x14c>
   1ee22:	e001      	b.n	1ee28 <__ieee754_atan2+0x130>
   1ee24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ee28:	4610      	mov	r0, r2
   1ee2a:	4619      	mov	r1, r3
   1ee2c:	e014      	b.n	1ee58 <__ieee754_atan2+0x160>
   1ee2e:	4610      	mov	r0, r2
   1ee30:	4619      	mov	r1, r3
   1ee32:	a21b      	add	r2, pc, #108	(adr r2, 1eea0 <__ieee754_atan2+0x1a8>)
   1ee34:	ca0c      	ldmia	r2!, {r2, r3}
   1ee36:	f7fb fc6f 	bl	1a718 <__aeabi_dsub>
   1ee3a:	4602      	mov	r2, r0
   1ee3c:	460b      	mov	r3, r1
   1ee3e:	a010      	add	r0, pc, #64	(adr r0, 1ee80 <__ieee754_atan2+0x188>)
   1ee40:	c803      	ldmia	r0!, {r0, r1}
   1ee42:	e007      	b.n	1ee54 <__ieee754_atan2+0x15c>
   1ee44:	4610      	mov	r0, r2
   1ee46:	4619      	mov	r1, r3
   1ee48:	a215      	add	r2, pc, #84	(adr r2, 1eea0 <__ieee754_atan2+0x1a8>)
   1ee4a:	ca0c      	ldmia	r2!, {r2, r3}
   1ee4c:	f7fb fc64 	bl	1a718 <__aeabi_dsub>
   1ee50:	a20b      	add	r2, pc, #44	(adr r2, 1ee80 <__ieee754_atan2+0x188>)
   1ee52:	ca0c      	ldmia	r2!, {r2, r3}
   1ee54:	f7fb fc60 	bl	1a718 <__aeabi_dsub>
   1ee58:	b009      	add	sp, #36
   1ee5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ee5c:	46c0      	nop			(mov r8, r8)
   1ee5e:	46c0      	nop			(mov r8, r8)
   1ee60:	54442d18 	.word	0x54442d18
   1ee64:	bfe921fb 	.word	0xbfe921fb
   1ee68:	54442d18 	.word	0x54442d18
   1ee6c:	3fe921fb 	.word	0x3fe921fb
   1ee70:	7f3321d2 	.word	0x7f3321d2
   1ee74:	4002d97c 	.word	0x4002d97c
   1ee78:	7f3321d2 	.word	0x7f3321d2
   1ee7c:	c002d97c 	.word	0xc002d97c
   1ee80:	54442d18 	.word	0x54442d18
   1ee84:	400921fb 	.word	0x400921fb
   1ee88:	54442d18 	.word	0x54442d18
   1ee8c:	c00921fb 	.word	0xc00921fb
   1ee90:	54442d18 	.word	0x54442d18
   1ee94:	3ff921fb 	.word	0x3ff921fb
   1ee98:	54442d18 	.word	0x54442d18
   1ee9c:	bff921fb 	.word	0xbff921fb
   1eea0:	33145c07 	.word	0x33145c07
   1eea4:	3ca1a626 	.word	0x3ca1a626
   1eea8:	7ff00000 	.word	0x7ff00000
   1eeac:	46c046c0 	.word	0x46c046c0

0001eeb0 <__ieee754_rem_pio2>:
   1eeb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eeb2:	4b9b      	ldr	r3, [pc, #620]	(1f120 <__ieee754_rem_pio2+0x270>)
   1eeb4:	b093      	sub	sp, #76
   1eeb6:	9206      	str	r2, [sp, #24]
   1eeb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1eebc:	429a      	cmp	r2, r3
   1eebe:	910a      	str	r1, [sp, #40]
   1eec0:	9209      	str	r2, [sp, #36]
   1eec2:	dc09      	bgt.n	1eed8 <__ieee754_rem_pio2+0x28>
   1eec4:	9b06      	ldr	r3, [sp, #24]
   1eec6:	9e06      	ldr	r6, [sp, #24]
   1eec8:	e883 0003 	stmia.w	r3, {r0, r1}
   1eecc:	2200      	movs	r2, #0
   1eece:	2300      	movs	r3, #0
   1eed0:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1eed4:	2200      	movs	r2, #0
   1eed6:	e17f      	b.n	1f1d8 <__ieee754_rem_pio2+0x328>
   1eed8:	4b92      	ldr	r3, [pc, #584]	(1f124 <__ieee754_rem_pio2+0x274>)
   1eeda:	9a09      	ldr	r2, [sp, #36]
   1eedc:	429a      	cmp	r2, r3
   1eede:	dc7e      	bgt.n	1efde <__ieee754_rem_pio2+0x12e>
   1eee0:	9b0a      	ldr	r3, [sp, #40]
   1eee2:	2b00      	cmp	r3, #0
   1eee4:	dd3a      	ble.n	1ef5c <__ieee754_rem_pio2+0xac>
   1eee6:	a282      	add	r2, pc, #520	(adr r2, 1f0f0 <__ieee754_rem_pio2+0x240>)
   1eee8:	ca0c      	ldmia	r2!, {r2, r3}
   1eeea:	f7fb fc15 	bl	1a718 <__aeabi_dsub>
   1eeee:	4b8e      	ldr	r3, [pc, #568]	(1f128 <__ieee754_rem_pio2+0x278>)
   1eef0:	9e09      	ldr	r6, [sp, #36]
   1eef2:	4604      	mov	r4, r0
   1eef4:	429e      	cmp	r6, r3
   1eef6:	460d      	mov	r5, r1
   1eef8:	d015      	beq.n	1ef26 <__ieee754_rem_pio2+0x76>
   1eefa:	a27f      	add	r2, pc, #508	(adr r2, 1f0f8 <__ieee754_rem_pio2+0x248>)
   1eefc:	ca0c      	ldmia	r2!, {r2, r3}
   1eefe:	f7fb fc0b 	bl	1a718 <__aeabi_dsub>
   1ef02:	4602      	mov	r2, r0
   1ef04:	9806      	ldr	r0, [sp, #24]
   1ef06:	460b      	mov	r3, r1
   1ef08:	e880 000c 	stmia.w	r0, {r2, r3}
   1ef0c:	4629      	mov	r1, r5
   1ef0e:	4620      	mov	r0, r4
   1ef10:	f7fb fc02 	bl	1a718 <__aeabi_dsub>
   1ef14:	a278      	add	r2, pc, #480	(adr r2, 1f0f8 <__ieee754_rem_pio2+0x248>)
   1ef16:	ca0c      	ldmia	r2!, {r2, r3}
   1ef18:	f7fb fbfe 	bl	1a718 <__aeabi_dsub>
   1ef1c:	9a06      	ldr	r2, [sp, #24]
   1ef1e:	2301      	movs	r3, #1
   1ef20:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1ef24:	e168      	b.n	1f1f8 <__ieee754_rem_pio2+0x348>
   1ef26:	a276      	add	r2, pc, #472	(adr r2, 1f100 <__ieee754_rem_pio2+0x250>)
   1ef28:	ca0c      	ldmia	r2!, {r2, r3}
   1ef2a:	f7fb fbf5 	bl	1a718 <__aeabi_dsub>
   1ef2e:	a276      	add	r2, pc, #472	(adr r2, 1f108 <__ieee754_rem_pio2+0x258>)
   1ef30:	ca0c      	ldmia	r2!, {r2, r3}
   1ef32:	4604      	mov	r4, r0
   1ef34:	460d      	mov	r5, r1
   1ef36:	f7fb fbef 	bl	1a718 <__aeabi_dsub>
   1ef3a:	9e06      	ldr	r6, [sp, #24]
   1ef3c:	4602      	mov	r2, r0
   1ef3e:	460b      	mov	r3, r1
   1ef40:	e886 000c 	stmia.w	r6, {r2, r3}
   1ef44:	4620      	mov	r0, r4
   1ef46:	4629      	mov	r1, r5
   1ef48:	f7fb fbe6 	bl	1a718 <__aeabi_dsub>
   1ef4c:	a26e      	add	r2, pc, #440	(adr r2, 1f108 <__ieee754_rem_pio2+0x258>)
   1ef4e:	ca0c      	ldmia	r2!, {r2, r3}
   1ef50:	f7fb fbe2 	bl	1a718 <__aeabi_dsub>
   1ef54:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1ef58:	2001      	movs	r0, #1
   1ef5a:	e1a8      	b.n	1f2ae <__ieee754_rem_pio2+0x3fe>
   1ef5c:	a264      	add	r2, pc, #400	(adr r2, 1f0f0 <__ieee754_rem_pio2+0x240>)
   1ef5e:	ca0c      	ldmia	r2!, {r2, r3}
   1ef60:	f7fb fbdc 	bl	1a71c <__adddf3>
   1ef64:	4b70      	ldr	r3, [pc, #448]	(1f128 <__ieee754_rem_pio2+0x278>)
   1ef66:	460d      	mov	r5, r1
   1ef68:	9909      	ldr	r1, [sp, #36]
   1ef6a:	4604      	mov	r4, r0
   1ef6c:	4299      	cmp	r1, r3
   1ef6e:	d017      	beq.n	1efa0 <__ieee754_rem_pio2+0xf0>
   1ef70:	a261      	add	r2, pc, #388	(adr r2, 1f0f8 <__ieee754_rem_pio2+0x248>)
   1ef72:	ca0c      	ldmia	r2!, {r2, r3}
   1ef74:	4620      	mov	r0, r4
   1ef76:	4629      	mov	r1, r5
   1ef78:	f7fb fbd0 	bl	1a71c <__adddf3>
   1ef7c:	9e06      	ldr	r6, [sp, #24]
   1ef7e:	4602      	mov	r2, r0
   1ef80:	460b      	mov	r3, r1
   1ef82:	e886 000c 	stmia.w	r6, {r2, r3}
   1ef86:	4620      	mov	r0, r4
   1ef88:	4629      	mov	r1, r5
   1ef8a:	f7fb fbc5 	bl	1a718 <__aeabi_dsub>
   1ef8e:	a25a      	add	r2, pc, #360	(adr r2, 1f0f8 <__ieee754_rem_pio2+0x248>)
   1ef90:	ca0c      	ldmia	r2!, {r2, r3}
   1ef92:	f7fb fbc3 	bl	1a71c <__adddf3>
   1ef96:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1ef9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ef9e:	e186      	b.n	1f2ae <__ieee754_rem_pio2+0x3fe>
   1efa0:	4620      	mov	r0, r4
   1efa2:	4629      	mov	r1, r5
   1efa4:	a256      	add	r2, pc, #344	(adr r2, 1f100 <__ieee754_rem_pio2+0x250>)
   1efa6:	ca0c      	ldmia	r2!, {r2, r3}
   1efa8:	f7fb fbb8 	bl	1a71c <__adddf3>
   1efac:	a256      	add	r2, pc, #344	(adr r2, 1f108 <__ieee754_rem_pio2+0x258>)
   1efae:	ca0c      	ldmia	r2!, {r2, r3}
   1efb0:	4604      	mov	r4, r0
   1efb2:	460d      	mov	r5, r1
   1efb4:	f7fb fbb2 	bl	1a71c <__adddf3>
   1efb8:	460b      	mov	r3, r1
   1efba:	9906      	ldr	r1, [sp, #24]
   1efbc:	4602      	mov	r2, r0
   1efbe:	e881 000c 	stmia.w	r1, {r2, r3}
   1efc2:	4620      	mov	r0, r4
   1efc4:	4629      	mov	r1, r5
   1efc6:	f7fb fba7 	bl	1a718 <__aeabi_dsub>
   1efca:	a24f      	add	r2, pc, #316	(adr r2, 1f108 <__ieee754_rem_pio2+0x258>)
   1efcc:	ca0c      	ldmia	r2!, {r2, r3}
   1efce:	f7fb fba5 	bl	1a71c <__adddf3>
   1efd2:	9a06      	ldr	r2, [sp, #24]
   1efd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1efd8:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1efdc:	e10c      	b.n	1f1f8 <__ieee754_rem_pio2+0x348>
   1efde:	4b53      	ldr	r3, [pc, #332]	(1f12c <__ieee754_rem_pio2+0x27c>)
   1efe0:	9e09      	ldr	r6, [sp, #36]
   1efe2:	429e      	cmp	r6, r3
   1efe4:	f300 80fa 	bgt.w	1f1dc <__ieee754_rem_pio2+0x32c>
   1efe8:	f001 f91a 	bl	20220 <fabs>
   1efec:	a248      	add	r2, pc, #288	(adr r2, 1f110 <__ieee754_rem_pio2+0x260>)
   1efee:	ca0c      	ldmia	r2!, {r2, r3}
   1eff0:	4604      	mov	r4, r0
   1eff2:	460d      	mov	r5, r1
   1eff4:	f7fb fd44 	bl	1aa80 <__aeabi_dmul>
   1eff8:	2200      	movs	r2, #0
   1effa:	4b4d      	ldr	r3, [pc, #308]	(1f130 <__ieee754_rem_pio2+0x280>)
   1effc:	f7fb fb8e 	bl	1a71c <__adddf3>
   1f000:	f7fb ffd6 	bl	1afb0 <__aeabi_d2iz>
   1f004:	9008      	str	r0, [sp, #32]
   1f006:	f7fb fcd5 	bl	1a9b4 <__aeabi_i2d>
   1f00a:	a243      	add	r2, pc, #268	(adr r2, 1f118 <__ieee754_rem_pio2+0x268>)
   1f00c:	ca0c      	ldmia	r2!, {r2, r3}
   1f00e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1f012:	f7fb fd35 	bl	1aa80 <__aeabi_dmul>
   1f016:	4602      	mov	r2, r0
   1f018:	460b      	mov	r3, r1
   1f01a:	4620      	mov	r0, r4
   1f01c:	4629      	mov	r1, r5
   1f01e:	f7fb fb7d 	bl	1a71c <__adddf3>
   1f022:	a235      	add	r2, pc, #212	(adr r2, 1f0f8 <__ieee754_rem_pio2+0x248>)
   1f024:	ca0c      	ldmia	r2!, {r2, r3}
   1f026:	4606      	mov	r6, r0
   1f028:	460f      	mov	r7, r1
   1f02a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f02e:	f7fb fd27 	bl	1aa80 <__aeabi_dmul>
   1f032:	4604      	mov	r4, r0
   1f034:	9808      	ldr	r0, [sp, #32]
   1f036:	460d      	mov	r5, r1
   1f038:	281f      	cmp	r0, #31
   1f03a:	dc07      	bgt.n	1f04c <__ieee754_rem_pio2+0x19c>
   1f03c:	4a3d      	ldr	r2, [pc, #244]	(1f134 <__ieee754_rem_pio2+0x284>)
   1f03e:	1e43      	subs	r3, r0, #1
   1f040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1f044:	9909      	ldr	r1, [sp, #36]
   1f046:	4299      	cmp	r1, r3
   1f048:	f040 809e 	bne.w	1f188 <__ieee754_rem_pio2+0x2d8>
   1f04c:	462b      	mov	r3, r5
   1f04e:	4630      	mov	r0, r6
   1f050:	4639      	mov	r1, r7
   1f052:	4622      	mov	r2, r4
   1f054:	f7fb fb60 	bl	1a718 <__aeabi_dsub>
   1f058:	9b06      	ldr	r3, [sp, #24]
   1f05a:	e883 0003 	stmia.w	r3, {r0, r1}
   1f05e:	0d0b      	lsrs	r3, r1, #20
   1f060:	9809      	ldr	r0, [sp, #36]
   1f062:	055b      	lsls	r3, r3, #21
   1f064:	1500      	asrs	r0, r0, #20
   1f066:	0d5b      	lsrs	r3, r3, #21
   1f068:	ebc3 0300 	rsb	r3, r3, r0
   1f06c:	2b10      	cmp	r3, #16
   1f06e:	9007      	str	r0, [sp, #28]
   1f070:	f340 8093 	ble.w	1f19a <__ieee754_rem_pio2+0x2ea>
   1f074:	a222      	add	r2, pc, #136	(adr r2, 1f100 <__ieee754_rem_pio2+0x250>)
   1f076:	ca0c      	ldmia	r2!, {r2, r3}
   1f078:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f07c:	f7fb fd00 	bl	1aa80 <__aeabi_dmul>
   1f080:	4604      	mov	r4, r0
   1f082:	460d      	mov	r5, r1
   1f084:	4622      	mov	r2, r4
   1f086:	462b      	mov	r3, r5
   1f088:	4630      	mov	r0, r6
   1f08a:	4639      	mov	r1, r7
   1f08c:	f7fb fb44 	bl	1a718 <__aeabi_dsub>
   1f090:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f098:	4630      	mov	r0, r6
   1f09a:	4639      	mov	r1, r7
   1f09c:	f7fb fb3c 	bl	1a718 <__aeabi_dsub>
   1f0a0:	4622      	mov	r2, r4
   1f0a2:	462b      	mov	r3, r5
   1f0a4:	f7fb fb38 	bl	1a718 <__aeabi_dsub>
   1f0a8:	a217      	add	r2, pc, #92	(adr r2, 1f108 <__ieee754_rem_pio2+0x258>)
   1f0aa:	ca0c      	ldmia	r2!, {r2, r3}
   1f0ac:	4604      	mov	r4, r0
   1f0ae:	460d      	mov	r5, r1
   1f0b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f0b4:	f7fb fce4 	bl	1aa80 <__aeabi_dmul>
   1f0b8:	4622      	mov	r2, r4
   1f0ba:	462b      	mov	r3, r5
   1f0bc:	f7fb fb2c 	bl	1a718 <__aeabi_dsub>
   1f0c0:	4604      	mov	r4, r0
   1f0c2:	460d      	mov	r5, r1
   1f0c4:	4622      	mov	r2, r4
   1f0c6:	462b      	mov	r3, r5
   1f0c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f0cc:	f7fb fb24 	bl	1a718 <__aeabi_dsub>
   1f0d0:	0d0b      	lsrs	r3, r1, #20
   1f0d2:	055b      	lsls	r3, r3, #21
   1f0d4:	9e07      	ldr	r6, [sp, #28]
   1f0d6:	0d5b      	lsrs	r3, r3, #21
   1f0d8:	9a06      	ldr	r2, [sp, #24]
   1f0da:	ebc3 0306 	rsb	r3, r3, r6
   1f0de:	2b31      	cmp	r3, #49
   1f0e0:	e882 0003 	stmia.w	r2, {r0, r1}
   1f0e4:	dc28      	bgt.n	1f138 <__ieee754_rem_pio2+0x288>
   1f0e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f0ea:	e056      	b.n	1f19a <__ieee754_rem_pio2+0x2ea>
   1f0ec:	46c0      	nop			(mov r8, r8)
   1f0ee:	46c0      	nop			(mov r8, r8)
   1f0f0:	54400000 	.word	0x54400000
   1f0f4:	3ff921fb 	.word	0x3ff921fb
   1f0f8:	1a626331 	.word	0x1a626331
   1f0fc:	3dd0b461 	.word	0x3dd0b461
   1f100:	1a600000 	.word	0x1a600000
   1f104:	3dd0b461 	.word	0x3dd0b461
   1f108:	2e037073 	.word	0x2e037073
   1f10c:	3ba3198a 	.word	0x3ba3198a
   1f110:	6dc9c883 	.word	0x6dc9c883
   1f114:	3fe45f30 	.word	0x3fe45f30
   1f118:	54400000 	.word	0x54400000
   1f11c:	bff921fb 	.word	0xbff921fb
   1f120:	3fe921fb 	.word	0x3fe921fb
   1f124:	4002d97b 	.word	0x4002d97b
   1f128:	3ff921fb 	.word	0x3ff921fb
   1f12c:	413921fb 	.word	0x413921fb
   1f130:	3fe00000 	.word	0x3fe00000
   1f134:	000238f8 	.word	0x000238f8
   1f138:	a25f      	add	r2, pc, #380	(adr r2, 1f2b8 <__ieee754_rem_pio2+0x408>)
   1f13a:	ca0c      	ldmia	r2!, {r2, r3}
   1f13c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f140:	f7fb fc9e 	bl	1aa80 <__aeabi_dmul>
   1f144:	4604      	mov	r4, r0
   1f146:	460d      	mov	r5, r1
   1f148:	4622      	mov	r2, r4
   1f14a:	462b      	mov	r3, r5
   1f14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f150:	f7fb fae2 	bl	1a718 <__aeabi_dsub>
   1f154:	4606      	mov	r6, r0
   1f156:	460f      	mov	r7, r1
   1f158:	4632      	mov	r2, r6
   1f15a:	463b      	mov	r3, r7
   1f15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f160:	f7fb fada 	bl	1a718 <__aeabi_dsub>
   1f164:	4622      	mov	r2, r4
   1f166:	462b      	mov	r3, r5
   1f168:	f7fb fad6 	bl	1a718 <__aeabi_dsub>
   1f16c:	a254      	add	r2, pc, #336	(adr r2, 1f2c0 <__ieee754_rem_pio2+0x410>)
   1f16e:	ca0c      	ldmia	r2!, {r2, r3}
   1f170:	4604      	mov	r4, r0
   1f172:	460d      	mov	r5, r1
   1f174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f178:	f7fb fc82 	bl	1aa80 <__aeabi_dmul>
   1f17c:	4622      	mov	r2, r4
   1f17e:	462b      	mov	r3, r5
   1f180:	f7fb faca 	bl	1a718 <__aeabi_dsub>
   1f184:	4604      	mov	r4, r0
   1f186:	460d      	mov	r5, r1
   1f188:	4622      	mov	r2, r4
   1f18a:	4630      	mov	r0, r6
   1f18c:	4639      	mov	r1, r7
   1f18e:	462b      	mov	r3, r5
   1f190:	f7fb fac2 	bl	1a718 <__aeabi_dsub>
   1f194:	9a06      	ldr	r2, [sp, #24]
   1f196:	e882 0003 	stmia.w	r2, {r0, r1}
   1f19a:	9b06      	ldr	r3, [sp, #24]
   1f19c:	4630      	mov	r0, r6
   1f19e:	9e06      	ldr	r6, [sp, #24]
   1f1a0:	3308      	adds	r3, #8
   1f1a2:	930b      	str	r3, [sp, #44]
   1f1a4:	4639      	mov	r1, r7
   1f1a6:	e896 000c 	ldmia.w	r6, {r2, r3}
   1f1aa:	f7fb fab5 	bl	1a718 <__aeabi_dsub>
   1f1ae:	4622      	mov	r2, r4
   1f1b0:	462b      	mov	r3, r5
   1f1b2:	f7fb fab1 	bl	1a718 <__aeabi_dsub>
   1f1b6:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1f1ba:	980a      	ldr	r0, [sp, #40]
   1f1bc:	2800      	cmp	r0, #0
   1f1be:	da77      	bge.n	1f2b0 <__ieee754_rem_pio2+0x400>
   1f1c0:	6873      	ldr	r3, [r6, #4]
   1f1c2:	990b      	ldr	r1, [sp, #44]
   1f1c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f1c8:	6073      	str	r3, [r6, #4]
   1f1ca:	684b      	ldr	r3, [r1, #4]
   1f1cc:	9a08      	ldr	r2, [sp, #32]
   1f1ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f1d2:	604b      	str	r3, [r1, #4]
   1f1d4:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1f1d8:	9208      	str	r2, [sp, #32]
   1f1da:	e069      	b.n	1f2b0 <__ieee754_rem_pio2+0x400>
   1f1dc:	4b3a      	ldr	r3, [pc, #232]	(1f2c8 <__ieee754_rem_pio2+0x418>)
   1f1de:	9e09      	ldr	r6, [sp, #36]
   1f1e0:	429e      	cmp	r6, r3
   1f1e2:	dd0b      	ble.n	1f1fc <__ieee754_rem_pio2+0x34c>
   1f1e4:	4602      	mov	r2, r0
   1f1e6:	460b      	mov	r3, r1
   1f1e8:	f7fb fa96 	bl	1a718 <__aeabi_dsub>
   1f1ec:	9a06      	ldr	r2, [sp, #24]
   1f1ee:	2300      	movs	r3, #0
   1f1f0:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1f1f4:	e882 0003 	stmia.w	r2, {r0, r1}
   1f1f8:	9308      	str	r3, [sp, #32]
   1f1fa:	e059      	b.n	1f2b0 <__ieee754_rem_pio2+0x400>
   1f1fc:	9e09      	ldr	r6, [sp, #36]
   1f1fe:	4602      	mov	r2, r0
   1f200:	1531      	asrs	r1, r6, #20
   1f202:	f5a1 6682 	sub.w	r6, r1, #1040	; 0x410
   1f206:	9809      	ldr	r0, [sp, #36]
   1f208:	3e06      	subs	r6, #6
   1f20a:	eba0 5306 	sub.w	r3, r0, r6, lsl #20
   1f20e:	4619      	mov	r1, r3
   1f210:	4610      	mov	r0, r2
   1f212:	4614      	mov	r4, r2
   1f214:	461d      	mov	r5, r3
   1f216:	f7fb fecb 	bl	1afb0 <__aeabi_d2iz>
   1f21a:	f7fb fbcb 	bl	1a9b4 <__aeabi_i2d>
   1f21e:	4602      	mov	r2, r0
   1f220:	460b      	mov	r3, r1
   1f222:	4620      	mov	r0, r4
   1f224:	4629      	mov	r1, r5
   1f226:	e9cd 230c 	strd	r2, r3, [sp, #48]
   1f22a:	f7fb fa75 	bl	1a718 <__aeabi_dsub>
   1f22e:	2200      	movs	r2, #0
   1f230:	4b26      	ldr	r3, [pc, #152]	(1f2cc <__ieee754_rem_pio2+0x41c>)
   1f232:	f7fb fc25 	bl	1aa80 <__aeabi_dmul>
   1f236:	460d      	mov	r5, r1
   1f238:	4604      	mov	r4, r0
   1f23a:	f7fb feb9 	bl	1afb0 <__aeabi_d2iz>
   1f23e:	f7fb fbb9 	bl	1a9b4 <__aeabi_i2d>
   1f242:	4602      	mov	r2, r0
   1f244:	460b      	mov	r3, r1
   1f246:	4620      	mov	r0, r4
   1f248:	4629      	mov	r1, r5
   1f24a:	e9cd 230e 	strd	r2, r3, [sp, #56]
   1f24e:	f7fb fa63 	bl	1a718 <__aeabi_dsub>
   1f252:	2200      	movs	r2, #0
   1f254:	4b1d      	ldr	r3, [pc, #116]	(1f2cc <__ieee754_rem_pio2+0x41c>)
   1f256:	f7fb fc13 	bl	1aa80 <__aeabi_dmul>
   1f25a:	e9cd 0110 	strd	r0, r1, [sp, #64]
   1f25e:	ad0c      	add	r5, sp, #48
   1f260:	2403      	movs	r4, #3
   1f262:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   1f266:	2200      	movs	r2, #0
   1f268:	2300      	movs	r3, #0
   1f26a:	4627      	mov	r7, r4
   1f26c:	3d08      	subs	r5, #8
   1f26e:	3c01      	subs	r4, #1
   1f270:	f7fb fe6c 	bl	1af4c <__aeabi_dcmpeq>
   1f274:	2800      	cmp	r0, #0
   1f276:	d1f4      	bne.n	1f262 <__ieee754_rem_pio2+0x3b2>
   1f278:	2302      	movs	r3, #2
   1f27a:	9300      	str	r3, [sp, #0]
   1f27c:	4b14      	ldr	r3, [pc, #80]	(1f2d0 <__ieee754_rem_pio2+0x420>)
   1f27e:	9906      	ldr	r1, [sp, #24]
   1f280:	9301      	str	r3, [sp, #4]
   1f282:	a80c      	add	r0, sp, #48
   1f284:	4632      	mov	r2, r6
   1f286:	463b      	mov	r3, r7
   1f288:	f000 f9da 	bl	1f640 <__kernel_rem_pio2>
   1f28c:	990a      	ldr	r1, [sp, #40]
   1f28e:	9008      	str	r0, [sp, #32]
   1f290:	2900      	cmp	r1, #0
   1f292:	da0d      	bge.n	1f2b0 <__ieee754_rem_pio2+0x400>
   1f294:	9a06      	ldr	r2, [sp, #24]
   1f296:	f1c0 0000 	rsb	r0, r0, #0	; 0x0
   1f29a:	6853      	ldr	r3, [r2, #4]
   1f29c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f2a0:	6053      	str	r3, [r2, #4]
   1f2a2:	f102 0208 	add.w	r2, r2, #8	; 0x8
   1f2a6:	6853      	ldr	r3, [r2, #4]
   1f2a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1f2ac:	6053      	str	r3, [r2, #4]
   1f2ae:	9008      	str	r0, [sp, #32]
   1f2b0:	9808      	ldr	r0, [sp, #32]
   1f2b2:	b013      	add	sp, #76
   1f2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f2b6:	46c0      	nop			(mov r8, r8)
   1f2b8:	2e000000 	.word	0x2e000000
   1f2bc:	3ba3198a 	.word	0x3ba3198a
   1f2c0:	252049c1 	.word	0x252049c1
   1f2c4:	397b839a 	.word	0x397b839a
   1f2c8:	7fefffff 	.word	0x7fefffff
   1f2cc:	41700000 	.word	0x41700000
   1f2d0:	00023978 	.word	0x00023978
   1f2d4:	46c046c0 	.word	0x46c046c0

0001f2d8 <__ieee754_sqrt>:
   1f2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2da:	4b67      	ldr	r3, [pc, #412]	(1f478 <__ieee754_sqrt+0x1a0>)
   1f2dc:	4a66      	ldr	r2, [pc, #408]	(1f478 <__ieee754_sqrt+0x1a0>)
   1f2de:	ea01 0303 	and.w	r3, r1, r3
   1f2e2:	4604      	mov	r4, r0
   1f2e4:	4293      	cmp	r3, r2
   1f2e6:	b083      	sub	sp, #12
   1f2e8:	460d      	mov	r5, r1
   1f2ea:	4608      	mov	r0, r1
   1f2ec:	46a4      	mov	ip, r4
   1f2ee:	d10b      	bne.n	1f308 <__ieee754_sqrt+0x30>
   1f2f0:	4622      	mov	r2, r4
   1f2f2:	462b      	mov	r3, r5
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	f7fb fbc3 	bl	1aa80 <__aeabi_dmul>
   1f2fa:	4602      	mov	r2, r0
   1f2fc:	460b      	mov	r3, r1
   1f2fe:	4620      	mov	r0, r4
   1f300:	4629      	mov	r1, r5
   1f302:	f7fb fa0b 	bl	1a71c <__adddf3>
   1f306:	e010      	b.n	1f32a <__ieee754_sqrt+0x52>
   1f308:	2900      	cmp	r1, #0
   1f30a:	dc11      	bgt.n	1f330 <__ieee754_sqrt+0x58>
   1f30c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1f310:	4323      	orrs	r3, r4
   1f312:	f000 80ad 	beq.w	1f470 <__ieee754_sqrt+0x198>
   1f316:	b159      	cbz	r1, 1f330 <__ieee754_sqrt+0x58>
   1f318:	4622      	mov	r2, r4
   1f31a:	460b      	mov	r3, r1
   1f31c:	4620      	mov	r0, r4
   1f31e:	f7fb f9fb 	bl	1a718 <__aeabi_dsub>
   1f322:	4602      	mov	r2, r0
   1f324:	460b      	mov	r3, r1
   1f326:	f7fb fcd5 	bl	1acd4 <__aeabi_ddiv>
   1f32a:	4604      	mov	r4, r0
   1f32c:	460d      	mov	r5, r1
   1f32e:	e09f      	b.n	1f470 <__ieee754_sqrt+0x198>
   1f330:	1501      	asrs	r1, r0, #20
   1f332:	d005      	beq.n	1f340 <__ieee754_sqrt+0x68>
   1f334:	e018      	b.n	1f368 <__ieee754_sqrt+0x90>
   1f336:	ea4f 20dc 	mov.w	r0, ip, lsr #11
   1f33a:	3915      	subs	r1, #21
   1f33c:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   1f340:	2800      	cmp	r0, #0
   1f342:	d0f8      	beq.n	1f336 <__ieee754_sqrt+0x5e>
   1f344:	2200      	movs	r2, #0
   1f346:	e001      	b.n	1f34c <__ieee754_sqrt+0x74>
   1f348:	0040      	lsls	r0, r0, #1
   1f34a:	3201      	adds	r2, #1
   1f34c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1f350:	d0fa      	beq.n	1f348 <__ieee754_sqrt+0x70>
   1f352:	1c4b      	adds	r3, r1, #1
   1f354:	ebc2 0103 	rsb	r1, r2, r3
   1f358:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1f35c:	fa2c f303 	lsr.w	r3, ip, r3
   1f360:	fa0c fc02 	lsl.w	ip, ip, r2
   1f364:	ea43 0000 	orr.w	r0, r3, r0
   1f368:	f5a1 717e 	sub.w	r1, r1, #1016	; 0x3f8
   1f36c:	1fcb      	subs	r3, r1, #7
   1f36e:	9301      	str	r3, [sp, #4]
   1f370:	9c01      	ldr	r4, [sp, #4]
   1f372:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1f376:	f014 0f01 	tst.w	r4, #1	; 0x1
   1f37a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1f37e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
   1f382:	bf1e      	ittt	ne
   1f384:	ea4f 73dc 	movne.w	r3, ip, lsr #31
   1f388:	ea4f 0c4c 	movne.w	ip, ip, lsl #1
   1f38c:	eb03 0242 	addne.w	r2, r3, r2, lsl #1
   1f390:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1f394:	2500      	movs	r5, #0
   1f396:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1f39a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1f39e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   1f3a2:	9500      	str	r5, [sp, #0]
   1f3a4:	2400      	movs	r4, #0
   1f3a6:	eb05 0300 	add.w	r3, r5, r0
   1f3aa:	4293      	cmp	r3, r2
   1f3ac:	dc05      	bgt.n	1f3ba <__ieee754_sqrt+0xe2>
   1f3ae:	eb03 0500 	add.w	r5, r3, r0
   1f3b2:	1ad2      	subs	r2, r2, r3
   1f3b4:	9b00      	ldr	r3, [sp, #0]
   1f3b6:	181b      	adds	r3, r3, r0
   1f3b8:	9300      	str	r3, [sp, #0]
   1f3ba:	3401      	adds	r4, #1
   1f3bc:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1f3c0:	0840      	lsrs	r0, r0, #1
   1f3c2:	2c16      	cmp	r4, #22
   1f3c4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1f3c8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1f3cc:	d1eb      	bne.n	1f3a6 <__ieee754_sqrt+0xce>
   1f3ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1f3d2:	2700      	movs	r7, #0
   1f3d4:	2000      	movs	r0, #0
   1f3d6:	2600      	movs	r6, #0
   1f3d8:	4295      	cmp	r5, r2
   1f3da:	eb01 0407 	add.w	r4, r1, r7
   1f3de:	db08      	blt.n	1f3f2 <__ieee754_sqrt+0x11a>
   1f3e0:	bf14      	ite	ne
   1f3e2:	2300      	movne	r3, #0
   1f3e4:	2301      	moveq	r3, #1
   1f3e6:	4564      	cmp	r4, ip
   1f3e8:	bf8c      	ite	hi
   1f3ea:	2300      	movhi	r3, #0
   1f3ec:	f003 0301 	andls.w	r3, r3, #1	; 0x1
   1f3f0:	b19b      	cbz	r3, 1f41a <__ieee754_sqrt+0x142>
   1f3f2:	f004 4300 	and.w	r3, r4, #2147483648	; 0x80000000
   1f3f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1f3fa:	eb04 0701 	add.w	r7, r4, r1
   1f3fe:	d103      	bne.n	1f408 <__ieee754_sqrt+0x130>
   1f400:	421f      	tst	r7, r3
   1f402:	d101      	bne.n	1f408 <__ieee754_sqrt+0x130>
   1f404:	1c6b      	adds	r3, r5, #1
   1f406:	e000      	b.n	1f40a <__ieee754_sqrt+0x132>
   1f408:	462b      	mov	r3, r5
   1f40a:	1b52      	subs	r2, r2, r5
   1f40c:	45a4      	cmp	ip, r4
   1f40e:	bf38      	it	cc
   1f410:	3a01      	subcc	r2, #1
   1f412:	ebc4 0c0c 	rsb	ip, r4, ip
   1f416:	1840      	adds	r0, r0, r1
   1f418:	461d      	mov	r5, r3
   1f41a:	3601      	adds	r6, #1
   1f41c:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1f420:	0849      	lsrs	r1, r1, #1
   1f422:	2e20      	cmp	r6, #32
   1f424:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1f428:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1f42c:	d1d4      	bne.n	1f3d8 <__ieee754_sqrt+0x100>
   1f42e:	ea52 020c 	orrs.w	r2, r2, ip
   1f432:	d00a      	beq.n	1f44a <__ieee754_sqrt+0x172>
   1f434:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f438:	bf1c      	itt	ne
   1f43a:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1f43e:	1818      	addne	r0, r3, r0
   1f440:	d103      	bne.n	1f44a <__ieee754_sqrt+0x172>
   1f442:	9c00      	ldr	r4, [sp, #0]
   1f444:	2000      	movs	r0, #0
   1f446:	3401      	adds	r4, #1
   1f448:	9400      	str	r4, [sp, #0]
   1f44a:	9b00      	ldr	r3, [sp, #0]
   1f44c:	9c01      	ldr	r4, [sp, #4]
   1f44e:	0840      	lsrs	r0, r0, #1
   1f450:	f013 0f01 	tst.w	r3, #1	; 0x1
   1f454:	bf18      	it	ne
   1f456:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   1f45a:	1061      	asrs	r1, r4, #1
   1f45c:	0509      	lsls	r1, r1, #20
   1f45e:	9c00      	ldr	r4, [sp, #0]
   1f460:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
   1f464:	f501 01c0 	add.w	r1, r1, #6291456	; 0x600000
   1f468:	eb01 0364 	add.w	r3, r1, r4, asr #1
   1f46c:	461d      	mov	r5, r3
   1f46e:	4604      	mov	r4, r0
   1f470:	4620      	mov	r0, r4
   1f472:	4629      	mov	r1, r5
   1f474:	b003      	add	sp, #12
   1f476:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f478:	7ff00000 	.word	0x7ff00000
   1f47c:	00000000 	.word	0x00000000

0001f480 <__kernel_cos>:
   1f480:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f482:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1f486:	b08d      	sub	sp, #52
   1f488:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
   1f48c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1f490:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f494:	da05      	bge.n	1f4a2 <__kernel_cos+0x22>
   1f496:	f7fb fd8b 	bl	1afb0 <__aeabi_d2iz>
   1f49a:	b910      	cbnz	r0, 1f4a2 <__kernel_cos+0x22>
   1f49c:	2000      	movs	r0, #0
   1f49e:	4962      	ldr	r1, [pc, #392]	(1f628 <__kernel_cos+0x1a8>)
   1f4a0:	e0a8      	b.n	1f5f4 <__kernel_cos+0x174>
   1f4a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f4a6:	4602      	mov	r2, r0
   1f4a8:	460b      	mov	r3, r1
   1f4aa:	f7fb fae9 	bl	1aa80 <__aeabi_dmul>
   1f4ae:	a252      	add	r2, pc, #328	(adr r2, 1f5f8 <__kernel_cos+0x178>)
   1f4b0:	ca0c      	ldmia	r2!, {r2, r3}
   1f4b2:	4606      	mov	r6, r0
   1f4b4:	460f      	mov	r7, r1
   1f4b6:	f7fb fae3 	bl	1aa80 <__aeabi_dmul>
   1f4ba:	a251      	add	r2, pc, #324	(adr r2, 1f600 <__kernel_cos+0x180>)
   1f4bc:	ca0c      	ldmia	r2!, {r2, r3}
   1f4be:	f7fb f92d 	bl	1a71c <__adddf3>
   1f4c2:	4602      	mov	r2, r0
   1f4c4:	460b      	mov	r3, r1
   1f4c6:	4630      	mov	r0, r6
   1f4c8:	4639      	mov	r1, r7
   1f4ca:	f7fb fad9 	bl	1aa80 <__aeabi_dmul>
   1f4ce:	a24e      	add	r2, pc, #312	(adr r2, 1f608 <__kernel_cos+0x188>)
   1f4d0:	ca0c      	ldmia	r2!, {r2, r3}
   1f4d2:	f7fb f921 	bl	1a718 <__aeabi_dsub>
   1f4d6:	4602      	mov	r2, r0
   1f4d8:	460b      	mov	r3, r1
   1f4da:	4630      	mov	r0, r6
   1f4dc:	4639      	mov	r1, r7
   1f4de:	f7fb facf 	bl	1aa80 <__aeabi_dmul>
   1f4e2:	a24b      	add	r2, pc, #300	(adr r2, 1f610 <__kernel_cos+0x190>)
   1f4e4:	ca0c      	ldmia	r2!, {r2, r3}
   1f4e6:	f7fb f919 	bl	1a71c <__adddf3>
   1f4ea:	4602      	mov	r2, r0
   1f4ec:	460b      	mov	r3, r1
   1f4ee:	4630      	mov	r0, r6
   1f4f0:	4639      	mov	r1, r7
   1f4f2:	f7fb fac5 	bl	1aa80 <__aeabi_dmul>
   1f4f6:	a248      	add	r2, pc, #288	(adr r2, 1f618 <__kernel_cos+0x198>)
   1f4f8:	ca0c      	ldmia	r2!, {r2, r3}
   1f4fa:	f7fb f90d 	bl	1a718 <__aeabi_dsub>
   1f4fe:	4602      	mov	r2, r0
   1f500:	460b      	mov	r3, r1
   1f502:	4630      	mov	r0, r6
   1f504:	4639      	mov	r1, r7
   1f506:	f7fb fabb 	bl	1aa80 <__aeabi_dmul>
   1f50a:	a245      	add	r2, pc, #276	(adr r2, 1f620 <__kernel_cos+0x1a0>)
   1f50c:	ca0c      	ldmia	r2!, {r2, r3}
   1f50e:	f7fb f905 	bl	1a71c <__adddf3>
   1f512:	460b      	mov	r3, r1
   1f514:	4602      	mov	r2, r0
   1f516:	4639      	mov	r1, r7
   1f518:	4630      	mov	r0, r6
   1f51a:	f7fb fab1 	bl	1aa80 <__aeabi_dmul>
   1f51e:	4b43      	ldr	r3, [pc, #268]	(1f62c <__kernel_cos+0x1ac>)
   1f520:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1f524:	429c      	cmp	r4, r3
   1f526:	dc26      	bgt.n	1f576 <__kernel_cos+0xf6>
   1f528:	2200      	movs	r2, #0
   1f52a:	4b41      	ldr	r3, [pc, #260]	(1f630 <__kernel_cos+0x1b0>)
   1f52c:	4630      	mov	r0, r6
   1f52e:	4639      	mov	r1, r7
   1f530:	f7fb faa6 	bl	1aa80 <__aeabi_dmul>
   1f534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1f538:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1f53c:	4630      	mov	r0, r6
   1f53e:	4639      	mov	r1, r7
   1f540:	f7fb fa9e 	bl	1aa80 <__aeabi_dmul>
   1f544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f548:	4604      	mov	r4, r0
   1f54a:	460d      	mov	r5, r1
   1f54c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f550:	f7fb fa96 	bl	1aa80 <__aeabi_dmul>
   1f554:	4602      	mov	r2, r0
   1f556:	460b      	mov	r3, r1
   1f558:	4620      	mov	r0, r4
   1f55a:	4629      	mov	r1, r5
   1f55c:	f7fb f8dc 	bl	1a718 <__aeabi_dsub>
   1f560:	4602      	mov	r2, r0
   1f562:	460b      	mov	r3, r1
   1f564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1f568:	f7fb f8d6 	bl	1a718 <__aeabi_dsub>
   1f56c:	4602      	mov	r2, r0
   1f56e:	460b      	mov	r3, r1
   1f570:	2000      	movs	r0, #0
   1f572:	492d      	ldr	r1, [pc, #180]	(1f628 <__kernel_cos+0x1a8>)
   1f574:	e03c      	b.n	1f5f0 <__kernel_cos+0x170>
   1f576:	4b2f      	ldr	r3, [pc, #188]	(1f634 <__kernel_cos+0x1b4>)
   1f578:	429c      	cmp	r4, r3
   1f57a:	dd02      	ble.n	1f582 <__kernel_cos+0x102>
   1f57c:	2400      	movs	r4, #0
   1f57e:	4d2e      	ldr	r5, [pc, #184]	(1f638 <__kernel_cos+0x1b8>)
   1f580:	e004      	b.n	1f58c <__kernel_cos+0x10c>
   1f582:	f5a4 1300 	sub.w	r3, r4, #2097152	; 0x200000
   1f586:	2200      	movs	r2, #0
   1f588:	4614      	mov	r4, r2
   1f58a:	461d      	mov	r5, r3
   1f58c:	4622      	mov	r2, r4
   1f58e:	462b      	mov	r3, r5
   1f590:	2000      	movs	r0, #0
   1f592:	4925      	ldr	r1, [pc, #148]	(1f628 <__kernel_cos+0x1a8>)
   1f594:	f7fb f8c0 	bl	1a718 <__aeabi_dsub>
   1f598:	2200      	movs	r2, #0
   1f59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f59e:	4b24      	ldr	r3, [pc, #144]	(1f630 <__kernel_cos+0x1b0>)
   1f5a0:	4630      	mov	r0, r6
   1f5a2:	4639      	mov	r1, r7
   1f5a4:	f7fb fa6c 	bl	1aa80 <__aeabi_dmul>
   1f5a8:	4622      	mov	r2, r4
   1f5aa:	462b      	mov	r3, r5
   1f5ac:	f7fb f8b4 	bl	1a718 <__aeabi_dsub>
   1f5b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1f5b4:	e88d 0003 	stmia.w	sp, {r0, r1}
   1f5b8:	4630      	mov	r0, r6
   1f5ba:	4639      	mov	r1, r7
   1f5bc:	f7fb fa60 	bl	1aa80 <__aeabi_dmul>
   1f5c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1f5c4:	4604      	mov	r4, r0
   1f5c6:	460d      	mov	r5, r1
   1f5c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1f5cc:	f7fb fa58 	bl	1aa80 <__aeabi_dmul>
   1f5d0:	4602      	mov	r2, r0
   1f5d2:	460b      	mov	r3, r1
   1f5d4:	4620      	mov	r0, r4
   1f5d6:	4629      	mov	r1, r5
   1f5d8:	f7fb f89e 	bl	1a718 <__aeabi_dsub>
   1f5dc:	4602      	mov	r2, r0
   1f5de:	460b      	mov	r3, r1
   1f5e0:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1f5e4:	f7fb f898 	bl	1a718 <__aeabi_dsub>
   1f5e8:	4602      	mov	r2, r0
   1f5ea:	460b      	mov	r3, r1
   1f5ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f5f0:	f7fb f892 	bl	1a718 <__aeabi_dsub>
   1f5f4:	b00d      	add	sp, #52
   1f5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f5f8:	be8838d4 	.word	0xbe8838d4
   1f5fc:	bda8fae9 	.word	0xbda8fae9
   1f600:	bdb4b1c4 	.word	0xbdb4b1c4
   1f604:	3e21ee9e 	.word	0x3e21ee9e
   1f608:	809c52ad 	.word	0x809c52ad
   1f60c:	3e927e4f 	.word	0x3e927e4f
   1f610:	19cb1590 	.word	0x19cb1590
   1f614:	3efa01a0 	.word	0x3efa01a0
   1f618:	16c15177 	.word	0x16c15177
   1f61c:	3f56c16c 	.word	0x3f56c16c
   1f620:	5555554c 	.word	0x5555554c
   1f624:	3fa55555 	.word	0x3fa55555
   1f628:	3ff00000 	.word	0x3ff00000
   1f62c:	3fd33332 	.word	0x3fd33332
   1f630:	3fe00000 	.word	0x3fe00000
   1f634:	3fe90000 	.word	0x3fe90000
   1f638:	3fd20000 	.word	0x3fd20000
   1f63c:	46c046c0 	.word	0x46c046c0

0001f640 <__kernel_rem_pio2>:
   1f640:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f642:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
   1f646:	930a      	str	r3, [sp, #40]
   1f648:	900c      	str	r0, [sp, #48]
   1f64a:	f8df 36f0 	ldr.w	r3, [pc, #1776]	; 1fd3c <__kernel_rem_pio2+0x6fc>
   1f64e:	98ba      	ldr	r0, [sp, #744]
   1f650:	910b      	str	r1, [sp, #44]
   1f652:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1f656:	990a      	ldr	r1, [sp, #40]
   1f658:	f8df 06e4 	ldr.w	r0, [pc, #1764]	; 1fd40 <__kernel_rem_pio2+0x700>
   1f65c:	930f      	str	r3, [sp, #60]
   1f65e:	3901      	subs	r1, #1
   1f660:	1ed3      	subs	r3, r2, #3
   1f662:	910e      	str	r1, [sp, #56]
   1f664:	fb83 0100 	smull	r0, r1, r3, r0
   1f668:	17db      	asrs	r3, r3, #31
   1f66a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1f66e:	2b00      	cmp	r3, #0
   1f670:	bfb8      	it	lt
   1f672:	2300      	movlt	r3, #0
   1f674:	9327      	str	r3, [sp, #156]
   1f676:	ea6f 0303 	mvn.w	r3, r3
   1f67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1f67e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f682:	9c27      	ldr	r4, [sp, #156]
   1f684:	9312      	str	r3, [sp, #72]
   1f686:	9a0f      	ldr	r2, [sp, #60]
   1f688:	9b0e      	ldr	r3, [sp, #56]
   1f68a:	98bb      	ldr	r0, [sp, #748]
   1f68c:	ebc3 0604 	rsb	r6, r3, r4
   1f690:	18d2      	adds	r2, r2, r3
   1f692:	9211      	str	r2, [sp, #68]
   1f694:	af78      	add	r7, sp, #480
   1f696:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1f69a:	2400      	movs	r4, #0
   1f69c:	e00a      	b.n	1f6b4 <__kernel_rem_pio2+0x74>
   1f69e:	42f4      	cmn	r4, r6
   1f6a0:	d502      	bpl.n	1f6a8 <__kernel_rem_pio2+0x68>
   1f6a2:	2000      	movs	r0, #0
   1f6a4:	2100      	movs	r1, #0
   1f6a6:	e002      	b.n	1f6ae <__kernel_rem_pio2+0x6e>
   1f6a8:	6828      	ldr	r0, [r5, #0]
   1f6aa:	f7fb f983 	bl	1a9b4 <__aeabi_i2d>
   1f6ae:	c703      	stmia	r7!, {r0, r1}
   1f6b0:	3401      	adds	r4, #1
   1f6b2:	3504      	adds	r5, #4
   1f6b4:	9911      	ldr	r1, [sp, #68]
   1f6b6:	428c      	cmp	r4, r1
   1f6b8:	ddf1      	ble.n	1f69e <__kernel_rem_pio2+0x5e>
   1f6ba:	9b0e      	ldr	r3, [sp, #56]
   1f6bc:	aa28      	add	r2, sp, #160
   1f6be:	2400      	movs	r4, #0
   1f6c0:	921f      	str	r2, [sp, #124]
   1f6c2:	9320      	str	r3, [sp, #128]
   1f6c4:	9421      	str	r4, [sp, #132]
   1f6c6:	e01f      	b.n	1f708 <__kernel_rem_pio2+0xc8>
   1f6c8:	9a1e      	ldr	r2, [sp, #120]
   1f6ca:	3601      	adds	r6, #1
   1f6cc:	e912 0003 	ldmdb	r2, {r0, r1}
   1f6d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f6d4:	f7fb f9d4 	bl	1aa80 <__aeabi_dmul>
   1f6d8:	4602      	mov	r2, r0
   1f6da:	460b      	mov	r3, r1
   1f6dc:	4620      	mov	r0, r4
   1f6de:	4629      	mov	r1, r5
   1f6e0:	f7fb f81c 	bl	1a71c <__adddf3>
   1f6e4:	4604      	mov	r4, r0
   1f6e6:	460d      	mov	r5, r1
   1f6e8:	9b1e      	ldr	r3, [sp, #120]
   1f6ea:	980e      	ldr	r0, [sp, #56]
   1f6ec:	3308      	adds	r3, #8
   1f6ee:	3f08      	subs	r7, #8
   1f6f0:	4286      	cmp	r6, r0
   1f6f2:	931e      	str	r3, [sp, #120]
   1f6f4:	dde8      	ble.n	1f6c8 <__kernel_rem_pio2+0x88>
   1f6f6:	991f      	ldr	r1, [sp, #124]
   1f6f8:	9a21      	ldr	r2, [sp, #132]
   1f6fa:	9b20      	ldr	r3, [sp, #128]
   1f6fc:	c130      	stmia	r1!, {r4, r5}
   1f6fe:	3201      	adds	r2, #1
   1f700:	3301      	adds	r3, #1
   1f702:	911f      	str	r1, [sp, #124]
   1f704:	9221      	str	r2, [sp, #132]
   1f706:	9320      	str	r3, [sp, #128]
   1f708:	9c21      	ldr	r4, [sp, #132]
   1f70a:	9e0f      	ldr	r6, [sp, #60]
   1f70c:	42b4      	cmp	r4, r6
   1f70e:	dc09      	bgt.n	1f724 <__kernel_rem_pio2+0xe4>
   1f710:	980c      	ldr	r0, [sp, #48]
   1f712:	9a20      	ldr	r2, [sp, #128]
   1f714:	a978      	add	r1, sp, #480
   1f716:	901e      	str	r0, [sp, #120]
   1f718:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
   1f71c:	2600      	movs	r6, #0
   1f71e:	2400      	movs	r4, #0
   1f720:	2500      	movs	r5, #0
   1f722:	e7e1      	b.n	1f6e8 <__kernel_rem_pio2+0xa8>
   1f724:	9b0f      	ldr	r3, [sp, #60]
   1f726:	930d      	str	r3, [sp, #52]
   1f728:	9c0d      	ldr	r4, [sp, #52]
   1f72a:	aa28      	add	r2, sp, #160
   1f72c:	1e60      	subs	r0, r4, #1
   1f72e:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   1f732:	2100      	movs	r1, #0
   1f734:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   1f738:	e893 00c0 	ldmia.w	r3, {r6, r7}
   1f73c:	9022      	str	r0, [sp, #136]
   1f73e:	921d      	str	r2, [sp, #116]
   1f740:	9425      	str	r4, [sp, #148]
   1f742:	911c      	str	r1, [sp, #112]
   1f744:	e02b      	b.n	1f79e <__kernel_rem_pio2+0x15e>
   1f746:	2200      	movs	r2, #0
   1f748:	f8df 35f8 	ldr.w	r3, [pc, #1528]	; 1fd44 <__kernel_rem_pio2+0x704>
   1f74c:	4630      	mov	r0, r6
   1f74e:	4639      	mov	r1, r7
   1f750:	f7fb f996 	bl	1aa80 <__aeabi_dmul>
   1f754:	f7fb fc2c 	bl	1afb0 <__aeabi_d2iz>
   1f758:	f7fb f92c 	bl	1a9b4 <__aeabi_i2d>
   1f75c:	2200      	movs	r2, #0
   1f75e:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 1fd48 <__kernel_rem_pio2+0x708>
   1f762:	4604      	mov	r4, r0
   1f764:	460d      	mov	r5, r1
   1f766:	f7fb f98b 	bl	1aa80 <__aeabi_dmul>
   1f76a:	4602      	mov	r2, r0
   1f76c:	460b      	mov	r3, r1
   1f76e:	4630      	mov	r0, r6
   1f770:	4639      	mov	r1, r7
   1f772:	f7fa ffd3 	bl	1a71c <__adddf3>
   1f776:	f7fb fc1b 	bl	1afb0 <__aeabi_d2iz>
   1f77a:	9b1c      	ldr	r3, [sp, #112]
   1f77c:	aaa0      	add	r2, sp, #640
   1f77e:	50d0      	str	r0, [r2, r3]
   1f780:	9e25      	ldr	r6, [sp, #148]
   1f782:	4620      	mov	r0, r4
   1f784:	9c1d      	ldr	r4, [sp, #116]
   1f786:	3e01      	subs	r6, #1
   1f788:	4629      	mov	r1, r5
   1f78a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1f78e:	9625      	str	r6, [sp, #148]
   1f790:	f7fa ffc4 	bl	1a71c <__adddf3>
   1f794:	4606      	mov	r6, r0
   1f796:	981c      	ldr	r0, [sp, #112]
   1f798:	460f      	mov	r7, r1
   1f79a:	3004      	adds	r0, #4
   1f79c:	901c      	str	r0, [sp, #112]
   1f79e:	991d      	ldr	r1, [sp, #116]
   1f7a0:	9a25      	ldr	r2, [sp, #148]
   1f7a2:	3908      	subs	r1, #8
   1f7a4:	2a00      	cmp	r2, #0
   1f7a6:	911d      	str	r1, [sp, #116]
   1f7a8:	dccd      	bgt.n	1f746 <__kernel_rem_pio2+0x106>
   1f7aa:	9a12      	ldr	r2, [sp, #72]
   1f7ac:	4630      	mov	r0, r6
   1f7ae:	4639      	mov	r1, r7
   1f7b0:	f000 fdc6 	bl	20340 <scalbn>
   1f7b4:	2200      	movs	r2, #0
   1f7b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1f7ba:	4604      	mov	r4, r0
   1f7bc:	460d      	mov	r5, r1
   1f7be:	f7fb f95f 	bl	1aa80 <__aeabi_dmul>
   1f7c2:	f000 fd35 	bl	20230 <floor>
   1f7c6:	2200      	movs	r2, #0
   1f7c8:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 1fd4c <__kernel_rem_pio2+0x70c>
   1f7cc:	f7fb f958 	bl	1aa80 <__aeabi_dmul>
   1f7d0:	4602      	mov	r2, r0
   1f7d2:	460b      	mov	r3, r1
   1f7d4:	4620      	mov	r0, r4
   1f7d6:	4629      	mov	r1, r5
   1f7d8:	f7fa ffa0 	bl	1a71c <__adddf3>
   1f7dc:	460d      	mov	r5, r1
   1f7de:	4604      	mov	r4, r0
   1f7e0:	f7fb fbe6 	bl	1afb0 <__aeabi_d2iz>
   1f7e4:	9010      	str	r0, [sp, #64]
   1f7e6:	f7fb f8e5 	bl	1a9b4 <__aeabi_i2d>
   1f7ea:	460b      	mov	r3, r1
   1f7ec:	4602      	mov	r2, r0
   1f7ee:	4629      	mov	r1, r5
   1f7f0:	4620      	mov	r0, r4
   1f7f2:	f7fa ff91 	bl	1a718 <__aeabi_dsub>
   1f7f6:	9b12      	ldr	r3, [sp, #72]
   1f7f8:	4604      	mov	r4, r0
   1f7fa:	2b00      	cmp	r3, #0
   1f7fc:	460d      	mov	r5, r1
   1f7fe:	dd16      	ble.n	1f82e <__kernel_rem_pio2+0x1ee>
   1f800:	9922      	ldr	r1, [sp, #136]
   1f802:	aeb4      	add	r6, sp, #720
   1f804:	eb06 0081 	add.w	r0, r6, r1, lsl #2
   1f808:	f850 2c50 	ldr.w	r2, [r0, #-80]
   1f80c:	f1c3 0118 	rsb	r1, r3, #24	; 0x18
   1f810:	fa52 f301 	asrs.w	r3, r2, r1
   1f814:	9e10      	ldr	r6, [sp, #64]
   1f816:	18f6      	adds	r6, r6, r3
   1f818:	408b      	lsls	r3, r1
   1f81a:	1ad2      	subs	r2, r2, r3
   1f81c:	f840 2c50 	str.w	r2, [r0, #-80]
   1f820:	9812      	ldr	r0, [sp, #72]
   1f822:	9610      	str	r6, [sp, #64]
   1f824:	f1c0 0317 	rsb	r3, r0, #23	; 0x17
   1f828:	fa52 f303 	asrs.w	r3, r2, r3
   1f82c:	e007      	b.n	1f83e <__kernel_rem_pio2+0x1fe>
   1f82e:	d10b      	bne.n	1f848 <__kernel_rem_pio2+0x208>
   1f830:	9a22      	ldr	r2, [sp, #136]
   1f832:	a9b4      	add	r1, sp, #720
   1f834:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   1f838:	f853 3c50 	ldr.w	r3, [r3, #-80]
   1f83c:	15db      	asrs	r3, r3, #23
   1f83e:	9313      	str	r3, [sp, #76]
   1f840:	9813      	ldr	r0, [sp, #76]
   1f842:	2800      	cmp	r0, #0
   1f844:	dc0b      	bgt.n	1f85e <__kernel_rem_pio2+0x21e>
   1f846:	e061      	b.n	1f90c <__kernel_rem_pio2+0x2cc>
   1f848:	2200      	movs	r2, #0
   1f84a:	f8df 3504 	ldr.w	r3, [pc, #1284]	; 1fd50 <__kernel_rem_pio2+0x710>
   1f84e:	f7fb fb9b 	bl	1af88 <__aeabi_dcmpge>
   1f852:	b910      	cbnz	r0, 1f85a <__kernel_rem_pio2+0x21a>
   1f854:	2300      	movs	r3, #0
   1f856:	9313      	str	r3, [sp, #76]
   1f858:	e058      	b.n	1f90c <__kernel_rem_pio2+0x2cc>
   1f85a:	2602      	movs	r6, #2
   1f85c:	9613      	str	r6, [sp, #76]
   1f85e:	9910      	ldr	r1, [sp, #64]
   1f860:	2600      	movs	r6, #0
   1f862:	3101      	adds	r1, #1
   1f864:	9110      	str	r1, [sp, #64]
   1f866:	2000      	movs	r0, #0
   1f868:	2100      	movs	r1, #0
   1f86a:	f50d 7c20 	add.w	ip, sp, #640	; 0x280
   1f86e:	e010      	b.n	1f892 <__kernel_rem_pio2+0x252>
   1f870:	f85c 2001 	ldr.w	r2, [ip, r1]
   1f874:	b936      	cbnz	r6, 1f884 <__kernel_rem_pio2+0x244>
   1f876:	b152      	cbz	r2, 1f88e <__kernel_rem_pio2+0x24e>
   1f878:	f1c2 7380 	rsb	r3, r2, #16777216	; 0x1000000
   1f87c:	f84c 3001 	str.w	r3, [ip, r1]
   1f880:	2601      	movs	r6, #1
   1f882:	e004      	b.n	1f88e <__kernel_rem_pio2+0x24e>
   1f884:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1f888:	1a9b      	subs	r3, r3, r2
   1f88a:	f84c 3001 	str.w	r3, [ip, r1]
   1f88e:	3001      	adds	r0, #1
   1f890:	3104      	adds	r1, #4
   1f892:	9a0d      	ldr	r2, [sp, #52]
   1f894:	4290      	cmp	r0, r2
   1f896:	dbeb      	blt.n	1f870 <__kernel_rem_pio2+0x230>
   1f898:	9b12      	ldr	r3, [sp, #72]
   1f89a:	2b00      	cmp	r3, #0
   1f89c:	dd1b      	ble.n	1f8d6 <__kernel_rem_pio2+0x296>
   1f89e:	2b01      	cmp	r3, #1
   1f8a0:	d002      	beq.n	1f8a8 <__kernel_rem_pio2+0x268>
   1f8a2:	2b02      	cmp	r3, #2
   1f8a4:	d117      	bne.n	1f8d6 <__kernel_rem_pio2+0x296>
   1f8a6:	e00a      	b.n	1f8be <__kernel_rem_pio2+0x27e>
   1f8a8:	9922      	ldr	r1, [sp, #136]
   1f8aa:	a8b4      	add	r0, sp, #720
   1f8ac:	eb00 0281 	add.w	r2, r0, r1, lsl #2
   1f8b0:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1f8b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f8b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1f8bc:	e009      	b.n	1f8d2 <__kernel_rem_pio2+0x292>
   1f8be:	9822      	ldr	r0, [sp, #136]
   1f8c0:	abb4      	add	r3, sp, #720
   1f8c2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
   1f8c6:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1f8ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f8ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
   1f8d2:	f842 3c50 	str.w	r3, [r2, #-80]
   1f8d6:	9913      	ldr	r1, [sp, #76]
   1f8d8:	2902      	cmp	r1, #2
   1f8da:	d117      	bne.n	1f90c <__kernel_rem_pio2+0x2cc>
   1f8dc:	4622      	mov	r2, r4
   1f8de:	462b      	mov	r3, r5
   1f8e0:	2000      	movs	r0, #0
   1f8e2:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 1fd54 <__kernel_rem_pio2+0x714>
   1f8e6:	f7fa ff17 	bl	1a718 <__aeabi_dsub>
   1f8ea:	4604      	mov	r4, r0
   1f8ec:	460d      	mov	r5, r1
   1f8ee:	b16e      	cbz	r6, 1f90c <__kernel_rem_pio2+0x2cc>
   1f8f0:	9a12      	ldr	r2, [sp, #72]
   1f8f2:	2000      	movs	r0, #0
   1f8f4:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 1fd54 <__kernel_rem_pio2+0x714>
   1f8f8:	f000 fd22 	bl	20340 <scalbn>
   1f8fc:	4602      	mov	r2, r0
   1f8fe:	460b      	mov	r3, r1
   1f900:	4620      	mov	r0, r4
   1f902:	4629      	mov	r1, r5
   1f904:	f7fa ff08 	bl	1a718 <__aeabi_dsub>
   1f908:	4604      	mov	r4, r0
   1f90a:	460d      	mov	r5, r1
   1f90c:	2200      	movs	r2, #0
   1f90e:	2300      	movs	r3, #0
   1f910:	4620      	mov	r0, r4
   1f912:	4629      	mov	r1, r5
   1f914:	f7fb fb1a 	bl	1af4c <__aeabi_dcmpeq>
   1f918:	2800      	cmp	r0, #0
   1f91a:	d073      	beq.n	1fa04 <__kernel_rem_pio2+0x3c4>
   1f91c:	9a22      	ldr	r2, [sp, #136]
   1f91e:	aba0      	add	r3, sp, #640
   1f920:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1f924:	2200      	movs	r2, #0
   1f926:	e004      	b.n	1f932 <__kernel_rem_pio2+0x2f2>
   1f928:	684b      	ldr	r3, [r1, #4]
   1f92a:	431a      	orrs	r2, r3
   1f92c:	9b22      	ldr	r3, [sp, #136]
   1f92e:	3b01      	subs	r3, #1
   1f930:	9322      	str	r3, [sp, #136]
   1f932:	9c22      	ldr	r4, [sp, #136]
   1f934:	9e0f      	ldr	r6, [sp, #60]
   1f936:	3904      	subs	r1, #4
   1f938:	42b4      	cmp	r4, r6
   1f93a:	daf5      	bge.n	1f928 <__kernel_rem_pio2+0x2e8>
   1f93c:	2a00      	cmp	r2, #0
   1f93e:	d162      	bne.n	1fa06 <__kernel_rem_pio2+0x3c6>
   1f940:	aba0      	add	r3, sp, #640
   1f942:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1f946:	2201      	movs	r2, #1
   1f948:	e000      	b.n	1f94c <__kernel_rem_pio2+0x30c>
   1f94a:	3201      	adds	r2, #1
   1f94c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1f950:	2b00      	cmp	r3, #0
   1f952:	d0fa      	beq.n	1f94a <__kernel_rem_pio2+0x30a>
   1f954:	980d      	ldr	r0, [sp, #52]
   1f956:	9927      	ldr	r1, [sp, #156]
   1f958:	ab28      	add	r3, sp, #160
   1f95a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1f95e:	931a      	str	r3, [sp, #104]
   1f960:	1c4b      	adds	r3, r1, #1
   1f962:	990a      	ldr	r1, [sp, #40]
   1f964:	1812      	adds	r2, r2, r0
   1f966:	9cbb      	ldr	r4, [sp, #748]
   1f968:	4401      	add	r1, r0
   1f96a:	181b      	adds	r3, r3, r0
   1f96c:	9205      	str	r2, [sp, #20]
   1f96e:	aa78      	add	r2, sp, #480
   1f970:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1f974:	2600      	movs	r6, #0
   1f976:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1f97a:	931b      	str	r3, [sp, #108]
   1f97c:	9619      	str	r6, [sp, #100]
   1f97e:	9104      	str	r1, [sp, #16]
   1f980:	9203      	str	r2, [sp, #12]
   1f982:	e036      	b.n	1f9f2 <__kernel_rem_pio2+0x3b2>
   1f984:	991b      	ldr	r1, [sp, #108]
   1f986:	9b03      	ldr	r3, [sp, #12]
   1f988:	9e19      	ldr	r6, [sp, #100]
   1f98a:	6808      	ldr	r0, [r1, #0]
   1f98c:	eb03 04c6 	add.w	r4, r3, r6, lsl #3
   1f990:	f7fb f810 	bl	1a9b4 <__aeabi_i2d>
   1f994:	e884 0003 	stmia.w	r4, {r0, r1}
   1f998:	9c04      	ldr	r4, [sp, #16]
   1f99a:	9a0c      	ldr	r2, [sp, #48]
   1f99c:	eb04 0306 	add.w	r3, r4, r6
   1f9a0:	ae78      	add	r6, sp, #480
   1f9a2:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
   1f9a6:	9218      	str	r2, [sp, #96]
   1f9a8:	2600      	movs	r6, #0
   1f9aa:	2400      	movs	r4, #0
   1f9ac:	2500      	movs	r5, #0
   1f9ae:	e00f      	b.n	1f9d0 <__kernel_rem_pio2+0x390>
   1f9b0:	9a18      	ldr	r2, [sp, #96]
   1f9b2:	3601      	adds	r6, #1
   1f9b4:	e912 0003 	ldmdb	r2, {r0, r1}
   1f9b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1f9bc:	f7fb f860 	bl	1aa80 <__aeabi_dmul>
   1f9c0:	4602      	mov	r2, r0
   1f9c2:	460b      	mov	r3, r1
   1f9c4:	4620      	mov	r0, r4
   1f9c6:	4629      	mov	r1, r5
   1f9c8:	f7fa fea8 	bl	1a71c <__adddf3>
   1f9cc:	4604      	mov	r4, r0
   1f9ce:	460d      	mov	r5, r1
   1f9d0:	9b18      	ldr	r3, [sp, #96]
   1f9d2:	980e      	ldr	r0, [sp, #56]
   1f9d4:	3308      	adds	r3, #8
   1f9d6:	3f08      	subs	r7, #8
   1f9d8:	4286      	cmp	r6, r0
   1f9da:	9318      	str	r3, [sp, #96]
   1f9dc:	dde8      	ble.n	1f9b0 <__kernel_rem_pio2+0x370>
   1f9de:	991a      	ldr	r1, [sp, #104]
   1f9e0:	9a19      	ldr	r2, [sp, #100]
   1f9e2:	9b1b      	ldr	r3, [sp, #108]
   1f9e4:	e9e1 4502 	strd	r4, r5, [r1, #8]!
   1f9e8:	3201      	adds	r2, #1
   1f9ea:	3304      	adds	r3, #4
   1f9ec:	911a      	str	r1, [sp, #104]
   1f9ee:	9219      	str	r2, [sp, #100]
   1f9f0:	931b      	str	r3, [sp, #108]
   1f9f2:	9c0d      	ldr	r4, [sp, #52]
   1f9f4:	9e19      	ldr	r6, [sp, #100]
   1f9f6:	1c63      	adds	r3, r4, #1
   1f9f8:	9805      	ldr	r0, [sp, #20]
   1f9fa:	199b      	adds	r3, r3, r6
   1f9fc:	4283      	cmp	r3, r0
   1f9fe:	ddc1      	ble.n	1f984 <__kernel_rem_pio2+0x344>
   1fa00:	900d      	str	r0, [sp, #52]
   1fa02:	e691      	b.n	1f728 <__kernel_rem_pio2+0xe8>
   1fa04:	d014      	beq.n	1fa30 <__kernel_rem_pio2+0x3f0>
   1fa06:	9c0d      	ldr	r4, [sp, #52]
   1fa08:	9912      	ldr	r1, [sp, #72]
   1fa0a:	aba0      	add	r3, sp, #640
   1fa0c:	3918      	subs	r1, #24
   1fa0e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1fa12:	3c01      	subs	r4, #1
   1fa14:	9112      	str	r1, [sp, #72]
   1fa16:	940d      	str	r4, [sp, #52]
   1fa18:	e005      	b.n	1fa26 <__kernel_rem_pio2+0x3e6>
   1fa1a:	9e0d      	ldr	r6, [sp, #52]
   1fa1c:	9812      	ldr	r0, [sp, #72]
   1fa1e:	3e01      	subs	r6, #1
   1fa20:	3818      	subs	r0, #24
   1fa22:	960d      	str	r6, [sp, #52]
   1fa24:	9012      	str	r0, [sp, #72]
   1fa26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1fa2a:	2b00      	cmp	r3, #0
   1fa2c:	d0f5      	beq.n	1fa1a <__kernel_rem_pio2+0x3da>
   1fa2e:	e03f      	b.n	1fab0 <__kernel_rem_pio2+0x470>
   1fa30:	9912      	ldr	r1, [sp, #72]
   1fa32:	4620      	mov	r0, r4
   1fa34:	f1c1 0200 	rsb	r2, r1, #0	; 0x0
   1fa38:	4629      	mov	r1, r5
   1fa3a:	f000 fc81 	bl	20340 <scalbn>
   1fa3e:	2200      	movs	r2, #0
   1fa40:	4bc5      	ldr	r3, [pc, #788]	(1fd58 <__kernel_rem_pio2+0x718>)
   1fa42:	4606      	mov	r6, r0
   1fa44:	460f      	mov	r7, r1
   1fa46:	f7fb fa9f 	bl	1af88 <__aeabi_dcmpge>
   1fa4a:	9a0d      	ldr	r2, [sp, #52]
   1fa4c:	0094      	lsls	r4, r2, #2
   1fa4e:	b338      	cbz	r0, 1faa0 <__kernel_rem_pio2+0x460>
   1fa50:	2200      	movs	r2, #0
   1fa52:	4bbc      	ldr	r3, [pc, #752]	(1fd44 <__kernel_rem_pio2+0x704>)
   1fa54:	4630      	mov	r0, r6
   1fa56:	4639      	mov	r1, r7
   1fa58:	f7fb f812 	bl	1aa80 <__aeabi_dmul>
   1fa5c:	f7fb faa8 	bl	1afb0 <__aeabi_d2iz>
   1fa60:	f7fa ffa8 	bl	1a9b4 <__aeabi_i2d>
   1fa64:	abb4      	add	r3, sp, #720
   1fa66:	441c      	add	r4, r3
   1fa68:	2200      	movs	r2, #0
   1fa6a:	4bb7      	ldr	r3, [pc, #732]	(1fd48 <__kernel_rem_pio2+0x708>)
   1fa6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1fa70:	f7fb f806 	bl	1aa80 <__aeabi_dmul>
   1fa74:	4602      	mov	r2, r0
   1fa76:	460b      	mov	r3, r1
   1fa78:	4630      	mov	r0, r6
   1fa7a:	4639      	mov	r1, r7
   1fa7c:	f7fa fe4e 	bl	1a71c <__adddf3>
   1fa80:	f7fb fa96 	bl	1afb0 <__aeabi_d2iz>
   1fa84:	9e12      	ldr	r6, [sp, #72]
   1fa86:	f844 0c50 	str.w	r0, [r4, #-80]
   1fa8a:	9c0d      	ldr	r4, [sp, #52]
   1fa8c:	a8b4      	add	r0, sp, #720
   1fa8e:	3401      	adds	r4, #1
   1fa90:	3618      	adds	r6, #24
   1fa92:	940d      	str	r4, [sp, #52]
   1fa94:	9612      	str	r6, [sp, #72]
   1fa96:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1fa9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1fa9e:	e003      	b.n	1faa8 <__kernel_rem_pio2+0x468>
   1faa0:	a9b4      	add	r1, sp, #720
   1faa2:	440c      	add	r4, r1
   1faa4:	4630      	mov	r0, r6
   1faa6:	4639      	mov	r1, r7
   1faa8:	f7fb fa82 	bl	1afb0 <__aeabi_d2iz>
   1faac:	f844 0c50 	str.w	r0, [r4, #-80]
   1fab0:	9a12      	ldr	r2, [sp, #72]
   1fab2:	2000      	movs	r0, #0
   1fab4:	49a7      	ldr	r1, [pc, #668]	(1fd54 <__kernel_rem_pio2+0x714>)
   1fab6:	f000 fc43 	bl	20340 <scalbn>
   1faba:	9a0d      	ldr	r2, [sp, #52]
   1fabc:	aba0      	add	r3, sp, #640
   1fabe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1fac2:	9317      	str	r3, [sp, #92]
   1fac4:	ab28      	add	r3, sp, #160
   1fac6:	4604      	mov	r4, r0
   1fac8:	460d      	mov	r5, r1
   1faca:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
   1face:	4616      	mov	r6, r2
   1fad0:	e014      	b.n	1fafc <__kernel_rem_pio2+0x4bc>
   1fad2:	9b17      	ldr	r3, [sp, #92]
   1fad4:	3e01      	subs	r6, #1
   1fad6:	6858      	ldr	r0, [r3, #4]
   1fad8:	f7fa ff6c 	bl	1a9b4 <__aeabi_i2d>
   1fadc:	4602      	mov	r2, r0
   1fade:	460b      	mov	r3, r1
   1fae0:	4620      	mov	r0, r4
   1fae2:	4629      	mov	r1, r5
   1fae4:	f7fa ffcc 	bl	1aa80 <__aeabi_dmul>
   1fae8:	2200      	movs	r2, #0
   1faea:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1faee:	4b95      	ldr	r3, [pc, #596]	(1fd44 <__kernel_rem_pio2+0x704>)
   1faf0:	4620      	mov	r0, r4
   1faf2:	4629      	mov	r1, r5
   1faf4:	f7fa ffc4 	bl	1aa80 <__aeabi_dmul>
   1faf8:	4604      	mov	r4, r0
   1fafa:	460d      	mov	r5, r1
   1fafc:	9817      	ldr	r0, [sp, #92]
   1fafe:	3f08      	subs	r7, #8
   1fb00:	3804      	subs	r0, #4
   1fb02:	2e00      	cmp	r6, #0
   1fb04:	9017      	str	r0, [sp, #92]
   1fb06:	dae4      	bge.n	1fad2 <__kernel_rem_pio2+0x492>
   1fb08:	9a0d      	ldr	r2, [sp, #52]
   1fb0a:	a950      	add	r1, sp, #320
   1fb0c:	2300      	movs	r3, #0
   1fb0e:	9116      	str	r1, [sp, #88]
   1fb10:	9223      	str	r2, [sp, #140]
   1fb12:	9315      	str	r3, [sp, #84]
   1fb14:	e022      	b.n	1fb5c <__kernel_rem_pio2+0x51c>
   1fb16:	9a14      	ldr	r2, [sp, #80]
   1fb18:	3601      	adds	r6, #1
   1fb1a:	e912 0003 	ldmdb	r2, {r0, r1}
   1fb1e:	e917 000c 	ldmdb	r7, {r2, r3}
   1fb22:	f7fa ffad 	bl	1aa80 <__aeabi_dmul>
   1fb26:	4602      	mov	r2, r0
   1fb28:	460b      	mov	r3, r1
   1fb2a:	4620      	mov	r0, r4
   1fb2c:	4629      	mov	r1, r5
   1fb2e:	f7fa fdf5 	bl	1a71c <__adddf3>
   1fb32:	4604      	mov	r4, r0
   1fb34:	460d      	mov	r5, r1
   1fb36:	9b0f      	ldr	r3, [sp, #60]
   1fb38:	429e      	cmp	r6, r3
   1fb3a:	dc06      	bgt.n	1fb4a <__kernel_rem_pio2+0x50a>
   1fb3c:	9814      	ldr	r0, [sp, #80]
   1fb3e:	9915      	ldr	r1, [sp, #84]
   1fb40:	3008      	adds	r0, #8
   1fb42:	3708      	adds	r7, #8
   1fb44:	428e      	cmp	r6, r1
   1fb46:	9014      	str	r0, [sp, #80]
   1fb48:	dde5      	ble.n	1fb16 <__kernel_rem_pio2+0x4d6>
   1fb4a:	9a16      	ldr	r2, [sp, #88]
   1fb4c:	9b23      	ldr	r3, [sp, #140]
   1fb4e:	c230      	stmia	r2!, {r4, r5}
   1fb50:	9c15      	ldr	r4, [sp, #84]
   1fb52:	3b01      	subs	r3, #1
   1fb54:	3401      	adds	r4, #1
   1fb56:	9216      	str	r2, [sp, #88]
   1fb58:	9323      	str	r3, [sp, #140]
   1fb5a:	9415      	str	r4, [sp, #84]
   1fb5c:	9e23      	ldr	r6, [sp, #140]
   1fb5e:	2e00      	cmp	r6, #0
   1fb60:	db08      	blt.n	1fb74 <__kernel_rem_pio2+0x534>
   1fb62:	487e      	ldr	r0, [pc, #504]	(1fd5c <__kernel_rem_pio2+0x71c>)
   1fb64:	a928      	add	r1, sp, #160
   1fb66:	eb01 07c6 	add.w	r7, r1, r6, lsl #3
   1fb6a:	9014      	str	r0, [sp, #80]
   1fb6c:	2600      	movs	r6, #0
   1fb6e:	2400      	movs	r4, #0
   1fb70:	2500      	movs	r5, #0
   1fb72:	e7e0      	b.n	1fb36 <__kernel_rem_pio2+0x4f6>
   1fb74:	9aba      	ldr	r2, [sp, #744]
   1fb76:	2a03      	cmp	r2, #3
   1fb78:	f200 80d9 	bhi.w	1fd2e <__kernel_rem_pio2+0x6ee>
   1fb7c:	e8df f002 	tbb	[pc, r2]
   1fb80:	020b0b12 	.word	0x020b0b12
   1fb84:	9b0d      	ldr	r3, [sp, #52]
   1fb86:	9f0d      	ldr	r7, [sp, #52]
   1fb88:	1e5a      	subs	r2, r3, #1
   1fb8a:	ab50      	add	r3, sp, #320
   1fb8c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1fb90:	9226      	str	r2, [sp, #152]
   1fb92:	4616      	mov	r6, r2
   1fb94:	e067      	b.n	1fc66 <__kernel_rem_pio2+0x626>
   1fb96:	9c0d      	ldr	r4, [sp, #52]
   1fb98:	ab50      	add	r3, sp, #320
   1fb9a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1fb9e:	2000      	movs	r0, #0
   1fba0:	2100      	movs	r1, #0
   1fba2:	e01c      	b.n	1fbde <__kernel_rem_pio2+0x59e>
   1fba4:	9e0d      	ldr	r6, [sp, #52]
   1fba6:	ab50      	add	r3, sp, #320
   1fba8:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1fbac:	4634      	mov	r4, r6
   1fbae:	2000      	movs	r0, #0
   1fbb0:	2100      	movs	r1, #0
   1fbb2:	e004      	b.n	1fbbe <__kernel_rem_pio2+0x57e>
   1fbb4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1fbb8:	f7fa fdb0 	bl	1a71c <__adddf3>
   1fbbc:	3c01      	subs	r4, #1
   1fbbe:	3d08      	subs	r5, #8
   1fbc0:	2c00      	cmp	r4, #0
   1fbc2:	daf7      	bge.n	1fbb4 <__kernel_rem_pio2+0x574>
   1fbc4:	9c13      	ldr	r4, [sp, #76]
   1fbc6:	b10c      	cbz	r4, 1fbcc <__kernel_rem_pio2+0x58c>
   1fbc8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1fbcc:	9e0b      	ldr	r6, [sp, #44]
   1fbce:	e886 0003 	stmia.w	r6, {r0, r1}
   1fbd2:	e0ac      	b.n	1fd2e <__kernel_rem_pio2+0x6ee>
   1fbd4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1fbd8:	f7fa fda0 	bl	1a71c <__adddf3>
   1fbdc:	3c01      	subs	r4, #1
   1fbde:	3d08      	subs	r5, #8
   1fbe0:	2c00      	cmp	r4, #0
   1fbe2:	daf7      	bge.n	1fbd4 <__kernel_rem_pio2+0x594>
   1fbe4:	9a13      	ldr	r2, [sp, #76]
   1fbe6:	4604      	mov	r4, r0
   1fbe8:	460d      	mov	r5, r1
   1fbea:	b10a      	cbz	r2, 1fbf0 <__kernel_rem_pio2+0x5b0>
   1fbec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1fbf0:	9b0b      	ldr	r3, [sp, #44]
   1fbf2:	4622      	mov	r2, r4
   1fbf4:	e883 0003 	stmia.w	r3, {r0, r1}
   1fbf8:	ab50      	add	r3, sp, #320
   1fbfa:	e893 0003 	ldmia.w	r3, {r0, r1}
   1fbfe:	462b      	mov	r3, r5
   1fc00:	f7fa fd8a 	bl	1a718 <__aeabi_dsub>
   1fc04:	ad52      	add	r5, sp, #328
   1fc06:	2401      	movs	r4, #1
   1fc08:	e004      	b.n	1fc14 <__kernel_rem_pio2+0x5d4>
   1fc0a:	e915 000c 	ldmdb	r5, {r2, r3}
   1fc0e:	f7fa fd85 	bl	1a71c <__adddf3>
   1fc12:	3401      	adds	r4, #1
   1fc14:	9e0d      	ldr	r6, [sp, #52]
   1fc16:	3508      	adds	r5, #8
   1fc18:	42b4      	cmp	r4, r6
   1fc1a:	ddf6      	ble.n	1fc0a <__kernel_rem_pio2+0x5ca>
   1fc1c:	9c13      	ldr	r4, [sp, #76]
   1fc1e:	b10c      	cbz	r4, 1fc24 <__kernel_rem_pio2+0x5e4>
   1fc20:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1fc24:	9e0b      	ldr	r6, [sp, #44]
   1fc26:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1fc2a:	e080      	b.n	1fd2e <__kernel_rem_pio2+0x6ee>
   1fc2c:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
   1fc30:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1fc34:	4620      	mov	r0, r4
   1fc36:	4629      	mov	r1, r5
   1fc38:	f7fa fd70 	bl	1a71c <__adddf3>
   1fc3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1fc40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1fc44:	4620      	mov	r0, r4
   1fc46:	4629      	mov	r1, r5
   1fc48:	f7fa fd66 	bl	1a718 <__aeabi_dsub>
   1fc4c:	4602      	mov	r2, r0
   1fc4e:	460b      	mov	r3, r1
   1fc50:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   1fc54:	f7fa fd62 	bl	1a71c <__adddf3>
   1fc58:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1fc5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fc60:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1fc64:	3f01      	subs	r7, #1
   1fc66:	3e08      	subs	r6, #8
   1fc68:	2f00      	cmp	r7, #0
   1fc6a:	dcdf      	bgt.n	1fc2c <__kernel_rem_pio2+0x5ec>
   1fc6c:	990d      	ldr	r1, [sp, #52]
   1fc6e:	9124      	str	r1, [sp, #144]
   1fc70:	e022      	b.n	1fcb8 <__kernel_rem_pio2+0x678>
   1fc72:	9b26      	ldr	r3, [sp, #152]
   1fc74:	9a24      	ldr	r2, [sp, #144]
   1fc76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   1fc7a:	3a01      	subs	r2, #1
   1fc7c:	e88d 0003 	stmia.w	sp, {r0, r1}
   1fc80:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   1fc84:	9224      	str	r2, [sp, #144]
   1fc86:	4620      	mov	r0, r4
   1fc88:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1fc8c:	4629      	mov	r1, r5
   1fc8e:	f7fa fd45 	bl	1a71c <__adddf3>
   1fc92:	4606      	mov	r6, r0
   1fc94:	460f      	mov	r7, r1
   1fc96:	4632      	mov	r2, r6
   1fc98:	463b      	mov	r3, r7
   1fc9a:	4620      	mov	r0, r4
   1fc9c:	4629      	mov	r1, r5
   1fc9e:	f7fa fd3b 	bl	1a718 <__aeabi_dsub>
   1fca2:	4602      	mov	r2, r0
   1fca4:	460b      	mov	r3, r1
   1fca6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1fcaa:	f7fa fd37 	bl	1a71c <__adddf3>
   1fcae:	9a26      	ldr	r2, [sp, #152]
   1fcb0:	e9c2 0104 	strd	r0, r1, [r2, #16]
   1fcb4:	e9c2 6702 	strd	r6, r7, [r2, #8]
   1fcb8:	9b26      	ldr	r3, [sp, #152]
   1fcba:	9c24      	ldr	r4, [sp, #144]
   1fcbc:	3b08      	subs	r3, #8
   1fcbe:	2c01      	cmp	r4, #1
   1fcc0:	9326      	str	r3, [sp, #152]
   1fcc2:	dcd6      	bgt.n	1fc72 <__kernel_rem_pio2+0x632>
   1fcc4:	9e0d      	ldr	r6, [sp, #52]
   1fcc6:	ab50      	add	r3, sp, #320
   1fcc8:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1fccc:	4634      	mov	r4, r6
   1fcce:	2000      	movs	r0, #0
   1fcd0:	2100      	movs	r1, #0
   1fcd2:	e004      	b.n	1fcde <__kernel_rem_pio2+0x69e>
   1fcd4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1fcd8:	f7fa fd20 	bl	1a71c <__adddf3>
   1fcdc:	3c01      	subs	r4, #1
   1fcde:	3d08      	subs	r5, #8
   1fce0:	2c01      	cmp	r4, #1
   1fce2:	dcf7      	bgt.n	1fcd4 <__kernel_rem_pio2+0x694>
   1fce4:	9a13      	ldr	r2, [sp, #76]
   1fce6:	f50d 7ca0 	add.w	ip, sp, #320	; 0x140
   1fcea:	b95a      	cbnz	r2, 1fd04 <__kernel_rem_pio2+0x6c4>
   1fcec:	9c0b      	ldr	r4, [sp, #44]
   1fcee:	e89c 000c 	ldmia.w	ip, {r2, r3}
   1fcf2:	e884 000c 	stmia.w	r4, {r2, r3}
   1fcf6:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   1fcfa:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1fcfe:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1fd02:	e014      	b.n	1fd2e <__kernel_rem_pio2+0x6ee>
   1fd04:	f8dc 3000 	ldr.w	r3, [ip]
   1fd08:	9e0b      	ldr	r6, [sp, #44]
   1fd0a:	6033      	str	r3, [r6, #0]
   1fd0c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1fd10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1fd14:	6073      	str	r3, [r6, #4]
   1fd16:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1fd1a:	60b3      	str	r3, [r6, #8]
   1fd1c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1fd20:	6130      	str	r0, [r6, #16]
   1fd22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1fd26:	60f3      	str	r3, [r6, #12]
   1fd28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1fd2c:	6173      	str	r3, [r6, #20]
   1fd2e:	9910      	ldr	r1, [sp, #64]
   1fd30:	f001 0007 	and.w	r0, r1, #7	; 0x7
   1fd34:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
   1fd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fd3a:	46c0      	nop			(mov r8, r8)
   1fd3c:	00023a80 	.word	0x00023a80
   1fd40:	2aaaaaab 	.word	0x2aaaaaab
   1fd44:	3e700000 	.word	0x3e700000
   1fd48:	c1700000 	.word	0xc1700000
   1fd4c:	c0200000 	.word	0xc0200000
   1fd50:	3fe00000 	.word	0x3fe00000
   1fd54:	3ff00000 	.word	0x3ff00000
   1fd58:	41700000 	.word	0x41700000
   1fd5c:	00023a90 	.word	0x00023a90

0001fd60 <__kernel_sin>:
   1fd60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd62:	b089      	sub	sp, #36
   1fd64:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1fd68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1fd6c:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1fd70:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1fd74:	da04      	bge.n	1fd80 <__kernel_sin+0x20>
   1fd76:	f7fb f91b 	bl	1afb0 <__aeabi_d2iz>
   1fd7a:	2800      	cmp	r0, #0
   1fd7c:	f000 8085 	beq.w	1fe8a <__kernel_sin+0x12a>
   1fd80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fd84:	4602      	mov	r2, r0
   1fd86:	460b      	mov	r3, r1
   1fd88:	f7fa fe7a 	bl	1aa80 <__aeabi_dmul>
   1fd8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1fd90:	4606      	mov	r6, r0
   1fd92:	460f      	mov	r7, r1
   1fd94:	f7fa fe74 	bl	1aa80 <__aeabi_dmul>
   1fd98:	a23f      	add	r2, pc, #252	(adr r2, 1fe98 <__kernel_sin+0x138>)
   1fd9a:	ca0c      	ldmia	r2!, {r2, r3}
   1fd9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1fda0:	4630      	mov	r0, r6
   1fda2:	4639      	mov	r1, r7
   1fda4:	f7fa fe6c 	bl	1aa80 <__aeabi_dmul>
   1fda8:	a23d      	add	r2, pc, #244	(adr r2, 1fea0 <__kernel_sin+0x140>)
   1fdaa:	ca0c      	ldmia	r2!, {r2, r3}
   1fdac:	f7fa fcb4 	bl	1a718 <__aeabi_dsub>
   1fdb0:	4602      	mov	r2, r0
   1fdb2:	460b      	mov	r3, r1
   1fdb4:	4630      	mov	r0, r6
   1fdb6:	4639      	mov	r1, r7
   1fdb8:	f7fa fe62 	bl	1aa80 <__aeabi_dmul>
   1fdbc:	a23a      	add	r2, pc, #232	(adr r2, 1fea8 <__kernel_sin+0x148>)
   1fdbe:	ca0c      	ldmia	r2!, {r2, r3}
   1fdc0:	f7fa fcac 	bl	1a71c <__adddf3>
   1fdc4:	4602      	mov	r2, r0
   1fdc6:	460b      	mov	r3, r1
   1fdc8:	4630      	mov	r0, r6
   1fdca:	4639      	mov	r1, r7
   1fdcc:	f7fa fe58 	bl	1aa80 <__aeabi_dmul>
   1fdd0:	a237      	add	r2, pc, #220	(adr r2, 1feb0 <__kernel_sin+0x150>)
   1fdd2:	ca0c      	ldmia	r2!, {r2, r3}
   1fdd4:	f7fa fca0 	bl	1a718 <__aeabi_dsub>
   1fdd8:	4602      	mov	r2, r0
   1fdda:	460b      	mov	r3, r1
   1fddc:	4630      	mov	r0, r6
   1fdde:	4639      	mov	r1, r7
   1fde0:	f7fa fe4e 	bl	1aa80 <__aeabi_dmul>
   1fde4:	a234      	add	r2, pc, #208	(adr r2, 1feb8 <__kernel_sin+0x158>)
   1fde6:	ca0c      	ldmia	r2!, {r2, r3}
   1fde8:	f7fa fc98 	bl	1a71c <__adddf3>
   1fdec:	9b0e      	ldr	r3, [sp, #56]
   1fdee:	e88d 0003 	stmia.w	sp, {r0, r1}
   1fdf2:	b9b3      	cbnz	r3, 1fe22 <__kernel_sin+0xc2>
   1fdf4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1fdf8:	4630      	mov	r0, r6
   1fdfa:	4639      	mov	r1, r7
   1fdfc:	f7fa fe40 	bl	1aa80 <__aeabi_dmul>
   1fe00:	a22f      	add	r2, pc, #188	(adr r2, 1fec0 <__kernel_sin+0x160>)
   1fe02:	ca0c      	ldmia	r2!, {r2, r3}
   1fe04:	f7fa fc88 	bl	1a718 <__aeabi_dsub>
   1fe08:	4602      	mov	r2, r0
   1fe0a:	460b      	mov	r3, r1
   1fe0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1fe10:	f7fa fe36 	bl	1aa80 <__aeabi_dmul>
   1fe14:	4602      	mov	r2, r0
   1fe16:	460b      	mov	r3, r1
   1fe18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fe1c:	f7fa fc7e 	bl	1a71c <__adddf3>
   1fe20:	e031      	b.n	1fe86 <__kernel_sin+0x126>
   1fe22:	2200      	movs	r2, #0
   1fe24:	4b28      	ldr	r3, [pc, #160]	(1fec8 <__kernel_sin+0x168>)
   1fe26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fe2a:	f7fa fe29 	bl	1aa80 <__aeabi_dmul>
   1fe2e:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1fe32:	4604      	mov	r4, r0
   1fe34:	460d      	mov	r5, r1
   1fe36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1fe3a:	f7fa fe21 	bl	1aa80 <__aeabi_dmul>
   1fe3e:	4602      	mov	r2, r0
   1fe40:	460b      	mov	r3, r1
   1fe42:	4620      	mov	r0, r4
   1fe44:	4629      	mov	r1, r5
   1fe46:	f7fa fc67 	bl	1a718 <__aeabi_dsub>
   1fe4a:	4602      	mov	r2, r0
   1fe4c:	460b      	mov	r3, r1
   1fe4e:	4630      	mov	r0, r6
   1fe50:	4639      	mov	r1, r7
   1fe52:	f7fa fe15 	bl	1aa80 <__aeabi_dmul>
   1fe56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fe5a:	f7fa fc5d 	bl	1a718 <__aeabi_dsub>
   1fe5e:	a218      	add	r2, pc, #96	(adr r2, 1fec0 <__kernel_sin+0x160>)
   1fe60:	ca0c      	ldmia	r2!, {r2, r3}
   1fe62:	4604      	mov	r4, r0
   1fe64:	460d      	mov	r5, r1
   1fe66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1fe6a:	f7fa fe09 	bl	1aa80 <__aeabi_dmul>
   1fe6e:	4602      	mov	r2, r0
   1fe70:	460b      	mov	r3, r1
   1fe72:	4620      	mov	r0, r4
   1fe74:	4629      	mov	r1, r5
   1fe76:	f7fa fc51 	bl	1a71c <__adddf3>
   1fe7a:	4602      	mov	r2, r0
   1fe7c:	460b      	mov	r3, r1
   1fe7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fe82:	f7fa fc49 	bl	1a718 <__aeabi_dsub>
   1fe86:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1fe8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1fe8e:	b009      	add	sp, #36
   1fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fe92:	46c0      	nop			(mov r8, r8)
   1fe94:	46c0      	nop			(mov r8, r8)
   1fe96:	46c0      	nop			(mov r8, r8)
   1fe98:	5acfd57c 	.word	0x5acfd57c
   1fe9c:	3de5d93a 	.word	0x3de5d93a
   1fea0:	8a2b9ceb 	.word	0x8a2b9ceb
   1fea4:	3e5ae5e6 	.word	0x3e5ae5e6
   1fea8:	57b1fe7d 	.word	0x57b1fe7d
   1feac:	3ec71de3 	.word	0x3ec71de3
   1feb0:	19c161d5 	.word	0x19c161d5
   1feb4:	3f2a01a0 	.word	0x3f2a01a0
   1feb8:	1110f8a6 	.word	0x1110f8a6
   1febc:	3f811111 	.word	0x3f811111
   1fec0:	55555549 	.word	0x55555549
   1fec4:	3fc55555 	.word	0x3fc55555
   1fec8:	3fe00000 	.word	0x3fe00000
   1fecc:	46c046c0 	.word	0x46c046c0

0001fed0 <atan>:
   1fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fed2:	4bb3      	ldr	r3, [pc, #716]	(201a0 <atan+0x2d0>)
   1fed4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1fed8:	b087      	sub	sp, #28
   1feda:	429c      	cmp	r4, r3
   1fedc:	4606      	mov	r6, r0
   1fede:	460f      	mov	r7, r1
   1fee0:	9104      	str	r1, [sp, #16]
   1fee2:	dd1b      	ble.n	1ff1c <atan+0x4c>
   1fee4:	4baf      	ldr	r3, [pc, #700]	(201a4 <atan+0x2d4>)
   1fee6:	429c      	cmp	r4, r3
   1fee8:	dc08      	bgt.n	1fefc <atan+0x2c>
   1feea:	bf14      	ite	ne
   1feec:	2300      	movne	r3, #0
   1feee:	2301      	moveq	r3, #1
   1fef0:	2800      	cmp	r0, #0
   1fef2:	bf0c      	ite	eq
   1fef4:	2300      	moveq	r3, #0
   1fef6:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1fefa:	b133      	cbz	r3, 1ff0a <atan+0x3a>
   1fefc:	4630      	mov	r0, r6
   1fefe:	4639      	mov	r1, r7
   1ff00:	4632      	mov	r2, r6
   1ff02:	463b      	mov	r3, r7
   1ff04:	f7fa fc0a 	bl	1a71c <__adddf3>
   1ff08:	e10c      	b.n	20124 <atan+0x254>
   1ff0a:	9904      	ldr	r1, [sp, #16]
   1ff0c:	2900      	cmp	r1, #0
   1ff0e:	dd02      	ble.n	1ff16 <atan+0x46>
   1ff10:	a687      	add	r6, pc, #540	(adr r6, 20130 <atan+0x260>)
   1ff12:	cec0      	ldmia	r6!, {r6, r7}
   1ff14:	e17b      	b.n	2020e <atan+0x33e>
   1ff16:	a688      	add	r6, pc, #544	(adr r6, 20138 <atan+0x268>)
   1ff18:	cec0      	ldmia	r6!, {r6, r7}
   1ff1a:	e178      	b.n	2020e <atan+0x33e>
   1ff1c:	4ba2      	ldr	r3, [pc, #648]	(201a8 <atan+0x2d8>)
   1ff1e:	429c      	cmp	r4, r3
   1ff20:	dc0f      	bgt.n	1ff42 <atan+0x72>
   1ff22:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   1ff26:	429c      	cmp	r4, r3
   1ff28:	dc6f      	bgt.n	2000a <atan+0x13a>
   1ff2a:	a285      	add	r2, pc, #532	(adr r2, 20140 <atan+0x270>)
   1ff2c:	ca0c      	ldmia	r2!, {r2, r3}
   1ff2e:	f7fa fbf5 	bl	1a71c <__adddf3>
   1ff32:	2200      	movs	r2, #0
   1ff34:	4b9d      	ldr	r3, [pc, #628]	(201ac <atan+0x2dc>)
   1ff36:	f7fb f831 	bl	1af9c <__aeabi_dcmpgt>
   1ff3a:	2800      	cmp	r0, #0
   1ff3c:	f040 8167 	bne.w	2020e <atan+0x33e>
   1ff40:	e063      	b.n	2000a <atan+0x13a>
   1ff42:	f000 f96d 	bl	20220 <fabs>
   1ff46:	4b9a      	ldr	r3, [pc, #616]	(201b0 <atan+0x2e0>)
   1ff48:	4606      	mov	r6, r0
   1ff4a:	429c      	cmp	r4, r3
   1ff4c:	460f      	mov	r7, r1
   1ff4e:	dc34      	bgt.n	1ffba <atan+0xea>
   1ff50:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   1ff54:	429c      	cmp	r4, r3
   1ff56:	dc1a      	bgt.n	1ff8e <atan+0xbe>
   1ff58:	4632      	mov	r2, r6
   1ff5a:	463b      	mov	r3, r7
   1ff5c:	f7fa fbde 	bl	1a71c <__adddf3>
   1ff60:	2200      	movs	r2, #0
   1ff62:	4b92      	ldr	r3, [pc, #584]	(201ac <atan+0x2dc>)
   1ff64:	f7fa fbd8 	bl	1a718 <__aeabi_dsub>
   1ff68:	2200      	movs	r2, #0
   1ff6a:	4604      	mov	r4, r0
   1ff6c:	460d      	mov	r5, r1
   1ff6e:	4630      	mov	r0, r6
   1ff70:	4639      	mov	r1, r7
   1ff72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ff76:	f7fa fbd1 	bl	1a71c <__adddf3>
   1ff7a:	460b      	mov	r3, r1
   1ff7c:	4602      	mov	r2, r0
   1ff7e:	4629      	mov	r1, r5
   1ff80:	4620      	mov	r0, r4
   1ff82:	f7fa fea7 	bl	1acd4 <__aeabi_ddiv>
   1ff86:	2300      	movs	r3, #0
   1ff88:	4606      	mov	r6, r0
   1ff8a:	460f      	mov	r7, r1
   1ff8c:	e03f      	b.n	2000e <atan+0x13e>
   1ff8e:	2200      	movs	r2, #0
   1ff90:	4b86      	ldr	r3, [pc, #536]	(201ac <atan+0x2dc>)
   1ff92:	f7fa fbc1 	bl	1a718 <__aeabi_dsub>
   1ff96:	2200      	movs	r2, #0
   1ff98:	4604      	mov	r4, r0
   1ff9a:	460d      	mov	r5, r1
   1ff9c:	4630      	mov	r0, r6
   1ff9e:	4639      	mov	r1, r7
   1ffa0:	4b82      	ldr	r3, [pc, #520]	(201ac <atan+0x2dc>)
   1ffa2:	f7fa fbbb 	bl	1a71c <__adddf3>
   1ffa6:	4602      	mov	r2, r0
   1ffa8:	460b      	mov	r3, r1
   1ffaa:	4620      	mov	r0, r4
   1ffac:	4629      	mov	r1, r5
   1ffae:	f7fa fe91 	bl	1acd4 <__aeabi_ddiv>
   1ffb2:	460f      	mov	r7, r1
   1ffb4:	4606      	mov	r6, r0
   1ffb6:	2101      	movs	r1, #1
   1ffb8:	e025      	b.n	20006 <atan+0x136>
   1ffba:	4b7e      	ldr	r3, [pc, #504]	(201b4 <atan+0x2e4>)
   1ffbc:	429c      	cmp	r4, r3
   1ffbe:	dc19      	bgt.n	1fff4 <atan+0x124>
   1ffc0:	2200      	movs	r2, #0
   1ffc2:	4b7d      	ldr	r3, [pc, #500]	(201b8 <atan+0x2e8>)
   1ffc4:	f7fa fba8 	bl	1a718 <__aeabi_dsub>
   1ffc8:	2200      	movs	r2, #0
   1ffca:	4604      	mov	r4, r0
   1ffcc:	460d      	mov	r5, r1
   1ffce:	4630      	mov	r0, r6
   1ffd0:	4639      	mov	r1, r7
   1ffd2:	4b79      	ldr	r3, [pc, #484]	(201b8 <atan+0x2e8>)
   1ffd4:	f7fa fd54 	bl	1aa80 <__aeabi_dmul>
   1ffd8:	2200      	movs	r2, #0
   1ffda:	4b74      	ldr	r3, [pc, #464]	(201ac <atan+0x2dc>)
   1ffdc:	f7fa fb9e 	bl	1a71c <__adddf3>
   1ffe0:	460b      	mov	r3, r1
   1ffe2:	4602      	mov	r2, r0
   1ffe4:	4629      	mov	r1, r5
   1ffe6:	4620      	mov	r0, r4
   1ffe8:	f7fa fe74 	bl	1acd4 <__aeabi_ddiv>
   1ffec:	2302      	movs	r3, #2
   1ffee:	4606      	mov	r6, r0
   1fff0:	460f      	mov	r7, r1
   1fff2:	e00c      	b.n	2000e <atan+0x13e>
   1fff4:	4632      	mov	r2, r6
   1fff6:	463b      	mov	r3, r7
   1fff8:	2000      	movs	r0, #0
   1fffa:	4970      	ldr	r1, [pc, #448]	(201bc <atan+0x2ec>)
   1fffc:	f7fa fe6a 	bl	1acd4 <__aeabi_ddiv>
   20000:	460f      	mov	r7, r1
   20002:	4606      	mov	r6, r0
   20004:	2103      	movs	r1, #3
   20006:	9105      	str	r1, [sp, #20]
   20008:	e002      	b.n	20010 <atan+0x140>
   2000a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2000e:	9305      	str	r3, [sp, #20]
   20010:	4632      	mov	r2, r6
   20012:	463b      	mov	r3, r7
   20014:	4630      	mov	r0, r6
   20016:	4639      	mov	r1, r7
   20018:	f7fa fd32 	bl	1aa80 <__aeabi_dmul>
   2001c:	4602      	mov	r2, r0
   2001e:	460b      	mov	r3, r1
   20020:	e9cd 0102 	strd	r0, r1, [sp, #8]
   20024:	f7fa fd2c 	bl	1aa80 <__aeabi_dmul>
   20028:	a247      	add	r2, pc, #284	(adr r2, 20148 <atan+0x278>)
   2002a:	ca0c      	ldmia	r2!, {r2, r3}
   2002c:	4604      	mov	r4, r0
   2002e:	460d      	mov	r5, r1
   20030:	f7fa fd26 	bl	1aa80 <__aeabi_dmul>
   20034:	a246      	add	r2, pc, #280	(adr r2, 20150 <atan+0x280>)
   20036:	ca0c      	ldmia	r2!, {r2, r3}
   20038:	f7fa fb70 	bl	1a71c <__adddf3>
   2003c:	4602      	mov	r2, r0
   2003e:	460b      	mov	r3, r1
   20040:	4620      	mov	r0, r4
   20042:	4629      	mov	r1, r5
   20044:	f7fa fd1c 	bl	1aa80 <__aeabi_dmul>
   20048:	a243      	add	r2, pc, #268	(adr r2, 20158 <atan+0x288>)
   2004a:	ca0c      	ldmia	r2!, {r2, r3}
   2004c:	f7fa fb66 	bl	1a71c <__adddf3>
   20050:	4602      	mov	r2, r0
   20052:	460b      	mov	r3, r1
   20054:	4620      	mov	r0, r4
   20056:	4629      	mov	r1, r5
   20058:	f7fa fd12 	bl	1aa80 <__aeabi_dmul>
   2005c:	a240      	add	r2, pc, #256	(adr r2, 20160 <atan+0x290>)
   2005e:	ca0c      	ldmia	r2!, {r2, r3}
   20060:	f7fa fb5c 	bl	1a71c <__adddf3>
   20064:	4602      	mov	r2, r0
   20066:	460b      	mov	r3, r1
   20068:	4620      	mov	r0, r4
   2006a:	4629      	mov	r1, r5
   2006c:	f7fa fd08 	bl	1aa80 <__aeabi_dmul>
   20070:	a23d      	add	r2, pc, #244	(adr r2, 20168 <atan+0x298>)
   20072:	ca0c      	ldmia	r2!, {r2, r3}
   20074:	f7fa fb52 	bl	1a71c <__adddf3>
   20078:	4602      	mov	r2, r0
   2007a:	460b      	mov	r3, r1
   2007c:	4620      	mov	r0, r4
   2007e:	4629      	mov	r1, r5
   20080:	f7fa fcfe 	bl	1aa80 <__aeabi_dmul>
   20084:	a23a      	add	r2, pc, #232	(adr r2, 20170 <atan+0x2a0>)
   20086:	ca0c      	ldmia	r2!, {r2, r3}
   20088:	f7fa fb48 	bl	1a71c <__adddf3>
   2008c:	4602      	mov	r2, r0
   2008e:	460b      	mov	r3, r1
   20090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20094:	f7fa fcf4 	bl	1aa80 <__aeabi_dmul>
   20098:	a237      	add	r2, pc, #220	(adr r2, 20178 <atan+0x2a8>)
   2009a:	ca0c      	ldmia	r2!, {r2, r3}
   2009c:	e88d 0003 	stmia.w	sp, {r0, r1}
   200a0:	4620      	mov	r0, r4
   200a2:	4629      	mov	r1, r5
   200a4:	f7fa fcec 	bl	1aa80 <__aeabi_dmul>
   200a8:	a235      	add	r2, pc, #212	(adr r2, 20180 <atan+0x2b0>)
   200aa:	ca0c      	ldmia	r2!, {r2, r3}
   200ac:	f7fa fb34 	bl	1a718 <__aeabi_dsub>
   200b0:	4602      	mov	r2, r0
   200b2:	460b      	mov	r3, r1
   200b4:	4620      	mov	r0, r4
   200b6:	4629      	mov	r1, r5
   200b8:	f7fa fce2 	bl	1aa80 <__aeabi_dmul>
   200bc:	a232      	add	r2, pc, #200	(adr r2, 20188 <atan+0x2b8>)
   200be:	ca0c      	ldmia	r2!, {r2, r3}
   200c0:	f7fa fb2a 	bl	1a718 <__aeabi_dsub>
   200c4:	4602      	mov	r2, r0
   200c6:	460b      	mov	r3, r1
   200c8:	4620      	mov	r0, r4
   200ca:	4629      	mov	r1, r5
   200cc:	f7fa fcd8 	bl	1aa80 <__aeabi_dmul>
   200d0:	a22f      	add	r2, pc, #188	(adr r2, 20190 <atan+0x2c0>)
   200d2:	ca0c      	ldmia	r2!, {r2, r3}
   200d4:	f7fa fb20 	bl	1a718 <__aeabi_dsub>
   200d8:	4602      	mov	r2, r0
   200da:	460b      	mov	r3, r1
   200dc:	4620      	mov	r0, r4
   200de:	4629      	mov	r1, r5
   200e0:	f7fa fcce 	bl	1aa80 <__aeabi_dmul>
   200e4:	a22c      	add	r2, pc, #176	(adr r2, 20198 <atan+0x2c8>)
   200e6:	ca0c      	ldmia	r2!, {r2, r3}
   200e8:	f7fa fb16 	bl	1a718 <__aeabi_dsub>
   200ec:	4602      	mov	r2, r0
   200ee:	460b      	mov	r3, r1
   200f0:	4620      	mov	r0, r4
   200f2:	4629      	mov	r1, r5
   200f4:	f7fa fcc4 	bl	1aa80 <__aeabi_dmul>
   200f8:	460b      	mov	r3, r1
   200fa:	9905      	ldr	r1, [sp, #20]
   200fc:	4602      	mov	r2, r0
   200fe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   20102:	d15d      	bne.n	201c0 <atan+0x2f0>
   20104:	e89d 0003 	ldmia.w	sp, {r0, r1}
   20108:	f7fa fb08 	bl	1a71c <__adddf3>
   2010c:	4602      	mov	r2, r0
   2010e:	460b      	mov	r3, r1
   20110:	4630      	mov	r0, r6
   20112:	4639      	mov	r1, r7
   20114:	f7fa fcb4 	bl	1aa80 <__aeabi_dmul>
   20118:	4602      	mov	r2, r0
   2011a:	460b      	mov	r3, r1
   2011c:	4630      	mov	r0, r6
   2011e:	4639      	mov	r1, r7
   20120:	f7fa fafa 	bl	1a718 <__aeabi_dsub>
   20124:	4606      	mov	r6, r0
   20126:	460f      	mov	r7, r1
   20128:	e071      	b.n	2020e <atan+0x33e>
   2012a:	46c0      	nop			(mov r8, r8)
   2012c:	46c0      	nop			(mov r8, r8)
   2012e:	46c0      	nop			(mov r8, r8)
   20130:	54442d18 	.word	0x54442d18
   20134:	3ff921fb 	.word	0x3ff921fb
   20138:	54442d18 	.word	0x54442d18
   2013c:	bff921fb 	.word	0xbff921fb
   20140:	8800759c 	.word	0x8800759c
   20144:	7e37e43c 	.word	0x7e37e43c
   20148:	e322da11 	.word	0xe322da11
   2014c:	3f90ad3a 	.word	0x3f90ad3a
   20150:	24760deb 	.word	0x24760deb
   20154:	3fa97b4b 	.word	0x3fa97b4b
   20158:	a0d03d51 	.word	0xa0d03d51
   2015c:	3fb10d66 	.word	0x3fb10d66
   20160:	c54c206e 	.word	0xc54c206e
   20164:	3fb745cd 	.word	0x3fb745cd
   20168:	920083ff 	.word	0x920083ff
   2016c:	3fc24924 	.word	0x3fc24924
   20170:	5555550d 	.word	0x5555550d
   20174:	3fd55555 	.word	0x3fd55555
   20178:	2c6a6c2f 	.word	0x2c6a6c2f
   2017c:	bfa2b444 	.word	0xbfa2b444
   20180:	52defd9a 	.word	0x52defd9a
   20184:	3fadde2d 	.word	0x3fadde2d
   20188:	af749a6d 	.word	0xaf749a6d
   2018c:	3fb3b0f2 	.word	0x3fb3b0f2
   20190:	fe231671 	.word	0xfe231671
   20194:	3fbc71c6 	.word	0x3fbc71c6
   20198:	9998ebc4 	.word	0x9998ebc4
   2019c:	3fc99999 	.word	0x3fc99999
   201a0:	440fffff 	.word	0x440fffff
   201a4:	7ff00000 	.word	0x7ff00000
   201a8:	3fdbffff 	.word	0x3fdbffff
   201ac:	3ff00000 	.word	0x3ff00000
   201b0:	3ff2ffff 	.word	0x3ff2ffff
   201b4:	40037fff 	.word	0x40037fff
   201b8:	3ff80000 	.word	0x3ff80000
   201bc:	bff00000 	.word	0xbff00000
   201c0:	9905      	ldr	r1, [sp, #20]
   201c2:	4c15      	ldr	r4, [pc, #84]	(20218 <atan+0x348>)
   201c4:	00cd      	lsls	r5, r1, #3
   201c6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   201ca:	f7fa faa7 	bl	1a71c <__adddf3>
   201ce:	4602      	mov	r2, r0
   201d0:	460b      	mov	r3, r1
   201d2:	4630      	mov	r0, r6
   201d4:	4639      	mov	r1, r7
   201d6:	f7fa fc53 	bl	1aa80 <__aeabi_dmul>
   201da:	4b10      	ldr	r3, [pc, #64]	(2021c <atan+0x34c>)
   201dc:	1964      	adds	r4, r4, r5
   201de:	195b      	adds	r3, r3, r5
   201e0:	cb0c      	ldmia	r3!, {r2, r3}
   201e2:	f7fa fa99 	bl	1a718 <__aeabi_dsub>
   201e6:	4632      	mov	r2, r6
   201e8:	463b      	mov	r3, r7
   201ea:	f7fa fa95 	bl	1a718 <__aeabi_dsub>
   201ee:	4602      	mov	r2, r0
   201f0:	460b      	mov	r3, r1
   201f2:	e894 0003 	ldmia.w	r4, {r0, r1}
   201f6:	f7fa fa8f 	bl	1a718 <__aeabi_dsub>
   201fa:	9b04      	ldr	r3, [sp, #16]
   201fc:	2b00      	cmp	r3, #0
   201fe:	bfa7      	ittee	ge
   20200:	4602      	movge	r2, r0
   20202:	460b      	movge	r3, r1
   20204:	4602      	movlt	r2, r0
   20206:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
   2020a:	4616      	mov	r6, r2
   2020c:	461f      	mov	r7, r3
   2020e:	4630      	mov	r0, r6
   20210:	4639      	mov	r1, r7
   20212:	b007      	add	sp, #28
   20214:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20216:	46c0      	nop			(mov r8, r8)
   20218:	00023ad0 	.word	0x00023ad0
   2021c:	00023af0 	.word	0x00023af0

00020220 <fabs>:
   20220:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   20224:	b530      	push	{r4, r5, lr}
   20226:	460d      	mov	r5, r1
   20228:	4604      	mov	r4, r0
   2022a:	4619      	mov	r1, r3
   2022c:	bd30      	pop	{r4, r5, pc}
   2022e:	46c0      	nop			(mov r8, r8)

00020230 <floor>:
   20230:	b5f0      	push	{r4, r5, r6, r7, lr}
   20232:	150b      	asrs	r3, r1, #20
   20234:	055b      	lsls	r3, r3, #21
   20236:	0d5b      	lsrs	r3, r3, #21
   20238:	f5a3 757e 	sub.w	r5, r3, #1016	; 0x3f8
   2023c:	3d07      	subs	r5, #7
   2023e:	b083      	sub	sp, #12
   20240:	2d13      	cmp	r5, #19
   20242:	460c      	mov	r4, r1
   20244:	9001      	str	r0, [sp, #4]
   20246:	4606      	mov	r6, r0
   20248:	dc32      	bgt.n	202b0 <floor+0x80>
   2024a:	2d00      	cmp	r5, #0
   2024c:	da14      	bge.n	20278 <floor+0x48>
   2024e:	a230      	add	r2, pc, #192	(adr r2, 20310 <floor+0xe0>)
   20250:	ca0c      	ldmia	r2!, {r2, r3}
   20252:	f7fa fa63 	bl	1a71c <__adddf3>
   20256:	2200      	movs	r2, #0
   20258:	2300      	movs	r3, #0
   2025a:	f7fa fe9f 	bl	1af9c <__aeabi_dcmpgt>
   2025e:	2800      	cmp	r0, #0
   20260:	d051      	beq.n	20306 <floor+0xd6>
   20262:	2c00      	cmp	r4, #0
   20264:	db01      	blt.n	2026a <floor+0x3a>
   20266:	2400      	movs	r4, #0
   20268:	e020      	b.n	202ac <floor+0x7c>
   2026a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   2026e:	4333      	orrs	r3, r6
   20270:	4b29      	ldr	r3, [pc, #164]	(20318 <floor+0xe8>)
   20272:	bf18      	it	ne
   20274:	461c      	movne	r4, r3
   20276:	e019      	b.n	202ac <floor+0x7c>
   20278:	4b28      	ldr	r3, [pc, #160]	(2031c <floor+0xec>)
   2027a:	9a01      	ldr	r2, [sp, #4]
   2027c:	fa53 f705 	asrs.w	r7, r3, r5
   20280:	ea07 0301 	and.w	r3, r7, r1
   20284:	431a      	orrs	r2, r3
   20286:	d040      	beq.n	2030a <floor+0xda>
   20288:	a221      	add	r2, pc, #132	(adr r2, 20310 <floor+0xe0>)
   2028a:	ca0c      	ldmia	r2!, {r2, r3}
   2028c:	f7fa fa46 	bl	1a71c <__adddf3>
   20290:	2200      	movs	r2, #0
   20292:	2300      	movs	r3, #0
   20294:	f7fa fe82 	bl	1af9c <__aeabi_dcmpgt>
   20298:	2800      	cmp	r0, #0
   2029a:	d034      	beq.n	20306 <floor+0xd6>
   2029c:	2c00      	cmp	r4, #0
   2029e:	da03      	bge.n	202a8 <floor+0x78>
   202a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   202a4:	412b      	asrs	r3, r5
   202a6:	18e4      	adds	r4, r4, r3
   202a8:	ea24 0407 	bic.w	r4, r4, r7
   202ac:	2600      	movs	r6, #0
   202ae:	e02a      	b.n	20306 <floor+0xd6>
   202b0:	2d33      	cmp	r5, #51
   202b2:	dd07      	ble.n	202c4 <floor+0x94>
   202b4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   202b8:	d127      	bne.n	2030a <floor+0xda>
   202ba:	4602      	mov	r2, r0
   202bc:	460b      	mov	r3, r1
   202be:	f7fa fa2d 	bl	1a71c <__adddf3>
   202c2:	e022      	b.n	2030a <floor+0xda>
   202c4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
   202c8:	3b03      	subs	r3, #3
   202ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   202ce:	fa32 f703 	lsrs.w	r7, r2, r3
   202d2:	4207      	tst	r7, r0
   202d4:	d019      	beq.n	2030a <floor+0xda>
   202d6:	a20e      	add	r2, pc, #56	(adr r2, 20310 <floor+0xe0>)
   202d8:	ca0c      	ldmia	r2!, {r2, r3}
   202da:	f7fa fa1f 	bl	1a71c <__adddf3>
   202de:	2200      	movs	r2, #0
   202e0:	2300      	movs	r3, #0
   202e2:	f7fa fe5b 	bl	1af9c <__aeabi_dcmpgt>
   202e6:	b170      	cbz	r0, 20306 <floor+0xd6>
   202e8:	2c00      	cmp	r4, #0
   202ea:	da0a      	bge.n	20302 <floor+0xd2>
   202ec:	2d14      	cmp	r5, #20
   202ee:	d007      	beq.n	20300 <floor+0xd0>
   202f0:	2301      	movs	r3, #1
   202f2:	f1c5 0234 	rsb	r2, r5, #52	; 0x34
   202f6:	4093      	lsls	r3, r2
   202f8:	18f6      	adds	r6, r6, r3
   202fa:	9b01      	ldr	r3, [sp, #4]
   202fc:	429e      	cmp	r6, r3
   202fe:	d200      	bcs.n	20302 <floor+0xd2>
   20300:	3401      	adds	r4, #1
   20302:	ea26 0607 	bic.w	r6, r6, r7
   20306:	4630      	mov	r0, r6
   20308:	4621      	mov	r1, r4
   2030a:	b003      	add	sp, #12
   2030c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2030e:	46c0      	nop			(mov r8, r8)
   20310:	8800759c 	.word	0x8800759c
   20314:	7e37e43c 	.word	0x7e37e43c
   20318:	bff00000 	.word	0xbff00000
   2031c:	000fffff 	.word	0x000fffff

00020320 <__isnand>:
   20320:	460b      	mov	r3, r1
   20322:	f1c0 0100 	rsb	r1, r0, #0	; 0x0
   20326:	4301      	orrs	r1, r0
   20328:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2032c:	ea40 70d1 	orr.w	r0, r0, r1, lsr #31
   20330:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
   20334:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
   20338:	0fc0      	lsrs	r0, r0, #31
   2033a:	4770      	bx	lr

0002033c <matherr>:
   2033c:	2000      	movs	r0, #0
   2033e:	4770      	bx	lr

00020340 <scalbn>:
   20340:	b5f0      	push	{r4, r5, r6, r7, lr}
   20342:	4b37      	ldr	r3, [pc, #220]	(20420 <scalbn+0xe0>)
   20344:	460d      	mov	r5, r1
   20346:	ea05 0303 	and.w	r3, r5, r3
   2034a:	4617      	mov	r7, r2
   2034c:	b081      	sub	sp, #4
   2034e:	4604      	mov	r4, r0
   20350:	460e      	mov	r6, r1
   20352:	151a      	asrs	r2, r3, #20
   20354:	b973      	cbnz	r3, 20374 <scalbn+0x34>
   20356:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   2035a:	4303      	orrs	r3, r0
   2035c:	d054      	beq.n	20408 <scalbn+0xc8>
   2035e:	4629      	mov	r1, r5
   20360:	2200      	movs	r2, #0
   20362:	4b30      	ldr	r3, [pc, #192]	(20424 <scalbn+0xe4>)
   20364:	f7fa fb8c 	bl	1aa80 <__aeabi_dmul>
   20368:	4b2f      	ldr	r3, [pc, #188]	(20428 <scalbn+0xe8>)
   2036a:	4604      	mov	r4, r0
   2036c:	429f      	cmp	r7, r3
   2036e:	460d      	mov	r5, r1
   20370:	da0a      	bge.n	20388 <scalbn+0x48>
   20372:	e037      	b.n	203e4 <scalbn+0xa4>
   20374:	f240 73ff 	movw	r3, #2047	; 0x7ff
   20378:	429a      	cmp	r2, r3
   2037a:	d10c      	bne.n	20396 <scalbn+0x56>
   2037c:	4629      	mov	r1, r5
   2037e:	4602      	mov	r2, r0
   20380:	462b      	mov	r3, r5
   20382:	f7fa f9cb 	bl	1a71c <__adddf3>
   20386:	e03d      	b.n	20404 <scalbn+0xc4>
   20388:	4b25      	ldr	r3, [pc, #148]	(20420 <scalbn+0xe0>)
   2038a:	460e      	mov	r6, r1
   2038c:	ea01 0303 	and.w	r3, r1, r3
   20390:	151b      	asrs	r3, r3, #20
   20392:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
   20396:	eb02 0c07 	add.w	ip, r2, r7
   2039a:	f240 73fe 	movw	r3, #2046	; 0x7fe
   2039e:	459c      	cmp	ip, r3
   203a0:	dc11      	bgt.n	203c6 <scalbn+0x86>
   203a2:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   203a6:	dd07      	ble.n	203b8 <scalbn+0x78>
   203a8:	f026 41fe 	bic.w	r1, r6, #2130706432	; 0x7f000000
   203ac:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
   203b0:	ea41 530c 	orr.w	r3, r1, ip, lsl #20
   203b4:	461d      	mov	r5, r3
   203b6:	e027      	b.n	20408 <scalbn+0xc8>
   203b8:	f11c 0f35 	cmn.w	ip, #53	; 0x35
   203bc:	da15      	bge.n	203ea <scalbn+0xaa>
   203be:	f24c 3350 	movw	r3, #50000	; 0xc350
   203c2:	429f      	cmp	r7, r3
   203c4:	dd08      	ble.n	203d8 <scalbn+0x98>
   203c6:	4622      	mov	r2, r4
   203c8:	462b      	mov	r3, r5
   203ca:	a011      	add	r0, pc, #68	(adr r0, 20410 <scalbn+0xd0>)
   203cc:	c803      	ldmia	r0!, {r0, r1}
   203ce:	f000 f82f 	bl	20430 <copysign>
   203d2:	a20f      	add	r2, pc, #60	(adr r2, 20410 <scalbn+0xd0>)
   203d4:	ca0c      	ldmia	r2!, {r2, r3}
   203d6:	e013      	b.n	20400 <scalbn+0xc0>
   203d8:	a00f      	add	r0, pc, #60	(adr r0, 20418 <scalbn+0xd8>)
   203da:	c803      	ldmia	r0!, {r0, r1}
   203dc:	4622      	mov	r2, r4
   203de:	462b      	mov	r3, r5
   203e0:	f000 f826 	bl	20430 <copysign>
   203e4:	a20c      	add	r2, pc, #48	(adr r2, 20418 <scalbn+0xd8>)
   203e6:	ca0c      	ldmia	r2!, {r2, r3}
   203e8:	e00a      	b.n	20400 <scalbn+0xc0>
   203ea:	f026 43fe 	bic.w	r3, r6, #2130706432	; 0x7f000000
   203ee:	f10c 0236 	add.w	r2, ip, #54	; 0x36
   203f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   203f6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
   203fa:	4b0c      	ldr	r3, [pc, #48]	(2042c <scalbn+0xec>)
   203fc:	4620      	mov	r0, r4
   203fe:	2200      	movs	r2, #0
   20400:	f7fa fb3e 	bl	1aa80 <__aeabi_dmul>
   20404:	4604      	mov	r4, r0
   20406:	460d      	mov	r5, r1
   20408:	4620      	mov	r0, r4
   2040a:	4629      	mov	r1, r5
   2040c:	b001      	add	sp, #4
   2040e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20410:	8800759c 	.word	0x8800759c
   20414:	7e37e43c 	.word	0x7e37e43c
   20418:	c2f8f359 	.word	0xc2f8f359
   2041c:	01a56e1f 	.word	0x01a56e1f
   20420:	7ff00000 	.word	0x7ff00000
   20424:	43500000 	.word	0x43500000
   20428:	ffff3cb0 	.word	0xffff3cb0
   2042c:	3c900000 	.word	0x3c900000

00020430 <copysign>:
   20430:	b5f0      	push	{r4, r5, r6, r7, lr}
   20432:	4606      	mov	r6, r0
   20434:	460f      	mov	r7, r1
   20436:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
   2043a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   2043e:	461d      	mov	r5, r3
   20440:	ea40 0301 	orr.w	r3, r0, r1
   20444:	4614      	mov	r4, r2
   20446:	4630      	mov	r0, r6
   20448:	4619      	mov	r1, r3
   2044a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002044c <abort>:
   2044c:	2006      	movs	r0, #6
   2044e:	f000 ffb1 	bl	213b4 <raise>
   20452:	2001      	movs	r0, #1
   20454:	f7f7 fa24 	bl	178a0 <_exit>

00020458 <__errno>:
   20458:	4b01      	ldr	r3, [pc, #4]	(20460 <__errno+0x8>)
   2045a:	6818      	ldr	r0, [r3, #0]
   2045c:	300c      	adds	r0, #12
   2045e:	4770      	bx	lr
   20460:	20000044 	.word	0x20000044

00020464 <_fputc_r>:
   20464:	b570      	push	{r4, r5, r6, lr}
   20466:	4604      	mov	r4, r0
   20468:	460e      	mov	r6, r1
   2046a:	4615      	mov	r5, r2
   2046c:	b118      	cbz	r0, 20476 <_fputc_r+0x12>
   2046e:	6983      	ldr	r3, [r0, #24]
   20470:	b90b      	cbnz	r3, 20476 <_fputc_r+0x12>
   20472:	f001 faf9 	bl	21a68 <__sinit>
   20476:	4b0a      	ldr	r3, [pc, #40]	(204a0 <_fputc_r+0x3c>)
   20478:	429d      	cmp	r5, r3
   2047a:	bf08      	it	eq
   2047c:	6825      	ldreq	r5, [r4, #0]
   2047e:	d008      	beq.n	20492 <_fputc_r+0x2e>
   20480:	4b08      	ldr	r3, [pc, #32]	(204a4 <_fputc_r+0x40>)
   20482:	429d      	cmp	r5, r3
   20484:	bf08      	it	eq
   20486:	6865      	ldreq	r5, [r4, #4]
   20488:	d003      	beq.n	20492 <_fputc_r+0x2e>
   2048a:	4b07      	ldr	r3, [pc, #28]	(204a8 <_fputc_r+0x44>)
   2048c:	429d      	cmp	r5, r3
   2048e:	bf08      	it	eq
   20490:	68a5      	ldreq	r5, [r4, #8]
   20492:	4620      	mov	r0, r4
   20494:	4631      	mov	r1, r6
   20496:	462a      	mov	r2, r5
   20498:	f000 fcc6 	bl	20e28 <_putc_r>
   2049c:	bd70      	pop	{r4, r5, r6, pc}
   2049e:	46c0      	nop			(mov r8, r8)
   204a0:	00023b18 	.word	0x00023b18
   204a4:	00023b38 	.word	0x00023b38
   204a8:	00023b58 	.word	0x00023b58

000204ac <fputc>:
   204ac:	b500      	push	{lr}
   204ae:	4b05      	ldr	r3, [pc, #20]	(204c4 <fputc+0x18>)
   204b0:	4684      	mov	ip, r0
   204b2:	460a      	mov	r2, r1
   204b4:	b081      	sub	sp, #4
   204b6:	6818      	ldr	r0, [r3, #0]
   204b8:	4661      	mov	r1, ip
   204ba:	f7ff ffd3 	bl	20464 <_fputc_r>
   204be:	b001      	add	sp, #4
   204c0:	bd00      	pop	{pc}
   204c2:	46c0      	nop			(mov r8, r8)
   204c4:	20000044 	.word	0x20000044

000204c8 <_fputs_r>:
   204c8:	b530      	push	{r4, r5, lr}
   204ca:	4605      	mov	r5, r0
   204cc:	b087      	sub	sp, #28
   204ce:	4608      	mov	r0, r1
   204d0:	4614      	mov	r4, r2
   204d2:	9104      	str	r1, [sp, #16]
   204d4:	f001 f824 	bl	21520 <strlen>
   204d8:	ab04      	add	r3, sp, #16
   204da:	9301      	str	r3, [sp, #4]
   204dc:	2301      	movs	r3, #1
   204de:	9003      	str	r0, [sp, #12]
   204e0:	9005      	str	r0, [sp, #20]
   204e2:	9302      	str	r3, [sp, #8]
   204e4:	b125      	cbz	r5, 204f0 <_fputs_r+0x28>
   204e6:	69ab      	ldr	r3, [r5, #24]
   204e8:	b913      	cbnz	r3, 204f0 <_fputs_r+0x28>
   204ea:	4628      	mov	r0, r5
   204ec:	f001 fabc 	bl	21a68 <__sinit>
   204f0:	4b10      	ldr	r3, [pc, #64]	(20534 <_fputs_r+0x6c>)
   204f2:	429c      	cmp	r4, r3
   204f4:	bf08      	it	eq
   204f6:	682c      	ldreq	r4, [r5, #0]
   204f8:	d008      	beq.n	2050c <_fputs_r+0x44>
   204fa:	4b0f      	ldr	r3, [pc, #60]	(20538 <_fputs_r+0x70>)
   204fc:	429c      	cmp	r4, r3
   204fe:	bf08      	it	eq
   20500:	686c      	ldreq	r4, [r5, #4]
   20502:	d003      	beq.n	2050c <_fputs_r+0x44>
   20504:	4b0d      	ldr	r3, [pc, #52]	(2053c <_fputs_r+0x74>)
   20506:	429c      	cmp	r4, r3
   20508:	bf08      	it	eq
   2050a:	68ac      	ldreq	r4, [r5, #8]
   2050c:	89a3      	ldrh	r3, [r4, #12]
   2050e:	4628      	mov	r0, r5
   20510:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   20514:	bf02      	ittt	eq
   20516:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   2051a:	81a3      	strheq	r3, [r4, #12]
   2051c:	6e63      	ldreq	r3, [r4, #100]
   2051e:	4621      	mov	r1, r4
   20520:	bf04      	itt	eq
   20522:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   20526:	6663      	streq	r3, [r4, #100]
   20528:	aa01      	add	r2, sp, #4
   2052a:	f000 f817 	bl	2055c <__sfvwrite_r>
   2052e:	b007      	add	sp, #28
   20530:	bd30      	pop	{r4, r5, pc}
   20532:	46c0      	nop			(mov r8, r8)
   20534:	00023b18 	.word	0x00023b18
   20538:	00023b38 	.word	0x00023b38
   2053c:	00023b58 	.word	0x00023b58

00020540 <fputs>:
   20540:	b500      	push	{lr}
   20542:	4b05      	ldr	r3, [pc, #20]	(20558 <fputs+0x18>)
   20544:	4684      	mov	ip, r0
   20546:	460a      	mov	r2, r1
   20548:	b081      	sub	sp, #4
   2054a:	6818      	ldr	r0, [r3, #0]
   2054c:	4661      	mov	r1, ip
   2054e:	f7ff ffbb 	bl	204c8 <_fputs_r>
   20552:	b001      	add	sp, #4
   20554:	bd00      	pop	{pc}
   20556:	46c0      	nop			(mov r8, r8)
   20558:	20000044 	.word	0x20000044

0002055c <__sfvwrite_r>:
   2055c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2055e:	6893      	ldr	r3, [r2, #8]
   20560:	b089      	sub	sp, #36
   20562:	9001      	str	r0, [sp, #4]
   20564:	460d      	mov	r5, r1
   20566:	9200      	str	r2, [sp, #0]
   20568:	2b00      	cmp	r3, #0
   2056a:	f000 815b 	beq.w	20824 <__sfvwrite_r+0x2c8>
   2056e:	898b      	ldrh	r3, [r1, #12]
   20570:	f013 0f08 	tst.w	r3, #8	; 0x8
   20574:	d001      	beq.n	2057a <__sfvwrite_r+0x1e>
   20576:	690b      	ldr	r3, [r1, #16]
   20578:	b963      	cbnz	r3, 20594 <__sfvwrite_r+0x38>
   2057a:	9801      	ldr	r0, [sp, #4]
   2057c:	4629      	mov	r1, r5
   2057e:	f001 f891 	bl	216a4 <__swsetup_r>
   20582:	b138      	cbz	r0, 20594 <__sfvwrite_r+0x38>
   20584:	89ab      	ldrh	r3, [r5, #12]
   20586:	9801      	ldr	r0, [sp, #4]
   20588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2058c:	81ab      	strh	r3, [r5, #12]
   2058e:	2309      	movs	r3, #9
   20590:	60c3      	str	r3, [r0, #12]
   20592:	e144      	b.n	2081e <__sfvwrite_r+0x2c2>
   20594:	9a00      	ldr	r2, [sp, #0]
   20596:	89ab      	ldrh	r3, [r5, #12]
   20598:	6812      	ldr	r2, [r2, #0]
   2059a:	f013 0f02 	tst.w	r3, #2	; 0x2
   2059e:	9202      	str	r2, [sp, #8]
   205a0:	d021      	beq.n	205e6 <__sfvwrite_r+0x8a>
   205a2:	2600      	movs	r6, #0
   205a4:	2700      	movs	r7, #0
   205a6:	e004      	b.n	205b2 <__sfvwrite_r+0x56>
   205a8:	9b02      	ldr	r3, [sp, #8]
   205aa:	681f      	ldr	r7, [r3, #0]
   205ac:	685e      	ldr	r6, [r3, #4]
   205ae:	3308      	adds	r3, #8
   205b0:	9302      	str	r3, [sp, #8]
   205b2:	2e00      	cmp	r6, #0
   205b4:	d0f8      	beq.n	205a8 <__sfvwrite_r+0x4c>
   205b6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   205ba:	bf34      	ite	cc
   205bc:	4633      	movcc	r3, r6
   205be:	f44f 7380 	movcs.w	r3, #256	; 0x100
   205c2:	6a29      	ldr	r1, [r5, #32]
   205c4:	6aac      	ldr	r4, [r5, #40]
   205c6:	9801      	ldr	r0, [sp, #4]
   205c8:	463a      	mov	r2, r7
   205ca:	47a0      	blx	r4
   205cc:	2800      	cmp	r0, #0
   205ce:	f340 8122 	ble.w	20816 <__sfvwrite_r+0x2ba>
   205d2:	9a00      	ldr	r2, [sp, #0]
   205d4:	6893      	ldr	r3, [r2, #8]
   205d6:	1a1b      	subs	r3, r3, r0
   205d8:	6093      	str	r3, [r2, #8]
   205da:	2b00      	cmp	r3, #0
   205dc:	f000 8122 	beq.w	20824 <__sfvwrite_r+0x2c8>
   205e0:	183f      	adds	r7, r7, r0
   205e2:	1a36      	subs	r6, r6, r0
   205e4:	e7e5      	b.n	205b2 <__sfvwrite_r+0x56>
   205e6:	f013 0f01 	tst.w	r3, #1	; 0x1
   205ea:	d005      	beq.n	205f8 <__sfvwrite_r+0x9c>
   205ec:	2700      	movs	r7, #0
   205ee:	2300      	movs	r3, #0
   205f0:	9306      	str	r3, [sp, #24]
   205f2:	9703      	str	r7, [sp, #12]
   205f4:	9704      	str	r7, [sp, #16]
   205f6:	e0aa      	b.n	2074e <__sfvwrite_r+0x1f2>
   205f8:	2600      	movs	r6, #0
   205fa:	9607      	str	r6, [sp, #28]
   205fc:	e006      	b.n	2060c <__sfvwrite_r+0xb0>
   205fe:	9802      	ldr	r0, [sp, #8]
   20600:	9a02      	ldr	r2, [sp, #8]
   20602:	6800      	ldr	r0, [r0, #0]
   20604:	6856      	ldr	r6, [r2, #4]
   20606:	3208      	adds	r2, #8
   20608:	9007      	str	r0, [sp, #28]
   2060a:	9202      	str	r2, [sp, #8]
   2060c:	2e00      	cmp	r6, #0
   2060e:	d0f6      	beq.n	205fe <__sfvwrite_r+0xa2>
   20610:	89aa      	ldrh	r2, [r5, #12]
   20612:	68ac      	ldr	r4, [r5, #8]
   20614:	f412 7f00 	tst.w	r2, #512	; 0x200
   20618:	d056      	beq.n	206c8 <__sfvwrite_r+0x16c>
   2061a:	42a6      	cmp	r6, r4
   2061c:	d346      	bcc.n	206ac <__sfvwrite_r+0x150>
   2061e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   20622:	d041      	beq.n	206a8 <__sfvwrite_r+0x14c>
   20624:	6929      	ldr	r1, [r5, #16]
   20626:	682b      	ldr	r3, [r5, #0]
   20628:	1a5b      	subs	r3, r3, r1
   2062a:	9305      	str	r3, [sp, #20]
   2062c:	696b      	ldr	r3, [r5, #20]
   2062e:	9805      	ldr	r0, [sp, #20]
   20630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20634:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   20638:	105f      	asrs	r7, r3, #1
   2063a:	1c43      	adds	r3, r0, #1
   2063c:	199b      	adds	r3, r3, r6
   2063e:	429f      	cmp	r7, r3
   20640:	bf38      	it	cc
   20642:	461f      	movcc	r7, r3
   20644:	f412 6f80 	tst.w	r2, #1024	; 0x400
   20648:	d016      	beq.n	20678 <__sfvwrite_r+0x11c>
   2064a:	9801      	ldr	r0, [sp, #4]
   2064c:	4639      	mov	r1, r7
   2064e:	f000 f95b 	bl	20908 <_malloc_r>
   20652:	4604      	mov	r4, r0
   20654:	b918      	cbnz	r0, 2065e <__sfvwrite_r+0x102>
   20656:	9a01      	ldr	r2, [sp, #4]
   20658:	230c      	movs	r3, #12
   2065a:	60d3      	str	r3, [r2, #12]
   2065c:	e0db      	b.n	20816 <__sfvwrite_r+0x2ba>
   2065e:	6929      	ldr	r1, [r5, #16]
   20660:	9a05      	ldr	r2, [sp, #20]
   20662:	f000 fba7 	bl	20db4 <memcpy>
   20666:	89ab      	ldrh	r3, [r5, #12]
   20668:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2066c:	041b      	lsls	r3, r3, #16
   2066e:	0c1b      	lsrs	r3, r3, #16
   20670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20674:	81ab      	strh	r3, [r5, #12]
   20676:	e00d      	b.n	20694 <__sfvwrite_r+0x138>
   20678:	9801      	ldr	r0, [sp, #4]
   2067a:	463a      	mov	r2, r7
   2067c:	f000 fc2e 	bl	20edc <_realloc_r>
   20680:	4604      	mov	r4, r0
   20682:	b938      	cbnz	r0, 20694 <__sfvwrite_r+0x138>
   20684:	9801      	ldr	r0, [sp, #4]
   20686:	6929      	ldr	r1, [r5, #16]
   20688:	f001 fa74 	bl	21b74 <_free_r>
   2068c:	9801      	ldr	r0, [sp, #4]
   2068e:	230c      	movs	r3, #12
   20690:	60c3      	str	r3, [r0, #12]
   20692:	e0c0      	b.n	20816 <__sfvwrite_r+0x2ba>
   20694:	9a05      	ldr	r2, [sp, #20]
   20696:	612c      	str	r4, [r5, #16]
   20698:	eb04 0302 	add.w	r3, r4, r2
   2069c:	602b      	str	r3, [r5, #0]
   2069e:	ebc2 0307 	rsb	r3, r2, r7
   206a2:	616f      	str	r7, [r5, #20]
   206a4:	4634      	mov	r4, r6
   206a6:	60ab      	str	r3, [r5, #8]
   206a8:	42a6      	cmp	r6, r4
   206aa:	d200      	bcs.n	206ae <__sfvwrite_r+0x152>
   206ac:	4634      	mov	r4, r6
   206ae:	4622      	mov	r2, r4
   206b0:	6828      	ldr	r0, [r5, #0]
   206b2:	9907      	ldr	r1, [sp, #28]
   206b4:	f000 fb8c 	bl	20dd0 <memmove>
   206b8:	68ab      	ldr	r3, [r5, #8]
   206ba:	1b1b      	subs	r3, r3, r4
   206bc:	60ab      	str	r3, [r5, #8]
   206be:	682b      	ldr	r3, [r5, #0]
   206c0:	191b      	adds	r3, r3, r4
   206c2:	602b      	str	r3, [r5, #0]
   206c4:	4634      	mov	r4, r6
   206c6:	e02f      	b.n	20728 <__sfvwrite_r+0x1cc>
   206c8:	6828      	ldr	r0, [r5, #0]
   206ca:	692a      	ldr	r2, [r5, #16]
   206cc:	42a6      	cmp	r6, r4
   206ce:	bf94      	ite	ls
   206d0:	2300      	movls	r3, #0
   206d2:	2301      	movhi	r3, #1
   206d4:	4290      	cmp	r0, r2
   206d6:	bf94      	ite	ls
   206d8:	2300      	movls	r3, #0
   206da:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   206de:	b163      	cbz	r3, 206fa <__sfvwrite_r+0x19e>
   206e0:	9907      	ldr	r1, [sp, #28]
   206e2:	4622      	mov	r2, r4
   206e4:	f000 fb74 	bl	20dd0 <memmove>
   206e8:	682b      	ldr	r3, [r5, #0]
   206ea:	9801      	ldr	r0, [sp, #4]
   206ec:	191b      	adds	r3, r3, r4
   206ee:	602b      	str	r3, [r5, #0]
   206f0:	4629      	mov	r1, r5
   206f2:	f001 f849 	bl	21788 <_fflush_r>
   206f6:	b1b8      	cbz	r0, 20728 <__sfvwrite_r+0x1cc>
   206f8:	e08d      	b.n	20816 <__sfvwrite_r+0x2ba>
   206fa:	696b      	ldr	r3, [r5, #20]
   206fc:	429e      	cmp	r6, r3
   206fe:	d308      	bcc.n	20712 <__sfvwrite_r+0x1b6>
   20700:	6aac      	ldr	r4, [r5, #40]
   20702:	6a29      	ldr	r1, [r5, #32]
   20704:	9801      	ldr	r0, [sp, #4]
   20706:	9a07      	ldr	r2, [sp, #28]
   20708:	47a0      	blx	r4
   2070a:	2800      	cmp	r0, #0
   2070c:	4604      	mov	r4, r0
   2070e:	dc0b      	bgt.n	20728 <__sfvwrite_r+0x1cc>
   20710:	e081      	b.n	20816 <__sfvwrite_r+0x2ba>
   20712:	9907      	ldr	r1, [sp, #28]
   20714:	4632      	mov	r2, r6
   20716:	f000 fb5b 	bl	20dd0 <memmove>
   2071a:	68ab      	ldr	r3, [r5, #8]
   2071c:	4634      	mov	r4, r6
   2071e:	1b9b      	subs	r3, r3, r6
   20720:	60ab      	str	r3, [r5, #8]
   20722:	682b      	ldr	r3, [r5, #0]
   20724:	199b      	adds	r3, r3, r6
   20726:	602b      	str	r3, [r5, #0]
   20728:	9800      	ldr	r0, [sp, #0]
   2072a:	6883      	ldr	r3, [r0, #8]
   2072c:	1b1b      	subs	r3, r3, r4
   2072e:	6083      	str	r3, [r0, #8]
   20730:	2b00      	cmp	r3, #0
   20732:	d077      	beq.n	20824 <__sfvwrite_r+0x2c8>
   20734:	9a07      	ldr	r2, [sp, #28]
   20736:	1b36      	subs	r6, r6, r4
   20738:	1912      	adds	r2, r2, r4
   2073a:	9207      	str	r2, [sp, #28]
   2073c:	e766      	b.n	2060c <__sfvwrite_r+0xb0>
   2073e:	9b02      	ldr	r3, [sp, #8]
   20740:	2200      	movs	r2, #0
   20742:	6858      	ldr	r0, [r3, #4]
   20744:	681f      	ldr	r7, [r3, #0]
   20746:	3308      	adds	r3, #8
   20748:	9006      	str	r0, [sp, #24]
   2074a:	9302      	str	r3, [sp, #8]
   2074c:	9203      	str	r2, [sp, #12]
   2074e:	9b06      	ldr	r3, [sp, #24]
   20750:	2b00      	cmp	r3, #0
   20752:	d0f4      	beq.n	2073e <__sfvwrite_r+0x1e2>
   20754:	9803      	ldr	r0, [sp, #12]
   20756:	b980      	cbnz	r0, 2077a <__sfvwrite_r+0x21e>
   20758:	4638      	mov	r0, r7
   2075a:	210a      	movs	r1, #10
   2075c:	461a      	mov	r2, r3
   2075e:	f000 fb0b 	bl	20d78 <memchr>
   20762:	b128      	cbz	r0, 20770 <__sfvwrite_r+0x214>
   20764:	1c43      	adds	r3, r0, #1
   20766:	1bdb      	subs	r3, r3, r7
   20768:	2201      	movs	r2, #1
   2076a:	9304      	str	r3, [sp, #16]
   2076c:	9203      	str	r2, [sp, #12]
   2076e:	e004      	b.n	2077a <__sfvwrite_r+0x21e>
   20770:	9b06      	ldr	r3, [sp, #24]
   20772:	2001      	movs	r0, #1
   20774:	3301      	adds	r3, #1
   20776:	9304      	str	r3, [sp, #16]
   20778:	9003      	str	r0, [sp, #12]
   2077a:	9a06      	ldr	r2, [sp, #24]
   2077c:	68ab      	ldr	r3, [r5, #8]
   2077e:	9e04      	ldr	r6, [sp, #16]
   20780:	f8d5 c014 	ldr.w	ip, [r5, #20]
   20784:	4296      	cmp	r6, r2
   20786:	bf28      	it	cs
   20788:	4616      	movcs	r6, r2
   2078a:	eb0c 0403 	add.w	r4, ip, r3
   2078e:	6828      	ldr	r0, [r5, #0]
   20790:	692a      	ldr	r2, [r5, #16]
   20792:	42a6      	cmp	r6, r4
   20794:	bfd4      	ite	le
   20796:	2300      	movle	r3, #0
   20798:	2301      	movgt	r3, #1
   2079a:	4290      	cmp	r0, r2
   2079c:	bf94      	ite	ls
   2079e:	2300      	movls	r3, #0
   207a0:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   207a4:	b163      	cbz	r3, 207c0 <__sfvwrite_r+0x264>
   207a6:	4639      	mov	r1, r7
   207a8:	4622      	mov	r2, r4
   207aa:	f000 fb11 	bl	20dd0 <memmove>
   207ae:	682b      	ldr	r3, [r5, #0]
   207b0:	9801      	ldr	r0, [sp, #4]
   207b2:	191b      	adds	r3, r3, r4
   207b4:	602b      	str	r3, [r5, #0]
   207b6:	4629      	mov	r1, r5
   207b8:	f000 ffe6 	bl	21788 <_fflush_r>
   207bc:	b1b8      	cbz	r0, 207ee <__sfvwrite_r+0x292>
   207be:	e02a      	b.n	20816 <__sfvwrite_r+0x2ba>
   207c0:	4566      	cmp	r6, ip
   207c2:	db09      	blt.n	207d8 <__sfvwrite_r+0x27c>
   207c4:	6aac      	ldr	r4, [r5, #40]
   207c6:	6a29      	ldr	r1, [r5, #32]
   207c8:	9801      	ldr	r0, [sp, #4]
   207ca:	463a      	mov	r2, r7
   207cc:	4663      	mov	r3, ip
   207ce:	47a0      	blx	r4
   207d0:	2800      	cmp	r0, #0
   207d2:	4604      	mov	r4, r0
   207d4:	dc0b      	bgt.n	207ee <__sfvwrite_r+0x292>
   207d6:	e01e      	b.n	20816 <__sfvwrite_r+0x2ba>
   207d8:	4639      	mov	r1, r7
   207da:	4632      	mov	r2, r6
   207dc:	f000 faf8 	bl	20dd0 <memmove>
   207e0:	68ab      	ldr	r3, [r5, #8]
   207e2:	4634      	mov	r4, r6
   207e4:	1b9b      	subs	r3, r3, r6
   207e6:	60ab      	str	r3, [r5, #8]
   207e8:	682b      	ldr	r3, [r5, #0]
   207ea:	199b      	adds	r3, r3, r6
   207ec:	602b      	str	r3, [r5, #0]
   207ee:	9b04      	ldr	r3, [sp, #16]
   207f0:	1b1b      	subs	r3, r3, r4
   207f2:	9304      	str	r3, [sp, #16]
   207f4:	d105      	bne.n	20802 <__sfvwrite_r+0x2a6>
   207f6:	9801      	ldr	r0, [sp, #4]
   207f8:	4629      	mov	r1, r5
   207fa:	f000 ffc5 	bl	21788 <_fflush_r>
   207fe:	b950      	cbnz	r0, 20816 <__sfvwrite_r+0x2ba>
   20800:	9003      	str	r0, [sp, #12]
   20802:	9a00      	ldr	r2, [sp, #0]
   20804:	6893      	ldr	r3, [r2, #8]
   20806:	1b1b      	subs	r3, r3, r4
   20808:	6093      	str	r3, [r2, #8]
   2080a:	b15b      	cbz	r3, 20824 <__sfvwrite_r+0x2c8>
   2080c:	9b06      	ldr	r3, [sp, #24]
   2080e:	193f      	adds	r7, r7, r4
   20810:	1b1b      	subs	r3, r3, r4
   20812:	9306      	str	r3, [sp, #24]
   20814:	e79b      	b.n	2074e <__sfvwrite_r+0x1f2>
   20816:	89ab      	ldrh	r3, [r5, #12]
   20818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2081c:	81ab      	strh	r3, [r5, #12]
   2081e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20822:	e000      	b.n	20826 <__sfvwrite_r+0x2ca>
   20824:	2000      	movs	r0, #0
   20826:	b009      	add	sp, #36
   20828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2082a:	46c0      	nop			(mov r8, r8)

0002082c <_fwrite_r>:
   2082c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2082e:	fb02 f603 	mul.w	r6, r2, r3
   20832:	b089      	sub	sp, #36
   20834:	461f      	mov	r7, r3
   20836:	ab06      	add	r3, sp, #24
   20838:	9303      	str	r3, [sp, #12]
   2083a:	2301      	movs	r3, #1
   2083c:	4605      	mov	r5, r0
   2083e:	9201      	str	r2, [sp, #4]
   20840:	9c0e      	ldr	r4, [sp, #56]
   20842:	9106      	str	r1, [sp, #24]
   20844:	9607      	str	r6, [sp, #28]
   20846:	9605      	str	r6, [sp, #20]
   20848:	9304      	str	r3, [sp, #16]
   2084a:	b118      	cbz	r0, 20854 <_fwrite_r+0x28>
   2084c:	6983      	ldr	r3, [r0, #24]
   2084e:	b90b      	cbnz	r3, 20854 <_fwrite_r+0x28>
   20850:	f001 f90a 	bl	21a68 <__sinit>
   20854:	4b14      	ldr	r3, [pc, #80]	(208a8 <_fwrite_r+0x7c>)
   20856:	429c      	cmp	r4, r3
   20858:	bf08      	it	eq
   2085a:	682c      	ldreq	r4, [r5, #0]
   2085c:	d008      	beq.n	20870 <_fwrite_r+0x44>
   2085e:	4b13      	ldr	r3, [pc, #76]	(208ac <_fwrite_r+0x80>)
   20860:	429c      	cmp	r4, r3
   20862:	bf08      	it	eq
   20864:	686c      	ldreq	r4, [r5, #4]
   20866:	d003      	beq.n	20870 <_fwrite_r+0x44>
   20868:	4b11      	ldr	r3, [pc, #68]	(208b0 <_fwrite_r+0x84>)
   2086a:	429c      	cmp	r4, r3
   2086c:	bf08      	it	eq
   2086e:	68ac      	ldreq	r4, [r5, #8]
   20870:	89a3      	ldrh	r3, [r4, #12]
   20872:	4628      	mov	r0, r5
   20874:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   20878:	bf02      	ittt	eq
   2087a:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   2087e:	81a3      	strheq	r3, [r4, #12]
   20880:	6e63      	ldreq	r3, [r4, #100]
   20882:	4621      	mov	r1, r4
   20884:	bf04      	itt	eq
   20886:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   2088a:	6663      	streq	r3, [r4, #100]
   2088c:	aa03      	add	r2, sp, #12
   2088e:	f7ff fe65 	bl	2055c <__sfvwrite_r>
   20892:	b128      	cbz	r0, 208a0 <_fwrite_r+0x74>
   20894:	9b05      	ldr	r3, [sp, #20]
   20896:	9a01      	ldr	r2, [sp, #4]
   20898:	ebc3 0306 	rsb	r3, r3, r6
   2089c:	fbb3 f7f2 	udiv	r7, r3, r2
   208a0:	4638      	mov	r0, r7
   208a2:	b009      	add	sp, #36
   208a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   208a6:	46c0      	nop			(mov r8, r8)
   208a8:	00023b18 	.word	0x00023b18
   208ac:	00023b38 	.word	0x00023b38
   208b0:	00023b58 	.word	0x00023b58

000208b4 <fwrite>:
   208b4:	b510      	push	{r4, lr}
   208b6:	4614      	mov	r4, r2
   208b8:	4a06      	ldr	r2, [pc, #24]	(208d4 <fwrite+0x20>)
   208ba:	4684      	mov	ip, r0
   208bc:	468e      	mov	lr, r1
   208be:	b082      	sub	sp, #8
   208c0:	6810      	ldr	r0, [r2, #0]
   208c2:	4661      	mov	r1, ip
   208c4:	9300      	str	r3, [sp, #0]
   208c6:	4672      	mov	r2, lr
   208c8:	4623      	mov	r3, r4
   208ca:	f7ff ffaf 	bl	2082c <_fwrite_r>
   208ce:	b002      	add	sp, #8
   208d0:	bd10      	pop	{r4, pc}
   208d2:	46c0      	nop			(mov r8, r8)
   208d4:	20000044 	.word	0x20000044

000208d8 <free>:
   208d8:	b500      	push	{lr}
   208da:	4b04      	ldr	r3, [pc, #16]	(208ec <free+0x14>)
   208dc:	4601      	mov	r1, r0
   208de:	b081      	sub	sp, #4
   208e0:	6818      	ldr	r0, [r3, #0]
   208e2:	f001 f947 	bl	21b74 <_free_r>
   208e6:	b001      	add	sp, #4
   208e8:	bd00      	pop	{pc}
   208ea:	46c0      	nop			(mov r8, r8)
   208ec:	20000044 	.word	0x20000044

000208f0 <malloc>:
   208f0:	b500      	push	{lr}
   208f2:	4b04      	ldr	r3, [pc, #16]	(20904 <malloc+0x14>)
   208f4:	4601      	mov	r1, r0
   208f6:	b081      	sub	sp, #4
   208f8:	6818      	ldr	r0, [r3, #0]
   208fa:	f000 f805 	bl	20908 <_malloc_r>
   208fe:	b001      	add	sp, #4
   20900:	bd00      	pop	{pc}
   20902:	46c0      	nop			(mov r8, r8)
   20904:	20000044 	.word	0x20000044

00020908 <_malloc_r>:
   20908:	b5f0      	push	{r4, r5, r6, r7, lr}
   2090a:	f101 020b 	add.w	r2, r1, #11	; 0xb
   2090e:	2a16      	cmp	r2, #22
   20910:	bf8c      	ite	hi
   20912:	f022 0607 	bichi.w	r6, r2, #7	; 0x7
   20916:	2610      	movls	r6, #16
   20918:	428e      	cmp	r6, r1
   2091a:	bf2c      	ite	cs
   2091c:	2300      	movcs	r3, #0
   2091e:	2301      	movcc	r3, #1
   20920:	b083      	sub	sp, #12
   20922:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
   20926:	9000      	str	r0, [sp, #0]
   20928:	d003      	beq.n	20932 <_malloc_r+0x2a>
   2092a:	9900      	ldr	r1, [sp, #0]
   2092c:	230c      	movs	r3, #12
   2092e:	60cb      	str	r3, [r1, #12]
   20930:	e1fe      	b.n	20d30 <_malloc_r+0x428>
   20932:	9800      	ldr	r0, [sp, #0]
   20934:	f000 fa74 	bl	20e20 <__malloc_lock>
   20938:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2093c:	d218      	bcs.n	20970 <_malloc_r+0x68>
   2093e:	f8df 341c 	ldr.w	r3, [pc, #1052]	; 20d5c <_malloc_r+0x454>
   20942:	08f2      	lsrs	r2, r6, #3
   20944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   20948:	68dc      	ldr	r4, [r3, #12]
   2094a:	429c      	cmp	r4, r3
   2094c:	d107      	bne.n	2095e <_malloc_r+0x56>
   2094e:	f104 0308 	add.w	r3, r4, #8	; 0x8
   20952:	68dc      	ldr	r4, [r3, #12]
   20954:	429c      	cmp	r4, r3
   20956:	bf08      	it	eq
   20958:	f102 0e02 	addeq.w	lr, r2, #2	; 0x2
   2095c:	d04c      	beq.n	209f8 <_malloc_r+0xf0>
   2095e:	6862      	ldr	r2, [r4, #4]
   20960:	68e1      	ldr	r1, [r4, #12]
   20962:	68a3      	ldr	r3, [r4, #8]
   20964:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   20968:	60d9      	str	r1, [r3, #12]
   2096a:	608b      	str	r3, [r1, #8]
   2096c:	4422      	add	r2, r4
   2096e:	e03a      	b.n	209e6 <_malloc_r+0xde>
   20970:	0a72      	lsrs	r2, r6, #9
   20972:	d101      	bne.n	20978 <_malloc_r+0x70>
   20974:	08f2      	lsrs	r2, r6, #3
   20976:	e01f      	b.n	209b8 <_malloc_r+0xb0>
   20978:	2a04      	cmp	r2, #4
   2097a:	d803      	bhi.n	20984 <_malloc_r+0x7c>
   2097c:	09b3      	lsrs	r3, r6, #6
   2097e:	f103 0238 	add.w	r2, r3, #56	; 0x38
   20982:	e019      	b.n	209b8 <_malloc_r+0xb0>
   20984:	2a14      	cmp	r2, #20
   20986:	d801      	bhi.n	2098c <_malloc_r+0x84>
   20988:	325b      	adds	r2, #91
   2098a:	e015      	b.n	209b8 <_malloc_r+0xb0>
   2098c:	2a54      	cmp	r2, #84
   2098e:	d803      	bhi.n	20998 <_malloc_r+0x90>
   20990:	0b33      	lsrs	r3, r6, #12
   20992:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   20996:	e00f      	b.n	209b8 <_malloc_r+0xb0>
   20998:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2099c:	d803      	bhi.n	209a6 <_malloc_r+0x9e>
   2099e:	0bf3      	lsrs	r3, r6, #15
   209a0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   209a4:	e008      	b.n	209b8 <_malloc_r+0xb0>
   209a6:	f240 5354 	movw	r3, #1364	; 0x554
   209aa:	429a      	cmp	r2, r3
   209ac:	d901      	bls.n	209b2 <_malloc_r+0xaa>
   209ae:	227e      	movs	r2, #126
   209b0:	e002      	b.n	209b8 <_malloc_r+0xb0>
   209b2:	0cb3      	lsrs	r3, r6, #18
   209b4:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   209b8:	4be8      	ldr	r3, [pc, #928]	(20d5c <_malloc_r+0x454>)
   209ba:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   209be:	f8dc 400c 	ldr.w	r4, [ip, #12]
   209c2:	e015      	b.n	209f0 <_malloc_r+0xe8>
   209c4:	6863      	ldr	r3, [r4, #4]
   209c6:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   209ca:	ebc6 0300 	rsb	r3, r6, r0
   209ce:	2b0f      	cmp	r3, #15
   209d0:	dd01      	ble.n	209d6 <_malloc_r+0xce>
   209d2:	3a01      	subs	r2, #1
   209d4:	e00e      	b.n	209f4 <_malloc_r+0xec>
   209d6:	2b00      	cmp	r3, #0
   209d8:	68e1      	ldr	r1, [r4, #12]
   209da:	db08      	blt.n	209ee <_malloc_r+0xe6>
   209dc:	68a3      	ldr	r3, [r4, #8]
   209de:	60d9      	str	r1, [r3, #12]
   209e0:	608b      	str	r3, [r1, #8]
   209e2:	eb04 0200 	add.w	r2, r4, r0
   209e6:	6853      	ldr	r3, [r2, #4]
   209e8:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   209ec:	e1ad      	b.n	20d4a <_malloc_r+0x442>
   209ee:	460c      	mov	r4, r1
   209f0:	4564      	cmp	r4, ip
   209f2:	d1e7      	bne.n	209c4 <_malloc_r+0xbc>
   209f4:	f102 0e01 	add.w	lr, r2, #1	; 0x1
   209f8:	4dd9      	ldr	r5, [pc, #868]	(20d60 <_malloc_r+0x458>)
   209fa:	68ac      	ldr	r4, [r5, #8]
   209fc:	42ac      	cmp	r4, r5
   209fe:	d068      	beq.n	20ad2 <_malloc_r+0x1ca>
   20a00:	6863      	ldr	r3, [r4, #4]
   20a02:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   20a06:	ebc6 0100 	rsb	r1, r6, r0
   20a0a:	290f      	cmp	r1, #15
   20a0c:	dd0d      	ble.n	20a2a <_malloc_r+0x122>
   20a0e:	f046 0201 	orr.w	r2, r6, #1	; 0x1
   20a12:	eb04 0306 	add.w	r3, r4, r6
   20a16:	6062      	str	r2, [r4, #4]
   20a18:	f041 0201 	orr.w	r2, r1, #1	; 0x1
   20a1c:	60eb      	str	r3, [r5, #12]
   20a1e:	60ab      	str	r3, [r5, #8]
   20a20:	60dd      	str	r5, [r3, #12]
   20a22:	609d      	str	r5, [r3, #8]
   20a24:	605a      	str	r2, [r3, #4]
   20a26:	5059      	str	r1, [r3, r1]
   20a28:	e190      	b.n	20d4c <_malloc_r+0x444>
   20a2a:	2900      	cmp	r1, #0
   20a2c:	60ed      	str	r5, [r5, #12]
   20a2e:	60ad      	str	r5, [r5, #8]
   20a30:	dad7      	bge.n	209e2 <_malloc_r+0xda>
   20a32:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   20a36:	d210      	bcs.n	20a5a <_malloc_r+0x152>
   20a38:	08c0      	lsrs	r0, r0, #3
   20a3a:	1083      	asrs	r3, r0, #2
   20a3c:	2201      	movs	r2, #1
   20a3e:	409a      	lsls	r2, r3
   20a40:	f1a5 0108 	sub.w	r1, r5, #8	; 0x8
   20a44:	684b      	ldr	r3, [r1, #4]
   20a46:	4313      	orrs	r3, r2
   20a48:	604b      	str	r3, [r1, #4]
   20a4a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   20a4e:	688b      	ldr	r3, [r1, #8]
   20a50:	60e1      	str	r1, [r4, #12]
   20a52:	60a3      	str	r3, [r4, #8]
   20a54:	60dc      	str	r4, [r3, #12]
   20a56:	608c      	str	r4, [r1, #8]
   20a58:	e03b      	b.n	20ad2 <_malloc_r+0x1ca>
   20a5a:	0a42      	lsrs	r2, r0, #9
   20a5c:	2a04      	cmp	r2, #4
   20a5e:	d802      	bhi.n	20a66 <_malloc_r+0x15e>
   20a60:	0983      	lsrs	r3, r0, #6
   20a62:	3338      	adds	r3, #56
   20a64:	e017      	b.n	20a96 <_malloc_r+0x18e>
   20a66:	2a14      	cmp	r2, #20
   20a68:	bf98      	it	ls
   20a6a:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   20a6e:	d912      	bls.n	20a96 <_malloc_r+0x18e>
   20a70:	2a54      	cmp	r2, #84
   20a72:	d802      	bhi.n	20a7a <_malloc_r+0x172>
   20a74:	0b03      	lsrs	r3, r0, #12
   20a76:	336e      	adds	r3, #110
   20a78:	e00d      	b.n	20a96 <_malloc_r+0x18e>
   20a7a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   20a7e:	d802      	bhi.n	20a86 <_malloc_r+0x17e>
   20a80:	0bc3      	lsrs	r3, r0, #15
   20a82:	3377      	adds	r3, #119
   20a84:	e007      	b.n	20a96 <_malloc_r+0x18e>
   20a86:	f240 5354 	movw	r3, #1364	; 0x554
   20a8a:	429a      	cmp	r2, r3
   20a8c:	d901      	bls.n	20a92 <_malloc_r+0x18a>
   20a8e:	237e      	movs	r3, #126
   20a90:	e001      	b.n	20a96 <_malloc_r+0x18e>
   20a92:	0c83      	lsrs	r3, r0, #18
   20a94:	337c      	adds	r3, #124
   20a96:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 20d5c <_malloc_r+0x454>
   20a9a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   20a9e:	6891      	ldr	r1, [r2, #8]
   20aa0:	4291      	cmp	r1, r2
   20aa2:	d10c      	bne.n	20abe <_malloc_r+0x1b6>
   20aa4:	109b      	asrs	r3, r3, #2
   20aa6:	2201      	movs	r2, #1
   20aa8:	409a      	lsls	r2, r3
   20aaa:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20aae:	4313      	orrs	r3, r2
   20ab0:	f8cc 3004 	str.w	r3, [ip, #4]
   20ab4:	460b      	mov	r3, r1
   20ab6:	e008      	b.n	20aca <_malloc_r+0x1c2>
   20ab8:	6889      	ldr	r1, [r1, #8]
   20aba:	4291      	cmp	r1, r2
   20abc:	d004      	beq.n	20ac8 <_malloc_r+0x1c0>
   20abe:	684b      	ldr	r3, [r1, #4]
   20ac0:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20ac4:	4298      	cmp	r0, r3
   20ac6:	d3f7      	bcc.n	20ab8 <_malloc_r+0x1b0>
   20ac8:	68cb      	ldr	r3, [r1, #12]
   20aca:	60e3      	str	r3, [r4, #12]
   20acc:	60a1      	str	r1, [r4, #8]
   20ace:	60cc      	str	r4, [r1, #12]
   20ad0:	609c      	str	r4, [r3, #8]
   20ad2:	2301      	movs	r3, #1
   20ad4:	ea4f 02ae 	mov.w	r2, lr, asr #2
   20ad8:	fa13 f102 	lsls.w	r1, r3, r2
   20adc:	4b9f      	ldr	r3, [pc, #636]	(20d5c <_malloc_r+0x454>)
   20ade:	685a      	ldr	r2, [r3, #4]
   20ae0:	4291      	cmp	r1, r2
   20ae2:	d86e      	bhi.n	20bc2 <_malloc_r+0x2ba>
   20ae4:	4211      	tst	r1, r2
   20ae6:	bf04      	itt	eq
   20ae8:	f02e 0303 	biceq.w	r3, lr, #3	; 0x3
   20aec:	f103 0e04 	addeq.w	lr, r3, #4	; 0x4
   20af0:	d002      	beq.n	20af8 <_malloc_r+0x1f0>
   20af2:	e004      	b.n	20afe <_malloc_r+0x1f6>
   20af4:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   20af8:	0049      	lsls	r1, r1, #1
   20afa:	4211      	tst	r1, r2
   20afc:	d0fa      	beq.n	20af4 <_malloc_r+0x1ec>
   20afe:	4a97      	ldr	r2, [pc, #604]	(20d5c <_malloc_r+0x454>)
   20b00:	4674      	mov	r4, lr
   20b02:	eb02 07ce 	add.w	r7, r2, lr, lsl #3
   20b06:	463a      	mov	r2, r7
   20b08:	68d0      	ldr	r0, [r2, #12]
   20b0a:	e032      	b.n	20b72 <_malloc_r+0x26a>
   20b0c:	6843      	ldr	r3, [r0, #4]
   20b0e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20b12:	ebc6 0c03 	rsb	ip, r6, r3
   20b16:	f1bc 0f0f 	cmp.w	ip, #15	; 0xf
   20b1a:	dd14      	ble.n	20b46 <_malloc_r+0x23e>
   20b1c:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   20b20:	4604      	mov	r4, r0
   20b22:	68c1      	ldr	r1, [r0, #12]
   20b24:	6043      	str	r3, [r0, #4]
   20b26:	f854 3f08 	ldr.w	r3, [r4, #8]!
   20b2a:	eb00 0206 	add.w	r2, r0, r6
   20b2e:	60d9      	str	r1, [r3, #12]
   20b30:	608b      	str	r3, [r1, #8]
   20b32:	f04c 0301 	orr.w	r3, ip, #1	; 0x1
   20b36:	60ea      	str	r2, [r5, #12]
   20b38:	60aa      	str	r2, [r5, #8]
   20b3a:	60d5      	str	r5, [r2, #12]
   20b3c:	6095      	str	r5, [r2, #8]
   20b3e:	6053      	str	r3, [r2, #4]
   20b40:	f842 c00c 	str.w	ip, [r2, ip]
   20b44:	e010      	b.n	20b68 <_malloc_r+0x260>
   20b46:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   20b4a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   20b4e:	db0f      	blt.n	20b70 <_malloc_r+0x268>
   20b50:	4403      	add	r3, r0
   20b52:	685a      	ldr	r2, [r3, #4]
   20b54:	4604      	mov	r4, r0
   20b56:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   20b5a:	605a      	str	r2, [r3, #4]
   20b5c:	f854 3f08 	ldr.w	r3, [r4, #8]!
   20b60:	f8c3 c00c 	str.w	ip, [r3, #12]
   20b64:	f8cc 3008 	str.w	r3, [ip, #8]
   20b68:	9800      	ldr	r0, [sp, #0]
   20b6a:	f000 f95b 	bl	20e24 <__malloc_unlock>
   20b6e:	e0f1      	b.n	20d54 <_malloc_r+0x44c>
   20b70:	4660      	mov	r0, ip
   20b72:	4290      	cmp	r0, r2
   20b74:	d1ca      	bne.n	20b0c <_malloc_r+0x204>
   20b76:	3401      	adds	r4, #1
   20b78:	f014 0f03 	tst.w	r4, #3	; 0x3
   20b7c:	d001      	beq.n	20b82 <_malloc_r+0x27a>
   20b7e:	3208      	adds	r2, #8
   20b80:	e7c2      	b.n	20b08 <_malloc_r+0x200>
   20b82:	4672      	mov	r2, lr
   20b84:	4638      	mov	r0, r7
   20b86:	f012 0f03 	tst.w	r2, #3	; 0x3
   20b8a:	d105      	bne.n	20b98 <_malloc_r+0x290>
   20b8c:	4a73      	ldr	r2, [pc, #460]	(20d5c <_malloc_r+0x454>)
   20b8e:	6853      	ldr	r3, [r2, #4]
   20b90:	ea23 0301 	bic.w	r3, r3, r1
   20b94:	6053      	str	r3, [r2, #4]
   20b96:	e006      	b.n	20ba6 <_malloc_r+0x29e>
   20b98:	4603      	mov	r3, r0
   20b9a:	f853 0908 	ldr.w	r0, [r3], #-8
   20b9e:	4298      	cmp	r0, r3
   20ba0:	d101      	bne.n	20ba6 <_malloc_r+0x29e>
   20ba2:	3a01      	subs	r2, #1
   20ba4:	e7ef      	b.n	20b86 <_malloc_r+0x27e>
   20ba6:	4a6d      	ldr	r2, [pc, #436]	(20d5c <_malloc_r+0x454>)
   20ba8:	0049      	lsls	r1, r1, #1
   20baa:	6853      	ldr	r3, [r2, #4]
   20bac:	4299      	cmp	r1, r3
   20bae:	d808      	bhi.n	20bc2 <_malloc_r+0x2ba>
   20bb0:	b139      	cbz	r1, 20bc2 <_malloc_r+0x2ba>
   20bb2:	46a6      	mov	lr, r4
   20bb4:	e002      	b.n	20bbc <_malloc_r+0x2b4>
   20bb6:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   20bba:	0049      	lsls	r1, r1, #1
   20bbc:	4219      	tst	r1, r3
   20bbe:	d19e      	bne.n	20afe <_malloc_r+0x1f6>
   20bc0:	e7f9      	b.n	20bb6 <_malloc_r+0x2ae>
   20bc2:	4b66      	ldr	r3, [pc, #408]	(20d5c <_malloc_r+0x454>)
   20bc4:	689f      	ldr	r7, [r3, #8]
   20bc6:	687b      	ldr	r3, [r7, #4]
   20bc8:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20bcc:	9301      	str	r3, [sp, #4]
   20bce:	ebc6 0103 	rsb	r1, r6, r3
   20bd2:	9a01      	ldr	r2, [sp, #4]
   20bd4:	290f      	cmp	r1, #15
   20bd6:	bfcc      	ite	gt
   20bd8:	2300      	movgt	r3, #0
   20bda:	2301      	movle	r3, #1
   20bdc:	42b2      	cmp	r2, r6
   20bde:	bf38      	it	cc
   20be0:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   20be4:	2b00      	cmp	r3, #0
   20be6:	f000 80a5 	beq.w	20d34 <_malloc_r+0x42c>
   20bea:	4b5e      	ldr	r3, [pc, #376]	(20d64 <_malloc_r+0x45c>)
   20bec:	681b      	ldr	r3, [r3, #0]
   20bee:	3310      	adds	r3, #16
   20bf0:	eb03 0506 	add.w	r5, r3, r6
   20bf4:	4b5c      	ldr	r3, [pc, #368]	(20d68 <_malloc_r+0x460>)
   20bf6:	681b      	ldr	r3, [r3, #0]
   20bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20bfc:	d006      	beq.n	20c0c <_malloc_r+0x304>
   20bfe:	f505 637e 	add.w	r3, r5, #4064	; 0xfe0
   20c02:	331f      	adds	r3, #31
   20c04:	f423 657e 	bic.w	r5, r3, #4064	; 0xfe0
   20c08:	f025 051f 	bic.w	r5, r5, #31	; 0x1f
   20c0c:	9800      	ldr	r0, [sp, #0]
   20c0e:	4629      	mov	r1, r5
   20c10:	f000 fb92 	bl	21338 <_sbrk_r>
   20c14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20c18:	4604      	mov	r4, r0
   20c1a:	d076      	beq.n	20d0a <_malloc_r+0x402>
   20c1c:	9b01      	ldr	r3, [sp, #4]
   20c1e:	eb07 0103 	add.w	r1, r7, r3
   20c22:	4288      	cmp	r0, r1
   20c24:	d202      	bcs.n	20c2c <_malloc_r+0x324>
   20c26:	4a4d      	ldr	r2, [pc, #308]	(20d5c <_malloc_r+0x454>)
   20c28:	4297      	cmp	r7, r2
   20c2a:	d16e      	bne.n	20d0a <_malloc_r+0x402>
   20c2c:	4a4f      	ldr	r2, [pc, #316]	(20d6c <_malloc_r+0x464>)
   20c2e:	428c      	cmp	r4, r1
   20c30:	6813      	ldr	r3, [r2, #0]
   20c32:	eb05 0003 	add.w	r0, r5, r3
   20c36:	6010      	str	r0, [r2, #0]
   20c38:	d10b      	bne.n	20c52 <_malloc_r+0x34a>
   20c3a:	0523      	lsls	r3, r4, #20
   20c3c:	0d1b      	lsrs	r3, r3, #20
   20c3e:	b943      	cbnz	r3, 20c52 <_malloc_r+0x34a>
   20c40:	4b46      	ldr	r3, [pc, #280]	(20d5c <_malloc_r+0x454>)
   20c42:	9901      	ldr	r1, [sp, #4]
   20c44:	689a      	ldr	r2, [r3, #8]
   20c46:	eb05 0301 	add.w	r3, r5, r1
   20c4a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20c4e:	6053      	str	r3, [r2, #4]
   20c50:	e04f      	b.n	20cf2 <_malloc_r+0x3ea>
   20c52:	4a45      	ldr	r2, [pc, #276]	(20d68 <_malloc_r+0x460>)
   20c54:	6813      	ldr	r3, [r2, #0]
   20c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20c5a:	bf08      	it	eq
   20c5c:	6014      	streq	r4, [r2, #0]
   20c5e:	d004      	beq.n	20c6a <_malloc_r+0x362>
   20c60:	eb04 0300 	add.w	r3, r4, r0
   20c64:	4a41      	ldr	r2, [pc, #260]	(20d6c <_malloc_r+0x464>)
   20c66:	1a5b      	subs	r3, r3, r1
   20c68:	6013      	str	r3, [r2, #0]
   20c6a:	f014 0207 	ands.w	r2, r4, #7	; 0x7
   20c6e:	d101      	bne.n	20c74 <_malloc_r+0x36c>
   20c70:	2200      	movs	r2, #0
   20c72:	e002      	b.n	20c7a <_malloc_r+0x372>
   20c74:	f1c2 0208 	rsb	r2, r2, #8	; 0x8
   20c78:	18a4      	adds	r4, r4, r2
   20c7a:	eb04 0305 	add.w	r3, r4, r5
   20c7e:	051b      	lsls	r3, r3, #20
   20c80:	0d1b      	lsrs	r3, r3, #20
   20c82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   20c86:	ebc3 0502 	rsb	r5, r3, r2
   20c8a:	4629      	mov	r1, r5
   20c8c:	9800      	ldr	r0, [sp, #0]
   20c8e:	f000 fb53 	bl	21338 <_sbrk_r>
   20c92:	4b36      	ldr	r3, [pc, #216]	(20d6c <_malloc_r+0x464>)
   20c94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20c98:	681a      	ldr	r2, [r3, #0]
   20c9a:	bf04      	itt	eq
   20c9c:	4620      	moveq	r0, r4
   20c9e:	2500      	moveq	r5, #0
   20ca0:	442a      	add	r2, r5
   20ca2:	601a      	str	r2, [r3, #0]
   20ca4:	4a2d      	ldr	r2, [pc, #180]	(20d5c <_malloc_r+0x454>)
   20ca6:	ebc4 0300 	rsb	r3, r4, r0
   20caa:	195b      	adds	r3, r3, r5
   20cac:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   20cb0:	4297      	cmp	r7, r2
   20cb2:	6094      	str	r4, [r2, #8]
   20cb4:	6063      	str	r3, [r4, #4]
   20cb6:	d01c      	beq.n	20cf2 <_malloc_r+0x3ea>
   20cb8:	9b01      	ldr	r3, [sp, #4]
   20cba:	2b0f      	cmp	r3, #15
   20cbc:	d802      	bhi.n	20cc4 <_malloc_r+0x3bc>
   20cbe:	2301      	movs	r3, #1
   20cc0:	6063      	str	r3, [r4, #4]
   20cc2:	e022      	b.n	20d0a <_malloc_r+0x402>
   20cc4:	9901      	ldr	r1, [sp, #4]
   20cc6:	2305      	movs	r3, #5
   20cc8:	f1a1 020c 	sub.w	r2, r1, #12	; 0xc
   20ccc:	f022 0207 	bic.w	r2, r2, #7	; 0x7
   20cd0:	eb07 0102 	add.w	r1, r7, r2
   20cd4:	604b      	str	r3, [r1, #4]
   20cd6:	608b      	str	r3, [r1, #8]
   20cd8:	687b      	ldr	r3, [r7, #4]
   20cda:	2a0f      	cmp	r2, #15
   20cdc:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20ce0:	ea42 0303 	orr.w	r3, r2, r3
   20ce4:	607b      	str	r3, [r7, #4]
   20ce6:	d904      	bls.n	20cf2 <_malloc_r+0x3ea>
   20ce8:	f107 0108 	add.w	r1, r7, #8	; 0x8
   20cec:	9800      	ldr	r0, [sp, #0]
   20cee:	f000 ff41 	bl	21b74 <_free_r>
   20cf2:	491f      	ldr	r1, [pc, #124]	(20d70 <_malloc_r+0x468>)
   20cf4:	4b1d      	ldr	r3, [pc, #116]	(20d6c <_malloc_r+0x464>)
   20cf6:	681a      	ldr	r2, [r3, #0]
   20cf8:	680b      	ldr	r3, [r1, #0]
   20cfa:	429a      	cmp	r2, r3
   20cfc:	bf88      	it	hi
   20cfe:	600a      	strhi	r2, [r1, #0]
   20d00:	491c      	ldr	r1, [pc, #112]	(20d74 <_malloc_r+0x46c>)
   20d02:	680b      	ldr	r3, [r1, #0]
   20d04:	429a      	cmp	r2, r3
   20d06:	bf88      	it	hi
   20d08:	600a      	strhi	r2, [r1, #0]
   20d0a:	4a14      	ldr	r2, [pc, #80]	(20d5c <_malloc_r+0x454>)
   20d0c:	6893      	ldr	r3, [r2, #8]
   20d0e:	685a      	ldr	r2, [r3, #4]
   20d10:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   20d14:	ebc6 0102 	rsb	r1, r6, r2
   20d18:	290f      	cmp	r1, #15
   20d1a:	bfcc      	ite	gt
   20d1c:	2300      	movgt	r3, #0
   20d1e:	2301      	movle	r3, #1
   20d20:	42b2      	cmp	r2, r6
   20d22:	bf38      	it	cc
   20d24:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   20d28:	b123      	cbz	r3, 20d34 <_malloc_r+0x42c>
   20d2a:	9800      	ldr	r0, [sp, #0]
   20d2c:	f000 f87a 	bl	20e24 <__malloc_unlock>
   20d30:	2400      	movs	r4, #0
   20d32:	e00f      	b.n	20d54 <_malloc_r+0x44c>
   20d34:	4b09      	ldr	r3, [pc, #36]	(20d5c <_malloc_r+0x454>)
   20d36:	689c      	ldr	r4, [r3, #8]
   20d38:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   20d3c:	6063      	str	r3, [r4, #4]
   20d3e:	4b07      	ldr	r3, [pc, #28]	(20d5c <_malloc_r+0x454>)
   20d40:	eb04 0206 	add.w	r2, r4, r6
   20d44:	609a      	str	r2, [r3, #8]
   20d46:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   20d4a:	6053      	str	r3, [r2, #4]
   20d4c:	9800      	ldr	r0, [sp, #0]
   20d4e:	f000 f869 	bl	20e24 <__malloc_unlock>
   20d52:	3408      	adds	r4, #8
   20d54:	4620      	mov	r0, r4
   20d56:	b003      	add	sp, #12
   20d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20d5a:	46c0      	nop			(mov r8, r8)
   20d5c:	20000138 	.word	0x20000138
   20d60:	20000140 	.word	0x20000140
   20d64:	20000ea4 	.word	0x20000ea4
   20d68:	20000544 	.word	0x20000544
   20d6c:	20000eb0 	.word	0x20000eb0
   20d70:	20000ea8 	.word	0x20000ea8
   20d74:	20000eac 	.word	0x20000eac

00020d78 <memchr>:
   20d78:	b2c9      	uxtb	r1, r1
   20d7a:	e004      	b.n	20d86 <memchr+0xe>
   20d7c:	7803      	ldrb	r3, [r0, #0]
   20d7e:	3a01      	subs	r2, #1
   20d80:	428b      	cmp	r3, r1
   20d82:	d003      	beq.n	20d8c <memchr+0x14>
   20d84:	3001      	adds	r0, #1
   20d86:	2a00      	cmp	r2, #0
   20d88:	d1f8      	bne.n	20d7c <memchr+0x4>
   20d8a:	2000      	movs	r0, #0
   20d8c:	4770      	bx	lr
   20d8e:	46c0      	nop			(mov r8, r8)

00020d90 <memcmp>:
   20d90:	b510      	push	{r4, lr}
   20d92:	2300      	movs	r3, #0
   20d94:	4604      	mov	r4, r0
   20d96:	e009      	b.n	20dac <memcmp+0x1c>
   20d98:	f814 c003 	ldrb.w	ip, [r4, r3]
   20d9c:	5cc8      	ldrb	r0, [r1, r3]
   20d9e:	3a01      	subs	r2, #1
   20da0:	3301      	adds	r3, #1
   20da2:	4584      	cmp	ip, r0
   20da4:	d002      	beq.n	20dac <memcmp+0x1c>
   20da6:	ebc0 000c 	rsb	r0, r0, ip
   20daa:	e002      	b.n	20db2 <memcmp+0x22>
   20dac:	2a00      	cmp	r2, #0
   20dae:	d1f3      	bne.n	20d98 <memcmp+0x8>
   20db0:	2000      	movs	r0, #0
   20db2:	bd10      	pop	{r4, pc}

00020db4 <memcpy>:
   20db4:	f04f 0c00 	mov.w	ip, #0	; 0x0
   20db8:	e006      	b.n	20dc8 <memcpy+0x14>
   20dba:	f811 300c 	ldrb.w	r3, [r1, ip]
   20dbe:	3a01      	subs	r2, #1
   20dc0:	f800 300c 	strb.w	r3, [r0, ip]
   20dc4:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   20dc8:	2a00      	cmp	r2, #0
   20dca:	d1f6      	bne.n	20dba <memcpy+0x6>
   20dcc:	4770      	bx	lr
   20dce:	46c0      	nop			(mov r8, r8)

00020dd0 <memmove>:
   20dd0:	4281      	cmp	r1, r0
   20dd2:	b510      	push	{r4, lr}
   20dd4:	d217      	bcs.n	20e06 <memmove+0x36>
   20dd6:	eb01 0c02 	add.w	ip, r1, r2
   20dda:	4560      	cmp	r0, ip
   20ddc:	d213      	bcs.n	20e06 <memmove+0x36>
   20dde:	eb00 0402 	add.w	r4, r0, r2
   20de2:	2100      	movs	r1, #0
   20de4:	e003      	b.n	20dee <memmove+0x1e>
   20de6:	f81c 3001 	ldrb.w	r3, [ip, r1]
   20dea:	3a01      	subs	r2, #1
   20dec:	5463      	strb	r3, [r4, r1]
   20dee:	3901      	subs	r1, #1
   20df0:	2a00      	cmp	r2, #0
   20df2:	d1f8      	bne.n	20de6 <memmove+0x16>
   20df4:	e00b      	b.n	20e0e <memmove+0x3e>
   20df6:	f811 300c 	ldrb.w	r3, [r1, ip]
   20dfa:	3a01      	subs	r2, #1
   20dfc:	f800 300c 	strb.w	r3, [r0, ip]
   20e00:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   20e04:	e001      	b.n	20e0a <memmove+0x3a>
   20e06:	f04f 0c00 	mov.w	ip, #0	; 0x0
   20e0a:	2a00      	cmp	r2, #0
   20e0c:	d1f3      	bne.n	20df6 <memmove+0x26>
   20e0e:	bd10      	pop	{r4, pc}

00020e10 <memset>:
   20e10:	2300      	movs	r3, #0
   20e12:	e002      	b.n	20e1a <memset+0xa>
   20e14:	54c1      	strb	r1, [r0, r3]
   20e16:	3a01      	subs	r2, #1
   20e18:	3301      	adds	r3, #1
   20e1a:	2a00      	cmp	r2, #0
   20e1c:	d1fa      	bne.n	20e14 <memset+0x4>
   20e1e:	4770      	bx	lr

00020e20 <__malloc_lock>:
   20e20:	4770      	bx	lr
   20e22:	46c0      	nop			(mov r8, r8)

00020e24 <__malloc_unlock>:
   20e24:	4770      	bx	lr
   20e26:	46c0      	nop			(mov r8, r8)

00020e28 <_putc_r>:
   20e28:	b570      	push	{r4, r5, r6, lr}
   20e2a:	4605      	mov	r5, r0
   20e2c:	460e      	mov	r6, r1
   20e2e:	4614      	mov	r4, r2
   20e30:	b118      	cbz	r0, 20e3a <_putc_r+0x12>
   20e32:	6983      	ldr	r3, [r0, #24]
   20e34:	b90b      	cbnz	r3, 20e3a <_putc_r+0x12>
   20e36:	f000 fe17 	bl	21a68 <__sinit>
   20e3a:	4b17      	ldr	r3, [pc, #92]	(20e98 <_putc_r+0x70>)
   20e3c:	429c      	cmp	r4, r3
   20e3e:	bf08      	it	eq
   20e40:	682c      	ldreq	r4, [r5, #0]
   20e42:	d008      	beq.n	20e56 <_putc_r+0x2e>
   20e44:	4b15      	ldr	r3, [pc, #84]	(20e9c <_putc_r+0x74>)
   20e46:	429c      	cmp	r4, r3
   20e48:	bf08      	it	eq
   20e4a:	686c      	ldreq	r4, [r5, #4]
   20e4c:	d003      	beq.n	20e56 <_putc_r+0x2e>
   20e4e:	4b14      	ldr	r3, [pc, #80]	(20ea0 <_putc_r+0x78>)
   20e50:	429c      	cmp	r4, r3
   20e52:	bf08      	it	eq
   20e54:	68ac      	ldreq	r4, [r5, #8]
   20e56:	68a3      	ldr	r3, [r4, #8]
   20e58:	1e5a      	subs	r2, r3, #1
   20e5a:	2a00      	cmp	r2, #0
   20e5c:	60a2      	str	r2, [r4, #8]
   20e5e:	da13      	bge.n	20e88 <_putc_r+0x60>
   20e60:	69a3      	ldr	r3, [r4, #24]
   20e62:	429a      	cmp	r2, r3
   20e64:	db0a      	blt.n	20e7c <_putc_r+0x54>
   20e66:	6823      	ldr	r3, [r4, #0]
   20e68:	701e      	strb	r6, [r3, #0]
   20e6a:	6823      	ldr	r3, [r4, #0]
   20e6c:	7818      	ldrb	r0, [r3, #0]
   20e6e:	280a      	cmp	r0, #10
   20e70:	d001      	beq.n	20e76 <_putc_r+0x4e>
   20e72:	3301      	adds	r3, #1
   20e74:	e00d      	b.n	20e92 <_putc_r+0x6a>
   20e76:	4628      	mov	r0, r5
   20e78:	210a      	movs	r1, #10
   20e7a:	e001      	b.n	20e80 <_putc_r+0x58>
   20e7c:	4628      	mov	r0, r5
   20e7e:	4631      	mov	r1, r6
   20e80:	4622      	mov	r2, r4
   20e82:	f000 fb85 	bl	21590 <__swbuf_r>
   20e86:	e005      	b.n	20e94 <_putc_r+0x6c>
   20e88:	6823      	ldr	r3, [r4, #0]
   20e8a:	701e      	strb	r6, [r3, #0]
   20e8c:	6823      	ldr	r3, [r4, #0]
   20e8e:	f813 0b01 	ldrb.w	r0, [r3], #1
   20e92:	6023      	str	r3, [r4, #0]
   20e94:	bd70      	pop	{r4, r5, r6, pc}
   20e96:	46c0      	nop			(mov r8, r8)
   20e98:	00023b18 	.word	0x00023b18
   20e9c:	00023b38 	.word	0x00023b38
   20ea0:	00023b58 	.word	0x00023b58

00020ea4 <putc>:
   20ea4:	b500      	push	{lr}
   20ea6:	4b05      	ldr	r3, [pc, #20]	(20ebc <putc+0x18>)
   20ea8:	4684      	mov	ip, r0
   20eaa:	460a      	mov	r2, r1
   20eac:	b081      	sub	sp, #4
   20eae:	6818      	ldr	r0, [r3, #0]
   20eb0:	4661      	mov	r1, ip
   20eb2:	f7ff ffb9 	bl	20e28 <_putc_r>
   20eb6:	b001      	add	sp, #4
   20eb8:	bd00      	pop	{pc}
   20eba:	46c0      	nop			(mov r8, r8)
   20ebc:	20000044 	.word	0x20000044

00020ec0 <realloc>:
   20ec0:	b500      	push	{lr}
   20ec2:	4b05      	ldr	r3, [pc, #20]	(20ed8 <realloc+0x18>)
   20ec4:	4684      	mov	ip, r0
   20ec6:	460a      	mov	r2, r1
   20ec8:	b081      	sub	sp, #4
   20eca:	6818      	ldr	r0, [r3, #0]
   20ecc:	4661      	mov	r1, ip
   20ece:	f000 f805 	bl	20edc <_realloc_r>
   20ed2:	b001      	add	sp, #4
   20ed4:	bd00      	pop	{pc}
   20ed6:	46c0      	nop			(mov r8, r8)
   20ed8:	20000044 	.word	0x20000044

00020edc <_realloc_r>:
   20edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ede:	b087      	sub	sp, #28
   20ee0:	9002      	str	r0, [sp, #8]
   20ee2:	460e      	mov	r6, r1
   20ee4:	9201      	str	r2, [sp, #4]
   20ee6:	b921      	cbnz	r1, 20ef2 <_realloc_r+0x16>
   20ee8:	4611      	mov	r1, r2
   20eea:	f7ff fd0d 	bl	20908 <_malloc_r>
   20eee:	4605      	mov	r5, r0
   20ef0:	e19d      	b.n	2122e <_realloc_r+0x352>
   20ef2:	9802      	ldr	r0, [sp, #8]
   20ef4:	f7ff ff94 	bl	20e20 <__malloc_lock>
   20ef8:	9801      	ldr	r0, [sp, #4]
   20efa:	f1a6 0708 	sub.w	r7, r6, #8	; 0x8
   20efe:	f100 030b 	add.w	r3, r0, #11	; 0xb
   20f02:	2b16      	cmp	r3, #22
   20f04:	bf88      	it	hi
   20f06:	f023 0307 	bichi.w	r3, r3, #7	; 0x7
   20f0a:	687c      	ldr	r4, [r7, #4]
   20f0c:	bf88      	it	hi
   20f0e:	9303      	strhi	r3, [sp, #12]
   20f10:	d801      	bhi.n	20f16 <_realloc_r+0x3a>
   20f12:	2110      	movs	r1, #16
   20f14:	9103      	str	r1, [sp, #12]
   20f16:	9a03      	ldr	r2, [sp, #12]
   20f18:	9d01      	ldr	r5, [sp, #4]
   20f1a:	42aa      	cmp	r2, r5
   20f1c:	bf2c      	ite	cs
   20f1e:	2300      	movcs	r3, #0
   20f20:	2301      	movcc	r3, #1
   20f22:	ea53 72d2 	orrs.w	r2, r3, r2, lsr #31
   20f26:	d004      	beq.n	20f32 <_realloc_r+0x56>
   20f28:	9802      	ldr	r0, [sp, #8]
   20f2a:	230c      	movs	r3, #12
   20f2c:	60c3      	str	r3, [r0, #12]
   20f2e:	2500      	movs	r5, #0
   20f30:	e17d      	b.n	2122e <_realloc_r+0x352>
   20f32:	9903      	ldr	r1, [sp, #12]
   20f34:	f024 0c03 	bic.w	ip, r4, #3	; 0x3
   20f38:	458c      	cmp	ip, r1
   20f3a:	bfa4      	itt	ge
   20f3c:	463c      	movge	r4, r7
   20f3e:	4665      	movge	r5, ip
   20f40:	f280 814b 	bge.w	211da <_realloc_r+0x2fe>
   20f44:	4abb      	ldr	r2, [pc, #748]	(21234 <_realloc_r+0x358>)
   20f46:	eb07 010c 	add.w	r1, r7, ip
   20f4a:	f8d2 e008 	ldr.w	lr, [r2, #8]
   20f4e:	4571      	cmp	r1, lr
   20f50:	d007      	beq.n	20f62 <_realloc_r+0x86>
   20f52:	684b      	ldr	r3, [r1, #4]
   20f54:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   20f58:	440b      	add	r3, r1
   20f5a:	685b      	ldr	r3, [r3, #4]
   20f5c:	f013 0f01 	tst.w	r3, #1	; 0x1
   20f60:	d128      	bne.n	20fb4 <_realloc_r+0xd8>
   20f62:	684b      	ldr	r3, [r1, #4]
   20f64:	4571      	cmp	r1, lr
   20f66:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   20f6a:	eb00 020c 	add.w	r2, r0, ip
   20f6e:	d118      	bne.n	20fa2 <_realloc_r+0xc6>
   20f70:	9d03      	ldr	r5, [sp, #12]
   20f72:	f105 0310 	add.w	r3, r5, #16	; 0x10
   20f76:	429a      	cmp	r2, r3
   20f78:	db1e      	blt.n	20fb8 <_realloc_r+0xdc>
   20f7a:	1b52      	subs	r2, r2, r5
   20f7c:	eb07 0305 	add.w	r3, r7, r5
   20f80:	48ac      	ldr	r0, [pc, #688]	(21234 <_realloc_r+0x358>)
   20f82:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   20f86:	605a      	str	r2, [r3, #4]
   20f88:	6083      	str	r3, [r0, #8]
   20f8a:	687b      	ldr	r3, [r7, #4]
   20f8c:	9802      	ldr	r0, [sp, #8]
   20f8e:	f003 0301 	and.w	r3, r3, #1	; 0x1
   20f92:	ea45 0303 	orr.w	r3, r5, r3
   20f96:	607b      	str	r3, [r7, #4]
   20f98:	f7ff ff44 	bl	20e24 <__malloc_unlock>
   20f9c:	f107 0508 	add.w	r5, r7, #8	; 0x8
   20fa0:	e145      	b.n	2122e <_realloc_r+0x352>
   20fa2:	4615      	mov	r5, r2
   20fa4:	9a03      	ldr	r2, [sp, #12]
   20fa6:	4295      	cmp	r5, r2
   20fa8:	db06      	blt.n	20fb8 <_realloc_r+0xdc>
   20faa:	68ca      	ldr	r2, [r1, #12]
   20fac:	688b      	ldr	r3, [r1, #8]
   20fae:	60da      	str	r2, [r3, #12]
   20fb0:	6093      	str	r3, [r2, #8]
   20fb2:	e0cc      	b.n	2114e <_realloc_r+0x272>
   20fb4:	2100      	movs	r1, #0
   20fb6:	2000      	movs	r0, #0
   20fb8:	f014 0f01 	tst.w	r4, #1	; 0x1
   20fbc:	f040 80af 	bne.w	2111e <_realloc_r+0x242>
   20fc0:	f856 3c08 	ldr.w	r3, [r6, #-8]
   20fc4:	ebc3 0407 	rsb	r4, r3, r7
   20fc8:	6863      	ldr	r3, [r4, #4]
   20fca:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   20fce:	9304      	str	r3, [sp, #16]
   20fd0:	2900      	cmp	r1, #0
   20fd2:	d05f      	beq.n	21094 <_realloc_r+0x1b8>
   20fd4:	4571      	cmp	r1, lr
   20fd6:	eb03 020c 	add.w	r2, r3, ip
   20fda:	d151      	bne.n	21080 <_realloc_r+0x1a4>
   20fdc:	9d03      	ldr	r5, [sp, #12]
   20fde:	1812      	adds	r2, r2, r0
   20fe0:	f105 0310 	add.w	r3, r5, #16	; 0x10
   20fe4:	429a      	cmp	r2, r3
   20fe6:	9205      	str	r2, [sp, #20]
   20fe8:	db54      	blt.n	21094 <_realloc_r+0x1b8>
   20fea:	4625      	mov	r5, r4
   20fec:	68e2      	ldr	r2, [r4, #12]
   20fee:	f855 3f08 	ldr.w	r3, [r5, #8]!
   20ff2:	60da      	str	r2, [r3, #12]
   20ff4:	6093      	str	r3, [r2, #8]
   20ff6:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   20ffa:	2a24      	cmp	r2, #36
   20ffc:	d82a      	bhi.n	21054 <_realloc_r+0x178>
   20ffe:	2a13      	cmp	r2, #19
   21000:	4630      	mov	r0, r6
   21002:	46ac      	mov	ip, r5
   21004:	d91a      	bls.n	2103c <_realloc_r+0x160>
   21006:	6833      	ldr	r3, [r6, #0]
   21008:	1d31      	adds	r1, r6, #4
   2100a:	60a3      	str	r3, [r4, #8]
   2100c:	6873      	ldr	r3, [r6, #4]
   2100e:	1d08      	adds	r0, r1, #4
   21010:	2a1b      	cmp	r2, #27
   21012:	60e3      	str	r3, [r4, #12]
   21014:	f104 0c10 	add.w	ip, r4, #16	; 0x10
   21018:	d910      	bls.n	2103c <_realloc_r+0x160>
   2101a:	684b      	ldr	r3, [r1, #4]
   2101c:	1d01      	adds	r1, r0, #4
   2101e:	6123      	str	r3, [r4, #16]
   21020:	6843      	ldr	r3, [r0, #4]
   21022:	1d08      	adds	r0, r1, #4
   21024:	2a24      	cmp	r2, #36
   21026:	6163      	str	r3, [r4, #20]
   21028:	f104 0c18 	add.w	ip, r4, #24	; 0x18
   2102c:	d106      	bne.n	2103c <_realloc_r+0x160>
   2102e:	684b      	ldr	r3, [r1, #4]
   21030:	f104 0c20 	add.w	ip, r4, #32	; 0x20
   21034:	61a3      	str	r3, [r4, #24]
   21036:	6843      	ldr	r3, [r0, #4]
   21038:	3008      	adds	r0, #8
   2103a:	61e3      	str	r3, [r4, #28]
   2103c:	4601      	mov	r1, r0
   2103e:	f851 3b04 	ldr.w	r3, [r1], #4
   21042:	4662      	mov	r2, ip
   21044:	f842 3b04 	str.w	r3, [r2], #4
   21048:	6843      	ldr	r3, [r0, #4]
   2104a:	f8cc 3004 	str.w	r3, [ip, #4]
   2104e:	684b      	ldr	r3, [r1, #4]
   21050:	6053      	str	r3, [r2, #4]
   21052:	e003      	b.n	2105c <_realloc_r+0x180>
   21054:	4628      	mov	r0, r5
   21056:	4631      	mov	r1, r6
   21058:	f7ff feba 	bl	20dd0 <memmove>
   2105c:	9803      	ldr	r0, [sp, #12]
   2105e:	4975      	ldr	r1, [pc, #468]	(21234 <_realloc_r+0x358>)
   21060:	eb04 0300 	add.w	r3, r4, r0
   21064:	608b      	str	r3, [r1, #8]
   21066:	9905      	ldr	r1, [sp, #20]
   21068:	ebc0 0201 	rsb	r2, r0, r1
   2106c:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   21070:	605a      	str	r2, [r3, #4]
   21072:	6863      	ldr	r3, [r4, #4]
   21074:	f003 0301 	and.w	r3, r3, #1	; 0x1
   21078:	ea40 0303 	orr.w	r3, r0, r3
   2107c:	6063      	str	r3, [r4, #4]
   2107e:	e0a8      	b.n	211d2 <_realloc_r+0x2f6>
   21080:	eb02 0500 	add.w	r5, r2, r0
   21084:	9a03      	ldr	r2, [sp, #12]
   21086:	4295      	cmp	r5, r2
   21088:	db04      	blt.n	21094 <_realloc_r+0x1b8>
   2108a:	68ca      	ldr	r2, [r1, #12]
   2108c:	688b      	ldr	r3, [r1, #8]
   2108e:	60da      	str	r2, [r3, #12]
   21090:	6093      	str	r3, [r2, #8]
   21092:	e005      	b.n	210a0 <_realloc_r+0x1c4>
   21094:	9b04      	ldr	r3, [sp, #16]
   21096:	9803      	ldr	r0, [sp, #12]
   21098:	eb03 050c 	add.w	r5, r3, ip
   2109c:	4285      	cmp	r5, r0
   2109e:	db3e      	blt.n	2111e <_realloc_r+0x242>
   210a0:	4620      	mov	r0, r4
   210a2:	68e2      	ldr	r2, [r4, #12]
   210a4:	f850 3f08 	ldr.w	r3, [r0, #8]!
   210a8:	60da      	str	r2, [r3, #12]
   210aa:	6093      	str	r3, [r2, #8]
   210ac:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   210b0:	2a24      	cmp	r2, #36
   210b2:	d830      	bhi.n	21116 <_realloc_r+0x23a>
   210b4:	2a13      	cmp	r2, #19
   210b6:	46b4      	mov	ip, r6
   210b8:	d921      	bls.n	210fe <_realloc_r+0x222>
   210ba:	6833      	ldr	r3, [r6, #0]
   210bc:	f106 0104 	add.w	r1, r6, #4	; 0x4
   210c0:	60a3      	str	r3, [r4, #8]
   210c2:	6873      	ldr	r3, [r6, #4]
   210c4:	2a1b      	cmp	r2, #27
   210c6:	60e3      	str	r3, [r4, #12]
   210c8:	f104 0010 	add.w	r0, r4, #16	; 0x10
   210cc:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   210d0:	d915      	bls.n	210fe <_realloc_r+0x222>
   210d2:	684b      	ldr	r3, [r1, #4]
   210d4:	2a24      	cmp	r2, #36
   210d6:	6123      	str	r3, [r4, #16]
   210d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   210dc:	f10c 0104 	add.w	r1, ip, #4	; 0x4
   210e0:	6163      	str	r3, [r4, #20]
   210e2:	f104 0018 	add.w	r0, r4, #24	; 0x18
   210e6:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   210ea:	d108      	bne.n	210fe <_realloc_r+0x222>
   210ec:	684b      	ldr	r3, [r1, #4]
   210ee:	f104 0020 	add.w	r0, r4, #32	; 0x20
   210f2:	61a3      	str	r3, [r4, #24]
   210f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   210f8:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   210fc:	61e3      	str	r3, [r4, #28]
   210fe:	4661      	mov	r1, ip
   21100:	f851 3b04 	ldr.w	r3, [r1], #4
   21104:	4602      	mov	r2, r0
   21106:	f842 3b04 	str.w	r3, [r2], #4
   2110a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2110e:	6043      	str	r3, [r0, #4]
   21110:	684b      	ldr	r3, [r1, #4]
   21112:	6053      	str	r3, [r2, #4]
   21114:	e061      	b.n	211da <_realloc_r+0x2fe>
   21116:	4631      	mov	r1, r6
   21118:	f7ff fe5a 	bl	20dd0 <memmove>
   2111c:	e05d      	b.n	211da <_realloc_r+0x2fe>
   2111e:	9802      	ldr	r0, [sp, #8]
   21120:	9901      	ldr	r1, [sp, #4]
   21122:	f8cd c000 	str.w	ip, [sp]
   21126:	f7ff fbef 	bl	20908 <_malloc_r>
   2112a:	f8dd c000 	ldr.w	ip, [sp]
   2112e:	4605      	mov	r5, r0
   21130:	2800      	cmp	r0, #0
   21132:	d04e      	beq.n	211d2 <_realloc_r+0x2f6>
   21134:	687b      	ldr	r3, [r7, #4]
   21136:	f1a0 0208 	sub.w	r2, r0, #8	; 0x8
   2113a:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   2113e:	443b      	add	r3, r7
   21140:	429a      	cmp	r2, r3
   21142:	d106      	bne.n	21152 <_realloc_r+0x276>
   21144:	6853      	ldr	r3, [r2, #4]
   21146:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   2114a:	eb03 050c 	add.w	r5, r3, ip
   2114e:	463c      	mov	r4, r7
   21150:	e043      	b.n	211da <_realloc_r+0x2fe>
   21152:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   21156:	2a24      	cmp	r2, #36
   21158:	d834      	bhi.n	211c4 <_realloc_r+0x2e8>
   2115a:	2a13      	cmp	r2, #19
   2115c:	4630      	mov	r0, r6
   2115e:	46ac      	mov	ip, r5
   21160:	d924      	bls.n	211ac <_realloc_r+0x2d0>
   21162:	46b6      	mov	lr, r6
   21164:	f85e 3b04 	ldr.w	r3, [lr], #4
   21168:	4629      	mov	r1, r5
   2116a:	f841 3b04 	str.w	r3, [r1], #4
   2116e:	6873      	ldr	r3, [r6, #4]
   21170:	2a1b      	cmp	r2, #27
   21172:	606b      	str	r3, [r5, #4]
   21174:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   21178:	f10e 0004 	add.w	r0, lr, #4	; 0x4
   2117c:	d916      	bls.n	211ac <_realloc_r+0x2d0>
   2117e:	f8de 3004 	ldr.w	r3, [lr, #4]
   21182:	f10c 0e04 	add.w	lr, ip, #4	; 0x4
   21186:	604b      	str	r3, [r1, #4]
   21188:	6843      	ldr	r3, [r0, #4]
   2118a:	1d01      	adds	r1, r0, #4
   2118c:	1d08      	adds	r0, r1, #4
   2118e:	2a24      	cmp	r2, #36
   21190:	f8cc 3004 	str.w	r3, [ip, #4]
   21194:	f10e 0c04 	add.w	ip, lr, #4	; 0x4
   21198:	d108      	bne.n	211ac <_realloc_r+0x2d0>
   2119a:	684b      	ldr	r3, [r1, #4]
   2119c:	f8ce 3004 	str.w	r3, [lr, #4]
   211a0:	6843      	ldr	r3, [r0, #4]
   211a2:	3008      	adds	r0, #8
   211a4:	f8cc 3004 	str.w	r3, [ip, #4]
   211a8:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   211ac:	4601      	mov	r1, r0
   211ae:	f851 3b04 	ldr.w	r3, [r1], #4
   211b2:	4662      	mov	r2, ip
   211b4:	f842 3b04 	str.w	r3, [r2], #4
   211b8:	6843      	ldr	r3, [r0, #4]
   211ba:	f8cc 3004 	str.w	r3, [ip, #4]
   211be:	684b      	ldr	r3, [r1, #4]
   211c0:	6053      	str	r3, [r2, #4]
   211c2:	e002      	b.n	211ca <_realloc_r+0x2ee>
   211c4:	4631      	mov	r1, r6
   211c6:	f7ff fe03 	bl	20dd0 <memmove>
   211ca:	9802      	ldr	r0, [sp, #8]
   211cc:	4631      	mov	r1, r6
   211ce:	f000 fcd1 	bl	21b74 <_free_r>
   211d2:	9802      	ldr	r0, [sp, #8]
   211d4:	f7ff fe26 	bl	20e24 <__malloc_unlock>
   211d8:	e029      	b.n	2122e <_realloc_r+0x352>
   211da:	9903      	ldr	r1, [sp, #12]
   211dc:	6863      	ldr	r3, [r4, #4]
   211de:	ebc1 0205 	rsb	r2, r1, r5
   211e2:	2a0f      	cmp	r2, #15
   211e4:	d913      	bls.n	2120e <_realloc_r+0x332>
   211e6:	9d03      	ldr	r5, [sp, #12]
   211e8:	f003 0301 	and.w	r3, r3, #1	; 0x1
   211ec:	ea45 0303 	orr.w	r3, r5, r3
   211f0:	6063      	str	r3, [r4, #4]
   211f2:	4421      	add	r1, r4
   211f4:	f042 0301 	orr.w	r3, r2, #1	; 0x1
   211f8:	604b      	str	r3, [r1, #4]
   211fa:	440a      	add	r2, r1
   211fc:	6853      	ldr	r3, [r2, #4]
   211fe:	3108      	adds	r1, #8
   21200:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21204:	6053      	str	r3, [r2, #4]
   21206:	9802      	ldr	r0, [sp, #8]
   21208:	f000 fcb4 	bl	21b74 <_free_r>
   2120c:	e00a      	b.n	21224 <_realloc_r+0x348>
   2120e:	f003 0301 	and.w	r3, r3, #1	; 0x1
   21212:	ea45 0303 	orr.w	r3, r5, r3
   21216:	6063      	str	r3, [r4, #4]
   21218:	eb04 0205 	add.w	r2, r4, r5
   2121c:	6853      	ldr	r3, [r2, #4]
   2121e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21222:	6053      	str	r3, [r2, #4]
   21224:	9802      	ldr	r0, [sp, #8]
   21226:	f7ff fdfd 	bl	20e24 <__malloc_unlock>
   2122a:	f104 0508 	add.w	r5, r4, #8	; 0x8
   2122e:	4628      	mov	r0, r5
   21230:	b007      	add	sp, #28
   21232:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21234:	20000138 	.word	0x20000138

00021238 <_wrapup_reent>:
   21238:	b570      	push	{r4, r5, r6, lr}
   2123a:	4606      	mov	r6, r0
   2123c:	b908      	cbnz	r0, 21242 <_wrapup_reent+0xa>
   2123e:	4b0a      	ldr	r3, [pc, #40]	(21268 <_wrapup_reent+0x30>)
   21240:	681e      	ldr	r6, [r3, #0]
   21242:	f106 0248 	add.w	r2, r6, #72	; 0x48
   21246:	6855      	ldr	r5, [r2, #4]
   21248:	1c6b      	adds	r3, r5, #1
   2124a:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   2124e:	e001      	b.n	21254 <_wrapup_reent+0x1c>
   21250:	6863      	ldr	r3, [r4, #4]
   21252:	4798      	blx	r3
   21254:	3c04      	subs	r4, #4
   21256:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   2125a:	d5f9      	bpl.n	21250 <_wrapup_reent+0x18>
   2125c:	6ab3      	ldr	r3, [r6, #40]
   2125e:	b10b      	cbz	r3, 21264 <_wrapup_reent+0x2c>
   21260:	4630      	mov	r0, r6
   21262:	4798      	blx	r3
   21264:	bd70      	pop	{r4, r5, r6, pc}
   21266:	46c0      	nop			(mov r8, r8)
   21268:	20000044 	.word	0x20000044

0002126c <cleanup_glue>:
   2126c:	b530      	push	{r4, r5, lr}
   2126e:	460d      	mov	r5, r1
   21270:	6809      	ldr	r1, [r1, #0]
   21272:	b081      	sub	sp, #4
   21274:	4604      	mov	r4, r0
   21276:	b109      	cbz	r1, 2127c <cleanup_glue+0x10>
   21278:	f7ff fff8 	bl	2126c <cleanup_glue>
   2127c:	4620      	mov	r0, r4
   2127e:	4629      	mov	r1, r5
   21280:	f000 fc78 	bl	21b74 <_free_r>
   21284:	b001      	add	sp, #4
   21286:	bd30      	pop	{r4, r5, pc}

00021288 <_reclaim_reent>:
   21288:	4b2a      	ldr	r3, [pc, #168]	(21334 <_reclaim_reent+0xac>)
   2128a:	b570      	push	{r4, r5, r6, lr}
   2128c:	681b      	ldr	r3, [r3, #0]
   2128e:	4605      	mov	r5, r0
   21290:	4298      	cmp	r0, r3
   21292:	d04d      	beq.n	21330 <_reclaim_reent+0xa8>
   21294:	6a43      	ldr	r3, [r0, #36]
   21296:	b1ab      	cbz	r3, 212c4 <_reclaim_reent+0x3c>
   21298:	68db      	ldr	r3, [r3, #12]
   2129a:	b19b      	cbz	r3, 212c4 <_reclaim_reent+0x3c>
   2129c:	2600      	movs	r6, #0
   2129e:	6a6b      	ldr	r3, [r5, #36]
   212a0:	68db      	ldr	r3, [r3, #12]
   212a2:	5999      	ldr	r1, [r3, r6]
   212a4:	e004      	b.n	212b0 <_reclaim_reent+0x28>
   212a6:	680c      	ldr	r4, [r1, #0]
   212a8:	4628      	mov	r0, r5
   212aa:	f000 fc63 	bl	21b74 <_free_r>
   212ae:	4621      	mov	r1, r4
   212b0:	2900      	cmp	r1, #0
   212b2:	d1f8      	bne.n	212a6 <_reclaim_reent+0x1e>
   212b4:	3604      	adds	r6, #4
   212b6:	2e3c      	cmp	r6, #60
   212b8:	d1f1      	bne.n	2129e <_reclaim_reent+0x16>
   212ba:	6a6b      	ldr	r3, [r5, #36]
   212bc:	4628      	mov	r0, r5
   212be:	68d9      	ldr	r1, [r3, #12]
   212c0:	f000 fc58 	bl	21b74 <_free_r>
   212c4:	6a6b      	ldr	r3, [r5, #36]
   212c6:	6819      	ldr	r1, [r3, #0]
   212c8:	b111      	cbz	r1, 212d0 <_reclaim_reent+0x48>
   212ca:	4628      	mov	r0, r5
   212cc:	f000 fc52 	bl	21b74 <_free_r>
   212d0:	6969      	ldr	r1, [r5, #20]
   212d2:	b111      	cbz	r1, 212da <_reclaim_reent+0x52>
   212d4:	4628      	mov	r0, r5
   212d6:	f000 fc4d 	bl	21b74 <_free_r>
   212da:	6a69      	ldr	r1, [r5, #36]
   212dc:	b111      	cbz	r1, 212e4 <_reclaim_reent+0x5c>
   212de:	4628      	mov	r0, r5
   212e0:	f000 fc48 	bl	21b74 <_free_r>
   212e4:	6ba9      	ldr	r1, [r5, #56]
   212e6:	b111      	cbz	r1, 212ee <_reclaim_reent+0x66>
   212e8:	4628      	mov	r0, r5
   212ea:	f000 fc43 	bl	21b74 <_free_r>
   212ee:	6be9      	ldr	r1, [r5, #60]
   212f0:	b111      	cbz	r1, 212f8 <_reclaim_reent+0x70>
   212f2:	4628      	mov	r0, r5
   212f4:	f000 fc3e 	bl	21b74 <_free_r>
   212f8:	6c29      	ldr	r1, [r5, #64]
   212fa:	b111      	cbz	r1, 21302 <_reclaim_reent+0x7a>
   212fc:	4628      	mov	r0, r5
   212fe:	f000 fc39 	bl	21b74 <_free_r>
   21302:	6cab      	ldr	r3, [r5, #72]
   21304:	f8d3 1088 	ldr.w	r1, [r3, #136]
   21308:	b111      	cbz	r1, 21310 <_reclaim_reent+0x88>
   2130a:	4628      	mov	r0, r5
   2130c:	f000 fc32 	bl	21b74 <_free_r>
   21310:	6b69      	ldr	r1, [r5, #52]
   21312:	b111      	cbz	r1, 2131a <_reclaim_reent+0x92>
   21314:	4628      	mov	r0, r5
   21316:	f000 fc2d 	bl	21b74 <_free_r>
   2131a:	69ab      	ldr	r3, [r5, #24]
   2131c:	b143      	cbz	r3, 21330 <_reclaim_reent+0xa8>
   2131e:	6aab      	ldr	r3, [r5, #40]
   21320:	4628      	mov	r0, r5
   21322:	4798      	blx	r3
   21324:	f8d5 10d8 	ldr.w	r1, [r5, #216]
   21328:	b111      	cbz	r1, 21330 <_reclaim_reent+0xa8>
   2132a:	4628      	mov	r0, r5
   2132c:	f7ff ff9e 	bl	2126c <cleanup_glue>
   21330:	bd70      	pop	{r4, r5, r6, pc}
   21332:	46c0      	nop			(mov r8, r8)
   21334:	20000044 	.word	0x20000044

00021338 <_sbrk_r>:
   21338:	b530      	push	{r4, r5, lr}
   2133a:	4c08      	ldr	r4, [pc, #32]	(2135c <_sbrk_r+0x24>)
   2133c:	2300      	movs	r3, #0
   2133e:	b081      	sub	sp, #4
   21340:	4605      	mov	r5, r0
   21342:	4608      	mov	r0, r1
   21344:	6023      	str	r3, [r4, #0]
   21346:	f7f6 fb57 	bl	179f8 <_sbrk>
   2134a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2134e:	d102      	bne.n	21356 <_sbrk_r+0x1e>
   21350:	6823      	ldr	r3, [r4, #0]
   21352:	b103      	cbz	r3, 21356 <_sbrk_r+0x1e>
   21354:	60eb      	str	r3, [r5, #12]
   21356:	b001      	add	sp, #4
   21358:	bd30      	pop	{r4, r5, pc}
   2135a:	46c0      	nop			(mov r8, r8)
   2135c:	20000688 	.word	0x20000688

00021360 <_raise_r>:
   21360:	b530      	push	{r4, r5, lr}
   21362:	291f      	cmp	r1, #31
   21364:	b081      	sub	sp, #4
   21366:	4604      	mov	r4, r0
   21368:	460d      	mov	r5, r1
   2136a:	d904      	bls.n	21376 <_raise_r+0x16>
   2136c:	2316      	movs	r3, #22
   2136e:	60c3      	str	r3, [r0, #12]
   21370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21374:	e01c      	b.n	213b0 <_raise_r+0x50>
   21376:	6c41      	ldr	r1, [r0, #68]
   21378:	b111      	cbz	r1, 21380 <_raise_r+0x20>
   2137a:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
   2137e:	b942      	cbnz	r2, 21392 <_raise_r+0x32>
   21380:	4620      	mov	r0, r4
   21382:	f000 f899 	bl	214b8 <_getpid_r>
   21386:	462a      	mov	r2, r5
   21388:	4601      	mov	r1, r0
   2138a:	4620      	mov	r0, r4
   2138c:	f000 f89a 	bl	214c4 <_kill_r>
   21390:	e00e      	b.n	213b0 <_raise_r+0x50>
   21392:	2a01      	cmp	r2, #1
   21394:	d00b      	beq.n	213ae <_raise_r+0x4e>
   21396:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2139a:	d103      	bne.n	213a4 <_raise_r+0x44>
   2139c:	2316      	movs	r3, #22
   2139e:	60c3      	str	r3, [r0, #12]
   213a0:	2001      	movs	r0, #1
   213a2:	e005      	b.n	213b0 <_raise_r+0x50>
   213a4:	2300      	movs	r3, #0
   213a6:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
   213aa:	4628      	mov	r0, r5
   213ac:	4790      	blx	r2
   213ae:	2000      	movs	r0, #0
   213b0:	b001      	add	sp, #4
   213b2:	bd30      	pop	{r4, r5, pc}

000213b4 <raise>:
   213b4:	b500      	push	{lr}
   213b6:	4b04      	ldr	r3, [pc, #16]	(213c8 <raise+0x14>)
   213b8:	4601      	mov	r1, r0
   213ba:	b081      	sub	sp, #4
   213bc:	6818      	ldr	r0, [r3, #0]
   213be:	f7ff ffcf 	bl	21360 <_raise_r>
   213c2:	b001      	add	sp, #4
   213c4:	bd00      	pop	{pc}
   213c6:	46c0      	nop			(mov r8, r8)
   213c8:	20000044 	.word	0x20000044

000213cc <_init_signal_r>:
   213cc:	6c43      	ldr	r3, [r0, #68]
   213ce:	b510      	push	{r4, lr}
   213d0:	4604      	mov	r4, r0
   213d2:	b963      	cbnz	r3, 213ee <_init_signal_r+0x22>
   213d4:	2180      	movs	r1, #128
   213d6:	f7ff fa97 	bl	20908 <_malloc_r>
   213da:	6460      	str	r0, [r4, #68]
   213dc:	b908      	cbnz	r0, 213e2 <_init_signal_r+0x16>
   213de:	3801      	subs	r0, #1
   213e0:	e006      	b.n	213f0 <_init_signal_r+0x24>
   213e2:	2300      	movs	r3, #0
   213e4:	2200      	movs	r2, #0
   213e6:	50c2      	str	r2, [r0, r3]
   213e8:	3304      	adds	r3, #4
   213ea:	2b80      	cmp	r3, #128
   213ec:	d1fb      	bne.n	213e6 <_init_signal_r+0x1a>
   213ee:	2000      	movs	r0, #0
   213f0:	bd10      	pop	{r4, pc}
   213f2:	46c0      	nop			(mov r8, r8)

000213f4 <_init_signal>:
   213f4:	b500      	push	{lr}
   213f6:	4b03      	ldr	r3, [pc, #12]	(21404 <_init_signal+0x10>)
   213f8:	b081      	sub	sp, #4
   213fa:	6818      	ldr	r0, [r3, #0]
   213fc:	f7ff ffe6 	bl	213cc <_init_signal_r>
   21400:	b001      	add	sp, #4
   21402:	bd00      	pop	{pc}
   21404:	20000044 	.word	0x20000044

00021408 <__sigtramp_r>:
   21408:	b530      	push	{r4, r5, lr}
   2140a:	291f      	cmp	r1, #31
   2140c:	b081      	sub	sp, #4
   2140e:	4604      	mov	r4, r0
   21410:	460d      	mov	r5, r1
   21412:	d81a      	bhi.n	2144a <__sigtramp_r+0x42>
   21414:	6c43      	ldr	r3, [r0, #68]
   21416:	b913      	cbnz	r3, 2141e <__sigtramp_r+0x16>
   21418:	f7ff ffd8 	bl	213cc <_init_signal_r>
   2141c:	b9a8      	cbnz	r0, 2144a <__sigtramp_r+0x42>
   2141e:	6c60      	ldr	r0, [r4, #68]
   21420:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   21424:	b90a      	cbnz	r2, 2142a <__sigtramp_r+0x22>
   21426:	2001      	movs	r0, #1
   21428:	e011      	b.n	2144e <__sigtramp_r+0x46>
   2142a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2142e:	d101      	bne.n	21434 <__sigtramp_r+0x2c>
   21430:	2002      	movs	r0, #2
   21432:	e00c      	b.n	2144e <__sigtramp_r+0x46>
   21434:	2a01      	cmp	r2, #1
   21436:	d101      	bne.n	2143c <__sigtramp_r+0x34>
   21438:	2003      	movs	r0, #3
   2143a:	e008      	b.n	2144e <__sigtramp_r+0x46>
   2143c:	2300      	movs	r3, #0
   2143e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   21442:	4628      	mov	r0, r5
   21444:	4790      	blx	r2
   21446:	2000      	movs	r0, #0
   21448:	e001      	b.n	2144e <__sigtramp_r+0x46>
   2144a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2144e:	b001      	add	sp, #4
   21450:	bd30      	pop	{r4, r5, pc}
   21452:	46c0      	nop			(mov r8, r8)

00021454 <__sigtramp>:
   21454:	b500      	push	{lr}
   21456:	4b04      	ldr	r3, [pc, #16]	(21468 <__sigtramp+0x14>)
   21458:	4601      	mov	r1, r0
   2145a:	b081      	sub	sp, #4
   2145c:	6818      	ldr	r0, [r3, #0]
   2145e:	f7ff ffd3 	bl	21408 <__sigtramp_r>
   21462:	b001      	add	sp, #4
   21464:	bd00      	pop	{pc}
   21466:	46c0      	nop			(mov r8, r8)
   21468:	20000044 	.word	0x20000044

0002146c <_signal_r>:
   2146c:	291f      	cmp	r1, #31
   2146e:	b570      	push	{r4, r5, r6, lr}
   21470:	4604      	mov	r4, r0
   21472:	460d      	mov	r5, r1
   21474:	4616      	mov	r6, r2
   21476:	d902      	bls.n	2147e <_signal_r+0x12>
   21478:	2316      	movs	r3, #22
   2147a:	60c3      	str	r3, [r0, #12]
   2147c:	e004      	b.n	21488 <_signal_r+0x1c>
   2147e:	6c43      	ldr	r3, [r0, #68]
   21480:	b92b      	cbnz	r3, 2148e <_signal_r+0x22>
   21482:	f7ff ffa3 	bl	213cc <_init_signal_r>
   21486:	b110      	cbz	r0, 2148e <_signal_r+0x22>
   21488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2148c:	e004      	b.n	21498 <_signal_r+0x2c>
   2148e:	6c63      	ldr	r3, [r4, #68]
   21490:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   21494:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
   21498:	bd70      	pop	{r4, r5, r6, pc}
   2149a:	46c0      	nop			(mov r8, r8)

0002149c <signal>:
   2149c:	b500      	push	{lr}
   2149e:	4b05      	ldr	r3, [pc, #20]	(214b4 <signal+0x18>)
   214a0:	4684      	mov	ip, r0
   214a2:	460a      	mov	r2, r1
   214a4:	b081      	sub	sp, #4
   214a6:	6818      	ldr	r0, [r3, #0]
   214a8:	4661      	mov	r1, ip
   214aa:	f7ff ffdf 	bl	2146c <_signal_r>
   214ae:	b001      	add	sp, #4
   214b0:	bd00      	pop	{pc}
   214b2:	46c0      	nop			(mov r8, r8)
   214b4:	20000044 	.word	0x20000044

000214b8 <_getpid_r>:
   214b8:	b500      	push	{lr}
   214ba:	b081      	sub	sp, #4
   214bc:	f7f6 fa36 	bl	1792c <_getpid>
   214c0:	b001      	add	sp, #4
   214c2:	bd00      	pop	{pc}

000214c4 <_kill_r>:
   214c4:	b530      	push	{r4, r5, lr}
   214c6:	4c08      	ldr	r4, [pc, #32]	(214e8 <_kill_r+0x24>)
   214c8:	2300      	movs	r3, #0
   214ca:	b081      	sub	sp, #4
   214cc:	4605      	mov	r5, r0
   214ce:	4608      	mov	r0, r1
   214d0:	4611      	mov	r1, r2
   214d2:	6023      	str	r3, [r4, #0]
   214d4:	f7f6 fa3e 	bl	17954 <_kill>
   214d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   214dc:	d102      	bne.n	214e4 <_kill_r+0x20>
   214de:	6823      	ldr	r3, [r4, #0]
   214e0:	b103      	cbz	r3, 214e4 <_kill_r+0x20>
   214e2:	60eb      	str	r3, [r5, #12]
   214e4:	b001      	add	sp, #4
   214e6:	bd30      	pop	{r4, r5, pc}
   214e8:	20000688 	.word	0x20000688

000214ec <strcmp>:
   214ec:	b530      	push	{r4, r5, lr}
   214ee:	468c      	mov	ip, r1
   214f0:	2200      	movs	r2, #0
   214f2:	5c81      	ldrb	r1, [r0, r2]
   214f4:	eb00 0402 	add.w	r4, r0, r2
   214f8:	eb0c 0502 	add.w	r5, ip, r2
   214fc:	b121      	cbz	r1, 21508 <strcmp+0x1c>
   214fe:	f81c 3002 	ldrb.w	r3, [ip, r2]
   21502:	3201      	adds	r2, #1
   21504:	4299      	cmp	r1, r3
   21506:	d0f4      	beq.n	214f2 <strcmp+0x6>
   21508:	7820      	ldrb	r0, [r4, #0]
   2150a:	782b      	ldrb	r3, [r5, #0]
   2150c:	1ac0      	subs	r0, r0, r3
   2150e:	bd30      	pop	{r4, r5, pc}

00021510 <strcpy>:
   21510:	2200      	movs	r2, #0
   21512:	5c8b      	ldrb	r3, [r1, r2]
   21514:	5483      	strb	r3, [r0, r2]
   21516:	3201      	adds	r2, #1
   21518:	2b00      	cmp	r3, #0
   2151a:	d1fa      	bne.n	21512 <strcpy+0x2>
   2151c:	4770      	bx	lr
   2151e:	46c0      	nop			(mov r8, r8)

00021520 <strlen>:
   21520:	4602      	mov	r2, r0
   21522:	e000      	b.n	21526 <strlen+0x6>
   21524:	3001      	adds	r0, #1
   21526:	7803      	ldrb	r3, [r0, #0]
   21528:	2b00      	cmp	r3, #0
   2152a:	d1fb      	bne.n	21524 <strlen+0x4>
   2152c:	1a80      	subs	r0, r0, r2
   2152e:	4770      	bx	lr

00021530 <strncmp>:
   21530:	b570      	push	{r4, r5, r6, lr}
   21532:	4604      	mov	r4, r0
   21534:	4608      	mov	r0, r1
   21536:	b90a      	cbnz	r2, 2153c <strncmp+0xc>
   21538:	2000      	movs	r0, #0
   2153a:	e017      	b.n	2156c <strncmp+0x3c>
   2153c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   21540:	e005      	b.n	2154e <strncmp+0x1e>
   21542:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   21546:	d00d      	beq.n	21564 <strncmp+0x34>
   21548:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   2154c:	b151      	cbz	r1, 21564 <strncmp+0x34>
   2154e:	eb04 050c 	add.w	r5, r4, ip
   21552:	eb00 060c 	add.w	r6, r0, ip
   21556:	b12a      	cbz	r2, 21564 <strncmp+0x34>
   21558:	f814 300c 	ldrb.w	r3, [r4, ip]
   2155c:	f810 100c 	ldrb.w	r1, [r0, ip]
   21560:	4299      	cmp	r1, r3
   21562:	d0ee      	beq.n	21542 <strncmp+0x12>
   21564:	782a      	ldrb	r2, [r5, #0]
   21566:	7833      	ldrb	r3, [r6, #0]
   21568:	ebc3 0002 	rsb	r0, r3, r2
   2156c:	bd70      	pop	{r4, r5, r6, pc}
   2156e:	46c0      	nop			(mov r8, r8)

00021570 <write>:
   21570:	b500      	push	{lr}
   21572:	4613      	mov	r3, r2
   21574:	4a05      	ldr	r2, [pc, #20]	(2158c <write+0x1c>)
   21576:	4684      	mov	ip, r0
   21578:	468e      	mov	lr, r1
   2157a:	b081      	sub	sp, #4
   2157c:	6810      	ldr	r0, [r2, #0]
   2157e:	4661      	mov	r1, ip
   21580:	4672      	mov	r2, lr
   21582:	f000 f879 	bl	21678 <_write_r>
   21586:	b001      	add	sp, #4
   21588:	bd00      	pop	{pc}
   2158a:	46c0      	nop			(mov r8, r8)
   2158c:	20000044 	.word	0x20000044

00021590 <__swbuf_r>:
   21590:	b570      	push	{r4, r5, r6, lr}
   21592:	4606      	mov	r6, r0
   21594:	460d      	mov	r5, r1
   21596:	4614      	mov	r4, r2
   21598:	b118      	cbz	r0, 215a2 <__swbuf_r+0x12>
   2159a:	6983      	ldr	r3, [r0, #24]
   2159c:	b90b      	cbnz	r3, 215a2 <__swbuf_r+0x12>
   2159e:	f000 fa63 	bl	21a68 <__sinit>
   215a2:	4b2b      	ldr	r3, [pc, #172]	(21650 <__swbuf_r+0xc0>)
   215a4:	429c      	cmp	r4, r3
   215a6:	bf08      	it	eq
   215a8:	6834      	ldreq	r4, [r6, #0]
   215aa:	d008      	beq.n	215be <__swbuf_r+0x2e>
   215ac:	4b29      	ldr	r3, [pc, #164]	(21654 <__swbuf_r+0xc4>)
   215ae:	429c      	cmp	r4, r3
   215b0:	bf08      	it	eq
   215b2:	6874      	ldreq	r4, [r6, #4]
   215b4:	d003      	beq.n	215be <__swbuf_r+0x2e>
   215b6:	4b28      	ldr	r3, [pc, #160]	(21658 <__swbuf_r+0xc8>)
   215b8:	429c      	cmp	r4, r3
   215ba:	bf08      	it	eq
   215bc:	68b4      	ldreq	r4, [r6, #8]
   215be:	69a3      	ldr	r3, [r4, #24]
   215c0:	60a3      	str	r3, [r4, #8]
   215c2:	89a3      	ldrh	r3, [r4, #12]
   215c4:	f013 0f08 	tst.w	r3, #8	; 0x8
   215c8:	d001      	beq.n	215ce <__swbuf_r+0x3e>
   215ca:	6923      	ldr	r3, [r4, #16]
   215cc:	b95b      	cbnz	r3, 215e6 <__swbuf_r+0x56>
   215ce:	4630      	mov	r0, r6
   215d0:	4621      	mov	r1, r4
   215d2:	f000 f867 	bl	216a4 <__swsetup_r>
   215d6:	b130      	cbz	r0, 215e6 <__swbuf_r+0x56>
   215d8:	89a3      	ldrh	r3, [r4, #12]
   215da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   215de:	81a3      	strh	r3, [r4, #12]
   215e0:	2309      	movs	r3, #9
   215e2:	60f3      	str	r3, [r6, #12]
   215e4:	e030      	b.n	21648 <__swbuf_r+0xb8>
   215e6:	89a3      	ldrh	r3, [r4, #12]
   215e8:	6922      	ldr	r2, [r4, #16]
   215ea:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   215ee:	bf01      	itttt	eq
   215f0:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   215f4:	81a3      	strheq	r3, [r4, #12]
   215f6:	6e63      	ldreq	r3, [r4, #100]
   215f8:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   215fc:	bf08      	it	eq
   215fe:	6663      	streq	r3, [r4, #100]
   21600:	6823      	ldr	r3, [r4, #0]
   21602:	ebc2 0203 	rsb	r2, r2, r3
   21606:	6963      	ldr	r3, [r4, #20]
   21608:	429a      	cmp	r2, r3
   2160a:	db05      	blt.n	21618 <__swbuf_r+0x88>
   2160c:	4630      	mov	r0, r6
   2160e:	4621      	mov	r1, r4
   21610:	f000 f8ba 	bl	21788 <_fflush_r>
   21614:	b9c0      	cbnz	r0, 21648 <__swbuf_r+0xb8>
   21616:	2200      	movs	r2, #0
   21618:	68a3      	ldr	r3, [r4, #8]
   2161a:	b2ed      	uxtb	r5, r5
   2161c:	3b01      	subs	r3, #1
   2161e:	60a3      	str	r3, [r4, #8]
   21620:	6823      	ldr	r3, [r4, #0]
   21622:	3201      	adds	r2, #1
   21624:	f803 5b01 	strb.w	r5, [r3], #1
   21628:	6023      	str	r3, [r4, #0]
   2162a:	6963      	ldr	r3, [r4, #20]
   2162c:	429a      	cmp	r2, r3
   2162e:	d006      	beq.n	2163e <__swbuf_r+0xae>
   21630:	7b23      	ldrb	r3, [r4, #12]
   21632:	2d0a      	cmp	r5, #10
   21634:	bf14      	ite	ne
   21636:	2300      	movne	r3, #0
   21638:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   2163c:	b133      	cbz	r3, 2164c <__swbuf_r+0xbc>
   2163e:	4630      	mov	r0, r6
   21640:	4621      	mov	r1, r4
   21642:	f000 f8a1 	bl	21788 <_fflush_r>
   21646:	b108      	cbz	r0, 2164c <__swbuf_r+0xbc>
   21648:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2164c:	4628      	mov	r0, r5
   2164e:	bd70      	pop	{r4, r5, r6, pc}
   21650:	00023b18 	.word	0x00023b18
   21654:	00023b38 	.word	0x00023b38
   21658:	00023b58 	.word	0x00023b58

0002165c <__swbuf>:
   2165c:	b500      	push	{lr}
   2165e:	4b05      	ldr	r3, [pc, #20]	(21674 <__swbuf+0x18>)
   21660:	4684      	mov	ip, r0
   21662:	460a      	mov	r2, r1
   21664:	b081      	sub	sp, #4
   21666:	6818      	ldr	r0, [r3, #0]
   21668:	4661      	mov	r1, ip
   2166a:	f7ff ff91 	bl	21590 <__swbuf_r>
   2166e:	b001      	add	sp, #4
   21670:	bd00      	pop	{pc}
   21672:	46c0      	nop			(mov r8, r8)
   21674:	20000044 	.word	0x20000044

00021678 <_write_r>:
   21678:	b530      	push	{r4, r5, lr}
   2167a:	4c09      	ldr	r4, [pc, #36]	(216a0 <_write_r+0x28>)
   2167c:	4605      	mov	r5, r0
   2167e:	2000      	movs	r0, #0
   21680:	6020      	str	r0, [r4, #0]
   21682:	b081      	sub	sp, #4
   21684:	4608      	mov	r0, r1
   21686:	4611      	mov	r1, r2
   21688:	461a      	mov	r2, r3
   2168a:	f7f6 fa17 	bl	17abc <_write>
   2168e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21692:	d102      	bne.n	2169a <_write_r+0x22>
   21694:	6823      	ldr	r3, [r4, #0]
   21696:	b103      	cbz	r3, 2169a <_write_r+0x22>
   21698:	60eb      	str	r3, [r5, #12]
   2169a:	b001      	add	sp, #4
   2169c:	bd30      	pop	{r4, r5, pc}
   2169e:	46c0      	nop			(mov r8, r8)
   216a0:	20000688 	.word	0x20000688

000216a4 <__swsetup_r>:
   216a4:	b530      	push	{r4, r5, lr}
   216a6:	4b34      	ldr	r3, [pc, #208]	(21778 <__swsetup_r+0xd4>)
   216a8:	4605      	mov	r5, r0
   216aa:	6818      	ldr	r0, [r3, #0]
   216ac:	b081      	sub	sp, #4
   216ae:	460c      	mov	r4, r1
   216b0:	b118      	cbz	r0, 216ba <__swsetup_r+0x16>
   216b2:	6983      	ldr	r3, [r0, #24]
   216b4:	b90b      	cbnz	r3, 216ba <__swsetup_r+0x16>
   216b6:	f000 f9d7 	bl	21a68 <__sinit>
   216ba:	4b30      	ldr	r3, [pc, #192]	(2177c <__swsetup_r+0xd8>)
   216bc:	429c      	cmp	r4, r3
   216be:	d103      	bne.n	216c8 <__swsetup_r+0x24>
   216c0:	4b2d      	ldr	r3, [pc, #180]	(21778 <__swsetup_r+0xd4>)
   216c2:	681b      	ldr	r3, [r3, #0]
   216c4:	681c      	ldr	r4, [r3, #0]
   216c6:	e00c      	b.n	216e2 <__swsetup_r+0x3e>
   216c8:	4b2d      	ldr	r3, [pc, #180]	(21780 <__swsetup_r+0xdc>)
   216ca:	429c      	cmp	r4, r3
   216cc:	d103      	bne.n	216d6 <__swsetup_r+0x32>
   216ce:	4b2a      	ldr	r3, [pc, #168]	(21778 <__swsetup_r+0xd4>)
   216d0:	681b      	ldr	r3, [r3, #0]
   216d2:	685c      	ldr	r4, [r3, #4]
   216d4:	e005      	b.n	216e2 <__swsetup_r+0x3e>
   216d6:	4b2b      	ldr	r3, [pc, #172]	(21784 <__swsetup_r+0xe0>)
   216d8:	429c      	cmp	r4, r3
   216da:	bf02      	ittt	eq
   216dc:	4b26      	ldreq	r3, [pc, #152]	(21778 <__swsetup_r+0xd4>)
   216de:	681b      	ldreq	r3, [r3, #0]
   216e0:	689c      	ldreq	r4, [r3, #8]
   216e2:	89a3      	ldrh	r3, [r4, #12]
   216e4:	f013 0f08 	tst.w	r3, #8	; 0x8
   216e8:	d11c      	bne.n	21724 <__swsetup_r+0x80>
   216ea:	f013 0f10 	tst.w	r3, #16	; 0x10
   216ee:	d03c      	beq.n	2176a <__swsetup_r+0xc6>
   216f0:	f013 0f04 	tst.w	r3, #4	; 0x4
   216f4:	d012      	beq.n	2171c <__swsetup_r+0x78>
   216f6:	6b61      	ldr	r1, [r4, #52]
   216f8:	b141      	cbz	r1, 2170c <__swsetup_r+0x68>
   216fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   216fe:	4299      	cmp	r1, r3
   21700:	d002      	beq.n	21708 <__swsetup_r+0x64>
   21702:	4628      	mov	r0, r5
   21704:	f000 fa36 	bl	21b74 <_free_r>
   21708:	2300      	movs	r3, #0
   2170a:	6363      	str	r3, [r4, #52]
   2170c:	89a3      	ldrh	r3, [r4, #12]
   2170e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   21712:	81a3      	strh	r3, [r4, #12]
   21714:	2300      	movs	r3, #0
   21716:	6063      	str	r3, [r4, #4]
   21718:	6923      	ldr	r3, [r4, #16]
   2171a:	6023      	str	r3, [r4, #0]
   2171c:	89a3      	ldrh	r3, [r4, #12]
   2171e:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   21722:	81a3      	strh	r3, [r4, #12]
   21724:	6923      	ldr	r3, [r4, #16]
   21726:	b94b      	cbnz	r3, 2173c <__swsetup_r+0x98>
   21728:	89a3      	ldrh	r3, [r4, #12]
   2172a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2172e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21732:	d003      	beq.n	2173c <__swsetup_r+0x98>
   21734:	4628      	mov	r0, r5
   21736:	4621      	mov	r1, r4
   21738:	f000 fb36 	bl	21da8 <__smakebuf_r>
   2173c:	89a3      	ldrh	r3, [r4, #12]
   2173e:	f013 0f01 	tst.w	r3, #1	; 0x1
   21742:	d006      	beq.n	21752 <__swsetup_r+0xae>
   21744:	2300      	movs	r3, #0
   21746:	60a3      	str	r3, [r4, #8]
   21748:	6963      	ldr	r3, [r4, #20]
   2174a:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   2174e:	61a3      	str	r3, [r4, #24]
   21750:	e005      	b.n	2175e <__swsetup_r+0xba>
   21752:	f013 0f02 	tst.w	r3, #2	; 0x2
   21756:	bf0c      	ite	eq
   21758:	6963      	ldreq	r3, [r4, #20]
   2175a:	2300      	movne	r3, #0
   2175c:	60a3      	str	r3, [r4, #8]
   2175e:	6923      	ldr	r3, [r4, #16]
   21760:	b933      	cbnz	r3, 21770 <__swsetup_r+0xcc>
   21762:	89a3      	ldrh	r3, [r4, #12]
   21764:	f013 0f80 	tst.w	r3, #128	; 0x80
   21768:	d002      	beq.n	21770 <__swsetup_r+0xcc>
   2176a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2176e:	e000      	b.n	21772 <__swsetup_r+0xce>
   21770:	2000      	movs	r0, #0
   21772:	b001      	add	sp, #4
   21774:	bd30      	pop	{r4, r5, pc}
   21776:	46c0      	nop			(mov r8, r8)
   21778:	20000044 	.word	0x20000044
   2177c:	00023b18 	.word	0x00023b18
   21780:	00023b38 	.word	0x00023b38
   21784:	00023b58 	.word	0x00023b58

00021788 <_fflush_r>:
   21788:	b5f0      	push	{r4, r5, r6, r7, lr}
   2178a:	690b      	ldr	r3, [r1, #16]
   2178c:	b083      	sub	sp, #12
   2178e:	9001      	str	r0, [sp, #4]
   21790:	460d      	mov	r5, r1
   21792:	2b00      	cmp	r3, #0
   21794:	f000 808c 	beq.w	218b0 <_fflush_r+0x128>
   21798:	b118      	cbz	r0, 217a2 <_fflush_r+0x1a>
   2179a:	6983      	ldr	r3, [r0, #24]
   2179c:	b90b      	cbnz	r3, 217a2 <_fflush_r+0x1a>
   2179e:	f000 f963 	bl	21a68 <__sinit>
   217a2:	4b45      	ldr	r3, [pc, #276]	(218b8 <_fflush_r+0x130>)
   217a4:	429d      	cmp	r5, r3
   217a6:	d102      	bne.n	217ae <_fflush_r+0x26>
   217a8:	9a01      	ldr	r2, [sp, #4]
   217aa:	6815      	ldr	r5, [r2, #0]
   217ac:	e00a      	b.n	217c4 <_fflush_r+0x3c>
   217ae:	4b43      	ldr	r3, [pc, #268]	(218bc <_fflush_r+0x134>)
   217b0:	429d      	cmp	r5, r3
   217b2:	d102      	bne.n	217ba <_fflush_r+0x32>
   217b4:	9b01      	ldr	r3, [sp, #4]
   217b6:	685d      	ldr	r5, [r3, #4]
   217b8:	e004      	b.n	217c4 <_fflush_r+0x3c>
   217ba:	4b41      	ldr	r3, [pc, #260]	(218c0 <_fflush_r+0x138>)
   217bc:	429d      	cmp	r5, r3
   217be:	bf04      	itt	eq
   217c0:	9a01      	ldreq	r2, [sp, #4]
   217c2:	6895      	ldreq	r5, [r2, #8]
   217c4:	89ab      	ldrh	r3, [r5, #12]
   217c6:	b21a      	sxth	r2, r3
   217c8:	f012 0f08 	tst.w	r2, #8	; 0x8
   217cc:	d150      	bne.n	21870 <_fflush_r+0xe8>
   217ce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   217d2:	686b      	ldr	r3, [r5, #4]
   217d4:	81aa      	strh	r2, [r5, #12]
   217d6:	2b00      	cmp	r3, #0
   217d8:	dc02      	bgt.n	217e0 <_fflush_r+0x58>
   217da:	6c2b      	ldr	r3, [r5, #64]
   217dc:	2b00      	cmp	r3, #0
   217de:	dd67      	ble.n	218b0 <_fflush_r+0x128>
   217e0:	6aec      	ldr	r4, [r5, #44]
   217e2:	2c00      	cmp	r4, #0
   217e4:	d064      	beq.n	218b0 <_fflush_r+0x128>
   217e6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   217ea:	bf18      	it	ne
   217ec:	6d6e      	ldrne	r6, [r5, #84]
   217ee:	d111      	bne.n	21814 <_fflush_r+0x8c>
   217f0:	2200      	movs	r2, #0
   217f2:	2301      	movs	r3, #1
   217f4:	6a29      	ldr	r1, [r5, #32]
   217f6:	9801      	ldr	r0, [sp, #4]
   217f8:	47a0      	blx	r4
   217fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   217fe:	4606      	mov	r6, r0
   21800:	d108      	bne.n	21814 <_fflush_r+0x8c>
   21802:	9a01      	ldr	r2, [sp, #4]
   21804:	68d3      	ldr	r3, [r2, #12]
   21806:	2b1d      	cmp	r3, #29
   21808:	d052      	beq.n	218b0 <_fflush_r+0x128>
   2180a:	89ab      	ldrh	r3, [r5, #12]
   2180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21810:	81ab      	strh	r3, [r5, #12]
   21812:	e04e      	b.n	218b2 <_fflush_r+0x12a>
   21814:	89ab      	ldrh	r3, [r5, #12]
   21816:	f013 0f04 	tst.w	r3, #4	; 0x4
   2181a:	d005      	beq.n	21828 <_fflush_r+0xa0>
   2181c:	686b      	ldr	r3, [r5, #4]
   2181e:	1af6      	subs	r6, r6, r3
   21820:	6b6b      	ldr	r3, [r5, #52]
   21822:	b10b      	cbz	r3, 21828 <_fflush_r+0xa0>
   21824:	6c2b      	ldr	r3, [r5, #64]
   21826:	1af6      	subs	r6, r6, r3
   21828:	2300      	movs	r3, #0
   2182a:	6a29      	ldr	r1, [r5, #32]
   2182c:	6aec      	ldr	r4, [r5, #44]
   2182e:	9801      	ldr	r0, [sp, #4]
   21830:	4632      	mov	r2, r6
   21832:	47a0      	blx	r4
   21834:	42b0      	cmp	r0, r6
   21836:	89ab      	ldrh	r3, [r5, #12]
   21838:	d130      	bne.n	2189c <_fflush_r+0x114>
   2183a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   2183e:	041b      	lsls	r3, r3, #16
   21840:	0c1b      	lsrs	r3, r3, #16
   21842:	81ab      	strh	r3, [r5, #12]
   21844:	2300      	movs	r3, #0
   21846:	606b      	str	r3, [r5, #4]
   21848:	692b      	ldr	r3, [r5, #16]
   2184a:	6b69      	ldr	r1, [r5, #52]
   2184c:	602b      	str	r3, [r5, #0]
   2184e:	89ab      	ldrh	r3, [r5, #12]
   21850:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   21854:	bf18      	it	ne
   21856:	656e      	strne	r6, [r5, #84]
   21858:	2900      	cmp	r1, #0
   2185a:	d029      	beq.n	218b0 <_fflush_r+0x128>
   2185c:	f105 0344 	add.w	r3, r5, #68	; 0x44
   21860:	4299      	cmp	r1, r3
   21862:	d002      	beq.n	2186a <_fflush_r+0xe2>
   21864:	9801      	ldr	r0, [sp, #4]
   21866:	f000 f985 	bl	21b74 <_free_r>
   2186a:	2300      	movs	r3, #0
   2186c:	636b      	str	r3, [r5, #52]
   2186e:	e01f      	b.n	218b0 <_fflush_r+0x128>
   21870:	692f      	ldr	r7, [r5, #16]
   21872:	b1ef      	cbz	r7, 218b0 <_fflush_r+0x128>
   21874:	f012 0f03 	tst.w	r2, #3	; 0x3
   21878:	682b      	ldr	r3, [r5, #0]
   2187a:	bf0c      	ite	eq
   2187c:	696a      	ldreq	r2, [r5, #20]
   2187e:	2200      	movne	r2, #0
   21880:	602f      	str	r7, [r5, #0]
   21882:	ebc7 0603 	rsb	r6, r7, r3
   21886:	60aa      	str	r2, [r5, #8]
   21888:	e010      	b.n	218ac <_fflush_r+0x124>
   2188a:	6a29      	ldr	r1, [r5, #32]
   2188c:	6aac      	ldr	r4, [r5, #40]
   2188e:	9801      	ldr	r0, [sp, #4]
   21890:	463a      	mov	r2, r7
   21892:	4633      	mov	r3, r6
   21894:	47a0      	blx	r4
   21896:	2800      	cmp	r0, #0
   21898:	dc06      	bgt.n	218a8 <_fflush_r+0x120>
   2189a:	89ab      	ldrh	r3, [r5, #12]
   2189c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   218a0:	81ab      	strh	r3, [r5, #12]
   218a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   218a6:	e004      	b.n	218b2 <_fflush_r+0x12a>
   218a8:	183f      	adds	r7, r7, r0
   218aa:	1a36      	subs	r6, r6, r0
   218ac:	2e00      	cmp	r6, #0
   218ae:	dcec      	bgt.n	2188a <_fflush_r+0x102>
   218b0:	2000      	movs	r0, #0
   218b2:	b003      	add	sp, #12
   218b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   218b6:	46c0      	nop			(mov r8, r8)
   218b8:	00023b18 	.word	0x00023b18
   218bc:	00023b38 	.word	0x00023b38
   218c0:	00023b58 	.word	0x00023b58

000218c4 <fflush>:
   218c4:	b500      	push	{lr}
   218c6:	4601      	mov	r1, r0
   218c8:	b081      	sub	sp, #4
   218ca:	b928      	cbnz	r0, 218d8 <fflush+0x14>
   218cc:	4b05      	ldr	r3, [pc, #20]	(218e4 <fflush+0x20>)
   218ce:	4906      	ldr	r1, [pc, #24]	(218e8 <fflush+0x24>)
   218d0:	6818      	ldr	r0, [r3, #0]
   218d2:	f000 fa1b 	bl	21d0c <_fwalk_reent>
   218d6:	e003      	b.n	218e0 <fflush+0x1c>
   218d8:	4b04      	ldr	r3, [pc, #16]	(218ec <fflush+0x28>)
   218da:	6818      	ldr	r0, [r3, #0]
   218dc:	f7ff ff54 	bl	21788 <_fflush_r>
   218e0:	b001      	add	sp, #4
   218e2:	bd00      	pop	{pc}
   218e4:	00023b10 	.word	0x00023b10
   218e8:	00021789 	.word	0x00021789
   218ec:	20000044 	.word	0x20000044

000218f0 <__sfp_lock_acquire>:
   218f0:	4770      	bx	lr
   218f2:	46c0      	nop			(mov r8, r8)

000218f4 <__sfp_lock_release>:
   218f4:	4770      	bx	lr
   218f6:	46c0      	nop			(mov r8, r8)

000218f8 <__sinit_lock_acquire>:
   218f8:	4770      	bx	lr
   218fa:	46c0      	nop			(mov r8, r8)

000218fc <__sinit_lock_release>:
   218fc:	4770      	bx	lr
   218fe:	46c0      	nop			(mov r8, r8)

00021900 <__fp_lock>:
   21900:	2000      	movs	r0, #0
   21902:	4770      	bx	lr

00021904 <__fp_unlock>:
   21904:	2000      	movs	r0, #0
   21906:	4770      	bx	lr

00021908 <__fp_unlock_all>:
   21908:	b500      	push	{lr}
   2190a:	4b04      	ldr	r3, [pc, #16]	(2191c <__fp_unlock_all+0x14>)
   2190c:	b081      	sub	sp, #4
   2190e:	6818      	ldr	r0, [r3, #0]
   21910:	4903      	ldr	r1, [pc, #12]	(21920 <__fp_unlock_all+0x18>)
   21912:	f000 fa23 	bl	21d5c <_fwalk>
   21916:	b001      	add	sp, #4
   21918:	bd00      	pop	{pc}
   2191a:	46c0      	nop			(mov r8, r8)
   2191c:	20000044 	.word	0x20000044
   21920:	00021905 	.word	0x00021905

00021924 <__fp_lock_all>:
   21924:	b500      	push	{lr}
   21926:	4b04      	ldr	r3, [pc, #16]	(21938 <__fp_lock_all+0x14>)
   21928:	b081      	sub	sp, #4
   2192a:	6818      	ldr	r0, [r3, #0]
   2192c:	4903      	ldr	r1, [pc, #12]	(2193c <__fp_lock_all+0x18>)
   2192e:	f000 fa15 	bl	21d5c <_fwalk>
   21932:	b001      	add	sp, #4
   21934:	bd00      	pop	{pc}
   21936:	46c0      	nop			(mov r8, r8)
   21938:	20000044 	.word	0x20000044
   2193c:	00021901 	.word	0x00021901

00021940 <_cleanup_r>:
   21940:	b500      	push	{lr}
   21942:	4903      	ldr	r1, [pc, #12]	(21950 <_cleanup_r+0x10>)
   21944:	b081      	sub	sp, #4
   21946:	f000 fa09 	bl	21d5c <_fwalk>
   2194a:	b001      	add	sp, #4
   2194c:	bd00      	pop	{pc}
   2194e:	46c0      	nop			(mov r8, r8)
   21950:	00021ff5 	.word	0x00021ff5

00021954 <_cleanup>:
   21954:	b500      	push	{lr}
   21956:	4b04      	ldr	r3, [pc, #16]	(21968 <_cleanup+0x14>)
   21958:	b081      	sub	sp, #4
   2195a:	6818      	ldr	r0, [r3, #0]
   2195c:	4903      	ldr	r1, [pc, #12]	(2196c <_cleanup+0x18>)
   2195e:	f000 f9fd 	bl	21d5c <_fwalk>
   21962:	b001      	add	sp, #4
   21964:	bd00      	pop	{pc}
   21966:	46c0      	nop			(mov r8, r8)
   21968:	00023b10 	.word	0x00023b10
   2196c:	00021ff5 	.word	0x00021ff5

00021970 <std>:
   21970:	2300      	movs	r3, #0
   21972:	6003      	str	r3, [r0, #0]
   21974:	6043      	str	r3, [r0, #4]
   21976:	6083      	str	r3, [r0, #8]
   21978:	8181      	strh	r1, [r0, #12]
   2197a:	6643      	str	r3, [r0, #100]
   2197c:	81c2      	strh	r2, [r0, #14]
   2197e:	6103      	str	r3, [r0, #16]
   21980:	6143      	str	r3, [r0, #20]
   21982:	6183      	str	r3, [r0, #24]
   21984:	b510      	push	{r4, lr}
   21986:	2100      	movs	r1, #0
   21988:	4604      	mov	r4, r0
   2198a:	2208      	movs	r2, #8
   2198c:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   21990:	f7ff fa3e 	bl	20e10 <memset>
   21994:	4b04      	ldr	r3, [pc, #16]	(219a8 <std+0x38>)
   21996:	6224      	str	r4, [r4, #32]
   21998:	6263      	str	r3, [r4, #36]
   2199a:	4b04      	ldr	r3, [pc, #16]	(219ac <std+0x3c>)
   2199c:	62a3      	str	r3, [r4, #40]
   2199e:	4b04      	ldr	r3, [pc, #16]	(219b0 <std+0x40>)
   219a0:	62e3      	str	r3, [r4, #44]
   219a2:	4b04      	ldr	r3, [pc, #16]	(219b4 <std+0x44>)
   219a4:	6323      	str	r3, [r4, #48]
   219a6:	bd10      	pop	{r4, pc}
   219a8:	00021ef5 	.word	0x00021ef5
   219ac:	00021eb5 	.word	0x00021eb5
   219b0:	00021e89 	.word	0x00021e89
   219b4:	00021e79 	.word	0x00021e79

000219b8 <__sfmoreglue>:
   219b8:	2368      	movs	r3, #104
   219ba:	b570      	push	{r4, r5, r6, lr}
   219bc:	fb03 f601 	mul.w	r6, r3, r1
   219c0:	460d      	mov	r5, r1
   219c2:	f106 010c 	add.w	r1, r6, #12	; 0xc
   219c6:	f7fe ff9f 	bl	20908 <_malloc_r>
   219ca:	4604      	mov	r4, r0
   219cc:	b148      	cbz	r0, 219e2 <__sfmoreglue+0x2a>
   219ce:	f100 000c 	add.w	r0, r0, #12	; 0xc
   219d2:	2300      	movs	r3, #0
   219d4:	6023      	str	r3, [r4, #0]
   219d6:	6065      	str	r5, [r4, #4]
   219d8:	60a0      	str	r0, [r4, #8]
   219da:	2100      	movs	r1, #0
   219dc:	4632      	mov	r2, r6
   219de:	f7ff fa17 	bl	20e10 <memset>
   219e2:	4620      	mov	r0, r4
   219e4:	bd70      	pop	{r4, r5, r6, pc}
   219e6:	46c0      	nop			(mov r8, r8)

000219e8 <__sfp>:
   219e8:	4b1e      	ldr	r3, [pc, #120]	(21a64 <__sfp+0x7c>)
   219ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   219ec:	681c      	ldr	r4, [r3, #0]
   219ee:	b081      	sub	sp, #4
   219f0:	69a3      	ldr	r3, [r4, #24]
   219f2:	4607      	mov	r7, r0
   219f4:	b913      	cbnz	r3, 219fc <__sfp+0x14>
   219f6:	4620      	mov	r0, r4
   219f8:	f000 f836 	bl	21a68 <__sinit>
   219fc:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
   21a00:	68b4      	ldr	r4, [r6, #8]
   21a02:	6873      	ldr	r3, [r6, #4]
   21a04:	e003      	b.n	21a0e <__sfp+0x26>
   21a06:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   21a0a:	b18d      	cbz	r5, 21a30 <__sfp+0x48>
   21a0c:	3468      	adds	r4, #104
   21a0e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   21a12:	d5f8      	bpl.n	21a06 <__sfp+0x1e>
   21a14:	6833      	ldr	r3, [r6, #0]
   21a16:	b92b      	cbnz	r3, 21a24 <__sfp+0x3c>
   21a18:	4638      	mov	r0, r7
   21a1a:	2104      	movs	r1, #4
   21a1c:	f7ff ffcc 	bl	219b8 <__sfmoreglue>
   21a20:	6030      	str	r0, [r6, #0]
   21a22:	b108      	cbz	r0, 21a28 <__sfp+0x40>
   21a24:	6836      	ldr	r6, [r6, #0]
   21a26:	e7eb      	b.n	21a00 <__sfp+0x18>
   21a28:	230c      	movs	r3, #12
   21a2a:	60fb      	str	r3, [r7, #12]
   21a2c:	2400      	movs	r4, #0
   21a2e:	e016      	b.n	21a5e <__sfp+0x76>
   21a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21a34:	81e3      	strh	r3, [r4, #14]
   21a36:	f04f 0301 	mov.w	r3, #1	; 0x1
   21a3a:	81a3      	strh	r3, [r4, #12]
   21a3c:	6665      	str	r5, [r4, #100]
   21a3e:	6025      	str	r5, [r4, #0]
   21a40:	60a5      	str	r5, [r4, #8]
   21a42:	6065      	str	r5, [r4, #4]
   21a44:	6125      	str	r5, [r4, #16]
   21a46:	6165      	str	r5, [r4, #20]
   21a48:	61a5      	str	r5, [r4, #24]
   21a4a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21a4e:	2100      	movs	r1, #0
   21a50:	2208      	movs	r2, #8
   21a52:	f7ff f9dd 	bl	20e10 <memset>
   21a56:	6365      	str	r5, [r4, #52]
   21a58:	63a5      	str	r5, [r4, #56]
   21a5a:	64a5      	str	r5, [r4, #72]
   21a5c:	64e5      	str	r5, [r4, #76]
   21a5e:	4620      	mov	r0, r4
   21a60:	b001      	add	sp, #4
   21a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21a64:	00023b10 	.word	0x00023b10

00021a68 <__sinit>:
   21a68:	6982      	ldr	r2, [r0, #24]
   21a6a:	b510      	push	{r4, lr}
   21a6c:	4604      	mov	r4, r0
   21a6e:	bb32      	cbnz	r2, 21abe <__sinit+0x56>
   21a70:	4b13      	ldr	r3, [pc, #76]	(21ac0 <__sinit+0x58>)
   21a72:	f8c0 20d8 	str.w	r2, [r0, #216]
   21a76:	6283      	str	r3, [r0, #40]
   21a78:	2301      	movs	r3, #1
   21a7a:	6183      	str	r3, [r0, #24]
   21a7c:	f8c0 20dc 	str.w	r2, [r0, #220]
   21a80:	f8c0 20e0 	str.w	r2, [r0, #224]
   21a84:	f7ff ffb0 	bl	219e8 <__sfp>
   21a88:	6020      	str	r0, [r4, #0]
   21a8a:	4620      	mov	r0, r4
   21a8c:	f7ff ffac 	bl	219e8 <__sfp>
   21a90:	6060      	str	r0, [r4, #4]
   21a92:	4620      	mov	r0, r4
   21a94:	f7ff ffa8 	bl	219e8 <__sfp>
   21a98:	2104      	movs	r1, #4
   21a9a:	60a0      	str	r0, [r4, #8]
   21a9c:	2200      	movs	r2, #0
   21a9e:	6820      	ldr	r0, [r4, #0]
   21aa0:	4623      	mov	r3, r4
   21aa2:	f7ff ff65 	bl	21970 <std>
   21aa6:	6860      	ldr	r0, [r4, #4]
   21aa8:	2109      	movs	r1, #9
   21aaa:	2201      	movs	r2, #1
   21aac:	4623      	mov	r3, r4
   21aae:	f7ff ff5f 	bl	21970 <std>
   21ab2:	68a0      	ldr	r0, [r4, #8]
   21ab4:	2112      	movs	r1, #18
   21ab6:	2202      	movs	r2, #2
   21ab8:	4623      	mov	r3, r4
   21aba:	f7ff ff59 	bl	21970 <std>
   21abe:	bd10      	pop	{r4, pc}
   21ac0:	00021941 	.word	0x00021941

00021ac4 <_malloc_trim_r>:
   21ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ac6:	4f28      	ldr	r7, [pc, #160]	(21b68 <_malloc_trim_r+0xa4>)
   21ac8:	b081      	sub	sp, #4
   21aca:	460c      	mov	r4, r1
   21acc:	4605      	mov	r5, r0
   21ace:	f7ff f9a7 	bl	20e20 <__malloc_lock>
   21ad2:	68bb      	ldr	r3, [r7, #8]
   21ad4:	685b      	ldr	r3, [r3, #4]
   21ad6:	f023 0603 	bic.w	r6, r3, #3	; 0x3
   21ada:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   21ade:	330f      	adds	r3, #15
   21ae0:	1b1b      	subs	r3, r3, r4
   21ae2:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   21ae6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
   21aea:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   21aee:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   21af2:	db23      	blt.n	21b3c <_malloc_trim_r+0x78>
   21af4:	2100      	movs	r1, #0
   21af6:	4628      	mov	r0, r5
   21af8:	f7ff fc1e 	bl	21338 <_sbrk_r>
   21afc:	68bb      	ldr	r3, [r7, #8]
   21afe:	199b      	adds	r3, r3, r6
   21b00:	4298      	cmp	r0, r3
   21b02:	d11b      	bne.n	21b3c <_malloc_trim_r+0x78>
   21b04:	f1c4 0100 	rsb	r1, r4, #0	; 0x0
   21b08:	4628      	mov	r0, r5
   21b0a:	f7ff fc15 	bl	21338 <_sbrk_r>
   21b0e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21b12:	d118      	bne.n	21b46 <_malloc_trim_r+0x82>
   21b14:	2100      	movs	r1, #0
   21b16:	4628      	mov	r0, r5
   21b18:	f7ff fc0e 	bl	21338 <_sbrk_r>
   21b1c:	f8d7 c008 	ldr.w	ip, [r7, #8]
   21b20:	ebcc 0100 	rsb	r1, ip, r0
   21b24:	290f      	cmp	r1, #15
   21b26:	dd09      	ble.n	21b3c <_malloc_trim_r+0x78>
   21b28:	4b10      	ldr	r3, [pc, #64]	(21b6c <_malloc_trim_r+0xa8>)
   21b2a:	4a11      	ldr	r2, [pc, #68]	(21b70 <_malloc_trim_r+0xac>)
   21b2c:	681b      	ldr	r3, [r3, #0]
   21b2e:	ebc3 0300 	rsb	r3, r3, r0
   21b32:	6013      	str	r3, [r2, #0]
   21b34:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   21b38:	f8cc 3004 	str.w	r3, [ip, #4]
   21b3c:	4628      	mov	r0, r5
   21b3e:	f7ff f971 	bl	20e24 <__malloc_unlock>
   21b42:	2000      	movs	r0, #0
   21b44:	e00d      	b.n	21b62 <_malloc_trim_r+0x9e>
   21b46:	68ba      	ldr	r2, [r7, #8]
   21b48:	ebc4 0306 	rsb	r3, r4, r6
   21b4c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21b50:	6053      	str	r3, [r2, #4]
   21b52:	4a07      	ldr	r2, [pc, #28]	(21b70 <_malloc_trim_r+0xac>)
   21b54:	4628      	mov	r0, r5
   21b56:	6813      	ldr	r3, [r2, #0]
   21b58:	1b1b      	subs	r3, r3, r4
   21b5a:	6013      	str	r3, [r2, #0]
   21b5c:	f7ff f962 	bl	20e24 <__malloc_unlock>
   21b60:	2001      	movs	r0, #1
   21b62:	b001      	add	sp, #4
   21b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b66:	46c0      	nop			(mov r8, r8)
   21b68:	20000138 	.word	0x20000138
   21b6c:	20000544 	.word	0x20000544
   21b70:	20000eb0 	.word	0x20000eb0

00021b74 <_free_r>:
   21b74:	b570      	push	{r4, r5, r6, lr}
   21b76:	4606      	mov	r6, r0
   21b78:	460c      	mov	r4, r1
   21b7a:	2900      	cmp	r1, #0
   21b7c:	f000 80bd 	beq.w	21cfa <_free_r+0x186>
   21b80:	f7ff f94e 	bl	20e20 <__malloc_lock>
   21b84:	f1a4 0c08 	sub.w	ip, r4, #8	; 0x8
   21b88:	f8dc 3004 	ldr.w	r3, [ip, #4]
   21b8c:	4d5b      	ldr	r5, [pc, #364]	(21cfc <_free_r+0x188>)
   21b8e:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   21b92:	eb0c 0001 	add.w	r0, ip, r1
   21b96:	6842      	ldr	r2, [r0, #4]
   21b98:	f003 0301 	and.w	r3, r3, #1	; 0x1
   21b9c:	f022 0e03 	bic.w	lr, r2, #3	; 0x3
   21ba0:	68aa      	ldr	r2, [r5, #8]
   21ba2:	4290      	cmp	r0, r2
   21ba4:	d11d      	bne.n	21be2 <_free_r+0x6e>
   21ba6:	4471      	add	r1, lr
   21ba8:	b953      	cbnz	r3, 21bc0 <_free_r+0x4c>
   21baa:	f854 3c08 	ldr.w	r3, [r4, #-8]
   21bae:	ebc3 0c0c 	rsb	ip, r3, ip
   21bb2:	f8dc 200c 	ldr.w	r2, [ip, #12]
   21bb6:	18c9      	adds	r1, r1, r3
   21bb8:	f8dc 3008 	ldr.w	r3, [ip, #8]
   21bbc:	60da      	str	r2, [r3, #12]
   21bbe:	6093      	str	r3, [r2, #8]
   21bc0:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   21bc4:	f8cc 3004 	str.w	r3, [ip, #4]
   21bc8:	4b4d      	ldr	r3, [pc, #308]	(21d00 <_free_r+0x18c>)
   21bca:	f8c5 c008 	str.w	ip, [r5, #8]
   21bce:	681b      	ldr	r3, [r3, #0]
   21bd0:	4299      	cmp	r1, r3
   21bd2:	f0c0 808f 	bcc.w	21cf4 <_free_r+0x180>
   21bd6:	4b4b      	ldr	r3, [pc, #300]	(21d04 <_free_r+0x190>)
   21bd8:	4630      	mov	r0, r6
   21bda:	6819      	ldr	r1, [r3, #0]
   21bdc:	f7ff ff72 	bl	21ac4 <_malloc_trim_r>
   21be0:	e088      	b.n	21cf4 <_free_r+0x180>
   21be2:	f8c0 e004 	str.w	lr, [r0, #4]
   21be6:	b983      	cbnz	r3, 21c0a <_free_r+0x96>
   21be8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   21bec:	ebc3 0c0c 	rsb	ip, r3, ip
   21bf0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   21bf4:	18c9      	adds	r1, r1, r3
   21bf6:	f105 0308 	add.w	r3, r5, #8	; 0x8
   21bfa:	429a      	cmp	r2, r3
   21bfc:	d101      	bne.n	21c02 <_free_r+0x8e>
   21bfe:	2401      	movs	r4, #1
   21c00:	e004      	b.n	21c0c <_free_r+0x98>
   21c02:	f8dc 300c 	ldr.w	r3, [ip, #12]
   21c06:	60d3      	str	r3, [r2, #12]
   21c08:	609a      	str	r2, [r3, #8]
   21c0a:	2400      	movs	r4, #0
   21c0c:	eb00 030e 	add.w	r3, r0, lr
   21c10:	685b      	ldr	r3, [r3, #4]
   21c12:	f013 0f01 	tst.w	r3, #1	; 0x1
   21c16:	d113      	bne.n	21c40 <_free_r+0xcc>
   21c18:	4471      	add	r1, lr
   21c1a:	b96c      	cbnz	r4, 21c38 <_free_r+0xc4>
   21c1c:	6882      	ldr	r2, [r0, #8]
   21c1e:	4b3a      	ldr	r3, [pc, #232]	(21d08 <_free_r+0x194>)
   21c20:	429a      	cmp	r2, r3
   21c22:	d109      	bne.n	21c38 <_free_r+0xc4>
   21c24:	f8c2 c00c 	str.w	ip, [r2, #12]
   21c28:	f8c2 c008 	str.w	ip, [r2, #8]
   21c2c:	f8cc 200c 	str.w	r2, [ip, #12]
   21c30:	f8cc 2008 	str.w	r2, [ip, #8]
   21c34:	2401      	movs	r4, #1
   21c36:	e003      	b.n	21c40 <_free_r+0xcc>
   21c38:	68c2      	ldr	r2, [r0, #12]
   21c3a:	6883      	ldr	r3, [r0, #8]
   21c3c:	60da      	str	r2, [r3, #12]
   21c3e:	6093      	str	r3, [r2, #8]
   21c40:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   21c44:	f8cc 3004 	str.w	r3, [ip, #4]
   21c48:	f84c 1001 	str.w	r1, [ip, r1]
   21c4c:	2c00      	cmp	r4, #0
   21c4e:	d151      	bne.n	21cf4 <_free_r+0x180>
   21c50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   21c54:	d212      	bcs.n	21c7c <_free_r+0x108>
   21c56:	08c9      	lsrs	r1, r1, #3
   21c58:	108b      	asrs	r3, r1, #2
   21c5a:	2201      	movs	r2, #1
   21c5c:	409a      	lsls	r2, r3
   21c5e:	686b      	ldr	r3, [r5, #4]
   21c60:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   21c64:	4313      	orrs	r3, r2
   21c66:	606b      	str	r3, [r5, #4]
   21c68:	688b      	ldr	r3, [r1, #8]
   21c6a:	f8cc 100c 	str.w	r1, [ip, #12]
   21c6e:	f8cc 3008 	str.w	r3, [ip, #8]
   21c72:	f8c3 c00c 	str.w	ip, [r3, #12]
   21c76:	f8c1 c008 	str.w	ip, [r1, #8]
   21c7a:	e03b      	b.n	21cf4 <_free_r+0x180>
   21c7c:	0a4a      	lsrs	r2, r1, #9
   21c7e:	2a04      	cmp	r2, #4
   21c80:	d802      	bhi.n	21c88 <_free_r+0x114>
   21c82:	098b      	lsrs	r3, r1, #6
   21c84:	3338      	adds	r3, #56
   21c86:	e017      	b.n	21cb8 <_free_r+0x144>
   21c88:	2a14      	cmp	r2, #20
   21c8a:	bf98      	it	ls
   21c8c:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   21c90:	d912      	bls.n	21cb8 <_free_r+0x144>
   21c92:	2a54      	cmp	r2, #84
   21c94:	d802      	bhi.n	21c9c <_free_r+0x128>
   21c96:	0b0b      	lsrs	r3, r1, #12
   21c98:	336e      	adds	r3, #110
   21c9a:	e00d      	b.n	21cb8 <_free_r+0x144>
   21c9c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   21ca0:	d802      	bhi.n	21ca8 <_free_r+0x134>
   21ca2:	0bcb      	lsrs	r3, r1, #15
   21ca4:	3377      	adds	r3, #119
   21ca6:	e007      	b.n	21cb8 <_free_r+0x144>
   21ca8:	f240 5354 	movw	r3, #1364	; 0x554
   21cac:	429a      	cmp	r2, r3
   21cae:	d901      	bls.n	21cb4 <_free_r+0x140>
   21cb0:	237e      	movs	r3, #126
   21cb2:	e001      	b.n	21cb8 <_free_r+0x144>
   21cb4:	0c8b      	lsrs	r3, r1, #18
   21cb6:	337c      	adds	r3, #124
   21cb8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   21cbc:	6890      	ldr	r0, [r2, #8]
   21cbe:	4290      	cmp	r0, r2
   21cc0:	d10a      	bne.n	21cd8 <_free_r+0x164>
   21cc2:	109b      	asrs	r3, r3, #2
   21cc4:	2201      	movs	r2, #1
   21cc6:	409a      	lsls	r2, r3
   21cc8:	686b      	ldr	r3, [r5, #4]
   21cca:	4313      	orrs	r3, r2
   21ccc:	606b      	str	r3, [r5, #4]
   21cce:	4603      	mov	r3, r0
   21cd0:	e008      	b.n	21ce4 <_free_r+0x170>
   21cd2:	6880      	ldr	r0, [r0, #8]
   21cd4:	4290      	cmp	r0, r2
   21cd6:	d004      	beq.n	21ce2 <_free_r+0x16e>
   21cd8:	6843      	ldr	r3, [r0, #4]
   21cda:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   21cde:	4299      	cmp	r1, r3
   21ce0:	d3f7      	bcc.n	21cd2 <_free_r+0x15e>
   21ce2:	68c3      	ldr	r3, [r0, #12]
   21ce4:	f8cc 300c 	str.w	r3, [ip, #12]
   21ce8:	f8cc 0008 	str.w	r0, [ip, #8]
   21cec:	f8c0 c00c 	str.w	ip, [r0, #12]
   21cf0:	f8c3 c008 	str.w	ip, [r3, #8]
   21cf4:	4630      	mov	r0, r6
   21cf6:	f7ff f895 	bl	20e24 <__malloc_unlock>
   21cfa:	bd70      	pop	{r4, r5, r6, pc}
   21cfc:	20000138 	.word	0x20000138
   21d00:	20000540 	.word	0x20000540
   21d04:	20000ea4 	.word	0x20000ea4
   21d08:	20000140 	.word	0x20000140

00021d0c <_fwalk_reent>:
   21d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d0e:	b083      	sub	sp, #12
   21d10:	9001      	str	r0, [sp, #4]
   21d12:	9100      	str	r1, [sp, #0]
   21d14:	f7ff fdec 	bl	218f0 <__sfp_lock_acquire>
   21d18:	9b01      	ldr	r3, [sp, #4]
   21d1a:	2700      	movs	r7, #0
   21d1c:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
   21d20:	e014      	b.n	21d4c <_fwalk_reent+0x40>
   21d22:	68ac      	ldr	r4, [r5, #8]
   21d24:	686e      	ldr	r6, [r5, #4]
   21d26:	e00d      	b.n	21d44 <_fwalk_reent+0x38>
   21d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21d2c:	b14b      	cbz	r3, 21d42 <_fwalk_reent+0x36>
   21d2e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21d36:	d004      	beq.n	21d42 <_fwalk_reent+0x36>
   21d38:	9801      	ldr	r0, [sp, #4]
   21d3a:	4621      	mov	r1, r4
   21d3c:	9b00      	ldr	r3, [sp, #0]
   21d3e:	4798      	blx	r3
   21d40:	4307      	orrs	r7, r0
   21d42:	3468      	adds	r4, #104
   21d44:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   21d48:	d5ee      	bpl.n	21d28 <_fwalk_reent+0x1c>
   21d4a:	682d      	ldr	r5, [r5, #0]
   21d4c:	2d00      	cmp	r5, #0
   21d4e:	d1e8      	bne.n	21d22 <_fwalk_reent+0x16>
   21d50:	f7ff fdd0 	bl	218f4 <__sfp_lock_release>
   21d54:	4638      	mov	r0, r7
   21d56:	b003      	add	sp, #12
   21d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d5a:	46c0      	nop			(mov r8, r8)

00021d5c <_fwalk>:
   21d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d5e:	4604      	mov	r4, r0
   21d60:	b083      	sub	sp, #12
   21d62:	9101      	str	r1, [sp, #4]
   21d64:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   21d68:	f7ff fdc2 	bl	218f0 <__sfp_lock_acquire>
   21d6c:	2700      	movs	r7, #0
   21d6e:	e013      	b.n	21d98 <_fwalk+0x3c>
   21d70:	68ac      	ldr	r4, [r5, #8]
   21d72:	686e      	ldr	r6, [r5, #4]
   21d74:	e00c      	b.n	21d90 <_fwalk+0x34>
   21d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21d7a:	b143      	cbz	r3, 21d8e <_fwalk+0x32>
   21d7c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   21d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21d84:	d003      	beq.n	21d8e <_fwalk+0x32>
   21d86:	4620      	mov	r0, r4
   21d88:	9b01      	ldr	r3, [sp, #4]
   21d8a:	4798      	blx	r3
   21d8c:	4307      	orrs	r7, r0
   21d8e:	3468      	adds	r4, #104
   21d90:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   21d94:	d5ef      	bpl.n	21d76 <_fwalk+0x1a>
   21d96:	682d      	ldr	r5, [r5, #0]
   21d98:	2d00      	cmp	r5, #0
   21d9a:	d1e9      	bne.n	21d70 <_fwalk+0x14>
   21d9c:	f7ff fdaa 	bl	218f4 <__sfp_lock_release>
   21da0:	4638      	mov	r0, r7
   21da2:	b003      	add	sp, #12
   21da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21da6:	46c0      	nop			(mov r8, r8)

00021da8 <__smakebuf_r>:
   21da8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21daa:	898b      	ldrh	r3, [r1, #12]
   21dac:	b091      	sub	sp, #68
   21dae:	f013 0f02 	tst.w	r3, #2	; 0x2
   21db2:	4606      	mov	r6, r0
   21db4:	460c      	mov	r4, r1
   21db6:	d13d      	bne.n	21e34 <__smakebuf_r+0x8c>
   21db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21dbc:	2900      	cmp	r1, #0
   21dbe:	db04      	blt.n	21dca <__smakebuf_r+0x22>
   21dc0:	aa01      	add	r2, sp, #4
   21dc2:	f000 f923 	bl	2200c <_fstat_r>
   21dc6:	2800      	cmp	r0, #0
   21dc8:	da0b      	bge.n	21de2 <__smakebuf_r+0x3a>
   21dca:	89a3      	ldrh	r3, [r4, #12]
   21dcc:	f013 0f80 	tst.w	r3, #128	; 0x80
   21dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   21dd4:	bf14      	ite	ne
   21dd6:	2540      	movne	r5, #64
   21dd8:	f44f 7580 	moveq.w	r5, #256	; 0x100
   21ddc:	81a3      	strh	r3, [r4, #12]
   21dde:	2700      	movs	r7, #0
   21de0:	e01c      	b.n	21e1c <__smakebuf_r+0x74>
   21de2:	9b02      	ldr	r3, [sp, #8]
   21de4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   21de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   21dec:	bf14      	ite	ne
   21dee:	2700      	movne	r7, #0
   21df0:	2701      	moveq	r7, #1
   21df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21df6:	d10b      	bne.n	21e10 <__smakebuf_r+0x68>
   21df8:	6ae2      	ldr	r2, [r4, #44]
   21dfa:	4b1d      	ldr	r3, [pc, #116]	(21e70 <__smakebuf_r+0xc8>)
   21dfc:	429a      	cmp	r2, r3
   21dfe:	d107      	bne.n	21e10 <__smakebuf_r+0x68>
   21e00:	89a3      	ldrh	r3, [r4, #12]
   21e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   21e06:	81a3      	strh	r3, [r4, #12]
   21e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21e0c:	6523      	str	r3, [r4, #80]
   21e0e:	e003      	b.n	21e18 <__smakebuf_r+0x70>
   21e10:	89a3      	ldrh	r3, [r4, #12]
   21e12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   21e16:	81a3      	strh	r3, [r4, #12]
   21e18:	f44f 7580 	mov.w	r5, #256	; 0x100
   21e1c:	4630      	mov	r0, r6
   21e1e:	4629      	mov	r1, r5
   21e20:	f7fe fd72 	bl	20908 <_malloc_r>
   21e24:	b968      	cbnz	r0, 21e42 <__smakebuf_r+0x9a>
   21e26:	89a3      	ldrh	r3, [r4, #12]
   21e28:	f413 7f00 	tst.w	r3, #512	; 0x200
   21e2c:	d11d      	bne.n	21e6a <__smakebuf_r+0xc2>
   21e2e:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   21e32:	81a3      	strh	r3, [r4, #12]
   21e34:	f104 0347 	add.w	r3, r4, #71	; 0x47
   21e38:	6023      	str	r3, [r4, #0]
   21e3a:	6123      	str	r3, [r4, #16]
   21e3c:	2301      	movs	r3, #1
   21e3e:	6163      	str	r3, [r4, #20]
   21e40:	e013      	b.n	21e6a <__smakebuf_r+0xc2>
   21e42:	4b0c      	ldr	r3, [pc, #48]	(21e74 <__smakebuf_r+0xcc>)
   21e44:	6020      	str	r0, [r4, #0]
   21e46:	62b3      	str	r3, [r6, #40]
   21e48:	89a3      	ldrh	r3, [r4, #12]
   21e4a:	6120      	str	r0, [r4, #16]
   21e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21e50:	81a3      	strh	r3, [r4, #12]
   21e52:	6165      	str	r5, [r4, #20]
   21e54:	b14f      	cbz	r7, 21e6a <__smakebuf_r+0xc2>
   21e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21e5a:	4630      	mov	r0, r6
   21e5c:	f000 f8ea 	bl	22034 <_isatty_r>
   21e60:	b118      	cbz	r0, 21e6a <__smakebuf_r+0xc2>
   21e62:	89a3      	ldrh	r3, [r4, #12]
   21e64:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   21e68:	81a3      	strh	r3, [r4, #12]
   21e6a:	b011      	add	sp, #68
   21e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21e6e:	46c0      	nop			(mov r8, r8)
   21e70:	00021e89 	.word	0x00021e89
   21e74:	00021941 	.word	0x00021941

00021e78 <__sclose>:
   21e78:	b500      	push	{lr}
   21e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21e7e:	b081      	sub	sp, #4
   21e80:	f000 f84c 	bl	21f1c <_close_r>
   21e84:	b001      	add	sp, #4
   21e86:	bd00      	pop	{pc}

00021e88 <__sseek>:
   21e88:	b510      	push	{r4, lr}
   21e8a:	460c      	mov	r4, r1
   21e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21e90:	f000 f8e4 	bl	2205c <_lseek_r>
   21e94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21e98:	89a3      	ldrh	r3, [r4, #12]
   21e9a:	d105      	bne.n	21ea8 <__sseek+0x20>
   21e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21ea0:	041b      	lsls	r3, r3, #16
   21ea2:	0c1b      	lsrs	r3, r3, #16
   21ea4:	81a3      	strh	r3, [r4, #12]
   21ea6:	e003      	b.n	21eb0 <__sseek+0x28>
   21ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   21eac:	81a3      	strh	r3, [r4, #12]
   21eae:	6560      	str	r0, [r4, #84]
   21eb0:	bd10      	pop	{r4, pc}
   21eb2:	46c0      	nop			(mov r8, r8)

00021eb4 <__swrite>:
   21eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21eb6:	461f      	mov	r7, r3
   21eb8:	898b      	ldrh	r3, [r1, #12]
   21eba:	b081      	sub	sp, #4
   21ebc:	f413 7f80 	tst.w	r3, #256	; 0x100
   21ec0:	4605      	mov	r5, r0
   21ec2:	460c      	mov	r4, r1
   21ec4:	4616      	mov	r6, r2
   21ec6:	d005      	beq.n	21ed4 <__swrite+0x20>
   21ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21ecc:	2200      	movs	r2, #0
   21ece:	2302      	movs	r3, #2
   21ed0:	f000 f8c4 	bl	2205c <_lseek_r>
   21ed4:	89a3      	ldrh	r3, [r4, #12]
   21ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21ede:	041b      	lsls	r3, r3, #16
   21ee0:	0c1b      	lsrs	r3, r3, #16
   21ee2:	81a3      	strh	r3, [r4, #12]
   21ee4:	4628      	mov	r0, r5
   21ee6:	4632      	mov	r2, r6
   21ee8:	463b      	mov	r3, r7
   21eea:	f7ff fbc5 	bl	21678 <_write_r>
   21eee:	b001      	add	sp, #4
   21ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ef2:	46c0      	nop			(mov r8, r8)

00021ef4 <__sread>:
   21ef4:	b510      	push	{r4, lr}
   21ef6:	460c      	mov	r4, r1
   21ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   21efc:	f000 f8c4 	bl	22088 <_read_r>
   21f00:	2800      	cmp	r0, #0
   21f02:	db03      	blt.n	21f0c <__sread+0x18>
   21f04:	6d63      	ldr	r3, [r4, #84]
   21f06:	181b      	adds	r3, r3, r0
   21f08:	6563      	str	r3, [r4, #84]
   21f0a:	e005      	b.n	21f18 <__sread+0x24>
   21f0c:	89a3      	ldrh	r3, [r4, #12]
   21f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   21f12:	041b      	lsls	r3, r3, #16
   21f14:	0c1b      	lsrs	r3, r3, #16
   21f16:	81a3      	strh	r3, [r4, #12]
   21f18:	bd10      	pop	{r4, pc}
   21f1a:	46c0      	nop			(mov r8, r8)

00021f1c <_close_r>:
   21f1c:	b530      	push	{r4, r5, lr}
   21f1e:	4c08      	ldr	r4, [pc, #32]	(21f40 <_close_r+0x24>)
   21f20:	2300      	movs	r3, #0
   21f22:	b081      	sub	sp, #4
   21f24:	4605      	mov	r5, r0
   21f26:	4608      	mov	r0, r1
   21f28:	6023      	str	r3, [r4, #0]
   21f2a:	f7f5 fcbf 	bl	178ac <_close>
   21f2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21f32:	d102      	bne.n	21f3a <_close_r+0x1e>
   21f34:	6823      	ldr	r3, [r4, #0]
   21f36:	b103      	cbz	r3, 21f3a <_close_r+0x1e>
   21f38:	60eb      	str	r3, [r5, #12]
   21f3a:	b001      	add	sp, #4
   21f3c:	bd30      	pop	{r4, r5, pc}
   21f3e:	46c0      	nop			(mov r8, r8)
   21f40:	20000688 	.word	0x20000688

00021f44 <_fclose_r>:
   21f44:	b570      	push	{r4, r5, r6, lr}
   21f46:	4605      	mov	r5, r0
   21f48:	460c      	mov	r4, r1
   21f4a:	b1d1      	cbz	r1, 21f82 <_fclose_r+0x3e>
   21f4c:	f7ff fcd0 	bl	218f0 <__sfp_lock_acquire>
   21f50:	b125      	cbz	r5, 21f5c <_fclose_r+0x18>
   21f52:	69ab      	ldr	r3, [r5, #24]
   21f54:	b913      	cbnz	r3, 21f5c <_fclose_r+0x18>
   21f56:	4628      	mov	r0, r5
   21f58:	f7ff fd86 	bl	21a68 <__sinit>
   21f5c:	4b22      	ldr	r3, [pc, #136]	(21fe8 <_fclose_r+0xa4>)
   21f5e:	429c      	cmp	r4, r3
   21f60:	bf08      	it	eq
   21f62:	682c      	ldreq	r4, [r5, #0]
   21f64:	d008      	beq.n	21f78 <_fclose_r+0x34>
   21f66:	4b21      	ldr	r3, [pc, #132]	(21fec <_fclose_r+0xa8>)
   21f68:	429c      	cmp	r4, r3
   21f6a:	bf08      	it	eq
   21f6c:	686c      	ldreq	r4, [r5, #4]
   21f6e:	d003      	beq.n	21f78 <_fclose_r+0x34>
   21f70:	4b1f      	ldr	r3, [pc, #124]	(21ff0 <_fclose_r+0xac>)
   21f72:	429c      	cmp	r4, r3
   21f74:	bf08      	it	eq
   21f76:	68ac      	ldreq	r4, [r5, #8]
   21f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21f7c:	b91b      	cbnz	r3, 21f86 <_fclose_r+0x42>
   21f7e:	f7ff fcb9 	bl	218f4 <__sfp_lock_release>
   21f82:	2600      	movs	r6, #0
   21f84:	e02d      	b.n	21fe2 <_fclose_r+0x9e>
   21f86:	4628      	mov	r0, r5
   21f88:	4621      	mov	r1, r4
   21f8a:	f7ff fbfd 	bl	21788 <_fflush_r>
   21f8e:	6b23      	ldr	r3, [r4, #48]
   21f90:	4606      	mov	r6, r0
   21f92:	b13b      	cbz	r3, 21fa4 <_fclose_r+0x60>
   21f94:	6a21      	ldr	r1, [r4, #32]
   21f96:	4628      	mov	r0, r5
   21f98:	4798      	blx	r3
   21f9a:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   21f9e:	bf28      	it	cs
   21fa0:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
   21fa4:	89a3      	ldrh	r3, [r4, #12]
   21fa6:	f013 0f80 	tst.w	r3, #128	; 0x80
   21faa:	d003      	beq.n	21fb4 <_fclose_r+0x70>
   21fac:	6921      	ldr	r1, [r4, #16]
   21fae:	4628      	mov	r0, r5
   21fb0:	f7ff fde0 	bl	21b74 <_free_r>
   21fb4:	6b61      	ldr	r1, [r4, #52]
   21fb6:	b141      	cbz	r1, 21fca <_fclose_r+0x86>
   21fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   21fbc:	4299      	cmp	r1, r3
   21fbe:	d002      	beq.n	21fc6 <_fclose_r+0x82>
   21fc0:	4628      	mov	r0, r5
   21fc2:	f7ff fdd7 	bl	21b74 <_free_r>
   21fc6:	2300      	movs	r3, #0
   21fc8:	6363      	str	r3, [r4, #52]
   21fca:	6ca1      	ldr	r1, [r4, #72]
   21fcc:	b121      	cbz	r1, 21fd8 <_fclose_r+0x94>
   21fce:	4628      	mov	r0, r5
   21fd0:	f7ff fdd0 	bl	21b74 <_free_r>
   21fd4:	2300      	movs	r3, #0
   21fd6:	64a3      	str	r3, [r4, #72]
   21fd8:	f04f 0300 	mov.w	r3, #0	; 0x0
   21fdc:	81a3      	strh	r3, [r4, #12]
   21fde:	f7ff fc89 	bl	218f4 <__sfp_lock_release>
   21fe2:	4630      	mov	r0, r6
   21fe4:	bd70      	pop	{r4, r5, r6, pc}
   21fe6:	46c0      	nop			(mov r8, r8)
   21fe8:	00023b18 	.word	0x00023b18
   21fec:	00023b38 	.word	0x00023b38
   21ff0:	00023b58 	.word	0x00023b58

00021ff4 <fclose>:
   21ff4:	b500      	push	{lr}
   21ff6:	4b04      	ldr	r3, [pc, #16]	(22008 <fclose+0x14>)
   21ff8:	4601      	mov	r1, r0
   21ffa:	b081      	sub	sp, #4
   21ffc:	6818      	ldr	r0, [r3, #0]
   21ffe:	f7ff ffa1 	bl	21f44 <_fclose_r>
   22002:	b001      	add	sp, #4
   22004:	bd00      	pop	{pc}
   22006:	46c0      	nop			(mov r8, r8)
   22008:	20000044 	.word	0x20000044

0002200c <_fstat_r>:
   2200c:	b530      	push	{r4, r5, lr}
   2200e:	4c08      	ldr	r4, [pc, #32]	(22030 <_fstat_r+0x24>)
   22010:	2300      	movs	r3, #0
   22012:	b081      	sub	sp, #4
   22014:	4605      	mov	r5, r0
   22016:	4608      	mov	r0, r1
   22018:	4611      	mov	r1, r2
   2201a:	6023      	str	r3, [r4, #0]
   2201c:	f7f5 fc74 	bl	17908 <_fstat>
   22020:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22024:	d102      	bne.n	2202c <_fstat_r+0x20>
   22026:	6823      	ldr	r3, [r4, #0]
   22028:	b103      	cbz	r3, 2202c <_fstat_r+0x20>
   2202a:	60eb      	str	r3, [r5, #12]
   2202c:	b001      	add	sp, #4
   2202e:	bd30      	pop	{r4, r5, pc}
   22030:	20000688 	.word	0x20000688

00022034 <_isatty_r>:
   22034:	b530      	push	{r4, r5, lr}
   22036:	4c08      	ldr	r4, [pc, #32]	(22058 <_isatty_r+0x24>)
   22038:	2300      	movs	r3, #0
   2203a:	b081      	sub	sp, #4
   2203c:	4605      	mov	r5, r0
   2203e:	4608      	mov	r0, r1
   22040:	6023      	str	r3, [r4, #0]
   22042:	f7f5 fc7b 	bl	1793c <_isatty>
   22046:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2204a:	d102      	bne.n	22052 <_isatty_r+0x1e>
   2204c:	6823      	ldr	r3, [r4, #0]
   2204e:	b103      	cbz	r3, 22052 <_isatty_r+0x1e>
   22050:	60eb      	str	r3, [r5, #12]
   22052:	b001      	add	sp, #4
   22054:	bd30      	pop	{r4, r5, pc}
   22056:	46c0      	nop			(mov r8, r8)
   22058:	20000688 	.word	0x20000688

0002205c <_lseek_r>:
   2205c:	b530      	push	{r4, r5, lr}
   2205e:	4c09      	ldr	r4, [pc, #36]	(22084 <_lseek_r+0x28>)
   22060:	4605      	mov	r5, r0
   22062:	2000      	movs	r0, #0
   22064:	6020      	str	r0, [r4, #0]
   22066:	b081      	sub	sp, #4
   22068:	4608      	mov	r0, r1
   2206a:	4611      	mov	r1, r2
   2206c:	461a      	mov	r2, r3
   2206e:	f7f5 fc99 	bl	179a4 <_lseek>
   22072:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22076:	d102      	bne.n	2207e <_lseek_r+0x22>
   22078:	6823      	ldr	r3, [r4, #0]
   2207a:	b103      	cbz	r3, 2207e <_lseek_r+0x22>
   2207c:	60eb      	str	r3, [r5, #12]
   2207e:	b001      	add	sp, #4
   22080:	bd30      	pop	{r4, r5, pc}
   22082:	46c0      	nop			(mov r8, r8)
   22084:	20000688 	.word	0x20000688

00022088 <_read_r>:
   22088:	b530      	push	{r4, r5, lr}
   2208a:	4c09      	ldr	r4, [pc, #36]	(220b0 <_read_r+0x28>)
   2208c:	4605      	mov	r5, r0
   2208e:	2000      	movs	r0, #0
   22090:	6020      	str	r0, [r4, #0]
   22092:	b081      	sub	sp, #4
   22094:	4608      	mov	r0, r1
   22096:	4611      	mov	r1, r2
   22098:	461a      	mov	r2, r3
   2209a:	f7f5 fc9f 	bl	179dc <_read>
   2209e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   220a2:	d102      	bne.n	220aa <_read_r+0x22>
   220a4:	6823      	ldr	r3, [r4, #0]
   220a6:	b103      	cbz	r3, 220aa <_read_r+0x22>
   220a8:	60eb      	str	r3, [r5, #12]
   220aa:	b001      	add	sp, #4
   220ac:	bd30      	pop	{r4, r5, pc}
   220ae:	46c0      	nop			(mov r8, r8)
   220b0:	20000688 	.word	0x20000688
   220b4:	00000000 	.word	0x00000000

000220b8 <_ZTV4Bras>:
	...
   220c0:	000053c1 00005349                       .S..IS..

000220c8 <_ZTV17BrasLaterauxKrabi>:
	...
   220d0:	00005a01 0000596d                       .Z..mY..

000220d8 <_ZTV6Sensor>:
	...
   220e0:	0000613d 0000610d 0001d4c1 00000000     =a...a..........

000220f0 <_ZTV7Sensors>:
	...
   220f8:	00006bb5 0000695d                       .k..]i..

00022100 <_ZZN7SensorsC1EvE4C.23>:
   22100:	0b0d0e09 0c0f0405 00000a08 00000000     ................

00022110 <_ZN14Asservissement21nb_ms_between_updatesE>:
   22110:	00000005 00000000                       ........

00022118 <_ZTV7Command>:
	...
   22120:	00008541 00008511 0001d4c1 00008195     A...............
   22130:	0001d4c1 0001d4c1 000081c9 00000000     ................

00022140 <_ZTV24CommandTestTournerGauche>:
	...
   22148:	0001cfe5 0001cfad 0000885d 00008195     ........].......
   22158:	00008871 0000888d 000081c9 00000000     q...............

00022168 <_ZTV18CommandTestAvancer>:
	...
   22170:	0001cf75 0001cf3d 00008811 00008195     u...=...........
   22180:	00008825 00008841 000081c9 00000000     %...A...........

00022190 <_ZTV15CommandAttendre>:
	...
   22198:	0001cf05 0001cecd 00008795 00008195     ................
   221a8:	000087b5 000087d1 000087ed 00000000     ................

000221b8 <_ZTV13CommandVirage>:
	...
   221c0:	0001ce95 0001ce5d 000089a9 00008195     ....]...........
   221d0:	0000874d 00008765 0000877d 00000000     M...e...}.......

000221e0 <_ZTV18CommandTournerVers>:
	...
   221e8:	0001ce25 0001cded 00008d91 00008195     %...............
   221f8:	00008701 0000871d 00008735 00000000     ........5.......

00022208 <_ZTV13CommandAllerA>:
	...
   22210:	0001cdb5 0001cd7d 000096e9 00008d5d     ....}.......]...
   22220:	000086b5 000086cd 000086e5 00000000     ................

00022230 <_ZTV18CommandAllerEnArcA>:
	...
   22238:	0001cd45 0001cd0d 00009e61 00008195     E.......a.......
   22248:	00008669 00008681 00008699 00000000     i...............

00022258 <_ZN14PIDFilterAngle2KpE>:
   22258:	42960000                                ...B

0002225c <_ZN14PIDFilterAngle2KdE>:
   2225c:	3f000000                                ...?

00022260 <_ZN14PIDFilterAngle2KiE>:
   22260:	3f333333                                333?

00022264 <_ZN17PIDFilterDistance2KpE>:
   22264:	3e4ccccd                                ..L>

00022268 <_ZN17PIDFilterDistance2KdE>:
   22268:	3f333333                                333?

0002226c <_ZN17PIDFilterDistance2KiE>:
   2226c:	3ba3d70a                                ...;

00022270 <_ZTV12AnalogSensor>:
	...
   22278:	0000b0ad 0000b075 0001d4c1 00000000     ....u...........

00022288 <_ZTV19CommandCheckCouleur>:
	...
   22290:	0001d0c5 0001d08d 0000bc15 00008195     ................
   222a0:	0000b6fd 0000b719 0000b735 00000000     ........5.......

000222b0 <_ZTV29CommandCalibrerCapteurCouleur>:
	...
   222b8:	0001d055 0001d01d 0000b99d 00008195     U...............
   222c8:	0000b689 0000b6a5 0000b6c1 00000000     ................

000222d8 <_ZZN8CapteursC1EvE4C.21>:
   222d8:	0d0c0b0a 0000000f                       ........

000222e0 <_ZTV18LigthBarrierSensor>:
	...
   222e8:	0000c7f5 0000c7bd 0000c6f1 00000000     ................

000222f8 <_ZTV17LimitSwitchSensor>:
	...
   22300:	0000ca21 0000c9e9 0000c945 00000000     !.......E.......
   22310:	a7c36552 61202c75 746e6176 756f7420     Re..u, avant tou
   22320:	63206574 616d6d6f 6e61646e 00212074     te commandant !.
   22330:	3a746f47 00000000                       Got:....

00022338 <_ZTV11SharpSensor>:
	...
   22340:	0000d719 0000d6e1 0000d5a1 00000000     ................
   22350:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   22360:	65747465 6d657220 27657369 00000000     ette remise'....
   22370:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   22380:	65747465 6c6e6520 27657665 00000000     ette enleve'....

00022390 <_ZTV16UltrasoundSensor>:
	...
   22398:	0000def9 0000dec1 0000de59 00000000     ........Y.......
   223a8:	74696e49 00000000                       Init....

000223b0 <_ZTV10ActionGoTo>:
	...
   223b8:	0000f799 0000f761 0000f611 0001525d     ....a.......]R..
   223c8:	0000f5d9 0000f5f5                       ........

000223d0 <_ZTV4Clap>:
	...
   223d8:	0000fb69 0000fb31 0000f8e1 0001525d     i...1.......]R..
   223e8:	00015275 000152ad                       uR...R..

000223f0 <_ZTV7Gobelet>:
	...
   223f8:	00010d91 00010d59 00010c51 0001525d     ....Y...Q...]R..
   22408:	00015275 000152ad                       uR...R..

00022410 <_ZTV9Krabi2015>:
	...
   22418:	0001d209 0001d135 00016e9d 0001525d     ....5....n..]R..
   22428:	00016c35 000152ad 00010ff9 00010f29     5l...R......)...

00022438 <_ZTV17MediumLevelAction>:
	...
   22440:	0001530d 000152dd 0001d4c1 0001525d     .S...R......]R..
   22450:	00015275 000152ad                       uR...R..

00022458 <_ZTV19RecalibrerOdometrie>:
	...
   22460:	00015c6d 00015c35 0001540d 0001525d     m\..5\...T..]R..
   22470:	00015275 000152ad                       uR...R..

00022478 <_ZTV11StrategieV2>:
	...
   22480:	000169c5 00016995                       .i...i..

00022488 <_ZTV11StrategieV3>:
	...
   22490:	0001d489 0001d451 00016e9d 0001525d     ....Q....n..]R..
   224a0:	00016c35 000152ad 0001d4c1 0001d4c1     5l...R..........

000224b0 <_ZTV5Tapis>:
	...
   224b8:	00017671 00017639 000174c9 0001525d     qv..9v...t..]R..
   224c8:	00015275 000152ad 70616548 646e6120     uR...R..Heap and
   224d8:	61747320 63206b63 696c6c6f 6e6f6973      stack collision
   224e8:	0000000a                                ....

000224ec <cplus_demangle_builtin_types>:
   224ec:	0002343c 0000000b 0002343c 0000000b     <4......<4......
   224fc:	00000000 00023448 00000004 00023450     ....H4......P4..
   2250c:	00000007 00000007 00023458 00000004     ........X4......
   2251c:	00023460 00000004 00000000 00023468     `4..........h4..
   2252c:	00000006 00023468 00000006 00000008     ....h4..........
   2253c:	00023470 0000000b 00023470 0000000b     p4......p4......
   2254c:	00000008 0002347c 00000005 0002347c     ....|4......|4..
   2255c:	00000005 00000008 00023484 0000000a     .........4......
   2256c:	00023484 0000000a 00000008 00023490     .4...........4..
   2257c:	0000000d 00023490 0000000d 00000000     .....4..........
   2258c:	000234a0 00000003 000234a0 00000003     .4.......4......
   2259c:	00000001 000234a4 0000000c 000234b4     .....4.......4..
   225ac:	00000008 00000002 00000000 00000000     ................
	...
   225c8:	000234c0 00000004 000234c0 00000004     .4.......4......
   225d8:	00000003 000234c8 0000000d 000234c8     .....4.......4..
   225e8:	0000000d 00000004 000234d8 00000008     .........4......
   225f8:	000234d8 00000008 00000000 000234e4     .4...........4..
   22608:	00000011 000234e4 00000011 00000000     .....4..........
	...
   22654:	000234f8 00000005 000234f8 00000005     .4.......4......
   22664:	00000000 00023500 0000000e 00023500     .....5.......5..
   22674:	0000000e 00000000 00000000 00000000     ................
	...
   22690:	00023510 00000004 00023510 00000004     .5.......5......
   226a0:	00000009 00023518 00000007 00023458     .....5......X4..
   226b0:	00000004 00000000 00023520 00000009     ........ 5......
   226c0:	000234c0 00000004 00000005 0002352c     .4..........,5..
   226d0:	00000012 0002352c 00000012 00000006     ....,5..........
   226e0:	00023540 00000003 00023540 00000003     @5......@5......
   226f0:	00000000                                ....

000226f4 <cplus_demangle_operators>:
   226f4:	00023544 00023548 00000002 00000002     D5..H5..........
   22704:	0002354c 00023550 00000001 00000002     L5..P5..........
   22714:	00023554 000233e0 00000002 00000002     T5...3..........
   22724:	00023558 0002355c 00000001 00000001     X5..\5..........
   22734:	00023560 0002355c 00000001 00000002     `5..\5..........
   22744:	00023564 00023568 00000002 00000000     d5..h5..........
   22754:	0002356c 00023570 00000001 00000002     l5..p5..........
   22764:	00023574 00023578 00000001 00000001     t5..x5..........
   22774:	0002357c 00023580 00000002 00000002     |5...5..........
   22784:	00023584 00023588 00000008 00000001     .5...5..........
   22794:	00023594 00023598 00000001 00000001     .5...5..........
   227a4:	0002359c 000235a0 00000006 00000001     .5...5..........
   227b4:	000235a8 000235ac 00000001 00000002     .5...5..........
   227c4:	000235b0 000235b4 00000002 00000002     .5...5..........
   227d4:	000235b8 000235bc 00000001 00000002     .5...5..........
   227e4:	000235c0 000235c4 00000002 00000002     .5...5..........
   227f4:	000235c8 000235cc 00000002 00000002     .5...5..........
   22804:	000235d0 00023784 00000001 00000002     .5...7..........
   22814:	000235d4 00023264 00000002 00000002     .5..d2..........
   22824:	000235d8 000235dc 00000003 00000002     .5...5..........
   22834:	0002346c 000235e0 00000002 00000002     l4...5..........
   22844:	000235e4 000235e8 00000002 00000002     .5...5..........
   22854:	000235ec 000235f0 00000001 00000002     .5...5..........
   22864:	000235f4 000235f8 00000002 00000002     .5...5..........
   22874:	000235fc 00023600 00000002 00000002     .5...6..........
   22884:	00023604 00023608 00000001 00000002     .6...6..........
   22894:	0002360c 00023598 00000001 00000002     .6...5..........
   228a4:	00023610 00023614 00000002 00000001     .6...6..........
   228b4:	00023618 0002361c 00000005 00000001     .6...6..........
   228c4:	00023624 00023628 00000002 00000002     $6..(6..........
   228d4:	0002353c 00023608 00000001 00000001     <5...6..........
   228e4:	0002362c 00023630 00000001 00000001     ,6..06..........
   228f4:	00023634 00023638 00000003 00000001     46..86..........
   22904:	0002363c 00023640 00000002 00000002     <6..@6..........
   22914:	00023644 00023648 00000002 00000002     D6..H6..........
   22924:	000236bc 0002364c 00000001 00000002     .6..L6..........
   22934:	00023650 00023654 00000002 00000002     P6..T6..........
   22944:	00023658 0002365c 00000001 00000002     X6..\6..........
   22954:	00023660 00023664 00000003 00000002     `6..d6..........
   22964:	00023668 0002366c 00000002 00000001     h6..l6..........
   22974:	00023670 0002365c 00000001 00000001     p6..\6..........
   22984:	00023674 00023678 00000002 00000002     t6..x6..........
   22994:	0002367c 00023680 00000001 00000003     |6...6..........
   229a4:	00023684 00023688 00000002 00000002     .6...6..........
   229b4:	0002368c 00023690 00000003 00000002     .6...6..........
   229c4:	00023694 00023698 00000001 00000002     .6...6..........
   229d4:	0002369c 000236a0 00000002 00000002     .6...6..........
   229e4:	000233dc 000236a4 00000007 00000001     .3...6..........
   229f4:	000236ac 000236a4 00000007 00000001     .6...6..........
	...

00022a14 <standard_subs>:
   22a14:	00000074 00023254 00000003 00023254     t...T2......T2..
   22a24:	00000003 00000000 00000000 00000061     ............a...
   22a34:	000236b0 0000000e 000236b0 0000000e     .6.......6......
   22a44:	000236c0 00000009 00000062 000236cc     .6......b....6..
   22a54:	00000011 000236cc 00000011 000236e0     .....6.......6..
   22a64:	0000000c 00000073 000236f0 0000000b     ....s....6......
   22a74:	000236fc 00000046 000236e0 0000000c     .6..F....6......
   22a84:	00000069 00023744 0000000c 00023754     i...D7......T7..
   22a94:	00000031 00023788 0000000d 0000006f     1....7......o...
   22aa4:	00023798 0000000c 000237a8 00000031     .7.......7..1...
   22ab4:	000237dc 0000000d 00000064 000237ec     .7......d....7..
   22ac4:	0000000d 000237fc 00000032 00023830     .....7..2...08..
   22ad4:	0000000e                                ....

00022ad8 <_ZTV6vectorIN6Sensor12OutputSensorEE>:
	...
   22ae0:	0001cbcd 0001cb8d                       ........

00022ae8 <_ZTV6vectorIN17LimitSwitchSensor15LimitSwitchNameEE>:
	...
   22af0:	0001cc4d 0001cc0d                       M.......

00022af8 <_ZTV6vectorIN18LigthBarrierSensor16LigthBarrierNameEE>:
	...
   22b00:	0001cccd 0001cc8d 65727570 72697620     ........pure vir
   22b10:	6c617574 74656d20 20646f68 6c6c6163     tual method call
   22b20:	000a6465 3a647473 6461623a 7079745f     ed..std::bad_typ
   22b30:	00646965 00000000                       eid.....

00022b38 <_ZTVSt10bad_typeid>:
   22b38:	00000000 00022b60 0001e021 0001e049     ....`+..!...I...
   22b48:	0001e019 00000000                       ........

00022b50 <_ZTSSt10bad_typeid>:
   22b50:	30317453 5f646162 65707974 00006469     St10bad_typeid..

00022b60 <_ZTISt10bad_typeid>:
   22b60:	00022c48 00022b50 0002317c 6d726574     H,..P+..|1..term
   22b70:	74616e69 61632065 64656c6c 63657220     inate called rec
   22b80:	69737275 796c6576 0000000a 6d726574     ursively....term
   22b90:	74616e69 61632065 64656c6c 74666120     inate called aft
   22ba0:	74207265 776f7268 20676e69 69206e61     er throwing an i
   22bb0:	6174736e 2065636e 2720666f 00000000     nstance of '....
   22bc0:	00000a27 68772020 29287461 0020203a     '...  what():  .
   22bd0:	6d726574 74616e69 61632065 64656c6c     terminate called
   22be0:	74697720 74756f68 206e6120 69746361      without an acti
   22bf0:	65206576 70656378 6e6f6974 0000000a     ve exception....
   22c00:	3a647473 6461623a 7361635f 00000074     std::bad_cast...

00022c10 <_ZTVSt8bad_cast>:
   22c10:	00000000 00022c34 0001e41d 0001e445     ....4,......E...
   22c20:	0001e415 00000000                       ........

00022c28 <_ZTSSt8bad_cast>:
   22c28:	62387453 635f6461 00747361              St8bad_cast.

00022c34 <_ZTISt8bad_cast>:
   22c34:	00022c48 00022c28 0002317c              H,..(,..|1..

00022c40 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   22c40:	00000000 00022c98 0001e555 0001e57d     .....,..U...}...
   22c50:	0001e7d9 0001e7dd 0001e741 0001e69d     ........A.......
   22c60:	0001e461 0001e489 0001e51d 00000000     a...............

00022c70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   22c70:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   22c80:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   22c90:	456f666e 00000000                       nfoE....

00022c98 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   22c98:	00022c48 00022c70 000231dc 00000000     H,..p,...1......

00022ca8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   22ca8:	00000000 00022f98 0001e599 0001e5c1     ...../..........
   22cb8:	0001e7d9 0001e7dd 0001e7e1 0001e7f1     ................

00022cc8 <_ZTIPKe>:
   22cc8:	00023848 00022fa4 00000001 00022ce8     H8.../.......,..

00022cd8 <_ZTIPe>:
   22cd8:	00023848 00022fa8 00000000 00022ce8     H8.../.......,..

00022ce8 <_ZTIe>:
   22ce8:	00022cb0 00022fac                       .,.../..

00022cf0 <_ZTIPKd>:
   22cf0:	00023848 00022fb0 00000001 00022d10     H8.../.......-..

00022d00 <_ZTIPd>:
   22d00:	00023848 00022fb4 00000000 00022d10     H8.../.......-..

00022d10 <_ZTId>:
   22d10:	00022cb0 00022fb8                       .,.../..

00022d18 <_ZTIPKf>:
   22d18:	00023848 00022fbc 00000001 00022d38     H8.../......8-..

00022d28 <_ZTIPf>:
   22d28:	00023848 00022fc0 00000000 00022d38     H8.../......8-..

00022d38 <_ZTIf>:
   22d38:	00022cb0 00022fc4                       .,.../..

00022d40 <_ZTIPKy>:
   22d40:	00023848 00022fc8 00000001 00022d60     H8.../......`-..

00022d50 <_ZTIPy>:
   22d50:	00023848 00022fcc 00000000 00022d60     H8.../......`-..

00022d60 <_ZTIy>:
   22d60:	00022cb0 00022fd0                       .,.../..

00022d68 <_ZTIPKx>:
   22d68:	00023848 00022fd4 00000001 00022d88     H8.../.......-..

00022d78 <_ZTIPx>:
   22d78:	00023848 00022fd8 00000000 00022d88     H8.../.......-..

00022d88 <_ZTIx>:
   22d88:	00022cb0 00022fdc                       .,.../..

00022d90 <_ZTIPKm>:
   22d90:	00023848 00022fe0 00000001 00022db0     H8.../.......-..

00022da0 <_ZTIPm>:
   22da0:	00023848 00022fe4 00000000 00022db0     H8.../.......-..

00022db0 <_ZTIm>:
   22db0:	00022cb0 00022fe8                       .,.../..

00022db8 <_ZTIPKl>:
   22db8:	00023848 00022fec 00000001 00022dd8     H8.../.......-..

00022dc8 <_ZTIPl>:
   22dc8:	00023848 00022ff0 00000000 00022dd8     H8.../.......-..

00022dd8 <_ZTIl>:
   22dd8:	00022cb0 00022ff4                       .,.../..

00022de0 <_ZTIPKj>:
   22de0:	00023848 00022ff8 00000001 00022e00     H8.../..........

00022df0 <_ZTIPj>:
   22df0:	00023848 00022ffc 00000000 00022e00     H8.../..........

00022e00 <_ZTIj>:
   22e00:	00022cb0 00023000                       .,...0..

00022e08 <_ZTIPKi>:
   22e08:	00023848 00023004 00000001 00022e28     H8...0......(...

00022e18 <_ZTIPi>:
   22e18:	00023848 00023008 00000000 00022e28     H8...0......(...

00022e28 <_ZTIi>:
   22e28:	00022cb0 0002300c                       .,...0..

00022e30 <_ZTIPKt>:
   22e30:	00023848 00023010 00000001 00022e50     H8...0......P...

00022e40 <_ZTIPt>:
   22e40:	00023848 00023014 00000000 00022e50     H8...0......P...

00022e50 <_ZTIt>:
   22e50:	00022cb0 00023018                       .,...0..

00022e58 <_ZTIPKs>:
   22e58:	00023848 0002301c 00000001 00022e78     H8...0......x...

00022e68 <_ZTIPs>:
   22e68:	00023848 00023020 00000000 00022e78     H8.. 0......x...

00022e78 <_ZTIs>:
   22e78:	00022cb0 00023024                       .,..$0..

00022e80 <_ZTIPKh>:
   22e80:	00023848 00023028 00000001 00022ea0     H8..(0..........

00022e90 <_ZTIPh>:
   22e90:	00023848 0002302c 00000000 00022ea0     H8..,0..........

00022ea0 <_ZTIh>:
   22ea0:	00022cb0 00023030                       .,..00..

00022ea8 <_ZTIPKa>:
   22ea8:	00023848 00023034 00000001 00022ec8     H8..40..........

00022eb8 <_ZTIPa>:
   22eb8:	00023848 00023038 00000000 00022ec8     H8..80..........

00022ec8 <_ZTIa>:
   22ec8:	00022cb0 0002303c                       .,..<0..

00022ed0 <_ZTIPKc>:
   22ed0:	00023848 00023040 00000001 00022ef0     H8..@0..........

00022ee0 <_ZTIPc>:
   22ee0:	00023848 00023044 00000000 00022ef0     H8..D0..........

00022ef0 <_ZTIc>:
   22ef0:	00022cb0 00023048                       .,..H0..

00022ef8 <_ZTIPKw>:
   22ef8:	00023848 0002304c 00000001 00022f18     H8..L0......./..

00022f08 <_ZTIPw>:
   22f08:	00023848 00023050 00000000 00022f18     H8..P0......./..

00022f18 <_ZTIw>:
   22f18:	00022cb0 00023054                       .,..T0..

00022f20 <_ZTIPKb>:
   22f20:	00023848 00023058 00000001 00022f40     H8..X0......@/..

00022f30 <_ZTIPb>:
   22f30:	00023848 0002305c 00000000 00022f40     H8..\0......@/..

00022f40 <_ZTIb>:
   22f40:	00022cb0 00023060                       .,..`0..

00022f48 <_ZTIPKv>:
   22f48:	00023848 00023064 00000001 00022f68     H8..d0......h/..

00022f58 <_ZTIPv>:
   22f58:	00023848 00023068 00000000 00022f68     H8..h0......h/..

00022f68 <_ZTIv>:
   22f68:	00022cb0 0002306c                       .,..l0..

00022f70 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   22f70:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   22f80:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   22f90:	6e695f65 00456f66                       e_infoE.

00022f98 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   22f98:	00022c48 00022f70 00023218              H,..p/...2..

00022fa4 <_ZTSPKe>:
   22fa4:	00654b50                                PKe.

00022fa8 <_ZTSPe>:
   22fa8:	00006550                                Pe..

00022fac <_ZTSe>:
   22fac:	00000065                                e...

00022fb0 <_ZTSPKd>:
   22fb0:	00644b50                                PKd.

00022fb4 <_ZTSPd>:
   22fb4:	00006450                                Pd..

00022fb8 <_ZTSd>:
   22fb8:	00000064                                d...

00022fbc <_ZTSPKf>:
   22fbc:	00664b50                                PKf.

00022fc0 <_ZTSPf>:
   22fc0:	00006650                                Pf..

00022fc4 <_ZTSf>:
   22fc4:	00000066                                f...

00022fc8 <_ZTSPKy>:
   22fc8:	00794b50                                PKy.

00022fcc <_ZTSPy>:
   22fcc:	00007950                                Py..

00022fd0 <_ZTSy>:
   22fd0:	00000079                                y...

00022fd4 <_ZTSPKx>:
   22fd4:	00784b50                                PKx.

00022fd8 <_ZTSPx>:
   22fd8:	00007850                                Px..

00022fdc <_ZTSx>:
   22fdc:	00000078                                x...

00022fe0 <_ZTSPKm>:
   22fe0:	006d4b50                                PKm.

00022fe4 <_ZTSPm>:
   22fe4:	00006d50                                Pm..

00022fe8 <_ZTSm>:
   22fe8:	0000006d                                m...

00022fec <_ZTSPKl>:
   22fec:	006c4b50                                PKl.

00022ff0 <_ZTSPl>:
   22ff0:	00006c50                                Pl..

00022ff4 <_ZTSl>:
   22ff4:	0000006c                                l...

00022ff8 <_ZTSPKj>:
   22ff8:	006a4b50                                PKj.

00022ffc <_ZTSPj>:
   22ffc:	00006a50                                Pj..

00023000 <_ZTSj>:
   23000:	0000006a                                j...

00023004 <_ZTSPKi>:
   23004:	00694b50                                PKi.

00023008 <_ZTSPi>:
   23008:	00006950                                Pi..

0002300c <_ZTSi>:
   2300c:	00000069                                i...

00023010 <_ZTSPKt>:
   23010:	00744b50                                PKt.

00023014 <_ZTSPt>:
   23014:	00007450                                Pt..

00023018 <_ZTSt>:
   23018:	00000074                                t...

0002301c <_ZTSPKs>:
   2301c:	00734b50                                PKs.

00023020 <_ZTSPs>:
   23020:	00007350                                Ps..

00023024 <_ZTSs>:
   23024:	00000073                                s...

00023028 <_ZTSPKh>:
   23028:	00684b50                                PKh.

0002302c <_ZTSPh>:
   2302c:	00006850                                Ph..

00023030 <_ZTSh>:
   23030:	00000068                                h...

00023034 <_ZTSPKa>:
   23034:	00614b50                                PKa.

00023038 <_ZTSPa>:
   23038:	00006150                                Pa..

0002303c <_ZTSa>:
   2303c:	00000061                                a...

00023040 <_ZTSPKc>:
   23040:	00634b50                                PKc.

00023044 <_ZTSPc>:
   23044:	00006350                                Pc..

00023048 <_ZTSc>:
   23048:	00000063                                c...

0002304c <_ZTSPKw>:
   2304c:	00774b50                                PKw.

00023050 <_ZTSPw>:
   23050:	00007750                                Pw..

00023054 <_ZTSw>:
   23054:	00000077                                w...

00023058 <_ZTSPKb>:
   23058:	00624b50                                PKb.

0002305c <_ZTSPb>:
   2305c:	00006250                                Pb..

00023060 <_ZTSb>:
   23060:	00000062                                b...

00023064 <_ZTSPKv>:
   23064:	00764b50                                PKv.

00023068 <_ZTSPv>:
   23068:	00007650                                Pv..

0002306c <_ZTSv>:
   2306c:	00000076 3a647473 6378653a 69747065     v...std::excepti
   2307c:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   2308c:	69747065 00006e6f 00000000              eption......

00023098 <_ZTVN10__cxxabiv119__foreign_exceptionE>:
   23098:	00000000 0002311c 0001e631 0001e64d     .....1..1...M...
   230a8:	0001d4c1 00000000                       ........

000230b0 <_ZTVN10__cxxabiv115__forced_unwindE>:
   230b0:	00000000 00023144 0001e619 0001e661     ....D1......a...
   230c0:	0001d4c1 00000000                       ........

000230c8 <_ZTVSt13bad_exception>:
   230c8:	00000000 00023160 0001e601 0001e689     ....`1..........
   230d8:	0001e645 00000000                       E.......

000230e0 <_ZTVSt9exception>:
   230e0:	00000000 0002317c 0001e5e9 0001e675     ....|1......u...
   230f0:	0001e63d 00000000                       =.......

000230f8 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   230f8:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23108:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   23118:	00456e6f                                onE.

0002311c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   2311c:	00023190 000230f8                       .1...0..

00023124 <_ZTSN10__cxxabiv115__forced_unwindE>:
   23124:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   23134:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00023144 <_ZTIN10__cxxabiv115__forced_unwindE>:
   23144:	00023190 00023124                       .1..$1..

0002314c <_ZTSSt13bad_exception>:
   2314c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2315c:	0000006e                                n...

00023160 <_ZTISt13bad_exception>:
   23160:	00022c48 0002314c 0002317c              H,..L1..|1..

0002316c <_ZTSSt9exception>:
   2316c:	65397453 70656378 6e6f6974 00000000     St9exception....

0002317c <_ZTISt9exception>:
   2317c:	00023190 0002316c 00000000              .1..l1......

00023188 <_ZTVN10__cxxabiv117__class_type_infoE>:
   23188:	00000000 000231dc 0001e76d 0001e795     .....1..m.......
   23198:	0001e7d9 0001e7dd 0001e741 0001e69d     ........A.......
   231a8:	0001e6e1 0001e701 0001e6d5 00000000     ................

000231b8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   231b8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   231c8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   231d8:	00000045                                E...

000231dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   231dc:	00022c48 000231b8 00023218              H,...1...2..

000231e8 <_ZTVSt9type_info>:
   231e8:	00000000 00023218 0001e7bd 0001e7f5     .....2..........
   231f8:	0001e7d9 0001e7dd 0001e7e1 0001e7f1     ................

00023208 <_ZTSSt9type_info>:
   23208:	74397453 5f657079 6f666e69 00000000     St9type_info....

00023218 <_ZTISt9type_info>:
   23218:	00023190 00023208 4f4c475f 5f4c4142     .1...2.._GLOBAL_
   23228:	00000000 6f6e6128 6f6d796e 6e207375     ....(anonymous n
   23238:	73656d61 65636170 00000029 69727473     amespace)...stri
   23248:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   23258:	00003a3a 7272414a 00007961 00005d5b     ::..JArray..[]..
   23268:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   23278:	20726f66 00000000 736e6f63 63757274     for ....construc
   23288:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   23298:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   232a8:	6f666e69 726f6620 00000020 65707974     info for ...type
   232b8:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   232c8:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   232d8:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   232e8:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   232f8:	6e616972 65722074 6e727574 75687420     riant return thu
   23308:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   23318:	66207373 0020726f 72617567 61762064     ss for .guard va
   23328:	62616972 6620656c 0020726f 65666572     riable for .refe
   23338:	636e6572 65742065 726f706d 20797261     rence temporary 
   23348:	20726f66 00000000 64646968 61206e65     for ....hidden a
   23358:	7361696c 726f6620 00000020 002a3a3a     lias for ...::*.
   23368:	0000202c 7265706f 726f7461 00000000     , ..operator....
   23378:	7265706f 726f7461 00000020 00002029     operator ...) ..
   23388:	00002820 203a2029 00000028 00006c75      (..) : (...ul..
   23398:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
   233a8:	65757274 00000000 6176616a 73657220     true....java res
   233b8:	6372756f 00002065 73657220 63697274     ource .. restric
   233c8:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   233d8:	6e6f6320 00007473 00002626 706d6f63      const..&&..comp
   233e8:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   233f8:	00002079 626f6c67 64206c61 72747365     y ..global destr
   23408:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   23418:	00000000 626f6c67 63206c61 74736e6f     ....global const
   23428:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   23438:	00000020 6e676973 63206465 00726168      ...signed char.
   23448:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   23458:	72616863 00000000 65747962 00000000     char....byte....
   23468:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   23478:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   23488:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   23498:	61686320 00000072 00746e69 69736e75      char...int.unsi
   234a8:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   234b8:	64656e67 00000000 676e6f6c 00000000     gned....long....
   234c8:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   234d8:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   234e8:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   234f8:	726f6873 00000074 69736e75 64656e67     short...unsigned
   23508:	6f687320 00007472 64696f76 00000000      short..void....
   23518:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   23528:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   23538:	6f6c2067 0000676e 002e2e2e 00004e61     g long......aN..
   23548:	00003d26 00005361 0000003d 00006161     &=..aS..=...aa..
   23558:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
   23568:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   23578:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   23588:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
   23598:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
   235a8:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   235b8:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   235c8:	00006567 00003d3e 00007467 00007869     ge..>=..gt..ix..
   235d8:	0000536c 003d3c3c 00003d3c 0000736c     lS..<<=.<=..ls..
   235e8:	00003c3c 0000746c 0000003c 0000496d     <<..lt..<...mI..
   235f8:	00003d2d 00004c6d 00003d2a 0000696d     -=..mL..*=..mi..
   23608:	0000002d 00006c6d 00006d6d 00002d2d     -...ml..mm..--..
   23618:	0000616e 5b77656e 0000005d 0000656e     na..new[]...ne..
   23628:	00003d21 0000746e 00000021 0000776e     !=..nt..!...nw..
   23638:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   23648:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   23658:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   23668:	00007070 00002b2b 00007370 00007470     pp..++..ps..pt..
   23678:	00003e2d 00007571 0000003f 00004d72     ->..qu..?...rM..
   23688:	00003d25 00005372 003d3e3e 00006d72     %=..rS..>>=.rm..
   23698:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   236a8:	0020666f 00007a73 3a647473 6c6c613a     of .sz..std::all
   236b8:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   236c8:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   236d8:	6e697274 00000067 69736162 74735f63     tring...basic_st
   236e8:	676e6972 00000000 3a647473 7274733a     ring....std::str
   236f8:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   23708:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   23718:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   23728:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   23738:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   23748:	7473693a 6d616572 00000000 3a647473     :istream....std:
   23758:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   23768:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   23778:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   23788:	69736162 73695f63 61657274 0000006d     basic_istream...
   23798:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   237a8:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   237b8:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   237c8:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   237d8:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   237e8:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   237f8:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   23808:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   23818:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   23828:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   23838:	65727473 00006d61                       stream..

00023840 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   23840:	00000000 0002388c 0001ea39 0001ea61     .....8..9...a...
   23850:	0001e9f1 0001e7dd 0001ea91 0001e7f1     ................
   23860:	0001e9f5 00000000                       ........

00023868 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   23868:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   23878:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   23888:	00456f66                                foE.

0002388c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   2388c:	00022c48 00023868 000238e4              H,..h8...8..

00023898 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   23898:	00000000 000238e4 0001eaf1 0001eb19     .....8..........
   238a8:	0001e7d9 0001e7dd 0001ea91 0001e7f1     ................
   238b8:	0001ea7d 00000000                       }.......

000238c0 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   238c0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   238d0:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   238e0:	00000045                                E...

000238e4 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   238e4:	00022c48 000238c0 00023218 74727173     H,...8...2..sqrt
   238f4:	00000000                                ....

000238f8 <npio2_hw>:
   238f8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   23908:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   23918:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   23928:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   23938:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   23948:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   23958:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   23968:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00023978 <two_over_pi>:
   23978:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   23988:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   23998:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   239a8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   239b8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   239c8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   239d8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   239e8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   239f8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   23a08:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   23a18:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   23a28:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   23a38:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   23a48:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   23a58:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   23a68:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   23a78:	0060e27b 00c08c6b                       {.`.k...

00023a80 <init_jk>:
   23a80:	00000002 00000003 00000004 00000006     ................

00023a90 <PIo2>:
   23a90:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   23aa0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   23ab0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   23ac0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00023ad0 <atanhi>:
   23ad0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   23ae0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00023af0 <atanlo>:
   23af0:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   23b00:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00023b10 <_global_impure_ptr>:
   23b10:	20000048 00000043                       H.. C...

00023b18 <__sf_fake_stdin>:
	...

00023b38 <__sf_fake_stdout>:
	...

00023b58 <__sf_fake_stderr>:
	...
