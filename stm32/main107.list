
main107.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 00 01 20 a1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ... ............
      10:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 00 00 00 00     ................
	...
      2c:	e1 a0 01 00 e1 a0 01 00 00 00 00 00 e1 a0 01 00     ................
      3c:	99 77 00 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     .w..............
      4c:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      5c:	e1 a0 01 00 e1 a0 01 00 09 d5 00 00 e1 a0 01 00     ................
      6c:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      7c:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      8c:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      9c:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      ac:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      bc:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      cc:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
      dc:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
	...
     108:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
     118:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
     128:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
     138:	e1 a0 01 00 e1 a0 01 00 e1 a0 01 00 e1 a0 01 00     ................
     148:	e1 a0 01 00 e1 a0 01 00 00 00 00 00 00 00 00 00     ................
	...
     1e0:	5f f8 e0 f1 50 18 02 00 00 00 00 20 34 00 00 20     _...P...... 4.. 
     1f0:	48 05 00 20 78 06 00 20                             H.. x.. 

000001f8 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
     1f8:	b480      	push	{r7}
     1fa:	b083      	sub	sp, #12
     1fc:	af00      	add	r7, sp, #0
     1fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
     200:	4a05      	ldr	r2, [pc, #20]	(218 <NVIC_PriorityGroupConfig+0x20>)
     202:	687b      	ldr	r3, [r7, #4]
     204:	f043 63be 	orr.w	r3, r3, #99614720	; 0x5f00000
     208:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
     20c:	60d3      	str	r3, [r2, #12]
}
     20e:	f107 070c 	add.w	r7, r7, #12	; 0xc
     212:	46bd      	mov	sp, r7
     214:	bc80      	pop	{r7}
     216:	4770      	bx	lr
     218:	e000ed00 	.word	0xe000ed00

0000021c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
     21c:	b480      	push	{r7}
     21e:	b087      	sub	sp, #28
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
     224:	f04f 0300 	mov.w	r3, #0	; 0x0
     228:	60fb      	str	r3, [r7, #12]
     22a:	f04f 0300 	mov.w	r3, #0	; 0x0
     22e:	613b      	str	r3, [r7, #16]
     230:	f04f 030f 	mov.w	r3, #15	; 0xf
     234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
     236:	687b      	ldr	r3, [r7, #4]
     238:	78db      	ldrb	r3, [r3, #3]
     23a:	2b00      	cmp	r3, #0
     23c:	d041      	beq.n	2c2 <NVIC_Init+0xa6>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
     23e:	4b2d      	ldr	r3, [pc, #180]	(2f4 <NVIC_Init+0xd8>)
     240:	68db      	ldr	r3, [r3, #12]
     242:	ea6f 0303 	mvn.w	r3, r3
     246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
     24a:	ea4f 2313 	mov.w	r3, r3, lsr #8
     24e:	60fb      	str	r3, [r7, #12]
    tmppre = (0x4 - tmppriority);
     250:	68fb      	ldr	r3, [r7, #12]
     252:	f1c3 0304 	rsb	r3, r3, #4	; 0x4
     256:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
     258:	68fa      	ldr	r2, [r7, #12]
     25a:	697b      	ldr	r3, [r7, #20]
     25c:	fa23 f302 	lsr.w	r3, r3, r2
     260:	617b      	str	r3, [r7, #20]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
     262:	687b      	ldr	r3, [r7, #4]
     264:	785b      	ldrb	r3, [r3, #1]
     266:	461a      	mov	r2, r3
     268:	693b      	ldr	r3, [r7, #16]
     26a:	fa02 f303 	lsl.w	r3, r2, r3
     26e:	60fb      	str	r3, [r7, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
     270:	687b      	ldr	r3, [r7, #4]
     272:	789b      	ldrb	r3, [r3, #2]
     274:	461a      	mov	r2, r3
     276:	697b      	ldr	r3, [r7, #20]
     278:	ea02 0203 	and.w	r2, r2, r3
     27c:	68fb      	ldr	r3, [r7, #12]
     27e:	ea43 0302 	orr.w	r3, r3, r2
     282:	60fb      	str	r3, [r7, #12]
    tmppriority = tmppriority << 0x04;
     284:	68fb      	ldr	r3, [r7, #12]
     286:	ea4f 1303 	mov.w	r3, r3, lsl #4
     28a:	60fb      	str	r3, [r7, #12]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
     28c:	491a      	ldr	r1, [pc, #104]	(2f8 <NVIC_Init+0xdc>)
     28e:	687b      	ldr	r3, [r7, #4]
     290:	781b      	ldrb	r3, [r3, #0]
     292:	461a      	mov	r2, r3
     294:	68fb      	ldr	r3, [r7, #12]
     296:	b2db      	uxtb	r3, r3
     298:	440a      	add	r2, r1
     29a:	f882 3300 	strb.w	r3, [r2, #768]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     29e:	4816      	ldr	r0, [pc, #88]	(2f8 <NVIC_Init+0xdc>)
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	781b      	ldrb	r3, [r3, #0]
     2a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2a8:	b2db      	uxtb	r3, r3
     2aa:	4619      	mov	r1, r3
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	781b      	ldrb	r3, [r3, #0]
     2b0:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2b4:	f04f 0301 	mov.w	r3, #1	; 0x1
     2b8:	fa03 f302 	lsl.w	r3, r3, r2
     2bc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
     2c0:	e012      	b.n	2e8 <NVIC_Init+0xcc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
     2c2:	480d      	ldr	r0, [pc, #52]	(2f8 <NVIC_Init+0xdc>)
     2c4:	687b      	ldr	r3, [r7, #4]
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	ea4f 1353 	mov.w	r3, r3, lsr #5
     2cc:	b2db      	uxtb	r3, r3
     2ce:	4619      	mov	r1, r3
     2d0:	687b      	ldr	r3, [r7, #4]
     2d2:	781b      	ldrb	r3, [r3, #0]
     2d4:	f003 021f 	and.w	r2, r3, #31	; 0x1f
     2d8:	f04f 0301 	mov.w	r3, #1	; 0x1
     2dc:	fa03 f202 	lsl.w	r2, r3, r2
     2e0:	f101 0320 	add.w	r3, r1, #32	; 0x20
     2e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
     2e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     2ec:	46bd      	mov	sp, r7
     2ee:	bc80      	pop	{r7}
     2f0:	4770      	bx	lr
     2f2:	46c0      	nop			(mov r8, r8)
     2f4:	e000ed00 	.word	0xe000ed00
     2f8:	e000e100 	.word	0xe000e100

000002fc <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x100.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
     2fc:	b480      	push	{r7}
     2fe:	b083      	sub	sp, #12
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
     304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
     306:	4907      	ldr	r1, [pc, #28]	(324 <NVIC_SetVectorTable+0x28>)
     308:	683b      	ldr	r3, [r7, #0]
     30a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     30e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     312:	687a      	ldr	r2, [r7, #4]
     314:	ea43 0302 	orr.w	r3, r3, r2
     318:	608b      	str	r3, [r1, #8]
}
     31a:	f107 070c 	add.w	r7, r7, #12	; 0xc
     31e:	46bd      	mov	sp, r7
     320:	bc80      	pop	{r7}
     322:	4770      	bx	lr
     324:	e000ed00 	.word	0xe000ed00

00000328 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
     328:	b480      	push	{r7}
     32a:	b083      	sub	sp, #12
     32c:	af00      	add	r7, sp, #0
     32e:	4603      	mov	r3, r0
     330:	460a      	mov	r2, r1
     332:	71fb      	strb	r3, [r7, #7]
     334:	4613      	mov	r3, r2
     336:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
     338:	79bb      	ldrb	r3, [r7, #6]
     33a:	2b00      	cmp	r3, #0
     33c:	d007      	beq.n	34e <NVIC_SystemLPConfig+0x26>
  {
    SCB->SCR |= LowPowerMode;
     33e:	490b      	ldr	r1, [pc, #44]	(36c <NVIC_SystemLPConfig+0x44>)
     340:	4b0a      	ldr	r3, [pc, #40]	(36c <NVIC_SystemLPConfig+0x44>)
     342:	691a      	ldr	r2, [r3, #16]
     344:	79fb      	ldrb	r3, [r7, #7]
     346:	ea42 0303 	orr.w	r3, r2, r3
     34a:	610b      	str	r3, [r1, #16]
     34c:	e008      	b.n	360 <NVIC_SystemLPConfig+0x38>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
     34e:	4907      	ldr	r1, [pc, #28]	(36c <NVIC_SystemLPConfig+0x44>)
     350:	4b06      	ldr	r3, [pc, #24]	(36c <NVIC_SystemLPConfig+0x44>)
     352:	691a      	ldr	r2, [r3, #16]
     354:	79fb      	ldrb	r3, [r7, #7]
     356:	ea6f 0303 	mvn.w	r3, r3
     35a:	ea02 0303 	and.w	r3, r2, r3
     35e:	610b      	str	r3, [r1, #16]
  }
}
     360:	f107 070c 	add.w	r7, r7, #12	; 0xc
     364:	46bd      	mov	sp, r7
     366:	bc80      	pop	{r7}
     368:	4770      	bx	lr
     36a:	46c0      	nop			(mov r8, r8)
     36c:	e000ed00 	.word	0xe000ed00

00000370 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
     370:	b480      	push	{r7}
     372:	b083      	sub	sp, #12
     374:	af00      	add	r7, sp, #0
     376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
     378:	687b      	ldr	r3, [r7, #4]
     37a:	2b04      	cmp	r3, #4
     37c:	d106      	bne.n	38c <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
     37e:	4a09      	ldr	r2, [pc, #36]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     380:	4b08      	ldr	r3, [pc, #32]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f043 0304 	orr.w	r3, r3, #4	; 0x4
     388:	6013      	str	r3, [r2, #0]
     38a:	e005      	b.n	398 <SysTick_CLKSourceConfig+0x28>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
     38c:	4a05      	ldr	r2, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     38e:	4b05      	ldr	r3, [pc, #20]	(3a4 <SysTick_CLKSourceConfig+0x34>)
     390:	681b      	ldr	r3, [r3, #0]
     392:	f023 0304 	bic.w	r3, r3, #4	; 0x4
     396:	6013      	str	r3, [r2, #0]
  }
}
     398:	f107 070c 	add.w	r7, r7, #12	; 0xc
     39c:	46bd      	mov	sp, r7
     39e:	bc80      	pop	{r7}
     3a0:	4770      	bx	lr
     3a2:	46c0      	nop			(mov r8, r8)
     3a4:	e000e010 	.word	0xe000e010

000003a8 <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
     3a8:	b580      	push	{r7, lr}
     3aa:	b082      	sub	sp, #8
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
     3b0:	687a      	ldr	r2, [r7, #4]
     3b2:	4b1a      	ldr	r3, [pc, #104]	(41c <ADC_DeInit+0x74>)
     3b4:	429a      	cmp	r2, r3
     3b6:	d10c      	bne.n	3d2 <ADC_DeInit+0x2a>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
     3b8:	f44f 7000 	mov.w	r0, #512	; 0x200
     3bc:	f04f 0101 	mov.w	r1, #1	; 0x1
     3c0:	f002 f8a8 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
     3c4:	f44f 7000 	mov.w	r0, #512	; 0x200
     3c8:	f04f 0100 	mov.w	r1, #0	; 0x0
     3cc:	f002 f8a2 	bl	2514 <RCC_APB2PeriphResetCmd>
     3d0:	e020      	b.n	414 <ADC_DeInit+0x6c>
  }
  else if (ADCx == ADC2)
     3d2:	687a      	ldr	r2, [r7, #4]
     3d4:	4b12      	ldr	r3, [pc, #72]	(420 <ADC_DeInit+0x78>)
     3d6:	429a      	cmp	r2, r3
     3d8:	d10c      	bne.n	3f4 <ADC_DeInit+0x4c>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
     3da:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3de:	f04f 0101 	mov.w	r1, #1	; 0x1
     3e2:	f002 f897 	bl	2514 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
     3e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
     3ea:	f04f 0100 	mov.w	r1, #0	; 0x0
     3ee:	f002 f891 	bl	2514 <RCC_APB2PeriphResetCmd>
     3f2:	e00f      	b.n	414 <ADC_DeInit+0x6c>
  }
  else
  {
    if (ADCx == ADC3)
     3f4:	687a      	ldr	r2, [r7, #4]
     3f6:	4b0b      	ldr	r3, [pc, #44]	(424 <ADC_DeInit+0x7c>)
     3f8:	429a      	cmp	r2, r3
     3fa:	d10b      	bne.n	414 <ADC_DeInit+0x6c>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
     3fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     400:	f04f 0101 	mov.w	r1, #1	; 0x1
     404:	f002 f886 	bl	2514 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
     408:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     40c:	f04f 0100 	mov.w	r1, #0	; 0x0
     410:	f002 f880 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
     414:	f107 0708 	add.w	r7, r7, #8	; 0x8
     418:	46bd      	mov	sp, r7
     41a:	bd80      	pop	{r7, pc}
     41c:	40012400 	.word	0x40012400
     420:	40012800 	.word	0x40012800
     424:	40013c00 	.word	0x40013c00

00000428 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *   the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
     428:	b480      	push	{r7}
     42a:	b085      	sub	sp, #20
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
     430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
     432:	f04f 0300 	mov.w	r3, #0	; 0x0
     436:	60bb      	str	r3, [r7, #8]
  uint8_t tmpreg2 = 0;
     438:	f04f 0300 	mov.w	r3, #0	; 0x0
     43c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
     43e:	687b      	ldr	r3, [r7, #4]
     440:	685b      	ldr	r3, [r3, #4]
     442:	60bb      	str	r3, [r7, #8]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
     444:	68bb      	ldr	r3, [r7, #8]
     446:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
     44a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
     44e:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     450:	683b      	ldr	r3, [r7, #0]
     452:	681a      	ldr	r2, [r3, #0]
     454:	683b      	ldr	r3, [r7, #0]
     456:	791b      	ldrb	r3, [r3, #4]
     458:	ea4f 2303 	mov.w	r3, r3, lsl #8
     45c:	ea42 0203 	orr.w	r2, r2, r3
     460:	68bb      	ldr	r3, [r7, #8]
     462:	ea43 0302 	orr.w	r3, r3, r2
     466:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
     468:	687a      	ldr	r2, [r7, #4]
     46a:	68bb      	ldr	r3, [r7, #8]
     46c:	6053      	str	r3, [r2, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	689b      	ldr	r3, [r3, #8]
     472:	60bb      	str	r3, [r7, #8]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
     474:	68ba      	ldr	r2, [r7, #8]
     476:	4b1b      	ldr	r3, [pc, #108]	(4e4 <ADC_Init+0xbc>)
     478:	ea02 0303 	and.w	r3, r2, r3
     47c:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     47e:	683b      	ldr	r3, [r7, #0]
     480:	68da      	ldr	r2, [r3, #12]
     482:	683b      	ldr	r3, [r7, #0]
     484:	689b      	ldr	r3, [r3, #8]
     486:	ea42 0203 	orr.w	r2, r2, r3
     48a:	683b      	ldr	r3, [r7, #0]
     48c:	795b      	ldrb	r3, [r3, #5]
     48e:	ea4f 0343 	mov.w	r3, r3, lsl #1
     492:	ea42 0203 	orr.w	r2, r2, r3
     496:	68bb      	ldr	r3, [r7, #8]
     498:	ea43 0302 	orr.w	r3, r3, r2
     49c:	60bb      	str	r3, [r7, #8]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
     49e:	687a      	ldr	r2, [r7, #4]
     4a0:	68bb      	ldr	r3, [r7, #8]
     4a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
     4a4:	687b      	ldr	r3, [r7, #4]
     4a6:	6adb      	ldr	r3, [r3, #44]
     4a8:	60bb      	str	r3, [r7, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
     4aa:	68bb      	ldr	r3, [r7, #8]
     4ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
     4b0:	60bb      	str	r3, [r7, #8]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
     4b2:	683b      	ldr	r3, [r7, #0]
     4b4:	7c1b      	ldrb	r3, [r3, #16]
     4b6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     4ba:	b2da      	uxtb	r2, r3
     4bc:	7bfb      	ldrb	r3, [r7, #15]
     4be:	ea42 0303 	orr.w	r3, r2, r3
     4c2:	73fb      	strb	r3, [r7, #15]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
     4c4:	7bfb      	ldrb	r3, [r7, #15]
     4c6:	ea4f 5203 	mov.w	r2, r3, lsl #20
     4ca:	68bb      	ldr	r3, [r7, #8]
     4cc:	ea43 0302 	orr.w	r3, r3, r2
     4d0:	60bb      	str	r3, [r7, #8]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
     4d2:	687a      	ldr	r2, [r7, #4]
     4d4:	68bb      	ldr	r3, [r7, #8]
     4d6:	62d3      	str	r3, [r2, #44]
}
     4d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
     4dc:	46bd      	mov	sp, r7
     4de:	bc80      	pop	{r7}
     4e0:	4770      	bx	lr
     4e2:	46c0      	nop			(mov r8, r8)
     4e4:	fff1f7fd 	.word	0xfff1f7fd

000004e8 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
     4e8:	b480      	push	{r7}
     4ea:	b083      	sub	sp, #12
     4ec:	af00      	add	r7, sp, #0
     4ee:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
     4f0:	687a      	ldr	r2, [r7, #4]
     4f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     4f6:	6013      	str	r3, [r2, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	f04f 0300 	mov.w	r3, #0	; 0x0
     4fe:	7113      	strb	r3, [r2, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
     500:	687a      	ldr	r2, [r7, #4]
     502:	f04f 0300 	mov.w	r3, #0	; 0x0
     506:	7153      	strb	r3, [r2, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
     508:	687a      	ldr	r2, [r7, #4]
     50a:	f04f 0300 	mov.w	r3, #0	; 0x0
     50e:	6093      	str	r3, [r2, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
     510:	687a      	ldr	r2, [r7, #4]
     512:	f04f 0300 	mov.w	r3, #0	; 0x0
     516:	60d3      	str	r3, [r2, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
     518:	687a      	ldr	r2, [r7, #4]
     51a:	f04f 0301 	mov.w	r3, #1	; 0x1
     51e:	7413      	strb	r3, [r2, #16]
}
     520:	f107 070c 	add.w	r7, r7, #12	; 0xc
     524:	46bd      	mov	sp, r7
     526:	bc80      	pop	{r7}
     528:	4770      	bx	lr
     52a:	46c0      	nop			(mov r8, r8)

0000052c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     52c:	b480      	push	{r7}
     52e:	b083      	sub	sp, #12
     530:	af00      	add	r7, sp, #0
     532:	6078      	str	r0, [r7, #4]
     534:	460b      	mov	r3, r1
     536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     538:	78fb      	ldrb	r3, [r7, #3]
     53a:	2b00      	cmp	r3, #0
     53c:	d006      	beq.n	54c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
     53e:	687b      	ldr	r3, [r7, #4]
     540:	689b      	ldr	r3, [r3, #8]
     542:	f043 0201 	orr.w	r2, r3, #1	; 0x1
     546:	687b      	ldr	r3, [r7, #4]
     548:	609a      	str	r2, [r3, #8]
     54a:	e005      	b.n	558 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	689b      	ldr	r3, [r3, #8]
     550:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     554:	687b      	ldr	r3, [r7, #4]
     556:	609a      	str	r2, [r3, #8]
  }
}
     558:	f107 070c 	add.w	r7, r7, #12	; 0xc
     55c:	46bd      	mov	sp, r7
     55e:	bc80      	pop	{r7}
     560:	4770      	bx	lr
     562:	46c0      	nop			(mov r8, r8)

00000564 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     564:	b480      	push	{r7}
     566:	b083      	sub	sp, #12
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	460b      	mov	r3, r1
     56e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     570:	78fb      	ldrb	r3, [r7, #3]
     572:	2b00      	cmp	r3, #0
     574:	d006      	beq.n	584 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
     576:	687b      	ldr	r3, [r7, #4]
     578:	689b      	ldr	r3, [r3, #8]
     57a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
     57e:	687b      	ldr	r3, [r7, #4]
     580:	609a      	str	r2, [r3, #8]
     582:	e005      	b.n	590 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
     584:	687b      	ldr	r3, [r7, #4]
     586:	689b      	ldr	r3, [r3, #8]
     588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
     58c:	687b      	ldr	r3, [r7, #4]
     58e:	609a      	str	r2, [r3, #8]
  }
}
     590:	f107 070c 	add.w	r7, r7, #12	; 0xc
     594:	46bd      	mov	sp, r7
     596:	bc80      	pop	{r7}
     598:	4770      	bx	lr
     59a:	46c0      	nop			(mov r8, r8)

0000059c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
     59c:	b480      	push	{r7}
     59e:	b085      	sub	sp, #20
     5a0:	af00      	add	r7, sp, #0
     5a2:	6078      	str	r0, [r7, #4]
     5a4:	460b      	mov	r3, r1
     5a6:	807b      	strh	r3, [r7, #2]
     5a8:	4613      	mov	r3, r2
     5aa:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
     5ac:	f04f 0300 	mov.w	r3, #0	; 0x0
     5b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
     5b2:	887b      	ldrh	r3, [r7, #2]
     5b4:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
     5b6:	787b      	ldrb	r3, [r7, #1]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d007      	beq.n	5cc <ADC_ITConfig+0x30>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	685a      	ldr	r2, [r3, #4]
     5c0:	7bfb      	ldrb	r3, [r7, #15]
     5c2:	ea42 0203 	orr.w	r2, r2, r3
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	605a      	str	r2, [r3, #4]
     5ca:	e008      	b.n	5de <ADC_ITConfig+0x42>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	685a      	ldr	r2, [r3, #4]
     5d0:	7bfb      	ldrb	r3, [r7, #15]
     5d2:	ea6f 0303 	mvn.w	r3, r3
     5d6:	ea02 0203 	and.w	r2, r2, r3
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	605a      	str	r2, [r3, #4]
  }
}
     5de:	f107 0714 	add.w	r7, r7, #20	; 0x14
     5e2:	46bd      	mov	sp, r7
     5e4:	bc80      	pop	{r7}
     5e6:	4770      	bx	lr

000005e8 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
     5e8:	b480      	push	{r7}
     5ea:	b083      	sub	sp, #12
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibartion registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
     5f0:	687b      	ldr	r3, [r7, #4]
     5f2:	689b      	ldr	r3, [r3, #8]
     5f4:	f043 0208 	orr.w	r2, r3, #8	; 0x8
     5f8:	687b      	ldr	r3, [r7, #4]
     5fa:	609a      	str	r2, [r3, #8]
}
     5fc:	f107 070c 	add.w	r7, r7, #12	; 0xc
     600:	46bd      	mov	sp, r7
     602:	bc80      	pop	{r7}
     604:	4770      	bx	lr
     606:	46c0      	nop			(mov r8, r8)

00000608 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
     608:	b480      	push	{r7}
     60a:	b085      	sub	sp, #20
     60c:	af00      	add	r7, sp, #0
     60e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     610:	f04f 0300 	mov.w	r3, #0	; 0x0
     614:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
     616:	687b      	ldr	r3, [r7, #4]
     618:	689b      	ldr	r3, [r3, #8]
     61a:	f003 0308 	and.w	r3, r3, #8	; 0x8
     61e:	2b00      	cmp	r3, #0
     620:	d003      	beq.n	62a <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
     622:	f04f 0301 	mov.w	r3, #1	; 0x1
     626:	73fb      	strb	r3, [r7, #15]
     628:	e002      	b.n	630 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
     62a:	f04f 0300 	mov.w	r3, #0	; 0x0
     62e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
     630:	7bfb      	ldrb	r3, [r7, #15]
}
     632:	4618      	mov	r0, r3
     634:	f107 0714 	add.w	r7, r7, #20	; 0x14
     638:	46bd      	mov	sp, r7
     63a:	bc80      	pop	{r7}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			(mov r8, r8)

00000640 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
     640:	b480      	push	{r7}
     642:	b083      	sub	sp, #12
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	689b      	ldr	r3, [r3, #8]
     64c:	f043 0204 	orr.w	r2, r3, #4	; 0x4
     650:	687b      	ldr	r3, [r7, #4]
     652:	609a      	str	r2, [r3, #8]
}
     654:	f107 070c 	add.w	r7, r7, #12	; 0xc
     658:	46bd      	mov	sp, r7
     65a:	bc80      	pop	{r7}
     65c:	4770      	bx	lr
     65e:	46c0      	nop			(mov r8, r8)

00000660 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
     660:	b480      	push	{r7}
     662:	b085      	sub	sp, #20
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     668:	f04f 0300 	mov.w	r3, #0	; 0x0
     66c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
     66e:	687b      	ldr	r3, [r7, #4]
     670:	689b      	ldr	r3, [r3, #8]
     672:	f003 0304 	and.w	r3, r3, #4	; 0x4
     676:	2b00      	cmp	r3, #0
     678:	d003      	beq.n	682 <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
     67a:	f04f 0301 	mov.w	r3, #1	; 0x1
     67e:	73fb      	strb	r3, [r7, #15]
     680:	e002      	b.n	688 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
     682:	f04f 0300 	mov.w	r3, #0	; 0x0
     686:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
     688:	7bfb      	ldrb	r3, [r7, #15]
}
     68a:	4618      	mov	r0, r3
     68c:	f107 0714 	add.w	r7, r7, #20	; 0x14
     690:	46bd      	mov	sp, r7
     692:	bc80      	pop	{r7}
     694:	4770      	bx	lr
     696:	46c0      	nop			(mov r8, r8)

00000698 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     698:	b480      	push	{r7}
     69a:	b083      	sub	sp, #12
     69c:	af00      	add	r7, sp, #0
     69e:	6078      	str	r0, [r7, #4]
     6a0:	460b      	mov	r3, r1
     6a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     6a4:	78fb      	ldrb	r3, [r7, #3]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d006      	beq.n	6b8 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
     6aa:	687b      	ldr	r3, [r7, #4]
     6ac:	689b      	ldr	r3, [r3, #8]
     6ae:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
     6b2:	687b      	ldr	r3, [r7, #4]
     6b4:	609a      	str	r2, [r3, #8]
     6b6:	e005      	b.n	6c4 <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	689b      	ldr	r3, [r3, #8]
     6bc:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	609a      	str	r2, [r3, #8]
  }
}
     6c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
     6c8:	46bd      	mov	sp, r7
     6ca:	bc80      	pop	{r7}
     6cc:	4770      	bx	lr
     6ce:	46c0      	nop			(mov r8, r8)

000006d0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
     6d0:	b480      	push	{r7}
     6d2:	b085      	sub	sp, #20
     6d4:	af00      	add	r7, sp, #0
     6d6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     6d8:	f04f 0300 	mov.w	r3, #0	; 0x0
     6dc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
     6de:	687b      	ldr	r3, [r7, #4]
     6e0:	689b      	ldr	r3, [r3, #8]
     6e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     6e6:	2b00      	cmp	r3, #0
     6e8:	d003      	beq.n	6f2 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
     6ea:	f04f 0301 	mov.w	r3, #1	; 0x1
     6ee:	73fb      	strb	r3, [r7, #15]
     6f0:	e002      	b.n	6f8 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
     6f2:	f04f 0300 	mov.w	r3, #0	; 0x0
     6f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
     6f8:	7bfb      	ldrb	r3, [r7, #15]
}
     6fa:	4618      	mov	r0, r3
     6fc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     700:	46bd      	mov	sp, r7
     702:	bc80      	pop	{r7}
     704:	4770      	bx	lr
     706:	46c0      	nop			(mov r8, r8)

00000708 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *   count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
     708:	b480      	push	{r7}
     70a:	b085      	sub	sp, #20
     70c:	af00      	add	r7, sp, #0
     70e:	6078      	str	r0, [r7, #4]
     710:	460b      	mov	r3, r1
     712:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     714:	f04f 0300 	mov.w	r3, #0	; 0x0
     718:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     71a:	f04f 0300 	mov.w	r3, #0	; 0x0
     71e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
     720:	687b      	ldr	r3, [r7, #4]
     722:	685b      	ldr	r3, [r3, #4]
     724:	60bb      	str	r3, [r7, #8]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
     726:	68bb      	ldr	r3, [r7, #8]
     728:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
     72c:	60bb      	str	r3, [r7, #8]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
     72e:	78fb      	ldrb	r3, [r7, #3]
     730:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     734:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 13;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	ea4f 3243 	mov.w	r2, r3, lsl #13
     73c:	68bb      	ldr	r3, [r7, #8]
     73e:	ea43 0302 	orr.w	r3, r3, r2
     742:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
     744:	687a      	ldr	r2, [r7, #4]
     746:	68bb      	ldr	r3, [r7, #8]
     748:	6053      	str	r3, [r2, #4]
}
     74a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     74e:	46bd      	mov	sp, r7
     750:	bc80      	pop	{r7}
     752:	4770      	bx	lr

00000754 <ADC_DiscModeCmd>:
  *   on regular group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     754:	b480      	push	{r7}
     756:	b083      	sub	sp, #12
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]
     75c:	460b      	mov	r3, r1
     75e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     760:	78fb      	ldrb	r3, [r7, #3]
     762:	2b00      	cmp	r3, #0
     764:	d006      	beq.n	774 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
     766:	687b      	ldr	r3, [r7, #4]
     768:	685b      	ldr	r3, [r3, #4]
     76a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     76e:	687b      	ldr	r3, [r7, #4]
     770:	605a      	str	r2, [r3, #4]
     772:	e005      	b.n	780 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
     774:	687b      	ldr	r3, [r7, #4]
     776:	685b      	ldr	r3, [r3, #4]
     778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	605a      	str	r2, [r3, #4]
  }
}
     780:	f107 070c 	add.w	r7, r7, #12	; 0xc
     784:	46bd      	mov	sp, r7
     786:	bc80      	pop	{r7}
     788:	4770      	bx	lr
     78a:	46c0      	nop			(mov r8, r8)

0000078c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     78c:	b480      	push	{r7}
     78e:	b085      	sub	sp, #20
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	4618      	mov	r0, r3
     796:	460b      	mov	r3, r1
     798:	70fb      	strb	r3, [r7, #3]
     79a:	4613      	mov	r3, r2
     79c:	70bb      	strb	r3, [r7, #2]
     79e:	4603      	mov	r3, r0
     7a0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
     7a2:	f04f 0300 	mov.w	r3, #0	; 0x0
     7a6:	60bb      	str	r3, [r7, #8]
     7a8:	f04f 0300 	mov.w	r3, #0	; 0x0
     7ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     7ae:	78fb      	ldrb	r3, [r7, #3]
     7b0:	2b09      	cmp	r3, #9
     7b2:	d929      	bls.n	808 <ADC_RegularChannelConfig+0x7c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	68db      	ldr	r3, [r3, #12]
     7b8:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
     7ba:	78fa      	ldrb	r2, [r7, #3]
     7bc:	4613      	mov	r3, r2
     7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7c2:	4413      	add	r3, r2
     7c4:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     7c8:	f04f 0307 	mov.w	r3, #7	; 0x7
     7cc:	fa03 f302 	lsl.w	r3, r3, r2
     7d0:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     7d2:	68fb      	ldr	r3, [r7, #12]
     7d4:	ea6f 0203 	mvn.w	r2, r3
     7d8:	68bb      	ldr	r3, [r7, #8]
     7da:	ea03 0302 	and.w	r3, r3, r2
     7de:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     7e0:	7879      	ldrb	r1, [r7, #1]
     7e2:	78fa      	ldrb	r2, [r7, #3]
     7e4:	4613      	mov	r3, r2
     7e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
     7ea:	4413      	add	r3, r2
     7ec:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     7f0:	fa01 f303 	lsl.w	r3, r1, r3
     7f4:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     7f6:	68ba      	ldr	r2, [r7, #8]
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	ea42 0303 	orr.w	r3, r2, r3
     7fe:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     800:	687a      	ldr	r2, [r7, #4]
     802:	68bb      	ldr	r3, [r7, #8]
     804:	60d3      	str	r3, [r2, #12]
     806:	e024      	b.n	852 <ADC_RegularChannelConfig+0xc6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	691b      	ldr	r3, [r3, #16]
     80c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     80e:	78fa      	ldrb	r2, [r7, #3]
     810:	4613      	mov	r3, r2
     812:	ea4f 0343 	mov.w	r3, r3, lsl #1
     816:	441a      	add	r2, r3
     818:	f04f 0307 	mov.w	r3, #7	; 0x7
     81c:	fa03 f302 	lsl.w	r3, r3, r2
     820:	60fb      	str	r3, [r7, #12]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     822:	68fb      	ldr	r3, [r7, #12]
     824:	ea6f 0203 	mvn.w	r2, r3
     828:	68bb      	ldr	r3, [r7, #8]
     82a:	ea03 0302 	and.w	r3, r3, r2
     82e:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     830:	7879      	ldrb	r1, [r7, #1]
     832:	78fa      	ldrb	r2, [r7, #3]
     834:	4613      	mov	r3, r2
     836:	ea4f 0343 	mov.w	r3, r3, lsl #1
     83a:	4413      	add	r3, r2
     83c:	fa01 f303 	lsl.w	r3, r1, r3
     840:	60fb      	str	r3, [r7, #12]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     842:	68ba      	ldr	r2, [r7, #8]
     844:	68fb      	ldr	r3, [r7, #12]
     846:	ea42 0303 	orr.w	r3, r2, r3
     84a:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     84c:	687a      	ldr	r2, [r7, #4]
     84e:	68bb      	ldr	r3, [r7, #8]
     850:	6113      	str	r3, [r2, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
     852:	78bb      	ldrb	r3, [r7, #2]
     854:	2b06      	cmp	r3, #6
     856:	d829      	bhi.n	8ac <ADC_RegularChannelConfig+0x120>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
     858:	687b      	ldr	r3, [r7, #4]
     85a:	6b5b      	ldr	r3, [r3, #52]
     85c:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
     85e:	78bb      	ldrb	r3, [r7, #2]
     860:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     864:	4613      	mov	r3, r2
     866:	ea4f 0383 	mov.w	r3, r3, lsl #2
     86a:	441a      	add	r2, r3
     86c:	f04f 031f 	mov.w	r3, #31	; 0x1f
     870:	fa03 f302 	lsl.w	r3, r3, r2
     874:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     876:	68fb      	ldr	r3, [r7, #12]
     878:	ea6f 0203 	mvn.w	r2, r3
     87c:	68bb      	ldr	r3, [r7, #8]
     87e:	ea03 0302 	and.w	r3, r3, r2
     882:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
     884:	78f9      	ldrb	r1, [r7, #3]
     886:	78bb      	ldrb	r3, [r7, #2]
     888:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     88c:	4613      	mov	r3, r2
     88e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     892:	4413      	add	r3, r2
     894:	fa01 f303 	lsl.w	r3, r1, r3
     898:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     89a:	68ba      	ldr	r2, [r7, #8]
     89c:	68fb      	ldr	r3, [r7, #12]
     89e:	ea42 0303 	orr.w	r3, r2, r3
     8a2:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
     8a4:	687a      	ldr	r2, [r7, #4]
     8a6:	68bb      	ldr	r3, [r7, #8]
     8a8:	6353      	str	r3, [r2, #52]
     8aa:	e055      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
     8ac:	78bb      	ldrb	r3, [r7, #2]
     8ae:	2b0c      	cmp	r3, #12
     8b0:	d829      	bhi.n	906 <ADC_RegularChannelConfig+0x17a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
     8b2:	687b      	ldr	r3, [r7, #4]
     8b4:	6b1b      	ldr	r3, [r3, #48]
     8b6:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
     8b8:	78ba      	ldrb	r2, [r7, #2]
     8ba:	4613      	mov	r3, r2
     8bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8c0:	4413      	add	r3, r2
     8c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
     8c6:	f04f 031f 	mov.w	r3, #31	; 0x1f
     8ca:	fa03 f302 	lsl.w	r3, r3, r2
     8ce:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     8d0:	68fb      	ldr	r3, [r7, #12]
     8d2:	ea6f 0203 	mvn.w	r2, r3
     8d6:	68bb      	ldr	r3, [r7, #8]
     8d8:	ea03 0302 	and.w	r3, r3, r2
     8dc:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
     8de:	78f9      	ldrb	r1, [r7, #3]
     8e0:	78ba      	ldrb	r2, [r7, #2]
     8e2:	4613      	mov	r3, r2
     8e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
     8e8:	4413      	add	r3, r2
     8ea:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
     8ee:	fa01 f303 	lsl.w	r3, r1, r3
     8f2:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     8f4:	68ba      	ldr	r2, [r7, #8]
     8f6:	68fb      	ldr	r3, [r7, #12]
     8f8:	ea42 0303 	orr.w	r3, r2, r3
     8fc:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
     8fe:	687a      	ldr	r2, [r7, #4]
     900:	68bb      	ldr	r3, [r7, #8]
     902:	6313      	str	r3, [r2, #48]
     904:	e028      	b.n	958 <ADC_RegularChannelConfig+0x1cc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
     906:	687b      	ldr	r3, [r7, #4]
     908:	6adb      	ldr	r3, [r3, #44]
     90a:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
     90c:	78ba      	ldrb	r2, [r7, #2]
     90e:	4613      	mov	r3, r2
     910:	ea4f 0383 	mov.w	r3, r3, lsl #2
     914:	4413      	add	r3, r2
     916:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     91a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     91e:	fa03 f302 	lsl.w	r3, r3, r2
     922:	60fb      	str	r3, [r7, #12]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
     924:	68fb      	ldr	r3, [r7, #12]
     926:	ea6f 0203 	mvn.w	r2, r3
     92a:	68bb      	ldr	r3, [r7, #8]
     92c:	ea03 0302 	and.w	r3, r3, r2
     930:	60bb      	str	r3, [r7, #8]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
     932:	78f9      	ldrb	r1, [r7, #3]
     934:	78ba      	ldrb	r2, [r7, #2]
     936:	4613      	mov	r3, r2
     938:	ea4f 0383 	mov.w	r3, r3, lsl #2
     93c:	4413      	add	r3, r2
     93e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
     942:	fa01 f303 	lsl.w	r3, r1, r3
     946:	60fb      	str	r3, [r7, #12]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
     948:	68ba      	ldr	r2, [r7, #8]
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	ea42 0303 	orr.w	r3, r2, r3
     950:	60bb      	str	r3, [r7, #8]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
     952:	687a      	ldr	r2, [r7, #4]
     954:	68bb      	ldr	r3, [r7, #8]
     956:	62d3      	str	r3, [r2, #44]
  }
}
     958:	f107 0714 	add.w	r7, r7, #20	; 0x14
     95c:	46bd      	mov	sp, r7
     95e:	bc80      	pop	{r7}
     960:	4770      	bx	lr
     962:	46c0      	nop			(mov r8, r8)

00000964 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     964:	b480      	push	{r7}
     966:	b083      	sub	sp, #12
     968:	af00      	add	r7, sp, #0
     96a:	6078      	str	r0, [r7, #4]
     96c:	460b      	mov	r3, r1
     96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     970:	78fb      	ldrb	r3, [r7, #3]
     972:	2b00      	cmp	r3, #0
     974:	d006      	beq.n	984 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
     976:	687b      	ldr	r3, [r7, #4]
     978:	689b      	ldr	r3, [r3, #8]
     97a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
     97e:	687b      	ldr	r3, [r7, #4]
     980:	609a      	str	r2, [r3, #8]
     982:	e005      	b.n	990 <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
     984:	687b      	ldr	r3, [r7, #4]
     986:	689b      	ldr	r3, [r3, #8]
     988:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
     98c:	687b      	ldr	r3, [r7, #4]
     98e:	609a      	str	r2, [r3, #8]
  }
}
     990:	f107 070c 	add.w	r7, r7, #12	; 0xc
     994:	46bd      	mov	sp, r7
     996:	bc80      	pop	{r7}
     998:	4770      	bx	lr
     99a:	46c0      	nop			(mov r8, r8)

0000099c <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
     99c:	b480      	push	{r7}
     99e:	b083      	sub	sp, #12
     9a0:	af00      	add	r7, sp, #0
     9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
     9a4:	687b      	ldr	r3, [r7, #4]
     9a6:	6cdb      	ldr	r3, [r3, #76]
     9a8:	b29b      	uxth	r3, r3
}
     9aa:	4618      	mov	r0, r3
     9ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9b0:	46bd      	mov	sp, r7
     9b2:	bc80      	pop	{r7}
     9b4:	4770      	bx	lr
     9b6:	46c0      	nop			(mov r8, r8)

000009b8 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
     9b8:	b480      	push	{r7}
     9ba:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
     9bc:	4b02      	ldr	r3, [pc, #8]	(9c8 <ADC_GetDualModeConversionValue+0x10>)
     9be:	681b      	ldr	r3, [r3, #0]
}
     9c0:	4618      	mov	r0, r3
     9c2:	46bd      	mov	sp, r7
     9c4:	bc80      	pop	{r7}
     9c6:	4770      	bx	lr
     9c8:	4001244c 	.word	0x4001244c

000009cc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     9cc:	b480      	push	{r7}
     9ce:	b083      	sub	sp, #12
     9d0:	af00      	add	r7, sp, #0
     9d2:	6078      	str	r0, [r7, #4]
     9d4:	460b      	mov	r3, r1
     9d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     9d8:	78fb      	ldrb	r3, [r7, #3]
     9da:	2b00      	cmp	r3, #0
     9dc:	d006      	beq.n	9ec <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     9e6:	687b      	ldr	r3, [r7, #4]
     9e8:	605a      	str	r2, [r3, #4]
     9ea:	e005      	b.n	9f8 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	685b      	ldr	r3, [r3, #4]
     9f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
     9f4:	687b      	ldr	r3, [r7, #4]
     9f6:	605a      	str	r2, [r3, #4]
  }
}
     9f8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     9fc:	46bd      	mov	sp, r7
     9fe:	bc80      	pop	{r7}
     a00:	4770      	bx	lr
     a02:	46c0      	nop			(mov r8, r8)

00000a04 <ADC_InjectedDiscModeCmd>:
  *   on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a04:	b480      	push	{r7}
     a06:	b083      	sub	sp, #12
     a08:	af00      	add	r7, sp, #0
     a0a:	6078      	str	r0, [r7, #4]
     a0c:	460b      	mov	r3, r1
     a0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a10:	78fb      	ldrb	r3, [r7, #3]
     a12:	2b00      	cmp	r3, #0
     a14:	d006      	beq.n	a24 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
     a1e:	687b      	ldr	r3, [r7, #4]
     a20:	605a      	str	r2, [r3, #4]
     a22:	e005      	b.n	a30 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
     a24:	687b      	ldr	r3, [r7, #4]
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
     a2c:	687b      	ldr	r3, [r7, #4]
     a2e:	605a      	str	r2, [r3, #4]
  }
}
     a30:	f107 070c 	add.w	r7, r7, #12	; 0xc
     a34:	46bd      	mov	sp, r7
     a36:	bc80      	pop	{r7}
     a38:	4770      	bx	lr
     a3a:	46c0      	nop			(mov r8, r8)

00000a3c <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
     a3c:	b480      	push	{r7}
     a3e:	b085      	sub	sp, #20
     a40:	af00      	add	r7, sp, #0
     a42:	6078      	str	r0, [r7, #4]
     a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     a46:	f04f 0300 	mov.w	r3, #0	; 0x0
     a4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	689b      	ldr	r3, [r3, #8]
     a50:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
     a52:	68fb      	ldr	r3, [r7, #12]
     a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
     a58:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
     a5a:	68fa      	ldr	r2, [r7, #12]
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	ea42 0303 	orr.w	r3, r2, r3
     a62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
     a64:	687a      	ldr	r2, [r7, #4]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	6093      	str	r3, [r2, #8]
}
     a6a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     a6e:	46bd      	mov	sp, r7
     a70:	bc80      	pop	{r7}
     a72:	4770      	bx	lr

00000a74 <ADC_ExternalTrigInjectedConvCmd>:
  *   injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     a74:	b480      	push	{r7}
     a76:	b083      	sub	sp, #12
     a78:	af00      	add	r7, sp, #0
     a7a:	6078      	str	r0, [r7, #4]
     a7c:	460b      	mov	r3, r1
     a7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     a80:	78fb      	ldrb	r3, [r7, #3]
     a82:	2b00      	cmp	r3, #0
     a84:	d006      	beq.n	a94 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
     a86:	687b      	ldr	r3, [r7, #4]
     a88:	689b      	ldr	r3, [r3, #8]
     a8a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	609a      	str	r2, [r3, #8]
     a92:	e005      	b.n	aa0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	689b      	ldr	r3, [r3, #8]
     a98:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
     a9c:	687b      	ldr	r3, [r7, #4]
     a9e:	609a      	str	r2, [r3, #8]
  }
}
     aa0:	f107 070c 	add.w	r7, r7, #12	; 0xc
     aa4:	46bd      	mov	sp, r7
     aa6:	bc80      	pop	{r7}
     aa8:	4770      	bx	lr
     aaa:	46c0      	nop			(mov r8, r8)

00000aac <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
     aac:	b480      	push	{r7}
     aae:	b083      	sub	sp, #12
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
     ab4:	460b      	mov	r3, r1
     ab6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     ab8:	78fb      	ldrb	r3, [r7, #3]
     aba:	2b00      	cmp	r3, #0
     abc:	d006      	beq.n	acc <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	689b      	ldr	r3, [r3, #8]
     ac2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	609a      	str	r2, [r3, #8]
     aca:	e005      	b.n	ad8 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	689b      	ldr	r3, [r3, #8]
     ad0:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	609a      	str	r2, [r3, #8]
  }
}
     ad8:	f107 070c 	add.w	r7, r7, #12	; 0xc
     adc:	46bd      	mov	sp, r7
     ade:	bc80      	pop	{r7}
     ae0:	4770      	bx	lr
     ae2:	46c0      	nop			(mov r8, r8)

00000ae4 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
     ae4:	b480      	push	{r7}
     ae6:	b085      	sub	sp, #20
     ae8:	af00      	add	r7, sp, #0
     aea:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
     aec:	f04f 0300 	mov.w	r3, #0	; 0x0
     af0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
     af2:	687b      	ldr	r3, [r7, #4]
     af4:	689b      	ldr	r3, [r3, #8]
     af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     afa:	2b00      	cmp	r3, #0
     afc:	d003      	beq.n	b06 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
     afe:	f04f 0301 	mov.w	r3, #1	; 0x1
     b02:	73fb      	strb	r3, [r7, #15]
     b04:	e002      	b.n	b0c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
     b06:	f04f 0300 	mov.w	r3, #0	; 0x0
     b0a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
     b0c:	7bfb      	ldrb	r3, [r7, #15]
}
     b0e:	4618      	mov	r0, r3
     b10:	f107 0714 	add.w	r7, r7, #20	; 0x14
     b14:	46bd      	mov	sp, r7
     b16:	bc80      	pop	{r7}
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			(mov r8, r8)

00000b1c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     b1c:	b480      	push	{r7}
     b1e:	b087      	sub	sp, #28
     b20:	af00      	add	r7, sp, #0
     b22:	6078      	str	r0, [r7, #4]
     b24:	4618      	mov	r0, r3
     b26:	460b      	mov	r3, r1
     b28:	70fb      	strb	r3, [r7, #3]
     b2a:	4613      	mov	r3, r2
     b2c:	70bb      	strb	r3, [r7, #2]
     b2e:	4603      	mov	r3, r0
     b30:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
     b32:	f04f 0300 	mov.w	r3, #0	; 0x0
     b36:	60fb      	str	r3, [r7, #12]
     b38:	f04f 0300 	mov.w	r3, #0	; 0x0
     b3c:	613b      	str	r3, [r7, #16]
     b3e:	f04f 0300 	mov.w	r3, #0	; 0x0
     b42:	617b      	str	r3, [r7, #20]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
     b44:	78fb      	ldrb	r3, [r7, #3]
     b46:	2b09      	cmp	r3, #9
     b48:	d929      	bls.n	b9e <ADC_InjectedChannelConfig+0x82>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	68db      	ldr	r3, [r3, #12]
     b4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
     b50:	78fa      	ldrb	r2, [r7, #3]
     b52:	4613      	mov	r3, r2
     b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b58:	4413      	add	r3, r2
     b5a:	f1a3 021e 	sub.w	r2, r3, #30	; 0x1e
     b5e:	f04f 0307 	mov.w	r3, #7	; 0x7
     b62:	fa03 f302 	lsl.w	r3, r3, r2
     b66:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	ea6f 0203 	mvn.w	r2, r3
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	ea03 0302 	and.w	r3, r3, r2
     b74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
     b76:	7879      	ldrb	r1, [r7, #1]
     b78:	78fa      	ldrb	r2, [r7, #3]
     b7a:	4613      	mov	r3, r2
     b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
     b80:	4413      	add	r3, r2
     b82:	f1a3 031e 	sub.w	r3, r3, #30	; 0x1e
     b86:	fa01 f303 	lsl.w	r3, r1, r3
     b8a:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     b8c:	68fa      	ldr	r2, [r7, #12]
     b8e:	693b      	ldr	r3, [r7, #16]
     b90:	ea42 0303 	orr.w	r3, r2, r3
     b94:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
     b96:	687a      	ldr	r2, [r7, #4]
     b98:	68fb      	ldr	r3, [r7, #12]
     b9a:	60d3      	str	r3, [r2, #12]
     b9c:	e024      	b.n	be8 <ADC_InjectedChannelConfig+0xcc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	691b      	ldr	r3, [r3, #16]
     ba2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
     ba4:	78fa      	ldrb	r2, [r7, #3]
     ba6:	4613      	mov	r3, r2
     ba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bac:	441a      	add	r2, r3
     bae:	f04f 0307 	mov.w	r3, #7	; 0x7
     bb2:	fa03 f302 	lsl.w	r3, r3, r2
     bb6:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
     bb8:	693b      	ldr	r3, [r7, #16]
     bba:	ea6f 0203 	mvn.w	r2, r3
     bbe:	68fb      	ldr	r3, [r7, #12]
     bc0:	ea03 0302 	and.w	r3, r3, r2
     bc4:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     bc6:	7879      	ldrb	r1, [r7, #1]
     bc8:	78fa      	ldrb	r2, [r7, #3]
     bca:	4613      	mov	r3, r2
     bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
     bd0:	4413      	add	r3, r2
     bd2:	fa01 f303 	lsl.w	r3, r1, r3
     bd6:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
     bd8:	68fa      	ldr	r2, [r7, #12]
     bda:	693b      	ldr	r3, [r7, #16]
     bdc:	ea42 0303 	orr.w	r3, r2, r3
     be0:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
     be2:	687a      	ldr	r2, [r7, #4]
     be4:	68fb      	ldr	r3, [r7, #12]
     be6:	6113      	str	r3, [r2, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     be8:	687b      	ldr	r3, [r7, #4]
     bea:	6b9b      	ldr	r3, [r3, #56]
     bec:	60fb      	str	r3, [r7, #12]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
     bee:	68fb      	ldr	r3, [r7, #12]
     bf0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
     bf4:	ea4f 5313 	mov.w	r3, r3, lsr #20
     bf8:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     bfa:	697b      	ldr	r3, [r7, #20]
     bfc:	b2db      	uxtb	r3, r3
     bfe:	ea6f 0303 	mvn.w	r3, r3
     c02:	b2da      	uxtb	r2, r3
     c04:	78bb      	ldrb	r3, [r7, #2]
     c06:	4413      	add	r3, r2
     c08:	b2db      	uxtb	r3, r3
     c0a:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c0e:	b2db      	uxtb	r3, r3
     c10:	461a      	mov	r2, r3
     c12:	4613      	mov	r3, r2
     c14:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c18:	441a      	add	r2, r3
     c1a:	f04f 031f 	mov.w	r3, #31	; 0x1f
     c1e:	fa03 f302 	lsl.w	r3, r3, r2
     c22:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
     c24:	693b      	ldr	r3, [r7, #16]
     c26:	ea6f 0203 	mvn.w	r2, r3
     c2a:	68fb      	ldr	r3, [r7, #12]
     c2c:	ea03 0302 	and.w	r3, r3, r2
     c30:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     c32:	78f9      	ldrb	r1, [r7, #3]
     c34:	697b      	ldr	r3, [r7, #20]
     c36:	b2db      	uxtb	r3, r3
     c38:	ea6f 0303 	mvn.w	r3, r3
     c3c:	b2da      	uxtb	r2, r3
     c3e:	78bb      	ldrb	r3, [r7, #2]
     c40:	4413      	add	r3, r2
     c42:	b2db      	uxtb	r3, r3
     c44:	f103 0303 	add.w	r3, r3, #3	; 0x3
     c48:	b2db      	uxtb	r3, r3
     c4a:	461a      	mov	r2, r3
     c4c:	4613      	mov	r3, r2
     c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
     c52:	4413      	add	r3, r2
     c54:	fa01 f303 	lsl.w	r3, r1, r3
     c58:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
     c5a:	68fa      	ldr	r2, [r7, #12]
     c5c:	693b      	ldr	r3, [r7, #16]
     c5e:	ea42 0303 	orr.w	r3, r2, r3
     c62:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     c64:	687a      	ldr	r2, [r7, #4]
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	6393      	str	r3, [r2, #56]
}
     c6a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     c6e:	46bd      	mov	sp, r7
     c70:	bc80      	pop	{r7}
     c72:	4770      	bx	lr

00000c74 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
     c74:	b480      	push	{r7}
     c76:	b085      	sub	sp, #20
     c78:	af00      	add	r7, sp, #0
     c7a:	6078      	str	r0, [r7, #4]
     c7c:	460b      	mov	r3, r1
     c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
     c80:	f04f 0300 	mov.w	r3, #0	; 0x0
     c84:	60bb      	str	r3, [r7, #8]
  uint32_t tmpreg2 = 0;
     c86:	f04f 0300 	mov.w	r3, #0	; 0x0
     c8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	6b9b      	ldr	r3, [r3, #56]
     c90:	60bb      	str	r3, [r7, #8]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
     c92:	68bb      	ldr	r3, [r7, #8]
     c94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
     c98:	60bb      	str	r3, [r7, #8]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
     c9a:	78fb      	ldrb	r3, [r7, #3]
     c9c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ca0:	60fb      	str	r3, [r7, #12]
  tmpreg1 |= tmpreg2 << 20;
     ca2:	68fb      	ldr	r3, [r7, #12]
     ca4:	ea4f 5203 	mov.w	r2, r3, lsl #20
     ca8:	68bb      	ldr	r3, [r7, #8]
     caa:	ea43 0302 	orr.w	r3, r3, r2
     cae:	60bb      	str	r3, [r7, #8]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
     cb0:	687a      	ldr	r2, [r7, #4]
     cb2:	68bb      	ldr	r3, [r7, #8]
     cb4:	6393      	str	r3, [r2, #56]
}
     cb6:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cba:	46bd      	mov	sp, r7
     cbc:	bc80      	pop	{r7}
     cbe:	4770      	bx	lr

00000cc0 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
     cc0:	b480      	push	{r7}
     cc2:	b085      	sub	sp, #20
     cc4:	af00      	add	r7, sp, #0
     cc6:	6078      	str	r0, [r7, #4]
     cc8:	460b      	mov	r3, r1
     cca:	70fb      	strb	r3, [r7, #3]
     ccc:	4613      	mov	r3, r2
     cce:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
     cd0:	f04f 0300 	mov.w	r3, #0	; 0x0
     cd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
     cda:	78fa      	ldrb	r2, [r7, #3]
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	4413      	add	r3, r2
     ce0:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
     ce2:	68fb      	ldr	r3, [r7, #12]
     ce4:	461a      	mov	r2, r3
     ce6:	883b      	ldrh	r3, [r7, #0]
     ce8:	6013      	str	r3, [r2, #0]
}
     cea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     cee:	46bd      	mov	sp, r7
     cf0:	bc80      	pop	{r7}
     cf2:	4770      	bx	lr

00000cf4 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
     cf4:	b480      	push	{r7}
     cf6:	b085      	sub	sp, #20
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
     cfc:	460b      	mov	r3, r1
     cfe:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
     d00:	f04f 0300 	mov.w	r3, #0	; 0x0
     d04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
     d0a:	78fa      	ldrb	r2, [r7, #3]
     d0c:	68fb      	ldr	r3, [r7, #12]
     d0e:	4413      	add	r3, r2
     d10:	f103 0328 	add.w	r3, r3, #40	; 0x28
     d14:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
     d16:	68fb      	ldr	r3, [r7, #12]
     d18:	681b      	ldr	r3, [r3, #0]
     d1a:	b29b      	uxth	r3, r3
}
     d1c:	4618      	mov	r0, r3
     d1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d22:	46bd      	mov	sp, r7
     d24:	bc80      	pop	{r7}
     d26:	4770      	bx	lr

00000d28 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
     d28:	b480      	push	{r7}
     d2a:	b085      	sub	sp, #20
     d2c:	af00      	add	r7, sp, #0
     d2e:	6078      	str	r0, [r7, #4]
     d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
     d32:	f04f 0300 	mov.w	r3, #0	; 0x0
     d36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d38:	687b      	ldr	r3, [r7, #4]
     d3a:	685b      	ldr	r3, [r3, #4]
     d3c:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
     d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
     d48:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
     d4a:	68fa      	ldr	r2, [r7, #12]
     d4c:	683b      	ldr	r3, [r7, #0]
     d4e:	ea42 0303 	orr.w	r3, r2, r3
     d52:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     d54:	687a      	ldr	r2, [r7, #4]
     d56:	68fb      	ldr	r3, [r7, #12]
     d58:	6053      	str	r3, [r2, #4]
}
     d5a:	f107 0714 	add.w	r7, r7, #20	; 0x14
     d5e:	46bd      	mov	sp, r7
     d60:	bc80      	pop	{r7}
     d62:	4770      	bx	lr

00000d64 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     d64:	b480      	push	{r7}
     d66:	b083      	sub	sp, #12
     d68:	af00      	add	r7, sp, #0
     d6a:	6078      	str	r0, [r7, #4]
     d6c:	460b      	mov	r3, r1
     d6e:	807b      	strh	r3, [r7, #2]
     d70:	4613      	mov	r3, r2
     d72:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
     d74:	887a      	ldrh	r2, [r7, #2]
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	625a      	str	r2, [r3, #36]
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
     d7a:	883a      	ldrh	r2, [r7, #0]
     d7c:	687b      	ldr	r3, [r7, #4]
     d7e:	629a      	str	r2, [r3, #40]
}
     d80:	f107 070c 	add.w	r7, r7, #12	; 0xc
     d84:	46bd      	mov	sp, r7
     d86:	bc80      	pop	{r7}
     d88:	4770      	bx	lr
     d8a:	46c0      	nop			(mov r8, r8)

00000d8c <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
     d8c:	b480      	push	{r7}
     d8e:	b085      	sub	sp, #20
     d90:	af00      	add	r7, sp, #0
     d92:	6078      	str	r0, [r7, #4]
     d94:	460b      	mov	r3, r1
     d96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
     d98:	f04f 0300 	mov.w	r3, #0	; 0x0
     d9c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
     da4:	68fb      	ldr	r3, [r7, #12]
     da6:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
     daa:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
     dac:	78fa      	ldrb	r2, [r7, #3]
     dae:	68fb      	ldr	r3, [r7, #12]
     db0:	ea43 0302 	orr.w	r3, r3, r2
     db4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
     db6:	687a      	ldr	r2, [r7, #4]
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	6053      	str	r3, [r2, #4]
}
     dbc:	f107 0714 	add.w	r7, r7, #20	; 0x14
     dc0:	46bd      	mov	sp, r7
     dc2:	bc80      	pop	{r7}
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			(mov r8, r8)

00000dc8 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
     dc8:	b480      	push	{r7}
     dca:	b083      	sub	sp, #12
     dcc:	af00      	add	r7, sp, #0
     dce:	4603      	mov	r3, r0
     dd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
     dd2:	79fb      	ldrb	r3, [r7, #7]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d006      	beq.n	de6 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
     dd8:	4a08      	ldr	r2, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dda:	4b08      	ldr	r3, [pc, #32]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     ddc:	689b      	ldr	r3, [r3, #8]
     dde:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     de2:	6093      	str	r3, [r2, #8]
     de4:	e005      	b.n	df2 <ADC_TempSensorVrefintCmd+0x2a>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
     de6:	4a05      	ldr	r2, [pc, #20]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     de8:	4b04      	ldr	r3, [pc, #16]	(dfc <ADC_TempSensorVrefintCmd+0x34>)
     dea:	689b      	ldr	r3, [r3, #8]
     dec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
     df0:	6093      	str	r3, [r2, #8]
  }
}
     df2:	f107 070c 	add.w	r7, r7, #12	; 0xc
     df6:	46bd      	mov	sp, r7
     df8:	bc80      	pop	{r7}
     dfa:	4770      	bx	lr
     dfc:	40012400 	.word	0x40012400

00000e00 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e00:	b480      	push	{r7}
     e02:	b085      	sub	sp, #20
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
     e08:	460b      	mov	r3, r1
     e0a:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
     e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
     e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	681a      	ldr	r2, [r3, #0]
     e16:	78fb      	ldrb	r3, [r7, #3]
     e18:	ea02 0303 	and.w	r3, r2, r3
     e1c:	2b00      	cmp	r3, #0
     e1e:	d003      	beq.n	e28 <ADC_GetFlagStatus+0x28>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
     e20:	f04f 0301 	mov.w	r3, #1	; 0x1
     e24:	73fb      	strb	r3, [r7, #15]
     e26:	e002      	b.n	e2e <ADC_GetFlagStatus+0x2e>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
     e28:	f04f 0300 	mov.w	r3, #0	; 0x0
     e2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
     e2e:	7bfb      	ldrb	r3, [r7, #15]
}
     e30:	4618      	mov	r0, r3
     e32:	f107 0714 	add.w	r7, r7, #20	; 0x14
     e36:	46bd      	mov	sp, r7
     e38:	bc80      	pop	{r7}
     e3a:	4770      	bx	lr

00000e3c <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
     e3c:	b480      	push	{r7}
     e3e:	b083      	sub	sp, #12
     e40:	af00      	add	r7, sp, #0
     e42:	6078      	str	r0, [r7, #4]
     e44:	460b      	mov	r3, r1
     e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
     e48:	78fb      	ldrb	r3, [r7, #3]
     e4a:	ea6f 0203 	mvn.w	r2, r3
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	601a      	str	r2, [r3, #0]
}
     e52:	f107 070c 	add.w	r7, r7, #12	; 0xc
     e56:	46bd      	mov	sp, r7
     e58:	bc80      	pop	{r7}
     e5a:	4770      	bx	lr

00000e5c <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     e5c:	b480      	push	{r7}
     e5e:	b087      	sub	sp, #28
     e60:	af00      	add	r7, sp, #0
     e62:	6078      	str	r0, [r7, #4]
     e64:	460b      	mov	r3, r1
     e66:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
     e68:	f04f 0300 	mov.w	r3, #0	; 0x0
     e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t itmask = 0, enablestatus = 0;
     e6e:	f04f 0300 	mov.w	r3, #0	; 0x0
     e72:	613b      	str	r3, [r7, #16]
     e74:	f04f 0300 	mov.w	r3, #0	; 0x0
     e78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
     e7a:	887b      	ldrh	r3, [r7, #2]
     e7c:	ea4f 2313 	mov.w	r3, r3, lsr #8
     e80:	b29b      	uxth	r3, r3
     e82:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	685a      	ldr	r2, [r3, #4]
     e88:	887b      	ldrh	r3, [r7, #2]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	ea02 0303 	and.w	r3, r2, r3
     e90:	617b      	str	r3, [r7, #20]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	681a      	ldr	r2, [r3, #0]
     e96:	693b      	ldr	r3, [r7, #16]
     e98:	ea02 0303 	and.w	r3, r2, r3
     e9c:	2b00      	cmp	r3, #0
     e9e:	d006      	beq.n	eae <ADC_GetITStatus+0x52>
     ea0:	697b      	ldr	r3, [r7, #20]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d003      	beq.n	eae <ADC_GetITStatus+0x52>
  {
    /* ADC_IT is set */
    bitstatus = SET;
     ea6:	f04f 0301 	mov.w	r3, #1	; 0x1
     eaa:	73fb      	strb	r3, [r7, #15]
     eac:	e002      	b.n	eb4 <ADC_GetITStatus+0x58>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
     eae:	f04f 0300 	mov.w	r3, #0	; 0x0
     eb2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
     eb4:	7bfb      	ldrb	r3, [r7, #15]
}
     eb6:	4618      	mov	r0, r3
     eb8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
     ebc:	46bd      	mov	sp, r7
     ebe:	bc80      	pop	{r7}
     ec0:	4770      	bx	lr
     ec2:	46c0      	nop			(mov r8, r8)

00000ec4 <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
     ec4:	b480      	push	{r7}
     ec6:	b085      	sub	sp, #20
     ec8:	af00      	add	r7, sp, #0
     eca:	6078      	str	r0, [r7, #4]
     ecc:	460b      	mov	r3, r1
     ece:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
     ed0:	f04f 0300 	mov.w	r3, #0	; 0x0
     ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
     ed6:	887b      	ldrh	r3, [r7, #2]
     ed8:	ea4f 2313 	mov.w	r3, r3, lsr #8
     edc:	b29b      	uxth	r3, r3
     ede:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
     ee0:	7bfb      	ldrb	r3, [r7, #15]
     ee2:	ea6f 0203 	mvn.w	r2, r3
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	601a      	str	r2, [r3, #0]
}
     eea:	f107 0714 	add.w	r7, r7, #20	; 0x14
     eee:	46bd      	mov	sp, r7
     ef0:	bc80      	pop	{r7}
     ef2:	4770      	bx	lr

00000ef4 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
     ef4:	b480      	push	{r7}
     ef6:	b083      	sub	sp, #12
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	f023 0201 	bic.w	r2, r3, #1	; 0x1
     f04:	687b      	ldr	r3, [r7, #4]
     f06:	601a      	str	r2, [r3, #0]
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
     f08:	687a      	ldr	r2, [r7, #4]
     f0a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f0e:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
     f10:	687a      	ldr	r2, [r7, #4]
     f12:	f04f 0300 	mov.w	r3, #0	; 0x0
     f16:	6053      	str	r3, [r2, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
     f18:	687a      	ldr	r2, [r7, #4]
     f1a:	f04f 0300 	mov.w	r3, #0	; 0x0
     f1e:	6093      	str	r3, [r2, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
     f20:	687a      	ldr	r2, [r7, #4]
     f22:	f04f 0300 	mov.w	r3, #0	; 0x0
     f26:	60d3      	str	r3, [r2, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
     f28:	687a      	ldr	r2, [r7, #4]
     f2a:	4b43      	ldr	r3, [pc, #268]	(1038 <DMA_DeInit+0x144>)
     f2c:	429a      	cmp	r2, r3
     f2e:	d106      	bne.n	f3e <DMA_DeInit+0x4a>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
     f30:	4a42      	ldr	r2, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f32:	4b42      	ldr	r3, [pc, #264]	(103c <DMA_DeInit+0x148>)
     f34:	685b      	ldr	r3, [r3, #4]
     f36:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     f3a:	6053      	str	r3, [r2, #4]
     f3c:	e077      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel2)
     f3e:	687a      	ldr	r2, [r7, #4]
     f40:	4b3f      	ldr	r3, [pc, #252]	(1040 <DMA_DeInit+0x14c>)
     f42:	429a      	cmp	r2, r3
     f44:	d106      	bne.n	f54 <DMA_DeInit+0x60>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
     f46:	4a3d      	ldr	r2, [pc, #244]	(103c <DMA_DeInit+0x148>)
     f48:	4b3c      	ldr	r3, [pc, #240]	(103c <DMA_DeInit+0x148>)
     f4a:	685b      	ldr	r3, [r3, #4]
     f4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     f50:	6053      	str	r3, [r2, #4]
     f52:	e06c      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel3)
     f54:	687a      	ldr	r2, [r7, #4]
     f56:	4b3b      	ldr	r3, [pc, #236]	(1044 <DMA_DeInit+0x150>)
     f58:	429a      	cmp	r2, r3
     f5a:	d106      	bne.n	f6a <DMA_DeInit+0x76>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
     f5c:	4a37      	ldr	r2, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f5e:	4b37      	ldr	r3, [pc, #220]	(103c <DMA_DeInit+0x148>)
     f60:	685b      	ldr	r3, [r3, #4]
     f62:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
     f66:	6053      	str	r3, [r2, #4]
     f68:	e061      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel4)
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	4b36      	ldr	r3, [pc, #216]	(1048 <DMA_DeInit+0x154>)
     f6e:	429a      	cmp	r2, r3
     f70:	d106      	bne.n	f80 <DMA_DeInit+0x8c>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
     f72:	4a32      	ldr	r2, [pc, #200]	(103c <DMA_DeInit+0x148>)
     f74:	4b31      	ldr	r3, [pc, #196]	(103c <DMA_DeInit+0x148>)
     f76:	685b      	ldr	r3, [r3, #4]
     f78:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
     f7c:	6053      	str	r3, [r2, #4]
     f7e:	e056      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel5)
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	4b32      	ldr	r3, [pc, #200]	(104c <DMA_DeInit+0x158>)
     f84:	429a      	cmp	r2, r3
     f86:	d106      	bne.n	f96 <DMA_DeInit+0xa2>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
     f88:	4a2c      	ldr	r2, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8a:	4b2c      	ldr	r3, [pc, #176]	(103c <DMA_DeInit+0x148>)
     f8c:	685b      	ldr	r3, [r3, #4]
     f8e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
     f92:	6053      	str	r3, [r2, #4]
     f94:	e04b      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel6)
     f96:	687a      	ldr	r2, [r7, #4]
     f98:	4b2d      	ldr	r3, [pc, #180]	(1050 <DMA_DeInit+0x15c>)
     f9a:	429a      	cmp	r2, r3
     f9c:	d106      	bne.n	fac <DMA_DeInit+0xb8>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
     f9e:	4a27      	ldr	r2, [pc, #156]	(103c <DMA_DeInit+0x148>)
     fa0:	4b26      	ldr	r3, [pc, #152]	(103c <DMA_DeInit+0x148>)
     fa2:	685b      	ldr	r3, [r3, #4]
     fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     fa8:	6053      	str	r3, [r2, #4]
     faa:	e040      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA1_Channel7)
     fac:	687a      	ldr	r2, [r7, #4]
     fae:	4b29      	ldr	r3, [pc, #164]	(1054 <DMA_DeInit+0x160>)
     fb0:	429a      	cmp	r2, r3
     fb2:	d106      	bne.n	fc2 <DMA_DeInit+0xce>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
     fb4:	4a21      	ldr	r2, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb6:	4b21      	ldr	r3, [pc, #132]	(103c <DMA_DeInit+0x148>)
     fb8:	685b      	ldr	r3, [r3, #4]
     fba:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
     fbe:	6053      	str	r3, [r2, #4]
     fc0:	e035      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel1)
     fc2:	687a      	ldr	r2, [r7, #4]
     fc4:	4b24      	ldr	r3, [pc, #144]	(1058 <DMA_DeInit+0x164>)
     fc6:	429a      	cmp	r2, r3
     fc8:	d106      	bne.n	fd8 <DMA_DeInit+0xe4>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
     fca:	4a24      	ldr	r2, [pc, #144]	(105c <DMA_DeInit+0x168>)
     fcc:	4b23      	ldr	r3, [pc, #140]	(105c <DMA_DeInit+0x168>)
     fce:	685b      	ldr	r3, [r3, #4]
     fd0:	f043 030f 	orr.w	r3, r3, #15	; 0xf
     fd4:	6053      	str	r3, [r2, #4]
     fd6:	e02a      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel2)
     fd8:	687a      	ldr	r2, [r7, #4]
     fda:	4b21      	ldr	r3, [pc, #132]	(1060 <DMA_DeInit+0x16c>)
     fdc:	429a      	cmp	r2, r3
     fde:	d106      	bne.n	fee <DMA_DeInit+0xfa>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
     fe0:	4a1e      	ldr	r2, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe2:	4b1e      	ldr	r3, [pc, #120]	(105c <DMA_DeInit+0x168>)
     fe4:	685b      	ldr	r3, [r3, #4]
     fe6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
     fea:	6053      	str	r3, [r2, #4]
     fec:	e01f      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel3)
     fee:	687a      	ldr	r2, [r7, #4]
     ff0:	4b1c      	ldr	r3, [pc, #112]	(1064 <DMA_DeInit+0x170>)
     ff2:	429a      	cmp	r2, r3
     ff4:	d106      	bne.n	1004 <DMA_DeInit+0x110>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
     ff6:	4a19      	ldr	r2, [pc, #100]	(105c <DMA_DeInit+0x168>)
     ff8:	4b18      	ldr	r3, [pc, #96]	(105c <DMA_DeInit+0x168>)
     ffa:	685b      	ldr	r3, [r3, #4]
     ffc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    1000:	6053      	str	r3, [r2, #4]
    1002:	e014      	b.n	102e <DMA_DeInit+0x13a>
  }
  else if (DMAy_Channelx == DMA2_Channel4)
    1004:	687a      	ldr	r2, [r7, #4]
    1006:	4b18      	ldr	r3, [pc, #96]	(1068 <DMA_DeInit+0x174>)
    1008:	429a      	cmp	r2, r3
    100a:	d106      	bne.n	101a <DMA_DeInit+0x126>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
    100c:	4a13      	ldr	r2, [pc, #76]	(105c <DMA_DeInit+0x168>)
    100e:	4b13      	ldr	r3, [pc, #76]	(105c <DMA_DeInit+0x168>)
    1010:	685b      	ldr	r3, [r3, #4]
    1012:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    1016:	6053      	str	r3, [r2, #4]
    1018:	e009      	b.n	102e <DMA_DeInit+0x13a>
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
    101a:	687a      	ldr	r2, [r7, #4]
    101c:	4b13      	ldr	r3, [pc, #76]	(106c <DMA_DeInit+0x178>)
    101e:	429a      	cmp	r2, r3
    1020:	d105      	bne.n	102e <DMA_DeInit+0x13a>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    1022:	4a0e      	ldr	r2, [pc, #56]	(105c <DMA_DeInit+0x168>)
    1024:	4b0d      	ldr	r3, [pc, #52]	(105c <DMA_DeInit+0x168>)
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
    102c:	6053      	str	r3, [r2, #4]
    }
  }
}
    102e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1032:	46bd      	mov	sp, r7
    1034:	bc80      	pop	{r7}
    1036:	4770      	bx	lr
    1038:	40020008 	.word	0x40020008
    103c:	40020000 	.word	0x40020000
    1040:	4002001c 	.word	0x4002001c
    1044:	40020030 	.word	0x40020030
    1048:	40020044 	.word	0x40020044
    104c:	40020058 	.word	0x40020058
    1050:	4002006c 	.word	0x4002006c
    1054:	40020080 	.word	0x40020080
    1058:	40020408 	.word	0x40020408
    105c:	40020400 	.word	0x40020400
    1060:	4002041c 	.word	0x4002041c
    1064:	40020430 	.word	0x40020430
    1068:	40020444 	.word	0x40020444
    106c:	40020458 	.word	0x40020458

00001070 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
    1070:	b480      	push	{r7}
    1072:	b085      	sub	sp, #20
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    107a:	f04f 0300 	mov.w	r3, #0	; 0x0
    107e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
    108c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1090:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    1092:	683b      	ldr	r3, [r7, #0]
    1094:	689a      	ldr	r2, [r3, #8]
    1096:	683b      	ldr	r3, [r7, #0]
    1098:	6a1b      	ldr	r3, [r3, #32]
    109a:	ea42 0203 	orr.w	r2, r2, r3
    109e:	683b      	ldr	r3, [r7, #0]
    10a0:	691b      	ldr	r3, [r3, #16]
    10a2:	ea42 0203 	orr.w	r2, r2, r3
    10a6:	683b      	ldr	r3, [r7, #0]
    10a8:	695b      	ldr	r3, [r3, #20]
    10aa:	ea42 0203 	orr.w	r2, r2, r3
    10ae:	683b      	ldr	r3, [r7, #0]
    10b0:	699b      	ldr	r3, [r3, #24]
    10b2:	ea42 0203 	orr.w	r2, r2, r3
    10b6:	683b      	ldr	r3, [r7, #0]
    10b8:	69db      	ldr	r3, [r3, #28]
    10ba:	ea42 0203 	orr.w	r2, r2, r3
    10be:	683b      	ldr	r3, [r7, #0]
    10c0:	6a5b      	ldr	r3, [r3, #36]
    10c2:	ea42 0203 	orr.w	r2, r2, r3
    10c6:	683b      	ldr	r3, [r7, #0]
    10c8:	6a9b      	ldr	r3, [r3, #40]
    10ca:	ea42 0203 	orr.w	r2, r2, r3
    10ce:	68fb      	ldr	r3, [r7, #12]
    10d0:	ea43 0302 	orr.w	r3, r3, r2
    10d4:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
    10d6:	687a      	ldr	r2, [r7, #4]
    10d8:	68fb      	ldr	r3, [r7, #12]
    10da:	6013      	str	r3, [r2, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
    10dc:	683b      	ldr	r3, [r7, #0]
    10de:	68da      	ldr	r2, [r3, #12]
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	681a      	ldr	r2, [r3, #0]
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
    10ec:	683b      	ldr	r3, [r7, #0]
    10ee:	685a      	ldr	r2, [r3, #4]
    10f0:	687b      	ldr	r3, [r7, #4]
    10f2:	60da      	str	r2, [r3, #12]
}
    10f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    10f8:	46bd      	mov	sp, r7
    10fa:	bc80      	pop	{r7}
    10fc:	4770      	bx	lr
    10fe:	46c0      	nop			(mov r8, r8)

00001100 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
    1100:	b480      	push	{r7}
    1102:	b083      	sub	sp, #12
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    1108:	687a      	ldr	r2, [r7, #4]
    110a:	f04f 0300 	mov.w	r3, #0	; 0x0
    110e:	6013      	str	r3, [r2, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    1110:	687a      	ldr	r2, [r7, #4]
    1112:	f04f 0300 	mov.w	r3, #0	; 0x0
    1116:	6053      	str	r3, [r2, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    1118:	687a      	ldr	r2, [r7, #4]
    111a:	f04f 0300 	mov.w	r3, #0	; 0x0
    111e:	6093      	str	r3, [r2, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
    1120:	687a      	ldr	r2, [r7, #4]
    1122:	f04f 0300 	mov.w	r3, #0	; 0x0
    1126:	60d3      	str	r3, [r2, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    1128:	687a      	ldr	r2, [r7, #4]
    112a:	f04f 0300 	mov.w	r3, #0	; 0x0
    112e:	6113      	str	r3, [r2, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	f04f 0300 	mov.w	r3, #0	; 0x0
    1136:	6153      	str	r3, [r2, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    1138:	687a      	ldr	r2, [r7, #4]
    113a:	f04f 0300 	mov.w	r3, #0	; 0x0
    113e:	6193      	str	r3, [r2, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    1140:	687a      	ldr	r2, [r7, #4]
    1142:	f04f 0300 	mov.w	r3, #0	; 0x0
    1146:	61d3      	str	r3, [r2, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    1148:	687a      	ldr	r2, [r7, #4]
    114a:	f04f 0300 	mov.w	r3, #0	; 0x0
    114e:	6213      	str	r3, [r2, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    1150:	687a      	ldr	r2, [r7, #4]
    1152:	f04f 0300 	mov.w	r3, #0	; 0x0
    1156:	6253      	str	r3, [r2, #36]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    1158:	687a      	ldr	r2, [r7, #4]
    115a:	f04f 0300 	mov.w	r3, #0	; 0x0
    115e:	6293      	str	r3, [r2, #40]
}
    1160:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1164:	46bd      	mov	sp, r7
    1166:	bc80      	pop	{r7}
    1168:	4770      	bx	lr
    116a:	46c0      	nop			(mov r8, r8)

0000116c <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
    116c:	b480      	push	{r7}
    116e:	b083      	sub	sp, #12
    1170:	af00      	add	r7, sp, #0
    1172:	6078      	str	r0, [r7, #4]
    1174:	460b      	mov	r3, r1
    1176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1178:	78fb      	ldrb	r3, [r7, #3]
    117a:	2b00      	cmp	r3, #0
    117c:	d006      	beq.n	118c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= CCR_ENABLE_Set;
    117e:	687b      	ldr	r3, [r7, #4]
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	f043 0201 	orr.w	r2, r3, #1	; 0x1
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	601a      	str	r2, [r3, #0]
    118a:	e005      	b.n	1198 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
    118c:	687b      	ldr	r3, [r7, #4]
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	f023 0201 	bic.w	r2, r3, #1	; 0x1
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	601a      	str	r2, [r3, #0]
  }
}
    1198:	f107 070c 	add.w	r7, r7, #12	; 0xc
    119c:	46bd      	mov	sp, r7
    119e:	bc80      	pop	{r7}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			(mov r8, r8)

000011a4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
    11a4:	b480      	push	{r7}
    11a6:	b085      	sub	sp, #20
    11a8:	af00      	add	r7, sp, #0
    11aa:	60f8      	str	r0, [r7, #12]
    11ac:	60b9      	str	r1, [r7, #8]
    11ae:	4613      	mov	r3, r2
    11b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	2b00      	cmp	r3, #0
    11b6:	d007      	beq.n	11c8 <DMA_ITConfig+0x24>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
    11b8:	68fb      	ldr	r3, [r7, #12]
    11ba:	681a      	ldr	r2, [r3, #0]
    11bc:	68bb      	ldr	r3, [r7, #8]
    11be:	ea42 0203 	orr.w	r2, r2, r3
    11c2:	68fb      	ldr	r3, [r7, #12]
    11c4:	601a      	str	r2, [r3, #0]
    11c6:	e008      	b.n	11da <DMA_ITConfig+0x36>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	68bb      	ldr	r3, [r7, #8]
    11ce:	ea6f 0303 	mvn.w	r3, r3
    11d2:	ea02 0203 	and.w	r2, r2, r3
    11d6:	68fb      	ldr	r3, [r7, #12]
    11d8:	601a      	str	r2, [r3, #0]
  }
}
    11da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    11de:	46bd      	mov	sp, r7
    11e0:	bc80      	pop	{r7}
    11e2:	4770      	bx	lr

000011e4 <DMA_GetCurrDataCounter>:
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval The number of remaining data units in the current DMAy Channelx
  *   transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
    11e4:	b480      	push	{r7}
    11e6:	b083      	sub	sp, #12
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	685b      	ldr	r3, [r3, #4]
    11f0:	b29b      	uxth	r3, r3
}
    11f2:	4618      	mov	r0, r3
    11f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    11f8:	46bd      	mov	sp, r7
    11fa:	bc80      	pop	{r7}
    11fc:	4770      	bx	lr
    11fe:	46c0      	nop			(mov r8, r8)

00001200 <DMA_GetFlagStatus>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
{
    1200:	b480      	push	{r7}
    1202:	b085      	sub	sp, #20
    1204:	af00      	add	r7, sp, #0
    1206:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    1208:	f04f 0300 	mov.w	r3, #0	; 0x0
    120c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    120e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1212:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1214:	687b      	ldr	r3, [r7, #4]
    1216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    121a:	2b00      	cmp	r3, #0
    121c:	d003      	beq.n	1226 <DMA_GetFlagStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    121e:	4b0d      	ldr	r3, [pc, #52]	(1254 <DMA_GetFlagStatus+0x54>)
    1220:	681b      	ldr	r3, [r3, #0]
    1222:	60fb      	str	r3, [r7, #12]
    1224:	e002      	b.n	122c <DMA_GetFlagStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    1226:	4b0c      	ldr	r3, [pc, #48]	(1258 <DMA_GetFlagStatus+0x58>)
    1228:	681b      	ldr	r3, [r3, #0]
    122a:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
    122c:	68fb      	ldr	r3, [r7, #12]
    122e:	687a      	ldr	r2, [r7, #4]
    1230:	ea03 0302 	and.w	r3, r3, r2
    1234:	2b00      	cmp	r3, #0
    1236:	d003      	beq.n	1240 <DMA_GetFlagStatus+0x40>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
    1238:	f04f 0301 	mov.w	r3, #1	; 0x1
    123c:	72fb      	strb	r3, [r7, #11]
    123e:	e002      	b.n	1246 <DMA_GetFlagStatus+0x46>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
    1240:	f04f 0300 	mov.w	r3, #0	; 0x0
    1244:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
    1246:	7afb      	ldrb	r3, [r7, #11]
}
    1248:	4618      	mov	r0, r3
    124a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    124e:	46bd      	mov	sp, r7
    1250:	bc80      	pop	{r7}
    1252:	4770      	bx	lr
    1254:	40020400 	.word	0x40020400
    1258:	40020000 	.word	0x40020000

0000125c <DMA_ClearFlag>:
  *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
  *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
  * @retval None
  */
void DMA_ClearFlag(uint32_t DMA_FLAG)
{
    125c:	b480      	push	{r7}
    125e:	b083      	sub	sp, #12
    1260:	af00      	add	r7, sp, #0
    1262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
    1264:	687b      	ldr	r3, [r7, #4]
    1266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    126a:	2b00      	cmp	r3, #0
    126c:	d003      	beq.n	1276 <DMA_ClearFlag+0x1a>
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
    126e:	4a06      	ldr	r2, [pc, #24]	(1288 <DMA_ClearFlag+0x2c>)
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	6053      	str	r3, [r2, #4]
    1274:	e002      	b.n	127c <DMA_ClearFlag+0x20>
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
    1276:	4a05      	ldr	r2, [pc, #20]	(128c <DMA_ClearFlag+0x30>)
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	6053      	str	r3, [r2, #4]
  }
}
    127c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1280:	46bd      	mov	sp, r7
    1282:	bc80      	pop	{r7}
    1284:	4770      	bx	lr
    1286:	46c0      	nop			(mov r8, r8)
    1288:	40020400 	.word	0x40020400
    128c:	40020000 	.word	0x40020000

00001290 <DMA_GetITStatus>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMA_IT)
{
    1290:	b480      	push	{r7}
    1292:	b085      	sub	sp, #20
    1294:	af00      	add	r7, sp, #0
    1296:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1298:	f04f 0300 	mov.w	r3, #0	; 0x0
    129c:	72fb      	strb	r3, [r7, #11]
  uint32_t tmpreg = 0;
    129e:	f04f 0300 	mov.w	r3, #0	; 0x0
    12a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12a4:	687b      	ldr	r3, [r7, #4]
    12a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12aa:	2b00      	cmp	r3, #0
    12ac:	d003      	beq.n	12b6 <DMA_GetITStatus+0x26>
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
    12ae:	4b0d      	ldr	r3, [pc, #52]	(12e4 <DMA_GetITStatus+0x54>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	60fb      	str	r3, [r7, #12]
    12b4:	e002      	b.n	12bc <DMA_GetITStatus+0x2c>
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
    12b6:	4b0c      	ldr	r3, [pc, #48]	(12e8 <DMA_GetITStatus+0x58>)
    12b8:	681b      	ldr	r3, [r3, #0]
    12ba:	60fb      	str	r3, [r7, #12]
  }

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	687a      	ldr	r2, [r7, #4]
    12c0:	ea03 0302 	and.w	r3, r3, r2
    12c4:	2b00      	cmp	r3, #0
    12c6:	d003      	beq.n	12d0 <DMA_GetITStatus+0x40>
  {
    /* DMA_IT is set */
    bitstatus = SET;
    12c8:	f04f 0301 	mov.w	r3, #1	; 0x1
    12cc:	72fb      	strb	r3, [r7, #11]
    12ce:	e002      	b.n	12d6 <DMA_GetITStatus+0x46>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
    12d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    12d4:	72fb      	strb	r3, [r7, #11]
  }
  /* Return the DMA_IT status */
  return  bitstatus;
    12d6:	7afb      	ldrb	r3, [r7, #11]
}
    12d8:	4618      	mov	r0, r3
    12da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    12de:	46bd      	mov	sp, r7
    12e0:	bc80      	pop	{r7}
    12e2:	4770      	bx	lr
    12e4:	40020400 	.word	0x40020400
    12e8:	40020000 	.word	0x40020000

000012ec <DMA_ClearITPendingBit>:
  *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
  *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMA_IT)
{
    12ec:	b480      	push	{r7}
    12ee:	b083      	sub	sp, #12
    12f0:	af00      	add	r7, sp, #0
    12f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
    12f4:	687b      	ldr	r3, [r7, #4]
    12f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    12fa:	2b00      	cmp	r3, #0
    12fc:	d003      	beq.n	1306 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
    12fe:	4a06      	ldr	r2, [pc, #24]	(1318 <DMA_ClearITPendingBit+0x2c>)
    1300:	687b      	ldr	r3, [r7, #4]
    1302:	6053      	str	r3, [r2, #4]
    1304:	e002      	b.n	130c <DMA_ClearITPendingBit+0x20>
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
    1306:	4a05      	ldr	r2, [pc, #20]	(131c <DMA_ClearITPendingBit+0x30>)
    1308:	687b      	ldr	r3, [r7, #4]
    130a:	6053      	str	r3, [r2, #4]
  }
}
    130c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1310:	46bd      	mov	sp, r7
    1312:	bc80      	pop	{r7}
    1314:	4770      	bx	lr
    1316:	46c0      	nop			(mov r8, r8)
    1318:	40020400 	.word	0x40020400
    131c:	40020000 	.word	0x40020000

00001320 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    1320:	b480      	push	{r7}
    1322:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    1324:	4a0a      	ldr	r2, [pc, #40]	(1350 <EXTI_DeInit+0x30>)
    1326:	f04f 0300 	mov.w	r3, #0	; 0x0
    132a:	6013      	str	r3, [r2, #0]
  EXTI->EMR = 0x00000000;
    132c:	4a08      	ldr	r2, [pc, #32]	(1350 <EXTI_DeInit+0x30>)
    132e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1332:	6053      	str	r3, [r2, #4]
  EXTI->RTSR = 0x00000000; 
    1334:	4a06      	ldr	r2, [pc, #24]	(1350 <EXTI_DeInit+0x30>)
    1336:	f04f 0300 	mov.w	r3, #0	; 0x0
    133a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR = 0x00000000; 
    133c:	4a04      	ldr	r2, [pc, #16]	(1350 <EXTI_DeInit+0x30>)
    133e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1342:	60d3      	str	r3, [r2, #12]
  EXTI->PR = 0x000FFFFF;
    1344:	4a02      	ldr	r2, [pc, #8]	(1350 <EXTI_DeInit+0x30>)
    1346:	4b03      	ldr	r3, [pc, #12]	(1354 <EXTI_DeInit+0x34>)
    1348:	6153      	str	r3, [r2, #20]
}
    134a:	46bd      	mov	sp, r7
    134c:	bc80      	pop	{r7}
    134e:	4770      	bx	lr
    1350:	40010400 	.word	0x40010400
    1354:	000fffff 	.word	0x000fffff

00001358 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *   that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1358:	b480      	push	{r7}
    135a:	b085      	sub	sp, #20
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    1360:	f04f 0300 	mov.w	r3, #0	; 0x0
    1364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    1366:	4b3b      	ldr	r3, [pc, #236]	(1454 <EXTI_Init+0xfc>)
    1368:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    136a:	687b      	ldr	r3, [r7, #4]
    136c:	799b      	ldrb	r3, [r3, #6]
    136e:	2b00      	cmp	r3, #0
    1370:	d05b      	beq.n	142a <EXTI_Init+0xd2>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    1372:	4938      	ldr	r1, [pc, #224]	(1454 <EXTI_Init+0xfc>)
    1374:	4b37      	ldr	r3, [pc, #220]	(1454 <EXTI_Init+0xfc>)
    1376:	681a      	ldr	r2, [r3, #0]
    1378:	687b      	ldr	r3, [r7, #4]
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	ea6f 0303 	mvn.w	r3, r3
    1380:	ea02 0303 	and.w	r3, r2, r3
    1384:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    1386:	4933      	ldr	r1, [pc, #204]	(1454 <EXTI_Init+0xfc>)
    1388:	4b32      	ldr	r3, [pc, #200]	(1454 <EXTI_Init+0xfc>)
    138a:	685a      	ldr	r2, [r3, #4]
    138c:	687b      	ldr	r3, [r7, #4]
    138e:	681b      	ldr	r3, [r3, #0]
    1390:	ea6f 0303 	mvn.w	r3, r3
    1394:	ea02 0303 	and.w	r3, r2, r3
    1398:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	791b      	ldrb	r3, [r3, #4]
    139e:	461a      	mov	r2, r3
    13a0:	68fb      	ldr	r3, [r7, #12]
    13a2:	4413      	add	r3, r2
    13a4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    13a6:	68f9      	ldr	r1, [r7, #12]
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	681a      	ldr	r2, [r3, #0]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	681b      	ldr	r3, [r3, #0]
    13b0:	ea42 0303 	orr.w	r3, r2, r3
    13b4:	600b      	str	r3, [r1, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    13b6:	4927      	ldr	r1, [pc, #156]	(1454 <EXTI_Init+0xfc>)
    13b8:	4b26      	ldr	r3, [pc, #152]	(1454 <EXTI_Init+0xfc>)
    13ba:	689a      	ldr	r2, [r3, #8]
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	ea6f 0303 	mvn.w	r3, r3
    13c4:	ea02 0303 	and.w	r3, r2, r3
    13c8:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    13ca:	4922      	ldr	r1, [pc, #136]	(1454 <EXTI_Init+0xfc>)
    13cc:	4b21      	ldr	r3, [pc, #132]	(1454 <EXTI_Init+0xfc>)
    13ce:	68da      	ldr	r2, [r3, #12]
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	ea6f 0303 	mvn.w	r3, r3
    13d8:	ea02 0303 	and.w	r3, r2, r3
    13dc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	795b      	ldrb	r3, [r3, #5]
    13e2:	2b10      	cmp	r3, #16
    13e4:	d110      	bne.n	1408 <EXTI_Init+0xb0>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    13e6:	491b      	ldr	r1, [pc, #108]	(1454 <EXTI_Init+0xfc>)
    13e8:	4b1a      	ldr	r3, [pc, #104]	(1454 <EXTI_Init+0xfc>)
    13ea:	689a      	ldr	r2, [r3, #8]
    13ec:	687b      	ldr	r3, [r7, #4]
    13ee:	681b      	ldr	r3, [r3, #0]
    13f0:	ea42 0303 	orr.w	r3, r2, r3
    13f4:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    13f6:	4917      	ldr	r1, [pc, #92]	(1454 <EXTI_Init+0xfc>)
    13f8:	4b16      	ldr	r3, [pc, #88]	(1454 <EXTI_Init+0xfc>)
    13fa:	68da      	ldr	r2, [r3, #12]
    13fc:	687b      	ldr	r3, [r7, #4]
    13fe:	681b      	ldr	r3, [r3, #0]
    1400:	ea42 0303 	orr.w	r3, r2, r3
    1404:	60cb      	str	r3, [r1, #12]
    1406:	e020      	b.n	144a <EXTI_Init+0xf2>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    1408:	4b12      	ldr	r3, [pc, #72]	(1454 <EXTI_Init+0xfc>)
    140a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    140c:	687b      	ldr	r3, [r7, #4]
    140e:	795b      	ldrb	r3, [r3, #5]
    1410:	461a      	mov	r2, r3
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	4413      	add	r3, r2
    1416:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    1418:	68f9      	ldr	r1, [r7, #12]
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681a      	ldr	r2, [r3, #0]
    141e:	687b      	ldr	r3, [r7, #4]
    1420:	681b      	ldr	r3, [r3, #0]
    1422:	ea42 0303 	orr.w	r3, r2, r3
    1426:	600b      	str	r3, [r1, #0]
    1428:	e00f      	b.n	144a <EXTI_Init+0xf2>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    142a:	687b      	ldr	r3, [r7, #4]
    142c:	791b      	ldrb	r3, [r3, #4]
    142e:	461a      	mov	r2, r3
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	4413      	add	r3, r2
    1434:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    1436:	68f9      	ldr	r1, [r7, #12]
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	681a      	ldr	r2, [r3, #0]
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	681b      	ldr	r3, [r3, #0]
    1440:	ea6f 0303 	mvn.w	r3, r3
    1444:	ea02 0303 	and.w	r3, r2, r3
    1448:	600b      	str	r3, [r1, #0]
  }
}
    144a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    144e:	46bd      	mov	sp, r7
    1450:	bc80      	pop	{r7}
    1452:	4770      	bx	lr
    1454:	40010400 	.word	0x40010400

00001458 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    1458:	b480      	push	{r7}
    145a:	b083      	sub	sp, #12
    145c:	af00      	add	r7, sp, #0
    145e:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
    1460:	687a      	ldr	r2, [r7, #4]
    1462:	f04f 0300 	mov.w	r3, #0	; 0x0
    1466:	6013      	str	r3, [r2, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    1468:	687a      	ldr	r2, [r7, #4]
    146a:	f04f 0300 	mov.w	r3, #0	; 0x0
    146e:	7113      	strb	r3, [r2, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    1470:	687a      	ldr	r2, [r7, #4]
    1472:	f04f 030c 	mov.w	r3, #12	; 0xc
    1476:	7153      	strb	r3, [r2, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    1478:	687a      	ldr	r2, [r7, #4]
    147a:	f04f 0300 	mov.w	r3, #0	; 0x0
    147e:	7193      	strb	r3, [r2, #6]
}
    1480:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1484:	46bd      	mov	sp, r7
    1486:	bc80      	pop	{r7}
    1488:	4770      	bx	lr
    148a:	46c0      	nop			(mov r8, r8)

0000148c <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    148c:	b480      	push	{r7}
    148e:	b083      	sub	sp, #12
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    1494:	4905      	ldr	r1, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1496:	4b05      	ldr	r3, [pc, #20]	(14ac <EXTI_GenerateSWInterrupt+0x20>)
    1498:	691a      	ldr	r2, [r3, #16]
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	ea42 0303 	orr.w	r3, r2, r3
    14a0:	610b      	str	r3, [r1, #16]
}
    14a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14a6:	46bd      	mov	sp, r7
    14a8:	bc80      	pop	{r7}
    14aa:	4770      	bx	lr
    14ac:	40010400 	.word	0x40010400

000014b0 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    14b0:	b480      	push	{r7}
    14b2:	b085      	sub	sp, #20
    14b4:	af00      	add	r7, sp, #0
    14b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    14b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    14bc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    14be:	4b0a      	ldr	r3, [pc, #40]	(14e8 <EXTI_GetFlagStatus+0x38>)
    14c0:	695a      	ldr	r2, [r3, #20]
    14c2:	687b      	ldr	r3, [r7, #4]
    14c4:	ea02 0303 	and.w	r3, r2, r3
    14c8:	2b00      	cmp	r3, #0
    14ca:	d003      	beq.n	14d4 <EXTI_GetFlagStatus+0x24>
  {
    bitstatus = SET;
    14cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    14d0:	73fb      	strb	r3, [r7, #15]
    14d2:	e002      	b.n	14da <EXTI_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
    14d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    14d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    14da:	7bfb      	ldrb	r3, [r7, #15]
}
    14dc:	4618      	mov	r0, r3
    14de:	f107 0714 	add.w	r7, r7, #20	; 0x14
    14e2:	46bd      	mov	sp, r7
    14e4:	bc80      	pop	{r7}
    14e6:	4770      	bx	lr
    14e8:	40010400 	.word	0x40010400

000014ec <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    14ec:	b480      	push	{r7}
    14ee:	b083      	sub	sp, #12
    14f0:	af00      	add	r7, sp, #0
    14f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    14f4:	4a03      	ldr	r2, [pc, #12]	(1504 <EXTI_ClearFlag+0x18>)
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	6153      	str	r3, [r2, #20]
}
    14fa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    14fe:	46bd      	mov	sp, r7
    1500:	bc80      	pop	{r7}
    1502:	4770      	bx	lr
    1504:	40010400 	.word	0x40010400

00001508 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    1508:	b480      	push	{r7}
    150a:	b085      	sub	sp, #20
    150c:	af00      	add	r7, sp, #0
    150e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    1510:	f04f 0300 	mov.w	r3, #0	; 0x0
    1514:	72fb      	strb	r3, [r7, #11]
  uint32_t enablestatus = 0;
    1516:	f04f 0300 	mov.w	r3, #0	; 0x0
    151a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    151c:	4b0e      	ldr	r3, [pc, #56]	(1558 <EXTI_GetITStatus+0x50>)
    151e:	681a      	ldr	r2, [r3, #0]
    1520:	687b      	ldr	r3, [r7, #4]
    1522:	ea02 0303 	and.w	r3, r2, r3
    1526:	60fb      	str	r3, [r7, #12]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    1528:	4b0b      	ldr	r3, [pc, #44]	(1558 <EXTI_GetITStatus+0x50>)
    152a:	695a      	ldr	r2, [r3, #20]
    152c:	687b      	ldr	r3, [r7, #4]
    152e:	ea02 0303 	and.w	r3, r2, r3
    1532:	2b00      	cmp	r3, #0
    1534:	d006      	beq.n	1544 <EXTI_GetITStatus+0x3c>
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	2b00      	cmp	r3, #0
    153a:	d003      	beq.n	1544 <EXTI_GetITStatus+0x3c>
  {
    bitstatus = SET;
    153c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1540:	72fb      	strb	r3, [r7, #11]
    1542:	e002      	b.n	154a <EXTI_GetITStatus+0x42>
  }
  else
  {
    bitstatus = RESET;
    1544:	f04f 0300 	mov.w	r3, #0	; 0x0
    1548:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    154a:	7afb      	ldrb	r3, [r7, #11]
}
    154c:	4618      	mov	r0, r3
    154e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1552:	46bd      	mov	sp, r7
    1554:	bc80      	pop	{r7}
    1556:	4770      	bx	lr
    1558:	40010400 	.word	0x40010400

0000155c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    155c:	b480      	push	{r7}
    155e:	b083      	sub	sp, #12
    1560:	af00      	add	r7, sp, #0
    1562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    1564:	4a03      	ldr	r2, [pc, #12]	(1574 <EXTI_ClearITPendingBit+0x18>)
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	6153      	str	r3, [r2, #20]
}
    156a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    156e:	46bd      	mov	sp, r7
    1570:	bc80      	pop	{r7}
    1572:	4770      	bx	lr
    1574:	40010400 	.word	0x40010400

00001578 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
    1580:	687a      	ldr	r2, [r7, #4]
    1582:	4b3c      	ldr	r3, [pc, #240]	(1674 <GPIO_DeInit+0xfc>)
    1584:	429a      	cmp	r2, r3
    1586:	d10c      	bne.n	15a2 <GPIO_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1588:	f04f 0004 	mov.w	r0, #4	; 0x4
    158c:	f04f 0101 	mov.w	r1, #1	; 0x1
    1590:	f000 ffc0 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1594:	f04f 0004 	mov.w	r0, #4	; 0x4
    1598:	f04f 0100 	mov.w	r1, #0	; 0x0
    159c:	f000 ffba 	bl	2514 <RCC_APB2PeriphResetCmd>
    15a0:	e064      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOB)
    15a2:	687a      	ldr	r2, [r7, #4]
    15a4:	4b34      	ldr	r3, [pc, #208]	(1678 <GPIO_DeInit+0x100>)
    15a6:	429a      	cmp	r2, r3
    15a8:	d10c      	bne.n	15c4 <GPIO_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    15aa:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ae:	f04f 0101 	mov.w	r1, #1	; 0x1
    15b2:	f000 ffaf 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    15b6:	f04f 0008 	mov.w	r0, #8	; 0x8
    15ba:	f04f 0100 	mov.w	r1, #0	; 0x0
    15be:	f000 ffa9 	bl	2514 <RCC_APB2PeriphResetCmd>
    15c2:	e053      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOC)
    15c4:	687a      	ldr	r2, [r7, #4]
    15c6:	4b2d      	ldr	r3, [pc, #180]	(167c <GPIO_DeInit+0x104>)
    15c8:	429a      	cmp	r2, r3
    15ca:	d10c      	bne.n	15e6 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    15cc:	f04f 0010 	mov.w	r0, #16	; 0x10
    15d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    15d4:	f000 ff9e 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    15d8:	f04f 0010 	mov.w	r0, #16	; 0x10
    15dc:	f04f 0100 	mov.w	r1, #0	; 0x0
    15e0:	f000 ff98 	bl	2514 <RCC_APB2PeriphResetCmd>
    15e4:	e042      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOD)
    15e6:	687a      	ldr	r2, [r7, #4]
    15e8:	4b25      	ldr	r3, [pc, #148]	(1680 <GPIO_DeInit+0x108>)
    15ea:	429a      	cmp	r2, r3
    15ec:	d10c      	bne.n	1608 <GPIO_DeInit+0x90>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    15ee:	f04f 0020 	mov.w	r0, #32	; 0x20
    15f2:	f04f 0101 	mov.w	r1, #1	; 0x1
    15f6:	f000 ff8d 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    15fa:	f04f 0020 	mov.w	r0, #32	; 0x20
    15fe:	f04f 0100 	mov.w	r1, #0	; 0x0
    1602:	f000 ff87 	bl	2514 <RCC_APB2PeriphResetCmd>
    1606:	e031      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOE)
    1608:	687a      	ldr	r2, [r7, #4]
    160a:	4b1e      	ldr	r3, [pc, #120]	(1684 <GPIO_DeInit+0x10c>)
    160c:	429a      	cmp	r2, r3
    160e:	d10c      	bne.n	162a <GPIO_DeInit+0xb2>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1610:	f04f 0040 	mov.w	r0, #64	; 0x40
    1614:	f04f 0101 	mov.w	r1, #1	; 0x1
    1618:	f000 ff7c 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    161c:	f04f 0040 	mov.w	r0, #64	; 0x40
    1620:	f04f 0100 	mov.w	r1, #0	; 0x0
    1624:	f000 ff76 	bl	2514 <RCC_APB2PeriphResetCmd>
    1628:	e020      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else if (GPIOx == GPIOF)
    162a:	687a      	ldr	r2, [r7, #4]
    162c:	4b16      	ldr	r3, [pc, #88]	(1688 <GPIO_DeInit+0x110>)
    162e:	429a      	cmp	r2, r3
    1630:	d10c      	bne.n	164c <GPIO_DeInit+0xd4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1632:	f04f 0080 	mov.w	r0, #128	; 0x80
    1636:	f04f 0101 	mov.w	r1, #1	; 0x1
    163a:	f000 ff6b 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    163e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1642:	f04f 0100 	mov.w	r1, #0	; 0x0
    1646:	f000 ff65 	bl	2514 <RCC_APB2PeriphResetCmd>
    164a:	e00f      	b.n	166c <GPIO_DeInit+0xf4>
  }
  else
  {
    if (GPIOx == GPIOG)
    164c:	687a      	ldr	r2, [r7, #4]
    164e:	4b0f      	ldr	r3, [pc, #60]	(168c <GPIO_DeInit+0x114>)
    1650:	429a      	cmp	r2, r3
    1652:	d10b      	bne.n	166c <GPIO_DeInit+0xf4>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1654:	f44f 7080 	mov.w	r0, #256	; 0x100
    1658:	f04f 0101 	mov.w	r1, #1	; 0x1
    165c:	f000 ff5a 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1660:	f44f 7080 	mov.w	r0, #256	; 0x100
    1664:	f04f 0100 	mov.w	r1, #0	; 0x0
    1668:	f000 ff54 	bl	2514 <RCC_APB2PeriphResetCmd>
    }
  }
}
    166c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}
    1674:	40010800 	.word	0x40010800
    1678:	40010c00 	.word	0x40010c00
    167c:	40011000 	.word	0x40011000
    1680:	40011400 	.word	0x40011400
    1684:	40011800 	.word	0x40011800
    1688:	40011c00 	.word	0x40011c00
    168c:	40012000 	.word	0x40012000

00001690 <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1690:	b580      	push	{r7, lr}
    1692:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1694:	f04f 0001 	mov.w	r0, #1	; 0x1
    1698:	f04f 0101 	mov.w	r1, #1	; 0x1
    169c:	f000 ff3a 	bl	2514 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    16a0:	f04f 0001 	mov.w	r0, #1	; 0x1
    16a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    16a8:	f000 ff34 	bl	2514 <RCC_APB2PeriphResetCmd>
}
    16ac:	46bd      	mov	sp, r7
    16ae:	bd80      	pop	{r7, pc}

000016b0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    16b0:	b480      	push	{r7}
    16b2:	b089      	sub	sp, #36
    16b4:	af00      	add	r7, sp, #0
    16b6:	6078      	str	r0, [r7, #4]
    16b8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    16ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    16be:	60bb      	str	r3, [r7, #8]
    16c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    16c4:	60fb      	str	r3, [r7, #12]
    16c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    16ca:	613b      	str	r3, [r7, #16]
    16cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    16d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    16d6:	61bb      	str	r3, [r7, #24]
    16d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    16dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));

/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    16de:	683b      	ldr	r3, [r7, #0]
    16e0:	78db      	ldrb	r3, [r3, #3]
    16e2:	f003 030f 	and.w	r3, r3, #15	; 0xf
    16e6:	60bb      	str	r3, [r7, #8]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    16e8:	683b      	ldr	r3, [r7, #0]
    16ea:	78db      	ldrb	r3, [r3, #3]
    16ec:	f003 0310 	and.w	r3, r3, #16	; 0x10
    16f0:	2b00      	cmp	r3, #0
    16f2:	d006      	beq.n	1702 <GPIO_Init+0x52>
  {
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    16f4:	683b      	ldr	r3, [r7, #0]
    16f6:	789b      	ldrb	r3, [r3, #2]
    16f8:	461a      	mov	r2, r3
    16fa:	68bb      	ldr	r3, [r7, #8]
    16fc:	ea43 0302 	orr.w	r3, r3, r2
    1700:	60bb      	str	r3, [r7, #8]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1702:	683b      	ldr	r3, [r7, #0]
    1704:	881b      	ldrh	r3, [r3, #0]
    1706:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    170a:	2b00      	cmp	r3, #0
    170c:	d051      	beq.n	17b2 <GPIO_Init+0x102>
  {
    tmpreg = GPIOx->CRL;
    170e:	687b      	ldr	r3, [r7, #4]
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1714:	f04f 0300 	mov.w	r3, #0	; 0x0
    1718:	613b      	str	r3, [r7, #16]
    171a:	e044      	b.n	17a6 <GPIO_Init+0xf6>
    {
      pos = ((uint32_t)0x01) << pinpos;
    171c:	693a      	ldr	r2, [r7, #16]
    171e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1722:	fa03 f302 	lsl.w	r3, r3, r2
    1726:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1728:	683b      	ldr	r3, [r7, #0]
    172a:	881b      	ldrh	r3, [r3, #0]
    172c:	461a      	mov	r2, r3
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	ea02 0303 	and.w	r3, r2, r3
    1734:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    1736:	68fa      	ldr	r2, [r7, #12]
    1738:	697b      	ldr	r3, [r7, #20]
    173a:	429a      	cmp	r2, r3
    173c:	d12f      	bne.n	179e <GPIO_Init+0xee>
      {
        pos = pinpos << 2;
    173e:	693b      	ldr	r3, [r7, #16]
    1740:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1744:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1746:	697a      	ldr	r2, [r7, #20]
    1748:	f04f 030f 	mov.w	r3, #15	; 0xf
    174c:	fa03 f302 	lsl.w	r3, r3, r2
    1750:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1752:	69fb      	ldr	r3, [r7, #28]
    1754:	ea6f 0203 	mvn.w	r2, r3
    1758:	69bb      	ldr	r3, [r7, #24]
    175a:	ea03 0302 	and.w	r3, r3, r2
    175e:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1760:	697a      	ldr	r2, [r7, #20]
    1762:	68bb      	ldr	r3, [r7, #8]
    1764:	fa03 f202 	lsl.w	r2, r3, r2
    1768:	69bb      	ldr	r3, [r7, #24]
    176a:	ea43 0302 	orr.w	r3, r3, r2
    176e:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1770:	683b      	ldr	r3, [r7, #0]
    1772:	78db      	ldrb	r3, [r3, #3]
    1774:	2b28      	cmp	r3, #40
    1776:	d107      	bne.n	1788 <GPIO_Init+0xd8>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1778:	693a      	ldr	r2, [r7, #16]
    177a:	f04f 0301 	mov.w	r3, #1	; 0x1
    177e:	fa03 f202 	lsl.w	r2, r3, r2
    1782:	687b      	ldr	r3, [r7, #4]
    1784:	615a      	str	r2, [r3, #20]
    1786:	e00a      	b.n	179e <GPIO_Init+0xee>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1788:	683b      	ldr	r3, [r7, #0]
    178a:	78db      	ldrb	r3, [r3, #3]
    178c:	2b48      	cmp	r3, #72
    178e:	d106      	bne.n	179e <GPIO_Init+0xee>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1790:	693a      	ldr	r2, [r7, #16]
    1792:	f04f 0301 	mov.w	r3, #1	; 0x1
    1796:	fa03 f202 	lsl.w	r2, r3, r2
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    179e:	693b      	ldr	r3, [r7, #16]
    17a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    17a4:	613b      	str	r3, [r7, #16]
    17a6:	693b      	ldr	r3, [r7, #16]
    17a8:	2b07      	cmp	r3, #7
    17aa:	d9b7      	bls.n	171c <GPIO_Init+0x6c>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    17ac:	687a      	ldr	r2, [r7, #4]
    17ae:	69bb      	ldr	r3, [r7, #24]
    17b0:	6013      	str	r3, [r2, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    17b2:	683b      	ldr	r3, [r7, #0]
    17b4:	881b      	ldrh	r3, [r3, #0]
    17b6:	2bff      	cmp	r3, #255
    17b8:	d959      	bls.n	186e <GPIO_Init+0x1be>
  {
    tmpreg = GPIOx->CRH;
    17ba:	687b      	ldr	r3, [r7, #4]
    17bc:	685b      	ldr	r3, [r3, #4]
    17be:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    17c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    17c4:	613b      	str	r3, [r7, #16]
    17c6:	e04c      	b.n	1862 <GPIO_Init+0x1b2>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	f103 0308 	add.w	r3, r3, #8	; 0x8
    17ce:	461a      	mov	r2, r3
    17d0:	f04f 0301 	mov.w	r3, #1	; 0x1
    17d4:	fa03 f302 	lsl.w	r3, r3, r2
    17d8:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    17da:	683b      	ldr	r3, [r7, #0]
    17dc:	881b      	ldrh	r3, [r3, #0]
    17de:	461a      	mov	r2, r3
    17e0:	697b      	ldr	r3, [r7, #20]
    17e2:	ea02 0303 	and.w	r3, r2, r3
    17e6:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    17e8:	68fa      	ldr	r2, [r7, #12]
    17ea:	697b      	ldr	r3, [r7, #20]
    17ec:	429a      	cmp	r2, r3
    17ee:	d134      	bne.n	185a <GPIO_Init+0x1aa>
      {
        pos = pinpos << 2;
    17f0:	693b      	ldr	r3, [r7, #16]
    17f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    17f6:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    17f8:	697a      	ldr	r2, [r7, #20]
    17fa:	f04f 030f 	mov.w	r3, #15	; 0xf
    17fe:	fa03 f302 	lsl.w	r3, r3, r2
    1802:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	ea6f 0203 	mvn.w	r2, r3
    180a:	69bb      	ldr	r3, [r7, #24]
    180c:	ea03 0302 	and.w	r3, r3, r2
    1810:	61bb      	str	r3, [r7, #24]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1812:	697a      	ldr	r2, [r7, #20]
    1814:	68bb      	ldr	r3, [r7, #8]
    1816:	fa03 f202 	lsl.w	r2, r3, r2
    181a:	69bb      	ldr	r3, [r7, #24]
    181c:	ea43 0302 	orr.w	r3, r3, r2
    1820:	61bb      	str	r3, [r7, #24]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1822:	683b      	ldr	r3, [r7, #0]
    1824:	78db      	ldrb	r3, [r3, #3]
    1826:	2b28      	cmp	r3, #40
    1828:	d109      	bne.n	183e <GPIO_Init+0x18e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    182a:	693b      	ldr	r3, [r7, #16]
    182c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    1830:	461a      	mov	r2, r3
    1832:	f04f 0301 	mov.w	r3, #1	; 0x1
    1836:	fa03 f202 	lsl.w	r2, r3, r2
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    183e:	683b      	ldr	r3, [r7, #0]
    1840:	78db      	ldrb	r3, [r3, #3]
    1842:	2b48      	cmp	r3, #72
    1844:	d109      	bne.n	185a <GPIO_Init+0x1aa>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1846:	693b      	ldr	r3, [r7, #16]
    1848:	f103 0308 	add.w	r3, r3, #8	; 0x8
    184c:	461a      	mov	r2, r3
    184e:	f04f 0301 	mov.w	r3, #1	; 0x1
    1852:	fa03 f202 	lsl.w	r2, r3, r2
    1856:	687b      	ldr	r3, [r7, #4]
    1858:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    185a:	693b      	ldr	r3, [r7, #16]
    185c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1860:	613b      	str	r3, [r7, #16]
    1862:	693b      	ldr	r3, [r7, #16]
    1864:	2b07      	cmp	r3, #7
    1866:	d9af      	bls.n	17c8 <GPIO_Init+0x118>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1868:	687a      	ldr	r2, [r7, #4]
    186a:	69bb      	ldr	r3, [r7, #24]
    186c:	6053      	str	r3, [r2, #4]
  }
}
    186e:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1872:	46bd      	mov	sp, r7
    1874:	bc80      	pop	{r7}
    1876:	4770      	bx	lr

00001878 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1878:	b480      	push	{r7}
    187a:	b083      	sub	sp, #12
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1886:	8013      	strh	r3, [r2, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	f04f 0302 	mov.w	r3, #2	; 0x2
    188e:	7093      	strb	r3, [r2, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	f04f 0304 	mov.w	r3, #4	; 0x4
    1896:	70d3      	strb	r3, [r2, #3]
}
    1898:	f107 070c 	add.w	r7, r7, #12	; 0xc
    189c:	46bd      	mov	sp, r7
    189e:	bc80      	pop	{r7}
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			(mov r8, r8)

000018a4 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18a4:	b480      	push	{r7}
    18a6:	b085      	sub	sp, #20
    18a8:	af00      	add	r7, sp, #0
    18aa:	6078      	str	r0, [r7, #4]
    18ac:	460b      	mov	r3, r1
    18ae:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    18b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    18b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    18b6:	687b      	ldr	r3, [r7, #4]
    18b8:	689a      	ldr	r2, [r3, #8]
    18ba:	887b      	ldrh	r3, [r7, #2]
    18bc:	ea02 0303 	and.w	r3, r2, r3
    18c0:	2b00      	cmp	r3, #0
    18c2:	d003      	beq.n	18cc <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    18c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    18c8:	73fb      	strb	r3, [r7, #15]
    18ca:	e002      	b.n	18d2 <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    18cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    18d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    18d2:	7bfb      	ldrb	r3, [r7, #15]
}
    18d4:	4618      	mov	r0, r3
    18d6:	f107 0714 	add.w	r7, r7, #20	; 0x14
    18da:	46bd      	mov	sp, r7
    18dc:	bc80      	pop	{r7}
    18de:	4770      	bx	lr

000018e0 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    18e0:	b480      	push	{r7}
    18e2:	b083      	sub	sp, #12
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
    18e8:	687b      	ldr	r3, [r7, #4]
    18ea:	689b      	ldr	r3, [r3, #8]
    18ec:	b29b      	uxth	r3, r3
}
    18ee:	4618      	mov	r0, r3
    18f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    18f4:	46bd      	mov	sp, r7
    18f6:	bc80      	pop	{r7}
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			(mov r8, r8)

000018fc <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    18fc:	b480      	push	{r7}
    18fe:	b085      	sub	sp, #20
    1900:	af00      	add	r7, sp, #0
    1902:	6078      	str	r0, [r7, #4]
    1904:	460b      	mov	r3, r1
    1906:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1908:	f04f 0300 	mov.w	r3, #0	; 0x0
    190c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	68da      	ldr	r2, [r3, #12]
    1912:	887b      	ldrh	r3, [r7, #2]
    1914:	ea02 0303 	and.w	r3, r2, r3
    1918:	2b00      	cmp	r3, #0
    191a:	d003      	beq.n	1924 <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (uint8_t)Bit_SET;
    191c:	f04f 0301 	mov.w	r3, #1	; 0x1
    1920:	73fb      	strb	r3, [r7, #15]
    1922:	e002      	b.n	192a <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1924:	f04f 0300 	mov.w	r3, #0	; 0x0
    1928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    192a:	7bfb      	ldrb	r3, [r7, #15]
}
    192c:	4618      	mov	r0, r3
    192e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1932:	46bd      	mov	sp, r7
    1934:	bc80      	pop	{r7}
    1936:	4770      	bx	lr

00001938 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1938:	b480      	push	{r7}
    193a:	b083      	sub	sp, #12
    193c:	af00      	add	r7, sp, #0
    193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	68db      	ldr	r3, [r3, #12]
    1944:	b29b      	uxth	r3, r3
}
    1946:	4618      	mov	r0, r3
    1948:	f107 070c 	add.w	r7, r7, #12	; 0xc
    194c:	46bd      	mov	sp, r7
    194e:	bc80      	pop	{r7}
    1950:	4770      	bx	lr
    1952:	46c0      	nop			(mov r8, r8)

00001954 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
    195c:	460b      	mov	r3, r1
    195e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
    1960:	887a      	ldrh	r2, [r7, #2]
    1962:	687b      	ldr	r3, [r7, #4]
    1964:	611a      	str	r2, [r3, #16]
}
    1966:	f107 070c 	add.w	r7, r7, #12	; 0xc
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1970:	b480      	push	{r7}
    1972:	b083      	sub	sp, #12
    1974:	af00      	add	r7, sp, #0
    1976:	6078      	str	r0, [r7, #4]
    1978:	460b      	mov	r3, r1
    197a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
    197c:	887a      	ldrh	r2, [r7, #2]
    197e:	687b      	ldr	r3, [r7, #4]
    1980:	615a      	str	r2, [r3, #20]
}
    1982:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1986:	46bd      	mov	sp, r7
    1988:	bc80      	pop	{r7}
    198a:	4770      	bx	lr

0000198c <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]
    1994:	460b      	mov	r3, r1
    1996:	807b      	strh	r3, [r7, #2]
    1998:	4613      	mov	r3, r2
    199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
    199c:	787b      	ldrb	r3, [r7, #1]
    199e:	2b00      	cmp	r3, #0
    19a0:	d003      	beq.n	19aa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    19a2:	887a      	ldrh	r2, [r7, #2]
    19a4:	687b      	ldr	r3, [r7, #4]
    19a6:	611a      	str	r2, [r3, #16]
    19a8:	e002      	b.n	19b0 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    19aa:	887a      	ldrh	r2, [r7, #2]
    19ac:	687b      	ldr	r3, [r7, #4]
    19ae:	615a      	str	r2, [r3, #20]
  }
}
    19b0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19b4:	46bd      	mov	sp, r7
    19b6:	bc80      	pop	{r7}
    19b8:	4770      	bx	lr
    19ba:	46c0      	nop			(mov r8, r8)

000019bc <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    19bc:	b480      	push	{r7}
    19be:	b083      	sub	sp, #12
    19c0:	af00      	add	r7, sp, #0
    19c2:	6078      	str	r0, [r7, #4]
    19c4:	460b      	mov	r3, r1
    19c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
    19c8:	887a      	ldrh	r2, [r7, #2]
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	60da      	str	r2, [r3, #12]
}
    19ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    19d2:	46bd      	mov	sp, r7
    19d4:	bc80      	pop	{r7}
    19d6:	4770      	bx	lr

000019d8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    19d8:	b480      	push	{r7}
    19da:	b085      	sub	sp, #20
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
    19e0:	460b      	mov	r3, r1
    19e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    19e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
    19ea:	887a      	ldrh	r2, [r7, #2]
    19ec:	68fb      	ldr	r3, [r7, #12]
    19ee:	ea43 0302 	orr.w	r3, r3, r2
    19f2:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    19f4:	687a      	ldr	r2, [r7, #4]
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	6193      	str	r3, [r2, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    19fa:	887a      	ldrh	r2, [r7, #2]
    19fc:	687b      	ldr	r3, [r7, #4]
    19fe:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1a00:	687a      	ldr	r2, [r7, #4]
    1a02:	68fb      	ldr	r3, [r7, #12]
    1a04:	6193      	str	r3, [r2, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	699b      	ldr	r3, [r3, #24]
    1a0a:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1a0c:	687b      	ldr	r3, [r7, #4]
    1a0e:	699b      	ldr	r3, [r3, #24]
    1a10:	60fb      	str	r3, [r7, #12]
}
    1a12:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a16:	46bd      	mov	sp, r7
    1a18:	bc80      	pop	{r7}
    1a1a:	4770      	bx	lr

00001a1c <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1a1c:	b480      	push	{r7}
    1a1e:	b085      	sub	sp, #20
    1a20:	af00      	add	r7, sp, #0
    1a22:	4603      	mov	r3, r0
    1a24:	460a      	mov	r2, r1
    1a26:	71fb      	strb	r3, [r7, #7]
    1a28:	4613      	mov	r3, r2
    1a2a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1a2c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1a30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmpreg = AFIO->EVCR;
    1a32:	4b0e      	ldr	r3, [pc, #56]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1a38:	68fa      	ldr	r2, [r7, #12]
    1a3a:	f64f 7380 	movw	r3, #65408	; 0xff80
    1a3e:	ea02 0303 	and.w	r3, r2, r3
    1a42:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1a44:	79fb      	ldrb	r3, [r7, #7]
    1a46:	ea4f 1203 	mov.w	r2, r3, lsl #4
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	ea43 0302 	orr.w	r3, r3, r2
    1a50:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1a52:	79ba      	ldrb	r2, [r7, #6]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	ea43 0302 	orr.w	r3, r3, r2
    1a5a:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1a5c:	4a03      	ldr	r2, [pc, #12]	(1a6c <GPIO_EventOutputConfig+0x50>)
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	6013      	str	r3, [r2, #0]
}
    1a62:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1a66:	46bd      	mov	sp, r7
    1a68:	bc80      	pop	{r7}
    1a6a:	4770      	bx	lr
    1a6c:	40010000 	.word	0x40010000

00001a70 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1a70:	b480      	push	{r7}
    1a72:	b083      	sub	sp, #12
    1a74:	af00      	add	r7, sp, #0
    1a76:	4603      	mov	r3, r0
    1a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1a7a:	4a04      	ldr	r2, [pc, #16]	(1a8c <GPIO_EventOutputCmd+0x1c>)
    1a7c:	79fb      	ldrb	r3, [r7, #7]
    1a7e:	6013      	str	r3, [r2, #0]
}
    1a80:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1a84:	46bd      	mov	sp, r7
    1a86:	bc80      	pop	{r7}
    1a88:	4770      	bx	lr
    1a8a:	46c0      	nop			(mov r8, r8)
    1a8c:	4220001c 	.word	0x4220001c

00001a90 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1a90:	b480      	push	{r7}
    1a92:	b087      	sub	sp, #28
    1a94:	af00      	add	r7, sp, #0
    1a96:	6078      	str	r0, [r7, #4]
    1a98:	460b      	mov	r3, r1
    1a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1a9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa0:	60bb      	str	r3, [r7, #8]
    1aa2:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aa6:	60fb      	str	r3, [r7, #12]
    1aa8:	f04f 0300 	mov.w	r3, #0	; 0x0
    1aac:	613b      	str	r3, [r7, #16]
    1aae:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  tmpreg = AFIO->MAPR;
    1ab4:	4b30      	ldr	r3, [pc, #192]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ab6:	685b      	ldr	r3, [r3, #4]
    1ab8:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1aba:	687b      	ldr	r3, [r7, #4]
    1abc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1ac0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ac4:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    1ac6:	687b      	ldr	r3, [r7, #4]
    1ac8:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1acc:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1ad0:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1ad8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1adc:	d10a      	bne.n	1af4 <GPIO_PinRemapConfig+0x64>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ade:	693b      	ldr	r3, [r7, #16]
    1ae0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1ae4:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    1ae6:	4a24      	ldr	r2, [pc, #144]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1ae8:	4b23      	ldr	r3, [pc, #140]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1aea:	685b      	ldr	r3, [r3, #4]
    1aec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    1af0:	6053      	str	r3, [r2, #4]
    1af2:	e029      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    1af4:	687b      	ldr	r3, [r7, #4]
    1af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    1afa:	2b00      	cmp	r3, #0
    1afc:	d011      	beq.n	1b22 <GPIO_PinRemapConfig+0x92>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    1afe:	697a      	ldr	r2, [r7, #20]
    1b00:	f04f 0303 	mov.w	r3, #3	; 0x3
    1b04:	fa03 f302 	lsl.w	r3, r3, r2
    1b08:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    1b0a:	68fb      	ldr	r3, [r7, #12]
    1b0c:	ea6f 0203 	mvn.w	r2, r3
    1b10:	693b      	ldr	r3, [r7, #16]
    1b12:	ea03 0302 	and.w	r3, r3, r2
    1b16:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b18:	693b      	ldr	r3, [r7, #16]
    1b1a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b1e:	613b      	str	r3, [r7, #16]
    1b20:	e012      	b.n	1b48 <GPIO_PinRemapConfig+0xb8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b28:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b2c:	461a      	mov	r2, r3
    1b2e:	68bb      	ldr	r3, [r7, #8]
    1b30:	fa03 f302 	lsl.w	r3, r3, r2
    1b34:	ea6f 0203 	mvn.w	r2, r3
    1b38:	693b      	ldr	r3, [r7, #16]
    1b3a:	ea03 0302 	and.w	r3, r3, r2
    1b3e:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    1b40:	693b      	ldr	r3, [r7, #16]
    1b42:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    1b46:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    1b48:	78fb      	ldrb	r3, [r7, #3]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d00c      	beq.n	1b68 <GPIO_PinRemapConfig+0xd8>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    1b4e:	687b      	ldr	r3, [r7, #4]
    1b50:	ea4f 5353 	mov.w	r3, r3, lsr #21
    1b54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1b58:	461a      	mov	r2, r3
    1b5a:	68bb      	ldr	r3, [r7, #8]
    1b5c:	fa03 f202 	lsl.w	r2, r3, r2
    1b60:	693b      	ldr	r3, [r7, #16]
    1b62:	ea43 0302 	orr.w	r3, r3, r2
    1b66:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    1b68:	4a03      	ldr	r2, [pc, #12]	(1b78 <GPIO_PinRemapConfig+0xe8>)
    1b6a:	693b      	ldr	r3, [r7, #16]
    1b6c:	6053      	str	r3, [r2, #4]
}
    1b6e:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    1b72:	46bd      	mov	sp, r7
    1b74:	bc80      	pop	{r7}
    1b76:	4770      	bx	lr
    1b78:	40010000 	.word	0x40010000

00001b7c <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1b7c:	b480      	push	{r7}
    1b7e:	b085      	sub	sp, #20
    1b80:	af00      	add	r7, sp, #0
    1b82:	4603      	mov	r3, r0
    1b84:	460a      	mov	r2, r1
    1b86:	71fb      	strb	r3, [r7, #7]
    1b88:	4613      	mov	r3, r2
    1b8a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    1b8c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1b90:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));

  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    1b92:	79bb      	ldrb	r3, [r7, #6]
    1b94:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1b98:	ea4f 0283 	mov.w	r2, r3, lsl #2
    1b9c:	f04f 030f 	mov.w	r3, #15	; 0xf
    1ba0:	fa03 f302 	lsl.w	r3, r3, r2
    1ba4:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    1ba6:	491d      	ldr	r1, [pc, #116]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1ba8:	79bb      	ldrb	r3, [r7, #6]
    1baa:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bae:	b2db      	uxtb	r3, r3
    1bb0:	4618      	mov	r0, r3
    1bb2:	4a1a      	ldr	r2, [pc, #104]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bb4:	79bb      	ldrb	r3, [r7, #6]
    1bb6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bba:	b2db      	uxtb	r3, r3
    1bbc:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1bc4:	68fb      	ldr	r3, [r7, #12]
    1bc6:	ea6f 0303 	mvn.w	r3, r3
    1bca:	ea02 0203 	and.w	r2, r2, r3
    1bce:	f100 0302 	add.w	r3, r0, #2	; 0x2
    1bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    1bd6:	4811      	ldr	r0, [pc, #68]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1bd8:	79bb      	ldrb	r3, [r7, #6]
    1bda:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bde:	b2db      	uxtb	r3, r3
    1be0:	469c      	mov	ip, r3
    1be2:	4a0e      	ldr	r2, [pc, #56]	(1c1c <GPIO_EXTILineConfig+0xa0>)
    1be4:	79bb      	ldrb	r3, [r7, #6]
    1be6:	ea4f 0393 	mov.w	r3, r3, lsr #2
    1bea:	b2db      	uxtb	r3, r3
    1bec:	f103 0302 	add.w	r3, r3, #2	; 0x2
    1bf0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    1bf4:	79fa      	ldrb	r2, [r7, #7]
    1bf6:	79bb      	ldrb	r3, [r7, #6]
    1bf8:	f003 0303 	and.w	r3, r3, #3	; 0x3
    1bfc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c00:	fa02 f303 	lsl.w	r3, r2, r3
    1c04:	ea41 0203 	orr.w	r2, r1, r3
    1c08:	f10c 0302 	add.w	r3, ip, #2	; 0x2
    1c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    1c10:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1c14:	46bd      	mov	sp, r7
    1c16:	bc80      	pop	{r7}
    1c18:	4770      	bx	lr
    1c1a:	46c0      	nop			(mov r8, r8)
    1c1c:	40010000 	.word	0x40010000

00001c20 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface)
{
    1c20:	b480      	push	{r7}
    1c22:	b083      	sub	sp, #12
    1c24:	af00      	add	r7, sp, #0
    1c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface));

  /* Configure MII_RMII selection bit */
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface;
    1c28:	4a03      	ldr	r2, [pc, #12]	(1c38 <GPIO_ETH_MediaInterfaceConfig+0x18>)
    1c2a:	687b      	ldr	r3, [r7, #4]
    1c2c:	6013      	str	r3, [r2, #0]
}
    1c2e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1c32:	46bd      	mov	sp, r7
    1c34:	bc80      	pop	{r7}
    1c36:	4770      	bx	lr
    1c38:	422000dc 	.word	0x422000dc

00001c3c <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1c3c:	b480      	push	{r7}
    1c3e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    1c40:	4a18      	ldr	r2, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c42:	4b18      	ldr	r3, [pc, #96]	(1ca4 <RCC_DeInit+0x68>)
    1c44:	681b      	ldr	r3, [r3, #0]
    1c46:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    1c4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
    1c4c:	4915      	ldr	r1, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c4e:	4b15      	ldr	r3, [pc, #84]	(1ca4 <RCC_DeInit+0x68>)
    1c50:	685a      	ldr	r2, [r3, #4]
    1c52:	4b15      	ldr	r3, [pc, #84]	(1ca8 <RCC_DeInit+0x6c>)
    1c54:	ea02 0303 	and.w	r3, r2, r3
    1c58:	604b      	str	r3, [r1, #4]
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    1c5a:	4a12      	ldr	r2, [pc, #72]	(1ca4 <RCC_DeInit+0x68>)
    1c5c:	4b11      	ldr	r3, [pc, #68]	(1ca4 <RCC_DeInit+0x68>)
    1c5e:	681b      	ldr	r3, [r3, #0]
    1c60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
    1c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1c68:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    1c6a:	4a0e      	ldr	r2, [pc, #56]	(1ca4 <RCC_DeInit+0x68>)
    1c6c:	4b0d      	ldr	r3, [pc, #52]	(1ca4 <RCC_DeInit+0x68>)
    1c6e:	681b      	ldr	r3, [r3, #0]
    1c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1c74:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    1c76:	4a0b      	ldr	r2, [pc, #44]	(1ca4 <RCC_DeInit+0x68>)
    1c78:	4b0a      	ldr	r3, [pc, #40]	(1ca4 <RCC_DeInit+0x68>)
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
    1c80:	6053      	str	r3, [r2, #4]
#ifndef STM32F10X_CL
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
#else
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEBFFFFFF;
    1c82:	4a08      	ldr	r2, [pc, #32]	(1ca4 <RCC_DeInit+0x68>)
    1c84:	4b07      	ldr	r3, [pc, #28]	(1ca4 <RCC_DeInit+0x68>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
    1c8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000;
    1c8e:	4a05      	ldr	r2, [pc, #20]	(1ca4 <RCC_DeInit+0x68>)
    1c90:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    1c94:	6093      	str	r3, [r2, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
    1c96:	4a03      	ldr	r2, [pc, #12]	(1ca4 <RCC_DeInit+0x68>)
    1c98:	f04f 0300 	mov.w	r3, #0	; 0x0
    1c9c:	62d3      	str	r3, [r2, #44]
#endif /* STM32F10X_CL */
}
    1c9e:	46bd      	mov	sp, r7
    1ca0:	bc80      	pop	{r7}
    1ca2:	4770      	bx	lr
    1ca4:	40021000 	.word	0x40021000
    1ca8:	f0ff0000 	.word	0xf0ff0000

00001cac <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    1cac:	b480      	push	{r7}
    1cae:	b083      	sub	sp, #12
    1cb0:	af00      	add	r7, sp, #0
    1cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1cb4:	4a14      	ldr	r2, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb6:	4b14      	ldr	r3, [pc, #80]	(1d08 <RCC_HSEConfig+0x5c>)
    1cb8:	681b      	ldr	r3, [r3, #0]
    1cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1cbe:	6013      	str	r3, [r2, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1cc0:	4a11      	ldr	r2, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc2:	4b11      	ldr	r3, [pc, #68]	(1d08 <RCC_HSEConfig+0x5c>)
    1cc4:	681b      	ldr	r3, [r3, #0]
    1cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1cca:	6013      	str	r3, [r2, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1ccc:	687b      	ldr	r3, [r7, #4]
    1cce:	603b      	str	r3, [r7, #0]
    1cd0:	683b      	ldr	r3, [r7, #0]
    1cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1cd6:	d004      	beq.n	1ce2 <RCC_HSEConfig+0x36>
    1cd8:	683b      	ldr	r3, [r7, #0]
    1cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1cde:	d007      	beq.n	1cf0 <RCC_HSEConfig+0x44>
    1ce0:	e00c      	b.n	1cfc <RCC_HSEConfig+0x50>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1ce2:	4a09      	ldr	r2, [pc, #36]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce4:	4b08      	ldr	r3, [pc, #32]	(1d08 <RCC_HSEConfig+0x5c>)
    1ce6:	681b      	ldr	r3, [r3, #0]
    1ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1cec:	6013      	str	r3, [r2, #0]
    1cee:	e005      	b.n	1cfc <RCC_HSEConfig+0x50>
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    1cf0:	4a05      	ldr	r2, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf2:	4b05      	ldr	r3, [pc, #20]	(1d08 <RCC_HSEConfig+0x5c>)
    1cf4:	681b      	ldr	r3, [r3, #0]
    1cf6:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
    1cfa:	6013      	str	r3, [r2, #0]
      break;
      
    default:
      break;
  }
}
    1cfc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr
    1d06:	46c0      	nop			(mov r8, r8)
    1d08:	40021000 	.word	0x40021000

00001d0c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b082      	sub	sp, #8
    1d10:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    1d12:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d16:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    1d18:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d1c:	71bb      	strb	r3, [r7, #6]
  FlagStatus HSEStatus = RESET;
    1d1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d22:	71fb      	strb	r3, [r7, #7]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    1d24:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d28:	f000 fc68 	bl	25fc <RCC_GetFlagStatus>
    1d2c:	4603      	mov	r3, r0
    1d2e:	71fb      	strb	r3, [r7, #7]
    StartUpCounter++;  
    1d30:	683b      	ldr	r3, [r7, #0]
    1d32:	f103 0301 	add.w	r3, r3, #1	; 0x1
    1d36:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
    1d38:	683b      	ldr	r3, [r7, #0]
    1d3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1d3e:	d002      	beq.n	1d46 <RCC_WaitForHSEStartUp+0x3a>
    1d40:	79fb      	ldrb	r3, [r7, #7]
    1d42:	2b00      	cmp	r3, #0
    1d44:	d0ee      	beq.n	1d24 <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1d46:	f04f 0031 	mov.w	r0, #49	; 0x31
    1d4a:	f000 fc57 	bl	25fc <RCC_GetFlagStatus>
    1d4e:	4603      	mov	r3, r0
    1d50:	2b00      	cmp	r3, #0
    1d52:	d003      	beq.n	1d5c <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1d54:	f04f 0301 	mov.w	r3, #1	; 0x1
    1d58:	71bb      	strb	r3, [r7, #6]
    1d5a:	e002      	b.n	1d62 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1d5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d60:	71bb      	strb	r3, [r7, #6]
  }  
  return (status);
    1d62:	79bb      	ldrb	r3, [r7, #6]
}
    1d64:	4618      	mov	r0, r3
    1d66:	f107 0708 	add.w	r7, r7, #8	; 0x8
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	46c0      	nop			(mov r8, r8)

00001d70 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1d70:	b480      	push	{r7}
    1d72:	b085      	sub	sp, #20
    1d74:	af00      	add	r7, sp, #0
    1d76:	4603      	mov	r3, r0
    1d78:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1d7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    1d7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1d80:	4b0a      	ldr	r3, [pc, #40]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d82:	681b      	ldr	r3, [r3, #0]
    1d84:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1d86:	68fb      	ldr	r3, [r7, #12]
    1d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1d8c:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    1d8e:	79fb      	ldrb	r3, [r7, #7]
    1d90:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1d94:	68fb      	ldr	r3, [r7, #12]
    1d96:	ea43 0302 	orr.w	r3, r3, r2
    1d9a:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1d9c:	4a03      	ldr	r2, [pc, #12]	(1dac <RCC_AdjustHSICalibrationValue+0x3c>)
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	6013      	str	r3, [r2, #0]
}
    1da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1da6:	46bd      	mov	sp, r7
    1da8:	bc80      	pop	{r7}
    1daa:	4770      	bx	lr
    1dac:	40021000 	.word	0x40021000

00001db0 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	4603      	mov	r3, r0
    1db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    1dba:	4a04      	ldr	r2, [pc, #16]	(1dcc <RCC_HSICmd+0x1c>)
    1dbc:	79fb      	ldrb	r3, [r7, #7]
    1dbe:	6013      	str	r3, [r2, #0]
}
    1dc0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1dc4:	46bd      	mov	sp, r7
    1dc6:	bc80      	pop	{r7}
    1dc8:	4770      	bx	lr
    1dca:	46c0      	nop			(mov r8, r8)
    1dcc:	42420000 	.word	0x42420000

00001dd0 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b085      	sub	sp, #20
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1dda:	f04f 0300 	mov.w	r3, #0	; 0x0
    1dde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1de0:	4b0b      	ldr	r3, [pc, #44]	(1e10 <RCC_PLLConfig+0x40>)
    1de2:	685b      	ldr	r3, [r3, #4]
    1de4:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1de6:	68fb      	ldr	r3, [r7, #12]
    1de8:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
    1dec:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1dee:	687a      	ldr	r2, [r7, #4]
    1df0:	683b      	ldr	r3, [r7, #0]
    1df2:	ea42 0203 	orr.w	r2, r2, r3
    1df6:	68fb      	ldr	r3, [r7, #12]
    1df8:	ea43 0302 	orr.w	r3, r3, r2
    1dfc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1dfe:	4a04      	ldr	r2, [pc, #16]	(1e10 <RCC_PLLConfig+0x40>)
    1e00:	68fb      	ldr	r3, [r7, #12]
    1e02:	6053      	str	r3, [r2, #4]
}
    1e04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e08:	46bd      	mov	sp, r7
    1e0a:	bc80      	pop	{r7}
    1e0c:	4770      	bx	lr
    1e0e:	46c0      	nop			(mov r8, r8)
    1e10:	40021000 	.word	0x40021000

00001e14 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	4603      	mov	r3, r0
    1e1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    1e1e:	4a04      	ldr	r2, [pc, #16]	(1e30 <RCC_PLLCmd+0x1c>)
    1e20:	79fb      	ldrb	r3, [r7, #7]
    1e22:	6013      	str	r3, [r2, #0]
}
    1e24:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1e28:	46bd      	mov	sp, r7
    1e2a:	bc80      	pop	{r7}
    1e2c:	4770      	bx	lr
    1e2e:	46c0      	nop			(mov r8, r8)
    1e30:	42420060 	.word	0x42420060

00001e34 <RCC_PREDIV1Config>:
  * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
  *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
{
    1e34:	b480      	push	{r7}
    1e36:	b085      	sub	sp, #20
    1e38:	af00      	add	r7, sp, #0
    1e3a:	6078      	str	r0, [r7, #4]
    1e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    1e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e42:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
    1e44:	4b0c      	ldr	r3, [pc, #48]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e46:	6adb      	ldr	r3, [r3, #44]
    1e48:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
    1e4a:	68fb      	ldr	r3, [r7, #12]
    1e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    1e50:	f023 030f 	bic.w	r3, r3, #15	; 0xf
    1e54:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
    1e56:	687a      	ldr	r2, [r7, #4]
    1e58:	683b      	ldr	r3, [r7, #0]
    1e5a:	ea42 0203 	orr.w	r2, r2, r3
    1e5e:	68fb      	ldr	r3, [r7, #12]
    1e60:	ea43 0302 	orr.w	r3, r3, r2
    1e64:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1e66:	4a04      	ldr	r2, [pc, #16]	(1e78 <RCC_PREDIV1Config+0x44>)
    1e68:	68fb      	ldr	r3, [r7, #12]
    1e6a:	62d3      	str	r3, [r2, #44]
}
    1e6c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1e70:	46bd      	mov	sp, r7
    1e72:	bc80      	pop	{r7}
    1e74:	4770      	bx	lr
    1e76:	46c0      	nop			(mov r8, r8)
    1e78:	40021000 	.word	0x40021000

00001e7c <RCC_PREDIV2Config>:
  * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
  *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
  * @retval None
  */
void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b085      	sub	sp, #20
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1e84:	f04f 0300 	mov.w	r3, #0	; 0x0
    1e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
    1e8a:	4b0a      	ldr	r3, [pc, #40]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1e8c:	6adb      	ldr	r3, [r3, #44]
    1e8e:	60fb      	str	r3, [r7, #12]
  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
    1e90:	68fb      	ldr	r3, [r7, #12]
    1e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1e96:	60fb      	str	r3, [r7, #12]
  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
    1e98:	68fa      	ldr	r2, [r7, #12]
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	ea42 0303 	orr.w	r3, r2, r3
    1ea0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ea2:	4a04      	ldr	r2, [pc, #16]	(1eb4 <RCC_PREDIV2Config+0x38>)
    1ea4:	68fb      	ldr	r3, [r7, #12]
    1ea6:	62d3      	str	r3, [r2, #44]
}
    1ea8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1eac:	46bd      	mov	sp, r7
    1eae:	bc80      	pop	{r7}
    1eb0:	4770      	bx	lr
    1eb2:	46c0      	nop			(mov r8, r8)
    1eb4:	40021000 	.word	0x40021000

00001eb8 <RCC_PLL2Config>:
  * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
  *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
{
    1eb8:	b480      	push	{r7}
    1eba:	b085      	sub	sp, #20
    1ebc:	af00      	add	r7, sp, #0
    1ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1ec0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1ec4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
    1ec6:	4b0a      	ldr	r3, [pc, #40]	(1ef0 <RCC_PLL2Config+0x38>)
    1ec8:	6adb      	ldr	r3, [r3, #44]
    1eca:	60fb      	str	r3, [r7, #12]
  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
    1ecc:	68fb      	ldr	r3, [r7, #12]
    1ece:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    1ed2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
    1ed4:	68fa      	ldr	r2, [r7, #12]
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	ea42 0303 	orr.w	r3, r2, r3
    1edc:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1ede:	4a04      	ldr	r2, [pc, #16]	(1ef0 <RCC_PLL2Config+0x38>)
    1ee0:	68fb      	ldr	r3, [r7, #12]
    1ee2:	62d3      	str	r3, [r2, #44]
}
    1ee4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ee8:	46bd      	mov	sp, r7
    1eea:	bc80      	pop	{r7}
    1eec:	4770      	bx	lr
    1eee:	46c0      	nop			(mov r8, r8)
    1ef0:	40021000 	.word	0x40021000

00001ef4 <RCC_PLL2Cmd>:
  *   - This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL2Cmd(FunctionalState NewState)
{
    1ef4:	b480      	push	{r7}
    1ef6:	b083      	sub	sp, #12
    1ef8:	af00      	add	r7, sp, #0
    1efa:	4603      	mov	r3, r0
    1efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
    1efe:	4a04      	ldr	r2, [pc, #16]	(1f10 <RCC_PLL2Cmd+0x1c>)
    1f00:	79fb      	ldrb	r3, [r7, #7]
    1f02:	6013      	str	r3, [r2, #0]
}
    1f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f08:	46bd      	mov	sp, r7
    1f0a:	bc80      	pop	{r7}
    1f0c:	4770      	bx	lr
    1f0e:	46c0      	nop			(mov r8, r8)
    1f10:	42420068 	.word	0x42420068

00001f14 <RCC_PLL3Config>:
  * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
  *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
  * @retval None
  */
void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
{
    1f14:	b480      	push	{r7}
    1f16:	b085      	sub	sp, #20
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
    1f22:	4b0a      	ldr	r3, [pc, #40]	(1f4c <RCC_PLL3Config+0x38>)
    1f24:	6adb      	ldr	r3, [r3, #44]
    1f26:	60fb      	str	r3, [r7, #12]
  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
    1f28:	68fb      	ldr	r3, [r7, #12]
    1f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
    1f2e:	60fb      	str	r3, [r7, #12]
  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
    1f30:	68fa      	ldr	r2, [r7, #12]
    1f32:	687b      	ldr	r3, [r7, #4]
    1f34:	ea42 0303 	orr.w	r3, r2, r3
    1f38:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
    1f3a:	4a04      	ldr	r2, [pc, #16]	(1f4c <RCC_PLL3Config+0x38>)
    1f3c:	68fb      	ldr	r3, [r7, #12]
    1f3e:	62d3      	str	r3, [r2, #44]
}
    1f40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1f44:	46bd      	mov	sp, r7
    1f46:	bc80      	pop	{r7}
    1f48:	4770      	bx	lr
    1f4a:	46c0      	nop			(mov r8, r8)
    1f4c:	40021000 	.word	0x40021000

00001f50 <RCC_PLL3Cmd>:
  * @note   This function applies only to STM32 Connectivity line devices.
  * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLL3Cmd(FunctionalState NewState)
{
    1f50:	b480      	push	{r7}
    1f52:	b083      	sub	sp, #12
    1f54:	af00      	add	r7, sp, #0
    1f56:	4603      	mov	r3, r0
    1f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
    1f5a:	4a04      	ldr	r2, [pc, #16]	(1f6c <RCC_PLL3Cmd+0x1c>)
    1f5c:	79fb      	ldrb	r3, [r7, #7]
    1f5e:	6013      	str	r3, [r2, #0]
}
    1f60:	f107 070c 	add.w	r7, r7, #12	; 0xc
    1f64:	46bd      	mov	sp, r7
    1f66:	bc80      	pop	{r7}
    1f68:	4770      	bx	lr
    1f6a:	46c0      	nop			(mov r8, r8)
    1f6c:	42420070 	.word	0x42420070

00001f70 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    1f70:	b480      	push	{r7}
    1f72:	b085      	sub	sp, #20
    1f74:	af00      	add	r7, sp, #0
    1f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1f78:	f04f 0300 	mov.w	r3, #0	; 0x0
    1f7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    1f7e:	4b0a      	ldr	r3, [pc, #40]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f80:	685b      	ldr	r3, [r3, #4]
    1f82:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1f84:	68fb      	ldr	r3, [r7, #12]
    1f86:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    1f8a:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1f8c:	68fa      	ldr	r2, [r7, #12]
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	ea42 0303 	orr.w	r3, r2, r3
    1f94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1f96:	4a04      	ldr	r2, [pc, #16]	(1fa8 <RCC_SYSCLKConfig+0x38>)
    1f98:	68fb      	ldr	r3, [r7, #12]
    1f9a:	6053      	str	r3, [r2, #4]
}
    1f9c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1fa0:	46bd      	mov	sp, r7
    1fa2:	bc80      	pop	{r7}
    1fa4:	4770      	bx	lr
    1fa6:	46c0      	nop			(mov r8, r8)
    1fa8:	40021000 	.word	0x40021000

00001fac <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1fac:	b480      	push	{r7}
    1fae:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    1fb0:	4b04      	ldr	r3, [pc, #16]	(1fc4 <RCC_GetSYSCLKSource+0x18>)
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	f003 030c 	and.w	r3, r3, #12	; 0xc
}
    1fba:	4618      	mov	r0, r3
    1fbc:	46bd      	mov	sp, r7
    1fbe:	bc80      	pop	{r7}
    1fc0:	4770      	bx	lr
    1fc2:	46c0      	nop			(mov r8, r8)
    1fc4:	40021000 	.word	0x40021000

00001fc8 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1fc8:	b480      	push	{r7}
    1fca:	b085      	sub	sp, #20
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1fd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    1fd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1fd6:	4b0a      	ldr	r3, [pc, #40]	(2000 <RCC_HCLKConfig+0x38>)
    1fd8:	685b      	ldr	r3, [r3, #4]
    1fda:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1fdc:	68fb      	ldr	r3, [r7, #12]
    1fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1fe2:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1fe4:	68fa      	ldr	r2, [r7, #12]
    1fe6:	687b      	ldr	r3, [r7, #4]
    1fe8:	ea42 0303 	orr.w	r3, r2, r3
    1fec:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1fee:	4a04      	ldr	r2, [pc, #16]	(2000 <RCC_HCLKConfig+0x38>)
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	6053      	str	r3, [r2, #4]
}
    1ff4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    1ff8:	46bd      	mov	sp, r7
    1ffa:	bc80      	pop	{r7}
    1ffc:	4770      	bx	lr
    1ffe:	46c0      	nop			(mov r8, r8)
    2000:	40021000 	.word	0x40021000

00002004 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    2004:	b480      	push	{r7}
    2006:	b085      	sub	sp, #20
    2008:	af00      	add	r7, sp, #0
    200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    200c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2010:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    2012:	4b0a      	ldr	r3, [pc, #40]	(203c <RCC_PCLK1Config+0x38>)
    2014:	685b      	ldr	r3, [r3, #4]
    2016:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    2018:	68fb      	ldr	r3, [r7, #12]
    201a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    201e:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    2020:	68fa      	ldr	r2, [r7, #12]
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	ea42 0303 	orr.w	r3, r2, r3
    2028:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    202a:	4a04      	ldr	r2, [pc, #16]	(203c <RCC_PCLK1Config+0x38>)
    202c:	68fb      	ldr	r3, [r7, #12]
    202e:	6053      	str	r3, [r2, #4]
}
    2030:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2034:	46bd      	mov	sp, r7
    2036:	bc80      	pop	{r7}
    2038:	4770      	bx	lr
    203a:	46c0      	nop			(mov r8, r8)
    203c:	40021000 	.word	0x40021000

00002040 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    2040:	b480      	push	{r7}
    2042:	b085      	sub	sp, #20
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    2048:	f04f 0300 	mov.w	r3, #0	; 0x0
    204c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    204e:	4b0b      	ldr	r3, [pc, #44]	(207c <RCC_PCLK2Config+0x3c>)
    2050:	685b      	ldr	r3, [r3, #4]
    2052:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    2054:	68fb      	ldr	r3, [r7, #12]
    2056:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    205a:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    205c:	687b      	ldr	r3, [r7, #4]
    205e:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    2062:	68fb      	ldr	r3, [r7, #12]
    2064:	ea43 0302 	orr.w	r3, r3, r2
    2068:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    206a:	4a04      	ldr	r2, [pc, #16]	(207c <RCC_PCLK2Config+0x3c>)
    206c:	68fb      	ldr	r3, [r7, #12]
    206e:	6053      	str	r3, [r2, #4]
}
    2070:	f107 0714 	add.w	r7, r7, #20	; 0x14
    2074:	46bd      	mov	sp, r7
    2076:	bc80      	pop	{r7}
    2078:	4770      	bx	lr
    207a:	46c0      	nop			(mov r8, r8)
    207c:	40021000 	.word	0x40021000

00002080 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    2080:	b480      	push	{r7}
    2082:	b083      	sub	sp, #12
    2084:	af00      	add	r7, sp, #0
    2086:	4603      	mov	r3, r0
    2088:	460a      	mov	r2, r1
    208a:	71fb      	strb	r3, [r7, #7]
    208c:	4613      	mov	r3, r2
    208e:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2090:	79bb      	ldrb	r3, [r7, #6]
    2092:	2b00      	cmp	r3, #0
    2094:	d009      	beq.n	20aa <RCC_ITConfig+0x2a>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    2096:	490d      	ldr	r1, [pc, #52]	(20cc <RCC_ITConfig+0x4c>)
    2098:	4b0c      	ldr	r3, [pc, #48]	(20cc <RCC_ITConfig+0x4c>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	b2da      	uxtb	r2, r3
    209e:	79fb      	ldrb	r3, [r7, #7]
    20a0:	ea42 0303 	orr.w	r3, r2, r3
    20a4:	b2db      	uxtb	r3, r3
    20a6:	700b      	strb	r3, [r1, #0]
    20a8:	e00b      	b.n	20c2 <RCC_ITConfig+0x42>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    20aa:	4908      	ldr	r1, [pc, #32]	(20cc <RCC_ITConfig+0x4c>)
    20ac:	4b07      	ldr	r3, [pc, #28]	(20cc <RCC_ITConfig+0x4c>)
    20ae:	781b      	ldrb	r3, [r3, #0]
    20b0:	b2da      	uxtb	r2, r3
    20b2:	79fb      	ldrb	r3, [r7, #7]
    20b4:	ea6f 0303 	mvn.w	r3, r3
    20b8:	b2db      	uxtb	r3, r3
    20ba:	ea02 0303 	and.w	r3, r2, r3
    20be:	b2db      	uxtb	r3, r3
    20c0:	700b      	strb	r3, [r1, #0]
  }
}
    20c2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20c6:	46bd      	mov	sp, r7
    20c8:	bc80      	pop	{r7}
    20ca:	4770      	bx	lr
    20cc:	40021009 	.word	0x40021009

000020d0 <RCC_OTGFSCLKConfig>:
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clock source
  * @retval None
  */
void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
{
    20d0:	b480      	push	{r7}
    20d2:	b083      	sub	sp, #12
    20d4:	af00      	add	r7, sp, #0
    20d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
    20d8:	4a03      	ldr	r2, [pc, #12]	(20e8 <RCC_OTGFSCLKConfig+0x18>)
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	6013      	str	r3, [r2, #0]
}
    20de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    20e2:	46bd      	mov	sp, r7
    20e4:	bc80      	pop	{r7}
    20e6:	4770      	bx	lr
    20e8:	424200d8 	.word	0x424200d8

000020ec <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    20ec:	b480      	push	{r7}
    20ee:	b085      	sub	sp, #20
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    20f4:	f04f 0300 	mov.w	r3, #0	; 0x0
    20f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    20fa:	4b0a      	ldr	r3, [pc, #40]	(2124 <RCC_ADCCLKConfig+0x38>)
    20fc:	685b      	ldr	r3, [r3, #4]
    20fe:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    2100:	68fb      	ldr	r3, [r7, #12]
    2102:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    2106:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    2108:	68fa      	ldr	r2, [r7, #12]
    210a:	687b      	ldr	r3, [r7, #4]
    210c:	ea42 0303 	orr.w	r3, r2, r3
    2110:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    2112:	4a04      	ldr	r2, [pc, #16]	(2124 <RCC_ADCCLKConfig+0x38>)
    2114:	68fb      	ldr	r3, [r7, #12]
    2116:	6053      	str	r3, [r2, #4]
}
    2118:	f107 0714 	add.w	r7, r7, #20	; 0x14
    211c:	46bd      	mov	sp, r7
    211e:	bc80      	pop	{r7}
    2120:	4770      	bx	lr
    2122:	46c0      	nop			(mov r8, r8)
    2124:	40021000 	.word	0x40021000

00002128 <RCC_I2S2CLKConfig>:
  *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
  *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
  * @retval None
  */
void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
{
    2128:	b480      	push	{r7}
    212a:	b083      	sub	sp, #12
    212c:	af00      	add	r7, sp, #0
    212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));

  *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
    2130:	4a03      	ldr	r2, [pc, #12]	(2140 <RCC_I2S2CLKConfig+0x18>)
    2132:	687b      	ldr	r3, [r7, #4]
    2134:	6013      	str	r3, [r2, #0]
}
    2136:	f107 070c 	add.w	r7, r7, #12	; 0xc
    213a:	46bd      	mov	sp, r7
    213c:	bc80      	pop	{r7}
    213e:	4770      	bx	lr
    2140:	424205c4 	.word	0x424205c4

00002144 <RCC_I2S3CLKConfig>:
  *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
  *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
  * @retval None
  */
void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
{
    2144:	b480      	push	{r7}
    2146:	b083      	sub	sp, #12
    2148:	af00      	add	r7, sp, #0
    214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));

  *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
    214c:	4a03      	ldr	r2, [pc, #12]	(215c <RCC_I2S3CLKConfig+0x18>)
    214e:	687b      	ldr	r3, [r7, #4]
    2150:	6013      	str	r3, [r2, #0]
}
    2152:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2156:	46bd      	mov	sp, r7
    2158:	bc80      	pop	{r7}
    215a:	4770      	bx	lr
    215c:	424205c8 	.word	0x424205c8

00002160 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    2160:	b480      	push	{r7}
    2162:	b083      	sub	sp, #12
    2164:	af00      	add	r7, sp, #0
    2166:	4603      	mov	r3, r0
    2168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    216a:	4a0f      	ldr	r2, [pc, #60]	(21a8 <RCC_LSEConfig+0x48>)
    216c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2170:	7013      	strb	r3, [r2, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    2172:	4a0d      	ldr	r2, [pc, #52]	(21a8 <RCC_LSEConfig+0x48>)
    2174:	f04f 0300 	mov.w	r3, #0	; 0x0
    2178:	7013      	strb	r3, [r2, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    217a:	79fb      	ldrb	r3, [r7, #7]
    217c:	603b      	str	r3, [r7, #0]
    217e:	683b      	ldr	r3, [r7, #0]
    2180:	2b01      	cmp	r3, #1
    2182:	d003      	beq.n	218c <RCC_LSEConfig+0x2c>
    2184:	683b      	ldr	r3, [r7, #0]
    2186:	2b04      	cmp	r3, #4
    2188:	d005      	beq.n	2196 <RCC_LSEConfig+0x36>
    218a:	e008      	b.n	219e <RCC_LSEConfig+0x3e>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    218c:	4b06      	ldr	r3, [pc, #24]	(21a8 <RCC_LSEConfig+0x48>)
    218e:	f04f 0201 	mov.w	r2, #1	; 0x1
    2192:	701a      	strb	r2, [r3, #0]
    2194:	e003      	b.n	219e <RCC_LSEConfig+0x3e>
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    2196:	4b04      	ldr	r3, [pc, #16]	(21a8 <RCC_LSEConfig+0x48>)
    2198:	f04f 0205 	mov.w	r2, #5	; 0x5
    219c:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    219e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21a2:	46bd      	mov	sp, r7
    21a4:	bc80      	pop	{r7}
    21a6:	4770      	bx	lr
    21a8:	40021020 	.word	0x40021020

000021ac <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    21ac:	b480      	push	{r7}
    21ae:	b083      	sub	sp, #12
    21b0:	af00      	add	r7, sp, #0
    21b2:	4603      	mov	r3, r0
    21b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    21b6:	4a04      	ldr	r2, [pc, #16]	(21c8 <RCC_LSICmd+0x1c>)
    21b8:	79fb      	ldrb	r3, [r7, #7]
    21ba:	6013      	str	r3, [r2, #0]
}
    21bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21c0:	46bd      	mov	sp, r7
    21c2:	bc80      	pop	{r7}
    21c4:	4770      	bx	lr
    21c6:	46c0      	nop			(mov r8, r8)
    21c8:	42420480 	.word	0x42420480

000021cc <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    21cc:	b480      	push	{r7}
    21ce:	b083      	sub	sp, #12
    21d0:	af00      	add	r7, sp, #0
    21d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    21d4:	4905      	ldr	r1, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d6:	4b05      	ldr	r3, [pc, #20]	(21ec <RCC_RTCCLKConfig+0x20>)
    21d8:	6a1a      	ldr	r2, [r3, #32]
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	ea42 0303 	orr.w	r3, r2, r3
    21e0:	620b      	str	r3, [r1, #32]
}
    21e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    21e6:	46bd      	mov	sp, r7
    21e8:	bc80      	pop	{r7}
    21ea:	4770      	bx	lr
    21ec:	40021000 	.word	0x40021000

000021f0 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    21f0:	b480      	push	{r7}
    21f2:	b083      	sub	sp, #12
    21f4:	af00      	add	r7, sp, #0
    21f6:	4603      	mov	r3, r0
    21f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    21fa:	4a04      	ldr	r2, [pc, #16]	(220c <RCC_RTCCLKCmd+0x1c>)
    21fc:	79fb      	ldrb	r3, [r7, #7]
    21fe:	6013      	str	r3, [r2, #0]
}
    2200:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2204:	46bd      	mov	sp, r7
    2206:	bc80      	pop	{r7}
    2208:	4770      	bx	lr
    220a:	46c0      	nop			(mov r8, r8)
    220c:	4242043c 	.word	0x4242043c

00002210 <RCC_GetClocksFreq>:
  * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
  *   the clocks frequencies.
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    2210:	b480      	push	{r7}
    2212:	b08b      	sub	sp, #44
    2214:	af00      	add	r7, sp, #0
    2216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    2218:	f04f 0300 	mov.w	r3, #0	; 0x0
    221c:	60bb      	str	r3, [r7, #8]
    221e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2222:	60fb      	str	r3, [r7, #12]
    2224:	f04f 0300 	mov.w	r3, #0	; 0x0
    2228:	613b      	str	r3, [r7, #16]
    222a:	f04f 0300 	mov.w	r3, #0	; 0x0
    222e:	617b      	str	r3, [r7, #20]

#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
    2230:	f04f 0300 	mov.w	r3, #0	; 0x0
    2234:	61bb      	str	r3, [r7, #24]
    2236:	f04f 0300 	mov.w	r3, #0	; 0x0
    223a:	61fb      	str	r3, [r7, #28]
    223c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2240:	623b      	str	r3, [r7, #32]
    2242:	f04f 0300 	mov.w	r3, #0	; 0x0
    2246:	627b      	str	r3, [r7, #36]
#endif /* STM32F10X_CL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    2248:	4b68      	ldr	r3, [pc, #416]	(23ec <RCC_GetClocksFreq+0x1dc>)
    224a:	685b      	ldr	r3, [r3, #4]
    224c:	f003 030c 	and.w	r3, r3, #12	; 0xc
    2250:	60bb      	str	r3, [r7, #8]
  
  switch (tmp)
    2252:	68bb      	ldr	r3, [r7, #8]
    2254:	603b      	str	r3, [r7, #0]
    2256:	683b      	ldr	r3, [r7, #0]
    2258:	2b04      	cmp	r3, #4
    225a:	d009      	beq.n	2270 <RCC_GetClocksFreq+0x60>
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	2b08      	cmp	r3, #8
    2260:	d00a      	beq.n	2278 <RCC_GetClocksFreq+0x68>
    2262:	683b      	ldr	r3, [r7, #0]
    2264:	2b00      	cmp	r3, #0
    2266:	d165      	bne.n	2334 <RCC_GetClocksFreq+0x124>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2268:	687a      	ldr	r2, [r7, #4]
    226a:	4b61      	ldr	r3, [pc, #388]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    226c:	6013      	str	r3, [r2, #0]
    226e:	e064      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    2270:	687a      	ldr	r2, [r7, #4]
    2272:	4b60      	ldr	r3, [pc, #384]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2274:	6013      	str	r3, [r2, #0]
    2276:	e060      	b.n	233a <RCC_GetClocksFreq+0x12a>
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    2278:	4b5c      	ldr	r3, [pc, #368]	(23ec <RCC_GetClocksFreq+0x1dc>)
    227a:	685b      	ldr	r3, [r3, #4]
    227c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    2280:	60fb      	str	r3, [r7, #12]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    2282:	4b5a      	ldr	r3, [pc, #360]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2284:	685b      	ldr	r3, [r3, #4]
    2286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    228a:	613b      	str	r3, [r7, #16]
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
#else
      pllmull = pllmull >> 18;
    228c:	68fb      	ldr	r3, [r7, #12]
    228e:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2292:	60fb      	str	r3, [r7, #12]
      
      if (pllmull != 0x0D)
    2294:	68fb      	ldr	r3, [r7, #12]
    2296:	2b0d      	cmp	r3, #13
    2298:	d004      	beq.n	22a4 <RCC_GetClocksFreq+0x94>
      {
         pllmull += 2;
    229a:	68fb      	ldr	r3, [r7, #12]
    229c:	f103 0302 	add.w	r3, r3, #2	; 0x2
    22a0:	60fb      	str	r3, [r7, #12]
    22a2:	e002      	b.n	22aa <RCC_GetClocksFreq+0x9a>
      }
      else
      { /* PLL multiplication factor = PLL input clock * 6.5 */
        pllmull = 13 / 2; 
    22a4:	f04f 0306 	mov.w	r3, #6	; 0x6
    22a8:	60fb      	str	r3, [r7, #12]
      }
            
      if (pllsource == 0x00)
    22aa:	693b      	ldr	r3, [r7, #16]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d106      	bne.n	22be <RCC_GetClocksFreq+0xae>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    22b0:	68fa      	ldr	r2, [r7, #12]
    22b2:	4b51      	ldr	r3, [pc, #324]	(23f8 <RCC_GetClocksFreq+0x1e8>)
    22b4:	fb03 f202 	mul.w	r2, r3, r2
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	601a      	str	r2, [r3, #0]
    22bc:	e03d      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
      else
      {/* PREDIV1 selected as PLL clock entry */
        
        /* Get PREDIV1 clock source and division factor */
        prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
    22be:	4b4b      	ldr	r3, [pc, #300]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22c0:	6adb      	ldr	r3, [r3, #44]
    22c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    22c6:	61bb      	str	r3, [r7, #24]
        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
    22c8:	4b48      	ldr	r3, [pc, #288]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22ca:	6adb      	ldr	r3, [r3, #44]
    22cc:	f003 030f 	and.w	r3, r3, #15	; 0xf
    22d0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    22d4:	61fb      	str	r3, [r7, #28]
        
        if (prediv1source == 0)
    22d6:	69bb      	ldr	r3, [r7, #24]
    22d8:	2b00      	cmp	r3, #0
    22da:	d109      	bne.n	22f0 <RCC_GetClocksFreq+0xe0>
        { /* HSE oscillator clock selected as PREDIV1 clock entry */
          RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
    22dc:	4a45      	ldr	r2, [pc, #276]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    22de:	69fb      	ldr	r3, [r7, #28]
    22e0:	fbb2 f2f3 	udiv	r2, r2, r3
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	fb03 f202 	mul.w	r2, r3, r2
    22ea:	687b      	ldr	r3, [r7, #4]
    22ec:	601a      	str	r2, [r3, #0]
    22ee:	e024      	b.n	233a <RCC_GetClocksFreq+0x12a>
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
          
          /* Get PREDIV2 division factor and PLL2 multiplication factor */
          prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
    22f0:	4b3e      	ldr	r3, [pc, #248]	(23ec <RCC_GetClocksFreq+0x1dc>)
    22f2:	6adb      	ldr	r3, [r3, #44]
    22f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    22f8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    22fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    2300:	623b      	str	r3, [r7, #32]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
    2302:	4b3a      	ldr	r3, [pc, #232]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2304:	6adb      	ldr	r3, [r3, #44]
    2306:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    230a:	ea4f 2313 	mov.w	r3, r3, lsr #8
    230e:	f103 0302 	add.w	r3, r3, #2	; 0x2
    2312:	627b      	str	r3, [r7, #36]
          RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
    2314:	4a37      	ldr	r2, [pc, #220]	(23f4 <RCC_GetClocksFreq+0x1e4>)
    2316:	6a3b      	ldr	r3, [r7, #32]
    2318:	fbb2 f2f3 	udiv	r2, r2, r3
    231c:	6a7b      	ldr	r3, [r7, #36]
    231e:	fb03 f202 	mul.w	r2, r3, r2
    2322:	69fb      	ldr	r3, [r7, #28]
    2324:	fbb2 f2f3 	udiv	r2, r2, r3
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	fb03 f202 	mul.w	r2, r3, r2
    232e:	687b      	ldr	r3, [r7, #4]
    2330:	601a      	str	r2, [r3, #0]
    2332:	e002      	b.n	233a <RCC_GetClocksFreq+0x12a>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    2334:	687a      	ldr	r2, [r7, #4]
    2336:	4b2e      	ldr	r3, [pc, #184]	(23f0 <RCC_GetClocksFreq+0x1e0>)
    2338:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    233a:	4b2c      	ldr	r3, [pc, #176]	(23ec <RCC_GetClocksFreq+0x1dc>)
    233c:	685b      	ldr	r3, [r3, #4]
    233e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    2342:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    2344:	68bb      	ldr	r3, [r7, #8]
    2346:	ea4f 1313 	mov.w	r3, r3, lsr #4
    234a:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    234c:	68ba      	ldr	r2, [r7, #8]
    234e:	4b2b      	ldr	r3, [pc, #172]	(23fc <RCC_GetClocksFreq+0x1ec>)
    2350:	5c9b      	ldrb	r3, [r3, r2]
    2352:	b2db      	uxtb	r3, r3
    2354:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    2356:	687b      	ldr	r3, [r7, #4]
    2358:	681a      	ldr	r2, [r3, #0]
    235a:	697b      	ldr	r3, [r7, #20]
    235c:	fa22 f203 	lsr.w	r2, r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    2364:	4b21      	ldr	r3, [pc, #132]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2366:	685b      	ldr	r3, [r3, #4]
    2368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    236c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    236e:	68bb      	ldr	r3, [r7, #8]
    2370:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2374:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    2376:	68ba      	ldr	r2, [r7, #8]
    2378:	4b20      	ldr	r3, [pc, #128]	(23fc <RCC_GetClocksFreq+0x1ec>)
    237a:	5c9b      	ldrb	r3, [r3, r2]
    237c:	b2db      	uxtb	r3, r3
    237e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    2380:	687b      	ldr	r3, [r7, #4]
    2382:	685a      	ldr	r2, [r3, #4]
    2384:	697b      	ldr	r3, [r7, #20]
    2386:	fa22 f203 	lsr.w	r2, r2, r3
    238a:	687b      	ldr	r3, [r7, #4]
    238c:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    238e:	4b17      	ldr	r3, [pc, #92]	(23ec <RCC_GetClocksFreq+0x1dc>)
    2390:	685b      	ldr	r3, [r3, #4]
    2392:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    2396:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    2398:	68bb      	ldr	r3, [r7, #8]
    239a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    239e:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    23a0:	68ba      	ldr	r2, [r7, #8]
    23a2:	4b16      	ldr	r3, [pc, #88]	(23fc <RCC_GetClocksFreq+0x1ec>)
    23a4:	5c9b      	ldrb	r3, [r3, r2]
    23a6:	b2db      	uxtb	r3, r3
    23a8:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    23aa:	687b      	ldr	r3, [r7, #4]
    23ac:	685a      	ldr	r2, [r3, #4]
    23ae:	697b      	ldr	r3, [r7, #20]
    23b0:	fa22 f203 	lsr.w	r2, r2, r3
    23b4:	687b      	ldr	r3, [r7, #4]
    23b6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    23b8:	4b0c      	ldr	r3, [pc, #48]	(23ec <RCC_GetClocksFreq+0x1dc>)
    23ba:	685b      	ldr	r3, [r3, #4]
    23bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    23c0:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    23c2:	68bb      	ldr	r3, [r7, #8]
    23c4:	ea4f 3393 	mov.w	r3, r3, lsr #14
    23c8:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    23ca:	68ba      	ldr	r2, [r7, #8]
    23cc:	4b0c      	ldr	r3, [pc, #48]	(2400 <RCC_GetClocksFreq+0x1f0>)
    23ce:	5c9b      	ldrb	r3, [r3, r2]
    23d0:	b2db      	uxtb	r3, r3
    23d2:	617b      	str	r3, [r7, #20]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    23d4:	687b      	ldr	r3, [r7, #4]
    23d6:	68da      	ldr	r2, [r3, #12]
    23d8:	697b      	ldr	r3, [r7, #20]
    23da:	fbb2 f2f3 	udiv	r2, r2, r3
    23de:	687b      	ldr	r3, [r7, #4]
    23e0:	611a      	str	r2, [r3, #16]
}
    23e2:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    23e6:	46bd      	mov	sp, r7
    23e8:	bc80      	pop	{r7}
    23ea:	4770      	bx	lr
    23ec:	40021000 	.word	0x40021000
    23f0:	007a1200 	.word	0x007a1200
    23f4:	017d7840 	.word	0x017d7840
    23f8:	003d0900 	.word	0x003d0900
    23fc:	20000000 	.word	0x20000000
    2400:	20000010 	.word	0x20000010

00002404 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
    240c:	460b      	mov	r3, r1
    240e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2410:	78fb      	ldrb	r3, [r7, #3]
    2412:	2b00      	cmp	r3, #0
    2414:	d007      	beq.n	2426 <RCC_AHBPeriphClockCmd+0x22>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    2416:	490b      	ldr	r1, [pc, #44]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2418:	4b0a      	ldr	r3, [pc, #40]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    241a:	695a      	ldr	r2, [r3, #20]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	ea42 0303 	orr.w	r3, r2, r3
    2422:	614b      	str	r3, [r1, #20]
    2424:	e008      	b.n	2438 <RCC_AHBPeriphClockCmd+0x34>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    2426:	4907      	ldr	r1, [pc, #28]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    2428:	4b06      	ldr	r3, [pc, #24]	(2444 <RCC_AHBPeriphClockCmd+0x40>)
    242a:	695a      	ldr	r2, [r3, #20]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	ea6f 0303 	mvn.w	r3, r3
    2432:	ea02 0303 	and.w	r3, r2, r3
    2436:	614b      	str	r3, [r1, #20]
  }
}
    2438:	f107 070c 	add.w	r7, r7, #12	; 0xc
    243c:	46bd      	mov	sp, r7
    243e:	bc80      	pop	{r7}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			(mov r8, r8)
    2444:	40021000 	.word	0x40021000

00002448 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2448:	b480      	push	{r7}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
    244e:	6078      	str	r0, [r7, #4]
    2450:	460b      	mov	r3, r1
    2452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2454:	78fb      	ldrb	r3, [r7, #3]
    2456:	2b00      	cmp	r3, #0
    2458:	d007      	beq.n	246a <RCC_APB2PeriphClockCmd+0x22>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    245a:	490b      	ldr	r1, [pc, #44]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245c:	4b0a      	ldr	r3, [pc, #40]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    245e:	699a      	ldr	r2, [r3, #24]
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	ea42 0303 	orr.w	r3, r2, r3
    2466:	618b      	str	r3, [r1, #24]
    2468:	e008      	b.n	247c <RCC_APB2PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    246a:	4907      	ldr	r1, [pc, #28]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246c:	4b06      	ldr	r3, [pc, #24]	(2488 <RCC_APB2PeriphClockCmd+0x40>)
    246e:	699a      	ldr	r2, [r3, #24]
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	ea6f 0303 	mvn.w	r3, r3
    2476:	ea02 0303 	and.w	r3, r2, r3
    247a:	618b      	str	r3, [r1, #24]
  }
}
    247c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2480:	46bd      	mov	sp, r7
    2482:	bc80      	pop	{r7}
    2484:	4770      	bx	lr
    2486:	46c0      	nop			(mov r8, r8)
    2488:	40021000 	.word	0x40021000

0000248c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    248c:	b480      	push	{r7}
    248e:	b083      	sub	sp, #12
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    2494:	460b      	mov	r3, r1
    2496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2498:	78fb      	ldrb	r3, [r7, #3]
    249a:	2b00      	cmp	r3, #0
    249c:	d007      	beq.n	24ae <RCC_APB1PeriphClockCmd+0x22>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    249e:	490b      	ldr	r1, [pc, #44]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a0:	4b0a      	ldr	r3, [pc, #40]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24a2:	69da      	ldr	r2, [r3, #28]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	ea42 0303 	orr.w	r3, r2, r3
    24aa:	61cb      	str	r3, [r1, #28]
    24ac:	e008      	b.n	24c0 <RCC_APB1PeriphClockCmd+0x34>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    24ae:	4907      	ldr	r1, [pc, #28]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b0:	4b06      	ldr	r3, [pc, #24]	(24cc <RCC_APB1PeriphClockCmd+0x40>)
    24b2:	69da      	ldr	r2, [r3, #28]
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	ea6f 0303 	mvn.w	r3, r3
    24ba:	ea02 0303 	and.w	r3, r2, r3
    24be:	61cb      	str	r3, [r1, #28]
  }
}
    24c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    24c4:	46bd      	mov	sp, r7
    24c6:	bc80      	pop	{r7}
    24c8:	4770      	bx	lr
    24ca:	46c0      	nop			(mov r8, r8)
    24cc:	40021000 	.word	0x40021000

000024d0 <RCC_AHBPeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    24d0:	b480      	push	{r7}
    24d2:	b083      	sub	sp, #12
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    24d8:	460b      	mov	r3, r1
    24da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    24dc:	78fb      	ldrb	r3, [r7, #3]
    24de:	2b00      	cmp	r3, #0
    24e0:	d007      	beq.n	24f2 <RCC_AHBPeriphResetCmd+0x22>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
    24e2:	490b      	ldr	r1, [pc, #44]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e4:	4b0a      	ldr	r3, [pc, #40]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24e6:	6a9a      	ldr	r2, [r3, #40]
    24e8:	687b      	ldr	r3, [r7, #4]
    24ea:	ea42 0303 	orr.w	r3, r2, r3
    24ee:	628b      	str	r3, [r1, #40]
    24f0:	e008      	b.n	2504 <RCC_AHBPeriphResetCmd+0x34>
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
    24f2:	4907      	ldr	r1, [pc, #28]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f4:	4b06      	ldr	r3, [pc, #24]	(2510 <RCC_AHBPeriphResetCmd+0x40>)
    24f6:	6a9a      	ldr	r2, [r3, #40]
    24f8:	687b      	ldr	r3, [r7, #4]
    24fa:	ea6f 0303 	mvn.w	r3, r3
    24fe:	ea02 0303 	and.w	r3, r2, r3
    2502:	628b      	str	r3, [r1, #40]
  }
}
    2504:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2508:	46bd      	mov	sp, r7
    250a:	bc80      	pop	{r7}
    250c:	4770      	bx	lr
    250e:	46c0      	nop			(mov r8, r8)
    2510:	40021000 	.word	0x40021000

00002514 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    2514:	b480      	push	{r7}
    2516:	b083      	sub	sp, #12
    2518:	af00      	add	r7, sp, #0
    251a:	6078      	str	r0, [r7, #4]
    251c:	460b      	mov	r3, r1
    251e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2520:	78fb      	ldrb	r3, [r7, #3]
    2522:	2b00      	cmp	r3, #0
    2524:	d007      	beq.n	2536 <RCC_APB2PeriphResetCmd+0x22>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    2526:	490b      	ldr	r1, [pc, #44]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2528:	4b0a      	ldr	r3, [pc, #40]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    252a:	68da      	ldr	r2, [r3, #12]
    252c:	687b      	ldr	r3, [r7, #4]
    252e:	ea42 0303 	orr.w	r3, r2, r3
    2532:	60cb      	str	r3, [r1, #12]
    2534:	e008      	b.n	2548 <RCC_APB2PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    2536:	4907      	ldr	r1, [pc, #28]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    2538:	4b06      	ldr	r3, [pc, #24]	(2554 <RCC_APB2PeriphResetCmd+0x40>)
    253a:	68da      	ldr	r2, [r3, #12]
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	ea6f 0303 	mvn.w	r3, r3
    2542:	ea02 0303 	and.w	r3, r2, r3
    2546:	60cb      	str	r3, [r1, #12]
  }
}
    2548:	f107 070c 	add.w	r7, r7, #12	; 0xc
    254c:	46bd      	mov	sp, r7
    254e:	bc80      	pop	{r7}
    2550:	4770      	bx	lr
    2552:	46c0      	nop			(mov r8, r8)
    2554:	40021000 	.word	0x40021000

00002558 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    2558:	b480      	push	{r7}
    255a:	b083      	sub	sp, #12
    255c:	af00      	add	r7, sp, #0
    255e:	6078      	str	r0, [r7, #4]
    2560:	460b      	mov	r3, r1
    2562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2564:	78fb      	ldrb	r3, [r7, #3]
    2566:	2b00      	cmp	r3, #0
    2568:	d007      	beq.n	257a <RCC_APB1PeriphResetCmd+0x22>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    256a:	490b      	ldr	r1, [pc, #44]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256c:	4b0a      	ldr	r3, [pc, #40]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    256e:	691a      	ldr	r2, [r3, #16]
    2570:	687b      	ldr	r3, [r7, #4]
    2572:	ea42 0303 	orr.w	r3, r2, r3
    2576:	610b      	str	r3, [r1, #16]
    2578:	e008      	b.n	258c <RCC_APB1PeriphResetCmd+0x34>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    257a:	4907      	ldr	r1, [pc, #28]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257c:	4b06      	ldr	r3, [pc, #24]	(2598 <RCC_APB1PeriphResetCmd+0x40>)
    257e:	691a      	ldr	r2, [r3, #16]
    2580:	687b      	ldr	r3, [r7, #4]
    2582:	ea6f 0303 	mvn.w	r3, r3
    2586:	ea02 0303 	and.w	r3, r2, r3
    258a:	610b      	str	r3, [r1, #16]
  }
}
    258c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2590:	46bd      	mov	sp, r7
    2592:	bc80      	pop	{r7}
    2594:	4770      	bx	lr
    2596:	46c0      	nop			(mov r8, r8)
    2598:	40021000 	.word	0x40021000

0000259c <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    259c:	b480      	push	{r7}
    259e:	b083      	sub	sp, #12
    25a0:	af00      	add	r7, sp, #0
    25a2:	4603      	mov	r3, r0
    25a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    25a6:	4a04      	ldr	r2, [pc, #16]	(25b8 <RCC_BackupResetCmd+0x1c>)
    25a8:	79fb      	ldrb	r3, [r7, #7]
    25aa:	6013      	str	r3, [r2, #0]
}
    25ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25b0:	46bd      	mov	sp, r7
    25b2:	bc80      	pop	{r7}
    25b4:	4770      	bx	lr
    25b6:	46c0      	nop			(mov r8, r8)
    25b8:	42420440 	.word	0x42420440

000025bc <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    25bc:	b480      	push	{r7}
    25be:	b083      	sub	sp, #12
    25c0:	af00      	add	r7, sp, #0
    25c2:	4603      	mov	r3, r0
    25c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    25c6:	4a04      	ldr	r2, [pc, #16]	(25d8 <RCC_ClockSecuritySystemCmd+0x1c>)
    25c8:	79fb      	ldrb	r3, [r7, #7]
    25ca:	6013      	str	r3, [r2, #0]
}
    25cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25d0:	46bd      	mov	sp, r7
    25d2:	bc80      	pop	{r7}
    25d4:	4770      	bx	lr
    25d6:	46c0      	nop			(mov r8, r8)
    25d8:	4242004c 	.word	0x4242004c

000025dc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    25dc:	b480      	push	{r7}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
    25e2:	4603      	mov	r3, r0
    25e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    25e6:	4a04      	ldr	r2, [pc, #16]	(25f8 <RCC_MCOConfig+0x1c>)
    25e8:	79fb      	ldrb	r3, [r7, #7]
    25ea:	7013      	strb	r3, [r2, #0]
}
    25ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    25f0:	46bd      	mov	sp, r7
    25f2:	bc80      	pop	{r7}
    25f4:	4770      	bx	lr
    25f6:	46c0      	nop			(mov r8, r8)
    25f8:	40021007 	.word	0x40021007

000025fc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    25fc:	b480      	push	{r7}
    25fe:	b087      	sub	sp, #28
    2600:	af00      	add	r7, sp, #0
    2602:	4603      	mov	r3, r0
    2604:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    2606:	f04f 0300 	mov.w	r3, #0	; 0x0
    260a:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    260c:	f04f 0300 	mov.w	r3, #0	; 0x0
    2610:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    2612:	f04f 0300 	mov.w	r3, #0	; 0x0
    2616:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    2618:	79fb      	ldrb	r3, [r7, #7]
    261a:	ea4f 1353 	mov.w	r3, r3, lsr #5
    261e:	b2db      	uxtb	r3, r3
    2620:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    2622:	68fb      	ldr	r3, [r7, #12]
    2624:	2b01      	cmp	r3, #1
    2626:	d103      	bne.n	2630 <RCC_GetFlagStatus+0x34>
  {
    statusreg = RCC->CR;
    2628:	4b14      	ldr	r3, [pc, #80]	(267c <RCC_GetFlagStatus+0x80>)
    262a:	681b      	ldr	r3, [r3, #0]
    262c:	613b      	str	r3, [r7, #16]
    262e:	e009      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    2630:	68fb      	ldr	r3, [r7, #12]
    2632:	2b02      	cmp	r3, #2
    2634:	d103      	bne.n	263e <RCC_GetFlagStatus+0x42>
  {
    statusreg = RCC->BDCR;
    2636:	4b11      	ldr	r3, [pc, #68]	(267c <RCC_GetFlagStatus+0x80>)
    2638:	6a1b      	ldr	r3, [r3, #32]
    263a:	613b      	str	r3, [r7, #16]
    263c:	e002      	b.n	2644 <RCC_GetFlagStatus+0x48>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    263e:	4b0f      	ldr	r3, [pc, #60]	(267c <RCC_GetFlagStatus+0x80>)
    2640:	6a5b      	ldr	r3, [r3, #36]
    2642:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2644:	79fb      	ldrb	r3, [r7, #7]
    2646:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    264a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    264c:	68fa      	ldr	r2, [r7, #12]
    264e:	693b      	ldr	r3, [r7, #16]
    2650:	fa23 f302 	lsr.w	r3, r3, r2
    2654:	f003 0301 	and.w	r3, r3, #1	; 0x1
    2658:	b2db      	uxtb	r3, r3
    265a:	2b00      	cmp	r3, #0
    265c:	d003      	beq.n	2666 <RCC_GetFlagStatus+0x6a>
  {
    bitstatus = SET;
    265e:	f04f 0301 	mov.w	r3, #1	; 0x1
    2662:	75fb      	strb	r3, [r7, #23]
    2664:	e002      	b.n	266c <RCC_GetFlagStatus+0x70>
  }
  else
  {
    bitstatus = RESET;
    2666:	f04f 0300 	mov.w	r3, #0	; 0x0
    266a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the flag status */
  return bitstatus;
    266c:	7dfb      	ldrb	r3, [r7, #23]
}
    266e:	4618      	mov	r0, r3
    2670:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2674:	46bd      	mov	sp, r7
    2676:	bc80      	pop	{r7}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			(mov r8, r8)
    267c:	40021000 	.word	0x40021000

00002680 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    2680:	b480      	push	{r7}
    2682:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    2684:	4a04      	ldr	r2, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2686:	4b04      	ldr	r3, [pc, #16]	(2698 <RCC_ClearFlag+0x18>)
    2688:	6a5b      	ldr	r3, [r3, #36]
    268a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    268e:	6253      	str	r3, [r2, #36]
}
    2690:	46bd      	mov	sp, r7
    2692:	bc80      	pop	{r7}
    2694:	4770      	bx	lr
    2696:	46c0      	nop			(mov r8, r8)
    2698:	40021000 	.word	0x40021000

0000269c <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    269c:	b480      	push	{r7}
    269e:	b085      	sub	sp, #20
    26a0:	af00      	add	r7, sp, #0
    26a2:	4603      	mov	r3, r0
    26a4:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    26a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    26aa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    26ac:	4b0a      	ldr	r3, [pc, #40]	(26d8 <RCC_GetITStatus+0x3c>)
    26ae:	689a      	ldr	r2, [r3, #8]
    26b0:	79fb      	ldrb	r3, [r7, #7]
    26b2:	ea02 0303 	and.w	r3, r2, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	d003      	beq.n	26c2 <RCC_GetITStatus+0x26>
  {
    bitstatus = SET;
    26ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    26be:	73fb      	strb	r3, [r7, #15]
    26c0:	e002      	b.n	26c8 <RCC_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
    26c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    26c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    26c8:	7bfb      	ldrb	r3, [r7, #15]
}
    26ca:	4618      	mov	r0, r3
    26cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    26d0:	46bd      	mov	sp, r7
    26d2:	bc80      	pop	{r7}
    26d4:	4770      	bx	lr
    26d6:	46c0      	nop			(mov r8, r8)
    26d8:	40021000 	.word	0x40021000

000026dc <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    26dc:	b480      	push	{r7}
    26de:	b083      	sub	sp, #12
    26e0:	af00      	add	r7, sp, #0
    26e2:	4603      	mov	r3, r0
    26e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    26e6:	4a04      	ldr	r2, [pc, #16]	(26f8 <RCC_ClearITPendingBit+0x1c>)
    26e8:	79fb      	ldrb	r3, [r7, #7]
    26ea:	7013      	strb	r3, [r2, #0]
}
    26ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    26f0:	46bd      	mov	sp, r7
    26f2:	bc80      	pop	{r7}
    26f4:	4770      	bx	lr
    26f6:	46c0      	nop			(mov r8, r8)
    26f8:	4002100a 	.word	0x4002100a

000026fc <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    26fc:	b580      	push	{r7, lr}
    26fe:	b082      	sub	sp, #8
    2700:	af00      	add	r7, sp, #0
    2702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    2704:	687a      	ldr	r2, [r7, #4]
    2706:	4b45      	ldr	r3, [pc, #276]	(281c <TIM_DeInit+0x120>)
    2708:	429a      	cmp	r2, r3
    270a:	d10c      	bne.n	2726 <TIM_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    270c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2710:	f04f 0101 	mov.w	r1, #1	; 0x1
    2714:	f7ff fefe 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    2718:	f44f 6000 	mov.w	r0, #2048	; 0x800
    271c:	f04f 0100 	mov.w	r1, #0	; 0x0
    2720:	f7ff fef8 	bl	2514 <RCC_APB2PeriphResetCmd>
    2724:	e075      	b.n	2812 <TIM_DeInit+0x116>
  }     
  else if (TIMx == TIM2)
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    272c:	d10c      	bne.n	2748 <TIM_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    272e:	f04f 0001 	mov.w	r0, #1	; 0x1
    2732:	f04f 0101 	mov.w	r1, #1	; 0x1
    2736:	f7ff ff0f 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    273a:	f04f 0001 	mov.w	r0, #1	; 0x1
    273e:	f04f 0100 	mov.w	r1, #0	; 0x0
    2742:	f7ff ff09 	bl	2558 <RCC_APB1PeriphResetCmd>
    2746:	e064      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM3)
    2748:	687a      	ldr	r2, [r7, #4]
    274a:	4b35      	ldr	r3, [pc, #212]	(2820 <TIM_DeInit+0x124>)
    274c:	429a      	cmp	r2, r3
    274e:	d10c      	bne.n	276a <TIM_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    2750:	f04f 0002 	mov.w	r0, #2	; 0x2
    2754:	f04f 0101 	mov.w	r1, #1	; 0x1
    2758:	f7ff fefe 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    275c:	f04f 0002 	mov.w	r0, #2	; 0x2
    2760:	f04f 0100 	mov.w	r1, #0	; 0x0
    2764:	f7ff fef8 	bl	2558 <RCC_APB1PeriphResetCmd>
    2768:	e053      	b.n	2812 <TIM_DeInit+0x116>
  }
  else if (TIMx == TIM4)
    276a:	687a      	ldr	r2, [r7, #4]
    276c:	4b2d      	ldr	r3, [pc, #180]	(2824 <TIM_DeInit+0x128>)
    276e:	429a      	cmp	r2, r3
    2770:	d10c      	bne.n	278c <TIM_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    2772:	f04f 0004 	mov.w	r0, #4	; 0x4
    2776:	f04f 0101 	mov.w	r1, #1	; 0x1
    277a:	f7ff feed 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    277e:	f04f 0004 	mov.w	r0, #4	; 0x4
    2782:	f04f 0100 	mov.w	r1, #0	; 0x0
    2786:	f7ff fee7 	bl	2558 <RCC_APB1PeriphResetCmd>
    278a:	e042      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM5)
    278c:	687a      	ldr	r2, [r7, #4]
    278e:	4b26      	ldr	r3, [pc, #152]	(2828 <TIM_DeInit+0x12c>)
    2790:	429a      	cmp	r2, r3
    2792:	d10c      	bne.n	27ae <TIM_DeInit+0xb2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    2794:	f04f 0008 	mov.w	r0, #8	; 0x8
    2798:	f04f 0101 	mov.w	r1, #1	; 0x1
    279c:	f7ff fedc 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    27a0:	f04f 0008 	mov.w	r0, #8	; 0x8
    27a4:	f04f 0100 	mov.w	r1, #0	; 0x0
    27a8:	f7ff fed6 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ac:	e031      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM6)
    27ae:	687a      	ldr	r2, [r7, #4]
    27b0:	4b1e      	ldr	r3, [pc, #120]	(282c <TIM_DeInit+0x130>)
    27b2:	429a      	cmp	r2, r3
    27b4:	d10c      	bne.n	27d0 <TIM_DeInit+0xd4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    27b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    27ba:	f04f 0101 	mov.w	r1, #1	; 0x1
    27be:	f7ff fecb 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    27c2:	f04f 0010 	mov.w	r0, #16	; 0x10
    27c6:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ca:	f7ff fec5 	bl	2558 <RCC_APB1PeriphResetCmd>
    27ce:	e020      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else if (TIMx == TIM7)
    27d0:	687a      	ldr	r2, [r7, #4]
    27d2:	4b17      	ldr	r3, [pc, #92]	(2830 <TIM_DeInit+0x134>)
    27d4:	429a      	cmp	r2, r3
    27d6:	d10c      	bne.n	27f2 <TIM_DeInit+0xf6>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    27d8:	f04f 0020 	mov.w	r0, #32	; 0x20
    27dc:	f04f 0101 	mov.w	r1, #1	; 0x1
    27e0:	f7ff feba 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    27e4:	f04f 0020 	mov.w	r0, #32	; 0x20
    27e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    27ec:	f7ff feb4 	bl	2558 <RCC_APB1PeriphResetCmd>
    27f0:	e00f      	b.n	2812 <TIM_DeInit+0x116>
  } 
  else
  {
    if (TIMx == TIM8)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	4b0f      	ldr	r3, [pc, #60]	(2834 <TIM_DeInit+0x138>)
    27f6:	429a      	cmp	r2, r3
    27f8:	d10b      	bne.n	2812 <TIM_DeInit+0x116>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    27fa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    27fe:	f04f 0101 	mov.w	r1, #1	; 0x1
    2802:	f7ff fe87 	bl	2514 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    2806:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    280a:	f04f 0100 	mov.w	r1, #0	; 0x0
    280e:	f7ff fe81 	bl	2514 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    2812:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2816:	46bd      	mov	sp, r7
    2818:	bd80      	pop	{r7, pc}
    281a:	46c0      	nop			(mov r8, r8)
    281c:	40012c00 	.word	0x40012c00
    2820:	40000400 	.word	0x40000400
    2824:	40000800 	.word	0x40000800
    2828:	40000c00 	.word	0x40000c00
    282c:	40001000 	.word	0x40001000
    2830:	40001400 	.word	0x40001400
    2834:	40013400 	.word	0x40013400

00002838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
  *   structure that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2838:	b480      	push	{r7}
    283a:	b083      	sub	sp, #12
    283c:	af00      	add	r7, sp, #0
    283e:	6078      	str	r0, [r7, #4]
    2840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
  /* Select the Counter Mode and set the clock division */
  TIMx->CR1 &= CR1_CKD_Mask & CR1_CounterMode_Mask;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	881b      	ldrh	r3, [r3, #0]
    2846:	b29b      	uxth	r3, r3
    2848:	f003 038f 	and.w	r3, r3, #143	; 0x8f
    284c:	687a      	ldr	r2, [r7, #4]
    284e:	8013      	strh	r3, [r2, #0]
  TIMx->CR1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision |
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	881b      	ldrh	r3, [r3, #0]
    2854:	b299      	uxth	r1, r3
    2856:	683b      	ldr	r3, [r7, #0]
    2858:	88da      	ldrh	r2, [r3, #6]
    285a:	683b      	ldr	r3, [r7, #0]
    285c:	885b      	ldrh	r3, [r3, #2]
    285e:	ea42 0303 	orr.w	r3, r2, r3
    2862:	b29b      	uxth	r3, r3
    2864:	ea41 0303 	orr.w	r3, r1, r3
    2868:	b29b      	uxth	r3, r3
    286a:	687a      	ldr	r2, [r7, #4]
    286c:	8013      	strh	r3, [r2, #0]
                TIM_TimeBaseInitStruct->TIM_CounterMode;
  
  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    286e:	683b      	ldr	r3, [r7, #0]
    2870:	889b      	ldrh	r3, [r3, #4]
    2872:	687a      	ldr	r2, [r7, #4]
    2874:	8593      	strh	r3, [r2, #44]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    2876:	683b      	ldr	r3, [r7, #0]
    2878:	881b      	ldrh	r3, [r3, #0]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	8513      	strh	r3, [r2, #40]
    
  if ((((uint32_t) TIMx) == TIM1_BASE) || (((uint32_t) TIMx) == TIM8_BASE))  
    287e:	687a      	ldr	r2, [r7, #4]
    2880:	4b09      	ldr	r3, [pc, #36]	(28a8 <TIM_TimeBaseInit+0x70>)
    2882:	429a      	cmp	r2, r3
    2884:	d003      	beq.n	288e <TIM_TimeBaseInit+0x56>
    2886:	687a      	ldr	r2, [r7, #4]
    2888:	4b08      	ldr	r3, [pc, #32]	(28ac <TIM_TimeBaseInit+0x74>)
    288a:	429a      	cmp	r2, r3
    288c:	d103      	bne.n	2896 <TIM_TimeBaseInit+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    288e:	683b      	ldr	r3, [r7, #0]
    2890:	7a1b      	ldrb	r3, [r3, #8]
    2892:	687a      	ldr	r2, [r7, #4]
    2894:	8613      	strh	r3, [r2, #48]
  }

  /* Generate an update event to reload the Prescaler value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
    2896:	687b      	ldr	r3, [r7, #4]
    2898:	f04f 0201 	mov.w	r2, #1	; 0x1
    289c:	829a      	strh	r2, [r3, #20]
}
    289e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr
    28a8:	40012c00 	.word	0x40012c00
    28ac:	40013400 	.word	0x40013400

000028b0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    28b0:	b480      	push	{r7}
    28b2:	b087      	sub	sp, #28
    28b4:	af00      	add	r7, sp, #0
    28b6:	60f8      	str	r0, [r7, #12]
    28b8:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    28ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    28be:	827b      	strh	r3, [r7, #18]
    28c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    28c4:	82bb      	strh	r3, [r7, #20]
    28c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    28ca:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    28cc:	68fb      	ldr	r3, [r7, #12]
    28ce:	8c1b      	ldrh	r3, [r3, #32]
    28d0:	b29b      	uxth	r3, r3
    28d2:	607b      	str	r3, [r7, #4]
    28d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    28d8:	6879      	ldr	r1, [r7, #4]
    28da:	ea01 0303 	and.w	r3, r1, r3
    28de:	607b      	str	r3, [r7, #4]
    28e0:	68fa      	ldr	r2, [r7, #12]
    28e2:	6879      	ldr	r1, [r7, #4]
    28e4:	460b      	mov	r3, r1
    28e6:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    28e8:	68fb      	ldr	r3, [r7, #12]
    28ea:	8c1b      	ldrh	r3, [r3, #32]
    28ec:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	889b      	ldrh	r3, [r3, #4]
    28f2:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	8b1b      	ldrh	r3, [r3, #24]
    28f8:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;
    28fa:	8a7b      	ldrh	r3, [r7, #18]
    28fc:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2900:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	881a      	ldrh	r2, [r3, #0]
    2906:	8a7b      	ldrh	r3, [r7, #18]
    2908:	ea42 0303 	orr.w	r3, r2, r3
    290c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC1P_Reset;
    290e:	8abb      	ldrh	r3, [r7, #20]
    2910:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    2914:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    2916:	68bb      	ldr	r3, [r7, #8]
    2918:	891a      	ldrh	r2, [r3, #8]
    291a:	8abb      	ldrh	r3, [r7, #20]
    291c:	ea42 0303 	orr.w	r3, r2, r3
    2920:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    2922:	68bb      	ldr	r3, [r7, #8]
    2924:	885a      	ldrh	r2, [r3, #2]
    2926:	8abb      	ldrh	r3, [r7, #20]
    2928:	ea42 0303 	orr.w	r3, r2, r3
    292c:	82bb      	strh	r3, [r7, #20]
 
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    292e:	68fa      	ldr	r2, [r7, #12]
    2930:	4b24      	ldr	r3, [pc, #144]	(29c4 <TIM_OC1Init+0x114>)
    2932:	429a      	cmp	r2, r3
    2934:	d003      	beq.n	293e <TIM_OC1Init+0x8e>
    2936:	68fa      	ldr	r2, [r7, #12]
    2938:	4b23      	ldr	r3, [pc, #140]	(29c8 <TIM_OC1Init+0x118>)
    293a:	429a      	cmp	r2, r3
    293c:	d12f      	bne.n	299e <TIM_OC1Init+0xee>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC1NP_Reset;
    293e:	8abb      	ldrh	r3, [r7, #20]
    2940:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    2944:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    2946:	68bb      	ldr	r3, [r7, #8]
    2948:	895a      	ldrh	r2, [r3, #10]
    294a:	8abb      	ldrh	r3, [r7, #20]
    294c:	ea42 0303 	orr.w	r3, r2, r3
    2950:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC1NE_Reset;
    2952:	8abb      	ldrh	r3, [r7, #20]
    2954:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    2958:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    295a:	68bb      	ldr	r3, [r7, #8]
    295c:	889a      	ldrh	r2, [r3, #4]
    295e:	8abb      	ldrh	r3, [r7, #20]
    2960:	ea42 0303 	orr.w	r3, r2, r3
    2964:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS1_Reset;
    2966:	8afb      	ldrh	r3, [r7, #22]
    2968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    296c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2970:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2974:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS1N_Reset;
    2976:	8afb      	ldrh	r3, [r7, #22]
    2978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    297c:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2980:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2984:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    2986:	68bb      	ldr	r3, [r7, #8]
    2988:	899a      	ldrh	r2, [r3, #12]
    298a:	8afb      	ldrh	r3, [r7, #22]
    298c:	ea42 0303 	orr.w	r3, r2, r3
    2990:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    2992:	68bb      	ldr	r3, [r7, #8]
    2994:	89da      	ldrh	r2, [r3, #14]
    2996:	8afb      	ldrh	r3, [r7, #22]
    2998:	ea42 0303 	orr.w	r3, r2, r3
    299c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    299e:	68fa      	ldr	r2, [r7, #12]
    29a0:	8afb      	ldrh	r3, [r7, #22]
    29a2:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    29a4:	68fa      	ldr	r2, [r7, #12]
    29a6:	8a7b      	ldrh	r3, [r7, #18]
    29a8:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
    29aa:	68bb      	ldr	r3, [r7, #8]
    29ac:	88db      	ldrh	r3, [r3, #6]
    29ae:	68fa      	ldr	r2, [r7, #12]
    29b0:	8693      	strh	r3, [r2, #52]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    29b2:	68fa      	ldr	r2, [r7, #12]
    29b4:	8abb      	ldrh	r3, [r7, #20]
    29b6:	8413      	strh	r3, [r2, #32]
}
    29b8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    29bc:	46bd      	mov	sp, r7
    29be:	bc80      	pop	{r7}
    29c0:	4770      	bx	lr
    29c2:	46c0      	nop			(mov r8, r8)
    29c4:	40012c00 	.word	0x40012c00
    29c8:	40013400 	.word	0x40013400

000029cc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    29cc:	b480      	push	{r7}
    29ce:	b087      	sub	sp, #28
    29d0:	af00      	add	r7, sp, #0
    29d2:	60f8      	str	r0, [r7, #12]
    29d4:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    29d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    29da:	827b      	strh	r3, [r7, #18]
    29dc:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e0:	82bb      	strh	r3, [r7, #20]
    29e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    29e6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    29e8:	68fb      	ldr	r3, [r7, #12]
    29ea:	8c1b      	ldrh	r3, [r3, #32]
    29ec:	b29b      	uxth	r3, r3
    29ee:	607b      	str	r3, [r7, #4]
    29f0:	f64f 73ef 	movw	r3, #65519	; 0xffef
    29f4:	6879      	ldr	r1, [r7, #4]
    29f6:	ea01 0303 	and.w	r3, r1, r3
    29fa:	607b      	str	r3, [r7, #4]
    29fc:	68fa      	ldr	r2, [r7, #12]
    29fe:	6879      	ldr	r1, [r7, #4]
    2a00:	460b      	mov	r3, r1
    2a02:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    2a04:	68fb      	ldr	r3, [r7, #12]
    2a06:	8c1b      	ldrh	r3, [r3, #32]
    2a08:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2a0a:	68fb      	ldr	r3, [r7, #12]
    2a0c:	889b      	ldrh	r3, [r3, #4]
    2a0e:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    2a10:	68fb      	ldr	r3, [r7, #12]
    2a12:	8b1b      	ldrh	r3, [r3, #24]
    2a14:	827b      	strh	r3, [r7, #18]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask;  
    2a16:	8a7b      	ldrh	r3, [r7, #18]
    2a18:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2a1c:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2a1e:	68bb      	ldr	r3, [r7, #8]
    2a20:	881b      	ldrh	r3, [r3, #0]
    2a22:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2a26:	b29a      	uxth	r2, r3
    2a28:	8a7b      	ldrh	r3, [r7, #18]
    2a2a:	ea42 0303 	orr.w	r3, r2, r3
    2a2e:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC2P_Reset;
    2a30:	8abb      	ldrh	r3, [r7, #20]
    2a32:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    2a36:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    2a38:	68bb      	ldr	r3, [r7, #8]
    2a3a:	891b      	ldrh	r3, [r3, #8]
    2a3c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a40:	b29a      	uxth	r2, r3
    2a42:	8abb      	ldrh	r3, [r7, #20]
    2a44:	ea42 0303 	orr.w	r3, r2, r3
    2a48:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    2a4a:	68bb      	ldr	r3, [r7, #8]
    2a4c:	885b      	ldrh	r3, [r3, #2]
    2a4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a52:	b29a      	uxth	r2, r3
    2a54:	8abb      	ldrh	r3, [r7, #20]
    2a56:	ea42 0303 	orr.w	r3, r2, r3
    2a5a:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2a5c:	68fa      	ldr	r2, [r7, #12]
    2a5e:	4b2a      	ldr	r3, [pc, #168]	(2b08 <TIM_OC2Init+0x13c>)
    2a60:	429a      	cmp	r2, r3
    2a62:	d003      	beq.n	2a6c <TIM_OC2Init+0xa0>
    2a64:	68fa      	ldr	r2, [r7, #12]
    2a66:	4b29      	ldr	r3, [pc, #164]	(2b0c <TIM_OC2Init+0x140>)
    2a68:	429a      	cmp	r2, r3
    2a6a:	d13b      	bne.n	2ae4 <TIM_OC2Init+0x118>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC2NP_Reset;
    2a6c:	8abb      	ldrh	r3, [r7, #20]
    2a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2a72:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    2a74:	68bb      	ldr	r3, [r7, #8]
    2a76:	895b      	ldrh	r3, [r3, #10]
    2a78:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a7c:	b29a      	uxth	r2, r3
    2a7e:	8abb      	ldrh	r3, [r7, #20]
    2a80:	ea42 0303 	orr.w	r3, r2, r3
    2a84:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC2NE_Reset;
    2a86:	8abb      	ldrh	r3, [r7, #20]
    2a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    2a8c:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    2a8e:	68bb      	ldr	r3, [r7, #8]
    2a90:	889b      	ldrh	r3, [r3, #4]
    2a92:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a96:	b29a      	uxth	r2, r3
    2a98:	8abb      	ldrh	r3, [r7, #20]
    2a9a:	ea42 0303 	orr.w	r3, r2, r3
    2a9e:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS2_Reset;
    2aa0:	8afb      	ldrh	r3, [r7, #22]
    2aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2aa6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aaa:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2aae:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS2N_Reset;
    2ab0:	8afb      	ldrh	r3, [r7, #22]
    2ab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2ab6:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2aba:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2abe:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    2ac0:	68bb      	ldr	r3, [r7, #8]
    2ac2:	899b      	ldrh	r3, [r3, #12]
    2ac4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ac8:	b29a      	uxth	r2, r3
    2aca:	8afb      	ldrh	r3, [r7, #22]
    2acc:	ea42 0303 	orr.w	r3, r2, r3
    2ad0:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    2ad2:	68bb      	ldr	r3, [r7, #8]
    2ad4:	89db      	ldrh	r3, [r3, #14]
    2ad6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2ada:	b29a      	uxth	r2, r3
    2adc:	8afb      	ldrh	r3, [r7, #22]
    2ade:	ea42 0303 	orr.w	r3, r2, r3
    2ae2:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2ae4:	68fa      	ldr	r2, [r7, #12]
    2ae6:	8afb      	ldrh	r3, [r7, #22]
    2ae8:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    2aea:	68fa      	ldr	r2, [r7, #12]
    2aec:	8a7b      	ldrh	r3, [r7, #18]
    2aee:	8313      	strh	r3, [r2, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    2af0:	68bb      	ldr	r3, [r7, #8]
    2af2:	88db      	ldrh	r3, [r3, #6]
    2af4:	68fa      	ldr	r2, [r7, #12]
    2af6:	8713      	strh	r3, [r2, #56]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2af8:	68fa      	ldr	r2, [r7, #12]
    2afa:	8abb      	ldrh	r3, [r7, #20]
    2afc:	8413      	strh	r3, [r2, #32]
}
    2afe:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2b02:	46bd      	mov	sp, r7
    2b04:	bc80      	pop	{r7}
    2b06:	4770      	bx	lr
    2b08:	40012c00 	.word	0x40012c00
    2b0c:	40013400 	.word	0x40013400

00002b10 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2b10:	b480      	push	{r7}
    2b12:	b087      	sub	sp, #28
    2b14:	af00      	add	r7, sp, #0
    2b16:	60f8      	str	r0, [r7, #12]
    2b18:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b1e:	827b      	strh	r3, [r7, #18]
    2b20:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b24:	82bb      	strh	r3, [r7, #20]
    2b26:	f04f 0300 	mov.w	r3, #0	; 0x0
    2b2a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    2b2c:	68fb      	ldr	r3, [r7, #12]
    2b2e:	8c1b      	ldrh	r3, [r3, #32]
    2b30:	b29b      	uxth	r3, r3
    2b32:	607b      	str	r3, [r7, #4]
    2b34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    2b38:	6879      	ldr	r1, [r7, #4]
    2b3a:	ea01 0303 	and.w	r3, r1, r3
    2b3e:	607b      	str	r3, [r7, #4]
    2b40:	68fa      	ldr	r2, [r7, #12]
    2b42:	6879      	ldr	r1, [r7, #4]
    2b44:	460b      	mov	r3, r1
    2b46:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2b48:	68fb      	ldr	r3, [r7, #12]
    2b4a:	8c1b      	ldrh	r3, [r3, #32]
    2b4c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2b4e:	68fb      	ldr	r3, [r7, #12]
    2b50:	889b      	ldrh	r3, [r3, #4]
    2b52:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2b54:	68fb      	ldr	r3, [r7, #12]
    2b56:	8b9b      	ldrh	r3, [r3, #28]
    2b58:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC13M_Mask & CCMR_CC13S_Mask;  
    2b5a:	8a7b      	ldrh	r3, [r7, #18]
    2b5c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
    2b60:	827b      	strh	r3, [r7, #18]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    2b62:	68bb      	ldr	r3, [r7, #8]
    2b64:	881a      	ldrh	r2, [r3, #0]
    2b66:	8a7b      	ldrh	r3, [r7, #18]
    2b68:	ea42 0303 	orr.w	r3, r2, r3
    2b6c:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC3P_Reset;
    2b6e:	8abb      	ldrh	r3, [r7, #20]
    2b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    2b74:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    2b76:	68bb      	ldr	r3, [r7, #8]
    2b78:	891b      	ldrh	r3, [r3, #8]
    2b7a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b7e:	b29a      	uxth	r2, r3
    2b80:	8abb      	ldrh	r3, [r7, #20]
    2b82:	ea42 0303 	orr.w	r3, r2, r3
    2b86:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    2b88:	68bb      	ldr	r3, [r7, #8]
    2b8a:	885b      	ldrh	r3, [r3, #2]
    2b8c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2b90:	b29a      	uxth	r2, r3
    2b92:	8abb      	ldrh	r3, [r7, #20]
    2b94:	ea42 0303 	orr.w	r3, r2, r3
    2b98:	82bb      	strh	r3, [r7, #20]
   
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2b9a:	68fa      	ldr	r2, [r7, #12]
    2b9c:	4b2a      	ldr	r3, [pc, #168]	(2c48 <TIM_OC3Init+0x138>)
    2b9e:	429a      	cmp	r2, r3
    2ba0:	d003      	beq.n	2baa <TIM_OC3Init+0x9a>
    2ba2:	68fa      	ldr	r2, [r7, #12]
    2ba4:	4b29      	ldr	r3, [pc, #164]	(2c4c <TIM_OC3Init+0x13c>)
    2ba6:	429a      	cmp	r2, r3
    2ba8:	d13b      	bne.n	2c22 <TIM_OC3Init+0x112>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= CCER_CC3NP_Reset;
    2baa:	8abb      	ldrh	r3, [r7, #20]
    2bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2bb0:	82bb      	strh	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    2bb2:	68bb      	ldr	r3, [r7, #8]
    2bb4:	895b      	ldrh	r3, [r3, #10]
    2bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bba:	b29a      	uxth	r2, r3
    2bbc:	8abb      	ldrh	r3, [r7, #20]
    2bbe:	ea42 0303 	orr.w	r3, r2, r3
    2bc2:	82bb      	strh	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= CCER_CC3NE_Reset;
    2bc4:	8abb      	ldrh	r3, [r7, #20]
    2bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2bca:	82bb      	strh	r3, [r7, #20]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    2bcc:	68bb      	ldr	r3, [r7, #8]
    2bce:	889b      	ldrh	r3, [r3, #4]
    2bd0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2bd4:	b29a      	uxth	r2, r3
    2bd6:	8abb      	ldrh	r3, [r7, #20]
    2bd8:	ea42 0303 	orr.w	r3, r2, r3
    2bdc:	82bb      	strh	r3, [r7, #20]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= CR2_OIS3_Reset;
    2bde:	8afb      	ldrh	r3, [r7, #22]
    2be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2be4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2be8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bec:	82fb      	strh	r3, [r7, #22]
    tmpcr2 &= CR2_OIS3N_Reset;
    2bee:	8afb      	ldrh	r3, [r7, #22]
    2bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2bf4:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2bf8:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2bfc:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    2bfe:	68bb      	ldr	r3, [r7, #8]
    2c00:	899b      	ldrh	r3, [r3, #12]
    2c02:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c06:	b29a      	uxth	r2, r3
    2c08:	8afb      	ldrh	r3, [r7, #22]
    2c0a:	ea42 0303 	orr.w	r3, r2, r3
    2c0e:	82fb      	strh	r3, [r7, #22]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    2c10:	68bb      	ldr	r3, [r7, #8]
    2c12:	89db      	ldrh	r3, [r3, #14]
    2c14:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2c18:	b29a      	uxth	r2, r3
    2c1a:	8afb      	ldrh	r3, [r7, #22]
    2c1c:	ea42 0303 	orr.w	r3, r2, r3
    2c20:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2c22:	68fa      	ldr	r2, [r7, #12]
    2c24:	8afb      	ldrh	r3, [r7, #22]
    2c26:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    2c28:	68fa      	ldr	r2, [r7, #12]
    2c2a:	8a7b      	ldrh	r3, [r7, #18]
    2c2c:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    2c2e:	68bb      	ldr	r3, [r7, #8]
    2c30:	88db      	ldrh	r3, [r3, #6]
    2c32:	68fa      	ldr	r2, [r7, #12]
    2c34:	8793      	strh	r3, [r2, #60]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2c36:	68fa      	ldr	r2, [r7, #12]
    2c38:	8abb      	ldrh	r3, [r7, #20]
    2c3a:	8413      	strh	r3, [r2, #32]
}
    2c3c:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2c40:	46bd      	mov	sp, r7
    2c42:	bc80      	pop	{r7}
    2c44:	4770      	bx	lr
    2c46:	46c0      	nop			(mov r8, r8)
    2c48:	40012c00 	.word	0x40012c00
    2c4c:	40013400 	.word	0x40013400

00002c50 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2c50:	b480      	push	{r7}
    2c52:	b087      	sub	sp, #28
    2c54:	af00      	add	r7, sp, #0
    2c56:	60f8      	str	r0, [r7, #12]
    2c58:	60b9      	str	r1, [r7, #8]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    2c5a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c5e:	827b      	strh	r3, [r7, #18]
    2c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c64:	82bb      	strh	r3, [r7, #20]
    2c66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2c6a:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    2c6c:	68fb      	ldr	r3, [r7, #12]
    2c6e:	8c1b      	ldrh	r3, [r3, #32]
    2c70:	b29b      	uxth	r3, r3
    2c72:	607b      	str	r3, [r7, #4]
    2c74:	f64e 73ff 	movw	r3, #61439	; 0xefff
    2c78:	6879      	ldr	r1, [r7, #4]
    2c7a:	ea01 0303 	and.w	r3, r1, r3
    2c7e:	607b      	str	r3, [r7, #4]
    2c80:	68fa      	ldr	r2, [r7, #12]
    2c82:	6879      	ldr	r1, [r7, #4]
    2c84:	460b      	mov	r3, r1
    2c86:	8413      	strh	r3, [r2, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    2c88:	68fb      	ldr	r3, [r7, #12]
    2c8a:	8c1b      	ldrh	r3, [r3, #32]
    2c8c:	82bb      	strh	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	889b      	ldrh	r3, [r3, #4]
    2c92:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	8b9b      	ldrh	r3, [r3, #28]
    2c98:	827b      	strh	r3, [r7, #18]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= CCMR_OC24M_Mask & CCMR_CC24S_Mask; 
    2c9a:	8a7b      	ldrh	r3, [r7, #18]
    2c9c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
    2ca0:	827b      	strh	r3, [r7, #18]
   
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    2ca2:	68bb      	ldr	r3, [r7, #8]
    2ca4:	881b      	ldrh	r3, [r3, #0]
    2ca6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2caa:	b29a      	uxth	r2, r3
    2cac:	8a7b      	ldrh	r3, [r7, #18]
    2cae:	ea42 0303 	orr.w	r3, r2, r3
    2cb2:	827b      	strh	r3, [r7, #18]
  
  /* Reset the Output Polarity level */
  tmpccer &= CCER_CC4P_Reset;
    2cb4:	8abb      	ldrh	r3, [r7, #20]
    2cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2cba:	82bb      	strh	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    2cbc:	68bb      	ldr	r3, [r7, #8]
    2cbe:	891b      	ldrh	r3, [r3, #8]
    2cc0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cc4:	b29a      	uxth	r2, r3
    2cc6:	8abb      	ldrh	r3, [r7, #20]
    2cc8:	ea42 0303 	orr.w	r3, r2, r3
    2ccc:	82bb      	strh	r3, [r7, #20]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    2cce:	68bb      	ldr	r3, [r7, #8]
    2cd0:	885b      	ldrh	r3, [r3, #2]
    2cd2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    2cd6:	b29a      	uxth	r2, r3
    2cd8:	8abb      	ldrh	r3, [r7, #20]
    2cda:	ea42 0303 	orr.w	r3, r2, r3
    2cde:	82bb      	strh	r3, [r7, #20]
    
  if(((uint32_t) TIMx == TIM1_BASE) || ((uint32_t) TIMx == TIM8_BASE))
    2ce0:	68fa      	ldr	r2, [r7, #12]
    2ce2:	4b14      	ldr	r3, [pc, #80]	(2d34 <TIM_OC4Init+0xe4>)
    2ce4:	429a      	cmp	r2, r3
    2ce6:	d003      	beq.n	2cf0 <TIM_OC4Init+0xa0>
    2ce8:	68fa      	ldr	r2, [r7, #12]
    2cea:	4b13      	ldr	r3, [pc, #76]	(2d38 <TIM_OC4Init+0xe8>)
    2cec:	429a      	cmp	r2, r3
    2cee:	d10e      	bne.n	2d0e <TIM_OC4Init+0xbe>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= CR2_OIS4_Reset;
    2cf0:	8afb      	ldrh	r3, [r7, #22]
    2cf2:	ea4f 4383 	mov.w	r3, r3, lsl #18
    2cf6:	ea4f 4393 	mov.w	r3, r3, lsr #18
    2cfa:	82fb      	strh	r3, [r7, #22]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    2cfc:	68bb      	ldr	r3, [r7, #8]
    2cfe:	899b      	ldrh	r3, [r3, #12]
    2d00:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2d04:	b29a      	uxth	r2, r3
    2d06:	8afb      	ldrh	r3, [r7, #22]
    2d08:	ea42 0303 	orr.w	r3, r2, r3
    2d0c:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    2d0e:	68fa      	ldr	r2, [r7, #12]
    2d10:	8afb      	ldrh	r3, [r7, #22]
    2d12:	8093      	strh	r3, [r2, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    2d14:	68fa      	ldr	r2, [r7, #12]
    2d16:	8a7b      	ldrh	r3, [r7, #18]
    2d18:	8393      	strh	r3, [r2, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    2d1a:	68bb      	ldr	r3, [r7, #8]
    2d1c:	88db      	ldrh	r3, [r3, #6]
    2d1e:	68fa      	ldr	r2, [r7, #12]
    2d20:	f8a2 3040 	strh.w	r3, [r2, #64]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    2d24:	68fa      	ldr	r2, [r7, #12]
    2d26:	8abb      	ldrh	r3, [r7, #20]
    2d28:	8413      	strh	r3, [r2, #32]
}
    2d2a:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    2d2e:	46bd      	mov	sp, r7
    2d30:	bc80      	pop	{r7}
    2d32:	4770      	bx	lr
    2d34:	40012c00 	.word	0x40012c00
    2d38:	40013400 	.word	0x40013400

00002d3c <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2d3c:	b580      	push	{r7, lr}
    2d3e:	b082      	sub	sp, #8
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2d46:	683b      	ldr	r3, [r7, #0]
    2d48:	881b      	ldrh	r3, [r3, #0]
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d10f      	bne.n	2d6e <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d4e:	683b      	ldr	r3, [r7, #0]
    2d50:	8859      	ldrh	r1, [r3, #2]
    2d52:	683b      	ldr	r3, [r7, #0]
    2d54:	889a      	ldrh	r2, [r3, #4]
    2d56:	683b      	ldr	r3, [r7, #0]
    2d58:	891b      	ldrh	r3, [r3, #8]
    2d5a:	6878      	ldr	r0, [r7, #4]
    2d5c:	f001 faa2 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d60:	683b      	ldr	r3, [r7, #0]
    2d62:	88db      	ldrh	r3, [r3, #6]
    2d64:	6878      	ldr	r0, [r7, #4]
    2d66:	4619      	mov	r1, r3
    2d68:	f001 f926 	bl	3fb8 <TIM_SetIC1Prescaler>
    2d6c:	e036      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    2d6e:	683b      	ldr	r3, [r7, #0]
    2d70:	881b      	ldrh	r3, [r3, #0]
    2d72:	2b04      	cmp	r3, #4
    2d74:	d10f      	bne.n	2d96 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	8859      	ldrh	r1, [r3, #2]
    2d7a:	683b      	ldr	r3, [r7, #0]
    2d7c:	889a      	ldrh	r2, [r3, #4]
    2d7e:	683b      	ldr	r3, [r7, #0]
    2d80:	891b      	ldrh	r3, [r3, #8]
    2d82:	6878      	ldr	r0, [r7, #4]
    2d84:	f001 fada 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2d88:	683b      	ldr	r3, [r7, #0]
    2d8a:	88db      	ldrh	r3, [r3, #6]
    2d8c:	6878      	ldr	r0, [r7, #4]
    2d8e:	4619      	mov	r1, r3
    2d90:	f001 f934 	bl	3ffc <TIM_SetIC2Prescaler>
    2d94:	e022      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    2d96:	683b      	ldr	r3, [r7, #0]
    2d98:	881b      	ldrh	r3, [r3, #0]
    2d9a:	2b08      	cmp	r3, #8
    2d9c:	d10f      	bne.n	2dbe <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    2d9e:	683b      	ldr	r3, [r7, #0]
    2da0:	8859      	ldrh	r1, [r3, #2]
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	889a      	ldrh	r2, [r3, #4]
    2da6:	683b      	ldr	r3, [r7, #0]
    2da8:	891b      	ldrh	r3, [r3, #8]
    2daa:	6878      	ldr	r0, [r7, #4]
    2dac:	f001 fb22 	bl	43f4 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	88db      	ldrh	r3, [r3, #6]
    2db4:	6878      	ldr	r0, [r7, #4]
    2db6:	4619      	mov	r1, r3
    2db8:	f001 f946 	bl	4048 <TIM_SetIC3Prescaler>
    2dbc:	e00e      	b.n	2ddc <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    2dbe:	683b      	ldr	r3, [r7, #0]
    2dc0:	8859      	ldrh	r1, [r3, #2]
    2dc2:	683b      	ldr	r3, [r7, #0]
    2dc4:	889a      	ldrh	r2, [r3, #4]
    2dc6:	683b      	ldr	r3, [r7, #0]
    2dc8:	891b      	ldrh	r3, [r3, #8]
    2dca:	6878      	ldr	r0, [r7, #4]
    2dcc:	f001 fb66 	bl	449c <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2dd0:	683b      	ldr	r3, [r7, #0]
    2dd2:	88db      	ldrh	r3, [r3, #6]
    2dd4:	6878      	ldr	r0, [r7, #4]
    2dd6:	4619      	mov	r1, r3
    2dd8:	f001 f958 	bl	408c <TIM_SetIC4Prescaler>
  }
}
    2ddc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    2de0:	46bd      	mov	sp, r7
    2de2:	bd80      	pop	{r7, pc}

00002de4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *   that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2de4:	b580      	push	{r7, lr}
    2de6:	b084      	sub	sp, #16
    2de8:	af00      	add	r7, sp, #0
    2dea:	6078      	str	r0, [r7, #4]
    2dec:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    2dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2df2:	81bb      	strh	r3, [r7, #12]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    2df4:	f04f 0301 	mov.w	r3, #1	; 0x1
    2df8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    2dfa:	683b      	ldr	r3, [r7, #0]
    2dfc:	885b      	ldrh	r3, [r3, #2]
    2dfe:	2b00      	cmp	r3, #0
    2e00:	d103      	bne.n	2e0a <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    2e02:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e06:	81bb      	strh	r3, [r7, #12]
    2e08:	e002      	b.n	2e10 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    2e0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2e0e:	81bb      	strh	r3, [r7, #12]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    2e10:	683b      	ldr	r3, [r7, #0]
    2e12:	889b      	ldrh	r3, [r3, #4]
    2e14:	2b01      	cmp	r3, #1
    2e16:	d103      	bne.n	2e20 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    2e18:	f04f 0302 	mov.w	r3, #2	; 0x2
    2e1c:	81fb      	strh	r3, [r7, #14]
    2e1e:	e002      	b.n	2e26 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    2e20:	f04f 0301 	mov.w	r3, #1	; 0x1
    2e24:	81fb      	strh	r3, [r7, #14]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    2e26:	683b      	ldr	r3, [r7, #0]
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	d11f      	bne.n	2e6e <TIM_PWMIConfig+0x8a>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e2e:	683b      	ldr	r3, [r7, #0]
    2e30:	8859      	ldrh	r1, [r3, #2]
    2e32:	683b      	ldr	r3, [r7, #0]
    2e34:	889a      	ldrh	r2, [r3, #4]
    2e36:	683b      	ldr	r3, [r7, #0]
    2e38:	891b      	ldrh	r3, [r3, #8]
    2e3a:	6878      	ldr	r0, [r7, #4]
    2e3c:	f001 fa32 	bl	42a4 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e40:	683b      	ldr	r3, [r7, #0]
    2e42:	88db      	ldrh	r3, [r3, #6]
    2e44:	6878      	ldr	r0, [r7, #4]
    2e46:	4619      	mov	r1, r3
    2e48:	f001 f8b6 	bl	3fb8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e4c:	683b      	ldr	r3, [r7, #0]
    2e4e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e52:	89bb      	ldrh	r3, [r7, #12]
    2e54:	89fa      	ldrh	r2, [r7, #14]
    2e56:	6878      	ldr	r0, [r7, #4]
    2e58:	4619      	mov	r1, r3
    2e5a:	4663      	mov	r3, ip
    2e5c:	f001 fa6e 	bl	433c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	88db      	ldrh	r3, [r3, #6]
    2e64:	6878      	ldr	r0, [r7, #4]
    2e66:	4619      	mov	r1, r3
    2e68:	f001 f8c8 	bl	3ffc <TIM_SetIC2Prescaler>
    2e6c:	e01e      	b.n	2eac <TIM_PWMIConfig+0xc8>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    2e6e:	683b      	ldr	r3, [r7, #0]
    2e70:	8859      	ldrh	r1, [r3, #2]
    2e72:	683b      	ldr	r3, [r7, #0]
    2e74:	889a      	ldrh	r2, [r3, #4]
    2e76:	683b      	ldr	r3, [r7, #0]
    2e78:	891b      	ldrh	r3, [r3, #8]
    2e7a:	6878      	ldr	r0, [r7, #4]
    2e7c:	f001 fa5e 	bl	433c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2e80:	683b      	ldr	r3, [r7, #0]
    2e82:	88db      	ldrh	r3, [r3, #6]
    2e84:	6878      	ldr	r0, [r7, #4]
    2e86:	4619      	mov	r1, r3
    2e88:	f001 f8b8 	bl	3ffc <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    2e8c:	683b      	ldr	r3, [r7, #0]
    2e8e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
    2e92:	89bb      	ldrh	r3, [r7, #12]
    2e94:	89fa      	ldrh	r2, [r7, #14]
    2e96:	6878      	ldr	r0, [r7, #4]
    2e98:	4619      	mov	r1, r3
    2e9a:	4663      	mov	r3, ip
    2e9c:	f001 fa02 	bl	42a4 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    2ea0:	683b      	ldr	r3, [r7, #0]
    2ea2:	88db      	ldrh	r3, [r3, #6]
    2ea4:	6878      	ldr	r0, [r7, #4]
    2ea6:	4619      	mov	r1, r3
    2ea8:	f001 f886 	bl	3fb8 <TIM_SetIC1Prescaler>
  }
}
    2eac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    2eb0:	46bd      	mov	sp, r7
    2eb2:	bd80      	pop	{r7, pc}

00002eb4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *   contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    2eb4:	b480      	push	{r7}
    2eb6:	b083      	sub	sp, #12
    2eb8:	af00      	add	r7, sp, #0
    2eba:	6078      	str	r0, [r7, #4]
    2ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    2ebe:	683b      	ldr	r3, [r7, #0]
    2ec0:	881a      	ldrh	r2, [r3, #0]
    2ec2:	683b      	ldr	r3, [r7, #0]
    2ec4:	885b      	ldrh	r3, [r3, #2]
    2ec6:	ea42 0303 	orr.w	r3, r2, r3
    2eca:	b29a      	uxth	r2, r3
    2ecc:	683b      	ldr	r3, [r7, #0]
    2ece:	889b      	ldrh	r3, [r3, #4]
    2ed0:	ea42 0303 	orr.w	r3, r2, r3
    2ed4:	b29a      	uxth	r2, r3
    2ed6:	683b      	ldr	r3, [r7, #0]
    2ed8:	88db      	ldrh	r3, [r3, #6]
    2eda:	ea42 0303 	orr.w	r3, r2, r3
    2ede:	b29a      	uxth	r2, r3
    2ee0:	683b      	ldr	r3, [r7, #0]
    2ee2:	891b      	ldrh	r3, [r3, #8]
    2ee4:	ea42 0303 	orr.w	r3, r2, r3
    2ee8:	b29a      	uxth	r2, r3
    2eea:	683b      	ldr	r3, [r7, #0]
    2eec:	895b      	ldrh	r3, [r3, #10]
    2eee:	ea42 0303 	orr.w	r3, r2, r3
    2ef2:	b29a      	uxth	r2, r3
    2ef4:	683b      	ldr	r3, [r7, #0]
    2ef6:	899b      	ldrh	r3, [r3, #12]
    2ef8:	ea42 0303 	orr.w	r3, r2, r3
    2efc:	b29b      	uxth	r3, r3
    2efe:	687a      	ldr	r2, [r7, #4]
    2f00:	f8a2 3044 	strh.w	r3, [r2, #68]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    2f04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f08:	46bd      	mov	sp, r7
    2f0a:	bc80      	pop	{r7}
    2f0c:	4770      	bx	lr
    2f0e:	46c0      	nop			(mov r8, r8)

00002f10 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    2f10:	b480      	push	{r7}
    2f12:	b083      	sub	sp, #12
    2f14:	af00      	add	r7, sp, #0
    2f16:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    2f18:	687a      	ldr	r2, [r7, #4]
    2f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f1e:	8093      	strh	r3, [r2, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    2f20:	687a      	ldr	r2, [r7, #4]
    2f22:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f26:	8013      	strh	r3, [r2, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    2f28:	687a      	ldr	r2, [r7, #4]
    2f2a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f2e:	80d3      	strh	r3, [r2, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    2f30:	687a      	ldr	r2, [r7, #4]
    2f32:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f36:	8053      	strh	r3, [r2, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    2f38:	687a      	ldr	r2, [r7, #4]
    2f3a:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f3e:	7213      	strb	r3, [r2, #8]
}
    2f40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f44:	46bd      	mov	sp, r7
    2f46:	bc80      	pop	{r7}
    2f48:	4770      	bx	lr
    2f4a:	46c0      	nop			(mov r8, r8)

00002f4c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    2f4c:	b480      	push	{r7}
    2f4e:	b083      	sub	sp, #12
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f5a:	8013      	strh	r3, [r2, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    2f5c:	687a      	ldr	r2, [r7, #4]
    2f5e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f62:	8053      	strh	r3, [r2, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    2f64:	687a      	ldr	r2, [r7, #4]
    2f66:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f6a:	8093      	strh	r3, [r2, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    2f6c:	687a      	ldr	r2, [r7, #4]
    2f6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f72:	80d3      	strh	r3, [r2, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    2f74:	687a      	ldr	r2, [r7, #4]
    2f76:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f7a:	8113      	strh	r3, [r2, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    2f7c:	687a      	ldr	r2, [r7, #4]
    2f7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f82:	8153      	strh	r3, [r2, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    2f84:	687a      	ldr	r2, [r7, #4]
    2f86:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f8a:	8193      	strh	r3, [r2, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    2f8c:	687a      	ldr	r2, [r7, #4]
    2f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    2f92:	81d3      	strh	r3, [r2, #14]
}
    2f94:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2f98:	46bd      	mov	sp, r7
    2f9a:	bc80      	pop	{r7}
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			(mov r8, r8)

00002fa0 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct : pointer to a TIM_ICInitTypeDef structure which will
  *   be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    2fa0:	b480      	push	{r7}
    2fa2:	b083      	sub	sp, #12
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    2fa8:	687a      	ldr	r2, [r7, #4]
    2faa:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fae:	8013      	strh	r3, [r2, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    2fb0:	687a      	ldr	r2, [r7, #4]
    2fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fb6:	8053      	strh	r3, [r2, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    2fb8:	687a      	ldr	r2, [r7, #4]
    2fba:	f04f 0301 	mov.w	r3, #1	; 0x1
    2fbe:	8093      	strh	r3, [r2, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    2fc0:	687a      	ldr	r2, [r7, #4]
    2fc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fc6:	80d3      	strh	r3, [r2, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    2fc8:	687a      	ldr	r2, [r7, #4]
    2fca:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fce:	8113      	strh	r3, [r2, #8]
}
    2fd0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    2fd4:	46bd      	mov	sp, r7
    2fd6:	bc80      	pop	{r7}
    2fd8:	4770      	bx	lr
    2fda:	46c0      	nop			(mov r8, r8)

00002fdc <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *   will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    2fdc:	b480      	push	{r7}
    2fde:	b083      	sub	sp, #12
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    2fe4:	687a      	ldr	r2, [r7, #4]
    2fe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2fea:	8013      	strh	r3, [r2, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    2fec:	687a      	ldr	r2, [r7, #4]
    2fee:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ff2:	8053      	strh	r3, [r2, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    2ff4:	687a      	ldr	r2, [r7, #4]
    2ff6:	f04f 0300 	mov.w	r3, #0	; 0x0
    2ffa:	8093      	strh	r3, [r2, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    2ffc:	687a      	ldr	r2, [r7, #4]
    2ffe:	f04f 0300 	mov.w	r3, #0	; 0x0
    3002:	80d3      	strh	r3, [r2, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    3004:	687a      	ldr	r2, [r7, #4]
    3006:	f04f 0300 	mov.w	r3, #0	; 0x0
    300a:	8113      	strh	r3, [r2, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    300c:	687a      	ldr	r2, [r7, #4]
    300e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3012:	8153      	strh	r3, [r2, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    3014:	687a      	ldr	r2, [r7, #4]
    3016:	f04f 0300 	mov.w	r3, #0	; 0x0
    301a:	8193      	strh	r3, [r2, #12]
}
    301c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3020:	46bd      	mov	sp, r7
    3022:	bc80      	pop	{r7}
    3024:	4770      	bx	lr
    3026:	46c0      	nop			(mov r8, r8)

00003028 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3028:	b480      	push	{r7}
    302a:	b085      	sub	sp, #20
    302c:	af00      	add	r7, sp, #0
    302e:	60f8      	str	r0, [r7, #12]
    3030:	460b      	mov	r3, r1
    3032:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3034:	7afb      	ldrb	r3, [r7, #11]
    3036:	2b00      	cmp	r3, #0
    3038:	d008      	beq.n	304c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= CR1_CEN_Set;
    303a:	68fb      	ldr	r3, [r7, #12]
    303c:	881b      	ldrh	r3, [r3, #0]
    303e:	b29b      	uxth	r3, r3
    3040:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    3044:	b29b      	uxth	r3, r3
    3046:	68fa      	ldr	r2, [r7, #12]
    3048:	8013      	strh	r3, [r2, #0]
    304a:	e00d      	b.n	3068 <TIM_Cmd+0x40>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= CR1_CEN_Reset;
    304c:	68fb      	ldr	r3, [r7, #12]
    304e:	881b      	ldrh	r3, [r3, #0]
    3050:	b29b      	uxth	r3, r3
    3052:	607b      	str	r3, [r7, #4]
    3054:	f240 33fe 	movw	r3, #1022	; 0x3fe
    3058:	6879      	ldr	r1, [r7, #4]
    305a:	ea01 0303 	and.w	r3, r1, r3
    305e:	607b      	str	r3, [r7, #4]
    3060:	68fa      	ldr	r2, [r7, #12]
    3062:	6879      	ldr	r1, [r7, #4]
    3064:	460b      	mov	r3, r1
    3066:	8013      	strh	r3, [r2, #0]
  }
}
    3068:	f107 0714 	add.w	r7, r7, #20	; 0x14
    306c:	46bd      	mov	sp, r7
    306e:	bc80      	pop	{r7}
    3070:	4770      	bx	lr
    3072:	46c0      	nop			(mov r8, r8)

00003074 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3074:	b480      	push	{r7}
    3076:	b085      	sub	sp, #20
    3078:	af00      	add	r7, sp, #0
    307a:	60f8      	str	r0, [r7, #12]
    307c:	460b      	mov	r3, r1
    307e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3080:	7afb      	ldrb	r3, [r7, #11]
    3082:	2b00      	cmp	r3, #0
    3084:	d00c      	beq.n	30a0 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= BDTR_MOE_Set;
    3086:	68fb      	ldr	r3, [r7, #12]
    3088:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    308c:	b29b      	uxth	r3, r3
    308e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    3092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    3096:	b29b      	uxth	r3, r3
    3098:	68fa      	ldr	r2, [r7, #12]
    309a:	f8a2 3044 	strh.w	r3, [r2, #68]
    309e:	e00f      	b.n	30c0 <TIM_CtrlPWMOutputs+0x4c>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= BDTR_MOE_Reset;
    30a0:	68fb      	ldr	r3, [r7, #12]
    30a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]
    30a6:	b29b      	uxth	r3, r3
    30a8:	607b      	str	r3, [r7, #4]
    30aa:	6879      	ldr	r1, [r7, #4]
    30ac:	ea4f 4341 	mov.w	r3, r1, lsl #17
    30b0:	ea4f 4353 	mov.w	r3, r3, lsr #17
    30b4:	607b      	str	r3, [r7, #4]
    30b6:	68fa      	ldr	r2, [r7, #12]
    30b8:	6879      	ldr	r1, [r7, #4]
    30ba:	460b      	mov	r3, r1
    30bc:	f8a2 3044 	strh.w	r3, [r2, #68]
  }  
}
    30c0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    30c4:	46bd      	mov	sp, r7
    30c6:	bc80      	pop	{r7}
    30c8:	4770      	bx	lr
    30ca:	46c0      	nop			(mov r8, r8)

000030cc <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    30cc:	b480      	push	{r7}
    30ce:	b083      	sub	sp, #12
    30d0:	af00      	add	r7, sp, #0
    30d2:	6078      	str	r0, [r7, #4]
    30d4:	460b      	mov	r3, r1
    30d6:	807b      	strh	r3, [r7, #2]
    30d8:	4613      	mov	r3, r2
    30da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    30dc:	787b      	ldrb	r3, [r7, #1]
    30de:	2b00      	cmp	r3, #0
    30e0:	d009      	beq.n	30f6 <TIM_ITConfig+0x2a>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    30e2:	687b      	ldr	r3, [r7, #4]
    30e4:	899b      	ldrh	r3, [r3, #12]
    30e6:	b29a      	uxth	r2, r3
    30e8:	887b      	ldrh	r3, [r7, #2]
    30ea:	ea42 0303 	orr.w	r3, r2, r3
    30ee:	b29b      	uxth	r3, r3
    30f0:	687a      	ldr	r2, [r7, #4]
    30f2:	8193      	strh	r3, [r2, #12]
    30f4:	e00b      	b.n	310e <TIM_ITConfig+0x42>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	899b      	ldrh	r3, [r3, #12]
    30fa:	b29a      	uxth	r2, r3
    30fc:	887b      	ldrh	r3, [r7, #2]
    30fe:	ea6f 0303 	mvn.w	r3, r3
    3102:	b29b      	uxth	r3, r3
    3104:	ea02 0303 	and.w	r3, r2, r3
    3108:	b29b      	uxth	r3, r3
    310a:	687a      	ldr	r2, [r7, #4]
    310c:	8193      	strh	r3, [r2, #12]
  }
}
    310e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3112:	46bd      	mov	sp, r7
    3114:	bc80      	pop	{r7}
    3116:	4770      	bx	lr

00003118 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    3118:	b480      	push	{r7}
    311a:	b083      	sub	sp, #12
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
    3120:	460b      	mov	r3, r1
    3122:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    3124:	687a      	ldr	r2, [r7, #4]
    3126:	887b      	ldrh	r3, [r7, #2]
    3128:	8293      	strh	r3, [r2, #20]
}
    312a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    312e:	46bd      	mov	sp, r7
    3130:	bc80      	pop	{r7}
    3132:	4770      	bx	lr

00003134 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Byte and TIM_DMABurstLength_18Bytes.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    3134:	b480      	push	{r7}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	460b      	mov	r3, r1
    313e:	807b      	strh	r3, [r7, #2]
    3140:	4613      	mov	r3, r2
    3142:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    3144:	887a      	ldrh	r2, [r7, #2]
    3146:	883b      	ldrh	r3, [r7, #0]
    3148:	ea42 0303 	orr.w	r3, r2, r3
    314c:	b29b      	uxth	r3, r3
    314e:	687a      	ldr	r2, [r7, #4]
    3150:	f8a2 3048 	strh.w	r3, [r2, #72]
}
    3154:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3158:	46bd      	mov	sp, r7
    315a:	bc80      	pop	{r7}
    315c:	4770      	bx	lr
    315e:	46c0      	nop			(mov r8, r8)

00003160 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    3160:	b480      	push	{r7}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	807b      	strh	r3, [r7, #2]
    316c:	4613      	mov	r3, r2
    316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3170:	787b      	ldrb	r3, [r7, #1]
    3172:	2b00      	cmp	r3, #0
    3174:	d009      	beq.n	318a <TIM_DMACmd+0x2a>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    3176:	687b      	ldr	r3, [r7, #4]
    3178:	899b      	ldrh	r3, [r3, #12]
    317a:	b29a      	uxth	r2, r3
    317c:	887b      	ldrh	r3, [r7, #2]
    317e:	ea42 0303 	orr.w	r3, r2, r3
    3182:	b29b      	uxth	r3, r3
    3184:	687a      	ldr	r2, [r7, #4]
    3186:	8193      	strh	r3, [r2, #12]
    3188:	e00b      	b.n	31a2 <TIM_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	899b      	ldrh	r3, [r3, #12]
    318e:	b29a      	uxth	r2, r3
    3190:	887b      	ldrh	r3, [r7, #2]
    3192:	ea6f 0303 	mvn.w	r3, r3
    3196:	b29b      	uxth	r3, r3
    3198:	ea02 0303 	and.w	r3, r2, r3
    319c:	b29b      	uxth	r3, r3
    319e:	687a      	ldr	r2, [r7, #4]
    31a0:	8193      	strh	r3, [r2, #12]
  }
}
    31a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31a6:	46bd      	mov	sp, r7
    31a8:	bc80      	pop	{r7}
    31aa:	4770      	bx	lr

000031ac <TIM_InternalClockConfig>:
  * @brief  Configures the TIMx interrnal Clock
  * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    31ac:	b480      	push	{r7}
    31ae:	b083      	sub	sp, #12
    31b0:	af00      	add	r7, sp, #0
    31b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  SMCR_SMS_Mask;
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	891b      	ldrh	r3, [r3, #8]
    31b8:	b29b      	uxth	r3, r3
    31ba:	603b      	str	r3, [r7, #0]
    31bc:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    31c0:	6839      	ldr	r1, [r7, #0]
    31c2:	ea01 0303 	and.w	r3, r1, r3
    31c6:	603b      	str	r3, [r7, #0]
    31c8:	687a      	ldr	r2, [r7, #4]
    31ca:	6839      	ldr	r1, [r7, #0]
    31cc:	460b      	mov	r3, r1
    31ce:	8113      	strh	r3, [r2, #8]
}
    31d0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    31d4:	46bd      	mov	sp, r7
    31d6:	bc80      	pop	{r7}
    31d8:	4770      	bx	lr
    31da:	46c0      	nop			(mov r8, r8)

000031dc <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    31dc:	b580      	push	{r7, lr}
    31de:	b082      	sub	sp, #8
    31e0:	af00      	add	r7, sp, #0
    31e2:	6078      	str	r0, [r7, #4]
    31e4:	460b      	mov	r3, r1
    31e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    31e8:	887b      	ldrh	r3, [r7, #2]
    31ea:	6878      	ldr	r0, [r7, #4]
    31ec:	4619      	mov	r1, r3
    31ee:	f000 f8f7 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    31f2:	687b      	ldr	r3, [r7, #4]
    31f4:	891b      	ldrh	r3, [r3, #8]
    31f6:	b29b      	uxth	r3, r3
    31f8:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    31fc:	b29b      	uxth	r3, r3
    31fe:	687a      	ldr	r2, [r7, #4]
    3200:	8113      	strh	r3, [r2, #8]
}
    3202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    3206:	46bd      	mov	sp, r7
    3208:	bd80      	pop	{r7, pc}
    320a:	46c0      	nop			(mov r8, r8)

0000320c <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    320c:	b580      	push	{r7, lr}
    320e:	b084      	sub	sp, #16
    3210:	af00      	add	r7, sp, #0
    3212:	60f8      	str	r0, [r7, #12]
    3214:	4618      	mov	r0, r3
    3216:	460b      	mov	r3, r1
    3218:	817b      	strh	r3, [r7, #10]
    321a:	4613      	mov	r3, r2
    321c:	813b      	strh	r3, [r7, #8]
    321e:	4603      	mov	r3, r0
    3220:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    3222:	897b      	ldrh	r3, [r7, #10]
    3224:	2b60      	cmp	r3, #96
    3226:	d10a      	bne.n	323e <TIM_TIxExternalClockConfig+0x32>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    3228:	893b      	ldrh	r3, [r7, #8]
    322a:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    322e:	68f8      	ldr	r0, [r7, #12]
    3230:	4619      	mov	r1, r3
    3232:	f04f 0201 	mov.w	r2, #1	; 0x1
    3236:	4663      	mov	r3, ip
    3238:	f001 f880 	bl	433c <TI2_Config>
    323c:	e009      	b.n	3252 <TIM_TIxExternalClockConfig+0x46>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    323e:	893b      	ldrh	r3, [r7, #8]
    3240:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3244:	68f8      	ldr	r0, [r7, #12]
    3246:	4619      	mov	r1, r3
    3248:	f04f 0201 	mov.w	r2, #1	; 0x1
    324c:	4663      	mov	r3, ip
    324e:	f001 f829 	bl	42a4 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    3252:	897b      	ldrh	r3, [r7, #10]
    3254:	68f8      	ldr	r0, [r7, #12]
    3256:	4619      	mov	r1, r3
    3258:	f000 f8c2 	bl	33e0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    325c:	68fb      	ldr	r3, [r7, #12]
    325e:	891b      	ldrh	r3, [r3, #8]
    3260:	b29b      	uxth	r3, r3
    3262:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    3266:	b29b      	uxth	r3, r3
    3268:	68fa      	ldr	r2, [r7, #12]
    326a:	8113      	strh	r3, [r2, #8]
}
    326c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3270:	46bd      	mov	sp, r7
    3272:	bd80      	pop	{r7, pc}

00003274 <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    3274:	b580      	push	{r7, lr}
    3276:	b086      	sub	sp, #24
    3278:	af00      	add	r7, sp, #0
    327a:	60f8      	str	r0, [r7, #12]
    327c:	4618      	mov	r0, r3
    327e:	460b      	mov	r3, r1
    3280:	817b      	strh	r3, [r7, #10]
    3282:	4613      	mov	r3, r2
    3284:	813b      	strh	r3, [r7, #8]
    3286:	4603      	mov	r3, r0
    3288:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    328a:	f04f 0300 	mov.w	r3, #0	; 0x0
    328e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    3290:	897b      	ldrh	r3, [r7, #10]
    3292:	893a      	ldrh	r2, [r7, #8]
    3294:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    3298:	68f8      	ldr	r0, [r7, #12]
    329a:	4619      	mov	r1, r3
    329c:	4663      	mov	r3, ip
    329e:	f000 f83b 	bl	3318 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    32a2:	68fb      	ldr	r3, [r7, #12]
    32a4:	891b      	ldrh	r3, [r3, #8]
    32a6:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= SMCR_SMS_Mask;
    32a8:	8afb      	ldrh	r3, [r7, #22]
    32aa:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    32ae:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    32b0:	8afb      	ldrh	r3, [r7, #22]
    32b2:	f043 0307 	orr.w	r3, r3, #7	; 0x7
    32b6:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= SMCR_TS_Mask;
    32b8:	8afb      	ldrh	r3, [r7, #22]
    32ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    32be:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    32c0:	8afb      	ldrh	r3, [r7, #22]
    32c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    32c6:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    32c8:	68fa      	ldr	r2, [r7, #12]
    32ca:	8afb      	ldrh	r3, [r7, #22]
    32cc:	8113      	strh	r3, [r2, #8]
}
    32ce:	f107 0718 	add.w	r7, r7, #24	; 0x18
    32d2:	46bd      	mov	sp, r7
    32d4:	bd80      	pop	{r7, pc}
    32d6:	46c0      	nop			(mov r8, r8)

000032d8 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    32d8:	b580      	push	{r7, lr}
    32da:	b084      	sub	sp, #16
    32dc:	af00      	add	r7, sp, #0
    32de:	60f8      	str	r0, [r7, #12]
    32e0:	4618      	mov	r0, r3
    32e2:	460b      	mov	r3, r1
    32e4:	817b      	strh	r3, [r7, #10]
    32e6:	4613      	mov	r3, r2
    32e8:	813b      	strh	r3, [r7, #8]
    32ea:	4603      	mov	r3, r0
    32ec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    32ee:	897b      	ldrh	r3, [r7, #10]
    32f0:	893a      	ldrh	r2, [r7, #8]
    32f2:	f8b7 c006 	ldrh.w	ip, [r7, #6]
    32f6:	68f8      	ldr	r0, [r7, #12]
    32f8:	4619      	mov	r1, r3
    32fa:	4663      	mov	r3, ip
    32fc:	f000 f80c 	bl	3318 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= SMCR_ECE_Set;
    3300:	68fb      	ldr	r3, [r7, #12]
    3302:	891b      	ldrh	r3, [r3, #8]
    3304:	b29b      	uxth	r3, r3
    3306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    330a:	b29b      	uxth	r3, r3
    330c:	68fa      	ldr	r2, [r7, #12]
    330e:	8113      	strh	r3, [r2, #8]
}
    3310:	f107 0710 	add.w	r7, r7, #16	; 0x10
    3314:	46bd      	mov	sp, r7
    3316:	bd80      	pop	{r7, pc}

00003318 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    3318:	b480      	push	{r7}
    331a:	b087      	sub	sp, #28
    331c:	af00      	add	r7, sp, #0
    331e:	60f8      	str	r0, [r7, #12]
    3320:	4618      	mov	r0, r3
    3322:	460b      	mov	r3, r1
    3324:	817b      	strh	r3, [r7, #10]
    3326:	4613      	mov	r3, r2
    3328:	813b      	strh	r3, [r7, #8]
    332a:	4603      	mov	r3, r0
    332c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    332e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3332:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    3334:	68fb      	ldr	r3, [r7, #12]
    3336:	891b      	ldrh	r3, [r3, #8]
    3338:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    333a:	8afb      	ldrh	r3, [r7, #22]
    333c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    3340:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    3342:	88fb      	ldrh	r3, [r7, #6]
    3344:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3348:	b29a      	uxth	r2, r3
    334a:	893b      	ldrh	r3, [r7, #8]
    334c:	ea42 0303 	orr.w	r3, r2, r3
    3350:	b29a      	uxth	r2, r3
    3352:	897b      	ldrh	r3, [r7, #10]
    3354:	ea42 0303 	orr.w	r3, r2, r3
    3358:	b29a      	uxth	r2, r3
    335a:	8afb      	ldrh	r3, [r7, #22]
    335c:	ea42 0303 	orr.w	r3, r2, r3
    3360:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    3362:	68fa      	ldr	r2, [r7, #12]
    3364:	8afb      	ldrh	r3, [r7, #22]
    3366:	8113      	strh	r3, [r2, #8]
}
    3368:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    336c:	46bd      	mov	sp, r7
    336e:	bc80      	pop	{r7}
    3370:	4770      	bx	lr
    3372:	46c0      	nop			(mov r8, r8)

00003374 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    3374:	b480      	push	{r7}
    3376:	b083      	sub	sp, #12
    3378:	af00      	add	r7, sp, #0
    337a:	6078      	str	r0, [r7, #4]
    337c:	460b      	mov	r3, r1
    337e:	807b      	strh	r3, [r7, #2]
    3380:	4613      	mov	r3, r2
    3382:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	887b      	ldrh	r3, [r7, #2]
    3388:	8513      	strh	r3, [r2, #40]
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    338a:	687a      	ldr	r2, [r7, #4]
    338c:	883b      	ldrh	r3, [r7, #0]
    338e:	8293      	strh	r3, [r2, #20]
}
    3390:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3394:	46bd      	mov	sp, r7
    3396:	bc80      	pop	{r7}
    3398:	4770      	bx	lr
    339a:	46c0      	nop			(mov r8, r8)

0000339c <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    339c:	b480      	push	{r7}
    339e:	b085      	sub	sp, #20
    33a0:	af00      	add	r7, sp, #0
    33a2:	6078      	str	r0, [r7, #4]
    33a4:	460b      	mov	r3, r1
    33a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    33a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    33ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	881b      	ldrh	r3, [r3, #0]
    33b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= CR1_CounterMode_Mask;
    33b4:	89fb      	ldrh	r3, [r7, #14]
    33b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33ba:	ea4f 5383 	mov.w	r3, r3, lsl #22
    33be:	ea4f 5393 	mov.w	r3, r3, lsr #22
    33c2:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    33c4:	89fa      	ldrh	r2, [r7, #14]
    33c6:	887b      	ldrh	r3, [r7, #2]
    33c8:	ea42 0303 	orr.w	r3, r2, r3
    33cc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    33ce:	687a      	ldr	r2, [r7, #4]
    33d0:	89fb      	ldrh	r3, [r7, #14]
    33d2:	8013      	strh	r3, [r2, #0]
}
    33d4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    33d8:	46bd      	mov	sp, r7
    33da:	bc80      	pop	{r7}
    33dc:	4770      	bx	lr
    33de:	46c0      	nop			(mov r8, r8)

000033e0 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    33e0:	b480      	push	{r7}
    33e2:	b085      	sub	sp, #20
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
    33e8:	460b      	mov	r3, r1
    33ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    33ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    33f0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    33f2:	687b      	ldr	r3, [r7, #4]
    33f4:	891b      	ldrh	r3, [r3, #8]
    33f6:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= SMCR_TS_Mask;
    33f8:	89fb      	ldrh	r3, [r7, #14]
    33fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    33fe:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    3400:	89fa      	ldrh	r2, [r7, #14]
    3402:	887b      	ldrh	r3, [r7, #2]
    3404:	ea42 0303 	orr.w	r3, r2, r3
    3408:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    340a:	687a      	ldr	r2, [r7, #4]
    340c:	89fb      	ldrh	r3, [r7, #14]
    340e:	8113      	strh	r3, [r2, #8]
}
    3410:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3414:	46bd      	mov	sp, r7
    3416:	bc80      	pop	{r7}
    3418:	4770      	bx	lr
    341a:	46c0      	nop			(mov r8, r8)

0000341c <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    341c:	b480      	push	{r7}
    341e:	b087      	sub	sp, #28
    3420:	af00      	add	r7, sp, #0
    3422:	60f8      	str	r0, [r7, #12]
    3424:	4618      	mov	r0, r3
    3426:	460b      	mov	r3, r1
    3428:	817b      	strh	r3, [r7, #10]
    342a:	4613      	mov	r3, r2
    342c:	813b      	strh	r3, [r7, #8]
    342e:	4603      	mov	r3, r0
    3430:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    3432:	f04f 0300 	mov.w	r3, #0	; 0x0
    3436:	827b      	strh	r3, [r7, #18]
  uint16_t tmpccmr1 = 0;
    3438:	f04f 0300 	mov.w	r3, #0	; 0x0
    343c:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    343e:	f04f 0300 	mov.w	r3, #0	; 0x0
    3442:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    3444:	68fb      	ldr	r3, [r7, #12]
    3446:	891b      	ldrh	r3, [r3, #8]
    3448:	827b      	strh	r3, [r7, #18]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	8b1b      	ldrh	r3, [r3, #24]
    344e:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3450:	68fb      	ldr	r3, [r7, #12]
    3452:	8c1b      	ldrh	r3, [r3, #32]
    3454:	82fb      	strh	r3, [r7, #22]

  /* Set the encoder Mode */
  tmpsmcr &= SMCR_SMS_Mask;
    3456:	8a7b      	ldrh	r3, [r7, #18]
    3458:	f023 0307 	bic.w	r3, r3, #7	; 0x7
    345c:	827b      	strh	r3, [r7, #18]
  tmpsmcr |= TIM_EncoderMode;
    345e:	8a7a      	ldrh	r2, [r7, #18]
    3460:	897b      	ldrh	r3, [r7, #10]
    3462:	ea42 0303 	orr.w	r3, r2, r3
    3466:	827b      	strh	r3, [r7, #18]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_CC24S_Mask;
    3468:	8abb      	ldrh	r3, [r7, #20]
    346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    346e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
    3472:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= CCMR_TI13Direct_Set | CCMR_TI24Direct_Set;
    3474:	8abb      	ldrh	r3, [r7, #20]
    3476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    347a:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    347e:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= CCER_CC1P_Reset & CCER_CC2P_Reset;
    3480:	8afb      	ldrh	r3, [r7, #22]
    3482:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    3486:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    3488:	88fb      	ldrh	r3, [r7, #6]
    348a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    348e:	b29a      	uxth	r2, r3
    3490:	893b      	ldrh	r3, [r7, #8]
    3492:	ea42 0303 	orr.w	r3, r2, r3
    3496:	b29a      	uxth	r2, r3
    3498:	8afb      	ldrh	r3, [r7, #22]
    349a:	ea42 0303 	orr.w	r3, r2, r3
    349e:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	8a7b      	ldrh	r3, [r7, #18]
    34a4:	8113      	strh	r3, [r2, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    34a6:	68fa      	ldr	r2, [r7, #12]
    34a8:	8abb      	ldrh	r3, [r7, #20]
    34aa:	8313      	strh	r3, [r2, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    34ac:	68fa      	ldr	r2, [r7, #12]
    34ae:	8afb      	ldrh	r3, [r7, #22]
    34b0:	8413      	strh	r3, [r2, #32]
}
    34b2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    34b6:	46bd      	mov	sp, r7
    34b8:	bc80      	pop	{r7}
    34ba:	4770      	bx	lr

000034bc <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34bc:	b480      	push	{r7}
    34be:	b085      	sub	sp, #20
    34c0:	af00      	add	r7, sp, #0
    34c2:	6078      	str	r0, [r7, #4]
    34c4:	460b      	mov	r3, r1
    34c6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    34c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    34cc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    34ce:	687b      	ldr	r3, [r7, #4]
    34d0:	8b1b      	ldrh	r3, [r3, #24]
    34d2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= CCMR_OC13M_Mask;
    34d4:	89fb      	ldrh	r3, [r7, #14]
    34d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    34da:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    34dc:	89fa      	ldrh	r2, [r7, #14]
    34de:	887b      	ldrh	r3, [r7, #2]
    34e0:	ea42 0303 	orr.w	r3, r2, r3
    34e4:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	89fb      	ldrh	r3, [r7, #14]
    34ea:	8313      	strh	r3, [r2, #24]
}
    34ec:	f107 0714 	add.w	r7, r7, #20	; 0x14
    34f0:	46bd      	mov	sp, r7
    34f2:	bc80      	pop	{r7}
    34f4:	4770      	bx	lr
    34f6:	46c0      	nop			(mov r8, r8)

000034f8 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    34f8:	b480      	push	{r7}
    34fa:	b085      	sub	sp, #20
    34fc:	af00      	add	r7, sp, #0
    34fe:	6078      	str	r0, [r7, #4]
    3500:	460b      	mov	r3, r1
    3502:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3504:	f04f 0300 	mov.w	r3, #0	; 0x0
    3508:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    350a:	687b      	ldr	r3, [r7, #4]
    350c:	8b1b      	ldrh	r3, [r3, #24]
    350e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= CCMR_OC24M_Mask;
    3510:	89fb      	ldrh	r3, [r7, #14]
    3512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3516:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    3518:	887b      	ldrh	r3, [r7, #2]
    351a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    351e:	b29a      	uxth	r2, r3
    3520:	89fb      	ldrh	r3, [r7, #14]
    3522:	ea42 0303 	orr.w	r3, r2, r3
    3526:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3528:	687a      	ldr	r2, [r7, #4]
    352a:	89fb      	ldrh	r3, [r7, #14]
    352c:	8313      	strh	r3, [r2, #24]
}
    352e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3532:	46bd      	mov	sp, r7
    3534:	bc80      	pop	{r7}
    3536:	4770      	bx	lr

00003538 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3538:	b480      	push	{r7}
    353a:	b085      	sub	sp, #20
    353c:	af00      	add	r7, sp, #0
    353e:	6078      	str	r0, [r7, #4]
    3540:	460b      	mov	r3, r1
    3542:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3544:	f04f 0300 	mov.w	r3, #0	; 0x0
    3548:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    354a:	687b      	ldr	r3, [r7, #4]
    354c:	8b9b      	ldrh	r3, [r3, #28]
    354e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= CCMR_OC13M_Mask;
    3550:	89fb      	ldrh	r3, [r7, #14]
    3552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3556:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    3558:	89fa      	ldrh	r2, [r7, #14]
    355a:	887b      	ldrh	r3, [r7, #2]
    355c:	ea42 0303 	orr.w	r3, r2, r3
    3560:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    3562:	687a      	ldr	r2, [r7, #4]
    3564:	89fb      	ldrh	r3, [r7, #14]
    3566:	8393      	strh	r3, [r2, #28]
}
    3568:	f107 0714 	add.w	r7, r7, #20	; 0x14
    356c:	46bd      	mov	sp, r7
    356e:	bc80      	pop	{r7}
    3570:	4770      	bx	lr
    3572:	46c0      	nop			(mov r8, r8)

00003574 <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    3574:	b480      	push	{r7}
    3576:	b085      	sub	sp, #20
    3578:	af00      	add	r7, sp, #0
    357a:	6078      	str	r0, [r7, #4]
    357c:	460b      	mov	r3, r1
    357e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3580:	f04f 0300 	mov.w	r3, #0	; 0x0
    3584:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    3586:	687b      	ldr	r3, [r7, #4]
    3588:	8b9b      	ldrh	r3, [r3, #28]
    358a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= CCMR_OC24M_Mask;
    358c:	89fb      	ldrh	r3, [r7, #14]
    358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3592:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    3594:	887b      	ldrh	r3, [r7, #2]
    3596:	ea4f 2303 	mov.w	r3, r3, lsl #8
    359a:	b29a      	uxth	r2, r3
    359c:	89fb      	ldrh	r3, [r7, #14]
    359e:	ea42 0303 	orr.w	r3, r2, r3
    35a2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    35a4:	687a      	ldr	r2, [r7, #4]
    35a6:	89fb      	ldrh	r3, [r7, #14]
    35a8:	8393      	strh	r3, [r2, #28]
}
    35aa:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35ae:	46bd      	mov	sp, r7
    35b0:	bc80      	pop	{r7}
    35b2:	4770      	bx	lr

000035b4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    35b4:	b480      	push	{r7}
    35b6:	b085      	sub	sp, #20
    35b8:	af00      	add	r7, sp, #0
    35ba:	60f8      	str	r0, [r7, #12]
    35bc:	460b      	mov	r3, r1
    35be:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    35c0:	7afb      	ldrb	r3, [r7, #11]
    35c2:	2b00      	cmp	r3, #0
    35c4:	d008      	beq.n	35d8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= CR1_ARPE_Set;
    35c6:	68fb      	ldr	r3, [r7, #12]
    35c8:	881b      	ldrh	r3, [r3, #0]
    35ca:	b29b      	uxth	r3, r3
    35cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    35d0:	b29b      	uxth	r3, r3
    35d2:	68fa      	ldr	r2, [r7, #12]
    35d4:	8013      	strh	r3, [r2, #0]
    35d6:	e00d      	b.n	35f4 <TIM_ARRPreloadConfig+0x40>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= CR1_ARPE_Reset;
    35d8:	68fb      	ldr	r3, [r7, #12]
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b29b      	uxth	r3, r3
    35de:	607b      	str	r3, [r7, #4]
    35e0:	f240 337f 	movw	r3, #895	; 0x37f
    35e4:	6879      	ldr	r1, [r7, #4]
    35e6:	ea01 0303 	and.w	r3, r1, r3
    35ea:	607b      	str	r3, [r7, #4]
    35ec:	68fa      	ldr	r2, [r7, #12]
    35ee:	6879      	ldr	r1, [r7, #4]
    35f0:	460b      	mov	r3, r1
    35f2:	8013      	strh	r3, [r2, #0]
  }
}
    35f4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    35f8:	46bd      	mov	sp, r7
    35fa:	bc80      	pop	{r7}
    35fc:	4770      	bx	lr
    35fe:	46c0      	nop			(mov r8, r8)

00003600 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3600:	b480      	push	{r7}
    3602:	b085      	sub	sp, #20
    3604:	af00      	add	r7, sp, #0
    3606:	60f8      	str	r0, [r7, #12]
    3608:	460b      	mov	r3, r1
    360a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    360c:	7afb      	ldrb	r3, [r7, #11]
    360e:	2b00      	cmp	r3, #0
    3610:	d008      	beq.n	3624 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= CR2_CCUS_Set;
    3612:	68fb      	ldr	r3, [r7, #12]
    3614:	889b      	ldrh	r3, [r3, #4]
    3616:	b29b      	uxth	r3, r3
    3618:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    361c:	b29b      	uxth	r3, r3
    361e:	68fa      	ldr	r2, [r7, #12]
    3620:	8093      	strh	r3, [r2, #4]
    3622:	e00d      	b.n	3640 <TIM_SelectCOM+0x40>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= CR2_CCUS_Reset;
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	889b      	ldrh	r3, [r3, #4]
    3628:	b29b      	uxth	r3, r3
    362a:	607b      	str	r3, [r7, #4]
    362c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    3630:	6879      	ldr	r1, [r7, #4]
    3632:	ea01 0303 	and.w	r3, r1, r3
    3636:	607b      	str	r3, [r7, #4]
    3638:	68fa      	ldr	r2, [r7, #12]
    363a:	6879      	ldr	r1, [r7, #4]
    363c:	460b      	mov	r3, r1
    363e:	8093      	strh	r3, [r2, #4]
  }
}
    3640:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3644:	46bd      	mov	sp, r7
    3646:	bc80      	pop	{r7}
    3648:	4770      	bx	lr
    364a:	46c0      	nop			(mov r8, r8)

0000364c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    364c:	b480      	push	{r7}
    364e:	b085      	sub	sp, #20
    3650:	af00      	add	r7, sp, #0
    3652:	60f8      	str	r0, [r7, #12]
    3654:	460b      	mov	r3, r1
    3656:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3658:	7afb      	ldrb	r3, [r7, #11]
    365a:	2b00      	cmp	r3, #0
    365c:	d008      	beq.n	3670 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= CR2_CCDS_Set;
    365e:	68fb      	ldr	r3, [r7, #12]
    3660:	889b      	ldrh	r3, [r3, #4]
    3662:	b29b      	uxth	r3, r3
    3664:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    3668:	b29b      	uxth	r3, r3
    366a:	68fa      	ldr	r2, [r7, #12]
    366c:	8093      	strh	r3, [r2, #4]
    366e:	e00d      	b.n	368c <TIM_SelectCCDMA+0x40>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= CR2_CCDS_Reset;
    3670:	68fb      	ldr	r3, [r7, #12]
    3672:	889b      	ldrh	r3, [r3, #4]
    3674:	b29b      	uxth	r3, r3
    3676:	607b      	str	r3, [r7, #4]
    3678:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    367c:	6879      	ldr	r1, [r7, #4]
    367e:	ea01 0303 	and.w	r3, r1, r3
    3682:	607b      	str	r3, [r7, #4]
    3684:	68fa      	ldr	r2, [r7, #12]
    3686:	6879      	ldr	r1, [r7, #4]
    3688:	460b      	mov	r3, r1
    368a:	8093      	strh	r3, [r2, #4]
  }
}
    368c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3690:	46bd      	mov	sp, r7
    3692:	bc80      	pop	{r7}
    3694:	4770      	bx	lr
    3696:	46c0      	nop			(mov r8, r8)

00003698 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    3698:	b480      	push	{r7}
    369a:	b085      	sub	sp, #20
    369c:	af00      	add	r7, sp, #0
    369e:	60f8      	str	r0, [r7, #12]
    36a0:	460b      	mov	r3, r1
    36a2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    36a4:	7afb      	ldrb	r3, [r7, #11]
    36a6:	2b00      	cmp	r3, #0
    36a8:	d008      	beq.n	36bc <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= CR2_CCPC_Set;
    36aa:	68fb      	ldr	r3, [r7, #12]
    36ac:	889b      	ldrh	r3, [r3, #4]
    36ae:	b29b      	uxth	r3, r3
    36b0:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    36b4:	b29b      	uxth	r3, r3
    36b6:	68fa      	ldr	r2, [r7, #12]
    36b8:	8093      	strh	r3, [r2, #4]
    36ba:	e00d      	b.n	36d8 <TIM_CCPreloadControl+0x40>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= CR2_CCPC_Reset;
    36bc:	68fb      	ldr	r3, [r7, #12]
    36be:	889b      	ldrh	r3, [r3, #4]
    36c0:	b29b      	uxth	r3, r3
    36c2:	607b      	str	r3, [r7, #4]
    36c4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    36c8:	6879      	ldr	r1, [r7, #4]
    36ca:	ea01 0303 	and.w	r3, r1, r3
    36ce:	607b      	str	r3, [r7, #4]
    36d0:	68fa      	ldr	r2, [r7, #12]
    36d2:	6879      	ldr	r1, [r7, #4]
    36d4:	460b      	mov	r3, r1
    36d6:	8093      	strh	r3, [r2, #4]
  }
}
    36d8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    36dc:	46bd      	mov	sp, r7
    36de:	bc80      	pop	{r7}
    36e0:	4770      	bx	lr
    36e2:	46c0      	nop			(mov r8, r8)

000036e4 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    36e4:	b480      	push	{r7}
    36e6:	b085      	sub	sp, #20
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
    36ec:	460b      	mov	r3, r1
    36ee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    36f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    36f4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	8b1b      	ldrh	r3, [r3, #24]
    36fa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= CCMR_OC13PE_Reset;
    36fc:	89fb      	ldrh	r3, [r7, #14]
    36fe:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3702:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    3704:	89fa      	ldrh	r2, [r7, #14]
    3706:	887b      	ldrh	r3, [r7, #2]
    3708:	ea42 0303 	orr.w	r3, r2, r3
    370c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    370e:	687a      	ldr	r2, [r7, #4]
    3710:	89fb      	ldrh	r3, [r7, #14]
    3712:	8313      	strh	r3, [r2, #24]
}
    3714:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3718:	46bd      	mov	sp, r7
    371a:	bc80      	pop	{r7}
    371c:	4770      	bx	lr
    371e:	46c0      	nop			(mov r8, r8)

00003720 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3720:	b480      	push	{r7}
    3722:	b085      	sub	sp, #20
    3724:	af00      	add	r7, sp, #0
    3726:	6078      	str	r0, [r7, #4]
    3728:	460b      	mov	r3, r1
    372a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    372c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3730:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    3732:	687b      	ldr	r3, [r7, #4]
    3734:	8b1b      	ldrh	r3, [r3, #24]
    3736:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= CCMR_OC24PE_Reset;
    3738:	89fb      	ldrh	r3, [r7, #14]
    373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    373e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    3740:	887b      	ldrh	r3, [r7, #2]
    3742:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3746:	b29a      	uxth	r2, r3
    3748:	89fb      	ldrh	r3, [r7, #14]
    374a:	ea42 0303 	orr.w	r3, r2, r3
    374e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3750:	687a      	ldr	r2, [r7, #4]
    3752:	89fb      	ldrh	r3, [r7, #14]
    3754:	8313      	strh	r3, [r2, #24]
}
    3756:	f107 0714 	add.w	r7, r7, #20	; 0x14
    375a:	46bd      	mov	sp, r7
    375c:	bc80      	pop	{r7}
    375e:	4770      	bx	lr

00003760 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    3760:	b480      	push	{r7}
    3762:	b085      	sub	sp, #20
    3764:	af00      	add	r7, sp, #0
    3766:	6078      	str	r0, [r7, #4]
    3768:	460b      	mov	r3, r1
    376a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    376c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3770:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    3772:	687b      	ldr	r3, [r7, #4]
    3774:	8b9b      	ldrh	r3, [r3, #28]
    3776:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= CCMR_OC13PE_Reset;
    3778:	89fb      	ldrh	r3, [r7, #14]
    377a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    377e:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    3780:	89fa      	ldrh	r2, [r7, #14]
    3782:	887b      	ldrh	r3, [r7, #2]
    3784:	ea42 0303 	orr.w	r3, r2, r3
    3788:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    378a:	687a      	ldr	r2, [r7, #4]
    378c:	89fb      	ldrh	r3, [r7, #14]
    378e:	8393      	strh	r3, [r2, #28]
}
    3790:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3794:	46bd      	mov	sp, r7
    3796:	bc80      	pop	{r7}
    3798:	4770      	bx	lr
    379a:	46c0      	nop			(mov r8, r8)

0000379c <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    379c:	b480      	push	{r7}
    379e:	b085      	sub	sp, #20
    37a0:	af00      	add	r7, sp, #0
    37a2:	6078      	str	r0, [r7, #4]
    37a4:	460b      	mov	r3, r1
    37a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    37a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ac:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    37ae:	687b      	ldr	r3, [r7, #4]
    37b0:	8b9b      	ldrh	r3, [r3, #28]
    37b2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= CCMR_OC24PE_Reset;
    37b4:	89fb      	ldrh	r3, [r7, #14]
    37b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    37ba:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    37bc:	887b      	ldrh	r3, [r7, #2]
    37be:	ea4f 2303 	mov.w	r3, r3, lsl #8
    37c2:	b29a      	uxth	r2, r3
    37c4:	89fb      	ldrh	r3, [r7, #14]
    37c6:	ea42 0303 	orr.w	r3, r2, r3
    37ca:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    37cc:	687a      	ldr	r2, [r7, #4]
    37ce:	89fb      	ldrh	r3, [r7, #14]
    37d0:	8393      	strh	r3, [r2, #28]
}
    37d2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    37d6:	46bd      	mov	sp, r7
    37d8:	bc80      	pop	{r7}
    37da:	4770      	bx	lr

000037dc <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    37dc:	b480      	push	{r7}
    37de:	b085      	sub	sp, #20
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
    37e4:	460b      	mov	r3, r1
    37e6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    37e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    37ec:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	8b1b      	ldrh	r3, [r3, #24]
    37f2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= CCMR_OC13FE_Reset;
    37f4:	89fb      	ldrh	r3, [r7, #14]
    37f6:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    37fa:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    37fc:	89fa      	ldrh	r2, [r7, #14]
    37fe:	887b      	ldrh	r3, [r7, #2]
    3800:	ea42 0303 	orr.w	r3, r2, r3
    3804:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3806:	687a      	ldr	r2, [r7, #4]
    3808:	89fb      	ldrh	r3, [r7, #14]
    380a:	8313      	strh	r3, [r2, #24]
}
    380c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3810:	46bd      	mov	sp, r7
    3812:	bc80      	pop	{r7}
    3814:	4770      	bx	lr
    3816:	46c0      	nop			(mov r8, r8)

00003818 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3818:	b480      	push	{r7}
    381a:	b085      	sub	sp, #20
    381c:	af00      	add	r7, sp, #0
    381e:	6078      	str	r0, [r7, #4]
    3820:	460b      	mov	r3, r1
    3822:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    3824:	f04f 0300 	mov.w	r3, #0	; 0x0
    3828:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	8b1b      	ldrh	r3, [r3, #24]
    382e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= CCMR_OC24FE_Reset;
    3830:	89fb      	ldrh	r3, [r7, #14]
    3832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3836:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    3838:	887b      	ldrh	r3, [r7, #2]
    383a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    383e:	b29a      	uxth	r2, r3
    3840:	89fb      	ldrh	r3, [r7, #14]
    3842:	ea42 0303 	orr.w	r3, r2, r3
    3846:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    3848:	687a      	ldr	r2, [r7, #4]
    384a:	89fb      	ldrh	r3, [r7, #14]
    384c:	8313      	strh	r3, [r2, #24]
}
    384e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3852:	46bd      	mov	sp, r7
    3854:	bc80      	pop	{r7}
    3856:	4770      	bx	lr

00003858 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3858:	b480      	push	{r7}
    385a:	b085      	sub	sp, #20
    385c:	af00      	add	r7, sp, #0
    385e:	6078      	str	r0, [r7, #4]
    3860:	460b      	mov	r3, r1
    3862:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3864:	f04f 0300 	mov.w	r3, #0	; 0x0
    3868:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	8b9b      	ldrh	r3, [r3, #28]
    386e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= CCMR_OC13FE_Reset;
    3870:	89fb      	ldrh	r3, [r7, #14]
    3872:	f023 0304 	bic.w	r3, r3, #4	; 0x4
    3876:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    3878:	89fa      	ldrh	r2, [r7, #14]
    387a:	887b      	ldrh	r3, [r7, #2]
    387c:	ea42 0303 	orr.w	r3, r2, r3
    3880:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    3882:	687a      	ldr	r2, [r7, #4]
    3884:	89fb      	ldrh	r3, [r7, #14]
    3886:	8393      	strh	r3, [r2, #28]
}
    3888:	f107 0714 	add.w	r7, r7, #20	; 0x14
    388c:	46bd      	mov	sp, r7
    388e:	bc80      	pop	{r7}
    3890:	4770      	bx	lr
    3892:	46c0      	nop			(mov r8, r8)

00003894 <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    3894:	b480      	push	{r7}
    3896:	b085      	sub	sp, #20
    3898:	af00      	add	r7, sp, #0
    389a:	6078      	str	r0, [r7, #4]
    389c:	460b      	mov	r3, r1
    389e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    38a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    38a6:	687b      	ldr	r3, [r7, #4]
    38a8:	8b9b      	ldrh	r3, [r3, #28]
    38aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= CCMR_OC24FE_Reset;
    38ac:	89fb      	ldrh	r3, [r7, #14]
    38ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    38b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    38b4:	887b      	ldrh	r3, [r7, #2]
    38b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    38ba:	b29a      	uxth	r2, r3
    38bc:	89fb      	ldrh	r3, [r7, #14]
    38be:	ea42 0303 	orr.w	r3, r2, r3
    38c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    38c4:	687a      	ldr	r2, [r7, #4]
    38c6:	89fb      	ldrh	r3, [r7, #14]
    38c8:	8393      	strh	r3, [r2, #28]
}
    38ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    38ce:	46bd      	mov	sp, r7
    38d0:	bc80      	pop	{r7}
    38d2:	4770      	bx	lr

000038d4 <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    38d4:	b480      	push	{r7}
    38d6:	b085      	sub	sp, #20
    38d8:	af00      	add	r7, sp, #0
    38da:	6078      	str	r0, [r7, #4]
    38dc:	460b      	mov	r3, r1
    38de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    38e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    38e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    38e6:	687b      	ldr	r3, [r7, #4]
    38e8:	8b1b      	ldrh	r3, [r3, #24]
    38ea:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= CCMR_OC13CE_Reset;
    38ec:	89fb      	ldrh	r3, [r7, #14]
    38ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    38f2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    38f4:	89fa      	ldrh	r2, [r7, #14]
    38f6:	887b      	ldrh	r3, [r7, #2]
    38f8:	ea42 0303 	orr.w	r3, r2, r3
    38fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    38fe:	687a      	ldr	r2, [r7, #4]
    3900:	89fb      	ldrh	r3, [r7, #14]
    3902:	8313      	strh	r3, [r2, #24]
}
    3904:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3908:	46bd      	mov	sp, r7
    390a:	bc80      	pop	{r7}
    390c:	4770      	bx	lr
    390e:	46c0      	nop			(mov r8, r8)

00003910 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3910:	b480      	push	{r7}
    3912:	b085      	sub	sp, #20
    3914:	af00      	add	r7, sp, #0
    3916:	6078      	str	r0, [r7, #4]
    3918:	460b      	mov	r3, r1
    391a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    391c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3920:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	8b1b      	ldrh	r3, [r3, #24]
    3926:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= CCMR_OC24CE_Reset;
    3928:	89fb      	ldrh	r3, [r7, #14]
    392a:	ea4f 4343 	mov.w	r3, r3, lsl #17
    392e:	ea4f 4353 	mov.w	r3, r3, lsr #17
    3932:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    3934:	887b      	ldrh	r3, [r7, #2]
    3936:	ea4f 2303 	mov.w	r3, r3, lsl #8
    393a:	b29a      	uxth	r2, r3
    393c:	89fb      	ldrh	r3, [r7, #14]
    393e:	ea42 0303 	orr.w	r3, r2, r3
    3942:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    3944:	687a      	ldr	r2, [r7, #4]
    3946:	89fb      	ldrh	r3, [r7, #14]
    3948:	8313      	strh	r3, [r2, #24]
}
    394a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    394e:	46bd      	mov	sp, r7
    3950:	bc80      	pop	{r7}
    3952:	4770      	bx	lr

00003954 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3954:	b480      	push	{r7}
    3956:	b085      	sub	sp, #20
    3958:	af00      	add	r7, sp, #0
    395a:	6078      	str	r0, [r7, #4]
    395c:	460b      	mov	r3, r1
    395e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    3960:	f04f 0300 	mov.w	r3, #0	; 0x0
    3964:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	8b9b      	ldrh	r3, [r3, #28]
    396a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= CCMR_OC13CE_Reset;
    396c:	89fb      	ldrh	r3, [r7, #14]
    396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3972:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    3974:	89fa      	ldrh	r2, [r7, #14]
    3976:	887b      	ldrh	r3, [r7, #2]
    3978:	ea42 0303 	orr.w	r3, r2, r3
    397c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    397e:	687a      	ldr	r2, [r7, #4]
    3980:	89fb      	ldrh	r3, [r7, #14]
    3982:	8393      	strh	r3, [r2, #28]
}
    3984:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3988:	46bd      	mov	sp, r7
    398a:	bc80      	pop	{r7}
    398c:	4770      	bx	lr
    398e:	46c0      	nop			(mov r8, r8)

00003990 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    3990:	b480      	push	{r7}
    3992:	b085      	sub	sp, #20
    3994:	af00      	add	r7, sp, #0
    3996:	6078      	str	r0, [r7, #4]
    3998:	460b      	mov	r3, r1
    399a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    399c:	f04f 0300 	mov.w	r3, #0	; 0x0
    39a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    39a2:	687b      	ldr	r3, [r7, #4]
    39a4:	8b9b      	ldrh	r3, [r3, #28]
    39a6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= CCMR_OC24CE_Reset;
    39a8:	89fb      	ldrh	r3, [r7, #14]
    39aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
    39ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
    39b2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    39b4:	887b      	ldrh	r3, [r7, #2]
    39b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    39ba:	b29a      	uxth	r2, r3
    39bc:	89fb      	ldrh	r3, [r7, #14]
    39be:	ea42 0303 	orr.w	r3, r2, r3
    39c2:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    39c4:	687a      	ldr	r2, [r7, #4]
    39c6:	89fb      	ldrh	r3, [r7, #14]
    39c8:	8393      	strh	r3, [r2, #28]
}
    39ca:	f107 0714 	add.w	r7, r7, #20	; 0x14
    39ce:	46bd      	mov	sp, r7
    39d0:	bc80      	pop	{r7}
    39d2:	4770      	bx	lr

000039d4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    39d4:	b480      	push	{r7}
    39d6:	b085      	sub	sp, #20
    39d8:	af00      	add	r7, sp, #0
    39da:	6078      	str	r0, [r7, #4]
    39dc:	460b      	mov	r3, r1
    39de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    39e0:	f04f 0300 	mov.w	r3, #0	; 0x0
    39e4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    39e6:	687b      	ldr	r3, [r7, #4]
    39e8:	8c1b      	ldrh	r3, [r3, #32]
    39ea:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= CCER_CC1P_Reset;
    39ec:	89fb      	ldrh	r3, [r7, #14]
    39ee:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    39f2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    39f4:	89fa      	ldrh	r2, [r7, #14]
    39f6:	887b      	ldrh	r3, [r7, #2]
    39f8:	ea42 0303 	orr.w	r3, r2, r3
    39fc:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    39fe:	687a      	ldr	r2, [r7, #4]
    3a00:	89fb      	ldrh	r3, [r7, #14]
    3a02:	8413      	strh	r3, [r2, #32]
}
    3a04:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a08:	46bd      	mov	sp, r7
    3a0a:	bc80      	pop	{r7}
    3a0c:	4770      	bx	lr
    3a0e:	46c0      	nop			(mov r8, r8)

00003a10 <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a10:	b480      	push	{r7}
    3a12:	b085      	sub	sp, #20
    3a14:	af00      	add	r7, sp, #0
    3a16:	6078      	str	r0, [r7, #4]
    3a18:	460b      	mov	r3, r1
    3a1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    3a22:	687b      	ldr	r3, [r7, #4]
    3a24:	8c1b      	ldrh	r3, [r3, #32]
    3a26:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= CCER_CC1NP_Reset;
    3a28:	89fb      	ldrh	r3, [r7, #14]
    3a2a:	f023 0308 	bic.w	r3, r3, #8	; 0x8
    3a2e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    3a30:	89fa      	ldrh	r2, [r7, #14]
    3a32:	887b      	ldrh	r3, [r7, #2]
    3a34:	ea42 0303 	orr.w	r3, r2, r3
    3a38:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a3a:	687a      	ldr	r2, [r7, #4]
    3a3c:	89fb      	ldrh	r3, [r7, #14]
    3a3e:	8413      	strh	r3, [r2, #32]
}
    3a40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a44:	46bd      	mov	sp, r7
    3a46:	bc80      	pop	{r7}
    3a48:	4770      	bx	lr
    3a4a:	46c0      	nop			(mov r8, r8)

00003a4c <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3a4c:	b480      	push	{r7}
    3a4e:	b085      	sub	sp, #20
    3a50:	af00      	add	r7, sp, #0
    3a52:	6078      	str	r0, [r7, #4]
    3a54:	460b      	mov	r3, r1
    3a56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	8c1b      	ldrh	r3, [r3, #32]
    3a62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= CCER_CC2P_Reset;
    3a64:	89fb      	ldrh	r3, [r7, #14]
    3a66:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    3a6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    3a6c:	887b      	ldrh	r3, [r7, #2]
    3a6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3a72:	b29a      	uxth	r2, r3
    3a74:	89fb      	ldrh	r3, [r7, #14]
    3a76:	ea42 0303 	orr.w	r3, r2, r3
    3a7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3a7c:	687a      	ldr	r2, [r7, #4]
    3a7e:	89fb      	ldrh	r3, [r7, #14]
    3a80:	8413      	strh	r3, [r2, #32]
}
    3a82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3a86:	46bd      	mov	sp, r7
    3a88:	bc80      	pop	{r7}
    3a8a:	4770      	bx	lr

00003a8c <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3a8c:	b480      	push	{r7}
    3a8e:	b085      	sub	sp, #20
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	460b      	mov	r3, r1
    3a96:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3a98:	f04f 0300 	mov.w	r3, #0	; 0x0
    3a9c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    3a9e:	687b      	ldr	r3, [r7, #4]
    3aa0:	8c1b      	ldrh	r3, [r3, #32]
    3aa2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= CCER_CC2NP_Reset;
    3aa4:	89fb      	ldrh	r3, [r7, #14]
    3aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3aaa:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    3aac:	887b      	ldrh	r3, [r7, #2]
    3aae:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3ab2:	b29a      	uxth	r2, r3
    3ab4:	89fb      	ldrh	r3, [r7, #14]
    3ab6:	ea42 0303 	orr.w	r3, r2, r3
    3aba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3abc:	687a      	ldr	r2, [r7, #4]
    3abe:	89fb      	ldrh	r3, [r7, #14]
    3ac0:	8413      	strh	r3, [r2, #32]
}
    3ac2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ac6:	46bd      	mov	sp, r7
    3ac8:	bc80      	pop	{r7}
    3aca:	4770      	bx	lr

00003acc <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3acc:	b480      	push	{r7}
    3ace:	b085      	sub	sp, #20
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	460b      	mov	r3, r1
    3ad6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3ad8:	f04f 0300 	mov.w	r3, #0	; 0x0
    3adc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	8c1b      	ldrh	r3, [r3, #32]
    3ae2:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= CCER_CC3P_Reset;
    3ae4:	89fb      	ldrh	r3, [r7, #14]
    3ae6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3aea:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    3aec:	887b      	ldrh	r3, [r7, #2]
    3aee:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3af2:	b29a      	uxth	r2, r3
    3af4:	89fb      	ldrh	r3, [r7, #14]
    3af6:	ea42 0303 	orr.w	r3, r2, r3
    3afa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3afc:	687a      	ldr	r2, [r7, #4]
    3afe:	89fb      	ldrh	r3, [r7, #14]
    3b00:	8413      	strh	r3, [r2, #32]
}
    3b02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b06:	46bd      	mov	sp, r7
    3b08:	bc80      	pop	{r7}
    3b0a:	4770      	bx	lr

00003b0c <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    3b0c:	b480      	push	{r7}
    3b0e:	b085      	sub	sp, #20
    3b10:	af00      	add	r7, sp, #0
    3b12:	6078      	str	r0, [r7, #4]
    3b14:	460b      	mov	r3, r1
    3b16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b18:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b1c:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	8c1b      	ldrh	r3, [r3, #32]
    3b22:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= CCER_CC3NP_Reset;
    3b24:	89fb      	ldrh	r3, [r7, #14]
    3b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3b2a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    3b2c:	887b      	ldrh	r3, [r7, #2]
    3b2e:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3b32:	b29a      	uxth	r2, r3
    3b34:	89fb      	ldrh	r3, [r7, #14]
    3b36:	ea42 0303 	orr.w	r3, r2, r3
    3b3a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b3c:	687a      	ldr	r2, [r7, #4]
    3b3e:	89fb      	ldrh	r3, [r7, #14]
    3b40:	8413      	strh	r3, [r2, #32]
}
    3b42:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b46:	46bd      	mov	sp, r7
    3b48:	bc80      	pop	{r7}
    3b4a:	4770      	bx	lr

00003b4c <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    3b4c:	b480      	push	{r7}
    3b4e:	b085      	sub	sp, #20
    3b50:	af00      	add	r7, sp, #0
    3b52:	6078      	str	r0, [r7, #4]
    3b54:	460b      	mov	r3, r1
    3b56:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    3b58:	f04f 0300 	mov.w	r3, #0	; 0x0
    3b5c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    3b5e:	687b      	ldr	r3, [r7, #4]
    3b60:	8c1b      	ldrh	r3, [r3, #32]
    3b62:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= CCER_CC4P_Reset;
    3b64:	89fb      	ldrh	r3, [r7, #14]
    3b66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3b6a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    3b6c:	887b      	ldrh	r3, [r7, #2]
    3b6e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3b72:	b29a      	uxth	r2, r3
    3b74:	89fb      	ldrh	r3, [r7, #14]
    3b76:	ea42 0303 	orr.w	r3, r2, r3
    3b7a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    3b7c:	687a      	ldr	r2, [r7, #4]
    3b7e:	89fb      	ldrh	r3, [r7, #14]
    3b80:	8413      	strh	r3, [r2, #32]
}
    3b82:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3b86:	46bd      	mov	sp, r7
    3b88:	bc80      	pop	{r7}
    3b8a:	4770      	bx	lr

00003b8c <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    3b8c:	b480      	push	{r7}
    3b8e:	b085      	sub	sp, #20
    3b90:	af00      	add	r7, sp, #0
    3b92:	6078      	str	r0, [r7, #4]
    3b94:	460b      	mov	r3, r1
    3b96:	807b      	strh	r3, [r7, #2]
    3b98:	4613      	mov	r3, r2
    3b9a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3b9c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3ba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    3ba2:	887a      	ldrh	r2, [r7, #2]
    3ba4:	f04f 0301 	mov.w	r3, #1	; 0x1
    3ba8:	fa03 f302 	lsl.w	r3, r3, r2
    3bac:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    3bae:	687b      	ldr	r3, [r7, #4]
    3bb0:	8c1b      	ldrh	r3, [r3, #32]
    3bb2:	b29a      	uxth	r2, r3
    3bb4:	89fb      	ldrh	r3, [r7, #14]
    3bb6:	ea6f 0303 	mvn.w	r3, r3
    3bba:	b29b      	uxth	r3, r3
    3bbc:	ea02 0303 	and.w	r3, r2, r3
    3bc0:	b29b      	uxth	r3, r3
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    3bc6:	687b      	ldr	r3, [r7, #4]
    3bc8:	8c1b      	ldrh	r3, [r3, #32]
    3bca:	b299      	uxth	r1, r3
    3bcc:	883a      	ldrh	r2, [r7, #0]
    3bce:	887b      	ldrh	r3, [r7, #2]
    3bd0:	fa02 f303 	lsl.w	r3, r2, r3
    3bd4:	b29b      	uxth	r3, r3
    3bd6:	ea41 0303 	orr.w	r3, r1, r3
    3bda:	b29b      	uxth	r3, r3
    3bdc:	687a      	ldr	r2, [r7, #4]
    3bde:	8413      	strh	r3, [r2, #32]
}
    3be0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3be4:	46bd      	mov	sp, r7
    3be6:	bc80      	pop	{r7}
    3be8:	4770      	bx	lr
    3bea:	46c0      	nop			(mov r8, r8)

00003bec <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    3bec:	b480      	push	{r7}
    3bee:	b085      	sub	sp, #20
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	6078      	str	r0, [r7, #4]
    3bf4:	460b      	mov	r3, r1
    3bf6:	807b      	strh	r3, [r7, #2]
    3bf8:	4613      	mov	r3, r2
    3bfa:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    3bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c00:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_18_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    3c02:	887a      	ldrh	r2, [r7, #2]
    3c04:	f04f 0304 	mov.w	r3, #4	; 0x4
    3c08:	fa03 f302 	lsl.w	r3, r3, r2
    3c0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    3c0e:	687b      	ldr	r3, [r7, #4]
    3c10:	8c1b      	ldrh	r3, [r3, #32]
    3c12:	b29a      	uxth	r2, r3
    3c14:	89fb      	ldrh	r3, [r7, #14]
    3c16:	ea6f 0303 	mvn.w	r3, r3
    3c1a:	b29b      	uxth	r3, r3
    3c1c:	ea02 0303 	and.w	r3, r2, r3
    3c20:	b29b      	uxth	r3, r3
    3c22:	687a      	ldr	r2, [r7, #4]
    3c24:	8413      	strh	r3, [r2, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	8c1b      	ldrh	r3, [r3, #32]
    3c2a:	b299      	uxth	r1, r3
    3c2c:	883a      	ldrh	r2, [r7, #0]
    3c2e:	887b      	ldrh	r3, [r7, #2]
    3c30:	fa02 f303 	lsl.w	r3, r2, r3
    3c34:	b29b      	uxth	r3, r3
    3c36:	ea41 0303 	orr.w	r3, r1, r3
    3c3a:	b29b      	uxth	r3, r3
    3c3c:	687a      	ldr	r2, [r7, #4]
    3c3e:	8413      	strh	r3, [r2, #32]
}
    3c40:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3c44:	46bd      	mov	sp, r7
    3c46:	bc80      	pop	{r7}
    3c48:	4770      	bx	lr
    3c4a:	46c0      	nop			(mov r8, r8)

00003c4c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    3c4c:	b480      	push	{r7}
    3c4e:	b085      	sub	sp, #20
    3c50:	af00      	add	r7, sp, #0
    3c52:	6078      	str	r0, [r7, #4]
    3c54:	460b      	mov	r3, r1
    3c56:	807b      	strh	r3, [r7, #2]
    3c58:	4613      	mov	r3, r2
    3c5a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    3c5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c60:	60bb      	str	r3, [r7, #8]
  uint16_t tmp1 = 0;
    3c62:	f04f 0300 	mov.w	r3, #0	; 0x0
    3c66:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	60bb      	str	r3, [r7, #8]
  tmp += CCMR_Offset;
    3c6c:	68bb      	ldr	r3, [r7, #8]
    3c6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
    3c72:	60bb      	str	r3, [r7, #8]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    3c74:	887a      	ldrh	r2, [r7, #2]
    3c76:	f04f 0301 	mov.w	r3, #1	; 0x1
    3c7a:	fa03 f302 	lsl.w	r3, r3, r2
    3c7e:	81fb      	strh	r3, [r7, #14]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	8c1b      	ldrh	r3, [r3, #32]
    3c84:	b29a      	uxth	r2, r3
    3c86:	89fb      	ldrh	r3, [r7, #14]
    3c88:	ea6f 0303 	mvn.w	r3, r3
    3c8c:	b29b      	uxth	r3, r3
    3c8e:	ea02 0303 	and.w	r3, r2, r3
    3c92:	b29b      	uxth	r3, r3
    3c94:	687a      	ldr	r2, [r7, #4]
    3c96:	8413      	strh	r3, [r2, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    3c98:	887b      	ldrh	r3, [r7, #2]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d002      	beq.n	3ca4 <TIM_SelectOCxM+0x58>
    3c9e:	887b      	ldrh	r3, [r7, #2]
    3ca0:	2b08      	cmp	r3, #8
    3ca2:	d117      	bne.n	3cd4 <TIM_SelectOCxM+0x88>
  {
    tmp += (TIM_Channel>>1);
    3ca4:	887b      	ldrh	r3, [r7, #2]
    3ca6:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3caa:	b29b      	uxth	r3, r3
    3cac:	461a      	mov	r2, r3
    3cae:	68bb      	ldr	r3, [r7, #8]
    3cb0:	4413      	add	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_Mask;
    3cb4:	68b9      	ldr	r1, [r7, #8]
    3cb6:	68bb      	ldr	r3, [r7, #8]
    3cb8:	681a      	ldr	r2, [r3, #0]
    3cba:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3cbe:	ea02 0303 	and.w	r3, r2, r3
    3cc2:	600b      	str	r3, [r1, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    3cc4:	68b9      	ldr	r1, [r7, #8]
    3cc6:	68bb      	ldr	r3, [r7, #8]
    3cc8:	681a      	ldr	r2, [r3, #0]
    3cca:	883b      	ldrh	r3, [r7, #0]
    3ccc:	ea42 0303 	orr.w	r3, r2, r3
    3cd0:	600b      	str	r3, [r1, #0]
    3cd2:	e01c      	b.n	3d0e <TIM_SelectOCxM+0xc2>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    3cd4:	887b      	ldrh	r3, [r7, #2]
    3cd6:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
    3cda:	b29b      	uxth	r3, r3
    3cdc:	ea4f 0353 	mov.w	r3, r3, lsr #1
    3ce0:	b29b      	uxth	r3, r3
    3ce2:	461a      	mov	r2, r3
    3ce4:	68bb      	ldr	r3, [r7, #8]
    3ce6:	4413      	add	r3, r2
    3ce8:	60bb      	str	r3, [r7, #8]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_Mask;
    3cea:	68b9      	ldr	r1, [r7, #8]
    3cec:	68bb      	ldr	r3, [r7, #8]
    3cee:	681a      	ldr	r2, [r3, #0]
    3cf0:	f648 73ff 	movw	r3, #36863	; 0x8fff
    3cf4:	ea02 0303 	and.w	r3, r2, r3
    3cf8:	600b      	str	r3, [r1, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    3cfa:	68b9      	ldr	r1, [r7, #8]
    3cfc:	68bb      	ldr	r3, [r7, #8]
    3cfe:	681a      	ldr	r2, [r3, #0]
    3d00:	883b      	ldrh	r3, [r7, #0]
    3d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3d06:	b29b      	uxth	r3, r3
    3d08:	ea42 0303 	orr.w	r3, r2, r3
    3d0c:	600b      	str	r3, [r1, #0]
  }
}
    3d0e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d12:	46bd      	mov	sp, r7
    3d14:	bc80      	pop	{r7}
    3d16:	4770      	bx	lr

00003d18 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3d18:	b480      	push	{r7}
    3d1a:	b085      	sub	sp, #20
    3d1c:	af00      	add	r7, sp, #0
    3d1e:	60f8      	str	r0, [r7, #12]
    3d20:	460b      	mov	r3, r1
    3d22:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3d24:	7afb      	ldrb	r3, [r7, #11]
    3d26:	2b00      	cmp	r3, #0
    3d28:	d008      	beq.n	3d3c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= CR1_UDIS_Set;
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	881b      	ldrh	r3, [r3, #0]
    3d2e:	b29b      	uxth	r3, r3
    3d30:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    3d34:	b29b      	uxth	r3, r3
    3d36:	68fa      	ldr	r2, [r7, #12]
    3d38:	8013      	strh	r3, [r2, #0]
    3d3a:	e00d      	b.n	3d58 <TIM_UpdateDisableConfig+0x40>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= CR1_UDIS_Reset;
    3d3c:	68fb      	ldr	r3, [r7, #12]
    3d3e:	881b      	ldrh	r3, [r3, #0]
    3d40:	b29b      	uxth	r3, r3
    3d42:	607b      	str	r3, [r7, #4]
    3d44:	f240 33fd 	movw	r3, #1021	; 0x3fd
    3d48:	6879      	ldr	r1, [r7, #4]
    3d4a:	ea01 0303 	and.w	r3, r1, r3
    3d4e:	607b      	str	r3, [r7, #4]
    3d50:	68fa      	ldr	r2, [r7, #12]
    3d52:	6879      	ldr	r1, [r7, #4]
    3d54:	460b      	mov	r3, r1
    3d56:	8013      	strh	r3, [r2, #0]
  }
}
    3d58:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bc80      	pop	{r7}
    3d60:	4770      	bx	lr
    3d62:	46c0      	nop			(mov r8, r8)

00003d64 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    3d64:	b480      	push	{r7}
    3d66:	b085      	sub	sp, #20
    3d68:	af00      	add	r7, sp, #0
    3d6a:	60f8      	str	r0, [r7, #12]
    3d6c:	460b      	mov	r3, r1
    3d6e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    3d70:	897b      	ldrh	r3, [r7, #10]
    3d72:	2b00      	cmp	r3, #0
    3d74:	d008      	beq.n	3d88 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= CR1_URS_Set;
    3d76:	68fb      	ldr	r3, [r7, #12]
    3d78:	881b      	ldrh	r3, [r3, #0]
    3d7a:	b29b      	uxth	r3, r3
    3d7c:	f043 0304 	orr.w	r3, r3, #4	; 0x4
    3d80:	b29b      	uxth	r3, r3
    3d82:	68fa      	ldr	r2, [r7, #12]
    3d84:	8013      	strh	r3, [r2, #0]
    3d86:	e00d      	b.n	3da4 <TIM_UpdateRequestConfig+0x40>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= CR1_URS_Reset;
    3d88:	68fb      	ldr	r3, [r7, #12]
    3d8a:	881b      	ldrh	r3, [r3, #0]
    3d8c:	b29b      	uxth	r3, r3
    3d8e:	607b      	str	r3, [r7, #4]
    3d90:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3d94:	6879      	ldr	r1, [r7, #4]
    3d96:	ea01 0303 	and.w	r3, r1, r3
    3d9a:	607b      	str	r3, [r7, #4]
    3d9c:	68fa      	ldr	r2, [r7, #12]
    3d9e:	6879      	ldr	r1, [r7, #4]
    3da0:	460b      	mov	r3, r1
    3da2:	8013      	strh	r3, [r2, #0]
  }
}
    3da4:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3da8:	46bd      	mov	sp, r7
    3daa:	bc80      	pop	{r7}
    3dac:	4770      	bx	lr
    3dae:	46c0      	nop			(mov r8, r8)

00003db0 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    3db0:	b480      	push	{r7}
    3db2:	b085      	sub	sp, #20
    3db4:	af00      	add	r7, sp, #0
    3db6:	60f8      	str	r0, [r7, #12]
    3db8:	460b      	mov	r3, r1
    3dba:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3dbc:	7afb      	ldrb	r3, [r7, #11]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d008      	beq.n	3dd4 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= CR2_TI1S_Set;
    3dc2:	68fb      	ldr	r3, [r7, #12]
    3dc4:	889b      	ldrh	r3, [r3, #4]
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3dcc:	b29b      	uxth	r3, r3
    3dce:	68fa      	ldr	r2, [r7, #12]
    3dd0:	8093      	strh	r3, [r2, #4]
    3dd2:	e00d      	b.n	3df0 <TIM_SelectHallSensor+0x40>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= CR2_TI1S_Reset;
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	889b      	ldrh	r3, [r3, #4]
    3dd8:	b29b      	uxth	r3, r3
    3dda:	607b      	str	r3, [r7, #4]
    3ddc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3de0:	6879      	ldr	r1, [r7, #4]
    3de2:	ea01 0303 	and.w	r3, r1, r3
    3de6:	607b      	str	r3, [r7, #4]
    3de8:	68fa      	ldr	r2, [r7, #12]
    3dea:	6879      	ldr	r1, [r7, #4]
    3dec:	460b      	mov	r3, r1
    3dee:	8093      	strh	r3, [r2, #4]
  }
}
    3df0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3df4:	46bd      	mov	sp, r7
    3df6:	bc80      	pop	{r7}
    3df8:	4770      	bx	lr
    3dfa:	46c0      	nop			(mov r8, r8)

00003dfc <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    3dfc:	b480      	push	{r7}
    3dfe:	b085      	sub	sp, #20
    3e00:	af00      	add	r7, sp, #0
    3e02:	60f8      	str	r0, [r7, #12]
    3e04:	460b      	mov	r3, r1
    3e06:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= CR1_OPM_Reset;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	881b      	ldrh	r3, [r3, #0]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	607b      	str	r3, [r7, #4]
    3e10:	f240 33f7 	movw	r3, #1015	; 0x3f7
    3e14:	6879      	ldr	r1, [r7, #4]
    3e16:	ea01 0303 	and.w	r3, r1, r3
    3e1a:	607b      	str	r3, [r7, #4]
    3e1c:	68fa      	ldr	r2, [r7, #12]
    3e1e:	6879      	ldr	r1, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	8013      	strh	r3, [r2, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    3e24:	68fb      	ldr	r3, [r7, #12]
    3e26:	881b      	ldrh	r3, [r3, #0]
    3e28:	b29a      	uxth	r2, r3
    3e2a:	897b      	ldrh	r3, [r7, #10]
    3e2c:	ea42 0303 	orr.w	r3, r2, r3
    3e30:	b29b      	uxth	r3, r3
    3e32:	68fa      	ldr	r2, [r7, #12]
    3e34:	8013      	strh	r3, [r2, #0]
}
    3e36:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e3a:	46bd      	mov	sp, r7
    3e3c:	bc80      	pop	{r7}
    3e3e:	4770      	bx	lr

00003e40 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    3e40:	b480      	push	{r7}
    3e42:	b085      	sub	sp, #20
    3e44:	af00      	add	r7, sp, #0
    3e46:	60f8      	str	r0, [r7, #12]
    3e48:	460b      	mov	r3, r1
    3e4a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= CR2_MMS_Mask;
    3e4c:	68fb      	ldr	r3, [r7, #12]
    3e4e:	889b      	ldrh	r3, [r3, #4]
    3e50:	b29b      	uxth	r3, r3
    3e52:	607b      	str	r3, [r7, #4]
    3e54:	f64f 738f 	movw	r3, #65423	; 0xff8f
    3e58:	6879      	ldr	r1, [r7, #4]
    3e5a:	ea01 0303 	and.w	r3, r1, r3
    3e5e:	607b      	str	r3, [r7, #4]
    3e60:	68fa      	ldr	r2, [r7, #12]
    3e62:	6879      	ldr	r1, [r7, #4]
    3e64:	460b      	mov	r3, r1
    3e66:	8093      	strh	r3, [r2, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	889b      	ldrh	r3, [r3, #4]
    3e6c:	b29a      	uxth	r2, r3
    3e6e:	897b      	ldrh	r3, [r7, #10]
    3e70:	ea42 0303 	orr.w	r3, r2, r3
    3e74:	b29b      	uxth	r3, r3
    3e76:	68fa      	ldr	r2, [r7, #12]
    3e78:	8093      	strh	r3, [r2, #4]
}
    3e7a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3e7e:	46bd      	mov	sp, r7
    3e80:	bc80      	pop	{r7}
    3e82:	4770      	bx	lr

00003e84 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    3e84:	b480      	push	{r7}
    3e86:	b085      	sub	sp, #20
    3e88:	af00      	add	r7, sp, #0
    3e8a:	60f8      	str	r0, [r7, #12]
    3e8c:	460b      	mov	r3, r1
    3e8e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  /* Reset the SMS Bits */
  TIMx->SMCR &= SMCR_SMS_Mask;
    3e90:	68fb      	ldr	r3, [r7, #12]
    3e92:	891b      	ldrh	r3, [r3, #8]
    3e94:	b29b      	uxth	r3, r3
    3e96:	607b      	str	r3, [r7, #4]
    3e98:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    3e9c:	6879      	ldr	r1, [r7, #4]
    3e9e:	ea01 0303 	and.w	r3, r1, r3
    3ea2:	607b      	str	r3, [r7, #4]
    3ea4:	68fa      	ldr	r2, [r7, #12]
    3ea6:	6879      	ldr	r1, [r7, #4]
    3ea8:	460b      	mov	r3, r1
    3eaa:	8113      	strh	r3, [r2, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    3eac:	68fb      	ldr	r3, [r7, #12]
    3eae:	891b      	ldrh	r3, [r3, #8]
    3eb0:	b29a      	uxth	r2, r3
    3eb2:	897b      	ldrh	r3, [r7, #10]
    3eb4:	ea42 0303 	orr.w	r3, r2, r3
    3eb8:	b29b      	uxth	r3, r3
    3eba:	68fa      	ldr	r2, [r7, #12]
    3ebc:	8113      	strh	r3, [r2, #8]
}
    3ebe:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ec2:	46bd      	mov	sp, r7
    3ec4:	bc80      	pop	{r7}
    3ec6:	4770      	bx	lr

00003ec8 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    3ec8:	b480      	push	{r7}
    3eca:	b085      	sub	sp, #20
    3ecc:	af00      	add	r7, sp, #0
    3ece:	60f8      	str	r0, [r7, #12]
    3ed0:	460b      	mov	r3, r1
    3ed2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= SMCR_MSM_Reset;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	891b      	ldrh	r3, [r3, #8]
    3ed8:	b29b      	uxth	r3, r3
    3eda:	607b      	str	r3, [r7, #4]
    3edc:	f64f 737f 	movw	r3, #65407	; 0xff7f
    3ee0:	6879      	ldr	r1, [r7, #4]
    3ee2:	ea01 0303 	and.w	r3, r1, r3
    3ee6:	607b      	str	r3, [r7, #4]
    3ee8:	68fa      	ldr	r2, [r7, #12]
    3eea:	6879      	ldr	r1, [r7, #4]
    3eec:	460b      	mov	r3, r1
    3eee:	8113      	strh	r3, [r2, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    3ef0:	68fb      	ldr	r3, [r7, #12]
    3ef2:	891b      	ldrh	r3, [r3, #8]
    3ef4:	b29a      	uxth	r2, r3
    3ef6:	897b      	ldrh	r3, [r7, #10]
    3ef8:	ea42 0303 	orr.w	r3, r2, r3
    3efc:	b29b      	uxth	r3, r3
    3efe:	68fa      	ldr	r2, [r7, #12]
    3f00:	8113      	strh	r3, [r2, #8]
}
    3f02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3f06:	46bd      	mov	sp, r7
    3f08:	bc80      	pop	{r7}
    3f0a:	4770      	bx	lr

00003f0c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    3f0c:	b480      	push	{r7}
    3f0e:	b083      	sub	sp, #12
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	460b      	mov	r3, r1
    3f16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    3f18:	687a      	ldr	r2, [r7, #4]
    3f1a:	887b      	ldrh	r3, [r7, #2]
    3f1c:	8493      	strh	r3, [r2, #36]
}
    3f1e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f22:	46bd      	mov	sp, r7
    3f24:	bc80      	pop	{r7}
    3f26:	4770      	bx	lr

00003f28 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    3f28:	b480      	push	{r7}
    3f2a:	b083      	sub	sp, #12
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
    3f30:	460b      	mov	r3, r1
    3f32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    3f34:	687a      	ldr	r2, [r7, #4]
    3f36:	887b      	ldrh	r3, [r7, #2]
    3f38:	8593      	strh	r3, [r2, #44]
}
    3f3a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f3e:	46bd      	mov	sp, r7
    3f40:	bc80      	pop	{r7}
    3f42:	4770      	bx	lr

00003f44 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    3f44:	b480      	push	{r7}
    3f46:	b083      	sub	sp, #12
    3f48:	af00      	add	r7, sp, #0
    3f4a:	6078      	str	r0, [r7, #4]
    3f4c:	460b      	mov	r3, r1
    3f4e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    3f50:	687a      	ldr	r2, [r7, #4]
    3f52:	887b      	ldrh	r3, [r7, #2]
    3f54:	8693      	strh	r3, [r2, #52]
}
    3f56:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f5a:	46bd      	mov	sp, r7
    3f5c:	bc80      	pop	{r7}
    3f5e:	4770      	bx	lr

00003f60 <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    3f60:	b480      	push	{r7}
    3f62:	b083      	sub	sp, #12
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	460b      	mov	r3, r1
    3f6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    3f6c:	687a      	ldr	r2, [r7, #4]
    3f6e:	887b      	ldrh	r3, [r7, #2]
    3f70:	8713      	strh	r3, [r2, #56]
}
    3f72:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f76:	46bd      	mov	sp, r7
    3f78:	bc80      	pop	{r7}
    3f7a:	4770      	bx	lr

00003f7c <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    3f7c:	b480      	push	{r7}
    3f7e:	b083      	sub	sp, #12
    3f80:	af00      	add	r7, sp, #0
    3f82:	6078      	str	r0, [r7, #4]
    3f84:	460b      	mov	r3, r1
    3f86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    3f88:	687a      	ldr	r2, [r7, #4]
    3f8a:	887b      	ldrh	r3, [r7, #2]
    3f8c:	8793      	strh	r3, [r2, #60]
}
    3f8e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3f92:	46bd      	mov	sp, r7
    3f94:	bc80      	pop	{r7}
    3f96:	4770      	bx	lr

00003f98 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    3f98:	b480      	push	{r7}
    3f9a:	b083      	sub	sp, #12
    3f9c:	af00      	add	r7, sp, #0
    3f9e:	6078      	str	r0, [r7, #4]
    3fa0:	460b      	mov	r3, r1
    3fa2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    3fa4:	687a      	ldr	r2, [r7, #4]
    3fa6:	887b      	ldrh	r3, [r7, #2]
    3fa8:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    3fac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    3fb0:	46bd      	mov	sp, r7
    3fb2:	bc80      	pop	{r7}
    3fb4:	4770      	bx	lr
    3fb6:	46c0      	nop			(mov r8, r8)

00003fb8 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3fb8:	b480      	push	{r7}
    3fba:	b085      	sub	sp, #20
    3fbc:	af00      	add	r7, sp, #0
    3fbe:	60f8      	str	r0, [r7, #12]
    3fc0:	460b      	mov	r3, r1
    3fc2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= CCMR_IC13PSC_Mask;
    3fc4:	68fb      	ldr	r3, [r7, #12]
    3fc6:	8b1b      	ldrh	r3, [r3, #24]
    3fc8:	b29b      	uxth	r3, r3
    3fca:	607b      	str	r3, [r7, #4]
    3fcc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    3fd0:	6879      	ldr	r1, [r7, #4]
    3fd2:	ea01 0303 	and.w	r3, r1, r3
    3fd6:	607b      	str	r3, [r7, #4]
    3fd8:	68fa      	ldr	r2, [r7, #12]
    3fda:	6879      	ldr	r1, [r7, #4]
    3fdc:	460b      	mov	r3, r1
    3fde:	8313      	strh	r3, [r2, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	8b1b      	ldrh	r3, [r3, #24]
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	897b      	ldrh	r3, [r7, #10]
    3fe8:	ea42 0303 	orr.w	r3, r2, r3
    3fec:	b29b      	uxth	r3, r3
    3fee:	68fa      	ldr	r2, [r7, #12]
    3ff0:	8313      	strh	r3, [r2, #24]
}
    3ff2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    3ff6:	46bd      	mov	sp, r7
    3ff8:	bc80      	pop	{r7}
    3ffa:	4770      	bx	lr

00003ffc <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    3ffc:	b480      	push	{r7}
    3ffe:	b085      	sub	sp, #20
    4000:	af00      	add	r7, sp, #0
    4002:	60f8      	str	r0, [r7, #12]
    4004:	460b      	mov	r3, r1
    4006:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= CCMR_IC24PSC_Mask;
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	8b1b      	ldrh	r3, [r3, #24]
    400c:	b29b      	uxth	r3, r3
    400e:	607b      	str	r3, [r7, #4]
    4010:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    4014:	6879      	ldr	r1, [r7, #4]
    4016:	ea01 0303 	and.w	r3, r1, r3
    401a:	607b      	str	r3, [r7, #4]
    401c:	68fa      	ldr	r2, [r7, #12]
    401e:	6879      	ldr	r1, [r7, #4]
    4020:	460b      	mov	r3, r1
    4022:	8313      	strh	r3, [r2, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    4024:	68fb      	ldr	r3, [r7, #12]
    4026:	8b1b      	ldrh	r3, [r3, #24]
    4028:	b29a      	uxth	r2, r3
    402a:	897b      	ldrh	r3, [r7, #10]
    402c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4030:	b29b      	uxth	r3, r3
    4032:	ea42 0303 	orr.w	r3, r2, r3
    4036:	b29b      	uxth	r3, r3
    4038:	68fa      	ldr	r2, [r7, #12]
    403a:	8313      	strh	r3, [r2, #24]
}
    403c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4040:	46bd      	mov	sp, r7
    4042:	bc80      	pop	{r7}
    4044:	4770      	bx	lr
    4046:	46c0      	nop			(mov r8, r8)

00004048 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    4048:	b480      	push	{r7}
    404a:	b085      	sub	sp, #20
    404c:	af00      	add	r7, sp, #0
    404e:	60f8      	str	r0, [r7, #12]
    4050:	460b      	mov	r3, r1
    4052:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= CCMR_IC13PSC_Mask;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	8b9b      	ldrh	r3, [r3, #28]
    4058:	b29b      	uxth	r3, r3
    405a:	607b      	str	r3, [r7, #4]
    405c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
    4060:	6879      	ldr	r1, [r7, #4]
    4062:	ea01 0303 	and.w	r3, r1, r3
    4066:	607b      	str	r3, [r7, #4]
    4068:	68fa      	ldr	r2, [r7, #12]
    406a:	6879      	ldr	r1, [r7, #4]
    406c:	460b      	mov	r3, r1
    406e:	8393      	strh	r3, [r2, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    4070:	68fb      	ldr	r3, [r7, #12]
    4072:	8b9b      	ldrh	r3, [r3, #28]
    4074:	b29a      	uxth	r2, r3
    4076:	897b      	ldrh	r3, [r7, #10]
    4078:	ea42 0303 	orr.w	r3, r2, r3
    407c:	b29b      	uxth	r3, r3
    407e:	68fa      	ldr	r2, [r7, #12]
    4080:	8393      	strh	r3, [r2, #28]
}
    4082:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4086:	46bd      	mov	sp, r7
    4088:	bc80      	pop	{r7}
    408a:	4770      	bx	lr

0000408c <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    408c:	b480      	push	{r7}
    408e:	b085      	sub	sp, #20
    4090:	af00      	add	r7, sp, #0
    4092:	60f8      	str	r0, [r7, #12]
    4094:	460b      	mov	r3, r1
    4096:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= CCMR_IC24PSC_Mask;
    4098:	68fb      	ldr	r3, [r7, #12]
    409a:	8b9b      	ldrh	r3, [r3, #28]
    409c:	b29b      	uxth	r3, r3
    409e:	607b      	str	r3, [r7, #4]
    40a0:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
    40a4:	6879      	ldr	r1, [r7, #4]
    40a6:	ea01 0303 	and.w	r3, r1, r3
    40aa:	607b      	str	r3, [r7, #4]
    40ac:	68fa      	ldr	r2, [r7, #12]
    40ae:	6879      	ldr	r1, [r7, #4]
    40b0:	460b      	mov	r3, r1
    40b2:	8393      	strh	r3, [r2, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    40b4:	68fb      	ldr	r3, [r7, #12]
    40b6:	8b9b      	ldrh	r3, [r3, #28]
    40b8:	b29a      	uxth	r2, r3
    40ba:	897b      	ldrh	r3, [r7, #10]
    40bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
    40c0:	b29b      	uxth	r3, r3
    40c2:	ea42 0303 	orr.w	r3, r2, r3
    40c6:	b29b      	uxth	r3, r3
    40c8:	68fa      	ldr	r2, [r7, #12]
    40ca:	8393      	strh	r3, [r2, #28]
}
    40cc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    40d0:	46bd      	mov	sp, r7
    40d2:	bc80      	pop	{r7}
    40d4:	4770      	bx	lr
    40d6:	46c0      	nop			(mov r8, r8)

000040d8 <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    40d8:	b480      	push	{r7}
    40da:	b083      	sub	sp, #12
    40dc:	af00      	add	r7, sp, #0
    40de:	6078      	str	r0, [r7, #4]
    40e0:	460b      	mov	r3, r1
    40e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= CR1_CKD_Mask;
    40e4:	687b      	ldr	r3, [r7, #4]
    40e6:	881b      	ldrh	r3, [r3, #0]
    40e8:	b29b      	uxth	r3, r3
    40ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    40ee:	687a      	ldr	r2, [r7, #4]
    40f0:	8013      	strh	r3, [r2, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	881b      	ldrh	r3, [r3, #0]
    40f6:	b29a      	uxth	r2, r3
    40f8:	887b      	ldrh	r3, [r7, #2]
    40fa:	ea42 0303 	orr.w	r3, r2, r3
    40fe:	b29b      	uxth	r3, r3
    4100:	687a      	ldr	r2, [r7, #4]
    4102:	8013      	strh	r3, [r2, #0]
}
    4104:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4108:	46bd      	mov	sp, r7
    410a:	bc80      	pop	{r7}
    410c:	4770      	bx	lr
    410e:	46c0      	nop			(mov r8, r8)

00004110 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    4110:	b480      	push	{r7}
    4112:	b083      	sub	sp, #12
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	8e9b      	ldrh	r3, [r3, #52]
    411c:	b29b      	uxth	r3, r3
}
    411e:	4618      	mov	r0, r3
    4120:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4124:	46bd      	mov	sp, r7
    4126:	bc80      	pop	{r7}
    4128:	4770      	bx	lr
    412a:	46c0      	nop			(mov r8, r8)

0000412c <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	8f1b      	ldrh	r3, [r3, #56]
    4138:	b29b      	uxth	r3, r3
}
    413a:	4618      	mov	r0, r3
    413c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4140:	46bd      	mov	sp, r7
    4142:	bc80      	pop	{r7}
    4144:	4770      	bx	lr
    4146:	46c0      	nop			(mov r8, r8)

00004148 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    4148:	b480      	push	{r7}
    414a:	b083      	sub	sp, #12
    414c:	af00      	add	r7, sp, #0
    414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    4150:	687b      	ldr	r3, [r7, #4]
    4152:	8f9b      	ldrh	r3, [r3, #60]
    4154:	b29b      	uxth	r3, r3
}
    4156:	4618      	mov	r0, r3
    4158:	f107 070c 	add.w	r7, r7, #12	; 0xc
    415c:	46bd      	mov	sp, r7
    415e:	bc80      	pop	{r7}
    4160:	4770      	bx	lr
    4162:	46c0      	nop			(mov r8, r8)

00004164 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    4164:	b480      	push	{r7}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_123458_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	f8b3 3040 	ldrh.w	r3, [r3, #64]
    4172:	b29b      	uxth	r3, r3
}
    4174:	4618      	mov	r0, r3
    4176:	f107 070c 	add.w	r7, r7, #12	; 0xc
    417a:	46bd      	mov	sp, r7
    417c:	bc80      	pop	{r7}
    417e:	4770      	bx	lr

00004180 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    4180:	b480      	push	{r7}
    4182:	b083      	sub	sp, #12
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	8c9b      	ldrh	r3, [r3, #36]
    418c:	b29b      	uxth	r3, r3
}
    418e:	4618      	mov	r0, r3
    4190:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4194:	46bd      	mov	sp, r7
    4196:	bc80      	pop	{r7}
    4198:	4770      	bx	lr
    419a:	46c0      	nop			(mov r8, r8)

0000419c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 8 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    419c:	b480      	push	{r7}
    419e:	b083      	sub	sp, #12
    41a0:	af00      	add	r7, sp, #0
    41a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    41a4:	687b      	ldr	r3, [r7, #4]
    41a6:	8d1b      	ldrh	r3, [r3, #40]
    41a8:	b29b      	uxth	r3, r3
}
    41aa:	4618      	mov	r0, r3
    41ac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    41b0:	46bd      	mov	sp, r7
    41b2:	bc80      	pop	{r7}
    41b4:	4770      	bx	lr
    41b6:	46c0      	nop			(mov r8, r8)

000041b8 <TIM_GetFlagStatus>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    41b8:	b480      	push	{r7}
    41ba:	b085      	sub	sp, #20
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    41c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    41ca:	687b      	ldr	r3, [r7, #4]
    41cc:	8a1b      	ldrh	r3, [r3, #16]
    41ce:	b29a      	uxth	r2, r3
    41d0:	887b      	ldrh	r3, [r7, #2]
    41d2:	ea02 0303 	and.w	r3, r2, r3
    41d6:	b29b      	uxth	r3, r3
    41d8:	2b00      	cmp	r3, #0
    41da:	d003      	beq.n	41e4 <TIM_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    41dc:	f04f 0301 	mov.w	r3, #1	; 0x1
    41e0:	73fb      	strb	r3, [r7, #15]
    41e2:	e002      	b.n	41ea <TIM_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    41e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    41e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    41ea:	7bfb      	ldrb	r3, [r7, #15]
}
    41ec:	4618      	mov	r0, r3
    41ee:	f107 0714 	add.w	r7, r7, #20	; 0x14
    41f2:	46bd      	mov	sp, r7
    41f4:	bc80      	pop	{r7}
    41f6:	4770      	bx	lr

000041f8 <TIM_ClearFlag>:
  *   - TIM6 and TIM7 can have only one update flag. 
  *   - TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.  
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    41f8:	b480      	push	{r7}
    41fa:	b083      	sub	sp, #12
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
    4200:	460b      	mov	r3, r1
    4202:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    4204:	887b      	ldrh	r3, [r7, #2]
    4206:	ea6f 0303 	mvn.w	r3, r3
    420a:	b29b      	uxth	r3, r3
    420c:	687a      	ldr	r2, [r7, #4]
    420e:	8213      	strh	r3, [r2, #16]
}
    4210:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4214:	46bd      	mov	sp, r7
    4216:	bc80      	pop	{r7}
    4218:	4770      	bx	lr
    421a:	46c0      	nop			(mov r8, r8)

0000421c <TIM_GetITStatus>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    421c:	b480      	push	{r7}
    421e:	b085      	sub	sp, #20
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	460b      	mov	r3, r1
    4226:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    4228:	f04f 0300 	mov.w	r3, #0	; 0x0
    422c:	72fb      	strb	r3, [r7, #11]
  uint16_t itstatus = 0x0, itenable = 0x0;
    422e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4232:	81bb      	strh	r3, [r7, #12]
    4234:	f04f 0300 	mov.w	r3, #0	; 0x0
    4238:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	8a1b      	ldrh	r3, [r3, #16]
    423e:	b29a      	uxth	r2, r3
    4240:	887b      	ldrh	r3, [r7, #2]
    4242:	ea02 0303 	and.w	r3, r2, r3
    4246:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    4248:	687b      	ldr	r3, [r7, #4]
    424a:	899b      	ldrh	r3, [r3, #12]
    424c:	b29a      	uxth	r2, r3
    424e:	887b      	ldrh	r3, [r7, #2]
    4250:	ea02 0303 	and.w	r3, r2, r3
    4254:	81fb      	strh	r3, [r7, #14]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    4256:	89bb      	ldrh	r3, [r7, #12]
    4258:	2b00      	cmp	r3, #0
    425a:	d006      	beq.n	426a <TIM_GetITStatus+0x4e>
    425c:	89fb      	ldrh	r3, [r7, #14]
    425e:	2b00      	cmp	r3, #0
    4260:	d003      	beq.n	426a <TIM_GetITStatus+0x4e>
  {
    bitstatus = SET;
    4262:	f04f 0301 	mov.w	r3, #1	; 0x1
    4266:	72fb      	strb	r3, [r7, #11]
    4268:	e002      	b.n	4270 <TIM_GetITStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
    426a:	f04f 0300 	mov.w	r3, #0	; 0x0
    426e:	72fb      	strb	r3, [r7, #11]
  }
  return bitstatus;
    4270:	7afb      	ldrb	r3, [r7, #11]
}
    4272:	4618      	mov	r0, r3
    4274:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4278:	46bd      	mov	sp, r7
    427a:	bc80      	pop	{r7}
    427c:	4770      	bx	lr
    427e:	46c0      	nop			(mov r8, r8)

00004280 <TIM_ClearITPendingBit>:
  *   - TIM6 and TIM7 can generate only an update interrupt.
  *   - TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    4280:	b480      	push	{r7}
    4282:	b083      	sub	sp, #12
    4284:	af00      	add	r7, sp, #0
    4286:	6078      	str	r0, [r7, #4]
    4288:	460b      	mov	r3, r1
    428a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    428c:	887b      	ldrh	r3, [r7, #2]
    428e:	ea6f 0303 	mvn.w	r3, r3
    4292:	b29b      	uxth	r3, r3
    4294:	687a      	ldr	r2, [r7, #4]
    4296:	8213      	strh	r3, [r2, #16]
}
    4298:	f107 070c 	add.w	r7, r7, #12	; 0xc
    429c:	46bd      	mov	sp, r7
    429e:	bc80      	pop	{r7}
    42a0:	4770      	bx	lr
    42a2:	46c0      	nop			(mov r8, r8)

000042a4 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    42a4:	b480      	push	{r7}
    42a6:	b087      	sub	sp, #28
    42a8:	af00      	add	r7, sp, #0
    42aa:	60f8      	str	r0, [r7, #12]
    42ac:	4618      	mov	r0, r3
    42ae:	460b      	mov	r3, r1
    42b0:	817b      	strh	r3, [r7, #10]
    42b2:	4613      	mov	r3, r2
    42b4:	813b      	strh	r3, [r7, #8]
    42b6:	4603      	mov	r3, r0
    42b8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    42ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    42be:	82bb      	strh	r3, [r7, #20]
    42c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    42c4:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= CCER_CC1E_Reset;
    42c6:	68fb      	ldr	r3, [r7, #12]
    42c8:	8c1b      	ldrh	r3, [r3, #32]
    42ca:	b29b      	uxth	r3, r3
    42cc:	603b      	str	r3, [r7, #0]
    42ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    42d2:	6839      	ldr	r1, [r7, #0]
    42d4:	ea01 0303 	and.w	r3, r1, r3
    42d8:	603b      	str	r3, [r7, #0]
    42da:	68fa      	ldr	r2, [r7, #12]
    42dc:	6839      	ldr	r1, [r7, #0]
    42de:	460b      	mov	r3, r1
    42e0:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    42e2:	68fb      	ldr	r3, [r7, #12]
    42e4:	8b1b      	ldrh	r3, [r3, #24]
    42e6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    42e8:	68fb      	ldr	r3, [r7, #12]
    42ea:	8c1b      	ldrh	r3, [r3, #32]
    42ec:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    42ee:	8abb      	ldrh	r3, [r7, #20]
    42f0:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    42f4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    42f6:	88fb      	ldrh	r3, [r7, #6]
    42f8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    42fc:	b29a      	uxth	r2, r3
    42fe:	893b      	ldrh	r3, [r7, #8]
    4300:	ea42 0303 	orr.w	r3, r2, r3
    4304:	b29a      	uxth	r2, r3
    4306:	8abb      	ldrh	r3, [r7, #20]
    4308:	ea42 0303 	orr.w	r3, r2, r3
    430c:	82bb      	strh	r3, [r7, #20]
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= CCER_CC1P_Reset;
    430e:	8afb      	ldrh	r3, [r7, #22]
    4310:	f023 0302 	bic.w	r3, r3, #2	; 0x2
    4314:	82fb      	strh	r3, [r7, #22]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)CCER_CC1E_Set);
    4316:	897a      	ldrh	r2, [r7, #10]
    4318:	8afb      	ldrh	r3, [r7, #22]
    431a:	ea42 0303 	orr.w	r3, r2, r3
    431e:	b29b      	uxth	r3, r3
    4320:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4324:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    4326:	68fa      	ldr	r2, [r7, #12]
    4328:	8abb      	ldrh	r3, [r7, #20]
    432a:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    432c:	68fa      	ldr	r2, [r7, #12]
    432e:	8afb      	ldrh	r3, [r7, #22]
    4330:	8413      	strh	r3, [r2, #32]
}
    4332:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4336:	46bd      	mov	sp, r7
    4338:	bc80      	pop	{r7}
    433a:	4770      	bx	lr

0000433c <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    433c:	b480      	push	{r7}
    433e:	b087      	sub	sp, #28
    4340:	af00      	add	r7, sp, #0
    4342:	60f8      	str	r0, [r7, #12]
    4344:	4618      	mov	r0, r3
    4346:	460b      	mov	r3, r1
    4348:	817b      	strh	r3, [r7, #10]
    434a:	4613      	mov	r3, r2
    434c:	813b      	strh	r3, [r7, #8]
    434e:	4603      	mov	r3, r0
    4350:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    4352:	f04f 0300 	mov.w	r3, #0	; 0x0
    4356:	827b      	strh	r3, [r7, #18]
    4358:	f04f 0300 	mov.w	r3, #0	; 0x0
    435c:	82bb      	strh	r3, [r7, #20]
    435e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4362:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= CCER_CC2E_Reset;
    4364:	68fb      	ldr	r3, [r7, #12]
    4366:	8c1b      	ldrh	r3, [r3, #32]
    4368:	b29b      	uxth	r3, r3
    436a:	603b      	str	r3, [r7, #0]
    436c:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4370:	6839      	ldr	r1, [r7, #0]
    4372:	ea01 0303 	and.w	r3, r1, r3
    4376:	603b      	str	r3, [r7, #0]
    4378:	68fa      	ldr	r2, [r7, #12]
    437a:	6839      	ldr	r1, [r7, #0]
    437c:	460b      	mov	r3, r1
    437e:	8413      	strh	r3, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	8b1b      	ldrh	r3, [r3, #24]
    4384:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    4386:	68fb      	ldr	r3, [r7, #12]
    4388:	8c1b      	ldrh	r3, [r3, #32]
    438a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    438c:	897b      	ldrh	r3, [r7, #10]
    438e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4392:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    4394:	8a7b      	ldrh	r3, [r7, #18]
    4396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    439a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    439e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    43a2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    43a4:	88fb      	ldrh	r3, [r7, #6]
    43a6:	ea4f 3303 	mov.w	r3, r3, lsl #12
    43aa:	b29a      	uxth	r2, r3
    43ac:	8a7b      	ldrh	r3, [r7, #18]
    43ae:	ea42 0303 	orr.w	r3, r2, r3
    43b2:	827b      	strh	r3, [r7, #18]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    43b4:	893b      	ldrh	r3, [r7, #8]
    43b6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    43ba:	b29a      	uxth	r2, r3
    43bc:	8a7b      	ldrh	r3, [r7, #18]
    43be:	ea42 0303 	orr.w	r3, r2, r3
    43c2:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= CCER_CC2P_Reset;
    43c4:	8abb      	ldrh	r3, [r7, #20]
    43c6:	f023 0320 	bic.w	r3, r3, #32	; 0x20
    43ca:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)CCER_CC2E_Set);
    43cc:	8afa      	ldrh	r2, [r7, #22]
    43ce:	8abb      	ldrh	r3, [r7, #20]
    43d0:	ea42 0303 	orr.w	r3, r2, r3
    43d4:	b29b      	uxth	r3, r3
    43d6:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    43da:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    43dc:	68fa      	ldr	r2, [r7, #12]
    43de:	8a7b      	ldrh	r3, [r7, #18]
    43e0:	8313      	strh	r3, [r2, #24]
  TIMx->CCER = tmpccer;
    43e2:	68fa      	ldr	r2, [r7, #12]
    43e4:	8abb      	ldrh	r3, [r7, #20]
    43e6:	8413      	strh	r3, [r2, #32]
}
    43e8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    43ec:	46bd      	mov	sp, r7
    43ee:	bc80      	pop	{r7}
    43f0:	4770      	bx	lr
    43f2:	46c0      	nop			(mov r8, r8)

000043f4 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    43f4:	b480      	push	{r7}
    43f6:	b087      	sub	sp, #28
    43f8:	af00      	add	r7, sp, #0
    43fa:	60f8      	str	r0, [r7, #12]
    43fc:	4618      	mov	r0, r3
    43fe:	460b      	mov	r3, r1
    4400:	817b      	strh	r3, [r7, #10]
    4402:	4613      	mov	r3, r2
    4404:	813b      	strh	r3, [r7, #8]
    4406:	4603      	mov	r3, r0
    4408:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    440a:	f04f 0300 	mov.w	r3, #0	; 0x0
    440e:	827b      	strh	r3, [r7, #18]
    4410:	f04f 0300 	mov.w	r3, #0	; 0x0
    4414:	82bb      	strh	r3, [r7, #20]
    4416:	f04f 0300 	mov.w	r3, #0	; 0x0
    441a:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= CCER_CC3E_Reset;
    441c:	68fb      	ldr	r3, [r7, #12]
    441e:	8c1b      	ldrh	r3, [r3, #32]
    4420:	b29b      	uxth	r3, r3
    4422:	603b      	str	r3, [r7, #0]
    4424:	f64f 63ff 	movw	r3, #65279	; 0xfeff
    4428:	6839      	ldr	r1, [r7, #0]
    442a:	ea01 0303 	and.w	r3, r1, r3
    442e:	603b      	str	r3, [r7, #0]
    4430:	68fa      	ldr	r2, [r7, #12]
    4432:	6839      	ldr	r1, [r7, #0]
    4434:	460b      	mov	r3, r1
    4436:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    4438:	68fb      	ldr	r3, [r7, #12]
    443a:	8b9b      	ldrh	r3, [r3, #28]
    443c:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    443e:	68fb      	ldr	r3, [r7, #12]
    4440:	8c1b      	ldrh	r3, [r3, #32]
    4442:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    4444:	897b      	ldrh	r3, [r7, #10]
    4446:	ea4f 2303 	mov.w	r3, r3, lsl #8
    444a:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC13S_Mask & CCMR_IC13F_Mask;
    444c:	8a7b      	ldrh	r3, [r7, #18]
    444e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    4452:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    4454:	88fb      	ldrh	r3, [r7, #6]
    4456:	ea4f 1303 	mov.w	r3, r3, lsl #4
    445a:	b29a      	uxth	r2, r3
    445c:	893b      	ldrh	r3, [r7, #8]
    445e:	ea42 0303 	orr.w	r3, r2, r3
    4462:	b29a      	uxth	r2, r3
    4464:	8a7b      	ldrh	r3, [r7, #18]
    4466:	ea42 0303 	orr.w	r3, r2, r3
    446a:	827b      	strh	r3, [r7, #18]
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= CCER_CC3P_Reset;
    446c:	8abb      	ldrh	r3, [r7, #20]
    446e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4472:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC3E_Set);
    4474:	8afa      	ldrh	r2, [r7, #22]
    4476:	8abb      	ldrh	r3, [r7, #20]
    4478:	ea42 0303 	orr.w	r3, r2, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4482:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    4484:	68fa      	ldr	r2, [r7, #12]
    4486:	8a7b      	ldrh	r3, [r7, #18]
    4488:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer;
    448a:	68fa      	ldr	r2, [r7, #12]
    448c:	8abb      	ldrh	r3, [r7, #20]
    448e:	8413      	strh	r3, [r2, #32]
}
    4490:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	46c0      	nop			(mov r8, r8)

0000449c <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    449c:	b480      	push	{r7}
    449e:	b087      	sub	sp, #28
    44a0:	af00      	add	r7, sp, #0
    44a2:	60f8      	str	r0, [r7, #12]
    44a4:	4618      	mov	r0, r3
    44a6:	460b      	mov	r3, r1
    44a8:	817b      	strh	r3, [r7, #10]
    44aa:	4613      	mov	r3, r2
    44ac:	813b      	strh	r3, [r7, #8]
    44ae:	4603      	mov	r3, r0
    44b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    44b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    44b6:	827b      	strh	r3, [r7, #18]
    44b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    44bc:	82bb      	strh	r3, [r7, #20]
    44be:	f04f 0300 	mov.w	r3, #0	; 0x0
    44c2:	82fb      	strh	r3, [r7, #22]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= CCER_CC4E_Reset;
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	8c1b      	ldrh	r3, [r3, #32]
    44c8:	b29b      	uxth	r3, r3
    44ca:	603b      	str	r3, [r7, #0]
    44cc:	f64e 73ff 	movw	r3, #61439	; 0xefff
    44d0:	6839      	ldr	r1, [r7, #0]
    44d2:	ea01 0303 	and.w	r3, r1, r3
    44d6:	603b      	str	r3, [r7, #0]
    44d8:	68fa      	ldr	r2, [r7, #12]
    44da:	6839      	ldr	r1, [r7, #0]
    44dc:	460b      	mov	r3, r1
    44de:	8413      	strh	r3, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
    44e0:	68fb      	ldr	r3, [r7, #12]
    44e2:	8b9b      	ldrh	r3, [r3, #28]
    44e4:	827b      	strh	r3, [r7, #18]
  tmpccer = TIMx->CCER;
    44e6:	68fb      	ldr	r3, [r7, #12]
    44e8:	8c1b      	ldrh	r3, [r3, #32]
    44ea:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    44ec:	897b      	ldrh	r3, [r7, #10]
    44ee:	ea4f 3303 	mov.w	r3, r3, lsl #12
    44f2:	82fb      	strh	r3, [r7, #22]

  /* Select the Input and set the filter */
  tmpccmr2 &= CCMR_CC24S_Mask & CCMR_IC24F_Mask;
    44f4:	8a7b      	ldrh	r3, [r7, #18]
    44f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    44fa:	ea4f 5303 	mov.w	r3, r3, lsl #20
    44fe:	ea4f 5313 	mov.w	r3, r3, lsr #20
    4502:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    4504:	893b      	ldrh	r3, [r7, #8]
    4506:	ea4f 2303 	mov.w	r3, r3, lsl #8
    450a:	b29a      	uxth	r2, r3
    450c:	8a7b      	ldrh	r3, [r7, #18]
    450e:	ea42 0303 	orr.w	r3, r2, r3
    4512:	827b      	strh	r3, [r7, #18]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    4514:	88fb      	ldrh	r3, [r7, #6]
    4516:	ea4f 3303 	mov.w	r3, r3, lsl #12
    451a:	b29a      	uxth	r2, r3
    451c:	8a7b      	ldrh	r3, [r7, #18]
    451e:	ea42 0303 	orr.w	r3, r2, r3
    4522:	827b      	strh	r3, [r7, #18]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= CCER_CC4P_Reset;
    4524:	8abb      	ldrh	r3, [r7, #20]
    4526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    452a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)CCER_CC4E_Set);
    452c:	8afa      	ldrh	r2, [r7, #22]
    452e:	8abb      	ldrh	r3, [r7, #20]
    4530:	ea42 0303 	orr.w	r3, r2, r3
    4534:	b29b      	uxth	r3, r3
    4536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    453a:	82bb      	strh	r3, [r7, #20]
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    453c:	68fa      	ldr	r2, [r7, #12]
    453e:	8a7b      	ldrh	r3, [r7, #18]
    4540:	8393      	strh	r3, [r2, #28]
  TIMx->CCER = tmpccer ;
    4542:	68fa      	ldr	r2, [r7, #12]
    4544:	8abb      	ldrh	r3, [r7, #20]
    4546:	8413      	strh	r3, [r2, #32]
}
    4548:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    454c:	46bd      	mov	sp, r7
    454e:	bc80      	pop	{r7}
    4550:	4770      	bx	lr
    4552:	46c0      	nop			(mov r8, r8)

00004554 <USART_DeInit>:
  * @param  USARTx: Select the USART or the UART peripheral. 
  *   This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    4554:	b580      	push	{r7, lr}
    4556:	b082      	sub	sp, #8
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    455c:	687a      	ldr	r2, [r7, #4]
    455e:	4b2b      	ldr	r3, [pc, #172]	(460c <USART_DeInit+0xb8>)
    4560:	429a      	cmp	r2, r3
    4562:	d10c      	bne.n	457e <USART_DeInit+0x2a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    4564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4568:	f04f 0101 	mov.w	r1, #1	; 0x1
    456c:	f7fd ffd2 	bl	2514 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    4570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4574:	f04f 0100 	mov.w	r1, #0	; 0x0
    4578:	f7fd ffcc 	bl	2514 <RCC_APB2PeriphResetCmd>
    457c:	e042      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART2)
    457e:	687a      	ldr	r2, [r7, #4]
    4580:	4b23      	ldr	r3, [pc, #140]	(4610 <USART_DeInit+0xbc>)
    4582:	429a      	cmp	r2, r3
    4584:	d10c      	bne.n	45a0 <USART_DeInit+0x4c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    4586:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    458a:	f04f 0101 	mov.w	r1, #1	; 0x1
    458e:	f7fd ffe3 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    4592:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    4596:	f04f 0100 	mov.w	r1, #0	; 0x0
    459a:	f7fd ffdd 	bl	2558 <RCC_APB1PeriphResetCmd>
    459e:	e031      	b.n	4604 <USART_DeInit+0xb0>
  }
  else if (USARTx == USART3)
    45a0:	687a      	ldr	r2, [r7, #4]
    45a2:	4b1c      	ldr	r3, [pc, #112]	(4614 <USART_DeInit+0xc0>)
    45a4:	429a      	cmp	r2, r3
    45a6:	d10c      	bne.n	45c2 <USART_DeInit+0x6e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    45a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45ac:	f04f 0101 	mov.w	r1, #1	; 0x1
    45b0:	f7fd ffd2 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    45b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    45b8:	f04f 0100 	mov.w	r1, #0	; 0x0
    45bc:	f7fd ffcc 	bl	2558 <RCC_APB1PeriphResetCmd>
    45c0:	e020      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else if (USARTx == UART4)
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	4b14      	ldr	r3, [pc, #80]	(4618 <USART_DeInit+0xc4>)
    45c6:	429a      	cmp	r2, r3
    45c8:	d10c      	bne.n	45e4 <USART_DeInit+0x90>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    45ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    45d2:	f7fd ffc1 	bl	2558 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    45d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    45da:	f04f 0100 	mov.w	r1, #0	; 0x0
    45de:	f7fd ffbb 	bl	2558 <RCC_APB1PeriphResetCmd>
    45e2:	e00f      	b.n	4604 <USART_DeInit+0xb0>
  }    
  else
  {
    if (USARTx == UART5)
    45e4:	687a      	ldr	r2, [r7, #4]
    45e6:	4b0d      	ldr	r3, [pc, #52]	(461c <USART_DeInit+0xc8>)
    45e8:	429a      	cmp	r2, r3
    45ea:	d10b      	bne.n	4604 <USART_DeInit+0xb0>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    45ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45f0:	f04f 0101 	mov.w	r1, #1	; 0x1
    45f4:	f7fd ffb0 	bl	2558 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    45f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    45fc:	f04f 0100 	mov.w	r1, #0	; 0x0
    4600:	f7fd ffaa 	bl	2558 <RCC_APB1PeriphResetCmd>
    }
  }
}
    4604:	f107 0708 	add.w	r7, r7, #8	; 0x8
    4608:	46bd      	mov	sp, r7
    460a:	bd80      	pop	{r7, pc}
    460c:	40013800 	.word	0x40013800
    4610:	40004400 	.word	0x40004400
    4614:	40004800 	.word	0x40004800
    4618:	40004c00 	.word	0x40004c00
    461c:	40005000 	.word	0x40005000

00004620 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   that contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    4620:	b580      	push	{r7, lr}
    4622:	b08c      	sub	sp, #48
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    462a:	f04f 0300 	mov.w	r3, #0	; 0x0
    462e:	61fb      	str	r3, [r7, #28]
    4630:	f04f 0300 	mov.w	r3, #0	; 0x0
    4634:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
    4636:	f04f 0300 	mov.w	r3, #0	; 0x0
    463a:	627b      	str	r3, [r7, #36]
  uint32_t fractionaldivider = 0x00;
    463c:	f04f 0300 	mov.w	r3, #0	; 0x0
    4640:	62bb      	str	r3, [r7, #40]
  uint32_t usartxbase = 0;
    4642:	f04f 0300 	mov.w	r3, #0	; 0x0
    4646:	62fb      	str	r3, [r7, #44]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	62fb      	str	r3, [r7, #44]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    464c:	687b      	ldr	r3, [r7, #4]
    464e:	8a1b      	ldrh	r3, [r3, #16]
    4650:	b29b      	uxth	r3, r3
    4652:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    4654:	69fa      	ldr	r2, [r7, #28]
    4656:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    465a:	ea02 0303 	and.w	r3, r2, r3
    465e:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    4660:	683b      	ldr	r3, [r7, #0]
    4662:	88db      	ldrh	r3, [r3, #6]
    4664:	461a      	mov	r2, r3
    4666:	69fb      	ldr	r3, [r7, #28]
    4668:	ea43 0302 	orr.w	r3, r3, r2
    466c:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	b29b      	uxth	r3, r3
    4672:	687a      	ldr	r2, [r7, #4]
    4674:	8213      	strh	r3, [r2, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	899b      	ldrh	r3, [r3, #12]
    467a:	b29b      	uxth	r3, r3
    467c:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    467e:	69fa      	ldr	r2, [r7, #28]
    4680:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    4684:	ea02 0303 	and.w	r3, r2, r3
    4688:	61fb      	str	r3, [r7, #28]
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	889a      	ldrh	r2, [r3, #4]
    468e:	683b      	ldr	r3, [r7, #0]
    4690:	891b      	ldrh	r3, [r3, #8]
    4692:	ea42 0303 	orr.w	r3, r2, r3
    4696:	b29a      	uxth	r2, r3
    4698:	683b      	ldr	r3, [r7, #0]
    469a:	895b      	ldrh	r3, [r3, #10]
    469c:	ea42 0303 	orr.w	r3, r2, r3
    46a0:	b29b      	uxth	r3, r3
    46a2:	461a      	mov	r2, r3
    46a4:	69fb      	ldr	r3, [r7, #28]
    46a6:	ea43 0302 	orr.w	r3, r3, r2
    46aa:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    46ac:	69fb      	ldr	r3, [r7, #28]
    46ae:	b29b      	uxth	r3, r3
    46b0:	687a      	ldr	r2, [r7, #4]
    46b2:	8193      	strh	r3, [r2, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    46b4:	687b      	ldr	r3, [r7, #4]
    46b6:	8a9b      	ldrh	r3, [r3, #20]
    46b8:	b29b      	uxth	r3, r3
    46ba:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    46bc:	69fa      	ldr	r2, [r7, #28]
    46be:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    46c2:	ea02 0303 	and.w	r3, r2, r3
    46c6:	61fb      	str	r3, [r7, #28]
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    46c8:	683b      	ldr	r3, [r7, #0]
    46ca:	899b      	ldrh	r3, [r3, #12]
    46cc:	461a      	mov	r2, r3
    46ce:	69fb      	ldr	r3, [r7, #28]
    46d0:	ea43 0302 	orr.w	r3, r3, r2
    46d4:	61fb      	str	r3, [r7, #28]
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    46d6:	69fb      	ldr	r3, [r7, #28]
    46d8:	b29b      	uxth	r3, r3
    46da:	687a      	ldr	r2, [r7, #4]
    46dc:	8293      	strh	r3, [r2, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    46de:	f107 0308 	add.w	r3, r7, #8	; 0x8
    46e2:	4618      	mov	r0, r3
    46e4:	f7fd fd94 	bl	2210 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    46e8:	6afa      	ldr	r2, [r7, #44]
    46ea:	4b24      	ldr	r3, [pc, #144]	(477c <USART_Init+0x15c>)
    46ec:	429a      	cmp	r2, r3
    46ee:	d102      	bne.n	46f6 <USART_Init+0xd6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    46f0:	697b      	ldr	r3, [r7, #20]
    46f2:	623b      	str	r3, [r7, #32]
    46f4:	e001      	b.n	46fa <USART_Init+0xda>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    46f6:	693b      	ldr	r3, [r7, #16]
    46f8:	623b      	str	r3, [r7, #32]
  }
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    46fa:	6a39      	ldr	r1, [r7, #32]
    46fc:	460b      	mov	r3, r1
    46fe:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    4702:	ea4f 0382 	mov.w	r3, r2, lsl #2
    4706:	ebc2 0303 	rsb	r3, r2, r3
    470a:	eb03 0201 	add.w	r2, r3, r1
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	681b      	ldr	r3, [r3, #0]
    4712:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4716:	fbb2 f3f3 	udiv	r3, r2, r3
    471a:	627b      	str	r3, [r7, #36]
  tmpreg = (integerdivider / 0x64) << 0x04;
    471c:	6a7a      	ldr	r2, [r7, #36]
    471e:	4b18      	ldr	r3, [pc, #96]	(4780 <USART_Init+0x160>)
    4720:	fba3 1302 	umull	r1, r3, r3, r2
    4724:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4728:	ea4f 1303 	mov.w	r3, r3, lsl #4
    472c:	61fb      	str	r3, [r7, #28]
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    472e:	69fb      	ldr	r3, [r7, #28]
    4730:	ea4f 1313 	mov.w	r3, r3, lsr #4
    4734:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4738:	ea4f 0283 	mov.w	r2, r3, lsl #2
    473c:	4413      	add	r3, r2
    473e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    4742:	441a      	add	r2, r3
    4744:	6a7b      	ldr	r3, [r7, #36]
    4746:	ebc2 0303 	rsb	r3, r2, r3
    474a:	62bb      	str	r3, [r7, #40]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
    474c:	6abb      	ldr	r3, [r7, #40]
    474e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4752:	f103 0232 	add.w	r2, r3, #50	; 0x32
    4756:	4b0a      	ldr	r3, [pc, #40]	(4780 <USART_Init+0x160>)
    4758:	fba3 1302 	umull	r1, r3, r3, r2
    475c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4760:	f003 020f 	and.w	r2, r3, #15	; 0xf
    4764:	69fb      	ldr	r3, [r7, #28]
    4766:	ea43 0302 	orr.w	r3, r3, r2
    476a:	61fb      	str	r3, [r7, #28]
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    476c:	69fb      	ldr	r3, [r7, #28]
    476e:	b29b      	uxth	r3, r3
    4770:	687a      	ldr	r2, [r7, #4]
    4772:	8113      	strh	r3, [r2, #8]
}
    4774:	f107 0730 	add.w	r7, r7, #48	; 0x30
    4778:	46bd      	mov	sp, r7
    477a:	bd80      	pop	{r7, pc}
    477c:	40013800 	.word	0x40013800
    4780:	51eb851f 	.word	0x51eb851f

00004784 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *   which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    4784:	b480      	push	{r7}
    4786:	b083      	sub	sp, #12
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    478c:	687a      	ldr	r2, [r7, #4]
    478e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4792:	6013      	str	r3, [r2, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    4794:	687a      	ldr	r2, [r7, #4]
    4796:	f04f 0300 	mov.w	r3, #0	; 0x0
    479a:	8093      	strh	r3, [r2, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    479c:	687a      	ldr	r2, [r7, #4]
    479e:	f04f 0300 	mov.w	r3, #0	; 0x0
    47a2:	80d3      	strh	r3, [r2, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    47a4:	687a      	ldr	r2, [r7, #4]
    47a6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47aa:	8113      	strh	r3, [r2, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    47ac:	687a      	ldr	r2, [r7, #4]
    47ae:	f04f 030c 	mov.w	r3, #12	; 0xc
    47b2:	8153      	strh	r3, [r2, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    47b4:	687a      	ldr	r2, [r7, #4]
    47b6:	f04f 0300 	mov.w	r3, #0	; 0x0
    47ba:	8193      	strh	r3, [r2, #12]
}
    47bc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    47c0:	46bd      	mov	sp, r7
    47c2:	bc80      	pop	{r7}
    47c4:	4770      	bx	lr
    47c6:	46c0      	nop			(mov r8, r8)

000047c8 <USART_ClockInit>:
  *   USART peripheral.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    47c8:	b480      	push	{r7}
    47ca:	b085      	sub	sp, #20
    47cc:	af00      	add	r7, sp, #0
    47ce:	6078      	str	r0, [r7, #4]
    47d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    47d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    47d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	8a1b      	ldrh	r3, [r3, #16]
    47dc:	b29b      	uxth	r3, r3
    47de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    47e0:	68fa      	ldr	r2, [r7, #12]
    47e2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    47e6:	ea02 0303 	and.w	r3, r2, r3
    47ea:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	881a      	ldrh	r2, [r3, #0]
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	885b      	ldrh	r3, [r3, #2]
    47f4:	ea42 0303 	orr.w	r3, r2, r3
    47f8:	b29a      	uxth	r2, r3
    47fa:	683b      	ldr	r3, [r7, #0]
    47fc:	889b      	ldrh	r3, [r3, #4]
    47fe:	ea42 0303 	orr.w	r3, r2, r3
    4802:	b29a      	uxth	r2, r3
    4804:	683b      	ldr	r3, [r7, #0]
    4806:	88db      	ldrh	r3, [r3, #6]
    4808:	ea42 0303 	orr.w	r3, r2, r3
    480c:	b29b      	uxth	r3, r3
    480e:	461a      	mov	r2, r3
    4810:	68fb      	ldr	r3, [r7, #12]
    4812:	ea43 0302 	orr.w	r3, r3, r2
    4816:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    4818:	68fb      	ldr	r3, [r7, #12]
    481a:	b29b      	uxth	r3, r3
    481c:	687a      	ldr	r2, [r7, #4]
    481e:	8213      	strh	r3, [r2, #16]
}
    4820:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4824:	46bd      	mov	sp, r7
    4826:	bc80      	pop	{r7}
    4828:	4770      	bx	lr
    482a:	46c0      	nop			(mov r8, r8)

0000482c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *   structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    482c:	b480      	push	{r7}
    482e:	b083      	sub	sp, #12
    4830:	af00      	add	r7, sp, #0
    4832:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    4834:	687a      	ldr	r2, [r7, #4]
    4836:	f04f 0300 	mov.w	r3, #0	; 0x0
    483a:	8013      	strh	r3, [r2, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    483c:	687a      	ldr	r2, [r7, #4]
    483e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4842:	8053      	strh	r3, [r2, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    4844:	687a      	ldr	r2, [r7, #4]
    4846:	f04f 0300 	mov.w	r3, #0	; 0x0
    484a:	8093      	strh	r3, [r2, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    484c:	687a      	ldr	r2, [r7, #4]
    484e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4852:	80d3      	strh	r3, [r2, #6]
}
    4854:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4858:	46bd      	mov	sp, r7
    485a:	bc80      	pop	{r7}
    485c:	4770      	bx	lr
    485e:	46c0      	nop			(mov r8, r8)

00004860 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4860:	b480      	push	{r7}
    4862:	b085      	sub	sp, #20
    4864:	af00      	add	r7, sp, #0
    4866:	60f8      	str	r0, [r7, #12]
    4868:	460b      	mov	r3, r1
    486a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    486c:	7afb      	ldrb	r3, [r7, #11]
    486e:	2b00      	cmp	r3, #0
    4870:	d008      	beq.n	4884 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    4872:	68fb      	ldr	r3, [r7, #12]
    4874:	899b      	ldrh	r3, [r3, #12]
    4876:	b29b      	uxth	r3, r3
    4878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    487c:	b29b      	uxth	r3, r3
    487e:	68fa      	ldr	r2, [r7, #12]
    4880:	8193      	strh	r3, [r2, #12]
    4882:	e00d      	b.n	48a0 <USART_Cmd+0x40>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	899b      	ldrh	r3, [r3, #12]
    4888:	b29b      	uxth	r3, r3
    488a:	607b      	str	r3, [r7, #4]
    488c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    4890:	6879      	ldr	r1, [r7, #4]
    4892:	ea01 0303 	and.w	r3, r1, r3
    4896:	607b      	str	r3, [r7, #4]
    4898:	68fa      	ldr	r2, [r7, #12]
    489a:	6879      	ldr	r1, [r7, #4]
    489c:	460b      	mov	r3, r1
    489e:	8193      	strh	r3, [r2, #12]
  }
}
    48a0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    48a4:	46bd      	mov	sp, r7
    48a6:	bc80      	pop	{r7}
    48a8:	4770      	bx	lr
    48aa:	46c0      	nop			(mov r8, r8)

000048ac <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    48ac:	b480      	push	{r7}
    48ae:	b087      	sub	sp, #28
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
    48b4:	460b      	mov	r3, r1
    48b6:	807b      	strh	r3, [r7, #2]
    48b8:	4613      	mov	r3, r2
    48ba:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    48bc:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c0:	60bb      	str	r3, [r7, #8]
    48c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    48c6:	60fb      	str	r3, [r7, #12]
    48c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    48cc:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0x00;
    48ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    48d2:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    48d4:	687b      	ldr	r3, [r7, #4]
    48d6:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    48d8:	887b      	ldrh	r3, [r7, #2]
    48da:	b2db      	uxtb	r3, r3
    48dc:	ea4f 1353 	mov.w	r3, r3, lsr #5
    48e0:	b2db      	uxtb	r3, r3
    48e2:	60bb      	str	r3, [r7, #8]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    48e4:	887b      	ldrh	r3, [r7, #2]
    48e6:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    48ea:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    48ec:	68fa      	ldr	r2, [r7, #12]
    48ee:	f04f 0301 	mov.w	r3, #1	; 0x1
    48f2:	fa03 f302 	lsl.w	r3, r3, r2
    48f6:	613b      	str	r3, [r7, #16]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    48f8:	68bb      	ldr	r3, [r7, #8]
    48fa:	2b01      	cmp	r3, #1
    48fc:	d104      	bne.n	4908 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    48fe:	697b      	ldr	r3, [r7, #20]
    4900:	f103 030c 	add.w	r3, r3, #12	; 0xc
    4904:	617b      	str	r3, [r7, #20]
    4906:	e00b      	b.n	4920 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    4908:	68bb      	ldr	r3, [r7, #8]
    490a:	2b02      	cmp	r3, #2
    490c:	d104      	bne.n	4918 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    490e:	697b      	ldr	r3, [r7, #20]
    4910:	f103 0310 	add.w	r3, r3, #16	; 0x10
    4914:	617b      	str	r3, [r7, #20]
    4916:	e003      	b.n	4920 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    4918:	697b      	ldr	r3, [r7, #20]
    491a:	f103 0314 	add.w	r3, r3, #20	; 0x14
    491e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    4920:	787b      	ldrb	r3, [r7, #1]
    4922:	2b00      	cmp	r3, #0
    4924:	d007      	beq.n	4936 <USART_ITConfig+0x8a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    4926:	6979      	ldr	r1, [r7, #20]
    4928:	697b      	ldr	r3, [r7, #20]
    492a:	681a      	ldr	r2, [r3, #0]
    492c:	693b      	ldr	r3, [r7, #16]
    492e:	ea42 0303 	orr.w	r3, r2, r3
    4932:	600b      	str	r3, [r1, #0]
    4934:	e008      	b.n	4948 <USART_ITConfig+0x9c>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    4936:	6979      	ldr	r1, [r7, #20]
    4938:	697b      	ldr	r3, [r7, #20]
    493a:	681a      	ldr	r2, [r3, #0]
    493c:	693b      	ldr	r3, [r7, #16]
    493e:	ea6f 0303 	mvn.w	r3, r3
    4942:	ea02 0303 	and.w	r3, r2, r3
    4946:	600b      	str	r3, [r1, #0]
  }
}
    4948:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    494c:	46bd      	mov	sp, r7
    494e:	bc80      	pop	{r7}
    4950:	4770      	bx	lr
    4952:	46c0      	nop			(mov r8, r8)

00004954 <USART_DMACmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @note The DMA mode is not available for UART5.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    4954:	b480      	push	{r7}
    4956:	b083      	sub	sp, #12
    4958:	af00      	add	r7, sp, #0
    495a:	6078      	str	r0, [r7, #4]
    495c:	460b      	mov	r3, r1
    495e:	807b      	strh	r3, [r7, #2]
    4960:	4613      	mov	r3, r2
    4962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    4964:	787b      	ldrb	r3, [r7, #1]
    4966:	2b00      	cmp	r3, #0
    4968:	d009      	beq.n	497e <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	8a9b      	ldrh	r3, [r3, #20]
    496e:	b29a      	uxth	r2, r3
    4970:	887b      	ldrh	r3, [r7, #2]
    4972:	ea42 0303 	orr.w	r3, r2, r3
    4976:	b29b      	uxth	r3, r3
    4978:	687a      	ldr	r2, [r7, #4]
    497a:	8293      	strh	r3, [r2, #20]
    497c:	e00b      	b.n	4996 <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    497e:	687b      	ldr	r3, [r7, #4]
    4980:	8a9b      	ldrh	r3, [r3, #20]
    4982:	b29a      	uxth	r2, r3
    4984:	887b      	ldrh	r3, [r7, #2]
    4986:	ea6f 0303 	mvn.w	r3, r3
    498a:	b29b      	uxth	r3, r3
    498c:	ea02 0303 	and.w	r3, r2, r3
    4990:	b29b      	uxth	r3, r3
    4992:	687a      	ldr	r2, [r7, #4]
    4994:	8293      	strh	r3, [r2, #20]
  }
}
    4996:	f107 070c 	add.w	r7, r7, #12	; 0xc
    499a:	46bd      	mov	sp, r7
    499c:	bc80      	pop	{r7}
    499e:	4770      	bx	lr

000049a0 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    49a0:	b480      	push	{r7}
    49a2:	b085      	sub	sp, #20
    49a4:	af00      	add	r7, sp, #0
    49a6:	60f8      	str	r0, [r7, #12]
    49a8:	460b      	mov	r3, r1
    49aa:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    49ac:	68fb      	ldr	r3, [r7, #12]
    49ae:	8a1b      	ldrh	r3, [r3, #16]
    49b0:	b29b      	uxth	r3, r3
    49b2:	607b      	str	r3, [r7, #4]
    49b4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    49b8:	6879      	ldr	r1, [r7, #4]
    49ba:	ea01 0303 	and.w	r3, r1, r3
    49be:	607b      	str	r3, [r7, #4]
    49c0:	68fa      	ldr	r2, [r7, #12]
    49c2:	6879      	ldr	r1, [r7, #4]
    49c4:	460b      	mov	r3, r1
    49c6:	8213      	strh	r3, [r2, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    49c8:	68fb      	ldr	r3, [r7, #12]
    49ca:	8a1b      	ldrh	r3, [r3, #16]
    49cc:	b29a      	uxth	r2, r3
    49ce:	7afb      	ldrb	r3, [r7, #11]
    49d0:	ea42 0303 	orr.w	r3, r2, r3
    49d4:	b29b      	uxth	r3, r3
    49d6:	68fa      	ldr	r2, [r7, #12]
    49d8:	8213      	strh	r3, [r2, #16]
}
    49da:	f107 0714 	add.w	r7, r7, #20	; 0x14
    49de:	46bd      	mov	sp, r7
    49e0:	bc80      	pop	{r7}
    49e2:	4770      	bx	lr

000049e4 <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    49e4:	b480      	push	{r7}
    49e6:	b085      	sub	sp, #20
    49e8:	af00      	add	r7, sp, #0
    49ea:	60f8      	str	r0, [r7, #12]
    49ec:	460b      	mov	r3, r1
    49ee:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    49f0:	68fb      	ldr	r3, [r7, #12]
    49f2:	899b      	ldrh	r3, [r3, #12]
    49f4:	b29b      	uxth	r3, r3
    49f6:	607b      	str	r3, [r7, #4]
    49f8:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    49fc:	6879      	ldr	r1, [r7, #4]
    49fe:	ea01 0303 	and.w	r3, r1, r3
    4a02:	607b      	str	r3, [r7, #4]
    4a04:	68fa      	ldr	r2, [r7, #12]
    4a06:	6879      	ldr	r1, [r7, #4]
    4a08:	460b      	mov	r3, r1
    4a0a:	8193      	strh	r3, [r2, #12]
  USARTx->CR1 |= USART_WakeUp;
    4a0c:	68fb      	ldr	r3, [r7, #12]
    4a0e:	899b      	ldrh	r3, [r3, #12]
    4a10:	b29a      	uxth	r2, r3
    4a12:	897b      	ldrh	r3, [r7, #10]
    4a14:	ea42 0303 	orr.w	r3, r2, r3
    4a18:	b29b      	uxth	r3, r3
    4a1a:	68fa      	ldr	r2, [r7, #12]
    4a1c:	8193      	strh	r3, [r2, #12]
}
    4a1e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a22:	46bd      	mov	sp, r7
    4a24:	bc80      	pop	{r7}
    4a26:	4770      	bx	lr

00004a28 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4a28:	b480      	push	{r7}
    4a2a:	b085      	sub	sp, #20
    4a2c:	af00      	add	r7, sp, #0
    4a2e:	60f8      	str	r0, [r7, #12]
    4a30:	460b      	mov	r3, r1
    4a32:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    4a34:	7afb      	ldrb	r3, [r7, #11]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d008      	beq.n	4a4c <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    4a3a:	68fb      	ldr	r3, [r7, #12]
    4a3c:	899b      	ldrh	r3, [r3, #12]
    4a3e:	b29b      	uxth	r3, r3
    4a40:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4a44:	b29b      	uxth	r3, r3
    4a46:	68fa      	ldr	r2, [r7, #12]
    4a48:	8193      	strh	r3, [r2, #12]
    4a4a:	e00d      	b.n	4a68 <USART_ReceiverWakeUpCmd+0x40>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	899b      	ldrh	r3, [r3, #12]
    4a50:	b29b      	uxth	r3, r3
    4a52:	607b      	str	r3, [r7, #4]
    4a54:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4a58:	6879      	ldr	r1, [r7, #4]
    4a5a:	ea01 0303 	and.w	r3, r1, r3
    4a5e:	607b      	str	r3, [r7, #4]
    4a60:	68fa      	ldr	r2, [r7, #12]
    4a62:	6879      	ldr	r1, [r7, #4]
    4a64:	460b      	mov	r3, r1
    4a66:	8193      	strh	r3, [r2, #12]
  }
}
    4a68:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bc80      	pop	{r7}
    4a70:	4770      	bx	lr
    4a72:	46c0      	nop			(mov r8, r8)

00004a74 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    4a74:	b480      	push	{r7}
    4a76:	b085      	sub	sp, #20
    4a78:	af00      	add	r7, sp, #0
    4a7a:	60f8      	str	r0, [r7, #12]
    4a7c:	460b      	mov	r3, r1
    4a7e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    4a80:	68fb      	ldr	r3, [r7, #12]
    4a82:	8a1b      	ldrh	r3, [r3, #16]
    4a84:	b29b      	uxth	r3, r3
    4a86:	607b      	str	r3, [r7, #4]
    4a88:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4a8c:	6879      	ldr	r1, [r7, #4]
    4a8e:	ea01 0303 	and.w	r3, r1, r3
    4a92:	607b      	str	r3, [r7, #4]
    4a94:	68fa      	ldr	r2, [r7, #12]
    4a96:	6879      	ldr	r1, [r7, #4]
    4a98:	460b      	mov	r3, r1
    4a9a:	8213      	strh	r3, [r2, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    4a9c:	68fb      	ldr	r3, [r7, #12]
    4a9e:	8a1b      	ldrh	r3, [r3, #16]
    4aa0:	b29a      	uxth	r2, r3
    4aa2:	897b      	ldrh	r3, [r7, #10]
    4aa4:	ea42 0303 	orr.w	r3, r2, r3
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	68fa      	ldr	r2, [r7, #12]
    4aac:	8213      	strh	r3, [r2, #16]
}
    4aae:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ab2:	46bd      	mov	sp, r7
    4ab4:	bc80      	pop	{r7}
    4ab6:	4770      	bx	lr

00004ab8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4ab8:	b480      	push	{r7}
    4aba:	b085      	sub	sp, #20
    4abc:	af00      	add	r7, sp, #0
    4abe:	60f8      	str	r0, [r7, #12]
    4ac0:	460b      	mov	r3, r1
    4ac2:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4ac4:	7afb      	ldrb	r3, [r7, #11]
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d008      	beq.n	4adc <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    4aca:	68fb      	ldr	r3, [r7, #12]
    4acc:	8a1b      	ldrh	r3, [r3, #16]
    4ace:	b29b      	uxth	r3, r3
    4ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	68fa      	ldr	r2, [r7, #12]
    4ad8:	8213      	strh	r3, [r2, #16]
    4ada:	e00d      	b.n	4af8 <USART_LINCmd+0x40>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	8a1b      	ldrh	r3, [r3, #16]
    4ae0:	b29b      	uxth	r3, r3
    4ae2:	607b      	str	r3, [r7, #4]
    4ae4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    4ae8:	6879      	ldr	r1, [r7, #4]
    4aea:	ea01 0303 	and.w	r3, r1, r3
    4aee:	607b      	str	r3, [r7, #4]
    4af0:	68fa      	ldr	r2, [r7, #12]
    4af2:	6879      	ldr	r1, [r7, #4]
    4af4:	460b      	mov	r3, r1
    4af6:	8213      	strh	r3, [r2, #16]
  }
}
    4af8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4afc:	46bd      	mov	sp, r7
    4afe:	bc80      	pop	{r7}
    4b00:	4770      	bx	lr
    4b02:	46c0      	nop			(mov r8, r8)

00004b04 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    4b04:	b480      	push	{r7}
    4b06:	b085      	sub	sp, #20
    4b08:	af00      	add	r7, sp, #0
    4b0a:	60f8      	str	r0, [r7, #12]
    4b0c:	460b      	mov	r3, r1
    4b0e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    4b10:	8979      	ldrh	r1, [r7, #10]
    4b12:	6079      	str	r1, [r7, #4]
    4b14:	687a      	ldr	r2, [r7, #4]
    4b16:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b1a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b1e:	607b      	str	r3, [r7, #4]
    4b20:	68fa      	ldr	r2, [r7, #12]
    4b22:	6879      	ldr	r1, [r7, #4]
    4b24:	460b      	mov	r3, r1
    4b26:	8093      	strh	r3, [r2, #4]
}
    4b28:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bc80      	pop	{r7}
    4b30:	4770      	bx	lr
    4b32:	46c0      	nop			(mov r8, r8)

00004b34 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    4b34:	b480      	push	{r7}
    4b36:	b083      	sub	sp, #12
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    4b3c:	687b      	ldr	r3, [r7, #4]
    4b3e:	889b      	ldrh	r3, [r3, #4]
    4b40:	b29b      	uxth	r3, r3
    4b42:	603b      	str	r3, [r7, #0]
    4b44:	683a      	ldr	r2, [r7, #0]
    4b46:	ea4f 53c2 	mov.w	r3, r2, lsl #23
    4b4a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    4b4e:	603b      	str	r3, [r7, #0]
    4b50:	683b      	ldr	r3, [r7, #0]
}
    4b52:	4618      	mov	r0, r3
    4b54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b58:	46bd      	mov	sp, r7
    4b5a:	bc80      	pop	{r7}
    4b5c:	4770      	bx	lr
    4b5e:	46c0      	nop			(mov r8, r8)

00004b60 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    4b60:	b480      	push	{r7}
    4b62:	b083      	sub	sp, #12
    4b64:	af00      	add	r7, sp, #0
    4b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    4b68:	687b      	ldr	r3, [r7, #4]
    4b6a:	899b      	ldrh	r3, [r3, #12]
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
    4b72:	b29b      	uxth	r3, r3
    4b74:	687a      	ldr	r2, [r7, #4]
    4b76:	8193      	strh	r3, [r2, #12]
}
    4b78:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4b7c:	46bd      	mov	sp, r7
    4b7e:	bc80      	pop	{r7}
    4b80:	4770      	bx	lr
    4b82:	46c0      	nop			(mov r8, r8)

00004b84 <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    4b84:	b480      	push	{r7}
    4b86:	b083      	sub	sp, #12
    4b88:	af00      	add	r7, sp, #0
    4b8a:	6078      	str	r0, [r7, #4]
    4b8c:	460b      	mov	r3, r1
    4b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    4b90:	687b      	ldr	r3, [r7, #4]
    4b92:	8b1b      	ldrh	r3, [r3, #24]
    4b94:	b29b      	uxth	r3, r3
    4b96:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4b9a:	687a      	ldr	r2, [r7, #4]
    4b9c:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	8b1b      	ldrh	r3, [r3, #24]
    4ba2:	b29a      	uxth	r2, r3
    4ba4:	78fb      	ldrb	r3, [r7, #3]
    4ba6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4baa:	b29b      	uxth	r3, r3
    4bac:	ea42 0303 	orr.w	r3, r2, r3
    4bb0:	b29b      	uxth	r3, r3
    4bb2:	687a      	ldr	r2, [r7, #4]
    4bb4:	8313      	strh	r3, [r2, #24]
}
    4bb6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bba:	46bd      	mov	sp, r7
    4bbc:	bc80      	pop	{r7}
    4bbe:	4770      	bx	lr

00004bc0 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    4bc0:	b480      	push	{r7}
    4bc2:	b083      	sub	sp, #12
    4bc4:	af00      	add	r7, sp, #0
    4bc6:	6078      	str	r0, [r7, #4]
    4bc8:	460b      	mov	r3, r1
    4bca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	8b1b      	ldrh	r3, [r3, #24]
    4bd0:	b29b      	uxth	r3, r3
    4bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4bd6:	687a      	ldr	r2, [r7, #4]
    4bd8:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	8b1b      	ldrh	r3, [r3, #24]
    4bde:	b29a      	uxth	r2, r3
    4be0:	78fb      	ldrb	r3, [r7, #3]
    4be2:	ea42 0303 	orr.w	r3, r2, r3
    4be6:	b29b      	uxth	r3, r3
    4be8:	687a      	ldr	r2, [r7, #4]
    4bea:	8313      	strh	r3, [r2, #24]
}
    4bec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4bf0:	46bd      	mov	sp, r7
    4bf2:	bc80      	pop	{r7}
    4bf4:	4770      	bx	lr
    4bf6:	46c0      	nop			(mov r8, r8)

00004bf8 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4bf8:	b480      	push	{r7}
    4bfa:	b085      	sub	sp, #20
    4bfc:	af00      	add	r7, sp, #0
    4bfe:	60f8      	str	r0, [r7, #12]
    4c00:	460b      	mov	r3, r1
    4c02:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c04:	7afb      	ldrb	r3, [r7, #11]
    4c06:	2b00      	cmp	r3, #0
    4c08:	d008      	beq.n	4c1c <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    4c0a:	68fb      	ldr	r3, [r7, #12]
    4c0c:	8a9b      	ldrh	r3, [r3, #20]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	f043 0320 	orr.w	r3, r3, #32	; 0x20
    4c14:	b29b      	uxth	r3, r3
    4c16:	68fa      	ldr	r2, [r7, #12]
    4c18:	8293      	strh	r3, [r2, #20]
    4c1a:	e00d      	b.n	4c38 <USART_SmartCardCmd+0x40>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    4c1c:	68fb      	ldr	r3, [r7, #12]
    4c1e:	8a9b      	ldrh	r3, [r3, #20]
    4c20:	b29b      	uxth	r3, r3
    4c22:	607b      	str	r3, [r7, #4]
    4c24:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4c28:	6879      	ldr	r1, [r7, #4]
    4c2a:	ea01 0303 	and.w	r3, r1, r3
    4c2e:	607b      	str	r3, [r7, #4]
    4c30:	68fa      	ldr	r2, [r7, #12]
    4c32:	6879      	ldr	r1, [r7, #4]
    4c34:	460b      	mov	r3, r1
    4c36:	8293      	strh	r3, [r2, #20]
  }
}
    4c38:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c3c:	46bd      	mov	sp, r7
    4c3e:	bc80      	pop	{r7}
    4c40:	4770      	bx	lr
    4c42:	46c0      	nop			(mov r8, r8)

00004c44 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c44:	b480      	push	{r7}
    4c46:	b085      	sub	sp, #20
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	460b      	mov	r3, r1
    4c4e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4c50:	7afb      	ldrb	r3, [r7, #11]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d008      	beq.n	4c68 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    4c56:	68fb      	ldr	r3, [r7, #12]
    4c58:	8a9b      	ldrh	r3, [r3, #20]
    4c5a:	b29b      	uxth	r3, r3
    4c5c:	f043 0310 	orr.w	r3, r3, #16	; 0x10
    4c60:	b29b      	uxth	r3, r3
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	8293      	strh	r3, [r2, #20]
    4c66:	e00d      	b.n	4c84 <USART_SmartCardNACKCmd+0x40>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    4c68:	68fb      	ldr	r3, [r7, #12]
    4c6a:	8a9b      	ldrh	r3, [r3, #20]
    4c6c:	b29b      	uxth	r3, r3
    4c6e:	607b      	str	r3, [r7, #4]
    4c70:	f64f 73ef 	movw	r3, #65519	; 0xffef
    4c74:	6879      	ldr	r1, [r7, #4]
    4c76:	ea01 0303 	and.w	r3, r1, r3
    4c7a:	607b      	str	r3, [r7, #4]
    4c7c:	68fa      	ldr	r2, [r7, #12]
    4c7e:	6879      	ldr	r1, [r7, #4]
    4c80:	460b      	mov	r3, r1
    4c82:	8293      	strh	r3, [r2, #20]
  }
}
    4c84:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4c88:	46bd      	mov	sp, r7
    4c8a:	bc80      	pop	{r7}
    4c8c:	4770      	bx	lr
    4c8e:	46c0      	nop			(mov r8, r8)

00004c90 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4c90:	b480      	push	{r7}
    4c92:	b085      	sub	sp, #20
    4c94:	af00      	add	r7, sp, #0
    4c96:	60f8      	str	r0, [r7, #12]
    4c98:	460b      	mov	r3, r1
    4c9a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4c9c:	7afb      	ldrb	r3, [r7, #11]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d008      	beq.n	4cb4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	8a9b      	ldrh	r3, [r3, #20]
    4ca6:	b29b      	uxth	r3, r3
    4ca8:	f043 0308 	orr.w	r3, r3, #8	; 0x8
    4cac:	b29b      	uxth	r3, r3
    4cae:	68fa      	ldr	r2, [r7, #12]
    4cb0:	8293      	strh	r3, [r2, #20]
    4cb2:	e00d      	b.n	4cd0 <USART_HalfDuplexCmd+0x40>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    4cb4:	68fb      	ldr	r3, [r7, #12]
    4cb6:	8a9b      	ldrh	r3, [r3, #20]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	607b      	str	r3, [r7, #4]
    4cbc:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    4cc0:	6879      	ldr	r1, [r7, #4]
    4cc2:	ea01 0303 	and.w	r3, r1, r3
    4cc6:	607b      	str	r3, [r7, #4]
    4cc8:	68fa      	ldr	r2, [r7, #12]
    4cca:	6879      	ldr	r1, [r7, #4]
    4ccc:	460b      	mov	r3, r1
    4cce:	8293      	strh	r3, [r2, #20]
  }
}
    4cd0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4cd4:	46bd      	mov	sp, r7
    4cd6:	bc80      	pop	{r7}
    4cd8:	4770      	bx	lr
    4cda:	46c0      	nop			(mov r8, r8)

00004cdc <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    4cdc:	b480      	push	{r7}
    4cde:	b085      	sub	sp, #20
    4ce0:	af00      	add	r7, sp, #0
    4ce2:	60f8      	str	r0, [r7, #12]
    4ce4:	460b      	mov	r3, r1
    4ce6:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    4ce8:	68fb      	ldr	r3, [r7, #12]
    4cea:	8a9b      	ldrh	r3, [r3, #20]
    4cec:	b29b      	uxth	r3, r3
    4cee:	607b      	str	r3, [r7, #4]
    4cf0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    4cf4:	6879      	ldr	r1, [r7, #4]
    4cf6:	ea01 0303 	and.w	r3, r1, r3
    4cfa:	607b      	str	r3, [r7, #4]
    4cfc:	68fa      	ldr	r2, [r7, #12]
    4cfe:	6879      	ldr	r1, [r7, #4]
    4d00:	460b      	mov	r3, r1
    4d02:	8293      	strh	r3, [r2, #20]
  USARTx->CR3 |= USART_IrDAMode;
    4d04:	68fb      	ldr	r3, [r7, #12]
    4d06:	8a9b      	ldrh	r3, [r3, #20]
    4d08:	b29a      	uxth	r2, r3
    4d0a:	897b      	ldrh	r3, [r7, #10]
    4d0c:	ea42 0303 	orr.w	r3, r2, r3
    4d10:	b29b      	uxth	r3, r3
    4d12:	68fa      	ldr	r2, [r7, #12]
    4d14:	8293      	strh	r3, [r2, #20]
}
    4d16:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d1a:	46bd      	mov	sp, r7
    4d1c:	bc80      	pop	{r7}
    4d1e:	4770      	bx	lr

00004d20 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4d20:	b480      	push	{r7}
    4d22:	b085      	sub	sp, #20
    4d24:	af00      	add	r7, sp, #0
    4d26:	60f8      	str	r0, [r7, #12]
    4d28:	460b      	mov	r3, r1
    4d2a:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    4d2c:	7afb      	ldrb	r3, [r7, #11]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d008      	beq.n	4d44 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    4d32:	68fb      	ldr	r3, [r7, #12]
    4d34:	8a9b      	ldrh	r3, [r3, #20]
    4d36:	b29b      	uxth	r3, r3
    4d38:	f043 0302 	orr.w	r3, r3, #2	; 0x2
    4d3c:	b29b      	uxth	r3, r3
    4d3e:	68fa      	ldr	r2, [r7, #12]
    4d40:	8293      	strh	r3, [r2, #20]
    4d42:	e00d      	b.n	4d60 <USART_IrDACmd+0x40>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	8a9b      	ldrh	r3, [r3, #20]
    4d48:	b29b      	uxth	r3, r3
    4d4a:	607b      	str	r3, [r7, #4]
    4d4c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4d50:	6879      	ldr	r1, [r7, #4]
    4d52:	ea01 0303 	and.w	r3, r1, r3
    4d56:	607b      	str	r3, [r7, #4]
    4d58:	68fa      	ldr	r2, [r7, #12]
    4d5a:	6879      	ldr	r1, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	8293      	strh	r3, [r2, #20]
  }
}
    4d60:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4d64:	46bd      	mov	sp, r7
    4d66:	bc80      	pop	{r7}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			(mov r8, r8)

00004d6c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4d6c:	b480      	push	{r7}
    4d6e:	b085      	sub	sp, #20
    4d70:	af00      	add	r7, sp, #0
    4d72:	6078      	str	r0, [r7, #4]
    4d74:	460b      	mov	r3, r1
    4d76:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    4d78:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d7c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    4d7e:	687b      	ldr	r3, [r7, #4]
    4d80:	881b      	ldrh	r3, [r3, #0]
    4d82:	b29a      	uxth	r2, r3
    4d84:	887b      	ldrh	r3, [r7, #2]
    4d86:	ea02 0303 	and.w	r3, r2, r3
    4d8a:	b29b      	uxth	r3, r3
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	d003      	beq.n	4d98 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    4d90:	f04f 0301 	mov.w	r3, #1	; 0x1
    4d94:	73fb      	strb	r3, [r7, #15]
    4d96:	e002      	b.n	4d9e <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    4d98:	f04f 0300 	mov.w	r3, #0	; 0x0
    4d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d9e:	7bfb      	ldrb	r3, [r7, #15]
}
    4da0:	4618      	mov	r0, r3
    4da2:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4da6:	46bd      	mov	sp, r7
    4da8:	bc80      	pop	{r7}
    4daa:	4770      	bx	lr

00004dac <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    4dac:	b480      	push	{r7}
    4dae:	b083      	sub	sp, #12
    4db0:	af00      	add	r7, sp, #0
    4db2:	6078      	str	r0, [r7, #4]
    4db4:	460b      	mov	r3, r1
    4db6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    4db8:	887b      	ldrh	r3, [r7, #2]
    4dba:	ea6f 0303 	mvn.w	r3, r3
    4dbe:	b29b      	uxth	r3, r3
    4dc0:	687a      	ldr	r2, [r7, #4]
    4dc2:	8013      	strh	r3, [r2, #0]
}
    4dc4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4dc8:	46bd      	mov	sp, r7
    4dca:	bc80      	pop	{r7}
    4dcc:	4770      	bx	lr
    4dce:	46c0      	nop			(mov r8, r8)

00004dd0 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4dd0:	b480      	push	{r7}
    4dd2:	b087      	sub	sp, #28
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
    4dd8:	460b      	mov	r3, r1
    4dda:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    4ddc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de0:	60bb      	str	r3, [r7, #8]
    4de2:	f04f 0300 	mov.w	r3, #0	; 0x0
    4de6:	60fb      	str	r3, [r7, #12]
    4de8:	f04f 0300 	mov.w	r3, #0	; 0x0
    4dec:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    4dee:	f04f 0300 	mov.w	r3, #0	; 0x0
    4df2:	75fb      	strb	r3, [r7, #23]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    4df4:	887b      	ldrh	r3, [r7, #2]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	613b      	str	r3, [r7, #16]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    4e00:	887b      	ldrh	r3, [r7, #2]
    4e02:	f003 031f 	and.w	r3, r3, #31	; 0x1f
    4e06:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;
    4e08:	68fa      	ldr	r2, [r7, #12]
    4e0a:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e0e:	fa03 f302 	lsl.w	r3, r3, r2
    4e12:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    4e14:	693b      	ldr	r3, [r7, #16]
    4e16:	2b01      	cmp	r3, #1
    4e18:	d108      	bne.n	4e2c <USART_GetITStatus+0x5c>
  {
    itmask &= USARTx->CR1;
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	899b      	ldrh	r3, [r3, #12]
    4e1e:	b29b      	uxth	r3, r3
    4e20:	461a      	mov	r2, r3
    4e22:	68fb      	ldr	r3, [r7, #12]
    4e24:	ea03 0302 	and.w	r3, r3, r2
    4e28:	60fb      	str	r3, [r7, #12]
    4e2a:	e013      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    4e2c:	693b      	ldr	r3, [r7, #16]
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d108      	bne.n	4e44 <USART_GetITStatus+0x74>
  {
    itmask &= USARTx->CR2;
    4e32:	687b      	ldr	r3, [r7, #4]
    4e34:	8a1b      	ldrh	r3, [r3, #16]
    4e36:	b29b      	uxth	r3, r3
    4e38:	461a      	mov	r2, r3
    4e3a:	68fb      	ldr	r3, [r7, #12]
    4e3c:	ea03 0302 	and.w	r3, r3, r2
    4e40:	60fb      	str	r3, [r7, #12]
    4e42:	e007      	b.n	4e54 <USART_GetITStatus+0x84>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    4e44:	687b      	ldr	r3, [r7, #4]
    4e46:	8a9b      	ldrh	r3, [r3, #20]
    4e48:	b29b      	uxth	r3, r3
    4e4a:	461a      	mov	r2, r3
    4e4c:	68fb      	ldr	r3, [r7, #12]
    4e4e:	ea03 0302 	and.w	r3, r3, r2
    4e52:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    4e54:	887b      	ldrh	r3, [r7, #2]
    4e56:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4e5a:	b29b      	uxth	r3, r3
    4e5c:	60bb      	str	r3, [r7, #8]
  bitpos = (uint32_t)0x01 << bitpos;
    4e5e:	68ba      	ldr	r2, [r7, #8]
    4e60:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e64:	fa03 f302 	lsl.w	r3, r3, r2
    4e68:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	881b      	ldrh	r3, [r3, #0]
    4e6e:	b29b      	uxth	r3, r3
    4e70:	461a      	mov	r2, r3
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	ea03 0302 	and.w	r3, r3, r2
    4e78:	60bb      	str	r3, [r7, #8]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    4e7a:	68fb      	ldr	r3, [r7, #12]
    4e7c:	2b00      	cmp	r3, #0
    4e7e:	d006      	beq.n	4e8e <USART_GetITStatus+0xbe>
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	2b00      	cmp	r3, #0
    4e84:	d003      	beq.n	4e8e <USART_GetITStatus+0xbe>
  {
    bitstatus = SET;
    4e86:	f04f 0301 	mov.w	r3, #1	; 0x1
    4e8a:	75fb      	strb	r3, [r7, #23]
    4e8c:	e002      	b.n	4e94 <USART_GetITStatus+0xc4>
  }
  else
  {
    bitstatus = RESET;
    4e8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    4e92:	75fb      	strb	r3, [r7, #23]
  }
  
  return bitstatus;  
    4e94:	7dfb      	ldrb	r3, [r7, #23]
}
    4e96:	4618      	mov	r0, r3
    4e98:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    4e9c:	46bd      	mov	sp, r7
    4e9e:	bc80      	pop	{r7}
    4ea0:	4770      	bx	lr
    4ea2:	46c0      	nop			(mov r8, r8)

00004ea4 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    4ea4:	b480      	push	{r7}
    4ea6:	b085      	sub	sp, #20
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
    4eac:	460b      	mov	r3, r1
    4eae:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    4eb0:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eb4:	81bb      	strh	r3, [r7, #12]
    4eb6:	f04f 0300 	mov.w	r3, #0	; 0x0
    4eba:	81fb      	strh	r3, [r7, #14]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    4ebc:	887b      	ldrh	r3, [r7, #2]
    4ebe:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4ec2:	81bb      	strh	r3, [r7, #12]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    4ec4:	89ba      	ldrh	r2, [r7, #12]
    4ec6:	f04f 0301 	mov.w	r3, #1	; 0x1
    4eca:	fa03 f302 	lsl.w	r3, r3, r2
    4ece:	81fb      	strh	r3, [r7, #14]
  USARTx->SR = (uint16_t)~itmask;
    4ed0:	89fb      	ldrh	r3, [r7, #14]
    4ed2:	ea6f 0303 	mvn.w	r3, r3
    4ed6:	b29b      	uxth	r3, r3
    4ed8:	687a      	ldr	r2, [r7, #4]
    4eda:	8013      	strh	r3, [r2, #0]
}
    4edc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    4ee0:	46bd      	mov	sp, r7
    4ee2:	bc80      	pop	{r7}
    4ee4:	4770      	bx	lr
    4ee6:	46c0      	nop			(mov r8, r8)

00004ee8 <_ZN9AscenseurD2Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4ee8:	b480      	push	{r7}
    4eea:	b083      	sub	sp, #12
    4eec:	af00      	add	r7, sp, #0
    4eee:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4ef0:	4b07      	ldr	r3, [pc, #28]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4ef2:	681a      	ldr	r2, [r3, #0]
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	429a      	cmp	r2, r3
    4ef8:	d103      	bne.n	4f02 <_ZN9AscenseurD2Ev+0x1a>
        m_ascenseur = NULL;
    4efa:	4a05      	ldr	r2, [pc, #20]	(4f10 <_ZN9AscenseurD2Ev+0x28>)
    4efc:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f00:	6013      	str	r3, [r2, #0]
}
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	4618      	mov	r0, r3
    4f06:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f0a:	46bd      	mov	sp, r7
    4f0c:	bc80      	pop	{r7}
    4f0e:	4770      	bx	lr
    4f10:	20000548 	.word	0x20000548

00004f14 <_ZN9AscenseurD1Ev>:
    vis->tourne(0.0f);
    m_ascenseur = this;
}

// destructeur
Ascenseur::~Ascenseur()
    4f14:	b480      	push	{r7}
    4f16:	b083      	sub	sp, #12
    4f18:	af00      	add	r7, sp, #0
    4f1a:	6078      	str	r0, [r7, #4]
{
    if (m_ascenseur == this)
    4f1c:	4b07      	ldr	r3, [pc, #28]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f1e:	681a      	ldr	r2, [r3, #0]
    4f20:	687b      	ldr	r3, [r7, #4]
    4f22:	429a      	cmp	r2, r3
    4f24:	d103      	bne.n	4f2e <_ZN9AscenseurD1Ev+0x1a>
        m_ascenseur = NULL;
    4f26:	4a05      	ldr	r2, [pc, #20]	(4f3c <_ZN9AscenseurD1Ev+0x28>)
    4f28:	f04f 0300 	mov.w	r3, #0	; 0x0
    4f2c:	6013      	str	r3, [r2, #0]
}
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	4618      	mov	r0, r3
    4f32:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f36:	46bd      	mov	sp, r7
    4f38:	bc80      	pop	{r7}
    4f3a:	4770      	bx	lr
    4f3c:	20000548 	.word	0x20000548

00004f40 <_ZNK9Ascenseur5aFiniEv>:
        }
    }
}

// est ce que l'ascenseur a fini sa montée/descente
bool Ascenseur::aFini() const
    4f40:	b480      	push	{r7}
    4f42:	b083      	sub	sp, #12
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
{
    return !m_tourne;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	781b      	ldrb	r3, [r3, #0]
    4f4c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    4f50:	b2db      	uxtb	r3, r3
}
    4f52:	4618      	mov	r0, r3
    4f54:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f58:	46bd      	mov	sp, r7
    4f5a:	bc80      	pop	{r7}
    4f5c:	4770      	bx	lr
    4f5e:	46c0      	nop			(mov r8, r8)

00004f60 <_ZNK9Ascenseur8vaEnHautEv>:

// est ce que l'ascenseur va/est en haut ?
bool Ascenseur::vaEnHaut() const
    4f60:	b480      	push	{r7}
    4f62:	b083      	sub	sp, #12
    4f64:	af00      	add	r7, sp, #0
    4f66:	6078      	str	r0, [r7, #4]
{
    return m_vaEnHaut;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	785b      	ldrb	r3, [r3, #1]
}
    4f6c:	4618      	mov	r0, r3
    4f6e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    4f72:	46bd      	mov	sp, r7
    4f74:	bc80      	pop	{r7}
    4f76:	4770      	bx	lr

00004f78 <_ZNK9Ascenseur10toutEnHautEv>:

// est ce que les fdc sont activés ?
bool Ascenseur::toutEnHaut() const
    4f78:	b580      	push	{r7, lr}
    4f7a:	b086      	sub	sp, #24
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	6078      	str	r0, [r7, #4]
{
    return m_fdcHaut->getValue().b;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	689b      	ldr	r3, [r3, #8]
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4f8a:	f8d3 c000 	ldr.w	ip, [r3]
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	689a      	ldr	r2, [r3, #8]
    4f92:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4f96:	4618      	mov	r0, r3
    4f98:	4611      	mov	r1, r2
    4f9a:	47e0      	blx	ip
    4f9c:	7d3b      	ldrb	r3, [r7, #20]
}
    4f9e:	4618      	mov	r0, r3
    4fa0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fa4:	46bd      	mov	sp, r7
    4fa6:	bd80      	pop	{r7, pc}

00004fa8 <_ZNK9Ascenseur9toutEnBasEv>:

bool Ascenseur::toutEnBas() const
    4fa8:	b580      	push	{r7, lr}
    4faa:	b086      	sub	sp, #24
    4fac:	af00      	add	r7, sp, #0
    4fae:	6078      	str	r0, [r7, #4]
{
    return m_fdcBas->getValue().b;
    4fb0:	687b      	ldr	r3, [r7, #4]
    4fb2:	68db      	ldr	r3, [r3, #12]
    4fb4:	681b      	ldr	r3, [r3, #0]
    4fb6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    4fba:	f8d3 c000 	ldr.w	ip, [r3]
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	68da      	ldr	r2, [r3, #12]
    4fc2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    4fc6:	4618      	mov	r0, r3
    4fc8:	4611      	mov	r1, r2
    4fca:	47e0      	blx	ip
    4fcc:	7d3b      	ldrb	r3, [r7, #20]
}
    4fce:	4618      	mov	r0, r3
    4fd0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    4fd4:	46bd      	mov	sp, r7
    4fd6:	bd80      	pop	{r7, pc}

00004fd8 <_ZN9Ascenseur3getEv>:

// renvoit l'ascenseur
Ascenseur* Ascenseur::get()
    4fd8:	b480      	push	{r7}
    4fda:	af00      	add	r7, sp, #0
{
    return m_ascenseur;
    4fdc:	4b02      	ldr	r3, [pc, #8]	(4fe8 <_ZN9Ascenseur3getEv+0x10>)
    4fde:	681b      	ldr	r3, [r3, #0]
}
    4fe0:	4618      	mov	r0, r3
    4fe2:	46bd      	mov	sp, r7
    4fe4:	bc80      	pop	{r7}
    4fe6:	4770      	bx	lr
    4fe8:	20000548 	.word	0x20000548

00004fec <_ZN9Ascenseur6updateEv>:
        m_vis->tourne(-0.5f);
    }
}

// met à jour l'état de l'ascenseur pour l'arreter si il est arrivé à son but
void Ascenseur::update()
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
{
    if (m_tourne)
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	781b      	ldrb	r3, [r3, #0]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d01b      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
    {
        if (m_vaEnHaut ? toutEnHaut() : toutEnBas())
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	785b      	ldrb	r3, [r3, #1]
    5000:	2b00      	cmp	r3, #0
    5002:	d005      	beq.n	5010 <_ZN9Ascenseur6updateEv+0x24>
    5004:	6878      	ldr	r0, [r7, #4]
    5006:	f7ff ffb7 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    500a:	4603      	mov	r3, r0
    500c:	603b      	str	r3, [r7, #0]
    500e:	e004      	b.n	501a <_ZN9Ascenseur6updateEv+0x2e>
    5010:	6878      	ldr	r0, [r7, #4]
    5012:	f7ff ffc9 	bl	4fa8 <_ZNK9Ascenseur9toutEnBasEv>
    5016:	4603      	mov	r3, r0
    5018:	603b      	str	r3, [r7, #0]
    501a:	683b      	ldr	r3, [r7, #0]
    501c:	2b00      	cmp	r3, #0
    501e:	d009      	beq.n	5034 <_ZN9Ascenseur6updateEv+0x48>
        {
            m_tourne = false;
    5020:	687a      	ldr	r2, [r7, #4]
    5022:	f04f 0300 	mov.w	r3, #0	; 0x0
    5026:	7013      	strb	r3, [r2, #0]
            m_vis->tourne(0.0f);
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	685b      	ldr	r3, [r3, #4]
    502c:	4618      	mov	r0, r3
    502e:	4903      	ldr	r1, [pc, #12]	(503c <_ZN9Ascenseur6updateEv+0x50>)
    5030:	f007 fe5a 	bl	cce8 <_ZN4Roue6tourneEf>
        }
    }
}
    5034:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5038:	46bd      	mov	sp, r7
    503a:	bd80      	pop	{r7, pc}
    503c:	00000000 	.word	0x00000000

00005040 <_ZN9Ascenseur9descendreEv>:
        m_vis->tourne(0.5f);
    }
}

// l'ascenseur descend tout en bas
void Ascenseur::descendre()
    5040:	b580      	push	{r7, lr}
    5042:	b082      	sub	sp, #8
    5044:	af00      	add	r7, sp, #0
    5046:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = false;
    5048:	687a      	ldr	r2, [r7, #4]
    504a:	f04f 0300 	mov.w	r3, #0	; 0x0
    504e:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5050:	6878      	ldr	r0, [r7, #4]
    5052:	f7ff ff91 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    5056:	4603      	mov	r3, r0
    5058:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    505c:	b2db      	uxtb	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d009      	beq.n	5076 <_ZN9Ascenseur9descendreEv+0x36>
    {
        m_tourne = true;
    5062:	687a      	ldr	r2, [r7, #4]
    5064:	f04f 0301 	mov.w	r3, #1	; 0x1
    5068:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(-0.5f);
    506a:	687b      	ldr	r3, [r7, #4]
    506c:	685b      	ldr	r3, [r3, #4]
    506e:	4618      	mov	r0, r3
    5070:	4903      	ldr	r1, [pc, #12]	(5080 <_ZN9Ascenseur9descendreEv+0x40>)
    5072:	f007 fe39 	bl	cce8 <_ZN4Roue6tourneEf>
    }
}
    5076:	f107 0708 	add.w	r7, r7, #8	; 0x8
    507a:	46bd      	mov	sp, r7
    507c:	bd80      	pop	{r7, pc}
    507e:	46c0      	nop			(mov r8, r8)
    5080:	bf000000 	.word	0xbf000000

00005084 <_ZN9Ascenseur6monterEv>:
    if (m_ascenseur == this)
        m_ascenseur = NULL;
}

// l'ascenseur monte tout en haut
void Ascenseur::monter()
    5084:	b580      	push	{r7, lr}
    5086:	b082      	sub	sp, #8
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
{
    m_vaEnHaut = true;
    508c:	687a      	ldr	r2, [r7, #4]
    508e:	f04f 0301 	mov.w	r3, #1	; 0x1
    5092:	7053      	strb	r3, [r2, #1]

    if (!toutEnHaut())
    5094:	6878      	ldr	r0, [r7, #4]
    5096:	f7ff ff6f 	bl	4f78 <_ZNK9Ascenseur10toutEnHautEv>
    509a:	4603      	mov	r3, r0
    509c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    50a0:	b2db      	uxtb	r3, r3
    50a2:	2b00      	cmp	r3, #0
    50a4:	d009      	beq.n	50ba <_ZN9Ascenseur6monterEv+0x36>
    {
        m_tourne = true;
    50a6:	687a      	ldr	r2, [r7, #4]
    50a8:	f04f 0301 	mov.w	r3, #1	; 0x1
    50ac:	7013      	strb	r3, [r2, #0]
        m_vis->tourne(0.5f);
    50ae:	687b      	ldr	r3, [r7, #4]
    50b0:	685b      	ldr	r3, [r3, #4]
    50b2:	4618      	mov	r0, r3
    50b4:	4903      	ldr	r1, [pc, #12]	(50c4 <_ZN9Ascenseur6monterEv+0x40>)
    50b6:	f007 fe17 	bl	cce8 <_ZN4Roue6tourneEf>
    }
}
    50ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
    50be:	46bd      	mov	sp, r7
    50c0:	bd80      	pop	{r7, pc}
    50c2:	46c0      	nop			(mov r8, r8)
    50c4:	3f000000 	.word	0x3f000000

000050c8 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    50c8:	b580      	push	{r7, lr}
    50ca:	b084      	sub	sp, #16
    50cc:	af00      	add	r7, sp, #0
    50ce:	60f8      	str	r0, [r7, #12]
    50d0:	60b9      	str	r1, [r7, #8]
    50d2:	607a      	str	r2, [r7, #4]
    50d4:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    50d6:	68fa      	ldr	r2, [r7, #12]
    50d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    50dc:	7013      	strb	r3, [r2, #0]
    50de:	68fa      	ldr	r2, [r7, #12]
    50e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    50e4:	7053      	strb	r3, [r2, #1]
    50e6:	68fa      	ldr	r2, [r7, #12]
    50e8:	68bb      	ldr	r3, [r7, #8]
    50ea:	6053      	str	r3, [r2, #4]
    50ec:	68fa      	ldr	r2, [r7, #12]
    50ee:	687b      	ldr	r3, [r7, #4]
    50f0:	6093      	str	r3, [r2, #8]
    50f2:	68fa      	ldr	r2, [r7, #12]
    50f4:	683b      	ldr	r3, [r7, #0]
    50f6:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    50f8:	68b8      	ldr	r0, [r7, #8]
    50fa:	4906      	ldr	r1, [pc, #24]	(5114 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    50fc:	f007 fdf4 	bl	cce8 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5100:	4a05      	ldr	r2, [pc, #20]	(5118 <_ZN9AscenseurC1EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5102:	68fb      	ldr	r3, [r7, #12]
    5104:	6013      	str	r3, [r2, #0]
}
    5106:	68fb      	ldr	r3, [r7, #12]
    5108:	4618      	mov	r0, r3
    510a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    510e:	46bd      	mov	sp, r7
    5110:	bd80      	pop	{r7, pc}
    5112:	46c0      	nop			(mov r8, r8)
    5114:	00000000 	.word	0x00000000
    5118:	20000548 	.word	0x20000548

0000511c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_>:
#include "ascenseur.h"

Ascenseur* Ascenseur::m_ascenseur = NULL;

// Constructeur
Ascenseur::Ascenseur(Roue* vis, LimitSwitchSensor* fdcHaut, LimitSwitchSensor* fdcBas)
    511c:	b580      	push	{r7, lr}
    511e:	b084      	sub	sp, #16
    5120:	af00      	add	r7, sp, #0
    5122:	60f8      	str	r0, [r7, #12]
    5124:	60b9      	str	r1, [r7, #8]
    5126:	607a      	str	r2, [r7, #4]
    5128:	603b      	str	r3, [r7, #0]
    : m_tourne(false), m_vaEnHaut(true), m_vis(vis), m_fdcHaut(fdcHaut), m_fdcBas(fdcBas)
    512a:	68fa      	ldr	r2, [r7, #12]
    512c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5130:	7013      	strb	r3, [r2, #0]
    5132:	68fa      	ldr	r2, [r7, #12]
    5134:	f04f 0301 	mov.w	r3, #1	; 0x1
    5138:	7053      	strb	r3, [r2, #1]
    513a:	68fa      	ldr	r2, [r7, #12]
    513c:	68bb      	ldr	r3, [r7, #8]
    513e:	6053      	str	r3, [r2, #4]
    5140:	68fa      	ldr	r2, [r7, #12]
    5142:	687b      	ldr	r3, [r7, #4]
    5144:	6093      	str	r3, [r2, #8]
    5146:	68fa      	ldr	r2, [r7, #12]
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	60d3      	str	r3, [r2, #12]
{
    vis->tourne(0.0f);
    514c:	68b8      	ldr	r0, [r7, #8]
    514e:	4906      	ldr	r1, [pc, #24]	(5168 <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x4c>)
    5150:	f007 fdca 	bl	cce8 <_ZN4Roue6tourneEf>
    m_ascenseur = this;
    5154:	4a05      	ldr	r2, [pc, #20]	(516c <_ZN9AscenseurC2EP4RoueP17LimitSwitchSensorS3_+0x50>)
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	6013      	str	r3, [r2, #0]
}
    515a:	68fb      	ldr	r3, [r7, #12]
    515c:	4618      	mov	r0, r3
    515e:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5162:	46bd      	mov	sp, r7
    5164:	bd80      	pop	{r7, pc}
    5166:	46c0      	nop			(mov r8, r8)
    5168:	00000000 	.word	0x00000000
    516c:	20000548 	.word	0x20000548

00005170 <_ZN11BrasLateral5frontEv>:
    void BrasLateral::collapse()
    {
        servo->goToAngle(angleCollapsed);
    }

    void BrasLateral::front()
    5170:	b580      	push	{r7, lr}
    5172:	b082      	sub	sp, #8
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleFront);
    5178:	687b      	ldr	r3, [r7, #4]
    517a:	681a      	ldr	r2, [r3, #0]
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	68db      	ldr	r3, [r3, #12]
    5180:	4610      	mov	r0, r2
    5182:	4619      	mov	r1, r3
    5184:	f001 fe88 	bl	6e98 <_ZN5Servo9goToAngleEf>
    }
    5188:	f107 0708 	add.w	r7, r7, #8	; 0x8
    518c:	46bd      	mov	sp, r7
    518e:	bd80      	pop	{r7, pc}

00005190 <_ZN11BrasLateral8collapseEv>:
    void BrasLateral::expand()
    {
        servo->goToAngle(angleExpanded);
    }

    void BrasLateral::collapse()
    5190:	b580      	push	{r7, lr}
    5192:	b082      	sub	sp, #8
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleCollapsed);
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	681a      	ldr	r2, [r3, #0]
    519c:	687b      	ldr	r3, [r7, #4]
    519e:	685b      	ldr	r3, [r3, #4]
    51a0:	4610      	mov	r0, r2
    51a2:	4619      	mov	r1, r3
    51a4:	f001 fe78 	bl	6e98 <_ZN5Servo9goToAngleEf>
    }
    51a8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51ac:	46bd      	mov	sp, r7
    51ae:	bd80      	pop	{r7, pc}

000051b0 <_ZN11BrasLateral6expandEv>:
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    }

    void BrasLateral::expand()
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	6078      	str	r0, [r7, #4]
    {
        servo->goToAngle(angleExpanded);
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	681a      	ldr	r2, [r3, #0]
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	689b      	ldr	r3, [r3, #8]
    51c0:	4610      	mov	r0, r2
    51c2:	4619      	mov	r1, r3
    51c4:	f001 fe68 	bl	6e98 <_ZN5Servo9goToAngleEf>
    }
    51c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    51cc:	46bd      	mov	sp, r7
    51ce:	bd80      	pop	{r7, pc}

000051d0 <_ZN11BrasLateralC1EP5Timerhfffff>:
BrasLateral* BrasLateral::left = 0;
BrasLateral* BrasLateral::right = 0;

#ifdef ROBOTHW

    BrasLateral::BrasLateral(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    51d0:	b580      	push	{r7, lr}
    51d2:	b088      	sub	sp, #32
    51d4:	af02      	add	r7, sp, #8
    51d6:	6178      	str	r0, [r7, #20]
    51d8:	6139      	str	r1, [r7, #16]
    51da:	60bb      	str	r3, [r7, #8]
    51dc:	4613      	mov	r3, r2
    51de:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    51e0:	697a      	ldr	r2, [r7, #20]
    51e2:	6a7b      	ldr	r3, [r7, #36]
    51e4:	6053      	str	r3, [r2, #4]
    51e6:	697a      	ldr	r2, [r7, #20]
    51e8:	6abb      	ldr	r3, [r7, #40]
    51ea:	6093      	str	r3, [r2, #8]
    51ec:	697a      	ldr	r2, [r7, #20]
    51ee:	6afb      	ldr	r3, [r7, #44]
    51f0:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    51f2:	f04f 0014 	mov.w	r0, #20	; 0x14
    51f6:	f009 f8af 	bl	e358 <_Znwj>
    51fa:	4603      	mov	r3, r0
    51fc:	603b      	str	r3, [r7, #0]
    51fe:	683a      	ldr	r2, [r7, #0]
    5200:	2a00      	cmp	r2, #0
    5202:	d00a      	beq.n	521a <_ZN11BrasLateralC1EP5Timerhfffff+0x4a>
    5204:	7bfa      	ldrb	r2, [r7, #15]
    5206:	6a3b      	ldr	r3, [r7, #32]
    5208:	9300      	str	r3, [sp, #0]
    520a:	6838      	ldr	r0, [r7, #0]
    520c:	6939      	ldr	r1, [r7, #16]
    520e:	68bb      	ldr	r3, [r7, #8]
    5210:	f001 feb2 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    5214:	683b      	ldr	r3, [r7, #0]
    5216:	607b      	str	r3, [r7, #4]
    5218:	e001      	b.n	521e <_ZN11BrasLateralC1EP5Timerhfffff+0x4e>
    521a:	683a      	ldr	r2, [r7, #0]
    521c:	607a      	str	r2, [r7, #4]
    521e:	697b      	ldr	r3, [r7, #20]
    5220:	687a      	ldr	r2, [r7, #4]
    5222:	601a      	str	r2, [r3, #0]
    }
    5224:	697b      	ldr	r3, [r7, #20]
    5226:	4618      	mov	r0, r3
    5228:	f107 0718 	add.w	r7, r7, #24	; 0x18
    522c:	46bd      	mov	sp, r7
    522e:	bd80      	pop	{r7, pc}

00005230 <_ZN11BrasLateral16initBrasLaterauxEv>:
    void BrasLateral::front()
    {
        servo->goToAngle(angleFront);
    }

    void BrasLateral::initBrasLateraux()
    5230:	b580      	push	{r7, lr}
    5232:	b08c      	sub	sp, #48
    5234:	af04      	add	r7, sp, #16
            TIM_CtrlPWMOutputs(TIM3, ENABLE);

            left = new BrasLateral(timer, 1, 0.01f, 0.11f, 87.f, 51.f, 15.f);
            right = new BrasLateral(timer, 3, 0.01f, 0.11f, 0.f, 40.f, 77.f);
        #else // Krabi - STM32 H107
            Timer* timer = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5236:	f04f 000c 	mov.w	r0, #12	; 0xc
    523a:	f009 f88d 	bl	e358 <_Znwj>
    523e:	4603      	mov	r3, r0
    5240:	603b      	str	r3, [r7, #0]
    5242:	683a      	ldr	r2, [r7, #0]
    5244:	2a00      	cmp	r2, #0
    5246:	d00d      	beq.n	5264 <_ZN11BrasLateral16initBrasLaterauxEv+0x34>
    5248:	f04f 0300 	mov.w	r3, #0	; 0x0
    524c:	9300      	str	r3, [sp, #0]
    524e:	6838      	ldr	r0, [r7, #0]
    5250:	4930      	ldr	r1, [pc, #192]	(5314 <_ZN11BrasLateral16initBrasLaterauxEv+0xe4>)
    5252:	f644 6220 	movw	r2, #20000	; 0x4e20
    5256:	f04f 0347 	mov.w	r3, #71	; 0x47
    525a:	f007 fff1 	bl	d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    525e:	683b      	ldr	r3, [r7, #0]
    5260:	607b      	str	r3, [r7, #4]
    5262:	e001      	b.n	5268 <_ZN11BrasLateral16initBrasLaterauxEv+0x38>
    5264:	683a      	ldr	r2, [r7, #0]
    5266:	607a      	str	r2, [r7, #4]
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	61fb      	str	r3, [r7, #28]
            TIM_CtrlPWMOutputs(TIM1, ENABLE);
    526c:	4829      	ldr	r0, [pc, #164]	(5314 <_ZN11BrasLateral16initBrasLaterauxEv+0xe4>)
    526e:	f04f 0101 	mov.w	r1, #1	; 0x1
    5272:	f7fd feff 	bl	3074 <TIM_CtrlPWMOutputs>

            right = new BrasLateral(timer, 2, 0.01f, 0.11f, 20.f, 86.f, 84.f);
    5276:	f04f 0010 	mov.w	r0, #16	; 0x10
    527a:	f009 f86d 	bl	e358 <_Znwj>
    527e:	4603      	mov	r3, r0
    5280:	60bb      	str	r3, [r7, #8]
    5282:	68ba      	ldr	r2, [r7, #8]
    5284:	2a00      	cmp	r2, #0
    5286:	d011      	beq.n	52ac <_ZN11BrasLateral16initBrasLaterauxEv+0x7c>
    5288:	4b23      	ldr	r3, [pc, #140]	(5318 <_ZN11BrasLateral16initBrasLaterauxEv+0xe8>)
    528a:	9300      	str	r3, [sp, #0]
    528c:	4b23      	ldr	r3, [pc, #140]	(531c <_ZN11BrasLateral16initBrasLaterauxEv+0xec>)
    528e:	9301      	str	r3, [sp, #4]
    5290:	4b23      	ldr	r3, [pc, #140]	(5320 <_ZN11BrasLateral16initBrasLaterauxEv+0xf0>)
    5292:	9302      	str	r3, [sp, #8]
    5294:	4b23      	ldr	r3, [pc, #140]	(5324 <_ZN11BrasLateral16initBrasLaterauxEv+0xf4>)
    5296:	9303      	str	r3, [sp, #12]
    5298:	68b8      	ldr	r0, [r7, #8]
    529a:	69f9      	ldr	r1, [r7, #28]
    529c:	f04f 0202 	mov.w	r2, #2	; 0x2
    52a0:	4b21      	ldr	r3, [pc, #132]	(5328 <_ZN11BrasLateral16initBrasLaterauxEv+0xf8>)
    52a2:	f7ff ff95 	bl	51d0 <_ZN11BrasLateralC1EP5Timerhfffff>
    52a6:	68bb      	ldr	r3, [r7, #8]
    52a8:	60fb      	str	r3, [r7, #12]
    52aa:	e001      	b.n	52b0 <_ZN11BrasLateral16initBrasLaterauxEv+0x80>
    52ac:	68ba      	ldr	r2, [r7, #8]
    52ae:	60fa      	str	r2, [r7, #12]
    52b0:	4b1e      	ldr	r3, [pc, #120]	(532c <_ZN11BrasLateral16initBrasLaterauxEv+0xfc>)
    52b2:	68fa      	ldr	r2, [r7, #12]
    52b4:	601a      	str	r2, [r3, #0]
            left = new BrasLateral(timer, 3, 0.01f, 0.11f, 120.f, 36.f, 1.f);
    52b6:	f04f 0010 	mov.w	r0, #16	; 0x10
    52ba:	f009 f84d 	bl	e358 <_Znwj>
    52be:	4603      	mov	r3, r0
    52c0:	613b      	str	r3, [r7, #16]
    52c2:	693b      	ldr	r3, [r7, #16]
    52c4:	2b00      	cmp	r3, #0
    52c6:	d011      	beq.n	52ec <_ZN11BrasLateral16initBrasLaterauxEv+0xbc>
    52c8:	4b13      	ldr	r3, [pc, #76]	(5318 <_ZN11BrasLateral16initBrasLaterauxEv+0xe8>)
    52ca:	9300      	str	r3, [sp, #0]
    52cc:	4b18      	ldr	r3, [pc, #96]	(5330 <_ZN11BrasLateral16initBrasLaterauxEv+0x100>)
    52ce:	9301      	str	r3, [sp, #4]
    52d0:	4b18      	ldr	r3, [pc, #96]	(5334 <_ZN11BrasLateral16initBrasLaterauxEv+0x104>)
    52d2:	9302      	str	r3, [sp, #8]
    52d4:	4b18      	ldr	r3, [pc, #96]	(5338 <_ZN11BrasLateral16initBrasLaterauxEv+0x108>)
    52d6:	9303      	str	r3, [sp, #12]
    52d8:	6938      	ldr	r0, [r7, #16]
    52da:	69f9      	ldr	r1, [r7, #28]
    52dc:	f04f 0203 	mov.w	r2, #3	; 0x3
    52e0:	4b11      	ldr	r3, [pc, #68]	(5328 <_ZN11BrasLateral16initBrasLaterauxEv+0xf8>)
    52e2:	f7ff ff75 	bl	51d0 <_ZN11BrasLateralC1EP5Timerhfffff>
    52e6:	693a      	ldr	r2, [r7, #16]
    52e8:	617a      	str	r2, [r7, #20]
    52ea:	e001      	b.n	52f0 <_ZN11BrasLateral16initBrasLaterauxEv+0xc0>
    52ec:	693b      	ldr	r3, [r7, #16]
    52ee:	617b      	str	r3, [r7, #20]
    52f0:	4b12      	ldr	r3, [pc, #72]	(533c <_ZN11BrasLateral16initBrasLaterauxEv+0x10c>)
    52f2:	697a      	ldr	r2, [r7, #20]
    52f4:	601a      	str	r2, [r3, #0]


        #endif

        left->collapse();
    52f6:	4b11      	ldr	r3, [pc, #68]	(533c <_ZN11BrasLateral16initBrasLaterauxEv+0x10c>)
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	4618      	mov	r0, r3
    52fc:	f7ff ff48 	bl	5190 <_ZN11BrasLateral8collapseEv>
        right->collapse();
    5300:	4b0a      	ldr	r3, [pc, #40]	(532c <_ZN11BrasLateral16initBrasLaterauxEv+0xfc>)
    5302:	681b      	ldr	r3, [r3, #0]
    5304:	4618      	mov	r0, r3
    5306:	f7ff ff43 	bl	5190 <_ZN11BrasLateral8collapseEv>
    }
    530a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    530e:	46bd      	mov	sp, r7
    5310:	bd80      	pop	{r7, pc}
    5312:	46c0      	nop			(mov r8, r8)
    5314:	40012c00 	.word	0x40012c00
    5318:	3de147ae 	.word	0x3de147ae
    531c:	41a00000 	.word	0x41a00000
    5320:	42ac0000 	.word	0x42ac0000
    5324:	42a80000 	.word	0x42a80000
    5328:	3c23d70a 	.word	0x3c23d70a
    532c:	20000550 	.word	0x20000550
    5330:	42f00000 	.word	0x42f00000
    5334:	42100000 	.word	0x42100000
    5338:	3f800000 	.word	0x3f800000
    533c:	2000054c 	.word	0x2000054c

00005340 <_ZN11BrasLateral8getRightEv>:
        initBrasLateraux();

    return left;
}

BrasLateral* BrasLateral::getRight()
    5340:	b580      	push	{r7, lr}
    5342:	af00      	add	r7, sp, #0
{
    if (right==0)
    5344:	4b05      	ldr	r3, [pc, #20]	(535c <_ZN11BrasLateral8getRightEv+0x1c>)
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	2b00      	cmp	r3, #0
    534a:	d101      	bne.n	5350 <_ZN11BrasLateral8getRightEv+0x10>
        initBrasLateraux();
    534c:	f7ff ff70 	bl	5230 <_ZN11BrasLateral16initBrasLaterauxEv>

    return right;
    5350:	4b02      	ldr	r3, [pc, #8]	(535c <_ZN11BrasLateral8getRightEv+0x1c>)
    5352:	681b      	ldr	r3, [r3, #0]
}
    5354:	4618      	mov	r0, r3
    5356:	46bd      	mov	sp, r7
    5358:	bd80      	pop	{r7, pc}
    535a:	46c0      	nop			(mov r8, r8)
    535c:	20000550 	.word	0x20000550

00005360 <_ZN11BrasLateral7getLeftEv>:
        right = new BrasLateral();
    }

#endif

BrasLateral* BrasLateral::getLeft()
    5360:	b580      	push	{r7, lr}
    5362:	af00      	add	r7, sp, #0
{
    if (left==0)
    5364:	4b05      	ldr	r3, [pc, #20]	(537c <_ZN11BrasLateral7getLeftEv+0x1c>)
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	2b00      	cmp	r3, #0
    536a:	d101      	bne.n	5370 <_ZN11BrasLateral7getLeftEv+0x10>
        initBrasLateraux();
    536c:	f7ff ff60 	bl	5230 <_ZN11BrasLateral16initBrasLaterauxEv>

    return left;
    5370:	4b02      	ldr	r3, [pc, #8]	(537c <_ZN11BrasLateral7getLeftEv+0x1c>)
    5372:	681b      	ldr	r3, [r3, #0]
}
    5374:	4618      	mov	r0, r3
    5376:	46bd      	mov	sp, r7
    5378:	bd80      	pop	{r7, pc}
    537a:	46c0      	nop			(mov r8, r8)
    537c:	2000054c 	.word	0x2000054c

00005380 <_ZN11BrasLateralC2EP5Timerhfffff>:
BrasLateral* BrasLateral::left = 0;
BrasLateral* BrasLateral::right = 0;

#ifdef ROBOTHW

    BrasLateral::BrasLateral(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres, float angleCollapsed, float angleExpanded, float angleFront)
    5380:	b580      	push	{r7, lr}
    5382:	b088      	sub	sp, #32
    5384:	af02      	add	r7, sp, #8
    5386:	6178      	str	r0, [r7, #20]
    5388:	6139      	str	r1, [r7, #16]
    538a:	60bb      	str	r3, [r7, #8]
    538c:	4613      	mov	r3, r2
    538e:	73fb      	strb	r3, [r7, #15]
        : angleCollapsed(angleCollapsed), angleExpanded(angleExpanded), angleFront(angleFront)
    5390:	697a      	ldr	r2, [r7, #20]
    5392:	6a7b      	ldr	r3, [r7, #36]
    5394:	6053      	str	r3, [r2, #4]
    5396:	697a      	ldr	r2, [r7, #20]
    5398:	6abb      	ldr	r3, [r7, #40]
    539a:	6093      	str	r3, [r2, #8]
    539c:	697a      	ldr	r2, [r7, #20]
    539e:	6afb      	ldr	r3, [r7, #44]
    53a0:	60d3      	str	r3, [r2, #12]
    {
        servo = new Servo(timer, OCx, RC0degre, RC180degres);
    53a2:	f04f 0014 	mov.w	r0, #20	; 0x14
    53a6:	f008 ffd7 	bl	e358 <_Znwj>
    53aa:	4603      	mov	r3, r0
    53ac:	603b      	str	r3, [r7, #0]
    53ae:	683a      	ldr	r2, [r7, #0]
    53b0:	2a00      	cmp	r2, #0
    53b2:	d00a      	beq.n	53ca <_ZN11BrasLateralC2EP5Timerhfffff+0x4a>
    53b4:	7bfa      	ldrb	r2, [r7, #15]
    53b6:	6a3b      	ldr	r3, [r7, #32]
    53b8:	9300      	str	r3, [sp, #0]
    53ba:	6838      	ldr	r0, [r7, #0]
    53bc:	6939      	ldr	r1, [r7, #16]
    53be:	68bb      	ldr	r3, [r7, #8]
    53c0:	f001 fdda 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    53c4:	683b      	ldr	r3, [r7, #0]
    53c6:	607b      	str	r3, [r7, #4]
    53c8:	e001      	b.n	53ce <_ZN11BrasLateralC2EP5Timerhfffff+0x4e>
    53ca:	683a      	ldr	r2, [r7, #0]
    53cc:	607a      	str	r2, [r7, #4]
    53ce:	697b      	ldr	r3, [r7, #20]
    53d0:	687a      	ldr	r2, [r7, #4]
    53d2:	601a      	str	r2, [r3, #0]
    }
    53d4:	697b      	ldr	r3, [r7, #20]
    53d6:	4618      	mov	r0, r3
    53d8:	f107 0718 	add.w	r7, r7, #24	; 0x18
    53dc:	46bd      	mov	sp, r7
    53de:	bd80      	pop	{r7, pc}

000053e0 <_ZN9Container5closeEv>:
#else
    qDebug() << "Ouvre Conteneur";
#endif
}

void Container::close()
    53e0:	b580      	push	{r7, lr}
    53e2:	b082      	sub	sp, #8
    53e4:	af00      	add	r7, sp, #0
    53e6:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    servo->goToAngle(CONTAINER_ANGLE_CLOSE);
    53e8:	687b      	ldr	r3, [r7, #4]
    53ea:	681b      	ldr	r3, [r3, #0]
    53ec:	4618      	mov	r0, r3
    53ee:	4903      	ldr	r1, [pc, #12]	(53fc <_ZN9Container5closeEv+0x1c>)
    53f0:	f001 fd52 	bl	6e98 <_ZN5Servo9goToAngleEf>
#else
    qDebug() << "Ferme Conteneur";
#endif
}
    53f4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    53f8:	46bd      	mov	sp, r7
    53fa:	bd80      	pop	{r7, pc}
    53fc:	41200000 	.word	0x41200000

00005400 <_ZN9Container4openEv>:
    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    close();
#endif
}

void Container::open()
    5400:	b580      	push	{r7, lr}
    5402:	b082      	sub	sp, #8
    5404:	af00      	add	r7, sp, #0
    5406:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    servo->goToAngle(CONTAINER_ANGLE_OPEN);
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	681b      	ldr	r3, [r3, #0]
    540c:	4618      	mov	r0, r3
    540e:	4903      	ldr	r1, [pc, #12]	(541c <_ZN9Container4openEv+0x1c>)
    5410:	f001 fd42 	bl	6e98 <_ZN5Servo9goToAngleEf>
#else
    qDebug() << "Ouvre Conteneur";
#endif
}
    5414:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5418:	46bd      	mov	sp, r7
    541a:	bd80      	pop	{r7, pc}
    541c:	42a00000 	.word	0x42a00000

00005420 <_ZN9ContainerC1Ev>:
        singleton = new Container();

    return singleton;
}

Container::Container()
    5420:	b580      	push	{r7, lr}
    5422:	b08a      	sub	sp, #40
    5424:	af02      	add	r7, sp, #8
    5426:	6178      	str	r0, [r7, #20]
{
#ifdef ROBOTHW
    Timer* timer3 = new Timer(TIM3, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    5428:	f04f 000c 	mov.w	r0, #12	; 0xc
    542c:	f008 ff94 	bl	e358 <_Znwj>
    5430:	4603      	mov	r3, r0
    5432:	607b      	str	r3, [r7, #4]
    5434:	687a      	ldr	r2, [r7, #4]
    5436:	2a00      	cmp	r2, #0
    5438:	d00d      	beq.n	5456 <_ZN9ContainerC1Ev+0x36>
    543a:	f04f 0300 	mov.w	r3, #0	; 0x0
    543e:	9300      	str	r3, [sp, #0]
    5440:	6878      	ldr	r0, [r7, #4]
    5442:	491b      	ldr	r1, [pc, #108]	(54b0 <_ZN9ContainerC1Ev+0x90>)
    5444:	f644 6220 	movw	r2, #20000	; 0x4e20
    5448:	f04f 0347 	mov.w	r3, #71	; 0x47
    544c:	f007 fef8 	bl	d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5450:	687b      	ldr	r3, [r7, #4]
    5452:	60bb      	str	r3, [r7, #8]
    5454:	e001      	b.n	545a <_ZN9ContainerC1Ev+0x3a>
    5456:	687a      	ldr	r2, [r7, #4]
    5458:	60ba      	str	r2, [r7, #8]
    545a:	68bb      	ldr	r3, [r7, #8]
    545c:	61fb      	str	r3, [r7, #28]
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    545e:	4814      	ldr	r0, [pc, #80]	(54b0 <_ZN9ContainerC1Ev+0x90>)
    5460:	f04f 0101 	mov.w	r1, #1	; 0x1
    5464:	f7fd fe06 	bl	3074 <TIM_CtrlPWMOutputs>

    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    5468:	f04f 0014 	mov.w	r0, #20	; 0x14
    546c:	f008 ff74 	bl	e358 <_Znwj>
    5470:	4603      	mov	r3, r0
    5472:	60fb      	str	r3, [r7, #12]
    5474:	68fa      	ldr	r2, [r7, #12]
    5476:	2a00      	cmp	r2, #0
    5478:	d00b      	beq.n	5492 <_ZN9ContainerC1Ev+0x72>
    547a:	4b0e      	ldr	r3, [pc, #56]	(54b4 <_ZN9ContainerC1Ev+0x94>)
    547c:	9300      	str	r3, [sp, #0]
    547e:	68f8      	ldr	r0, [r7, #12]
    5480:	69f9      	ldr	r1, [r7, #28]
    5482:	f04f 0202 	mov.w	r2, #2	; 0x2
    5486:	4b0c      	ldr	r3, [pc, #48]	(54b8 <_ZN9ContainerC1Ev+0x98>)
    5488:	f001 fd76 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	613b      	str	r3, [r7, #16]
    5490:	e001      	b.n	5496 <_ZN9ContainerC1Ev+0x76>
    5492:	68fa      	ldr	r2, [r7, #12]
    5494:	613a      	str	r2, [r7, #16]
    5496:	697b      	ldr	r3, [r7, #20]
    5498:	693a      	ldr	r2, [r7, #16]
    549a:	601a      	str	r2, [r3, #0]
    close();
    549c:	6978      	ldr	r0, [r7, #20]
    549e:	f7ff ff9f 	bl	53e0 <_ZN9Container5closeEv>
#endif
}
    54a2:	697b      	ldr	r3, [r7, #20]
    54a4:	4618      	mov	r0, r3
    54a6:	f107 0720 	add.w	r7, r7, #32	; 0x20
    54aa:	46bd      	mov	sp, r7
    54ac:	bd80      	pop	{r7, pc}
    54ae:	46c0      	nop			(mov r8, r8)
    54b0:	40000400 	.word	0x40000400
    54b4:	3de147ae 	.word	0x3de147ae
    54b8:	3c23d70a 	.word	0x3c23d70a

000054bc <_ZN9Container12getSingletonEv>:
#define CONTAINER_ANGLE_OPEN 80.
#define CONTAINER_ANGLE_CLOSE 10.

Container* Container::singleton = 0;

Container* Container::getSingleton()
    54bc:	b580      	push	{r7, lr}
    54be:	b082      	sub	sp, #8
    54c0:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    54c2:	4b0f      	ldr	r3, [pc, #60]	(5500 <_ZN9Container12getSingletonEv+0x44>)
    54c4:	681b      	ldr	r3, [r3, #0]
    54c6:	2b00      	cmp	r3, #0
    54c8:	d113      	bne.n	54f2 <_ZN9Container12getSingletonEv+0x36>
        singleton = new Container();
    54ca:	f04f 0004 	mov.w	r0, #4	; 0x4
    54ce:	f008 ff43 	bl	e358 <_Znwj>
    54d2:	4603      	mov	r3, r0
    54d4:	603b      	str	r3, [r7, #0]
    54d6:	683a      	ldr	r2, [r7, #0]
    54d8:	2a00      	cmp	r2, #0
    54da:	d005      	beq.n	54e8 <_ZN9Container12getSingletonEv+0x2c>
    54dc:	6838      	ldr	r0, [r7, #0]
    54de:	f7ff ff9f 	bl	5420 <_ZN9ContainerC1Ev>
    54e2:	683b      	ldr	r3, [r7, #0]
    54e4:	607b      	str	r3, [r7, #4]
    54e6:	e001      	b.n	54ec <_ZN9Container12getSingletonEv+0x30>
    54e8:	683a      	ldr	r2, [r7, #0]
    54ea:	607a      	str	r2, [r7, #4]
    54ec:	4b04      	ldr	r3, [pc, #16]	(5500 <_ZN9Container12getSingletonEv+0x44>)
    54ee:	687a      	ldr	r2, [r7, #4]
    54f0:	601a      	str	r2, [r3, #0]

    return singleton;
    54f2:	4b03      	ldr	r3, [pc, #12]	(5500 <_ZN9Container12getSingletonEv+0x44>)
    54f4:	681b      	ldr	r3, [r3, #0]
}
    54f6:	4618      	mov	r0, r3
    54f8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    54fc:	46bd      	mov	sp, r7
    54fe:	bd80      	pop	{r7, pc}
    5500:	20000554 	.word	0x20000554

00005504 <_ZN9ContainerC2Ev>:

Container::Container()
    5504:	b580      	push	{r7, lr}
    5506:	b08a      	sub	sp, #40
    5508:	af02      	add	r7, sp, #8
    550a:	6178      	str	r0, [r7, #20]
{
#ifdef ROBOTHW
    Timer* timer3 = new Timer(TIM3, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    550c:	f04f 000c 	mov.w	r0, #12	; 0xc
    5510:	f008 ff22 	bl	e358 <_Znwj>
    5514:	4603      	mov	r3, r0
    5516:	607b      	str	r3, [r7, #4]
    5518:	687a      	ldr	r2, [r7, #4]
    551a:	2a00      	cmp	r2, #0
    551c:	d00d      	beq.n	553a <_ZN9ContainerC2Ev+0x36>
    551e:	f04f 0300 	mov.w	r3, #0	; 0x0
    5522:	9300      	str	r3, [sp, #0]
    5524:	6878      	ldr	r0, [r7, #4]
    5526:	491b      	ldr	r1, [pc, #108]	(5594 <_ZN9ContainerC2Ev+0x90>)
    5528:	f644 6220 	movw	r2, #20000	; 0x4e20
    552c:	f04f 0347 	mov.w	r3, #71	; 0x47
    5530:	f007 fe86 	bl	d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	60bb      	str	r3, [r7, #8]
    5538:	e001      	b.n	553e <_ZN9ContainerC2Ev+0x3a>
    553a:	687a      	ldr	r2, [r7, #4]
    553c:	60ba      	str	r2, [r7, #8]
    553e:	68bb      	ldr	r3, [r7, #8]
    5540:	61fb      	str	r3, [r7, #28]
    TIM_CtrlPWMOutputs(TIM3, ENABLE);
    5542:	4814      	ldr	r0, [pc, #80]	(5594 <_ZN9ContainerC2Ev+0x90>)
    5544:	f04f 0101 	mov.w	r1, #1	; 0x1
    5548:	f7fd fd94 	bl	3074 <TIM_CtrlPWMOutputs>

    servo = new Servo(timer3, 2, 0.01f, 0.11f);
    554c:	f04f 0014 	mov.w	r0, #20	; 0x14
    5550:	f008 ff02 	bl	e358 <_Znwj>
    5554:	4603      	mov	r3, r0
    5556:	60fb      	str	r3, [r7, #12]
    5558:	68fa      	ldr	r2, [r7, #12]
    555a:	2a00      	cmp	r2, #0
    555c:	d00b      	beq.n	5576 <_ZN9ContainerC2Ev+0x72>
    555e:	4b0e      	ldr	r3, [pc, #56]	(5598 <_ZN9ContainerC2Ev+0x94>)
    5560:	9300      	str	r3, [sp, #0]
    5562:	68f8      	ldr	r0, [r7, #12]
    5564:	69f9      	ldr	r1, [r7, #28]
    5566:	f04f 0202 	mov.w	r2, #2	; 0x2
    556a:	4b0c      	ldr	r3, [pc, #48]	(559c <_ZN9ContainerC2Ev+0x98>)
    556c:	f001 fd04 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    5570:	68fb      	ldr	r3, [r7, #12]
    5572:	613b      	str	r3, [r7, #16]
    5574:	e001      	b.n	557a <_ZN9ContainerC2Ev+0x76>
    5576:	68fa      	ldr	r2, [r7, #12]
    5578:	613a      	str	r2, [r7, #16]
    557a:	697b      	ldr	r3, [r7, #20]
    557c:	693a      	ldr	r2, [r7, #16]
    557e:	601a      	str	r2, [r3, #0]
    close();
    5580:	6978      	ldr	r0, [r7, #20]
    5582:	f7ff ff2d 	bl	53e0 <_ZN9Container5closeEv>
#endif
}
    5586:	697b      	ldr	r3, [r7, #20]
    5588:	4618      	mov	r0, r3
    558a:	f107 0720 	add.w	r7, r7, #32	; 0x20
    558e:	46bd      	mov	sp, r7
    5590:	bd80      	pop	{r7, pc}
    5592:	46c0      	nop			(mov r8, r8)
    5594:	40000400 	.word	0x40000400
    5598:	3de147ae 	.word	0x3de147ae
    559c:	3c23d70a 	.word	0x3c23d70a

000055a0 <_ZN8Marteaux14rangerBasDroitEv>:
    }
    void releverBasDroit()
    {
        ServosNumeriques::moveToAtSpeed(MBD_RELEVE, MBD_VITESSE_MONTEE, MBD_ID);
    }
    void rangerBasDroit()
    55a0:	b580      	push	{r7, lr}
    55a2:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBD_RANGE, MBD_VITESSE_RANGEMENT, MBD_ID);
    55a4:	f240 10ff 	movw	r0, #511	; 0x1ff
    55a8:	f44f 7180 	mov.w	r1, #256	; 0x100
    55ac:	f04f 020a 	mov.w	r2, #10	; 0xa
    55b0:	f008 fcd2 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    55b4:	46bd      	mov	sp, r7
    55b6:	bd80      	pop	{r7, pc}

000055b8 <_ZN8Marteaux15releverBasDroitEv>:
    
    void enfoncerBasDroit()
    {
        ServosNumeriques::moveToAtSpeed(MBD_ENFONCE, MBD_VITESSE_DESCENTE, MBD_ID);
    }
    void releverBasDroit()
    55b8:	b580      	push	{r7, lr}
    55ba:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBD_RELEVE, MBD_VITESSE_MONTEE, MBD_ID);
    55bc:	f44f 70a0 	mov.w	r0, #320	; 0x140
    55c0:	f44f 7100 	mov.w	r1, #512	; 0x200
    55c4:	f04f 020a 	mov.w	r2, #10	; 0xa
    55c8:	f008 fcc6 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    55cc:	46bd      	mov	sp, r7
    55ce:	bd80      	pop	{r7, pc}

000055d0 <_ZN8Marteaux16enfoncerBasDroitEv>:
    void rangerHautDroit()
    {
        ServosNumeriques::moveToAtSpeed(MHD_RANGE, MHD_VITESSE_RANGEMENT, MHD_ID);
    }
    
    void enfoncerBasDroit()
    55d0:	b580      	push	{r7, lr}
    55d2:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBD_ENFONCE, MBD_VITESSE_DESCENTE, MBD_ID);
    55d4:	f04f 0090 	mov.w	r0, #144	; 0x90
    55d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
    55dc:	f04f 020a 	mov.w	r2, #10	; 0xa
    55e0:	f008 fcba 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    55e4:	46bd      	mov	sp, r7
    55e6:	bd80      	pop	{r7, pc}

000055e8 <_ZN8Marteaux15rangerHautDroitEv>:
    }
    void releverHautDroit()
    {
        ServosNumeriques::moveToAtSpeed(MHD_RELEVE, MHD_VITESSE_MONTEE, MHD_ID);
    }
    void rangerHautDroit()
    55e8:	b580      	push	{r7, lr}
    55ea:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHD_RANGE, MHD_VITESSE_RANGEMENT, MHD_ID);
    55ec:	f44f 7010 	mov.w	r0, #576	; 0x240
    55f0:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    55f4:	f04f 020b 	mov.w	r2, #11	; 0xb
    55f8:	f008 fcae 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    55fc:	46bd      	mov	sp, r7
    55fe:	bd80      	pop	{r7, pc}

00005600 <_ZN8Marteaux16releverHautDroitEv>:
    
    void enfoncerHautDroit()
    {
        ServosNumeriques::moveToAtSpeed(MHD_ENFONCE, MHD_VITESSE_DESCENTE, MHD_ID);
    }
    void releverHautDroit()
    5600:	b580      	push	{r7, lr}
    5602:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHD_RELEVE, MHD_VITESSE_MONTEE, MHD_ID);
    5604:	f44f 7068 	mov.w	r0, #928	; 0x3a0
    5608:	f44f 7100 	mov.w	r1, #512	; 0x200
    560c:	f04f 020b 	mov.w	r2, #11	; 0xb
    5610:	f008 fca2 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5614:	46bd      	mov	sp, r7
    5616:	bd80      	pop	{r7, pc}

00005618 <_ZN8Marteaux17enfoncerHautDroitEv>:
    void rangerBasGauche()
    {
        ServosNumeriques::moveToAtSpeed(MBG_RANGE, MBG_VITESSE_RANGEMENT, MBG_ID);
    }
    
    void enfoncerHautDroit()
    5618:	b580      	push	{r7, lr}
    561a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHD_ENFONCE, MHD_VITESSE_DESCENTE, MHD_ID);
    561c:	f44f 704c 	mov.w	r0, #816	; 0x330
    5620:	f240 71ff 	movw	r1, #2047	; 0x7ff
    5624:	f04f 020b 	mov.w	r2, #11	; 0xb
    5628:	f008 fc96 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    562c:	46bd      	mov	sp, r7
    562e:	bd80      	pop	{r7, pc}

00005630 <_ZN8Marteaux15rangerBasGaucheEv>:
    }
    void releverBasGauche()
    {
        ServosNumeriques::moveToAtSpeed(MBG_RELEVE, MBG_VITESSE_MONTEE, MBG_ID);
    }
    void rangerBasGauche()
    5630:	b580      	push	{r7, lr}
    5632:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBG_RANGE, MBG_VITESSE_RANGEMENT, MBG_ID);
    5634:	f44f 7004 	mov.w	r0, #528	; 0x210
    5638:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    563c:	f04f 020d 	mov.w	r2, #13	; 0xd
    5640:	f008 fc8a 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5644:	46bd      	mov	sp, r7
    5646:	bd80      	pop	{r7, pc}

00005648 <_ZN8Marteaux16releverBasGaucheEv>:
    
    void enfoncerBasGauche()
    {
        ServosNumeriques::moveToAtSpeed(MBG_ENFONCE, MBG_VITESSE_DESCENTE, MBG_ID);
    }
    void releverBasGauche()
    5648:	b580      	push	{r7, lr}
    564a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBG_RELEVE, MBG_VITESSE_MONTEE, MBG_ID);
    564c:	f44f 7030 	mov.w	r0, #704	; 0x2c0
    5650:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    5654:	f04f 020d 	mov.w	r2, #13	; 0xd
    5658:	f008 fc7e 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    565c:	46bd      	mov	sp, r7
    565e:	bd80      	pop	{r7, pc}

00005660 <_ZN8Marteaux17enfoncerBasGaucheEv>:
    void rangerHautGauche()
    {
        ServosNumeriques::moveToAtSpeed(MHG_RANGE, MHG_VITESSE_RANGEMENT, MHG_ID);
    }
    
    void enfoncerBasGauche()
    5660:	b580      	push	{r7, lr}
    5662:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MBG_ENFONCE, MBG_VITESSE_DESCENTE, MBG_ID);
    5664:	f44f 7058 	mov.w	r0, #864	; 0x360
    5668:	f240 31ff 	movw	r1, #1023	; 0x3ff
    566c:	f04f 020d 	mov.w	r2, #13	; 0xd
    5670:	f008 fc72 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    5674:	46bd      	mov	sp, r7
    5676:	bd80      	pop	{r7, pc}

00005678 <_ZN8Marteaux16rangerHautGaucheEv>:
    }
    void releverHautGauche()
    {
        ServosNumeriques::moveToAtSpeed(MHG_RELEVE, MHG_VITESSE_MONTEE, MHG_ID);
    }
    void rangerHautGauche()
    5678:	b580      	push	{r7, lr}
    567a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHG_RANGE, MHG_VITESSE_RANGEMENT, MHG_ID);
    567c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    5680:	f44f 7180 	mov.w	r1, #256	; 0x100
    5684:	f04f 020c 	mov.w	r2, #12	; 0xc
    5688:	f008 fc66 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    568c:	46bd      	mov	sp, r7
    568e:	bd80      	pop	{r7, pc}

00005690 <_ZN8Marteaux13rangerMarteauEbb>:
                releverHautGauche();
            else
                releverHautDroit();
        }
    }
    void rangerMarteau(bool bas, bool gauche)
    5690:	b580      	push	{r7, lr}
    5692:	b082      	sub	sp, #8
    5694:	af00      	add	r7, sp, #0
    5696:	4603      	mov	r3, r0
    5698:	460a      	mov	r2, r1
    569a:	71fb      	strb	r3, [r7, #7]
    569c:	4613      	mov	r3, r2
    569e:	71bb      	strb	r3, [r7, #6]
    {
        if (bas)
    56a0:	79fb      	ldrb	r3, [r7, #7]
    56a2:	2b00      	cmp	r3, #0
    56a4:	d008      	beq.n	56b8 <_ZN8Marteaux13rangerMarteauEbb+0x28>
        {
            if (gauche)
    56a6:	79bb      	ldrb	r3, [r7, #6]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d002      	beq.n	56b2 <_ZN8Marteaux13rangerMarteauEbb+0x22>
                rangerBasGauche();
    56ac:	f7ff ffc0 	bl	5630 <_ZN8Marteaux15rangerBasGaucheEv>
    56b0:	e00a      	b.n	56c8 <_ZN8Marteaux13rangerMarteauEbb+0x38>
            else
                rangerBasDroit();
    56b2:	f7ff ff75 	bl	55a0 <_ZN8Marteaux14rangerBasDroitEv>
    56b6:	e007      	b.n	56c8 <_ZN8Marteaux13rangerMarteauEbb+0x38>
        }
        else
        {
            if (gauche)
    56b8:	79bb      	ldrb	r3, [r7, #6]
    56ba:	2b00      	cmp	r3, #0
    56bc:	d002      	beq.n	56c4 <_ZN8Marteaux13rangerMarteauEbb+0x34>
                rangerHautGauche();
    56be:	f7ff ffdb 	bl	5678 <_ZN8Marteaux16rangerHautGaucheEv>
    56c2:	e001      	b.n	56c8 <_ZN8Marteaux13rangerMarteauEbb+0x38>
            else
                rangerHautDroit();
    56c4:	f7ff ff90 	bl	55e8 <_ZN8Marteaux15rangerHautDroitEv>
        }
    }
    56c8:	f107 0708 	add.w	r7, r7, #8	; 0x8
    56cc:	46bd      	mov	sp, r7
    56ce:	bd80      	pop	{r7, pc}

000056d0 <_ZN8Marteaux17releverHautGaucheEv>:
#ifdef ROBOTHW
    void enfoncerHautGauche()
    {
        ServosNumeriques::moveToAtSpeed(MHG_ENFONCE, MHG_VITESSE_DESCENTE, MHG_ID);
    }
    void releverHautGauche()
    56d0:	b580      	push	{r7, lr}
    56d2:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHG_RELEVE, MHG_VITESSE_MONTEE, MHG_ID);
    56d4:	f04f 0090 	mov.w	r0, #144	; 0x90
    56d8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    56dc:	f04f 020c 	mov.w	r2, #12	; 0xc
    56e0:	f008 fc3a 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    56e4:	46bd      	mov	sp, r7
    56e6:	bd80      	pop	{r7, pc}

000056e8 <_ZN8Marteaux14releverMarteauEbb>:
                enfoncerHautGauche();
            else
                enfoncerHautDroit();
        }
    }
    void releverMarteau(bool bas, bool gauche)
    56e8:	b580      	push	{r7, lr}
    56ea:	b082      	sub	sp, #8
    56ec:	af00      	add	r7, sp, #0
    56ee:	4603      	mov	r3, r0
    56f0:	460a      	mov	r2, r1
    56f2:	71fb      	strb	r3, [r7, #7]
    56f4:	4613      	mov	r3, r2
    56f6:	71bb      	strb	r3, [r7, #6]
    {
        if (bas)
    56f8:	79fb      	ldrb	r3, [r7, #7]
    56fa:	2b00      	cmp	r3, #0
    56fc:	d008      	beq.n	5710 <_ZN8Marteaux14releverMarteauEbb+0x28>
        {
            if (gauche)
    56fe:	79bb      	ldrb	r3, [r7, #6]
    5700:	2b00      	cmp	r3, #0
    5702:	d002      	beq.n	570a <_ZN8Marteaux14releverMarteauEbb+0x22>
                releverBasGauche();
    5704:	f7ff ffa0 	bl	5648 <_ZN8Marteaux16releverBasGaucheEv>
    5708:	e00a      	b.n	5720 <_ZN8Marteaux14releverMarteauEbb+0x38>
            else
                releverBasDroit();
    570a:	f7ff ff55 	bl	55b8 <_ZN8Marteaux15releverBasDroitEv>
    570e:	e007      	b.n	5720 <_ZN8Marteaux14releverMarteauEbb+0x38>
        }
        else
        {
            if (gauche)
    5710:	79bb      	ldrb	r3, [r7, #6]
    5712:	2b00      	cmp	r3, #0
    5714:	d002      	beq.n	571c <_ZN8Marteaux14releverMarteauEbb+0x34>
                releverHautGauche();
    5716:	f7ff ffdb 	bl	56d0 <_ZN8Marteaux17releverHautGaucheEv>
    571a:	e001      	b.n	5720 <_ZN8Marteaux14releverMarteauEbb+0x38>
            else
                releverHautDroit();
    571c:	f7ff ff70 	bl	5600 <_ZN8Marteaux16releverHautDroitEv>
        }
    }
    5720:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5724:	46bd      	mov	sp, r7
    5726:	bd80      	pop	{r7, pc}

00005728 <_ZN8Marteaux18enfoncerHautGaucheEv>:
#include "interfaceServosNumeriques.h"

namespace Marteaux 
{
#ifdef ROBOTHW
    void enfoncerHautGauche()
    5728:	b580      	push	{r7, lr}
    572a:	af00      	add	r7, sp, #0
    {
        ServosNumeriques::moveToAtSpeed(MHG_ENFONCE, MHG_VITESSE_DESCENTE, MHG_ID);
    572c:	f44f 7080 	mov.w	r0, #256	; 0x100
    5730:	f240 31ff 	movw	r1, #1023	; 0x3ff
    5734:	f04f 020c 	mov.w	r2, #12	; 0xc
    5738:	f008 fc0e 	bl	df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>
    }
    573c:	46bd      	mov	sp, r7
    573e:	bd80      	pop	{r7, pc}

00005740 <_ZN8Marteaux15enfoncerMarteauEbb>:

    void enfoncerBasDroit() {}
    void releverBasDroit() {}
    void rangerBasDroit() {}
#endif
    void enfoncerMarteau(bool bas, bool gauche)
    5740:	b580      	push	{r7, lr}
    5742:	b082      	sub	sp, #8
    5744:	af00      	add	r7, sp, #0
    5746:	4603      	mov	r3, r0
    5748:	460a      	mov	r2, r1
    574a:	71fb      	strb	r3, [r7, #7]
    574c:	4613      	mov	r3, r2
    574e:	71bb      	strb	r3, [r7, #6]
    {
        if (bas)
    5750:	79fb      	ldrb	r3, [r7, #7]
    5752:	2b00      	cmp	r3, #0
    5754:	d008      	beq.n	5768 <_ZN8Marteaux15enfoncerMarteauEbb+0x28>
        {
            if (gauche)
    5756:	79bb      	ldrb	r3, [r7, #6]
    5758:	2b00      	cmp	r3, #0
    575a:	d002      	beq.n	5762 <_ZN8Marteaux15enfoncerMarteauEbb+0x22>
                enfoncerBasGauche();
    575c:	f7ff ff80 	bl	5660 <_ZN8Marteaux17enfoncerBasGaucheEv>
    5760:	e00a      	b.n	5778 <_ZN8Marteaux15enfoncerMarteauEbb+0x38>
            else
                enfoncerBasDroit();
    5762:	f7ff ff35 	bl	55d0 <_ZN8Marteaux16enfoncerBasDroitEv>
    5766:	e007      	b.n	5778 <_ZN8Marteaux15enfoncerMarteauEbb+0x38>
        }
        else
        {
            if (gauche)
    5768:	79bb      	ldrb	r3, [r7, #6]
    576a:	2b00      	cmp	r3, #0
    576c:	d002      	beq.n	5774 <_ZN8Marteaux15enfoncerMarteauEbb+0x34>
                enfoncerHautGauche();
    576e:	f7ff ffdb 	bl	5728 <_ZN8Marteaux18enfoncerHautGaucheEv>
    5772:	e001      	b.n	5778 <_ZN8Marteaux15enfoncerMarteauEbb+0x38>
            else
                enfoncerHautDroit();
    5774:	f7ff ff50 	bl	5618 <_ZN8Marteaux17enfoncerHautDroitEv>
        }
    }
    5778:	f107 0708 	add.w	r7, r7, #8	; 0x8
    577c:	46bd      	mov	sp, r7
    577e:	bd80      	pop	{r7, pc}

00005780 <_ZN6Moteur6tourneEf>:
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
}

void Moteur::tourne(float rapport)
    5780:	b580      	push	{r7, lr}
    5782:	b082      	sub	sp, #8
    5784:	af00      	add	r7, sp, #0
    5786:	6078      	str	r0, [r7, #4]
    5788:	6039      	str	r1, [r7, #0]
{
    pwm.setDutyCycle(rapport);
    578a:	687b      	ldr	r3, [r7, #4]
    578c:	4618      	mov	r0, r3
    578e:	6839      	ldr	r1, [r7, #0]
    5790:	f006 fe74 	bl	c47c <_ZN10PWMHandler12setDutyCycleEf>
}
    5794:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5798:	46bd      	mov	sp, r7
    579a:	bd80      	pop	{r7, pc}

0000579c <_ZN6MoteurC1EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    579c:	b5b0      	push	{r4, r5, r7, lr}
    579e:	b088      	sub	sp, #32
    57a0:	af02      	add	r7, sp, #8
    57a2:	60f8      	str	r0, [r7, #12]
    57a4:	60b9      	str	r1, [r7, #8]
    57a6:	603b      	str	r3, [r7, #0]
    57a8:	4613      	mov	r3, r2
    57aa:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    57ac:	68fd      	ldr	r5, [r7, #12]
    57ae:	f04f 000c 	mov.w	r0, #12	; 0xc
    57b2:	f008 fdd1 	bl	e358 <_Znwj>
    57b6:	4603      	mov	r3, r0
    57b8:	461c      	mov	r4, r3
    57ba:	f04f 0300 	mov.w	r3, #0	; 0x0
    57be:	9300      	str	r3, [sp, #0]
    57c0:	4620      	mov	r0, r4
    57c2:	68b9      	ldr	r1, [r7, #8]
    57c4:	f04f 0228 	mov.w	r2, #40	; 0x28
    57c8:	f04f 0347 	mov.w	r3, #71	; 0x47
    57cc:	f007 fd38 	bl	d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    57d0:	79fb      	ldrb	r3, [r7, #7]
    57d2:	4628      	mov	r0, r5
    57d4:	4621      	mov	r1, r4
    57d6:	461a      	mov	r2, r3
    57d8:	f006 fe72 	bl	c4c0 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    57dc:	8d3b      	ldrh	r3, [r7, #40]
    57de:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    57e0:	f04f 0318 	mov.w	r3, #24	; 0x18
    57e4:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    57e6:	f04f 0303 	mov.w	r3, #3	; 0x3
    57ea:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    57ec:	f107 0314 	add.w	r3, r7, #20	; 0x14
    57f0:	6838      	ldr	r0, [r7, #0]
    57f2:	4619      	mov	r1, r3
    57f4:	f7fb ff5c 	bl	16b0 <GPIO_Init>
}
    57f8:	68fb      	ldr	r3, [r7, #12]
    57fa:	4618      	mov	r0, r3
    57fc:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5800:	46bd      	mov	sp, r7
    5802:	bdb0      	pop	{r4, r5, r7, pc}

00005804 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>:
    #include "stm32f4xx_gpio.h"
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_gpio.h"
#endif

Moteur::Moteur(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm)
    5804:	b5b0      	push	{r4, r5, r7, lr}
    5806:	b088      	sub	sp, #32
    5808:	af02      	add	r7, sp, #8
    580a:	60f8      	str	r0, [r7, #12]
    580c:	60b9      	str	r1, [r7, #8]
    580e:	603b      	str	r3, [r7, #0]
    5810:	4613      	mov	r3, r2
    5812:	71fb      	strb	r3, [r7, #7]
    : pwm(new Timer(TIMx, PERIOD_TIMER_MOTEUR, PRESCALER_TIMER_MOTEUR, CLOCK_TIMER_MOTEUR), OCx)
    5814:	68fd      	ldr	r5, [r7, #12]
    5816:	f04f 000c 	mov.w	r0, #12	; 0xc
    581a:	f008 fd9d 	bl	e358 <_Znwj>
    581e:	4603      	mov	r3, r0
    5820:	461c      	mov	r4, r3
    5822:	f04f 0300 	mov.w	r3, #0	; 0x0
    5826:	9300      	str	r3, [sp, #0]
    5828:	4620      	mov	r0, r4
    582a:	68b9      	ldr	r1, [r7, #8]
    582c:	f04f 0228 	mov.w	r2, #40	; 0x28
    5830:	f04f 0347 	mov.w	r3, #71	; 0x47
    5834:	f007 fd04 	bl	d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    5838:	79fb      	ldrb	r3, [r7, #7]
    583a:	4628      	mov	r0, r5
    583c:	4621      	mov	r1, r4
    583e:	461a      	mov	r2, r3
    5840:	f006 fe3e 	bl	c4c0 <_ZN10PWMHandlerC1EP5Timerh>
{
    GPIO_InitTypeDef GPIO_InitStructureSortie;
    GPIO_InitStructureSortie.GPIO_Pin = GPIO_Pin_pwm;
    5844:	8d3b      	ldrh	r3, [r7, #40]
    5846:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructureSortie.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie.GPIO_Mode = GPIO_Mode_AF_PP;
    5848:	f04f 0318 	mov.w	r3, #24	; 0x18
    584c:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    584e:	f04f 0303 	mov.w	r3, #3	; 0x3
    5852:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_pwm, &GPIO_InitStructureSortie);
    5854:	f107 0314 	add.w	r3, r7, #20	; 0x14
    5858:	6838      	ldr	r0, [r7, #0]
    585a:	4619      	mov	r1, r3
    585c:	f7fb ff28 	bl	16b0 <GPIO_Init>
}
    5860:	68fb      	ldr	r3, [r7, #12]
    5862:	4618      	mov	r0, r3
    5864:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5868:	46bd      	mov	sp, r7
    586a:	bdb0      	pop	{r4, r5, r7, pc}

0000586c <_ZN5RouesC1Ev>:
#include "roues.h"

Roues::Roues()
    586c:	b580      	push	{r7, lr}
    586e:	b086      	sub	sp, #24
    5870:	af04      	add	r7, sp, #16
    5872:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    5874:	687a      	ldr	r2, [r7, #4]
    5876:	f04f 0302 	mov.w	r3, #2	; 0x2
    587a:	9300      	str	r3, [sp, #0]
    587c:	4b11      	ldr	r3, [pc, #68]	(58c4 <_ZN5RouesC1Ev+0x58>)
    587e:	9301      	str	r3, [sp, #4]
    5880:	f04f 0340 	mov.w	r3, #64	; 0x40
    5884:	9302      	str	r3, [sp, #8]
    5886:	4610      	mov	r0, r2
    5888:	490f      	ldr	r1, [pc, #60]	(58c8 <_ZN5RouesC1Ev+0x5c>)
    588a:	f04f 0202 	mov.w	r2, #2	; 0x2
    588e:	4b0f      	ldr	r3, [pc, #60]	(58cc <_ZN5RouesC1Ev+0x60>)
    5890:	f007 fa5e 	bl	cd50 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	f103 0210 	add.w	r2, r3, #16	; 0x10
    589a:	f04f 0308 	mov.w	r3, #8	; 0x8
    589e:	9300      	str	r3, [sp, #0]
    58a0:	4b08      	ldr	r3, [pc, #32]	(58c4 <_ZN5RouesC1Ev+0x58>)
    58a2:	9301      	str	r3, [sp, #4]
    58a4:	f04f 0310 	mov.w	r3, #16	; 0x10
    58a8:	9302      	str	r3, [sp, #8]
    58aa:	4610      	mov	r0, r2
    58ac:	4906      	ldr	r1, [pc, #24]	(58c8 <_ZN5RouesC1Ev+0x5c>)
    58ae:	f04f 0204 	mov.w	r2, #4	; 0x4
    58b2:	4b06      	ldr	r3, [pc, #24]	(58cc <_ZN5RouesC1Ev+0x60>)
    58b4:	f007 fa4c 	bl	cd50 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    58b8:	687b      	ldr	r3, [r7, #4]
    58ba:	4618      	mov	r0, r3
    58bc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    58c0:	46bd      	mov	sp, r7
    58c2:	bd80      	pop	{r7, pc}
    58c4:	40011400 	.word	0x40011400
    58c8:	40000c00 	.word	0x40000c00
    58cc:	40010800 	.word	0x40010800

000058d0 <_ZN5RouesC2Ev>:
#include "roues.h"

Roues::Roues()
    58d0:	b580      	push	{r7, lr}
    58d2:	b086      	sub	sp, #24
    58d4:	af04      	add	r7, sp, #16
    58d6:	6078      	str	r0, [r7, #4]
 // pour la v3 :
#ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif
#ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
    : droite(TIM5, 4, GPIOA, GPIO_Pin_3, GPIOD, GPIO_Pin_4), gauche(TIM5, 2, GPIOA, GPIO_Pin_1, GPIOD, GPIO_Pin_6)
    58d8:	687a      	ldr	r2, [r7, #4]
    58da:	f04f 0302 	mov.w	r3, #2	; 0x2
    58de:	9300      	str	r3, [sp, #0]
    58e0:	4b11      	ldr	r3, [pc, #68]	(5928 <_ZN5RouesC2Ev+0x58>)
    58e2:	9301      	str	r3, [sp, #4]
    58e4:	f04f 0340 	mov.w	r3, #64	; 0x40
    58e8:	9302      	str	r3, [sp, #8]
    58ea:	4610      	mov	r0, r2
    58ec:	490f      	ldr	r1, [pc, #60]	(592c <_ZN5RouesC2Ev+0x5c>)
    58ee:	f04f 0202 	mov.w	r2, #2	; 0x2
    58f2:	4b0f      	ldr	r3, [pc, #60]	(5930 <_ZN5RouesC2Ev+0x60>)
    58f4:	f007 fa2c 	bl	cd50 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
    58f8:	687b      	ldr	r3, [r7, #4]
    58fa:	f103 0210 	add.w	r2, r3, #16	; 0x10
    58fe:	f04f 0308 	mov.w	r3, #8	; 0x8
    5902:	9300      	str	r3, [sp, #0]
    5904:	4b08      	ldr	r3, [pc, #32]	(5928 <_ZN5RouesC2Ev+0x58>)
    5906:	9301      	str	r3, [sp, #4]
    5908:	f04f 0310 	mov.w	r3, #16	; 0x10
    590c:	9302      	str	r3, [sp, #8]
    590e:	4610      	mov	r0, r2
    5910:	4906      	ldr	r1, [pc, #24]	(592c <_ZN5RouesC2Ev+0x5c>)
    5912:	f04f 0204 	mov.w	r2, #4	; 0x4
    5916:	4b06      	ldr	r3, [pc, #24]	(5930 <_ZN5RouesC2Ev+0x60>)
    5918:	f007 fa1a 	bl	cd50 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>
#ifdef STM32F40_41xxx // pour la STM32 H405 2014 v1 :
    : droite(TIM2, 2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_4), gauche(TIM2, 1, GPIOA, GPIO_Pin_1, GPIOC, GPIO_Pin_4)
#endif

{
}
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	4618      	mov	r0, r3
    5920:	f107 0708 	add.w	r7, r7, #8	; 0x8
    5924:	46bd      	mov	sp, r7
    5926:	bd80      	pop	{r7, pc}
    5928:	40011400 	.word	0x40011400
    592c:	40000c00 	.word	0x40000c00
    5930:	40010800 	.word	0x40010800

00005934 <_ZN6SensorC2Ev>:
#include "sensor.h"

Sensor::Sensor()
    5934:	b480      	push	{r7}
    5936:	b083      	sub	sp, #12
    5938:	af00      	add	r7, sp, #0
    593a:	6078      	str	r0, [r7, #4]
    593c:	687a      	ldr	r2, [r7, #4]
    593e:	4b04      	ldr	r3, [pc, #16]	(5950 <_ZN6SensorC2Ev+0x1c>)
    5940:	6013      	str	r3, [r2, #0]
{
}
    5942:	687b      	ldr	r3, [r7, #4]
    5944:	4618      	mov	r0, r3
    5946:	f107 070c 	add.w	r7, r7, #12	; 0xc
    594a:	46bd      	mov	sp, r7
    594c:	bc80      	pop	{r7}
    594e:	4770      	bx	lr
    5950:	0001f930 	.word	0x0001f930

00005954 <_ZN6SensorC1Ev>:
#include "sensor.h"

Sensor::Sensor()
    5954:	b480      	push	{r7}
    5956:	b083      	sub	sp, #12
    5958:	af00      	add	r7, sp, #0
    595a:	6078      	str	r0, [r7, #4]
    595c:	687a      	ldr	r2, [r7, #4]
    595e:	4b04      	ldr	r3, [pc, #16]	(5970 <_ZN6SensorC1Ev+0x1c>)
    5960:	6013      	str	r3, [r2, #0]
{
}
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	4618      	mov	r0, r3
    5966:	f107 070c 	add.w	r7, r7, #12	; 0xc
    596a:	46bd      	mov	sp, r7
    596c:	bc80      	pop	{r7}
    596e:	4770      	bx	lr
    5970:	0001f930 	.word	0x0001f930

00005974 <_ZN6SensorD0Ev>:

Sensor::~Sensor()
    5974:	b580      	push	{r7, lr}
    5976:	b082      	sub	sp, #8
    5978:	af00      	add	r7, sp, #0
    597a:	6078      	str	r0, [r7, #4]
    597c:	687a      	ldr	r2, [r7, #4]
    597e:	4b08      	ldr	r3, [pc, #32]	(59a0 <_ZN6SensorD0Ev+0x2c>)
    5980:	6013      	str	r3, [r2, #0]
{
}
    5982:	f04f 0301 	mov.w	r3, #1	; 0x1
    5986:	b2db      	uxtb	r3, r3
    5988:	2b00      	cmp	r3, #0
    598a:	d002      	beq.n	5992 <_ZN6SensorD0Ev+0x1e>
    598c:	6878      	ldr	r0, [r7, #4]
    598e:	f008 fd89 	bl	e4a4 <_ZdlPv>
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	4618      	mov	r0, r3
    5996:	f107 0708 	add.w	r7, r7, #8	; 0x8
    599a:	46bd      	mov	sp, r7
    599c:	bd80      	pop	{r7, pc}
    599e:	46c0      	nop			(mov r8, r8)
    59a0:	0001f930 	.word	0x0001f930

000059a4 <_ZN6SensorD1Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    59a4:	b580      	push	{r7, lr}
    59a6:	b082      	sub	sp, #8
    59a8:	af00      	add	r7, sp, #0
    59aa:	6078      	str	r0, [r7, #4]
    59ac:	687a      	ldr	r2, [r7, #4]
    59ae:	4b08      	ldr	r3, [pc, #32]	(59d0 <_ZN6SensorD1Ev+0x2c>)
    59b0:	6013      	str	r3, [r2, #0]
{
}
    59b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    59b6:	b2db      	uxtb	r3, r3
    59b8:	2b00      	cmp	r3, #0
    59ba:	d002      	beq.n	59c2 <_ZN6SensorD1Ev+0x1e>
    59bc:	6878      	ldr	r0, [r7, #4]
    59be:	f008 fd71 	bl	e4a4 <_ZdlPv>
    59c2:	687b      	ldr	r3, [r7, #4]
    59c4:	4618      	mov	r0, r3
    59c6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    59ca:	46bd      	mov	sp, r7
    59cc:	bd80      	pop	{r7, pc}
    59ce:	46c0      	nop			(mov r8, r8)
    59d0:	0001f930 	.word	0x0001f930

000059d4 <_ZN6SensorD2Ev>:

Sensor::Sensor()
{
}

Sensor::~Sensor()
    59d4:	b580      	push	{r7, lr}
    59d6:	b082      	sub	sp, #8
    59d8:	af00      	add	r7, sp, #0
    59da:	6078      	str	r0, [r7, #4]
    59dc:	687a      	ldr	r2, [r7, #4]
    59de:	4b08      	ldr	r3, [pc, #32]	(5a00 <_ZN6SensorD2Ev+0x2c>)
    59e0:	6013      	str	r3, [r2, #0]
{
}
    59e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    59e6:	b2db      	uxtb	r3, r3
    59e8:	2b00      	cmp	r3, #0
    59ea:	d002      	beq.n	59f2 <_ZN6SensorD2Ev+0x1e>
    59ec:	6878      	ldr	r0, [r7, #4]
    59ee:	f008 fd59 	bl	e4a4 <_ZdlPv>
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	4618      	mov	r0, r3
    59f6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    59fa:	46bd      	mov	sp, r7
    59fc:	bd80      	pop	{r7, pc}
    59fe:	46c0      	nop			(mov r8, r8)
    5a00:	0001f930 	.word	0x0001f930

00005a04 <_ZN7Sensors11sharpDetectEv>:
    }
   // sharpNameVector->resize();
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
    5a04:	b580      	push	{r7, lr}
    5a06:	b086      	sub	sp, #24
    5a08:	af00      	add	r7, sp, #0
    5a0a:	6078      	str	r0, [r7, #4]
{
    for (int i = 0; i< nbSharp; i++)
    5a0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a10:	617b      	str	r3, [r7, #20]
    5a12:	e022      	b.n	5a5a <_ZN7Sensors11sharpDetectEv+0x56>
    {
        if (sharps[i]->getValue().b == true)
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	685a      	ldr	r2, [r3, #4]
    5a18:	697b      	ldr	r3, [r7, #20]
    5a1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a1e:	4413      	add	r3, r2
    5a20:	681b      	ldr	r3, [r3, #0]
    5a22:	681b      	ldr	r3, [r3, #0]
    5a24:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5a28:	f8d3 c000 	ldr.w	ip, [r3]
    5a2c:	687b      	ldr	r3, [r7, #4]
    5a2e:	685a      	ldr	r2, [r3, #4]
    5a30:	697b      	ldr	r3, [r7, #20]
    5a32:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5a36:	4413      	add	r3, r2
    5a38:	681a      	ldr	r2, [r3, #0]
    5a3a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5a3e:	4618      	mov	r0, r3
    5a40:	4611      	mov	r1, r2
    5a42:	47e0      	blx	ip
    5a44:	7c3b      	ldrb	r3, [r7, #16]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d003      	beq.n	5a52 <_ZN7Sensors11sharpDetectEv+0x4e>
        {
            return true;
    5a4a:	f04f 0301 	mov.w	r3, #1	; 0x1
    5a4e:	603b      	str	r3, [r7, #0]
    5a50:	e00b      	b.n	5a6a <_ZN7Sensors11sharpDetectEv+0x66>
    return sharpNameVector;
}
#include "leds.h"
bool Sensors::sharpDetect()
{
    for (int i = 0; i< nbSharp; i++)
    5a52:	697b      	ldr	r3, [r7, #20]
    5a54:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5a58:	617b      	str	r3, [r7, #20]
    5a5a:	687b      	ldr	r3, [r7, #4]
    5a5c:	689a      	ldr	r2, [r3, #8]
    5a5e:	697b      	ldr	r3, [r7, #20]
    5a60:	429a      	cmp	r2, r3
    5a62:	dcd7      	bgt.n	5a14 <_ZN7Sensors11sharpDetectEv+0x10>
        if (sharps[i]->getValue().b == true)
        {
            return true;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5a64:	f04f 0300 	mov.w	r3, #0	; 0x0
    5a68:	603b      	str	r3, [r7, #0]
    5a6a:	683b      	ldr	r3, [r7, #0]
}
    5a6c:	4618      	mov	r0, r3
    5a6e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5a72:	46bd      	mov	sp, r7
    5a74:	bd80      	pop	{r7, pc}
    5a76:	46c0      	nop			(mov r8, r8)

00005a78 <_ZN7Sensors10getSensorsEv>:
    return outputSensorVector;
}

#endif

Sensors* Sensors::getSensors()
    5a78:	b480      	push	{r7}
    5a7a:	af00      	add	r7, sp, #0
{
    return Sensors::sensors;
    5a7c:	4b02      	ldr	r3, [pc, #8]	(5a88 <_ZN7Sensors10getSensorsEv+0x10>)
    5a7e:	681b      	ldr	r3, [r3, #0]
}
    5a80:	4618      	mov	r0, r3
    5a82:	46bd      	mov	sp, r7
    5a84:	bc80      	pop	{r7}
    5a86:	4770      	bx	lr
    5a88:	20000558 	.word	0x20000558

00005a8c <_ZN7Sensors19getSharpSensorsListEv>:
       sharps[i]->setActif();
    }
}


SharpSensor** Sensors::getSharpSensorsList()
    5a8c:	b480      	push	{r7}
    5a8e:	b083      	sub	sp, #12
    5a90:	af00      	add	r7, sp, #0
    5a92:	6078      	str	r0, [r7, #4]
{
    return Sensors::sharps;
    5a94:	687b      	ldr	r3, [r7, #4]
    5a96:	685b      	ldr	r3, [r3, #4]
}
    5a98:	4618      	mov	r0, r3
    5a9a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    5a9e:	46bd      	mov	sp, r7
    5aa0:	bc80      	pop	{r7}
    5aa2:	4770      	bx	lr

00005aa4 <_ZN7Sensors14activeAllSharpEv>:
            sharps[i]->unsetActif();
            break;
        }
    }
}
void Sensors::activeAllSharp()
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b084      	sub	sp, #16
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp;i++)
    5aac:	f04f 0300 	mov.w	r3, #0	; 0x0
    5ab0:	60fb      	str	r3, [r7, #12]
    5ab2:	e00d      	b.n	5ad0 <_ZN7Sensors14activeAllSharpEv+0x2c>
    {
       sharps[i]->setActif();
    5ab4:	687b      	ldr	r3, [r7, #4]
    5ab6:	685a      	ldr	r2, [r3, #4]
    5ab8:	68fb      	ldr	r3, [r7, #12]
    5aba:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5abe:	4413      	add	r3, r2
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	4618      	mov	r0, r3
    5ac4:	f007 f9dc 	bl	ce80 <_ZN11SharpSensor8setActifEv>
        }
    }
}
void Sensors::activeAllSharp()
{
    for (int i=0; i<nbSharp;i++)
    5ac8:	68fb      	ldr	r3, [r7, #12]
    5aca:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5ace:	60fb      	str	r3, [r7, #12]
    5ad0:	687b      	ldr	r3, [r7, #4]
    5ad2:	689a      	ldr	r2, [r3, #8]
    5ad4:	68fb      	ldr	r3, [r7, #12]
    5ad6:	429a      	cmp	r2, r3
    5ad8:	dcec      	bgt.n	5ab4 <_ZN7Sensors14activeAllSharpEv+0x10>
    {
       sharps[i]->setActif();
    }
}
    5ada:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5ade:	46bd      	mov	sp, r7
    5ae0:	bd80      	pop	{r7, pc}
    5ae2:	46c0      	nop			(mov r8, r8)

00005ae4 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE>:
    }
    return false;
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
    5ae4:	b580      	push	{r7, lr}
    5ae6:	b084      	sub	sp, #16
    5ae8:	af00      	add	r7, sp, #0
    5aea:	6078      	str	r0, [r7, #4]
    5aec:	460b      	mov	r3, r1
    5aee:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5af0:	f04f 0300 	mov.w	r3, #0	; 0x0
    5af4:	60fb      	str	r3, [r7, #12]
    5af6:	e022      	b.n	5b3e <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5af8:	687b      	ldr	r3, [r7, #4]
    5afa:	685a      	ldr	r2, [r3, #4]
    5afc:	68fb      	ldr	r3, [r7, #12]
    5afe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b02:	4413      	add	r3, r2
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	4618      	mov	r0, r3
    5b08:	f007 f9ae 	bl	ce68 <_ZN11SharpSensor7getNameEv>
    5b0c:	4603      	mov	r3, r0
    5b0e:	461a      	mov	r2, r3
    5b10:	78fb      	ldrb	r3, [r7, #3]
    5b12:	4293      	cmp	r3, r2
    5b14:	bf14      	ite	ne
    5b16:	2300      	movne	r3, #0
    5b18:	2301      	moveq	r3, #1
    5b1a:	b2db      	uxtb	r3, r3
    5b1c:	2b00      	cmp	r3, #0
    5b1e:	d00a      	beq.n	5b36 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->setActif();
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	685a      	ldr	r2, [r3, #4]
    5b24:	68fb      	ldr	r3, [r7, #12]
    5b26:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b2a:	4413      	add	r3, r2
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	4618      	mov	r0, r3
    5b30:	f007 f9a6 	bl	ce80 <_ZN11SharpSensor8setActifEv>
    5b34:	e008      	b.n	5b48 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x64>
}
#endif

void Sensors::activeSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5b36:	68fb      	ldr	r3, [r7, #12]
    5b38:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5b3c:	60fb      	str	r3, [r7, #12]
    5b3e:	687b      	ldr	r3, [r7, #4]
    5b40:	689a      	ldr	r2, [r3, #8]
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	429a      	cmp	r2, r3
    5b46:	dcd7      	bgt.n	5af8 <_ZN7Sensors11activeSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->setActif();
            break;
        }
    }
}
    5b48:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5b4c:	46bd      	mov	sp, r7
    5b4e:	bd80      	pop	{r7, pc}

00005b50 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE>:
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
    5b50:	b580      	push	{r7, lr}
    5b52:	b088      	sub	sp, #32
    5b54:	af00      	add	r7, sp, #0
    5b56:	60f8      	str	r0, [r7, #12]
    5b58:	460b      	mov	r3, r1
    5b5a:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i< nbSharp; i++)
    5b5c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5b60:	61fb      	str	r3, [r7, #28]
    5b62:	e032      	b.n	5bca <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x7a>
    {
        if (sharps[i]->getName() == name)
    5b64:	68fb      	ldr	r3, [r7, #12]
    5b66:	685a      	ldr	r2, [r3, #4]
    5b68:	69fb      	ldr	r3, [r7, #28]
    5b6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b6e:	4413      	add	r3, r2
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	4618      	mov	r0, r3
    5b74:	f007 f978 	bl	ce68 <_ZN11SharpSensor7getNameEv>
    5b78:	4603      	mov	r3, r0
    5b7a:	461a      	mov	r2, r3
    5b7c:	7afb      	ldrb	r3, [r7, #11]
    5b7e:	4293      	cmp	r3, r2
    5b80:	bf14      	ite	ne
    5b82:	2300      	movne	r3, #0
    5b84:	2301      	moveq	r3, #1
    5b86:	b2db      	uxtb	r3, r3
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d01a      	beq.n	5bc2 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x72>
            return sharps[i]->getValue().b;
    5b8c:	68fb      	ldr	r3, [r7, #12]
    5b8e:	685a      	ldr	r2, [r3, #4]
    5b90:	69fb      	ldr	r3, [r7, #28]
    5b92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b96:	4413      	add	r3, r2
    5b98:	681b      	ldr	r3, [r3, #0]
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ba0:	f8d3 c000 	ldr.w	ip, [r3]
    5ba4:	68fb      	ldr	r3, [r7, #12]
    5ba6:	685a      	ldr	r2, [r3, #4]
    5ba8:	69fb      	ldr	r3, [r7, #28]
    5baa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5bae:	4413      	add	r3, r2
    5bb0:	681a      	ldr	r2, [r3, #0]
    5bb2:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5bb6:	4618      	mov	r0, r3
    5bb8:	4611      	mov	r1, r2
    5bba:	47e0      	blx	ip
    5bbc:	7e3b      	ldrb	r3, [r7, #24]
    5bbe:	607b      	str	r3, [r7, #4]
    5bc0:	e00b      	b.n	5bda <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x8a>
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

bool Sensors::detectedSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i< nbSharp; i++)
    5bc2:	69fb      	ldr	r3, [r7, #28]
    5bc4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5bc8:	61fb      	str	r3, [r7, #28]
    5bca:	68fb      	ldr	r3, [r7, #12]
    5bcc:	689a      	ldr	r2, [r3, #8]
    5bce:	69fb      	ldr	r3, [r7, #28]
    5bd0:	429a      	cmp	r2, r3
    5bd2:	dcc7      	bgt.n	5b64 <_ZN7Sensors13detectedSharpEN11SharpSensor9SharpNameE+0x14>
    {
        if (sharps[i]->getName() == name)
            return sharps[i]->getValue().b;
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5bd4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5bd8:	607b      	str	r3, [r7, #4]
    5bda:	687b      	ldr	r3, [r7, #4]
}
    5bdc:	4618      	mov	r0, r3
    5bde:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5be2:	46bd      	mov	sp, r7
    5be4:	bd80      	pop	{r7, pc}
    5be6:	46c0      	nop			(mov r8, r8)

00005be8 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE>:
            break;
        }
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
    5be8:	b580      	push	{r7, lr}
    5bea:	b084      	sub	sp, #16
    5bec:	af00      	add	r7, sp, #0
    5bee:	6078      	str	r0, [r7, #4]
    5bf0:	460b      	mov	r3, r1
    5bf2:	70fb      	strb	r3, [r7, #3]
{
    for (int i=0; i<nbSharp;i++)
    5bf4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5bf8:	60fb      	str	r3, [r7, #12]
    5bfa:	e022      	b.n	5c42 <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x5a>
    {
        if (sharps[i]->getName() == name)
    5bfc:	687b      	ldr	r3, [r7, #4]
    5bfe:	685a      	ldr	r2, [r3, #4]
    5c00:	68fb      	ldr	r3, [r7, #12]
    5c02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c06:	4413      	add	r3, r2
    5c08:	681b      	ldr	r3, [r3, #0]
    5c0a:	4618      	mov	r0, r3
    5c0c:	f007 f92c 	bl	ce68 <_ZN11SharpSensor7getNameEv>
    5c10:	4603      	mov	r3, r0
    5c12:	461a      	mov	r2, r3
    5c14:	78fb      	ldrb	r3, [r7, #3]
    5c16:	4293      	cmp	r3, r2
    5c18:	bf14      	ite	ne
    5c1a:	2300      	movne	r3, #0
    5c1c:	2301      	moveq	r3, #1
    5c1e:	b2db      	uxtb	r3, r3
    5c20:	2b00      	cmp	r3, #0
    5c22:	d00a      	beq.n	5c3a <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x52>
        {
            sharps[i]->unsetActif();
    5c24:	687b      	ldr	r3, [r7, #4]
    5c26:	685a      	ldr	r2, [r3, #4]
    5c28:	68fb      	ldr	r3, [r7, #12]
    5c2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c2e:	4413      	add	r3, r2
    5c30:	681b      	ldr	r3, [r3, #0]
    5c32:	4618      	mov	r0, r3
    5c34:	f007 f932 	bl	ce9c <_ZN11SharpSensor10unsetActifEv>
    5c38:	e008      	b.n	5c4c <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x64>
    }
}

void Sensors::desactiveSharp(SharpSensor::SharpName name)
{
    for (int i=0; i<nbSharp;i++)
    5c3a:	68fb      	ldr	r3, [r7, #12]
    5c3c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5c40:	60fb      	str	r3, [r7, #12]
    5c42:	687b      	ldr	r3, [r7, #4]
    5c44:	689a      	ldr	r2, [r3, #8]
    5c46:	68fb      	ldr	r3, [r7, #12]
    5c48:	429a      	cmp	r2, r3
    5c4a:	dcd7      	bgt.n	5bfc <_ZN7Sensors14desactiveSharpEN11SharpSensor9SharpNameE+0x14>
        {
            sharps[i]->unsetActif();
            break;
        }
    }
}
    5c4c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    5c50:	46bd      	mov	sp, r7
    5c52:	bd80      	pop	{r7, pc}

00005c54 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE>:
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
    5c54:	b580      	push	{r7, lr}
    5c56:	b088      	sub	sp, #32
    5c58:	af00      	add	r7, sp, #0
    5c5a:	60f8      	str	r0, [r7, #12]
    5c5c:	460b      	mov	r3, r1
    5c5e:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5c60:	f04f 0300 	mov.w	r3, #0	; 0x0
    5c64:	61fb      	str	r3, [r7, #28]
    5c66:	e032      	b.n	5cce <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x7a>
    {
        if (limitSwitchs[i]->getName() == limitSwitchName)
    5c68:	68fb      	ldr	r3, [r7, #12]
    5c6a:	69da      	ldr	r2, [r3, #28]
    5c6c:	69fb      	ldr	r3, [r7, #28]
    5c6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c72:	4413      	add	r3, r2
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	4618      	mov	r0, r3
    5c78:	f006 faae 	bl	c1d8 <_ZN17LimitSwitchSensor7getNameEv>
    5c7c:	4603      	mov	r3, r0
    5c7e:	461a      	mov	r2, r3
    5c80:	7afb      	ldrb	r3, [r7, #11]
    5c82:	4293      	cmp	r3, r2
    5c84:	bf14      	ite	ne
    5c86:	2300      	movne	r3, #0
    5c88:	2301      	moveq	r3, #1
    5c8a:	b2db      	uxtb	r3, r3
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d01a      	beq.n	5cc6 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x72>
        {
            return limitSwitchs[i]->getValue().b;
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	69da      	ldr	r2, [r3, #28]
    5c94:	69fb      	ldr	r3, [r7, #28]
    5c96:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5c9a:	4413      	add	r3, r2
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ca4:	f8d3 c000 	ldr.w	ip, [r3]
    5ca8:	68fb      	ldr	r3, [r7, #12]
    5caa:	69da      	ldr	r2, [r3, #28]
    5cac:	69fb      	ldr	r3, [r7, #28]
    5cae:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cb2:	4413      	add	r3, r2
    5cb4:	681a      	ldr	r2, [r3, #0]
    5cb6:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5cba:	4618      	mov	r0, r3
    5cbc:	4611      	mov	r1, r2
    5cbe:	47e0      	blx	ip
    5cc0:	7e3b      	ldrb	r3, [r7, #24]
    5cc2:	607b      	str	r3, [r7, #4]
    5cc4:	e00b      	b.n	5cde <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x8a>
}

#ifdef ROBOTHW
bool Sensors::detectedLimitSwitch(LimitSwitchSensor::LimitSwitchName limitSwitchName)
{
    for (int i = 0; i<nbLimitSwitch; i++)
    5cc6:	69fb      	ldr	r3, [r7, #28]
    5cc8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5ccc:	61fb      	str	r3, [r7, #28]
    5cce:	68fb      	ldr	r3, [r7, #12]
    5cd0:	6a1a      	ldr	r2, [r3, #32]
    5cd2:	69fb      	ldr	r3, [r7, #28]
    5cd4:	429a      	cmp	r2, r3
    5cd6:	dcc7      	bgt.n	5c68 <_ZN7Sensors19detectedLimitSwitchEN17LimitSwitchSensor15LimitSwitchNameE+0x14>
        if (limitSwitchs[i]->getName() == limitSwitchName)
        {
            return limitSwitchs[i]->getValue().b;
        }
    }
    return false;
    5cd8:	f04f 0300 	mov.w	r3, #0	; 0x0
    5cdc:	607b      	str	r3, [r7, #4]
    5cde:	687b      	ldr	r3, [r7, #4]
}
    5ce0:	4618      	mov	r0, r3
    5ce2:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5ce6:	46bd      	mov	sp, r7
    5ce8:	bd80      	pop	{r7, pc}
    5cea:	46c0      	nop			(mov r8, r8)

00005cec <_ZN7Sensors6updateEv>:
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#endif

void Sensors::update()
    5cec:	b580      	push	{r7, lr}
    5cee:	b086      	sub	sp, #24
    5cf0:	af00      	add	r7, sp, #0
    5cf2:	6078      	str	r0, [r7, #4]
{
    for (int i=0; i<nbSharp; i++)
    5cf4:	f04f 0300 	mov.w	r3, #0	; 0x0
    5cf8:	60fb      	str	r3, [r7, #12]
    5cfa:	e00d      	b.n	5d18 <_ZN7Sensors6updateEv+0x2c>
    {
        sharps[i]->updateValue();
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	685a      	ldr	r2, [r3, #4]
    5d00:	68fb      	ldr	r3, [r7, #12]
    5d02:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d06:	4413      	add	r3, r2
    5d08:	681b      	ldr	r3, [r3, #0]
    5d0a:	4618      	mov	r0, r3
    5d0c:	f007 f8d4 	bl	ceb8 <_ZN11SharpSensor11updateValueEv>

#endif

void Sensors::update()
{
    for (int i=0; i<nbSharp; i++)
    5d10:	68fb      	ldr	r3, [r7, #12]
    5d12:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5d16:	60fb      	str	r3, [r7, #12]
    5d18:	687b      	ldr	r3, [r7, #4]
    5d1a:	689a      	ldr	r2, [r3, #8]
    5d1c:	68fb      	ldr	r3, [r7, #12]
    5d1e:	429a      	cmp	r2, r3
    5d20:	dcec      	bgt.n	5cfc <_ZN7Sensors6updateEv+0x10>
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    5d22:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d26:	613b      	str	r3, [r7, #16]
    5d28:	e00d      	b.n	5d46 <_ZN7Sensors6updateEv+0x5a>
    {
        ligthBarriers[i]->updateValue();
    5d2a:	687b      	ldr	r3, [r7, #4]
    5d2c:	695a      	ldr	r2, [r3, #20]
    5d2e:	693b      	ldr	r3, [r7, #16]
    5d30:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d34:	4413      	add	r3, r2
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	4618      	mov	r0, r3
    5d3a:	f006 f92f 	bl	bf9c <_ZN18LigthBarrierSensor11updateValueEv>
    for (int i=0; i<nbSharp; i++)
    {
        sharps[i]->updateValue();
    }
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    5d3e:	693b      	ldr	r3, [r7, #16]
    5d40:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5d44:	613b      	str	r3, [r7, #16]
    5d46:	687b      	ldr	r3, [r7, #4]
    5d48:	699a      	ldr	r2, [r3, #24]
    5d4a:	693b      	ldr	r3, [r7, #16]
    5d4c:	429a      	cmp	r2, r3
    5d4e:	dcec      	bgt.n	5d2a <_ZN7Sensors6updateEv+0x3e>
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    5d50:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d54:	617b      	str	r3, [r7, #20]
    5d56:	e00d      	b.n	5d74 <_ZN7Sensors6updateEv+0x88>
    {
        limitSwitchs[i]->updateValue();
    5d58:	687b      	ldr	r3, [r7, #4]
    5d5a:	69da      	ldr	r2, [r3, #28]
    5d5c:	697b      	ldr	r3, [r7, #20]
    5d5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5d62:	4413      	add	r3, r2
    5d64:	681b      	ldr	r3, [r3, #0]
    5d66:	4618      	mov	r0, r3
    5d68:	f006 fa42 	bl	c1f0 <_ZN17LimitSwitchSensor11updateValueEv>
#ifdef ROBOTHW
    for (int i=0; i<nbLigthBarrier; i++)
    {
        ligthBarriers[i]->updateValue();
    }
    for (int i=0; i<nbLimitSwitch; i++)
    5d6c:	697b      	ldr	r3, [r7, #20]
    5d6e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5d72:	617b      	str	r3, [r7, #20]
    5d74:	687b      	ldr	r3, [r7, #4]
    5d76:	6a1a      	ldr	r2, [r3, #32]
    5d78:	697b      	ldr	r3, [r7, #20]
    5d7a:	429a      	cmp	r2, r3
    5d7c:	dcec      	bgt.n	5d58 <_ZN7Sensors6updateEv+0x6c>
    {
        limitSwitchs[i]->updateValue();
    }
#endif
    // Les autres n'ont pas besoin d'être mis à jour car on obtient la valeur directement en lisant la valeur de la pin
}
    5d7e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    5d82:	46bd      	mov	sp, r7
    5d84:	bd80      	pop	{r7, pc}
    5d86:	46c0      	nop			(mov r8, r8)

00005d88 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE>:
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
    5d88:	b580      	push	{r7, lr}
    5d8a:	b088      	sub	sp, #32
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	60f8      	str	r0, [r7, #12]
    5d90:	460b      	mov	r3, r1
    5d92:	72fb      	strb	r3, [r7, #11]
{
    for (int i=0; i<nbLigthBarrier; i++)
    5d94:	f04f 0300 	mov.w	r3, #0	; 0x0
    5d98:	61fb      	str	r3, [r7, #28]
    5d9a:	e032      	b.n	5e02 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x7a>
    {
        if(ligthBarriers[i]->getName() == name)
    5d9c:	68fb      	ldr	r3, [r7, #12]
    5d9e:	695a      	ldr	r2, [r3, #20]
    5da0:	69fb      	ldr	r3, [r7, #28]
    5da2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5da6:	4413      	add	r3, r2
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	4618      	mov	r0, r3
    5dac:	f006 f8ea 	bl	bf84 <_ZN18LigthBarrierSensor7getNameEv>
    5db0:	4603      	mov	r3, r0
    5db2:	461a      	mov	r2, r3
    5db4:	7afb      	ldrb	r3, [r7, #11]
    5db6:	4293      	cmp	r3, r2
    5db8:	bf14      	ite	ne
    5dba:	2300      	movne	r3, #0
    5dbc:	2301      	moveq	r3, #1
    5dbe:	b2db      	uxtb	r3, r3
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d01a      	beq.n	5dfa <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x72>
        {
            return ligthBarriers[i]->getValue().b;
    5dc4:	68fb      	ldr	r3, [r7, #12]
    5dc6:	695a      	ldr	r2, [r3, #20]
    5dc8:	69fb      	ldr	r3, [r7, #28]
    5dca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5dce:	4413      	add	r3, r2
    5dd0:	681b      	ldr	r3, [r3, #0]
    5dd2:	681b      	ldr	r3, [r3, #0]
    5dd4:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5dd8:	f8d3 c000 	ldr.w	ip, [r3]
    5ddc:	68fb      	ldr	r3, [r7, #12]
    5dde:	695a      	ldr	r2, [r3, #20]
    5de0:	69fb      	ldr	r3, [r7, #28]
    5de2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5de6:	4413      	add	r3, r2
    5de8:	681a      	ldr	r2, [r3, #0]
    5dea:	f107 0310 	add.w	r3, r7, #16	; 0x10
    5dee:	4618      	mov	r0, r3
    5df0:	4611      	mov	r1, r2
    5df2:	47e0      	blx	ip
    5df4:	7e3b      	ldrb	r3, [r7, #24]
    5df6:	607b      	str	r3, [r7, #4]
    5df8:	e00b      	b.n	5e12 <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x8a>
    return ligthBarrierNameVector;
}

bool Sensors::detectedLigthBarrier(LigthBarrierSensor::LigthBarrierName name)
{
    for (int i=0; i<nbLigthBarrier; i++)
    5dfa:	69fb      	ldr	r3, [r7, #28]
    5dfc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5e00:	61fb      	str	r3, [r7, #28]
    5e02:	68fb      	ldr	r3, [r7, #12]
    5e04:	699a      	ldr	r2, [r3, #24]
    5e06:	69fb      	ldr	r3, [r7, #28]
    5e08:	429a      	cmp	r2, r3
    5e0a:	dcc7      	bgt.n	5d9c <_ZN7Sensors20detectedLigthBarrierEN18LigthBarrierSensor16LigthBarrierNameE+0x14>
        if(ligthBarriers[i]->getName() == name)
        {
            return ligthBarriers[i]->getValue().b;
        }
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
    5e0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e10:	607b      	str	r3, [r7, #4]
    5e12:	687b      	ldr	r3, [r7, #4]
}
    5e14:	4618      	mov	r0, r3
    5e16:	f107 0720 	add.w	r7, r7, #32	; 0x20
    5e1a:	46bd      	mov	sp, r7
    5e1c:	bd80      	pop	{r7, pc}
    5e1e:	46c0      	nop			(mov r8, r8)

00005e20 <_ZN7Sensors20detectedLigthBarrierEv>:
    }
    return -1;
}

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
    5e20:	b590      	push	{r4, r7, lr}
    5e22:	b089      	sub	sp, #36
    5e24:	af00      	add	r7, sp, #0
    5e26:	6078      	str	r0, [r7, #4]
{
    ligthBarrierNameVector->reset();
    5e28:	687b      	ldr	r3, [r7, #4]
    5e2a:	6adb      	ldr	r3, [r3, #44]
    5e2c:	4618      	mov	r0, r3
    5e2e:	f014 f983 	bl	1a138 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>
    for (int i=0; i<nbLigthBarrier; i++)
    5e32:	f04f 0300 	mov.w	r3, #0	; 0x0
    5e36:	61fb      	str	r3, [r7, #28]
    5e38:	e032      	b.n	5ea0 <_ZN7Sensors20detectedLigthBarrierEv+0x80>
    {
        if(ligthBarriers[i]->getValue().b)
    5e3a:	687b      	ldr	r3, [r7, #4]
    5e3c:	695a      	ldr	r2, [r3, #20]
    5e3e:	69fb      	ldr	r3, [r7, #28]
    5e40:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e44:	4413      	add	r3, r2
    5e46:	681b      	ldr	r3, [r3, #0]
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5e4e:	f8d3 c000 	ldr.w	ip, [r3]
    5e52:	687b      	ldr	r3, [r7, #4]
    5e54:	695a      	ldr	r2, [r3, #20]
    5e56:	69fb      	ldr	r3, [r7, #28]
    5e58:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e5c:	4413      	add	r3, r2
    5e5e:	681a      	ldr	r2, [r3, #0]
    5e60:	f107 030c 	add.w	r3, r7, #12	; 0xc
    5e64:	4618      	mov	r0, r3
    5e66:	4611      	mov	r1, r2
    5e68:	47e0      	blx	ip
    5e6a:	7d3b      	ldrb	r3, [r7, #20]
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d013      	beq.n	5e98 <_ZN7Sensors20detectedLigthBarrierEv+0x78>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
    5e70:	687b      	ldr	r3, [r7, #4]
    5e72:	6adc      	ldr	r4, [r3, #44]
    5e74:	687b      	ldr	r3, [r7, #4]
    5e76:	695a      	ldr	r2, [r3, #20]
    5e78:	69fb      	ldr	r3, [r7, #28]
    5e7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e7e:	4413      	add	r3, r2
    5e80:	681b      	ldr	r3, [r3, #0]
    5e82:	4618      	mov	r0, r3
    5e84:	f006 f87e 	bl	bf84 <_ZN18LigthBarrierSensor7getNameEv>
    5e88:	4603      	mov	r3, r0
    5e8a:	76fb      	strb	r3, [r7, #27]
    5e8c:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    5e90:	4620      	mov	r0, r4
    5e92:	4619      	mov	r1, r3
    5e94:	f014 f9c4 	bl	1a220 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LigthBarrierNameVector* Sensors::detectedLigthBarrier()
{
    ligthBarrierNameVector->reset();
    for (int i=0; i<nbLigthBarrier; i++)
    5e98:	69fb      	ldr	r3, [r7, #28]
    5e9a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5e9e:	61fb      	str	r3, [r7, #28]
    5ea0:	687b      	ldr	r3, [r7, #4]
    5ea2:	699a      	ldr	r2, [r3, #24]
    5ea4:	69fb      	ldr	r3, [r7, #28]
    5ea6:	429a      	cmp	r2, r3
    5ea8:	dcc7      	bgt.n	5e3a <_ZN7Sensors20detectedLigthBarrierEv+0x1a>
        {
            ligthBarrierNameVector->push_back(ligthBarriers[i]->getName());
        }
    }
//    ligthBarrierNameVector->resize();
    return ligthBarrierNameVector;
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	6adb      	ldr	r3, [r3, #44]
}
    5eae:	4618      	mov	r0, r3
    5eb0:	f107 0724 	add.w	r7, r7, #36	; 0x24
    5eb4:	46bd      	mov	sp, r7
    5eb6:	bd90      	pop	{r4, r7, pc}

00005eb8 <_ZN7Sensors18getValueUltrasoundEt>:
    return Sensors::sensors;
}



Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
    5eb8:	b590      	push	{r4, r7, lr}
    5eba:	b087      	sub	sp, #28
    5ebc:	af00      	add	r7, sp, #0
    5ebe:	6078      	str	r0, [r7, #4]
    5ec0:	460b      	mov	r3, r1
    5ec2:	807b      	strh	r3, [r7, #2]
{
    outputSensorVector->reset();
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	6b1b      	ldr	r3, [r3, #48]
    5ec8:	4618      	mov	r0, r3
    5eca:	f014 f927 	bl	1a11c <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    5ece:	f04f 0300 	mov.w	r3, #0	; 0x0
    5ed2:	617b      	str	r3, [r7, #20]
    5ed4:	e030      	b.n	5f38 <_ZN7Sensors18getValueUltrasoundEt+0x80>
    {
        Sensor::OutputSensor v = ultrasounds[i]->getValue();
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	68da      	ldr	r2, [r3, #12]
    5eda:	697b      	ldr	r3, [r7, #20]
    5edc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ee0:	4413      	add	r3, r2
    5ee2:	681b      	ldr	r3, [r3, #0]
    5ee4:	681b      	ldr	r3, [r3, #0]
    5ee6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5eea:	f8d3 c000 	ldr.w	ip, [r3]
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	68da      	ldr	r2, [r3, #12]
    5ef2:	697b      	ldr	r3, [r7, #20]
    5ef4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ef8:	4413      	add	r3, r2
    5efa:	681a      	ldr	r2, [r3, #0]
    5efc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5f00:	4618      	mov	r0, r3
    5f02:	4611      	mov	r1, r2
    5f04:	47e0      	blx	ip
         if (v.f < distance)
    5f06:	68fc      	ldr	r4, [r7, #12]
    5f08:	887b      	ldrh	r3, [r7, #2]
    5f0a:	4618      	mov	r0, r3
    5f0c:	f012 fe64 	bl	18bd8 <__aeabi_i2f>
    5f10:	4603      	mov	r3, r0
    5f12:	4620      	mov	r0, r4
    5f14:	4619      	mov	r1, r3
    5f16:	f013 f84f 	bl	18fb8 <__aeabi_fcmplt>
    5f1a:	4603      	mov	r3, r0
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d007      	beq.n	5f30 <_ZN7Sensors18getValueUltrasoundEt+0x78>
         {
             outputSensorVector->push_back(v);
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	6b1b      	ldr	r3, [r3, #48]
    5f24:	f107 0208 	add.w	r2, r7, #8	; 0x8
    5f28:	4618      	mov	r0, r3
    5f2a:	4611      	mov	r1, r2
    5f2c:	f014 f9d4 	bl	1a2d8 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound(uint16_t distance)
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    5f30:	697b      	ldr	r3, [r7, #20]
    5f32:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5f36:	617b      	str	r3, [r7, #20]
    5f38:	687b      	ldr	r3, [r7, #4]
    5f3a:	691a      	ldr	r2, [r3, #16]
    5f3c:	697b      	ldr	r3, [r7, #20]
    5f3e:	429a      	cmp	r2, r3
    5f40:	dcc9      	bgt.n	5ed6 <_ZN7Sensors18getValueUltrasoundEt+0x1e>
         {
             outputSensorVector->push_back(v);
         }
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	6b1b      	ldr	r3, [r3, #48]
}
    5f46:	4618      	mov	r0, r3
    5f48:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    5f4c:	46bd      	mov	sp, r7
    5f4e:	bd90      	pop	{r4, r7, pc}

00005f50 <_ZN7Sensors18getValueUltrasoundEv>:
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
}


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
    5f50:	b590      	push	{r4, r7, lr}
    5f52:	b087      	sub	sp, #28
    5f54:	af00      	add	r7, sp, #0
    5f56:	6078      	str	r0, [r7, #4]
{
    outputSensorVector->reset();
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	6b1b      	ldr	r3, [r3, #48]
    5f5c:	4618      	mov	r0, r3
    5f5e:	f014 f8dd 	bl	1a11c <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>
    for (int i = 0; i < nbUltrasound; i++)
    5f62:	f04f 0300 	mov.w	r3, #0	; 0x0
    5f66:	617b      	str	r3, [r7, #20]
    5f68:	e023      	b.n	5fb2 <_ZN7Sensors18getValueUltrasoundEv+0x62>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	6b1c      	ldr	r4, [r3, #48]
    5f6e:	687b      	ldr	r3, [r7, #4]
    5f70:	68da      	ldr	r2, [r3, #12]
    5f72:	697b      	ldr	r3, [r7, #20]
    5f74:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f78:	4413      	add	r3, r2
    5f7a:	681b      	ldr	r3, [r3, #0]
    5f7c:	681b      	ldr	r3, [r3, #0]
    5f7e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5f82:	f8d3 c000 	ldr.w	ip, [r3]
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	68da      	ldr	r2, [r3, #12]
    5f8a:	697b      	ldr	r3, [r7, #20]
    5f8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f90:	4413      	add	r3, r2
    5f92:	681a      	ldr	r2, [r3, #0]
    5f94:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5f98:	4618      	mov	r0, r3
    5f9a:	4611      	mov	r1, r2
    5f9c:	47e0      	blx	ip
    5f9e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    5fa2:	4620      	mov	r0, r4
    5fa4:	4619      	mov	r1, r3
    5fa6:	f014 f997 	bl	1a2d8 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>


Sensors::OutputSensorVector* Sensors::getValueUltrasound()
{
    outputSensorVector->reset();
    for (int i = 0; i < nbUltrasound; i++)
    5faa:	697b      	ldr	r3, [r7, #20]
    5fac:	f103 0301 	add.w	r3, r3, #1	; 0x1
    5fb0:	617b      	str	r3, [r7, #20]
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	691a      	ldr	r2, [r3, #16]
    5fb6:	697b      	ldr	r3, [r7, #20]
    5fb8:	429a      	cmp	r2, r3
    5fba:	dcd6      	bgt.n	5f6a <_ZN7Sensors18getValueUltrasoundEv+0x1a>
    {
        outputSensorVector->push_back(ultrasounds[i]->getValue());
    }
//    outputSensorVector->resize();
    return outputSensorVector;
    5fbc:	687b      	ldr	r3, [r7, #4]
    5fbe:	6b1b      	ldr	r3, [r3, #48]
}
    5fc0:	4618      	mov	r0, r3
    5fc2:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    5fc6:	46bd      	mov	sp, r7
    5fc8:	bd90      	pop	{r4, r7, pc}
    5fca:	46c0      	nop			(mov r8, r8)

00005fcc <_ZN7Sensors19detectedLimitSwitchEv>:
    }
    return false; // Si aucun capteur n'a ce nom (exemple NONE)
}

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
    5fcc:	b590      	push	{r4, r7, lr}
    5fce:	b089      	sub	sp, #36
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	6078      	str	r0, [r7, #4]
{
    limitSwitchNameVector->reset();
    5fd4:	687b      	ldr	r3, [r7, #4]
    5fd6:	6a9b      	ldr	r3, [r3, #40]
    5fd8:	4618      	mov	r0, r3
    5fda:	f014 f891 	bl	1a100 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>
    for (int i = 0; i<nbLimitSwitch; i++)
    5fde:	f04f 0300 	mov.w	r3, #0	; 0x0
    5fe2:	61fb      	str	r3, [r7, #28]
    5fe4:	e032      	b.n	604c <_ZN7Sensors19detectedLimitSwitchEv+0x80>
    {
        if (limitSwitchs[i]->getValue().b)
    5fe6:	687b      	ldr	r3, [r7, #4]
    5fe8:	69da      	ldr	r2, [r3, #28]
    5fea:	69fb      	ldr	r3, [r7, #28]
    5fec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ff0:	4413      	add	r3, r2
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	681b      	ldr	r3, [r3, #0]
    5ff6:	f103 0308 	add.w	r3, r3, #8	; 0x8
    5ffa:	f8d3 c000 	ldr.w	ip, [r3]
    5ffe:	687b      	ldr	r3, [r7, #4]
    6000:	69da      	ldr	r2, [r3, #28]
    6002:	69fb      	ldr	r3, [r7, #28]
    6004:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6008:	4413      	add	r3, r2
    600a:	681a      	ldr	r2, [r3, #0]
    600c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6010:	4618      	mov	r0, r3
    6012:	4611      	mov	r1, r2
    6014:	47e0      	blx	ip
    6016:	7d3b      	ldrb	r3, [r7, #20]
    6018:	2b00      	cmp	r3, #0
    601a:	d013      	beq.n	6044 <_ZN7Sensors19detectedLimitSwitchEv+0x78>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
    601c:	687b      	ldr	r3, [r7, #4]
    601e:	6a9c      	ldr	r4, [r3, #40]
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	69da      	ldr	r2, [r3, #28]
    6024:	69fb      	ldr	r3, [r7, #28]
    6026:	ea4f 0383 	mov.w	r3, r3, lsl #2
    602a:	4413      	add	r3, r2
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	4618      	mov	r0, r3
    6030:	f006 f8d2 	bl	c1d8 <_ZN17LimitSwitchSensor7getNameEv>
    6034:	4603      	mov	r3, r0
    6036:	76fb      	strb	r3, [r7, #27]
    6038:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    603c:	4620      	mov	r0, r4
    603e:	4619      	mov	r1, r3
    6040:	f014 f9ce 	bl	1a3e0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>

#ifdef ROBOTHW
Sensors::LimitSwitchNameVector* Sensors::detectedLimitSwitch()
{
    limitSwitchNameVector->reset();
    for (int i = 0; i<nbLimitSwitch; i++)
    6044:	69fb      	ldr	r3, [r7, #28]
    6046:	f103 0301 	add.w	r3, r3, #1	; 0x1
    604a:	61fb      	str	r3, [r7, #28]
    604c:	687b      	ldr	r3, [r7, #4]
    604e:	6a1a      	ldr	r2, [r3, #32]
    6050:	69fb      	ldr	r3, [r7, #28]
    6052:	429a      	cmp	r2, r3
    6054:	dcc7      	bgt.n	5fe6 <_ZN7Sensors19detectedLimitSwitchEv+0x1a>
        {
            limitSwitchNameVector->push_back(limitSwitchs[i]->getName());
        }
    }
//    limitSwitchNameVector->resize();
    return limitSwitchNameVector;
    6056:	687b      	ldr	r3, [r7, #4]
    6058:	6a9b      	ldr	r3, [r3, #40]
}
    605a:	4618      	mov	r0, r3
    605c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    6060:	46bd      	mov	sp, r7
    6062:	bd90      	pop	{r4, r7, pc}

00006064 <_ZN7Sensors13detectedSharpEv>:
    #endif
    if (outputSensorVector)
        delete outputSensorVector;
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
    6064:	b590      	push	{r4, r7, lr}
    6066:	b089      	sub	sp, #36
    6068:	af00      	add	r7, sp, #0
    606a:	6078      	str	r0, [r7, #4]
{
    sharpNameVector->reset();
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	6a5b      	ldr	r3, [r3, #36]
    6070:	4618      	mov	r0, r3
    6072:	f014 f837 	bl	1a0e4 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>
    for (int i = 0; i< nbSharp; i++)
    6076:	f04f 0300 	mov.w	r3, #0	; 0x0
    607a:	61fb      	str	r3, [r7, #28]
    607c:	e032      	b.n	60e4 <_ZN7Sensors13detectedSharpEv+0x80>
    {
       if (sharps[i]->getValue().b)
    607e:	687b      	ldr	r3, [r7, #4]
    6080:	685a      	ldr	r2, [r3, #4]
    6082:	69fb      	ldr	r3, [r7, #28]
    6084:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6088:	4413      	add	r3, r2
    608a:	681b      	ldr	r3, [r3, #0]
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6092:	f8d3 c000 	ldr.w	ip, [r3]
    6096:	687b      	ldr	r3, [r7, #4]
    6098:	685a      	ldr	r2, [r3, #4]
    609a:	69fb      	ldr	r3, [r7, #28]
    609c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60a0:	4413      	add	r3, r2
    60a2:	681a      	ldr	r2, [r3, #0]
    60a4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    60a8:	4618      	mov	r0, r3
    60aa:	4611      	mov	r1, r2
    60ac:	47e0      	blx	ip
    60ae:	7d3b      	ldrb	r3, [r7, #20]
    60b0:	2b00      	cmp	r3, #0
    60b2:	d013      	beq.n	60dc <_ZN7Sensors13detectedSharpEv+0x78>
       {
            sharpNameVector->push_back(sharps[i]->getName());
    60b4:	687b      	ldr	r3, [r7, #4]
    60b6:	6a5c      	ldr	r4, [r3, #36]
    60b8:	687b      	ldr	r3, [r7, #4]
    60ba:	685a      	ldr	r2, [r3, #4]
    60bc:	69fb      	ldr	r3, [r7, #28]
    60be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    60c2:	4413      	add	r3, r2
    60c4:	681b      	ldr	r3, [r3, #0]
    60c6:	4618      	mov	r0, r3
    60c8:	f006 fece 	bl	ce68 <_ZN11SharpSensor7getNameEv>
    60cc:	4603      	mov	r3, r0
    60ce:	76fb      	strb	r3, [r7, #27]
    60d0:	f107 031b 	add.w	r3, r7, #27	; 0x1b
    60d4:	4620      	mov	r0, r4
    60d6:	4619      	mov	r1, r3
    60d8:	f014 f9de 	bl	1a498 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>
}

Sensors::SharpNameVector*  Sensors::detectedSharp()
{
    sharpNameVector->reset();
    for (int i = 0; i< nbSharp; i++)
    60dc:	69fb      	ldr	r3, [r7, #28]
    60de:	f103 0301 	add.w	r3, r3, #1	; 0x1
    60e2:	61fb      	str	r3, [r7, #28]
    60e4:	687b      	ldr	r3, [r7, #4]
    60e6:	689a      	ldr	r2, [r3, #8]
    60e8:	69fb      	ldr	r3, [r7, #28]
    60ea:	429a      	cmp	r2, r3
    60ec:	dcc7      	bgt.n	607e <_ZN7Sensors13detectedSharpEv+0x1a>
       {
            sharpNameVector->push_back(sharps[i]->getName());
       }
    }
   // sharpNameVector->resize();
    return sharpNameVector;
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	6a5b      	ldr	r3, [r3, #36]
}
    60f2:	4618      	mov	r0, r3
    60f4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    60f8:	46bd      	mov	sp, r7
    60fa:	bd90      	pop	{r4, r7, pc}

000060fc <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE>:
//    outputSensorVector->resize();
    return outputSensorVector;
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
    60fc:	b580      	push	{r7, lr}
    60fe:	b08c      	sub	sp, #48
    6100:	af00      	add	r7, sp, #0
    6102:	60f8      	str	r0, [r7, #12]
    6104:	460b      	mov	r3, r1
    6106:	72fb      	strb	r3, [r7, #11]
{
    for (int i = 0; i < nbUltrasound; i++)
    6108:	f04f 0300 	mov.w	r3, #0	; 0x0
    610c:	62fb      	str	r3, [r7, #44]
    610e:	e04a      	b.n	61a6 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xaa>
    {
        ultrasounds[i]->getValue();
    6110:	68fb      	ldr	r3, [r7, #12]
    6112:	68da      	ldr	r2, [r3, #12]
    6114:	6afb      	ldr	r3, [r7, #44]
    6116:	ea4f 0383 	mov.w	r3, r3, lsl #2
    611a:	4413      	add	r3, r2
    611c:	681b      	ldr	r3, [r3, #0]
    611e:	681b      	ldr	r3, [r3, #0]
    6120:	f103 0308 	add.w	r3, r3, #8	; 0x8
    6124:	f8d3 c000 	ldr.w	ip, [r3]
    6128:	68fb      	ldr	r3, [r7, #12]
    612a:	68da      	ldr	r2, [r3, #12]
    612c:	6afb      	ldr	r3, [r7, #44]
    612e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6132:	4413      	add	r3, r2
    6134:	681a      	ldr	r2, [r3, #0]
    6136:	f107 0314 	add.w	r3, r7, #20	; 0x14
    613a:	4618      	mov	r0, r3
    613c:	4611      	mov	r1, r2
    613e:	47e0      	blx	ip
         if (ultrasounds[i]->getName() == name)
    6140:	68fb      	ldr	r3, [r7, #12]
    6142:	68da      	ldr	r2, [r3, #12]
    6144:	6afb      	ldr	r3, [r7, #44]
    6146:	ea4f 0383 	mov.w	r3, r3, lsl #2
    614a:	4413      	add	r3, r2
    614c:	681b      	ldr	r3, [r3, #0]
    614e:	4618      	mov	r0, r3
    6150:	f007 faaa 	bl	d6a8 <_ZN16UltrasoundSensor7getNameEv>
    6154:	4603      	mov	r3, r0
    6156:	461a      	mov	r2, r3
    6158:	7afb      	ldrb	r3, [r7, #11]
    615a:	4293      	cmp	r3, r2
    615c:	bf14      	ite	ne
    615e:	2300      	movne	r3, #0
    6160:	2301      	moveq	r3, #1
    6162:	b2db      	uxtb	r3, r3
    6164:	2b00      	cmp	r3, #0
    6166:	d01a      	beq.n	619e <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xa2>
         {
             return ultrasounds[i]->getValue().f;
    6168:	68fb      	ldr	r3, [r7, #12]
    616a:	68da      	ldr	r2, [r3, #12]
    616c:	6afb      	ldr	r3, [r7, #44]
    616e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6172:	4413      	add	r3, r2
    6174:	681b      	ldr	r3, [r3, #0]
    6176:	681b      	ldr	r3, [r3, #0]
    6178:	f103 0308 	add.w	r3, r3, #8	; 0x8
    617c:	f8d3 c000 	ldr.w	ip, [r3]
    6180:	68fb      	ldr	r3, [r7, #12]
    6182:	68da      	ldr	r2, [r3, #12]
    6184:	6afb      	ldr	r3, [r7, #44]
    6186:	ea4f 0383 	mov.w	r3, r3, lsl #2
    618a:	4413      	add	r3, r2
    618c:	681a      	ldr	r2, [r3, #0]
    618e:	f107 0320 	add.w	r3, r7, #32	; 0x20
    6192:	4618      	mov	r0, r3
    6194:	4611      	mov	r1, r2
    6196:	47e0      	blx	ip
    6198:	6a7b      	ldr	r3, [r7, #36]
    619a:	607b      	str	r3, [r7, #4]
    619c:	e00a      	b.n	61b4 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xb8>
}


float Sensors::getValueUltrasound(UltrasoundSensor::UltrasoundName name)
{
    for (int i = 0; i < nbUltrasound; i++)
    619e:	6afb      	ldr	r3, [r7, #44]
    61a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    61a4:	62fb      	str	r3, [r7, #44]
    61a6:	68fb      	ldr	r3, [r7, #12]
    61a8:	691a      	ldr	r2, [r3, #16]
    61aa:	6afb      	ldr	r3, [r7, #44]
    61ac:	429a      	cmp	r2, r3
    61ae:	dcaf      	bgt.n	6110 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0x14>
         if (ultrasounds[i]->getName() == name)
         {
             return ultrasounds[i]->getValue().f;
         }
    }
    return -1;
    61b0:	4b03      	ldr	r3, [pc, #12]	(61c0 <_ZN7Sensors18getValueUltrasoundEN16UltrasoundSensor14UltrasoundNameE+0xc4>)
    61b2:	607b      	str	r3, [r7, #4]
    61b4:	687b      	ldr	r3, [r7, #4]
}
    61b6:	4618      	mov	r0, r3
    61b8:	f107 0730 	add.w	r7, r7, #48	; 0x30
    61bc:	46bd      	mov	sp, r7
    61be:	bd80      	pop	{r7, pc}
    61c0:	bf800000 	.word	0xbf800000

000061c4 <_ZN7SensorsD0Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    61c4:	b580      	push	{r7, lr}
    61c6:	b086      	sub	sp, #24
    61c8:	af00      	add	r7, sp, #0
    61ca:	6078      	str	r0, [r7, #4]
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	4a92      	ldr	r2, [pc, #584]	(6418 <_ZN7SensorsD0Ev+0x254>)
    61d0:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    61d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    61d6:	60bb      	str	r3, [r7, #8]
    61d8:	e020      	b.n	621c <_ZN7SensorsD0Ev+0x58>
        delete sharps[i];
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	685a      	ldr	r2, [r3, #4]
    61de:	68bb      	ldr	r3, [r7, #8]
    61e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61e4:	4413      	add	r3, r2
    61e6:	681b      	ldr	r3, [r3, #0]
    61e8:	2b00      	cmp	r3, #0
    61ea:	d013      	beq.n	6214 <_ZN7SensorsD0Ev+0x50>
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	685a      	ldr	r2, [r3, #4]
    61f0:	68bb      	ldr	r3, [r7, #8]
    61f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    61f6:	4413      	add	r3, r2
    61f8:	681b      	ldr	r3, [r3, #0]
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6200:	6819      	ldr	r1, [r3, #0]
    6202:	687b      	ldr	r3, [r7, #4]
    6204:	685a      	ldr	r2, [r3, #4]
    6206:	68bb      	ldr	r3, [r7, #8]
    6208:	ea4f 0383 	mov.w	r3, r3, lsl #2
    620c:	4413      	add	r3, r2
    620e:	681b      	ldr	r3, [r3, #0]
    6210:	4618      	mov	r0, r3
    6212:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    6214:	68bb      	ldr	r3, [r7, #8]
    6216:	f103 0301 	add.w	r3, r3, #1	; 0x1
    621a:	60bb      	str	r3, [r7, #8]
    621c:	687b      	ldr	r3, [r7, #4]
    621e:	689a      	ldr	r2, [r3, #8]
    6220:	68bb      	ldr	r3, [r7, #8]
    6222:	429a      	cmp	r2, r3
    6224:	dcd9      	bgt.n	61da <_ZN7SensorsD0Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6226:	f04f 0300 	mov.w	r3, #0	; 0x0
    622a:	60fb      	str	r3, [r7, #12]
    622c:	e020      	b.n	6270 <_ZN7SensorsD0Ev+0xac>
        delete ultrasounds[i];
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	68da      	ldr	r2, [r3, #12]
    6232:	68fb      	ldr	r3, [r7, #12]
    6234:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6238:	4413      	add	r3, r2
    623a:	681b      	ldr	r3, [r3, #0]
    623c:	2b00      	cmp	r3, #0
    623e:	d013      	beq.n	6268 <_ZN7SensorsD0Ev+0xa4>
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	68da      	ldr	r2, [r3, #12]
    6244:	68fb      	ldr	r3, [r7, #12]
    6246:	ea4f 0383 	mov.w	r3, r3, lsl #2
    624a:	4413      	add	r3, r2
    624c:	681b      	ldr	r3, [r3, #0]
    624e:	681b      	ldr	r3, [r3, #0]
    6250:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6254:	6819      	ldr	r1, [r3, #0]
    6256:	687b      	ldr	r3, [r7, #4]
    6258:	68da      	ldr	r2, [r3, #12]
    625a:	68fb      	ldr	r3, [r7, #12]
    625c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6260:	4413      	add	r3, r2
    6262:	681b      	ldr	r3, [r3, #0]
    6264:	4618      	mov	r0, r3
    6266:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6268:	68fb      	ldr	r3, [r7, #12]
    626a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    626e:	60fb      	str	r3, [r7, #12]
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	691a      	ldr	r2, [r3, #16]
    6274:	68fb      	ldr	r3, [r7, #12]
    6276:	429a      	cmp	r2, r3
    6278:	dcd9      	bgt.n	622e <_ZN7SensorsD0Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    627a:	f04f 0300 	mov.w	r3, #0	; 0x0
    627e:	613b      	str	r3, [r7, #16]
    6280:	e020      	b.n	62c4 <_ZN7SensorsD0Ev+0x100>
        delete limitSwitchs[i];
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	69da      	ldr	r2, [r3, #28]
    6286:	693b      	ldr	r3, [r7, #16]
    6288:	ea4f 0383 	mov.w	r3, r3, lsl #2
    628c:	4413      	add	r3, r2
    628e:	681b      	ldr	r3, [r3, #0]
    6290:	2b00      	cmp	r3, #0
    6292:	d013      	beq.n	62bc <_ZN7SensorsD0Ev+0xf8>
    6294:	687b      	ldr	r3, [r7, #4]
    6296:	69da      	ldr	r2, [r3, #28]
    6298:	693b      	ldr	r3, [r7, #16]
    629a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    629e:	4413      	add	r3, r2
    62a0:	681b      	ldr	r3, [r3, #0]
    62a2:	681b      	ldr	r3, [r3, #0]
    62a4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    62a8:	6819      	ldr	r1, [r3, #0]
    62aa:	687b      	ldr	r3, [r7, #4]
    62ac:	69da      	ldr	r2, [r3, #28]
    62ae:	693b      	ldr	r3, [r7, #16]
    62b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62b4:	4413      	add	r3, r2
    62b6:	681b      	ldr	r3, [r3, #0]
    62b8:	4618      	mov	r0, r3
    62ba:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    62bc:	693b      	ldr	r3, [r7, #16]
    62be:	f103 0301 	add.w	r3, r3, #1	; 0x1
    62c2:	613b      	str	r3, [r7, #16]
    62c4:	687b      	ldr	r3, [r7, #4]
    62c6:	6a1a      	ldr	r2, [r3, #32]
    62c8:	693b      	ldr	r3, [r7, #16]
    62ca:	429a      	cmp	r2, r3
    62cc:	dcd9      	bgt.n	6282 <_ZN7SensorsD0Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    62ce:	f04f 0300 	mov.w	r3, #0	; 0x0
    62d2:	617b      	str	r3, [r7, #20]
    62d4:	e020      	b.n	6318 <_ZN7SensorsD0Ev+0x154>
        delete ligthBarriers[i];
    62d6:	687b      	ldr	r3, [r7, #4]
    62d8:	695a      	ldr	r2, [r3, #20]
    62da:	697b      	ldr	r3, [r7, #20]
    62dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62e0:	4413      	add	r3, r2
    62e2:	681b      	ldr	r3, [r3, #0]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d013      	beq.n	6310 <_ZN7SensorsD0Ev+0x14c>
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	695a      	ldr	r2, [r3, #20]
    62ec:	697b      	ldr	r3, [r7, #20]
    62ee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    62f2:	4413      	add	r3, r2
    62f4:	681b      	ldr	r3, [r3, #0]
    62f6:	681b      	ldr	r3, [r3, #0]
    62f8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    62fc:	6819      	ldr	r1, [r3, #0]
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	695a      	ldr	r2, [r3, #20]
    6302:	697b      	ldr	r3, [r7, #20]
    6304:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6308:	4413      	add	r3, r2
    630a:	681b      	ldr	r3, [r3, #0]
    630c:	4618      	mov	r0, r3
    630e:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6310:	697b      	ldr	r3, [r7, #20]
    6312:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6316:	617b      	str	r3, [r7, #20]
    6318:	687b      	ldr	r3, [r7, #4]
    631a:	699a      	ldr	r2, [r3, #24]
    631c:	697b      	ldr	r3, [r7, #20]
    631e:	429a      	cmp	r2, r3
    6320:	dcd9      	bgt.n	62d6 <_ZN7SensorsD0Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    6322:	687b      	ldr	r3, [r7, #4]
    6324:	685b      	ldr	r3, [r3, #4]
    6326:	2b00      	cmp	r3, #0
    6328:	d004      	beq.n	6334 <_ZN7SensorsD0Ev+0x170>
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	685b      	ldr	r3, [r3, #4]
    632e:	4618      	mov	r0, r3
    6330:	f008 f930 	bl	e594 <_ZdaPv>
    delete[] ultrasounds;
    6334:	687b      	ldr	r3, [r7, #4]
    6336:	68db      	ldr	r3, [r3, #12]
    6338:	2b00      	cmp	r3, #0
    633a:	d004      	beq.n	6346 <_ZN7SensorsD0Ev+0x182>
    633c:	687b      	ldr	r3, [r7, #4]
    633e:	68db      	ldr	r3, [r3, #12]
    6340:	4618      	mov	r0, r3
    6342:	f008 f927 	bl	e594 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    6346:	687b      	ldr	r3, [r7, #4]
    6348:	69db      	ldr	r3, [r3, #28]
    634a:	2b00      	cmp	r3, #0
    634c:	d004      	beq.n	6358 <_ZN7SensorsD0Ev+0x194>
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	69db      	ldr	r3, [r3, #28]
    6352:	4618      	mov	r0, r3
    6354:	f008 f91e 	bl	e594 <_ZdaPv>
    delete[] ligthBarriers;
    6358:	687b      	ldr	r3, [r7, #4]
    635a:	695b      	ldr	r3, [r3, #20]
    635c:	2b00      	cmp	r3, #0
    635e:	d004      	beq.n	636a <_ZN7SensorsD0Ev+0x1a6>
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	695b      	ldr	r3, [r3, #20]
    6364:	4618      	mov	r0, r3
    6366:	f008 f915 	bl	e594 <_ZdaPv>
    #endif

    if (sharpNameVector)
    636a:	687b      	ldr	r3, [r7, #4]
    636c:	6a5b      	ldr	r3, [r3, #36]
    636e:	2b00      	cmp	r3, #0
    6370:	d00d      	beq.n	638e <_ZN7SensorsD0Ev+0x1ca>
        delete sharpNameVector;
    6372:	687b      	ldr	r3, [r7, #4]
    6374:	6a5b      	ldr	r3, [r3, #36]
    6376:	2b00      	cmp	r3, #0
    6378:	d009      	beq.n	638e <_ZN7SensorsD0Ev+0x1ca>
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	6a5b      	ldr	r3, [r3, #36]
    637e:	681b      	ldr	r3, [r3, #0]
    6380:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6384:	681a      	ldr	r2, [r3, #0]
    6386:	687b      	ldr	r3, [r7, #4]
    6388:	6a5b      	ldr	r3, [r3, #36]
    638a:	4618      	mov	r0, r3
    638c:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    638e:	687b      	ldr	r3, [r7, #4]
    6390:	6adb      	ldr	r3, [r3, #44]
    6392:	2b00      	cmp	r3, #0
    6394:	d00d      	beq.n	63b2 <_ZN7SensorsD0Ev+0x1ee>
        delete ligthBarrierNameVector;
    6396:	687b      	ldr	r3, [r7, #4]
    6398:	6adb      	ldr	r3, [r3, #44]
    639a:	2b00      	cmp	r3, #0
    639c:	d009      	beq.n	63b2 <_ZN7SensorsD0Ev+0x1ee>
    639e:	687b      	ldr	r3, [r7, #4]
    63a0:	6adb      	ldr	r3, [r3, #44]
    63a2:	681b      	ldr	r3, [r3, #0]
    63a4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    63a8:	681a      	ldr	r2, [r3, #0]
    63aa:	687b      	ldr	r3, [r7, #4]
    63ac:	6adb      	ldr	r3, [r3, #44]
    63ae:	4618      	mov	r0, r3
    63b0:	4790      	blx	r2
    if (limitSwitchNameVector)
    63b2:	687b      	ldr	r3, [r7, #4]
    63b4:	6a9b      	ldr	r3, [r3, #40]
    63b6:	2b00      	cmp	r3, #0
    63b8:	d00d      	beq.n	63d6 <_ZN7SensorsD0Ev+0x212>
        delete limitSwitchNameVector;
    63ba:	687b      	ldr	r3, [r7, #4]
    63bc:	6a9b      	ldr	r3, [r3, #40]
    63be:	2b00      	cmp	r3, #0
    63c0:	d009      	beq.n	63d6 <_ZN7SensorsD0Ev+0x212>
    63c2:	687b      	ldr	r3, [r7, #4]
    63c4:	6a9b      	ldr	r3, [r3, #40]
    63c6:	681b      	ldr	r3, [r3, #0]
    63c8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    63cc:	681a      	ldr	r2, [r3, #0]
    63ce:	687b      	ldr	r3, [r7, #4]
    63d0:	6a9b      	ldr	r3, [r3, #40]
    63d2:	4618      	mov	r0, r3
    63d4:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    63d6:	687b      	ldr	r3, [r7, #4]
    63d8:	6b1b      	ldr	r3, [r3, #48]
    63da:	2b00      	cmp	r3, #0
    63dc:	d00d      	beq.n	63fa <_ZN7SensorsD0Ev+0x236>
        delete outputSensorVector;
    63de:	687b      	ldr	r3, [r7, #4]
    63e0:	6b1b      	ldr	r3, [r3, #48]
    63e2:	2b00      	cmp	r3, #0
    63e4:	d009      	beq.n	63fa <_ZN7SensorsD0Ev+0x236>
    63e6:	687b      	ldr	r3, [r7, #4]
    63e8:	6b1b      	ldr	r3, [r3, #48]
    63ea:	681b      	ldr	r3, [r3, #0]
    63ec:	f103 0304 	add.w	r3, r3, #4	; 0x4
    63f0:	681a      	ldr	r2, [r3, #0]
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	6b1b      	ldr	r3, [r3, #48]
    63f6:	4618      	mov	r0, r3
    63f8:	4790      	blx	r2
}
    63fa:	f04f 0301 	mov.w	r3, #1	; 0x1
    63fe:	b2db      	uxtb	r3, r3
    6400:	2b00      	cmp	r3, #0
    6402:	d002      	beq.n	640a <_ZN7SensorsD0Ev+0x246>
    6404:	6878      	ldr	r0, [r7, #4]
    6406:	f008 f84d 	bl	e4a4 <_ZdlPv>
    640a:	687b      	ldr	r3, [r7, #4]
    640c:	4618      	mov	r0, r3
    640e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6412:	46bd      	mov	sp, r7
    6414:	bd80      	pop	{r7, pc}
    6416:	46c0      	nop			(mov r8, r8)
    6418:	0001f948 	.word	0x0001f948

0000641c <_ZN7SensorsD1Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    641c:	b580      	push	{r7, lr}
    641e:	b086      	sub	sp, #24
    6420:	af00      	add	r7, sp, #0
    6422:	6078      	str	r0, [r7, #4]
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	4a92      	ldr	r2, [pc, #584]	(6670 <_ZN7SensorsD1Ev+0x254>)
    6428:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    642a:	f04f 0300 	mov.w	r3, #0	; 0x0
    642e:	60bb      	str	r3, [r7, #8]
    6430:	e020      	b.n	6474 <_ZN7SensorsD1Ev+0x58>
        delete sharps[i];
    6432:	687b      	ldr	r3, [r7, #4]
    6434:	685a      	ldr	r2, [r3, #4]
    6436:	68bb      	ldr	r3, [r7, #8]
    6438:	ea4f 0383 	mov.w	r3, r3, lsl #2
    643c:	4413      	add	r3, r2
    643e:	681b      	ldr	r3, [r3, #0]
    6440:	2b00      	cmp	r3, #0
    6442:	d013      	beq.n	646c <_ZN7SensorsD1Ev+0x50>
    6444:	687b      	ldr	r3, [r7, #4]
    6446:	685a      	ldr	r2, [r3, #4]
    6448:	68bb      	ldr	r3, [r7, #8]
    644a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    644e:	4413      	add	r3, r2
    6450:	681b      	ldr	r3, [r3, #0]
    6452:	681b      	ldr	r3, [r3, #0]
    6454:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6458:	6819      	ldr	r1, [r3, #0]
    645a:	687b      	ldr	r3, [r7, #4]
    645c:	685a      	ldr	r2, [r3, #4]
    645e:	68bb      	ldr	r3, [r7, #8]
    6460:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6464:	4413      	add	r3, r2
    6466:	681b      	ldr	r3, [r3, #0]
    6468:	4618      	mov	r0, r3
    646a:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    646c:	68bb      	ldr	r3, [r7, #8]
    646e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6472:	60bb      	str	r3, [r7, #8]
    6474:	687b      	ldr	r3, [r7, #4]
    6476:	689a      	ldr	r2, [r3, #8]
    6478:	68bb      	ldr	r3, [r7, #8]
    647a:	429a      	cmp	r2, r3
    647c:	dcd9      	bgt.n	6432 <_ZN7SensorsD1Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    647e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6482:	60fb      	str	r3, [r7, #12]
    6484:	e020      	b.n	64c8 <_ZN7SensorsD1Ev+0xac>
        delete ultrasounds[i];
    6486:	687b      	ldr	r3, [r7, #4]
    6488:	68da      	ldr	r2, [r3, #12]
    648a:	68fb      	ldr	r3, [r7, #12]
    648c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6490:	4413      	add	r3, r2
    6492:	681b      	ldr	r3, [r3, #0]
    6494:	2b00      	cmp	r3, #0
    6496:	d013      	beq.n	64c0 <_ZN7SensorsD1Ev+0xa4>
    6498:	687b      	ldr	r3, [r7, #4]
    649a:	68da      	ldr	r2, [r3, #12]
    649c:	68fb      	ldr	r3, [r7, #12]
    649e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64a2:	4413      	add	r3, r2
    64a4:	681b      	ldr	r3, [r3, #0]
    64a6:	681b      	ldr	r3, [r3, #0]
    64a8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    64ac:	6819      	ldr	r1, [r3, #0]
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	68da      	ldr	r2, [r3, #12]
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64b8:	4413      	add	r3, r2
    64ba:	681b      	ldr	r3, [r3, #0]
    64bc:	4618      	mov	r0, r3
    64be:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    64c0:	68fb      	ldr	r3, [r7, #12]
    64c2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    64c6:	60fb      	str	r3, [r7, #12]
    64c8:	687b      	ldr	r3, [r7, #4]
    64ca:	691a      	ldr	r2, [r3, #16]
    64cc:	68fb      	ldr	r3, [r7, #12]
    64ce:	429a      	cmp	r2, r3
    64d0:	dcd9      	bgt.n	6486 <_ZN7SensorsD1Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    64d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    64d6:	613b      	str	r3, [r7, #16]
    64d8:	e020      	b.n	651c <_ZN7SensorsD1Ev+0x100>
        delete limitSwitchs[i];
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	69da      	ldr	r2, [r3, #28]
    64de:	693b      	ldr	r3, [r7, #16]
    64e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64e4:	4413      	add	r3, r2
    64e6:	681b      	ldr	r3, [r3, #0]
    64e8:	2b00      	cmp	r3, #0
    64ea:	d013      	beq.n	6514 <_ZN7SensorsD1Ev+0xf8>
    64ec:	687b      	ldr	r3, [r7, #4]
    64ee:	69da      	ldr	r2, [r3, #28]
    64f0:	693b      	ldr	r3, [r7, #16]
    64f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    64f6:	4413      	add	r3, r2
    64f8:	681b      	ldr	r3, [r3, #0]
    64fa:	681b      	ldr	r3, [r3, #0]
    64fc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6500:	6819      	ldr	r1, [r3, #0]
    6502:	687b      	ldr	r3, [r7, #4]
    6504:	69da      	ldr	r2, [r3, #28]
    6506:	693b      	ldr	r3, [r7, #16]
    6508:	ea4f 0383 	mov.w	r3, r3, lsl #2
    650c:	4413      	add	r3, r2
    650e:	681b      	ldr	r3, [r3, #0]
    6510:	4618      	mov	r0, r3
    6512:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    6514:	693b      	ldr	r3, [r7, #16]
    6516:	f103 0301 	add.w	r3, r3, #1	; 0x1
    651a:	613b      	str	r3, [r7, #16]
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	6a1a      	ldr	r2, [r3, #32]
    6520:	693b      	ldr	r3, [r7, #16]
    6522:	429a      	cmp	r2, r3
    6524:	dcd9      	bgt.n	64da <_ZN7SensorsD1Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6526:	f04f 0300 	mov.w	r3, #0	; 0x0
    652a:	617b      	str	r3, [r7, #20]
    652c:	e020      	b.n	6570 <_ZN7SensorsD1Ev+0x154>
        delete ligthBarriers[i];
    652e:	687b      	ldr	r3, [r7, #4]
    6530:	695a      	ldr	r2, [r3, #20]
    6532:	697b      	ldr	r3, [r7, #20]
    6534:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6538:	4413      	add	r3, r2
    653a:	681b      	ldr	r3, [r3, #0]
    653c:	2b00      	cmp	r3, #0
    653e:	d013      	beq.n	6568 <_ZN7SensorsD1Ev+0x14c>
    6540:	687b      	ldr	r3, [r7, #4]
    6542:	695a      	ldr	r2, [r3, #20]
    6544:	697b      	ldr	r3, [r7, #20]
    6546:	ea4f 0383 	mov.w	r3, r3, lsl #2
    654a:	4413      	add	r3, r2
    654c:	681b      	ldr	r3, [r3, #0]
    654e:	681b      	ldr	r3, [r3, #0]
    6550:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6554:	6819      	ldr	r1, [r3, #0]
    6556:	687b      	ldr	r3, [r7, #4]
    6558:	695a      	ldr	r2, [r3, #20]
    655a:	697b      	ldr	r3, [r7, #20]
    655c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6560:	4413      	add	r3, r2
    6562:	681b      	ldr	r3, [r3, #0]
    6564:	4618      	mov	r0, r3
    6566:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    6568:	697b      	ldr	r3, [r7, #20]
    656a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    656e:	617b      	str	r3, [r7, #20]
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	699a      	ldr	r2, [r3, #24]
    6574:	697b      	ldr	r3, [r7, #20]
    6576:	429a      	cmp	r2, r3
    6578:	dcd9      	bgt.n	652e <_ZN7SensorsD1Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    657a:	687b      	ldr	r3, [r7, #4]
    657c:	685b      	ldr	r3, [r3, #4]
    657e:	2b00      	cmp	r3, #0
    6580:	d004      	beq.n	658c <_ZN7SensorsD1Ev+0x170>
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	685b      	ldr	r3, [r3, #4]
    6586:	4618      	mov	r0, r3
    6588:	f008 f804 	bl	e594 <_ZdaPv>
    delete[] ultrasounds;
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	68db      	ldr	r3, [r3, #12]
    6590:	2b00      	cmp	r3, #0
    6592:	d004      	beq.n	659e <_ZN7SensorsD1Ev+0x182>
    6594:	687b      	ldr	r3, [r7, #4]
    6596:	68db      	ldr	r3, [r3, #12]
    6598:	4618      	mov	r0, r3
    659a:	f007 fffb 	bl	e594 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    659e:	687b      	ldr	r3, [r7, #4]
    65a0:	69db      	ldr	r3, [r3, #28]
    65a2:	2b00      	cmp	r3, #0
    65a4:	d004      	beq.n	65b0 <_ZN7SensorsD1Ev+0x194>
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	69db      	ldr	r3, [r3, #28]
    65aa:	4618      	mov	r0, r3
    65ac:	f007 fff2 	bl	e594 <_ZdaPv>
    delete[] ligthBarriers;
    65b0:	687b      	ldr	r3, [r7, #4]
    65b2:	695b      	ldr	r3, [r3, #20]
    65b4:	2b00      	cmp	r3, #0
    65b6:	d004      	beq.n	65c2 <_ZN7SensorsD1Ev+0x1a6>
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	695b      	ldr	r3, [r3, #20]
    65bc:	4618      	mov	r0, r3
    65be:	f007 ffe9 	bl	e594 <_ZdaPv>
    #endif

    if (sharpNameVector)
    65c2:	687b      	ldr	r3, [r7, #4]
    65c4:	6a5b      	ldr	r3, [r3, #36]
    65c6:	2b00      	cmp	r3, #0
    65c8:	d00d      	beq.n	65e6 <_ZN7SensorsD1Ev+0x1ca>
        delete sharpNameVector;
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	6a5b      	ldr	r3, [r3, #36]
    65ce:	2b00      	cmp	r3, #0
    65d0:	d009      	beq.n	65e6 <_ZN7SensorsD1Ev+0x1ca>
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	6a5b      	ldr	r3, [r3, #36]
    65d6:	681b      	ldr	r3, [r3, #0]
    65d8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    65dc:	681a      	ldr	r2, [r3, #0]
    65de:	687b      	ldr	r3, [r7, #4]
    65e0:	6a5b      	ldr	r3, [r3, #36]
    65e2:	4618      	mov	r0, r3
    65e4:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    65e6:	687b      	ldr	r3, [r7, #4]
    65e8:	6adb      	ldr	r3, [r3, #44]
    65ea:	2b00      	cmp	r3, #0
    65ec:	d00d      	beq.n	660a <_ZN7SensorsD1Ev+0x1ee>
        delete ligthBarrierNameVector;
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	6adb      	ldr	r3, [r3, #44]
    65f2:	2b00      	cmp	r3, #0
    65f4:	d009      	beq.n	660a <_ZN7SensorsD1Ev+0x1ee>
    65f6:	687b      	ldr	r3, [r7, #4]
    65f8:	6adb      	ldr	r3, [r3, #44]
    65fa:	681b      	ldr	r3, [r3, #0]
    65fc:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6600:	681a      	ldr	r2, [r3, #0]
    6602:	687b      	ldr	r3, [r7, #4]
    6604:	6adb      	ldr	r3, [r3, #44]
    6606:	4618      	mov	r0, r3
    6608:	4790      	blx	r2
    if (limitSwitchNameVector)
    660a:	687b      	ldr	r3, [r7, #4]
    660c:	6a9b      	ldr	r3, [r3, #40]
    660e:	2b00      	cmp	r3, #0
    6610:	d00d      	beq.n	662e <_ZN7SensorsD1Ev+0x212>
        delete limitSwitchNameVector;
    6612:	687b      	ldr	r3, [r7, #4]
    6614:	6a9b      	ldr	r3, [r3, #40]
    6616:	2b00      	cmp	r3, #0
    6618:	d009      	beq.n	662e <_ZN7SensorsD1Ev+0x212>
    661a:	687b      	ldr	r3, [r7, #4]
    661c:	6a9b      	ldr	r3, [r3, #40]
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6624:	681a      	ldr	r2, [r3, #0]
    6626:	687b      	ldr	r3, [r7, #4]
    6628:	6a9b      	ldr	r3, [r3, #40]
    662a:	4618      	mov	r0, r3
    662c:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	6b1b      	ldr	r3, [r3, #48]
    6632:	2b00      	cmp	r3, #0
    6634:	d00d      	beq.n	6652 <_ZN7SensorsD1Ev+0x236>
        delete outputSensorVector;
    6636:	687b      	ldr	r3, [r7, #4]
    6638:	6b1b      	ldr	r3, [r3, #48]
    663a:	2b00      	cmp	r3, #0
    663c:	d009      	beq.n	6652 <_ZN7SensorsD1Ev+0x236>
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	6b1b      	ldr	r3, [r3, #48]
    6642:	681b      	ldr	r3, [r3, #0]
    6644:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6648:	681a      	ldr	r2, [r3, #0]
    664a:	687b      	ldr	r3, [r7, #4]
    664c:	6b1b      	ldr	r3, [r3, #48]
    664e:	4618      	mov	r0, r3
    6650:	4790      	blx	r2
}
    6652:	f04f 0300 	mov.w	r3, #0	; 0x0
    6656:	b2db      	uxtb	r3, r3
    6658:	2b00      	cmp	r3, #0
    665a:	d002      	beq.n	6662 <_ZN7SensorsD1Ev+0x246>
    665c:	6878      	ldr	r0, [r7, #4]
    665e:	f007 ff21 	bl	e4a4 <_ZdlPv>
    6662:	687b      	ldr	r3, [r7, #4]
    6664:	4618      	mov	r0, r3
    6666:	f107 0718 	add.w	r7, r7, #24	; 0x18
    666a:	46bd      	mov	sp, r7
    666c:	bd80      	pop	{r7, pc}
    666e:	46c0      	nop			(mov r8, r8)
    6670:	0001f948 	.word	0x0001f948

00006674 <_ZN7SensorsD2Ev>:
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}

Sensors::~Sensors()
    6674:	b580      	push	{r7, lr}
    6676:	b086      	sub	sp, #24
    6678:	af00      	add	r7, sp, #0
    667a:	6078      	str	r0, [r7, #4]
    667c:	687b      	ldr	r3, [r7, #4]
    667e:	4a92      	ldr	r2, [pc, #584]	(68c8 <_ZN7SensorsD2Ev+0x254>)
    6680:	601a      	str	r2, [r3, #0]
{
    for (int i = 0; i< nbSharp; i++)
    6682:	f04f 0300 	mov.w	r3, #0	; 0x0
    6686:	60bb      	str	r3, [r7, #8]
    6688:	e020      	b.n	66cc <_ZN7SensorsD2Ev+0x58>
        delete sharps[i];
    668a:	687b      	ldr	r3, [r7, #4]
    668c:	685a      	ldr	r2, [r3, #4]
    668e:	68bb      	ldr	r3, [r7, #8]
    6690:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6694:	4413      	add	r3, r2
    6696:	681b      	ldr	r3, [r3, #0]
    6698:	2b00      	cmp	r3, #0
    669a:	d013      	beq.n	66c4 <_ZN7SensorsD2Ev+0x50>
    669c:	687b      	ldr	r3, [r7, #4]
    669e:	685a      	ldr	r2, [r3, #4]
    66a0:	68bb      	ldr	r3, [r7, #8]
    66a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66a6:	4413      	add	r3, r2
    66a8:	681b      	ldr	r3, [r3, #0]
    66aa:	681b      	ldr	r3, [r3, #0]
    66ac:	f103 0304 	add.w	r3, r3, #4	; 0x4
    66b0:	6819      	ldr	r1, [r3, #0]
    66b2:	687b      	ldr	r3, [r7, #4]
    66b4:	685a      	ldr	r2, [r3, #4]
    66b6:	68bb      	ldr	r3, [r7, #8]
    66b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66bc:	4413      	add	r3, r2
    66be:	681b      	ldr	r3, [r3, #0]
    66c0:	4618      	mov	r0, r3
    66c2:	4788      	blx	r1
 #endif //ROBOTHW
}

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
    66c4:	68bb      	ldr	r3, [r7, #8]
    66c6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    66ca:	60bb      	str	r3, [r7, #8]
    66cc:	687b      	ldr	r3, [r7, #4]
    66ce:	689a      	ldr	r2, [r3, #8]
    66d0:	68bb      	ldr	r3, [r7, #8]
    66d2:	429a      	cmp	r2, r3
    66d4:	dcd9      	bgt.n	668a <_ZN7SensorsD2Ev+0x16>
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    66d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    66da:	60fb      	str	r3, [r7, #12]
    66dc:	e020      	b.n	6720 <_ZN7SensorsD2Ev+0xac>
        delete ultrasounds[i];
    66de:	687b      	ldr	r3, [r7, #4]
    66e0:	68da      	ldr	r2, [r3, #12]
    66e2:	68fb      	ldr	r3, [r7, #12]
    66e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66e8:	4413      	add	r3, r2
    66ea:	681b      	ldr	r3, [r3, #0]
    66ec:	2b00      	cmp	r3, #0
    66ee:	d013      	beq.n	6718 <_ZN7SensorsD2Ev+0xa4>
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	68da      	ldr	r2, [r3, #12]
    66f4:	68fb      	ldr	r3, [r7, #12]
    66f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    66fa:	4413      	add	r3, r2
    66fc:	681b      	ldr	r3, [r3, #0]
    66fe:	681b      	ldr	r3, [r3, #0]
    6700:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6704:	6819      	ldr	r1, [r3, #0]
    6706:	687b      	ldr	r3, [r7, #4]
    6708:	68da      	ldr	r2, [r3, #12]
    670a:	68fb      	ldr	r3, [r7, #12]
    670c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6710:	4413      	add	r3, r2
    6712:	681b      	ldr	r3, [r3, #0]
    6714:	4618      	mov	r0, r3
    6716:	4788      	blx	r1

Sensors::~Sensors()
{
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
    6718:	68fb      	ldr	r3, [r7, #12]
    671a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    671e:	60fb      	str	r3, [r7, #12]
    6720:	687b      	ldr	r3, [r7, #4]
    6722:	691a      	ldr	r2, [r3, #16]
    6724:	68fb      	ldr	r3, [r7, #12]
    6726:	429a      	cmp	r2, r3
    6728:	dcd9      	bgt.n	66de <_ZN7SensorsD2Ev+0x6a>
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    672a:	f04f 0300 	mov.w	r3, #0	; 0x0
    672e:	613b      	str	r3, [r7, #16]
    6730:	e020      	b.n	6774 <_ZN7SensorsD2Ev+0x100>
        delete limitSwitchs[i];
    6732:	687b      	ldr	r3, [r7, #4]
    6734:	69da      	ldr	r2, [r3, #28]
    6736:	693b      	ldr	r3, [r7, #16]
    6738:	ea4f 0383 	mov.w	r3, r3, lsl #2
    673c:	4413      	add	r3, r2
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	2b00      	cmp	r3, #0
    6742:	d013      	beq.n	676c <_ZN7SensorsD2Ev+0xf8>
    6744:	687b      	ldr	r3, [r7, #4]
    6746:	69da      	ldr	r2, [r3, #28]
    6748:	693b      	ldr	r3, [r7, #16]
    674a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    674e:	4413      	add	r3, r2
    6750:	681b      	ldr	r3, [r3, #0]
    6752:	681b      	ldr	r3, [r3, #0]
    6754:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6758:	6819      	ldr	r1, [r3, #0]
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	69da      	ldr	r2, [r3, #28]
    675e:	693b      	ldr	r3, [r7, #16]
    6760:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6764:	4413      	add	r3, r2
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	4618      	mov	r0, r3
    676a:	4788      	blx	r1
    for (int i = 0; i< nbSharp; i++)
        delete sharps[i];
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
    676c:	693b      	ldr	r3, [r7, #16]
    676e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    6772:	613b      	str	r3, [r7, #16]
    6774:	687b      	ldr	r3, [r7, #4]
    6776:	6a1a      	ldr	r2, [r3, #32]
    6778:	693b      	ldr	r3, [r7, #16]
    677a:	429a      	cmp	r2, r3
    677c:	dcd9      	bgt.n	6732 <_ZN7SensorsD2Ev+0xbe>
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    677e:	f04f 0300 	mov.w	r3, #0	; 0x0
    6782:	617b      	str	r3, [r7, #20]
    6784:	e020      	b.n	67c8 <_ZN7SensorsD2Ev+0x154>
        delete ligthBarriers[i];
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	695a      	ldr	r2, [r3, #20]
    678a:	697b      	ldr	r3, [r7, #20]
    678c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6790:	4413      	add	r3, r2
    6792:	681b      	ldr	r3, [r3, #0]
    6794:	2b00      	cmp	r3, #0
    6796:	d013      	beq.n	67c0 <_ZN7SensorsD2Ev+0x14c>
    6798:	687b      	ldr	r3, [r7, #4]
    679a:	695a      	ldr	r2, [r3, #20]
    679c:	697b      	ldr	r3, [r7, #20]
    679e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67a2:	4413      	add	r3, r2
    67a4:	681b      	ldr	r3, [r3, #0]
    67a6:	681b      	ldr	r3, [r3, #0]
    67a8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    67ac:	6819      	ldr	r1, [r3, #0]
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	695a      	ldr	r2, [r3, #20]
    67b2:	697b      	ldr	r3, [r7, #20]
    67b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    67b8:	4413      	add	r3, r2
    67ba:	681b      	ldr	r3, [r3, #0]
    67bc:	4618      	mov	r0, r3
    67be:	4788      	blx	r1
    for (int i = 0; i< nbUltrasound; i++)
        delete ultrasounds[i];
    #ifdef ROBOTHW
    for (int i = 0; i< nbLimitSwitch; i++)
        delete limitSwitchs[i];
    for (int i = 0; i< nbLigthBarrier; i++)
    67c0:	697b      	ldr	r3, [r7, #20]
    67c2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    67c6:	617b      	str	r3, [r7, #20]
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	699a      	ldr	r2, [r3, #24]
    67cc:	697b      	ldr	r3, [r7, #20]
    67ce:	429a      	cmp	r2, r3
    67d0:	dcd9      	bgt.n	6786 <_ZN7SensorsD2Ev+0x112>
        delete ligthBarriers[i];
    #endif
    delete[] sharps;
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	685b      	ldr	r3, [r3, #4]
    67d6:	2b00      	cmp	r3, #0
    67d8:	d004      	beq.n	67e4 <_ZN7SensorsD2Ev+0x170>
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	685b      	ldr	r3, [r3, #4]
    67de:	4618      	mov	r0, r3
    67e0:	f007 fed8 	bl	e594 <_ZdaPv>
    delete[] ultrasounds;
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	68db      	ldr	r3, [r3, #12]
    67e8:	2b00      	cmp	r3, #0
    67ea:	d004      	beq.n	67f6 <_ZN7SensorsD2Ev+0x182>
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	68db      	ldr	r3, [r3, #12]
    67f0:	4618      	mov	r0, r3
    67f2:	f007 fecf 	bl	e594 <_ZdaPv>
    #ifdef ROBOTHW
    delete[] limitSwitchs;
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	69db      	ldr	r3, [r3, #28]
    67fa:	2b00      	cmp	r3, #0
    67fc:	d004      	beq.n	6808 <_ZN7SensorsD2Ev+0x194>
    67fe:	687b      	ldr	r3, [r7, #4]
    6800:	69db      	ldr	r3, [r3, #28]
    6802:	4618      	mov	r0, r3
    6804:	f007 fec6 	bl	e594 <_ZdaPv>
    delete[] ligthBarriers;
    6808:	687b      	ldr	r3, [r7, #4]
    680a:	695b      	ldr	r3, [r3, #20]
    680c:	2b00      	cmp	r3, #0
    680e:	d004      	beq.n	681a <_ZN7SensorsD2Ev+0x1a6>
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	695b      	ldr	r3, [r3, #20]
    6814:	4618      	mov	r0, r3
    6816:	f007 febd 	bl	e594 <_ZdaPv>
    #endif

    if (sharpNameVector)
    681a:	687b      	ldr	r3, [r7, #4]
    681c:	6a5b      	ldr	r3, [r3, #36]
    681e:	2b00      	cmp	r3, #0
    6820:	d00d      	beq.n	683e <_ZN7SensorsD2Ev+0x1ca>
        delete sharpNameVector;
    6822:	687b      	ldr	r3, [r7, #4]
    6824:	6a5b      	ldr	r3, [r3, #36]
    6826:	2b00      	cmp	r3, #0
    6828:	d009      	beq.n	683e <_ZN7SensorsD2Ev+0x1ca>
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	6a5b      	ldr	r3, [r3, #36]
    682e:	681b      	ldr	r3, [r3, #0]
    6830:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6834:	681a      	ldr	r2, [r3, #0]
    6836:	687b      	ldr	r3, [r7, #4]
    6838:	6a5b      	ldr	r3, [r3, #36]
    683a:	4618      	mov	r0, r3
    683c:	4790      	blx	r2
    #ifdef ROBOTHW
    if (ligthBarrierNameVector)
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	6adb      	ldr	r3, [r3, #44]
    6842:	2b00      	cmp	r3, #0
    6844:	d00d      	beq.n	6862 <_ZN7SensorsD2Ev+0x1ee>
        delete ligthBarrierNameVector;
    6846:	687b      	ldr	r3, [r7, #4]
    6848:	6adb      	ldr	r3, [r3, #44]
    684a:	2b00      	cmp	r3, #0
    684c:	d009      	beq.n	6862 <_ZN7SensorsD2Ev+0x1ee>
    684e:	687b      	ldr	r3, [r7, #4]
    6850:	6adb      	ldr	r3, [r3, #44]
    6852:	681b      	ldr	r3, [r3, #0]
    6854:	f103 0304 	add.w	r3, r3, #4	; 0x4
    6858:	681a      	ldr	r2, [r3, #0]
    685a:	687b      	ldr	r3, [r7, #4]
    685c:	6adb      	ldr	r3, [r3, #44]
    685e:	4618      	mov	r0, r3
    6860:	4790      	blx	r2
    if (limitSwitchNameVector)
    6862:	687b      	ldr	r3, [r7, #4]
    6864:	6a9b      	ldr	r3, [r3, #40]
    6866:	2b00      	cmp	r3, #0
    6868:	d00d      	beq.n	6886 <_ZN7SensorsD2Ev+0x212>
        delete limitSwitchNameVector;
    686a:	687b      	ldr	r3, [r7, #4]
    686c:	6a9b      	ldr	r3, [r3, #40]
    686e:	2b00      	cmp	r3, #0
    6870:	d009      	beq.n	6886 <_ZN7SensorsD2Ev+0x212>
    6872:	687b      	ldr	r3, [r7, #4]
    6874:	6a9b      	ldr	r3, [r3, #40]
    6876:	681b      	ldr	r3, [r3, #0]
    6878:	f103 0304 	add.w	r3, r3, #4	; 0x4
    687c:	681a      	ldr	r2, [r3, #0]
    687e:	687b      	ldr	r3, [r7, #4]
    6880:	6a9b      	ldr	r3, [r3, #40]
    6882:	4618      	mov	r0, r3
    6884:	4790      	blx	r2
    #endif
    if (outputSensorVector)
    6886:	687b      	ldr	r3, [r7, #4]
    6888:	6b1b      	ldr	r3, [r3, #48]
    688a:	2b00      	cmp	r3, #0
    688c:	d00d      	beq.n	68aa <_ZN7SensorsD2Ev+0x236>
        delete outputSensorVector;
    688e:	687b      	ldr	r3, [r7, #4]
    6890:	6b1b      	ldr	r3, [r3, #48]
    6892:	2b00      	cmp	r3, #0
    6894:	d009      	beq.n	68aa <_ZN7SensorsD2Ev+0x236>
    6896:	687b      	ldr	r3, [r7, #4]
    6898:	6b1b      	ldr	r3, [r3, #48]
    689a:	681b      	ldr	r3, [r3, #0]
    689c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    68a0:	681a      	ldr	r2, [r3, #0]
    68a2:	687b      	ldr	r3, [r7, #4]
    68a4:	6b1b      	ldr	r3, [r3, #48]
    68a6:	4618      	mov	r0, r3
    68a8:	4790      	blx	r2
}
    68aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    68ae:	b2db      	uxtb	r3, r3
    68b0:	2b00      	cmp	r3, #0
    68b2:	d002      	beq.n	68ba <_ZN7SensorsD2Ev+0x246>
    68b4:	6878      	ldr	r0, [r7, #4]
    68b6:	f007 fdf5 	bl	e4a4 <_ZdlPv>
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	4618      	mov	r0, r3
    68be:	f107 0718 	add.w	r7, r7, #24	; 0x18
    68c2:	46bd      	mov	sp, r7
    68c4:	bd80      	pop	{r7, pc}
    68c6:	46c0      	nop			(mov r8, r8)
    68c8:	0001f948 	.word	0x0001f948

000068cc <_ZN7SensorsC1Ev>:
        singleton = new Sensors;
    }
    return singleton;
}

Sensors::Sensors()
    68cc:	b5b0      	push	{r4, r5, r7, lr}
    68ce:	b088      	sub	sp, #32
    68d0:	af02      	add	r7, sp, #8
    68d2:	6078      	str	r0, [r7, #4]
    68d4:	687a      	ldr	r2, [r7, #4]
    68d6:	4ba9      	ldr	r3, [pc, #676]	(6b7c <_ZN7SensorsC1Ev+0x2b0>)
    68d8:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    68da:	4aa9      	ldr	r2, [pc, #676]	(6b80 <_ZN7SensorsC1Ev+0x2b4>)
    68dc:	687b      	ldr	r3, [r7, #4]
    68de:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    68e0:	4ba8      	ldr	r3, [pc, #672]	(6b84 <_ZN7SensorsC1Ev+0x2b8>)
    68e2:	f107 020a 	add.w	r2, r7, #10	; 0xa
    68e6:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    68ea:	4610      	mov	r0, r2
    68ec:	4619      	mov	r1, r3
    68ee:	4662      	mov	r2, ip
    68f0:	f017 fe98 	bl	1e624 <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    68f4:	f107 030a 	add.w	r3, r7, #10	; 0xa
    68f8:	f04f 000a 	mov.w	r0, #10	; 0xa
    68fc:	4619      	mov	r1, r3
    68fe:	f003 ff4d 	bl	a79c <_ZN12AnalogSensor14initialiserADCEhPh>
    6902:	4603      	mov	r3, r0
    6904:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    6906:	687a      	ldr	r2, [r7, #4]
    6908:	f04f 030a 	mov.w	r3, #10	; 0xa
    690c:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    690e:	687a      	ldr	r2, [r7, #4]
    6910:	f04f 0300 	mov.w	r3, #0	; 0x0
    6914:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    6916:	687a      	ldr	r2, [r7, #4]
    6918:	f04f 0300 	mov.w	r3, #0	; 0x0
    691c:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    691e:	687a      	ldr	r2, [r7, #4]
    6920:	f04f 0300 	mov.w	r3, #0	; 0x0
    6924:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    6926:	f04f 0010 	mov.w	r0, #16	; 0x10
    692a:	f007 fd15 	bl	e358 <_Znwj>
    692e:	4603      	mov	r3, r0
    6930:	461c      	mov	r4, r3
    6932:	687b      	ldr	r3, [r7, #4]
    6934:	691b      	ldr	r3, [r3, #16]
    6936:	4620      	mov	r0, r4
    6938:	4619      	mov	r1, r3
    693a:	f013 fc0b 	bl	1a154 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    6942:	f04f 0010 	mov.w	r0, #16	; 0x10
    6946:	f007 fd07 	bl	e358 <_Znwj>
    694a:	4603      	mov	r3, r0
    694c:	461c      	mov	r4, r3
    694e:	687b      	ldr	r3, [r7, #4]
    6950:	6a1b      	ldr	r3, [r3, #32]
    6952:	4620      	mov	r0, r4
    6954:	4619      	mov	r1, r3
    6956:	f013 fc23 	bl	1a1a0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    695a:	687b      	ldr	r3, [r7, #4]
    695c:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    695e:	f04f 0010 	mov.w	r0, #16	; 0x10
    6962:	f007 fcf9 	bl	e358 <_Znwj>
    6966:	4603      	mov	r3, r0
    6968:	461c      	mov	r4, r3
    696a:	687b      	ldr	r3, [r7, #4]
    696c:	699b      	ldr	r3, [r3, #24]
    696e:	4620      	mov	r0, r4
    6970:	4619      	mov	r1, r3
    6972:	f013 fc35 	bl	1a1e0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6976:	687b      	ldr	r3, [r7, #4]
    6978:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    697a:	687b      	ldr	r3, [r7, #4]
    697c:	689b      	ldr	r3, [r3, #8]
    697e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6982:	4618      	mov	r0, r3
    6984:	f007 fd80 	bl	e488 <_Znaj>
    6988:	4603      	mov	r3, r0
    698a:	461a      	mov	r2, r3
    698c:	687b      	ldr	r3, [r7, #4]
    698e:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	685d      	ldr	r5, [r3, #4]
    6994:	f04f 0018 	mov.w	r0, #24	; 0x18
    6998:	f007 fcde 	bl	e358 <_Znwj>
    699c:	4603      	mov	r3, r0
    699e:	461c      	mov	r4, r3
    69a0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    69a4:	9300      	str	r3, [sp, #0]
    69a6:	4620      	mov	r0, r4
    69a8:	f04f 0102 	mov.w	r1, #2	; 0x2
    69ac:	f04f 0209 	mov.w	r2, #9	; 0x9
    69b0:	697b      	ldr	r3, [r7, #20]
    69b2:	f006 fb1d 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    69b6:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    69b8:	687b      	ldr	r3, [r7, #4]
    69ba:	685b      	ldr	r3, [r3, #4]
    69bc:	f103 0504 	add.w	r5, r3, #4	; 0x4
    69c0:	f04f 0018 	mov.w	r0, #24	; 0x18
    69c4:	f007 fcc8 	bl	e358 <_Znwj>
    69c8:	4603      	mov	r3, r0
    69ca:	461c      	mov	r4, r3
    69cc:	f640 13c4 	movw	r3, #2500	; 0x9c4
    69d0:	9300      	str	r3, [sp, #0]
    69d2:	4620      	mov	r0, r4
    69d4:	f04f 0103 	mov.w	r1, #3	; 0x3
    69d8:	f04f 020e 	mov.w	r2, #14	; 0xe
    69dc:	697b      	ldr	r3, [r7, #20]
    69de:	f006 fb07 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    69e2:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    69e4:	687b      	ldr	r3, [r7, #4]
    69e6:	685b      	ldr	r3, [r3, #4]
    69e8:	f103 0508 	add.w	r5, r3, #8	; 0x8
    69ec:	f04f 0018 	mov.w	r0, #24	; 0x18
    69f0:	f007 fcb2 	bl	e358 <_Znwj>
    69f4:	4603      	mov	r3, r0
    69f6:	461c      	mov	r4, r3
    69f8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    69fc:	9300      	str	r3, [sp, #0]
    69fe:	4620      	mov	r0, r4
    6a00:	f04f 0104 	mov.w	r1, #4	; 0x4
    6a04:	f04f 020d 	mov.w	r2, #13	; 0xd
    6a08:	697b      	ldr	r3, [r7, #20]
    6a0a:	f006 faf1 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a0e:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	685b      	ldr	r3, [r3, #4]
    6a14:	f103 050c 	add.w	r5, r3, #12	; 0xc
    6a18:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a1c:	f007 fc9c 	bl	e358 <_Znwj>
    6a20:	4603      	mov	r3, r0
    6a22:	461c      	mov	r4, r3
    6a24:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a28:	9300      	str	r3, [sp, #0]
    6a2a:	4620      	mov	r0, r4
    6a2c:	f04f 0105 	mov.w	r1, #5	; 0x5
    6a30:	f04f 020b 	mov.w	r2, #11	; 0xb
    6a34:	697b      	ldr	r3, [r7, #20]
    6a36:	f006 fadb 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a3a:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    6a3c:	687b      	ldr	r3, [r7, #4]
    6a3e:	685b      	ldr	r3, [r3, #4]
    6a40:	f103 0510 	add.w	r5, r3, #16	; 0x10
    6a44:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a48:	f007 fc86 	bl	e358 <_Znwj>
    6a4c:	4603      	mov	r3, r0
    6a4e:	461c      	mov	r4, r3
    6a50:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a54:	9300      	str	r3, [sp, #0]
    6a56:	4620      	mov	r0, r4
    6a58:	f04f 0100 	mov.w	r1, #0	; 0x0
    6a5c:	f04f 0205 	mov.w	r2, #5	; 0x5
    6a60:	697b      	ldr	r3, [r7, #20]
    6a62:	f006 fac5 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a66:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6a68:	687b      	ldr	r3, [r7, #4]
    6a6a:	685b      	ldr	r3, [r3, #4]
    6a6c:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6a70:	f04f 0018 	mov.w	r0, #24	; 0x18
    6a74:	f007 fc70 	bl	e358 <_Znwj>
    6a78:	4603      	mov	r3, r0
    6a7a:	461c      	mov	r4, r3
    6a7c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6a80:	9300      	str	r3, [sp, #0]
    6a82:	4620      	mov	r0, r4
    6a84:	f04f 0101 	mov.w	r1, #1	; 0x1
    6a88:	f04f 0204 	mov.w	r2, #4	; 0x4
    6a8c:	697b      	ldr	r3, [r7, #20]
    6a8e:	f006 faaf 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6a92:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6a94:	687b      	ldr	r3, [r7, #4]
    6a96:	685b      	ldr	r3, [r3, #4]
    6a98:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6a9c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6aa0:	f007 fc5a 	bl	e358 <_Znwj>
    6aa4:	4603      	mov	r3, r0
    6aa6:	461c      	mov	r4, r3
    6aa8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6aac:	9300      	str	r3, [sp, #0]
    6aae:	4620      	mov	r0, r4
    6ab0:	f04f 0106 	mov.w	r1, #6	; 0x6
    6ab4:	f04f 020f 	mov.w	r2, #15	; 0xf
    6ab8:	697b      	ldr	r3, [r7, #20]
    6aba:	f006 fa99 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6abe:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	685b      	ldr	r3, [r3, #4]
    6ac4:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6ac8:	f04f 0018 	mov.w	r0, #24	; 0x18
    6acc:	f007 fc44 	bl	e358 <_Znwj>
    6ad0:	4603      	mov	r3, r0
    6ad2:	461c      	mov	r4, r3
    6ad4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6ad8:	9300      	str	r3, [sp, #0]
    6ada:	4620      	mov	r0, r4
    6adc:	f04f 0107 	mov.w	r1, #7	; 0x7
    6ae0:	f04f 020c 	mov.w	r2, #12	; 0xc
    6ae4:	697b      	ldr	r3, [r7, #20]
    6ae6:	f006 fa83 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6aea:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6aec:	687b      	ldr	r3, [r7, #4]
    6aee:	685b      	ldr	r3, [r3, #4]
    6af0:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6af4:	f04f 0018 	mov.w	r0, #24	; 0x18
    6af8:	f007 fc2e 	bl	e358 <_Znwj>
    6afc:	4603      	mov	r3, r0
    6afe:	461c      	mov	r4, r3
    6b00:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6b04:	9300      	str	r3, [sp, #0]
    6b06:	4620      	mov	r0, r4
    6b08:	f04f 0108 	mov.w	r1, #8	; 0x8
    6b0c:	f04f 0208 	mov.w	r2, #8	; 0x8
    6b10:	697b      	ldr	r3, [r7, #20]
    6b12:	f006 fa6d 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6b16:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	685b      	ldr	r3, [r3, #4]
    6b1c:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6b20:	f04f 0018 	mov.w	r0, #24	; 0x18
    6b24:	f007 fc18 	bl	e358 <_Znwj>
    6b28:	4603      	mov	r3, r0
    6b2a:	461c      	mov	r4, r3
    6b2c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6b30:	9300      	str	r3, [sp, #0]
    6b32:	4620      	mov	r0, r4
    6b34:	f04f 0108 	mov.w	r1, #8	; 0x8
    6b38:	f04f 020a 	mov.w	r2, #10	; 0xa
    6b3c:	697b      	ldr	r3, [r7, #20]
    6b3e:	f006 fa57 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6b42:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6b44:	687b      	ldr	r3, [r7, #4]
    6b46:	691b      	ldr	r3, [r3, #16]
    6b48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b4c:	4618      	mov	r0, r3
    6b4e:	f007 fc9b 	bl	e488 <_Znaj>
    6b52:	4603      	mov	r3, r0
    6b54:	461a      	mov	r2, r3
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	6a1b      	ldr	r3, [r3, #32]
    6b5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b62:	4618      	mov	r0, r3
    6b64:	f007 fc90 	bl	e488 <_Znaj>
    6b68:	4603      	mov	r3, r0
    6b6a:	461a      	mov	r2, r3
    6b6c:	687b      	ldr	r3, [r7, #4]
    6b6e:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6b70:	687b      	ldr	r3, [r7, #4]
    6b72:	4618      	mov	r0, r3
    6b74:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6b78:	46bd      	mov	sp, r7
    6b7a:	bdb0      	pop	{r4, r5, r7, pc}
    6b7c:	0001f948 	.word	0x0001f948
    6b80:	20000558 	.word	0x20000558
    6b84:	0001f950 	.word	0x0001f950

00006b88 <_ZN7Sensors12getSingletonEv>:
#include "sensors.h"

Sensors* Sensors::sensors = NULL;
Sensors* Sensors::singleton = 0;

Sensors* Sensors::getSingleton()
    6b88:	b590      	push	{r4, r7, lr}
    6b8a:	b081      	sub	sp, #4
    6b8c:	af00      	add	r7, sp, #0
{
    if(singleton == 0)
    6b8e:	4b0b      	ldr	r3, [pc, #44]	(6bbc <_ZN7Sensors12getSingletonEv+0x34>)
    6b90:	681b      	ldr	r3, [r3, #0]
    6b92:	2b00      	cmp	r3, #0
    6b94:	d10a      	bne.n	6bac <_ZN7Sensors12getSingletonEv+0x24>
    {
        singleton = new Sensors;
    6b96:	f04f 0034 	mov.w	r0, #52	; 0x34
    6b9a:	f007 fbdd 	bl	e358 <_Znwj>
    6b9e:	4603      	mov	r3, r0
    6ba0:	461c      	mov	r4, r3
    6ba2:	4620      	mov	r0, r4
    6ba4:	f7ff fe92 	bl	68cc <_ZN7SensorsC1Ev>
    6ba8:	4b04      	ldr	r3, [pc, #16]	(6bbc <_ZN7Sensors12getSingletonEv+0x34>)
    6baa:	601c      	str	r4, [r3, #0]
    }
    return singleton;
    6bac:	4b03      	ldr	r3, [pc, #12]	(6bbc <_ZN7Sensors12getSingletonEv+0x34>)
    6bae:	681b      	ldr	r3, [r3, #0]
}
    6bb0:	4618      	mov	r0, r3
    6bb2:	f107 0704 	add.w	r7, r7, #4	; 0x4
    6bb6:	46bd      	mov	sp, r7
    6bb8:	bd90      	pop	{r4, r7, pc}
    6bba:	46c0      	nop			(mov r8, r8)
    6bbc:	2000055c 	.word	0x2000055c

00006bc0 <_ZN7SensorsC2Ev>:

Sensors::Sensors()
    6bc0:	b5b0      	push	{r4, r5, r7, lr}
    6bc2:	b088      	sub	sp, #32
    6bc4:	af02      	add	r7, sp, #8
    6bc6:	6078      	str	r0, [r7, #4]
    6bc8:	687a      	ldr	r2, [r7, #4]
    6bca:	4ba9      	ldr	r3, [pc, #676]	(6e70 <_ZN7SensorsC2Ev+0x2b0>)
    6bcc:	6013      	str	r3, [r2, #0]
{

    Sensors::sensors = this;
    6bce:	4aa9      	ldr	r2, [pc, #676]	(6e74 <_ZN7SensorsC2Ev+0x2b4>)
    6bd0:	687b      	ldr	r3, [r7, #4]
    6bd2:	6013      	str	r3, [r2, #0]
    *  ce tableau car sinon on ne récupérera pas les données dans le bon emplacement dans la mémoire
    */
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,7,11,6,8,10,13,15}; // D2,G2,AG(AD?),F2,D1,G1,AD(AG?),F1 //{10,11,12,13,14,15}; //
    #else // K - H107
        uint8_t channels[NB_CAPTEUR_A_ADC] = {9,14,13,11,5,4,15,12,8,10};
    6bd4:	4ba8      	ldr	r3, [pc, #672]	(6e78 <_ZN7SensorsC2Ev+0x2b8>)
    6bd6:	f107 020a 	add.w	r2, r7, #10	; 0xa
    6bda:	f04f 0c0a 	mov.w	ip, #10	; 0xa
    6bde:	4610      	mov	r0, r2
    6be0:	4619      	mov	r1, r3
    6be2:	4662      	mov	r2, ip
    6be4:	f017 fd1e 	bl	1e624 <memcpy>
    #endif


    DMA_MEMORY_TYPE* data = AnalogSensor::initialiserADC(NB_CAPTEUR_A_ADC, channels);
    6be8:	f107 030a 	add.w	r3, r7, #10	; 0xa
    6bec:	f04f 000a 	mov.w	r0, #10	; 0xa
    6bf0:	4619      	mov	r1, r3
    6bf2:	f003 fdd3 	bl	a79c <_ZN12AnalogSensor14initialiserADCEhPh>
    6bf6:	4603      	mov	r3, r0
    6bf8:	617b      	str	r3, [r7, #20]

    // On initialise le nombre de capteur de chaque type
    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        nbSharp = 8;
    #else // K - H107
        nbSharp = 10;
    6bfa:	687a      	ldr	r2, [r7, #4]
    6bfc:	f04f 030a 	mov.w	r3, #10	; 0xa
    6c00:	6093      	str	r3, [r2, #8]
    #endif

    #ifdef ROBOTHW
        nbUltrasound = 0;
    6c02:	687a      	ldr	r2, [r7, #4]
    6c04:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c08:	6113      	str	r3, [r2, #16]
        nbLimitSwitch = 0;
    6c0a:	687a      	ldr	r2, [r7, #4]
    6c0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c10:	6213      	str	r3, [r2, #32]
        nbLigthBarrier = 0;
    6c12:	687a      	ldr	r2, [r7, #4]
    6c14:	f04f 0300 	mov.w	r3, #0	; 0x0
    6c18:	6193      	str	r3, [r2, #24]
    #endif

    //sharpNameVector = new SharpNameVector(nbSharp);
#ifdef ROBOTHW
    outputSensorVector = new OutputSensorVector(nbUltrasound);
    6c1a:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c1e:	f007 fb9b 	bl	e358 <_Znwj>
    6c22:	4603      	mov	r3, r0
    6c24:	461c      	mov	r4, r3
    6c26:	687b      	ldr	r3, [r7, #4]
    6c28:	691b      	ldr	r3, [r3, #16]
    6c2a:	4620      	mov	r0, r4
    6c2c:	4619      	mov	r1, r3
    6c2e:	f013 fa91 	bl	1a154 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	631c      	str	r4, [r3, #48]
    limitSwitchNameVector = new LimitSwitchNameVector(nbLimitSwitch);
    6c36:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c3a:	f007 fb8d 	bl	e358 <_Znwj>
    6c3e:	4603      	mov	r3, r0
    6c40:	461c      	mov	r4, r3
    6c42:	687b      	ldr	r3, [r7, #4]
    6c44:	6a1b      	ldr	r3, [r3, #32]
    6c46:	4620      	mov	r0, r4
    6c48:	4619      	mov	r1, r3
    6c4a:	f013 faa9 	bl	1a1a0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>
    6c4e:	687b      	ldr	r3, [r7, #4]
    6c50:	629c      	str	r4, [r3, #40]
    ligthBarrierNameVector = new LigthBarrierNameVector(nbLigthBarrier);
    6c52:	f04f 0010 	mov.w	r0, #16	; 0x10
    6c56:	f007 fb7f 	bl	e358 <_Znwj>
    6c5a:	4603      	mov	r3, r0
    6c5c:	461c      	mov	r4, r3
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	699b      	ldr	r3, [r3, #24]
    6c62:	4620      	mov	r0, r4
    6c64:	4619      	mov	r1, r3
    6c66:	f013 fabb 	bl	1a1e0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>
    6c6a:	687b      	ldr	r3, [r7, #4]
    6c6c:	62dc      	str	r4, [r3, #44]
#endif

    // On initialise les tableaux de pointeur qui contiendront les capteurs
    sharps = new SharpSensor*[nbSharp];
    6c6e:	687b      	ldr	r3, [r7, #4]
    6c70:	689b      	ldr	r3, [r3, #8]
    6c72:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6c76:	4618      	mov	r0, r3
    6c78:	f007 fc06 	bl	e488 <_Znaj>
    6c7c:	4603      	mov	r3, r0
    6c7e:	461a      	mov	r2, r3
    6c80:	687b      	ldr	r3, [r7, #4]
    6c82:	605a      	str	r2, [r3, #4]
        sharps[7] = new SharpSensor(SharpSensor::NONE, 15, data);           // rien
        /*sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);*/           // rien
    #endif
    #ifdef STM32F10X_CL // Pin pour le stm32 h107
        sharps[0] = new SharpSensor(SharpSensor::FRONT_LEFT, 9, data);      // F1 - 9
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	685d      	ldr	r5, [r3, #4]
    6c88:	f04f 0018 	mov.w	r0, #24	; 0x18
    6c8c:	f007 fb64 	bl	e358 <_Znwj>
    6c90:	4603      	mov	r3, r0
    6c92:	461c      	mov	r4, r3
    6c94:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6c98:	9300      	str	r3, [sp, #0]
    6c9a:	4620      	mov	r0, r4
    6c9c:	f04f 0102 	mov.w	r1, #2	; 0x2
    6ca0:	f04f 0209 	mov.w	r2, #9	; 0x9
    6ca4:	697b      	ldr	r3, [r7, #20]
    6ca6:	f006 f9a3 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6caa:	602c      	str	r4, [r5, #0]
        sharps[1] = new SharpSensor(SharpSensor::FRONT_RIGHT, 14, data);    // F2 - 14
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	685b      	ldr	r3, [r3, #4]
    6cb0:	f103 0504 	add.w	r5, r3, #4	; 0x4
    6cb4:	f04f 0018 	mov.w	r0, #24	; 0x18
    6cb8:	f007 fb4e 	bl	e358 <_Znwj>
    6cbc:	4603      	mov	r3, r0
    6cbe:	461c      	mov	r4, r3
    6cc0:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6cc4:	9300      	str	r3, [sp, #0]
    6cc6:	4620      	mov	r0, r4
    6cc8:	f04f 0103 	mov.w	r1, #3	; 0x3
    6ccc:	f04f 020e 	mov.w	r2, #14	; 0xe
    6cd0:	697b      	ldr	r3, [r7, #20]
    6cd2:	f006 f98d 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6cd6:	602c      	str	r4, [r5, #0]
        sharps[2] = new SharpSensor(SharpSensor::LEFT_FRONT, 13, data);     // G2 - 13
    6cd8:	687b      	ldr	r3, [r7, #4]
    6cda:	685b      	ldr	r3, [r3, #4]
    6cdc:	f103 0508 	add.w	r5, r3, #8	; 0x8
    6ce0:	f04f 0018 	mov.w	r0, #24	; 0x18
    6ce4:	f007 fb38 	bl	e358 <_Znwj>
    6ce8:	4603      	mov	r3, r0
    6cea:	461c      	mov	r4, r3
    6cec:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6cf0:	9300      	str	r3, [sp, #0]
    6cf2:	4620      	mov	r0, r4
    6cf4:	f04f 0104 	mov.w	r1, #4	; 0x4
    6cf8:	f04f 020d 	mov.w	r2, #13	; 0xd
    6cfc:	697b      	ldr	r3, [r7, #20]
    6cfe:	f006 f977 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d02:	602c      	str	r4, [r5, #0]
        sharps[3] = new SharpSensor(SharpSensor::LEFT_BACK, 11, data);      // G1 - 11
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	685b      	ldr	r3, [r3, #4]
    6d08:	f103 050c 	add.w	r5, r3, #12	; 0xc
    6d0c:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d10:	f007 fb22 	bl	e358 <_Znwj>
    6d14:	4603      	mov	r3, r0
    6d16:	461c      	mov	r4, r3
    6d18:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d1c:	9300      	str	r3, [sp, #0]
    6d1e:	4620      	mov	r0, r4
    6d20:	f04f 0105 	mov.w	r1, #5	; 0x5
    6d24:	f04f 020b 	mov.w	r2, #11	; 0xb
    6d28:	697b      	ldr	r3, [r7, #20]
    6d2a:	f006 f961 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d2e:	602c      	str	r4, [r5, #0]
        sharps[4] = new SharpSensor(SharpSensor::BACK_RIGHT, 5, data);      // AD - 5
    6d30:	687b      	ldr	r3, [r7, #4]
    6d32:	685b      	ldr	r3, [r3, #4]
    6d34:	f103 0510 	add.w	r5, r3, #16	; 0x10
    6d38:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d3c:	f007 fb0c 	bl	e358 <_Znwj>
    6d40:	4603      	mov	r3, r0
    6d42:	461c      	mov	r4, r3
    6d44:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d48:	9300      	str	r3, [sp, #0]
    6d4a:	4620      	mov	r0, r4
    6d4c:	f04f 0100 	mov.w	r1, #0	; 0x0
    6d50:	f04f 0205 	mov.w	r2, #5	; 0x5
    6d54:	697b      	ldr	r3, [r7, #20]
    6d56:	f006 f94b 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d5a:	602c      	str	r4, [r5, #0]
        sharps[5] = new SharpSensor(SharpSensor::BACK_LEFT, 4, data);       // AG - 4
    6d5c:	687b      	ldr	r3, [r7, #4]
    6d5e:	685b      	ldr	r3, [r3, #4]
    6d60:	f103 0514 	add.w	r5, r3, #20	; 0x14
    6d64:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d68:	f007 faf6 	bl	e358 <_Znwj>
    6d6c:	4603      	mov	r3, r0
    6d6e:	461c      	mov	r4, r3
    6d70:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6d74:	9300      	str	r3, [sp, #0]
    6d76:	4620      	mov	r0, r4
    6d78:	f04f 0101 	mov.w	r1, #1	; 0x1
    6d7c:	f04f 0204 	mov.w	r2, #4	; 0x4
    6d80:	697b      	ldr	r3, [r7, #20]
    6d82:	f006 f935 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6d86:	602c      	str	r4, [r5, #0]
        sharps[6] = new SharpSensor(SharpSensor::RIGHT_FRONT, 15, data);    // D1 - 15
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	685b      	ldr	r3, [r3, #4]
    6d8c:	f103 0518 	add.w	r5, r3, #24	; 0x18
    6d90:	f04f 0018 	mov.w	r0, #24	; 0x18
    6d94:	f007 fae0 	bl	e358 <_Znwj>
    6d98:	4603      	mov	r3, r0
    6d9a:	461c      	mov	r4, r3
    6d9c:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6da0:	9300      	str	r3, [sp, #0]
    6da2:	4620      	mov	r0, r4
    6da4:	f04f 0106 	mov.w	r1, #6	; 0x6
    6da8:	f04f 020f 	mov.w	r2, #15	; 0xf
    6dac:	697b      	ldr	r3, [r7, #20]
    6dae:	f006 f91f 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6db2:	602c      	str	r4, [r5, #0]
        sharps[7] = new SharpSensor(SharpSensor::RIGHT_BACK, 12, data);     // D2 - 12
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	685b      	ldr	r3, [r3, #4]
    6db8:	f103 051c 	add.w	r5, r3, #28	; 0x1c
    6dbc:	f04f 0018 	mov.w	r0, #24	; 0x18
    6dc0:	f007 faca 	bl	e358 <_Znwj>
    6dc4:	4603      	mov	r3, r0
    6dc6:	461c      	mov	r4, r3
    6dc8:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6dcc:	9300      	str	r3, [sp, #0]
    6dce:	4620      	mov	r0, r4
    6dd0:	f04f 0107 	mov.w	r1, #7	; 0x7
    6dd4:	f04f 020c 	mov.w	r2, #12	; 0xc
    6dd8:	697b      	ldr	r3, [r7, #20]
    6dda:	f006 f909 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6dde:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 8, data);            // rien
    6de0:	687b      	ldr	r3, [r7, #4]
    6de2:	685b      	ldr	r3, [r3, #4]
    6de4:	f103 0520 	add.w	r5, r3, #32	; 0x20
    6de8:	f04f 0018 	mov.w	r0, #24	; 0x18
    6dec:	f007 fab4 	bl	e358 <_Znwj>
    6df0:	4603      	mov	r3, r0
    6df2:	461c      	mov	r4, r3
    6df4:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6df8:	9300      	str	r3, [sp, #0]
    6dfa:	4620      	mov	r0, r4
    6dfc:	f04f 0108 	mov.w	r1, #8	; 0x8
    6e00:	f04f 0208 	mov.w	r2, #8	; 0x8
    6e04:	697b      	ldr	r3, [r7, #20]
    6e06:	f006 f8f3 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e0a:	602c      	str	r4, [r5, #0]
        sharps[9] = new SharpSensor(SharpSensor::NONE, 10, data);           // rien
    6e0c:	687b      	ldr	r3, [r7, #4]
    6e0e:	685b      	ldr	r3, [r3, #4]
    6e10:	f103 0524 	add.w	r5, r3, #36	; 0x24
    6e14:	f04f 0018 	mov.w	r0, #24	; 0x18
    6e18:	f007 fa9e 	bl	e358 <_Znwj>
    6e1c:	4603      	mov	r3, r0
    6e1e:	461c      	mov	r4, r3
    6e20:	f640 13c4 	movw	r3, #2500	; 0x9c4
    6e24:	9300      	str	r3, [sp, #0]
    6e26:	4620      	mov	r0, r4
    6e28:	f04f 0108 	mov.w	r1, #8	; 0x8
    6e2c:	f04f 020a 	mov.w	r2, #10	; 0xa
    6e30:	697b      	ldr	r3, [r7, #20]
    6e32:	f006 f8dd 	bl	cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>
    6e36:	602c      	str	r4, [r5, #0]
        sharps[8] = new SharpSensor(SharpSensor::NONE, 14, data); // capteur bas ascenseur 14
        sharps[9] = new SharpSensor(SharpSensor::NONE, 15, data); // rien
    #endif
    //activeAllSharp();
#ifdef ROBOTHW
    ultrasounds = new UltrasoundSensor*[nbUltrasound];
    6e38:	687b      	ldr	r3, [r7, #4]
    6e3a:	691b      	ldr	r3, [r3, #16]
    6e3c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e40:	4618      	mov	r0, r3
    6e42:	f007 fb21 	bl	e488 <_Znaj>
    6e46:	4603      	mov	r3, r0
    6e48:	461a      	mov	r2, r3
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	60da      	str	r2, [r3, #12]
    limitSwitchs = new  LimitSwitchSensor*[nbLimitSwitch];
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	6a1b      	ldr	r3, [r3, #32]
    6e52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6e56:	4618      	mov	r0, r3
    6e58:	f007 fb16 	bl	e488 <_Znaj>
    6e5c:	4603      	mov	r3, r0
    6e5e:	461a      	mov	r2, r3
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	61da      	str	r2, [r3, #28]
    limitSwitchs[2] = new LimitSwitchSensor(LimitSwitchSensor::FRONT, GPIO_Pin_11, GPIOC);
#endif
*/
 //   AnalogSensor::initialiserADC_Fin(data, NB_CAPTEUR_A_ADC);
 #endif //ROBOTHW
}
    6e64:	687b      	ldr	r3, [r7, #4]
    6e66:	4618      	mov	r0, r3
    6e68:	f107 0718 	add.w	r7, r7, #24	; 0x18
    6e6c:	46bd      	mov	sp, r7
    6e6e:	bdb0      	pop	{r4, r5, r7, pc}
    6e70:	0001f948 	.word	0x0001f948
    6e74:	20000558 	.word	0x20000558
    6e78:	0001f950 	.word	0x0001f950

00006e7c <_ZN5Servo13shutDownServoEv>:

    float rc = m_RC0degre + m_coefRC * angle;
	pwm_handler.setDutyCycle(rc);
}

void Servo::shutDownServo()
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b082      	sub	sp, #8
    6e80:	af00      	add	r7, sp, #0
    6e82:	6078      	str	r0, [r7, #4]
{
    pwm_handler.setPulseWidth(0);
    6e84:	687b      	ldr	r3, [r7, #4]
    6e86:	4618      	mov	r0, r3
    6e88:	f04f 0100 	mov.w	r1, #0	; 0x0
    6e8c:	f005 faa4 	bl	c3d8 <_ZN10PWMHandler13setPulseWidthEt>
}
    6e90:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6e94:	46bd      	mov	sp, r7
    6e96:	bd80      	pop	{r7, pc}

00006e98 <_ZN5Servo9goToAngleEf>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}

void Servo::goToAngle(Angle angle)
    6e98:	b590      	push	{r4, r7, lr}
    6e9a:	b085      	sub	sp, #20
    6e9c:	af00      	add	r7, sp, #0
    6e9e:	6078      	str	r0, [r7, #4]
    6ea0:	6039      	str	r1, [r7, #0]
	float pulseWidth = angle*19.5f+1200.0f; // pour le servo ES 539 made in malaysia

    // Donner la rapport au PWM
	pwm_handler.setPulseWidth(pulseWidth);*/

    if (angle < 0.0)
    6ea2:	6838      	ldr	r0, [r7, #0]
    6ea4:	4914      	ldr	r1, [pc, #80]	(6ef8 <_ZN5Servo9goToAngleEf+0x60>)
    6ea6:	f012 f887 	bl	18fb8 <__aeabi_fcmplt>
    6eaa:	4603      	mov	r3, r0
    6eac:	2b00      	cmp	r3, #0
    6eae:	d002      	beq.n	6eb6 <_ZN5Servo9goToAngleEf+0x1e>
        angle = 0.0f;
    6eb0:	4b11      	ldr	r3, [pc, #68]	(6ef8 <_ZN5Servo9goToAngleEf+0x60>)
    6eb2:	603b      	str	r3, [r7, #0]
    6eb4:	e008      	b.n	6ec8 <_ZN5Servo9goToAngleEf+0x30>
    else if (angle > 180.0f)
    6eb6:	6838      	ldr	r0, [r7, #0]
    6eb8:	4910      	ldr	r1, [pc, #64]	(6efc <_ZN5Servo9goToAngleEf+0x64>)
    6eba:	f012 f89b 	bl	18ff4 <__aeabi_fcmpgt>
    6ebe:	4603      	mov	r3, r0
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d001      	beq.n	6ec8 <_ZN5Servo9goToAngleEf+0x30>
        angle = 180.0f;
    6ec4:	4b0d      	ldr	r3, [pc, #52]	(6efc <_ZN5Servo9goToAngleEf+0x64>)
    6ec6:	603b      	str	r3, [r7, #0]

    float rc = m_RC0degre + m_coefRC * angle;
    6ec8:	687b      	ldr	r3, [r7, #4]
    6eca:	68dc      	ldr	r4, [r3, #12]
    6ecc:	687b      	ldr	r3, [r7, #4]
    6ece:	691b      	ldr	r3, [r3, #16]
    6ed0:	4618      	mov	r0, r3
    6ed2:	6839      	ldr	r1, [r7, #0]
    6ed4:	f011 fed4 	bl	18c80 <__aeabi_fmul>
    6ed8:	4603      	mov	r3, r0
    6eda:	4620      	mov	r0, r4
    6edc:	4619      	mov	r1, r3
    6ede:	f011 fdc7 	bl	18a70 <__addsf3>
    6ee2:	4603      	mov	r3, r0
    6ee4:	60fb      	str	r3, [r7, #12]
	pwm_handler.setDutyCycle(rc);
    6ee6:	687b      	ldr	r3, [r7, #4]
    6ee8:	4618      	mov	r0, r3
    6eea:	68f9      	ldr	r1, [r7, #12]
    6eec:	f005 fac6 	bl	c47c <_ZN10PWMHandler12setDutyCycleEf>
}
    6ef0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    6ef4:	46bd      	mov	sp, r7
    6ef6:	bd90      	pop	{r4, r7, pc}
    6ef8:	00000000 	.word	0x00000000
    6efc:	43340000 	.word	0x43340000

00006f00 <_ZN5Servo7initPinEP12GPIO_TypeDeft>:
{
    shutDownServo();
}

// initialise la pin du servo
void Servo::initPin(GPIO_TypeDef* GPIOx, uint16_t pinX)
    6f00:	b580      	push	{r7, lr}
    6f02:	b084      	sub	sp, #16
    6f04:	af00      	add	r7, sp, #0
    6f06:	6078      	str	r0, [r7, #4]
    6f08:	460b      	mov	r3, r1
    6f0a:	807b      	strh	r3, [r7, #2]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = pinX;
    6f0c:	887b      	ldrh	r3, [r7, #2]
    6f0e:	81bb      	strh	r3, [r7, #12]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    6f10:	f04f 0348 	mov.w	r3, #72	; 0x48
    6f14:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    6f16:	f04f 0303 	mov.w	r3, #3	; 0x3
    6f1a:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    6f1c:	f107 030c 	add.w	r3, r7, #12	; 0xc
    6f20:	6878      	ldr	r0, [r7, #4]
    6f22:	4619      	mov	r1, r3
    6f24:	f7fa fbc4 	bl	16b0 <GPIO_Init>
}
    6f28:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6f2c:	46bd      	mov	sp, r7
    6f2e:	bd80      	pop	{r7, pc}

00006f30 <_ZN5ServoD1Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    6f30:	b580      	push	{r7, lr}
    6f32:	b082      	sub	sp, #8
    6f34:	af00      	add	r7, sp, #0
    6f36:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    6f38:	6878      	ldr	r0, [r7, #4]
    6f3a:	f7ff ff9f 	bl	6e7c <_ZN5Servo13shutDownServoEv>
}
    6f3e:	687b      	ldr	r3, [r7, #4]
    6f40:	4618      	mov	r0, r3
    6f42:	f005 fa7b 	bl	c43c <_ZN10PWMHandlerD1Ev>
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	4618      	mov	r0, r3
    6f4a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6f4e:	46bd      	mov	sp, r7
    6f50:	bd80      	pop	{r7, pc}
    6f52:	46c0      	nop			(mov r8, r8)

00006f54 <_ZN5ServoD2Ev>:
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
{
}

Servo::~Servo()
    6f54:	b580      	push	{r7, lr}
    6f56:	b082      	sub	sp, #8
    6f58:	af00      	add	r7, sp, #0
    6f5a:	6078      	str	r0, [r7, #4]
{
    shutDownServo();
    6f5c:	6878      	ldr	r0, [r7, #4]
    6f5e:	f7ff ff8d 	bl	6e7c <_ZN5Servo13shutDownServoEv>
}
    6f62:	687b      	ldr	r3, [r7, #4]
    6f64:	4618      	mov	r0, r3
    6f66:	f005 fa69 	bl	c43c <_ZN10PWMHandlerD1Ev>
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	4618      	mov	r0, r3
    6f6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    6f72:	46bd      	mov	sp, r7
    6f74:	bd80      	pop	{r7, pc}
    6f76:	46c0      	nop			(mov r8, r8)

00006f78 <_ZN5ServoC1EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    6f78:	b580      	push	{r7, lr}
    6f7a:	b084      	sub	sp, #16
    6f7c:	af00      	add	r7, sp, #0
    6f7e:	60f8      	str	r0, [r7, #12]
    6f80:	60b9      	str	r1, [r7, #8]
    6f82:	603b      	str	r3, [r7, #0]
    6f84:	4613      	mov	r3, r2
    6f86:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    6f88:	68fb      	ldr	r3, [r7, #12]
    6f8a:	79fa      	ldrb	r2, [r7, #7]
    6f8c:	4618      	mov	r0, r3
    6f8e:	68b9      	ldr	r1, [r7, #8]
    6f90:	f005 fa96 	bl	c4c0 <_ZN10PWMHandlerC1EP5Timerh>
    6f94:	68fa      	ldr	r2, [r7, #12]
    6f96:	68bb      	ldr	r3, [r7, #8]
    6f98:	6093      	str	r3, [r2, #8]
    6f9a:	68fa      	ldr	r2, [r7, #12]
    6f9c:	683b      	ldr	r3, [r7, #0]
    6f9e:	60d3      	str	r3, [r2, #12]
    6fa0:	69b8      	ldr	r0, [r7, #24]
    6fa2:	6839      	ldr	r1, [r7, #0]
    6fa4:	f011 fd62 	bl	18a6c <__aeabi_fsub>
    6fa8:	4603      	mov	r3, r0
    6faa:	4618      	mov	r0, r3
    6fac:	4906      	ldr	r1, [pc, #24]	(6fc8 <_ZN5ServoC1EP5Timerhff+0x50>)
    6fae:	f011 ff1b 	bl	18de8 <__aeabi_fdiv>
    6fb2:	4603      	mov	r3, r0
    6fb4:	461a      	mov	r2, r3
    6fb6:	68fb      	ldr	r3, [r7, #12]
    6fb8:	611a      	str	r2, [r3, #16]
{
}
    6fba:	68fb      	ldr	r3, [r7, #12]
    6fbc:	4618      	mov	r0, r3
    6fbe:	f107 0710 	add.w	r7, r7, #16	; 0x10
    6fc2:	46bd      	mov	sp, r7
    6fc4:	bd80      	pop	{r7, pc}
    6fc6:	46c0      	nop			(mov r8, r8)
    6fc8:	43340000 	.word	0x43340000

00006fcc <_ZN5ServoC2EP5Timerhff>:
#include "servo.h"

#ifdef ROBOTHW

// on donne le rapport cyclique de l'angle minimal (0 degré) et celui de l'angle maximal (180 degrés)
Servo::Servo(Timer* timer, unsigned char OCx, float RC0degre, float RC180degres)
    6fcc:	b580      	push	{r7, lr}
    6fce:	b084      	sub	sp, #16
    6fd0:	af00      	add	r7, sp, #0
    6fd2:	60f8      	str	r0, [r7, #12]
    6fd4:	60b9      	str	r1, [r7, #8]
    6fd6:	603b      	str	r3, [r7, #0]
    6fd8:	4613      	mov	r3, r2
    6fda:	71fb      	strb	r3, [r7, #7]
    : pwm_handler(timer, OCx), m_timer(timer), m_RC0degre(RC0degre), m_coefRC((RC180degres-RC0degre)/180.0f)
    6fdc:	68fb      	ldr	r3, [r7, #12]
    6fde:	79fa      	ldrb	r2, [r7, #7]
    6fe0:	4618      	mov	r0, r3
    6fe2:	68b9      	ldr	r1, [r7, #8]
    6fe4:	f005 fa6c 	bl	c4c0 <_ZN10PWMHandlerC1EP5Timerh>
    6fe8:	68fa      	ldr	r2, [r7, #12]
    6fea:	68bb      	ldr	r3, [r7, #8]
    6fec:	6093      	str	r3, [r2, #8]
    6fee:	68fa      	ldr	r2, [r7, #12]
    6ff0:	683b      	ldr	r3, [r7, #0]
    6ff2:	60d3      	str	r3, [r2, #12]
    6ff4:	69b8      	ldr	r0, [r7, #24]
    6ff6:	6839      	ldr	r1, [r7, #0]
    6ff8:	f011 fd38 	bl	18a6c <__aeabi_fsub>
    6ffc:	4603      	mov	r3, r0
    6ffe:	4618      	mov	r0, r3
    7000:	4906      	ldr	r1, [pc, #24]	(701c <_ZN5ServoC2EP5Timerhff+0x50>)
    7002:	f011 fef1 	bl	18de8 <__aeabi_fdiv>
    7006:	4603      	mov	r3, r0
    7008:	461a      	mov	r2, r3
    700a:	68fb      	ldr	r3, [r7, #12]
    700c:	611a      	str	r2, [r3, #16]
{
}
    700e:	68fb      	ldr	r3, [r7, #12]
    7010:	4618      	mov	r0, r3
    7012:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7016:	46bd      	mov	sp, r7
    7018:	bd80      	pop	{r7, pc}
    701a:	46c0      	nop			(mov r8, r8)
    701c:	43340000 	.word	0x43340000

00007020 <_Z9wrapAnglef>:
#include "angle.h"
#include <math.h>

// Retourne la valeur de l'angle dans un float entre -PI et PI.
Angle wrapAngle(Angle angle)
    7020:	b580      	push	{r7, lr}
    7022:	b082      	sub	sp, #8
    7024:	af00      	add	r7, sp, #0
    7026:	6078      	str	r0, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    7028:	6878      	ldr	r0, [r7, #4]
    702a:	491f      	ldr	r1, [pc, #124]	(70a8 <_Z9wrapAnglef+0x88>)
    702c:	f011 ffe2 	bl	18ff4 <__aeabi_fcmpgt>
    7030:	4603      	mov	r3, r0
    7032:	2b00      	cmp	r3, #0
    7034:	d106      	bne.n	7044 <_Z9wrapAnglef+0x24>
    7036:	e01a      	b.n	706e <_Z9wrapAnglef+0x4e>
    {
        while (angle > M_PI)
            angle -= M_2PI;
    7038:	6878      	ldr	r0, [r7, #4]
    703a:	491c      	ldr	r1, [pc, #112]	(70ac <_Z9wrapAnglef+0x8c>)
    703c:	f011 fd16 	bl	18a6c <__aeabi_fsub>
    7040:	4603      	mov	r3, r0
    7042:	607b      	str	r3, [r7, #4]
{
    static const Angle M_2PI = 6.283185307179586476925;

    if (angle > 0)
    {
        while (angle > M_PI)
    7044:	6878      	ldr	r0, [r7, #4]
    7046:	f011 f9a9 	bl	1839c <__aeabi_f2d>
    704a:	4602      	mov	r2, r0
    704c:	460b      	mov	r3, r1
    704e:	4610      	mov	r0, r2
    7050:	4619      	mov	r1, r3
    7052:	a211      	add	r2, pc, #68	(adr r2, 7098 <_Z9wrapAnglef+0x78>)
    7054:	ca0c      	ldmia	r2!, {r2, r3}
    7056:	f011 fc83 	bl	18960 <__aeabi_dcmpgt>
    705a:	4603      	mov	r3, r0
    705c:	2b00      	cmp	r3, #0
    705e:	d1eb      	bne.n	7038 <_Z9wrapAnglef+0x18>
    7060:	e013      	b.n	708a <_Z9wrapAnglef+0x6a>
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
            angle += M_2PI;
    7062:	6878      	ldr	r0, [r7, #4]
    7064:	4911      	ldr	r1, [pc, #68]	(70ac <_Z9wrapAnglef+0x8c>)
    7066:	f011 fd03 	bl	18a70 <__addsf3>
    706a:	4603      	mov	r3, r0
    706c:	607b      	str	r3, [r7, #4]
        while (angle > M_PI)
            angle -= M_2PI;
    }
    else
    {
        while (angle < -M_PI)
    706e:	6878      	ldr	r0, [r7, #4]
    7070:	f011 f994 	bl	1839c <__aeabi_f2d>
    7074:	4602      	mov	r2, r0
    7076:	460b      	mov	r3, r1
    7078:	4610      	mov	r0, r2
    707a:	4619      	mov	r1, r3
    707c:	a208      	add	r2, pc, #32	(adr r2, 70a0 <_Z9wrapAnglef+0x80>)
    707e:	ca0c      	ldmia	r2!, {r2, r3}
    7080:	f011 fc50 	bl	18924 <__aeabi_dcmplt>
    7084:	4603      	mov	r3, r0
    7086:	2b00      	cmp	r3, #0
    7088:	d1eb      	bne.n	7062 <_Z9wrapAnglef+0x42>
            angle += M_2PI;
    }
    return angle;
    708a:	687b      	ldr	r3, [r7, #4]
}
    708c:	4618      	mov	r0, r3
    708e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7092:	46bd      	mov	sp, r7
    7094:	bd80      	pop	{r7, pc}
    7096:	46c0      	nop			(mov r8, r8)
    7098:	54442d18 	.word	0x54442d18
    709c:	400921fb 	.word	0x400921fb
    70a0:	54442d18 	.word	0x54442d18
    70a4:	c00921fb 	.word	0xc00921fb
    70a8:	00000000 	.word	0x00000000
    70ac:	40c90fdb 	.word	0x40c90fdb

000070b0 <_Z7angleEqff>:

// Vérifie s'il y a égalité ou presque entre deux angles.
bool angleEq(Angle a1, Angle a2)
    70b0:	b580      	push	{r7, lr}
    70b2:	b084      	sub	sp, #16
    70b4:	af00      	add	r7, sp, #0
    70b6:	60f8      	str	r0, [r7, #12]
    70b8:	60b9      	str	r1, [r7, #8]
{
    static const Angle epsilon = 0.1;
    return (fabs(wrapAngle(a1 - a2)) < epsilon);
    70ba:	68f8      	ldr	r0, [r7, #12]
    70bc:	68b9      	ldr	r1, [r7, #8]
    70be:	f011 fcd5 	bl	18a6c <__aeabi_fsub>
    70c2:	4603      	mov	r3, r0
    70c4:	4618      	mov	r0, r3
    70c6:	f7ff ffab 	bl	7020 <_Z9wrapAnglef>
    70ca:	4603      	mov	r3, r0
    70cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    70d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    70d4:	71fb      	strb	r3, [r7, #7]
    70d6:	4610      	mov	r0, r2
    70d8:	4907      	ldr	r1, [pc, #28]	(70f8 <_Z7angleEqff+0x48>)
    70da:	f011 ff6d 	bl	18fb8 <__aeabi_fcmplt>
    70de:	4603      	mov	r3, r0
    70e0:	2b00      	cmp	r3, #0
    70e2:	d002      	beq.n	70ea <_Z7angleEqff+0x3a>
    70e4:	f04f 0301 	mov.w	r3, #1	; 0x1
    70e8:	71fb      	strb	r3, [r7, #7]
    70ea:	79fb      	ldrb	r3, [r7, #7]
}
    70ec:	4618      	mov	r0, r3
    70ee:	f107 0710 	add.w	r7, r7, #16	; 0x10
    70f2:	46bd      	mov	sp, r7
    70f4:	bd80      	pop	{r7, pc}
    70f6:	46c0      	nop			(mov r8, r8)
    70f8:	3dcccccd 	.word	0x3dcccccd
    70fc:	46c046c0 	.word	0x46c046c0

00007100 <_ZN14Asservissement14setLinearSpeedEf>:
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    NVIC_Init(&SysTick_IRQ);
#endif
}

void Asservissement::setLinearSpeed(Vitesse vitesse)
    7100:	b480      	push	{r7}
    7102:	b083      	sub	sp, #12
    7104:	af00      	add	r7, sp, #0
    7106:	6078      	str	r0, [r7, #4]
    7108:	6039      	str	r1, [r7, #0]
{
    vitesseLineaire = vitesse;
    710a:	687a      	ldr	r2, [r7, #4]
    710c:	683b      	ldr	r3, [r7, #0]
    710e:	64d3      	str	r3, [r2, #76]
    //setEnabledPIDDistance(true);
}
    7110:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7114:	46bd      	mov	sp, r7
    7116:	bc80      	pop	{r7}
    7118:	4770      	bx	lr
    711a:	46c0      	nop			(mov r8, r8)

0000711c <_ZN14Asservissement15setAngularSpeedEf>:

void Asservissement::setAngularSpeed(VitesseAngulaire vitesse)
    711c:	b480      	push	{r7}
    711e:	b083      	sub	sp, #12
    7120:	af00      	add	r7, sp, #0
    7122:	6078      	str	r0, [r7, #4]
    7124:	6039      	str	r1, [r7, #0]
{
    vitesseAngulaire = vitesse;
    7126:	687a      	ldr	r2, [r7, #4]
    7128:	683b      	ldr	r3, [r7, #0]
    712a:	6513      	str	r3, [r2, #80]
    //setEnabledPIDAngle(true);
}
    712c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7130:	46bd      	mov	sp, r7
    7132:	bc80      	pop	{r7}
    7134:	4770      	bx	lr
    7136:	46c0      	nop			(mov r8, r8)

00007138 <_ZN14Asservissement16setCommandSpeedsEP7Command>:

void Asservissement::setCommandSpeeds(Command* command)
    7138:	b580      	push	{r7, lr}
    713a:	b082      	sub	sp, #8
    713c:	af00      	add	r7, sp, #0
    713e:	6078      	str	r0, [r7, #4]
    7140:	6039      	str	r1, [r7, #0]
{
    if (command != NULL)
    7142:	683b      	ldr	r3, [r7, #0]
    7144:	2b00      	cmp	r3, #0
    7146:	d018      	beq.n	717a <_ZN14Asservissement16setCommandSpeedsEP7Command+0x42>
    {
        setLinearSpeed(command->getLinearSpeed());
    7148:	683b      	ldr	r3, [r7, #0]
    714a:	681b      	ldr	r3, [r3, #0]
    714c:	f103 0310 	add.w	r3, r3, #16	; 0x10
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	6838      	ldr	r0, [r7, #0]
    7154:	4798      	blx	r3
    7156:	4603      	mov	r3, r0
    7158:	6878      	ldr	r0, [r7, #4]
    715a:	4619      	mov	r1, r3
    715c:	f7ff ffd0 	bl	7100 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(command->getAngularSpeed());
    7160:	683b      	ldr	r3, [r7, #0]
    7162:	681b      	ldr	r3, [r3, #0]
    7164:	f103 0314 	add.w	r3, r3, #20	; 0x14
    7168:	681b      	ldr	r3, [r3, #0]
    716a:	6838      	ldr	r0, [r7, #0]
    716c:	4798      	blx	r3
    716e:	4603      	mov	r3, r0
    7170:	6878      	ldr	r0, [r7, #4]
    7172:	4619      	mov	r1, r3
    7174:	f7ff ffd2 	bl	711c <_ZN14Asservissement15setAngularSpeedEf>
    7178:	e007      	b.n	718a <_ZN14Asservissement16setCommandSpeedsEP7Command+0x52>
    }
    else
    {
        setLinearSpeed(0.0f);
    717a:	6878      	ldr	r0, [r7, #4]
    717c:	4905      	ldr	r1, [pc, #20]	(7194 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    717e:	f7ff ffbf 	bl	7100 <_ZN14Asservissement14setLinearSpeedEf>
        setAngularSpeed(0.0f);
    7182:	6878      	ldr	r0, [r7, #4]
    7184:	4903      	ldr	r1, [pc, #12]	(7194 <_ZN14Asservissement16setCommandSpeedsEP7Command+0x5c>)
    7186:	f7ff ffc9 	bl	711c <_ZN14Asservissement15setAngularSpeedEf>
    }

    /*setEnabledPIDDistance(true);
    setEnabledPIDAngle(true);
    resetFixedDuty();*/
}
    718a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    718e:	46bd      	mov	sp, r7
    7190:	bd80      	pop	{r7, pc}
    7192:	46c0      	nop			(mov r8, r8)
    7194:	00000000 	.word	0x00000000

00007198 <_ZN14Asservissement14getLinearSpeedEv>:

Distance Asservissement::getLinearSpeed()
    7198:	b480      	push	{r7}
    719a:	b083      	sub	sp, #12
    719c:	af00      	add	r7, sp, #0
    719e:	6078      	str	r0, [r7, #4]
{
  /*  if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getLeftPWM();
    else*/
        return vitesseLineaire;
    71a0:	687b      	ldr	r3, [r7, #4]
    71a2:	6cdb      	ldr	r3, [r3, #76]
}
    71a4:	4618      	mov	r0, r3
    71a6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    71aa:	46bd      	mov	sp, r7
    71ac:	bc80      	pop	{r7}
    71ae:	4770      	bx	lr

000071b0 <_ZN14Asservissement15getAngularSpeedEv>:

Angle Asservissement::getAngularSpeed()
    71b0:	b480      	push	{r7}
    71b2:	b083      	sub	sp, #12
    71b4:	af00      	add	r7, sp, #0
    71b6:	6078      	str	r0, [r7, #4]
{
   /* if (Remote::getSingleton()->isRemoteMode())
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
    71b8:	687b      	ldr	r3, [r7, #4]
    71ba:	6d1b      	ldr	r3, [r3, #80]
}
    71bc:	4618      	mov	r0, r3
    71be:	f107 070c 	add.w	r7, r7, #12	; 0xc
    71c2:	46bd      	mov	sp, r7
    71c4:	bc80      	pop	{r7}
    71c6:	4770      	bx	lr

000071c8 <_ZN14Asservissement8finMatchEv>:
    Asservissement::asservissement->update();
}

#endif

void Asservissement::finMatch()
    71c8:	b480      	push	{r7}
    71ca:	af00      	add	r7, sp, #0
{
    Asservissement::matchFini = true;
    71cc:	4b03      	ldr	r3, [pc, #12]	(71dc <_ZN14Asservissement8finMatchEv+0x14>)
    71ce:	f04f 0201 	mov.w	r2, #1	; 0x1
    71d2:	701a      	strb	r2, [r3, #0]
    #ifdef ROBOTHW


    #endif
}
    71d4:	46bd      	mov	sp, r7
    71d6:	bc80      	pop	{r7}
    71d8:	4770      	bx	lr
    71da:	46c0      	nop			(mov r8, r8)
    71dc:	20000564 	.word	0x20000564

000071e0 <_ZN14Asservissement21setEnabledPIDDistanceEb>:

void Asservissement::setEnabledPIDDistance(bool enabled)
    71e0:	b480      	push	{r7}
    71e2:	b083      	sub	sp, #12
    71e4:	af00      	add	r7, sp, #0
    71e6:	6078      	str	r0, [r7, #4]
    71e8:	460b      	mov	r3, r1
    71ea:	70fb      	strb	r3, [r7, #3]
{
    activePIDDistance = enabled;
    71ec:	687a      	ldr	r2, [r7, #4]
    71ee:	78fb      	ldrb	r3, [r7, #3]
    71f0:	f882 3054 	strb.w	r3, [r2, #84]
}
    71f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    71f8:	46bd      	mov	sp, r7
    71fa:	bc80      	pop	{r7}
    71fc:	4770      	bx	lr
    71fe:	46c0      	nop			(mov r8, r8)

00007200 <_ZN14Asservissement18setEnabledPIDAngleEb>:

void Asservissement::setEnabledPIDAngle(bool enabled)
    7200:	b480      	push	{r7}
    7202:	b083      	sub	sp, #12
    7204:	af00      	add	r7, sp, #0
    7206:	6078      	str	r0, [r7, #4]
    7208:	460b      	mov	r3, r1
    720a:	70fb      	strb	r3, [r7, #3]
{
    activePIDAngle = enabled;
    720c:	687a      	ldr	r2, [r7, #4]
    720e:	78fb      	ldrb	r3, [r7, #3]
    7210:	f882 3055 	strb.w	r3, [r2, #85]
}
    7214:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7218:	46bd      	mov	sp, r7
    721a:	bc80      	pop	{r7}
    721c:	4770      	bx	lr
    721e:	46c0      	nop			(mov r8, r8)

00007220 <_ZN14Asservissement13setLinearDutyEf>:

void Asservissement::setLinearDuty(float duty)
    7220:	b580      	push	{r7, lr}
    7222:	b086      	sub	sp, #24
    7224:	af00      	add	r7, sp, #0
    7226:	6178      	str	r0, [r7, #20]
    7228:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDDistance(false);
    722a:	6978      	ldr	r0, [r7, #20]
    722c:	f04f 0100 	mov.w	r1, #0	; 0x0
    7230:	f7ff ffd6 	bl	71e0 <_ZN14Asservissement21setEnabledPIDDistanceEb>
    fixedLinearDuty = MAX( MIN( duty, FIXED_LINEAR_DUTY_MAX), -FIXED_LINEAR_DUTY_MAX);
    7234:	6938      	ldr	r0, [r7, #16]
    7236:	f011 f8b1 	bl	1839c <__aeabi_f2d>
    723a:	4602      	mov	r2, r0
    723c:	460b      	mov	r3, r1
    723e:	4610      	mov	r0, r2
    7240:	4619      	mov	r1, r3
    7242:	a221      	add	r2, pc, #132	(adr r2, 72c8 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    7244:	ca0c      	ldmia	r2!, {r2, r3}
    7246:	f011 fb8b 	bl	18960 <__aeabi_dcmpgt>
    724a:	4603      	mov	r3, r0
    724c:	2b00      	cmp	r3, #0
    724e:	d003      	beq.n	7258 <_ZN14Asservissement13setLinearDutyEf+0x38>
    7250:	f04f 0200 	mov.w	r2, #0	; 0x0
    7254:	60ba      	str	r2, [r7, #8]
    7256:	e015      	b.n	7284 <_ZN14Asservissement13setLinearDutyEf+0x64>
    7258:	6938      	ldr	r0, [r7, #16]
    725a:	f011 f89f 	bl	1839c <__aeabi_f2d>
    725e:	4602      	mov	r2, r0
    7260:	460b      	mov	r3, r1
    7262:	f04f 0100 	mov.w	r1, #0	; 0x0
    7266:	70f9      	strb	r1, [r7, #3]
    7268:	4610      	mov	r0, r2
    726a:	4619      	mov	r1, r3
    726c:	a218      	add	r2, pc, #96	(adr r2, 72d0 <_ZN14Asservissement13setLinearDutyEf+0xb0>)
    726e:	ca0c      	ldmia	r2!, {r2, r3}
    7270:	f011 fb58 	bl	18924 <__aeabi_dcmplt>
    7274:	4603      	mov	r3, r0
    7276:	2b00      	cmp	r3, #0
    7278:	d002      	beq.n	7280 <_ZN14Asservissement13setLinearDutyEf+0x60>
    727a:	f04f 0301 	mov.w	r3, #1	; 0x1
    727e:	70fb      	strb	r3, [r7, #3]
    7280:	78fb      	ldrb	r3, [r7, #3]
    7282:	60bb      	str	r3, [r7, #8]
    7284:	68ba      	ldr	r2, [r7, #8]
    7286:	2a00      	cmp	r2, #0
    7288:	d002      	beq.n	7290 <_ZN14Asservissement13setLinearDutyEf+0x70>
    728a:	4b13      	ldr	r3, [pc, #76]	(72d8 <_ZN14Asservissement13setLinearDutyEf+0xb8>)
    728c:	607b      	str	r3, [r7, #4]
    728e:	e014      	b.n	72ba <_ZN14Asservissement13setLinearDutyEf+0x9a>
    7290:	6938      	ldr	r0, [r7, #16]
    7292:	f011 f883 	bl	1839c <__aeabi_f2d>
    7296:	4602      	mov	r2, r0
    7298:	460b      	mov	r3, r1
    729a:	4610      	mov	r0, r2
    729c:	4619      	mov	r1, r3
    729e:	a20a      	add	r2, pc, #40	(adr r2, 72c8 <_ZN14Asservissement13setLinearDutyEf+0xa8>)
    72a0:	ca0c      	ldmia	r2!, {r2, r3}
    72a2:	f011 fb5d 	bl	18960 <__aeabi_dcmpgt>
    72a6:	4603      	mov	r3, r0
    72a8:	2b00      	cmp	r3, #0
    72aa:	d002      	beq.n	72b2 <_ZN14Asservissement13setLinearDutyEf+0x92>
    72ac:	4a0b      	ldr	r2, [pc, #44]	(72dc <_ZN14Asservissement13setLinearDutyEf+0xbc>)
    72ae:	60fa      	str	r2, [r7, #12]
    72b0:	e001      	b.n	72b6 <_ZN14Asservissement13setLinearDutyEf+0x96>
    72b2:	693b      	ldr	r3, [r7, #16]
    72b4:	60fb      	str	r3, [r7, #12]
    72b6:	68fa      	ldr	r2, [r7, #12]
    72b8:	607a      	str	r2, [r7, #4]
    72ba:	697b      	ldr	r3, [r7, #20]
    72bc:	687a      	ldr	r2, [r7, #4]
    72be:	659a      	str	r2, [r3, #88]
}
    72c0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    72c4:	46bd      	mov	sp, r7
    72c6:	bd80      	pop	{r7, pc}
    72c8:	9999999a 	.word	0x9999999a
    72cc:	3fc99999 	.word	0x3fc99999
    72d0:	9999999a 	.word	0x9999999a
    72d4:	bfc99999 	.word	0xbfc99999
    72d8:	be4ccccd 	.word	0xbe4ccccd
    72dc:	3e4ccccd 	.word	0x3e4ccccd

000072e0 <_ZN14Asservissement14setAngularDutyEf>:

void Asservissement::setAngularDuty(float duty)
    72e0:	b580      	push	{r7, lr}
    72e2:	b086      	sub	sp, #24
    72e4:	af00      	add	r7, sp, #0
    72e6:	6178      	str	r0, [r7, #20]
    72e8:	6139      	str	r1, [r7, #16]
{
    setEnabledPIDAngle(false);
    72ea:	6978      	ldr	r0, [r7, #20]
    72ec:	f04f 0100 	mov.w	r1, #0	; 0x0
    72f0:	f7ff ff86 	bl	7200 <_ZN14Asservissement18setEnabledPIDAngleEb>
    fixedAngularDuty = MAX( MIN( duty, FIXED_ANGULAR_DUTY_MAX), -FIXED_ANGULAR_DUTY_MAX);
    72f4:	6938      	ldr	r0, [r7, #16]
    72f6:	f011 f851 	bl	1839c <__aeabi_f2d>
    72fa:	4602      	mov	r2, r0
    72fc:	460b      	mov	r3, r1
    72fe:	4610      	mov	r0, r2
    7300:	4619      	mov	r1, r3
    7302:	a221      	add	r2, pc, #132	(adr r2, 7388 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    7304:	ca0c      	ldmia	r2!, {r2, r3}
    7306:	f011 fb2b 	bl	18960 <__aeabi_dcmpgt>
    730a:	4603      	mov	r3, r0
    730c:	2b00      	cmp	r3, #0
    730e:	d003      	beq.n	7318 <_ZN14Asservissement14setAngularDutyEf+0x38>
    7310:	f04f 0200 	mov.w	r2, #0	; 0x0
    7314:	60ba      	str	r2, [r7, #8]
    7316:	e015      	b.n	7344 <_ZN14Asservissement14setAngularDutyEf+0x64>
    7318:	6938      	ldr	r0, [r7, #16]
    731a:	f011 f83f 	bl	1839c <__aeabi_f2d>
    731e:	4602      	mov	r2, r0
    7320:	460b      	mov	r3, r1
    7322:	f04f 0100 	mov.w	r1, #0	; 0x0
    7326:	70f9      	strb	r1, [r7, #3]
    7328:	4610      	mov	r0, r2
    732a:	4619      	mov	r1, r3
    732c:	a218      	add	r2, pc, #96	(adr r2, 7390 <_ZN14Asservissement14setAngularDutyEf+0xb0>)
    732e:	ca0c      	ldmia	r2!, {r2, r3}
    7330:	f011 faf8 	bl	18924 <__aeabi_dcmplt>
    7334:	4603      	mov	r3, r0
    7336:	2b00      	cmp	r3, #0
    7338:	d002      	beq.n	7340 <_ZN14Asservissement14setAngularDutyEf+0x60>
    733a:	f04f 0301 	mov.w	r3, #1	; 0x1
    733e:	70fb      	strb	r3, [r7, #3]
    7340:	78fb      	ldrb	r3, [r7, #3]
    7342:	60bb      	str	r3, [r7, #8]
    7344:	68ba      	ldr	r2, [r7, #8]
    7346:	2a00      	cmp	r2, #0
    7348:	d002      	beq.n	7350 <_ZN14Asservissement14setAngularDutyEf+0x70>
    734a:	4b13      	ldr	r3, [pc, #76]	(7398 <_ZN14Asservissement14setAngularDutyEf+0xb8>)
    734c:	607b      	str	r3, [r7, #4]
    734e:	e014      	b.n	737a <_ZN14Asservissement14setAngularDutyEf+0x9a>
    7350:	6938      	ldr	r0, [r7, #16]
    7352:	f011 f823 	bl	1839c <__aeabi_f2d>
    7356:	4602      	mov	r2, r0
    7358:	460b      	mov	r3, r1
    735a:	4610      	mov	r0, r2
    735c:	4619      	mov	r1, r3
    735e:	a20a      	add	r2, pc, #40	(adr r2, 7388 <_ZN14Asservissement14setAngularDutyEf+0xa8>)
    7360:	ca0c      	ldmia	r2!, {r2, r3}
    7362:	f011 fafd 	bl	18960 <__aeabi_dcmpgt>
    7366:	4603      	mov	r3, r0
    7368:	2b00      	cmp	r3, #0
    736a:	d002      	beq.n	7372 <_ZN14Asservissement14setAngularDutyEf+0x92>
    736c:	4a0b      	ldr	r2, [pc, #44]	(739c <_ZN14Asservissement14setAngularDutyEf+0xbc>)
    736e:	60fa      	str	r2, [r7, #12]
    7370:	e001      	b.n	7376 <_ZN14Asservissement14setAngularDutyEf+0x96>
    7372:	693b      	ldr	r3, [r7, #16]
    7374:	60fb      	str	r3, [r7, #12]
    7376:	68fa      	ldr	r2, [r7, #12]
    7378:	607a      	str	r2, [r7, #4]
    737a:	697b      	ldr	r3, [r7, #20]
    737c:	687a      	ldr	r2, [r7, #4]
    737e:	65da      	str	r2, [r3, #92]
}
    7380:	f107 0718 	add.w	r7, r7, #24	; 0x18
    7384:	46bd      	mov	sp, r7
    7386:	bd80      	pop	{r7, pc}
    7388:	9999999a 	.word	0x9999999a
    738c:	3fc99999 	.word	0x3fc99999
    7390:	9999999a 	.word	0x9999999a
    7394:	bfc99999 	.word	0xbfc99999
    7398:	be4ccccd 	.word	0xbe4ccccd
    739c:	3e4ccccd 	.word	0x3e4ccccd

000073a0 <_ZN14Asservissement14resetFixedDutyEv>:

void Asservissement::resetFixedDuty()
    73a0:	b480      	push	{r7}
    73a2:	b083      	sub	sp, #12
    73a4:	af00      	add	r7, sp, #0
    73a6:	6078      	str	r0, [r7, #4]
{
    fixedLinearDuty = 0.;
    73a8:	687a      	ldr	r2, [r7, #4]
    73aa:	4b05      	ldr	r3, [pc, #20]	(73c0 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    73ac:	6593      	str	r3, [r2, #88]
    fixedAngularDuty = 0.;
    73ae:	687a      	ldr	r2, [r7, #4]
    73b0:	4b03      	ldr	r3, [pc, #12]	(73c0 <_ZN14Asservissement14resetFixedDutyEv+0x20>)
    73b2:	65d3      	str	r3, [r2, #92]
}
    73b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    73b8:	46bd      	mov	sp, r7
    73ba:	bc80      	pop	{r7}
    73bc:	4770      	bx	lr
    73be:	46c0      	nop			(mov r8, r8)
    73c0:	00000000 	.word	0x00000000

000073c4 <_ZN14Asservissement6updateEv>:
        return Remote::getSingleton()->getRightPWM();
    else*/
        return vitesseAngulaire;
}

void Asservissement::update(void)
    73c4:	b590      	push	{r4, r7, lr}
    73c6:	b09f      	sub	sp, #124
    73c8:	af00      	add	r7, sp, #0
    73ca:	6478      	str	r0, [r7, #68]
{
#ifdef ROBOTHW
    #if DEBUG_ODOMEDTRIE == 1
    PositionPlusAngle pos = Odometrie::odometrie->getPos();
    73cc:	4bee      	ldr	r3, [pc, #952]	(7788 <_ZN14Asservissement6updateEv+0x3c4>)
    73ce:	681a      	ldr	r2, [r3, #0]
    73d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
    73d4:	4618      	mov	r0, r3
    73d6:	4611      	mov	r1, r2
    73d8:	f002 f9ea 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    Angle absAngle = Odometrie::odometrie->getAbsoluteAngle();
    73dc:	4bea      	ldr	r3, [pc, #936]	(7788 <_ZN14Asservissement6updateEv+0x3c4>)
    73de:	681b      	ldr	r3, [r3, #0]
    73e0:	4618      	mov	r0, r3
    73e2:	f002 f9d9 	bl	9798 <_ZNK9Odometrie16getAbsoluteAngleEv>
    73e6:	4603      	mov	r3, r0
    73e8:	663b      	str	r3, [r7, #96]
    if ( pos.position.x > 400. /* absAngle > 3.14159265358979323846*2.*/)
    73ea:	6d7b      	ldr	r3, [r7, #84]
    73ec:	4618      	mov	r0, r3
    73ee:	49e7      	ldr	r1, [pc, #924]	(778c <_ZN14Asservissement6updateEv+0x3c8>)
    73f0:	f011 fe00 	bl	18ff4 <__aeabi_fcmpgt>
    73f4:	4603      	mov	r3, r0
    73f6:	2b00      	cmp	r3, #0
    73f8:	d004      	beq.n	7404 <_ZN14Asservissement6updateEv+0x40>
        Led::setOn(0);
    73fa:	f04f 0000 	mov.w	r0, #0	; 0x0
    73fe:	f004 fd4f 	bl	bea0 <_ZN3Led5setOnEi>
    7402:	e003      	b.n	740c <_ZN14Asservissement6updateEv+0x48>
    else
        Led::setOff(0);
    7404:	f04f 0000 	mov.w	r0, #0	; 0x0
    7408:	f004 fd0a 	bl	be20 <_ZN3Led6setOffEi>
    #endif
#endif

    asserCount++;
    740c:	6c7b      	ldr	r3, [r7, #68]
    740e:	6c9b      	ldr	r3, [r3, #72]
    7410:	f103 0201 	add.w	r2, r3, #1	; 0x1
    7414:	6c7b      	ldr	r3, [r7, #68]
    7416:	649a      	str	r2, [r3, #72]

    if (true)
    {

        PositionPlusAngle positionPlusAngleActuelle = odometrie->getPos();      //Variable juste pour avoir un code plus lisible par la suite
    7418:	6c7b      	ldr	r3, [r7, #68]
    741a:	6c5a      	ldr	r2, [r3, #68]
    741c:	f107 0348 	add.w	r3, r7, #72	; 0x48
    7420:	4618      	mov	r0, r3
    7422:	4611      	mov	r1, r2
    7424:	f002 f9c4 	bl	97b0 <_ZNK9Odometrie6getPosEv>
        Angle vitesse_angulaire_atteinte = odometrie->getVitesseAngulaire();    //idem
    7428:	6c7b      	ldr	r3, [r7, #68]
    742a:	6c5b      	ldr	r3, [r3, #68]
    742c:	4618      	mov	r0, r3
    742e:	f002 f99b 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    7432:	4603      	mov	r3, r0
    7434:	667b      	str	r3, [r7, #100]
        Distance vitesse_lineaire_atteinte = odometrie->getVitesseLineaire();   //idem
    7436:	6c7b      	ldr	r3, [r7, #68]
    7438:	6c5b      	ldr	r3, [r3, #68]
    743a:	4618      	mov	r0, r3
    743c:	f002 f9a0 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    7440:	4603      	mov	r3, r0
    7442:	66bb      	str	r3, [r7, #104]

        //Puis on les récupéres

        float vitesse_lineaire_a_atteindre = getLinearSpeed();
    7444:	6c78      	ldr	r0, [r7, #68]
    7446:	f7ff fea7 	bl	7198 <_ZN14Asservissement14getLinearSpeedEv>
    744a:	4603      	mov	r3, r0
    744c:	66fb      	str	r3, [r7, #108]
        float vitesse_angulaire_a_atteindre = getAngularSpeed();
    744e:	6c78      	ldr	r0, [r7, #68]
    7450:	f7ff feae 	bl	71b0 <_ZN14Asservissement15getAngularSpeedEv>
    7454:	4603      	mov	r3, r0
    7456:	673b      	str	r3, [r7, #112]

#ifdef ROUES


        //on filtre l'erreur de vitesse lineaire et angulaire
        linearDutySent = activePIDDistance ? pid_filter_distance.getFilteredValue(vitesse_lineaire_a_atteindre-vitesse_lineaire_atteinte) : fixedLinearDuty;
    7458:	6c7b      	ldr	r3, [r7, #68]
    745a:	f893 3054 	ldrb.w	r3, [r3, #84]
    745e:	2b00      	cmp	r3, #0
    7460:	d00e      	beq.n	7480 <_ZN14Asservissement6updateEv+0xbc>
    7462:	6c7b      	ldr	r3, [r7, #68]
    7464:	f103 0408 	add.w	r4, r3, #8	; 0x8
    7468:	6ef8      	ldr	r0, [r7, #108]
    746a:	6eb9      	ldr	r1, [r7, #104]
    746c:	f011 fafe 	bl	18a6c <__aeabi_fsub>
    7470:	4603      	mov	r3, r0
    7472:	4620      	mov	r0, r4
    7474:	4619      	mov	r1, r3
    7476:	f002 feed 	bl	a254 <_ZN17PIDFilterDistance16getFilteredValueEf>
    747a:	4603      	mov	r3, r0
    747c:	607b      	str	r3, [r7, #4]
    747e:	e002      	b.n	7486 <_ZN14Asservissement6updateEv+0xc2>
    7480:	6c7b      	ldr	r3, [r7, #68]
    7482:	6d9b      	ldr	r3, [r3, #88]
    7484:	607b      	str	r3, [r7, #4]
    7486:	6c7b      	ldr	r3, [r7, #68]
    7488:	687a      	ldr	r2, [r7, #4]
    748a:	601a      	str	r2, [r3, #0]
        angularDutySent = activePIDAngle ? pid_filter_angle.getFilteredValue(vitesse_angulaire_a_atteindre-vitesse_angulaire_atteinte) : fixedAngularDuty;
    748c:	6c7b      	ldr	r3, [r7, #68]
    748e:	f893 3055 	ldrb.w	r3, [r3, #85]
    7492:	2b00      	cmp	r3, #0
    7494:	d00e      	beq.n	74b4 <_ZN14Asservissement6updateEv+0xf0>
    7496:	6c7b      	ldr	r3, [r7, #68]
    7498:	f103 0410 	add.w	r4, r3, #16	; 0x10
    749c:	6f38      	ldr	r0, [r7, #112]
    749e:	6e79      	ldr	r1, [r7, #100]
    74a0:	f011 fae4 	bl	18a6c <__aeabi_fsub>
    74a4:	4603      	mov	r3, r0
    74a6:	4620      	mov	r0, r4
    74a8:	4619      	mov	r1, r3
    74aa:	f002 fe65 	bl	a178 <_ZN14PIDFilterAngle16getFilteredValueEf>
    74ae:	4603      	mov	r3, r0
    74b0:	60bb      	str	r3, [r7, #8]
    74b2:	e002      	b.n	74ba <_ZN14Asservissement6updateEv+0xf6>
    74b4:	6c7b      	ldr	r3, [r7, #68]
    74b6:	6ddb      	ldr	r3, [r3, #92]
    74b8:	60bb      	str	r3, [r7, #8]
    74ba:	6c7b      	ldr	r3, [r7, #68]
    74bc:	68ba      	ldr	r2, [r7, #8]
    74be:	605a      	str	r2, [r3, #4]

        //Et on borne la somme de ces valeurs filtrée entre -> voir ci dessous
        float limit = 1.0f;
    74c0:	4bb3      	ldr	r3, [pc, #716]	(7790 <_ZN14Asservissement6updateEv+0x3cc>)
    74c2:	677b      	str	r3, [r7, #116]
        linearDutySent =  MIN(MAX(linearDutySent, -limit),limit);
    74c4:	6c7b      	ldr	r3, [r7, #68]
    74c6:	681a      	ldr	r2, [r3, #0]
    74c8:	6f7b      	ldr	r3, [r7, #116]
    74ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    74ce:	4610      	mov	r0, r2
    74d0:	4619      	mov	r1, r3
    74d2:	f011 fd71 	bl	18fb8 <__aeabi_fcmplt>
    74d6:	4603      	mov	r3, r0
    74d8:	2b00      	cmp	r3, #0
    74da:	d004      	beq.n	74e6 <_ZN14Asservissement6updateEv+0x122>
    74dc:	6f7b      	ldr	r3, [r7, #116]
    74de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    74e2:	613b      	str	r3, [r7, #16]
    74e4:	e002      	b.n	74ec <_ZN14Asservissement6updateEv+0x128>
    74e6:	6c7b      	ldr	r3, [r7, #68]
    74e8:	681b      	ldr	r3, [r3, #0]
    74ea:	613b      	str	r3, [r7, #16]
    74ec:	6938      	ldr	r0, [r7, #16]
    74ee:	6f79      	ldr	r1, [r7, #116]
    74f0:	f011 fd80 	bl	18ff4 <__aeabi_fcmpgt>
    74f4:	4603      	mov	r3, r0
    74f6:	2b00      	cmp	r3, #0
    74f8:	d002      	beq.n	7500 <_ZN14Asservissement6updateEv+0x13c>
    74fa:	6f7b      	ldr	r3, [r7, #116]
    74fc:	60fb      	str	r3, [r7, #12]
    74fe:	e015      	b.n	752c <_ZN14Asservissement6updateEv+0x168>
    7500:	6c7b      	ldr	r3, [r7, #68]
    7502:	681a      	ldr	r2, [r3, #0]
    7504:	6f7b      	ldr	r3, [r7, #116]
    7506:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    750a:	4610      	mov	r0, r2
    750c:	4619      	mov	r1, r3
    750e:	f011 fd53 	bl	18fb8 <__aeabi_fcmplt>
    7512:	4603      	mov	r3, r0
    7514:	2b00      	cmp	r3, #0
    7516:	d004      	beq.n	7522 <_ZN14Asservissement6updateEv+0x15e>
    7518:	6f7b      	ldr	r3, [r7, #116]
    751a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    751e:	617b      	str	r3, [r7, #20]
    7520:	e002      	b.n	7528 <_ZN14Asservissement6updateEv+0x164>
    7522:	6c7b      	ldr	r3, [r7, #68]
    7524:	681b      	ldr	r3, [r3, #0]
    7526:	617b      	str	r3, [r7, #20]
    7528:	697a      	ldr	r2, [r7, #20]
    752a:	60fa      	str	r2, [r7, #12]
    752c:	6c7b      	ldr	r3, [r7, #68]
    752e:	68fa      	ldr	r2, [r7, #12]
    7530:	601a      	str	r2, [r3, #0]
        angularDutySent = MIN(MAX(angularDutySent, -limit),limit);
    7532:	6c7b      	ldr	r3, [r7, #68]
    7534:	685a      	ldr	r2, [r3, #4]
    7536:	6f7b      	ldr	r3, [r7, #116]
    7538:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    753c:	4610      	mov	r0, r2
    753e:	4619      	mov	r1, r3
    7540:	f011 fd3a 	bl	18fb8 <__aeabi_fcmplt>
    7544:	4603      	mov	r3, r0
    7546:	2b00      	cmp	r3, #0
    7548:	d004      	beq.n	7554 <_ZN14Asservissement6updateEv+0x190>
    754a:	6f7b      	ldr	r3, [r7, #116]
    754c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7550:	61fb      	str	r3, [r7, #28]
    7552:	e002      	b.n	755a <_ZN14Asservissement6updateEv+0x196>
    7554:	6c7b      	ldr	r3, [r7, #68]
    7556:	685b      	ldr	r3, [r3, #4]
    7558:	61fb      	str	r3, [r7, #28]
    755a:	69f8      	ldr	r0, [r7, #28]
    755c:	6f79      	ldr	r1, [r7, #116]
    755e:	f011 fd49 	bl	18ff4 <__aeabi_fcmpgt>
    7562:	4603      	mov	r3, r0
    7564:	2b00      	cmp	r3, #0
    7566:	d002      	beq.n	756e <_ZN14Asservissement6updateEv+0x1aa>
    7568:	6f7b      	ldr	r3, [r7, #116]
    756a:	61bb      	str	r3, [r7, #24]
    756c:	e015      	b.n	759a <_ZN14Asservissement6updateEv+0x1d6>
    756e:	6c7b      	ldr	r3, [r7, #68]
    7570:	685a      	ldr	r2, [r3, #4]
    7572:	6f7b      	ldr	r3, [r7, #116]
    7574:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7578:	4610      	mov	r0, r2
    757a:	4619      	mov	r1, r3
    757c:	f011 fd1c 	bl	18fb8 <__aeabi_fcmplt>
    7580:	4603      	mov	r3, r0
    7582:	2b00      	cmp	r3, #0
    7584:	d004      	beq.n	7590 <_ZN14Asservissement6updateEv+0x1cc>
    7586:	6f7b      	ldr	r3, [r7, #116]
    7588:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    758c:	623b      	str	r3, [r7, #32]
    758e:	e002      	b.n	7596 <_ZN14Asservissement6updateEv+0x1d2>
    7590:	6c7b      	ldr	r3, [r7, #68]
    7592:	685b      	ldr	r3, [r3, #4]
    7594:	623b      	str	r3, [r7, #32]
    7596:	6a3a      	ldr	r2, [r7, #32]
    7598:	61ba      	str	r2, [r7, #24]
    759a:	6c7b      	ldr	r3, [r7, #68]
    759c:	69ba      	ldr	r2, [r7, #24]
    759e:	605a      	str	r2, [r3, #4]
 //       linearDutySent = fabs(linearDutySent) > 0.05 || vitesse_lineaire_a_atteindre > 0.01 ? linearDutySent : 0;
 //       angularDutySent = fabs(angularDutySent) > 0.05 || vitesse_angulaire_a_atteindre > 0.0001 ? angularDutySent : 0;


        // test d'arret complet si c'est l'ordre qu'on lui donne
        if (vitesse_lineaire_a_atteindre == 0.0f && vitesse_angulaire_a_atteindre == 0.0f)
    75a0:	6ef8      	ldr	r0, [r7, #108]
    75a2:	497c      	ldr	r1, [pc, #496]	(7794 <_ZN14Asservissement6updateEv+0x3d0>)
    75a4:	f011 fcfe 	bl	18fa4 <__aeabi_fcmpeq>
    75a8:	4603      	mov	r3, r0
    75aa:	2b00      	cmp	r3, #0
    75ac:	d00c      	beq.n	75c8 <_ZN14Asservissement6updateEv+0x204>
    75ae:	6f38      	ldr	r0, [r7, #112]
    75b0:	4978      	ldr	r1, [pc, #480]	(7794 <_ZN14Asservissement6updateEv+0x3d0>)
    75b2:	f011 fcf7 	bl	18fa4 <__aeabi_fcmpeq>
    75b6:	4603      	mov	r3, r0
    75b8:	2b00      	cmp	r3, #0
    75ba:	d005      	beq.n	75c8 <_ZN14Asservissement6updateEv+0x204>
        {
            linearDutySent = 0.0f;
    75bc:	6c7a      	ldr	r2, [r7, #68]
    75be:	4b75      	ldr	r3, [pc, #468]	(7794 <_ZN14Asservissement6updateEv+0x3d0>)
    75c0:	6013      	str	r3, [r2, #0]
            angularDutySent = 0.0f;
    75c2:	6c7a      	ldr	r2, [r7, #68]
    75c4:	4b73      	ldr	r3, [pc, #460]	(7794 <_ZN14Asservissement6updateEv+0x3d0>)
    75c6:	6053      	str	r3, [r2, #4]
        {
        #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
            roues.droite.tourne(0.8*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));
            roues.gauche.tourne(0.8*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));
        #else
            roues.droite.tourne(0.95*MIN(MAX(+linearDutySent+angularDutySent, -limit),limit));//*1
    75c8:	6c7b      	ldr	r3, [r7, #68]
    75ca:	f103 0328 	add.w	r3, r3, #40	; 0x28
    75ce:	627b      	str	r3, [r7, #36]
    75d0:	6c7b      	ldr	r3, [r7, #68]
    75d2:	681a      	ldr	r2, [r3, #0]
    75d4:	6c7b      	ldr	r3, [r7, #68]
    75d6:	685b      	ldr	r3, [r3, #4]
    75d8:	4610      	mov	r0, r2
    75da:	4619      	mov	r1, r3
    75dc:	f011 fa48 	bl	18a70 <__addsf3>
    75e0:	4603      	mov	r3, r0
    75e2:	461a      	mov	r2, r3
    75e4:	6f7b      	ldr	r3, [r7, #116]
    75e6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    75ea:	4610      	mov	r0, r2
    75ec:	4619      	mov	r1, r3
    75ee:	f011 fce3 	bl	18fb8 <__aeabi_fcmplt>
    75f2:	4603      	mov	r3, r0
    75f4:	2b00      	cmp	r3, #0
    75f6:	d004      	beq.n	7602 <_ZN14Asservissement6updateEv+0x23e>
    75f8:	6f7b      	ldr	r3, [r7, #116]
    75fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    75fe:	62fb      	str	r3, [r7, #44]
    7600:	e009      	b.n	7616 <_ZN14Asservissement6updateEv+0x252>
    7602:	6c7b      	ldr	r3, [r7, #68]
    7604:	681a      	ldr	r2, [r3, #0]
    7606:	6c7b      	ldr	r3, [r7, #68]
    7608:	685b      	ldr	r3, [r3, #4]
    760a:	4610      	mov	r0, r2
    760c:	4619      	mov	r1, r3
    760e:	f011 fa2f 	bl	18a70 <__addsf3>
    7612:	4603      	mov	r3, r0
    7614:	62fb      	str	r3, [r7, #44]
    7616:	6af8      	ldr	r0, [r7, #44]
    7618:	6f79      	ldr	r1, [r7, #116]
    761a:	f011 fceb 	bl	18ff4 <__aeabi_fcmpgt>
    761e:	4603      	mov	r3, r0
    7620:	2b00      	cmp	r3, #0
    7622:	d002      	beq.n	762a <_ZN14Asservissement6updateEv+0x266>
    7624:	6f7b      	ldr	r3, [r7, #116]
    7626:	62bb      	str	r3, [r7, #40]
    7628:	e024      	b.n	7674 <_ZN14Asservissement6updateEv+0x2b0>
    762a:	6c7b      	ldr	r3, [r7, #68]
    762c:	681a      	ldr	r2, [r3, #0]
    762e:	6c7b      	ldr	r3, [r7, #68]
    7630:	685b      	ldr	r3, [r3, #4]
    7632:	4610      	mov	r0, r2
    7634:	4619      	mov	r1, r3
    7636:	f011 fa1b 	bl	18a70 <__addsf3>
    763a:	4603      	mov	r3, r0
    763c:	461a      	mov	r2, r3
    763e:	6f7b      	ldr	r3, [r7, #116]
    7640:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7644:	4610      	mov	r0, r2
    7646:	4619      	mov	r1, r3
    7648:	f011 fcb6 	bl	18fb8 <__aeabi_fcmplt>
    764c:	4603      	mov	r3, r0
    764e:	2b00      	cmp	r3, #0
    7650:	d004      	beq.n	765c <_ZN14Asservissement6updateEv+0x298>
    7652:	6f7b      	ldr	r3, [r7, #116]
    7654:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7658:	633b      	str	r3, [r7, #48]
    765a:	e009      	b.n	7670 <_ZN14Asservissement6updateEv+0x2ac>
    765c:	6c7b      	ldr	r3, [r7, #68]
    765e:	681a      	ldr	r2, [r3, #0]
    7660:	6c7b      	ldr	r3, [r7, #68]
    7662:	685b      	ldr	r3, [r3, #4]
    7664:	4610      	mov	r0, r2
    7666:	4619      	mov	r1, r3
    7668:	f011 fa02 	bl	18a70 <__addsf3>
    766c:	4603      	mov	r3, r0
    766e:	633b      	str	r3, [r7, #48]
    7670:	6b3a      	ldr	r2, [r7, #48]
    7672:	62ba      	str	r2, [r7, #40]
    7674:	6ab8      	ldr	r0, [r7, #40]
    7676:	f010 fe91 	bl	1839c <__aeabi_f2d>
    767a:	4602      	mov	r2, r0
    767c:	460b      	mov	r3, r1
    767e:	4610      	mov	r0, r2
    7680:	4619      	mov	r1, r3
    7682:	a23f      	add	r2, pc, #252	(adr r2, 7780 <_ZN14Asservissement6updateEv+0x3bc>)
    7684:	ca0c      	ldmia	r2!, {r2, r3}
    7686:	f010 fedd 	bl	18444 <__aeabi_dmul>
    768a:	4602      	mov	r2, r0
    768c:	460b      	mov	r3, r1
    768e:	4610      	mov	r0, r2
    7690:	4619      	mov	r1, r3
    7692:	f011 f997 	bl	189c4 <__aeabi_d2f>
    7696:	4603      	mov	r3, r0
    7698:	6a78      	ldr	r0, [r7, #36]
    769a:	4619      	mov	r1, r3
    769c:	f005 fb24 	bl	cce8 <_ZN4Roue6tourneEf>
            roues.gauche.tourne(0.95*MIN(MAX(+linearDutySent-angularDutySent, -limit),limit));//*1
    76a0:	6c7b      	ldr	r3, [r7, #68]
    76a2:	f103 0318 	add.w	r3, r3, #24	; 0x18
    76a6:	637b      	str	r3, [r7, #52]
    76a8:	6c7b      	ldr	r3, [r7, #68]
    76aa:	681a      	ldr	r2, [r3, #0]
    76ac:	6c7b      	ldr	r3, [r7, #68]
    76ae:	685b      	ldr	r3, [r3, #4]
    76b0:	4610      	mov	r0, r2
    76b2:	4619      	mov	r1, r3
    76b4:	f011 f9da 	bl	18a6c <__aeabi_fsub>
    76b8:	4603      	mov	r3, r0
    76ba:	461a      	mov	r2, r3
    76bc:	6f7b      	ldr	r3, [r7, #116]
    76be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    76c2:	4610      	mov	r0, r2
    76c4:	4619      	mov	r1, r3
    76c6:	f011 fc77 	bl	18fb8 <__aeabi_fcmplt>
    76ca:	4603      	mov	r3, r0
    76cc:	2b00      	cmp	r3, #0
    76ce:	d004      	beq.n	76da <_ZN14Asservissement6updateEv+0x316>
    76d0:	6f7b      	ldr	r3, [r7, #116]
    76d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    76d6:	63fb      	str	r3, [r7, #60]
    76d8:	e009      	b.n	76ee <_ZN14Asservissement6updateEv+0x32a>
    76da:	6c7b      	ldr	r3, [r7, #68]
    76dc:	681a      	ldr	r2, [r3, #0]
    76de:	6c7b      	ldr	r3, [r7, #68]
    76e0:	685b      	ldr	r3, [r3, #4]
    76e2:	4610      	mov	r0, r2
    76e4:	4619      	mov	r1, r3
    76e6:	f011 f9c1 	bl	18a6c <__aeabi_fsub>
    76ea:	4603      	mov	r3, r0
    76ec:	63fb      	str	r3, [r7, #60]
    76ee:	6bf8      	ldr	r0, [r7, #60]
    76f0:	6f79      	ldr	r1, [r7, #116]
    76f2:	f011 fc7f 	bl	18ff4 <__aeabi_fcmpgt>
    76f6:	4603      	mov	r3, r0
    76f8:	2b00      	cmp	r3, #0
    76fa:	d002      	beq.n	7702 <_ZN14Asservissement6updateEv+0x33e>
    76fc:	6f7b      	ldr	r3, [r7, #116]
    76fe:	63bb      	str	r3, [r7, #56]
    7700:	e024      	b.n	774c <_ZN14Asservissement6updateEv+0x388>
    7702:	6c7b      	ldr	r3, [r7, #68]
    7704:	681a      	ldr	r2, [r3, #0]
    7706:	6c7b      	ldr	r3, [r7, #68]
    7708:	685b      	ldr	r3, [r3, #4]
    770a:	4610      	mov	r0, r2
    770c:	4619      	mov	r1, r3
    770e:	f011 f9ad 	bl	18a6c <__aeabi_fsub>
    7712:	4603      	mov	r3, r0
    7714:	461a      	mov	r2, r3
    7716:	6f7b      	ldr	r3, [r7, #116]
    7718:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    771c:	4610      	mov	r0, r2
    771e:	4619      	mov	r1, r3
    7720:	f011 fc4a 	bl	18fb8 <__aeabi_fcmplt>
    7724:	4603      	mov	r3, r0
    7726:	2b00      	cmp	r3, #0
    7728:	d004      	beq.n	7734 <_ZN14Asservissement6updateEv+0x370>
    772a:	6f7b      	ldr	r3, [r7, #116]
    772c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    7730:	643b      	str	r3, [r7, #64]
    7732:	e009      	b.n	7748 <_ZN14Asservissement6updateEv+0x384>
    7734:	6c7b      	ldr	r3, [r7, #68]
    7736:	681a      	ldr	r2, [r3, #0]
    7738:	6c7b      	ldr	r3, [r7, #68]
    773a:	685b      	ldr	r3, [r3, #4]
    773c:	4610      	mov	r0, r2
    773e:	4619      	mov	r1, r3
    7740:	f011 f994 	bl	18a6c <__aeabi_fsub>
    7744:	4603      	mov	r3, r0
    7746:	643b      	str	r3, [r7, #64]
    7748:	6c3a      	ldr	r2, [r7, #64]
    774a:	63ba      	str	r2, [r7, #56]
    774c:	6bb8      	ldr	r0, [r7, #56]
    774e:	f010 fe25 	bl	1839c <__aeabi_f2d>
    7752:	4602      	mov	r2, r0
    7754:	460b      	mov	r3, r1
    7756:	4610      	mov	r0, r2
    7758:	4619      	mov	r1, r3
    775a:	a209      	add	r2, pc, #36	(adr r2, 7780 <_ZN14Asservissement6updateEv+0x3bc>)
    775c:	ca0c      	ldmia	r2!, {r2, r3}
    775e:	f010 fe71 	bl	18444 <__aeabi_dmul>
    7762:	4602      	mov	r2, r0
    7764:	460b      	mov	r3, r1
    7766:	4610      	mov	r0, r2
    7768:	4619      	mov	r1, r3
    776a:	f011 f92b 	bl	189c4 <__aeabi_d2f>
    776e:	4603      	mov	r3, r0
    7770:	6b78      	ldr	r0, [r7, #52]
    7772:	4619      	mov	r1, r3
    7774:	f005 fab8 	bl	cce8 <_ZN4Roue6tourneEf>
        roues.droite.tourne(0.);
    }
#else
}
#endif
}
    7778:	f107 077c 	add.w	r7, r7, #124	; 0x7c
    777c:	46bd      	mov	sp, r7
    777e:	bd90      	pop	{r4, r7, pc}
    7780:	66666666 	.word	0x66666666
    7784:	3fee6666 	.word	0x3fee6666
    7788:	20000570 	.word	0x20000570
    778c:	43c80000 	.word	0x43c80000
    7790:	3f800000 	.word	0x3f800000
    7794:	00000000 	.word	0x00000000

00007798 <SysTick_Handler>:

#ifdef ROBOTHW
//pour lancer l'update à chaque tic d'horloge
extern "C" void SysTick_Handler()
    7798:	b580      	push	{r7, lr}
    779a:	af00      	add	r7, sp, #0
{
    // Count the number of SysTick_Handler call
    systick_count++;
    779c:	4b09      	ldr	r3, [pc, #36]	(77c4 <SysTick_Handler+0x2c>)
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	f103 0201 	add.w	r2, r3, #1	; 0x1
    77a4:	4b07      	ldr	r3, [pc, #28]	(77c4 <SysTick_Handler+0x2c>)
    77a6:	601a      	str	r2, [r3, #0]
    if (systick_count%200 == 0){
        Led::toggle(0);
    }
#endif

    Odometrie::odometrie->update();
    77a8:	4b07      	ldr	r3, [pc, #28]	(77c8 <SysTick_Handler+0x30>)
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	4618      	mov	r0, r3
    77ae:	f002 f8e9 	bl	9984 <_ZN9Odometrie6updateEv>

    StrategieV2::update();
    77b2:	f00c fcd3 	bl	1415c <_ZN11StrategieV26updateEv>

    Asservissement::asservissement->update();
    77b6:	4b05      	ldr	r3, [pc, #20]	(77cc <SysTick_Handler+0x34>)
    77b8:	681b      	ldr	r3, [r3, #0]
    77ba:	4618      	mov	r0, r3
    77bc:	f7ff fe02 	bl	73c4 <_ZN14Asservissement6updateEv>
}
    77c0:	46bd      	mov	sp, r7
    77c2:	bd80      	pop	{r7, pc}
    77c4:	20000568 	.word	0x20000568
    77c8:	20000570 	.word	0x20000570
    77cc:	20000560 	.word	0x20000560

000077d0 <_ZN14AsservissementC1EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    77d0:	b580      	push	{r7, lr}
    77d2:	b084      	sub	sp, #16
    77d4:	af00      	add	r7, sp, #0
    77d6:	6078      	str	r0, [r7, #4]
    77d8:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    77da:	687b      	ldr	r3, [r7, #4]
    77dc:	f103 0308 	add.w	r3, r3, #8	; 0x8
    77e0:	4618      	mov	r0, r3
    77e2:	f002 fd23 	bl	a22c <_ZN17PIDFilterDistanceC1Ev>
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	f103 0310 	add.w	r3, r3, #16	; 0x10
    77ec:	4618      	mov	r0, r3
    77ee:	f002 fcaf 	bl	a150 <_ZN14PIDFilterAngleC1Ev>
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	f103 0318 	add.w	r3, r3, #24	; 0x18
    77f8:	4618      	mov	r0, r3
    77fa:	f7fe f837 	bl	586c <_ZN5RouesC1Ev>
    77fe:	687a      	ldr	r2, [r7, #4]
    7800:	4b26      	ldr	r3, [pc, #152]	(789c <_ZN14AsservissementC1EP9Odometrie+0xcc>)
    7802:	63d3      	str	r3, [r2, #60]
    7804:	687a      	ldr	r2, [r7, #4]
    7806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    780a:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    780c:	687a      	ldr	r2, [r7, #4]
    780e:	4b24      	ldr	r3, [pc, #144]	(78a0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7810:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    7812:	687a      	ldr	r2, [r7, #4]
    7814:	4b22      	ldr	r3, [pc, #136]	(78a0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7816:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    7818:	687a      	ldr	r2, [r7, #4]
    781a:	683b      	ldr	r3, [r7, #0]
    781c:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    781e:	687a      	ldr	r2, [r7, #4]
    7820:	f04f 0301 	mov.w	r3, #1	; 0x1
    7824:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    7828:	687a      	ldr	r2, [r7, #4]
    782a:	f04f 0301 	mov.w	r3, #1	; 0x1
    782e:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    7832:	6878      	ldr	r0, [r7, #4]
    7834:	f7ff fdb4 	bl	73a0 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7838:	687a      	ldr	r2, [r7, #4]
    783a:	4b19      	ldr	r3, [pc, #100]	(78a0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    783c:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    783e:	687a      	ldr	r2, [r7, #4]
    7840:	4b17      	ldr	r3, [pc, #92]	(78a0 <_ZN14AsservissementC1EP9Odometrie+0xd0>)
    7842:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7844:	4a17      	ldr	r2, [pc, #92]	(78a4 <_ZN14AsservissementC1EP9Odometrie+0xd4>)
    7846:	687b      	ldr	r3, [r7, #4]
    7848:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    784a:	687a      	ldr	r2, [r7, #4]
    784c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7850:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7852:	f7fe f911 	bl	5a78 <_ZN7Sensors10getSensorsEv>
    7856:	4602      	mov	r2, r0
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    785c:	4a12      	ldr	r2, [pc, #72]	(78a8 <_ZN14AsservissementC1EP9Odometrie+0xd8>)
    785e:	f04f 0303 	mov.w	r3, #3	; 0x3
    7862:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7864:	4a11      	ldr	r2, [pc, #68]	(78ac <_ZN14AsservissementC1EP9Odometrie+0xdc>)
    7866:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    786a:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    786c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7870:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7872:	f04f 0301 	mov.w	r3, #1	; 0x1
    7876:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7878:	f04f 0300 	mov.w	r3, #0	; 0x0
    787c:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    787e:	f04f 0301 	mov.w	r3, #1	; 0x1
    7882:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    7884:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7888:	4618      	mov	r0, r3
    788a:	f7f8 fcc7 	bl	21c <NVIC_Init>
#endif
}
    788e:	687b      	ldr	r3, [r7, #4]
    7890:	4618      	mov	r0, r3
    7892:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7896:	46bd      	mov	sp, r7
    7898:	bd80      	pop	{r7, pc}
    789a:	46c0      	nop			(mov r8, r8)
    789c:	3f800000 	.word	0x3f800000
    78a0:	00000000 	.word	0x00000000
    78a4:	20000560 	.word	0x20000560
    78a8:	e000e010 	.word	0xe000e010
    78ac:	e000e014 	.word	0xe000e014

000078b0 <_ZN14AsservissementC2EP9Odometrie>:

Asservissement * Asservissement::asservissement = NULL; //Pour que nos variables static soient défini
bool Asservissement::matchFini = false;
const uint16_t Asservissement::nb_ms_between_updates = MS_BETWEEN_UPDATE;

Asservissement::Asservissement(Odometrie* _odometrie) :
    78b0:	b580      	push	{r7, lr}
    78b2:	b084      	sub	sp, #16
    78b4:	af00      	add	r7, sp, #0
    78b6:	6078      	str	r0, [r7, #4]
    78b8:	6039      	str	r1, [r7, #0]
    seuil_collision(SEUIL_COLISION),
    buffer_collision(0xffffffff)
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	f103 0308 	add.w	r3, r3, #8	; 0x8
    78c0:	4618      	mov	r0, r3
    78c2:	f002 fcb3 	bl	a22c <_ZN17PIDFilterDistanceC1Ev>
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	f103 0310 	add.w	r3, r3, #16	; 0x10
    78cc:	4618      	mov	r0, r3
    78ce:	f002 fc3f 	bl	a150 <_ZN14PIDFilterAngleC1Ev>
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	f103 0318 	add.w	r3, r3, #24	; 0x18
    78d8:	4618      	mov	r0, r3
    78da:	f7fd ffc7 	bl	586c <_ZN5RouesC1Ev>
    78de:	687a      	ldr	r2, [r7, #4]
    78e0:	4b26      	ldr	r3, [pc, #152]	(797c <_ZN14AsservissementC2EP9Odometrie+0xcc>)
    78e2:	63d3      	str	r3, [r2, #60]
    78e4:	687a      	ldr	r2, [r7, #4]
    78e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78ea:	6413      	str	r3, [r2, #64]
{
    vitesseLineaire = 0;
    78ec:	687a      	ldr	r2, [r7, #4]
    78ee:	4b24      	ldr	r3, [pc, #144]	(7980 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    78f0:	64d3      	str	r3, [r2, #76]
    vitesseAngulaire = 0;
    78f2:	687a      	ldr	r2, [r7, #4]
    78f4:	4b22      	ldr	r3, [pc, #136]	(7980 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    78f6:	6513      	str	r3, [r2, #80]
	odometrie = _odometrie;
    78f8:	687a      	ldr	r2, [r7, #4]
    78fa:	683b      	ldr	r3, [r7, #0]
    78fc:	6453      	str	r3, [r2, #68]

    activePIDDistance = true;
    78fe:	687a      	ldr	r2, [r7, #4]
    7900:	f04f 0301 	mov.w	r3, #1	; 0x1
    7904:	f882 3054 	strb.w	r3, [r2, #84]
    activePIDAngle = true;
    7908:	687a      	ldr	r2, [r7, #4]
    790a:	f04f 0301 	mov.w	r3, #1	; 0x1
    790e:	f882 3055 	strb.w	r3, [r2, #85]

    resetFixedDuty();
    7912:	6878      	ldr	r0, [r7, #4]
    7914:	f7ff fd44 	bl	73a0 <_ZN14Asservissement14resetFixedDutyEv>

    linearDutySent = 0;
    7918:	687a      	ldr	r2, [r7, #4]
    791a:	4b19      	ldr	r3, [pc, #100]	(7980 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    791c:	6013      	str	r3, [r2, #0]
    angularDutySent = 0;
    791e:	687a      	ldr	r2, [r7, #4]
    7920:	4b17      	ldr	r3, [pc, #92]	(7980 <_ZN14AsservissementC2EP9Odometrie+0xd0>)
    7922:	6053      	str	r3, [r2, #4]
    Asservissement::asservissement = this;
    7924:	4a17      	ldr	r2, [pc, #92]	(7984 <_ZN14AsservissementC2EP9Odometrie+0xd4>)
    7926:	687b      	ldr	r3, [r7, #4]
    7928:	6013      	str	r3, [r2, #0]
    asserCount = 0;
    792a:	687a      	ldr	r2, [r7, #4]
    792c:	f04f 0300 	mov.w	r3, #0	; 0x0
    7930:	6493      	str	r3, [r2, #72]
#ifdef CAPTEURS
    sensors = Sensors::getSensors();
    7932:	f7fe f8a1 	bl	5a78 <_ZN7Sensors10getSensorsEv>
    7936:	4602      	mov	r2, r0
    7938:	687b      	ldr	r3, [r7, #4]
    793a:	639a      	str	r2, [r3, #56]
#endif

#ifdef ROBOTHW  //on définie les interruptions possibles dues à certains ports
    *((uint32_t *)(STK_CTRL_ADDR)) = 0x03; // CLKSOURCE:0 ; TICKINT: 1 ; ENABLE:1
    793c:	4a12      	ldr	r2, [pc, #72]	(7988 <_ZN14AsservissementC2EP9Odometrie+0xd8>)
    793e:	f04f 0303 	mov.w	r3, #3	; 0x3
    7942:	6013      	str	r3, [r2, #0]
#ifdef STM32F40_41xxx
    *((uint32_t *)(STK_LOAD_ADDR)) = 21000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
#else
    *((uint32_t *)(STK_LOAD_ADDR)) = 9000*nb_ms_between_updates; // valeur en ms*9000 (doit etre inférieur à 0x00FFFFFF=16 777 215)
    7944:	4a11      	ldr	r2, [pc, #68]	(798c <_ZN14AsservissementC2EP9Odometrie+0xdc>)
    7946:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    794a:	6013      	str	r3, [r2, #0]
    // le micro controlleur tourne à une frequence f (72Mhz ici), la valeur à mettre est (0.001*(f/8))*(temps en ms entre chaque update)
    // voir p190 de la doc

    NVIC_InitTypeDef SysTick_IRQ;

    SysTick_IRQ.NVIC_IRQChannel = SysTick_IRQn;
    794c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7950:	733b      	strb	r3, [r7, #12]
    SysTick_IRQ.NVIC_IRQChannelCmd = ENABLE;
    7952:	f04f 0301 	mov.w	r3, #1	; 0x1
    7956:	73fb      	strb	r3, [r7, #15]
    SysTick_IRQ.NVIC_IRQChannelPreemptionPriority = 0;
    7958:	f04f 0300 	mov.w	r3, #0	; 0x0
    795c:	737b      	strb	r3, [r7, #13]
    SysTick_IRQ.NVIC_IRQChannelSubPriority = 1;
    795e:	f04f 0301 	mov.w	r3, #1	; 0x1
    7962:	73bb      	strb	r3, [r7, #14]
    NVIC_Init(&SysTick_IRQ);
    7964:	f107 030c 	add.w	r3, r7, #12	; 0xc
    7968:	4618      	mov	r0, r3
    796a:	f7f8 fc57 	bl	21c <NVIC_Init>
#endif
}
    796e:	687b      	ldr	r3, [r7, #4]
    7970:	4618      	mov	r0, r3
    7972:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7976:	46bd      	mov	sp, r7
    7978:	bd80      	pop	{r7, pc}
    797a:	46c0      	nop			(mov r8, r8)
    797c:	3f800000 	.word	0x3f800000
    7980:	00000000 	.word	0x00000000
    7984:	20000560 	.word	0x20000560
    7988:	e000e010 	.word	0xe000e010
    798c:	e000e014 	.word	0xe000e014

00007990 <_ZN7CommandC2Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    7990:	b480      	push	{r7}
    7992:	b083      	sub	sp, #12
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
    7998:	687a      	ldr	r2, [r7, #4]
    799a:	4b06      	ldr	r3, [pc, #24]	(79b4 <_ZN7CommandC2Ev+0x24>)
    799c:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    799e:	4a06      	ldr	r2, [pc, #24]	(79b8 <_ZN7CommandC2Ev+0x28>)
    79a0:	f04f 0300 	mov.w	r3, #0	; 0x0
    79a4:	7013      	strb	r3, [r2, #0]
}
    79a6:	687b      	ldr	r3, [r7, #4]
    79a8:	4618      	mov	r0, r3
    79aa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    79ae:	46bd      	mov	sp, r7
    79b0:	bc80      	pop	{r7}
    79b2:	4770      	bx	lr
    79b4:	0001f970 	.word	0x0001f970
    79b8:	2000056c 	.word	0x2000056c

000079bc <_ZN7CommandC1Ev>:
Acceleration Command::acceleration_angulaire = ACCELERATION_ANGULAIRE_MAX; // en radian par nb_ms_between_updates

bool Command::stop = false;
bool Command::limiter = false;

Command::Command()
    79bc:	b480      	push	{r7}
    79be:	b083      	sub	sp, #12
    79c0:	af00      	add	r7, sp, #0
    79c2:	6078      	str	r0, [r7, #4]
    79c4:	687a      	ldr	r2, [r7, #4]
    79c6:	4b06      	ldr	r3, [pc, #24]	(79e0 <_ZN7CommandC1Ev+0x24>)
    79c8:	6013      	str	r3, [r2, #0]
{
    Command::stop = false;
    79ca:	4a06      	ldr	r2, [pc, #24]	(79e4 <_ZN7CommandC1Ev+0x28>)
    79cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    79d0:	7013      	strb	r3, [r2, #0]
}
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	4618      	mov	r0, r3
    79d6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    79da:	46bd      	mov	sp, r7
    79dc:	bc80      	pop	{r7}
    79de:	4770      	bx	lr
    79e0:	0001f970 	.word	0x0001f970
    79e4:	2000056c 	.word	0x2000056c

000079e8 <_ZN7Command7getStopEv>:

Command::~Command()
{
}

bool Command::getStop(void)
    79e8:	b480      	push	{r7}
    79ea:	af00      	add	r7, sp, #0
{
    return Command::stop;
    79ec:	4b02      	ldr	r3, [pc, #8]	(79f8 <_ZN7Command7getStopEv+0x10>)
    79ee:	781b      	ldrb	r3, [r3, #0]
}
    79f0:	4618      	mov	r0, r3
    79f2:	46bd      	mov	sp, r7
    79f4:	bc80      	pop	{r7}
    79f6:	4770      	bx	lr
    79f8:	2000056c 	.word	0x2000056c

000079fc <_ZN7Command11resetSpeedsEv>:

void Command::resetSpeeds()
    79fc:	b480      	push	{r7}
    79fe:	b083      	sub	sp, #12
    7a00:	af00      	add	r7, sp, #0
    7a02:	6078      	str	r0, [r7, #4]
{

}
    7a04:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7a08:	46bd      	mov	sp, r7
    7a0a:	bc80      	pop	{r7}
    7a0c:	4770      	bx	lr
    7a0e:	46c0      	nop			(mov r8, r8)

00007a10 <_ZN7Command16freinageDUrgenceEb>:

void Command::freinageDUrgence(bool doitFreiner)
    7a10:	b480      	push	{r7}
    7a12:	b083      	sub	sp, #12
    7a14:	af00      	add	r7, sp, #0
    7a16:	4603      	mov	r3, r0
    7a18:	71fb      	strb	r3, [r7, #7]
{
    Command::stop = doitFreiner;
    7a1a:	4a04      	ldr	r2, [pc, #16]	(7a2c <_ZN7Command16freinageDUrgenceEb+0x1c>)
    7a1c:	79fb      	ldrb	r3, [r7, #7]
    7a1e:	7013      	strb	r3, [r2, #0]
}
    7a20:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7a24:	46bd      	mov	sp, r7
    7a26:	bc80      	pop	{r7}
    7a28:	4770      	bx	lr
    7a2a:	46c0      	nop			(mov r8, r8)
    7a2c:	2000056c 	.word	0x2000056c

00007a30 <_ZNK7Command4finiEv>:

// est ce que la commande a fini ?
bool Command::fini() const
    7a30:	b480      	push	{r7}
    7a32:	b083      	sub	sp, #12
    7a34:	af00      	add	r7, sp, #0
    7a36:	6078      	str	r0, [r7, #4]
{
    return false;
    7a38:	f04f 0300 	mov.w	r3, #0	; 0x0
}
    7a3c:	4618      	mov	r0, r3
    7a3e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7a42:	46bd      	mov	sp, r7
    7a44:	bc80      	pop	{r7}
    7a46:	4770      	bx	lr

00007a48 <_ZN7Command10limitSpeedEb>:

void Command::limitSpeed(bool doitLimiter)
    7a48:	b480      	push	{r7}
    7a4a:	b083      	sub	sp, #12
    7a4c:	af00      	add	r7, sp, #0
    7a4e:	4603      	mov	r3, r0
    7a50:	71fb      	strb	r3, [r7, #7]
{
    Command::limiter = doitLimiter;
    7a52:	4a04      	ldr	r2, [pc, #16]	(7a64 <_ZN7Command10limitSpeedEb+0x1c>)
    7a54:	79fb      	ldrb	r3, [r7, #7]
    7a56:	7013      	strb	r3, [r2, #0]
    //vitesseLinMax = 1;//TODO : mettre une valeur réaliste, ou bien sauvegarder la première valeure et la diviser
}
    7a58:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7a5c:	46bd      	mov	sp, r7
    7a5e:	bc80      	pop	{r7}
    7a60:	4770      	bx	lr
    7a62:	46c0      	nop			(mov r8, r8)
    7a64:	2000056d 	.word	0x2000056d

00007a68 <_ZN7Command8getLimitEv>:

bool Command::getLimit(void)
    7a68:	b480      	push	{r7}
    7a6a:	af00      	add	r7, sp, #0
{
    return Command::limiter;
    7a6c:	4b02      	ldr	r3, [pc, #8]	(7a78 <_ZN7Command8getLimitEv+0x10>)
    7a6e:	781b      	ldrb	r3, [r3, #0]
}
    7a70:	4618      	mov	r0, r3
    7a72:	46bd      	mov	sp, r7
    7a74:	bc80      	pop	{r7}
    7a76:	4770      	bx	lr
    7a78:	2000056d 	.word	0x2000056d

00007a7c <_ZN7Command11isLookingAtEff>:
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();

    return (vect.getNorme() < (int) precision);
}

bool Command::isLookingAt(Angle a, float precision)
    7a7c:	b580      	push	{r7, lr}
    7a7e:	b088      	sub	sp, #32
    7a80:	af00      	add	r7, sp, #0
    7a82:	60f8      	str	r0, [r7, #12]
    7a84:	60b9      	str	r1, [r7, #8]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;
    7a86:	4b3a      	ldr	r3, [pc, #232]	(7b70 <_ZN7Command11isLookingAtEff+0xf4>)
    7a88:	681a      	ldr	r2, [r3, #0]
    7a8a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7a8e:	4618      	mov	r0, r3
    7a90:	4611      	mov	r1, r2
    7a92:	f001 fe8d 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    7a96:	69bb      	ldr	r3, [r7, #24]
    7a98:	68f8      	ldr	r0, [r7, #12]
    7a9a:	4619      	mov	r1, r3
    7a9c:	f010 ffe6 	bl	18a6c <__aeabi_fsub>
    7aa0:	4603      	mov	r3, r0
    7aa2:	61fb      	str	r3, [r7, #28]
    7aa4:	e012      	b.n	7acc <_ZN7Command11isLookingAtEff+0x50>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    7aa6:	69f8      	ldr	r0, [r7, #28]
    7aa8:	f010 fc78 	bl	1839c <__aeabi_f2d>
    7aac:	4602      	mov	r2, r0
    7aae:	460b      	mov	r3, r1
    7ab0:	4610      	mov	r0, r2
    7ab2:	4619      	mov	r1, r3
    7ab4:	a228      	add	r2, pc, #160	(adr r2, 7b58 <_ZN7Command11isLookingAtEff+0xdc>)
    7ab6:	ca0c      	ldmia	r2!, {r2, r3}
    7ab8:	f010 fb10 	bl	180dc <__aeabi_dsub>
    7abc:	4602      	mov	r2, r0
    7abe:	460b      	mov	r3, r1
    7ac0:	4610      	mov	r0, r2
    7ac2:	4619      	mov	r1, r3
    7ac4:	f010 ff7e 	bl	189c4 <__aeabi_d2f>
    7ac8:	4603      	mov	r3, r0
    7aca:	61fb      	str	r3, [r7, #28]

bool Command::isLookingAt(Angle a, float precision)
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    7acc:	69f8      	ldr	r0, [r7, #28]
    7ace:	f010 fc65 	bl	1839c <__aeabi_f2d>
    7ad2:	4602      	mov	r2, r0
    7ad4:	460b      	mov	r3, r1
    7ad6:	4610      	mov	r0, r2
    7ad8:	4619      	mov	r1, r3
    7ada:	a221      	add	r2, pc, #132	(adr r2, 7b60 <_ZN7Command11isLookingAtEff+0xe4>)
    7adc:	ca0c      	ldmia	r2!, {r2, r3}
    7ade:	f010 ff35 	bl	1894c <__aeabi_dcmpge>
    7ae2:	4603      	mov	r3, r0
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d1de      	bne.n	7aa6 <_ZN7Command11isLookingAtEff+0x2a>
    7ae8:	e012      	b.n	7b10 <_ZN7Command11isLookingAtEff+0x94>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    7aea:	69f8      	ldr	r0, [r7, #28]
    7aec:	f010 fc56 	bl	1839c <__aeabi_f2d>
    7af0:	4602      	mov	r2, r0
    7af2:	460b      	mov	r3, r1
    7af4:	4610      	mov	r0, r2
    7af6:	4619      	mov	r1, r3
    7af8:	a217      	add	r2, pc, #92	(adr r2, 7b58 <_ZN7Command11isLookingAtEff+0xdc>)
    7afa:	ca0c      	ldmia	r2!, {r2, r3}
    7afc:	f010 faf0 	bl	180e0 <__adddf3>
    7b00:	4602      	mov	r2, r0
    7b02:	460b      	mov	r3, r1
    7b04:	4610      	mov	r0, r2
    7b06:	4619      	mov	r1, r3
    7b08:	f010 ff5c 	bl	189c4 <__aeabi_d2f>
    7b0c:	4603      	mov	r3, r0
    7b0e:	61fb      	str	r3, [r7, #28]
{
    Angle diff = a - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    7b10:	69f8      	ldr	r0, [r7, #28]
    7b12:	f010 fc43 	bl	1839c <__aeabi_f2d>
    7b16:	4602      	mov	r2, r0
    7b18:	460b      	mov	r3, r1
    7b1a:	4610      	mov	r0, r2
    7b1c:	4619      	mov	r1, r3
    7b1e:	a212      	add	r2, pc, #72	(adr r2, 7b68 <_ZN7Command11isLookingAtEff+0xec>)
    7b20:	ca0c      	ldmia	r2!, {r2, r3}
    7b22:	f010 feff 	bl	18924 <__aeabi_dcmplt>
    7b26:	4603      	mov	r3, r0
    7b28:	2b00      	cmp	r3, #0
    7b2a:	d1de      	bne.n	7aea <_ZN7Command11isLookingAtEff+0x6e>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    7b2c:	69fb      	ldr	r3, [r7, #28]
    7b2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7b32:	f04f 0300 	mov.w	r3, #0	; 0x0
    7b36:	71fb      	strb	r3, [r7, #7]
    7b38:	4610      	mov	r0, r2
    7b3a:	68b9      	ldr	r1, [r7, #8]
    7b3c:	f011 fa3c 	bl	18fb8 <__aeabi_fcmplt>
    7b40:	4603      	mov	r3, r0
    7b42:	2b00      	cmp	r3, #0
    7b44:	d002      	beq.n	7b4c <_ZN7Command11isLookingAtEff+0xd0>
    7b46:	f04f 0301 	mov.w	r3, #1	; 0x1
    7b4a:	71fb      	strb	r3, [r7, #7]
    7b4c:	79fb      	ldrb	r3, [r7, #7]
}
    7b4e:	4618      	mov	r0, r3
    7b50:	f107 0720 	add.w	r7, r7, #32	; 0x20
    7b54:	46bd      	mov	sp, r7
    7b56:	bd80      	pop	{r7, pc}
    7b58:	54442d18 	.word	0x54442d18
    7b5c:	401921fb 	.word	0x401921fb
    7b60:	54442d18 	.word	0x54442d18
    7b64:	400921fb 	.word	0x400921fb
    7b68:	54442d18 	.word	0x54442d18
    7b6c:	c00921fb 	.word	0xc00921fb
    7b70:	20000570 	.word	0x20000570

00007b74 <_ZN7Command11isLookingAtE8Positionf>:

bool Command::isLookingAt(Position pos, float precision)
    7b74:	b5b0      	push	{r4, r5, r7, lr}
    7b76:	b090      	sub	sp, #64
    7b78:	af00      	add	r7, sp, #0
    7b7a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7b7e:	e883 0003 	stmia.w	r3, {r0, r1}
    7b82:	607a      	str	r2, [r7, #4]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    7b84:	4b58      	ldr	r3, [pc, #352]	(7ce8 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    7b86:	681a      	ldr	r2, [r3, #0]
    7b88:	f107 0320 	add.w	r3, r7, #32	; 0x20
    7b8c:	4618      	mov	r0, r3
    7b8e:	4611      	mov	r1, r2
    7b90:	f001 fe0e 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    7b94:	f107 0318 	add.w	r3, r7, #24	; 0x18
    7b98:	f107 0220 	add.w	r2, r7, #32	; 0x20
    7b9c:	4618      	mov	r0, r3
    7b9e:	4611      	mov	r1, r2
    7ba0:	f006 ff7c 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    7ba4:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7ba8:	f107 0208 	add.w	r2, r7, #8	; 0x8
    7bac:	f107 0c18 	add.w	ip, r7, #24	; 0x18
    7bb0:	4618      	mov	r0, r3
    7bb2:	4611      	mov	r1, r2
    7bb4:	4662      	mov	r2, ip
    7bb6:	f006 fda3 	bl	e700 <_ZNK8PositionmiERKS_>
    Angle angleVise = atan2(delta.getY(),delta.getX());
    7bba:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7bbe:	4618      	mov	r0, r3
    7bc0:	f006 fd50 	bl	e664 <_ZNK8Position4getYEv>
    7bc4:	4603      	mov	r3, r0
    7bc6:	4618      	mov	r0, r3
    7bc8:	f010 fbe8 	bl	1839c <__aeabi_f2d>
    7bcc:	4604      	mov	r4, r0
    7bce:	460d      	mov	r5, r1
    7bd0:	f107 0310 	add.w	r3, r7, #16	; 0x10
    7bd4:	4618      	mov	r0, r3
    7bd6:	f006 fd39 	bl	e64c <_ZNK8Position4getXEv>
    7bda:	4603      	mov	r3, r0
    7bdc:	4618      	mov	r0, r3
    7bde:	f010 fbdd 	bl	1839c <__aeabi_f2d>
    7be2:	4602      	mov	r2, r0
    7be4:	460b      	mov	r3, r1
    7be6:	4620      	mov	r0, r4
    7be8:	4629      	mov	r1, r5
    7bea:	f014 fc61 	bl	1c4b0 <atan2>
    7bee:	4602      	mov	r2, r0
    7bf0:	460b      	mov	r3, r1
    7bf2:	4610      	mov	r0, r2
    7bf4:	4619      	mov	r1, r3
    7bf6:	f010 fee5 	bl	189c4 <__aeabi_d2f>
    7bfa:	4603      	mov	r3, r0
    7bfc:	63bb      	str	r3, [r7, #56]
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;
    7bfe:	4b3a      	ldr	r3, [pc, #232]	(7ce8 <_ZN7Command11isLookingAtE8Positionf+0x174>)
    7c00:	681a      	ldr	r2, [r3, #0]
    7c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    7c06:	4618      	mov	r0, r3
    7c08:	4611      	mov	r1, r2
    7c0a:	f001 fdd1 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    7c0e:	6b7b      	ldr	r3, [r7, #52]
    7c10:	6bb8      	ldr	r0, [r7, #56]
    7c12:	4619      	mov	r1, r3
    7c14:	f010 ff2a 	bl	18a6c <__aeabi_fsub>
    7c18:	4603      	mov	r3, r0
    7c1a:	63fb      	str	r3, [r7, #60]
    7c1c:	e012      	b.n	7c44 <_ZN7Command11isLookingAtE8Positionf+0xd0>

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    7c1e:	6bf8      	ldr	r0, [r7, #60]
    7c20:	f010 fbbc 	bl	1839c <__aeabi_f2d>
    7c24:	4602      	mov	r2, r0
    7c26:	460b      	mov	r3, r1
    7c28:	4610      	mov	r0, r2
    7c2a:	4619      	mov	r1, r3
    7c2c:	a228      	add	r2, pc, #160	(adr r2, 7cd0 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    7c2e:	ca0c      	ldmia	r2!, {r2, r3}
    7c30:	f010 fa54 	bl	180dc <__aeabi_dsub>
    7c34:	4602      	mov	r2, r0
    7c36:	460b      	mov	r3, r1
    7c38:	4610      	mov	r0, r2
    7c3a:	4619      	mov	r1, r3
    7c3c:	f010 fec2 	bl	189c4 <__aeabi_d2f>
    7c40:	4603      	mov	r3, r0
    7c42:	63fb      	str	r3, [r7, #60]
{
    Position delta = pos - Odometrie::odometrie->getPos().getPosition();
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
    7c44:	6bf8      	ldr	r0, [r7, #60]
    7c46:	f010 fba9 	bl	1839c <__aeabi_f2d>
    7c4a:	4602      	mov	r2, r0
    7c4c:	460b      	mov	r3, r1
    7c4e:	4610      	mov	r0, r2
    7c50:	4619      	mov	r1, r3
    7c52:	a221      	add	r2, pc, #132	(adr r2, 7cd8 <_ZN7Command11isLookingAtE8Positionf+0x164>)
    7c54:	ca0c      	ldmia	r2!, {r2, r3}
    7c56:	f010 fe79 	bl	1894c <__aeabi_dcmpge>
    7c5a:	4603      	mov	r3, r0
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d1de      	bne.n	7c1e <_ZN7Command11isLookingAtE8Positionf+0xaa>
    7c60:	e012      	b.n	7c88 <_ZN7Command11isLookingAtE8Positionf+0x114>
        diff -= 2.*M_PI;
    while(diff < -M_PI)
        diff += 2.*M_PI;
    7c62:	6bf8      	ldr	r0, [r7, #60]
    7c64:	f010 fb9a 	bl	1839c <__aeabi_f2d>
    7c68:	4602      	mov	r2, r0
    7c6a:	460b      	mov	r3, r1
    7c6c:	4610      	mov	r0, r2
    7c6e:	4619      	mov	r1, r3
    7c70:	a217      	add	r2, pc, #92	(adr r2, 7cd0 <_ZN7Command11isLookingAtE8Positionf+0x15c>)
    7c72:	ca0c      	ldmia	r2!, {r2, r3}
    7c74:	f010 fa34 	bl	180e0 <__adddf3>
    7c78:	4602      	mov	r2, r0
    7c7a:	460b      	mov	r3, r1
    7c7c:	4610      	mov	r0, r2
    7c7e:	4619      	mov	r1, r3
    7c80:	f010 fea0 	bl	189c4 <__aeabi_d2f>
    7c84:	4603      	mov	r3, r0
    7c86:	63fb      	str	r3, [r7, #60]
    Angle angleVise = atan2(delta.getY(),delta.getX());
    Angle diff = angleVise - Odometrie::odometrie->getPos().angle;

    while(diff >= M_PI)
        diff -= 2.*M_PI;
    while(diff < -M_PI)
    7c88:	6bf8      	ldr	r0, [r7, #60]
    7c8a:	f010 fb87 	bl	1839c <__aeabi_f2d>
    7c8e:	4602      	mov	r2, r0
    7c90:	460b      	mov	r3, r1
    7c92:	4610      	mov	r0, r2
    7c94:	4619      	mov	r1, r3
    7c96:	a212      	add	r2, pc, #72	(adr r2, 7ce0 <_ZN7Command11isLookingAtE8Positionf+0x16c>)
    7c98:	ca0c      	ldmia	r2!, {r2, r3}
    7c9a:	f010 fe43 	bl	18924 <__aeabi_dcmplt>
    7c9e:	4603      	mov	r3, r0
    7ca0:	2b00      	cmp	r3, #0
    7ca2:	d1de      	bne.n	7c62 <_ZN7Command11isLookingAtE8Positionf+0xee>
        diff += 2.*M_PI;

    return (fabs(diff) < precision);
    7ca4:	6bfb      	ldr	r3, [r7, #60]
    7ca6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    7caa:	f04f 0300 	mov.w	r3, #0	; 0x0
    7cae:	70fb      	strb	r3, [r7, #3]
    7cb0:	4610      	mov	r0, r2
    7cb2:	6879      	ldr	r1, [r7, #4]
    7cb4:	f011 f980 	bl	18fb8 <__aeabi_fcmplt>
    7cb8:	4603      	mov	r3, r0
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d002      	beq.n	7cc4 <_ZN7Command11isLookingAtE8Positionf+0x150>
    7cbe:	f04f 0301 	mov.w	r3, #1	; 0x1
    7cc2:	70fb      	strb	r3, [r7, #3]
    7cc4:	78fb      	ldrb	r3, [r7, #3]
}
    7cc6:	4618      	mov	r0, r3
    7cc8:	f107 0740 	add.w	r7, r7, #64	; 0x40
    7ccc:	46bd      	mov	sp, r7
    7cce:	bdb0      	pop	{r4, r5, r7, pc}
    7cd0:	54442d18 	.word	0x54442d18
    7cd4:	401921fb 	.word	0x401921fb
    7cd8:	54442d18 	.word	0x54442d18
    7cdc:	400921fb 	.word	0x400921fb
    7ce0:	54442d18 	.word	0x54442d18
    7ce4:	c00921fb 	.word	0xc00921fb
    7ce8:	20000570 	.word	0x20000570

00007cec <_ZN7Command6isNearE8Positionf>:
bool Command::getLimit(void)
{
    return Command::limiter;
}

bool Command::isNear(Position pos, float precision)
    7cec:	b590      	push	{r4, r7, lr}
    7cee:	b08d      	sub	sp, #52
    7cf0:	af00      	add	r7, sp, #0
    7cf2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    7cf6:	e883 0003 	stmia.w	r3, {r0, r1}
    7cfa:	607a      	str	r2, [r7, #4]
{
    Position vect = pos - Odometrie::odometrie->getPos().getPosition();
    7cfc:	4b1d      	ldr	r3, [pc, #116]	(7d74 <_ZN7Command6isNearE8Positionf+0x88>)
    7cfe:	681a      	ldr	r2, [r3, #0]
    7d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
    7d04:	4618      	mov	r0, r3
    7d06:	4611      	mov	r1, r2
    7d08:	f001 fd52 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    7d0c:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    7d10:	f107 0224 	add.w	r2, r7, #36	; 0x24
    7d14:	4618      	mov	r0, r3
    7d16:	4611      	mov	r1, r2
    7d18:	f006 fec0 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    7d1c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    7d20:	f107 0208 	add.w	r2, r7, #8	; 0x8
    7d24:	f107 0c1c 	add.w	ip, r7, #28	; 0x1c
    7d28:	4618      	mov	r0, r3
    7d2a:	4611      	mov	r1, r2
    7d2c:	4662      	mov	r2, ip
    7d2e:	f006 fce7 	bl	e700 <_ZNK8PositionmiERKS_>

    return (vect.getNorme() < (int) precision);
    7d32:	f107 0314 	add.w	r3, r7, #20	; 0x14
    7d36:	4618      	mov	r0, r3
    7d38:	f006 fdf0 	bl	e91c <_ZNK8Position8getNormeEv>
    7d3c:	4604      	mov	r4, r0
    7d3e:	6878      	ldr	r0, [r7, #4]
    7d40:	f011 f962 	bl	19008 <__aeabi_f2iz>
    7d44:	4603      	mov	r3, r0
    7d46:	4618      	mov	r0, r3
    7d48:	f010 ff46 	bl	18bd8 <__aeabi_i2f>
    7d4c:	4602      	mov	r2, r0
    7d4e:	f04f 0300 	mov.w	r3, #0	; 0x0
    7d52:	70fb      	strb	r3, [r7, #3]
    7d54:	4620      	mov	r0, r4
    7d56:	4611      	mov	r1, r2
    7d58:	f011 f92e 	bl	18fb8 <__aeabi_fcmplt>
    7d5c:	4603      	mov	r3, r0
    7d5e:	2b00      	cmp	r3, #0
    7d60:	d002      	beq.n	7d68 <_ZN7Command6isNearE8Positionf+0x7c>
    7d62:	f04f 0301 	mov.w	r3, #1	; 0x1
    7d66:	70fb      	strb	r3, [r7, #3]
    7d68:	78fb      	ldrb	r3, [r7, #3]
}
    7d6a:	4618      	mov	r0, r3
    7d6c:	f107 0734 	add.w	r7, r7, #52	; 0x34
    7d70:	46bd      	mov	sp, r7
    7d72:	bd90      	pop	{r4, r7, pc}
    7d74:	20000570 	.word	0x20000570

00007d78 <_ZN7CommandD0Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    7d78:	b580      	push	{r7, lr}
    7d7a:	b082      	sub	sp, #8
    7d7c:	af00      	add	r7, sp, #0
    7d7e:	6078      	str	r0, [r7, #4]
    7d80:	687a      	ldr	r2, [r7, #4]
    7d82:	4b08      	ldr	r3, [pc, #32]	(7da4 <_ZN7CommandD0Ev+0x2c>)
    7d84:	6013      	str	r3, [r2, #0]
{
}
    7d86:	f04f 0301 	mov.w	r3, #1	; 0x1
    7d8a:	b2db      	uxtb	r3, r3
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d002      	beq.n	7d96 <_ZN7CommandD0Ev+0x1e>
    7d90:	6878      	ldr	r0, [r7, #4]
    7d92:	f006 fb87 	bl	e4a4 <_ZdlPv>
    7d96:	687b      	ldr	r3, [r7, #4]
    7d98:	4618      	mov	r0, r3
    7d9a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7d9e:	46bd      	mov	sp, r7
    7da0:	bd80      	pop	{r7, pc}
    7da2:	46c0      	nop			(mov r8, r8)
    7da4:	0001f970 	.word	0x0001f970

00007da8 <_ZN7CommandD1Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    7da8:	b580      	push	{r7, lr}
    7daa:	b082      	sub	sp, #8
    7dac:	af00      	add	r7, sp, #0
    7dae:	6078      	str	r0, [r7, #4]
    7db0:	687a      	ldr	r2, [r7, #4]
    7db2:	4b08      	ldr	r3, [pc, #32]	(7dd4 <_ZN7CommandD1Ev+0x2c>)
    7db4:	6013      	str	r3, [r2, #0]
{
}
    7db6:	f04f 0300 	mov.w	r3, #0	; 0x0
    7dba:	b2db      	uxtb	r3, r3
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	d002      	beq.n	7dc6 <_ZN7CommandD1Ev+0x1e>
    7dc0:	6878      	ldr	r0, [r7, #4]
    7dc2:	f006 fb6f 	bl	e4a4 <_ZdlPv>
    7dc6:	687b      	ldr	r3, [r7, #4]
    7dc8:	4618      	mov	r0, r3
    7dca:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7dce:	46bd      	mov	sp, r7
    7dd0:	bd80      	pop	{r7, pc}
    7dd2:	46c0      	nop			(mov r8, r8)
    7dd4:	0001f970 	.word	0x0001f970

00007dd8 <_ZN7CommandD2Ev>:
Command::Command()
{
    Command::stop = false;
}

Command::~Command()
    7dd8:	b580      	push	{r7, lr}
    7dda:	b082      	sub	sp, #8
    7ddc:	af00      	add	r7, sp, #0
    7dde:	6078      	str	r0, [r7, #4]
    7de0:	687a      	ldr	r2, [r7, #4]
    7de2:	4b08      	ldr	r3, [pc, #32]	(7e04 <_ZN7CommandD2Ev+0x2c>)
    7de4:	6013      	str	r3, [r2, #0]
{
}
    7de6:	f04f 0300 	mov.w	r3, #0	; 0x0
    7dea:	b2db      	uxtb	r3, r3
    7dec:	2b00      	cmp	r3, #0
    7dee:	d002      	beq.n	7df6 <_ZN7CommandD2Ev+0x1e>
    7df0:	6878      	ldr	r0, [r7, #4]
    7df2:	f006 fb57 	bl	e4a4 <_ZdlPv>
    7df6:	687b      	ldr	r3, [r7, #4]
    7df8:	4618      	mov	r0, r3
    7dfa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    7dfe:	46bd      	mov	sp, r7
    7e00:	bd80      	pop	{r7, pc}
    7e02:	46c0      	nop			(mov r8, r8)
    7e04:	0001f970 	.word	0x0001f970

00007e08 <_Z9diffAngleff>:

#ifndef abs
#define abs(x) fabs(x)
#endif

float diffAngle(float a, float b)
    7e08:	b580      	push	{r7, lr}
    7e0a:	b084      	sub	sp, #16
    7e0c:	af00      	add	r7, sp, #0
    7e0e:	6078      	str	r0, [r7, #4]
    7e10:	6039      	str	r1, [r7, #0]
{
    float t = a-b;
    7e12:	6878      	ldr	r0, [r7, #4]
    7e14:	6839      	ldr	r1, [r7, #0]
    7e16:	f010 fe29 	bl	18a6c <__aeabi_fsub>
    7e1a:	4603      	mov	r3, r0
    7e1c:	60fb      	str	r3, [r7, #12]
    7e1e:	e012      	b.n	7e46 <_Z9diffAngleff+0x3e>
    while (t > M_PI)
    {
        t -= 2*M_PI;
    7e20:	68f8      	ldr	r0, [r7, #12]
    7e22:	f010 fabb 	bl	1839c <__aeabi_f2d>
    7e26:	4602      	mov	r2, r0
    7e28:	460b      	mov	r3, r1
    7e2a:	4610      	mov	r0, r2
    7e2c:	4619      	mov	r1, r3
    7e2e:	a222      	add	r2, pc, #136	(adr r2, 7eb8 <_Z9diffAngleff+0xb0>)
    7e30:	ca0c      	ldmia	r2!, {r2, r3}
    7e32:	f010 f953 	bl	180dc <__aeabi_dsub>
    7e36:	4602      	mov	r2, r0
    7e38:	460b      	mov	r3, r1
    7e3a:	4610      	mov	r0, r2
    7e3c:	4619      	mov	r1, r3
    7e3e:	f010 fdc1 	bl	189c4 <__aeabi_d2f>
    7e42:	4603      	mov	r3, r0
    7e44:	60fb      	str	r3, [r7, #12]
#endif

float diffAngle(float a, float b)
{
    float t = a-b;
    while (t > M_PI)
    7e46:	68f8      	ldr	r0, [r7, #12]
    7e48:	f010 faa8 	bl	1839c <__aeabi_f2d>
    7e4c:	4602      	mov	r2, r0
    7e4e:	460b      	mov	r3, r1
    7e50:	4610      	mov	r0, r2
    7e52:	4619      	mov	r1, r3
    7e54:	a21a      	add	r2, pc, #104	(adr r2, 7ec0 <_Z9diffAngleff+0xb8>)
    7e56:	ca0c      	ldmia	r2!, {r2, r3}
    7e58:	f010 fd82 	bl	18960 <__aeabi_dcmpgt>
    7e5c:	4603      	mov	r3, r0
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d1de      	bne.n	7e20 <_Z9diffAngleff+0x18>
    7e62:	e012      	b.n	7e8a <_Z9diffAngleff+0x82>
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    {
        t += 2*M_PI;
    7e64:	68f8      	ldr	r0, [r7, #12]
    7e66:	f010 fa99 	bl	1839c <__aeabi_f2d>
    7e6a:	4602      	mov	r2, r0
    7e6c:	460b      	mov	r3, r1
    7e6e:	4610      	mov	r0, r2
    7e70:	4619      	mov	r1, r3
    7e72:	a211      	add	r2, pc, #68	(adr r2, 7eb8 <_Z9diffAngleff+0xb0>)
    7e74:	ca0c      	ldmia	r2!, {r2, r3}
    7e76:	f010 f933 	bl	180e0 <__adddf3>
    7e7a:	4602      	mov	r2, r0
    7e7c:	460b      	mov	r3, r1
    7e7e:	4610      	mov	r0, r2
    7e80:	4619      	mov	r1, r3
    7e82:	f010 fd9f 	bl	189c4 <__aeabi_d2f>
    7e86:	4603      	mov	r3, r0
    7e88:	60fb      	str	r3, [r7, #12]
    float t = a-b;
    while (t > M_PI)
    {
        t -= 2*M_PI;
    }
    while (t < -M_PI)
    7e8a:	68f8      	ldr	r0, [r7, #12]
    7e8c:	f010 fa86 	bl	1839c <__aeabi_f2d>
    7e90:	4602      	mov	r2, r0
    7e92:	460b      	mov	r3, r1
    7e94:	4610      	mov	r0, r2
    7e96:	4619      	mov	r1, r3
    7e98:	a20b      	add	r2, pc, #44	(adr r2, 7ec8 <_Z9diffAngleff+0xc0>)
    7e9a:	ca0c      	ldmia	r2!, {r2, r3}
    7e9c:	f010 fd42 	bl	18924 <__aeabi_dcmplt>
    7ea0:	4603      	mov	r3, r0
    7ea2:	2b00      	cmp	r3, #0
    7ea4:	d1de      	bne.n	7e64 <_Z9diffAngleff+0x5c>
    {
        t += 2*M_PI;
    }
    return t;
    7ea6:	68fb      	ldr	r3, [r7, #12]
}
    7ea8:	4618      	mov	r0, r3
    7eaa:	f107 0710 	add.w	r7, r7, #16	; 0x10
    7eae:	46bd      	mov	sp, r7
    7eb0:	bd80      	pop	{r7, pc}
    7eb2:	46c0      	nop			(mov r8, r8)
    7eb4:	46c0      	nop			(mov r8, r8)
    7eb6:	46c0      	nop			(mov r8, r8)
    7eb8:	54442d18 	.word	0x54442d18
    7ebc:	401921fb 	.word	0x401921fb
    7ec0:	54442d18 	.word	0x54442d18
    7ec4:	400921fb 	.word	0x400921fb
    7ec8:	54442d18 	.word	0x54442d18
    7ecc:	c00921fb 	.word	0xc00921fb

00007ed0 <_ZN18CommandAllerEnArcA14getLinearSpeedEv>:
        linSpeed = rVise*angSpeed;*/


}

Vitesse CommandAllerEnArcA::getLinearSpeed()
    7ed0:	b480      	push	{r7}
    7ed2:	b083      	sub	sp, #12
    7ed4:	af00      	add	r7, sp, #0
    7ed6:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    7ed8:	687b      	ldr	r3, [r7, #4]
    7eda:	695b      	ldr	r3, [r3, #20]
}
    7edc:	4618      	mov	r0, r3
    7ede:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ee2:	46bd      	mov	sp, r7
    7ee4:	bc80      	pop	{r7}
    7ee6:	4770      	bx	lr

00007ee8 <_ZN18CommandAllerEnArcA15getAngularSpeedEv>:

Angle CommandAllerEnArcA::getAngularSpeed()
    7ee8:	b480      	push	{r7}
    7eea:	b083      	sub	sp, #12
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7ef0:	687b      	ldr	r3, [r7, #4]
    7ef2:	699b      	ldr	r3, [r3, #24]
}
    7ef4:	4618      	mov	r0, r3
    7ef6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7efa:	46bd      	mov	sp, r7
    7efc:	bc80      	pop	{r7}
    7efe:	4770      	bx	lr

00007f00 <_ZNK18CommandAllerEnArcA4finiEv>:

// est ce que la commande a fini ?
bool CommandAllerEnArcA::fini() const
    7f00:	b480      	push	{r7}
    7f02:	b083      	sub	sp, #12
    7f04:	af00      	add	r7, sp, #0
    7f06:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7f08:	687b      	ldr	r3, [r7, #4]
    7f0a:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    7f0e:	4618      	mov	r0, r3
    7f10:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f14:	46bd      	mov	sp, r7
    7f16:	bc80      	pop	{r7}
    7f18:	4770      	bx	lr
    7f1a:	46c0      	nop			(mov r8, r8)

00007f1c <_ZN13CommandAllerA14getLinearSpeedEv>:
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
}

Vitesse CommandAllerA::getLinearSpeed()
    7f1c:	b480      	push	{r7}
    7f1e:	b083      	sub	sp, #12
    7f20:	af00      	add	r7, sp, #0
    7f22:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	699b      	ldr	r3, [r3, #24]
}
    7f28:	4618      	mov	r0, r3
    7f2a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f2e:	46bd      	mov	sp, r7
    7f30:	bc80      	pop	{r7}
    7f32:	4770      	bx	lr

00007f34 <_ZN13CommandAllerA15getAngularSpeedEv>:

Angle CommandAllerA::getAngularSpeed()
    7f34:	b480      	push	{r7}
    7f36:	b083      	sub	sp, #12
    7f38:	af00      	add	r7, sp, #0
    7f3a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7f3c:	687b      	ldr	r3, [r7, #4]
    7f3e:	69db      	ldr	r3, [r3, #28]
}
    7f40:	4618      	mov	r0, r3
    7f42:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f46:	46bd      	mov	sp, r7
    7f48:	bc80      	pop	{r7}
    7f4a:	4770      	bx	lr

00007f4c <_ZNK13CommandAllerA4finiEv>:

bool CommandAllerA::fini() const
    7f4c:	b480      	push	{r7}
    7f4e:	b083      	sub	sp, #12
    7f50:	af00      	add	r7, sp, #0
    7f52:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7f54:	687b      	ldr	r3, [r7, #4]
    7f56:	f893 3028 	ldrb.w	r3, [r3, #40]
}
    7f5a:	4618      	mov	r0, r3
    7f5c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f60:	46bd      	mov	sp, r7
    7f62:	bc80      	pop	{r7}
    7f64:	4770      	bx	lr
    7f66:	46c0      	nop			(mov r8, r8)

00007f68 <_ZN18CommandTournerVers14getLinearSpeedEv>:
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}

Vitesse CommandTournerVers::getLinearSpeed()
    7f68:	b480      	push	{r7}
    7f6a:	b083      	sub	sp, #12
    7f6c:	af00      	add	r7, sp, #0
    7f6e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    7f70:	4b03      	ldr	r3, [pc, #12]	(7f80 <_ZN18CommandTournerVers14getLinearSpeedEv+0x18>)
}
    7f72:	4618      	mov	r0, r3
    7f74:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f78:	46bd      	mov	sp, r7
    7f7a:	bc80      	pop	{r7}
    7f7c:	4770      	bx	lr
    7f7e:	46c0      	nop			(mov r8, r8)
    7f80:	00000000 	.word	0x00000000

00007f84 <_ZN18CommandTournerVers15getAngularSpeedEv>:

Angle CommandTournerVers::getAngularSpeed()
    7f84:	b480      	push	{r7}
    7f86:	b083      	sub	sp, #12
    7f88:	af00      	add	r7, sp, #0
    7f8a:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7f8c:	687b      	ldr	r3, [r7, #4]
    7f8e:	68db      	ldr	r3, [r3, #12]
}
    7f90:	4618      	mov	r0, r3
    7f92:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7f96:	46bd      	mov	sp, r7
    7f98:	bc80      	pop	{r7}
    7f9a:	4770      	bx	lr

00007f9c <_ZNK18CommandTournerVers4finiEv>:

bool CommandTournerVers::fini() const
    7f9c:	b480      	push	{r7}
    7f9e:	b083      	sub	sp, #12
    7fa0:	af00      	add	r7, sp, #0
    7fa2:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7fa4:	687b      	ldr	r3, [r7, #4]
    7fa6:	7d1b      	ldrb	r3, [r3, #20]
}
    7fa8:	4618      	mov	r0, r3
    7faa:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7fae:	46bd      	mov	sp, r7
    7fb0:	bc80      	pop	{r7}
    7fb2:	4770      	bx	lr

00007fb4 <_ZN13CommandVirage14getLinearSpeedEv>:

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
}

Vitesse CommandVirage::getLinearSpeed()
    7fb4:	b480      	push	{r7}
    7fb6:	b083      	sub	sp, #12
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	689b      	ldr	r3, [r3, #8]
}
    7fc0:	4618      	mov	r0, r3
    7fc2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7fc6:	46bd      	mov	sp, r7
    7fc8:	bc80      	pop	{r7}
    7fca:	4770      	bx	lr

00007fcc <_ZN13CommandVirage15getAngularSpeedEv>:

Angle CommandVirage::getAngularSpeed()
    7fcc:	b480      	push	{r7}
    7fce:	b083      	sub	sp, #12
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    7fd4:	687b      	ldr	r3, [r7, #4]
    7fd6:	68db      	ldr	r3, [r3, #12]
}
    7fd8:	4618      	mov	r0, r3
    7fda:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7fde:	46bd      	mov	sp, r7
    7fe0:	bc80      	pop	{r7}
    7fe2:	4770      	bx	lr

00007fe4 <_ZNK13CommandVirage4finiEv>:

// est ce que la commande a fini ?
bool CommandVirage::fini() const
    7fe4:	b480      	push	{r7}
    7fe6:	b083      	sub	sp, #12
    7fe8:	af00      	add	r7, sp, #0
    7fea:	6078      	str	r0, [r7, #4]
{
    return m_fini;
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	7f1b      	ldrb	r3, [r3, #28]
}
    7ff0:	4618      	mov	r0, r3
    7ff2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    7ff6:	46bd      	mov	sp, r7
    7ff8:	bc80      	pop	{r7}
    7ffa:	4770      	bx	lr

00007ffc <_ZN15CommandAttendre6updateEv>:
CommandAttendre::CommandAttendre(int nbUpdates)
    : Command(), compte(nbUpdates)
{
}

void CommandAttendre::update()
    7ffc:	b480      	push	{r7}
    7ffe:	b083      	sub	sp, #12
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
{
    compte--;
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	685b      	ldr	r3, [r3, #4]
    8008:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    800c:	687b      	ldr	r3, [r7, #4]
    800e:	605a      	str	r2, [r3, #4]
}
    8010:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8014:	46bd      	mov	sp, r7
    8016:	bc80      	pop	{r7}
    8018:	4770      	bx	lr
    801a:	46c0      	nop			(mov r8, r8)

0000801c <_ZN15CommandAttendre14getLinearSpeedEv>:

Vitesse CommandAttendre::getLinearSpeed()
    801c:	b480      	push	{r7}
    801e:	b083      	sub	sp, #12
    8020:	af00      	add	r7, sp, #0
    8022:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8024:	4b03      	ldr	r3, [pc, #12]	(8034 <_ZN15CommandAttendre14getLinearSpeedEv+0x18>)
}
    8026:	4618      	mov	r0, r3
    8028:	f107 070c 	add.w	r7, r7, #12	; 0xc
    802c:	46bd      	mov	sp, r7
    802e:	bc80      	pop	{r7}
    8030:	4770      	bx	lr
    8032:	46c0      	nop			(mov r8, r8)
    8034:	00000000 	.word	0x00000000

00008038 <_ZN15CommandAttendre15getAngularSpeedEv>:

Angle CommandAttendre::getAngularSpeed()
    8038:	b480      	push	{r7}
    803a:	b083      	sub	sp, #12
    803c:	af00      	add	r7, sp, #0
    803e:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    8040:	4b03      	ldr	r3, [pc, #12]	(8050 <_ZN15CommandAttendre15getAngularSpeedEv+0x18>)
}
    8042:	4618      	mov	r0, r3
    8044:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8048:	46bd      	mov	sp, r7
    804a:	bc80      	pop	{r7}
    804c:	4770      	bx	lr
    804e:	46c0      	nop			(mov r8, r8)
    8050:	00000000 	.word	0x00000000

00008054 <_ZNK15CommandAttendre4finiEv>:

bool CommandAttendre::fini() const
    8054:	b480      	push	{r7}
    8056:	b083      	sub	sp, #12
    8058:	af00      	add	r7, sp, #0
    805a:	6078      	str	r0, [r7, #4]
{
    return (compte <= 0);
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	685b      	ldr	r3, [r3, #4]
    8060:	2b00      	cmp	r3, #0
    8062:	bfcc      	ite	gt
    8064:	2300      	movgt	r3, #0
    8066:	2301      	movle	r3, #1
    8068:	b2db      	uxtb	r3, r3
}
    806a:	4618      	mov	r0, r3
    806c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8070:	46bd      	mov	sp, r7
    8072:	bc80      	pop	{r7}
    8074:	4770      	bx	lr
    8076:	46c0      	nop			(mov r8, r8)

00008078 <_ZN18CommandTestAvancer6updateEv>:
CommandTestAvancer::CommandTestAvancer()
    : Command()
{
}

void CommandTestAvancer::update()
    8078:	b480      	push	{r7}
    807a:	b083      	sub	sp, #12
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
{
}
    8080:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8084:	46bd      	mov	sp, r7
    8086:	bc80      	pop	{r7}
    8088:	4770      	bx	lr
    808a:	46c0      	nop			(mov r8, r8)

0000808c <_ZN18CommandTestAvancer14getLinearSpeedEv>:

Vitesse CommandTestAvancer::getLinearSpeed()
    808c:	b480      	push	{r7}
    808e:	b083      	sub	sp, #12
    8090:	af00      	add	r7, sp, #0
    8092:	6078      	str	r0, [r7, #4]
{
    return VITESSE_LINEAIRE_MAX;
    8094:	4b03      	ldr	r3, [pc, #12]	(80a4 <_ZN18CommandTestAvancer14getLinearSpeedEv+0x18>)
}
    8096:	4618      	mov	r0, r3
    8098:	f107 070c 	add.w	r7, r7, #12	; 0xc
    809c:	46bd      	mov	sp, r7
    809e:	bc80      	pop	{r7}
    80a0:	4770      	bx	lr
    80a2:	46c0      	nop			(mov r8, r8)
    80a4:	40400000 	.word	0x40400000

000080a8 <_ZN18CommandTestAvancer15getAngularSpeedEv>:

Angle CommandTestAvancer::getAngularSpeed()
    80a8:	b480      	push	{r7}
    80aa:	b083      	sub	sp, #12
    80ac:	af00      	add	r7, sp, #0
    80ae:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    80b0:	4b03      	ldr	r3, [pc, #12]	(80c0 <_ZN18CommandTestAvancer15getAngularSpeedEv+0x18>)
}
    80b2:	4618      	mov	r0, r3
    80b4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    80b8:	46bd      	mov	sp, r7
    80ba:	bc80      	pop	{r7}
    80bc:	4770      	bx	lr
    80be:	46c0      	nop			(mov r8, r8)
    80c0:	00000000 	.word	0x00000000

000080c4 <_ZN24CommandTestTournerGauche6updateEv>:
CommandTestTournerGauche::CommandTestTournerGauche()
    : Command()
{
}

void CommandTestTournerGauche::update()
    80c4:	b480      	push	{r7}
    80c6:	b083      	sub	sp, #12
    80c8:	af00      	add	r7, sp, #0
    80ca:	6078      	str	r0, [r7, #4]
{
}
    80cc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    80d0:	46bd      	mov	sp, r7
    80d2:	bc80      	pop	{r7}
    80d4:	4770      	bx	lr
    80d6:	46c0      	nop			(mov r8, r8)

000080d8 <_ZN24CommandTestTournerGauche14getLinearSpeedEv>:

Vitesse CommandTestTournerGauche::getLinearSpeed()
    80d8:	b480      	push	{r7}
    80da:	b083      	sub	sp, #12
    80dc:	af00      	add	r7, sp, #0
    80de:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    80e0:	4b03      	ldr	r3, [pc, #12]	(80f0 <_ZN24CommandTestTournerGauche14getLinearSpeedEv+0x18>)
}
    80e2:	4618      	mov	r0, r3
    80e4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    80e8:	46bd      	mov	sp, r7
    80ea:	bc80      	pop	{r7}
    80ec:	4770      	bx	lr
    80ee:	46c0      	nop			(mov r8, r8)
    80f0:	00000000 	.word	0x00000000

000080f4 <_ZN24CommandTestTournerGauche15getAngularSpeedEv>:

Angle CommandTestTournerGauche::getAngularSpeed()
    80f4:	b480      	push	{r7}
    80f6:	b083      	sub	sp, #12
    80f8:	af00      	add	r7, sp, #0
    80fa:	6078      	str	r0, [r7, #4]
{
    return VITESSE_ANGULAIRE_MAX;
    80fc:	4b03      	ldr	r3, [pc, #12]	(810c <_ZN24CommandTestTournerGauche15getAngularSpeedEv+0x18>)
}
    80fe:	4618      	mov	r0, r3
    8100:	f107 070c 	add.w	r7, r7, #12	; 0xc
    8104:	46bd      	mov	sp, r7
    8106:	bc80      	pop	{r7}
    8108:	4770      	bx	lr
    810a:	46c0      	nop			(mov r8, r8)
    810c:	3cf5c28f 	.word	0x3cf5c28f

00008110 <_ZN24CommandTestTournerGaucheC1Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    8110:	b580      	push	{r7, lr}
    8112:	b082      	sub	sp, #8
    8114:	af00      	add	r7, sp, #0
    8116:	6078      	str	r0, [r7, #4]
    : Command()
    8118:	687b      	ldr	r3, [r7, #4]
    811a:	4618      	mov	r0, r3
    811c:	f7ff fc38 	bl	7990 <_ZN7CommandC2Ev>
    8120:	687a      	ldr	r2, [r7, #4]
    8122:	4b04      	ldr	r3, [pc, #16]	(8134 <_ZN24CommandTestTournerGaucheC1Ev+0x24>)
    8124:	6013      	str	r3, [r2, #0]
{
}
    8126:	687b      	ldr	r3, [r7, #4]
    8128:	4618      	mov	r0, r3
    812a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    812e:	46bd      	mov	sp, r7
    8130:	bd80      	pop	{r7, pc}
    8132:	46c0      	nop			(mov r8, r8)
    8134:	0001f998 	.word	0x0001f998

00008138 <_ZN24CommandTestTournerGaucheC2Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////


CommandTestTournerGauche::CommandTestTournerGauche()
    8138:	b580      	push	{r7, lr}
    813a:	b082      	sub	sp, #8
    813c:	af00      	add	r7, sp, #0
    813e:	6078      	str	r0, [r7, #4]
    : Command()
    8140:	687b      	ldr	r3, [r7, #4]
    8142:	4618      	mov	r0, r3
    8144:	f7ff fc24 	bl	7990 <_ZN7CommandC2Ev>
    8148:	687a      	ldr	r2, [r7, #4]
    814a:	4b04      	ldr	r3, [pc, #16]	(815c <_ZN24CommandTestTournerGaucheC2Ev+0x24>)
    814c:	6013      	str	r3, [r2, #0]
{
}
    814e:	687b      	ldr	r3, [r7, #4]
    8150:	4618      	mov	r0, r3
    8152:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8156:	46bd      	mov	sp, r7
    8158:	bd80      	pop	{r7, pc}
    815a:	46c0      	nop			(mov r8, r8)
    815c:	0001f998 	.word	0x0001f998

00008160 <_ZN18CommandTestAvancerC1Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    8160:	b580      	push	{r7, lr}
    8162:	b082      	sub	sp, #8
    8164:	af00      	add	r7, sp, #0
    8166:	6078      	str	r0, [r7, #4]
    : Command()
    8168:	687b      	ldr	r3, [r7, #4]
    816a:	4618      	mov	r0, r3
    816c:	f7ff fc10 	bl	7990 <_ZN7CommandC2Ev>
    8170:	687a      	ldr	r2, [r7, #4]
    8172:	4b04      	ldr	r3, [pc, #16]	(8184 <_ZN18CommandTestAvancerC1Ev+0x24>)
    8174:	6013      	str	r3, [r2, #0]
{
}
    8176:	687b      	ldr	r3, [r7, #4]
    8178:	4618      	mov	r0, r3
    817a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    817e:	46bd      	mov	sp, r7
    8180:	bd80      	pop	{r7, pc}
    8182:	46c0      	nop			(mov r8, r8)
    8184:	0001f9c0 	.word	0x0001f9c0

00008188 <_ZN18CommandTestAvancerC2Ev>:

    ////////////////////////////////
    //      CommandTestAvancer    //
    ////////////////////////////////

CommandTestAvancer::CommandTestAvancer()
    8188:	b580      	push	{r7, lr}
    818a:	b082      	sub	sp, #8
    818c:	af00      	add	r7, sp, #0
    818e:	6078      	str	r0, [r7, #4]
    : Command()
    8190:	687b      	ldr	r3, [r7, #4]
    8192:	4618      	mov	r0, r3
    8194:	f7ff fbfc 	bl	7990 <_ZN7CommandC2Ev>
    8198:	687a      	ldr	r2, [r7, #4]
    819a:	4b04      	ldr	r3, [pc, #16]	(81ac <_ZN18CommandTestAvancerC2Ev+0x24>)
    819c:	6013      	str	r3, [r2, #0]
{
}
    819e:	687b      	ldr	r3, [r7, #4]
    81a0:	4618      	mov	r0, r3
    81a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    81a6:	46bd      	mov	sp, r7
    81a8:	bd80      	pop	{r7, pc}
    81aa:	46c0      	nop			(mov r8, r8)
    81ac:	0001f9c0 	.word	0x0001f9c0

000081b0 <_ZN15CommandAttendreC1Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    81b0:	b580      	push	{r7, lr}
    81b2:	b082      	sub	sp, #8
    81b4:	af00      	add	r7, sp, #0
    81b6:	6078      	str	r0, [r7, #4]
    81b8:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    81ba:	687b      	ldr	r3, [r7, #4]
    81bc:	4618      	mov	r0, r3
    81be:	f7ff fbe7 	bl	7990 <_ZN7CommandC2Ev>
    81c2:	687a      	ldr	r2, [r7, #4]
    81c4:	4b05      	ldr	r3, [pc, #20]	(81dc <_ZN15CommandAttendreC1Ei+0x2c>)
    81c6:	6013      	str	r3, [r2, #0]
    81c8:	687a      	ldr	r2, [r7, #4]
    81ca:	683b      	ldr	r3, [r7, #0]
    81cc:	6053      	str	r3, [r2, #4]
{
}
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	4618      	mov	r0, r3
    81d2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    81d6:	46bd      	mov	sp, r7
    81d8:	bd80      	pop	{r7, pc}
    81da:	46c0      	nop			(mov r8, r8)
    81dc:	0001f9e8 	.word	0x0001f9e8

000081e0 <_ZN15CommandAttendreC2Ei>:

    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

CommandAttendre::CommandAttendre(int nbUpdates)
    81e0:	b580      	push	{r7, lr}
    81e2:	b082      	sub	sp, #8
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
    81e8:	6039      	str	r1, [r7, #0]
    : Command(), compte(nbUpdates)
    81ea:	687b      	ldr	r3, [r7, #4]
    81ec:	4618      	mov	r0, r3
    81ee:	f7ff fbcf 	bl	7990 <_ZN7CommandC2Ev>
    81f2:	687a      	ldr	r2, [r7, #4]
    81f4:	4b05      	ldr	r3, [pc, #20]	(820c <_ZN15CommandAttendreC2Ei+0x2c>)
    81f6:	6013      	str	r3, [r2, #0]
    81f8:	687a      	ldr	r2, [r7, #4]
    81fa:	683b      	ldr	r3, [r7, #0]
    81fc:	6053      	str	r3, [r2, #4]
{
}
    81fe:	687b      	ldr	r3, [r7, #4]
    8200:	4618      	mov	r0, r3
    8202:	f107 0708 	add.w	r7, r7, #8	; 0x8
    8206:	46bd      	mov	sp, r7
    8208:	bd80      	pop	{r7, pc}
    820a:	46c0      	nop			(mov r8, r8)
    820c:	0001f9e8 	.word	0x0001f9e8

00008210 <_ZN13CommandVirage6updateEv>:
    vitesseLinMax = vitesseLineaireMax;

    m_fini = false;
}

void CommandVirage::update()
    8210:	b590      	push	{r4, r7, lr}
    8212:	b091      	sub	sp, #68
    8214:	af00      	add	r7, sp, #0
    8216:	6178      	str	r0, [r7, #20]
{
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    8218:	4b85      	ldr	r3, [pc, #532]	(8430 <_ZN13CommandVirage6updateEv+0x220>)
    821a:	62bb      	str	r3, [r7, #40]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    821c:	4b85      	ldr	r3, [pc, #532]	(8434 <_ZN13CommandVirage6updateEv+0x224>)
    821e:	62fb      	str	r3, [r7, #44]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    8220:	697b      	ldr	r3, [r7, #20]
    8222:	695b      	ldr	r3, [r3, #20]
    8224:	633b      	str	r3, [r7, #48]

    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    8226:	6b38      	ldr	r0, [r7, #48]
    8228:	6b39      	ldr	r1, [r7, #48]
    822a:	f010 fd29 	bl	18c80 <__aeabi_fmul>
    822e:	4603      	mov	r3, r0
    8230:	461a      	mov	r2, r3
    8232:	697b      	ldr	r3, [r7, #20]
    8234:	699b      	ldr	r3, [r3, #24]
    8236:	4610      	mov	r0, r2
    8238:	4619      	mov	r1, r3
    823a:	f010 fc17 	bl	18a6c <__aeabi_fsub>
    823e:	4603      	mov	r3, r0
    8240:	4618      	mov	r0, r3
    8242:	497d      	ldr	r1, [pc, #500]	(8438 <_ZN13CommandVirage6updateEv+0x228>)
    8244:	f010 fd1c 	bl	18c80 <__aeabi_fmul>
    8248:	4603      	mov	r3, r0
    824a:	4618      	mov	r0, r3
    824c:	6af9      	ldr	r1, [r7, #44]
    824e:	f010 fdcb 	bl	18de8 <__aeabi_fdiv>
    8252:	4603      	mov	r3, r0
    8254:	637b      	str	r3, [r7, #52]

    float angleRestant = diffAngle(angleVise, Odometrie::odometrie->getPos().getAngle());
    8256:	697b      	ldr	r3, [r7, #20]
    8258:	691c      	ldr	r4, [r3, #16]
    825a:	4b78      	ldr	r3, [pc, #480]	(843c <_ZN13CommandVirage6updateEv+0x22c>)
    825c:	681a      	ldr	r2, [r3, #0]
    825e:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8262:	4618      	mov	r0, r3
    8264:	4611      	mov	r1, r2
    8266:	f001 faa3 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    826a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    826e:	4618      	mov	r0, r3
    8270:	f006 fc26 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    8274:	4603      	mov	r3, r0
    8276:	4620      	mov	r0, r4
    8278:	4619      	mov	r1, r3
    827a:	f7ff fdc5 	bl	7e08 <_Z9diffAngleff>
    827e:	4603      	mov	r3, r0
    8280:	63bb      	str	r3, [r7, #56]
    float distanceRestante = abs(rayonCourbure*angleRestant);
    8282:	697b      	ldr	r3, [r7, #20]
    8284:	685b      	ldr	r3, [r3, #4]
    8286:	4618      	mov	r0, r3
    8288:	6bb9      	ldr	r1, [r7, #56]
    828a:	f010 fcf9 	bl	18c80 <__aeabi_fmul>
    828e:	4603      	mov	r3, r0
    8290:	4618      	mov	r0, r3
    8292:	496b      	ldr	r1, [pc, #428]	(8440 <_ZN13CommandVirage6updateEv+0x230>)
    8294:	f010 feae 	bl	18ff4 <__aeabi_fcmpgt>
    8298:	4603      	mov	r3, r0
    829a:	2b00      	cmp	r3, #0
    829c:	d008      	beq.n	82b0 <_ZN13CommandVirage6updateEv+0xa0>
    829e:	697b      	ldr	r3, [r7, #20]
    82a0:	685b      	ldr	r3, [r3, #4]
    82a2:	4618      	mov	r0, r3
    82a4:	6bb9      	ldr	r1, [r7, #56]
    82a6:	f010 fceb 	bl	18c80 <__aeabi_fmul>
    82aa:	4603      	mov	r3, r0
    82ac:	607b      	str	r3, [r7, #4]
    82ae:	e009      	b.n	82c4 <_ZN13CommandVirage6updateEv+0xb4>
    82b0:	697b      	ldr	r3, [r7, #20]
    82b2:	685b      	ldr	r3, [r3, #4]
    82b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    82b8:	4618      	mov	r0, r3
    82ba:	6bb9      	ldr	r1, [r7, #56]
    82bc:	f010 fce0 	bl	18c80 <__aeabi_fmul>
    82c0:	4603      	mov	r3, r0
    82c2:	607b      	str	r3, [r7, #4]
    82c4:	687a      	ldr	r2, [r7, #4]
    82c6:	63fa      	str	r2, [r7, #60]

    // gestion de si la commande a fini
    // si l'angle restant est bon ou si on a dépassé l'angle visé
    if (abs(angleRestant) < M_PI/90.0f || ((angleRestant > 0.0f) != (rayonCourbure > 0.0f)))
    82c8:	6bb8      	ldr	r0, [r7, #56]
    82ca:	495d      	ldr	r1, [pc, #372]	(8440 <_ZN13CommandVirage6updateEv+0x230>)
    82cc:	f010 fe92 	bl	18ff4 <__aeabi_fcmpgt>
    82d0:	4603      	mov	r3, r0
    82d2:	2b00      	cmp	r3, #0
    82d4:	d00f      	beq.n	82f6 <_ZN13CommandVirage6updateEv+0xe6>
    82d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    82da:	70fb      	strb	r3, [r7, #3]
    82dc:	6bb8      	ldr	r0, [r7, #56]
    82de:	4958      	ldr	r1, [pc, #352]	(8440 <_ZN13CommandVirage6updateEv+0x230>)
    82e0:	f010 fe60 	bl	18fa4 <__aeabi_fcmpeq>
    82e4:	4603      	mov	r3, r0
    82e6:	2b00      	cmp	r3, #0
    82e8:	d102      	bne.n	82f0 <_ZN13CommandVirage6updateEv+0xe0>
    82ea:	f04f 0301 	mov.w	r3, #1	; 0x1
    82ee:	70fb      	strb	r3, [r7, #3]
    82f0:	78fb      	ldrb	r3, [r7, #3]
    82f2:	60bb      	str	r3, [r7, #8]
    82f4:	e03e      	b.n	8374 <_ZN13CommandVirage6updateEv+0x164>
    82f6:	6bbb      	ldr	r3, [r7, #56]
    82f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    82fc:	4618      	mov	r0, r3
    82fe:	f010 f84d 	bl	1839c <__aeabi_f2d>
    8302:	4602      	mov	r2, r0
    8304:	460b      	mov	r3, r1
    8306:	4610      	mov	r0, r2
    8308:	4619      	mov	r1, r3
    830a:	a247      	add	r2, pc, #284	(adr r2, 8428 <_ZN13CommandVirage6updateEv+0x218>)
    830c:	ca0c      	ldmia	r2!, {r2, r3}
    830e:	f010 fb09 	bl	18924 <__aeabi_dcmplt>
    8312:	4603      	mov	r3, r0
    8314:	2b00      	cmp	r3, #0
    8316:	d124      	bne.n	8362 <_ZN13CommandVirage6updateEv+0x152>
    8318:	f04f 0300 	mov.w	r3, #0	; 0x0
    831c:	70bb      	strb	r3, [r7, #2]
    831e:	6bb8      	ldr	r0, [r7, #56]
    8320:	4947      	ldr	r1, [pc, #284]	(8440 <_ZN13CommandVirage6updateEv+0x230>)
    8322:	f010 fe67 	bl	18ff4 <__aeabi_fcmpgt>
    8326:	4603      	mov	r3, r0
    8328:	2b00      	cmp	r3, #0
    832a:	d002      	beq.n	8332 <_ZN13CommandVirage6updateEv+0x122>
    832c:	f04f 0301 	mov.w	r3, #1	; 0x1
    8330:	70bb      	strb	r3, [r7, #2]
    8332:	78ba      	ldrb	r2, [r7, #2]
    8334:	613a      	str	r2, [r7, #16]
    8336:	697b      	ldr	r3, [r7, #20]
    8338:	685a      	ldr	r2, [r3, #4]
    833a:	f04f 0300 	mov.w	r3, #0	; 0x0
    833e:	707b      	strb	r3, [r7, #1]
    8340:	4610      	mov	r0, r2
    8342:	493f      	ldr	r1, [pc, #252]	(8440 <_ZN13CommandVirage6updateEv+0x230>)
    8344:	f010 fe56 	bl	18ff4 <__aeabi_fcmpgt>
    8348:	4603      	mov	r3, r0
    834a:	2b00      	cmp	r3, #0
    834c:	d002      	beq.n	8354 <_ZN13CommandVirage6updateEv+0x144>
    834e:	f04f 0301 	mov.w	r3, #1	; 0x1
    8352:	707b      	strb	r3, [r7, #1]
    8354:	787b      	ldrb	r3, [r7, #1]
    8356:	693a      	ldr	r2, [r7, #16]
    8358:	ea82 0303 	eor.w	r3, r2, r3
    835c:	b2db      	uxtb	r3, r3
    835e:	2b00      	cmp	r3, #0
    8360:	d003      	beq.n	836a <_ZN13CommandVirage6updateEv+0x15a>
    8362:	f04f 0301 	mov.w	r3, #1	; 0x1
    8366:	60fb      	str	r3, [r7, #12]
    8368:	e002      	b.n	8370 <_ZN13CommandVirage6updateEv+0x160>
    836a:	f04f 0200 	mov.w	r2, #0	; 0x0
    836e:	60fa      	str	r2, [r7, #12]
    8370:	68fb      	ldr	r3, [r7, #12]
    8372:	60bb      	str	r3, [r7, #8]
    8374:	68ba      	ldr	r2, [r7, #8]
    8376:	2a00      	cmp	r2, #0
    8378:	d003      	beq.n	8382 <_ZN13CommandVirage6updateEv+0x172>
    {
        m_fini = true;
    837a:	697b      	ldr	r3, [r7, #20]
    837c:	f04f 0201 	mov.w	r2, #1	; 0x1
    8380:	771a      	strb	r2, [r3, #28]
    }

    // phase de vitesse max
    if (distanceRestante > distanceVitesseMax)
    8382:	6bf8      	ldr	r0, [r7, #60]
    8384:	6b79      	ldr	r1, [r7, #52]
    8386:	f010 fe35 	bl	18ff4 <__aeabi_fcmpgt>
    838a:	4603      	mov	r3, r0
    838c:	2b00      	cmp	r3, #0
    838e:	d016      	beq.n	83be <_ZN13CommandVirage6updateEv+0x1ae>
    {
            linSpeed += accLinMax;
    8390:	697b      	ldr	r3, [r7, #20]
    8392:	689b      	ldr	r3, [r3, #8]
    8394:	4618      	mov	r0, r3
    8396:	6ab9      	ldr	r1, [r7, #40]
    8398:	f010 fb6a 	bl	18a70 <__addsf3>
    839c:	4603      	mov	r3, r0
    839e:	461a      	mov	r2, r3
    83a0:	697b      	ldr	r3, [r7, #20]
    83a2:	609a      	str	r2, [r3, #8]
        if (linSpeed > vitLinMax)
    83a4:	697b      	ldr	r3, [r7, #20]
    83a6:	689b      	ldr	r3, [r3, #8]
    83a8:	4618      	mov	r0, r3
    83aa:	6b39      	ldr	r1, [r7, #48]
    83ac:	f010 fe22 	bl	18ff4 <__aeabi_fcmpgt>
    83b0:	4603      	mov	r3, r0
    83b2:	2b00      	cmp	r3, #0
    83b4:	d027      	beq.n	8406 <_ZN13CommandVirage6updateEv+0x1f6>
            linSpeed = vitLinMax;
    83b6:	697a      	ldr	r2, [r7, #20]
    83b8:	6b3b      	ldr	r3, [r7, #48]
    83ba:	6093      	str	r3, [r2, #8]
    83bc:	e023      	b.n	8406 <_ZN13CommandVirage6updateEv+0x1f6>
    }

    // phase de décéleration
    else
    {
        linSpeed = sqrt(vFin2+2.0f*distanceRestante*decLinMax);
    83be:	697b      	ldr	r3, [r7, #20]
    83c0:	699c      	ldr	r4, [r3, #24]
    83c2:	6bfb      	ldr	r3, [r7, #60]
    83c4:	4618      	mov	r0, r3
    83c6:	4619      	mov	r1, r3
    83c8:	f010 fb52 	bl	18a70 <__addsf3>
    83cc:	4603      	mov	r3, r0
    83ce:	4618      	mov	r0, r3
    83d0:	6af9      	ldr	r1, [r7, #44]
    83d2:	f010 fc55 	bl	18c80 <__aeabi_fmul>
    83d6:	4603      	mov	r3, r0
    83d8:	4620      	mov	r0, r4
    83da:	4619      	mov	r1, r3
    83dc:	f010 fb48 	bl	18a70 <__addsf3>
    83e0:	4603      	mov	r3, r0
    83e2:	4618      	mov	r0, r3
    83e4:	f00f ffda 	bl	1839c <__aeabi_f2d>
    83e8:	4602      	mov	r2, r0
    83ea:	460b      	mov	r3, r1
    83ec:	4610      	mov	r0, r2
    83ee:	4619      	mov	r1, r3
    83f0:	f014 f864 	bl	1c4bc <sqrt>
    83f4:	4602      	mov	r2, r0
    83f6:	460b      	mov	r3, r1
    83f8:	4610      	mov	r0, r2
    83fa:	4619      	mov	r1, r3
    83fc:	f010 fae2 	bl	189c4 <__aeabi_d2f>
    8400:	4602      	mov	r2, r0
    8402:	697b      	ldr	r3, [r7, #20]
    8404:	609a      	str	r2, [r3, #8]
    }

    // calcul de la vitesse angulaire
    angSpeed = linSpeed/rayonCourbure;
    8406:	697b      	ldr	r3, [r7, #20]
    8408:	689a      	ldr	r2, [r3, #8]
    840a:	697b      	ldr	r3, [r7, #20]
    840c:	685b      	ldr	r3, [r3, #4]
    840e:	4610      	mov	r0, r2
    8410:	4619      	mov	r1, r3
    8412:	f010 fce9 	bl	18de8 <__aeabi_fdiv>
    8416:	4603      	mov	r3, r0
    8418:	461a      	mov	r2, r3
    841a:	697b      	ldr	r3, [r7, #20]
    841c:	60da      	str	r2, [r3, #12]
}
    841e:	f107 0744 	add.w	r7, r7, #68	; 0x44
    8422:	46bd      	mov	sp, r7
    8424:	bd90      	pop	{r4, r7, pc}
    8426:	46c0      	nop			(mov r8, r8)
    8428:	a2529d39 	.word	0xa2529d39
    842c:	3fa1df46 	.word	0x3fa1df46
    8430:	3ccccccd 	.word	0x3ccccccd
    8434:	3ca3d70a 	.word	0x3ca3d70a
    8438:	3f000000 	.word	0x3f000000
    843c:	20000570 	.word	0x20000570
    8440:	00000000 	.word	0x00000000

00008444 <_ZN13CommandVirageC1Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8444:	b580      	push	{r7, lr}
    8446:	b088      	sub	sp, #32
    8448:	af00      	add	r7, sp, #0
    844a:	60f8      	str	r0, [r7, #12]
    844c:	60b9      	str	r1, [r7, #8]
    844e:	607a      	str	r2, [r7, #4]
    8450:	603b      	str	r3, [r7, #0]
    8452:	68fb      	ldr	r3, [r7, #12]
    8454:	4618      	mov	r0, r3
    8456:	f7ff fa9b 	bl	7990 <_ZN7CommandC2Ev>
    845a:	68fa      	ldr	r2, [r7, #12]
    845c:	4b26      	ldr	r3, [pc, #152]	(84f8 <_ZN13CommandVirageC1Effff+0xb4>)
    845e:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8460:	6878      	ldr	r0, [r7, #4]
    8462:	4926      	ldr	r1, [pc, #152]	(84fc <_ZN13CommandVirageC1Effff+0xb8>)
    8464:	f010 fdc6 	bl	18ff4 <__aeabi_fcmpgt>
    8468:	4603      	mov	r3, r0
    846a:	2b00      	cmp	r3, #0
    846c:	d003      	beq.n	8476 <_ZN13CommandVirageC1Effff+0x32>
        rayonCourbure = rayon;
    846e:	68fa      	ldr	r2, [r7, #12]
    8470:	68bb      	ldr	r3, [r7, #8]
    8472:	6053      	str	r3, [r2, #4]
    8474:	e004      	b.n	8480 <_ZN13CommandVirageC1Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8476:	68bb      	ldr	r3, [r7, #8]
    8478:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    847c:	68fb      	ldr	r3, [r7, #12]
    847e:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8480:	4b1f      	ldr	r3, [pc, #124]	(8500 <_ZN13CommandVirageC1Effff+0xbc>)
    8482:	681b      	ldr	r3, [r3, #0]
    8484:	4618      	mov	r0, r3
    8486:	f001 f97b 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    848a:	4602      	mov	r2, r0
    848c:	68fb      	ldr	r3, [r7, #12]
    848e:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8490:	4b1b      	ldr	r3, [pc, #108]	(8500 <_ZN13CommandVirageC1Effff+0xbc>)
    8492:	681b      	ldr	r3, [r3, #0]
    8494:	4618      	mov	r0, r3
    8496:	f001 f967 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    849a:	4602      	mov	r2, r0
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    84a0:	4b17      	ldr	r3, [pc, #92]	(8500 <_ZN13CommandVirageC1Effff+0xbc>)
    84a2:	681a      	ldr	r2, [r3, #0]
    84a4:	f107 0314 	add.w	r3, r7, #20	; 0x14
    84a8:	4618      	mov	r0, r3
    84aa:	4611      	mov	r1, r2
    84ac:	f001 f980 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    84b0:	f107 0314 	add.w	r3, r7, #20	; 0x14
    84b4:	4618      	mov	r0, r3
    84b6:	f006 fb03 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    84ba:	4603      	mov	r3, r0
    84bc:	4618      	mov	r0, r3
    84be:	6879      	ldr	r1, [r7, #4]
    84c0:	f010 fad6 	bl	18a70 <__addsf3>
    84c4:	4603      	mov	r3, r0
    84c6:	461a      	mov	r2, r3
    84c8:	68fb      	ldr	r3, [r7, #12]
    84ca:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    84cc:	6ab8      	ldr	r0, [r7, #40]
    84ce:	6ab9      	ldr	r1, [r7, #40]
    84d0:	f010 fbd6 	bl	18c80 <__aeabi_fmul>
    84d4:	4603      	mov	r3, r0
    84d6:	461a      	mov	r2, r3
    84d8:	68fb      	ldr	r3, [r7, #12]
    84da:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    84dc:	68fa      	ldr	r2, [r7, #12]
    84de:	683b      	ldr	r3, [r7, #0]
    84e0:	6153      	str	r3, [r2, #20]

    m_fini = false;
    84e2:	68fa      	ldr	r2, [r7, #12]
    84e4:	f04f 0300 	mov.w	r3, #0	; 0x0
    84e8:	7713      	strb	r3, [r2, #28]
}
    84ea:	68fb      	ldr	r3, [r7, #12]
    84ec:	4618      	mov	r0, r3
    84ee:	f107 0720 	add.w	r7, r7, #32	; 0x20
    84f2:	46bd      	mov	sp, r7
    84f4:	bd80      	pop	{r7, pc}
    84f6:	46c0      	nop			(mov r8, r8)
    84f8:	0001fa10 	.word	0x0001fa10
    84fc:	00000000 	.word	0x00000000
    8500:	20000570 	.word	0x20000570

00008504 <_ZN13CommandVirageC2Effff>:
    ////////////////////////////////


// rayon > 0
// angle > 0 : vers la gauche, angle < 0 : vers la droite
CommandVirage::CommandVirage(float rayon, float angle, float vitesseLineaireMax, float vitesseFin)
    8504:	b580      	push	{r7, lr}
    8506:	b088      	sub	sp, #32
    8508:	af00      	add	r7, sp, #0
    850a:	60f8      	str	r0, [r7, #12]
    850c:	60b9      	str	r1, [r7, #8]
    850e:	607a      	str	r2, [r7, #4]
    8510:	603b      	str	r3, [r7, #0]
    8512:	68fb      	ldr	r3, [r7, #12]
    8514:	4618      	mov	r0, r3
    8516:	f7ff fa3b 	bl	7990 <_ZN7CommandC2Ev>
    851a:	68fa      	ldr	r2, [r7, #12]
    851c:	4b26      	ldr	r3, [pc, #152]	(85b8 <_ZN13CommandVirageC2Effff+0xb4>)
    851e:	6013      	str	r3, [r2, #0]
{
    if (angle > 0.0f)
    8520:	6878      	ldr	r0, [r7, #4]
    8522:	4926      	ldr	r1, [pc, #152]	(85bc <_ZN13CommandVirageC2Effff+0xb8>)
    8524:	f010 fd66 	bl	18ff4 <__aeabi_fcmpgt>
    8528:	4603      	mov	r3, r0
    852a:	2b00      	cmp	r3, #0
    852c:	d003      	beq.n	8536 <_ZN13CommandVirageC2Effff+0x32>
        rayonCourbure = rayon;
    852e:	68fa      	ldr	r2, [r7, #12]
    8530:	68bb      	ldr	r3, [r7, #8]
    8532:	6053      	str	r3, [r2, #4]
    8534:	e004      	b.n	8540 <_ZN13CommandVirageC2Effff+0x3c>
    else
        rayonCourbure = -rayon;
    8536:	68bb      	ldr	r3, [r7, #8]
    8538:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    853c:	68fb      	ldr	r3, [r7, #12]
    853e:	605a      	str	r2, [r3, #4]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8540:	4b1f      	ldr	r3, [pc, #124]	(85c0 <_ZN13CommandVirageC2Effff+0xbc>)
    8542:	681b      	ldr	r3, [r3, #0]
    8544:	4618      	mov	r0, r3
    8546:	f001 f91b 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    854a:	4602      	mov	r2, r0
    854c:	68fb      	ldr	r3, [r7, #12]
    854e:	609a      	str	r2, [r3, #8]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8550:	4b1b      	ldr	r3, [pc, #108]	(85c0 <_ZN13CommandVirageC2Effff+0xbc>)
    8552:	681b      	ldr	r3, [r3, #0]
    8554:	4618      	mov	r0, r3
    8556:	f001 f907 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    855a:	4602      	mov	r2, r0
    855c:	68fb      	ldr	r3, [r7, #12]
    855e:	60da      	str	r2, [r3, #12]
    angleVise = angle + Odometrie::odometrie->getPos().getAngle();
    8560:	4b17      	ldr	r3, [pc, #92]	(85c0 <_ZN13CommandVirageC2Effff+0xbc>)
    8562:	681a      	ldr	r2, [r3, #0]
    8564:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8568:	4618      	mov	r0, r3
    856a:	4611      	mov	r1, r2
    856c:	f001 f920 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    8570:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8574:	4618      	mov	r0, r3
    8576:	f006 faa3 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    857a:	4603      	mov	r3, r0
    857c:	4618      	mov	r0, r3
    857e:	6879      	ldr	r1, [r7, #4]
    8580:	f010 fa76 	bl	18a70 <__addsf3>
    8584:	4603      	mov	r3, r0
    8586:	461a      	mov	r2, r3
    8588:	68fb      	ldr	r3, [r7, #12]
    858a:	611a      	str	r2, [r3, #16]
    vFin2 = vitesseFin*vitesseFin;
    858c:	6ab8      	ldr	r0, [r7, #40]
    858e:	6ab9      	ldr	r1, [r7, #40]
    8590:	f010 fb76 	bl	18c80 <__aeabi_fmul>
    8594:	4603      	mov	r3, r0
    8596:	461a      	mov	r2, r3
    8598:	68fb      	ldr	r3, [r7, #12]
    859a:	619a      	str	r2, [r3, #24]
    vitesseLinMax = vitesseLineaireMax;
    859c:	68fa      	ldr	r2, [r7, #12]
    859e:	683b      	ldr	r3, [r7, #0]
    85a0:	6153      	str	r3, [r2, #20]

    m_fini = false;
    85a2:	68fa      	ldr	r2, [r7, #12]
    85a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    85a8:	7713      	strb	r3, [r2, #28]
}
    85aa:	68fb      	ldr	r3, [r7, #12]
    85ac:	4618      	mov	r0, r3
    85ae:	f107 0720 	add.w	r7, r7, #32	; 0x20
    85b2:	46bd      	mov	sp, r7
    85b4:	bd80      	pop	{r7, pc}
    85b6:	46c0      	nop			(mov r8, r8)
    85b8:	0001fa10 	.word	0x0001fa10
    85bc:	00000000 	.word	0x00000000
    85c0:	20000570 	.word	0x20000570

000085c4 <_ZN13CommandAllerA11resetSpeedsEv>:
                linSpeed = linSpeedVisee;
        }
    }
}

void CommandAllerA::resetSpeeds()
    85c4:	b580      	push	{r7, lr}
    85c6:	b082      	sub	sp, #8
    85c8:	af00      	add	r7, sp, #0
    85ca:	6078      	str	r0, [r7, #4]
{
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    85cc:	4b09      	ldr	r3, [pc, #36]	(85f4 <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    85ce:	681b      	ldr	r3, [r3, #0]
    85d0:	4618      	mov	r0, r3
    85d2:	f001 f8d5 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    85d6:	4602      	mov	r2, r0
    85d8:	687b      	ldr	r3, [r7, #4]
    85da:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    85dc:	4b05      	ldr	r3, [pc, #20]	(85f4 <_ZN13CommandAllerA11resetSpeedsEv+0x30>)
    85de:	681b      	ldr	r3, [r3, #0]
    85e0:	4618      	mov	r0, r3
    85e2:	f001 f8c1 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    85e6:	4602      	mov	r2, r0
    85e8:	687b      	ldr	r3, [r7, #4]
    85ea:	61da      	str	r2, [r3, #28]
}
    85ec:	f107 0708 	add.w	r7, r7, #8	; 0x8
    85f0:	46bd      	mov	sp, r7
    85f2:	bd80      	pop	{r7, pc}
    85f4:	20000570 	.word	0x20000570

000085f8 <_ZN18CommandTournerVers6updateEv>:
    signeAngle = SGN_UNDEF;

    maxAngSpeed = maxSpeed;
}

void CommandTournerVers::update()
    85f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    85fc:	b096      	sub	sp, #88
    85fe:	af00      	add	r7, sp, #0
    8600:	60f8      	str	r0, [r7, #12]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    8602:	4bbe      	ldr	r3, [pc, #760]	(88fc <_ZN18CommandTournerVers6updateEv+0x304>)
    8604:	63fb      	str	r3, [r7, #60]
    float vitAngMax = maxAngSpeed;
    8606:	68fb      	ldr	r3, [r7, #12]
    8608:	69db      	ldr	r3, [r3, #28]
    860a:	643b      	str	r3, [r7, #64]
    // float angleVitesseMax = M_PI/6.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    860c:	6c38      	ldr	r0, [r7, #64]
    860e:	49bc      	ldr	r1, [pc, #752]	(8900 <_ZN18CommandTournerVers6updateEv+0x308>)
    8610:	f010 fb36 	bl	18c80 <__aeabi_fmul>
    8614:	4603      	mov	r3, r0
    8616:	4618      	mov	r0, r3
    8618:	6c39      	ldr	r1, [r7, #64]
    861a:	f010 fb31 	bl	18c80 <__aeabi_fmul>
    861e:	4603      	mov	r3, r0
    8620:	4618      	mov	r0, r3
    8622:	6bf9      	ldr	r1, [r7, #60]
    8624:	f010 fbe0 	bl	18de8 <__aeabi_fdiv>
    8628:	4603      	mov	r3, r0
    862a:	647b      	str	r3, [r7, #68]
    float angle = Odometrie::odometrie->getPos().getAngle();
    862c:	4bb5      	ldr	r3, [pc, #724]	(8904 <_ZN18CommandTournerVers6updateEv+0x30c>)
    862e:	681a      	ldr	r2, [r3, #0]
    8630:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8634:	4618      	mov	r0, r3
    8636:	4611      	mov	r1, r2
    8638:	f001 f8ba 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    863c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    8640:	4618      	mov	r0, r3
    8642:	f006 fa3d 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    8646:	4603      	mov	r3, r0
    8648:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    864a:	4bae      	ldr	r3, [pc, #696]	(8904 <_ZN18CommandTournerVers6updateEv+0x30c>)
    864c:	681a      	ldr	r2, [r3, #0]
    864e:	f107 0330 	add.w	r3, r7, #48	; 0x30
    8652:	4618      	mov	r0, r3
    8654:	4611      	mov	r1, r2
    8656:	f001 f8ab 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    865a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    865e:	f107 0230 	add.w	r2, r7, #48	; 0x30
    8662:	4618      	mov	r0, r3
    8664:	4611      	mov	r1, r2
    8666:	f006 fa19 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    float angleVise;
    if (!useAngle)
    866a:	68fb      	ldr	r3, [r7, #12]
    866c:	7d5b      	ldrb	r3, [r3, #21]
    866e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    8672:	b2db      	uxtb	r3, r3
    8674:	2b00      	cmp	r3, #0
    8676:	d02c      	beq.n	86d2 <_ZN18CommandTournerVers6updateEv+0xda>
    {
        Position delta = but-pos;
    8678:	68fb      	ldr	r3, [r7, #12]
    867a:	f103 0104 	add.w	r1, r3, #4	; 0x4
    867e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8682:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8686:	4618      	mov	r0, r3
    8688:	f006 f83a 	bl	e700 <_ZNK8PositionmiERKS_>
        angleVise = atan2(delta.getY(),delta.getX());
    868c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8690:	4618      	mov	r0, r3
    8692:	f005 ffe7 	bl	e664 <_ZNK8Position4getYEv>
    8696:	4603      	mov	r3, r0
    8698:	4618      	mov	r0, r3
    869a:	f00f fe7f 	bl	1839c <__aeabi_f2d>
    869e:	4604      	mov	r4, r0
    86a0:	460d      	mov	r5, r1
    86a2:	f107 0314 	add.w	r3, r7, #20	; 0x14
    86a6:	4618      	mov	r0, r3
    86a8:	f005 ffd0 	bl	e64c <_ZNK8Position4getXEv>
    86ac:	4603      	mov	r3, r0
    86ae:	4618      	mov	r0, r3
    86b0:	f00f fe74 	bl	1839c <__aeabi_f2d>
    86b4:	4602      	mov	r2, r0
    86b6:	460b      	mov	r3, r1
    86b8:	4620      	mov	r0, r4
    86ba:	4629      	mov	r1, r5
    86bc:	f013 fef8 	bl	1c4b0 <atan2>
    86c0:	4602      	mov	r2, r0
    86c2:	460b      	mov	r3, r1
    86c4:	4610      	mov	r0, r2
    86c6:	4619      	mov	r1, r3
    86c8:	f010 f97c 	bl	189c4 <__aeabi_d2f>
    86cc:	4603      	mov	r3, r0
    86ce:	64fb      	str	r3, [r7, #76]
    86d0:	e002      	b.n	86d8 <_ZN18CommandTournerVers6updateEv+0xe0>
    }
    else
    {
        angleVise = butAngle;
    86d2:	68fb      	ldr	r3, [r7, #12]
    86d4:	691b      	ldr	r3, [r3, #16]
    86d6:	64fb      	str	r3, [r7, #76]
    }
    float diffAng = diffAngle(angleVise,angle);
    86d8:	6cf8      	ldr	r0, [r7, #76]
    86da:	6cb9      	ldr	r1, [r7, #72]
    86dc:	f7ff fb94 	bl	7e08 <_Z9diffAngleff>
    86e0:	4603      	mov	r3, r0
    86e2:	653b      	str	r3, [r7, #80]

    // Check sharps
    StrategieV2::setTourneSurSoiMeme(true);
    86e4:	f04f 0001 	mov.w	r0, #1	; 0x1
    86e8:	f00b fb24 	bl	13d34 <_ZN11StrategieV219setTourneSurSoiMemeEb>


    //qDebug() << abs(angleVise)*180./3.14 << angleVitesseMax;

    if (abs(diffAng) > angleVitesseMax)
    86ec:	6d38      	ldr	r0, [r7, #80]
    86ee:	4986      	ldr	r1, [pc, #536]	(8908 <_ZN18CommandTournerVers6updateEv+0x310>)
    86f0:	f010 fc80 	bl	18ff4 <__aeabi_fcmpgt>
    86f4:	4603      	mov	r3, r0
    86f6:	2b00      	cmp	r3, #0
    86f8:	d00f      	beq.n	871a <_ZN18CommandTournerVers6updateEv+0x122>
    86fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    86fe:	71fb      	strb	r3, [r7, #7]
    8700:	6d38      	ldr	r0, [r7, #80]
    8702:	4981      	ldr	r1, [pc, #516]	(8908 <_ZN18CommandTournerVers6updateEv+0x310>)
    8704:	f010 fc4e 	bl	18fa4 <__aeabi_fcmpeq>
    8708:	4603      	mov	r3, r0
    870a:	2b00      	cmp	r3, #0
    870c:	d102      	bne.n	8714 <_ZN18CommandTournerVers6updateEv+0x11c>
    870e:	f04f 0301 	mov.w	r3, #1	; 0x1
    8712:	71fb      	strb	r3, [r7, #7]
    8714:	79fb      	ldrb	r3, [r7, #7]
    8716:	60bb      	str	r3, [r7, #8]
    8718:	e011      	b.n	873e <_ZN18CommandTournerVers6updateEv+0x146>
    871a:	6d3b      	ldr	r3, [r7, #80]
    871c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    8720:	f04f 0300 	mov.w	r3, #0	; 0x0
    8724:	71bb      	strb	r3, [r7, #6]
    8726:	4610      	mov	r0, r2
    8728:	6c79      	ldr	r1, [r7, #68]
    872a:	f010 fc63 	bl	18ff4 <__aeabi_fcmpgt>
    872e:	4603      	mov	r3, r0
    8730:	2b00      	cmp	r3, #0
    8732:	d002      	beq.n	873a <_ZN18CommandTournerVers6updateEv+0x142>
    8734:	f04f 0301 	mov.w	r3, #1	; 0x1
    8738:	71bb      	strb	r3, [r7, #6]
    873a:	79bb      	ldrb	r3, [r7, #6]
    873c:	60bb      	str	r3, [r7, #8]
    873e:	68bb      	ldr	r3, [r7, #8]
    8740:	2b00      	cmp	r3, #0
    8742:	f000 80c9 	beq.w	88d8 <_ZN18CommandTournerVers6updateEv+0x2e0>
    {
        bool hasToDecelerate = (fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    8746:	6d3b      	ldr	r3, [r7, #80]
    8748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    874c:	4618      	mov	r0, r3
    874e:	f00f fe25 	bl	1839c <__aeabi_f2d>
    8752:	4680      	mov	r8, r0
    8754:	4689      	mov	r9, r1
    8756:	68fb      	ldr	r3, [r7, #12]
    8758:	68da      	ldr	r2, [r3, #12]
    875a:	68fb      	ldr	r3, [r7, #12]
    875c:	68db      	ldr	r3, [r3, #12]
    875e:	4610      	mov	r0, r2
    8760:	4619      	mov	r1, r3
    8762:	f010 fa8d 	bl	18c80 <__aeabi_fmul>
    8766:	4603      	mov	r3, r0
    8768:	4618      	mov	r0, r3
    876a:	6bf9      	ldr	r1, [r7, #60]
    876c:	f010 fb3c 	bl	18de8 <__aeabi_fdiv>
    8770:	4603      	mov	r3, r0
    8772:	4618      	mov	r0, r3
    8774:	f00f fe12 	bl	1839c <__aeabi_f2d>
    8778:	4604      	mov	r4, r0
    877a:	460d      	mov	r5, r1
    877c:	6bf8      	ldr	r0, [r7, #60]
    877e:	f00f fe0d 	bl	1839c <__aeabi_f2d>
    8782:	4602      	mov	r2, r0
    8784:	460b      	mov	r3, r1
    8786:	4610      	mov	r0, r2
    8788:	4619      	mov	r1, r3
    878a:	f04f 0200 	mov.w	r2, #0	; 0x0
    878e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    8792:	f00f fe57 	bl	18444 <__aeabi_dmul>
    8796:	4602      	mov	r2, r0
    8798:	460b      	mov	r3, r1
    879a:	4620      	mov	r0, r4
    879c:	4629      	mov	r1, r5
    879e:	f00f fc9f 	bl	180e0 <__adddf3>
    87a2:	4602      	mov	r2, r0
    87a4:	460b      	mov	r3, r1
    87a6:	4614      	mov	r4, r2
    87a8:	461d      	mov	r5, r3
    87aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    87ae:	f887 3057 	strb.w	r3, [r7, #87]
    87b2:	4640      	mov	r0, r8
    87b4:	4649      	mov	r1, r9
    87b6:	4622      	mov	r2, r4
    87b8:	462b      	mov	r3, r5
    87ba:	f010 f8b3 	bl	18924 <__aeabi_dcmplt>
    87be:	4603      	mov	r3, r0
    87c0:	2b00      	cmp	r3, #0
    87c2:	d003      	beq.n	87cc <_ZN18CommandTournerVers6updateEv+0x1d4>
    87c4:	f04f 0301 	mov.w	r3, #1	; 0x1
    87c8:	f887 3057 	strb.w	r3, [r7, #87]
        if (diffAng > 0)
    87cc:	6d38      	ldr	r0, [r7, #80]
    87ce:	494e      	ldr	r1, [pc, #312]	(8908 <_ZN18CommandTournerVers6updateEv+0x310>)
    87d0:	f010 fc10 	bl	18ff4 <__aeabi_fcmpgt>
    87d4:	4603      	mov	r3, r0
    87d6:	2b00      	cmp	r3, #0
    87d8:	d03c      	beq.n	8854 <_ZN18CommandTournerVers6updateEv+0x25c>
        {
            if (!hasToDecelerate)
    87da:	f897 3057 	ldrb.w	r3, [r7, #87]
    87de:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    87e2:	b2db      	uxtb	r3, r3
    87e4:	2b00      	cmp	r3, #0
    87e6:	d00a      	beq.n	87fe <_ZN18CommandTournerVers6updateEv+0x206>
                angSpeed += accAngMax;
    87e8:	68fb      	ldr	r3, [r7, #12]
    87ea:	68db      	ldr	r3, [r3, #12]
    87ec:	4618      	mov	r0, r3
    87ee:	6bf9      	ldr	r1, [r7, #60]
    87f0:	f010 f93e 	bl	18a70 <__addsf3>
    87f4:	4603      	mov	r3, r0
    87f6:	461a      	mov	r2, r3
    87f8:	68fb      	ldr	r3, [r7, #12]
    87fa:	60da      	str	r2, [r3, #12]
    87fc:	e01d      	b.n	883a <_ZN18CommandTournerVers6updateEv+0x242>
            else if (angSpeed > accAngMax*2)
    87fe:	68fb      	ldr	r3, [r7, #12]
    8800:	68dc      	ldr	r4, [r3, #12]
    8802:	6bfb      	ldr	r3, [r7, #60]
    8804:	4618      	mov	r0, r3
    8806:	4619      	mov	r1, r3
    8808:	f010 f932 	bl	18a70 <__addsf3>
    880c:	4603      	mov	r3, r0
    880e:	4620      	mov	r0, r4
    8810:	4619      	mov	r1, r3
    8812:	f010 fbef 	bl	18ff4 <__aeabi_fcmpgt>
    8816:	4603      	mov	r3, r0
    8818:	2b00      	cmp	r3, #0
    881a:	d00e      	beq.n	883a <_ZN18CommandTournerVers6updateEv+0x242>
                angSpeed -= accAngMax*2;
    881c:	68fb      	ldr	r3, [r7, #12]
    881e:	68dc      	ldr	r4, [r3, #12]
    8820:	6bf8      	ldr	r0, [r7, #60]
    8822:	493a      	ldr	r1, [pc, #232]	(890c <_ZN18CommandTournerVers6updateEv+0x314>)
    8824:	f010 fa2c 	bl	18c80 <__aeabi_fmul>
    8828:	4603      	mov	r3, r0
    882a:	4620      	mov	r0, r4
    882c:	4619      	mov	r1, r3
    882e:	f010 f91f 	bl	18a70 <__addsf3>
    8832:	4603      	mov	r3, r0
    8834:	461a      	mov	r2, r3
    8836:	68fb      	ldr	r3, [r7, #12]
    8838:	60da      	str	r2, [r3, #12]

            if (angSpeed > vitAngMax)
    883a:	68fb      	ldr	r3, [r7, #12]
    883c:	68db      	ldr	r3, [r3, #12]
    883e:	4618      	mov	r0, r3
    8840:	6c39      	ldr	r1, [r7, #64]
    8842:	f010 fbd7 	bl	18ff4 <__aeabi_fcmpgt>
    8846:	4603      	mov	r3, r0
    8848:	2b00      	cmp	r3, #0
    884a:	d052      	beq.n	88f2 <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = vitAngMax;
    884c:	68fa      	ldr	r2, [r7, #12]
    884e:	6c3b      	ldr	r3, [r7, #64]
    8850:	60d3      	str	r3, [r2, #12]
    8852:	e04e      	b.n	88f2 <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
        else
        {
            if (!hasToDecelerate)
    8854:	f897 3057 	ldrb.w	r3, [r7, #87]
    8858:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    885c:	b2db      	uxtb	r3, r3
    885e:	2b00      	cmp	r3, #0
    8860:	d00a      	beq.n	8878 <_ZN18CommandTournerVers6updateEv+0x280>
                angSpeed -= accAngMax;
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	68db      	ldr	r3, [r3, #12]
    8866:	4618      	mov	r0, r3
    8868:	6bf9      	ldr	r1, [r7, #60]
    886a:	f010 f8ff 	bl	18a6c <__aeabi_fsub>
    886e:	4603      	mov	r3, r0
    8870:	461a      	mov	r2, r3
    8872:	68fb      	ldr	r3, [r7, #12]
    8874:	60da      	str	r2, [r3, #12]
    8876:	e01d      	b.n	88b4 <_ZN18CommandTournerVers6updateEv+0x2bc>
            else if (angSpeed < -accAngMax*2)
    8878:	68fb      	ldr	r3, [r7, #12]
    887a:	68dc      	ldr	r4, [r3, #12]
    887c:	6bf8      	ldr	r0, [r7, #60]
    887e:	4923      	ldr	r1, [pc, #140]	(890c <_ZN18CommandTournerVers6updateEv+0x314>)
    8880:	f010 f9fe 	bl	18c80 <__aeabi_fmul>
    8884:	4603      	mov	r3, r0
    8886:	4620      	mov	r0, r4
    8888:	4619      	mov	r1, r3
    888a:	f010 fb95 	bl	18fb8 <__aeabi_fcmplt>
    888e:	4603      	mov	r3, r0
    8890:	2b00      	cmp	r3, #0
    8892:	d00f      	beq.n	88b4 <_ZN18CommandTournerVers6updateEv+0x2bc>
                angSpeed += accAngMax*2;
    8894:	68fb      	ldr	r3, [r7, #12]
    8896:	68dc      	ldr	r4, [r3, #12]
    8898:	6bfb      	ldr	r3, [r7, #60]
    889a:	4618      	mov	r0, r3
    889c:	4619      	mov	r1, r3
    889e:	f010 f8e7 	bl	18a70 <__addsf3>
    88a2:	4603      	mov	r3, r0
    88a4:	4620      	mov	r0, r4
    88a6:	4619      	mov	r1, r3
    88a8:	f010 f8e2 	bl	18a70 <__addsf3>
    88ac:	4603      	mov	r3, r0
    88ae:	461a      	mov	r2, r3
    88b0:	68fb      	ldr	r3, [r7, #12]
    88b2:	60da      	str	r2, [r3, #12]

            if (angSpeed < -vitAngMax)
    88b4:	68fb      	ldr	r3, [r7, #12]
    88b6:	68da      	ldr	r2, [r3, #12]
    88b8:	6c3b      	ldr	r3, [r7, #64]
    88ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    88be:	4610      	mov	r0, r2
    88c0:	4619      	mov	r1, r3
    88c2:	f010 fb79 	bl	18fb8 <__aeabi_fcmplt>
    88c6:	4603      	mov	r3, r0
    88c8:	2b00      	cmp	r3, #0
    88ca:	d012      	beq.n	88f2 <_ZN18CommandTournerVers6updateEv+0x2fa>
                angSpeed = -vitAngMax;
    88cc:	6c3b      	ldr	r3, [r7, #64]
    88ce:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    88d2:	68fb      	ldr	r3, [r7, #12]
    88d4:	60da      	str	r2, [r3, #12]
    88d6:	e00c      	b.n	88f2 <_ZN18CommandTournerVers6updateEv+0x2fa>
        }
    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    88d8:	6d38      	ldr	r0, [r7, #80]
    88da:	6c39      	ldr	r1, [r7, #64]
    88dc:	f010 f9d0 	bl	18c80 <__aeabi_fmul>
    88e0:	4603      	mov	r3, r0
    88e2:	4618      	mov	r0, r3
    88e4:	6c79      	ldr	r1, [r7, #68]
    88e6:	f010 fa7f 	bl	18de8 <__aeabi_fdiv>
    88ea:	4603      	mov	r3, r0
    88ec:	461a      	mov	r2, r3
    88ee:	68fb      	ldr	r3, [r7, #12]
    88f0:	60da      	str	r2, [r3, #12]
            angSpeed = sqrt(2.0f*diff*accAngMax);
        else
            angSpeed = -sqrt(-2.0f*diff*accAngMax);
    }*/

}
    88f2:	f107 0758 	add.w	r7, r7, #88	; 0x58
    88f6:	46bd      	mov	sp, r7
    88f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    88fc:	3983126f 	.word	0x3983126f
    8900:	3f000000 	.word	0x3f000000
    8904:	20000570 	.word	0x20000570
    8908:	00000000 	.word	0x00000000
    890c:	c0000000 	.word	0xc0000000

00008910 <_ZN18CommandTournerVersC1Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8910:	b590      	push	{r4, r7, lr}
    8912:	b087      	sub	sp, #28
    8914:	af00      	add	r7, sp, #0
    8916:	60f8      	str	r0, [r7, #12]
    8918:	60b9      	str	r1, [r7, #8]
    891a:	607a      	str	r2, [r7, #4]
    : Command()
    891c:	68fb      	ldr	r3, [r7, #12]
    891e:	4618      	mov	r0, r3
    8920:	f7ff f836 	bl	7990 <_ZN7CommandC2Ev>
    8924:	68fa      	ldr	r2, [r7, #12]
    8926:	4b19      	ldr	r3, [pc, #100]	(898c <_ZN18CommandTournerVersC1Eff+0x7c>)
    8928:	6013      	str	r3, [r2, #0]
    892a:	68fb      	ldr	r3, [r7, #12]
    892c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8930:	4618      	mov	r0, r3
    8932:	f005 fe4f 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = Position();
    8936:	68fb      	ldr	r3, [r7, #12]
    8938:	f103 0404 	add.w	r4, r3, #4	; 0x4
    893c:	f107 0310 	add.w	r3, r7, #16	; 0x10
    8940:	4618      	mov	r0, r3
    8942:	f005 fe47 	bl	e5d4 <_ZN8PositionC1Ev>
    8946:	4620      	mov	r0, r4
    8948:	f107 0310 	add.w	r3, r7, #16	; 0x10
    894c:	e893 0006 	ldmia.w	r3, {r1, r2}
    8950:	f005 fefc 	bl	e74c <_ZN8PositionaSES_>
    butAngle = a;
    8954:	68fa      	ldr	r2, [r7, #12]
    8956:	68bb      	ldr	r3, [r7, #8]
    8958:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    895a:	68fa      	ldr	r2, [r7, #12]
    895c:	4b0c      	ldr	r3, [pc, #48]	(8990 <_ZN18CommandTournerVersC1Eff+0x80>)
    895e:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    8960:	68fa      	ldr	r2, [r7, #12]
    8962:	f04f 0301 	mov.w	r3, #1	; 0x1
    8966:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8968:	68fa      	ldr	r2, [r7, #12]
    896a:	f04f 0300 	mov.w	r3, #0	; 0x0
    896e:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8970:	68fa      	ldr	r2, [r7, #12]
    8972:	f04f 0300 	mov.w	r3, #0	; 0x0
    8976:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8978:	68fa      	ldr	r2, [r7, #12]
    897a:	687b      	ldr	r3, [r7, #4]
    897c:	61d3      	str	r3, [r2, #28]
}
    897e:	68fb      	ldr	r3, [r7, #12]
    8980:	4618      	mov	r0, r3
    8982:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    8986:	46bd      	mov	sp, r7
    8988:	bd90      	pop	{r4, r7, pc}
    898a:	46c0      	nop			(mov r8, r8)
    898c:	0001fa38 	.word	0x0001fa38
    8990:	00000000 	.word	0x00000000

00008994 <_ZN18CommandTournerVersC2Eff>:
    maxAngSpeed = maxSpeed;
}

//#include <QDebug>

CommandTournerVers::CommandTournerVers(Angle a, float maxSpeed)
    8994:	b590      	push	{r4, r7, lr}
    8996:	b087      	sub	sp, #28
    8998:	af00      	add	r7, sp, #0
    899a:	60f8      	str	r0, [r7, #12]
    899c:	60b9      	str	r1, [r7, #8]
    899e:	607a      	str	r2, [r7, #4]
    : Command()
    89a0:	68fb      	ldr	r3, [r7, #12]
    89a2:	4618      	mov	r0, r3
    89a4:	f7fe fff4 	bl	7990 <_ZN7CommandC2Ev>
    89a8:	68fa      	ldr	r2, [r7, #12]
    89aa:	4b19      	ldr	r3, [pc, #100]	(8a10 <_ZN18CommandTournerVersC2Eff+0x7c>)
    89ac:	6013      	str	r3, [r2, #0]
    89ae:	68fb      	ldr	r3, [r7, #12]
    89b0:	f103 0304 	add.w	r3, r3, #4	; 0x4
    89b4:	4618      	mov	r0, r3
    89b6:	f005 fe0d 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = Position();
    89ba:	68fb      	ldr	r3, [r7, #12]
    89bc:	f103 0404 	add.w	r4, r3, #4	; 0x4
    89c0:	f107 0310 	add.w	r3, r7, #16	; 0x10
    89c4:	4618      	mov	r0, r3
    89c6:	f005 fe05 	bl	e5d4 <_ZN8PositionC1Ev>
    89ca:	4620      	mov	r0, r4
    89cc:	f107 0310 	add.w	r3, r7, #16	; 0x10
    89d0:	e893 0006 	ldmia.w	r3, {r1, r2}
    89d4:	f005 feba 	bl	e74c <_ZN8PositionaSES_>
    butAngle = a;
    89d8:	68fa      	ldr	r2, [r7, #12]
    89da:	68bb      	ldr	r3, [r7, #8]
    89dc:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    89de:	68fa      	ldr	r2, [r7, #12]
    89e0:	4b0c      	ldr	r3, [pc, #48]	(8a14 <_ZN18CommandTournerVersC2Eff+0x80>)
    89e2:	60d3      	str	r3, [r2, #12]
    useAngle = true;
    89e4:	68fa      	ldr	r2, [r7, #12]
    89e6:	f04f 0301 	mov.w	r3, #1	; 0x1
    89ea:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    89ec:	68fa      	ldr	r2, [r7, #12]
    89ee:	f04f 0300 	mov.w	r3, #0	; 0x0
    89f2:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    89f4:	68fa      	ldr	r2, [r7, #12]
    89f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    89fa:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    89fc:	68fa      	ldr	r2, [r7, #12]
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	61d3      	str	r3, [r2, #28]
}
    8a02:	68fb      	ldr	r3, [r7, #12]
    8a04:	4618      	mov	r0, r3
    8a06:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    8a0a:	46bd      	mov	sp, r7
    8a0c:	bd90      	pop	{r4, r7, pc}
    8a0e:	46c0      	nop			(mov r8, r8)
    8a10:	0001fa38 	.word	0x0001fa38
    8a14:	00000000 	.word	0x00000000

00008a18 <_ZN18CommandTournerVersC1E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    8a18:	b580      	push	{r7, lr}
    8a1a:	b084      	sub	sp, #16
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	60f8      	str	r0, [r7, #12]
    8a20:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8a24:	e880 0006 	stmia.w	r0, {r1, r2}
    8a28:	603b      	str	r3, [r7, #0]
    : Command()
    8a2a:	68fb      	ldr	r3, [r7, #12]
    8a2c:	4618      	mov	r0, r3
    8a2e:	f7fe ffaf 	bl	7990 <_ZN7CommandC2Ev>
    8a32:	68fa      	ldr	r2, [r7, #12]
    8a34:	4b16      	ldr	r3, [pc, #88]	(8a90 <_ZN18CommandTournerVersC1E8Positionf+0x78>)
    8a36:	6013      	str	r3, [r2, #0]
    8a38:	68fb      	ldr	r3, [r7, #12]
    8a3a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8a3e:	4618      	mov	r0, r3
    8a40:	f005 fdc8 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = p;
    8a44:	68fb      	ldr	r3, [r7, #12]
    8a46:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8a4a:	4618      	mov	r0, r3
    8a4c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8a50:	e893 0006 	ldmia.w	r3, {r1, r2}
    8a54:	f005 fe7a 	bl	e74c <_ZN8PositionaSES_>
    butAngle = 0;
    8a58:	68fa      	ldr	r2, [r7, #12]
    8a5a:	4b0e      	ldr	r3, [pc, #56]	(8a94 <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    8a5c:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8a5e:	68fa      	ldr	r2, [r7, #12]
    8a60:	4b0c      	ldr	r3, [pc, #48]	(8a94 <_ZN18CommandTournerVersC1E8Positionf+0x7c>)
    8a62:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    8a64:	68fa      	ldr	r2, [r7, #12]
    8a66:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a6a:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8a6c:	68fa      	ldr	r2, [r7, #12]
    8a6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a72:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8a74:	68fa      	ldr	r2, [r7, #12]
    8a76:	f04f 0300 	mov.w	r3, #0	; 0x0
    8a7a:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8a7c:	68fa      	ldr	r2, [r7, #12]
    8a7e:	683b      	ldr	r3, [r7, #0]
    8a80:	61d3      	str	r3, [r2, #28]
}
    8a82:	68fb      	ldr	r3, [r7, #12]
    8a84:	4618      	mov	r0, r3
    8a86:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8a8a:	46bd      	mov	sp, r7
    8a8c:	bd80      	pop	{r7, pc}
    8a8e:	46c0      	nop			(mov r8, r8)
    8a90:	0001fa38 	.word	0x0001fa38
    8a94:	00000000 	.word	0x00000000

00008a98 <_ZN18CommandTournerVersC2E8Positionf>:

    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

CommandTournerVers::CommandTournerVers(Position p, float maxSpeed)
    8a98:	b580      	push	{r7, lr}
    8a9a:	b084      	sub	sp, #16
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	60f8      	str	r0, [r7, #12]
    8aa0:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8aa4:	e880 0006 	stmia.w	r0, {r1, r2}
    8aa8:	603b      	str	r3, [r7, #0]
    : Command()
    8aaa:	68fb      	ldr	r3, [r7, #12]
    8aac:	4618      	mov	r0, r3
    8aae:	f7fe ff6f 	bl	7990 <_ZN7CommandC2Ev>
    8ab2:	68fa      	ldr	r2, [r7, #12]
    8ab4:	4b16      	ldr	r3, [pc, #88]	(8b10 <_ZN18CommandTournerVersC2E8Positionf+0x78>)
    8ab6:	6013      	str	r3, [r2, #0]
    8ab8:	68fb      	ldr	r3, [r7, #12]
    8aba:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8abe:	4618      	mov	r0, r3
    8ac0:	f005 fd88 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = p;
    8ac4:	68fb      	ldr	r3, [r7, #12]
    8ac6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8aca:	4618      	mov	r0, r3
    8acc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8ad0:	e893 0006 	ldmia.w	r3, {r1, r2}
    8ad4:	f005 fe3a 	bl	e74c <_ZN8PositionaSES_>
    butAngle = 0;
    8ad8:	68fa      	ldr	r2, [r7, #12]
    8ada:	4b0e      	ldr	r3, [pc, #56]	(8b14 <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    8adc:	6113      	str	r3, [r2, #16]
    angSpeed = 0;
    8ade:	68fa      	ldr	r2, [r7, #12]
    8ae0:	4b0c      	ldr	r3, [pc, #48]	(8b14 <_ZN18CommandTournerVersC2E8Positionf+0x7c>)
    8ae2:	60d3      	str	r3, [r2, #12]
    useAngle = false;
    8ae4:	68fa      	ldr	r2, [r7, #12]
    8ae6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8aea:	7553      	strb	r3, [r2, #21]

    m_fini = false;
    8aec:	68fa      	ldr	r2, [r7, #12]
    8aee:	f04f 0300 	mov.w	r3, #0	; 0x0
    8af2:	7513      	strb	r3, [r2, #20]
    signeAngle = SGN_UNDEF;
    8af4:	68fa      	ldr	r2, [r7, #12]
    8af6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8afa:	6193      	str	r3, [r2, #24]

    maxAngSpeed = maxSpeed;
    8afc:	68fa      	ldr	r2, [r7, #12]
    8afe:	683b      	ldr	r3, [r7, #0]
    8b00:	61d3      	str	r3, [r2, #28]
}
    8b02:	68fb      	ldr	r3, [r7, #12]
    8b04:	4618      	mov	r0, r3
    8b06:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8b0a:	46bd      	mov	sp, r7
    8b0c:	bd80      	pop	{r7, pc}
    8b0e:	46c0      	nop			(mov r8, r8)
    8b10:	0001fa38 	.word	0x0001fa38
    8b14:	00000000 	.word	0x00000000

00008b18 <_ZN13CommandAllerAC1E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    8b18:	b580      	push	{r7, lr}
    8b1a:	b084      	sub	sp, #16
    8b1c:	af00      	add	r7, sp, #0
    8b1e:	60f8      	str	r0, [r7, #12]
    8b20:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8b24:	e880 0006 	stmia.w	r0, {r1, r2}
    8b28:	70fb      	strb	r3, [r7, #3]
    : Command()
    8b2a:	68fb      	ldr	r3, [r7, #12]
    8b2c:	4618      	mov	r0, r3
    8b2e:	f7fe ff2f 	bl	7990 <_ZN7CommandC2Ev>
    8b32:	68fa      	ldr	r2, [r7, #12]
    8b34:	4b21      	ldr	r3, [pc, #132]	(8bbc <_ZN13CommandAllerAC1E8Positionbfff+0xa4>)
    8b36:	6013      	str	r3, [r2, #0]
    8b38:	68fb      	ldr	r3, [r7, #12]
    8b3a:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8b3e:	4618      	mov	r0, r3
    8b40:	f005 fd48 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = p;
    8b44:	68fb      	ldr	r3, [r7, #12]
    8b46:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8b4a:	4618      	mov	r0, r3
    8b4c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8b50:	e893 0006 	ldmia.w	r3, {r1, r2}
    8b54:	f005 fdfa 	bl	e74c <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    8b58:	68fa      	ldr	r2, [r7, #12]
    8b5a:	69bb      	ldr	r3, [r7, #24]
    8b5c:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    8b5e:	69f8      	ldr	r0, [r7, #28]
    8b60:	69f9      	ldr	r1, [r7, #28]
    8b62:	f010 f88d 	bl	18c80 <__aeabi_fmul>
    8b66:	4603      	mov	r3, r0
    8b68:	461a      	mov	r2, r3
    8b6a:	68fb      	ldr	r3, [r7, #12]
    8b6c:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    8b6e:	68fa      	ldr	r2, [r7, #12]
    8b70:	78fb      	ldrb	r3, [r7, #3]
    8b72:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8b76:	4b12      	ldr	r3, [pc, #72]	(8bc0 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    8b78:	681b      	ldr	r3, [r3, #0]
    8b7a:	4618      	mov	r0, r3
    8b7c:	f000 fe00 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    8b80:	4602      	mov	r2, r0
    8b82:	68fb      	ldr	r3, [r7, #12]
    8b84:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8b86:	4b0e      	ldr	r3, [pc, #56]	(8bc0 <_ZN13CommandAllerAC1E8Positionbfff+0xa8>)
    8b88:	681b      	ldr	r3, [r3, #0]
    8b8a:	4618      	mov	r0, r3
    8b8c:	f000 fdec 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8b90:	4602      	mov	r2, r0
    8b92:	68fb      	ldr	r3, [r7, #12]
    8b94:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    8b96:	68fa      	ldr	r2, [r7, #12]
    8b98:	f04f 0300 	mov.w	r3, #0	; 0x0
    8b9c:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    8b9e:	68fa      	ldr	r2, [r7, #12]
    8ba0:	4b08      	ldr	r3, [pc, #32]	(8bc4 <_ZN13CommandAllerAC1E8Positionbfff+0xac>)
    8ba2:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    8ba4:	68fa      	ldr	r2, [r7, #12]
    8ba6:	f04f 0300 	mov.w	r3, #0	; 0x0
    8baa:	f882 3028 	strb.w	r3, [r2, #40]
}
    8bae:	68fb      	ldr	r3, [r7, #12]
    8bb0:	4618      	mov	r0, r3
    8bb2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8bb6:	46bd      	mov	sp, r7
    8bb8:	bd80      	pop	{r7, pc}
    8bba:	46c0      	nop			(mov r8, r8)
    8bbc:	0001fa60 	.word	0x0001fa60
    8bc0:	20000570 	.word	0x20000570
    8bc4:	bf800000 	.word	0xbf800000

00008bc8 <_ZN13CommandAllerAC2E8Positionbfff>:

    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

CommandAllerA::CommandAllerA(Position p, bool reculer, float vitesseLineaireMax, float vitesseFin, float precisionAngle)
    8bc8:	b580      	push	{r7, lr}
    8bca:	b084      	sub	sp, #16
    8bcc:	af00      	add	r7, sp, #0
    8bce:	60f8      	str	r0, [r7, #12]
    8bd0:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8bd4:	e880 0006 	stmia.w	r0, {r1, r2}
    8bd8:	70fb      	strb	r3, [r7, #3]
    : Command()
    8bda:	68fb      	ldr	r3, [r7, #12]
    8bdc:	4618      	mov	r0, r3
    8bde:	f7fe fed7 	bl	7990 <_ZN7CommandC2Ev>
    8be2:	68fa      	ldr	r2, [r7, #12]
    8be4:	4b21      	ldr	r3, [pc, #132]	(8c6c <_ZN13CommandAllerAC2E8Positionbfff+0xa4>)
    8be6:	6013      	str	r3, [r2, #0]
    8be8:	68fb      	ldr	r3, [r7, #12]
    8bea:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8bee:	4618      	mov	r0, r3
    8bf0:	f005 fcf0 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = p;
    8bf4:	68fb      	ldr	r3, [r7, #12]
    8bf6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8bfa:	4618      	mov	r0, r3
    8bfc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8c00:	e893 0006 	ldmia.w	r3, {r1, r2}
    8c04:	f005 fda2 	bl	e74c <_ZN8PositionaSES_>
    vitesseLinMax = vitesseLineaireMax;
    8c08:	68fa      	ldr	r2, [r7, #12]
    8c0a:	69bb      	ldr	r3, [r7, #24]
    8c0c:	60d3      	str	r3, [r2, #12]
    vFin2 = vitesseFin*vitesseFin;
    8c0e:	69f8      	ldr	r0, [r7, #28]
    8c10:	69f9      	ldr	r1, [r7, #28]
    8c12:	f010 f835 	bl	18c80 <__aeabi_fmul>
    8c16:	4603      	mov	r3, r0
    8c18:	461a      	mov	r2, r3
    8c1a:	68fb      	ldr	r3, [r7, #12]
    8c1c:	611a      	str	r2, [r3, #16]
    m_reculer = reculer;
    8c1e:	68fa      	ldr	r2, [r7, #12]
    8c20:	78fb      	ldrb	r3, [r7, #3]
    8c22:	f882 3020 	strb.w	r3, [r2, #32]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8c26:	4b12      	ldr	r3, [pc, #72]	(8c70 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    8c28:	681b      	ldr	r3, [r3, #0]
    8c2a:	4618      	mov	r0, r3
    8c2c:	f000 fda8 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    8c30:	4602      	mov	r2, r0
    8c32:	68fb      	ldr	r3, [r7, #12]
    8c34:	619a      	str	r2, [r3, #24]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8c36:	4b0e      	ldr	r3, [pc, #56]	(8c70 <_ZN13CommandAllerAC2E8Positionbfff+0xa8>)
    8c38:	681b      	ldr	r3, [r3, #0]
    8c3a:	4618      	mov	r0, r3
    8c3c:	f000 fd94 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8c40:	4602      	mov	r2, r0
    8c42:	68fb      	ldr	r3, [r7, #12]
    8c44:	61da      	str	r2, [r3, #28]
    bonAngle = false;
    8c46:	68fa      	ldr	r2, [r7, #12]
    8c48:	f04f 0300 	mov.w	r3, #0	; 0x0
    8c4c:	7513      	strb	r3, [r2, #20]
    this->precisionAngle = -1.f;//precisionAngle;
    8c4e:	68fa      	ldr	r2, [r7, #12]
    8c50:	4b08      	ldr	r3, [pc, #32]	(8c74 <_ZN13CommandAllerAC2E8Positionbfff+0xac>)
    8c52:	62d3      	str	r3, [r2, #44]

    m_fini = false;
    8c54:	68fa      	ldr	r2, [r7, #12]
    8c56:	f04f 0300 	mov.w	r3, #0	; 0x0
    8c5a:	f882 3028 	strb.w	r3, [r2, #40]
}
    8c5e:	68fb      	ldr	r3, [r7, #12]
    8c60:	4618      	mov	r0, r3
    8c62:	f107 0710 	add.w	r7, r7, #16	; 0x10
    8c66:	46bd      	mov	sp, r7
    8c68:	bd80      	pop	{r7, pc}
    8c6a:	46c0      	nop			(mov r8, r8)
    8c6c:	0001fa60 	.word	0x0001fa60
    8c70:	20000570 	.word	0x20000570
    8c74:	bf800000 	.word	0xbf800000

00008c78 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    8c78:	b082      	sub	sp, #8
    8c7a:	b590      	push	{r4, r7, lr}
    8c7c:	b08f      	sub	sp, #60
    8c7e:	af00      	add	r7, sp, #0
    8c80:	60f8      	str	r0, [r7, #12]
    8c82:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8c86:	e880 0006 	stmia.w	r0, {r1, r2}
    8c8a:	64fb      	str	r3, [r7, #76]
    : Command()
    8c8c:	68fb      	ldr	r3, [r7, #12]
    8c8e:	4618      	mov	r0, r3
    8c90:	f7fe fe7e 	bl	7990 <_ZN7CommandC2Ev>
    8c94:	68fa      	ldr	r2, [r7, #12]
    8c96:	4b50      	ldr	r3, [pc, #320]	(8dd8 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x160>)
    8c98:	6013      	str	r3, [r2, #0]
    8c9a:	68fb      	ldr	r3, [r7, #12]
    8c9c:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8ca0:	4618      	mov	r0, r3
    8ca2:	f005 fc97 	bl	e5d4 <_ZN8PositionC1Ev>
    8ca6:	68fb      	ldr	r3, [r7, #12]
    8ca8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8cac:	4618      	mov	r0, r3
    8cae:	f005 fc91 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = p;
    8cb2:	68fb      	ldr	r3, [r7, #12]
    8cb4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8cb8:	4618      	mov	r0, r3
    8cba:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8cbe:	e893 0006 	ldmia.w	r3, {r1, r2}
    8cc2:	f005 fd43 	bl	e74c <_ZN8PositionaSES_>
    centre = c;
    8cc6:	68fb      	ldr	r3, [r7, #12]
    8cc8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8ccc:	4618      	mov	r0, r3
    8cce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    8cd2:	e893 0006 	ldmia.w	r3, {r1, r2}
    8cd6:	f005 fd39 	bl	e74c <_ZN8PositionaSES_>
    vMax = v;
    8cda:	68fa      	ldr	r2, [r7, #12]
    8cdc:	6d7b      	ldr	r3, [r7, #84]
    8cde:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    8ce0:	68fa      	ldr	r2, [r7, #12]
    8ce2:	f897 3058 	ldrb.w	r3, [r7, #88]
    8ce6:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8ce8:	4b3c      	ldr	r3, [pc, #240]	(8ddc <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    8cea:	681b      	ldr	r3, [r3, #0]
    8cec:	4618      	mov	r0, r3
    8cee:	f000 fd47 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    8cf2:	4602      	mov	r2, r0
    8cf4:	68fb      	ldr	r3, [r7, #12]
    8cf6:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8cf8:	4b38      	ldr	r3, [pc, #224]	(8ddc <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    8cfa:	681b      	ldr	r3, [r3, #0]
    8cfc:	4618      	mov	r0, r3
    8cfe:	f000 fd33 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8d02:	4602      	mov	r2, r0
    8d04:	68fb      	ldr	r3, [r7, #12]
    8d06:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    8d08:	68fa      	ldr	r2, [r7, #12]
    8d0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d0e:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    8d10:	68fa      	ldr	r2, [r7, #12]
    8d12:	f04f 0300 	mov.w	r3, #0	; 0x0
    8d16:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    8d1a:	4b30      	ldr	r3, [pc, #192]	(8ddc <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x164>)
    8d1c:	681a      	ldr	r2, [r3, #0]
    8d1e:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8d22:	4618      	mov	r0, r3
    8d24:	4611      	mov	r1, r2
    8d26:	f000 fd43 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    8d2a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8d2e:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8d32:	4618      	mov	r0, r3
    8d34:	4611      	mov	r1, r2
    8d36:	f005 feb1 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    8d3a:	697a      	ldr	r2, [r7, #20]
    8d3c:	68fb      	ldr	r3, [r7, #12]
    8d3e:	6a1b      	ldr	r3, [r3, #32]
    8d40:	4610      	mov	r0, r2
    8d42:	4619      	mov	r1, r3
    8d44:	f00f fe92 	bl	18a6c <__aeabi_fsub>
    8d48:	4603      	mov	r3, r0
    8d4a:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    8d4c:	69ba      	ldr	r2, [r7, #24]
    8d4e:	68fb      	ldr	r3, [r7, #12]
    8d50:	6a5b      	ldr	r3, [r3, #36]
    8d52:	4610      	mov	r0, r2
    8d54:	4619      	mov	r1, r3
    8d56:	f00f fe89 	bl	18a6c <__aeabi_fsub>
    8d5a:	4603      	mov	r3, r0
    8d5c:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    8d5e:	68fb      	ldr	r3, [r7, #12]
    8d60:	685a      	ldr	r2, [r3, #4]
    8d62:	68fb      	ldr	r3, [r7, #12]
    8d64:	6a1b      	ldr	r3, [r3, #32]
    8d66:	4610      	mov	r0, r2
    8d68:	4619      	mov	r1, r3
    8d6a:	f00f fe7f 	bl	18a6c <__aeabi_fsub>
    8d6e:	4603      	mov	r3, r0
    8d70:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    8d72:	68fb      	ldr	r3, [r7, #12]
    8d74:	689a      	ldr	r2, [r3, #8]
    8d76:	68fb      	ldr	r3, [r7, #12]
    8d78:	6a5b      	ldr	r3, [r3, #36]
    8d7a:	4610      	mov	r0, r2
    8d7c:	4619      	mov	r1, r3
    8d7e:	f00f fe75 	bl	18a6c <__aeabi_fsub>
    8d82:	4603      	mov	r3, r0
    8d84:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    8d86:	6ab8      	ldr	r0, [r7, #40]
    8d88:	6b79      	ldr	r1, [r7, #52]
    8d8a:	f00f ff79 	bl	18c80 <__aeabi_fmul>
    8d8e:	4603      	mov	r3, r0
    8d90:	461c      	mov	r4, r3
    8d92:	6af8      	ldr	r0, [r7, #44]
    8d94:	6b39      	ldr	r1, [r7, #48]
    8d96:	f00f ff73 	bl	18c80 <__aeabi_fmul>
    8d9a:	4603      	mov	r3, r0
    8d9c:	4620      	mov	r0, r4
    8d9e:	4619      	mov	r1, r3
    8da0:	f00f fe64 	bl	18a6c <__aeabi_fsub>
    8da4:	4603      	mov	r3, r0
    8da6:	4618      	mov	r0, r3
    8da8:	490d      	ldr	r1, [pc, #52]	(8de0 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x168>)
    8daa:	f010 f923 	bl	18ff4 <__aeabi_fcmpgt>
    8dae:	4603      	mov	r3, r0
    8db0:	2b00      	cmp	r3, #0
    8db2:	d004      	beq.n	8dbe <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x146>
        cote = SGN_POS;
    8db4:	68fa      	ldr	r2, [r7, #12]
    8db6:	f04f 0301 	mov.w	r3, #1	; 0x1
    8dba:	62d3      	str	r3, [r2, #44]
    8dbc:	e003      	b.n	8dc6 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    8dbe:	68fa      	ldr	r2, [r7, #12]
    8dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8dc4:	62d3      	str	r3, [r2, #44]
}
    8dc6:	68fb      	ldr	r3, [r7, #12]
    8dc8:	4618      	mov	r0, r3
    8dca:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    8dce:	46bd      	mov	sp, r7
    8dd0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    8dd4:	b002      	add	sp, #8
    8dd6:	4770      	bx	lr
    8dd8:	0001fa88 	.word	0x0001fa88
    8ddc:	20000570 	.word	0x20000570
    8de0:	00000000 	.word	0x00000000

00008de4 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb>:

    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

CommandAllerEnArcA::CommandAllerEnArcA(Position p, Position c, float v, bool reculer)
    8de4:	b082      	sub	sp, #8
    8de6:	b590      	push	{r4, r7, lr}
    8de8:	b08f      	sub	sp, #60
    8dea:	af00      	add	r7, sp, #0
    8dec:	60f8      	str	r0, [r7, #12]
    8dee:	f107 0004 	add.w	r0, r7, #4	; 0x4
    8df2:	e880 0006 	stmia.w	r0, {r1, r2}
    8df6:	64fb      	str	r3, [r7, #76]
    : Command()
    8df8:	68fb      	ldr	r3, [r7, #12]
    8dfa:	4618      	mov	r0, r3
    8dfc:	f7fe fdc8 	bl	7990 <_ZN7CommandC2Ev>
    8e00:	68fa      	ldr	r2, [r7, #12]
    8e02:	4b50      	ldr	r3, [pc, #320]	(8f44 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x160>)
    8e04:	6013      	str	r3, [r2, #0]
    8e06:	68fb      	ldr	r3, [r7, #12]
    8e08:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8e0c:	4618      	mov	r0, r3
    8e0e:	f005 fbe1 	bl	e5d4 <_ZN8PositionC1Ev>
    8e12:	68fb      	ldr	r3, [r7, #12]
    8e14:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8e18:	4618      	mov	r0, r3
    8e1a:	f005 fbdb 	bl	e5d4 <_ZN8PositionC1Ev>
{
    but = p;
    8e1e:	68fb      	ldr	r3, [r7, #12]
    8e20:	f103 0304 	add.w	r3, r3, #4	; 0x4
    8e24:	4618      	mov	r0, r3
    8e26:	f107 0304 	add.w	r3, r7, #4	; 0x4
    8e2a:	e893 0006 	ldmia.w	r3, {r1, r2}
    8e2e:	f005 fc8d 	bl	e74c <_ZN8PositionaSES_>
    centre = c;
    8e32:	68fb      	ldr	r3, [r7, #12]
    8e34:	f103 0320 	add.w	r3, r3, #32	; 0x20
    8e38:	4618      	mov	r0, r3
    8e3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    8e3e:	e893 0006 	ldmia.w	r3, {r1, r2}
    8e42:	f005 fc83 	bl	e74c <_ZN8PositionaSES_>
    vMax = v;
    8e46:	68fa      	ldr	r2, [r7, #12]
    8e48:	6d7b      	ldr	r3, [r7, #84]
    8e4a:	60d3      	str	r3, [r2, #12]
    m_reculer = reculer;
    8e4c:	68fa      	ldr	r2, [r7, #12]
    8e4e:	f897 3058 	ldrb.w	r3, [r7, #88]
    8e52:	7713      	strb	r3, [r2, #28]
    linSpeed = Odometrie::odometrie->getVitesseLineaire();
    8e54:	4b3c      	ldr	r3, [pc, #240]	(8f48 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    8e56:	681b      	ldr	r3, [r3, #0]
    8e58:	4618      	mov	r0, r3
    8e5a:	f000 fc91 	bl	9780 <_ZNK9Odometrie18getVitesseLineaireEv>
    8e5e:	4602      	mov	r2, r0
    8e60:	68fb      	ldr	r3, [r7, #12]
    8e62:	615a      	str	r2, [r3, #20]
    angSpeed = Odometrie::odometrie->getVitesseAngulaire();
    8e64:	4b38      	ldr	r3, [pc, #224]	(8f48 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    8e66:	681b      	ldr	r3, [r3, #0]
    8e68:	4618      	mov	r0, r3
    8e6a:	f000 fc7d 	bl	9768 <_ZNK9Odometrie19getVitesseAngulaireEv>
    8e6e:	4602      	mov	r2, r0
    8e70:	68fb      	ldr	r3, [r7, #12]
    8e72:	619a      	str	r2, [r3, #24]
    bonAngle = false;
    8e74:	68fa      	ldr	r2, [r7, #12]
    8e76:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e7a:	7413      	strb	r3, [r2, #16]

    m_fini = false;
    8e7c:	68fa      	ldr	r2, [r7, #12]
    8e7e:	f04f 0300 	mov.w	r3, #0	; 0x0
    8e82:	f882 3028 	strb.w	r3, [r2, #40]

    Position pos = Odometrie::odometrie->getPos().getPosition();
    8e86:	4b30      	ldr	r3, [pc, #192]	(8f48 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x164>)
    8e88:	681a      	ldr	r2, [r3, #0]
    8e8a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    8e8e:	4618      	mov	r0, r3
    8e90:	4611      	mov	r1, r2
    8e92:	f000 fc8d 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    8e96:	f107 0314 	add.w	r3, r7, #20	; 0x14
    8e9a:	f107 021c 	add.w	r2, r7, #28	; 0x1c
    8e9e:	4618      	mov	r0, r3
    8ea0:	4611      	mov	r1, r2
    8ea2:	f005 fdfb 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    float pmcx = pos.x-centre.x;
    8ea6:	697a      	ldr	r2, [r7, #20]
    8ea8:	68fb      	ldr	r3, [r7, #12]
    8eaa:	6a1b      	ldr	r3, [r3, #32]
    8eac:	4610      	mov	r0, r2
    8eae:	4619      	mov	r1, r3
    8eb0:	f00f fddc 	bl	18a6c <__aeabi_fsub>
    8eb4:	4603      	mov	r3, r0
    8eb6:	62bb      	str	r3, [r7, #40]
    float pmcy = pos.y-centre.y;
    8eb8:	69ba      	ldr	r2, [r7, #24]
    8eba:	68fb      	ldr	r3, [r7, #12]
    8ebc:	6a5b      	ldr	r3, [r3, #36]
    8ebe:	4610      	mov	r0, r2
    8ec0:	4619      	mov	r1, r3
    8ec2:	f00f fdd3 	bl	18a6c <__aeabi_fsub>
    8ec6:	4603      	mov	r3, r0
    8ec8:	62fb      	str	r3, [r7, #44]
    float bmcx = but.x-centre.x;
    8eca:	68fb      	ldr	r3, [r7, #12]
    8ecc:	685a      	ldr	r2, [r3, #4]
    8ece:	68fb      	ldr	r3, [r7, #12]
    8ed0:	6a1b      	ldr	r3, [r3, #32]
    8ed2:	4610      	mov	r0, r2
    8ed4:	4619      	mov	r1, r3
    8ed6:	f00f fdc9 	bl	18a6c <__aeabi_fsub>
    8eda:	4603      	mov	r3, r0
    8edc:	633b      	str	r3, [r7, #48]
    float bmcy = but.y-centre.y;
    8ede:	68fb      	ldr	r3, [r7, #12]
    8ee0:	689a      	ldr	r2, [r3, #8]
    8ee2:	68fb      	ldr	r3, [r7, #12]
    8ee4:	6a5b      	ldr	r3, [r3, #36]
    8ee6:	4610      	mov	r0, r2
    8ee8:	4619      	mov	r1, r3
    8eea:	f00f fdbf 	bl	18a6c <__aeabi_fsub>
    8eee:	4603      	mov	r3, r0
    8ef0:	637b      	str	r3, [r7, #52]
    if (pmcx*bmcy-pmcy*bmcx > 0.0f)
    8ef2:	6ab8      	ldr	r0, [r7, #40]
    8ef4:	6b79      	ldr	r1, [r7, #52]
    8ef6:	f00f fec3 	bl	18c80 <__aeabi_fmul>
    8efa:	4603      	mov	r3, r0
    8efc:	461c      	mov	r4, r3
    8efe:	6af8      	ldr	r0, [r7, #44]
    8f00:	6b39      	ldr	r1, [r7, #48]
    8f02:	f00f febd 	bl	18c80 <__aeabi_fmul>
    8f06:	4603      	mov	r3, r0
    8f08:	4620      	mov	r0, r4
    8f0a:	4619      	mov	r1, r3
    8f0c:	f00f fdae 	bl	18a6c <__aeabi_fsub>
    8f10:	4603      	mov	r3, r0
    8f12:	4618      	mov	r0, r3
    8f14:	490d      	ldr	r1, [pc, #52]	(8f4c <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x168>)
    8f16:	f010 f86d 	bl	18ff4 <__aeabi_fcmpgt>
    8f1a:	4603      	mov	r3, r0
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d004      	beq.n	8f2a <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x146>
        cote = SGN_POS;
    8f20:	68fa      	ldr	r2, [r7, #12]
    8f22:	f04f 0301 	mov.w	r3, #1	; 0x1
    8f26:	62d3      	str	r3, [r2, #44]
    8f28:	e003      	b.n	8f32 <_ZN18CommandAllerEnArcAC2E8PositionS0_fb+0x14e>
    else
        cote = SGN_NEG;
    8f2a:	68fa      	ldr	r2, [r7, #12]
    8f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f30:	62d3      	str	r3, [r2, #44]
}
    8f32:	68fb      	ldr	r3, [r7, #12]
    8f34:	4618      	mov	r0, r3
    8f36:	f107 073c 	add.w	r7, r7, #60	; 0x3c
    8f3a:	46bd      	mov	sp, r7
    8f3c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
    8f40:	b002      	add	sp, #8
    8f42:	4770      	bx	lr
    8f44:	0001fa88 	.word	0x0001fa88
    8f48:	20000570 	.word	0x20000570
    8f4c:	00000000 	.word	0x00000000

00008f50 <_ZN13CommandAllerA6updateEv>:
    this->precisionAngle = -1.f;//precisionAngle;

    m_fini = false;
}

void CommandAllerA::update()
    8f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    8f54:	b09e      	sub	sp, #120
    8f56:	af00      	add	r7, sp, #0
    8f58:	6178      	str	r0, [r7, #20]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    8f5a:	4bcb      	ldr	r3, [pc, #812]	(9288 <_ZN13CommandAllerA6updateEv+0x338>)
    8f5c:	643b      	str	r3, [r7, #64]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    8f5e:	4bcb      	ldr	r3, [pc, #812]	(928c <_ZN13CommandAllerA6updateEv+0x33c>)
    8f60:	647b      	str	r3, [r7, #68]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    8f62:	4bcb      	ldr	r3, [pc, #812]	(9290 <_ZN13CommandAllerA6updateEv+0x340>)
    8f64:	64bb      	str	r3, [r7, #72]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    8f66:	4bcb      	ldr	r3, [pc, #812]	(9294 <_ZN13CommandAllerA6updateEv+0x344>)
    8f68:	64fb      	str	r3, [r7, #76]
    float vitLinMax = vitesseLinMax;//VITESSE_LINEAIRE_MAX;
    8f6a:	697b      	ldr	r3, [r7, #20]
    8f6c:	68db      	ldr	r3, [r3, #12]
    8f6e:	653b      	str	r3, [r7, #80]

    if(this->getLimit())
    8f70:	f7fe fd7a 	bl	7a68 <_ZN7Command8getLimitEv>
    8f74:	4603      	mov	r3, r0
    8f76:	2b00      	cmp	r3, #0
    8f78:	d00b      	beq.n	8f92 <_ZN13CommandAllerA6updateEv+0x42>
    {
        vitLinMax = vitesseLinMax/3;
    8f7a:	697b      	ldr	r3, [r7, #20]
    8f7c:	68db      	ldr	r3, [r3, #12]
    8f7e:	4618      	mov	r0, r3
    8f80:	49c5      	ldr	r1, [pc, #788]	(9298 <_ZN13CommandAllerA6updateEv+0x348>)
    8f82:	f00f ff31 	bl	18de8 <__aeabi_fdiv>
    8f86:	4603      	mov	r3, r0
    8f88:	653b      	str	r3, [r7, #80]
        allumerLED();
    8f8a:	f002 ffdd 	bl	bf48 <_Z10allumerLEDv>
        allumerLED2();
    8f8e:	f002 ffd3 	bl	bf38 <_Z11allumerLED2v>
    {
        //eteindreLED();
    }

    //float angleVitesseMax = M_PI/10.0f;
    float angleVitesseMax = 0.5f*vitAngMax*vitAngMax/accAngMax;
    8f92:	6c78      	ldr	r0, [r7, #68]
    8f94:	49c1      	ldr	r1, [pc, #772]	(929c <_ZN13CommandAllerA6updateEv+0x34c>)
    8f96:	f00f fe73 	bl	18c80 <__aeabi_fmul>
    8f9a:	4603      	mov	r3, r0
    8f9c:	4618      	mov	r0, r3
    8f9e:	6c79      	ldr	r1, [r7, #68]
    8fa0:	f00f fe6e 	bl	18c80 <__aeabi_fmul>
    8fa4:	4603      	mov	r3, r0
    8fa6:	4618      	mov	r0, r3
    8fa8:	6c39      	ldr	r1, [r7, #64]
    8faa:	f00f ff1d 	bl	18de8 <__aeabi_fdiv>
    8fae:	4603      	mov	r3, r0
    8fb0:	657b      	str	r3, [r7, #84]
    //float distanceVitesseMax = 350.0f;
    float distanceVitesseMax = 0.5f*(vitLinMax*vitLinMax-vFin2)/decLinMax;
    8fb2:	6d38      	ldr	r0, [r7, #80]
    8fb4:	6d39      	ldr	r1, [r7, #80]
    8fb6:	f00f fe63 	bl	18c80 <__aeabi_fmul>
    8fba:	4603      	mov	r3, r0
    8fbc:	461a      	mov	r2, r3
    8fbe:	697b      	ldr	r3, [r7, #20]
    8fc0:	691b      	ldr	r3, [r3, #16]
    8fc2:	4610      	mov	r0, r2
    8fc4:	4619      	mov	r1, r3
    8fc6:	f00f fd51 	bl	18a6c <__aeabi_fsub>
    8fca:	4603      	mov	r3, r0
    8fcc:	4618      	mov	r0, r3
    8fce:	49b3      	ldr	r1, [pc, #716]	(929c <_ZN13CommandAllerA6updateEv+0x34c>)
    8fd0:	f00f fe56 	bl	18c80 <__aeabi_fmul>
    8fd4:	4603      	mov	r3, r0
    8fd6:	4618      	mov	r0, r3
    8fd8:	6cf9      	ldr	r1, [r7, #76]
    8fda:	f00f ff05 	bl	18de8 <__aeabi_fdiv>
    8fde:	4603      	mov	r3, r0
    8fe0:	65bb      	str	r3, [r7, #88]
    float angle = Odometrie::odometrie->getPos().getAngle();
    8fe2:	4baf      	ldr	r3, [pc, #700]	(92a0 <_ZN13CommandAllerA6updateEv+0x350>)
    8fe4:	681a      	ldr	r2, [r3, #0]
    8fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
    8fea:	4618      	mov	r0, r3
    8fec:	4611      	mov	r1, r2
    8fee:	f000 fbdf 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    8ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
    8ff6:	4618      	mov	r0, r3
    8ff8:	f005 fd62 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    8ffc:	4603      	mov	r3, r0
    8ffe:	65fb      	str	r3, [r7, #92]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9000:	4ba7      	ldr	r3, [pc, #668]	(92a0 <_ZN13CommandAllerA6updateEv+0x350>)
    9002:	681a      	ldr	r2, [r3, #0]
    9004:	f107 0334 	add.w	r3, r7, #52	; 0x34
    9008:	4618      	mov	r0, r3
    900a:	4611      	mov	r1, r2
    900c:	f000 fbd0 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    9010:	f107 0320 	add.w	r3, r7, #32	; 0x20
    9014:	f107 0234 	add.w	r2, r7, #52	; 0x34
    9018:	4618      	mov	r0, r3
    901a:	4611      	mov	r1, r2
    901c:	f005 fd3e 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    Position delta = but-pos;
    9020:	697b      	ldr	r3, [r7, #20]
    9022:	f103 0104 	add.w	r1, r3, #4	; 0x4
    9026:	f107 0318 	add.w	r3, r7, #24	; 0x18
    902a:	f107 0220 	add.w	r2, r7, #32	; 0x20
    902e:	4618      	mov	r0, r3
    9030:	f005 fb66 	bl	e700 <_ZNK8PositionmiERKS_>
    float angleVise = atan2(delta.getY(),delta.getX());
    9034:	f107 0318 	add.w	r3, r7, #24	; 0x18
    9038:	4618      	mov	r0, r3
    903a:	f005 fb13 	bl	e664 <_ZNK8Position4getYEv>
    903e:	4603      	mov	r3, r0
    9040:	4618      	mov	r0, r3
    9042:	f00f f9ab 	bl	1839c <__aeabi_f2d>
    9046:	4604      	mov	r4, r0
    9048:	460d      	mov	r5, r1
    904a:	f107 0318 	add.w	r3, r7, #24	; 0x18
    904e:	4618      	mov	r0, r3
    9050:	f005 fafc 	bl	e64c <_ZNK8Position4getXEv>
    9054:	4603      	mov	r3, r0
    9056:	4618      	mov	r0, r3
    9058:	f00f f9a0 	bl	1839c <__aeabi_f2d>
    905c:	4602      	mov	r2, r0
    905e:	460b      	mov	r3, r1
    9060:	4620      	mov	r0, r4
    9062:	4629      	mov	r1, r5
    9064:	f013 fa24 	bl	1c4b0 <atan2>
    9068:	4602      	mov	r2, r0
    906a:	460b      	mov	r3, r1
    906c:	4610      	mov	r0, r2
    906e:	4619      	mov	r1, r3
    9070:	f00f fca8 	bl	189c4 <__aeabi_d2f>
    9074:	4603      	mov	r3, r0
    9076:	663b      	str	r3, [r7, #96]

    if (m_reculer)
    9078:	697b      	ldr	r3, [r7, #20]
    907a:	f893 3020 	ldrb.w	r3, [r3, #32]
    907e:	2b00      	cmp	r3, #0
    9080:	d012      	beq.n	90a8 <_ZN13CommandAllerA6updateEv+0x158>
        angleVise += M_PI;
    9082:	6e38      	ldr	r0, [r7, #96]
    9084:	f00f f98a 	bl	1839c <__aeabi_f2d>
    9088:	4602      	mov	r2, r0
    908a:	460b      	mov	r3, r1
    908c:	4610      	mov	r0, r2
    908e:	4619      	mov	r1, r3
    9090:	a27b      	add	r2, pc, #492	(adr r2, 9280 <_ZN13CommandAllerA6updateEv+0x330>)
    9092:	ca0c      	ldmia	r2!, {r2, r3}
    9094:	f00f f824 	bl	180e0 <__adddf3>
    9098:	4602      	mov	r2, r0
    909a:	460b      	mov	r3, r1
    909c:	4610      	mov	r0, r2
    909e:	4619      	mov	r1, r3
    90a0:	f00f fc90 	bl	189c4 <__aeabi_d2f>
    90a4:	4603      	mov	r3, r0
    90a6:	663b      	str	r3, [r7, #96]

    float diffAng = diffAngle(angleVise,angle);
    90a8:	6e38      	ldr	r0, [r7, #96]
    90aa:	6df9      	ldr	r1, [r7, #92]
    90ac:	f7fe feac 	bl	7e08 <_Z9diffAngleff>
    90b0:	4603      	mov	r3, r0
    90b2:	667b      	str	r3, [r7, #100]

    // reste sur place tant que le robot n'a pas le bon angle
    float angleMaxPourAvancer;
    if (precisionAngle<0.)
    90b4:	697b      	ldr	r3, [r7, #20]
    90b6:	6adb      	ldr	r3, [r3, #44]
    90b8:	4618      	mov	r0, r3
    90ba:	497a      	ldr	r1, [pc, #488]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    90bc:	f00f ff7c 	bl	18fb8 <__aeabi_fcmplt>
    90c0:	4603      	mov	r3, r0
    90c2:	2b00      	cmp	r3, #0
    90c4:	d002      	beq.n	90cc <_ZN13CommandAllerA6updateEv+0x17c>
        angleMaxPourAvancer = M_PI/25.0f;//25.0f;
    90c6:	4b78      	ldr	r3, [pc, #480]	(92a8 <_ZN13CommandAllerA6updateEv+0x358>)
    90c8:	66bb      	str	r3, [r7, #104]
    90ca:	e001      	b.n	90d0 <_ZN13CommandAllerA6updateEv+0x180>
    else
        angleMaxPourAvancer = DEGTORAD(3.);//25.0f;
    90cc:	4b77      	ldr	r3, [pc, #476]	(92ac <_ZN13CommandAllerA6updateEv+0x35c>)
    90ce:	66bb      	str	r3, [r7, #104]
    if (!bonAngle)
    90d0:	697b      	ldr	r3, [r7, #20]
    90d2:	7d1b      	ldrb	r3, [r3, #20]
    90d4:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    90d8:	b2db      	uxtb	r3, r3
    90da:	2b00      	cmp	r3, #0
    90dc:	d01b      	beq.n	9116 <_ZN13CommandAllerA6updateEv+0x1c6>
    {
        if (fabs(diffAng) < angleMaxPourAvancer)
    90de:	6e7b      	ldr	r3, [r7, #100]
    90e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    90e4:	4618      	mov	r0, r3
    90e6:	6eb9      	ldr	r1, [r7, #104]
    90e8:	f00f ff66 	bl	18fb8 <__aeabi_fcmplt>
    90ec:	4603      	mov	r3, r0
    90ee:	2b00      	cmp	r3, #0
    90f0:	d007      	beq.n	9102 <_ZN13CommandAllerA6updateEv+0x1b2>
        {
            bonAngle = true;
    90f2:	697a      	ldr	r2, [r7, #20]
    90f4:	f04f 0301 	mov.w	r3, #1	; 0x1
    90f8:	7513      	strb	r3, [r2, #20]
            derniereDistance = 1000000.0f;
    90fa:	697a      	ldr	r2, [r7, #20]
    90fc:	4b6c      	ldr	r3, [pc, #432]	(92b0 <_ZN13CommandAllerA6updateEv+0x360>)
    90fe:	6253      	str	r3, [r2, #36]
    9100:	e009      	b.n	9116 <_ZN13CommandAllerA6updateEv+0x1c6>
        }
        else
        {
            linSpeed *= 0.95f;
    9102:	697b      	ldr	r3, [r7, #20]
    9104:	699b      	ldr	r3, [r3, #24]
    9106:	4618      	mov	r0, r3
    9108:	496a      	ldr	r1, [pc, #424]	(92b4 <_ZN13CommandAllerA6updateEv+0x364>)
    910a:	f00f fdb9 	bl	18c80 <__aeabi_fmul>
    910e:	4603      	mov	r3, r0
    9110:	461a      	mov	r2, r3
    9112:	697b      	ldr	r3, [r7, #20]
    9114:	619a      	str	r2, [r3, #24]
        }
    }

    // Check sharps
    StrategieV2::setTourneSurSoiMeme((!bonAngle)&&(abs(linSpeed)<0.2f));
    9116:	697b      	ldr	r3, [r7, #20]
    9118:	7d1b      	ldrb	r3, [r3, #20]
    911a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    911e:	b2db      	uxtb	r3, r3
    9120:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9124:	b2db      	uxtb	r3, r3
    9126:	2b00      	cmp	r3, #0
    9128:	d137      	bne.n	919a <_ZN13CommandAllerA6updateEv+0x24a>
    912a:	697b      	ldr	r3, [r7, #20]
    912c:	699b      	ldr	r3, [r3, #24]
    912e:	4618      	mov	r0, r3
    9130:	495c      	ldr	r1, [pc, #368]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    9132:	f00f ff5f 	bl	18ff4 <__aeabi_fcmpgt>
    9136:	4603      	mov	r3, r0
    9138:	2b00      	cmp	r3, #0
    913a:	d015      	beq.n	9168 <_ZN13CommandAllerA6updateEv+0x218>
    913c:	697b      	ldr	r3, [r7, #20]
    913e:	699a      	ldr	r2, [r3, #24]
    9140:	f04f 0300 	mov.w	r3, #0	; 0x0
    9144:	71fb      	strb	r3, [r7, #7]
    9146:	4610      	mov	r0, r2
    9148:	4956      	ldr	r1, [pc, #344]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    914a:	f00f ff2b 	bl	18fa4 <__aeabi_fcmpeq>
    914e:	4603      	mov	r3, r0
    9150:	2b00      	cmp	r3, #0
    9152:	d102      	bne.n	915a <_ZN13CommandAllerA6updateEv+0x20a>
    9154:	f04f 0301 	mov.w	r3, #1	; 0x1
    9158:	71fb      	strb	r3, [r7, #7]
    915a:	79fb      	ldrb	r3, [r7, #7]
    915c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9160:	b2db      	uxtb	r3, r3
    9162:	2b00      	cmp	r3, #0
    9164:	d119      	bne.n	919a <_ZN13CommandAllerA6updateEv+0x24a>
    9166:	e014      	b.n	9192 <_ZN13CommandAllerA6updateEv+0x242>
    9168:	697b      	ldr	r3, [r7, #20]
    916a:	699a      	ldr	r2, [r3, #24]
    916c:	f04f 0300 	mov.w	r3, #0	; 0x0
    9170:	71bb      	strb	r3, [r7, #6]
    9172:	4610      	mov	r0, r2
    9174:	4950      	ldr	r1, [pc, #320]	(92b8 <_ZN13CommandAllerA6updateEv+0x368>)
    9176:	f00f ff3d 	bl	18ff4 <__aeabi_fcmpgt>
    917a:	4603      	mov	r3, r0
    917c:	2b00      	cmp	r3, #0
    917e:	d002      	beq.n	9186 <_ZN13CommandAllerA6updateEv+0x236>
    9180:	f04f 0301 	mov.w	r3, #1	; 0x1
    9184:	71bb      	strb	r3, [r7, #6]
    9186:	79bb      	ldrb	r3, [r7, #6]
    9188:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    918c:	b2db      	uxtb	r3, r3
    918e:	2b00      	cmp	r3, #0
    9190:	d103      	bne.n	919a <_ZN13CommandAllerA6updateEv+0x24a>
    9192:	f04f 0301 	mov.w	r3, #1	; 0x1
    9196:	60bb      	str	r3, [r7, #8]
    9198:	e002      	b.n	91a0 <_ZN13CommandAllerA6updateEv+0x250>
    919a:	f04f 0300 	mov.w	r3, #0	; 0x0
    919e:	60bb      	str	r3, [r7, #8]
    91a0:	68b8      	ldr	r0, [r7, #8]
    91a2:	f00a fdc7 	bl	13d34 <_ZN11StrategieV219setTourneSurSoiMemeEb>

    if (linSpeed > 0.2f)
    91a6:	697b      	ldr	r3, [r7, #20]
    91a8:	699b      	ldr	r3, [r3, #24]
    91aa:	4618      	mov	r0, r3
    91ac:	4943      	ldr	r1, [pc, #268]	(92bc <_ZN13CommandAllerA6updateEv+0x36c>)
    91ae:	f00f ff21 	bl	18ff4 <__aeabi_fcmpgt>
    91b2:	4603      	mov	r3, r0
    91b4:	2b00      	cmp	r3, #0
    91b6:	d004      	beq.n	91c2 <_ZN13CommandAllerA6updateEv+0x272>
        StrategieV2::enableSharpsGroup(true);
    91b8:	f04f 0001 	mov.w	r0, #1	; 0x1
    91bc:	f00a fe5e 	bl	13e7c <_ZN11StrategieV217enableSharpsGroupEb>
    91c0:	e00f      	b.n	91e2 <_ZN13CommandAllerA6updateEv+0x292>
    else if (linSpeed < -0.2f)
    91c2:	697b      	ldr	r3, [r7, #20]
    91c4:	699b      	ldr	r3, [r3, #24]
    91c6:	4618      	mov	r0, r3
    91c8:	493b      	ldr	r1, [pc, #236]	(92b8 <_ZN13CommandAllerA6updateEv+0x368>)
    91ca:	f00f fef5 	bl	18fb8 <__aeabi_fcmplt>
    91ce:	4603      	mov	r3, r0
    91d0:	2b00      	cmp	r3, #0
    91d2:	d004      	beq.n	91de <_ZN13CommandAllerA6updateEv+0x28e>
        StrategieV2::enableSharpsGroup(false);
    91d4:	f04f 0000 	mov.w	r0, #0	; 0x0
    91d8:	f00a fe50 	bl	13e7c <_ZN11StrategieV217enableSharpsGroupEb>
    91dc:	e001      	b.n	91e2 <_ZN13CommandAllerA6updateEv+0x292>
    else
        StrategieV2::emptySharpsToCheck();
    91de:	f00a fd81 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>

    float distanceBut = delta.getNorme();
    91e2:	f107 0318 	add.w	r3, r7, #24	; 0x18
    91e6:	4618      	mov	r0, r3
    91e8:	f005 fb98 	bl	e91c <_ZNK8Position8getNormeEv>
    91ec:	4603      	mov	r3, r0
    91ee:	66fb      	str	r3, [r7, #108]

    bool distanceOk = /*(distanceBut > derniereDistance) || */(distanceBut < 30.0f);
    91f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    91f4:	f887 3072 	strb.w	r3, [r7, #114]
    91f8:	6ef8      	ldr	r0, [r7, #108]
    91fa:	4931      	ldr	r1, [pc, #196]	(92c0 <_ZN13CommandAllerA6updateEv+0x370>)
    91fc:	f00f fedc 	bl	18fb8 <__aeabi_fcmplt>
    9200:	4603      	mov	r3, r0
    9202:	2b00      	cmp	r3, #0
    9204:	d003      	beq.n	920e <_ZN13CommandAllerA6updateEv+0x2be>
    9206:	f04f 0301 	mov.w	r3, #1	; 0x1
    920a:	f887 3072 	strb.w	r3, [r7, #114]
    if (distanceOk)
    {
        //vitAngMax = VITESSE_ANGULAIRE_SLOW_MAX;
        //linSpeed = 0.;
    }
    if (bonAngle && precisionAngle>0.)
    920e:	697b      	ldr	r3, [r7, #20]
    9210:	7d1b      	ldrb	r3, [r3, #20]
    9212:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9216:	b2db      	uxtb	r3, r3
    9218:	2b00      	cmp	r3, #0
    921a:	d118      	bne.n	924e <_ZN13CommandAllerA6updateEv+0x2fe>
    921c:	697b      	ldr	r3, [r7, #20]
    921e:	6ada      	ldr	r2, [r3, #44]
    9220:	f04f 0300 	mov.w	r3, #0	; 0x0
    9224:	717b      	strb	r3, [r7, #5]
    9226:	4610      	mov	r0, r2
    9228:	491e      	ldr	r1, [pc, #120]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    922a:	f00f fee3 	bl	18ff4 <__aeabi_fcmpgt>
    922e:	4603      	mov	r3, r0
    9230:	2b00      	cmp	r3, #0
    9232:	d002      	beq.n	923a <_ZN13CommandAllerA6updateEv+0x2ea>
    9234:	f04f 0301 	mov.w	r3, #1	; 0x1
    9238:	717b      	strb	r3, [r7, #5]
    923a:	797b      	ldrb	r3, [r7, #5]
    923c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9240:	b2db      	uxtb	r3, r3
    9242:	2b00      	cmp	r3, #0
    9244:	d103      	bne.n	924e <_ZN13CommandAllerA6updateEv+0x2fe>
    {
        angSpeed = 0.;
    9246:	697a      	ldr	r2, [r7, #20]
    9248:	4b16      	ldr	r3, [pc, #88]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    924a:	61d3      	str	r3, [r2, #28]
    924c:	e126      	b.n	949c <_ZN13CommandAllerA6updateEv+0x54c>
    }
    else if (abs(diffAng) > angleVitesseMax)
    924e:	6e78      	ldr	r0, [r7, #100]
    9250:	4914      	ldr	r1, [pc, #80]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    9252:	f00f fecf 	bl	18ff4 <__aeabi_fcmpgt>
    9256:	4603      	mov	r3, r0
    9258:	2b00      	cmp	r3, #0
    925a:	d033      	beq.n	92c4 <_ZN13CommandAllerA6updateEv+0x374>
    925c:	f04f 0300 	mov.w	r3, #0	; 0x0
    9260:	713b      	strb	r3, [r7, #4]
    9262:	6e78      	ldr	r0, [r7, #100]
    9264:	490f      	ldr	r1, [pc, #60]	(92a4 <_ZN13CommandAllerA6updateEv+0x354>)
    9266:	f00f fe9d 	bl	18fa4 <__aeabi_fcmpeq>
    926a:	4603      	mov	r3, r0
    926c:	2b00      	cmp	r3, #0
    926e:	d102      	bne.n	9276 <_ZN13CommandAllerA6updateEv+0x326>
    9270:	f04f 0301 	mov.w	r3, #1	; 0x1
    9274:	713b      	strb	r3, [r7, #4]
    9276:	793b      	ldrb	r3, [r7, #4]
    9278:	60fb      	str	r3, [r7, #12]
    927a:	e035      	b.n	92e8 <_ZN13CommandAllerA6updateEv+0x398>
    927c:	46c0      	nop			(mov r8, r8)
    927e:	46c0      	nop			(mov r8, r8)
    9280:	54442d18 	.word	0x54442d18
    9284:	400921fb 	.word	0x400921fb
    9288:	3983126f 	.word	0x3983126f
    928c:	3cf5c28f 	.word	0x3cf5c28f
    9290:	3ccccccd 	.word	0x3ccccccd
    9294:	3ca3d70a 	.word	0x3ca3d70a
    9298:	40400000 	.word	0x40400000
    929c:	3f000000 	.word	0x3f000000
    92a0:	20000570 	.word	0x20000570
    92a4:	00000000 	.word	0x00000000
    92a8:	3e00adfd 	.word	0x3e00adfd
    92ac:	3d567750 	.word	0x3d567750
    92b0:	49742400 	.word	0x49742400
    92b4:	3f733333 	.word	0x3f733333
    92b8:	be4ccccd 	.word	0xbe4ccccd
    92bc:	3e4ccccd 	.word	0x3e4ccccd
    92c0:	41f00000 	.word	0x41f00000
    92c4:	6e7b      	ldr	r3, [r7, #100]
    92c6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    92ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    92ce:	70fb      	strb	r3, [r7, #3]
    92d0:	4610      	mov	r0, r2
    92d2:	6d79      	ldr	r1, [r7, #84]
    92d4:	f00f fe8e 	bl	18ff4 <__aeabi_fcmpgt>
    92d8:	4603      	mov	r3, r0
    92da:	2b00      	cmp	r3, #0
    92dc:	d002      	beq.n	92e4 <_ZN13CommandAllerA6updateEv+0x394>
    92de:	f04f 0301 	mov.w	r3, #1	; 0x1
    92e2:	70fb      	strb	r3, [r7, #3]
    92e4:	78fb      	ldrb	r3, [r7, #3]
    92e6:	60fb      	str	r3, [r7, #12]
    92e8:	68fb      	ldr	r3, [r7, #12]
    92ea:	2b00      	cmp	r3, #0
    92ec:	f000 80c9 	beq.w	9482 <_ZN13CommandAllerA6updateEv+0x532>
    {
        bool hasToDecelerate = /*(!distanceOk) && */(fabs(diffAng) < (angSpeed * angSpeed / accAngMax - accAngMax*2.));
    92f0:	6e7b      	ldr	r3, [r7, #100]
    92f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    92f6:	4618      	mov	r0, r3
    92f8:	f00f f850 	bl	1839c <__aeabi_f2d>
    92fc:	4680      	mov	r8, r0
    92fe:	4689      	mov	r9, r1
    9300:	697b      	ldr	r3, [r7, #20]
    9302:	69da      	ldr	r2, [r3, #28]
    9304:	697b      	ldr	r3, [r7, #20]
    9306:	69db      	ldr	r3, [r3, #28]
    9308:	4610      	mov	r0, r2
    930a:	4619      	mov	r1, r3
    930c:	f00f fcb8 	bl	18c80 <__aeabi_fmul>
    9310:	4603      	mov	r3, r0
    9312:	4618      	mov	r0, r3
    9314:	6c39      	ldr	r1, [r7, #64]
    9316:	f00f fd67 	bl	18de8 <__aeabi_fdiv>
    931a:	4603      	mov	r3, r0
    931c:	4618      	mov	r0, r3
    931e:	f00f f83d 	bl	1839c <__aeabi_f2d>
    9322:	4604      	mov	r4, r0
    9324:	460d      	mov	r5, r1
    9326:	6c38      	ldr	r0, [r7, #64]
    9328:	f00f f838 	bl	1839c <__aeabi_f2d>
    932c:	4602      	mov	r2, r0
    932e:	460b      	mov	r3, r1
    9330:	4610      	mov	r0, r2
    9332:	4619      	mov	r1, r3
    9334:	f04f 0200 	mov.w	r2, #0	; 0x0
    9338:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    933c:	f00f f882 	bl	18444 <__aeabi_dmul>
    9340:	4602      	mov	r2, r0
    9342:	460b      	mov	r3, r1
    9344:	4620      	mov	r0, r4
    9346:	4629      	mov	r1, r5
    9348:	f00e feca 	bl	180e0 <__adddf3>
    934c:	4602      	mov	r2, r0
    934e:	460b      	mov	r3, r1
    9350:	4614      	mov	r4, r2
    9352:	461d      	mov	r5, r3
    9354:	f04f 0300 	mov.w	r3, #0	; 0x0
    9358:	f887 3073 	strb.w	r3, [r7, #115]
    935c:	4640      	mov	r0, r8
    935e:	4649      	mov	r1, r9
    9360:	4622      	mov	r2, r4
    9362:	462b      	mov	r3, r5
    9364:	f00f fade 	bl	18924 <__aeabi_dcmplt>
    9368:	4603      	mov	r3, r0
    936a:	2b00      	cmp	r3, #0
    936c:	d003      	beq.n	9376 <_ZN13CommandAllerA6updateEv+0x426>
    936e:	f04f 0301 	mov.w	r3, #1	; 0x1
    9372:	f887 3073 	strb.w	r3, [r7, #115]
        if (diffAng > 0)
    9376:	6e78      	ldr	r0, [r7, #100]
    9378:	49cf      	ldr	r1, [pc, #828]	(96b8 <_ZN13CommandAllerA6updateEv+0x768>)
    937a:	f00f fe3b 	bl	18ff4 <__aeabi_fcmpgt>
    937e:	4603      	mov	r3, r0
    9380:	2b00      	cmp	r3, #0
    9382:	d03c      	beq.n	93fe <_ZN13CommandAllerA6updateEv+0x4ae>
        {
            if (!hasToDecelerate)
    9384:	f897 3073 	ldrb.w	r3, [r7, #115]
    9388:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    938c:	b2db      	uxtb	r3, r3
    938e:	2b00      	cmp	r3, #0
    9390:	d00a      	beq.n	93a8 <_ZN13CommandAllerA6updateEv+0x458>
                angSpeed += accAngMax;
    9392:	697b      	ldr	r3, [r7, #20]
    9394:	69db      	ldr	r3, [r3, #28]
    9396:	4618      	mov	r0, r3
    9398:	6c39      	ldr	r1, [r7, #64]
    939a:	f00f fb69 	bl	18a70 <__addsf3>
    939e:	4603      	mov	r3, r0
    93a0:	461a      	mov	r2, r3
    93a2:	697b      	ldr	r3, [r7, #20]
    93a4:	61da      	str	r2, [r3, #28]
    93a6:	e01d      	b.n	93e4 <_ZN13CommandAllerA6updateEv+0x494>
            else if (angSpeed > accAngMax*2)
    93a8:	697b      	ldr	r3, [r7, #20]
    93aa:	69dc      	ldr	r4, [r3, #28]
    93ac:	6c3b      	ldr	r3, [r7, #64]
    93ae:	4618      	mov	r0, r3
    93b0:	4619      	mov	r1, r3
    93b2:	f00f fb5d 	bl	18a70 <__addsf3>
    93b6:	4603      	mov	r3, r0
    93b8:	4620      	mov	r0, r4
    93ba:	4619      	mov	r1, r3
    93bc:	f00f fe1a 	bl	18ff4 <__aeabi_fcmpgt>
    93c0:	4603      	mov	r3, r0
    93c2:	2b00      	cmp	r3, #0
    93c4:	d00e      	beq.n	93e4 <_ZN13CommandAllerA6updateEv+0x494>
                angSpeed -= accAngMax*2;
    93c6:	697b      	ldr	r3, [r7, #20]
    93c8:	69dc      	ldr	r4, [r3, #28]
    93ca:	6c38      	ldr	r0, [r7, #64]
    93cc:	49bb      	ldr	r1, [pc, #748]	(96bc <_ZN13CommandAllerA6updateEv+0x76c>)
    93ce:	f00f fc57 	bl	18c80 <__aeabi_fmul>
    93d2:	4603      	mov	r3, r0
    93d4:	4620      	mov	r0, r4
    93d6:	4619      	mov	r1, r3
    93d8:	f00f fb4a 	bl	18a70 <__addsf3>
    93dc:	4603      	mov	r3, r0
    93de:	461a      	mov	r2, r3
    93e0:	697b      	ldr	r3, [r7, #20]
    93e2:	61da      	str	r2, [r3, #28]

            if (angSpeed > vitAngMax)
    93e4:	697b      	ldr	r3, [r7, #20]
    93e6:	69db      	ldr	r3, [r3, #28]
    93e8:	4618      	mov	r0, r3
    93ea:	6c79      	ldr	r1, [r7, #68]
    93ec:	f00f fe02 	bl	18ff4 <__aeabi_fcmpgt>
    93f0:	4603      	mov	r3, r0
    93f2:	2b00      	cmp	r3, #0
    93f4:	d052      	beq.n	949c <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = vitAngMax;
    93f6:	697a      	ldr	r2, [r7, #20]
    93f8:	6c7b      	ldr	r3, [r7, #68]
    93fa:	61d3      	str	r3, [r2, #28]
    93fc:	e04e      	b.n	949c <_ZN13CommandAllerA6updateEv+0x54c>
        }
        else
        {
            if (!hasToDecelerate)
    93fe:	f897 3073 	ldrb.w	r3, [r7, #115]
    9402:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    9406:	b2db      	uxtb	r3, r3
    9408:	2b00      	cmp	r3, #0
    940a:	d00a      	beq.n	9422 <_ZN13CommandAllerA6updateEv+0x4d2>
                angSpeed -= accAngMax;
    940c:	697b      	ldr	r3, [r7, #20]
    940e:	69db      	ldr	r3, [r3, #28]
    9410:	4618      	mov	r0, r3
    9412:	6c39      	ldr	r1, [r7, #64]
    9414:	f00f fb2a 	bl	18a6c <__aeabi_fsub>
    9418:	4603      	mov	r3, r0
    941a:	461a      	mov	r2, r3
    941c:	697b      	ldr	r3, [r7, #20]
    941e:	61da      	str	r2, [r3, #28]
    9420:	e01d      	b.n	945e <_ZN13CommandAllerA6updateEv+0x50e>
            else if (angSpeed < -accAngMax*2)
    9422:	697b      	ldr	r3, [r7, #20]
    9424:	69dc      	ldr	r4, [r3, #28]
    9426:	6c38      	ldr	r0, [r7, #64]
    9428:	49a4      	ldr	r1, [pc, #656]	(96bc <_ZN13CommandAllerA6updateEv+0x76c>)
    942a:	f00f fc29 	bl	18c80 <__aeabi_fmul>
    942e:	4603      	mov	r3, r0
    9430:	4620      	mov	r0, r4
    9432:	4619      	mov	r1, r3
    9434:	f00f fdc0 	bl	18fb8 <__aeabi_fcmplt>
    9438:	4603      	mov	r3, r0
    943a:	2b00      	cmp	r3, #0
    943c:	d00f      	beq.n	945e <_ZN13CommandAllerA6updateEv+0x50e>
                angSpeed += accAngMax*2;
    943e:	697b      	ldr	r3, [r7, #20]
    9440:	69dc      	ldr	r4, [r3, #28]
    9442:	6c3b      	ldr	r3, [r7, #64]
    9444:	4618      	mov	r0, r3
    9446:	4619      	mov	r1, r3
    9448:	f00f fb12 	bl	18a70 <__addsf3>
    944c:	4603      	mov	r3, r0
    944e:	4620      	mov	r0, r4
    9450:	4619      	mov	r1, r3
    9452:	f00f fb0d 	bl	18a70 <__addsf3>
    9456:	4603      	mov	r3, r0
    9458:	461a      	mov	r2, r3
    945a:	697b      	ldr	r3, [r7, #20]
    945c:	61da      	str	r2, [r3, #28]

            if (angSpeed < -vitAngMax)
    945e:	697b      	ldr	r3, [r7, #20]
    9460:	69da      	ldr	r2, [r3, #28]
    9462:	6c7b      	ldr	r3, [r7, #68]
    9464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9468:	4610      	mov	r0, r2
    946a:	4619      	mov	r1, r3
    946c:	f00f fda4 	bl	18fb8 <__aeabi_fcmplt>
    9470:	4603      	mov	r3, r0
    9472:	2b00      	cmp	r3, #0
    9474:	d012      	beq.n	949c <_ZN13CommandAllerA6updateEv+0x54c>
                angSpeed = -vitAngMax;
    9476:	6c7b      	ldr	r3, [r7, #68]
    9478:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    947c:	697b      	ldr	r3, [r7, #20]
    947e:	61da      	str	r2, [r3, #28]
    9480:	e00c      	b.n	949c <_ZN13CommandAllerA6updateEv+0x54c>
        }

    }
    else
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    9482:	6e78      	ldr	r0, [r7, #100]
    9484:	6c79      	ldr	r1, [r7, #68]
    9486:	f00f fbfb 	bl	18c80 <__aeabi_fmul>
    948a:	4603      	mov	r3, r0
    948c:	4618      	mov	r0, r3
    948e:	6d79      	ldr	r1, [r7, #84]
    9490:	f00f fcaa 	bl	18de8 <__aeabi_fdiv>
    9494:	4603      	mov	r3, r0
    9496:	461a      	mov	r2, r3
    9498:	697b      	ldr	r3, [r7, #20]
    949a:	61da      	str	r2, [r3, #28]
    {
        angSpeed = diffAng*vitAngMax/angleVitesseMax;
    }*/

    // vitesse linéaire
    if (distanceBut > derniereDistance || distanceBut < 10.0f)
    949c:	697b      	ldr	r3, [r7, #20]
    949e:	6a5b      	ldr	r3, [r3, #36]
    94a0:	4618      	mov	r0, r3
    94a2:	6ef9      	ldr	r1, [r7, #108]
    94a4:	f00f fd88 	bl	18fb8 <__aeabi_fcmplt>
    94a8:	4603      	mov	r3, r0
    94aa:	2b00      	cmp	r3, #0
    94ac:	d106      	bne.n	94bc <_ZN13CommandAllerA6updateEv+0x56c>
    94ae:	6ef8      	ldr	r0, [r7, #108]
    94b0:	4983      	ldr	r1, [pc, #524]	(96c0 <_ZN13CommandAllerA6updateEv+0x770>)
    94b2:	f00f fd81 	bl	18fb8 <__aeabi_fcmplt>
    94b6:	4603      	mov	r3, r0
    94b8:	2b00      	cmp	r3, #0
    94ba:	d004      	beq.n	94c6 <_ZN13CommandAllerA6updateEv+0x576>
    {
        m_fini = true;
    94bc:	697b      	ldr	r3, [r7, #20]
    94be:	f04f 0201 	mov.w	r2, #1	; 0x1
    94c2:	f883 2028 	strb.w	r2, [r3, #40]
    }

    if (bonAngle)
    94c6:	697b      	ldr	r3, [r7, #20]
    94c8:	7d1b      	ldrb	r3, [r3, #20]
    94ca:	2b00      	cmp	r3, #0
    94cc:	f000 80ee 	beq.w	96ac <_ZN13CommandAllerA6updateEv+0x75c>
    {

        if (fabs(diffAng) > angleMaxPourAvancer)
    94d0:	6e7b      	ldr	r3, [r7, #100]
    94d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    94d6:	4618      	mov	r0, r3
    94d8:	6eb9      	ldr	r1, [r7, #104]
    94da:	f00f fd8b 	bl	18ff4 <__aeabi_fcmpgt>
    94de:	4603      	mov	r3, r0
    94e0:	2b00      	cmp	r3, #0
    94e2:	d00a      	beq.n	94fa <_ZN13CommandAllerA6updateEv+0x5aa>
        {
            linSpeed *= 0.97f;
    94e4:	697b      	ldr	r3, [r7, #20]
    94e6:	699b      	ldr	r3, [r3, #24]
    94e8:	4618      	mov	r0, r3
    94ea:	4976      	ldr	r1, [pc, #472]	(96c4 <_ZN13CommandAllerA6updateEv+0x774>)
    94ec:	f00f fbc8 	bl	18c80 <__aeabi_fmul>
    94f0:	4603      	mov	r3, r0
    94f2:	461a      	mov	r2, r3
    94f4:	697b      	ldr	r3, [r7, #20]
    94f6:	619a      	str	r2, [r3, #24]
    94f8:	e0d8      	b.n	96ac <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else if (distanceBut > distanceVitesseMax)
    94fa:	6ef8      	ldr	r0, [r7, #108]
    94fc:	6db9      	ldr	r1, [r7, #88]
    94fe:	f00f fd79 	bl	18ff4 <__aeabi_fcmpgt>
    9502:	4603      	mov	r3, r0
    9504:	2b00      	cmp	r3, #0
    9506:	d039      	beq.n	957c <_ZN13CommandAllerA6updateEv+0x62c>
        {
             if (m_reculer)
    9508:	697b      	ldr	r3, [r7, #20]
    950a:	f893 3020 	ldrb.w	r3, [r3, #32]
    950e:	2b00      	cmp	r3, #0
    9510:	d00a      	beq.n	9528 <_ZN13CommandAllerA6updateEv+0x5d8>
                linSpeed -= accLinMax;
    9512:	697b      	ldr	r3, [r7, #20]
    9514:	699b      	ldr	r3, [r3, #24]
    9516:	4618      	mov	r0, r3
    9518:	6cb9      	ldr	r1, [r7, #72]
    951a:	f00f faa7 	bl	18a6c <__aeabi_fsub>
    951e:	4603      	mov	r3, r0
    9520:	461a      	mov	r2, r3
    9522:	697b      	ldr	r3, [r7, #20]
    9524:	619a      	str	r2, [r3, #24]
    9526:	e009      	b.n	953c <_ZN13CommandAllerA6updateEv+0x5ec>
             else
                linSpeed += accLinMax;
    9528:	697b      	ldr	r3, [r7, #20]
    952a:	699b      	ldr	r3, [r3, #24]
    952c:	4618      	mov	r0, r3
    952e:	6cb9      	ldr	r1, [r7, #72]
    9530:	f00f fa9e 	bl	18a70 <__addsf3>
    9534:	4603      	mov	r3, r0
    9536:	461a      	mov	r2, r3
    9538:	697b      	ldr	r3, [r7, #20]
    953a:	619a      	str	r2, [r3, #24]

            if (linSpeed > vitLinMax)
    953c:	697b      	ldr	r3, [r7, #20]
    953e:	699b      	ldr	r3, [r3, #24]
    9540:	4618      	mov	r0, r3
    9542:	6d39      	ldr	r1, [r7, #80]
    9544:	f00f fd56 	bl	18ff4 <__aeabi_fcmpgt>
    9548:	4603      	mov	r3, r0
    954a:	2b00      	cmp	r3, #0
    954c:	d003      	beq.n	9556 <_ZN13CommandAllerA6updateEv+0x606>
                linSpeed = vitLinMax;
    954e:	697a      	ldr	r2, [r7, #20]
    9550:	6d3b      	ldr	r3, [r7, #80]
    9552:	6193      	str	r3, [r2, #24]
    9554:	e0aa      	b.n	96ac <_ZN13CommandAllerA6updateEv+0x75c>
            else if (linSpeed < -vitLinMax)
    9556:	697b      	ldr	r3, [r7, #20]
    9558:	699a      	ldr	r2, [r3, #24]
    955a:	6d3b      	ldr	r3, [r7, #80]
    955c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    9560:	4610      	mov	r0, r2
    9562:	4619      	mov	r1, r3
    9564:	f00f fd28 	bl	18fb8 <__aeabi_fcmplt>
    9568:	4603      	mov	r3, r0
    956a:	2b00      	cmp	r3, #0
    956c:	f000 809e 	beq.w	96ac <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = -vitLinMax;
    9570:	6d3b      	ldr	r3, [r7, #80]
    9572:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
    9576:	697b      	ldr	r3, [r7, #20]
    9578:	619a      	str	r2, [r3, #24]
    957a:	e097      	b.n	96ac <_ZN13CommandAllerA6updateEv+0x75c>
        }
        else
        {
            float linSpeedVisee;
            if (m_reculer)
    957c:	697b      	ldr	r3, [r7, #20]
    957e:	f893 3020 	ldrb.w	r3, [r3, #32]
    9582:	2b00      	cmp	r3, #0
    9584:	d025      	beq.n	95d2 <_ZN13CommandAllerA6updateEv+0x682>
                linSpeedVisee = -sqrt(vFin2+2.0f*distanceBut*decLinMax);
    9586:	697b      	ldr	r3, [r7, #20]
    9588:	691c      	ldr	r4, [r3, #16]
    958a:	6efb      	ldr	r3, [r7, #108]
    958c:	4618      	mov	r0, r3
    958e:	4619      	mov	r1, r3
    9590:	f00f fa6e 	bl	18a70 <__addsf3>
    9594:	4603      	mov	r3, r0
    9596:	4618      	mov	r0, r3
    9598:	6cf9      	ldr	r1, [r7, #76]
    959a:	f00f fb71 	bl	18c80 <__aeabi_fmul>
    959e:	4603      	mov	r3, r0
    95a0:	4620      	mov	r0, r4
    95a2:	4619      	mov	r1, r3
    95a4:	f00f fa64 	bl	18a70 <__addsf3>
    95a8:	4603      	mov	r3, r0
    95aa:	4618      	mov	r0, r3
    95ac:	f00e fef6 	bl	1839c <__aeabi_f2d>
    95b0:	4602      	mov	r2, r0
    95b2:	460b      	mov	r3, r1
    95b4:	4610      	mov	r0, r2
    95b6:	4619      	mov	r1, r3
    95b8:	f012 ff80 	bl	1c4bc <sqrt>
    95bc:	4602      	mov	r2, r0
    95be:	460b      	mov	r3, r1
    95c0:	4610      	mov	r0, r2
    95c2:	4619      	mov	r1, r3
    95c4:	f00f f9fe 	bl	189c4 <__aeabi_d2f>
    95c8:	4603      	mov	r3, r0
    95ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    95ce:	677b      	str	r3, [r7, #116]
    95d0:	e022      	b.n	9618 <_ZN13CommandAllerA6updateEv+0x6c8>
            else
                linSpeedVisee = sqrt(vFin2+2.0f*distanceBut*decLinMax);
    95d2:	697b      	ldr	r3, [r7, #20]
    95d4:	691c      	ldr	r4, [r3, #16]
    95d6:	6efb      	ldr	r3, [r7, #108]
    95d8:	4618      	mov	r0, r3
    95da:	4619      	mov	r1, r3
    95dc:	f00f fa48 	bl	18a70 <__addsf3>
    95e0:	4603      	mov	r3, r0
    95e2:	4618      	mov	r0, r3
    95e4:	6cf9      	ldr	r1, [r7, #76]
    95e6:	f00f fb4b 	bl	18c80 <__aeabi_fmul>
    95ea:	4603      	mov	r3, r0
    95ec:	4620      	mov	r0, r4
    95ee:	4619      	mov	r1, r3
    95f0:	f00f fa3e 	bl	18a70 <__addsf3>
    95f4:	4603      	mov	r3, r0
    95f6:	4618      	mov	r0, r3
    95f8:	f00e fed0 	bl	1839c <__aeabi_f2d>
    95fc:	4602      	mov	r2, r0
    95fe:	460b      	mov	r3, r1
    9600:	4610      	mov	r0, r2
    9602:	4619      	mov	r1, r3
    9604:	f012 ff5a 	bl	1c4bc <sqrt>
    9608:	4602      	mov	r2, r0
    960a:	460b      	mov	r3, r1
    960c:	4610      	mov	r0, r2
    960e:	4619      	mov	r1, r3
    9610:	f00f f9d8 	bl	189c4 <__aeabi_d2f>
    9614:	4603      	mov	r3, r0
    9616:	677b      	str	r3, [r7, #116]

             if (m_reculer)
    9618:	697b      	ldr	r3, [r7, #20]
    961a:	f893 3020 	ldrb.w	r3, [r3, #32]
    961e:	2b00      	cmp	r3, #0
    9620:	d00a      	beq.n	9638 <_ZN13CommandAllerA6updateEv+0x6e8>
                linSpeed -= accLinMax;
    9622:	697b      	ldr	r3, [r7, #20]
    9624:	699b      	ldr	r3, [r3, #24]
    9626:	4618      	mov	r0, r3
    9628:	6cb9      	ldr	r1, [r7, #72]
    962a:	f00f fa1f 	bl	18a6c <__aeabi_fsub>
    962e:	4603      	mov	r3, r0
    9630:	461a      	mov	r2, r3
    9632:	697b      	ldr	r3, [r7, #20]
    9634:	619a      	str	r2, [r3, #24]
    9636:	e009      	b.n	964c <_ZN13CommandAllerA6updateEv+0x6fc>
             else
                linSpeed += accLinMax;
    9638:	697b      	ldr	r3, [r7, #20]
    963a:	699b      	ldr	r3, [r3, #24]
    963c:	4618      	mov	r0, r3
    963e:	6cb9      	ldr	r1, [r7, #72]
    9640:	f00f fa16 	bl	18a70 <__addsf3>
    9644:	4603      	mov	r3, r0
    9646:	461a      	mov	r2, r3
    9648:	697b      	ldr	r3, [r7, #20]
    964a:	619a      	str	r2, [r3, #24]

            if (abs(linSpeed) > abs(linSpeedVisee))
    964c:	697b      	ldr	r3, [r7, #20]
    964e:	699b      	ldr	r3, [r3, #24]
    9650:	4618      	mov	r0, r3
    9652:	4919      	ldr	r1, [pc, #100]	(96b8 <_ZN13CommandAllerA6updateEv+0x768>)
    9654:	f00f fcce 	bl	18ff4 <__aeabi_fcmpgt>
    9658:	4603      	mov	r3, r0
    965a:	2b00      	cmp	r3, #0
    965c:	d011      	beq.n	9682 <_ZN13CommandAllerA6updateEv+0x732>
    965e:	697b      	ldr	r3, [r7, #20]
    9660:	699a      	ldr	r2, [r3, #24]
    9662:	f04f 0300 	mov.w	r3, #0	; 0x0
    9666:	70bb      	strb	r3, [r7, #2]
    9668:	4610      	mov	r0, r2
    966a:	4913      	ldr	r1, [pc, #76]	(96b8 <_ZN13CommandAllerA6updateEv+0x768>)
    966c:	f00f fc9a 	bl	18fa4 <__aeabi_fcmpeq>
    9670:	4603      	mov	r3, r0
    9672:	2b00      	cmp	r3, #0
    9674:	d102      	bne.n	967c <_ZN13CommandAllerA6updateEv+0x72c>
    9676:	f04f 0301 	mov.w	r3, #1	; 0x1
    967a:	70bb      	strb	r3, [r7, #2]
    967c:	78bb      	ldrb	r3, [r7, #2]
    967e:	613b      	str	r3, [r7, #16]
    9680:	e00e      	b.n	96a0 <_ZN13CommandAllerA6updateEv+0x750>
    9682:	f04f 0300 	mov.w	r3, #0	; 0x0
    9686:	707b      	strb	r3, [r7, #1]
    9688:	6f78      	ldr	r0, [r7, #116]
    968a:	490b      	ldr	r1, [pc, #44]	(96b8 <_ZN13CommandAllerA6updateEv+0x768>)
    968c:	f00f fc8a 	bl	18fa4 <__aeabi_fcmpeq>
    9690:	4603      	mov	r3, r0
    9692:	2b00      	cmp	r3, #0
    9694:	d102      	bne.n	969c <_ZN13CommandAllerA6updateEv+0x74c>
    9696:	f04f 0301 	mov.w	r3, #1	; 0x1
    969a:	707b      	strb	r3, [r7, #1]
    969c:	787b      	ldrb	r3, [r7, #1]
    969e:	613b      	str	r3, [r7, #16]
    96a0:	693b      	ldr	r3, [r7, #16]
    96a2:	2b00      	cmp	r3, #0
    96a4:	d002      	beq.n	96ac <_ZN13CommandAllerA6updateEv+0x75c>
                linSpeed = linSpeedVisee;
    96a6:	697a      	ldr	r2, [r7, #20]
    96a8:	6f7b      	ldr	r3, [r7, #116]
    96aa:	6193      	str	r3, [r2, #24]
        }
    }
}
    96ac:	f107 0778 	add.w	r7, r7, #120	; 0x78
    96b0:	46bd      	mov	sp, r7
    96b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    96b6:	46c0      	nop			(mov r8, r8)
    96b8:	00000000 	.word	0x00000000
    96bc:	c0000000 	.word	0xc0000000
    96c0:	41200000 	.word	0x41200000
    96c4:	3f7851ec 	.word	0x3f7851ec

000096c8 <_ZN18CommandAllerEnArcA6updateEv>:
        cote = SGN_POS;
    else
        cote = SGN_NEG;
}

void CommandAllerEnArcA::update()
    96c8:	b580      	push	{r7, lr}
    96ca:	b094      	sub	sp, #80
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
{
    float accAngMax = ACCELERATION_ANGULAIRE_MAX;
    96d0:	4b20      	ldr	r3, [pc, #128]	(9754 <_ZN18CommandAllerEnArcA6updateEv+0x8c>)
    96d2:	637b      	str	r3, [r7, #52]
    float vitAngMax = VITESSE_ANGULAIRE_MAX;
    96d4:	4b20      	ldr	r3, [pc, #128]	(9758 <_ZN18CommandAllerEnArcA6updateEv+0x90>)
    96d6:	63bb      	str	r3, [r7, #56]
    float accLinMax = ACCELERATION_LINEAIRE_MAX;
    96d8:	4b20      	ldr	r3, [pc, #128]	(975c <_ZN18CommandAllerEnArcA6updateEv+0x94>)
    96da:	63fb      	str	r3, [r7, #60]
    float decLinMax = DECELERATION_LINEAIRE_MAX;
    96dc:	4b20      	ldr	r3, [pc, #128]	(9760 <_ZN18CommandAllerEnArcA6updateEv+0x98>)
    96de:	643b      	str	r3, [r7, #64]
    float vitLinMax = vMax;//VITESSE_LINEAIRE_MAX;
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	68db      	ldr	r3, [r3, #12]
    96e4:	647b      	str	r3, [r7, #68]

    float angle = Odometrie::odometrie->getPos().getAngle();
    96e6:	4b1f      	ldr	r3, [pc, #124]	(9764 <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    96e8:	681a      	ldr	r2, [r3, #0]
    96ea:	f107 0314 	add.w	r3, r7, #20	; 0x14
    96ee:	4618      	mov	r0, r3
    96f0:	4611      	mov	r1, r2
    96f2:	f000 f85d 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    96f6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    96fa:	4618      	mov	r0, r3
    96fc:	f005 f9e0 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    9700:	4603      	mov	r3, r0
    9702:	64bb      	str	r3, [r7, #72]
    Position pos = Odometrie::odometrie->getPos().getPosition();
    9704:	4b17      	ldr	r3, [pc, #92]	(9764 <_ZN18CommandAllerEnArcA6updateEv+0x9c>)
    9706:	681a      	ldr	r2, [r3, #0]
    9708:	f107 0320 	add.w	r3, r7, #32	; 0x20
    970c:	4618      	mov	r0, r3
    970e:	4611      	mov	r1, r2
    9710:	f000 f84e 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    9714:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9718:	f107 0220 	add.w	r2, r7, #32	; 0x20
    971c:	4618      	mov	r0, r3
    971e:	4611      	mov	r1, r2
    9720:	f005 f9bc 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>

    float rayon = (centre-but).getNorme();
    9724:	687b      	ldr	r3, [r7, #4]
    9726:	f103 0220 	add.w	r2, r3, #32	; 0x20
    972a:	687b      	ldr	r3, [r7, #4]
    972c:	f103 0c04 	add.w	ip, r3, #4	; 0x4
    9730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9734:	4618      	mov	r0, r3
    9736:	4611      	mov	r1, r2
    9738:	4662      	mov	r2, ip
    973a:	f004 ffe1 	bl	e700 <_ZNK8PositionmiERKS_>
    973e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9742:	4618      	mov	r0, r3
    9744:	f005 f8ea 	bl	e91c <_ZNK8Position8getNormeEv>
    9748:	4603      	mov	r3, r0
    974a:	64fb      	str	r3, [r7, #76]
        angSpeed = linSpeed/rVise;
    else if (abs(linSpeed) > abs(rVise*angSpeed))
        linSpeed = rVise*angSpeed;*/


}
    974c:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9750:	46bd      	mov	sp, r7
    9752:	bd80      	pop	{r7, pc}
    9754:	3983126f 	.word	0x3983126f
    9758:	3cf5c28f 	.word	0x3cf5c28f
    975c:	3ccccccd 	.word	0x3ccccccd
    9760:	3ca3d70a 	.word	0x3ca3d70a
    9764:	20000570 	.word	0x20000570

00009768 <_ZNK9Odometrie19getVitesseAngulaireEv>:
PositionPlusAngle Odometrie::getPos() const
{
    return positionPlusAngle;
}

Angle Odometrie::getVitesseAngulaire() const
    9768:	b480      	push	{r7}
    976a:	b083      	sub	sp, #12
    976c:	af00      	add	r7, sp, #0
    976e:	6078      	str	r0, [r7, #4]
{
    return vitesseAngulaire;
    9770:	687b      	ldr	r3, [r7, #4]
    9772:	699b      	ldr	r3, [r3, #24]
}
    9774:	4618      	mov	r0, r3
    9776:	f107 070c 	add.w	r7, r7, #12	; 0xc
    977a:	46bd      	mov	sp, r7
    977c:	bc80      	pop	{r7}
    977e:	4770      	bx	lr

00009780 <_ZNK9Odometrie18getVitesseLineaireEv>:

Distance Odometrie::getVitesseLineaire() const
    9780:	b480      	push	{r7}
    9782:	b083      	sub	sp, #12
    9784:	af00      	add	r7, sp, #0
    9786:	6078      	str	r0, [r7, #4]
{
    return vitesseLineaire;
    9788:	687b      	ldr	r3, [r7, #4]
    978a:	695b      	ldr	r3, [r3, #20]
}
    978c:	4618      	mov	r0, r3
    978e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    9792:	46bd      	mov	sp, r7
    9794:	bc80      	pop	{r7}
    9796:	4770      	bx	lr

00009798 <_ZNK9Odometrie16getAbsoluteAngleEv>:

Angle Odometrie::getAbsoluteAngle() const
    9798:	b480      	push	{r7}
    979a:	b083      	sub	sp, #12
    979c:	af00      	add	r7, sp, #0
    979e:	6078      	str	r0, [r7, #4]
{
    return absAngle;
    97a0:	687b      	ldr	r3, [r7, #4]
    97a2:	6f1b      	ldr	r3, [r3, #112]
}
    97a4:	4618      	mov	r0, r3
    97a6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    97aa:	46bd      	mov	sp, r7
    97ac:	bc80      	pop	{r7}
    97ae:	4770      	bx	lr

000097b0 <_ZNK9Odometrie6getPosEv>:
    posY = p.getPosition().getY();
    ang = p.getAngle();
    positionPlusAngle = p;
}

PositionPlusAngle Odometrie::getPos() const
    97b0:	b590      	push	{r4, r7, lr}
    97b2:	b083      	sub	sp, #12
    97b4:	af00      	add	r7, sp, #0
    97b6:	4604      	mov	r4, r0
    97b8:	6079      	str	r1, [r7, #4]
{
    return positionPlusAngle;
    97ba:	4622      	mov	r2, r4
    97bc:	687b      	ldr	r3, [r7, #4]
    97be:	f103 0308 	add.w	r3, r3, #8	; 0x8
    97c2:	4610      	mov	r0, r2
    97c4:	4619      	mov	r1, r3
    97c6:	f005 f951 	bl	ea6c <_ZN17PositionPlusAngleC1ERKS_>
}
    97ca:	4620      	mov	r0, r4
    97cc:	4620      	mov	r0, r4
    97ce:	f107 070c 	add.w	r7, r7, #12	; 0xc
    97d2:	46bd      	mov	sp, r7
    97d4:	bd90      	pop	{r4, r7, pc}
    97d6:	46c0      	nop			(mov r8, r8)

000097d8 <_ZN9Odometrie6setPosERK17PositionPlusAngle>:
    positionPlusAngle.setX(posX);
    positionPlusAngle.setY(posY);

}

void Odometrie::setPos(const PositionPlusAngle& p)
    97d8:	b580      	push	{r7, lr}
    97da:	b086      	sub	sp, #24
    97dc:	af00      	add	r7, sp, #0
    97de:	6078      	str	r0, [r7, #4]
    97e0:	6039      	str	r1, [r7, #0]
{
    posX = p.getPosition().getX();
    97e2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    97e6:	4618      	mov	r0, r3
    97e8:	6839      	ldr	r1, [r7, #0]
    97ea:	f005 f957 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    97ee:	f107 0308 	add.w	r3, r7, #8	; 0x8
    97f2:	4618      	mov	r0, r3
    97f4:	f004 ff2a 	bl	e64c <_ZNK8Position4getXEv>
    97f8:	4603      	mov	r3, r0
    97fa:	4618      	mov	r0, r3
    97fc:	f00e fdce 	bl	1839c <__aeabi_f2d>
    9800:	4602      	mov	r2, r0
    9802:	460b      	mov	r3, r1
    9804:	6879      	ldr	r1, [r7, #4]
    9806:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = p.getPosition().getY();
    980a:	f107 0310 	add.w	r3, r7, #16	; 0x10
    980e:	4618      	mov	r0, r3
    9810:	6839      	ldr	r1, [r7, #0]
    9812:	f005 f943 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    9816:	f107 0310 	add.w	r3, r7, #16	; 0x10
    981a:	4618      	mov	r0, r3
    981c:	f004 ff22 	bl	e664 <_ZNK8Position4getYEv>
    9820:	4603      	mov	r3, r0
    9822:	4618      	mov	r0, r3
    9824:	f00e fdba 	bl	1839c <__aeabi_f2d>
    9828:	4602      	mov	r2, r0
    982a:	460b      	mov	r3, r1
    982c:	6879      	ldr	r1, [r7, #4]
    982e:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = p.getAngle();
    9832:	6838      	ldr	r0, [r7, #0]
    9834:	f005 f944 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    9838:	4603      	mov	r3, r0
    983a:	4618      	mov	r0, r3
    983c:	f00e fdae 	bl	1839c <__aeabi_f2d>
    9840:	4602      	mov	r2, r0
    9842:	460b      	mov	r3, r1
    9844:	6879      	ldr	r1, [r7, #4]
    9846:	e9c1 231a 	strd	r2, r3, [r1, #104]
    positionPlusAngle = p;
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9850:	4618      	mov	r0, r3
    9852:	6839      	ldr	r1, [r7, #0]
    9854:	f005 f97a 	bl	eb4c <_ZN17PositionPlusAngleaSERKS_>
}
    9858:	f107 0718 	add.w	r7, r7, #24	; 0x18
    985c:	46bd      	mov	sp, r7
    985e:	bd80      	pop	{r7, pc}

00009860 <_ZN9Odometrie8setAngleEf>:
    setPos(posPA);

    odometrie->posY = y;
}

void Odometrie::setAngle(Angle a)
    9860:	b590      	push	{r4, r7, lr}
    9862:	b087      	sub	sp, #28
    9864:	af00      	add	r7, sp, #0
    9866:	6078      	str	r0, [r7, #4]
    9868:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    986a:	f107 030c 	add.w	r3, r7, #12	; 0xc
    986e:	4618      	mov	r0, r3
    9870:	6879      	ldr	r1, [r7, #4]
    9872:	f7ff ff9d 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    posPA.setAngle(a);
    9876:	f107 030c 	add.w	r3, r7, #12	; 0xc
    987a:	4618      	mov	r0, r3
    987c:	6839      	ldr	r1, [r7, #0]
    987e:	f005 f92b 	bl	ead8 <_ZN17PositionPlusAngle8setAngleEf>
    setPos(posPA);
    9882:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9886:	6878      	ldr	r0, [r7, #4]
    9888:	4619      	mov	r1, r3
    988a:	f7ff ffa5 	bl	97d8 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->ang = a;
    988e:	4b06      	ldr	r3, [pc, #24]	(98a8 <_ZN9Odometrie8setAngleEf+0x48>)
    9890:	681c      	ldr	r4, [r3, #0]
    9892:	6838      	ldr	r0, [r7, #0]
    9894:	f00e fd82 	bl	1839c <__aeabi_f2d>
    9898:	4602      	mov	r2, r0
    989a:	460b      	mov	r3, r1
    989c:	e9c4 231a 	strd	r2, r3, [r4, #104]
}
    98a0:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    98a4:	46bd      	mov	sp, r7
    98a6:	bd90      	pop	{r4, r7, pc}
    98a8:	20000570 	.word	0x20000570

000098ac <_ZN9Odometrie4setYEf>:
    posPA.setPosition(pos);
    setPos(posPA);
    odometrie->posX = x;
}

void Odometrie::setY(Distance y)
    98ac:	b590      	push	{r4, r7, lr}
    98ae:	b089      	sub	sp, #36
    98b0:	af00      	add	r7, sp, #0
    98b2:	6078      	str	r0, [r7, #4]
    98b4:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    98b6:	f107 0314 	add.w	r3, r7, #20	; 0x14
    98ba:	4618      	mov	r0, r3
    98bc:	6879      	ldr	r1, [r7, #4]
    98be:	f7ff ff77 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    98c2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    98c6:	f107 0214 	add.w	r2, r7, #20	; 0x14
    98ca:	4618      	mov	r0, r3
    98cc:	4611      	mov	r1, r2
    98ce:	f005 f8e5 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setY(y);
    98d2:	f107 030c 	add.w	r3, r7, #12	; 0xc
    98d6:	4618      	mov	r0, r3
    98d8:	6839      	ldr	r1, [r7, #0]
    98da:	f004 fedd 	bl	e698 <_ZN8Position4setYEf>
    posPA.setPosition(pos);
    98de:	f107 0314 	add.w	r3, r7, #20	; 0x14
    98e2:	f107 020c 	add.w	r2, r7, #12	; 0xc
    98e6:	4618      	mov	r0, r3
    98e8:	4611      	mov	r1, r2
    98ea:	f005 f91f 	bl	eb2c <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    98ee:	f107 0314 	add.w	r3, r7, #20	; 0x14
    98f2:	6878      	ldr	r0, [r7, #4]
    98f4:	4619      	mov	r1, r3
    98f6:	f7ff ff6f 	bl	97d8 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    odometrie->posY = y;
    98fa:	4b06      	ldr	r3, [pc, #24]	(9914 <_ZN9Odometrie4setYEf+0x68>)
    98fc:	681c      	ldr	r4, [r3, #0]
    98fe:	6838      	ldr	r0, [r7, #0]
    9900:	f00e fd4c 	bl	1839c <__aeabi_f2d>
    9904:	4602      	mov	r2, r0
    9906:	460b      	mov	r3, r1
    9908:	e9c4 2318 	strd	r2, r3, [r4, #96]
}
    990c:	f107 0724 	add.w	r7, r7, #36	; 0x24
    9910:	46bd      	mov	sp, r7
    9912:	bd90      	pop	{r4, r7, pc}
    9914:	20000570 	.word	0x20000570

00009918 <_ZN9Odometrie4setXEf>:
Angle Odometrie::getAbsoluteAngle() const
{
    return absAngle;
}

void Odometrie::setX(Distance x)
    9918:	b590      	push	{r4, r7, lr}
    991a:	b089      	sub	sp, #36
    991c:	af00      	add	r7, sp, #0
    991e:	6078      	str	r0, [r7, #4]
    9920:	6039      	str	r1, [r7, #0]
{
    PositionPlusAngle posPA = getPos();
    9922:	f107 0314 	add.w	r3, r7, #20	; 0x14
    9926:	4618      	mov	r0, r3
    9928:	6879      	ldr	r1, [r7, #4]
    992a:	f7ff ff41 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    Position pos = posPA.getPosition();
    992e:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9932:	f107 0214 	add.w	r2, r7, #20	; 0x14
    9936:	4618      	mov	r0, r3
    9938:	4611      	mov	r1, r2
    993a:	f005 f8af 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    pos.setX(x);
    993e:	f107 030c 	add.w	r3, r7, #12	; 0xc
    9942:	4618      	mov	r0, r3
    9944:	6839      	ldr	r1, [r7, #0]
    9946:	f004 fe99 	bl	e67c <_ZN8Position4setXEf>
    posPA.setPosition(pos);
    994a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    994e:	f107 020c 	add.w	r2, r7, #12	; 0xc
    9952:	4618      	mov	r0, r3
    9954:	4611      	mov	r1, r2
    9956:	f005 f8e9 	bl	eb2c <_ZN17PositionPlusAngle11setPositionERK8Position>
    setPos(posPA);
    995a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    995e:	6878      	ldr	r0, [r7, #4]
    9960:	4619      	mov	r1, r3
    9962:	f7ff ff39 	bl	97d8 <_ZN9Odometrie6setPosERK17PositionPlusAngle>
    odometrie->posX = x;
    9966:	4b06      	ldr	r3, [pc, #24]	(9980 <_ZN9Odometrie4setXEf+0x68>)
    9968:	681c      	ldr	r4, [r3, #0]
    996a:	6838      	ldr	r0, [r7, #0]
    996c:	f00e fd16 	bl	1839c <__aeabi_f2d>
    9970:	4602      	mov	r2, r0
    9972:	460b      	mov	r3, r1
    9974:	e9c4 2316 	strd	r2, r3, [r4, #88]
}
    9978:	f107 0724 	add.w	r7, r7, #36	; 0x24
    997c:	46bd      	mov	sp, r7
    997e:	bd90      	pop	{r4, r7, pc}
    9980:	20000570 	.word	0x20000570

00009984 <_ZN9Odometrie6updateEv>:
{
    delete roueCodeuseGauche;
    delete roueCodeuseDroite;
}

void Odometrie::update()
    9984:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    9988:	b094      	sub	sp, #80
    998a:	af00      	add	r7, sp, #0
    998c:	6078      	str	r0, [r7, #4]
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    998e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9992:	633b      	str	r3, [r7, #48]
    9994:	e027      	b.n	99e6 <_ZN9Odometrie6updateEv+0x62>
    {
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
    9996:	6b3b      	ldr	r3, [r7, #48]
    9998:	f103 0001 	add.w	r0, r3, #1	; 0x1
    999c:	6b3b      	ldr	r3, [r7, #48]
    999e:	687a      	ldr	r2, [r7, #4]
    99a0:	f103 0308 	add.w	r3, r3, #8	; 0x8
    99a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99a8:	4413      	add	r3, r2
    99aa:	6859      	ldr	r1, [r3, #4]
    99ac:	687a      	ldr	r2, [r7, #4]
    99ae:	f100 0308 	add.w	r3, r0, #8	; 0x8
    99b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99b6:	4413      	add	r3, r2
    99b8:	6059      	str	r1, [r3, #4]
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    99ba:	6b3b      	ldr	r3, [r7, #48]
    99bc:	f103 0001 	add.w	r0, r3, #1	; 0x1
    99c0:	6b3b      	ldr	r3, [r7, #48]
    99c2:	687a      	ldr	r2, [r7, #4]
    99c4:	f103 0306 	add.w	r3, r3, #6	; 0x6
    99c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99cc:	4413      	add	r3, r2
    99ce:	6859      	ldr	r1, [r3, #4]
    99d0:	687a      	ldr	r2, [r7, #4]
    99d2:	f100 0306 	add.w	r3, r0, #6	; 0x6
    99d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    99da:	4413      	add	r3, r2
    99dc:	6059      	str	r1, [r3, #4]
}

void Odometrie::update()
{
    // pour filtrer les ticks
    for (int i = tailleTabPrevTicks-2 ; i >= 0; i--)
    99de:	6b3b      	ldr	r3, [r7, #48]
    99e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    99e4:	633b      	str	r3, [r7, #48]
    99e6:	6b3b      	ldr	r3, [r7, #48]
    99e8:	2b00      	cmp	r3, #0
    99ea:	dad4      	bge.n	9996 <_ZN9Odometrie6updateEv+0x12>
        prevDeltaTicksRoueDroite[i+1] = prevDeltaTicksRoueDroite[i];
        prevDeltaTicksRoueGauche[i+1] = prevDeltaTicksRoueGauche[i];
    }

    // On a le moins pour prendre en compte que les deux roux codeuses sont montées dans des sens opposés car pas du même coté du robot
    prevDeltaTicksRoueDroite[0] = -roueCodeuseDroite->getTickValue();
    99ec:	687b      	ldr	r3, [r7, #4]
    99ee:	681b      	ldr	r3, [r3, #0]
    99f0:	4618      	mov	r0, r3
    99f2:	f002 fe41 	bl	c678 <_ZN22QuadratureCoderHandler12getTickValueEv>
    99f6:	4603      	mov	r3, r0
    99f8:	b29b      	uxth	r3, r3
    99fa:	b21b      	sxth	r3, r3
    99fc:	f1c3 0200 	rsb	r2, r3, #0	; 0x0
    9a00:	687b      	ldr	r3, [r7, #4]
    9a02:	625a      	str	r2, [r3, #36]
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
        prevDeltaTicksRoueGauche[0] = -roueCodeuseGauche->getTickValue();
    #else
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	685b      	ldr	r3, [r3, #4]
    9a08:	4618      	mov	r0, r3
    9a0a:	f002 fe35 	bl	c678 <_ZN22QuadratureCoderHandler12getTickValueEv>
    9a0e:	4603      	mov	r3, r0
    9a10:	b29b      	uxth	r3, r3
    9a12:	b21a      	sxth	r2, r3
    9a14:	687b      	ldr	r3, [r7, #4]
    9a16:	61da      	str	r2, [r3, #28]
    #endif

    int32_t sommeGauche = 0;
    9a18:	f04f 0300 	mov.w	r3, #0	; 0x0
    9a1c:	60bb      	str	r3, [r7, #8]
    int32_t sommeDroite = 0;
    9a1e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9a22:	60fb      	str	r3, [r7, #12]
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9a24:	f04f 0300 	mov.w	r3, #0	; 0x0
    9a28:	637b      	str	r3, [r7, #52]
    9a2a:	e019      	b.n	9a60 <_ZN9Odometrie6updateEv+0xdc>
    {
        sommeGauche += prevDeltaTicksRoueGauche[i];
    9a2c:	6b7b      	ldr	r3, [r7, #52]
    9a2e:	687a      	ldr	r2, [r7, #4]
    9a30:	f103 0306 	add.w	r3, r3, #6	; 0x6
    9a34:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9a38:	4413      	add	r3, r2
    9a3a:	685a      	ldr	r2, [r3, #4]
    9a3c:	68bb      	ldr	r3, [r7, #8]
    9a3e:	4413      	add	r3, r2
    9a40:	60bb      	str	r3, [r7, #8]
        sommeDroite += prevDeltaTicksRoueDroite[i];
    9a42:	6b7b      	ldr	r3, [r7, #52]
    9a44:	687a      	ldr	r2, [r7, #4]
    9a46:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9a4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9a4e:	4413      	add	r3, r2
    9a50:	685a      	ldr	r2, [r3, #4]
    9a52:	68fb      	ldr	r3, [r7, #12]
    9a54:	4413      	add	r3, r2
    9a56:	60fb      	str	r3, [r7, #12]
        prevDeltaTicksRoueGauche[0] = roueCodeuseGauche->getTickValue();
    #endif

    int32_t sommeGauche = 0;
    int32_t sommeDroite = 0;
    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9a58:	6b7b      	ldr	r3, [r7, #52]
    9a5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    9a5e:	637b      	str	r3, [r7, #52]
    9a60:	6b7b      	ldr	r3, [r7, #52]
    9a62:	2b01      	cmp	r3, #1
    9a64:	dde2      	ble.n	9a2c <_ZN9Odometrie6updateEv+0xa8>
        sommeGauche += prevDeltaTicksRoueGauche[i];
        sommeDroite += prevDeltaTicksRoueDroite[i];
    }

    // double filteredDeltaTicksRoueGauche = (deltaTicksRoueGauche+prevDeltaTicksRoueGauche)/2.0;
    double filteredDeltaTicksRoueGauche = (double)sommeGauche/(double)tailleTabPrevTicks;
    9a66:	68b8      	ldr	r0, [r7, #8]
    9a68:	f00e fc86 	bl	18378 <__aeabi_i2d>
    9a6c:	4602      	mov	r2, r0
    9a6e:	460b      	mov	r3, r1
    9a70:	4610      	mov	r0, r2
    9a72:	4619      	mov	r1, r3
    9a74:	f04f 0200 	mov.w	r2, #0	; 0x0
    9a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a7c:	f00e fe0c 	bl	18698 <__aeabi_ddiv>
    9a80:	4602      	mov	r2, r0
    9a82:	460b      	mov	r3, r1
    9a84:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // double filteredDeltaTicksRoueDroite = (deltaTicksRoueDroite+prevDeltaTicksRoueDroite)/2.0;
    double filteredDeltaTicksRoueDroite = (double)sommeDroite/(double)tailleTabPrevTicks;
    9a88:	68f8      	ldr	r0, [r7, #12]
    9a8a:	f00e fc75 	bl	18378 <__aeabi_i2d>
    9a8e:	4602      	mov	r2, r0
    9a90:	460b      	mov	r3, r1
    9a92:	4610      	mov	r0, r2
    9a94:	4619      	mov	r1, r3
    9a96:	f04f 0200 	mov.w	r2, #0	; 0x0
    9a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9a9e:	f00e fdfb 	bl	18698 <__aeabi_ddiv>
    9aa2:	4602      	mov	r2, r0
    9aa4:	460b      	mov	r3, r1
    9aa6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double tmpDeltaAngle = (filteredDeltaTicksRoueGauche-filteredDeltaTicksRoueDroite)*coeffAngle;  // cf coef angle
    9aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    9aae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9ab2:	f00e fb13 	bl	180dc <__aeabi_dsub>
    9ab6:	4602      	mov	r2, r0
    9ab8:	460b      	mov	r3, r1
    9aba:	4610      	mov	r0, r2
    9abc:	4619      	mov	r1, r3
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]
    9ac4:	f00e fcbe 	bl	18444 <__aeabi_dmul>
    9ac8:	4602      	mov	r2, r0
    9aca:	460b      	mov	r3, r1
    9acc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double tmpDist = (filteredDeltaTicksRoueGauche+filteredDeltaTicksRoueDroite)*coeffDistance;     // soit le nombre moyen de tours de roue * le perimetre de la roue
    9ad0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    9ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9ad8:	f00e fb02 	bl	180e0 <__adddf3>
    9adc:	4602      	mov	r2, r0
    9ade:	460b      	mov	r3, r1
    9ae0:	4610      	mov	r0, r2
    9ae2:	4619      	mov	r1, r3
    9ae4:	687b      	ldr	r3, [r7, #4]
    9ae6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    9aea:	f00e fcab 	bl	18444 <__aeabi_dmul>
    9aee:	4602      	mov	r2, r0
    9af0:	460b      	mov	r3, r1
    9af2:	e9c7 230a 	strd	r2, r3, [r7, #40]

    vitesseLineaire = Distance(tmpDist);
    9af6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    9afa:	f00e ff63 	bl	189c4 <__aeabi_d2f>
    9afe:	4602      	mov	r2, r0
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	615a      	str	r2, [r3, #20]

    vitesseAngulaire = Angle(tmpDeltaAngle);
    9b04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9b08:	f00e ff5c 	bl	189c4 <__aeabi_d2f>
    9b0c:	4602      	mov	r2, r0
    9b0e:	687b      	ldr	r3, [r7, #4]
    9b10:	619a      	str	r2, [r3, #24]

	//positionPlusAngle.setAngle(positionPlusAngle.getAngle()+vitesseAngulaire);
	//positionPlusAngle.setPosition(positionPlusAngle.getPosition() + Position(tmpDist*cos(positionPlusAngle.getAngle()), tmpDist*sin(positionPlusAngle.getAngle())));    //mettre sinx si ça marche pas et non sin


    if (tmpDeltaAngle == 0.0)
    9b12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9b16:	f04f 0200 	mov.w	r2, #0	; 0x0
    9b1a:	f04f 0300 	mov.w	r3, #0	; 0x0
    9b1e:	f00e fef7 	bl	18910 <__aeabi_dcmpeq>
    9b22:	4603      	mov	r3, r0
    9b24:	2b00      	cmp	r3, #0
    9b26:	d03a      	beq.n	9b9e <_ZN9Odometrie6updateEv+0x21a>
    {
        posX += tmpDist*cos(ang);
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	e9d3 4516 	ldrd	r4, r5, [r3, #88]
    9b2e:	687b      	ldr	r3, [r7, #4]
    9b30:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9b34:	4610      	mov	r0, r2
    9b36:	4619      	mov	r1, r3
    9b38:	f012 fc32 	bl	1c3a0 <cos>
    9b3c:	4602      	mov	r2, r0
    9b3e:	460b      	mov	r3, r1
    9b40:	4610      	mov	r0, r2
    9b42:	4619      	mov	r1, r3
    9b44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    9b48:	f00e fc7c 	bl	18444 <__aeabi_dmul>
    9b4c:	4602      	mov	r2, r0
    9b4e:	460b      	mov	r3, r1
    9b50:	4620      	mov	r0, r4
    9b52:	4629      	mov	r1, r5
    9b54:	f00e fac4 	bl	180e0 <__adddf3>
    9b58:	4602      	mov	r2, r0
    9b5a:	460b      	mov	r3, r1
    9b5c:	6879      	ldr	r1, [r7, #4]
    9b5e:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += tmpDist*sin(ang);
    9b62:	687b      	ldr	r3, [r7, #4]
    9b64:	e9d3 4518 	ldrd	r4, r5, [r3, #96]
    9b68:	687b      	ldr	r3, [r7, #4]
    9b6a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9b6e:	4610      	mov	r0, r2
    9b70:	4619      	mov	r1, r3
    9b72:	f012 fc57 	bl	1c424 <sin>
    9b76:	4602      	mov	r2, r0
    9b78:	460b      	mov	r3, r1
    9b7a:	4610      	mov	r0, r2
    9b7c:	4619      	mov	r1, r3
    9b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]
    9b82:	f00e fc5f 	bl	18444 <__aeabi_dmul>
    9b86:	4602      	mov	r2, r0
    9b88:	460b      	mov	r3, r1
    9b8a:	4620      	mov	r0, r4
    9b8c:	4629      	mov	r1, r5
    9b8e:	f00e faa7 	bl	180e0 <__adddf3>
    9b92:	4602      	mov	r2, r0
    9b94:	460b      	mov	r3, r1
    9b96:	6879      	ldr	r1, [r7, #4]
    9b98:	e9c1 2318 	strd	r2, r3, [r1, #96]
    9b9c:	e0f3      	b.n	9d86 <_ZN9Odometrie6updateEv+0x402>
    }
    else
    {
        double rayonCourbure = tmpDist/tmpDeltaAngle;
    9b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]
    9ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    9ba6:	f00e fd77 	bl	18698 <__aeabi_ddiv>
    9baa:	4602      	mov	r2, r0
    9bac:	460b      	mov	r3, r1
    9bae:	e9c7 230e 	strd	r2, r3, [r7, #56]
        double distAvancee = rayonCourbure*sin(tmpDeltaAngle);
    9bb2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9bb6:	f012 fc35 	bl	1c424 <sin>
    9bba:	4602      	mov	r2, r0
    9bbc:	460b      	mov	r3, r1
    9bbe:	4610      	mov	r0, r2
    9bc0:	4619      	mov	r1, r3
    9bc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    9bc6:	f00e fc3d 	bl	18444 <__aeabi_dmul>
    9bca:	4602      	mov	r2, r0
    9bcc:	460b      	mov	r3, r1
    9bce:	e9c7 2310 	strd	r2, r3, [r7, #64]
        double distTranslatee = rayonCourbure*(1.0-cos(tmpDeltaAngle));
    9bd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    9bd6:	f012 fbe3 	bl	1c3a0 <cos>
    9bda:	4602      	mov	r2, r0
    9bdc:	460b      	mov	r3, r1
    9bde:	f04f 0000 	mov.w	r0, #0	; 0x0
    9be2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    9be6:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
    9bea:	f00e fa77 	bl	180dc <__aeabi_dsub>
    9bee:	4602      	mov	r2, r0
    9bf0:	460b      	mov	r3, r1
    9bf2:	4610      	mov	r0, r2
    9bf4:	4619      	mov	r1, r3
    9bf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]
    9bfa:	f00e fc23 	bl	18444 <__aeabi_dmul>
    9bfe:	4602      	mov	r2, r0
    9c00:	460b      	mov	r3, r1
    9c02:	e9c7 2312 	strd	r2, r3, [r7, #72]

        posX += distAvancee*cos(ang)-distTranslatee*sin(ang);
    9c06:	687b      	ldr	r3, [r7, #4]
    9c08:	e9d3 8916 	ldrd	r8, r9, [r3, #88]
    9c0c:	687b      	ldr	r3, [r7, #4]
    9c0e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9c12:	4610      	mov	r0, r2
    9c14:	4619      	mov	r1, r3
    9c16:	f012 fbc3 	bl	1c3a0 <cos>
    9c1a:	4602      	mov	r2, r0
    9c1c:	460b      	mov	r3, r1
    9c1e:	4610      	mov	r0, r2
    9c20:	4619      	mov	r1, r3
    9c22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    9c26:	f00e fc0d 	bl	18444 <__aeabi_dmul>
    9c2a:	4602      	mov	r2, r0
    9c2c:	460b      	mov	r3, r1
    9c2e:	4614      	mov	r4, r2
    9c30:	461d      	mov	r5, r3
    9c32:	687b      	ldr	r3, [r7, #4]
    9c34:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9c38:	4610      	mov	r0, r2
    9c3a:	4619      	mov	r1, r3
    9c3c:	f012 fbf2 	bl	1c424 <sin>
    9c40:	4602      	mov	r2, r0
    9c42:	460b      	mov	r3, r1
    9c44:	4610      	mov	r0, r2
    9c46:	4619      	mov	r1, r3
    9c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    9c4c:	f00e fbfa 	bl	18444 <__aeabi_dmul>
    9c50:	4602      	mov	r2, r0
    9c52:	460b      	mov	r3, r1
    9c54:	4620      	mov	r0, r4
    9c56:	4629      	mov	r1, r5
    9c58:	f00e fa40 	bl	180dc <__aeabi_dsub>
    9c5c:	4602      	mov	r2, r0
    9c5e:	460b      	mov	r3, r1
    9c60:	4640      	mov	r0, r8
    9c62:	4649      	mov	r1, r9
    9c64:	f00e fa3c 	bl	180e0 <__adddf3>
    9c68:	4602      	mov	r2, r0
    9c6a:	460b      	mov	r3, r1
    9c6c:	6879      	ldr	r1, [r7, #4]
    9c6e:	e9c1 2316 	strd	r2, r3, [r1, #88]
        posY += distAvancee*sin(ang)+distTranslatee*cos(ang);
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	e9d3 8918 	ldrd	r8, r9, [r3, #96]
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9c7e:	4610      	mov	r0, r2
    9c80:	4619      	mov	r1, r3
    9c82:	f012 fbcf 	bl	1c424 <sin>
    9c86:	4602      	mov	r2, r0
    9c88:	460b      	mov	r3, r1
    9c8a:	4610      	mov	r0, r2
    9c8c:	4619      	mov	r1, r3
    9c8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]
    9c92:	f00e fbd7 	bl	18444 <__aeabi_dmul>
    9c96:	4602      	mov	r2, r0
    9c98:	460b      	mov	r3, r1
    9c9a:	4614      	mov	r4, r2
    9c9c:	461d      	mov	r5, r3
    9c9e:	687b      	ldr	r3, [r7, #4]
    9ca0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9ca4:	4610      	mov	r0, r2
    9ca6:	4619      	mov	r1, r3
    9ca8:	f012 fb7a 	bl	1c3a0 <cos>
    9cac:	4602      	mov	r2, r0
    9cae:	460b      	mov	r3, r1
    9cb0:	4610      	mov	r0, r2
    9cb2:	4619      	mov	r1, r3
    9cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]
    9cb8:	f00e fbc4 	bl	18444 <__aeabi_dmul>
    9cbc:	4602      	mov	r2, r0
    9cbe:	460b      	mov	r3, r1
    9cc0:	4620      	mov	r0, r4
    9cc2:	4629      	mov	r1, r5
    9cc4:	f00e fa0c 	bl	180e0 <__adddf3>
    9cc8:	4602      	mov	r2, r0
    9cca:	460b      	mov	r3, r1
    9ccc:	4640      	mov	r0, r8
    9cce:	4649      	mov	r1, r9
    9cd0:	f00e fa06 	bl	180e0 <__adddf3>
    9cd4:	4602      	mov	r2, r0
    9cd6:	460b      	mov	r3, r1
    9cd8:	6879      	ldr	r1, [r7, #4]
    9cda:	e9c1 2318 	strd	r2, r3, [r1, #96]

        ang += vitesseAngulaire;
    9cde:	687b      	ldr	r3, [r7, #4]
    9ce0:	e9d3 451a 	ldrd	r4, r5, [r3, #104]
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	699b      	ldr	r3, [r3, #24]
    9ce8:	4618      	mov	r0, r3
    9cea:	f00e fb57 	bl	1839c <__aeabi_f2d>
    9cee:	4602      	mov	r2, r0
    9cf0:	460b      	mov	r3, r1
    9cf2:	4620      	mov	r0, r4
    9cf4:	4629      	mov	r1, r5
    9cf6:	f00e f9f3 	bl	180e0 <__adddf3>
    9cfa:	4602      	mov	r2, r0
    9cfc:	460b      	mov	r3, r1
    9cfe:	6879      	ldr	r1, [r7, #4]
    9d00:	e9c1 231a 	strd	r2, r3, [r1, #104]
        absAngle += vitesseAngulaire;
    9d04:	687b      	ldr	r3, [r7, #4]
    9d06:	6f1a      	ldr	r2, [r3, #112]
    9d08:	687b      	ldr	r3, [r7, #4]
    9d0a:	699b      	ldr	r3, [r3, #24]
    9d0c:	4610      	mov	r0, r2
    9d0e:	4619      	mov	r1, r3
    9d10:	f00e feae 	bl	18a70 <__addsf3>
    9d14:	4603      	mov	r3, r0
    9d16:	461a      	mov	r2, r3
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	671a      	str	r2, [r3, #112]
        if (ang > M_PI)
    9d1c:	687b      	ldr	r3, [r7, #4]
    9d1e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d22:	4610      	mov	r0, r2
    9d24:	4619      	mov	r1, r3
    9d26:	a232      	add	r2, pc, #200	(adr r2, 9df0 <_ZN9Odometrie6updateEv+0x46c>)
    9d28:	ca0c      	ldmia	r2!, {r2, r3}
    9d2a:	f00e fe19 	bl	18960 <__aeabi_dcmpgt>
    9d2e:	4603      	mov	r3, r0
    9d30:	2b00      	cmp	r3, #0
    9d32:	d00e      	beq.n	9d52 <_ZN9Odometrie6updateEv+0x3ce>
            ang -= 2.0*M_PI;
    9d34:	687b      	ldr	r3, [r7, #4]
    9d36:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d3a:	4610      	mov	r0, r2
    9d3c:	4619      	mov	r1, r3
    9d3e:	a22e      	add	r2, pc, #184	(adr r2, 9df8 <_ZN9Odometrie6updateEv+0x474>)
    9d40:	ca0c      	ldmia	r2!, {r2, r3}
    9d42:	f00e f9cb 	bl	180dc <__aeabi_dsub>
    9d46:	4602      	mov	r2, r0
    9d48:	460b      	mov	r3, r1
    9d4a:	6879      	ldr	r1, [r7, #4]
    9d4c:	e9c1 231a 	strd	r2, r3, [r1, #104]
    9d50:	e019      	b.n	9d86 <_ZN9Odometrie6updateEv+0x402>
        else if (ang < -M_PI)
    9d52:	687b      	ldr	r3, [r7, #4]
    9d54:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d58:	4610      	mov	r0, r2
    9d5a:	4619      	mov	r1, r3
    9d5c:	a228      	add	r2, pc, #160	(adr r2, 9e00 <_ZN9Odometrie6updateEv+0x47c>)
    9d5e:	ca0c      	ldmia	r2!, {r2, r3}
    9d60:	f00e fde0 	bl	18924 <__aeabi_dcmplt>
    9d64:	4603      	mov	r3, r0
    9d66:	2b00      	cmp	r3, #0
    9d68:	d00d      	beq.n	9d86 <_ZN9Odometrie6updateEv+0x402>
            ang += 2.0*M_PI;
    9d6a:	687b      	ldr	r3, [r7, #4]
    9d6c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d70:	4610      	mov	r0, r2
    9d72:	4619      	mov	r1, r3
    9d74:	a220      	add	r2, pc, #128	(adr r2, 9df8 <_ZN9Odometrie6updateEv+0x474>)
    9d76:	ca0c      	ldmia	r2!, {r2, r3}
    9d78:	f00e f9b2 	bl	180e0 <__adddf3>
    9d7c:	4602      	mov	r2, r0
    9d7e:	460b      	mov	r3, r1
    9d80:	6879      	ldr	r1, [r7, #4]
    9d82:	e9c1 231a 	strd	r2, r3, [r1, #104]
    }

    positionPlusAngle.setAngle(ang);
    9d86:	687b      	ldr	r3, [r7, #4]
    9d88:	f103 0408 	add.w	r4, r3, #8	; 0x8
    9d8c:	687b      	ldr	r3, [r7, #4]
    9d8e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]
    9d92:	4610      	mov	r0, r2
    9d94:	4619      	mov	r1, r3
    9d96:	f00e fe15 	bl	189c4 <__aeabi_d2f>
    9d9a:	4603      	mov	r3, r0
    9d9c:	4620      	mov	r0, r4
    9d9e:	4619      	mov	r1, r3
    9da0:	f004 fe9a 	bl	ead8 <_ZN17PositionPlusAngle8setAngleEf>
    positionPlusAngle.setX(posX);
    9da4:	687b      	ldr	r3, [r7, #4]
    9da6:	f103 0408 	add.w	r4, r3, #8	; 0x8
    9daa:	687b      	ldr	r3, [r7, #4]
    9dac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]
    9db0:	4610      	mov	r0, r2
    9db2:	4619      	mov	r1, r3
    9db4:	f00e fe06 	bl	189c4 <__aeabi_d2f>
    9db8:	4603      	mov	r3, r0
    9dba:	4620      	mov	r0, r4
    9dbc:	4619      	mov	r1, r3
    9dbe:	f004 fea7 	bl	eb10 <_ZN17PositionPlusAngle4setXEf>
    positionPlusAngle.setY(posY);
    9dc2:	687b      	ldr	r3, [r7, #4]
    9dc4:	f103 0408 	add.w	r4, r3, #8	; 0x8
    9dc8:	687b      	ldr	r3, [r7, #4]
    9dca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]
    9dce:	4610      	mov	r0, r2
    9dd0:	4619      	mov	r1, r3
    9dd2:	f00e fdf7 	bl	189c4 <__aeabi_d2f>
    9dd6:	4603      	mov	r3, r0
    9dd8:	4620      	mov	r0, r4
    9dda:	4619      	mov	r1, r3
    9ddc:	f004 fe8a 	bl	eaf4 <_ZN17PositionPlusAngle4setYEf>

}
    9de0:	f107 0750 	add.w	r7, r7, #80	; 0x50
    9de4:	46bd      	mov	sp, r7
    9de6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    9dea:	46c0      	nop			(mov r8, r8)
    9dec:	46c0      	nop			(mov r8, r8)
    9dee:	46c0      	nop			(mov r8, r8)
    9df0:	54442d18 	.word	0x54442d18
    9df4:	400921fb 	.word	0x400921fb
    9df8:	54442d18 	.word	0x54442d18
    9dfc:	401921fb 	.word	0x401921fb
    9e00:	54442d18 	.word	0x54442d18
    9e04:	c00921fb 	.word	0xc00921fb

00009e08 <_ZN9OdometrieD1Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    9e08:	b580      	push	{r7, lr}
    9e0a:	b082      	sub	sp, #8
    9e0c:	af00      	add	r7, sp, #0
    9e0e:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    9e10:	687b      	ldr	r3, [r7, #4]
    9e12:	685b      	ldr	r3, [r3, #4]
    9e14:	4618      	mov	r0, r3
    9e16:	f004 fb45 	bl	e4a4 <_ZdlPv>
    delete roueCodeuseDroite;
    9e1a:	687b      	ldr	r3, [r7, #4]
    9e1c:	681b      	ldr	r3, [r3, #0]
    9e1e:	4618      	mov	r0, r3
    9e20:	f004 fb40 	bl	e4a4 <_ZdlPv>
}
    9e24:	687b      	ldr	r3, [r7, #4]
    9e26:	4618      	mov	r0, r3
    9e28:	f107 0708 	add.w	r7, r7, #8	; 0x8
    9e2c:	46bd      	mov	sp, r7
    9e2e:	bd80      	pop	{r7, pc}

00009e30 <_ZN9OdometrieD2Ev>:

    absAngle = 0.0;

}

Odometrie::~Odometrie()
    9e30:	b580      	push	{r7, lr}
    9e32:	b082      	sub	sp, #8
    9e34:	af00      	add	r7, sp, #0
    9e36:	6078      	str	r0, [r7, #4]
{
    delete roueCodeuseGauche;
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	685b      	ldr	r3, [r3, #4]
    9e3c:	4618      	mov	r0, r3
    9e3e:	f004 fb31 	bl	e4a4 <_ZdlPv>
    delete roueCodeuseDroite;
    9e42:	687b      	ldr	r3, [r7, #4]
    9e44:	681b      	ldr	r3, [r3, #0]
    9e46:	4618      	mov	r0, r3
    9e48:	f004 fb2c 	bl	e4a4 <_ZdlPv>
}
    9e4c:	687b      	ldr	r3, [r7, #4]
    9e4e:	4618      	mov	r0, r3
    9e50:	f107 0708 	add.w	r7, r7, #8	; 0x8
    9e54:	46bd      	mov	sp, r7
    9e56:	bd80      	pop	{r7, pc}

00009e58 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    9e58:	b580      	push	{r7, lr}
    9e5a:	b086      	sub	sp, #24
    9e5c:	af00      	add	r7, sp, #0
    9e5e:	60f8      	str	r0, [r7, #12]
    9e60:	60b9      	str	r1, [r7, #8]
    9e62:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    9e64:	68fb      	ldr	r3, [r7, #12]
    9e66:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9e6a:	4618      	mov	r0, r3
    9e6c:	f004 ffcc 	bl	ee08 <_ZN17PositionPlusAngleC1Ev>
    9e70:	68f9      	ldr	r1, [r7, #12]
    9e72:	f04f 0200 	mov.w	r2, #0	; 0x0
    9e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e7a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9e7e:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    9e82:	68fa      	ldr	r2, [r7, #12]
    9e84:	4b4c      	ldr	r3, [pc, #304]	(9fb8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    9e86:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    9e88:	68fa      	ldr	r2, [r7, #12]
    9e8a:	4b4b      	ldr	r3, [pc, #300]	(9fb8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    9e8c:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    9e8e:	68f9      	ldr	r1, [r7, #12]
    9e90:	a245      	add	r2, pc, #276	(adr r2, 9fa8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x150>)
    9e92:	ca0c      	ldmia	r2!, {r2, r3}
    9e94:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    9e98:	68f9      	ldr	r1, [r7, #12]
    9e9a:	f04f 0200 	mov.w	r2, #0	; 0x0
    9e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9ea2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9ea6:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    9eaa:	68f9      	ldr	r1, [r7, #12]
    9eac:	f04f 0200 	mov.w	r2, #0	; 0x0
    9eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9eb4:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    9eb8:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    9ebc:	68fb      	ldr	r3, [r7, #12]
    9ebe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    9ec2:	4610      	mov	r0, r2
    9ec4:	4619      	mov	r1, r3
    9ec6:	a23a      	add	r2, pc, #232	(adr r2, 9fb0 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x158>)
    9ec8:	ca0c      	ldmia	r2!, {r2, r3}
    9eca:	f00e fabb 	bl	18444 <__aeabi_dmul>
    9ece:	4602      	mov	r2, r0
    9ed0:	460b      	mov	r3, r1
    9ed2:	4610      	mov	r0, r2
    9ed4:	4619      	mov	r1, r3
    9ed6:	68fb      	ldr	r3, [r7, #12]
    9ed8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    9edc:	f00e fbdc 	bl	18698 <__aeabi_ddiv>
    9ee0:	4602      	mov	r2, r0
    9ee2:	460b      	mov	r3, r1
    9ee4:	68f9      	ldr	r1, [r7, #12]
    9ee6:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    9eea:	68fb      	ldr	r3, [r7, #12]
    9eec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    9ef0:	4610      	mov	r0, r2
    9ef2:	4619      	mov	r1, r3
    9ef4:	f04f 0200 	mov.w	r2, #0	; 0x0
    9ef8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    9efc:	f00e faa2 	bl	18444 <__aeabi_dmul>
    9f00:	4602      	mov	r2, r0
    9f02:	460b      	mov	r3, r1
    9f04:	4610      	mov	r0, r2
    9f06:	4619      	mov	r1, r3
    9f08:	68fb      	ldr	r3, [r7, #12]
    9f0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    9f0e:	f00e fbc3 	bl	18698 <__aeabi_ddiv>
    9f12:	4602      	mov	r2, r0
    9f14:	460b      	mov	r3, r1
    9f16:	68f9      	ldr	r1, [r7, #12]
    9f18:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9f1c:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f20:	617b      	str	r3, [r7, #20]
    9f22:	e017      	b.n	9f54 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    9f24:	697b      	ldr	r3, [r7, #20]
    9f26:	68fa      	ldr	r2, [r7, #12]
    9f28:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9f2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9f30:	4413      	add	r3, r2
    9f32:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f36:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    9f38:	697b      	ldr	r3, [r7, #20]
    9f3a:	68fa      	ldr	r2, [r7, #12]
    9f3c:	f103 0306 	add.w	r3, r3, #6	; 0x6
    9f40:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9f44:	4413      	add	r3, r2
    9f46:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f4a:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    9f4c:	697b      	ldr	r3, [r7, #20]
    9f4e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    9f52:	617b      	str	r3, [r7, #20]
    9f54:	697b      	ldr	r3, [r7, #20]
    9f56:	2b01      	cmp	r3, #1
    9f58:	dde4      	ble.n	9f24 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    9f5a:	68fa      	ldr	r2, [r7, #12]
    9f5c:	68bb      	ldr	r3, [r7, #8]
    9f5e:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    9f60:	68fa      	ldr	r2, [r7, #12]
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    9f66:	4a15      	ldr	r2, [pc, #84]	(9fbc <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x164>)
    9f68:	68fb      	ldr	r3, [r7, #12]
    9f6a:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    9f6c:	68f9      	ldr	r1, [r7, #12]
    9f6e:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f72:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f76:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    9f7a:	68f9      	ldr	r1, [r7, #12]
    9f7c:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f80:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f84:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    9f88:	68f9      	ldr	r1, [r7, #12]
    9f8a:	f04f 0200 	mov.w	r2, #0	; 0x0
    9f8e:	f04f 0300 	mov.w	r3, #0	; 0x0
    9f92:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    9f96:	68fa      	ldr	r2, [r7, #12]
    9f98:	4b07      	ldr	r3, [pc, #28]	(9fb8 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_+0x160>)
    9f9a:	6713      	str	r3, [r2, #112]

}
    9f9c:	68fb      	ldr	r3, [r7, #12]
    9f9e:	4618      	mov	r0, r3
    9fa0:	f107 0718 	add.w	r7, r7, #24	; 0x18
    9fa4:	46bd      	mov	sp, r7
    9fa6:	bd80      	pop	{r7, pc}
    9fa8:	045fe111 	.word	0x045fe111
    9fac:	4075908d 	.word	0x4075908d
    9fb0:	54442d18 	.word	0x54442d18
    9fb4:	400921fb 	.word	0x400921fb
    9fb8:	00000000 	.word	0x00000000
    9fbc:	20000570 	.word	0x20000570

00009fc0 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

Odometrie::Odometrie(QuadratureCoderHandler* roueCodeuseGauche, QuadratureCoderHandler* roueCodeuseDroite)
    9fc0:	b580      	push	{r7, lr}
    9fc2:	b086      	sub	sp, #24
    9fc4:	af00      	add	r7, sp, #0
    9fc6:	60f8      	str	r0, [r7, #12]
    9fc8:	60b9      	str	r1, [r7, #8]
    9fca:	607a      	str	r2, [r7, #4]
: rayonRoueCodeuse(RAYON_ROUE)
    9fcc:	68fb      	ldr	r3, [r7, #12]
    9fce:	f103 0308 	add.w	r3, r3, #8	; 0x8
    9fd2:	4618      	mov	r0, r3
    9fd4:	f004 ff18 	bl	ee08 <_ZN17PositionPlusAngleC1Ev>
    9fd8:	68f9      	ldr	r1, [r7, #12]
    9fda:	f04f 0200 	mov.w	r2, #0	; 0x0
    9fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9fe2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    9fe6:	e9c1 230e 	strd	r2, r3, [r1, #56]
{

    vitesseLineaire =0;
    9fea:	68fa      	ldr	r2, [r7, #12]
    9fec:	4b4c      	ldr	r3, [pc, #304]	(a120 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    9fee:	6153      	str	r3, [r2, #20]
    vitesseAngulaire=0;
    9ff0:	68fa      	ldr	r2, [r7, #12]
    9ff2:	4b4b      	ldr	r3, [pc, #300]	(a120 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    9ff4:	6193      	str	r3, [r2, #24]
    entraxe=TAILLE_ENTRAXE;
    9ff6:	68f9      	ldr	r1, [r7, #12]
    9ff8:	a245      	add	r2, pc, #276	(adr r2, a110 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x150>)
    9ffa:	ca0c      	ldmia	r2!, {r2, r3}
    9ffc:	e9c1 230c 	strd	r2, r3, [r1, #48]
    rayonRoueCodeuse=RAYON_ROUE;
    a000:	68f9      	ldr	r1, [r7, #12]
    a002:	f04f 0200 	mov.w	r2, #0	; 0x0
    a006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a00a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    a00e:	e9c1 230e 	strd	r2, r3, [r1, #56]
    nbTicksParTour=NBR_TICK_PAR_TOUR;
    a012:	68f9      	ldr	r1, [r7, #12]
    a014:	f04f 0200 	mov.w	r2, #0	; 0x0
    a018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a01c:	f503 0340 	add.w	r3, r3, #12582912	; 0xc00000
    a020:	e9c1 2310 	strd	r2, r3, [r1, #64]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue
    a024:	68fb      	ldr	r3, [r7, #12]
    a026:	e9d3 230e 	ldrd	r2, r3, [r3, #56]
    a02a:	4610      	mov	r0, r2
    a02c:	4619      	mov	r1, r3
    a02e:	a23a      	add	r2, pc, #232	(adr r2, a118 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x158>)
    a030:	ca0c      	ldmia	r2!, {r2, r3}
    a032:	f00e fa07 	bl	18444 <__aeabi_dmul>
    a036:	4602      	mov	r2, r0
    a038:	460b      	mov	r3, r1
    a03a:	4610      	mov	r0, r2
    a03c:	4619      	mov	r1, r3
    a03e:	68fb      	ldr	r3, [r7, #12]
    a040:	e9d3 2310 	ldrd	r2, r3, [r3, #64]
    a044:	f00e fb28 	bl	18698 <__aeabi_ddiv>
    a048:	4602      	mov	r2, r0
    a04a:	460b      	mov	r3, r1
    a04c:	68f9      	ldr	r1, [r7, #12]
    a04e:	e9c1 2312 	strd	r2, r3, [r1, #72]

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1
    a052:	68fb      	ldr	r3, [r7, #12]
    a054:	e9d3 2312 	ldrd	r2, r3, [r3, #72]
    a058:	4610      	mov	r0, r2
    a05a:	4619      	mov	r1, r3
    a05c:	f04f 0200 	mov.w	r2, #0	; 0x0
    a060:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    a064:	f00e f9ee 	bl	18444 <__aeabi_dmul>
    a068:	4602      	mov	r2, r0
    a06a:	460b      	mov	r3, r1
    a06c:	4610      	mov	r0, r2
    a06e:	4619      	mov	r1, r3
    a070:	68fb      	ldr	r3, [r7, #12]
    a072:	e9d3 230c 	ldrd	r2, r3, [r3, #48]
    a076:	f00e fb0f 	bl	18698 <__aeabi_ddiv>
    a07a:	4602      	mov	r2, r0
    a07c:	460b      	mov	r3, r1
    a07e:	68f9      	ldr	r1, [r7, #12]
    a080:	e9c1 2314 	strd	r2, r3, [r1, #80]

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a084:	f04f 0300 	mov.w	r3, #0	; 0x0
    a088:	617b      	str	r3, [r7, #20]
    a08a:	e017      	b.n	a0bc <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xfc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
    a08c:	697b      	ldr	r3, [r7, #20]
    a08e:	68fa      	ldr	r2, [r7, #12]
    a090:	f103 0308 	add.w	r3, r3, #8	; 0x8
    a094:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a098:	4413      	add	r3, r2
    a09a:	f04f 0200 	mov.w	r2, #0	; 0x0
    a09e:	605a      	str	r2, [r3, #4]
        prevDeltaTicksRoueGauche[i] = 0;
    a0a0:	697b      	ldr	r3, [r7, #20]
    a0a2:	68fa      	ldr	r2, [r7, #12]
    a0a4:	f103 0306 	add.w	r3, r3, #6	; 0x6
    a0a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    a0ac:	4413      	add	r3, r2
    a0ae:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0b2:	605a      	str	r2, [r3, #4]

    coeffDistance=(M_PI*rayonRoueCodeuse)/nbTicksParTour;  //soit la distance parcouru par un demi tour de roue

    coeffAngle=-2*coeffDistance/entraxe; // soit l'angle = opposé sur hypothénus en faisant une approximation à l'ordre 1

    for (int i = 0 ; i < tailleTabPrevTicks ; i++)
    a0b4:	697b      	ldr	r3, [r7, #20]
    a0b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a0ba:	617b      	str	r3, [r7, #20]
    a0bc:	697b      	ldr	r3, [r7, #20]
    a0be:	2b01      	cmp	r3, #1
    a0c0:	dde4      	ble.n	a08c <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0xcc>
    {
        prevDeltaTicksRoueDroite[i] = 0;
        prevDeltaTicksRoueGauche[i] = 0;
    }

    this->roueCodeuseGauche = roueCodeuseGauche;
    a0c2:	68fa      	ldr	r2, [r7, #12]
    a0c4:	68bb      	ldr	r3, [r7, #8]
    a0c6:	6053      	str	r3, [r2, #4]
    this->roueCodeuseDroite = roueCodeuseDroite;
    a0c8:	68fa      	ldr	r2, [r7, #12]
    a0ca:	687b      	ldr	r3, [r7, #4]
    a0cc:	6013      	str	r3, [r2, #0]
    Odometrie::odometrie = this;
    a0ce:	4a15      	ldr	r2, [pc, #84]	(a124 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x164>)
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	6013      	str	r3, [r2, #0]

    posX = 0.0;
    a0d4:	68f9      	ldr	r1, [r7, #12]
    a0d6:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0da:	f04f 0300 	mov.w	r3, #0	; 0x0
    a0de:	e9c1 2316 	strd	r2, r3, [r1, #88]
    posY = 0.0;
    a0e2:	68f9      	ldr	r1, [r7, #12]
    a0e4:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0e8:	f04f 0300 	mov.w	r3, #0	; 0x0
    a0ec:	e9c1 2318 	strd	r2, r3, [r1, #96]
    ang = 0.0;
    a0f0:	68f9      	ldr	r1, [r7, #12]
    a0f2:	f04f 0200 	mov.w	r2, #0	; 0x0
    a0f6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a0fa:	e9c1 231a 	strd	r2, r3, [r1, #104]

    absAngle = 0.0;
    a0fe:	68fa      	ldr	r2, [r7, #12]
    a100:	4b07      	ldr	r3, [pc, #28]	(a120 <_ZN9OdometrieC2EP22QuadratureCoderHandlerS1_+0x160>)
    a102:	6713      	str	r3, [r2, #112]

}
    a104:	68fb      	ldr	r3, [r7, #12]
    a106:	4618      	mov	r0, r3
    a108:	f107 0718 	add.w	r7, r7, #24	; 0x18
    a10c:	46bd      	mov	sp, r7
    a10e:	bd80      	pop	{r7, pc}
    a110:	045fe111 	.word	0x045fe111
    a114:	4075908d 	.word	0x4075908d
    a118:	54442d18 	.word	0x54442d18
    a11c:	400921fb 	.word	0x400921fb
    a120:	00000000 	.word	0x00000000
    a124:	20000570 	.word	0x20000570

0000a128 <_ZN14PIDFilterAngleC2Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a128:	b480      	push	{r7}
    a12a:	b083      	sub	sp, #12
    a12c:	af00      	add	r7, sp, #0
    a12e:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a130:	687a      	ldr	r2, [r7, #4]
    a132:	4b06      	ldr	r3, [pc, #24]	(a14c <_ZN14PIDFilterAngleC2Ev+0x24>)
    a134:	6013      	str	r3, [r2, #0]
    a136:	687a      	ldr	r2, [r7, #4]
    a138:	4b04      	ldr	r3, [pc, #16]	(a14c <_ZN14PIDFilterAngleC2Ev+0x24>)
    a13a:	6053      	str	r3, [r2, #4]
{
}
    a13c:	687b      	ldr	r3, [r7, #4]
    a13e:	4618      	mov	r0, r3
    a140:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a144:	46bd      	mov	sp, r7
    a146:	bc80      	pop	{r7}
    a148:	4770      	bx	lr
    a14a:	46c0      	nop			(mov r8, r8)
    a14c:	00000000 	.word	0x00000000

0000a150 <_ZN14PIDFilterAngleC1Ev>:

const float PIDFilterAngle::Kp = FILTER_ANGLE_KP;
const float PIDFilterAngle::Kd = FILTER_ANGLE_KD;
const float PIDFilterAngle::Ki = FILTER_ANGLE_KI;

PIDFilterAngle::PIDFilterAngle() :
    a150:	b480      	push	{r7}
    a152:	b083      	sub	sp, #12
    a154:	af00      	add	r7, sp, #0
    a156:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a158:	687a      	ldr	r2, [r7, #4]
    a15a:	4b06      	ldr	r3, [pc, #24]	(a174 <_ZN14PIDFilterAngleC1Ev+0x24>)
    a15c:	6013      	str	r3, [r2, #0]
    a15e:	687a      	ldr	r2, [r7, #4]
    a160:	4b04      	ldr	r3, [pc, #16]	(a174 <_ZN14PIDFilterAngleC1Ev+0x24>)
    a162:	6053      	str	r3, [r2, #4]
{
}
    a164:	687b      	ldr	r3, [r7, #4]
    a166:	4618      	mov	r0, r3
    a168:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a16c:	46bd      	mov	sp, r7
    a16e:	bc80      	pop	{r7}
    a170:	4770      	bx	lr
    a172:	46c0      	nop			(mov r8, r8)
    a174:	00000000 	.word	0x00000000

0000a178 <_ZN14PIDFilterAngle16getFilteredValueEf>:

float PIDFilterAngle::getFilteredValue(Angle erreur){
    a178:	b590      	push	{r4, r7, lr}
    a17a:	b087      	sub	sp, #28
    a17c:	af00      	add	r7, sp, #0
    a17e:	6078      	str	r0, [r7, #4]
    a180:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_ANGLE_COEF+erreur;
    a182:	687b      	ldr	r3, [r7, #4]
    a184:	681b      	ldr	r3, [r3, #0]
    a186:	4618      	mov	r0, r3
    a188:	6839      	ldr	r1, [r7, #0]
    a18a:	f00e fc71 	bl	18a70 <__addsf3>
    a18e:	4603      	mov	r3, r0
    a190:	461a      	mov	r2, r3
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	601a      	str	r2, [r3, #0]
    Angle proportionnel = erreur;
    a196:	683b      	ldr	r3, [r7, #0]
    a198:	60fb      	str	r3, [r7, #12]
    Angle integrale = sommeErreurs;
    a19a:	687b      	ldr	r3, [r7, #4]
    a19c:	681b      	ldr	r3, [r3, #0]
    a19e:	613b      	str	r3, [r7, #16]
    Angle derivee = erreur - erreurPrecedente;
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	685b      	ldr	r3, [r3, #4]
    a1a4:	6838      	ldr	r0, [r7, #0]
    a1a6:	4619      	mov	r1, r3
    a1a8:	f00e fc60 	bl	18a6c <__aeabi_fsub>
    a1ac:	4603      	mov	r3, r0
    a1ae:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a1b0:	687a      	ldr	r2, [r7, #4]
    a1b2:	683b      	ldr	r3, [r7, #0]
    a1b4:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a1b6:	68f8      	ldr	r0, [r7, #12]
    a1b8:	490f      	ldr	r1, [pc, #60]	(a1f8 <_ZN14PIDFilterAngle16getFilteredValueEf+0x80>)
    a1ba:	f00e fd61 	bl	18c80 <__aeabi_fmul>
    a1be:	4603      	mov	r3, r0
    a1c0:	461c      	mov	r4, r3
    a1c2:	6938      	ldr	r0, [r7, #16]
    a1c4:	490d      	ldr	r1, [pc, #52]	(a1fc <_ZN14PIDFilterAngle16getFilteredValueEf+0x84>)
    a1c6:	f00e fd5b 	bl	18c80 <__aeabi_fmul>
    a1ca:	4603      	mov	r3, r0
    a1cc:	4620      	mov	r0, r4
    a1ce:	4619      	mov	r1, r3
    a1d0:	f00e fc4e 	bl	18a70 <__addsf3>
    a1d4:	4603      	mov	r3, r0
    a1d6:	461c      	mov	r4, r3
    a1d8:	6978      	ldr	r0, [r7, #20]
    a1da:	4909      	ldr	r1, [pc, #36]	(a200 <_ZN14PIDFilterAngle16getFilteredValueEf+0x88>)
    a1dc:	f00e fd50 	bl	18c80 <__aeabi_fmul>
    a1e0:	4603      	mov	r3, r0
    a1e2:	4620      	mov	r0, r4
    a1e4:	4619      	mov	r1, r3
    a1e6:	f00e fc43 	bl	18a70 <__addsf3>
    a1ea:	4603      	mov	r3, r0
}
    a1ec:	4618      	mov	r0, r3
    a1ee:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a1f2:	46bd      	mov	sp, r7
    a1f4:	bd90      	pop	{r4, r7, pc}
    a1f6:	46c0      	nop			(mov r8, r8)
    a1f8:	42960000 	.word	0x42960000
    a1fc:	3f333333 	.word	0x3f333333
    a200:	3f000000 	.word	0x3f000000

0000a204 <_ZN17PIDFilterDistanceC2Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a204:	b480      	push	{r7}
    a206:	b083      	sub	sp, #12
    a208:	af00      	add	r7, sp, #0
    a20a:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a20c:	687a      	ldr	r2, [r7, #4]
    a20e:	4b06      	ldr	r3, [pc, #24]	(a228 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a210:	6013      	str	r3, [r2, #0]
    a212:	687a      	ldr	r2, [r7, #4]
    a214:	4b04      	ldr	r3, [pc, #16]	(a228 <_ZN17PIDFilterDistanceC2Ev+0x24>)
    a216:	6053      	str	r3, [r2, #4]
{
}
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	4618      	mov	r0, r3
    a21c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a220:	46bd      	mov	sp, r7
    a222:	bc80      	pop	{r7}
    a224:	4770      	bx	lr
    a226:	46c0      	nop			(mov r8, r8)
    a228:	00000000 	.word	0x00000000

0000a22c <_ZN17PIDFilterDistanceC1Ev>:
const float PIDFilterDistance::Kp = FILTER_LINEAIRE_KP;
const float PIDFilterDistance::Kd = FILTER_LINEAIRE_KD;
const float PIDFilterDistance::Ki = FILTER_LINEAIRE_KI;


PIDFilterDistance::PIDFilterDistance() :
    a22c:	b480      	push	{r7}
    a22e:	b083      	sub	sp, #12
    a230:	af00      	add	r7, sp, #0
    a232:	6078      	str	r0, [r7, #4]
    sommeErreurs(0),
    erreurPrecedente(0)
    a234:	687a      	ldr	r2, [r7, #4]
    a236:	4b06      	ldr	r3, [pc, #24]	(a250 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a238:	6013      	str	r3, [r2, #0]
    a23a:	687a      	ldr	r2, [r7, #4]
    a23c:	4b04      	ldr	r3, [pc, #16]	(a250 <_ZN17PIDFilterDistanceC1Ev+0x24>)
    a23e:	6053      	str	r3, [r2, #4]
{
}
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	4618      	mov	r0, r3
    a244:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a248:	46bd      	mov	sp, r7
    a24a:	bc80      	pop	{r7}
    a24c:	4770      	bx	lr
    a24e:	46c0      	nop			(mov r8, r8)
    a250:	00000000 	.word	0x00000000

0000a254 <_ZN17PIDFilterDistance16getFilteredValueEf>:

float PIDFilterDistance::getFilteredValue(Distance erreur){
    a254:	b590      	push	{r4, r7, lr}
    a256:	b087      	sub	sp, #28
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	6039      	str	r1, [r7, #0]
    sommeErreurs=sommeErreurs*FILTER_LINEAIRE_COEF+erreur;
    a25e:	687b      	ldr	r3, [r7, #4]
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	4618      	mov	r0, r3
    a264:	6839      	ldr	r1, [r7, #0]
    a266:	f00e fc03 	bl	18a70 <__addsf3>
    a26a:	4603      	mov	r3, r0
    a26c:	461a      	mov	r2, r3
    a26e:	687b      	ldr	r3, [r7, #4]
    a270:	601a      	str	r2, [r3, #0]
    Distance proportionnel = erreur;
    a272:	683b      	ldr	r3, [r7, #0]
    a274:	60fb      	str	r3, [r7, #12]
    Distance integrale = sommeErreurs;
    a276:	687b      	ldr	r3, [r7, #4]
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	613b      	str	r3, [r7, #16]
    Distance derivee = erreur - erreurPrecedente;
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	685b      	ldr	r3, [r3, #4]
    a280:	6838      	ldr	r0, [r7, #0]
    a282:	4619      	mov	r1, r3
    a284:	f00e fbf2 	bl	18a6c <__aeabi_fsub>
    a288:	4603      	mov	r3, r0
    a28a:	617b      	str	r3, [r7, #20]
    erreurPrecedente=erreur;
    a28c:	687a      	ldr	r2, [r7, #4]
    a28e:	683b      	ldr	r3, [r7, #0]
    a290:	6053      	str	r3, [r2, #4]
    return proportionnel*Kp
         + integrale*Ki
         + derivee*Kd;
    a292:	68f8      	ldr	r0, [r7, #12]
    a294:	490f      	ldr	r1, [pc, #60]	(a2d4 <_ZN17PIDFilterDistance16getFilteredValueEf+0x80>)
    a296:	f00e fcf3 	bl	18c80 <__aeabi_fmul>
    a29a:	4603      	mov	r3, r0
    a29c:	461c      	mov	r4, r3
    a29e:	6938      	ldr	r0, [r7, #16]
    a2a0:	490d      	ldr	r1, [pc, #52]	(a2d8 <_ZN17PIDFilterDistance16getFilteredValueEf+0x84>)
    a2a2:	f00e fced 	bl	18c80 <__aeabi_fmul>
    a2a6:	4603      	mov	r3, r0
    a2a8:	4620      	mov	r0, r4
    a2aa:	4619      	mov	r1, r3
    a2ac:	f00e fbe0 	bl	18a70 <__addsf3>
    a2b0:	4603      	mov	r3, r0
    a2b2:	461c      	mov	r4, r3
    a2b4:	6978      	ldr	r0, [r7, #20]
    a2b6:	4909      	ldr	r1, [pc, #36]	(a2dc <_ZN17PIDFilterDistance16getFilteredValueEf+0x88>)
    a2b8:	f00e fce2 	bl	18c80 <__aeabi_fmul>
    a2bc:	4603      	mov	r3, r0
    a2be:	4620      	mov	r0, r4
    a2c0:	4619      	mov	r1, r3
    a2c2:	f00e fbd5 	bl	18a70 <__addsf3>
    a2c6:	4603      	mov	r3, r0
}
    a2c8:	4618      	mov	r0, r3
    a2ca:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    a2ce:	46bd      	mov	sp, r7
    a2d0:	bd90      	pop	{r4, r7, pc}
    a2d2:	46c0      	nop			(mov r8, r8)
    a2d4:	3e4ccccd 	.word	0x3e4ccccd
    a2d8:	3ba3d70a 	.word	0x3ba3d70a
    a2dc:	3f333333 	.word	0x3f333333

0000a2e0 <_ZN5Debug3runEv>:
//#include "krabipacket.h"

// DMA
#define ADC3_DR_ADDRESS     ((uint32_t)0x4001224C)

void Debug::run()
    a2e0:	b480      	push	{r7}
    a2e2:	af00      	add	r7, sp, #0
{
    // test run
}
    a2e4:	46bd      	mov	sp, r7
    a2e6:	bc80      	pop	{r7}
    a2e8:	4770      	bx	lr
    a2ea:	46c0      	nop			(mov r8, r8)

0000a2ec <_ZN5Debug27__ADCSampleF4_adc_configureEv>:
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    }
}

void Debug::__ADCSampleF4_adc_configure()
    a2ec:	b480      	push	{r7}
    a2ee:	af00      	add	r7, sp, #0
    //Enable ADC conversion
    ADC_Cmd(ADC1,ENABLE);
    //Select the channel to be read from
    ADC_RegularChannelConfig(ADC1,ADC_Channel_10,1,ADC_SampleTime_144Cycles);
#endif
}
    a2f0:	46bd      	mov	sp, r7
    a2f2:	bc80      	pop	{r7}
    a2f4:	4770      	bx	lr
    a2f6:	46c0      	nop			(mov r8, r8)

0000a2f8 <_ZN5Debug25__ADCSampleF4_adc_convertEv>:

int Debug::__ADCSampleF4_adc_convert(){
    a2f8:	b480      	push	{r7}
    a2fa:	b083      	sub	sp, #12
    a2fc:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx)
    ADC_SoftwareStartConv(ADC1);//Start the conversion
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}
    a2fe:	f107 070c 	add.w	r7, r7, #12	; 0xc
    a302:	46bd      	mov	sp, r7
    a304:	bc80      	pop	{r7}
    a306:	4770      	bx	lr

0000a308 <_ZN5Debug15testADCSampleF4Ev>:
}

/**
    @brief Read the PC0 pin
*/
void Debug::testADCSampleF4()
    a308:	b580      	push	{r7, lr}
    a30a:	b082      	sub	sp, #8
    a30c:	af00      	add	r7, sp, #0
{
    __ADCSampleF4_adc_configure();//Start configuration
    a30e:	f7ff ffed 	bl	a2ec <_ZN5Debug27__ADCSampleF4_adc_configureEv>

    int convertedValue = -1;
    a312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a316:	607b      	str	r3, [r7, #4]
    while(true)
    {
        convertedValue = __ADCSampleF4_adc_convert();//Read the ADC converted value
    a318:	f7ff ffee 	bl	a2f8 <_ZN5Debug25__ADCSampleF4_adc_convertEv>
    a31c:	4603      	mov	r3, r0
    a31e:	607b      	str	r3, [r7, #4]
    a320:	e7fa      	b.n	a318 <_ZN5Debug15testADCSampleF4Ev+0x10>
    a322:	46c0      	nop			(mov r8, r8)

0000a324 <_ZN5Debug10testSharpsEv>:
    while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC));//Processing the conversion
    return ADC_GetConversionValue(ADC1); //Return the converted data
#endif
}

void Debug::testSharps()
    a324:	b480      	push	{r7}
    a326:	af00      	add	r7, sp, #0
        for (int i = 0; i < 1000; i++)
        {
        }*/
  //  }

}
    a328:	46bd      	mov	sp, r7
    a32a:	bc80      	pop	{r7}
    a32c:	4770      	bx	lr
    a32e:	46c0      	nop			(mov r8, r8)

0000a330 <_ZN5Debug19testADC_DMASampleF4Ev>:


//__IO uint32_t ADC3ConvertedValue[4];
__IO uint16_t ADC3ConvertedValueN = 0;

void Debug::testADC_DMASampleF4()
    a330:	b480      	push	{r7}
    a332:	af00      	add	r7, sp, #0
    while(true)
    {
        convertedValue = ADC3ConvertedValueN;//Read the ADC converted value
    }
#endif
}
    a334:	46bd      	mov	sp, r7
    a336:	bc80      	pop	{r7}
    a338:	4770      	bx	lr
    a33a:	46c0      	nop			(mov r8, r8)

0000a33c <_ZN5Debug22__ADC_DMASampleF4_initEv>:

void Debug::__ADC_DMASampleF4_init(void)
    a33c:	b480      	push	{r7}
    a33e:	af00      	add	r7, sp, #0
    ADC_DMACmd(ADC3, ENABLE);

    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}
    a340:	46bd      	mov	sp, r7
    a342:	bc80      	pop	{r7}
    a344:	4770      	bx	lr
    a346:	46c0      	nop			(mov r8, r8)

0000a348 <_ZN5Debug10testRemoteEv>:
        else
            Led::setOn(0);
    }
}

void Debug::testRemote()
    a348:	b580      	push	{r7, lr}
    a34a:	b082      	sub	sp, #8
    a34c:	af00      	add	r7, sp, #0
{
    Remote::getSingleton();
    a34e:	f002 fb9f 	bl	ca90 <_ZN6Remote12getSingletonEv>
//    packet.add(6);
//    packet.add(2048);

//    Remote::getSingleton()->sendData(&packet);

    int timer = 0;
    a352:	f04f 0300 	mov.w	r3, #0	; 0x0
    a356:	607b      	str	r3, [r7, #4]
    while(true)
    {
        if (Remote::getSingleton()->dataAvailable()) {
    a358:	f002 fb9a 	bl	ca90 <_ZN6Remote12getSingletonEv>
    a35c:	4603      	mov	r3, r0
    a35e:	4618      	mov	r0, r3
    a360:	f002 fa56 	bl	c810 <_ZN6Remote13dataAvailableEv>
    a364:	4603      	mov	r3, r0
    a366:	2b00      	cmp	r3, #0
    a368:	d009      	beq.n	a37e <_ZN5Debug10testRemoteEv+0x36>
            Remote::getSingleton()->receiveData();
    a36a:	f002 fb91 	bl	ca90 <_ZN6Remote12getSingletonEv>
    a36e:	4603      	mov	r3, r0
    a370:	4618      	mov	r0, r3
    a372:	f002 fa63 	bl	c83c <_ZN6Remote11receiveDataEv>
            Led::toggle(0);
    a376:	f04f 0000 	mov.w	r0, #0	; 0x0
    a37a:	f001 fdc1 	bl	bf00 <_ZN3Led6toggleEi>
        }

        if (timer==0) {
    a37e:	687b      	ldr	r3, [r7, #4]
    a380:	2b00      	cmp	r3, #0
    a382:	d10b      	bne.n	a39c <_ZN5Debug10testRemoteEv+0x54>
            Remote::getSingleton()->sendData('a');
    a384:	f002 fb84 	bl	ca90 <_ZN6Remote12getSingletonEv>
    a388:	4603      	mov	r3, r0
    a38a:	4618      	mov	r0, r3
    a38c:	f04f 0161 	mov.w	r1, #97	; 0x61
    a390:	f002 fa98 	bl	c8c4 <_ZN6Remote8sendDataEi>
            Led::toggle(0);
    a394:	f04f 0000 	mov.w	r0, #0	; 0x0
    a398:	f001 fdb2 	bl	bf00 <_ZN3Led6toggleEi>
        }

        timer++;
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a3a2:	607b      	str	r3, [r7, #4]
        if (timer==1000000)
    a3a4:	687a      	ldr	r2, [r7, #4]
    a3a6:	4b03      	ldr	r3, [pc, #12]	(a3b4 <_ZN5Debug10testRemoteEv+0x6c>)
    a3a8:	429a      	cmp	r2, r3
    a3aa:	d1d5      	bne.n	a358 <_ZN5Debug10testRemoteEv+0x10>
            timer = 0;
    a3ac:	f04f 0300 	mov.w	r3, #0	; 0x0
    a3b0:	607b      	str	r3, [r7, #4]
    a3b2:	e7d1      	b.n	a358 <_ZN5Debug10testRemoteEv+0x10>
    a3b4:	000f4240 	.word	0x000f4240

0000a3b8 <_ZN5Debug11testTiretteEP7Tirette>:

        for(int i=0; i<10000000; i++);
    }*/
}

void Debug::testTirette(Tirette* t)
    a3b8:	b580      	push	{r7, lr}
    a3ba:	b082      	sub	sp, #8
    a3bc:	af00      	add	r7, sp, #0
    a3be:	6078      	str	r0, [r7, #4]
{
    while(true)
    {
        if (t->enlevee())
    a3c0:	6878      	ldr	r0, [r7, #4]
    a3c2:	f002 ffa9 	bl	d318 <_ZNK7Tirette7enleveeEv>
    a3c6:	4603      	mov	r3, r0
    a3c8:	2b00      	cmp	r3, #0
    a3ca:	d004      	beq.n	a3d6 <_ZN5Debug11testTiretteEP7Tirette+0x1e>
            Led::setOff(0);
    a3cc:	f04f 0000 	mov.w	r0, #0	; 0x0
    a3d0:	f001 fd26 	bl	be20 <_ZN3Led6setOffEi>
    a3d4:	e7f4      	b.n	a3c0 <_ZN5Debug11testTiretteEP7Tirette+0x8>
        else
            Led::setOn(0);
    a3d6:	f04f 0000 	mov.w	r0, #0	; 0x0
    a3da:	f001 fd61 	bl	bea0 <_ZN3Led5setOnEi>
    a3de:	e7ef      	b.n	a3c0 <_ZN5Debug11testTiretteEP7Tirette+0x8>

0000a3e0 <_ZN5Debug13testContainerEv>:

        for(int i=0; i<10000000; i++);
    }
}

void Debug::testContainer()
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b084      	sub	sp, #16
    a3e4:	af00      	add	r7, sp, #0
{
    Container::getSingleton();
    a3e6:	f7fb f869 	bl	54bc <_ZN9Container12getSingletonEv>
    BrasLateral::initBrasLateraux();
    a3ea:	f7fa ff21 	bl	5230 <_ZN11BrasLateral16initBrasLaterauxEv>

    while(true)
    {
        Container::getSingleton()->open();
    a3ee:	f7fb f865 	bl	54bc <_ZN9Container12getSingletonEv>
    a3f2:	4603      	mov	r3, r0
    a3f4:	4618      	mov	r0, r3
    a3f6:	f7fb f803 	bl	5400 <_ZN9Container4openEv>
        BrasLateral::getLeft()->expand();
    a3fa:	f7fa ffb1 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    a3fe:	4603      	mov	r3, r0
    a400:	4618      	mov	r0, r3
    a402:	f7fa fed5 	bl	51b0 <_ZN11BrasLateral6expandEv>
        BrasLateral::getRight()->expand();
    a406:	f7fa ff9b 	bl	5340 <_ZN11BrasLateral8getRightEv>
    a40a:	4603      	mov	r3, r0
    a40c:	4618      	mov	r0, r3
    a40e:	f7fa fecf 	bl	51b0 <_ZN11BrasLateral6expandEv>
        Led::toggle(0);
    a412:	f04f 0000 	mov.w	r0, #0	; 0x0
    a416:	f001 fd73 	bl	bf00 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a41a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a41e:	607b      	str	r3, [r7, #4]
    a420:	e003      	b.n	a42a <_ZN5Debug13testContainerEv+0x4a>
    a422:	687b      	ldr	r3, [r7, #4]
    a424:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a428:	607b      	str	r3, [r7, #4]
    a42a:	687a      	ldr	r2, [r7, #4]
    a42c:	4b20      	ldr	r3, [pc, #128]	(a4b0 <_ZN5Debug13testContainerEv+0xd0>)
    a42e:	429a      	cmp	r2, r3
    a430:	ddf7      	ble.n	a422 <_ZN5Debug13testContainerEv+0x42>

        BrasLateral::getLeft()->front();
    a432:	f7fa ff95 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    a436:	4603      	mov	r3, r0
    a438:	4618      	mov	r0, r3
    a43a:	f7fa fe99 	bl	5170 <_ZN11BrasLateral5frontEv>
        BrasLateral::getRight()->front();
    a43e:	f7fa ff7f 	bl	5340 <_ZN11BrasLateral8getRightEv>
    a442:	4603      	mov	r3, r0
    a444:	4618      	mov	r0, r3
    a446:	f7fa fe93 	bl	5170 <_ZN11BrasLateral5frontEv>
        Led::toggle(0);
    a44a:	f04f 0000 	mov.w	r0, #0	; 0x0
    a44e:	f001 fd57 	bl	bf00 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a452:	f04f 0300 	mov.w	r3, #0	; 0x0
    a456:	60bb      	str	r3, [r7, #8]
    a458:	e003      	b.n	a462 <_ZN5Debug13testContainerEv+0x82>
    a45a:	68bb      	ldr	r3, [r7, #8]
    a45c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a460:	60bb      	str	r3, [r7, #8]
    a462:	68ba      	ldr	r2, [r7, #8]
    a464:	4b12      	ldr	r3, [pc, #72]	(a4b0 <_ZN5Debug13testContainerEv+0xd0>)
    a466:	429a      	cmp	r2, r3
    a468:	ddf7      	ble.n	a45a <_ZN5Debug13testContainerEv+0x7a>

        Container::getSingleton()->close();
    a46a:	f7fb f827 	bl	54bc <_ZN9Container12getSingletonEv>
    a46e:	4603      	mov	r3, r0
    a470:	4618      	mov	r0, r3
    a472:	f7fa ffb5 	bl	53e0 <_ZN9Container5closeEv>
        BrasLateral::getLeft()->collapse();
    a476:	f7fa ff73 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    a47a:	4603      	mov	r3, r0
    a47c:	4618      	mov	r0, r3
    a47e:	f7fa fe87 	bl	5190 <_ZN11BrasLateral8collapseEv>
        BrasLateral::getRight()->collapse();
    a482:	f7fa ff5d 	bl	5340 <_ZN11BrasLateral8getRightEv>
    a486:	4603      	mov	r3, r0
    a488:	4618      	mov	r0, r3
    a48a:	f7fa fe81 	bl	5190 <_ZN11BrasLateral8collapseEv>
        Led::toggle(0);
    a48e:	f04f 0000 	mov.w	r0, #0	; 0x0
    a492:	f001 fd35 	bl	bf00 <_ZN3Led6toggleEi>

        for(int i=0; i<20000000; i++);
    a496:	f04f 0300 	mov.w	r3, #0	; 0x0
    a49a:	60fb      	str	r3, [r7, #12]
    a49c:	e003      	b.n	a4a6 <_ZN5Debug13testContainerEv+0xc6>
    a49e:	68fb      	ldr	r3, [r7, #12]
    a4a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a4a4:	60fb      	str	r3, [r7, #12]
    a4a6:	68fa      	ldr	r2, [r7, #12]
    a4a8:	4b02      	ldr	r3, [pc, #8]	(a4b4 <_ZN5Debug13testContainerEv+0xd4>)
    a4aa:	429a      	cmp	r2, r3
    a4ac:	ddf7      	ble.n	a49e <_ZN5Debug13testContainerEv+0xbe>
    a4ae:	e79e      	b.n	a3ee <_ZN5Debug13testContainerEv+0xe>
    a4b0:	0098967f 	.word	0x0098967f
    a4b4:	01312cff 	.word	0x01312cff

0000a4b8 <_ZN5Debug16testBrasLaterauxEv>:
        l += rcg->getTickValue();
        for(int i=0; i<1000000; i++);
    }
}

void Debug::testBrasLateraux()
    a4b8:	b580      	push	{r7, lr}
    a4ba:	b082      	sub	sp, #8
    a4bc:	af00      	add	r7, sp, #0
        porteDroiteBas->goToAngle(90.0f);
        porteGaucheBas->goToAngle(90.0f);
        for (int i = 0; i < 10000000; i++);
    }*/

    BrasLateral::initBrasLateraux();
    a4be:	f7fa feb7 	bl	5230 <_ZN11BrasLateral16initBrasLaterauxEv>

    while(true)
    {
        BrasLateral::getLeft()->expand();
    a4c2:	f7fa ff4d 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    a4c6:	4603      	mov	r3, r0
    a4c8:	4618      	mov	r0, r3
    a4ca:	f7fa fe71 	bl	51b0 <_ZN11BrasLateral6expandEv>
        BrasLateral::getRight()->expand();
    a4ce:	f7fa ff37 	bl	5340 <_ZN11BrasLateral8getRightEv>
    a4d2:	4603      	mov	r3, r0
    a4d4:	4618      	mov	r0, r3
    a4d6:	f7fa fe6b 	bl	51b0 <_ZN11BrasLateral6expandEv>
        Led::toggle(0);
    a4da:	f04f 0000 	mov.w	r0, #0	; 0x0
    a4de:	f001 fd0f 	bl	bf00 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a4e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a4e6:	603b      	str	r3, [r7, #0]
    a4e8:	e003      	b.n	a4f2 <_ZN5Debug16testBrasLaterauxEv+0x3a>
    a4ea:	683b      	ldr	r3, [r7, #0]
    a4ec:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a4f0:	603b      	str	r3, [r7, #0]
    a4f2:	683a      	ldr	r2, [r7, #0]
    a4f4:	4b0f      	ldr	r3, [pc, #60]	(a534 <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    a4f6:	429a      	cmp	r2, r3
    a4f8:	ddf7      	ble.n	a4ea <_ZN5Debug16testBrasLaterauxEv+0x32>
        /*BrasLateral::getRight()->front();
        Led::toggle(0);

        for(int i=0; i<10000000; i++);*/

        BrasLateral::getLeft()->collapse();
    a4fa:	f7fa ff31 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    a4fe:	4603      	mov	r3, r0
    a500:	4618      	mov	r0, r3
    a502:	f7fa fe45 	bl	5190 <_ZN11BrasLateral8collapseEv>
        BrasLateral::getRight()->collapse();
    a506:	f7fa ff1b 	bl	5340 <_ZN11BrasLateral8getRightEv>
    a50a:	4603      	mov	r3, r0
    a50c:	4618      	mov	r0, r3
    a50e:	f7fa fe3f 	bl	5190 <_ZN11BrasLateral8collapseEv>
        Led::toggle(0);
    a512:	f04f 0000 	mov.w	r0, #0	; 0x0
    a516:	f001 fcf3 	bl	bf00 <_ZN3Led6toggleEi>

        for(int i=0; i<10000000; i++);
    a51a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a51e:	607b      	str	r3, [r7, #4]
    a520:	e003      	b.n	a52a <_ZN5Debug16testBrasLaterauxEv+0x72>
    a522:	687b      	ldr	r3, [r7, #4]
    a524:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a528:	607b      	str	r3, [r7, #4]
    a52a:	687a      	ldr	r2, [r7, #4]
    a52c:	4b01      	ldr	r3, [pc, #4]	(a534 <_ZN5Debug16testBrasLaterauxEv+0x7c>)
    a52e:	429a      	cmp	r2, r3
    a530:	ddf7      	ble.n	a522 <_ZN5Debug16testBrasLaterauxEv+0x6a>
    a532:	e7c6      	b.n	a4c2 <_ZN5Debug16testBrasLaterauxEv+0xa>
    a534:	0098967f 	.word	0x0098967f

0000a538 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_>:
    /* Enable ADC3 */
    ADC_Cmd(ADC3, ENABLE);
#endif
}

void Debug::testQuadrature(QuadratureCoderHandler* rcg, QuadratureCoderHandler* rcd)
    a538:	b580      	push	{r7, lr}
    a53a:	b086      	sub	sp, #24
    a53c:	af00      	add	r7, sp, #0
    a53e:	6078      	str	r0, [r7, #4]
    a540:	6039      	str	r1, [r7, #0]
{
    long r = 0, l = 0;
    a542:	f04f 0300 	mov.w	r3, #0	; 0x0
    a546:	60fb      	str	r3, [r7, #12]
    a548:	f04f 0300 	mov.w	r3, #0	; 0x0
    a54c:	613b      	str	r3, [r7, #16]
    while(true)
    {
        r += rcd->getTickValue();
    a54e:	6838      	ldr	r0, [r7, #0]
    a550:	f002 f892 	bl	c678 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a554:	4603      	mov	r3, r0
    a556:	b29b      	uxth	r3, r3
    a558:	b21a      	sxth	r2, r3
    a55a:	68fb      	ldr	r3, [r7, #12]
    a55c:	4413      	add	r3, r2
    a55e:	60fb      	str	r3, [r7, #12]
        l += rcg->getTickValue();
    a560:	6878      	ldr	r0, [r7, #4]
    a562:	f002 f889 	bl	c678 <_ZN22QuadratureCoderHandler12getTickValueEv>
    a566:	4603      	mov	r3, r0
    a568:	b29b      	uxth	r3, r3
    a56a:	b21a      	sxth	r2, r3
    a56c:	693b      	ldr	r3, [r7, #16]
    a56e:	4413      	add	r3, r2
    a570:	613b      	str	r3, [r7, #16]
        for(int i=0; i<1000000; i++);
    a572:	f04f 0300 	mov.w	r3, #0	; 0x0
    a576:	617b      	str	r3, [r7, #20]
    a578:	e003      	b.n	a582 <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x4a>
    a57a:	697b      	ldr	r3, [r7, #20]
    a57c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a580:	617b      	str	r3, [r7, #20]
    a582:	697a      	ldr	r2, [r7, #20]
    a584:	4b01      	ldr	r3, [pc, #4]	(a58c <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x54>)
    a586:	429a      	cmp	r2, r3
    a588:	ddf7      	ble.n	a57a <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x42>
    a58a:	e7e0      	b.n	a54e <_ZN5Debug14testQuadratureEP22QuadratureCoderHandlerS1_+0x16>
    a58c:	000f423f 	.word	0x000f423f

0000a590 <_ZN5Debug15testServoAnalogEv>:
void Debug::run()
{
    // test run
}

void Debug::testServoAnalog()
    a590:	b580      	push	{r7, lr}
    a592:	b094      	sub	sp, #80
    a594:	af02      	add	r7, sp, #8
{
    Timer* timer1 = new Timer(TIM1, PERIOD_TIMER_SERVO, PRESCALER_TIMER_SERVO, CLOCK_TIMER_SERVO);
    a596:	f04f 000c 	mov.w	r0, #12	; 0xc
    a59a:	f003 fedd 	bl	e358 <_Znwj>
    a59e:	4603      	mov	r3, r0
    a5a0:	603b      	str	r3, [r7, #0]
    a5a2:	683b      	ldr	r3, [r7, #0]
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d00d      	beq.n	a5c4 <_ZN5Debug15testServoAnalogEv+0x34>
    a5a8:	f04f 0300 	mov.w	r3, #0	; 0x0
    a5ac:	9300      	str	r3, [sp, #0]
    a5ae:	6838      	ldr	r0, [r7, #0]
    a5b0:	4955      	ldr	r1, [pc, #340]	(a708 <_ZN5Debug15testServoAnalogEv+0x178>)
    a5b2:	f644 6220 	movw	r2, #20000	; 0x4e20
    a5b6:	f04f 0347 	mov.w	r3, #71	; 0x47
    a5ba:	f002 fe41 	bl	d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>
    a5be:	683b      	ldr	r3, [r7, #0]
    a5c0:	607b      	str	r3, [r7, #4]
    a5c2:	e001      	b.n	a5c8 <_ZN5Debug15testServoAnalogEv+0x38>
    a5c4:	683b      	ldr	r3, [r7, #0]
    a5c6:	607b      	str	r3, [r7, #4]
    a5c8:	687b      	ldr	r3, [r7, #4]
    a5ca:	62bb      	str	r3, [r7, #40]
    TIM_CtrlPWMOutputs(TIM1, ENABLE);
    a5cc:	484e      	ldr	r0, [pc, #312]	(a708 <_ZN5Debug15testServoAnalogEv+0x178>)
    a5ce:	f04f 0101 	mov.w	r1, #1	; 0x1
    a5d2:	f7f8 fd4f 	bl	3074 <TIM_CtrlPWMOutputs>

    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    a5d6:	f04f 0014 	mov.w	r0, #20	; 0x14
    a5da:	f003 febd 	bl	e358 <_Znwj>
    a5de:	4603      	mov	r3, r0
    a5e0:	60bb      	str	r3, [r7, #8]
    a5e2:	68bb      	ldr	r3, [r7, #8]
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d00b      	beq.n	a600 <_ZN5Debug15testServoAnalogEv+0x70>
    a5e8:	4b48      	ldr	r3, [pc, #288]	(a70c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a5ea:	9300      	str	r3, [sp, #0]
    a5ec:	68b8      	ldr	r0, [r7, #8]
    a5ee:	6ab9      	ldr	r1, [r7, #40]
    a5f0:	f04f 0201 	mov.w	r2, #1	; 0x1
    a5f4:	4b46      	ldr	r3, [pc, #280]	(a710 <_ZN5Debug15testServoAnalogEv+0x180>)
    a5f6:	f7fc fcbf 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    a5fa:	68bb      	ldr	r3, [r7, #8]
    a5fc:	60fb      	str	r3, [r7, #12]
    a5fe:	e001      	b.n	a604 <_ZN5Debug15testServoAnalogEv+0x74>
    a600:	68bb      	ldr	r3, [r7, #8]
    a602:	60fb      	str	r3, [r7, #12]
    a604:	68fb      	ldr	r3, [r7, #12]
    a606:	62fb      	str	r3, [r7, #44]
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    a608:	f04f 0014 	mov.w	r0, #20	; 0x14
    a60c:	f003 fea4 	bl	e358 <_Znwj>
    a610:	4603      	mov	r3, r0
    a612:	613b      	str	r3, [r7, #16]
    a614:	693b      	ldr	r3, [r7, #16]
    a616:	2b00      	cmp	r3, #0
    a618:	d00b      	beq.n	a632 <_ZN5Debug15testServoAnalogEv+0xa2>
    a61a:	4b3c      	ldr	r3, [pc, #240]	(a70c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a61c:	9300      	str	r3, [sp, #0]
    a61e:	6938      	ldr	r0, [r7, #16]
    a620:	6ab9      	ldr	r1, [r7, #40]
    a622:	f04f 0202 	mov.w	r2, #2	; 0x2
    a626:	4b3a      	ldr	r3, [pc, #232]	(a710 <_ZN5Debug15testServoAnalogEv+0x180>)
    a628:	f7fc fca6 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    a62c:	693b      	ldr	r3, [r7, #16]
    a62e:	617b      	str	r3, [r7, #20]
    a630:	e001      	b.n	a636 <_ZN5Debug15testServoAnalogEv+0xa6>
    a632:	693b      	ldr	r3, [r7, #16]
    a634:	617b      	str	r3, [r7, #20]
    a636:	697b      	ldr	r3, [r7, #20]
    a638:	633b      	str	r3, [r7, #48]
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    a63a:	f04f 0014 	mov.w	r0, #20	; 0x14
    a63e:	f003 fe8b 	bl	e358 <_Znwj>
    a642:	4603      	mov	r3, r0
    a644:	61bb      	str	r3, [r7, #24]
    a646:	69bb      	ldr	r3, [r7, #24]
    a648:	2b00      	cmp	r3, #0
    a64a:	d00b      	beq.n	a664 <_ZN5Debug15testServoAnalogEv+0xd4>
    a64c:	4b2f      	ldr	r3, [pc, #188]	(a70c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a64e:	9300      	str	r3, [sp, #0]
    a650:	69b8      	ldr	r0, [r7, #24]
    a652:	6ab9      	ldr	r1, [r7, #40]
    a654:	f04f 0203 	mov.w	r2, #3	; 0x3
    a658:	4b2d      	ldr	r3, [pc, #180]	(a710 <_ZN5Debug15testServoAnalogEv+0x180>)
    a65a:	f7fc fc8d 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    a65e:	69bb      	ldr	r3, [r7, #24]
    a660:	61fb      	str	r3, [r7, #28]
    a662:	e001      	b.n	a668 <_ZN5Debug15testServoAnalogEv+0xd8>
    a664:	69bb      	ldr	r3, [r7, #24]
    a666:	61fb      	str	r3, [r7, #28]
    a668:	69fb      	ldr	r3, [r7, #28]
    a66a:	637b      	str	r3, [r7, #52]
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);
    a66c:	f04f 0014 	mov.w	r0, #20	; 0x14
    a670:	f003 fe72 	bl	e358 <_Znwj>
    a674:	4603      	mov	r3, r0
    a676:	623b      	str	r3, [r7, #32]
    a678:	6a3b      	ldr	r3, [r7, #32]
    a67a:	2b00      	cmp	r3, #0
    a67c:	d00b      	beq.n	a696 <_ZN5Debug15testServoAnalogEv+0x106>
    a67e:	4b23      	ldr	r3, [pc, #140]	(a70c <_ZN5Debug15testServoAnalogEv+0x17c>)
    a680:	9300      	str	r3, [sp, #0]
    a682:	6a38      	ldr	r0, [r7, #32]
    a684:	6ab9      	ldr	r1, [r7, #40]
    a686:	f04f 0204 	mov.w	r2, #4	; 0x4
    a68a:	4b21      	ldr	r3, [pc, #132]	(a710 <_ZN5Debug15testServoAnalogEv+0x180>)
    a68c:	f7fc fc74 	bl	6f78 <_ZN5ServoC1EP5Timerhff>
    a690:	6a3b      	ldr	r3, [r7, #32]
    a692:	627b      	str	r3, [r7, #36]
    a694:	e001      	b.n	a69a <_ZN5Debug15testServoAnalogEv+0x10a>
    a696:	6a3b      	ldr	r3, [r7, #32]
    a698:	627b      	str	r3, [r7, #36]
    a69a:	6a7b      	ldr	r3, [r7, #36]
    a69c:	63bb      	str	r3, [r7, #56]

    for(int i=0; i<2000; i++)
    a69e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6a2:	63fb      	str	r3, [r7, #60]
    a6a4:	e027      	b.n	a6f6 <_ZN5Debug15testServoAnalogEv+0x166>
    {
        servo1->goToAngle(70);
    a6a6:	6af8      	ldr	r0, [r7, #44]
    a6a8:	491a      	ldr	r1, [pc, #104]	(a714 <_ZN5Debug15testServoAnalogEv+0x184>)
    a6aa:	f7fc fbf5 	bl	6e98 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_CLOSED);
        servo3->goToAngle(BALAI_G_CLOSED);
        servo4->goToAngle(BALAI_G_CLOSED);*/
        allumerLED();
    a6ae:	f001 fc4b 	bl	bf48 <_Z10allumerLEDv>

        for(int j=0; j<10000000; j++);
    a6b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6b6:	643b      	str	r3, [r7, #64]
    a6b8:	e003      	b.n	a6c2 <_ZN5Debug15testServoAnalogEv+0x132>
    a6ba:	6c3b      	ldr	r3, [r7, #64]
    a6bc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a6c0:	643b      	str	r3, [r7, #64]
    a6c2:	6c3a      	ldr	r2, [r7, #64]
    a6c4:	4b14      	ldr	r3, [pc, #80]	(a718 <_ZN5Debug15testServoAnalogEv+0x188>)
    a6c6:	429a      	cmp	r2, r3
    a6c8:	ddf7      	ble.n	a6ba <_ZN5Debug15testServoAnalogEv+0x12a>

        servo1->goToAngle(165);
    a6ca:	6af8      	ldr	r0, [r7, #44]
    a6cc:	4913      	ldr	r1, [pc, #76]	(a71c <_ZN5Debug15testServoAnalogEv+0x18c>)
    a6ce:	f7fc fbe3 	bl	6e98 <_ZN5Servo9goToAngleEf>
        /*servo2->goToAngle(BALAI_G_OPEN);
        servo3->goToAngle(BALAI_G_OPEN);
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();
    a6d2:	f001 fbdd 	bl	be90 <_Z11eteindreLEDv>

        for(int j=0; j<10000000; j++);
    a6d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a6da:	647b      	str	r3, [r7, #68]
    a6dc:	e003      	b.n	a6e6 <_ZN5Debug15testServoAnalogEv+0x156>
    a6de:	6c7b      	ldr	r3, [r7, #68]
    a6e0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a6e4:	647b      	str	r3, [r7, #68]
    a6e6:	6c7a      	ldr	r2, [r7, #68]
    a6e8:	4b0b      	ldr	r3, [pc, #44]	(a718 <_ZN5Debug15testServoAnalogEv+0x188>)
    a6ea:	429a      	cmp	r2, r3
    a6ec:	ddf7      	ble.n	a6de <_ZN5Debug15testServoAnalogEv+0x14e>
    Servo* servo1 = new Servo(timer1, 1, 0.01f, 0.11f);
    Servo* servo2 = new Servo(timer1, 2, 0.01f, 0.11f);
    Servo* servo3 = new Servo(timer1, 3, 0.01f, 0.11f);
    Servo* servo4 = new Servo(timer1, 4, 0.01f, 0.11f);

    for(int i=0; i<2000; i++)
    a6ee:	6bfb      	ldr	r3, [r7, #60]
    a6f0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a6f4:	63fb      	str	r3, [r7, #60]
    a6f6:	6bfa      	ldr	r2, [r7, #60]
    a6f8:	f240 73cf 	movw	r3, #1999	; 0x7cf
    a6fc:	429a      	cmp	r2, r3
    a6fe:	ddd2      	ble.n	a6a6 <_ZN5Debug15testServoAnalogEv+0x116>
        servo4->goToAngle(BALAI_G_OPEN);*/
        eteindreLED();

        for(int j=0; j<10000000; j++);
    }
}
    a700:	f107 0748 	add.w	r7, r7, #72	; 0x48
    a704:	46bd      	mov	sp, r7
    a706:	bd80      	pop	{r7, pc}
    a708:	40012c00 	.word	0x40012c00
    a70c:	3de147ae 	.word	0x3de147ae
    a710:	3c23d70a 	.word	0x3c23d70a
    a714:	428c0000 	.word	0x428c0000
    a718:	0098967f 	.word	0x0098967f
    a71c:	43250000 	.word	0x43250000

0000a720 <_Z21distancePresqueEgalesff>:
#include "distance.h"

#include <math.h>

// On vérifie qu'il y a égalité ou presque entre deux distances
bool distancePresqueEgales(Distance d1, Distance d2)
    a720:	b580      	push	{r7, lr}
    a722:	b084      	sub	sp, #16
    a724:	af00      	add	r7, sp, #0
    a726:	60f8      	str	r0, [r7, #12]
    a728:	60b9      	str	r1, [r7, #8]
{
    static const Distance epsilon = 10;
    return (fabs(d1 - d2) < epsilon);
    a72a:	68f8      	ldr	r0, [r7, #12]
    a72c:	68b9      	ldr	r1, [r7, #8]
    a72e:	f00e f99d 	bl	18a6c <__aeabi_fsub>
    a732:	4603      	mov	r3, r0
    a734:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
    a738:	f04f 0300 	mov.w	r3, #0	; 0x0
    a73c:	71fb      	strb	r3, [r7, #7]
    a73e:	4610      	mov	r0, r2
    a740:	4907      	ldr	r1, [pc, #28]	(a760 <_Z21distancePresqueEgalesff+0x40>)
    a742:	f00e fc39 	bl	18fb8 <__aeabi_fcmplt>
    a746:	4603      	mov	r3, r0
    a748:	2b00      	cmp	r3, #0
    a74a:	d002      	beq.n	a752 <_Z21distancePresqueEgalesff+0x32>
    a74c:	f04f 0301 	mov.w	r3, #1	; 0x1
    a750:	71fb      	strb	r3, [r7, #7]
    a752:	79fb      	ldrb	r3, [r7, #7]
}
    a754:	4618      	mov	r0, r3
    a756:	f107 0710 	add.w	r7, r7, #16	; 0x10
    a75a:	46bd      	mov	sp, r7
    a75c:	bd80      	pop	{r7, pc}
    a75e:	46c0      	nop			(mov r8, r8)
    a760:	41200000 	.word	0x41200000

0000a764 <_ZN12AnalogSensor18conversionFinishedEv>:
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    #endif
}

bool AnalogSensor::conversionFinished()
    a764:	b580      	push	{r7, lr}
    a766:	af00      	add	r7, sp, #0
   //return DMA_GetFlagStatus(DMA1_Stream1, DMA_FLAG_TCIF1);//I have no idea what I am doing
    //TOBECONTINUED
    #ifdef STM32F40_41xxx
        return true;
    #else
        return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    a768:	f04f 0002 	mov.w	r0, #2	; 0x2
    a76c:	f7f6 fd48 	bl	1200 <DMA_GetFlagStatus>
    a770:	4603      	mov	r3, r0
    a772:	2b00      	cmp	r3, #0
    a774:	bf0c      	ite	eq
    a776:	2300      	moveq	r3, #0
    a778:	2301      	movne	r3, #1
    a77a:	b2db      	uxtb	r3, r3
    #endif
}
    a77c:	4618      	mov	r0, r3
    a77e:	46bd      	mov	sp, r7
    a780:	bd80      	pop	{r7, pc}
    a782:	46c0      	nop			(mov r8, r8)

0000a784 <_ZN12AnalogSensor15startConversionEv>:
        DMA_Cmd(DMA1_Channel1, ENABLE);
        return data;
    #endif
}

void AnalogSensor::startConversion()
    a784:	b580      	push	{r7, lr}
    a786:	af00      	add	r7, sp, #0
{
    #ifdef STM32F40_41xxx
        ADC_SoftwareStartConv(ADC1);
    #else
        ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    a788:	4803      	ldr	r0, [pc, #12]	(a798 <_ZN12AnalogSensor15startConversionEv+0x14>)
    a78a:	f04f 0101 	mov.w	r1, #1	; 0x1
    a78e:	f7f5 ff83 	bl	698 <ADC_SoftwareStartConvCmd>
    #endif
}
    a792:	46bd      	mov	sp, r7
    a794:	bd80      	pop	{r7, pc}
    a796:	46c0      	nop			(mov r8, r8)
    a798:	40012400 	.word	0x40012400

0000a79c <_ZN12AnalogSensor14initialiserADCEhPh>:
{
}

#ifdef ROBOTHW // pour le vrai robot

DMA_MEMORY_TYPE* AnalogSensor::initialiserADC(uint8_t nbChannel, uint8_t* channels)
    a79c:	b580      	push	{r7, lr}
    a79e:	b094      	sub	sp, #80
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	4603      	mov	r3, r0
    a7a4:	6039      	str	r1, [r7, #0]
    a7a6:	71fb      	strb	r3, [r7, #7]
        /* Start ADC3 Software Conversion */
        ADC_SoftwareStartConv(ADC3);

        return data;
    #else
        DMA_MEMORY_TYPE* data = new DMA_MEMORY_TYPE[nbChannel];
    a7a8:	79fb      	ldrb	r3, [r7, #7]
    a7aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
    a7ae:	4618      	mov	r0, r3
    a7b0:	f003 fe6a 	bl	e488 <_Znaj>
    a7b4:	4603      	mov	r3, r0
    a7b6:	64bb      	str	r3, [r7, #72]

        ADC_InitTypeDef ADC_InitStructure;
        // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
        ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    a7b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    a7bc:	637b      	str	r3, [r7, #52]
        // On scanne tous les channels
        ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    a7be:	f04f 0301 	mov.w	r3, #1	; 0x1
    a7c2:	f887 3038 	strb.w	r3, [r7, #56]
        // Single conversion mode
        ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    a7c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    a7ca:	f887 3039 	strb.w	r3, [r7, #57]
        // Pas d'external trigger (on lance la conversion à la main)
        ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    a7ce:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    a7d2:	63fb      	str	r3, [r7, #60]
        ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    a7d4:	f04f 0300 	mov.w	r3, #0	; 0x0
    a7d8:	643b      	str	r3, [r7, #64]
        ADC_InitStructure.ADC_NbrOfChannel = nbChannel;
    a7da:	79fb      	ldrb	r3, [r7, #7]
    a7dc:	f887 3044 	strb.w	r3, [r7, #68]
        ADC_Init(ADC1, &ADC_InitStructure);
    a7e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
    a7e4:	483b      	ldr	r0, [pc, #236]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a7e6:	4619      	mov	r1, r3
    a7e8:	f7f5 fe1e 	bl	428 <ADC_Init>

        // Activation du périphérique
        ADC_Cmd(ADC1, ENABLE);
    a7ec:	4839      	ldr	r0, [pc, #228]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a7ee:	f04f 0101 	mov.w	r1, #1	; 0x1
    a7f2:	f7f5 fe9b 	bl	52c <ADC_Cmd>

        // Calibrage
        // On remet la calibration à zéro
        ADC_ResetCalibration(ADC1);
    a7f6:	4837      	ldr	r0, [pc, #220]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a7f8:	f7f5 fef6 	bl	5e8 <ADC_ResetCalibration>
        while(ADC_GetResetCalibrationStatus(ADC1));
    a7fc:	4835      	ldr	r0, [pc, #212]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a7fe:	f7f5 ff03 	bl	608 <ADC_GetResetCalibrationStatus>
    a802:	4603      	mov	r3, r0
    a804:	2b00      	cmp	r3, #0
    a806:	bf0c      	ite	eq
    a808:	2300      	moveq	r3, #0
    a80a:	2301      	movne	r3, #1
    a80c:	b2db      	uxtb	r3, r3
    a80e:	2b00      	cmp	r3, #0
    a810:	d1f4      	bne.n	a7fc <_ZN12AnalogSensor14initialiserADCEhPh+0x60>
        // On lance la calibration
        ADC_StartCalibration(ADC1);
    a812:	4830      	ldr	r0, [pc, #192]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a814:	f7f5 ff14 	bl	640 <ADC_StartCalibration>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));
    a818:	482e      	ldr	r0, [pc, #184]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a81a:	f7f5 ff21 	bl	660 <ADC_GetCalibrationStatus>
    a81e:	4603      	mov	r3, r0
    a820:	2b00      	cmp	r3, #0
    a822:	bf0c      	ite	eq
    a824:	2300      	moveq	r3, #0
    a826:	2301      	movne	r3, #1
    a828:	b2db      	uxtb	r3, r3
    a82a:	2b00      	cmp	r3, #0
    a82c:	d1f4      	bne.n	a818 <_ZN12AnalogSensor14initialiserADCEhPh+0x7c>

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    a82e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a832:	64fb      	str	r3, [r7, #76]
    a834:	e013      	b.n	a85e <_ZN12AnalogSensor14initialiserADCEhPh+0xc2>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);
    a836:	6cfa      	ldr	r2, [r7, #76]
    a838:	683b      	ldr	r3, [r7, #0]
    a83a:	4413      	add	r3, r2
    a83c:	781a      	ldrb	r2, [r3, #0]
    a83e:	6cfb      	ldr	r3, [r7, #76]
    a840:	b2db      	uxtb	r3, r3
    a842:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a846:	b2db      	uxtb	r3, r3
    a848:	4822      	ldr	r0, [pc, #136]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a84a:	4611      	mov	r1, r2
    a84c:	461a      	mov	r2, r3
    a84e:	f04f 0300 	mov.w	r3, #0	; 0x0
    a852:	f7f5 ff9b 	bl	78c <ADC_RegularChannelConfig>
        // Et on attend que ce soit fini
        while(ADC_GetCalibrationStatus(ADC1));

        // Définition des canaux à convertir
        //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
        for (int i=0; i<nbChannel; i++)
    a856:	6cfb      	ldr	r3, [r7, #76]
    a858:	f103 0301 	add.w	r3, r3, #1	; 0x1
    a85c:	64fb      	str	r3, [r7, #76]
    a85e:	79fa      	ldrb	r2, [r7, #7]
    a860:	6cfb      	ldr	r3, [r7, #76]
    a862:	429a      	cmp	r2, r3
    a864:	dce7      	bgt.n	a836 <_ZN12AnalogSensor14initialiserADCEhPh+0x9a>
            ADC_RegularChannelConfig (ADC1, channels[i], i+1, ADC_SampleTime_1Cycles5);

        // active le transfert des résultats de conversion en SRAM
        ADC_DMACmd(ADC1, ENABLE);
    a866:	481b      	ldr	r0, [pc, #108]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a868:	f04f 0101 	mov.w	r1, #1	; 0x1
    a86c:	f7f5 fe7a 	bl	564 <ADC_DMACmd>

        DMA_InitTypeDef DMA_InitStructure;
        DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    a870:	4b18      	ldr	r3, [pc, #96]	(a8d4 <_ZN12AnalogSensor14initialiserADCEhPh+0x138>)
    a872:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    a876:	60bb      	str	r3, [r7, #8]
        DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    a878:	6cbb      	ldr	r3, [r7, #72]
    a87a:	60fb      	str	r3, [r7, #12]
        DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    a87c:	f04f 0300 	mov.w	r3, #0	; 0x0
    a880:	613b      	str	r3, [r7, #16]
        DMA_InitStructure.DMA_BufferSize = nbChannel; // Nombre de conversions à transférer
    a882:	79fb      	ldrb	r3, [r7, #7]
    a884:	617b      	str	r3, [r7, #20]
        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    a886:	f04f 0300 	mov.w	r3, #0	; 0x0
    a88a:	61bb      	str	r3, [r7, #24]
        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    a88c:	f04f 0380 	mov.w	r3, #128	; 0x80
    a890:	61fb      	str	r3, [r7, #28]
        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    a892:	f44f 7300 	mov.w	r3, #512	; 0x200
    a896:	623b      	str	r3, [r7, #32]
        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    a898:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a89c:	627b      	str	r3, [r7, #36]
        // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
        // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
        DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    a89e:	f04f 0320 	mov.w	r3, #32	; 0x20
    a8a2:	62bb      	str	r3, [r7, #40]
        DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    a8a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    a8a8:	62fb      	str	r3, [r7, #44]
        // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
        DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    a8aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    a8ae:	633b      	str	r3, [r7, #48]
        // Channel1 : cf p.192 tableau 58
        DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    a8b0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    a8b4:	4808      	ldr	r0, [pc, #32]	(a8d8 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    a8b6:	4619      	mov	r1, r3
    a8b8:	f7f6 fbda 	bl	1070 <DMA_Init>
        DMA_Cmd(DMA1_Channel1, ENABLE);
    a8bc:	4806      	ldr	r0, [pc, #24]	(a8d8 <_ZN12AnalogSensor14initialiserADCEhPh+0x13c>)
    a8be:	f04f 0101 	mov.w	r1, #1	; 0x1
    a8c2:	f7f6 fc53 	bl	116c <DMA_Cmd>
        return data;
    a8c6:	6cbb      	ldr	r3, [r7, #72]
    #endif
}
    a8c8:	4618      	mov	r0, r3
    a8ca:	f107 0750 	add.w	r7, r7, #80	; 0x50
    a8ce:	46bd      	mov	sp, r7
    a8d0:	bd80      	pop	{r7, pc}
    a8d2:	46c0      	nop			(mov r8, r8)
    a8d4:	40012400 	.word	0x40012400
    a8d8:	40020008 	.word	0x40020008

0000a8dc <_ZN12AnalogSensorD0Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    a8dc:	b580      	push	{r7, lr}
    a8de:	b082      	sub	sp, #8
    a8e0:	af00      	add	r7, sp, #0
    a8e2:	6078      	str	r0, [r7, #4]
    a8e4:	687a      	ldr	r2, [r7, #4]
    a8e6:	4b0a      	ldr	r3, [pc, #40]	(a910 <_ZN12AnalogSensorD0Ev+0x34>)
    a8e8:	6013      	str	r3, [r2, #0]
{
}
    a8ea:	687b      	ldr	r3, [r7, #4]
    a8ec:	4618      	mov	r0, r3
    a8ee:	f7fb f871 	bl	59d4 <_ZN6SensorD2Ev>
    a8f2:	f04f 0301 	mov.w	r3, #1	; 0x1
    a8f6:	b2db      	uxtb	r3, r3
    a8f8:	2b00      	cmp	r3, #0
    a8fa:	d002      	beq.n	a902 <_ZN12AnalogSensorD0Ev+0x26>
    a8fc:	6878      	ldr	r0, [r7, #4]
    a8fe:	f003 fdd1 	bl	e4a4 <_ZdlPv>
    a902:	687b      	ldr	r3, [r7, #4]
    a904:	4618      	mov	r0, r3
    a906:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a90a:	46bd      	mov	sp, r7
    a90c:	bd80      	pop	{r7, pc}
    a90e:	46c0      	nop			(mov r8, r8)
    a910:	0001fac8 	.word	0x0001fac8

0000a914 <_ZN12AnalogSensorD1Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    a914:	b580      	push	{r7, lr}
    a916:	b082      	sub	sp, #8
    a918:	af00      	add	r7, sp, #0
    a91a:	6078      	str	r0, [r7, #4]
    a91c:	687a      	ldr	r2, [r7, #4]
    a91e:	4b0a      	ldr	r3, [pc, #40]	(a948 <_ZN12AnalogSensorD1Ev+0x34>)
    a920:	6013      	str	r3, [r2, #0]
{
}
    a922:	687b      	ldr	r3, [r7, #4]
    a924:	4618      	mov	r0, r3
    a926:	f7fb f855 	bl	59d4 <_ZN6SensorD2Ev>
    a92a:	f04f 0300 	mov.w	r3, #0	; 0x0
    a92e:	b2db      	uxtb	r3, r3
    a930:	2b00      	cmp	r3, #0
    a932:	d002      	beq.n	a93a <_ZN12AnalogSensorD1Ev+0x26>
    a934:	6878      	ldr	r0, [r7, #4]
    a936:	f003 fdb5 	bl	e4a4 <_ZdlPv>
    a93a:	687b      	ldr	r3, [r7, #4]
    a93c:	4618      	mov	r0, r3
    a93e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a942:	46bd      	mov	sp, r7
    a944:	bd80      	pop	{r7, pc}
    a946:	46c0      	nop			(mov r8, r8)
    a948:	0001fac8 	.word	0x0001fac8

0000a94c <_ZN12AnalogSensorD2Ev>:
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;

    AnalogSensor::nbCapteurDejaInitialise++;
}

AnalogSensor::~AnalogSensor()
    a94c:	b580      	push	{r7, lr}
    a94e:	b082      	sub	sp, #8
    a950:	af00      	add	r7, sp, #0
    a952:	6078      	str	r0, [r7, #4]
    a954:	687a      	ldr	r2, [r7, #4]
    a956:	4b0a      	ldr	r3, [pc, #40]	(a980 <_ZN12AnalogSensorD2Ev+0x34>)
    a958:	6013      	str	r3, [r2, #0]
{
}
    a95a:	687b      	ldr	r3, [r7, #4]
    a95c:	4618      	mov	r0, r3
    a95e:	f7fb f839 	bl	59d4 <_ZN6SensorD2Ev>
    a962:	f04f 0300 	mov.w	r3, #0	; 0x0
    a966:	b2db      	uxtb	r3, r3
    a968:	2b00      	cmp	r3, #0
    a96a:	d002      	beq.n	a972 <_ZN12AnalogSensorD2Ev+0x26>
    a96c:	6878      	ldr	r0, [r7, #4]
    a96e:	f003 fd99 	bl	e4a4 <_ZdlPv>
    a972:	687b      	ldr	r3, [r7, #4]
    a974:	4618      	mov	r0, r3
    a976:	f107 0708 	add.w	r7, r7, #8	; 0x8
    a97a:	46bd      	mov	sp, r7
    a97c:	bd80      	pop	{r7, pc}
    a97e:	46c0      	nop			(mov r8, r8)
    a980:	0001fac8 	.word	0x0001fac8

0000a984 <_ZN12AnalogSensorC1EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    a984:	b580      	push	{r7, lr}
    a986:	b084      	sub	sp, #16
    a988:	af00      	add	r7, sp, #0
    a98a:	60f8      	str	r0, [r7, #12]
    a98c:	460b      	mov	r3, r1
    a98e:	607a      	str	r2, [r7, #4]
    a990:	72fb      	strb	r3, [r7, #11]
    a992:	68fb      	ldr	r3, [r7, #12]
    a994:	4618      	mov	r0, r3
    a996:	f7fa ffcd 	bl	5934 <_ZN6SensorC2Ev>
    a99a:	68fa      	ldr	r2, [r7, #12]
    a99c:	4b0c      	ldr	r3, [pc, #48]	(a9d0 <_ZN12AnalogSensorC1EhPt+0x4c>)
    a99e:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    a9a0:	68fa      	ldr	r2, [r7, #12]
    a9a2:	7afb      	ldrb	r3, [r7, #11]
    a9a4:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    a9a6:	4b0b      	ldr	r3, [pc, #44]	(a9d4 <_ZN12AnalogSensorC1EhPt+0x50>)
    a9a8:	681b      	ldr	r3, [r3, #0]
    a9aa:	ea4f 0243 	mov.w	r2, r3, lsl #1
    a9ae:	687b      	ldr	r3, [r7, #4]
    a9b0:	441a      	add	r2, r3
    a9b2:	68fb      	ldr	r3, [r7, #12]
    a9b4:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    a9b6:	4b07      	ldr	r3, [pc, #28]	(a9d4 <_ZN12AnalogSensorC1EhPt+0x50>)
    a9b8:	681b      	ldr	r3, [r3, #0]
    a9ba:	f103 0201 	add.w	r2, r3, #1	; 0x1
    a9be:	4b05      	ldr	r3, [pc, #20]	(a9d4 <_ZN12AnalogSensorC1EhPt+0x50>)
    a9c0:	601a      	str	r2, [r3, #0]
}
    a9c2:	68fb      	ldr	r3, [r7, #12]
    a9c4:	4618      	mov	r0, r3
    a9c6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    a9ca:	46bd      	mov	sp, r7
    a9cc:	bd80      	pop	{r7, pc}
    a9ce:	46c0      	nop			(mov r8, r8)
    a9d0:	0001fac8 	.word	0x0001fac8
    a9d4:	20000578 	.word	0x20000578

0000a9d8 <_ZN12AnalogSensorC2EhPt>:
#include "analogSensor.h"

int AnalogSensor::nbCapteurDejaInitialise = 0;

AnalogSensor::AnalogSensor(uint8_t channel, DMA_MEMORY_TYPE* pData)
    a9d8:	b580      	push	{r7, lr}
    a9da:	b084      	sub	sp, #16
    a9dc:	af00      	add	r7, sp, #0
    a9de:	60f8      	str	r0, [r7, #12]
    a9e0:	460b      	mov	r3, r1
    a9e2:	607a      	str	r2, [r7, #4]
    a9e4:	72fb      	strb	r3, [r7, #11]
    a9e6:	68fb      	ldr	r3, [r7, #12]
    a9e8:	4618      	mov	r0, r3
    a9ea:	f7fa ffa3 	bl	5934 <_ZN6SensorC2Ev>
    a9ee:	68fa      	ldr	r2, [r7, #12]
    a9f0:	4b0c      	ldr	r3, [pc, #48]	(aa24 <_ZN12AnalogSensorC2EhPt+0x4c>)
    a9f2:	6013      	str	r3, [r2, #0]
{
    this->channel = channel;
    a9f4:	68fa      	ldr	r2, [r7, #12]
    a9f6:	7afb      	ldrb	r3, [r7, #11]
    a9f8:	7113      	strb	r3, [r2, #4]
    this->data = pData + AnalogSensor::nbCapteurDejaInitialise;
    a9fa:	4b0b      	ldr	r3, [pc, #44]	(aa28 <_ZN12AnalogSensorC2EhPt+0x50>)
    a9fc:	681b      	ldr	r3, [r3, #0]
    a9fe:	ea4f 0243 	mov.w	r2, r3, lsl #1
    aa02:	687b      	ldr	r3, [r7, #4]
    aa04:	441a      	add	r2, r3
    aa06:	68fb      	ldr	r3, [r7, #12]
    aa08:	609a      	str	r2, [r3, #8]

    AnalogSensor::nbCapteurDejaInitialise++;
    aa0a:	4b07      	ldr	r3, [pc, #28]	(aa28 <_ZN12AnalogSensorC2EhPt+0x50>)
    aa0c:	681b      	ldr	r3, [r3, #0]
    aa0e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    aa12:	4b05      	ldr	r3, [pc, #20]	(aa28 <_ZN12AnalogSensorC2EhPt+0x50>)
    aa14:	601a      	str	r2, [r3, #0]
}
    aa16:	68fb      	ldr	r3, [r7, #12]
    aa18:	4618      	mov	r0, r3
    aa1a:	f107 0710 	add.w	r7, r7, #16	; 0x10
    aa1e:	46bd      	mov	sp, r7
    aa20:	bd80      	pop	{r7, pc}
    aa22:	46c0      	nop			(mov r8, r8)
    aa24:	0001fac8 	.word	0x0001fac8
    aa28:	20000578 	.word	0x20000578

0000aa2c <_Z12ax12ChecksumaPi>:
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
    aa2c:	b480      	push	{r7}
    aa2e:	b085      	sub	sp, #20
    aa30:	af00      	add	r7, sp, #0
    aa32:	4603      	mov	r3, r0
    aa34:	6039      	str	r1, [r7, #0]
    aa36:	71fb      	strb	r3, [r7, #7]
{
	int checksum = 0;
    aa38:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa3c:	60bb      	str	r3, [r7, #8]
    for(int i = 0; i < length+1; i++) {
    aa3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    aa42:	60fb      	str	r3, [r7, #12]
    aa44:	e00c      	b.n	aa60 <_Z12ax12ChecksumaPi+0x34>
		checksum += parameters[i];
    aa46:	68fb      	ldr	r3, [r7, #12]
    aa48:	ea4f 0283 	mov.w	r2, r3, lsl #2
    aa4c:	683b      	ldr	r3, [r7, #0]
    aa4e:	4413      	add	r3, r2
    aa50:	681a      	ldr	r2, [r3, #0]
    aa52:	68bb      	ldr	r3, [r7, #8]
    aa54:	4413      	add	r3, r2
    aa56:	60bb      	str	r3, [r7, #8]
#include "ax12api.h"

int ax12Checksum(int8_t length, int* parameters)
{
	int checksum = 0;
    for(int i = 0; i < length+1; i++) {
    aa58:	68fb      	ldr	r3, [r7, #12]
    aa5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    aa5e:	60fb      	str	r3, [r7, #12]
    aa60:	f997 3007 	ldrsb.w	r3, [r7, #7]
    aa64:	f103 0201 	add.w	r2, r3, #1	; 0x1
    aa68:	68fb      	ldr	r3, [r7, #12]
    aa6a:	429a      	cmp	r2, r3
    aa6c:	dceb      	bgt.n	aa46 <_Z12ax12ChecksumaPi+0x1a>
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
    aa6e:	68bb      	ldr	r3, [r7, #8]
    aa70:	b2db      	uxtb	r3, r3
    aa72:	ea6f 0303 	mvn.w	r3, r3
    aa76:	b2db      	uxtb	r3, r3
    aa78:	b25b      	sxtb	r3, r3
}
    aa7a:	4618      	mov	r0, r3
    aa7c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aa80:	46bd      	mov	sp, r7
    aa82:	bc80      	pop	{r7}
    aa84:	4770      	bx	lr
    aa86:	46c0      	nop			(mov r8, r8)

0000aa88 <_ZN4AX1217createWriteHeaderEPiii>:
    return 8;
}



void AX12::createWriteHeader(int* retour, int servo, int nombreParamsAjoutes)
    aa88:	b480      	push	{r7}
    aa8a:	b085      	sub	sp, #20
    aa8c:	af00      	add	r7, sp, #0
    aa8e:	60f8      	str	r0, [r7, #12]
    aa90:	60b9      	str	r1, [r7, #8]
    aa92:	607a      	str	r2, [r7, #4]
{
    retour[0] = 0xff;
    aa94:	68fa      	ldr	r2, [r7, #12]
    aa96:	f04f 03ff 	mov.w	r3, #255	; 0xff
    aa9a:	6013      	str	r3, [r2, #0]
    retour[1] = 0xff;
    aa9c:	68fb      	ldr	r3, [r7, #12]
    aa9e:	f103 0204 	add.w	r2, r3, #4	; 0x4
    aaa2:	f04f 03ff 	mov.w	r3, #255	; 0xff
    aaa6:	6013      	str	r3, [r2, #0]
    retour[2] = servo;
    aaa8:	68fb      	ldr	r3, [r7, #12]
    aaaa:	f103 0208 	add.w	r2, r3, #8	; 0x8
    aaae:	68bb      	ldr	r3, [r7, #8]
    aab0:	6013      	str	r3, [r2, #0]
    retour[3] = AX12_WRITE_DATA_PARAMS+2+nombreParamsAjoutes;
    aab2:	68fb      	ldr	r3, [r7, #12]
    aab4:	f103 020c 	add.w	r2, r3, #12	; 0xc
    aab8:	687b      	ldr	r3, [r7, #4]
    aaba:	f103 0304 	add.w	r3, r3, #4	; 0x4
    aabe:	6013      	str	r3, [r2, #0]
    retour[4] = AX12_WRITE_DATA;
    aac0:	68fb      	ldr	r3, [r7, #12]
    aac2:	f103 0210 	add.w	r2, r3, #16	; 0x10
    aac6:	f04f 0303 	mov.w	r3, #3	; 0x3
    aaca:	6013      	str	r3, [r2, #0]
}
    aacc:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aad0:	46bd      	mov	sp, r7
    aad2:	bc80      	pop	{r7}
    aad4:	4770      	bx	lr
    aad6:	46c0      	nop			(mov r8, r8)

0000aad8 <_ZN4AX1222getBaudRateInstructionEPihi>:
    retour[5] = AX12_LED;
    retour[6] = ledOn;
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    return 8;
}
int AX12::getBaudRateInstruction(int* retour, uint8_t baudRate, int servo)
    aad8:	b590      	push	{r4, r7, lr}
    aada:	b085      	sub	sp, #20
    aadc:	af00      	add	r7, sp, #0
    aade:	60f8      	str	r0, [r7, #12]
    aae0:	460b      	mov	r3, r1
    aae2:	607a      	str	r2, [r7, #4]
    aae4:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    aae6:	68f8      	ldr	r0, [r7, #12]
    aae8:	6879      	ldr	r1, [r7, #4]
    aaea:	f04f 0200 	mov.w	r2, #0	; 0x0
    aaee:	f7ff ffcb 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_BAUD_RATE;
    aaf2:	68fb      	ldr	r3, [r7, #12]
    aaf4:	f103 0214 	add.w	r2, r3, #20	; 0x14
    aaf8:	f04f 0304 	mov.w	r3, #4	; 0x4
    aafc:	6013      	str	r3, [r2, #0]
    retour[6] = baudRate;
    aafe:	68fb      	ldr	r3, [r7, #12]
    ab00:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ab04:	7afb      	ldrb	r3, [r7, #11]
    ab06:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    ab08:	68fb      	ldr	r3, [r7, #12]
    ab0a:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    ab0e:	68fb      	ldr	r3, [r7, #12]
    ab10:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ab14:	681b      	ldr	r3, [r3, #0]
    ab16:	b2da      	uxtb	r2, r3
    ab18:	68fb      	ldr	r3, [r7, #12]
    ab1a:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ab1e:	b253      	sxtb	r3, r2
    ab20:	4618      	mov	r0, r3
    ab22:	f7ff ff83 	bl	aa2c <_Z12ax12ChecksumaPi>
    ab26:	4603      	mov	r3, r0
    ab28:	6023      	str	r3, [r4, #0]
    return 8;
    ab2a:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    ab2e:	4618      	mov	r0, r3
    ab30:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ab34:	46bd      	mov	sp, r7
    ab36:	bd90      	pop	{r4, r7, pc}

0000ab38 <_ZN4AX1217getLedInstructionEPihi>:
    retour[6] = (uint8_t)(maxTorque);
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getLedInstruction(int* retour, uint8_t ledOn, int servo)
    ab38:	b590      	push	{r4, r7, lr}
    ab3a:	b085      	sub	sp, #20
    ab3c:	af00      	add	r7, sp, #0
    ab3e:	60f8      	str	r0, [r7, #12]
    ab40:	460b      	mov	r3, r1
    ab42:	607a      	str	r2, [r7, #4]
    ab44:	72fb      	strb	r3, [r7, #11]
{
    createWriteHeader(retour, servo, 0); // first, we create a write header with 3 more params (for low/high pos and low/high speed)
    ab46:	68f8      	ldr	r0, [r7, #12]
    ab48:	6879      	ldr	r1, [r7, #4]
    ab4a:	f04f 0200 	mov.w	r2, #0	; 0x0
    ab4e:	f7ff ff9b 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_LED;
    ab52:	68fb      	ldr	r3, [r7, #12]
    ab54:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ab58:	f04f 0319 	mov.w	r3, #25	; 0x19
    ab5c:	6013      	str	r3, [r2, #0]
    retour[6] = ledOn;
    ab5e:	68fb      	ldr	r3, [r7, #12]
    ab60:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ab64:	7afb      	ldrb	r3, [r7, #11]
    ab66:	6013      	str	r3, [r2, #0]
    retour[7] = ax12Checksum(retour[3], &retour[2]);
    ab68:	68fb      	ldr	r3, [r7, #12]
    ab6a:	f103 041c 	add.w	r4, r3, #28	; 0x1c
    ab6e:	68fb      	ldr	r3, [r7, #12]
    ab70:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ab74:	681b      	ldr	r3, [r3, #0]
    ab76:	b2da      	uxtb	r2, r3
    ab78:	68fb      	ldr	r3, [r7, #12]
    ab7a:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ab7e:	b253      	sxtb	r3, r2
    ab80:	4618      	mov	r0, r3
    ab82:	f7ff ff53 	bl	aa2c <_Z12ax12ChecksumaPi>
    ab86:	4603      	mov	r3, r0
    ab88:	6023      	str	r3, [r4, #0]
    return 8;
    ab8a:	f04f 0308 	mov.w	r3, #8	; 0x8
}
    ab8e:	4618      	mov	r0, r3
    ab90:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ab94:	46bd      	mov	sp, r7
    ab96:	bd90      	pop	{r4, r7, pc}

0000ab98 <_ZN4AX1223getMaxTorqueInstructionEPiti>:
    retour[6] = (uint8_t)(torqueLimite);
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMaxTorqueInstruction(int* retour, uint16_t maxTorque, int servo) // torque dans l'eeprom (pour l'écrire dans la ram au démarrage)
    ab98:	b590      	push	{r4, r7, lr}
    ab9a:	b085      	sub	sp, #20
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	60f8      	str	r0, [r7, #12]
    aba0:	460b      	mov	r3, r1
    aba2:	607a      	str	r2, [r7, #4]
    aba4:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    aba6:	68f8      	ldr	r0, [r7, #12]
    aba8:	6879      	ldr	r1, [r7, #4]
    abaa:	f04f 0201 	mov.w	r2, #1	; 0x1
    abae:	f7ff ff6b 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MAX_TORQUE_L;
    abb2:	68fb      	ldr	r3, [r7, #12]
    abb4:	f103 0214 	add.w	r2, r3, #20	; 0x14
    abb8:	f04f 030e 	mov.w	r3, #14	; 0xe
    abbc:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(maxTorque);
    abbe:	68fb      	ldr	r3, [r7, #12]
    abc0:	f103 0218 	add.w	r2, r3, #24	; 0x18
    abc4:	897b      	ldrh	r3, [r7, #10]
    abc6:	b2db      	uxtb	r3, r3
    abc8:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(maxTorque>>8); // high bits
    abca:	68fb      	ldr	r3, [r7, #12]
    abcc:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    abd0:	897b      	ldrh	r3, [r7, #10]
    abd2:	ea4f 2323 	mov.w	r3, r3, asr #8
    abd6:	b2db      	uxtb	r3, r3
    abd8:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    abda:	68fb      	ldr	r3, [r7, #12]
    abdc:	f103 0420 	add.w	r4, r3, #32	; 0x20
    abe0:	68fb      	ldr	r3, [r7, #12]
    abe2:	f103 030c 	add.w	r3, r3, #12	; 0xc
    abe6:	681b      	ldr	r3, [r3, #0]
    abe8:	b2da      	uxtb	r2, r3
    abea:	68fb      	ldr	r3, [r7, #12]
    abec:	f103 0108 	add.w	r1, r3, #8	; 0x8
    abf0:	b253      	sxtb	r3, r2
    abf2:	4618      	mov	r0, r3
    abf4:	f7ff ff1a 	bl	aa2c <_Z12ax12ChecksumaPi>
    abf8:	4603      	mov	r3, r0
    abfa:	6023      	str	r3, [r4, #0]
    return 9;
    abfc:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ac00:	4618      	mov	r0, r3
    ac02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ac06:	46bd      	mov	sp, r7
    ac08:	bd90      	pop	{r4, r7, pc}
    ac0a:	46c0      	nop			(mov r8, r8)

0000ac0c <_ZN4AX1225getTorqueLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getTorqueLimitInstruction(int* retour, uint16_t torqueLimite, int servo) // la torque dans la RAM
    ac0c:	b590      	push	{r4, r7, lr}
    ac0e:	b085      	sub	sp, #20
    ac10:	af00      	add	r7, sp, #0
    ac12:	60f8      	str	r0, [r7, #12]
    ac14:	460b      	mov	r3, r1
    ac16:	607a      	str	r2, [r7, #4]
    ac18:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    ac1a:	68f8      	ldr	r0, [r7, #12]
    ac1c:	6879      	ldr	r1, [r7, #4]
    ac1e:	f04f 0201 	mov.w	r2, #1	; 0x1
    ac22:	f7ff ff31 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_TORQUE_LIMIT_L;
    ac26:	68fb      	ldr	r3, [r7, #12]
    ac28:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ac2c:	f04f 0322 	mov.w	r3, #34	; 0x22
    ac30:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(torqueLimite);
    ac32:	68fb      	ldr	r3, [r7, #12]
    ac34:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ac38:	897b      	ldrh	r3, [r7, #10]
    ac3a:	b2db      	uxtb	r3, r3
    ac3c:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(torqueLimite>>8); // high bits
    ac3e:	68fb      	ldr	r3, [r7, #12]
    ac40:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ac44:	897b      	ldrh	r3, [r7, #10]
    ac46:	ea4f 2323 	mov.w	r3, r3, asr #8
    ac4a:	b2db      	uxtb	r3, r3
    ac4c:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ac4e:	68fb      	ldr	r3, [r7, #12]
    ac50:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ac54:	68fb      	ldr	r3, [r7, #12]
    ac56:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ac5a:	681b      	ldr	r3, [r3, #0]
    ac5c:	b2da      	uxtb	r2, r3
    ac5e:	68fb      	ldr	r3, [r7, #12]
    ac60:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ac64:	b253      	sxtb	r3, r2
    ac66:	4618      	mov	r0, r3
    ac68:	f7ff fee0 	bl	aa2c <_Z12ax12ChecksumaPi>
    ac6c:	4603      	mov	r3, r0
    ac6e:	6023      	str	r3, [r4, #0]
    return 9;
    ac70:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ac74:	4618      	mov	r0, r3
    ac76:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ac7a:	46bd      	mov	sp, r7
    ac7c:	bd90      	pop	{r4, r7, pc}
    ac7e:	46c0      	nop			(mov r8, r8)

0000ac80 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>:
    retour[6] = (uint8_t)(angleLimite);
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleUpperLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    ac80:	b590      	push	{r4, r7, lr}
    ac82:	b085      	sub	sp, #20
    ac84:	af00      	add	r7, sp, #0
    ac86:	60f8      	str	r0, [r7, #12]
    ac88:	460b      	mov	r3, r1
    ac8a:	607a      	str	r2, [r7, #4]
    ac8c:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    ac8e:	68f8      	ldr	r0, [r7, #12]
    ac90:	6879      	ldr	r1, [r7, #4]
    ac92:	f04f 0201 	mov.w	r2, #1	; 0x1
    ac96:	f7ff fef7 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CCW_ANGLE_LIMIT_L;
    ac9a:	68fb      	ldr	r3, [r7, #12]
    ac9c:	f103 0214 	add.w	r2, r3, #20	; 0x14
    aca0:	f04f 0308 	mov.w	r3, #8	; 0x8
    aca4:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    aca6:	68fb      	ldr	r3, [r7, #12]
    aca8:	f103 0218 	add.w	r2, r3, #24	; 0x18
    acac:	897b      	ldrh	r3, [r7, #10]
    acae:	b2db      	uxtb	r3, r3
    acb0:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    acb2:	68fb      	ldr	r3, [r7, #12]
    acb4:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    acb8:	897b      	ldrh	r3, [r7, #10]
    acba:	ea4f 2323 	mov.w	r3, r3, asr #8
    acbe:	b2db      	uxtb	r3, r3
    acc0:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    acc2:	68fb      	ldr	r3, [r7, #12]
    acc4:	f103 0420 	add.w	r4, r3, #32	; 0x20
    acc8:	68fb      	ldr	r3, [r7, #12]
    acca:	f103 030c 	add.w	r3, r3, #12	; 0xc
    acce:	681b      	ldr	r3, [r3, #0]
    acd0:	b2da      	uxtb	r2, r3
    acd2:	68fb      	ldr	r3, [r7, #12]
    acd4:	f103 0108 	add.w	r1, r3, #8	; 0x8
    acd8:	b253      	sxtb	r3, r2
    acda:	4618      	mov	r0, r3
    acdc:	f7ff fea6 	bl	aa2c <_Z12ax12ChecksumaPi>
    ace0:	4603      	mov	r3, r0
    ace2:	6023      	str	r3, [r4, #0]
    return 9;
    ace4:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ace8:	4618      	mov	r0, r3
    acea:	f107 0714 	add.w	r7, r7, #20	; 0x14
    acee:	46bd      	mov	sp, r7
    acf0:	bd90      	pop	{r4, r7, pc}
    acf2:	46c0      	nop			(mov r8, r8)

0000acf4 <_ZN4AX1229getAngleLowerLimitInstructionEPiti>:
    retour[6] = (uint8_t)(vitesse);
    retour[7] = (uint8_t)(vitesse>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getAngleLowerLimitInstruction(int* retour, uint16_t angleLimite, int servo)
    acf4:	b590      	push	{r4, r7, lr}
    acf6:	b085      	sub	sp, #20
    acf8:	af00      	add	r7, sp, #0
    acfa:	60f8      	str	r0, [r7, #12]
    acfc:	460b      	mov	r3, r1
    acfe:	607a      	str	r2, [r7, #4]
    ad00:	817b      	strh	r3, [r7, #10]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for low/high angle)
    ad02:	68f8      	ldr	r0, [r7, #12]
    ad04:	6879      	ldr	r1, [r7, #4]
    ad06:	f04f 0201 	mov.w	r2, #1	; 0x1
    ad0a:	f7ff febd 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_CW_ANGLE_LIMIT_L;
    ad0e:	68fb      	ldr	r3, [r7, #12]
    ad10:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ad14:	f04f 0306 	mov.w	r3, #6	; 0x6
    ad18:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(angleLimite);
    ad1a:	68fb      	ldr	r3, [r7, #12]
    ad1c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ad20:	897b      	ldrh	r3, [r7, #10]
    ad22:	b2db      	uxtb	r3, r3
    ad24:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(angleLimite>>8); // high bits
    ad26:	68fb      	ldr	r3, [r7, #12]
    ad28:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ad2c:	897b      	ldrh	r3, [r7, #10]
    ad2e:	ea4f 2323 	mov.w	r3, r3, asr #8
    ad32:	b2db      	uxtb	r3, r3
    ad34:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ad36:	68fb      	ldr	r3, [r7, #12]
    ad38:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ad3c:	68fb      	ldr	r3, [r7, #12]
    ad3e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ad42:	681b      	ldr	r3, [r3, #0]
    ad44:	b2da      	uxtb	r2, r3
    ad46:	68fb      	ldr	r3, [r7, #12]
    ad48:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ad4c:	b253      	sxtb	r3, r2
    ad4e:	4618      	mov	r0, r3
    ad50:	f7ff fe6c 	bl	aa2c <_Z12ax12ChecksumaPi>
    ad54:	4603      	mov	r3, r0
    ad56:	6023      	str	r3, [r4, #0]
    return 9;
    ad58:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ad5c:	4618      	mov	r0, r3
    ad5e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ad62:	46bd      	mov	sp, r7
    ad64:	bd90      	pop	{r4, r7, pc}
    ad66:	46c0      	nop			(mov r8, r8)

0000ad68 <_ZN4AX1223getMoveSpeedInstructionEPith>:
    retour[6] = (uint8_t)(position);
    retour[7] = (uint8_t)(position>>8);
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    return 9;
}
int AX12::getMoveSpeedInstruction(int* retour, uint16_t vitesse, uint8_t servo)
    ad68:	b590      	push	{r4, r7, lr}
    ad6a:	b083      	sub	sp, #12
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	6078      	str	r0, [r7, #4]
    ad70:	460b      	mov	r3, r1
    ad72:	807b      	strh	r3, [r7, #2]
    ad74:	4613      	mov	r3, r2
    ad76:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high speed)
    ad78:	787b      	ldrb	r3, [r7, #1]
    ad7a:	6878      	ldr	r0, [r7, #4]
    ad7c:	4619      	mov	r1, r3
    ad7e:	f04f 0201 	mov.w	r2, #1	; 0x1
    ad82:	f7ff fe81 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_MOVING_SPEED_L;
    ad86:	687b      	ldr	r3, [r7, #4]
    ad88:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ad8c:	f04f 0320 	mov.w	r3, #32	; 0x20
    ad90:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(vitesse);
    ad92:	687b      	ldr	r3, [r7, #4]
    ad94:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ad98:	887b      	ldrh	r3, [r7, #2]
    ad9a:	b2db      	uxtb	r3, r3
    ad9c:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(vitesse>>8);
    ad9e:	687b      	ldr	r3, [r7, #4]
    ada0:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ada4:	887b      	ldrh	r3, [r7, #2]
    ada6:	ea4f 2323 	mov.w	r3, r3, asr #8
    adaa:	b2db      	uxtb	r3, r3
    adac:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    adae:	687b      	ldr	r3, [r7, #4]
    adb0:	f103 0420 	add.w	r4, r3, #32	; 0x20
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	f103 030c 	add.w	r3, r3, #12	; 0xc
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	b2da      	uxtb	r2, r3
    adbe:	687b      	ldr	r3, [r7, #4]
    adc0:	f103 0108 	add.w	r1, r3, #8	; 0x8
    adc4:	b253      	sxtb	r3, r2
    adc6:	4618      	mov	r0, r3
    adc8:	f7ff fe30 	bl	aa2c <_Z12ax12ChecksumaPi>
    adcc:	4603      	mov	r3, r0
    adce:	6023      	str	r3, [r4, #0]
    return 9;
    add0:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    add4:	4618      	mov	r0, r3
    add6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    adda:	46bd      	mov	sp, r7
    addc:	bd90      	pop	{r4, r7, pc}
    adde:	46c0      	nop			(mov r8, r8)

0000ade0 <_ZN4AX1220getMoveToInstructionEPith>:
    retour[8] = (uint8_t)(vitesse);
    retour[9] = (uint8_t)(vitesse>>8);
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    return 11;
}
int AX12::getMoveToInstruction(int* retour, uint16_t position, uint8_t servo)
    ade0:	b590      	push	{r4, r7, lr}
    ade2:	b083      	sub	sp, #12
    ade4:	af00      	add	r7, sp, #0
    ade6:	6078      	str	r0, [r7, #4]
    ade8:	460b      	mov	r3, r1
    adea:	807b      	strh	r3, [r7, #2]
    adec:	4613      	mov	r3, r2
    adee:	707b      	strb	r3, [r7, #1]
{
    createWriteHeader(retour, servo, 1); // first, we create a write header with 1 more params (for high position bits)
    adf0:	787b      	ldrb	r3, [r7, #1]
    adf2:	6878      	ldr	r0, [r7, #4]
    adf4:	4619      	mov	r1, r3
    adf6:	f04f 0201 	mov.w	r2, #1	; 0x1
    adfa:	f7ff fe45 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ae04:	f04f 031e 	mov.w	r3, #30	; 0x1e
    ae08:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    ae0a:	687b      	ldr	r3, [r7, #4]
    ae0c:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ae10:	887b      	ldrh	r3, [r7, #2]
    ae12:	b2db      	uxtb	r3, r3
    ae14:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    ae16:	687b      	ldr	r3, [r7, #4]
    ae18:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ae1c:	887b      	ldrh	r3, [r7, #2]
    ae1e:	ea4f 2323 	mov.w	r3, r3, asr #8
    ae22:	b2db      	uxtb	r3, r3
    ae24:	6013      	str	r3, [r2, #0]
    retour[8] = ax12Checksum(retour[3], &retour[2]);
    ae26:	687b      	ldr	r3, [r7, #4]
    ae28:	f103 0420 	add.w	r4, r3, #32	; 0x20
    ae2c:	687b      	ldr	r3, [r7, #4]
    ae2e:	f103 030c 	add.w	r3, r3, #12	; 0xc
    ae32:	681b      	ldr	r3, [r3, #0]
    ae34:	b2da      	uxtb	r2, r3
    ae36:	687b      	ldr	r3, [r7, #4]
    ae38:	f103 0108 	add.w	r1, r3, #8	; 0x8
    ae3c:	b253      	sxtb	r3, r2
    ae3e:	4618      	mov	r0, r3
    ae40:	f7ff fdf4 	bl	aa2c <_Z12ax12ChecksumaPi>
    ae44:	4603      	mov	r3, r0
    ae46:	6023      	str	r3, [r4, #0]
    return 9;
    ae48:	f04f 0309 	mov.w	r3, #9	; 0x9
}
    ae4c:	4618      	mov	r0, r3
    ae4e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ae52:	46bd      	mov	sp, r7
    ae54:	bd90      	pop	{r4, r7, pc}
    ae56:	46c0      	nop			(mov r8, r8)

0000ae58 <_ZN4AX1218getMoveInstructionEPitth>:
    for(int i = 0; i < length+1; i++) {
		checksum += parameters[i];
	}
	return (int)(int8_t)(~checksum); // ~ est l'opérateur NOT bit a bit
}
int AX12::getMoveInstruction(int* retour, uint16_t position, uint16_t vitesse, uint8_t servo)
    ae58:	b590      	push	{r4, r7, lr}
    ae5a:	b085      	sub	sp, #20
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	60f8      	str	r0, [r7, #12]
    ae60:	4618      	mov	r0, r3
    ae62:	460b      	mov	r3, r1
    ae64:	817b      	strh	r3, [r7, #10]
    ae66:	4613      	mov	r3, r2
    ae68:	813b      	strh	r3, [r7, #8]
    ae6a:	4603      	mov	r3, r0
    ae6c:	71fb      	strb	r3, [r7, #7]
{
    createWriteHeader(retour, servo, 3); // first, we create a write header with 3 more params (for low/height pos and low/height speed)
    ae6e:	79fb      	ldrb	r3, [r7, #7]
    ae70:	68f8      	ldr	r0, [r7, #12]
    ae72:	4619      	mov	r1, r3
    ae74:	f04f 0203 	mov.w	r2, #3	; 0x3
    ae78:	f7ff fe06 	bl	aa88 <_ZN4AX1217createWriteHeaderEPiii>
    retour[5] = AX12_GOAL_POSITION_L;
    ae7c:	68fb      	ldr	r3, [r7, #12]
    ae7e:	f103 0214 	add.w	r2, r3, #20	; 0x14
    ae82:	f04f 031e 	mov.w	r3, #30	; 0x1e
    ae86:	6013      	str	r3, [r2, #0]
    retour[6] = (uint8_t)(position);
    ae88:	68fb      	ldr	r3, [r7, #12]
    ae8a:	f103 0218 	add.w	r2, r3, #24	; 0x18
    ae8e:	897b      	ldrh	r3, [r7, #10]
    ae90:	b2db      	uxtb	r3, r3
    ae92:	6013      	str	r3, [r2, #0]
    retour[7] = (uint8_t)(position>>8);
    ae94:	68fb      	ldr	r3, [r7, #12]
    ae96:	f103 021c 	add.w	r2, r3, #28	; 0x1c
    ae9a:	897b      	ldrh	r3, [r7, #10]
    ae9c:	ea4f 2323 	mov.w	r3, r3, asr #8
    aea0:	b2db      	uxtb	r3, r3
    aea2:	6013      	str	r3, [r2, #0]
    retour[8] = (uint8_t)(vitesse);
    aea4:	68fb      	ldr	r3, [r7, #12]
    aea6:	f103 0220 	add.w	r2, r3, #32	; 0x20
    aeaa:	893b      	ldrh	r3, [r7, #8]
    aeac:	b2db      	uxtb	r3, r3
    aeae:	6013      	str	r3, [r2, #0]
    retour[9] = (uint8_t)(vitesse>>8);
    aeb0:	68fb      	ldr	r3, [r7, #12]
    aeb2:	f103 0224 	add.w	r2, r3, #36	; 0x24
    aeb6:	893b      	ldrh	r3, [r7, #8]
    aeb8:	ea4f 2323 	mov.w	r3, r3, asr #8
    aebc:	b2db      	uxtb	r3, r3
    aebe:	6013      	str	r3, [r2, #0]
    retour[10] = ax12Checksum(retour[3], &retour[2]);
    aec0:	68fb      	ldr	r3, [r7, #12]
    aec2:	f103 0428 	add.w	r4, r3, #40	; 0x28
    aec6:	68fb      	ldr	r3, [r7, #12]
    aec8:	f103 030c 	add.w	r3, r3, #12	; 0xc
    aecc:	681b      	ldr	r3, [r3, #0]
    aece:	b2da      	uxtb	r2, r3
    aed0:	68fb      	ldr	r3, [r7, #12]
    aed2:	f103 0108 	add.w	r1, r3, #8	; 0x8
    aed6:	b253      	sxtb	r3, r2
    aed8:	4618      	mov	r0, r3
    aeda:	f7ff fda7 	bl	aa2c <_Z12ax12ChecksumaPi>
    aede:	4603      	mov	r3, r0
    aee0:	6023      	str	r3, [r4, #0]
    return 11;
    aee2:	f04f 030b 	mov.w	r3, #11	; 0xb
}
    aee6:	4618      	mov	r0, r3
    aee8:	f107 0714 	add.w	r7, r7, #20	; 0x14
    aeec:	46bd      	mov	sp, r7
    aeee:	bd90      	pop	{r4, r7, pc}

0000aef0 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv>:
            break;
    }
}

// renvoient 0
Vitesse CommandCalibrerCapteurCouleur::getLinearSpeed()
    aef0:	b480      	push	{r7}
    aef2:	b083      	sub	sp, #12
    aef4:	af00      	add	r7, sp, #0
    aef6:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    aef8:	4b03      	ldr	r3, [pc, #12]	(af08 <_ZN29CommandCalibrerCapteurCouleur14getLinearSpeedEv+0x18>)
}
    aefa:	4618      	mov	r0, r3
    aefc:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af00:	46bd      	mov	sp, r7
    af02:	bc80      	pop	{r7}
    af04:	4770      	bx	lr
    af06:	46c0      	nop			(mov r8, r8)
    af08:	00000000 	.word	0x00000000

0000af0c <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv>:

Angle CommandCalibrerCapteurCouleur::getAngularSpeed()
    af0c:	b480      	push	{r7}
    af0e:	b083      	sub	sp, #12
    af10:	af00      	add	r7, sp, #0
    af12:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    af14:	4b03      	ldr	r3, [pc, #12]	(af24 <_ZN29CommandCalibrerCapteurCouleur15getAngularSpeedEv+0x18>)
}
    af16:	4618      	mov	r0, r3
    af18:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af1c:	46bd      	mov	sp, r7
    af1e:	bc80      	pop	{r7}
    af20:	4770      	bx	lr
    af22:	46c0      	nop			(mov r8, r8)
    af24:	00000000 	.word	0x00000000

0000af28 <_ZNK29CommandCalibrerCapteurCouleur4finiEv>:

// renvoit si le capteur a fini sa calibration
// le résultat est lisible dans getTicksMoyens()
bool CommandCalibrerCapteurCouleur::fini() const
    af28:	b480      	push	{r7}
    af2a:	b083      	sub	sp, #12
    af2c:	af00      	add	r7, sp, #0
    af2e:	6078      	str	r0, [r7, #4]
{
    return (state > 4);
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	689b      	ldr	r3, [r3, #8]
    af34:	2b04      	cmp	r3, #4
    af36:	bfd4      	ite	le
    af38:	2300      	movle	r3, #0
    af3a:	2301      	movgt	r3, #1
    af3c:	b2db      	uxtb	r3, r3
}
    af3e:	4618      	mov	r0, r3
    af40:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af44:	46bd      	mov	sp, r7
    af46:	bc80      	pop	{r7}
    af48:	4770      	bx	lr
    af4a:	46c0      	nop			(mov r8, r8)

0000af4c <_ZNK29CommandCalibrerCapteurCouleur14getTicksMoyensEv>:

// une fois fini, renvoit le seuil calculé
uint16_t CommandCalibrerCapteurCouleur::getTicksMoyens() const
    af4c:	b480      	push	{r7}
    af4e:	b083      	sub	sp, #12
    af50:	af00      	add	r7, sp, #0
    af52:	6078      	str	r0, [r7, #4]
{
    return resultat;
    af54:	687b      	ldr	r3, [r7, #4]
    af56:	899b      	ldrh	r3, [r3, #12]
}
    af58:	4618      	mov	r0, r3
    af5a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af5e:	46bd      	mov	sp, r7
    af60:	bc80      	pop	{r7}
    af62:	4770      	bx	lr

0000af64 <_ZN19CommandCheckCouleur14getLinearSpeedEv>:
            state++;
    }
}

// renvoient 0
Vitesse CommandCheckCouleur::getLinearSpeed()
    af64:	b480      	push	{r7}
    af66:	b083      	sub	sp, #12
    af68:	af00      	add	r7, sp, #0
    af6a:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    af6c:	4b03      	ldr	r3, [pc, #12]	(af7c <_ZN19CommandCheckCouleur14getLinearSpeedEv+0x18>)
}
    af6e:	4618      	mov	r0, r3
    af70:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af74:	46bd      	mov	sp, r7
    af76:	bc80      	pop	{r7}
    af78:	4770      	bx	lr
    af7a:	46c0      	nop			(mov r8, r8)
    af7c:	00000000 	.word	0x00000000

0000af80 <_ZN19CommandCheckCouleur15getAngularSpeedEv>:

Angle CommandCheckCouleur::getAngularSpeed()
    af80:	b480      	push	{r7}
    af82:	b083      	sub	sp, #12
    af84:	af00      	add	r7, sp, #0
    af86:	6078      	str	r0, [r7, #4]
{
    return 0.0f;
    af88:	4b03      	ldr	r3, [pc, #12]	(af98 <_ZN19CommandCheckCouleur15getAngularSpeedEv+0x18>)
}
    af8a:	4618      	mov	r0, r3
    af8c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    af90:	46bd      	mov	sp, r7
    af92:	bc80      	pop	{r7}
    af94:	4770      	bx	lr
    af96:	46c0      	nop			(mov r8, r8)
    af98:	00000000 	.word	0x00000000

0000af9c <_ZNK19CommandCheckCouleur4finiEv>:

// renvoit si le capteur a fini de check la couleur
// le résultat est disponible dans les fonctions bleue() et rouge()
bool CommandCheckCouleur::fini() const
    af9c:	b480      	push	{r7}
    af9e:	b083      	sub	sp, #12
    afa0:	af00      	add	r7, sp, #0
    afa2:	6078      	str	r0, [r7, #4]
{
    return (state >= 4);
    afa4:	687b      	ldr	r3, [r7, #4]
    afa6:	695b      	ldr	r3, [r3, #20]
    afa8:	2b03      	cmp	r3, #3
    afaa:	bfd4      	ite	le
    afac:	2300      	movle	r3, #0
    afae:	2301      	movgt	r3, #1
    afb0:	b2db      	uxtb	r3, r3
}
    afb2:	4618      	mov	r0, r3
    afb4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    afb8:	46bd      	mov	sp, r7
    afba:	bc80      	pop	{r7}
    afbc:	4770      	bx	lr
    afbe:	46c0      	nop			(mov r8, r8)

0000afc0 <_ZNK19CommandCheckCouleur5bleueEv>:

// une fois fini, renvoit la couleur
// les 2 peuvent renvoyer true si on est pas sur de la couleur
bool CommandCheckCouleur::bleue() const
    afc0:	b590      	push	{r4, r7, lr}
    afc2:	b083      	sub	sp, #12
    afc4:	af00      	add	r7, sp, #0
    afc6:	6078      	str	r0, [r7, #4]
{
    return (float)bleuMesure > 1.15f*(float)seuilMoyenne;
    afc8:	687b      	ldr	r3, [r7, #4]
    afca:	899b      	ldrh	r3, [r3, #12]
    afcc:	4618      	mov	r0, r3
    afce:	f00d fdff 	bl	18bd0 <__aeabi_ui2f>
    afd2:	4604      	mov	r4, r0
    afd4:	687b      	ldr	r3, [r7, #4]
    afd6:	889b      	ldrh	r3, [r3, #4]
    afd8:	4618      	mov	r0, r3
    afda:	f00d fdf9 	bl	18bd0 <__aeabi_ui2f>
    afde:	4603      	mov	r3, r0
    afe0:	4618      	mov	r0, r3
    afe2:	490c      	ldr	r1, [pc, #48]	(b014 <_ZNK19CommandCheckCouleur5bleueEv+0x54>)
    afe4:	f00d fe4c 	bl	18c80 <__aeabi_fmul>
    afe8:	4603      	mov	r3, r0
    afea:	461a      	mov	r2, r3
    afec:	f04f 0300 	mov.w	r3, #0	; 0x0
    aff0:	70fb      	strb	r3, [r7, #3]
    aff2:	4620      	mov	r0, r4
    aff4:	4611      	mov	r1, r2
    aff6:	f00d fffd 	bl	18ff4 <__aeabi_fcmpgt>
    affa:	4603      	mov	r3, r0
    affc:	2b00      	cmp	r3, #0
    affe:	d002      	beq.n	b006 <_ZNK19CommandCheckCouleur5bleueEv+0x46>
    b000:	f04f 0301 	mov.w	r3, #1	; 0x1
    b004:	70fb      	strb	r3, [r7, #3]
    b006:	78fb      	ldrb	r3, [r7, #3]
}
    b008:	4618      	mov	r0, r3
    b00a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b00e:	46bd      	mov	sp, r7
    b010:	bd90      	pop	{r4, r7, pc}
    b012:	46c0      	nop			(mov r8, r8)
    b014:	3f933333 	.word	0x3f933333

0000b018 <_ZNK19CommandCheckCouleur5rougeEv>:

bool CommandCheckCouleur::rouge() const
    b018:	b590      	push	{r4, r7, lr}
    b01a:	b083      	sub	sp, #12
    b01c:	af00      	add	r7, sp, #0
    b01e:	6078      	str	r0, [r7, #4]
{
    return (float)rougeMesure > 1.15f*(float)seuilMoyenne;
    b020:	687b      	ldr	r3, [r7, #4]
    b022:	89db      	ldrh	r3, [r3, #14]
    b024:	4618      	mov	r0, r3
    b026:	f00d fdd3 	bl	18bd0 <__aeabi_ui2f>
    b02a:	4604      	mov	r4, r0
    b02c:	687b      	ldr	r3, [r7, #4]
    b02e:	889b      	ldrh	r3, [r3, #4]
    b030:	4618      	mov	r0, r3
    b032:	f00d fdcd 	bl	18bd0 <__aeabi_ui2f>
    b036:	4603      	mov	r3, r0
    b038:	4618      	mov	r0, r3
    b03a:	490c      	ldr	r1, [pc, #48]	(b06c <_ZNK19CommandCheckCouleur5rougeEv+0x54>)
    b03c:	f00d fe20 	bl	18c80 <__aeabi_fmul>
    b040:	4603      	mov	r3, r0
    b042:	461a      	mov	r2, r3
    b044:	f04f 0300 	mov.w	r3, #0	; 0x0
    b048:	70fb      	strb	r3, [r7, #3]
    b04a:	4620      	mov	r0, r4
    b04c:	4611      	mov	r1, r2
    b04e:	f00d ffd1 	bl	18ff4 <__aeabi_fcmpgt>
    b052:	4603      	mov	r3, r0
    b054:	2b00      	cmp	r3, #0
    b056:	d002      	beq.n	b05e <_ZNK19CommandCheckCouleur5rougeEv+0x46>
    b058:	f04f 0301 	mov.w	r3, #1	; 0x1
    b05c:	70fb      	strb	r3, [r7, #3]
    b05e:	78fb      	ldrb	r3, [r7, #3]
}
    b060:	4618      	mov	r0, r3
    b062:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b066:	46bd      	mov	sp, r7
    b068:	bd90      	pop	{r4, r7, pc}
    b06a:	46c0      	nop			(mov r8, r8)
    b06c:	3f933333 	.word	0x3f933333

0000b070 <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b070:	b580      	push	{r7, lr}
    b072:	b082      	sub	sp, #8
    b074:	af00      	add	r7, sp, #0
    b076:	6078      	str	r0, [r7, #4]
    b078:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b07a:	687b      	ldr	r3, [r7, #4]
    b07c:	4618      	mov	r0, r3
    b07e:	f7fc fc87 	bl	7990 <_ZN7CommandC2Ev>
    b082:	687a      	ldr	r2, [r7, #4]
    b084:	4b09      	ldr	r3, [pc, #36]	(b0ac <_ZN29CommandCalibrerCapteurCouleurC1EP14CapteurCouleur+0x3c>)
    b086:	6013      	str	r3, [r2, #0]
    b088:	687a      	ldr	r2, [r7, #4]
    b08a:	683b      	ldr	r3, [r7, #0]
    b08c:	6053      	str	r3, [r2, #4]
    b08e:	687a      	ldr	r2, [r7, #4]
    b090:	f04f 0300 	mov.w	r3, #0	; 0x0
    b094:	6093      	str	r3, [r2, #8]
    b096:	687a      	ldr	r2, [r7, #4]
    b098:	f04f 0300 	mov.w	r3, #0	; 0x0
    b09c:	8193      	strh	r3, [r2, #12]
{
}
    b09e:	687b      	ldr	r3, [r7, #4]
    b0a0:	4618      	mov	r0, r3
    b0a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b0a6:	46bd      	mov	sp, r7
    b0a8:	bd80      	pop	{r7, pc}
    b0aa:	46c0      	nop			(mov r8, r8)
    b0ac:	0001fb08 	.word	0x0001fb08

0000b0b0 <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur>:


// permet de calibrer le capteur couleur en calculant la valeur moyenne de chaque capteur
// nécessite 5 updates chaque 5 ms
// la première update peut se faire juste après la construction
CommandCalibrerCapteurCouleur::CommandCalibrerCapteurCouleur(CapteurCouleur* capteur)
    b0b0:	b580      	push	{r7, lr}
    b0b2:	b082      	sub	sp, #8
    b0b4:	af00      	add	r7, sp, #0
    b0b6:	6078      	str	r0, [r7, #4]
    b0b8:	6039      	str	r1, [r7, #0]
    : capteurCouleur(capteur), state(0), resultat(0)
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	4618      	mov	r0, r3
    b0be:	f7fc fc67 	bl	7990 <_ZN7CommandC2Ev>
    b0c2:	687a      	ldr	r2, [r7, #4]
    b0c4:	4b09      	ldr	r3, [pc, #36]	(b0ec <_ZN29CommandCalibrerCapteurCouleurC2EP14CapteurCouleur+0x3c>)
    b0c6:	6013      	str	r3, [r2, #0]
    b0c8:	687a      	ldr	r2, [r7, #4]
    b0ca:	683b      	ldr	r3, [r7, #0]
    b0cc:	6053      	str	r3, [r2, #4]
    b0ce:	687a      	ldr	r2, [r7, #4]
    b0d0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b0d4:	6093      	str	r3, [r2, #8]
    b0d6:	687a      	ldr	r2, [r7, #4]
    b0d8:	f04f 0300 	mov.w	r3, #0	; 0x0
    b0dc:	8193      	strh	r3, [r2, #12]
{
}
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	4618      	mov	r0, r3
    b0e2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b0e6:	46bd      	mov	sp, r7
    b0e8:	bd80      	pop	{r7, pc}
    b0ea:	46c0      	nop			(mov r8, r8)
    b0ec:	0001fb08 	.word	0x0001fb08

0000b0f0 <_ZN14CapteurCouleur12getTickValueEv>:
    TIM_SetCounter(m_TIMx, 0);
}

// Permet de connaitre le nombre de ticks depuis le dernier appel de cette fonction
// ou depuis le dernier appel de la selection du capteur
uint16_t CapteurCouleur::getTickValue()
    b0f0:	b580      	push	{r7, lr}
    b0f2:	b084      	sub	sp, #16
    b0f4:	af00      	add	r7, sp, #0
    b0f6:	6078      	str	r0, [r7, #4]
{
    // récupère le nombre de ticks depuis la dernière mise à 0
    uint16_t tick = TIM_GetCounter(m_TIMx);
    b0f8:	687b      	ldr	r3, [r7, #4]
    b0fa:	681b      	ldr	r3, [r3, #0]
    b0fc:	4618      	mov	r0, r3
    b0fe:	f7f9 f83f 	bl	4180 <TIM_GetCounter>
    b102:	4603      	mov	r3, r0
    b104:	81fb      	strh	r3, [r7, #14]

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b106:	687b      	ldr	r3, [r7, #4]
    b108:	681b      	ldr	r3, [r3, #0]
    b10a:	4618      	mov	r0, r3
    b10c:	f04f 0100 	mov.w	r1, #0	; 0x0
    b110:	f7f8 fefc 	bl	3f0c <TIM_SetCounter>

    return tick;
    b114:	89fb      	ldrh	r3, [r7, #14]
}
    b116:	4618      	mov	r0, r3
    b118:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b11c:	46bd      	mov	sp, r7
    b11e:	bd80      	pop	{r7, pc}

0000b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>:
            break;
    }
}

// selectionne le capteur
void CapteurCouleur::activerCapteur(PositionCapteurCouleur position)
    b120:	b580      	push	{r7, lr}
    b122:	b082      	sub	sp, #8
    b124:	af00      	add	r7, sp, #0
    b126:	6078      	str	r0, [r7, #4]
    b128:	460b      	mov	r3, r1
    b12a:	70fb      	strb	r3, [r7, #3]
{
    // selection du capteur
    switch (position)
    b12c:	78fb      	ldrb	r3, [r7, #3]
    b12e:	2b03      	cmp	r3, #3
    b130:	d85d      	bhi.n	b1ee <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
    b132:	a201      	add	r2, pc, #4	(adr r2, b138 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0x18>)
    b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b138:	0000b149 	.word	0x0000b149
    b13c:	0000b173 	.word	0x0000b173
    b140:	0000b19d 	.word	0x0000b19d
    b144:	0000b1c7 	.word	0x0000b1c7
    {
        case GAUCHE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b148:	687b      	ldr	r3, [r7, #4]
    b14a:	695a      	ldr	r2, [r3, #20]
    b14c:	687b      	ldr	r3, [r7, #4]
    b14e:	8b1b      	ldrh	r3, [r3, #24]
    b150:	4610      	mov	r0, r2
    b152:	4619      	mov	r1, r3
    b154:	f04f 0200 	mov.w	r2, #0	; 0x0
    b158:	f7f6 fc18 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	69da      	ldr	r2, [r3, #28]
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	8c1b      	ldrh	r3, [r3, #32]
    b164:	4610      	mov	r0, r2
    b166:	4619      	mov	r1, r3
    b168:	f04f 0201 	mov.w	r2, #1	; 0x1
    b16c:	f7f6 fc0e 	bl	198c <GPIO_WriteBit>
    b170:	e03d      	b.n	b1ee <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case GAUCHE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	695a      	ldr	r2, [r3, #20]
    b176:	687b      	ldr	r3, [r7, #4]
    b178:	8b1b      	ldrh	r3, [r3, #24]
    b17a:	4610      	mov	r0, r2
    b17c:	4619      	mov	r1, r3
    b17e:	f04f 0201 	mov.w	r2, #1	; 0x1
    b182:	f7f6 fc03 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_SET);
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	69da      	ldr	r2, [r3, #28]
    b18a:	687b      	ldr	r3, [r7, #4]
    b18c:	8c1b      	ldrh	r3, [r3, #32]
    b18e:	4610      	mov	r0, r2
    b190:	4619      	mov	r1, r3
    b192:	f04f 0201 	mov.w	r2, #1	; 0x1
    b196:	f7f6 fbf9 	bl	198c <GPIO_WriteBit>
    b19a:	e028      	b.n	b1ee <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_HAUT:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_RESET);
    b19c:	687b      	ldr	r3, [r7, #4]
    b19e:	695a      	ldr	r2, [r3, #20]
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	8b1b      	ldrh	r3, [r3, #24]
    b1a4:	4610      	mov	r0, r2
    b1a6:	4619      	mov	r1, r3
    b1a8:	f04f 0200 	mov.w	r2, #0	; 0x0
    b1ac:	f7f6 fbee 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b1b0:	687b      	ldr	r3, [r7, #4]
    b1b2:	69da      	ldr	r2, [r3, #28]
    b1b4:	687b      	ldr	r3, [r7, #4]
    b1b6:	8c1b      	ldrh	r3, [r3, #32]
    b1b8:	4610      	mov	r0, r2
    b1ba:	4619      	mov	r1, r3
    b1bc:	f04f 0200 	mov.w	r2, #0	; 0x0
    b1c0:	f7f6 fbe4 	bl	198c <GPIO_WriteBit>
    b1c4:	e013      	b.n	b1ee <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur+0xce>
            break;
        case DROITE_BAS:
            GPIO_WriteBit(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1, Bit_SET);
    b1c6:	687b      	ldr	r3, [r7, #4]
    b1c8:	695a      	ldr	r2, [r3, #20]
    b1ca:	687b      	ldr	r3, [r7, #4]
    b1cc:	8b1b      	ldrh	r3, [r3, #24]
    b1ce:	4610      	mov	r0, r2
    b1d0:	4619      	mov	r1, r3
    b1d2:	f04f 0201 	mov.w	r2, #1	; 0x1
    b1d6:	f7f6 fbd9 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2, Bit_RESET);
    b1da:	687b      	ldr	r3, [r7, #4]
    b1dc:	69da      	ldr	r2, [r3, #28]
    b1de:	687b      	ldr	r3, [r7, #4]
    b1e0:	8c1b      	ldrh	r3, [r3, #32]
    b1e2:	4610      	mov	r0, r2
    b1e4:	4619      	mov	r1, r3
    b1e6:	f04f 0200 	mov.w	r2, #0	; 0x0
    b1ea:	f7f6 fbcf 	bl	198c <GPIO_WriteBit>
            break;
    }

    // remet à 0
    TIM_SetCounter(m_TIMx, 0);
    b1ee:	687b      	ldr	r3, [r7, #4]
    b1f0:	681b      	ldr	r3, [r3, #0]
    b1f2:	4618      	mov	r0, r3
    b1f4:	f04f 0100 	mov.w	r1, #0	; 0x0
    b1f8:	f7f8 fe88 	bl	3f0c <TIM_SetCounter>
}
    b1fc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b200:	46bd      	mov	sp, r7
    b202:	bd80      	pop	{r7, pc}

0000b204 <_ZN29CommandCalibrerCapteurCouleur6updateEv>:
    : capteurCouleur(capteur), state(0), resultat(0)
{
}

// récupère la valeur d'un capteur et passe à un autre
void CommandCalibrerCapteurCouleur::update()
    b204:	b590      	push	{r4, r7, lr}
    b206:	b083      	sub	sp, #12
    b208:	af00      	add	r7, sp, #0
    b20a:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	689b      	ldr	r3, [r3, #8]
    b210:	2b04      	cmp	r3, #4
    b212:	f200 8082 	bhi.w	b31a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
    b216:	a201      	add	r2, pc, #4	(adr r2, b21c <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x18>)
    b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b21c:	0000b231 	.word	0x0000b231
    b220:	0000b24d 	.word	0x0000b24d
    b224:	0000b281 	.word	0x0000b281
    b228:	0000b2b5 	.word	0x0000b2b5
    b22c:	0000b2e9 	.word	0x0000b2e9
    {
        case 0:
            capteurCouleur->activerCapteur(GAUCHE_HAUT);
    b230:	687b      	ldr	r3, [r7, #4]
    b232:	685b      	ldr	r3, [r3, #4]
    b234:	4618      	mov	r0, r3
    b236:	f04f 0100 	mov.w	r1, #0	; 0x0
    b23a:	f7ff ff71 	bl	b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b23e:	687b      	ldr	r3, [r7, #4]
    b240:	689b      	ldr	r3, [r3, #8]
    b242:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b246:	687b      	ldr	r3, [r7, #4]
    b248:	609a      	str	r2, [r3, #8]
    b24a:	e066      	b.n	b31a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 1:
            resultat += capteurCouleur->getTickValue();
    b24c:	687b      	ldr	r3, [r7, #4]
    b24e:	899c      	ldrh	r4, [r3, #12]
    b250:	687b      	ldr	r3, [r7, #4]
    b252:	685b      	ldr	r3, [r3, #4]
    b254:	4618      	mov	r0, r3
    b256:	f7ff ff4b 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b25a:	4603      	mov	r3, r0
    b25c:	4423      	add	r3, r4
    b25e:	b29b      	uxth	r3, r3
    b260:	687a      	ldr	r2, [r7, #4]
    b262:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(GAUCHE_BAS);
    b264:	687b      	ldr	r3, [r7, #4]
    b266:	685b      	ldr	r3, [r3, #4]
    b268:	4618      	mov	r0, r3
    b26a:	f04f 0101 	mov.w	r1, #1	; 0x1
    b26e:	f7ff ff57 	bl	b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b272:	687b      	ldr	r3, [r7, #4]
    b274:	689b      	ldr	r3, [r3, #8]
    b276:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b27a:	687b      	ldr	r3, [r7, #4]
    b27c:	609a      	str	r2, [r3, #8]
    b27e:	e04c      	b.n	b31a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 2:
            resultat += capteurCouleur->getTickValue();
    b280:	687b      	ldr	r3, [r7, #4]
    b282:	899c      	ldrh	r4, [r3, #12]
    b284:	687b      	ldr	r3, [r7, #4]
    b286:	685b      	ldr	r3, [r3, #4]
    b288:	4618      	mov	r0, r3
    b28a:	f7ff ff31 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b28e:	4603      	mov	r3, r0
    b290:	4423      	add	r3, r4
    b292:	b29b      	uxth	r3, r3
    b294:	687a      	ldr	r2, [r7, #4]
    b296:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_HAUT);
    b298:	687b      	ldr	r3, [r7, #4]
    b29a:	685b      	ldr	r3, [r3, #4]
    b29c:	4618      	mov	r0, r3
    b29e:	f04f 0102 	mov.w	r1, #2	; 0x2
    b2a2:	f7ff ff3d 	bl	b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b2a6:	687b      	ldr	r3, [r7, #4]
    b2a8:	689b      	ldr	r3, [r3, #8]
    b2aa:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b2ae:	687b      	ldr	r3, [r7, #4]
    b2b0:	609a      	str	r2, [r3, #8]
    b2b2:	e032      	b.n	b31a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 3:
            resultat += capteurCouleur->getTickValue();
    b2b4:	687b      	ldr	r3, [r7, #4]
    b2b6:	899c      	ldrh	r4, [r3, #12]
    b2b8:	687b      	ldr	r3, [r7, #4]
    b2ba:	685b      	ldr	r3, [r3, #4]
    b2bc:	4618      	mov	r0, r3
    b2be:	f7ff ff17 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b2c2:	4603      	mov	r3, r0
    b2c4:	4423      	add	r3, r4
    b2c6:	b29b      	uxth	r3, r3
    b2c8:	687a      	ldr	r2, [r7, #4]
    b2ca:	8193      	strh	r3, [r2, #12]
            capteurCouleur->activerCapteur(DROITE_BAS);
    b2cc:	687b      	ldr	r3, [r7, #4]
    b2ce:	685b      	ldr	r3, [r3, #4]
    b2d0:	4618      	mov	r0, r3
    b2d2:	f04f 0103 	mov.w	r1, #3	; 0x3
    b2d6:	f7ff ff23 	bl	b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
            state++;
    b2da:	687b      	ldr	r3, [r7, #4]
    b2dc:	689b      	ldr	r3, [r3, #8]
    b2de:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b2e2:	687b      	ldr	r3, [r7, #4]
    b2e4:	609a      	str	r2, [r3, #8]
    b2e6:	e018      	b.n	b31a <_ZN29CommandCalibrerCapteurCouleur6updateEv+0x116>
            break;
        case 4:
            resultat += capteurCouleur->getTickValue();
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	899c      	ldrh	r4, [r3, #12]
    b2ec:	687b      	ldr	r3, [r7, #4]
    b2ee:	685b      	ldr	r3, [r3, #4]
    b2f0:	4618      	mov	r0, r3
    b2f2:	f7ff fefd 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b2f6:	4603      	mov	r3, r0
    b2f8:	4423      	add	r3, r4
    b2fa:	b29b      	uxth	r3, r3
    b2fc:	687a      	ldr	r2, [r7, #4]
    b2fe:	8193      	strh	r3, [r2, #12]
            resultat /= 4;
    b300:	687b      	ldr	r3, [r7, #4]
    b302:	899b      	ldrh	r3, [r3, #12]
    b304:	ea4f 0393 	mov.w	r3, r3, lsr #2
    b308:	b29b      	uxth	r3, r3
    b30a:	687a      	ldr	r2, [r7, #4]
    b30c:	8193      	strh	r3, [r2, #12]
            state++;
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	689b      	ldr	r3, [r3, #8]
    b312:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b316:	687b      	ldr	r3, [r7, #4]
    b318:	609a      	str	r2, [r3, #8]
            break;
    }
}
    b31a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b31e:	46bd      	mov	sp, r7
    b320:	bd90      	pop	{r4, r7, pc}
    b322:	46c0      	nop			(mov r8, r8)

0000b324 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur>:
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
}

// selectionne un filtre
void CapteurCouleur::selectionnerFiltre(FiltreCapteurCouleur filtre)
    b324:	b580      	push	{r7, lr}
    b326:	b082      	sub	sp, #8
    b328:	af00      	add	r7, sp, #0
    b32a:	6078      	str	r0, [r7, #4]
    b32c:	460b      	mov	r3, r1
    b32e:	70fb      	strb	r3, [r7, #3]
{
    switch (filtre)
    b330:	78fb      	ldrb	r3, [r7, #3]
    b332:	2b03      	cmp	r3, #3
    b334:	d85d      	bhi.n	b3f2 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
    b336:	a201      	add	r2, pc, #4	(adr r2, b33c <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0x18>)
    b338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b33c:	0000b34d 	.word	0x0000b34d
    b340:	0000b3cb 	.word	0x0000b3cb
    b344:	0000b377 	.word	0x0000b377
    b348:	0000b3a1 	.word	0x0000b3a1
    {
        case FILTRE_ROUGE:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b34c:	687b      	ldr	r3, [r7, #4]
    b34e:	6a5a      	ldr	r2, [r3, #36]
    b350:	687b      	ldr	r3, [r7, #4]
    b352:	8d1b      	ldrh	r3, [r3, #40]
    b354:	4610      	mov	r0, r2
    b356:	4619      	mov	r1, r3
    b358:	f04f 0200 	mov.w	r2, #0	; 0x0
    b35c:	f7f6 fb16 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b360:	687b      	ldr	r3, [r7, #4]
    b362:	6ada      	ldr	r2, [r3, #44]
    b364:	687b      	ldr	r3, [r7, #4]
    b366:	8e1b      	ldrh	r3, [r3, #48]
    b368:	4610      	mov	r0, r2
    b36a:	4619      	mov	r1, r3
    b36c:	f04f 0200 	mov.w	r2, #0	; 0x0
    b370:	f7f6 fb0c 	bl	198c <GPIO_WriteBit>
    b374:	e03d      	b.n	b3f2 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>

            break;
        case FILTRE_BLEU:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b376:	687b      	ldr	r3, [r7, #4]
    b378:	6a5a      	ldr	r2, [r3, #36]
    b37a:	687b      	ldr	r3, [r7, #4]
    b37c:	8d1b      	ldrh	r3, [r3, #40]
    b37e:	4610      	mov	r0, r2
    b380:	4619      	mov	r1, r3
    b382:	f04f 0201 	mov.w	r2, #1	; 0x1
    b386:	f7f6 fb01 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_RESET);
    b38a:	687b      	ldr	r3, [r7, #4]
    b38c:	6ada      	ldr	r2, [r3, #44]
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	8e1b      	ldrh	r3, [r3, #48]
    b392:	4610      	mov	r0, r2
    b394:	4619      	mov	r1, r3
    b396:	f04f 0200 	mov.w	r2, #0	; 0x0
    b39a:	f7f6 faf7 	bl	198c <GPIO_WriteBit>
    b39e:	e028      	b.n	b3f2 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_BLANC:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_RESET);
    b3a0:	687b      	ldr	r3, [r7, #4]
    b3a2:	6a5a      	ldr	r2, [r3, #36]
    b3a4:	687b      	ldr	r3, [r7, #4]
    b3a6:	8d1b      	ldrh	r3, [r3, #40]
    b3a8:	4610      	mov	r0, r2
    b3aa:	4619      	mov	r1, r3
    b3ac:	f04f 0200 	mov.w	r2, #0	; 0x0
    b3b0:	f7f6 faec 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b3b4:	687b      	ldr	r3, [r7, #4]
    b3b6:	6ada      	ldr	r2, [r3, #44]
    b3b8:	687b      	ldr	r3, [r7, #4]
    b3ba:	8e1b      	ldrh	r3, [r3, #48]
    b3bc:	4610      	mov	r0, r2
    b3be:	4619      	mov	r1, r3
    b3c0:	f04f 0201 	mov.w	r2, #1	; 0x1
    b3c4:	f7f6 fae2 	bl	198c <GPIO_WriteBit>
    b3c8:	e013      	b.n	b3f2 <_ZN14CapteurCouleur18selectionnerFiltreE20FiltreCapteurCouleur+0xce>
            break;
        case FILTRE_VERT:
            GPIO_WriteBit(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1, Bit_SET);
    b3ca:	687b      	ldr	r3, [r7, #4]
    b3cc:	6a5a      	ldr	r2, [r3, #36]
    b3ce:	687b      	ldr	r3, [r7, #4]
    b3d0:	8d1b      	ldrh	r3, [r3, #40]
    b3d2:	4610      	mov	r0, r2
    b3d4:	4619      	mov	r1, r3
    b3d6:	f04f 0201 	mov.w	r2, #1	; 0x1
    b3da:	f7f6 fad7 	bl	198c <GPIO_WriteBit>
            GPIO_WriteBit(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2, Bit_SET);
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	6ada      	ldr	r2, [r3, #44]
    b3e2:	687b      	ldr	r3, [r7, #4]
    b3e4:	8e1b      	ldrh	r3, [r3, #48]
    b3e6:	4610      	mov	r0, r2
    b3e8:	4619      	mov	r1, r3
    b3ea:	f04f 0201 	mov.w	r2, #1	; 0x1
    b3ee:	f7f6 facd 	bl	198c <GPIO_WriteBit>
            break;
    }
}
    b3f2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b3f6:	46bd      	mov	sp, r7
    b3f8:	bd80      	pop	{r7, pc}
    b3fa:	46c0      	nop			(mov r8, r8)

0000b3fc <_ZN14CapteurCouleur19allumerDiodesBleuesEb>:
void CapteurCouleur::allumerDiodesRouges(bool allumer)
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
}

void CapteurCouleur::allumerDiodesBleues(bool allumer)
    b3fc:	b580      	push	{r7, lr}
    b3fe:	b086      	sub	sp, #24
    b400:	af00      	add	r7, sp, #0
    b402:	6178      	str	r0, [r7, #20]
    b404:	460b      	mov	r3, r1
    b406:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues, allumer ? Bit_SET : Bit_RESET);
    b408:	697b      	ldr	r3, [r7, #20]
    b40a:	68db      	ldr	r3, [r3, #12]
    b40c:	607b      	str	r3, [r7, #4]
    b40e:	697b      	ldr	r3, [r7, #20]
    b410:	8a1b      	ldrh	r3, [r3, #16]
    b412:	60bb      	str	r3, [r7, #8]
    b414:	7cfb      	ldrb	r3, [r7, #19]
    b416:	2b00      	cmp	r3, #0
    b418:	d003      	beq.n	b422 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x26>
    b41a:	f04f 0301 	mov.w	r3, #1	; 0x1
    b41e:	60fb      	str	r3, [r7, #12]
    b420:	e002      	b.n	b428 <_ZN14CapteurCouleur19allumerDiodesBleuesEb+0x2c>
    b422:	f04f 0300 	mov.w	r3, #0	; 0x0
    b426:	60fb      	str	r3, [r7, #12]
    b428:	6878      	ldr	r0, [r7, #4]
    b42a:	68b9      	ldr	r1, [r7, #8]
    b42c:	68fa      	ldr	r2, [r7, #12]
    b42e:	f7f6 faad 	bl	198c <GPIO_WriteBit>
}
    b432:	f107 0718 	add.w	r7, r7, #24	; 0x18
    b436:	46bd      	mov	sp, r7
    b438:	bd80      	pop	{r7, pc}
    b43a:	46c0      	nop			(mov r8, r8)

0000b43c <_ZN14CapteurCouleur19allumerDiodesRougesEb>:
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
}

// allume/éteint les diodes
void CapteurCouleur::allumerDiodesRouges(bool allumer)
    b43c:	b580      	push	{r7, lr}
    b43e:	b086      	sub	sp, #24
    b440:	af00      	add	r7, sp, #0
    b442:	6178      	str	r0, [r7, #20]
    b444:	460b      	mov	r3, r1
    b446:	74fb      	strb	r3, [r7, #19]
{
    GPIO_WriteBit(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges, allumer ? Bit_SET : Bit_RESET);
    b448:	697b      	ldr	r3, [r7, #20]
    b44a:	685b      	ldr	r3, [r3, #4]
    b44c:	607b      	str	r3, [r7, #4]
    b44e:	697b      	ldr	r3, [r7, #20]
    b450:	891b      	ldrh	r3, [r3, #8]
    b452:	60bb      	str	r3, [r7, #8]
    b454:	7cfb      	ldrb	r3, [r7, #19]
    b456:	2b00      	cmp	r3, #0
    b458:	d003      	beq.n	b462 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x26>
    b45a:	f04f 0301 	mov.w	r3, #1	; 0x1
    b45e:	60fb      	str	r3, [r7, #12]
    b460:	e002      	b.n	b468 <_ZN14CapteurCouleur19allumerDiodesRougesEb+0x2c>
    b462:	f04f 0300 	mov.w	r3, #0	; 0x0
    b466:	60fb      	str	r3, [r7, #12]
    b468:	6878      	ldr	r0, [r7, #4]
    b46a:	68b9      	ldr	r1, [r7, #8]
    b46c:	68fa      	ldr	r2, [r7, #12]
    b46e:	f7f6 fa8d 	bl	198c <GPIO_WriteBit>
}
    b472:	f107 0718 	add.w	r7, r7, #24	; 0x18
    b476:	46bd      	mov	sp, r7
    b478:	bd80      	pop	{r7, pc}
    b47a:	46c0      	nop			(mov r8, r8)

0000b47c <_ZN19CommandCheckCouleur6updateEv>:
    capteur->activerCapteur(pos);
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
}

// check la couleur
void CommandCheckCouleur::update()
    b47c:	b580      	push	{r7, lr}
    b47e:	b082      	sub	sp, #8
    b480:	af00      	add	r7, sp, #0
    b482:	6078      	str	r0, [r7, #4]
{
    switch (state)
    b484:	687b      	ldr	r3, [r7, #4]
    b486:	695b      	ldr	r3, [r3, #20]
    b488:	2b03      	cmp	r3, #3
    b48a:	d875      	bhi.n	b578 <_ZN19CommandCheckCouleur6updateEv+0xfc>
    b48c:	a201      	add	r2, pc, #4	(adr r2, b494 <_ZN19CommandCheckCouleur6updateEv+0x18>)
    b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b492:	46c0      	nop			(mov r8, r8)
    b494:	0000b4a5 	.word	0x0000b4a5
    b498:	0000b4d3 	.word	0x0000b4d3
    b49c:	0000b513 	.word	0x0000b513
    b4a0:	0000b541 	.word	0x0000b541
    {
        // attente d'allumage de la diode bleu
        case 0:
            if (nbUpdatesRestantes >=0)
    b4a4:	687b      	ldr	r3, [r7, #4]
    b4a6:	691b      	ldr	r3, [r3, #16]
    b4a8:	2b00      	cmp	r3, #0
    b4aa:	db06      	blt.n	b4ba <_ZN19CommandCheckCouleur6updateEv+0x3e>
                nbUpdatesRestantes--;
    b4ac:	687b      	ldr	r3, [r7, #4]
    b4ae:	691b      	ldr	r3, [r3, #16]
    b4b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	611a      	str	r2, [r3, #16]
    b4b8:	e05e      	b.n	b578 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    b4ba:	687b      	ldr	r3, [r7, #4]
    b4bc:	695b      	ldr	r3, [r3, #20]
    b4be:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b4c2:	687b      	ldr	r3, [r7, #4]
    b4c4:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    b4c6:	687b      	ldr	r3, [r7, #4]
    b4c8:	689b      	ldr	r3, [r3, #8]
    b4ca:	4618      	mov	r0, r3
    b4cc:	f7ff fe10 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b4d0:	e052      	b.n	b578 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;

        // récupération de la valeur bleu
        case 1:
            bleuMesure = capteurCouleur->getTickValue();
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	689b      	ldr	r3, [r3, #8]
    b4d6:	4618      	mov	r0, r3
    b4d8:	f7ff fe0a 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b4dc:	4603      	mov	r3, r0
    b4de:	687a      	ldr	r2, [r7, #4]
    b4e0:	8193      	strh	r3, [r2, #12]
            capteurCouleur->allumerDiodesBleues(false);
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	689b      	ldr	r3, [r3, #8]
    b4e6:	4618      	mov	r0, r3
    b4e8:	f04f 0100 	mov.w	r1, #0	; 0x0
    b4ec:	f7ff ff86 	bl	b3fc <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(true);
    b4f0:	687b      	ldr	r3, [r7, #4]
    b4f2:	689b      	ldr	r3, [r3, #8]
    b4f4:	4618      	mov	r0, r3
    b4f6:	f04f 0101 	mov.w	r1, #1	; 0x1
    b4fa:	f7ff ff9f 	bl	b43c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b4fe:	687a      	ldr	r2, [r7, #4]
    b500:	f04f 030a 	mov.w	r3, #10	; 0xa
    b504:	6113      	str	r3, [r2, #16]
            state++;
    b506:	687b      	ldr	r3, [r7, #4]
    b508:	695b      	ldr	r3, [r3, #20]
    b50a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b50e:	687b      	ldr	r3, [r7, #4]
    b510:	615a      	str	r2, [r3, #20]

        // attente d'allumage de la diode rouge
        case 2:
            if (nbUpdatesRestantes >=0)
    b512:	687b      	ldr	r3, [r7, #4]
    b514:	691b      	ldr	r3, [r3, #16]
    b516:	2b00      	cmp	r3, #0
    b518:	db06      	blt.n	b528 <_ZN19CommandCheckCouleur6updateEv+0xac>
                nbUpdatesRestantes--;
    b51a:	687b      	ldr	r3, [r7, #4]
    b51c:	691b      	ldr	r3, [r3, #16]
    b51e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    b522:	687b      	ldr	r3, [r7, #4]
    b524:	611a      	str	r2, [r3, #16]
    b526:	e027      	b.n	b578 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            else
            {
                state++;
    b528:	687b      	ldr	r3, [r7, #4]
    b52a:	695b      	ldr	r3, [r3, #20]
    b52c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b530:	687b      	ldr	r3, [r7, #4]
    b532:	615a      	str	r2, [r3, #20]
                capteurCouleur->getTickValue();
    b534:	687b      	ldr	r3, [r7, #4]
    b536:	689b      	ldr	r3, [r3, #8]
    b538:	4618      	mov	r0, r3
    b53a:	f7ff fdd9 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b53e:	e01b      	b.n	b578 <_ZN19CommandCheckCouleur6updateEv+0xfc>
            }
            break;
        // récupération de la valeur bleu
        case 3:
            rougeMesure = capteurCouleur->getTickValue();
    b540:	687b      	ldr	r3, [r7, #4]
    b542:	689b      	ldr	r3, [r3, #8]
    b544:	4618      	mov	r0, r3
    b546:	f7ff fdd3 	bl	b0f0 <_ZN14CapteurCouleur12getTickValueEv>
    b54a:	4603      	mov	r3, r0
    b54c:	687a      	ldr	r2, [r7, #4]
    b54e:	81d3      	strh	r3, [r2, #14]
            capteurCouleur->allumerDiodesBleues(false);
    b550:	687b      	ldr	r3, [r7, #4]
    b552:	689b      	ldr	r3, [r3, #8]
    b554:	4618      	mov	r0, r3
    b556:	f04f 0100 	mov.w	r1, #0	; 0x0
    b55a:	f7ff ff4f 	bl	b3fc <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
            capteurCouleur->allumerDiodesRouges(false);
    b55e:	687b      	ldr	r3, [r7, #4]
    b560:	689b      	ldr	r3, [r3, #8]
    b562:	4618      	mov	r0, r3
    b564:	f04f 0100 	mov.w	r1, #0	; 0x0
    b568:	f7ff ff68 	bl	b43c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
            state++;
    b56c:	687b      	ldr	r3, [r7, #4]
    b56e:	695b      	ldr	r3, [r3, #20]
    b570:	f103 0201 	add.w	r2, r3, #1	; 0x1
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	615a      	str	r2, [r3, #20]
    }
}
    b578:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b57c:	46bd      	mov	sp, r7
    b57e:	bd80      	pop	{r7, pc}

0000b580 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    b580:	b580      	push	{r7, lr}
    b582:	b084      	sub	sp, #16
    b584:	af00      	add	r7, sp, #0
    b586:	60f8      	str	r0, [r7, #12]
    b588:	60b9      	str	r1, [r7, #8]
    b58a:	4619      	mov	r1, r3
    b58c:	4613      	mov	r3, r2
    b58e:	71fb      	strb	r3, [r7, #7]
    b590:	460b      	mov	r3, r1
    b592:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    b594:	68fb      	ldr	r3, [r7, #12]
    b596:	4618      	mov	r0, r3
    b598:	f7fc f9fa 	bl	7990 <_ZN7CommandC2Ev>
    b59c:	68fa      	ldr	r2, [r7, #12]
    b59e:	4b18      	ldr	r3, [pc, #96]	(b600 <_ZN19CommandCheckCouleurC1EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    b5a0:	6013      	str	r3, [r2, #0]
    b5a2:	68fa      	ldr	r2, [r7, #12]
    b5a4:	88bb      	ldrh	r3, [r7, #4]
    b5a6:	8093      	strh	r3, [r2, #4]
    b5a8:	68fa      	ldr	r2, [r7, #12]
    b5aa:	68bb      	ldr	r3, [r7, #8]
    b5ac:	6093      	str	r3, [r2, #8]
    b5ae:	68fa      	ldr	r2, [r7, #12]
    b5b0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b5b4:	8193      	strh	r3, [r2, #12]
    b5b6:	68fa      	ldr	r2, [r7, #12]
    b5b8:	f04f 0300 	mov.w	r3, #0	; 0x0
    b5bc:	81d3      	strh	r3, [r2, #14]
    b5be:	68fa      	ldr	r2, [r7, #12]
    b5c0:	f04f 030a 	mov.w	r3, #10	; 0xa
    b5c4:	6113      	str	r3, [r2, #16]
    b5c6:	68fa      	ldr	r2, [r7, #12]
    b5c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    b5cc:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    b5ce:	68b8      	ldr	r0, [r7, #8]
    b5d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    b5d4:	f7ff ff12 	bl	b3fc <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    b5d8:	68b8      	ldr	r0, [r7, #8]
    b5da:	f04f 0100 	mov.w	r1, #0	; 0x0
    b5de:	f7ff ff2d 	bl	b43c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    b5e2:	79fb      	ldrb	r3, [r7, #7]
    b5e4:	68b8      	ldr	r0, [r7, #8]
    b5e6:	4619      	mov	r1, r3
    b5e8:	f7ff fd9a 	bl	b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b5ec:	68fa      	ldr	r2, [r7, #12]
    b5ee:	f04f 030a 	mov.w	r3, #10	; 0xa
    b5f2:	6113      	str	r3, [r2, #16]
}
    b5f4:	68fb      	ldr	r3, [r7, #12]
    b5f6:	4618      	mov	r0, r3
    b5f8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b5fc:	46bd      	mov	sp, r7
    b5fe:	bd80      	pop	{r7, pc}
    b600:	0001fae0 	.word	0x0001fae0

0000b604 <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt>:
    //////////////////////////////
    //    CommandCheckCouleur   //
    //////////////////////////////

// check la couleur d'un capteur
CommandCheckCouleur::CommandCheckCouleur(CapteurCouleur* capteur, PositionCapteurCouleur pos, uint16_t seuil)
    b604:	b580      	push	{r7, lr}
    b606:	b084      	sub	sp, #16
    b608:	af00      	add	r7, sp, #0
    b60a:	60f8      	str	r0, [r7, #12]
    b60c:	60b9      	str	r1, [r7, #8]
    b60e:	4619      	mov	r1, r3
    b610:	4613      	mov	r3, r2
    b612:	71fb      	strb	r3, [r7, #7]
    b614:	460b      	mov	r3, r1
    b616:	80bb      	strh	r3, [r7, #4]
    : seuilMoyenne(seuil), capteurCouleur(capteur), bleuMesure(0), rougeMesure(0)
    , nbUpdatesRestantes(nbUpdatePourAllumerLed), state(0)
    b618:	68fb      	ldr	r3, [r7, #12]
    b61a:	4618      	mov	r0, r3
    b61c:	f7fc f9b8 	bl	7990 <_ZN7CommandC2Ev>
    b620:	68fa      	ldr	r2, [r7, #12]
    b622:	4b18      	ldr	r3, [pc, #96]	(b684 <_ZN19CommandCheckCouleurC2EP14CapteurCouleur22PositionCapteurCouleurt+0x80>)
    b624:	6013      	str	r3, [r2, #0]
    b626:	68fa      	ldr	r2, [r7, #12]
    b628:	88bb      	ldrh	r3, [r7, #4]
    b62a:	8093      	strh	r3, [r2, #4]
    b62c:	68fa      	ldr	r2, [r7, #12]
    b62e:	68bb      	ldr	r3, [r7, #8]
    b630:	6093      	str	r3, [r2, #8]
    b632:	68fa      	ldr	r2, [r7, #12]
    b634:	f04f 0300 	mov.w	r3, #0	; 0x0
    b638:	8193      	strh	r3, [r2, #12]
    b63a:	68fa      	ldr	r2, [r7, #12]
    b63c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b640:	81d3      	strh	r3, [r2, #14]
    b642:	68fa      	ldr	r2, [r7, #12]
    b644:	f04f 030a 	mov.w	r3, #10	; 0xa
    b648:	6113      	str	r3, [r2, #16]
    b64a:	68fa      	ldr	r2, [r7, #12]
    b64c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b650:	6153      	str	r3, [r2, #20]
{
    capteur->allumerDiodesBleues(true);
    b652:	68b8      	ldr	r0, [r7, #8]
    b654:	f04f 0101 	mov.w	r1, #1	; 0x1
    b658:	f7ff fed0 	bl	b3fc <_ZN14CapteurCouleur19allumerDiodesBleuesEb>
    capteur->allumerDiodesRouges(false);
    b65c:	68b8      	ldr	r0, [r7, #8]
    b65e:	f04f 0100 	mov.w	r1, #0	; 0x0
    b662:	f7ff feeb 	bl	b43c <_ZN14CapteurCouleur19allumerDiodesRougesEb>
    capteur->activerCapteur(pos);
    b666:	79fb      	ldrb	r3, [r7, #7]
    b668:	68b8      	ldr	r0, [r7, #8]
    b66a:	4619      	mov	r1, r3
    b66c:	f7ff fd58 	bl	b120 <_ZN14CapteurCouleur14activerCapteurE22PositionCapteurCouleur>
    nbUpdatesRestantes = nbUpdatePourAllumerLed;
    b670:	68fa      	ldr	r2, [r7, #12]
    b672:	f04f 030a 	mov.w	r3, #10	; 0xa
    b676:	6113      	str	r3, [r2, #16]
}
    b678:	68fb      	ldr	r3, [r7, #12]
    b67a:	4618      	mov	r0, r3
    b67c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b680:	46bd      	mov	sp, r7
    b682:	bd80      	pop	{r7, pc}
    b684:	0001fae0 	.word	0x0001fae0

0000b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>:

#include "capteurCouleur.h"
#include "timerHandler.h"

// permet d'initialiser une pin
void initialiserPinCapteur(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x)
    b688:	b580      	push	{r7, lr}
    b68a:	b084      	sub	sp, #16
    b68c:	af00      	add	r7, sp, #0
    b68e:	6078      	str	r0, [r7, #4]
    b690:	460b      	mov	r3, r1
    b692:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    b694:	f04f 0310 	mov.w	r3, #16	; 0x10
    b698:	73fb      	strb	r3, [r7, #15]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b69a:	f04f 0303 	mov.w	r3, #3	; 0x3
    b69e:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_x;
    b6a0:	887b      	ldrh	r3, [r7, #2]
    b6a2:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOx, &GPIO_InitStructure);
    b6a4:	f107 030c 	add.w	r3, r7, #12	; 0xc
    b6a8:	6878      	ldr	r0, [r7, #4]
    b6aa:	4619      	mov	r1, r3
    b6ac:	f7f6 f800 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOx, GPIO_Pin_x, Bit_RESET);
    b6b0:	887b      	ldrh	r3, [r7, #2]
    b6b2:	6878      	ldr	r0, [r7, #4]
    b6b4:	4619      	mov	r1, r3
    b6b6:	f04f 0200 	mov.w	r2, #0	; 0x0
    b6ba:	f7f6 f967 	bl	198c <GPIO_WriteBit>
}
    b6be:	f107 0710 	add.w	r7, r7, #16	; 0x10
    b6c2:	46bd      	mov	sp, r7
    b6c4:	bd80      	pop	{r7, pc}
    b6c6:	46c0      	nop			(mov r8, r8)

0000b6c8 <_ZN14CapteurCouleurC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    b6c8:	b580      	push	{r7, lr}
    b6ca:	b088      	sub	sp, #32
    b6cc:	af00      	add	r7, sp, #0
    b6ce:	60f8      	str	r0, [r7, #12]
    b6d0:	60b9      	str	r1, [r7, #8]
    b6d2:	607a      	str	r2, [r7, #4]
    b6d4:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    b6d6:	68fa      	ldr	r2, [r7, #12]
    b6d8:	68bb      	ldr	r3, [r7, #8]
    b6da:	6013      	str	r3, [r2, #0]
    b6dc:	68fa      	ldr	r2, [r7, #12]
    b6de:	6abb      	ldr	r3, [r7, #40]
    b6e0:	6053      	str	r3, [r2, #4]
    b6e2:	68fa      	ldr	r2, [r7, #12]
    b6e4:	8dbb      	ldrh	r3, [r7, #44]
    b6e6:	8113      	strh	r3, [r2, #8]
    b6e8:	68fa      	ldr	r2, [r7, #12]
    b6ea:	6b3b      	ldr	r3, [r7, #48]
    b6ec:	60d3      	str	r3, [r2, #12]
    b6ee:	68fa      	ldr	r2, [r7, #12]
    b6f0:	8ebb      	ldrh	r3, [r7, #52]
    b6f2:	8213      	strh	r3, [r2, #16]
    b6f4:	68fa      	ldr	r2, [r7, #12]
    b6f6:	6bbb      	ldr	r3, [r7, #56]
    b6f8:	6153      	str	r3, [r2, #20]
    b6fa:	68fa      	ldr	r2, [r7, #12]
    b6fc:	8fbb      	ldrh	r3, [r7, #60]
    b6fe:	8313      	strh	r3, [r2, #24]
    b700:	68fa      	ldr	r2, [r7, #12]
    b702:	6c3b      	ldr	r3, [r7, #64]
    b704:	61d3      	str	r3, [r2, #28]
    b706:	68fa      	ldr	r2, [r7, #12]
    b708:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    b70c:	8413      	strh	r3, [r2, #32]
    b70e:	68fa      	ldr	r2, [r7, #12]
    b710:	6cbb      	ldr	r3, [r7, #72]
    b712:	6253      	str	r3, [r2, #36]
    b714:	68fa      	ldr	r2, [r7, #12]
    b716:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    b71a:	8513      	strh	r3, [r2, #40]
    b71c:	68fa      	ldr	r2, [r7, #12]
    b71e:	6d3b      	ldr	r3, [r7, #80]
    b720:	62d3      	str	r3, [r2, #44]
    b722:	68fa      	ldr	r2, [r7, #12]
    b724:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    b728:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    b72a:	f04f 0348 	mov.w	r3, #72	; 0x48
    b72e:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b730:	f04f 0303 	mov.w	r3, #3	; 0x3
    b734:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    b736:	887b      	ldrh	r3, [r7, #2]
    b738:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    b73a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    b73e:	6878      	ldr	r0, [r7, #4]
    b740:	4619      	mov	r1, r3
    b742:	f7f5 ffb5 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    b746:	68b8      	ldr	r0, [r7, #8]
    b748:	f001 fcce 	bl	d0e8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    b74c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b750:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    b752:	f04f 0300 	mov.w	r3, #0	; 0x0
    b756:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    b758:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b75c:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    b75e:	f04f 0300 	mov.w	r3, #0	; 0x0
    b762:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    b764:	f04f 0300 	mov.w	r3, #0	; 0x0
    b768:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    b76a:	f107 0312 	add.w	r3, r7, #18	; 0x12
    b76e:	68b8      	ldr	r0, [r7, #8]
    b770:	4619      	mov	r1, r3
    b772:	f7f7 f861 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    b776:	68b8      	ldr	r0, [r7, #8]
    b778:	f04f 0140 	mov.w	r1, #64	; 0x40
    b77c:	f04f 0200 	mov.w	r2, #0	; 0x0
    b780:	f04f 0300 	mov.w	r3, #0	; 0x0
    b784:	f7f7 fd42 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    b788:	68b8      	ldr	r0, [r7, #8]
    b78a:	f04f 0101 	mov.w	r1, #1	; 0x1
    b78e:	f7f7 fc4b 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    b792:	68b8      	ldr	r0, [r7, #8]
    b794:	f04f 0100 	mov.w	r1, #0	; 0x0
    b798:	f7f8 fbb8 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    b79c:	68fb      	ldr	r3, [r7, #12]
    b79e:	685a      	ldr	r2, [r3, #4]
    b7a0:	68fb      	ldr	r3, [r7, #12]
    b7a2:	891b      	ldrh	r3, [r3, #8]
    b7a4:	4610      	mov	r0, r2
    b7a6:	4619      	mov	r1, r3
    b7a8:	f7ff ff6e 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    b7ac:	68fb      	ldr	r3, [r7, #12]
    b7ae:	68da      	ldr	r2, [r3, #12]
    b7b0:	68fb      	ldr	r3, [r7, #12]
    b7b2:	8a1b      	ldrh	r3, [r3, #16]
    b7b4:	4610      	mov	r0, r2
    b7b6:	4619      	mov	r1, r3
    b7b8:	f7ff ff66 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    b7bc:	68fb      	ldr	r3, [r7, #12]
    b7be:	695a      	ldr	r2, [r3, #20]
    b7c0:	68fb      	ldr	r3, [r7, #12]
    b7c2:	8b1b      	ldrh	r3, [r3, #24]
    b7c4:	4610      	mov	r0, r2
    b7c6:	4619      	mov	r1, r3
    b7c8:	f7ff ff5e 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    b7cc:	68fb      	ldr	r3, [r7, #12]
    b7ce:	69da      	ldr	r2, [r3, #28]
    b7d0:	68fb      	ldr	r3, [r7, #12]
    b7d2:	8c1b      	ldrh	r3, [r3, #32]
    b7d4:	4610      	mov	r0, r2
    b7d6:	4619      	mov	r1, r3
    b7d8:	f7ff ff56 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    b7dc:	68fb      	ldr	r3, [r7, #12]
    b7de:	6a5a      	ldr	r2, [r3, #36]
    b7e0:	68fb      	ldr	r3, [r7, #12]
    b7e2:	8d1b      	ldrh	r3, [r3, #40]
    b7e4:	4610      	mov	r0, r2
    b7e6:	4619      	mov	r1, r3
    b7e8:	f7ff ff4e 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    b7ec:	68fb      	ldr	r3, [r7, #12]
    b7ee:	6ada      	ldr	r2, [r3, #44]
    b7f0:	68fb      	ldr	r3, [r7, #12]
    b7f2:	8e1b      	ldrh	r3, [r3, #48]
    b7f4:	4610      	mov	r0, r2
    b7f6:	4619      	mov	r1, r3
    b7f8:	f7ff ff46 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    b7fc:	68fb      	ldr	r3, [r7, #12]
    b7fe:	4618      	mov	r0, r3
    b800:	f107 0720 	add.w	r7, r7, #32	; 0x20
    b804:	46bd      	mov	sp, r7
    b806:	bd80      	pop	{r7, pc}

0000b808 <_ZN14CapteurCouleurC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_tS3_tS3_tS3_tS3_tS3_t>:
                               GPIO_TypeDef* GPIO_diodesRouges, uint16_t GPIO_Pin_diodesRouges,
                               GPIO_TypeDef* GPIO_diodesBleues, uint16_t GPIO_Pin_diodesBleues,
                               GPIO_TypeDef* GPIO_selectCapteur1, uint16_t GPIO_Pin_selectCapteur1,
                               GPIO_TypeDef* GPIO_selectCapteur2, uint16_t GPIO_Pin_selectCapteur2,
                               GPIO_TypeDef* GPIO_selectFiltre1, uint16_t GPIO_Pin_selectFiltre1,
                               GPIO_TypeDef* GPIO_selectFiltre2, uint16_t GPIO_Pin_selectFiltre2)
    b808:	b580      	push	{r7, lr}
    b80a:	b088      	sub	sp, #32
    b80c:	af00      	add	r7, sp, #0
    b80e:	60f8      	str	r0, [r7, #12]
    b810:	60b9      	str	r1, [r7, #8]
    b812:	607a      	str	r2, [r7, #4]
    b814:	807b      	strh	r3, [r7, #2]
    , m_GPIO_diodesRouges(GPIO_diodesRouges), m_GPIO_Pin_diodesRouges(GPIO_Pin_diodesRouges)
    , m_GPIO_diodesBleues(GPIO_diodesBleues), m_GPIO_Pin_diodesBleues(GPIO_Pin_diodesBleues)
    , m_GPIO_selectCapteur1(GPIO_selectCapteur1), m_GPIO_Pin_selectCapteur1(GPIO_Pin_selectCapteur1)
    , m_GPIO_selectCapteur2(GPIO_selectCapteur2), m_GPIO_Pin_selectCapteur2(GPIO_Pin_selectCapteur2)
    , m_GPIO_selectFiltre1(GPIO_selectFiltre1), m_GPIO_Pin_selectFiltre1(GPIO_Pin_selectFiltre1)
    , m_GPIO_selectFiltre2(GPIO_selectFiltre2), m_GPIO_Pin_selectFiltre2(GPIO_Pin_selectFiltre2)
    b816:	68fa      	ldr	r2, [r7, #12]
    b818:	68bb      	ldr	r3, [r7, #8]
    b81a:	6013      	str	r3, [r2, #0]
    b81c:	68fa      	ldr	r2, [r7, #12]
    b81e:	6abb      	ldr	r3, [r7, #40]
    b820:	6053      	str	r3, [r2, #4]
    b822:	68fa      	ldr	r2, [r7, #12]
    b824:	8dbb      	ldrh	r3, [r7, #44]
    b826:	8113      	strh	r3, [r2, #8]
    b828:	68fa      	ldr	r2, [r7, #12]
    b82a:	6b3b      	ldr	r3, [r7, #48]
    b82c:	60d3      	str	r3, [r2, #12]
    b82e:	68fa      	ldr	r2, [r7, #12]
    b830:	8ebb      	ldrh	r3, [r7, #52]
    b832:	8213      	strh	r3, [r2, #16]
    b834:	68fa      	ldr	r2, [r7, #12]
    b836:	6bbb      	ldr	r3, [r7, #56]
    b838:	6153      	str	r3, [r2, #20]
    b83a:	68fa      	ldr	r2, [r7, #12]
    b83c:	8fbb      	ldrh	r3, [r7, #60]
    b83e:	8313      	strh	r3, [r2, #24]
    b840:	68fa      	ldr	r2, [r7, #12]
    b842:	6c3b      	ldr	r3, [r7, #64]
    b844:	61d3      	str	r3, [r2, #28]
    b846:	68fa      	ldr	r2, [r7, #12]
    b848:	f8b7 3044 	ldrh.w	r3, [r7, #68]
    b84c:	8413      	strh	r3, [r2, #32]
    b84e:	68fa      	ldr	r2, [r7, #12]
    b850:	6cbb      	ldr	r3, [r7, #72]
    b852:	6253      	str	r3, [r2, #36]
    b854:	68fa      	ldr	r2, [r7, #12]
    b856:	f8b7 304c 	ldrh.w	r3, [r7, #76]
    b85a:	8513      	strh	r3, [r2, #40]
    b85c:	68fa      	ldr	r2, [r7, #12]
    b85e:	6d3b      	ldr	r3, [r7, #80]
    b860:	62d3      	str	r3, [r2, #44]
    b862:	68fa      	ldr	r2, [r7, #12]
    b864:	f8b7 3054 	ldrh.w	r3, [r7, #84]
    b868:	8613      	strh	r3, [r2, #48]
    GPIO_InitTypeDef GPIO_InitStructure;
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    b86a:	f04f 0348 	mov.w	r3, #72	; 0x48
    b86e:	77fb      	strb	r3, [r7, #31]
    #endif
    GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_50MHz;
    b870:	f04f 0303 	mov.w	r3, #3	; 0x3
    b874:	77bb      	strb	r3, [r7, #30]
    GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_timer;
    b876:	887b      	ldrh	r3, [r7, #2]
    b878:	83bb      	strh	r3, [r7, #28]
    GPIO_Init(GPIO_timer, &GPIO_InitStructure);
    b87a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    b87e:	6878      	ldr	r0, [r7, #4]
    b880:	4619      	mov	r1, r3
    b882:	f7f5 ff15 	bl	16b0 <GPIO_Init>

    // Active l'horloge du timer
    Timer::enableTimerClock(TIMx);
    b886:	68b8      	ldr	r0, [r7, #8]
    b888:	f001 fc2e 	bl	d0e8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>

    // initialisation du timer
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    b88c:	f04f 0300 	mov.w	r3, #0	; 0x0
    b890:	827b      	strh	r3, [r7, #18]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    b892:	f04f 0300 	mov.w	r3, #0	; 0x0
    b896:	82bb      	strh	r3, [r7, #20]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    b898:	f64f 73ff 	movw	r3, #65535	; 0xffff
    b89c:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    b89e:	f04f 0300 	mov.w	r3, #0	; 0x0
    b8a2:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    b8a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    b8a8:	76bb      	strb	r3, [r7, #26]
    TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
    b8aa:	f107 0312 	add.w	r3, r7, #18	; 0x12
    b8ae:	68b8      	ldr	r0, [r7, #8]
    b8b0:	4619      	mov	r1, r3
    b8b2:	f7f6 ffc1 	bl	2838 <TIM_TimeBaseInit>

    // utilise une horloge externe
    // le counter est incrementé à chaque monté du signal sur le channel 1
    TIM_TIxExternalClockConfig(TIMx, TIM_TIxExternalCLK1Source_TI1ED, TIM_ICPolarity_Rising, 0);
    b8b6:	68b8      	ldr	r0, [r7, #8]
    b8b8:	f04f 0140 	mov.w	r1, #64	; 0x40
    b8bc:	f04f 0200 	mov.w	r2, #0	; 0x0
    b8c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    b8c4:	f7f7 fca2 	bl	320c <TIM_TIxExternalClockConfig>

    // met le timer à disposition
    TIM_Cmd(TIMx, ENABLE);
    b8c8:	68b8      	ldr	r0, [r7, #8]
    b8ca:	f04f 0101 	mov.w	r1, #1	; 0x1
    b8ce:	f7f7 fbab 	bl	3028 <TIM_Cmd>

    // met le counter à 0
    TIM_SetCounter(TIMx, 0);
    b8d2:	68b8      	ldr	r0, [r7, #8]
    b8d4:	f04f 0100 	mov.w	r1, #0	; 0x0
    b8d8:	f7f8 fb18 	bl	3f0c <TIM_SetCounter>

    // initialisation des autres pins
    initialiserPinCapteur(m_GPIO_diodesRouges, m_GPIO_Pin_diodesRouges);
    b8dc:	68fb      	ldr	r3, [r7, #12]
    b8de:	685a      	ldr	r2, [r3, #4]
    b8e0:	68fb      	ldr	r3, [r7, #12]
    b8e2:	891b      	ldrh	r3, [r3, #8]
    b8e4:	4610      	mov	r0, r2
    b8e6:	4619      	mov	r1, r3
    b8e8:	f7ff fece 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_diodesBleues, m_GPIO_Pin_diodesBleues);
    b8ec:	68fb      	ldr	r3, [r7, #12]
    b8ee:	68da      	ldr	r2, [r3, #12]
    b8f0:	68fb      	ldr	r3, [r7, #12]
    b8f2:	8a1b      	ldrh	r3, [r3, #16]
    b8f4:	4610      	mov	r0, r2
    b8f6:	4619      	mov	r1, r3
    b8f8:	f7ff fec6 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur1, m_GPIO_Pin_selectCapteur1);
    b8fc:	68fb      	ldr	r3, [r7, #12]
    b8fe:	695a      	ldr	r2, [r3, #20]
    b900:	68fb      	ldr	r3, [r7, #12]
    b902:	8b1b      	ldrh	r3, [r3, #24]
    b904:	4610      	mov	r0, r2
    b906:	4619      	mov	r1, r3
    b908:	f7ff febe 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectCapteur2, m_GPIO_Pin_selectCapteur2);
    b90c:	68fb      	ldr	r3, [r7, #12]
    b90e:	69da      	ldr	r2, [r3, #28]
    b910:	68fb      	ldr	r3, [r7, #12]
    b912:	8c1b      	ldrh	r3, [r3, #32]
    b914:	4610      	mov	r0, r2
    b916:	4619      	mov	r1, r3
    b918:	f7ff feb6 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre1, m_GPIO_Pin_selectFiltre1);
    b91c:	68fb      	ldr	r3, [r7, #12]
    b91e:	6a5a      	ldr	r2, [r3, #36]
    b920:	68fb      	ldr	r3, [r7, #12]
    b922:	8d1b      	ldrh	r3, [r3, #40]
    b924:	4610      	mov	r0, r2
    b926:	4619      	mov	r1, r3
    b928:	f7ff feae 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
    initialiserPinCapteur(m_GPIO_selectFiltre2, m_GPIO_Pin_selectFiltre2);
    b92c:	68fb      	ldr	r3, [r7, #12]
    b92e:	6ada      	ldr	r2, [r3, #44]
    b930:	68fb      	ldr	r3, [r7, #12]
    b932:	8e1b      	ldrh	r3, [r3, #48]
    b934:	4610      	mov	r0, r2
    b936:	4619      	mov	r1, r3
    b938:	f7ff fea6 	bl	b688 <_Z21initialiserPinCapteurP12GPIO_TypeDeft>
}
    b93c:	68fb      	ldr	r3, [r7, #12]
    b93e:	4618      	mov	r0, r3
    b940:	f107 0720 	add.w	r7, r7, #32	; 0x20
    b944:	46bd      	mov	sp, r7
    b946:	bd80      	pop	{r7, pc}

0000b948 <_ZN8Capteurs15getNbrOfChannelEv>:
    if (!isConverted)
        convertirDonnees();
    return (output[direction] & 0xff) == 0xff;
}

uint8_t Capteurs::getNbrOfChannel(){
    b948:	b480      	push	{r7}
    b94a:	b083      	sub	sp, #12
    b94c:	af00      	add	r7, sp, #0
    b94e:	6078      	str	r0, [r7, #4]
    return NbrOfChannel;
    b950:	687b      	ldr	r3, [r7, #4]
    b952:	781b      	ldrb	r3, [r3, #0]
}
    b954:	4618      	mov	r0, r3
    b956:	f107 070c 	add.w	r7, r7, #12	; 0xc
    b95a:	46bd      	mov	sp, r7
    b95c:	bc80      	pop	{r7}
    b95e:	4770      	bx	lr

0000b960 <_ZN8Capteurs18conversionFinishedEv>:
{
    isConverted = false;
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
}

bool Capteurs::conversionFinished()
    b960:	b580      	push	{r7, lr}
    b962:	b082      	sub	sp, #8
    b964:	af00      	add	r7, sp, #0
    b966:	6078      	str	r0, [r7, #4]
{
    //return (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == SET);
    return DMA_GetFlagStatus(DMA1_FLAG_TC1);
    b968:	f04f 0002 	mov.w	r0, #2	; 0x2
    b96c:	f7f5 fc48 	bl	1200 <DMA_GetFlagStatus>
    b970:	4603      	mov	r3, r0
    b972:	2b00      	cmp	r3, #0
    b974:	bf0c      	ite	eq
    b976:	2300      	moveq	r3, #0
    b978:	2301      	movne	r3, #1
    b97a:	b2db      	uxtb	r3, r3
}
    b97c:	4618      	mov	r0, r3
    b97e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    b982:	46bd      	mov	sp, r7
    b984:	bd80      	pop	{r7, pc}
    b986:	46c0      	nop			(mov r8, r8)

0000b988 <_ZN8Capteurs16convertirDonneesEv>:

void Capteurs::convertirDonnees()
    b988:	b580      	push	{r7, lr}
    b98a:	b084      	sub	sp, #16
    b98c:	af00      	add	r7, sp, #0
    b98e:	6078      	str	r0, [r7, #4]
{
    isConverted = true;
    b990:	687b      	ldr	r3, [r7, #4]
    b992:	f04f 0201 	mov.w	r2, #1	; 0x1
    b996:	739a      	strb	r2, [r3, #14]
    while (!conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    b998:	6878      	ldr	r0, [r7, #4]
    b99a:	f7ff ffe1 	bl	b960 <_ZN8Capteurs18conversionFinishedEv>
    b99e:	4603      	mov	r3, r0
    b9a0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    b9a4:	b2db      	uxtb	r3, r3
    b9a6:	2b00      	cmp	r3, #0
    b9a8:	d1f6      	bne.n	b998 <_ZN8Capteurs16convertirDonneesEv+0x10>
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    b9aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    b9ae:	60fb      	str	r3, [r7, #12]
    b9b0:	e032      	b.n	ba18 <_ZN8Capteurs16convertirDonneesEv+0x90>
        output[i] <<= 1;
    b9b2:	687b      	ldr	r3, [r7, #4]
    b9b4:	689a      	ldr	r2, [r3, #8]
    b9b6:	68fb      	ldr	r3, [r7, #12]
    b9b8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b9bc:	eb02 0103 	add.w	r1, r2, r3
    b9c0:	687b      	ldr	r3, [r7, #4]
    b9c2:	689a      	ldr	r2, [r3, #8]
    b9c4:	68fb      	ldr	r3, [r7, #12]
    b9c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b9ca:	4413      	add	r3, r2
    b9cc:	681b      	ldr	r3, [r3, #0]
    b9ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
    b9d2:	600b      	str	r3, [r1, #0]
        output[i] |= (data[i] > threshold);
    b9d4:	687b      	ldr	r3, [r7, #4]
    b9d6:	689a      	ldr	r2, [r3, #8]
    b9d8:	68fb      	ldr	r3, [r7, #12]
    b9da:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b9de:	eb02 0103 	add.w	r1, r2, r3
    b9e2:	687b      	ldr	r3, [r7, #4]
    b9e4:	689a      	ldr	r2, [r3, #8]
    b9e6:	68fb      	ldr	r3, [r7, #12]
    b9e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    b9ec:	4413      	add	r3, r2
    b9ee:	6818      	ldr	r0, [r3, #0]
    b9f0:	687b      	ldr	r3, [r7, #4]
    b9f2:	685a      	ldr	r2, [r3, #4]
    b9f4:	68fb      	ldr	r3, [r7, #12]
    b9f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    b9fa:	4413      	add	r3, r2
    b9fc:	881a      	ldrh	r2, [r3, #0]
    b9fe:	687b      	ldr	r3, [r7, #4]
    ba00:	899b      	ldrh	r3, [r3, #12]
    ba02:	429a      	cmp	r2, r3
    ba04:	bf94      	ite	ls
    ba06:	2300      	movls	r3, #0
    ba08:	2301      	movhi	r3, #1
    ba0a:	ea40 0303 	orr.w	r3, r0, r3
    ba0e:	600b      	str	r3, [r1, #0]
     ** C'EST ICI QU'IL FAUT METTRE LE BREAKPOINT **
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    for(int i=0;i<NbrOfChannel;i++)  { // Ceci est un compteur binaire, qui ajoute un bit à droite chaque fois qu'un objet est detecté
    ba10:	68fb      	ldr	r3, [r7, #12]
    ba12:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ba16:	60fb      	str	r3, [r7, #12]
    ba18:	687b      	ldr	r3, [r7, #4]
    ba1a:	781b      	ldrb	r3, [r3, #0]
    ba1c:	461a      	mov	r2, r3
    ba1e:	68fb      	ldr	r3, [r7, #12]
    ba20:	429a      	cmp	r2, r3
    ba22:	dcc6      	bgt.n	b9b2 <_ZN8Capteurs16convertirDonneesEv+0x2a>
        output[i] <<= 1;
        output[i] |= (data[i] > threshold);
    }
}
    ba24:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ba28:	46bd      	mov	sp, r7
    ba2a:	bd80      	pop	{r7, pc}

0000ba2c <_ZN8Capteurs8getValueENS_9DirectionE>:

uint16_t Capteurs::getValue(Capteurs::Direction direction) // Retourne vrai si et seulement si le seuil du capteur a été dépassé pendant plus de 8 coups d'horloge car àxff = 8bits à 1
    ba2c:	b580      	push	{r7, lr}
    ba2e:	b082      	sub	sp, #8
    ba30:	af00      	add	r7, sp, #0
    ba32:	6078      	str	r0, [r7, #4]
    ba34:	460b      	mov	r3, r1
    ba36:	70fb      	strb	r3, [r7, #3]
{
    if (!isConverted)
    ba38:	687b      	ldr	r3, [r7, #4]
    ba3a:	7b9b      	ldrb	r3, [r3, #14]
    ba3c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ba40:	b2db      	uxtb	r3, r3
    ba42:	2b00      	cmp	r3, #0
    ba44:	d002      	beq.n	ba4c <_ZN8Capteurs8getValueENS_9DirectionE+0x20>
        convertirDonnees();
    ba46:	6878      	ldr	r0, [r7, #4]
    ba48:	f7ff ff9e 	bl	b988 <_ZN8Capteurs16convertirDonneesEv>
    return (output[direction] & 0xff) == 0xff;
    ba4c:	687b      	ldr	r3, [r7, #4]
    ba4e:	689a      	ldr	r2, [r3, #8]
    ba50:	78fb      	ldrb	r3, [r7, #3]
    ba52:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ba56:	4413      	add	r3, r2
    ba58:	681b      	ldr	r3, [r3, #0]
    ba5a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    ba5e:	2bff      	cmp	r3, #255
    ba60:	bf14      	ite	ne
    ba62:	2300      	movne	r3, #0
    ba64:	2301      	moveq	r3, #1
}
    ba66:	4618      	mov	r0, r3
    ba68:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ba6c:	46bd      	mov	sp, r7
    ba6e:	bd80      	pop	{r7, pc}

0000ba70 <_ZN8Capteurs15startConversionEv>:
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    DMA_Cmd(DMA1_Channel1, ENABLE);
}

void Capteurs::startConversion()
    ba70:	b580      	push	{r7, lr}
    ba72:	b082      	sub	sp, #8
    ba74:	af00      	add	r7, sp, #0
    ba76:	6078      	str	r0, [r7, #4]
{
    isConverted = false;
    ba78:	687b      	ldr	r3, [r7, #4]
    ba7a:	f04f 0200 	mov.w	r2, #0	; 0x0
    ba7e:	739a      	strb	r2, [r3, #14]
    ADC_SoftwareStartConvCmd(ADC1, ENABLE); // lance une conversion
    ba80:	4804      	ldr	r0, [pc, #16]	(ba94 <_ZN8Capteurs15startConversionEv+0x24>)
    ba82:	f04f 0101 	mov.w	r1, #1	; 0x1
    ba86:	f7f4 fe07 	bl	698 <ADC_SoftwareStartConvCmd>
}
    ba8a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ba8e:	46bd      	mov	sp, r7
    ba90:	bd80      	pop	{r7, pc}
    ba92:	46c0      	nop			(mov r8, r8)
    ba94:	40012400 	.word	0x40012400

0000ba98 <_ZN8CapteursC1Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    ba98:	b580      	push	{r7, lr}
    ba9a:	b096      	sub	sp, #88
    ba9c:	af00      	add	r7, sp, #0
    ba9e:	6078      	str	r0, [r7, #4]
    baa0:	687a      	ldr	r2, [r7, #4]
    baa2:	f640 13c4 	movw	r3, #2500	; 0x9c4
    baa6:	8193      	strh	r3, [r2, #12]
    baa8:	687a      	ldr	r2, [r7, #4]
    baaa:	f04f 0300 	mov.w	r3, #0	; 0x0
    baae:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    bab0:	4b67      	ldr	r3, [pc, #412]	(bc50 <_ZN8CapteursC1Ev+0x1b8>)
    bab2:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    bab6:	f04f 0c05 	mov.w	ip, #5	; 0x5
    baba:	4610      	mov	r0, r2
    babc:	4619      	mov	r1, r3
    babe:	4662      	mov	r2, ip
    bac0:	f012 fdb0 	bl	1e624 <memcpy>
        NbrOfChannel = 5;
    bac4:	687a      	ldr	r2, [r7, #4]
    bac6:	f04f 0305 	mov.w	r3, #5	; 0x5
    baca:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    bacc:	687b      	ldr	r3, [r7, #4]
    bace:	781b      	ldrb	r3, [r3, #0]
    bad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bad4:	4618      	mov	r0, r3
    bad6:	f002 fcd7 	bl	e488 <_Znaj>
    bada:	4603      	mov	r3, r0
    badc:	461a      	mov	r2, r3
    bade:	687b      	ldr	r3, [r7, #4]
    bae0:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    bae2:	687b      	ldr	r3, [r7, #4]
    bae4:	781b      	ldrb	r3, [r3, #0]
    bae6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    baea:	4618      	mov	r0, r3
    baec:	f002 fccc 	bl	e488 <_Znaj>
    baf0:	4603      	mov	r3, r0
    baf2:	461a      	mov	r2, r3
    baf4:	687b      	ldr	r3, [r7, #4]
    baf6:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    baf8:	f04f 0300 	mov.w	r3, #0	; 0x0
    bafc:	653b      	str	r3, [r7, #80]
    bafe:	e00c      	b.n	bb1a <_ZN8CapteursC1Ev+0x82>
        output[i] = 0;
    bb00:	687b      	ldr	r3, [r7, #4]
    bb02:	689a      	ldr	r2, [r3, #8]
    bb04:	6d3b      	ldr	r3, [r7, #80]
    bb06:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bb0a:	441a      	add	r2, r3
    bb0c:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb10:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    bb12:	6d3b      	ldr	r3, [r7, #80]
    bb14:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bb18:	653b      	str	r3, [r7, #80]
    bb1a:	687b      	ldr	r3, [r7, #4]
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	461a      	mov	r2, r3
    bb20:	6d3b      	ldr	r3, [r7, #80]
    bb22:	429a      	cmp	r2, r3
    bb24:	d8ec      	bhi.n	bb00 <_ZN8CapteursC1Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    bb26:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb2a:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    bb2c:	f04f 0301 	mov.w	r3, #1	; 0x1
    bb30:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    bb34:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb38:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    bb3c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    bb40:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    bb42:	f04f 0300 	mov.w	r3, #0	; 0x0
    bb46:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    bb48:	687b      	ldr	r3, [r7, #4]
    bb4a:	781b      	ldrb	r3, [r3, #0]
    bb4c:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    bb50:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bb54:	483f      	ldr	r0, [pc, #252]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bb56:	4619      	mov	r1, r3
    bb58:	f7f4 fc66 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    bb5c:	483d      	ldr	r0, [pc, #244]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bb5e:	f04f 0101 	mov.w	r1, #1	; 0x1
    bb62:	f7f4 fce3 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    bb66:	483b      	ldr	r0, [pc, #236]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bb68:	f7f4 fd3e 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    bb6c:	4839      	ldr	r0, [pc, #228]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bb6e:	f7f4 fd4b 	bl	608 <ADC_GetResetCalibrationStatus>
    bb72:	4603      	mov	r3, r0
    bb74:	2b00      	cmp	r3, #0
    bb76:	bf0c      	ite	eq
    bb78:	2300      	moveq	r3, #0
    bb7a:	2301      	movne	r3, #1
    bb7c:	b2db      	uxtb	r3, r3
    bb7e:	2b00      	cmp	r3, #0
    bb80:	d1f4      	bne.n	bb6c <_ZN8CapteursC1Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    bb82:	4834      	ldr	r0, [pc, #208]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bb84:	f7f4 fd5c 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    bb88:	4832      	ldr	r0, [pc, #200]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bb8a:	f7f4 fd69 	bl	660 <ADC_GetCalibrationStatus>
    bb8e:	4603      	mov	r3, r0
    bb90:	2b00      	cmp	r3, #0
    bb92:	bf0c      	ite	eq
    bb94:	2300      	moveq	r3, #0
    bb96:	2301      	movne	r3, #1
    bb98:	b2db      	uxtb	r3, r3
    bb9a:	2b00      	cmp	r3, #0
    bb9c:	d1f4      	bne.n	bb88 <_ZN8CapteursC1Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bb9e:	f04f 0300 	mov.w	r3, #0	; 0x0
    bba2:	657b      	str	r3, [r7, #84]
    bba4:	e015      	b.n	bbd2 <_ZN8CapteursC1Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    bba6:	6d7b      	ldr	r3, [r7, #84]
    bba8:	f107 0258 	add.w	r2, r7, #88	; 0x58
    bbac:	4413      	add	r3, r2
    bbae:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    bbb2:	6d7b      	ldr	r3, [r7, #84]
    bbb4:	b2db      	uxtb	r3, r3
    bbb6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bbba:	b2db      	uxtb	r3, r3
    bbbc:	4825      	ldr	r0, [pc, #148]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bbbe:	4611      	mov	r1, r2
    bbc0:	461a      	mov	r2, r3
    bbc2:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbc6:	f7f4 fde1 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bbca:	6d7b      	ldr	r3, [r7, #84]
    bbcc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bbd0:	657b      	str	r3, [r7, #84]
    bbd2:	687b      	ldr	r3, [r7, #4]
    bbd4:	781b      	ldrb	r3, [r3, #0]
    bbd6:	461a      	mov	r2, r3
    bbd8:	6d7b      	ldr	r3, [r7, #84]
    bbda:	429a      	cmp	r2, r3
    bbdc:	dce3      	bgt.n	bba6 <_ZN8CapteursC1Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    bbde:	481d      	ldr	r0, [pc, #116]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bbe0:	f04f 0101 	mov.w	r1, #1	; 0x1
    bbe4:	f7f4 fcbe 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    bbe8:	4b1a      	ldr	r3, [pc, #104]	(bc54 <_ZN8CapteursC1Ev+0x1bc>)
    bbea:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    bbee:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    bbf0:	687b      	ldr	r3, [r7, #4]
    bbf2:	685b      	ldr	r3, [r3, #4]
    bbf4:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    bbf6:	f04f 0300 	mov.w	r3, #0	; 0x0
    bbfa:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    bbfc:	687b      	ldr	r3, [r7, #4]
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    bc02:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc06:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    bc08:	f04f 0380 	mov.w	r3, #128	; 0x80
    bc0c:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    bc0e:	f44f 7300 	mov.w	r3, #512	; 0x200
    bc12:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    bc14:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bc18:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    bc1a:	f04f 0320 	mov.w	r3, #32	; 0x20
    bc1e:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    bc20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bc24:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    bc26:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc2a:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    bc2c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    bc30:	4809      	ldr	r0, [pc, #36]	(bc58 <_ZN8CapteursC1Ev+0x1c0>)
    bc32:	4619      	mov	r1, r3
    bc34:	f7f5 fa1c 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    bc38:	4807      	ldr	r0, [pc, #28]	(bc58 <_ZN8CapteursC1Ev+0x1c0>)
    bc3a:	f04f 0101 	mov.w	r1, #1	; 0x1
    bc3e:	f7f5 fa95 	bl	116c <DMA_Cmd>
}
    bc42:	687b      	ldr	r3, [r7, #4]
    bc44:	4618      	mov	r0, r3
    bc46:	f107 0758 	add.w	r7, r7, #88	; 0x58
    bc4a:	46bd      	mov	sp, r7
    bc4c:	bd80      	pop	{r7, pc}
    bc4e:	46c0      	nop			(mov r8, r8)
    bc50:	0001fb28 	.word	0x0001fb28
    bc54:	40012400 	.word	0x40012400
    bc58:	40020008 	.word	0x40020008

0000bc5c <_ZN8CapteursC2Ev>:
#include "capteurs.h"

Capteurs::Capteurs(): threshold(SEUIL_DETECTION), isConverted(false)
    bc5c:	b580      	push	{r7, lr}
    bc5e:	b096      	sub	sp, #88
    bc60:	af00      	add	r7, sp, #0
    bc62:	6078      	str	r0, [r7, #4]
    bc64:	687a      	ldr	r2, [r7, #4]
    bc66:	f640 13c4 	movw	r3, #2500	; 0x9c4
    bc6a:	8193      	strh	r3, [r2, #12]
    bc6c:	687a      	ldr	r2, [r7, #4]
    bc6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    bc72:	7393      	strb	r3, [r2, #14]
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
       uint8_t Channels[] = {6,7,8,9,10,11,13,15};
       NbrOfChannel = 8;
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        uint8_t Channels[] = {10,11,12,13,15};
    bc74:	4b67      	ldr	r3, [pc, #412]	(be14 <_ZN8CapteursC2Ev+0x1b8>)
    bc76:	f107 024b 	add.w	r2, r7, #75	; 0x4b
    bc7a:	f04f 0c05 	mov.w	ip, #5	; 0x5
    bc7e:	4610      	mov	r0, r2
    bc80:	4619      	mov	r1, r3
    bc82:	4662      	mov	r2, ip
    bc84:	f012 fcce 	bl	1e624 <memcpy>
        NbrOfChannel = 5;
    bc88:	687a      	ldr	r2, [r7, #4]
    bc8a:	f04f 0305 	mov.w	r3, #5	; 0x5
    bc8e:	7013      	strb	r3, [r2, #0]
    #endif

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    bc90:	687b      	ldr	r3, [r7, #4]
    bc92:	781b      	ldrb	r3, [r3, #0]
    bc94:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bc98:	4618      	mov	r0, r3
    bc9a:	f002 fbf5 	bl	e488 <_Znaj>
    bc9e:	4603      	mov	r3, r0
    bca0:	461a      	mov	r2, r3
    bca2:	687b      	ldr	r3, [r7, #4]
    bca4:	605a      	str	r2, [r3, #4]
    output = new uint32_t[NbrOfChannel];
    bca6:	687b      	ldr	r3, [r7, #4]
    bca8:	781b      	ldrb	r3, [r3, #0]
    bcaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bcae:	4618      	mov	r0, r3
    bcb0:	f002 fbea 	bl	e488 <_Znaj>
    bcb4:	4603      	mov	r3, r0
    bcb6:	461a      	mov	r2, r3
    bcb8:	687b      	ldr	r3, [r7, #4]
    bcba:	609a      	str	r2, [r3, #8]

    for(unsigned int i=0; i < NbrOfChannel; i++)
    bcbc:	f04f 0300 	mov.w	r3, #0	; 0x0
    bcc0:	653b      	str	r3, [r7, #80]
    bcc2:	e00c      	b.n	bcde <_ZN8CapteursC2Ev+0x82>
        output[i] = 0;
    bcc4:	687b      	ldr	r3, [r7, #4]
    bcc6:	689a      	ldr	r2, [r3, #8]
    bcc8:	6d3b      	ldr	r3, [r7, #80]
    bcca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    bcce:	441a      	add	r2, r3
    bcd0:	f04f 0300 	mov.w	r3, #0	; 0x0
    bcd4:	6013      	str	r3, [r2, #0]

    // rawData contient les résultats bruts des conversions
    data = new uint16_t[NbrOfChannel];
    output = new uint32_t[NbrOfChannel];

    for(unsigned int i=0; i < NbrOfChannel; i++)
    bcd6:	6d3b      	ldr	r3, [r7, #80]
    bcd8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bcdc:	653b      	str	r3, [r7, #80]
    bcde:	687b      	ldr	r3, [r7, #4]
    bce0:	781b      	ldrb	r3, [r3, #0]
    bce2:	461a      	mov	r2, r3
    bce4:	6d3b      	ldr	r3, [r7, #80]
    bce6:	429a      	cmp	r2, r3
    bce8:	d8ec      	bhi.n	bcc4 <_ZN8CapteursC2Ev+0x68>
        output[i] = 0;

    ADC_InitTypeDef ADC_InitStructure;
    // ADC1 fonctionne tout seul (on n'utilise ni ADC2 ni ADC3)
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    bcea:	f04f 0300 	mov.w	r3, #0	; 0x0
    bcee:	637b      	str	r3, [r7, #52]
    // On scanne tous les channels
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    bcf0:	f04f 0301 	mov.w	r3, #1	; 0x1
    bcf4:	f887 3038 	strb.w	r3, [r7, #56]
    // Single conversion mode
    ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
    bcf8:	f04f 0300 	mov.w	r3, #0	; 0x0
    bcfc:	f887 3039 	strb.w	r3, [r7, #57]
    // Pas d'external trigger (on lance la conversion à la main)
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    bd00:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
    bd04:	63fb      	str	r3, [r7, #60]
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    bd06:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd0a:	643b      	str	r3, [r7, #64]
    ADC_InitStructure.ADC_NbrOfChannel = NbrOfChannel;
    bd0c:	687b      	ldr	r3, [r7, #4]
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	f887 3044 	strb.w	r3, [r7, #68]
    ADC_Init(ADC1, &ADC_InitStructure);
    bd14:	f107 0334 	add.w	r3, r7, #52	; 0x34
    bd18:	483f      	ldr	r0, [pc, #252]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd1a:	4619      	mov	r1, r3
    bd1c:	f7f4 fb84 	bl	428 <ADC_Init>

    // Activation du périphérique
    ADC_Cmd(ADC1, ENABLE);
    bd20:	483d      	ldr	r0, [pc, #244]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd22:	f04f 0101 	mov.w	r1, #1	; 0x1
    bd26:	f7f4 fc01 	bl	52c <ADC_Cmd>

    // Calibrage
    // On remet la calibration à zéro
    ADC_ResetCalibration(ADC1);
    bd2a:	483b      	ldr	r0, [pc, #236]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd2c:	f7f4 fc5c 	bl	5e8 <ADC_ResetCalibration>
    while(ADC_GetResetCalibrationStatus(ADC1));
    bd30:	4839      	ldr	r0, [pc, #228]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd32:	f7f4 fc69 	bl	608 <ADC_GetResetCalibrationStatus>
    bd36:	4603      	mov	r3, r0
    bd38:	2b00      	cmp	r3, #0
    bd3a:	bf0c      	ite	eq
    bd3c:	2300      	moveq	r3, #0
    bd3e:	2301      	movne	r3, #1
    bd40:	b2db      	uxtb	r3, r3
    bd42:	2b00      	cmp	r3, #0
    bd44:	d1f4      	bne.n	bd30 <_ZN8CapteursC2Ev+0xd4>
    // On lance la calibration
    ADC_StartCalibration(ADC1);
    bd46:	4834      	ldr	r0, [pc, #208]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd48:	f7f4 fc7a 	bl	640 <ADC_StartCalibration>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));
    bd4c:	4832      	ldr	r0, [pc, #200]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd4e:	f7f4 fc87 	bl	660 <ADC_GetCalibrationStatus>
    bd52:	4603      	mov	r3, r0
    bd54:	2b00      	cmp	r3, #0
    bd56:	bf0c      	ite	eq
    bd58:	2300      	moveq	r3, #0
    bd5a:	2301      	movne	r3, #1
    bd5c:	b2db      	uxtb	r3, r3
    bd5e:	2b00      	cmp	r3, #0
    bd60:	d1f4      	bne.n	bd4c <_ZN8CapteursC2Ev+0xf0>

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bd62:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd66:	657b      	str	r3, [r7, #84]
    bd68:	e015      	b.n	bd96 <_ZN8CapteursC2Ev+0x13a>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    bd6a:	6d7b      	ldr	r3, [r7, #84]
    bd6c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    bd70:	4413      	add	r3, r2
    bd72:	f813 2c0d 	ldrb.w	r2, [r3, #-13]
    bd76:	6d7b      	ldr	r3, [r7, #84]
    bd78:	b2db      	uxtb	r3, r3
    bd7a:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bd7e:	b2db      	uxtb	r3, r3
    bd80:	4825      	ldr	r0, [pc, #148]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bd82:	4611      	mov	r1, r2
    bd84:	461a      	mov	r2, r3
    bd86:	f04f 0300 	mov.w	r3, #0	; 0x0
    bd8a:	f7f4 fcff 	bl	78c <ADC_RegularChannelConfig>
    // Et on attend que ce soit fini
    while(ADC_GetCalibrationStatus(ADC1));

    // Définition des canaux à convertir
    //ADC_RegularChannelConfig (ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
    for (int i=0; i<NbrOfChannel; i++) {
    bd8e:	6d7b      	ldr	r3, [r7, #84]
    bd90:	f103 0301 	add.w	r3, r3, #1	; 0x1
    bd94:	657b      	str	r3, [r7, #84]
    bd96:	687b      	ldr	r3, [r7, #4]
    bd98:	781b      	ldrb	r3, [r3, #0]
    bd9a:	461a      	mov	r2, r3
    bd9c:	6d7b      	ldr	r3, [r7, #84]
    bd9e:	429a      	cmp	r2, r3
    bda0:	dce3      	bgt.n	bd6a <_ZN8CapteursC2Ev+0x10e>
        ADC_RegularChannelConfig (ADC1, Channels[i], i+1, ADC_SampleTime_1Cycles5);
    }
    // active le transfert des résultats de conversion en SRAM
    ADC_DMACmd(ADC1, ENABLE);
    bda2:	481d      	ldr	r0, [pc, #116]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bda4:	f04f 0101 	mov.w	r1, #1	; 0x1
    bda8:	f7f4 fbdc 	bl	564 <ADC_DMACmd>

    DMA_InitTypeDef DMA_InitStructure;
    DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(ADC1->DR); // ADC regular data register contient le résultat de la conversion
    bdac:	4b1a      	ldr	r3, [pc, #104]	(be18 <_ZN8CapteursC2Ev+0x1bc>)
    bdae:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    bdb2:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)data ; // Adresse de destination
    bdb4:	687b      	ldr	r3, [r7, #4]
    bdb6:	685b      	ldr	r3, [r3, #4]
    bdb8:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC; // On transfère du périphérique (ADC) à la mémoire (SRAM)
    bdba:	f04f 0300 	mov.w	r3, #0	; 0x0
    bdbe:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = NbrOfChannel; // Nombre de conversions à transférer
    bdc0:	687b      	ldr	r3, [r7, #4]
    bdc2:	781b      	ldrb	r3, [r3, #0]
    bdc4:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable; // L'adresse du résultat de la conversion ne change pas
    bdc6:	f04f 0300 	mov.w	r3, #0	; 0x0
    bdca:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable; // Incrémente le pointeur destination pour enregistrer les différentes conversions
    bdcc:	f04f 0380 	mov.w	r3, #128	; 0x80
    bdd0:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
    bdd2:	f44f 7300 	mov.w	r3, #512	; 0x200
    bdd6:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
    bdd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    bddc:	627b      	str	r3, [r7, #36]
    // Note : le registre ADC_DR fait 32 bits mais seuls les bits 0:15 nous intéressent
    // Ici tout devrait fonctionner correctement : cf doc p.189 (tableau 56) (malgré une petite erreur dans le tableau)
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    bdde:	f04f 0320 	mov.w	r3, #32	; 0x20
    bde2:	62bb      	str	r3, [r7, #40]
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    bde4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    bde8:	62fb      	str	r3, [r7, #44]
    // On ne permet pas de lancer un transfert en software (car lancé par le périphérique ADC)
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    bdea:	f04f 0300 	mov.w	r3, #0	; 0x0
    bdee:	633b      	str	r3, [r7, #48]
    // Channel1 : cf p.192 tableau 58
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    bdf0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    bdf4:	4809      	ldr	r0, [pc, #36]	(be1c <_ZN8CapteursC2Ev+0x1c0>)
    bdf6:	4619      	mov	r1, r3
    bdf8:	f7f5 f93a 	bl	1070 <DMA_Init>
    DMA_Cmd(DMA1_Channel1, ENABLE);
    bdfc:	4807      	ldr	r0, [pc, #28]	(be1c <_ZN8CapteursC2Ev+0x1c0>)
    bdfe:	f04f 0101 	mov.w	r1, #1	; 0x1
    be02:	f7f5 f9b3 	bl	116c <DMA_Cmd>
}
    be06:	687b      	ldr	r3, [r7, #4]
    be08:	4618      	mov	r0, r3
    be0a:	f107 0758 	add.w	r7, r7, #88	; 0x58
    be0e:	46bd      	mov	sp, r7
    be10:	bd80      	pop	{r7, pc}
    be12:	46c0      	nop			(mov r8, r8)
    be14:	0001fb28 	.word	0x0001fb28
    be18:	40012400 	.word	0x40012400
    be1c:	40020008 	.word	0x40020008

0000be20 <_ZN3Led6setOffEi>:
        default:
            break;
    }
}

void Led::setOff(int index)
    be20:	b580      	push	{r7, lr}
    be22:	b082      	sub	sp, #8
    be24:	af00      	add	r7, sp, #0
    be26:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    be28:	687b      	ldr	r3, [r7, #4]
    be2a:	2b00      	cmp	r3, #0
    be2c:	db07      	blt.n	be3e <_ZN3Led6setOffEi+0x1e>
    be2e:	687b      	ldr	r3, [r7, #4]
    be30:	2b01      	cmp	r3, #1
    be32:	dc04      	bgt.n	be3e <_ZN3Led6setOffEi+0x1e>
        ledOn[index] = false;
    be34:	6879      	ldr	r1, [r7, #4]
    be36:	4a10      	ldr	r2, [pc, #64]	(be78 <_ZN3Led6setOffEi+0x58>)
    be38:	f04f 0300 	mov.w	r3, #0	; 0x0
    be3c:	5453      	strb	r3, [r2, r1]

    switch(index)
    be3e:	687b      	ldr	r3, [r7, #4]
    be40:	603b      	str	r3, [r7, #0]
    be42:	683b      	ldr	r3, [r7, #0]
    be44:	2b00      	cmp	r3, #0
    be46:	d003      	beq.n	be50 <_ZN3Led6setOffEi+0x30>
    be48:	683b      	ldr	r3, [r7, #0]
    be4a:	2b01      	cmp	r3, #1
    be4c:	d008      	beq.n	be60 <_ZN3Led6setOffEi+0x40>
    be4e:	e00e      	b.n	be6e <_ZN3Led6setOffEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET); // LED verte
    be50:	480a      	ldr	r0, [pc, #40]	(be7c <_ZN3Led6setOffEi+0x5c>)
    be52:	f04f 0140 	mov.w	r1, #64	; 0x40
    be56:	f04f 0200 	mov.w	r2, #0	; 0x0
    be5a:	f7f5 fd97 	bl	198c <GPIO_WriteBit>
    be5e:	e006      	b.n	be6e <_ZN3Led6setOffEi+0x4e>
            break;

        case 1:
        #ifdef ROBOTHW
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET); // LED jaune
    be60:	4806      	ldr	r0, [pc, #24]	(be7c <_ZN3Led6setOffEi+0x5c>)
    be62:	f04f 0180 	mov.w	r1, #128	; 0x80
    be66:	f04f 0200 	mov.w	r2, #0	; 0x0
    be6a:	f7f5 fd8f 	bl	198c <GPIO_WriteBit>
        #endif
            break;
        default:
            break;
    }
}
    be6e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    be72:	46bd      	mov	sp, r7
    be74:	bd80      	pop	{r7, pc}
    be76:	46c0      	nop			(mov r8, r8)
    be78:	2000057c 	.word	0x2000057c
    be7c:	40011000 	.word	0x40011000

0000be80 <_Z12eteindreLED2v>:
void allumerLED2()
{
    Led::setOn(1);
}

void eteindreLED2()
    be80:	b580      	push	{r7, lr}
    be82:	af00      	add	r7, sp, #0
{
    Led::setOff(1);
    be84:	f04f 0001 	mov.w	r0, #1	; 0x1
    be88:	f7ff ffca 	bl	be20 <_ZN3Led6setOffEi>
}
    be8c:	46bd      	mov	sp, r7
    be8e:	bd80      	pop	{r7, pc}

0000be90 <_Z11eteindreLEDv>:
void allumerLED()
{
    Led::setOn(0);
}

void eteindreLED()
    be90:	b580      	push	{r7, lr}
    be92:	af00      	add	r7, sp, #0
{
    Led::setOff(0);
    be94:	f04f 0000 	mov.w	r0, #0	; 0x0
    be98:	f7ff ffc2 	bl	be20 <_ZN3Led6setOffEi>
}
    be9c:	46bd      	mov	sp, r7
    be9e:	bd80      	pop	{r7, pc}

0000bea0 <_ZN3Led5setOnEi>:
        else
            setOn(index);
    }
}

void Led::setOn(int index)
    bea0:	b580      	push	{r7, lr}
    bea2:	b082      	sub	sp, #8
    bea4:	af00      	add	r7, sp, #0
    bea6:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    bea8:	687b      	ldr	r3, [r7, #4]
    beaa:	2b00      	cmp	r3, #0
    beac:	db07      	blt.n	bebe <_ZN3Led5setOnEi+0x1e>
    beae:	687b      	ldr	r3, [r7, #4]
    beb0:	2b01      	cmp	r3, #1
    beb2:	dc04      	bgt.n	bebe <_ZN3Led5setOnEi+0x1e>
        ledOn[index] = true;
    beb4:	6879      	ldr	r1, [r7, #4]
    beb6:	4a10      	ldr	r2, [pc, #64]	(bef8 <_ZN3Led5setOnEi+0x58>)
    beb8:	f04f 0301 	mov.w	r3, #1	; 0x1
    bebc:	5453      	strb	r3, [r2, r1]

    switch(index)
    bebe:	687b      	ldr	r3, [r7, #4]
    bec0:	603b      	str	r3, [r7, #0]
    bec2:	683b      	ldr	r3, [r7, #0]
    bec4:	2b00      	cmp	r3, #0
    bec6:	d003      	beq.n	bed0 <_ZN3Led5setOnEi+0x30>
    bec8:	683b      	ldr	r3, [r7, #0]
    beca:	2b01      	cmp	r3, #1
    becc:	d008      	beq.n	bee0 <_ZN3Led5setOnEi+0x40>
    bece:	e00e      	b.n	beee <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_RESET); // LED verte
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_SET); // LED verte
    bed0:	480a      	ldr	r0, [pc, #40]	(befc <_ZN3Led5setOnEi+0x5c>)
    bed2:	f04f 0140 	mov.w	r1, #64	; 0x40
    bed6:	f04f 0201 	mov.w	r2, #1	; 0x1
    beda:	f7f5 fd57 	bl	198c <GPIO_WriteBit>
    bede:	e006      	b.n	beee <_ZN3Led5setOnEi+0x4e>
        #ifdef ROBOTHW
            #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
               // Pas de LED jaune sur le H103 :'(
            #endif
            #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
                GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_SET); // LED jaune
    bee0:	4806      	ldr	r0, [pc, #24]	(befc <_ZN3Led5setOnEi+0x5c>)
    bee2:	f04f 0180 	mov.w	r1, #128	; 0x80
    bee6:	f04f 0201 	mov.w	r2, #1	; 0x1
    beea:	f7f5 fd4f 	bl	198c <GPIO_WriteBit>
            break;

        default:
            break;
    }
}
    beee:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bef2:	46bd      	mov	sp, r7
    bef4:	bd80      	pop	{r7, pc}
    bef6:	46c0      	nop			(mov r8, r8)
    bef8:	2000057c 	.word	0x2000057c
    befc:	40011000 	.word	0x40011000

0000bf00 <_ZN3Led6toggleEi>:
    Led::setOff(1);
}

bool Led::ledOn[LED_NUMBER] = {0};

void Led::toggle(int index)
    bf00:	b580      	push	{r7, lr}
    bf02:	b082      	sub	sp, #8
    bf04:	af00      	add	r7, sp, #0
    bf06:	6078      	str	r0, [r7, #4]
{
    if (index>=0 and index<LED_NUMBER)
    bf08:	687b      	ldr	r3, [r7, #4]
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	db0e      	blt.n	bf2c <_ZN3Led6toggleEi+0x2c>
    bf0e:	687b      	ldr	r3, [r7, #4]
    bf10:	2b01      	cmp	r3, #1
    bf12:	dc0b      	bgt.n	bf2c <_ZN3Led6toggleEi+0x2c>
    {
        if (ledOn[index])
    bf14:	687b      	ldr	r3, [r7, #4]
    bf16:	4a07      	ldr	r2, [pc, #28]	(bf34 <_ZN3Led6toggleEi+0x34>)
    bf18:	5cd3      	ldrb	r3, [r2, r3]
    bf1a:	2b00      	cmp	r3, #0
    bf1c:	d003      	beq.n	bf26 <_ZN3Led6toggleEi+0x26>
            setOff(index);
    bf1e:	6878      	ldr	r0, [r7, #4]
    bf20:	f7ff ff7e 	bl	be20 <_ZN3Led6setOffEi>
    bf24:	e002      	b.n	bf2c <_ZN3Led6toggleEi+0x2c>
        else
            setOn(index);
    bf26:	6878      	ldr	r0, [r7, #4]
    bf28:	f7ff ffba 	bl	bea0 <_ZN3Led5setOnEi>
    }
}
    bf2c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    bf30:	46bd      	mov	sp, r7
    bf32:	bd80      	pop	{r7, pc}
    bf34:	2000057c 	.word	0x2000057c

0000bf38 <_Z11allumerLED2v>:
void eteindreLED()
{
    Led::setOff(0);
}

void allumerLED2()
    bf38:	b580      	push	{r7, lr}
    bf3a:	af00      	add	r7, sp, #0
{
    Led::setOn(1);
    bf3c:	f04f 0001 	mov.w	r0, #1	; 0x1
    bf40:	f7ff ffae 	bl	bea0 <_ZN3Led5setOnEi>
}
    bf44:	46bd      	mov	sp, r7
    bf46:	bd80      	pop	{r7, pc}

0000bf48 <_Z10allumerLEDv>:
#include "leds.h"

// allume ou éteint une LED
void allumerLED()
    bf48:	b580      	push	{r7, lr}
    bf4a:	af00      	add	r7, sp, #0
{
    Led::setOn(0);
    bf4c:	f04f 0000 	mov.w	r0, #0	; 0x0
    bf50:	f7ff ffa6 	bl	bea0 <_ZN3Led5setOnEi>
}
    bf54:	46bd      	mov	sp, r7
    bf56:	bd80      	pop	{r7, pc}

0000bf58 <_ZN18LigthBarrierSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
}

Sensor::OutputSensor LigthBarrierSensor::getValue()
    bf58:	b480      	push	{r7}
    bf5a:	b087      	sub	sp, #28
    bf5c:	af00      	add	r7, sp, #0
    bf5e:	4602      	mov	r2, r0
    bf60:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    bf62:	f04f 0302 	mov.w	r3, #2	; 0x2
    bf66:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    bf68:	4b05      	ldr	r3, [pc, #20]	(bf80 <_ZN18LigthBarrierSensor8getValueEv+0x28>)
    bf6a:	6053      	str	r3, [r2, #4]
    outputR.b = output;
    bf6c:	687b      	ldr	r3, [r7, #4]
    bf6e:	7bdb      	ldrb	r3, [r3, #15]
    bf70:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    bf72:	4610      	mov	r0, r2
    bf74:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    bf78:	46bd      	mov	sp, r7
    bf7a:	bc80      	pop	{r7}
    bf7c:	4770      	bx	lr
    bf7e:	46c0      	nop			(mov r8, r8)
    bf80:	00000000 	.word	0x00000000

0000bf84 <_ZN18LigthBarrierSensor7getNameEv>:

LigthBarrierSensor::LigthBarrierName LigthBarrierSensor::getName()
    bf84:	b480      	push	{r7}
    bf86:	b083      	sub	sp, #12
    bf88:	af00      	add	r7, sp, #0
    bf8a:	6078      	str	r0, [r7, #4]
{
    return name;
    bf8c:	687b      	ldr	r3, [r7, #4]
    bf8e:	7b9b      	ldrb	r3, [r3, #14]
}
    bf90:	4618      	mov	r0, r3
    bf92:	f107 070c 	add.w	r7, r7, #12	; 0xc
    bf96:	46bd      	mov	sp, r7
    bf98:	bc80      	pop	{r7}
    bf9a:	4770      	bx	lr

0000bf9c <_ZN18LigthBarrierSensor11updateValueEv>:

LigthBarrierSensor::~LigthBarrierSensor()
{
}

void LigthBarrierSensor::updateValue()
    bf9c:	b590      	push	{r4, r7, lr}
    bf9e:	b083      	sub	sp, #12
    bfa0:	af00      	add	r7, sp, #0
    bfa2:	6078      	str	r0, [r7, #4]
{
    counter <<=1;
    bfa4:	687b      	ldr	r3, [r7, #4]
    bfa6:	899b      	ldrh	r3, [r3, #12]
    bfa8:	ea4f 0343 	mov.w	r3, r3, lsl #1
    bfac:	b29b      	uxth	r3, r3
    bfae:	687a      	ldr	r2, [r7, #4]
    bfb0:	8193      	strh	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)==SET);
    bfb2:	687b      	ldr	r3, [r7, #4]
    bfb4:	899b      	ldrh	r3, [r3, #12]
    bfb6:	461c      	mov	r4, r3
    bfb8:	687b      	ldr	r3, [r7, #4]
    bfba:	689a      	ldr	r2, [r3, #8]
    bfbc:	687b      	ldr	r3, [r7, #4]
    bfbe:	889b      	ldrh	r3, [r3, #4]
    bfc0:	4610      	mov	r0, r2
    bfc2:	4619      	mov	r1, r3
    bfc4:	f7f5 fc6e 	bl	18a4 <GPIO_ReadInputDataBit>
    bfc8:	4603      	mov	r3, r0
    bfca:	2b01      	cmp	r3, #1
    bfcc:	bf14      	ite	ne
    bfce:	2300      	movne	r3, #0
    bfd0:	2301      	moveq	r3, #1
    bfd2:	4622      	mov	r2, r4
    bfd4:	ea42 0303 	orr.w	r3, r2, r3
    bfd8:	b29b      	uxth	r3, r3
    bfda:	b29b      	uxth	r3, r3
    bfdc:	687a      	ldr	r2, [r7, #4]
    bfde:	8193      	strh	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de
    // retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ;
    bfe0:	687b      	ldr	r3, [r7, #4]
    bfe2:	7bdb      	ldrb	r3, [r3, #15]
    bfe4:	2b00      	cmp	r3, #0
    bfe6:	d00a      	beq.n	bffe <_ZN18LigthBarrierSensor11updateValueEv+0x62>
    bfe8:	687b      	ldr	r3, [r7, #4]
    bfea:	899b      	ldrh	r3, [r3, #12]
    bfec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    bff0:	2b00      	cmp	r3, #0
    bff2:	bf0c      	ite	eq
    bff4:	2300      	moveq	r3, #0
    bff6:	2301      	movne	r3, #1
    bff8:	b2db      	uxtb	r3, r3
    bffa:	603b      	str	r3, [r7, #0]
    bffc:	e009      	b.n	c012 <_ZN18LigthBarrierSensor11updateValueEv+0x76>
    bffe:	687b      	ldr	r3, [r7, #4]
    c000:	899b      	ldrh	r3, [r3, #12]
    c002:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    c006:	2bff      	cmp	r3, #255
    c008:	bf14      	ite	ne
    c00a:	2300      	movne	r3, #0
    c00c:	2301      	moveq	r3, #1
    c00e:	b2db      	uxtb	r3, r3
    c010:	603b      	str	r3, [r7, #0]
    c012:	687a      	ldr	r2, [r7, #4]
    c014:	6839      	ldr	r1, [r7, #0]
    c016:	460b      	mov	r3, r1
    c018:	73d3      	strb	r3, [r2, #15]
}
    c01a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c01e:	46bd      	mov	sp, r7
    c020:	bd90      	pop	{r4, r7, pc}
    c022:	46c0      	nop			(mov r8, r8)

0000c024 <_ZN18LigthBarrierSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c024:	b580      	push	{r7, lr}
    c026:	b082      	sub	sp, #8
    c028:	af00      	add	r7, sp, #0
    c02a:	6078      	str	r0, [r7, #4]
    c02c:	687a      	ldr	r2, [r7, #4]
    c02e:	4b0a      	ldr	r3, [pc, #40]	(c058 <_ZN18LigthBarrierSensorD0Ev+0x34>)
    c030:	6013      	str	r3, [r2, #0]
{
}
    c032:	687b      	ldr	r3, [r7, #4]
    c034:	4618      	mov	r0, r3
    c036:	f7f9 fccd 	bl	59d4 <_ZN6SensorD2Ev>
    c03a:	f04f 0301 	mov.w	r3, #1	; 0x1
    c03e:	b2db      	uxtb	r3, r3
    c040:	2b00      	cmp	r3, #0
    c042:	d002      	beq.n	c04a <_ZN18LigthBarrierSensorD0Ev+0x26>
    c044:	6878      	ldr	r0, [r7, #4]
    c046:	f002 fa2d 	bl	e4a4 <_ZdlPv>
    c04a:	687b      	ldr	r3, [r7, #4]
    c04c:	4618      	mov	r0, r3
    c04e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c052:	46bd      	mov	sp, r7
    c054:	bd80      	pop	{r7, pc}
    c056:	46c0      	nop			(mov r8, r8)
    c058:	0001fb38 	.word	0x0001fb38

0000c05c <_ZN18LigthBarrierSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c05c:	b580      	push	{r7, lr}
    c05e:	b082      	sub	sp, #8
    c060:	af00      	add	r7, sp, #0
    c062:	6078      	str	r0, [r7, #4]
    c064:	687a      	ldr	r2, [r7, #4]
    c066:	4b0a      	ldr	r3, [pc, #40]	(c090 <_ZN18LigthBarrierSensorD1Ev+0x34>)
    c068:	6013      	str	r3, [r2, #0]
{
}
    c06a:	687b      	ldr	r3, [r7, #4]
    c06c:	4618      	mov	r0, r3
    c06e:	f7f9 fcb1 	bl	59d4 <_ZN6SensorD2Ev>
    c072:	f04f 0300 	mov.w	r3, #0	; 0x0
    c076:	b2db      	uxtb	r3, r3
    c078:	2b00      	cmp	r3, #0
    c07a:	d002      	beq.n	c082 <_ZN18LigthBarrierSensorD1Ev+0x26>
    c07c:	6878      	ldr	r0, [r7, #4]
    c07e:	f002 fa11 	bl	e4a4 <_ZdlPv>
    c082:	687b      	ldr	r3, [r7, #4]
    c084:	4618      	mov	r0, r3
    c086:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c08a:	46bd      	mov	sp, r7
    c08c:	bd80      	pop	{r7, pc}
    c08e:	46c0      	nop			(mov r8, r8)
    c090:	0001fb38 	.word	0x0001fb38

0000c094 <_ZN18LigthBarrierSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LigthBarrierSensor::~LigthBarrierSensor()
    c094:	b580      	push	{r7, lr}
    c096:	b082      	sub	sp, #8
    c098:	af00      	add	r7, sp, #0
    c09a:	6078      	str	r0, [r7, #4]
    c09c:	687a      	ldr	r2, [r7, #4]
    c09e:	4b0a      	ldr	r3, [pc, #40]	(c0c8 <_ZN18LigthBarrierSensorD2Ev+0x34>)
    c0a0:	6013      	str	r3, [r2, #0]
{
}
    c0a2:	687b      	ldr	r3, [r7, #4]
    c0a4:	4618      	mov	r0, r3
    c0a6:	f7f9 fc95 	bl	59d4 <_ZN6SensorD2Ev>
    c0aa:	f04f 0300 	mov.w	r3, #0	; 0x0
    c0ae:	b2db      	uxtb	r3, r3
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d002      	beq.n	c0ba <_ZN18LigthBarrierSensorD2Ev+0x26>
    c0b4:	6878      	ldr	r0, [r7, #4]
    c0b6:	f002 f9f5 	bl	e4a4 <_ZdlPv>
    c0ba:	687b      	ldr	r3, [r7, #4]
    c0bc:	4618      	mov	r0, r3
    c0be:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c0c2:	46bd      	mov	sp, r7
    c0c4:	bd80      	pop	{r7, pc}
    c0c6:	46c0      	nop			(mov r8, r8)
    c0c8:	0001fb38 	.word	0x0001fb38

0000c0cc <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c0cc:	b580      	push	{r7, lr}
    c0ce:	b086      	sub	sp, #24
    c0d0:	af00      	add	r7, sp, #0
    c0d2:	60f8      	str	r0, [r7, #12]
    c0d4:	607b      	str	r3, [r7, #4]
    c0d6:	460b      	mov	r3, r1
    c0d8:	72fb      	strb	r3, [r7, #11]
    c0da:	4613      	mov	r3, r2
    c0dc:	813b      	strh	r3, [r7, #8]
    c0de:	68fb      	ldr	r3, [r7, #12]
    c0e0:	4618      	mov	r0, r3
    c0e2:	f7f9 fc27 	bl	5934 <_ZN6SensorC2Ev>
    c0e6:	68fa      	ldr	r2, [r7, #12]
    c0e8:	4b13      	ldr	r3, [pc, #76]	(c138 <_ZN18LigthBarrierSensorC1ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c0ea:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c0ec:	68fa      	ldr	r2, [r7, #12]
    c0ee:	893b      	ldrh	r3, [r7, #8]
    c0f0:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c0f2:	68fa      	ldr	r2, [r7, #12]
    c0f4:	687b      	ldr	r3, [r7, #4]
    c0f6:	6093      	str	r3, [r2, #8]
    counter = 0;
    c0f8:	68fa      	ldr	r2, [r7, #12]
    c0fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    c0fe:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c100:	68fa      	ldr	r2, [r7, #12]
    c102:	7afb      	ldrb	r3, [r7, #11]
    c104:	7393      	strb	r3, [r2, #14]
    output = false;
    c106:	68fa      	ldr	r2, [r7, #12]
    c108:	f04f 0300 	mov.w	r3, #0	; 0x0
    c10c:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c10e:	893b      	ldrh	r3, [r7, #8]
    c110:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c112:	f04f 0348 	mov.w	r3, #72	; 0x48
    c116:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c118:	f04f 0303 	mov.w	r3, #3	; 0x3
    c11c:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c11e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c122:	6878      	ldr	r0, [r7, #4]
    c124:	4619      	mov	r1, r3
    c126:	f7f5 fac3 	bl	16b0 <GPIO_Init>
}
    c12a:	68fb      	ldr	r3, [r7, #12]
    c12c:	4618      	mov	r0, r3
    c12e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c132:	46bd      	mov	sp, r7
    c134:	bd80      	pop	{r7, pc}
    c136:	46c0      	nop			(mov r8, r8)
    c138:	0001fb38 	.word	0x0001fb38

0000c13c <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef>:
#include "ligthBarrierSensor.h"

#ifdef ROBOTHW

LigthBarrierSensor::LigthBarrierSensor(LigthBarrierName name, uint16_t pin, GPIO_TypeDef* group)
    c13c:	b580      	push	{r7, lr}
    c13e:	b086      	sub	sp, #24
    c140:	af00      	add	r7, sp, #0
    c142:	60f8      	str	r0, [r7, #12]
    c144:	607b      	str	r3, [r7, #4]
    c146:	460b      	mov	r3, r1
    c148:	72fb      	strb	r3, [r7, #11]
    c14a:	4613      	mov	r3, r2
    c14c:	813b      	strh	r3, [r7, #8]
    c14e:	68fb      	ldr	r3, [r7, #12]
    c150:	4618      	mov	r0, r3
    c152:	f7f9 fbef 	bl	5934 <_ZN6SensorC2Ev>
    c156:	68fa      	ldr	r2, [r7, #12]
    c158:	4b13      	ldr	r3, [pc, #76]	(c1a8 <_ZN18LigthBarrierSensorC2ENS_16LigthBarrierNameEtP12GPIO_TypeDef+0x6c>)
    c15a:	6013      	str	r3, [r2, #0]
{
    this->pin = pin;
    c15c:	68fa      	ldr	r2, [r7, #12]
    c15e:	893b      	ldrh	r3, [r7, #8]
    c160:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c162:	68fa      	ldr	r2, [r7, #12]
    c164:	687b      	ldr	r3, [r7, #4]
    c166:	6093      	str	r3, [r2, #8]
    counter = 0;
    c168:	68fa      	ldr	r2, [r7, #12]
    c16a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c16e:	8193      	strh	r3, [r2, #12]
    this->name = name;
    c170:	68fa      	ldr	r2, [r7, #12]
    c172:	7afb      	ldrb	r3, [r7, #11]
    c174:	7393      	strb	r3, [r2, #14]
    output = false;
    c176:	68fa      	ldr	r2, [r7, #12]
    c178:	f04f 0300 	mov.w	r3, #0	; 0x0
    c17c:	73d3      	strb	r3, [r2, #15]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c17e:	893b      	ldrh	r3, [r7, #8]
    c180:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    c182:	f04f 0348 	mov.w	r3, #72	; 0x48
    c186:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c188:	f04f 0303 	mov.w	r3, #3	; 0x3
    c18c:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c18e:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c192:	6878      	ldr	r0, [r7, #4]
    c194:	4619      	mov	r1, r3
    c196:	f7f5 fa8b 	bl	16b0 <GPIO_Init>
}
    c19a:	68fb      	ldr	r3, [r7, #12]
    c19c:	4618      	mov	r0, r3
    c19e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c1a2:	46bd      	mov	sp, r7
    c1a4:	bd80      	pop	{r7, pc}
    c1a6:	46c0      	nop			(mov r8, r8)
    c1a8:	0001fb38 	.word	0x0001fb38

0000c1ac <_ZN17LimitSwitchSensor8getValueEv>:
    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
}

Sensor::OutputSensor LimitSwitchSensor::getValue()
    c1ac:	b480      	push	{r7}
    c1ae:	b087      	sub	sp, #28
    c1b0:	af00      	add	r7, sp, #0
    c1b2:	4602      	mov	r2, r0
    c1b4:	6079      	str	r1, [r7, #4]
{
    OutputSensor outputR;
    outputR.type = LIMIT_SWITCH;
    c1b6:	f04f 0302 	mov.w	r3, #2	; 0x2
    c1ba:	7013      	strb	r3, [r2, #0]
    outputR.f = 0;
    c1bc:	4b05      	ldr	r3, [pc, #20]	(c1d4 <_ZN17LimitSwitchSensor8getValueEv+0x28>)
    c1be:	6053      	str	r3, [r2, #4]
    outputR.b = this->output;
    c1c0:	687b      	ldr	r3, [r7, #4]
    c1c2:	7b9b      	ldrb	r3, [r3, #14]
    c1c4:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    c1c6:	4610      	mov	r0, r2
    c1c8:	f107 071c 	add.w	r7, r7, #28	; 0x1c
    c1cc:	46bd      	mov	sp, r7
    c1ce:	bc80      	pop	{r7}
    c1d0:	4770      	bx	lr
    c1d2:	46c0      	nop			(mov r8, r8)
    c1d4:	00000000 	.word	0x00000000

0000c1d8 <_ZN17LimitSwitchSensor7getNameEv>:

LimitSwitchSensor::LimitSwitchName LimitSwitchSensor::getName()
    c1d8:	b480      	push	{r7}
    c1da:	b083      	sub	sp, #12
    c1dc:	af00      	add	r7, sp, #0
    c1de:	6078      	str	r0, [r7, #4]
{
    return name;
    c1e0:	687b      	ldr	r3, [r7, #4]
    c1e2:	7b5b      	ldrb	r3, [r3, #13]
}
    c1e4:	4618      	mov	r0, r3
    c1e6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c1ea:	46bd      	mov	sp, r7
    c1ec:	bc80      	pop	{r7}
    c1ee:	4770      	bx	lr

0000c1f0 <_ZN17LimitSwitchSensor11updateValueEv>:

LimitSwitchSensor::~LimitSwitchSensor()
{
}

void  LimitSwitchSensor::updateValue()
    c1f0:	b590      	push	{r4, r7, lr}
    c1f2:	b083      	sub	sp, #12
    c1f4:	af00      	add	r7, sp, #0
    c1f6:	6078      	str	r0, [r7, #4]
{
    counter <<= 1;
    c1f8:	687b      	ldr	r3, [r7, #4]
    c1fa:	7b1b      	ldrb	r3, [r3, #12]
    c1fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c200:	b2db      	uxtb	r3, r3
    c202:	687a      	ldr	r2, [r7, #4]
    c204:	7313      	strb	r3, [r2, #12]
    counter |= (GPIO_ReadInputDataBit(group,pin)== Bit_SET);
    c206:	687b      	ldr	r3, [r7, #4]
    c208:	7b1b      	ldrb	r3, [r3, #12]
    c20a:	461c      	mov	r4, r3
    c20c:	687b      	ldr	r3, [r7, #4]
    c20e:	689a      	ldr	r2, [r3, #8]
    c210:	687b      	ldr	r3, [r7, #4]
    c212:	889b      	ldrh	r3, [r3, #4]
    c214:	4610      	mov	r0, r2
    c216:	4619      	mov	r1, r3
    c218:	f7f5 fb44 	bl	18a4 <GPIO_ReadInputDataBit>
    c21c:	4603      	mov	r3, r0
    c21e:	2b01      	cmp	r3, #1
    c220:	bf14      	ite	ne
    c222:	2300      	movne	r3, #0
    c224:	2301      	moveq	r3, #1
    c226:	4622      	mov	r2, r4
    c228:	ea42 0303 	orr.w	r3, r2, r3
    c22c:	b2db      	uxtb	r3, r3
    c22e:	b2db      	uxtb	r3, r3
    c230:	687a      	ldr	r2, [r7, #4]
    c232:	7313      	strb	r3, [r2, #12]

    // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true
    // et que rien a été detecté au moins 8 fois pour retourner false.
    output = (counter == 0xff);/*output ? !((counter & 0xff) == 0x00) :*/
    c234:	687b      	ldr	r3, [r7, #4]
    c236:	7b1b      	ldrb	r3, [r3, #12]
    c238:	2bff      	cmp	r3, #255
    c23a:	bf14      	ite	ne
    c23c:	2300      	movne	r3, #0
    c23e:	2301      	moveq	r3, #1
    c240:	b2db      	uxtb	r3, r3
    c242:	687a      	ldr	r2, [r7, #4]
    c244:	7393      	strb	r3, [r2, #14]
}
    c246:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c24a:	46bd      	mov	sp, r7
    c24c:	bd90      	pop	{r4, r7, pc}
    c24e:	46c0      	nop			(mov r8, r8)

0000c250 <_ZN17LimitSwitchSensorD0Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c250:	b580      	push	{r7, lr}
    c252:	b082      	sub	sp, #8
    c254:	af00      	add	r7, sp, #0
    c256:	6078      	str	r0, [r7, #4]
    c258:	687a      	ldr	r2, [r7, #4]
    c25a:	4b0a      	ldr	r3, [pc, #40]	(c284 <_ZN17LimitSwitchSensorD0Ev+0x34>)
    c25c:	6013      	str	r3, [r2, #0]
{
}
    c25e:	687b      	ldr	r3, [r7, #4]
    c260:	4618      	mov	r0, r3
    c262:	f7f9 fbb7 	bl	59d4 <_ZN6SensorD2Ev>
    c266:	f04f 0301 	mov.w	r3, #1	; 0x1
    c26a:	b2db      	uxtb	r3, r3
    c26c:	2b00      	cmp	r3, #0
    c26e:	d002      	beq.n	c276 <_ZN17LimitSwitchSensorD0Ev+0x26>
    c270:	6878      	ldr	r0, [r7, #4]
    c272:	f002 f917 	bl	e4a4 <_ZdlPv>
    c276:	687b      	ldr	r3, [r7, #4]
    c278:	4618      	mov	r0, r3
    c27a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c27e:	46bd      	mov	sp, r7
    c280:	bd80      	pop	{r7, pc}
    c282:	46c0      	nop			(mov r8, r8)
    c284:	0001fb50 	.word	0x0001fb50

0000c288 <_ZN17LimitSwitchSensorD1Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c288:	b580      	push	{r7, lr}
    c28a:	b082      	sub	sp, #8
    c28c:	af00      	add	r7, sp, #0
    c28e:	6078      	str	r0, [r7, #4]
    c290:	687a      	ldr	r2, [r7, #4]
    c292:	4b0a      	ldr	r3, [pc, #40]	(c2bc <_ZN17LimitSwitchSensorD1Ev+0x34>)
    c294:	6013      	str	r3, [r2, #0]
{
}
    c296:	687b      	ldr	r3, [r7, #4]
    c298:	4618      	mov	r0, r3
    c29a:	f7f9 fb9b 	bl	59d4 <_ZN6SensorD2Ev>
    c29e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2a2:	b2db      	uxtb	r3, r3
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d002      	beq.n	c2ae <_ZN17LimitSwitchSensorD1Ev+0x26>
    c2a8:	6878      	ldr	r0, [r7, #4]
    c2aa:	f002 f8fb 	bl	e4a4 <_ZdlPv>
    c2ae:	687b      	ldr	r3, [r7, #4]
    c2b0:	4618      	mov	r0, r3
    c2b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c2b6:	46bd      	mov	sp, r7
    c2b8:	bd80      	pop	{r7, pc}
    c2ba:	46c0      	nop			(mov r8, r8)
    c2bc:	0001fb50 	.word	0x0001fb50

0000c2c0 <_ZN17LimitSwitchSensorD2Ev>:
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(group, &GPIO_InitStructure);
}

LimitSwitchSensor::~LimitSwitchSensor()
    c2c0:	b580      	push	{r7, lr}
    c2c2:	b082      	sub	sp, #8
    c2c4:	af00      	add	r7, sp, #0
    c2c6:	6078      	str	r0, [r7, #4]
    c2c8:	687a      	ldr	r2, [r7, #4]
    c2ca:	4b0a      	ldr	r3, [pc, #40]	(c2f4 <_ZN17LimitSwitchSensorD2Ev+0x34>)
    c2cc:	6013      	str	r3, [r2, #0]
{
}
    c2ce:	687b      	ldr	r3, [r7, #4]
    c2d0:	4618      	mov	r0, r3
    c2d2:	f7f9 fb7f 	bl	59d4 <_ZN6SensorD2Ev>
    c2d6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c2da:	b2db      	uxtb	r3, r3
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d002      	beq.n	c2e6 <_ZN17LimitSwitchSensorD2Ev+0x26>
    c2e0:	6878      	ldr	r0, [r7, #4]
    c2e2:	f002 f8df 	bl	e4a4 <_ZdlPv>
    c2e6:	687b      	ldr	r3, [r7, #4]
    c2e8:	4618      	mov	r0, r3
    c2ea:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c2ee:	46bd      	mov	sp, r7
    c2f0:	bd80      	pop	{r7, pc}
    c2f2:	46c0      	nop			(mov r8, r8)
    c2f4:	0001fb50 	.word	0x0001fb50

0000c2f8 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c2f8:	b580      	push	{r7, lr}
    c2fa:	b086      	sub	sp, #24
    c2fc:	af00      	add	r7, sp, #0
    c2fe:	60f8      	str	r0, [r7, #12]
    c300:	607b      	str	r3, [r7, #4]
    c302:	460b      	mov	r3, r1
    c304:	72fb      	strb	r3, [r7, #11]
    c306:	4613      	mov	r3, r2
    c308:	813b      	strh	r3, [r7, #8]
    c30a:	68fb      	ldr	r3, [r7, #12]
    c30c:	4618      	mov	r0, r3
    c30e:	f7f9 fb11 	bl	5934 <_ZN6SensorC2Ev>
    c312:	68fa      	ldr	r2, [r7, #12]
    c314:	4b13      	ldr	r3, [pc, #76]	(c364 <_ZN17LimitSwitchSensorC1ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c316:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c318:	68fa      	ldr	r2, [r7, #12]
    c31a:	7afb      	ldrb	r3, [r7, #11]
    c31c:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c31e:	68fa      	ldr	r2, [r7, #12]
    c320:	893b      	ldrh	r3, [r7, #8]
    c322:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c324:	68fa      	ldr	r2, [r7, #12]
    c326:	687b      	ldr	r3, [r7, #4]
    c328:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c32a:	68fa      	ldr	r2, [r7, #12]
    c32c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c330:	7313      	strb	r3, [r2, #12]
    output = false;
    c332:	68fa      	ldr	r2, [r7, #12]
    c334:	f04f 0300 	mov.w	r3, #0	; 0x0
    c338:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c33a:	893b      	ldrh	r3, [r7, #8]
    c33c:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c33e:	f04f 0304 	mov.w	r3, #4	; 0x4
    c342:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c344:	f04f 0303 	mov.w	r3, #3	; 0x3
    c348:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c34a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c34e:	6878      	ldr	r0, [r7, #4]
    c350:	4619      	mov	r1, r3
    c352:	f7f5 f9ad 	bl	16b0 <GPIO_Init>
}
    c356:	68fb      	ldr	r3, [r7, #12]
    c358:	4618      	mov	r0, r3
    c35a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c35e:	46bd      	mov	sp, r7
    c360:	bd80      	pop	{r7, pc}
    c362:	46c0      	nop			(mov r8, r8)
    c364:	0001fb50 	.word	0x0001fb50

0000c368 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef>:
#include "limitSwitchSensor.h"

#ifdef ROBOTHW
LimitSwitchSensor::LimitSwitchSensor(LimitSwitchSensor::LimitSwitchName name, uint16_t pin, GPIO_TypeDef* group)
    c368:	b580      	push	{r7, lr}
    c36a:	b086      	sub	sp, #24
    c36c:	af00      	add	r7, sp, #0
    c36e:	60f8      	str	r0, [r7, #12]
    c370:	607b      	str	r3, [r7, #4]
    c372:	460b      	mov	r3, r1
    c374:	72fb      	strb	r3, [r7, #11]
    c376:	4613      	mov	r3, r2
    c378:	813b      	strh	r3, [r7, #8]
    c37a:	68fb      	ldr	r3, [r7, #12]
    c37c:	4618      	mov	r0, r3
    c37e:	f7f9 fad9 	bl	5934 <_ZN6SensorC2Ev>
    c382:	68fa      	ldr	r2, [r7, #12]
    c384:	4b13      	ldr	r3, [pc, #76]	(c3d4 <_ZN17LimitSwitchSensorC2ENS_15LimitSwitchNameEtP12GPIO_TypeDef+0x6c>)
    c386:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    c388:	68fa      	ldr	r2, [r7, #12]
    c38a:	7afb      	ldrb	r3, [r7, #11]
    c38c:	7353      	strb	r3, [r2, #13]
    this->pin = pin;
    c38e:	68fa      	ldr	r2, [r7, #12]
    c390:	893b      	ldrh	r3, [r7, #8]
    c392:	8093      	strh	r3, [r2, #4]
    this->group = group;
    c394:	68fa      	ldr	r2, [r7, #12]
    c396:	687b      	ldr	r3, [r7, #4]
    c398:	6093      	str	r3, [r2, #8]
    counter = 0x0;
    c39a:	68fa      	ldr	r2, [r7, #12]
    c39c:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3a0:	7313      	strb	r3, [r2, #12]
    output = false;
    c3a2:	68fa      	ldr	r2, [r7, #12]
    c3a4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c3a8:	7393      	strb	r3, [r2, #14]

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin =  pin;
    c3aa:	893b      	ldrh	r3, [r7, #8]
    c3ac:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c3ae:	f04f 0304 	mov.w	r3, #4	; 0x4
    c3b2:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c3b4:	f04f 0303 	mov.w	r3, #3	; 0x3
    c3b8:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(group, &GPIO_InitStructure);
    c3ba:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c3be:	6878      	ldr	r0, [r7, #4]
    c3c0:	4619      	mov	r1, r3
    c3c2:	f7f5 f975 	bl	16b0 <GPIO_Init>
}
    c3c6:	68fb      	ldr	r3, [r7, #12]
    c3c8:	4618      	mov	r0, r3
    c3ca:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c3ce:	46bd      	mov	sp, r7
    c3d0:	bd80      	pop	{r7, pc}
    c3d2:	46c0      	nop			(mov r8, r8)
    c3d4:	0001fb50 	.word	0x0001fb50

0000c3d8 <_ZN10PWMHandler13setPulseWidthEt>:
{
    setPulseWidth(dutyCycle*timer->getPeriod());
}

// Change la taille de l’impulsion.
void PWMHandler::setPulseWidth(uint16_t pulseWidth)
    c3d8:	b580      	push	{r7, lr}
    c3da:	b084      	sub	sp, #16
    c3dc:	af00      	add	r7, sp, #0
    c3de:	6078      	str	r0, [r7, #4]
    c3e0:	460b      	mov	r3, r1
    c3e2:	807b      	strh	r3, [r7, #2]
{
    TIM_TypeDef* TIMx = timer->getTIMx();
    c3e4:	687b      	ldr	r3, [r7, #4]
    c3e6:	681b      	ldr	r3, [r3, #0]
    c3e8:	4618      	mov	r0, r3
    c3ea:	f000 fe65 	bl	d0b8 <_ZN5Timer7getTIMxEv>
    c3ee:	4603      	mov	r3, r0
    c3f0:	60fb      	str	r3, [r7, #12]
    if(OCx == 1)
    c3f2:	687b      	ldr	r3, [r7, #4]
    c3f4:	791b      	ldrb	r3, [r3, #4]
    c3f6:	2b01      	cmp	r3, #1
    c3f8:	d103      	bne.n	c402 <_ZN10PWMHandler13setPulseWidthEt+0x2a>
        TIMx->CCR1 = pulseWidth;
    c3fa:	68fa      	ldr	r2, [r7, #12]
    c3fc:	887b      	ldrh	r3, [r7, #2]
    c3fe:	8693      	strh	r3, [r2, #52]
    c400:	e017      	b.n	c432 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 2)
    c402:	687b      	ldr	r3, [r7, #4]
    c404:	791b      	ldrb	r3, [r3, #4]
    c406:	2b02      	cmp	r3, #2
    c408:	d103      	bne.n	c412 <_ZN10PWMHandler13setPulseWidthEt+0x3a>
        TIMx->CCR2 = pulseWidth;
    c40a:	68fa      	ldr	r2, [r7, #12]
    c40c:	887b      	ldrh	r3, [r7, #2]
    c40e:	8713      	strh	r3, [r2, #56]
    c410:	e00f      	b.n	c432 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 3)
    c412:	687b      	ldr	r3, [r7, #4]
    c414:	791b      	ldrb	r3, [r3, #4]
    c416:	2b03      	cmp	r3, #3
    c418:	d103      	bne.n	c422 <_ZN10PWMHandler13setPulseWidthEt+0x4a>
        TIMx->CCR3 = pulseWidth;
    c41a:	68fa      	ldr	r2, [r7, #12]
    c41c:	887b      	ldrh	r3, [r7, #2]
    c41e:	8793      	strh	r3, [r2, #60]
    c420:	e007      	b.n	c432 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
    else if(OCx == 4)
    c422:	687b      	ldr	r3, [r7, #4]
    c424:	791b      	ldrb	r3, [r3, #4]
    c426:	2b04      	cmp	r3, #4
    c428:	d103      	bne.n	c432 <_ZN10PWMHandler13setPulseWidthEt+0x5a>
        TIMx->CCR4 = pulseWidth;
    c42a:	68fa      	ldr	r2, [r7, #12]
    c42c:	887b      	ldrh	r3, [r7, #2]
    c42e:	f8a2 3040 	strh.w	r3, [r2, #64]
}
    c432:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c436:	46bd      	mov	sp, r7
    c438:	bd80      	pop	{r7, pc}
    c43a:	46c0      	nop			(mov r8, r8)

0000c43c <_ZN10PWMHandlerD1Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    c43c:	b580      	push	{r7, lr}
    c43e:	b082      	sub	sp, #8
    c440:	af00      	add	r7, sp, #0
    c442:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    c444:	6878      	ldr	r0, [r7, #4]
    c446:	f04f 0100 	mov.w	r1, #0	; 0x0
    c44a:	f7ff ffc5 	bl	c3d8 <_ZN10PWMHandler13setPulseWidthEt>
}
    c44e:	687b      	ldr	r3, [r7, #4]
    c450:	4618      	mov	r0, r3
    c452:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c456:	46bd      	mov	sp, r7
    c458:	bd80      	pop	{r7, pc}
    c45a:	46c0      	nop			(mov r8, r8)

0000c45c <_ZN10PWMHandlerD2Ev>:
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    TIM_Cmd(TIMx, ENABLE);
}

// Stoppe la génération de PWM et détruit le générateur de PWM
PWMHandler::~PWMHandler()
    c45c:	b580      	push	{r7, lr}
    c45e:	b082      	sub	sp, #8
    c460:	af00      	add	r7, sp, #0
    c462:	6078      	str	r0, [r7, #4]
{
    setPulseWidth(0);
    c464:	6878      	ldr	r0, [r7, #4]
    c466:	f04f 0100 	mov.w	r1, #0	; 0x0
    c46a:	f7ff ffb5 	bl	c3d8 <_ZN10PWMHandler13setPulseWidthEt>
}
    c46e:	687b      	ldr	r3, [r7, #4]
    c470:	4618      	mov	r0, r3
    c472:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c476:	46bd      	mov	sp, r7
    c478:	bd80      	pop	{r7, pc}
    c47a:	46c0      	nop			(mov r8, r8)

0000c47c <_ZN10PWMHandler12setDutyCycleEf>:

//Change le rapport cyclique
void PWMHandler::setDutyCycle(float dutyCycle)
    c47c:	b580      	push	{r7, lr}
    c47e:	b082      	sub	sp, #8
    c480:	af00      	add	r7, sp, #0
    c482:	6078      	str	r0, [r7, #4]
    c484:	6039      	str	r1, [r7, #0]
{
    setPulseWidth(dutyCycle*timer->getPeriod());
    c486:	687b      	ldr	r3, [r7, #4]
    c488:	681b      	ldr	r3, [r3, #0]
    c48a:	4618      	mov	r0, r3
    c48c:	f000 fe20 	bl	d0d0 <_ZN5Timer9getPeriodEv>
    c490:	4603      	mov	r3, r0
    c492:	4618      	mov	r0, r3
    c494:	f00c fba0 	bl	18bd8 <__aeabi_i2f>
    c498:	4603      	mov	r3, r0
    c49a:	4618      	mov	r0, r3
    c49c:	6839      	ldr	r1, [r7, #0]
    c49e:	f00c fbef 	bl	18c80 <__aeabi_fmul>
    c4a2:	4603      	mov	r3, r0
    c4a4:	4618      	mov	r0, r3
    c4a6:	f00c fdd5 	bl	19054 <__aeabi_f2uiz>
    c4aa:	4603      	mov	r3, r0
    c4ac:	b29b      	uxth	r3, r3
    c4ae:	6878      	ldr	r0, [r7, #4]
    c4b0:	4619      	mov	r1, r3
    c4b2:	f7ff ff91 	bl	c3d8 <_ZN10PWMHandler13setPulseWidthEt>
}
    c4b6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c4ba:	46bd      	mov	sp, r7
    c4bc:	bd80      	pop	{r7, pc}
    c4be:	46c0      	nop			(mov r8, r8)

0000c4c0 <_ZN10PWMHandlerC1EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    c4c0:	b580      	push	{r7, lr}
    c4c2:	b08a      	sub	sp, #40
    c4c4:	af00      	add	r7, sp, #0
    c4c6:	60f8      	str	r0, [r7, #12]
    c4c8:	60b9      	str	r1, [r7, #8]
    c4ca:	4613      	mov	r3, r2
    c4cc:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    c4ce:	68fa      	ldr	r2, [r7, #12]
    c4d0:	68bb      	ldr	r3, [r7, #8]
    c4d2:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    c4d4:	68fa      	ldr	r2, [r7, #12]
    c4d6:	79fb      	ldrb	r3, [r7, #7]
    c4d8:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    c4da:	f04f 0360 	mov.w	r3, #96	; 0x60
    c4de:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    c4e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    c4e4:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    c4e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4ea:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    c4ec:	f04f 0300 	mov.w	r3, #0	; 0x0
    c4f0:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    c4f2:	68b8      	ldr	r0, [r7, #8]
    c4f4:	f000 fde0 	bl	d0b8 <_ZN5Timer7getTIMxEv>
    c4f8:	4603      	mov	r3, r0
    c4fa:	627b      	str	r3, [r7, #36]

    switch(OCx)
    c4fc:	79fb      	ldrb	r3, [r7, #7]
    c4fe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c502:	2b03      	cmp	r3, #3
    c504:	d839      	bhi.n	c57a <_ZN10PWMHandlerC1EP5Timerh+0xba>
    c506:	a201      	add	r2, pc, #4	(adr r2, c50c <_ZN10PWMHandlerC1EP5Timerh+0x4c>)
    c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c50c:	0000c51d 	.word	0x0000c51d
    c510:	0000c535 	.word	0x0000c535
    c514:	0000c54d 	.word	0x0000c54d
    c518:	0000c565 	.word	0x0000c565
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    c51c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c520:	6a78      	ldr	r0, [r7, #36]
    c522:	4619      	mov	r1, r3
    c524:	f7f6 f9c4 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c528:	6a78      	ldr	r0, [r7, #36]
    c52a:	f04f 0108 	mov.w	r1, #8	; 0x8
    c52e:	f7f7 f8d9 	bl	36e4 <TIM_OC1PreloadConfig>
    c532:	e022      	b.n	c57a <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    c534:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c538:	6a78      	ldr	r0, [r7, #36]
    c53a:	4619      	mov	r1, r3
    c53c:	f7f6 fa46 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c540:	6a78      	ldr	r0, [r7, #36]
    c542:	f04f 0108 	mov.w	r1, #8	; 0x8
    c546:	f7f7 f8eb 	bl	3720 <TIM_OC2PreloadConfig>
    c54a:	e016      	b.n	c57a <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    c54c:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c550:	6a78      	ldr	r0, [r7, #36]
    c552:	4619      	mov	r1, r3
    c554:	f7f6 fadc 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c558:	6a78      	ldr	r0, [r7, #36]
    c55a:	f04f 0108 	mov.w	r1, #8	; 0x8
    c55e:	f7f7 f8ff 	bl	3760 <TIM_OC3PreloadConfig>
    c562:	e00a      	b.n	c57a <_ZN10PWMHandlerC1EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    c564:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c568:	6a78      	ldr	r0, [r7, #36]
    c56a:	4619      	mov	r1, r3
    c56c:	f7f6 fb70 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c570:	6a78      	ldr	r0, [r7, #36]
    c572:	f04f 0108 	mov.w	r1, #8	; 0x8
    c576:	f7f7 f911 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    c57a:	6a78      	ldr	r0, [r7, #36]
    c57c:	f04f 0101 	mov.w	r1, #1	; 0x1
    c580:	f7f7 f818 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    c584:	6a78      	ldr	r0, [r7, #36]
    c586:	f04f 0101 	mov.w	r1, #1	; 0x1
    c58a:	f7f6 fd4d 	bl	3028 <TIM_Cmd>
}
    c58e:	68fb      	ldr	r3, [r7, #12]
    c590:	4618      	mov	r0, r3
    c592:	f107 0728 	add.w	r7, r7, #40	; 0x28
    c596:	46bd      	mov	sp, r7
    c598:	bd80      	pop	{r7, pc}
    c59a:	46c0      	nop			(mov r8, r8)

0000c59c <_ZN10PWMHandlerC2EP5Timerh>:
#include "pwmHandler.h"

// Initialise un nouveau générateur de PWM sur la sortie OCx du timer TIMx.
PWMHandler::PWMHandler(Timer* tim, unsigned char OCx)
    c59c:	b580      	push	{r7, lr}
    c59e:	b08a      	sub	sp, #40
    c5a0:	af00      	add	r7, sp, #0
    c5a2:	60f8      	str	r0, [r7, #12]
    c5a4:	60b9      	str	r1, [r7, #8]
    c5a6:	4613      	mov	r3, r2
    c5a8:	71fb      	strb	r3, [r7, #7]
{
    timer = tim;
    c5aa:	68fa      	ldr	r2, [r7, #12]
    c5ac:	68bb      	ldr	r3, [r7, #8]
    c5ae:	6013      	str	r3, [r2, #0]
    this->OCx = OCx;
    c5b0:	68fa      	ldr	r2, [r7, #12]
    c5b2:	79fb      	ldrb	r3, [r7, #7]
    c5b4:	7113      	strb	r3, [r2, #4]
    TIM_OCInitTypeDef timOCInit;
    timOCInit.TIM_OCMode = TIM_OCMode_PWM1; //TIM_OCMode_PWM2;
    c5b6:	f04f 0360 	mov.w	r3, #96	; 0x60
    c5ba:	82bb      	strh	r3, [r7, #20]
    timOCInit.TIM_OutputState = TIM_OutputState_Enable;
    c5bc:	f04f 0301 	mov.w	r3, #1	; 0x1
    c5c0:	82fb      	strh	r3, [r7, #22]
    timOCInit.TIM_Pulse = 0; // rapport cyclique
    c5c2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5c6:	837b      	strh	r3, [r7, #26]
    timOCInit.TIM_OCPolarity = TIM_OCPolarity_High;
    c5c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    c5cc:	83bb      	strh	r3, [r7, #28]

    TIM_TypeDef* TIMx = tim->getTIMx();
    c5ce:	68b8      	ldr	r0, [r7, #8]
    c5d0:	f000 fd72 	bl	d0b8 <_ZN5Timer7getTIMxEv>
    c5d4:	4603      	mov	r3, r0
    c5d6:	627b      	str	r3, [r7, #36]

    switch(OCx)
    c5d8:	79fb      	ldrb	r3, [r7, #7]
    c5da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    c5de:	2b03      	cmp	r3, #3
    c5e0:	d839      	bhi.n	c656 <_ZN10PWMHandlerC2EP5Timerh+0xba>
    c5e2:	a201      	add	r2, pc, #4	(adr r2, c5e8 <_ZN10PWMHandlerC2EP5Timerh+0x4c>)
    c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c5e8:	0000c5f9 	.word	0x0000c5f9
    c5ec:	0000c611 	.word	0x0000c611
    c5f0:	0000c629 	.word	0x0000c629
    c5f4:	0000c641 	.word	0x0000c641
    {
        case 1:
            TIM_OC1Init(TIMx, &timOCInit);
    c5f8:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c5fc:	6a78      	ldr	r0, [r7, #36]
    c5fe:	4619      	mov	r1, r3
    c600:	f7f6 f956 	bl	28b0 <TIM_OC1Init>
            TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c604:	6a78      	ldr	r0, [r7, #36]
    c606:	f04f 0108 	mov.w	r1, #8	; 0x8
    c60a:	f7f7 f86b 	bl	36e4 <TIM_OC1PreloadConfig>
    c60e:	e022      	b.n	c656 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 2:
            TIM_OC2Init(TIMx, &timOCInit);
    c610:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c614:	6a78      	ldr	r0, [r7, #36]
    c616:	4619      	mov	r1, r3
    c618:	f7f6 f9d8 	bl	29cc <TIM_OC2Init>
            TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c61c:	6a78      	ldr	r0, [r7, #36]
    c61e:	f04f 0108 	mov.w	r1, #8	; 0x8
    c622:	f7f7 f87d 	bl	3720 <TIM_OC2PreloadConfig>
    c626:	e016      	b.n	c656 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 3:
            TIM_OC3Init(TIMx, &timOCInit);
    c628:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c62c:	6a78      	ldr	r0, [r7, #36]
    c62e:	4619      	mov	r1, r3
    c630:	f7f6 fa6e 	bl	2b10 <TIM_OC3Init>
            TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c634:	6a78      	ldr	r0, [r7, #36]
    c636:	f04f 0108 	mov.w	r1, #8	; 0x8
    c63a:	f7f7 f891 	bl	3760 <TIM_OC3PreloadConfig>
    c63e:	e00a      	b.n	c656 <_ZN10PWMHandlerC2EP5Timerh+0xba>
            break;
        case 4:
            TIM_OC4Init(TIMx, &timOCInit);
    c640:	f107 0314 	add.w	r3, r7, #20	; 0x14
    c644:	6a78      	ldr	r0, [r7, #36]
    c646:	4619      	mov	r1, r3
    c648:	f7f6 fb02 	bl	2c50 <TIM_OC4Init>
            TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
    c64c:	6a78      	ldr	r0, [r7, #36]
    c64e:	f04f 0108 	mov.w	r1, #8	; 0x8
    c652:	f7f7 f8a3 	bl	379c <TIM_OC4PreloadConfig>
            break;
    }
    TIM_ARRPreloadConfig(TIMx, ENABLE);
    c656:	6a78      	ldr	r0, [r7, #36]
    c658:	f04f 0101 	mov.w	r1, #1	; 0x1
    c65c:	f7f6 ffaa 	bl	35b4 <TIM_ARRPreloadConfig>
    TIM_Cmd(TIMx, ENABLE);
    c660:	6a78      	ldr	r0, [r7, #36]
    c662:	f04f 0101 	mov.w	r1, #1	; 0x1
    c666:	f7f6 fcdf 	bl	3028 <TIM_Cmd>
}
    c66a:	68fb      	ldr	r3, [r7, #12]
    c66c:	4618      	mov	r0, r3
    c66e:	f107 0728 	add.w	r7, r7, #40	; 0x28
    c672:	46bd      	mov	sp, r7
    c674:	bd80      	pop	{r7, pc}
    c676:	46c0      	nop			(mov r8, r8)

0000c678 <_ZN22QuadratureCoderHandler12getTickValueEv>:

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
}

int16_t QuadratureCoderHandler::getTickValue()
    c678:	b580      	push	{r7, lr}
    c67a:	b084      	sub	sp, #16
    c67c:	af00      	add	r7, sp, #0
    c67e:	6078      	str	r0, [r7, #4]
{
    // On enregistre le nbr de tick depuis la dernière remise à zero
    int16_t tick = TIM_GetCounter(coder_tim_port);
    c680:	687b      	ldr	r3, [r7, #4]
    c682:	681b      	ldr	r3, [r3, #0]
    c684:	4618      	mov	r0, r3
    c686:	f7f7 fd7b 	bl	4180 <TIM_GetCounter>
    c68a:	4603      	mov	r3, r0
    c68c:	81fb      	strh	r3, [r7, #14]

    // On remet à zero
    TIM_SetCounter(coder_tim_port, 0);
    c68e:	687b      	ldr	r3, [r7, #4]
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	4618      	mov	r0, r3
    c694:	f04f 0100 	mov.w	r1, #0	; 0x0
    c698:	f7f7 fc38 	bl	3f0c <TIM_SetCounter>

    // On retourne ces ticks
    return tick;
    c69c:	89fb      	ldrh	r3, [r7, #14]
    c69e:	b21b      	sxth	r3, r3
}
    c6a0:	4618      	mov	r0, r3
    c6a2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c6a6:	46bd      	mov	sp, r7
    c6a8:	bd80      	pop	{r7, pc}
    c6aa:	46c0      	nop			(mov r8, r8)

0000c6ac <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    c6ac:	b580      	push	{r7, lr}
    c6ae:	b088      	sub	sp, #32
    c6b0:	af00      	add	r7, sp, #0
    c6b2:	60f8      	str	r0, [r7, #12]
    c6b4:	60b9      	str	r1, [r7, #8]
    c6b6:	607a      	str	r2, [r7, #4]
    c6b8:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    c6ba:	68fa      	ldr	r2, [r7, #12]
    c6bc:	68bb      	ldr	r3, [r7, #8]
    c6be:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    c6c0:	68b8      	ldr	r0, [r7, #8]
    c6c2:	f000 fd11 	bl	d0e8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c6c6:	f04f 0348 	mov.w	r3, #72	; 0x48
    c6ca:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c6cc:	f04f 0301 	mov.w	r3, #1	; 0x1
    c6d0:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    c6d2:	887b      	ldrh	r3, [r7, #2]
    c6d4:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    c6d6:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c6da:	6878      	ldr	r0, [r7, #4]
    c6dc:	4619      	mov	r1, r3
    c6de:	f7f4 ffe7 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c6e2:	f04f 0348 	mov.w	r3, #72	; 0x48
    c6e6:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c6e8:	f04f 0301 	mov.w	r3, #1	; 0x1
    c6ec:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    c6ee:	8dbb      	ldrh	r3, [r7, #44]
    c6f0:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    c6f2:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c6f6:	6ab8      	ldr	r0, [r7, #40]
    c6f8:	4619      	mov	r1, r3
    c6fa:	f7f4 ffd9 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    c6fe:	f04f 0300 	mov.w	r3, #0	; 0x0
    c702:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    c704:	f04f 0300 	mov.w	r3, #0	; 0x0
    c708:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    c70a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c70e:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    c710:	f04f 0300 	mov.w	r3, #0	; 0x0
    c714:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    c716:	f04f 0300 	mov.w	r3, #0	; 0x0
    c71a:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    c71c:	68fb      	ldr	r3, [r7, #12]
    c71e:	681b      	ldr	r3, [r3, #0]
    c720:	f107 0216 	add.w	r2, r7, #22	; 0x16
    c724:	4618      	mov	r0, r3
    c726:	4611      	mov	r1, r2
    c728:	f7f6 f886 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    c72c:	68fb      	ldr	r3, [r7, #12]
    c72e:	681b      	ldr	r3, [r3, #0]
    c730:	4618      	mov	r0, r3
    c732:	f04f 0103 	mov.w	r1, #3	; 0x3
    c736:	f04f 0200 	mov.w	r2, #0	; 0x0
    c73a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c73e:	f7f6 fe6d 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    c742:	68fb      	ldr	r3, [r7, #12]
    c744:	681b      	ldr	r3, [r3, #0]
    c746:	4618      	mov	r0, r3
    c748:	f04f 0101 	mov.w	r1, #1	; 0x1
    c74c:	f7f6 fc6c 	bl	3028 <TIM_Cmd>
}
    c750:	68fb      	ldr	r3, [r7, #12]
    c752:	4618      	mov	r0, r3
    c754:	f107 0720 	add.w	r7, r7, #32	; 0x20
    c758:	46bd      	mov	sp, r7
    c75a:	bd80      	pop	{r7, pc}

0000c75c <_ZN22QuadratureCoderHandlerC2EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>:
#include "timerHandler.h"

// GPIO_ch1 et pin_Ch1 : pour la pin du channel 1 du timer
// GPIO_ch2 et pin_Ch2 : pour la pin du channel 2 du timer
QuadratureCoderHandler::QuadratureCoderHandler(TIM_TypeDef* TIMx, GPIO_TypeDef* GPIO_ch1, uint16_t pin_Ch1, GPIO_TypeDef* GPIO_ch2,
                                               uint16_t pin_Ch2, uint8_t TIMx_AF, uint8_t pinSource_Ch1, uint8_t pinSource_Ch2)
    c75c:	b580      	push	{r7, lr}
    c75e:	b088      	sub	sp, #32
    c760:	af00      	add	r7, sp, #0
    c762:	60f8      	str	r0, [r7, #12]
    c764:	60b9      	str	r1, [r7, #8]
    c766:	607a      	str	r2, [r7, #4]
    c768:	807b      	strh	r3, [r7, #2]
{
    this->coder_tim_port = TIMx;
    c76a:	68fa      	ldr	r2, [r7, #12]
    c76c:	68bb      	ldr	r3, [r7, #8]
    c76e:	6013      	str	r3, [r2, #0]

    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    // Enable timer clock
    Timer::enableTimerClock(TIMx);
    c770:	68b8      	ldr	r0, [r7, #8]
    c772:	f000 fcb9 	bl	d0e8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c776:	f04f 0348 	mov.w	r3, #72	; 0x48
    c77a:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c77c:	f04f 0301 	mov.w	r3, #1	; 0x1
    c780:	753b      	strb	r3, [r7, #20]
    #endif

    GPIO_InitStructure.GPIO_Pin     = pin_Ch1;
    c782:	887b      	ldrh	r3, [r7, #2]
    c784:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch1, &GPIO_InitStructure);
    c786:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c78a:	6878      	ldr	r0, [r7, #4]
    c78c:	4619      	mov	r1, r3
    c78e:	f7f4 ff8f 	bl	16b0 <GPIO_Init>
    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_25MHz;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_IPU;
    c792:	f04f 0348 	mov.w	r3, #72	; 0x48
    c796:	757b      	strb	r3, [r7, #21]
        GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_10MHz;
    c798:	f04f 0301 	mov.w	r3, #1	; 0x1
    c79c:	753b      	strb	r3, [r7, #20]
    #endif
    GPIO_InitStructure.GPIO_Pin     = pin_Ch2;
    c79e:	8dbb      	ldrh	r3, [r7, #44]
    c7a0:	827b      	strh	r3, [r7, #18]
    GPIO_Init(GPIO_ch2, &GPIO_InitStructure);
    c7a2:	f107 0312 	add.w	r3, r7, #18	; 0x12
    c7a6:	6ab8      	ldr	r0, [r7, #40]
    c7a8:	4619      	mov	r1, r3
    c7aa:	f7f4 ff81 	bl	16b0 <GPIO_Init>

    // Time Base configuration
    TIM_TimeBaseStructure.TIM_Prescaler     = 0;
    c7ae:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7b2:	82fb      	strh	r3, [r7, #22]
    TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;
    c7b4:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7b8:	833b      	strh	r3, [r7, #24]
    TIM_TimeBaseStructure.TIM_Period        = 0xFFFF;
    c7ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c7be:	837b      	strh	r3, [r7, #26]
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    c7c0:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7c4:	83bb      	strh	r3, [r7, #28]
    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    c7c6:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7ca:	77bb      	strb	r3, [r7, #30]
    TIM_TimeBaseInit(coder_tim_port, &TIM_TimeBaseStructure);
    c7cc:	68fb      	ldr	r3, [r7, #12]
    c7ce:	681b      	ldr	r3, [r3, #0]
    c7d0:	f107 0216 	add.w	r2, r7, #22	; 0x16
    c7d4:	4618      	mov	r0, r3
    c7d6:	4611      	mov	r1, r2
    c7d8:	f7f6 f82e 	bl	2838 <TIM_TimeBaseInit>

    // Encoder Interface Configuration
    TIM_EncoderInterfaceConfig(coder_tim_port,
                               TIM_EncoderMode_TI12,
                               TIM_ICPolarity_Rising,
                               TIM_ICPolarity_Rising);
    c7dc:	68fb      	ldr	r3, [r7, #12]
    c7de:	681b      	ldr	r3, [r3, #0]
    c7e0:	4618      	mov	r0, r3
    c7e2:	f04f 0103 	mov.w	r1, #3	; 0x3
    c7e6:	f04f 0200 	mov.w	r2, #0	; 0x0
    c7ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    c7ee:	f7f6 fe15 	bl	341c <TIM_EncoderInterfaceConfig>

    // Met à disposition le timer
    TIM_Cmd(coder_tim_port, ENABLE);
    c7f2:	68fb      	ldr	r3, [r7, #12]
    c7f4:	681b      	ldr	r3, [r3, #0]
    c7f6:	4618      	mov	r0, r3
    c7f8:	f04f 0101 	mov.w	r1, #1	; 0x1
    c7fc:	f7f6 fc14 	bl	3028 <TIM_Cmd>
}
    c800:	68fb      	ldr	r3, [r7, #12]
    c802:	4618      	mov	r0, r3
    c804:	f107 0720 	add.w	r7, r7, #32	; 0x20
    c808:	46bd      	mov	sp, r7
    c80a:	bd80      	pop	{r7, pc}
    c80c:	0000      	lsls	r0, r0, #0
	...

0000c810 <_ZN6Remote13dataAvailableEv>:
    }
    for(int i=0; i<10; i++)
        Remote::getSingleton()->sendData(' ');
}

bool Remote::dataAvailable()
    c810:	b480      	push	{r7}
    c812:	b083      	sub	sp, #12
    c814:	af00      	add	r7, sp, #0
    c816:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    return REMOTE_USART_INDEX->SR & USART_FLAG_RXNE;
    c818:	4b07      	ldr	r3, [pc, #28]	(c838 <_ZN6Remote13dataAvailableEv+0x28>)
    c81a:	881b      	ldrh	r3, [r3, #0]
    c81c:	b29b      	uxth	r3, r3
    c81e:	f003 0320 	and.w	r3, r3, #32	; 0x20
    c822:	2b00      	cmp	r3, #0
    c824:	bf0c      	ite	eq
    c826:	2300      	moveq	r3, #0
    c828:	2301      	movne	r3, #1
    c82a:	b2db      	uxtb	r3, r3
#else
    return false;
#endif
}
    c82c:	4618      	mov	r0, r3
    c82e:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c832:	46bd      	mov	sp, r7
    c834:	bc80      	pop	{r7}
    c836:	4770      	bx	lr
    c838:	40013800 	.word	0x40013800

0000c83c <_ZN6Remote11receiveDataEv>:

int Remote::receiveData()
    c83c:	b480      	push	{r7}
    c83e:	b083      	sub	sp, #12
    c840:	af00      	add	r7, sp, #0
    c842:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    while (!(REMOTE_USART_INDEX->SR & USART_FLAG_RXNE));
    c844:	4b0c      	ldr	r3, [pc, #48]	(c878 <_ZN6Remote11receiveDataEv+0x3c>)
    c846:	881b      	ldrh	r3, [r3, #0]
    c848:	b29b      	uxth	r3, r3
    c84a:	f003 0320 	and.w	r3, r3, #32	; 0x20
    c84e:	2b00      	cmp	r3, #0
    c850:	bf14      	ite	ne
    c852:	2300      	movne	r3, #0
    c854:	2301      	moveq	r3, #1
    c856:	b2db      	uxtb	r3, r3
    c858:	2b00      	cmp	r3, #0
    c85a:	d1f3      	bne.n	c844 <_ZN6Remote11receiveDataEv+0x8>

    return ((int)(REMOTE_USART_INDEX->DR & 0x1FF));
    c85c:	4b06      	ldr	r3, [pc, #24]	(c878 <_ZN6Remote11receiveDataEv+0x3c>)
    c85e:	889b      	ldrh	r3, [r3, #4]
    c860:	b29b      	uxth	r3, r3
    c862:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    c866:	ea4f 53d3 	mov.w	r3, r3, lsr #23
#else
    return 0;
#endif
}
    c86a:	4618      	mov	r0, r3
    c86c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c870:	46bd      	mov	sp, r7
    c872:	bc80      	pop	{r7}
    c874:	4770      	bx	lr
    c876:	46c0      	nop			(mov r8, r8)
    c878:	40013800 	.word	0x40013800

0000c87c <_ZN6Remote12isRemoteModeEv>:
        if (order>=51 and order<=101)
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    }
}

bool Remote::isRemoteMode()
    c87c:	b480      	push	{r7}
    c87e:	b083      	sub	sp, #12
    c880:	af00      	add	r7, sp, #0
    c882:	6078      	str	r0, [r7, #4]
{
    return remoteMode;
    c884:	687b      	ldr	r3, [r7, #4]
    c886:	791b      	ldrb	r3, [r3, #4]
}
    c888:	4618      	mov	r0, r3
    c88a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c88e:	46bd      	mov	sp, r7
    c890:	bc80      	pop	{r7}
    c892:	4770      	bx	lr

0000c894 <_ZN6Remote10getLeftPWMEv>:

float Remote::getLeftPWM()
    c894:	b480      	push	{r7}
    c896:	b083      	sub	sp, #12
    c898:	af00      	add	r7, sp, #0
    c89a:	6078      	str	r0, [r7, #4]
{
    return linSpeed;
    c89c:	687b      	ldr	r3, [r7, #4]
    c89e:	68db      	ldr	r3, [r3, #12]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed + angSpeed;
#else
    return linSpeed - angSpeed;
#endif
}
    c8a0:	4618      	mov	r0, r3
    c8a2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c8a6:	46bd      	mov	sp, r7
    c8a8:	bc80      	pop	{r7}
    c8aa:	4770      	bx	lr

0000c8ac <_ZN6Remote11getRightPWMEv>:

float Remote::getRightPWM()
    c8ac:	b480      	push	{r7}
    c8ae:	b083      	sub	sp, #12
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	6078      	str	r0, [r7, #4]
{
    return angSpeed;
    c8b4:	687b      	ldr	r3, [r7, #4]
    c8b6:	691b      	ldr	r3, [r3, #16]
#if defined(STM32F40_41xxx) || defined(STM32F10X_MD)
    return linSpeed - angSpeed;
#else
    return linSpeed + angSpeed;
#endif
}
    c8b8:	4618      	mov	r0, r3
    c8ba:	f107 070c 	add.w	r7, r7, #12	; 0xc
    c8be:	46bd      	mov	sp, r7
    c8c0:	bc80      	pop	{r7}
    c8c2:	4770      	bx	lr

0000c8c4 <_ZN6Remote8sendDataEi>:

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
#endif
}

void Remote::sendData(int data)
    c8c4:	b580      	push	{r7, lr}
    c8c6:	b082      	sub	sp, #8
    c8c8:	af00      	add	r7, sp, #0
    c8ca:	6078      	str	r0, [r7, #4]
    c8cc:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(REMOTE_USART_INDEX, USART_FLAG_TXE) == RESET);
    c8ce:	480b      	ldr	r0, [pc, #44]	(c8fc <_ZN6Remote8sendDataEi+0x38>)
    c8d0:	f04f 0180 	mov.w	r1, #128	; 0x80
    c8d4:	f7f8 fa4a 	bl	4d6c <USART_GetFlagStatus>
    c8d8:	4603      	mov	r3, r0
    c8da:	2b00      	cmp	r3, #0
    c8dc:	bf14      	ite	ne
    c8de:	2300      	movne	r3, #0
    c8e0:	2301      	moveq	r3, #1
    c8e2:	b2db      	uxtb	r3, r3
    c8e4:	2b00      	cmp	r3, #0
    c8e6:	d1f2      	bne.n	c8ce <_ZN6Remote8sendDataEi+0xa>
    USART_SendData(REMOTE_USART_INDEX, (u16) data);
    c8e8:	683b      	ldr	r3, [r7, #0]
    c8ea:	b29b      	uxth	r3, r3
    c8ec:	4803      	ldr	r0, [pc, #12]	(c8fc <_ZN6Remote8sendDataEi+0x38>)
    c8ee:	4619      	mov	r1, r3
    c8f0:	f7f8 f908 	bl	4b04 <USART_SendData>
#endif
}
    c8f4:	f107 0708 	add.w	r7, r7, #8	; 0x8
    c8f8:	46bd      	mov	sp, r7
    c8fa:	bd80      	pop	{r7, pc}
    c8fc:	40013800 	.word	0x40013800

0000c900 <_ZN6Remote8initUARTEi>:

#endif

}

void Remote::initUART(int baudRate)
    c900:	b580      	push	{r7, lr}
    c902:	b086      	sub	sp, #24
    c904:	af00      	add	r7, sp, #0
    c906:	6078      	str	r0, [r7, #4]
    c908:	6039      	str	r1, [r7, #0]
{
#ifdef ROBOTHW
    USART_InitTypeDef USART_InitStructure;

    USART_InitStructure.USART_BaudRate = baudRate;
    c90a:	683b      	ldr	r3, [r7, #0]
    c90c:	60bb      	str	r3, [r7, #8]

    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    c90e:	f04f 0300 	mov.w	r3, #0	; 0x0
    c912:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    c914:	f04f 0300 	mov.w	r3, #0	; 0x0
    c918:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    c91a:	f04f 0300 	mov.w	r3, #0	; 0x0
    c91e:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    c920:	f04f 0300 	mov.w	r3, #0	; 0x0
    c924:	82bb      	strh	r3, [r7, #20]

    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    c926:	f04f 030c 	mov.w	r3, #12	; 0xc
    c92a:	827b      	strh	r3, [r7, #18]

    USART_Init(REMOTE_USART_INDEX, &USART_InitStructure);
    c92c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    c930:	4806      	ldr	r0, [pc, #24]	(c94c <_ZN6Remote8initUARTEi+0x4c>)
    c932:	4619      	mov	r1, r3
    c934:	f7f7 fe74 	bl	4620 <USART_Init>

    USART_Cmd(REMOTE_USART_INDEX, ENABLE);
    c938:	4804      	ldr	r0, [pc, #16]	(c94c <_ZN6Remote8initUARTEi+0x4c>)
    c93a:	f04f 0101 	mov.w	r1, #1	; 0x1
    c93e:	f7f7 ff8f 	bl	4860 <USART_Cmd>
#endif
}
    c942:	f107 0718 	add.w	r7, r7, #24	; 0x18
    c946:	46bd      	mov	sp, r7
    c948:	bd80      	pop	{r7, pc}
    c94a:	46c0      	nop			(mov r8, r8)
    c94c:	40013800 	.word	0x40013800

0000c950 <_ZN6Remote22initClocksAndPortsGPIOEv>:

    linSpeed = 0.;
    angSpeed = 0.;
}

void Remote::initClocksAndPortsGPIO()
    c950:	b580      	push	{r7, lr}
    c952:	b084      	sub	sp, #16
    c954:	af00      	add	r7, sp, #0
    c956:	6078      	str	r0, [r7, #4]
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
//    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    //RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    c958:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c95c:	f04f 0101 	mov.w	r1, #1	; 0x1
    c960:	f7f5 fd72 	bl	2448 <RCC_APB2PeriphClockCmd>

    GPIO_PinRemapConfig(GPIO_Remap_USART1, ENABLE);
    c964:	f04f 0004 	mov.w	r0, #4	; 0x4
    c968:	f04f 0101 	mov.w	r1, #1	; 0x1
    c96c:	f7f5 f890 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
    // port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    c970:	f04f 0340 	mov.w	r3, #64	; 0x40
    c974:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    c976:	f04f 0318 	mov.w	r3, #24	; 0x18
    c97a:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    c97c:	f04f 0303 	mov.w	r3, #3	; 0x3
    c980:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    c982:	f107 030c 	add.w	r3, r7, #12	; 0xc
    c986:	480b      	ldr	r0, [pc, #44]	(c9b4 <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    c988:	4619      	mov	r1, r3
    c98a:	f7f4 fe91 	bl	16b0 <GPIO_Init>

    // port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    c98e:	f04f 0380 	mov.w	r3, #128	; 0x80
    c992:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    c994:	f04f 0304 	mov.w	r3, #4	; 0x4
    c998:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    c99a:	f04f 0303 	mov.w	r3, #3	; 0x3
    c99e:	73bb      	strb	r3, [r7, #14]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    c9a0:	f107 030c 	add.w	r3, r7, #12	; 0xc
    c9a4:	4803      	ldr	r0, [pc, #12]	(c9b4 <_ZN6Remote22initClocksAndPortsGPIOEv+0x64>)
    c9a6:	4619      	mov	r1, r3
    c9a8:	f7f4 fe82 	bl	16b0 <GPIO_Init>
    GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);*/     // Rx
#endif

#endif

}
    c9ac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    c9b0:	46bd      	mov	sp, r7
    c9b2:	bd80      	pop	{r7, pc}
    c9b4:	40010c00 	.word	0x40010c00

0000c9b8 <_ZN6RemoteC1Ev>:

    return singleton;
}


Remote::Remote()
    c9b8:	b580      	push	{r7, lr}
    c9ba:	b082      	sub	sp, #8
    c9bc:	af00      	add	r7, sp, #0
    c9be:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    c9c0:	6878      	ldr	r0, [r7, #4]
    c9c2:	f7ff ffc5 	bl	c950 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    c9c6:	6878      	ldr	r0, [r7, #4]
    c9c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    c9cc:	f7ff ff98 	bl	c900 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    c9d0:	687a      	ldr	r2, [r7, #4]
    c9d2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9d6:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    c9d8:	687a      	ldr	r2, [r7, #4]
    c9da:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9de:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    c9e0:	687a      	ldr	r2, [r7, #4]
    c9e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9e6:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    c9e8:	687a      	ldr	r2, [r7, #4]
    c9ea:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9ee:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    c9f0:	687a      	ldr	r2, [r7, #4]
    c9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c9f6:	6013      	str	r3, [r2, #0]

    brakInv = false;
    c9f8:	687a      	ldr	r2, [r7, #4]
    c9fa:	f04f 0300 	mov.w	r3, #0	; 0x0
    c9fe:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    ca00:	687a      	ldr	r2, [r7, #4]
    ca02:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca06:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    ca08:	687a      	ldr	r2, [r7, #4]
    ca0a:	4b05      	ldr	r3, [pc, #20]	(ca20 <_ZN6RemoteC1Ev+0x68>)
    ca0c:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    ca0e:	687a      	ldr	r2, [r7, #4]
    ca10:	4b03      	ldr	r3, [pc, #12]	(ca20 <_ZN6RemoteC1Ev+0x68>)
    ca12:	6113      	str	r3, [r2, #16]
}
    ca14:	687b      	ldr	r3, [r7, #4]
    ca16:	4618      	mov	r0, r3
    ca18:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca1c:	46bd      	mov	sp, r7
    ca1e:	bd80      	pop	{r7, pc}
    ca20:	00000000 	.word	0x00000000

0000ca24 <_ZN6RemoteC2Ev>:

    return singleton;
}


Remote::Remote()
    ca24:	b580      	push	{r7, lr}
    ca26:	b082      	sub	sp, #8
    ca28:	af00      	add	r7, sp, #0
    ca2a:	6078      	str	r0, [r7, #4]
{
#ifdef ROBOTHW
    initClocksAndPortsGPIO();
    ca2c:	6878      	ldr	r0, [r7, #4]
    ca2e:	f7ff ff8f 	bl	c950 <_ZN6Remote22initClocksAndPortsGPIOEv>
    initUART(USART_BAUDRATE);
    ca32:	6878      	ldr	r0, [r7, #4]
    ca34:	f44f 5116 	mov.w	r1, #9600	; 0x2580
    ca38:	f7ff ff62 	bl	c900 <_ZN6Remote8initUARTEi>
#endif

    remoteMode = false;
    ca3c:	687a      	ldr	r2, [r7, #4]
    ca3e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca42:	7113      	strb	r3, [r2, #4]

    isOpenContainer = false;
    ca44:	687a      	ldr	r2, [r7, #4]
    ca46:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca4a:	7153      	strb	r3, [r2, #5]
    isOpenLeftArm = false;
    ca4c:	687a      	ldr	r2, [r7, #4]
    ca4e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca52:	7193      	strb	r3, [r2, #6]
    isOpenRightArm = false;
    ca54:	687a      	ldr	r2, [r7, #4]
    ca56:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca5a:	71d3      	strb	r3, [r2, #7]
    timerLances = -1;
    ca5c:	687a      	ldr	r2, [r7, #4]
    ca5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ca62:	6013      	str	r3, [r2, #0]

    brakInv = false;
    ca64:	687a      	ldr	r2, [r7, #4]
    ca66:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca6a:	7213      	strb	r3, [r2, #8]
    brakOut = false;
    ca6c:	687a      	ldr	r2, [r7, #4]
    ca6e:	f04f 0300 	mov.w	r3, #0	; 0x0
    ca72:	7253      	strb	r3, [r2, #9]

    linSpeed = 0.;
    ca74:	687a      	ldr	r2, [r7, #4]
    ca76:	4b05      	ldr	r3, [pc, #20]	(ca8c <_ZN6RemoteC2Ev+0x68>)
    ca78:	60d3      	str	r3, [r2, #12]
    angSpeed = 0.;
    ca7a:	687a      	ldr	r2, [r7, #4]
    ca7c:	4b03      	ldr	r3, [pc, #12]	(ca8c <_ZN6RemoteC2Ev+0x68>)
    ca7e:	6113      	str	r3, [r2, #16]
}
    ca80:	687b      	ldr	r3, [r7, #4]
    ca82:	4618      	mov	r0, r3
    ca84:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ca88:	46bd      	mov	sp, r7
    ca8a:	bd80      	pop	{r7, pc}
    ca8c:	00000000 	.word	0x00000000

0000ca90 <_ZN6Remote12getSingletonEv>:
#include "brak.h"
#include "braslateral.h"

Remote* Remote::singleton = 0;

Remote* Remote::getSingleton()
    ca90:	b580      	push	{r7, lr}
    ca92:	b082      	sub	sp, #8
    ca94:	af00      	add	r7, sp, #0
{
    if (singleton==0)
    ca96:	4b0f      	ldr	r3, [pc, #60]	(cad4 <_ZN6Remote12getSingletonEv+0x44>)
    ca98:	681b      	ldr	r3, [r3, #0]
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d113      	bne.n	cac6 <_ZN6Remote12getSingletonEv+0x36>
        singleton = new Remote();
    ca9e:	f04f 0014 	mov.w	r0, #20	; 0x14
    caa2:	f001 fc59 	bl	e358 <_Znwj>
    caa6:	4603      	mov	r3, r0
    caa8:	603b      	str	r3, [r7, #0]
    caaa:	683a      	ldr	r2, [r7, #0]
    caac:	2a00      	cmp	r2, #0
    caae:	d005      	beq.n	cabc <_ZN6Remote12getSingletonEv+0x2c>
    cab0:	6838      	ldr	r0, [r7, #0]
    cab2:	f7ff ff81 	bl	c9b8 <_ZN6RemoteC1Ev>
    cab6:	683b      	ldr	r3, [r7, #0]
    cab8:	607b      	str	r3, [r7, #4]
    caba:	e001      	b.n	cac0 <_ZN6Remote12getSingletonEv+0x30>
    cabc:	683a      	ldr	r2, [r7, #0]
    cabe:	607a      	str	r2, [r7, #4]
    cac0:	4b04      	ldr	r3, [pc, #16]	(cad4 <_ZN6Remote12getSingletonEv+0x44>)
    cac2:	687a      	ldr	r2, [r7, #4]
    cac4:	601a      	str	r2, [r3, #0]

    return singleton;
    cac6:	4b03      	ldr	r3, [pc, #12]	(cad4 <_ZN6Remote12getSingletonEv+0x44>)
    cac8:	681b      	ldr	r3, [r3, #0]
}
    caca:	4618      	mov	r0, r3
    cacc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cad0:	46bd      	mov	sp, r7
    cad2:	bd80      	pop	{r7, pc}
    cad4:	20000580 	.word	0x20000580

0000cad8 <_ZN6Remote3logEPc>:
//        sendData(data[i]);

//    delete [] data;
//}

void Remote::log(char* msg)
    cad8:	b580      	push	{r7, lr}
    cada:	b084      	sub	sp, #16
    cadc:	af00      	add	r7, sp, #0
    cade:	6078      	str	r0, [r7, #4]
{
    int pos = 0;
    cae0:	f04f 0300 	mov.w	r3, #0	; 0x0
    cae4:	60bb      	str	r3, [r7, #8]
    cae6:	e00e      	b.n	cb06 <_ZN6Remote3logEPc+0x2e>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
    cae8:	f7ff ffd2 	bl	ca90 <_ZN6Remote12getSingletonEv>
    caec:	4601      	mov	r1, r0
    caee:	68ba      	ldr	r2, [r7, #8]
    caf0:	687b      	ldr	r3, [r7, #4]
    caf2:	4413      	add	r3, r2
    caf4:	781b      	ldrb	r3, [r3, #0]
    caf6:	4608      	mov	r0, r1
    caf8:	4619      	mov	r1, r3
    cafa:	f7ff fee3 	bl	c8c4 <_ZN6Remote8sendDataEi>
        pos++;
    cafe:	68bb      	ldr	r3, [r7, #8]
    cb00:	f103 0301 	add.w	r3, r3, #1	; 0x1
    cb04:	60bb      	str	r3, [r7, #8]
//}

void Remote::log(char* msg)
{
    int pos = 0;
    while(msg[pos] != '\0' )
    cb06:	68ba      	ldr	r2, [r7, #8]
    cb08:	687b      	ldr	r3, [r7, #4]
    cb0a:	4413      	add	r3, r2
    cb0c:	781b      	ldrb	r3, [r3, #0]
    cb0e:	2b00      	cmp	r3, #0
    cb10:	d1ea      	bne.n	cae8 <_ZN6Remote3logEPc+0x10>
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    cb12:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb16:	60fb      	str	r3, [r7, #12]
    cb18:	e00b      	b.n	cb32 <_ZN6Remote3logEPc+0x5a>
        Remote::getSingleton()->sendData(' ');
    cb1a:	f7ff ffb9 	bl	ca90 <_ZN6Remote12getSingletonEv>
    cb1e:	4603      	mov	r3, r0
    cb20:	4618      	mov	r0, r3
    cb22:	f04f 0120 	mov.w	r1, #32	; 0x20
    cb26:	f7ff fecd 	bl	c8c4 <_ZN6Remote8sendDataEi>
    while(msg[pos] != '\0' )
    {
        Remote::getSingleton()->sendData(msg[pos]);
        pos++;
    }
    for(int i=0; i<10; i++)
    cb2a:	68fb      	ldr	r3, [r7, #12]
    cb2c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    cb30:	60fb      	str	r3, [r7, #12]
    cb32:	68fb      	ldr	r3, [r7, #12]
    cb34:	2b09      	cmp	r3, #9
    cb36:	ddf0      	ble.n	cb1a <_ZN6Remote3logEPc+0x42>
        Remote::getSingleton()->sendData(' ');
}
    cb38:	f107 0710 	add.w	r7, r7, #16	; 0x10
    cb3c:	46bd      	mov	sp, r7
    cb3e:	bd80      	pop	{r7, pc}

0000cb40 <_ZN6Remote6updateEb>:
#else
    return 0;
#endif
}

void Remote::update(bool allowChangeMode)
    cb40:	b580      	push	{r7, lr}
    cb42:	b086      	sub	sp, #24
    cb44:	af00      	add	r7, sp, #0
    cb46:	60f8      	str	r0, [r7, #12]
    cb48:	460b      	mov	r3, r1
    cb4a:	72fb      	strb	r3, [r7, #11]
    }
#endif
*/
    //if (allowChangeMode)
    {
        if (dataAvailable() && !remoteMode)
    cb4c:	68f8      	ldr	r0, [r7, #12]
    cb4e:	f7ff fe5f 	bl	c810 <_ZN6Remote13dataAvailableEv>
    cb52:	4603      	mov	r3, r0
    cb54:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cb58:	b2db      	uxtb	r3, r3
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d10d      	bne.n	cb7a <_ZN6Remote6updateEb+0x3a>
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	791b      	ldrb	r3, [r3, #4]
    cb62:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cb66:	b2db      	uxtb	r3, r3
    cb68:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cb6c:	b2db      	uxtb	r3, r3
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d103      	bne.n	cb7a <_ZN6Remote6updateEb+0x3a>
    cb72:	f04f 0301 	mov.w	r3, #1	; 0x1
    cb76:	603b      	str	r3, [r7, #0]
    cb78:	e002      	b.n	cb80 <_ZN6Remote6updateEb+0x40>
    cb7a:	f04f 0300 	mov.w	r3, #0	; 0x0
    cb7e:	603b      	str	r3, [r7, #0]
    cb80:	683b      	ldr	r3, [r7, #0]
    cb82:	2b00      	cmp	r3, #0
    cb84:	d007      	beq.n	cb96 <_ZN6Remote6updateEb+0x56>
        {
            remoteMode = true;
    cb86:	68fa      	ldr	r2, [r7, #12]
    cb88:	f04f 0301 	mov.w	r3, #1	; 0x1
    cb8c:	7113      	strb	r3, [r2, #4]
            Remote::log("Reçu, avant toute commandant !");
    cb8e:	4b54      	ldr	r3, [pc, #336]	(cce0 <_ZN6Remote6updateEb+0x1a0>)
    cb90:	4618      	mov	r0, r3
    cb92:	f7ff ffa1 	bl	cad8 <_ZN6Remote3logEPc>
        }
        if (remoteMode)
    cb96:	68fb      	ldr	r3, [r7, #12]
    cb98:	791b      	ldrb	r3, [r3, #4]
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d004      	beq.n	cba8 <_ZN6Remote6updateEb+0x68>
            Led::setOn(1);
    cb9e:	f04f 0001 	mov.w	r0, #1	; 0x1
    cba2:	f7ff f97d 	bl	bea0 <_ZN3Led5setOnEi>
    cba6:	e003      	b.n	cbb0 <_ZN6Remote6updateEb+0x70>
        else
            Led::setOff(1);
    cba8:	f04f 0001 	mov.w	r0, #1	; 0x1
    cbac:	f7ff f938 	bl	be20 <_ZN3Led6setOffEi>
    }

    if (!allowChangeMode && remoteMode && dataAvailable())
    cbb0:	7afb      	ldrb	r3, [r7, #11]
    cbb2:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cbb6:	b2db      	uxtb	r3, r3
    cbb8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cbbc:	b2db      	uxtb	r3, r3
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d113      	bne.n	cbea <_ZN6Remote6updateEb+0xaa>
    cbc2:	68fb      	ldr	r3, [r7, #12]
    cbc4:	791b      	ldrb	r3, [r3, #4]
    cbc6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cbca:	b2db      	uxtb	r3, r3
    cbcc:	2b00      	cmp	r3, #0
    cbce:	d10c      	bne.n	cbea <_ZN6Remote6updateEb+0xaa>
    cbd0:	68f8      	ldr	r0, [r7, #12]
    cbd2:	f7ff fe1d 	bl	c810 <_ZN6Remote13dataAvailableEv>
    cbd6:	4603      	mov	r3, r0
    cbd8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    cbdc:	b2db      	uxtb	r3, r3
    cbde:	2b00      	cmp	r3, #0
    cbe0:	d103      	bne.n	cbea <_ZN6Remote6updateEb+0xaa>
    cbe2:	f04f 0301 	mov.w	r3, #1	; 0x1
    cbe6:	607b      	str	r3, [r7, #4]
    cbe8:	e002      	b.n	cbf0 <_ZN6Remote6updateEb+0xb0>
    cbea:	f04f 0300 	mov.w	r3, #0	; 0x0
    cbee:	607b      	str	r3, [r7, #4]
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d069      	beq.n	ccca <_ZN6Remote6updateEb+0x18a>
    {
        int order = receiveData();
    cbf6:	68f8      	ldr	r0, [r7, #12]
    cbf8:	f7ff fe20 	bl	c83c <_ZN6Remote11receiveDataEv>
    cbfc:	4603      	mov	r3, r0
    cbfe:	617b      	str	r3, [r7, #20]
        Remote::log("Got:");
    cc00:	4b38      	ldr	r3, [pc, #224]	(cce4 <_ZN6Remote6updateEb+0x1a4>)
    cc02:	4618      	mov	r0, r3
    cc04:	f7ff ff68 	bl	cad8 <_ZN6Remote3logEPc>
        Remote::getSingleton()->sendData(order);
    cc08:	f7ff ff42 	bl	ca90 <_ZN6Remote12getSingletonEv>
    cc0c:	4603      	mov	r3, r0
    cc0e:	4618      	mov	r0, r3
    cc10:	6979      	ldr	r1, [r7, #20]
    cc12:	f7ff fe57 	bl	c8c4 <_ZN6Remote8sendDataEi>
            break;
        }
#endif
*/
        // Linear Speed
        if (order>=0 and order<=50)
    cc16:	697b      	ldr	r3, [r7, #20]
    cc18:	2b00      	cmp	r3, #0
    cc1a:	db27      	blt.n	cc6c <_ZN6Remote6updateEb+0x12c>
    cc1c:	697b      	ldr	r3, [r7, #20]
    cc1e:	2b32      	cmp	r3, #50
    cc20:	dc24      	bgt.n	cc6c <_ZN6Remote6updateEb+0x12c>
            linSpeed = ((float)(order-25)) / 25. * LINEAR_REMOTE_SPEED_LIMIT;
    cc22:	697b      	ldr	r3, [r7, #20]
    cc24:	f1a3 0319 	sub.w	r3, r3, #25	; 0x19
    cc28:	4618      	mov	r0, r3
    cc2a:	f00b ffd5 	bl	18bd8 <__aeabi_i2f>
    cc2e:	4603      	mov	r3, r0
    cc30:	4618      	mov	r0, r3
    cc32:	f00b fbb3 	bl	1839c <__aeabi_f2d>
    cc36:	4602      	mov	r2, r0
    cc38:	460b      	mov	r3, r1
    cc3a:	4610      	mov	r0, r2
    cc3c:	4619      	mov	r1, r3
    cc3e:	f04f 0200 	mov.w	r2, #0	; 0x0
    cc42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cc46:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    cc4a:	f00b fd25 	bl	18698 <__aeabi_ddiv>
    cc4e:	4602      	mov	r2, r0
    cc50:	460b      	mov	r3, r1
    cc52:	4610      	mov	r0, r2
    cc54:	4619      	mov	r1, r3
    cc56:	f00b fa43 	bl	180e0 <__adddf3>
    cc5a:	4602      	mov	r2, r0
    cc5c:	460b      	mov	r3, r1
    cc5e:	4610      	mov	r0, r2
    cc60:	4619      	mov	r1, r3
    cc62:	f00b feaf 	bl	189c4 <__aeabi_d2f>
    cc66:	4602      	mov	r2, r0
    cc68:	68fb      	ldr	r3, [r7, #12]
    cc6a:	60da      	str	r2, [r3, #12]

        // Angular Speed
        if (order>=51 and order<=101)
    cc6c:	697b      	ldr	r3, [r7, #20]
    cc6e:	2b32      	cmp	r3, #50
    cc70:	dd2b      	ble.n	ccca <_ZN6Remote6updateEb+0x18a>
    cc72:	697b      	ldr	r3, [r7, #20]
    cc74:	2b65      	cmp	r3, #101
    cc76:	dc28      	bgt.n	ccca <_ZN6Remote6updateEb+0x18a>
            angSpeed = -((float)(order-75)) / 25. * ANGULAR_REMOTE_SPEED_LIMIT;
    cc78:	697b      	ldr	r3, [r7, #20]
    cc7a:	f1a3 034b 	sub.w	r3, r3, #75	; 0x4b
    cc7e:	4618      	mov	r0, r3
    cc80:	f00b ffaa 	bl	18bd8 <__aeabi_i2f>
    cc84:	4603      	mov	r3, r0
    cc86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cc8a:	4618      	mov	r0, r3
    cc8c:	f00b fb86 	bl	1839c <__aeabi_f2d>
    cc90:	4602      	mov	r2, r0
    cc92:	460b      	mov	r3, r1
    cc94:	4610      	mov	r0, r2
    cc96:	4619      	mov	r1, r3
    cc98:	f04f 0200 	mov.w	r2, #0	; 0x0
    cc9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cca0:	f503 1364 	add.w	r3, r3, #3735552	; 0x390000
    cca4:	f00b fcf8 	bl	18698 <__aeabi_ddiv>
    cca8:	4602      	mov	r2, r0
    ccaa:	460b      	mov	r3, r1
    ccac:	4610      	mov	r0, r2
    ccae:	4619      	mov	r1, r3
    ccb0:	a209      	add	r2, pc, #36	(adr r2, ccd8 <_ZN6Remote6updateEb+0x198>)
    ccb2:	ca0c      	ldmia	r2!, {r2, r3}
    ccb4:	f00b fbc6 	bl	18444 <__aeabi_dmul>
    ccb8:	4602      	mov	r2, r0
    ccba:	460b      	mov	r3, r1
    ccbc:	4610      	mov	r0, r2
    ccbe:	4619      	mov	r1, r3
    ccc0:	f00b fe80 	bl	189c4 <__aeabi_d2f>
    ccc4:	4602      	mov	r2, r0
    ccc6:	68fb      	ldr	r3, [r7, #12]
    ccc8:	611a      	str	r2, [r3, #16]
    }
}
    ccca:	f107 0718 	add.w	r7, r7, #24	; 0x18
    ccce:	46bd      	mov	sp, r7
    ccd0:	bd80      	pop	{r7, pc}
    ccd2:	46c0      	nop			(mov r8, r8)
    ccd4:	46c0      	nop			(mov r8, r8)
    ccd6:	46c0      	nop			(mov r8, r8)
    ccd8:	47ae147b 	.word	0x47ae147b
    ccdc:	3f847ae1 	.word	0x3f847ae1
    cce0:	0001fb60 	.word	0x0001fb60
    cce4:	0001fb80 	.word	0x0001fb80

0000cce8 <_ZN4Roue6tourneEf>:
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);

}

void Roue::tourne(float rapport)
    cce8:	b580      	push	{r7, lr}
    ccea:	b082      	sub	sp, #8
    ccec:	af00      	add	r7, sp, #0
    ccee:	6078      	str	r0, [r7, #4]
    ccf0:	6039      	str	r1, [r7, #0]
{
    //rapport = 1;
    if(rapport >=0)
    ccf2:	6838      	ldr	r0, [r7, #0]
    ccf4:	4915      	ldr	r1, [pc, #84]	(cd4c <_ZN4Roue6tourneEf+0x64>)
    ccf6:	f00c f973 	bl	18fe0 <__aeabi_fcmpge>
    ccfa:	4603      	mov	r3, r0
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d00f      	beq.n	cd20 <_ZN4Roue6tourneEf+0x38>
    //if((rapport >= 0 && !oppositeDirection) || (rapport<0 && oppositeDirection))
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_RESET);
    cd00:	687b      	ldr	r3, [r7, #4]
    cd02:	689a      	ldr	r2, [r3, #8]
    cd04:	687b      	ldr	r3, [r7, #4]
    cd06:	899b      	ldrh	r3, [r3, #12]
    cd08:	4610      	mov	r0, r2
    cd0a:	4619      	mov	r1, r3
    cd0c:	f04f 0200 	mov.w	r2, #0	; 0x0
    cd10:	f7f4 fe3c 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(rapport);
    cd14:	687b      	ldr	r3, [r7, #4]
    cd16:	4618      	mov	r0, r3
    cd18:	6839      	ldr	r1, [r7, #0]
    cd1a:	f7ff fbaf 	bl	c47c <_ZN10PWMHandler12setDutyCycleEf>
    cd1e:	e011      	b.n	cd44 <_ZN4Roue6tourneEf+0x5c>
    }
    else
    {
        GPIO_WriteBit(GPIOx_Sens, GPIO_Pin_Sens, Bit_SET);
    cd20:	687b      	ldr	r3, [r7, #4]
    cd22:	689a      	ldr	r2, [r3, #8]
    cd24:	687b      	ldr	r3, [r7, #4]
    cd26:	899b      	ldrh	r3, [r3, #12]
    cd28:	4610      	mov	r0, r2
    cd2a:	4619      	mov	r1, r3
    cd2c:	f04f 0201 	mov.w	r2, #1	; 0x1
    cd30:	f7f4 fe2c 	bl	198c <GPIO_WriteBit>
        pwm.setDutyCycle(-rapport);
    cd34:	687a      	ldr	r2, [r7, #4]
    cd36:	683b      	ldr	r3, [r7, #0]
    cd38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cd3c:	4610      	mov	r0, r2
    cd3e:	4619      	mov	r1, r3
    cd40:	f7ff fb9c 	bl	c47c <_ZN10PWMHandler12setDutyCycleEf>
/*
    if(fabs(rapport) < RAPPORT_OK)
        pwm.setDutyCycle(0);
    else
        pwm.setDutyCycle(fabs(rapport)+RAPPORT_SUPPLEMENTAIRE);*/
}
    cd44:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cd48:	46bd      	mov	sp, r7
    cd4a:	bd80      	pop	{r7, pc}
    cd4c:	00000000 	.word	0x00000000

0000cd50 <_ZN4RoueC1EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    cd50:	b580      	push	{r7, lr}
    cd52:	b088      	sub	sp, #32
    cd54:	af02      	add	r7, sp, #8
    cd56:	60f8      	str	r0, [r7, #12]
    cd58:	60b9      	str	r1, [r7, #8]
    cd5a:	603b      	str	r3, [r7, #0]
    cd5c:	4613      	mov	r3, r2
    cd5e:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    cd60:	68fa      	ldr	r2, [r7, #12]
    cd62:	f897 c007 	ldrb.w	ip, [r7, #7]
    cd66:	8c3b      	ldrh	r3, [r7, #32]
    cd68:	9300      	str	r3, [sp, #0]
    cd6a:	4610      	mov	r0, r2
    cd6c:	68b9      	ldr	r1, [r7, #8]
    cd6e:	4662      	mov	r2, ip
    cd70:	683b      	ldr	r3, [r7, #0]
    cd72:	f7f8 fd47 	bl	5804 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    cd76:	68fa      	ldr	r2, [r7, #12]
    cd78:	6a7b      	ldr	r3, [r7, #36]
    cd7a:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    cd7c:	68fa      	ldr	r2, [r7, #12]
    cd7e:	8d3b      	ldrh	r3, [r7, #40]
    cd80:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    cd82:	8d3b      	ldrh	r3, [r7, #40]
    cd84:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    cd86:	f04f 0310 	mov.w	r3, #16	; 0x10
    cd8a:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    cd8c:	f04f 0302 	mov.w	r3, #2	; 0x2
    cd90:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    cd92:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cd96:	6a78      	ldr	r0, [r7, #36]
    cd98:	4619      	mov	r1, r3
    cd9a:	f7f4 fc89 	bl	16b0 <GPIO_Init>

}
    cd9e:	68fb      	ldr	r3, [r7, #12]
    cda0:	4618      	mov	r0, r3
    cda2:	f107 0718 	add.w	r7, r7, #24	; 0x18
    cda6:	46bd      	mov	sp, r7
    cda8:	bd80      	pop	{r7, pc}
    cdaa:	46c0      	nop			(mov r8, r8)

0000cdac <_ZN4RoueC2EP11TIM_TypeDefhP12GPIO_TypeDeftS3_t>:
#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
    #include "stm32f10x_rcc.h"
#endif
#include <math.h>

Roue::Roue(TIM_TypeDef* TIMx, unsigned char OCx, GPIO_TypeDef* GPIOx_pwm, uint16_t GPIO_Pin_pwm, GPIO_TypeDef* GPIOx_Sens, uint16_t GPIO_Pin_Sens)
    cdac:	b580      	push	{r7, lr}
    cdae:	b088      	sub	sp, #32
    cdb0:	af02      	add	r7, sp, #8
    cdb2:	60f8      	str	r0, [r7, #12]
    cdb4:	60b9      	str	r1, [r7, #8]
    cdb6:	603b      	str	r3, [r7, #0]
    cdb8:	4613      	mov	r3, r2
    cdba:	71fb      	strb	r3, [r7, #7]
    : Moteur(TIMx, OCx, GPIOx_pwm, GPIO_Pin_pwm)
    cdbc:	68fa      	ldr	r2, [r7, #12]
    cdbe:	f897 c007 	ldrb.w	ip, [r7, #7]
    cdc2:	8c3b      	ldrh	r3, [r7, #32]
    cdc4:	9300      	str	r3, [sp, #0]
    cdc6:	4610      	mov	r0, r2
    cdc8:	68b9      	ldr	r1, [r7, #8]
    cdca:	4662      	mov	r2, ip
    cdcc:	683b      	ldr	r3, [r7, #0]
    cdce:	f7f8 fd19 	bl	5804 <_ZN6MoteurC2EP11TIM_TypeDefhP12GPIO_TypeDeft>
{
    this->GPIOx_Sens = GPIOx_Sens;
    cdd2:	68fa      	ldr	r2, [r7, #12]
    cdd4:	6a7b      	ldr	r3, [r7, #36]
    cdd6:	6093      	str	r3, [r2, #8]
    this->GPIO_Pin_Sens = GPIO_Pin_Sens;
    cdd8:	68fa      	ldr	r2, [r7, #12]
    cdda:	8d3b      	ldrh	r3, [r7, #40]
    cddc:	8193      	strh	r3, [r2, #12]
    GPIO_InitStructureSortie.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructureSortie);
*/
    // initialiser pins d'entrée sur le STM du port x_sens
    GPIO_InitTypeDef GPIO_InitStructureSortie2;
    GPIO_InitStructureSortie2.GPIO_Pin =  GPIO_Pin_Sens;
    cdde:	8d3b      	ldrh	r3, [r7, #40]
    cde0:	82bb      	strh	r3, [r7, #20]
    #ifdef STM32F40_41xxx
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_OUT;
        GPIO_InitStructureSortie2.GPIO_OType = GPIO_OType_PP;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructureSortie2.GPIO_Mode = GPIO_Mode_Out_PP;
    cde2:	f04f 0310 	mov.w	r3, #16	; 0x10
    cde6:	75fb      	strb	r3, [r7, #23]
    #endif
    GPIO_InitStructureSortie2.GPIO_Speed = GPIO_Speed_2MHz;        //La vitesse de rafraichissement du port
    cde8:	f04f 0302 	mov.w	r3, #2	; 0x2
    cdec:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_Sens, &GPIO_InitStructureSortie2);
    cdee:	f107 0314 	add.w	r3, r7, #20	; 0x14
    cdf2:	6a78      	ldr	r0, [r7, #36]
    cdf4:	4619      	mov	r1, r3
    cdf6:	f7f4 fc5b 	bl	16b0 <GPIO_Init>

}
    cdfa:	68fb      	ldr	r3, [r7, #12]
    cdfc:	4618      	mov	r0, r3
    cdfe:	f107 0718 	add.w	r7, r7, #24	; 0x18
    ce02:	46bd      	mov	sp, r7
    ce04:	bd80      	pop	{r7, pc}
    ce06:	46c0      	nop			(mov r8, r8)

0000ce08 <_ZN11SharpSensor8getValueEv>:
        output = false;
    #endif

}

Sensor::OutputSensor SharpSensor::getValue()
    ce08:	b580      	push	{r7, lr}
    ce0a:	b088      	sub	sp, #32
    ce0c:	af00      	add	r7, sp, #0
    ce0e:	6078      	str	r0, [r7, #4]
    ce10:	60f9      	str	r1, [r7, #12]
{
    OutputSensor outputR;
    outputR.type = SHARP;
    ce12:	f04f 0300 	mov.w	r3, #0	; 0x0
    ce16:	687a      	ldr	r2, [r7, #4]
    ce18:	7013      	strb	r3, [r2, #0]
    outputR.f = (float)value;
    ce1a:	68fb      	ldr	r3, [r7, #12]
    ce1c:	691b      	ldr	r3, [r3, #16]
    ce1e:	4618      	mov	r0, r3
    ce20:	f00b feda 	bl	18bd8 <__aeabi_i2f>
    ce24:	4603      	mov	r3, r0
    ce26:	687a      	ldr	r2, [r7, #4]
    ce28:	6053      	str	r3, [r2, #4]
    outputR.b = (output && actif);// && actif && !SharpSensor::estDesactive);
    ce2a:	68fb      	ldr	r3, [r7, #12]
    ce2c:	7b9b      	ldrb	r3, [r3, #14]
    ce2e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ce32:	b2db      	uxtb	r3, r3
    ce34:	2b00      	cmp	r3, #0
    ce36:	d10a      	bne.n	ce4e <_ZN11SharpSensor8getValueEv+0x46>
    ce38:	68fb      	ldr	r3, [r7, #12]
    ce3a:	7bdb      	ldrb	r3, [r3, #15]
    ce3c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ce40:	b2db      	uxtb	r3, r3
    ce42:	2b00      	cmp	r3, #0
    ce44:	d103      	bne.n	ce4e <_ZN11SharpSensor8getValueEv+0x46>
    ce46:	f04f 0301 	mov.w	r3, #1	; 0x1
    ce4a:	60bb      	str	r3, [r7, #8]
    ce4c:	e002      	b.n	ce54 <_ZN11SharpSensor8getValueEv+0x4c>
    ce4e:	f04f 0200 	mov.w	r2, #0	; 0x0
    ce52:	60ba      	str	r2, [r7, #8]
    ce54:	68ba      	ldr	r2, [r7, #8]
    ce56:	4613      	mov	r3, r2
    ce58:	687a      	ldr	r2, [r7, #4]
    ce5a:	7213      	strb	r3, [r2, #8]
    return outputR;
}
    ce5c:	6878      	ldr	r0, [r7, #4]
    ce5e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    ce62:	46bd      	mov	sp, r7
    ce64:	bd80      	pop	{r7, pc}
    ce66:	46c0      	nop			(mov r8, r8)

0000ce68 <_ZN11SharpSensor7getNameEv>:

SharpSensor::SharpName SharpSensor::getName()
    ce68:	b480      	push	{r7}
    ce6a:	b083      	sub	sp, #12
    ce6c:	af00      	add	r7, sp, #0
    ce6e:	6078      	str	r0, [r7, #4]
{
    return name;
    ce70:	687b      	ldr	r3, [r7, #4]
    ce72:	7b5b      	ldrb	r3, [r3, #13]
}
    ce74:	4618      	mov	r0, r3
    ce76:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ce7a:	46bd      	mov	sp, r7
    ce7c:	bc80      	pop	{r7}
    ce7e:	4770      	bx	lr

0000ce80 <_ZN11SharpSensor8setActifEv>:


void SharpSensor::setActif()
    ce80:	b480      	push	{r7}
    ce82:	b083      	sub	sp, #12
    ce84:	af00      	add	r7, sp, #0
    ce86:	6078      	str	r0, [r7, #4]
{
    actif = true;
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	f04f 0201 	mov.w	r2, #1	; 0x1
    ce8e:	73da      	strb	r2, [r3, #15]
}
    ce90:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ce94:	46bd      	mov	sp, r7
    ce96:	bc80      	pop	{r7}
    ce98:	4770      	bx	lr
    ce9a:	46c0      	nop			(mov r8, r8)

0000ce9c <_ZN11SharpSensor10unsetActifEv>:

void SharpSensor::unsetActif()
    ce9c:	b480      	push	{r7}
    ce9e:	b083      	sub	sp, #12
    cea0:	af00      	add	r7, sp, #0
    cea2:	6078      	str	r0, [r7, #4]
{
    actif = false;
    cea4:	687b      	ldr	r3, [r7, #4]
    cea6:	f04f 0200 	mov.w	r2, #0	; 0x0
    ceaa:	73da      	strb	r2, [r3, #15]
}
    ceac:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ceb0:	46bd      	mov	sp, r7
    ceb2:	bc80      	pop	{r7}
    ceb4:	4770      	bx	lr
    ceb6:	46c0      	nop			(mov r8, r8)

0000ceb8 <_ZN11SharpSensor11updateValueEv>:
SharpSensor::~SharpSensor()
{
    //dtor
}

void SharpSensor::updateValue()
    ceb8:	b580      	push	{r7, lr}
    ceba:	b082      	sub	sp, #8
    cebc:	af00      	add	r7, sp, #0
    cebe:	6078      	str	r0, [r7, #4]
{
    #ifdef ROBOTHW
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    cec0:	f7fd fc50 	bl	a764 <_ZN12AnalogSensor18conversionFinishedEv>
    cec4:	4603      	mov	r3, r0
    cec6:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ceca:	b2db      	uxtb	r3, r3
    cecc:	2b00      	cmp	r3, #0
    cece:	d1f7      	bne.n	cec0 <_ZN11SharpSensor11updateValueEv+0x8>

    #if defined(STM32F10X_MD) || defined(STM32F40_41xxx) // KJ - H405
        value = *data;
        value >>= 4;
    #else // K - H107
        value = *data;
    ced0:	687b      	ldr	r3, [r7, #4]
    ced2:	689b      	ldr	r3, [r3, #8]
    ced4:	881b      	ldrh	r3, [r3, #0]
    ced6:	461a      	mov	r2, r3
    ced8:	687b      	ldr	r3, [r7, #4]
    ceda:	611a      	str	r2, [r3, #16]
    #endif

    counter <<= 1;
    cedc:	687b      	ldr	r3, [r7, #4]
    cede:	7b1b      	ldrb	r3, [r3, #12]
    cee0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    cee4:	b2db      	uxtb	r3, r3
    cee6:	687a      	ldr	r2, [r7, #4]
    cee8:	7313      	strb	r3, [r2, #12]
    counter |= (value > seuilDetection);
    ceea:	687b      	ldr	r3, [r7, #4]
    ceec:	7b1b      	ldrb	r3, [r3, #12]
    ceee:	4619      	mov	r1, r3
    cef0:	687b      	ldr	r3, [r7, #4]
    cef2:	691a      	ldr	r2, [r3, #16]
    cef4:	687b      	ldr	r3, [r7, #4]
    cef6:	8a9b      	ldrh	r3, [r3, #20]
    cef8:	429a      	cmp	r2, r3
    cefa:	bfd4      	ite	le
    cefc:	2300      	movle	r3, #0
    cefe:	2301      	movgt	r3, #1
    cf00:	460a      	mov	r2, r1
    cf02:	ea42 0303 	orr.w	r3, r2, r3
    cf06:	b2db      	uxtb	r3, r3
    cf08:	b2db      	uxtb	r3, r3
    cf0a:	687a      	ldr	r2, [r7, #4]
    cf0c:	7313      	strb	r3, [r2, #12]
    //if (*data > threshold)
    //    allumerLED();
    output = output ? !((counter & 0xff) == 0x00) : (counter & 0xff) == 0xff ; // Permet de s'assurer qu'au moins 8 détections succéssive ont eu lieu avant de retourner un true et que rien a été detecté au moins 8 fois pour retourner false.
    cf0e:	687b      	ldr	r3, [r7, #4]
    cf10:	7b9b      	ldrb	r3, [r3, #14]
    cf12:	2b00      	cmp	r3, #0
    cf14:	d008      	beq.n	cf28 <_ZN11SharpSensor11updateValueEv+0x70>
    cf16:	687b      	ldr	r3, [r7, #4]
    cf18:	7b1b      	ldrb	r3, [r3, #12]
    cf1a:	2b00      	cmp	r3, #0
    cf1c:	bf0c      	ite	eq
    cf1e:	2300      	moveq	r3, #0
    cf20:	2301      	movne	r3, #1
    cf22:	b2db      	uxtb	r3, r3
    cf24:	603b      	str	r3, [r7, #0]
    cf26:	e007      	b.n	cf38 <_ZN11SharpSensor11updateValueEv+0x80>
    cf28:	687b      	ldr	r3, [r7, #4]
    cf2a:	7b1b      	ldrb	r3, [r3, #12]
    cf2c:	2bff      	cmp	r3, #255
    cf2e:	bf14      	ite	ne
    cf30:	2300      	movne	r3, #0
    cf32:	2301      	moveq	r3, #1
    cf34:	b2db      	uxtb	r3, r3
    cf36:	603b      	str	r3, [r7, #0]
    cf38:	687a      	ldr	r2, [r7, #4]
    cf3a:	6839      	ldr	r1, [r7, #0]
    cf3c:	460b      	mov	r3, r1
    cf3e:	7393      	strb	r3, [r2, #14]
    }
    else
        output = false;
    #endif

}
    cf40:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cf44:	46bd      	mov	sp, r7
    cf46:	bd80      	pop	{r7, pc}

0000cf48 <_ZN11SharpSensorD0Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    cf48:	b580      	push	{r7, lr}
    cf4a:	b082      	sub	sp, #8
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
    cf50:	687a      	ldr	r2, [r7, #4]
    cf52:	4b0a      	ldr	r3, [pc, #40]	(cf7c <_ZN11SharpSensorD0Ev+0x34>)
    cf54:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    cf56:	687b      	ldr	r3, [r7, #4]
    cf58:	4618      	mov	r0, r3
    cf5a:	f7fd fcf7 	bl	a94c <_ZN12AnalogSensorD2Ev>
    cf5e:	f04f 0301 	mov.w	r3, #1	; 0x1
    cf62:	b2db      	uxtb	r3, r3
    cf64:	2b00      	cmp	r3, #0
    cf66:	d002      	beq.n	cf6e <_ZN11SharpSensorD0Ev+0x26>
    cf68:	6878      	ldr	r0, [r7, #4]
    cf6a:	f001 fa9b 	bl	e4a4 <_ZdlPv>
    cf6e:	687b      	ldr	r3, [r7, #4]
    cf70:	4618      	mov	r0, r3
    cf72:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cf76:	46bd      	mov	sp, r7
    cf78:	bd80      	pop	{r7, pc}
    cf7a:	46c0      	nop			(mov r8, r8)
    cf7c:	0001fb90 	.word	0x0001fb90

0000cf80 <_ZN11SharpSensorD1Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    cf80:	b580      	push	{r7, lr}
    cf82:	b082      	sub	sp, #8
    cf84:	af00      	add	r7, sp, #0
    cf86:	6078      	str	r0, [r7, #4]
    cf88:	687a      	ldr	r2, [r7, #4]
    cf8a:	4b0a      	ldr	r3, [pc, #40]	(cfb4 <_ZN11SharpSensorD1Ev+0x34>)
    cf8c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    cf8e:	687b      	ldr	r3, [r7, #4]
    cf90:	4618      	mov	r0, r3
    cf92:	f7fd fcdb 	bl	a94c <_ZN12AnalogSensorD2Ev>
    cf96:	f04f 0300 	mov.w	r3, #0	; 0x0
    cf9a:	b2db      	uxtb	r3, r3
    cf9c:	2b00      	cmp	r3, #0
    cf9e:	d002      	beq.n	cfa6 <_ZN11SharpSensorD1Ev+0x26>
    cfa0:	6878      	ldr	r0, [r7, #4]
    cfa2:	f001 fa7f 	bl	e4a4 <_ZdlPv>
    cfa6:	687b      	ldr	r3, [r7, #4]
    cfa8:	4618      	mov	r0, r3
    cfaa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cfae:	46bd      	mov	sp, r7
    cfb0:	bd80      	pop	{r7, pc}
    cfb2:	46c0      	nop			(mov r8, r8)
    cfb4:	0001fb90 	.word	0x0001fb90

0000cfb8 <_ZN11SharpSensorD2Ev>:
    this->evt = false;
    #endif

}

SharpSensor::~SharpSensor()
    cfb8:	b580      	push	{r7, lr}
    cfba:	b082      	sub	sp, #8
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	6078      	str	r0, [r7, #4]
    cfc0:	687a      	ldr	r2, [r7, #4]
    cfc2:	4b0a      	ldr	r3, [pc, #40]	(cfec <_ZN11SharpSensorD2Ev+0x34>)
    cfc4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    cfc6:	687b      	ldr	r3, [r7, #4]
    cfc8:	4618      	mov	r0, r3
    cfca:	f7fd fcbf 	bl	a94c <_ZN12AnalogSensorD2Ev>
    cfce:	f04f 0300 	mov.w	r3, #0	; 0x0
    cfd2:	b2db      	uxtb	r3, r3
    cfd4:	2b00      	cmp	r3, #0
    cfd6:	d002      	beq.n	cfde <_ZN11SharpSensorD2Ev+0x26>
    cfd8:	6878      	ldr	r0, [r7, #4]
    cfda:	f001 fa63 	bl	e4a4 <_ZdlPv>
    cfde:	687b      	ldr	r3, [r7, #4]
    cfe0:	4618      	mov	r0, r3
    cfe2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    cfe6:	46bd      	mov	sp, r7
    cfe8:	bd80      	pop	{r7, pc}
    cfea:	46c0      	nop			(mov r8, r8)
    cfec:	0001fb90 	.word	0x0001fb90

0000cff0 <_ZN11SharpSensorC1ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    cff0:	b580      	push	{r7, lr}
    cff2:	b084      	sub	sp, #16
    cff4:	af00      	add	r7, sp, #0
    cff6:	60f8      	str	r0, [r7, #12]
    cff8:	607b      	str	r3, [r7, #4]
    cffa:	460b      	mov	r3, r1
    cffc:	72fb      	strb	r3, [r7, #11]
    cffe:	4613      	mov	r3, r2
    d000:	72bb      	strb	r3, [r7, #10]
    d002:	68fb      	ldr	r3, [r7, #12]
    d004:	7aba      	ldrb	r2, [r7, #10]
    d006:	4618      	mov	r0, r3
    d008:	4611      	mov	r1, r2
    d00a:	687a      	ldr	r2, [r7, #4]
    d00c:	f7fd fce4 	bl	a9d8 <_ZN12AnalogSensorC2EhPt>
    d010:	68fa      	ldr	r2, [r7, #12]
    d012:	4b0f      	ldr	r3, [pc, #60]	(d050 <_ZN11SharpSensorC1ENS_9SharpNameEhPti+0x60>)
    d014:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d016:	68fa      	ldr	r2, [r7, #12]
    d018:	7afb      	ldrb	r3, [r7, #11]
    d01a:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d01c:	68fa      	ldr	r2, [r7, #12]
    d01e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d022:	7313      	strb	r3, [r2, #12]
    output = false;
    d024:	68fa      	ldr	r2, [r7, #12]
    d026:	f04f 0300 	mov.w	r3, #0	; 0x0
    d02a:	7393      	strb	r3, [r2, #14]
    actif = true;
    d02c:	68fa      	ldr	r2, [r7, #12]
    d02e:	f04f 0301 	mov.w	r3, #1	; 0x1
    d032:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d034:	69bb      	ldr	r3, [r7, #24]
    d036:	b29b      	uxth	r3, r3
    d038:	68fa      	ldr	r2, [r7, #12]
    d03a:	8293      	strh	r3, [r2, #20]
    value = 0;
    d03c:	68fa      	ldr	r2, [r7, #12]
    d03e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d042:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d044:	68fb      	ldr	r3, [r7, #12]
    d046:	4618      	mov	r0, r3
    d048:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d04c:	46bd      	mov	sp, r7
    d04e:	bd80      	pop	{r7, pc}
    d050:	0001fb90 	.word	0x0001fb90

0000d054 <_ZN11SharpSensorC2ENS_9SharpNameEhPti>:
#include "leds.h"

int SharpSensor::threshold = SEUIL_DETECTION;
bool SharpSensor::estDesactive = false;

SharpSensor::SharpSensor(SharpName name, uint8_t channel, DMA_MEMORY_TYPE* pData, int seuil) : AnalogSensor(channel, pData)
    d054:	b580      	push	{r7, lr}
    d056:	b084      	sub	sp, #16
    d058:	af00      	add	r7, sp, #0
    d05a:	60f8      	str	r0, [r7, #12]
    d05c:	607b      	str	r3, [r7, #4]
    d05e:	460b      	mov	r3, r1
    d060:	72fb      	strb	r3, [r7, #11]
    d062:	4613      	mov	r3, r2
    d064:	72bb      	strb	r3, [r7, #10]
    d066:	68fb      	ldr	r3, [r7, #12]
    d068:	7aba      	ldrb	r2, [r7, #10]
    d06a:	4618      	mov	r0, r3
    d06c:	4611      	mov	r1, r2
    d06e:	687a      	ldr	r2, [r7, #4]
    d070:	f7fd fcb2 	bl	a9d8 <_ZN12AnalogSensorC2EhPt>
    d074:	68fa      	ldr	r2, [r7, #12]
    d076:	4b0f      	ldr	r3, [pc, #60]	(d0b4 <_ZN11SharpSensorC2ENS_9SharpNameEhPti+0x60>)
    d078:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d07a:	68fa      	ldr	r2, [r7, #12]
    d07c:	7afb      	ldrb	r3, [r7, #11]
    d07e:	7353      	strb	r3, [r2, #13]
    counter = 0;
    d080:	68fa      	ldr	r2, [r7, #12]
    d082:	f04f 0300 	mov.w	r3, #0	; 0x0
    d086:	7313      	strb	r3, [r2, #12]
    output = false;
    d088:	68fa      	ldr	r2, [r7, #12]
    d08a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d08e:	7393      	strb	r3, [r2, #14]
    actif = true;
    d090:	68fa      	ldr	r2, [r7, #12]
    d092:	f04f 0301 	mov.w	r3, #1	; 0x1
    d096:	73d3      	strb	r3, [r2, #15]
    seuilDetection = seuil;
    d098:	69bb      	ldr	r3, [r7, #24]
    d09a:	b29b      	uxth	r3, r3
    d09c:	68fa      	ldr	r2, [r7, #12]
    d09e:	8293      	strh	r3, [r2, #20]
    value = 0;
    d0a0:	68fa      	ldr	r2, [r7, #12]
    d0a2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d0a6:	6113      	str	r3, [r2, #16]
    #ifndef ROBOTHW
    this->evt = false;
    #endif

}
    d0a8:	68fb      	ldr	r3, [r7, #12]
    d0aa:	4618      	mov	r0, r3
    d0ac:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d0b0:	46bd      	mov	sp, r7
    d0b2:	bd80      	pop	{r7, pc}
    d0b4:	0001fb90 	.word	0x0001fb90

0000d0b8 <_ZN5Timer7getTIMxEv>:
    else if (m_TIMx == TIM5)
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
}

// Retourne le timer (TIM1, TIM2 ou TIM3), voir TIM_TypeDef.
TIM_TypeDef* Timer::getTIMx()
    d0b8:	b480      	push	{r7}
    d0ba:	b083      	sub	sp, #12
    d0bc:	af00      	add	r7, sp, #0
    d0be:	6078      	str	r0, [r7, #4]
{
    return m_TIMx;
    d0c0:	687b      	ldr	r3, [r7, #4]
    d0c2:	681b      	ldr	r3, [r3, #0]
}
    d0c4:	4618      	mov	r0, r3
    d0c6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d0ca:	46bd      	mov	sp, r7
    d0cc:	bc80      	pop	{r7}
    d0ce:	4770      	bx	lr

0000d0d0 <_ZN5Timer9getPeriodEv>:
    timInit.TIM_RepetitionCounter = 0;

    TIM_TimeBaseInit(getTIMx(), &timInit);
}

uint16_t Timer::getPeriod()
    d0d0:	b480      	push	{r7}
    d0d2:	b083      	sub	sp, #12
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	6078      	str	r0, [r7, #4]
{
    return m_period;
    d0d8:	687b      	ldr	r3, [r7, #4]
    d0da:	891b      	ldrh	r3, [r3, #8]
}
    d0dc:	4618      	mov	r0, r3
    d0de:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d0e2:	46bd      	mov	sp, r7
    d0e4:	bc80      	pop	{r7}
    d0e6:	4770      	bx	lr

0000d0e8 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef>:

void Timer::enableTimerClock(TIM_TypeDef* TIMx)
    d0e8:	b580      	push	{r7, lr}
    d0ea:	b082      	sub	sp, #8
    d0ec:	af00      	add	r7, sp, #0
    d0ee:	6078      	str	r0, [r7, #4]
{
    if (TIMx == TIM1)
    d0f0:	687a      	ldr	r2, [r7, #4]
    d0f2:	4b27      	ldr	r3, [pc, #156]	(d190 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa8>)
    d0f4:	429a      	cmp	r2, r3
    d0f6:	d106      	bne.n	d106 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x1e>
    {
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
    d0f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d0fc:	f04f 0101 	mov.w	r1, #1	; 0x1
    d100:	f7f5 f9a2 	bl	2448 <RCC_APB2PeriphClockCmd>
    d104:	e040      	b.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM2)
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d10c:	d106      	bne.n	d11c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x34>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
    d10e:	f04f 0001 	mov.w	r0, #1	; 0x1
    d112:	f04f 0101 	mov.w	r1, #1	; 0x1
    d116:	f7f5 f9b9 	bl	248c <RCC_APB1PeriphClockCmd>
    d11a:	e035      	b.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM3)
    d11c:	687a      	ldr	r2, [r7, #4]
    d11e:	4b1d      	ldr	r3, [pc, #116]	(d194 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xac>)
    d120:	429a      	cmp	r2, r3
    d122:	d106      	bne.n	d132 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x4a>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
    d124:	f04f 0002 	mov.w	r0, #2	; 0x2
    d128:	f04f 0101 	mov.w	r1, #1	; 0x1
    d12c:	f7f5 f9ae 	bl	248c <RCC_APB1PeriphClockCmd>
    d130:	e02a      	b.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM4)
    d132:	687a      	ldr	r2, [r7, #4]
    d134:	4b18      	ldr	r3, [pc, #96]	(d198 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb0>)
    d136:	429a      	cmp	r2, r3
    d138:	d106      	bne.n	d148 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x60>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
    d13a:	f04f 0004 	mov.w	r0, #4	; 0x4
    d13e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d142:	f7f5 f9a3 	bl	248c <RCC_APB1PeriphClockCmd>
    d146:	e01f      	b.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM5)
    d148:	687a      	ldr	r2, [r7, #4]
    d14a:	4b14      	ldr	r3, [pc, #80]	(d19c <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb4>)
    d14c:	429a      	cmp	r2, r3
    d14e:	d106      	bne.n	d15e <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x76>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
    d150:	f04f 0008 	mov.w	r0, #8	; 0x8
    d154:	f04f 0101 	mov.w	r1, #1	; 0x1
    d158:	f7f5 f998 	bl	248c <RCC_APB1PeriphClockCmd>
    d15c:	e014      	b.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM6)
    d15e:	687a      	ldr	r2, [r7, #4]
    d160:	4b0f      	ldr	r3, [pc, #60]	(d1a0 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xb8>)
    d162:	429a      	cmp	r2, r3
    d164:	d106      	bne.n	d174 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0x8c>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
    d166:	f04f 0010 	mov.w	r0, #16	; 0x10
    d16a:	f04f 0101 	mov.w	r1, #1	; 0x1
    d16e:	f7f5 f98d 	bl	248c <RCC_APB1PeriphClockCmd>
    d172:	e009      	b.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    }
    else if (TIMx == TIM7)
    d174:	687a      	ldr	r2, [r7, #4]
    d176:	4b0b      	ldr	r3, [pc, #44]	(d1a4 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xbc>)
    d178:	429a      	cmp	r2, r3
    d17a:	d105      	bne.n	d188 <_ZN5Timer16enableTimerClockEP11TIM_TypeDef+0xa0>
    {
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
    d17c:	f04f 0020 	mov.w	r0, #32	; 0x20
    d180:	f04f 0101 	mov.w	r1, #1	; 0x1
    d184:	f7f5 f982 	bl	248c <RCC_APB1PeriphClockCmd>
    }
}
    d188:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d18c:	46bd      	mov	sp, r7
    d18e:	bd80      	pop	{r7, pc}
    d190:	40012c00 	.word	0x40012c00
    d194:	40000400 	.word	0x40000400
    d198:	40000800 	.word	0x40000800
    d19c:	40000c00 	.word	0x40000c00
    d1a0:	40001000 	.word	0x40001000
    d1a4:	40001400 	.word	0x40001400

0000d1a8 <_ZN5Timer11enableClockEv>:
#include "timerHandler.h"

// Propage le signal de l’horloge système au timer.
void Timer::enableClock()
    d1a8:	b580      	push	{r7, lr}
    d1aa:	b082      	sub	sp, #8
    d1ac:	af00      	add	r7, sp, #0
    d1ae:	6078      	str	r0, [r7, #4]
{
    if (m_TIMx == TIM1)
    d1b0:	687b      	ldr	r3, [r7, #4]
    d1b2:	681a      	ldr	r2, [r3, #0]
    d1b4:	4b1e      	ldr	r3, [pc, #120]	(d230 <_ZN5Timer11enableClockEv+0x88>)
    d1b6:	429a      	cmp	r2, r3
    d1b8:	d106      	bne.n	d1c8 <_ZN5Timer11enableClockEv+0x20>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,ENABLE);
    d1ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
    d1be:	f04f 0101 	mov.w	r1, #1	; 0x1
    d1c2:	f7f5 f941 	bl	2448 <RCC_APB2PeriphClockCmd>
    d1c6:	e02e      	b.n	d226 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM2)
    d1c8:	687b      	ldr	r3, [r7, #4]
    d1ca:	681b      	ldr	r3, [r3, #0]
    d1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    d1d0:	d106      	bne.n	d1e0 <_ZN5Timer11enableClockEv+0x38>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);
    d1d2:	f04f 0001 	mov.w	r0, #1	; 0x1
    d1d6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d1da:	f7f5 f957 	bl	248c <RCC_APB1PeriphClockCmd>
    d1de:	e022      	b.n	d226 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM3)
    d1e0:	687b      	ldr	r3, [r7, #4]
    d1e2:	681a      	ldr	r2, [r3, #0]
    d1e4:	4b13      	ldr	r3, [pc, #76]	(d234 <_ZN5Timer11enableClockEv+0x8c>)
    d1e6:	429a      	cmp	r2, r3
    d1e8:	d106      	bne.n	d1f8 <_ZN5Timer11enableClockEv+0x50>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    d1ea:	f04f 0002 	mov.w	r0, #2	; 0x2
    d1ee:	f04f 0101 	mov.w	r1, #1	; 0x1
    d1f2:	f7f5 f94b 	bl	248c <RCC_APB1PeriphClockCmd>
    d1f6:	e016      	b.n	d226 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM4)
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	681a      	ldr	r2, [r3, #0]
    d1fc:	4b0e      	ldr	r3, [pc, #56]	(d238 <_ZN5Timer11enableClockEv+0x90>)
    d1fe:	429a      	cmp	r2, r3
    d200:	d106      	bne.n	d210 <_ZN5Timer11enableClockEv+0x68>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    d202:	f04f 0004 	mov.w	r0, #4	; 0x4
    d206:	f04f 0101 	mov.w	r1, #1	; 0x1
    d20a:	f7f5 f93f 	bl	248c <RCC_APB1PeriphClockCmd>
    d20e:	e00a      	b.n	d226 <_ZN5Timer11enableClockEv+0x7e>
    else if (m_TIMx == TIM5)
    d210:	687b      	ldr	r3, [r7, #4]
    d212:	681a      	ldr	r2, [r3, #0]
    d214:	4b09      	ldr	r3, [pc, #36]	(d23c <_ZN5Timer11enableClockEv+0x94>)
    d216:	429a      	cmp	r2, r3
    d218:	d105      	bne.n	d226 <_ZN5Timer11enableClockEv+0x7e>
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5,ENABLE);
    d21a:	f04f 0008 	mov.w	r0, #8	; 0x8
    d21e:	f04f 0101 	mov.w	r1, #1	; 0x1
    d222:	f7f5 f933 	bl	248c <RCC_APB1PeriphClockCmd>
}
    d226:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d22a:	46bd      	mov	sp, r7
    d22c:	bd80      	pop	{r7, pc}
    d22e:	46c0      	nop			(mov r8, r8)
    d230:	40012c00 	.word	0x40012c00
    d234:	40000400 	.word	0x40000400
    d238:	40000800 	.word	0x40000800
    d23c:	40000c00 	.word	0x40000c00

0000d240 <_ZN5TimerC1EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d240:	b580      	push	{r7, lr}
    d242:	b088      	sub	sp, #32
    d244:	af00      	add	r7, sp, #0
    d246:	60f8      	str	r0, [r7, #12]
    d248:	60b9      	str	r1, [r7, #8]
    d24a:	4619      	mov	r1, r3
    d24c:	4613      	mov	r3, r2
    d24e:	80fb      	strh	r3, [r7, #6]
    d250:	460b      	mov	r3, r1
    d252:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d254:	68fa      	ldr	r2, [r7, #12]
    d256:	68bb      	ldr	r3, [r7, #8]
    d258:	6013      	str	r3, [r2, #0]
    m_period = period;
    d25a:	68fa      	ldr	r2, [r7, #12]
    d25c:	88fb      	ldrh	r3, [r7, #6]
    d25e:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d260:	68fa      	ldr	r2, [r7, #12]
    d262:	88bb      	ldrh	r3, [r7, #4]
    d264:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d266:	68fa      	ldr	r2, [r7, #12]
    d268:	8d3b      	ldrh	r3, [r7, #40]
    d26a:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d26c:	68f8      	ldr	r0, [r7, #12]
    d26e:	f7ff ff9b 	bl	d1a8 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d272:	88bb      	ldrh	r3, [r7, #4]
    d274:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d276:	f04f 0300 	mov.w	r3, #0	; 0x0
    d27a:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d27c:	88fb      	ldrh	r3, [r7, #6]
    d27e:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d280:	8d3b      	ldrh	r3, [r7, #40]
    d282:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d284:	f04f 0300 	mov.w	r3, #0	; 0x0
    d288:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d28a:	68f8      	ldr	r0, [r7, #12]
    d28c:	f7ff ff14 	bl	d0b8 <_ZN5Timer7getTIMxEv>
    d290:	4603      	mov	r3, r0
    d292:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d296:	4618      	mov	r0, r3
    d298:	4611      	mov	r1, r2
    d29a:	f7f5 facd 	bl	2838 <TIM_TimeBaseInit>
}
    d29e:	68fb      	ldr	r3, [r7, #12]
    d2a0:	4618      	mov	r0, r3
    d2a2:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d2a6:	46bd      	mov	sp, r7
    d2a8:	bd80      	pop	{r7, pc}
    d2aa:	46c0      	nop			(mov r8, r8)

0000d2ac <_ZN5TimerC2EP11TIM_TypeDefttNS_11ClkDivisionE>:
TIM_TypeDef* Timer::getTIMx()
{
    return m_TIMx;
}

Timer::Timer(TIM_TypeDef* TIMx, uint16_t period, uint16_t prescaler, ClkDivision clockDivision)
    d2ac:	b580      	push	{r7, lr}
    d2ae:	b088      	sub	sp, #32
    d2b0:	af00      	add	r7, sp, #0
    d2b2:	60f8      	str	r0, [r7, #12]
    d2b4:	60b9      	str	r1, [r7, #8]
    d2b6:	4619      	mov	r1, r3
    d2b8:	4613      	mov	r3, r2
    d2ba:	80fb      	strh	r3, [r7, #6]
    d2bc:	460b      	mov	r3, r1
    d2be:	80bb      	strh	r3, [r7, #4]
{
    m_TIMx = TIMx;
    d2c0:	68fa      	ldr	r2, [r7, #12]
    d2c2:	68bb      	ldr	r3, [r7, #8]
    d2c4:	6013      	str	r3, [r2, #0]
    m_period = period;
    d2c6:	68fa      	ldr	r2, [r7, #12]
    d2c8:	88fb      	ldrh	r3, [r7, #6]
    d2ca:	8113      	strh	r3, [r2, #8]
    m_prescaler = prescaler;
    d2cc:	68fa      	ldr	r2, [r7, #12]
    d2ce:	88bb      	ldrh	r3, [r7, #4]
    d2d0:	8093      	strh	r3, [r2, #4]
    m_div = clockDivision;
    d2d2:	68fa      	ldr	r2, [r7, #12]
    d2d4:	8d3b      	ldrh	r3, [r7, #40]
    d2d6:	80d3      	strh	r3, [r2, #6]

    enableClock();
    d2d8:	68f8      	ldr	r0, [r7, #12]
    d2da:	f7ff ff65 	bl	d1a8 <_ZN5Timer11enableClockEv>

    TIM_TimeBaseInitTypeDef timInit;
    timInit.TIM_Prescaler = prescaler;
    d2de:	88bb      	ldrh	r3, [r7, #4]
    d2e0:	82fb      	strh	r3, [r7, #22]
    timInit.TIM_CounterMode = TIM_CounterMode_Up;
    d2e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d2e6:	833b      	strh	r3, [r7, #24]
    timInit.TIM_Period = period;
    d2e8:	88fb      	ldrh	r3, [r7, #6]
    d2ea:	837b      	strh	r3, [r7, #26]
    timInit.TIM_ClockDivision = clockDivision;
    d2ec:	8d3b      	ldrh	r3, [r7, #40]
    d2ee:	83bb      	strh	r3, [r7, #28]
    timInit.TIM_RepetitionCounter = 0;
    d2f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    d2f4:	77bb      	strb	r3, [r7, #30]

    TIM_TimeBaseInit(getTIMx(), &timInit);
    d2f6:	68f8      	ldr	r0, [r7, #12]
    d2f8:	f7ff fede 	bl	d0b8 <_ZN5Timer7getTIMxEv>
    d2fc:	4603      	mov	r3, r0
    d2fe:	f107 0216 	add.w	r2, r7, #22	; 0x16
    d302:	4618      	mov	r0, r3
    d304:	4611      	mov	r1, r2
    d306:	f7f5 fa97 	bl	2838 <TIM_TimeBaseInit>
}
    d30a:	68fb      	ldr	r3, [r7, #12]
    d30c:	4618      	mov	r0, r3
    d30e:	f107 0720 	add.w	r7, r7, #32	; 0x20
    d312:	46bd      	mov	sp, r7
    d314:	bd80      	pop	{r7, pc}
    d316:	46c0      	nop			(mov r8, r8)

0000d318 <_ZNK7Tirette7enleveeEv>:
        buffer |= enlevee();
    }
}

// est ce que la tirette est enlevée ?
bool Tirette::enlevee() const
    d318:	b580      	push	{r7, lr}
    d31a:	b082      	sub	sp, #8
    d31c:	af00      	add	r7, sp, #0
    d31e:	6078      	str	r0, [r7, #4]
{
    #ifdef STM32F40_41xxx
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_RESET;
    #else
        return GPIO_ReadInputDataBit(GPIOx, GPIO_Pin_x) == Bit_SET;
    d320:	687b      	ldr	r3, [r7, #4]
    d322:	681a      	ldr	r2, [r3, #0]
    d324:	687b      	ldr	r3, [r7, #4]
    d326:	889b      	ldrh	r3, [r3, #4]
    d328:	4610      	mov	r0, r2
    d32a:	4619      	mov	r1, r3
    d32c:	f7f4 faba 	bl	18a4 <GPIO_ReadInputDataBit>
    d330:	4603      	mov	r3, r0
    d332:	2b01      	cmp	r3, #1
    d334:	bf14      	ite	ne
    d336:	2300      	movne	r3, #0
    d338:	2301      	moveq	r3, #1
    d33a:	b2db      	uxtb	r3, r3
    #endif
}
    d33c:	4618      	mov	r0, r3
    d33e:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d342:	46bd      	mov	sp, r7
    d344:	bd80      	pop	{r7, pc}
    d346:	46c0      	nop			(mov r8, r8)

0000d348 <_ZNK7Tirette14attendreRemiseEv>:
        buffer |= !enlevee();
    }
}

// attends jusqu'à ce que la tirette soit remise
void Tirette::attendreRemise() const
    d348:	b580      	push	{r7, lr}
    d34a:	b084      	sub	sp, #16
    d34c:	af00      	add	r7, sp, #0
    d34e:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette remise'");
    d350:	4b16      	ldr	r3, [pc, #88]	(d3ac <_ZNK7Tirette14attendreRemiseEv+0x64>)
    d352:	4618      	mov	r0, r3
    d354:	f7ff fbc0 	bl	cad8 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    d358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d35c:	60fb      	str	r3, [r7, #12]
    d35e:	e01d      	b.n	d39c <_ZNK7Tirette14attendreRemiseEv+0x54>
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    d360:	f7ff fb96 	bl	ca90 <_ZN6Remote12getSingletonEv>
    d364:	4603      	mov	r3, r0
    d366:	4618      	mov	r0, r3
    d368:	f04f 0101 	mov.w	r1, #1	; 0x1
    d36c:	f7ff fbe8 	bl	cb40 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    d370:	f7ff fb8e 	bl	ca90 <_ZN6Remote12getSingletonEv>
    d374:	4603      	mov	r3, r0
    d376:	4618      	mov	r0, r3
    d378:	f7ff fa80 	bl	c87c <_ZN6Remote12isRemoteModeEv>
    d37c:	4603      	mov	r3, r0
    d37e:	2b00      	cmp	r3, #0
    d380:	d10f      	bne.n	d3a2 <_ZNK7Tirette14attendreRemiseEv+0x5a>
            break;

        buffer <<= 1;
    d382:	68fb      	ldr	r3, [r7, #12]
    d384:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d388:	60fb      	str	r3, [r7, #12]
        buffer |= enlevee();
    d38a:	6878      	ldr	r0, [r7, #4]
    d38c:	f7ff ffc4 	bl	d318 <_ZNK7Tirette7enleveeEv>
    d390:	4603      	mov	r3, r0
    d392:	461a      	mov	r2, r3
    d394:	68fb      	ldr	r3, [r7, #12]
    d396:	ea43 0302 	orr.w	r3, r3, r2
    d39a:	60fb      	str	r3, [r7, #12]
void Tirette::attendreRemise() const
{
    Remote::log("Waiting for 'tirette remise'");

    int buffer = 0xffffffff;
    while (buffer)
    d39c:	68fb      	ldr	r3, [r7, #12]
    d39e:	2b00      	cmp	r3, #0
    d3a0:	d1de      	bne.n	d360 <_ZNK7Tirette14attendreRemiseEv+0x18>
            break;

        buffer <<= 1;
        buffer |= enlevee();
    }
}
    d3a2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d3a6:	46bd      	mov	sp, r7
    d3a8:	bd80      	pop	{r7, pc}
    d3aa:	46c0      	nop			(mov r8, r8)
    d3ac:	0001fba0 	.word	0x0001fba0

0000d3b0 <_ZNK7Tirette15attendreEnleveeEv>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
}

// attends jusqu'à ce que la tirette soit enlevée
void Tirette::attendreEnlevee() const
    d3b0:	b580      	push	{r7, lr}
    d3b2:	b084      	sub	sp, #16
    d3b4:	af00      	add	r7, sp, #0
    d3b6:	6078      	str	r0, [r7, #4]
{
    Remote::log("Waiting for 'tirette enleve'");
    d3b8:	4b17      	ldr	r3, [pc, #92]	(d418 <_ZNK7Tirette15attendreEnleveeEv+0x68>)
    d3ba:	4618      	mov	r0, r3
    d3bc:	f7ff fb8c 	bl	cad8 <_ZN6Remote3logEPc>

    int buffer = 0xffffffff;
    d3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3c4:	60fb      	str	r3, [r7, #12]
    d3c6:	e020      	b.n	d40a <_ZNK7Tirette15attendreEnleveeEv+0x5a>
    //int waiting = 0;
    while (buffer)
    {
        Remote::getSingleton()->update(true);
    d3c8:	f7ff fb62 	bl	ca90 <_ZN6Remote12getSingletonEv>
    d3cc:	4603      	mov	r3, r0
    d3ce:	4618      	mov	r0, r3
    d3d0:	f04f 0101 	mov.w	r1, #1	; 0x1
    d3d4:	f7ff fbb4 	bl	cb40 <_ZN6Remote6updateEb>
        if (Remote::getSingleton()->isRemoteMode())
    d3d8:	f7ff fb5a 	bl	ca90 <_ZN6Remote12getSingletonEv>
    d3dc:	4603      	mov	r3, r0
    d3de:	4618      	mov	r0, r3
    d3e0:	f7ff fa4c 	bl	c87c <_ZN6Remote12isRemoteModeEv>
    d3e4:	4603      	mov	r3, r0
    d3e6:	2b00      	cmp	r3, #0
    d3e8:	d112      	bne.n	d410 <_ZNK7Tirette15attendreEnleveeEv+0x60>
            break;

        buffer <<= 1;
    d3ea:	68fb      	ldr	r3, [r7, #12]
    d3ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d3f0:	60fb      	str	r3, [r7, #12]
        buffer |= !enlevee();
    d3f2:	6878      	ldr	r0, [r7, #4]
    d3f4:	f7ff ff90 	bl	d318 <_ZNK7Tirette7enleveeEv>
    d3f8:	4603      	mov	r3, r0
    d3fa:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d3fe:	b2db      	uxtb	r3, r3
    d400:	461a      	mov	r2, r3
    d402:	68fb      	ldr	r3, [r7, #12]
    d404:	ea43 0302 	orr.w	r3, r3, r2
    d408:	60fb      	str	r3, [r7, #12]
{
    Remote::log("Waiting for 'tirette enleve'");

    int buffer = 0xffffffff;
    //int waiting = 0;
    while (buffer)
    d40a:	68fb      	ldr	r3, [r7, #12]
    d40c:	2b00      	cmp	r3, #0
    d40e:	d1db      	bne.n	d3c8 <_ZNK7Tirette15attendreEnleveeEv+0x18>
            break;

        buffer <<= 1;
        buffer |= !enlevee();
    }
}
    d410:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d414:	46bd      	mov	sp, r7
    d416:	bd80      	pop	{r7, pc}
    d418:	0001fbc0 	.word	0x0001fbc0

0000d41c <_ZN7TiretteC1EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d41c:	b580      	push	{r7, lr}
    d41e:	b086      	sub	sp, #24
    d420:	af00      	add	r7, sp, #0
    d422:	60f8      	str	r0, [r7, #12]
    d424:	60b9      	str	r1, [r7, #8]
    d426:	4613      	mov	r3, r2
    d428:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d42a:	68fa      	ldr	r2, [r7, #12]
    d42c:	68bb      	ldr	r3, [r7, #8]
    d42e:	6013      	str	r3, [r2, #0]
    d430:	68fa      	ldr	r2, [r7, #12]
    d432:	88fb      	ldrh	r3, [r7, #6]
    d434:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d436:	88fb      	ldrh	r3, [r7, #6]
    d438:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d43a:	f04f 0348 	mov.w	r3, #72	; 0x48
    d43e:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d440:	f04f 0303 	mov.w	r3, #3	; 0x3
    d444:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d446:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d44a:	68b8      	ldr	r0, [r7, #8]
    d44c:	4619      	mov	r1, r3
    d44e:	f7f4 f92f 	bl	16b0 <GPIO_Init>
}
    d452:	68fb      	ldr	r3, [r7, #12]
    d454:	4618      	mov	r0, r3
    d456:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d45a:	46bd      	mov	sp, r7
    d45c:	bd80      	pop	{r7, pc}
    d45e:	46c0      	nop			(mov r8, r8)

0000d460 <_ZN7TiretteC2EP12GPIO_TypeDeft>:
#include "remote.h"
#include "leds.h"


// initialise la pin de la tirette
Tirette::Tirette(GPIO_TypeDef* GPIOx_tirette, uint16_t GPIO_Pin_x_tirette)
    d460:	b580      	push	{r7, lr}
    d462:	b086      	sub	sp, #24
    d464:	af00      	add	r7, sp, #0
    d466:	60f8      	str	r0, [r7, #12]
    d468:	60b9      	str	r1, [r7, #8]
    d46a:	4613      	mov	r3, r2
    d46c:	80fb      	strh	r3, [r7, #6]
    : GPIOx(GPIOx_tirette), GPIO_Pin_x(GPIO_Pin_x_tirette)
    d46e:	68fa      	ldr	r2, [r7, #12]
    d470:	68bb      	ldr	r3, [r7, #8]
    d472:	6013      	str	r3, [r2, #0]
    d474:	68fa      	ldr	r2, [r7, #12]
    d476:	88fb      	ldrh	r3, [r7, #6]
    d478:	8093      	strh	r3, [r2, #4]
{
    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_x_tirette;
    d47a:	88fb      	ldrh	r3, [r7, #6]
    d47c:	82bb      	strh	r3, [r7, #20]

    #ifdef STM32F40_41xxx
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    d47e:	f04f 0348 	mov.w	r3, #72	; 0x48
    d482:	75fb      	strb	r3, [r7, #23]
    #endif

    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d484:	f04f 0303 	mov.w	r3, #3	; 0x3
    d488:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOx_tirette, &GPIO_InitStructure);
    d48a:	f107 0314 	add.w	r3, r7, #20	; 0x14
    d48e:	68b8      	ldr	r0, [r7, #8]
    d490:	4619      	mov	r1, r3
    d492:	f7f4 f90d 	bl	16b0 <GPIO_Init>
}
    d496:	68fb      	ldr	r3, [r7, #12]
    d498:	4618      	mov	r0, r3
    d49a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d49e:	46bd      	mov	sp, r7
    d4a0:	bd80      	pop	{r7, pc}
    d4a2:	46c0      	nop			(mov r8, r8)

0000d4a4 <_ZN8Tourelle9getAlerteEv>:
//{
//    this->zonesCritiques[numeroZone][0] = (uint16_t) -1;
//    this->zonesCritiques[numeroZone][1] = (uint16_t) -1;
//}

bool Tourelle::getAlerte(void)
    d4a4:	b480      	push	{r7}
    d4a6:	b083      	sub	sp, #12
    d4a8:	af00      	add	r7, sp, #0
    d4aa:	6078      	str	r0, [r7, #4]
{
    return this->alerte;
    d4ac:	687b      	ldr	r3, [r7, #4]
    d4ae:	781b      	ldrb	r3, [r3, #0]
}
    d4b0:	4618      	mov	r0, r3
    d4b2:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d4b6:	46bd      	mov	sp, r7
    d4b8:	bc80      	pop	{r7}
    d4ba:	4770      	bx	lr

0000d4bc <_ZN8Tourelle12updateSimpleEv>:
//    this->alerte = newAlerte;
//
//    return newAlerte;
//}

bool Tourelle::updateSimple(void)
    d4bc:	b480      	push	{r7}
    d4be:	b085      	sub	sp, #20
    d4c0:	af00      	add	r7, sp, #0
    d4c2:	6078      	str	r0, [r7, #4]
{
    //Copie locale pour être thread-safe, et avoir une chance infime de louper un objet une fois
    uint8_t nombreObjets = nombreObjetDetecte;
    d4c4:	4b0f      	ldr	r3, [pc, #60]	(d504 <_ZN8Tourelle12updateSimpleEv+0x48>)
    d4c6:	781b      	ldrb	r3, [r3, #0]
    d4c8:	73fb      	strb	r3, [r7, #15]
    nombreObjetDetecte = 0;
    d4ca:	4a0e      	ldr	r2, [pc, #56]	(d504 <_ZN8Tourelle12updateSimpleEv+0x48>)
    d4cc:	f04f 0300 	mov.w	r3, #0	; 0x0
    d4d0:	7013      	strb	r3, [r2, #0]
    if(nombreObjets)
    d4d2:	7bfb      	ldrb	r3, [r7, #15]
    d4d4:	2b00      	cmp	r3, #0
    d4d6:	d007      	beq.n	d4e8 <_ZN8Tourelle12updateSimpleEv+0x2c>
    {
        this->alerte = true;
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	f04f 0201 	mov.w	r2, #1	; 0x1
    d4de:	701a      	strb	r2, [r3, #0]
        return true;
    d4e0:	f04f 0301 	mov.w	r3, #1	; 0x1
    d4e4:	603b      	str	r3, [r7, #0]
    d4e6:	e006      	b.n	d4f6 <_ZN8Tourelle12updateSimpleEv+0x3a>
    }
    else
    {
        this->alerte = false;
    d4e8:	687b      	ldr	r3, [r7, #4]
    d4ea:	f04f 0200 	mov.w	r2, #0	; 0x0
    d4ee:	701a      	strb	r2, [r3, #0]
        return false;
    d4f0:	f04f 0300 	mov.w	r3, #0	; 0x0
    d4f4:	603b      	str	r3, [r7, #0]
    d4f6:	683b      	ldr	r3, [r7, #0]
    }
}
    d4f8:	4618      	mov	r0, r3
    d4fa:	f107 0714 	add.w	r7, r7, #20	; 0x14
    d4fe:	46bd      	mov	sp, r7
    d500:	bc80      	pop	{r7}
    d502:	4770      	bx	lr
    d504:	20000585 	.word	0x20000585

0000d508 <EXTI3_IRQHandler>:
/**
  * @brief  This function handles External line 3 interrupt request.
  * @param  None
  * @retval None
  */
extern "C" void EXTI3_IRQHandler(void)
    d508:	b580      	push	{r7, lr}
    d50a:	af00      	add	r7, sp, #0
{
    if(EXTI_GetITStatus(EXTI_Line3) != RESET)
    d50c:	f04f 0008 	mov.w	r0, #8	; 0x8
    d510:	f7f3 fffa 	bl	1508 <EXTI_GetITStatus>
    d514:	4603      	mov	r3, r0
    d516:	2b00      	cmp	r3, #0
    d518:	bf0c      	ite	eq
    d51a:	2300      	moveq	r3, #0
    d51c:	2301      	movne	r3, #1
    d51e:	b2db      	uxtb	r3, r3
    d520:	2b00      	cmp	r3, #0
    d522:	d00c      	beq.n	d53e <EXTI3_IRQHandler+0x36>

//        if(nombreObjetDetecte < 20)
//        {
            //Stocke l'instant de détection de l'objet
            //objectDetectionInstant[nombreObjetDetecte] = TIM_GetCounter(TIM6);
            nombreObjetDetecte++;
    d524:	4b07      	ldr	r3, [pc, #28]	(d544 <EXTI3_IRQHandler+0x3c>)
    d526:	781b      	ldrb	r3, [r3, #0]
    d528:	f103 0301 	add.w	r3, r3, #1	; 0x1
    d52c:	b2db      	uxtb	r3, r3
    d52e:	4a05      	ldr	r2, [pc, #20]	(d544 <EXTI3_IRQHandler+0x3c>)
    d530:	7013      	strb	r3, [r2, #0]

            allumerLED2();
    d532:	f7fe fd01 	bl	bf38 <_Z11allumerLED2v>

//        }

        /* Clear the EXTI line 2 pending bit */
        EXTI_ClearITPendingBit(EXTI_Line3);
    d536:	f04f 0008 	mov.w	r0, #8	; 0x8
    d53a:	f7f4 f80f 	bl	155c <EXTI_ClearITPendingBit>
    }
}
    d53e:	46bd      	mov	sp, r7
    d540:	bd80      	pop	{r7, pc}
    d542:	46c0      	nop			(mov r8, r8)
    d544:	20000585 	.word	0x20000585

0000d548 <_Z16EXTILine5_Configv>:
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
#endif
}

void EXTILine5_Config(void)
    d548:	b580      	push	{r7, lr}
    d54a:	b084      	sub	sp, #16
    d54c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    d54e:	f04f 0020 	mov.w	r0, #32	; 0x20
    d552:	f04f 0101 	mov.w	r1, #1	; 0x1
    d556:	f7f4 ff55 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    d55a:	f04f 0328 	mov.w	r3, #40	; 0x28
    d55e:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    d560:	f04f 0320 	mov.w	r3, #32	; 0x20
    d564:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    d566:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d56a:	4817      	ldr	r0, [pc, #92]	(d5c8 <_Z16EXTILine5_Configv+0x80>)
    d56c:	4619      	mov	r1, r3
    d56e:	f7f4 f89f 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource5);
    d572:	f04f 0003 	mov.w	r0, #3	; 0x3
    d576:	f04f 0105 	mov.w	r1, #5	; 0x5
    d57a:	f7f4 faff 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line5 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line5;
    d57e:	f04f 0320 	mov.w	r3, #32	; 0x20
    d582:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    d584:	f04f 0300 	mov.w	r3, #0	; 0x0
    d588:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    d58a:	f04f 0308 	mov.w	r3, #8	; 0x8
    d58e:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    d590:	f04f 0301 	mov.w	r3, #1	; 0x1
    d594:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    d596:	463b      	mov	r3, r7
    d598:	4618      	mov	r0, r3
    d59a:	f7f3 fedd 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;//EXTI5_IRQn;
    d59e:	f04f 0317 	mov.w	r3, #23	; 0x17
    d5a2:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;//0x01 for lowest priority
    d5a4:	f04f 0301 	mov.w	r3, #1	; 0x1
    d5a8:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    d5aa:	f04f 0301 	mov.w	r3, #1	; 0x1
    d5ae:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    d5b0:	f04f 0301 	mov.w	r3, #1	; 0x1
    d5b4:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    d5b6:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d5ba:	4618      	mov	r0, r3
    d5bc:	f7f2 fe2e 	bl	21c <NVIC_Init>
#endif
}
    d5c0:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d5c4:	46bd      	mov	sp, r7
    d5c6:	bd80      	pop	{r7, pc}
    d5c8:	40010800 	.word	0x40010800

0000d5cc <_Z16EXTILine3_Configv>:
/**
  * @brief  Configures EXTI Line3 (connected to PA3 pin) in interrupt mode
  * @param  None
  * @retval None
  */
void EXTILine3_Config(void)
    d5cc:	b580      	push	{r7, lr}
    d5ce:	b084      	sub	sp, #16
    d5d0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef   NVIC_InitStructure;

    EXTI_InitTypeDef   EXTI_InitStructure;

    /* Enable GPIOA clock */
    RCC_AHBPeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
    d5d2:	f04f 0020 	mov.w	r0, #32	; 0x20
    d5d6:	f04f 0101 	mov.w	r1, #1	; 0x1
    d5da:	f7f4 ff13 	bl	2404 <RCC_AHBPeriphClockCmd>
    //RCC_AHBPeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    /* AFIO clock enabled dans initialisation.cpp */


    /* Configure PA3 pin as input floating */
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
    d5de:	f04f 0328 	mov.w	r3, #40	; 0x28
    d5e2:	73fb      	strb	r3, [r7, #15]
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    d5e4:	f04f 0308 	mov.w	r3, #8	; 0x8
    d5e8:	81bb      	strh	r3, [r7, #12]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    d5ea:	f107 030c 	add.w	r3, r7, #12	; 0xc
    d5ee:	4817      	ldr	r0, [pc, #92]	(d64c <_Z16EXTILine3_Configv+0x80>)
    d5f0:	4619      	mov	r1, r3
    d5f2:	f7f4 f85d 	bl	16b0 <GPIO_Init>

    /* Connect EXTI Line3 to PD5 pin */
    //GPIO_EventOutputConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOD, GPIO_PinSource3);
    d5f6:	f04f 0003 	mov.w	r0, #3	; 0x3
    d5fa:	f04f 0103 	mov.w	r1, #3	; 0x3
    d5fe:	f7f4 fabd 	bl	1b7c <GPIO_EXTILineConfig>

    /* Configure EXTI Line3 */
    EXTI_InitStructure.EXTI_Line = EXTI_Line3;
    d602:	f04f 0308 	mov.w	r3, #8	; 0x8
    d606:	603b      	str	r3, [r7, #0]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
    d608:	f04f 0300 	mov.w	r3, #0	; 0x0
    d60c:	713b      	strb	r3, [r7, #4]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
    d60e:	f04f 0308 	mov.w	r3, #8	; 0x8
    d612:	717b      	strb	r3, [r7, #5]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
    d614:	f04f 0301 	mov.w	r3, #1	; 0x1
    d618:	71bb      	strb	r3, [r7, #6]
    EXTI_Init(&EXTI_InitStructure);
    d61a:	463b      	mov	r3, r7
    d61c:	4618      	mov	r0, r3
    d61e:	f7f3 fe9b 	bl	1358 <EXTI_Init>

    /* Enable and set EXTI Line5 Interrupt to the (not anymore) lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;//EXTI5_IRQn;
    d622:	f04f 0309 	mov.w	r3, #9	; 0x9
    d626:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x08;//0x01 for lowest priority
    d628:	f04f 0308 	mov.w	r3, #8	; 0x8
    d62c:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
    d62e:	f04f 0301 	mov.w	r3, #1	; 0x1
    d632:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    d634:	f04f 0301 	mov.w	r3, #1	; 0x1
    d638:	72fb      	strb	r3, [r7, #11]
    NVIC_Init(&NVIC_InitStructure);
    d63a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    d63e:	4618      	mov	r0, r3
    d640:	f7f2 fdec 	bl	21c <NVIC_Init>
#endif
}
    d644:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d648:	46bd      	mov	sp, r7
    d64a:	bd80      	pop	{r7, pc}
    d64c:	40010800 	.word	0x40010800

0000d650 <_ZN8TourelleC1Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    d650:	b580      	push	{r7, lr}
    d652:	b082      	sub	sp, #8
    d654:	af00      	add	r7, sp, #0
    d656:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    d658:	687a      	ldr	r2, [r7, #4]
    d65a:	f04f 0300 	mov.w	r3, #0	; 0x0
    d65e:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    d660:	4a05      	ldr	r2, [pc, #20]	(d678 <_ZN8TourelleC1Ev+0x28>)
    d662:	f04f 0300 	mov.w	r3, #0	; 0x0
    d666:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    d668:	f7ff ffb0 	bl	d5cc <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    d66c:	687b      	ldr	r3, [r7, #4]
    d66e:	4618      	mov	r0, r3
    d670:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d674:	46bd      	mov	sp, r7
    d676:	bd80      	pop	{r7, pc}
    d678:	20000585 	.word	0x20000585

0000d67c <_ZN8TourelleC2Ev>:
//uint16_t objectDetectionInstant[20];

/** @brief nombre d'objets détectés */
uint8_t nombreObjetDetecte;

Tourelle::Tourelle()
    d67c:	b580      	push	{r7, lr}
    d67e:	b082      	sub	sp, #8
    d680:	af00      	add	r7, sp, #0
    d682:	6078      	str	r0, [r7, #4]
{
    alerte = false;
    d684:	687a      	ldr	r2, [r7, #4]
    d686:	f04f 0300 	mov.w	r3, #0	; 0x0
    d68a:	7013      	strb	r3, [r2, #0]

    nombreObjetDetecte = 0;
    d68c:	4a05      	ldr	r2, [pc, #20]	(d6a4 <_ZN8TourelleC2Ev+0x28>)
    d68e:	f04f 0300 	mov.w	r3, #0	; 0x0
    d692:	7013      	strb	r3, [r2, #0]

    //EXTILine2_Config();
    EXTILine3_Config();
    d694:	f7ff ff9a 	bl	d5cc <_Z16EXTILine3_Configv>
//        EXTILine3_Config();
//    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
//        EXTILine5_Config();
//    #endif

}
    d698:	687b      	ldr	r3, [r7, #4]
    d69a:	4618      	mov	r0, r3
    d69c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d6a0:	46bd      	mov	sp, r7
    d6a2:	bd80      	pop	{r7, pc}
    d6a4:	20000585 	.word	0x20000585

0000d6a8 <_ZN16UltrasoundSensor7getNameEv>:
UltrasoundSensor::~UltrasoundSensor()
{
    //dtor
}

UltrasoundSensor::UltrasoundName UltrasoundSensor::getName()
    d6a8:	b480      	push	{r7}
    d6aa:	b083      	sub	sp, #12
    d6ac:	af00      	add	r7, sp, #0
    d6ae:	6078      	str	r0, [r7, #4]
{
    return name;
    d6b0:	687b      	ldr	r3, [r7, #4]
    d6b2:	7b1b      	ldrb	r3, [r3, #12]
}
    d6b4:	4618      	mov	r0, r3
    d6b6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    d6ba:	46bd      	mov	sp, r7
    d6bc:	bc80      	pop	{r7}
    d6be:	4770      	bx	lr

0000d6c0 <_ZN16UltrasoundSensor8getValueEv>:


Sensor::OutputSensor UltrasoundSensor::getValue()
    d6c0:	b580      	push	{r7, lr}
    d6c2:	b086      	sub	sp, #24
    d6c4:	af00      	add	r7, sp, #0
    d6c6:	6038      	str	r0, [r7, #0]
    d6c8:	6079      	str	r1, [r7, #4]
{
    while(!AnalogSensor::conversionFinished());    // au cas où l'interrupt de l'asservissement tombe avant la fin de l'acquisition/conversion
    d6ca:	f7fd f84b 	bl	a764 <_ZN12AnalogSensor18conversionFinishedEv>
    d6ce:	4603      	mov	r3, r0
    d6d0:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    d6d4:	b2db      	uxtb	r3, r3
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d1f7      	bne.n	d6ca <_ZN16UltrasoundSensor8getValueEv+0xa>
     **     POUR AVOIR LA VALEUR DES CAPTEURS     **
     **                                           **
     **                                           **
     ***********************************************/
    OutputSensor output;
    output.type = ULTRASOUND;
    d6da:	f04f 0301 	mov.w	r3, #1	; 0x1
    d6de:	683a      	ldr	r2, [r7, #0]
    d6e0:	7013      	strb	r3, [r2, #0]
    output.b = false;
    d6e2:	f04f 0300 	mov.w	r3, #0	; 0x0
    d6e6:	683a      	ldr	r2, [r7, #0]
    d6e8:	7213      	strb	r3, [r2, #8]
    #ifdef ROBOTHW
    output.f = coeff*(*data)/2.;
    d6ea:	687b      	ldr	r3, [r7, #4]
    d6ec:	689b      	ldr	r3, [r3, #8]
    d6ee:	881b      	ldrh	r3, [r3, #0]
    d6f0:	4618      	mov	r0, r3
    d6f2:	f00b fa71 	bl	18bd8 <__aeabi_i2f>
    d6f6:	4602      	mov	r2, r0
    d6f8:	4b09      	ldr	r3, [pc, #36]	(d720 <_ZN16UltrasoundSensor8getValueEv+0x60>)
    d6fa:	681b      	ldr	r3, [r3, #0]
    d6fc:	4610      	mov	r0, r2
    d6fe:	4619      	mov	r1, r3
    d700:	f00b fabe 	bl	18c80 <__aeabi_fmul>
    d704:	4603      	mov	r3, r0
    d706:	4618      	mov	r0, r3
    d708:	4906      	ldr	r1, [pc, #24]	(d724 <_ZN16UltrasoundSensor8getValueEv+0x64>)
    d70a:	f00b fb6d 	bl	18de8 <__aeabi_fdiv>
    d70e:	4603      	mov	r3, r0
    d710:	683a      	ldr	r2, [r7, #0]
    d712:	6053      	str	r3, [r2, #4]
    #else
    output.f = 0;
    #endif
    return output;
}
    d714:	6838      	ldr	r0, [r7, #0]
    d716:	f107 0718 	add.w	r7, r7, #24	; 0x18
    d71a:	46bd      	mov	sp, r7
    d71c:	bd80      	pop	{r7, pc}
    d71e:	46c0      	nop			(mov r8, r8)
    d720:	20000028 	.word	0x20000028
    d724:	40000000 	.word	0x40000000

0000d728 <_ZN16UltrasoundSensorD0Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    d728:	b580      	push	{r7, lr}
    d72a:	b082      	sub	sp, #8
    d72c:	af00      	add	r7, sp, #0
    d72e:	6078      	str	r0, [r7, #4]
    d730:	687a      	ldr	r2, [r7, #4]
    d732:	4b0a      	ldr	r3, [pc, #40]	(d75c <_ZN16UltrasoundSensorD0Ev+0x34>)
    d734:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d736:	687b      	ldr	r3, [r7, #4]
    d738:	4618      	mov	r0, r3
    d73a:	f7fd f907 	bl	a94c <_ZN12AnalogSensorD2Ev>
    d73e:	f04f 0301 	mov.w	r3, #1	; 0x1
    d742:	b2db      	uxtb	r3, r3
    d744:	2b00      	cmp	r3, #0
    d746:	d002      	beq.n	d74e <_ZN16UltrasoundSensorD0Ev+0x26>
    d748:	6878      	ldr	r0, [r7, #4]
    d74a:	f000 feab 	bl	e4a4 <_ZdlPv>
    d74e:	687b      	ldr	r3, [r7, #4]
    d750:	4618      	mov	r0, r3
    d752:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d756:	46bd      	mov	sp, r7
    d758:	bd80      	pop	{r7, pc}
    d75a:	46c0      	nop			(mov r8, r8)
    d75c:	0001fbe8 	.word	0x0001fbe8

0000d760 <_ZN16UltrasoundSensorD1Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    d760:	b580      	push	{r7, lr}
    d762:	b082      	sub	sp, #8
    d764:	af00      	add	r7, sp, #0
    d766:	6078      	str	r0, [r7, #4]
    d768:	687a      	ldr	r2, [r7, #4]
    d76a:	4b0a      	ldr	r3, [pc, #40]	(d794 <_ZN16UltrasoundSensorD1Ev+0x34>)
    d76c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d76e:	687b      	ldr	r3, [r7, #4]
    d770:	4618      	mov	r0, r3
    d772:	f7fd f8eb 	bl	a94c <_ZN12AnalogSensorD2Ev>
    d776:	f04f 0300 	mov.w	r3, #0	; 0x0
    d77a:	b2db      	uxtb	r3, r3
    d77c:	2b00      	cmp	r3, #0
    d77e:	d002      	beq.n	d786 <_ZN16UltrasoundSensorD1Ev+0x26>
    d780:	6878      	ldr	r0, [r7, #4]
    d782:	f000 fe8f 	bl	e4a4 <_ZdlPv>
    d786:	687b      	ldr	r3, [r7, #4]
    d788:	4618      	mov	r0, r3
    d78a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d78e:	46bd      	mov	sp, r7
    d790:	bd80      	pop	{r7, pc}
    d792:	46c0      	nop			(mov r8, r8)
    d794:	0001fbe8 	.word	0x0001fbe8

0000d798 <_ZN16UltrasoundSensorD2Ev>:
UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
{
    this->name = name;
}

UltrasoundSensor::~UltrasoundSensor()
    d798:	b580      	push	{r7, lr}
    d79a:	b082      	sub	sp, #8
    d79c:	af00      	add	r7, sp, #0
    d79e:	6078      	str	r0, [r7, #4]
    d7a0:	687a      	ldr	r2, [r7, #4]
    d7a2:	4b0a      	ldr	r3, [pc, #40]	(d7cc <_ZN16UltrasoundSensorD2Ev+0x34>)
    d7a4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    d7a6:	687b      	ldr	r3, [r7, #4]
    d7a8:	4618      	mov	r0, r3
    d7aa:	f7fd f8cf 	bl	a94c <_ZN12AnalogSensorD2Ev>
    d7ae:	f04f 0300 	mov.w	r3, #0	; 0x0
    d7b2:	b2db      	uxtb	r3, r3
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d002      	beq.n	d7be <_ZN16UltrasoundSensorD2Ev+0x26>
    d7b8:	6878      	ldr	r0, [r7, #4]
    d7ba:	f000 fe73 	bl	e4a4 <_ZdlPv>
    d7be:	687b      	ldr	r3, [r7, #4]
    d7c0:	4618      	mov	r0, r3
    d7c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d7c6:	46bd      	mov	sp, r7
    d7c8:	bd80      	pop	{r7, pc}
    d7ca:	46c0      	nop			(mov r8, r8)
    d7cc:	0001fbe8 	.word	0x0001fbe8

0000d7d0 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    d7d0:	b580      	push	{r7, lr}
    d7d2:	b084      	sub	sp, #16
    d7d4:	af00      	add	r7, sp, #0
    d7d6:	60f8      	str	r0, [r7, #12]
    d7d8:	607b      	str	r3, [r7, #4]
    d7da:	460b      	mov	r3, r1
    d7dc:	72fb      	strb	r3, [r7, #11]
    d7de:	4613      	mov	r3, r2
    d7e0:	72bb      	strb	r3, [r7, #10]
    d7e2:	68fb      	ldr	r3, [r7, #12]
    d7e4:	7aba      	ldrb	r2, [r7, #10]
    d7e6:	4618      	mov	r0, r3
    d7e8:	4611      	mov	r1, r2
    d7ea:	687a      	ldr	r2, [r7, #4]
    d7ec:	f7fd f8f4 	bl	a9d8 <_ZN12AnalogSensorC2EhPt>
    d7f0:	68fa      	ldr	r2, [r7, #12]
    d7f2:	4b05      	ldr	r3, [pc, #20]	(d808 <_ZN16UltrasoundSensorC1ENS_14UltrasoundNameEhPt+0x38>)
    d7f4:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d7f6:	68fa      	ldr	r2, [r7, #12]
    d7f8:	7afb      	ldrb	r3, [r7, #11]
    d7fa:	7313      	strb	r3, [r2, #12]
}
    d7fc:	68fb      	ldr	r3, [r7, #12]
    d7fe:	4618      	mov	r0, r3
    d800:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d804:	46bd      	mov	sp, r7
    d806:	bd80      	pop	{r7, pc}
    d808:	0001fbe8 	.word	0x0001fbe8

0000d80c <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt>:
#include "ultrasoundSensor.h"

float UltrasoundSensor::coeff = COEFFICIENT_LIN_ULTRASON;

UltrasoundSensor::UltrasoundSensor(UltrasoundName name, uint8_t channel, DMA_MEMORY_TYPE* pData) : AnalogSensor(channel, pData)
    d80c:	b580      	push	{r7, lr}
    d80e:	b084      	sub	sp, #16
    d810:	af00      	add	r7, sp, #0
    d812:	60f8      	str	r0, [r7, #12]
    d814:	607b      	str	r3, [r7, #4]
    d816:	460b      	mov	r3, r1
    d818:	72fb      	strb	r3, [r7, #11]
    d81a:	4613      	mov	r3, r2
    d81c:	72bb      	strb	r3, [r7, #10]
    d81e:	68fb      	ldr	r3, [r7, #12]
    d820:	7aba      	ldrb	r2, [r7, #10]
    d822:	4618      	mov	r0, r3
    d824:	4611      	mov	r1, r2
    d826:	687a      	ldr	r2, [r7, #4]
    d828:	f7fd f8d6 	bl	a9d8 <_ZN12AnalogSensorC2EhPt>
    d82c:	68fa      	ldr	r2, [r7, #12]
    d82e:	4b05      	ldr	r3, [pc, #20]	(d844 <_ZN16UltrasoundSensorC2ENS_14UltrasoundNameEhPt+0x38>)
    d830:	6013      	str	r3, [r2, #0]
{
    this->name = name;
    d832:	68fa      	ldr	r2, [r7, #12]
    d834:	7afb      	ldrb	r3, [r7, #11]
    d836:	7313      	strb	r3, [r2, #12]
}
    d838:	68fb      	ldr	r3, [r7, #12]
    d83a:	4618      	mov	r0, r3
    d83c:	f107 0710 	add.w	r7, r7, #16	; 0x10
    d840:	46bd      	mov	sp, r7
    d842:	bd80      	pop	{r7, pc}
    d844:	0001fbe8 	.word	0x0001fbe8

0000d848 <_Z20initialisationDesPINv>:



// Mettez toutes vos initialisations de PIN dans la fonction "initialisation"
// On l'appellera ensuite dans le main au tout début pour tout initialiser d'un coup
void initialisationDesPIN()
    d848:	b580      	push	{r7, lr}
    d84a:	b082      	sub	sp, #8
    d84c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

#ifdef STM32F10X_CL // Pour le stm32 h107

    // Pompe à vide
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    d84e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    d852:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    d854:	f04f 0310 	mov.w	r3, #16	; 0x10
    d858:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    d85a:	f04f 0302 	mov.w	r3, #2	; 0x2
    d85e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    d860:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d864:	4845      	ldr	r0, [pc, #276]	(d97c <_Z20initialisationDesPINv+0x134>)
    d866:	4619      	mov	r1, r3
    d868:	f7f3 ff22 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOD, GPIO_Pin_14, Bit_RESET);
    d86c:	4843      	ldr	r0, [pc, #268]	(d97c <_Z20initialisationDesPINv+0x134>)
    d86e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    d872:	f04f 0200 	mov.w	r2, #0	; 0x0
    d876:	f7f4 f889 	bl	198c <GPIO_WriteBit>

    // Patte coté de la partie bleu ou jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
    d87a:	f04f 0310 	mov.w	r3, #16	; 0x10
    d87e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    d880:	f04f 0304 	mov.w	r3, #4	; 0x4
    d884:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d886:	f04f 0303 	mov.w	r3, #3	; 0x3
    d88a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d88c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d890:	483b      	ldr	r0, [pc, #236]	(d980 <_Z20initialisationDesPINv+0x138>)
    d892:	4619      	mov	r1, r3
    d894:	f7f3 ff0c 	bl	16b0 <GPIO_Init>
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOB, &GPIO_InitStructure);
*/

    GPIO_PinRemapConfig(GPIO_FullRemap_TIM1, ENABLE);
    d898:	483a      	ldr	r0, [pc, #232]	(d984 <_Z20initialisationDesPINv+0x13c>)
    d89a:	f04f 0101 	mov.w	r1, #1	; 0x1
    d89e:	f7f4 f8f7 	bl	1a90 <GPIO_PinRemapConfig>

    // Pattes des servos
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    d8a2:	f44f 7300 	mov.w	r3, #512	; 0x200
    d8a6:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d8a8:	f04f 0318 	mov.w	r3, #24	; 0x18
    d8ac:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d8ae:	f04f 0303 	mov.w	r3, #3	; 0x3
    d8b2:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d8b4:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d8b8:	4831      	ldr	r0, [pc, #196]	(d980 <_Z20initialisationDesPINv+0x138>)
    d8ba:	4619      	mov	r1, r3
    d8bc:	f7f3 fef8 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    d8c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    d8c4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d8c6:	f04f 0318 	mov.w	r3, #24	; 0x18
    d8ca:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d8cc:	f04f 0303 	mov.w	r3, #3	; 0x3
    d8d0:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d8d2:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d8d6:	482a      	ldr	r0, [pc, #168]	(d980 <_Z20initialisationDesPINv+0x138>)
    d8d8:	4619      	mov	r1, r3
    d8da:	f7f3 fee9 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
    d8de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    d8e2:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d8e4:	f04f 0318 	mov.w	r3, #24	; 0x18
    d8e8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d8ea:	f04f 0303 	mov.w	r3, #3	; 0x3
    d8ee:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d8f0:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d8f4:	4822      	ldr	r0, [pc, #136]	(d980 <_Z20initialisationDesPINv+0x138>)
    d8f6:	4619      	mov	r1, r3
    d8f8:	f7f3 feda 	bl	16b0 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
    d8fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    d900:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    d902:	f04f 0318 	mov.w	r3, #24	; 0x18
    d906:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    d908:	f04f 0303 	mov.w	r3, #3	; 0x3
    d90c:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOE, &GPIO_InitStructure);
    d90e:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d912:	481b      	ldr	r0, [pc, #108]	(d980 <_Z20initialisationDesPINv+0x138>)
    d914:	4619      	mov	r1, r3
    d916:	f7f3 fecb 	bl	16b0 <GPIO_Init>

    // LED Verte
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
    d91a:	f04f 0340 	mov.w	r3, #64	; 0x40
    d91e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    d920:	f04f 0310 	mov.w	r3, #16	; 0x10
    d924:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    d926:	f04f 0302 	mov.w	r3, #2	; 0x2
    d92a:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    d92c:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d930:	4815      	ldr	r0, [pc, #84]	(d988 <_Z20initialisationDesPINv+0x140>)
    d932:	4619      	mov	r1, r3
    d934:	f7f3 febc 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_6, Bit_RESET);
    d938:	4813      	ldr	r0, [pc, #76]	(d988 <_Z20initialisationDesPINv+0x140>)
    d93a:	f04f 0140 	mov.w	r1, #64	; 0x40
    d93e:	f04f 0200 	mov.w	r2, #0	; 0x0
    d942:	f7f4 f823 	bl	198c <GPIO_WriteBit>

    // LED Jaune
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
    d946:	f04f 0380 	mov.w	r3, #128	; 0x80
    d94a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    d94c:	f04f 0310 	mov.w	r3, #16	; 0x10
    d950:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    d952:	f04f 0302 	mov.w	r3, #2	; 0x2
    d956:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    d958:	f107 0304 	add.w	r3, r7, #4	; 0x4
    d95c:	480a      	ldr	r0, [pc, #40]	(d988 <_Z20initialisationDesPINv+0x140>)
    d95e:	4619      	mov	r1, r3
    d960:	f7f3 fea6 	bl	16b0 <GPIO_Init>
    GPIO_WriteBit(GPIOC, GPIO_Pin_7, Bit_RESET);
    d964:	4808      	ldr	r0, [pc, #32]	(d988 <_Z20initialisationDesPINv+0x140>)
    d966:	f04f 0180 	mov.w	r1, #128	; 0x80
    d96a:	f04f 0200 	mov.w	r2, #0	; 0x0
    d96e:	f7f4 f80d 	bl	198c <GPIO_WriteBit>
    GPIO_Init(GPIOC, &GPIO_InitStructure);
    GPIO_WriteBit(GPIOC, GPIO_Pin_12, Bit_SET);

#endif //STM32F40_41xxx

}
    d972:	f107 0708 	add.w	r7, r7, #8	; 0x8
    d976:	46bd      	mov	sp, r7
    d978:	bd80      	pop	{r7, pc}
    d97a:	46c0      	nop			(mov r8, r8)
    d97c:	40011400 	.word	0x40011400
    d980:	40011800 	.word	0x40011800
    d984:	001600c0 	.word	0x001600c0
    d988:	40011000 	.word	0x40011000

0000d98c <_Z18initAutresHorlogesv>:
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    #endif
}

// Définit quelques horloges supplémentaires
void initAutresHorloges()
    d98c:	b580      	push	{r7, lr}
    d98e:	af00      	add	r7, sp, #0
        // Sharps
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);

    #elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
        RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    d990:	f04f 0001 	mov.w	r0, #1	; 0x1
    d994:	f04f 0101 	mov.w	r1, #1	; 0x1
    d998:	f7f4 fd34 	bl	2404 <RCC_AHBPeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    d99c:	f44f 7000 	mov.w	r0, #512	; 0x200
    d9a0:	f04f 0101 	mov.w	r1, #1	; 0x1
    d9a4:	f7f4 fd50 	bl	2448 <RCC_APB2PeriphClockCmd>
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    d9a8:	f04f 0001 	mov.w	r0, #1	; 0x1
    d9ac:	f04f 0101 	mov.w	r1, #1	; 0x1
    d9b0:	f7f4 fd4a 	bl	2448 <RCC_APB2PeriphClockCmd>
        #ifdef STM32F10X_CL // stm h107
            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE, ENABLE);
    d9b4:	f04f 007c 	mov.w	r0, #124	; 0x7c
    d9b8:	f04f 0101 	mov.w	r1, #1	; 0x1
    d9bc:	f7f4 fd44 	bl	2448 <RCC_APB2PeriphClockCmd>
        #endif
    #endif
}
    d9c0:	46bd      	mov	sp, r7
    d9c2:	bd80      	pop	{r7, pc}

0000d9c4 <_Z8Clk_Initv>:
//#include "stm32f10x_remap.h"

#include "initialisation.h"

// Initialise le système d'horloge
void Clk_Init()
    d9c4:	b580      	push	{r7, lr}
    d9c6:	af00      	add	r7, sp, #0
{
    //Rien pour le STM32F4, tout est déjà fait dans SystemInit(), appelée implicitement
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        // Démarre l'horloge interne (8 MHz)
        RCC_HSICmd(ENABLE);
    d9c8:	f04f 0001 	mov.w	r0, #1	; 0x1
    d9cc:	f7f4 f9f0 	bl	1db0 <RCC_HSICmd>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
    d9d0:	f04f 0021 	mov.w	r0, #33	; 0x21
    d9d4:	f7f4 fe12 	bl	25fc <RCC_GetFlagStatus>
    d9d8:	4603      	mov	r3, r0
    d9da:	2b00      	cmp	r3, #0
    d9dc:	bf14      	ite	ne
    d9de:	2300      	movne	r3, #0
    d9e0:	2301      	moveq	r3, #1
    d9e2:	b2db      	uxtb	r3, r3
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	d1f3      	bne.n	d9d0 <_Z8Clk_Initv+0xc>
        // Une fois demarée, on utilise celle ci
        RCC_SYSCLKConfig(RCC_SYSCLKSource_HSI);
    d9e8:	f04f 0000 	mov.w	r0, #0	; 0x0
    d9ec:	f7f4 fac0 	bl	1f70 <RCC_SYSCLKConfig>

        // Démarre l'horloge externe à 25MHz
        RCC_HSEConfig(RCC_HSE_ON);
    d9f0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d9f4:	f7f4 f95a 	bl	1cac <RCC_HSEConfig>
        // On attend qu'elle soit allumée
        while(RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
    d9f8:	f04f 0031 	mov.w	r0, #49	; 0x31
    d9fc:	f7f4 fdfe 	bl	25fc <RCC_GetFlagStatus>
    da00:	4603      	mov	r3, r0
    da02:	2b00      	cmp	r3, #0
    da04:	bf14      	ite	ne
    da06:	2300      	movne	r3, #0
    da08:	2301      	moveq	r3, #1
    da0a:	b2db      	uxtb	r3, r3
    da0c:	2b00      	cmp	r3, #0
    da0e:	d1f3      	bne.n	d9f8 <_Z8Clk_Initv+0x34>


        // PLL2 à (8/5) * 25Mhz = 40 Mhz
        RCC_PREDIV2Config(RCC_PREDIV2_Div5);
    da10:	f04f 0040 	mov.w	r0, #64	; 0x40
    da14:	f7f4 fa32 	bl	1e7c <RCC_PREDIV2Config>
        RCC_PLL2Config(RCC_PLL2Mul_8);
    da18:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    da1c:	f7f4 fa4c 	bl	1eb8 <RCC_PLL2Config>
        // On démarre le PLL2 une fois la config entrée
        RCC_PLL2Cmd(ENABLE);
    da20:	f04f 0001 	mov.w	r0, #1	; 0x1
    da24:	f7f4 fa66 	bl	1ef4 <RCC_PLL2Cmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET);
    da28:	f04f 003b 	mov.w	r0, #59	; 0x3b
    da2c:	f7f4 fde6 	bl	25fc <RCC_GetFlagStatus>
    da30:	4603      	mov	r3, r0
    da32:	2b00      	cmp	r3, #0
    da34:	bf14      	ite	ne
    da36:	2300      	movne	r3, #0
    da38:	2301      	moveq	r3, #1
    da3a:	b2db      	uxtb	r3, r3
    da3c:	2b00      	cmp	r3, #0
    da3e:	d1f3      	bne.n	da28 <_Z8Clk_Initv+0x64>

        // Initialisation du PL à (9/5) * 40MHz = 72MHz
        RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
    da40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    da44:	f04f 0104 	mov.w	r1, #4	; 0x4
    da48:	f7f4 f9f4 	bl	1e34 <RCC_PREDIV1Config>
        RCC_PLLConfig(RCC_PLLSource_PREDIV1, RCC_PLLMul_9);
    da4c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    da50:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
    da54:	f7f4 f9bc 	bl	1dd0 <RCC_PLLConfig>
        // On démarre le PLL une fois la config entrée
        RCC_PLLCmd(ENABLE);
    da58:	f04f 0001 	mov.w	r0, #1	; 0x1
    da5c:	f7f4 f9da 	bl	1e14 <RCC_PLLCmd>
        // On attend qu'il soit vraiment allumé
        while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
    da60:	f04f 0039 	mov.w	r0, #57	; 0x39
    da64:	f7f4 fdca 	bl	25fc <RCC_GetFlagStatus>
    da68:	4603      	mov	r3, r0
    da6a:	2b00      	cmp	r3, #0
    da6c:	bf14      	ite	ne
    da6e:	2300      	movne	r3, #0
    da70:	2301      	moveq	r3, #1
    da72:	b2db      	uxtb	r3, r3
    da74:	2b00      	cmp	r3, #0
    da76:	d1f3      	bne.n	da60 <_Z8Clk_Initv+0x9c>

        // On démarre les composants internes au microcontroleur
        RCC_OTGFSCLKConfig(RCC_OTGFSCLKSource_PLLVCO_Div3); // USB OTG FS clock (OTGFSCLK)
    da78:	f04f 0000 	mov.w	r0, #0	; 0x0
    da7c:	f7f4 fb28 	bl	20d0 <RCC_OTGFSCLKConfig>
        RCC_ADCCLKConfig(RCC_PCLK2_Div6); // ADC clock (ADCCLK) : 72MHz / 6 = 12MHz
    da80:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    da84:	f7f4 fb32 	bl	20ec <RCC_ADCCLKConfig>
        RCC_PCLK2Config(RCC_HCLK_Div1); // High Speed APB clock (PCLK2) : 72Mhz
    da88:	f04f 0000 	mov.w	r0, #0	; 0x0
    da8c:	f7f4 fad8 	bl	2040 <RCC_PCLK2Config>
        RCC_PCLK1Config(RCC_HCLK_Div2); // Low Speed APB clock (PCLK1) : 72Mhz / 2 = 36MHz
    da90:	f44f 6080 	mov.w	r0, #1024	; 0x400
    da94:	f7f4 fab6 	bl	2004 <RCC_PCLK1Config>
        RCC_HCLKConfig(RCC_SYSCLK_Div1); // AHB clock (HCLK) : 72Mhz
    da98:	f04f 0000 	mov.w	r0, #0	; 0x0
    da9c:	f7f4 fa94 	bl	1fc8 <RCC_HCLKConfig>
        // Flash 1 wait state
        *(vu32 *)0x40022000 = 0x12;
    daa0:	4a04      	ldr	r2, [pc, #16]	(dab4 <_Z8Clk_Initv+0xf0>)
    daa2:	f04f 0312 	mov.w	r3, #18	; 0x12
    daa6:	6013      	str	r3, [r2, #0]
        // On utilise le PLL comme horloge de référence
        RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK); // system clock (SYSCLK) : 72MHz
    daa8:	f04f 0002 	mov.w	r0, #2	; 0x2
    daac:	f7f4 fa60 	bl	1f70 <RCC_SYSCLKConfig>
    #endif
}
    dab0:	46bd      	mov	sp, r7
    dab2:	bd80      	pop	{r7, pc}
    dab4:	40022000 	.word	0x40022000

0000dab8 <_ZN16ServosNumeriques11receiveDataEv>:
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    USART_SendData(USART3, (u16) data);
}

int receiveData()
    dab8:	b480      	push	{r7}
    daba:	af00      	add	r7, sp, #0
{
    while (!(USART3->SR & USART_FLAG_RXNE));
    dabc:	4b0b      	ldr	r3, [pc, #44]	(daec <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    dabe:	881b      	ldrh	r3, [r3, #0]
    dac0:	b29b      	uxth	r3, r3
    dac2:	f003 0320 	and.w	r3, r3, #32	; 0x20
    dac6:	2b00      	cmp	r3, #0
    dac8:	bf14      	ite	ne
    daca:	2300      	movne	r3, #0
    dacc:	2301      	moveq	r3, #1
    dace:	b2db      	uxtb	r3, r3
    dad0:	2b00      	cmp	r3, #0
    dad2:	d1f3      	bne.n	dabc <_ZN16ServosNumeriques11receiveDataEv+0x4>

    return ((int)(USART3->DR & 0x1FF));
    dad4:	4b05      	ldr	r3, [pc, #20]	(daec <_ZN16ServosNumeriques11receiveDataEv+0x34>)
    dad6:	889b      	ldrh	r3, [r3, #4]
    dad8:	b29b      	uxth	r3, r3
    dada:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    dade:	ea4f 53d3 	mov.w	r3, r3, lsr #23
}
    dae2:	4618      	mov	r0, r3
    dae4:	46bd      	mov	sp, r7
    dae6:	bc80      	pop	{r7}
    dae8:	4770      	bx	lr
    daea:	46c0      	nop			(mov r8, r8)
    daec:	40004800 	.word	0x40004800

0000daf0 <_ZN16ServosNumeriques19receiveStatusPacketEPi>:

int receiveStatusPacket(int* tableau)
    daf0:	b590      	push	{r4, r7, lr}
    daf2:	b089      	sub	sp, #36
    daf4:	af00      	add	r7, sp, #0
    daf6:	6078      	str	r0, [r7, #4]
{
    int msg = receiveData();
    daf8:	f7ff ffde 	bl	dab8 <_ZN16ServosNumeriques11receiveDataEv>
    dafc:	4603      	mov	r3, r0
    dafe:	60fb      	str	r3, [r7, #12]
    int i = 0;
    db00:	f04f 0300 	mov.w	r3, #0	; 0x0
    db04:	613b      	str	r3, [r7, #16]
    db06:	e003      	b.n	db10 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x20>
    while(msg == 0) {
        msg = receiveData();
    db08:	f7ff ffd6 	bl	dab8 <_ZN16ServosNumeriques11receiveDataEv>
    db0c:	4603      	mov	r3, r0
    db0e:	60fb      	str	r3, [r7, #12]

int receiveStatusPacket(int* tableau)
{
    int msg = receiveData();
    int i = 0;
    while(msg == 0) {
    db10:	68fb      	ldr	r3, [r7, #12]
    db12:	2b00      	cmp	r3, #0
    db14:	d0f8      	beq.n	db08 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x18>
        msg = receiveData();
    } // on attend de lire quelque chose
    if (msg == 0xff) { // début fanion
    db16:	68fb      	ldr	r3, [r7, #12]
    db18:	2bff      	cmp	r3, #255
    db1a:	d176      	bne.n	dc0a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
        msg = receiveData();
    db1c:	f7ff ffcc 	bl	dab8 <_ZN16ServosNumeriques11receiveDataEv>
    db20:	4603      	mov	r3, r0
    db22:	60fb      	str	r3, [r7, #12]
        if (msg == 0xff) { // fin fanion
    db24:	68fb      	ldr	r3, [r7, #12]
    db26:	2bff      	cmp	r3, #255
    db28:	d16f      	bne.n	dc0a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x11a>
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
    db2a:	693b      	ldr	r3, [r7, #16]
    db2c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    db30:	687b      	ldr	r3, [r7, #4]
    db32:	eb03 0402 	add.w	r4, r3, r2
    db36:	f7ff ffbf 	bl	dab8 <_ZN16ServosNumeriques11receiveDataEv>
    db3a:	4603      	mov	r3, r0
    db3c:	6023      	str	r3, [r4, #0]
    db3e:	693b      	ldr	r3, [r7, #16]
    db40:	f103 0301 	add.w	r3, r3, #1	; 0x1
    db44:	613b      	str	r3, [r7, #16]
            tableau[i++] = receiveData(); // on lit la taille du message
    db46:	693b      	ldr	r3, [r7, #16]
    db48:	ea4f 0283 	mov.w	r2, r3, lsl #2
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	eb03 0402 	add.w	r4, r3, r2
    db52:	f7ff ffb1 	bl	dab8 <_ZN16ServosNumeriques11receiveDataEv>
    db56:	4603      	mov	r3, r0
    db58:	6023      	str	r3, [r4, #0]
    db5a:	693b      	ldr	r3, [r7, #16]
    db5c:	f103 0301 	add.w	r3, r3, #1	; 0x1
    db60:	613b      	str	r3, [r7, #16]
            for (int i = 2; i < tableau[1]+2; i++) {
    db62:	f04f 0302 	mov.w	r3, #2	; 0x2
    db66:	61bb      	str	r3, [r7, #24]
    db68:	e00d      	b.n	db86 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x96>
                tableau[i] = receiveData();
    db6a:	69bb      	ldr	r3, [r7, #24]
    db6c:	ea4f 0283 	mov.w	r2, r3, lsl #2
    db70:	687b      	ldr	r3, [r7, #4]
    db72:	eb03 0402 	add.w	r4, r3, r2
    db76:	f7ff ff9f 	bl	dab8 <_ZN16ServosNumeriques11receiveDataEv>
    db7a:	4603      	mov	r3, r0
    db7c:	6023      	str	r3, [r4, #0]
    if (msg == 0xff) { // début fanion
        msg = receiveData();
        if (msg == 0xff) { // fin fanion
            tableau[i++] = receiveData(); // on lit quel servo a envoyé le msg
            tableau[i++] = receiveData(); // on lit la taille du message
            for (int i = 2; i < tableau[1]+2; i++) {
    db7e:	69bb      	ldr	r3, [r7, #24]
    db80:	f103 0301 	add.w	r3, r3, #1	; 0x1
    db84:	61bb      	str	r3, [r7, #24]
    db86:	687b      	ldr	r3, [r7, #4]
    db88:	f103 0304 	add.w	r3, r3, #4	; 0x4
    db8c:	681b      	ldr	r3, [r3, #0]
    db8e:	f103 0202 	add.w	r2, r3, #2	; 0x2
    db92:	69bb      	ldr	r3, [r7, #24]
    db94:	429a      	cmp	r2, r3
    db96:	dce8      	bgt.n	db6a <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x7a>
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
    db98:	f04f 0300 	mov.w	r3, #0	; 0x0
    db9c:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < tableau[1]+2; i++) {
    db9e:	f04f 0300 	mov.w	r3, #0	; 0x0
    dba2:	61fb      	str	r3, [r7, #28]
    dba4:	e00d      	b.n	dbc2 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xd2>
                sum += tableau[i];
    dba6:	69fb      	ldr	r3, [r7, #28]
    dba8:	ea4f 0283 	mov.w	r2, r3, lsl #2
    dbac:	687b      	ldr	r3, [r7, #4]
    dbae:	4413      	add	r3, r2
    dbb0:	681b      	ldr	r3, [r3, #0]
    dbb2:	461a      	mov	r2, r3
    dbb4:	697b      	ldr	r3, [r7, #20]
    dbb6:	4413      	add	r3, r2
    dbb8:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < tableau[1]+2; i++) {
                tableau[i] = receiveData();
            }
            // on a tout lu : check la checksum
            unsigned int sum = 0;
            for (int i = 0; i < tableau[1]+2; i++) {
    dbba:	69fb      	ldr	r3, [r7, #28]
    dbbc:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dbc0:	61fb      	str	r3, [r7, #28]
    dbc2:	687b      	ldr	r3, [r7, #4]
    dbc4:	f103 0304 	add.w	r3, r3, #4	; 0x4
    dbc8:	681b      	ldr	r3, [r3, #0]
    dbca:	f103 0202 	add.w	r2, r3, #2	; 0x2
    dbce:	69fb      	ldr	r3, [r7, #28]
    dbd0:	429a      	cmp	r2, r3
    dbd2:	dce8      	bgt.n	dba6 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0xb6>
                sum += tableau[i];
            }
            if ((int16_t)~(sum) != tableau[tableau[1]+1])
    dbd4:	697b      	ldr	r3, [r7, #20]
    dbd6:	b29b      	uxth	r3, r3
    dbd8:	ea6f 0303 	mvn.w	r3, r3
    dbdc:	b29b      	uxth	r3, r3
    dbde:	b219      	sxth	r1, r3
    dbe0:	687b      	ldr	r3, [r7, #4]
    dbe2:	f103 0304 	add.w	r3, r3, #4	; 0x4
    dbe6:	681b      	ldr	r3, [r3, #0]
    dbe8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dbec:	ea4f 0283 	mov.w	r2, r3, lsl #2
    dbf0:	687b      	ldr	r3, [r7, #4]
    dbf2:	4413      	add	r3, r2
    dbf4:	681b      	ldr	r3, [r3, #0]
    dbf6:	4299      	cmp	r1, r3
    dbf8:	d003      	beq.n	dc02 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x112>
                return -1;
    dbfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dbfe:	603b      	str	r3, [r7, #0]
    dc00:	e006      	b.n	dc10 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
            return 0;
    dc02:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc06:	603b      	str	r3, [r7, #0]
    dc08:	e002      	b.n	dc10 <_ZN16ServosNumeriques19receiveStatusPacketEPi+0x120>
        }
    }
    return 1;
    dc0a:	f04f 0301 	mov.w	r3, #1	; 0x1
    dc0e:	603b      	str	r3, [r7, #0]
    dc10:	683b      	ldr	r3, [r7, #0]
}
    dc12:	4618      	mov	r0, r3
    dc14:	f107 0724 	add.w	r7, r7, #36	; 0x24
    dc18:	46bd      	mov	sp, r7
    dc1a:	bd90      	pop	{r4, r7, pc}

0000dc1c <_ZN16ServosNumeriques8sendDataEi>:
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}

void sendData(int data)
    dc1c:	b580      	push	{r7, lr}
    dc1e:	b082      	sub	sp, #8
    dc20:	af00      	add	r7, sp, #0
    dc22:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    dc24:	480b      	ldr	r0, [pc, #44]	(dc54 <_ZN16ServosNumeriques8sendDataEi+0x38>)
    dc26:	f04f 0180 	mov.w	r1, #128	; 0x80
    dc2a:	f7f7 f89f 	bl	4d6c <USART_GetFlagStatus>
    dc2e:	4603      	mov	r3, r0
    dc30:	2b00      	cmp	r3, #0
    dc32:	bf14      	ite	ne
    dc34:	2300      	movne	r3, #0
    dc36:	2301      	moveq	r3, #1
    dc38:	b2db      	uxtb	r3, r3
    dc3a:	2b00      	cmp	r3, #0
    dc3c:	d1f2      	bne.n	dc24 <_ZN16ServosNumeriques8sendDataEi+0x8>
    USART_SendData(USART3, (u16) data);
    dc3e:	687b      	ldr	r3, [r7, #4]
    dc40:	b29b      	uxth	r3, r3
    dc42:	4804      	ldr	r0, [pc, #16]	(dc54 <_ZN16ServosNumeriques8sendDataEi+0x38>)
    dc44:	4619      	mov	r1, r3
    dc46:	f7f6 ff5d 	bl	4b04 <USART_SendData>
}
    dc4a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dc4e:	46bd      	mov	sp, r7
    dc50:	bd80      	pop	{r7, pc}
    dc52:	46c0      	nop			(mov r8, r8)
    dc54:	40004800 	.word	0x40004800

0000dc58 <_ZN16ServosNumeriques12setMaxTorqueEth>:
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
    dc58:	b580      	push	{r7, lr}
    dc5a:	b094      	sub	sp, #80
    dc5c:	af00      	add	r7, sp, #0
    dc5e:	4603      	mov	r3, r0
    dc60:	460a      	mov	r2, r1
    dc62:	80fb      	strh	r3, [r7, #6]
    dc64:	4613      	mov	r3, r2
    dc66:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    dc68:	f897 c005 	ldrb.w	ip, [r7, #5]
    dc6c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dc70:	88fa      	ldrh	r2, [r7, #6]
    dc72:	4618      	mov	r0, r3
    dc74:	4611      	mov	r1, r2
    dc76:	4662      	mov	r2, ip
    dc78:	f7fc ff8e 	bl	ab98 <_ZN4AX1223getMaxTorqueInstructionEPiti>
    dc7c:	4603      	mov	r3, r0
    dc7e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dc80:	f04f 0300 	mov.w	r3, #0	; 0x0
    dc84:	64fb      	str	r3, [r7, #76]
    dc86:	e00e      	b.n	dca6 <_ZN16ServosNumeriques12setMaxTorqueEth+0x4e>
        sendData(packet[i]);
    dc88:	6cfb      	ldr	r3, [r7, #76]
    dc8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dc8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dc92:	4413      	add	r3, r2
    dc94:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dc98:	4618      	mov	r0, r3
    dc9a:	f7ff ffbf 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>
}
void setMaxTorque(uint16_t torque, uint8_t servo) // EEPROM, automatiquement mis dans la RAM au démarrage
{
    int packet[16];
    int packetLength = AX12::getMaxTorqueInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    dc9e:	6cfb      	ldr	r3, [r7, #76]
    dca0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dca4:	64fb      	str	r3, [r7, #76]
    dca6:	6cfa      	ldr	r2, [r7, #76]
    dca8:	6cbb      	ldr	r3, [r7, #72]
    dcaa:	429a      	cmp	r2, r3
    dcac:	dbec      	blt.n	dc88 <_ZN16ServosNumeriques12setMaxTorqueEth+0x30>
        sendData(packet[i]);
    }
}
    dcae:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dcb2:	46bd      	mov	sp, r7
    dcb4:	bd80      	pop	{r7, pc}
    dcb6:	46c0      	nop			(mov r8, r8)

0000dcb8 <_ZN16ServosNumeriques15setTorqueLimiteEth>:
        sendData(packet[i]);
    }
}


void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
    dcb8:	b580      	push	{r7, lr}
    dcba:	b094      	sub	sp, #80
    dcbc:	af00      	add	r7, sp, #0
    dcbe:	4603      	mov	r3, r0
    dcc0:	460a      	mov	r2, r1
    dcc2:	80fb      	strh	r3, [r7, #6]
    dcc4:	4613      	mov	r3, r2
    dcc6:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    dcc8:	f897 c005 	ldrb.w	ip, [r7, #5]
    dccc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dcd0:	88fa      	ldrh	r2, [r7, #6]
    dcd2:	4618      	mov	r0, r3
    dcd4:	4611      	mov	r1, r2
    dcd6:	4662      	mov	r2, ip
    dcd8:	f7fc ff98 	bl	ac0c <_ZN4AX1225getTorqueLimitInstructionEPiti>
    dcdc:	4603      	mov	r3, r0
    dcde:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dce0:	f04f 0300 	mov.w	r3, #0	; 0x0
    dce4:	64fb      	str	r3, [r7, #76]
    dce6:	e00e      	b.n	dd06 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x4e>
        sendData(packet[i]);
    dce8:	6cfb      	ldr	r3, [r7, #76]
    dcea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dcee:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dcf2:	4413      	add	r3, r2
    dcf4:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dcf8:	4618      	mov	r0, r3
    dcfa:	f7ff ff8f 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>

void setTorqueLimite(uint16_t torque, uint8_t servo) // dans la RAM
{
    int packet[16];
    int packetLength = AX12::getTorqueLimitInstruction(packet, torque, servo);
    for (int i = 0; i < packetLength; i++) {
    dcfe:	6cfb      	ldr	r3, [r7, #76]
    dd00:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dd04:	64fb      	str	r3, [r7, #76]
    dd06:	6cfa      	ldr	r2, [r7, #76]
    dd08:	6cbb      	ldr	r3, [r7, #72]
    dd0a:	429a      	cmp	r2, r3
    dd0c:	dbec      	blt.n	dce8 <_ZN16ServosNumeriques15setTorqueLimiteEth+0x30>
        sendData(packet[i]);
    }
}
    dd0e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dd12:	46bd      	mov	sp, r7
    dd14:	bd80      	pop	{r7, pc}
    dd16:	46c0      	nop			(mov r8, r8)

0000dd18 <_ZN16ServosNumeriques11setBaudRateEhh>:
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
    dd18:	b580      	push	{r7, lr}
    dd1a:	b094      	sub	sp, #80
    dd1c:	af00      	add	r7, sp, #0
    dd1e:	4603      	mov	r3, r0
    dd20:	460a      	mov	r2, r1
    dd22:	71fb      	strb	r3, [r7, #7]
    dd24:	4613      	mov	r3, r2
    dd26:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    dd28:	f897 c006 	ldrb.w	ip, [r7, #6]
    dd2c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dd30:	79fa      	ldrb	r2, [r7, #7]
    dd32:	4618      	mov	r0, r3
    dd34:	4611      	mov	r1, r2
    dd36:	4662      	mov	r2, ip
    dd38:	f7fc fece 	bl	aad8 <_ZN4AX1222getBaudRateInstructionEPihi>
    dd3c:	4603      	mov	r3, r0
    dd3e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dd40:	f04f 0300 	mov.w	r3, #0	; 0x0
    dd44:	64fb      	str	r3, [r7, #76]
    dd46:	e00e      	b.n	dd66 <_ZN16ServosNumeriques11setBaudRateEhh+0x4e>
        sendData(packet[i]);
    dd48:	6cfb      	ldr	r3, [r7, #76]
    dd4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dd4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    dd52:	4413      	add	r3, r2
    dd54:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dd58:	4618      	mov	r0, r3
    dd5a:	f7ff ff5f 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>
}
void setBaudRate(uint8_t baudRate, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getBaudRateInstruction(packet, baudRate, servo);
    for (int i = 0; i < packetLength; i++) {
    dd5e:	6cfb      	ldr	r3, [r7, #76]
    dd60:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dd64:	64fb      	str	r3, [r7, #76]
    dd66:	6cfa      	ldr	r2, [r7, #76]
    dd68:	6cbb      	ldr	r3, [r7, #72]
    dd6a:	429a      	cmp	r2, r3
    dd6c:	dbec      	blt.n	dd48 <_ZN16ServosNumeriques11setBaudRateEhh+0x30>
        sendData(packet[i]);
    }
}
    dd6e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dd72:	46bd      	mov	sp, r7
    dd74:	bd80      	pop	{r7, pc}
    dd76:	46c0      	nop			(mov r8, r8)

0000dd78 <_ZN16ServosNumeriques15setMaximumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMaximumAngle(uint16_t angle, uint8_t servo)
    dd78:	b580      	push	{r7, lr}
    dd7a:	b094      	sub	sp, #80
    dd7c:	af00      	add	r7, sp, #0
    dd7e:	4603      	mov	r3, r0
    dd80:	460a      	mov	r2, r1
    dd82:	80fb      	strh	r3, [r7, #6]
    dd84:	4613      	mov	r3, r2
    dd86:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    dd88:	f897 c005 	ldrb.w	ip, [r7, #5]
    dd8c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    dd90:	88fa      	ldrh	r2, [r7, #6]
    dd92:	4618      	mov	r0, r3
    dd94:	4611      	mov	r1, r2
    dd96:	4662      	mov	r2, ip
    dd98:	f7fc ff72 	bl	ac80 <_ZN4AX1229getAngleUpperLimitInstructionEPiti>
    dd9c:	4603      	mov	r3, r0
    dd9e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dda0:	f04f 0300 	mov.w	r3, #0	; 0x0
    dda4:	64fb      	str	r3, [r7, #76]
    dda6:	e00e      	b.n	ddc6 <_ZN16ServosNumeriques15setMaximumAngleEth+0x4e>
        sendData(packet[i]);
    dda8:	6cfb      	ldr	r3, [r7, #76]
    ddaa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    ddae:	f107 0250 	add.w	r2, r7, #80	; 0x50
    ddb2:	4413      	add	r3, r2
    ddb4:	f853 3c48 	ldr.w	r3, [r3, #-72]
    ddb8:	4618      	mov	r0, r3
    ddba:	f7ff ff2f 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>

void setMaximumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleUpperLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    ddbe:	6cfb      	ldr	r3, [r7, #76]
    ddc0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    ddc4:	64fb      	str	r3, [r7, #76]
    ddc6:	6cfa      	ldr	r2, [r7, #76]
    ddc8:	6cbb      	ldr	r3, [r7, #72]
    ddca:	429a      	cmp	r2, r3
    ddcc:	dbec      	blt.n	dda8 <_ZN16ServosNumeriques15setMaximumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    ddce:	f107 0750 	add.w	r7, r7, #80	; 0x50
    ddd2:	46bd      	mov	sp, r7
    ddd4:	bd80      	pop	{r7, pc}
    ddd6:	46c0      	nop			(mov r8, r8)

0000ddd8 <_ZN16ServosNumeriques15setMinimumAngleEth>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setMinimumAngle(uint16_t angle, uint8_t servo)
    ddd8:	b580      	push	{r7, lr}
    ddda:	b094      	sub	sp, #80
    dddc:	af00      	add	r7, sp, #0
    ddde:	4603      	mov	r3, r0
    dde0:	460a      	mov	r2, r1
    dde2:	80fb      	strh	r3, [r7, #6]
    dde4:	4613      	mov	r3, r2
    dde6:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    dde8:	f897 c005 	ldrb.w	ip, [r7, #5]
    ddec:	f107 0308 	add.w	r3, r7, #8	; 0x8
    ddf0:	88fa      	ldrh	r2, [r7, #6]
    ddf2:	4618      	mov	r0, r3
    ddf4:	4611      	mov	r1, r2
    ddf6:	4662      	mov	r2, ip
    ddf8:	f7fc ff7c 	bl	acf4 <_ZN4AX1229getAngleLowerLimitInstructionEPiti>
    ddfc:	4603      	mov	r3, r0
    ddfe:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    de00:	f04f 0300 	mov.w	r3, #0	; 0x0
    de04:	64fb      	str	r3, [r7, #76]
    de06:	e00e      	b.n	de26 <_ZN16ServosNumeriques15setMinimumAngleEth+0x4e>
        sendData(packet[i]);
    de08:	6cfb      	ldr	r3, [r7, #76]
    de0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    de0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    de12:	4413      	add	r3, r2
    de14:	f853 3c48 	ldr.w	r3, [r3, #-72]
    de18:	4618      	mov	r0, r3
    de1a:	f7ff feff 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>

void setMinimumAngle(uint16_t angle, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getAngleLowerLimitInstruction(packet, angle, servo);
    for (int i = 0; i < packetLength; i++) {
    de1e:	6cfb      	ldr	r3, [r7, #76]
    de20:	f103 0301 	add.w	r3, r3, #1	; 0x1
    de24:	64fb      	str	r3, [r7, #76]
    de26:	6cfa      	ldr	r2, [r7, #76]
    de28:	6cbb      	ldr	r3, [r7, #72]
    de2a:	429a      	cmp	r2, r3
    de2c:	dbec      	blt.n	de08 <_ZN16ServosNumeriques15setMinimumAngleEth+0x30>
        sendData(packet[i]);
    }
}
    de2e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    de32:	46bd      	mov	sp, r7
    de34:	bd80      	pop	{r7, pc}
    de36:	46c0      	nop			(mov r8, r8)

0000de38 <_ZN16ServosNumeriques11setLedStateEhh>:
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}

void setLedState(uint8_t ledOn, uint8_t servo)
    de38:	b580      	push	{r7, lr}
    de3a:	b094      	sub	sp, #80
    de3c:	af00      	add	r7, sp, #0
    de3e:	4603      	mov	r3, r0
    de40:	460a      	mov	r2, r1
    de42:	71fb      	strb	r3, [r7, #7]
    de44:	4613      	mov	r3, r2
    de46:	71bb      	strb	r3, [r7, #6]
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    de48:	f897 c006 	ldrb.w	ip, [r7, #6]
    de4c:	f107 0308 	add.w	r3, r7, #8	; 0x8
    de50:	79fa      	ldrb	r2, [r7, #7]
    de52:	4618      	mov	r0, r3
    de54:	4611      	mov	r1, r2
    de56:	4662      	mov	r2, ip
    de58:	f7fc fe6e 	bl	ab38 <_ZN4AX1217getLedInstructionEPihi>
    de5c:	4603      	mov	r3, r0
    de5e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    de60:	f04f 0300 	mov.w	r3, #0	; 0x0
    de64:	64fb      	str	r3, [r7, #76]
    de66:	e00e      	b.n	de86 <_ZN16ServosNumeriques11setLedStateEhh+0x4e>
        sendData(packet[i]);
    de68:	6cfb      	ldr	r3, [r7, #76]
    de6a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    de6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    de72:	4413      	add	r3, r2
    de74:	f853 3c48 	ldr.w	r3, [r3, #-72]
    de78:	4618      	mov	r0, r3
    de7a:	f7ff fecf 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>

void setLedState(uint8_t ledOn, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getLedInstruction(packet, ledOn, servo);
    for (int i = 0; i < packetLength; i++) {
    de7e:	6cfb      	ldr	r3, [r7, #76]
    de80:	f103 0301 	add.w	r3, r3, #1	; 0x1
    de84:	64fb      	str	r3, [r7, #76]
    de86:	6cfa      	ldr	r2, [r7, #76]
    de88:	6cbb      	ldr	r3, [r7, #72]
    de8a:	429a      	cmp	r2, r3
    de8c:	dbec      	blt.n	de68 <_ZN16ServosNumeriques11setLedStateEhh+0x30>
        sendData(packet[i]);
    }
}
    de8e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    de92:	46bd      	mov	sp, r7
    de94:	bd80      	pop	{r7, pc}
    de96:	46c0      	nop			(mov r8, r8)

0000de98 <_ZN16ServosNumeriques11moveAtSpeedEth>:
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
    de98:	b580      	push	{r7, lr}
    de9a:	b094      	sub	sp, #80
    de9c:	af00      	add	r7, sp, #0
    de9e:	4603      	mov	r3, r0
    dea0:	460a      	mov	r2, r1
    dea2:	80fb      	strh	r3, [r7, #6]
    dea4:	4613      	mov	r3, r2
    dea6:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    dea8:	f107 0308 	add.w	r3, r7, #8	; 0x8
    deac:	88fa      	ldrh	r2, [r7, #6]
    deae:	f897 c005 	ldrb.w	ip, [r7, #5]
    deb2:	4618      	mov	r0, r3
    deb4:	4611      	mov	r1, r2
    deb6:	4662      	mov	r2, ip
    deb8:	f7fc ff56 	bl	ad68 <_ZN4AX1223getMoveSpeedInstructionEPith>
    debc:	4603      	mov	r3, r0
    debe:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    dec0:	f04f 0300 	mov.w	r3, #0	; 0x0
    dec4:	64fb      	str	r3, [r7, #76]
    dec6:	e00e      	b.n	dee6 <_ZN16ServosNumeriques11moveAtSpeedEth+0x4e>
        sendData(packet[i]);
    dec8:	6cfb      	ldr	r3, [r7, #76]
    deca:	ea4f 0383 	mov.w	r3, r3, lsl #2
    dece:	f107 0250 	add.w	r2, r7, #80	; 0x50
    ded2:	4413      	add	r3, r2
    ded4:	f853 3c48 	ldr.w	r3, [r3, #-72]
    ded8:	4618      	mov	r0, r3
    deda:	f7ff fe9f 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>
}
void moveAtSpeed(uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveSpeedInstruction(packet, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    dede:	6cfb      	ldr	r3, [r7, #76]
    dee0:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dee4:	64fb      	str	r3, [r7, #76]
    dee6:	6cfa      	ldr	r2, [r7, #76]
    dee8:	6cbb      	ldr	r3, [r7, #72]
    deea:	429a      	cmp	r2, r3
    deec:	dbec      	blt.n	dec8 <_ZN16ServosNumeriques11moveAtSpeedEth+0x30>
        sendData(packet[i]);
    }
}
    deee:	f107 0750 	add.w	r7, r7, #80	; 0x50
    def2:	46bd      	mov	sp, r7
    def4:	bd80      	pop	{r7, pc}
    def6:	46c0      	nop			(mov r8, r8)

0000def8 <_ZN16ServosNumeriques6moveToEth>:
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
        sendData(packet[i]);
    }
}
void moveTo(uint16_t position, uint8_t servo)
    def8:	b580      	push	{r7, lr}
    defa:	b094      	sub	sp, #80
    defc:	af00      	add	r7, sp, #0
    defe:	4603      	mov	r3, r0
    df00:	460a      	mov	r2, r1
    df02:	80fb      	strh	r3, [r7, #6]
    df04:	4613      	mov	r3, r2
    df06:	717b      	strb	r3, [r7, #5]
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    df08:	f107 0308 	add.w	r3, r7, #8	; 0x8
    df0c:	88fa      	ldrh	r2, [r7, #6]
    df0e:	f897 c005 	ldrb.w	ip, [r7, #5]
    df12:	4618      	mov	r0, r3
    df14:	4611      	mov	r1, r2
    df16:	4662      	mov	r2, ip
    df18:	f7fc ff62 	bl	ade0 <_ZN4AX1220getMoveToInstructionEPith>
    df1c:	4603      	mov	r3, r0
    df1e:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    df20:	f04f 0300 	mov.w	r3, #0	; 0x0
    df24:	64fb      	str	r3, [r7, #76]
    df26:	e00e      	b.n	df46 <_ZN16ServosNumeriques6moveToEth+0x4e>
        sendData(packet[i]);
    df28:	6cfb      	ldr	r3, [r7, #76]
    df2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    df2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
    df32:	4413      	add	r3, r2
    df34:	f853 3c48 	ldr.w	r3, [r3, #-72]
    df38:	4618      	mov	r0, r3
    df3a:	f7ff fe6f 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>
}
void moveTo(uint16_t position, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveToInstruction(packet, position, servo);
    for (int i = 0; i < packetLength; i++) {
    df3e:	6cfb      	ldr	r3, [r7, #76]
    df40:	f103 0301 	add.w	r3, r3, #1	; 0x1
    df44:	64fb      	str	r3, [r7, #76]
    df46:	6cfa      	ldr	r2, [r7, #76]
    df48:	6cbb      	ldr	r3, [r7, #72]
    df4a:	429a      	cmp	r2, r3
    df4c:	dbec      	blt.n	df28 <_ZN16ServosNumeriques6moveToEth+0x30>
        sendData(packet[i]);
    }
}
    df4e:	f107 0750 	add.w	r7, r7, #80	; 0x50
    df52:	46bd      	mov	sp, r7
    df54:	bd80      	pop	{r7, pc}
    df56:	46c0      	nop			(mov r8, r8)

0000df58 <_ZN16ServosNumeriques13moveToAtSpeedEtth>:
        }
    }
    return 1;
}

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
    df58:	b580      	push	{r7, lr}
    df5a:	b094      	sub	sp, #80
    df5c:	af00      	add	r7, sp, #0
    df5e:	4603      	mov	r3, r0
    df60:	80fb      	strh	r3, [r7, #6]
    df62:	460b      	mov	r3, r1
    df64:	80bb      	strh	r3, [r7, #4]
    df66:	4613      	mov	r3, r2
    df68:	70fb      	strb	r3, [r7, #3]
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    df6a:	f107 0308 	add.w	r3, r7, #8	; 0x8
    df6e:	88fa      	ldrh	r2, [r7, #6]
    df70:	f8b7 c004 	ldrh.w	ip, [r7, #4]
    df74:	f897 e003 	ldrb.w	lr, [r7, #3]
    df78:	4618      	mov	r0, r3
    df7a:	4611      	mov	r1, r2
    df7c:	4662      	mov	r2, ip
    df7e:	4673      	mov	r3, lr
    df80:	f7fc ff6a 	bl	ae58 <_ZN4AX1218getMoveInstructionEPitth>
    df84:	4603      	mov	r3, r0
    df86:	64bb      	str	r3, [r7, #72]
    for (int i = 0; i < packetLength; i++) {
    df88:	f04f 0300 	mov.w	r3, #0	; 0x0
    df8c:	64fb      	str	r3, [r7, #76]
    df8e:	e00e      	b.n	dfae <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x56>
        sendData(packet[i]);
    df90:	6cfb      	ldr	r3, [r7, #76]
    df92:	ea4f 0383 	mov.w	r3, r3, lsl #2
    df96:	f107 0250 	add.w	r2, r7, #80	; 0x50
    df9a:	4413      	add	r3, r2
    df9c:	f853 3c48 	ldr.w	r3, [r3, #-72]
    dfa0:	4618      	mov	r0, r3
    dfa2:	f7ff fe3b 	bl	dc1c <_ZN16ServosNumeriques8sendDataEi>

void moveToAtSpeed(uint16_t position, uint16_t vitesse, uint8_t servo)
{
    int packet[16];
    int packetLength = AX12::getMoveInstruction(packet, position, vitesse, servo);
    for (int i = 0; i < packetLength; i++) {
    dfa6:	6cfb      	ldr	r3, [r7, #76]
    dfa8:	f103 0301 	add.w	r3, r3, #1	; 0x1
    dfac:	64fb      	str	r3, [r7, #76]
    dfae:	6cfa      	ldr	r2, [r7, #76]
    dfb0:	6cbb      	ldr	r3, [r7, #72]
    dfb2:	429a      	cmp	r2, r3
    dfb4:	dbec      	blt.n	df90 <_ZN16ServosNumeriques13moveToAtSpeedEtth+0x38>
        sendData(packet[i]);
    }
}
    dfb6:	f107 0750 	add.w	r7, r7, #80	; 0x50
    dfba:	46bd      	mov	sp, r7
    dfbc:	bd80      	pop	{r7, pc}
    dfbe:	46c0      	nop			(mov r8, r8)

0000dfc0 <_Z25ServosNumeriques_sendDatai>:
#include "interfaceServosNumeriques.h"
//#include "stm32f4xx_usart.h"

void ServosNumeriques_sendData(int data)
    dfc0:	b580      	push	{r7, lr}
    dfc2:	b082      	sub	sp, #8
    dfc4:	af00      	add	r7, sp, #0
    dfc6:	6078      	str	r0, [r7, #4]
{
    // Wait until the send buffer is cleared finishes
    while (USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
    dfc8:	480b      	ldr	r0, [pc, #44]	(dff8 <_Z25ServosNumeriques_sendDatai+0x38>)
    dfca:	f04f 0180 	mov.w	r1, #128	; 0x80
    dfce:	f7f6 fecd 	bl	4d6c <USART_GetFlagStatus>
    dfd2:	4603      	mov	r3, r0
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	bf14      	ite	ne
    dfd8:	2300      	movne	r3, #0
    dfda:	2301      	moveq	r3, #1
    dfdc:	b2db      	uxtb	r3, r3
    dfde:	2b00      	cmp	r3, #0
    dfe0:	d1f2      	bne.n	dfc8 <_Z25ServosNumeriques_sendDatai+0x8>
    USART_SendData(USART3, (u16) data);
    dfe2:	687b      	ldr	r3, [r7, #4]
    dfe4:	b29b      	uxth	r3, r3
    dfe6:	4804      	ldr	r0, [pc, #16]	(dff8 <_Z25ServosNumeriques_sendDatai+0x38>)
    dfe8:	4619      	mov	r1, r3
    dfea:	f7f6 fd8b 	bl	4b04 <USART_SendData>
}
    dfee:	f107 0708 	add.w	r7, r7, #8	; 0x8
    dff2:	46bd      	mov	sp, r7
    dff4:	bd80      	pop	{r7, pc}
    dff6:	46c0      	nop			(mov r8, r8)
    dff8:	40004800 	.word	0x40004800

0000dffc <_ZN16ServosNumeriques11receiveModeEv>:
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
void receiveMode()
    dffc:	b580      	push	{r7, lr}
    dffe:	af00      	add	r7, sp, #0
{
	// on veut recevoir des paquets, on met le bit d'envoi à 0
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_RESET);
    e000:	4804      	ldr	r0, [pc, #16]	(e014 <_ZN16ServosNumeriques11receiveModeEv+0x18>)
    e002:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e006:	f04f 0200 	mov.w	r2, #0	; 0x0
    e00a:	f7f3 fcbf 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e00e:	46bd      	mov	sp, r7
    e010:	bd80      	pop	{r7, pc}
    e012:	46c0      	nop			(mov r8, r8)
    e014:	40011400 	.word	0x40011400

0000e018 <_ZN16ServosNumeriques8sendModeEv>:
	USART_Init(USART3, &USART_InitStruct);
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
}

void sendMode()
    e018:	b580      	push	{r7, lr}
    e01a:	af00      	add	r7, sp, #0
{
	// on veut envoyer des paquets, on met le bit d'envoi à 1
	#ifdef STM32F10X_CL
	GPIO_WriteBit(GPIOD, GPIO_Pin_10, Bit_SET);
    e01c:	4804      	ldr	r0, [pc, #16]	(e030 <_ZN16ServosNumeriques8sendModeEv+0x18>)
    e01e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e022:	f04f 0201 	mov.w	r2, #1	; 0x1
    e026:	f7f3 fcb1 	bl	198c <GPIO_WriteBit>
	#elif defined(STM32F10X_MD) || defined(STM32F10X_CL)
	GPIO_WriteBit(GPIOB, GPIO_Pin_5, Bit_SET);
	#endif
}
    e02a:	46bd      	mov	sp, r7
    e02c:	bd80      	pop	{r7, pc}
    e02e:	46c0      	nop			(mov r8, r8)
    e030:	40011400 	.word	0x40011400

0000e034 <_ZN16ServosNumeriques8initUARTEi>:
#endif


}

void initUART(int baudRate)
    e034:	b580      	push	{r7, lr}
    e036:	b086      	sub	sp, #24
    e038:	af00      	add	r7, sp, #0
    e03a:	6078      	str	r0, [r7, #4]
{
    USART_InitTypeDef USART_InitStruct;
	// Protocole ax12 : Half duplex Asynchronous Serial Communication (8bit,1stop,No Parity)
 	/* Initialisation des caracteristiques USART_InitStruct */
 	USART_InitStruct.USART_BaudRate = baudRate;
    e03c:	687b      	ldr	r3, [r7, #4]
    e03e:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
    e040:	f04f 0300 	mov.w	r3, #0	; 0x0
    e044:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
    e046:	f04f 0300 	mov.w	r3, #0	; 0x0
    e04a:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No ;
    e04c:	f04f 0300 	mov.w	r3, #0	; 0x0
    e050:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    e052:	f04f 0300 	mov.w	r3, #0	; 0x0
    e056:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    e058:	f04f 030c 	mov.w	r3, #12	; 0xc
    e05c:	827b      	strh	r3, [r7, #18]

	/* On configure et on lance */
	USART_Init(USART3, &USART_InitStruct);
    e05e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    e062:	4806      	ldr	r0, [pc, #24]	(e07c <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e064:	4619      	mov	r1, r3
    e066:	f7f6 fadb 	bl	4620 <USART_Init>
	//USART_ClockInit(USART3, &USART_ClockInitStruct);
	USART_Cmd(USART3, ENABLE);
    e06a:	4804      	ldr	r0, [pc, #16]	(e07c <_ZN16ServosNumeriques8initUARTEi+0x48>)
    e06c:	f04f 0101 	mov.w	r1, #1	; 0x1
    e070:	f7f6 fbf6 	bl	4860 <USART_Cmd>
}
    e074:	f107 0718 	add.w	r7, r7, #24	; 0x18
    e078:	46bd      	mov	sp, r7
    e07a:	bd80      	pop	{r7, pc}
    e07c:	40004800 	.word	0x40004800

0000e080 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>:
}

namespace ServosNumeriques
{

void initClocksAndPortsGPIO()
    e080:	b580      	push	{r7, lr}
    e082:	b082      	sub	sp, #8
    e084:	af00      	add	r7, sp, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    GPIO_Init(GPIOB, &GPIO_InitStructure);
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    // bus APB1 : allow usart 3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
    e086:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    e08a:	f04f 0101 	mov.w	r1, #1	; 0x1
    e08e:	f7f4 f9fd 	bl	248c <RCC_APB1PeriphClockCmd>

    // on remap l'usart3 pour que le stm soit bien configuré sur les ports 8 9 et 10 du GPIOD
    GPIO_PinRemapConfig(GPIO_FullRemap_USART3, ENABLE);
    e092:	481b      	ldr	r0, [pc, #108]	(e100 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x80>)
    e094:	f04f 0101 	mov.w	r1, #1	; 0x1
    e098:	f7f3 fcfa 	bl	1a90 <GPIO_PinRemapConfig>

    GPIO_InitTypeDef GPIO_InitStructure;
 	// port D pin 8 TX : un servo numérique en Ecriture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    e09c:	f44f 7380 	mov.w	r3, #256	; 0x100
    e0a0:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    e0a2:	f04f 0318 	mov.w	r3, #24	; 0x18
    e0a6:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e0a8:	f04f 0303 	mov.w	r3, #3	; 0x3
    e0ac:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e0ae:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e0b2:	4814      	ldr	r0, [pc, #80]	(e104 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e0b4:	4619      	mov	r1, r3
    e0b6:	f7f3 fafb 	bl	16b0 <GPIO_Init>

 	// port D pin 9 RX : un servo numérique en Lecture
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    e0ba:	f44f 7300 	mov.w	r3, #512	; 0x200
    e0be:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    e0c0:	f04f 0304 	mov.w	r3, #4	; 0x4
    e0c4:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // La vitesse de rafraichissement du port
    e0c6:	f04f 0303 	mov.w	r3, #3	; 0x3
    e0ca:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e0cc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e0d0:	480c      	ldr	r0, [pc, #48]	(e104 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e0d2:	4619      	mov	r1, r3
    e0d4:	f7f3 faec 	bl	16b0 <GPIO_Init>

 	// port D pin 10 : la direction (TX/RX)
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    e0d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    e0dc:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    e0de:	f04f 0310 	mov.w	r3, #16	; 0x10
    e0e2:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz; // La vitesse de rafraichissement du port
    e0e4:	f04f 0302 	mov.w	r3, #2	; 0x2
    e0e8:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    e0ea:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e0ee:	4805      	ldr	r0, [pc, #20]	(e104 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv+0x84>)
    e0f0:	4619      	mov	r1, r3
    e0f2:	f7f3 fadd 	bl	16b0 <GPIO_Init>
#endif


}
    e0f6:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e0fa:	46bd      	mov	sp, r7
    e0fc:	bd80      	pop	{r7, pc}
    e0fe:	46c0      	nop			(mov r8, r8)
    e100:	00140030 	.word	0x00140030
    e104:	40011400 	.word	0x40011400

0000e108 <_Z6isBluev>:


#define NVIC_CCR ((volatile unsigned long *)(0xE000ED14))

// Dit si on est du coté bleu
bool isBlue() // = ROUGE
    e108:	b580      	push	{r7, lr}
    e10a:	af00      	add	r7, sp, #0
{
#ifdef STM32F40_41xxx // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
#ifdef STM32F10X_CL // Pin pour le stm32 h107
    return GPIO_ReadInputDataBit(GPIOE, GPIO_Pin_4) == Bit_RESET;
    e10c:	4806      	ldr	r0, [pc, #24]	(e128 <_Z6isBluev+0x20>)
    e10e:	f04f 0110 	mov.w	r1, #16	; 0x10
    e112:	f7f3 fbc7 	bl	18a4 <GPIO_ReadInputDataBit>
    e116:	4603      	mov	r3, r0
    e118:	2b00      	cmp	r3, #0
    e11a:	bf14      	ite	ne
    e11c:	2300      	movne	r3, #0
    e11e:	2301      	moveq	r3, #1
    e120:	b2db      	uxtb	r3, r3
#endif
#ifdef STM32F10X_MD // Pin pour le stm32 h103
    return GPIO_ReadInputDataBit(GPIOB, GPIO_Pin_9) == Bit_RESET;
#endif
}
    e122:	4618      	mov	r0, r3
    e124:	46bd      	mov	sp, r7
    e126:	bd80      	pop	{r7, pc}
    e128:	40011800 	.word	0x40011800

0000e12c <main>:
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOx, &GPIO_InitStructure);
}
*/

int main()
    e12c:	b580      	push	{r7, lr}
    e12e:	b0a2      	sub	sp, #136
    e130:	af06      	add	r7, sp, #24
{
    #if defined(STM32F10X_MD) || defined(STM32F10X_CL)
        *NVIC_CCR = *NVIC_CCR | 0x200; // Set STKALIGN in NVIC
    e132:	4a7f      	ldr	r2, [pc, #508]	(e330 <main+0x204>)
    e134:	4b7e      	ldr	r3, [pc, #504]	(e330 <main+0x204>)
    e136:	681b      	ldr	r3, [r3, #0]
    e138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    e13c:	6013      	str	r3, [r2, #0]
    #else
        SystemInit(); // Appelée implicitement ?
    #endif

    // On initialise les horloges
    Clk_Init();
    e13e:	f7ff fc41 	bl	d9c4 <_Z8Clk_Initv>

    // Définit quelques horloges supplémentaires
    initAutresHorloges();
    e142:	f7ff fc23 	bl	d98c <_Z18initAutresHorlogesv>

    // Appel de la fonction qui permet d'initialiser tous les PINS
    initialisationDesPIN();
    e146:	f7ff fb7f 	bl	d848 <_Z20initialisationDesPINv>

    Remote::log("Init");
    e14a:	4b7a      	ldr	r3, [pc, #488]	(e334 <main+0x208>)
    e14c:	4618      	mov	r0, r3
    e14e:	f7fe fcc3 	bl	cad8 <_ZN6Remote3logEPc>
    //Debug::testContainer();
    //Debug::testBrasLateraux();
    //Debug::testADC_DMASampleF4();
    //Debug::testSharps();
#endif
    allumerLED();
    e152:	f7fd fef9 	bl	bf48 <_Z10allumerLEDv>
    eteindreLED();
    e156:	f7fd fe9b 	bl	be90 <_Z11eteindreLEDv>
    allumerLED2();
    e15a:	f7fd feed 	bl	bf38 <_Z11allumerLED2v>
    eteindreLED2();
    e15e:	f7fd fe8f 	bl	be80 <_Z12eteindreLED2v>
    allumerLED();
    e162:	f7fd fef1 	bl	bf48 <_Z10allumerLEDv>
//    UartDebug::sendData(42);
//    UartDebug::sendData(50);
//    UartDebug::sendData(51);
//    UartDebug::sendData(52);

    ServosNumeriques::initClocksAndPortsGPIO();
    e166:	f7ff ff8b 	bl	e080 <_ZN16ServosNumeriques22initClocksAndPortsGPIOEv>
    ServosNumeriques::initUART(19231);
    e16a:	f644 301f 	movw	r0, #19231	; 0x4b1f
    e16e:	f7ff ff61 	bl	e034 <_ZN16ServosNumeriques8initUARTEi>
    ServosNumeriques::sendMode();
    e172:	f7ff ff51 	bl	e018 <_ZN16ServosNumeriques8sendModeEv>
    #endif
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        Tirette tirette(GPIOA, GPIO_Pin_10);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        Tirette tirette(GPIOE, GPIO_Pin_5);
    e176:	f107 0344 	add.w	r3, r7, #68	; 0x44
    e17a:	4618      	mov	r0, r3
    e17c:	496e      	ldr	r1, [pc, #440]	(e338 <main+0x20c>)
    e17e:	f04f 0220 	mov.w	r2, #32	; 0x20
    e182:	f7ff f94b 	bl	d41c <_ZN7TiretteC1EP12GPIO_TypeDeft>
    // Initialisation des actionneurs 1
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405
        BrasLateral::initBrasLateraux();
        Container::getSingleton();
    #elif defined(STM32F10X_CL) // H107
        BrasLateral::initBrasLateraux();
    e186:	f7f7 f853 	bl	5230 <_ZN11BrasLateral16initBrasLaterauxEv>
#endif

//    tirette.attendreRemise();
//    tirette.attendreEnlevee();

    Remote::getSingleton();
    e18a:	f7fe fc81 	bl	ca90 <_ZN6Remote12getSingletonEv>
    // Initialisation des actionneurs 2
    #if defined(STM32F40_41xxx) || defined(STM32F10X_MD) // H405

    #elif defined(STM32F10X_CL) // H107
//        Brak* bracquemart = Brak::getSingleton();
        Sensors* sensors = Sensors::getSingleton();
    e18e:	f7f8 fcfb 	bl	6b88 <_ZN7Sensors12getSingletonEv>
    e192:	4603      	mov	r3, r0
    e194:	65bb      	str	r3, [r7, #88]
        ServosNumeriques::setLedState(1, 12);
    e196:	f04f 0001 	mov.w	r0, #1	; 0x1
    e19a:	f04f 010c 	mov.w	r1, #12	; 0xc
    e19e:	f7ff fe4b 	bl	de38 <_ZN16ServosNumeriques11setLedStateEhh>
    #ifdef STM32F10X_MD // pour la STM32 H103 2014 v1 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOB, GPIO_Pin_6, GPIOB, GPIO_Pin_7);
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM1, GPIOA, GPIO_Pin_8, GPIOA, GPIO_Pin_9);
    #endif
    #ifdef STM32F10X_CL // pour la STM32 H107 2013 v2 :
        QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM4, GPIOD, GPIO_Pin_12, GPIOD, GPIO_Pin_13);
    e1a2:	f04f 0004 	mov.w	r0, #4	; 0x4
    e1a6:	f000 f8d7 	bl	e358 <_Znwj>
    e1aa:	4603      	mov	r3, r0
    e1ac:	607b      	str	r3, [r7, #4]
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	2b00      	cmp	r3, #0
    e1b2:	d017      	beq.n	e1e4 <main+0xb8>
    e1b4:	4b61      	ldr	r3, [pc, #388]	(e33c <main+0x210>)
    e1b6:	9300      	str	r3, [sp, #0]
    e1b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e1bc:	9301      	str	r3, [sp, #4]
    e1be:	f04f 0300 	mov.w	r3, #0	; 0x0
    e1c2:	9302      	str	r3, [sp, #8]
    e1c4:	f04f 0300 	mov.w	r3, #0	; 0x0
    e1c8:	9303      	str	r3, [sp, #12]
    e1ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    e1ce:	9304      	str	r3, [sp, #16]
    e1d0:	6878      	ldr	r0, [r7, #4]
    e1d2:	495b      	ldr	r1, [pc, #364]	(e340 <main+0x214>)
    e1d4:	4a59      	ldr	r2, [pc, #356]	(e33c <main+0x210>)
    e1d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    e1da:	f7fe fa67 	bl	c6ac <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e1de:	687b      	ldr	r3, [r7, #4]
    e1e0:	60bb      	str	r3, [r7, #8]
    e1e2:	e001      	b.n	e1e8 <main+0xbc>
    e1e4:	687b      	ldr	r3, [r7, #4]
    e1e6:	60bb      	str	r3, [r7, #8]
    e1e8:	68bb      	ldr	r3, [r7, #8]
    e1ea:	65fb      	str	r3, [r7, #92]
        GPIO_PinRemapConfig(GPIO_Remap_TIM4, ENABLE);
    e1ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    e1f0:	f04f 0101 	mov.w	r1, #1	; 0x1
    e1f4:	f7f3 fc4c 	bl	1a90 <GPIO_PinRemapConfig>
        QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    e1f8:	f04f 0004 	mov.w	r0, #4	; 0x4
    e1fc:	f000 f8ac 	bl	e358 <_Znwj>
    e200:	4603      	mov	r3, r0
    e202:	60fb      	str	r3, [r7, #12]
    e204:	68fb      	ldr	r3, [r7, #12]
    e206:	2b00      	cmp	r3, #0
    e208:	d017      	beq.n	e23a <main+0x10e>
    e20a:	4b4e      	ldr	r3, [pc, #312]	(e344 <main+0x218>)
    e20c:	9300      	str	r3, [sp, #0]
    e20e:	f04f 0380 	mov.w	r3, #128	; 0x80
    e212:	9301      	str	r3, [sp, #4]
    e214:	f04f 0300 	mov.w	r3, #0	; 0x0
    e218:	9302      	str	r3, [sp, #8]
    e21a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e21e:	9303      	str	r3, [sp, #12]
    e220:	f04f 0300 	mov.w	r3, #0	; 0x0
    e224:	9304      	str	r3, [sp, #16]
    e226:	68f8      	ldr	r0, [r7, #12]
    e228:	4947      	ldr	r1, [pc, #284]	(e348 <main+0x21c>)
    e22a:	4a46      	ldr	r2, [pc, #280]	(e344 <main+0x218>)
    e22c:	f04f 0340 	mov.w	r3, #64	; 0x40
    e230:	f7fe fa3c 	bl	c6ac <_ZN22QuadratureCoderHandlerC1EP11TIM_TypeDefP12GPIO_TypeDeftS3_thhh>
    e234:	68fb      	ldr	r3, [r7, #12]
    e236:	613b      	str	r3, [r7, #16]
    e238:	e001      	b.n	e23e <main+0x112>
    e23a:	68fb      	ldr	r3, [r7, #12]
    e23c:	613b      	str	r3, [r7, #16]
    e23e:	693b      	ldr	r3, [r7, #16]
    e240:	663b      	str	r3, [r7, #96]


// Pour la v1 :
//    QuadratureCoderHandler* rcd = new QuadratureCoderHandler(TIM2, GPIOA, GPIO_Pin_0, GPIOA, GPIO_Pin_1);
 //   QuadratureCoderHandler* rcg = new QuadratureCoderHandler(TIM3, GPIOA, GPIO_Pin_6, GPIOA, GPIO_Pin_7);
    Odometrie* odometrie = new Odometrie(rcg, rcd);
    e242:	f04f 0078 	mov.w	r0, #120	; 0x78
    e246:	f000 f887 	bl	e358 <_Znwj>
    e24a:	4603      	mov	r3, r0
    e24c:	617b      	str	r3, [r7, #20]
    e24e:	697b      	ldr	r3, [r7, #20]
    e250:	2b00      	cmp	r3, #0
    e252:	d007      	beq.n	e264 <main+0x138>
    e254:	6978      	ldr	r0, [r7, #20]
    e256:	6e39      	ldr	r1, [r7, #96]
    e258:	6dfa      	ldr	r2, [r7, #92]
    e25a:	f7fb fdfd 	bl	9e58 <_ZN9OdometrieC1EP22QuadratureCoderHandlerS1_>
    e25e:	697b      	ldr	r3, [r7, #20]
    e260:	61bb      	str	r3, [r7, #24]
    e262:	e001      	b.n	e268 <main+0x13c>
    e264:	697b      	ldr	r3, [r7, #20]
    e266:	61bb      	str	r3, [r7, #24]
    e268:	69bb      	ldr	r3, [r7, #24]
    e26a:	667b      	str	r3, [r7, #100]
    Position pos(200,1850, isBlue());//1500, isBlue());
    e26c:	f7ff ff4c 	bl	e108 <_Z6isBluev>
    e270:	4603      	mov	r3, r0
    e272:	469c      	mov	ip, r3
    e274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    e278:	4618      	mov	r0, r3
    e27a:	4934      	ldr	r1, [pc, #208]	(e34c <main+0x220>)
    e27c:	4a34      	ldr	r2, [pc, #208]	(e350 <main+0x224>)
    e27e:	4663      	mov	r3, ip
    e280:	f000 f9d0 	bl	e624 <_ZN8PositionC1Effb>
    PositionPlusAngle posPlusAngle(pos,-M_PI/2);
    e284:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e288:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    e28c:	4618      	mov	r0, r3
    e28e:	4611      	mov	r1, r2
    e290:	4a30      	ldr	r2, [pc, #192]	(e354 <main+0x228>)
    e292:	f000 fbbb 	bl	ea0c <_ZN17PositionPlusAngleC1ERK8Positionf>
    if (!isBlue())
    e296:	f7ff ff37 	bl	e108 <_Z6isBluev>
    e29a:	4603      	mov	r3, r0
    e29c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e2a0:	b2db      	uxtb	r3, r3
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d010      	beq.n	e2c8 <main+0x19c>
        posPlusAngle = PositionPlusAngle(pos,-M_PI/2);
    e2a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    e2aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    e2ae:	4618      	mov	r0, r3
    e2b0:	4611      	mov	r1, r2
    e2b2:	4a28      	ldr	r2, [pc, #160]	(e354 <main+0x228>)
    e2b4:	f000 fbaa 	bl	ea0c <_ZN17PositionPlusAngleC1ERK8Positionf>
    e2b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e2bc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    e2c0:	4618      	mov	r0, r3
    e2c2:	4611      	mov	r1, r2
    e2c4:	f000 fc42 	bl	eb4c <_ZN17PositionPlusAngleaSERKS_>
    odometrie->setPos(posPlusAngle);
    e2c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
    e2cc:	6e78      	ldr	r0, [r7, #100]
    e2ce:	4619      	mov	r1, r3
    e2d0:	f7fb fa82 	bl	97d8 <_ZN9Odometrie6setPosERK17PositionPlusAngle>

    StrategieV2* strat = new StrategieV2(isBlue());
    e2d4:	f7ff ff18 	bl	e108 <_Z6isBluev>
    e2d8:	4603      	mov	r3, r0
    e2da:	61fb      	str	r3, [r7, #28]
    e2dc:	f04f 0004 	mov.w	r0, #4	; 0x4
    e2e0:	f000 f83a 	bl	e358 <_Znwj>
    e2e4:	4603      	mov	r3, r0
    e2e6:	623b      	str	r3, [r7, #32]
    e2e8:	6a3b      	ldr	r3, [r7, #32]
    e2ea:	2b00      	cmp	r3, #0
    e2ec:	d006      	beq.n	e2fc <main+0x1d0>
    e2ee:	6a38      	ldr	r0, [r7, #32]
    e2f0:	69f9      	ldr	r1, [r7, #28]
    e2f2:	f006 fa65 	bl	147c0 <_ZN11StrategieV2C1Eb>
    e2f6:	6a3b      	ldr	r3, [r7, #32]
    e2f8:	627b      	str	r3, [r7, #36]
    e2fa:	e001      	b.n	e300 <main+0x1d4>
    e2fc:	6a3b      	ldr	r3, [r7, #32]
    e2fe:	627b      	str	r3, [r7, #36]
    e300:	6a7b      	ldr	r3, [r7, #36]
    e302:	66bb      	str	r3, [r7, #104]
    Asservissement* asserv = new Asservissement(odometrie);
    e304:	f04f 0060 	mov.w	r0, #96	; 0x60
    e308:	f000 f826 	bl	e358 <_Znwj>
    e30c:	4603      	mov	r3, r0
    e30e:	62bb      	str	r3, [r7, #40]
    e310:	6abb      	ldr	r3, [r7, #40]
    e312:	2b00      	cmp	r3, #0
    e314:	d006      	beq.n	e324 <main+0x1f8>
    e316:	6ab8      	ldr	r0, [r7, #40]
    e318:	6e79      	ldr	r1, [r7, #100]
    e31a:	f7f9 fa59 	bl	77d0 <_ZN14AsservissementC1EP9Odometrie>
    e31e:	6abb      	ldr	r3, [r7, #40]
    e320:	62fb      	str	r3, [r7, #44]
    e322:	e001      	b.n	e328 <main+0x1fc>
    e324:	6abb      	ldr	r3, [r7, #40]
    e326:	62fb      	str	r3, [r7, #44]
    e328:	6afb      	ldr	r3, [r7, #44]
    e32a:	66fb      	str	r3, [r7, #108]
    e32c:	e7fe      	b.n	e32c <main+0x200>
    e32e:	46c0      	nop			(mov r8, r8)
    e330:	e000ed14 	.word	0xe000ed14
    e334:	0001fbf8 	.word	0x0001fbf8
    e338:	40011800 	.word	0x40011800
    e33c:	40011400 	.word	0x40011400
    e340:	40000800 	.word	0x40000800
    e344:	40010800 	.word	0x40010800
    e348:	40000400 	.word	0x40000400
    e34c:	43480000 	.word	0x43480000
    e350:	44e74000 	.word	0x44e74000
    e354:	bfc90fdb 	.word	0xbfc90fdb

0000e358 <_Znwj>:
static Header* nextFreeMemory;
static Header* base = NULL;
static int nbPlace = 0;
static int sizeM = 0;

void * operator new(size_t size) throw()
    e358:	b480      	push	{r7}
    e35a:	b089      	sub	sp, #36
    e35c:	af00      	add	r7, sp, #0
    e35e:	6078      	str	r0, [r7, #4]
{
    nbPlace++;
    e360:	4b44      	ldr	r3, [pc, #272]	(e474 <_Znwj+0x11c>)
    e362:	681b      	ldr	r3, [r3, #0]
    e364:	f103 0201 	add.w	r2, r3, #1	; 0x1
    e368:	4b42      	ldr	r3, [pc, #264]	(e474 <_Znwj+0x11c>)
    e36a:	601a      	str	r2, [r3, #0]
    if (base == NULL)
    e36c:	4b42      	ldr	r3, [pc, #264]	(e478 <_Znwj+0x120>)
    e36e:	681b      	ldr	r3, [r3, #0]
    e370:	2b00      	cmp	r3, #0
    e372:	d111      	bne.n	e398 <_Znwj+0x40>
    {
        base = memory_ptr;
    e374:	4b41      	ldr	r3, [pc, #260]	(e47c <_Znwj+0x124>)
    e376:	681a      	ldr	r2, [r3, #0]
    e378:	4b3f      	ldr	r3, [pc, #252]	(e478 <_Znwj+0x120>)
    e37a:	601a      	str	r2, [r3, #0]
        base->s.nextFree = memory_ptr;
    e37c:	4b3e      	ldr	r3, [pc, #248]	(e478 <_Znwj+0x120>)
    e37e:	681a      	ldr	r2, [r3, #0]
    e380:	4b3e      	ldr	r3, [pc, #248]	(e47c <_Znwj+0x124>)
    e382:	681b      	ldr	r3, [r3, #0]
    e384:	6013      	str	r3, [r2, #0]
        #endif
        #ifdef STM32F10X_MD // stm h103
        base->s.size = 5000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 20kB -> 5000 unit
        #endif
        #ifdef STM32F10X_CL // stm h107
        base->s.size = 16000;   // Initialisation de la mémoire = Taille disponible dans la ram en unit de base de la mémoire (une unité = 4 octets). Ici 64kB -> 16000 unit
    e386:	4b3c      	ldr	r3, [pc, #240]	(e478 <_Znwj+0x120>)
    e388:	681a      	ldr	r2, [r3, #0]
    e38a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    e38e:	6053      	str	r3, [r2, #4]
        #endif
        nextFreeMemory = memory_ptr;
    e390:	4b3a      	ldr	r3, [pc, #232]	(e47c <_Znwj+0x124>)
    e392:	681a      	ldr	r2, [r3, #0]
    e394:	4b3a      	ldr	r3, [pc, #232]	(e480 <_Znwj+0x128>)
    e396:	601a      	str	r2, [r3, #0]

    }
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    e398:	687b      	ldr	r3, [r7, #4]
    e39a:	f103 0307 	add.w	r3, r3, #7	; 0x7
    e39e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    e3a2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    e3a6:	60fb      	str	r3, [r7, #12]
    sizeM += nunit;
    e3a8:	4b36      	ldr	r3, [pc, #216]	(e484 <_Znwj+0x12c>)
    e3aa:	681b      	ldr	r3, [r3, #0]
    e3ac:	461a      	mov	r2, r3
    e3ae:	68fb      	ldr	r3, [r7, #12]
    e3b0:	4413      	add	r3, r2
    e3b2:	461a      	mov	r2, r3
    e3b4:	4b33      	ldr	r3, [pc, #204]	(e484 <_Znwj+0x12c>)
    e3b6:	601a      	str	r2, [r3, #0]
    Header *p = nextFreeMemory;
    e3b8:	4b31      	ldr	r3, [pc, #196]	(e480 <_Znwj+0x128>)
    e3ba:	681b      	ldr	r3, [r3, #0]
    e3bc:	613b      	str	r3, [r7, #16]
    Header  *oldP = p;
    e3be:	693b      	ldr	r3, [r7, #16]
    e3c0:	617b      	str	r3, [r7, #20]
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    e3c2:	4b2f      	ldr	r3, [pc, #188]	(e480 <_Znwj+0x128>)
    e3c4:	681b      	ldr	r3, [r3, #0]
    e3c6:	61bb      	str	r3, [r7, #24]
    {
        if (nunit <= ip->s.size )
    e3c8:	69bb      	ldr	r3, [r7, #24]
    e3ca:	685a      	ldr	r2, [r3, #4]
    e3cc:	68fb      	ldr	r3, [r7, #12]
    e3ce:	429a      	cmp	r2, r3
    e3d0:	d33a      	bcc.n	e448 <_Znwj+0xf0>
        {
            if (nunit == ip->s.size)
    e3d2:	69bb      	ldr	r3, [r7, #24]
    e3d4:	685a      	ldr	r2, [r3, #4]
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	429a      	cmp	r2, r3
    e3da:	d10e      	bne.n	e3fa <_Znwj+0xa2>
            {
                if (ip->s.nextFree != ip)
    e3dc:	69bb      	ldr	r3, [r7, #24]
    e3de:	681a      	ldr	r2, [r3, #0]
    e3e0:	69bb      	ldr	r3, [r7, #24]
    e3e2:	429a      	cmp	r2, r3
    e3e4:	d004      	beq.n	e3f0 <_Znwj+0x98>
                {
                    nextFreeMemory = ip->s.nextFree;
    e3e6:	69bb      	ldr	r3, [r7, #24]
    e3e8:	681a      	ldr	r2, [r3, #0]
    e3ea:	4b25      	ldr	r3, [pc, #148]	(e480 <_Znwj+0x128>)
    e3ec:	601a      	str	r2, [r3, #0]
    e3ee:	e026      	b.n	e43e <_Znwj+0xe6>
                }
                else
                {
                    nextFreeMemory = NULL;
    e3f0:	4a23      	ldr	r2, [pc, #140]	(e480 <_Znwj+0x128>)
    e3f2:	f04f 0300 	mov.w	r3, #0	; 0x0
    e3f6:	6013      	str	r3, [r2, #0]
    e3f8:	e021      	b.n	e43e <_Znwj+0xe6>
                }
            }
            else
            {
                unsigned oldFreeUnit = p->s.size;
    e3fa:	693b      	ldr	r3, [r7, #16]
    e3fc:	685b      	ldr	r3, [r3, #4]
    e3fe:	61fb      	str	r3, [r7, #28]
                p->s.size = nunit;
    e400:	693a      	ldr	r2, [r7, #16]
    e402:	68fb      	ldr	r3, [r7, #12]
    e404:	6053      	str	r3, [r2, #4]
                oldP = p;
    e406:	693b      	ldr	r3, [r7, #16]
    e408:	617b      	str	r3, [r7, #20]
                p += nunit;
    e40a:	68fb      	ldr	r3, [r7, #12]
    e40c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e410:	693b      	ldr	r3, [r7, #16]
    e412:	4413      	add	r3, r2
    e414:	613b      	str	r3, [r7, #16]
                oldP->s.nextFree = p;
    e416:	697a      	ldr	r2, [r7, #20]
    e418:	693b      	ldr	r3, [r7, #16]
    e41a:	6013      	str	r3, [r2, #0]
                p->s.size = oldFreeUnit - nunit;
    e41c:	69fa      	ldr	r2, [r7, #28]
    e41e:	68fb      	ldr	r3, [r7, #12]
    e420:	ebc3 0202 	rsb	r2, r3, r2
    e424:	693b      	ldr	r3, [r7, #16]
    e426:	605a      	str	r2, [r3, #4]
                p->s.nextFree = p;
    e428:	693a      	ldr	r2, [r7, #16]
    e42a:	693b      	ldr	r3, [r7, #16]
    e42c:	6013      	str	r3, [r2, #0]
                if (ip == nextFreeMemory)
    e42e:	4b14      	ldr	r3, [pc, #80]	(e480 <_Znwj+0x128>)
    e430:	681a      	ldr	r2, [r3, #0]
    e432:	69bb      	ldr	r3, [r7, #24]
    e434:	4293      	cmp	r3, r2
    e436:	d102      	bne.n	e43e <_Znwj+0xe6>
                {
                   nextFreeMemory = p;
    e438:	4a11      	ldr	r2, [pc, #68]	(e480 <_Znwj+0x128>)
    e43a:	693b      	ldr	r3, [r7, #16]
    e43c:	6013      	str	r3, [r2, #0]
                }
            }

            return ip+1;
    e43e:	69bb      	ldr	r3, [r7, #24]
    e440:	f103 0308 	add.w	r3, r3, #8	; 0x8
    e444:	603b      	str	r3, [r7, #0]
    e446:	e00d      	b.n	e464 <_Znwj+0x10c>
        }
        if (ip==oldP)
    e448:	69ba      	ldr	r2, [r7, #24]
    e44a:	697b      	ldr	r3, [r7, #20]
    e44c:	429a      	cmp	r2, r3
    e44e:	d103      	bne.n	e458 <_Znwj+0x100>
        {
            return NULL;
    e450:	f04f 0300 	mov.w	r3, #0	; 0x0
    e454:	603b      	str	r3, [r7, #0]
    e456:	e005      	b.n	e464 <_Znwj+0x10c>
    unsigned nunit = (size + sizeof(Header)-1)/sizeof(Header)+1;
    sizeM += nunit;
    Header *p = nextFreeMemory;
    Header  *oldP = p;
    Header *ip;
    for (ip = nextFreeMemory; ; p = ip, ip = ip->s.nextFree)
    e458:	69bb      	ldr	r3, [r7, #24]
    e45a:	613b      	str	r3, [r7, #16]
    e45c:	69bb      	ldr	r3, [r7, #24]
    e45e:	681b      	ldr	r3, [r3, #0]
    e460:	61bb      	str	r3, [r7, #24]
    e462:	e7b1      	b.n	e3c8 <_Znwj+0x70>
    e464:	683b      	ldr	r3, [r7, #0]
        if (ip==oldP)
        {
            return NULL;
        }
    }
}
    e466:	4618      	mov	r0, r3
    e468:	f107 0724 	add.w	r7, r7, #36	; 0x24
    e46c:	46bd      	mov	sp, r7
    e46e:	bc80      	pop	{r7}
    e470:	4770      	bx	lr
    e472:	46c0      	nop			(mov r8, r8)
    e474:	20000588 	.word	0x20000588
    e478:	20000594 	.word	0x20000594
    e47c:	2000002c 	.word	0x2000002c
    e480:	20000590 	.word	0x20000590
    e484:	2000058c 	.word	0x2000058c

0000e488 <_Znaj>:

void * operator new[](size_t size) throw()
    e488:	b580      	push	{r7, lr}
    e48a:	b082      	sub	sp, #8
    e48c:	af00      	add	r7, sp, #0
    e48e:	6078      	str	r0, [r7, #4]
{
  return operator new(size);
    e490:	6878      	ldr	r0, [r7, #4]
    e492:	f7ff ff61 	bl	e358 <_Znwj>
    e496:	4603      	mov	r3, r0
}
    e498:	4618      	mov	r0, r3
    e49a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e49e:	46bd      	mov	sp, r7
    e4a0:	bd80      	pop	{r7, pc}
    e4a2:	46c0      	nop			(mov r8, r8)

0000e4a4 <_ZdlPv>:

void operator delete(void * p)    throw()
    e4a4:	b480      	push	{r7}
    e4a6:	b085      	sub	sp, #20
    e4a8:	af00      	add	r7, sp, #0
    e4aa:	6078      	str	r0, [r7, #4]
{
    nbPlace--;
    e4ac:	4b36      	ldr	r3, [pc, #216]	(e588 <_ZdlPv+0xe4>)
    e4ae:	681b      	ldr	r3, [r3, #0]
    e4b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    e4b4:	4b34      	ldr	r3, [pc, #208]	(e588 <_ZdlPv+0xe4>)
    e4b6:	601a      	str	r2, [r3, #0]
    Header* d = (Header*)p -1;
    e4b8:	687b      	ldr	r3, [r7, #4]
    e4ba:	f1a3 0308 	sub.w	r3, r3, #8	; 0x8
    e4be:	60bb      	str	r3, [r7, #8]
    sizeM -= d->s.size;
    e4c0:	4b32      	ldr	r3, [pc, #200]	(e58c <_ZdlPv+0xe8>)
    e4c2:	681b      	ldr	r3, [r3, #0]
    e4c4:	461a      	mov	r2, r3
    e4c6:	68bb      	ldr	r3, [r7, #8]
    e4c8:	685b      	ldr	r3, [r3, #4]
    e4ca:	ebc3 0302 	rsb	r3, r3, r2
    e4ce:	461a      	mov	r2, r3
    e4d0:	4b2e      	ldr	r3, [pc, #184]	(e58c <_ZdlPv+0xe8>)
    e4d2:	601a      	str	r2, [r3, #0]
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    e4d4:	4b2e      	ldr	r3, [pc, #184]	(e590 <_ZdlPv+0xec>)
    e4d6:	681b      	ldr	r3, [r3, #0]
    e4d8:	60fb      	str	r3, [r7, #12]
    e4da:	e010      	b.n	e4fe <_ZdlPv+0x5a>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
    e4dc:	68fb      	ldr	r3, [r7, #12]
    e4de:	681a      	ldr	r2, [r3, #0]
    e4e0:	68fb      	ldr	r3, [r7, #12]
    e4e2:	429a      	cmp	r2, r3
    e4e4:	d808      	bhi.n	e4f8 <_ZdlPv+0x54>
    e4e6:	68ba      	ldr	r2, [r7, #8]
    e4e8:	68fb      	ldr	r3, [r7, #12]
    e4ea:	429a      	cmp	r2, r3
    e4ec:	d810      	bhi.n	e510 <_ZdlPv+0x6c>
    e4ee:	68fb      	ldr	r3, [r7, #12]
    e4f0:	681a      	ldr	r2, [r3, #0]
    e4f2:	68bb      	ldr	r3, [r7, #8]
    e4f4:	429a      	cmp	r2, r3
    e4f6:	d80b      	bhi.n	e510 <_ZdlPv+0x6c>
{
    nbPlace--;
    Header* d = (Header*)p -1;
    sizeM -= d->s.size;
    Header* predFree;
    for(predFree = nextFreeMemory;  !((d > predFree)&&(d<predFree->s.nextFree)); predFree = predFree->s.nextFree )
    e4f8:	68fb      	ldr	r3, [r7, #12]
    e4fa:	681b      	ldr	r3, [r3, #0]
    e4fc:	60fb      	str	r3, [r7, #12]
    e4fe:	68ba      	ldr	r2, [r7, #8]
    e500:	68fb      	ldr	r3, [r7, #12]
    e502:	429a      	cmp	r2, r3
    e504:	d9ea      	bls.n	e4dc <_ZdlPv+0x38>
    e506:	68fb      	ldr	r3, [r7, #12]
    e508:	681a      	ldr	r2, [r3, #0]
    e50a:	68bb      	ldr	r3, [r7, #8]
    e50c:	429a      	cmp	r2, r3
    e50e:	d9e5      	bls.n	e4dc <_ZdlPv+0x38>
    {
        if(predFree>=predFree->s.nextFree && (d > predFree || d<predFree->s.nextFree))
        break;
    }

    if ( d + d->s.size == predFree->s.nextFree ) // si le prochain vide est collé au block libéré
    e510:	68bb      	ldr	r3, [r7, #8]
    e512:	685b      	ldr	r3, [r3, #4]
    e514:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e518:	68bb      	ldr	r3, [r7, #8]
    e51a:	441a      	add	r2, r3
    e51c:	68fb      	ldr	r3, [r7, #12]
    e51e:	681b      	ldr	r3, [r3, #0]
    e520:	429a      	cmp	r2, r3
    e522:	d10d      	bne.n	e540 <_ZdlPv+0x9c>
    {
        d->s.size += predFree->s.nextFree->s.size;
    e524:	68bb      	ldr	r3, [r7, #8]
    e526:	685a      	ldr	r2, [r3, #4]
    e528:	68fb      	ldr	r3, [r7, #12]
    e52a:	681b      	ldr	r3, [r3, #0]
    e52c:	685b      	ldr	r3, [r3, #4]
    e52e:	441a      	add	r2, r3
    e530:	68bb      	ldr	r3, [r7, #8]
    e532:	605a      	str	r2, [r3, #4]
        d->s.nextFree = predFree->s.nextFree->s.nextFree;
    e534:	68fb      	ldr	r3, [r7, #12]
    e536:	681b      	ldr	r3, [r3, #0]
    e538:	681a      	ldr	r2, [r3, #0]
    e53a:	68bb      	ldr	r3, [r7, #8]
    e53c:	601a      	str	r2, [r3, #0]
    e53e:	e003      	b.n	e548 <_ZdlPv+0xa4>
    }
    else
    {
        d->s.nextFree = predFree->s.nextFree;
    e540:	68fb      	ldr	r3, [r7, #12]
    e542:	681a      	ldr	r2, [r3, #0]
    e544:	68bb      	ldr	r3, [r7, #8]
    e546:	601a      	str	r2, [r3, #0]
    }
    if (predFree+predFree->s.size == d)
    e548:	68fb      	ldr	r3, [r7, #12]
    e54a:	685b      	ldr	r3, [r3, #4]
    e54c:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    e550:	68fb      	ldr	r3, [r7, #12]
    e552:	441a      	add	r2, r3
    e554:	68bb      	ldr	r3, [r7, #8]
    e556:	429a      	cmp	r2, r3
    e558:	d10b      	bne.n	e572 <_ZdlPv+0xce>
    {
        predFree->s.nextFree = d->s.nextFree;
    e55a:	68bb      	ldr	r3, [r7, #8]
    e55c:	681a      	ldr	r2, [r3, #0]
    e55e:	68fb      	ldr	r3, [r7, #12]
    e560:	601a      	str	r2, [r3, #0]
        predFree->s.size += d->s.size;
    e562:	68fb      	ldr	r3, [r7, #12]
    e564:	685a      	ldr	r2, [r3, #4]
    e566:	68bb      	ldr	r3, [r7, #8]
    e568:	685b      	ldr	r3, [r3, #4]
    e56a:	441a      	add	r2, r3
    e56c:	68fb      	ldr	r3, [r7, #12]
    e56e:	605a      	str	r2, [r3, #4]
    e570:	e002      	b.n	e578 <_ZdlPv+0xd4>
    }
    else
    {
        predFree->s.nextFree = d;
    e572:	68fa      	ldr	r2, [r7, #12]
    e574:	68bb      	ldr	r3, [r7, #8]
    e576:	6013      	str	r3, [r2, #0]
    }
    nextFreeMemory = predFree;
    e578:	4a05      	ldr	r2, [pc, #20]	(e590 <_ZdlPv+0xec>)
    e57a:	68fb      	ldr	r3, [r7, #12]
    e57c:	6013      	str	r3, [r2, #0]

  /*  d--; // d est maintenant le Header de la zone mémoire contenant l'objet que l'on delete
    d->s.nextFree = nextFreeMemory; // On indique que la prochaîne mémoire vide sera la première mémoire vide au moment où on a lancé le delete
    nextFreeMemory = d;
    */
}
    e57e:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e582:	46bd      	mov	sp, r7
    e584:	bc80      	pop	{r7}
    e586:	4770      	bx	lr
    e588:	20000588 	.word	0x20000588
    e58c:	2000058c 	.word	0x2000058c
    e590:	20000590 	.word	0x20000590

0000e594 <_ZdaPv>:

void operator delete[](void * p)    throw()
    e594:	b580      	push	{r7, lr}
    e596:	b082      	sub	sp, #8
    e598:	af00      	add	r7, sp, #0
    e59a:	6078      	str	r0, [r7, #4]
{
    return operator delete(p);
    e59c:	6878      	ldr	r0, [r7, #4]
    e59e:	f7ff ff81 	bl	e4a4 <_ZdlPv>
}
    e5a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e5a6:	46bd      	mov	sp, r7
    e5a8:	bd80      	pop	{r7, pc}
    e5aa:	46c0      	nop			(mov r8, r8)

0000e5ac <_ZN8PositionC2Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    e5ac:	b480      	push	{r7}
    e5ae:	b083      	sub	sp, #12
    e5b0:	af00      	add	r7, sp, #0
    e5b2:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    e5b4:	687a      	ldr	r2, [r7, #4]
    e5b6:	4b06      	ldr	r3, [pc, #24]	(e5d0 <_ZN8PositionC2Ev+0x24>)
    e5b8:	6013      	str	r3, [r2, #0]
    e5ba:	687a      	ldr	r2, [r7, #4]
    e5bc:	4b04      	ldr	r3, [pc, #16]	(e5d0 <_ZN8PositionC2Ev+0x24>)
    e5be:	6053      	str	r3, [r2, #4]
{
}
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	4618      	mov	r0, r3
    e5c4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e5c8:	46bd      	mov	sp, r7
    e5ca:	bc80      	pop	{r7}
    e5cc:	4770      	bx	lr
    e5ce:	46c0      	nop			(mov r8, r8)
    e5d0:	00000000 	.word	0x00000000

0000e5d4 <_ZN8PositionC1Ev>:

#include "position.h"


// Constructeur par défaut avec des coordonnées nulles.
Position::Position()
    e5d4:	b480      	push	{r7}
    e5d6:	b083      	sub	sp, #12
    e5d8:	af00      	add	r7, sp, #0
    e5da:	6078      	str	r0, [r7, #4]
    : x(0), y(0)
    e5dc:	687a      	ldr	r2, [r7, #4]
    e5de:	4b06      	ldr	r3, [pc, #24]	(e5f8 <_ZN8PositionC1Ev+0x24>)
    e5e0:	6013      	str	r3, [r2, #0]
    e5e2:	687a      	ldr	r2, [r7, #4]
    e5e4:	4b04      	ldr	r3, [pc, #16]	(e5f8 <_ZN8PositionC1Ev+0x24>)
    e5e6:	6053      	str	r3, [r2, #4]
{
}
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	4618      	mov	r0, r3
    e5ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e5f0:	46bd      	mov	sp, r7
    e5f2:	bc80      	pop	{r7}
    e5f4:	4770      	bx	lr
    e5f6:	46c0      	nop			(mov r8, r8)
    e5f8:	00000000 	.word	0x00000000

0000e5fc <_ZN8PositionC2Effb>:

Position::Position(Distance X, Distance Y, bool isBlue)
    e5fc:	b480      	push	{r7}
    e5fe:	b085      	sub	sp, #20
    e600:	af00      	add	r7, sp, #0
    e602:	60f8      	str	r0, [r7, #12]
    e604:	60b9      	str	r1, [r7, #8]
    e606:	607a      	str	r2, [r7, #4]
    e608:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    e60a:	68fa      	ldr	r2, [r7, #12]
    e60c:	68bb      	ldr	r3, [r7, #8]
    e60e:	6013      	str	r3, [r2, #0]
    e610:	68fa      	ldr	r2, [r7, #12]
    e612:	687b      	ldr	r3, [r7, #4]
    e614:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    e616:	68fb      	ldr	r3, [r7, #12]
    e618:	4618      	mov	r0, r3
    e61a:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e61e:	46bd      	mov	sp, r7
    e620:	bc80      	pop	{r7}
    e622:	4770      	bx	lr

0000e624 <_ZN8PositionC1Effb>:
Position::Position()
    : x(0), y(0)
{
}

Position::Position(Distance X, Distance Y, bool isBlue)
    e624:	b480      	push	{r7}
    e626:	b085      	sub	sp, #20
    e628:	af00      	add	r7, sp, #0
    e62a:	60f8      	str	r0, [r7, #12]
    e62c:	60b9      	str	r1, [r7, #8]
    e62e:	607a      	str	r2, [r7, #4]
    e630:	70fb      	strb	r3, [r7, #3]
    : x(X), y(Y)
    e632:	68fa      	ldr	r2, [r7, #12]
    e634:	68bb      	ldr	r3, [r7, #8]
    e636:	6013      	str	r3, [r2, #0]
    e638:	68fa      	ldr	r2, [r7, #12]
    e63a:	687b      	ldr	r3, [r7, #4]
    e63c:	6053      	str	r3, [r2, #4]
{
    /*if (!isBlue)
    {
        x = 3000-x;
    }*/
}
    e63e:	68fb      	ldr	r3, [r7, #12]
    e640:	4618      	mov	r0, r3
    e642:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e646:	46bd      	mov	sp, r7
    e648:	bc80      	pop	{r7}
    e64a:	4770      	bx	lr

0000e64c <_ZNK8Position4getXEv>:

Distance Position::getX() const
    e64c:	b480      	push	{r7}
    e64e:	b083      	sub	sp, #12
    e650:	af00      	add	r7, sp, #0
    e652:	6078      	str	r0, [r7, #4]
{
    return x;
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	681b      	ldr	r3, [r3, #0]
}
    e658:	4618      	mov	r0, r3
    e65a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e65e:	46bd      	mov	sp, r7
    e660:	bc80      	pop	{r7}
    e662:	4770      	bx	lr

0000e664 <_ZNK8Position4getYEv>:

Distance Position::getY() const
    e664:	b480      	push	{r7}
    e666:	b083      	sub	sp, #12
    e668:	af00      	add	r7, sp, #0
    e66a:	6078      	str	r0, [r7, #4]
{
    return y;
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	685b      	ldr	r3, [r3, #4]
}
    e670:	4618      	mov	r0, r3
    e672:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e676:	46bd      	mov	sp, r7
    e678:	bc80      	pop	{r7}
    e67a:	4770      	bx	lr

0000e67c <_ZN8Position4setXEf>:

void Position::setX(Distance X)
    e67c:	b480      	push	{r7}
    e67e:	b083      	sub	sp, #12
    e680:	af00      	add	r7, sp, #0
    e682:	6078      	str	r0, [r7, #4]
    e684:	6039      	str	r1, [r7, #0]
{
    x = X;
    e686:	687a      	ldr	r2, [r7, #4]
    e688:	683b      	ldr	r3, [r7, #0]
    e68a:	6013      	str	r3, [r2, #0]
}
    e68c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e690:	46bd      	mov	sp, r7
    e692:	bc80      	pop	{r7}
    e694:	4770      	bx	lr
    e696:	46c0      	nop			(mov r8, r8)

0000e698 <_ZN8Position4setYEf>:

void Position::setY(Distance Y)
    e698:	b480      	push	{r7}
    e69a:	b083      	sub	sp, #12
    e69c:	af00      	add	r7, sp, #0
    e69e:	6078      	str	r0, [r7, #4]
    e6a0:	6039      	str	r1, [r7, #0]
{
    y = Y;
    e6a2:	687a      	ldr	r2, [r7, #4]
    e6a4:	683b      	ldr	r3, [r7, #0]
    e6a6:	6053      	str	r3, [r2, #4]
}
    e6a8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e6ac:	46bd      	mov	sp, r7
    e6ae:	bc80      	pop	{r7}
    e6b0:	4770      	bx	lr
    e6b2:	46c0      	nop			(mov r8, r8)

0000e6b4 <_ZNK8PositionplERKS_>:

Position Position::operator+(const Position &position) const
    e6b4:	b5b0      	push	{r4, r5, r7, lr}
    e6b6:	b084      	sub	sp, #16
    e6b8:	af00      	add	r7, sp, #0
    e6ba:	4604      	mov	r4, r0
    e6bc:	6079      	str	r1, [r7, #4]
    e6be:	603a      	str	r2, [r7, #0]
{
    Position resultat(x+position.x,y+position.y);
    e6c0:	687b      	ldr	r3, [r7, #4]
    e6c2:	681a      	ldr	r2, [r3, #0]
    e6c4:	683b      	ldr	r3, [r7, #0]
    e6c6:	681b      	ldr	r3, [r3, #0]
    e6c8:	4610      	mov	r0, r2
    e6ca:	4619      	mov	r1, r3
    e6cc:	f00a f9d0 	bl	18a70 <__addsf3>
    e6d0:	4603      	mov	r3, r0
    e6d2:	461d      	mov	r5, r3
    e6d4:	687b      	ldr	r3, [r7, #4]
    e6d6:	685a      	ldr	r2, [r3, #4]
    e6d8:	683b      	ldr	r3, [r7, #0]
    e6da:	685b      	ldr	r3, [r3, #4]
    e6dc:	4610      	mov	r0, r2
    e6de:	4619      	mov	r1, r3
    e6e0:	f00a f9c6 	bl	18a70 <__addsf3>
    e6e4:	4603      	mov	r3, r0
    e6e6:	4620      	mov	r0, r4
    e6e8:	4629      	mov	r1, r5
    e6ea:	461a      	mov	r2, r3
    e6ec:	f04f 0301 	mov.w	r3, #1	; 0x1
    e6f0:	f7ff ff98 	bl	e624 <_ZN8PositionC1Effb>
    return resultat;
}
    e6f4:	4620      	mov	r0, r4
    e6f6:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e6fa:	46bd      	mov	sp, r7
    e6fc:	bdb0      	pop	{r4, r5, r7, pc}
    e6fe:	46c0      	nop			(mov r8, r8)

0000e700 <_ZNK8PositionmiERKS_>:

Position Position::operator-(const Position &position) const
    e700:	b5b0      	push	{r4, r5, r7, lr}
    e702:	b084      	sub	sp, #16
    e704:	af00      	add	r7, sp, #0
    e706:	4604      	mov	r4, r0
    e708:	6079      	str	r1, [r7, #4]
    e70a:	603a      	str	r2, [r7, #0]
{
    Position resultat(x-position.x,y-position.y);
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	681a      	ldr	r2, [r3, #0]
    e710:	683b      	ldr	r3, [r7, #0]
    e712:	681b      	ldr	r3, [r3, #0]
    e714:	4610      	mov	r0, r2
    e716:	4619      	mov	r1, r3
    e718:	f00a f9a8 	bl	18a6c <__aeabi_fsub>
    e71c:	4603      	mov	r3, r0
    e71e:	461d      	mov	r5, r3
    e720:	687b      	ldr	r3, [r7, #4]
    e722:	685a      	ldr	r2, [r3, #4]
    e724:	683b      	ldr	r3, [r7, #0]
    e726:	685b      	ldr	r3, [r3, #4]
    e728:	4610      	mov	r0, r2
    e72a:	4619      	mov	r1, r3
    e72c:	f00a f99e 	bl	18a6c <__aeabi_fsub>
    e730:	4603      	mov	r3, r0
    e732:	4620      	mov	r0, r4
    e734:	4629      	mov	r1, r5
    e736:	461a      	mov	r2, r3
    e738:	f04f 0301 	mov.w	r3, #1	; 0x1
    e73c:	f7ff ff72 	bl	e624 <_ZN8PositionC1Effb>
    return resultat;
}
    e740:	4620      	mov	r0, r4
    e742:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e746:	46bd      	mov	sp, r7
    e748:	bdb0      	pop	{r4, r5, r7, pc}
    e74a:	46c0      	nop			(mov r8, r8)

0000e74c <_ZN8PositionaSES_>:

void Position::operator=(Position position)
    e74c:	b480      	push	{r7}
    e74e:	b085      	sub	sp, #20
    e750:	af00      	add	r7, sp, #0
    e752:	60f8      	str	r0, [r7, #12]
    e754:	f107 0304 	add.w	r3, r7, #4	; 0x4
    e758:	e883 0006 	stmia.w	r3, {r1, r2}
{

    x = position.x;
    e75c:	687a      	ldr	r2, [r7, #4]
    e75e:	68fb      	ldr	r3, [r7, #12]
    e760:	601a      	str	r2, [r3, #0]
    y = position.y;
    e762:	68ba      	ldr	r2, [r7, #8]
    e764:	68fb      	ldr	r3, [r7, #12]
    e766:	605a      	str	r2, [r3, #4]

}
    e768:	f107 0714 	add.w	r7, r7, #20	; 0x14
    e76c:	46bd      	mov	sp, r7
    e76e:	bc80      	pop	{r7}
    e770:	4770      	bx	lr
    e772:	46c0      	nop			(mov r8, r8)

0000e774 <_ZN8PositionpLERKS_>:

Position Position::operator+=(const Position &position)
    e774:	b590      	push	{r4, r7, lr}
    e776:	b083      	sub	sp, #12
    e778:	af00      	add	r7, sp, #0
    e77a:	4604      	mov	r4, r0
    e77c:	6079      	str	r1, [r7, #4]
    e77e:	603a      	str	r2, [r7, #0]
{
    this->x+=position.x;
    e780:	687b      	ldr	r3, [r7, #4]
    e782:	681a      	ldr	r2, [r3, #0]
    e784:	683b      	ldr	r3, [r7, #0]
    e786:	681b      	ldr	r3, [r3, #0]
    e788:	4610      	mov	r0, r2
    e78a:	4619      	mov	r1, r3
    e78c:	f00a f970 	bl	18a70 <__addsf3>
    e790:	4603      	mov	r3, r0
    e792:	461a      	mov	r2, r3
    e794:	687b      	ldr	r3, [r7, #4]
    e796:	601a      	str	r2, [r3, #0]
    this->y+=position.y;
    e798:	687b      	ldr	r3, [r7, #4]
    e79a:	685a      	ldr	r2, [r3, #4]
    e79c:	683b      	ldr	r3, [r7, #0]
    e79e:	685b      	ldr	r3, [r3, #4]
    e7a0:	4610      	mov	r0, r2
    e7a2:	4619      	mov	r1, r3
    e7a4:	f00a f964 	bl	18a70 <__addsf3>
    e7a8:	4603      	mov	r3, r0
    e7aa:	461a      	mov	r2, r3
    e7ac:	687b      	ldr	r3, [r7, #4]
    e7ae:	605a      	str	r2, [r3, #4]

    return *this;
    e7b0:	687b      	ldr	r3, [r7, #4]
    e7b2:	4620      	mov	r0, r4
    e7b4:	4619      	mov	r1, r3
    e7b6:	f04f 0208 	mov.w	r2, #8	; 0x8
    e7ba:	f00f ff41 	bl	1e640 <memmove>
}
    e7be:	4620      	mov	r0, r4
    e7c0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e7c4:	46bd      	mov	sp, r7
    e7c6:	bd90      	pop	{r4, r7, pc}

0000e7c8 <_ZN8PositionmIERKS_>:

Position Position::operator-=(const Position &position)
    e7c8:	b590      	push	{r4, r7, lr}
    e7ca:	b083      	sub	sp, #12
    e7cc:	af00      	add	r7, sp, #0
    e7ce:	4604      	mov	r4, r0
    e7d0:	6079      	str	r1, [r7, #4]
    e7d2:	603a      	str	r2, [r7, #0]
{
    this->x-=position.x;
    e7d4:	687b      	ldr	r3, [r7, #4]
    e7d6:	681a      	ldr	r2, [r3, #0]
    e7d8:	683b      	ldr	r3, [r7, #0]
    e7da:	681b      	ldr	r3, [r3, #0]
    e7dc:	4610      	mov	r0, r2
    e7de:	4619      	mov	r1, r3
    e7e0:	f00a f944 	bl	18a6c <__aeabi_fsub>
    e7e4:	4603      	mov	r3, r0
    e7e6:	461a      	mov	r2, r3
    e7e8:	687b      	ldr	r3, [r7, #4]
    e7ea:	601a      	str	r2, [r3, #0]
    this->y-=position.y;
    e7ec:	687b      	ldr	r3, [r7, #4]
    e7ee:	685a      	ldr	r2, [r3, #4]
    e7f0:	683b      	ldr	r3, [r7, #0]
    e7f2:	685b      	ldr	r3, [r3, #4]
    e7f4:	4610      	mov	r0, r2
    e7f6:	4619      	mov	r1, r3
    e7f8:	f00a f938 	bl	18a6c <__aeabi_fsub>
    e7fc:	4603      	mov	r3, r0
    e7fe:	461a      	mov	r2, r3
    e800:	687b      	ldr	r3, [r7, #4]
    e802:	605a      	str	r2, [r3, #4]

    return *this;
    e804:	687b      	ldr	r3, [r7, #4]
    e806:	4620      	mov	r0, r4
    e808:	4619      	mov	r1, r3
    e80a:	f04f 0208 	mov.w	r2, #8	; 0x8
    e80e:	f00f ff17 	bl	1e640 <memmove>
}
    e812:	4620      	mov	r0, r4
    e814:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e818:	46bd      	mov	sp, r7
    e81a:	bd90      	pop	{r4, r7, pc}

0000e81c <_ZNK8PositioneqERKS_>:
bool Position::presqueEgales(const Position &p) const
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
}

bool Position::operator==(const Position &p) const
    e81c:	b580      	push	{r7, lr}
    e81e:	b084      	sub	sp, #16
    e820:	af00      	add	r7, sp, #0
    e822:	60f8      	str	r0, [r7, #12]
    e824:	60b9      	str	r1, [r7, #8]
{
    return (x == p.x && y == p.y);
    e826:	68fb      	ldr	r3, [r7, #12]
    e828:	681a      	ldr	r2, [r3, #0]
    e82a:	68bb      	ldr	r3, [r7, #8]
    e82c:	6819      	ldr	r1, [r3, #0]
    e82e:	f04f 0300 	mov.w	r3, #0	; 0x0
    e832:	70fb      	strb	r3, [r7, #3]
    e834:	4610      	mov	r0, r2
    e836:	f00a fbb5 	bl	18fa4 <__aeabi_fcmpeq>
    e83a:	4603      	mov	r3, r0
    e83c:	2b00      	cmp	r3, #0
    e83e:	d002      	beq.n	e846 <_ZNK8PositioneqERKS_+0x2a>
    e840:	f04f 0301 	mov.w	r3, #1	; 0x1
    e844:	70fb      	strb	r3, [r7, #3]
    e846:	78fb      	ldrb	r3, [r7, #3]
    e848:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e84c:	b2db      	uxtb	r3, r3
    e84e:	2b00      	cmp	r3, #0
    e850:	d119      	bne.n	e886 <_ZNK8PositioneqERKS_+0x6a>
    e852:	68fb      	ldr	r3, [r7, #12]
    e854:	685a      	ldr	r2, [r3, #4]
    e856:	68bb      	ldr	r3, [r7, #8]
    e858:	6859      	ldr	r1, [r3, #4]
    e85a:	f04f 0300 	mov.w	r3, #0	; 0x0
    e85e:	70bb      	strb	r3, [r7, #2]
    e860:	4610      	mov	r0, r2
    e862:	f00a fb9f 	bl	18fa4 <__aeabi_fcmpeq>
    e866:	4603      	mov	r3, r0
    e868:	2b00      	cmp	r3, #0
    e86a:	d002      	beq.n	e872 <_ZNK8PositioneqERKS_+0x56>
    e86c:	f04f 0301 	mov.w	r3, #1	; 0x1
    e870:	70bb      	strb	r3, [r7, #2]
    e872:	78bb      	ldrb	r3, [r7, #2]
    e874:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e878:	b2db      	uxtb	r3, r3
    e87a:	2b00      	cmp	r3, #0
    e87c:	d103      	bne.n	e886 <_ZNK8PositioneqERKS_+0x6a>
    e87e:	f04f 0301 	mov.w	r3, #1	; 0x1
    e882:	607b      	str	r3, [r7, #4]
    e884:	e002      	b.n	e88c <_ZNK8PositioneqERKS_+0x70>
    e886:	f04f 0300 	mov.w	r3, #0	; 0x0
    e88a:	607b      	str	r3, [r7, #4]
    e88c:	687b      	ldr	r3, [r7, #4]
}
    e88e:	4618      	mov	r0, r3
    e890:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e894:	46bd      	mov	sp, r7
    e896:	bd80      	pop	{r7, pc}

0000e898 <_ZN8PositionmLEf>:

bool Position::operator*=(float val)
    e898:	b580      	push	{r7, lr}
    e89a:	b082      	sub	sp, #8
    e89c:	af00      	add	r7, sp, #0
    e89e:	6078      	str	r0, [r7, #4]
    e8a0:	6039      	str	r1, [r7, #0]
{
    this->x = this->x*val;
    e8a2:	687b      	ldr	r3, [r7, #4]
    e8a4:	681b      	ldr	r3, [r3, #0]
    e8a6:	4618      	mov	r0, r3
    e8a8:	6839      	ldr	r1, [r7, #0]
    e8aa:	f00a f9e9 	bl	18c80 <__aeabi_fmul>
    e8ae:	4603      	mov	r3, r0
    e8b0:	461a      	mov	r2, r3
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	601a      	str	r2, [r3, #0]
    this->y = this->y*val;
    e8b6:	687b      	ldr	r3, [r7, #4]
    e8b8:	685b      	ldr	r3, [r3, #4]
    e8ba:	4618      	mov	r0, r3
    e8bc:	6839      	ldr	r1, [r7, #0]
    e8be:	f00a f9df 	bl	18c80 <__aeabi_fmul>
    e8c2:	4603      	mov	r3, r0
    e8c4:	461a      	mov	r2, r3
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	605a      	str	r2, [r3, #4]

    return true;
    e8ca:	f04f 0301 	mov.w	r3, #1	; 0x1
}
    e8ce:	4618      	mov	r0, r3
    e8d0:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e8d4:	46bd      	mov	sp, r7
    e8d6:	bd80      	pop	{r7, pc}

0000e8d8 <_ZNK8Position8getAngleEv>:
Distance Position::getNorme() const
{
    return Distance(sqrt(x*x+y*y));
}

Angle Position::getAngle() const
    e8d8:	b5b0      	push	{r4, r5, r7, lr}
    e8da:	b082      	sub	sp, #8
    e8dc:	af00      	add	r7, sp, #0
    e8de:	6078      	str	r0, [r7, #4]
{
	return atan2(y,x);
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	685b      	ldr	r3, [r3, #4]
    e8e4:	4618      	mov	r0, r3
    e8e6:	f009 fd59 	bl	1839c <__aeabi_f2d>
    e8ea:	4604      	mov	r4, r0
    e8ec:	460d      	mov	r5, r1
    e8ee:	687b      	ldr	r3, [r7, #4]
    e8f0:	681b      	ldr	r3, [r3, #0]
    e8f2:	4618      	mov	r0, r3
    e8f4:	f009 fd52 	bl	1839c <__aeabi_f2d>
    e8f8:	4602      	mov	r2, r0
    e8fa:	460b      	mov	r3, r1
    e8fc:	4620      	mov	r0, r4
    e8fe:	4629      	mov	r1, r5
    e900:	f00d fdd6 	bl	1c4b0 <atan2>
    e904:	4602      	mov	r2, r0
    e906:	460b      	mov	r3, r1
    e908:	4610      	mov	r0, r2
    e90a:	4619      	mov	r1, r3
    e90c:	f00a f85a 	bl	189c4 <__aeabi_d2f>
    e910:	4603      	mov	r3, r0
}
    e912:	4618      	mov	r0, r3
    e914:	f107 0708 	add.w	r7, r7, #8	; 0x8
    e918:	46bd      	mov	sp, r7
    e91a:	bdb0      	pop	{r4, r5, r7, pc}

0000e91c <_ZNK8Position8getNormeEv>:
    this->y = this->y*val;

    return true;
}

Distance Position::getNorme() const
    e91c:	b590      	push	{r4, r7, lr}
    e91e:	b083      	sub	sp, #12
    e920:	af00      	add	r7, sp, #0
    e922:	6078      	str	r0, [r7, #4]
{
    return Distance(sqrt(x*x+y*y));
    e924:	687b      	ldr	r3, [r7, #4]
    e926:	681a      	ldr	r2, [r3, #0]
    e928:	687b      	ldr	r3, [r7, #4]
    e92a:	681b      	ldr	r3, [r3, #0]
    e92c:	4610      	mov	r0, r2
    e92e:	4619      	mov	r1, r3
    e930:	f00a f9a6 	bl	18c80 <__aeabi_fmul>
    e934:	4603      	mov	r3, r0
    e936:	461c      	mov	r4, r3
    e938:	687b      	ldr	r3, [r7, #4]
    e93a:	685a      	ldr	r2, [r3, #4]
    e93c:	687b      	ldr	r3, [r7, #4]
    e93e:	685b      	ldr	r3, [r3, #4]
    e940:	4610      	mov	r0, r2
    e942:	4619      	mov	r1, r3
    e944:	f00a f99c 	bl	18c80 <__aeabi_fmul>
    e948:	4603      	mov	r3, r0
    e94a:	4620      	mov	r0, r4
    e94c:	4619      	mov	r1, r3
    e94e:	f00a f88f 	bl	18a70 <__addsf3>
    e952:	4603      	mov	r3, r0
    e954:	4618      	mov	r0, r3
    e956:	f009 fd21 	bl	1839c <__aeabi_f2d>
    e95a:	4602      	mov	r2, r0
    e95c:	460b      	mov	r3, r1
    e95e:	4610      	mov	r0, r2
    e960:	4619      	mov	r1, r3
    e962:	f00d fdab 	bl	1c4bc <sqrt>
    e966:	4602      	mov	r2, r0
    e968:	460b      	mov	r3, r1
    e96a:	4610      	mov	r0, r2
    e96c:	4619      	mov	r1, r3
    e96e:	f00a f829 	bl	189c4 <__aeabi_d2f>
    e972:	4603      	mov	r3, r0
}
    e974:	4618      	mov	r0, r3
    e976:	f107 070c 	add.w	r7, r7, #12	; 0xc
    e97a:	46bd      	mov	sp, r7
    e97c:	bd90      	pop	{r4, r7, pc}
    e97e:	46c0      	nop			(mov r8, r8)

0000e980 <_ZNK8Position13presqueEgalesERKS_>:
    this->y-=position.y;

    return *this;
}

bool Position::presqueEgales(const Position &p) const
    e980:	b580      	push	{r7, lr}
    e982:	b084      	sub	sp, #16
    e984:	af00      	add	r7, sp, #0
    e986:	60f8      	str	r0, [r7, #12]
    e988:	60b9      	str	r1, [r7, #8]
{
	return (distancePresqueEgales(x, p.x) && distancePresqueEgales(y,p.y));
    e98a:	68fb      	ldr	r3, [r7, #12]
    e98c:	681a      	ldr	r2, [r3, #0]
    e98e:	68bb      	ldr	r3, [r7, #8]
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	4610      	mov	r0, r2
    e994:	4619      	mov	r1, r3
    e996:	f7fb fec3 	bl	a720 <_Z21distancePresqueEgalesff>
    e99a:	4603      	mov	r3, r0
    e99c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e9a0:	b2db      	uxtb	r3, r3
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d111      	bne.n	e9ca <_ZNK8Position13presqueEgalesERKS_+0x4a>
    e9a6:	68fb      	ldr	r3, [r7, #12]
    e9a8:	685a      	ldr	r2, [r3, #4]
    e9aa:	68bb      	ldr	r3, [r7, #8]
    e9ac:	685b      	ldr	r3, [r3, #4]
    e9ae:	4610      	mov	r0, r2
    e9b0:	4619      	mov	r1, r3
    e9b2:	f7fb feb5 	bl	a720 <_Z21distancePresqueEgalesff>
    e9b6:	4603      	mov	r3, r0
    e9b8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    e9bc:	b2db      	uxtb	r3, r3
    e9be:	2b00      	cmp	r3, #0
    e9c0:	d103      	bne.n	e9ca <_ZNK8Position13presqueEgalesERKS_+0x4a>
    e9c2:	f04f 0301 	mov.w	r3, #1	; 0x1
    e9c6:	607b      	str	r3, [r7, #4]
    e9c8:	e002      	b.n	e9d0 <_ZNK8Position13presqueEgalesERKS_+0x50>
    e9ca:	f04f 0300 	mov.w	r3, #0	; 0x0
    e9ce:	607b      	str	r3, [r7, #4]
    e9d0:	687b      	ldr	r3, [r7, #4]
}
    e9d2:	4618      	mov	r0, r3
    e9d4:	f107 0710 	add.w	r7, r7, #16	; 0x10
    e9d8:	46bd      	mov	sp, r7
    e9da:	bd80      	pop	{r7, pc}

0000e9dc <_ZN17PositionPlusAngleC2ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    e9dc:	b480      	push	{r7}
    e9de:	b085      	sub	sp, #20
    e9e0:	af00      	add	r7, sp, #0
    e9e2:	60f8      	str	r0, [r7, #12]
    e9e4:	60b9      	str	r1, [r7, #8]
    e9e6:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    e9e8:	68fb      	ldr	r3, [r7, #12]
    e9ea:	68ba      	ldr	r2, [r7, #8]
    e9ec:	469c      	mov	ip, r3
    e9ee:	4613      	mov	r3, r2
    e9f0:	e893 0003 	ldmia.w	r3, {r0, r1}
    e9f4:	e88c 0003 	stmia.w	ip, {r0, r1}
    e9f8:	68fa      	ldr	r2, [r7, #12]
    e9fa:	687b      	ldr	r3, [r7, #4]
    e9fc:	6093      	str	r3, [r2, #8]
{
}
    e9fe:	68fb      	ldr	r3, [r7, #12]
    ea00:	4618      	mov	r0, r3
    ea02:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ea06:	46bd      	mov	sp, r7
    ea08:	bc80      	pop	{r7}
    ea0a:	4770      	bx	lr

0000ea0c <_ZN17PositionPlusAngleC1ERK8Positionf>:

PositionPlusAngle::PositionPlusAngle()
{
}

PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    ea0c:	b480      	push	{r7}
    ea0e:	b085      	sub	sp, #20
    ea10:	af00      	add	r7, sp, #0
    ea12:	60f8      	str	r0, [r7, #12]
    ea14:	60b9      	str	r1, [r7, #8]
    ea16:	607a      	str	r2, [r7, #4]
    : position(pos), angle(ang)
    ea18:	68fb      	ldr	r3, [r7, #12]
    ea1a:	68ba      	ldr	r2, [r7, #8]
    ea1c:	469c      	mov	ip, r3
    ea1e:	4613      	mov	r3, r2
    ea20:	e893 0003 	ldmia.w	r3, {r0, r1}
    ea24:	e88c 0003 	stmia.w	ip, {r0, r1}
    ea28:	68fa      	ldr	r2, [r7, #12]
    ea2a:	687b      	ldr	r3, [r7, #4]
    ea2c:	6093      	str	r3, [r2, #8]
{
}
    ea2e:	68fb      	ldr	r3, [r7, #12]
    ea30:	4618      	mov	r0, r3
    ea32:	f107 0714 	add.w	r7, r7, #20	; 0x14
    ea36:	46bd      	mov	sp, r7
    ea38:	bc80      	pop	{r7}
    ea3a:	4770      	bx	lr

0000ea3c <_ZN17PositionPlusAngleC2ERKS_>:

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    ea3c:	b480      	push	{r7}
    ea3e:	b083      	sub	sp, #12
    ea40:	af00      	add	r7, sp, #0
    ea42:	6078      	str	r0, [r7, #4]
    ea44:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    ea46:	687b      	ldr	r3, [r7, #4]
    ea48:	683a      	ldr	r2, [r7, #0]
    ea4a:	469c      	mov	ip, r3
    ea4c:	4613      	mov	r3, r2
    ea4e:	e893 0003 	ldmia.w	r3, {r0, r1}
    ea52:	e88c 0003 	stmia.w	ip, {r0, r1}
    ea56:	683b      	ldr	r3, [r7, #0]
    ea58:	689a      	ldr	r2, [r3, #8]
    ea5a:	687b      	ldr	r3, [r7, #4]
    ea5c:	609a      	str	r2, [r3, #8]
{
}
    ea5e:	687b      	ldr	r3, [r7, #4]
    ea60:	4618      	mov	r0, r3
    ea62:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ea66:	46bd      	mov	sp, r7
    ea68:	bc80      	pop	{r7}
    ea6a:	4770      	bx	lr

0000ea6c <_ZN17PositionPlusAngleC1ERKS_>:
PositionPlusAngle::PositionPlusAngle(const Position& pos, Angle ang)
    : position(pos), angle(ang)
{
}

PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    ea6c:	b480      	push	{r7}
    ea6e:	b083      	sub	sp, #12
    ea70:	af00      	add	r7, sp, #0
    ea72:	6078      	str	r0, [r7, #4]
    ea74:	6039      	str	r1, [r7, #0]
    : position(original.position), angle(original.angle)
    ea76:	687b      	ldr	r3, [r7, #4]
    ea78:	683a      	ldr	r2, [r7, #0]
    ea7a:	469c      	mov	ip, r3
    ea7c:	4613      	mov	r3, r2
    ea7e:	e893 0003 	ldmia.w	r3, {r0, r1}
    ea82:	e88c 0003 	stmia.w	ip, {r0, r1}
    ea86:	683b      	ldr	r3, [r7, #0]
    ea88:	689a      	ldr	r2, [r3, #8]
    ea8a:	687b      	ldr	r3, [r7, #4]
    ea8c:	609a      	str	r2, [r3, #8]
{
}
    ea8e:	687b      	ldr	r3, [r7, #4]
    ea90:	4618      	mov	r0, r3
    ea92:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ea96:	46bd      	mov	sp, r7
    ea98:	bc80      	pop	{r7}
    ea9a:	4770      	bx	lr

0000ea9c <_ZNK17PositionPlusAngle11getPositionEv>:
bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
}

Position PositionPlusAngle::getPosition() const
    ea9c:	b480      	push	{r7}
    ea9e:	b083      	sub	sp, #12
    eaa0:	af00      	add	r7, sp, #0
    eaa2:	4684      	mov	ip, r0
    eaa4:	6079      	str	r1, [r7, #4]
{
    return position;
    eaa6:	687b      	ldr	r3, [r7, #4]
    eaa8:	4662      	mov	r2, ip
    eaaa:	e893 0003 	ldmia.w	r3, {r0, r1}
    eaae:	e882 0003 	stmia.w	r2, {r0, r1}
}
    eab2:	4660      	mov	r0, ip
    eab4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    eab8:	46bd      	mov	sp, r7
    eaba:	bc80      	pop	{r7}
    eabc:	4770      	bx	lr
    eabe:	46c0      	nop			(mov r8, r8)

0000eac0 <_ZNK17PositionPlusAngle8getAngleEv>:
void PositionPlusAngle::setPosition(const Position& p)
{
    position = p;
}

Angle PositionPlusAngle::getAngle() const
    eac0:	b480      	push	{r7}
    eac2:	b083      	sub	sp, #12
    eac4:	af00      	add	r7, sp, #0
    eac6:	6078      	str	r0, [r7, #4]
{
    return angle;
    eac8:	687b      	ldr	r3, [r7, #4]
    eaca:	689b      	ldr	r3, [r3, #8]
}
    eacc:	4618      	mov	r0, r3
    eace:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ead2:	46bd      	mov	sp, r7
    ead4:	bc80      	pop	{r7}
    ead6:	4770      	bx	lr

0000ead8 <_ZN17PositionPlusAngle8setAngleEf>:

void PositionPlusAngle::setAngle(Angle a)
    ead8:	b480      	push	{r7}
    eada:	b083      	sub	sp, #12
    eadc:	af00      	add	r7, sp, #0
    eade:	6078      	str	r0, [r7, #4]
    eae0:	6039      	str	r1, [r7, #0]
{
    angle = a;
    eae2:	687a      	ldr	r2, [r7, #4]
    eae4:	683b      	ldr	r3, [r7, #0]
    eae6:	6093      	str	r3, [r2, #8]
}
    eae8:	f107 070c 	add.w	r7, r7, #12	; 0xc
    eaec:	46bd      	mov	sp, r7
    eaee:	bc80      	pop	{r7}
    eaf0:	4770      	bx	lr
    eaf2:	46c0      	nop			(mov r8, r8)

0000eaf4 <_ZN17PositionPlusAngle4setYEf>:
void PositionPlusAngle::setX(Distance X)
{
    position.setX(X);
}

void PositionPlusAngle::setY(Distance Y)
    eaf4:	b580      	push	{r7, lr}
    eaf6:	b082      	sub	sp, #8
    eaf8:	af00      	add	r7, sp, #0
    eafa:	6078      	str	r0, [r7, #4]
    eafc:	6039      	str	r1, [r7, #0]
{
    position.setY(Y);
    eafe:	687b      	ldr	r3, [r7, #4]
    eb00:	4618      	mov	r0, r3
    eb02:	6839      	ldr	r1, [r7, #0]
    eb04:	f7ff fdc8 	bl	e698 <_ZN8Position4setYEf>
}
    eb08:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eb0c:	46bd      	mov	sp, r7
    eb0e:	bd80      	pop	{r7, pc}

0000eb10 <_ZN17PositionPlusAngle4setXEf>:
void PositionPlusAngle::setAngle(Angle a)
{
    angle = a;
}

void PositionPlusAngle::setX(Distance X)
    eb10:	b580      	push	{r7, lr}
    eb12:	b082      	sub	sp, #8
    eb14:	af00      	add	r7, sp, #0
    eb16:	6078      	str	r0, [r7, #4]
    eb18:	6039      	str	r1, [r7, #0]
{
    position.setX(X);
    eb1a:	687b      	ldr	r3, [r7, #4]
    eb1c:	4618      	mov	r0, r3
    eb1e:	6839      	ldr	r1, [r7, #0]
    eb20:	f7ff fdac 	bl	e67c <_ZN8Position4setXEf>
}
    eb24:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eb28:	46bd      	mov	sp, r7
    eb2a:	bd80      	pop	{r7, pc}

0000eb2c <_ZN17PositionPlusAngle11setPositionERK8Position>:
Position PositionPlusAngle::getPosition() const
{
    return position;
}

void PositionPlusAngle::setPosition(const Position& p)
    eb2c:	b580      	push	{r7, lr}
    eb2e:	b082      	sub	sp, #8
    eb30:	af00      	add	r7, sp, #0
    eb32:	6078      	str	r0, [r7, #4]
    eb34:	6039      	str	r1, [r7, #0]
{
    position = p;
    eb36:	687a      	ldr	r2, [r7, #4]
    eb38:	683b      	ldr	r3, [r7, #0]
    eb3a:	4610      	mov	r0, r2
    eb3c:	e893 0006 	ldmia.w	r3, {r1, r2}
    eb40:	f7ff fe04 	bl	e74c <_ZN8PositionaSES_>
}
    eb44:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eb48:	46bd      	mov	sp, r7
    eb4a:	bd80      	pop	{r7, pc}

0000eb4c <_ZN17PositionPlusAngleaSERKS_>:
PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
{
    return *this + (-distance);
}

const PositionPlusAngle& PositionPlusAngle::operator=(const PositionPlusAngle& positionPlusAngle)
    eb4c:	b580      	push	{r7, lr}
    eb4e:	b082      	sub	sp, #8
    eb50:	af00      	add	r7, sp, #0
    eb52:	6078      	str	r0, [r7, #4]
    eb54:	6039      	str	r1, [r7, #0]
{
    position = positionPlusAngle.position;
    eb56:	687a      	ldr	r2, [r7, #4]
    eb58:	683b      	ldr	r3, [r7, #0]
    eb5a:	4610      	mov	r0, r2
    eb5c:	e893 0006 	ldmia.w	r3, {r1, r2}
    eb60:	f7ff fdf4 	bl	e74c <_ZN8PositionaSES_>
    angle = positionPlusAngle.angle;
    eb64:	683b      	ldr	r3, [r7, #0]
    eb66:	689a      	ldr	r2, [r3, #8]
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	609a      	str	r2, [r3, #8]

    return *this;
    eb6c:	687b      	ldr	r3, [r7, #4]
}
    eb6e:	4618      	mov	r0, r3
    eb70:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eb74:	46bd      	mov	sp, r7
    eb76:	bd80      	pop	{r7, pc}

0000eb78 <_ZNK17PositionPlusAngle13presqueEgalesERKS_>:
bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
{
    return ((position==p.position) && (angle==p.angle));
}

bool PositionPlusAngle::presqueEgales(const PositionPlusAngle& positionPlusAngle) const
    eb78:	b580      	push	{r7, lr}
    eb7a:	b084      	sub	sp, #16
    eb7c:	af00      	add	r7, sp, #0
    eb7e:	60f8      	str	r0, [r7, #12]
    eb80:	60b9      	str	r1, [r7, #8]
{
    return(position.presqueEgales(positionPlusAngle.position) && angleEq(angle,positionPlusAngle.angle));
    eb82:	68fb      	ldr	r3, [r7, #12]
    eb84:	68ba      	ldr	r2, [r7, #8]
    eb86:	4618      	mov	r0, r3
    eb88:	4611      	mov	r1, r2
    eb8a:	f7ff fef9 	bl	e980 <_ZNK8Position13presqueEgalesERKS_>
    eb8e:	4603      	mov	r3, r0
    eb90:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    eb94:	b2db      	uxtb	r3, r3
    eb96:	2b00      	cmp	r3, #0
    eb98:	d111      	bne.n	ebbe <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    eb9a:	68fb      	ldr	r3, [r7, #12]
    eb9c:	689a      	ldr	r2, [r3, #8]
    eb9e:	68bb      	ldr	r3, [r7, #8]
    eba0:	689b      	ldr	r3, [r3, #8]
    eba2:	4610      	mov	r0, r2
    eba4:	4619      	mov	r1, r3
    eba6:	f7f8 fa83 	bl	70b0 <_Z7angleEqff>
    ebaa:	4603      	mov	r3, r0
    ebac:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ebb0:	b2db      	uxtb	r3, r3
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d103      	bne.n	ebbe <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x46>
    ebb6:	f04f 0301 	mov.w	r3, #1	; 0x1
    ebba:	607b      	str	r3, [r7, #4]
    ebbc:	e002      	b.n	ebc4 <_ZNK17PositionPlusAngle13presqueEgalesERKS_+0x4c>
    ebbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    ebc2:	607b      	str	r3, [r7, #4]
    ebc4:	687b      	ldr	r3, [r7, #4]
}
    ebc6:	4618      	mov	r0, r3
    ebc8:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ebcc:	46bd      	mov	sp, r7
    ebce:	bd80      	pop	{r7, pc}

0000ebd0 <_ZNK17PositionPlusAngleeqERKS_>:
    angle = positionPlusAngle.angle;

    return *this;
}

bool PositionPlusAngle::operator==(const PositionPlusAngle& p) const
    ebd0:	b580      	push	{r7, lr}
    ebd2:	b084      	sub	sp, #16
    ebd4:	af00      	add	r7, sp, #0
    ebd6:	60f8      	str	r0, [r7, #12]
    ebd8:	60b9      	str	r1, [r7, #8]
{
    return ((position==p.position) && (angle==p.angle));
    ebda:	68fb      	ldr	r3, [r7, #12]
    ebdc:	68ba      	ldr	r2, [r7, #8]
    ebde:	4618      	mov	r0, r3
    ebe0:	4611      	mov	r1, r2
    ebe2:	f7ff fe1b 	bl	e81c <_ZNK8PositioneqERKS_>
    ebe6:	4603      	mov	r3, r0
    ebe8:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ebec:	b2db      	uxtb	r3, r3
    ebee:	2b00      	cmp	r3, #0
    ebf0:	d119      	bne.n	ec26 <_ZNK17PositionPlusAngleeqERKS_+0x56>
    ebf2:	68fb      	ldr	r3, [r7, #12]
    ebf4:	689a      	ldr	r2, [r3, #8]
    ebf6:	68bb      	ldr	r3, [r7, #8]
    ebf8:	6899      	ldr	r1, [r3, #8]
    ebfa:	f04f 0300 	mov.w	r3, #0	; 0x0
    ebfe:	70fb      	strb	r3, [r7, #3]
    ec00:	4610      	mov	r0, r2
    ec02:	f00a f9cf 	bl	18fa4 <__aeabi_fcmpeq>
    ec06:	4603      	mov	r3, r0
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d002      	beq.n	ec12 <_ZNK17PositionPlusAngleeqERKS_+0x42>
    ec0c:	f04f 0301 	mov.w	r3, #1	; 0x1
    ec10:	70fb      	strb	r3, [r7, #3]
    ec12:	78fb      	ldrb	r3, [r7, #3]
    ec14:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    ec18:	b2db      	uxtb	r3, r3
    ec1a:	2b00      	cmp	r3, #0
    ec1c:	d103      	bne.n	ec26 <_ZNK17PositionPlusAngleeqERKS_+0x56>
    ec1e:	f04f 0301 	mov.w	r3, #1	; 0x1
    ec22:	607b      	str	r3, [r7, #4]
    ec24:	e002      	b.n	ec2c <_ZNK17PositionPlusAngleeqERKS_+0x5c>
    ec26:	f04f 0300 	mov.w	r3, #0	; 0x0
    ec2a:	607b      	str	r3, [r7, #4]
    ec2c:	687b      	ldr	r3, [r7, #4]
}
    ec2e:	4618      	mov	r0, r3
    ec30:	f107 0710 	add.w	r7, r7, #16	; 0x10
    ec34:	46bd      	mov	sp, r7
    ec36:	bd80      	pop	{r7, pc}

0000ec38 <_ZNK17PositionPlusAngleplERKS_>:
PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
}

PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
    ec38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec3c:	b088      	sub	sp, #32
    ec3e:	af00      	add	r7, sp, #0
    ec40:	4605      	mov	r5, r0
    ec42:	6079      	str	r1, [r7, #4]
    ec44:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
    ec46:	462e      	mov	r6, r5
    ec48:	687b      	ldr	r3, [r7, #4]
    ec4a:	4618      	mov	r0, r3
    ec4c:	f7ff fcfe 	bl	e64c <_ZNK8Position4getXEv>
    ec50:	4604      	mov	r4, r0
    ec52:	f107 0310 	add.w	r3, r7, #16	; 0x10
    ec56:	4618      	mov	r0, r3
    ec58:	6839      	ldr	r1, [r7, #0]
    ec5a:	f7ff ff1f 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    ec5e:	f107 0310 	add.w	r3, r7, #16	; 0x10
    ec62:	4618      	mov	r0, r3
    ec64:	f7ff fcf2 	bl	e64c <_ZNK8Position4getXEv>
    ec68:	4603      	mov	r3, r0
    ec6a:	4620      	mov	r0, r4
    ec6c:	4619      	mov	r1, r3
    ec6e:	f009 feff 	bl	18a70 <__addsf3>
    ec72:	4603      	mov	r3, r0
    ec74:	4698      	mov	r8, r3
    ec76:	687b      	ldr	r3, [r7, #4]
    ec78:	4618      	mov	r0, r3
    ec7a:	f7ff fcf3 	bl	e664 <_ZNK8Position4getYEv>
    ec7e:	4604      	mov	r4, r0
    ec80:	f107 0318 	add.w	r3, r7, #24	; 0x18
    ec84:	4618      	mov	r0, r3
    ec86:	6839      	ldr	r1, [r7, #0]
    ec88:	f7ff ff08 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    ec8c:	f107 0318 	add.w	r3, r7, #24	; 0x18
    ec90:	4618      	mov	r0, r3
    ec92:	f7ff fce7 	bl	e664 <_ZNK8Position4getYEv>
    ec96:	4603      	mov	r3, r0
    ec98:	4620      	mov	r0, r4
    ec9a:	4619      	mov	r1, r3
    ec9c:	f009 fee8 	bl	18a70 <__addsf3>
    eca0:	4603      	mov	r3, r0
    eca2:	461a      	mov	r2, r3
    eca4:	f107 0308 	add.w	r3, r7, #8	; 0x8
    eca8:	4618      	mov	r0, r3
    ecaa:	4641      	mov	r1, r8
    ecac:	f04f 0301 	mov.w	r3, #1	; 0x1
    ecb0:	f7ff fcb8 	bl	e624 <_ZN8PositionC1Effb>
    ecb4:	687b      	ldr	r3, [r7, #4]
    ecb6:	689c      	ldr	r4, [r3, #8]
    ecb8:	6838      	ldr	r0, [r7, #0]
    ecba:	f7ff ff01 	bl	eac0 <_ZNK17PositionPlusAngle8getAngleEv>
    ecbe:	4603      	mov	r3, r0
    ecc0:	4620      	mov	r0, r4
    ecc2:	4619      	mov	r1, r3
    ecc4:	f009 fed4 	bl	18a70 <__addsf3>
    ecc8:	4603      	mov	r3, r0
    ecca:	461a      	mov	r2, r3
    eccc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    ecd0:	4630      	mov	r0, r6
    ecd2:	4619      	mov	r1, r3
    ecd4:	f7ff fe9a 	bl	ea0c <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    ecd8:	4628      	mov	r0, r5
    ecda:	4628      	mov	r0, r5
    ecdc:	f107 0720 	add.w	r7, r7, #32	; 0x20
    ece0:	46bd      	mov	sp, r7
    ece2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ece6:	46c0      	nop			(mov r8, r8)

0000ece8 <_ZNK17PositionPlusAngleplEf>:
PositionPlusAngle::PositionPlusAngle(const PositionPlusAngle& original)
    : position(original.position), angle(original.angle)
{
}

PositionPlusAngle PositionPlusAngle::operator+(Distance distance) const
    ece8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecec:	b085      	sub	sp, #20
    ecee:	af00      	add	r7, sp, #0
    ecf0:	4606      	mov	r6, r0
    ecf2:	6079      	str	r1, [r7, #4]
    ecf4:	603a      	str	r2, [r7, #0]
{
    return PositionPlusAngle(Position(position.getX() + distance*cos(angle), position.getY() + distance*sin(angle)), angle);
    ecf6:	46b2      	mov	sl, r6
    ecf8:	687b      	ldr	r3, [r7, #4]
    ecfa:	4618      	mov	r0, r3
    ecfc:	f7ff fca6 	bl	e64c <_ZNK8Position4getXEv>
    ed00:	4603      	mov	r3, r0
    ed02:	4618      	mov	r0, r3
    ed04:	f009 fb4a 	bl	1839c <__aeabi_f2d>
    ed08:	4680      	mov	r8, r0
    ed0a:	4689      	mov	r9, r1
    ed0c:	6838      	ldr	r0, [r7, #0]
    ed0e:	f009 fb45 	bl	1839c <__aeabi_f2d>
    ed12:	4604      	mov	r4, r0
    ed14:	460d      	mov	r5, r1
    ed16:	687b      	ldr	r3, [r7, #4]
    ed18:	689b      	ldr	r3, [r3, #8]
    ed1a:	4618      	mov	r0, r3
    ed1c:	f009 fb3e 	bl	1839c <__aeabi_f2d>
    ed20:	4602      	mov	r2, r0
    ed22:	460b      	mov	r3, r1
    ed24:	4610      	mov	r0, r2
    ed26:	4619      	mov	r1, r3
    ed28:	f00d fb3a 	bl	1c3a0 <cos>
    ed2c:	4602      	mov	r2, r0
    ed2e:	460b      	mov	r3, r1
    ed30:	4620      	mov	r0, r4
    ed32:	4629      	mov	r1, r5
    ed34:	f009 fb86 	bl	18444 <__aeabi_dmul>
    ed38:	4602      	mov	r2, r0
    ed3a:	460b      	mov	r3, r1
    ed3c:	4640      	mov	r0, r8
    ed3e:	4649      	mov	r1, r9
    ed40:	f009 f9ce 	bl	180e0 <__adddf3>
    ed44:	4602      	mov	r2, r0
    ed46:	460b      	mov	r3, r1
    ed48:	4610      	mov	r0, r2
    ed4a:	4619      	mov	r1, r3
    ed4c:	f009 fe3a 	bl	189c4 <__aeabi_d2f>
    ed50:	4683      	mov	fp, r0
    ed52:	687b      	ldr	r3, [r7, #4]
    ed54:	4618      	mov	r0, r3
    ed56:	f7ff fc85 	bl	e664 <_ZNK8Position4getYEv>
    ed5a:	4603      	mov	r3, r0
    ed5c:	4618      	mov	r0, r3
    ed5e:	f009 fb1d 	bl	1839c <__aeabi_f2d>
    ed62:	4680      	mov	r8, r0
    ed64:	4689      	mov	r9, r1
    ed66:	6838      	ldr	r0, [r7, #0]
    ed68:	f009 fb18 	bl	1839c <__aeabi_f2d>
    ed6c:	4604      	mov	r4, r0
    ed6e:	460d      	mov	r5, r1
    ed70:	687b      	ldr	r3, [r7, #4]
    ed72:	689b      	ldr	r3, [r3, #8]
    ed74:	4618      	mov	r0, r3
    ed76:	f009 fb11 	bl	1839c <__aeabi_f2d>
    ed7a:	4602      	mov	r2, r0
    ed7c:	460b      	mov	r3, r1
    ed7e:	4610      	mov	r0, r2
    ed80:	4619      	mov	r1, r3
    ed82:	f00d fb4f 	bl	1c424 <sin>
    ed86:	4602      	mov	r2, r0
    ed88:	460b      	mov	r3, r1
    ed8a:	4620      	mov	r0, r4
    ed8c:	4629      	mov	r1, r5
    ed8e:	f009 fb59 	bl	18444 <__aeabi_dmul>
    ed92:	4602      	mov	r2, r0
    ed94:	460b      	mov	r3, r1
    ed96:	4640      	mov	r0, r8
    ed98:	4649      	mov	r1, r9
    ed9a:	f009 f9a1 	bl	180e0 <__adddf3>
    ed9e:	4602      	mov	r2, r0
    eda0:	460b      	mov	r3, r1
    eda2:	4610      	mov	r0, r2
    eda4:	4619      	mov	r1, r3
    eda6:	f009 fe0d 	bl	189c4 <__aeabi_d2f>
    edaa:	4602      	mov	r2, r0
    edac:	f107 0308 	add.w	r3, r7, #8	; 0x8
    edb0:	4618      	mov	r0, r3
    edb2:	4659      	mov	r1, fp
    edb4:	f04f 0301 	mov.w	r3, #1	; 0x1
    edb8:	f7ff fc34 	bl	e624 <_ZN8PositionC1Effb>
    edbc:	687b      	ldr	r3, [r7, #4]
    edbe:	689a      	ldr	r2, [r3, #8]
    edc0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    edc4:	4650      	mov	r0, sl
    edc6:	4619      	mov	r1, r3
    edc8:	f7ff fe20 	bl	ea0c <_ZN17PositionPlusAngleC1ERK8Positionf>
}
    edcc:	4630      	mov	r0, r6
    edce:	4630      	mov	r0, r6
    edd0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    edd4:	46bd      	mov	sp, r7
    edd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edda:	46c0      	nop			(mov r8, r8)

0000eddc <_ZNK17PositionPlusAnglemiEf>:
PositionPlusAngle PositionPlusAngle::operator+(const PositionPlusAngle& posAngAdd) const
{
    return PositionPlusAngle(Position(position.getX() + posAngAdd.getPosition().getX(), position.getY() + posAngAdd.getPosition().getY()), angle + posAngAdd.getAngle());
}

PositionPlusAngle PositionPlusAngle::operator-(Distance distance) const
    eddc:	b590      	push	{r4, r7, lr}
    edde:	b083      	sub	sp, #12
    ede0:	af00      	add	r7, sp, #0
    ede2:	4604      	mov	r4, r0
    ede4:	6079      	str	r1, [r7, #4]
    ede6:	603a      	str	r2, [r7, #0]
{
    return *this + (-distance);
    ede8:	4622      	mov	r2, r4
    edea:	683b      	ldr	r3, [r7, #0]
    edec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    edf0:	4610      	mov	r0, r2
    edf2:	6879      	ldr	r1, [r7, #4]
    edf4:	461a      	mov	r2, r3
    edf6:	f7ff ff77 	bl	ece8 <_ZNK17PositionPlusAngleplEf>
}
    edfa:	4620      	mov	r0, r4
    edfc:	4620      	mov	r0, r4
    edfe:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee02:	46bd      	mov	sp, r7
    ee04:	bd90      	pop	{r4, r7, pc}
    ee06:	46c0      	nop			(mov r8, r8)

0000ee08 <_ZN17PositionPlusAngleC1Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    ee08:	b580      	push	{r7, lr}
    ee0a:	b082      	sub	sp, #8
    ee0c:	af00      	add	r7, sp, #0
    ee0e:	6078      	str	r0, [r7, #4]
    ee10:	687b      	ldr	r3, [r7, #4]
    ee12:	4618      	mov	r0, r3
    ee14:	f7ff fbde 	bl	e5d4 <_ZN8PositionC1Ev>
{
}
    ee18:	687b      	ldr	r3, [r7, #4]
    ee1a:	4618      	mov	r0, r3
    ee1c:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ee20:	46bd      	mov	sp, r7
    ee22:	bd80      	pop	{r7, pc}

0000ee24 <_ZN17PositionPlusAngleC2Ev>:
#include <math.h>

#include "positionPlusAngle.h"

PositionPlusAngle::PositionPlusAngle()
    ee24:	b580      	push	{r7, lr}
    ee26:	b082      	sub	sp, #8
    ee28:	af00      	add	r7, sp, #0
    ee2a:	6078      	str	r0, [r7, #4]
    ee2c:	687b      	ldr	r3, [r7, #4]
    ee2e:	4618      	mov	r0, r3
    ee30:	f7ff fbd0 	bl	e5d4 <_ZN8PositionC1Ev>
{
}
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	4618      	mov	r0, r3
    ee38:	f107 0708 	add.w	r7, r7, #8	; 0x8
    ee3c:	46bd      	mov	sp, r7
    ee3e:	bd80      	pop	{r7, pc}

0000ee40 <_ZN10ActionGoTo16collisionAvoidedEv>:
            status = -1;
    }
    return status;
}

void ActionGoTo::collisionAvoided()
    ee40:	b480      	push	{r7}
    ee42:	b083      	sub	sp, #12
    ee44:	af00      	add	r7, sp, #0
    ee46:	6078      	str	r0, [r7, #4]
{
    //if (status > 0)
        this->status = 0;
    ee48:	687a      	ldr	r2, [r7, #4]
    ee4a:	f04f 0300 	mov.w	r3, #0	; 0x0
    ee4e:	60d3      	str	r3, [r2, #12]
}
    ee50:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee54:	46bd      	mov	sp, r7
    ee56:	bc80      	pop	{r7}
    ee58:	4770      	bx	lr
    ee5a:	46c0      	nop			(mov r8, r8)

0000ee5c <_ZN10ActionGoTo5resetEv>:

void ActionGoTo::reset()
    ee5c:	b480      	push	{r7}
    ee5e:	b083      	sub	sp, #12
    ee60:	af00      	add	r7, sp, #0
    ee62:	6078      	str	r0, [r7, #4]
{
    this->status = 0;
    ee64:	687a      	ldr	r2, [r7, #4]
    ee66:	f04f 0300 	mov.w	r3, #0	; 0x0
    ee6a:	60d3      	str	r3, [r2, #12]
}
    ee6c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ee70:	46bd      	mov	sp, r7
    ee72:	bc80      	pop	{r7}
    ee74:	4770      	bx	lr
    ee76:	46c0      	nop			(mov r8, r8)

0000ee78 <_ZN10ActionGoTo6updateEv>:
ActionGoTo::~ActionGoTo()
{
    //dtor
}

int ActionGoTo::update()
    ee78:	b590      	push	{r4, r7, lr}
    ee7a:	b099      	sub	sp, #100
    ee7c:	af02      	add	r7, sp, #8
    ee7e:	6078      	str	r0, [r7, #4]
{
    if (status == 0)
    ee80:	687b      	ldr	r3, [r7, #4]
    ee82:	68db      	ldr	r3, [r3, #12]
    ee84:	2b00      	cmp	r3, #0
    ee86:	d126      	bne.n	eed6 <_ZN10ActionGoTo6updateEv+0x5e>
    {
#ifndef ROBOTHW
        qDebug() << "actionGoTo";
#endif
        //allumerLED2();
        Position pos = Odometrie::odometrie->getPos().getPosition();
    ee88:	4b4c      	ldr	r3, [pc, #304]	(efbc <_ZN10ActionGoTo6updateEv+0x144>)
    ee8a:	681a      	ldr	r2, [r3, #0]
    ee8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
    ee90:	4618      	mov	r0, r3
    ee92:	4611      	mov	r1, r2
    ee94:	f7fa fc8c 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    ee98:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    ee9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
    eea0:	4618      	mov	r0, r3
    eea2:	4611      	mov	r1, r2
    eea4:	f7ff fdfa 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
        //Position vect = goalPosition - pos;
        //vect *= (1.f/vect.getNorme());

        goingCurve = false;//StrategieV2::getJustAvoided();
    eea8:	687a      	ldr	r2, [r7, #4]
    eeaa:	f04f 0300 	mov.w	r3, #0	; 0x0
    eeae:	7713      	strb	r3, [r2, #28]
            StrategieV2::setCurrentGoal(intermediateGoalPosition, true); // a changer selon le servo qui détecte
            status = 1;
        }
        else*/
        {
            StrategieV2::setCurrentGoal(goalPosition, goBack);
    eeb0:	687b      	ldr	r3, [r7, #4]
    eeb2:	f893 c010 	ldrb.w	ip, [r3, #16]
    eeb6:	687a      	ldr	r2, [r7, #4]
    eeb8:	4b41      	ldr	r3, [pc, #260]	(efc0 <_ZN10ActionGoTo6updateEv+0x148>)
    eeba:	9300      	str	r3, [sp, #0]
    eebc:	f102 0304 	add.w	r3, r2, #4	; 0x4
    eec0:	e893 0003 	ldmia.w	r3, {r0, r1}
    eec4:	4662      	mov	r2, ip
    eec6:	4b3f      	ldr	r3, [pc, #252]	(efc4 <_ZN10ActionGoTo6updateEv+0x14c>)
    eec8:	f005 f8f6 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            status = 3;
    eecc:	687a      	ldr	r2, [r7, #4]
    eece:	f04f 0303 	mov.w	r3, #3	; 0x3
    eed2:	60d3      	str	r3, [r2, #12]
    eed4:	e06b      	b.n	efae <_ZN10ActionGoTo6updateEv+0x136>
        }

    }
    else if (status ==1) // on recule
    eed6:	687b      	ldr	r3, [r7, #4]
    eed8:	68db      	ldr	r3, [r3, #12]
    eeda:	2b01      	cmp	r3, #1
    eedc:	d129      	bne.n	ef32 <_ZN10ActionGoTo6updateEv+0xba>
    {
        Position vect = intermediateGoalPosition - Odometrie::odometrie->getPos().getPosition();
    eede:	687b      	ldr	r3, [r7, #4]
    eee0:	f103 0428 	add.w	r4, r3, #40	; 0x28
    eee4:	4b35      	ldr	r3, [pc, #212]	(efbc <_ZN10ActionGoTo6updateEv+0x144>)
    eee6:	681a      	ldr	r2, [r3, #0]
    eee8:	f107 0338 	add.w	r3, r7, #56	; 0x38
    eeec:	4618      	mov	r0, r3
    eeee:	4611      	mov	r1, r2
    eef0:	f7fa fc5e 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    eef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
    eef8:	f107 0238 	add.w	r2, r7, #56	; 0x38
    eefc:	4618      	mov	r0, r3
    eefe:	4611      	mov	r1, r2
    ef00:	f7ff fdcc 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    ef04:	f107 0314 	add.w	r3, r7, #20	; 0x14
    ef08:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ef0c:	4618      	mov	r0, r3
    ef0e:	4621      	mov	r1, r4
    ef10:	f7ff fbf6 	bl	e700 <_ZNK8PositionmiERKS_>
        //std::cout << "status = 1 " << vect.getNorme() << std::endl;
        if (vect.getNorme() < precision) // now we have
    ef14:	f107 0314 	add.w	r3, r7, #20	; 0x14
    ef18:	4618      	mov	r0, r3
    ef1a:	f7ff fcff 	bl	e91c <_ZNK8Position8getNormeEv>
    ef1e:	4602      	mov	r2, r0
    ef20:	687b      	ldr	r3, [r7, #4]
    ef22:	6a5b      	ldr	r3, [r3, #36]
    ef24:	4610      	mov	r0, r2
    ef26:	4619      	mov	r1, r3
    ef28:	f00a f846 	bl	18fb8 <__aeabi_fcmplt>
    ef2c:	4603      	mov	r3, r0
    ef2e:	2b00      	cmp	r3, #0
    ef30:	e03d      	b.n	efae <_ZN10ActionGoTo6updateEv+0x136>
                sign = -1;
            else if (vect.getX() < 0)
            vect = vect + Position(500*vect.getY(), 500*vect.getX());*/
        }
    }
    else if (status == 2)
    ef32:	687b      	ldr	r3, [r7, #4]
    ef34:	68db      	ldr	r3, [r3, #12]
    ef36:	2b02      	cmp	r3, #2
    ef38:	d039      	beq.n	efae <_ZN10ActionGoTo6updateEv+0x136>
                StrategieV2::setCurrentGoal(goalPosition, goBack);
                status = 3;
            }
        }*/
    }
    else if (status == 3)
    ef3a:	687b      	ldr	r3, [r7, #4]
    ef3c:	68db      	ldr	r3, [r3, #12]
    ef3e:	2b03      	cmp	r3, #3
    ef40:	d135      	bne.n	efae <_ZN10ActionGoTo6updateEv+0x136>
    {
//        allumerLED();
        //std::cout << "status = 3" << std::endl;
        Position vect = goalPosition - Odometrie::odometrie->getPos().getPosition();
    ef42:	687b      	ldr	r3, [r7, #4]
    ef44:	f103 0404 	add.w	r4, r3, #4	; 0x4
    ef48:	4b1c      	ldr	r3, [pc, #112]	(efbc <_ZN10ActionGoTo6updateEv+0x144>)
    ef4a:	681a      	ldr	r2, [r3, #0]
    ef4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
    ef50:	4618      	mov	r0, r3
    ef52:	4611      	mov	r1, r2
    ef54:	f7fa fc2c 	bl	97b0 <_ZNK9Odometrie6getPosEv>
    ef58:	f107 0344 	add.w	r3, r7, #68	; 0x44
    ef5c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
    ef60:	4618      	mov	r0, r3
    ef62:	4611      	mov	r1, r2
    ef64:	f7ff fd9a 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
    ef68:	f107 030c 	add.w	r3, r7, #12	; 0xc
    ef6c:	f107 0244 	add.w	r2, r7, #68	; 0x44
    ef70:	4618      	mov	r0, r3
    ef72:	4621      	mov	r1, r4
    ef74:	f7ff fbc4 	bl	e700 <_ZNK8PositionmiERKS_>
        //std::cout << vect.getNorme() << std::endl;
        //std::cout << Odometrie::odometrie->getPos().getPosition().getX() << " "<< Odometrie::odometrie->getPos().getPosition().getY()   << std::endl;
        if (vect.getNorme() < precision)
    ef78:	f107 030c 	add.w	r3, r7, #12	; 0xc
    ef7c:	4618      	mov	r0, r3
    ef7e:	f7ff fccd 	bl	e91c <_ZNK8Position8getNormeEv>
    ef82:	4602      	mov	r2, r0
    ef84:	687b      	ldr	r3, [r7, #4]
    ef86:	6a59      	ldr	r1, [r3, #36]
    ef88:	f04f 0300 	mov.w	r3, #0	; 0x0
    ef8c:	70fb      	strb	r3, [r7, #3]
    ef8e:	4610      	mov	r0, r2
    ef90:	f00a f812 	bl	18fb8 <__aeabi_fcmplt>
    ef94:	4603      	mov	r3, r0
    ef96:	2b00      	cmp	r3, #0
    ef98:	d002      	beq.n	efa0 <_ZN10ActionGoTo6updateEv+0x128>
    ef9a:	f04f 0301 	mov.w	r3, #1	; 0x1
    ef9e:	70fb      	strb	r3, [r7, #3]
    efa0:	78fb      	ldrb	r3, [r7, #3]
    efa2:	2b00      	cmp	r3, #0
    efa4:	d003      	beq.n	efae <_ZN10ActionGoTo6updateEv+0x136>
            status = -1;
    efa6:	687a      	ldr	r2, [r7, #4]
    efa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    efac:	60d3      	str	r3, [r2, #12]
    }
    return status;
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	68db      	ldr	r3, [r3, #12]
}
    efb2:	4618      	mov	r0, r3
    efb4:	f107 075c 	add.w	r7, r7, #92	; 0x5c
    efb8:	46bd      	mov	sp, r7
    efba:	bd90      	pop	{r4, r7, pc}
    efbc:	20000570 	.word	0x20000570
    efc0:	c2c80000 	.word	0xc2c80000
    efc4:	40400000 	.word	0x40400000

0000efc8 <_ZN10ActionGoToD0Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    efc8:	b580      	push	{r7, lr}
    efca:	b082      	sub	sp, #8
    efcc:	af00      	add	r7, sp, #0
    efce:	6078      	str	r0, [r7, #4]
    efd0:	687a      	ldr	r2, [r7, #4]
    efd2:	4b0a      	ldr	r3, [pc, #40]	(effc <_ZN10ActionGoToD0Ev+0x34>)
    efd4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    efd6:	687b      	ldr	r3, [r7, #4]
    efd8:	4618      	mov	r0, r3
    efda:	f004 f87d 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
    efde:	f04f 0301 	mov.w	r3, #1	; 0x1
    efe2:	b2db      	uxtb	r3, r3
    efe4:	2b00      	cmp	r3, #0
    efe6:	d002      	beq.n	efee <_ZN10ActionGoToD0Ev+0x26>
    efe8:	6878      	ldr	r0, [r7, #4]
    efea:	f7ff fa5b 	bl	e4a4 <_ZdlPv>
    efee:	687b      	ldr	r3, [r7, #4]
    eff0:	4618      	mov	r0, r3
    eff2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    eff6:	46bd      	mov	sp, r7
    eff8:	bd80      	pop	{r7, pc}
    effa:	46c0      	nop			(mov r8, r8)
    effc:	0001fc08 	.word	0x0001fc08

0000f000 <_ZN10ActionGoToD1Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f000:	b580      	push	{r7, lr}
    f002:	b082      	sub	sp, #8
    f004:	af00      	add	r7, sp, #0
    f006:	6078      	str	r0, [r7, #4]
    f008:	687a      	ldr	r2, [r7, #4]
    f00a:	4b0a      	ldr	r3, [pc, #40]	(f034 <_ZN10ActionGoToD1Ev+0x34>)
    f00c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f00e:	687b      	ldr	r3, [r7, #4]
    f010:	4618      	mov	r0, r3
    f012:	f004 f861 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
    f016:	f04f 0300 	mov.w	r3, #0	; 0x0
    f01a:	b2db      	uxtb	r3, r3
    f01c:	2b00      	cmp	r3, #0
    f01e:	d002      	beq.n	f026 <_ZN10ActionGoToD1Ev+0x26>
    f020:	6878      	ldr	r0, [r7, #4]
    f022:	f7ff fa3f 	bl	e4a4 <_ZdlPv>
    f026:	687b      	ldr	r3, [r7, #4]
    f028:	4618      	mov	r0, r3
    f02a:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f02e:	46bd      	mov	sp, r7
    f030:	bd80      	pop	{r7, pc}
    f032:	46c0      	nop			(mov r8, r8)
    f034:	0001fc08 	.word	0x0001fc08

0000f038 <_ZN10ActionGoToD2Ev>:
    goingCurve = false;
    curveFactor = 1;
    precision = _precision;
}

ActionGoTo::~ActionGoTo()
    f038:	b580      	push	{r7, lr}
    f03a:	b082      	sub	sp, #8
    f03c:	af00      	add	r7, sp, #0
    f03e:	6078      	str	r0, [r7, #4]
    f040:	687a      	ldr	r2, [r7, #4]
    f042:	4b0a      	ldr	r3, [pc, #40]	(f06c <_ZN10ActionGoToD2Ev+0x34>)
    f044:	6013      	str	r3, [r2, #0]
{
    //dtor
}
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	4618      	mov	r0, r3
    f04a:	f004 f845 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
    f04e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f052:	b2db      	uxtb	r3, r3
    f054:	2b00      	cmp	r3, #0
    f056:	d002      	beq.n	f05e <_ZN10ActionGoToD2Ev+0x26>
    f058:	6878      	ldr	r0, [r7, #4]
    f05a:	f7ff fa23 	bl	e4a4 <_ZdlPv>
    f05e:	687b      	ldr	r3, [r7, #4]
    f060:	4618      	mov	r0, r3
    f062:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f066:	46bd      	mov	sp, r7
    f068:	bd80      	pop	{r7, pc}
    f06a:	46c0      	nop			(mov r8, r8)
    f06c:	0001fc08 	.word	0x0001fc08

0000f070 <_ZN10ActionGoToC1E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f070:	b580      	push	{r7, lr}
    f072:	b084      	sub	sp, #16
    f074:	af00      	add	r7, sp, #0
    f076:	60f8      	str	r0, [r7, #12]
    f078:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f07c:	e880 0006 	stmia.w	r0, {r1, r2}
    f080:	70fb      	strb	r3, [r7, #3]
    f082:	68fb      	ldr	r3, [r7, #12]
    f084:	4618      	mov	r0, r3
    f086:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f08a:	e893 0006 	ldmia.w	r3, {r1, r2}
    f08e:	f004 f863 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
    f092:	68fa      	ldr	r2, [r7, #12]
    f094:	4b0f      	ldr	r3, [pc, #60]	(f0d4 <_ZN10ActionGoToC1E8Positionbf+0x64>)
    f096:	6013      	str	r3, [r2, #0]
    f098:	68fb      	ldr	r3, [r7, #12]
    f09a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f09e:	4618      	mov	r0, r3
    f0a0:	f7ff fa98 	bl	e5d4 <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f0a4:	68fa      	ldr	r2, [r7, #12]
    f0a6:	78fb      	ldrb	r3, [r7, #3]
    f0a8:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f0aa:	68fa      	ldr	r2, [r7, #12]
    f0ac:	4b0a      	ldr	r3, [pc, #40]	(f0d8 <_ZN10ActionGoToC1E8Positionbf+0x68>)
    f0ae:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f0b0:	68fa      	ldr	r2, [r7, #12]
    f0b2:	f04f 0300 	mov.w	r3, #0	; 0x0
    f0b6:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f0b8:	68fa      	ldr	r2, [r7, #12]
    f0ba:	f04f 0301 	mov.w	r3, #1	; 0x1
    f0be:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f0c0:	68fa      	ldr	r2, [r7, #12]
    f0c2:	69bb      	ldr	r3, [r7, #24]
    f0c4:	6253      	str	r3, [r2, #36]
}
    f0c6:	68fb      	ldr	r3, [r7, #12]
    f0c8:	4618      	mov	r0, r3
    f0ca:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f0ce:	46bd      	mov	sp, r7
    f0d0:	bd80      	pop	{r7, pc}
    f0d2:	46c0      	nop			(mov r8, r8)
    f0d4:	0001fc08 	.word	0x0001fc08
    f0d8:	00000000 	.word	0x00000000

0000f0dc <_ZN10ActionGoToC2E8Positionbf>:
        1, 1, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 1, 1, // 2
        1, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 1, // 1
        3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, // 0
    };//0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
    */
ActionGoTo::ActionGoTo(Position goalPos, bool goBack1, float _precision) : MediumLevelAction(goalPos)
    f0dc:	b580      	push	{r7, lr}
    f0de:	b084      	sub	sp, #16
    f0e0:	af00      	add	r7, sp, #0
    f0e2:	60f8      	str	r0, [r7, #12]
    f0e4:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f0e8:	e880 0006 	stmia.w	r0, {r1, r2}
    f0ec:	70fb      	strb	r3, [r7, #3]
    f0ee:	68fb      	ldr	r3, [r7, #12]
    f0f0:	4618      	mov	r0, r3
    f0f2:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f0f6:	e893 0006 	ldmia.w	r3, {r1, r2}
    f0fa:	f004 f82d 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
    f0fe:	68fa      	ldr	r2, [r7, #12]
    f100:	4b0f      	ldr	r3, [pc, #60]	(f140 <_ZN10ActionGoToC2E8Positionbf+0x64>)
    f102:	6013      	str	r3, [r2, #0]
    f104:	68fb      	ldr	r3, [r7, #12]
    f106:	f103 0328 	add.w	r3, r3, #40	; 0x28
    f10a:	4618      	mov	r0, r3
    f10c:	f7ff fa62 	bl	e5d4 <_ZN8PositionC1Ev>
{
    goBack = goBack1;
    f110:	68fa      	ldr	r2, [r7, #12]
    f112:	78fb      	ldrb	r3, [r7, #3]
    f114:	7413      	strb	r3, [r2, #16]
    goalAngle = 0;
    f116:	68fa      	ldr	r2, [r7, #12]
    f118:	4b0a      	ldr	r3, [pc, #40]	(f144 <_ZN10ActionGoToC2E8Positionbf+0x68>)
    f11a:	6193      	str	r3, [r2, #24]
    goingCurve = false;
    f11c:	68fa      	ldr	r2, [r7, #12]
    f11e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f122:	7713      	strb	r3, [r2, #28]
    curveFactor = 1;
    f124:	68fa      	ldr	r2, [r7, #12]
    f126:	f04f 0301 	mov.w	r3, #1	; 0x1
    f12a:	6213      	str	r3, [r2, #32]
    precision = _precision;
    f12c:	68fa      	ldr	r2, [r7, #12]
    f12e:	69bb      	ldr	r3, [r7, #24]
    f130:	6253      	str	r3, [r2, #36]
}
    f132:	68fb      	ldr	r3, [r7, #12]
    f134:	4618      	mov	r0, r3
    f136:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f13a:	46bd      	mov	sp, r7
    f13c:	bd80      	pop	{r7, pc}
    f13e:	46c0      	nop			(mov r8, r8)
    f140:	0001fc08 	.word	0x0001fc08
    f144:	00000000 	.word	0x00000000

0000f148 <_ZN4Clap6updateEv>:
}


Clap::~Clap(){}

int Clap::update()
    f148:	b590      	push	{r4, r7, lr}
    f14a:	b085      	sub	sp, #20
    f14c:	af02      	add	r7, sp, #8
    f14e:	6078      	str	r0, [r7, #4]
{

    if (status == 0)
    f150:	687b      	ldr	r3, [r7, #4]
    f152:	68db      	ldr	r3, [r3, #12]
    f154:	2b00      	cmp	r3, #0
    f156:	d106      	bne.n	f166 <_ZN4Clap6updateEv+0x1e>
    {
        #ifndef ROBOTHW
                qDebug() << "clap";
        #endif
        status++;
    f158:	687b      	ldr	r3, [r7, #4]
    f15a:	68db      	ldr	r3, [r3, #12]
    f15c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f160:	687b      	ldr	r3, [r7, #4]
    f162:	60da      	str	r2, [r3, #12]
    f164:	e105      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 1)
    f166:	687b      	ldr	r3, [r7, #4]
    f168:	68db      	ldr	r3, [r3, #12]
    f16a:	2b01      	cmp	r3, #1
    f16c:	d114      	bne.n	f198 <_ZN4Clap6updateEv+0x50>
    {
        StrategieV2::setCurrentGoal(goalPosition, goBack);
    f16e:	687b      	ldr	r3, [r7, #4]
    f170:	f893 c010 	ldrb.w	ip, [r3, #16]
    f174:	687a      	ldr	r2, [r7, #4]
    f176:	4b82      	ldr	r3, [pc, #520]	(f380 <_ZN4Clap6updateEv+0x238>)
    f178:	9300      	str	r3, [sp, #0]
    f17a:	f102 0304 	add.w	r3, r2, #4	; 0x4
    f17e:	e893 0003 	ldmia.w	r3, {r0, r1}
    f182:	4662      	mov	r2, ip
    f184:	4b7f      	ldr	r3, [pc, #508]	(f384 <_ZN4Clap6updateEv+0x23c>)
    f186:	f004 ff97 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f18a:	687b      	ldr	r3, [r7, #4]
    f18c:	68db      	ldr	r3, [r3, #12]
    f18e:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f192:	687b      	ldr	r3, [r7, #4]
    f194:	60da      	str	r2, [r3, #12]
    f196:	e0ec      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 2)
    f198:	687b      	ldr	r3, [r7, #4]
    f19a:	68db      	ldr	r3, [r3, #12]
    f19c:	2b02      	cmp	r3, #2
    f19e:	d11a      	bne.n	f1d6 <_ZN4Clap6updateEv+0x8e>
    {
        if (Command::isNear(goalPosition))
    f1a0:	687b      	ldr	r3, [r7, #4]
    f1a2:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f1a6:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1aa:	4a77      	ldr	r2, [pc, #476]	(f388 <_ZN4Clap6updateEv+0x240>)
    f1ac:	f7f8 fd9e 	bl	7cec <_ZN7Command6isNearE8Positionf>
    f1b0:	4603      	mov	r3, r0
    f1b2:	2b00      	cmp	r3, #0
    f1b4:	f000 80dd 	beq.w	f372 <_ZN4Clap6updateEv+0x22a>
        {
            StrategieV2::lookAt(positionArrivee);
    f1b8:	687b      	ldr	r3, [r7, #4]
    f1ba:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f1be:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1c2:	4a72      	ldr	r2, [pc, #456]	(f38c <_ZN4Clap6updateEv+0x244>)
    f1c4:	f004 fee0 	bl	13f88 <_ZN11StrategieV26lookAtE8Positionf>
            status++;
    f1c8:	687b      	ldr	r3, [r7, #4]
    f1ca:	68db      	ldr	r3, [r3, #12]
    f1cc:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f1d0:	687b      	ldr	r3, [r7, #4]
    f1d2:	60da      	str	r2, [r3, #12]
    f1d4:	e0cd      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if (status == 3)
    f1d6:	687b      	ldr	r3, [r7, #4]
    f1d8:	68db      	ldr	r3, [r3, #12]
    f1da:	2b03      	cmp	r3, #3
    f1dc:	d143      	bne.n	f266 <_ZN4Clap6updateEv+0x11e>
    {
        if (Command::isLookingAt(positionArrivee))
    f1de:	687b      	ldr	r3, [r7, #4]
    f1e0:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f1e4:	e893 0003 	ldmia.w	r3, {r0, r1}
    f1e8:	4a69      	ldr	r2, [pc, #420]	(f390 <_ZN4Clap6updateEv+0x248>)
    f1ea:	f7f8 fcc3 	bl	7b74 <_ZN7Command11isLookingAtE8Positionf>
    f1ee:	4603      	mov	r3, r0
    f1f0:	2b00      	cmp	r3, #0
    f1f2:	f000 80be 	beq.w	f372 <_ZN4Clap6updateEv+0x22a>
        {
            //ouvrir le bras
            #ifndef ROBOTHW
            qDebug() << "On ouvre le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f1f6:	687b      	ldr	r3, [r7, #4]
    f1f8:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f1fc:	4618      	mov	r0, r3
    f1fe:	f7ff fa25 	bl	e64c <_ZNK8Position4getXEv>
    f202:	4604      	mov	r4, r0
    f204:	687b      	ldr	r3, [r7, #4]
    f206:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f20a:	4618      	mov	r0, r3
    f20c:	f7ff fa1e 	bl	e64c <_ZNK8Position4getXEv>
    f210:	4603      	mov	r3, r0
    f212:	4620      	mov	r0, r4
    f214:	4619      	mov	r1, r3
    f216:	f009 fc29 	bl	18a6c <__aeabi_fsub>
    f21a:	4603      	mov	r3, r0
    f21c:	461a      	mov	r2, r3
    f21e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f222:	70fb      	strb	r3, [r7, #3]
    f224:	4610      	mov	r0, r2
    f226:	495b      	ldr	r1, [pc, #364]	(f394 <_ZN4Clap6updateEv+0x24c>)
    f228:	f009 fee4 	bl	18ff4 <__aeabi_fcmpgt>
    f22c:	4603      	mov	r3, r0
    f22e:	2b00      	cmp	r3, #0
    f230:	d002      	beq.n	f238 <_ZN4Clap6updateEv+0xf0>
    f232:	f04f 0301 	mov.w	r3, #1	; 0x1
    f236:	70fb      	strb	r3, [r7, #3]
    f238:	78fb      	ldrb	r3, [r7, #3]
    f23a:	2b00      	cmp	r3, #0
    f23c:	d006      	beq.n	f24c <_ZN4Clap6updateEv+0x104>
                BrasLateral::getRight()->expand();
    f23e:	f7f6 f87f 	bl	5340 <_ZN11BrasLateral8getRightEv>
    f242:	4603      	mov	r3, r0
    f244:	4618      	mov	r0, r3
    f246:	f7f5 ffb3 	bl	51b0 <_ZN11BrasLateral6expandEv>
    f24a:	e005      	b.n	f258 <_ZN4Clap6updateEv+0x110>
            else
                BrasLateral::getLeft()->expand();
    f24c:	f7f6 f888 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    f250:	4603      	mov	r3, r0
    f252:	4618      	mov	r0, r3
    f254:	f7f5 ffac 	bl	51b0 <_ZN11BrasLateral6expandEv>
            status++;
    f258:	687b      	ldr	r3, [r7, #4]
    f25a:	68db      	ldr	r3, [r3, #12]
    f25c:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f260:	687b      	ldr	r3, [r7, #4]
    f262:	60da      	str	r2, [r3, #12]
    f264:	e085      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 53) && (status > -1 ))    //On attend que le bras du robot s'ouvre : 50ms par incrémentation du status
    f266:	687b      	ldr	r3, [r7, #4]
    f268:	68db      	ldr	r3, [r3, #12]
    f26a:	2b35      	cmp	r3, #53
    f26c:	dc0a      	bgt.n	f284 <_ZN4Clap6updateEv+0x13c>
    f26e:	687b      	ldr	r3, [r7, #4]
    f270:	68db      	ldr	r3, [r3, #12]
    f272:	2b00      	cmp	r3, #0
    f274:	db06      	blt.n	f284 <_ZN4Clap6updateEv+0x13c>
    {
        status++;
    f276:	687b      	ldr	r3, [r7, #4]
    f278:	68db      	ldr	r3, [r3, #12]
    f27a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f27e:	687b      	ldr	r3, [r7, #4]
    f280:	60da      	str	r2, [r3, #12]
    f282:	e076      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 54)
    f284:	687b      	ldr	r3, [r7, #4]
    f286:	68db      	ldr	r3, [r3, #12]
    f288:	2b36      	cmp	r3, #54
    f28a:	d114      	bne.n	f2b6 <_ZN4Clap6updateEv+0x16e>
    {
        StrategieV2::setCurrentGoal(positionArrivee, goBack);
    f28c:	687b      	ldr	r3, [r7, #4]
    f28e:	f893 c010 	ldrb.w	ip, [r3, #16]
    f292:	687a      	ldr	r2, [r7, #4]
    f294:	4b3a      	ldr	r3, [pc, #232]	(f380 <_ZN4Clap6updateEv+0x238>)
    f296:	9300      	str	r3, [sp, #0]
    f298:	f102 0320 	add.w	r3, r2, #32	; 0x20
    f29c:	e893 0003 	ldmia.w	r3, {r0, r1}
    f2a0:	4662      	mov	r2, ip
    f2a2:	4b38      	ldr	r3, [pc, #224]	(f384 <_ZN4Clap6updateEv+0x23c>)
    f2a4:	f004 ff08 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status++;
    f2a8:	687b      	ldr	r3, [r7, #4]
    f2aa:	68db      	ldr	r3, [r3, #12]
    f2ac:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f2b0:	687b      	ldr	r3, [r7, #4]
    f2b2:	60da      	str	r2, [r3, #12]
    f2b4:	e05d      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 55)
    f2b6:	687b      	ldr	r3, [r7, #4]
    f2b8:	68db      	ldr	r3, [r3, #12]
    f2ba:	2b37      	cmp	r3, #55
    f2bc:	d142      	bne.n	f344 <_ZN4Clap6updateEv+0x1fc>
    {
        if (Command::isNear(positionArrivee))
    f2be:	687b      	ldr	r3, [r7, #4]
    f2c0:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f2c4:	e893 0003 	ldmia.w	r3, {r0, r1}
    f2c8:	4a2f      	ldr	r2, [pc, #188]	(f388 <_ZN4Clap6updateEv+0x240>)
    f2ca:	f7f8 fd0f 	bl	7cec <_ZN7Command6isNearE8Positionf>
    f2ce:	4603      	mov	r3, r0
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d04e      	beq.n	f372 <_ZN4Clap6updateEv+0x22a>
        {
            //fermer bras
            #ifndef ROBOTHW
            qDebug() << "On ferme le bras";
            #endif
            if ((goalPosition.getX()-positionArrivee.getX())>0)
    f2d4:	687b      	ldr	r3, [r7, #4]
    f2d6:	f103 0304 	add.w	r3, r3, #4	; 0x4
    f2da:	4618      	mov	r0, r3
    f2dc:	f7ff f9b6 	bl	e64c <_ZNK8Position4getXEv>
    f2e0:	4604      	mov	r4, r0
    f2e2:	687b      	ldr	r3, [r7, #4]
    f2e4:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f2e8:	4618      	mov	r0, r3
    f2ea:	f7ff f9af 	bl	e64c <_ZNK8Position4getXEv>
    f2ee:	4603      	mov	r3, r0
    f2f0:	4620      	mov	r0, r4
    f2f2:	4619      	mov	r1, r3
    f2f4:	f009 fbba 	bl	18a6c <__aeabi_fsub>
    f2f8:	4603      	mov	r3, r0
    f2fa:	461a      	mov	r2, r3
    f2fc:	f04f 0300 	mov.w	r3, #0	; 0x0
    f300:	70bb      	strb	r3, [r7, #2]
    f302:	4610      	mov	r0, r2
    f304:	4923      	ldr	r1, [pc, #140]	(f394 <_ZN4Clap6updateEv+0x24c>)
    f306:	f009 fe75 	bl	18ff4 <__aeabi_fcmpgt>
    f30a:	4603      	mov	r3, r0
    f30c:	2b00      	cmp	r3, #0
    f30e:	d002      	beq.n	f316 <_ZN4Clap6updateEv+0x1ce>
    f310:	f04f 0301 	mov.w	r3, #1	; 0x1
    f314:	70bb      	strb	r3, [r7, #2]
    f316:	78bb      	ldrb	r3, [r7, #2]
    f318:	2b00      	cmp	r3, #0
    f31a:	d006      	beq.n	f32a <_ZN4Clap6updateEv+0x1e2>
                BrasLateral::getLeft()->collapse();
    f31c:	f7f6 f820 	bl	5360 <_ZN11BrasLateral7getLeftEv>
    f320:	4603      	mov	r3, r0
    f322:	4618      	mov	r0, r3
    f324:	f7f5 ff34 	bl	5190 <_ZN11BrasLateral8collapseEv>
    f328:	e005      	b.n	f336 <_ZN4Clap6updateEv+0x1ee>
            else
                BrasLateral::getRight()->collapse();
    f32a:	f7f6 f809 	bl	5340 <_ZN11BrasLateral8getRightEv>
    f32e:	4603      	mov	r3, r0
    f330:	4618      	mov	r0, r3
    f332:	f7f5 ff2d 	bl	5190 <_ZN11BrasLateral8collapseEv>
            status++;
    f336:	687b      	ldr	r3, [r7, #4]
    f338:	68db      	ldr	r3, [r3, #12]
    f33a:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f33e:	687b      	ldr	r3, [r7, #4]
    f340:	60da      	str	r2, [r3, #12]
    f342:	e016      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
        }
    }

    else if ((status <= 105) && (status > -1))
    f344:	687b      	ldr	r3, [r7, #4]
    f346:	68db      	ldr	r3, [r3, #12]
    f348:	2b69      	cmp	r3, #105
    f34a:	dc0a      	bgt.n	f362 <_ZN4Clap6updateEv+0x21a>
    f34c:	687b      	ldr	r3, [r7, #4]
    f34e:	68db      	ldr	r3, [r3, #12]
    f350:	2b00      	cmp	r3, #0
    f352:	db06      	blt.n	f362 <_ZN4Clap6updateEv+0x21a>
    {
        status++;
    f354:	687b      	ldr	r3, [r7, #4]
    f356:	68db      	ldr	r3, [r3, #12]
    f358:	f103 0201 	add.w	r2, r3, #1	; 0x1
    f35c:	687b      	ldr	r3, [r7, #4]
    f35e:	60da      	str	r2, [r3, #12]
    f360:	e007      	b.n	f372 <_ZN4Clap6updateEv+0x22a>
    }

    else if (status == 106){
    f362:	687b      	ldr	r3, [r7, #4]
    f364:	68db      	ldr	r3, [r3, #12]
    f366:	2b6a      	cmp	r3, #106
    f368:	d103      	bne.n	f372 <_ZN4Clap6updateEv+0x22a>
        status = -1;
    f36a:	687a      	ldr	r2, [r7, #4]
    f36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f370:	60d3      	str	r3, [r2, #12]
#ifndef ROBOTHW
        qDebug() << "Etape clap finie";
#endif
    }

    return status;
    f372:	687b      	ldr	r3, [r7, #4]
    f374:	68db      	ldr	r3, [r3, #12]
}
    f376:	4618      	mov	r0, r3
    f378:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f37c:	46bd      	mov	sp, r7
    f37e:	bd90      	pop	{r4, r7, pc}
    f380:	c2c80000 	.word	0xc2c80000
    f384:	40400000 	.word	0x40400000
    f388:	41f00000 	.word	0x41f00000
    f38c:	3cf5c28f 	.word	0x3cf5c28f
    f390:	3db2b8c2 	.word	0x3db2b8c2
    f394:	00000000 	.word	0x00000000

0000f398 <_ZN4ClapD0Ev>:
    this->positionArrivee = positionArrivee;
    this->goBack = false;
}


Clap::~Clap(){}
    f398:	b580      	push	{r7, lr}
    f39a:	b082      	sub	sp, #8
    f39c:	af00      	add	r7, sp, #0
    f39e:	6078      	str	r0, [r7, #4]
    f3a0:	687a      	ldr	r2, [r7, #4]
    f3a2:	4b0a      	ldr	r3, [pc, #40]	(f3cc <_ZN4ClapD0Ev+0x34>)
    f3a4:	6013      	str	r3, [r2, #0]
    f3a6:	687b      	ldr	r3, [r7, #4]
    f3a8:	4618      	mov	r0, r3
    f3aa:	f003 fe95 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
    f3ae:	f04f 0301 	mov.w	r3, #1	; 0x1
    f3b2:	b2db      	uxtb	r3, r3
    f3b4:	2b00      	cmp	r3, #0
    f3b6:	d002      	beq.n	f3be <_ZN4ClapD0Ev+0x26>
    f3b8:	6878      	ldr	r0, [r7, #4]
    f3ba:	f7ff f873 	bl	e4a4 <_ZdlPv>
    f3be:	687b      	ldr	r3, [r7, #4]
    f3c0:	4618      	mov	r0, r3
    f3c2:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f3c6:	46bd      	mov	sp, r7
    f3c8:	bd80      	pop	{r7, pc}
    f3ca:	46c0      	nop			(mov r8, r8)
    f3cc:	0001fc28 	.word	0x0001fc28

0000f3d0 <_ZN4ClapD1Ev>:
    f3d0:	b580      	push	{r7, lr}
    f3d2:	b082      	sub	sp, #8
    f3d4:	af00      	add	r7, sp, #0
    f3d6:	6078      	str	r0, [r7, #4]
    f3d8:	687a      	ldr	r2, [r7, #4]
    f3da:	4b0a      	ldr	r3, [pc, #40]	(f404 <_ZN4ClapD1Ev+0x34>)
    f3dc:	6013      	str	r3, [r2, #0]
    f3de:	687b      	ldr	r3, [r7, #4]
    f3e0:	4618      	mov	r0, r3
    f3e2:	f003 fe79 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
    f3e6:	f04f 0300 	mov.w	r3, #0	; 0x0
    f3ea:	b2db      	uxtb	r3, r3
    f3ec:	2b00      	cmp	r3, #0
    f3ee:	d002      	beq.n	f3f6 <_ZN4ClapD1Ev+0x26>
    f3f0:	6878      	ldr	r0, [r7, #4]
    f3f2:	f7ff f857 	bl	e4a4 <_ZdlPv>
    f3f6:	687b      	ldr	r3, [r7, #4]
    f3f8:	4618      	mov	r0, r3
    f3fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f3fe:	46bd      	mov	sp, r7
    f400:	bd80      	pop	{r7, pc}
    f402:	46c0      	nop			(mov r8, r8)
    f404:	0001fc28 	.word	0x0001fc28

0000f408 <_ZN4ClapD2Ev>:
    f408:	b580      	push	{r7, lr}
    f40a:	b082      	sub	sp, #8
    f40c:	af00      	add	r7, sp, #0
    f40e:	6078      	str	r0, [r7, #4]
    f410:	687a      	ldr	r2, [r7, #4]
    f412:	4b0a      	ldr	r3, [pc, #40]	(f43c <_ZN4ClapD2Ev+0x34>)
    f414:	6013      	str	r3, [r2, #0]
    f416:	687b      	ldr	r3, [r7, #4]
    f418:	4618      	mov	r0, r3
    f41a:	f003 fe5d 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
    f41e:	f04f 0300 	mov.w	r3, #0	; 0x0
    f422:	b2db      	uxtb	r3, r3
    f424:	2b00      	cmp	r3, #0
    f426:	d002      	beq.n	f42e <_ZN4ClapD2Ev+0x26>
    f428:	6878      	ldr	r0, [r7, #4]
    f42a:	f7ff f83b 	bl	e4a4 <_ZdlPv>
    f42e:	687b      	ldr	r3, [r7, #4]
    f430:	4618      	mov	r0, r3
    f432:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f436:	46bd      	mov	sp, r7
    f438:	bd80      	pop	{r7, pc}
    f43a:	46c0      	nop			(mov r8, r8)
    f43c:	0001fc28 	.word	0x0001fc28

0000f440 <_ZN4ClapC1E8PositionS0_>:
#include "braslateral.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    f440:	b082      	sub	sp, #8
    f442:	b580      	push	{r7, lr}
    f444:	b084      	sub	sp, #16
    f446:	af00      	add	r7, sp, #0
    f448:	60f8      	str	r0, [r7, #12]
    f44a:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f44e:	e880 0006 	stmia.w	r0, {r1, r2}
    f452:	61fb      	str	r3, [r7, #28]
    f454:	68fb      	ldr	r3, [r7, #12]
    f456:	4618      	mov	r0, r3
    f458:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f45c:	e893 0006 	ldmia.w	r3, {r1, r2}
    f460:	f003 fe7a 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
    f464:	68fa      	ldr	r2, [r7, #12]
    f466:	4b12      	ldr	r3, [pc, #72]	(f4b0 <_ZN4ClapC1E8PositionS0_+0x70>)
    f468:	6013      	str	r3, [r2, #0]
    f46a:	68fb      	ldr	r3, [r7, #12]
    f46c:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f470:	4618      	mov	r0, r3
    f472:	f7ff f8af 	bl	e5d4 <_ZN8PositionC1Ev>
    f476:	68fb      	ldr	r3, [r7, #12]
    f478:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f47c:	4618      	mov	r0, r3
    f47e:	f7ff f8a9 	bl	e5d4 <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    f482:	68fb      	ldr	r3, [r7, #12]
    f484:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f488:	4618      	mov	r0, r3
    f48a:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f48e:	e893 0006 	ldmia.w	r3, {r1, r2}
    f492:	f7ff f95b 	bl	e74c <_ZN8PositionaSES_>
    this->goBack = false;
    f496:	68fa      	ldr	r2, [r7, #12]
    f498:	f04f 0300 	mov.w	r3, #0	; 0x0
    f49c:	7413      	strb	r3, [r2, #16]
}
    f49e:	68fb      	ldr	r3, [r7, #12]
    f4a0:	4618      	mov	r0, r3
    f4a2:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f4a6:	46bd      	mov	sp, r7
    f4a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f4ac:	b002      	add	sp, #8
    f4ae:	4770      	bx	lr
    f4b0:	0001fc28 	.word	0x0001fc28

0000f4b4 <_ZN4ClapC2E8PositionS0_>:
#include "braslateral.h"


Clap::Clap(){}

Clap::Clap(Position positionDepart, Position positionArrivee):MediumLevelAction(positionDepart)
    f4b4:	b082      	sub	sp, #8
    f4b6:	b580      	push	{r7, lr}
    f4b8:	b084      	sub	sp, #16
    f4ba:	af00      	add	r7, sp, #0
    f4bc:	60f8      	str	r0, [r7, #12]
    f4be:	f107 0004 	add.w	r0, r7, #4	; 0x4
    f4c2:	e880 0006 	stmia.w	r0, {r1, r2}
    f4c6:	61fb      	str	r3, [r7, #28]
    f4c8:	68fb      	ldr	r3, [r7, #12]
    f4ca:	4618      	mov	r0, r3
    f4cc:	f107 0304 	add.w	r3, r7, #4	; 0x4
    f4d0:	e893 0006 	ldmia.w	r3, {r1, r2}
    f4d4:	f003 fe40 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
    f4d8:	68fa      	ldr	r2, [r7, #12]
    f4da:	4b12      	ldr	r3, [pc, #72]	(f524 <_ZN4ClapC2E8PositionS0_+0x70>)
    f4dc:	6013      	str	r3, [r2, #0]
    f4de:	68fb      	ldr	r3, [r7, #12]
    f4e0:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f4e4:	4618      	mov	r0, r3
    f4e6:	f7ff f875 	bl	e5d4 <_ZN8PositionC1Ev>
    f4ea:	68fb      	ldr	r3, [r7, #12]
    f4ec:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f4f0:	4618      	mov	r0, r3
    f4f2:	f7ff f86f 	bl	e5d4 <_ZN8PositionC1Ev>
{
    this->positionArrivee = positionArrivee;
    f4f6:	68fb      	ldr	r3, [r7, #12]
    f4f8:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f4fc:	4618      	mov	r0, r3
    f4fe:	f107 031c 	add.w	r3, r7, #28	; 0x1c
    f502:	e893 0006 	ldmia.w	r3, {r1, r2}
    f506:	f7ff f921 	bl	e74c <_ZN8PositionaSES_>
    this->goBack = false;
    f50a:	68fa      	ldr	r2, [r7, #12]
    f50c:	f04f 0300 	mov.w	r3, #0	; 0x0
    f510:	7413      	strb	r3, [r2, #16]
}
    f512:	68fb      	ldr	r3, [r7, #12]
    f514:	4618      	mov	r0, r3
    f516:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f51a:	46bd      	mov	sp, r7
    f51c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f520:	b002      	add	sp, #8
    f522:	4770      	bx	lr
    f524:	0001fc28 	.word	0x0001fc28

0000f528 <_ZN4ClapC1Ev>:
#include "command.h"
#include "position.h"
#include "braslateral.h"


Clap::Clap(){}
    f528:	b590      	push	{r4, r7, lr}
    f52a:	b085      	sub	sp, #20
    f52c:	af00      	add	r7, sp, #0
    f52e:	6078      	str	r0, [r7, #4]
    f530:	687c      	ldr	r4, [r7, #4]
    f532:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f536:	4618      	mov	r0, r3
    f538:	4910      	ldr	r1, [pc, #64]	(f57c <_ZN4ClapC1Ev+0x54>)
    f53a:	4a10      	ldr	r2, [pc, #64]	(f57c <_ZN4ClapC1Ev+0x54>)
    f53c:	f04f 0301 	mov.w	r3, #1	; 0x1
    f540:	f7ff f870 	bl	e624 <_ZN8PositionC1Effb>
    f544:	4620      	mov	r0, r4
    f546:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f54a:	e893 0006 	ldmia.w	r3, {r1, r2}
    f54e:	f003 fe03 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
    f552:	687a      	ldr	r2, [r7, #4]
    f554:	4b0a      	ldr	r3, [pc, #40]	(f580 <_ZN4ClapC1Ev+0x58>)
    f556:	6013      	str	r3, [r2, #0]
    f558:	687b      	ldr	r3, [r7, #4]
    f55a:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f55e:	4618      	mov	r0, r3
    f560:	f7ff f838 	bl	e5d4 <_ZN8PositionC1Ev>
    f564:	687b      	ldr	r3, [r7, #4]
    f566:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f56a:	4618      	mov	r0, r3
    f56c:	f7ff f832 	bl	e5d4 <_ZN8PositionC1Ev>
    f570:	687b      	ldr	r3, [r7, #4]
    f572:	4618      	mov	r0, r3
    f574:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f578:	46bd      	mov	sp, r7
    f57a:	bd90      	pop	{r4, r7, pc}
    f57c:	00000000 	.word	0x00000000
    f580:	0001fc28 	.word	0x0001fc28

0000f584 <_ZN4ClapC2Ev>:
    f584:	b590      	push	{r4, r7, lr}
    f586:	b085      	sub	sp, #20
    f588:	af00      	add	r7, sp, #0
    f58a:	6078      	str	r0, [r7, #4]
    f58c:	687c      	ldr	r4, [r7, #4]
    f58e:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f592:	4618      	mov	r0, r3
    f594:	4910      	ldr	r1, [pc, #64]	(f5d8 <_ZN4ClapC2Ev+0x54>)
    f596:	4a10      	ldr	r2, [pc, #64]	(f5d8 <_ZN4ClapC2Ev+0x54>)
    f598:	f04f 0301 	mov.w	r3, #1	; 0x1
    f59c:	f7ff f842 	bl	e624 <_ZN8PositionC1Effb>
    f5a0:	4620      	mov	r0, r4
    f5a2:	f107 0308 	add.w	r3, r7, #8	; 0x8
    f5a6:	e893 0006 	ldmia.w	r3, {r1, r2}
    f5aa:	f003 fdd5 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
    f5ae:	687a      	ldr	r2, [r7, #4]
    f5b0:	4b0a      	ldr	r3, [pc, #40]	(f5dc <_ZN4ClapC2Ev+0x58>)
    f5b2:	6013      	str	r3, [r2, #0]
    f5b4:	687b      	ldr	r3, [r7, #4]
    f5b6:	f103 0318 	add.w	r3, r3, #24	; 0x18
    f5ba:	4618      	mov	r0, r3
    f5bc:	f7ff f80a 	bl	e5d4 <_ZN8PositionC1Ev>
    f5c0:	687b      	ldr	r3, [r7, #4]
    f5c2:	f103 0320 	add.w	r3, r3, #32	; 0x20
    f5c6:	4618      	mov	r0, r3
    f5c8:	f7ff f804 	bl	e5d4 <_ZN8PositionC1Ev>
    f5cc:	687b      	ldr	r3, [r7, #4]
    f5ce:	4618      	mov	r0, r3
    f5d0:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f5d4:	46bd      	mov	sp, r7
    f5d6:	bd90      	pop	{r4, r7, pc}
    f5d8:	00000000 	.word	0x00000000
    f5dc:	0001fc28 	.word	0x0001fc28

0000f5e0 <_ZN8DijkstraC2Ev>:
//http://fr.wikipedia.org/wiki/Algorithme_de_Dijkstra

#include "dijkstra.h"
#include <math.h>

Dijkstra::Dijkstra(){}
    f5e0:	b480      	push	{r7}
    f5e2:	b083      	sub	sp, #12
    f5e4:	af00      	add	r7, sp, #0
    f5e6:	6078      	str	r0, [r7, #4]
    f5e8:	687b      	ldr	r3, [r7, #4]
    f5ea:	4618      	mov	r0, r3
    f5ec:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f5f0:	46bd      	mov	sp, r7
    f5f2:	bc80      	pop	{r7}
    f5f4:	4770      	bx	lr
    f5f6:	46c0      	nop			(mov r8, r8)

0000f5f8 <_ZN8DijkstraC1Ev>:
    f5f8:	b480      	push	{r7}
    f5fa:	b083      	sub	sp, #12
    f5fc:	af00      	add	r7, sp, #0
    f5fe:	6078      	str	r0, [r7, #4]
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	4618      	mov	r0, r3
    f604:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f608:	46bd      	mov	sp, r7
    f60a:	bc80      	pop	{r7}
    f60c:	4770      	bx	lr
    f60e:	46c0      	nop			(mov r8, r8)

0000f610 <_ZN8DijkstraC2EPP5Etapei>:


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    f610:	b480      	push	{r7}
    f612:	b085      	sub	sp, #20
    f614:	af00      	add	r7, sp, #0
    f616:	60f8      	str	r0, [r7, #12]
    f618:	60b9      	str	r1, [r7, #8]
    f61a:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    f61c:	68fa      	ldr	r2, [r7, #12]
    f61e:	68bb      	ldr	r3, [r7, #8]
    f620:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    f622:	68fa      	ldr	r2, [r7, #12]
    f624:	687b      	ldr	r3, [r7, #4]
    f626:	6053      	str	r3, [r2, #4]
}
    f628:	68fb      	ldr	r3, [r7, #12]
    f62a:	4618      	mov	r0, r3
    f62c:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f630:	46bd      	mov	sp, r7
    f632:	bc80      	pop	{r7}
    f634:	4770      	bx	lr
    f636:	46c0      	nop			(mov r8, r8)

0000f638 <_ZN8DijkstraC1EPP5Etapei>:
#include <math.h>

Dijkstra::Dijkstra(){}


Dijkstra::Dijkstra(Etape** tableauEtapes, int nbEtapes)
    f638:	b480      	push	{r7}
    f63a:	b085      	sub	sp, #20
    f63c:	af00      	add	r7, sp, #0
    f63e:	60f8      	str	r0, [r7, #12]
    f640:	60b9      	str	r1, [r7, #8]
    f642:	607a      	str	r2, [r7, #4]
{
    this->tableauEtapes = tableauEtapes;
    f644:	68fa      	ldr	r2, [r7, #12]
    f646:	68bb      	ldr	r3, [r7, #8]
    f648:	6013      	str	r3, [r2, #0]
    this->nombreEtapes = nbEtapes;
    f64a:	68fa      	ldr	r2, [r7, #12]
    f64c:	687b      	ldr	r3, [r7, #4]
    f64e:	6053      	str	r3, [r2, #4]
}
    f650:	68fb      	ldr	r3, [r7, #12]
    f652:	4618      	mov	r0, r3
    f654:	f107 0714 	add.w	r7, r7, #20	; 0x14
    f658:	46bd      	mov	sp, r7
    f65a:	bc80      	pop	{r7}
    f65c:	4770      	bx	lr
    f65e:	46c0      	nop			(mov r8, r8)

0000f660 <_ZN8Dijkstra16getEtapeCouranteEv>:

Etape* Dijkstra::getEtapeCourante()
    f660:	b480      	push	{r7}
    f662:	b083      	sub	sp, #12
    f664:	af00      	add	r7, sp, #0
    f666:	6078      	str	r0, [r7, #4]
{
    return tableauEtapes[this->numeroEtapeCourante];
    f668:	687b      	ldr	r3, [r7, #4]
    f66a:	681a      	ldr	r2, [r3, #0]
    f66c:	687b      	ldr	r3, [r7, #4]
    f66e:	689b      	ldr	r3, [r3, #8]
    f670:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f674:	4413      	add	r3, r2
    f676:	681b      	ldr	r3, [r3, #0]
}
    f678:	4618      	mov	r0, r3
    f67a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f67e:	46bd      	mov	sp, r7
    f680:	bc80      	pop	{r7}
    f682:	4770      	bx	lr

0000f684 <_ZN8Dijkstra16setEtapeCouranteEi>:
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
}

void Dijkstra::setEtapeCourante(int numeroEtapeCourante)
    f684:	b480      	push	{r7}
    f686:	b083      	sub	sp, #12
    f688:	af00      	add	r7, sp, #0
    f68a:	6078      	str	r0, [r7, #4]
    f68c:	6039      	str	r1, [r7, #0]
{
    this->numeroEtapeCourante = numeroEtapeCourante;
    f68e:	687a      	ldr	r2, [r7, #4]
    f690:	683b      	ldr	r3, [r7, #0]
    f692:	6093      	str	r3, [r2, #8]
}
    f694:	f107 070c 	add.w	r7, r7, #12	; 0xc
    f698:	46bd      	mov	sp, r7
    f69a:	bc80      	pop	{r7}
    f69c:	4770      	bx	lr
    f69e:	46c0      	nop			(mov r8, r8)

0000f6a0 <_ZN8Dijkstra13etapeRapporteEP5Etape>:
int Dijkstra::getDistance(Etape* etape)
{
    return etape->getDistance();
}

bool Dijkstra::etapeRapporte(Etape* etape)
    f6a0:	b580      	push	{r7, lr}
    f6a2:	b082      	sub	sp, #8
    f6a4:	af00      	add	r7, sp, #0
    f6a6:	6078      	str	r0, [r7, #4]
    f6a8:	6039      	str	r1, [r7, #0]
{
    return (bool) etape->getScore();
    f6aa:	6838      	ldr	r0, [r7, #0]
    f6ac:	f000 fd78 	bl	101a0 <_ZN5Etape8getScoreEv>
    f6b0:	4603      	mov	r3, r0
    f6b2:	2b00      	cmp	r3, #0
    f6b4:	bf0c      	ite	eq
    f6b6:	2300      	moveq	r3, #0
    f6b8:	2301      	movne	r3, #1
    f6ba:	b2db      	uxtb	r3, r3
}
    f6bc:	4618      	mov	r0, r3
    f6be:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f6c2:	46bd      	mov	sp, r7
    f6c4:	bd80      	pop	{r7, pc}
    f6c6:	46c0      	nop			(mov r8, r8)

0000f6c8 <_ZN8Dijkstra11getDistanceEP5Etape>:
int Dijkstra::getDistance(int numeroEtape)
{
    return tableauEtapes[numeroEtape]->getDistance();
}

int Dijkstra::getDistance(Etape* etape)
    f6c8:	b580      	push	{r7, lr}
    f6ca:	b082      	sub	sp, #8
    f6cc:	af00      	add	r7, sp, #0
    f6ce:	6078      	str	r0, [r7, #4]
    f6d0:	6039      	str	r1, [r7, #0]
{
    return etape->getDistance();
    f6d2:	6838      	ldr	r0, [r7, #0]
    f6d4:	f000 fc42 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f6d8:	4603      	mov	r3, r0
}
    f6da:	4618      	mov	r0, r3
    f6dc:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f6e0:	46bd      	mov	sp, r7
    f6e2:	bd80      	pop	{r7, pc}

0000f6e4 <_ZN8Dijkstra11getDistanceEi>:
            }
        }
    }
}

int Dijkstra::getDistance(int numeroEtape)
    f6e4:	b580      	push	{r7, lr}
    f6e6:	b082      	sub	sp, #8
    f6e8:	af00      	add	r7, sp, #0
    f6ea:	6078      	str	r0, [r7, #4]
    f6ec:	6039      	str	r1, [r7, #0]
{
    return tableauEtapes[numeroEtape]->getDistance();
    f6ee:	687b      	ldr	r3, [r7, #4]
    f6f0:	681a      	ldr	r2, [r3, #0]
    f6f2:	683b      	ldr	r3, [r7, #0]
    f6f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f6f8:	4413      	add	r3, r2
    f6fa:	681b      	ldr	r3, [r3, #0]
    f6fc:	4618      	mov	r0, r3
    f6fe:	f000 fc2d 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f702:	4603      	mov	r3, r0
}
    f704:	4618      	mov	r0, r3
    f706:	f107 0708 	add.w	r7, r7, #8	; 0x8
    f70a:	46bd      	mov	sp, r7
    f70c:	bd80      	pop	{r7, pc}
    f70e:	46c0      	nop			(mov r8, r8)

0000f710 <_ZN8Dijkstra18mettreAJourVoisinsEi>:
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    return numeroEtapeLaPlusProche;
}

//Met à jour les voisin de l'étape spécifiée.
void Dijkstra::mettreAJourVoisins(int numeroEtape)
    f710:	b580      	push	{r7, lr}
    f712:	b086      	sub	sp, #24
    f714:	af00      	add	r7, sp, #0
    f716:	6078      	str	r0, [r7, #4]
    f718:	6039      	str	r1, [r7, #0]
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    f71a:	687b      	ldr	r3, [r7, #4]
    f71c:	681a      	ldr	r2, [r3, #0]
    f71e:	683b      	ldr	r3, [r7, #0]
    f720:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f724:	4413      	add	r3, r2
    f726:	681b      	ldr	r3, [r3, #0]
    f728:	4618      	mov	r0, r3
    f72a:	f000 fc17 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f72e:	4603      	mov	r3, r0
    f730:	60bb      	str	r3, [r7, #8]
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    f732:	f04f 0300 	mov.w	r3, #0	; 0x0
    f736:	617b      	str	r3, [r7, #20]
    f738:	e075      	b.n	f826 <_ZN8Dijkstra18mettreAJourVoisinsEi+0x116>
    {
        //Si cette étape n'est pas bannie
        //if(this->tableauEtapes[numeroEtape]->getChild(i)->getState() > -2 && ((int) this->tableauEtapes[numeroEtape]->getChild(i)->getEtapeType() < 20))
        if(!(this->tableauEtapes[numeroEtape]->getChild(i)->aEviter()))
    f73a:	687b      	ldr	r3, [r7, #4]
    f73c:	681a      	ldr	r2, [r3, #0]
    f73e:	683b      	ldr	r3, [r7, #0]
    f740:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f744:	4413      	add	r3, r2
    f746:	681b      	ldr	r3, [r3, #0]
    f748:	4618      	mov	r0, r3
    f74a:	6979      	ldr	r1, [r7, #20]
    f74c:	f000 fbae 	bl	feac <_ZN5Etape8getChildEi>
    f750:	4603      	mov	r3, r0
    f752:	4618      	mov	r0, r3
    f754:	f000 fc6a 	bl	1002c <_ZN5Etape7aEviterEv>
    f758:	4603      	mov	r3, r0
    f75a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f75e:	b2db      	uxtb	r3, r3
    f760:	2b00      	cmp	r3, #0
    f762:	d05c      	beq.n	f81e <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
        {
            distanceChildCourant = this->tableauEtapes[numeroEtape]->getChild(i)->getDistance();
    f764:	687b      	ldr	r3, [r7, #4]
    f766:	681a      	ldr	r2, [r3, #0]
    f768:	683b      	ldr	r3, [r7, #0]
    f76a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f76e:	4413      	add	r3, r2
    f770:	681b      	ldr	r3, [r3, #0]
    f772:	4618      	mov	r0, r3
    f774:	6979      	ldr	r1, [r7, #20]
    f776:	f000 fb99 	bl	feac <_ZN5Etape8getChildEi>
    f77a:	4603      	mov	r3, r0
    f77c:	4618      	mov	r0, r3
    f77e:	f000 fbed 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f782:	4603      	mov	r3, r0
    f784:	60fb      	str	r3, [r7, #12]
            distanceEtapeVersChild = this->tableauEtapes[numeroEtape]->getDistances()[i];
    f786:	687b      	ldr	r3, [r7, #4]
    f788:	681a      	ldr	r2, [r3, #0]
    f78a:	683b      	ldr	r3, [r7, #0]
    f78c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f790:	4413      	add	r3, r2
    f792:	681b      	ldr	r3, [r3, #0]
    f794:	4618      	mov	r0, r3
    f796:	f000 fc97 	bl	100c8 <_ZN5Etape12getDistancesEv>
    f79a:	4602      	mov	r2, r0
    f79c:	697b      	ldr	r3, [r7, #20]
    f79e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f7a2:	4413      	add	r3, r2
    f7a4:	681b      	ldr	r3, [r3, #0]
    f7a6:	613b      	str	r3, [r7, #16]
            //distanceEtapeVersChild = calculDistanceDirect(this->tableauEtapes[numeroEtape]->getChild(i), this->tableauEtapes[numeroEtape]);
            if(!distanceEtapeVersChild)
    f7a8:	693b      	ldr	r3, [r7, #16]
    f7aa:	2b00      	cmp	r3, #0
    f7ac:	d102      	bne.n	f7b4 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xa4>
                distanceEtapeVersChild = 1;//Pas de distances nulles
    f7ae:	f04f 0301 	mov.w	r3, #1	; 0x1
    f7b2:	613b      	str	r3, [r7, #16]
            //Si le chemin vers ce voisin est plus court en passant par l'étape actuelle, mise à jour de ce voisin
            //Si le voisin n'avait pas encore été atteind par un chemin, alors on le met à jour aussi (distanceChildCourant == -1)
            if(distanceChildCourant == -1 || distanceChildCourant > distanceEtapeCourante + distanceEtapeVersChild)
    f7b4:	68fb      	ldr	r3, [r7, #12]
    f7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f7ba:	d005      	beq.n	f7c8 <_ZN8Dijkstra18mettreAJourVoisinsEi+0xb8>
    f7bc:	68ba      	ldr	r2, [r7, #8]
    f7be:	693b      	ldr	r3, [r7, #16]
    f7c0:	441a      	add	r2, r3
    f7c2:	68fb      	ldr	r3, [r7, #12]
    f7c4:	429a      	cmp	r2, r3
    f7c6:	da2a      	bge.n	f81e <_ZN8Dijkstra18mettreAJourVoisinsEi+0x10e>
            {
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
    f7c8:	687b      	ldr	r3, [r7, #4]
    f7ca:	681a      	ldr	r2, [r3, #0]
    f7cc:	683b      	ldr	r3, [r7, #0]
    f7ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f7d2:	4413      	add	r3, r2
    f7d4:	681b      	ldr	r3, [r3, #0]
    f7d6:	4618      	mov	r0, r3
    f7d8:	6979      	ldr	r1, [r7, #20]
    f7da:	f000 fb67 	bl	feac <_ZN5Etape8getChildEi>
    f7de:	4601      	mov	r1, r0
    f7e0:	68ba      	ldr	r2, [r7, #8]
    f7e2:	693b      	ldr	r3, [r7, #16]
    f7e4:	4413      	add	r3, r2
    f7e6:	4608      	mov	r0, r1
    f7e8:	4619      	mov	r1, r3
    f7ea:	f000 fbc3 	bl	ff74 <_ZN5Etape11setDistanceEi>
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
    f7ee:	687b      	ldr	r3, [r7, #4]
    f7f0:	681a      	ldr	r2, [r3, #0]
    f7f2:	683b      	ldr	r3, [r7, #0]
    f7f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f7f8:	4413      	add	r3, r2
    f7fa:	681b      	ldr	r3, [r3, #0]
    f7fc:	4618      	mov	r0, r3
    f7fe:	6979      	ldr	r1, [r7, #20]
    f800:	f000 fb54 	bl	feac <_ZN5Etape8getChildEi>
    f804:	4601      	mov	r1, r0
    f806:	687b      	ldr	r3, [r7, #4]
    f808:	681a      	ldr	r2, [r3, #0]
    f80a:	687b      	ldr	r3, [r7, #4]
    f80c:	689b      	ldr	r3, [r3, #8]
    f80e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f812:	4413      	add	r3, r2
    f814:	681b      	ldr	r3, [r3, #0]
    f816:	4608      	mov	r0, r1
    f818:	4619      	mov	r1, r3
    f81a:	f000 fbb9 	bl	ff90 <_ZN5Etape9setParentEPS_>
{
    int distanceEtapeCourante = this->tableauEtapes[numeroEtape]->getDistance();
    int distanceChildCourant;
    int distanceEtapeVersChild;

    for(int i = 0 ; i < this->tableauEtapes[numeroEtape]->getNbChildren() ; i++)
    f81e:	697b      	ldr	r3, [r7, #20]
    f820:	f103 0301 	add.w	r3, r3, #1	; 0x1
    f824:	617b      	str	r3, [r7, #20]
    f826:	687b      	ldr	r3, [r7, #4]
    f828:	681a      	ldr	r2, [r3, #0]
    f82a:	683b      	ldr	r3, [r7, #0]
    f82c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f830:	4413      	add	r3, r2
    f832:	681b      	ldr	r3, [r3, #0]
    f834:	4618      	mov	r0, r3
    f836:	f000 fbb9 	bl	ffac <_ZN5Etape13getNbChildrenEv>
    f83a:	4602      	mov	r2, r0
    f83c:	697b      	ldr	r3, [r7, #20]
    f83e:	429a      	cmp	r2, r3
    f840:	bfd4      	ite	le
    f842:	2300      	movle	r3, #0
    f844:	2301      	movgt	r3, #1
    f846:	b2db      	uxtb	r3, r3
    f848:	2b00      	cmp	r3, #0
    f84a:	f47f af76 	bne.w	f73a <_ZN8Dijkstra18mettreAJourVoisinsEi+0x2a>
                this->tableauEtapes[numeroEtape]->getChild(i)->setDistance(distanceEtapeCourante + distanceEtapeVersChild);
                this->tableauEtapes[numeroEtape]->getChild(i)->setParent(this->tableauEtapes[this->numeroEtapeCourante]);
            }
        }
    }
}
    f84e:	f107 0718 	add.w	r7, r7, #24	; 0x18
    f852:	46bd      	mov	sp, r7
    f854:	bd80      	pop	{r7, pc}
    f856:	46c0      	nop			(mov r8, r8)

0000f858 <_ZN8Dijkstra11initialiserEv>:
    }
    return 0;*/
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
    f858:	b580      	push	{r7, lr}
    f85a:	b084      	sub	sp, #16
    f85c:	af00      	add	r7, sp, #0
    f85e:	6078      	str	r0, [r7, #4]
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    f860:	f04f 0300 	mov.w	r3, #0	; 0x0
    f864:	60fb      	str	r3, [r7, #12]
    f866:	e038      	b.n	f8da <_ZN8Dijkstra11initialiserEv+0x82>
    {
        this->tableauEtapes[i]->setDistance(-1);
    f868:	687b      	ldr	r3, [r7, #4]
    f86a:	681a      	ldr	r2, [r3, #0]
    f86c:	68fb      	ldr	r3, [r7, #12]
    f86e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f872:	4413      	add	r3, r2
    f874:	681b      	ldr	r3, [r3, #0]
    f876:	4618      	mov	r0, r3
    f878:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f87c:	f000 fb7a 	bl	ff74 <_ZN5Etape11setDistanceEi>
        if(!(this->tableauEtapes[i]->aEviter()))//getState() != -2)
    f880:	687b      	ldr	r3, [r7, #4]
    f882:	681a      	ldr	r2, [r3, #0]
    f884:	68fb      	ldr	r3, [r7, #12]
    f886:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f88a:	4413      	add	r3, r2
    f88c:	681b      	ldr	r3, [r3, #0]
    f88e:	4618      	mov	r0, r3
    f890:	f000 fbcc 	bl	1002c <_ZN5Etape7aEviterEv>
    f894:	4603      	mov	r3, r0
    f896:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f89a:	b2db      	uxtb	r3, r3
    f89c:	2b00      	cmp	r3, #0
    f89e:	d00c      	beq.n	f8ba <_ZN8Dijkstra11initialiserEv+0x62>
        {
            this->tableauEtapes[i]->setState(-1);
    f8a0:	687b      	ldr	r3, [r7, #4]
    f8a2:	681a      	ldr	r2, [r3, #0]
    f8a4:	68fb      	ldr	r3, [r7, #12]
    f8a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f8aa:	4413      	add	r3, r2
    f8ac:	681b      	ldr	r3, [r3, #0]
    f8ae:	4618      	mov	r0, r3
    f8b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f8b4:	f000 fb44 	bl	ff40 <_ZN5Etape8setStateEi>
    f8b8:	e00b      	b.n	f8d2 <_ZN8Dijkstra11initialiserEv+0x7a>
        }
        else
        {
            this->tableauEtapes[i]->setState(-2);
    f8ba:	687b      	ldr	r3, [r7, #4]
    f8bc:	681a      	ldr	r2, [r3, #0]
    f8be:	68fb      	ldr	r3, [r7, #12]
    f8c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f8c4:	4413      	add	r3, r2
    f8c6:	681b      	ldr	r3, [r3, #0]
    f8c8:	4618      	mov	r0, r3
    f8ca:	f06f 0101 	mvn.w	r1, #1	; 0x1
    f8ce:	f000 fb37 	bl	ff40 <_ZN5Etape8setStateEi>
}

//On réinitialise le tableau avant le commencer une nouvelle recherche
void Dijkstra::initialiser()
{
    for(int i = 0 ; i<this->nombreEtapes ; i++)
    f8d2:	68fb      	ldr	r3, [r7, #12]
    f8d4:	f103 0301 	add.w	r3, r3, #1	; 0x1
    f8d8:	60fb      	str	r3, [r7, #12]
    f8da:	687b      	ldr	r3, [r7, #4]
    f8dc:	685a      	ldr	r2, [r3, #4]
    f8de:	68fb      	ldr	r3, [r7, #12]
    f8e0:	429a      	cmp	r2, r3
    f8e2:	dcc1      	bgt.n	f868 <_ZN8Dijkstra11initialiserEv+0x10>
        else
        {
            this->tableauEtapes[i]->setState(-2);
        }
    }
    this->tableauEtapes[this->numeroEtapeCourante]->setDistance(0);
    f8e4:	687b      	ldr	r3, [r7, #4]
    f8e6:	681a      	ldr	r2, [r3, #0]
    f8e8:	687b      	ldr	r3, [r7, #4]
    f8ea:	689b      	ldr	r3, [r3, #8]
    f8ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f8f0:	4413      	add	r3, r2
    f8f2:	681b      	ldr	r3, [r3, #0]
    f8f4:	4618      	mov	r0, r3
    f8f6:	f04f 0100 	mov.w	r1, #0	; 0x0
    f8fa:	f000 fb3b 	bl	ff74 <_ZN5Etape11setDistanceEi>
    this->tableauEtapes[this->numeroEtapeCourante]->setState(0);
    f8fe:	687b      	ldr	r3, [r7, #4]
    f900:	681a      	ldr	r2, [r3, #0]
    f902:	687b      	ldr	r3, [r7, #4]
    f904:	689b      	ldr	r3, [r3, #8]
    f906:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f90a:	4413      	add	r3, r2
    f90c:	681b      	ldr	r3, [r3, #0]
    f90e:	4618      	mov	r0, r3
    f910:	f04f 0100 	mov.w	r1, #0	; 0x0
    f914:	f000 fb14 	bl	ff40 <_ZN5Etape8setStateEi>
}
    f918:	f107 0710 	add.w	r7, r7, #16	; 0x10
    f91c:	46bd      	mov	sp, r7
    f91e:	bd80      	pop	{r7, pc}

0000f920 <_ZN8Dijkstra10trouverMinEi>:

// Renvoi le numéro de l'étape la plus proche dont on n'a pas encore mis à jour les voisins
int Dijkstra::trouverMin(int classementEtapeMinimale)
    f920:	b580      	push	{r7, lr}
    f922:	b0a2      	sub	sp, #136
    f924:	af00      	add	r7, sp, #0
    f926:	6178      	str	r0, [r7, #20]
    f928:	6139      	str	r1, [r7, #16]
{
    int minimum = -1;
    f92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f92e:	61bb      	str	r3, [r7, #24]
    int numeroEtapeLaPlusProche = -1;
    f930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f934:	61fb      	str	r3, [r7, #28]

    for(int i = 0 ; i < this->nombreEtapes ; i++)
    f936:	f04f 0300 	mov.w	r3, #0	; 0x0
    f93a:	67bb      	str	r3, [r7, #120]
    f93c:	e05c      	b.n	f9f8 <_ZN8Dijkstra10trouverMinEi+0xd8>
    {
        if(this->tableauEtapes[i]->getState()==-1 && (!(this->tableauEtapes[i]->aEviter())) && (!(this->tableauEtapes[i]->getDistance()==-1)) && (minimum == -1 || this->tableauEtapes[i]->getDistance() < minimum))
    f93e:	697b      	ldr	r3, [r7, #20]
    f940:	681a      	ldr	r2, [r3, #0]
    f942:	6fbb      	ldr	r3, [r7, #120]
    f944:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f948:	4413      	add	r3, r2
    f94a:	681b      	ldr	r3, [r3, #0]
    f94c:	4618      	mov	r0, r3
    f94e:	f000 faeb 	bl	ff28 <_ZN5Etape8getStateEv>
    f952:	4603      	mov	r3, r0
    f954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f958:	d136      	bne.n	f9c8 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f95a:	697b      	ldr	r3, [r7, #20]
    f95c:	681a      	ldr	r2, [r3, #0]
    f95e:	6fbb      	ldr	r3, [r7, #120]
    f960:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f964:	4413      	add	r3, r2
    f966:	681b      	ldr	r3, [r3, #0]
    f968:	4618      	mov	r0, r3
    f96a:	f000 fb5f 	bl	1002c <_ZN5Etape7aEviterEv>
    f96e:	4603      	mov	r3, r0
    f970:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f974:	b2db      	uxtb	r3, r3
    f976:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    f97a:	b2db      	uxtb	r3, r3
    f97c:	2b00      	cmp	r3, #0
    f97e:	d123      	bne.n	f9c8 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f980:	697b      	ldr	r3, [r7, #20]
    f982:	681a      	ldr	r2, [r3, #0]
    f984:	6fbb      	ldr	r3, [r7, #120]
    f986:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f98a:	4413      	add	r3, r2
    f98c:	681b      	ldr	r3, [r3, #0]
    f98e:	4618      	mov	r0, r3
    f990:	f000 fae4 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f994:	4603      	mov	r3, r0
    f996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f99a:	d015      	beq.n	f9c8 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f99c:	69bb      	ldr	r3, [r7, #24]
    f99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    f9a2:	d00d      	beq.n	f9c0 <_ZN8Dijkstra10trouverMinEi+0xa0>
    f9a4:	697b      	ldr	r3, [r7, #20]
    f9a6:	681a      	ldr	r2, [r3, #0]
    f9a8:	6fbb      	ldr	r3, [r7, #120]
    f9aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f9ae:	4413      	add	r3, r2
    f9b0:	681b      	ldr	r3, [r3, #0]
    f9b2:	4618      	mov	r0, r3
    f9b4:	f000 fad2 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f9b8:	4602      	mov	r2, r0
    f9ba:	69bb      	ldr	r3, [r7, #24]
    f9bc:	429a      	cmp	r2, r3
    f9be:	da03      	bge.n	f9c8 <_ZN8Dijkstra10trouverMinEi+0xa8>
    f9c0:	f04f 0301 	mov.w	r3, #1	; 0x1
    f9c4:	607b      	str	r3, [r7, #4]
    f9c6:	e002      	b.n	f9ce <_ZN8Dijkstra10trouverMinEi+0xae>
    f9c8:	f04f 0300 	mov.w	r3, #0	; 0x0
    f9cc:	607b      	str	r3, [r7, #4]
    f9ce:	687b      	ldr	r3, [r7, #4]
    f9d0:	2b00      	cmp	r3, #0
    f9d2:	d00d      	beq.n	f9f0 <_ZN8Dijkstra10trouverMinEi+0xd0>
        {
            minimum = this->tableauEtapes[i]->getDistance();
    f9d4:	697b      	ldr	r3, [r7, #20]
    f9d6:	681a      	ldr	r2, [r3, #0]
    f9d8:	6fbb      	ldr	r3, [r7, #120]
    f9da:	ea4f 0383 	mov.w	r3, r3, lsl #2
    f9de:	4413      	add	r3, r2
    f9e0:	681b      	ldr	r3, [r3, #0]
    f9e2:	4618      	mov	r0, r3
    f9e4:	f000 faba 	bl	ff5c <_ZN5Etape11getDistanceEv>
    f9e8:	4603      	mov	r3, r0
    f9ea:	61bb      	str	r3, [r7, #24]
            numeroEtapeLaPlusProche = i;
    f9ec:	6fbb      	ldr	r3, [r7, #120]
    f9ee:	61fb      	str	r3, [r7, #28]
int Dijkstra::trouverMin(int classementEtapeMinimale)
{
    int minimum = -1;
    int numeroEtapeLaPlusProche = -1;

    for(int i = 0 ; i < this->nombreEtapes ; i++)
    f9f0:	6fbb      	ldr	r3, [r7, #120]
    f9f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    f9f6:	67bb      	str	r3, [r7, #120]
    f9f8:	697b      	ldr	r3, [r7, #20]
    f9fa:	685a      	ldr	r2, [r3, #4]
    f9fc:	6fbb      	ldr	r3, [r7, #120]
    f9fe:	429a      	cmp	r2, r3
    fa00:	dc9d      	bgt.n	f93e <_ZN8Dijkstra10trouverMinEi+0x1e>
        }
    }
    /*TODO: WHAT THE HELL IS THAT ???*/


    Etape* etape1 = this->tableauEtapes[0];
    fa02:	697b      	ldr	r3, [r7, #20]
    fa04:	681b      	ldr	r3, [r3, #0]
    fa06:	681b      	ldr	r3, [r3, #0]
    fa08:	623b      	str	r3, [r7, #32]
    Etape* etape2 = this->tableauEtapes[1];
    fa0a:	697b      	ldr	r3, [r7, #20]
    fa0c:	681b      	ldr	r3, [r3, #0]
    fa0e:	f103 0304 	add.w	r3, r3, #4	; 0x4
    fa12:	681b      	ldr	r3, [r3, #0]
    fa14:	627b      	str	r3, [r7, #36]
    Etape* etape3 = this->tableauEtapes[2];
    fa16:	697b      	ldr	r3, [r7, #20]
    fa18:	681b      	ldr	r3, [r3, #0]
    fa1a:	f103 0308 	add.w	r3, r3, #8	; 0x8
    fa1e:	681b      	ldr	r3, [r3, #0]
    fa20:	62bb      	str	r3, [r7, #40]
    Etape* etape4 = this->tableauEtapes[3];
    fa22:	697b      	ldr	r3, [r7, #20]
    fa24:	681b      	ldr	r3, [r3, #0]
    fa26:	f103 030c 	add.w	r3, r3, #12	; 0xc
    fa2a:	681b      	ldr	r3, [r3, #0]
    fa2c:	62fb      	str	r3, [r7, #44]
    Etape* etape5 = this->tableauEtapes[4];
    fa2e:	697b      	ldr	r3, [r7, #20]
    fa30:	681b      	ldr	r3, [r3, #0]
    fa32:	f103 0310 	add.w	r3, r3, #16	; 0x10
    fa36:	681b      	ldr	r3, [r3, #0]
    fa38:	633b      	str	r3, [r7, #48]
    Etape* etape6 = this->tableauEtapes[5];
    fa3a:	697b      	ldr	r3, [r7, #20]
    fa3c:	681b      	ldr	r3, [r3, #0]
    fa3e:	f103 0314 	add.w	r3, r3, #20	; 0x14
    fa42:	681b      	ldr	r3, [r3, #0]
    fa44:	637b      	str	r3, [r7, #52]
    Etape* etape7 = this->tableauEtapes[6];
    fa46:	697b      	ldr	r3, [r7, #20]
    fa48:	681b      	ldr	r3, [r3, #0]
    fa4a:	f103 0318 	add.w	r3, r3, #24	; 0x18
    fa4e:	681b      	ldr	r3, [r3, #0]
    fa50:	63bb      	str	r3, [r7, #56]
    Etape* etape8 = this->tableauEtapes[7];
    fa52:	697b      	ldr	r3, [r7, #20]
    fa54:	681b      	ldr	r3, [r3, #0]
    fa56:	f103 031c 	add.w	r3, r3, #28	; 0x1c
    fa5a:	681b      	ldr	r3, [r3, #0]
    fa5c:	63fb      	str	r3, [r7, #60]
    Etape* etape9 = this->tableauEtapes[8];
    fa5e:	697b      	ldr	r3, [r7, #20]
    fa60:	681b      	ldr	r3, [r3, #0]
    fa62:	f103 0320 	add.w	r3, r3, #32	; 0x20
    fa66:	681b      	ldr	r3, [r3, #0]
    fa68:	643b      	str	r3, [r7, #64]
    Etape* etape10 = this->tableauEtapes[9];
    fa6a:	697b      	ldr	r3, [r7, #20]
    fa6c:	681b      	ldr	r3, [r3, #0]
    fa6e:	f103 0324 	add.w	r3, r3, #36	; 0x24
    fa72:	681b      	ldr	r3, [r3, #0]
    fa74:	647b      	str	r3, [r7, #68]
    Etape* etape11 = this->tableauEtapes[10];
    fa76:	697b      	ldr	r3, [r7, #20]
    fa78:	681b      	ldr	r3, [r3, #0]
    fa7a:	f103 0328 	add.w	r3, r3, #40	; 0x28
    fa7e:	681b      	ldr	r3, [r3, #0]
    fa80:	64bb      	str	r3, [r7, #72]
    Etape* etape12 = this->tableauEtapes[11];
    fa82:	697b      	ldr	r3, [r7, #20]
    fa84:	681b      	ldr	r3, [r3, #0]
    fa86:	f103 032c 	add.w	r3, r3, #44	; 0x2c
    fa8a:	681b      	ldr	r3, [r3, #0]
    fa8c:	64fb      	str	r3, [r7, #76]
    Etape* etape13 = this->tableauEtapes[12];
    fa8e:	697b      	ldr	r3, [r7, #20]
    fa90:	681b      	ldr	r3, [r3, #0]
    fa92:	f103 0330 	add.w	r3, r3, #48	; 0x30
    fa96:	681b      	ldr	r3, [r3, #0]
    fa98:	653b      	str	r3, [r7, #80]
    Etape* etape14 = this->tableauEtapes[13];
    fa9a:	697b      	ldr	r3, [r7, #20]
    fa9c:	681b      	ldr	r3, [r3, #0]
    fa9e:	f103 0334 	add.w	r3, r3, #52	; 0x34
    faa2:	681b      	ldr	r3, [r3, #0]
    faa4:	657b      	str	r3, [r7, #84]
    Etape* etape15 = this->tableauEtapes[14];
    faa6:	697b      	ldr	r3, [r7, #20]
    faa8:	681b      	ldr	r3, [r3, #0]
    faaa:	f103 0338 	add.w	r3, r3, #56	; 0x38
    faae:	681b      	ldr	r3, [r3, #0]
    fab0:	65bb      	str	r3, [r7, #88]
    Etape* etape16 = this->tableauEtapes[15];
    fab2:	697b      	ldr	r3, [r7, #20]
    fab4:	681b      	ldr	r3, [r3, #0]
    fab6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
    faba:	681b      	ldr	r3, [r3, #0]
    fabc:	65fb      	str	r3, [r7, #92]
    Etape* etape17 = this->tableauEtapes[16];
    fabe:	697b      	ldr	r3, [r7, #20]
    fac0:	681b      	ldr	r3, [r3, #0]
    fac2:	f103 0340 	add.w	r3, r3, #64	; 0x40
    fac6:	681b      	ldr	r3, [r3, #0]
    fac8:	663b      	str	r3, [r7, #96]
    Etape* etape18 = this->tableauEtapes[17];
    faca:	697b      	ldr	r3, [r7, #20]
    facc:	681b      	ldr	r3, [r3, #0]
    face:	f103 0344 	add.w	r3, r3, #68	; 0x44
    fad2:	681b      	ldr	r3, [r3, #0]
    fad4:	667b      	str	r3, [r7, #100]
    Etape* etape19 = this->tableauEtapes[18];
    fad6:	697b      	ldr	r3, [r7, #20]
    fad8:	681b      	ldr	r3, [r3, #0]
    fada:	f103 0348 	add.w	r3, r3, #72	; 0x48
    fade:	681b      	ldr	r3, [r3, #0]
    fae0:	66bb      	str	r3, [r7, #104]
    Etape* etape20 = this->tableauEtapes[19];
    fae2:	697b      	ldr	r3, [r7, #20]
    fae4:	681b      	ldr	r3, [r3, #0]
    fae6:	f103 034c 	add.w	r3, r3, #76	; 0x4c
    faea:	681b      	ldr	r3, [r3, #0]
    faec:	66fb      	str	r3, [r7, #108]
    Etape* etape21 = this->tableauEtapes[20];
    faee:	697b      	ldr	r3, [r7, #20]
    faf0:	681b      	ldr	r3, [r3, #0]
    faf2:	f103 0350 	add.w	r3, r3, #80	; 0x50
    faf6:	681b      	ldr	r3, [r3, #0]
    faf8:	673b      	str	r3, [r7, #112]
    Etape* etape22= this->tableauEtapes[21];
    fafa:	697b      	ldr	r3, [r7, #20]
    fafc:	681b      	ldr	r3, [r3, #0]
    fafe:	f103 0354 	add.w	r3, r3, #84	; 0x54
    fb02:	681b      	ldr	r3, [r3, #0]
    fb04:	677b      	str	r3, [r7, #116]
    //Si on ne trouve pas d'étape la plus proche, alors c'est qu'on est coincé par les autres robots.
    //Il faut donc faire des allers-retours entre les différentes étapes possibles.
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    fb06:	69fb      	ldr	r3, [r7, #28]
    fb08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fb0c:	f040 80a9 	bne.w	fc62 <_ZN8Dijkstra10trouverMinEi+0x342>
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
    fb10:	f04f 0301 	mov.w	r3, #1	; 0x1
    fb14:	f887 307f 	strb.w	r3, [r7, #127]
        for(int i = 0 ; i < this->nombreEtapes ; i++)
    fb18:	f04f 0300 	mov.w	r3, #0	; 0x0
    fb1c:	f8c7 3080 	str.w	r3, [r7, #128]
    fb20:	e057      	b.n	fbd2 <_ZN8Dijkstra10trouverMinEi+0x2b2>
        {
            if(this->etapeRapporte(this->tableauEtapes[i]) && (!(this->tableauEtapes[i]->aEviter())) && this->tableauEtapes[i]->getDistance() != -1 && this->tableauEtapes[i]->getState() != -2)
    fb22:	697b      	ldr	r3, [r7, #20]
    fb24:	681a      	ldr	r2, [r3, #0]
    fb26:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fb2a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb2e:	4413      	add	r3, r2
    fb30:	681b      	ldr	r3, [r3, #0]
    fb32:	6978      	ldr	r0, [r7, #20]
    fb34:	4619      	mov	r1, r3
    fb36:	f7ff fdb3 	bl	f6a0 <_ZN8Dijkstra13etapeRapporteEP5Etape>
    fb3a:	4603      	mov	r3, r0
    fb3c:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fb40:	b2db      	uxtb	r3, r3
    fb42:	2b00      	cmp	r3, #0
    fb44:	d135      	bne.n	fbb2 <_ZN8Dijkstra10trouverMinEi+0x292>
    fb46:	697b      	ldr	r3, [r7, #20]
    fb48:	681a      	ldr	r2, [r3, #0]
    fb4a:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fb4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb52:	4413      	add	r3, r2
    fb54:	681b      	ldr	r3, [r3, #0]
    fb56:	4618      	mov	r0, r3
    fb58:	f000 fa68 	bl	1002c <_ZN5Etape7aEviterEv>
    fb5c:	4603      	mov	r3, r0
    fb5e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fb62:	b2db      	uxtb	r3, r3
    fb64:	f083 0301 	eor.w	r3, r3, #1	; 0x1
    fb68:	b2db      	uxtb	r3, r3
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	d121      	bne.n	fbb2 <_ZN8Dijkstra10trouverMinEi+0x292>
    fb6e:	697b      	ldr	r3, [r7, #20]
    fb70:	681a      	ldr	r2, [r3, #0]
    fb72:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fb76:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb7a:	4413      	add	r3, r2
    fb7c:	681b      	ldr	r3, [r3, #0]
    fb7e:	4618      	mov	r0, r3
    fb80:	f000 f9ec 	bl	ff5c <_ZN5Etape11getDistanceEv>
    fb84:	4603      	mov	r3, r0
    fb86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fb8a:	d012      	beq.n	fbb2 <_ZN8Dijkstra10trouverMinEi+0x292>
    fb8c:	697b      	ldr	r3, [r7, #20]
    fb8e:	681a      	ldr	r2, [r3, #0]
    fb90:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fb94:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fb98:	4413      	add	r3, r2
    fb9a:	681b      	ldr	r3, [r3, #0]
    fb9c:	4618      	mov	r0, r3
    fb9e:	f000 f9c3 	bl	ff28 <_ZN5Etape8getStateEv>
    fba2:	4603      	mov	r3, r0
    fba4:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fba8:	d003      	beq.n	fbb2 <_ZN8Dijkstra10trouverMinEi+0x292>
    fbaa:	f04f 0301 	mov.w	r3, #1	; 0x1
    fbae:	60bb      	str	r3, [r7, #8]
    fbb0:	e002      	b.n	fbb8 <_ZN8Dijkstra10trouverMinEi+0x298>
    fbb2:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbb6:	60bb      	str	r3, [r7, #8]
    fbb8:	68bb      	ldr	r3, [r7, #8]
    fbba:	2b00      	cmp	r3, #0
    fbbc:	d003      	beq.n	fbc6 <_ZN8Dijkstra10trouverMinEi+0x2a6>
            {
                onEstCoinceDansUnEndroitPourri = false;
    fbbe:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbc2:	f887 307f 	strb.w	r3, [r7, #127]
    //Pour cela, on change le status des étapes "robot vu" à "point de passage", puis relancer une passe de Dijkstra (récursion powa!!!).
    if(numeroEtapeLaPlusProche == -1)
    {
        //On check si on a encore des points à marquer dans la zone ou on est confiné
        bool onEstCoinceDansUnEndroitPourri = true;
        for(int i = 0 ; i < this->nombreEtapes ; i++)
    fbc6:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fbca:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fbce:	f8c7 3080 	str.w	r3, [r7, #128]
    fbd2:	697b      	ldr	r3, [r7, #20]
    fbd4:	685a      	ldr	r2, [r3, #4]
    fbd6:	f8d7 3080 	ldr.w	r3, [r7, #128]
    fbda:	429a      	cmp	r2, r3
    fbdc:	dca1      	bgt.n	fb22 <_ZN8Dijkstra10trouverMinEi+0x202>
            {
                onEstCoinceDansUnEndroitPourri = false;
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
    fbde:	f897 307f 	ldrb.w	r3, [r7, #127]
    fbe2:	2b00      	cmp	r3, #0
    fbe4:	d039      	beq.n	fc5a <_ZN8Dijkstra10trouverMinEi+0x33a>
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
    fbe6:	f04f 0300 	mov.w	r3, #0	; 0x0
    fbea:	f8c7 3084 	str.w	r3, [r7, #132]
    fbee:	e027      	b.n	fc40 <_ZN8Dijkstra10trouverMinEi+0x320>
            {
                //On reset numeroEtapeEnCours à l'étape où on est actuellement
                if(this->tableauEtapes[i]->getDistance() == 0)
    fbf0:	697b      	ldr	r3, [r7, #20]
    fbf2:	681a      	ldr	r2, [r3, #0]
    fbf4:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fbf8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fbfc:	4413      	add	r3, r2
    fbfe:	681b      	ldr	r3, [r3, #0]
    fc00:	4618      	mov	r0, r3
    fc02:	f000 f9ab 	bl	ff5c <_ZN5Etape11getDistanceEv>
    fc06:	4603      	mov	r3, r0
    fc08:	2b00      	cmp	r3, #0
    fc0a:	bf14      	ite	ne
    fc0c:	2300      	movne	r3, #0
    fc0e:	2301      	moveq	r3, #1
    fc10:	b2db      	uxtb	r3, r3
    fc12:	2b00      	cmp	r3, #0
    fc14:	d003      	beq.n	fc1e <_ZN8Dijkstra10trouverMinEi+0x2fe>
                {
                    this->numeroEtapeCourante = i; //-1?
    fc16:	697a      	ldr	r2, [r7, #20]
    fc18:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fc1c:	6093      	str	r3, [r2, #8]
                }

                this->tableauEtapes[i]->oublieRobotVu();
    fc1e:	697b      	ldr	r3, [r7, #20]
    fc20:	681a      	ldr	r2, [r3, #0]
    fc22:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fc26:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fc2a:	4413      	add	r3, r2
    fc2c:	681b      	ldr	r3, [r3, #0]
    fc2e:	4618      	mov	r0, r3
    fc30:	f000 fa30 	bl	10094 <_ZN5Etape13oublieRobotVuEv>
            }
        }
        //Sinon on supprime les barrières en oubliant qu'on a vu des robots
        if(onEstCoinceDansUnEndroitPourri)
        {
            for(int i = 0 ; i < this->nombreEtapes ; i++)
    fc34:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fc38:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fc3c:	f8c7 3084 	str.w	r3, [r7, #132]
    fc40:	697b      	ldr	r3, [r7, #20]
    fc42:	685a      	ldr	r2, [r3, #4]
    fc44:	f8d7 3084 	ldr.w	r3, [r7, #132]
    fc48:	429a      	cmp	r2, r3
    fc4a:	dcd1      	bgt.n	fbf0 <_ZN8Dijkstra10trouverMinEi+0x2d0>
                }

                this->tableauEtapes[i]->oublieRobotVu();
            }

            this->run();
    fc4c:	6978      	ldr	r0, [r7, #20]
    fc4e:	f000 f81b 	bl	fc88 <_ZN8Dijkstra3runEv>
            return -1;
    fc52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fc56:	60fb      	str	r3, [r7, #12]
    fc58:	e010      	b.n	fc7c <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
        else
        {
            return -2;
    fc5a:	f06f 0301 	mvn.w	r3, #1	; 0x1
    fc5e:	60fb      	str	r3, [r7, #12]
    fc60:	e00c      	b.n	fc7c <_ZN8Dijkstra10trouverMinEi+0x35c>
        }
    }
    this->tableauEtapes[numeroEtapeLaPlusProche]->setState(classementEtapeMinimale);
    fc62:	697b      	ldr	r3, [r7, #20]
    fc64:	681a      	ldr	r2, [r3, #0]
    fc66:	69fb      	ldr	r3, [r7, #28]
    fc68:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fc6c:	4413      	add	r3, r2
    fc6e:	681b      	ldr	r3, [r3, #0]
    fc70:	4618      	mov	r0, r3
    fc72:	6939      	ldr	r1, [r7, #16]
    fc74:	f000 f964 	bl	ff40 <_ZN5Etape8setStateEi>
    return numeroEtapeLaPlusProche;
    fc78:	69fb      	ldr	r3, [r7, #28]
    fc7a:	60fb      	str	r3, [r7, #12]
    fc7c:	68fb      	ldr	r3, [r7, #12]
}
    fc7e:	4618      	mov	r0, r3
    fc80:	f107 0788 	add.w	r7, r7, #136	; 0x88
    fc84:	46bd      	mov	sp, r7
    fc86:	bd80      	pop	{r7, pc}

0000fc88 <_ZN8Dijkstra3runEv>:
{
    this->numeroEtapeCourante = numeroEtapeCourante;
}

//Calcul des distances de toutes les étapes par rapport à l'étape en cours (étape origine)
int Dijkstra::run()
    fc88:	b580      	push	{r7, lr}
    fc8a:	b084      	sub	sp, #16
    fc8c:	af00      	add	r7, sp, #0
    fc8e:	6078      	str	r0, [r7, #4]
    else
        return 0;*/



    int min = -2;
    fc90:	f06f 0301 	mvn.w	r3, #1	; 0x1
    fc94:	60bb      	str	r3, [r7, #8]
    initialiser();
    fc96:	6878      	ldr	r0, [r7, #4]
    fc98:	f7ff fdde 	bl	f858 <_ZN8Dijkstra11initialiserEv>

    mettreAJourVoisins(this->numeroEtapeCourante);
    fc9c:	687b      	ldr	r3, [r7, #4]
    fc9e:	689b      	ldr	r3, [r3, #8]
    fca0:	6878      	ldr	r0, [r7, #4]
    fca2:	4619      	mov	r1, r3
    fca4:	f7ff fd34 	bl	f710 <_ZN8Dijkstra18mettreAJourVoisinsEi>

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
    fca8:	f04f 0300 	mov.w	r3, #0	; 0x0
    fcac:	60fb      	str	r3, [r7, #12]
    fcae:	e025      	b.n	fcfc <_ZN8Dijkstra3runEv+0x74>
    {
        min = trouverMin(i+1);
    fcb0:	68fb      	ldr	r3, [r7, #12]
    fcb2:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fcb6:	6878      	ldr	r0, [r7, #4]
    fcb8:	4619      	mov	r1, r3
    fcba:	f7ff fe31 	bl	f920 <_ZN8Dijkstra10trouverMinEi>
    fcbe:	4603      	mov	r3, r0
    fcc0:	60bb      	str	r3, [r7, #8]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
    fcc2:	68bb      	ldr	r3, [r7, #8]
    fcc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fcc8:	d103      	bne.n	fcd2 <_ZN8Dijkstra3runEv+0x4a>
        {
            return -1;
    fcca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fcce:	603b      	str	r3, [r7, #0]
    fcd0:	e01e      	b.n	fd10 <_ZN8Dijkstra3runEv+0x88>
        }
        if(min == -2)
    fcd2:	68bb      	ldr	r3, [r7, #8]
    fcd4:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fcd8:	d103      	bne.n	fce2 <_ZN8Dijkstra3runEv+0x5a>
        {
            return 0;
    fcda:	f04f 0300 	mov.w	r3, #0	; 0x0
    fcde:	603b      	str	r3, [r7, #0]
    fce0:	e016      	b.n	fd10 <_ZN8Dijkstra3runEv+0x88>
        }
        this->numeroEtapeCourante = min;
    fce2:	687a      	ldr	r2, [r7, #4]
    fce4:	68bb      	ldr	r3, [r7, #8]
    fce6:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
    fce8:	687b      	ldr	r3, [r7, #4]
    fcea:	689b      	ldr	r3, [r3, #8]
    fcec:	6878      	ldr	r0, [r7, #4]
    fcee:	4619      	mov	r1, r3
    fcf0:	f7ff fd0e 	bl	f710 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    int min = -2;
    initialiser();

    mettreAJourVoisins(this->numeroEtapeCourante);

    for(int i = 0 ; i < this->nombreEtapes-2 ; i++)
    fcf4:	68fb      	ldr	r3, [r7, #12]
    fcf6:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fcfa:	60fb      	str	r3, [r7, #12]
    fcfc:	687b      	ldr	r3, [r7, #4]
    fcfe:	685b      	ldr	r3, [r3, #4]
    fd00:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
    fd04:	68fb      	ldr	r3, [r7, #12]
    fd06:	429a      	cmp	r2, r3
    fd08:	dcd2      	bgt.n	fcb0 <_ZN8Dijkstra3runEv+0x28>
            return 0;
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;
    fd0a:	f04f 0300 	mov.w	r3, #0	; 0x0
    fd0e:	603b      	str	r3, [r7, #0]
    fd10:	683b      	ldr	r3, [r7, #0]
}
    fd12:	4618      	mov	r0, r3
    fd14:	f107 0710 	add.w	r7, r7, #16	; 0x10
    fd18:	46bd      	mov	sp, r7
    fd1a:	bd80      	pop	{r7, pc}

0000fd1c <_ZN8Dijkstra7miniRunEi>:

int Dijkstra::miniRun(int step)
    fd1c:	b580      	push	{r7, lr}
    fd1e:	b086      	sub	sp, #24
    fd20:	af00      	add	r7, sp, #0
    fd22:	60f8      	str	r0, [r7, #12]
    fd24:	60b9      	str	r1, [r7, #8]
{
    if (step == 0)
    fd26:	68bb      	ldr	r3, [r7, #8]
    fd28:	2b00      	cmp	r3, #0
    fd2a:	d103      	bne.n	fd34 <_ZN8Dijkstra7miniRunEi+0x18>
    {
        initialiser();
    fd2c:	68f8      	ldr	r0, [r7, #12]
    fd2e:	f7ff fd93 	bl	f858 <_ZN8Dijkstra11initialiserEv>
    fd32:	e02d      	b.n	fd90 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else if(step < this->nombreEtapes-2)
    fd34:	68fb      	ldr	r3, [r7, #12]
    fd36:	685b      	ldr	r3, [r3, #4]
    fd38:	f1a3 0202 	sub.w	r2, r3, #2	; 0x2
    fd3c:	68bb      	ldr	r3, [r7, #8]
    fd3e:	429a      	cmp	r2, r3
    fd40:	dd22      	ble.n	fd88 <_ZN8Dijkstra7miniRunEi+0x6c>
    {
        int min = trouverMin(step+1);
    fd42:	68bb      	ldr	r3, [r7, #8]
    fd44:	f103 0301 	add.w	r3, r3, #1	; 0x1
    fd48:	68f8      	ldr	r0, [r7, #12]
    fd4a:	4619      	mov	r1, r3
    fd4c:	f7ff fde8 	bl	f920 <_ZN8Dijkstra10trouverMinEi>
    fd50:	4603      	mov	r3, r0
    fd52:	617b      	str	r3, [r7, #20]
        // Si min vaut -1, c'est que le robot était coincé, et donc qu'il a fallut réinitialiser la recherche
        // Donc on arrete la recherche en cours, une nouvelle a été lancée
        if(min == -1)
    fd54:	697b      	ldr	r3, [r7, #20]
    fd56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    fd5a:	d103      	bne.n	fd64 <_ZN8Dijkstra7miniRunEi+0x48>
        {
            return -1;
    fd5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fd60:	607b      	str	r3, [r7, #4]
    fd62:	e018      	b.n	fd96 <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        if(min == -2)
    fd64:	697b      	ldr	r3, [r7, #20]
    fd66:	f113 0f02 	cmn.w	r3, #2	; 0x2
    fd6a:	d103      	bne.n	fd74 <_ZN8Dijkstra7miniRunEi+0x58>
        {
            return 0;
    fd6c:	f04f 0300 	mov.w	r3, #0	; 0x0
    fd70:	607b      	str	r3, [r7, #4]
    fd72:	e010      	b.n	fd96 <_ZN8Dijkstra7miniRunEi+0x7a>
        }
        this->numeroEtapeCourante = min;
    fd74:	68fa      	ldr	r2, [r7, #12]
    fd76:	697b      	ldr	r3, [r7, #20]
    fd78:	6093      	str	r3, [r2, #8]
        mettreAJourVoisins(this->numeroEtapeCourante);
    fd7a:	68fb      	ldr	r3, [r7, #12]
    fd7c:	689b      	ldr	r3, [r3, #8]
    fd7e:	68f8      	ldr	r0, [r7, #12]
    fd80:	4619      	mov	r1, r3
    fd82:	f7ff fcc5 	bl	f710 <_ZN8Dijkstra18mettreAJourVoisinsEi>
    fd86:	e003      	b.n	fd90 <_ZN8Dijkstra7miniRunEi+0x74>
    }
    else
    {
        return 0;
    fd88:	f04f 0300 	mov.w	r3, #0	; 0x0
    fd8c:	607b      	str	r3, [r7, #4]
    fd8e:	e002      	b.n	fd96 <_ZN8Dijkstra7miniRunEi+0x7a>
    }
    return -2;
    fd90:	f06f 0301 	mvn.w	r3, #1	; 0x1
    fd94:	607b      	str	r3, [r7, #4]
    fd96:	687b      	ldr	r3, [r7, #4]
        }
        this->numeroEtapeCourante = min;
        mettreAJourVoisins(this->numeroEtapeCourante);
    }
    return 0;*/
}
    fd98:	4618      	mov	r0, r3
    fd9a:	f107 0718 	add.w	r7, r7, #24	; 0x18
    fd9e:	46bd      	mov	sp, r7
    fda0:	bd80      	pop	{r7, pc}
    fda2:	46c0      	nop			(mov r8, r8)

0000fda4 <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>:
Etape* Dijkstra::getEtapeCourante()
{
    return tableauEtapes[this->numeroEtapeCourante];
}

int Dijkstra::calculDistanceDirect(Etape* etapeDepart, Etape* etapeArrivee)
    fda4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
    fda8:	b08b      	sub	sp, #44
    fdaa:	af00      	add	r7, sp, #0
    fdac:	6078      	str	r0, [r7, #4]
    fdae:	6039      	str	r1, [r7, #0]
    //Une solution, vu que le STM32-H405 a plein de mémoire, serait de pré-calculer les distances, et de les stocker.
    //Cela permettrait aussi d'ajuster certaines distances si besoin, pour préférer certains passages à d'autres
    return sqrt(
                    pow(fabs((int) etapeDepart->getPosition().getX()-etapeArrivee->getPosition().getX()),2)+
                    pow(fabs((int) etapeDepart->getPosition().getY()-etapeArrivee->getPosition().getY()),2)
                    );
    fdb0:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fdb4:	4618      	mov	r0, r3
    fdb6:	6879      	ldr	r1, [r7, #4]
    fdb8:	f000 f8a2 	bl	ff00 <_ZN5Etape11getPositionEv>
    fdbc:	f107 0308 	add.w	r3, r7, #8	; 0x8
    fdc0:	4618      	mov	r0, r3
    fdc2:	f7fe fc43 	bl	e64c <_ZNK8Position4getXEv>
    fdc6:	4603      	mov	r3, r0
    fdc8:	4618      	mov	r0, r3
    fdca:	f009 f91d 	bl	19008 <__aeabi_f2iz>
    fdce:	4603      	mov	r3, r0
    fdd0:	4618      	mov	r0, r3
    fdd2:	f008 ff01 	bl	18bd8 <__aeabi_i2f>
    fdd6:	4604      	mov	r4, r0
    fdd8:	f107 0310 	add.w	r3, r7, #16	; 0x10
    fddc:	4618      	mov	r0, r3
    fdde:	6839      	ldr	r1, [r7, #0]
    fde0:	f000 f88e 	bl	ff00 <_ZN5Etape11getPositionEv>
    fde4:	f107 0310 	add.w	r3, r7, #16	; 0x10
    fde8:	4618      	mov	r0, r3
    fdea:	f7fe fc2f 	bl	e64c <_ZNK8Position4getXEv>
    fdee:	4603      	mov	r3, r0
    fdf0:	4620      	mov	r0, r4
    fdf2:	4619      	mov	r1, r3
    fdf4:	f008 fe3a 	bl	18a6c <__aeabi_fsub>
    fdf8:	4603      	mov	r3, r0
    fdfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fdfe:	4618      	mov	r0, r3
    fe00:	f008 facc 	bl	1839c <__aeabi_f2d>
    fe04:	4602      	mov	r2, r0
    fe06:	460b      	mov	r3, r1
    fe08:	4610      	mov	r0, r2
    fe0a:	4619      	mov	r1, r3
    fe0c:	f008 fb1a 	bl	18444 <__aeabi_dmul>
    fe10:	4602      	mov	r2, r0
    fe12:	460b      	mov	r3, r1
    fe14:	4690      	mov	r8, r2
    fe16:	4699      	mov	r9, r3
    fe18:	f107 0318 	add.w	r3, r7, #24	; 0x18
    fe1c:	4618      	mov	r0, r3
    fe1e:	6879      	ldr	r1, [r7, #4]
    fe20:	f000 f86e 	bl	ff00 <_ZN5Etape11getPositionEv>
    fe24:	f107 0318 	add.w	r3, r7, #24	; 0x18
    fe28:	4618      	mov	r0, r3
    fe2a:	f7fe fc1b 	bl	e664 <_ZNK8Position4getYEv>
    fe2e:	4603      	mov	r3, r0
    fe30:	4618      	mov	r0, r3
    fe32:	f009 f8e9 	bl	19008 <__aeabi_f2iz>
    fe36:	4603      	mov	r3, r0
    fe38:	4618      	mov	r0, r3
    fe3a:	f008 fecd 	bl	18bd8 <__aeabi_i2f>
    fe3e:	4604      	mov	r4, r0
    fe40:	f107 0320 	add.w	r3, r7, #32	; 0x20
    fe44:	4618      	mov	r0, r3
    fe46:	6839      	ldr	r1, [r7, #0]
    fe48:	f000 f85a 	bl	ff00 <_ZN5Etape11getPositionEv>
    fe4c:	f107 0320 	add.w	r3, r7, #32	; 0x20
    fe50:	4618      	mov	r0, r3
    fe52:	f7fe fc07 	bl	e664 <_ZNK8Position4getYEv>
    fe56:	4603      	mov	r3, r0
    fe58:	4620      	mov	r0, r4
    fe5a:	4619      	mov	r1, r3
    fe5c:	f008 fe06 	bl	18a6c <__aeabi_fsub>
    fe60:	4603      	mov	r3, r0
    fe62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    fe66:	4618      	mov	r0, r3
    fe68:	f008 fa98 	bl	1839c <__aeabi_f2d>
    fe6c:	4602      	mov	r2, r0
    fe6e:	460b      	mov	r3, r1
    fe70:	4610      	mov	r0, r2
    fe72:	4619      	mov	r1, r3
    fe74:	f008 fae6 	bl	18444 <__aeabi_dmul>
    fe78:	4602      	mov	r2, r0
    fe7a:	460b      	mov	r3, r1
    fe7c:	4640      	mov	r0, r8
    fe7e:	4649      	mov	r1, r9
    fe80:	f008 f92e 	bl	180e0 <__adddf3>
    fe84:	4602      	mov	r2, r0
    fe86:	460b      	mov	r3, r1
    fe88:	4610      	mov	r0, r2
    fe8a:	4619      	mov	r1, r3
    fe8c:	f00c fb16 	bl	1c4bc <sqrt>
    fe90:	4602      	mov	r2, r0
    fe92:	460b      	mov	r3, r1
    fe94:	4610      	mov	r0, r2
    fe96:	4619      	mov	r1, r3
    fe98:	f008 fd6c 	bl	18974 <__aeabi_d2iz>
    fe9c:	4603      	mov	r3, r0
}
    fe9e:	4618      	mov	r0, r3
    fea0:	f107 072c 	add.w	r7, r7, #44	; 0x2c
    fea4:	46bd      	mov	sp, r7
    fea6:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
    feaa:	46c0      	nop			(mov r8, r8)

0000feac <_ZN5Etape8getChildEi>:
    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){};

Etape* Etape::getChild(int nb){
    feac:	b480      	push	{r7}
    feae:	b083      	sub	sp, #12
    feb0:	af00      	add	r7, sp, #0
    feb2:	6078      	str	r0, [r7, #4]
    feb4:	6039      	str	r1, [r7, #0]
    return this->children[nb];
    feb6:	687b      	ldr	r3, [r7, #4]
    feb8:	681a      	ldr	r2, [r3, #0]
    feba:	683b      	ldr	r3, [r7, #0]
    febc:	ea4f 0383 	mov.w	r3, r3, lsl #2
    fec0:	4413      	add	r3, r2
    fec2:	681b      	ldr	r3, [r3, #0]
}
    fec4:	4618      	mov	r0, r3
    fec6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    feca:	46bd      	mov	sp, r7
    fecc:	bc80      	pop	{r7}
    fece:	4770      	bx	lr

0000fed0 <_ZN5Etape11getChildrenEv>:

Etape** Etape::getChildren(){
    fed0:	b480      	push	{r7}
    fed2:	b083      	sub	sp, #12
    fed4:	af00      	add	r7, sp, #0
    fed6:	6078      	str	r0, [r7, #4]
    return this->children;
    fed8:	687b      	ldr	r3, [r7, #4]
    feda:	681b      	ldr	r3, [r3, #0]
}
    fedc:	4618      	mov	r0, r3
    fede:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fee2:	46bd      	mov	sp, r7
    fee4:	bc80      	pop	{r7}
    fee6:	4770      	bx	lr

0000fee8 <_ZN5Etape9getParentEv>:

Etape* Etape::getParent(){
    fee8:	b480      	push	{r7}
    feea:	b083      	sub	sp, #12
    feec:	af00      	add	r7, sp, #0
    feee:	6078      	str	r0, [r7, #4]
    return this->parent;
    fef0:	687b      	ldr	r3, [r7, #4]
    fef2:	685b      	ldr	r3, [r3, #4]
}
    fef4:	4618      	mov	r0, r3
    fef6:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fefa:	46bd      	mov	sp, r7
    fefc:	bc80      	pop	{r7}
    fefe:	4770      	bx	lr

0000ff00 <_ZN5Etape11getPositionEv>:

Position Etape::getPosition()
    ff00:	b480      	push	{r7}
    ff02:	b083      	sub	sp, #12
    ff04:	af00      	add	r7, sp, #0
    ff06:	4684      	mov	ip, r0
    ff08:	6079      	str	r1, [r7, #4]
{
    return this->position;
    ff0a:	687b      	ldr	r3, [r7, #4]
    ff0c:	4662      	mov	r2, ip
    ff0e:	f103 0308 	add.w	r3, r3, #8	; 0x8
    ff12:	e893 0003 	ldmia.w	r3, {r0, r1}
    ff16:	e882 0003 	stmia.w	r2, {r0, r1}
}
    ff1a:	4660      	mov	r0, ip
    ff1c:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ff20:	46bd      	mov	sp, r7
    ff22:	bc80      	pop	{r7}
    ff24:	4770      	bx	lr
    ff26:	46c0      	nop			(mov r8, r8)

0000ff28 <_ZN5Etape8getStateEv>:

int Etape::getState(){
    ff28:	b480      	push	{r7}
    ff2a:	b083      	sub	sp, #12
    ff2c:	af00      	add	r7, sp, #0
    ff2e:	6078      	str	r0, [r7, #4]
    return this->state;
    ff30:	687b      	ldr	r3, [r7, #4]
    ff32:	691b      	ldr	r3, [r3, #16]
}
    ff34:	4618      	mov	r0, r3
    ff36:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ff3a:	46bd      	mov	sp, r7
    ff3c:	bc80      	pop	{r7}
    ff3e:	4770      	bx	lr

0000ff40 <_ZN5Etape8setStateEi>:

void Etape::setState(int state){
    ff40:	b480      	push	{r7}
    ff42:	b083      	sub	sp, #12
    ff44:	af00      	add	r7, sp, #0
    ff46:	6078      	str	r0, [r7, #4]
    ff48:	6039      	str	r1, [r7, #0]
    this->state = state;
    ff4a:	687a      	ldr	r2, [r7, #4]
    ff4c:	683b      	ldr	r3, [r7, #0]
    ff4e:	6113      	str	r3, [r2, #16]
}
    ff50:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ff54:	46bd      	mov	sp, r7
    ff56:	bc80      	pop	{r7}
    ff58:	4770      	bx	lr
    ff5a:	46c0      	nop			(mov r8, r8)

0000ff5c <_ZN5Etape11getDistanceEv>:

int Etape::getDistance(){
    ff5c:	b480      	push	{r7}
    ff5e:	b083      	sub	sp, #12
    ff60:	af00      	add	r7, sp, #0
    ff62:	6078      	str	r0, [r7, #4]
    return this->distance;
    ff64:	687b      	ldr	r3, [r7, #4]
    ff66:	695b      	ldr	r3, [r3, #20]
}
    ff68:	4618      	mov	r0, r3
    ff6a:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ff6e:	46bd      	mov	sp, r7
    ff70:	bc80      	pop	{r7}
    ff72:	4770      	bx	lr

0000ff74 <_ZN5Etape11setDistanceEi>:

void Etape::setDistance(int distance){
    ff74:	b480      	push	{r7}
    ff76:	b083      	sub	sp, #12
    ff78:	af00      	add	r7, sp, #0
    ff7a:	6078      	str	r0, [r7, #4]
    ff7c:	6039      	str	r1, [r7, #0]
    this->distance = distance;
    ff7e:	687a      	ldr	r2, [r7, #4]
    ff80:	683b      	ldr	r3, [r7, #0]
    ff82:	6153      	str	r3, [r2, #20]
}
    ff84:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ff88:	46bd      	mov	sp, r7
    ff8a:	bc80      	pop	{r7}
    ff8c:	4770      	bx	lr
    ff8e:	46c0      	nop			(mov r8, r8)

0000ff90 <_ZN5Etape9setParentEPS_>:

void Etape::setParent(Etape* parent){
    ff90:	b480      	push	{r7}
    ff92:	b083      	sub	sp, #12
    ff94:	af00      	add	r7, sp, #0
    ff96:	6078      	str	r0, [r7, #4]
    ff98:	6039      	str	r1, [r7, #0]
    this->parent = parent;
    ff9a:	687a      	ldr	r2, [r7, #4]
    ff9c:	683b      	ldr	r3, [r7, #0]
    ff9e:	6053      	str	r3, [r2, #4]
}
    ffa0:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ffa4:	46bd      	mov	sp, r7
    ffa6:	bc80      	pop	{r7}
    ffa8:	4770      	bx	lr
    ffaa:	46c0      	nop			(mov r8, r8)

0000ffac <_ZN5Etape13getNbChildrenEv>:

int Etape::getNbChildren(){
    ffac:	b480      	push	{r7}
    ffae:	b083      	sub	sp, #12
    ffb0:	af00      	add	r7, sp, #0
    ffb2:	6078      	str	r0, [r7, #4]
    return this->nbChildren;
    ffb4:	687b      	ldr	r3, [r7, #4]
    ffb6:	69db      	ldr	r3, [r3, #28]
}
    ffb8:	4618      	mov	r0, r3
    ffba:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ffbe:	46bd      	mov	sp, r7
    ffc0:	bc80      	pop	{r7}
    ffc2:	4770      	bx	lr

0000ffc4 <_ZN5Etape11setChildrenEPPS_>:

void Etape::setChildren(Etape** children)
    ffc4:	b480      	push	{r7}
    ffc6:	b083      	sub	sp, #12
    ffc8:	af00      	add	r7, sp, #0
    ffca:	6078      	str	r0, [r7, #4]
    ffcc:	6039      	str	r1, [r7, #0]
{
    this->children = children;
    ffce:	687a      	ldr	r2, [r7, #4]
    ffd0:	683b      	ldr	r3, [r7, #0]
    ffd2:	6013      	str	r3, [r2, #0]
}
    ffd4:	f107 070c 	add.w	r7, r7, #12	; 0xc
    ffd8:	46bd      	mov	sp, r7
    ffda:	bc80      	pop	{r7}
    ffdc:	4770      	bx	lr
    ffde:	46c0      	nop			(mov r8, r8)

0000ffe0 <_ZN5Etape12getEtapeTypeEv>:

Etape::EtapeType Etape::getEtapeType()
    ffe0:	b480      	push	{r7}
    ffe2:	b083      	sub	sp, #12
    ffe4:	af00      	add	r7, sp, #0
    ffe6:	6078      	str	r0, [r7, #4]
{
    return this->type;
    ffe8:	687b      	ldr	r3, [r7, #4]
    ffea:	7e1b      	ldrb	r3, [r3, #24]
}
    ffec:	4618      	mov	r0, r3
    ffee:	f107 070c 	add.w	r7, r7, #12	; 0xc
    fff2:	46bd      	mov	sp, r7
    fff4:	bc80      	pop	{r7}
    fff6:	4770      	bx	lr

0000fff8 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>:

void Etape::setEtapeType(Etape::EtapeType type)
    fff8:	b480      	push	{r7}
    fffa:	b083      	sub	sp, #12
    fffc:	af00      	add	r7, sp, #0
    fffe:	6078      	str	r0, [r7, #4]
   10000:	460b      	mov	r3, r1
   10002:	70fb      	strb	r3, [r7, #3]
{
    this->type = type;
   10004:	687a      	ldr	r2, [r7, #4]
   10006:	78fb      	ldrb	r3, [r7, #3]
   10008:	7613      	strb	r3, [r2, #24]
}
   1000a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1000e:	46bd      	mov	sp, r7
   10010:	bc80      	pop	{r7}
   10012:	4770      	bx	lr

00010014 <_ZN5Etape9getNumeroEv>:
    {
        this->type = (EtapeType)(this->type + 20);
    }
}

int Etape::getNumero()
   10014:	b480      	push	{r7}
   10016:	b083      	sub	sp, #12
   10018:	af00      	add	r7, sp, #0
   1001a:	6078      	str	r0, [r7, #4]
{
    return this->numero;
   1001c:	687b      	ldr	r3, [r7, #4]
   1001e:	6a1b      	ldr	r3, [r3, #32]
}
   10020:	4618      	mov	r0, r3
   10022:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10026:	46bd      	mov	sp, r7
   10028:	bc80      	pop	{r7}
   1002a:	4770      	bx	lr

0001002c <_ZN5Etape7aEviterEv>:

bool Etape::aEviter()
   1002c:	b580      	push	{r7, lr}
   1002e:	b082      	sub	sp, #8
   10030:	af00      	add	r7, sp, #0
   10032:	6078      	str	r0, [r7, #4]
{
    if(((int) this->getEtapeType()) > 19)
   10034:	6878      	ldr	r0, [r7, #4]
   10036:	f7ff ffd3 	bl	ffe0 <_ZN5Etape12getEtapeTypeEv>
   1003a:	4603      	mov	r3, r0
   1003c:	2b13      	cmp	r3, #19
   1003e:	bf94      	ite	ls
   10040:	2300      	movls	r3, #0
   10042:	2301      	movhi	r3, #1
   10044:	b2db      	uxtb	r3, r3
   10046:	2b00      	cmp	r3, #0
   10048:	d003      	beq.n	10052 <_ZN5Etape7aEviterEv+0x26>
    {
        return true;
   1004a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1004e:	603b      	str	r3, [r7, #0]
   10050:	e002      	b.n	10058 <_ZN5Etape7aEviterEv+0x2c>
    }
    else
    {
        return false;
   10052:	f04f 0300 	mov.w	r3, #0	; 0x0
   10056:	603b      	str	r3, [r7, #0]
   10058:	683b      	ldr	r3, [r7, #0]
    }
}
   1005a:	4618      	mov	r0, r3
   1005c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10060:	46bd      	mov	sp, r7
   10062:	bd80      	pop	{r7, pc}

00010064 <_ZN5Etape7robotVuEv>:
void Etape::setEtapeType(Etape::EtapeType type)
{
    this->type = type;
}

void Etape::robotVu()
   10064:	b580      	push	{r7, lr}
   10066:	b082      	sub	sp, #8
   10068:	af00      	add	r7, sp, #0
   1006a:	6078      	str	r0, [r7, #4]
{
    if(!aEviter())
   1006c:	6878      	ldr	r0, [r7, #4]
   1006e:	f7ff ffdd 	bl	1002c <_ZN5Etape7aEviterEv>
   10072:	4603      	mov	r3, r0
   10074:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   10078:	b2db      	uxtb	r3, r3
   1007a:	2b00      	cmp	r3, #0
   1007c:	d006      	beq.n	1008c <_ZN5Etape7robotVuEv+0x28>
    {
        this->type = (EtapeType)(this->type + 20);
   1007e:	687b      	ldr	r3, [r7, #4]
   10080:	7e1b      	ldrb	r3, [r3, #24]
   10082:	f103 0314 	add.w	r3, r3, #20	; 0x14
   10086:	b2db      	uxtb	r3, r3
   10088:	687a      	ldr	r2, [r7, #4]
   1008a:	7613      	strb	r3, [r2, #24]
    }
}
   1008c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10090:	46bd      	mov	sp, r7
   10092:	bd80      	pop	{r7, pc}

00010094 <_ZN5Etape13oublieRobotVuEv>:
    {
        return false;
    }
}

void Etape::oublieRobotVu()
   10094:	b580      	push	{r7, lr}
   10096:	b082      	sub	sp, #8
   10098:	af00      	add	r7, sp, #0
   1009a:	6078      	str	r0, [r7, #4]
{
    if(this->aEviter())
   1009c:	6878      	ldr	r0, [r7, #4]
   1009e:	f7ff ffc5 	bl	1002c <_ZN5Etape7aEviterEv>
   100a2:	4603      	mov	r3, r0
   100a4:	2b00      	cmp	r3, #0
   100a6:	d00a      	beq.n	100be <_ZN5Etape13oublieRobotVuEv+0x2a>
    {
        //On oublie qu'on a vu un robot
        this->setEtapeType((EtapeType) ((int)this->getEtapeType() - 20));
   100a8:	6878      	ldr	r0, [r7, #4]
   100aa:	f7ff ff99 	bl	ffe0 <_ZN5Etape12getEtapeTypeEv>
   100ae:	4603      	mov	r3, r0
   100b0:	f1a3 0314 	sub.w	r3, r3, #20	; 0x14
   100b4:	b2db      	uxtb	r3, r3
   100b6:	6878      	ldr	r0, [r7, #4]
   100b8:	4619      	mov	r1, r3
   100ba:	f7ff ff9d 	bl	fff8 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   100be:	f107 0708 	add.w	r7, r7, #8	; 0x8
   100c2:	46bd      	mov	sp, r7
   100c4:	bd80      	pop	{r7, pc}
   100c6:	46c0      	nop			(mov r8, r8)

000100c8 <_ZN5Etape12getDistancesEv>:

int* Etape::getDistances()
   100c8:	b480      	push	{r7}
   100ca:	b083      	sub	sp, #12
   100cc:	af00      	add	r7, sp, #0
   100ce:	6078      	str	r0, [r7, #4]
{
    return this->distances;
   100d0:	687b      	ldr	r3, [r7, #4]
   100d2:	6a5b      	ldr	r3, [r3, #36]
}
   100d4:	4618      	mov	r0, r3
   100d6:	f107 070c 	add.w	r7, r7, #12	; 0xc
   100da:	46bd      	mov	sp, r7
   100dc:	bc80      	pop	{r7}
   100de:	4770      	bx	lr

000100e0 <_ZN5Etape12setDistancesEPi>:

void Etape::setDistances(int* distances)
   100e0:	b480      	push	{r7}
   100e2:	b083      	sub	sp, #12
   100e4:	af00      	add	r7, sp, #0
   100e6:	6078      	str	r0, [r7, #4]
   100e8:	6039      	str	r1, [r7, #0]
{
    this->distances = distances;
   100ea:	687a      	ldr	r2, [r7, #4]
   100ec:	683b      	ldr	r3, [r7, #0]
   100ee:	6253      	str	r3, [r2, #36]
}
   100f0:	f107 070c 	add.w	r7, r7, #12	; 0xc
   100f4:	46bd      	mov	sp, r7
   100f6:	bc80      	pop	{r7}
   100f8:	4770      	bx	lr
   100fa:	46c0      	nop			(mov r8, r8)

000100fc <_ZN5Etape27getEtapesLieesParFinirEtapeEv>:
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}

int* Etape::getEtapesLieesParFinirEtape()
   100fc:	b480      	push	{r7}
   100fe:	b083      	sub	sp, #12
   10100:	af00      	add	r7, sp, #0
   10102:	6078      	str	r0, [r7, #4]
{
    return this->numerosEtapesLieesParFinirEtape;
   10104:	687b      	ldr	r3, [r7, #4]
   10106:	6adb      	ldr	r3, [r3, #44]
}
   10108:	4618      	mov	r0, r3
   1010a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1010e:	46bd      	mov	sp, r7
   10110:	bc80      	pop	{r7}
   10112:	4770      	bx	lr

00010114 <_ZN5Etape27setEtapesLieesParFinirEtapeEPi>:

void Etape::setEtapesLieesParFinirEtape(int* numerosEtapesLieesParFinirEtape)
   10114:	b480      	push	{r7}
   10116:	b083      	sub	sp, #12
   10118:	af00      	add	r7, sp, #0
   1011a:	6078      	str	r0, [r7, #4]
   1011c:	6039      	str	r1, [r7, #0]
{
    this->numerosEtapesLieesParFinirEtape = numerosEtapesLieesParFinirEtape;
   1011e:	687a      	ldr	r2, [r7, #4]
   10120:	683b      	ldr	r3, [r7, #0]
   10122:	62d3      	str	r3, [r2, #44]
}
   10124:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10128:	46bd      	mov	sp, r7
   1012a:	bc80      	pop	{r7}
   1012c:	4770      	bx	lr
   1012e:	46c0      	nop			(mov r8, r8)

00010130 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>:

int Etape::getNombreEtapesLieesParFinirEtape()
   10130:	b480      	push	{r7}
   10132:	b083      	sub	sp, #12
   10134:	af00      	add	r7, sp, #0
   10136:	6078      	str	r0, [r7, #4]
{
    return this->nombreEtapesLieesParFinirEtape;
   10138:	687b      	ldr	r3, [r7, #4]
   1013a:	6a9b      	ldr	r3, [r3, #40]
}
   1013c:	4618      	mov	r0, r3
   1013e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10142:	46bd      	mov	sp, r7
   10144:	bc80      	pop	{r7}
   10146:	4770      	bx	lr

00010148 <_ZN5Etape5finirEv>:

void Etape::finir(void)
   10148:	b480      	push	{r7}
   1014a:	b083      	sub	sp, #12
   1014c:	af00      	add	r7, sp, #0
   1014e:	6078      	str	r0, [r7, #4]
{
    if(this->type == FEU || this->type == FRUIT || this->type == FEU_COTE_NOTRE_COULEUR_FACE_TERRAIN || this->type == FEU_COTE_NOTRE_COULEUR_FACE_EXTERIEUR)
   10150:	687b      	ldr	r3, [r7, #4]
   10152:	7e1b      	ldrb	r3, [r3, #24]
   10154:	2b03      	cmp	r3, #3
   10156:	d00b      	beq.n	10170 <_ZN5Etape5finirEv+0x28>
   10158:	687b      	ldr	r3, [r7, #4]
   1015a:	7e1b      	ldrb	r3, [r3, #24]
   1015c:	2b02      	cmp	r3, #2
   1015e:	d007      	beq.n	10170 <_ZN5Etape5finirEv+0x28>
   10160:	687b      	ldr	r3, [r7, #4]
   10162:	7e1b      	ldrb	r3, [r3, #24]
   10164:	2b09      	cmp	r3, #9
   10166:	d003      	beq.n	10170 <_ZN5Etape5finirEv+0x28>
   10168:	687b      	ldr	r3, [r7, #4]
   1016a:	7e1b      	ldrb	r3, [r3, #24]
   1016c:	2b0a      	cmp	r3, #10
   1016e:	d103      	bne.n	10178 <_ZN5Etape5finirEv+0x30>
    {
        this->type = POINT_PASSAGE;
   10170:	687b      	ldr	r3, [r7, #4]
   10172:	f04f 0200 	mov.w	r2, #0	; 0x0
   10176:	761a      	strb	r2, [r3, #24]
    }
}
   10178:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1017c:	46bd      	mov	sp, r7
   1017e:	bc80      	pop	{r7}
   10180:	4770      	bx	lr
   10182:	46c0      	nop			(mov r8, r8)

00010184 <_ZN5Etape8setScoreEi>:

void Etape::setScore(int score)
   10184:	b480      	push	{r7}
   10186:	b083      	sub	sp, #12
   10188:	af00      	add	r7, sp, #0
   1018a:	6078      	str	r0, [r7, #4]
   1018c:	6039      	str	r1, [r7, #0]
{
    this->score = score;
   1018e:	687a      	ldr	r2, [r7, #4]
   10190:	683b      	ldr	r3, [r7, #0]
   10192:	6313      	str	r3, [r2, #48]
}
   10194:	f107 070c 	add.w	r7, r7, #12	; 0xc
   10198:	46bd      	mov	sp, r7
   1019a:	bc80      	pop	{r7}
   1019c:	4770      	bx	lr
   1019e:	46c0      	nop			(mov r8, r8)

000101a0 <_ZN5Etape8getScoreEv>:

int Etape::getScore()
   101a0:	b480      	push	{r7}
   101a2:	b083      	sub	sp, #12
   101a4:	af00      	add	r7, sp, #0
   101a6:	6078      	str	r0, [r7, #4]
{
    return this->score;
   101a8:	687b      	ldr	r3, [r7, #4]
   101aa:	6b1b      	ldr	r3, [r3, #48]
}
   101ac:	4618      	mov	r0, r3
   101ae:	f107 070c 	add.w	r7, r7, #12	; 0xc
   101b2:	46bd      	mov	sp, r7
   101b4:	bc80      	pop	{r7}
   101b6:	4770      	bx	lr

000101b8 <_ZN5Etape9addVoisinEPS_b>:

Etape* Etape::addVoisin(Etape* newVoisin, bool autreSens)
   101b8:	b580      	push	{r7, lr}
   101ba:	b088      	sub	sp, #32
   101bc:	af00      	add	r7, sp, #0
   101be:	60f8      	str	r0, [r7, #12]
   101c0:	60b9      	str	r1, [r7, #8]
   101c2:	4613      	mov	r3, r2
   101c4:	71fb      	strb	r3, [r7, #7]
{
    if(this->nbChildren==0)
   101c6:	68fb      	ldr	r3, [r7, #12]
   101c8:	69db      	ldr	r3, [r3, #28]
   101ca:	2b00      	cmp	r3, #0
   101cc:	d112      	bne.n	101f4 <_ZN5Etape9addVoisinEPS_b+0x3c>
    {
        this->children = new Etape*[1];
   101ce:	f04f 0004 	mov.w	r0, #4	; 0x4
   101d2:	f7fe f959 	bl	e488 <_Znaj>
   101d6:	4603      	mov	r3, r0
   101d8:	461a      	mov	r2, r3
   101da:	68fb      	ldr	r3, [r7, #12]
   101dc:	601a      	str	r2, [r3, #0]
        this->children[0] = newVoisin;
   101de:	68fb      	ldr	r3, [r7, #12]
   101e0:	681a      	ldr	r2, [r3, #0]
   101e2:	68bb      	ldr	r3, [r7, #8]
   101e4:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   101e6:	68fb      	ldr	r3, [r7, #12]
   101e8:	69db      	ldr	r3, [r3, #28]
   101ea:	f103 0201 	add.w	r2, r3, #1	; 0x1
   101ee:	68fb      	ldr	r3, [r7, #12]
   101f0:	61da      	str	r2, [r3, #28]
   101f2:	e060      	b.n	102b6 <_ZN5Etape9addVoisinEPS_b+0xfe>
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
   101f4:	68fb      	ldr	r3, [r7, #12]
   101f6:	69db      	ldr	r3, [r3, #28]
   101f8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   101fc:	4618      	mov	r0, r3
   101fe:	f7fe f943 	bl	e488 <_Znaj>
   10202:	4603      	mov	r3, r0
   10204:	617b      	str	r3, [r7, #20]
        for(int i=0; i<nbChildren; i++)
   10206:	f04f 0300 	mov.w	r3, #0	; 0x0
   1020a:	61bb      	str	r3, [r7, #24]
   1020c:	e011      	b.n	10232 <_ZN5Etape9addVoisinEPS_b+0x7a>
        {
            temp[i] = this->children[i];
   1020e:	69bb      	ldr	r3, [r7, #24]
   10210:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10214:	697b      	ldr	r3, [r7, #20]
   10216:	eb03 0102 	add.w	r1, r3, r2
   1021a:	68fb      	ldr	r3, [r7, #12]
   1021c:	681a      	ldr	r2, [r3, #0]
   1021e:	69bb      	ldr	r3, [r7, #24]
   10220:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10224:	4413      	add	r3, r2
   10226:	681b      	ldr	r3, [r3, #0]
   10228:	600b      	str	r3, [r1, #0]
        this->nbChildren++;
    }
    else
    {
        Etape** temp = new Etape*[nbChildren];
        for(int i=0; i<nbChildren; i++)
   1022a:	69bb      	ldr	r3, [r7, #24]
   1022c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10230:	61bb      	str	r3, [r7, #24]
   10232:	68fb      	ldr	r3, [r7, #12]
   10234:	69da      	ldr	r2, [r3, #28]
   10236:	69bb      	ldr	r3, [r7, #24]
   10238:	429a      	cmp	r2, r3
   1023a:	dce8      	bgt.n	1020e <_ZN5Etape9addVoisinEPS_b+0x56>
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
   1023c:	68fb      	ldr	r3, [r7, #12]
   1023e:	69db      	ldr	r3, [r3, #28]
   10240:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10244:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10248:	4618      	mov	r0, r3
   1024a:	f7fe f91d 	bl	e488 <_Znaj>
   1024e:	4603      	mov	r3, r0
   10250:	461a      	mov	r2, r3
   10252:	68fb      	ldr	r3, [r7, #12]
   10254:	601a      	str	r2, [r3, #0]
        for(int i=0; i<nbChildren; i++)
   10256:	f04f 0300 	mov.w	r3, #0	; 0x0
   1025a:	61fb      	str	r3, [r7, #28]
   1025c:	e011      	b.n	10282 <_ZN5Etape9addVoisinEPS_b+0xca>
        {
            this->children[i] = temp[i];
   1025e:	68fb      	ldr	r3, [r7, #12]
   10260:	681a      	ldr	r2, [r3, #0]
   10262:	69fb      	ldr	r3, [r7, #28]
   10264:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10268:	eb02 0103 	add.w	r1, r2, r3
   1026c:	69fb      	ldr	r3, [r7, #28]
   1026e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   10272:	697b      	ldr	r3, [r7, #20]
   10274:	4413      	add	r3, r2
   10276:	681b      	ldr	r3, [r3, #0]
   10278:	600b      	str	r3, [r1, #0]
        for(int i=0; i<nbChildren; i++)
        {
            temp[i] = this->children[i];
        }
        this->children = new Etape*[nbChildren+1];
        for(int i=0; i<nbChildren; i++)
   1027a:	69fb      	ldr	r3, [r7, #28]
   1027c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10280:	61fb      	str	r3, [r7, #28]
   10282:	68fb      	ldr	r3, [r7, #12]
   10284:	69da      	ldr	r2, [r3, #28]
   10286:	69fb      	ldr	r3, [r7, #28]
   10288:	429a      	cmp	r2, r3
   1028a:	dce8      	bgt.n	1025e <_ZN5Etape9addVoisinEPS_b+0xa6>
        {
            this->children[i] = temp[i];
        }
        delete[] temp;
   1028c:	697b      	ldr	r3, [r7, #20]
   1028e:	2b00      	cmp	r3, #0
   10290:	d002      	beq.n	10298 <_ZN5Etape9addVoisinEPS_b+0xe0>
   10292:	6978      	ldr	r0, [r7, #20]
   10294:	f7fe f97e 	bl	e594 <_ZdaPv>
        this->children[nbChildren] = newVoisin;
   10298:	68fb      	ldr	r3, [r7, #12]
   1029a:	681a      	ldr	r2, [r3, #0]
   1029c:	68fb      	ldr	r3, [r7, #12]
   1029e:	69db      	ldr	r3, [r3, #28]
   102a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102a4:	441a      	add	r2, r3
   102a6:	68bb      	ldr	r3, [r7, #8]
   102a8:	6013      	str	r3, [r2, #0]
        this->nbChildren++;
   102aa:	68fb      	ldr	r3, [r7, #12]
   102ac:	69db      	ldr	r3, [r3, #28]
   102ae:	f103 0201 	add.w	r2, r3, #1	; 0x1
   102b2:	68fb      	ldr	r3, [r7, #12]
   102b4:	61da      	str	r2, [r3, #28]
        qDebug() << "ERREUR, TROP DE VOISINS !!!";
#endif
    }
    this->children[i] = newVoisin;
    */
    if (autreSens)
   102b6:	79fb      	ldrb	r3, [r7, #7]
   102b8:	2b00      	cmp	r3, #0
   102ba:	d005      	beq.n	102c8 <_ZN5Etape9addVoisinEPS_b+0x110>
    {
        newVoisin->addVoisin(this, false);
   102bc:	68b8      	ldr	r0, [r7, #8]
   102be:	68f9      	ldr	r1, [r7, #12]
   102c0:	f04f 0200 	mov.w	r2, #0	; 0x0
   102c4:	f7ff ff78 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    }
}
   102c8:	f107 0720 	add.w	r7, r7, #32	; 0x20
   102cc:	46bd      	mov	sp, r7
   102ce:	bd80      	pop	{r7, pc}

000102d0 <_ZN5Etape21computeChildDistancesEv>:
void Etape::setDistances(int* distances)
{
    this->distances = distances;
}

void Etape::computeChildDistances(){
   102d0:	b590      	push	{r4, r7, lr}
   102d2:	b085      	sub	sp, #20
   102d4:	af00      	add	r7, sp, #0
   102d6:	6078      	str	r0, [r7, #4]
    this->distances = new int[this->nbChildren];
   102d8:	687b      	ldr	r3, [r7, #4]
   102da:	69db      	ldr	r3, [r3, #28]
   102dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   102e0:	4618      	mov	r0, r3
   102e2:	f7fe f8d1 	bl	e488 <_Znaj>
   102e6:	4603      	mov	r3, r0
   102e8:	461a      	mov	r2, r3
   102ea:	687b      	ldr	r3, [r7, #4]
   102ec:	625a      	str	r2, [r3, #36]

    for(int i=0; i<this->nbChildren; i++)
   102ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   102f2:	60fb      	str	r3, [r7, #12]
   102f4:	e017      	b.n	10326 <_ZN5Etape21computeChildDistancesEv+0x56>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
   102f6:	687b      	ldr	r3, [r7, #4]
   102f8:	6a5a      	ldr	r2, [r3, #36]
   102fa:	68fb      	ldr	r3, [r7, #12]
   102fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10300:	eb02 0403 	add.w	r4, r2, r3
   10304:	687b      	ldr	r3, [r7, #4]
   10306:	681a      	ldr	r2, [r3, #0]
   10308:	68fb      	ldr	r3, [r7, #12]
   1030a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1030e:	4413      	add	r3, r2
   10310:	681b      	ldr	r3, [r3, #0]
   10312:	4618      	mov	r0, r3
   10314:	6879      	ldr	r1, [r7, #4]
   10316:	f7ff fd45 	bl	fda4 <_ZN8Dijkstra20calculDistanceDirectEP5EtapeS1_>
   1031a:	4603      	mov	r3, r0
   1031c:	6023      	str	r3, [r4, #0]
}

void Etape::computeChildDistances(){
    this->distances = new int[this->nbChildren];

    for(int i=0; i<this->nbChildren; i++)
   1031e:	68fb      	ldr	r3, [r7, #12]
   10320:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10324:	60fb      	str	r3, [r7, #12]
   10326:	687b      	ldr	r3, [r7, #4]
   10328:	69da      	ldr	r2, [r3, #28]
   1032a:	68fb      	ldr	r3, [r7, #12]
   1032c:	429a      	cmp	r2, r3
   1032e:	dce2      	bgt.n	102f6 <_ZN5Etape21computeChildDistancesEv+0x26>
    {
        this->distances[i] = Dijkstra::calculDistanceDirect(this->children[i], this);
    }
}
   10330:	f107 0714 	add.w	r7, r7, #20	; 0x14
   10334:	46bd      	mov	sp, r7
   10336:	bd90      	pop	{r4, r7, pc}

00010338 <_ZN5EtapeC1Ev>:
    }

    tableauEtapesTotal[numero] = this;
}

Etape::Etape(){};
   10338:	b580      	push	{r7, lr}
   1033a:	b082      	sub	sp, #8
   1033c:	af00      	add	r7, sp, #0
   1033e:	6078      	str	r0, [r7, #4]
   10340:	687b      	ldr	r3, [r7, #4]
   10342:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10346:	4618      	mov	r0, r3
   10348:	f7fe f944 	bl	e5d4 <_ZN8PositionC1Ev>
   1034c:	687b      	ldr	r3, [r7, #4]
   1034e:	4618      	mov	r0, r3
   10350:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10354:	46bd      	mov	sp, r7
   10356:	bd80      	pop	{r7, pc}

00010358 <_ZN5EtapeC2Ev>:
   10358:	b580      	push	{r7, lr}
   1035a:	b082      	sub	sp, #8
   1035c:	af00      	add	r7, sp, #0
   1035e:	6078      	str	r0, [r7, #4]
   10360:	687b      	ldr	r3, [r7, #4]
   10362:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10366:	4618      	mov	r0, r3
   10368:	f7fe f934 	bl	e5d4 <_ZN8PositionC1Ev>
   1036c:	687b      	ldr	r3, [r7, #4]
   1036e:	4618      	mov	r0, r3
   10370:	f107 0708 	add.w	r7, r7, #8	; 0x8
   10374:	46bd      	mov	sp, r7
   10376:	bd80      	pop	{r7, pc}

00010378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10378:	b580      	push	{r7, lr}
   1037a:	b086      	sub	sp, #24
   1037c:	af00      	add	r7, sp, #0
   1037e:	60f8      	str	r0, [r7, #12]
   10380:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10384:	e880 0006 	stmia.w	r0, {r1, r2}
   10388:	603b      	str	r3, [r7, #0]
   1038a:	68fb      	ldr	r3, [r7, #12]
   1038c:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10390:	4618      	mov	r0, r3
   10392:	f7fe f91f 	bl	e5d4 <_ZN8PositionC1Ev>
{
    this->position = position;
   10396:	68fb      	ldr	r3, [r7, #12]
   10398:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1039c:	4618      	mov	r0, r3
   1039e:	f107 0304 	add.w	r3, r7, #4	; 0x4
   103a2:	e893 0006 	ldmia.w	r3, {r1, r2}
   103a6:	f7fe f9d1 	bl	e74c <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   103aa:	68fa      	ldr	r2, [r7, #12]
   103ac:	f897 3024 	ldrb.w	r3, [r7, #36]
   103b0:	7613      	strb	r3, [r2, #24]
    this->state = state;
   103b2:	68fa      	ldr	r2, [r7, #12]
   103b4:	6abb      	ldr	r3, [r7, #40]
   103b6:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   103b8:	68fa      	ldr	r2, [r7, #12]
   103ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   103be:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   103c0:	68fa      	ldr	r2, [r7, #12]
   103c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   103c6:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   103c8:	68fa      	ldr	r2, [r7, #12]
   103ca:	683b      	ldr	r3, [r7, #0]
   103cc:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   103ce:	68fa      	ldr	r2, [r7, #12]
   103d0:	6afb      	ldr	r3, [r7, #44]
   103d2:	6293      	str	r3, [r2, #40]
    this->score = 0;
   103d4:	68fa      	ldr	r2, [r7, #12]
   103d6:	f04f 0300 	mov.w	r3, #0	; 0x0
   103da:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   103dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   103e0:	617b      	str	r3, [r7, #20]
   103e2:	e00c      	b.n	103fe <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   103e4:	68fb      	ldr	r3, [r7, #12]
   103e6:	681a      	ldr	r2, [r3, #0]
   103e8:	697b      	ldr	r3, [r7, #20]
   103ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
   103ee:	441a      	add	r2, r3
   103f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   103f4:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   103f6:	697b      	ldr	r3, [r7, #20]
   103f8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   103fc:	617b      	str	r3, [r7, #20]
   103fe:	68fb      	ldr	r3, [r7, #12]
   10400:	69da      	ldr	r2, [r3, #28]
   10402:	697b      	ldr	r3, [r7, #20]
   10404:	429a      	cmp	r2, r3
   10406:	dced      	bgt.n	103e4 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   10408:	683b      	ldr	r3, [r7, #0]
   1040a:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1040e:	6a3b      	ldr	r3, [r7, #32]
   10410:	441a      	add	r2, r3
   10412:	68fb      	ldr	r3, [r7, #12]
   10414:	6013      	str	r3, [r2, #0]
}
   10416:	68fb      	ldr	r3, [r7, #12]
   10418:	4618      	mov	r0, r3
   1041a:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1041e:	46bd      	mov	sp, r7
   10420:	bd80      	pop	{r7, pc}
   10422:	46c0      	nop			(mov r8, r8)

00010424 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii>:
#include "dijkstra.h"
#ifndef ROBOTHW
    #include <QDebug>
#endif

Etape::Etape(Position position, /*int nbChildren, */int numero, Etape** tableauEtapesTotal, EtapeType type = POINT_PASSAGE, int state=-1, int nombreEtapesLieesParFinirEtape = 0)
   10424:	b580      	push	{r7, lr}
   10426:	b086      	sub	sp, #24
   10428:	af00      	add	r7, sp, #0
   1042a:	60f8      	str	r0, [r7, #12]
   1042c:	f107 0004 	add.w	r0, r7, #4	; 0x4
   10430:	e880 0006 	stmia.w	r0, {r1, r2}
   10434:	603b      	str	r3, [r7, #0]
   10436:	68fb      	ldr	r3, [r7, #12]
   10438:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1043c:	4618      	mov	r0, r3
   1043e:	f7fe f8c9 	bl	e5d4 <_ZN8PositionC1Ev>
{
    this->position = position;
   10442:	68fb      	ldr	r3, [r7, #12]
   10444:	f103 0308 	add.w	r3, r3, #8	; 0x8
   10448:	4618      	mov	r0, r3
   1044a:	f107 0304 	add.w	r3, r7, #4	; 0x4
   1044e:	e893 0006 	ldmia.w	r3, {r1, r2}
   10452:	f7fe f97b 	bl	e74c <_ZN8PositionaSES_>
    //this->children = new Etape*[nbChildren];
    this->type = type;
   10456:	68fa      	ldr	r2, [r7, #12]
   10458:	f897 3024 	ldrb.w	r3, [r7, #36]
   1045c:	7613      	strb	r3, [r2, #24]
    this->state = state;
   1045e:	68fa      	ldr	r2, [r7, #12]
   10460:	6abb      	ldr	r3, [r7, #40]
   10462:	6113      	str	r3, [r2, #16]
    //this->nbChildren = nbChildren;
    this->nbChildren = 0;
   10464:	68fa      	ldr	r2, [r7, #12]
   10466:	f04f 0300 	mov.w	r3, #0	; 0x0
   1046a:	61d3      	str	r3, [r2, #28]
    this->distance = -1;
   1046c:	68fa      	ldr	r2, [r7, #12]
   1046e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10472:	6153      	str	r3, [r2, #20]
    this->numero = numero;
   10474:	68fa      	ldr	r2, [r7, #12]
   10476:	683b      	ldr	r3, [r7, #0]
   10478:	6213      	str	r3, [r2, #32]
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
   1047a:	68fa      	ldr	r2, [r7, #12]
   1047c:	6afb      	ldr	r3, [r7, #44]
   1047e:	6293      	str	r3, [r2, #40]
    this->score = 0;
   10480:	68fa      	ldr	r2, [r7, #12]
   10482:	f04f 0300 	mov.w	r3, #0	; 0x0
   10486:	6313      	str	r3, [r2, #48]

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   10488:	f04f 0300 	mov.w	r3, #0	; 0x0
   1048c:	617b      	str	r3, [r7, #20]
   1048e:	e00c      	b.n	104aa <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x86>
    {
        this->children[i] = 0;
   10490:	68fb      	ldr	r3, [r7, #12]
   10492:	681a      	ldr	r2, [r3, #0]
   10494:	697b      	ldr	r3, [r7, #20]
   10496:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1049a:	441a      	add	r2, r3
   1049c:	f04f 0300 	mov.w	r3, #0	; 0x0
   104a0:	6013      	str	r3, [r2, #0]
    this->numero = numero;
    this->nombreEtapesLieesParFinirEtape = nombreEtapesLieesParFinirEtape;
    this->score = 0;

    //Initialisation du tableau de voisins à vide
    for(int i = 0 ; i < nbChildren ; i++)
   104a2:	697b      	ldr	r3, [r7, #20]
   104a4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   104a8:	617b      	str	r3, [r7, #20]
   104aa:	68fb      	ldr	r3, [r7, #12]
   104ac:	69da      	ldr	r2, [r3, #28]
   104ae:	697b      	ldr	r3, [r7, #20]
   104b0:	429a      	cmp	r2, r3
   104b2:	dced      	bgt.n	10490 <_ZN5EtapeC2E8PositioniPPS_NS_9EtapeTypeEii+0x6c>
    {
        this->children[i] = 0;
    }

    tableauEtapesTotal[numero] = this;
   104b4:	683b      	ldr	r3, [r7, #0]
   104b6:	ea4f 0283 	mov.w	r2, r3, lsl #2
   104ba:	6a3b      	ldr	r3, [r7, #32]
   104bc:	441a      	add	r2, r3
   104be:	68fb      	ldr	r3, [r7, #12]
   104c0:	6013      	str	r3, [r2, #0]
}
   104c2:	68fb      	ldr	r3, [r7, #12]
   104c4:	4618      	mov	r0, r3
   104c6:	f107 0718 	add.w	r7, r7, #24	; 0x18
   104ca:	46bd      	mov	sp, r7
   104cc:	bd80      	pop	{r7, pc}
   104ce:	46c0      	nop			(mov r8, r8)

000104d0 <_ZN9Krabi201513getScoreEtapeEi>:
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
    }
}

int Krabi2015::getScoreEtape(int i){
   104d0:	b580      	push	{r7, lr}
   104d2:	b084      	sub	sp, #16
   104d4:	af00      	add	r7, sp, #0
   104d6:	60f8      	str	r0, [r7, #12]
   104d8:	60b9      	str	r1, [r7, #8]
    /* TODO : Supprimer le modificateur temporel et inclure directement un coefficient dans le score pour les actions longues
    Plus tard : pourquoi pas changer le système en ayant les FEU etc... fils de Etape, ça éviterait aussi le switch dans updateStock().
    Juste faire attention à comment transmettre le stock à update.
    */
    switch (this->tableauEtapesTotal[i]->getEtapeType()){
   104da:	68fb      	ldr	r3, [r7, #12]
   104dc:	6b5a      	ldr	r2, [r3, #52]
   104de:	68bb      	ldr	r3, [r7, #8]
   104e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   104e4:	4413      	add	r3, r2
   104e6:	681b      	ldr	r3, [r3, #0]
   104e8:	4618      	mov	r0, r3
   104ea:	f7ff fd79 	bl	ffe0 <_ZN5Etape12getEtapeTypeEv>
   104ee:	4603      	mov	r3, r0
   104f0:	2b14      	cmp	r3, #20
   104f2:	d845      	bhi.n	10580 <_ZN9Krabi201513getScoreEtapeEi+0xb0>
   104f4:	a201      	add	r2, pc, #4	(adr r2, 104fc <_ZN9Krabi201513getScoreEtapeEi+0x2c>)
   104f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   104fa:	46c0      	nop			(mov r8, r8)
   104fc:	00010579 	.word	0x00010579
   10500:	00010581 	.word	0x00010581
   10504:	00010581 	.word	0x00010581
   10508:	00010581 	.word	0x00010581
   1050c:	00010581 	.word	0x00010581
   10510:	00010551 	.word	0x00010551
   10514:	00010581 	.word	0x00010581
   10518:	00010581 	.word	0x00010581
   1051c:	00010581 	.word	0x00010581
   10520:	00010581 	.word	0x00010581
   10524:	00010581 	.word	0x00010581
   10528:	00010581 	.word	0x00010581
   1052c:	00010581 	.word	0x00010581
   10530:	00010581 	.word	0x00010581
   10534:	00010581 	.word	0x00010581
   10538:	00010581 	.word	0x00010581
   1053c:	00010581 	.word	0x00010581
   10540:	00010559 	.word	0x00010559
   10544:	00010561 	.word	0x00010561
   10548:	00010571 	.word	0x00010571
   1054c:	00010569 	.word	0x00010569
            case Etape::DEPART :
                return 0;
   10550:	f04f 0300 	mov.w	r3, #0	; 0x0
   10554:	607b      	str	r3, [r7, #4]
   10556:	e016      	b.n	10586 <_ZN9Krabi201513getScoreEtapeEi+0xb6>
                break;
            case Etape::CLAP :
                return 50;
   10558:	f04f 0232 	mov.w	r2, #50	; 0x32
   1055c:	607a      	str	r2, [r7, #4]
   1055e:	e012      	b.n	10586 <_ZN9Krabi201513getScoreEtapeEi+0xb6>
                break;
            case Etape::GOBELET :
                return 40;
   10560:	f04f 0328 	mov.w	r3, #40	; 0x28
   10564:	607b      	str	r3, [r7, #4]
   10566:	e00e      	b.n	10586 <_ZN9Krabi201513getScoreEtapeEi+0xb6>
            case Etape::AMPOULE :
                return 10;
   10568:	f04f 020a 	mov.w	r2, #10	; 0xa
   1056c:	607a      	str	r2, [r7, #4]
   1056e:	e00a      	b.n	10586 <_ZN9Krabi201513getScoreEtapeEi+0xb6>
            case Etape::PIED :
                return 0;//ce devrait être 20
   10570:	f04f 0300 	mov.w	r3, #0	; 0x0
   10574:	607b      	str	r3, [r7, #4]
   10576:	e006      	b.n	10586 <_ZN9Krabi201513getScoreEtapeEi+0xb6>
            case Etape::POINT_PASSAGE :
                return 0;
   10578:	f04f 0200 	mov.w	r2, #0	; 0x0
   1057c:	607a      	str	r2, [r7, #4]
   1057e:	e002      	b.n	10586 <_ZN9Krabi201513getScoreEtapeEi+0xb6>
            default :
                return 0;
   10580:	f04f 0300 	mov.w	r3, #0	; 0x0
   10584:	607b      	str	r3, [r7, #4]
   10586:	687b      	ldr	r3, [r7, #4]
                break;
    }
}
   10588:	4618      	mov	r0, r3
   1058a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1058e:	46bd      	mov	sp, r7
   10590:	bd80      	pop	{r7, pc}
   10592:	46c0      	nop			(mov r8, r8)

00010594 <_ZN9Krabi201511updateStockEv>:

    // Lancer Dijkstra
    startDijkstra();
}

void Krabi2015::updateStock(){
   10594:	b580      	push	{r7, lr}
   10596:	b082      	sub	sp, #8
   10598:	af00      	add	r7, sp, #0
   1059a:	6078      	str	r0, [r7, #4]
    switch(this->tableauEtapes[this->etapeEnCours]->getEtapeType()){
   1059c:	687b      	ldr	r3, [r7, #4]
   1059e:	6b1a      	ldr	r2, [r3, #48]
   105a0:	687b      	ldr	r3, [r7, #4]
   105a2:	699b      	ldr	r3, [r3, #24]
   105a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   105a8:	4413      	add	r3, r2
   105aa:	681b      	ldr	r3, [r3, #0]
   105ac:	4618      	mov	r0, r3
   105ae:	f7ff fd17 	bl	ffe0 <_ZN5Etape12getEtapeTypeEv>
   105b2:	4603      	mov	r3, r0
   105b4:	2b05      	cmp	r3, #5
   105b6:	d10d      	bne.n	105d4 <_ZN9Krabi201511updateStockEv+0x40>
        case Etape::DEPART :
             this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   105b8:	687b      	ldr	r3, [r7, #4]
   105ba:	6b1a      	ldr	r2, [r3, #48]
   105bc:	687b      	ldr	r3, [r7, #4]
   105be:	699b      	ldr	r3, [r3, #24]
   105c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   105c4:	4413      	add	r3, r2
   105c6:	681b      	ldr	r3, [r3, #0]
   105c8:	4618      	mov	r0, r3
   105ca:	f04f 0100 	mov.w	r1, #0	; 0x0
   105ce:	f7ff fd13 	bl	fff8 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
   105d2:	e00c      	b.n	105ee <_ZN9Krabi201511updateStockEv+0x5a>
            break;
        default :
            this->tableauEtapes[this->etapeEnCours]->setEtapeType(Etape::POINT_PASSAGE);
   105d4:	687b      	ldr	r3, [r7, #4]
   105d6:	6b1a      	ldr	r2, [r3, #48]
   105d8:	687b      	ldr	r3, [r7, #4]
   105da:	699b      	ldr	r3, [r3, #24]
   105dc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   105e0:	4413      	add	r3, r2
   105e2:	681b      	ldr	r3, [r3, #0]
   105e4:	4618      	mov	r0, r3
   105e6:	f04f 0100 	mov.w	r1, #0	; 0x0
   105ea:	f7ff fd05 	bl	fff8 <_ZN5Etape12setEtapeTypeENS_9EtapeTypeE>
    }
}
   105ee:	f107 0708 	add.w	r7, r7, #8	; 0x8
   105f2:	46bd      	mov	sp, r7
   105f4:	bd80      	pop	{r7, pc}
   105f6:	46c0      	nop			(mov r8, r8)

000105f8 <_ZN9Krabi2015C1Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isBlue) : StrategieV3(isBlue)
   105f8:	b590      	push	{r4, r7, lr}
   105fa:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
   105fe:	af04      	add	r7, sp, #16
   10600:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10604:	6018      	str	r0, [r3, #0]
   10606:	460a      	mov	r2, r1
   10608:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1060c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10610:	701a      	strb	r2, [r3, #0]
   10612:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10616:	681a      	ldr	r2, [r3, #0]
   10618:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1061c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10620:	781b      	ldrb	r3, [r3, #0]
   10622:	4610      	mov	r0, r2
   10624:	4619      	mov	r1, r3
   10626:	f004 fddd 	bl	151e4 <_ZN11StrategieV3C2Eb>
   1062a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1062e:	681a      	ldr	r2, [r3, #0]
   10630:	f8df 3b80 	ldr.w	r3, [pc, #2944]	; 111b4 <_ZN9Krabi2015C1Eb+0xbbc>
   10634:	6013      	str	r3, [r2, #0]
   10636:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1063a:	681b      	ldr	r3, [r3, #0]
   1063c:	f103 0348 	add.w	r3, r3, #72	; 0x48
   10640:	607b      	str	r3, [r7, #4]
   10642:	f04f 0302 	mov.w	r3, #2	; 0x2
   10646:	60bb      	str	r3, [r7, #8]
   10648:	e00a      	b.n	10660 <_ZN9Krabi2015C1Eb+0x68>
   1064a:	6878      	ldr	r0, [r7, #4]
   1064c:	f7fe ff6c 	bl	f528 <_ZN4ClapC1Ev>
   10650:	687b      	ldr	r3, [r7, #4]
   10652:	f103 0328 	add.w	r3, r3, #40	; 0x28
   10656:	607b      	str	r3, [r7, #4]
   10658:	68bb      	ldr	r3, [r7, #8]
   1065a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1065e:	60bb      	str	r3, [r7, #8]
   10660:	68bb      	ldr	r3, [r7, #8]
   10662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   10666:	d1f0      	bne.n	1064a <_ZN9Krabi2015C1Eb+0x52>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   10668:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1066c:	681a      	ldr	r2, [r3, #0]
   1066e:	f04f 031a 	mov.w	r3, #26	; 0x1a
   10672:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   10674:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10678:	681a      	ldr	r2, [r3, #0]
   1067a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1067e:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   10680:	f04f 0068 	mov.w	r0, #104	; 0x68
   10684:	f7fd ff00 	bl	e488 <_Znaj>
   10688:	4603      	mov	r3, r0
   1068a:	461a      	mov	r2, r3
   1068c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10690:	681b      	ldr	r3, [r3, #0]
   10692:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   10694:	f04f 0068 	mov.w	r0, #104	; 0x68
   10698:	f7fd fef6 	bl	e488 <_Znaj>
   1069c:	4603      	mov	r3, r0
   1069e:	461a      	mov	r2, r3
   106a0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   106a4:	681b      	ldr	r3, [r3, #0]
   106a6:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   106a8:	f44f 609d 	mov.w	r0, #1256	; 0x4e8
   106ac:	f7fd feec 	bl	e488 <_Znaj>
   106b0:	4603      	mov	r3, r0
   106b2:	60fb      	str	r3, [r7, #12]
   106b4:	68fb      	ldr	r3, [r7, #12]
   106b6:	2b00      	cmp	r3, #0
   106b8:	d03c      	beq.n	10734 <_ZN9Krabi2015C1Eb+0x13c>
   106ba:	68fb      	ldr	r3, [r7, #12]
   106bc:	f103 0308 	add.w	r3, r3, #8	; 0x8
   106c0:	617b      	str	r3, [r7, #20]
   106c2:	697b      	ldr	r3, [r7, #20]
   106c4:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   106c8:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   106cc:	f04f 0330 	mov.w	r3, #48	; 0x30
   106d0:	6013      	str	r3, [r2, #0]
   106d2:	697b      	ldr	r3, [r7, #20]
   106d4:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   106d8:	f04f 031a 	mov.w	r3, #26	; 0x1a
   106dc:	6013      	str	r3, [r2, #0]
   106de:	697b      	ldr	r3, [r7, #20]
   106e0:	61bb      	str	r3, [r7, #24]
   106e2:	f04f 0319 	mov.w	r3, #25	; 0x19
   106e6:	61fb      	str	r3, [r7, #28]
   106e8:	e01d      	b.n	10726 <_ZN9Krabi2015C1Eb+0x12e>
   106ea:	f507 73b2 	add.w	r3, r7, #356	; 0x164
   106ee:	4618      	mov	r0, r3
   106f0:	f8df 1ac4 	ldr.w	r1, [pc, #2756]	; 111b8 <_ZN9Krabi2015C1Eb+0xbc0>
   106f4:	f8df 2ac0 	ldr.w	r2, [pc, #2752]	; 111b8 <_ZN9Krabi2015C1Eb+0xbc0>
   106f8:	f04f 0301 	mov.w	r3, #1	; 0x1
   106fc:	f7fd ff92 	bl	e624 <_ZN8PositionC1Effb>
   10700:	f507 72b2 	add.w	r2, r7, #356	; 0x164
   10704:	f8df 3ab4 	ldr.w	r3, [pc, #2740]	; 111bc <_ZN9Krabi2015C1Eb+0xbc4>
   10708:	9300      	str	r3, [sp, #0]
   1070a:	69b8      	ldr	r0, [r7, #24]
   1070c:	ca06      	ldmia	r2!, {r1, r2}
   1070e:	f04f 0300 	mov.w	r3, #0	; 0x0
   10712:	f7fe fcad 	bl	f070 <_ZN10ActionGoToC1E8Positionbf>
   10716:	69bb      	ldr	r3, [r7, #24]
   10718:	f103 0330 	add.w	r3, r3, #48	; 0x30
   1071c:	61bb      	str	r3, [r7, #24]
   1071e:	69fb      	ldr	r3, [r7, #28]
   10720:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10724:	61fb      	str	r3, [r7, #28]
   10726:	69fb      	ldr	r3, [r7, #28]
   10728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1072c:	d1dd      	bne.n	106ea <_ZN9Krabi2015C1Eb+0xf2>
   1072e:	697b      	ldr	r3, [r7, #20]
   10730:	613b      	str	r3, [r7, #16]
   10732:	e001      	b.n	10738 <_ZN9Krabi2015C1Eb+0x140>
   10734:	68fb      	ldr	r3, [r7, #12]
   10736:	613b      	str	r3, [r7, #16]
   10738:	693a      	ldr	r2, [r7, #16]
   1073a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1073e:	681b      	ldr	r3, [r3, #0]
   10740:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   10742:	f04f 0300 	mov.w	r3, #0	; 0x0
   10746:	f8c7 32ac 	str.w	r3, [r7, #684]

    // Création des étapes
    //arguments : Position, tableau des etapes liées, nombre d'étapes liées, numéro de l'étape, type d'étape, état de l'étape, nombreEtapesLieesParFinirEtape
    //Toutes ces étapes sont créées pour isBlue = isYellow
    int isYellow=isBlue;
   1074a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1074e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   10752:	781b      	ldrb	r3, [r3, #0]
   10754:	f8c7 32b0 	str.w	r3, [r7, #688]
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   10758:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   1075c:	2b00      	cmp	r3, #0
   1075e:	bf0c      	ite	eq
   10760:	2300      	moveq	r3, #0
   10762:	2301      	movne	r3, #1
   10764:	fa5f fc83 	uxtb.w	ip, r3
   10768:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
   1076c:	4618      	mov	r0, r3
   1076e:	f8df 1a50 	ldr.w	r1, [pc, #2640]	; 111c0 <_ZN9Krabi2015C1Eb+0xbc8>
   10772:	f8df 2a50 	ldr.w	r2, [pc, #2640]	; 111c4 <_ZN9Krabi2015C1Eb+0xbcc>
   10776:	4663      	mov	r3, ip
   10778:	f7fd ff54 	bl	e624 <_ZN8PositionC1Effb>
   1077c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10780:	623b      	str	r3, [r7, #32]
   10782:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10786:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1078a:	f8c7 32ac 	str.w	r3, [r7, #684]
   1078e:	f04f 0034 	mov.w	r0, #52	; 0x34
   10792:	f7fd fde1 	bl	e358 <_Znwj>
   10796:	4603      	mov	r3, r0
   10798:	627b      	str	r3, [r7, #36]
   1079a:	6a7b      	ldr	r3, [r7, #36]
   1079c:	2b00      	cmp	r3, #0
   1079e:	d017      	beq.n	107d0 <_ZN9Krabi2015C1Eb+0x1d8>
   107a0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   107a4:	681b      	ldr	r3, [r3, #0]
   107a6:	6b5b      	ldr	r3, [r3, #52]
   107a8:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
   107ac:	9300      	str	r3, [sp, #0]
   107ae:	f04f 0305 	mov.w	r3, #5	; 0x5
   107b2:	9301      	str	r3, [sp, #4]
   107b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   107b8:	9302      	str	r3, [sp, #8]
   107ba:	f04f 0300 	mov.w	r3, #0	; 0x0
   107be:	9303      	str	r3, [sp, #12]
   107c0:	6a78      	ldr	r0, [r7, #36]
   107c2:	ca06      	ldmia	r2!, {r1, r2}
   107c4:	6a3b      	ldr	r3, [r7, #32]
   107c6:	f7ff fdd7 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   107ca:	6a7b      	ldr	r3, [r7, #36]
   107cc:	62bb      	str	r3, [r7, #40]
   107ce:	e001      	b.n	107d4 <_ZN9Krabi2015C1Eb+0x1dc>
   107d0:	6a7b      	ldr	r3, [r7, #36]
   107d2:	62bb      	str	r3, [r7, #40]
   107d4:	6abb      	ldr	r3, [r7, #40]
   107d6:	f8c7 32b4 	str.w	r3, [r7, #692]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   107da:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   107de:	2b00      	cmp	r3, #0
   107e0:	bf0c      	ite	eq
   107e2:	2300      	moveq	r3, #0
   107e4:	2301      	movne	r3, #1
   107e6:	fa5f fc83 	uxtb.w	ip, r3
   107ea:	f507 73ba 	add.w	r3, r7, #372	; 0x174
   107ee:	4618      	mov	r0, r3
   107f0:	f8df 19d4 	ldr.w	r1, [pc, #2516]	; 111c8 <_ZN9Krabi2015C1Eb+0xbd0>
   107f4:	f8df 29cc 	ldr.w	r2, [pc, #2508]	; 111c4 <_ZN9Krabi2015C1Eb+0xbcc>
   107f8:	4663      	mov	r3, ip
   107fa:	f7fd ff13 	bl	e624 <_ZN8PositionC1Effb>
   107fe:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10802:	62fb      	str	r3, [r7, #44]
   10804:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10808:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1080c:	f8c7 32ac 	str.w	r3, [r7, #684]
   10810:	f04f 0034 	mov.w	r0, #52	; 0x34
   10814:	f7fd fda0 	bl	e358 <_Znwj>
   10818:	4603      	mov	r3, r0
   1081a:	633b      	str	r3, [r7, #48]
   1081c:	6b3b      	ldr	r3, [r7, #48]
   1081e:	2b00      	cmp	r3, #0
   10820:	d017      	beq.n	10852 <_ZN9Krabi2015C1Eb+0x25a>
   10822:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10826:	681b      	ldr	r3, [r3, #0]
   10828:	6b5b      	ldr	r3, [r3, #52]
   1082a:	f507 72ba 	add.w	r2, r7, #372	; 0x174
   1082e:	9300      	str	r3, [sp, #0]
   10830:	f04f 0300 	mov.w	r3, #0	; 0x0
   10834:	9301      	str	r3, [sp, #4]
   10836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1083a:	9302      	str	r3, [sp, #8]
   1083c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10840:	9303      	str	r3, [sp, #12]
   10842:	6b38      	ldr	r0, [r7, #48]
   10844:	ca06      	ldmia	r2!, {r1, r2}
   10846:	6afb      	ldr	r3, [r7, #44]
   10848:	f7ff fd96 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1084c:	6b3b      	ldr	r3, [r7, #48]
   1084e:	637b      	str	r3, [r7, #52]
   10850:	e001      	b.n	10856 <_ZN9Krabi2015C1Eb+0x25e>
   10852:	6b3b      	ldr	r3, [r7, #48]
   10854:	637b      	str	r3, [r7, #52]
   10856:	6b7b      	ldr	r3, [r7, #52]
   10858:	f8c7 32b8 	str.w	r3, [r7, #696]
    Etape* etape2 = new Etape(Position(836, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   1085c:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10860:	2b00      	cmp	r3, #0
   10862:	bf0c      	ite	eq
   10864:	2300      	moveq	r3, #0
   10866:	2301      	movne	r3, #1
   10868:	fa5f fc83 	uxtb.w	ip, r3
   1086c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
   10870:	4618      	mov	r0, r3
   10872:	f8df 1958 	ldr.w	r1, [pc, #2392]	; 111cc <_ZN9Krabi2015C1Eb+0xbd4>
   10876:	f8df 2958 	ldr.w	r2, [pc, #2392]	; 111d0 <_ZN9Krabi2015C1Eb+0xbd8>
   1087a:	4663      	mov	r3, ip
   1087c:	f7fd fed2 	bl	e624 <_ZN8PositionC1Effb>
   10880:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10884:	63bb      	str	r3, [r7, #56]
   10886:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1088a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1088e:	f8c7 32ac 	str.w	r3, [r7, #684]
   10892:	f04f 0034 	mov.w	r0, #52	; 0x34
   10896:	f7fd fd5f 	bl	e358 <_Znwj>
   1089a:	4603      	mov	r3, r0
   1089c:	63fb      	str	r3, [r7, #60]
   1089e:	6bfb      	ldr	r3, [r7, #60]
   108a0:	2b00      	cmp	r3, #0
   108a2:	d017      	beq.n	108d4 <_ZN9Krabi2015C1Eb+0x2dc>
   108a4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   108a8:	681b      	ldr	r3, [r3, #0]
   108aa:	6b5b      	ldr	r3, [r3, #52]
   108ac:	f507 72be 	add.w	r2, r7, #380	; 0x17c
   108b0:	9300      	str	r3, [sp, #0]
   108b2:	f04f 0311 	mov.w	r3, #17	; 0x11
   108b6:	9301      	str	r3, [sp, #4]
   108b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   108bc:	9302      	str	r3, [sp, #8]
   108be:	f04f 0300 	mov.w	r3, #0	; 0x0
   108c2:	9303      	str	r3, [sp, #12]
   108c4:	6bf8      	ldr	r0, [r7, #60]
   108c6:	ca06      	ldmia	r2!, {r1, r2}
   108c8:	6bbb      	ldr	r3, [r7, #56]
   108ca:	f7ff fd55 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   108ce:	6bfb      	ldr	r3, [r7, #60]
   108d0:	643b      	str	r3, [r7, #64]
   108d2:	e001      	b.n	108d8 <_ZN9Krabi2015C1Eb+0x2e0>
   108d4:	6bfb      	ldr	r3, [r7, #60]
   108d6:	643b      	str	r3, [r7, #64]
   108d8:	6c3b      	ldr	r3, [r7, #64]
   108da:	f8c7 32bc 	str.w	r3, [r7, #700]
    Etape* etape3 = new Etape(Position(1000, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   108de:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   108e2:	2b00      	cmp	r3, #0
   108e4:	bf0c      	ite	eq
   108e6:	2300      	moveq	r3, #0
   108e8:	2301      	movne	r3, #1
   108ea:	fa5f fc83 	uxtb.w	ip, r3
   108ee:	f507 73c2 	add.w	r3, r7, #388	; 0x184
   108f2:	4618      	mov	r0, r3
   108f4:	f8df 18cc 	ldr.w	r1, [pc, #2252]	; 111c4 <_ZN9Krabi2015C1Eb+0xbcc>
   108f8:	f8df 28d4 	ldr.w	r2, [pc, #2260]	; 111d0 <_ZN9Krabi2015C1Eb+0xbd8>
   108fc:	4663      	mov	r3, ip
   108fe:	f7fd fe91 	bl	e624 <_ZN8PositionC1Effb>
   10902:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10906:	647b      	str	r3, [r7, #68]
   10908:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1090c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10910:	f8c7 32ac 	str.w	r3, [r7, #684]
   10914:	f04f 0034 	mov.w	r0, #52	; 0x34
   10918:	f7fd fd1e 	bl	e358 <_Znwj>
   1091c:	4603      	mov	r3, r0
   1091e:	64bb      	str	r3, [r7, #72]
   10920:	6cbb      	ldr	r3, [r7, #72]
   10922:	2b00      	cmp	r3, #0
   10924:	d017      	beq.n	10956 <_ZN9Krabi2015C1Eb+0x35e>
   10926:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1092a:	681b      	ldr	r3, [r3, #0]
   1092c:	6b5b      	ldr	r3, [r3, #52]
   1092e:	f507 72c2 	add.w	r2, r7, #388	; 0x184
   10932:	9300      	str	r3, [sp, #0]
   10934:	f04f 0300 	mov.w	r3, #0	; 0x0
   10938:	9301      	str	r3, [sp, #4]
   1093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1093e:	9302      	str	r3, [sp, #8]
   10940:	f04f 0300 	mov.w	r3, #0	; 0x0
   10944:	9303      	str	r3, [sp, #12]
   10946:	6cb8      	ldr	r0, [r7, #72]
   10948:	ca06      	ldmia	r2!, {r1, r2}
   1094a:	6c7b      	ldr	r3, [r7, #68]
   1094c:	f7ff fd14 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10950:	6cbb      	ldr	r3, [r7, #72]
   10952:	64fb      	str	r3, [r7, #76]
   10954:	e001      	b.n	1095a <_ZN9Krabi2015C1Eb+0x362>
   10956:	6cbb      	ldr	r3, [r7, #72]
   10958:	64fb      	str	r3, [r7, #76]
   1095a:	6cfb      	ldr	r3, [r7, #76]
   1095c:	f8c7 32c0 	str.w	r3, [r7, #704]
    Etape* etape4 = new Etape(Position(236, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10960:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10964:	2b00      	cmp	r3, #0
   10966:	bf0c      	ite	eq
   10968:	2300      	moveq	r3, #0
   1096a:	2301      	movne	r3, #1
   1096c:	fa5f fc83 	uxtb.w	ip, r3
   10970:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
   10974:	4618      	mov	r0, r3
   10976:	f8df 185c 	ldr.w	r1, [pc, #2140]	; 111d4 <_ZN9Krabi2015C1Eb+0xbdc>
   1097a:	f8df 2854 	ldr.w	r2, [pc, #2132]	; 111d0 <_ZN9Krabi2015C1Eb+0xbd8>
   1097e:	4663      	mov	r3, ip
   10980:	f7fd fe50 	bl	e624 <_ZN8PositionC1Effb>
   10984:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10988:	653b      	str	r3, [r7, #80]
   1098a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1098e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10992:	f8c7 32ac 	str.w	r3, [r7, #684]
   10996:	f04f 0034 	mov.w	r0, #52	; 0x34
   1099a:	f7fd fcdd 	bl	e358 <_Znwj>
   1099e:	4603      	mov	r3, r0
   109a0:	657b      	str	r3, [r7, #84]
   109a2:	6d7b      	ldr	r3, [r7, #84]
   109a4:	2b00      	cmp	r3, #0
   109a6:	d017      	beq.n	109d8 <_ZN9Krabi2015C1Eb+0x3e0>
   109a8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   109ac:	681b      	ldr	r3, [r3, #0]
   109ae:	6b5b      	ldr	r3, [r3, #52]
   109b0:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
   109b4:	9300      	str	r3, [sp, #0]
   109b6:	f04f 0311 	mov.w	r3, #17	; 0x11
   109ba:	9301      	str	r3, [sp, #4]
   109bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   109c0:	9302      	str	r3, [sp, #8]
   109c2:	f04f 0300 	mov.w	r3, #0	; 0x0
   109c6:	9303      	str	r3, [sp, #12]
   109c8:	6d78      	ldr	r0, [r7, #84]
   109ca:	ca06      	ldmia	r2!, {r1, r2}
   109cc:	6d3b      	ldr	r3, [r7, #80]
   109ce:	f7ff fcd3 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   109d2:	6d7b      	ldr	r3, [r7, #84]
   109d4:	65bb      	str	r3, [r7, #88]
   109d6:	e001      	b.n	109dc <_ZN9Krabi2015C1Eb+0x3e4>
   109d8:	6d7b      	ldr	r3, [r7, #84]
   109da:	65bb      	str	r3, [r7, #88]
   109dc:	6dbb      	ldr	r3, [r7, #88]
   109de:	f8c7 32c4 	str.w	r3, [r7, #708]
    Etape* etape5 = new Etape(Position(400, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   109e2:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   109e6:	2b00      	cmp	r3, #0
   109e8:	bf0c      	ite	eq
   109ea:	2300      	moveq	r3, #0
   109ec:	2301      	movne	r3, #1
   109ee:	fa5f fc83 	uxtb.w	ip, r3
   109f2:	f507 73ca 	add.w	r3, r7, #404	; 0x194
   109f6:	4618      	mov	r0, r3
   109f8:	f8df 17dc 	ldr.w	r1, [pc, #2012]	; 111d8 <_ZN9Krabi2015C1Eb+0xbe0>
   109fc:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 111d0 <_ZN9Krabi2015C1Eb+0xbd8>
   10a00:	4663      	mov	r3, ip
   10a02:	f7fd fe0f 	bl	e624 <_ZN8PositionC1Effb>
   10a06:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10a0a:	65fb      	str	r3, [r7, #92]
   10a0c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10a10:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10a14:	f8c7 32ac 	str.w	r3, [r7, #684]
   10a18:	f04f 0034 	mov.w	r0, #52	; 0x34
   10a1c:	f7fd fc9c 	bl	e358 <_Znwj>
   10a20:	4603      	mov	r3, r0
   10a22:	663b      	str	r3, [r7, #96]
   10a24:	6e3b      	ldr	r3, [r7, #96]
   10a26:	2b00      	cmp	r3, #0
   10a28:	d017      	beq.n	10a5a <_ZN9Krabi2015C1Eb+0x462>
   10a2a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10a2e:	681b      	ldr	r3, [r3, #0]
   10a30:	6b5b      	ldr	r3, [r3, #52]
   10a32:	f507 72ca 	add.w	r2, r7, #404	; 0x194
   10a36:	9300      	str	r3, [sp, #0]
   10a38:	f04f 0300 	mov.w	r3, #0	; 0x0
   10a3c:	9301      	str	r3, [sp, #4]
   10a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10a42:	9302      	str	r3, [sp, #8]
   10a44:	f04f 0300 	mov.w	r3, #0	; 0x0
   10a48:	9303      	str	r3, [sp, #12]
   10a4a:	6e38      	ldr	r0, [r7, #96]
   10a4c:	ca06      	ldmia	r2!, {r1, r2}
   10a4e:	6dfb      	ldr	r3, [r7, #92]
   10a50:	f7ff fc92 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10a54:	6e3b      	ldr	r3, [r7, #96]
   10a56:	667b      	str	r3, [r7, #100]
   10a58:	e001      	b.n	10a5e <_ZN9Krabi2015C1Eb+0x466>
   10a5a:	6e3b      	ldr	r3, [r7, #96]
   10a5c:	667b      	str	r3, [r7, #100]
   10a5e:	6e7b      	ldr	r3, [r7, #100]
   10a60:	f8c7 32c8 	str.w	r3, [r7, #712]
    Etape* etape6 = new Etape(Position(2500, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   10a64:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10a68:	2b00      	cmp	r3, #0
   10a6a:	bf0c      	ite	eq
   10a6c:	2300      	moveq	r3, #0
   10a6e:	2301      	movne	r3, #1
   10a70:	fa5f fc83 	uxtb.w	ip, r3
   10a74:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
   10a78:	4618      	mov	r0, r3
   10a7a:	f8df 1760 	ldr.w	r1, [pc, #1888]	; 111dc <_ZN9Krabi2015C1Eb+0xbe4>
   10a7e:	f8df 2750 	ldr.w	r2, [pc, #1872]	; 111d0 <_ZN9Krabi2015C1Eb+0xbd8>
   10a82:	4663      	mov	r3, ip
   10a84:	f7fd fdce 	bl	e624 <_ZN8PositionC1Effb>
   10a88:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10a8c:	66bb      	str	r3, [r7, #104]
   10a8e:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10a92:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10a96:	f8c7 32ac 	str.w	r3, [r7, #684]
   10a9a:	f04f 0034 	mov.w	r0, #52	; 0x34
   10a9e:	f7fd fc5b 	bl	e358 <_Znwj>
   10aa2:	4603      	mov	r3, r0
   10aa4:	66fb      	str	r3, [r7, #108]
   10aa6:	6efb      	ldr	r3, [r7, #108]
   10aa8:	2b00      	cmp	r3, #0
   10aaa:	d017      	beq.n	10adc <_ZN9Krabi2015C1Eb+0x4e4>
   10aac:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10ab0:	681b      	ldr	r3, [r3, #0]
   10ab2:	6b5b      	ldr	r3, [r3, #52]
   10ab4:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
   10ab8:	9300      	str	r3, [sp, #0]
   10aba:	f04f 0311 	mov.w	r3, #17	; 0x11
   10abe:	9301      	str	r3, [sp, #4]
   10ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10ac4:	9302      	str	r3, [sp, #8]
   10ac6:	f04f 0300 	mov.w	r3, #0	; 0x0
   10aca:	9303      	str	r3, [sp, #12]
   10acc:	6ef8      	ldr	r0, [r7, #108]
   10ace:	ca06      	ldmia	r2!, {r1, r2}
   10ad0:	6ebb      	ldr	r3, [r7, #104]
   10ad2:	f7ff fc51 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10ad6:	6efb      	ldr	r3, [r7, #108]
   10ad8:	673b      	str	r3, [r7, #112]
   10ada:	e001      	b.n	10ae0 <_ZN9Krabi2015C1Eb+0x4e8>
   10adc:	6efb      	ldr	r3, [r7, #108]
   10ade:	673b      	str	r3, [r7, #112]
   10ae0:	6f3b      	ldr	r3, [r7, #112]
   10ae2:	f8c7 32cc 	str.w	r3, [r7, #716]
    Etape* etape7 = new Etape(Position(2300, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   10ae6:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10aea:	2b00      	cmp	r3, #0
   10aec:	bf0c      	ite	eq
   10aee:	2300      	moveq	r3, #0
   10af0:	2301      	movne	r3, #1
   10af2:	fa5f fc83 	uxtb.w	ip, r3
   10af6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
   10afa:	4618      	mov	r0, r3
   10afc:	f8df 16e0 	ldr.w	r1, [pc, #1760]	; 111e0 <_ZN9Krabi2015C1Eb+0xbe8>
   10b00:	f8df 26cc 	ldr.w	r2, [pc, #1740]	; 111d0 <_ZN9Krabi2015C1Eb+0xbd8>
   10b04:	4663      	mov	r3, ip
   10b06:	f7fd fd8d 	bl	e624 <_ZN8PositionC1Effb>
   10b0a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10b0e:	677b      	str	r3, [r7, #116]
   10b10:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10b14:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10b18:	f8c7 32ac 	str.w	r3, [r7, #684]
   10b1c:	f04f 0034 	mov.w	r0, #52	; 0x34
   10b20:	f7fd fc1a 	bl	e358 <_Znwj>
   10b24:	4603      	mov	r3, r0
   10b26:	67bb      	str	r3, [r7, #120]
   10b28:	6fbb      	ldr	r3, [r7, #120]
   10b2a:	2b00      	cmp	r3, #0
   10b2c:	d017      	beq.n	10b5e <_ZN9Krabi2015C1Eb+0x566>
   10b2e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10b32:	681b      	ldr	r3, [r3, #0]
   10b34:	6b5b      	ldr	r3, [r3, #52]
   10b36:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
   10b3a:	9300      	str	r3, [sp, #0]
   10b3c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b40:	9301      	str	r3, [sp, #4]
   10b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10b46:	9302      	str	r3, [sp, #8]
   10b48:	f04f 0300 	mov.w	r3, #0	; 0x0
   10b4c:	9303      	str	r3, [sp, #12]
   10b4e:	6fb8      	ldr	r0, [r7, #120]
   10b50:	ca06      	ldmia	r2!, {r1, r2}
   10b52:	6f7b      	ldr	r3, [r7, #116]
   10b54:	f7ff fc10 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10b58:	6fbb      	ldr	r3, [r7, #120]
   10b5a:	67fb      	str	r3, [r7, #124]
   10b5c:	e001      	b.n	10b62 <_ZN9Krabi2015C1Eb+0x56a>
   10b5e:	6fbb      	ldr	r3, [r7, #120]
   10b60:	67fb      	str	r3, [r7, #124]
   10b62:	6ffb      	ldr	r3, [r7, #124]
   10b64:	f8c7 32d0 	str.w	r3, [r7, #720]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10b68:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10b6c:	2b00      	cmp	r3, #0
   10b6e:	bf0c      	ite	eq
   10b70:	2300      	moveq	r3, #0
   10b72:	2301      	movne	r3, #1
   10b74:	fa5f fc83 	uxtb.w	ip, r3
   10b78:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
   10b7c:	4618      	mov	r0, r3
   10b7e:	f8df 1640 	ldr.w	r1, [pc, #1600]	; 111c0 <_ZN9Krabi2015C1Eb+0xbc8>
   10b82:	f8df 2660 	ldr.w	r2, [pc, #1632]	; 111e4 <_ZN9Krabi2015C1Eb+0xbec>
   10b86:	4663      	mov	r3, ip
   10b88:	f7fd fd4c 	bl	e624 <_ZN8PositionC1Effb>
   10b8c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10b90:	f8c7 3080 	str.w	r3, [r7, #128]
   10b94:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10b98:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10b9c:	f8c7 32ac 	str.w	r3, [r7, #684]
   10ba0:	f04f 0034 	mov.w	r0, #52	; 0x34
   10ba4:	f7fd fbd8 	bl	e358 <_Znwj>
   10ba8:	4603      	mov	r3, r0
   10baa:	f8c7 3084 	str.w	r3, [r7, #132]
   10bae:	f8d7 3084 	ldr.w	r3, [r7, #132]
   10bb2:	2b00      	cmp	r3, #0
   10bb4:	d01b      	beq.n	10bee <_ZN9Krabi2015C1Eb+0x5f6>
   10bb6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10bba:	681b      	ldr	r3, [r3, #0]
   10bbc:	6b5b      	ldr	r3, [r3, #52]
   10bbe:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
   10bc2:	9300      	str	r3, [sp, #0]
   10bc4:	f04f 0312 	mov.w	r3, #18	; 0x12
   10bc8:	9301      	str	r3, [sp, #4]
   10bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10bce:	9302      	str	r3, [sp, #8]
   10bd0:	f04f 0300 	mov.w	r3, #0	; 0x0
   10bd4:	9303      	str	r3, [sp, #12]
   10bd6:	f8d7 0084 	ldr.w	r0, [r7, #132]
   10bda:	ca06      	ldmia	r2!, {r1, r2}
   10bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]
   10be0:	f7ff fbca 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10be4:	f8d7 3084 	ldr.w	r3, [r7, #132]
   10be8:	f8c7 3088 	str.w	r3, [r7, #136]
   10bec:	e003      	b.n	10bf6 <_ZN9Krabi2015C1Eb+0x5fe>
   10bee:	f8d7 3084 	ldr.w	r3, [r7, #132]
   10bf2:	f8c7 3088 	str.w	r3, [r7, #136]
   10bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]
   10bfa:	f8c7 32d4 	str.w	r3, [r7, #724]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10bfe:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10c02:	2b00      	cmp	r3, #0
   10c04:	bf0c      	ite	eq
   10c06:	2300      	moveq	r3, #0
   10c08:	2301      	movne	r3, #1
   10c0a:	fa5f fc83 	uxtb.w	ip, r3
   10c0e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
   10c12:	4618      	mov	r0, r3
   10c14:	f8df 15d0 	ldr.w	r1, [pc, #1488]	; 111e8 <_ZN9Krabi2015C1Eb+0xbf0>
   10c18:	f8df 25d0 	ldr.w	r2, [pc, #1488]	; 111ec <_ZN9Krabi2015C1Eb+0xbf4>
   10c1c:	4663      	mov	r3, ip
   10c1e:	f7fd fd01 	bl	e624 <_ZN8PositionC1Effb>
   10c22:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10c26:	f8c7 308c 	str.w	r3, [r7, #140]
   10c2a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10c2e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10c32:	f8c7 32ac 	str.w	r3, [r7, #684]
   10c36:	f04f 0034 	mov.w	r0, #52	; 0x34
   10c3a:	f7fd fb8d 	bl	e358 <_Znwj>
   10c3e:	4603      	mov	r3, r0
   10c40:	f8c7 3090 	str.w	r3, [r7, #144]
   10c44:	f8d7 3090 	ldr.w	r3, [r7, #144]
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d01b      	beq.n	10c84 <_ZN9Krabi2015C1Eb+0x68c>
   10c4c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10c50:	681b      	ldr	r3, [r3, #0]
   10c52:	6b5b      	ldr	r3, [r3, #52]
   10c54:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
   10c58:	9300      	str	r3, [sp, #0]
   10c5a:	f04f 0312 	mov.w	r3, #18	; 0x12
   10c5e:	9301      	str	r3, [sp, #4]
   10c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10c64:	9302      	str	r3, [sp, #8]
   10c66:	f04f 0300 	mov.w	r3, #0	; 0x0
   10c6a:	9303      	str	r3, [sp, #12]
   10c6c:	f8d7 0090 	ldr.w	r0, [r7, #144]
   10c70:	ca06      	ldmia	r2!, {r1, r2}
   10c72:	f8d7 308c 	ldr.w	r3, [r7, #140]
   10c76:	f7ff fb7f 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]
   10c7e:	f8c7 3094 	str.w	r3, [r7, #148]
   10c82:	e003      	b.n	10c8c <_ZN9Krabi2015C1Eb+0x694>
   10c84:	f8d7 3090 	ldr.w	r3, [r7, #144]
   10c88:	f8c7 3094 	str.w	r3, [r7, #148]
   10c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]
   10c90:	f8c7 32d8 	str.w	r3, [r7, #728]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10c94:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10c98:	2b00      	cmp	r3, #0
   10c9a:	bf0c      	ite	eq
   10c9c:	2300      	moveq	r3, #0
   10c9e:	2301      	movne	r3, #1
   10ca0:	fa5f fc83 	uxtb.w	ip, r3
   10ca4:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
   10ca8:	4618      	mov	r0, r3
   10caa:	f8df 1544 	ldr.w	r1, [pc, #1348]	; 111f0 <_ZN9Krabi2015C1Eb+0xbf8>
   10cae:	f8df 2544 	ldr.w	r2, [pc, #1348]	; 111f4 <_ZN9Krabi2015C1Eb+0xbfc>
   10cb2:	4663      	mov	r3, ip
   10cb4:	f7fd fcb6 	bl	e624 <_ZN8PositionC1Effb>
   10cb8:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10cbc:	f8c7 3098 	str.w	r3, [r7, #152]
   10cc0:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10cc4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10cc8:	f8c7 32ac 	str.w	r3, [r7, #684]
   10ccc:	f04f 0034 	mov.w	r0, #52	; 0x34
   10cd0:	f7fd fb42 	bl	e358 <_Znwj>
   10cd4:	4603      	mov	r3, r0
   10cd6:	f8c7 309c 	str.w	r3, [r7, #156]
   10cda:	f8d7 309c 	ldr.w	r3, [r7, #156]
   10cde:	2b00      	cmp	r3, #0
   10ce0:	d01b      	beq.n	10d1a <_ZN9Krabi2015C1Eb+0x722>
   10ce2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10ce6:	681b      	ldr	r3, [r3, #0]
   10ce8:	6b5b      	ldr	r3, [r3, #52]
   10cea:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
   10cee:	9300      	str	r3, [sp, #0]
   10cf0:	f04f 0312 	mov.w	r3, #18	; 0x12
   10cf4:	9301      	str	r3, [sp, #4]
   10cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10cfa:	9302      	str	r3, [sp, #8]
   10cfc:	f04f 0300 	mov.w	r3, #0	; 0x0
   10d00:	9303      	str	r3, [sp, #12]
   10d02:	f8d7 009c 	ldr.w	r0, [r7, #156]
   10d06:	ca06      	ldmia	r2!, {r1, r2}
   10d08:	f8d7 3098 	ldr.w	r3, [r7, #152]
   10d0c:	f7ff fb34 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10d10:	f8d7 309c 	ldr.w	r3, [r7, #156]
   10d14:	f8c7 30a0 	str.w	r3, [r7, #160]
   10d18:	e003      	b.n	10d22 <_ZN9Krabi2015C1Eb+0x72a>
   10d1a:	f8d7 309c 	ldr.w	r3, [r7, #156]
   10d1e:	f8c7 30a0 	str.w	r3, [r7, #160]
   10d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   10d26:	f8c7 32dc 	str.w	r3, [r7, #732]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10d2a:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10d2e:	2b00      	cmp	r3, #0
   10d30:	bf0c      	ite	eq
   10d32:	2300      	moveq	r3, #0
   10d34:	2301      	movne	r3, #1
   10d36:	fa5f fc83 	uxtb.w	ip, r3
   10d3a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
   10d3e:	4618      	mov	r0, r3
   10d40:	f8df 14b4 	ldr.w	r1, [pc, #1204]	; 111f8 <_ZN9Krabi2015C1Eb+0xc00>
   10d44:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 111ec <_ZN9Krabi2015C1Eb+0xbf4>
   10d48:	4663      	mov	r3, ip
   10d4a:	f7fd fc6b 	bl	e624 <_ZN8PositionC1Effb>
   10d4e:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10d52:	f8c7 30a4 	str.w	r3, [r7, #164]
   10d56:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10d5a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10d5e:	f8c7 32ac 	str.w	r3, [r7, #684]
   10d62:	f04f 0034 	mov.w	r0, #52	; 0x34
   10d66:	f7fd faf7 	bl	e358 <_Znwj>
   10d6a:	4603      	mov	r3, r0
   10d6c:	f8c7 30a8 	str.w	r3, [r7, #168]
   10d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   10d74:	2b00      	cmp	r3, #0
   10d76:	d01b      	beq.n	10db0 <_ZN9Krabi2015C1Eb+0x7b8>
   10d78:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10d7c:	681b      	ldr	r3, [r3, #0]
   10d7e:	6b5b      	ldr	r3, [r3, #52]
   10d80:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
   10d84:	9300      	str	r3, [sp, #0]
   10d86:	f04f 0312 	mov.w	r3, #18	; 0x12
   10d8a:	9301      	str	r3, [sp, #4]
   10d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10d90:	9302      	str	r3, [sp, #8]
   10d92:	f04f 0300 	mov.w	r3, #0	; 0x0
   10d96:	9303      	str	r3, [sp, #12]
   10d98:	f8d7 00a8 	ldr.w	r0, [r7, #168]
   10d9c:	ca06      	ldmia	r2!, {r1, r2}
   10d9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   10da2:	f7ff fae9 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10da6:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   10daa:	f8c7 30ac 	str.w	r3, [r7, #172]
   10dae:	e003      	b.n	10db8 <_ZN9Krabi2015C1Eb+0x7c0>
   10db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   10db4:	f8c7 30ac 	str.w	r3, [r7, #172]
   10db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   10dbc:	f8c7 32e0 	str.w	r3, [r7, #736]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   10dc0:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	bf0c      	ite	eq
   10dc8:	2300      	moveq	r3, #0
   10dca:	2301      	movne	r3, #1
   10dcc:	fa5f fc83 	uxtb.w	ip, r3
   10dd0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
   10dd4:	4618      	mov	r0, r3
   10dd6:	f8df 1424 	ldr.w	r1, [pc, #1060]	; 111fc <_ZN9Krabi2015C1Eb+0xc04>
   10dda:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 111e4 <_ZN9Krabi2015C1Eb+0xbec>
   10dde:	4663      	mov	r3, ip
   10de0:	f7fd fc20 	bl	e624 <_ZN8PositionC1Effb>
   10de4:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10de8:	f8c7 30b0 	str.w	r3, [r7, #176]
   10dec:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10df0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10df4:	f8c7 32ac 	str.w	r3, [r7, #684]
   10df8:	f04f 0034 	mov.w	r0, #52	; 0x34
   10dfc:	f7fd faac 	bl	e358 <_Znwj>
   10e00:	4603      	mov	r3, r0
   10e02:	f8c7 30b4 	str.w	r3, [r7, #180]
   10e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   10e0a:	2b00      	cmp	r3, #0
   10e0c:	d01b      	beq.n	10e46 <_ZN9Krabi2015C1Eb+0x84e>
   10e0e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10e12:	681b      	ldr	r3, [r3, #0]
   10e14:	6b5b      	ldr	r3, [r3, #52]
   10e16:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
   10e1a:	9300      	str	r3, [sp, #0]
   10e1c:	f04f 0312 	mov.w	r3, #18	; 0x12
   10e20:	9301      	str	r3, [sp, #4]
   10e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10e26:	9302      	str	r3, [sp, #8]
   10e28:	f04f 0300 	mov.w	r3, #0	; 0x0
   10e2c:	9303      	str	r3, [sp, #12]
   10e2e:	f8d7 00b4 	ldr.w	r0, [r7, #180]
   10e32:	ca06      	ldmia	r2!, {r1, r2}
   10e34:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   10e38:	f7ff fa9e 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   10e40:	f8c7 30b8 	str.w	r3, [r7, #184]
   10e44:	e003      	b.n	10e4e <_ZN9Krabi2015C1Eb+0x856>
   10e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   10e4a:	f8c7 30b8 	str.w	r3, [r7, #184]
   10e4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   10e52:	f8c7 32e4 	str.w	r3, [r7, #740]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   10e56:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10e5a:	2b00      	cmp	r3, #0
   10e5c:	bf0c      	ite	eq
   10e5e:	2300      	moveq	r3, #0
   10e60:	2301      	movne	r3, #1
   10e62:	fa5f fc83 	uxtb.w	ip, r3
   10e66:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
   10e6a:	4618      	mov	r0, r3
   10e6c:	49e4      	ldr	r1, [pc, #912]	(11200 <_ZN9Krabi2015C1Eb+0xc08>)
   10e6e:	4add      	ldr	r2, [pc, #884]	(111e4 <_ZN9Krabi2015C1Eb+0xbec>)
   10e70:	4663      	mov	r3, ip
   10e72:	f7fd fbd7 	bl	e624 <_ZN8PositionC1Effb>
   10e76:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10e7a:	f8c7 30bc 	str.w	r3, [r7, #188]
   10e7e:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10e82:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10e86:	f8c7 32ac 	str.w	r3, [r7, #684]
   10e8a:	f04f 0034 	mov.w	r0, #52	; 0x34
   10e8e:	f7fd fa63 	bl	e358 <_Znwj>
   10e92:	4603      	mov	r3, r0
   10e94:	f8c7 30c0 	str.w	r3, [r7, #192]
   10e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   10e9c:	2b00      	cmp	r3, #0
   10e9e:	d01b      	beq.n	10ed8 <_ZN9Krabi2015C1Eb+0x8e0>
   10ea0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10ea4:	681b      	ldr	r3, [r3, #0]
   10ea6:	6b5b      	ldr	r3, [r3, #52]
   10ea8:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
   10eac:	9300      	str	r3, [sp, #0]
   10eae:	f04f 0313 	mov.w	r3, #19	; 0x13
   10eb2:	9301      	str	r3, [sp, #4]
   10eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10eb8:	9302      	str	r3, [sp, #8]
   10eba:	f04f 0300 	mov.w	r3, #0	; 0x0
   10ebe:	9303      	str	r3, [sp, #12]
   10ec0:	f8d7 00c0 	ldr.w	r0, [r7, #192]
   10ec4:	ca06      	ldmia	r2!, {r1, r2}
   10ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   10eca:	f7ff fa55 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   10ed2:	f8c7 30c4 	str.w	r3, [r7, #196]
   10ed6:	e003      	b.n	10ee0 <_ZN9Krabi2015C1Eb+0x8e8>
   10ed8:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   10edc:	f8c7 30c4 	str.w	r3, [r7, #196]
   10ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   10ee4:	f8c7 32e8 	str.w	r3, [r7, #744]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   10ee8:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10eec:	2b00      	cmp	r3, #0
   10eee:	bf0c      	ite	eq
   10ef0:	2300      	moveq	r3, #0
   10ef2:	2301      	movne	r3, #1
   10ef4:	fa5f fc83 	uxtb.w	ip, r3
   10ef8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
   10efc:	4618      	mov	r0, r3
   10efe:	49c0      	ldr	r1, [pc, #768]	(11200 <_ZN9Krabi2015C1Eb+0xc08>)
   10f00:	4ac0      	ldr	r2, [pc, #768]	(11204 <_ZN9Krabi2015C1Eb+0xc0c>)
   10f02:	4663      	mov	r3, ip
   10f04:	f7fd fb8e 	bl	e624 <_ZN8PositionC1Effb>
   10f08:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10f0c:	f8c7 30c8 	str.w	r3, [r7, #200]
   10f10:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10f14:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10f18:	f8c7 32ac 	str.w	r3, [r7, #684]
   10f1c:	f04f 0034 	mov.w	r0, #52	; 0x34
   10f20:	f7fd fa1a 	bl	e358 <_Znwj>
   10f24:	4603      	mov	r3, r0
   10f26:	f8c7 30cc 	str.w	r3, [r7, #204]
   10f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   10f2e:	2b00      	cmp	r3, #0
   10f30:	d01b      	beq.n	10f6a <_ZN9Krabi2015C1Eb+0x972>
   10f32:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10f36:	681b      	ldr	r3, [r3, #0]
   10f38:	6b5b      	ldr	r3, [r3, #52]
   10f3a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
   10f3e:	9300      	str	r3, [sp, #0]
   10f40:	f04f 0313 	mov.w	r3, #19	; 0x13
   10f44:	9301      	str	r3, [sp, #4]
   10f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10f4a:	9302      	str	r3, [sp, #8]
   10f4c:	f04f 0300 	mov.w	r3, #0	; 0x0
   10f50:	9303      	str	r3, [sp, #12]
   10f52:	f8d7 00cc 	ldr.w	r0, [r7, #204]
   10f56:	ca06      	ldmia	r2!, {r1, r2}
   10f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   10f5c:	f7ff fa0c 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10f60:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   10f64:	f8c7 30d0 	str.w	r3, [r7, #208]
   10f68:	e003      	b.n	10f72 <_ZN9Krabi2015C1Eb+0x97a>
   10f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   10f6e:	f8c7 30d0 	str.w	r3, [r7, #208]
   10f72:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   10f76:	f8c7 32ec 	str.w	r3, [r7, #748]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   10f7a:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   10f7e:	2b00      	cmp	r3, #0
   10f80:	bf0c      	ite	eq
   10f82:	2300      	moveq	r3, #0
   10f84:	2301      	movne	r3, #1
   10f86:	fa5f fc83 	uxtb.w	ip, r3
   10f8a:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
   10f8e:	4618      	mov	r0, r3
   10f90:	499b      	ldr	r1, [pc, #620]	(11200 <_ZN9Krabi2015C1Eb+0xc08>)
   10f92:	4a9d      	ldr	r2, [pc, #628]	(11208 <_ZN9Krabi2015C1Eb+0xc10>)
   10f94:	4663      	mov	r3, ip
   10f96:	f7fd fb45 	bl	e624 <_ZN8PositionC1Effb>
   10f9a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10f9e:	f8c7 30d4 	str.w	r3, [r7, #212]
   10fa2:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   10fa6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   10faa:	f8c7 32ac 	str.w	r3, [r7, #684]
   10fae:	f04f 0034 	mov.w	r0, #52	; 0x34
   10fb2:	f7fd f9d1 	bl	e358 <_Znwj>
   10fb6:	4603      	mov	r3, r0
   10fb8:	f8c7 30d8 	str.w	r3, [r7, #216]
   10fbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   10fc0:	2b00      	cmp	r3, #0
   10fc2:	d01b      	beq.n	10ffc <_ZN9Krabi2015C1Eb+0xa04>
   10fc4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   10fc8:	681b      	ldr	r3, [r3, #0]
   10fca:	6b5b      	ldr	r3, [r3, #52]
   10fcc:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
   10fd0:	9300      	str	r3, [sp, #0]
   10fd2:	f04f 0313 	mov.w	r3, #19	; 0x13
   10fd6:	9301      	str	r3, [sp, #4]
   10fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10fdc:	9302      	str	r3, [sp, #8]
   10fde:	f04f 0300 	mov.w	r3, #0	; 0x0
   10fe2:	9303      	str	r3, [sp, #12]
   10fe4:	f8d7 00d8 	ldr.w	r0, [r7, #216]
   10fe8:	ca06      	ldmia	r2!, {r1, r2}
   10fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   10fee:	f7ff f9c3 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   10ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   10ff6:	f8c7 30dc 	str.w	r3, [r7, #220]
   10ffa:	e003      	b.n	11004 <_ZN9Krabi2015C1Eb+0xa0c>
   10ffc:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   11000:	f8c7 30dc 	str.w	r3, [r7, #220]
   11004:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   11008:	f8c7 32f0 	str.w	r3, [r7, #752]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1100c:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11010:	2b00      	cmp	r3, #0
   11012:	bf0c      	ite	eq
   11014:	2300      	moveq	r3, #0
   11016:	2301      	movne	r3, #1
   11018:	fa5f fc83 	uxtb.w	ip, r3
   1101c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
   11020:	4618      	mov	r0, r3
   11022:	497a      	ldr	r1, [pc, #488]	(1120c <_ZN9Krabi2015C1Eb+0xc14>)
   11024:	4a7a      	ldr	r2, [pc, #488]	(11210 <_ZN9Krabi2015C1Eb+0xc18>)
   11026:	4663      	mov	r3, ip
   11028:	f7fd fafc 	bl	e624 <_ZN8PositionC1Effb>
   1102c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11030:	f8c7 30e0 	str.w	r3, [r7, #224]
   11034:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11038:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1103c:	f8c7 32ac 	str.w	r3, [r7, #684]
   11040:	f04f 0034 	mov.w	r0, #52	; 0x34
   11044:	f7fd f988 	bl	e358 <_Znwj>
   11048:	4603      	mov	r3, r0
   1104a:	f8c7 30e4 	str.w	r3, [r7, #228]
   1104e:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11052:	2b00      	cmp	r3, #0
   11054:	d01b      	beq.n	1108e <_ZN9Krabi2015C1Eb+0xa96>
   11056:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1105a:	681b      	ldr	r3, [r3, #0]
   1105c:	6b5b      	ldr	r3, [r3, #52]
   1105e:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
   11062:	9300      	str	r3, [sp, #0]
   11064:	f04f 0313 	mov.w	r3, #19	; 0x13
   11068:	9301      	str	r3, [sp, #4]
   1106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1106e:	9302      	str	r3, [sp, #8]
   11070:	f04f 0300 	mov.w	r3, #0	; 0x0
   11074:	9303      	str	r3, [sp, #12]
   11076:	f8d7 00e4 	ldr.w	r0, [r7, #228]
   1107a:	ca06      	ldmia	r2!, {r1, r2}
   1107c:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   11080:	f7ff f97a 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11084:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11088:	f8c7 30e8 	str.w	r3, [r7, #232]
   1108c:	e003      	b.n	11096 <_ZN9Krabi2015C1Eb+0xa9e>
   1108e:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   11092:	f8c7 30e8 	str.w	r3, [r7, #232]
   11096:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   1109a:	f8c7 32f4 	str.w	r3, [r7, #756]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1109e:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   110a2:	2b00      	cmp	r3, #0
   110a4:	bf0c      	ite	eq
   110a6:	2300      	moveq	r3, #0
   110a8:	2301      	movne	r3, #1
   110aa:	fa5f fc83 	uxtb.w	ip, r3
   110ae:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
   110b2:	4618      	mov	r0, r3
   110b4:	4955      	ldr	r1, [pc, #340]	(1120c <_ZN9Krabi2015C1Eb+0xc14>)
   110b6:	4a54      	ldr	r2, [pc, #336]	(11208 <_ZN9Krabi2015C1Eb+0xc10>)
   110b8:	4663      	mov	r3, ip
   110ba:	f7fd fab3 	bl	e624 <_ZN8PositionC1Effb>
   110be:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   110c2:	f8c7 30ec 	str.w	r3, [r7, #236]
   110c6:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   110ca:	f103 0301 	add.w	r3, r3, #1	; 0x1
   110ce:	f8c7 32ac 	str.w	r3, [r7, #684]
   110d2:	f04f 0034 	mov.w	r0, #52	; 0x34
   110d6:	f7fd f93f 	bl	e358 <_Znwj>
   110da:	4603      	mov	r3, r0
   110dc:	f8c7 30f0 	str.w	r3, [r7, #240]
   110e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   110e4:	2b00      	cmp	r3, #0
   110e6:	d01b      	beq.n	11120 <_ZN9Krabi2015C1Eb+0xb28>
   110e8:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   110ec:	681b      	ldr	r3, [r3, #0]
   110ee:	6b5b      	ldr	r3, [r3, #52]
   110f0:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
   110f4:	9300      	str	r3, [sp, #0]
   110f6:	f04f 0313 	mov.w	r3, #19	; 0x13
   110fa:	9301      	str	r3, [sp, #4]
   110fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11100:	9302      	str	r3, [sp, #8]
   11102:	f04f 0300 	mov.w	r3, #0	; 0x0
   11106:	9303      	str	r3, [sp, #12]
   11108:	f8d7 00f0 	ldr.w	r0, [r7, #240]
   1110c:	ca06      	ldmia	r2!, {r1, r2}
   1110e:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   11112:	f7ff f931 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11116:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   1111a:	f8c7 30f4 	str.w	r3, [r7, #244]
   1111e:	e003      	b.n	11128 <_ZN9Krabi2015C1Eb+0xb30>
   11120:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   11124:	f8c7 30f4 	str.w	r3, [r7, #244]
   11128:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   1112c:	f8c7 32f8 	str.w	r3, [r7, #760]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   11130:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11134:	2b00      	cmp	r3, #0
   11136:	bf0c      	ite	eq
   11138:	2300      	moveq	r3, #0
   1113a:	2301      	movne	r3, #1
   1113c:	fa5f fc83 	uxtb.w	ip, r3
   11140:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   11144:	4618      	mov	r0, r3
   11146:	4933      	ldr	r1, [pc, #204]	(11214 <_ZN9Krabi2015C1Eb+0xc1c>)
   11148:	4a33      	ldr	r2, [pc, #204]	(11218 <_ZN9Krabi2015C1Eb+0xc20>)
   1114a:	4663      	mov	r3, ip
   1114c:	f7fd fa6a 	bl	e624 <_ZN8PositionC1Effb>
   11150:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11154:	f8c7 30f8 	str.w	r3, [r7, #248]
   11158:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1115c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11160:	f8c7 32ac 	str.w	r3, [r7, #684]
   11164:	f04f 0034 	mov.w	r0, #52	; 0x34
   11168:	f7fd f8f6 	bl	e358 <_Znwj>
   1116c:	4603      	mov	r3, r0
   1116e:	f8c7 30fc 	str.w	r3, [r7, #252]
   11172:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   11176:	2b00      	cmp	r3, #0
   11178:	d050      	beq.n	1121c <_ZN9Krabi2015C1Eb+0xc24>
   1117a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1117e:	681b      	ldr	r3, [r3, #0]
   11180:	6b5b      	ldr	r3, [r3, #52]
   11182:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
   11186:	9300      	str	r3, [sp, #0]
   11188:	f04f 0313 	mov.w	r3, #19	; 0x13
   1118c:	9301      	str	r3, [sp, #4]
   1118e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11192:	9302      	str	r3, [sp, #8]
   11194:	f04f 0300 	mov.w	r3, #0	; 0x0
   11198:	9303      	str	r3, [sp, #12]
   1119a:	f8d7 00fc 	ldr.w	r0, [r7, #252]
   1119e:	ca06      	ldmia	r2!, {r1, r2}
   111a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   111a4:	f7ff f8e8 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   111a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   111ac:	f8c7 3100 	str.w	r3, [r7, #256]
   111b0:	e038      	b.n	11224 <_ZN9Krabi2015C1Eb+0xc2c>
   111b2:	46c0      	nop			(mov r8, r8)
   111b4:	0001fc48 	.word	0x0001fc48
   111b8:	00000000 	.word	0x00000000
   111bc:	41f00000 	.word	0x41f00000
   111c0:	437a0000 	.word	0x437a0000
   111c4:	447a0000 	.word	0x447a0000
   111c8:	442f0000 	.word	0x442f0000
   111cc:	44510000 	.word	0x44510000
   111d0:	44d48000 	.word	0x44d48000
   111d4:	436c0000 	.word	0x436c0000
   111d8:	43c80000 	.word	0x43c80000
   111dc:	451c4000 	.word	0x451c4000
   111e0:	450fc000 	.word	0x450fc000
   111e4:	44dac000 	.word	0x44dac000
   111e8:	44638000 	.word	0x44638000
   111ec:	444f8000 	.word	0x444f8000
   111f0:	44bb8000 	.word	0x44bb8000
   111f4:	44ce4000 	.word	0x44ce4000
   111f8:	4502a000 	.word	0x4502a000
   111fc:	452be000 	.word	0x452be000
   11200:	42b40000 	.word	0x42b40000
   11204:	44e74000 	.word	0x44e74000
   11208:	43480000 	.word	0x43480000
   1120c:	44548000 	.word	0x44548000
   11210:	42c80000 	.word	0x42c80000
   11214:	44598000 	.word	0x44598000
   11218:	44a96000 	.word	0x44a96000
   1121c:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   11220:	f8c7 3100 	str.w	r3, [r7, #256]
   11224:	f8d7 3100 	ldr.w	r3, [r7, #256]
   11228:	f8c7 32fc 	str.w	r3, [r7, #764]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1122c:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11230:	2b00      	cmp	r3, #0
   11232:	bf0c      	ite	eq
   11234:	2300      	moveq	r3, #0
   11236:	2301      	movne	r3, #1
   11238:	fa5f fc83 	uxtb.w	ip, r3
   1123c:	f507 7301 	add.w	r3, r7, #516	; 0x204
   11240:	4618      	mov	r0, r3
   11242:	f8df 1860 	ldr.w	r1, [pc, #2144]	; 11aa4 <_ZN9Krabi2015C1Eb+0x14ac>
   11246:	f8df 2860 	ldr.w	r2, [pc, #2144]	; 11aa8 <_ZN9Krabi2015C1Eb+0x14b0>
   1124a:	4663      	mov	r3, ip
   1124c:	f7fd f9ea 	bl	e624 <_ZN8PositionC1Effb>
   11250:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11254:	f8c7 3104 	str.w	r3, [r7, #260]
   11258:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1125c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11260:	f8c7 32ac 	str.w	r3, [r7, #684]
   11264:	f04f 0034 	mov.w	r0, #52	; 0x34
   11268:	f7fd f876 	bl	e358 <_Znwj>
   1126c:	4603      	mov	r3, r0
   1126e:	f8c7 3108 	str.w	r3, [r7, #264]
   11272:	f8d7 3108 	ldr.w	r3, [r7, #264]
   11276:	2b00      	cmp	r3, #0
   11278:	d01b      	beq.n	112b2 <_ZN9Krabi2015C1Eb+0xcba>
   1127a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1127e:	681b      	ldr	r3, [r3, #0]
   11280:	6b5b      	ldr	r3, [r3, #52]
   11282:	f507 7201 	add.w	r2, r7, #516	; 0x204
   11286:	9300      	str	r3, [sp, #0]
   11288:	f04f 0313 	mov.w	r3, #19	; 0x13
   1128c:	9301      	str	r3, [sp, #4]
   1128e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11292:	9302      	str	r3, [sp, #8]
   11294:	f04f 0300 	mov.w	r3, #0	; 0x0
   11298:	9303      	str	r3, [sp, #12]
   1129a:	f8d7 0108 	ldr.w	r0, [r7, #264]
   1129e:	ca06      	ldmia	r2!, {r1, r2}
   112a0:	f8d7 3104 	ldr.w	r3, [r7, #260]
   112a4:	f7ff f868 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   112a8:	f8d7 3108 	ldr.w	r3, [r7, #264]
   112ac:	f8c7 310c 	str.w	r3, [r7, #268]
   112b0:	e003      	b.n	112ba <_ZN9Krabi2015C1Eb+0xcc2>
   112b2:	f8d7 3108 	ldr.w	r3, [r7, #264]
   112b6:	f8c7 310c 	str.w	r3, [r7, #268]
   112ba:	f8d7 310c 	ldr.w	r3, [r7, #268]
   112be:	f8c7 3300 	str.w	r3, [r7, #768]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   112c2:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   112c6:	2b00      	cmp	r3, #0
   112c8:	bf0c      	ite	eq
   112ca:	2300      	moveq	r3, #0
   112cc:	2301      	movne	r3, #1
   112ce:	fa5f fc83 	uxtb.w	ip, r3
   112d2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
   112d6:	4618      	mov	r0, r3
   112d8:	f8df 17d0 	ldr.w	r1, [pc, #2000]	; 11aac <_ZN9Krabi2015C1Eb+0x14b4>
   112dc:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 11ab0 <_ZN9Krabi2015C1Eb+0x14b8>
   112e0:	4663      	mov	r3, ip
   112e2:	f7fd f99f 	bl	e624 <_ZN8PositionC1Effb>
   112e6:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   112ea:	f8c7 3110 	str.w	r3, [r7, #272]
   112ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   112f2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   112f6:	f8c7 32ac 	str.w	r3, [r7, #684]
   112fa:	f04f 0034 	mov.w	r0, #52	; 0x34
   112fe:	f7fd f82b 	bl	e358 <_Znwj>
   11302:	4603      	mov	r3, r0
   11304:	f8c7 3114 	str.w	r3, [r7, #276]
   11308:	f8d7 3114 	ldr.w	r3, [r7, #276]
   1130c:	2b00      	cmp	r3, #0
   1130e:	d01b      	beq.n	11348 <_ZN9Krabi2015C1Eb+0xd50>
   11310:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11314:	681b      	ldr	r3, [r3, #0]
   11316:	6b5b      	ldr	r3, [r3, #52]
   11318:	f507 7203 	add.w	r2, r7, #524	; 0x20c
   1131c:	9300      	str	r3, [sp, #0]
   1131e:	f04f 0313 	mov.w	r3, #19	; 0x13
   11322:	9301      	str	r3, [sp, #4]
   11324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11328:	9302      	str	r3, [sp, #8]
   1132a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1132e:	9303      	str	r3, [sp, #12]
   11330:	f8d7 0114 	ldr.w	r0, [r7, #276]
   11334:	ca06      	ldmia	r2!, {r1, r2}
   11336:	f8d7 3110 	ldr.w	r3, [r7, #272]
   1133a:	f7ff f81d 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1133e:	f8d7 3114 	ldr.w	r3, [r7, #276]
   11342:	f8c7 3118 	str.w	r3, [r7, #280]
   11346:	e003      	b.n	11350 <_ZN9Krabi2015C1Eb+0xd58>
   11348:	f8d7 3114 	ldr.w	r3, [r7, #276]
   1134c:	f8c7 3118 	str.w	r3, [r7, #280]
   11350:	f8d7 3118 	ldr.w	r3, [r7, #280]
   11354:	f8c7 3304 	str.w	r3, [r7, #772]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   11358:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   1135c:	2b00      	cmp	r3, #0
   1135e:	bf0c      	ite	eq
   11360:	2300      	moveq	r3, #0
   11362:	2301      	movne	r3, #1
   11364:	fa5f fc83 	uxtb.w	ip, r3
   11368:	f507 7305 	add.w	r3, r7, #532	; 0x214
   1136c:	4618      	mov	r0, r3
   1136e:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 11ab4 <_ZN9Krabi2015C1Eb+0x14bc>
   11372:	f8df 2744 	ldr.w	r2, [pc, #1860]	; 11ab8 <_ZN9Krabi2015C1Eb+0x14c0>
   11376:	4663      	mov	r3, ip
   11378:	f7fd f954 	bl	e624 <_ZN8PositionC1Effb>
   1137c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11380:	f8c7 311c 	str.w	r3, [r7, #284]
   11384:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11388:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1138c:	f8c7 32ac 	str.w	r3, [r7, #684]
   11390:	f04f 0034 	mov.w	r0, #52	; 0x34
   11394:	f7fc ffe0 	bl	e358 <_Znwj>
   11398:	4603      	mov	r3, r0
   1139a:	f8c7 3120 	str.w	r3, [r7, #288]
   1139e:	f8d7 3120 	ldr.w	r3, [r7, #288]
   113a2:	2b00      	cmp	r3, #0
   113a4:	d01b      	beq.n	113de <_ZN9Krabi2015C1Eb+0xde6>
   113a6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	6b5b      	ldr	r3, [r3, #52]
   113ae:	f507 7205 	add.w	r2, r7, #532	; 0x214
   113b2:	9300      	str	r3, [sp, #0]
   113b4:	f04f 0314 	mov.w	r3, #20	; 0x14
   113b8:	9301      	str	r3, [sp, #4]
   113ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   113be:	9302      	str	r3, [sp, #8]
   113c0:	f04f 0300 	mov.w	r3, #0	; 0x0
   113c4:	9303      	str	r3, [sp, #12]
   113c6:	f8d7 0120 	ldr.w	r0, [r7, #288]
   113ca:	ca06      	ldmia	r2!, {r1, r2}
   113cc:	f8d7 311c 	ldr.w	r3, [r7, #284]
   113d0:	f7fe ffd2 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   113d4:	f8d7 3120 	ldr.w	r3, [r7, #288]
   113d8:	f8c7 3124 	str.w	r3, [r7, #292]
   113dc:	e003      	b.n	113e6 <_ZN9Krabi2015C1Eb+0xdee>
   113de:	f8d7 3120 	ldr.w	r3, [r7, #288]
   113e2:	f8c7 3124 	str.w	r3, [r7, #292]
   113e6:	f8d7 3124 	ldr.w	r3, [r7, #292]
   113ea:	f8c7 3308 	str.w	r3, [r7, #776]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   113ee:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   113f2:	2b00      	cmp	r3, #0
   113f4:	bf0c      	ite	eq
   113f6:	2300      	moveq	r3, #0
   113f8:	2301      	movne	r3, #1
   113fa:	fa5f fc83 	uxtb.w	ip, r3
   113fe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
   11402:	4618      	mov	r0, r3
   11404:	f8df 16b4 	ldr.w	r1, [pc, #1716]	; 11abc <_ZN9Krabi2015C1Eb+0x14c4>
   11408:	f8df 26ac 	ldr.w	r2, [pc, #1708]	; 11ab8 <_ZN9Krabi2015C1Eb+0x14c0>
   1140c:	4663      	mov	r3, ip
   1140e:	f7fd f909 	bl	e624 <_ZN8PositionC1Effb>
   11412:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11416:	f8c7 3128 	str.w	r3, [r7, #296]
   1141a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1141e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11422:	f8c7 32ac 	str.w	r3, [r7, #684]
   11426:	f04f 0034 	mov.w	r0, #52	; 0x34
   1142a:	f7fc ff95 	bl	e358 <_Znwj>
   1142e:	4603      	mov	r3, r0
   11430:	f8c7 312c 	str.w	r3, [r7, #300]
   11434:	f8d7 312c 	ldr.w	r3, [r7, #300]
   11438:	2b00      	cmp	r3, #0
   1143a:	d01b      	beq.n	11474 <_ZN9Krabi2015C1Eb+0xe7c>
   1143c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11440:	681b      	ldr	r3, [r3, #0]
   11442:	6b5b      	ldr	r3, [r3, #52]
   11444:	f507 7207 	add.w	r2, r7, #540	; 0x21c
   11448:	9300      	str	r3, [sp, #0]
   1144a:	f04f 0314 	mov.w	r3, #20	; 0x14
   1144e:	9301      	str	r3, [sp, #4]
   11450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11454:	9302      	str	r3, [sp, #8]
   11456:	f04f 0300 	mov.w	r3, #0	; 0x0
   1145a:	9303      	str	r3, [sp, #12]
   1145c:	f8d7 012c 	ldr.w	r0, [r7, #300]
   11460:	ca06      	ldmia	r2!, {r1, r2}
   11462:	f8d7 3128 	ldr.w	r3, [r7, #296]
   11466:	f7fe ff87 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1146a:	f8d7 312c 	ldr.w	r3, [r7, #300]
   1146e:	f8c7 3130 	str.w	r3, [r7, #304]
   11472:	e003      	b.n	1147c <_ZN9Krabi2015C1Eb+0xe84>
   11474:	f8d7 312c 	ldr.w	r3, [r7, #300]
   11478:	f8c7 3130 	str.w	r3, [r7, #304]
   1147c:	f8d7 3130 	ldr.w	r3, [r7, #304]
   11480:	f8c7 330c 	str.w	r3, [r7, #780]
    Etape* etape23 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11484:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11488:	2b00      	cmp	r3, #0
   1148a:	bf0c      	ite	eq
   1148c:	2300      	moveq	r3, #0
   1148e:	2301      	movne	r3, #1
   11490:	fa5f fc83 	uxtb.w	ip, r3
   11494:	f507 7309 	add.w	r3, r7, #548	; 0x224
   11498:	4618      	mov	r0, r3
   1149a:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 11ac0 <_ZN9Krabi2015C1Eb+0x14c8>
   1149e:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 11ac4 <_ZN9Krabi2015C1Eb+0x14cc>
   114a2:	4663      	mov	r3, ip
   114a4:	f7fd f8be 	bl	e624 <_ZN8PositionC1Effb>
   114a8:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   114ac:	f8c7 3134 	str.w	r3, [r7, #308]
   114b0:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   114b4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   114b8:	f8c7 32ac 	str.w	r3, [r7, #684]
   114bc:	f04f 0034 	mov.w	r0, #52	; 0x34
   114c0:	f7fc ff4a 	bl	e358 <_Znwj>
   114c4:	4603      	mov	r3, r0
   114c6:	f8c7 3138 	str.w	r3, [r7, #312]
   114ca:	f8d7 3138 	ldr.w	r3, [r7, #312]
   114ce:	2b00      	cmp	r3, #0
   114d0:	d01c      	beq.n	1150c <_ZN9Krabi2015C1Eb+0xf14>
   114d2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   114d6:	681b      	ldr	r3, [r3, #0]
   114d8:	6b5b      	ldr	r3, [r3, #52]
   114da:	9300      	str	r3, [sp, #0]
   114dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   114e0:	9301      	str	r3, [sp, #4]
   114e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   114e6:	9302      	str	r3, [sp, #8]
   114e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   114ec:	9303      	str	r3, [sp, #12]
   114ee:	f8d7 0138 	ldr.w	r0, [r7, #312]
   114f2:	f507 7309 	add.w	r3, r7, #548	; 0x224
   114f6:	e893 0006 	ldmia.w	r3, {r1, r2}
   114fa:	f8d7 3134 	ldr.w	r3, [r7, #308]
   114fe:	f7fe ff3b 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11502:	f8d7 3138 	ldr.w	r3, [r7, #312]
   11506:	f8c7 313c 	str.w	r3, [r7, #316]
   1150a:	e003      	b.n	11514 <_ZN9Krabi2015C1Eb+0xf1c>
   1150c:	f8d7 3138 	ldr.w	r3, [r7, #312]
   11510:	f8c7 313c 	str.w	r3, [r7, #316]
   11514:	f8d7 313c 	ldr.w	r3, [r7, #316]
   11518:	f8c7 3310 	str.w	r3, [r7, #784]
    Etape* etape24 = new Etape(Position(2800, 1450, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   1151c:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11520:	2b00      	cmp	r3, #0
   11522:	bf0c      	ite	eq
   11524:	2300      	moveq	r3, #0
   11526:	2301      	movne	r3, #1
   11528:	fa5f fc83 	uxtb.w	ip, r3
   1152c:	f507 730b 	add.w	r3, r7, #556	; 0x22c
   11530:	4618      	mov	r0, r3
   11532:	f8df 1594 	ldr.w	r1, [pc, #1428]	; 11ac8 <_ZN9Krabi2015C1Eb+0x14d0>
   11536:	f8df 2594 	ldr.w	r2, [pc, #1428]	; 11acc <_ZN9Krabi2015C1Eb+0x14d4>
   1153a:	4663      	mov	r3, ip
   1153c:	f7fd f872 	bl	e624 <_ZN8PositionC1Effb>
   11540:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11544:	f8c7 3140 	str.w	r3, [r7, #320]
   11548:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1154c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11550:	f8c7 32ac 	str.w	r3, [r7, #684]
   11554:	f04f 0034 	mov.w	r0, #52	; 0x34
   11558:	f7fc fefe 	bl	e358 <_Znwj>
   1155c:	4603      	mov	r3, r0
   1155e:	f8c7 3144 	str.w	r3, [r7, #324]
   11562:	f8d7 3144 	ldr.w	r3, [r7, #324]
   11566:	2b00      	cmp	r3, #0
   11568:	d01c      	beq.n	115a4 <_ZN9Krabi2015C1Eb+0xfac>
   1156a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1156e:	681b      	ldr	r3, [r3, #0]
   11570:	6b5b      	ldr	r3, [r3, #52]
   11572:	9300      	str	r3, [sp, #0]
   11574:	f04f 0300 	mov.w	r3, #0	; 0x0
   11578:	9301      	str	r3, [sp, #4]
   1157a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1157e:	9302      	str	r3, [sp, #8]
   11580:	f04f 0300 	mov.w	r3, #0	; 0x0
   11584:	9303      	str	r3, [sp, #12]
   11586:	f8d7 0144 	ldr.w	r0, [r7, #324]
   1158a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
   1158e:	e893 0006 	ldmia.w	r3, {r1, r2}
   11592:	f8d7 3140 	ldr.w	r3, [r7, #320]
   11596:	f7fe feef 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1159a:	f8d7 3144 	ldr.w	r3, [r7, #324]
   1159e:	f8c7 3148 	str.w	r3, [r7, #328]
   115a2:	e003      	b.n	115ac <_ZN9Krabi2015C1Eb+0xfb4>
   115a4:	f8d7 3144 	ldr.w	r3, [r7, #324]
   115a8:	f8c7 3148 	str.w	r3, [r7, #328]
   115ac:	f8d7 3148 	ldr.w	r3, [r7, #328]
   115b0:	f8c7 3314 	str.w	r3, [r7, #788]
    Etape* etape25 = new Etape(Position(2800, 600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   115b4:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   115b8:	2b00      	cmp	r3, #0
   115ba:	bf0c      	ite	eq
   115bc:	2300      	moveq	r3, #0
   115be:	2301      	movne	r3, #1
   115c0:	fa5f fc83 	uxtb.w	ip, r3
   115c4:	f507 730d 	add.w	r3, r7, #564	; 0x234
   115c8:	4618      	mov	r0, r3
   115ca:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 11ac8 <_ZN9Krabi2015C1Eb+0x14d0>
   115ce:	f8df 2500 	ldr.w	r2, [pc, #1280]	; 11ad0 <_ZN9Krabi2015C1Eb+0x14d8>
   115d2:	4663      	mov	r3, ip
   115d4:	f7fd f826 	bl	e624 <_ZN8PositionC1Effb>
   115d8:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   115dc:	f8c7 314c 	str.w	r3, [r7, #332]
   115e0:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   115e4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   115e8:	f8c7 32ac 	str.w	r3, [r7, #684]
   115ec:	f04f 0034 	mov.w	r0, #52	; 0x34
   115f0:	f7fc feb2 	bl	e358 <_Znwj>
   115f4:	4603      	mov	r3, r0
   115f6:	f8c7 3150 	str.w	r3, [r7, #336]
   115fa:	f8d7 3150 	ldr.w	r3, [r7, #336]
   115fe:	2b00      	cmp	r3, #0
   11600:	d01c      	beq.n	1163c <_ZN9Krabi2015C1Eb+0x1044>
   11602:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11606:	681b      	ldr	r3, [r3, #0]
   11608:	6b5b      	ldr	r3, [r3, #52]
   1160a:	9300      	str	r3, [sp, #0]
   1160c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11610:	9301      	str	r3, [sp, #4]
   11612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11616:	9302      	str	r3, [sp, #8]
   11618:	f04f 0300 	mov.w	r3, #0	; 0x0
   1161c:	9303      	str	r3, [sp, #12]
   1161e:	f8d7 0150 	ldr.w	r0, [r7, #336]
   11622:	f507 730d 	add.w	r3, r7, #564	; 0x234
   11626:	e893 0006 	ldmia.w	r3, {r1, r2}
   1162a:	f8d7 314c 	ldr.w	r3, [r7, #332]
   1162e:	f7fe fea3 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11632:	f8d7 3150 	ldr.w	r3, [r7, #336]
   11636:	f8c7 3154 	str.w	r3, [r7, #340]
   1163a:	e003      	b.n	11644 <_ZN9Krabi2015C1Eb+0x104c>
   1163c:	f8d7 3150 	ldr.w	r3, [r7, #336]
   11640:	f8c7 3154 	str.w	r3, [r7, #340]
   11644:	f8d7 3154 	ldr.w	r3, [r7, #340]
   11648:	f8c7 3318 	str.w	r3, [r7, #792]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   1164c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11650:	f8c7 331c 	str.w	r3, [r7, #796]
   11654:	e06a      	b.n	1172c <_ZN9Krabi2015C1Eb+0x1134>
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   11656:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1165a:	681b      	ldr	r3, [r3, #0]
   1165c:	6b5a      	ldr	r2, [r3, #52]
   1165e:	f8d7 331c 	ldr.w	r3, [r7, #796]
   11662:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11666:	4413      	add	r3, r2
   11668:	681b      	ldr	r3, [r3, #0]
   1166a:	4618      	mov	r0, r3
   1166c:	f7fe fc5c 	bl	ff28 <_ZN5Etape8getStateEv>
   11670:	4603      	mov	r3, r0
   11672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11676:	bf14      	ite	ne
   11678:	2300      	movne	r3, #0
   1167a:	2301      	moveq	r3, #1
   1167c:	b2db      	uxtb	r3, r3
   1167e:	2b00      	cmp	r3, #0
   11680:	d04e      	beq.n	11720 <_ZN9Krabi2015C1Eb+0x1128>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   11682:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11686:	681b      	ldr	r3, [r3, #0]
   11688:	6a99      	ldr	r1, [r3, #40]
   1168a:	f8d7 331c 	ldr.w	r3, [r7, #796]
   1168e:	ea4f 1203 	mov.w	r2, r3, lsl #4
   11692:	ea4f 0382 	mov.w	r3, r2, lsl #2
   11696:	ebc2 0303 	rsb	r3, r2, r3
   1169a:	eb01 0403 	add.w	r4, r1, r3
   1169e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   116a2:	681b      	ldr	r3, [r3, #0]
   116a4:	6b5a      	ldr	r2, [r3, #52]
   116a6:	f8d7 331c 	ldr.w	r3, [r7, #796]
   116aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
   116ae:	4413      	add	r3, r2
   116b0:	681a      	ldr	r2, [r3, #0]
   116b2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
   116b6:	4618      	mov	r0, r3
   116b8:	4611      	mov	r1, r2
   116ba:	f7fe fc21 	bl	ff00 <_ZN5Etape11getPositionEv>
   116be:	f507 720f 	add.w	r2, r7, #572	; 0x23c
   116c2:	f8df 3410 	ldr.w	r3, [pc, #1040]	; 11ad4 <_ZN9Krabi2015C1Eb+0x14dc>
   116c6:	9300      	str	r3, [sp, #0]
   116c8:	4610      	mov	r0, r2
   116ca:	f507 731b 	add.w	r3, r7, #620	; 0x26c
   116ce:	e893 0006 	ldmia.w	r3, {r1, r2}
   116d2:	f04f 0300 	mov.w	r3, #0	; 0x0
   116d6:	f7fd fccb 	bl	f070 <_ZN10ActionGoToC1E8Positionbf>
   116da:	f507 730f 	add.w	r3, r7, #572	; 0x23c
   116de:	4620      	mov	r0, r4
   116e0:	4619      	mov	r1, r3
   116e2:	f009 fa97 	bl	1ac14 <_ZN10ActionGoToaSERKS_>
   116e6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
   116ea:	4618      	mov	r0, r3
   116ec:	f7fd fc88 	bl	f000 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   116f0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   116f4:	681b      	ldr	r3, [r3, #0]
   116f6:	6a5a      	ldr	r2, [r3, #36]
   116f8:	f8d7 331c 	ldr.w	r3, [r7, #796]
   116fc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   11700:	eb02 0003 	add.w	r0, r2, r3
   11704:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11708:	681b      	ldr	r3, [r3, #0]
   1170a:	6a99      	ldr	r1, [r3, #40]
   1170c:	f8d7 331c 	ldr.w	r3, [r7, #796]
   11710:	ea4f 1203 	mov.w	r2, r3, lsl #4
   11714:	ea4f 0382 	mov.w	r3, r2, lsl #2
   11718:	ebc2 0303 	rsb	r3, r2, r3
   1171c:	440b      	add	r3, r1
   1171e:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   11720:	f8d7 331c 	ldr.w	r3, [r7, #796]
   11724:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11728:	f8c7 331c 	str.w	r3, [r7, #796]
   1172c:	f8d7 331c 	ldr.w	r3, [r7, #796]
   11730:	2b19      	cmp	r3, #25
   11732:	dd90      	ble.n	11656 <_ZN9Krabi2015C1Eb+0x105e>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1700, isBlue),Position(1000, 1700, isBlue));
   11734:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11738:	681b      	ldr	r3, [r3, #0]
   1173a:	f103 0448 	add.w	r4, r3, #72	; 0x48
   1173e:	f507 7227 	add.w	r2, r7, #668	; 0x29c
   11742:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11746:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   1174a:	781b      	ldrb	r3, [r3, #0]
   1174c:	4610      	mov	r0, r2
   1174e:	49e2      	ldr	r1, [pc, #904]	(11ad8 <_ZN9Krabi2015C1Eb+0x14e0>)
   11750:	4ae2      	ldr	r2, [pc, #904]	(11adc <_ZN9Krabi2015C1Eb+0x14e4>)
   11752:	f7fc ff67 	bl	e624 <_ZN8PositionC1Effb>
   11756:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
   1175a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1175e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11762:	781b      	ldrb	r3, [r3, #0]
   11764:	4610      	mov	r0, r2
   11766:	49de      	ldr	r1, [pc, #888]	(11ae0 <_ZN9Krabi2015C1Eb+0x14e8>)
   11768:	4adc      	ldr	r2, [pc, #880]	(11adc <_ZN9Krabi2015C1Eb+0x14e4>)
   1176a:	f7fc ff5b 	bl	e624 <_ZN8PositionC1Effb>
   1176e:	f507 721d 	add.w	r2, r7, #628	; 0x274
   11772:	f8d7 32a8 	ldr.w	r3, [r7, #680]
   11776:	9300      	str	r3, [sp, #0]
   11778:	f8d7 32a4 	ldr.w	r3, [r7, #676]
   1177c:	4610      	mov	r0, r2
   1177e:	f507 7227 	add.w	r2, r7, #668	; 0x29c
   11782:	ca06      	ldmia	r2!, {r1, r2}
   11784:	f7fd fe5c 	bl	f440 <_ZN4ClapC1E8PositionS0_>
   11788:	f507 731d 	add.w	r3, r7, #628	; 0x274
   1178c:	4620      	mov	r0, r4
   1178e:	4619      	mov	r1, r3
   11790:	f009 fa6c 	bl	1ac6c <_ZN4ClapaSERKS_>
   11794:	f507 731d 	add.w	r3, r7, #628	; 0x274
   11798:	4618      	mov	r0, r3
   1179a:	f7fd fe19 	bl	f3d0 <_ZN4ClapD1Ev>
    actionEtape[1]= &actionClap[0];
   1179e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   117a2:	681b      	ldr	r3, [r3, #0]
   117a4:	6a5b      	ldr	r3, [r3, #36]
   117a6:	f103 0204 	add.w	r2, r3, #4	; 0x4
   117aa:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   117ae:	681b      	ldr	r3, [r3, #0]
   117b0:	f103 0348 	add.w	r3, r3, #72	; 0x48
   117b4:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   117b6:	f8d7 02b4 	ldr.w	r0, [r7, #692]
   117ba:	f8d7 12b8 	ldr.w	r1, [r7, #696]
   117be:	f04f 0201 	mov.w	r2, #1	; 0x1
   117c2:	f7fe fcf9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   117c6:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   117ca:	f8d7 12bc 	ldr.w	r1, [r7, #700]
   117ce:	f04f 0201 	mov.w	r2, #1	; 0x1
   117d2:	f7fe fcf1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   117d6:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   117da:	f8d7 12d8 	ldr.w	r1, [r7, #728]
   117de:	f04f 0201 	mov.w	r2, #1	; 0x1
   117e2:	f7fe fce9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape23);
   117e6:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   117ea:	f8d7 1310 	ldr.w	r1, [r7, #784]
   117ee:	f04f 0201 	mov.w	r2, #1	; 0x1
   117f2:	f7fe fce1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   117f6:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   117fa:	f8d7 12c4 	ldr.w	r1, [r7, #708]
   117fe:	f04f 0201 	mov.w	r2, #1	; 0x1
   11802:	f7fe fcd9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   11806:	f8d7 02bc 	ldr.w	r0, [r7, #700]
   1180a:	f8d7 12c0 	ldr.w	r1, [r7, #704]
   1180e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11812:	f7fe fcd1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   11816:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   1181a:	f8d7 12c4 	ldr.w	r1, [r7, #708]
   1181e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11822:	f7fe fcc9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   11826:	f8d7 02c4 	ldr.w	r0, [r7, #708]
   1182a:	f8d7 12c8 	ldr.w	r1, [r7, #712]
   1182e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11832:	f7fe fcc1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   11836:	f8d7 02c4 	ldr.w	r0, [r7, #708]
   1183a:	f8d7 12e8 	ldr.w	r1, [r7, #744]
   1183e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11842:	f7fe fcb9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   11846:	f8d7 02c4 	ldr.w	r0, [r7, #708]
   1184a:	f8d7 12d4 	ldr.w	r1, [r7, #724]
   1184e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11852:	f7fe fcb1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   11856:	f8d7 02cc 	ldr.w	r0, [r7, #716]
   1185a:	f8d7 12d0 	ldr.w	r1, [r7, #720]
   1185e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11862:	f7fe fca9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   11866:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   1186a:	f8d7 12fc 	ldr.w	r1, [r7, #764]
   1186e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11872:	f7fe fca1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   11876:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   1187a:	f8d7 12bc 	ldr.w	r1, [r7, #700]
   1187e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11882:	f7fe fc99 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   11886:	f8d7 02e8 	ldr.w	r0, [r7, #744]
   1188a:	f8d7 12ec 	ldr.w	r1, [r7, #748]
   1188e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11892:	f7fe fc91 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   11896:	f8d7 02ec 	ldr.w	r0, [r7, #748]
   1189a:	f8d7 12d4 	ldr.w	r1, [r7, #724]
   1189e:	f04f 0201 	mov.w	r2, #1	; 0x1
   118a2:	f7fe fc89 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   118a6:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   118aa:	f8d7 1304 	ldr.w	r1, [r7, #772]
   118ae:	f04f 0201 	mov.w	r2, #1	; 0x1
   118b2:	f7fe fc81 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   118b6:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   118ba:	f8d7 1300 	ldr.w	r1, [r7, #768]
   118be:	f04f 0201 	mov.w	r2, #1	; 0x1
   118c2:	f7fe fc79 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape19);
   118c6:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   118ca:	f8d7 1300 	ldr.w	r1, [r7, #768]
   118ce:	f04f 0201 	mov.w	r2, #1	; 0x1
   118d2:	f7fe fc71 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape21);
   118d6:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   118da:	f8d7 1308 	ldr.w	r1, [r7, #776]
   118de:	f04f 0201 	mov.w	r2, #1	; 0x1
   118e2:	f7fe fc69 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape10);
   118e6:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   118ea:	f8d7 12dc 	ldr.w	r1, [r7, #732]
   118ee:	f04f 0201 	mov.w	r2, #1	; 0x1
   118f2:	f7fe fc61 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape20);
   118f6:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   118fa:	f8d7 1304 	ldr.w	r1, [r7, #772]
   118fe:	f04f 0201 	mov.w	r2, #1	; 0x1
   11902:	f7fe fc59 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   11906:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   1190a:	f8d7 12fc 	ldr.w	r1, [r7, #764]
   1190e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11912:	f7fe fc51 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   11916:	f8d7 0308 	ldr.w	r0, [r7, #776]
   1191a:	f8d7 130c 	ldr.w	r1, [r7, #780]
   1191e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11922:	f7fe fc49 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   11926:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   1192a:	f8d7 130c 	ldr.w	r1, [r7, #780]
   1192e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11932:	f7fe fc41 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   11936:	f8d7 0304 	ldr.w	r0, [r7, #772]
   1193a:	f8d7 12dc 	ldr.w	r1, [r7, #732]
   1193e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11942:	f7fe fc39 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   11946:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   1194a:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   1194e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11952:	f7fe fc31 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape23);
   11956:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   1195a:	f8d7 1310 	ldr.w	r1, [r7, #784]
   1195e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11962:	f7fe fc29 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   11966:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   1196a:	f8d7 12cc 	ldr.w	r1, [r7, #716]
   1196e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11972:	f7fe fc21 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape6);
   11976:	f8d7 0310 	ldr.w	r0, [r7, #784]
   1197a:	f8d7 12cc 	ldr.w	r1, [r7, #716]
   1197e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11982:	f7fe fc19 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape7);
   11986:	f8d7 0310 	ldr.w	r0, [r7, #784]
   1198a:	f8d7 12d0 	ldr.w	r1, [r7, #720]
   1198e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11992:	f7fe fc11 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape12);
   11996:	f8d7 0310 	ldr.w	r0, [r7, #784]
   1199a:	f8d7 12e4 	ldr.w	r1, [r7, #740]
   1199e:	f04f 0201 	mov.w	r2, #1	; 0x1
   119a2:	f7fe fc09 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape24);
   119a6:	f8d7 0310 	ldr.w	r0, [r7, #784]
   119aa:	f8d7 1314 	ldr.w	r1, [r7, #788]
   119ae:	f04f 0201 	mov.w	r2, #1	; 0x1
   119b2:	f7fe fc01 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   119b6:	f8d7 02cc 	ldr.w	r0, [r7, #716]
   119ba:	f8d7 12e4 	ldr.w	r1, [r7, #740]
   119be:	f04f 0201 	mov.w	r2, #1	; 0x1
   119c2:	f7fe fbf9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape24);
   119c6:	f8d7 02e4 	ldr.w	r0, [r7, #740]
   119ca:	f8d7 1314 	ldr.w	r1, [r7, #788]
   119ce:	f04f 0201 	mov.w	r2, #1	; 0x1
   119d2:	f7fe fbf1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   119d6:	f8d7 0310 	ldr.w	r0, [r7, #784]
   119da:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   119de:	f04f 0201 	mov.w	r2, #1	; 0x1
   119e2:	f7fe fbe9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   119e6:	f8d7 02e0 	ldr.w	r0, [r7, #736]
   119ea:	f8d7 1304 	ldr.w	r1, [r7, #772]
   119ee:	f04f 0201 	mov.w	r2, #1	; 0x1
   119f2:	f7fe fbe1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   119f6:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   119fa:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   119fe:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a02:	f7fe fbd9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   11a06:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   11a0a:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   11a0e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a12:	f7fe fbd1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape25);
   11a16:	f8d7 02e0 	ldr.w	r0, [r7, #736]
   11a1a:	f8d7 1318 	ldr.w	r1, [r7, #792]
   11a1e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a22:	f7fe fbc9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape15);
   11a26:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   11a2a:	f8d7 12f0 	ldr.w	r1, [r7, #752]
   11a2e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a32:	f7fe fbc1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   11a36:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   11a3a:	f8d7 12f8 	ldr.w	r1, [r7, #760]
   11a3e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a42:	f7fe fbb9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   11a46:	f8d7 02f4 	ldr.w	r0, [r7, #756]
   11a4a:	f8d7 12f8 	ldr.w	r1, [r7, #760]
   11a4e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a52:	f7fe fbb1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   11a56:	f8d7 02f4 	ldr.w	r0, [r7, #756]
   11a5a:	f8d7 12f0 	ldr.w	r1, [r7, #752]
   11a5e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a62:	f7fe fba9 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   11a66:	f8d7 02f0 	ldr.w	r0, [r7, #752]
   11a6a:	f8d7 12f8 	ldr.w	r1, [r7, #760]
   11a6e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a72:	f7fe fba1 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape9);
   11a76:	f8d7 02f0 	ldr.w	r0, [r7, #752]
   11a7a:	f8d7 12d8 	ldr.w	r1, [r7, #728]
   11a7e:	f04f 0201 	mov.w	r2, #1	; 0x1
   11a82:	f7fe fb99 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>


    // Lancer Dijkstra
    startDijkstra();
   11a86:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11a8a:	681b      	ldr	r3, [r3, #0]
   11a8c:	4618      	mov	r0, r3
   11a8e:	f002 ffe5 	bl	14a5c <_ZN11StrategieV313startDijkstraEv>
}
   11a92:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11a96:	681b      	ldr	r3, [r3, #0]
   11a98:	4618      	mov	r0, r3
   11a9a:	f507 7749 	add.w	r7, r7, #804	; 0x324
   11a9e:	46bd      	mov	sp, r7
   11aa0:	bd90      	pop	{r4, r7, pc}
   11aa2:	46c0      	nop			(mov r8, r8)
   11aa4:	44898000 	.word	0x44898000
   11aa8:	44dd4000 	.word	0x44dd4000
   11aac:	44a28000 	.word	0x44a28000
   11ab0:	44af0000 	.word	0x44af0000
   11ab4:	449c4000 	.word	0x449c4000
   11ab8:	44e10000 	.word	0x44e10000
   11abc:	44dac000 	.word	0x44dac000
   11ac0:	450fc000 	.word	0x450fc000
   11ac4:	44bb8000 	.word	0x44bb8000
   11ac8:	452f0000 	.word	0x452f0000
   11acc:	44b54000 	.word	0x44b54000
   11ad0:	44160000 	.word	0x44160000
   11ad4:	41f00000 	.word	0x41f00000
   11ad8:	44510000 	.word	0x44510000
   11adc:	44d48000 	.word	0x44d48000
   11ae0:	447a0000 	.word	0x447a0000

00011ae4 <_ZN9Krabi2015C2Eb>:
#include "krabi2015.h"

Krabi2015::Krabi2015(bool isBlue) : StrategieV3(isBlue)
   11ae4:	b590      	push	{r4, r7, lr}
   11ae6:	f5ad 7d4d 	sub.w	sp, sp, #820	; 0x334
   11aea:	af04      	add	r7, sp, #16
   11aec:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11af0:	6018      	str	r0, [r3, #0]
   11af2:	460a      	mov	r2, r1
   11af4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11af8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11afc:	701a      	strb	r2, [r3, #0]
   11afe:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b02:	681a      	ldr	r2, [r3, #0]
   11b04:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b08:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11b0c:	781b      	ldrb	r3, [r3, #0]
   11b0e:	4610      	mov	r0, r2
   11b10:	4619      	mov	r1, r3
   11b12:	f003 fb67 	bl	151e4 <_ZN11StrategieV3C2Eb>
   11b16:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b1a:	681a      	ldr	r2, [r3, #0]
   11b1c:	f8df 3b80 	ldr.w	r3, [pc, #2944]	; 126a0 <_ZN9Krabi2015C2Eb+0xbbc>
   11b20:	6013      	str	r3, [r2, #0]
   11b22:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b26:	681b      	ldr	r3, [r3, #0]
   11b28:	f103 0348 	add.w	r3, r3, #72	; 0x48
   11b2c:	607b      	str	r3, [r7, #4]
   11b2e:	f04f 0302 	mov.w	r3, #2	; 0x2
   11b32:	60bb      	str	r3, [r7, #8]
   11b34:	e00a      	b.n	11b4c <_ZN9Krabi2015C2Eb+0x68>
   11b36:	6878      	ldr	r0, [r7, #4]
   11b38:	f7fd fcf6 	bl	f528 <_ZN4ClapC1Ev>
   11b3c:	687b      	ldr	r3, [r7, #4]
   11b3e:	f103 0328 	add.w	r3, r3, #40	; 0x28
   11b42:	607b      	str	r3, [r7, #4]
   11b44:	68bb      	ldr	r3, [r7, #8]
   11b46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11b4a:	60bb      	str	r3, [r7, #8]
   11b4c:	68bb      	ldr	r3, [r7, #8]
   11b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11b52:	d1f0      	bne.n	11b36 <_ZN9Krabi2015C2Eb+0x52>
{
    // Initialisation des stocks

    //Initialisation des tableaux d'étapes
    this->nombreEtapes = NOMBRE_ETAPES;
   11b54:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b58:	681a      	ldr	r2, [r3, #0]
   11b5a:	f04f 031a 	mov.w	r3, #26	; 0x1a
   11b5e:	61d3      	str	r3, [r2, #28]
    this->numeroEtapeGarage = ETAPE_GARAGE;
   11b60:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b64:	681a      	ldr	r2, [r3, #0]
   11b66:	f04f 0301 	mov.w	r3, #1	; 0x1
   11b6a:	6213      	str	r3, [r2, #32]
    tableauEtapesTotal = new Etape*[NOMBRE_ETAPES];
   11b6c:	f04f 0068 	mov.w	r0, #104	; 0x68
   11b70:	f7fc fc8a 	bl	e488 <_Znaj>
   11b74:	4603      	mov	r3, r0
   11b76:	461a      	mov	r2, r3
   11b78:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b7c:	681b      	ldr	r3, [r3, #0]
   11b7e:	635a      	str	r2, [r3, #52]
    actionEtape = new MediumLevelAction*[NOMBRE_ETAPES];
   11b80:	f04f 0068 	mov.w	r0, #104	; 0x68
   11b84:	f7fc fc80 	bl	e488 <_Znaj>
   11b88:	4603      	mov	r3, r0
   11b8a:	461a      	mov	r2, r3
   11b8c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11b90:	681b      	ldr	r3, [r3, #0]
   11b92:	625a      	str	r2, [r3, #36]
    actionGoto = new ActionGoTo[NOMBRE_ETAPES];
   11b94:	f44f 609d 	mov.w	r0, #1256	; 0x4e8
   11b98:	f7fc fc76 	bl	e488 <_Znaj>
   11b9c:	4603      	mov	r3, r0
   11b9e:	60fb      	str	r3, [r7, #12]
   11ba0:	68fb      	ldr	r3, [r7, #12]
   11ba2:	2b00      	cmp	r3, #0
   11ba4:	d03c      	beq.n	11c20 <_ZN9Krabi2015C2Eb+0x13c>
   11ba6:	68fb      	ldr	r3, [r7, #12]
   11ba8:	f103 0308 	add.w	r3, r3, #8	; 0x8
   11bac:	617b      	str	r3, [r7, #20]
   11bae:	697b      	ldr	r3, [r7, #20]
   11bb0:	f1a3 0304 	sub.w	r3, r3, #4	; 0x4
   11bb4:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   11bb8:	f04f 0330 	mov.w	r3, #48	; 0x30
   11bbc:	6013      	str	r3, [r2, #0]
   11bbe:	697b      	ldr	r3, [r7, #20]
   11bc0:	f1a3 0204 	sub.w	r2, r3, #4	; 0x4
   11bc4:	f04f 031a 	mov.w	r3, #26	; 0x1a
   11bc8:	6013      	str	r3, [r2, #0]
   11bca:	697b      	ldr	r3, [r7, #20]
   11bcc:	61bb      	str	r3, [r7, #24]
   11bce:	f04f 0319 	mov.w	r3, #25	; 0x19
   11bd2:	61fb      	str	r3, [r7, #28]
   11bd4:	e01d      	b.n	11c12 <_ZN9Krabi2015C2Eb+0x12e>
   11bd6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
   11bda:	4618      	mov	r0, r3
   11bdc:	f8df 1ac4 	ldr.w	r1, [pc, #2756]	; 126a4 <_ZN9Krabi2015C2Eb+0xbc0>
   11be0:	f8df 2ac0 	ldr.w	r2, [pc, #2752]	; 126a4 <_ZN9Krabi2015C2Eb+0xbc0>
   11be4:	f04f 0301 	mov.w	r3, #1	; 0x1
   11be8:	f7fc fd1c 	bl	e624 <_ZN8PositionC1Effb>
   11bec:	f507 72b2 	add.w	r2, r7, #356	; 0x164
   11bf0:	f8df 3ab4 	ldr.w	r3, [pc, #2740]	; 126a8 <_ZN9Krabi2015C2Eb+0xbc4>
   11bf4:	9300      	str	r3, [sp, #0]
   11bf6:	69b8      	ldr	r0, [r7, #24]
   11bf8:	ca06      	ldmia	r2!, {r1, r2}
   11bfa:	f04f 0300 	mov.w	r3, #0	; 0x0
   11bfe:	f7fd fa37 	bl	f070 <_ZN10ActionGoToC1E8Positionbf>
   11c02:	69bb      	ldr	r3, [r7, #24]
   11c04:	f103 0330 	add.w	r3, r3, #48	; 0x30
   11c08:	61bb      	str	r3, [r7, #24]
   11c0a:	69fb      	ldr	r3, [r7, #28]
   11c0c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11c10:	61fb      	str	r3, [r7, #28]
   11c12:	69fb      	ldr	r3, [r7, #28]
   11c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11c18:	d1dd      	bne.n	11bd6 <_ZN9Krabi2015C2Eb+0xf2>
   11c1a:	697b      	ldr	r3, [r7, #20]
   11c1c:	613b      	str	r3, [r7, #16]
   11c1e:	e001      	b.n	11c24 <_ZN9Krabi2015C2Eb+0x140>
   11c20:	68fb      	ldr	r3, [r7, #12]
   11c22:	613b      	str	r3, [r7, #16]
   11c24:	693a      	ldr	r2, [r7, #16]
   11c26:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11c2a:	681b      	ldr	r3, [r3, #0]
   11c2c:	629a      	str	r2, [r3, #40]
    // TODO: A supprimer pour une variable statique dans Etape
    int numeroEtape = 0;
   11c2e:	f04f 0300 	mov.w	r3, #0	; 0x0
   11c32:	f8c7 32ac 	str.w	r3, [r7, #684]

    // Création des étapes
    //arguments : Position, tableau des etapes liées, nombre d'étapes liées, numéro de l'étape, type d'étape, état de l'étape, nombreEtapesLieesParFinirEtape
    //Toutes ces étapes sont créées pour isBlue = isYellow
    int isYellow=isBlue;
   11c36:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11c3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   11c3e:	781b      	ldrb	r3, [r3, #0]
   11c40:	f8c7 32b0 	str.w	r3, [r7, #688]
    Etape* etape0 = new Etape(Position(250, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::DEPART, -1, 0); //départ au fond de la zone de départ
   11c44:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11c48:	2b00      	cmp	r3, #0
   11c4a:	bf0c      	ite	eq
   11c4c:	2300      	moveq	r3, #0
   11c4e:	2301      	movne	r3, #1
   11c50:	fa5f fc83 	uxtb.w	ip, r3
   11c54:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
   11c58:	4618      	mov	r0, r3
   11c5a:	f8df 1a50 	ldr.w	r1, [pc, #2640]	; 126ac <_ZN9Krabi2015C2Eb+0xbc8>
   11c5e:	f8df 2a50 	ldr.w	r2, [pc, #2640]	; 126b0 <_ZN9Krabi2015C2Eb+0xbcc>
   11c62:	4663      	mov	r3, ip
   11c64:	f7fc fcde 	bl	e624 <_ZN8PositionC1Effb>
   11c68:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11c6c:	623b      	str	r3, [r7, #32]
   11c6e:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11c72:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11c76:	f8c7 32ac 	str.w	r3, [r7, #684]
   11c7a:	f04f 0034 	mov.w	r0, #52	; 0x34
   11c7e:	f7fc fb6b 	bl	e358 <_Znwj>
   11c82:	4603      	mov	r3, r0
   11c84:	627b      	str	r3, [r7, #36]
   11c86:	6a7b      	ldr	r3, [r7, #36]
   11c88:	2b00      	cmp	r3, #0
   11c8a:	d017      	beq.n	11cbc <_ZN9Krabi2015C2Eb+0x1d8>
   11c8c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11c90:	681b      	ldr	r3, [r3, #0]
   11c92:	6b5b      	ldr	r3, [r3, #52]
   11c94:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
   11c98:	9300      	str	r3, [sp, #0]
   11c9a:	f04f 0305 	mov.w	r3, #5	; 0x5
   11c9e:	9301      	str	r3, [sp, #4]
   11ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ca4:	9302      	str	r3, [sp, #8]
   11ca6:	f04f 0300 	mov.w	r3, #0	; 0x0
   11caa:	9303      	str	r3, [sp, #12]
   11cac:	6a78      	ldr	r0, [r7, #36]
   11cae:	ca06      	ldmia	r2!, {r1, r2}
   11cb0:	6a3b      	ldr	r3, [r7, #32]
   11cb2:	f7fe fb61 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11cb6:	6a7b      	ldr	r3, [r7, #36]
   11cb8:	62bb      	str	r3, [r7, #40]
   11cba:	e001      	b.n	11cc0 <_ZN9Krabi2015C2Eb+0x1dc>
   11cbc:	6a7b      	ldr	r3, [r7, #36]
   11cbe:	62bb      	str	r3, [r7, #40]
   11cc0:	6abb      	ldr	r3, [r7, #40]
   11cc2:	f8c7 32b4 	str.w	r3, [r7, #692]
    Etape* etape1 = new Etape(Position(700, 1000, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11cc6:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11cca:	2b00      	cmp	r3, #0
   11ccc:	bf0c      	ite	eq
   11cce:	2300      	moveq	r3, #0
   11cd0:	2301      	movne	r3, #1
   11cd2:	fa5f fc83 	uxtb.w	ip, r3
   11cd6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
   11cda:	4618      	mov	r0, r3
   11cdc:	f8df 19d4 	ldr.w	r1, [pc, #2516]	; 126b4 <_ZN9Krabi2015C2Eb+0xbd0>
   11ce0:	f8df 29cc 	ldr.w	r2, [pc, #2508]	; 126b0 <_ZN9Krabi2015C2Eb+0xbcc>
   11ce4:	4663      	mov	r3, ip
   11ce6:	f7fc fc9d 	bl	e624 <_ZN8PositionC1Effb>
   11cea:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11cee:	62fb      	str	r3, [r7, #44]
   11cf0:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11cf4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11cf8:	f8c7 32ac 	str.w	r3, [r7, #684]
   11cfc:	f04f 0034 	mov.w	r0, #52	; 0x34
   11d00:	f7fc fb2a 	bl	e358 <_Znwj>
   11d04:	4603      	mov	r3, r0
   11d06:	633b      	str	r3, [r7, #48]
   11d08:	6b3b      	ldr	r3, [r7, #48]
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	d017      	beq.n	11d3e <_ZN9Krabi2015C2Eb+0x25a>
   11d0e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11d12:	681b      	ldr	r3, [r3, #0]
   11d14:	6b5b      	ldr	r3, [r3, #52]
   11d16:	f507 72ba 	add.w	r2, r7, #372	; 0x174
   11d1a:	9300      	str	r3, [sp, #0]
   11d1c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d20:	9301      	str	r3, [sp, #4]
   11d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d26:	9302      	str	r3, [sp, #8]
   11d28:	f04f 0300 	mov.w	r3, #0	; 0x0
   11d2c:	9303      	str	r3, [sp, #12]
   11d2e:	6b38      	ldr	r0, [r7, #48]
   11d30:	ca06      	ldmia	r2!, {r1, r2}
   11d32:	6afb      	ldr	r3, [r7, #44]
   11d34:	f7fe fb20 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11d38:	6b3b      	ldr	r3, [r7, #48]
   11d3a:	637b      	str	r3, [r7, #52]
   11d3c:	e001      	b.n	11d42 <_ZN9Krabi2015C2Eb+0x25e>
   11d3e:	6b3b      	ldr	r3, [r7, #48]
   11d40:	637b      	str	r3, [r7, #52]
   11d42:	6b7b      	ldr	r3, [r7, #52]
   11d44:	f8c7 32b8 	str.w	r3, [r7, #696]
    Etape* etape2 = new Etape(Position(836, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   11d48:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11d4c:	2b00      	cmp	r3, #0
   11d4e:	bf0c      	ite	eq
   11d50:	2300      	moveq	r3, #0
   11d52:	2301      	movne	r3, #1
   11d54:	fa5f fc83 	uxtb.w	ip, r3
   11d58:	f507 73be 	add.w	r3, r7, #380	; 0x17c
   11d5c:	4618      	mov	r0, r3
   11d5e:	f8df 1958 	ldr.w	r1, [pc, #2392]	; 126b8 <_ZN9Krabi2015C2Eb+0xbd4>
   11d62:	f8df 2958 	ldr.w	r2, [pc, #2392]	; 126bc <_ZN9Krabi2015C2Eb+0xbd8>
   11d66:	4663      	mov	r3, ip
   11d68:	f7fc fc5c 	bl	e624 <_ZN8PositionC1Effb>
   11d6c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11d70:	63bb      	str	r3, [r7, #56]
   11d72:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11d76:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11d7a:	f8c7 32ac 	str.w	r3, [r7, #684]
   11d7e:	f04f 0034 	mov.w	r0, #52	; 0x34
   11d82:	f7fc fae9 	bl	e358 <_Znwj>
   11d86:	4603      	mov	r3, r0
   11d88:	63fb      	str	r3, [r7, #60]
   11d8a:	6bfb      	ldr	r3, [r7, #60]
   11d8c:	2b00      	cmp	r3, #0
   11d8e:	d017      	beq.n	11dc0 <_ZN9Krabi2015C2Eb+0x2dc>
   11d90:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11d94:	681b      	ldr	r3, [r3, #0]
   11d96:	6b5b      	ldr	r3, [r3, #52]
   11d98:	f507 72be 	add.w	r2, r7, #380	; 0x17c
   11d9c:	9300      	str	r3, [sp, #0]
   11d9e:	f04f 0311 	mov.w	r3, #17	; 0x11
   11da2:	9301      	str	r3, [sp, #4]
   11da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11da8:	9302      	str	r3, [sp, #8]
   11daa:	f04f 0300 	mov.w	r3, #0	; 0x0
   11dae:	9303      	str	r3, [sp, #12]
   11db0:	6bf8      	ldr	r0, [r7, #60]
   11db2:	ca06      	ldmia	r2!, {r1, r2}
   11db4:	6bbb      	ldr	r3, [r7, #56]
   11db6:	f7fe fadf 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11dba:	6bfb      	ldr	r3, [r7, #60]
   11dbc:	643b      	str	r3, [r7, #64]
   11dbe:	e001      	b.n	11dc4 <_ZN9Krabi2015C2Eb+0x2e0>
   11dc0:	6bfb      	ldr	r3, [r7, #60]
   11dc2:	643b      	str	r3, [r7, #64]
   11dc4:	6c3b      	ldr	r3, [r7, #64]
   11dc6:	f8c7 32bc 	str.w	r3, [r7, #700]
    Etape* etape3 = new Etape(Position(1000, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11dca:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11dce:	2b00      	cmp	r3, #0
   11dd0:	bf0c      	ite	eq
   11dd2:	2300      	moveq	r3, #0
   11dd4:	2301      	movne	r3, #1
   11dd6:	fa5f fc83 	uxtb.w	ip, r3
   11dda:	f507 73c2 	add.w	r3, r7, #388	; 0x184
   11dde:	4618      	mov	r0, r3
   11de0:	f8df 18cc 	ldr.w	r1, [pc, #2252]	; 126b0 <_ZN9Krabi2015C2Eb+0xbcc>
   11de4:	f8df 28d4 	ldr.w	r2, [pc, #2260]	; 126bc <_ZN9Krabi2015C2Eb+0xbd8>
   11de8:	4663      	mov	r3, ip
   11dea:	f7fc fc1b 	bl	e624 <_ZN8PositionC1Effb>
   11dee:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11df2:	647b      	str	r3, [r7, #68]
   11df4:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11df8:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11dfc:	f8c7 32ac 	str.w	r3, [r7, #684]
   11e00:	f04f 0034 	mov.w	r0, #52	; 0x34
   11e04:	f7fc faa8 	bl	e358 <_Znwj>
   11e08:	4603      	mov	r3, r0
   11e0a:	64bb      	str	r3, [r7, #72]
   11e0c:	6cbb      	ldr	r3, [r7, #72]
   11e0e:	2b00      	cmp	r3, #0
   11e10:	d017      	beq.n	11e42 <_ZN9Krabi2015C2Eb+0x35e>
   11e12:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11e16:	681b      	ldr	r3, [r3, #0]
   11e18:	6b5b      	ldr	r3, [r3, #52]
   11e1a:	f507 72c2 	add.w	r2, r7, #388	; 0x184
   11e1e:	9300      	str	r3, [sp, #0]
   11e20:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e24:	9301      	str	r3, [sp, #4]
   11e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e2a:	9302      	str	r3, [sp, #8]
   11e2c:	f04f 0300 	mov.w	r3, #0	; 0x0
   11e30:	9303      	str	r3, [sp, #12]
   11e32:	6cb8      	ldr	r0, [r7, #72]
   11e34:	ca06      	ldmia	r2!, {r1, r2}
   11e36:	6c7b      	ldr	r3, [r7, #68]
   11e38:	f7fe fa9e 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11e3c:	6cbb      	ldr	r3, [r7, #72]
   11e3e:	64fb      	str	r3, [r7, #76]
   11e40:	e001      	b.n	11e46 <_ZN9Krabi2015C2Eb+0x362>
   11e42:	6cbb      	ldr	r3, [r7, #72]
   11e44:	64fb      	str	r3, [r7, #76]
   11e46:	6cfb      	ldr	r3, [r7, #76]
   11e48:	f8c7 32c0 	str.w	r3, [r7, #704]
    Etape* etape4 = new Etape(Position(236, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   11e4c:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11e50:	2b00      	cmp	r3, #0
   11e52:	bf0c      	ite	eq
   11e54:	2300      	moveq	r3, #0
   11e56:	2301      	movne	r3, #1
   11e58:	fa5f fc83 	uxtb.w	ip, r3
   11e5c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
   11e60:	4618      	mov	r0, r3
   11e62:	f8df 185c 	ldr.w	r1, [pc, #2140]	; 126c0 <_ZN9Krabi2015C2Eb+0xbdc>
   11e66:	f8df 2854 	ldr.w	r2, [pc, #2132]	; 126bc <_ZN9Krabi2015C2Eb+0xbd8>
   11e6a:	4663      	mov	r3, ip
   11e6c:	f7fc fbda 	bl	e624 <_ZN8PositionC1Effb>
   11e70:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11e74:	653b      	str	r3, [r7, #80]
   11e76:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11e7a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11e7e:	f8c7 32ac 	str.w	r3, [r7, #684]
   11e82:	f04f 0034 	mov.w	r0, #52	; 0x34
   11e86:	f7fc fa67 	bl	e358 <_Znwj>
   11e8a:	4603      	mov	r3, r0
   11e8c:	657b      	str	r3, [r7, #84]
   11e8e:	6d7b      	ldr	r3, [r7, #84]
   11e90:	2b00      	cmp	r3, #0
   11e92:	d017      	beq.n	11ec4 <_ZN9Krabi2015C2Eb+0x3e0>
   11e94:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11e98:	681b      	ldr	r3, [r3, #0]
   11e9a:	6b5b      	ldr	r3, [r3, #52]
   11e9c:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
   11ea0:	9300      	str	r3, [sp, #0]
   11ea2:	f04f 0311 	mov.w	r3, #17	; 0x11
   11ea6:	9301      	str	r3, [sp, #4]
   11ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11eac:	9302      	str	r3, [sp, #8]
   11eae:	f04f 0300 	mov.w	r3, #0	; 0x0
   11eb2:	9303      	str	r3, [sp, #12]
   11eb4:	6d78      	ldr	r0, [r7, #84]
   11eb6:	ca06      	ldmia	r2!, {r1, r2}
   11eb8:	6d3b      	ldr	r3, [r7, #80]
   11eba:	f7fe fa5d 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11ebe:	6d7b      	ldr	r3, [r7, #84]
   11ec0:	65bb      	str	r3, [r7, #88]
   11ec2:	e001      	b.n	11ec8 <_ZN9Krabi2015C2Eb+0x3e4>
   11ec4:	6d7b      	ldr	r3, [r7, #84]
   11ec6:	65bb      	str	r3, [r7, #88]
   11ec8:	6dbb      	ldr	r3, [r7, #88]
   11eca:	f8c7 32c4 	str.w	r3, [r7, #708]
    Etape* etape5 = new Etape(Position(400, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11ece:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	bf0c      	ite	eq
   11ed6:	2300      	moveq	r3, #0
   11ed8:	2301      	movne	r3, #1
   11eda:	fa5f fc83 	uxtb.w	ip, r3
   11ede:	f507 73ca 	add.w	r3, r7, #404	; 0x194
   11ee2:	4618      	mov	r0, r3
   11ee4:	f8df 17dc 	ldr.w	r1, [pc, #2012]	; 126c4 <_ZN9Krabi2015C2Eb+0xbe0>
   11ee8:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 126bc <_ZN9Krabi2015C2Eb+0xbd8>
   11eec:	4663      	mov	r3, ip
   11eee:	f7fc fb99 	bl	e624 <_ZN8PositionC1Effb>
   11ef2:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11ef6:	65fb      	str	r3, [r7, #92]
   11ef8:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11efc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f00:	f8c7 32ac 	str.w	r3, [r7, #684]
   11f04:	f04f 0034 	mov.w	r0, #52	; 0x34
   11f08:	f7fc fa26 	bl	e358 <_Znwj>
   11f0c:	4603      	mov	r3, r0
   11f0e:	663b      	str	r3, [r7, #96]
   11f10:	6e3b      	ldr	r3, [r7, #96]
   11f12:	2b00      	cmp	r3, #0
   11f14:	d017      	beq.n	11f46 <_ZN9Krabi2015C2Eb+0x462>
   11f16:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11f1a:	681b      	ldr	r3, [r3, #0]
   11f1c:	6b5b      	ldr	r3, [r3, #52]
   11f1e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
   11f22:	9300      	str	r3, [sp, #0]
   11f24:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f28:	9301      	str	r3, [sp, #4]
   11f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11f2e:	9302      	str	r3, [sp, #8]
   11f30:	f04f 0300 	mov.w	r3, #0	; 0x0
   11f34:	9303      	str	r3, [sp, #12]
   11f36:	6e38      	ldr	r0, [r7, #96]
   11f38:	ca06      	ldmia	r2!, {r1, r2}
   11f3a:	6dfb      	ldr	r3, [r7, #92]
   11f3c:	f7fe fa1c 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11f40:	6e3b      	ldr	r3, [r7, #96]
   11f42:	667b      	str	r3, [r7, #100]
   11f44:	e001      	b.n	11f4a <_ZN9Krabi2015C2Eb+0x466>
   11f46:	6e3b      	ldr	r3, [r7, #96]
   11f48:	667b      	str	r3, [r7, #100]
   11f4a:	6e7b      	ldr	r3, [r7, #100]
   11f4c:	f8c7 32c8 	str.w	r3, [r7, #712]
    Etape* etape6 = new Etape(Position(2500, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::CLAP, -1, 0);
   11f50:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11f54:	2b00      	cmp	r3, #0
   11f56:	bf0c      	ite	eq
   11f58:	2300      	moveq	r3, #0
   11f5a:	2301      	movne	r3, #1
   11f5c:	fa5f fc83 	uxtb.w	ip, r3
   11f60:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
   11f64:	4618      	mov	r0, r3
   11f66:	f8df 1760 	ldr.w	r1, [pc, #1888]	; 126c8 <_ZN9Krabi2015C2Eb+0xbe4>
   11f6a:	f8df 2750 	ldr.w	r2, [pc, #1872]	; 126bc <_ZN9Krabi2015C2Eb+0xbd8>
   11f6e:	4663      	mov	r3, ip
   11f70:	f7fc fb58 	bl	e624 <_ZN8PositionC1Effb>
   11f74:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11f78:	66bb      	str	r3, [r7, #104]
   11f7a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11f7e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   11f82:	f8c7 32ac 	str.w	r3, [r7, #684]
   11f86:	f04f 0034 	mov.w	r0, #52	; 0x34
   11f8a:	f7fc f9e5 	bl	e358 <_Znwj>
   11f8e:	4603      	mov	r3, r0
   11f90:	66fb      	str	r3, [r7, #108]
   11f92:	6efb      	ldr	r3, [r7, #108]
   11f94:	2b00      	cmp	r3, #0
   11f96:	d017      	beq.n	11fc8 <_ZN9Krabi2015C2Eb+0x4e4>
   11f98:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   11f9c:	681b      	ldr	r3, [r3, #0]
   11f9e:	6b5b      	ldr	r3, [r3, #52]
   11fa0:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
   11fa4:	9300      	str	r3, [sp, #0]
   11fa6:	f04f 0311 	mov.w	r3, #17	; 0x11
   11faa:	9301      	str	r3, [sp, #4]
   11fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fb0:	9302      	str	r3, [sp, #8]
   11fb2:	f04f 0300 	mov.w	r3, #0	; 0x0
   11fb6:	9303      	str	r3, [sp, #12]
   11fb8:	6ef8      	ldr	r0, [r7, #108]
   11fba:	ca06      	ldmia	r2!, {r1, r2}
   11fbc:	6ebb      	ldr	r3, [r7, #104]
   11fbe:	f7fe f9db 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   11fc2:	6efb      	ldr	r3, [r7, #108]
   11fc4:	673b      	str	r3, [r7, #112]
   11fc6:	e001      	b.n	11fcc <_ZN9Krabi2015C2Eb+0x4e8>
   11fc8:	6efb      	ldr	r3, [r7, #108]
   11fca:	673b      	str	r3, [r7, #112]
   11fcc:	6f3b      	ldr	r3, [r7, #112]
   11fce:	f8c7 32cc 	str.w	r3, [r7, #716]
    Etape* etape7 = new Etape(Position(2300, 1700, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   11fd2:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   11fd6:	2b00      	cmp	r3, #0
   11fd8:	bf0c      	ite	eq
   11fda:	2300      	moveq	r3, #0
   11fdc:	2301      	movne	r3, #1
   11fde:	fa5f fc83 	uxtb.w	ip, r3
   11fe2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
   11fe6:	4618      	mov	r0, r3
   11fe8:	f8df 16e0 	ldr.w	r1, [pc, #1760]	; 126cc <_ZN9Krabi2015C2Eb+0xbe8>
   11fec:	f8df 26cc 	ldr.w	r2, [pc, #1740]	; 126bc <_ZN9Krabi2015C2Eb+0xbd8>
   11ff0:	4663      	mov	r3, ip
   11ff2:	f7fc fb17 	bl	e624 <_ZN8PositionC1Effb>
   11ff6:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   11ffa:	677b      	str	r3, [r7, #116]
   11ffc:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12000:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12004:	f8c7 32ac 	str.w	r3, [r7, #684]
   12008:	f04f 0034 	mov.w	r0, #52	; 0x34
   1200c:	f7fc f9a4 	bl	e358 <_Znwj>
   12010:	4603      	mov	r3, r0
   12012:	67bb      	str	r3, [r7, #120]
   12014:	6fbb      	ldr	r3, [r7, #120]
   12016:	2b00      	cmp	r3, #0
   12018:	d017      	beq.n	1204a <_ZN9Krabi2015C2Eb+0x566>
   1201a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1201e:	681b      	ldr	r3, [r3, #0]
   12020:	6b5b      	ldr	r3, [r3, #52]
   12022:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
   12026:	9300      	str	r3, [sp, #0]
   12028:	f04f 0300 	mov.w	r3, #0	; 0x0
   1202c:	9301      	str	r3, [sp, #4]
   1202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12032:	9302      	str	r3, [sp, #8]
   12034:	f04f 0300 	mov.w	r3, #0	; 0x0
   12038:	9303      	str	r3, [sp, #12]
   1203a:	6fb8      	ldr	r0, [r7, #120]
   1203c:	ca06      	ldmia	r2!, {r1, r2}
   1203e:	6f7b      	ldr	r3, [r7, #116]
   12040:	f7fe f99a 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12044:	6fbb      	ldr	r3, [r7, #120]
   12046:	67fb      	str	r3, [r7, #124]
   12048:	e001      	b.n	1204e <_ZN9Krabi2015C2Eb+0x56a>
   1204a:	6fbb      	ldr	r3, [r7, #120]
   1204c:	67fb      	str	r3, [r7, #124]
   1204e:	6ffb      	ldr	r3, [r7, #124]
   12050:	f8c7 32d0 	str.w	r3, [r7, #720]
    Etape* etape8 = new Etape(Position(250, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12054:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12058:	2b00      	cmp	r3, #0
   1205a:	bf0c      	ite	eq
   1205c:	2300      	moveq	r3, #0
   1205e:	2301      	movne	r3, #1
   12060:	fa5f fc83 	uxtb.w	ip, r3
   12064:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
   12068:	4618      	mov	r0, r3
   1206a:	f8df 1640 	ldr.w	r1, [pc, #1600]	; 126ac <_ZN9Krabi2015C2Eb+0xbc8>
   1206e:	f8df 2660 	ldr.w	r2, [pc, #1632]	; 126d0 <_ZN9Krabi2015C2Eb+0xbec>
   12072:	4663      	mov	r3, ip
   12074:	f7fc fad6 	bl	e624 <_ZN8PositionC1Effb>
   12078:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1207c:	f8c7 3080 	str.w	r3, [r7, #128]
   12080:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12084:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12088:	f8c7 32ac 	str.w	r3, [r7, #684]
   1208c:	f04f 0034 	mov.w	r0, #52	; 0x34
   12090:	f7fc f962 	bl	e358 <_Znwj>
   12094:	4603      	mov	r3, r0
   12096:	f8c7 3084 	str.w	r3, [r7, #132]
   1209a:	f8d7 3084 	ldr.w	r3, [r7, #132]
   1209e:	2b00      	cmp	r3, #0
   120a0:	d01b      	beq.n	120da <_ZN9Krabi2015C2Eb+0x5f6>
   120a2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   120a6:	681b      	ldr	r3, [r3, #0]
   120a8:	6b5b      	ldr	r3, [r3, #52]
   120aa:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
   120ae:	9300      	str	r3, [sp, #0]
   120b0:	f04f 0312 	mov.w	r3, #18	; 0x12
   120b4:	9301      	str	r3, [sp, #4]
   120b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   120ba:	9302      	str	r3, [sp, #8]
   120bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   120c0:	9303      	str	r3, [sp, #12]
   120c2:	f8d7 0084 	ldr.w	r0, [r7, #132]
   120c6:	ca06      	ldmia	r2!, {r1, r2}
   120c8:	f8d7 3080 	ldr.w	r3, [r7, #128]
   120cc:	f7fe f954 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   120d0:	f8d7 3084 	ldr.w	r3, [r7, #132]
   120d4:	f8c7 3088 	str.w	r3, [r7, #136]
   120d8:	e003      	b.n	120e2 <_ZN9Krabi2015C2Eb+0x5fe>
   120da:	f8d7 3084 	ldr.w	r3, [r7, #132]
   120de:	f8c7 3088 	str.w	r3, [r7, #136]
   120e2:	f8d7 3088 	ldr.w	r3, [r7, #136]
   120e6:	f8c7 32d4 	str.w	r3, [r7, #724]
    Etape* etape9 = new Etape(Position(910, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   120ea:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   120ee:	2b00      	cmp	r3, #0
   120f0:	bf0c      	ite	eq
   120f2:	2300      	moveq	r3, #0
   120f4:	2301      	movne	r3, #1
   120f6:	fa5f fc83 	uxtb.w	ip, r3
   120fa:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
   120fe:	4618      	mov	r0, r3
   12100:	f8df 15d0 	ldr.w	r1, [pc, #1488]	; 126d4 <_ZN9Krabi2015C2Eb+0xbf0>
   12104:	f8df 25d0 	ldr.w	r2, [pc, #1488]	; 126d8 <_ZN9Krabi2015C2Eb+0xbf4>
   12108:	4663      	mov	r3, ip
   1210a:	f7fc fa8b 	bl	e624 <_ZN8PositionC1Effb>
   1210e:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12112:	f8c7 308c 	str.w	r3, [r7, #140]
   12116:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1211a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1211e:	f8c7 32ac 	str.w	r3, [r7, #684]
   12122:	f04f 0034 	mov.w	r0, #52	; 0x34
   12126:	f7fc f917 	bl	e358 <_Znwj>
   1212a:	4603      	mov	r3, r0
   1212c:	f8c7 3090 	str.w	r3, [r7, #144]
   12130:	f8d7 3090 	ldr.w	r3, [r7, #144]
   12134:	2b00      	cmp	r3, #0
   12136:	d01b      	beq.n	12170 <_ZN9Krabi2015C2Eb+0x68c>
   12138:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1213c:	681b      	ldr	r3, [r3, #0]
   1213e:	6b5b      	ldr	r3, [r3, #52]
   12140:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
   12144:	9300      	str	r3, [sp, #0]
   12146:	f04f 0312 	mov.w	r3, #18	; 0x12
   1214a:	9301      	str	r3, [sp, #4]
   1214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12150:	9302      	str	r3, [sp, #8]
   12152:	f04f 0300 	mov.w	r3, #0	; 0x0
   12156:	9303      	str	r3, [sp, #12]
   12158:	f8d7 0090 	ldr.w	r0, [r7, #144]
   1215c:	ca06      	ldmia	r2!, {r1, r2}
   1215e:	f8d7 308c 	ldr.w	r3, [r7, #140]
   12162:	f7fe f909 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12166:	f8d7 3090 	ldr.w	r3, [r7, #144]
   1216a:	f8c7 3094 	str.w	r3, [r7, #148]
   1216e:	e003      	b.n	12178 <_ZN9Krabi2015C2Eb+0x694>
   12170:	f8d7 3090 	ldr.w	r3, [r7, #144]
   12174:	f8c7 3094 	str.w	r3, [r7, #148]
   12178:	f8d7 3094 	ldr.w	r3, [r7, #148]
   1217c:	f8c7 32d8 	str.w	r3, [r7, #728]
    Etape* etape10 = new Etape(Position(1500, 1650, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12180:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12184:	2b00      	cmp	r3, #0
   12186:	bf0c      	ite	eq
   12188:	2300      	moveq	r3, #0
   1218a:	2301      	movne	r3, #1
   1218c:	fa5f fc83 	uxtb.w	ip, r3
   12190:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
   12194:	4618      	mov	r0, r3
   12196:	f8df 1544 	ldr.w	r1, [pc, #1348]	; 126dc <_ZN9Krabi2015C2Eb+0xbf8>
   1219a:	f8df 2544 	ldr.w	r2, [pc, #1348]	; 126e0 <_ZN9Krabi2015C2Eb+0xbfc>
   1219e:	4663      	mov	r3, ip
   121a0:	f7fc fa40 	bl	e624 <_ZN8PositionC1Effb>
   121a4:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   121a8:	f8c7 3098 	str.w	r3, [r7, #152]
   121ac:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   121b0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   121b4:	f8c7 32ac 	str.w	r3, [r7, #684]
   121b8:	f04f 0034 	mov.w	r0, #52	; 0x34
   121bc:	f7fc f8cc 	bl	e358 <_Znwj>
   121c0:	4603      	mov	r3, r0
   121c2:	f8c7 309c 	str.w	r3, [r7, #156]
   121c6:	f8d7 309c 	ldr.w	r3, [r7, #156]
   121ca:	2b00      	cmp	r3, #0
   121cc:	d01b      	beq.n	12206 <_ZN9Krabi2015C2Eb+0x722>
   121ce:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   121d2:	681b      	ldr	r3, [r3, #0]
   121d4:	6b5b      	ldr	r3, [r3, #52]
   121d6:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
   121da:	9300      	str	r3, [sp, #0]
   121dc:	f04f 0312 	mov.w	r3, #18	; 0x12
   121e0:	9301      	str	r3, [sp, #4]
   121e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121e6:	9302      	str	r3, [sp, #8]
   121e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   121ec:	9303      	str	r3, [sp, #12]
   121ee:	f8d7 009c 	ldr.w	r0, [r7, #156]
   121f2:	ca06      	ldmia	r2!, {r1, r2}
   121f4:	f8d7 3098 	ldr.w	r3, [r7, #152]
   121f8:	f7fe f8be 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   121fc:	f8d7 309c 	ldr.w	r3, [r7, #156]
   12200:	f8c7 30a0 	str.w	r3, [r7, #160]
   12204:	e003      	b.n	1220e <_ZN9Krabi2015C2Eb+0x72a>
   12206:	f8d7 309c 	ldr.w	r3, [r7, #156]
   1220a:	f8c7 30a0 	str.w	r3, [r7, #160]
   1220e:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   12212:	f8c7 32dc 	str.w	r3, [r7, #732]
    Etape* etape11 = new Etape(Position(2090, 830, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   12216:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   1221a:	2b00      	cmp	r3, #0
   1221c:	bf0c      	ite	eq
   1221e:	2300      	moveq	r3, #0
   12220:	2301      	movne	r3, #1
   12222:	fa5f fc83 	uxtb.w	ip, r3
   12226:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
   1222a:	4618      	mov	r0, r3
   1222c:	f8df 14b4 	ldr.w	r1, [pc, #1204]	; 126e4 <_ZN9Krabi2015C2Eb+0xc00>
   12230:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 126d8 <_ZN9Krabi2015C2Eb+0xbf4>
   12234:	4663      	mov	r3, ip
   12236:	f7fc f9f5 	bl	e624 <_ZN8PositionC1Effb>
   1223a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1223e:	f8c7 30a4 	str.w	r3, [r7, #164]
   12242:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12246:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1224a:	f8c7 32ac 	str.w	r3, [r7, #684]
   1224e:	f04f 0034 	mov.w	r0, #52	; 0x34
   12252:	f7fc f881 	bl	e358 <_Znwj>
   12256:	4603      	mov	r3, r0
   12258:	f8c7 30a8 	str.w	r3, [r7, #168]
   1225c:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   12260:	2b00      	cmp	r3, #0
   12262:	d01b      	beq.n	1229c <_ZN9Krabi2015C2Eb+0x7b8>
   12264:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12268:	681b      	ldr	r3, [r3, #0]
   1226a:	6b5b      	ldr	r3, [r3, #52]
   1226c:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
   12270:	9300      	str	r3, [sp, #0]
   12272:	f04f 0312 	mov.w	r3, #18	; 0x12
   12276:	9301      	str	r3, [sp, #4]
   12278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1227c:	9302      	str	r3, [sp, #8]
   1227e:	f04f 0300 	mov.w	r3, #0	; 0x0
   12282:	9303      	str	r3, [sp, #12]
   12284:	f8d7 00a8 	ldr.w	r0, [r7, #168]
   12288:	ca06      	ldmia	r2!, {r1, r2}
   1228a:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   1228e:	f7fe f873 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12292:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   12296:	f8c7 30ac 	str.w	r3, [r7, #172]
   1229a:	e003      	b.n	122a4 <_ZN9Krabi2015C2Eb+0x7c0>
   1229c:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   122a0:	f8c7 30ac 	str.w	r3, [r7, #172]
   122a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]
   122a8:	f8c7 32e0 	str.w	r3, [r7, #736]
    Etape* etape12 = new Etape(Position(2750, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::GOBELET, -1, 0);
   122ac:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   122b0:	2b00      	cmp	r3, #0
   122b2:	bf0c      	ite	eq
   122b4:	2300      	moveq	r3, #0
   122b6:	2301      	movne	r3, #1
   122b8:	fa5f fc83 	uxtb.w	ip, r3
   122bc:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
   122c0:	4618      	mov	r0, r3
   122c2:	f8df 1424 	ldr.w	r1, [pc, #1060]	; 126e8 <_ZN9Krabi2015C2Eb+0xc04>
   122c6:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 126d0 <_ZN9Krabi2015C2Eb+0xbec>
   122ca:	4663      	mov	r3, ip
   122cc:	f7fc f9aa 	bl	e624 <_ZN8PositionC1Effb>
   122d0:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   122d4:	f8c7 30b0 	str.w	r3, [r7, #176]
   122d8:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   122dc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   122e0:	f8c7 32ac 	str.w	r3, [r7, #684]
   122e4:	f04f 0034 	mov.w	r0, #52	; 0x34
   122e8:	f7fc f836 	bl	e358 <_Znwj>
   122ec:	4603      	mov	r3, r0
   122ee:	f8c7 30b4 	str.w	r3, [r7, #180]
   122f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   122f6:	2b00      	cmp	r3, #0
   122f8:	d01b      	beq.n	12332 <_ZN9Krabi2015C2Eb+0x84e>
   122fa:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   122fe:	681b      	ldr	r3, [r3, #0]
   12300:	6b5b      	ldr	r3, [r3, #52]
   12302:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
   12306:	9300      	str	r3, [sp, #0]
   12308:	f04f 0312 	mov.w	r3, #18	; 0x12
   1230c:	9301      	str	r3, [sp, #4]
   1230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12312:	9302      	str	r3, [sp, #8]
   12314:	f04f 0300 	mov.w	r3, #0	; 0x0
   12318:	9303      	str	r3, [sp, #12]
   1231a:	f8d7 00b4 	ldr.w	r0, [r7, #180]
   1231e:	ca06      	ldmia	r2!, {r1, r2}
   12320:	f8d7 30b0 	ldr.w	r3, [r7, #176]
   12324:	f7fe f828 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12328:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   1232c:	f8c7 30b8 	str.w	r3, [r7, #184]
   12330:	e003      	b.n	1233a <_ZN9Krabi2015C2Eb+0x856>
   12332:	f8d7 30b4 	ldr.w	r3, [r7, #180]
   12336:	f8c7 30b8 	str.w	r3, [r7, #184]
   1233a:	f8d7 30b8 	ldr.w	r3, [r7, #184]
   1233e:	f8c7 32e4 	str.w	r3, [r7, #740]
    Etape* etape13 = new Etape(Position(90, 1750, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   12342:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12346:	2b00      	cmp	r3, #0
   12348:	bf0c      	ite	eq
   1234a:	2300      	moveq	r3, #0
   1234c:	2301      	movne	r3, #1
   1234e:	fa5f fc83 	uxtb.w	ip, r3
   12352:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
   12356:	4618      	mov	r0, r3
   12358:	49e4      	ldr	r1, [pc, #912]	(126ec <_ZN9Krabi2015C2Eb+0xc08>)
   1235a:	4add      	ldr	r2, [pc, #884]	(126d0 <_ZN9Krabi2015C2Eb+0xbec>)
   1235c:	4663      	mov	r3, ip
   1235e:	f7fc f961 	bl	e624 <_ZN8PositionC1Effb>
   12362:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12366:	f8c7 30bc 	str.w	r3, [r7, #188]
   1236a:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1236e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12372:	f8c7 32ac 	str.w	r3, [r7, #684]
   12376:	f04f 0034 	mov.w	r0, #52	; 0x34
   1237a:	f7fb ffed 	bl	e358 <_Znwj>
   1237e:	4603      	mov	r3, r0
   12380:	f8c7 30c0 	str.w	r3, [r7, #192]
   12384:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   12388:	2b00      	cmp	r3, #0
   1238a:	d01b      	beq.n	123c4 <_ZN9Krabi2015C2Eb+0x8e0>
   1238c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12390:	681b      	ldr	r3, [r3, #0]
   12392:	6b5b      	ldr	r3, [r3, #52]
   12394:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
   12398:	9300      	str	r3, [sp, #0]
   1239a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1239e:	9301      	str	r3, [sp, #4]
   123a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   123a4:	9302      	str	r3, [sp, #8]
   123a6:	f04f 0300 	mov.w	r3, #0	; 0x0
   123aa:	9303      	str	r3, [sp, #12]
   123ac:	f8d7 00c0 	ldr.w	r0, [r7, #192]
   123b0:	ca06      	ldmia	r2!, {r1, r2}
   123b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]
   123b6:	f7fd ffdf 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   123ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   123be:	f8c7 30c4 	str.w	r3, [r7, #196]
   123c2:	e003      	b.n	123cc <_ZN9Krabi2015C2Eb+0x8e8>
   123c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]
   123c8:	f8c7 30c4 	str.w	r3, [r7, #196]
   123cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]
   123d0:	f8c7 32e8 	str.w	r3, [r7, #744]
    Etape* etape14 = new Etape(Position(90, 1850, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   123d4:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   123d8:	2b00      	cmp	r3, #0
   123da:	bf0c      	ite	eq
   123dc:	2300      	moveq	r3, #0
   123de:	2301      	movne	r3, #1
   123e0:	fa5f fc83 	uxtb.w	ip, r3
   123e4:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
   123e8:	4618      	mov	r0, r3
   123ea:	49c0      	ldr	r1, [pc, #768]	(126ec <_ZN9Krabi2015C2Eb+0xc08>)
   123ec:	4ac0      	ldr	r2, [pc, #768]	(126f0 <_ZN9Krabi2015C2Eb+0xc0c>)
   123ee:	4663      	mov	r3, ip
   123f0:	f7fc f918 	bl	e624 <_ZN8PositionC1Effb>
   123f4:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   123f8:	f8c7 30c8 	str.w	r3, [r7, #200]
   123fc:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12400:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12404:	f8c7 32ac 	str.w	r3, [r7, #684]
   12408:	f04f 0034 	mov.w	r0, #52	; 0x34
   1240c:	f7fb ffa4 	bl	e358 <_Znwj>
   12410:	4603      	mov	r3, r0
   12412:	f8c7 30cc 	str.w	r3, [r7, #204]
   12416:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   1241a:	2b00      	cmp	r3, #0
   1241c:	d01b      	beq.n	12456 <_ZN9Krabi2015C2Eb+0x972>
   1241e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12422:	681b      	ldr	r3, [r3, #0]
   12424:	6b5b      	ldr	r3, [r3, #52]
   12426:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
   1242a:	9300      	str	r3, [sp, #0]
   1242c:	f04f 0313 	mov.w	r3, #19	; 0x13
   12430:	9301      	str	r3, [sp, #4]
   12432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12436:	9302      	str	r3, [sp, #8]
   12438:	f04f 0300 	mov.w	r3, #0	; 0x0
   1243c:	9303      	str	r3, [sp, #12]
   1243e:	f8d7 00cc 	ldr.w	r0, [r7, #204]
   12442:	ca06      	ldmia	r2!, {r1, r2}
   12444:	f8d7 30c8 	ldr.w	r3, [r7, #200]
   12448:	f7fd ff96 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1244c:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   12450:	f8c7 30d0 	str.w	r3, [r7, #208]
   12454:	e003      	b.n	1245e <_ZN9Krabi2015C2Eb+0x97a>
   12456:	f8d7 30cc 	ldr.w	r3, [r7, #204]
   1245a:	f8c7 30d0 	str.w	r3, [r7, #208]
   1245e:	f8d7 30d0 	ldr.w	r3, [r7, #208]
   12462:	f8c7 32ec 	str.w	r3, [r7, #748]
    Etape* etape15 = new Etape(Position(90, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   12466:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   1246a:	2b00      	cmp	r3, #0
   1246c:	bf0c      	ite	eq
   1246e:	2300      	moveq	r3, #0
   12470:	2301      	movne	r3, #1
   12472:	fa5f fc83 	uxtb.w	ip, r3
   12476:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
   1247a:	4618      	mov	r0, r3
   1247c:	499b      	ldr	r1, [pc, #620]	(126ec <_ZN9Krabi2015C2Eb+0xc08>)
   1247e:	4a9d      	ldr	r2, [pc, #628]	(126f4 <_ZN9Krabi2015C2Eb+0xc10>)
   12480:	4663      	mov	r3, ip
   12482:	f7fc f8cf 	bl	e624 <_ZN8PositionC1Effb>
   12486:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1248a:	f8c7 30d4 	str.w	r3, [r7, #212]
   1248e:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12492:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12496:	f8c7 32ac 	str.w	r3, [r7, #684]
   1249a:	f04f 0034 	mov.w	r0, #52	; 0x34
   1249e:	f7fb ff5b 	bl	e358 <_Znwj>
   124a2:	4603      	mov	r3, r0
   124a4:	f8c7 30d8 	str.w	r3, [r7, #216]
   124a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   124ac:	2b00      	cmp	r3, #0
   124ae:	d01b      	beq.n	124e8 <_ZN9Krabi2015C2Eb+0xa04>
   124b0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   124b4:	681b      	ldr	r3, [r3, #0]
   124b6:	6b5b      	ldr	r3, [r3, #52]
   124b8:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
   124bc:	9300      	str	r3, [sp, #0]
   124be:	f04f 0313 	mov.w	r3, #19	; 0x13
   124c2:	9301      	str	r3, [sp, #4]
   124c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   124c8:	9302      	str	r3, [sp, #8]
   124ca:	f04f 0300 	mov.w	r3, #0	; 0x0
   124ce:	9303      	str	r3, [sp, #12]
   124d0:	f8d7 00d8 	ldr.w	r0, [r7, #216]
   124d4:	ca06      	ldmia	r2!, {r1, r2}
   124d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]
   124da:	f7fd ff4d 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   124de:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   124e2:	f8c7 30dc 	str.w	r3, [r7, #220]
   124e6:	e003      	b.n	124f0 <_ZN9Krabi2015C2Eb+0xa0c>
   124e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]
   124ec:	f8c7 30dc 	str.w	r3, [r7, #220]
   124f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]
   124f4:	f8c7 32f0 	str.w	r3, [r7, #752]
    Etape* etape16 = new Etape(Position(850, 100, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   124f8:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   124fc:	2b00      	cmp	r3, #0
   124fe:	bf0c      	ite	eq
   12500:	2300      	moveq	r3, #0
   12502:	2301      	movne	r3, #1
   12504:	fa5f fc83 	uxtb.w	ip, r3
   12508:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
   1250c:	4618      	mov	r0, r3
   1250e:	497a      	ldr	r1, [pc, #488]	(126f8 <_ZN9Krabi2015C2Eb+0xc14>)
   12510:	4a7a      	ldr	r2, [pc, #488]	(126fc <_ZN9Krabi2015C2Eb+0xc18>)
   12512:	4663      	mov	r3, ip
   12514:	f7fc f886 	bl	e624 <_ZN8PositionC1Effb>
   12518:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1251c:	f8c7 30e0 	str.w	r3, [r7, #224]
   12520:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12524:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12528:	f8c7 32ac 	str.w	r3, [r7, #684]
   1252c:	f04f 0034 	mov.w	r0, #52	; 0x34
   12530:	f7fb ff12 	bl	e358 <_Znwj>
   12534:	4603      	mov	r3, r0
   12536:	f8c7 30e4 	str.w	r3, [r7, #228]
   1253a:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   1253e:	2b00      	cmp	r3, #0
   12540:	d01b      	beq.n	1257a <_ZN9Krabi2015C2Eb+0xa96>
   12542:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12546:	681b      	ldr	r3, [r3, #0]
   12548:	6b5b      	ldr	r3, [r3, #52]
   1254a:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
   1254e:	9300      	str	r3, [sp, #0]
   12550:	f04f 0313 	mov.w	r3, #19	; 0x13
   12554:	9301      	str	r3, [sp, #4]
   12556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1255a:	9302      	str	r3, [sp, #8]
   1255c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12560:	9303      	str	r3, [sp, #12]
   12562:	f8d7 00e4 	ldr.w	r0, [r7, #228]
   12566:	ca06      	ldmia	r2!, {r1, r2}
   12568:	f8d7 30e0 	ldr.w	r3, [r7, #224]
   1256c:	f7fd ff04 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12570:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   12574:	f8c7 30e8 	str.w	r3, [r7, #232]
   12578:	e003      	b.n	12582 <_ZN9Krabi2015C2Eb+0xa9e>
   1257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]
   1257e:	f8c7 30e8 	str.w	r3, [r7, #232]
   12582:	f8d7 30e8 	ldr.w	r3, [r7, #232]
   12586:	f8c7 32f4 	str.w	r3, [r7, #756]
    Etape* etape17 = new Etape(Position(850, 200, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1258a:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   1258e:	2b00      	cmp	r3, #0
   12590:	bf0c      	ite	eq
   12592:	2300      	moveq	r3, #0
   12594:	2301      	movne	r3, #1
   12596:	fa5f fc83 	uxtb.w	ip, r3
   1259a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
   1259e:	4618      	mov	r0, r3
   125a0:	4955      	ldr	r1, [pc, #340]	(126f8 <_ZN9Krabi2015C2Eb+0xc14>)
   125a2:	4a54      	ldr	r2, [pc, #336]	(126f4 <_ZN9Krabi2015C2Eb+0xc10>)
   125a4:	4663      	mov	r3, ip
   125a6:	f7fc f83d 	bl	e624 <_ZN8PositionC1Effb>
   125aa:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   125ae:	f8c7 30ec 	str.w	r3, [r7, #236]
   125b2:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   125b6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   125ba:	f8c7 32ac 	str.w	r3, [r7, #684]
   125be:	f04f 0034 	mov.w	r0, #52	; 0x34
   125c2:	f7fb fec9 	bl	e358 <_Znwj>
   125c6:	4603      	mov	r3, r0
   125c8:	f8c7 30f0 	str.w	r3, [r7, #240]
   125cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   125d0:	2b00      	cmp	r3, #0
   125d2:	d01b      	beq.n	1260c <_ZN9Krabi2015C2Eb+0xb28>
   125d4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   125d8:	681b      	ldr	r3, [r3, #0]
   125da:	6b5b      	ldr	r3, [r3, #52]
   125dc:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
   125e0:	9300      	str	r3, [sp, #0]
   125e2:	f04f 0313 	mov.w	r3, #19	; 0x13
   125e6:	9301      	str	r3, [sp, #4]
   125e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   125ec:	9302      	str	r3, [sp, #8]
   125ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   125f2:	9303      	str	r3, [sp, #12]
   125f4:	f8d7 00f0 	ldr.w	r0, [r7, #240]
   125f8:	ca06      	ldmia	r2!, {r1, r2}
   125fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]
   125fe:	f7fd febb 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12602:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   12606:	f8c7 30f4 	str.w	r3, [r7, #244]
   1260a:	e003      	b.n	12614 <_ZN9Krabi2015C2Eb+0xb30>
   1260c:	f8d7 30f0 	ldr.w	r3, [r7, #240]
   12610:	f8c7 30f4 	str.w	r3, [r7, #244]
   12614:	f8d7 30f4 	ldr.w	r3, [r7, #244]
   12618:	f8c7 32f8 	str.w	r3, [r7, #760]
    Etape* etape18 = new Etape(Position(870, 1355, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   1261c:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12620:	2b00      	cmp	r3, #0
   12622:	bf0c      	ite	eq
   12624:	2300      	moveq	r3, #0
   12626:	2301      	movne	r3, #1
   12628:	fa5f fc83 	uxtb.w	ip, r3
   1262c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
   12630:	4618      	mov	r0, r3
   12632:	4933      	ldr	r1, [pc, #204]	(12700 <_ZN9Krabi2015C2Eb+0xc1c>)
   12634:	4a33      	ldr	r2, [pc, #204]	(12704 <_ZN9Krabi2015C2Eb+0xc20>)
   12636:	4663      	mov	r3, ip
   12638:	f7fb fff4 	bl	e624 <_ZN8PositionC1Effb>
   1263c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12640:	f8c7 30f8 	str.w	r3, [r7, #248]
   12644:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12648:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1264c:	f8c7 32ac 	str.w	r3, [r7, #684]
   12650:	f04f 0034 	mov.w	r0, #52	; 0x34
   12654:	f7fb fe80 	bl	e358 <_Znwj>
   12658:	4603      	mov	r3, r0
   1265a:	f8c7 30fc 	str.w	r3, [r7, #252]
   1265e:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   12662:	2b00      	cmp	r3, #0
   12664:	d050      	beq.n	12708 <_ZN9Krabi2015C2Eb+0xc24>
   12666:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1266a:	681b      	ldr	r3, [r3, #0]
   1266c:	6b5b      	ldr	r3, [r3, #52]
   1266e:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
   12672:	9300      	str	r3, [sp, #0]
   12674:	f04f 0313 	mov.w	r3, #19	; 0x13
   12678:	9301      	str	r3, [sp, #4]
   1267a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1267e:	9302      	str	r3, [sp, #8]
   12680:	f04f 0300 	mov.w	r3, #0	; 0x0
   12684:	9303      	str	r3, [sp, #12]
   12686:	f8d7 00fc 	ldr.w	r0, [r7, #252]
   1268a:	ca06      	ldmia	r2!, {r1, r2}
   1268c:	f8d7 30f8 	ldr.w	r3, [r7, #248]
   12690:	f7fd fe72 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12694:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   12698:	f8c7 3100 	str.w	r3, [r7, #256]
   1269c:	e038      	b.n	12710 <_ZN9Krabi2015C2Eb+0xc2c>
   1269e:	46c0      	nop			(mov r8, r8)
   126a0:	0001fc48 	.word	0x0001fc48
   126a4:	00000000 	.word	0x00000000
   126a8:	41f00000 	.word	0x41f00000
   126ac:	437a0000 	.word	0x437a0000
   126b0:	447a0000 	.word	0x447a0000
   126b4:	442f0000 	.word	0x442f0000
   126b8:	44510000 	.word	0x44510000
   126bc:	44d48000 	.word	0x44d48000
   126c0:	436c0000 	.word	0x436c0000
   126c4:	43c80000 	.word	0x43c80000
   126c8:	451c4000 	.word	0x451c4000
   126cc:	450fc000 	.word	0x450fc000
   126d0:	44dac000 	.word	0x44dac000
   126d4:	44638000 	.word	0x44638000
   126d8:	444f8000 	.word	0x444f8000
   126dc:	44bb8000 	.word	0x44bb8000
   126e0:	44ce4000 	.word	0x44ce4000
   126e4:	4502a000 	.word	0x4502a000
   126e8:	452be000 	.word	0x452be000
   126ec:	42b40000 	.word	0x42b40000
   126f0:	44e74000 	.word	0x44e74000
   126f4:	43480000 	.word	0x43480000
   126f8:	44548000 	.word	0x44548000
   126fc:	42c80000 	.word	0x42c80000
   12700:	44598000 	.word	0x44598000
   12704:	44a96000 	.word	0x44a96000
   12708:	f8d7 30fc 	ldr.w	r3, [r7, #252]
   1270c:	f8c7 3100 	str.w	r3, [r7, #256]
   12710:	f8d7 3100 	ldr.w	r3, [r7, #256]
   12714:	f8c7 32fc 	str.w	r3, [r7, #764]
    Etape* etape19 = new Etape(Position(1100, 1770, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   12718:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   1271c:	2b00      	cmp	r3, #0
   1271e:	bf0c      	ite	eq
   12720:	2300      	moveq	r3, #0
   12722:	2301      	movne	r3, #1
   12724:	fa5f fc83 	uxtb.w	ip, r3
   12728:	f507 7301 	add.w	r3, r7, #516	; 0x204
   1272c:	4618      	mov	r0, r3
   1272e:	f8df 1860 	ldr.w	r1, [pc, #2144]	; 12f90 <_ZN9Krabi2015C2Eb+0x14ac>
   12732:	f8df 2860 	ldr.w	r2, [pc, #2144]	; 12f94 <_ZN9Krabi2015C2Eb+0x14b0>
   12736:	4663      	mov	r3, ip
   12738:	f7fb ff74 	bl	e624 <_ZN8PositionC1Effb>
   1273c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12740:	f8c7 3104 	str.w	r3, [r7, #260]
   12744:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12748:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1274c:	f8c7 32ac 	str.w	r3, [r7, #684]
   12750:	f04f 0034 	mov.w	r0, #52	; 0x34
   12754:	f7fb fe00 	bl	e358 <_Znwj>
   12758:	4603      	mov	r3, r0
   1275a:	f8c7 3108 	str.w	r3, [r7, #264]
   1275e:	f8d7 3108 	ldr.w	r3, [r7, #264]
   12762:	2b00      	cmp	r3, #0
   12764:	d01b      	beq.n	1279e <_ZN9Krabi2015C2Eb+0xcba>
   12766:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1276a:	681b      	ldr	r3, [r3, #0]
   1276c:	6b5b      	ldr	r3, [r3, #52]
   1276e:	f507 7201 	add.w	r2, r7, #516	; 0x204
   12772:	9300      	str	r3, [sp, #0]
   12774:	f04f 0313 	mov.w	r3, #19	; 0x13
   12778:	9301      	str	r3, [sp, #4]
   1277a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1277e:	9302      	str	r3, [sp, #8]
   12780:	f04f 0300 	mov.w	r3, #0	; 0x0
   12784:	9303      	str	r3, [sp, #12]
   12786:	f8d7 0108 	ldr.w	r0, [r7, #264]
   1278a:	ca06      	ldmia	r2!, {r1, r2}
   1278c:	f8d7 3104 	ldr.w	r3, [r7, #260]
   12790:	f7fd fdf2 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12794:	f8d7 3108 	ldr.w	r3, [r7, #264]
   12798:	f8c7 310c 	str.w	r3, [r7, #268]
   1279c:	e003      	b.n	127a6 <_ZN9Krabi2015C2Eb+0xcc2>
   1279e:	f8d7 3108 	ldr.w	r3, [r7, #264]
   127a2:	f8c7 310c 	str.w	r3, [r7, #268]
   127a6:	f8d7 310c 	ldr.w	r3, [r7, #268]
   127aa:	f8c7 3300 	str.w	r3, [r7, #768]
    Etape* etape20 = new Etape(Position(1300, 1400, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::PIED, -1, 0);
   127ae:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   127b2:	2b00      	cmp	r3, #0
   127b4:	bf0c      	ite	eq
   127b6:	2300      	moveq	r3, #0
   127b8:	2301      	movne	r3, #1
   127ba:	fa5f fc83 	uxtb.w	ip, r3
   127be:	f507 7303 	add.w	r3, r7, #524	; 0x20c
   127c2:	4618      	mov	r0, r3
   127c4:	f8df 17d0 	ldr.w	r1, [pc, #2000]	; 12f98 <_ZN9Krabi2015C2Eb+0x14b4>
   127c8:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 12f9c <_ZN9Krabi2015C2Eb+0x14b8>
   127cc:	4663      	mov	r3, ip
   127ce:	f7fb ff29 	bl	e624 <_ZN8PositionC1Effb>
   127d2:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   127d6:	f8c7 3110 	str.w	r3, [r7, #272]
   127da:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   127de:	f103 0301 	add.w	r3, r3, #1	; 0x1
   127e2:	f8c7 32ac 	str.w	r3, [r7, #684]
   127e6:	f04f 0034 	mov.w	r0, #52	; 0x34
   127ea:	f7fb fdb5 	bl	e358 <_Znwj>
   127ee:	4603      	mov	r3, r0
   127f0:	f8c7 3114 	str.w	r3, [r7, #276]
   127f4:	f8d7 3114 	ldr.w	r3, [r7, #276]
   127f8:	2b00      	cmp	r3, #0
   127fa:	d01b      	beq.n	12834 <_ZN9Krabi2015C2Eb+0xd50>
   127fc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12800:	681b      	ldr	r3, [r3, #0]
   12802:	6b5b      	ldr	r3, [r3, #52]
   12804:	f507 7203 	add.w	r2, r7, #524	; 0x20c
   12808:	9300      	str	r3, [sp, #0]
   1280a:	f04f 0313 	mov.w	r3, #19	; 0x13
   1280e:	9301      	str	r3, [sp, #4]
   12810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12814:	9302      	str	r3, [sp, #8]
   12816:	f04f 0300 	mov.w	r3, #0	; 0x0
   1281a:	9303      	str	r3, [sp, #12]
   1281c:	f8d7 0114 	ldr.w	r0, [r7, #276]
   12820:	ca06      	ldmia	r2!, {r1, r2}
   12822:	f8d7 3110 	ldr.w	r3, [r7, #272]
   12826:	f7fd fda7 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   1282a:	f8d7 3114 	ldr.w	r3, [r7, #276]
   1282e:	f8c7 3118 	str.w	r3, [r7, #280]
   12832:	e003      	b.n	1283c <_ZN9Krabi2015C2Eb+0xd58>
   12834:	f8d7 3114 	ldr.w	r3, [r7, #276]
   12838:	f8c7 3118 	str.w	r3, [r7, #280]
   1283c:	f8d7 3118 	ldr.w	r3, [r7, #280]
   12840:	f8c7 3304 	str.w	r3, [r7, #772]
    Etape* etape21 = new Etape(Position(1250, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   12844:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12848:	2b00      	cmp	r3, #0
   1284a:	bf0c      	ite	eq
   1284c:	2300      	moveq	r3, #0
   1284e:	2301      	movne	r3, #1
   12850:	fa5f fc83 	uxtb.w	ip, r3
   12854:	f507 7305 	add.w	r3, r7, #532	; 0x214
   12858:	4618      	mov	r0, r3
   1285a:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 12fa0 <_ZN9Krabi2015C2Eb+0x14bc>
   1285e:	f8df 2744 	ldr.w	r2, [pc, #1860]	; 12fa4 <_ZN9Krabi2015C2Eb+0x14c0>
   12862:	4663      	mov	r3, ip
   12864:	f7fb fede 	bl	e624 <_ZN8PositionC1Effb>
   12868:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1286c:	f8c7 311c 	str.w	r3, [r7, #284]
   12870:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12874:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12878:	f8c7 32ac 	str.w	r3, [r7, #684]
   1287c:	f04f 0034 	mov.w	r0, #52	; 0x34
   12880:	f7fb fd6a 	bl	e358 <_Znwj>
   12884:	4603      	mov	r3, r0
   12886:	f8c7 3120 	str.w	r3, [r7, #288]
   1288a:	f8d7 3120 	ldr.w	r3, [r7, #288]
   1288e:	2b00      	cmp	r3, #0
   12890:	d01b      	beq.n	128ca <_ZN9Krabi2015C2Eb+0xde6>
   12892:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12896:	681b      	ldr	r3, [r3, #0]
   12898:	6b5b      	ldr	r3, [r3, #52]
   1289a:	f507 7205 	add.w	r2, r7, #532	; 0x214
   1289e:	9300      	str	r3, [sp, #0]
   128a0:	f04f 0314 	mov.w	r3, #20	; 0x14
   128a4:	9301      	str	r3, [sp, #4]
   128a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   128aa:	9302      	str	r3, [sp, #8]
   128ac:	f04f 0300 	mov.w	r3, #0	; 0x0
   128b0:	9303      	str	r3, [sp, #12]
   128b2:	f8d7 0120 	ldr.w	r0, [r7, #288]
   128b6:	ca06      	ldmia	r2!, {r1, r2}
   128b8:	f8d7 311c 	ldr.w	r3, [r7, #284]
   128bc:	f7fd fd5c 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   128c0:	f8d7 3120 	ldr.w	r3, [r7, #288]
   128c4:	f8c7 3124 	str.w	r3, [r7, #292]
   128c8:	e003      	b.n	128d2 <_ZN9Krabi2015C2Eb+0xdee>
   128ca:	f8d7 3120 	ldr.w	r3, [r7, #288]
   128ce:	f8c7 3124 	str.w	r3, [r7, #292]
   128d2:	f8d7 3124 	ldr.w	r3, [r7, #292]
   128d6:	f8c7 3308 	str.w	r3, [r7, #776]
    Etape* etape22 = new Etape(Position(1750, 1800, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::AMPOULE, -1, 0);
   128da:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   128de:	2b00      	cmp	r3, #0
   128e0:	bf0c      	ite	eq
   128e2:	2300      	moveq	r3, #0
   128e4:	2301      	movne	r3, #1
   128e6:	fa5f fc83 	uxtb.w	ip, r3
   128ea:	f507 7307 	add.w	r3, r7, #540	; 0x21c
   128ee:	4618      	mov	r0, r3
   128f0:	f8df 16b4 	ldr.w	r1, [pc, #1716]	; 12fa8 <_ZN9Krabi2015C2Eb+0x14c4>
   128f4:	f8df 26ac 	ldr.w	r2, [pc, #1708]	; 12fa4 <_ZN9Krabi2015C2Eb+0x14c0>
   128f8:	4663      	mov	r3, ip
   128fa:	f7fb fe93 	bl	e624 <_ZN8PositionC1Effb>
   128fe:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12902:	f8c7 3128 	str.w	r3, [r7, #296]
   12906:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   1290a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1290e:	f8c7 32ac 	str.w	r3, [r7, #684]
   12912:	f04f 0034 	mov.w	r0, #52	; 0x34
   12916:	f7fb fd1f 	bl	e358 <_Znwj>
   1291a:	4603      	mov	r3, r0
   1291c:	f8c7 312c 	str.w	r3, [r7, #300]
   12920:	f8d7 312c 	ldr.w	r3, [r7, #300]
   12924:	2b00      	cmp	r3, #0
   12926:	d01b      	beq.n	12960 <_ZN9Krabi2015C2Eb+0xe7c>
   12928:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   1292c:	681b      	ldr	r3, [r3, #0]
   1292e:	6b5b      	ldr	r3, [r3, #52]
   12930:	f507 7207 	add.w	r2, r7, #540	; 0x21c
   12934:	9300      	str	r3, [sp, #0]
   12936:	f04f 0314 	mov.w	r3, #20	; 0x14
   1293a:	9301      	str	r3, [sp, #4]
   1293c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12940:	9302      	str	r3, [sp, #8]
   12942:	f04f 0300 	mov.w	r3, #0	; 0x0
   12946:	9303      	str	r3, [sp, #12]
   12948:	f8d7 012c 	ldr.w	r0, [r7, #300]
   1294c:	ca06      	ldmia	r2!, {r1, r2}
   1294e:	f8d7 3128 	ldr.w	r3, [r7, #296]
   12952:	f7fd fd11 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12956:	f8d7 312c 	ldr.w	r3, [r7, #300]
   1295a:	f8c7 3130 	str.w	r3, [r7, #304]
   1295e:	e003      	b.n	12968 <_ZN9Krabi2015C2Eb+0xe84>
   12960:	f8d7 312c 	ldr.w	r3, [r7, #300]
   12964:	f8c7 3130 	str.w	r3, [r7, #304]
   12968:	f8d7 3130 	ldr.w	r3, [r7, #304]
   1296c:	f8c7 330c 	str.w	r3, [r7, #780]
    Etape* etape23 = new Etape(Position(2300, 1500, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12970:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12974:	2b00      	cmp	r3, #0
   12976:	bf0c      	ite	eq
   12978:	2300      	moveq	r3, #0
   1297a:	2301      	movne	r3, #1
   1297c:	fa5f fc83 	uxtb.w	ip, r3
   12980:	f507 7309 	add.w	r3, r7, #548	; 0x224
   12984:	4618      	mov	r0, r3
   12986:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 12fac <_ZN9Krabi2015C2Eb+0x14c8>
   1298a:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 12fb0 <_ZN9Krabi2015C2Eb+0x14cc>
   1298e:	4663      	mov	r3, ip
   12990:	f7fb fe48 	bl	e624 <_ZN8PositionC1Effb>
   12994:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12998:	f8c7 3134 	str.w	r3, [r7, #308]
   1299c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   129a0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   129a4:	f8c7 32ac 	str.w	r3, [r7, #684]
   129a8:	f04f 0034 	mov.w	r0, #52	; 0x34
   129ac:	f7fb fcd4 	bl	e358 <_Znwj>
   129b0:	4603      	mov	r3, r0
   129b2:	f8c7 3138 	str.w	r3, [r7, #312]
   129b6:	f8d7 3138 	ldr.w	r3, [r7, #312]
   129ba:	2b00      	cmp	r3, #0
   129bc:	d01c      	beq.n	129f8 <_ZN9Krabi2015C2Eb+0xf14>
   129be:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   129c2:	681b      	ldr	r3, [r3, #0]
   129c4:	6b5b      	ldr	r3, [r3, #52]
   129c6:	9300      	str	r3, [sp, #0]
   129c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   129cc:	9301      	str	r3, [sp, #4]
   129ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129d2:	9302      	str	r3, [sp, #8]
   129d4:	f04f 0300 	mov.w	r3, #0	; 0x0
   129d8:	9303      	str	r3, [sp, #12]
   129da:	f8d7 0138 	ldr.w	r0, [r7, #312]
   129de:	f507 7309 	add.w	r3, r7, #548	; 0x224
   129e2:	e893 0006 	ldmia.w	r3, {r1, r2}
   129e6:	f8d7 3134 	ldr.w	r3, [r7, #308]
   129ea:	f7fd fcc5 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   129ee:	f8d7 3138 	ldr.w	r3, [r7, #312]
   129f2:	f8c7 313c 	str.w	r3, [r7, #316]
   129f6:	e003      	b.n	12a00 <_ZN9Krabi2015C2Eb+0xf1c>
   129f8:	f8d7 3138 	ldr.w	r3, [r7, #312]
   129fc:	f8c7 313c 	str.w	r3, [r7, #316]
   12a00:	f8d7 313c 	ldr.w	r3, [r7, #316]
   12a04:	f8c7 3310 	str.w	r3, [r7, #784]
    Etape* etape24 = new Etape(Position(2800, 1450, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12a08:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	bf0c      	ite	eq
   12a10:	2300      	moveq	r3, #0
   12a12:	2301      	movne	r3, #1
   12a14:	fa5f fc83 	uxtb.w	ip, r3
   12a18:	f507 730b 	add.w	r3, r7, #556	; 0x22c
   12a1c:	4618      	mov	r0, r3
   12a1e:	f8df 1594 	ldr.w	r1, [pc, #1428]	; 12fb4 <_ZN9Krabi2015C2Eb+0x14d0>
   12a22:	f8df 2594 	ldr.w	r2, [pc, #1428]	; 12fb8 <_ZN9Krabi2015C2Eb+0x14d4>
   12a26:	4663      	mov	r3, ip
   12a28:	f7fb fdfc 	bl	e624 <_ZN8PositionC1Effb>
   12a2c:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12a30:	f8c7 3140 	str.w	r3, [r7, #320]
   12a34:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12a38:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12a3c:	f8c7 32ac 	str.w	r3, [r7, #684]
   12a40:	f04f 0034 	mov.w	r0, #52	; 0x34
   12a44:	f7fb fc88 	bl	e358 <_Znwj>
   12a48:	4603      	mov	r3, r0
   12a4a:	f8c7 3144 	str.w	r3, [r7, #324]
   12a4e:	f8d7 3144 	ldr.w	r3, [r7, #324]
   12a52:	2b00      	cmp	r3, #0
   12a54:	d01c      	beq.n	12a90 <_ZN9Krabi2015C2Eb+0xfac>
   12a56:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	6b5b      	ldr	r3, [r3, #52]
   12a5e:	9300      	str	r3, [sp, #0]
   12a60:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a64:	9301      	str	r3, [sp, #4]
   12a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a6a:	9302      	str	r3, [sp, #8]
   12a6c:	f04f 0300 	mov.w	r3, #0	; 0x0
   12a70:	9303      	str	r3, [sp, #12]
   12a72:	f8d7 0144 	ldr.w	r0, [r7, #324]
   12a76:	f507 730b 	add.w	r3, r7, #556	; 0x22c
   12a7a:	e893 0006 	ldmia.w	r3, {r1, r2}
   12a7e:	f8d7 3140 	ldr.w	r3, [r7, #320]
   12a82:	f7fd fc79 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12a86:	f8d7 3144 	ldr.w	r3, [r7, #324]
   12a8a:	f8c7 3148 	str.w	r3, [r7, #328]
   12a8e:	e003      	b.n	12a98 <_ZN9Krabi2015C2Eb+0xfb4>
   12a90:	f8d7 3144 	ldr.w	r3, [r7, #324]
   12a94:	f8c7 3148 	str.w	r3, [r7, #328]
   12a98:	f8d7 3148 	ldr.w	r3, [r7, #328]
   12a9c:	f8c7 3314 	str.w	r3, [r7, #788]
    Etape* etape25 = new Etape(Position(2800, 600, isYellow),   numeroEtape++, tableauEtapesTotal, Etape::POINT_PASSAGE, -1, 0);
   12aa0:	f8d7 32b0 	ldr.w	r3, [r7, #688]
   12aa4:	2b00      	cmp	r3, #0
   12aa6:	bf0c      	ite	eq
   12aa8:	2300      	moveq	r3, #0
   12aaa:	2301      	movne	r3, #1
   12aac:	fa5f fc83 	uxtb.w	ip, r3
   12ab0:	f507 730d 	add.w	r3, r7, #564	; 0x234
   12ab4:	4618      	mov	r0, r3
   12ab6:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 12fb4 <_ZN9Krabi2015C2Eb+0x14d0>
   12aba:	f8df 2500 	ldr.w	r2, [pc, #1280]	; 12fbc <_ZN9Krabi2015C2Eb+0x14d8>
   12abe:	4663      	mov	r3, ip
   12ac0:	f7fb fdb0 	bl	e624 <_ZN8PositionC1Effb>
   12ac4:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12ac8:	f8c7 314c 	str.w	r3, [r7, #332]
   12acc:	f8d7 32ac 	ldr.w	r3, [r7, #684]
   12ad0:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12ad4:	f8c7 32ac 	str.w	r3, [r7, #684]
   12ad8:	f04f 0034 	mov.w	r0, #52	; 0x34
   12adc:	f7fb fc3c 	bl	e358 <_Znwj>
   12ae0:	4603      	mov	r3, r0
   12ae2:	f8c7 3150 	str.w	r3, [r7, #336]
   12ae6:	f8d7 3150 	ldr.w	r3, [r7, #336]
   12aea:	2b00      	cmp	r3, #0
   12aec:	d01c      	beq.n	12b28 <_ZN9Krabi2015C2Eb+0x1044>
   12aee:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12af2:	681b      	ldr	r3, [r3, #0]
   12af4:	6b5b      	ldr	r3, [r3, #52]
   12af6:	9300      	str	r3, [sp, #0]
   12af8:	f04f 0300 	mov.w	r3, #0	; 0x0
   12afc:	9301      	str	r3, [sp, #4]
   12afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b02:	9302      	str	r3, [sp, #8]
   12b04:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b08:	9303      	str	r3, [sp, #12]
   12b0a:	f8d7 0150 	ldr.w	r0, [r7, #336]
   12b0e:	f507 730d 	add.w	r3, r7, #564	; 0x234
   12b12:	e893 0006 	ldmia.w	r3, {r1, r2}
   12b16:	f8d7 314c 	ldr.w	r3, [r7, #332]
   12b1a:	f7fd fc2d 	bl	10378 <_ZN5EtapeC1E8PositioniPPS_NS_9EtapeTypeEii>
   12b1e:	f8d7 3150 	ldr.w	r3, [r7, #336]
   12b22:	f8c7 3154 	str.w	r3, [r7, #340]
   12b26:	e003      	b.n	12b30 <_ZN9Krabi2015C2Eb+0x104c>
   12b28:	f8d7 3150 	ldr.w	r3, [r7, #336]
   12b2c:	f8c7 3154 	str.w	r3, [r7, #340]
   12b30:	f8d7 3154 	ldr.w	r3, [r7, #340]
   12b34:	f8c7 3318 	str.w	r3, [r7, #792]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   12b38:	f04f 0300 	mov.w	r3, #0	; 0x0
   12b3c:	f8c7 331c 	str.w	r3, [r7, #796]
   12b40:	e06a      	b.n	12c18 <_ZN9Krabi2015C2Eb+0x1134>
    {
        if (tableauEtapesTotal[i]->getState() == -1)
   12b42:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12b46:	681b      	ldr	r3, [r3, #0]
   12b48:	6b5a      	ldr	r2, [r3, #52]
   12b4a:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12b4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12b52:	4413      	add	r3, r2
   12b54:	681b      	ldr	r3, [r3, #0]
   12b56:	4618      	mov	r0, r3
   12b58:	f7fd f9e6 	bl	ff28 <_ZN5Etape8getStateEv>
   12b5c:	4603      	mov	r3, r0
   12b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12b62:	bf14      	ite	ne
   12b64:	2300      	movne	r3, #0
   12b66:	2301      	moveq	r3, #1
   12b68:	b2db      	uxtb	r3, r3
   12b6a:	2b00      	cmp	r3, #0
   12b6c:	d04e      	beq.n	12c0c <_ZN9Krabi2015C2Eb+0x1128>
        {
            actionGoto[i] = ActionGoTo(tableauEtapesTotal[i]->getPosition());
   12b6e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12b72:	681b      	ldr	r3, [r3, #0]
   12b74:	6a99      	ldr	r1, [r3, #40]
   12b76:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12b7a:	ea4f 1203 	mov.w	r2, r3, lsl #4
   12b7e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   12b82:	ebc2 0303 	rsb	r3, r2, r3
   12b86:	eb01 0403 	add.w	r4, r1, r3
   12b8a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12b8e:	681b      	ldr	r3, [r3, #0]
   12b90:	6b5a      	ldr	r2, [r3, #52]
   12b92:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12b96:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12b9a:	4413      	add	r3, r2
   12b9c:	681a      	ldr	r2, [r3, #0]
   12b9e:	f507 731b 	add.w	r3, r7, #620	; 0x26c
   12ba2:	4618      	mov	r0, r3
   12ba4:	4611      	mov	r1, r2
   12ba6:	f7fd f9ab 	bl	ff00 <_ZN5Etape11getPositionEv>
   12baa:	f507 720f 	add.w	r2, r7, #572	; 0x23c
   12bae:	f8df 3410 	ldr.w	r3, [pc, #1040]	; 12fc0 <_ZN9Krabi2015C2Eb+0x14dc>
   12bb2:	9300      	str	r3, [sp, #0]
   12bb4:	4610      	mov	r0, r2
   12bb6:	f507 731b 	add.w	r3, r7, #620	; 0x26c
   12bba:	e893 0006 	ldmia.w	r3, {r1, r2}
   12bbe:	f04f 0300 	mov.w	r3, #0	; 0x0
   12bc2:	f7fc fa55 	bl	f070 <_ZN10ActionGoToC1E8Positionbf>
   12bc6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
   12bca:	4620      	mov	r0, r4
   12bcc:	4619      	mov	r1, r3
   12bce:	f008 f821 	bl	1ac14 <_ZN10ActionGoToaSERKS_>
   12bd2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
   12bd6:	4618      	mov	r0, r3
   12bd8:	f7fc fa12 	bl	f000 <_ZN10ActionGoToD1Ev>
            actionEtape[i] = &actionGoto[i];
   12bdc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12be0:	681b      	ldr	r3, [r3, #0]
   12be2:	6a5a      	ldr	r2, [r3, #36]
   12be4:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12be8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   12bec:	eb02 0003 	add.w	r0, r2, r3
   12bf0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12bf4:	681b      	ldr	r3, [r3, #0]
   12bf6:	6a99      	ldr	r1, [r3, #40]
   12bf8:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12bfc:	ea4f 1203 	mov.w	r2, r3, lsl #4
   12c00:	ea4f 0382 	mov.w	r3, r2, lsl #2
   12c04:	ebc2 0303 	rsb	r3, r2, r3
   12c08:	440b      	add	r3, r1
   12c0a:	6003      	str	r3, [r0, #0]
    //J ai modifié NOMBRE_ETAPES dans krabi2015.h et le etape.h



    //Initialisation des actions par défaut
    for(int i = 0 ; i < NOMBRE_ETAPES ; i++)
   12c0c:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12c10:	f103 0301 	add.w	r3, r3, #1	; 0x1
   12c14:	f8c7 331c 	str.w	r3, [r7, #796]
   12c18:	f8d7 331c 	ldr.w	r3, [r7, #796]
   12c1c:	2b19      	cmp	r3, #25
   12c1e:	dd90      	ble.n	12b42 <_ZN9Krabi2015C2Eb+0x105e>
            actionEtape[i] = &actionGoto[i];
        }

    }

    actionClap[0]= Clap(Position(836, 1700, isBlue),Position(1000, 1700, isBlue));
   12c20:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12c24:	681b      	ldr	r3, [r3, #0]
   12c26:	f103 0448 	add.w	r4, r3, #72	; 0x48
   12c2a:	f507 7227 	add.w	r2, r7, #668	; 0x29c
   12c2e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12c32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12c36:	781b      	ldrb	r3, [r3, #0]
   12c38:	4610      	mov	r0, r2
   12c3a:	49e2      	ldr	r1, [pc, #904]	(12fc4 <_ZN9Krabi2015C2Eb+0x14e0>)
   12c3c:	4ae2      	ldr	r2, [pc, #904]	(12fc8 <_ZN9Krabi2015C2Eb+0x14e4>)
   12c3e:	f7fb fcf1 	bl	e624 <_ZN8PositionC1Effb>
   12c42:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
   12c46:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12c4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12c4e:	781b      	ldrb	r3, [r3, #0]
   12c50:	4610      	mov	r0, r2
   12c52:	49de      	ldr	r1, [pc, #888]	(12fcc <_ZN9Krabi2015C2Eb+0x14e8>)
   12c54:	4adc      	ldr	r2, [pc, #880]	(12fc8 <_ZN9Krabi2015C2Eb+0x14e4>)
   12c56:	f7fb fce5 	bl	e624 <_ZN8PositionC1Effb>
   12c5a:	f507 721d 	add.w	r2, r7, #628	; 0x274
   12c5e:	f8d7 32a8 	ldr.w	r3, [r7, #680]
   12c62:	9300      	str	r3, [sp, #0]
   12c64:	f8d7 32a4 	ldr.w	r3, [r7, #676]
   12c68:	4610      	mov	r0, r2
   12c6a:	f507 7227 	add.w	r2, r7, #668	; 0x29c
   12c6e:	ca06      	ldmia	r2!, {r1, r2}
   12c70:	f7fc fbe6 	bl	f440 <_ZN4ClapC1E8PositionS0_>
   12c74:	f507 731d 	add.w	r3, r7, #628	; 0x274
   12c78:	4620      	mov	r0, r4
   12c7a:	4619      	mov	r1, r3
   12c7c:	f007 fff6 	bl	1ac6c <_ZN4ClapaSERKS_>
   12c80:	f507 731d 	add.w	r3, r7, #628	; 0x274
   12c84:	4618      	mov	r0, r3
   12c86:	f7fc fba3 	bl	f3d0 <_ZN4ClapD1Ev>
    actionEtape[1]= &actionClap[0];
   12c8a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12c8e:	681b      	ldr	r3, [r3, #0]
   12c90:	6a5b      	ldr	r3, [r3, #36]
   12c92:	f103 0204 	add.w	r2, r3, #4	; 0x4
   12c96:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12c9a:	681b      	ldr	r3, [r3, #0]
   12c9c:	f103 0348 	add.w	r3, r3, #72	; 0x48
   12ca0:	6013      	str	r3, [r2, #0]


    etape0->addVoisin(etape1);
   12ca2:	f8d7 02b4 	ldr.w	r0, [r7, #692]
   12ca6:	f8d7 12b8 	ldr.w	r1, [r7, #696]
   12caa:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cae:	f7fd fa83 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape2);
   12cb2:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   12cb6:	f8d7 12bc 	ldr.w	r1, [r7, #700]
   12cba:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cbe:	f7fd fa7b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape9);
   12cc2:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   12cc6:	f8d7 12d8 	ldr.w	r1, [r7, #728]
   12cca:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cce:	f7fd fa73 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape23);
   12cd2:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   12cd6:	f8d7 1310 	ldr.w	r1, [r7, #784]
   12cda:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cde:	f7fd fa6b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape4);
   12ce2:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   12ce6:	f8d7 12c4 	ldr.w	r1, [r7, #708]
   12cea:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cee:	f7fd fa63 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape2->addVoisin(etape3);
   12cf2:	f8d7 02bc 	ldr.w	r0, [r7, #700]
   12cf6:	f8d7 12c0 	ldr.w	r1, [r7, #704]
   12cfa:	f04f 0201 	mov.w	r2, #1	; 0x1
   12cfe:	f7fd fa5b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape4);
   12d02:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   12d06:	f8d7 12c4 	ldr.w	r1, [r7, #708]
   12d0a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d0e:	f7fd fa53 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape5);
   12d12:	f8d7 02c4 	ldr.w	r0, [r7, #708]
   12d16:	f8d7 12c8 	ldr.w	r1, [r7, #712]
   12d1a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d1e:	f7fd fa4b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape13);
   12d22:	f8d7 02c4 	ldr.w	r0, [r7, #708]
   12d26:	f8d7 12e8 	ldr.w	r1, [r7, #744]
   12d2a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d2e:	f7fd fa43 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape4->addVoisin(etape8);
   12d32:	f8d7 02c4 	ldr.w	r0, [r7, #708]
   12d36:	f8d7 12d4 	ldr.w	r1, [r7, #724]
   12d3a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d3e:	f7fd fa3b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape7);
   12d42:	f8d7 02cc 	ldr.w	r0, [r7, #716]
   12d46:	f8d7 12d0 	ldr.w	r1, [r7, #720]
   12d4a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d4e:	f7fd fa33 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape1->addVoisin(etape18);
   12d52:	f8d7 02b8 	ldr.w	r0, [r7, #696]
   12d56:	f8d7 12fc 	ldr.w	r1, [r7, #764]
   12d5a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d5e:	f7fd fa2b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape2);
   12d62:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   12d66:	f8d7 12bc 	ldr.w	r1, [r7, #700]
   12d6a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d6e:	f7fd fa23 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape13->addVoisin(etape14);
   12d72:	f8d7 02e8 	ldr.w	r0, [r7, #744]
   12d76:	f8d7 12ec 	ldr.w	r1, [r7, #748]
   12d7a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d7e:	f7fd fa1b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape14->addVoisin(etape8);
   12d82:	f8d7 02ec 	ldr.w	r0, [r7, #748]
   12d86:	f8d7 12d4 	ldr.w	r1, [r7, #724]
   12d8a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d8e:	f7fd fa13 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape20);
   12d92:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   12d96:	f8d7 1304 	ldr.w	r1, [r7, #772]
   12d9a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12d9e:	f7fd fa0b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape18->addVoisin(etape19);
   12da2:	f8d7 02fc 	ldr.w	r0, [r7, #764]
   12da6:	f8d7 1300 	ldr.w	r1, [r7, #768]
   12daa:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dae:	f7fd fa03 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape19);
   12db2:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   12db6:	f8d7 1300 	ldr.w	r1, [r7, #768]
   12dba:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dbe:	f7fd f9fb 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape21);
   12dc2:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   12dc6:	f8d7 1308 	ldr.w	r1, [r7, #776]
   12dca:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dce:	f7fd f9f3 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape3->addVoisin(etape10);
   12dd2:	f8d7 02c0 	ldr.w	r0, [r7, #704]
   12dd6:	f8d7 12dc 	ldr.w	r1, [r7, #732]
   12dda:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dde:	f7fd f9eb 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape20);
   12de2:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   12de6:	f8d7 1304 	ldr.w	r1, [r7, #772]
   12dea:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dee:	f7fd f9e3 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape18);
   12df2:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   12df6:	f8d7 12fc 	ldr.w	r1, [r7, #764]
   12dfa:	f04f 0201 	mov.w	r2, #1	; 0x1
   12dfe:	f7fd f9db 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape21->addVoisin(etape22);
   12e02:	f8d7 0308 	ldr.w	r0, [r7, #776]
   12e06:	f8d7 130c 	ldr.w	r1, [r7, #780]
   12e0a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e0e:	f7fd f9d3 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape22);
   12e12:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   12e16:	f8d7 130c 	ldr.w	r1, [r7, #780]
   12e1a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e1e:	f7fd f9cb 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape20->addVoisin(etape10);
   12e22:	f8d7 0304 	ldr.w	r0, [r7, #772]
   12e26:	f8d7 12dc 	ldr.w	r1, [r7, #732]
   12e2a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e2e:	f7fd f9c3 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   12e32:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   12e36:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   12e3a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e3e:	f7fd f9bb 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape23);
   12e42:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   12e46:	f8d7 1310 	ldr.w	r1, [r7, #784]
   12e4a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e4e:	f7fd f9b3 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape6);
   12e52:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   12e56:	f8d7 12cc 	ldr.w	r1, [r7, #716]
   12e5a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e5e:	f7fd f9ab 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape6);
   12e62:	f8d7 0310 	ldr.w	r0, [r7, #784]
   12e66:	f8d7 12cc 	ldr.w	r1, [r7, #716]
   12e6a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e6e:	f7fd f9a3 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape7);
   12e72:	f8d7 0310 	ldr.w	r0, [r7, #784]
   12e76:	f8d7 12d0 	ldr.w	r1, [r7, #720]
   12e7a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e7e:	f7fd f99b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape12);
   12e82:	f8d7 0310 	ldr.w	r0, [r7, #784]
   12e86:	f8d7 12e4 	ldr.w	r1, [r7, #740]
   12e8a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e8e:	f7fd f993 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape24);
   12e92:	f8d7 0310 	ldr.w	r0, [r7, #784]
   12e96:	f8d7 1314 	ldr.w	r1, [r7, #788]
   12e9a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12e9e:	f7fd f98b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape6->addVoisin(etape12);
   12ea2:	f8d7 02cc 	ldr.w	r0, [r7, #716]
   12ea6:	f8d7 12e4 	ldr.w	r1, [r7, #740]
   12eaa:	f04f 0201 	mov.w	r2, #1	; 0x1
   12eae:	f7fd f983 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape12->addVoisin(etape24);
   12eb2:	f8d7 02e4 	ldr.w	r0, [r7, #740]
   12eb6:	f8d7 1314 	ldr.w	r1, [r7, #788]
   12eba:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ebe:	f7fd f97b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape23->addVoisin(etape11);
   12ec2:	f8d7 0310 	ldr.w	r0, [r7, #784]
   12ec6:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   12eca:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ece:	f7fd f973 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape20);
   12ed2:	f8d7 02e0 	ldr.w	r0, [r7, #736]
   12ed6:	f8d7 1304 	ldr.w	r1, [r7, #772]
   12eda:	f04f 0201 	mov.w	r2, #1	; 0x1
   12ede:	f7fd f96b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape10->addVoisin(etape11);
   12ee2:	f8d7 02dc 	ldr.w	r0, [r7, #732]
   12ee6:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   12eea:	f04f 0201 	mov.w	r2, #1	; 0x1
   12eee:	f7fd f963 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape11);
   12ef2:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   12ef6:	f8d7 12e0 	ldr.w	r1, [r7, #736]
   12efa:	f04f 0201 	mov.w	r2, #1	; 0x1
   12efe:	f7fd f95b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape11->addVoisin(etape25);
   12f02:	f8d7 02e0 	ldr.w	r0, [r7, #736]
   12f06:	f8d7 1318 	ldr.w	r1, [r7, #792]
   12f0a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f0e:	f7fd f953 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape15);
   12f12:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   12f16:	f8d7 12f0 	ldr.w	r1, [r7, #752]
   12f1a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f1e:	f7fd f94b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape9->addVoisin(etape17);
   12f22:	f8d7 02d8 	ldr.w	r0, [r7, #728]
   12f26:	f8d7 12f8 	ldr.w	r1, [r7, #760]
   12f2a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f2e:	f7fd f943 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape17);
   12f32:	f8d7 02f4 	ldr.w	r0, [r7, #756]
   12f36:	f8d7 12f8 	ldr.w	r1, [r7, #760]
   12f3a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f3e:	f7fd f93b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape16->addVoisin(etape15);
   12f42:	f8d7 02f4 	ldr.w	r0, [r7, #756]
   12f46:	f8d7 12f0 	ldr.w	r1, [r7, #752]
   12f4a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f4e:	f7fd f933 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape17);
   12f52:	f8d7 02f0 	ldr.w	r0, [r7, #752]
   12f56:	f8d7 12f8 	ldr.w	r1, [r7, #760]
   12f5a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f5e:	f7fd f92b 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>
    etape15->addVoisin(etape9);
   12f62:	f8d7 02f0 	ldr.w	r0, [r7, #752]
   12f66:	f8d7 12d8 	ldr.w	r1, [r7, #728]
   12f6a:	f04f 0201 	mov.w	r2, #1	; 0x1
   12f6e:	f7fd f923 	bl	101b8 <_ZN5Etape9addVoisinEPS_b>


    // Lancer Dijkstra
    startDijkstra();
   12f72:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12f76:	681b      	ldr	r3, [r3, #0]
   12f78:	4618      	mov	r0, r3
   12f7a:	f001 fd6f 	bl	14a5c <_ZN11StrategieV313startDijkstraEv>
}
   12f7e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
   12f82:	681b      	ldr	r3, [r3, #0]
   12f84:	4618      	mov	r0, r3
   12f86:	f507 7749 	add.w	r7, r7, #804	; 0x324
   12f8a:	46bd      	mov	sp, r7
   12f8c:	bd90      	pop	{r4, r7, pc}
   12f8e:	46c0      	nop			(mov r8, r8)
   12f90:	44898000 	.word	0x44898000
   12f94:	44dd4000 	.word	0x44dd4000
   12f98:	44a28000 	.word	0x44a28000
   12f9c:	44af0000 	.word	0x44af0000
   12fa0:	449c4000 	.word	0x449c4000
   12fa4:	44e10000 	.word	0x44e10000
   12fa8:	44dac000 	.word	0x44dac000
   12fac:	450fc000 	.word	0x450fc000
   12fb0:	44bb8000 	.word	0x44bb8000
   12fb4:	452f0000 	.word	0x452f0000
   12fb8:	44b54000 	.word	0x44b54000
   12fbc:	44160000 	.word	0x44160000
   12fc0:	41f00000 	.word	0x41f00000
   12fc4:	44510000 	.word	0x44510000
   12fc8:	44d48000 	.word	0x44d48000
   12fcc:	447a0000 	.word	0x447a0000

00012fd0 <_ZN17MediumLevelAction15getGoalPositionEv>:
MediumLevelAction::~MediumLevelAction()
{
    //dtor
}

Position MediumLevelAction::getGoalPosition()
   12fd0:	b480      	push	{r7}
   12fd2:	b083      	sub	sp, #12
   12fd4:	af00      	add	r7, sp, #0
   12fd6:	4684      	mov	ip, r0
   12fd8:	6079      	str	r1, [r7, #4]
{
    return goalPosition;
   12fda:	687b      	ldr	r3, [r7, #4]
   12fdc:	4662      	mov	r2, ip
   12fde:	f103 0304 	add.w	r3, r3, #4	; 0x4
   12fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
   12fe6:	e882 0003 	stmia.w	r2, {r0, r1}
}
   12fea:	4660      	mov	r0, ip
   12fec:	f107 070c 	add.w	r7, r7, #12	; 0xc
   12ff0:	46bd      	mov	sp, r7
   12ff2:	bc80      	pop	{r7}
   12ff4:	4770      	bx	lr
   12ff6:	46c0      	nop			(mov r8, r8)

00012ff8 <_ZN17MediumLevelAction9getGoBackEv>:

bool MediumLevelAction::getGoBack()
   12ff8:	b480      	push	{r7}
   12ffa:	b083      	sub	sp, #12
   12ffc:	af00      	add	r7, sp, #0
   12ffe:	6078      	str	r0, [r7, #4]
{
    return goBack;
   13000:	687b      	ldr	r3, [r7, #4]
   13002:	7c1b      	ldrb	r3, [r3, #16]
}
   13004:	4618      	mov	r0, r3
   13006:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1300a:	46bd      	mov	sp, r7
   1300c:	bc80      	pop	{r7}
   1300e:	4770      	bx	lr

00013010 <_ZN17MediumLevelAction16collisionAvoidedEv>:

void MediumLevelAction::collisionAvoided()
   13010:	b480      	push	{r7}
   13012:	b083      	sub	sp, #12
   13014:	af00      	add	r7, sp, #0
   13016:	6078      	str	r0, [r7, #4]
{
    status = 0; // reinitialize the status if function not overloaded
   13018:	687a      	ldr	r2, [r7, #4]
   1301a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1301e:	60d3      	str	r3, [r2, #12]
}
   13020:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13024:	46bd      	mov	sp, r7
   13026:	bc80      	pop	{r7}
   13028:	4770      	bx	lr
   1302a:	46c0      	nop			(mov r8, r8)

0001302c <_ZN17MediumLevelAction9setGoBackEb>:

void MediumLevelAction::setGoBack(bool val)
   1302c:	b480      	push	{r7}
   1302e:	b083      	sub	sp, #12
   13030:	af00      	add	r7, sp, #0
   13032:	6078      	str	r0, [r7, #4]
   13034:	460b      	mov	r3, r1
   13036:	70fb      	strb	r3, [r7, #3]
{
    goBack = val;
   13038:	687a      	ldr	r2, [r7, #4]
   1303a:	78fb      	ldrb	r3, [r7, #3]
   1303c:	7413      	strb	r3, [r2, #16]
}
   1303e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13042:	46bd      	mov	sp, r7
   13044:	bc80      	pop	{r7}
   13046:	4770      	bx	lr

00013048 <_ZN17MediumLevelAction5resetEv>:

void MediumLevelAction::reset()
   13048:	b480      	push	{r7}
   1304a:	b083      	sub	sp, #12
   1304c:	af00      	add	r7, sp, #0
   1304e:	6078      	str	r0, [r7, #4]
{

}
   13050:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13054:	46bd      	mov	sp, r7
   13056:	bc80      	pop	{r7}
   13058:	4770      	bx	lr
   1305a:	46c0      	nop			(mov r8, r8)

0001305c <_ZN17MediumLevelAction10updateTimeEi>:
{

}
#endif

void MediumLevelAction::updateTime(int millisecondesRestantes)
   1305c:	b480      	push	{r7}
   1305e:	b083      	sub	sp, #12
   13060:	af00      	add	r7, sp, #0
   13062:	6078      	str	r0, [r7, #4]
   13064:	6039      	str	r1, [r7, #0]
{
    this->millisecondesRestantes = millisecondesRestantes;
   13066:	687a      	ldr	r2, [r7, #4]
   13068:	683b      	ldr	r3, [r7, #0]
   1306a:	6153      	str	r3, [r2, #20]
}
   1306c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13070:	46bd      	mov	sp, r7
   13072:	bc80      	pop	{r7}
   13074:	4770      	bx	lr
   13076:	46c0      	nop			(mov r8, r8)

00013078 <_ZN17MediumLevelActionD0Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   13078:	b580      	push	{r7, lr}
   1307a:	b082      	sub	sp, #8
   1307c:	af00      	add	r7, sp, #0
   1307e:	6078      	str	r0, [r7, #4]
   13080:	687a      	ldr	r2, [r7, #4]
   13082:	4b08      	ldr	r3, [pc, #32]	(130a4 <_ZN17MediumLevelActionD0Ev+0x2c>)
   13084:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   13086:	f04f 0301 	mov.w	r3, #1	; 0x1
   1308a:	b2db      	uxtb	r3, r3
   1308c:	2b00      	cmp	r3, #0
   1308e:	d002      	beq.n	13096 <_ZN17MediumLevelActionD0Ev+0x1e>
   13090:	6878      	ldr	r0, [r7, #4]
   13092:	f7fb fa07 	bl	e4a4 <_ZdlPv>
   13096:	687b      	ldr	r3, [r7, #4]
   13098:	4618      	mov	r0, r3
   1309a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1309e:	46bd      	mov	sp, r7
   130a0:	bd80      	pop	{r7, pc}
   130a2:	46c0      	nop			(mov r8, r8)
   130a4:	0001fc70 	.word	0x0001fc70

000130a8 <_ZN17MediumLevelActionD1Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   130a8:	b580      	push	{r7, lr}
   130aa:	b082      	sub	sp, #8
   130ac:	af00      	add	r7, sp, #0
   130ae:	6078      	str	r0, [r7, #4]
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	4b08      	ldr	r3, [pc, #32]	(130d4 <_ZN17MediumLevelActionD1Ev+0x2c>)
   130b4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   130b6:	f04f 0300 	mov.w	r3, #0	; 0x0
   130ba:	b2db      	uxtb	r3, r3
   130bc:	2b00      	cmp	r3, #0
   130be:	d002      	beq.n	130c6 <_ZN17MediumLevelActionD1Ev+0x1e>
   130c0:	6878      	ldr	r0, [r7, #4]
   130c2:	f7fb f9ef 	bl	e4a4 <_ZdlPv>
   130c6:	687b      	ldr	r3, [r7, #4]
   130c8:	4618      	mov	r0, r3
   130ca:	f107 0708 	add.w	r7, r7, #8	; 0x8
   130ce:	46bd      	mov	sp, r7
   130d0:	bd80      	pop	{r7, pc}
   130d2:	46c0      	nop			(mov r8, r8)
   130d4:	0001fc70 	.word	0x0001fc70

000130d8 <_ZN17MediumLevelActionD2Ev>:
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
    status = 0;
}

MediumLevelAction::~MediumLevelAction()
   130d8:	b580      	push	{r7, lr}
   130da:	b082      	sub	sp, #8
   130dc:	af00      	add	r7, sp, #0
   130de:	6078      	str	r0, [r7, #4]
   130e0:	687a      	ldr	r2, [r7, #4]
   130e2:	4b08      	ldr	r3, [pc, #32]	(13104 <_ZN17MediumLevelActionD2Ev+0x2c>)
   130e4:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   130e6:	f04f 0300 	mov.w	r3, #0	; 0x0
   130ea:	b2db      	uxtb	r3, r3
   130ec:	2b00      	cmp	r3, #0
   130ee:	d002      	beq.n	130f6 <_ZN17MediumLevelActionD2Ev+0x1e>
   130f0:	6878      	ldr	r0, [r7, #4]
   130f2:	f7fb f9d7 	bl	e4a4 <_ZdlPv>
   130f6:	687b      	ldr	r3, [r7, #4]
   130f8:	4618      	mov	r0, r3
   130fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   130fe:	46bd      	mov	sp, r7
   13100:	bd80      	pop	{r7, pc}
   13102:	46c0      	nop			(mov r8, r8)
   13104:	0001fc70 	.word	0x0001fc70

00013108 <_ZN17MediumLevelActionC1E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   13108:	b580      	push	{r7, lr}
   1310a:	b084      	sub	sp, #16
   1310c:	af00      	add	r7, sp, #0
   1310e:	60f8      	str	r0, [r7, #12]
   13110:	f107 0304 	add.w	r3, r7, #4	; 0x4
   13114:	e883 0006 	stmia.w	r3, {r1, r2}
   13118:	68fa      	ldr	r2, [r7, #12]
   1311a:	4b0e      	ldr	r3, [pc, #56]	(13154 <_ZN17MediumLevelActionC1E8Position+0x4c>)
   1311c:	6013      	str	r3, [r2, #0]
   1311e:	68fb      	ldr	r3, [r7, #12]
   13120:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13124:	4618      	mov	r0, r3
   13126:	f7fb fa55 	bl	e5d4 <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   1312a:	68fb      	ldr	r3, [r7, #12]
   1312c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13130:	4618      	mov	r0, r3
   13132:	f107 0304 	add.w	r3, r7, #4	; 0x4
   13136:	e893 0006 	ldmia.w	r3, {r1, r2}
   1313a:	f7fb fb07 	bl	e74c <_ZN8PositionaSES_>
    status = 0;
   1313e:	68fa      	ldr	r2, [r7, #12]
   13140:	f04f 0300 	mov.w	r3, #0	; 0x0
   13144:	60d3      	str	r3, [r2, #12]
}
   13146:	68fb      	ldr	r3, [r7, #12]
   13148:	4618      	mov	r0, r3
   1314a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1314e:	46bd      	mov	sp, r7
   13150:	bd80      	pop	{r7, pc}
   13152:	46c0      	nop			(mov r8, r8)
   13154:	0001fc70 	.word	0x0001fc70

00013158 <_ZN17MediumLevelActionC2E8Position>:
#include "mediumLevelAction.h"
#include "strategieV2.h"

MediumLevelAction::MediumLevelAction(Position goalPos) 
   13158:	b580      	push	{r7, lr}
   1315a:	b084      	sub	sp, #16
   1315c:	af00      	add	r7, sp, #0
   1315e:	60f8      	str	r0, [r7, #12]
   13160:	f107 0304 	add.w	r3, r7, #4	; 0x4
   13164:	e883 0006 	stmia.w	r3, {r1, r2}
   13168:	68fa      	ldr	r2, [r7, #12]
   1316a:	4b0e      	ldr	r3, [pc, #56]	(131a4 <_ZN17MediumLevelActionC2E8Position+0x4c>)
   1316c:	6013      	str	r3, [r2, #0]
   1316e:	68fb      	ldr	r3, [r7, #12]
   13170:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13174:	4618      	mov	r0, r3
   13176:	f7fb fa2d 	bl	e5d4 <_ZN8PositionC1Ev>
{
    goalPosition = goalPos; //(StrategieV2::getIsBlue() ? goalPos : Position(3000,0)-goalPos);
   1317a:	68fb      	ldr	r3, [r7, #12]
   1317c:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13180:	4618      	mov	r0, r3
   13182:	f107 0304 	add.w	r3, r7, #4	; 0x4
   13186:	e893 0006 	ldmia.w	r3, {r1, r2}
   1318a:	f7fb fadf 	bl	e74c <_ZN8PositionaSES_>
    status = 0;
   1318e:	68fa      	ldr	r2, [r7, #12]
   13190:	f04f 0300 	mov.w	r3, #0	; 0x0
   13194:	60d3      	str	r3, [r2, #12]
}
   13196:	68fb      	ldr	r3, [r7, #12]
   13198:	4618      	mov	r0, r3
   1319a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1319e:	46bd      	mov	sp, r7
   131a0:	bd80      	pop	{r7, pc}
   131a2:	46c0      	nop			(mov r8, r8)
   131a4:	0001fc70 	.word	0x0001fc70

000131a8 <_ZN19RecalibrerOdometrie6updateEv>:
RecalibrerOdometrie::~RecalibrerOdometrie()
{
    //dtor
}

int RecalibrerOdometrie::update()
   131a8:	b590      	push	{r4, r7, lr}
   131aa:	b0d9      	sub	sp, #356
   131ac:	af02      	add	r7, sp, #8
   131ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   131b2:	6018      	str	r0, [r3, #0]
{
    allumerLED();
   131b4:	f7f8 fec8 	bl	bf48 <_Z10allumerLEDv>
    allumerLED2();
   131b8:	f7f8 febe 	bl	bf38 <_Z11allumerLED2v>
//#ifndef ROBOTHW
//    status = -1;
//    return -1;
//#else
    if (status == 0)
   131bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   131c0:	681b      	ldr	r3, [r3, #0]
   131c2:	68db      	ldr	r3, [r3, #12]
   131c4:	2b00      	cmp	r3, #0
   131c6:	d115      	bne.n	131f4 <_ZN19RecalibrerOdometrie6updateEv+0x4c>
    {
#ifndef ROBOTHW
        qDebug() << "recalibrerOdometrie";
#endif
        StrategieV2::setCurrentGoal(positionDepart, false);//Position(700, 1360,isBlue), false);
   131c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   131cc:	681a      	ldr	r2, [r3, #0]
   131ce:	f8df 37bc 	ldr.w	r3, [pc, #1980]	; 1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   131d2:	9300      	str	r3, [sp, #0]
   131d4:	f102 0318 	add.w	r3, r2, #24	; 0x18
   131d8:	e893 0003 	ldmia.w	r3, {r0, r1}
   131dc:	f04f 0200 	mov.w	r2, #0	; 0x0
   131e0:	f8df 37ac 	ldr.w	r3, [pc, #1964]	; 13990 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   131e4:	f000 ff68 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
        status = 1;
   131e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   131ec:	681a      	ldr	r2, [r3, #0]
   131ee:	f04f 0301 	mov.w	r3, #1	; 0x1
   131f2:	60d3      	str	r3, [r2, #12]
    }
    if (status == 1) // attend d'être replacé
   131f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   131f8:	681b      	ldr	r3, [r3, #0]
   131fa:	68db      	ldr	r3, [r3, #12]
   131fc:	2b01      	cmp	r3, #1
   131fe:	f040 808a 	bne.w	13316 <_ZN19RecalibrerOdometrie6updateEv+0x16e>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   13202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13206:	681b      	ldr	r3, [r3, #0]
   13208:	f103 0418 	add.w	r4, r3, #24	; 0x18
   1320c:	f8df 3784 	ldr.w	r3, [pc, #1924]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   13210:	681a      	ldr	r2, [r3, #0]
   13212:	f107 0364 	add.w	r3, r7, #100	; 0x64
   13216:	4618      	mov	r0, r3
   13218:	4611      	mov	r1, r2
   1321a:	f7f6 fac9 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   1321e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   13222:	f107 0264 	add.w	r2, r7, #100	; 0x64
   13226:	4618      	mov	r0, r3
   13228:	4611      	mov	r1, r2
   1322a:	f7fb fc37 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   1322e:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13232:	f107 025c 	add.w	r2, r7, #92	; 0x5c
   13236:	4618      	mov	r0, r3
   13238:	4621      	mov	r1, r4
   1323a:	f7fb fa61 	bl	e700 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   1323e:	f107 0354 	add.w	r3, r7, #84	; 0x54
   13242:	4618      	mov	r0, r3
   13244:	f7fb fb6a 	bl	e91c <_ZNK8Position8getNormeEv>
   13248:	4602      	mov	r2, r0
   1324a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1324e:	72fb      	strb	r3, [r7, #11]
   13250:	4610      	mov	r0, r2
   13252:	f8df 1744 	ldr.w	r1, [pc, #1860]	; 13998 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>
   13256:	f005 feaf 	bl	18fb8 <__aeabi_fcmplt>
   1325a:	4603      	mov	r3, r0
   1325c:	2b00      	cmp	r3, #0
   1325e:	d002      	beq.n	13266 <_ZN19RecalibrerOdometrie6updateEv+0xbe>
   13260:	f04f 0301 	mov.w	r3, #1	; 0x1
   13264:	72fb      	strb	r3, [r7, #11]
   13266:	7afb      	ldrb	r3, [r7, #11]
   13268:	2b00      	cmp	r3, #0
   1326a:	d054      	beq.n	13316 <_ZN19RecalibrerOdometrie6updateEv+0x16e>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   1326c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13270:	681b      	ldr	r3, [r3, #0]
   13272:	6a9b      	ldr	r3, [r3, #40]
   13274:	2b03      	cmp	r3, #3
   13276:	d005      	beq.n	13284 <_ZN19RecalibrerOdometrie6updateEv+0xdc>
   13278:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1327c:	681b      	ldr	r3, [r3, #0]
   1327e:	6a9b      	ldr	r3, [r3, #40]
   13280:	2b02      	cmp	r3, #2
   13282:	d11f      	bne.n	132c4 <_ZN19RecalibrerOdometrie6updateEv+0x11c>
            {
                StrategieV2::setCurrentGoal(Position(0, positionDepart.getY()), true, 0.5);
   13284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13288:	681b      	ldr	r3, [r3, #0]
   1328a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1328e:	4618      	mov	r0, r3
   13290:	f7fb f9e8 	bl	e664 <_ZNK8Position4getYEv>
   13294:	4602      	mov	r2, r0
   13296:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1329a:	4618      	mov	r0, r3
   1329c:	f8df 16fc 	ldr.w	r1, [pc, #1788]	; 1399c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   132a0:	f04f 0301 	mov.w	r3, #1	; 0x1
   132a4:	f7fb f9be 	bl	e624 <_ZN8PositionC1Effb>
   132a8:	f8df 36e0 	ldr.w	r3, [pc, #1760]	; 1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   132ac:	9300      	str	r3, [sp, #0]
   132ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
   132b2:	e893 0003 	ldmia.w	r3, {r0, r1}
   132b6:	f04f 0201 	mov.w	r2, #1	; 0x1
   132ba:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 139a0 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   132be:	f000 fefb 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   132c2:	e01e      	b.n	13302 <_ZN19RecalibrerOdometrie6updateEv+0x15a>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(3000, positionDepart.getY()), true, 0.5);
   132c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   132c8:	681b      	ldr	r3, [r3, #0]
   132ca:	f103 0318 	add.w	r3, r3, #24	; 0x18
   132ce:	4618      	mov	r0, r3
   132d0:	f7fb f9c8 	bl	e664 <_ZNK8Position4getYEv>
   132d4:	4602      	mov	r2, r0
   132d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
   132da:	4618      	mov	r0, r3
   132dc:	f8df 16c4 	ldr.w	r1, [pc, #1732]	; 139a4 <_ZN19RecalibrerOdometrie6updateEv+0x7fc>
   132e0:	f04f 0301 	mov.w	r3, #1	; 0x1
   132e4:	f7fb f99e 	bl	e624 <_ZN8PositionC1Effb>
   132e8:	f8df 36a0 	ldr.w	r3, [pc, #1696]	; 1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   132ec:	9300      	str	r3, [sp, #0]
   132ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
   132f2:	e893 0003 	ldmia.w	r3, {r0, r1}
   132f6:	f04f 0201 	mov.w	r2, #1	; 0x1
   132fa:	f8df 36a4 	ldr.w	r3, [pc, #1700]	; 139a0 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>
   132fe:	f000 fedb 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            StrategieV2::setEnTrainDeRecalibrer(true);
   13302:	f04f 0001 	mov.w	r0, #1	; 0x1
   13306:	f000 fcdd 	bl	13cc4 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 2;
   1330a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1330e:	681a      	ldr	r2, [r3, #0]
   13310:	f04f 0302 	mov.w	r3, #2	; 0x2
   13314:	60d3      	str	r3, [r2, #12]
        }
    }
    if (status == 2) // attend d'avoir synchro sur X
   13316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1331a:	681b      	ldr	r3, [r3, #0]
   1331c:	68db      	ldr	r3, [r3, #12]
   1331e:	2b02      	cmp	r3, #2
   13320:	f040 8144 	bne.w	135ac <_ZN19RecalibrerOdometrie6updateEv+0x404>
    {
        static int timeBlockedY = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) //if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   13324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13328:	681b      	ldr	r3, [r3, #0]
   1332a:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1332e:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   13332:	681a      	ldr	r2, [r3, #0]
   13334:	f107 0388 	add.w	r3, r7, #136	; 0x88
   13338:	4618      	mov	r0, r3
   1333a:	4611      	mov	r1, r2
   1333c:	f7f6 fa38 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   13340:	f107 0380 	add.w	r3, r7, #128	; 0x80
   13344:	f107 0288 	add.w	r2, r7, #136	; 0x88
   13348:	4618      	mov	r0, r3
   1334a:	4611      	mov	r1, r2
   1334c:	f7fb fba6 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   13350:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   13354:	f107 0280 	add.w	r2, r7, #128	; 0x80
   13358:	4618      	mov	r0, r3
   1335a:	4621      	mov	r1, r4
   1335c:	f7fb f9d0 	bl	e700 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   13360:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   13364:	4618      	mov	r0, r3
   13366:	f7fb fad9 	bl	e91c <_ZNK8Position8getNormeEv>
   1336a:	4603      	mov	r3, r0
   1336c:	4618      	mov	r0, r3
   1336e:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 1399c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   13372:	f005 fe3f 	bl	18ff4 <__aeabi_fcmpgt>
   13376:	4603      	mov	r3, r0
   13378:	2b00      	cmp	r3, #0
   1337a:	d016      	beq.n	133aa <_ZN19RecalibrerOdometrie6updateEv+0x202>
   1337c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   13380:	4618      	mov	r0, r3
   13382:	f7fb facb 	bl	e91c <_ZNK8Position8getNormeEv>
   13386:	4602      	mov	r2, r0
   13388:	f04f 0300 	mov.w	r3, #0	; 0x0
   1338c:	72bb      	strb	r3, [r7, #10]
   1338e:	4610      	mov	r0, r2
   13390:	f8df 1608 	ldr.w	r1, [pc, #1544]	; 1399c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>
   13394:	f005 fe06 	bl	18fa4 <__aeabi_fcmpeq>
   13398:	4603      	mov	r3, r0
   1339a:	2b00      	cmp	r3, #0
   1339c:	d102      	bne.n	133a4 <_ZN19RecalibrerOdometrie6updateEv+0x1fc>
   1339e:	f04f 0301 	mov.w	r3, #1	; 0x1
   133a2:	72bb      	strb	r3, [r7, #10]
   133a4:	7abb      	ldrb	r3, [r7, #10]
   133a6:	60fb      	str	r3, [r7, #12]
   133a8:	e015      	b.n	133d6 <_ZN19RecalibrerOdometrie6updateEv+0x22e>
   133aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   133ae:	4618      	mov	r0, r3
   133b0:	f7fb fab4 	bl	e91c <_ZNK8Position8getNormeEv>
   133b4:	4602      	mov	r2, r0
   133b6:	f04f 0300 	mov.w	r3, #0	; 0x0
   133ba:	727b      	strb	r3, [r7, #9]
   133bc:	4610      	mov	r0, r2
   133be:	f8df 15e8 	ldr.w	r1, [pc, #1512]	; 139a8 <_ZN19RecalibrerOdometrie6updateEv+0x800>
   133c2:	f005 fe17 	bl	18ff4 <__aeabi_fcmpgt>
   133c6:	4603      	mov	r3, r0
   133c8:	2b00      	cmp	r3, #0
   133ca:	d002      	beq.n	133d2 <_ZN19RecalibrerOdometrie6updateEv+0x22a>
   133cc:	f04f 0301 	mov.w	r3, #1	; 0x1
   133d0:	727b      	strb	r3, [r7, #9]
   133d2:	7a7b      	ldrb	r3, [r7, #9]
   133d4:	60fb      	str	r3, [r7, #12]
   133d6:	68fb      	ldr	r3, [r7, #12]
   133d8:	2b00      	cmp	r3, #0
   133da:	d008      	beq.n	133ee <_ZN19RecalibrerOdometrie6updateEv+0x246>
        {
            timeBlockedY ++;
   133dc:	f8df 35cc 	ldr.w	r3, [pc, #1484]	; 139ac <_ZN19RecalibrerOdometrie6updateEv+0x804>
   133e0:	681b      	ldr	r3, [r3, #0]
   133e2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   133e6:	f8df 35c4 	ldr.w	r3, [pc, #1476]	; 139ac <_ZN19RecalibrerOdometrie6updateEv+0x804>
   133ea:	601a      	str	r2, [r3, #0]
   133ec:	e023      	b.n	13436 <_ZN19RecalibrerOdometrie6updateEv+0x28e>
//            allumerLED2();
        }
        else {
            timeBlockedY = 0;
   133ee:	f8df 25bc 	ldr.w	r2, [pc, #1468]	; 139ac <_ZN19RecalibrerOdometrie6updateEv+0x804>
   133f2:	f04f 0300 	mov.w	r3, #0	; 0x0
   133f6:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   133f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   133fc:	681b      	ldr	r3, [r3, #0]
   133fe:	f103 0420 	add.w	r4, r3, #32	; 0x20
   13402:	f8df 3590 	ldr.w	r3, [pc, #1424]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   13406:	681a      	ldr	r2, [r3, #0]
   13408:	f107 039c 	add.w	r3, r7, #156	; 0x9c
   1340c:	4618      	mov	r0, r3
   1340e:	4611      	mov	r1, r2
   13410:	f7f6 f9ce 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   13414:	f107 0394 	add.w	r3, r7, #148	; 0x94
   13418:	f107 029c 	add.w	r2, r7, #156	; 0x9c
   1341c:	4618      	mov	r0, r3
   1341e:	4611      	mov	r1, r2
   13420:	f7fb fb3c 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   13424:	4620      	mov	r0, r4
   13426:	f107 0394 	add.w	r3, r7, #148	; 0x94
   1342a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1342e:	f7fb f98d 	bl	e74c <_ZN8PositionaSES_>
            eteindreLED2();
   13432:	f7f8 fd25 	bl	be80 <_Z12eteindreLED2v>
        }
        if (timeBlockedY > 100 &&
   13436:	f8df 3574 	ldr.w	r3, [pc, #1396]	; 139ac <_ZN19RecalibrerOdometrie6updateEv+0x804>
   1343a:	681b      	ldr	r3, [r3, #0]
   1343c:	2b64      	cmp	r3, #100
   1343e:	dd59      	ble.n	134f4 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   13440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13444:	681b      	ldr	r3, [r3, #0]
   13446:	6a9b      	ldr	r3, [r3, #40]
   13448:	2b00      	cmp	r3, #0
   1344a:	d005      	beq.n	13458 <_ZN19RecalibrerOdometrie6updateEv+0x2b0>
   1344c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13450:	681b      	ldr	r3, [r3, #0]
   13452:	6a9b      	ldr	r3, [r3, #40]
   13454:	2b01      	cmp	r3, #1
   13456:	d11e      	bne.n	13496 <_ZN19RecalibrerOdometrie6updateEv+0x2ee>
   13458:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1345c:	681a      	ldr	r2, [r3, #0]
   1345e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
   13462:	4618      	mov	r0, r3
   13464:	4611      	mov	r1, r2
   13466:	f7f6 f9a3 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   1346a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   1346e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   13472:	4618      	mov	r0, r3
   13474:	4611      	mov	r1, r2
   13476:	f7fb fb11 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   1347a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
   1347e:	4618      	mov	r0, r3
   13480:	f7fb f8e4 	bl	e64c <_ZNK8Position4getXEv>
   13484:	4603      	mov	r3, r0
   13486:	4618      	mov	r0, r3
   13488:	f8df 1524 	ldr.w	r1, [pc, #1316]	; 139b0 <_ZN19RecalibrerOdometrie6updateEv+0x808>
   1348c:	f005 fdb2 	bl	18ff4 <__aeabi_fcmpgt>
   13490:	4603      	mov	r3, r0
   13492:	2b00      	cmp	r3, #0
   13494:	d12a      	bne.n	134ec <_ZN19RecalibrerOdometrie6updateEv+0x344>
   13496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1349a:	681b      	ldr	r3, [r3, #0]
   1349c:	6a9b      	ldr	r3, [r3, #40]
   1349e:	2b02      	cmp	r3, #2
   134a0:	d005      	beq.n	134ae <_ZN19RecalibrerOdometrie6updateEv+0x306>
   134a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   134a6:	681b      	ldr	r3, [r3, #0]
   134a8:	6a9b      	ldr	r3, [r3, #40]
   134aa:	2b03      	cmp	r3, #3
   134ac:	d122      	bne.n	134f4 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   134ae:	f8df 34e4 	ldr.w	r3, [pc, #1252]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   134b2:	681a      	ldr	r2, [r3, #0]
   134b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
   134b8:	4618      	mov	r0, r3
   134ba:	4611      	mov	r1, r2
   134bc:	f7f6 f978 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   134c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   134c4:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
   134c8:	4618      	mov	r0, r3
   134ca:	4611      	mov	r1, r2
   134cc:	f7fb fae6 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   134d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
   134d4:	4618      	mov	r0, r3
   134d6:	f7fb f8b9 	bl	e64c <_ZNK8Position4getXEv>
   134da:	4603      	mov	r3, r0
   134dc:	4618      	mov	r0, r3
   134de:	f8df 14d4 	ldr.w	r1, [pc, #1236]	; 139b4 <_ZN19RecalibrerOdometrie6updateEv+0x80c>
   134e2:	f005 fd69 	bl	18fb8 <__aeabi_fcmplt>
   134e6:	4603      	mov	r3, r0
   134e8:	2b00      	cmp	r3, #0
   134ea:	d003      	beq.n	134f4 <_ZN19RecalibrerOdometrie6updateEv+0x34c>
   134ec:	f04f 0301 	mov.w	r3, #1	; 0x1
   134f0:	613b      	str	r3, [r7, #16]
   134f2:	e002      	b.n	134fa <_ZN19RecalibrerOdometrie6updateEv+0x352>
   134f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   134f8:	613b      	str	r3, [r7, #16]
   134fa:	693b      	ldr	r3, [r7, #16]
   134fc:	2b00      	cmp	r3, #0
   134fe:	f000 823b 	beq.w	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
                || ((this->coinRecalage == COTE_NOTRE_DEPART_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_BAS)
                  && Odometrie::odometrie->getPos().getPosition().getX() < 150)
                 ))// && Odometrie::odometrie->getPos().getPosition().getY() > 1500)//1850)
        {
#ifdef ROBOTHW //A adapter à la taille du robot
            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   13502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13506:	681b      	ldr	r3, [r3, #0]
   13508:	6a9b      	ldr	r3, [r3, #40]
   1350a:	2b00      	cmp	r3, #0
   1350c:	d005      	beq.n	1351a <_ZN19RecalibrerOdometrie6updateEv+0x372>
   1350e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13512:	681b      	ldr	r3, [r3, #0]
   13514:	6a9b      	ldr	r3, [r3, #40]
   13516:	2b01      	cmp	r3, #1
   13518:	d114      	bne.n	13544 <_ZN19RecalibrerOdometrie6updateEv+0x39c>
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 95 : 2905)); // robot = 319mm de large
   1351a:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   1351e:	681b      	ldr	r3, [r3, #0]
   13520:	617b      	str	r3, [r7, #20]
   13522:	f000 fba9 	bl	13c78 <_ZN11StrategieV29getIsBlueEv>
   13526:	4603      	mov	r3, r0
   13528:	2b00      	cmp	r3, #0
   1352a:	d003      	beq.n	13534 <_ZN19RecalibrerOdometrie6updateEv+0x38c>
   1352c:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 139b8 <_ZN19RecalibrerOdometrie6updateEv+0x810>
   13530:	61bb      	str	r3, [r7, #24]
   13532:	e002      	b.n	1353a <_ZN19RecalibrerOdometrie6updateEv+0x392>
   13534:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 139bc <_ZN19RecalibrerOdometrie6updateEv+0x814>
   13538:	61bb      	str	r3, [r7, #24]
   1353a:	6978      	ldr	r0, [r7, #20]
   1353c:	69b9      	ldr	r1, [r7, #24]
   1353e:	f7f6 f9eb 	bl	9918 <_ZN9Odometrie4setXEf>
   13542:	e013      	b.n	1356c <_ZN19RecalibrerOdometrie6updateEv+0x3c4>
            else
                Odometrie::odometrie->setX((StrategieV2::getIsBlue() ? 2905 : 95)); // robot = 319mm de large
   13544:	f8df 344c 	ldr.w	r3, [pc, #1100]	; 13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>
   13548:	681b      	ldr	r3, [r3, #0]
   1354a:	61fb      	str	r3, [r7, #28]
   1354c:	f000 fb94 	bl	13c78 <_ZN11StrategieV29getIsBlueEv>
   13550:	4603      	mov	r3, r0
   13552:	2b00      	cmp	r3, #0
   13554:	d003      	beq.n	1355e <_ZN19RecalibrerOdometrie6updateEv+0x3b6>
   13556:	f8df 3464 	ldr.w	r3, [pc, #1124]	; 139bc <_ZN19RecalibrerOdometrie6updateEv+0x814>
   1355a:	623b      	str	r3, [r7, #32]
   1355c:	e002      	b.n	13564 <_ZN19RecalibrerOdometrie6updateEv+0x3bc>
   1355e:	f8df 3458 	ldr.w	r3, [pc, #1112]	; 139b8 <_ZN19RecalibrerOdometrie6updateEv+0x810>
   13562:	623b      	str	r3, [r7, #32]
   13564:	69f8      	ldr	r0, [r7, #28]
   13566:	6a39      	ldr	r1, [r7, #32]
   13568:	f7f6 f9d6 	bl	9918 <_ZN9Odometrie4setXEf>
#endif
            //StrategieV2::setCurrentGoal(Position(goalPosition1.getX(), 1360), false);
            StrategieV2::setCurrentGoal(positionDepart, false);
   1356c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13570:	681a      	ldr	r2, [r3, #0]
   13572:	f8df 3418 	ldr.w	r3, [pc, #1048]	; 1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>
   13576:	9300      	str	r3, [sp, #0]
   13578:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1357c:	e893 0003 	ldmia.w	r3, {r0, r1}
   13580:	f04f 0200 	mov.w	r2, #0	; 0x0
   13584:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 13990 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>
   13588:	f000 fd96 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            StrategieV2::setEnTrainDeRecalibrer(false);
   1358c:	f04f 0000 	mov.w	r0, #0	; 0x0
   13590:	f000 fb98 	bl	13cc4 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            status = 3;
   13594:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13598:	681a      	ldr	r2, [r3, #0]
   1359a:	f04f 0303 	mov.w	r3, #3	; 0x3
   1359e:	60d3      	str	r3, [r2, #12]
            timeBlockedY = 0;
   135a0:	f8df 2408 	ldr.w	r2, [pc, #1032]	; 139ac <_ZN19RecalibrerOdometrie6updateEv+0x804>
   135a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   135a8:	6013      	str	r3, [r2, #0]
   135aa:	e1e5      	b.n	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 3) // attend d'être replacé
   135ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   135b0:	681b      	ldr	r3, [r3, #0]
   135b2:	68db      	ldr	r3, [r3, #12]
   135b4:	2b03      	cmp	r3, #3
   135b6:	f040 8082 	bne.w	136be <_ZN19RecalibrerOdometrie6updateEv+0x516>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();
   135ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   135be:	681b      	ldr	r3, [r3, #0]
   135c0:	f103 0418 	add.w	r4, r3, #24	; 0x18
   135c4:	4bf3      	ldr	r3, [pc, #972]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   135c6:	681a      	ldr	r2, [r3, #0]
   135c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
   135cc:	4618      	mov	r0, r3
   135ce:	4611      	mov	r1, r2
   135d0:	f7f6 f8ee 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   135d4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
   135d8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
   135dc:	4618      	mov	r0, r3
   135de:	4611      	mov	r1, r2
   135e0:	f7fb fa5c 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   135e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   135e8:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
   135ec:	4618      	mov	r0, r3
   135ee:	4621      	mov	r1, r4
   135f0:	f7fb f886 	bl	e700 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   135f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   135f8:	4618      	mov	r0, r3
   135fa:	f7fb f98f 	bl	e91c <_ZNK8Position8getNormeEv>
   135fe:	4602      	mov	r2, r0
   13600:	f04f 0300 	mov.w	r3, #0	; 0x0
   13604:	723b      	strb	r3, [r7, #8]
   13606:	4610      	mov	r0, r2
   13608:	49e3      	ldr	r1, [pc, #908]	(13998 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   1360a:	f005 fcd5 	bl	18fb8 <__aeabi_fcmplt>
   1360e:	4603      	mov	r3, r0
   13610:	2b00      	cmp	r3, #0
   13612:	d002      	beq.n	1361a <_ZN19RecalibrerOdometrie6updateEv+0x472>
   13614:	f04f 0301 	mov.w	r3, #1	; 0x1
   13618:	723b      	strb	r3, [r7, #8]
   1361a:	7a3b      	ldrb	r3, [r7, #8]
   1361c:	2b00      	cmp	r3, #0
   1361e:	f000 81ab 	beq.w	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            if(this->coinRecalage == COTE_NOTRE_DEPART_BAS || this->coinRecalage == COTE_DEPART_ADVERSAIRE_BAS)
   13622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13626:	681b      	ldr	r3, [r3, #0]
   13628:	6a9b      	ldr	r3, [r3, #40]
   1362a:	2b03      	cmp	r3, #3
   1362c:	d005      	beq.n	1363a <_ZN19RecalibrerOdometrie6updateEv+0x492>
   1362e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13632:	681b      	ldr	r3, [r3, #0]
   13634:	6a9b      	ldr	r3, [r3, #40]
   13636:	2b01      	cmp	r3, #1
   13638:	d11d      	bne.n	13676 <_ZN19RecalibrerOdometrie6updateEv+0x4ce>
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 0), true, 0.5);
   1363a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1363e:	681b      	ldr	r3, [r3, #0]
   13640:	f103 0318 	add.w	r3, r3, #24	; 0x18
   13644:	4618      	mov	r0, r3
   13646:	f7fb f801 	bl	e64c <_ZNK8Position4getXEv>
   1364a:	4602      	mov	r2, r0
   1364c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   13650:	4618      	mov	r0, r3
   13652:	4611      	mov	r1, r2
   13654:	4ad1      	ldr	r2, [pc, #836]	(1399c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   13656:	f04f 0301 	mov.w	r3, #1	; 0x1
   1365a:	f7fa ffe3 	bl	e624 <_ZN8PositionC1Effb>
   1365e:	4bcb      	ldr	r3, [pc, #812]	(1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   13660:	9300      	str	r3, [sp, #0]
   13662:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
   13666:	e893 0003 	ldmia.w	r3, {r0, r1}
   1366a:	f04f 0201 	mov.w	r2, #1	; 0x1
   1366e:	4bcc      	ldr	r3, [pc, #816]	(139a0 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   13670:	f000 fd22 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
   13674:	e01c      	b.n	136b0 <_ZN19RecalibrerOdometrie6updateEv+0x508>
            }
            else
            {
                StrategieV2::setCurrentGoal(Position(positionDepart.getX(), 2000), true, 0.5);
   13676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1367a:	681b      	ldr	r3, [r3, #0]
   1367c:	f103 0318 	add.w	r3, r3, #24	; 0x18
   13680:	4618      	mov	r0, r3
   13682:	f7fa ffe3 	bl	e64c <_ZNK8Position4getXEv>
   13686:	4602      	mov	r2, r0
   13688:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   1368c:	4618      	mov	r0, r3
   1368e:	4611      	mov	r1, r2
   13690:	4acb      	ldr	r2, [pc, #812]	(139c0 <_ZN19RecalibrerOdometrie6updateEv+0x818>)
   13692:	f04f 0301 	mov.w	r3, #1	; 0x1
   13696:	f7fa ffc5 	bl	e624 <_ZN8PositionC1Effb>
   1369a:	4bbc      	ldr	r3, [pc, #752]	(1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   1369c:	9300      	str	r3, [sp, #0]
   1369e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
   136a2:	e893 0003 	ldmia.w	r3, {r0, r1}
   136a6:	f04f 0201 	mov.w	r2, #1	; 0x1
   136aa:	4bbd      	ldr	r3, [pc, #756]	(139a0 <_ZN19RecalibrerOdometrie6updateEv+0x7f8>)
   136ac:	f000 fd04 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            }
            status  = 4;
   136b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   136b4:	681a      	ldr	r2, [r3, #0]
   136b6:	f04f 0304 	mov.w	r3, #4	; 0x4
   136ba:	60d3      	str	r3, [r2, #12]
   136bc:	e15c      	b.n	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 4) // attend d'avoir synchro sur Y
   136be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   136c2:	681b      	ldr	r3, [r3, #0]
   136c4:	68db      	ldr	r3, [r3, #12]
   136c6:	2b04      	cmp	r3, #4
   136c8:	f040 8117 	bne.w	138fa <_ZN19RecalibrerOdometrie6updateEv+0x752>
    {

        static int timeBlockedX = 0;
        //if (abs(Odometrie::odometrie->getVitesseLineaire()) < 0.005f) // if (fdc1->getValue().b && fdc2->getValue().b) // distance parcourue la derniere seconde
        Position vect = candidatPositionArrete - Odometrie::odometrie->getPos().getPosition();
   136cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   136d0:	681b      	ldr	r3, [r3, #0]
   136d2:	f103 0420 	add.w	r4, r3, #32	; 0x20
   136d6:	4baf      	ldr	r3, [pc, #700]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   136d8:	681a      	ldr	r2, [r3, #0]
   136da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
   136de:	4618      	mov	r0, r3
   136e0:	4611      	mov	r1, r2
   136e2:	f7f6 f865 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   136e6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
   136ea:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
   136ee:	4618      	mov	r0, r3
   136f0:	4611      	mov	r1, r2
   136f2:	f7fb f9d3 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   136f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   136fa:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
   136fe:	4618      	mov	r0, r3
   13700:	4621      	mov	r1, r4
   13702:	f7fa fffd 	bl	e700 <_ZNK8PositionmiERKS_>
        if(abs(vect.getNorme()) < 5)//Si on a pas bougé de plus de Xmm du dernier candidat de position où le robot s'est arrêté
   13706:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   1370a:	4618      	mov	r0, r3
   1370c:	f7fb f906 	bl	e91c <_ZNK8Position8getNormeEv>
   13710:	4603      	mov	r3, r0
   13712:	4618      	mov	r0, r3
   13714:	49a1      	ldr	r1, [pc, #644]	(1399c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   13716:	f005 fc6d 	bl	18ff4 <__aeabi_fcmpgt>
   1371a:	4603      	mov	r3, r0
   1371c:	2b00      	cmp	r3, #0
   1371e:	d015      	beq.n	1374c <_ZN19RecalibrerOdometrie6updateEv+0x5a4>
   13720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   13724:	4618      	mov	r0, r3
   13726:	f7fb f8f9 	bl	e91c <_ZNK8Position8getNormeEv>
   1372a:	4602      	mov	r2, r0
   1372c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13730:	71fb      	strb	r3, [r7, #7]
   13732:	4610      	mov	r0, r2
   13734:	4999      	ldr	r1, [pc, #612]	(1399c <_ZN19RecalibrerOdometrie6updateEv+0x7f4>)
   13736:	f005 fc35 	bl	18fa4 <__aeabi_fcmpeq>
   1373a:	4603      	mov	r3, r0
   1373c:	2b00      	cmp	r3, #0
   1373e:	d102      	bne.n	13746 <_ZN19RecalibrerOdometrie6updateEv+0x59e>
   13740:	f04f 0301 	mov.w	r3, #1	; 0x1
   13744:	71fb      	strb	r3, [r7, #7]
   13746:	79fb      	ldrb	r3, [r7, #7]
   13748:	627b      	str	r3, [r7, #36]
   1374a:	e014      	b.n	13776 <_ZN19RecalibrerOdometrie6updateEv+0x5ce>
   1374c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   13750:	4618      	mov	r0, r3
   13752:	f7fb f8e3 	bl	e91c <_ZNK8Position8getNormeEv>
   13756:	4602      	mov	r2, r0
   13758:	f04f 0300 	mov.w	r3, #0	; 0x0
   1375c:	71bb      	strb	r3, [r7, #6]
   1375e:	4610      	mov	r0, r2
   13760:	4991      	ldr	r1, [pc, #580]	(139a8 <_ZN19RecalibrerOdometrie6updateEv+0x800>)
   13762:	f005 fc47 	bl	18ff4 <__aeabi_fcmpgt>
   13766:	4603      	mov	r3, r0
   13768:	2b00      	cmp	r3, #0
   1376a:	d002      	beq.n	13772 <_ZN19RecalibrerOdometrie6updateEv+0x5ca>
   1376c:	f04f 0301 	mov.w	r3, #1	; 0x1
   13770:	71bb      	strb	r3, [r7, #6]
   13772:	79bb      	ldrb	r3, [r7, #6]
   13774:	627b      	str	r3, [r7, #36]
   13776:	6a7b      	ldr	r3, [r7, #36]
   13778:	2b00      	cmp	r3, #0
   1377a:	d006      	beq.n	1378a <_ZN19RecalibrerOdometrie6updateEv+0x5e2>
        {
            timeBlockedX ++;
   1377c:	4b91      	ldr	r3, [pc, #580]	(139c4 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1377e:	681b      	ldr	r3, [r3, #0]
   13780:	f103 0201 	add.w	r2, r3, #1	; 0x1
   13784:	4b8f      	ldr	r3, [pc, #572]	(139c4 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   13786:	601a      	str	r2, [r3, #0]
   13788:	e021      	b.n	137ce <_ZN19RecalibrerOdometrie6updateEv+0x626>
//            allumerLED2();
        }
        else
        {
            timeBlockedX = 0;
   1378a:	4a8e      	ldr	r2, [pc, #568]	(139c4 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   1378c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13790:	6013      	str	r3, [r2, #0]
            candidatPositionArrete = Odometrie::odometrie->getPos().getPosition();
   13792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13796:	681b      	ldr	r3, [r3, #0]
   13798:	f103 0420 	add.w	r4, r3, #32	; 0x20
   1379c:	4b7d      	ldr	r3, [pc, #500]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   1379e:	681a      	ldr	r2, [r3, #0]
   137a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
   137a4:	4618      	mov	r0, r3
   137a6:	4611      	mov	r1, r2
   137a8:	f7f6 f802 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   137ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
   137b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
   137b4:	4618      	mov	r0, r3
   137b6:	4611      	mov	r1, r2
   137b8:	f7fb f970 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   137bc:	4620      	mov	r0, r4
   137be:	f507 7384 	add.w	r3, r7, #264	; 0x108
   137c2:	e893 0006 	ldmia.w	r3, {r1, r2}
   137c6:	f7fa ffc1 	bl	e74c <_ZN8PositionaSES_>
            eteindreLED2();
   137ca:	f7f8 fb59 	bl	be80 <_Z12eteindreLED2v>
        }
        if (timeBlockedX > 100 &&
   137ce:	4b7d      	ldr	r3, [pc, #500]	(139c4 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   137d0:	681b      	ldr	r3, [r3, #0]
   137d2:	2b64      	cmp	r3, #100
   137d4:	dd55      	ble.n	13882 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   137d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   137da:	681b      	ldr	r3, [r3, #0]
   137dc:	6a9b      	ldr	r3, [r3, #40]
   137de:	2b00      	cmp	r3, #0
   137e0:	d005      	beq.n	137ee <_ZN19RecalibrerOdometrie6updateEv+0x646>
   137e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   137e6:	681b      	ldr	r3, [r3, #0]
   137e8:	6a9b      	ldr	r3, [r3, #40]
   137ea:	2b02      	cmp	r3, #2
   137ec:	d11c      	bne.n	13828 <_ZN19RecalibrerOdometrie6updateEv+0x680>
   137ee:	4b69      	ldr	r3, [pc, #420]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   137f0:	681a      	ldr	r2, [r3, #0]
   137f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
   137f6:	4618      	mov	r0, r3
   137f8:	4611      	mov	r1, r2
   137fa:	f7f5 ffd9 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   137fe:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   13802:	f507 7292 	add.w	r2, r7, #292	; 0x124
   13806:	4618      	mov	r0, r3
   13808:	4611      	mov	r1, r2
   1380a:	f7fb f947 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   1380e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
   13812:	4618      	mov	r0, r3
   13814:	f7fa ff26 	bl	e664 <_ZNK8Position4getYEv>
   13818:	4603      	mov	r3, r0
   1381a:	4618      	mov	r0, r3
   1381c:	496a      	ldr	r1, [pc, #424]	(139c8 <_ZN19RecalibrerOdometrie6updateEv+0x820>)
   1381e:	f005 fbe9 	bl	18ff4 <__aeabi_fcmpgt>
   13822:	4603      	mov	r3, r0
   13824:	2b00      	cmp	r3, #0
   13826:	d128      	bne.n	1387a <_ZN19RecalibrerOdometrie6updateEv+0x6d2>
   13828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1382c:	681b      	ldr	r3, [r3, #0]
   1382e:	6a9b      	ldr	r3, [r3, #40]
   13830:	2b01      	cmp	r3, #1
   13832:	d005      	beq.n	13840 <_ZN19RecalibrerOdometrie6updateEv+0x698>
   13834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13838:	681b      	ldr	r3, [r3, #0]
   1383a:	6a9b      	ldr	r3, [r3, #40]
   1383c:	2b03      	cmp	r3, #3
   1383e:	d120      	bne.n	13882 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   13840:	4b54      	ldr	r3, [pc, #336]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   13842:	681a      	ldr	r2, [r3, #0]
   13844:	f507 739c 	add.w	r3, r7, #312	; 0x138
   13848:	4618      	mov	r0, r3
   1384a:	4611      	mov	r1, r2
   1384c:	f7f5 ffb0 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   13850:	f507 7398 	add.w	r3, r7, #304	; 0x130
   13854:	f507 729c 	add.w	r2, r7, #312	; 0x138
   13858:	4618      	mov	r0, r3
   1385a:	4611      	mov	r1, r2
   1385c:	f7fb f91e 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   13860:	f507 7398 	add.w	r3, r7, #304	; 0x130
   13864:	4618      	mov	r0, r3
   13866:	f7fa fefd 	bl	e664 <_ZNK8Position4getYEv>
   1386a:	4603      	mov	r3, r0
   1386c:	4618      	mov	r0, r3
   1386e:	4951      	ldr	r1, [pc, #324]	(139b4 <_ZN19RecalibrerOdometrie6updateEv+0x80c>)
   13870:	f005 fba2 	bl	18fb8 <__aeabi_fcmplt>
   13874:	4603      	mov	r3, r0
   13876:	2b00      	cmp	r3, #0
   13878:	d003      	beq.n	13882 <_ZN19RecalibrerOdometrie6updateEv+0x6da>
   1387a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1387e:	62bb      	str	r3, [r7, #40]
   13880:	e002      	b.n	13888 <_ZN19RecalibrerOdometrie6updateEv+0x6e0>
   13882:	f04f 0300 	mov.w	r3, #0	; 0x0
   13886:	62bb      	str	r3, [r7, #40]
   13888:	6abb      	ldr	r3, [r7, #40]
   1388a:	2b00      	cmp	r3, #0
   1388c:	d074      	beq.n	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
              && Odometrie::odometrie->getPos().getPosition().getY() < 150)
             ))// && (StrategieV2::getIsBlue() ? Odometrie::odometrie->getPos().getPosition().getX() < 200 : Odometrie::odometrie->getPos().getPosition().getX() > 2800))
        {
#ifdef ROBOTHW //A adapter à la taille du robot

            if(this->coinRecalage == COTE_DEPART_ADVERSAIRE_HAUT || this->coinRecalage == COTE_NOTRE_DEPART_HAUT)
   1388e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13892:	681b      	ldr	r3, [r3, #0]
   13894:	6a9b      	ldr	r3, [r3, #40]
   13896:	2b00      	cmp	r3, #0
   13898:	d005      	beq.n	138a6 <_ZN19RecalibrerOdometrie6updateEv+0x6fe>
   1389a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1389e:	681b      	ldr	r3, [r3, #0]
   138a0:	6a9b      	ldr	r3, [r3, #40]
   138a2:	2b02      	cmp	r3, #2
   138a4:	d106      	bne.n	138b4 <_ZN19RecalibrerOdometrie6updateEv+0x70c>
                Odometrie::odometrie->setY(2000-95);
   138a6:	4b3b      	ldr	r3, [pc, #236]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   138a8:	681b      	ldr	r3, [r3, #0]
   138aa:	4618      	mov	r0, r3
   138ac:	4947      	ldr	r1, [pc, #284]	(139cc <_ZN19RecalibrerOdometrie6updateEv+0x824>)
   138ae:	f7f5 fffd 	bl	98ac <_ZN9Odometrie4setYEf>
   138b2:	e005      	b.n	138c0 <_ZN19RecalibrerOdometrie6updateEv+0x718>
            else
                Odometrie::odometrie->setY(95);
   138b4:	4b37      	ldr	r3, [pc, #220]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   138b6:	681b      	ldr	r3, [r3, #0]
   138b8:	4618      	mov	r0, r3
   138ba:	493f      	ldr	r1, [pc, #252]	(139b8 <_ZN19RecalibrerOdometrie6updateEv+0x810>)
   138bc:	f7f5 fff6 	bl	98ac <_ZN9Odometrie4setYEf>
#endif
            StrategieV2::setEnTrainDeRecalibrer(false);
   138c0:	f04f 0000 	mov.w	r0, #0	; 0x0
   138c4:	f000 f9fe 	bl	13cc4 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>
            StrategieV2::setCurrentGoal(positionDepart, false);
   138c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   138cc:	681a      	ldr	r2, [r3, #0]
   138ce:	4b2f      	ldr	r3, [pc, #188]	(1398c <_ZN19RecalibrerOdometrie6updateEv+0x7e4>)
   138d0:	9300      	str	r3, [sp, #0]
   138d2:	f102 0318 	add.w	r3, r2, #24	; 0x18
   138d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   138da:	f04f 0200 	mov.w	r2, #0	; 0x0
   138de:	4b2c      	ldr	r3, [pc, #176]	(13990 <_ZN19RecalibrerOdometrie6updateEv+0x7e8>)
   138e0:	f000 fbea 	bl	140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>
            //StrategieV2::setCurrentGoal(Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0), false, 1); // on avance  encore un peu
            //goalPosition2 = Odometrie::odometrie->getPos().getPosition()+Position((StrategieV2::getIsBlue()?200:-200), 0);
            status = 5;
   138e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   138e8:	681a      	ldr	r2, [r3, #0]
   138ea:	f04f 0305 	mov.w	r3, #5	; 0x5
   138ee:	60d3      	str	r3, [r2, #12]
            timeBlockedX = 0;
   138f0:	4a34      	ldr	r2, [pc, #208]	(139c4 <_ZN19RecalibrerOdometrie6updateEv+0x81c>)
   138f2:	f04f 0300 	mov.w	r3, #0	; 0x0
   138f6:	6013      	str	r3, [r2, #0]
   138f8:	e03e      	b.n	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        }
    }
    else if (status == 5)
   138fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   138fe:	681b      	ldr	r3, [r3, #0]
   13900:	68db      	ldr	r3, [r3, #12]
   13902:	2b05      	cmp	r3, #5
   13904:	d138      	bne.n	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
    {
        Position vect = positionDepart - Odometrie::odometrie->getPos().getPosition();//positionGoal2 -
   13906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1390a:	681b      	ldr	r3, [r3, #0]
   1390c:	f103 0418 	add.w	r4, r3, #24	; 0x18
   13910:	4b20      	ldr	r3, [pc, #128]	(13994 <_ZN19RecalibrerOdometrie6updateEv+0x7ec>)
   13912:	681a      	ldr	r2, [r3, #0]
   13914:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
   13918:	4618      	mov	r0, r3
   1391a:	4611      	mov	r1, r2
   1391c:	f7f5 ff48 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   13920:	f507 73a2 	add.w	r3, r7, #324	; 0x144
   13924:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
   13928:	4618      	mov	r0, r3
   1392a:	4611      	mov	r1, r2
   1392c:	f7fb f8b6 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
   13930:	f107 0334 	add.w	r3, r7, #52	; 0x34
   13934:	f507 72a2 	add.w	r2, r7, #324	; 0x144
   13938:	4618      	mov	r0, r3
   1393a:	4621      	mov	r1, r4
   1393c:	f7fa fee0 	bl	e700 <_ZNK8PositionmiERKS_>
        if (vect.getNorme() < 40)
   13940:	f107 0334 	add.w	r3, r7, #52	; 0x34
   13944:	4618      	mov	r0, r3
   13946:	f7fa ffe9 	bl	e91c <_ZNK8Position8getNormeEv>
   1394a:	4602      	mov	r2, r0
   1394c:	f04f 0300 	mov.w	r3, #0	; 0x0
   13950:	717b      	strb	r3, [r7, #5]
   13952:	4610      	mov	r0, r2
   13954:	4910      	ldr	r1, [pc, #64]	(13998 <_ZN19RecalibrerOdometrie6updateEv+0x7f0>)
   13956:	f005 fb2f 	bl	18fb8 <__aeabi_fcmplt>
   1395a:	4603      	mov	r3, r0
   1395c:	2b00      	cmp	r3, #0
   1395e:	d002      	beq.n	13966 <_ZN19RecalibrerOdometrie6updateEv+0x7be>
   13960:	f04f 0301 	mov.w	r3, #1	; 0x1
   13964:	717b      	strb	r3, [r7, #5]
   13966:	797b      	ldrb	r3, [r7, #5]
   13968:	2b00      	cmp	r3, #0
   1396a:	d005      	beq.n	13978 <_ZN19RecalibrerOdometrie6updateEv+0x7d0>
        {
            status = -1;
   1396c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   13970:	681a      	ldr	r2, [r3, #0]
   13972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13976:	60d3      	str	r3, [r2, #12]
        }
    }
    return status;
   13978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1397c:	681b      	ldr	r3, [r3, #0]
   1397e:	68db      	ldr	r3, [r3, #12]
//#endif
}
   13980:	4618      	mov	r0, r3
   13982:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   13986:	46bd      	mov	sp, r7
   13988:	bd90      	pop	{r4, r7, pc}
   1398a:	46c0      	nop			(mov r8, r8)
   1398c:	c2c80000 	.word	0xc2c80000
   13990:	40400000 	.word	0x40400000
   13994:	20000570 	.word	0x20000570
   13998:	42200000 	.word	0x42200000
   1399c:	00000000 	.word	0x00000000
   139a0:	3f000000 	.word	0x3f000000
   139a4:	453b8000 	.word	0x453b8000
   139a8:	c0a00000 	.word	0xc0a00000
   139ac:	2000059c 	.word	0x2000059c
   139b0:	45322000 	.word	0x45322000
   139b4:	43160000 	.word	0x43160000
   139b8:	42be0000 	.word	0x42be0000
   139bc:	45359000 	.word	0x45359000
   139c0:	44fa0000 	.word	0x44fa0000
   139c4:	20000598 	.word	0x20000598
   139c8:	44e74000 	.word	0x44e74000
   139cc:	44ee2000 	.word	0x44ee2000

000139d0 <_ZN19RecalibrerOdometrieD0Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   139d0:	b580      	push	{r7, lr}
   139d2:	b082      	sub	sp, #8
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
   139d8:	687a      	ldr	r2, [r7, #4]
   139da:	4b0a      	ldr	r3, [pc, #40]	(13a04 <_ZN19RecalibrerOdometrieD0Ev+0x34>)
   139dc:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   139de:	687b      	ldr	r3, [r7, #4]
   139e0:	4618      	mov	r0, r3
   139e2:	f7ff fb79 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
   139e6:	f04f 0301 	mov.w	r3, #1	; 0x1
   139ea:	b2db      	uxtb	r3, r3
   139ec:	2b00      	cmp	r3, #0
   139ee:	d002      	beq.n	139f6 <_ZN19RecalibrerOdometrieD0Ev+0x26>
   139f0:	6878      	ldr	r0, [r7, #4]
   139f2:	f7fa fd57 	bl	e4a4 <_ZdlPv>
   139f6:	687b      	ldr	r3, [r7, #4]
   139f8:	4618      	mov	r0, r3
   139fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   139fe:	46bd      	mov	sp, r7
   13a00:	bd80      	pop	{r7, pc}
   13a02:	46c0      	nop			(mov r8, r8)
   13a04:	0001fc90 	.word	0x0001fc90

00013a08 <_ZN19RecalibrerOdometrieD1Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   13a08:	b580      	push	{r7, lr}
   13a0a:	b082      	sub	sp, #8
   13a0c:	af00      	add	r7, sp, #0
   13a0e:	6078      	str	r0, [r7, #4]
   13a10:	687a      	ldr	r2, [r7, #4]
   13a12:	4b0a      	ldr	r3, [pc, #40]	(13a3c <_ZN19RecalibrerOdometrieD1Ev+0x34>)
   13a14:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   13a16:	687b      	ldr	r3, [r7, #4]
   13a18:	4618      	mov	r0, r3
   13a1a:	f7ff fb5d 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
   13a1e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a22:	b2db      	uxtb	r3, r3
   13a24:	2b00      	cmp	r3, #0
   13a26:	d002      	beq.n	13a2e <_ZN19RecalibrerOdometrieD1Ev+0x26>
   13a28:	6878      	ldr	r0, [r7, #4]
   13a2a:	f7fa fd3b 	bl	e4a4 <_ZdlPv>
   13a2e:	687b      	ldr	r3, [r7, #4]
   13a30:	4618      	mov	r0, r3
   13a32:	f107 0708 	add.w	r7, r7, #8	; 0x8
   13a36:	46bd      	mov	sp, r7
   13a38:	bd80      	pop	{r7, pc}
   13a3a:	46c0      	nop			(mov r8, r8)
   13a3c:	0001fc90 	.word	0x0001fc90

00013a40 <_ZN19RecalibrerOdometrieD2Ev>:
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
    this->coinRecalage = coinRecalage;
}

RecalibrerOdometrie::~RecalibrerOdometrie()
   13a40:	b580      	push	{r7, lr}
   13a42:	b082      	sub	sp, #8
   13a44:	af00      	add	r7, sp, #0
   13a46:	6078      	str	r0, [r7, #4]
   13a48:	687a      	ldr	r2, [r7, #4]
   13a4a:	4b0a      	ldr	r3, [pc, #40]	(13a74 <_ZN19RecalibrerOdometrieD2Ev+0x34>)
   13a4c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   13a4e:	687b      	ldr	r3, [r7, #4]
   13a50:	4618      	mov	r0, r3
   13a52:	f7ff fb41 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
   13a56:	f04f 0300 	mov.w	r3, #0	; 0x0
   13a5a:	b2db      	uxtb	r3, r3
   13a5c:	2b00      	cmp	r3, #0
   13a5e:	d002      	beq.n	13a66 <_ZN19RecalibrerOdometrieD2Ev+0x26>
   13a60:	6878      	ldr	r0, [r7, #4]
   13a62:	f7fa fd1f 	bl	e4a4 <_ZdlPv>
   13a66:	687b      	ldr	r3, [r7, #4]
   13a68:	4618      	mov	r0, r3
   13a6a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   13a6e:	46bd      	mov	sp, r7
   13a70:	bd80      	pop	{r7, pc}
   13a72:	46c0      	nop			(mov r8, r8)
   13a74:	0001fc90 	.word	0x0001fc90

00013a78 <_ZN19RecalibrerOdometrieC1Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   13a78:	b590      	push	{r4, r7, lr}
   13a7a:	b089      	sub	sp, #36
   13a7c:	af00      	add	r7, sp, #0
   13a7e:	60f8      	str	r0, [r7, #12]
   13a80:	4608      	mov	r0, r1
   13a82:	4639      	mov	r1, r7
   13a84:	e881 000c 	stmia.w	r1, {r2, r3}
   13a88:	4603      	mov	r3, r0
   13a8a:	72fb      	strb	r3, [r7, #11]
   13a8c:	68fc      	ldr	r4, [r7, #12]
   13a8e:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13a92:	4618      	mov	r0, r3
   13a94:	4923      	ldr	r1, [pc, #140]	(13b24 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   13a96:	4a23      	ldr	r2, [pc, #140]	(13b24 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   13a98:	f04f 0301 	mov.w	r3, #1	; 0x1
   13a9c:	f7fa fdc2 	bl	e624 <_ZN8PositionC1Effb>
   13aa0:	4620      	mov	r0, r4
   13aa2:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13aa6:	e893 0006 	ldmia.w	r3, {r1, r2}
   13aaa:	f7ff fb55 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
   13aae:	68fa      	ldr	r2, [r7, #12]
   13ab0:	4b1d      	ldr	r3, [pc, #116]	(13b28 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xb0>)
   13ab2:	6013      	str	r3, [r2, #0]
   13ab4:	68fb      	ldr	r3, [r7, #12]
   13ab6:	f103 0318 	add.w	r3, r3, #24	; 0x18
   13aba:	4618      	mov	r0, r3
   13abc:	f7fa fd8a 	bl	e5d4 <_ZN8PositionC1Ev>
   13ac0:	68fb      	ldr	r3, [r7, #12]
   13ac2:	f103 0320 	add.w	r3, r3, #32	; 0x20
   13ac6:	4618      	mov	r0, r3
   13ac8:	f7fa fd84 	bl	e5d4 <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   13acc:	68fa      	ldr	r2, [r7, #12]
   13ace:	7afb      	ldrb	r3, [r7, #11]
   13ad0:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   13ad4:	68fb      	ldr	r3, [r7, #12]
   13ad6:	f103 0318 	add.w	r3, r3, #24	; 0x18
   13ada:	4618      	mov	r0, r3
   13adc:	463b      	mov	r3, r7
   13ade:	e893 0006 	ldmia.w	r3, {r1, r2}
   13ae2:	f7fa fe33 	bl	e74c <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   13ae6:	68fb      	ldr	r3, [r7, #12]
   13ae8:	f103 0420 	add.w	r4, r3, #32	; 0x20
   13aec:	68fb      	ldr	r3, [r7, #12]
   13aee:	f893 c02c 	ldrb.w	ip, [r3, #44]
   13af2:	f107 0318 	add.w	r3, r7, #24	; 0x18
   13af6:	4618      	mov	r0, r3
   13af8:	490a      	ldr	r1, [pc, #40]	(13b24 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   13afa:	4a0a      	ldr	r2, [pc, #40]	(13b24 <_ZN19RecalibrerOdometrieC1Eb8Positioni+0xac>)
   13afc:	4663      	mov	r3, ip
   13afe:	f7fa fd91 	bl	e624 <_ZN8PositionC1Effb>
   13b02:	4620      	mov	r0, r4
   13b04:	f107 0318 	add.w	r3, r7, #24	; 0x18
   13b08:	e893 0006 	ldmia.w	r3, {r1, r2}
   13b0c:	f7fa fe1e 	bl	e74c <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   13b10:	68fa      	ldr	r2, [r7, #12]
   13b12:	6b3b      	ldr	r3, [r7, #48]
   13b14:	6293      	str	r3, [r2, #40]
}
   13b16:	68fb      	ldr	r3, [r7, #12]
   13b18:	4618      	mov	r0, r3
   13b1a:	f107 0724 	add.w	r7, r7, #36	; 0x24
   13b1e:	46bd      	mov	sp, r7
   13b20:	bd90      	pop	{r4, r7, pc}
   13b22:	46c0      	nop			(mov r8, r8)
   13b24:	00000000 	.word	0x00000000
   13b28:	0001fc90 	.word	0x0001fc90

00013b2c <_ZN19RecalibrerOdometrieC2Eb8Positioni>:
#include "leds.h"
#ifndef ROBOTHW
#include <QDebug>
#endif

RecalibrerOdometrie::RecalibrerOdometrie(bool blue, Position positionDepart, int coinRecalage) : MediumLevelAction()
   13b2c:	b590      	push	{r4, r7, lr}
   13b2e:	b089      	sub	sp, #36
   13b30:	af00      	add	r7, sp, #0
   13b32:	60f8      	str	r0, [r7, #12]
   13b34:	4608      	mov	r0, r1
   13b36:	4639      	mov	r1, r7
   13b38:	e881 000c 	stmia.w	r1, {r2, r3}
   13b3c:	4603      	mov	r3, r0
   13b3e:	72fb      	strb	r3, [r7, #11]
   13b40:	68fc      	ldr	r4, [r7, #12]
   13b42:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13b46:	4618      	mov	r0, r3
   13b48:	4923      	ldr	r1, [pc, #140]	(13bd8 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   13b4a:	4a23      	ldr	r2, [pc, #140]	(13bd8 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   13b4c:	f04f 0301 	mov.w	r3, #1	; 0x1
   13b50:	f7fa fd68 	bl	e624 <_ZN8PositionC1Effb>
   13b54:	4620      	mov	r0, r4
   13b56:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13b5a:	e893 0006 	ldmia.w	r3, {r1, r2}
   13b5e:	f7ff fafb 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
   13b62:	68fa      	ldr	r2, [r7, #12]
   13b64:	4b1d      	ldr	r3, [pc, #116]	(13bdc <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xb0>)
   13b66:	6013      	str	r3, [r2, #0]
   13b68:	68fb      	ldr	r3, [r7, #12]
   13b6a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   13b6e:	4618      	mov	r0, r3
   13b70:	f7fa fd30 	bl	e5d4 <_ZN8PositionC1Ev>
   13b74:	68fb      	ldr	r3, [r7, #12]
   13b76:	f103 0320 	add.w	r3, r3, #32	; 0x20
   13b7a:	4618      	mov	r0, r3
   13b7c:	f7fa fd2a 	bl	e5d4 <_ZN8PositionC1Ev>
{
    this->isBlue = blue;
   13b80:	68fa      	ldr	r2, [r7, #12]
   13b82:	7afb      	ldrb	r3, [r7, #11]
   13b84:	f882 302c 	strb.w	r3, [r2, #44]
    this->positionDepart = positionDepart;//Position(700, 3000, isBlue);
   13b88:	68fb      	ldr	r3, [r7, #12]
   13b8a:	f103 0318 	add.w	r3, r3, #24	; 0x18
   13b8e:	4618      	mov	r0, r3
   13b90:	463b      	mov	r3, r7
   13b92:	e893 0006 	ldmia.w	r3, {r1, r2}
   13b96:	f7fa fdd9 	bl	e74c <_ZN8PositionaSES_>
    //goalPosition2 = Position(0, 1360, isBlue);
    this->candidatPositionArrete = Position(0, 0, isBlue);
   13b9a:	68fb      	ldr	r3, [r7, #12]
   13b9c:	f103 0420 	add.w	r4, r3, #32	; 0x20
   13ba0:	68fb      	ldr	r3, [r7, #12]
   13ba2:	f893 c02c 	ldrb.w	ip, [r3, #44]
   13ba6:	f107 0318 	add.w	r3, r7, #24	; 0x18
   13baa:	4618      	mov	r0, r3
   13bac:	490a      	ldr	r1, [pc, #40]	(13bd8 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   13bae:	4a0a      	ldr	r2, [pc, #40]	(13bd8 <_ZN19RecalibrerOdometrieC2Eb8Positioni+0xac>)
   13bb0:	4663      	mov	r3, ip
   13bb2:	f7fa fd37 	bl	e624 <_ZN8PositionC1Effb>
   13bb6:	4620      	mov	r0, r4
   13bb8:	f107 0318 	add.w	r3, r7, #24	; 0x18
   13bbc:	e893 0006 	ldmia.w	r3, {r1, r2}
   13bc0:	f7fa fdc4 	bl	e74c <_ZN8PositionaSES_>
    this->coinRecalage = coinRecalage;
   13bc4:	68fa      	ldr	r2, [r7, #12]
   13bc6:	6b3b      	ldr	r3, [r7, #48]
   13bc8:	6293      	str	r3, [r2, #40]
}
   13bca:	68fb      	ldr	r3, [r7, #12]
   13bcc:	4618      	mov	r0, r3
   13bce:	f107 0724 	add.w	r7, r7, #36	; 0x24
   13bd2:	46bd      	mov	sp, r7
   13bd4:	bd90      	pop	{r4, r7, pc}
   13bd6:	46c0      	nop			(mov r8, r8)
   13bd8:	00000000 	.word	0x00000000
   13bdc:	0001fc90 	.word	0x0001fc90

00013be0 <_ZN11StrategieV212getTimeSpentEv>:
StrategieV2::~StrategieV2()
{
    //dtor
}

long StrategieV2::getTimeSpent()
   13be0:	b480      	push	{r7}
   13be2:	af00      	add	r7, sp, #0
{
    return updateCount * 5;
   13be4:	4b04      	ldr	r3, [pc, #16]	(13bf8 <_ZN11StrategieV212getTimeSpentEv+0x18>)
   13be6:	681a      	ldr	r2, [r3, #0]
   13be8:	4613      	mov	r3, r2
   13bea:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13bee:	4413      	add	r3, r2
}
   13bf0:	4618      	mov	r0, r3
   13bf2:	46bd      	mov	sp, r7
   13bf4:	bc80      	pop	{r7}
   13bf6:	4770      	bx	lr
   13bf8:	200005a4 	.word	0x200005a4

00013bfc <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::addTemporaryAction(MediumLevelAction* action)
   13bfc:	b480      	push	{r7}
   13bfe:	b083      	sub	sp, #12
   13c00:	af00      	add	r7, sp, #0
   13c02:	6078      	str	r0, [r7, #4]
{
    currentAction = action;
   13c04:	4a05      	ldr	r2, [pc, #20]	(13c1c <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x20>)
   13c06:	687b      	ldr	r3, [r7, #4]
   13c08:	6013      	str	r3, [r2, #0]
    mustDeleteAction = true; // this is a temporary action that needs to be deleted
   13c0a:	4a05      	ldr	r2, [pc, #20]	(13c20 <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction+0x24>)
   13c0c:	f04f 0301 	mov.w	r3, #1	; 0x1
   13c10:	7013      	strb	r3, [r2, #0]
}
   13c12:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13c16:	46bd      	mov	sp, r7
   13c18:	bc80      	pop	{r7}
   13c1a:	4770      	bx	lr
   13c1c:	200005ac 	.word	0x200005ac
   13c20:	2000063a 	.word	0x2000063a

00013c24 <_ZN11StrategieV214setJustAvoidedEb>:
void StrategieV2::setJustAvoided(bool avoided)
   13c24:	b480      	push	{r7}
   13c26:	b083      	sub	sp, #12
   13c28:	af00      	add	r7, sp, #0
   13c2a:	4603      	mov	r3, r0
   13c2c:	71fb      	strb	r3, [r7, #7]
{
    hasJustAvoided = avoided;
   13c2e:	4a04      	ldr	r2, [pc, #16]	(13c40 <_ZN11StrategieV214setJustAvoidedEb+0x1c>)
   13c30:	79fb      	ldrb	r3, [r7, #7]
   13c32:	7013      	strb	r3, [r2, #0]
}
   13c34:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13c38:	46bd      	mov	sp, r7
   13c3a:	bc80      	pop	{r7}
   13c3c:	4770      	bx	lr
   13c3e:	46c0      	nop			(mov r8, r8)
   13c40:	20000639 	.word	0x20000639

00013c44 <_ZN11StrategieV214getJustAvoidedEv>:
bool StrategieV2::getJustAvoided()
   13c44:	b480      	push	{r7}
   13c46:	af00      	add	r7, sp, #0
{
    return hasJustAvoided;
   13c48:	4b02      	ldr	r3, [pc, #8]	(13c54 <_ZN11StrategieV214getJustAvoidedEv+0x10>)
   13c4a:	781b      	ldrb	r3, [r3, #0]
}
   13c4c:	4618      	mov	r0, r3
   13c4e:	46bd      	mov	sp, r7
   13c50:	bc80      	pop	{r7}
   13c52:	4770      	bx	lr
   13c54:	20000639 	.word	0x20000639

00013c58 <_ZN11StrategieV29setIsBlueEb>:
{
    somethingDetected = true;
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
}

void StrategieV2::setIsBlue(bool blue)
   13c58:	b480      	push	{r7}
   13c5a:	b083      	sub	sp, #12
   13c5c:	af00      	add	r7, sp, #0
   13c5e:	4603      	mov	r3, r0
   13c60:	71fb      	strb	r3, [r7, #7]
{
    isBlue = blue;
   13c62:	4a04      	ldr	r2, [pc, #16]	(13c74 <_ZN11StrategieV29setIsBlueEb+0x1c>)
   13c64:	79fb      	ldrb	r3, [r7, #7]
   13c66:	7013      	strb	r3, [r2, #0]
}
   13c68:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13c6c:	46bd      	mov	sp, r7
   13c6e:	bc80      	pop	{r7}
   13c70:	4770      	bx	lr
   13c72:	46c0      	nop			(mov r8, r8)
   13c74:	20000645 	.word	0x20000645

00013c78 <_ZN11StrategieV29getIsBlueEv>:
bool StrategieV2::getIsBlue()
   13c78:	b480      	push	{r7}
   13c7a:	af00      	add	r7, sp, #0
{
    return isBlue;
   13c7c:	4b02      	ldr	r3, [pc, #8]	(13c88 <_ZN11StrategieV29getIsBlueEv+0x10>)
   13c7e:	781b      	ldrb	r3, [r3, #0]
}
   13c80:	4618      	mov	r0, r3
   13c82:	46bd      	mov	sp, r7
   13c84:	bc80      	pop	{r7}
   13c86:	4770      	bx	lr
   13c88:	20000645 	.word	0x20000645

00013c8c <_ZN11StrategieV211gatherGlassEv>:

void StrategieV2::gatherGlass()
   13c8c:	b480      	push	{r7}
   13c8e:	af00      	add	r7, sp, #0
{
    glassGathered++;
   13c90:	4b0a      	ldr	r3, [pc, #40]	(13cbc <_ZN11StrategieV211gatherGlassEv+0x30>)
   13c92:	681b      	ldr	r3, [r3, #0]
   13c94:	f103 0201 	add.w	r2, r3, #1	; 0x1
   13c98:	4b08      	ldr	r3, [pc, #32]	(13cbc <_ZN11StrategieV211gatherGlassEv+0x30>)
   13c9a:	601a      	str	r2, [r3, #0]
    if (glassGathered > 0)
   13c9c:	4b07      	ldr	r3, [pc, #28]	(13cbc <_ZN11StrategieV211gatherGlassEv+0x30>)
   13c9e:	681b      	ldr	r3, [r3, #0]
   13ca0:	2b00      	cmp	r3, #0
   13ca2:	dd07      	ble.n	13cb4 <_ZN11StrategieV211gatherGlassEv+0x28>
    {
        glassGathered = 0;
   13ca4:	4a05      	ldr	r2, [pc, #20]	(13cbc <_ZN11StrategieV211gatherGlassEv+0x30>)
   13ca6:	f04f 0300 	mov.w	r3, #0	; 0x0
   13caa:	6013      	str	r3, [r2, #0]
        hasToGoBase = true;
   13cac:	4a04      	ldr	r2, [pc, #16]	(13cc0 <_ZN11StrategieV211gatherGlassEv+0x34>)
   13cae:	f04f 0301 	mov.w	r3, #1	; 0x1
   13cb2:	7013      	strb	r3, [r2, #0]
    }
}
   13cb4:	46bd      	mov	sp, r7
   13cb6:	bc80      	pop	{r7}
   13cb8:	4770      	bx	lr
   13cba:	46c0      	nop			(mov r8, r8)
   13cbc:	2000063c 	.word	0x2000063c
   13cc0:	20000638 	.word	0x20000638

00013cc4 <_ZN11StrategieV222setEnTrainDeRecalibrerEb>:

void StrategieV2::setEnTrainDeRecalibrer(bool recalibre)
   13cc4:	b480      	push	{r7}
   13cc6:	b083      	sub	sp, #12
   13cc8:	af00      	add	r7, sp, #0
   13cca:	4603      	mov	r3, r0
   13ccc:	71fb      	strb	r3, [r7, #7]
{
    enTrainDeRecalibrerOdometrie = recalibre;
   13cce:	4a04      	ldr	r2, [pc, #16]	(13ce0 <_ZN11StrategieV222setEnTrainDeRecalibrerEb+0x1c>)
   13cd0:	79fb      	ldrb	r3, [r7, #7]
   13cd2:	7013      	strb	r3, [r2, #0]
}
   13cd4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13cd8:	46bd      	mov	sp, r7
   13cda:	bc80      	pop	{r7}
   13cdc:	4770      	bx	lr
   13cde:	46c0      	nop			(mov r8, r8)
   13ce0:	20000654 	.word	0x20000654

00013ce4 <_ZN11StrategieV218emptySharpsToCheckEv>:

void StrategieV2::emptySharpsToCheck()
   13ce4:	b480      	push	{r7}
   13ce6:	b083      	sub	sp, #12
   13ce8:	af00      	add	r7, sp, #0
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   13cea:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cee:	607b      	str	r3, [r7, #4]
   13cf0:	e008      	b.n	13d04 <_ZN11StrategieV218emptySharpsToCheckEv+0x20>
        sharpsToCheck[i] = false;
   13cf2:	6879      	ldr	r1, [r7, #4]
   13cf4:	4a07      	ldr	r2, [pc, #28]	(13d14 <_ZN11StrategieV218emptySharpsToCheckEv+0x30>)
   13cf6:	f04f 0300 	mov.w	r3, #0	; 0x0
   13cfa:	5453      	strb	r3, [r2, r1]
    enTrainDeRecalibrerOdometrie = recalibre;
}

void StrategieV2::emptySharpsToCheck()
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   13cfc:	687b      	ldr	r3, [r7, #4]
   13cfe:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13d02:	607b      	str	r3, [r7, #4]
   13d04:	687b      	ldr	r3, [r7, #4]
   13d06:	2b07      	cmp	r3, #7
   13d08:	ddf3      	ble.n	13cf2 <_ZN11StrategieV218emptySharpsToCheckEv+0xe>
        sharpsToCheck[i] = false;
}
   13d0a:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13d0e:	46bd      	mov	sp, r7
   13d10:	bc80      	pop	{r7}
   13d12:	4770      	bx	lr
   13d14:	20000646 	.word	0x20000646

00013d18 <_ZN11StrategieV210setCommandEP7Command>:
#endif
    }

}

void StrategieV2::setCommand(Command* command)
   13d18:	b480      	push	{r7}
   13d1a:	b083      	sub	sp, #12
   13d1c:	af00      	add	r7, sp, #0
   13d1e:	6078      	str	r0, [r7, #4]
{
    currentCommand = command;
   13d20:	4a03      	ldr	r2, [pc, #12]	(13d30 <_ZN11StrategieV210setCommandEP7Command+0x18>)
   13d22:	687b      	ldr	r3, [r7, #4]
   13d24:	6013      	str	r3, [r2, #0]
}
   13d26:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13d2a:	46bd      	mov	sp, r7
   13d2c:	bc80      	pop	{r7}
   13d2e:	4770      	bx	lr
   13d30:	200005a8 	.word	0x200005a8

00013d34 <_ZN11StrategieV219setTourneSurSoiMemeEb>:
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}

void StrategieV2::setTourneSurSoiMeme(bool tourne)
   13d34:	b480      	push	{r7}
   13d36:	b083      	sub	sp, #12
   13d38:	af00      	add	r7, sp, #0
   13d3a:	4603      	mov	r3, r0
   13d3c:	71fb      	strb	r3, [r7, #7]
{
    tourneSurSoiMeme = tourne;
   13d3e:	4a04      	ldr	r2, [pc, #16]	(13d50 <_ZN11StrategieV219setTourneSurSoiMemeEb+0x1c>)
   13d40:	79fb      	ldrb	r3, [r7, #7]
   13d42:	7013      	strb	r3, [r2, #0]
}
   13d44:	f107 070c 	add.w	r7, r7, #12	; 0xc
   13d48:	46bd      	mov	sp, r7
   13d4a:	bc80      	pop	{r7}
   13d4c:	4770      	bx	lr
   13d4e:	46c0      	nop			(mov r8, r8)
   13d50:	20000660 	.word	0x20000660

00013d54 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE>:
void StrategieV2::setCommand(Command* command)
{
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
   13d54:	b580      	push	{r7, lr}
   13d56:	b088      	sub	sp, #32
   13d58:	af00      	add	r7, sp, #0
   13d5a:	4603      	mov	r3, r0
   13d5c:	73fb      	strb	r3, [r7, #15]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   13d5e:	f04f 0300 	mov.w	r3, #0	; 0x0
   13d62:	61fb      	str	r3, [r7, #28]
   13d64:	e04a      	b.n	13dfc <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa8>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
   13d66:	4b29      	ldr	r3, [pc, #164]	(13e0c <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   13d68:	681a      	ldr	r2, [r3, #0]
   13d6a:	69fb      	ldr	r3, [r7, #28]
   13d6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13d70:	4413      	add	r3, r2
   13d72:	681b      	ldr	r3, [r3, #0]
   13d74:	4618      	mov	r0, r3
   13d76:	f7f9 f877 	bl	ce68 <_ZN11SharpSensor7getNameEv>
   13d7a:	4603      	mov	r3, r0
   13d7c:	461a      	mov	r2, r3
   13d7e:	7bfb      	ldrb	r3, [r7, #15]
   13d80:	4293      	cmp	r3, r2
   13d82:	d115      	bne.n	13db0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   13d84:	69fa      	ldr	r2, [r7, #28]
   13d86:	4b22      	ldr	r3, [pc, #136]	(13e10 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xbc>)
   13d88:	5c9b      	ldrb	r3, [r3, r2]
   13d8a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   13d8e:	b2db      	uxtb	r3, r3
   13d90:	2b00      	cmp	r3, #0
   13d92:	d10d      	bne.n	13db0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   13d94:	4b1f      	ldr	r3, [pc, #124]	(13e14 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xc0>)
   13d96:	781b      	ldrb	r3, [r3, #0]
   13d98:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   13d9c:	b2db      	uxtb	r3, r3
   13d9e:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   13da2:	b2db      	uxtb	r3, r3
   13da4:	2b00      	cmp	r3, #0
   13da6:	d103      	bne.n	13db0 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x5c>
   13da8:	f04f 0301 	mov.w	r3, #1	; 0x1
   13dac:	60bb      	str	r3, [r7, #8]
   13dae:	e002      	b.n	13db6 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x62>
   13db0:	f04f 0300 	mov.w	r3, #0	; 0x0
   13db4:	60bb      	str	r3, [r7, #8]
   13db6:	68bb      	ldr	r3, [r7, #8]
   13db8:	2b00      	cmp	r3, #0
   13dba:	d01b      	beq.n	13df4 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xa0>
            return sharps[i]->getValue().b;
   13dbc:	4b13      	ldr	r3, [pc, #76]	(13e0c <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   13dbe:	681a      	ldr	r2, [r3, #0]
   13dc0:	69fb      	ldr	r3, [r7, #28]
   13dc2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13dc6:	4413      	add	r3, r2
   13dc8:	681b      	ldr	r3, [r3, #0]
   13dca:	681b      	ldr	r3, [r3, #0]
   13dcc:	f103 0308 	add.w	r3, r3, #8	; 0x8
   13dd0:	f8d3 c000 	ldr.w	ip, [r3]
   13dd4:	4b0d      	ldr	r3, [pc, #52]	(13e0c <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xb8>)
   13dd6:	681a      	ldr	r2, [r3, #0]
   13dd8:	69fb      	ldr	r3, [r7, #28]
   13dda:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13dde:	4413      	add	r3, r2
   13de0:	681a      	ldr	r2, [r3, #0]
   13de2:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13de6:	4618      	mov	r0, r3
   13de8:	4611      	mov	r1, r2
   13dea:	47e0      	blx	ip
   13dec:	7e3b      	ldrb	r3, [r7, #24]
   13dee:	607b      	str	r3, [r7, #4]
}
   13df0:	6878      	ldr	r0, [r7, #4]
   13df2:	e006      	b.n	13e02 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0xae>
    currentCommand = command;
}

bool StrategieV2::sharpDetects(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   13df4:	69fb      	ldr	r3, [r7, #28]
   13df6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13dfa:	61fb      	str	r3, [r7, #28]
   13dfc:	69fb      	ldr	r3, [r7, #28]
   13dfe:	2b07      	cmp	r3, #7
   13e00:	ddb1      	ble.n	13d66 <_ZN11StrategieV212sharpDetectsEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name && sharpsToCheck[i] == true && !tourneSurSoiMeme)
            return sharps[i]->getValue().b;
}
   13e02:	f107 0720 	add.w	r7, r7, #32	; 0x20
   13e06:	46bd      	mov	sp, r7
   13e08:	bd80      	pop	{r7, pc}
   13e0a:	46c0      	nop			(mov r8, r8)
   13e0c:	20000634 	.word	0x20000634
   13e10:	20000646 	.word	0x20000646
   13e14:	20000660 	.word	0x20000660

00013e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>:
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
   13e18:	b580      	push	{r7, lr}
   13e1a:	b084      	sub	sp, #16
   13e1c:	af00      	add	r7, sp, #0
   13e1e:	4603      	mov	r3, r0
   13e20:	71fb      	strb	r3, [r7, #7]
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   13e22:	f04f 0300 	mov.w	r3, #0	; 0x0
   13e26:	60fb      	str	r3, [r7, #12]
   13e28:	e01c      	b.n	13e64 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x4c>
        if (sharps[i]->getName() == name)
   13e2a:	4b12      	ldr	r3, [pc, #72]	(13e74 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x5c>)
   13e2c:	681a      	ldr	r2, [r3, #0]
   13e2e:	68fb      	ldr	r3, [r7, #12]
   13e30:	ea4f 0383 	mov.w	r3, r3, lsl #2
   13e34:	4413      	add	r3, r2
   13e36:	681b      	ldr	r3, [r3, #0]
   13e38:	4618      	mov	r0, r3
   13e3a:	f7f9 f815 	bl	ce68 <_ZN11SharpSensor7getNameEv>
   13e3e:	4603      	mov	r3, r0
   13e40:	461a      	mov	r2, r3
   13e42:	79fb      	ldrb	r3, [r7, #7]
   13e44:	4293      	cmp	r3, r2
   13e46:	bf14      	ite	ne
   13e48:	2300      	movne	r3, #0
   13e4a:	2301      	moveq	r3, #1
   13e4c:	b2db      	uxtb	r3, r3
   13e4e:	2b00      	cmp	r3, #0
   13e50:	d004      	beq.n	13e5c <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x44>
            sharpsToCheck[i] = true;
   13e52:	68f9      	ldr	r1, [r7, #12]
   13e54:	4a08      	ldr	r2, [pc, #32]	(13e78 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x60>)
   13e56:	f04f 0301 	mov.w	r3, #1	; 0x1
   13e5a:	5453      	strb	r3, [r2, r1]
        sharpsToCheck[i] = false;
}

void StrategieV2::enableSharp(SharpSensor::SharpName name)
{
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   13e5c:	68fb      	ldr	r3, [r7, #12]
   13e5e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   13e62:	60fb      	str	r3, [r7, #12]
   13e64:	68fb      	ldr	r3, [r7, #12]
   13e66:	2b07      	cmp	r3, #7
   13e68:	dddf      	ble.n	13e2a <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE+0x12>
        if (sharps[i]->getName() == name)
            sharpsToCheck[i] = true;
}
   13e6a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   13e6e:	46bd      	mov	sp, r7
   13e70:	bd80      	pop	{r7, pc}
   13e72:	46c0      	nop			(mov r8, r8)
   13e74:	20000634 	.word	0x20000634
   13e78:	20000646 	.word	0x20000646

00013e7c <_ZN11StrategieV217enableSharpsGroupEb>:

void StrategieV2::enableSharpsGroup(bool front)
   13e7c:	b580      	push	{r7, lr}
   13e7e:	b082      	sub	sp, #8
   13e80:	af00      	add	r7, sp, #0
   13e82:	4603      	mov	r3, r0
   13e84:	71fb      	strb	r3, [r7, #7]
{
    emptySharpsToCheck();
   13e86:	f7ff ff2d 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>

    if (front)
   13e8a:	79fb      	ldrb	r3, [r7, #7]
   13e8c:	2b00      	cmp	r3, #0
   13e8e:	d010      	beq.n	13eb2 <_ZN11StrategieV217enableSharpsGroupEb+0x36>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::FRONT_LEFT);
        enableSharp(SharpSensor::FRONT_RIGHT);
        enableSharp(SharpSensor::FRONT_MIDDLE);
#else
        enableSharp(SharpSensor::FRONT_LEFT);
   13e90:	f04f 0002 	mov.w	r0, #2	; 0x2
   13e94:	f7ff ffc0 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::FRONT_RIGHT);
   13e98:	f04f 0003 	mov.w	r0, #3	; 0x3
   13e9c:	f7ff ffbc 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_FRONT);
   13ea0:	f04f 0004 	mov.w	r0, #4	; 0x4
   13ea4:	f7ff ffb8 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_FRONT);
   13ea8:	f04f 0006 	mov.w	r0, #6	; 0x6
   13eac:	f7ff ffb4 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
   13eb0:	e00f      	b.n	13ed2 <_ZN11StrategieV217enableSharpsGroupEb+0x56>
#if defined(STM32F40_41xxx)
        enableSharp(SharpSensor::BACK_LEFT);
        enableSharp(SharpSensor::BACK_RIGHT);
        enableSharp(SharpSensor::BACK_MIDDLE);
#else
        enableSharp(SharpSensor::BACK_LEFT);
   13eb2:	f04f 0001 	mov.w	r0, #1	; 0x1
   13eb6:	f7ff ffaf 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::BACK_RIGHT);
   13eba:	f04f 0000 	mov.w	r0, #0	; 0x0
   13ebe:	f7ff ffab 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::LEFT_BACK);
   13ec2:	f04f 0005 	mov.w	r0, #5	; 0x5
   13ec6:	f7ff ffa7 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
        enableSharp(SharpSensor::RIGHT_BACK);
   13eca:	f04f 0007 	mov.w	r0, #7	; 0x7
   13ece:	f7ff ffa3 	bl	13e18 <_ZN11StrategieV211enableSharpEN11SharpSensor9SharpNameE>
#endif
    }

}
   13ed2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   13ed6:	46bd      	mov	sp, r7
   13ed8:	bd80      	pop	{r7, pc}
   13eda:	46c0      	nop			(mov r8, r8)

00013edc <_ZN11StrategieV211willCollideEv>:
}
bool StrategieV2::getJustAvoided()
{
    return hasJustAvoided;
}
bool StrategieV2::willCollide()
   13edc:	b580      	push	{r7, lr}
   13ede:	b082      	sub	sp, #8
   13ee0:	af00      	add	r7, sp, #0
{
    somethingDetected = true;
   13ee2:	4a07      	ldr	r2, [pc, #28]	(13f00 <_ZN11StrategieV211willCollideEv+0x24>)
   13ee4:	f04f 0301 	mov.w	r3, #1	; 0x1
   13ee8:	7013      	strb	r3, [r2, #0]
    Asservissement::asservissement->setCommandSpeeds(NULL); // stoppe le robot
   13eea:	4b06      	ldr	r3, [pc, #24]	(13f04 <_ZN11StrategieV211willCollideEv+0x28>)
   13eec:	681b      	ldr	r3, [r3, #0]
   13eee:	4618      	mov	r0, r3
   13ef0:	f04f 0100 	mov.w	r1, #0	; 0x0
   13ef4:	f7f3 f920 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   13ef8:	f107 0708 	add.w	r7, r7, #8	; 0x8
   13efc:	46bd      	mov	sp, r7
   13efe:	bd80      	pop	{r7, pc}
   13f00:	20000644 	.word	0x20000644
   13f04:	20000560 	.word	0x20000560

00013f08 <_ZN11StrategieV26lookAtEff>:
        delete currentCommand;
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
    StrategieV2::emptySharpsToCheck();
}
void StrategieV2::lookAt(Angle a, float maxSpeed)
   13f08:	b580      	push	{r7, lr}
   13f0a:	b084      	sub	sp, #16
   13f0c:	af00      	add	r7, sp, #0
   13f0e:	60f8      	str	r0, [r7, #12]
   13f10:	60b9      	str	r1, [r7, #8]
{
    if (currentCommand != NULL)
   13f12:	4b1b      	ldr	r3, [pc, #108]	(13f80 <_ZN11StrategieV26lookAtEff+0x78>)
   13f14:	681b      	ldr	r3, [r3, #0]
   13f16:	2b00      	cmp	r3, #0
   13f18:	d00d      	beq.n	13f36 <_ZN11StrategieV26lookAtEff+0x2e>
        delete currentCommand;
   13f1a:	4b19      	ldr	r3, [pc, #100]	(13f80 <_ZN11StrategieV26lookAtEff+0x78>)
   13f1c:	681b      	ldr	r3, [r3, #0]
   13f1e:	2b00      	cmp	r3, #0
   13f20:	d009      	beq.n	13f36 <_ZN11StrategieV26lookAtEff+0x2e>
   13f22:	4b17      	ldr	r3, [pc, #92]	(13f80 <_ZN11StrategieV26lookAtEff+0x78>)
   13f24:	681b      	ldr	r3, [r3, #0]
   13f26:	681b      	ldr	r3, [r3, #0]
   13f28:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13f2c:	681a      	ldr	r2, [r3, #0]
   13f2e:	4b14      	ldr	r3, [pc, #80]	(13f80 <_ZN11StrategieV26lookAtEff+0x78>)
   13f30:	681b      	ldr	r3, [r3, #0]
   13f32:	4618      	mov	r0, r3
   13f34:	4790      	blx	r2
    currentCommand = new CommandTournerVers(a, maxSpeed); // create the command
   13f36:	f04f 0020 	mov.w	r0, #32	; 0x20
   13f3a:	f7fa fa0d 	bl	e358 <_Znwj>
   13f3e:	4603      	mov	r3, r0
   13f40:	603b      	str	r3, [r7, #0]
   13f42:	683b      	ldr	r3, [r7, #0]
   13f44:	2b00      	cmp	r3, #0
   13f46:	d007      	beq.n	13f58 <_ZN11StrategieV26lookAtEff+0x50>
   13f48:	6838      	ldr	r0, [r7, #0]
   13f4a:	68f9      	ldr	r1, [r7, #12]
   13f4c:	68ba      	ldr	r2, [r7, #8]
   13f4e:	f7f4 fcdf 	bl	8910 <_ZN18CommandTournerVersC1Eff>
   13f52:	683b      	ldr	r3, [r7, #0]
   13f54:	607b      	str	r3, [r7, #4]
   13f56:	e001      	b.n	13f5c <_ZN11StrategieV26lookAtEff+0x54>
   13f58:	683b      	ldr	r3, [r7, #0]
   13f5a:	607b      	str	r3, [r7, #4]
   13f5c:	687a      	ldr	r2, [r7, #4]
   13f5e:	4b08      	ldr	r3, [pc, #32]	(13f80 <_ZN11StrategieV26lookAtEff+0x78>)
   13f60:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   13f62:	4b08      	ldr	r3, [pc, #32]	(13f84 <_ZN11StrategieV26lookAtEff+0x7c>)
   13f64:	681a      	ldr	r2, [r3, #0]
   13f66:	4b06      	ldr	r3, [pc, #24]	(13f80 <_ZN11StrategieV26lookAtEff+0x78>)
   13f68:	681b      	ldr	r3, [r3, #0]
   13f6a:	4610      	mov	r0, r2
   13f6c:	4619      	mov	r1, r3
   13f6e:	f7f3 f8e3 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   13f72:	f7ff feb7 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   13f76:	f107 0710 	add.w	r7, r7, #16	; 0x10
   13f7a:	46bd      	mov	sp, r7
   13f7c:	bd80      	pop	{r7, pc}
   13f7e:	46c0      	nop			(mov r8, r8)
   13f80:	200005a8 	.word	0x200005a8
   13f84:	20000560 	.word	0x20000560

00013f88 <_ZN11StrategieV26lookAtE8Positionf>:
    if (currentCommand != NULL)
        delete currentCommand;
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
}
void StrategieV2::lookAt(Position pos, float maxSpeed)
   13f88:	b580      	push	{r7, lr}
   13f8a:	b086      	sub	sp, #24
   13f8c:	af00      	add	r7, sp, #0
   13f8e:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13f92:	e883 0003 	stmia.w	r3, {r0, r1}
   13f96:	60fa      	str	r2, [r7, #12]
{
    if (currentCommand != NULL)
   13f98:	4b1c      	ldr	r3, [pc, #112]	(1400c <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   13f9a:	681b      	ldr	r3, [r3, #0]
   13f9c:	2b00      	cmp	r3, #0
   13f9e:	d00d      	beq.n	13fbc <_ZN11StrategieV26lookAtE8Positionf+0x34>
        delete currentCommand;
   13fa0:	4b1a      	ldr	r3, [pc, #104]	(1400c <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   13fa2:	681b      	ldr	r3, [r3, #0]
   13fa4:	2b00      	cmp	r3, #0
   13fa6:	d009      	beq.n	13fbc <_ZN11StrategieV26lookAtE8Positionf+0x34>
   13fa8:	4b18      	ldr	r3, [pc, #96]	(1400c <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   13faa:	681b      	ldr	r3, [r3, #0]
   13fac:	681b      	ldr	r3, [r3, #0]
   13fae:	f103 0304 	add.w	r3, r3, #4	; 0x4
   13fb2:	681a      	ldr	r2, [r3, #0]
   13fb4:	4b15      	ldr	r3, [pc, #84]	(1400c <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   13fb6:	681b      	ldr	r3, [r3, #0]
   13fb8:	4618      	mov	r0, r3
   13fba:	4790      	blx	r2
    currentCommand = new CommandTournerVers(pos, maxSpeed); // create the command
   13fbc:	f04f 0020 	mov.w	r0, #32	; 0x20
   13fc0:	f7fa f9ca 	bl	e358 <_Znwj>
   13fc4:	4603      	mov	r3, r0
   13fc6:	607b      	str	r3, [r7, #4]
   13fc8:	687b      	ldr	r3, [r7, #4]
   13fca:	2b00      	cmp	r3, #0
   13fcc:	d00a      	beq.n	13fe4 <_ZN11StrategieV26lookAtE8Positionf+0x5c>
   13fce:	6878      	ldr	r0, [r7, #4]
   13fd0:	f107 0310 	add.w	r3, r7, #16	; 0x10
   13fd4:	e893 0006 	ldmia.w	r3, {r1, r2}
   13fd8:	68fb      	ldr	r3, [r7, #12]
   13fda:	f7f4 fd1d 	bl	8a18 <_ZN18CommandTournerVersC1E8Positionf>
   13fde:	687b      	ldr	r3, [r7, #4]
   13fe0:	60bb      	str	r3, [r7, #8]
   13fe2:	e001      	b.n	13fe8 <_ZN11StrategieV26lookAtE8Positionf+0x60>
   13fe4:	687b      	ldr	r3, [r7, #4]
   13fe6:	60bb      	str	r3, [r7, #8]
   13fe8:	68ba      	ldr	r2, [r7, #8]
   13fea:	4b08      	ldr	r3, [pc, #32]	(1400c <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   13fec:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand); // apply it
   13fee:	4b08      	ldr	r3, [pc, #32]	(14010 <_ZN11StrategieV26lookAtE8Positionf+0x88>)
   13ff0:	681a      	ldr	r2, [r3, #0]
   13ff2:	4b06      	ldr	r3, [pc, #24]	(1400c <_ZN11StrategieV26lookAtE8Positionf+0x84>)
   13ff4:	681b      	ldr	r3, [r3, #0]
   13ff6:	4610      	mov	r0, r2
   13ff8:	4619      	mov	r1, r3
   13ffa:	f7f3 f89d 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   13ffe:	f7ff fe71 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>
}
   14002:	f107 0718 	add.w	r7, r7, #24	; 0x18
   14006:	46bd      	mov	sp, r7
   14008:	bd80      	pop	{r7, pc}
   1400a:	46c0      	nop			(mov r8, r8)
   1400c:	200005a8 	.word	0x200005a8
   14010:	20000560 	.word	0x20000560

00014014 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf>:
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
void StrategieV2::setCurrentGoal(Position goal, Position center, float vitesse, bool goBack, Angle precisionAngle)
   14014:	b580      	push	{r7, lr}
   14016:	b08a      	sub	sp, #40
   14018:	af04      	add	r7, sp, #16
   1401a:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   1401e:	e88c 0003 	stmia.w	ip, {r0, r1}
   14022:	f107 0108 	add.w	r1, r7, #8	; 0x8
   14026:	e881 000c 	stmia.w	r1, {r2, r3}
{
    if (currentCommand != NULL)
   1402a:	4b20      	ldr	r3, [pc, #128]	(140ac <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   1402c:	681b      	ldr	r3, [r3, #0]
   1402e:	2b00      	cmp	r3, #0
   14030:	d00d      	beq.n	1404e <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
        delete currentCommand;
   14032:	4b1e      	ldr	r3, [pc, #120]	(140ac <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   14034:	681b      	ldr	r3, [r3, #0]
   14036:	2b00      	cmp	r3, #0
   14038:	d009      	beq.n	1404e <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x3a>
   1403a:	4b1c      	ldr	r3, [pc, #112]	(140ac <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   1403c:	681b      	ldr	r3, [r3, #0]
   1403e:	681b      	ldr	r3, [r3, #0]
   14040:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14044:	681a      	ldr	r2, [r3, #0]
   14046:	4b19      	ldr	r3, [pc, #100]	(140ac <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   14048:	681b      	ldr	r3, [r3, #0]
   1404a:	4618      	mov	r0, r3
   1404c:	4790      	blx	r2
    currentCommand = new CommandAllerEnArcA(goal, center, vitesse*5, goBack);
   1404e:	f04f 0030 	mov.w	r0, #48	; 0x30
   14052:	f7fa f981 	bl	e358 <_Znwj>
   14056:	4603      	mov	r3, r0
   14058:	603b      	str	r3, [r7, #0]
   1405a:	683b      	ldr	r3, [r7, #0]
   1405c:	2b00      	cmp	r3, #0
   1405e:	d014      	beq.n	1408a <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x76>
   14060:	6a38      	ldr	r0, [r7, #32]
   14062:	4913      	ldr	r1, [pc, #76]	(140b0 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x9c>)
   14064:	f004 fe0c 	bl	18c80 <__aeabi_fmul>
   14068:	4603      	mov	r3, r0
   1406a:	9301      	str	r3, [sp, #4]
   1406c:	f897 3024 	ldrb.w	r3, [r7, #36]
   14070:	9302      	str	r3, [sp, #8]
   14072:	68fb      	ldr	r3, [r7, #12]
   14074:	9300      	str	r3, [sp, #0]
   14076:	68bb      	ldr	r3, [r7, #8]
   14078:	6838      	ldr	r0, [r7, #0]
   1407a:	f107 0210 	add.w	r2, r7, #16	; 0x10
   1407e:	ca06      	ldmia	r2!, {r1, r2}
   14080:	f7f4 fdfa 	bl	8c78 <_ZN18CommandAllerEnArcAC1E8PositionS0_fb>
   14084:	683b      	ldr	r3, [r7, #0]
   14086:	607b      	str	r3, [r7, #4]
   14088:	e001      	b.n	1408e <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x7a>
   1408a:	683b      	ldr	r3, [r7, #0]
   1408c:	607b      	str	r3, [r7, #4]
   1408e:	687a      	ldr	r2, [r7, #4]
   14090:	4b06      	ldr	r3, [pc, #24]	(140ac <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   14092:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   14094:	4b07      	ldr	r3, [pc, #28]	(140b4 <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0xa0>)
   14096:	681a      	ldr	r2, [r3, #0]
   14098:	4b04      	ldr	r3, [pc, #16]	(140ac <_ZN11StrategieV214setCurrentGoalE8PositionS0_fbf+0x98>)
   1409a:	681b      	ldr	r3, [r3, #0]
   1409c:	4610      	mov	r0, r2
   1409e:	4619      	mov	r1, r3
   140a0:	f7f3 f84a 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
}
   140a4:	f107 0718 	add.w	r7, r7, #24	; 0x18
   140a8:	46bd      	mov	sp, r7
   140aa:	bd80      	pop	{r7, pc}
   140ac:	200005a8 	.word	0x200005a8
   140b0:	40a00000 	.word	0x40a00000
   140b4:	20000560 	.word	0x20000560

000140b8 <_ZN11StrategieV214setCurrentGoalE8Positionbff>:
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}

void StrategieV2::setCurrentGoal(Position goal, bool goBack, float maxSpeed, Angle precisionAngle)
   140b8:	b580      	push	{r7, lr}
   140ba:	b08a      	sub	sp, #40
   140bc:	af04      	add	r7, sp, #16
   140be:	f107 0c10 	add.w	ip, r7, #16	; 0x10
   140c2:	e88c 0003 	stmia.w	ip, {r0, r1}
   140c6:	60bb      	str	r3, [r7, #8]
   140c8:	4613      	mov	r3, r2
   140ca:	73fb      	strb	r3, [r7, #15]
{
    if (currentCommand != NULL)
   140cc:	4b20      	ldr	r3, [pc, #128]	(14150 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   140ce:	681b      	ldr	r3, [r3, #0]
   140d0:	2b00      	cmp	r3, #0
   140d2:	d00d      	beq.n	140f0 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
        delete currentCommand;
   140d4:	4b1e      	ldr	r3, [pc, #120]	(14150 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   140d6:	681b      	ldr	r3, [r3, #0]
   140d8:	2b00      	cmp	r3, #0
   140da:	d009      	beq.n	140f0 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x38>
   140dc:	4b1c      	ldr	r3, [pc, #112]	(14150 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   140de:	681b      	ldr	r3, [r3, #0]
   140e0:	681b      	ldr	r3, [r3, #0]
   140e2:	f103 0304 	add.w	r3, r3, #4	; 0x4
   140e6:	681a      	ldr	r2, [r3, #0]
   140e8:	4b19      	ldr	r3, [pc, #100]	(14150 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   140ea:	681b      	ldr	r3, [r3, #0]
   140ec:	4618      	mov	r0, r3
   140ee:	4790      	blx	r2
//    if (actionsCount == 0)
//        currentCommand = new CommandAllerA(goal, goBack, maxSpeed/2);
//    else
    currentCommand = new CommandAllerA(goal, goBack, maxSpeed, 0.0f, precisionAngle);
   140f0:	f04f 0030 	mov.w	r0, #48	; 0x30
   140f4:	f7fa f930 	bl	e358 <_Znwj>
   140f8:	4603      	mov	r3, r0
   140fa:	603b      	str	r3, [r7, #0]
   140fc:	683b      	ldr	r3, [r7, #0]
   140fe:	2b00      	cmp	r3, #0
   14100:	d012      	beq.n	14128 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x70>
   14102:	f897 c00f 	ldrb.w	ip, [r7, #15]
   14106:	68bb      	ldr	r3, [r7, #8]
   14108:	9300      	str	r3, [sp, #0]
   1410a:	4b12      	ldr	r3, [pc, #72]	(14154 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x9c>)
   1410c:	9301      	str	r3, [sp, #4]
   1410e:	6a3b      	ldr	r3, [r7, #32]
   14110:	9302      	str	r3, [sp, #8]
   14112:	6838      	ldr	r0, [r7, #0]
   14114:	f107 0310 	add.w	r3, r7, #16	; 0x10
   14118:	e893 0006 	ldmia.w	r3, {r1, r2}
   1411c:	4663      	mov	r3, ip
   1411e:	f7f4 fcfb 	bl	8b18 <_ZN13CommandAllerAC1E8Positionbfff>
   14122:	683b      	ldr	r3, [r7, #0]
   14124:	607b      	str	r3, [r7, #4]
   14126:	e001      	b.n	1412c <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x74>
   14128:	683b      	ldr	r3, [r7, #0]
   1412a:	607b      	str	r3, [r7, #4]
   1412c:	687a      	ldr	r2, [r7, #4]
   1412e:	4b08      	ldr	r3, [pc, #32]	(14150 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   14130:	601a      	str	r2, [r3, #0]
    Asservissement::asservissement->setCommandSpeeds(currentCommand);
   14132:	4b09      	ldr	r3, [pc, #36]	(14158 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0xa0>)
   14134:	681a      	ldr	r2, [r3, #0]
   14136:	4b06      	ldr	r3, [pc, #24]	(14150 <_ZN11StrategieV214setCurrentGoalE8Positionbff+0x98>)
   14138:	681b      	ldr	r3, [r3, #0]
   1413a:	4610      	mov	r0, r2
   1413c:	4619      	mov	r1, r3
   1413e:	f7f2 fffb 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    StrategieV2::emptySharpsToCheck();
   14142:	f7ff fdcf 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>
        //StrategieV2::sharpsToCheck[SharpSensor::FRONT_RIGHT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::LEFT_FRONT] = true;
        //StrategieV2::sharpsToCheck[SharpSensor::RIGHT_FRONT] = true;
    }*/
#endif
}
   14146:	f107 0718 	add.w	r7, r7, #24	; 0x18
   1414a:	46bd      	mov	sp, r7
   1414c:	bd80      	pop	{r7, pc}
   1414e:	46c0      	nop			(mov r8, r8)
   14150:	200005a8 	.word	0x200005a8
   14154:	00000000 	.word	0x00000000
   14158:	20000560 	.word	0x20000560

0001415c <_ZN11StrategieV26updateEv>:
{
    return updateCount * 5;
}


void StrategieV2::update()
   1415c:	b590      	push	{r4, r7, lr}
   1415e:	b0af      	sub	sp, #188
   14160:	af02      	add	r7, sp, #8

        resultUpdate = tourelle->update();

    */

    if (StrategieV2::strategie == NULL)
   14162:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 146e8 <_ZN11StrategieV26updateEv+0x58c>
   14166:	681b      	ldr	r3, [r3, #0]
   14168:	2b00      	cmp	r3, #0
   1416a:	f000 82b8 	beq.w	146de <_ZN11StrategieV26updateEv+0x582>
        return;
    updateCount++;
   1416e:	f8df 357c 	ldr.w	r3, [pc, #1404]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   14172:	681b      	ldr	r3, [r3, #0]
   14174:	f103 0201 	add.w	r2, r3, #1	; 0x1
   14178:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   1417c:	601a      	str	r2, [r3, #0]

    currentAction->updateTime(90*1000-updateCount*5);
   1417e:	f8df 3570 	ldr.w	r3, [pc, #1392]	; 146f0 <_ZN11StrategieV26updateEv+0x594>
   14182:	6819      	ldr	r1, [r3, #0]
   14184:	f8df 3564 	ldr.w	r3, [pc, #1380]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   14188:	681a      	ldr	r2, [r3, #0]
   1418a:	4613      	mov	r3, r2
   1418c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14190:	4413      	add	r3, r2
   14192:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   14196:	f503 33ae 	add.w	r3, r3, #89088	; 0x15c00
   1419a:	f503 7364 	add.w	r3, r3, #912	; 0x390
   1419e:	4608      	mov	r0, r1
   141a0:	4619      	mov	r1, r3
   141a2:	f7fe ff5b 	bl	1305c <_ZN17MediumLevelAction10updateTimeEi>
//
//    //On donne l'ordre de ralentir, si besoin
//    currentCommand->limitSpeed(hysteresisTourelle);

#endif
    if (updateCount < 0)
   141a6:	f8df 3544 	ldr.w	r3, [pc, #1348]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   141aa:	681b      	ldr	r3, [r3, #0]
   141ac:	2b00      	cmp	r3, #0
   141ae:	da04      	bge.n	141ba <_ZN11StrategieV26updateEv+0x5e>
    {
        updateCount = 50000;
   141b0:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   141b4:	f24c 3350 	movw	r3, #50000	; 0xc350
   141b8:	6013      	str	r3, [r2, #0]

    if (updateCount <= 18000)
    {

    }
    if (updateCount >= 18000)
   141ba:	f8df 3530 	ldr.w	r3, [pc, #1328]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   141be:	681a      	ldr	r2, [r3, #0]
   141c0:	f244 634f 	movw	r3, #17999	; 0x464f
   141c4:	429a      	cmp	r2, r3
   141c6:	dd08      	ble.n	141da <_ZN11StrategieV26updateEv+0x7e>
    {
        Asservissement::asservissement->setCommandSpeeds(NULL);
   141c8:	f8df 3528 	ldr.w	r3, [pc, #1320]	; 146f4 <_ZN11StrategieV26updateEv+0x598>
   141cc:	681b      	ldr	r3, [r3, #0]
   141ce:	4618      	mov	r0, r3
   141d0:	f04f 0100 	mov.w	r1, #0	; 0x0
   141d4:	f7f2 ffb0 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
   141d8:	e281      	b.n	146de <_ZN11StrategieV26updateEv+0x582>
    //if (updateCount > 6000 && updateCount < 10000) // attendre 15 secondes
    /*{
        Asservissement::asservissement->setCommandSpeeds(NULL);
        return;
    }*/
    if (actionsCount >= 1)
   141da:	f8df 351c 	ldr.w	r3, [pc, #1308]	; 146f8 <_ZN11StrategieV26updateEv+0x59c>
   141de:	681b      	ldr	r3, [r3, #0]
   141e0:	2b00      	cmp	r3, #0
   141e2:	dd05      	ble.n	141f0 <_ZN11StrategieV26updateEv+0x94>
    {
        updateCount = 20000;
   141e4:	f8df 2504 	ldr.w	r2, [pc, #1284]	; 146ec <_ZN11StrategieV26updateEv+0x590>
   141e8:	f644 6320 	movw	r3, #20000	; 0x4e20
   141ec:	6013      	str	r3, [r2, #0]
   141ee:	e276      	b.n	146de <_ZN11StrategieV26updateEv+0x582>
        enableSharp(SharpSensor::BACK_MIDDLE);
        enableSharp(SharpSensor::BACK_RIGHT);
        */
    //std::cout << "update" << std::endl;
    // check sensors:
    AnalogSensor::startConversion();
   141f0:	f7f6 fac8 	bl	a784 <_ZN12AnalogSensor15startConversionEv>

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   141f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   141f8:	f8c7 30a0 	str.w	r3, [r7, #160]
   141fc:	e011      	b.n	14222 <_ZN11StrategieV26updateEv+0xc6>
    {
        sharps[i]->updateValue();
   141fe:	f8df 34fc 	ldr.w	r3, [pc, #1276]	; 146fc <_ZN11StrategieV26updateEv+0x5a0>
   14202:	681a      	ldr	r2, [r3, #0]
   14204:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   14208:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1420c:	4413      	add	r3, r2
   1420e:	681b      	ldr	r3, [r3, #0]
   14210:	4618      	mov	r0, r3
   14212:	f7f8 fe51 	bl	ceb8 <_ZN11SharpSensor11updateValueEv>
    AnalogSensor::startConversion();

    //

    //allumerLED2();
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++) // update tous les sharps
   14216:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   1421a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1421e:	f8c7 30a0 	str.w	r3, [r7, #160]
   14222:	f8d7 30a0 	ldr.w	r3, [r7, #160]
   14226:	2b07      	cmp	r3, #7
   14228:	dde9      	ble.n	141fe <_ZN11StrategieV26updateEv+0xa2>
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
   1422a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1422e:	f887 309f 	strb.w	r3, [r7, #159]
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   14232:	f04f 0300 	mov.w	r3, #0	; 0x0
   14236:	f8c7 30a4 	str.w	r3, [r7, #164]
   1423a:	e038      	b.n	142ae <_ZN11StrategieV26updateEv+0x152>
    {
        if (sharpsToCheck[i] && !tourneSurSoiMeme)
   1423c:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   14240:	f8df 24bc 	ldr.w	r2, [pc, #1212]	; 14700 <_ZN11StrategieV26updateEv+0x5a4>
   14244:	5cd3      	ldrb	r3, [r2, r3]
   14246:	2b00      	cmp	r3, #0
   14248:	d02b      	beq.n	142a2 <_ZN11StrategieV26updateEv+0x146>
   1424a:	f8df 34b8 	ldr.w	r3, [pc, #1208]	; 14704 <_ZN11StrategieV26updateEv+0x5a8>
   1424e:	781b      	ldrb	r3, [r3, #0]
   14250:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   14254:	b2db      	uxtb	r3, r3
   14256:	2b00      	cmp	r3, #0
   14258:	d023      	beq.n	142a2 <_ZN11StrategieV26updateEv+0x146>
        {
            if (sharps[i]->getValue().b)
   1425a:	f8df 34a0 	ldr.w	r3, [pc, #1184]	; 146fc <_ZN11StrategieV26updateEv+0x5a0>
   1425e:	681a      	ldr	r2, [r3, #0]
   14260:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   14264:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14268:	4413      	add	r3, r2
   1426a:	681b      	ldr	r3, [r3, #0]
   1426c:	681b      	ldr	r3, [r3, #0]
   1426e:	f103 0308 	add.w	r3, r3, #8	; 0x8
   14272:	f8d3 c000 	ldr.w	ip, [r3]
   14276:	f8df 3484 	ldr.w	r3, [pc, #1156]	; 146fc <_ZN11StrategieV26updateEv+0x5a0>
   1427a:	681a      	ldr	r2, [r3, #0]
   1427c:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   14280:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14284:	4413      	add	r3, r2
   14286:	681a      	ldr	r2, [r3, #0]
   14288:	f107 0360 	add.w	r3, r7, #96	; 0x60
   1428c:	4618      	mov	r0, r3
   1428e:	4611      	mov	r1, r2
   14290:	47e0      	blx	ip
   14292:	f897 3068 	ldrb.w	r3, [r7, #104]
   14296:	2b00      	cmp	r3, #0
   14298:	d003      	beq.n	142a2 <_ZN11StrategieV26updateEv+0x146>
            {
                allume = true;
   1429a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1429e:	f887 309f 	strb.w	r3, [r7, #159]
    {
        sharps[i]->updateValue();
    }
    //sharps[9]->updateValue();
    bool allume = false;
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   142a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   142a6:	f103 0301 	add.w	r3, r3, #1	; 0x1
   142aa:	f8c7 30a4 	str.w	r3, [r7, #164]
   142ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]
   142b2:	2b07      	cmp	r3, #7
   142b4:	ddc2      	ble.n	1423c <_ZN11StrategieV26updateEv+0xe0>
                allume = true;
            }
        }
    }

    float values[10] = {0};
   142b6:	f107 011c 	add.w	r1, r7, #28	; 0x1c
   142ba:	60b9      	str	r1, [r7, #8]
   142bc:	f04f 0300 	mov.w	r3, #0	; 0x0
   142c0:	68ba      	ldr	r2, [r7, #8]
   142c2:	6013      	str	r3, [r2, #0]
   142c4:	68bb      	ldr	r3, [r7, #8]
   142c6:	f103 0304 	add.w	r3, r3, #4	; 0x4
   142ca:	60bb      	str	r3, [r7, #8]
   142cc:	f04f 0300 	mov.w	r3, #0	; 0x0
   142d0:	68b9      	ldr	r1, [r7, #8]
   142d2:	600b      	str	r3, [r1, #0]
   142d4:	68ba      	ldr	r2, [r7, #8]
   142d6:	f102 0204 	add.w	r2, r2, #4	; 0x4
   142da:	60ba      	str	r2, [r7, #8]
   142dc:	f04f 0300 	mov.w	r3, #0	; 0x0
   142e0:	68b9      	ldr	r1, [r7, #8]
   142e2:	600b      	str	r3, [r1, #0]
   142e4:	68ba      	ldr	r2, [r7, #8]
   142e6:	f102 0204 	add.w	r2, r2, #4	; 0x4
   142ea:	60ba      	str	r2, [r7, #8]
   142ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   142f0:	68b9      	ldr	r1, [r7, #8]
   142f2:	600b      	str	r3, [r1, #0]
   142f4:	68ba      	ldr	r2, [r7, #8]
   142f6:	f102 0204 	add.w	r2, r2, #4	; 0x4
   142fa:	60ba      	str	r2, [r7, #8]
   142fc:	f04f 0300 	mov.w	r3, #0	; 0x0
   14300:	68b9      	ldr	r1, [r7, #8]
   14302:	600b      	str	r3, [r1, #0]
   14304:	68ba      	ldr	r2, [r7, #8]
   14306:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1430a:	60ba      	str	r2, [r7, #8]
   1430c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14310:	68b9      	ldr	r1, [r7, #8]
   14312:	600b      	str	r3, [r1, #0]
   14314:	68ba      	ldr	r2, [r7, #8]
   14316:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1431a:	60ba      	str	r2, [r7, #8]
   1431c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14320:	68b9      	ldr	r1, [r7, #8]
   14322:	600b      	str	r3, [r1, #0]
   14324:	68ba      	ldr	r2, [r7, #8]
   14326:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1432a:	60ba      	str	r2, [r7, #8]
   1432c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14330:	68b9      	ldr	r1, [r7, #8]
   14332:	600b      	str	r3, [r1, #0]
   14334:	68ba      	ldr	r2, [r7, #8]
   14336:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1433a:	60ba      	str	r2, [r7, #8]
   1433c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14340:	68b9      	ldr	r1, [r7, #8]
   14342:	600b      	str	r3, [r1, #0]
   14344:	68ba      	ldr	r2, [r7, #8]
   14346:	f102 0204 	add.w	r2, r2, #4	; 0x4
   1434a:	60ba      	str	r2, [r7, #8]
   1434c:	f04f 0300 	mov.w	r3, #0	; 0x0
   14350:	68b9      	ldr	r1, [r7, #8]
   14352:	600b      	str	r3, [r1, #0]
   14354:	68ba      	ldr	r2, [r7, #8]
   14356:	f102 0204 	add.w	r2, r2, #4	; 0x4
    bool detected[10] = {false};
   1435a:	f107 0356 	add.w	r3, r7, #86	; 0x56
   1435e:	607b      	str	r3, [r7, #4]
   14360:	f04f 0300 	mov.w	r3, #0	; 0x0
   14364:	6879      	ldr	r1, [r7, #4]
   14366:	800b      	strh	r3, [r1, #0]
   14368:	687a      	ldr	r2, [r7, #4]
   1436a:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1436e:	607a      	str	r2, [r7, #4]
   14370:	f04f 0300 	mov.w	r3, #0	; 0x0
   14374:	6879      	ldr	r1, [r7, #4]
   14376:	800b      	strh	r3, [r1, #0]
   14378:	687a      	ldr	r2, [r7, #4]
   1437a:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1437e:	607a      	str	r2, [r7, #4]
   14380:	f04f 0300 	mov.w	r3, #0	; 0x0
   14384:	6879      	ldr	r1, [r7, #4]
   14386:	800b      	strh	r3, [r1, #0]
   14388:	687a      	ldr	r2, [r7, #4]
   1438a:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1438e:	607a      	str	r2, [r7, #4]
   14390:	f04f 0300 	mov.w	r3, #0	; 0x0
   14394:	6879      	ldr	r1, [r7, #4]
   14396:	800b      	strh	r3, [r1, #0]
   14398:	687a      	ldr	r2, [r7, #4]
   1439a:	f102 0202 	add.w	r2, r2, #2	; 0x2
   1439e:	607a      	str	r2, [r7, #4]
   143a0:	f04f 0300 	mov.w	r3, #0	; 0x0
   143a4:	6879      	ldr	r1, [r7, #4]
   143a6:	800b      	strh	r3, [r1, #0]
   143a8:	687a      	ldr	r2, [r7, #4]
   143aa:	f102 0202 	add.w	r2, r2, #2	; 0x2

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   143ae:	f04f 0300 	mov.w	r3, #0	; 0x0
   143b2:	f8c7 30a8 	str.w	r3, [r7, #168]
   143b6:	e04d      	b.n	14454 <_ZN11StrategieV26updateEv+0x2f8>
    {
        values[i] = sharps[i]->getValue().f;
   143b8:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   143bc:	4bcf      	ldr	r3, [pc, #828]	(146fc <_ZN11StrategieV26updateEv+0x5a0>)
   143be:	681a      	ldr	r2, [r3, #0]
   143c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   143c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   143c8:	4413      	add	r3, r2
   143ca:	681b      	ldr	r3, [r3, #0]
   143cc:	681b      	ldr	r3, [r3, #0]
   143ce:	f103 0308 	add.w	r3, r3, #8	; 0x8
   143d2:	f8d3 c000 	ldr.w	ip, [r3]
   143d6:	4bc9      	ldr	r3, [pc, #804]	(146fc <_ZN11StrategieV26updateEv+0x5a0>)
   143d8:	681a      	ldr	r2, [r3, #0]
   143da:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   143de:	ea4f 0383 	mov.w	r3, r3, lsl #2
   143e2:	4413      	add	r3, r2
   143e4:	681a      	ldr	r2, [r3, #0]
   143e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   143ea:	4618      	mov	r0, r3
   143ec:	4611      	mov	r1, r2
   143ee:	47e0      	blx	ip
   143f0:	6f3a      	ldr	r2, [r7, #112]
   143f2:	ea4f 0384 	mov.w	r3, r4, lsl #2
   143f6:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   143fa:	440b      	add	r3, r1
   143fc:	f843 2c94 	str.w	r2, [r3, #-148]
        detected[i] = sharps[i]->getValue().b;
   14400:	f8d7 40a8 	ldr.w	r4, [r7, #168]
   14404:	4bbd      	ldr	r3, [pc, #756]	(146fc <_ZN11StrategieV26updateEv+0x5a0>)
   14406:	681a      	ldr	r2, [r3, #0]
   14408:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1440c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14410:	4413      	add	r3, r2
   14412:	681b      	ldr	r3, [r3, #0]
   14414:	681b      	ldr	r3, [r3, #0]
   14416:	f103 0308 	add.w	r3, r3, #8	; 0x8
   1441a:	f8d3 c000 	ldr.w	ip, [r3]
   1441e:	4bb7      	ldr	r3, [pc, #732]	(146fc <_ZN11StrategieV26updateEv+0x5a0>)
   14420:	681a      	ldr	r2, [r3, #0]
   14422:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   14426:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1442a:	4413      	add	r3, r2
   1442c:	681a      	ldr	r2, [r3, #0]
   1442e:	f107 0378 	add.w	r3, r7, #120	; 0x78
   14432:	4618      	mov	r0, r3
   14434:	4611      	mov	r1, r2
   14436:	47e0      	blx	ip
   14438:	f897 3080 	ldrb.w	r3, [r7, #128]
   1443c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
   14440:	eb01 0204 	add.w	r2, r1, r4
   14444:	f802 3c5a 	strb.w	r3, [r2, #-90]

    float values[10] = {0};
    bool detected[10] = {false};

    //allumerLED2();
    for (int i = 0; i < 8; i++)
   14448:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   1444c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14450:	f8c7 30a8 	str.w	r3, [r7, #168]
   14454:	f8d7 30a8 	ldr.w	r3, [r7, #168]
   14458:	2b07      	cmp	r3, #7
   1445a:	ddad      	ble.n	143b8 <_ZN11StrategieV26updateEv+0x25c>
        updateCount = 10;
        Led::setOff(1);
    }
    else
    {*/
        Led::setOn(1);
   1445c:	f04f 0001 	mov.w	r0, #1	; 0x1
   14460:	f7f7 fd1e 	bl	bea0 <_ZN3Led5setOnEi>

        if (allume)
   14464:	f897 309f 	ldrb.w	r3, [r7, #159]
   14468:	2b00      	cmp	r3, #0
   1446a:	d00e      	beq.n	1448a <_ZN11StrategieV26updateEv+0x32e>
        {
            Asservissement::asservissement->setCommandSpeeds(NULL);
   1446c:	4ba1      	ldr	r3, [pc, #644]	(146f4 <_ZN11StrategieV26updateEv+0x598>)
   1446e:	681b      	ldr	r3, [r3, #0]
   14470:	4618      	mov	r0, r3
   14472:	f04f 0100 	mov.w	r1, #0	; 0x0
   14476:	f7f2 fe5f 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            Asservissement::asservissement->update();
   1447a:	4b9e      	ldr	r3, [pc, #632]	(146f4 <_ZN11StrategieV26updateEv+0x598>)
   1447c:	681b      	ldr	r3, [r3, #0]
   1447e:	4618      	mov	r0, r3
   14480:	f7f2 ffa0 	bl	73c4 <_ZN14Asservissement6updateEv>
            allumerLED2();
   14484:	f7f7 fd58 	bl	bf38 <_Z11allumerLED2v>
   14488:	e001      	b.n	1448e <_ZN11StrategieV26updateEv+0x332>
        }
        else
        {
            eteindreLED2();
   1448a:	f7f7 fcf9 	bl	be80 <_Z12eteindreLED2v>

        //allumerLED2();

        //allume = true;//(updateCount%30==0);
        //allume = false;
        if(timeToRestart)
   1448e:	4b9e      	ldr	r3, [pc, #632]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   14490:	681b      	ldr	r3, [r3, #0]
   14492:	2b00      	cmp	r3, #0
   14494:	d005      	beq.n	144a2 <_ZN11StrategieV26updateEv+0x346>
        {
            timeToRestart--;
   14496:	4b9c      	ldr	r3, [pc, #624]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   14498:	681b      	ldr	r3, [r3, #0]
   1449a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   1449e:	4b9a      	ldr	r3, [pc, #616]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   144a0:	601a      	str	r2, [r3, #0]
        }
        if(timeToRestart == 1)//Dernière boucle d'évitement avant de repartir
   144a2:	4b99      	ldr	r3, [pc, #612]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   144a4:	681b      	ldr	r3, [r3, #0]
   144a6:	2b01      	cmp	r3, #1
   144a8:	d169      	bne.n	1457e <_ZN11StrategieV26updateEv+0x422>
        {
            if (currentAction)
   144aa:	4b91      	ldr	r3, [pc, #580]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   144ac:	681b      	ldr	r3, [r3, #0]
   144ae:	2b00      	cmp	r3, #0
   144b0:	d05e      	beq.n	14570 <_ZN11StrategieV26updateEv+0x414>
            {
                //Pour changer de trajectoire, décommenter les lignes suivantes
                currentAction->collisionAvoided();
   144b2:	4b8f      	ldr	r3, [pc, #572]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   144b4:	681b      	ldr	r3, [r3, #0]
   144b6:	681b      	ldr	r3, [r3, #0]
   144b8:	f103 0310 	add.w	r3, r3, #16	; 0x10
   144bc:	681a      	ldr	r2, [r3, #0]
   144be:	4b8c      	ldr	r3, [pc, #560]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   144c0:	681b      	ldr	r3, [r3, #0]
   144c2:	4618      	mov	r0, r3
   144c4:	4790      	blx	r2
                actionsToDo[actionsCount]->collisionAvoided();
   144c6:	4b8c      	ldr	r3, [pc, #560]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   144c8:	681a      	ldr	r2, [r3, #0]
   144ca:	4b90      	ldr	r3, [pc, #576]	(1470c <_ZN11StrategieV26updateEv+0x5b0>)
   144cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   144d0:	681b      	ldr	r3, [r3, #0]
   144d2:	f103 0310 	add.w	r3, r3, #16	; 0x10
   144d6:	6819      	ldr	r1, [r3, #0]
   144d8:	4b87      	ldr	r3, [pc, #540]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   144da:	681a      	ldr	r2, [r3, #0]
   144dc:	4b8b      	ldr	r3, [pc, #556]	(1470c <_ZN11StrategieV26updateEv+0x5b0>)
   144de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   144e2:	4618      	mov	r0, r3
   144e4:	4788      	blx	r1
                //currentCommand->collisionAvoided();
                currentAction->update();
   144e6:	4b82      	ldr	r3, [pc, #520]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   144e8:	681b      	ldr	r3, [r3, #0]
   144ea:	681b      	ldr	r3, [r3, #0]
   144ec:	f103 0308 	add.w	r3, r3, #8	; 0x8
   144f0:	681a      	ldr	r2, [r3, #0]
   144f2:	4b7f      	ldr	r3, [pc, #508]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   144f4:	681b      	ldr	r3, [r3, #0]
   144f6:	4618      	mov	r0, r3
   144f8:	4790      	blx	r2
                Position pos = Odometrie::odometrie->getPos().getPosition();
   144fa:	4b85      	ldr	r3, [pc, #532]	(14710 <_ZN11StrategieV26updateEv+0x5b4>)
   144fc:	681a      	ldr	r2, [r3, #0]
   144fe:	f107 0384 	add.w	r3, r7, #132	; 0x84
   14502:	4618      	mov	r0, r3
   14504:	4611      	mov	r1, r2
   14506:	f7f5 f953 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   1450a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   1450e:	f107 0284 	add.w	r2, r7, #132	; 0x84
   14512:	4618      	mov	r0, r3
   14514:	4611      	mov	r1, r2
   14516:	f7fa fac1 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
                addTemporaryAction(new ActionGoTo(pos, true));
   1451a:	f04f 0030 	mov.w	r0, #48	; 0x30
   1451e:	f7f9 ff1b 	bl	e358 <_Znwj>
   14522:	4603      	mov	r3, r0
   14524:	60fb      	str	r3, [r7, #12]
   14526:	68fa      	ldr	r2, [r7, #12]
   14528:	2a00      	cmp	r2, #0
   1452a:	d00d      	beq.n	14548 <_ZN11StrategieV26updateEv+0x3ec>
   1452c:	4b79      	ldr	r3, [pc, #484]	(14714 <_ZN11StrategieV26updateEv+0x5b8>)
   1452e:	9300      	str	r3, [sp, #0]
   14530:	68f8      	ldr	r0, [r7, #12]
   14532:	f107 034c 	add.w	r3, r7, #76	; 0x4c
   14536:	e893 0006 	ldmia.w	r3, {r1, r2}
   1453a:	f04f 0301 	mov.w	r3, #1	; 0x1
   1453e:	f7fa fd97 	bl	f070 <_ZN10ActionGoToC1E8Positionbf>
   14542:	68fb      	ldr	r3, [r7, #12]
   14544:	613b      	str	r3, [r7, #16]
   14546:	e001      	b.n	1454c <_ZN11StrategieV26updateEv+0x3f0>
   14548:	68f9      	ldr	r1, [r7, #12]
   1454a:	6139      	str	r1, [r7, #16]
   1454c:	693b      	ldr	r3, [r7, #16]
   1454e:	4618      	mov	r0, r3
   14550:	f7ff fb54 	bl	13bfc <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>

                //On arrête le robot
                if (currentCommand)
   14554:	4b70      	ldr	r3, [pc, #448]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   14556:	681b      	ldr	r3, [r3, #0]
   14558:	2b00      	cmp	r3, #0
   1455a:	d009      	beq.n	14570 <_ZN11StrategieV26updateEv+0x414>
                    currentCommand->resetSpeeds();
   1455c:	4b6e      	ldr	r3, [pc, #440]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   1455e:	681b      	ldr	r3, [r3, #0]
   14560:	681b      	ldr	r3, [r3, #0]
   14562:	f103 030c 	add.w	r3, r3, #12	; 0xc
   14566:	681a      	ldr	r2, [r3, #0]
   14568:	4b6b      	ldr	r3, [pc, #428]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   1456a:	681b      	ldr	r3, [r3, #0]
   1456c:	4618      	mov	r0, r3
   1456e:	4790      	blx	r2
            }
            timeToRestart--;
   14570:	4b65      	ldr	r3, [pc, #404]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   14572:	681b      	ldr	r3, [r3, #0]
   14574:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   14578:	4b63      	ldr	r3, [pc, #396]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   1457a:	601a      	str	r2, [r3, #0]
   1457c:	e022      	b.n	145c4 <_ZN11StrategieV26updateEv+0x468>
        }

        else if (allume || timeToRestart) // Si un des sharp voit un adversaire, ou qu'on doit être arrêté suite à une détection
   1457e:	f897 309f 	ldrb.w	r3, [r7, #159]
   14582:	2b00      	cmp	r3, #0
   14584:	d103      	bne.n	1458e <_ZN11StrategieV26updateEv+0x432>
   14586:	4b60      	ldr	r3, [pc, #384]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   14588:	681b      	ldr	r3, [r3, #0]
   1458a:	2b00      	cmp	r3, #0
   1458c:	d01a      	beq.n	145c4 <_ZN11StrategieV26updateEv+0x468>
        {
            if(!timeToRestart)//Début de l'évitement
   1458e:	4b5e      	ldr	r3, [pc, #376]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   14590:	681b      	ldr	r3, [r3, #0]
   14592:	2b00      	cmp	r3, #0
   14594:	d10f      	bne.n	145b6 <_ZN11StrategieV26updateEv+0x45a>
            {
                timeToRestart = 400;
   14596:	4a5c      	ldr	r2, [pc, #368]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   14598:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1459c:	6013      	str	r3, [r2, #0]
                hasJustAvoided = true;
   1459e:	4a5f      	ldr	r2, [pc, #380]	(1471c <_ZN11StrategieV26updateEv+0x5c0>)
   145a0:	f04f 0301 	mov.w	r3, #1	; 0x1
   145a4:	7013      	strb	r3, [r2, #0]

//            if (true) // if (canStillDoAction)
//            {

//            }
                hasJustAvoided = false;
   145a6:	4a5d      	ldr	r2, [pc, #372]	(1471c <_ZN11StrategieV26updateEv+0x5c0>)
   145a8:	f04f 0300 	mov.w	r3, #0	; 0x0
   145ac:	7013      	strb	r3, [r2, #0]
                somethingDetected = false;
   145ae:	4a5c      	ldr	r2, [pc, #368]	(14720 <_ZN11StrategieV26updateEv+0x5c4>)
   145b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   145b4:	7013      	strb	r3, [r2, #0]
                // tentative d'évitement :
                //Position pos = Odometrie::odometrie->getPos().getPosition();
                //addTemporaryAction(new ActionGoTo(pos, true));

            }
            Asservissement::asservissement->setCommandSpeeds(NULL);
   145b6:	4b4f      	ldr	r3, [pc, #316]	(146f4 <_ZN11StrategieV26updateEv+0x598>)
   145b8:	681b      	ldr	r3, [r3, #0]
   145ba:	4618      	mov	r0, r3
   145bc:	f04f 0100 	mov.w	r1, #0	; 0x0
   145c0:	f7f2 fdba 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
        //std::cout << robotBloque << "\n";
    }*/

//    else
//        robotBloque = 0;
    if (currentAction->update() == -1 || (robotBloque > 50))// && !enTrainDeRecalibrerOdometrie))
   145c4:	4b4a      	ldr	r3, [pc, #296]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   145c6:	681b      	ldr	r3, [r3, #0]
   145c8:	681b      	ldr	r3, [r3, #0]
   145ca:	f103 0308 	add.w	r3, r3, #8	; 0x8
   145ce:	681a      	ldr	r2, [r3, #0]
   145d0:	4b47      	ldr	r3, [pc, #284]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   145d2:	681b      	ldr	r3, [r3, #0]
   145d4:	4618      	mov	r0, r3
   145d6:	4790      	blx	r2
   145d8:	4603      	mov	r3, r0
   145da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   145de:	d003      	beq.n	145e8 <_ZN11StrategieV26updateEv+0x48c>
   145e0:	4b50      	ldr	r3, [pc, #320]	(14724 <_ZN11StrategieV26updateEv+0x5c8>)
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	2b32      	cmp	r3, #50
   145e6:	dd03      	ble.n	145f0 <_ZN11StrategieV26updateEv+0x494>
   145e8:	f04f 0201 	mov.w	r2, #1	; 0x1
   145ec:	617a      	str	r2, [r7, #20]
   145ee:	e002      	b.n	145f6 <_ZN11StrategieV26updateEv+0x49a>
   145f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   145f4:	617b      	str	r3, [r7, #20]
   145f6:	697b      	ldr	r3, [r7, #20]
   145f8:	2b00      	cmp	r3, #0
   145fa:	d056      	beq.n	146aa <_ZN11StrategieV26updateEv+0x54e>
    {
        if (robotBloque > 1000) // si le robot est bloqué 2 secondes
   145fc:	4b49      	ldr	r3, [pc, #292]	(14724 <_ZN11StrategieV26updateEv+0x5c8>)
   145fe:	681b      	ldr	r3, [r3, #0]
   14600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   14604:	dd14      	ble.n	14630 <_ZN11StrategieV26updateEv+0x4d4>
        {
            // on recule de 20 cm
            Asservissement::asservissement->setCommandSpeeds(NULL);
   14606:	4b3b      	ldr	r3, [pc, #236]	(146f4 <_ZN11StrategieV26updateEv+0x598>)
   14608:	681b      	ldr	r3, [r3, #0]
   1460a:	4618      	mov	r0, r3
   1460c:	f04f 0100 	mov.w	r1, #0	; 0x0
   14610:	f7f2 fd92 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            currentCommand = NULL;
   14614:	4a40      	ldr	r2, [pc, #256]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   14616:	f04f 0300 	mov.w	r3, #0	; 0x0
   1461a:	6013      	str	r3, [r2, #0]
            actionsCount = 2;
   1461c:	4a36      	ldr	r2, [pc, #216]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   1461e:	f04f 0302 	mov.w	r3, #2	; 0x2
   14622:	6013      	str	r3, [r2, #0]
            bool mustGoBack = true;
   14624:	f04f 0301 	mov.w	r3, #1	; 0x1
   14628:	f887 30af 	strb.w	r3, [r7, #175]
            allumerLED();
   1462c:	f7f7 fc8c 	bl	bf48 <_Z10allumerLEDv>
            //StrategieV2::addTemporaryAction(new ActionGoTo(Odometrie::odometrie->getPos().getPosition(), mustGoBack));
        }
        robotBloque = 0;
   14630:	4a3c      	ldr	r2, [pc, #240]	(14724 <_ZN11StrategieV26updateEv+0x5c8>)
   14632:	f04f 0300 	mov.w	r3, #0	; 0x0
   14636:	6013      	str	r3, [r2, #0]
        //std::cout << "Changing action" << std::endl;
        Position currentPos = Odometrie::odometrie->getPos().getPosition();
   14638:	4b35      	ldr	r3, [pc, #212]	(14710 <_ZN11StrategieV26updateEv+0x5b4>)
   1463a:	681a      	ldr	r2, [r3, #0]
   1463c:	f107 0390 	add.w	r3, r7, #144	; 0x90
   14640:	4618      	mov	r0, r3
   14642:	4611      	mov	r1, r2
   14644:	f7f5 f8b4 	bl	97b0 <_ZNK9Odometrie6getPosEv>
   14648:	f107 0344 	add.w	r3, r7, #68	; 0x44
   1464c:	f107 0290 	add.w	r2, r7, #144	; 0x90
   14650:	4618      	mov	r0, r3
   14652:	4611      	mov	r1, r2
   14654:	f7fa fa22 	bl	ea9c <_ZNK17PositionPlusAngle11getPositionEv>
            mustDeleteAction = true;
            timeSinceLastRecalibration++;
        }*/
        //else
        //{
        if (mustDeleteAction) // temporary action
   14658:	4b33      	ldr	r3, [pc, #204]	(14728 <_ZN11StrategieV26updateEv+0x5cc>)
   1465a:	781b      	ldrb	r3, [r3, #0]
   1465c:	2b00      	cmp	r3, #0
   1465e:	d004      	beq.n	1466a <_ZN11StrategieV26updateEv+0x50e>
            mustDeleteAction = false;
   14660:	4b31      	ldr	r3, [pc, #196]	(14728 <_ZN11StrategieV26updateEv+0x5cc>)
   14662:	f04f 0200 	mov.w	r2, #0	; 0x0
   14666:	701a      	strb	r2, [r3, #0]
   14668:	e005      	b.n	14676 <_ZN11StrategieV26updateEv+0x51a>
        else
            actionsCount++;
   1466a:	4b23      	ldr	r3, [pc, #140]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   1466c:	681b      	ldr	r3, [r3, #0]
   1466e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   14672:	4b21      	ldr	r3, [pc, #132]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   14674:	601a      	str	r2, [r3, #0]


        if (actionsCount == 2)
   14676:	4b20      	ldr	r3, [pc, #128]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   14678:	681b      	ldr	r3, [r3, #0]
   1467a:	2b02      	cmp	r3, #2
   1467c:	d10e      	bne.n	1469c <_ZN11StrategieV26updateEv+0x540>
        {
            currentCommand = NULL;
   1467e:	4a26      	ldr	r2, [pc, #152]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   14680:	f04f 0300 	mov.w	r3, #0	; 0x0
   14684:	6013      	str	r3, [r2, #0]
            Asservissement::asservissement->setCommandSpeeds(NULL);
   14686:	4b1b      	ldr	r3, [pc, #108]	(146f4 <_ZN11StrategieV26updateEv+0x598>)
   14688:	681b      	ldr	r3, [r3, #0]
   1468a:	4618      	mov	r0, r3
   1468c:	f04f 0100 	mov.w	r1, #0	; 0x0
   14690:	f7f2 fd52 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
            updateCount = 170000;//17000;
   14694:	4a15      	ldr	r2, [pc, #84]	(146ec <_ZN11StrategieV26updateEv+0x590>)
   14696:	4b25      	ldr	r3, [pc, #148]	(1472c <_ZN11StrategieV26updateEv+0x5d0>)
   14698:	6013      	str	r3, [r2, #0]
   1469a:	e020      	b.n	146de <_ZN11StrategieV26updateEv+0x582>
            return;
        }
        else
        {
            currentAction = actionsToDo[actionsCount];
   1469c:	4b16      	ldr	r3, [pc, #88]	(146f8 <_ZN11StrategieV26updateEv+0x59c>)
   1469e:	681a      	ldr	r2, [r3, #0]
   146a0:	4b1a      	ldr	r3, [pc, #104]	(1470c <_ZN11StrategieV26updateEv+0x5b0>)
   146a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   146a6:	4b12      	ldr	r3, [pc, #72]	(146f0 <_ZN11StrategieV26updateEv+0x594>)
   146a8:	601a      	str	r2, [r3, #0]
        //delete action;
        //if (currentAction)
        // currentAction->update();

    }
    if(!timeToRestart)
   146aa:	4b17      	ldr	r3, [pc, #92]	(14708 <_ZN11StrategieV26updateEv+0x5ac>)
   146ac:	681b      	ldr	r3, [r3, #0]
   146ae:	2b00      	cmp	r3, #0
   146b0:	d115      	bne.n	146de <_ZN11StrategieV26updateEv+0x582>
    {
        if (currentCommand)
   146b2:	4b19      	ldr	r3, [pc, #100]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   146b4:	681b      	ldr	r3, [r3, #0]
   146b6:	2b00      	cmp	r3, #0
   146b8:	d009      	beq.n	146ce <_ZN11StrategieV26updateEv+0x572>
            currentCommand->update();
   146ba:	4b17      	ldr	r3, [pc, #92]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   146bc:	681b      	ldr	r3, [r3, #0]
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	f103 0308 	add.w	r3, r3, #8	; 0x8
   146c4:	681a      	ldr	r2, [r3, #0]
   146c6:	4b14      	ldr	r3, [pc, #80]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   146c8:	681b      	ldr	r3, [r3, #0]
   146ca:	4618      	mov	r0, r3
   146cc:	4790      	blx	r2
        Asservissement::asservissement->setCommandSpeeds(currentCommand);
   146ce:	4b09      	ldr	r3, [pc, #36]	(146f4 <_ZN11StrategieV26updateEv+0x598>)
   146d0:	681a      	ldr	r2, [r3, #0]
   146d2:	4b11      	ldr	r3, [pc, #68]	(14718 <_ZN11StrategieV26updateEv+0x5bc>)
   146d4:	681b      	ldr	r3, [r3, #0]
   146d6:	4610      	mov	r0, r2
   146d8:	4619      	mov	r1, r3
   146da:	f7f2 fd2d 	bl	7138 <_ZN14Asservissement16setCommandSpeedsEP7Command>
    }
//    updateCount ++;
    //eteindreLED2();
    //eteindreLED();
}
   146de:	f107 07b4 	add.w	r7, r7, #180	; 0xb4
   146e2:	46bd      	mov	sp, r7
   146e4:	bd90      	pop	{r4, r7, pc}
   146e6:	46c0      	nop			(mov r8, r8)
   146e8:	200005a0 	.word	0x200005a0
   146ec:	200005a4 	.word	0x200005a4
   146f0:	200005ac 	.word	0x200005ac
   146f4:	20000560 	.word	0x20000560
   146f8:	200005b0 	.word	0x200005b0
   146fc:	20000634 	.word	0x20000634
   14700:	20000646 	.word	0x20000646
   14704:	20000660 	.word	0x20000660
   14708:	20000664 	.word	0x20000664
   1470c:	200005b4 	.word	0x200005b4
   14710:	20000570 	.word	0x20000570
   14714:	41f00000 	.word	0x41f00000
   14718:	200005a8 	.word	0x200005a8
   1471c:	20000639 	.word	0x20000639
   14720:	20000644 	.word	0x20000644
   14724:	20000650 	.word	0x20000650
   14728:	2000063a 	.word	0x2000063a
   1472c:	00029810 	.word	0x00029810

00014730 <_ZN11StrategieV2D0Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   14730:	b580      	push	{r7, lr}
   14732:	b082      	sub	sp, #8
   14734:	af00      	add	r7, sp, #0
   14736:	6078      	str	r0, [r7, #4]
   14738:	687a      	ldr	r2, [r7, #4]
   1473a:	4b08      	ldr	r3, [pc, #32]	(1475c <_ZN11StrategieV2D0Ev+0x2c>)
   1473c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1473e:	f04f 0301 	mov.w	r3, #1	; 0x1
   14742:	b2db      	uxtb	r3, r3
   14744:	2b00      	cmp	r3, #0
   14746:	d002      	beq.n	1474e <_ZN11StrategieV2D0Ev+0x1e>
   14748:	6878      	ldr	r0, [r7, #4]
   1474a:	f7f9 feab 	bl	e4a4 <_ZdlPv>
   1474e:	687b      	ldr	r3, [r7, #4]
   14750:	4618      	mov	r0, r3
   14752:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14756:	46bd      	mov	sp, r7
   14758:	bd80      	pop	{r7, pc}
   1475a:	46c0      	nop			(mov r8, r8)
   1475c:	0001fcb0 	.word	0x0001fcb0

00014760 <_ZN11StrategieV2D1Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   14760:	b580      	push	{r7, lr}
   14762:	b082      	sub	sp, #8
   14764:	af00      	add	r7, sp, #0
   14766:	6078      	str	r0, [r7, #4]
   14768:	687a      	ldr	r2, [r7, #4]
   1476a:	4b08      	ldr	r3, [pc, #32]	(1478c <_ZN11StrategieV2D1Ev+0x2c>)
   1476c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1476e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14772:	b2db      	uxtb	r3, r3
   14774:	2b00      	cmp	r3, #0
   14776:	d002      	beq.n	1477e <_ZN11StrategieV2D1Ev+0x1e>
   14778:	6878      	ldr	r0, [r7, #4]
   1477a:	f7f9 fe93 	bl	e4a4 <_ZdlPv>
   1477e:	687b      	ldr	r3, [r7, #4]
   14780:	4618      	mov	r0, r3
   14782:	f107 0708 	add.w	r7, r7, #8	; 0x8
   14786:	46bd      	mov	sp, r7
   14788:	bd80      	pop	{r7, pc}
   1478a:	46c0      	nop			(mov r8, r8)
   1478c:	0001fcb0 	.word	0x0001fcb0

00014790 <_ZN11StrategieV2D2Ev>:
#endif

    updateCount = 0;
}

StrategieV2::~StrategieV2()
   14790:	b580      	push	{r7, lr}
   14792:	b082      	sub	sp, #8
   14794:	af00      	add	r7, sp, #0
   14796:	6078      	str	r0, [r7, #4]
   14798:	687a      	ldr	r2, [r7, #4]
   1479a:	4b08      	ldr	r3, [pc, #32]	(147bc <_ZN11StrategieV2D2Ev+0x2c>)
   1479c:	6013      	str	r3, [r2, #0]
{
    //dtor
}
   1479e:	f04f 0300 	mov.w	r3, #0	; 0x0
   147a2:	b2db      	uxtb	r3, r3
   147a4:	2b00      	cmp	r3, #0
   147a6:	d002      	beq.n	147ae <_ZN11StrategieV2D2Ev+0x1e>
   147a8:	6878      	ldr	r0, [r7, #4]
   147aa:	f7f9 fe7b 	bl	e4a4 <_ZdlPv>
   147ae:	687b      	ldr	r3, [r7, #4]
   147b0:	4618      	mov	r0, r3
   147b2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   147b6:	46bd      	mov	sp, r7
   147b8:	bd80      	pop	{r7, pc}
   147ba:	46c0      	nop			(mov r8, r8)
   147bc:	0001fcb0 	.word	0x0001fcb0

000147c0 <_ZN11StrategieV2C1Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   147c0:	b580      	push	{r7, lr}
   147c2:	b08a      	sub	sp, #40
   147c4:	af00      	add	r7, sp, #0
   147c6:	6178      	str	r0, [r7, #20]
   147c8:	460b      	mov	r3, r1
   147ca:	74fb      	strb	r3, [r7, #19]
   147cc:	697a      	ldr	r2, [r7, #20]
   147ce:	4b33      	ldr	r3, [pc, #204]	(1489c <_ZN11StrategieV2C1Eb+0xdc>)
   147d0:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   147d2:	4a33      	ldr	r2, [pc, #204]	(148a0 <_ZN11StrategieV2C1Eb+0xe0>)
   147d4:	7cfb      	ldrb	r3, [r7, #19]
   147d6:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   147d8:	4a32      	ldr	r2, [pc, #200]	(148a4 <_ZN11StrategieV2C1Eb+0xe4>)
   147da:	f04f 0300 	mov.w	r3, #0	; 0x0
   147de:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   147e0:	f04f 0300 	mov.w	r3, #0	; 0x0
   147e4:	627b      	str	r3, [r7, #36]
   147e6:	e008      	b.n	147fa <_ZN11StrategieV2C1Eb+0x3a>
        sharpsToCheck[i] = false;
   147e8:	6a79      	ldr	r1, [r7, #36]
   147ea:	4a2f      	ldr	r2, [pc, #188]	(148a8 <_ZN11StrategieV2C1Eb+0xe8>)
   147ec:	f04f 0300 	mov.w	r3, #0	; 0x0
   147f0:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   147f2:	6a7b      	ldr	r3, [r7, #36]
   147f4:	f103 0301 	add.w	r3, r3, #1	; 0x1
   147f8:	627b      	str	r3, [r7, #36]
   147fa:	6a7b      	ldr	r3, [r7, #36]
   147fc:	2b07      	cmp	r3, #7
   147fe:	ddf3      	ble.n	147e8 <_ZN11StrategieV2C1Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   14800:	f04f 0300 	mov.w	r3, #0	; 0x0
   14804:	61fb      	str	r3, [r7, #28]
    //actionsToDo[1] = new RecalibrerOdometrie(blue, Position(500, 500, blue), RecalibrerOdometrie::COTE_NOTRE_DEPART_BAS);
    //actionsToDo[2] = new RecalibrerOdometrie(blue, Position(2500, 500, blue), RecalibrerOdometrie::COTE_DEPART_ADVERSAIRE_BAS);
    //actionsToDo[3] = new RecalibrerOdometrie(blue, Position(2800, 1500, blue), RecalibrerOdometrie::COTE_DEPART_ADVERSAIRE_HAUT);
    //actionsToDo[0] = new StrategieV3(blue);
    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   14806:	f04f 00c0 	mov.w	r0, #192	; 0xc0
   1480a:	f7f9 fda5 	bl	e358 <_Znwj>
   1480e:	4603      	mov	r3, r0
   14810:	603b      	str	r3, [r7, #0]
   14812:	683a      	ldr	r2, [r7, #0]
   14814:	2a00      	cmp	r2, #0
   14816:	d007      	beq.n	14828 <_ZN11StrategieV2C1Eb+0x68>
   14818:	7cfb      	ldrb	r3, [r7, #19]
   1481a:	6838      	ldr	r0, [r7, #0]
   1481c:	4619      	mov	r1, r3
   1481e:	f7fb feeb 	bl	105f8 <_ZN9Krabi2015C1Eb>
   14822:	683b      	ldr	r3, [r7, #0]
   14824:	607b      	str	r3, [r7, #4]
   14826:	e001      	b.n	1482c <_ZN11StrategieV2C1Eb+0x6c>
   14828:	683a      	ldr	r2, [r7, #0]
   1482a:	607a      	str	r2, [r7, #4]
   1482c:	687a      	ldr	r2, [r7, #4]
   1482e:	4b1f      	ldr	r3, [pc, #124]	(148ac <_ZN11StrategieV2C1Eb+0xec>)
   14830:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   14832:	4b1f      	ldr	r3, [pc, #124]	(148b0 <_ZN11StrategieV2C1Eb+0xf0>)
   14834:	681a      	ldr	r2, [r3, #0]
   14836:	4b1d      	ldr	r3, [pc, #116]	(148ac <_ZN11StrategieV2C1Eb+0xec>)
   14838:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1483c:	4b1d      	ldr	r3, [pc, #116]	(148b4 <_ZN11StrategieV2C1Eb+0xf4>)
   1483e:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   14840:	4a1d      	ldr	r2, [pc, #116]	(148b8 <_ZN11StrategieV2C1Eb+0xf8>)
   14842:	697b      	ldr	r3, [r7, #20]
   14844:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   14846:	f7f2 f99f 	bl	6b88 <_ZN7Sensors12getSingletonEv>
   1484a:	4603      	mov	r3, r0
   1484c:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   1484e:	6a38      	ldr	r0, [r7, #32]
   14850:	f7f1 f91c 	bl	5a8c <_ZN7Sensors19getSharpSensorsListEv>
   14854:	4602      	mov	r2, r0
   14856:	4b19      	ldr	r3, [pc, #100]	(148bc <_ZN11StrategieV2C1Eb+0xfc>)
   14858:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   1485a:	f7ff fa43 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   1485e:	f04f 0001 	mov.w	r0, #1	; 0x1
   14862:	f7f9 fd79 	bl	e358 <_Znwj>
   14866:	4603      	mov	r3, r0
   14868:	60bb      	str	r3, [r7, #8]
   1486a:	68bb      	ldr	r3, [r7, #8]
   1486c:	2b00      	cmp	r3, #0
   1486e:	d005      	beq.n	1487c <_ZN11StrategieV2C1Eb+0xbc>
   14870:	68b8      	ldr	r0, [r7, #8]
   14872:	f7f8 feed 	bl	d650 <_ZN8TourelleC1Ev>
   14876:	68ba      	ldr	r2, [r7, #8]
   14878:	60fa      	str	r2, [r7, #12]
   1487a:	e001      	b.n	14880 <_ZN11StrategieV2C1Eb+0xc0>
   1487c:	68bb      	ldr	r3, [r7, #8]
   1487e:	60fb      	str	r3, [r7, #12]
   14880:	4b0f      	ldr	r3, [pc, #60]	(148c0 <_ZN11StrategieV2C1Eb+0x100>)
   14882:	68fa      	ldr	r2, [r7, #12]
   14884:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   14886:	4a0f      	ldr	r2, [pc, #60]	(148c4 <_ZN11StrategieV2C1Eb+0x104>)
   14888:	f04f 0300 	mov.w	r3, #0	; 0x0
   1488c:	6013      	str	r3, [r2, #0]
}
   1488e:	697b      	ldr	r3, [r7, #20]
   14890:	4618      	mov	r0, r3
   14892:	f107 0728 	add.w	r7, r7, #40	; 0x28
   14896:	46bd      	mov	sp, r7
   14898:	bd80      	pop	{r7, pc}
   1489a:	46c0      	nop			(mov r8, r8)
   1489c:	0001fcb0 	.word	0x0001fcb0
   148a0:	20000645 	.word	0x20000645
   148a4:	20000664 	.word	0x20000664
   148a8:	20000646 	.word	0x20000646
   148ac:	200005b4 	.word	0x200005b4
   148b0:	200005b0 	.word	0x200005b0
   148b4:	200005ac 	.word	0x200005ac
   148b8:	200005a0 	.word	0x200005a0
   148bc:	20000634 	.word	0x20000634
   148c0:	20000668 	.word	0x20000668
   148c4:	200005a4 	.word	0x200005a4

000148c8 <_ZN11StrategieV2C2Eb>:
#ifdef ROBOTHW
Tourelle* StrategieV2::tourelle = NULL;
int StrategieV2::hysteresisTourelle = 0;
#endif

StrategieV2::StrategieV2(bool blue)
   148c8:	b580      	push	{r7, lr}
   148ca:	b08a      	sub	sp, #40
   148cc:	af00      	add	r7, sp, #0
   148ce:	6178      	str	r0, [r7, #20]
   148d0:	460b      	mov	r3, r1
   148d2:	74fb      	strb	r3, [r7, #19]
   148d4:	697a      	ldr	r2, [r7, #20]
   148d6:	4b33      	ldr	r3, [pc, #204]	(149a4 <_ZN11StrategieV2C2Eb+0xdc>)
   148d8:	6013      	str	r3, [r2, #0]
{
    isBlue = blue;
   148da:	4a33      	ldr	r2, [pc, #204]	(149a8 <_ZN11StrategieV2C2Eb+0xe0>)
   148dc:	7cfb      	ldrb	r3, [r7, #19]
   148de:	7013      	strb	r3, [r2, #0]
    timeToRestart = 0;
   148e0:	4a32      	ldr	r2, [pc, #200]	(149ac <_ZN11StrategieV2C2Eb+0xe4>)
   148e2:	f04f 0300 	mov.w	r3, #0	; 0x0
   148e6:	6013      	str	r3, [r2, #0]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   148e8:	f04f 0300 	mov.w	r3, #0	; 0x0
   148ec:	627b      	str	r3, [r7, #36]
   148ee:	e008      	b.n	14902 <_ZN11StrategieV2C2Eb+0x3a>
        sharpsToCheck[i] = false;
   148f0:	6a79      	ldr	r1, [r7, #36]
   148f2:	4a2f      	ldr	r2, [pc, #188]	(149b0 <_ZN11StrategieV2C2Eb+0xe8>)
   148f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   148f8:	5453      	strb	r3, [r2, r1]
    actionsToDo[7] = new RamasserVerreV2(Position(1800,1050));
    actionsToDo[8] = new RamasserVerreV2(Position(1800,550));
    actionsToDo[9] = new RamasserVerreV2(Position(1950,800));
    actionsToDo[10] = new RamasserVerreV2(Position(2100,550));
    actionsToDo[11] = new RamasserVerreV2(Position(2100,1050));*/
    for (int i = 0; i < SharpSensor::END_SHARP_NAME; i++)
   148fa:	6a7b      	ldr	r3, [r7, #36]
   148fc:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14900:	627b      	str	r3, [r7, #36]
   14902:	6a7b      	ldr	r3, [r7, #36]
   14904:	2b07      	cmp	r3, #7
   14906:	ddf3      	ble.n	148f0 <_ZN11StrategieV2C2Eb+0x28>
        sharpsToCheck[i] = false;

    //actionsToDo[0] = new Evitement();
    //actionsToDo[0] = new ActionGoTo(Position(1000,230), false);
    int decalage = 0;
   14908:	f04f 0300 	mov.w	r3, #0	; 0x0
   1490c:	61fb      	str	r3, [r7, #28]
    //actionsToDo[1] = new RecalibrerOdometrie(blue, Position(500, 500, blue), RecalibrerOdometrie::COTE_NOTRE_DEPART_BAS);
    //actionsToDo[2] = new RecalibrerOdometrie(blue, Position(2500, 500, blue), RecalibrerOdometrie::COTE_DEPART_ADVERSAIRE_BAS);
    //actionsToDo[3] = new RecalibrerOdometrie(blue, Position(2800, 1500, blue), RecalibrerOdometrie::COTE_DEPART_ADVERSAIRE_HAUT);
    //actionsToDo[0] = new StrategieV3(blue);
    //actionsToDo[0] = (MediumLevelAction*) new Krabi2014(blue);
    actionsToDo[0] = (MediumLevelAction*) new Krabi2015(blue);
   1490e:	f04f 00c0 	mov.w	r0, #192	; 0xc0
   14912:	f7f9 fd21 	bl	e358 <_Znwj>
   14916:	4603      	mov	r3, r0
   14918:	603b      	str	r3, [r7, #0]
   1491a:	683a      	ldr	r2, [r7, #0]
   1491c:	2a00      	cmp	r2, #0
   1491e:	d007      	beq.n	14930 <_ZN11StrategieV2C2Eb+0x68>
   14920:	7cfb      	ldrb	r3, [r7, #19]
   14922:	6838      	ldr	r0, [r7, #0]
   14924:	4619      	mov	r1, r3
   14926:	f7fb fe67 	bl	105f8 <_ZN9Krabi2015C1Eb>
   1492a:	683b      	ldr	r3, [r7, #0]
   1492c:	607b      	str	r3, [r7, #4]
   1492e:	e001      	b.n	14934 <_ZN11StrategieV2C2Eb+0x6c>
   14930:	683a      	ldr	r2, [r7, #0]
   14932:	607a      	str	r2, [r7, #4]
   14934:	687a      	ldr	r2, [r7, #4]
   14936:	4b1f      	ldr	r3, [pc, #124]	(149b4 <_ZN11StrategieV2C2Eb+0xec>)
   14938:	601a      	str	r2, [r3, #0]
    actionsToDo[8] = new ActionGoTo(Position(2600,800), true);
    actionsToDo[9] = new ActionGoTo(Position(2600,1070), false);
    actionsToDo[10] = new ActionGoTo(Position(300,1070), false);*/

    //currentAction = new RecalibrerOdometrie(new LimitSwitchSensor(LimitSwitchSensor::BACK_LEFT, GPIO_Pin_14, GPIOD), new LimitSwitchSensor(LimitSwitchSensor::BACK_RIGHT, GPIO_Pin_1, GPIOD));
    currentAction = actionsToDo[actionsCount];
   1493a:	4b1f      	ldr	r3, [pc, #124]	(149b8 <_ZN11StrategieV2C2Eb+0xf0>)
   1493c:	681a      	ldr	r2, [r3, #0]
   1493e:	4b1d      	ldr	r3, [pc, #116]	(149b4 <_ZN11StrategieV2C2Eb+0xec>)
   14940:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14944:	4b1d      	ldr	r3, [pc, #116]	(149bc <_ZN11StrategieV2C2Eb+0xf4>)
   14946:	601a      	str	r2, [r3, #0]
    //currentAction = new RecalibrerOdometrie();
    //hasJustAvoided = true;
    //currentAction->update();


    StrategieV2::strategie = this;
   14948:	4a1d      	ldr	r2, [pc, #116]	(149c0 <_ZN11StrategieV2C2Eb+0xf8>)
   1494a:	697b      	ldr	r3, [r7, #20]
   1494c:	6013      	str	r3, [r2, #0]

    /*uint8_t channels[10] = {9,13,8,11,5,10,4,12,14,15};
    uint16_t* data = AnalogSensor::initialiserADC(10, channels);
    int nbSharp = 10;*/

    Sensors* sensors = Sensors::getSingleton();
   1494e:	f7f2 f91b 	bl	6b88 <_ZN7Sensors12getSingletonEv>
   14952:	4603      	mov	r3, r0
   14954:	623b      	str	r3, [r7, #32]
    sharps = sensors->getSharpSensorsList();
   14956:	6a38      	ldr	r0, [r7, #32]
   14958:	f7f1 f898 	bl	5a8c <_ZN7Sensors19getSharpSensorsListEv>
   1495c:	4602      	mov	r2, r0
   1495e:	4b19      	ldr	r3, [pc, #100]	(149c4 <_ZN11StrategieV2C2Eb+0xfc>)
   14960:	601a      	str	r2, [r3, #0]
    sharps[6] = new SharpSensor(SharpSensor::NONE, 4, data); //
    sharps[7] = new SharpSensor(SharpSensor::ELEVATOR_TOP, 12, data); // capteur haut ascenseur 12
    sharps[8] = new SharpSensor(SharpSensor::ELEVATOR_DOWN, 14, data); // capteur bas ascenseur 14
    sharps[9] = new SharpSensor(SharpSensor::BACK_RIGHT, 15, data, 2000.0); //
    #endif*/
    emptySharpsToCheck();
   14962:	f7ff f9bf 	bl	13ce4 <_ZN11StrategieV218emptySharpsToCheckEv>
    enableSharp(SharpSensor::BACK_MIDDLE);
    enableSharp(SharpSensor::BACK_RIGHT);*/

#ifdef ROBOTHW
//        tourelle = new Tourelle(TIM6, 0);//TIM parameter is not implemented yet
    tourelle = new Tourelle();
   14966:	f04f 0001 	mov.w	r0, #1	; 0x1
   1496a:	f7f9 fcf5 	bl	e358 <_Znwj>
   1496e:	4603      	mov	r3, r0
   14970:	60bb      	str	r3, [r7, #8]
   14972:	68bb      	ldr	r3, [r7, #8]
   14974:	2b00      	cmp	r3, #0
   14976:	d005      	beq.n	14984 <_ZN11StrategieV2C2Eb+0xbc>
   14978:	68b8      	ldr	r0, [r7, #8]
   1497a:	f7f8 fe69 	bl	d650 <_ZN8TourelleC1Ev>
   1497e:	68ba      	ldr	r2, [r7, #8]
   14980:	60fa      	str	r2, [r7, #12]
   14982:	e001      	b.n	14988 <_ZN11StrategieV2C2Eb+0xc0>
   14984:	68bb      	ldr	r3, [r7, #8]
   14986:	60fb      	str	r3, [r7, #12]
   14988:	4b0f      	ldr	r3, [pc, #60]	(149c8 <_ZN11StrategieV2C2Eb+0x100>)
   1498a:	68fa      	ldr	r2, [r7, #12]
   1498c:	601a      	str	r2, [r3, #0]
    //tourelle->setZoneCritique(10, 27000);
#endif

    updateCount = 0;
   1498e:	4a0f      	ldr	r2, [pc, #60]	(149cc <_ZN11StrategieV2C2Eb+0x104>)
   14990:	f04f 0300 	mov.w	r3, #0	; 0x0
   14994:	6013      	str	r3, [r2, #0]
}
   14996:	697b      	ldr	r3, [r7, #20]
   14998:	4618      	mov	r0, r3
   1499a:	f107 0728 	add.w	r7, r7, #40	; 0x28
   1499e:	46bd      	mov	sp, r7
   149a0:	bd80      	pop	{r7, pc}
   149a2:	46c0      	nop			(mov r8, r8)
   149a4:	0001fcb0 	.word	0x0001fcb0
   149a8:	20000645 	.word	0x20000645
   149ac:	20000664 	.word	0x20000664
   149b0:	20000646 	.word	0x20000646
   149b4:	200005b4 	.word	0x200005b4
   149b8:	200005b0 	.word	0x200005b0
   149bc:	200005ac 	.word	0x200005ac
   149c0:	200005a0 	.word	0x200005a0
   149c4:	20000634 	.word	0x20000634
   149c8:	20000668 	.word	0x20000668
   149cc:	200005a4 	.word	0x200005a4

000149d0 <_ZN11StrategieV316collisionAvoidedEv>:
    for(int i = 0 ; i < 10 ; i++){
        this->tableauEtapes[i]->setState(0);
    }
}

void StrategieV3::collisionAvoided(){
   149d0:	b480      	push	{r7}
   149d2:	b083      	sub	sp, #12
   149d4:	af00      	add	r7, sp, #0
   149d6:	6078      	str	r0, [r7, #4]
    this->avoiding = true;
   149d8:	687b      	ldr	r3, [r7, #4]
   149da:	f04f 0201 	mov.w	r2, #1	; 0x1
   149de:	f883 2038 	strb.w	r2, [r3, #56]
}
   149e2:	f107 070c 	add.w	r7, r7, #12	; 0xc
   149e6:	46bd      	mov	sp, r7
   149e8:	bc80      	pop	{r7}
   149ea:	4770      	bx	lr

000149ec <_ZN11StrategieV312updateScoresEv>:
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}

bool StrategieV3::updateScores() {
   149ec:	b580      	push	{r7, lr}
   149ee:	b086      	sub	sp, #24
   149f0:	af00      	add	r7, sp, #0
   149f2:	6078      	str	r0, [r7, #4]
    //le temps restant done
    //la trajectoire de notre autre robot
    //...
    //C'est aussi utilisé pour savoir si on est dans un sous-graphe sans objectif,
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
   149f4:	f04f 0300 	mov.w	r3, #0	; 0x0
   149f8:	60fb      	str	r3, [r7, #12]
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
   149fa:	f04f 0300 	mov.w	r3, #0	; 0x0
   149fe:	74fb      	strb	r3, [r7, #19]
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   14a00:	f04f 0300 	mov.w	r3, #0	; 0x0
   14a04:	617b      	str	r3, [r7, #20]
   14a06:	e01e      	b.n	14a46 <_ZN11StrategieV312updateScoresEv+0x5a>
    {
        scoreTypeEtape=this->getScoreEtape(i);
   14a08:	687b      	ldr	r3, [r7, #4]
   14a0a:	681b      	ldr	r3, [r3, #0]
   14a0c:	f103 031c 	add.w	r3, r3, #28	; 0x1c
   14a10:	681b      	ldr	r3, [r3, #0]
   14a12:	6878      	ldr	r0, [r7, #4]
   14a14:	6979      	ldr	r1, [r7, #20]
   14a16:	4798      	blx	r3
   14a18:	4603      	mov	r3, r0
   14a1a:	60fb      	str	r3, [r7, #12]
        if(scoreTypeEtape)
   14a1c:	68fb      	ldr	r3, [r7, #12]
   14a1e:	2b00      	cmp	r3, #0
   14a20:	d002      	beq.n	14a28 <_ZN11StrategieV312updateScoresEv+0x3c>
        {
            resteDesChosesAFaire = true;
   14a22:	f04f 0301 	mov.w	r3, #1	; 0x1
   14a26:	74fb      	strb	r3, [r7, #19]
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
   14a28:	687b      	ldr	r3, [r7, #4]
   14a2a:	6b1a      	ldr	r2, [r3, #48]
   14a2c:	697b      	ldr	r3, [r7, #20]
   14a2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14a32:	4413      	add	r3, r2
   14a34:	681b      	ldr	r3, [r3, #0]
   14a36:	4618      	mov	r0, r3
   14a38:	68f9      	ldr	r1, [r7, #12]
   14a3a:	f7fb fba3 	bl	10184 <_ZN5Etape8setScoreEi>
    //et qu'il faut oublier qu'on a vu des robots
    int scoreTypeEtape = 0;
    //float modificateurTemporel = 1.f;

    bool resteDesChosesAFaire = false;
    for(int i = 0 ; i < this->nombreEtapes ; i++)
   14a3e:	697b      	ldr	r3, [r7, #20]
   14a40:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14a44:	617b      	str	r3, [r7, #20]
   14a46:	687b      	ldr	r3, [r7, #4]
   14a48:	69da      	ldr	r2, [r3, #28]
   14a4a:	697b      	ldr	r3, [r7, #20]
   14a4c:	429a      	cmp	r2, r3
   14a4e:	dcdb      	bgt.n	14a08 <_ZN11StrategieV312updateScoresEv+0x1c>
            resteDesChosesAFaire = true;
        }

        this->tableauEtapes[i]->setScore(scoreTypeEtape);
    }
    return resteDesChosesAFaire;
   14a50:	7cfb      	ldrb	r3, [r7, #19]
}
   14a52:	4618      	mov	r0, r3
   14a54:	f107 0718 	add.w	r7, r7, #24	; 0x18
   14a58:	46bd      	mov	sp, r7
   14a5a:	bd80      	pop	{r7, pc}

00014a5c <_ZN11StrategieV313startDijkstraEv>:
    }
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
   14a5c:	b580      	push	{r7, lr}
   14a5e:	b086      	sub	sp, #24
   14a60:	af00      	add	r7, sp, #0
   14a62:	60f8      	str	r0, [r7, #12]
    for(int i=0; i<this->nombreEtapes; i++)
   14a64:	f04f 0300 	mov.w	r3, #0	; 0x0
   14a68:	617b      	str	r3, [r7, #20]
   14a6a:	e00d      	b.n	14a88 <_ZN11StrategieV313startDijkstraEv+0x2c>
        tableauEtapesTotal[i]->computeChildDistances();
   14a6c:	68fb      	ldr	r3, [r7, #12]
   14a6e:	6b5a      	ldr	r2, [r3, #52]
   14a70:	697b      	ldr	r3, [r7, #20]
   14a72:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14a76:	4413      	add	r3, r2
   14a78:	681b      	ldr	r3, [r3, #0]
   14a7a:	4618      	mov	r0, r3
   14a7c:	f7fb fc28 	bl	102d0 <_ZN5Etape21computeChildDistancesEv>
    p->setOpacity(1);
}
#endif

void StrategieV3::startDijkstra(){
    for(int i=0; i<this->nombreEtapes; i++)
   14a80:	697b      	ldr	r3, [r7, #20]
   14a82:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14a86:	617b      	str	r3, [r7, #20]
   14a88:	68fb      	ldr	r3, [r7, #12]
   14a8a:	69da      	ldr	r2, [r3, #28]
   14a8c:	697b      	ldr	r3, [r7, #20]
   14a8e:	429a      	cmp	r2, r3
   14a90:	dcec      	bgt.n	14a6c <_ZN11StrategieV313startDijkstraEv+0x10>
        tableauEtapesTotal[i]->computeChildDistances();

    this->dijkstra = new Dijkstra(tableauEtapesTotal, this->nombreEtapes);
   14a92:	f04f 0024 	mov.w	r0, #36	; 0x24
   14a96:	f7f9 fc5f 	bl	e358 <_Znwj>
   14a9a:	4603      	mov	r3, r0
   14a9c:	607b      	str	r3, [r7, #4]
   14a9e:	687a      	ldr	r2, [r7, #4]
   14aa0:	2a00      	cmp	r2, #0
   14aa2:	d00b      	beq.n	14abc <_ZN11StrategieV313startDijkstraEv+0x60>
   14aa4:	68fb      	ldr	r3, [r7, #12]
   14aa6:	6b5a      	ldr	r2, [r3, #52]
   14aa8:	68fb      	ldr	r3, [r7, #12]
   14aaa:	69db      	ldr	r3, [r3, #28]
   14aac:	6878      	ldr	r0, [r7, #4]
   14aae:	4611      	mov	r1, r2
   14ab0:	461a      	mov	r2, r3
   14ab2:	f7fa fdc1 	bl	f638 <_ZN8DijkstraC1EPP5Etapei>
   14ab6:	687b      	ldr	r3, [r7, #4]
   14ab8:	60bb      	str	r3, [r7, #8]
   14aba:	e001      	b.n	14ac0 <_ZN11StrategieV313startDijkstraEv+0x64>
   14abc:	687a      	ldr	r2, [r7, #4]
   14abe:	60ba      	str	r2, [r7, #8]
   14ac0:	68fb      	ldr	r3, [r7, #12]
   14ac2:	68ba      	ldr	r2, [r7, #8]
   14ac4:	62da      	str	r2, [r3, #44]

    this->tableauEtapes = tableauEtapesTotal;
   14ac6:	68fb      	ldr	r3, [r7, #12]
   14ac8:	6b5a      	ldr	r2, [r3, #52]
   14aca:	68fb      	ldr	r3, [r7, #12]
   14acc:	631a      	str	r2, [r3, #48]
    this->tableauEtapes[0]->setParent(this->tableauEtapes[0]);// Evite de planter si on detecte dès la première boucle (dans le simu)
   14ace:	68fb      	ldr	r3, [r7, #12]
   14ad0:	6b1b      	ldr	r3, [r3, #48]
   14ad2:	681a      	ldr	r2, [r3, #0]
   14ad4:	68fb      	ldr	r3, [r7, #12]
   14ad6:	6b1b      	ldr	r3, [r3, #48]
   14ad8:	681b      	ldr	r3, [r3, #0]
   14ada:	4610      	mov	r0, r2
   14adc:	4619      	mov	r1, r3
   14ade:	f7fb fa57 	bl	ff90 <_ZN5Etape9setParentEPS_>

    dijkstra->setEtapeCourante(0);
   14ae2:	68fb      	ldr	r3, [r7, #12]
   14ae4:	6adb      	ldr	r3, [r3, #44]
   14ae6:	4618      	mov	r0, r3
   14ae8:	f04f 0100 	mov.w	r1, #0	; 0x0
   14aec:	f7fa fdca 	bl	f684 <_ZN8Dijkstra16setEtapeCouranteEi>
    }
    // ###########################################################################################
    // Mettre un point d'arrêt ici pour récupérer les distances dans la sortie standard du simu
    // ###########################################################################################
#endif
}
   14af0:	f107 0718 	add.w	r7, r7, #24	; 0x18
   14af4:	46bd      	mov	sp, r7
   14af6:	bd80      	pop	{r7, pc}

00014af8 <_ZN11StrategieV318updateIntermedaireEv>:
void StrategieV3::collisionAvoided(){
    this->avoiding = true;
}


void StrategieV3::updateIntermedaire()
   14af8:	b580      	push	{r7, lr}
   14afa:	b086      	sub	sp, #24
   14afc:	af00      	add	r7, sp, #0
   14afe:	6078      	str	r0, [r7, #4]
    //(sauf peut être le parent de l'étape d'origine, mais on s'en fout

    #ifndef ROBOTHW
        qDebug() << "updateIntermedaire\n";
    #endif
    int etapeOuOnVientDArriver = this->etapeEnCours;
   14b00:	687b      	ldr	r3, [r7, #4]
   14b02:	699b      	ldr	r3, [r3, #24]
   14b04:	60fb      	str	r3, [r7, #12]
    this->etapeEnCours = this->goal;
   14b06:	687b      	ldr	r3, [r7, #4]
   14b08:	6bda      	ldr	r2, [r3, #60]
   14b0a:	687b      	ldr	r3, [r7, #4]
   14b0c:	619a      	str	r2, [r3, #24]
    Etape* toto = this->tableauEtapes[1];
   14b0e:	687b      	ldr	r3, [r7, #4]
   14b10:	6b1b      	ldr	r3, [r3, #48]
   14b12:	f103 0304 	add.w	r3, r3, #4	; 0x4
   14b16:	681b      	ldr	r3, [r3, #0]
   14b18:	613b      	str	r3, [r7, #16]
    Etape* toto2 = this->tableauEtapes[2];
   14b1a:	687b      	ldr	r3, [r7, #4]
   14b1c:	6b1b      	ldr	r3, [r3, #48]
   14b1e:	f103 0308 	add.w	r3, r3, #8	; 0x8
   14b22:	681b      	ldr	r3, [r3, #0]
   14b24:	617b      	str	r3, [r7, #20]

    // Si la prochaine étape est le goal, alors au prochain update il faudra trouver un nouvel objectif -> status = 1;
    if(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) == etapeOuOnVientDArriver)
   14b26:	687b      	ldr	r3, [r7, #4]
   14b28:	6b1a      	ldr	r2, [r3, #48]
   14b2a:	687b      	ldr	r3, [r7, #4]
   14b2c:	699b      	ldr	r3, [r3, #24]
   14b2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14b32:	4413      	add	r3, r2
   14b34:	681b      	ldr	r3, [r3, #0]
   14b36:	4618      	mov	r0, r3
   14b38:	f7fb f9d6 	bl	fee8 <_ZN5Etape9getParentEv>
   14b3c:	4603      	mov	r3, r0
   14b3e:	4618      	mov	r0, r3
   14b40:	f7fb fa68 	bl	10014 <_ZN5Etape9getNumeroEv>
   14b44:	4602      	mov	r2, r0
   14b46:	68fb      	ldr	r3, [r7, #12]
   14b48:	429a      	cmp	r2, r3
   14b4a:	bf14      	ite	ne
   14b4c:	2300      	movne	r3, #0
   14b4e:	2301      	moveq	r3, #1
   14b50:	b2db      	uxtb	r3, r3
   14b52:	2b00      	cmp	r3, #0
   14b54:	d016      	beq.n	14b84 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    {
        #ifndef ROBOTHW
            qDebug() << "la prochaine étape est le goal\n";
        #endif
        this->statusStrat = 1;
   14b56:	687a      	ldr	r2, [r7, #4]
   14b58:	f04f 0301 	mov.w	r3, #1	; 0x1
   14b5c:	6413      	str	r3, [r2, #64]
   14b5e:	e011      	b.n	14b84 <_ZN11StrategieV318updateIntermedaireEv+0x8c>
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
    {
        #ifndef ROBOTHW
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
   14b60:	687b      	ldr	r3, [r7, #4]
   14b62:	6b1a      	ldr	r2, [r3, #48]
   14b64:	687b      	ldr	r3, [r7, #4]
   14b66:	699b      	ldr	r3, [r3, #24]
   14b68:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14b6c:	4413      	add	r3, r2
   14b6e:	681b      	ldr	r3, [r3, #0]
   14b70:	4618      	mov	r0, r3
   14b72:	f7fb f9b9 	bl	fee8 <_ZN5Etape9getParentEv>
   14b76:	4603      	mov	r3, r0
   14b78:	4618      	mov	r0, r3
   14b7a:	f7fb fa4b 	bl	10014 <_ZN5Etape9getNumeroEv>
   14b7e:	4602      	mov	r2, r0
   14b80:	687b      	ldr	r3, [r7, #4]
   14b82:	619a      	str	r2, [r3, #24]
        #endif
        this->statusStrat = 1;
    }

    //On cherche l'étape suivant vers l'etape - but
    while(((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero())) != etapeOuOnVientDArriver)
   14b84:	687b      	ldr	r3, [r7, #4]
   14b86:	6b1a      	ldr	r2, [r3, #48]
   14b88:	687b      	ldr	r3, [r7, #4]
   14b8a:	699b      	ldr	r3, [r3, #24]
   14b8c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14b90:	4413      	add	r3, r2
   14b92:	681b      	ldr	r3, [r3, #0]
   14b94:	4618      	mov	r0, r3
   14b96:	f7fb f9a7 	bl	fee8 <_ZN5Etape9getParentEv>
   14b9a:	4603      	mov	r3, r0
   14b9c:	4618      	mov	r0, r3
   14b9e:	f7fb fa39 	bl	10014 <_ZN5Etape9getNumeroEv>
   14ba2:	4602      	mov	r2, r0
   14ba4:	68fb      	ldr	r3, [r7, #12]
   14ba6:	429a      	cmp	r2, r3
   14ba8:	bf0c      	ite	eq
   14baa:	2300      	moveq	r3, #0
   14bac:	2301      	movne	r3, #1
   14bae:	b2db      	uxtb	r3, r3
   14bb0:	2b00      	cmp	r3, #0
   14bb2:	d1d5      	bne.n	14b60 <_ZN11StrategieV318updateIntermedaireEv+0x68>
        qDebug() << "On cherche l'étape suivant vers l'etape - but" << this->etapeEnCours << "\n";
        #endif
        this->etapeEnCours = ((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
    }

    if(this->statusStrat == 1)
   14bb4:	687b      	ldr	r3, [r7, #4]
   14bb6:	6c1b      	ldr	r3, [r3, #64]
   14bb8:	2b01      	cmp	r3, #1
   14bba:	d10b      	bne.n	14bd4 <_ZN11StrategieV318updateIntermedaireEv+0xdc>
    {
        //On réalise l'action de l'étape - but
        StrategieV2::addTemporaryAction(actionEtape[this->etapeEnCours]);
   14bbc:	687b      	ldr	r3, [r7, #4]
   14bbe:	6a5a      	ldr	r2, [r3, #36]
   14bc0:	687b      	ldr	r3, [r7, #4]
   14bc2:	699b      	ldr	r3, [r3, #24]
   14bc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14bc8:	4413      	add	r3, r2
   14bca:	681b      	ldr	r3, [r3, #0]
   14bcc:	4618      	mov	r0, r3
   14bce:	f7ff f815 	bl	13bfc <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
   14bd2:	e00d      	b.n	14bf0 <_ZN11StrategieV318updateIntermedaireEv+0xf8>
    }
    else
    {
        //On ajoute l'action d'aller en ligne droite vers cette étape intermédiaire
        StrategieV2::addTemporaryAction(&actionGoto[this->etapeEnCours]);
   14bd4:	687b      	ldr	r3, [r7, #4]
   14bd6:	6a99      	ldr	r1, [r3, #40]
   14bd8:	687b      	ldr	r3, [r7, #4]
   14bda:	699b      	ldr	r3, [r3, #24]
   14bdc:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14be0:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14be4:	ebc2 0303 	rsb	r3, r2, r3
   14be8:	440b      	add	r3, r1
   14bea:	4618      	mov	r0, r3
   14bec:	f7ff f806 	bl	13bfc <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
    }
}
   14bf0:	f107 0718 	add.w	r7, r7, #24	; 0x18
   14bf4:	46bd      	mov	sp, r7
   14bf6:	bd80      	pop	{r7, pc}

00014bf8 <_ZN11StrategieV315resetEverythingEv>:
        }
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
   14bf8:	b580      	push	{r7, lr}
   14bfa:	b084      	sub	sp, #16
   14bfc:	af00      	add	r7, sp, #0
   14bfe:	6078      	str	r0, [r7, #4]
    for(int i = 0 ; i < 10 ; i++){
   14c00:	f04f 0300 	mov.w	r3, #0	; 0x0
   14c04:	60fb      	str	r3, [r7, #12]
   14c06:	e00f      	b.n	14c28 <_ZN11StrategieV315resetEverythingEv+0x30>
        this->tableauEtapes[i]->setState(0);
   14c08:	687b      	ldr	r3, [r7, #4]
   14c0a:	6b1a      	ldr	r2, [r3, #48]
   14c0c:	68fb      	ldr	r3, [r7, #12]
   14c0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14c12:	4413      	add	r3, r2
   14c14:	681b      	ldr	r3, [r3, #0]
   14c16:	4618      	mov	r0, r3
   14c18:	f04f 0100 	mov.w	r1, #0	; 0x0
   14c1c:	f7fb f990 	bl	ff40 <_ZN5Etape8setStateEi>
    }
    return this->statusStrat;
}

void StrategieV3::resetEverything(){
    for(int i = 0 ; i < 10 ; i++){
   14c20:	68fb      	ldr	r3, [r7, #12]
   14c22:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14c26:	60fb      	str	r3, [r7, #12]
   14c28:	68fb      	ldr	r3, [r7, #12]
   14c2a:	2b09      	cmp	r3, #9
   14c2c:	ddec      	ble.n	14c08 <_ZN11StrategieV315resetEverythingEv+0x10>
        this->tableauEtapes[i]->setState(0);
    }
}
   14c2e:	f107 0710 	add.w	r7, r7, #16	; 0x10
   14c32:	46bd      	mov	sp, r7
   14c34:	bd80      	pop	{r7, pc}
   14c36:	46c0      	nop			(mov r8, r8)

00014c38 <_ZN11StrategieV36updateEv>:
    */


}

int StrategieV3::update()
   14c38:	b580      	push	{r7, lr}
   14c3a:	b08e      	sub	sp, #56
   14c3c:	af00      	add	r7, sp, #0
   14c3e:	60f8      	str	r0, [r7, #12]
{

    this->actionEtape[this->etapeEnCours]->reset();
   14c40:	68fb      	ldr	r3, [r7, #12]
   14c42:	6a5a      	ldr	r2, [r3, #36]
   14c44:	68fb      	ldr	r3, [r7, #12]
   14c46:	699b      	ldr	r3, [r3, #24]
   14c48:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14c4c:	4413      	add	r3, r2
   14c4e:	681b      	ldr	r3, [r3, #0]
   14c50:	681b      	ldr	r3, [r3, #0]
   14c52:	f103 0314 	add.w	r3, r3, #20	; 0x14
   14c56:	6819      	ldr	r1, [r3, #0]
   14c58:	68fb      	ldr	r3, [r7, #12]
   14c5a:	6a5a      	ldr	r2, [r3, #36]
   14c5c:	68fb      	ldr	r3, [r7, #12]
   14c5e:	699b      	ldr	r3, [r3, #24]
   14c60:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14c64:	4413      	add	r3, r2
   14c66:	681b      	ldr	r3, [r3, #0]
   14c68:	4618      	mov	r0, r3
   14c6a:	4788      	blx	r1
    this->actionGoto[this->etapeEnCours].reset();
   14c6c:	68fb      	ldr	r3, [r7, #12]
   14c6e:	6a99      	ldr	r1, [r3, #40]
   14c70:	68fb      	ldr	r3, [r7, #12]
   14c72:	699b      	ldr	r3, [r3, #24]
   14c74:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14c78:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14c7c:	ebc2 0303 	rsb	r3, r2, r3
   14c80:	440b      	add	r3, r1
   14c82:	681b      	ldr	r3, [r3, #0]
   14c84:	f103 0314 	add.w	r3, r3, #20	; 0x14
   14c88:	f8d3 c000 	ldr.w	ip, [r3]
   14c8c:	68fb      	ldr	r3, [r7, #12]
   14c8e:	6a99      	ldr	r1, [r3, #40]
   14c90:	68fb      	ldr	r3, [r7, #12]
   14c92:	699b      	ldr	r3, [r3, #24]
   14c94:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14c98:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14c9c:	ebc2 0303 	rsb	r3, r2, r3
   14ca0:	440b      	add	r3, r1
   14ca2:	4618      	mov	r0, r3
   14ca4:	47e0      	blx	ip



    //Si on est en train d'éviter, on revient à l'étape précédente, et on marque l'étape comme à éviter
    if(this->avoiding)
   14ca6:	68fb      	ldr	r3, [r7, #12]
   14ca8:	f893 3038 	ldrb.w	r3, [r3, #56]
   14cac:	2b00      	cmp	r3, #0
   14cae:	f000 80cf 	beq.w	14e50 <_ZN11StrategieV36updateEv+0x218>
    {
        this->tableauEtapes[this->etapeEnCours]->robotVu();
   14cb2:	68fb      	ldr	r3, [r7, #12]
   14cb4:	6b1a      	ldr	r2, [r3, #48]
   14cb6:	68fb      	ldr	r3, [r7, #12]
   14cb8:	699b      	ldr	r3, [r3, #24]
   14cba:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14cbe:	4413      	add	r3, r2
   14cc0:	681b      	ldr	r3, [r3, #0]
   14cc2:	4618      	mov	r0, r3
   14cc4:	f7fb f9ce 	bl	10064 <_ZN5Etape7robotVuEv>
        //this->tableauEtapes[this->etapeEnCours]->setState(-2);
        this->tableauEtapes[etapeEnCours]->getParent()->setParent(this->tableauEtapes[this->etapeEnCours]);
   14cc8:	68fb      	ldr	r3, [r7, #12]
   14cca:	6b1a      	ldr	r2, [r3, #48]
   14ccc:	68fb      	ldr	r3, [r7, #12]
   14cce:	699b      	ldr	r3, [r3, #24]
   14cd0:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14cd4:	4413      	add	r3, r2
   14cd6:	681b      	ldr	r3, [r3, #0]
   14cd8:	4618      	mov	r0, r3
   14cda:	f7fb f905 	bl	fee8 <_ZN5Etape9getParentEv>
   14cde:	4601      	mov	r1, r0
   14ce0:	68fb      	ldr	r3, [r7, #12]
   14ce2:	6b1a      	ldr	r2, [r3, #48]
   14ce4:	68fb      	ldr	r3, [r7, #12]
   14ce6:	699b      	ldr	r3, [r3, #24]
   14ce8:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14cec:	4413      	add	r3, r2
   14cee:	681b      	ldr	r3, [r3, #0]
   14cf0:	4608      	mov	r0, r1
   14cf2:	4619      	mov	r1, r3
   14cf4:	f7fb f94c 	bl	ff90 <_ZN5Etape9setParentEPS_>
        this->etapeEnCours = this->tableauEtapes[etapeEnCours]->getParent()->getNumero();
   14cf8:	68fb      	ldr	r3, [r7, #12]
   14cfa:	6b1a      	ldr	r2, [r3, #48]
   14cfc:	68fb      	ldr	r3, [r7, #12]
   14cfe:	699b      	ldr	r3, [r3, #24]
   14d00:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14d04:	4413      	add	r3, r2
   14d06:	681b      	ldr	r3, [r3, #0]
   14d08:	4618      	mov	r0, r3
   14d0a:	f7fb f8ed 	bl	fee8 <_ZN5Etape9getParentEv>
   14d0e:	4603      	mov	r3, r0
   14d10:	4618      	mov	r0, r3
   14d12:	f7fb f97f 	bl	10014 <_ZN5Etape9getNumeroEv>
   14d16:	4602      	mov	r2, r0
   14d18:	68fb      	ldr	r3, [r7, #12]
   14d1a:	619a      	str	r2, [r3, #24]



        //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
        dijkstra->setEtapeCourante(this->etapeEnCours);
   14d1c:	68fb      	ldr	r3, [r7, #12]
   14d1e:	6ada      	ldr	r2, [r3, #44]
   14d20:	68fb      	ldr	r3, [r7, #12]
   14d22:	699b      	ldr	r3, [r3, #24]
   14d24:	4610      	mov	r0, r2
   14d26:	4619      	mov	r1, r3
   14d28:	f7fa fcac 	bl	f684 <_ZN8Dijkstra16setEtapeCouranteEi>

        if(this->enTrainEviterReculant)
   14d2c:	68fb      	ldr	r3, [r7, #12]
   14d2e:	f893 3044 	ldrb.w	r3, [r3, #68]
   14d32:	2b00      	cmp	r3, #0
   14d34:	d01a      	beq.n	14d6c <_ZN11StrategieV36updateEv+0x134>
        {
            this->enTrainEviterReculant = false;
   14d36:	68fa      	ldr	r2, [r7, #12]
   14d38:	f04f 0300 	mov.w	r3, #0	; 0x0
   14d3c:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = true;
   14d40:	68fa      	ldr	r2, [r7, #12]
   14d42:	f04f 0301 	mov.w	r3, #1	; 0x1
   14d46:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(false);
   14d4a:	68fb      	ldr	r3, [r7, #12]
   14d4c:	6a99      	ldr	r1, [r3, #40]
   14d4e:	68fb      	ldr	r3, [r7, #12]
   14d50:	699b      	ldr	r3, [r3, #24]
   14d52:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14d56:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14d5a:	ebc2 0303 	rsb	r3, r2, r3
   14d5e:	440b      	add	r3, r1
   14d60:	4618      	mov	r0, r3
   14d62:	f04f 0100 	mov.w	r1, #0	; 0x0
   14d66:	f7fe f961 	bl	1302c <_ZN17MediumLevelAction9setGoBackEb>
   14d6a:	e019      	b.n	14da0 <_ZN11StrategieV36updateEv+0x168>
            //actionEtape[etapeEnCours]->setGoBack(false);
        }
        else
        {
            this->enTrainEviterReculant = true;
   14d6c:	68fa      	ldr	r2, [r7, #12]
   14d6e:	f04f 0301 	mov.w	r3, #1	; 0x1
   14d72:	f882 3044 	strb.w	r3, [r2, #68]
            this->enTrainEviterAvancant = false;
   14d76:	68fa      	ldr	r2, [r7, #12]
   14d78:	f04f 0300 	mov.w	r3, #0	; 0x0
   14d7c:	f882 3045 	strb.w	r3, [r2, #69]
            actionGoto[etapeEnCours].setGoBack(true);
   14d80:	68fb      	ldr	r3, [r7, #12]
   14d82:	6a99      	ldr	r1, [r3, #40]
   14d84:	68fb      	ldr	r3, [r7, #12]
   14d86:	699b      	ldr	r3, [r3, #24]
   14d88:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14d8c:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14d90:	ebc2 0303 	rsb	r3, r2, r3
   14d94:	440b      	add	r3, r1
   14d96:	4618      	mov	r0, r3
   14d98:	f04f 0101 	mov.w	r1, #1	; 0x1
   14d9c:	f7fe f946 	bl	1302c <_ZN17MediumLevelAction9setGoBackEb>
            //actionEtape[etapeEnCours]->setGoBack(true);
        }

        StrategieV2::addTemporaryAction(&actionGoto[etapeEnCours]);
   14da0:	68fb      	ldr	r3, [r7, #12]
   14da2:	6a99      	ldr	r1, [r3, #40]
   14da4:	68fb      	ldr	r3, [r7, #12]
   14da6:	699b      	ldr	r3, [r3, #24]
   14da8:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14dac:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14db0:	ebc2 0303 	rsb	r3, r2, r3
   14db4:	440b      	add	r3, r1
   14db6:	4618      	mov	r0, r3
   14db8:	f7fe ff20 	bl	13bfc <_ZN11StrategieV218addTemporaryActionEP17MediumLevelAction>
        //StrategieV2::addTemporaryAction(actionEtape[etapeEnCours]);
        //dijkstra->setEtapeCourante((this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero()));
        if(dijkstra->run() != 0)
   14dbc:	68fb      	ldr	r3, [r7, #12]
   14dbe:	6adb      	ldr	r3, [r3, #44]
   14dc0:	4618      	mov	r0, r3
   14dc2:	f7fa ff61 	bl	fc88 <_ZN8Dijkstra3runEv>
   14dc6:	4603      	mov	r3, r0
   14dc8:	2b00      	cmp	r3, #0
   14dca:	bf0c      	ite	eq
   14dcc:	2300      	moveq	r3, #0
   14dce:	2301      	movne	r3, #1
   14dd0:	b2db      	uxtb	r3, r3
   14dd2:	2b00      	cmp	r3, #0
   14dd4:	d032      	beq.n	14e3c <_ZN11StrategieV36updateEv+0x204>
        {
            // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
            // Cela arrive pour débloquer le robot
            //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
            //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
            this->actionEtape[this->etapeEnCours]->reset();
   14dd6:	68fb      	ldr	r3, [r7, #12]
   14dd8:	6a5a      	ldr	r2, [r3, #36]
   14dda:	68fb      	ldr	r3, [r7, #12]
   14ddc:	699b      	ldr	r3, [r3, #24]
   14dde:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14de2:	4413      	add	r3, r2
   14de4:	681b      	ldr	r3, [r3, #0]
   14de6:	681b      	ldr	r3, [r3, #0]
   14de8:	f103 0314 	add.w	r3, r3, #20	; 0x14
   14dec:	6819      	ldr	r1, [r3, #0]
   14dee:	68fb      	ldr	r3, [r7, #12]
   14df0:	6a5a      	ldr	r2, [r3, #36]
   14df2:	68fb      	ldr	r3, [r7, #12]
   14df4:	699b      	ldr	r3, [r3, #24]
   14df6:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14dfa:	4413      	add	r3, r2
   14dfc:	681b      	ldr	r3, [r3, #0]
   14dfe:	4618      	mov	r0, r3
   14e00:	4788      	blx	r1
            this->actionGoto[this->etapeEnCours].reset();
   14e02:	68fb      	ldr	r3, [r7, #12]
   14e04:	6a99      	ldr	r1, [r3, #40]
   14e06:	68fb      	ldr	r3, [r7, #12]
   14e08:	699b      	ldr	r3, [r3, #24]
   14e0a:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14e0e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14e12:	ebc2 0303 	rsb	r3, r2, r3
   14e16:	440b      	add	r3, r1
   14e18:	681b      	ldr	r3, [r3, #0]
   14e1a:	f103 0314 	add.w	r3, r3, #20	; 0x14
   14e1e:	f8d3 c000 	ldr.w	ip, [r3]
   14e22:	68fb      	ldr	r3, [r7, #12]
   14e24:	6a99      	ldr	r1, [r3, #40]
   14e26:	68fb      	ldr	r3, [r7, #12]
   14e28:	699b      	ldr	r3, [r3, #24]
   14e2a:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14e2e:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14e32:	ebc2 0303 	rsb	r3, r2, r3
   14e36:	440b      	add	r3, r1
   14e38:	4618      	mov	r0, r3
   14e3a:	47e0      	blx	ip
        }

        //On retourne à l'étape intermédiaire précédente, en marche arrière

        this->avoiding = false;
   14e3c:	68fa      	ldr	r2, [r7, #12]
   14e3e:	f04f 0300 	mov.w	r3, #0	; 0x0
   14e42:	f882 3038 	strb.w	r3, [r2, #56]
        statusStrat=1;
   14e46:	68fa      	ldr	r2, [r7, #12]
   14e48:	f04f 0301 	mov.w	r3, #1	; 0x1
   14e4c:	6413      	str	r3, [r2, #64]
   14e4e:	e17e      	b.n	1514e <_ZN11StrategieV36updateEv+0x516>
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   14e50:	f04f 0300 	mov.w	r3, #0	; 0x0
   14e54:	613b      	str	r3, [r7, #16]
   14e56:	e01e      	b.n	14e96 <_ZN11StrategieV36updateEv+0x25e>
        {
            actionGoto[i].setGoBack(false);
   14e58:	68fb      	ldr	r3, [r7, #12]
   14e5a:	6a99      	ldr	r1, [r3, #40]
   14e5c:	693b      	ldr	r3, [r7, #16]
   14e5e:	ea4f 1203 	mov.w	r2, r3, lsl #4
   14e62:	ea4f 0382 	mov.w	r3, r2, lsl #2
   14e66:	ebc2 0303 	rsb	r3, r2, r3
   14e6a:	440b      	add	r3, r1
   14e6c:	4618      	mov	r0, r3
   14e6e:	f04f 0100 	mov.w	r1, #0	; 0x0
   14e72:	f7fe f8db 	bl	1302c <_ZN17MediumLevelAction9setGoBackEb>
            actionEtape[i]->setGoBack(false);
   14e76:	68fb      	ldr	r3, [r7, #12]
   14e78:	6a5a      	ldr	r2, [r3, #36]
   14e7a:	693b      	ldr	r3, [r7, #16]
   14e7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14e80:	4413      	add	r3, r2
   14e82:	681b      	ldr	r3, [r3, #0]
   14e84:	4618      	mov	r0, r3
   14e86:	f04f 0100 	mov.w	r1, #0	; 0x0
   14e8a:	f7fe f8cf 	bl	1302c <_ZN17MediumLevelAction9setGoBackEb>
        statusStrat=1;
    }
    else
    {
        //On reset toute les directions à aller en marche avant
        for(int i = 0 ; i < this->nombreEtapes ; i++)
   14e8e:	693b      	ldr	r3, [r7, #16]
   14e90:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14e94:	613b      	str	r3, [r7, #16]
   14e96:	68fb      	ldr	r3, [r7, #12]
   14e98:	69da      	ldr	r2, [r3, #28]
   14e9a:	693b      	ldr	r3, [r7, #16]
   14e9c:	429a      	cmp	r2, r3
   14e9e:	dcdb      	bgt.n	14e58 <_ZN11StrategieV36updateEv+0x220>
        {
            actionGoto[i].setGoBack(false);
            actionEtape[i]->setGoBack(false);
        }
        this->enTrainEviterReculant = false;
   14ea0:	68fa      	ldr	r2, [r7, #12]
   14ea2:	f04f 0300 	mov.w	r3, #0	; 0x0
   14ea6:	f882 3044 	strb.w	r3, [r2, #68]
        this->enTrainEviterAvancant = false;
   14eaa:	68fa      	ldr	r2, [r7, #12]
   14eac:	f04f 0300 	mov.w	r3, #0	; 0x0
   14eb0:	f882 3045 	strb.w	r3, [r2, #69]

        if(this->statusStrat==2)//Si on vient d'arriver à une étape intermédiare
   14eb4:	68fb      	ldr	r3, [r7, #12]
   14eb6:	6c1b      	ldr	r3, [r3, #64]
   14eb8:	2b02      	cmp	r3, #2
   14eba:	d103      	bne.n	14ec4 <_ZN11StrategieV36updateEv+0x28c>
        {
            this->updateIntermedaire();
   14ebc:	68f8      	ldr	r0, [r7, #12]
   14ebe:	f7ff fe1b 	bl	14af8 <_ZN11StrategieV318updateIntermedaireEv>
   14ec2:	e144      	b.n	1514e <_ZN11StrategieV36updateEv+0x516>
        }
        else//Sinon, statusStrat==1, et il faut donc choisir un nouvel objectif
        {
            // Si on n'était pas en train d'éviter
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
   14ec4:	68fb      	ldr	r3, [r7, #12]
   14ec6:	f893 3044 	ldrb.w	r3, [r3, #68]
   14eca:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   14ece:	b2db      	uxtb	r3, r3
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d051      	beq.n	14f78 <_ZN11StrategieV36updateEv+0x340>
   14ed4:	68fb      	ldr	r3, [r7, #12]
   14ed6:	f893 3045 	ldrb.w	r3, [r3, #69]
   14eda:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   14ede:	b2db      	uxtb	r3, r3
   14ee0:	2b00      	cmp	r3, #0
   14ee2:	d049      	beq.n	14f78 <_ZN11StrategieV36updateEv+0x340>
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
   14ee4:	68fb      	ldr	r3, [r7, #12]
   14ee6:	6b1a      	ldr	r2, [r3, #48]
   14ee8:	68fb      	ldr	r3, [r7, #12]
   14eea:	699b      	ldr	r3, [r3, #24]
   14eec:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14ef0:	4413      	add	r3, r2
   14ef2:	681b      	ldr	r3, [r3, #0]
   14ef4:	4618      	mov	r0, r3
   14ef6:	f7fb f927 	bl	10148 <_ZN5Etape5finirEv>
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   14efa:	f04f 0300 	mov.w	r3, #0	; 0x0
   14efe:	62bb      	str	r3, [r7, #40]
   14f00:	e01f      	b.n	14f42 <_ZN11StrategieV36updateEv+0x30a>
                {
                    int numeroEtapeLiee = this->tableauEtapes[this->etapeEnCours]->getEtapesLieesParFinirEtape()[etapeLiee];
   14f02:	68fb      	ldr	r3, [r7, #12]
   14f04:	6b1a      	ldr	r2, [r3, #48]
   14f06:	68fb      	ldr	r3, [r7, #12]
   14f08:	699b      	ldr	r3, [r3, #24]
   14f0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14f0e:	4413      	add	r3, r2
   14f10:	681b      	ldr	r3, [r3, #0]
   14f12:	4618      	mov	r0, r3
   14f14:	f7fb f8f2 	bl	100fc <_ZN5Etape27getEtapesLieesParFinirEtapeEv>
   14f18:	4602      	mov	r2, r0
   14f1a:	6abb      	ldr	r3, [r7, #40]
   14f1c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14f20:	4413      	add	r3, r2
   14f22:	681b      	ldr	r3, [r3, #0]
   14f24:	62fb      	str	r3, [r7, #44]
                    this->tableauEtapes[numeroEtapeLiee]->finir();
   14f26:	68fb      	ldr	r3, [r7, #12]
   14f28:	6b1a      	ldr	r2, [r3, #48]
   14f2a:	6afb      	ldr	r3, [r7, #44]
   14f2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14f30:	4413      	add	r3, r2
   14f32:	681b      	ldr	r3, [r3, #0]
   14f34:	4618      	mov	r0, r3
   14f36:	f7fb f907 	bl	10148 <_ZN5Etape5finirEv>
            if(!(enTrainEviterReculant || enTrainEviterAvancant))
            {
                //L'objectif qu'on vient de remplir est maintenant un simple point de passage
                this->tableauEtapes[this->etapeEnCours]->finir();
                //Idem pour les autres étapes correspondant au même objectif
                for(int etapeLiee = 0 ; etapeLiee < this->tableauEtapes[this->etapeEnCours]->getNombreEtapesLieesParFinirEtape() ; etapeLiee++)
   14f3a:	6abb      	ldr	r3, [r7, #40]
   14f3c:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14f40:	62bb      	str	r3, [r7, #40]
   14f42:	68fb      	ldr	r3, [r7, #12]
   14f44:	6b1a      	ldr	r2, [r3, #48]
   14f46:	68fb      	ldr	r3, [r7, #12]
   14f48:	699b      	ldr	r3, [r3, #24]
   14f4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14f4e:	4413      	add	r3, r2
   14f50:	681b      	ldr	r3, [r3, #0]
   14f52:	4618      	mov	r0, r3
   14f54:	f7fb f8ec 	bl	10130 <_ZN5Etape33getNombreEtapesLieesParFinirEtapeEv>
   14f58:	4602      	mov	r2, r0
   14f5a:	6abb      	ldr	r3, [r7, #40]
   14f5c:	429a      	cmp	r2, r3
   14f5e:	bfd4      	ite	le
   14f60:	2300      	movle	r3, #0
   14f62:	2301      	movgt	r3, #1
   14f64:	b2db      	uxtb	r3, r3
   14f66:	2b00      	cmp	r3, #0
   14f68:	d1cb      	bne.n	14f02 <_ZN11StrategieV36updateEv+0x2ca>
                    this->tableauEtapes[numeroEtapeLiee]->finir();
                }

                //Mise à jour du stock

                this->updateStock();
   14f6a:	68fb      	ldr	r3, [r7, #12]
   14f6c:	681b      	ldr	r3, [r3, #0]
   14f6e:	f103 0318 	add.w	r3, r3, #24	; 0x18
   14f72:	681b      	ldr	r3, [r3, #0]
   14f74:	68f8      	ldr	r0, [r7, #12]
   14f76:	4798      	blx	r3

            }


            int score = 0;
   14f78:	f04f 0300 	mov.w	r3, #0	; 0x0
   14f7c:	617b      	str	r3, [r7, #20]
            bool resteDesChosesAFaire = updateScores();
   14f7e:	68f8      	ldr	r0, [r7, #12]
   14f80:	f7ff fd34 	bl	149ec <_ZN11StrategieV312updateScoresEv>
   14f84:	4603      	mov	r3, r0
   14f86:	76fb      	strb	r3, [r7, #27]

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
   14f88:	7efb      	ldrb	r3, [r7, #27]
   14f8a:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   14f8e:	b2db      	uxtb	r3, r3
   14f90:	2b00      	cmp	r3, #0
   14f92:	d03c      	beq.n	1500e <_ZN11StrategieV36updateEv+0x3d6>
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   14f94:	f04f 0300 	mov.w	r3, #0	; 0x0
   14f98:	633b      	str	r3, [r7, #48]
   14f9a:	e00d      	b.n	14fb8 <_ZN11StrategieV36updateEv+0x380>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
   14f9c:	68fb      	ldr	r3, [r7, #12]
   14f9e:	6b5a      	ldr	r2, [r3, #52]
   14fa0:	6b3b      	ldr	r3, [r7, #48]
   14fa2:	ea4f 0383 	mov.w	r3, r3, lsl #2
   14fa6:	4413      	add	r3, r2
   14fa8:	681b      	ldr	r3, [r3, #0]
   14faa:	4618      	mov	r0, r3
   14fac:	f7fb f872 	bl	10094 <_ZN5Etape13oublieRobotVuEv>

            // S'il n'y a plus d'objectif dans tout le graphe, on se replit vers une position où on ne bloque pas l'adversaire.
            // Sinon, il y a risque de prendre un avertissement pour anti-jeu (évité de peu pour le premier match de Krabi 2014)
            if(!resteDesChosesAFaire)
            {
                for(int i = 0 ; i < this->nombreEtapes ; i++)
   14fb0:	6b3b      	ldr	r3, [r7, #48]
   14fb2:	f103 0301 	add.w	r3, r3, #1	; 0x1
   14fb6:	633b      	str	r3, [r7, #48]
   14fb8:	68fb      	ldr	r3, [r7, #12]
   14fba:	69da      	ldr	r2, [r3, #28]
   14fbc:	6b3b      	ldr	r3, [r7, #48]
   14fbe:	429a      	cmp	r2, r3
   14fc0:	dcec      	bgt.n	14f9c <_ZN11StrategieV36updateEv+0x364>
                {
                    this->tableauEtapesTotal[i]->oublieRobotVu();
                }
                resteDesChosesAFaire = updateScores();
   14fc2:	68f8      	ldr	r0, [r7, #12]
   14fc4:	f7ff fd12 	bl	149ec <_ZN11StrategieV312updateScoresEv>
   14fc8:	4603      	mov	r3, r0
   14fca:	76fb      	strb	r3, [r7, #27]

                //S'il n'y a VRAIMENT plus rien à faire
                if(!resteDesChosesAFaire)
   14fcc:	7efb      	ldrb	r3, [r7, #27]
   14fce:	f083 0301 	eor.w	r3, r3, #1	; 0x1
   14fd2:	b2db      	uxtb	r3, r3
   14fd4:	2b00      	cmp	r3, #0
   14fd6:	d01a      	beq.n	1500e <_ZN11StrategieV36updateEv+0x3d6>
                {
                    //Si on est au garage, on s'arrête
                    if(this->etapeEnCours == this->numeroEtapeGarage)
   14fd8:	68fb      	ldr	r3, [r7, #12]
   14fda:	699a      	ldr	r2, [r3, #24]
   14fdc:	68fb      	ldr	r3, [r7, #12]
   14fde:	6a1b      	ldr	r3, [r3, #32]
   14fe0:	429a      	cmp	r2, r3
   14fe2:	d107      	bne.n	14ff4 <_ZN11StrategieV36updateEv+0x3bc>
                    {
                        this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   14fe4:	68fb      	ldr	r3, [r7, #12]
   14fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14fea:	641a      	str	r2, [r3, #64]
                        return this->statusStrat;
   14fec:	68fb      	ldr	r3, [r7, #12]
   14fee:	6c1b      	ldr	r3, [r3, #64]
   14ff0:	607b      	str	r3, [r7, #4]
   14ff2:	e0af      	b.n	15154 <_ZN11StrategieV36updateEv+0x51c>
                    }
                    else
                    {
                        //Sinon on y va
                        this->tableauEtapes[this->numeroEtapeGarage]->setScore(1000);
   14ff4:	68fb      	ldr	r3, [r7, #12]
   14ff6:	6b1a      	ldr	r2, [r3, #48]
   14ff8:	68fb      	ldr	r3, [r7, #12]
   14ffa:	6a1b      	ldr	r3, [r3, #32]
   14ffc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15000:	4413      	add	r3, r2
   15002:	681b      	ldr	r3, [r3, #0]
   15004:	4618      	mov	r0, r3
   15006:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1500a:	f7fb f8bb 	bl	10184 <_ZN5Etape8setScoreEi>
                }

            }

            //On recalcul les distances par rapport à l'étape où l'on vient d'arriver
            dijkstra->setEtapeCourante(this->etapeEnCours);
   1500e:	68fb      	ldr	r3, [r7, #12]
   15010:	6ada      	ldr	r2, [r3, #44]
   15012:	68fb      	ldr	r3, [r7, #12]
   15014:	699b      	ldr	r3, [r3, #24]
   15016:	4610      	mov	r0, r2
   15018:	4619      	mov	r1, r3
   1501a:	f7fa fb33 	bl	f684 <_ZN8Dijkstra16setEtapeCouranteEi>
            if(dijkstra->run() != 0)
   1501e:	68fb      	ldr	r3, [r7, #12]
   15020:	6adb      	ldr	r3, [r3, #44]
   15022:	4618      	mov	r0, r3
   15024:	f7fa fe30 	bl	fc88 <_ZN8Dijkstra3runEv>
   15028:	4603      	mov	r3, r0
   1502a:	2b00      	cmp	r3, #0
   1502c:	bf0c      	ite	eq
   1502e:	2300      	moveq	r3, #0
   15030:	2301      	movne	r3, #1
   15032:	b2db      	uxtb	r3, r3
   15034:	2b00      	cmp	r3, #0
   15036:	d015      	beq.n	15064 <_ZN11StrategieV36updateEv+0x42c>
            {
                // Si run renvoit autre chose que 0, c'est que l'étape en cours a changée.
                // Cela arrive pour débloquer le robot
                //Etape* ancienneEtape = this->tableauEtapes[this->etapeEnCours];
                //this->etapeEnCours = this->tableauEtapes[this->etapeEnCours]->getParent()->getNumero();
                this->actionEtape[this->etapeEnCours]->reset();
   15038:	68fb      	ldr	r3, [r7, #12]
   1503a:	6a5a      	ldr	r2, [r3, #36]
   1503c:	68fb      	ldr	r3, [r7, #12]
   1503e:	699b      	ldr	r3, [r3, #24]
   15040:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15044:	4413      	add	r3, r2
   15046:	681b      	ldr	r3, [r3, #0]
   15048:	681b      	ldr	r3, [r3, #0]
   1504a:	f103 0314 	add.w	r3, r3, #20	; 0x14
   1504e:	6819      	ldr	r1, [r3, #0]
   15050:	68fb      	ldr	r3, [r7, #12]
   15052:	6a5a      	ldr	r2, [r3, #36]
   15054:	68fb      	ldr	r3, [r7, #12]
   15056:	699b      	ldr	r3, [r3, #24]
   15058:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1505c:	4413      	add	r3, r2
   1505e:	681b      	ldr	r3, [r3, #0]
   15060:	4618      	mov	r0, r3
   15062:	4788      	blx	r1
            }

            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
   15064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15068:	61fb      	str	r3, [r7, #28]
            int scoreMaxi = -100000;
   1506a:	4b3d      	ldr	r3, [pc, #244]	(15160 <_ZN11StrategieV36updateEv+0x528>)
   1506c:	623b      	str	r3, [r7, #32]

            int scoreTypeEtape = 0;
   1506e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15072:	627b      	str	r3, [r7, #36]
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   15074:	f04f 0300 	mov.w	r3, #0	; 0x0
   15078:	637b      	str	r3, [r7, #52]
   1507a:	e044      	b.n	15106 <_ZN11StrategieV36updateEv+0x4ce>
            {
                scoreTypeEtape = this->tableauEtapes[i]->getScore();
   1507c:	68fb      	ldr	r3, [r7, #12]
   1507e:	6b1a      	ldr	r2, [r3, #48]
   15080:	6b7b      	ldr	r3, [r7, #52]
   15082:	ea4f 0383 	mov.w	r3, r3, lsl #2
   15086:	4413      	add	r3, r2
   15088:	681b      	ldr	r3, [r3, #0]
   1508a:	4618      	mov	r0, r3
   1508c:	f7fb f888 	bl	101a0 <_ZN5Etape8getScoreEv>
   15090:	4603      	mov	r3, r0
   15092:	627b      	str	r3, [r7, #36]
        //        score = modificateurTemporel*(10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
                score = (10000-this->tableauEtapes[i]->getDistance() + scoreTypeEtape);
   15094:	68fb      	ldr	r3, [r7, #12]
   15096:	6b1a      	ldr	r2, [r3, #48]
   15098:	6b7b      	ldr	r3, [r7, #52]
   1509a:	ea4f 0383 	mov.w	r3, r3, lsl #2
   1509e:	4413      	add	r3, r2
   150a0:	681b      	ldr	r3, [r3, #0]
   150a2:	4618      	mov	r0, r3
   150a4:	f7fa ff5a 	bl	ff5c <_ZN5Etape11getDistanceEv>
   150a8:	4603      	mov	r3, r0
   150aa:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
   150ae:	f103 0310 	add.w	r3, r3, #16	; 0x10
   150b2:	6a7a      	ldr	r2, [r7, #36]
   150b4:	4413      	add	r3, r2
   150b6:	617b      	str	r3, [r7, #20]
                if((scoreMaxi < score) && scoreTypeEtape && (this->tableauEtapes[i]->getDistance() != -1))
   150b8:	6a3a      	ldr	r2, [r7, #32]
   150ba:	697b      	ldr	r3, [r7, #20]
   150bc:	429a      	cmp	r2, r3
   150be:	da14      	bge.n	150ea <_ZN11StrategieV36updateEv+0x4b2>
   150c0:	6a7b      	ldr	r3, [r7, #36]
   150c2:	2b00      	cmp	r3, #0
   150c4:	d011      	beq.n	150ea <_ZN11StrategieV36updateEv+0x4b2>
   150c6:	68fb      	ldr	r3, [r7, #12]
   150c8:	6b1a      	ldr	r2, [r3, #48]
   150ca:	6b7b      	ldr	r3, [r7, #52]
   150cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
   150d0:	4413      	add	r3, r2
   150d2:	681b      	ldr	r3, [r3, #0]
   150d4:	4618      	mov	r0, r3
   150d6:	f7fa ff41 	bl	ff5c <_ZN5Etape11getDistanceEv>
   150da:	4603      	mov	r3, r0
   150dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   150e0:	d003      	beq.n	150ea <_ZN11StrategieV36updateEv+0x4b2>
   150e2:	f04f 0301 	mov.w	r3, #1	; 0x1
   150e6:	60bb      	str	r3, [r7, #8]
   150e8:	e002      	b.n	150f0 <_ZN11StrategieV36updateEv+0x4b8>
   150ea:	f04f 0300 	mov.w	r3, #0	; 0x0
   150ee:	60bb      	str	r3, [r7, #8]
   150f0:	68bb      	ldr	r3, [r7, #8]
   150f2:	2b00      	cmp	r3, #0
   150f4:	d003      	beq.n	150fe <_ZN11StrategieV36updateEv+0x4c6>
                {
                    scoreMaxi = score;
   150f6:	697b      	ldr	r3, [r7, #20]
   150f8:	623b      	str	r3, [r7, #32]
                    meilleurEtape = i;
   150fa:	6b7b      	ldr	r3, [r7, #52]
   150fc:	61fb      	str	r3, [r7, #28]
            //On sélectionne l'objectif le plus prometteur : pas trop loin et qui rapporte
            int meilleurEtape = -1;
            int scoreMaxi = -100000;

            int scoreTypeEtape = 0;
            for(int i = 0 ; i < this->nombreEtapes ; i++)
   150fe:	6b7b      	ldr	r3, [r7, #52]
   15100:	f103 0301 	add.w	r3, r3, #1	; 0x1
   15104:	637b      	str	r3, [r7, #52]
   15106:	68fb      	ldr	r3, [r7, #12]
   15108:	69da      	ldr	r2, [r3, #28]
   1510a:	6b7b      	ldr	r3, [r7, #52]
   1510c:	429a      	cmp	r2, r3
   1510e:	dcb5      	bgt.n	1507c <_ZN11StrategieV36updateEv+0x444>
                    scoreMaxi = score;
                    meilleurEtape = i;
                }
            }

            if(meilleurEtape==-1)
   15110:	69fb      	ldr	r3, [r7, #28]
   15112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15116:	d110      	bne.n	1513a <_ZN11StrategieV36updateEv+0x502>
            {
                if(this->etapeEnCours == this->numeroEtapeGarage)
   15118:	68fb      	ldr	r3, [r7, #12]
   1511a:	699a      	ldr	r2, [r3, #24]
   1511c:	68fb      	ldr	r3, [r7, #12]
   1511e:	6a1b      	ldr	r3, [r3, #32]
   15120:	429a      	cmp	r2, r3
   15122:	d107      	bne.n	15134 <_ZN11StrategieV36updateEv+0x4fc>
                {
                    this->statusStrat=-1;//Plus rien à faire, on passe à l'action suivante de stratégieV2
   15124:	68fb      	ldr	r3, [r7, #12]
   15126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1512a:	641a      	str	r2, [r3, #64]
                    return this->statusStrat;
   1512c:	68fb      	ldr	r3, [r7, #12]
   1512e:	6c1b      	ldr	r3, [r3, #64]
   15130:	607b      	str	r3, [r7, #4]
   15132:	e00f      	b.n	15154 <_ZN11StrategieV36updateEv+0x51c>
                }
                else
                {
                    meilleurEtape = this->numeroEtapeGarage;
   15134:	68fb      	ldr	r3, [r7, #12]
   15136:	6a1b      	ldr	r3, [r3, #32]
   15138:	61fb      	str	r3, [r7, #28]
            /*if(this->tableauEtapes[meilleurEtape]->getEtapeType()==Etape::DEPOSE_FRUIT)
            {
                this->nombreFruitsTransporte++;
            }*/

            this->goal = meilleurEtape;
   1513a:	68fa      	ldr	r2, [r7, #12]
   1513c:	69fb      	ldr	r3, [r7, #28]
   1513e:	63d3      	str	r3, [r2, #60]
            this->statusStrat = 2;//Jusqu'à preuve du contraire, la prochaine étape est une étape intermédiaire
   15140:	68fa      	ldr	r2, [r7, #12]
   15142:	f04f 0302 	mov.w	r3, #2	; 0x2
   15146:	6413      	str	r3, [r2, #64]
            this->updateIntermedaire();//On y va
   15148:	68f8      	ldr	r0, [r7, #12]
   1514a:	f7ff fcd5 	bl	14af8 <_ZN11StrategieV318updateIntermedaireEv>
        }
    }
    return this->statusStrat;
   1514e:	68fb      	ldr	r3, [r7, #12]
   15150:	6c1b      	ldr	r3, [r3, #64]
   15152:	607b      	str	r3, [r7, #4]
   15154:	687b      	ldr	r3, [r7, #4]
}
   15156:	4618      	mov	r0, r3
   15158:	f107 0738 	add.w	r7, r7, #56	; 0x38
   1515c:	46bd      	mov	sp, r7
   1515e:	bd80      	pop	{r7, pc}
   15160:	fffe7960 	.word	0xfffe7960

00015164 <_ZN11StrategieV3C1Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   15164:	b590      	push	{r4, r7, lr}
   15166:	b085      	sub	sp, #20
   15168:	af00      	add	r7, sp, #0
   1516a:	6078      	str	r0, [r7, #4]
   1516c:	460b      	mov	r3, r1
   1516e:	70fb      	strb	r3, [r7, #3]
   15170:	687c      	ldr	r4, [r7, #4]
   15172:	f107 0308 	add.w	r3, r7, #8	; 0x8
   15176:	4618      	mov	r0, r3
   15178:	4917      	ldr	r1, [pc, #92]	(151d8 <_ZN11StrategieV3C1Eb+0x74>)
   1517a:	4a17      	ldr	r2, [pc, #92]	(151d8 <_ZN11StrategieV3C1Eb+0x74>)
   1517c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15180:	f7f9 fa50 	bl	e624 <_ZN8PositionC1Effb>
   15184:	4620      	mov	r0, r4
   15186:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1518a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1518e:	f7fd ffe3 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
   15192:	687a      	ldr	r2, [r7, #4]
   15194:	4b11      	ldr	r3, [pc, #68]	(151dc <_ZN11StrategieV3C1Eb+0x78>)
   15196:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   15198:	687a      	ldr	r2, [r7, #4]
   1519a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1519e:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   151a2:	687a      	ldr	r2, [r7, #4]
   151a4:	f04f 0300 	mov.w	r3, #0	; 0x0
   151a8:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   151aa:	687a      	ldr	r2, [r7, #4]
   151ac:	f04f 0301 	mov.w	r3, #1	; 0x1
   151b0:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   151b2:	687a      	ldr	r2, [r7, #4]
   151b4:	f04f 0300 	mov.w	r3, #0	; 0x0
   151b8:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   151bc:	687a      	ldr	r2, [r7, #4]
   151be:	f04f 0300 	mov.w	r3, #0	; 0x0
   151c2:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   151c6:	687a      	ldr	r2, [r7, #4]
   151c8:	4b05      	ldr	r3, [pc, #20]	(151e0 <_ZN11StrategieV3C1Eb+0x7c>)
   151ca:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   151cc:	687b      	ldr	r3, [r7, #4]
   151ce:	4618      	mov	r0, r3
   151d0:	f107 0714 	add.w	r7, r7, #20	; 0x14
   151d4:	46bd      	mov	sp, r7
   151d6:	bd90      	pop	{r4, r7, pc}
   151d8:	00000000 	.word	0x00000000
   151dc:	0001fcc0 	.word	0x0001fcc0
   151e0:	00015f90 	.word	0x00015f90

000151e4 <_ZN11StrategieV3C2Eb>:
#ifndef ROBOTHW
    #include <QDebug>
#endif
//#include <iostream>

StrategieV3::StrategieV3(bool isBlue) : MediumLevelAction()
   151e4:	b590      	push	{r4, r7, lr}
   151e6:	b085      	sub	sp, #20
   151e8:	af00      	add	r7, sp, #0
   151ea:	6078      	str	r0, [r7, #4]
   151ec:	460b      	mov	r3, r1
   151ee:	70fb      	strb	r3, [r7, #3]
   151f0:	687c      	ldr	r4, [r7, #4]
   151f2:	f107 0308 	add.w	r3, r7, #8	; 0x8
   151f6:	4618      	mov	r0, r3
   151f8:	4917      	ldr	r1, [pc, #92]	(15258 <_ZN11StrategieV3C2Eb+0x74>)
   151fa:	4a17      	ldr	r2, [pc, #92]	(15258 <_ZN11StrategieV3C2Eb+0x74>)
   151fc:	f04f 0301 	mov.w	r3, #1	; 0x1
   15200:	f7f9 fa10 	bl	e624 <_ZN8PositionC1Effb>
   15204:	4620      	mov	r0, r4
   15206:	f107 0308 	add.w	r3, r7, #8	; 0x8
   1520a:	e893 0006 	ldmia.w	r3, {r1, r2}
   1520e:	f7fd ffa3 	bl	13158 <_ZN17MediumLevelActionC2E8Position>
   15212:	687a      	ldr	r2, [r7, #4]
   15214:	4b11      	ldr	r3, [pc, #68]	(1525c <_ZN11StrategieV3C2Eb+0x78>)
   15216:	6013      	str	r3, [r2, #0]
{
    this->avoiding = false;
   15218:	687a      	ldr	r2, [r7, #4]
   1521a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1521e:	f882 3038 	strb.w	r3, [r2, #56]
    this->etapeEnCours = 0;
   15222:	687a      	ldr	r2, [r7, #4]
   15224:	f04f 0300 	mov.w	r3, #0	; 0x0
   15228:	6193      	str	r3, [r2, #24]
    this->statusStrat=1;
   1522a:	687a      	ldr	r2, [r7, #4]
   1522c:	f04f 0301 	mov.w	r3, #1	; 0x1
   15230:	6413      	str	r3, [r2, #64]
    this->enTrainEviterReculant = false;
   15232:	687a      	ldr	r2, [r7, #4]
   15234:	f04f 0300 	mov.w	r3, #0	; 0x0
   15238:	f882 3044 	strb.w	r3, [r2, #68]
    this->enTrainEviterAvancant = false;
   1523c:	687a      	ldr	r2, [r7, #4]
   1523e:	f04f 0300 	mov.w	r3, #0	; 0x0
   15242:	f882 3045 	strb.w	r3, [r2, #69]
    this->millisecondesRestantes = 90 * 1000;
   15246:	687a      	ldr	r2, [r7, #4]
   15248:	4b05      	ldr	r3, [pc, #20]	(15260 <_ZN11StrategieV3C2Eb+0x7c>)
   1524a:	6153      	str	r3, [r2, #20]
    this->tableauEtapes[30]->setDistances(tableauDistances30);
#endif
    */


}
   1524c:	687b      	ldr	r3, [r7, #4]
   1524e:	4618      	mov	r0, r3
   15250:	f107 0714 	add.w	r7, r7, #20	; 0x14
   15254:	46bd      	mov	sp, r7
   15256:	bd90      	pop	{r4, r7, pc}
   15258:	00000000 	.word	0x00000000
   1525c:	0001fcc0 	.word	0x0001fcc0
   15260:	00015f90 	.word	0x00015f90

00015264 <_exit>:

void _exit(int status)
{
    //Endless loop
    for(;;);
}
   15264:	b480      	push	{r7}
   15266:	b083      	sub	sp, #12
   15268:	af00      	add	r7, sp, #0
   1526a:	6078      	str	r0, [r7, #4]
   1526c:	e7fe      	b.n	1526c <_exit+0x8>
   1526e:	46c0      	nop			(mov r8, r8)

00015270 <_close>:

int _close(int file)
{
   15270:	b480      	push	{r7}
   15272:	b083      	sub	sp, #12
   15274:	af00      	add	r7, sp, #0
   15276:	6078      	str	r0, [r7, #4]
    return -1;
   15278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1527c:	4618      	mov	r0, r3
   1527e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15282:	46bd      	mov	sp, r7
   15284:	bc80      	pop	{r7}
   15286:	4770      	bx	lr

00015288 <_execve>:

char* __env[1] = {0};
char** environ = __env;

int _execve(char* name, char** argv, char** env)
{
   15288:	b480      	push	{r7}
   1528a:	b085      	sub	sp, #20
   1528c:	af00      	add	r7, sp, #0
   1528e:	60f8      	str	r0, [r7, #12]
   15290:	60b9      	str	r1, [r7, #8]
   15292:	607a      	str	r2, [r7, #4]
    errno = ENOMEM;
   15294:	4a05      	ldr	r2, [pc, #20]	(152ac <_execve+0x24>)
   15296:	f04f 030c 	mov.w	r3, #12	; 0xc
   1529a:	6013      	str	r3, [r2, #0]
    return -1;
   1529c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   152a0:	4618      	mov	r0, r3
   152a2:	f107 0714 	add.w	r7, r7, #20	; 0x14
   152a6:	46bd      	mov	sp, r7
   152a8:	bc80      	pop	{r7}
   152aa:	4770      	bx	lr
   152ac:	20000678 	.word	0x20000678

000152b0 <_fork>:

int _fork(void)
{
   152b0:	b480      	push	{r7}
   152b2:	af00      	add	r7, sp, #0
    errno = EAGAIN;
   152b4:	4a04      	ldr	r2, [pc, #16]	(152c8 <_fork+0x18>)
   152b6:	f04f 030b 	mov.w	r3, #11	; 0xb
   152ba:	6013      	str	r3, [r2, #0]
    return -1;
   152bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   152c0:	4618      	mov	r0, r3
   152c2:	46bd      	mov	sp, r7
   152c4:	bc80      	pop	{r7}
   152c6:	4770      	bx	lr
   152c8:	20000678 	.word	0x20000678

000152cc <_fstat>:

int _fstat(int file, struct stat* st)
{
   152cc:	b480      	push	{r7}
   152ce:	b083      	sub	sp, #12
   152d0:	af00      	add	r7, sp, #0
   152d2:	6078      	str	r0, [r7, #4]
   152d4:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
   152d6:	683a      	ldr	r2, [r7, #0]
   152d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   152dc:	6053      	str	r3, [r2, #4]
    return 0;
   152de:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   152e2:	4618      	mov	r0, r3
   152e4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   152e8:	46bd      	mov	sp, r7
   152ea:	bc80      	pop	{r7}
   152ec:	4770      	bx	lr
   152ee:	46c0      	nop			(mov r8, r8)

000152f0 <_getpid>:

int _getpid(void)
{
   152f0:	b480      	push	{r7}
   152f2:	af00      	add	r7, sp, #0
    return 1;
   152f4:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   152f8:	4618      	mov	r0, r3
   152fa:	46bd      	mov	sp, r7
   152fc:	bc80      	pop	{r7}
   152fe:	4770      	bx	lr

00015300 <_isatty>:

int _isatty(int file)
{
   15300:	b480      	push	{r7}
   15302:	b083      	sub	sp, #12
   15304:	af00      	add	r7, sp, #0
   15306:	6078      	str	r0, [r7, #4]
    return 1;
   15308:	f04f 0301 	mov.w	r3, #1	; 0x1
}
   1530c:	4618      	mov	r0, r3
   1530e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15312:	46bd      	mov	sp, r7
   15314:	bc80      	pop	{r7}
   15316:	4770      	bx	lr

00015318 <_kill>:

int _kill(int pid, int sig)
{
   15318:	b480      	push	{r7}
   1531a:	b083      	sub	sp, #12
   1531c:	af00      	add	r7, sp, #0
   1531e:	6078      	str	r0, [r7, #4]
   15320:	6039      	str	r1, [r7, #0]
    errno = EINVAL;
   15322:	4a06      	ldr	r2, [pc, #24]	(1533c <_kill+0x24>)
   15324:	f04f 0316 	mov.w	r3, #22	; 0x16
   15328:	6013      	str	r3, [r2, #0]
    return -1;
   1532a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1532e:	4618      	mov	r0, r3
   15330:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15334:	46bd      	mov	sp, r7
   15336:	bc80      	pop	{r7}
   15338:	4770      	bx	lr
   1533a:	46c0      	nop			(mov r8, r8)
   1533c:	20000678 	.word	0x20000678

00015340 <_link>:

int _link(char* old, char* new)
{
   15340:	b480      	push	{r7}
   15342:	b083      	sub	sp, #12
   15344:	af00      	add	r7, sp, #0
   15346:	6078      	str	r0, [r7, #4]
   15348:	6039      	str	r1, [r7, #0]
    errno = EMLINK;
   1534a:	4a06      	ldr	r2, [pc, #24]	(15364 <_link+0x24>)
   1534c:	f04f 031f 	mov.w	r3, #31	; 0x1f
   15350:	6013      	str	r3, [r2, #0]
    return -1;
   15352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   15356:	4618      	mov	r0, r3
   15358:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1535c:	46bd      	mov	sp, r7
   1535e:	bc80      	pop	{r7}
   15360:	4770      	bx	lr
   15362:	46c0      	nop			(mov r8, r8)
   15364:	20000678 	.word	0x20000678

00015368 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
   15368:	b480      	push	{r7}
   1536a:	b085      	sub	sp, #20
   1536c:	af00      	add	r7, sp, #0
   1536e:	60f8      	str	r0, [r7, #12]
   15370:	60b9      	str	r1, [r7, #8]
   15372:	607a      	str	r2, [r7, #4]
    return 0;
   15374:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   15378:	4618      	mov	r0, r3
   1537a:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1537e:	46bd      	mov	sp, r7
   15380:	bc80      	pop	{r7}
   15382:	4770      	bx	lr

00015384 <_open>:

int _open(const char* name, int flags, int mode)
{
   15384:	b480      	push	{r7}
   15386:	b085      	sub	sp, #20
   15388:	af00      	add	r7, sp, #0
   1538a:	60f8      	str	r0, [r7, #12]
   1538c:	60b9      	str	r1, [r7, #8]
   1538e:	607a      	str	r2, [r7, #4]
    return -1;
   15390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   15394:	4618      	mov	r0, r3
   15396:	f107 0714 	add.w	r7, r7, #20	; 0x14
   1539a:	46bd      	mov	sp, r7
   1539c:	bc80      	pop	{r7}
   1539e:	4770      	bx	lr

000153a0 <_read>:

int _read(int file, char* ptr, int len)
{
   153a0:	b480      	push	{r7}
   153a2:	b085      	sub	sp, #20
   153a4:	af00      	add	r7, sp, #0
   153a6:	60f8      	str	r0, [r7, #12]
   153a8:	60b9      	str	r1, [r7, #8]
   153aa:	607a      	str	r2, [r7, #4]
    return 0;
   153ac:	f04f 0300 	mov.w	r3, #0	; 0x0
}
   153b0:	4618      	mov	r0, r3
   153b2:	f107 0714 	add.w	r7, r7, #20	; 0x14
   153b6:	46bd      	mov	sp, r7
   153b8:	bc80      	pop	{r7}
   153ba:	4770      	bx	lr

000153bc <_sbrk>:

caddr_t _sbrk(int incr)
{
   153bc:	b580      	push	{r7, lr}
   153be:	b084      	sub	sp, #16
   153c0:	af00      	add	r7, sp, #0
   153c2:	6078      	str	r0, [r7, #4]
    extern char _end;
    static char* heap_end;
    char* prev_heap_end;
    char* stack_ptr = (char*)0xffffffff;
   153c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   153c8:	60fb      	str	r3, [r7, #12]

    if(heap_end == 0)
   153ca:	4b12      	ldr	r3, [pc, #72]	(15414 <_sbrk+0x58>)
   153cc:	681b      	ldr	r3, [r3, #0]
   153ce:	2b00      	cmp	r3, #0
   153d0:	d102      	bne.n	153d8 <_sbrk+0x1c>
        heap_end = &_end;
   153d2:	4a10      	ldr	r2, [pc, #64]	(15414 <_sbrk+0x58>)
   153d4:	4b10      	ldr	r3, [pc, #64]	(15418 <_sbrk+0x5c>)
   153d6:	6013      	str	r3, [r2, #0]
    prev_heap_end = heap_end;
   153d8:	4b0e      	ldr	r3, [pc, #56]	(15414 <_sbrk+0x58>)
   153da:	681b      	ldr	r3, [r3, #0]
   153dc:	60bb      	str	r3, [r7, #8]
    if( heap_end + incr > stack_ptr)
   153de:	4b0d      	ldr	r3, [pc, #52]	(15414 <_sbrk+0x58>)
   153e0:	681a      	ldr	r2, [r3, #0]
   153e2:	687b      	ldr	r3, [r7, #4]
   153e4:	441a      	add	r2, r3
   153e6:	68fb      	ldr	r3, [r7, #12]
   153e8:	429a      	cmp	r2, r3
   153ea:	d906      	bls.n	153fa <_sbrk+0x3e>
    {
        write(1, "Heap and stack collision\n", 25);
   153ec:	f04f 0001 	mov.w	r0, #1	; 0x1
   153f0:	490a      	ldr	r1, [pc, #40]	(1541c <_sbrk+0x60>)
   153f2:	f04f 0219 	mov.w	r2, #25	; 0x19
   153f6:	f009 fcf3 	bl	1ede0 <write>
      //  abort();
    }

    heap_end += incr;
   153fa:	4b06      	ldr	r3, [pc, #24]	(15414 <_sbrk+0x58>)
   153fc:	681a      	ldr	r2, [r3, #0]
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	441a      	add	r2, r3
   15402:	4b04      	ldr	r3, [pc, #16]	(15414 <_sbrk+0x58>)
   15404:	601a      	str	r2, [r3, #0]
    return (caddr_t)prev_heap_end;
   15406:	68bb      	ldr	r3, [r7, #8]
}
   15408:	4618      	mov	r0, r3
   1540a:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1540e:	46bd      	mov	sp, r7
   15410:	bd80      	pop	{r7, pc}
   15412:	46c0      	nop			(mov r8, r8)
   15414:	20000674 	.word	0x20000674
   15418:	2000067c 	.word	0x2000067c
   1541c:	0001fce0 	.word	0x0001fce0

00015420 <_times>:

typedef struct tms tms;

int _times(tms* buf)
{
   15420:	b480      	push	{r7}
   15422:	b083      	sub	sp, #12
   15424:	af00      	add	r7, sp, #0
   15426:	6078      	str	r0, [r7, #4]
    return -1;
   15428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1542c:	4618      	mov	r0, r3
   1542e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15432:	46bd      	mov	sp, r7
   15434:	bc80      	pop	{r7}
   15436:	4770      	bx	lr

00015438 <_unlink>:

int _unlink(char* name)
{
   15438:	b480      	push	{r7}
   1543a:	b083      	sub	sp, #12
   1543c:	af00      	add	r7, sp, #0
   1543e:	6078      	str	r0, [r7, #4]
    errno = ENOENT;
   15440:	4a05      	ldr	r2, [pc, #20]	(15458 <_unlink+0x20>)
   15442:	f04f 0302 	mov.w	r3, #2	; 0x2
   15446:	6013      	str	r3, [r2, #0]
    return -1;
   15448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1544c:	4618      	mov	r0, r3
   1544e:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15452:	46bd      	mov	sp, r7
   15454:	bc80      	pop	{r7}
   15456:	4770      	bx	lr
   15458:	20000678 	.word	0x20000678

0001545c <_wait>:

int _wait(int* status)
{
   1545c:	b480      	push	{r7}
   1545e:	b083      	sub	sp, #12
   15460:	af00      	add	r7, sp, #0
   15462:	6078      	str	r0, [r7, #4]
    errno = ECHILD;
   15464:	4a05      	ldr	r2, [pc, #20]	(1547c <_wait+0x20>)
   15466:	f04f 030a 	mov.w	r3, #10	; 0xa
   1546a:	6013      	str	r3, [r2, #0]
    return -1;
   1546c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   15470:	4618      	mov	r0, r3
   15472:	f107 070c 	add.w	r7, r7, #12	; 0xc
   15476:	46bd      	mov	sp, r7
   15478:	bc80      	pop	{r7}
   1547a:	4770      	bx	lr
   1547c:	20000678 	.word	0x20000678

00015480 <_write>:

int _write(int file, char* ptr, int len)
{
   15480:	b480      	push	{r7}
   15482:	b085      	sub	sp, #20
   15484:	af00      	add	r7, sp, #0
   15486:	60f8      	str	r0, [r7, #12]
   15488:	60b9      	str	r1, [r7, #8]
   1548a:	607a      	str	r2, [r7, #4]
    return len;
   1548c:	687b      	ldr	r3, [r7, #4]
}
   1548e:	4618      	mov	r0, r3
   15490:	f107 0714 	add.w	r7, r7, #20	; 0x14
   15494:	46bd      	mov	sp, r7
   15496:	bc80      	pop	{r7}
   15498:	4770      	bx	lr
   1549a:	46c0      	nop			(mov r8, r8)

0001549c <__cxa_end_cleanup>:
   1549c:	b41e      	push	{r1, r2, r3, r4}
   1549e:	f005 fd17 	bl	1aed0 <__gnu_end_cleanup>
   154a2:	bc1e      	pop	{r1, r2, r3, r4}
   154a4:	f004 fbd4 	bl	19c50 <_Unwind_Resume>

000154a8 <d_make_comp>:
   154a8:	b470      	push	{r4, r5, r6}
   154aa:	461d      	mov	r5, r3
   154ac:	1e4b      	subs	r3, r1, #1
   154ae:	460e      	mov	r6, r1
   154b0:	4614      	mov	r4, r2
   154b2:	2b34      	cmp	r3, #52
   154b4:	d821      	bhi.n	154fa <d_make_comp+0x52>
   154b6:	e8df f003 	tbb	[pc, r3]
   154ba:	3232      	.short	0x3232
   154bc:	20203232 	.word	0x20203232
   154c0:	32414120 	.word	0x32414120
   154c4:	41414141 	.word	0x41414141
   154c8:	41414141 	.word	0x41414141
   154cc:	1c204141 	.word	0x1c204141
   154d0:	1c1c1c1c 	.word	0x1c1c1c1c
   154d4:	4141321c 	.word	0x4141321c
   154d8:	20414141 	.word	0x20414141
   154dc:	321b1c41 	.word	0x321b1c41
   154e0:	20204141 	.word	0x20204141
   154e4:	32323241 	.word	0x32323241
   154e8:	32323232 	.word	0x32323232
   154ec:	00324132 	.word	0x00324132
   154f0:	b11d      	cbz	r5, 154fa <d_make_comp+0x52>
   154f2:	6941      	ldr	r1, [r0, #20]
   154f4:	6983      	ldr	r3, [r0, #24]
   154f6:	4299      	cmp	r1, r3
   154f8:	db02      	blt.n	15500 <d_make_comp+0x58>
   154fa:	2000      	movs	r0, #0
   154fc:	bc70      	pop	{r4, r5, r6}
   154fe:	4770      	bx	lr
   15500:	008b      	lsls	r3, r1, #2
   15502:	010a      	lsls	r2, r1, #4
   15504:	f8d0 c010 	ldr.w	ip, [r0, #16]
   15508:	1ad2      	subs	r2, r2, r3
   1550a:	1c4b      	adds	r3, r1, #1
   1550c:	6143      	str	r3, [r0, #20]
   1550e:	eb1c 0002 	adds.w	r0, ip, r2
   15512:	bf1e      	ittt	ne
   15514:	f80c 6002 	strbne.w	r6, [ip, r2]
   15518:	6044      	strne	r4, [r0, #4]
   1551a:	6085      	strne	r5, [r0, #8]
   1551c:	e7ee      	b.n	154fc <d_make_comp+0x54>
   1551e:	f1d5 0301 	rsbs	r3, r5, #1	; 0x1
   15522:	bf38      	it	cc
   15524:	2300      	movcc	r3, #0
   15526:	2c00      	cmp	r4, #0
   15528:	bf08      	it	eq
   1552a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1552e:	2b00      	cmp	r3, #0
   15530:	d1e3      	bne.n	154fa <d_make_comp+0x52>
   15532:	6941      	ldr	r1, [r0, #20]
   15534:	6983      	ldr	r3, [r0, #24]
   15536:	4299      	cmp	r1, r3
   15538:	dadf      	bge.n	154fa <d_make_comp+0x52>
   1553a:	e7e1      	b.n	15500 <d_make_comp+0x58>
   1553c:	2c00      	cmp	r4, #0
   1553e:	d0dc      	beq.n	154fa <d_make_comp+0x52>
   15540:	6941      	ldr	r1, [r0, #20]
   15542:	6983      	ldr	r3, [r0, #24]
   15544:	4299      	cmp	r1, r3
   15546:	dad8      	bge.n	154fa <d_make_comp+0x52>
   15548:	e7da      	b.n	15500 <d_make_comp+0x58>
   1554a:	46c0      	nop			(mov r8, r8)

0001554c <d_number>:
   1554c:	b410      	push	{r4}
   1554e:	68c1      	ldr	r1, [r0, #12]
   15550:	f891 c000 	ldrb.w	ip, [r1]
   15554:	f1bc 0f6e 	cmp.w	ip, #110	; 0x6e
   15558:	d01c      	beq.n	15594 <d_number+0x48>
   1555a:	2400      	movs	r4, #0
   1555c:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   15560:	b2db      	uxtb	r3, r3
   15562:	2b09      	cmp	r3, #9
   15564:	d81c      	bhi.n	155a0 <d_number+0x54>
   15566:	68c1      	ldr	r1, [r0, #12]
   15568:	2200      	movs	r2, #0
   1556a:	0053      	lsls	r3, r2, #1
   1556c:	3101      	adds	r1, #1
   1556e:	00d2      	lsls	r2, r2, #3
   15570:	189b      	adds	r3, r3, r2
   15572:	60c1      	str	r1, [r0, #12]
   15574:	4463      	add	r3, ip
   15576:	f891 c000 	ldrb.w	ip, [r1]
   1557a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1557e:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
   15582:	b2db      	uxtb	r3, r3
   15584:	2b09      	cmp	r3, #9
   15586:	d9f0      	bls.n	1556a <d_number+0x1e>
   15588:	4610      	mov	r0, r2
   1558a:	b10c      	cbz	r4, 15590 <d_number+0x44>
   1558c:	f1c2 0000 	rsb	r0, r2, #0	; 0x0
   15590:	bc10      	pop	{r4}
   15592:	4770      	bx	lr
   15594:	1c4b      	adds	r3, r1, #1
   15596:	60c3      	str	r3, [r0, #12]
   15598:	f891 c001 	ldrb.w	ip, [r1, #1]
   1559c:	2401      	movs	r4, #1
   1559e:	e7dd      	b.n	1555c <d_number+0x10>
   155a0:	2200      	movs	r2, #0
   155a2:	e7f1      	b.n	15588 <d_number+0x3c>

000155a4 <d_call_offset>:
   155a4:	b510      	push	{r4, lr}
   155a6:	4604      	mov	r4, r0
   155a8:	b931      	cbnz	r1, 155b8 <d_call_offset+0x14>
   155aa:	68c3      	ldr	r3, [r0, #12]
   155ac:	7819      	ldrb	r1, [r3, #0]
   155ae:	b909      	cbnz	r1, 155b4 <d_call_offset+0x10>
   155b0:	2000      	movs	r0, #0
   155b2:	bd10      	pop	{r4, pc}
   155b4:	3301      	adds	r3, #1
   155b6:	60c3      	str	r3, [r0, #12]
   155b8:	2968      	cmp	r1, #104
   155ba:	d00a      	beq.n	155d2 <d_call_offset+0x2e>
   155bc:	2976      	cmp	r1, #118
   155be:	d1f7      	bne.n	155b0 <d_call_offset+0xc>
   155c0:	4620      	mov	r0, r4
   155c2:	f7ff ffc3 	bl	1554c <d_number>
   155c6:	68e2      	ldr	r2, [r4, #12]
   155c8:	7813      	ldrb	r3, [r2, #0]
   155ca:	2b5f      	cmp	r3, #95
   155cc:	d1f0      	bne.n	155b0 <d_call_offset+0xc>
   155ce:	1c53      	adds	r3, r2, #1
   155d0:	60e3      	str	r3, [r4, #12]
   155d2:	4620      	mov	r0, r4
   155d4:	f7ff ffba 	bl	1554c <d_number>
   155d8:	68e2      	ldr	r2, [r4, #12]
   155da:	7813      	ldrb	r3, [r2, #0]
   155dc:	2b5f      	cmp	r3, #95
   155de:	d1e7      	bne.n	155b0 <d_call_offset+0xc>
   155e0:	1c53      	adds	r3, r2, #1
   155e2:	60e3      	str	r3, [r4, #12]
   155e4:	2001      	movs	r0, #1
   155e6:	e7e4      	b.n	155b2 <d_call_offset+0xe>

000155e8 <d_cv_qualifiers>:
   155e8:	b570      	push	{r4, r5, r6, lr}
   155ea:	68c3      	ldr	r3, [r0, #12]
   155ec:	4616      	mov	r6, r2
   155ee:	781a      	ldrb	r2, [r3, #0]
   155f0:	4604      	mov	r4, r0
   155f2:	460d      	mov	r5, r1
   155f4:	2a72      	cmp	r2, #114
   155f6:	bf14      	ite	ne
   155f8:	2100      	movne	r1, #0
   155fa:	2101      	moveq	r1, #1
   155fc:	2a56      	cmp	r2, #86
   155fe:	bf14      	ite	ne
   15600:	2000      	movne	r0, #0
   15602:	2001      	moveq	r0, #1
   15604:	ea51 0c00 	orrs.w	ip, r1, r0
   15608:	d128      	bne.n	1565c <d_cv_qualifiers+0x74>
   1560a:	2a4b      	cmp	r2, #75
   1560c:	d124      	bne.n	15658 <d_cv_qualifiers+0x70>
   1560e:	3301      	adds	r3, #1
   15610:	60e3      	str	r3, [r4, #12]
   15612:	b988      	cbnz	r0, 15638 <d_cv_qualifiers+0x50>
   15614:	6b23      	ldr	r3, [r4, #48]
   15616:	2e00      	cmp	r6, #0
   15618:	bf14      	ite	ne
   1561a:	211b      	movne	r1, #27
   1561c:	2118      	moveq	r1, #24
   1561e:	3306      	adds	r3, #6
   15620:	6323      	str	r3, [r4, #48]
   15622:	2200      	movs	r2, #0
   15624:	4620      	mov	r0, r4
   15626:	4613      	mov	r3, r2
   15628:	f7ff ff3e 	bl	154a8 <d_make_comp>
   1562c:	6028      	str	r0, [r5, #0]
   1562e:	b190      	cbz	r0, 15656 <d_cv_qualifiers+0x6e>
   15630:	68e3      	ldr	r3, [r4, #12]
   15632:	1d05      	adds	r5, r0, #4
   15634:	781a      	ldrb	r2, [r3, #0]
   15636:	e7dd      	b.n	155f4 <d_cv_qualifiers+0xc>
   15638:	6b23      	ldr	r3, [r4, #48]
   1563a:	2200      	movs	r2, #0
   1563c:	3309      	adds	r3, #9
   1563e:	6323      	str	r3, [r4, #48]
   15640:	2e00      	cmp	r6, #0
   15642:	bf14      	ite	ne
   15644:	211a      	movne	r1, #26
   15646:	2117      	moveq	r1, #23
   15648:	4620      	mov	r0, r4
   1564a:	4613      	mov	r3, r2
   1564c:	f7ff ff2c 	bl	154a8 <d_make_comp>
   15650:	6028      	str	r0, [r5, #0]
   15652:	2800      	cmp	r0, #0
   15654:	d1ec      	bne.n	15630 <d_cv_qualifiers+0x48>
   15656:	4605      	mov	r5, r0
   15658:	4628      	mov	r0, r5
   1565a:	bd70      	pop	{r4, r5, r6, pc}
   1565c:	3301      	adds	r3, #1
   1565e:	60e3      	str	r3, [r4, #12]
   15660:	2900      	cmp	r1, #0
   15662:	d0d6      	beq.n	15612 <d_cv_qualifiers+0x2a>
   15664:	6b23      	ldr	r3, [r4, #48]
   15666:	2e00      	cmp	r6, #0
   15668:	bf14      	ite	ne
   1566a:	2119      	movne	r1, #25
   1566c:	2116      	moveq	r1, #22
   1566e:	3309      	adds	r3, #9
   15670:	6323      	str	r3, [r4, #48]
   15672:	e7d6      	b.n	15622 <d_cv_qualifiers+0x3a>

00015674 <d_template_param>:
   15674:	b530      	push	{r4, r5, lr}
   15676:	68c2      	ldr	r2, [r0, #12]
   15678:	b081      	sub	sp, #4
   1567a:	7813      	ldrb	r3, [r2, #0]
   1567c:	4604      	mov	r4, r0
   1567e:	2b54      	cmp	r3, #84
   15680:	d002      	beq.n	15688 <d_template_param+0x14>
   15682:	2000      	movs	r0, #0
   15684:	b001      	add	sp, #4
   15686:	bd30      	pop	{r4, r5, pc}
   15688:	1c51      	adds	r1, r2, #1
   1568a:	60c1      	str	r1, [r0, #12]
   1568c:	7853      	ldrb	r3, [r2, #1]
   1568e:	2b5f      	cmp	r3, #95
   15690:	d119      	bne.n	156c6 <d_template_param+0x52>
   15692:	2500      	movs	r5, #0
   15694:	1c4b      	adds	r3, r1, #1
   15696:	6aa2      	ldr	r2, [r4, #40]
   15698:	60e3      	str	r3, [r4, #12]
   1569a:	f8d4 c014 	ldr.w	ip, [r4, #20]
   1569e:	69a3      	ldr	r3, [r4, #24]
   156a0:	3201      	adds	r2, #1
   156a2:	459c      	cmp	ip, r3
   156a4:	62a2      	str	r2, [r4, #40]
   156a6:	daec      	bge.n	15682 <d_template_param+0xe>
   156a8:	ea4f 038c 	mov.w	r3, ip, lsl #2
   156ac:	ea4f 120c 	mov.w	r2, ip, lsl #4
   156b0:	6921      	ldr	r1, [r4, #16]
   156b2:	1ad2      	subs	r2, r2, r3
   156b4:	1888      	adds	r0, r1, r2
   156b6:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   156ba:	6163      	str	r3, [r4, #20]
   156bc:	d0e2      	beq.n	15684 <d_template_param+0x10>
   156be:	2305      	movs	r3, #5
   156c0:	548b      	strb	r3, [r1, r2]
   156c2:	6045      	str	r5, [r0, #4]
   156c4:	e7de      	b.n	15684 <d_template_param+0x10>
   156c6:	f7ff ff41 	bl	1554c <d_number>
   156ca:	2800      	cmp	r0, #0
   156cc:	dbd9      	blt.n	15682 <d_template_param+0xe>
   156ce:	68e1      	ldr	r1, [r4, #12]
   156d0:	780b      	ldrb	r3, [r1, #0]
   156d2:	2b5f      	cmp	r3, #95
   156d4:	d1d5      	bne.n	15682 <d_template_param+0xe>
   156d6:	1c45      	adds	r5, r0, #1
   156d8:	e7dc      	b.n	15694 <d_template_param+0x20>
   156da:	46c0      	nop			(mov r8, r8)

000156dc <d_substitution>:
   156dc:	e92d 05f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl}
   156e0:	68c2      	ldr	r2, [r0, #12]
   156e2:	460c      	mov	r4, r1
   156e4:	7813      	ldrb	r3, [r2, #0]
   156e6:	2b53      	cmp	r3, #83
   156e8:	d003      	beq.n	156f2 <d_substitution+0x16>
   156ea:	2000      	movs	r0, #0
   156ec:	e8bd 05f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl}
   156f0:	4770      	bx	lr
   156f2:	1c53      	adds	r3, r2, #1
   156f4:	60c3      	str	r3, [r0, #12]
   156f6:	7851      	ldrb	r1, [r2, #1]
   156f8:	bb39      	cbnz	r1, 1574a <d_substitution+0x6e>
   156fa:	6883      	ldr	r3, [r0, #8]
   156fc:	08db      	lsrs	r3, r3, #3
   156fe:	f013 0701 	ands.w	r7, r3, #1	; 0x1
   15702:	bf14      	ite	ne
   15704:	2200      	movne	r2, #0
   15706:	2201      	moveq	r2, #1
   15708:	2c00      	cmp	r4, #0
   1570a:	bf0c      	ite	eq
   1570c:	2200      	moveq	r2, #0
   1570e:	f002 0201 	andne.w	r2, r2, #1	; 0x1
   15712:	b13a      	cbz	r2, 15724 <d_substitution+0x48>
   15714:	68c2      	ldr	r2, [r0, #12]
   15716:	7813      	ldrb	r3, [r2, #0]
   15718:	3b43      	subs	r3, #67
   1571a:	b2db      	uxtb	r3, r3
   1571c:	2b01      	cmp	r3, #1
   1571e:	bf8c      	ite	hi
   15720:	2700      	movhi	r7, #0
   15722:	2701      	movls	r7, #1
   15724:	4a51      	ldr	r2, [pc, #324]	(1586c <d_substitution+0x190>)
   15726:	f1b2 03c4 	subs.w	r3, r2, #196	; 0xc4
   1572a:	d3de      	bcc.n	156ea <d_substitution+0xe>
   1572c:	2974      	cmp	r1, #116
   1572e:	bf08      	it	eq
   15730:	469c      	moveq	ip, r3
   15732:	d04f      	beq.n	157d4 <d_substitution+0xf8>
   15734:	469c      	mov	ip, r3
   15736:	e003      	b.n	15740 <d_substitution+0x64>
   15738:	f89c 3000 	ldrb.w	r3, [ip]
   1573c:	428b      	cmp	r3, r1
   1573e:	d049      	beq.n	157d4 <d_substitution+0xf8>
   15740:	f10c 0c1c 	add.w	ip, ip, #28	; 0x1c
   15744:	4594      	cmp	ip, r2
   15746:	d1f7      	bne.n	15738 <d_substitution+0x5c>
   15748:	e7cf      	b.n	156ea <d_substitution+0xe>
   1574a:	3301      	adds	r3, #1
   1574c:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   15750:	60c3      	str	r3, [r0, #12]
   15752:	fa5f f38c 	uxtb.w	r3, ip
   15756:	2b09      	cmp	r3, #9
   15758:	bf8c      	ite	hi
   1575a:	2300      	movhi	r3, #0
   1575c:	2301      	movls	r3, #1
   1575e:	295f      	cmp	r1, #95
   15760:	bf08      	it	eq
   15762:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   15766:	2b00      	cmp	r3, #0
   15768:	d079      	beq.n	1585e <d_substitution+0x182>
   1576a:	295f      	cmp	r1, #95
   1576c:	d030      	beq.n	157d0 <d_substitution+0xf4>
   1576e:	fa5f f38c 	uxtb.w	r3, ip
   15772:	2200      	movs	r2, #0
   15774:	2b09      	cmp	r3, #9
   15776:	d814      	bhi.n	157a2 <d_substitution+0xc6>
   15778:	0093      	lsls	r3, r2, #2
   1577a:	0152      	lsls	r2, r2, #5
   1577c:	189b      	adds	r3, r3, r2
   1577e:	185b      	adds	r3, r3, r1
   15780:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15784:	2a00      	cmp	r2, #0
   15786:	dbb0      	blt.n	156ea <d_substitution+0xe>
   15788:	68c3      	ldr	r3, [r0, #12]
   1578a:	7819      	ldrb	r1, [r3, #0]
   1578c:	b119      	cbz	r1, 15796 <d_substitution+0xba>
   1578e:	3301      	adds	r3, #1
   15790:	295f      	cmp	r1, #95
   15792:	60c3      	str	r3, [r0, #12]
   15794:	d011      	beq.n	157ba <d_substitution+0xde>
   15796:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
   1579a:	fa5f f38c 	uxtb.w	r3, ip
   1579e:	2b09      	cmp	r3, #9
   157a0:	d9ea      	bls.n	15778 <d_substitution+0x9c>
   157a2:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   157a6:	b2db      	uxtb	r3, r3
   157a8:	2b19      	cmp	r3, #25
   157aa:	d89e      	bhi.n	156ea <d_substitution+0xe>
   157ac:	0093      	lsls	r3, r2, #2
   157ae:	0152      	lsls	r2, r2, #5
   157b0:	189b      	adds	r3, r3, r2
   157b2:	185b      	adds	r3, r3, r1
   157b4:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   157b8:	e7e4      	b.n	15784 <d_substitution+0xa8>
   157ba:	1c51      	adds	r1, r2, #1
   157bc:	6a03      	ldr	r3, [r0, #32]
   157be:	4299      	cmp	r1, r3
   157c0:	da93      	bge.n	156ea <d_substitution+0xe>
   157c2:	6a83      	ldr	r3, [r0, #40]
   157c4:	69c2      	ldr	r2, [r0, #28]
   157c6:	3301      	adds	r3, #1
   157c8:	6283      	str	r3, [r0, #40]
   157ca:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   157ce:	e78d      	b.n	156ec <d_substitution+0x10>
   157d0:	395f      	subs	r1, #95
   157d2:	e7f3      	b.n	157bc <d_substitution+0xe0>
   157d4:	f8dc a014 	ldr.w	sl, [ip, #20]
   157d8:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   157dc:	d03c      	beq.n	15858 <d_substitution+0x17c>
   157de:	6945      	ldr	r5, [r0, #20]
   157e0:	6986      	ldr	r6, [r0, #24]
   157e2:	f8dc 8018 	ldr.w	r8, [ip, #24]
   157e6:	42b5      	cmp	r5, r6
   157e8:	db1c      	blt.n	15824 <d_substitution+0x148>
   157ea:	2200      	movs	r2, #0
   157ec:	62c2      	str	r2, [r0, #44]
   157ee:	2f00      	cmp	r7, #0
   157f0:	d02d      	beq.n	1584e <d_substitution+0x172>
   157f2:	f8dc 400c 	ldr.w	r4, [ip, #12]
   157f6:	f8dc c010 	ldr.w	ip, [ip, #16]
   157fa:	6b03      	ldr	r3, [r0, #48]
   157fc:	42b5      	cmp	r5, r6
   157fe:	4463      	add	r3, ip
   15800:	6303      	str	r3, [r0, #48]
   15802:	f6bf af72 	bge.w	156ea <d_substitution+0xe>
   15806:	00ab      	lsls	r3, r5, #2
   15808:	012a      	lsls	r2, r5, #4
   1580a:	6901      	ldr	r1, [r0, #16]
   1580c:	1ad2      	subs	r2, r2, r3
   1580e:	1c6b      	adds	r3, r5, #1
   15810:	6143      	str	r3, [r0, #20]
   15812:	1888      	adds	r0, r1, r2
   15814:	f43f af6a 	beq.w	156ec <d_substitution+0x10>
   15818:	2315      	movs	r3, #21
   1581a:	548b      	strb	r3, [r1, r2]
   1581c:	6044      	str	r4, [r0, #4]
   1581e:	f8c0 c008 	str.w	ip, [r0, #8]
   15822:	e763      	b.n	156ec <d_substitution+0x10>
   15824:	012b      	lsls	r3, r5, #4
   15826:	00aa      	lsls	r2, r5, #2
   15828:	6901      	ldr	r1, [r0, #16]
   1582a:	ebc2 0403 	rsb	r4, r2, r3
   1582e:	1c6b      	adds	r3, r5, #1
   15830:	190a      	adds	r2, r1, r4
   15832:	6143      	str	r3, [r0, #20]
   15834:	bf08      	it	eq
   15836:	461d      	moveq	r5, r3
   15838:	d0d8      	beq.n	157ec <d_substitution+0x110>
   1583a:	f8c2 a004 	str.w	sl, [r2, #4]
   1583e:	f8c2 8008 	str.w	r8, [r2, #8]
   15842:	2315      	movs	r3, #21
   15844:	550b      	strb	r3, [r1, r4]
   15846:	6945      	ldr	r5, [r0, #20]
   15848:	6986      	ldr	r6, [r0, #24]
   1584a:	62c2      	str	r2, [r0, #44]
   1584c:	e7cf      	b.n	157ee <d_substitution+0x112>
   1584e:	f8dc 4004 	ldr.w	r4, [ip, #4]
   15852:	f8dc c008 	ldr.w	ip, [ip, #8]
   15856:	e7d0      	b.n	157fa <d_substitution+0x11e>
   15858:	6945      	ldr	r5, [r0, #20]
   1585a:	6986      	ldr	r6, [r0, #24]
   1585c:	e7c7      	b.n	157ee <d_substitution+0x112>
   1585e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   15862:	b2db      	uxtb	r3, r3
   15864:	2b19      	cmp	r3, #25
   15866:	d982      	bls.n	1576e <d_substitution+0x92>
   15868:	e747      	b.n	156fa <d_substitution+0x1e>
   1586a:	46c0      	nop			(mov r8, r8)
   1586c:	000202e8 	.word	0x000202e8

00015870 <d_append_char>:
   15870:	b570      	push	{r4, r5, r6, lr}
   15872:	460e      	mov	r6, r1
   15874:	f8d0 1104 	ldr.w	r1, [r0, #260]
   15878:	4605      	mov	r5, r0
   1587a:	29ff      	cmp	r1, #255
   1587c:	d008      	beq.n	15890 <d_append_char+0x20>
   1587e:	eb05 0301 	add.w	r3, r5, r1
   15882:	1c4a      	adds	r2, r1, #1
   15884:	711e      	strb	r6, [r3, #4]
   15886:	f8c5 2104 	str.w	r2, [r5, #260]
   1588a:	f885 6108 	strb.w	r6, [r5, #264]
   1588e:	bd70      	pop	{r4, r5, r6, pc}
   15890:	2400      	movs	r4, #0
   15892:	f880 4103 	strb.w	r4, [r0, #259]
   15896:	f8d5 2110 	ldr.w	r2, [r5, #272]
   1589a:	3004      	adds	r0, #4
   1589c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   158a0:	4798      	blx	r3
   158a2:	f8c5 4104 	str.w	r4, [r5, #260]
   158a6:	4621      	mov	r1, r4
   158a8:	e7e9      	b.n	1587e <d_append_char+0xe>
   158aa:	46c0      	nop			(mov r8, r8)

000158ac <d_source_name>:
   158ac:	b570      	push	{r4, r5, r6, lr}
   158ae:	4604      	mov	r4, r0
   158b0:	f7ff fe4c 	bl	1554c <d_number>
   158b4:	2800      	cmp	r0, #0
   158b6:	4605      	mov	r5, r0
   158b8:	dd30      	ble.n	1591c <d_source_name+0x70>
   158ba:	68e6      	ldr	r6, [r4, #12]
   158bc:	6863      	ldr	r3, [r4, #4]
   158be:	1b9b      	subs	r3, r3, r6
   158c0:	4298      	cmp	r0, r3
   158c2:	dd02      	ble.n	158ca <d_source_name+0x1e>
   158c4:	2000      	movs	r0, #0
   158c6:	62e0      	str	r0, [r4, #44]
   158c8:	bd70      	pop	{r4, r5, r6, pc}
   158ca:	68a3      	ldr	r3, [r4, #8]
   158cc:	eb06 0200 	add.w	r2, r6, r0
   158d0:	f013 0f04 	tst.w	r3, #4	; 0x4
   158d4:	60e2      	str	r2, [r4, #12]
   158d6:	d004      	beq.n	158e2 <d_source_name+0x36>
   158d8:	5c33      	ldrb	r3, [r6, r0]
   158da:	2b24      	cmp	r3, #36
   158dc:	d101      	bne.n	158e2 <d_source_name+0x36>
   158de:	1c53      	adds	r3, r2, #1
   158e0:	60e3      	str	r3, [r4, #12]
   158e2:	2d09      	cmp	r5, #9
   158e4:	dc1c      	bgt.n	15920 <d_source_name+0x74>
   158e6:	6961      	ldr	r1, [r4, #20]
   158e8:	69a3      	ldr	r3, [r4, #24]
   158ea:	4299      	cmp	r1, r3
   158ec:	daea      	bge.n	158c4 <d_source_name+0x18>
   158ee:	008a      	lsls	r2, r1, #2
   158f0:	010b      	lsls	r3, r1, #4
   158f2:	ebc2 0c03 	rsb	ip, r2, r3
   158f6:	6922      	ldr	r2, [r4, #16]
   158f8:	1c4b      	adds	r3, r1, #1
   158fa:	eb12 000c 	adds.w	r0, r2, ip
   158fe:	6163      	str	r3, [r4, #20]
   15900:	bf14      	ite	ne
   15902:	2300      	movne	r3, #0
   15904:	2301      	moveq	r3, #1
   15906:	2e00      	cmp	r6, #0
   15908:	bf08      	it	eq
   1590a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1590e:	2b00      	cmp	r3, #0
   15910:	d1d8      	bne.n	158c4 <d_source_name+0x18>
   15912:	f802 300c 	strb.w	r3, [r2, ip]
   15916:	6046      	str	r6, [r0, #4]
   15918:	6085      	str	r5, [r0, #8]
   1591a:	e7d4      	b.n	158c6 <d_source_name+0x1a>
   1591c:	2000      	movs	r0, #0
   1591e:	e7d3      	b.n	158c8 <d_source_name+0x1c>
   15920:	4630      	mov	r0, r6
   15922:	4919      	ldr	r1, [pc, #100]	(15988 <d_source_name+0xdc>)
   15924:	2208      	movs	r2, #8
   15926:	f008 fe6b 	bl	1e600 <memcmp>
   1592a:	2800      	cmp	r0, #0
   1592c:	d1db      	bne.n	158e6 <d_source_name+0x3a>
   1592e:	7a32      	ldrb	r2, [r6, #8]
   15930:	f106 0108 	add.w	r1, r6, #8	; 0x8
   15934:	2a5f      	cmp	r2, #95
   15936:	bf14      	ite	ne
   15938:	2300      	movne	r3, #0
   1593a:	2301      	moveq	r3, #1
   1593c:	2a2e      	cmp	r2, #46
   1593e:	bf08      	it	eq
   15940:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   15944:	b1e3      	cbz	r3, 15980 <d_source_name+0xd4>
   15946:	784b      	ldrb	r3, [r1, #1]
   15948:	2b4e      	cmp	r3, #78
   1594a:	d1cc      	bne.n	158e6 <d_source_name+0x3a>
   1594c:	6b23      	ldr	r3, [r4, #48]
   1594e:	6961      	ldr	r1, [r4, #20]
   15950:	3316      	adds	r3, #22
   15952:	1b5b      	subs	r3, r3, r5
   15954:	6323      	str	r3, [r4, #48]
   15956:	69a3      	ldr	r3, [r4, #24]
   15958:	4299      	cmp	r1, r3
   1595a:	dab3      	bge.n	158c4 <d_source_name+0x18>
   1595c:	008b      	lsls	r3, r1, #2
   1595e:	010a      	lsls	r2, r1, #4
   15960:	f8d4 c010 	ldr.w	ip, [r4, #16]
   15964:	1ad2      	subs	r2, r2, r3
   15966:	1c4b      	adds	r3, r1, #1
   15968:	eb1c 0002 	adds.w	r0, ip, r2
   1596c:	6163      	str	r3, [r4, #20]
   1596e:	d0aa      	beq.n	158c6 <d_source_name+0x1a>
   15970:	2300      	movs	r3, #0
   15972:	f80c 3002 	strb.w	r3, [ip, r2]
   15976:	4a05      	ldr	r2, [pc, #20]	(1598c <d_source_name+0xe0>)
   15978:	3315      	adds	r3, #21
   1597a:	6042      	str	r2, [r0, #4]
   1597c:	6083      	str	r3, [r0, #8]
   1597e:	e7a2      	b.n	158c6 <d_source_name+0x1a>
   15980:	2a24      	cmp	r2, #36
   15982:	d1b0      	bne.n	158e6 <d_source_name+0x3a>
   15984:	e7df      	b.n	15946 <d_source_name+0x9a>
   15986:	46c0      	nop			(mov r8, r8)
   15988:	00020a30 	.word	0x00020a30
   1598c:	00020a3c 	.word	0x00020a3c

00015990 <d_type>:
   15990:	b5f0      	push	{r4, r5, r6, r7, lr}
   15992:	4605      	mov	r5, r0
   15994:	68c0      	ldr	r0, [r0, #12]
   15996:	b083      	sub	sp, #12
   15998:	7801      	ldrb	r1, [r0, #0]
   1599a:	2956      	cmp	r1, #86
   1599c:	bf14      	ite	ne
   1599e:	2300      	movne	r3, #0
   159a0:	2301      	moveq	r3, #1
   159a2:	2972      	cmp	r1, #114
   159a4:	bf08      	it	eq
   159a6:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   159aa:	b90b      	cbnz	r3, 159b0 <d_type+0x20>
   159ac:	294b      	cmp	r1, #75
   159ae:	d11d      	bne.n	159ec <d_type+0x5c>
   159b0:	4628      	mov	r0, r5
   159b2:	a901      	add	r1, sp, #4
   159b4:	2200      	movs	r2, #0
   159b6:	f7ff fe17 	bl	155e8 <d_cv_qualifiers>
   159ba:	4604      	mov	r4, r0
   159bc:	b910      	cbnz	r0, 159c4 <d_type+0x34>
   159be:	2000      	movs	r0, #0
   159c0:	b003      	add	sp, #12
   159c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159c4:	4628      	mov	r0, r5
   159c6:	f7ff ffe3 	bl	15990 <d_type>
   159ca:	6020      	str	r0, [r4, #0]
   159cc:	2800      	cmp	r0, #0
   159ce:	d0f6      	beq.n	159be <d_type+0x2e>
   159d0:	9901      	ldr	r1, [sp, #4]
   159d2:	2900      	cmp	r1, #0
   159d4:	d0f3      	beq.n	159be <d_type+0x2e>
   159d6:	6a2a      	ldr	r2, [r5, #32]
   159d8:	6a6b      	ldr	r3, [r5, #36]
   159da:	429a      	cmp	r2, r3
   159dc:	daef      	bge.n	159be <d_type+0x2e>
   159de:	69eb      	ldr	r3, [r5, #28]
   159e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   159e4:	3201      	adds	r2, #1
   159e6:	622a      	str	r2, [r5, #32]
   159e8:	9801      	ldr	r0, [sp, #4]
   159ea:	e7e9      	b.n	159c0 <d_type+0x30>
   159ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   159f0:	2b4a      	cmp	r3, #74
   159f2:	d8e4      	bhi.n	159be <d_type+0x2e>
   159f4:	a201      	add	r2, pc, #4	(adr r2, 159fc <d_type+0x6c>)
   159f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   159fa:	46c0      	nop			(mov r8, r8)
   159fc:	00015d9b 	.word	0x00015d9b
   15a00:	00015d9b 	.word	0x00015d9b
   15a04:	00015d9b 	.word	0x00015d9b
   15a08:	00015d9b 	.word	0x00015d9b
   15a0c:	00015d9b 	.word	0x00015d9b
   15a10:	00015d9b 	.word	0x00015d9b
   15a14:	00015d9b 	.word	0x00015d9b
   15a18:	00015d9b 	.word	0x00015d9b
   15a1c:	00015d9b 	.word	0x00015d9b
   15a20:	00015d9b 	.word	0x00015d9b
   15a24:	000159bf 	.word	0x000159bf
   15a28:	000159bf 	.word	0x000159bf
   15a2c:	000159bf 	.word	0x000159bf
   15a30:	000159bf 	.word	0x000159bf
   15a34:	000159bf 	.word	0x000159bf
   15a38:	000159bf 	.word	0x000159bf
   15a3c:	000159bf 	.word	0x000159bf
   15a40:	00015d29 	.word	0x00015d29
   15a44:	000159bf 	.word	0x000159bf
   15a48:	00015d0f 	.word	0x00015d0f
   15a4c:	000159bf 	.word	0x000159bf
   15a50:	000159bf 	.word	0x000159bf
   15a54:	00015ceb 	.word	0x00015ceb
   15a58:	00015cd1 	.word	0x00015cd1
   15a5c:	000159bf 	.word	0x000159bf
   15a60:	000159bf 	.word	0x000159bf
   15a64:	000159bf 	.word	0x000159bf
   15a68:	000159bf 	.word	0x000159bf
   15a6c:	000159bf 	.word	0x000159bf
   15a70:	00015cad 	.word	0x00015cad
   15a74:	00015d9b 	.word	0x00015d9b
   15a78:	00015c93 	.word	0x00015c93
   15a7c:	00015c79 	.word	0x00015c79
   15a80:	000159bf 	.word	0x000159bf
   15a84:	00015c5f 	.word	0x00015c5f
   15a88:	00015c0f 	.word	0x00015c0f
   15a8c:	00015bcd 	.word	0x00015bcd
   15a90:	00015bab 	.word	0x00015bab
   15a94:	000159bf 	.word	0x000159bf
   15a98:	000159bf 	.word	0x000159bf
   15a9c:	000159bf 	.word	0x000159bf
   15aa0:	000159bf 	.word	0x000159bf
   15aa4:	00015d9b 	.word	0x00015d9b
   15aa8:	000159bf 	.word	0x000159bf
   15aac:	000159bf 	.word	0x000159bf
   15ab0:	000159bf 	.word	0x000159bf
   15ab4:	000159bf 	.word	0x000159bf
   15ab8:	000159bf 	.word	0x000159bf
   15abc:	000159bf 	.word	0x000159bf
   15ac0:	00015b61 	.word	0x00015b61
   15ac4:	00015b61 	.word	0x00015b61
   15ac8:	00015b61 	.word	0x00015b61
   15acc:	00015b61 	.word	0x00015b61
   15ad0:	00015b61 	.word	0x00015b61
   15ad4:	00015b61 	.word	0x00015b61
   15ad8:	00015b61 	.word	0x00015b61
   15adc:	00015b61 	.word	0x00015b61
   15ae0:	00015b61 	.word	0x00015b61
   15ae4:	00015b61 	.word	0x00015b61
   15ae8:	000159bf 	.word	0x000159bf
   15aec:	00015b61 	.word	0x00015b61
   15af0:	00015b61 	.word	0x00015b61
   15af4:	00015b61 	.word	0x00015b61
   15af8:	00015b61 	.word	0x00015b61
   15afc:	000159bf 	.word	0x000159bf
   15b00:	000159bf 	.word	0x000159bf
   15b04:	000159bf 	.word	0x000159bf
   15b08:	00015b61 	.word	0x00015b61
   15b0c:	00015b61 	.word	0x00015b61
   15b10:	00015b29 	.word	0x00015b29
   15b14:	00015b61 	.word	0x00015b61
   15b18:	00015b61 	.word	0x00015b61
   15b1c:	00015b61 	.word	0x00015b61
   15b20:	00015b61 	.word	0x00015b61
   15b24:	00015b61 	.word	0x00015b61
   15b28:	1c43      	adds	r3, r0, #1
   15b2a:	60eb      	str	r3, [r5, #12]
   15b2c:	4628      	mov	r0, r5
   15b2e:	f7ff febd 	bl	158ac <d_source_name>
   15b32:	2123      	movs	r1, #35
   15b34:	4602      	mov	r2, r0
   15b36:	2300      	movs	r3, #0
   15b38:	4628      	mov	r0, r5
   15b3a:	f7ff fcb5 	bl	154a8 <d_make_comp>
   15b3e:	9001      	str	r0, [sp, #4]
   15b40:	9801      	ldr	r0, [sp, #4]
   15b42:	2800      	cmp	r0, #0
   15b44:	f43f af3b 	beq.w	159be <d_type+0x2e>
   15b48:	6a2a      	ldr	r2, [r5, #32]
   15b4a:	6a6b      	ldr	r3, [r5, #36]
   15b4c:	429a      	cmp	r2, r3
   15b4e:	f6bf af36 	bge.w	159be <d_type+0x2e>
   15b52:	69eb      	ldr	r3, [r5, #28]
   15b54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   15b58:	3201      	adds	r2, #1
   15b5a:	622a      	str	r2, [r5, #32]
   15b5c:	9801      	ldr	r0, [sp, #4]
   15b5e:	e72f      	b.n	159c0 <d_type+0x30>
   15b60:	008b      	lsls	r3, r1, #2
   15b62:	4aaf      	ldr	r2, [pc, #700]	(15e20 <d_type+0x490>)
   15b64:	0109      	lsls	r1, r1, #4
   15b66:	185b      	adds	r3, r3, r1
   15b68:	189c      	adds	r4, r3, r2
   15b6a:	f000 811b 	beq.w	15da4 <d_type+0x414>
   15b6e:	6969      	ldr	r1, [r5, #20]
   15b70:	69ab      	ldr	r3, [r5, #24]
   15b72:	4299      	cmp	r1, r3
   15b74:	f280 8116 	bge.w	15da4 <d_type+0x414>
   15b78:	008b      	lsls	r3, r1, #2
   15b7a:	010a      	lsls	r2, r1, #4
   15b7c:	f8d5 c010 	ldr.w	ip, [r5, #16]
   15b80:	1ad2      	subs	r2, r2, r3
   15b82:	1c4b      	adds	r3, r1, #1
   15b84:	eb1c 0102 	adds.w	r1, ip, r2
   15b88:	616b      	str	r3, [r5, #20]
   15b8a:	d004      	beq.n	15b96 <d_type+0x206>
   15b8c:	604c      	str	r4, [r1, #4]
   15b8e:	2322      	movs	r3, #34
   15b90:	68e8      	ldr	r0, [r5, #12]
   15b92:	f80c 3002 	strb.w	r3, [ip, r2]
   15b96:	9101      	str	r1, [sp, #4]
   15b98:	6849      	ldr	r1, [r1, #4]
   15b9a:	6b2b      	ldr	r3, [r5, #48]
   15b9c:	684a      	ldr	r2, [r1, #4]
   15b9e:	189b      	adds	r3, r3, r2
   15ba0:	1c42      	adds	r2, r0, #1
   15ba2:	632b      	str	r3, [r5, #48]
   15ba4:	60ea      	str	r2, [r5, #12]
   15ba6:	9801      	ldr	r0, [sp, #4]
   15ba8:	e70a      	b.n	159c0 <d_type+0x30>
   15baa:	1c43      	adds	r3, r0, #1
   15bac:	60eb      	str	r3, [r5, #12]
   15bae:	4628      	mov	r0, r5
   15bb0:	f7ff fe7c 	bl	158ac <d_source_name>
   15bb4:	9001      	str	r0, [sp, #4]
   15bb6:	4628      	mov	r0, r5
   15bb8:	f7ff feea 	bl	15990 <d_type>
   15bbc:	211c      	movs	r1, #28
   15bbe:	4602      	mov	r2, r0
   15bc0:	9b01      	ldr	r3, [sp, #4]
   15bc2:	4628      	mov	r0, r5
   15bc4:	f7ff fc70 	bl	154a8 <d_make_comp>
   15bc8:	9001      	str	r0, [sp, #4]
   15bca:	e7b9      	b.n	15b40 <d_type+0x1b0>
   15bcc:	4628      	mov	r0, r5
   15bce:	f7ff fd51 	bl	15674 <d_template_param>
   15bd2:	68eb      	ldr	r3, [r5, #12]
   15bd4:	9001      	str	r0, [sp, #4]
   15bd6:	781a      	ldrb	r2, [r3, #0]
   15bd8:	2a49      	cmp	r2, #73
   15bda:	d1b1      	bne.n	15b40 <d_type+0x1b0>
   15bdc:	2800      	cmp	r0, #0
   15bde:	f43f aeee 	beq.w	159be <d_type+0x2e>
   15be2:	6a2a      	ldr	r2, [r5, #32]
   15be4:	6a6b      	ldr	r3, [r5, #36]
   15be6:	429a      	cmp	r2, r3
   15be8:	f6bf aee9 	bge.w	159be <d_type+0x2e>
   15bec:	69eb      	ldr	r3, [r5, #28]
   15bee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
   15bf2:	3201      	adds	r2, #1
   15bf4:	622a      	str	r2, [r5, #32]
   15bf6:	4628      	mov	r0, r5
   15bf8:	9c01      	ldr	r4, [sp, #4]
   15bfa:	f000 fe45 	bl	16888 <d_template_args>
   15bfe:	2104      	movs	r1, #4
   15c00:	4603      	mov	r3, r0
   15c02:	4622      	mov	r2, r4
   15c04:	4628      	mov	r0, r5
   15c06:	f7ff fc4f 	bl	154a8 <d_make_comp>
   15c0a:	9001      	str	r0, [sp, #4]
   15c0c:	e798      	b.n	15b40 <d_type+0x1b0>
   15c0e:	7841      	ldrb	r1, [r0, #1]
   15c10:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   15c14:	b2d2      	uxtb	r2, r2
   15c16:	295f      	cmp	r1, #95
   15c18:	bf14      	ite	ne
   15c1a:	2300      	movne	r3, #0
   15c1c:	2301      	moveq	r3, #1
   15c1e:	2a09      	cmp	r2, #9
   15c20:	bf98      	it	ls
   15c22:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   15c26:	b92b      	cbnz	r3, 15c34 <d_type+0x2a4>
   15c28:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   15c2c:	b2db      	uxtb	r3, r3
   15c2e:	2b19      	cmp	r3, #25
   15c30:	f200 80cf 	bhi.w	15dd2 <d_type+0x442>
   15c34:	2100      	movs	r1, #0
   15c36:	4628      	mov	r0, r5
   15c38:	f7ff fd50 	bl	156dc <d_substitution>
   15c3c:	68eb      	ldr	r3, [r5, #12]
   15c3e:	9001      	str	r0, [sp, #4]
   15c40:	781a      	ldrb	r2, [r3, #0]
   15c42:	4604      	mov	r4, r0
   15c44:	2a49      	cmp	r2, #73
   15c46:	d189      	bne.n	15b5c <d_type+0x1cc>
   15c48:	4628      	mov	r0, r5
   15c4a:	f000 fe1d 	bl	16888 <d_template_args>
   15c4e:	2104      	movs	r1, #4
   15c50:	4603      	mov	r3, r0
   15c52:	4622      	mov	r2, r4
   15c54:	4628      	mov	r0, r5
   15c56:	f7ff fc27 	bl	154a8 <d_make_comp>
   15c5a:	9001      	str	r0, [sp, #4]
   15c5c:	e770      	b.n	15b40 <d_type+0x1b0>
   15c5e:	1c43      	adds	r3, r0, #1
   15c60:	60eb      	str	r3, [r5, #12]
   15c62:	4628      	mov	r0, r5
   15c64:	f7ff fe94 	bl	15990 <d_type>
   15c68:	211e      	movs	r1, #30
   15c6a:	4602      	mov	r2, r0
   15c6c:	2300      	movs	r3, #0
   15c6e:	4628      	mov	r0, r5
   15c70:	f7ff fc1a 	bl	154a8 <d_make_comp>
   15c74:	9001      	str	r0, [sp, #4]
   15c76:	e763      	b.n	15b40 <d_type+0x1b0>
   15c78:	1c43      	adds	r3, r0, #1
   15c7a:	60eb      	str	r3, [r5, #12]
   15c7c:	4628      	mov	r0, r5
   15c7e:	f7ff fe87 	bl	15990 <d_type>
   15c82:	211d      	movs	r1, #29
   15c84:	4602      	mov	r2, r0
   15c86:	2300      	movs	r3, #0
   15c88:	4628      	mov	r0, r5
   15c8a:	f7ff fc0d 	bl	154a8 <d_make_comp>
   15c8e:	9001      	str	r0, [sp, #4]
   15c90:	e756      	b.n	15b40 <d_type+0x1b0>
   15c92:	1c43      	adds	r3, r0, #1
   15c94:	60eb      	str	r3, [r5, #12]
   15c96:	4628      	mov	r0, r5
   15c98:	f7ff fe7a 	bl	15990 <d_type>
   15c9c:	211f      	movs	r1, #31
   15c9e:	4602      	mov	r2, r0
   15ca0:	2300      	movs	r3, #0
   15ca2:	4628      	mov	r0, r5
   15ca4:	f7ff fc00 	bl	154a8 <d_make_comp>
   15ca8:	9001      	str	r0, [sp, #4]
   15caa:	e749      	b.n	15b40 <d_type+0x1b0>
   15cac:	1c43      	adds	r3, r0, #1
   15cae:	60eb      	str	r3, [r5, #12]
   15cb0:	4628      	mov	r0, r5
   15cb2:	f7ff fe6d 	bl	15990 <d_type>
   15cb6:	4669      	mov	r1, sp
   15cb8:	4607      	mov	r7, r0
   15cba:	2201      	movs	r2, #1
   15cbc:	4628      	mov	r0, r5
   15cbe:	f7ff fc93 	bl	155e8 <d_cv_qualifiers>
   15cc2:	466e      	mov	r6, sp
   15cc4:	4604      	mov	r4, r0
   15cc6:	2800      	cmp	r0, #0
   15cc8:	d16e      	bne.n	15da8 <d_type+0x418>
   15cca:	2000      	movs	r0, #0
   15ccc:	9001      	str	r0, [sp, #4]
   15cce:	e737      	b.n	15b40 <d_type+0x1b0>
   15cd0:	1c43      	adds	r3, r0, #1
   15cd2:	60eb      	str	r3, [r5, #12]
   15cd4:	4628      	mov	r0, r5
   15cd6:	f7ff fe5b 	bl	15990 <d_type>
   15cda:	2121      	movs	r1, #33
   15cdc:	4602      	mov	r2, r0
   15cde:	2300      	movs	r3, #0
   15ce0:	4628      	mov	r0, r5
   15ce2:	f7ff fbe1 	bl	154a8 <d_make_comp>
   15ce6:	9001      	str	r0, [sp, #4]
   15ce8:	e72a      	b.n	15b40 <d_type+0x1b0>
   15cea:	1c42      	adds	r2, r0, #1
   15cec:	60ea      	str	r2, [r5, #12]
   15cee:	7843      	ldrb	r3, [r0, #1]
   15cf0:	2b59      	cmp	r3, #89
   15cf2:	f000 8083 	beq.w	15dfc <d_type+0x46c>
   15cf6:	2101      	movs	r1, #1
   15cf8:	4628      	mov	r0, r5
   15cfa:	f000 f9b7 	bl	1606c <d_bare_function_type>
   15cfe:	68ea      	ldr	r2, [r5, #12]
   15d00:	7813      	ldrb	r3, [r2, #0]
   15d02:	2b45      	cmp	r3, #69
   15d04:	d1e1      	bne.n	15cca <d_type+0x33a>
   15d06:	1c53      	adds	r3, r2, #1
   15d08:	60eb      	str	r3, [r5, #12]
   15d0a:	9001      	str	r0, [sp, #4]
   15d0c:	e718      	b.n	15b40 <d_type+0x1b0>
   15d0e:	1c43      	adds	r3, r0, #1
   15d10:	60eb      	str	r3, [r5, #12]
   15d12:	4628      	mov	r0, r5
   15d14:	f7ff fe3c 	bl	15990 <d_type>
   15d18:	2120      	movs	r1, #32
   15d1a:	4602      	mov	r2, r0
   15d1c:	2300      	movs	r3, #0
   15d1e:	4628      	mov	r0, r5
   15d20:	f7ff fbc2 	bl	154a8 <d_make_comp>
   15d24:	9001      	str	r0, [sp, #4]
   15d26:	e70b      	b.n	15b40 <d_type+0x1b0>
   15d28:	1c41      	adds	r1, r0, #1
   15d2a:	60e9      	str	r1, [r5, #12]
   15d2c:	7842      	ldrb	r2, [r0, #1]
   15d2e:	2a5f      	cmp	r2, #95
   15d30:	d04d      	beq.n	15dce <d_type+0x43e>
   15d32:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   15d36:	b2db      	uxtb	r3, r3
   15d38:	2b09      	cmp	r3, #9
   15d3a:	d857      	bhi.n	15dec <d_type+0x45c>
   15d3c:	4608      	mov	r0, r1
   15d3e:	3001      	adds	r0, #1
   15d40:	60e8      	str	r0, [r5, #12]
   15d42:	7803      	ldrb	r3, [r0, #0]
   15d44:	3b30      	subs	r3, #48
   15d46:	b2db      	uxtb	r3, r3
   15d48:	2b09      	cmp	r3, #9
   15d4a:	d9f8      	bls.n	15d3e <d_type+0x3ae>
   15d4c:	f8d5 c014 	ldr.w	ip, [r5, #20]
   15d50:	69ab      	ldr	r3, [r5, #24]
   15d52:	459c      	cmp	ip, r3
   15d54:	dab9      	bge.n	15cca <d_type+0x33a>
   15d56:	ea4f 038c 	mov.w	r3, ip, lsl #2
   15d5a:	ea4f 120c 	mov.w	r2, ip, lsl #4
   15d5e:	692c      	ldr	r4, [r5, #16]
   15d60:	1ad2      	subs	r2, r2, r3
   15d62:	18a6      	adds	r6, r4, r2
   15d64:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   15d68:	616b      	str	r3, [r5, #20]
   15d6a:	d0ae      	beq.n	15cca <d_type+0x33a>
   15d6c:	1a40      	subs	r0, r0, r1
   15d6e:	d0ac      	beq.n	15cca <d_type+0x33a>
   15d70:	2300      	movs	r3, #0
   15d72:	54a3      	strb	r3, [r4, r2]
   15d74:	6071      	str	r1, [r6, #4]
   15d76:	60b0      	str	r0, [r6, #8]
   15d78:	68e9      	ldr	r1, [r5, #12]
   15d7a:	780b      	ldrb	r3, [r1, #0]
   15d7c:	2b5f      	cmp	r3, #95
   15d7e:	d1a4      	bne.n	15cca <d_type+0x33a>
   15d80:	1c4b      	adds	r3, r1, #1
   15d82:	60eb      	str	r3, [r5, #12]
   15d84:	4628      	mov	r0, r5
   15d86:	f7ff fe03 	bl	15990 <d_type>
   15d8a:	2125      	movs	r1, #37
   15d8c:	4603      	mov	r3, r0
   15d8e:	4632      	mov	r2, r6
   15d90:	4628      	mov	r0, r5
   15d92:	f7ff fb89 	bl	154a8 <d_make_comp>
   15d96:	9001      	str	r0, [sp, #4]
   15d98:	e6d2      	b.n	15b40 <d_type+0x1b0>
   15d9a:	4628      	mov	r0, r5
   15d9c:	f000 fdb6 	bl	1690c <d_name>
   15da0:	9001      	str	r0, [sp, #4]
   15da2:	e6cd      	b.n	15b40 <d_type+0x1b0>
   15da4:	2100      	movs	r1, #0
   15da6:	e6f6      	b.n	15b96 <d_type+0x206>
   15da8:	4628      	mov	r0, r5
   15daa:	f7ff fdf1 	bl	15990 <d_type>
   15dae:	6020      	str	r0, [r4, #0]
   15db0:	2800      	cmp	r0, #0
   15db2:	d08a      	beq.n	15cca <d_type+0x33a>
   15db4:	456c      	cmp	r4, sp
   15db6:	d002      	beq.n	15dbe <d_type+0x42e>
   15db8:	7803      	ldrb	r3, [r0, #0]
   15dba:	2b24      	cmp	r3, #36
   15dbc:	d121      	bne.n	15e02 <d_type+0x472>
   15dbe:	4628      	mov	r0, r5
   15dc0:	2126      	movs	r1, #38
   15dc2:	463a      	mov	r2, r7
   15dc4:	9b00      	ldr	r3, [sp, #0]
   15dc6:	f7ff fb6f 	bl	154a8 <d_make_comp>
   15dca:	9001      	str	r0, [sp, #4]
   15dcc:	e6b8      	b.n	15b40 <d_type+0x1b0>
   15dce:	2600      	movs	r6, #0
   15dd0:	e7d6      	b.n	15d80 <d_type+0x3f0>
   15dd2:	4628      	mov	r0, r5
   15dd4:	f000 fd9a 	bl	1690c <d_name>
   15dd8:	2800      	cmp	r0, #0
   15dda:	f43f adf0 	beq.w	159be <d_type+0x2e>
   15dde:	7803      	ldrb	r3, [r0, #0]
   15de0:	9001      	str	r0, [sp, #4]
   15de2:	2b15      	cmp	r3, #21
   15de4:	f47f aeb0 	bne.w	15b48 <d_type+0x1b8>
   15de8:	9801      	ldr	r0, [sp, #4]
   15dea:	e5e9      	b.n	159c0 <d_type+0x30>
   15dec:	4628      	mov	r0, r5
   15dee:	f000 fca9 	bl	16744 <d_expression>
   15df2:	4606      	mov	r6, r0
   15df4:	2800      	cmp	r0, #0
   15df6:	d1bf      	bne.n	15d78 <d_type+0x3e8>
   15df8:	2000      	movs	r0, #0
   15dfa:	e767      	b.n	15ccc <d_type+0x33c>
   15dfc:	1c53      	adds	r3, r2, #1
   15dfe:	60eb      	str	r3, [r5, #12]
   15e00:	e779      	b.n	15cf6 <d_type+0x366>
   15e02:	9900      	ldr	r1, [sp, #0]
   15e04:	2900      	cmp	r1, #0
   15e06:	f43f af60 	beq.w	15cca <d_type+0x33a>
   15e0a:	6a2a      	ldr	r2, [r5, #32]
   15e0c:	6a6b      	ldr	r3, [r5, #36]
   15e0e:	429a      	cmp	r2, r3
   15e10:	f6bf af5b 	bge.w	15cca <d_type+0x33a>
   15e14:	69eb      	ldr	r3, [r5, #28]
   15e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   15e1a:	3201      	adds	r2, #1
   15e1c:	622a      	str	r2, [r5, #32]
   15e1e:	e7ce      	b.n	15dbe <d_type+0x42e>
   15e20:	0001f568 	.word	0x0001f568

00015e24 <d_operator_name>:
   15e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15e28:	68c2      	ldr	r2, [r0, #12]
   15e2a:	4606      	mov	r6, r0
   15e2c:	7814      	ldrb	r4, [r2, #0]
   15e2e:	2c00      	cmp	r4, #0
   15e30:	d02a      	beq.n	15e88 <d_operator_name+0x64>
   15e32:	1c53      	adds	r3, r2, #1
   15e34:	60c3      	str	r3, [r0, #12]
   15e36:	7855      	ldrb	r5, [r2, #1]
   15e38:	b10d      	cbz	r5, 15e3e <d_operator_name+0x1a>
   15e3a:	3301      	adds	r3, #1
   15e3c:	60c3      	str	r3, [r0, #12]
   15e3e:	2c76      	cmp	r4, #118
   15e40:	d143      	bne.n	15eca <d_operator_name+0xa6>
   15e42:	f1a5 0730 	sub.w	r7, r5, #48	; 0x30
   15e46:	b2fb      	uxtb	r3, r7
   15e48:	2b09      	cmp	r3, #9
   15e4a:	d81e      	bhi.n	15e8a <d_operator_name+0x66>
   15e4c:	4630      	mov	r0, r6
   15e4e:	f7ff fd2d 	bl	158ac <d_source_name>
   15e52:	6971      	ldr	r1, [r6, #20]
   15e54:	69b3      	ldr	r3, [r6, #24]
   15e56:	4604      	mov	r4, r0
   15e58:	4299      	cmp	r1, r3
   15e5a:	da2f      	bge.n	15ebc <d_operator_name+0x98>
   15e5c:	008a      	lsls	r2, r1, #2
   15e5e:	010b      	lsls	r3, r1, #4
   15e60:	ebc2 0c03 	rsb	ip, r2, r3
   15e64:	6932      	ldr	r2, [r6, #16]
   15e66:	1c4b      	adds	r3, r1, #1
   15e68:	eb12 000c 	adds.w	r0, r2, ip
   15e6c:	6173      	str	r3, [r6, #20]
   15e6e:	bf14      	ite	ne
   15e70:	2300      	movne	r3, #0
   15e72:	2301      	moveq	r3, #1
   15e74:	ea53 73d7 	orrs.w	r3, r3, r7, lsr #31
   15e78:	d120      	bne.n	15ebc <d_operator_name+0x98>
   15e7a:	b1fc      	cbz	r4, 15ebc <d_operator_name+0x98>
   15e7c:	232a      	movs	r3, #42
   15e7e:	f802 300c 	strb.w	r3, [r2, ip]
   15e82:	6047      	str	r7, [r0, #4]
   15e84:	6084      	str	r4, [r0, #8]
   15e86:	e01a      	b.n	15ebe <d_operator_name+0x9a>
   15e88:	4625      	mov	r5, r4
   15e8a:	4f24      	ldr	r7, [pc, #144]	(15f1c <d_operator_name+0xf8>)
   15e8c:	2000      	movs	r0, #0
   15e8e:	f04f 0c31 	mov.w	ip, #49	; 0x31
   15e92:	ebc0 030c 	rsb	r3, r0, ip
   15e96:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   15e9a:	eb00 0163 	add.w	r1, r0, r3, asr #1
   15e9e:	010a      	lsls	r2, r1, #4
   15ea0:	58bb      	ldr	r3, [r7, r2]
   15ea2:	eb07 0802 	add.w	r8, r7, r2
   15ea6:	781a      	ldrb	r2, [r3, #0]
   15ea8:	4294      	cmp	r4, r2
   15eaa:	d10a      	bne.n	15ec2 <d_operator_name+0x9e>
   15eac:	785b      	ldrb	r3, [r3, #1]
   15eae:	429d      	cmp	r5, r3
   15eb0:	d020      	beq.n	15ef4 <d_operator_name+0xd0>
   15eb2:	42ab      	cmp	r3, r5
   15eb4:	d907      	bls.n	15ec6 <d_operator_name+0xa2>
   15eb6:	468c      	mov	ip, r1
   15eb8:	4560      	cmp	r0, ip
   15eba:	d1ea      	bne.n	15e92 <d_operator_name+0x6e>
   15ebc:	2000      	movs	r0, #0
   15ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15ec2:	42a2      	cmp	r2, r4
   15ec4:	d8f7      	bhi.n	15eb6 <d_operator_name+0x92>
   15ec6:	1c48      	adds	r0, r1, #1
   15ec8:	e7f6      	b.n	15eb8 <d_operator_name+0x94>
   15eca:	2c63      	cmp	r4, #99
   15ecc:	bf14      	ite	ne
   15ece:	2300      	movne	r3, #0
   15ed0:	2301      	moveq	r3, #1
   15ed2:	2d76      	cmp	r5, #118
   15ed4:	bf14      	ite	ne
   15ed6:	2300      	movne	r3, #0
   15ed8:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   15edc:	2b00      	cmp	r3, #0
   15ede:	d0d4      	beq.n	15e8a <d_operator_name+0x66>
   15ee0:	4630      	mov	r0, r6
   15ee2:	f7ff fd55 	bl	15990 <d_type>
   15ee6:	212b      	movs	r1, #43
   15ee8:	4602      	mov	r2, r0
   15eea:	2300      	movs	r3, #0
   15eec:	4630      	mov	r0, r6
   15eee:	f7ff fadb 	bl	154a8 <d_make_comp>
   15ef2:	e7e4      	b.n	15ebe <d_operator_name+0x9a>
   15ef4:	6971      	ldr	r1, [r6, #20]
   15ef6:	69b3      	ldr	r3, [r6, #24]
   15ef8:	4299      	cmp	r1, r3
   15efa:	dadf      	bge.n	15ebc <d_operator_name+0x98>
   15efc:	008b      	lsls	r3, r1, #2
   15efe:	010a      	lsls	r2, r1, #4
   15f00:	f8d6 c010 	ldr.w	ip, [r6, #16]
   15f04:	1ad2      	subs	r2, r2, r3
   15f06:	1c4b      	adds	r3, r1, #1
   15f08:	eb1c 0002 	adds.w	r0, ip, r2
   15f0c:	6173      	str	r3, [r6, #20]
   15f0e:	d0d6      	beq.n	15ebe <d_operator_name+0x9a>
   15f10:	2329      	movs	r3, #41
   15f12:	f80c 3002 	strb.w	r3, [ip, r2]
   15f16:	f8c0 8004 	str.w	r8, [r0, #4]
   15f1a:	e7d0      	b.n	15ebe <d_operator_name+0x9a>
   15f1c:	0001ff04 	.word	0x0001ff04

00015f20 <d_unqualified_name>:
   15f20:	b570      	push	{r4, r5, r6, lr}
   15f22:	68c1      	ldr	r1, [r0, #12]
   15f24:	4604      	mov	r4, r0
   15f26:	780a      	ldrb	r2, [r1, #0]
   15f28:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   15f2c:	b2db      	uxtb	r3, r3
   15f2e:	2b09      	cmp	r3, #9
   15f30:	d927      	bls.n	15f82 <d_unqualified_name+0x62>
   15f32:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   15f36:	b2db      	uxtb	r3, r3
   15f38:	2b19      	cmp	r3, #25
   15f3a:	d914      	bls.n	15f66 <d_unqualified_name+0x46>
   15f3c:	f1a2 0343 	sub.w	r3, r2, #67	; 0x43
   15f40:	b2db      	uxtb	r3, r3
   15f42:	2b01      	cmp	r3, #1
   15f44:	d870      	bhi.n	16028 <d_unqualified_name+0x108>
   15f46:	6ac5      	ldr	r5, [r0, #44]
   15f48:	b13d      	cbz	r5, 15f5a <d_unqualified_name+0x3a>
   15f4a:	782b      	ldrb	r3, [r5, #0]
   15f4c:	2b00      	cmp	r3, #0
   15f4e:	d11b      	bne.n	15f88 <d_unqualified_name+0x68>
   15f50:	68aa      	ldr	r2, [r5, #8]
   15f52:	6b23      	ldr	r3, [r4, #48]
   15f54:	189b      	adds	r3, r3, r2
   15f56:	6323      	str	r3, [r4, #48]
   15f58:	780a      	ldrb	r2, [r1, #0]
   15f5a:	2a43      	cmp	r2, #67
   15f5c:	d018      	beq.n	15f90 <d_unqualified_name+0x70>
   15f5e:	2a44      	cmp	r2, #68
   15f60:	d03c      	beq.n	15fdc <d_unqualified_name+0xbc>
   15f62:	2000      	movs	r0, #0
   15f64:	bd70      	pop	{r4, r5, r6, pc}
   15f66:	f7ff ff5d 	bl	15e24 <d_operator_name>
   15f6a:	2800      	cmp	r0, #0
   15f6c:	d0fa      	beq.n	15f64 <d_unqualified_name+0x44>
   15f6e:	7803      	ldrb	r3, [r0, #0]
   15f70:	2b29      	cmp	r3, #41
   15f72:	d1f7      	bne.n	15f64 <d_unqualified_name+0x44>
   15f74:	6843      	ldr	r3, [r0, #4]
   15f76:	6b22      	ldr	r2, [r4, #48]
   15f78:	6899      	ldr	r1, [r3, #8]
   15f7a:	1852      	adds	r2, r2, r1
   15f7c:	3207      	adds	r2, #7
   15f7e:	6322      	str	r2, [r4, #48]
   15f80:	e7f0      	b.n	15f64 <d_unqualified_name+0x44>
   15f82:	f7ff fc93 	bl	158ac <d_source_name>
   15f86:	e7ed      	b.n	15f64 <d_unqualified_name+0x44>
   15f88:	2b15      	cmp	r3, #21
   15f8a:	d0e1      	beq.n	15f50 <d_unqualified_name+0x30>
   15f8c:	2a43      	cmp	r2, #67
   15f8e:	d1e6      	bne.n	15f5e <d_unqualified_name+0x3e>
   15f90:	784b      	ldrb	r3, [r1, #1]
   15f92:	2b32      	cmp	r3, #50
   15f94:	d05d      	beq.n	16052 <d_unqualified_name+0x132>
   15f96:	2b33      	cmp	r3, #51
   15f98:	d059      	beq.n	1604e <d_unqualified_name+0x12e>
   15f9a:	2b31      	cmp	r3, #49
   15f9c:	d1e1      	bne.n	15f62 <d_unqualified_name+0x42>
   15f9e:	2601      	movs	r6, #1
   15fa0:	1c8b      	adds	r3, r1, #2
   15fa2:	60e3      	str	r3, [r4, #12]
   15fa4:	6961      	ldr	r1, [r4, #20]
   15fa6:	69a3      	ldr	r3, [r4, #24]
   15fa8:	4299      	cmp	r1, r3
   15faa:	dada      	bge.n	15f62 <d_unqualified_name+0x42>
   15fac:	008a      	lsls	r2, r1, #2
   15fae:	010b      	lsls	r3, r1, #4
   15fb0:	ebc2 0c03 	rsb	ip, r2, r3
   15fb4:	6922      	ldr	r2, [r4, #16]
   15fb6:	1c4b      	adds	r3, r1, #1
   15fb8:	eb12 000c 	adds.w	r0, r2, ip
   15fbc:	6163      	str	r3, [r4, #20]
   15fbe:	bf14      	ite	ne
   15fc0:	2300      	movne	r3, #0
   15fc2:	2301      	moveq	r3, #1
   15fc4:	2d00      	cmp	r5, #0
   15fc6:	bf08      	it	eq
   15fc8:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d1c8      	bne.n	15f62 <d_unqualified_name+0x42>
   15fd0:	3306      	adds	r3, #6
   15fd2:	f802 300c 	strb.w	r3, [r2, ip]
   15fd6:	7106      	strb	r6, [r0, #4]
   15fd8:	6085      	str	r5, [r0, #8]
   15fda:	e7c3      	b.n	15f64 <d_unqualified_name+0x44>
   15fdc:	784b      	ldrb	r3, [r1, #1]
   15fde:	2b31      	cmp	r3, #49
   15fe0:	d033      	beq.n	1604a <d_unqualified_name+0x12a>
   15fe2:	2b32      	cmp	r3, #50
   15fe4:	d02f      	beq.n	16046 <d_unqualified_name+0x126>
   15fe6:	2b30      	cmp	r3, #48
   15fe8:	d1bb      	bne.n	15f62 <d_unqualified_name+0x42>
   15fea:	2601      	movs	r6, #1
   15fec:	1c8b      	adds	r3, r1, #2
   15fee:	60e3      	str	r3, [r4, #12]
   15ff0:	6961      	ldr	r1, [r4, #20]
   15ff2:	69a3      	ldr	r3, [r4, #24]
   15ff4:	4299      	cmp	r1, r3
   15ff6:	dab4      	bge.n	15f62 <d_unqualified_name+0x42>
   15ff8:	008a      	lsls	r2, r1, #2
   15ffa:	010b      	lsls	r3, r1, #4
   15ffc:	ebc2 0c03 	rsb	ip, r2, r3
   16000:	6922      	ldr	r2, [r4, #16]
   16002:	1c4b      	adds	r3, r1, #1
   16004:	eb12 000c 	adds.w	r0, r2, ip
   16008:	6163      	str	r3, [r4, #20]
   1600a:	bf14      	ite	ne
   1600c:	2300      	movne	r3, #0
   1600e:	2301      	moveq	r3, #1
   16010:	2d00      	cmp	r5, #0
   16012:	bf08      	it	eq
   16014:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   16018:	2b00      	cmp	r3, #0
   1601a:	d1a2      	bne.n	15f62 <d_unqualified_name+0x42>
   1601c:	3307      	adds	r3, #7
   1601e:	f802 300c 	strb.w	r3, [r2, ip]
   16022:	7106      	strb	r6, [r0, #4]
   16024:	6085      	str	r5, [r0, #8]
   16026:	e79d      	b.n	15f64 <d_unqualified_name+0x44>
   16028:	2a4c      	cmp	r2, #76
   1602a:	d19a      	bne.n	15f62 <d_unqualified_name+0x42>
   1602c:	1c4b      	adds	r3, r1, #1
   1602e:	60c3      	str	r3, [r0, #12]
   16030:	f7ff fc3c 	bl	158ac <d_source_name>
   16034:	4605      	mov	r5, r0
   16036:	2800      	cmp	r0, #0
   16038:	d093      	beq.n	15f62 <d_unqualified_name+0x42>
   1603a:	68e2      	ldr	r2, [r4, #12]
   1603c:	7813      	ldrb	r3, [r2, #0]
   1603e:	2b5f      	cmp	r3, #95
   16040:	d009      	beq.n	16056 <d_unqualified_name+0x136>
   16042:	4628      	mov	r0, r5
   16044:	e78e      	b.n	15f64 <d_unqualified_name+0x44>
   16046:	2603      	movs	r6, #3
   16048:	e7d0      	b.n	15fec <d_unqualified_name+0xcc>
   1604a:	2602      	movs	r6, #2
   1604c:	e7ce      	b.n	15fec <d_unqualified_name+0xcc>
   1604e:	2603      	movs	r6, #3
   16050:	e7a6      	b.n	15fa0 <d_unqualified_name+0x80>
   16052:	2602      	movs	r6, #2
   16054:	e7a4      	b.n	15fa0 <d_unqualified_name+0x80>
   16056:	1c53      	adds	r3, r2, #1
   16058:	60e3      	str	r3, [r4, #12]
   1605a:	4620      	mov	r0, r4
   1605c:	f7ff fa76 	bl	1554c <d_number>
   16060:	2800      	cmp	r0, #0
   16062:	f6ff af7e 	blt.w	15f62 <d_unqualified_name+0x42>
   16066:	4628      	mov	r0, r5
   16068:	e77c      	b.n	15f64 <d_unqualified_name+0x44>
   1606a:	46c0      	nop			(mov r8, r8)

0001606c <d_bare_function_type>:
   1606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16070:	460e      	mov	r6, r1
   16072:	68c1      	ldr	r1, [r0, #12]
   16074:	b082      	sub	sp, #8
   16076:	780b      	ldrb	r3, [r1, #0]
   16078:	4605      	mov	r5, r0
   1607a:	2b4a      	cmp	r3, #74
   1607c:	d035      	beq.n	160ea <d_bare_function_type+0x7e>
   1607e:	2300      	movs	r3, #0
   16080:	af02      	add	r7, sp, #8
   16082:	f847 3d04 	str.w	r3, [r7, #-4]!
   16086:	4698      	mov	r8, r3
   16088:	e002      	b.n	16090 <d_bare_function_type+0x24>
   1608a:	68e9      	ldr	r1, [r5, #12]
   1608c:	4626      	mov	r6, r4
   1608e:	4680      	mov	r8, r0
   16090:	780a      	ldrb	r2, [r1, #0]
   16092:	2a45      	cmp	r2, #69
   16094:	bf14      	ite	ne
   16096:	2300      	movne	r3, #0
   16098:	2301      	moveq	r3, #1
   1609a:	2a00      	cmp	r2, #0
   1609c:	bf14      	ite	ne
   1609e:	461c      	movne	r4, r3
   160a0:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   160a4:	b9ac      	cbnz	r4, 160d2 <d_bare_function_type+0x66>
   160a6:	4628      	mov	r0, r5
   160a8:	f7ff fc72 	bl	15990 <d_type>
   160ac:	4602      	mov	r2, r0
   160ae:	b160      	cbz	r0, 160ca <d_bare_function_type+0x5e>
   160b0:	2e00      	cmp	r6, #0
   160b2:	d1ea      	bne.n	1608a <d_bare_function_type+0x1e>
   160b4:	4628      	mov	r0, r5
   160b6:	2127      	movs	r1, #39
   160b8:	4633      	mov	r3, r6
   160ba:	f7ff f9f5 	bl	154a8 <d_make_comp>
   160be:	6038      	str	r0, [r7, #0]
   160c0:	b118      	cbz	r0, 160ca <d_bare_function_type+0x5e>
   160c2:	f100 0708 	add.w	r7, r0, #8	; 0x8
   160c6:	68e9      	ldr	r1, [r5, #12]
   160c8:	e7e2      	b.n	16090 <d_bare_function_type+0x24>
   160ca:	2000      	movs	r0, #0
   160cc:	b002      	add	sp, #8
   160ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160d2:	9c01      	ldr	r4, [sp, #4]
   160d4:	2c00      	cmp	r4, #0
   160d6:	d0f8      	beq.n	160ca <d_bare_function_type+0x5e>
   160d8:	68a1      	ldr	r1, [r4, #8]
   160da:	b159      	cbz	r1, 160f4 <d_bare_function_type+0x88>
   160dc:	4628      	mov	r0, r5
   160de:	2124      	movs	r1, #36
   160e0:	4642      	mov	r2, r8
   160e2:	4623      	mov	r3, r4
   160e4:	f7ff f9e0 	bl	154a8 <d_make_comp>
   160e8:	e7f0      	b.n	160cc <d_bare_function_type+0x60>
   160ea:	1c4b      	adds	r3, r1, #1
   160ec:	60c3      	str	r3, [r0, #12]
   160ee:	2601      	movs	r6, #1
   160f0:	4619      	mov	r1, r3
   160f2:	e7c4      	b.n	1607e <d_bare_function_type+0x12>
   160f4:	6862      	ldr	r2, [r4, #4]
   160f6:	7813      	ldrb	r3, [r2, #0]
   160f8:	2b22      	cmp	r3, #34
   160fa:	d1ef      	bne.n	160dc <d_bare_function_type+0x70>
   160fc:	6852      	ldr	r2, [r2, #4]
   160fe:	7c13      	ldrb	r3, [r2, #16]
   16100:	2b09      	cmp	r3, #9
   16102:	d1eb      	bne.n	160dc <d_bare_function_type+0x70>
   16104:	6b2b      	ldr	r3, [r5, #48]
   16106:	6852      	ldr	r2, [r2, #4]
   16108:	9101      	str	r1, [sp, #4]
   1610a:	1a9b      	subs	r3, r3, r2
   1610c:	632b      	str	r3, [r5, #48]
   1610e:	460c      	mov	r4, r1
   16110:	e7e4      	b.n	160dc <d_bare_function_type+0x70>
   16112:	46c0      	nop			(mov r8, r8)

00016114 <d_encoding>:
   16114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16118:	460d      	mov	r5, r1
   1611a:	68c1      	ldr	r1, [r0, #12]
   1611c:	4606      	mov	r6, r0
   1611e:	780a      	ldrb	r2, [r1, #0]
   16120:	2a54      	cmp	r2, #84
   16122:	bf14      	ite	ne
   16124:	2300      	movne	r3, #0
   16126:	2301      	moveq	r3, #1
   16128:	2a47      	cmp	r2, #71
   1612a:	bf08      	it	eq
   1612c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   16130:	2b00      	cmp	r3, #0
   16132:	d14e      	bne.n	161d2 <d_encoding+0xbe>
   16134:	f000 fbea 	bl	1690c <d_name>
   16138:	1e2b      	subs	r3, r5, #0
   1613a:	bf18      	it	ne
   1613c:	2301      	movne	r3, #1
   1613e:	2800      	cmp	r0, #0
   16140:	bf0c      	ite	eq
   16142:	2300      	moveq	r3, #0
   16144:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   16148:	4604      	mov	r4, r0
   1614a:	bb0b      	cbnz	r3, 16190 <d_encoding+0x7c>
   1614c:	68f2      	ldr	r2, [r6, #12]
   1614e:	7812      	ldrb	r2, [r2, #0]
   16150:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   16154:	bf38      	it	cc
   16156:	2300      	movcc	r3, #0
   16158:	2c00      	cmp	r4, #0
   1615a:	bf08      	it	eq
   1615c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   16160:	2b00      	cmp	r3, #0
   16162:	d133      	bne.n	161cc <d_encoding+0xb8>
   16164:	2a45      	cmp	r2, #69
   16166:	d031      	beq.n	161cc <d_encoding+0xb8>
   16168:	4622      	mov	r2, r4
   1616a:	7813      	ldrb	r3, [r2, #0]
   1616c:	2b04      	cmp	r3, #4
   1616e:	f000 80cd 	beq.w	1630c <d_encoding+0x1f8>
   16172:	d302      	bcc.n	1617a <d_encoding+0x66>
   16174:	3b19      	subs	r3, #25
   16176:	2b02      	cmp	r3, #2
   16178:	d94f      	bls.n	1621a <d_encoding+0x106>
   1617a:	2100      	movs	r1, #0
   1617c:	4630      	mov	r0, r6
   1617e:	f7ff ff75 	bl	1606c <d_bare_function_type>
   16182:	2103      	movs	r1, #3
   16184:	4603      	mov	r3, r0
   16186:	4622      	mov	r2, r4
   16188:	4630      	mov	r0, r6
   1618a:	f7ff f98d 	bl	154a8 <d_make_comp>
   1618e:	e01e      	b.n	161ce <d_encoding+0xba>
   16190:	68b3      	ldr	r3, [r6, #8]
   16192:	f013 0f01 	tst.w	r3, #1	; 0x1
   16196:	d1d9      	bne.n	1614c <d_encoding+0x38>
   16198:	7822      	ldrb	r2, [r4, #0]
   1619a:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   1619e:	b2db      	uxtb	r3, r3
   161a0:	2b02      	cmp	r3, #2
   161a2:	d806      	bhi.n	161b2 <d_encoding+0x9e>
   161a4:	6864      	ldr	r4, [r4, #4]
   161a6:	7822      	ldrb	r2, [r4, #0]
   161a8:	f1a2 0319 	sub.w	r3, r2, #25	; 0x19
   161ac:	b2db      	uxtb	r3, r3
   161ae:	2b02      	cmp	r3, #2
   161b0:	d9f8      	bls.n	161a4 <d_encoding+0x90>
   161b2:	2a02      	cmp	r2, #2
   161b4:	4620      	mov	r0, r4
   161b6:	d10a      	bne.n	161ce <d_encoding+0xba>
   161b8:	68a2      	ldr	r2, [r4, #8]
   161ba:	e000      	b.n	161be <d_encoding+0xaa>
   161bc:	6852      	ldr	r2, [r2, #4]
   161be:	7813      	ldrb	r3, [r2, #0]
   161c0:	3b19      	subs	r3, #25
   161c2:	b2db      	uxtb	r3, r3
   161c4:	2b02      	cmp	r3, #2
   161c6:	d9f9      	bls.n	161bc <d_encoding+0xa8>
   161c8:	60a2      	str	r2, [r4, #8]
   161ca:	e000      	b.n	161ce <d_encoding+0xba>
   161cc:	4620      	mov	r0, r4
   161ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   161d2:	6b03      	ldr	r3, [r0, #48]
   161d4:	f103 0014 	add.w	r0, r3, #20	; 0x14
   161d8:	6330      	str	r0, [r6, #48]
   161da:	780b      	ldrb	r3, [r1, #0]
   161dc:	2b54      	cmp	r3, #84
   161de:	d020      	beq.n	16222 <d_encoding+0x10e>
   161e0:	2b47      	cmp	r3, #71
   161e2:	d001      	beq.n	161e8 <d_encoding+0xd4>
   161e4:	2000      	movs	r0, #0
   161e6:	e7f2      	b.n	161ce <d_encoding+0xba>
   161e8:	1c4b      	adds	r3, r1, #1
   161ea:	60f3      	str	r3, [r6, #12]
   161ec:	784a      	ldrb	r2, [r1, #1]
   161ee:	2a00      	cmp	r2, #0
   161f0:	d0f8      	beq.n	161e4 <d_encoding+0xd0>
   161f2:	3301      	adds	r3, #1
   161f4:	2a52      	cmp	r2, #82
   161f6:	60f3      	str	r3, [r6, #12]
   161f8:	f000 8189 	beq.w	1650e <d_encoding+0x3fa>
   161fc:	f200 8191 	bhi.w	16522 <d_encoding+0x40e>
   16200:	2a41      	cmp	r2, #65
   16202:	d1ef      	bne.n	161e4 <d_encoding+0xd0>
   16204:	2100      	movs	r1, #0
   16206:	4630      	mov	r0, r6
   16208:	f7ff ff84 	bl	16114 <d_encoding>
   1620c:	2114      	movs	r1, #20
   1620e:	4602      	mov	r2, r0
   16210:	2300      	movs	r3, #0
   16212:	4630      	mov	r0, r6
   16214:	f7ff f948 	bl	154a8 <d_make_comp>
   16218:	e7d9      	b.n	161ce <d_encoding+0xba>
   1621a:	6852      	ldr	r2, [r2, #4]
   1621c:	2a00      	cmp	r2, #0
   1621e:	d1a4      	bne.n	1616a <d_encoding+0x56>
   16220:	e7ab      	b.n	1617a <d_encoding+0x66>
   16222:	1c4a      	adds	r2, r1, #1
   16224:	60f2      	str	r2, [r6, #12]
   16226:	784b      	ldrb	r3, [r1, #1]
   16228:	2b00      	cmp	r3, #0
   1622a:	d0db      	beq.n	161e4 <d_encoding+0xd0>
   1622c:	3201      	adds	r2, #1
   1622e:	3b43      	subs	r3, #67
   16230:	60f2      	str	r2, [r6, #12]
   16232:	2b33      	cmp	r3, #51
   16234:	d8d6      	bhi.n	161e4 <d_encoding+0xd0>
   16236:	a101      	add	r1, pc, #4	(adr r1, 1623c <d_encoding+0x128>)
   16238:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1623c:	00016451 	.word	0x00016451
   16240:	000161e5 	.word	0x000161e5
   16244:	000161e5 	.word	0x000161e5
   16248:	000164a1 	.word	0x000164a1
   1624c:	000161e5 	.word	0x000161e5
   16250:	000161e5 	.word	0x000161e5
   16254:	0001648d 	.word	0x0001648d
   16258:	000164fb 	.word	0x000164fb
   1625c:	000161e5 	.word	0x000161e5
   16260:	000161e5 	.word	0x000161e5
   16264:	000161e5 	.word	0x000161e5
   16268:	000161e5 	.word	0x000161e5
   1626c:	000161e5 	.word	0x000161e5
   16270:	000161e5 	.word	0x000161e5
   16274:	000161e5 	.word	0x000161e5
   16278:	000161e5 	.word	0x000161e5
   1627c:	000164e7 	.word	0x000164e7
   16280:	000164cd 	.word	0x000164cd
   16284:	000161e5 	.word	0x000161e5
   16288:	000164b5 	.word	0x000164b5
   1628c:	000161e5 	.word	0x000161e5
   16290:	000161e5 	.word	0x000161e5
   16294:	000161e5 	.word	0x000161e5
   16298:	000161e5 	.word	0x000161e5
   1629c:	000161e5 	.word	0x000161e5
   162a0:	000161e5 	.word	0x000161e5
   162a4:	000161e5 	.word	0x000161e5
   162a8:	000161e5 	.word	0x000161e5
   162ac:	000161e5 	.word	0x000161e5
   162b0:	000161e5 	.word	0x000161e5
   162b4:	000161e5 	.word	0x000161e5
   162b8:	000161e5 	.word	0x000161e5
   162bc:	000163fb 	.word	0x000163fb
   162c0:	000161e5 	.word	0x000161e5
   162c4:	000161e5 	.word	0x000161e5
   162c8:	000161e5 	.word	0x000161e5
   162cc:	000161e5 	.word	0x000161e5
   162d0:	000163d7 	.word	0x000163d7
   162d4:	000161e5 	.word	0x000161e5
   162d8:	000161e5 	.word	0x000161e5
   162dc:	000161e5 	.word	0x000161e5
   162e0:	000161e5 	.word	0x000161e5
   162e4:	000161e5 	.word	0x000161e5
   162e8:	000161e5 	.word	0x000161e5
   162ec:	000161e5 	.word	0x000161e5
   162f0:	000161e5 	.word	0x000161e5
   162f4:	000161e5 	.word	0x000161e5
   162f8:	000161e5 	.word	0x000161e5
   162fc:	000161e5 	.word	0x000161e5
   16300:	000161e5 	.word	0x000161e5
   16304:	000161e5 	.word	0x000161e5
   16308:	0001642d 	.word	0x0001642d
   1630c:	6852      	ldr	r2, [r2, #4]
   1630e:	2a00      	cmp	r2, #0
   16310:	d05f      	beq.n	163d2 <d_encoding+0x2be>
   16312:	7813      	ldrb	r3, [r2, #0]
   16314:	3b01      	subs	r3, #1
   16316:	2b2a      	cmp	r3, #42
   16318:	d85b      	bhi.n	163d2 <d_encoding+0x2be>
   1631a:	a101      	add	r1, pc, #4	(adr r1, 16320 <d_encoding+0x20c>)
   1631c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   16320:	000163cd 	.word	0x000163cd
   16324:	000163cd 	.word	0x000163cd
   16328:	000163d3 	.word	0x000163d3
   1632c:	000163d3 	.word	0x000163d3
   16330:	000163d3 	.word	0x000163d3
   16334:	0001617b 	.word	0x0001617b
   16338:	0001617b 	.word	0x0001617b
   1633c:	000163d3 	.word	0x000163d3
   16340:	000163d3 	.word	0x000163d3
   16344:	000163d3 	.word	0x000163d3
   16348:	000163d3 	.word	0x000163d3
   1634c:	000163d3 	.word	0x000163d3
   16350:	000163d3 	.word	0x000163d3
   16354:	000163d3 	.word	0x000163d3
   16358:	000163d3 	.word	0x000163d3
   1635c:	000163d3 	.word	0x000163d3
   16360:	000163d3 	.word	0x000163d3
   16364:	000163d3 	.word	0x000163d3
   16368:	000163d3 	.word	0x000163d3
   1636c:	000163d3 	.word	0x000163d3
   16370:	000163d3 	.word	0x000163d3
   16374:	000163d3 	.word	0x000163d3
   16378:	000163d3 	.word	0x000163d3
   1637c:	000163d3 	.word	0x000163d3
   16380:	000163d3 	.word	0x000163d3
   16384:	000163d3 	.word	0x000163d3
   16388:	000163d3 	.word	0x000163d3
   1638c:	000163d3 	.word	0x000163d3
   16390:	000163d3 	.word	0x000163d3
   16394:	000163d3 	.word	0x000163d3
   16398:	000163d3 	.word	0x000163d3
   1639c:	000163d3 	.word	0x000163d3
   163a0:	000163d3 	.word	0x000163d3
   163a4:	000163d3 	.word	0x000163d3
   163a8:	000163d3 	.word	0x000163d3
   163ac:	000163d3 	.word	0x000163d3
   163b0:	000163d3 	.word	0x000163d3
   163b4:	000163d3 	.word	0x000163d3
   163b8:	000163d3 	.word	0x000163d3
   163bc:	000163d3 	.word	0x000163d3
   163c0:	000163d3 	.word	0x000163d3
   163c4:	000163d3 	.word	0x000163d3
   163c8:	0001617b 	.word	0x0001617b
   163cc:	6892      	ldr	r2, [r2, #8]
   163ce:	2a00      	cmp	r2, #0
   163d0:	d19f      	bne.n	16312 <d_encoding+0x1fe>
   163d2:	2101      	movs	r1, #1
   163d4:	e6d2      	b.n	1617c <d_encoding+0x68>
   163d6:	4630      	mov	r0, r6
   163d8:	2168      	movs	r1, #104
   163da:	f7ff f8e3 	bl	155a4 <d_call_offset>
   163de:	2800      	cmp	r0, #0
   163e0:	f43f af00 	beq.w	161e4 <d_encoding+0xd0>
   163e4:	2100      	movs	r1, #0
   163e6:	4630      	mov	r0, r6
   163e8:	f7ff fe94 	bl	16114 <d_encoding>
   163ec:	210e      	movs	r1, #14
   163ee:	4602      	mov	r2, r0
   163f0:	2300      	movs	r3, #0
   163f2:	4630      	mov	r0, r6
   163f4:	f7ff f858 	bl	154a8 <d_make_comp>
   163f8:	e6e9      	b.n	161ce <d_encoding+0xba>
   163fa:	4630      	mov	r0, r6
   163fc:	2100      	movs	r1, #0
   163fe:	f7ff f8d1 	bl	155a4 <d_call_offset>
   16402:	2800      	cmp	r0, #0
   16404:	f43f aeee 	beq.w	161e4 <d_encoding+0xd0>
   16408:	4630      	mov	r0, r6
   1640a:	2100      	movs	r1, #0
   1640c:	f7ff f8ca 	bl	155a4 <d_call_offset>
   16410:	2800      	cmp	r0, #0
   16412:	f43f aee7 	beq.w	161e4 <d_encoding+0xd0>
   16416:	2100      	movs	r1, #0
   16418:	4630      	mov	r0, r6
   1641a:	f7ff fe7b 	bl	16114 <d_encoding>
   1641e:	2110      	movs	r1, #16
   16420:	4602      	mov	r2, r0
   16422:	2300      	movs	r3, #0
   16424:	4630      	mov	r0, r6
   16426:	f7ff f83f 	bl	154a8 <d_make_comp>
   1642a:	e6d0      	b.n	161ce <d_encoding+0xba>
   1642c:	4630      	mov	r0, r6
   1642e:	2176      	movs	r1, #118
   16430:	f7ff f8b8 	bl	155a4 <d_call_offset>
   16434:	2800      	cmp	r0, #0
   16436:	f43f aed5 	beq.w	161e4 <d_encoding+0xd0>
   1643a:	2100      	movs	r1, #0
   1643c:	4630      	mov	r0, r6
   1643e:	f7ff fe69 	bl	16114 <d_encoding>
   16442:	210f      	movs	r1, #15
   16444:	4602      	mov	r2, r0
   16446:	2300      	movs	r3, #0
   16448:	4630      	mov	r0, r6
   1644a:	f7ff f82d 	bl	154a8 <d_make_comp>
   1644e:	e6be      	b.n	161ce <d_encoding+0xba>
   16450:	4630      	mov	r0, r6
   16452:	f7ff fa9d 	bl	15990 <d_type>
   16456:	4604      	mov	r4, r0
   16458:	4630      	mov	r0, r6
   1645a:	f7ff f877 	bl	1554c <d_number>
   1645e:	2800      	cmp	r0, #0
   16460:	f6ff aec0 	blt.w	161e4 <d_encoding+0xd0>
   16464:	68f2      	ldr	r2, [r6, #12]
   16466:	7813      	ldrb	r3, [r2, #0]
   16468:	2b5f      	cmp	r3, #95
   1646a:	f47f aebb 	bne.w	161e4 <d_encoding+0xd0>
   1646e:	1c53      	adds	r3, r2, #1
   16470:	60f3      	str	r3, [r6, #12]
   16472:	4630      	mov	r0, r6
   16474:	f7ff fa8c 	bl	15990 <d_type>
   16478:	6b33      	ldr	r3, [r6, #48]
   1647a:	4602      	mov	r2, r0
   1647c:	3305      	adds	r3, #5
   1647e:	6333      	str	r3, [r6, #48]
   16480:	4630      	mov	r0, r6
   16482:	210a      	movs	r1, #10
   16484:	4623      	mov	r3, r4
   16486:	f7ff f80f 	bl	154a8 <d_make_comp>
   1648a:	e6a0      	b.n	161ce <d_encoding+0xba>
   1648c:	4630      	mov	r0, r6
   1648e:	f7ff fa7f 	bl	15990 <d_type>
   16492:	210b      	movs	r1, #11
   16494:	4602      	mov	r2, r0
   16496:	2300      	movs	r3, #0
   16498:	4630      	mov	r0, r6
   1649a:	f7ff f805 	bl	154a8 <d_make_comp>
   1649e:	e696      	b.n	161ce <d_encoding+0xba>
   164a0:	4630      	mov	r0, r6
   164a2:	f7ff fa75 	bl	15990 <d_type>
   164a6:	210d      	movs	r1, #13
   164a8:	4602      	mov	r2, r0
   164aa:	2300      	movs	r3, #0
   164ac:	4630      	mov	r0, r6
   164ae:	f7fe fffb 	bl	154a8 <d_make_comp>
   164b2:	e68c      	b.n	161ce <d_encoding+0xba>
   164b4:	1f43      	subs	r3, r0, #5
   164b6:	6333      	str	r3, [r6, #48]
   164b8:	4630      	mov	r0, r6
   164ba:	f7ff fa69 	bl	15990 <d_type>
   164be:	2108      	movs	r1, #8
   164c0:	4602      	mov	r2, r0
   164c2:	2300      	movs	r3, #0
   164c4:	4630      	mov	r0, r6
   164c6:	f7fe ffef 	bl	154a8 <d_make_comp>
   164ca:	e680      	b.n	161ce <d_encoding+0xba>
   164cc:	f1a0 030a 	sub.w	r3, r0, #10	; 0xa
   164d0:	6333      	str	r3, [r6, #48]
   164d2:	4630      	mov	r0, r6
   164d4:	f7ff fa5c 	bl	15990 <d_type>
   164d8:	2109      	movs	r1, #9
   164da:	4602      	mov	r2, r0
   164dc:	2300      	movs	r3, #0
   164de:	4630      	mov	r0, r6
   164e0:	f7fe ffe2 	bl	154a8 <d_make_comp>
   164e4:	e673      	b.n	161ce <d_encoding+0xba>
   164e6:	4630      	mov	r0, r6
   164e8:	f7ff fa52 	bl	15990 <d_type>
   164ec:	210c      	movs	r1, #12
   164ee:	4602      	mov	r2, r0
   164f0:	2300      	movs	r3, #0
   164f2:	4630      	mov	r0, r6
   164f4:	f7fe ffd8 	bl	154a8 <d_make_comp>
   164f8:	e669      	b.n	161ce <d_encoding+0xba>
   164fa:	4630      	mov	r0, r6
   164fc:	f7ff fa48 	bl	15990 <d_type>
   16500:	2111      	movs	r1, #17
   16502:	4602      	mov	r2, r0
   16504:	2300      	movs	r3, #0
   16506:	4630      	mov	r0, r6
   16508:	f7fe ffce 	bl	154a8 <d_make_comp>
   1650c:	e65f      	b.n	161ce <d_encoding+0xba>
   1650e:	4630      	mov	r0, r6
   16510:	f000 f9fc 	bl	1690c <d_name>
   16514:	2113      	movs	r1, #19
   16516:	4602      	mov	r2, r0
   16518:	2300      	movs	r3, #0
   1651a:	4630      	mov	r0, r6
   1651c:	f7fe ffc4 	bl	154a8 <d_make_comp>
   16520:	e655      	b.n	161ce <d_encoding+0xba>
   16522:	2a56      	cmp	r2, #86
   16524:	d04f      	beq.n	165c6 <d_encoding+0x4b2>
   16526:	2a72      	cmp	r2, #114
   16528:	f47f ae5c 	bne.w	161e4 <d_encoding+0xd0>
   1652c:	4630      	mov	r0, r6
   1652e:	f7ff f80d 	bl	1554c <d_number>
   16532:	2801      	cmp	r0, #1
   16534:	f77f ae56 	ble.w	161e4 <d_encoding+0xd0>
   16538:	68f3      	ldr	r3, [r6, #12]
   1653a:	781a      	ldrb	r2, [r3, #0]
   1653c:	2a00      	cmp	r2, #0
   1653e:	f43f ae51 	beq.w	161e4 <d_encoding+0xd0>
   16542:	1c5d      	adds	r5, r3, #1
   16544:	2a5f      	cmp	r2, #95
   16546:	60f5      	str	r5, [r6, #12]
   16548:	f47f ae4c 	bne.w	161e4 <d_encoding+0xd0>
   1654c:	f04f 0800 	mov.w	r8, #0	; 0x0
   16550:	1e47      	subs	r7, r0, #1
   16552:	46c2      	mov	sl, r8
   16554:	f04f 0936 	mov.w	r9, #54	; 0x36
   16558:	782b      	ldrb	r3, [r5, #0]
   1655a:	2b00      	cmp	r3, #0
   1655c:	f43f ae42 	beq.w	161e4 <d_encoding+0xd0>
   16560:	2b24      	cmp	r3, #36
   16562:	d054      	beq.n	1660e <d_encoding+0x4fa>
   16564:	2f01      	cmp	r7, #1
   16566:	dd4f      	ble.n	16608 <d_encoding+0x4f4>
   16568:	786b      	ldrb	r3, [r5, #1]
   1656a:	2b00      	cmp	r3, #0
   1656c:	d04c      	beq.n	16608 <d_encoding+0x4f4>
   1656e:	f04f 0c01 	mov.w	ip, #1	; 0x1
   16572:	e007      	b.n	16584 <d_encoding+0x470>
   16574:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   16578:	45bc      	cmp	ip, r7
   1657a:	da05      	bge.n	16588 <d_encoding+0x474>
   1657c:	f815 300c 	ldrb.w	r3, [r5, ip]
   16580:	46e6      	mov	lr, ip
   16582:	b113      	cbz	r3, 1658a <d_encoding+0x476>
   16584:	2b24      	cmp	r3, #36
   16586:	d1f5      	bne.n	16574 <d_encoding+0x460>
   16588:	46e6      	mov	lr, ip
   1658a:	6970      	ldr	r0, [r6, #20]
   1658c:	69b3      	ldr	r3, [r6, #24]
   1658e:	4298      	cmp	r0, r3
   16590:	da35      	bge.n	165fe <d_encoding+0x4ea>
   16592:	0083      	lsls	r3, r0, #2
   16594:	0102      	lsls	r2, r0, #4
   16596:	6931      	ldr	r1, [r6, #16]
   16598:	1ad2      	subs	r2, r2, r3
   1659a:	1c43      	adds	r3, r0, #1
   1659c:	188c      	adds	r4, r1, r2
   1659e:	6173      	str	r3, [r6, #20]
   165a0:	d02d      	beq.n	165fe <d_encoding+0x4ea>
   165a2:	6065      	str	r5, [r4, #4]
   165a4:	f8c4 c008 	str.w	ip, [r4, #8]
   165a8:	68f3      	ldr	r3, [r6, #12]
   165aa:	f801 a002 	strb.w	sl, [r1, r2]
   165ae:	eb03 050e 	add.w	r5, r3, lr
   165b2:	60f5      	str	r5, [r6, #12]
   165b4:	ebcc 0707 	rsb	r7, ip, r7
   165b8:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   165bc:	d114      	bne.n	165e8 <d_encoding+0x4d4>
   165be:	2f00      	cmp	r7, #0
   165c0:	dd0b      	ble.n	165da <d_encoding+0x4c6>
   165c2:	46a0      	mov	r8, r4
   165c4:	e7c8      	b.n	16558 <d_encoding+0x444>
   165c6:	4630      	mov	r0, r6
   165c8:	f000 f9a0 	bl	1690c <d_name>
   165cc:	2112      	movs	r1, #18
   165ce:	4602      	mov	r2, r0
   165d0:	2300      	movs	r3, #0
   165d2:	4630      	mov	r0, r6
   165d4:	f7fe ff68 	bl	154a8 <d_make_comp>
   165d8:	e5f9      	b.n	161ce <d_encoding+0xba>
   165da:	4630      	mov	r0, r6
   165dc:	2134      	movs	r1, #52
   165de:	4622      	mov	r2, r4
   165e0:	2300      	movs	r3, #0
   165e2:	f7fe ff61 	bl	154a8 <d_make_comp>
   165e6:	e5f2      	b.n	161ce <d_encoding+0xba>
   165e8:	4623      	mov	r3, r4
   165ea:	4630      	mov	r0, r6
   165ec:	2135      	movs	r1, #53
   165ee:	4642      	mov	r2, r8
   165f0:	f7fe ff5a 	bl	154a8 <d_make_comp>
   165f4:	4604      	mov	r4, r0
   165f6:	2800      	cmp	r0, #0
   165f8:	d1e1      	bne.n	165be <d_encoding+0x4aa>
   165fa:	2000      	movs	r0, #0
   165fc:	e5e7      	b.n	161ce <d_encoding+0xba>
   165fe:	68f3      	ldr	r3, [r6, #12]
   16600:	2000      	movs	r0, #0
   16602:	4473      	add	r3, lr
   16604:	60f3      	str	r3, [r6, #12]
   16606:	e5e2      	b.n	161ce <d_encoding+0xba>
   16608:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1660c:	e7bc      	b.n	16588 <d_encoding+0x474>
   1660e:	786b      	ldrb	r3, [r5, #1]
   16610:	2b53      	cmp	r3, #83
   16612:	d01a      	beq.n	1664a <d_encoding+0x536>
   16614:	2b5f      	cmp	r3, #95
   16616:	d020      	beq.n	1665a <d_encoding+0x546>
   16618:	2b24      	cmp	r3, #36
   1661a:	f47f ade3 	bne.w	161e4 <d_encoding+0xd0>
   1661e:	469c      	mov	ip, r3
   16620:	6970      	ldr	r0, [r6, #20]
   16622:	69b3      	ldr	r3, [r6, #24]
   16624:	4298      	cmp	r0, r3
   16626:	da13      	bge.n	16650 <d_encoding+0x53c>
   16628:	0083      	lsls	r3, r0, #2
   1662a:	0102      	lsls	r2, r0, #4
   1662c:	6931      	ldr	r1, [r6, #16]
   1662e:	1ad2      	subs	r2, r2, r3
   16630:	1c43      	adds	r3, r0, #1
   16632:	188c      	adds	r4, r1, r2
   16634:	6173      	str	r3, [r6, #20]
   16636:	d00b      	beq.n	16650 <d_encoding+0x53c>
   16638:	f8c4 c004 	str.w	ip, [r4, #4]
   1663c:	68f3      	ldr	r3, [r6, #12]
   1663e:	f801 9002 	strb.w	r9, [r1, r2]
   16642:	1c9d      	adds	r5, r3, #2
   16644:	60f5      	str	r5, [r6, #12]
   16646:	3f02      	subs	r7, #2
   16648:	e7b6      	b.n	165b8 <d_encoding+0x4a4>
   1664a:	f04f 0c2f 	mov.w	ip, #47	; 0x2f
   1664e:	e7e7      	b.n	16620 <d_encoding+0x50c>
   16650:	68f3      	ldr	r3, [r6, #12]
   16652:	2000      	movs	r0, #0
   16654:	3302      	adds	r3, #2
   16656:	60f3      	str	r3, [r6, #12]
   16658:	e5b9      	b.n	161ce <d_encoding+0xba>
   1665a:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
   1665e:	e7df      	b.n	16620 <d_encoding+0x50c>

00016660 <d_expr_primary>:
   16660:	b5f0      	push	{r4, r5, r6, r7, lr}
   16662:	68c2      	ldr	r2, [r0, #12]
   16664:	b081      	sub	sp, #4
   16666:	7813      	ldrb	r3, [r2, #0]
   16668:	4604      	mov	r4, r0
   1666a:	2b4c      	cmp	r3, #76
   1666c:	d002      	beq.n	16674 <d_expr_primary+0x14>
   1666e:	2000      	movs	r0, #0
   16670:	b001      	add	sp, #4
   16672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16674:	1c51      	adds	r1, r2, #1
   16676:	60c1      	str	r1, [r0, #12]
   16678:	7853      	ldrb	r3, [r2, #1]
   1667a:	2b5f      	cmp	r3, #95
   1667c:	d029      	beq.n	166d2 <d_expr_primary+0x72>
   1667e:	f7ff f987 	bl	15990 <d_type>
   16682:	4606      	mov	r6, r0
   16684:	2800      	cmp	r0, #0
   16686:	d0f2      	beq.n	1666e <d_expr_primary+0xe>
   16688:	7803      	ldrb	r3, [r0, #0]
   1668a:	2b22      	cmp	r3, #34
   1668c:	d036      	beq.n	166fc <d_expr_primary+0x9c>
   1668e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   16692:	f89c 3000 	ldrb.w	r3, [ip]
   16696:	2b6e      	cmp	r3, #110
   16698:	d028      	beq.n	166ec <d_expr_primary+0x8c>
   1669a:	2732      	movs	r7, #50
   1669c:	2b45      	cmp	r3, #69
   1669e:	d04f      	beq.n	16740 <d_expr_primary+0xe0>
   166a0:	2b00      	cmp	r3, #0
   166a2:	d0e4      	beq.n	1666e <d_expr_primary+0xe>
   166a4:	4663      	mov	r3, ip
   166a6:	e001      	b.n	166ac <d_expr_primary+0x4c>
   166a8:	2a00      	cmp	r2, #0
   166aa:	d0e0      	beq.n	1666e <d_expr_primary+0xe>
   166ac:	3301      	adds	r3, #1
   166ae:	60e3      	str	r3, [r4, #12]
   166b0:	781a      	ldrb	r2, [r3, #0]
   166b2:	2a45      	cmp	r2, #69
   166b4:	d1f8      	bne.n	166a8 <d_expr_primary+0x48>
   166b6:	ebcc 0103 	rsb	r1, ip, r3
   166ba:	6960      	ldr	r0, [r4, #20]
   166bc:	69a3      	ldr	r3, [r4, #24]
   166be:	4298      	cmp	r0, r3
   166c0:	db25      	blt.n	1670e <d_expr_primary+0xae>
   166c2:	2500      	movs	r5, #0
   166c4:	4620      	mov	r0, r4
   166c6:	4639      	mov	r1, r7
   166c8:	4632      	mov	r2, r6
   166ca:	462b      	mov	r3, r5
   166cc:	f7fe feec 	bl	154a8 <d_make_comp>
   166d0:	e005      	b.n	166de <d_expr_primary+0x7e>
   166d2:	1c4a      	adds	r2, r1, #1
   166d4:	60c2      	str	r2, [r0, #12]
   166d6:	784b      	ldrb	r3, [r1, #1]
   166d8:	2b5a      	cmp	r3, #90
   166da:	d02b      	beq.n	16734 <d_expr_primary+0xd4>
   166dc:	2000      	movs	r0, #0
   166de:	68e2      	ldr	r2, [r4, #12]
   166e0:	7813      	ldrb	r3, [r2, #0]
   166e2:	2b45      	cmp	r3, #69
   166e4:	d1c3      	bne.n	1666e <d_expr_primary+0xe>
   166e6:	1c53      	adds	r3, r2, #1
   166e8:	60e3      	str	r3, [r4, #12]
   166ea:	e7c1      	b.n	16670 <d_expr_primary+0x10>
   166ec:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   166f0:	f8c4 c00c 	str.w	ip, [r4, #12]
   166f4:	f89c 3000 	ldrb.w	r3, [ip]
   166f8:	2733      	movs	r7, #51
   166fa:	e7cf      	b.n	1669c <d_expr_primary+0x3c>
   166fc:	6842      	ldr	r2, [r0, #4]
   166fe:	7c13      	ldrb	r3, [r2, #16]
   16700:	2b00      	cmp	r3, #0
   16702:	d0c4      	beq.n	1668e <d_expr_primary+0x2e>
   16704:	6b23      	ldr	r3, [r4, #48]
   16706:	6852      	ldr	r2, [r2, #4]
   16708:	1a9b      	subs	r3, r3, r2
   1670a:	6323      	str	r3, [r4, #48]
   1670c:	e7bf      	b.n	1668e <d_expr_primary+0x2e>
   1670e:	0083      	lsls	r3, r0, #2
   16710:	0102      	lsls	r2, r0, #4
   16712:	f8d4 e010 	ldr.w	lr, [r4, #16]
   16716:	1ad2      	subs	r2, r2, r3
   16718:	1c43      	adds	r3, r0, #1
   1671a:	eb1e 0502 	adds.w	r5, lr, r2
   1671e:	6163      	str	r3, [r4, #20]
   16720:	d0cf      	beq.n	166c2 <d_expr_primary+0x62>
   16722:	2900      	cmp	r1, #0
   16724:	d0cd      	beq.n	166c2 <d_expr_primary+0x62>
   16726:	2300      	movs	r3, #0
   16728:	f80e 3002 	strb.w	r3, [lr, r2]
   1672c:	f8c5 c004 	str.w	ip, [r5, #4]
   16730:	60a9      	str	r1, [r5, #8]
   16732:	e7c7      	b.n	166c4 <d_expr_primary+0x64>
   16734:	1c53      	adds	r3, r2, #1
   16736:	60c3      	str	r3, [r0, #12]
   16738:	2100      	movs	r1, #0
   1673a:	f7ff fceb 	bl	16114 <d_encoding>
   1673e:	e7ce      	b.n	166de <d_expr_primary+0x7e>
   16740:	2100      	movs	r1, #0
   16742:	e7ba      	b.n	166ba <d_expr_primary+0x5a>

00016744 <d_expression>:
   16744:	b5f0      	push	{r4, r5, r6, r7, lr}
   16746:	68c2      	ldr	r2, [r0, #12]
   16748:	b081      	sub	sp, #4
   1674a:	7813      	ldrb	r3, [r2, #0]
   1674c:	4606      	mov	r6, r0
   1674e:	2b4c      	cmp	r3, #76
   16750:	d03a      	beq.n	167c8 <d_expression+0x84>
   16752:	2b54      	cmp	r3, #84
   16754:	d03b      	beq.n	167ce <d_expression+0x8a>
   16756:	2b73      	cmp	r3, #115
   16758:	d102      	bne.n	16760 <d_expression+0x1c>
   1675a:	7853      	ldrb	r3, [r2, #1]
   1675c:	2b72      	cmp	r3, #114
   1675e:	d039      	beq.n	167d4 <d_expression+0x90>
   16760:	4630      	mov	r0, r6
   16762:	f7ff fb5f 	bl	15e24 <d_operator_name>
   16766:	4607      	mov	r7, r0
   16768:	b180      	cbz	r0, 1678c <d_expression+0x48>
   1676a:	7803      	ldrb	r3, [r0, #0]
   1676c:	2b29      	cmp	r3, #41
   1676e:	d010      	beq.n	16792 <d_expression+0x4e>
   16770:	2b2a      	cmp	r3, #42
   16772:	d043      	beq.n	167fc <d_expression+0xb8>
   16774:	2b2b      	cmp	r3, #43
   16776:	d023      	beq.n	167c0 <d_expression+0x7c>
   16778:	2b29      	cmp	r3, #41
   1677a:	d107      	bne.n	1678c <d_expression+0x48>
   1677c:	6844      	ldr	r4, [r0, #4]
   1677e:	68e0      	ldr	r0, [r4, #12]
   16780:	2802      	cmp	r0, #2
   16782:	d05b      	beq.n	1683c <d_expression+0xf8>
   16784:	2803      	cmp	r0, #3
   16786:	d03b      	beq.n	16800 <d_expression+0xbc>
   16788:	2801      	cmp	r0, #1
   1678a:	d019      	beq.n	167c0 <d_expression+0x7c>
   1678c:	2000      	movs	r0, #0
   1678e:	b001      	add	sp, #4
   16790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16792:	6841      	ldr	r1, [r0, #4]
   16794:	6b33      	ldr	r3, [r6, #48]
   16796:	688a      	ldr	r2, [r1, #8]
   16798:	493a      	ldr	r1, [pc, #232]	(16884 <d_expression+0x140>)
   1679a:	189b      	adds	r3, r3, r2
   1679c:	3b02      	subs	r3, #2
   1679e:	6333      	str	r3, [r6, #48]
   167a0:	6844      	ldr	r4, [r0, #4]
   167a2:	6820      	ldr	r0, [r4, #0]
   167a4:	f008 fada 	bl	1ed5c <strcmp>
   167a8:	2800      	cmp	r0, #0
   167aa:	d1e8      	bne.n	1677e <d_expression+0x3a>
   167ac:	4630      	mov	r0, r6
   167ae:	f7ff f8ef 	bl	15990 <d_type>
   167b2:	4603      	mov	r3, r0
   167b4:	212c      	movs	r1, #44
   167b6:	4630      	mov	r0, r6
   167b8:	463a      	mov	r2, r7
   167ba:	f7fe fe75 	bl	154a8 <d_make_comp>
   167be:	e7e6      	b.n	1678e <d_expression+0x4a>
   167c0:	4630      	mov	r0, r6
   167c2:	f7ff ffbf 	bl	16744 <d_expression>
   167c6:	e7f4      	b.n	167b2 <d_expression+0x6e>
   167c8:	f7ff ff4a 	bl	16660 <d_expr_primary>
   167cc:	e7df      	b.n	1678e <d_expression+0x4a>
   167ce:	f7fe ff51 	bl	15674 <d_template_param>
   167d2:	e7dc      	b.n	1678e <d_expression+0x4a>
   167d4:	1c93      	adds	r3, r2, #2
   167d6:	60c3      	str	r3, [r0, #12]
   167d8:	f7ff f8da 	bl	15990 <d_type>
   167dc:	4605      	mov	r5, r0
   167de:	4630      	mov	r0, r6
   167e0:	f7ff fb9e 	bl	15f20 <d_unqualified_name>
   167e4:	68f3      	ldr	r3, [r6, #12]
   167e6:	4604      	mov	r4, r0
   167e8:	781a      	ldrb	r2, [r3, #0]
   167ea:	2a49      	cmp	r2, #73
   167ec:	d03a      	beq.n	16864 <d_expression+0x120>
   167ee:	4630      	mov	r0, r6
   167f0:	2101      	movs	r1, #1
   167f2:	462a      	mov	r2, r5
   167f4:	4623      	mov	r3, r4
   167f6:	f7fe fe57 	bl	154a8 <d_make_comp>
   167fa:	e7c8      	b.n	1678e <d_expression+0x4a>
   167fc:	6840      	ldr	r0, [r0, #4]
   167fe:	e7bf      	b.n	16780 <d_expression+0x3c>
   16800:	4630      	mov	r0, r6
   16802:	f7ff ff9f 	bl	16744 <d_expression>
   16806:	4605      	mov	r5, r0
   16808:	4630      	mov	r0, r6
   1680a:	f7ff ff9b 	bl	16744 <d_expression>
   1680e:	4604      	mov	r4, r0
   16810:	4630      	mov	r0, r6
   16812:	f7ff ff97 	bl	16744 <d_expression>
   16816:	2131      	movs	r1, #49
   16818:	4603      	mov	r3, r0
   1681a:	4622      	mov	r2, r4
   1681c:	4630      	mov	r0, r6
   1681e:	f7fe fe43 	bl	154a8 <d_make_comp>
   16822:	2130      	movs	r1, #48
   16824:	4603      	mov	r3, r0
   16826:	462a      	mov	r2, r5
   16828:	4630      	mov	r0, r6
   1682a:	f7fe fe3d 	bl	154a8 <d_make_comp>
   1682e:	212f      	movs	r1, #47
   16830:	4603      	mov	r3, r0
   16832:	463a      	mov	r2, r7
   16834:	4630      	mov	r0, r6
   16836:	f7fe fe37 	bl	154a8 <d_make_comp>
   1683a:	e7a8      	b.n	1678e <d_expression+0x4a>
   1683c:	4630      	mov	r0, r6
   1683e:	f7ff ff81 	bl	16744 <d_expression>
   16842:	4604      	mov	r4, r0
   16844:	4630      	mov	r0, r6
   16846:	f7ff ff7d 	bl	16744 <d_expression>
   1684a:	212e      	movs	r1, #46
   1684c:	4603      	mov	r3, r0
   1684e:	4622      	mov	r2, r4
   16850:	4630      	mov	r0, r6
   16852:	f7fe fe29 	bl	154a8 <d_make_comp>
   16856:	212d      	movs	r1, #45
   16858:	4603      	mov	r3, r0
   1685a:	463a      	mov	r2, r7
   1685c:	4630      	mov	r0, r6
   1685e:	f7fe fe23 	bl	154a8 <d_make_comp>
   16862:	e794      	b.n	1678e <d_expression+0x4a>
   16864:	4630      	mov	r0, r6
   16866:	f000 f80f 	bl	16888 <d_template_args>
   1686a:	2104      	movs	r1, #4
   1686c:	4603      	mov	r3, r0
   1686e:	4622      	mov	r2, r4
   16870:	4630      	mov	r0, r6
   16872:	f7fe fe19 	bl	154a8 <d_make_comp>
   16876:	2101      	movs	r1, #1
   16878:	4603      	mov	r3, r0
   1687a:	462a      	mov	r2, r5
   1687c:	4630      	mov	r0, r6
   1687e:	f7fe fe13 	bl	154a8 <d_make_comp>
   16882:	e784      	b.n	1678e <d_expression+0x4a>
   16884:	00020bec 	.word	0x00020bec

00016888 <d_template_args>:
   16888:	b570      	push	{r4, r5, r6, lr}
   1688a:	68c2      	ldr	r2, [r0, #12]
   1688c:	b082      	sub	sp, #8
   1688e:	7813      	ldrb	r3, [r2, #0]
   16890:	4604      	mov	r4, r0
   16892:	2b49      	cmp	r3, #73
   16894:	6ac6      	ldr	r6, [r0, #44]
   16896:	d002      	beq.n	1689e <d_template_args+0x16>
   16898:	2000      	movs	r0, #0
   1689a:	b002      	add	sp, #8
   1689c:	bd70      	pop	{r4, r5, r6, pc}
   1689e:	3b49      	subs	r3, #73
   168a0:	1c51      	adds	r1, r2, #1
   168a2:	ad02      	add	r5, sp, #8
   168a4:	60c1      	str	r1, [r0, #12]
   168a6:	f845 3d04 	str.w	r3, [r5, #-4]!
   168aa:	7853      	ldrb	r3, [r2, #1]
   168ac:	2b4c      	cmp	r3, #76
   168ae:	d016      	beq.n	168de <d_template_args+0x56>
   168b0:	2b58      	cmp	r3, #88
   168b2:	d019      	beq.n	168e8 <d_template_args+0x60>
   168b4:	4620      	mov	r0, r4
   168b6:	f7ff f86b 	bl	15990 <d_type>
   168ba:	4602      	mov	r2, r0
   168bc:	2a00      	cmp	r2, #0
   168be:	d0eb      	beq.n	16898 <d_template_args+0x10>
   168c0:	4620      	mov	r0, r4
   168c2:	2128      	movs	r1, #40
   168c4:	2300      	movs	r3, #0
   168c6:	f7fe fdef 	bl	154a8 <d_make_comp>
   168ca:	6028      	str	r0, [r5, #0]
   168cc:	2800      	cmp	r0, #0
   168ce:	d0e3      	beq.n	16898 <d_template_args+0x10>
   168d0:	68e1      	ldr	r1, [r4, #12]
   168d2:	780b      	ldrb	r3, [r1, #0]
   168d4:	2b45      	cmp	r3, #69
   168d6:	d014      	beq.n	16902 <d_template_args+0x7a>
   168d8:	f100 0508 	add.w	r5, r0, #8	; 0x8
   168dc:	e7e6      	b.n	168ac <d_template_args+0x24>
   168de:	4620      	mov	r0, r4
   168e0:	f7ff febe 	bl	16660 <d_expr_primary>
   168e4:	4602      	mov	r2, r0
   168e6:	e7e9      	b.n	168bc <d_template_args+0x34>
   168e8:	1c4b      	adds	r3, r1, #1
   168ea:	60e3      	str	r3, [r4, #12]
   168ec:	4620      	mov	r0, r4
   168ee:	f7ff ff29 	bl	16744 <d_expression>
   168f2:	68e1      	ldr	r1, [r4, #12]
   168f4:	4602      	mov	r2, r0
   168f6:	780b      	ldrb	r3, [r1, #0]
   168f8:	2b45      	cmp	r3, #69
   168fa:	d1cd      	bne.n	16898 <d_template_args+0x10>
   168fc:	1c4b      	adds	r3, r1, #1
   168fe:	60e3      	str	r3, [r4, #12]
   16900:	e7dc      	b.n	168bc <d_template_args+0x34>
   16902:	1c4b      	adds	r3, r1, #1
   16904:	60e3      	str	r3, [r4, #12]
   16906:	62e6      	str	r6, [r4, #44]
   16908:	9801      	ldr	r0, [sp, #4]
   1690a:	e7c6      	b.n	1689a <d_template_args+0x12>

0001690c <d_name>:
   1690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16910:	68c2      	ldr	r2, [r0, #12]
   16912:	b082      	sub	sp, #8
   16914:	7813      	ldrb	r3, [r2, #0]
   16916:	4606      	mov	r6, r0
   16918:	3b4c      	subs	r3, #76
   1691a:	2b0e      	cmp	r3, #14
   1691c:	d809      	bhi.n	16932 <d_name+0x26>
   1691e:	e8df f003 	tbb	[pc, r3]
   16922:	0883      	.short	0x0883
   16924:	0808083b 	.word	0x0808083b
   16928:	08082108 	.word	0x08082108
   1692c:	08080808 	.word	0x08080808
   16930:	0014      	.short	0x0014
   16932:	f7ff faf5 	bl	15f20 <d_unqualified_name>
   16936:	68f3      	ldr	r3, [r6, #12]
   16938:	4604      	mov	r4, r0
   1693a:	781a      	ldrb	r2, [r3, #0]
   1693c:	2a49      	cmp	r2, #73
   1693e:	f000 80d0 	beq.w	16ae2 <d_name+0x1d6>
   16942:	4620      	mov	r0, r4
   16944:	b002      	add	sp, #8
   16946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1694a:	1c53      	adds	r3, r2, #1
   1694c:	60c3      	str	r3, [r0, #12]
   1694e:	2100      	movs	r1, #0
   16950:	f7ff fbe0 	bl	16114 <d_encoding>
   16954:	68f2      	ldr	r2, [r6, #12]
   16956:	4604      	mov	r4, r0
   16958:	7813      	ldrb	r3, [r2, #0]
   1695a:	2b45      	cmp	r3, #69
   1695c:	f000 80a0 	beq.w	16aa0 <d_name+0x194>
   16960:	2400      	movs	r4, #0
   16962:	e7ee      	b.n	16942 <d_name+0x36>
   16964:	7853      	ldrb	r3, [r2, #1]
   16966:	2b74      	cmp	r3, #116
   16968:	d06c      	beq.n	16a44 <d_name+0x138>
   1696a:	2100      	movs	r1, #0
   1696c:	f7fe feb6 	bl	156dc <d_substitution>
   16970:	2101      	movs	r1, #1
   16972:	4604      	mov	r4, r0
   16974:	68f3      	ldr	r3, [r6, #12]
   16976:	781a      	ldrb	r2, [r3, #0]
   16978:	2a49      	cmp	r2, #73
   1697a:	d1e2      	bne.n	16942 <d_name+0x36>
   1697c:	2900      	cmp	r1, #0
   1697e:	f000 80b0 	beq.w	16ae2 <d_name+0x1d6>
   16982:	4630      	mov	r0, r6
   16984:	f7ff ff80 	bl	16888 <d_template_args>
   16988:	4622      	mov	r2, r4
   1698a:	4603      	mov	r3, r0
   1698c:	2104      	movs	r1, #4
   1698e:	4630      	mov	r0, r6
   16990:	f7fe fd8a 	bl	154a8 <d_make_comp>
   16994:	4604      	mov	r4, r0
   16996:	e7d4      	b.n	16942 <d_name+0x36>
   16998:	1c53      	adds	r3, r2, #1
   1699a:	60c3      	str	r3, [r0, #12]
   1699c:	a901      	add	r1, sp, #4
   1699e:	2201      	movs	r2, #1
   169a0:	f7fe fe22 	bl	155e8 <d_cv_qualifiers>
   169a4:	4680      	mov	r8, r0
   169a6:	2800      	cmp	r0, #0
   169a8:	d0da      	beq.n	16960 <d_name+0x54>
   169aa:	68f1      	ldr	r1, [r6, #12]
   169ac:	2700      	movs	r7, #0
   169ae:	780c      	ldrb	r4, [r1, #0]
   169b0:	2c00      	cmp	r4, #0
   169b2:	d042      	beq.n	16a3a <d_name+0x12e>
   169b4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   169b8:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   169bc:	b2db      	uxtb	r3, r3
   169be:	b2d2      	uxtb	r2, r2
   169c0:	2b19      	cmp	r3, #25
   169c2:	bf8c      	ite	hi
   169c4:	2300      	movhi	r3, #0
   169c6:	2301      	movls	r3, #1
   169c8:	2a09      	cmp	r2, #9
   169ca:	bf98      	it	ls
   169cc:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
   169d0:	2b00      	cmp	r3, #0
   169d2:	d15a      	bne.n	16a8a <d_name+0x17e>
   169d4:	2c44      	cmp	r4, #68
   169d6:	bf14      	ite	ne
   169d8:	2300      	movne	r3, #0
   169da:	2301      	moveq	r3, #1
   169dc:	2c43      	cmp	r4, #67
   169de:	bf08      	it	eq
   169e0:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   169e4:	2b00      	cmp	r3, #0
   169e6:	d150      	bne.n	16a8a <d_name+0x17e>
   169e8:	2c4c      	cmp	r4, #76
   169ea:	d04e      	beq.n	16a8a <d_name+0x17e>
   169ec:	2c53      	cmp	r4, #83
   169ee:	d051      	beq.n	16a94 <d_name+0x188>
   169f0:	2c49      	cmp	r4, #73
   169f2:	f000 8093 	beq.w	16b1c <d_name+0x210>
   169f6:	2c54      	cmp	r4, #84
   169f8:	f040 8081 	bne.w	16afe <d_name+0x1f2>
   169fc:	4630      	mov	r0, r6
   169fe:	f7fe fe39 	bl	15674 <d_template_param>
   16a02:	4605      	mov	r5, r0
   16a04:	b137      	cbz	r7, 16a14 <d_name+0x108>
   16a06:	2101      	movs	r1, #1
   16a08:	462b      	mov	r3, r5
   16a0a:	4630      	mov	r0, r6
   16a0c:	463a      	mov	r2, r7
   16a0e:	f7fe fd4b 	bl	154a8 <d_make_comp>
   16a12:	4605      	mov	r5, r0
   16a14:	2c53      	cmp	r4, #83
   16a16:	bf08      	it	eq
   16a18:	68f1      	ldreq	r1, [r6, #12]
   16a1a:	d003      	beq.n	16a24 <d_name+0x118>
   16a1c:	68f1      	ldr	r1, [r6, #12]
   16a1e:	780b      	ldrb	r3, [r1, #0]
   16a20:	2b45      	cmp	r3, #69
   16a22:	d105      	bne.n	16a30 <d_name+0x124>
   16a24:	462f      	mov	r7, r5
   16a26:	e7c2      	b.n	169ae <d_name+0xa2>
   16a28:	f7ff fa7a 	bl	15f20 <d_unqualified_name>
   16a2c:	4604      	mov	r4, r0
   16a2e:	e788      	b.n	16942 <d_name+0x36>
   16a30:	b11d      	cbz	r5, 16a3a <d_name+0x12e>
   16a32:	6a32      	ldr	r2, [r6, #32]
   16a34:	6a73      	ldr	r3, [r6, #36]
   16a36:	429a      	cmp	r2, r3
   16a38:	db4c      	blt.n	16ad4 <d_name+0x1c8>
   16a3a:	2300      	movs	r3, #0
   16a3c:	f8c8 3000 	str.w	r3, [r8]
   16a40:	461c      	mov	r4, r3
   16a42:	e77e      	b.n	16942 <d_name+0x36>
   16a44:	1c93      	adds	r3, r2, #2
   16a46:	60c3      	str	r3, [r0, #12]
   16a48:	6941      	ldr	r1, [r0, #20]
   16a4a:	6983      	ldr	r3, [r0, #24]
   16a4c:	4299      	cmp	r1, r3
   16a4e:	da3f      	bge.n	16ad0 <d_name+0x1c4>
   16a50:	008b      	lsls	r3, r1, #2
   16a52:	010a      	lsls	r2, r1, #4
   16a54:	6900      	ldr	r0, [r0, #16]
   16a56:	1ad2      	subs	r2, r2, r3
   16a58:	1c4b      	adds	r3, r1, #1
   16a5a:	1884      	adds	r4, r0, r2
   16a5c:	6173      	str	r3, [r6, #20]
   16a5e:	d037      	beq.n	16ad0 <d_name+0x1c4>
   16a60:	2300      	movs	r3, #0
   16a62:	5483      	strb	r3, [r0, r2]
   16a64:	4a4b      	ldr	r2, [pc, #300]	(16b94 <d_name+0x288>)
   16a66:	3303      	adds	r3, #3
   16a68:	6062      	str	r2, [r4, #4]
   16a6a:	60a3      	str	r3, [r4, #8]
   16a6c:	4630      	mov	r0, r6
   16a6e:	f7ff fa57 	bl	15f20 <d_unqualified_name>
   16a72:	2101      	movs	r1, #1
   16a74:	4603      	mov	r3, r0
   16a76:	4622      	mov	r2, r4
   16a78:	4630      	mov	r0, r6
   16a7a:	f7fe fd15 	bl	154a8 <d_make_comp>
   16a7e:	6b33      	ldr	r3, [r6, #48]
   16a80:	4604      	mov	r4, r0
   16a82:	3303      	adds	r3, #3
   16a84:	6333      	str	r3, [r6, #48]
   16a86:	2100      	movs	r1, #0
   16a88:	e774      	b.n	16974 <d_name+0x68>
   16a8a:	4630      	mov	r0, r6
   16a8c:	f7ff fa48 	bl	15f20 <d_unqualified_name>
   16a90:	4605      	mov	r5, r0
   16a92:	e7b7      	b.n	16a04 <d_name+0xf8>
   16a94:	4630      	mov	r0, r6
   16a96:	2101      	movs	r1, #1
   16a98:	f7fe fe20 	bl	156dc <d_substitution>
   16a9c:	4605      	mov	r5, r0
   16a9e:	e7b1      	b.n	16a04 <d_name+0xf8>
   16aa0:	1c51      	adds	r1, r2, #1
   16aa2:	60f1      	str	r1, [r6, #12]
   16aa4:	7853      	ldrb	r3, [r2, #1]
   16aa6:	2b73      	cmp	r3, #115
   16aa8:	d140      	bne.n	16b2c <d_name+0x220>
   16aaa:	1c4a      	adds	r2, r1, #1
   16aac:	60f2      	str	r2, [r6, #12]
   16aae:	784b      	ldrb	r3, [r1, #1]
   16ab0:	2b5f      	cmp	r3, #95
   16ab2:	d05d      	beq.n	16b70 <d_name+0x264>
   16ab4:	6971      	ldr	r1, [r6, #20]
   16ab6:	69b3      	ldr	r3, [r6, #24]
   16ab8:	4299      	cmp	r1, r3
   16aba:	db47      	blt.n	16b4c <d_name+0x240>
   16abc:	f04f 0c00 	mov.w	ip, #0	; 0x0
   16ac0:	4622      	mov	r2, r4
   16ac2:	4630      	mov	r0, r6
   16ac4:	2102      	movs	r1, #2
   16ac6:	4663      	mov	r3, ip
   16ac8:	f7fe fcee 	bl	154a8 <d_make_comp>
   16acc:	4604      	mov	r4, r0
   16ace:	e738      	b.n	16942 <d_name+0x36>
   16ad0:	2400      	movs	r4, #0
   16ad2:	e7cb      	b.n	16a6c <d_name+0x160>
   16ad4:	69f3      	ldr	r3, [r6, #28]
   16ad6:	462f      	mov	r7, r5
   16ad8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   16adc:	3201      	adds	r2, #1
   16ade:	6232      	str	r2, [r6, #32]
   16ae0:	e765      	b.n	169ae <d_name+0xa2>
   16ae2:	2c00      	cmp	r4, #0
   16ae4:	f43f af2d 	beq.w	16942 <d_name+0x36>
   16ae8:	6a32      	ldr	r2, [r6, #32]
   16aea:	6a73      	ldr	r3, [r6, #36]
   16aec:	429a      	cmp	r2, r3
   16aee:	f6bf af37 	bge.w	16960 <d_name+0x54>
   16af2:	69f3      	ldr	r3, [r6, #28]
   16af4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   16af8:	3201      	adds	r2, #1
   16afa:	6232      	str	r2, [r6, #32]
   16afc:	e741      	b.n	16982 <d_name+0x76>
   16afe:	2c45      	cmp	r4, #69
   16b00:	d19b      	bne.n	16a3a <d_name+0x12e>
   16b02:	f8c8 7000 	str.w	r7, [r8]
   16b06:	2f00      	cmp	r7, #0
   16b08:	f43f af2a 	beq.w	16960 <d_name+0x54>
   16b0c:	780b      	ldrb	r3, [r1, #0]
   16b0e:	2b45      	cmp	r3, #69
   16b10:	f47f af26 	bne.w	16960 <d_name+0x54>
   16b14:	1c4b      	adds	r3, r1, #1
   16b16:	60f3      	str	r3, [r6, #12]
   16b18:	9c01      	ldr	r4, [sp, #4]
   16b1a:	e712      	b.n	16942 <d_name+0x36>
   16b1c:	2f00      	cmp	r7, #0
   16b1e:	d08c      	beq.n	16a3a <d_name+0x12e>
   16b20:	4630      	mov	r0, r6
   16b22:	f7ff feb1 	bl	16888 <d_template_args>
   16b26:	2104      	movs	r1, #4
   16b28:	4605      	mov	r5, r0
   16b2a:	e76d      	b.n	16a08 <d_name+0xfc>
   16b2c:	4630      	mov	r0, r6
   16b2e:	f7ff feed 	bl	1690c <d_name>
   16b32:	68f2      	ldr	r2, [r6, #12]
   16b34:	4605      	mov	r5, r0
   16b36:	7813      	ldrb	r3, [r2, #0]
   16b38:	2b5f      	cmp	r3, #95
   16b3a:	d022      	beq.n	16b82 <d_name+0x276>
   16b3c:	4622      	mov	r2, r4
   16b3e:	4630      	mov	r0, r6
   16b40:	2102      	movs	r1, #2
   16b42:	462b      	mov	r3, r5
   16b44:	f7fe fcb0 	bl	154a8 <d_make_comp>
   16b48:	4604      	mov	r4, r0
   16b4a:	e6fa      	b.n	16942 <d_name+0x36>
   16b4c:	008b      	lsls	r3, r1, #2
   16b4e:	010a      	lsls	r2, r1, #4
   16b50:	6930      	ldr	r0, [r6, #16]
   16b52:	1ad2      	subs	r2, r2, r3
   16b54:	1c4b      	adds	r3, r1, #1
   16b56:	eb10 0c02 	adds.w	ip, r0, r2
   16b5a:	6173      	str	r3, [r6, #20]
   16b5c:	d0ae      	beq.n	16abc <d_name+0x1b0>
   16b5e:	2300      	movs	r3, #0
   16b60:	5483      	strb	r3, [r0, r2]
   16b62:	4a0d      	ldr	r2, [pc, #52]	(16b98 <d_name+0x28c>)
   16b64:	330e      	adds	r3, #14
   16b66:	f8cc 2004 	str.w	r2, [ip, #4]
   16b6a:	f8cc 3008 	str.w	r3, [ip, #8]
   16b6e:	e7a7      	b.n	16ac0 <d_name+0x1b4>
   16b70:	1c53      	adds	r3, r2, #1
   16b72:	60f3      	str	r3, [r6, #12]
   16b74:	4630      	mov	r0, r6
   16b76:	f7fe fce9 	bl	1554c <d_number>
   16b7a:	2800      	cmp	r0, #0
   16b7c:	da9a      	bge.n	16ab4 <d_name+0x1a8>
   16b7e:	2400      	movs	r4, #0
   16b80:	e6df      	b.n	16942 <d_name+0x36>
   16b82:	1c53      	adds	r3, r2, #1
   16b84:	60f3      	str	r3, [r6, #12]
   16b86:	4630      	mov	r0, r6
   16b88:	f7fe fce0 	bl	1554c <d_number>
   16b8c:	2800      	cmp	r0, #0
   16b8e:	dad5      	bge.n	16b3c <d_name+0x230>
   16b90:	2400      	movs	r4, #0
   16b92:	e6d6      	b.n	16942 <d_name+0x36>
   16b94:	00020a64 	.word	0x00020a64
   16b98:	00020a54 	.word	0x00020a54

00016b9c <d_growable_string_callback_adapter>:
   16b9c:	6853      	ldr	r3, [r2, #4]
   16b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ba2:	4615      	mov	r5, r2
   16ba4:	3301      	adds	r3, #1
   16ba6:	68ac      	ldr	r4, [r5, #8]
   16ba8:	eb03 0201 	add.w	r2, r3, r1
   16bac:	42a2      	cmp	r2, r4
   16bae:	4680      	mov	r8, r0
   16bb0:	460e      	mov	r6, r1
   16bb2:	d811      	bhi.n	16bd8 <d_growable_string_callback_adapter+0x3c>
   16bb4:	68ec      	ldr	r4, [r5, #12]
   16bb6:	b96c      	cbnz	r4, 16bd4 <d_growable_string_callback_adapter+0x38>
   16bb8:	686b      	ldr	r3, [r5, #4]
   16bba:	6828      	ldr	r0, [r5, #0]
   16bbc:	4641      	mov	r1, r8
   16bbe:	18c0      	adds	r0, r0, r3
   16bc0:	4632      	mov	r2, r6
   16bc2:	f007 fd2f 	bl	1e624 <memcpy>
   16bc6:	682a      	ldr	r2, [r5, #0]
   16bc8:	6869      	ldr	r1, [r5, #4]
   16bca:	1992      	adds	r2, r2, r6
   16bcc:	5454      	strb	r4, [r2, r1]
   16bce:	686b      	ldr	r3, [r5, #4]
   16bd0:	199b      	adds	r3, r3, r6
   16bd2:	606b      	str	r3, [r5, #4]
   16bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16bd8:	68eb      	ldr	r3, [r5, #12]
   16bda:	2b00      	cmp	r3, #0
   16bdc:	d1fa      	bne.n	16bd4 <d_growable_string_callback_adapter+0x38>
   16bde:	b914      	cbnz	r4, 16be6 <d_growable_string_callback_adapter+0x4a>
   16be0:	2a02      	cmp	r2, #2
   16be2:	d90c      	bls.n	16bfe <d_growable_string_callback_adapter+0x62>
   16be4:	2402      	movs	r4, #2
   16be6:	0064      	lsls	r4, r4, #1
   16be8:	42a2      	cmp	r2, r4
   16bea:	d8fc      	bhi.n	16be6 <d_growable_string_callback_adapter+0x4a>
   16bec:	6828      	ldr	r0, [r5, #0]
   16bee:	4621      	mov	r1, r4
   16bf0:	f007 fd9e 	bl	1e730 <realloc>
   16bf4:	4607      	mov	r7, r0
   16bf6:	b120      	cbz	r0, 16c02 <d_growable_string_callback_adapter+0x66>
   16bf8:	6028      	str	r0, [r5, #0]
   16bfa:	60ac      	str	r4, [r5, #8]
   16bfc:	e7da      	b.n	16bb4 <d_growable_string_callback_adapter+0x18>
   16bfe:	3402      	adds	r4, #2
   16c00:	e7f4      	b.n	16bec <d_growable_string_callback_adapter+0x50>
   16c02:	6828      	ldr	r0, [r5, #0]
   16c04:	f007 faa0 	bl	1e148 <free>
   16c08:	2301      	movs	r3, #1
   16c0a:	602f      	str	r7, [r5, #0]
   16c0c:	606f      	str	r7, [r5, #4]
   16c0e:	60af      	str	r7, [r5, #8]
   16c10:	60eb      	str	r3, [r5, #12]
   16c12:	e7df      	b.n	16bd4 <d_growable_string_callback_adapter+0x38>

00016c14 <d_append_buffer>:
   16c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c18:	4604      	mov	r4, r0
   16c1a:	4688      	mov	r8, r1
   16c1c:	4617      	mov	r7, r2
   16c1e:	b35a      	cbz	r2, 16c78 <d_append_buffer+0x64>
   16c20:	2500      	movs	r5, #0
   16c22:	f100 0904 	add.w	r9, r0, #4	; 0x4
   16c26:	46aa      	mov	sl, r5
   16c28:	e00a      	b.n	16c40 <d_append_buffer+0x2c>
   16c2a:	3501      	adds	r5, #1
   16c2c:	1c4a      	adds	r2, r1, #1
   16c2e:	eb04 0301 	add.w	r3, r4, r1
   16c32:	42af      	cmp	r7, r5
   16c34:	711e      	strb	r6, [r3, #4]
   16c36:	f8c4 2104 	str.w	r2, [r4, #260]
   16c3a:	f884 6108 	strb.w	r6, [r4, #264]
   16c3e:	d91b      	bls.n	16c78 <d_append_buffer+0x64>
   16c40:	f8d4 1104 	ldr.w	r1, [r4, #260]
   16c44:	f818 6005 	ldrb.w	r6, [r8, r5]
   16c48:	29ff      	cmp	r1, #255
   16c4a:	d1ee      	bne.n	16c2a <d_append_buffer+0x16>
   16c4c:	f8d4 2110 	ldr.w	r2, [r4, #272]
   16c50:	f8d4 310c 	ldr.w	r3, [r4, #268]
   16c54:	f884 a103 	strb.w	sl, [r4, #259]
   16c58:	4648      	mov	r0, r9
   16c5a:	4798      	blx	r3
   16c5c:	3501      	adds	r5, #1
   16c5e:	4651      	mov	r1, sl
   16c60:	1c4a      	adds	r2, r1, #1
   16c62:	eb04 0301 	add.w	r3, r4, r1
   16c66:	42af      	cmp	r7, r5
   16c68:	f8c4 a104 	str.w	sl, [r4, #260]
   16c6c:	711e      	strb	r6, [r3, #4]
   16c6e:	f8c4 2104 	str.w	r2, [r4, #260]
   16c72:	f884 6108 	strb.w	r6, [r4, #264]
   16c76:	d8e3      	bhi.n	16c40 <d_append_buffer+0x2c>
   16c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016c7c <d_append_string>:
   16c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16c80:	4604      	mov	r4, r0
   16c82:	4608      	mov	r0, r1
   16c84:	4688      	mov	r8, r1
   16c86:	f008 f883 	bl	1ed90 <strlen>
   16c8a:	4607      	mov	r7, r0
   16c8c:	b358      	cbz	r0, 16ce6 <d_append_string+0x6a>
   16c8e:	2500      	movs	r5, #0
   16c90:	f104 0904 	add.w	r9, r4, #4	; 0x4
   16c94:	46aa      	mov	sl, r5
   16c96:	e00a      	b.n	16cae <d_append_string+0x32>
   16c98:	3501      	adds	r5, #1
   16c9a:	1c4a      	adds	r2, r1, #1
   16c9c:	eb04 0301 	add.w	r3, r4, r1
   16ca0:	42af      	cmp	r7, r5
   16ca2:	711e      	strb	r6, [r3, #4]
   16ca4:	f8c4 2104 	str.w	r2, [r4, #260]
   16ca8:	f884 6108 	strb.w	r6, [r4, #264]
   16cac:	d91b      	bls.n	16ce6 <d_append_string+0x6a>
   16cae:	f8d4 1104 	ldr.w	r1, [r4, #260]
   16cb2:	f818 6005 	ldrb.w	r6, [r8, r5]
   16cb6:	29ff      	cmp	r1, #255
   16cb8:	d1ee      	bne.n	16c98 <d_append_string+0x1c>
   16cba:	f8d4 2110 	ldr.w	r2, [r4, #272]
   16cbe:	f8d4 310c 	ldr.w	r3, [r4, #268]
   16cc2:	f884 a103 	strb.w	sl, [r4, #259]
   16cc6:	4648      	mov	r0, r9
   16cc8:	4798      	blx	r3
   16cca:	3501      	adds	r5, #1
   16ccc:	4651      	mov	r1, sl
   16cce:	1c4a      	adds	r2, r1, #1
   16cd0:	eb04 0301 	add.w	r3, r4, r1
   16cd4:	42af      	cmp	r7, r5
   16cd6:	f8c4 a104 	str.w	sl, [r4, #260]
   16cda:	711e      	strb	r6, [r3, #4]
   16cdc:	f8c4 2104 	str.w	r2, [r4, #260]
   16ce0:	f884 6108 	strb.w	r6, [r4, #264]
   16ce4:	d8e3      	bhi.n	16cae <d_append_string+0x32>
   16ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16cea:	46c0      	nop			(mov r8, r8)

00016cec <d_print_array_type>:
   16cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cf0:	4605      	mov	r5, r0
   16cf2:	4688      	mov	r8, r1
   16cf4:	4616      	mov	r6, r2
   16cf6:	2a00      	cmp	r2, #0
   16cf8:	d042      	beq.n	16d80 <d_print_array_type+0x94>
   16cfa:	6894      	ldr	r4, [r2, #8]
   16cfc:	b13c      	cbz	r4, 16d0e <d_print_array_type+0x22>
   16cfe:	6812      	ldr	r2, [r2, #0]
   16d00:	2a00      	cmp	r2, #0
   16d02:	d1fa      	bne.n	16cfa <d_print_array_type+0xe>
   16d04:	4628      	mov	r0, r5
   16d06:	4631      	mov	r1, r6
   16d08:	f000 fe78 	bl	179fc <d_print_mod_list>
   16d0c:	e038      	b.n	16d80 <d_print_array_type+0x94>
   16d0e:	6853      	ldr	r3, [r2, #4]
   16d10:	781a      	ldrb	r2, [r3, #0]
   16d12:	2a25      	cmp	r2, #37
   16d14:	f000 8085 	beq.w	16e22 <d_print_array_type+0x136>
   16d18:	f8d5 c104 	ldr.w	ip, [r5, #260]
   16d1c:	1d2f      	adds	r7, r5, #4
   16d1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   16d22:	f000 8092 	beq.w	16e4a <d_print_array_type+0x15e>
   16d26:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   16d2a:	2120      	movs	r1, #32
   16d2c:	eb05 030c 	add.w	r3, r5, ip
   16d30:	2aff      	cmp	r2, #255
   16d32:	7119      	strb	r1, [r3, #4]
   16d34:	f8c5 2104 	str.w	r2, [r5, #260]
   16d38:	f885 1108 	strb.w	r1, [r5, #264]
   16d3c:	4694      	mov	ip, r2
   16d3e:	f000 8091 	beq.w	16e64 <d_print_array_type+0x178>
   16d42:	2128      	movs	r1, #40
   16d44:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   16d48:	eb05 030c 	add.w	r3, r5, ip
   16d4c:	7119      	strb	r1, [r3, #4]
   16d4e:	f8c5 2104 	str.w	r2, [r5, #260]
   16d52:	f885 1108 	strb.w	r1, [r5, #264]
   16d56:	2200      	movs	r2, #0
   16d58:	4628      	mov	r0, r5
   16d5a:	4631      	mov	r1, r6
   16d5c:	f000 fe4e 	bl	179fc <d_print_mod_list>
   16d60:	f8d5 c104 	ldr.w	ip, [r5, #260]
   16d64:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   16d68:	f000 808a 	beq.w	16e80 <d_print_array_type+0x194>
   16d6c:	2129      	movs	r1, #41
   16d6e:	eb05 030c 	add.w	r3, r5, ip
   16d72:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   16d76:	7119      	strb	r1, [r3, #4]
   16d78:	f8c5 2104 	str.w	r2, [r5, #260]
   16d7c:	f885 1108 	strb.w	r1, [r5, #264]
   16d80:	f8d5 c104 	ldr.w	ip, [r5, #260]
   16d84:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   16d88:	d051      	beq.n	16e2e <d_print_array_type+0x142>
   16d8a:	2120      	movs	r1, #32
   16d8c:	eb05 030c 	add.w	r3, r5, ip
   16d90:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   16d94:	7119      	strb	r1, [r3, #4]
   16d96:	f8c5 2104 	str.w	r2, [r5, #260]
   16d9a:	f885 1108 	strb.w	r1, [r5, #264]
   16d9e:	f8d5 c104 	ldr.w	ip, [r5, #260]
   16da2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   16da6:	d02e      	beq.n	16e06 <d_print_array_type+0x11a>
   16da8:	215b      	movs	r1, #91
   16daa:	eb05 030c 	add.w	r3, r5, ip
   16dae:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   16db2:	7119      	strb	r1, [r3, #4]
   16db4:	f8c5 2104 	str.w	r2, [r5, #260]
   16db8:	f885 1108 	strb.w	r1, [r5, #264]
   16dbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   16dc0:	b111      	cbz	r1, 16dc8 <d_print_array_type+0xdc>
   16dc2:	4628      	mov	r0, r5
   16dc4:	f000 f86a 	bl	16e9c <d_print_comp>
   16dc8:	f8d5 c104 	ldr.w	ip, [r5, #260]
   16dcc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   16dd0:	d00b      	beq.n	16dea <d_print_array_type+0xfe>
   16dd2:	215d      	movs	r1, #93
   16dd4:	eb05 030c 	add.w	r3, r5, ip
   16dd8:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   16ddc:	7119      	strb	r1, [r3, #4]
   16dde:	f8c5 2104 	str.w	r2, [r5, #260]
   16de2:	f885 1108 	strb.w	r1, [r5, #264]
   16de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16dea:	2400      	movs	r4, #0
   16dec:	4661      	mov	r1, ip
   16dee:	f885 4103 	strb.w	r4, [r5, #259]
   16df2:	1d28      	adds	r0, r5, #4
   16df4:	f8d5 2110 	ldr.w	r2, [r5, #272]
   16df8:	f8d5 310c 	ldr.w	r3, [r5, #268]
   16dfc:	4798      	blx	r3
   16dfe:	f8c5 4104 	str.w	r4, [r5, #260]
   16e02:	46a4      	mov	ip, r4
   16e04:	e7e5      	b.n	16dd2 <d_print_array_type+0xe6>
   16e06:	2400      	movs	r4, #0
   16e08:	4661      	mov	r1, ip
   16e0a:	f885 4103 	strb.w	r4, [r5, #259]
   16e0e:	1d28      	adds	r0, r5, #4
   16e10:	f8d5 2110 	ldr.w	r2, [r5, #272]
   16e14:	f8d5 310c 	ldr.w	r3, [r5, #268]
   16e18:	4798      	blx	r3
   16e1a:	f8c5 4104 	str.w	r4, [r5, #260]
   16e1e:	46a4      	mov	ip, r4
   16e20:	e7c2      	b.n	16da8 <d_print_array_type+0xbc>
   16e22:	4628      	mov	r0, r5
   16e24:	4631      	mov	r1, r6
   16e26:	4622      	mov	r2, r4
   16e28:	f000 fde8 	bl	179fc <d_print_mod_list>
   16e2c:	e7b7      	b.n	16d9e <d_print_array_type+0xb2>
   16e2e:	2400      	movs	r4, #0
   16e30:	4661      	mov	r1, ip
   16e32:	f885 4103 	strb.w	r4, [r5, #259]
   16e36:	1d28      	adds	r0, r5, #4
   16e38:	f8d5 2110 	ldr.w	r2, [r5, #272]
   16e3c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   16e40:	4798      	blx	r3
   16e42:	f8c5 4104 	str.w	r4, [r5, #260]
   16e46:	46a4      	mov	ip, r4
   16e48:	e79f      	b.n	16d8a <d_print_array_type+0x9e>
   16e4a:	4661      	mov	r1, ip
   16e4c:	f885 4103 	strb.w	r4, [r5, #259]
   16e50:	f8d5 2110 	ldr.w	r2, [r5, #272]
   16e54:	f8d5 310c 	ldr.w	r3, [r5, #268]
   16e58:	4638      	mov	r0, r7
   16e5a:	4798      	blx	r3
   16e5c:	f8c5 4104 	str.w	r4, [r5, #260]
   16e60:	46a4      	mov	ip, r4
   16e62:	e760      	b.n	16d26 <d_print_array_type+0x3a>
   16e64:	2400      	movs	r4, #0
   16e66:	4661      	mov	r1, ip
   16e68:	f885 4103 	strb.w	r4, [r5, #259]
   16e6c:	f8d5 2110 	ldr.w	r2, [r5, #272]
   16e70:	f8d5 310c 	ldr.w	r3, [r5, #268]
   16e74:	4638      	mov	r0, r7
   16e76:	4798      	blx	r3
   16e78:	f8c5 4104 	str.w	r4, [r5, #260]
   16e7c:	46a4      	mov	ip, r4
   16e7e:	e760      	b.n	16d42 <d_print_array_type+0x56>
   16e80:	2400      	movs	r4, #0
   16e82:	4661      	mov	r1, ip
   16e84:	f885 4103 	strb.w	r4, [r5, #259]
   16e88:	f8d5 2110 	ldr.w	r2, [r5, #272]
   16e8c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   16e90:	4638      	mov	r0, r7
   16e92:	4798      	blx	r3
   16e94:	f8c5 4104 	str.w	r4, [r5, #260]
   16e98:	46a4      	mov	ip, r4
   16e9a:	e767      	b.n	16d6c <d_print_array_type+0x80>

00016e9c <d_print_comp>:
   16e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea0:	4680      	mov	r8, r0
   16ea2:	b09b      	sub	sp, #108
   16ea4:	460f      	mov	r7, r1
   16ea6:	2900      	cmp	r1, #0
   16ea8:	d06e      	beq.n	16f88 <d_print_comp+0xec>
   16eaa:	f8d0 311c 	ldr.w	r3, [r0, #284]
   16eae:	2b00      	cmp	r3, #0
   16eb0:	d167      	bne.n	16f82 <d_print_comp+0xe6>
   16eb2:	7808      	ldrb	r0, [r1, #0]
   16eb4:	2836      	cmp	r0, #54
   16eb6:	d867      	bhi.n	16f88 <d_print_comp+0xec>
   16eb8:	e8df f010 	tbh	[pc, r0, lsl #1]
   16ebc:	006a021a 	.word	0x006a021a
   16ec0:	0127006a 	.word	0x0127006a
   16ec4:	02b9028b 	.word	0x02b9028b
   16ec8:	02e00079 	.word	0x02e00079
   16ecc:	03a103cc 	.word	0x03a103cc
   16ed0:	03d503e7 	.word	0x03d503e7
   16ed4:	023b03de 	.word	0x023b03de
   16ed8:	024f0245 	.word	0x024f0245
   16edc:	02630259 	.word	0x02630259
   16ee0:	0277026d 	.word	0x0277026d
   16ee4:	00880281 	.word	0x00880281
   16ee8:	01c301c3 	.word	0x01c301c3
   16eec:	031201c3 	.word	0x031201c3
   16ef0:	03120312 	.word	0x03120312
   16ef4:	03120312 	.word	0x03120312
   16ef8:	03120312 	.word	0x03120312
   16efc:	03120312 	.word	0x03120312
   16f00:	0083032d 	.word	0x0083032d
   16f04:	033a01da 	.word	0x033a01da
   16f08:	02e903aa 	.word	0x02e903aa
   16f0c:	02fb02e9 	.word	0x02fb02e9
   16f10:	011d0113 	.word	0x011d0113
   16f14:	00a3008e 	.word	0x00a3008e
   16f18:	00df0066 	.word	0x00df0066
   16f1c:	00660066 	.word	0x00660066
   16f20:	00370037 	.word	0x00370037
   16f24:	0211007e 	.word	0x0211007e
   16f28:	010e      	.short	0x010e
   16f2a:	684a      	ldr	r2, [r1, #4]
   16f2c:	7813      	ldrb	r3, [r2, #0]
   16f2e:	2b22      	cmp	r3, #34
   16f30:	f040 8402 	bne.w	17738 <d_print_comp+0x89c>
   16f34:	6853      	ldr	r3, [r2, #4]
   16f36:	7c1c      	ldrb	r4, [r3, #16]
   16f38:	b12c      	cbz	r4, 16f46 <d_print_comp+0xaa>
   16f3a:	2c06      	cmp	r4, #6
   16f3c:	f240 843f 	bls.w	177be <d_print_comp+0x922>
   16f40:	2c07      	cmp	r4, #7
   16f42:	f000 8423 	beq.w	1778c <d_print_comp+0x8f0>
   16f46:	2128      	movs	r1, #40
   16f48:	4640      	mov	r0, r8
   16f4a:	f7fe fc91 	bl	15870 <d_append_char>
   16f4e:	6879      	ldr	r1, [r7, #4]
   16f50:	4640      	mov	r0, r8
   16f52:	f7ff ffa3 	bl	16e9c <d_print_comp>
   16f56:	2129      	movs	r1, #41
   16f58:	4640      	mov	r0, r8
   16f5a:	f7fe fc89 	bl	15870 <d_append_char>
   16f5e:	783b      	ldrb	r3, [r7, #0]
   16f60:	2b33      	cmp	r3, #51
   16f62:	f000 8467 	beq.w	17834 <d_print_comp+0x998>
   16f66:	2c08      	cmp	r4, #8
   16f68:	d121      	bne.n	16fae <d_print_comp+0x112>
   16f6a:	4640      	mov	r0, r8
   16f6c:	215b      	movs	r1, #91
   16f6e:	f7fe fc7f 	bl	15870 <d_append_char>
   16f72:	68b9      	ldr	r1, [r7, #8]
   16f74:	4640      	mov	r0, r8
   16f76:	f7ff ff91 	bl	16e9c <d_print_comp>
   16f7a:	4640      	mov	r0, r8
   16f7c:	215d      	movs	r1, #93
   16f7e:	f7fe fc77 	bl	15870 <d_append_char>
   16f82:	b01b      	add	sp, #108
   16f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f88:	2301      	movs	r3, #1
   16f8a:	f8c8 311c 	str.w	r3, [r8, #284]
   16f8e:	e7f8      	b.n	16f82 <d_print_comp+0xe6>
   16f90:	6849      	ldr	r1, [r1, #4]
   16f92:	4640      	mov	r0, r8
   16f94:	f7ff ff82 	bl	16e9c <d_print_comp>
   16f98:	f8d8 3000 	ldr.w	r3, [r8]
   16f9c:	f013 0f04 	tst.w	r3, #4	; 0x4
   16fa0:	f040 83c5 	bne.w	1772e <d_print_comp+0x892>
   16fa4:	4640      	mov	r0, r8
   16fa6:	f8df 1900 	ldr.w	r1, [pc, #2304]	; 178a8 <d_print_comp+0xa0c>
   16faa:	f7ff fe67 	bl	16c7c <d_append_string>
   16fae:	68b9      	ldr	r1, [r7, #8]
   16fb0:	4640      	mov	r0, r8
   16fb2:	f7ff ff73 	bl	16e9c <d_print_comp>
   16fb6:	e7e4      	b.n	16f82 <d_print_comp+0xe6>
   16fb8:	4640      	mov	r0, r8
   16fba:	f8df 18f0 	ldr.w	r1, [pc, #2288]	; 178ac <d_print_comp+0xa10>
   16fbe:	f7ff fe5d 	bl	16c7c <d_append_string>
   16fc2:	6879      	ldr	r1, [r7, #4]
   16fc4:	4640      	mov	r0, r8
   16fc6:	f7ff ff69 	bl	16e9c <d_print_comp>
   16fca:	e7da      	b.n	16f82 <d_print_comp+0xe6>
   16fcc:	6879      	ldr	r1, [r7, #4]
   16fce:	68ba      	ldr	r2, [r7, #8]
   16fd0:	4640      	mov	r0, r8
   16fd2:	f7ff fe1f 	bl	16c14 <d_append_buffer>
   16fd6:	e7d4      	b.n	16f82 <d_print_comp+0xe6>
   16fd8:	6849      	ldr	r1, [r1, #4]
   16fda:	780b      	ldrb	r3, [r1, #0]
   16fdc:	2b2b      	cmp	r3, #43
   16fde:	f000 83ba 	beq.w	17756 <d_print_comp+0x8ba>
   16fe2:	4640      	mov	r0, r8
   16fe4:	f000 feda 	bl	17d9c <d_print_expr_op>
   16fe8:	2128      	movs	r1, #40
   16fea:	4640      	mov	r0, r8
   16fec:	f7fe fc40 	bl	15870 <d_append_char>
   16ff0:	68b9      	ldr	r1, [r7, #8]
   16ff2:	4640      	mov	r0, r8
   16ff4:	f7ff ff52 	bl	16e9c <d_print_comp>
   16ff8:	4640      	mov	r0, r8
   16ffa:	2129      	movs	r1, #41
   16ffc:	f7fe fc38 	bl	15870 <d_append_char>
   17000:	e7bf      	b.n	16f82 <d_print_comp+0xe6>
   17002:	688b      	ldr	r3, [r1, #8]
   17004:	781a      	ldrb	r2, [r3, #0]
   17006:	2a2e      	cmp	r2, #46
   17008:	d1be      	bne.n	16f88 <d_print_comp+0xec>
   1700a:	684a      	ldr	r2, [r1, #4]
   1700c:	7813      	ldrb	r3, [r2, #0]
   1700e:	2b29      	cmp	r3, #41
   17010:	f000 8416 	beq.w	17840 <d_print_comp+0x9a4>
   17014:	2128      	movs	r1, #40
   17016:	4640      	mov	r0, r8
   17018:	f7fe fc2a 	bl	15870 <d_append_char>
   1701c:	68bb      	ldr	r3, [r7, #8]
   1701e:	4640      	mov	r0, r8
   17020:	6859      	ldr	r1, [r3, #4]
   17022:	f7ff ff3b 	bl	16e9c <d_print_comp>
   17026:	4640      	mov	r0, r8
   17028:	f8df 1884 	ldr.w	r1, [pc, #2180]	; 178b0 <d_print_comp+0xa14>
   1702c:	f7ff fe26 	bl	16c7c <d_append_string>
   17030:	6879      	ldr	r1, [r7, #4]
   17032:	4640      	mov	r0, r8
   17034:	f000 feb2 	bl	17d9c <d_print_expr_op>
   17038:	4640      	mov	r0, r8
   1703a:	f8df 1878 	ldr.w	r1, [pc, #2168]	; 178b4 <d_print_comp+0xa18>
   1703e:	f7ff fe1d 	bl	16c7c <d_append_string>
   17042:	68bb      	ldr	r3, [r7, #8]
   17044:	4640      	mov	r0, r8
   17046:	6899      	ldr	r1, [r3, #8]
   17048:	f7ff ff28 	bl	16e9c <d_print_comp>
   1704c:	2129      	movs	r1, #41
   1704e:	4640      	mov	r0, r8
   17050:	f7fe fc0e 	bl	15870 <d_append_char>
   17054:	6879      	ldr	r1, [r7, #4]
   17056:	f891 c000 	ldrb.w	ip, [r1]
   1705a:	f1bc 0f29 	cmp.w	ip, #41	; 0x29
   1705e:	d190      	bne.n	16f82 <d_print_comp+0xe6>
   17060:	6849      	ldr	r1, [r1, #4]
   17062:	688b      	ldr	r3, [r1, #8]
   17064:	2b01      	cmp	r3, #1
   17066:	d18c      	bne.n	16f82 <d_print_comp+0xe6>
   17068:	684b      	ldr	r3, [r1, #4]
   1706a:	781a      	ldrb	r2, [r3, #0]
   1706c:	2a3e      	cmp	r2, #62
   1706e:	d188      	bne.n	16f82 <d_print_comp+0xe6>
   17070:	4640      	mov	r0, r8
   17072:	4661      	mov	r1, ip
   17074:	f7fe fbfc 	bl	15870 <d_append_char>
   17078:	e783      	b.n	16f82 <d_print_comp+0xe6>
   1707a:	688a      	ldr	r2, [r1, #8]
   1707c:	7813      	ldrb	r3, [r2, #0]
   1707e:	2b30      	cmp	r3, #48
   17080:	d182      	bne.n	16f88 <d_print_comp+0xec>
   17082:	6893      	ldr	r3, [r2, #8]
   17084:	781a      	ldrb	r2, [r3, #0]
   17086:	2a31      	cmp	r2, #49
   17088:	f47f af7e 	bne.w	16f88 <d_print_comp+0xec>
   1708c:	4640      	mov	r0, r8
   1708e:	2128      	movs	r1, #40
   17090:	f7fe fbee 	bl	15870 <d_append_char>
   17094:	68bb      	ldr	r3, [r7, #8]
   17096:	4640      	mov	r0, r8
   17098:	6859      	ldr	r1, [r3, #4]
   1709a:	f7ff feff 	bl	16e9c <d_print_comp>
   1709e:	4640      	mov	r0, r8
   170a0:	f8df 180c 	ldr.w	r1, [pc, #2060]	; 178b0 <d_print_comp+0xa14>
   170a4:	f7ff fdea 	bl	16c7c <d_append_string>
   170a8:	6879      	ldr	r1, [r7, #4]
   170aa:	4640      	mov	r0, r8
   170ac:	f000 fe76 	bl	17d9c <d_print_expr_op>
   170b0:	4640      	mov	r0, r8
   170b2:	f8df 1800 	ldr.w	r1, [pc, #2048]	; 178b4 <d_print_comp+0xa18>
   170b6:	f7ff fde1 	bl	16c7c <d_append_string>
   170ba:	68bb      	ldr	r3, [r7, #8]
   170bc:	4640      	mov	r0, r8
   170be:	689a      	ldr	r2, [r3, #8]
   170c0:	6851      	ldr	r1, [r2, #4]
   170c2:	f7ff feeb 	bl	16e9c <d_print_comp>
   170c6:	f8df 17f0 	ldr.w	r1, [pc, #2032]	; 178b8 <d_print_comp+0xa1c>
   170ca:	4640      	mov	r0, r8
   170cc:	f7ff fdd6 	bl	16c7c <d_append_string>
   170d0:	68bb      	ldr	r3, [r7, #8]
   170d2:	689a      	ldr	r2, [r3, #8]
   170d4:	6891      	ldr	r1, [r2, #8]
   170d6:	e78c      	b.n	16ff2 <d_print_comp+0x156>
   170d8:	7909      	ldrb	r1, [r1, #4]
   170da:	4640      	mov	r0, r8
   170dc:	f7fe fbc8 	bl	15870 <d_append_char>
   170e0:	e74f      	b.n	16f82 <d_print_comp+0xe6>
   170e2:	4640      	mov	r0, r8
   170e4:	f8df 17d4 	ldr.w	r1, [pc, #2004]	; 178bc <d_print_comp+0xa20>
   170e8:	f7ff fdc8 	bl	16c7c <d_append_string>
   170ec:	68b9      	ldr	r1, [r7, #8]
   170ee:	4640      	mov	r0, r8
   170f0:	f7ff fed4 	bl	16e9c <d_print_comp>
   170f4:	e745      	b.n	16f82 <d_print_comp+0xe6>
   170f6:	4640      	mov	r0, r8
   170f8:	f8df 17c0 	ldr.w	r1, [pc, #1984]	; 178bc <d_print_comp+0xa20>
   170fc:	f7ff fdbe 	bl	16c7c <d_append_string>
   17100:	4640      	mov	r0, r8
   17102:	4639      	mov	r1, r7
   17104:	f000 fdd6 	bl	17cb4 <d_print_cast>
   17108:	e73b      	b.n	16f82 <d_print_comp+0xe6>
   1710a:	f8d8 3118 	ldr.w	r3, [r8, #280]
   1710e:	9302      	str	r3, [sp, #8]
   17110:	684d      	ldr	r5, [r1, #4]
   17112:	2d00      	cmp	r5, #0
   17114:	f43f af38 	beq.w	16f88 <d_print_comp+0xec>
   17118:	7829      	ldrb	r1, [r5, #0]
   1711a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   1711e:	f84b 3d58 	str.w	r3, [fp, #-88]!
   17122:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   17126:	f8d8 0114 	ldr.w	r0, [r8, #276]
   1712a:	b2db      	uxtb	r3, r3
   1712c:	f04f 0c00 	mov.w	ip, #0	; 0x0
   17130:	2b02      	cmp	r3, #2
   17132:	f8c8 b118 	str.w	fp, [r8, #280]
   17136:	9505      	str	r5, [sp, #20]
   17138:	f8cd c018 	str.w	ip, [sp, #24]
   1713c:	9007      	str	r0, [sp, #28]
   1713e:	f200 83a5 	bhi.w	1788c <d_print_comp+0x9f0>
   17142:	aa08      	add	r2, sp, #32
   17144:	2601      	movs	r6, #1
   17146:	686d      	ldr	r5, [r5, #4]
   17148:	2d00      	cmp	r5, #0
   1714a:	f43f af1d 	beq.w	16f88 <d_print_comp+0xec>
   1714e:	2e04      	cmp	r6, #4
   17150:	f43f af1a 	beq.w	16f88 <d_print_comp+0xec>
   17154:	f8d8 3118 	ldr.w	r3, [r8, #280]
   17158:	7829      	ldrb	r1, [r5, #0]
   1715a:	6013      	str	r3, [r2, #0]
   1715c:	f1a1 0319 	sub.w	r3, r1, #25	; 0x19
   17160:	b2db      	uxtb	r3, r3
   17162:	f8c8 2118 	str.w	r2, [r8, #280]
   17166:	6055      	str	r5, [r2, #4]
   17168:	f8c2 c008 	str.w	ip, [r2, #8]
   1716c:	60d0      	str	r0, [r2, #12]
   1716e:	3601      	adds	r6, #1
   17170:	3210      	adds	r2, #16
   17172:	2b02      	cmp	r3, #2
   17174:	d9e7      	bls.n	17146 <d_print_comp+0x2aa>
   17176:	2904      	cmp	r1, #4
   17178:	bf01      	itttt	eq
   1717a:	ab1a      	addeq	r3, sp, #104
   1717c:	f843 0d08 	streq.w	r0, [r3, #-8]!
   17180:	f8c8 3114 	streq.w	r3, [r8, #276]
   17184:	9519      	streq	r5, [sp, #100]
   17186:	d042      	beq.n	1720e <d_print_comp+0x372>
   17188:	2902      	cmp	r1, #2
   1718a:	d140      	bne.n	1720e <d_print_comp+0x372>
   1718c:	f8d5 c008 	ldr.w	ip, [r5, #8]
   17190:	f89c 3000 	ldrb.w	r3, [ip]
   17194:	3b19      	subs	r3, #25
   17196:	b2db      	uxtb	r3, r3
   17198:	2b02      	cmp	r3, #2
   1719a:	d838      	bhi.n	1720e <d_print_comp+0x372>
   1719c:	2e03      	cmp	r6, #3
   1719e:	f63f aef3 	bhi.w	16f88 <d_print_comp+0xec>
   171a2:	f106 5380 	add.w	r3, r6, #268435456	; 0x10000000
   171a6:	3b01      	subs	r3, #1
   171a8:	011b      	lsls	r3, r3, #4
   171aa:	1e72      	subs	r2, r6, #1
   171ac:	eb0b 0403 	add.w	r4, fp, r3
   171b0:	0112      	lsls	r2, r2, #4
   171b2:	0133      	lsls	r3, r6, #4
   171b4:	eb0b 0902 	add.w	r9, fp, r2
   171b8:	eb0b 0a03 	add.w	sl, fp, r3
   171bc:	e007      	b.n	171ce <d_print_comp+0x332>
   171be:	2e03      	cmp	r6, #3
   171c0:	9c01      	ldr	r4, [sp, #4]
   171c2:	f109 0910 	add.w	r9, r9, #16	; 0x10
   171c6:	f10a 0a10 	add.w	sl, sl, #16	; 0x10
   171ca:	f63f aedd 	bhi.w	16f88 <d_print_comp+0xec>
   171ce:	f104 0210 	add.w	r2, r4, #16	; 0x10
   171d2:	9201      	str	r2, [sp, #4]
   171d4:	4610      	mov	r0, r2
   171d6:	4621      	mov	r1, r4
   171d8:	2210      	movs	r2, #16
   171da:	f8cd c000 	str.w	ip, [sp]
   171de:	f007 fa21 	bl	1e624 <memcpy>
   171e2:	2300      	movs	r3, #0
   171e4:	f8dd c000 	ldr.w	ip, [sp]
   171e8:	60a3      	str	r3, [r4, #8]
   171ea:	f8d8 3114 	ldr.w	r3, [r8, #276]
   171ee:	f8c4 9010 	str.w	r9, [r4, #16]
   171f2:	60e3      	str	r3, [r4, #12]
   171f4:	f8c8 a118 	str.w	sl, [r8, #280]
   171f8:	f8c4 c004 	str.w	ip, [r4, #4]
   171fc:	f8dc c004 	ldr.w	ip, [ip, #4]
   17200:	3601      	adds	r6, #1
   17202:	f89c 3000 	ldrb.w	r3, [ip]
   17206:	3b19      	subs	r3, #25
   17208:	b2db      	uxtb	r3, r3
   1720a:	2b02      	cmp	r3, #2
   1720c:	d9d7      	bls.n	171be <d_print_comp+0x322>
   1720e:	68b9      	ldr	r1, [r7, #8]
   17210:	4640      	mov	r0, r8
   17212:	f7ff fe43 	bl	16e9c <d_print_comp>
   17216:	782b      	ldrb	r3, [r5, #0]
   17218:	2b04      	cmp	r3, #4
   1721a:	bf04      	itt	eq
   1721c:	9b18      	ldreq	r3, [sp, #96]
   1721e:	f8c8 3114 	streq.w	r3, [r8, #276]
   17222:	b156      	cbz	r6, 1723a <d_print_comp+0x39e>
   17224:	0133      	lsls	r3, r6, #4
   17226:	eb0b 0403 	add.w	r4, fp, r3
   1722a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1722e:	2b00      	cmp	r3, #0
   17230:	f000 82a2 	beq.w	17778 <d_print_comp+0x8dc>
   17234:	3c10      	subs	r4, #16
   17236:	455c      	cmp	r4, fp
   17238:	d1f7      	bne.n	1722a <d_print_comp+0x38e>
   1723a:	9a02      	ldr	r2, [sp, #8]
   1723c:	f8c8 2118 	str.w	r2, [r8, #280]
   17240:	e69f      	b.n	16f82 <d_print_comp+0xe6>
   17242:	f8d8 4118 	ldr.w	r4, [r8, #280]
   17246:	2c00      	cmp	r4, #0
   17248:	f000 814c 	beq.w	174e4 <d_print_comp+0x648>
   1724c:	4621      	mov	r1, r4
   1724e:	688b      	ldr	r3, [r1, #8]
   17250:	b953      	cbnz	r3, 17268 <d_print_comp+0x3cc>
   17252:	684a      	ldr	r2, [r1, #4]
   17254:	7812      	ldrb	r2, [r2, #0]
   17256:	f1a2 0316 	sub.w	r3, r2, #22	; 0x16
   1725a:	b2db      	uxtb	r3, r3
   1725c:	2b02      	cmp	r3, #2
   1725e:	f200 8141 	bhi.w	174e4 <d_print_comp+0x648>
   17262:	4290      	cmp	r0, r2
   17264:	f43f aead 	beq.w	16fc2 <d_print_comp+0x126>
   17268:	6809      	ldr	r1, [r1, #0]
   1726a:	2900      	cmp	r1, #0
   1726c:	d1ef      	bne.n	1724e <d_print_comp+0x3b2>
   1726e:	e139      	b.n	174e4 <d_print_comp+0x648>
   17270:	f8d8 3000 	ldr.w	r3, [r8]
   17274:	f013 0f20 	tst.w	r3, #32	; 0x20
   17278:	f040 8267 	bne.w	1774a <d_print_comp+0x8ae>
   1727c:	687b      	ldr	r3, [r7, #4]
   1727e:	b30b      	cbz	r3, 172c4 <d_print_comp+0x428>
   17280:	f8d8 2118 	ldr.w	r2, [r8, #280]
   17284:	ab1a      	add	r3, sp, #104
   17286:	f843 2d18 	str.w	r2, [r3, #-24]!
   1728a:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1728e:	f8c8 3118 	str.w	r3, [r8, #280]
   17292:	2300      	movs	r3, #0
   17294:	9316      	str	r3, [sp, #88]
   17296:	9217      	str	r2, [sp, #92]
   17298:	9715      	str	r7, [sp, #84]
   1729a:	6879      	ldr	r1, [r7, #4]
   1729c:	4640      	mov	r0, r8
   1729e:	f7ff fdfd 	bl	16e9c <d_print_comp>
   172a2:	9b14      	ldr	r3, [sp, #80]
   172a4:	9a16      	ldr	r2, [sp, #88]
   172a6:	f8c8 3118 	str.w	r3, [r8, #280]
   172aa:	2a00      	cmp	r2, #0
   172ac:	f47f ae69 	bne.w	16f82 <d_print_comp+0xe6>
   172b0:	f8d8 3000 	ldr.w	r3, [r8]
   172b4:	f013 0f20 	tst.w	r3, #32	; 0x20
   172b8:	f47f ae63 	bne.w	16f82 <d_print_comp+0xe6>
   172bc:	4640      	mov	r0, r8
   172be:	2120      	movs	r1, #32
   172c0:	f7fe fad6 	bl	15870 <d_append_char>
   172c4:	f8d8 3000 	ldr.w	r3, [r8]
   172c8:	f013 0f20 	tst.w	r3, #32	; 0x20
   172cc:	f47f ae59 	bne.w	16f82 <d_print_comp+0xe6>
   172d0:	f8d8 2118 	ldr.w	r2, [r8, #280]
   172d4:	4640      	mov	r0, r8
   172d6:	4639      	mov	r1, r7
   172d8:	f000 fbfe 	bl	17ad8 <d_print_function_type>
   172dc:	e651      	b.n	16f82 <d_print_comp+0xe6>
   172de:	4640      	mov	r0, r8
   172e0:	6849      	ldr	r1, [r1, #4]
   172e2:	f7ff fddb 	bl	16e9c <d_print_comp>
   172e6:	68b9      	ldr	r1, [r7, #8]
   172e8:	4640      	mov	r0, r8
   172ea:	f7ff fdd7 	bl	16e9c <d_print_comp>
   172ee:	e648      	b.n	16f82 <d_print_comp+0xe6>
   172f0:	f8d8 3000 	ldr.w	r3, [r8]
   172f4:	f013 0f04 	tst.w	r3, #4	; 0x4
   172f8:	f43f ae68 	beq.w	16fcc <d_print_comp+0x130>
   172fc:	684a      	ldr	r2, [r1, #4]
   172fe:	688b      	ldr	r3, [r1, #8]
   17300:	eb02 0503 	add.w	r5, r2, r3
   17304:	42aa      	cmp	r2, r5
   17306:	d30c      	bcc.n	17322 <d_print_comp+0x486>
   17308:	e63b      	b.n	16f82 <d_print_comp+0xe6>
   1730a:	7811      	ldrb	r1, [r2, #0]
   1730c:	295f      	cmp	r1, #95
   1730e:	f000 81cd 	beq.w	176ac <d_print_comp+0x810>
   17312:	1c54      	adds	r4, r2, #1
   17314:	4640      	mov	r0, r8
   17316:	f7fe faab 	bl	15870 <d_append_char>
   1731a:	42a5      	cmp	r5, r4
   1731c:	f67f ae31 	bls.w	16f82 <d_print_comp+0xe6>
   17320:	4622      	mov	r2, r4
   17322:	ebc2 0305 	rsb	r3, r2, r5
   17326:	2b03      	cmp	r3, #3
   17328:	dcef      	bgt.n	1730a <d_print_comp+0x46e>
   1732a:	4614      	mov	r4, r2
   1732c:	f814 1b01 	ldrb.w	r1, [r4], #1
   17330:	e7f0      	b.n	17314 <d_print_comp+0x478>
   17332:	4640      	mov	r0, r8
   17334:	f8df 1588 	ldr.w	r1, [pc, #1416]	; 178c0 <d_print_comp+0xa24>
   17338:	f7ff fca0 	bl	16c7c <d_append_string>
   1733c:	6879      	ldr	r1, [r7, #4]
   1733e:	4640      	mov	r0, r8
   17340:	f7ff fdac 	bl	16e9c <d_print_comp>
   17344:	e61d      	b.n	16f82 <d_print_comp+0xe6>
   17346:	4640      	mov	r0, r8
   17348:	f8df 1578 	ldr.w	r1, [pc, #1400]	; 178c4 <d_print_comp+0xa28>
   1734c:	f7ff fc96 	bl	16c7c <d_append_string>
   17350:	6879      	ldr	r1, [r7, #4]
   17352:	4640      	mov	r0, r8
   17354:	f7ff fda2 	bl	16e9c <d_print_comp>
   17358:	e613      	b.n	16f82 <d_print_comp+0xe6>
   1735a:	4640      	mov	r0, r8
   1735c:	f8df 1568 	ldr.w	r1, [pc, #1384]	; 178c8 <d_print_comp+0xa2c>
   17360:	f7ff fc8c 	bl	16c7c <d_append_string>
   17364:	6879      	ldr	r1, [r7, #4]
   17366:	4640      	mov	r0, r8
   17368:	f7ff fd98 	bl	16e9c <d_print_comp>
   1736c:	e609      	b.n	16f82 <d_print_comp+0xe6>
   1736e:	4640      	mov	r0, r8
   17370:	f8df 1558 	ldr.w	r1, [pc, #1368]	; 178cc <d_print_comp+0xa30>
   17374:	f7ff fc82 	bl	16c7c <d_append_string>
   17378:	6879      	ldr	r1, [r7, #4]
   1737a:	4640      	mov	r0, r8
   1737c:	f7ff fd8e 	bl	16e9c <d_print_comp>
   17380:	e5ff      	b.n	16f82 <d_print_comp+0xe6>
   17382:	4640      	mov	r0, r8
   17384:	f8df 1548 	ldr.w	r1, [pc, #1352]	; 178d0 <d_print_comp+0xa34>
   17388:	f7ff fc78 	bl	16c7c <d_append_string>
   1738c:	6879      	ldr	r1, [r7, #4]
   1738e:	4640      	mov	r0, r8
   17390:	f7ff fd84 	bl	16e9c <d_print_comp>
   17394:	e5f5      	b.n	16f82 <d_print_comp+0xe6>
   17396:	4640      	mov	r0, r8
   17398:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 178d4 <d_print_comp+0xa38>
   1739c:	f7ff fc6e 	bl	16c7c <d_append_string>
   173a0:	6879      	ldr	r1, [r7, #4]
   173a2:	4640      	mov	r0, r8
   173a4:	f7ff fd7a 	bl	16e9c <d_print_comp>
   173a8:	e5eb      	b.n	16f82 <d_print_comp+0xe6>
   173aa:	4640      	mov	r0, r8
   173ac:	f8df 1528 	ldr.w	r1, [pc, #1320]	; 178d8 <d_print_comp+0xa3c>
   173b0:	f7ff fc64 	bl	16c7c <d_append_string>
   173b4:	6879      	ldr	r1, [r7, #4]
   173b6:	4640      	mov	r0, r8
   173b8:	f7ff fd70 	bl	16e9c <d_print_comp>
   173bc:	e5e1      	b.n	16f82 <d_print_comp+0xe6>
   173be:	4640      	mov	r0, r8
   173c0:	f8df 1518 	ldr.w	r1, [pc, #1304]	; 178dc <d_print_comp+0xa40>
   173c4:	f7ff fc5a 	bl	16c7c <d_append_string>
   173c8:	6879      	ldr	r1, [r7, #4]
   173ca:	4640      	mov	r0, r8
   173cc:	f7ff fd66 	bl	16e9c <d_print_comp>
   173d0:	e5d7      	b.n	16f82 <d_print_comp+0xe6>
   173d2:	2300      	movs	r3, #0
   173d4:	f8d8 5118 	ldr.w	r5, [r8, #280]
   173d8:	f8c8 3118 	str.w	r3, [r8, #280]
   173dc:	f8d8 3000 	ldr.w	r3, [r8]
   173e0:	684c      	ldr	r4, [r1, #4]
   173e2:	f013 0f04 	tst.w	r3, #4	; 0x4
   173e6:	d005      	beq.n	173f4 <d_print_comp+0x558>
   173e8:	7823      	ldrb	r3, [r4, #0]
   173ea:	b91b      	cbnz	r3, 173f4 <d_print_comp+0x558>
   173ec:	68a2      	ldr	r2, [r4, #8]
   173ee:	2a06      	cmp	r2, #6
   173f0:	f000 8239 	beq.w	17866 <d_print_comp+0x9ca>
   173f4:	4640      	mov	r0, r8
   173f6:	4621      	mov	r1, r4
   173f8:	f7ff fd50 	bl	16e9c <d_print_comp>
   173fc:	f898 3108 	ldrb.w	r3, [r8, #264]
   17400:	2b3c      	cmp	r3, #60
   17402:	f000 8212 	beq.w	1782a <d_print_comp+0x98e>
   17406:	213c      	movs	r1, #60
   17408:	4640      	mov	r0, r8
   1740a:	f7fe fa31 	bl	15870 <d_append_char>
   1740e:	68b9      	ldr	r1, [r7, #8]
   17410:	4640      	mov	r0, r8
   17412:	f7ff fd43 	bl	16e9c <d_print_comp>
   17416:	f898 3108 	ldrb.w	r3, [r8, #264]
   1741a:	2b3e      	cmp	r3, #62
   1741c:	f000 8200 	beq.w	17820 <d_print_comp+0x984>
   17420:	4640      	mov	r0, r8
   17422:	213e      	movs	r1, #62
   17424:	f7fe fa24 	bl	15870 <d_append_char>
   17428:	f8c8 5118 	str.w	r5, [r8, #280]
   1742c:	e5a9      	b.n	16f82 <d_print_comp+0xe6>
   1742e:	f8d8 4114 	ldr.w	r4, [r8, #276]
   17432:	2c00      	cmp	r4, #0
   17434:	f43f ada8 	beq.w	16f88 <d_print_comp+0xec>
   17438:	6863      	ldr	r3, [r4, #4]
   1743a:	6849      	ldr	r1, [r1, #4]
   1743c:	689a      	ldr	r2, [r3, #8]
   1743e:	2a00      	cmp	r2, #0
   17440:	f43f ada2 	beq.w	16f88 <d_print_comp+0xec>
   17444:	7813      	ldrb	r3, [r2, #0]
   17446:	2b28      	cmp	r3, #40
   17448:	d009      	beq.n	1745e <d_print_comp+0x5c2>
   1744a:	e59d      	b.n	16f88 <d_print_comp+0xec>
   1744c:	6892      	ldr	r2, [r2, #8]
   1744e:	2a00      	cmp	r2, #0
   17450:	f43f ad9a 	beq.w	16f88 <d_print_comp+0xec>
   17454:	7813      	ldrb	r3, [r2, #0]
   17456:	2b28      	cmp	r3, #40
   17458:	f47f ad96 	bne.w	16f88 <d_print_comp+0xec>
   1745c:	3901      	subs	r1, #1
   1745e:	2900      	cmp	r1, #0
   17460:	dcf4      	bgt.n	1744c <d_print_comp+0x5b0>
   17462:	2900      	cmp	r1, #0
   17464:	f47f ad90 	bne.w	16f88 <d_print_comp+0xec>
   17468:	6823      	ldr	r3, [r4, #0]
   1746a:	4640      	mov	r0, r8
   1746c:	f8c8 3114 	str.w	r3, [r8, #276]
   17470:	6851      	ldr	r1, [r2, #4]
   17472:	f7ff fd13 	bl	16e9c <d_print_comp>
   17476:	f8c8 4114 	str.w	r4, [r8, #276]
   1747a:	e582      	b.n	16f82 <d_print_comp+0xe6>
   1747c:	4640      	mov	r0, r8
   1747e:	217e      	movs	r1, #126
   17480:	f7fe f9f6 	bl	15870 <d_append_char>
   17484:	68b9      	ldr	r1, [r7, #8]
   17486:	4640      	mov	r0, r8
   17488:	f7ff fd08 	bl	16e9c <d_print_comp>
   1748c:	e579      	b.n	16f82 <d_print_comp+0xe6>
   1748e:	6849      	ldr	r1, [r1, #4]
   17490:	4640      	mov	r0, r8
   17492:	f7ff fd03 	bl	16e9c <d_print_comp>
   17496:	68bb      	ldr	r3, [r7, #8]
   17498:	2b00      	cmp	r3, #0
   1749a:	f43f ad72 	beq.w	16f82 <d_print_comp+0xe6>
   1749e:	4640      	mov	r0, r8
   174a0:	f8df 143c 	ldr.w	r1, [pc, #1084]	; 178e0 <d_print_comp+0xa44>
   174a4:	f7ff fbea 	bl	16c7c <d_append_string>
   174a8:	68b9      	ldr	r1, [r7, #8]
   174aa:	4640      	mov	r0, r8
   174ac:	f7ff fcf6 	bl	16e9c <d_print_comp>
   174b0:	e567      	b.n	16f82 <d_print_comp+0xe6>
   174b2:	f8df 1430 	ldr.w	r1, [pc, #1072]	; 178e4 <d_print_comp+0xa48>
   174b6:	4640      	mov	r0, r8
   174b8:	f7ff fbe0 	bl	16c7c <d_append_string>
   174bc:	687a      	ldr	r2, [r7, #4]
   174be:	6851      	ldr	r1, [r2, #4]
   174c0:	780b      	ldrb	r3, [r1, #0]
   174c2:	3b61      	subs	r3, #97
   174c4:	b2db      	uxtb	r3, r3
   174c6:	2b19      	cmp	r3, #25
   174c8:	d805      	bhi.n	174d6 <d_print_comp+0x63a>
   174ca:	2120      	movs	r1, #32
   174cc:	4640      	mov	r0, r8
   174ce:	f7fe f9cf 	bl	15870 <d_append_char>
   174d2:	687a      	ldr	r2, [r7, #4]
   174d4:	6851      	ldr	r1, [r2, #4]
   174d6:	6892      	ldr	r2, [r2, #8]
   174d8:	4640      	mov	r0, r8
   174da:	f7ff fb9b 	bl	16c14 <d_append_buffer>
   174de:	e550      	b.n	16f82 <d_print_comp+0xe6>
   174e0:	f8d8 4118 	ldr.w	r4, [r8, #280]
   174e4:	ab1a      	add	r3, sp, #104
   174e6:	f843 4d18 	str.w	r4, [r3, #-24]!
   174ea:	f8d8 2114 	ldr.w	r2, [r8, #276]
   174ee:	f8c8 3118 	str.w	r3, [r8, #280]
   174f2:	2300      	movs	r3, #0
   174f4:	9316      	str	r3, [sp, #88]
   174f6:	9715      	str	r7, [sp, #84]
   174f8:	9217      	str	r2, [sp, #92]
   174fa:	6879      	ldr	r1, [r7, #4]
   174fc:	4640      	mov	r0, r8
   174fe:	f7ff fccd 	bl	16e9c <d_print_comp>
   17502:	9b16      	ldr	r3, [sp, #88]
   17504:	b91b      	cbnz	r3, 1750e <d_print_comp+0x672>
   17506:	4640      	mov	r0, r8
   17508:	4639      	mov	r1, r7
   1750a:	f000 fa09 	bl	17920 <d_print_mod>
   1750e:	9b14      	ldr	r3, [sp, #80]
   17510:	f8c8 3118 	str.w	r3, [r8, #280]
   17514:	e535      	b.n	16f82 <d_print_comp+0xe6>
   17516:	f8d8 3000 	ldr.w	r3, [r8]
   1751a:	f013 0f04 	tst.w	r3, #4	; 0x4
   1751e:	f040 810d 	bne.w	1773c <d_print_comp+0x8a0>
   17522:	684b      	ldr	r3, [r1, #4]
   17524:	4640      	mov	r0, r8
   17526:	6819      	ldr	r1, [r3, #0]
   17528:	685a      	ldr	r2, [r3, #4]
   1752a:	f7ff fb73 	bl	16c14 <d_append_buffer>
   1752e:	e528      	b.n	16f82 <d_print_comp+0xe6>
   17530:	f8d8 9118 	ldr.w	r9, [r8, #280]
   17534:	f8d8 2114 	ldr.w	r2, [r8, #276]
   17538:	f8cd 900c 	str.w	r9, [sp, #12]
   1753c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
   17540:	9207      	str	r2, [sp, #28]
   17542:	9a03      	ldr	r2, [sp, #12]
   17544:	f84b 9d58 	str.w	r9, [fp, #-88]!
   17548:	2300      	movs	r3, #0
   1754a:	46d9      	mov	r9, fp
   1754c:	f8c8 b118 	str.w	fp, [r8, #280]
   17550:	9105      	str	r1, [sp, #20]
   17552:	9306      	str	r3, [sp, #24]
   17554:	2a00      	cmp	r2, #0
   17556:	f000 8183 	beq.w	17860 <d_print_comp+0x9c4>
   1755a:	6852      	ldr	r2, [r2, #4]
   1755c:	7813      	ldrb	r3, [r2, #0]
   1755e:	3b16      	subs	r3, #22
   17560:	b2db      	uxtb	r3, r3
   17562:	2b02      	cmp	r3, #2
   17564:	f200 817c 	bhi.w	17860 <d_print_comp+0x9c4>
   17568:	9e03      	ldr	r6, [sp, #12]
   1756a:	f04f 0a01 	mov.w	sl, #1	; 0x1
   1756e:	e005      	b.n	1757c <d_print_comp+0x6e0>
   17570:	6872      	ldr	r2, [r6, #4]
   17572:	7813      	ldrb	r3, [r2, #0]
   17574:	3b16      	subs	r3, #22
   17576:	b2db      	uxtb	r3, r3
   17578:	2b02      	cmp	r3, #2
   1757a:	d81c      	bhi.n	175b6 <d_print_comp+0x71a>
   1757c:	68b3      	ldr	r3, [r6, #8]
   1757e:	b9bb      	cbnz	r3, 175b0 <d_print_comp+0x714>
   17580:	f1ba 0f03 	cmp.w	sl, #3	; 0x3
   17584:	f200 80f4 	bhi.w	17770 <d_print_comp+0x8d4>
   17588:	ea4f 150a 	mov.w	r5, sl, lsl #4
   1758c:	ab1a      	add	r3, sp, #104
   1758e:	eb03 0405 	add.w	r4, r3, r5
   17592:	f1a4 0c58 	sub.w	ip, r4, #88	; 0x58
   17596:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1759a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   1759e:	f844 9c58 	str.w	r9, [r4, #-88]
   175a2:	2201      	movs	r2, #1
   175a4:	eb0b 0905 	add.w	r9, fp, r5
   175a8:	f8c8 9118 	str.w	r9, [r8, #280]
   175ac:	60b2      	str	r2, [r6, #8]
   175ae:	4492      	add	sl, r2
   175b0:	6836      	ldr	r6, [r6, #0]
   175b2:	2e00      	cmp	r6, #0
   175b4:	d1dc      	bne.n	17570 <d_print_comp+0x6d4>
   175b6:	68b9      	ldr	r1, [r7, #8]
   175b8:	4640      	mov	r0, r8
   175ba:	f7ff fc6f 	bl	16e9c <d_print_comp>
   175be:	9b03      	ldr	r3, [sp, #12]
   175c0:	f8c8 3118 	str.w	r3, [r8, #280]
   175c4:	9b06      	ldr	r3, [sp, #24]
   175c6:	2b00      	cmp	r3, #0
   175c8:	f47f acdb 	bne.w	16f82 <d_print_comp+0xe6>
   175cc:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   175d0:	d00e      	beq.n	175f0 <d_print_comp+0x754>
   175d2:	ea4f 130a 	mov.w	r3, sl, lsl #4
   175d6:	eb0b 0403 	add.w	r4, fp, r3
   175da:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   175de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   175e2:	4640      	mov	r0, r8
   175e4:	f000 f99c 	bl	17920 <d_print_mod>
   175e8:	3c10      	subs	r4, #16
   175ea:	f1ba 0f01 	cmp.w	sl, #1	; 0x1
   175ee:	d8f4      	bhi.n	175da <d_print_comp+0x73e>
   175f0:	f8d8 2118 	ldr.w	r2, [r8, #280]
   175f4:	4640      	mov	r0, r8
   175f6:	4639      	mov	r1, r7
   175f8:	f7ff fb78 	bl	16cec <d_print_array_type>
   175fc:	e4c1      	b.n	16f82 <d_print_comp+0xe6>
   175fe:	4640      	mov	r0, r8
   17600:	49b9      	ldr	r1, [pc, #740]	(178e8 <d_print_comp+0xa4c>)
   17602:	f7ff fb3b 	bl	16c7c <d_append_string>
   17606:	6879      	ldr	r1, [r7, #4]
   17608:	4640      	mov	r0, r8
   1760a:	f7ff fc47 	bl	16e9c <d_print_comp>
   1760e:	e4b8      	b.n	16f82 <d_print_comp+0xe6>
   17610:	f8d8 2118 	ldr.w	r2, [r8, #280]
   17614:	ab1a      	add	r3, sp, #104
   17616:	f843 2d18 	str.w	r2, [r3, #-24]!
   1761a:	f8d8 2114 	ldr.w	r2, [r8, #276]
   1761e:	f8c8 3118 	str.w	r3, [r8, #280]
   17622:	2300      	movs	r3, #0
   17624:	9316      	str	r3, [sp, #88]
   17626:	9115      	str	r1, [sp, #84]
   17628:	9217      	str	r2, [sp, #92]
   1762a:	6889      	ldr	r1, [r1, #8]
   1762c:	4640      	mov	r0, r8
   1762e:	f7ff fc35 	bl	16e9c <d_print_comp>
   17632:	9b16      	ldr	r3, [sp, #88]
   17634:	2b00      	cmp	r3, #0
   17636:	f47f af6a 	bne.w	1750e <d_print_comp+0x672>
   1763a:	4640      	mov	r0, r8
   1763c:	2120      	movs	r1, #32
   1763e:	f7fe f917 	bl	15870 <d_append_char>
   17642:	6879      	ldr	r1, [r7, #4]
   17644:	4640      	mov	r0, r8
   17646:	f7ff fc29 	bl	16e9c <d_print_comp>
   1764a:	4640      	mov	r0, r8
   1764c:	49a7      	ldr	r1, [pc, #668]	(178ec <d_print_comp+0xa50>)
   1764e:	f7ff fb15 	bl	16c7c <d_append_string>
   17652:	e75c      	b.n	1750e <d_print_comp+0x672>
   17654:	4640      	mov	r0, r8
   17656:	49a6      	ldr	r1, [pc, #664]	(178f0 <d_print_comp+0xa54>)
   17658:	f7ff fb10 	bl	16c7c <d_append_string>
   1765c:	6879      	ldr	r1, [r7, #4]
   1765e:	4640      	mov	r0, r8
   17660:	f7ff fc1c 	bl	16e9c <d_print_comp>
   17664:	e48d      	b.n	16f82 <d_print_comp+0xe6>
   17666:	4640      	mov	r0, r8
   17668:	49a2      	ldr	r1, [pc, #648]	(178f4 <d_print_comp+0xa58>)
   1766a:	f7ff fb07 	bl	16c7c <d_append_string>
   1766e:	6879      	ldr	r1, [r7, #4]
   17670:	4640      	mov	r0, r8
   17672:	f7ff fc13 	bl	16e9c <d_print_comp>
   17676:	e484      	b.n	16f82 <d_print_comp+0xe6>
   17678:	4640      	mov	r0, r8
   1767a:	499f      	ldr	r1, [pc, #636]	(178f8 <d_print_comp+0xa5c>)
   1767c:	f7ff fafe 	bl	16c7c <d_append_string>
   17680:	6879      	ldr	r1, [r7, #4]
   17682:	4640      	mov	r0, r8
   17684:	f7ff fc0a 	bl	16e9c <d_print_comp>
   17688:	e47b      	b.n	16f82 <d_print_comp+0xe6>
   1768a:	4640      	mov	r0, r8
   1768c:	499b      	ldr	r1, [pc, #620]	(178fc <d_print_comp+0xa60>)
   1768e:	f7ff faf5 	bl	16c7c <d_append_string>
   17692:	6879      	ldr	r1, [r7, #4]
   17694:	4640      	mov	r0, r8
   17696:	f7ff fc01 	bl	16e9c <d_print_comp>
   1769a:	4640      	mov	r0, r8
   1769c:	4998      	ldr	r1, [pc, #608]	(17900 <d_print_comp+0xa64>)
   1769e:	f7ff faed 	bl	16c7c <d_append_string>
   176a2:	68b9      	ldr	r1, [r7, #8]
   176a4:	4640      	mov	r0, r8
   176a6:	f7ff fbf9 	bl	16e9c <d_print_comp>
   176aa:	e46a      	b.n	16f82 <d_print_comp+0xe6>
   176ac:	7853      	ldrb	r3, [r2, #1]
   176ae:	1c54      	adds	r4, r2, #1
   176b0:	2b5f      	cmp	r3, #95
   176b2:	f47f ae2f 	bne.w	17314 <d_print_comp+0x478>
   176b6:	7893      	ldrb	r3, [r2, #2]
   176b8:	2b55      	cmp	r3, #85
   176ba:	f47f ae2b 	bne.w	17314 <d_print_comp+0x478>
   176be:	1cd6      	adds	r6, r2, #3
   176c0:	42b5      	cmp	r5, r6
   176c2:	f67f ae27 	bls.w	17314 <d_print_comp+0x478>
   176c6:	f04f 0c00 	mov.w	ip, #0	; 0x0
   176ca:	e009      	b.n	176e0 <d_print_comp+0x844>
   176cc:	f1a0 0257 	sub.w	r2, r0, #87	; 0x57
   176d0:	3601      	adds	r6, #1
   176d2:	42b5      	cmp	r5, r6
   176d4:	f67f ae1e 	bls.w	17314 <d_print_comp+0x478>
   176d8:	ea4f 130c 	mov.w	r3, ip, lsl #4
   176dc:	eb02 0c03 	add.w	ip, r2, r3
   176e0:	7830      	ldrb	r0, [r6, #0]
   176e2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   176e6:	b2d3      	uxtb	r3, r2
   176e8:	2b09      	cmp	r3, #9
   176ea:	d9f1      	bls.n	176d0 <d_print_comp+0x834>
   176ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   176f0:	b2db      	uxtb	r3, r3
   176f2:	2b05      	cmp	r3, #5
   176f4:	bf98      	it	ls
   176f6:	f1a0 0237 	subls.w	r2, r0, #55	; 0x37
   176fa:	d9e9      	bls.n	176d0 <d_print_comp+0x834>
   176fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   17700:	b2db      	uxtb	r3, r3
   17702:	2b05      	cmp	r3, #5
   17704:	d9e2      	bls.n	176cc <d_print_comp+0x830>
   17706:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1770a:	bf8c      	ite	hi
   1770c:	2300      	movhi	r3, #0
   1770e:	2301      	movls	r3, #1
   17710:	285f      	cmp	r0, #95
   17712:	bf14      	ite	ne
   17714:	2300      	movne	r3, #0
   17716:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   1771a:	2b00      	cmp	r3, #0
   1771c:	f43f adfa 	beq.w	17314 <d_print_comp+0x478>
   17720:	fa5f f18c 	uxtb.w	r1, ip
   17724:	4640      	mov	r0, r8
   17726:	f7fe f8a3 	bl	15870 <d_append_char>
   1772a:	1c74      	adds	r4, r6, #1
   1772c:	e5f5      	b.n	1731a <d_print_comp+0x47e>
   1772e:	4640      	mov	r0, r8
   17730:	212e      	movs	r1, #46
   17732:	f7fe f89d 	bl	15870 <d_append_char>
   17736:	e43a      	b.n	16fae <d_print_comp+0x112>
   17738:	2400      	movs	r4, #0
   1773a:	e404      	b.n	16f46 <d_print_comp+0xaa>
   1773c:	684b      	ldr	r3, [r1, #4]
   1773e:	4640      	mov	r0, r8
   17740:	6899      	ldr	r1, [r3, #8]
   17742:	68da      	ldr	r2, [r3, #12]
   17744:	f7ff fa66 	bl	16c14 <d_append_buffer>
   17748:	e41b      	b.n	16f82 <d_print_comp+0xe6>
   1774a:	f8d8 2118 	ldr.w	r2, [r8, #280]
   1774e:	4640      	mov	r0, r8
   17750:	f000 f9c2 	bl	17ad8 <d_print_function_type>
   17754:	e592      	b.n	1727c <d_print_comp+0x3e0>
   17756:	4640      	mov	r0, r8
   17758:	2128      	movs	r1, #40
   1775a:	f7fe f889 	bl	15870 <d_append_char>
   1775e:	6879      	ldr	r1, [r7, #4]
   17760:	4640      	mov	r0, r8
   17762:	f000 faa7 	bl	17cb4 <d_print_cast>
   17766:	4640      	mov	r0, r8
   17768:	2129      	movs	r1, #41
   1776a:	f7fe f881 	bl	15870 <d_append_char>
   1776e:	e43b      	b.n	16fe8 <d_print_comp+0x14c>
   17770:	3301      	adds	r3, #1
   17772:	f8c8 311c 	str.w	r3, [r8, #284]
   17776:	e404      	b.n	16f82 <d_print_comp+0xe6>
   17778:	4640      	mov	r0, r8
   1777a:	2120      	movs	r1, #32
   1777c:	f7fe f878 	bl	15870 <d_append_char>
   17780:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   17784:	4640      	mov	r0, r8
   17786:	f000 f8cb 	bl	17920 <d_print_mod>
   1778a:	e553      	b.n	17234 <d_print_comp+0x398>
   1778c:	688a      	ldr	r2, [r1, #8]
   1778e:	7813      	ldrb	r3, [r2, #0]
   17790:	2b00      	cmp	r3, #0
   17792:	f47f abd8 	bne.w	16f46 <d_print_comp+0xaa>
   17796:	6893      	ldr	r3, [r2, #8]
   17798:	2b01      	cmp	r3, #1
   1779a:	f47f abd4 	bne.w	16f46 <d_print_comp+0xaa>
   1779e:	2832      	cmp	r0, #50
   177a0:	f47f abd1 	bne.w	16f46 <d_print_comp+0xaa>
   177a4:	6853      	ldr	r3, [r2, #4]
   177a6:	781b      	ldrb	r3, [r3, #0]
   177a8:	2b30      	cmp	r3, #48
   177aa:	d077      	beq.n	1789c <d_print_comp+0xa00>
   177ac:	2b31      	cmp	r3, #49
   177ae:	f47f abca 	bne.w	16f46 <d_print_comp+0xaa>
   177b2:	4640      	mov	r0, r8
   177b4:	4953      	ldr	r1, [pc, #332]	(17904 <d_print_comp+0xa68>)
   177b6:	f7ff fa61 	bl	16c7c <d_append_string>
   177ba:	f7ff bbe2 	b.w	16f82 <d_print_comp+0xe6>
   177be:	6889      	ldr	r1, [r1, #8]
   177c0:	780b      	ldrb	r3, [r1, #0]
   177c2:	2b00      	cmp	r3, #0
   177c4:	f47f abbf 	bne.w	16f46 <d_print_comp+0xaa>
   177c8:	2833      	cmp	r0, #51
   177ca:	d061      	beq.n	17890 <d_print_comp+0x9f4>
   177cc:	4640      	mov	r0, r8
   177ce:	f7ff fb65 	bl	16e9c <d_print_comp>
   177d2:	1ea3      	subs	r3, r4, #2
   177d4:	2b04      	cmp	r3, #4
   177d6:	f63f abd4 	bhi.w	16f82 <d_print_comp+0xe6>
   177da:	e8df f003 	tbb	[pc, r3]
   177de:	151b      	.short	0x151b
   177e0:	0003090f 	.word	0x0003090f
   177e4:	4640      	mov	r0, r8
   177e6:	4948      	ldr	r1, [pc, #288]	(17908 <d_print_comp+0xa6c>)
   177e8:	f7ff fa48 	bl	16c7c <d_append_string>
   177ec:	f7ff bbc9 	b.w	16f82 <d_print_comp+0xe6>
   177f0:	4640      	mov	r0, r8
   177f2:	4946      	ldr	r1, [pc, #280]	(1790c <d_print_comp+0xa70>)
   177f4:	f7ff fa42 	bl	16c7c <d_append_string>
   177f8:	f7ff bbc3 	b.w	16f82 <d_print_comp+0xe6>
   177fc:	4640      	mov	r0, r8
   177fe:	4944      	ldr	r1, [pc, #272]	(17910 <d_print_comp+0xa74>)
   17800:	f7ff fa3c 	bl	16c7c <d_append_string>
   17804:	f7ff bbbd 	b.w	16f82 <d_print_comp+0xe6>
   17808:	4640      	mov	r0, r8
   1780a:	216c      	movs	r1, #108
   1780c:	f7fe f830 	bl	15870 <d_append_char>
   17810:	f7ff bbb7 	b.w	16f82 <d_print_comp+0xe6>
   17814:	4640      	mov	r0, r8
   17816:	2175      	movs	r1, #117
   17818:	f7fe f82a 	bl	15870 <d_append_char>
   1781c:	f7ff bbb1 	b.w	16f82 <d_print_comp+0xe6>
   17820:	4640      	mov	r0, r8
   17822:	2120      	movs	r1, #32
   17824:	f7fe f824 	bl	15870 <d_append_char>
   17828:	e5fa      	b.n	17420 <d_print_comp+0x584>
   1782a:	4640      	mov	r0, r8
   1782c:	2120      	movs	r1, #32
   1782e:	f7fe f81f 	bl	15870 <d_append_char>
   17832:	e5e8      	b.n	17406 <d_print_comp+0x56a>
   17834:	4640      	mov	r0, r8
   17836:	212d      	movs	r1, #45
   17838:	f7fe f81a 	bl	15870 <d_append_char>
   1783c:	f7ff bb93 	b.w	16f66 <d_print_comp+0xca>
   17840:	6852      	ldr	r2, [r2, #4]
   17842:	6893      	ldr	r3, [r2, #8]
   17844:	2b01      	cmp	r3, #1
   17846:	f47f abe5 	bne.w	17014 <d_print_comp+0x178>
   1784a:	6853      	ldr	r3, [r2, #4]
   1784c:	781a      	ldrb	r2, [r3, #0]
   1784e:	2a3e      	cmp	r2, #62
   17850:	f47f abe0 	bne.w	17014 <d_print_comp+0x178>
   17854:	4640      	mov	r0, r8
   17856:	2128      	movs	r1, #40
   17858:	f7fe f80a 	bl	15870 <d_append_char>
   1785c:	f7ff bbda 	b.w	17014 <d_print_comp+0x178>
   17860:	f04f 0a01 	mov.w	sl, #1	; 0x1
   17864:	e6a7      	b.n	175b6 <d_print_comp+0x71a>
   17866:	6860      	ldr	r0, [r4, #4]
   17868:	492a      	ldr	r1, [pc, #168]	(17914 <d_print_comp+0xa78>)
   1786a:	f007 fa99 	bl	1eda0 <strncmp>
   1786e:	2800      	cmp	r0, #0
   17870:	f47f adc0 	bne.w	173f4 <d_print_comp+0x558>
   17874:	68b9      	ldr	r1, [r7, #8]
   17876:	4640      	mov	r0, r8
   17878:	f7ff fb10 	bl	16e9c <d_print_comp>
   1787c:	4640      	mov	r0, r8
   1787e:	4926      	ldr	r1, [pc, #152]	(17918 <d_print_comp+0xa7c>)
   17880:	f7ff f9fc 	bl	16c7c <d_append_string>
   17884:	f8c8 5118 	str.w	r5, [r8, #280]
   17888:	f7ff bb7b 	b.w	16f82 <d_print_comp+0xe6>
   1788c:	2601      	movs	r6, #1
   1788e:	e472      	b.n	17176 <d_print_comp+0x2da>
   17890:	212d      	movs	r1, #45
   17892:	4640      	mov	r0, r8
   17894:	f7fd ffec 	bl	15870 <d_append_char>
   17898:	68b9      	ldr	r1, [r7, #8]
   1789a:	e797      	b.n	177cc <d_print_comp+0x930>
   1789c:	4640      	mov	r0, r8
   1789e:	491f      	ldr	r1, [pc, #124]	(1791c <d_print_comp+0xa80>)
   178a0:	f7ff f9ec 	bl	16c7c <d_append_string>
   178a4:	f7ff bb6d 	b.w	16f82 <d_print_comp+0xe6>
   178a8:	00020a68 	.word	0x00020a68
   178ac:	00020bc0 	.word	0x00020bc0
   178b0:	00020b94 	.word	0x00020b94
   178b4:	00020b98 	.word	0x00020b98
   178b8:	00020b9c 	.word	0x00020b9c
   178bc:	00020b88 	.word	0x00020b88
   178c0:	00020ad8 	.word	0x00020ad8
   178c4:	00020aec 	.word	0x00020aec
   178c8:	00020af0 	.word	0x00020af0
   178cc:	00020b04 	.word	0x00020b04
   178d0:	00020b20 	.word	0x00020b20
   178d4:	00020b30 	.word	0x00020b30
   178d8:	00020b44 	.word	0x00020b44
   178dc:	00020b60 	.word	0x00020b60
   178e0:	00020b78 	.word	0x00020b78
   178e4:	00020b7c 	.word	0x00020b7c
   178e8:	00020a84 	.word	0x00020a84
   178ec:	00020b74 	.word	0x00020b74
   178f0:	00020a78 	.word	0x00020a78
   178f4:	00020ab4 	.word	0x00020ab4
   178f8:	00020ac4 	.word	0x00020ac4
   178fc:	00020a90 	.word	0x00020a90
   17900:	00020aac 	.word	0x00020aac
   17904:	00020bb8 	.word	0x00020bb8
   17908:	00020bac 	.word	0x00020bac
   1790c:	00020ba8 	.word	0x00020ba8
   17910:	00020ba4 	.word	0x00020ba4
   17914:	00020a6c 	.word	0x00020a6c
   17918:	00020a74 	.word	0x00020a74
   1791c:	00020bb0 	.word	0x00020bb0

00017920 <d_print_mod>:
   17920:	b530      	push	{r4, r5, lr}
   17922:	780b      	ldrb	r3, [r1, #0]
   17924:	b081      	sub	sp, #4
   17926:	3b03      	subs	r3, #3
   17928:	4604      	mov	r4, r0
   1792a:	460d      	mov	r5, r1
   1792c:	2b23      	cmp	r3, #35
   1792e:	d813      	bhi.n	17958 <d_print_mod+0x38>
   17930:	e8df f003 	tbb	[pc, r3]
   17934:	12121216 	.word	0x12121216
   17938:	12121212 	.word	0x12121212
   1793c:	12121212 	.word	0x12121212
   17940:	12121212 	.word	0x12121212
   17944:	1a121212 	.word	0x1a121212
   17948:	1e1a221e 	.word	0x1e1a221e
   1794c:	362e2622 	.word	0x362e2622
   17950:	12423e3a 	.word	0x12423e3a
   17954:	46121212 	.word	0x46121212
   17958:	f7ff faa0 	bl	16e9c <d_print_comp>
   1795c:	b001      	add	sp, #4
   1795e:	bd30      	pop	{r4, r5, pc}
   17960:	6849      	ldr	r1, [r1, #4]
   17962:	f7ff fa9b 	bl	16e9c <d_print_comp>
   17966:	e7f9      	b.n	1795c <d_print_mod+0x3c>
   17968:	491d      	ldr	r1, [pc, #116]	(179e0 <d_print_mod+0xc0>)
   1796a:	f7ff f987 	bl	16c7c <d_append_string>
   1796e:	e7f5      	b.n	1795c <d_print_mod+0x3c>
   17970:	491c      	ldr	r1, [pc, #112]	(179e4 <d_print_mod+0xc4>)
   17972:	f7ff f983 	bl	16c7c <d_append_string>
   17976:	e7f1      	b.n	1795c <d_print_mod+0x3c>
   17978:	491b      	ldr	r1, [pc, #108]	(179e8 <d_print_mod+0xc8>)
   1797a:	f7ff f97f 	bl	16c7c <d_append_string>
   1797e:	e7ed      	b.n	1795c <d_print_mod+0x3c>
   17980:	2120      	movs	r1, #32
   17982:	f7fd ff75 	bl	15870 <d_append_char>
   17986:	68a9      	ldr	r1, [r5, #8]
   17988:	4620      	mov	r0, r4
   1798a:	f7ff fa87 	bl	16e9c <d_print_comp>
   1798e:	e7e5      	b.n	1795c <d_print_mod+0x3c>
   17990:	6803      	ldr	r3, [r0, #0]
   17992:	f013 0f04 	tst.w	r3, #4	; 0x4
   17996:	d1e1      	bne.n	1795c <d_print_mod+0x3c>
   17998:	212a      	movs	r1, #42
   1799a:	f7fd ff69 	bl	15870 <d_append_char>
   1799e:	e7dd      	b.n	1795c <d_print_mod+0x3c>
   179a0:	2126      	movs	r1, #38
   179a2:	f7fd ff65 	bl	15870 <d_append_char>
   179a6:	e7d9      	b.n	1795c <d_print_mod+0x3c>
   179a8:	4910      	ldr	r1, [pc, #64]	(179ec <d_print_mod+0xcc>)
   179aa:	f7ff f967 	bl	16c7c <d_append_string>
   179ae:	e7d5      	b.n	1795c <d_print_mod+0x3c>
   179b0:	490f      	ldr	r1, [pc, #60]	(179f0 <d_print_mod+0xd0>)
   179b2:	f7ff f963 	bl	16c7c <d_append_string>
   179b6:	e7d1      	b.n	1795c <d_print_mod+0x3c>
   179b8:	490e      	ldr	r1, [pc, #56]	(179f4 <d_print_mod+0xd4>)
   179ba:	f7ff f95f 	bl	16c7c <d_append_string>
   179be:	e7cd      	b.n	1795c <d_print_mod+0x3c>
   179c0:	f890 3108 	ldrb.w	r3, [r0, #264]
   179c4:	2b28      	cmp	r3, #40
   179c6:	d002      	beq.n	179ce <d_print_mod+0xae>
   179c8:	2120      	movs	r1, #32
   179ca:	f7fd ff51 	bl	15870 <d_append_char>
   179ce:	6869      	ldr	r1, [r5, #4]
   179d0:	4620      	mov	r0, r4
   179d2:	f7ff fa63 	bl	16e9c <d_print_comp>
   179d6:	4620      	mov	r0, r4
   179d8:	4907      	ldr	r1, [pc, #28]	(179f8 <d_print_mod+0xd8>)
   179da:	f7ff f94f 	bl	16c7c <d_append_string>
   179de:	e7bd      	b.n	1795c <d_print_mod+0x3c>
   179e0:	00020bd0 	.word	0x00020bd0
   179e4:	00020bdc 	.word	0x00020bdc
   179e8:	00020be8 	.word	0x00020be8
   179ec:	00020bf0 	.word	0x00020bf0
   179f0:	00020bf4 	.word	0x00020bf4
   179f4:	00020c00 	.word	0x00020c00
   179f8:	00020b74 	.word	0x00020b74

000179fc <d_print_mod_list>:
   179fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a00:	4606      	mov	r6, r0
   17a02:	460d      	mov	r5, r1
   17a04:	4614      	mov	r4, r2
   17a06:	2900      	cmp	r1, #0
   17a08:	d02d      	beq.n	17a66 <d_print_mod_list+0x6a>
   17a0a:	f8d0 311c 	ldr.w	r3, [r0, #284]
   17a0e:	2b00      	cmp	r3, #0
   17a10:	d129      	bne.n	17a66 <d_print_mod_list+0x6a>
   17a12:	f04f 0801 	mov.w	r8, #1	; 0x1
   17a16:	e018      	b.n	17a4a <d_print_mod_list+0x4e>
   17a18:	6869      	ldr	r1, [r5, #4]
   17a1a:	68eb      	ldr	r3, [r5, #12]
   17a1c:	f8d6 7114 	ldr.w	r7, [r6, #276]
   17a20:	f8c6 3114 	str.w	r3, [r6, #276]
   17a24:	780b      	ldrb	r3, [r1, #0]
   17a26:	f8c5 8008 	str.w	r8, [r5, #8]
   17a2a:	2b24      	cmp	r3, #36
   17a2c:	d01d      	beq.n	17a6a <d_print_mod_list+0x6e>
   17a2e:	2b25      	cmp	r3, #37
   17a30:	d022      	beq.n	17a78 <d_print_mod_list+0x7c>
   17a32:	2b02      	cmp	r3, #2
   17a34:	d027      	beq.n	17a86 <d_print_mod_list+0x8a>
   17a36:	4630      	mov	r0, r6
   17a38:	f7ff ff72 	bl	17920 <d_print_mod>
   17a3c:	f8c6 7114 	str.w	r7, [r6, #276]
   17a40:	682d      	ldr	r5, [r5, #0]
   17a42:	b185      	cbz	r5, 17a66 <d_print_mod_list+0x6a>
   17a44:	f8d6 311c 	ldr.w	r3, [r6, #284]
   17a48:	b96b      	cbnz	r3, 17a66 <d_print_mod_list+0x6a>
   17a4a:	68ab      	ldr	r3, [r5, #8]
   17a4c:	2b00      	cmp	r3, #0
   17a4e:	d1f7      	bne.n	17a40 <d_print_mod_list+0x44>
   17a50:	2c00      	cmp	r4, #0
   17a52:	d1e1      	bne.n	17a18 <d_print_mod_list+0x1c>
   17a54:	6869      	ldr	r1, [r5, #4]
   17a56:	780b      	ldrb	r3, [r1, #0]
   17a58:	3b19      	subs	r3, #25
   17a5a:	b2db      	uxtb	r3, r3
   17a5c:	2b02      	cmp	r3, #2
   17a5e:	d8dc      	bhi.n	17a1a <d_print_mod_list+0x1e>
   17a60:	682d      	ldr	r5, [r5, #0]
   17a62:	2d00      	cmp	r5, #0
   17a64:	d1ee      	bne.n	17a44 <d_print_mod_list+0x48>
   17a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17a6a:	682a      	ldr	r2, [r5, #0]
   17a6c:	4630      	mov	r0, r6
   17a6e:	f000 f833 	bl	17ad8 <d_print_function_type>
   17a72:	f8c6 7114 	str.w	r7, [r6, #276]
   17a76:	e7f6      	b.n	17a66 <d_print_mod_list+0x6a>
   17a78:	682a      	ldr	r2, [r5, #0]
   17a7a:	4630      	mov	r0, r6
   17a7c:	f7ff f936 	bl	16cec <d_print_array_type>
   17a80:	f8c6 7114 	str.w	r7, [r6, #276]
   17a84:	e7ef      	b.n	17a66 <d_print_mod_list+0x6a>
   17a86:	3b02      	subs	r3, #2
   17a88:	f8d6 4118 	ldr.w	r4, [r6, #280]
   17a8c:	f8c6 3118 	str.w	r3, [r6, #280]
   17a90:	6849      	ldr	r1, [r1, #4]
   17a92:	4630      	mov	r0, r6
   17a94:	f7ff fa02 	bl	16e9c <d_print_comp>
   17a98:	6833      	ldr	r3, [r6, #0]
   17a9a:	f8c6 4118 	str.w	r4, [r6, #280]
   17a9e:	f013 0f04 	tst.w	r3, #4	; 0x4
   17aa2:	d112      	bne.n	17aca <d_print_mod_list+0xce>
   17aa4:	4630      	mov	r0, r6
   17aa6:	490b      	ldr	r1, [pc, #44]	(17ad4 <d_print_mod_list+0xd8>)
   17aa8:	f7ff f8e8 	bl	16c7c <d_append_string>
   17aac:	686a      	ldr	r2, [r5, #4]
   17aae:	6891      	ldr	r1, [r2, #8]
   17ab0:	e000      	b.n	17ab4 <d_print_mod_list+0xb8>
   17ab2:	6849      	ldr	r1, [r1, #4]
   17ab4:	780b      	ldrb	r3, [r1, #0]
   17ab6:	3b19      	subs	r3, #25
   17ab8:	b2db      	uxtb	r3, r3
   17aba:	2b02      	cmp	r3, #2
   17abc:	d9f9      	bls.n	17ab2 <d_print_mod_list+0xb6>
   17abe:	4630      	mov	r0, r6
   17ac0:	f7ff f9ec 	bl	16e9c <d_print_comp>
   17ac4:	f8c6 7114 	str.w	r7, [r6, #276]
   17ac8:	e7cd      	b.n	17a66 <d_print_mod_list+0x6a>
   17aca:	4630      	mov	r0, r6
   17acc:	212e      	movs	r1, #46
   17ace:	f7fd fecf 	bl	15870 <d_append_char>
   17ad2:	e7eb      	b.n	17aac <d_print_mod_list+0xb0>
   17ad4:	00020a68 	.word	0x00020a68

00017ad8 <d_print_function_type>:
   17ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17adc:	4605      	mov	r5, r0
   17ade:	4688      	mov	r8, r1
   17ae0:	4616      	mov	r6, r2
   17ae2:	2a00      	cmp	r2, #0
   17ae4:	f000 80de 	beq.w	17ca4 <d_print_function_type+0x1cc>
   17ae8:	6893      	ldr	r3, [r2, #8]
   17aea:	2b00      	cmp	r3, #0
   17aec:	f040 80da 	bne.w	17ca4 <d_print_function_type+0x1cc>
   17af0:	4611      	mov	r1, r2
   17af2:	2001      	movs	r0, #1
   17af4:	684b      	ldr	r3, [r1, #4]
   17af6:	781a      	ldrb	r2, [r3, #0]
   17af8:	3a16      	subs	r2, #22
   17afa:	b2d3      	uxtb	r3, r2
   17afc:	2b10      	cmp	r3, #16
   17afe:	d865      	bhi.n	17bcc <d_print_function_type+0xf4>
   17b00:	b252      	sxtb	r2, r2
   17b02:	fa10 f202 	lsls.w	r2, r0, r2
   17b06:	4b6a      	ldr	r3, [pc, #424]	(17cb0 <d_print_function_type+0x1d8>)
   17b08:	ea02 0303 	and.w	r3, r2, r3
   17b0c:	2b00      	cmp	r3, #0
   17b0e:	d16c      	bne.n	17bea <d_print_function_type+0x112>
   17b10:	f412 7f60 	tst.w	r2, #896	; 0x380
   17b14:	d05a      	beq.n	17bcc <d_print_function_type+0xf4>
   17b16:	f895 3108 	ldrb.w	r3, [r5, #264]
   17b1a:	2b28      	cmp	r3, #40
   17b1c:	d001      	beq.n	17b22 <d_print_function_type+0x4a>
   17b1e:	2b2a      	cmp	r3, #42
   17b20:	d165      	bne.n	17bee <d_print_function_type+0x116>
   17b22:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17b26:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17b2a:	d076      	beq.n	17c1a <d_print_function_type+0x142>
   17b2c:	2128      	movs	r1, #40
   17b2e:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   17b32:	eb05 030c 	add.w	r3, r5, ip
   17b36:	2400      	movs	r4, #0
   17b38:	7119      	strb	r1, [r3, #4]
   17b3a:	f8c5 2104 	str.w	r2, [r5, #260]
   17b3e:	f885 1108 	strb.w	r1, [r5, #264]
   17b42:	f8d5 7118 	ldr.w	r7, [r5, #280]
   17b46:	4628      	mov	r0, r5
   17b48:	f8c5 4118 	str.w	r4, [r5, #280]
   17b4c:	4631      	mov	r1, r6
   17b4e:	4622      	mov	r2, r4
   17b50:	f7ff ff54 	bl	179fc <d_print_mod_list>
   17b54:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17b58:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17b5c:	d06b      	beq.n	17c36 <d_print_function_type+0x15e>
   17b5e:	2129      	movs	r1, #41
   17b60:	eb05 030c 	add.w	r3, r5, ip
   17b64:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   17b68:	7119      	strb	r1, [r3, #4]
   17b6a:	f8c5 2104 	str.w	r2, [r5, #260]
   17b6e:	f885 1108 	strb.w	r1, [r5, #264]
   17b72:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17b76:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17b7a:	d077      	beq.n	17c6c <d_print_function_type+0x194>
   17b7c:	2128      	movs	r1, #40
   17b7e:	eb05 030c 	add.w	r3, r5, ip
   17b82:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   17b86:	7119      	strb	r1, [r3, #4]
   17b88:	f8c5 2104 	str.w	r2, [r5, #260]
   17b8c:	f885 1108 	strb.w	r1, [r5, #264]
   17b90:	f8d8 1008 	ldr.w	r1, [r8, #8]
   17b94:	b111      	cbz	r1, 17b9c <d_print_function_type+0xc4>
   17b96:	4628      	mov	r0, r5
   17b98:	f7ff f980 	bl	16e9c <d_print_comp>
   17b9c:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17ba0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17ba4:	d054      	beq.n	17c50 <d_print_function_type+0x178>
   17ba6:	2129      	movs	r1, #41
   17ba8:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   17bac:	eb05 030c 	add.w	r3, r5, ip
   17bb0:	7119      	strb	r1, [r3, #4]
   17bb2:	f8c5 2104 	str.w	r2, [r5, #260]
   17bb6:	f885 1108 	strb.w	r1, [r5, #264]
   17bba:	4628      	mov	r0, r5
   17bbc:	4631      	mov	r1, r6
   17bbe:	2201      	movs	r2, #1
   17bc0:	f7ff ff1c 	bl	179fc <d_print_mod_list>
   17bc4:	f8c5 7118 	str.w	r7, [r5, #280]
   17bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17bcc:	6809      	ldr	r1, [r1, #0]
   17bce:	b111      	cbz	r1, 17bd6 <d_print_function_type+0xfe>
   17bd0:	688b      	ldr	r3, [r1, #8]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d08e      	beq.n	17af4 <d_print_function_type+0x1c>
   17bd6:	2200      	movs	r2, #0
   17bd8:	f8d5 7118 	ldr.w	r7, [r5, #280]
   17bdc:	4628      	mov	r0, r5
   17bde:	f8c5 2118 	str.w	r2, [r5, #280]
   17be2:	4631      	mov	r1, r6
   17be4:	f7ff ff0a 	bl	179fc <d_print_mod_list>
   17be8:	e7c3      	b.n	17b72 <d_print_function_type+0x9a>
   17bea:	f895 3108 	ldrb.w	r3, [r5, #264]
   17bee:	2b20      	cmp	r3, #32
   17bf0:	d097      	beq.n	17b22 <d_print_function_type+0x4a>
   17bf2:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17bf6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17bfa:	d045      	beq.n	17c88 <d_print_function_type+0x1b0>
   17bfc:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   17c00:	f8c5 2104 	str.w	r2, [r5, #260]
   17c04:	eb05 030c 	add.w	r3, r5, ip
   17c08:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17c0c:	2120      	movs	r1, #32
   17c0e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17c12:	7119      	strb	r1, [r3, #4]
   17c14:	f885 1108 	strb.w	r1, [r5, #264]
   17c18:	d188      	bne.n	17b2c <d_print_function_type+0x54>
   17c1a:	2400      	movs	r4, #0
   17c1c:	4661      	mov	r1, ip
   17c1e:	f885 4103 	strb.w	r4, [r5, #259]
   17c22:	1d28      	adds	r0, r5, #4
   17c24:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17c28:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17c2c:	4798      	blx	r3
   17c2e:	f8c5 4104 	str.w	r4, [r5, #260]
   17c32:	46a4      	mov	ip, r4
   17c34:	e77a      	b.n	17b2c <d_print_function_type+0x54>
   17c36:	4661      	mov	r1, ip
   17c38:	f885 4103 	strb.w	r4, [r5, #259]
   17c3c:	1d28      	adds	r0, r5, #4
   17c3e:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17c42:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17c46:	4798      	blx	r3
   17c48:	f8c5 4104 	str.w	r4, [r5, #260]
   17c4c:	46a4      	mov	ip, r4
   17c4e:	e786      	b.n	17b5e <d_print_function_type+0x86>
   17c50:	2400      	movs	r4, #0
   17c52:	4661      	mov	r1, ip
   17c54:	f885 4103 	strb.w	r4, [r5, #259]
   17c58:	1d28      	adds	r0, r5, #4
   17c5a:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17c5e:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17c62:	4798      	blx	r3
   17c64:	f8c5 4104 	str.w	r4, [r5, #260]
   17c68:	46a4      	mov	ip, r4
   17c6a:	e79c      	b.n	17ba6 <d_print_function_type+0xce>
   17c6c:	2400      	movs	r4, #0
   17c6e:	4661      	mov	r1, ip
   17c70:	f885 4103 	strb.w	r4, [r5, #259]
   17c74:	1d28      	adds	r0, r5, #4
   17c76:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17c7a:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17c7e:	4798      	blx	r3
   17c80:	f8c5 4104 	str.w	r4, [r5, #260]
   17c84:	46a4      	mov	ip, r4
   17c86:	e779      	b.n	17b7c <d_print_function_type+0xa4>
   17c88:	2400      	movs	r4, #0
   17c8a:	4661      	mov	r1, ip
   17c8c:	f885 4103 	strb.w	r4, [r5, #259]
   17c90:	1d28      	adds	r0, r5, #4
   17c92:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17c96:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17c9a:	4798      	blx	r3
   17c9c:	f8c5 4104 	str.w	r4, [r5, #260]
   17ca0:	46a4      	mov	ip, r4
   17ca2:	e7ab      	b.n	17bfc <d_print_function_type+0x124>
   17ca4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17ca8:	2b00      	cmp	r3, #0
   17caa:	f47f af34 	bne.w	17b16 <d_print_function_type+0x3e>
   17cae:	e792      	b.n	17bd6 <d_print_function_type+0xfe>
   17cb0:	00010c47 	.word	0x00010c47

00017cb4 <d_print_cast>:
   17cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17cb6:	460e      	mov	r6, r1
   17cb8:	6849      	ldr	r1, [r1, #4]
   17cba:	b083      	sub	sp, #12
   17cbc:	780b      	ldrb	r3, [r1, #0]
   17cbe:	4605      	mov	r5, r0
   17cc0:	2b04      	cmp	r3, #4
   17cc2:	d003      	beq.n	17ccc <d_print_cast+0x18>
   17cc4:	f7ff f8ea 	bl	16e9c <d_print_comp>
   17cc8:	b003      	add	sp, #12
   17cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ccc:	f8d0 2114 	ldr.w	r2, [r0, #276]
   17cd0:	2300      	movs	r3, #0
   17cd2:	f8d0 7118 	ldr.w	r7, [r0, #280]
   17cd6:	f8c0 3118 	str.w	r3, [r0, #280]
   17cda:	ab02      	add	r3, sp, #8
   17cdc:	f843 2d08 	str.w	r2, [r3, #-8]!
   17ce0:	f8c0 3114 	str.w	r3, [r0, #276]
   17ce4:	9101      	str	r1, [sp, #4]
   17ce6:	6849      	ldr	r1, [r1, #4]
   17ce8:	f7ff f8d8 	bl	16e9c <d_print_comp>
   17cec:	f895 2108 	ldrb.w	r2, [r5, #264]
   17cf0:	9b00      	ldr	r3, [sp, #0]
   17cf2:	2a3c      	cmp	r2, #60
   17cf4:	f8c5 3114 	str.w	r3, [r5, #276]
   17cf8:	d045      	beq.n	17d86 <d_print_cast+0xd2>
   17cfa:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17cfe:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17d02:	d024      	beq.n	17d4e <d_print_cast+0x9a>
   17d04:	213c      	movs	r1, #60
   17d06:	f10c 0301 	add.w	r3, ip, #1	; 0x1
   17d0a:	eb05 020c 	add.w	r2, r5, ip
   17d0e:	7111      	strb	r1, [r2, #4]
   17d10:	f8c5 3104 	str.w	r3, [r5, #260]
   17d14:	f885 1108 	strb.w	r1, [r5, #264]
   17d18:	6873      	ldr	r3, [r6, #4]
   17d1a:	4628      	mov	r0, r5
   17d1c:	6899      	ldr	r1, [r3, #8]
   17d1e:	f7ff f8bd 	bl	16e9c <d_print_comp>
   17d22:	f895 3108 	ldrb.w	r3, [r5, #264]
   17d26:	2b3e      	cmp	r3, #62
   17d28:	d032      	beq.n	17d90 <d_print_cast+0xdc>
   17d2a:	f8d5 c104 	ldr.w	ip, [r5, #260]
   17d2e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   17d32:	d01a      	beq.n	17d6a <d_print_cast+0xb6>
   17d34:	213e      	movs	r1, #62
   17d36:	eb05 030c 	add.w	r3, r5, ip
   17d3a:	f10c 0201 	add.w	r2, ip, #1	; 0x1
   17d3e:	7119      	strb	r1, [r3, #4]
   17d40:	f8c5 2104 	str.w	r2, [r5, #260]
   17d44:	f885 1108 	strb.w	r1, [r5, #264]
   17d48:	f8c5 7118 	str.w	r7, [r5, #280]
   17d4c:	e7bc      	b.n	17cc8 <d_print_cast+0x14>
   17d4e:	2400      	movs	r4, #0
   17d50:	4661      	mov	r1, ip
   17d52:	f885 4103 	strb.w	r4, [r5, #259]
   17d56:	1d28      	adds	r0, r5, #4
   17d58:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17d5c:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17d60:	4798      	blx	r3
   17d62:	f8c5 4104 	str.w	r4, [r5, #260]
   17d66:	46a4      	mov	ip, r4
   17d68:	e7cc      	b.n	17d04 <d_print_cast+0x50>
   17d6a:	2400      	movs	r4, #0
   17d6c:	4661      	mov	r1, ip
   17d6e:	f885 4103 	strb.w	r4, [r5, #259]
   17d72:	1d28      	adds	r0, r5, #4
   17d74:	f8d5 2110 	ldr.w	r2, [r5, #272]
   17d78:	f8d5 310c 	ldr.w	r3, [r5, #268]
   17d7c:	4798      	blx	r3
   17d7e:	f8c5 4104 	str.w	r4, [r5, #260]
   17d82:	46a4      	mov	ip, r4
   17d84:	e7d6      	b.n	17d34 <d_print_cast+0x80>
   17d86:	4628      	mov	r0, r5
   17d88:	2120      	movs	r1, #32
   17d8a:	f7fd fd71 	bl	15870 <d_append_char>
   17d8e:	e7b4      	b.n	17cfa <d_print_cast+0x46>
   17d90:	4628      	mov	r0, r5
   17d92:	2120      	movs	r1, #32
   17d94:	f7fd fd6c 	bl	15870 <d_append_char>
   17d98:	e7c7      	b.n	17d2a <d_print_cast+0x76>
   17d9a:	46c0      	nop			(mov r8, r8)

00017d9c <d_print_expr_op>:
   17d9c:	780b      	ldrb	r3, [r1, #0]
   17d9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17da2:	2b29      	cmp	r3, #41
   17da4:	4604      	mov	r4, r0
   17da6:	d003      	beq.n	17db0 <d_print_expr_op+0x14>
   17da8:	f7ff f878 	bl	16e9c <d_print_comp>
   17dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17db0:	684b      	ldr	r3, [r1, #4]
   17db2:	689f      	ldr	r7, [r3, #8]
   17db4:	f8d3 8004 	ldr.w	r8, [r3, #4]
   17db8:	2f00      	cmp	r7, #0
   17dba:	d0f7      	beq.n	17dac <d_print_expr_op+0x10>
   17dbc:	2500      	movs	r5, #0
   17dbe:	f100 0904 	add.w	r9, r0, #4	; 0x4
   17dc2:	46aa      	mov	sl, r5
   17dc4:	e00a      	b.n	17ddc <d_print_expr_op+0x40>
   17dc6:	3501      	adds	r5, #1
   17dc8:	1c4a      	adds	r2, r1, #1
   17dca:	eb04 0301 	add.w	r3, r4, r1
   17dce:	42af      	cmp	r7, r5
   17dd0:	711e      	strb	r6, [r3, #4]
   17dd2:	f8c4 2104 	str.w	r2, [r4, #260]
   17dd6:	f884 6108 	strb.w	r6, [r4, #264]
   17dda:	d9e7      	bls.n	17dac <d_print_expr_op+0x10>
   17ddc:	f8d4 1104 	ldr.w	r1, [r4, #260]
   17de0:	f818 6005 	ldrb.w	r6, [r8, r5]
   17de4:	29ff      	cmp	r1, #255
   17de6:	d1ee      	bne.n	17dc6 <d_print_expr_op+0x2a>
   17de8:	f884 a103 	strb.w	sl, [r4, #259]
   17dec:	f8d4 2110 	ldr.w	r2, [r4, #272]
   17df0:	f8d4 310c 	ldr.w	r3, [r4, #268]
   17df4:	4648      	mov	r0, r9
   17df6:	4798      	blx	r3
   17df8:	f8c4 a104 	str.w	sl, [r4, #260]
   17dfc:	4651      	mov	r1, sl
   17dfe:	e7e2      	b.n	17dc6 <d_print_expr_op+0x2a>

00017e00 <d_demangle_callback>:
   17e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e04:	b0d7      	sub	sp, #348
   17e06:	7806      	ldrb	r6, [r0, #0]
   17e08:	af00      	add	r7, sp, #0
   17e0a:	2e5f      	cmp	r6, #95
   17e0c:	4604      	mov	r4, r0
   17e0e:	460d      	mov	r5, r1
   17e10:	4691      	mov	r9, r2
   17e12:	469a      	mov	sl, r3
   17e14:	d105      	bne.n	17e22 <d_demangle_callback+0x22>
   17e16:	7843      	ldrb	r3, [r0, #1]
   17e18:	2b5a      	cmp	r3, #90
   17e1a:	bf08      	it	eq
   17e1c:	f04f 0800 	moveq.w	r8, #0	; 0x0
   17e20:	d017      	beq.n	17e52 <d_demangle_callback+0x52>
   17e22:	4620      	mov	r0, r4
   17e24:	4961      	ldr	r1, [pc, #388]	(17fac <d_demangle_callback+0x1ac>)
   17e26:	2208      	movs	r2, #8
   17e28:	f006 ffba 	bl	1eda0 <strncmp>
   17e2c:	b960      	cbnz	r0, 17e48 <d_demangle_callback+0x48>
   17e2e:	7a22      	ldrb	r2, [r4, #8]
   17e30:	2a5f      	cmp	r2, #95
   17e32:	bf14      	ite	ne
   17e34:	2300      	movne	r3, #0
   17e36:	2301      	moveq	r3, #1
   17e38:	2a2e      	cmp	r2, #46
   17e3a:	bf08      	it	eq
   17e3c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17e40:	2b00      	cmp	r3, #0
   17e42:	d175      	bne.n	17f30 <d_demangle_callback+0x130>
   17e44:	2a24      	cmp	r2, #36
   17e46:	d073      	beq.n	17f30 <d_demangle_callback+0x130>
   17e48:	f015 0010 	ands.w	r0, r5, #16	; 0x10
   17e4c:	d06b      	beq.n	17f26 <d_demangle_callback+0x126>
   17e4e:	f04f 0801 	mov.w	r8, #1	; 0x1
   17e52:	4620      	mov	r0, r4
   17e54:	f006 ff9c 	bl	1ed90 <strlen>
   17e58:	eb04 0300 	add.w	r3, r4, r0
   17e5c:	2200      	movs	r2, #0
   17e5e:	f8c7 3128 	str.w	r3, [r7, #296]
   17e62:	0043      	lsls	r3, r0, #1
   17e64:	f8c7 313c 	str.w	r3, [r7, #316]
   17e68:	f8c7 2138 	str.w	r2, [r7, #312]
   17e6c:	0143      	lsls	r3, r0, #5
   17e6e:	f8c7 2144 	str.w	r2, [r7, #324]
   17e72:	f8c7 214c 	str.w	r2, [r7, #332]
   17e76:	f8c7 2150 	str.w	r2, [r7, #336]
   17e7a:	f8c7 2154 	str.w	r2, [r7, #340]
   17e7e:	00c2      	lsls	r2, r0, #3
   17e80:	1a9b      	subs	r3, r3, r2
   17e82:	f8c7 0148 	str.w	r0, [r7, #328]
   17e86:	3308      	adds	r3, #8
   17e88:	0080      	lsls	r0, r0, #2
   17e8a:	46eb      	mov	fp, sp
   17e8c:	300e      	adds	r0, #14
   17e8e:	ebc3 0d0d 	rsb	sp, r3, sp
   17e92:	ea4f 02dd 	mov.w	r2, sp, lsr #3
   17e96:	f020 0007 	bic.w	r0, r0, #7	; 0x7
   17e9a:	00d2      	lsls	r2, r2, #3
   17e9c:	ebc0 0d0d 	rsb	sp, r0, sp
   17ea0:	f8c7 4124 	str.w	r4, [r7, #292]
   17ea4:	f8c7 512c 	str.w	r5, [r7, #300]
   17ea8:	f8c7 4130 	str.w	r4, [r7, #304]
   17eac:	f8c7 2134 	str.w	r2, [r7, #308]
   17eb0:	f8c7 d140 	str.w	sp, [r7, #320]
   17eb4:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   17eb8:	d15f      	bne.n	17f7a <d_demangle_callback+0x17a>
   17eba:	2e5f      	cmp	r6, #95
   17ebc:	d066      	beq.n	17f8c <d_demangle_callback+0x18c>
   17ebe:	2100      	movs	r1, #0
   17ec0:	f015 0f01 	tst.w	r5, #1	; 0x1
   17ec4:	d004      	beq.n	17ed0 <d_demangle_callback+0xd0>
   17ec6:	f8d7 3130 	ldr.w	r3, [r7, #304]
   17eca:	781a      	ldrb	r2, [r3, #0]
   17ecc:	2a00      	cmp	r2, #0
   17ece:	d15a      	bne.n	17f86 <d_demangle_callback+0x186>
   17ed0:	2900      	cmp	r1, #0
   17ed2:	d058      	beq.n	17f86 <d_demangle_callback+0x186>
   17ed4:	1d3c      	adds	r4, r7, #4
   17ed6:	6025      	str	r5, [r4, #0]
   17ed8:	2500      	movs	r5, #0
   17eda:	4620      	mov	r0, r4
   17edc:	f8c4 5104 	str.w	r5, [r4, #260]
   17ee0:	f884 5108 	strb.w	r5, [r4, #264]
   17ee4:	f8c4 5114 	str.w	r5, [r4, #276]
   17ee8:	f8c4 5118 	str.w	r5, [r4, #280]
   17eec:	f8c4 910c 	str.w	r9, [r4, #268]
   17ef0:	f8c4 a110 	str.w	sl, [r4, #272]
   17ef4:	f8c4 511c 	str.w	r5, [r4, #284]
   17ef8:	f7fe ffd0 	bl	16e9c <d_print_comp>
   17efc:	f8d4 1104 	ldr.w	r1, [r4, #260]
   17f00:	f107 0008 	add.w	r0, r7, #8	; 0x8
   17f04:	eb04 0301 	add.w	r3, r4, r1
   17f08:	711d      	strb	r5, [r3, #4]
   17f0a:	f8d4 2110 	ldr.w	r2, [r4, #272]
   17f0e:	f8d4 310c 	ldr.w	r3, [r4, #268]
   17f12:	4798      	blx	r3
   17f14:	f8d4 311c 	ldr.w	r3, [r4, #284]
   17f18:	f8c4 5104 	str.w	r5, [r4, #260]
   17f1c:	42ab      	cmp	r3, r5
   17f1e:	bf14      	ite	ne
   17f20:	2000      	movne	r0, #0
   17f22:	2001      	moveq	r0, #1
   17f24:	46dd      	mov	sp, fp
   17f26:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
   17f2a:	46bd      	mov	sp, r7
   17f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f30:	7a63      	ldrb	r3, [r4, #9]
   17f32:	2b49      	cmp	r3, #73
   17f34:	bf14      	ite	ne
   17f36:	2200      	movne	r2, #0
   17f38:	2201      	moveq	r2, #1
   17f3a:	2b44      	cmp	r3, #68
   17f3c:	bf14      	ite	ne
   17f3e:	4613      	movne	r3, r2
   17f40:	f042 0301 	orreq.w	r3, r2, #1	; 0x1
   17f44:	2b00      	cmp	r3, #0
   17f46:	f43f af7f 	beq.w	17e48 <d_demangle_callback+0x48>
   17f4a:	7aa3      	ldrb	r3, [r4, #10]
   17f4c:	2b5f      	cmp	r3, #95
   17f4e:	f47f af7b 	bne.w	17e48 <d_demangle_callback+0x48>
   17f52:	4b17      	ldr	r3, [pc, #92]	(17fb0 <d_demangle_callback+0x1b0>)
   17f54:	4817      	ldr	r0, [pc, #92]	(17fb4 <d_demangle_callback+0x1b4>)
   17f56:	2a00      	cmp	r2, #0
   17f58:	bf08      	it	eq
   17f5a:	4618      	moveq	r0, r3
   17f5c:	bf14      	ite	ne
   17f5e:	211d      	movne	r1, #29
   17f60:	211c      	moveq	r1, #28
   17f62:	4652      	mov	r2, sl
   17f64:	340b      	adds	r4, #11
   17f66:	47c8      	blx	r9
   17f68:	4620      	mov	r0, r4
   17f6a:	f006 ff11 	bl	1ed90 <strlen>
   17f6e:	4652      	mov	r2, sl
   17f70:	4601      	mov	r1, r0
   17f72:	4620      	mov	r0, r4
   17f74:	47c8      	blx	r9
   17f76:	2001      	movs	r0, #1
   17f78:	e7d5      	b.n	17f26 <d_demangle_callback+0x126>
   17f7a:	f507 7092 	add.w	r0, r7, #292	; 0x124
   17f7e:	f7fd fd07 	bl	15990 <d_type>
   17f82:	4601      	mov	r1, r0
   17f84:	e79c      	b.n	17ec0 <d_demangle_callback+0xc0>
   17f86:	2000      	movs	r0, #0
   17f88:	46dd      	mov	sp, fp
   17f8a:	e7cc      	b.n	17f26 <d_demangle_callback+0x126>
   17f8c:	1c62      	adds	r2, r4, #1
   17f8e:	f8c7 2130 	str.w	r2, [r7, #304]
   17f92:	7863      	ldrb	r3, [r4, #1]
   17f94:	2b5a      	cmp	r3, #90
   17f96:	d192      	bne.n	17ebe <d_demangle_callback+0xbe>
   17f98:	1c53      	adds	r3, r2, #1
   17f9a:	2101      	movs	r1, #1
   17f9c:	f507 7092 	add.w	r0, r7, #292	; 0x124
   17fa0:	f8c7 3130 	str.w	r3, [r7, #304]
   17fa4:	f7fe f8b6 	bl	16114 <d_encoding>
   17fa8:	4601      	mov	r1, r0
   17faa:	e789      	b.n	17ec0 <d_demangle_callback+0xc0>
   17fac:	00020a30 	.word	0x00020a30
   17fb0:	00020c0c 	.word	0x00020c0c
   17fb4:	00020c2c 	.word	0x00020c2c

00017fb8 <__gcclibcxx_demangle_callback>:
   17fb8:	f1d1 0301 	rsbs	r3, r1, #1	; 0x1
   17fbc:	bf38      	it	cc
   17fbe:	2300      	movcc	r3, #0
   17fc0:	2800      	cmp	r0, #0
   17fc2:	bf08      	it	eq
   17fc4:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   17fc8:	b510      	push	{r4, lr}
   17fca:	468c      	mov	ip, r1
   17fcc:	4614      	mov	r4, r2
   17fce:	b113      	cbz	r3, 17fd6 <__gcclibcxx_demangle_callback+0x1e>
   17fd0:	f06f 0002 	mvn.w	r0, #2	; 0x2
   17fd4:	bd10      	pop	{r4, pc}
   17fd6:	2111      	movs	r1, #17
   17fd8:	4662      	mov	r2, ip
   17fda:	4623      	mov	r3, r4
   17fdc:	f7ff ff10 	bl	17e00 <d_demangle_callback>
   17fe0:	2800      	cmp	r0, #0
   17fe2:	bf0c      	ite	eq
   17fe4:	f06f 0001 	mvneq.w	r0, #1	; 0x1
   17fe8:	2000      	movne	r0, #0
   17fea:	e7f3      	b.n	17fd4 <__gcclibcxx_demangle_callback+0x1c>

00017fec <__cxa_demangle>:
   17fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ff0:	460e      	mov	r6, r1
   17ff2:	b084      	sub	sp, #16
   17ff4:	4617      	mov	r7, r2
   17ff6:	4698      	mov	r8, r3
   17ff8:	2800      	cmp	r0, #0
   17ffa:	d05b      	beq.n	180b4 <__cxa_demangle+0xc8>
   17ffc:	f1d2 0301 	rsbs	r3, r2, #1	; 0x1
   18000:	bf38      	it	cc
   18002:	2300      	movcc	r3, #0
   18004:	2900      	cmp	r1, #0
   18006:	bf0c      	ite	eq
   18008:	2300      	moveq	r3, #0
   1800a:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1800e:	2b00      	cmp	r3, #0
   18010:	d145      	bne.n	1809e <__cxa_demangle+0xb2>
   18012:	9300      	str	r3, [sp, #0]
   18014:	9301      	str	r3, [sp, #4]
   18016:	9302      	str	r3, [sp, #8]
   18018:	9303      	str	r3, [sp, #12]
   1801a:	2111      	movs	r1, #17
   1801c:	4a2c      	ldr	r2, [pc, #176]	(180d0 <__cxa_demangle+0xe4>)
   1801e:	466b      	mov	r3, sp
   18020:	f7ff feee 	bl	17e00 <d_demangle_callback>
   18024:	4604      	mov	r4, r0
   18026:	2800      	cmp	r0, #0
   18028:	d026      	beq.n	18078 <__cxa_demangle+0x8c>
   1802a:	9b03      	ldr	r3, [sp, #12]
   1802c:	9c00      	ldr	r4, [sp, #0]
   1802e:	1e1d      	subs	r5, r3, #0
   18030:	bf18      	it	ne
   18032:	2501      	movne	r5, #1
   18034:	4628      	mov	r0, r5
   18036:	2c00      	cmp	r4, #0
   18038:	d022      	beq.n	18080 <__cxa_demangle+0x94>
   1803a:	2e00      	cmp	r6, #0
   1803c:	d02b      	beq.n	18096 <__cxa_demangle+0xaa>
   1803e:	4620      	mov	r0, r4
   18040:	f006 fea6 	bl	1ed90 <strlen>
   18044:	683b      	ldr	r3, [r7, #0]
   18046:	4298      	cmp	r0, r3
   18048:	d211      	bcs.n	1806e <__cxa_demangle+0x82>
   1804a:	4621      	mov	r1, r4
   1804c:	4630      	mov	r0, r6
   1804e:	f006 fe97 	bl	1ed80 <strcpy>
   18052:	4620      	mov	r0, r4
   18054:	f006 f878 	bl	1e148 <free>
   18058:	4634      	mov	r4, r6
   1805a:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1805e:	d002      	beq.n	18066 <__cxa_demangle+0x7a>
   18060:	2300      	movs	r3, #0
   18062:	f8c8 3000 	str.w	r3, [r8]
   18066:	4620      	mov	r0, r4
   18068:	b004      	add	sp, #16
   1806a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1806e:	4630      	mov	r0, r6
   18070:	f006 f86a 	bl	1e148 <free>
   18074:	603d      	str	r5, [r7, #0]
   18076:	e7f0      	b.n	1805a <__cxa_demangle+0x6e>
   18078:	9800      	ldr	r0, [sp, #0]
   1807a:	f006 f865 	bl	1e148 <free>
   1807e:	4620      	mov	r0, r4
   18080:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   18084:	d00e      	beq.n	180a4 <__cxa_demangle+0xb8>
   18086:	2801      	cmp	r0, #1
   18088:	d01c      	beq.n	180c4 <__cxa_demangle+0xd8>
   1808a:	f06f 0301 	mvn.w	r3, #1	; 0x1
   1808e:	f8c8 3000 	str.w	r3, [r8]
   18092:	2400      	movs	r4, #0
   18094:	e7e7      	b.n	18066 <__cxa_demangle+0x7a>
   18096:	2f00      	cmp	r7, #0
   18098:	d0df      	beq.n	1805a <__cxa_demangle+0x6e>
   1809a:	603d      	str	r5, [r7, #0]
   1809c:	e7dd      	b.n	1805a <__cxa_demangle+0x6e>
   1809e:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   180a2:	d101      	bne.n	180a8 <__cxa_demangle+0xbc>
   180a4:	2400      	movs	r4, #0
   180a6:	e7de      	b.n	18066 <__cxa_demangle+0x7a>
   180a8:	f06f 0302 	mvn.w	r3, #2	; 0x2
   180ac:	f8c8 3000 	str.w	r3, [r8]
   180b0:	2400      	movs	r4, #0
   180b2:	e7d8      	b.n	18066 <__cxa_demangle+0x7a>
   180b4:	2b00      	cmp	r3, #0
   180b6:	d0f5      	beq.n	180a4 <__cxa_demangle+0xb8>
   180b8:	f06f 0302 	mvn.w	r3, #2	; 0x2
   180bc:	f8c8 3000 	str.w	r3, [r8]
   180c0:	4604      	mov	r4, r0
   180c2:	e7d0      	b.n	18066 <__cxa_demangle+0x7a>
   180c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180c8:	f8c8 3000 	str.w	r3, [r8]
   180cc:	2400      	movs	r4, #0
   180ce:	e7ca      	b.n	18066 <__cxa_demangle+0x7a>
   180d0:	00016b9d 	.word	0x00016b9d

000180d4 <__aeabi_drsub>:
   180d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   180d8:	e002      	b.n	180e0 <__adddf3>
   180da:	46c0      	nop			(mov r8, r8)

000180dc <__aeabi_dsub>:
   180dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000180e0 <__adddf3>:
   180e0:	b530      	push	{r4, r5, lr}
   180e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   180e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   180ea:	ea94 0f05 	teq	r4, r5
   180ee:	bf08      	it	eq
   180f0:	ea90 0f02 	teqeq	r0, r2
   180f4:	bf1f      	itttt	ne
   180f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   180fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   180fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   18102:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   18106:	f000 80e2 	beq.w	182ce <__adddf3+0x1ee>
   1810a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1810e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   18112:	bfb8      	it	lt
   18114:	426d      	neglt	r5, r5
   18116:	dd0c      	ble.n	18132 <__adddf3+0x52>
   18118:	442c      	add	r4, r5
   1811a:	ea80 0202 	eor.w	r2, r0, r2
   1811e:	ea81 0303 	eor.w	r3, r1, r3
   18122:	ea82 0000 	eor.w	r0, r2, r0
   18126:	ea83 0101 	eor.w	r1, r3, r1
   1812a:	ea80 0202 	eor.w	r2, r0, r2
   1812e:	ea81 0303 	eor.w	r3, r1, r3
   18132:	2d36      	cmp	r5, #54
   18134:	bf88      	it	hi
   18136:	bd30      	pophi	{r4, r5, pc}
   18138:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1813c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   18140:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   18144:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   18148:	d002      	beq.n	18150 <__adddf3+0x70>
   1814a:	4240      	negs	r0, r0
   1814c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18150:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   18154:	ea4f 3303 	mov.w	r3, r3, lsl #12
   18158:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1815c:	d002      	beq.n	18164 <__adddf3+0x84>
   1815e:	4252      	negs	r2, r2
   18160:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   18164:	ea94 0f05 	teq	r4, r5
   18168:	f000 80a7 	beq.w	182ba <__adddf3+0x1da>
   1816c:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   18170:	f1d5 0e20 	rsbs	lr, r5, #32	; 0x20
   18174:	db0d      	blt.n	18192 <__adddf3+0xb2>
   18176:	fa02 fc0e 	lsl.w	ip, r2, lr
   1817a:	fa22 f205 	lsr.w	r2, r2, r5
   1817e:	1880      	adds	r0, r0, r2
   18180:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   18184:	fa03 f20e 	lsl.w	r2, r3, lr
   18188:	1880      	adds	r0, r0, r2
   1818a:	fa43 f305 	asr.w	r3, r3, r5
   1818e:	4159      	adcs	r1, r3
   18190:	e00e      	b.n	181b0 <__adddf3+0xd0>
   18192:	f1a5 0520 	sub.w	r5, r5, #32	; 0x20
   18196:	f10e 0e20 	add.w	lr, lr, #32	; 0x20
   1819a:	2a01      	cmp	r2, #1
   1819c:	fa03 fc0e 	lsl.w	ip, r3, lr
   181a0:	bf28      	it	cs
   181a2:	f04c 0c02 	orrcs.w	ip, ip, #2	; 0x2
   181a6:	fa43 f305 	asr.w	r3, r3, r5
   181aa:	18c0      	adds	r0, r0, r3
   181ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   181b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   181b4:	d507      	bpl.n	181c6 <__adddf3+0xe6>
   181b6:	f04f 0e00 	mov.w	lr, #0	; 0x0
   181ba:	f1dc 0c00 	rsbs	ip, ip, #0	; 0x0
   181be:	eb7e 0000 	sbcs.w	r0, lr, r0
   181c2:	eb6e 0101 	sbc.w	r1, lr, r1
   181c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   181ca:	d31b      	bcc.n	18204 <__adddf3+0x124>
   181cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   181d0:	d30c      	bcc.n	181ec <__adddf3+0x10c>
   181d2:	0849      	lsrs	r1, r1, #1
   181d4:	ea5f 0030 	movs.w	r0, r0, rrx
   181d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   181dc:	f104 0401 	add.w	r4, r4, #1	; 0x1
   181e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   181e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   181e8:	f080 809a 	bcs.w	18320 <__adddf3+0x240>
   181ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   181f0:	bf08      	it	eq
   181f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   181f6:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   181fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   181fe:	ea41 0105 	orr.w	r1, r1, r5
   18202:	bd30      	pop	{r4, r5, pc}
   18204:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   18208:	4140      	adcs	r0, r0
   1820a:	eb41 0101 	adc.w	r1, r1, r1
   1820e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   18212:	f1a4 0401 	sub.w	r4, r4, #1	; 0x1
   18216:	d1e9      	bne.n	181ec <__adddf3+0x10c>
   18218:	f091 0f00 	teq	r1, #0	; 0x0
   1821c:	bf04      	itt	eq
   1821e:	4601      	moveq	r1, r0
   18220:	2000      	moveq	r0, #0
   18222:	fab1 f381 	clz	r3, r1
   18226:	bf08      	it	eq
   18228:	3320      	addeq	r3, #32
   1822a:	f1a3 030b 	sub.w	r3, r3, #11	; 0xb
   1822e:	f1b3 0220 	subs.w	r2, r3, #32	; 0x20
   18232:	da0c      	bge.n	1824e <__adddf3+0x16e>
   18234:	320c      	adds	r2, #12
   18236:	dd08      	ble.n	1824a <__adddf3+0x16a>
   18238:	f102 0c14 	add.w	ip, r2, #20	; 0x14
   1823c:	f1c2 020c 	rsb	r2, r2, #12	; 0xc
   18240:	fa01 f00c 	lsl.w	r0, r1, ip
   18244:	fa21 f102 	lsr.w	r1, r1, r2
   18248:	e00c      	b.n	18264 <__adddf3+0x184>
   1824a:	f102 0214 	add.w	r2, r2, #20	; 0x14
   1824e:	bfd8      	it	le
   18250:	f1c2 0c20 	rsble	ip, r2, #32	; 0x20
   18254:	fa01 f102 	lsl.w	r1, r1, r2
   18258:	fa20 fc0c 	lsr.w	ip, r0, ip
   1825c:	bfdc      	itt	le
   1825e:	ea41 010c 	orrle.w	r1, r1, ip
   18262:	4090      	lslle	r0, r2
   18264:	1ae4      	subs	r4, r4, r3
   18266:	bfa2      	ittt	ge
   18268:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1826c:	4329      	orrge	r1, r5
   1826e:	bd30      	popge	{r4, r5, pc}
   18270:	ea6f 0404 	mvn.w	r4, r4
   18274:	3c1f      	subs	r4, #31
   18276:	da1c      	bge.n	182b2 <__adddf3+0x1d2>
   18278:	340c      	adds	r4, #12
   1827a:	dc0e      	bgt.n	1829a <__adddf3+0x1ba>
   1827c:	f104 0414 	add.w	r4, r4, #20	; 0x14
   18280:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   18284:	fa20 f004 	lsr.w	r0, r0, r4
   18288:	fa01 f302 	lsl.w	r3, r1, r2
   1828c:	ea40 0003 	orr.w	r0, r0, r3
   18290:	fa21 f304 	lsr.w	r3, r1, r4
   18294:	ea45 0103 	orr.w	r1, r5, r3
   18298:	bd30      	pop	{r4, r5, pc}
   1829a:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1829e:	f1c4 0220 	rsb	r2, r4, #32	; 0x20
   182a2:	fa20 f002 	lsr.w	r0, r0, r2
   182a6:	fa01 f304 	lsl.w	r3, r1, r4
   182aa:	ea40 0003 	orr.w	r0, r0, r3
   182ae:	4629      	mov	r1, r5
   182b0:	bd30      	pop	{r4, r5, pc}
   182b2:	fa21 f004 	lsr.w	r0, r1, r4
   182b6:	4629      	mov	r1, r5
   182b8:	bd30      	pop	{r4, r5, pc}
   182ba:	f094 0f00 	teq	r4, #0	; 0x0
   182be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   182c2:	bf06      	itte	eq
   182c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   182c8:	3401      	addeq	r4, #1
   182ca:	3d01      	subne	r5, #1
   182cc:	e74e      	b.n	1816c <__adddf3+0x8c>
   182ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   182d2:	bf18      	it	ne
   182d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   182d8:	d029      	beq.n	1832e <__adddf3+0x24e>
   182da:	ea94 0f05 	teq	r4, r5
   182de:	bf08      	it	eq
   182e0:	ea90 0f02 	teqeq	r0, r2
   182e4:	d005      	beq.n	182f2 <__adddf3+0x212>
   182e6:	ea54 0c00 	orrs.w	ip, r4, r0
   182ea:	bf04      	itt	eq
   182ec:	4619      	moveq	r1, r3
   182ee:	4610      	moveq	r0, r2
   182f0:	bd30      	pop	{r4, r5, pc}
   182f2:	ea91 0f03 	teq	r1, r3
   182f6:	bf1e      	ittt	ne
   182f8:	2100      	movne	r1, #0
   182fa:	2000      	movne	r0, #0
   182fc:	bd30      	popne	{r4, r5, pc}
   182fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   18302:	d105      	bne.n	18310 <__adddf3+0x230>
   18304:	0040      	lsls	r0, r0, #1
   18306:	4149      	adcs	r1, r1
   18308:	bf28      	it	cs
   1830a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1830e:	bd30      	pop	{r4, r5, pc}
   18310:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   18314:	bf3c      	itt	cc
   18316:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1831a:	bd30      	popcc	{r4, r5, pc}
   1831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   18320:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   18324:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18328:	f04f 0000 	mov.w	r0, #0	; 0x0
   1832c:	bd30      	pop	{r4, r5, pc}
   1832e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   18332:	bf1a      	itte	ne
   18334:	4619      	movne	r1, r3
   18336:	4610      	movne	r0, r2
   18338:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1833c:	bf1c      	itt	ne
   1833e:	460b      	movne	r3, r1
   18340:	4602      	movne	r2, r0
   18342:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18346:	bf06      	itte	eq
   18348:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1834c:	ea91 0f03 	teqeq	r1, r3
   18350:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   18354:	bd30      	pop	{r4, r5, pc}
   18356:	46c0      	nop			(mov r8, r8)

00018358 <__aeabi_ui2d>:
   18358:	f090 0f00 	teq	r0, #0	; 0x0
   1835c:	bf04      	itt	eq
   1835e:	2100      	moveq	r1, #0
   18360:	4770      	bxeq	lr
   18362:	b530      	push	{r4, r5, lr}
   18364:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18368:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1836c:	f04f 0500 	mov.w	r5, #0	; 0x0
   18370:	f04f 0100 	mov.w	r1, #0	; 0x0
   18374:	e750      	b.n	18218 <__adddf3+0x138>
   18376:	46c0      	nop			(mov r8, r8)

00018378 <__aeabi_i2d>:
   18378:	f090 0f00 	teq	r0, #0	; 0x0
   1837c:	bf04      	itt	eq
   1837e:	2100      	moveq	r1, #0
   18380:	4770      	bxeq	lr
   18382:	b530      	push	{r4, r5, lr}
   18384:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18388:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1838c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   18390:	bf48      	it	mi
   18392:	4240      	negmi	r0, r0
   18394:	f04f 0100 	mov.w	r1, #0	; 0x0
   18398:	e73e      	b.n	18218 <__adddf3+0x138>
   1839a:	46c0      	nop			(mov r8, r8)

0001839c <__aeabi_f2d>:
   1839c:	0042      	lsls	r2, r0, #1
   1839e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   183a2:	ea4f 0131 	mov.w	r1, r1, rrx
   183a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   183aa:	bf1f      	itttt	ne
   183ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   183b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   183b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   183b8:	4770      	bxne	lr
   183ba:	f092 0f00 	teq	r2, #0	; 0x0
   183be:	bf14      	ite	ne
   183c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   183c4:	4770      	bxeq	lr
   183c6:	b530      	push	{r4, r5, lr}
   183c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   183cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   183d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   183d4:	e720      	b.n	18218 <__adddf3+0x138>
   183d6:	46c0      	nop			(mov r8, r8)

000183d8 <__aeabi_ul2d>:
   183d8:	ea50 0201 	orrs.w	r2, r0, r1
   183dc:	bf08      	it	eq
   183de:	4770      	bxeq	lr
   183e0:	b530      	push	{r4, r5, lr}
   183e2:	f04f 0500 	mov.w	r5, #0	; 0x0
   183e6:	e00a      	b.n	183fe <__aeabi_l2d+0x16>

000183e8 <__aeabi_l2d>:
   183e8:	ea50 0201 	orrs.w	r2, r0, r1
   183ec:	bf08      	it	eq
   183ee:	4770      	bxeq	lr
   183f0:	b530      	push	{r4, r5, lr}
   183f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   183f6:	d502      	bpl.n	183fe <__aeabi_l2d+0x16>
   183f8:	4240      	negs	r0, r0
   183fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   183fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   18402:	f104 0432 	add.w	r4, r4, #50	; 0x32
   18406:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1840a:	f43f aedc 	beq.w	181c6 <__adddf3+0xe6>
   1840e:	f04f 0203 	mov.w	r2, #3	; 0x3
   18412:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   18416:	bf18      	it	ne
   18418:	3203      	addne	r2, #3
   1841a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1841e:	bf18      	it	ne
   18420:	3203      	addne	r2, #3
   18422:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   18426:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1842a:	fa00 fc03 	lsl.w	ip, r0, r3
   1842e:	fa20 f002 	lsr.w	r0, r0, r2
   18432:	fa01 fe03 	lsl.w	lr, r1, r3
   18436:	ea40 000e 	orr.w	r0, r0, lr
   1843a:	fa21 f102 	lsr.w	r1, r1, r2
   1843e:	4414      	add	r4, r2
   18440:	e6c1      	b.n	181c6 <__adddf3+0xe6>
   18442:	46c0      	nop			(mov r8, r8)

00018444 <__aeabi_dmul>:
   18444:	b570      	push	{r4, r5, r6, lr}
   18446:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1844a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1844e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   18452:	bf1d      	ittte	ne
   18454:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   18458:	ea94 0f0c 	teqne	r4, ip
   1845c:	ea95 0f0c 	teqne	r5, ip
   18460:	f000 f8de 	bleq	18620 <__aeabi_dmul+0x1dc>
   18464:	442c      	add	r4, r5
   18466:	ea81 0603 	eor.w	r6, r1, r3
   1846a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1846e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   18472:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   18476:	bf18      	it	ne
   18478:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1847c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18484:	d038      	beq.n	184f8 <__aeabi_dmul+0xb4>
   18486:	fba0 ce02 	umull	ip, lr, r0, r2
   1848a:	f04f 0500 	mov.w	r5, #0	; 0x0
   1848e:	fbe1 e502 	umlal	lr, r5, r1, r2
   18492:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   18496:	fbe0 e503 	umlal	lr, r5, r0, r3
   1849a:	f04f 0600 	mov.w	r6, #0	; 0x0
   1849e:	fbe1 5603 	umlal	r5, r6, r1, r3
   184a2:	f09c 0f00 	teq	ip, #0	; 0x0
   184a6:	bf18      	it	ne
   184a8:	f04e 0e01 	orrne.w	lr, lr, #1	; 0x1
   184ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   184b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   184b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   184b8:	d204      	bcs.n	184c4 <__aeabi_dmul+0x80>
   184ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   184be:	416d      	adcs	r5, r5
   184c0:	eb46 0606 	adc.w	r6, r6, r6
   184c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   184c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   184cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   184d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   184d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   184d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   184dc:	bf88      	it	hi
   184de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   184e2:	d81e      	bhi.n	18522 <__aeabi_dmul+0xde>
   184e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   184e8:	bf08      	it	eq
   184ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   184ee:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   184f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   184f6:	bd70      	pop	{r4, r5, r6, pc}
   184f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   184fc:	ea46 0101 	orr.w	r1, r6, r1
   18500:	ea40 0002 	orr.w	r0, r0, r2
   18504:	ea81 0103 	eor.w	r1, r1, r3
   18508:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1850c:	bfc2      	ittt	gt
   1850e:	ebd4 050c 	rsbsgt	r5, r4, ip
   18512:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   18516:	bd70      	popgt	{r4, r5, r6, pc}
   18518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1851c:	f04f 0e00 	mov.w	lr, #0	; 0x0
   18520:	3c01      	subs	r4, #1
   18522:	f300 80ab 	bgt.w	1867c <__aeabi_dmul+0x238>
   18526:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1852a:	bfde      	ittt	le
   1852c:	2000      	movle	r0, #0
   1852e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   18532:	bd70      	pople	{r4, r5, r6, pc}
   18534:	f1c4 0400 	rsb	r4, r4, #0	; 0x0
   18538:	3c20      	subs	r4, #32
   1853a:	da35      	bge.n	185a8 <__aeabi_dmul+0x164>
   1853c:	340c      	adds	r4, #12
   1853e:	dc1b      	bgt.n	18578 <__aeabi_dmul+0x134>
   18540:	f104 0414 	add.w	r4, r4, #20	; 0x14
   18544:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   18548:	fa00 f305 	lsl.w	r3, r0, r5
   1854c:	fa20 f004 	lsr.w	r0, r0, r4
   18550:	fa01 f205 	lsl.w	r2, r1, r5
   18554:	ea40 0002 	orr.w	r0, r0, r2
   18558:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1855c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   18560:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18564:	fa21 f604 	lsr.w	r6, r1, r4
   18568:	eb42 0106 	adc.w	r1, r2, r6
   1856c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   18570:	bf08      	it	eq
   18572:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   18576:	bd70      	pop	{r4, r5, r6, pc}
   18578:	f1c4 040c 	rsb	r4, r4, #12	; 0xc
   1857c:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   18580:	fa00 f304 	lsl.w	r3, r0, r4
   18584:	fa20 f005 	lsr.w	r0, r0, r5
   18588:	fa01 f204 	lsl.w	r2, r1, r4
   1858c:	ea40 0002 	orr.w	r0, r0, r2
   18590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   18598:	f141 0100 	adc.w	r1, r1, #0	; 0x0
   1859c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   185a0:	bf08      	it	eq
   185a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   185a6:	bd70      	pop	{r4, r5, r6, pc}
   185a8:	f1c4 0520 	rsb	r5, r4, #32	; 0x20
   185ac:	fa00 f205 	lsl.w	r2, r0, r5
   185b0:	ea4e 0e02 	orr.w	lr, lr, r2
   185b4:	fa20 f304 	lsr.w	r3, r0, r4
   185b8:	fa01 f205 	lsl.w	r2, r1, r5
   185bc:	ea43 0302 	orr.w	r3, r3, r2
   185c0:	fa21 f004 	lsr.w	r0, r1, r4
   185c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   185c8:	fa21 f204 	lsr.w	r2, r1, r4
   185cc:	ea20 0002 	bic.w	r0, r0, r2
   185d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   185d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   185d8:	bf08      	it	eq
   185da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   185de:	bd70      	pop	{r4, r5, r6, pc}
   185e0:	f094 0f00 	teq	r4, #0	; 0x0
   185e4:	d10f      	bne.n	18606 <__aeabi_dmul+0x1c2>
   185e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   185ea:	0040      	lsls	r0, r0, #1
   185ec:	eb41 0101 	adc.w	r1, r1, r1
   185f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   185f4:	bf08      	it	eq
   185f6:	3c01      	subeq	r4, #1
   185f8:	d0f7      	beq.n	185ea <__aeabi_dmul+0x1a6>
   185fa:	ea41 0106 	orr.w	r1, r1, r6
   185fe:	f095 0f00 	teq	r5, #0	; 0x0
   18602:	bf18      	it	ne
   18604:	46f7      	movne	pc, lr
   18606:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1860a:	0052      	lsls	r2, r2, #1
   1860c:	eb43 0303 	adc.w	r3, r3, r3
   18610:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   18614:	bf08      	it	eq
   18616:	3d01      	subeq	r5, #1
   18618:	d0f7      	beq.n	1860a <__aeabi_dmul+0x1c6>
   1861a:	ea43 0306 	orr.w	r3, r3, r6
   1861e:	46f7      	mov	pc, lr
   18620:	ea94 0f0c 	teq	r4, ip
   18624:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   18628:	bf18      	it	ne
   1862a:	ea95 0f0c 	teqne	r5, ip
   1862e:	d00c      	beq.n	1864a <__aeabi_dmul+0x206>
   18630:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   18634:	bf18      	it	ne
   18636:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1863a:	d1d1      	bne.n	185e0 <__aeabi_dmul+0x19c>
   1863c:	ea81 0103 	eor.w	r1, r1, r3
   18640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18644:	f04f 0000 	mov.w	r0, #0	; 0x0
   18648:	bd70      	pop	{r4, r5, r6, pc}
   1864a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1864e:	bf06      	itte	eq
   18650:	4610      	moveq	r0, r2
   18652:	4619      	moveq	r1, r3
   18654:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18658:	d019      	beq.n	1868e <__aeabi_dmul+0x24a>
   1865a:	ea94 0f0c 	teq	r4, ip
   1865e:	d102      	bne.n	18666 <__aeabi_dmul+0x222>
   18660:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   18664:	d113      	bne.n	1868e <__aeabi_dmul+0x24a>
   18666:	ea95 0f0c 	teq	r5, ip
   1866a:	d105      	bne.n	18678 <__aeabi_dmul+0x234>
   1866c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   18670:	bf1c      	itt	ne
   18672:	4610      	movne	r0, r2
   18674:	4619      	movne	r1, r3
   18676:	d10a      	bne.n	1868e <__aeabi_dmul+0x24a>
   18678:	ea81 0103 	eor.w	r1, r1, r3
   1867c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   18680:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   18688:	f04f 0000 	mov.w	r0, #0	; 0x0
   1868c:	bd70      	pop	{r4, r5, r6, pc}
   1868e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   18692:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   18696:	bd70      	pop	{r4, r5, r6, pc}

00018698 <__aeabi_ddiv>:
   18698:	b570      	push	{r4, r5, r6, lr}
   1869a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1869e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   186a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   186a6:	bf1d      	ittte	ne
   186a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   186ac:	ea94 0f0c 	teqne	r4, ip
   186b0:	ea95 0f0c 	teqne	r5, ip
   186b4:	f000 f8a7 	bleq	18806 <__aeabi_ddiv+0x16e>
   186b8:	eba4 0405 	sub.w	r4, r4, r5
   186bc:	ea81 0e03 	eor.w	lr, r1, r3
   186c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   186c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   186c8:	f000 8088 	beq.w	187dc <__aeabi_ddiv+0x144>
   186cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   186d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   186d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   186d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   186dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   186e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   186e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   186e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   186ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   186f0:	429d      	cmp	r5, r3
   186f2:	bf08      	it	eq
   186f4:	4296      	cmpeq	r6, r2
   186f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   186fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   186fe:	d202      	bcs.n	18706 <__aeabi_ddiv+0x6e>
   18700:	085b      	lsrs	r3, r3, #1
   18702:	ea4f 0232 	mov.w	r2, r2, rrx
   18706:	1ab6      	subs	r6, r6, r2
   18708:	eb65 0503 	sbc.w	r5, r5, r3
   1870c:	085b      	lsrs	r3, r3, #1
   1870e:	ea4f 0232 	mov.w	r2, r2, rrx
   18712:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   18716:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1871a:	ebb6 0e02 	subs.w	lr, r6, r2
   1871e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18722:	bf22      	ittt	cs
   18724:	1ab6      	subcs	r6, r6, r2
   18726:	4675      	movcs	r5, lr
   18728:	ea40 000c 	orrcs.w	r0, r0, ip
   1872c:	085b      	lsrs	r3, r3, #1
   1872e:	ea4f 0232 	mov.w	r2, r2, rrx
   18732:	ebb6 0e02 	subs.w	lr, r6, r2
   18736:	eb75 0e03 	sbcs.w	lr, r5, r3
   1873a:	bf22      	ittt	cs
   1873c:	1ab6      	subcs	r6, r6, r2
   1873e:	4675      	movcs	r5, lr
   18740:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18744:	085b      	lsrs	r3, r3, #1
   18746:	ea4f 0232 	mov.w	r2, r2, rrx
   1874a:	ebb6 0e02 	subs.w	lr, r6, r2
   1874e:	eb75 0e03 	sbcs.w	lr, r5, r3
   18752:	bf22      	ittt	cs
   18754:	1ab6      	subcs	r6, r6, r2
   18756:	4675      	movcs	r5, lr
   18758:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1875c:	085b      	lsrs	r3, r3, #1
   1875e:	ea4f 0232 	mov.w	r2, r2, rrx
   18762:	ebb6 0e02 	subs.w	lr, r6, r2
   18766:	eb75 0e03 	sbcs.w	lr, r5, r3
   1876a:	bf22      	ittt	cs
   1876c:	1ab6      	subcs	r6, r6, r2
   1876e:	4675      	movcs	r5, lr
   18770:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18774:	ea55 0e06 	orrs.w	lr, r5, r6
   18778:	d018      	beq.n	187ac <__aeabi_ddiv+0x114>
   1877a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1877e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   18782:	ea4f 1606 	mov.w	r6, r6, lsl #4
   18786:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1878a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1878e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   18792:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   18796:	d1c0      	bne.n	1871a <__aeabi_ddiv+0x82>
   18798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1879c:	d10b      	bne.n	187b6 <__aeabi_ddiv+0x11e>
   1879e:	ea41 0100 	orr.w	r1, r1, r0
   187a2:	f04f 0000 	mov.w	r0, #0	; 0x0
   187a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   187aa:	e7b6      	b.n	1871a <__aeabi_ddiv+0x82>
   187ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   187b0:	bf04      	itt	eq
   187b2:	4301      	orreq	r1, r0
   187b4:	2000      	moveq	r0, #0
   187b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   187ba:	bf88      	it	hi
   187bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   187c0:	f63f aeaf 	bhi.w	18522 <__aeabi_dmul+0xde>
   187c4:	ebb5 0c03 	subs.w	ip, r5, r3
   187c8:	bf04      	itt	eq
   187ca:	ebb6 0c02 	subseq.w	ip, r6, r2
   187ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   187d2:	f150 0000 	adcs.w	r0, r0, #0	; 0x0
   187d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   187da:	bd70      	pop	{r4, r5, r6, pc}
   187dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   187e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   187e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   187e8:	bfc2      	ittt	gt
   187ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   187ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   187f2:	bd70      	popgt	{r4, r5, r6, pc}
   187f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   187f8:	f04f 0e00 	mov.w	lr, #0	; 0x0
   187fc:	3c01      	subs	r4, #1
   187fe:	e690      	b.n	18522 <__aeabi_dmul+0xde>
   18800:	ea45 0e06 	orr.w	lr, r5, r6
   18804:	e68d      	b.n	18522 <__aeabi_dmul+0xde>
   18806:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1880a:	ea94 0f0c 	teq	r4, ip
   1880e:	bf08      	it	eq
   18810:	ea95 0f0c 	teqeq	r5, ip
   18814:	f43f af3b 	beq.w	1868e <__aeabi_dmul+0x24a>
   18818:	ea94 0f0c 	teq	r4, ip
   1881c:	d10a      	bne.n	18834 <__aeabi_ddiv+0x19c>
   1881e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   18822:	f47f af34 	bne.w	1868e <__aeabi_dmul+0x24a>
   18826:	ea95 0f0c 	teq	r5, ip
   1882a:	f47f af25 	bne.w	18678 <__aeabi_dmul+0x234>
   1882e:	4610      	mov	r0, r2
   18830:	4619      	mov	r1, r3
   18832:	e72c      	b.n	1868e <__aeabi_dmul+0x24a>
   18834:	ea95 0f0c 	teq	r5, ip
   18838:	d106      	bne.n	18848 <__aeabi_ddiv+0x1b0>
   1883a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1883e:	f43f aefd 	beq.w	1863c <__aeabi_dmul+0x1f8>
   18842:	4610      	mov	r0, r2
   18844:	4619      	mov	r1, r3
   18846:	e722      	b.n	1868e <__aeabi_dmul+0x24a>
   18848:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1884c:	bf18      	it	ne
   1884e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   18852:	f47f aec5 	bne.w	185e0 <__aeabi_dmul+0x19c>
   18856:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1885a:	f47f af0d 	bne.w	18678 <__aeabi_dmul+0x234>
   1885e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   18862:	f47f aeeb 	bne.w	1863c <__aeabi_dmul+0x1f8>
   18866:	e712      	b.n	1868e <__aeabi_dmul+0x24a>

00018868 <__gedf2>:
   18868:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1886c:	e006      	b.n	1887c <__cmpdf2+0x4>
   1886e:	46c0      	nop			(mov r8, r8)

00018870 <__ledf2>:
   18870:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18874:	e002      	b.n	1887c <__cmpdf2+0x4>
   18876:	46c0      	nop			(mov r8, r8)

00018878 <__cmpdf2>:
   18878:	f04f 0c01 	mov.w	ip, #1	; 0x1
   1887c:	f84d cc04 	str.w	ip, [sp, #-4]
   18880:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   18884:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   18888:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1888c:	bf18      	it	ne
   1888e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   18892:	d01a      	beq.n	188ca <__cmpdf2+0x52>
   18894:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   18898:	bf0c      	ite	eq
   1889a:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1889e:	ea91 0f03 	teqne	r1, r3
   188a2:	bf02      	ittt	eq
   188a4:	ea90 0f02 	teqeq	r0, r2
   188a8:	2000      	moveq	r0, #0
   188aa:	4770      	bxeq	lr
   188ac:	f110 0f00 	cmn.w	r0, #0	; 0x0
   188b0:	ea91 0f03 	teq	r1, r3
   188b4:	bf58      	it	pl
   188b6:	4299      	cmppl	r1, r3
   188b8:	bf08      	it	eq
   188ba:	4290      	cmpeq	r0, r2
   188bc:	bf2c      	ite	cs
   188be:	17d8      	asrcs	r0, r3, #31
   188c0:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   188c4:	f040 0001 	orr.w	r0, r0, #1	; 0x1
   188c8:	4770      	bx	lr
   188ca:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   188ce:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   188d2:	d102      	bne.n	188da <__cmpdf2+0x62>
   188d4:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   188d8:	d107      	bne.n	188ea <__cmpdf2+0x72>
   188da:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   188de:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   188e2:	d1d7      	bne.n	18894 <__cmpdf2+0x1c>
   188e4:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   188e8:	d0d4      	beq.n	18894 <__cmpdf2+0x1c>
   188ea:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   188ee:	4770      	bx	lr

000188f0 <__aeabi_cdrcmple>:
   188f0:	4684      	mov	ip, r0
   188f2:	4610      	mov	r0, r2
   188f4:	4662      	mov	r2, ip
   188f6:	468c      	mov	ip, r1
   188f8:	4619      	mov	r1, r3
   188fa:	4663      	mov	r3, ip
   188fc:	e000      	b.n	18900 <__aeabi_cdcmpeq>
   188fe:	46c0      	nop			(mov r8, r8)

00018900 <__aeabi_cdcmpeq>:
   18900:	b501      	push	{r0, lr}
   18902:	f7ff ffb9 	bl	18878 <__cmpdf2>
   18906:	2800      	cmp	r0, #0
   18908:	bf48      	it	mi
   1890a:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   1890e:	bd01      	pop	{r0, pc}

00018910 <__aeabi_dcmpeq>:
   18910:	f84d ed08 	str.w	lr, [sp, #-8]!
   18914:	f7ff fff4 	bl	18900 <__aeabi_cdcmpeq>
   18918:	bf0c      	ite	eq
   1891a:	2001      	moveq	r0, #1
   1891c:	2000      	movne	r0, #0
   1891e:	f85d fb08 	ldr.w	pc, [sp], #8
   18922:	46c0      	nop			(mov r8, r8)

00018924 <__aeabi_dcmplt>:
   18924:	f84d ed08 	str.w	lr, [sp, #-8]!
   18928:	f7ff ffea 	bl	18900 <__aeabi_cdcmpeq>
   1892c:	bf34      	ite	cc
   1892e:	2001      	movcc	r0, #1
   18930:	2000      	movcs	r0, #0
   18932:	f85d fb08 	ldr.w	pc, [sp], #8
   18936:	46c0      	nop			(mov r8, r8)

00018938 <__aeabi_dcmple>:
   18938:	f84d ed08 	str.w	lr, [sp, #-8]!
   1893c:	f7ff ffe0 	bl	18900 <__aeabi_cdcmpeq>
   18940:	bf94      	ite	ls
   18942:	2001      	movls	r0, #1
   18944:	2000      	movhi	r0, #0
   18946:	f85d fb08 	ldr.w	pc, [sp], #8
   1894a:	46c0      	nop			(mov r8, r8)

0001894c <__aeabi_dcmpge>:
   1894c:	f84d ed08 	str.w	lr, [sp, #-8]!
   18950:	f7ff ffce 	bl	188f0 <__aeabi_cdrcmple>
   18954:	bf94      	ite	ls
   18956:	2001      	movls	r0, #1
   18958:	2000      	movhi	r0, #0
   1895a:	f85d fb08 	ldr.w	pc, [sp], #8
   1895e:	46c0      	nop			(mov r8, r8)

00018960 <__aeabi_dcmpgt>:
   18960:	f84d ed08 	str.w	lr, [sp, #-8]!
   18964:	f7ff ffc4 	bl	188f0 <__aeabi_cdrcmple>
   18968:	bf34      	ite	cc
   1896a:	2001      	movcc	r0, #1
   1896c:	2000      	movcs	r0, #0
   1896e:	f85d fb08 	ldr.w	pc, [sp], #8
   18972:	46c0      	nop			(mov r8, r8)

00018974 <__aeabi_d2iz>:
   18974:	ea4f 0241 	mov.w	r2, r1, lsl #1
   18978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1897c:	d215      	bcs.n	189aa <__aeabi_d2iz+0x36>
   1897e:	d511      	bpl.n	189a4 <__aeabi_d2iz+0x30>
   18980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   18984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   18988:	d912      	bls.n	189b0 <__aeabi_d2iz+0x3c>
   1898a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1898e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   18996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1899a:	fa23 f002 	lsr.w	r0, r3, r2
   1899e:	bf18      	it	ne
   189a0:	4240      	negne	r0, r0
   189a2:	4770      	bx	lr
   189a4:	f04f 0000 	mov.w	r0, #0	; 0x0
   189a8:	4770      	bx	lr
   189aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   189ae:	d105      	bne.n	189bc <__aeabi_d2iz+0x48>
   189b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   189b4:	bf08      	it	eq
   189b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   189ba:	4770      	bx	lr
   189bc:	f04f 0000 	mov.w	r0, #0	; 0x0
   189c0:	4770      	bx	lr
   189c2:	46c0      	nop			(mov r8, r8)

000189c4 <__aeabi_d2f>:
   189c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   189c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   189cc:	bf24      	itt	cs
   189ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   189d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   189d6:	d90d      	bls.n	189f4 <__aeabi_d2f+0x30>
   189d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   189dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   189e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   189e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   189e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   189ec:	bf08      	it	eq
   189ee:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   189f2:	4770      	bx	lr
   189f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   189f8:	d121      	bne.n	18a3e <__aeabi_d2f+0x7a>
   189fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   189fe:	bfbc      	itt	lt
   18a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   18a04:	4770      	bxlt	lr
   18a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   18a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   18a0e:	f1c2 0218 	rsb	r2, r2, #24	; 0x18
   18a12:	f1c2 0c20 	rsb	ip, r2, #32	; 0x20
   18a16:	fa10 f30c 	lsls.w	r3, r0, ip
   18a1a:	fa20 f002 	lsr.w	r0, r0, r2
   18a1e:	bf18      	it	ne
   18a20:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   18a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   18a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   18a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
   18a30:	ea40 000c 	orr.w	r0, r0, ip
   18a34:	fa23 f302 	lsr.w	r3, r3, r2
   18a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
   18a3c:	e7cc      	b.n	189d8 <__aeabi_d2f+0x14>
   18a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   18a42:	d107      	bne.n	18a54 <__aeabi_d2f+0x90>
   18a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   18a48:	bf1e      	ittt	ne
   18a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   18a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   18a52:	4770      	bxne	lr
   18a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   18a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18a60:	4770      	bx	lr
   18a62:	46c0      	nop			(mov r8, r8)

00018a64 <__aeabi_frsub>:
   18a64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   18a68:	e002      	b.n	18a70 <__addsf3>
   18a6a:	46c0      	nop			(mov r8, r8)

00018a6c <__aeabi_fsub>:
   18a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00018a70 <__addsf3>:
   18a70:	0042      	lsls	r2, r0, #1
   18a72:	bf1f      	itttt	ne
   18a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   18a78:	ea92 0f03 	teqne	r2, r3
   18a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   18a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18a84:	d06a      	beq.n	18b5c <__addsf3+0xec>
   18a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
   18a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   18a8e:	bfc1      	itttt	gt
   18a90:	18d2      	addgt	r2, r2, r3
   18a92:	4041      	eorgt	r1, r0
   18a94:	4048      	eorgt	r0, r1
   18a96:	4041      	eorgt	r1, r0
   18a98:	bfb8      	it	lt
   18a9a:	425b      	neglt	r3, r3
   18a9c:	2b19      	cmp	r3, #25
   18a9e:	bf88      	it	hi
   18aa0:	4770      	bxhi	lr
   18aa2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   18aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18aae:	bf18      	it	ne
   18ab0:	4240      	negne	r0, r0
   18ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   18ab6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   18aba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18abe:	bf18      	it	ne
   18ac0:	4249      	negne	r1, r1
   18ac2:	ea92 0f03 	teq	r2, r3
   18ac6:	d03f      	beq.n	18b48 <__addsf3+0xd8>
   18ac8:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   18acc:	fa41 fc03 	asr.w	ip, r1, r3
   18ad0:	eb10 000c 	adds.w	r0, r0, ip
   18ad4:	f1c3 0320 	rsb	r3, r3, #32	; 0x20
   18ad8:	fa01 f103 	lsl.w	r1, r1, r3
   18adc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18ae0:	d502      	bpl.n	18ae8 <__addsf3+0x78>
   18ae2:	4249      	negs	r1, r1
   18ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   18ae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   18aec:	d313      	bcc.n	18b16 <__addsf3+0xa6>
   18aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   18af2:	d306      	bcc.n	18b02 <__addsf3+0x92>
   18af4:	0840      	lsrs	r0, r0, #1
   18af6:	ea4f 0131 	mov.w	r1, r1, rrx
   18afa:	f102 0201 	add.w	r2, r2, #1	; 0x1
   18afe:	2afe      	cmp	r2, #254
   18b00:	d251      	bcs.n	18ba6 <__addsf3+0x136>
   18b02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   18b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18b0a:	bf08      	it	eq
   18b0c:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   18b10:	ea40 0003 	orr.w	r0, r0, r3
   18b14:	4770      	bx	lr
   18b16:	0049      	lsls	r1, r1, #1
   18b18:	eb40 0000 	adc.w	r0, r0, r0
   18b1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   18b20:	f1a2 0201 	sub.w	r2, r2, #1	; 0x1
   18b24:	d1ed      	bne.n	18b02 <__addsf3+0x92>
   18b26:	fab0 fc80 	clz	ip, r0
   18b2a:	f1ac 0c08 	sub.w	ip, ip, #8	; 0x8
   18b2e:	ebb2 020c 	subs.w	r2, r2, ip
   18b32:	fa00 f00c 	lsl.w	r0, r0, ip
   18b36:	bfaa      	itet	ge
   18b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   18b3c:	4252      	neglt	r2, r2
   18b3e:	4318      	orrge	r0, r3
   18b40:	bfbc      	itt	lt
   18b42:	40d0      	lsrlt	r0, r2
   18b44:	4318      	orrlt	r0, r3
   18b46:	4770      	bx	lr
   18b48:	f092 0f00 	teq	r2, #0	; 0x0
   18b4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   18b50:	bf06      	itte	eq
   18b52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   18b56:	3201      	addeq	r2, #1
   18b58:	3b01      	subne	r3, #1
   18b5a:	e7b5      	b.n	18ac8 <__addsf3+0x58>
   18b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18b64:	bf18      	it	ne
   18b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18b6a:	d021      	beq.n	18bb0 <__addsf3+0x140>
   18b6c:	ea92 0f03 	teq	r2, r3
   18b70:	d004      	beq.n	18b7c <__addsf3+0x10c>
   18b72:	f092 0f00 	teq	r2, #0	; 0x0
   18b76:	bf08      	it	eq
   18b78:	4608      	moveq	r0, r1
   18b7a:	4770      	bx	lr
   18b7c:	ea90 0f01 	teq	r0, r1
   18b80:	bf1c      	itt	ne
   18b82:	2000      	movne	r0, #0
   18b84:	4770      	bxne	lr
   18b86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   18b8a:	d104      	bne.n	18b96 <__addsf3+0x126>
   18b8c:	0040      	lsls	r0, r0, #1
   18b8e:	bf28      	it	cs
   18b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   18b94:	4770      	bx	lr
   18b96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   18b9a:	bf3c      	itt	cc
   18b9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   18ba0:	4770      	bxcc	lr
   18ba2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   18ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   18baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18bae:	4770      	bx	lr
   18bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   18bb4:	bf16      	itet	ne
   18bb6:	4608      	movne	r0, r1
   18bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   18bbc:	4601      	movne	r1, r0
   18bbe:	0242      	lsls	r2, r0, #9
   18bc0:	bf06      	itte	eq
   18bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   18bc6:	ea90 0f01 	teqeq	r0, r1
   18bca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   18bce:	4770      	bx	lr

00018bd0 <__aeabi_ui2f>:
   18bd0:	f04f 0300 	mov.w	r3, #0	; 0x0
   18bd4:	e004      	b.n	18be0 <__aeabi_i2f+0x8>
   18bd6:	46c0      	nop			(mov r8, r8)

00018bd8 <__aeabi_i2f>:
   18bd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   18bdc:	bf48      	it	mi
   18bde:	4240      	negmi	r0, r0
   18be0:	ea5f 0c00 	movs.w	ip, r0
   18be4:	bf08      	it	eq
   18be6:	4770      	bxeq	lr
   18be8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   18bec:	4601      	mov	r1, r0
   18bee:	f04f 0000 	mov.w	r0, #0	; 0x0
   18bf2:	e01c      	b.n	18c2e <__aeabi_l2f+0x2a>

00018bf4 <__aeabi_ul2f>:
   18bf4:	ea50 0201 	orrs.w	r2, r0, r1
   18bf8:	bf08      	it	eq
   18bfa:	4770      	bxeq	lr
   18bfc:	f04f 0300 	mov.w	r3, #0	; 0x0
   18c00:	e00a      	b.n	18c18 <__aeabi_l2f+0x14>
   18c02:	46c0      	nop			(mov r8, r8)

00018c04 <__aeabi_l2f>:
   18c04:	ea50 0201 	orrs.w	r2, r0, r1
   18c08:	bf08      	it	eq
   18c0a:	4770      	bxeq	lr
   18c0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   18c10:	d502      	bpl.n	18c18 <__aeabi_l2f+0x14>
   18c12:	4240      	negs	r0, r0
   18c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18c18:	ea5f 0c01 	movs.w	ip, r1
   18c1c:	bf02      	ittt	eq
   18c1e:	4684      	moveq	ip, r0
   18c20:	4601      	moveq	r1, r0
   18c22:	2000      	moveq	r0, #0
   18c24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   18c28:	bf08      	it	eq
   18c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   18c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   18c32:	fabc f28c 	clz	r2, ip
   18c36:	3a08      	subs	r2, #8
   18c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   18c3c:	db10      	blt.n	18c60 <__aeabi_l2f+0x5c>
   18c3e:	fa01 fc02 	lsl.w	ip, r1, r2
   18c42:	4463      	add	r3, ip
   18c44:	fa00 fc02 	lsl.w	ip, r0, r2
   18c48:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   18c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   18c50:	fa20 f202 	lsr.w	r2, r0, r2
   18c54:	eb43 0002 	adc.w	r0, r3, r2
   18c58:	bf08      	it	eq
   18c5a:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   18c5e:	4770      	bx	lr
   18c60:	f102 0220 	add.w	r2, r2, #32	; 0x20
   18c64:	fa01 fc02 	lsl.w	ip, r1, r2
   18c68:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   18c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   18c70:	fa21 f202 	lsr.w	r2, r1, r2
   18c74:	eb43 0002 	adc.w	r0, r3, r2
   18c78:	bf08      	it	eq
   18c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18c7e:	4770      	bx	lr

00018c80 <__aeabi_fmul>:
   18c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18c88:	bf1e      	ittt	ne
   18c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18c8e:	ea92 0f0c 	teqne	r2, ip
   18c92:	ea93 0f0c 	teqne	r3, ip
   18c96:	d06f      	beq.n	18d78 <__aeabi_fmul+0xf8>
   18c98:	441a      	add	r2, r3
   18c9a:	ea80 0c01 	eor.w	ip, r0, r1
   18c9e:	0240      	lsls	r0, r0, #9
   18ca0:	bf18      	it	ne
   18ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   18ca6:	d01e      	beq.n	18ce6 <__aeabi_fmul+0x66>
   18ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   18cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   18cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   18cb4:	fba0 3101 	umull	r3, r1, r0, r1
   18cb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18cbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   18cc0:	bf3e      	ittt	cc
   18cc2:	0049      	lslcc	r1, r1, #1
   18cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   18cc8:	005b      	lslcc	r3, r3, #1
   18cca:	ea40 0001 	orr.w	r0, r0, r1
   18cce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   18cd2:	2afd      	cmp	r2, #253
   18cd4:	d81d      	bhi.n	18d12 <__aeabi_fmul+0x92>
   18cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18cde:	bf08      	it	eq
   18ce0:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   18ce4:	4770      	bx	lr
   18ce6:	f090 0f00 	teq	r0, #0	; 0x0
   18cea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18cee:	bf08      	it	eq
   18cf0:	0249      	lsleq	r1, r1, #9
   18cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   18cfa:	3a7f      	subs	r2, #127
   18cfc:	bfc2      	ittt	gt
   18cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18d06:	4770      	bxgt	lr
   18d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18d0c:	f04f 0300 	mov.w	r3, #0	; 0x0
   18d10:	3a01      	subs	r2, #1
   18d12:	dc5d      	bgt.n	18dd0 <__aeabi_fmul+0x150>
   18d14:	f112 0f19 	cmn.w	r2, #25	; 0x19
   18d18:	bfdc      	itt	le
   18d1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   18d1e:	4770      	bxle	lr
   18d20:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   18d24:	0041      	lsls	r1, r0, #1
   18d26:	fa21 f102 	lsr.w	r1, r1, r2
   18d2a:	f1c2 0220 	rsb	r2, r2, #32	; 0x20
   18d2e:	fa00 fc02 	lsl.w	ip, r0, r2
   18d32:	ea5f 0031 	movs.w	r0, r1, rrx
   18d36:	f140 0000 	adc.w	r0, r0, #0	; 0x0
   18d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   18d3e:	bf08      	it	eq
   18d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   18d44:	4770      	bx	lr
   18d46:	f092 0f00 	teq	r2, #0	; 0x0
   18d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18d4e:	bf02      	ittt	eq
   18d50:	0040      	lsleq	r0, r0, #1
   18d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18d56:	3a01      	subeq	r2, #1
   18d58:	d0f9      	beq.n	18d4e <__aeabi_fmul+0xce>
   18d5a:	ea40 000c 	orr.w	r0, r0, ip
   18d5e:	f093 0f00 	teq	r3, #0	; 0x0
   18d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18d66:	bf02      	ittt	eq
   18d68:	0049      	lsleq	r1, r1, #1
   18d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18d6e:	3b01      	subeq	r3, #1
   18d70:	d0f9      	beq.n	18d66 <__aeabi_fmul+0xe6>
   18d72:	ea41 010c 	orr.w	r1, r1, ip
   18d76:	e78f      	b.n	18c98 <__aeabi_fmul+0x18>
   18d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18d7c:	ea92 0f0c 	teq	r2, ip
   18d80:	bf18      	it	ne
   18d82:	ea93 0f0c 	teqne	r3, ip
   18d86:	d00a      	beq.n	18d9e <__aeabi_fmul+0x11e>
   18d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18d8c:	bf18      	it	ne
   18d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18d92:	d1d8      	bne.n	18d46 <__aeabi_fmul+0xc6>
   18d94:	ea80 0001 	eor.w	r0, r0, r1
   18d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18d9c:	4770      	bx	lr
   18d9e:	f090 0f00 	teq	r0, #0	; 0x0
   18da2:	bf17      	itett	ne
   18da4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   18da8:	4608      	moveq	r0, r1
   18daa:	f091 0f00 	teqne	r1, #0	; 0x0
   18dae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   18db2:	d014      	beq.n	18dde <__aeabi_fmul+0x15e>
   18db4:	ea92 0f0c 	teq	r2, ip
   18db8:	d101      	bne.n	18dbe <__aeabi_fmul+0x13e>
   18dba:	0242      	lsls	r2, r0, #9
   18dbc:	d10f      	bne.n	18dde <__aeabi_fmul+0x15e>
   18dbe:	ea93 0f0c 	teq	r3, ip
   18dc2:	d103      	bne.n	18dcc <__aeabi_fmul+0x14c>
   18dc4:	024b      	lsls	r3, r1, #9
   18dc6:	bf18      	it	ne
   18dc8:	4608      	movne	r0, r1
   18dca:	d108      	bne.n	18dde <__aeabi_fmul+0x15e>
   18dcc:	ea80 0001 	eor.w	r0, r0, r1
   18dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   18dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18ddc:	4770      	bx	lr
   18dde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   18de2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   18de6:	4770      	bx	lr

00018de8 <__aeabi_fdiv>:
   18de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   18dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   18df0:	bf1e      	ittt	ne
   18df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   18df6:	ea92 0f0c 	teqne	r2, ip
   18dfa:	ea93 0f0c 	teqne	r3, ip
   18dfe:	d069      	beq.n	18ed4 <__aeabi_fdiv+0xec>
   18e00:	eba2 0203 	sub.w	r2, r2, r3
   18e04:	ea80 0c01 	eor.w	ip, r0, r1
   18e08:	0249      	lsls	r1, r1, #9
   18e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   18e0e:	d037      	beq.n	18e80 <__aeabi_fdiv+0x98>
   18e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   18e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   18e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   18e20:	428b      	cmp	r3, r1
   18e22:	bf38      	it	cc
   18e24:	005b      	lslcc	r3, r3, #1
   18e26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   18e2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   18e2e:	428b      	cmp	r3, r1
   18e30:	bf24      	itt	cs
   18e32:	1a5b      	subcs	r3, r3, r1
   18e34:	ea40 000c 	orrcs.w	r0, r0, ip
   18e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   18e3c:	bf24      	itt	cs
   18e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   18e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   18e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   18e4a:	bf24      	itt	cs
   18e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   18e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   18e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   18e58:	bf24      	itt	cs
   18e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   18e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   18e62:	011b      	lsls	r3, r3, #4
   18e64:	bf18      	it	ne
   18e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   18e6a:	d1e0      	bne.n	18e2e <__aeabi_fdiv+0x46>
   18e6c:	2afd      	cmp	r2, #253
   18e6e:	f63f af50 	bhi.w	18d12 <__aeabi_fmul+0x92>
   18e72:	428b      	cmp	r3, r1
   18e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   18e78:	bf08      	it	eq
   18e7a:	f020 0001 	biceq.w	r0, r0, #1	; 0x1
   18e7e:	4770      	bx	lr
   18e80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   18e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   18e88:	327f      	adds	r2, #127
   18e8a:	bfc2      	ittt	gt
   18e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   18e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   18e94:	4770      	bxgt	lr
   18e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   18e9a:	f04f 0300 	mov.w	r3, #0	; 0x0
   18e9e:	3a01      	subs	r2, #1
   18ea0:	e737      	b.n	18d12 <__aeabi_fmul+0x92>
   18ea2:	f092 0f00 	teq	r2, #0	; 0x0
   18ea6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   18eaa:	bf02      	ittt	eq
   18eac:	0040      	lsleq	r0, r0, #1
   18eae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   18eb2:	3a01      	subeq	r2, #1
   18eb4:	d0f9      	beq.n	18eaa <__aeabi_fdiv+0xc2>
   18eb6:	ea40 000c 	orr.w	r0, r0, ip
   18eba:	f093 0f00 	teq	r3, #0	; 0x0
   18ebe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   18ec2:	bf02      	ittt	eq
   18ec4:	0049      	lsleq	r1, r1, #1
   18ec6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   18eca:	3b01      	subeq	r3, #1
   18ecc:	d0f9      	beq.n	18ec2 <__aeabi_fdiv+0xda>
   18ece:	ea41 010c 	orr.w	r1, r1, ip
   18ed2:	e795      	b.n	18e00 <__aeabi_fdiv+0x18>
   18ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   18ed8:	ea92 0f0c 	teq	r2, ip
   18edc:	d108      	bne.n	18ef0 <__aeabi_fdiv+0x108>
   18ede:	0242      	lsls	r2, r0, #9
   18ee0:	f47f af7d 	bne.w	18dde <__aeabi_fmul+0x15e>
   18ee4:	ea93 0f0c 	teq	r3, ip
   18ee8:	f47f af70 	bne.w	18dcc <__aeabi_fmul+0x14c>
   18eec:	4608      	mov	r0, r1
   18eee:	e776      	b.n	18dde <__aeabi_fmul+0x15e>
   18ef0:	ea93 0f0c 	teq	r3, ip
   18ef4:	d104      	bne.n	18f00 <__aeabi_fdiv+0x118>
   18ef6:	024b      	lsls	r3, r1, #9
   18ef8:	f43f af4c 	beq.w	18d94 <__aeabi_fmul+0x114>
   18efc:	4608      	mov	r0, r1
   18efe:	e76e      	b.n	18dde <__aeabi_fmul+0x15e>
   18f00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   18f04:	bf18      	it	ne
   18f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   18f0a:	d1ca      	bne.n	18ea2 <__aeabi_fdiv+0xba>
   18f0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   18f10:	f47f af5c 	bne.w	18dcc <__aeabi_fmul+0x14c>
   18f14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   18f18:	f47f af3c 	bne.w	18d94 <__aeabi_fmul+0x114>
   18f1c:	e75f      	b.n	18dde <__aeabi_fmul+0x15e>
   18f1e:	46c0      	nop			(mov r8, r8)

00018f20 <__gesf2>:
   18f20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   18f24:	e006      	b.n	18f34 <__cmpsf2+0x4>
   18f26:	46c0      	nop			(mov r8, r8)

00018f28 <__lesf2>:
   18f28:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18f2c:	e002      	b.n	18f34 <__cmpsf2+0x4>
   18f2e:	46c0      	nop			(mov r8, r8)

00018f30 <__cmpsf2>:
   18f30:	f04f 0c01 	mov.w	ip, #1	; 0x1
   18f34:	f84d cc04 	str.w	ip, [sp, #-4]
   18f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
   18f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   18f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18f44:	bf18      	it	ne
   18f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   18f4a:	d010      	beq.n	18f6e <__cmpsf2+0x3e>
   18f4c:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   18f50:	bf18      	it	ne
   18f52:	ea90 0f01 	teqne	r0, r1
   18f56:	bf58      	it	pl
   18f58:	ebb2 0003 	subspl.w	r0, r2, r3
   18f5c:	bf88      	it	hi
   18f5e:	17c8      	asrhi	r0, r1, #31
   18f60:	bf38      	it	cc
   18f62:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   18f66:	bf18      	it	ne
   18f68:	f040 0001 	orrne.w	r0, r0, #1	; 0x1
   18f6c:	4770      	bx	lr
   18f6e:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   18f72:	d102      	bne.n	18f7a <__cmpsf2+0x4a>
   18f74:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   18f78:	d105      	bne.n	18f86 <__cmpsf2+0x56>
   18f7a:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   18f7e:	d1e5      	bne.n	18f4c <__cmpsf2+0x1c>
   18f80:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   18f84:	d0e2      	beq.n	18f4c <__cmpsf2+0x1c>
   18f86:	f85d 0c04 	ldr.w	r0, [sp, #-4]
   18f8a:	4770      	bx	lr

00018f8c <__aeabi_cfrcmple>:
   18f8c:	4684      	mov	ip, r0
   18f8e:	4608      	mov	r0, r1
   18f90:	4661      	mov	r1, ip
   18f92:	e7ff      	b.n	18f94 <__aeabi_cfcmpeq>

00018f94 <__aeabi_cfcmpeq>:
   18f94:	b50f      	push	{r0, r1, r2, r3, lr}
   18f96:	f7ff ffcb 	bl	18f30 <__cmpsf2>
   18f9a:	2800      	cmp	r0, #0
   18f9c:	bf48      	it	mi
   18f9e:	f110 0f00 	cmnmi.w	r0, #0	; 0x0
   18fa2:	bd0f      	pop	{r0, r1, r2, r3, pc}

00018fa4 <__aeabi_fcmpeq>:
   18fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fa8:	f7ff fff4 	bl	18f94 <__aeabi_cfcmpeq>
   18fac:	bf0c      	ite	eq
   18fae:	2001      	moveq	r0, #1
   18fb0:	2000      	movne	r0, #0
   18fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   18fb6:	46c0      	nop			(mov r8, r8)

00018fb8 <__aeabi_fcmplt>:
   18fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fbc:	f7ff ffea 	bl	18f94 <__aeabi_cfcmpeq>
   18fc0:	bf34      	ite	cc
   18fc2:	2001      	movcc	r0, #1
   18fc4:	2000      	movcs	r0, #0
   18fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   18fca:	46c0      	nop			(mov r8, r8)

00018fcc <__aeabi_fcmple>:
   18fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fd0:	f7ff ffe0 	bl	18f94 <__aeabi_cfcmpeq>
   18fd4:	bf94      	ite	ls
   18fd6:	2001      	movls	r0, #1
   18fd8:	2000      	movhi	r0, #0
   18fda:	f85d fb08 	ldr.w	pc, [sp], #8
   18fde:	46c0      	nop			(mov r8, r8)

00018fe0 <__aeabi_fcmpge>:
   18fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   18fe4:	f7ff ffd2 	bl	18f8c <__aeabi_cfrcmple>
   18fe8:	bf94      	ite	ls
   18fea:	2001      	movls	r0, #1
   18fec:	2000      	movhi	r0, #0
   18fee:	f85d fb08 	ldr.w	pc, [sp], #8
   18ff2:	46c0      	nop			(mov r8, r8)

00018ff4 <__aeabi_fcmpgt>:
   18ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   18ff8:	f7ff ffc8 	bl	18f8c <__aeabi_cfrcmple>
   18ffc:	bf34      	ite	cc
   18ffe:	2001      	movcc	r0, #1
   19000:	2000      	movcs	r0, #0
   19002:	f85d fb08 	ldr.w	pc, [sp], #8
   19006:	46c0      	nop			(mov r8, r8)

00019008 <__aeabi_f2iz>:
   19008:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1900c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   19010:	d30f      	bcc.n	19032 <__aeabi_f2iz+0x2a>
   19012:	f04f 039e 	mov.w	r3, #158	; 0x9e
   19016:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1901a:	d90d      	bls.n	19038 <__aeabi_f2iz+0x30>
   1901c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   19020:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19024:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   19028:	fa23 f002 	lsr.w	r0, r3, r2
   1902c:	bf18      	it	ne
   1902e:	4240      	negne	r0, r0
   19030:	4770      	bx	lr
   19032:	f04f 0000 	mov.w	r0, #0	; 0x0
   19036:	4770      	bx	lr
   19038:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1903c:	d101      	bne.n	19042 <__aeabi_f2iz+0x3a>
   1903e:	0242      	lsls	r2, r0, #9
   19040:	d105      	bne.n	1904e <__aeabi_f2iz+0x46>
   19042:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   19046:	bf08      	it	eq
   19048:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1904c:	4770      	bx	lr
   1904e:	f04f 0000 	mov.w	r0, #0	; 0x0
   19052:	4770      	bx	lr

00019054 <__aeabi_f2uiz>:
   19054:	0042      	lsls	r2, r0, #1
   19056:	d20e      	bcs.n	19076 <__aeabi_f2uiz+0x22>
   19058:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1905c:	d30b      	bcc.n	19076 <__aeabi_f2uiz+0x22>
   1905e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   19062:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   19066:	d409      	bmi.n	1907c <__aeabi_f2uiz+0x28>
   19068:	ea4f 2300 	mov.w	r3, r0, lsl #8
   1906c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19070:	fa23 f002 	lsr.w	r0, r3, r2
   19074:	4770      	bx	lr
   19076:	f04f 0000 	mov.w	r0, #0	; 0x0
   1907a:	4770      	bx	lr
   1907c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   19080:	d101      	bne.n	19086 <__aeabi_f2uiz+0x32>
   19082:	0242      	lsls	r2, r0, #9
   19084:	d102      	bne.n	1908c <__aeabi_f2uiz+0x38>
   19086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1908a:	4770      	bx	lr
   1908c:	f04f 0000 	mov.w	r0, #0	; 0x0
   19090:	4770      	bx	lr
   19092:	46c0      	nop			(mov r8, r8)

00019094 <_Unwind_decode_target2>:
   19094:	4603      	mov	r3, r0
   19096:	6800      	ldr	r0, [r0, #0]
   19098:	b100      	cbz	r0, 1909c <_Unwind_decode_target2+0x8>
   1909a:	18c0      	adds	r0, r0, r3
   1909c:	4770      	bx	lr
   1909e:	46c0      	nop			(mov r8, r8)

000190a0 <_Unwind_VRS_Get>:
   190a0:	b410      	push	{r4}
   190a2:	469c      	mov	ip, r3
   190a4:	4604      	mov	r4, r0
   190a6:	b969      	cbnz	r1, 190c4 <_Unwind_VRS_Get+0x24>
   190a8:	2a0f      	cmp	r2, #15
   190aa:	bf94      	ite	ls
   190ac:	2300      	movls	r3, #0
   190ae:	2301      	movhi	r3, #1
   190b0:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   190b4:	bf0c      	ite	eq
   190b6:	4618      	moveq	r0, r3
   190b8:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   190bc:	b130      	cbz	r0, 190cc <_Unwind_VRS_Get+0x2c>
   190be:	2002      	movs	r0, #2
   190c0:	bc10      	pop	{r4}
   190c2:	4770      	bx	lr
   190c4:	2904      	cmp	r1, #4
   190c6:	d8fa      	bhi.n	190be <_Unwind_VRS_Get+0x1e>
   190c8:	2001      	movs	r0, #1
   190ca:	e7f9      	b.n	190c0 <_Unwind_VRS_Get+0x20>
   190cc:	0093      	lsls	r3, r2, #2
   190ce:	4423      	add	r3, r4
   190d0:	685a      	ldr	r2, [r3, #4]
   190d2:	9b01      	ldr	r3, [sp, #4]
   190d4:	601a      	str	r2, [r3, #0]
   190d6:	e7f3      	b.n	190c0 <_Unwind_VRS_Get+0x20>

000190d8 <_Unwind_GetGR>:
   190d8:	b500      	push	{lr}
   190da:	b085      	sub	sp, #20
   190dc:	460a      	mov	r2, r1
   190de:	ab03      	add	r3, sp, #12
   190e0:	2100      	movs	r1, #0
   190e2:	9300      	str	r3, [sp, #0]
   190e4:	460b      	mov	r3, r1
   190e6:	f7ff ffdb 	bl	190a0 <_Unwind_VRS_Get>
   190ea:	9803      	ldr	r0, [sp, #12]
   190ec:	b005      	add	sp, #20
   190ee:	bd00      	pop	{pc}

000190f0 <_Unwind_VRS_Set>:
   190f0:	b410      	push	{r4}
   190f2:	469c      	mov	ip, r3
   190f4:	4604      	mov	r4, r0
   190f6:	b969      	cbnz	r1, 19114 <_Unwind_VRS_Set+0x24>
   190f8:	2a0f      	cmp	r2, #15
   190fa:	bf94      	ite	ls
   190fc:	2300      	movls	r3, #0
   190fe:	2301      	movhi	r3, #1
   19100:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   19104:	bf0c      	ite	eq
   19106:	4618      	moveq	r0, r3
   19108:	f043 0001 	orrne.w	r0, r3, #1	; 0x1
   1910c:	b130      	cbz	r0, 1911c <_Unwind_VRS_Set+0x2c>
   1910e:	2002      	movs	r0, #2
   19110:	bc10      	pop	{r4}
   19112:	4770      	bx	lr
   19114:	2904      	cmp	r1, #4
   19116:	d8fa      	bhi.n	1910e <_Unwind_VRS_Set+0x1e>
   19118:	2001      	movs	r0, #1
   1911a:	e7f9      	b.n	19110 <_Unwind_VRS_Set+0x20>
   1911c:	9901      	ldr	r1, [sp, #4]
   1911e:	0093      	lsls	r3, r2, #2
   19120:	680a      	ldr	r2, [r1, #0]
   19122:	4423      	add	r3, r4
   19124:	605a      	str	r2, [r3, #4]
   19126:	e7f3      	b.n	19110 <_Unwind_VRS_Set+0x20>

00019128 <_Unwind_SetGR>:
   19128:	b500      	push	{lr}
   1912a:	b085      	sub	sp, #20
   1912c:	ab04      	add	r3, sp, #16
   1912e:	468c      	mov	ip, r1
   19130:	f843 2d04 	str.w	r2, [r3, #-4]!
   19134:	2100      	movs	r1, #0
   19136:	9300      	str	r3, [sp, #0]
   19138:	4662      	mov	r2, ip
   1913a:	460b      	mov	r3, r1
   1913c:	f7ff ffd8 	bl	190f0 <_Unwind_VRS_Set>
   19140:	b005      	add	sp, #20
   19142:	bd00      	pop	{pc}

00019144 <selfrel_offset31>:
   19144:	6803      	ldr	r3, [r0, #0]
   19146:	4602      	mov	r2, r0
   19148:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1914c:	bf14      	ite	ne
   1914e:	f043 4000 	orrne.w	r0, r3, #2147483648	; 0x80000000
   19152:	f023 4000 	biceq.w	r0, r3, #2147483648	; 0x80000000
   19156:	4410      	add	r0, r2
   19158:	4770      	bx	lr
   1915a:	46c0      	nop			(mov r8, r8)

0001915c <search_EIT_table>:
   1915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19160:	4682      	mov	sl, r0
   19162:	b081      	sub	sp, #4
   19164:	4690      	mov	r8, r2
   19166:	2900      	cmp	r1, #0
   19168:	d024      	beq.n	191b4 <search_EIT_table+0x58>
   1916a:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
   1916e:	46d9      	mov	r9, fp
   19170:	2700      	movs	r7, #0
   19172:	e000      	b.n	19176 <search_EIT_table+0x1a>
   19174:	1c67      	adds	r7, r4, #1
   19176:	eb09 0307 	add.w	r3, r9, r7
   1917a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1917e:	105c      	asrs	r4, r3, #1
   19180:	00e2      	lsls	r2, r4, #3
   19182:	eb0a 0502 	add.w	r5, sl, r2
   19186:	4628      	mov	r0, r5
   19188:	f7ff ffdc 	bl	19144 <selfrel_offset31>
   1918c:	45a3      	cmp	fp, r4
   1918e:	4606      	mov	r6, r0
   19190:	bf08      	it	eq
   19192:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   19196:	d005      	beq.n	191a4 <search_EIT_table+0x48>
   19198:	1c60      	adds	r0, r4, #1
   1919a:	00c0      	lsls	r0, r0, #3
   1919c:	4450      	add	r0, sl
   1919e:	f7ff ffd1 	bl	19144 <selfrel_offset31>
   191a2:	3801      	subs	r0, #1
   191a4:	4546      	cmp	r6, r8
   191a6:	d807      	bhi.n	191b8 <search_EIT_table+0x5c>
   191a8:	4540      	cmp	r0, r8
   191aa:	d3e3      	bcc.n	19174 <search_EIT_table+0x18>
   191ac:	4628      	mov	r0, r5
   191ae:	b001      	add	sp, #4
   191b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191b4:	2500      	movs	r5, #0
   191b6:	e7f9      	b.n	191ac <search_EIT_table+0x50>
   191b8:	42bc      	cmp	r4, r7
   191ba:	d0fb      	beq.n	191b4 <search_EIT_table+0x58>
   191bc:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
   191c0:	e7d9      	b.n	19176 <search_EIT_table+0x1a>
   191c2:	46c0      	nop			(mov r8, r8)

000191c4 <_Unwind_GetCFA>:
   191c4:	6c40      	ldr	r0, [r0, #68]
   191c6:	4770      	bx	lr

000191c8 <_Unwind_Complete>:
   191c8:	4770      	bx	lr
   191ca:	46c0      	nop			(mov r8, r8)

000191cc <_Unwind_DeleteException>:
   191cc:	b500      	push	{lr}
   191ce:	6883      	ldr	r3, [r0, #8]
   191d0:	b081      	sub	sp, #4
   191d2:	4601      	mov	r1, r0
   191d4:	b10b      	cbz	r3, 191da <_Unwind_DeleteException+0xe>
   191d6:	2001      	movs	r0, #1
   191d8:	4798      	blx	r3
   191da:	b001      	add	sp, #4
   191dc:	bd00      	pop	{pc}
   191de:	46c0      	nop			(mov r8, r8)

000191e0 <__gnu_unwind_pr_common>:
   191e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191e4:	4688      	mov	r8, r1
   191e6:	b089      	sub	sp, #36
   191e8:	f000 0108 	and.w	r1, r0, #8	; 0x8
   191ec:	f000 0003 	and.w	r0, r0, #3	; 0x3
   191f0:	9003      	str	r0, [sp, #12]
   191f2:	f8d8 004c 	ldr.w	r0, [r8, #76]
   191f6:	4691      	mov	r9, r2
   191f8:	f850 2b04 	ldr.w	r2, [r0], #4
   191fc:	469b      	mov	fp, r3
   191fe:	9102      	str	r1, [sp, #8]
   19200:	9005      	str	r0, [sp, #20]
   19202:	2b00      	cmp	r3, #0
   19204:	f040 80c1 	bne.w	1938a <__gnu_unwind_pr_common+0x1aa>
   19208:	0213      	lsls	r3, r2, #8
   1920a:	9304      	str	r3, [sp, #16]
   1920c:	2303      	movs	r3, #3
   1920e:	f88d b019 	strb.w	fp, [sp, #25]
   19212:	f88d 3018 	strb.w	r3, [sp, #24]
   19216:	9a03      	ldr	r2, [sp, #12]
   19218:	f8d8 3050 	ldr.w	r3, [r8, #80]
   1921c:	2a02      	cmp	r2, #2
   1921e:	bf08      	it	eq
   19220:	f8d8 0038 	ldreq.w	r0, [r8, #56]
   19224:	f013 0301 	ands.w	r3, r3, #1	; 0x1
   19228:	bf02      	ittt	eq
   1922a:	f108 0158 	addeq.w	r1, r8, #88	; 0x58
   1922e:	9301      	streq	r3, [sp, #4]
   19230:	9100      	streq	r1, [sp, #0]
   19232:	f040 80b6 	bne.w	193a2 <__gnu_unwind_pr_common+0x1c2>
   19236:	6803      	ldr	r3, [r0, #0]
   19238:	2b00      	cmp	r3, #0
   1923a:	d02e      	beq.n	1929a <__gnu_unwind_pr_common+0xba>
   1923c:	f1bb 0f02 	cmp.w	fp, #2	; 0x2
   19240:	bf0a      	itet	eq
   19242:	6844      	ldreq	r4, [r0, #4]
   19244:	8844      	ldrhne	r4, [r0, #2]
   19246:	461e      	moveq	r6, r3
   19248:	f8d8 3048 	ldr.w	r3, [r8, #72]
   1924c:	bf0c      	ite	eq
   1924e:	f100 0708 	addeq.w	r7, r0, #8	; 0x8
   19252:	8806      	ldrhne	r6, [r0, #0]
   19254:	f024 0201 	bic.w	r2, r4, #1	; 0x1
   19258:	bf18      	it	ne
   1925a:	1d07      	addne	r7, r0, #4
   1925c:	210f      	movs	r1, #15
   1925e:	4648      	mov	r0, r9
   19260:	eb02 0503 	add.w	r5, r2, r3
   19264:	f7ff ff38 	bl	190d8 <_Unwind_GetGR>
   19268:	4285      	cmp	r5, r0
   1926a:	d922      	bls.n	192b2 <__gnu_unwind_pr_common+0xd2>
   1926c:	f004 0201 	and.w	r2, r4, #1	; 0x1
   19270:	f006 0301 	and.w	r3, r6, #1	; 0x1
   19274:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   19278:	2000      	movs	r0, #0
   1927a:	2a01      	cmp	r2, #1
   1927c:	d028      	beq.n	192d0 <__gnu_unwind_pr_common+0xf0>
   1927e:	d248      	bcs.n	19312 <__gnu_unwind_pr_common+0x132>
   19280:	9a03      	ldr	r2, [sp, #12]
   19282:	2a00      	cmp	r2, #0
   19284:	bf0c      	ite	eq
   19286:	2300      	moveq	r3, #0
   19288:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1928c:	2b00      	cmp	r3, #0
   1928e:	f040 80ec 	bne.w	1946a <__gnu_unwind_pr_common+0x28a>
   19292:	1d38      	adds	r0, r7, #4
   19294:	6803      	ldr	r3, [r0, #0]
   19296:	2b00      	cmp	r3, #0
   19298:	d1d0      	bne.n	1923c <__gnu_unwind_pr_common+0x5c>
   1929a:	4648      	mov	r0, r9
   1929c:	a904      	add	r1, sp, #16
   1929e:	f000 fd67 	bl	19d70 <__gnu_unwind_execute>
   192a2:	2800      	cmp	r0, #0
   192a4:	d137      	bne.n	19316 <__gnu_unwind_pr_common+0x136>
   192a6:	9b01      	ldr	r3, [sp, #4]
   192a8:	2b00      	cmp	r3, #0
   192aa:	f040 80ce 	bne.w	1944a <__gnu_unwind_pr_common+0x26a>
   192ae:	3008      	adds	r0, #8
   192b0:	e032      	b.n	19318 <__gnu_unwind_pr_common+0x138>
   192b2:	f026 0301 	bic.w	r3, r6, #1	; 0x1
   192b6:	442b      	add	r3, r5
   192b8:	4298      	cmp	r0, r3
   192ba:	bf2c      	ite	cs
   192bc:	2000      	movcs	r0, #0
   192be:	2001      	movcc	r0, #1
   192c0:	f004 0201 	and.w	r2, r4, #1	; 0x1
   192c4:	f006 0301 	and.w	r3, r6, #1	; 0x1
   192c8:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
   192cc:	2a01      	cmp	r2, #1
   192ce:	d1d6      	bne.n	1927e <__gnu_unwind_pr_common+0x9e>
   192d0:	9b03      	ldr	r3, [sp, #12]
   192d2:	2b00      	cmp	r3, #0
   192d4:	d16f      	bne.n	193b6 <__gnu_unwind_pr_common+0x1d6>
   192d6:	b1c8      	cbz	r0, 1930c <__gnu_unwind_pr_common+0x12c>
   192d8:	687b      	ldr	r3, [r7, #4]
   192da:	4638      	mov	r0, r7
   192dc:	f113 0f02 	cmn.w	r3, #2	; 0x2
   192e0:	f850 4b04 	ldr.w	r4, [r0], #4
   192e4:	d017      	beq.n	19316 <__gnu_unwind_pr_common+0x136>
   192e6:	9900      	ldr	r1, [sp, #0]
   192e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   192ec:	9107      	str	r1, [sp, #28]
   192ee:	f000 809b 	beq.w	19428 <__gnu_unwind_pr_common+0x248>
   192f2:	f7ff fecf 	bl	19094 <_Unwind_decode_target2>
   192f6:	0fe2      	lsrs	r2, r4, #31
   192f8:	4601      	mov	r1, r0
   192fa:	ab07      	add	r3, sp, #28
   192fc:	4640      	mov	r0, r8
   192fe:	f001 fd8b 	bl	1ae18 <__cxa_type_match>
   19302:	2800      	cmp	r0, #0
   19304:	f040 8090 	bne.w	19428 <__gnu_unwind_pr_common+0x248>
   19308:	9a03      	ldr	r2, [sp, #12]
   1930a:	9207      	str	r2, [sp, #28]
   1930c:	f107 0008 	add.w	r0, r7, #8	; 0x8
   19310:	e791      	b.n	19236 <__gnu_unwind_pr_common+0x56>
   19312:	2a02      	cmp	r2, #2
   19314:	d003      	beq.n	1931e <__gnu_unwind_pr_common+0x13e>
   19316:	2009      	movs	r0, #9
   19318:	b009      	add	sp, #36
   1931a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1931e:	683a      	ldr	r2, [r7, #0]
   19320:	9b03      	ldr	r3, [sp, #12]
   19322:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
   19326:	2b00      	cmp	r3, #0
   19328:	d160      	bne.n	193ec <__gnu_unwind_pr_common+0x20c>
   1932a:	b328      	cbz	r0, 19378 <__gnu_unwind_pr_common+0x198>
   1932c:	9902      	ldr	r1, [sp, #8]
   1932e:	f1da 0301 	rsbs	r3, sl, #1	; 0x1
   19332:	bf38      	it	cc
   19334:	2300      	movcc	r3, #0
   19336:	2900      	cmp	r1, #0
   19338:	bf08      	it	eq
   1933a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
   1933e:	b1db      	cbz	r3, 19378 <__gnu_unwind_pr_common+0x198>
   19340:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   19344:	d074      	beq.n	19430 <__gnu_unwind_pr_common+0x250>
   19346:	1d3d      	adds	r5, r7, #4
   19348:	9e03      	ldr	r6, [sp, #12]
   1934a:	e003      	b.n	19354 <__gnu_unwind_pr_common+0x174>
   1934c:	3504      	adds	r5, #4
   1934e:	45a2      	cmp	sl, r4
   19350:	d90f      	bls.n	19372 <__gnu_unwind_pr_common+0x192>
   19352:	4626      	mov	r6, r4
   19354:	9a00      	ldr	r2, [sp, #0]
   19356:	4628      	mov	r0, r5
   19358:	9207      	str	r2, [sp, #28]
   1935a:	f7ff fe9b 	bl	19094 <_Unwind_decode_target2>
   1935e:	2200      	movs	r2, #0
   19360:	4601      	mov	r1, r0
   19362:	ab07      	add	r3, sp, #28
   19364:	4640      	mov	r0, r8
   19366:	1c74      	adds	r4, r6, #1
   19368:	f001 fd56 	bl	1ae18 <__cxa_type_match>
   1936c:	2800      	cmp	r0, #0
   1936e:	d0ed      	beq.n	1934c <__gnu_unwind_pr_common+0x16c>
   19370:	4634      	mov	r4, r6
   19372:	4554      	cmp	r4, sl
   19374:	d05c      	beq.n	19430 <__gnu_unwind_pr_common+0x250>
   19376:	683a      	ldr	r2, [r7, #0]
   19378:	2a00      	cmp	r2, #0
   1937a:	bfac      	ite	ge
   1937c:	4638      	movge	r0, r7
   1937e:	1d38      	addlt	r0, r7, #4
   19380:	f10a 0301 	add.w	r3, sl, #1	; 0x1
   19384:	009b      	lsls	r3, r3, #2
   19386:	18c0      	adds	r0, r0, r3
   19388:	e755      	b.n	19236 <__gnu_unwind_pr_common+0x56>
   1938a:	0c13      	lsrs	r3, r2, #16
   1938c:	b2db      	uxtb	r3, r3
   1938e:	2102      	movs	r1, #2
   19390:	f88d 3019 	strb.w	r3, [sp, #25]
   19394:	408b      	lsls	r3, r1
   19396:	0412      	lsls	r2, r2, #16
   19398:	9204      	str	r2, [sp, #16]
   1939a:	f88d 1018 	strb.w	r1, [sp, #24]
   1939e:	18c0      	adds	r0, r0, r3
   193a0:	e739      	b.n	19216 <__gnu_unwind_pr_common+0x36>
   193a2:	2300      	movs	r3, #0
   193a4:	4648      	mov	r0, r9
   193a6:	a904      	add	r1, sp, #16
   193a8:	9301      	str	r3, [sp, #4]
   193aa:	f000 fce1 	bl	19d70 <__gnu_unwind_execute>
   193ae:	2800      	cmp	r0, #0
   193b0:	f43f af79 	beq.w	192a6 <__gnu_unwind_pr_common+0xc6>
   193b4:	e7af      	b.n	19316 <__gnu_unwind_pr_common+0x136>
   193b6:	210d      	movs	r1, #13
   193b8:	4648      	mov	r0, r9
   193ba:	f8d8 4020 	ldr.w	r4, [r8, #32]
   193be:	f7ff fe8b 	bl	190d8 <_Unwind_GetGR>
   193c2:	4284      	cmp	r4, r0
   193c4:	d1a2      	bne.n	1930c <__gnu_unwind_pr_common+0x12c>
   193c6:	f8d8 3028 	ldr.w	r3, [r8, #40]
   193ca:	429f      	cmp	r7, r3
   193cc:	d19e      	bne.n	1930c <__gnu_unwind_pr_common+0x12c>
   193ce:	4638      	mov	r0, r7
   193d0:	f7ff feb8 	bl	19144 <selfrel_offset31>
   193d4:	4602      	mov	r2, r0
   193d6:	210f      	movs	r1, #15
   193d8:	4648      	mov	r0, r9
   193da:	f7ff fea5 	bl	19128 <_Unwind_SetGR>
   193de:	4648      	mov	r0, r9
   193e0:	2100      	movs	r1, #0
   193e2:	4642      	mov	r2, r8
   193e4:	f7ff fea0 	bl	19128 <_Unwind_SetGR>
   193e8:	2007      	movs	r0, #7
   193ea:	e795      	b.n	19318 <__gnu_unwind_pr_common+0x138>
   193ec:	210d      	movs	r1, #13
   193ee:	4648      	mov	r0, r9
   193f0:	f8d8 4020 	ldr.w	r4, [r8, #32]
   193f4:	f7ff fe70 	bl	190d8 <_Unwind_GetGR>
   193f8:	4284      	cmp	r4, r0
   193fa:	d1bc      	bne.n	19376 <__gnu_unwind_pr_common+0x196>
   193fc:	f8d8 3028 	ldr.w	r3, [r8, #40]
   19400:	429f      	cmp	r7, r3
   19402:	d1b8      	bne.n	19376 <__gnu_unwind_pr_common+0x196>
   19404:	2104      	movs	r1, #4
   19406:	2300      	movs	r3, #0
   19408:	eb07 0001 	add.w	r0, r7, r1
   1940c:	f8c8 a028 	str.w	sl, [r8, #40]
   19410:	f8c8 302c 	str.w	r3, [r8, #44]
   19414:	f8c8 1030 	str.w	r1, [r8, #48]
   19418:	f8c8 0034 	str.w	r0, [r8, #52]
   1941c:	683b      	ldr	r3, [r7, #0]
   1941e:	2b00      	cmp	r3, #0
   19420:	da37      	bge.n	19492 <__gnu_unwind_pr_common+0x2b2>
   19422:	2201      	movs	r2, #1
   19424:	9201      	str	r2, [sp, #4]
   19426:	e7ab      	b.n	19380 <__gnu_unwind_pr_common+0x1a0>
   19428:	9b07      	ldr	r3, [sp, #28]
   1942a:	2b00      	cmp	r3, #0
   1942c:	f43f af6e 	beq.w	1930c <__gnu_unwind_pr_common+0x12c>
   19430:	4648      	mov	r0, r9
   19432:	210d      	movs	r1, #13
   19434:	f7ff fe50 	bl	190d8 <_Unwind_GetGR>
   19438:	9b07      	ldr	r3, [sp, #28]
   1943a:	f8c8 0020 	str.w	r0, [r8, #32]
   1943e:	f8c8 3024 	str.w	r3, [r8, #36]
   19442:	f8c8 7028 	str.w	r7, [r8, #40]
   19446:	2006      	movs	r0, #6
   19448:	e766      	b.n	19318 <__gnu_unwind_pr_common+0x138>
   1944a:	210f      	movs	r1, #15
   1944c:	4648      	mov	r0, r9
   1944e:	f7ff fe43 	bl	190d8 <_Unwind_GetGR>
   19452:	210e      	movs	r1, #14
   19454:	4602      	mov	r2, r0
   19456:	4648      	mov	r0, r9
   19458:	f7ff fe66 	bl	19128 <_Unwind_SetGR>
   1945c:	4648      	mov	r0, r9
   1945e:	210f      	movs	r1, #15
   19460:	4a0f      	ldr	r2, [pc, #60]	(194a0 <__gnu_unwind_pr_common+0x2c0>)
   19462:	f7ff fe61 	bl	19128 <_Unwind_SetGR>
   19466:	2007      	movs	r0, #7
   19468:	e756      	b.n	19318 <__gnu_unwind_pr_common+0x138>
   1946a:	4638      	mov	r0, r7
   1946c:	f7ff fe6a 	bl	19144 <selfrel_offset31>
   19470:	1d3b      	adds	r3, r7, #4
   19472:	4604      	mov	r4, r0
   19474:	f8c8 3038 	str.w	r3, [r8, #56]
   19478:	4640      	mov	r0, r8
   1947a:	f001 fc97 	bl	1adac <__cxa_begin_cleanup>
   1947e:	2800      	cmp	r0, #0
   19480:	f43f af49 	beq.w	19316 <__gnu_unwind_pr_common+0x136>
   19484:	4648      	mov	r0, r9
   19486:	210f      	movs	r1, #15
   19488:	4622      	mov	r2, r4
   1948a:	f7ff fe4d 	bl	19128 <_Unwind_SetGR>
   1948e:	2007      	movs	r0, #7
   19490:	e742      	b.n	19318 <__gnu_unwind_pr_common+0x138>
   19492:	f10a 0001 	add.w	r0, sl, #1	; 0x1
   19496:	0080      	lsls	r0, r0, #2
   19498:	4438      	add	r0, r7
   1949a:	f7ff fe53 	bl	19144 <selfrel_offset31>
   1949e:	e799      	b.n	193d4 <__gnu_unwind_pr_common+0x1f4>
   194a0:	0001ba35 	.word	0x0001ba35

000194a4 <__aeabi_unwind_cpp_pr2>:
   194a4:	b500      	push	{lr}
   194a6:	2302      	movs	r3, #2
   194a8:	b081      	sub	sp, #4
   194aa:	f7ff fe99 	bl	191e0 <__gnu_unwind_pr_common>
   194ae:	b001      	add	sp, #4
   194b0:	bd00      	pop	{pc}
   194b2:	46c0      	nop			(mov r8, r8)

000194b4 <__aeabi_unwind_cpp_pr1>:
   194b4:	b500      	push	{lr}
   194b6:	2301      	movs	r3, #1
   194b8:	b081      	sub	sp, #4
   194ba:	f7ff fe91 	bl	191e0 <__gnu_unwind_pr_common>
   194be:	b001      	add	sp, #4
   194c0:	bd00      	pop	{pc}
   194c2:	46c0      	nop			(mov r8, r8)

000194c4 <__aeabi_unwind_cpp_pr0>:
   194c4:	b500      	push	{lr}
   194c6:	2300      	movs	r3, #0
   194c8:	b081      	sub	sp, #4
   194ca:	f7ff fe89 	bl	191e0 <__gnu_unwind_pr_common>
   194ce:	b001      	add	sp, #4
   194d0:	bd00      	pop	{pc}
   194d2:	46c0      	nop			(mov r8, r8)

000194d4 <get_eit_entry>:
   194d4:	b530      	push	{r4, r5, lr}
   194d6:	4b2d      	ldr	r3, [pc, #180]	(1958c <get_eit_entry+0xb8>)
   194d8:	b083      	sub	sp, #12
   194da:	4605      	mov	r5, r0
   194dc:	1e8c      	subs	r4, r1, #2
   194de:	2b00      	cmp	r3, #0
   194e0:	d04a      	beq.n	19578 <get_eit_entry+0xa4>
   194e2:	4620      	mov	r0, r4
   194e4:	a901      	add	r1, sp, #4
   194e6:	e000      	b.n	194ea <get_eit_entry+0x16>
   194e8:	bf00      	nop
   194ea:	4602      	mov	r2, r0
   194ec:	2800      	cmp	r0, #0
   194ee:	d02b      	beq.n	19548 <get_eit_entry+0x74>
   194f0:	4610      	mov	r0, r2
   194f2:	9901      	ldr	r1, [sp, #4]
   194f4:	4622      	mov	r2, r4
   194f6:	f7ff fe31 	bl	1915c <search_EIT_table>
   194fa:	4604      	mov	r4, r0
   194fc:	b300      	cbz	r0, 19540 <get_eit_entry+0x6c>
   194fe:	f7ff fe21 	bl	19144 <selfrel_offset31>
   19502:	64a8      	str	r0, [r5, #72]
   19504:	6863      	ldr	r3, [r4, #4]
   19506:	2b01      	cmp	r3, #1
   19508:	d02e      	beq.n	19568 <get_eit_entry+0x94>
   1950a:	2b00      	cmp	r3, #0
   1950c:	db1f      	blt.n	1954e <get_eit_entry+0x7a>
   1950e:	1d20      	adds	r0, r4, #4
   19510:	f7ff fe18 	bl	19144 <selfrel_offset31>
   19514:	64e8      	str	r0, [r5, #76]
   19516:	2300      	movs	r3, #0
   19518:	6ce8      	ldr	r0, [r5, #76]
   1951a:	652b      	str	r3, [r5, #80]
   1951c:	6803      	ldr	r3, [r0, #0]
   1951e:	2b00      	cmp	r3, #0
   19520:	da1d      	bge.n	1955e <get_eit_entry+0x8a>
   19522:	0e1b      	lsrs	r3, r3, #24
   19524:	f013 000f 	ands.w	r0, r3, #15	; 0xf
   19528:	bf04      	itt	eq
   1952a:	4b19      	ldreq	r3, [pc, #100]	(19590 <get_eit_entry+0xbc>)
   1952c:	612b      	streq	r3, [r5, #16]
   1952e:	d009      	beq.n	19544 <get_eit_entry+0x70>
   19530:	2801      	cmp	r0, #1
   19532:	d01d      	beq.n	19570 <get_eit_entry+0x9c>
   19534:	2802      	cmp	r0, #2
   19536:	d025      	beq.n	19584 <get_eit_entry+0xb0>
   19538:	2300      	movs	r3, #0
   1953a:	612b      	str	r3, [r5, #16]
   1953c:	2009      	movs	r0, #9
   1953e:	e001      	b.n	19544 <get_eit_entry+0x70>
   19540:	6128      	str	r0, [r5, #16]
   19542:	2009      	movs	r0, #9
   19544:	b003      	add	sp, #12
   19546:	bd30      	pop	{r4, r5, pc}
   19548:	6128      	str	r0, [r5, #16]
   1954a:	3009      	adds	r0, #9
   1954c:	e7fa      	b.n	19544 <get_eit_entry+0x70>
   1954e:	1d23      	adds	r3, r4, #4
   19550:	64eb      	str	r3, [r5, #76]
   19552:	2201      	movs	r2, #1
   19554:	6ce8      	ldr	r0, [r5, #76]
   19556:	652a      	str	r2, [r5, #80]
   19558:	6803      	ldr	r3, [r0, #0]
   1955a:	2b00      	cmp	r3, #0
   1955c:	dbe1      	blt.n	19522 <get_eit_entry+0x4e>
   1955e:	f7ff fdf1 	bl	19144 <selfrel_offset31>
   19562:	6128      	str	r0, [r5, #16]
   19564:	2000      	movs	r0, #0
   19566:	e7ed      	b.n	19544 <get_eit_entry+0x70>
   19568:	3b01      	subs	r3, #1
   1956a:	612b      	str	r3, [r5, #16]
   1956c:	2005      	movs	r0, #5
   1956e:	e7e9      	b.n	19544 <get_eit_entry+0x70>
   19570:	4b08      	ldr	r3, [pc, #32]	(19594 <get_eit_entry+0xc0>)
   19572:	3801      	subs	r0, #1
   19574:	612b      	str	r3, [r5, #16]
   19576:	e7e5      	b.n	19544 <get_eit_entry+0x70>
   19578:	4a07      	ldr	r2, [pc, #28]	(19598 <get_eit_entry+0xc4>)
   1957a:	4b08      	ldr	r3, [pc, #32]	(1959c <get_eit_entry+0xc8>)
   1957c:	1a9b      	subs	r3, r3, r2
   1957e:	10db      	asrs	r3, r3, #3
   19580:	9301      	str	r3, [sp, #4]
   19582:	e7b5      	b.n	194f0 <get_eit_entry+0x1c>
   19584:	4b06      	ldr	r3, [pc, #24]	(195a0 <get_eit_entry+0xcc>)
   19586:	3802      	subs	r0, #2
   19588:	612b      	str	r3, [r5, #16]
   1958a:	e7db      	b.n	19544 <get_eit_entry+0x70>
   1958c:	00000000 	.word	0x00000000
   19590:	000194c5 	.word	0x000194c5
   19594:	000194b5 	.word	0x000194b5
   19598:	00021388 	.word	0x00021388
   1959c:	00021750 	.word	0x00021750
   195a0:	000194a5 	.word	0x000194a5

000195a4 <restore_non_core_regs>:
   195a4:	6803      	ldr	r3, [r0, #0]
   195a6:	b510      	push	{r4, lr}
   195a8:	f013 0f01 	tst.w	r3, #1	; 0x1
   195ac:	4604      	mov	r4, r0
   195ae:	d107      	bne.n	195c0 <restore_non_core_regs+0x1c>
   195b0:	f013 0f02 	tst.w	r3, #2	; 0x2
   195b4:	d012      	beq.n	195dc <restore_non_core_regs+0x38>
   195b6:	f100 0048 	add.w	r0, r0, #72	; 0x48
   195ba:	f000 facf 	bl	19b5c <__gnu_Unwind_Restore_VFP_D>
   195be:	6823      	ldr	r3, [r4, #0]
   195c0:	f013 0f04 	tst.w	r3, #4	; 0x4
   195c4:	d012      	beq.n	195ec <restore_non_core_regs+0x48>
   195c6:	f013 0f08 	tst.w	r3, #8	; 0x8
   195ca:	d017      	beq.n	195fc <restore_non_core_regs+0x58>
   195cc:	f013 0f10 	tst.w	r3, #16	; 0x10
   195d0:	d103      	bne.n	195da <restore_non_core_regs+0x36>
   195d2:	f504 700c 	add.w	r0, r4, #560	; 0x230
   195d6:	f000 fb15 	bl	19c04 <__gnu_Unwind_Restore_WMMXC>
   195da:	bd10      	pop	{r4, pc}
   195dc:	f100 0048 	add.w	r0, r0, #72	; 0x48
   195e0:	f000 fab4 	bl	19b4c <__gnu_Unwind_Restore_VFP>
   195e4:	6823      	ldr	r3, [r4, #0]
   195e6:	f013 0f04 	tst.w	r3, #4	; 0x4
   195ea:	d1ec      	bne.n	195c6 <restore_non_core_regs+0x22>
   195ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   195f0:	f000 fabc 	bl	19b6c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   195f4:	6823      	ldr	r3, [r4, #0]
   195f6:	f013 0f08 	tst.w	r3, #8	; 0x8
   195fa:	d1e7      	bne.n	195cc <restore_non_core_regs+0x28>
   195fc:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   19600:	f000 fabc 	bl	19b7c <__gnu_Unwind_Restore_WMMXD>
   19604:	6823      	ldr	r3, [r4, #0]
   19606:	e7e1      	b.n	195cc <restore_non_core_regs+0x28>

00019608 <__gnu_Unwind_Backtrace>:
   19608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1960c:	6bd3      	ldr	r3, [r2, #60]
   1960e:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
   19612:	6413      	str	r3, [r2, #64]
   19614:	f10d 0c04 	add.w	ip, sp, #4	; 0x4
   19618:	f102 0e04 	add.w	lr, r2, #4	; 0x4
   1961c:	4680      	mov	r8, r0
   1961e:	460f      	mov	r7, r1
   19620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   19624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19628:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1962c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   19634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19638:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   1963c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   19640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19644:	466e      	mov	r6, sp
   19646:	9300      	str	r3, [sp, #0]
   19648:	ad90      	add	r5, sp, #576
   1964a:	6c31      	ldr	r1, [r6, #64]
   1964c:	4628      	mov	r0, r5
   1964e:	f7ff ff41 	bl	194d4 <get_eit_entry>
   19652:	2800      	cmp	r0, #0
   19654:	d121      	bne.n	1969a <__gnu_Unwind_Backtrace+0x92>
   19656:	4668      	mov	r0, sp
   19658:	210c      	movs	r1, #12
   1965a:	462a      	mov	r2, r5
   1965c:	f7ff fd64 	bl	19128 <_Unwind_SetGR>
   19660:	4668      	mov	r0, sp
   19662:	4639      	mov	r1, r7
   19664:	47c0      	blx	r8
   19666:	b9c0      	cbnz	r0, 1969a <__gnu_Unwind_Backtrace+0x92>
   19668:	9b94      	ldr	r3, [sp, #592]
   1966a:	3008      	adds	r0, #8
   1966c:	4629      	mov	r1, r5
   1966e:	466a      	mov	r2, sp
   19670:	4798      	blx	r3
   19672:	f1b0 0309 	subs.w	r3, r0, #9	; 0x9
   19676:	bf18      	it	ne
   19678:	2301      	movne	r3, #1
   1967a:	2805      	cmp	r0, #5
   1967c:	bf0c      	ite	eq
   1967e:	2300      	moveq	r3, #0
   19680:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   19684:	4604      	mov	r4, r0
   19686:	2b00      	cmp	r3, #0
   19688:	d1df      	bne.n	1964a <__gnu_Unwind_Backtrace+0x42>
   1968a:	4668      	mov	r0, sp
   1968c:	f7ff ff8a 	bl	195a4 <restore_non_core_regs>
   19690:	4620      	mov	r0, r4
   19692:	f50d 7d26 	add.w	sp, sp, #664	; 0x298
   19696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1969a:	2409      	movs	r4, #9
   1969c:	e7f5      	b.n	1968a <__gnu_Unwind_Backtrace+0x82>
   1969e:	46c0      	nop			(mov r8, r8)

000196a0 <unwind_phase2_forced>:
   196a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196a4:	68c3      	ldr	r3, [r0, #12]
   196a6:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
   196aa:	b083      	sub	sp, #12
   196ac:	6984      	ldr	r4, [r0, #24]
   196ae:	9304      	str	r3, [sp, #16]
   196b0:	ab97      	add	r3, sp, #604
   196b2:	9303      	str	r3, [sp, #12]
   196b4:	9405      	str	r4, [sp, #20]
   196b6:	9c03      	ldr	r4, [sp, #12]
   196b8:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   196bc:	4606      	mov	r6, r0
   196be:	4693      	mov	fp, r2
   196c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   196c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   196c6:	46a6      	mov	lr, r4
   196c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   196cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   196d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   196d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   196d8:	af96      	add	r7, sp, #600
   196da:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   196de:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   196e2:	2300      	movs	r3, #0
   196e4:	603b      	str	r3, [r7, #0]
   196e6:	4698      	mov	r8, r3
   196e8:	f10d 0a18 	add.w	sl, sp, #24	; 0x18
   196ec:	6c39      	ldr	r1, [r7, #64]
   196ee:	4630      	mov	r0, r6
   196f0:	f7ff fef0 	bl	194d4 <get_eit_entry>
   196f4:	4605      	mov	r5, r0
   196f6:	4681      	mov	r9, r0
   196f8:	f1bb 0f00 	cmp.w	fp, #0	; 0x0
   196fc:	d125      	bne.n	1974a <unwind_phase2_forced+0xaa>
   196fe:	2409      	movs	r4, #9
   19700:	2d00      	cmp	r5, #0
   19702:	d027      	beq.n	19754 <unwind_phase2_forced+0xb4>
   19704:	6bbb      	ldr	r3, [r7, #56]
   19706:	f044 0410 	orr.w	r4, r4, #16	; 0x10
   1970a:	647b      	str	r3, [r7, #68]
   1970c:	9b05      	ldr	r3, [sp, #20]
   1970e:	4621      	mov	r1, r4
   19710:	9301      	str	r3, [sp, #4]
   19712:	9700      	str	r7, [sp, #0]
   19714:	2001      	movs	r0, #1
   19716:	4632      	mov	r2, r6
   19718:	4633      	mov	r3, r6
   1971a:	9c04      	ldr	r4, [sp, #16]
   1971c:	47a0      	blx	r4
   1971e:	b960      	cbnz	r0, 1973a <unwind_phase2_forced+0x9a>
   19720:	b96d      	cbnz	r5, 1973e <unwind_phase2_forced+0x9e>
   19722:	4638      	mov	r0, r7
   19724:	4651      	mov	r1, sl
   19726:	f44f 7210 	mov.w	r2, #576	; 0x240
   1972a:	f004 ff7b 	bl	1e624 <memcpy>
   1972e:	f1b8 0f08 	cmp.w	r8, #8	; 0x8
   19732:	d0db      	beq.n	196ec <unwind_phase2_forced+0x4c>
   19734:	f1b8 0f07 	cmp.w	r8, #7	; 0x7
   19738:	d01e      	beq.n	19778 <unwind_phase2_forced+0xd8>
   1973a:	f04f 0909 	mov.w	r9, #9	; 0x9
   1973e:	4648      	mov	r0, r9
   19740:	b027      	add	sp, #156
   19742:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   19746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1974a:	240a      	movs	r4, #10
   1974c:	f04f 0b00 	mov.w	fp, #0	; 0x0
   19750:	2d00      	cmp	r5, #0
   19752:	d1d7      	bne.n	19704 <unwind_phase2_forced+0x64>
   19754:	6c3b      	ldr	r3, [r7, #64]
   19756:	4639      	mov	r1, r7
   19758:	6173      	str	r3, [r6, #20]
   1975a:	f44f 7210 	mov.w	r2, #576	; 0x240
   1975e:	4650      	mov	r0, sl
   19760:	f004 ff60 	bl	1e624 <memcpy>
   19764:	6933      	ldr	r3, [r6, #16]
   19766:	4620      	mov	r0, r4
   19768:	4631      	mov	r1, r6
   1976a:	4652      	mov	r2, sl
   1976c:	4798      	blx	r3
   1976e:	f8da 3038 	ldr.w	r3, [sl, #56]
   19772:	4680      	mov	r8, r0
   19774:	647b      	str	r3, [r7, #68]
   19776:	e7c9      	b.n	1970c <unwind_phase2_forced+0x6c>
   19778:	a897      	add	r0, sp, #604
   1977a:	f000 f9db 	bl	19b34 <__restore_core_regs>
   1977e:	46c0      	nop			(mov r8, r8)

00019780 <__gnu_Unwind_ForcedUnwind>:
   19780:	b500      	push	{lr}
   19782:	60c1      	str	r1, [r0, #12]
   19784:	6182      	str	r2, [r0, #24]
   19786:	6bda      	ldr	r2, [r3, #60]
   19788:	b081      	sub	sp, #4
   1978a:	641a      	str	r2, [r3, #64]
   1978c:	4619      	mov	r1, r3
   1978e:	2200      	movs	r2, #0
   19790:	f7ff ff86 	bl	196a0 <unwind_phase2_forced>
   19794:	b001      	add	sp, #4
   19796:	bd00      	pop	{pc}

00019798 <unwind_phase2>:
   19798:	b570      	push	{r4, r5, r6, lr}
   1979a:	4605      	mov	r5, r0
   1979c:	460e      	mov	r6, r1
   1979e:	6c31      	ldr	r1, [r6, #64]
   197a0:	4628      	mov	r0, r5
   197a2:	f7ff fe97 	bl	194d4 <get_eit_entry>
   197a6:	b950      	cbnz	r0, 197be <unwind_phase2+0x26>
   197a8:	6c33      	ldr	r3, [r6, #64]
   197aa:	2001      	movs	r0, #1
   197ac:	616b      	str	r3, [r5, #20]
   197ae:	692c      	ldr	r4, [r5, #16]
   197b0:	4629      	mov	r1, r5
   197b2:	4632      	mov	r2, r6
   197b4:	47a0      	blx	r4
   197b6:	2808      	cmp	r0, #8
   197b8:	d0f1      	beq.n	1979e <unwind_phase2+0x6>
   197ba:	2807      	cmp	r0, #7
   197bc:	d001      	beq.n	197c2 <unwind_phase2+0x2a>
   197be:	f004 fa7d 	bl	1dcbc <abort>
   197c2:	1d30      	adds	r0, r6, #4
   197c4:	f000 f9b6 	bl	19b34 <__restore_core_regs>

000197c8 <__gnu_Unwind_RaiseException>:
   197c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   197ca:	6bcb      	ldr	r3, [r1, #60]
   197cc:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   197d0:	640b      	str	r3, [r1, #64]
   197d2:	f10d 0e04 	add.w	lr, sp, #4	; 0x4
   197d6:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   197da:	4605      	mov	r5, r0
   197dc:	460f      	mov	r7, r1
   197de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   197e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   197e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   197ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   197ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   197f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   197f6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   197fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   197fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19802:	466e      	mov	r6, sp
   19804:	9300      	str	r3, [sp, #0]
   19806:	6c31      	ldr	r1, [r6, #64]
   19808:	4628      	mov	r0, r5
   1980a:	f7ff fe63 	bl	194d4 <get_eit_entry>
   1980e:	b958      	cbnz	r0, 19828 <__gnu_Unwind_RaiseException+0x60>
   19810:	692b      	ldr	r3, [r5, #16]
   19812:	4629      	mov	r1, r5
   19814:	466a      	mov	r2, sp
   19816:	4798      	blx	r3
   19818:	2808      	cmp	r0, #8
   1981a:	4604      	mov	r4, r0
   1981c:	d0f3      	beq.n	19806 <__gnu_Unwind_RaiseException+0x3e>
   1981e:	4668      	mov	r0, sp
   19820:	f7ff fec0 	bl	195a4 <restore_non_core_regs>
   19824:	2c06      	cmp	r4, #6
   19826:	d003      	beq.n	19830 <__gnu_Unwind_RaiseException+0x68>
   19828:	2009      	movs	r0, #9
   1982a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   1982e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19830:	4628      	mov	r0, r5
   19832:	4639      	mov	r1, r7
   19834:	f7ff ffb0 	bl	19798 <unwind_phase2>

00019838 <__gnu_Unwind_Resume_or_Rethrow>:
   19838:	b500      	push	{lr}
   1983a:	68c3      	ldr	r3, [r0, #12]
   1983c:	b081      	sub	sp, #4
   1983e:	b133      	cbz	r3, 1984e <__gnu_Unwind_Resume_or_Rethrow+0x16>
   19840:	6bcb      	ldr	r3, [r1, #60]
   19842:	2200      	movs	r2, #0
   19844:	640b      	str	r3, [r1, #64]
   19846:	f7ff ff2b 	bl	196a0 <unwind_phase2_forced>
   1984a:	b001      	add	sp, #4
   1984c:	bd00      	pop	{pc}
   1984e:	f7ff ffbb 	bl	197c8 <__gnu_Unwind_RaiseException>
   19852:	e7fa      	b.n	1984a <__gnu_Unwind_Resume_or_Rethrow+0x12>

00019854 <__gnu_Unwind_Resume>:
   19854:	b530      	push	{r4, r5, lr}
   19856:	6943      	ldr	r3, [r0, #20]
   19858:	b081      	sub	sp, #4
   1985a:	640b      	str	r3, [r1, #64]
   1985c:	68c2      	ldr	r2, [r0, #12]
   1985e:	4604      	mov	r4, r0
   19860:	460d      	mov	r5, r1
   19862:	b98a      	cbnz	r2, 19888 <__gnu_Unwind_Resume+0x34>
   19864:	6903      	ldr	r3, [r0, #16]
   19866:	4621      	mov	r1, r4
   19868:	2002      	movs	r0, #2
   1986a:	462a      	mov	r2, r5
   1986c:	4798      	blx	r3
   1986e:	2807      	cmp	r0, #7
   19870:	d007      	beq.n	19882 <__gnu_Unwind_Resume+0x2e>
   19872:	2808      	cmp	r0, #8
   19874:	d001      	beq.n	1987a <__gnu_Unwind_Resume+0x26>
   19876:	f004 fa21 	bl	1dcbc <abort>
   1987a:	4620      	mov	r0, r4
   1987c:	4629      	mov	r1, r5
   1987e:	f7ff ff8b 	bl	19798 <unwind_phase2>
   19882:	1d28      	adds	r0, r5, #4
   19884:	f000 f956 	bl	19b34 <__restore_core_regs>
   19888:	2201      	movs	r2, #1
   1988a:	f7ff ff09 	bl	196a0 <unwind_phase2_forced>
   1988e:	f004 fa15 	bl	1dcbc <abort>
   19892:	46c0      	nop			(mov r8, r8)

00019894 <_Unwind_VRS_Pop>:
   19894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19898:	4614      	mov	r4, r2
   1989a:	b0e6      	sub	sp, #408
   1989c:	4605      	mov	r5, r0
   1989e:	461a      	mov	r2, r3
   198a0:	2904      	cmp	r1, #4
   198a2:	d80e      	bhi.n	198c2 <_Unwind_VRS_Pop+0x2e>
   198a4:	e8df f001 	tbb	[pc, r1]
   198a8:	03545638 	.word	0x03545638
   198ac:	0011      	.short	0x0011
   198ae:	2a03      	cmp	r2, #3
   198b0:	d107      	bne.n	198c2 <_Unwind_VRS_Pop+0x2e>
   198b2:	0c26      	lsrs	r6, r4, #16
   198b4:	0424      	lsls	r4, r4, #16
   198b6:	0c24      	lsrs	r4, r4, #16
   198b8:	eb04 0306 	add.w	r3, r4, r6
   198bc:	2b10      	cmp	r3, #16
   198be:	f240 80d9 	bls.w	19a74 <_Unwind_VRS_Pop+0x1e0>
   198c2:	2002      	movs	r0, #2
   198c4:	b066      	add	sp, #408
   198c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   198ca:	2c10      	cmp	r4, #16
   198cc:	bf94      	ite	ls
   198ce:	2300      	movls	r3, #0
   198d0:	2301      	movhi	r3, #1
   198d2:	2a00      	cmp	r2, #0
   198d4:	bf18      	it	ne
   198d6:	f043 0301 	orrne.w	r3, r3, #1	; 0x1
   198da:	2b00      	cmp	r3, #0
   198dc:	d1f1      	bne.n	198c2 <_Unwind_VRS_Pop+0x2e>
   198de:	6803      	ldr	r3, [r0, #0]
   198e0:	f013 0f10 	tst.w	r3, #16	; 0x10
   198e4:	f040 8101 	bne.w	19aea <_Unwind_VRS_Pop+0x256>
   198e8:	ae62      	add	r6, sp, #392
   198ea:	4630      	mov	r0, r6
   198ec:	f000 f994 	bl	19c18 <__gnu_Unwind_Save_WMMXC>
   198f0:	6ba9      	ldr	r1, [r5, #56]
   198f2:	2200      	movs	r2, #0
   198f4:	2001      	movs	r0, #1
   198f6:	fa10 f302 	lsls.w	r3, r0, r2
   198fa:	4223      	tst	r3, r4
   198fc:	bf1c      	itt	ne
   198fe:	f851 3b04 	ldrne.w	r3, [r1], #4
   19902:	f846 3022 	strne.w	r3, [r6, r2, lsl #2]
   19906:	3201      	adds	r2, #1
   19908:	2a04      	cmp	r2, #4
   1990a:	d1f4      	bne.n	198f6 <_Unwind_VRS_Pop+0x62>
   1990c:	4630      	mov	r0, r6
   1990e:	63a9      	str	r1, [r5, #56]
   19910:	f000 f978 	bl	19c04 <__gnu_Unwind_Restore_WMMXC>
   19914:	2000      	movs	r0, #0
   19916:	e7d5      	b.n	198c4 <_Unwind_VRS_Pop+0x30>
   19918:	2a00      	cmp	r2, #0
   1991a:	d1d2      	bne.n	198c2 <_Unwind_VRS_Pop+0x2e>
   1991c:	0420      	lsls	r0, r4, #16
   1991e:	f8d5 c038 	ldr.w	ip, [r5, #56]
   19922:	0c00      	lsrs	r0, r0, #16
   19924:	4611      	mov	r1, r2
   19926:	2401      	movs	r4, #1
   19928:	fa14 f301 	lsls.w	r3, r4, r1
   1992c:	4203      	tst	r3, r0
   1992e:	d004      	beq.n	1993a <_Unwind_VRS_Pop+0xa6>
   19930:	008b      	lsls	r3, r1, #2
   19932:	f85c 2b04 	ldr.w	r2, [ip], #4
   19936:	442b      	add	r3, r5
   19938:	605a      	str	r2, [r3, #4]
   1993a:	3101      	adds	r1, #1
   1993c:	2910      	cmp	r1, #16
   1993e:	d1f3      	bne.n	19928 <_Unwind_VRS_Pop+0x94>
   19940:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
   19944:	bf08      	it	eq
   19946:	f8c5 c038 	streq.w	ip, [r5, #56]
   1994a:	d0bb      	beq.n	198c4 <_Unwind_VRS_Pop+0x30>
   1994c:	2000      	movs	r0, #0
   1994e:	e7b9      	b.n	198c4 <_Unwind_VRS_Pop+0x30>
   19950:	2001      	movs	r0, #1
   19952:	e7b7      	b.n	198c4 <_Unwind_VRS_Pop+0x30>
   19954:	1f50      	subs	r0, r2, #5
   19956:	bf18      	it	ne
   19958:	2001      	movne	r0, #1
   1995a:	2a01      	cmp	r2, #1
   1995c:	bf0c      	ite	eq
   1995e:	2300      	moveq	r3, #0
   19960:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   19964:	2b00      	cmp	r3, #0
   19966:	d1ac      	bne.n	198c2 <_Unwind_VRS_Pop+0x2e>
   19968:	0c26      	lsrs	r6, r4, #16
   1996a:	0424      	lsls	r4, r4, #16
   1996c:	0c24      	lsrs	r4, r4, #16
   1996e:	eb04 0106 	add.w	r1, r4, r6
   19972:	2a01      	cmp	r2, #1
   19974:	bf0c      	ite	eq
   19976:	2310      	moveq	r3, #16
   19978:	2320      	movne	r3, #32
   1997a:	428b      	cmp	r3, r1
   1997c:	d3a1      	bcc.n	198c2 <_Unwind_VRS_Pop+0x2e>
   1997e:	2a01      	cmp	r2, #1
   19980:	bf14      	ite	ne
   19982:	f04f 0800 	movne.w	r8, #0	; 0x0
   19986:	f04f 0801 	moveq.w	r8, #1	; 0x1
   1998a:	2e0f      	cmp	r6, #15
   1998c:	bf94      	ite	ls
   1998e:	2300      	movls	r3, #0
   19990:	2301      	movhi	r3, #1
   19992:	ea18 0f03 	tst.w	r8, r3
   19996:	d194      	bne.n	198c2 <_Unwind_VRS_Pop+0x2e>
   19998:	2b00      	cmp	r3, #0
   1999a:	f040 808d 	bne.w	19ab8 <_Unwind_VRS_Pop+0x224>
   1999e:	2910      	cmp	r1, #16
   199a0:	bf98      	it	ls
   199a2:	461f      	movls	r7, r3
   199a4:	d908      	bls.n	199b8 <_Unwind_VRS_Pop+0x124>
   199a6:	f1a1 0710 	sub.w	r7, r1, #16	; 0x10
   199aa:	2f00      	cmp	r7, #0
   199ac:	bf0c      	ite	eq
   199ae:	2300      	moveq	r3, #0
   199b0:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   199b4:	2b00      	cmp	r3, #0
   199b6:	d184      	bne.n	198c2 <_Unwind_VRS_Pop+0x2e>
   199b8:	2e0f      	cmp	r6, #15
   199ba:	d810      	bhi.n	199de <_Unwind_VRS_Pop+0x14a>
   199bc:	682b      	ldr	r3, [r5, #0]
   199be:	f013 0f01 	tst.w	r3, #1	; 0x1
   199c2:	d00c      	beq.n	199de <_Unwind_VRS_Pop+0x14a>
   199c4:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   199c8:	2a05      	cmp	r2, #5
   199ca:	6029      	str	r1, [r5, #0]
   199cc:	f000 80a9 	beq.w	19b22 <_Unwind_VRS_Pop+0x28e>
   199d0:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   199d4:	4628      	mov	r0, r5
   199d6:	f840 3b48 	str.w	r3, [r0], #72
   199da:	f000 f8bb 	bl	19b54 <__gnu_Unwind_Save_VFP>
   199de:	2f00      	cmp	r7, #0
   199e0:	dd03      	ble.n	199ea <_Unwind_VRS_Pop+0x156>
   199e2:	682b      	ldr	r3, [r5, #0]
   199e4:	f013 0f04 	tst.w	r3, #4	; 0x4
   199e8:	d177      	bne.n	19ada <_Unwind_VRS_Pop+0x246>
   199ea:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   199ee:	f040 8094 	bne.w	19b1a <_Unwind_VRS_Pop+0x286>
   199f2:	2e0f      	cmp	r6, #15
   199f4:	d96b      	bls.n	19ace <_Unwind_VRS_Pop+0x23a>
   199f6:	2f00      	cmp	r7, #0
   199f8:	d160      	bne.n	19abc <_Unwind_VRS_Pop+0x228>
   199fa:	4622      	mov	r2, r4
   199fc:	6ba8      	ldr	r0, [r5, #56]
   199fe:	2a00      	cmp	r2, #0
   19a00:	4684      	mov	ip, r0
   19a02:	dd0f      	ble.n	19a24 <_Unwind_VRS_Pop+0x190>
   19a04:	0054      	lsls	r4, r2, #1
   19a06:	2100      	movs	r1, #0
   19a08:	00f2      	lsls	r2, r6, #3
   19a0a:	eb0d 0c02 	add.w	ip, sp, r2
   19a0e:	460a      	mov	r2, r1
   19a10:	5813      	ldr	r3, [r2, r0]
   19a12:	3101      	adds	r1, #1
   19a14:	f84c 3002 	str.w	r3, [ip, r2]
   19a18:	3204      	adds	r2, #4
   19a1a:	42a1      	cmp	r1, r4
   19a1c:	d1f8      	bne.n	19a10 <_Unwind_VRS_Pop+0x17c>
   19a1e:	008b      	lsls	r3, r1, #2
   19a20:	eb00 0c03 	add.w	ip, r0, r3
   19a24:	2f00      	cmp	r7, #0
   19a26:	dd13      	ble.n	19a50 <_Unwind_VRS_Pop+0x1bc>
   19a28:	2e10      	cmp	r6, #16
   19a2a:	bf2c      	ite	cs
   19a2c:	4633      	movcs	r3, r6
   19a2e:	2310      	movcc	r3, #16
   19a30:	3b10      	subs	r3, #16
   19a32:	00db      	lsls	r3, r3, #3
   19a34:	aa42      	add	r2, sp, #264
   19a36:	2000      	movs	r0, #0
   19a38:	007c      	lsls	r4, r7, #1
   19a3a:	18d2      	adds	r2, r2, r3
   19a3c:	4601      	mov	r1, r0
   19a3e:	f85c 3001 	ldr.w	r3, [ip, r1]
   19a42:	3001      	adds	r0, #1
   19a44:	5053      	str	r3, [r2, r1]
   19a46:	3104      	adds	r1, #4
   19a48:	42a0      	cmp	r0, r4
   19a4a:	d1f8      	bne.n	19a3e <_Unwind_VRS_Pop+0x1aa>
   19a4c:	0083      	lsls	r3, r0, #2
   19a4e:	449c      	add	ip, r3
   19a50:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   19a54:	d159      	bne.n	19b0a <_Unwind_VRS_Pop+0x276>
   19a56:	2e0f      	cmp	r6, #15
   19a58:	f8c5 c038 	str.w	ip, [r5, #56]
   19a5c:	d802      	bhi.n	19a64 <_Unwind_VRS_Pop+0x1d0>
   19a5e:	4668      	mov	r0, sp
   19a60:	f000 f87c 	bl	19b5c <__gnu_Unwind_Restore_VFP_D>
   19a64:	2f00      	cmp	r7, #0
   19a66:	f77f af71 	ble.w	1994c <_Unwind_VRS_Pop+0xb8>
   19a6a:	a842      	add	r0, sp, #264
   19a6c:	f000 f87e 	bl	19b6c <__gnu_Unwind_Restore_VFP_D_16_to_31>
   19a70:	2000      	movs	r0, #0
   19a72:	e727      	b.n	198c4 <_Unwind_VRS_Pop+0x30>
   19a74:	6803      	ldr	r3, [r0, #0]
   19a76:	f013 0f08 	tst.w	r3, #8	; 0x8
   19a7a:	d13e      	bne.n	19afa <_Unwind_VRS_Pop+0x266>
   19a7c:	af22      	add	r7, sp, #136
   19a7e:	4638      	mov	r0, r7
   19a80:	f000 f89e 	bl	19bc0 <__gnu_Unwind_Save_WMMXD>
   19a84:	6ba8      	ldr	r0, [r5, #56]
   19a86:	ea4f 0e44 	mov.w	lr, r4, lsl #1
   19a8a:	4603      	mov	r3, r0
   19a8c:	b174      	cbz	r4, 19aac <_Unwind_VRS_Pop+0x218>
   19a8e:	00f3      	lsls	r3, r6, #3
   19a90:	eb07 0c03 	add.w	ip, r7, r3
   19a94:	4671      	mov	r1, lr
   19a96:	2200      	movs	r2, #0
   19a98:	5813      	ldr	r3, [r2, r0]
   19a9a:	f84c 3002 	str.w	r3, [ip, r2]
   19a9e:	3204      	adds	r2, #4
   19aa0:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
   19aa4:	d1f8      	bne.n	19a98 <_Unwind_VRS_Pop+0x204>
   19aa6:	ea4f 038e 	mov.w	r3, lr, lsl #2
   19aaa:	4403      	add	r3, r0
   19aac:	4638      	mov	r0, r7
   19aae:	63ab      	str	r3, [r5, #56]
   19ab0:	f000 f864 	bl	19b7c <__gnu_Unwind_Restore_WMMXD>
   19ab4:	2000      	movs	r0, #0
   19ab6:	e705      	b.n	198c4 <_Unwind_VRS_Pop+0x30>
   19ab8:	4627      	mov	r7, r4
   19aba:	e776      	b.n	199aa <_Unwind_VRS_Pop+0x116>
   19abc:	a842      	add	r0, sp, #264
   19abe:	f000 f859 	bl	19b74 <__gnu_Unwind_Save_VFP_D_16_to_31>
   19ac2:	2f00      	cmp	r7, #0
   19ac4:	bfc8      	it	gt
   19ac6:	f1c6 0210 	rsbgt	r2, r6, #16	; 0x10
   19aca:	dc97      	bgt.n	199fc <_Unwind_VRS_Pop+0x168>
   19acc:	e795      	b.n	199fa <_Unwind_VRS_Pop+0x166>
   19ace:	4668      	mov	r0, sp
   19ad0:	f000 f848 	bl	19b64 <__gnu_Unwind_Save_VFP_D>
   19ad4:	2f00      	cmp	r7, #0
   19ad6:	d090      	beq.n	199fa <_Unwind_VRS_Pop+0x166>
   19ad8:	e7f0      	b.n	19abc <_Unwind_VRS_Pop+0x228>
   19ada:	f023 0304 	bic.w	r3, r3, #4	; 0x4
   19ade:	4628      	mov	r0, r5
   19ae0:	f840 3bd0 	str.w	r3, [r0], #208
   19ae4:	f000 f846 	bl	19b74 <__gnu_Unwind_Save_VFP_D_16_to_31>
   19ae8:	e77f      	b.n	199ea <_Unwind_VRS_Pop+0x156>
   19aea:	f023 0310 	bic.w	r3, r3, #16	; 0x10
   19aee:	6003      	str	r3, [r0, #0]
   19af0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   19af4:	f000 f890 	bl	19c18 <__gnu_Unwind_Save_WMMXC>
   19af8:	e6f6      	b.n	198e8 <_Unwind_VRS_Pop+0x54>
   19afa:	f023 0308 	bic.w	r3, r3, #8	; 0x8
   19afe:	6003      	str	r3, [r0, #0]
   19b00:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   19b04:	f000 f85c 	bl	19bc0 <__gnu_Unwind_Save_WMMXD>
   19b08:	e7b8      	b.n	19a7c <_Unwind_VRS_Pop+0x1e8>
   19b0a:	f10c 0304 	add.w	r3, ip, #4	; 0x4
   19b0e:	4668      	mov	r0, sp
   19b10:	63ab      	str	r3, [r5, #56]
   19b12:	f000 f81b 	bl	19b4c <__gnu_Unwind_Restore_VFP>
   19b16:	2000      	movs	r0, #0
   19b18:	e6d4      	b.n	198c4 <_Unwind_VRS_Pop+0x30>
   19b1a:	4668      	mov	r0, sp
   19b1c:	f000 f81a 	bl	19b54 <__gnu_Unwind_Save_VFP>
   19b20:	e7cf      	b.n	19ac2 <_Unwind_VRS_Pop+0x22e>
   19b22:	f041 0302 	orr.w	r3, r1, #2	; 0x2
   19b26:	4628      	mov	r0, r5
   19b28:	f840 3b48 	str.w	r3, [r0], #72
   19b2c:	f000 f81a 	bl	19b64 <__gnu_Unwind_Save_VFP_D>
   19b30:	e755      	b.n	199de <_Unwind_VRS_Pop+0x14a>
   19b32:	46c0      	nop			(mov r8, r8)

00019b34 <__restore_core_regs>:
   19b34:	f100 0134 	add.w	r1, r0, #52	; 0x34
   19b38:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   19b3c:	469c      	mov	ip, r3
   19b3e:	46a6      	mov	lr, r4
   19b40:	f84c 5d04 	str.w	r5, [ip, #-4]!
   19b44:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   19b48:	46e5      	mov	sp, ip
   19b4a:	bd00      	pop	{pc}

00019b4c <__gnu_Unwind_Restore_VFP>:
   19b4c:	ec90 0b21 	fldmiax	r0, {d0-d15}
   19b50:	4770      	bx	lr
   19b52:	46c0      	nop			(mov r8, r8)

00019b54 <__gnu_Unwind_Save_VFP>:
   19b54:	ec80 0b21 	fstmiax	r0, {d0-d15}
   19b58:	4770      	bx	lr
   19b5a:	46c0      	nop			(mov r8, r8)

00019b5c <__gnu_Unwind_Restore_VFP_D>:
   19b5c:	ec90 0b20 	vldmia	r0, {d0-d15}
   19b60:	4770      	bx	lr
   19b62:	46c0      	nop			(mov r8, r8)

00019b64 <__gnu_Unwind_Save_VFP_D>:
   19b64:	ec80 0b20 	vstmia	r0, {d0-d15}
   19b68:	4770      	bx	lr
   19b6a:	46c0      	nop			(mov r8, r8)

00019b6c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   19b6c:	ecd0 0b20 	vldmia	r0, {d16-d31}
   19b70:	4770      	bx	lr
   19b72:	46c0      	nop			(mov r8, r8)

00019b74 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   19b74:	ecc0 0b20 	vstmia	r0, {d16-d31}
   19b78:	4770      	bx	lr
   19b7a:	46c0      	nop			(mov r8, r8)

00019b7c <__gnu_Unwind_Restore_WMMXD>:
   19b7c:	ecf0 0102 	ldfe	f0, [r0], #8
   19b80:	ecf0 1102 	ldfe	f1, [r0], #8
   19b84:	ecf0 2102 	ldfe	f2, [r0], #8
   19b88:	ecf0 3102 	ldfe	f3, [r0], #8
   19b8c:	ecf0 4102 	ldfe	f4, [r0], #8
   19b90:	ecf0 5102 	ldfe	f5, [r0], #8
   19b94:	ecf0 6102 	ldfe	f6, [r0], #8
   19b98:	ecf0 7102 	ldfe	f7, [r0], #8
   19b9c:	ecf0 8102 	ldfp	f0, [r0], #8
   19ba0:	ecf0 9102 	ldfp	f1, [r0], #8
   19ba4:	ecf0 a102 	ldfp	f2, [r0], #8
   19ba8:	ecf0 b102 	ldfp	f3, [r0], #8
   19bac:	ecf0 c102 	ldfp	f4, [r0], #8
   19bb0:	ecf0 d102 	ldfp	f5, [r0], #8
   19bb4:	ecf0 e102 	ldfp	f6, [r0], #8
   19bb8:	ecf0 f102 	ldfp	f7, [r0], #8
   19bbc:	4770      	bx	lr
   19bbe:	46c0      	nop			(mov r8, r8)

00019bc0 <__gnu_Unwind_Save_WMMXD>:
   19bc0:	ece0 0102 	stfe	f0, [r0], #8
   19bc4:	ece0 1102 	stfe	f1, [r0], #8
   19bc8:	ece0 2102 	stfe	f2, [r0], #8
   19bcc:	ece0 3102 	stfe	f3, [r0], #8
   19bd0:	ece0 4102 	stfe	f4, [r0], #8
   19bd4:	ece0 5102 	stfe	f5, [r0], #8
   19bd8:	ece0 6102 	stfe	f6, [r0], #8
   19bdc:	ece0 7102 	stfe	f7, [r0], #8
   19be0:	ece0 8102 	stfp	f0, [r0], #8
   19be4:	ece0 9102 	stfp	f1, [r0], #8
   19be8:	ece0 a102 	stfp	f2, [r0], #8
   19bec:	ece0 b102 	stfp	f3, [r0], #8
   19bf0:	ece0 c102 	stfp	f4, [r0], #8
   19bf4:	ece0 d102 	stfp	f5, [r0], #8
   19bf8:	ece0 e102 	stfp	f6, [r0], #8
   19bfc:	ece0 f102 	stfp	f7, [r0], #8
   19c00:	4770      	bx	lr
   19c02:	46c0      	nop			(mov r8, r8)

00019c04 <__gnu_Unwind_Restore_WMMXC>:
   19c04:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   19c08:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   19c0c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   19c10:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   19c14:	4770      	bx	lr
   19c16:	46c0      	nop			(mov r8, r8)

00019c18 <__gnu_Unwind_Save_WMMXC>:
   19c18:	fca0 8101 	stc2	1, cr8, [r0], #4
   19c1c:	fca0 9101 	stc2	1, cr9, [r0], #4
   19c20:	fca0 a101 	stc2	1, cr10, [r0], #4
   19c24:	fca0 b101 	stc2	1, cr11, [r0], #4
   19c28:	4770      	bx	lr
   19c2a:	46c0      	nop			(mov r8, r8)

00019c2c <_Unwind_RaiseException>:
   19c2c:	46ec      	mov	ip, sp
   19c2e:	b500      	push	{lr}
   19c30:	e92d 5000 	stmdb	sp!, {ip, lr}
   19c34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19c38:	f04f 0300 	mov.w	r3, #0	; 0x0
   19c3c:	e92d 000c 	stmdb	sp!, {r2, r3}
   19c40:	a901      	add	r1, sp, #4
   19c42:	f7ff fdc1 	bl	197c8 <__gnu_Unwind_RaiseException>
   19c46:	f8dd e040 	ldr.w	lr, [sp, #64]
   19c4a:	b012      	add	sp, #72
   19c4c:	4770      	bx	lr
   19c4e:	46c0      	nop			(mov r8, r8)

00019c50 <_Unwind_Resume>:
   19c50:	46ec      	mov	ip, sp
   19c52:	b500      	push	{lr}
   19c54:	e92d 5000 	stmdb	sp!, {ip, lr}
   19c58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19c5c:	f04f 0300 	mov.w	r3, #0	; 0x0
   19c60:	e92d 000c 	stmdb	sp!, {r2, r3}
   19c64:	a901      	add	r1, sp, #4
   19c66:	f7ff fdf5 	bl	19854 <__gnu_Unwind_Resume>
   19c6a:	f8dd e040 	ldr.w	lr, [sp, #64]
   19c6e:	b012      	add	sp, #72
   19c70:	4770      	bx	lr
   19c72:	46c0      	nop			(mov r8, r8)

00019c74 <_Unwind_Resume_or_Rethrow>:
   19c74:	46ec      	mov	ip, sp
   19c76:	b500      	push	{lr}
   19c78:	e92d 5000 	stmdb	sp!, {ip, lr}
   19c7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19c80:	f04f 0300 	mov.w	r3, #0	; 0x0
   19c84:	e92d 000c 	stmdb	sp!, {r2, r3}
   19c88:	a901      	add	r1, sp, #4
   19c8a:	f7ff fdd5 	bl	19838 <__gnu_Unwind_Resume_or_Rethrow>
   19c8e:	f8dd e040 	ldr.w	lr, [sp, #64]
   19c92:	b012      	add	sp, #72
   19c94:	4770      	bx	lr
   19c96:	46c0      	nop			(mov r8, r8)

00019c98 <_Unwind_ForcedUnwind>:
   19c98:	46ec      	mov	ip, sp
   19c9a:	b500      	push	{lr}
   19c9c:	e92d 5000 	stmdb	sp!, {ip, lr}
   19ca0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19ca4:	f04f 0300 	mov.w	r3, #0	; 0x0
   19ca8:	e92d 000c 	stmdb	sp!, {r2, r3}
   19cac:	ab01      	add	r3, sp, #4
   19cae:	f7ff fd67 	bl	19780 <__gnu_Unwind_ForcedUnwind>
   19cb2:	f8dd e040 	ldr.w	lr, [sp, #64]
   19cb6:	b012      	add	sp, #72
   19cb8:	4770      	bx	lr
   19cba:	46c0      	nop			(mov r8, r8)

00019cbc <_Unwind_Backtrace>:
   19cbc:	46ec      	mov	ip, sp
   19cbe:	b500      	push	{lr}
   19cc0:	e92d 5000 	stmdb	sp!, {ip, lr}
   19cc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   19cc8:	f04f 0300 	mov.w	r3, #0	; 0x0
   19ccc:	e92d 000c 	stmdb	sp!, {r2, r3}
   19cd0:	aa01      	add	r2, sp, #4
   19cd2:	f7ff fc99 	bl	19608 <__gnu_Unwind_Backtrace>
   19cd6:	f8dd e040 	ldr.w	lr, [sp, #64]
   19cda:	b012      	add	sp, #72
   19cdc:	4770      	bx	lr
   19cde:	46c0      	nop			(mov r8, r8)

00019ce0 <next_unwind_byte>:
   19ce0:	7a03      	ldrb	r3, [r0, #8]
   19ce2:	b993      	cbnz	r3, 19d0a <next_unwind_byte+0x2a>
   19ce4:	7a42      	ldrb	r2, [r0, #9]
   19ce6:	b172      	cbz	r2, 19d06 <next_unwind_byte+0x26>
   19ce8:	3a01      	subs	r2, #1
   19cea:	6843      	ldr	r3, [r0, #4]
   19cec:	7242      	strb	r2, [r0, #9]
   19cee:	f853 2b04 	ldr.w	r2, [r3], #4
   19cf2:	6002      	str	r2, [r0, #0]
   19cf4:	2203      	movs	r2, #3
   19cf6:	6043      	str	r3, [r0, #4]
   19cf8:	7202      	strb	r2, [r0, #8]
   19cfa:	6803      	ldr	r3, [r0, #0]
   19cfc:	0e1a      	lsrs	r2, r3, #24
   19cfe:	021b      	lsls	r3, r3, #8
   19d00:	6003      	str	r3, [r0, #0]
   19d02:	4610      	mov	r0, r2
   19d04:	4770      	bx	lr
   19d06:	32b0      	adds	r2, #176
   19d08:	e7fb      	b.n	19d02 <next_unwind_byte+0x22>
   19d0a:	3b01      	subs	r3, #1
   19d0c:	7203      	strb	r3, [r0, #8]
   19d0e:	e7f4      	b.n	19cfa <next_unwind_byte+0x1a>

00019d10 <_Unwind_GetTextRelBase>:
   19d10:	b500      	push	{lr}
   19d12:	b081      	sub	sp, #4
   19d14:	f003 ffd2 	bl	1dcbc <abort>

00019d18 <_Unwind_GetDataRelBase>:
   19d18:	b500      	push	{lr}
   19d1a:	b081      	sub	sp, #4
   19d1c:	f003 ffce 	bl	1dcbc <abort>

00019d20 <_Unwind_GetGR>:
   19d20:	b500      	push	{lr}
   19d22:	b085      	sub	sp, #20
   19d24:	460a      	mov	r2, r1
   19d26:	ab03      	add	r3, sp, #12
   19d28:	2100      	movs	r1, #0
   19d2a:	9300      	str	r3, [sp, #0]
   19d2c:	460b      	mov	r3, r1
   19d2e:	f7ff f9b7 	bl	190a0 <_Unwind_VRS_Get>
   19d32:	9803      	ldr	r0, [sp, #12]
   19d34:	b005      	add	sp, #20
   19d36:	bd00      	pop	{pc}

00019d38 <unwind_UCB_from_context>:
   19d38:	b500      	push	{lr}
   19d3a:	210c      	movs	r1, #12
   19d3c:	b081      	sub	sp, #4
   19d3e:	f7ff ffef 	bl	19d20 <_Unwind_GetGR>
   19d42:	b001      	add	sp, #4
   19d44:	bd00      	pop	{pc}
   19d46:	46c0      	nop			(mov r8, r8)

00019d48 <_Unwind_GetLanguageSpecificData>:
   19d48:	b500      	push	{lr}
   19d4a:	b081      	sub	sp, #4
   19d4c:	f7ff fff4 	bl	19d38 <unwind_UCB_from_context>
   19d50:	6cc2      	ldr	r2, [r0, #76]
   19d52:	79d3      	ldrb	r3, [r2, #7]
   19d54:	1d10      	adds	r0, r2, #4
   19d56:	3301      	adds	r3, #1
   19d58:	009b      	lsls	r3, r3, #2
   19d5a:	18c0      	adds	r0, r0, r3
   19d5c:	b001      	add	sp, #4
   19d5e:	bd00      	pop	{pc}

00019d60 <_Unwind_GetRegionStart>:
   19d60:	b500      	push	{lr}
   19d62:	b081      	sub	sp, #4
   19d64:	f7ff ffe8 	bl	19d38 <unwind_UCB_from_context>
   19d68:	6c80      	ldr	r0, [r0, #72]
   19d6a:	b001      	add	sp, #4
   19d6c:	bd00      	pop	{pc}
   19d6e:	46c0      	nop			(mov r8, r8)

00019d70 <__gnu_unwind_execute>:
   19d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19d74:	b084      	sub	sp, #16
   19d76:	4606      	mov	r6, r0
   19d78:	460f      	mov	r7, r1
   19d7a:	f04f 0800 	mov.w	r8, #0	; 0x0
   19d7e:	f10d 0a0c 	add.w	sl, sp, #12	; 0xc
   19d82:	f44f 697f 	mov.w	r9, #4080	; 0xff0
   19d86:	4638      	mov	r0, r7
   19d88:	f7ff ffaa 	bl	19ce0 <next_unwind_byte>
   19d8c:	28b0      	cmp	r0, #176
   19d8e:	4604      	mov	r4, r0
   19d90:	d02a      	beq.n	19de8 <__gnu_unwind_execute+0x78>
   19d92:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   19d96:	d02f      	beq.n	19df8 <__gnu_unwind_execute+0x88>
   19d98:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   19d9c:	2b80      	cmp	r3, #128
   19d9e:	d05d      	beq.n	19e5c <__gnu_unwind_execute+0xec>
   19da0:	2b90      	cmp	r3, #144
   19da2:	d143      	bne.n	19e2c <__gnu_unwind_execute+0xbc>
   19da4:	f000 020f 	and.w	r2, r0, #15	; 0xf
   19da8:	2a0f      	cmp	r2, #15
   19daa:	bf14      	ite	ne
   19dac:	2300      	movne	r3, #0
   19dae:	2301      	moveq	r3, #1
   19db0:	2a0d      	cmp	r2, #13
   19db2:	bf14      	ite	ne
   19db4:	461c      	movne	r4, r3
   19db6:	f043 0401 	orreq.w	r4, r3, #1	; 0x1
   19dba:	2c00      	cmp	r4, #0
   19dbc:	d14c      	bne.n	19e58 <__gnu_unwind_execute+0xe8>
   19dbe:	4621      	mov	r1, r4
   19dc0:	4623      	mov	r3, r4
   19dc2:	4630      	mov	r0, r6
   19dc4:	f8cd a000 	str.w	sl, [sp]
   19dc8:	f7ff f96a 	bl	190a0 <_Unwind_VRS_Get>
   19dcc:	4621      	mov	r1, r4
   19dce:	220d      	movs	r2, #13
   19dd0:	4623      	mov	r3, r4
   19dd2:	4630      	mov	r0, r6
   19dd4:	f8cd a000 	str.w	sl, [sp]
   19dd8:	f7ff f98a 	bl	190f0 <_Unwind_VRS_Set>
   19ddc:	4638      	mov	r0, r7
   19dde:	f7ff ff7f 	bl	19ce0 <next_unwind_byte>
   19de2:	28b0      	cmp	r0, #176
   19de4:	4604      	mov	r4, r0
   19de6:	d1d4      	bne.n	19d92 <__gnu_unwind_execute+0x22>
   19de8:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   19dec:	f000 80c3 	beq.w	19f76 <__gnu_unwind_execute+0x206>
   19df0:	2000      	movs	r0, #0
   19df2:	b004      	add	sp, #16
   19df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19df8:	0083      	lsls	r3, r0, #2
   19dfa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   19dfe:	1d1d      	adds	r5, r3, #4
   19e00:	220d      	movs	r2, #13
   19e02:	4630      	mov	r0, r6
   19e04:	460b      	mov	r3, r1
   19e06:	f8cd a000 	str.w	sl, [sp]
   19e0a:	f7ff f949 	bl	190a0 <_Unwind_VRS_Get>
   19e0e:	f014 0f40 	tst.w	r4, #64	; 0x40
   19e12:	d03b      	beq.n	19e8c <__gnu_unwind_execute+0x11c>
   19e14:	9b03      	ldr	r3, [sp, #12]
   19e16:	1b5b      	subs	r3, r3, r5
   19e18:	9303      	str	r3, [sp, #12]
   19e1a:	2100      	movs	r1, #0
   19e1c:	4630      	mov	r0, r6
   19e1e:	220d      	movs	r2, #13
   19e20:	460b      	mov	r3, r1
   19e22:	f8cd a000 	str.w	sl, [sp]
   19e26:	f7ff f963 	bl	190f0 <_Unwind_VRS_Set>
   19e2a:	e7ac      	b.n	19d86 <__gnu_unwind_execute+0x16>
   19e2c:	2ba0      	cmp	r3, #160
   19e2e:	d131      	bne.n	19e94 <__gnu_unwind_execute+0x124>
   19e30:	ea6f 0300 	mvn.w	r3, r0
   19e34:	f003 0307 	and.w	r3, r3, #7	; 0x7
   19e38:	fa49 f303 	asr.w	r3, r9, r3
   19e3c:	f010 0f08 	tst.w	r0, #8	; 0x8
   19e40:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   19e44:	bf18      	it	ne
   19e46:	f442 4280 	orrne.w	r2, r2, #16384	; 0x4000
   19e4a:	2100      	movs	r1, #0
   19e4c:	4630      	mov	r0, r6
   19e4e:	460b      	mov	r3, r1
   19e50:	f7ff fd20 	bl	19894 <_Unwind_VRS_Pop>
   19e54:	2800      	cmp	r0, #0
   19e56:	d096      	beq.n	19d86 <__gnu_unwind_execute+0x16>
   19e58:	2009      	movs	r0, #9
   19e5a:	e7ca      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19e5c:	0204      	lsls	r4, r0, #8
   19e5e:	4638      	mov	r0, r7
   19e60:	f7ff ff3e 	bl	19ce0 <next_unwind_byte>
   19e64:	4320      	orrs	r0, r4
   19e66:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   19e6a:	d0f5      	beq.n	19e58 <__gnu_unwind_execute+0xe8>
   19e6c:	0104      	lsls	r4, r0, #4
   19e6e:	0422      	lsls	r2, r4, #16
   19e70:	2100      	movs	r1, #0
   19e72:	0c12      	lsrs	r2, r2, #16
   19e74:	4630      	mov	r0, r6
   19e76:	460b      	mov	r3, r1
   19e78:	f7ff fd0c 	bl	19894 <_Unwind_VRS_Pop>
   19e7c:	2800      	cmp	r0, #0
   19e7e:	d1eb      	bne.n	19e58 <__gnu_unwind_execute+0xe8>
   19e80:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   19e84:	bf18      	it	ne
   19e86:	f04f 0801 	movne.w	r8, #1	; 0x1
   19e8a:	e77c      	b.n	19d86 <__gnu_unwind_execute+0x16>
   19e8c:	9b03      	ldr	r3, [sp, #12]
   19e8e:	195b      	adds	r3, r3, r5
   19e90:	9303      	str	r3, [sp, #12]
   19e92:	e7c2      	b.n	19e1a <__gnu_unwind_execute+0xaa>
   19e94:	2bb0      	cmp	r3, #176
   19e96:	d014      	beq.n	19ec2 <__gnu_unwind_execute+0x152>
   19e98:	2bc0      	cmp	r3, #192
   19e9a:	d02c      	beq.n	19ef6 <__gnu_unwind_execute+0x186>
   19e9c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   19ea0:	2bd0      	cmp	r3, #208
   19ea2:	d1d9      	bne.n	19e58 <__gnu_unwind_execute+0xe8>
   19ea4:	f000 0207 	and.w	r2, r0, #7	; 0x7
   19ea8:	3201      	adds	r2, #1
   19eaa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   19eae:	4630      	mov	r0, r6
   19eb0:	2101      	movs	r1, #1
   19eb2:	3bcb      	subs	r3, #203
   19eb4:	f7ff fcee 	bl	19894 <_Unwind_VRS_Pop>
   19eb8:	2800      	cmp	r0, #0
   19eba:	f43f af64 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   19ebe:	2009      	movs	r0, #9
   19ec0:	e797      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19ec2:	28b1      	cmp	r0, #177
   19ec4:	d03a      	beq.n	19f3c <__gnu_unwind_execute+0x1cc>
   19ec6:	28b2      	cmp	r0, #178
   19ec8:	f000 808f 	beq.w	19fea <__gnu_unwind_execute+0x27a>
   19ecc:	28b3      	cmp	r0, #179
   19ece:	d047      	beq.n	19f60 <__gnu_unwind_execute+0x1f0>
   19ed0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   19ed4:	2bb4      	cmp	r3, #180
   19ed6:	d06e      	beq.n	19fb6 <__gnu_unwind_execute+0x246>
   19ed8:	f000 0207 	and.w	r2, r0, #7	; 0x7
   19edc:	3201      	adds	r2, #1
   19ede:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   19ee2:	2101      	movs	r1, #1
   19ee4:	4630      	mov	r0, r6
   19ee6:	460b      	mov	r3, r1
   19ee8:	f7ff fcd4 	bl	19894 <_Unwind_VRS_Pop>
   19eec:	2800      	cmp	r0, #0
   19eee:	f43f af4a 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   19ef2:	2009      	movs	r0, #9
   19ef4:	e77d      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19ef6:	28c6      	cmp	r0, #198
   19ef8:	d06c      	beq.n	19fd4 <__gnu_unwind_execute+0x264>
   19efa:	28c7      	cmp	r0, #199
   19efc:	f000 809a 	beq.w	1a034 <__gnu_unwind_execute+0x2c4>
   19f00:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   19f04:	2bc0      	cmp	r3, #192
   19f06:	d047      	beq.n	19f98 <__gnu_unwind_execute+0x228>
   19f08:	28c8      	cmp	r0, #200
   19f0a:	f000 80a7 	beq.w	1a05c <__gnu_unwind_execute+0x2ec>
   19f0e:	28c9      	cmp	r0, #201
   19f10:	d1a2      	bne.n	19e58 <__gnu_unwind_execute+0xe8>
   19f12:	4638      	mov	r0, r7
   19f14:	f7ff fee4 	bl	19ce0 <next_unwind_byte>
   19f18:	4602      	mov	r2, r0
   19f1a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   19f1e:	f002 020f 	and.w	r2, r2, #15	; 0xf
   19f22:	3201      	adds	r2, #1
   19f24:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   19f28:	4630      	mov	r0, r6
   19f2a:	2101      	movs	r1, #1
   19f2c:	2305      	movs	r3, #5
   19f2e:	f7ff fcb1 	bl	19894 <_Unwind_VRS_Pop>
   19f32:	2800      	cmp	r0, #0
   19f34:	f43f af27 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   19f38:	2009      	movs	r0, #9
   19f3a:	e75a      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19f3c:	4638      	mov	r0, r7
   19f3e:	f7ff fecf 	bl	19ce0 <next_unwind_byte>
   19f42:	4602      	mov	r2, r0
   19f44:	2800      	cmp	r0, #0
   19f46:	d087      	beq.n	19e58 <__gnu_unwind_execute+0xe8>
   19f48:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   19f4c:	d184      	bne.n	19e58 <__gnu_unwind_execute+0xe8>
   19f4e:	4630      	mov	r0, r6
   19f50:	460b      	mov	r3, r1
   19f52:	f7ff fc9f 	bl	19894 <_Unwind_VRS_Pop>
   19f56:	2800      	cmp	r0, #0
   19f58:	f43f af15 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   19f5c:	2009      	movs	r0, #9
   19f5e:	e748      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19f60:	4638      	mov	r0, r7
   19f62:	f7ff febd 	bl	19ce0 <next_unwind_byte>
   19f66:	f000 020f 	and.w	r2, r0, #15	; 0xf
   19f6a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   19f6e:	3201      	adds	r2, #1
   19f70:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   19f74:	e7b5      	b.n	19ee2 <__gnu_unwind_execute+0x172>
   19f76:	ac03      	add	r4, sp, #12
   19f78:	4641      	mov	r1, r8
   19f7a:	220e      	movs	r2, #14
   19f7c:	4643      	mov	r3, r8
   19f7e:	4630      	mov	r0, r6
   19f80:	9400      	str	r4, [sp, #0]
   19f82:	f7ff f88d 	bl	190a0 <_Unwind_VRS_Get>
   19f86:	4630      	mov	r0, r6
   19f88:	4641      	mov	r1, r8
   19f8a:	220f      	movs	r2, #15
   19f8c:	4643      	mov	r3, r8
   19f8e:	9400      	str	r4, [sp, #0]
   19f90:	f7ff f8ae 	bl	190f0 <_Unwind_VRS_Set>
   19f94:	4640      	mov	r0, r8
   19f96:	e72c      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19f98:	f000 020f 	and.w	r2, r0, #15	; 0xf
   19f9c:	3201      	adds	r2, #1
   19f9e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   19fa2:	2103      	movs	r1, #3
   19fa4:	4630      	mov	r0, r6
   19fa6:	460b      	mov	r3, r1
   19fa8:	f7ff fc74 	bl	19894 <_Unwind_VRS_Pop>
   19fac:	2800      	cmp	r0, #0
   19fae:	f43f aeea 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   19fb2:	2009      	movs	r0, #9
   19fb4:	e71d      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19fb6:	f000 0203 	and.w	r2, r0, #3	; 0x3
   19fba:	3201      	adds	r2, #1
   19fbc:	2102      	movs	r1, #2
   19fbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   19fc2:	4630      	mov	r0, r6
   19fc4:	460b      	mov	r3, r1
   19fc6:	f7ff fc65 	bl	19894 <_Unwind_VRS_Pop>
   19fca:	2800      	cmp	r0, #0
   19fcc:	f43f aedb 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   19fd0:	2009      	movs	r0, #9
   19fd2:	e70e      	b.n	19df2 <__gnu_unwind_execute+0x82>
   19fd4:	4638      	mov	r0, r7
   19fd6:	f7ff fe83 	bl	19ce0 <next_unwind_byte>
   19fda:	f000 020f 	and.w	r2, r0, #15	; 0xf
   19fde:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   19fe2:	3201      	adds	r2, #1
   19fe4:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
   19fe8:	e7db      	b.n	19fa2 <__gnu_unwind_execute+0x232>
   19fea:	2100      	movs	r1, #0
   19fec:	220d      	movs	r2, #13
   19fee:	460b      	mov	r3, r1
   19ff0:	4630      	mov	r0, r6
   19ff2:	f8cd a000 	str.w	sl, [sp]
   19ff6:	f7ff f853 	bl	190a0 <_Unwind_VRS_Get>
   19ffa:	4638      	mov	r0, r7
   19ffc:	f7ff fe70 	bl	19ce0 <next_unwind_byte>
   1a000:	f010 0f80 	tst.w	r0, #128	; 0x80
   1a004:	d032      	beq.n	1a06c <__gnu_unwind_execute+0x2fc>
   1a006:	2402      	movs	r4, #2
   1a008:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   1a00c:	40a2      	lsls	r2, r4
   1a00e:	9b03      	ldr	r3, [sp, #12]
   1a010:	4638      	mov	r0, r7
   1a012:	189b      	adds	r3, r3, r2
   1a014:	9303      	str	r3, [sp, #12]
   1a016:	f7ff fe63 	bl	19ce0 <next_unwind_byte>
   1a01a:	3407      	adds	r4, #7
   1a01c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1a020:	d1f2      	bne.n	1a008 <__gnu_unwind_execute+0x298>
   1a022:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1a026:	40a3      	lsls	r3, r4
   1a028:	9a03      	ldr	r2, [sp, #12]
   1a02a:	f502 7201 	add.w	r2, r2, #516	; 0x204
   1a02e:	18d2      	adds	r2, r2, r3
   1a030:	9203      	str	r2, [sp, #12]
   1a032:	e6f2      	b.n	19e1a <__gnu_unwind_execute+0xaa>
   1a034:	4638      	mov	r0, r7
   1a036:	f7ff fe53 	bl	19ce0 <next_unwind_byte>
   1a03a:	4602      	mov	r2, r0
   1a03c:	2800      	cmp	r0, #0
   1a03e:	f43f af0b 	beq.w	19e58 <__gnu_unwind_execute+0xe8>
   1a042:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1a046:	f47f af07 	bne.w	19e58 <__gnu_unwind_execute+0xe8>
   1a04a:	4630      	mov	r0, r6
   1a04c:	2104      	movs	r1, #4
   1a04e:	f7ff fc21 	bl	19894 <_Unwind_VRS_Pop>
   1a052:	2800      	cmp	r0, #0
   1a054:	f43f ae97 	beq.w	19d86 <__gnu_unwind_execute+0x16>
   1a058:	2009      	movs	r0, #9
   1a05a:	e6ca      	b.n	19df2 <__gnu_unwind_execute+0x82>
   1a05c:	4638      	mov	r0, r7
   1a05e:	f7ff fe3f 	bl	19ce0 <next_unwind_byte>
   1a062:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   1a066:	4602      	mov	r2, r0
   1a068:	3310      	adds	r3, #16
   1a06a:	e758      	b.n	19f1e <__gnu_unwind_execute+0x1ae>
   1a06c:	3cb0      	subs	r4, #176
   1a06e:	e7d8      	b.n	1a022 <__gnu_unwind_execute+0x2b2>

0001a070 <__gnu_unwind_frame>:
   1a070:	b500      	push	{lr}
   1a072:	f8d0 c04c 	ldr.w	ip, [r0, #76]
   1a076:	b085      	sub	sp, #20
   1a078:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1a07c:	f10c 0208 	add.w	r2, ip, #8	; 0x8
   1a080:	021b      	lsls	r3, r3, #8
   1a082:	9301      	str	r3, [sp, #4]
   1a084:	2303      	movs	r3, #3
   1a086:	f88d 300c 	strb.w	r3, [sp, #12]
   1a08a:	9202      	str	r2, [sp, #8]
   1a08c:	f89c 2007 	ldrb.w	r2, [ip, #7]
   1a090:	4608      	mov	r0, r1
   1a092:	a901      	add	r1, sp, #4
   1a094:	f88d 200d 	strb.w	r2, [sp, #13]
   1a098:	f7ff fe6a 	bl	19d70 <__gnu_unwind_execute>
   1a09c:	b005      	add	sp, #20
   1a09e:	bd00      	pop	{pc}

0001a0a0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
   1a0a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
   1a0a2:	e003      	b.n	1a0ac <LoopCopyDataInit>

0001a0a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
   1a0a4:	4b09      	ldr	r3, [pc, #36]	(1a0cc <LoopFillZerobss+0xc>)
  ldr  r3, [r3, r1]
   1a0a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
   1a0a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
   1a0aa:	3104      	adds	r1, #4

0001a0ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
   1a0ac:	4808      	ldr	r0, [pc, #32]	(1a0d0 <LoopFillZerobss+0x10>)
  ldr  r3, =_edata
   1a0ae:	4b09      	ldr	r3, [pc, #36]	(1a0d4 <LoopFillZerobss+0x14>)
  adds  r2, r0, r1
   1a0b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
   1a0b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
   1a0b4:	d3f6      	bcc.n	1a0a4 <CopyDataInit>
  ldr  r2, =_sbss
   1a0b6:	4a08      	ldr	r2, [pc, #32]	(1a0d8 <LoopFillZerobss+0x18>)
  b  LoopFillZerobss
   1a0b8:	e002      	b.n	1a0c0 <LoopFillZerobss>

0001a0ba <FillZerobss>:

/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
   1a0ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
   1a0bc:	f842 3b04 	str.w	r3, [r2], #4

0001a0c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
   1a0c0:	4b06      	ldr	r3, [pc, #24]	(1a0dc <LoopFillZerobss+0x1c>)
  cmp  r2, r3
   1a0c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
   1a0c4:	d3f9      	bcc.n	1a0ba <FillZerobss>
/* Call the application's entry point.*/
  bl  main
   1a0c6:	f7f4 f831 	bl	e12c <main>
  bx  lr    
   1a0ca:	4770      	bx	lr
   1a0cc:	00021850 	.word	0x00021850
   1a0d0:	20000000 	.word	0x20000000
   1a0d4:	20000034 	.word	0x20000034
   1a0d8:	20000548 	.word	0x20000548
   1a0dc:	20000678 	.word	0x20000678

0001a0e0 <ADC1_2_IRQHandler>:
 * @retval : None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
   1a0e0:	e7fe      	b.n	1a0e0 <ADC1_2_IRQHandler>
	...

0001a0e4 <_ZN6vectorIN11SharpSensor9SharpNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1a0e4:	b480      	push	{r7}
   1a0e6:	b083      	sub	sp, #12
   1a0e8:	af00      	add	r7, sp, #0
   1a0ea:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1a0ec:	687a      	ldr	r2, [r7, #4]
   1a0ee:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a0f2:	6093      	str	r3, [r2, #8]
}
   1a0f4:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1a0f8:	46bd      	mov	sp, r7
   1a0fa:	bc80      	pop	{r7}
   1a0fc:	4770      	bx	lr
   1a0fe:	46c0      	nop			(mov r8, r8)

0001a100 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1a100:	b480      	push	{r7}
   1a102:	b083      	sub	sp, #12
   1a104:	af00      	add	r7, sp, #0
   1a106:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1a108:	687a      	ldr	r2, [r7, #4]
   1a10a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a10e:	6093      	str	r3, [r2, #8]
}
   1a110:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1a114:	46bd      	mov	sp, r7
   1a116:	bc80      	pop	{r7}
   1a118:	4770      	bx	lr
   1a11a:	46c0      	nop			(mov r8, r8)

0001a11c <_ZN6vectorIN6Sensor12OutputSensorEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1a11c:	b480      	push	{r7}
   1a11e:	b083      	sub	sp, #12
   1a120:	af00      	add	r7, sp, #0
   1a122:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1a124:	687a      	ldr	r2, [r7, #4]
   1a126:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a12a:	6093      	str	r3, [r2, #8]
}
   1a12c:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1a130:	46bd      	mov	sp, r7
   1a132:	bc80      	pop	{r7}
   1a134:	4770      	bx	lr
   1a136:	46c0      	nop			(mov r8, r8)

0001a138 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE5resetEv>:
        delete[] oldTable;
    }
}

template <typename T>
void vector<T>::reset()
   1a138:	b480      	push	{r7}
   1a13a:	b083      	sub	sp, #12
   1a13c:	af00      	add	r7, sp, #0
   1a13e:	6078      	str	r0, [r7, #4]
{
    size = 0;
   1a140:	687a      	ldr	r2, [r7, #4]
   1a142:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a146:	6093      	str	r3, [r2, #8]
}
   1a148:	f107 070c 	add.w	r7, r7, #12	; 0xc
   1a14c:	46bd      	mov	sp, r7
   1a14e:	bc80      	pop	{r7}
   1a150:	4770      	bx	lr
   1a152:	46c0      	nop			(mov r8, r8)

0001a154 <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1a154:	b580      	push	{r7, lr}
   1a156:	b082      	sub	sp, #8
   1a158:	af00      	add	r7, sp, #0
   1a15a:	6078      	str	r0, [r7, #4]
   1a15c:	6039      	str	r1, [r7, #0]
   1a15e:	687a      	ldr	r2, [r7, #4]
   1a160:	4b0e      	ldr	r3, [pc, #56]	(1a19c <_ZN6vectorIN6Sensor12OutputSensorEEC1Ei+0x48>)
   1a162:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1a164:	687a      	ldr	r2, [r7, #4]
   1a166:	683b      	ldr	r3, [r7, #0]
   1a168:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1a16a:	683b      	ldr	r3, [r7, #0]
   1a16c:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1a170:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1a174:	ebc2 0303 	rsb	r3, r2, r3
   1a178:	4618      	mov	r0, r3
   1a17a:	f7f4 f985 	bl	e488 <_Znaj>
   1a17e:	4603      	mov	r3, r0
   1a180:	461a      	mov	r2, r3
   1a182:	687b      	ldr	r3, [r7, #4]
   1a184:	605a      	str	r2, [r3, #4]
    size = 0;
   1a186:	687a      	ldr	r2, [r7, #4]
   1a188:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a18c:	6093      	str	r3, [r2, #8]
   1a18e:	687b      	ldr	r3, [r7, #4]
}
   1a190:	4618      	mov	r0, r3
   1a192:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a196:	46bd      	mov	sp, r7
   1a198:	bd80      	pop	{r7, pc}
   1a19a:	46c0      	nop			(mov r8, r8)
   1a19c:	000202f0 	.word	0x000202f0

0001a1a0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1a1a0:	b580      	push	{r7, lr}
   1a1a2:	b082      	sub	sp, #8
   1a1a4:	af00      	add	r7, sp, #0
   1a1a6:	6078      	str	r0, [r7, #4]
   1a1a8:	6039      	str	r1, [r7, #0]
   1a1aa:	687a      	ldr	r2, [r7, #4]
   1a1ac:	4b0b      	ldr	r3, [pc, #44]	(1a1dc <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEEC1Ei+0x3c>)
   1a1ae:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1a1b0:	687a      	ldr	r2, [r7, #4]
   1a1b2:	683b      	ldr	r3, [r7, #0]
   1a1b4:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1a1b6:	683b      	ldr	r3, [r7, #0]
   1a1b8:	4618      	mov	r0, r3
   1a1ba:	f7f4 f965 	bl	e488 <_Znaj>
   1a1be:	4603      	mov	r3, r0
   1a1c0:	461a      	mov	r2, r3
   1a1c2:	687b      	ldr	r3, [r7, #4]
   1a1c4:	605a      	str	r2, [r3, #4]
    size = 0;
   1a1c6:	687a      	ldr	r2, [r7, #4]
   1a1c8:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a1cc:	6093      	str	r3, [r2, #8]
   1a1ce:	687b      	ldr	r3, [r7, #4]
}
   1a1d0:	4618      	mov	r0, r3
   1a1d2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a1d6:	46bd      	mov	sp, r7
   1a1d8:	bd80      	pop	{r7, pc}
   1a1da:	46c0      	nop			(mov r8, r8)
   1a1dc:	00020300 	.word	0x00020300

0001a1e0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei>:
    size = 0;
    table = 0x0;
}

template <typename T>
vector<T>::vector(int allocatedSize)
   1a1e0:	b580      	push	{r7, lr}
   1a1e2:	b082      	sub	sp, #8
   1a1e4:	af00      	add	r7, sp, #0
   1a1e6:	6078      	str	r0, [r7, #4]
   1a1e8:	6039      	str	r1, [r7, #0]
   1a1ea:	687a      	ldr	r2, [r7, #4]
   1a1ec:	4b0b      	ldr	r3, [pc, #44]	(1a21c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEEC1Ei+0x3c>)
   1a1ee:	6013      	str	r3, [r2, #0]
{
    this->allocatedSize = allocatedSize;
   1a1f0:	687a      	ldr	r2, [r7, #4]
   1a1f2:	683b      	ldr	r3, [r7, #0]
   1a1f4:	60d3      	str	r3, [r2, #12]
    table = new T[allocatedSize];
   1a1f6:	683b      	ldr	r3, [r7, #0]
   1a1f8:	4618      	mov	r0, r3
   1a1fa:	f7f4 f945 	bl	e488 <_Znaj>
   1a1fe:	4603      	mov	r3, r0
   1a200:	461a      	mov	r2, r3
   1a202:	687b      	ldr	r3, [r7, #4]
   1a204:	605a      	str	r2, [r3, #4]
    size = 0;
   1a206:	687a      	ldr	r2, [r7, #4]
   1a208:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a20c:	6093      	str	r3, [r2, #8]
   1a20e:	687b      	ldr	r3, [r7, #4]
}
   1a210:	4618      	mov	r0, r3
   1a212:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a216:	46bd      	mov	sp, r7
   1a218:	bd80      	pop	{r7, pc}
   1a21a:	46c0      	nop			(mov r8, r8)
   1a21c:	00020310 	.word	0x00020310

0001a220 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1a220:	b580      	push	{r7, lr}
   1a222:	b084      	sub	sp, #16
   1a224:	af00      	add	r7, sp, #0
   1a226:	6078      	str	r0, [r7, #4]
   1a228:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1a22a:	687b      	ldr	r3, [r7, #4]
   1a22c:	689a      	ldr	r2, [r3, #8]
   1a22e:	687b      	ldr	r3, [r7, #4]
   1a230:	68db      	ldr	r3, [r3, #12]
   1a232:	429a      	cmp	r2, r3
   1a234:	da0e      	bge.n	1a254 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1a236:	687b      	ldr	r3, [r7, #4]
   1a238:	685a      	ldr	r2, [r3, #4]
   1a23a:	687b      	ldr	r3, [r7, #4]
   1a23c:	689b      	ldr	r3, [r3, #8]
   1a23e:	441a      	add	r2, r3
   1a240:	683b      	ldr	r3, [r7, #0]
   1a242:	781b      	ldrb	r3, [r3, #0]
   1a244:	7013      	strb	r3, [r2, #0]
        size++;
   1a246:	687b      	ldr	r3, [r7, #4]
   1a248:	689b      	ldr	r3, [r3, #8]
   1a24a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a24e:	687b      	ldr	r3, [r7, #4]
   1a250:	609a      	str	r2, [r3, #8]
   1a252:	e03c      	b.n	1a2ce <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1a254:	687b      	ldr	r3, [r7, #4]
   1a256:	685b      	ldr	r3, [r3, #4]
   1a258:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1a25a:	687b      	ldr	r3, [r7, #4]
   1a25c:	68db      	ldr	r3, [r3, #12]
   1a25e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a262:	687b      	ldr	r3, [r7, #4]
   1a264:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1a266:	687b      	ldr	r3, [r7, #4]
   1a268:	68db      	ldr	r3, [r3, #12]
   1a26a:	4618      	mov	r0, r3
   1a26c:	f7f4 f90c 	bl	e488 <_Znaj>
   1a270:	4603      	mov	r3, r0
   1a272:	461a      	mov	r2, r3
   1a274:	687b      	ldr	r3, [r7, #4]
   1a276:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1a278:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a27c:	60fb      	str	r3, [r7, #12]
   1a27e:	e00d      	b.n	1a29c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1a280:	687b      	ldr	r3, [r7, #4]
   1a282:	685a      	ldr	r2, [r3, #4]
   1a284:	68fb      	ldr	r3, [r7, #12]
   1a286:	eb02 0103 	add.w	r1, r2, r3
   1a28a:	68fa      	ldr	r2, [r7, #12]
   1a28c:	68bb      	ldr	r3, [r7, #8]
   1a28e:	4413      	add	r3, r2
   1a290:	781b      	ldrb	r3, [r3, #0]
   1a292:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1a294:	68fb      	ldr	r3, [r7, #12]
   1a296:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1a29a:	60fb      	str	r3, [r7, #12]
   1a29c:	687b      	ldr	r3, [r7, #4]
   1a29e:	689a      	ldr	r2, [r3, #8]
   1a2a0:	68fb      	ldr	r3, [r7, #12]
   1a2a2:	429a      	cmp	r2, r3
   1a2a4:	dcec      	bgt.n	1a280 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1a2a6:	68bb      	ldr	r3, [r7, #8]
   1a2a8:	2b00      	cmp	r3, #0
   1a2aa:	d002      	beq.n	1a2b2 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEE9push_backERKS1_+0x92>
   1a2ac:	68b8      	ldr	r0, [r7, #8]
   1a2ae:	f7f4 f971 	bl	e594 <_ZdaPv>
        table[size] = value;
   1a2b2:	687b      	ldr	r3, [r7, #4]
   1a2b4:	685a      	ldr	r2, [r3, #4]
   1a2b6:	687b      	ldr	r3, [r7, #4]
   1a2b8:	689b      	ldr	r3, [r3, #8]
   1a2ba:	441a      	add	r2, r3
   1a2bc:	683b      	ldr	r3, [r7, #0]
   1a2be:	781b      	ldrb	r3, [r3, #0]
   1a2c0:	7013      	strb	r3, [r2, #0]
        size++;
   1a2c2:	687b      	ldr	r3, [r7, #4]
   1a2c4:	689b      	ldr	r3, [r3, #8]
   1a2c6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a2ca:	687b      	ldr	r3, [r7, #4]
   1a2cc:	609a      	str	r2, [r3, #8]
    }
}
   1a2ce:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1a2d2:	46bd      	mov	sp, r7
   1a2d4:	bd80      	pop	{r7, pc}
   1a2d6:	46c0      	nop			(mov r8, r8)

0001a2d8 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1a2d8:	b580      	push	{r7, lr}
   1a2da:	b084      	sub	sp, #16
   1a2dc:	af00      	add	r7, sp, #0
   1a2de:	6078      	str	r0, [r7, #4]
   1a2e0:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1a2e2:	687b      	ldr	r3, [r7, #4]
   1a2e4:	689a      	ldr	r2, [r3, #8]
   1a2e6:	687b      	ldr	r3, [r7, #4]
   1a2e8:	68db      	ldr	r3, [r3, #12]
   1a2ea:	429a      	cmp	r2, r3
   1a2ec:	da18      	bge.n	1a320 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x48>
    {
        table[size] = value;
   1a2ee:	687b      	ldr	r3, [r7, #4]
   1a2f0:	6859      	ldr	r1, [r3, #4]
   1a2f2:	687b      	ldr	r3, [r7, #4]
   1a2f4:	689b      	ldr	r3, [r3, #8]
   1a2f6:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1a2fa:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1a2fe:	ebc2 0303 	rsb	r3, r2, r3
   1a302:	440b      	add	r3, r1
   1a304:	683a      	ldr	r2, [r7, #0]
   1a306:	469c      	mov	ip, r3
   1a308:	4613      	mov	r3, r2
   1a30a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1a30e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1a312:	687b      	ldr	r3, [r7, #4]
   1a314:	689b      	ldr	r3, [r3, #8]
   1a316:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a31a:	687b      	ldr	r3, [r7, #4]
   1a31c:	609a      	str	r2, [r3, #8]
   1a31e:	e05a      	b.n	1a3d6 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xfe>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1a320:	687b      	ldr	r3, [r7, #4]
   1a322:	685b      	ldr	r3, [r3, #4]
   1a324:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1a326:	687b      	ldr	r3, [r7, #4]
   1a328:	68db      	ldr	r3, [r3, #12]
   1a32a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a32e:	687b      	ldr	r3, [r7, #4]
   1a330:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1a332:	687b      	ldr	r3, [r7, #4]
   1a334:	68db      	ldr	r3, [r3, #12]
   1a336:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1a33a:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1a33e:	ebc2 0303 	rsb	r3, r2, r3
   1a342:	4618      	mov	r0, r3
   1a344:	f7f4 f8a0 	bl	e488 <_Znaj>
   1a348:	4603      	mov	r3, r0
   1a34a:	461a      	mov	r2, r3
   1a34c:	687b      	ldr	r3, [r7, #4]
   1a34e:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1a350:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a354:	60fb      	str	r3, [r7, #12]
   1a356:	e01b      	b.n	1a390 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xb8>
            table[i] = oldTable[i];
   1a358:	687b      	ldr	r3, [r7, #4]
   1a35a:	6859      	ldr	r1, [r3, #4]
   1a35c:	68fb      	ldr	r3, [r7, #12]
   1a35e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1a362:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1a366:	ebc2 0303 	rsb	r3, r2, r3
   1a36a:	4419      	add	r1, r3
   1a36c:	68fb      	ldr	r3, [r7, #12]
   1a36e:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1a372:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1a376:	ebc2 0203 	rsb	r2, r2, r3
   1a37a:	68bb      	ldr	r3, [r7, #8]
   1a37c:	4413      	add	r3, r2
   1a37e:	468c      	mov	ip, r1
   1a380:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1a384:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1a388:	68fb      	ldr	r3, [r7, #12]
   1a38a:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1a38e:	60fb      	str	r3, [r7, #12]
   1a390:	687b      	ldr	r3, [r7, #4]
   1a392:	689a      	ldr	r2, [r3, #8]
   1a394:	68fb      	ldr	r3, [r7, #12]
   1a396:	429a      	cmp	r2, r3
   1a398:	dcde      	bgt.n	1a358 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0x80>
            table[i] = oldTable[i];
        delete[] oldTable;
   1a39a:	68bb      	ldr	r3, [r7, #8]
   1a39c:	2b00      	cmp	r3, #0
   1a39e:	d002      	beq.n	1a3a6 <_ZN6vectorIN6Sensor12OutputSensorEE9push_backERKS1_+0xce>
   1a3a0:	68b8      	ldr	r0, [r7, #8]
   1a3a2:	f7f4 f8f7 	bl	e594 <_ZdaPv>
        table[size] = value;
   1a3a6:	687b      	ldr	r3, [r7, #4]
   1a3a8:	6859      	ldr	r1, [r3, #4]
   1a3aa:	687b      	ldr	r3, [r7, #4]
   1a3ac:	689b      	ldr	r3, [r3, #8]
   1a3ae:	ea4f 0283 	mov.w	r2, r3, lsl #2
   1a3b2:	ea4f 0382 	mov.w	r3, r2, lsl #2
   1a3b6:	ebc2 0303 	rsb	r3, r2, r3
   1a3ba:	440b      	add	r3, r1
   1a3bc:	683a      	ldr	r2, [r7, #0]
   1a3be:	469c      	mov	ip, r3
   1a3c0:	4613      	mov	r3, r2
   1a3c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1a3c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        size++;
   1a3ca:	687b      	ldr	r3, [r7, #4]
   1a3cc:	689b      	ldr	r3, [r3, #8]
   1a3ce:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a3d2:	687b      	ldr	r3, [r7, #4]
   1a3d4:	609a      	str	r2, [r3, #8]
    }
}
   1a3d6:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1a3da:	46bd      	mov	sp, r7
   1a3dc:	bd80      	pop	{r7, pc}
   1a3de:	46c0      	nop			(mov r8, r8)

0001a3e0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1a3e0:	b580      	push	{r7, lr}
   1a3e2:	b084      	sub	sp, #16
   1a3e4:	af00      	add	r7, sp, #0
   1a3e6:	6078      	str	r0, [r7, #4]
   1a3e8:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1a3ea:	687b      	ldr	r3, [r7, #4]
   1a3ec:	689a      	ldr	r2, [r3, #8]
   1a3ee:	687b      	ldr	r3, [r7, #4]
   1a3f0:	68db      	ldr	r3, [r3, #12]
   1a3f2:	429a      	cmp	r2, r3
   1a3f4:	da0e      	bge.n	1a414 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1a3f6:	687b      	ldr	r3, [r7, #4]
   1a3f8:	685a      	ldr	r2, [r3, #4]
   1a3fa:	687b      	ldr	r3, [r7, #4]
   1a3fc:	689b      	ldr	r3, [r3, #8]
   1a3fe:	441a      	add	r2, r3
   1a400:	683b      	ldr	r3, [r7, #0]
   1a402:	781b      	ldrb	r3, [r3, #0]
   1a404:	7013      	strb	r3, [r2, #0]
        size++;
   1a406:	687b      	ldr	r3, [r7, #4]
   1a408:	689b      	ldr	r3, [r3, #8]
   1a40a:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a40e:	687b      	ldr	r3, [r7, #4]
   1a410:	609a      	str	r2, [r3, #8]
   1a412:	e03c      	b.n	1a48e <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1a414:	687b      	ldr	r3, [r7, #4]
   1a416:	685b      	ldr	r3, [r3, #4]
   1a418:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1a41a:	687b      	ldr	r3, [r7, #4]
   1a41c:	68db      	ldr	r3, [r3, #12]
   1a41e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a422:	687b      	ldr	r3, [r7, #4]
   1a424:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1a426:	687b      	ldr	r3, [r7, #4]
   1a428:	68db      	ldr	r3, [r3, #12]
   1a42a:	4618      	mov	r0, r3
   1a42c:	f7f4 f82c 	bl	e488 <_Znaj>
   1a430:	4603      	mov	r3, r0
   1a432:	461a      	mov	r2, r3
   1a434:	687b      	ldr	r3, [r7, #4]
   1a436:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1a438:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a43c:	60fb      	str	r3, [r7, #12]
   1a43e:	e00d      	b.n	1a45c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1a440:	687b      	ldr	r3, [r7, #4]
   1a442:	685a      	ldr	r2, [r3, #4]
   1a444:	68fb      	ldr	r3, [r7, #12]
   1a446:	eb02 0103 	add.w	r1, r2, r3
   1a44a:	68fa      	ldr	r2, [r7, #12]
   1a44c:	68bb      	ldr	r3, [r7, #8]
   1a44e:	4413      	add	r3, r2
   1a450:	781b      	ldrb	r3, [r3, #0]
   1a452:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1a454:	68fb      	ldr	r3, [r7, #12]
   1a456:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1a45a:	60fb      	str	r3, [r7, #12]
   1a45c:	687b      	ldr	r3, [r7, #4]
   1a45e:	689a      	ldr	r2, [r3, #8]
   1a460:	68fb      	ldr	r3, [r7, #12]
   1a462:	429a      	cmp	r2, r3
   1a464:	dcec      	bgt.n	1a440 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1a466:	68bb      	ldr	r3, [r7, #8]
   1a468:	2b00      	cmp	r3, #0
   1a46a:	d002      	beq.n	1a472 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEE9push_backERKS1_+0x92>
   1a46c:	68b8      	ldr	r0, [r7, #8]
   1a46e:	f7f4 f891 	bl	e594 <_ZdaPv>
        table[size] = value;
   1a472:	687b      	ldr	r3, [r7, #4]
   1a474:	685a      	ldr	r2, [r3, #4]
   1a476:	687b      	ldr	r3, [r7, #4]
   1a478:	689b      	ldr	r3, [r3, #8]
   1a47a:	441a      	add	r2, r3
   1a47c:	683b      	ldr	r3, [r7, #0]
   1a47e:	781b      	ldrb	r3, [r3, #0]
   1a480:	7013      	strb	r3, [r2, #0]
        size++;
   1a482:	687b      	ldr	r3, [r7, #4]
   1a484:	689b      	ldr	r3, [r3, #8]
   1a486:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a48a:	687b      	ldr	r3, [r7, #4]
   1a48c:	609a      	str	r2, [r3, #8]
    }
}
   1a48e:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1a492:	46bd      	mov	sp, r7
   1a494:	bd80      	pop	{r7, pc}
   1a496:	46c0      	nop			(mov r8, r8)

0001a498 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_>:
{
    delete[] table;
}

template <typename T>
void vector<T>::push_back(const T& value)
   1a498:	b580      	push	{r7, lr}
   1a49a:	b084      	sub	sp, #16
   1a49c:	af00      	add	r7, sp, #0
   1a49e:	6078      	str	r0, [r7, #4]
   1a4a0:	6039      	str	r1, [r7, #0]
{
    if (size < allocatedSize)
   1a4a2:	687b      	ldr	r3, [r7, #4]
   1a4a4:	689a      	ldr	r2, [r3, #8]
   1a4a6:	687b      	ldr	r3, [r7, #4]
   1a4a8:	68db      	ldr	r3, [r3, #12]
   1a4aa:	429a      	cmp	r2, r3
   1a4ac:	da0e      	bge.n	1a4cc <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x34>
    {
        table[size] = value;
   1a4ae:	687b      	ldr	r3, [r7, #4]
   1a4b0:	685a      	ldr	r2, [r3, #4]
   1a4b2:	687b      	ldr	r3, [r7, #4]
   1a4b4:	689b      	ldr	r3, [r3, #8]
   1a4b6:	441a      	add	r2, r3
   1a4b8:	683b      	ldr	r3, [r7, #0]
   1a4ba:	781b      	ldrb	r3, [r3, #0]
   1a4bc:	7013      	strb	r3, [r2, #0]
        size++;
   1a4be:	687b      	ldr	r3, [r7, #4]
   1a4c0:	689b      	ldr	r3, [r3, #8]
   1a4c2:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a4c6:	687b      	ldr	r3, [r7, #4]
   1a4c8:	609a      	str	r2, [r3, #8]
   1a4ca:	e03c      	b.n	1a546 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0xae>
    }
    else //table trop petite
    {
        T* oldTable = table;
   1a4cc:	687b      	ldr	r3, [r7, #4]
   1a4ce:	685b      	ldr	r3, [r3, #4]
   1a4d0:	60bb      	str	r3, [r7, #8]
        allocatedSize++;
   1a4d2:	687b      	ldr	r3, [r7, #4]
   1a4d4:	68db      	ldr	r3, [r3, #12]
   1a4d6:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a4da:	687b      	ldr	r3, [r7, #4]
   1a4dc:	60da      	str	r2, [r3, #12]
        table = new T[allocatedSize];
   1a4de:	687b      	ldr	r3, [r7, #4]
   1a4e0:	68db      	ldr	r3, [r3, #12]
   1a4e2:	4618      	mov	r0, r3
   1a4e4:	f7f3 ffd0 	bl	e488 <_Znaj>
   1a4e8:	4603      	mov	r3, r0
   1a4ea:	461a      	mov	r2, r3
   1a4ec:	687b      	ldr	r3, [r7, #4]
   1a4ee:	605a      	str	r2, [r3, #4]
        for (int i =0; i< size; i++)
   1a4f0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a4f4:	60fb      	str	r3, [r7, #12]
   1a4f6:	e00d      	b.n	1a514 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x7c>
            table[i] = oldTable[i];
   1a4f8:	687b      	ldr	r3, [r7, #4]
   1a4fa:	685a      	ldr	r2, [r3, #4]
   1a4fc:	68fb      	ldr	r3, [r7, #12]
   1a4fe:	eb02 0103 	add.w	r1, r2, r3
   1a502:	68fa      	ldr	r2, [r7, #12]
   1a504:	68bb      	ldr	r3, [r7, #8]
   1a506:	4413      	add	r3, r2
   1a508:	781b      	ldrb	r3, [r3, #0]
   1a50a:	700b      	strb	r3, [r1, #0]
    else //table trop petite
    {
        T* oldTable = table;
        allocatedSize++;
        table = new T[allocatedSize];
        for (int i =0; i< size; i++)
   1a50c:	68fb      	ldr	r3, [r7, #12]
   1a50e:	f103 0301 	add.w	r3, r3, #1	; 0x1
   1a512:	60fb      	str	r3, [r7, #12]
   1a514:	687b      	ldr	r3, [r7, #4]
   1a516:	689a      	ldr	r2, [r3, #8]
   1a518:	68fb      	ldr	r3, [r7, #12]
   1a51a:	429a      	cmp	r2, r3
   1a51c:	dcec      	bgt.n	1a4f8 <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x60>
            table[i] = oldTable[i];
        delete[] oldTable;
   1a51e:	68bb      	ldr	r3, [r7, #8]
   1a520:	2b00      	cmp	r3, #0
   1a522:	d002      	beq.n	1a52a <_ZN6vectorIN11SharpSensor9SharpNameEE9push_backERKS1_+0x92>
   1a524:	68b8      	ldr	r0, [r7, #8]
   1a526:	f7f4 f835 	bl	e594 <_ZdaPv>
        table[size] = value;
   1a52a:	687b      	ldr	r3, [r7, #4]
   1a52c:	685a      	ldr	r2, [r3, #4]
   1a52e:	687b      	ldr	r3, [r7, #4]
   1a530:	689b      	ldr	r3, [r3, #8]
   1a532:	441a      	add	r2, r3
   1a534:	683b      	ldr	r3, [r7, #0]
   1a536:	781b      	ldrb	r3, [r3, #0]
   1a538:	7013      	strb	r3, [r2, #0]
        size++;
   1a53a:	687b      	ldr	r3, [r7, #4]
   1a53c:	689b      	ldr	r3, [r3, #8]
   1a53e:	f103 0201 	add.w	r2, r3, #1	; 0x1
   1a542:	687b      	ldr	r3, [r7, #4]
   1a544:	609a      	str	r2, [r3, #8]
    }
}
   1a546:	f107 0710 	add.w	r7, r7, #16	; 0x10
   1a54a:	46bd      	mov	sp, r7
   1a54c:	bd80      	pop	{r7, pc}
   1a54e:	46c0      	nop			(mov r8, r8)

0001a550 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1a550:	b580      	push	{r7, lr}
   1a552:	b082      	sub	sp, #8
   1a554:	af00      	add	r7, sp, #0
   1a556:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1a558:	687a      	ldr	r2, [r7, #4]
   1a55a:	4b0c      	ldr	r3, [pc, #48]	(1a58c <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x3c>)
   1a55c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1a55e:	687b      	ldr	r3, [r7, #4]
   1a560:	685b      	ldr	r3, [r3, #4]
   1a562:	2b00      	cmp	r3, #0
   1a564:	d004      	beq.n	1a570 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x20>
   1a566:	687b      	ldr	r3, [r7, #4]
   1a568:	685b      	ldr	r3, [r3, #4]
   1a56a:	4618      	mov	r0, r3
   1a56c:	f7f4 f812 	bl	e594 <_ZdaPv>
   1a570:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a574:	b2db      	uxtb	r3, r3
   1a576:	2b00      	cmp	r3, #0
   1a578:	d002      	beq.n	1a580 <_ZN6vectorIN6Sensor12OutputSensorEED0Ev+0x30>
   1a57a:	6878      	ldr	r0, [r7, #4]
   1a57c:	f7f3 ff92 	bl	e4a4 <_ZdlPv>
   1a580:	687b      	ldr	r3, [r7, #4]
}
   1a582:	4618      	mov	r0, r3
   1a584:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a588:	46bd      	mov	sp, r7
   1a58a:	bd80      	pop	{r7, pc}
   1a58c:	000202f0 	.word	0x000202f0

0001a590 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1a590:	b580      	push	{r7, lr}
   1a592:	b082      	sub	sp, #8
   1a594:	af00      	add	r7, sp, #0
   1a596:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1a598:	687a      	ldr	r2, [r7, #4]
   1a59a:	4b0c      	ldr	r3, [pc, #48]	(1a5cc <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x3c>)
   1a59c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1a59e:	687b      	ldr	r3, [r7, #4]
   1a5a0:	685b      	ldr	r3, [r3, #4]
   1a5a2:	2b00      	cmp	r3, #0
   1a5a4:	d004      	beq.n	1a5b0 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x20>
   1a5a6:	687b      	ldr	r3, [r7, #4]
   1a5a8:	685b      	ldr	r3, [r3, #4]
   1a5aa:	4618      	mov	r0, r3
   1a5ac:	f7f3 fff2 	bl	e594 <_ZdaPv>
   1a5b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a5b4:	b2db      	uxtb	r3, r3
   1a5b6:	2b00      	cmp	r3, #0
   1a5b8:	d002      	beq.n	1a5c0 <_ZN6vectorIN6Sensor12OutputSensorEED1Ev+0x30>
   1a5ba:	6878      	ldr	r0, [r7, #4]
   1a5bc:	f7f3 ff72 	bl	e4a4 <_ZdlPv>
   1a5c0:	687b      	ldr	r3, [r7, #4]
}
   1a5c2:	4618      	mov	r0, r3
   1a5c4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a5c8:	46bd      	mov	sp, r7
   1a5ca:	bd80      	pop	{r7, pc}
   1a5cc:	000202f0 	.word	0x000202f0

0001a5d0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1a5d0:	b580      	push	{r7, lr}
   1a5d2:	b082      	sub	sp, #8
   1a5d4:	af00      	add	r7, sp, #0
   1a5d6:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1a5d8:	687a      	ldr	r2, [r7, #4]
   1a5da:	4b0c      	ldr	r3, [pc, #48]	(1a60c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x3c>)
   1a5dc:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1a5de:	687b      	ldr	r3, [r7, #4]
   1a5e0:	685b      	ldr	r3, [r3, #4]
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d004      	beq.n	1a5f0 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x20>
   1a5e6:	687b      	ldr	r3, [r7, #4]
   1a5e8:	685b      	ldr	r3, [r3, #4]
   1a5ea:	4618      	mov	r0, r3
   1a5ec:	f7f3 ffd2 	bl	e594 <_ZdaPv>
   1a5f0:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a5f4:	b2db      	uxtb	r3, r3
   1a5f6:	2b00      	cmp	r3, #0
   1a5f8:	d002      	beq.n	1a600 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED0Ev+0x30>
   1a5fa:	6878      	ldr	r0, [r7, #4]
   1a5fc:	f7f3 ff52 	bl	e4a4 <_ZdlPv>
   1a600:	687b      	ldr	r3, [r7, #4]
}
   1a602:	4618      	mov	r0, r3
   1a604:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a608:	46bd      	mov	sp, r7
   1a60a:	bd80      	pop	{r7, pc}
   1a60c:	00020300 	.word	0x00020300

0001a610 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1a610:	b580      	push	{r7, lr}
   1a612:	b082      	sub	sp, #8
   1a614:	af00      	add	r7, sp, #0
   1a616:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1a618:	687a      	ldr	r2, [r7, #4]
   1a61a:	4b0c      	ldr	r3, [pc, #48]	(1a64c <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x3c>)
   1a61c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1a61e:	687b      	ldr	r3, [r7, #4]
   1a620:	685b      	ldr	r3, [r3, #4]
   1a622:	2b00      	cmp	r3, #0
   1a624:	d004      	beq.n	1a630 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x20>
   1a626:	687b      	ldr	r3, [r7, #4]
   1a628:	685b      	ldr	r3, [r3, #4]
   1a62a:	4618      	mov	r0, r3
   1a62c:	f7f3 ffb2 	bl	e594 <_ZdaPv>
   1a630:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a634:	b2db      	uxtb	r3, r3
   1a636:	2b00      	cmp	r3, #0
   1a638:	d002      	beq.n	1a640 <_ZN6vectorIN17LimitSwitchSensor15LimitSwitchNameEED1Ev+0x30>
   1a63a:	6878      	ldr	r0, [r7, #4]
   1a63c:	f7f3 ff32 	bl	e4a4 <_ZdlPv>
   1a640:	687b      	ldr	r3, [r7, #4]
}
   1a642:	4618      	mov	r0, r3
   1a644:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a648:	46bd      	mov	sp, r7
   1a64a:	bd80      	pop	{r7, pc}
   1a64c:	00020300 	.word	0x00020300

0001a650 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1a650:	b580      	push	{r7, lr}
   1a652:	b082      	sub	sp, #8
   1a654:	af00      	add	r7, sp, #0
   1a656:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1a658:	687a      	ldr	r2, [r7, #4]
   1a65a:	4b0c      	ldr	r3, [pc, #48]	(1a68c <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x3c>)
   1a65c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1a65e:	687b      	ldr	r3, [r7, #4]
   1a660:	685b      	ldr	r3, [r3, #4]
   1a662:	2b00      	cmp	r3, #0
   1a664:	d004      	beq.n	1a670 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x20>
   1a666:	687b      	ldr	r3, [r7, #4]
   1a668:	685b      	ldr	r3, [r3, #4]
   1a66a:	4618      	mov	r0, r3
   1a66c:	f7f3 ff92 	bl	e594 <_ZdaPv>
   1a670:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a674:	b2db      	uxtb	r3, r3
   1a676:	2b00      	cmp	r3, #0
   1a678:	d002      	beq.n	1a680 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED0Ev+0x30>
   1a67a:	6878      	ldr	r0, [r7, #4]
   1a67c:	f7f3 ff12 	bl	e4a4 <_ZdlPv>
   1a680:	687b      	ldr	r3, [r7, #4]
}
   1a682:	4618      	mov	r0, r3
   1a684:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a688:	46bd      	mov	sp, r7
   1a68a:	bd80      	pop	{r7, pc}
   1a68c:	00020310 	.word	0x00020310

0001a690 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev>:
    table = new T[allocatedSize];
    size = 0;
}

template <typename T>
vector<T>::~vector()
   1a690:	b580      	push	{r7, lr}
   1a692:	b082      	sub	sp, #8
   1a694:	af00      	add	r7, sp, #0
   1a696:	6078      	str	r0, [r7, #4]
{
    delete[] table;
}
   1a698:	687a      	ldr	r2, [r7, #4]
   1a69a:	4b0c      	ldr	r3, [pc, #48]	(1a6cc <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x3c>)
   1a69c:	6013      	str	r3, [r2, #0]
}

template <typename T>
vector<T>::~vector()
{
    delete[] table;
   1a69e:	687b      	ldr	r3, [r7, #4]
   1a6a0:	685b      	ldr	r3, [r3, #4]
   1a6a2:	2b00      	cmp	r3, #0
   1a6a4:	d004      	beq.n	1a6b0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x20>
   1a6a6:	687b      	ldr	r3, [r7, #4]
   1a6a8:	685b      	ldr	r3, [r3, #4]
   1a6aa:	4618      	mov	r0, r3
   1a6ac:	f7f3 ff72 	bl	e594 <_ZdaPv>
   1a6b0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a6b4:	b2db      	uxtb	r3, r3
   1a6b6:	2b00      	cmp	r3, #0
   1a6b8:	d002      	beq.n	1a6c0 <_ZN6vectorIN18LigthBarrierSensor16LigthBarrierNameEED1Ev+0x30>
   1a6ba:	6878      	ldr	r0, [r7, #4]
   1a6bc:	f7f3 fef2 	bl	e4a4 <_ZdlPv>
   1a6c0:	687b      	ldr	r3, [r7, #4]
}
   1a6c2:	4618      	mov	r0, r3
   1a6c4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a6c8:	46bd      	mov	sp, r7
   1a6ca:	bd80      	pop	{r7, pc}
   1a6cc:	00020310 	.word	0x00020310

0001a6d0 <_ZN18CommandAllerEnArcAD0Ev>:
    ////////////////////////////////
    //    CommandAllerEnArcA      //
    ////////////////////////////////

class CommandAllerEnArcA : public Command
{
   1a6d0:	b580      	push	{r7, lr}
   1a6d2:	b082      	sub	sp, #8
   1a6d4:	af00      	add	r7, sp, #0
   1a6d6:	6078      	str	r0, [r7, #4]
   1a6d8:	687a      	ldr	r2, [r7, #4]
   1a6da:	4b0a      	ldr	r3, [pc, #40]	(1a704 <_ZN18CommandAllerEnArcAD0Ev+0x34>)
   1a6dc:	6013      	str	r3, [r2, #0]
   1a6de:	687b      	ldr	r3, [r7, #4]
   1a6e0:	4618      	mov	r0, r3
   1a6e2:	f7ed fb79 	bl	7dd8 <_ZN7CommandD2Ev>
   1a6e6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a6ea:	b2db      	uxtb	r3, r3
   1a6ec:	2b00      	cmp	r3, #0
   1a6ee:	d002      	beq.n	1a6f6 <_ZN18CommandAllerEnArcAD0Ev+0x26>
   1a6f0:	6878      	ldr	r0, [r7, #4]
   1a6f2:	f7f3 fed7 	bl	e4a4 <_ZdlPv>
   1a6f6:	687b      	ldr	r3, [r7, #4]
   1a6f8:	4618      	mov	r0, r3
   1a6fa:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a6fe:	46bd      	mov	sp, r7
   1a700:	bd80      	pop	{r7, pc}
   1a702:	46c0      	nop			(mov r8, r8)
   1a704:	0001fa88 	.word	0x0001fa88

0001a708 <_ZN18CommandAllerEnArcAD1Ev>:
   1a708:	b580      	push	{r7, lr}
   1a70a:	b082      	sub	sp, #8
   1a70c:	af00      	add	r7, sp, #0
   1a70e:	6078      	str	r0, [r7, #4]
   1a710:	687a      	ldr	r2, [r7, #4]
   1a712:	4b0a      	ldr	r3, [pc, #40]	(1a73c <_ZN18CommandAllerEnArcAD1Ev+0x34>)
   1a714:	6013      	str	r3, [r2, #0]
   1a716:	687b      	ldr	r3, [r7, #4]
   1a718:	4618      	mov	r0, r3
   1a71a:	f7ed fb5d 	bl	7dd8 <_ZN7CommandD2Ev>
   1a71e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a722:	b2db      	uxtb	r3, r3
   1a724:	2b00      	cmp	r3, #0
   1a726:	d002      	beq.n	1a72e <_ZN18CommandAllerEnArcAD1Ev+0x26>
   1a728:	6878      	ldr	r0, [r7, #4]
   1a72a:	f7f3 febb 	bl	e4a4 <_ZdlPv>
   1a72e:	687b      	ldr	r3, [r7, #4]
   1a730:	4618      	mov	r0, r3
   1a732:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a736:	46bd      	mov	sp, r7
   1a738:	bd80      	pop	{r7, pc}
   1a73a:	46c0      	nop			(mov r8, r8)
   1a73c:	0001fa88 	.word	0x0001fa88

0001a740 <_ZN13CommandAllerAD0Ev>:
    ////////////////////////////////
    //       CommandAllerA        //
    ////////////////////////////////

class CommandAllerA : public Command
{
   1a740:	b580      	push	{r7, lr}
   1a742:	b082      	sub	sp, #8
   1a744:	af00      	add	r7, sp, #0
   1a746:	6078      	str	r0, [r7, #4]
   1a748:	687a      	ldr	r2, [r7, #4]
   1a74a:	4b0a      	ldr	r3, [pc, #40]	(1a774 <_ZN13CommandAllerAD0Ev+0x34>)
   1a74c:	6013      	str	r3, [r2, #0]
   1a74e:	687b      	ldr	r3, [r7, #4]
   1a750:	4618      	mov	r0, r3
   1a752:	f7ed fb41 	bl	7dd8 <_ZN7CommandD2Ev>
   1a756:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a75a:	b2db      	uxtb	r3, r3
   1a75c:	2b00      	cmp	r3, #0
   1a75e:	d002      	beq.n	1a766 <_ZN13CommandAllerAD0Ev+0x26>
   1a760:	6878      	ldr	r0, [r7, #4]
   1a762:	f7f3 fe9f 	bl	e4a4 <_ZdlPv>
   1a766:	687b      	ldr	r3, [r7, #4]
   1a768:	4618      	mov	r0, r3
   1a76a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a76e:	46bd      	mov	sp, r7
   1a770:	bd80      	pop	{r7, pc}
   1a772:	46c0      	nop			(mov r8, r8)
   1a774:	0001fa60 	.word	0x0001fa60

0001a778 <_ZN13CommandAllerAD1Ev>:
   1a778:	b580      	push	{r7, lr}
   1a77a:	b082      	sub	sp, #8
   1a77c:	af00      	add	r7, sp, #0
   1a77e:	6078      	str	r0, [r7, #4]
   1a780:	687a      	ldr	r2, [r7, #4]
   1a782:	4b0a      	ldr	r3, [pc, #40]	(1a7ac <_ZN13CommandAllerAD1Ev+0x34>)
   1a784:	6013      	str	r3, [r2, #0]
   1a786:	687b      	ldr	r3, [r7, #4]
   1a788:	4618      	mov	r0, r3
   1a78a:	f7ed fb25 	bl	7dd8 <_ZN7CommandD2Ev>
   1a78e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a792:	b2db      	uxtb	r3, r3
   1a794:	2b00      	cmp	r3, #0
   1a796:	d002      	beq.n	1a79e <_ZN13CommandAllerAD1Ev+0x26>
   1a798:	6878      	ldr	r0, [r7, #4]
   1a79a:	f7f3 fe83 	bl	e4a4 <_ZdlPv>
   1a79e:	687b      	ldr	r3, [r7, #4]
   1a7a0:	4618      	mov	r0, r3
   1a7a2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a7a6:	46bd      	mov	sp, r7
   1a7a8:	bd80      	pop	{r7, pc}
   1a7aa:	46c0      	nop			(mov r8, r8)
   1a7ac:	0001fa60 	.word	0x0001fa60

0001a7b0 <_ZN18CommandTournerVersD0Ev>:
    ////////////////////////////////
    //    CommandTournerVers      //
    ////////////////////////////////

class CommandTournerVers : public Command
{
   1a7b0:	b580      	push	{r7, lr}
   1a7b2:	b082      	sub	sp, #8
   1a7b4:	af00      	add	r7, sp, #0
   1a7b6:	6078      	str	r0, [r7, #4]
   1a7b8:	687a      	ldr	r2, [r7, #4]
   1a7ba:	4b0a      	ldr	r3, [pc, #40]	(1a7e4 <_ZN18CommandTournerVersD0Ev+0x34>)
   1a7bc:	6013      	str	r3, [r2, #0]
   1a7be:	687b      	ldr	r3, [r7, #4]
   1a7c0:	4618      	mov	r0, r3
   1a7c2:	f7ed fb09 	bl	7dd8 <_ZN7CommandD2Ev>
   1a7c6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a7ca:	b2db      	uxtb	r3, r3
   1a7cc:	2b00      	cmp	r3, #0
   1a7ce:	d002      	beq.n	1a7d6 <_ZN18CommandTournerVersD0Ev+0x26>
   1a7d0:	6878      	ldr	r0, [r7, #4]
   1a7d2:	f7f3 fe67 	bl	e4a4 <_ZdlPv>
   1a7d6:	687b      	ldr	r3, [r7, #4]
   1a7d8:	4618      	mov	r0, r3
   1a7da:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a7de:	46bd      	mov	sp, r7
   1a7e0:	bd80      	pop	{r7, pc}
   1a7e2:	46c0      	nop			(mov r8, r8)
   1a7e4:	0001fa38 	.word	0x0001fa38

0001a7e8 <_ZN18CommandTournerVersD1Ev>:
   1a7e8:	b580      	push	{r7, lr}
   1a7ea:	b082      	sub	sp, #8
   1a7ec:	af00      	add	r7, sp, #0
   1a7ee:	6078      	str	r0, [r7, #4]
   1a7f0:	687a      	ldr	r2, [r7, #4]
   1a7f2:	4b0a      	ldr	r3, [pc, #40]	(1a81c <_ZN18CommandTournerVersD1Ev+0x34>)
   1a7f4:	6013      	str	r3, [r2, #0]
   1a7f6:	687b      	ldr	r3, [r7, #4]
   1a7f8:	4618      	mov	r0, r3
   1a7fa:	f7ed faed 	bl	7dd8 <_ZN7CommandD2Ev>
   1a7fe:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a802:	b2db      	uxtb	r3, r3
   1a804:	2b00      	cmp	r3, #0
   1a806:	d002      	beq.n	1a80e <_ZN18CommandTournerVersD1Ev+0x26>
   1a808:	6878      	ldr	r0, [r7, #4]
   1a80a:	f7f3 fe4b 	bl	e4a4 <_ZdlPv>
   1a80e:	687b      	ldr	r3, [r7, #4]
   1a810:	4618      	mov	r0, r3
   1a812:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a816:	46bd      	mov	sp, r7
   1a818:	bd80      	pop	{r7, pc}
   1a81a:	46c0      	nop			(mov r8, r8)
   1a81c:	0001fa38 	.word	0x0001fa38

0001a820 <_ZN13CommandVirageD0Ev>:

// fait un virage d'un certain angle à la vitesse max suivant un certain rayon de courbure
// arrive avec un certaine vitesse de fin
// marche que vers l'avant
class CommandVirage : public Command
{
   1a820:	b580      	push	{r7, lr}
   1a822:	b082      	sub	sp, #8
   1a824:	af00      	add	r7, sp, #0
   1a826:	6078      	str	r0, [r7, #4]
   1a828:	687a      	ldr	r2, [r7, #4]
   1a82a:	4b0a      	ldr	r3, [pc, #40]	(1a854 <_ZN13CommandVirageD0Ev+0x34>)
   1a82c:	6013      	str	r3, [r2, #0]
   1a82e:	687b      	ldr	r3, [r7, #4]
   1a830:	4618      	mov	r0, r3
   1a832:	f7ed fad1 	bl	7dd8 <_ZN7CommandD2Ev>
   1a836:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a83a:	b2db      	uxtb	r3, r3
   1a83c:	2b00      	cmp	r3, #0
   1a83e:	d002      	beq.n	1a846 <_ZN13CommandVirageD0Ev+0x26>
   1a840:	6878      	ldr	r0, [r7, #4]
   1a842:	f7f3 fe2f 	bl	e4a4 <_ZdlPv>
   1a846:	687b      	ldr	r3, [r7, #4]
   1a848:	4618      	mov	r0, r3
   1a84a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a84e:	46bd      	mov	sp, r7
   1a850:	bd80      	pop	{r7, pc}
   1a852:	46c0      	nop			(mov r8, r8)
   1a854:	0001fa10 	.word	0x0001fa10

0001a858 <_ZN13CommandVirageD1Ev>:
   1a858:	b580      	push	{r7, lr}
   1a85a:	b082      	sub	sp, #8
   1a85c:	af00      	add	r7, sp, #0
   1a85e:	6078      	str	r0, [r7, #4]
   1a860:	687a      	ldr	r2, [r7, #4]
   1a862:	4b0a      	ldr	r3, [pc, #40]	(1a88c <_ZN13CommandVirageD1Ev+0x34>)
   1a864:	6013      	str	r3, [r2, #0]
   1a866:	687b      	ldr	r3, [r7, #4]
   1a868:	4618      	mov	r0, r3
   1a86a:	f7ed fab5 	bl	7dd8 <_ZN7CommandD2Ev>
   1a86e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a872:	b2db      	uxtb	r3, r3
   1a874:	2b00      	cmp	r3, #0
   1a876:	d002      	beq.n	1a87e <_ZN13CommandVirageD1Ev+0x26>
   1a878:	6878      	ldr	r0, [r7, #4]
   1a87a:	f7f3 fe13 	bl	e4a4 <_ZdlPv>
   1a87e:	687b      	ldr	r3, [r7, #4]
   1a880:	4618      	mov	r0, r3
   1a882:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a886:	46bd      	mov	sp, r7
   1a888:	bd80      	pop	{r7, pc}
   1a88a:	46c0      	nop			(mov r8, r8)
   1a88c:	0001fa10 	.word	0x0001fa10

0001a890 <_ZN15CommandAttendreD0Ev>:
    ////////////////////////////////
    //      CommandAttendre       //
    ////////////////////////////////

class CommandAttendre : public Command
{
   1a890:	b580      	push	{r7, lr}
   1a892:	b082      	sub	sp, #8
   1a894:	af00      	add	r7, sp, #0
   1a896:	6078      	str	r0, [r7, #4]
   1a898:	687a      	ldr	r2, [r7, #4]
   1a89a:	4b0a      	ldr	r3, [pc, #40]	(1a8c4 <_ZN15CommandAttendreD0Ev+0x34>)
   1a89c:	6013      	str	r3, [r2, #0]
   1a89e:	687b      	ldr	r3, [r7, #4]
   1a8a0:	4618      	mov	r0, r3
   1a8a2:	f7ed fa99 	bl	7dd8 <_ZN7CommandD2Ev>
   1a8a6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a8aa:	b2db      	uxtb	r3, r3
   1a8ac:	2b00      	cmp	r3, #0
   1a8ae:	d002      	beq.n	1a8b6 <_ZN15CommandAttendreD0Ev+0x26>
   1a8b0:	6878      	ldr	r0, [r7, #4]
   1a8b2:	f7f3 fdf7 	bl	e4a4 <_ZdlPv>
   1a8b6:	687b      	ldr	r3, [r7, #4]
   1a8b8:	4618      	mov	r0, r3
   1a8ba:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a8be:	46bd      	mov	sp, r7
   1a8c0:	bd80      	pop	{r7, pc}
   1a8c2:	46c0      	nop			(mov r8, r8)
   1a8c4:	0001f9e8 	.word	0x0001f9e8

0001a8c8 <_ZN15CommandAttendreD1Ev>:
   1a8c8:	b580      	push	{r7, lr}
   1a8ca:	b082      	sub	sp, #8
   1a8cc:	af00      	add	r7, sp, #0
   1a8ce:	6078      	str	r0, [r7, #4]
   1a8d0:	687a      	ldr	r2, [r7, #4]
   1a8d2:	4b0a      	ldr	r3, [pc, #40]	(1a8fc <_ZN15CommandAttendreD1Ev+0x34>)
   1a8d4:	6013      	str	r3, [r2, #0]
   1a8d6:	687b      	ldr	r3, [r7, #4]
   1a8d8:	4618      	mov	r0, r3
   1a8da:	f7ed fa7d 	bl	7dd8 <_ZN7CommandD2Ev>
   1a8de:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a8e2:	b2db      	uxtb	r3, r3
   1a8e4:	2b00      	cmp	r3, #0
   1a8e6:	d002      	beq.n	1a8ee <_ZN15CommandAttendreD1Ev+0x26>
   1a8e8:	6878      	ldr	r0, [r7, #4]
   1a8ea:	f7f3 fddb 	bl	e4a4 <_ZdlPv>
   1a8ee:	687b      	ldr	r3, [r7, #4]
   1a8f0:	4618      	mov	r0, r3
   1a8f2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a8f6:	46bd      	mov	sp, r7
   1a8f8:	bd80      	pop	{r7, pc}
   1a8fa:	46c0      	nop			(mov r8, r8)
   1a8fc:	0001f9e8 	.word	0x0001f9e8

0001a900 <_ZN18CommandTestAvancerD0Ev>:
    ////////////////////////////////
    //    CommandTestAvancer      //
    ////////////////////////////////

class CommandTestAvancer : public Command
{
   1a900:	b580      	push	{r7, lr}
   1a902:	b082      	sub	sp, #8
   1a904:	af00      	add	r7, sp, #0
   1a906:	6078      	str	r0, [r7, #4]
   1a908:	687a      	ldr	r2, [r7, #4]
   1a90a:	4b0a      	ldr	r3, [pc, #40]	(1a934 <_ZN18CommandTestAvancerD0Ev+0x34>)
   1a90c:	6013      	str	r3, [r2, #0]
   1a90e:	687b      	ldr	r3, [r7, #4]
   1a910:	4618      	mov	r0, r3
   1a912:	f7ed fa61 	bl	7dd8 <_ZN7CommandD2Ev>
   1a916:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a91a:	b2db      	uxtb	r3, r3
   1a91c:	2b00      	cmp	r3, #0
   1a91e:	d002      	beq.n	1a926 <_ZN18CommandTestAvancerD0Ev+0x26>
   1a920:	6878      	ldr	r0, [r7, #4]
   1a922:	f7f3 fdbf 	bl	e4a4 <_ZdlPv>
   1a926:	687b      	ldr	r3, [r7, #4]
   1a928:	4618      	mov	r0, r3
   1a92a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a92e:	46bd      	mov	sp, r7
   1a930:	bd80      	pop	{r7, pc}
   1a932:	46c0      	nop			(mov r8, r8)
   1a934:	0001f9c0 	.word	0x0001f9c0

0001a938 <_ZN18CommandTestAvancerD1Ev>:
   1a938:	b580      	push	{r7, lr}
   1a93a:	b082      	sub	sp, #8
   1a93c:	af00      	add	r7, sp, #0
   1a93e:	6078      	str	r0, [r7, #4]
   1a940:	687a      	ldr	r2, [r7, #4]
   1a942:	4b0a      	ldr	r3, [pc, #40]	(1a96c <_ZN18CommandTestAvancerD1Ev+0x34>)
   1a944:	6013      	str	r3, [r2, #0]
   1a946:	687b      	ldr	r3, [r7, #4]
   1a948:	4618      	mov	r0, r3
   1a94a:	f7ed fa45 	bl	7dd8 <_ZN7CommandD2Ev>
   1a94e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a952:	b2db      	uxtb	r3, r3
   1a954:	2b00      	cmp	r3, #0
   1a956:	d002      	beq.n	1a95e <_ZN18CommandTestAvancerD1Ev+0x26>
   1a958:	6878      	ldr	r0, [r7, #4]
   1a95a:	f7f3 fda3 	bl	e4a4 <_ZdlPv>
   1a95e:	687b      	ldr	r3, [r7, #4]
   1a960:	4618      	mov	r0, r3
   1a962:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a966:	46bd      	mov	sp, r7
   1a968:	bd80      	pop	{r7, pc}
   1a96a:	46c0      	nop			(mov r8, r8)
   1a96c:	0001f9c0 	.word	0x0001f9c0

0001a970 <_ZN24CommandTestTournerGaucheD0Ev>:
    ////////////////////////////////
    //  CommandTestTournerGauche  //
    ////////////////////////////////

class CommandTestTournerGauche : public Command
{
   1a970:	b580      	push	{r7, lr}
   1a972:	b082      	sub	sp, #8
   1a974:	af00      	add	r7, sp, #0
   1a976:	6078      	str	r0, [r7, #4]
   1a978:	687a      	ldr	r2, [r7, #4]
   1a97a:	4b0a      	ldr	r3, [pc, #40]	(1a9a4 <_ZN24CommandTestTournerGaucheD0Ev+0x34>)
   1a97c:	6013      	str	r3, [r2, #0]
   1a97e:	687b      	ldr	r3, [r7, #4]
   1a980:	4618      	mov	r0, r3
   1a982:	f7ed fa29 	bl	7dd8 <_ZN7CommandD2Ev>
   1a986:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a98a:	b2db      	uxtb	r3, r3
   1a98c:	2b00      	cmp	r3, #0
   1a98e:	d002      	beq.n	1a996 <_ZN24CommandTestTournerGaucheD0Ev+0x26>
   1a990:	6878      	ldr	r0, [r7, #4]
   1a992:	f7f3 fd87 	bl	e4a4 <_ZdlPv>
   1a996:	687b      	ldr	r3, [r7, #4]
   1a998:	4618      	mov	r0, r3
   1a99a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a99e:	46bd      	mov	sp, r7
   1a9a0:	bd80      	pop	{r7, pc}
   1a9a2:	46c0      	nop			(mov r8, r8)
   1a9a4:	0001f998 	.word	0x0001f998

0001a9a8 <_ZN24CommandTestTournerGaucheD1Ev>:
   1a9a8:	b580      	push	{r7, lr}
   1a9aa:	b082      	sub	sp, #8
   1a9ac:	af00      	add	r7, sp, #0
   1a9ae:	6078      	str	r0, [r7, #4]
   1a9b0:	687a      	ldr	r2, [r7, #4]
   1a9b2:	4b0a      	ldr	r3, [pc, #40]	(1a9dc <_ZN24CommandTestTournerGaucheD1Ev+0x34>)
   1a9b4:	6013      	str	r3, [r2, #0]
   1a9b6:	687b      	ldr	r3, [r7, #4]
   1a9b8:	4618      	mov	r0, r3
   1a9ba:	f7ed fa0d 	bl	7dd8 <_ZN7CommandD2Ev>
   1a9be:	f04f 0300 	mov.w	r3, #0	; 0x0
   1a9c2:	b2db      	uxtb	r3, r3
   1a9c4:	2b00      	cmp	r3, #0
   1a9c6:	d002      	beq.n	1a9ce <_ZN24CommandTestTournerGaucheD1Ev+0x26>
   1a9c8:	6878      	ldr	r0, [r7, #4]
   1a9ca:	f7f3 fd6b 	bl	e4a4 <_ZdlPv>
   1a9ce:	687b      	ldr	r3, [r7, #4]
   1a9d0:	4618      	mov	r0, r3
   1a9d2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1a9d6:	46bd      	mov	sp, r7
   1a9d8:	bd80      	pop	{r7, pc}
   1a9da:	46c0      	nop			(mov r8, r8)
   1a9dc:	0001f998 	.word	0x0001f998

0001a9e0 <_ZN29CommandCalibrerCapteurCouleurD0Ev>:
        // ou depuis le dernier appel de la selection du capteur
        uint16_t getTickValue();
};

class CommandCalibrerCapteurCouleur : public Command
{
   1a9e0:	b580      	push	{r7, lr}
   1a9e2:	b082      	sub	sp, #8
   1a9e4:	af00      	add	r7, sp, #0
   1a9e6:	6078      	str	r0, [r7, #4]
   1a9e8:	687a      	ldr	r2, [r7, #4]
   1a9ea:	4b0a      	ldr	r3, [pc, #40]	(1aa14 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x34>)
   1a9ec:	6013      	str	r3, [r2, #0]
   1a9ee:	687b      	ldr	r3, [r7, #4]
   1a9f0:	4618      	mov	r0, r3
   1a9f2:	f7ed f9f1 	bl	7dd8 <_ZN7CommandD2Ev>
   1a9f6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1a9fa:	b2db      	uxtb	r3, r3
   1a9fc:	2b00      	cmp	r3, #0
   1a9fe:	d002      	beq.n	1aa06 <_ZN29CommandCalibrerCapteurCouleurD0Ev+0x26>
   1aa00:	6878      	ldr	r0, [r7, #4]
   1aa02:	f7f3 fd4f 	bl	e4a4 <_ZdlPv>
   1aa06:	687b      	ldr	r3, [r7, #4]
   1aa08:	4618      	mov	r0, r3
   1aa0a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1aa0e:	46bd      	mov	sp, r7
   1aa10:	bd80      	pop	{r7, pc}
   1aa12:	46c0      	nop			(mov r8, r8)
   1aa14:	0001fb08 	.word	0x0001fb08

0001aa18 <_ZN29CommandCalibrerCapteurCouleurD1Ev>:
   1aa18:	b580      	push	{r7, lr}
   1aa1a:	b082      	sub	sp, #8
   1aa1c:	af00      	add	r7, sp, #0
   1aa1e:	6078      	str	r0, [r7, #4]
   1aa20:	687a      	ldr	r2, [r7, #4]
   1aa22:	4b0a      	ldr	r3, [pc, #40]	(1aa4c <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x34>)
   1aa24:	6013      	str	r3, [r2, #0]
   1aa26:	687b      	ldr	r3, [r7, #4]
   1aa28:	4618      	mov	r0, r3
   1aa2a:	f7ed f9d5 	bl	7dd8 <_ZN7CommandD2Ev>
   1aa2e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1aa32:	b2db      	uxtb	r3, r3
   1aa34:	2b00      	cmp	r3, #0
   1aa36:	d002      	beq.n	1aa3e <_ZN29CommandCalibrerCapteurCouleurD1Ev+0x26>
   1aa38:	6878      	ldr	r0, [r7, #4]
   1aa3a:	f7f3 fd33 	bl	e4a4 <_ZdlPv>
   1aa3e:	687b      	ldr	r3, [r7, #4]
   1aa40:	4618      	mov	r0, r3
   1aa42:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1aa46:	46bd      	mov	sp, r7
   1aa48:	bd80      	pop	{r7, pc}
   1aa4a:	46c0      	nop			(mov r8, r8)
   1aa4c:	0001fb08 	.word	0x0001fb08

0001aa50 <_ZN19CommandCheckCouleurD0Ev>:

        uint16_t resultat;
};

class CommandCheckCouleur : public Command
{
   1aa50:	b580      	push	{r7, lr}
   1aa52:	b082      	sub	sp, #8
   1aa54:	af00      	add	r7, sp, #0
   1aa56:	6078      	str	r0, [r7, #4]
   1aa58:	687a      	ldr	r2, [r7, #4]
   1aa5a:	4b0a      	ldr	r3, [pc, #40]	(1aa84 <_ZN19CommandCheckCouleurD0Ev+0x34>)
   1aa5c:	6013      	str	r3, [r2, #0]
   1aa5e:	687b      	ldr	r3, [r7, #4]
   1aa60:	4618      	mov	r0, r3
   1aa62:	f7ed f9b9 	bl	7dd8 <_ZN7CommandD2Ev>
   1aa66:	f04f 0301 	mov.w	r3, #1	; 0x1
   1aa6a:	b2db      	uxtb	r3, r3
   1aa6c:	2b00      	cmp	r3, #0
   1aa6e:	d002      	beq.n	1aa76 <_ZN19CommandCheckCouleurD0Ev+0x26>
   1aa70:	6878      	ldr	r0, [r7, #4]
   1aa72:	f7f3 fd17 	bl	e4a4 <_ZdlPv>
   1aa76:	687b      	ldr	r3, [r7, #4]
   1aa78:	4618      	mov	r0, r3
   1aa7a:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1aa7e:	46bd      	mov	sp, r7
   1aa80:	bd80      	pop	{r7, pc}
   1aa82:	46c0      	nop			(mov r8, r8)
   1aa84:	0001fae0 	.word	0x0001fae0

0001aa88 <_ZN19CommandCheckCouleurD1Ev>:
   1aa88:	b580      	push	{r7, lr}
   1aa8a:	b082      	sub	sp, #8
   1aa8c:	af00      	add	r7, sp, #0
   1aa8e:	6078      	str	r0, [r7, #4]
   1aa90:	687a      	ldr	r2, [r7, #4]
   1aa92:	4b0a      	ldr	r3, [pc, #40]	(1aabc <_ZN19CommandCheckCouleurD1Ev+0x34>)
   1aa94:	6013      	str	r3, [r2, #0]
   1aa96:	687b      	ldr	r3, [r7, #4]
   1aa98:	4618      	mov	r0, r3
   1aa9a:	f7ed f99d 	bl	7dd8 <_ZN7CommandD2Ev>
   1aa9e:	f04f 0300 	mov.w	r3, #0	; 0x0
   1aaa2:	b2db      	uxtb	r3, r3
   1aaa4:	2b00      	cmp	r3, #0
   1aaa6:	d002      	beq.n	1aaae <_ZN19CommandCheckCouleurD1Ev+0x26>
   1aaa8:	6878      	ldr	r0, [r7, #4]
   1aaaa:	f7f3 fcfb 	bl	e4a4 <_ZdlPv>
   1aaae:	687b      	ldr	r3, [r7, #4]
   1aab0:	4618      	mov	r0, r3
   1aab2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1aab6:	46bd      	mov	sp, r7
   1aab8:	bd80      	pop	{r7, pc}
   1aaba:	46c0      	nop			(mov r8, r8)
   1aabc:	0001fae0 	.word	0x0001fae0

0001aac0 <_ZN11StrategieV3D2Ev>:

#endif*/
//#define ETAPE_GARAGE 1
//#define NOMBRE_ETAPES 10
class StrategieV3 : public MediumLevelAction
{
   1aac0:	b580      	push	{r7, lr}
   1aac2:	b082      	sub	sp, #8
   1aac4:	af00      	add	r7, sp, #0
   1aac6:	6078      	str	r0, [r7, #4]
   1aac8:	687a      	ldr	r2, [r7, #4]
   1aaca:	4b0a      	ldr	r3, [pc, #40]	(1aaf4 <_ZN11StrategieV3D2Ev+0x34>)
   1aacc:	6013      	str	r3, [r2, #0]
   1aace:	687b      	ldr	r3, [r7, #4]
   1aad0:	4618      	mov	r0, r3
   1aad2:	f7f8 fb01 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
   1aad6:	f04f 0300 	mov.w	r3, #0	; 0x0
   1aada:	b2db      	uxtb	r3, r3
   1aadc:	2b00      	cmp	r3, #0
   1aade:	d002      	beq.n	1aae6 <_ZN11StrategieV3D2Ev+0x26>
   1aae0:	6878      	ldr	r0, [r7, #4]
   1aae2:	f7f3 fcdf 	bl	e4a4 <_ZdlPv>
   1aae6:	687b      	ldr	r3, [r7, #4]
   1aae8:	4618      	mov	r0, r3
   1aaea:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1aaee:	46bd      	mov	sp, r7
   1aaf0:	bd80      	pop	{r7, pc}
   1aaf2:	46c0      	nop			(mov r8, r8)
   1aaf4:	0001fcc0 	.word	0x0001fcc0

0001aaf8 <_ZN9Krabi2015D0Ev>:
#include "torchemobile.h"
#include "etape.h"
#include "clap.h"

class Krabi2015 : public StrategieV3
{
   1aaf8:	b580      	push	{r7, lr}
   1aafa:	b082      	sub	sp, #8
   1aafc:	af00      	add	r7, sp, #0
   1aafe:	6078      	str	r0, [r7, #4]
   1ab00:	687a      	ldr	r2, [r7, #4]
   1ab02:	4b17      	ldr	r3, [pc, #92]	(1ab60 <_ZN9Krabi2015D0Ev+0x68>)
   1ab04:	6013      	str	r3, [r2, #0]
   1ab06:	687b      	ldr	r3, [r7, #4]
   1ab08:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ab0c:	2b00      	cmp	r3, #0
   1ab0e:	d015      	beq.n	1ab3c <_ZN9Krabi2015D0Ev+0x44>
   1ab10:	687b      	ldr	r3, [r7, #4]
   1ab12:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ab16:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1ab1a:	603b      	str	r3, [r7, #0]
   1ab1c:	687b      	ldr	r3, [r7, #4]
   1ab1e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ab22:	683a      	ldr	r2, [r7, #0]
   1ab24:	429a      	cmp	r2, r3
   1ab26:	d009      	beq.n	1ab3c <_ZN9Krabi2015D0Ev+0x44>
   1ab28:	683b      	ldr	r3, [r7, #0]
   1ab2a:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1ab2e:	603b      	str	r3, [r7, #0]
   1ab30:	683a      	ldr	r2, [r7, #0]
   1ab32:	6813      	ldr	r3, [r2, #0]
   1ab34:	681b      	ldr	r3, [r3, #0]
   1ab36:	6838      	ldr	r0, [r7, #0]
   1ab38:	4798      	blx	r3
   1ab3a:	e7ef      	b.n	1ab1c <_ZN9Krabi2015D0Ev+0x24>
   1ab3c:	687b      	ldr	r3, [r7, #4]
   1ab3e:	4618      	mov	r0, r3
   1ab40:	f7ff ffbe 	bl	1aac0 <_ZN11StrategieV3D2Ev>
   1ab44:	f04f 0301 	mov.w	r3, #1	; 0x1
   1ab48:	b2db      	uxtb	r3, r3
   1ab4a:	2b00      	cmp	r3, #0
   1ab4c:	d002      	beq.n	1ab54 <_ZN9Krabi2015D0Ev+0x5c>
   1ab4e:	6878      	ldr	r0, [r7, #4]
   1ab50:	f7f3 fca8 	bl	e4a4 <_ZdlPv>
   1ab54:	687b      	ldr	r3, [r7, #4]
   1ab56:	4618      	mov	r0, r3
   1ab58:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ab5c:	46bd      	mov	sp, r7
   1ab5e:	bd80      	pop	{r7, pc}
   1ab60:	0001fc48 	.word	0x0001fc48

0001ab64 <_ZN9Krabi2015D1Ev>:
   1ab64:	b580      	push	{r7, lr}
   1ab66:	b082      	sub	sp, #8
   1ab68:	af00      	add	r7, sp, #0
   1ab6a:	6078      	str	r0, [r7, #4]
   1ab6c:	687a      	ldr	r2, [r7, #4]
   1ab6e:	4b17      	ldr	r3, [pc, #92]	(1abcc <_ZN9Krabi2015D1Ev+0x68>)
   1ab70:	6013      	str	r3, [r2, #0]
   1ab72:	687b      	ldr	r3, [r7, #4]
   1ab74:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ab78:	2b00      	cmp	r3, #0
   1ab7a:	d015      	beq.n	1aba8 <_ZN9Krabi2015D1Ev+0x44>
   1ab7c:	687b      	ldr	r3, [r7, #4]
   1ab7e:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ab82:	f103 0378 	add.w	r3, r3, #120	; 0x78
   1ab86:	603b      	str	r3, [r7, #0]
   1ab88:	687b      	ldr	r3, [r7, #4]
   1ab8a:	f103 0348 	add.w	r3, r3, #72	; 0x48
   1ab8e:	683a      	ldr	r2, [r7, #0]
   1ab90:	429a      	cmp	r2, r3
   1ab92:	d009      	beq.n	1aba8 <_ZN9Krabi2015D1Ev+0x44>
   1ab94:	683b      	ldr	r3, [r7, #0]
   1ab96:	f1a3 0328 	sub.w	r3, r3, #40	; 0x28
   1ab9a:	603b      	str	r3, [r7, #0]
   1ab9c:	683a      	ldr	r2, [r7, #0]
   1ab9e:	6813      	ldr	r3, [r2, #0]
   1aba0:	681b      	ldr	r3, [r3, #0]
   1aba2:	6838      	ldr	r0, [r7, #0]
   1aba4:	4798      	blx	r3
   1aba6:	e7ef      	b.n	1ab88 <_ZN9Krabi2015D1Ev+0x24>
   1aba8:	687b      	ldr	r3, [r7, #4]
   1abaa:	4618      	mov	r0, r3
   1abac:	f7ff ff88 	bl	1aac0 <_ZN11StrategieV3D2Ev>
   1abb0:	f04f 0300 	mov.w	r3, #0	; 0x0
   1abb4:	b2db      	uxtb	r3, r3
   1abb6:	2b00      	cmp	r3, #0
   1abb8:	d002      	beq.n	1abc0 <_ZN9Krabi2015D1Ev+0x5c>
   1abba:	6878      	ldr	r0, [r7, #4]
   1abbc:	f7f3 fc72 	bl	e4a4 <_ZdlPv>
   1abc0:	687b      	ldr	r3, [r7, #4]
   1abc2:	4618      	mov	r0, r3
   1abc4:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1abc8:	46bd      	mov	sp, r7
   1abca:	bd80      	pop	{r7, pc}
   1abcc:	0001fc48 	.word	0x0001fc48

0001abd0 <_ZN17MediumLevelActionaSERKS_>:
#ifndef ROBOTHW
#include <QPainter>;
#endif

class MediumLevelAction
{
   1abd0:	b580      	push	{r7, lr}
   1abd2:	b082      	sub	sp, #8
   1abd4:	af00      	add	r7, sp, #0
   1abd6:	6078      	str	r0, [r7, #4]
   1abd8:	6039      	str	r1, [r7, #0]
   1abda:	687b      	ldr	r3, [r7, #4]
   1abdc:	f103 0304 	add.w	r3, r3, #4	; 0x4
   1abe0:	683a      	ldr	r2, [r7, #0]
   1abe2:	4618      	mov	r0, r3
   1abe4:	f102 0304 	add.w	r3, r2, #4	; 0x4
   1abe8:	e893 0006 	ldmia.w	r3, {r1, r2}
   1abec:	f7f3 fdae 	bl	e74c <_ZN8PositionaSES_>
   1abf0:	683b      	ldr	r3, [r7, #0]
   1abf2:	68da      	ldr	r2, [r3, #12]
   1abf4:	687b      	ldr	r3, [r7, #4]
   1abf6:	60da      	str	r2, [r3, #12]
   1abf8:	683b      	ldr	r3, [r7, #0]
   1abfa:	7c1b      	ldrb	r3, [r3, #16]
   1abfc:	687a      	ldr	r2, [r7, #4]
   1abfe:	7413      	strb	r3, [r2, #16]
   1ac00:	683b      	ldr	r3, [r7, #0]
   1ac02:	695a      	ldr	r2, [r3, #20]
   1ac04:	687b      	ldr	r3, [r7, #4]
   1ac06:	615a      	str	r2, [r3, #20]
   1ac08:	687b      	ldr	r3, [r7, #4]
   1ac0a:	4618      	mov	r0, r3
   1ac0c:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ac10:	46bd      	mov	sp, r7
   1ac12:	bd80      	pop	{r7, pc}

0001ac14 <_ZN10ActionGoToaSERKS_>:
#include "position.h"
//#include <stdint.h>


class ActionGoTo : public MediumLevelAction
{
   1ac14:	b580      	push	{r7, lr}
   1ac16:	b082      	sub	sp, #8
   1ac18:	af00      	add	r7, sp, #0
   1ac1a:	6078      	str	r0, [r7, #4]
   1ac1c:	6039      	str	r1, [r7, #0]
   1ac1e:	687b      	ldr	r3, [r7, #4]
   1ac20:	683a      	ldr	r2, [r7, #0]
   1ac22:	4618      	mov	r0, r3
   1ac24:	4611      	mov	r1, r2
   1ac26:	f7ff ffd3 	bl	1abd0 <_ZN17MediumLevelActionaSERKS_>
   1ac2a:	683b      	ldr	r3, [r7, #0]
   1ac2c:	699a      	ldr	r2, [r3, #24]
   1ac2e:	687b      	ldr	r3, [r7, #4]
   1ac30:	619a      	str	r2, [r3, #24]
   1ac32:	683b      	ldr	r3, [r7, #0]
   1ac34:	7f1b      	ldrb	r3, [r3, #28]
   1ac36:	687a      	ldr	r2, [r7, #4]
   1ac38:	7713      	strb	r3, [r2, #28]
   1ac3a:	683b      	ldr	r3, [r7, #0]
   1ac3c:	6a1a      	ldr	r2, [r3, #32]
   1ac3e:	687b      	ldr	r3, [r7, #4]
   1ac40:	621a      	str	r2, [r3, #32]
   1ac42:	683b      	ldr	r3, [r7, #0]
   1ac44:	6a5a      	ldr	r2, [r3, #36]
   1ac46:	687b      	ldr	r3, [r7, #4]
   1ac48:	625a      	str	r2, [r3, #36]
   1ac4a:	687b      	ldr	r3, [r7, #4]
   1ac4c:	f103 0328 	add.w	r3, r3, #40	; 0x28
   1ac50:	683a      	ldr	r2, [r7, #0]
   1ac52:	4618      	mov	r0, r3
   1ac54:	f102 0328 	add.w	r3, r2, #40	; 0x28
   1ac58:	e893 0006 	ldmia.w	r3, {r1, r2}
   1ac5c:	f7f3 fd76 	bl	e74c <_ZN8PositionaSES_>
   1ac60:	687b      	ldr	r3, [r7, #4]
   1ac62:	4618      	mov	r0, r3
   1ac64:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ac68:	46bd      	mov	sp, r7
   1ac6a:	bd80      	pop	{r7, pc}

0001ac6c <_ZN4ClapaSERKS_>:

/** @class clap : le robot doit fermer 3 claps du bord de la table
*/

class Clap : public MediumLevelAction
{
   1ac6c:	b580      	push	{r7, lr}
   1ac6e:	b082      	sub	sp, #8
   1ac70:	af00      	add	r7, sp, #0
   1ac72:	6078      	str	r0, [r7, #4]
   1ac74:	6039      	str	r1, [r7, #0]
   1ac76:	687b      	ldr	r3, [r7, #4]
   1ac78:	683a      	ldr	r2, [r7, #0]
   1ac7a:	4618      	mov	r0, r3
   1ac7c:	4611      	mov	r1, r2
   1ac7e:	f7ff ffa7 	bl	1abd0 <_ZN17MediumLevelActionaSERKS_>
   1ac82:	687b      	ldr	r3, [r7, #4]
   1ac84:	f103 0318 	add.w	r3, r3, #24	; 0x18
   1ac88:	683a      	ldr	r2, [r7, #0]
   1ac8a:	4618      	mov	r0, r3
   1ac8c:	f102 0318 	add.w	r3, r2, #24	; 0x18
   1ac90:	e893 0006 	ldmia.w	r3, {r1, r2}
   1ac94:	f7f3 fd5a 	bl	e74c <_ZN8PositionaSES_>
   1ac98:	687b      	ldr	r3, [r7, #4]
   1ac9a:	f103 0320 	add.w	r3, r3, #32	; 0x20
   1ac9e:	683a      	ldr	r2, [r7, #0]
   1aca0:	4618      	mov	r0, r3
   1aca2:	f102 0320 	add.w	r3, r2, #32	; 0x20
   1aca6:	e893 0006 	ldmia.w	r3, {r1, r2}
   1acaa:	f7f3 fd4f 	bl	e74c <_ZN8PositionaSES_>
   1acae:	687b      	ldr	r3, [r7, #4]
   1acb0:	4618      	mov	r0, r3
   1acb2:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1acb6:	46bd      	mov	sp, r7
   1acb8:	bd80      	pop	{r7, pc}
   1acba:	46c0      	nop			(mov r8, r8)

0001acbc <_ZN11StrategieV3D0Ev>:
   1acbc:	b580      	push	{r7, lr}
   1acbe:	b082      	sub	sp, #8
   1acc0:	af00      	add	r7, sp, #0
   1acc2:	6078      	str	r0, [r7, #4]
   1acc4:	687a      	ldr	r2, [r7, #4]
   1acc6:	4b0a      	ldr	r3, [pc, #40]	(1acf0 <_ZN11StrategieV3D0Ev+0x34>)
   1acc8:	6013      	str	r3, [r2, #0]
   1acca:	687b      	ldr	r3, [r7, #4]
   1accc:	4618      	mov	r0, r3
   1acce:	f7f8 fa03 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
   1acd2:	f04f 0301 	mov.w	r3, #1	; 0x1
   1acd6:	b2db      	uxtb	r3, r3
   1acd8:	2b00      	cmp	r3, #0
   1acda:	d002      	beq.n	1ace2 <_ZN11StrategieV3D0Ev+0x26>
   1acdc:	6878      	ldr	r0, [r7, #4]
   1acde:	f7f3 fbe1 	bl	e4a4 <_ZdlPv>
   1ace2:	687b      	ldr	r3, [r7, #4]
   1ace4:	4618      	mov	r0, r3
   1ace6:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1acea:	46bd      	mov	sp, r7
   1acec:	bd80      	pop	{r7, pc}
   1acee:	46c0      	nop			(mov r8, r8)
   1acf0:	0001fcc0 	.word	0x0001fcc0

0001acf4 <_ZN11StrategieV3D1Ev>:
   1acf4:	b580      	push	{r7, lr}
   1acf6:	b082      	sub	sp, #8
   1acf8:	af00      	add	r7, sp, #0
   1acfa:	6078      	str	r0, [r7, #4]
   1acfc:	687a      	ldr	r2, [r7, #4]
   1acfe:	4b0a      	ldr	r3, [pc, #40]	(1ad28 <_ZN11StrategieV3D1Ev+0x34>)
   1ad00:	6013      	str	r3, [r2, #0]
   1ad02:	687b      	ldr	r3, [r7, #4]
   1ad04:	4618      	mov	r0, r3
   1ad06:	f7f8 f9e7 	bl	130d8 <_ZN17MediumLevelActionD2Ev>
   1ad0a:	f04f 0300 	mov.w	r3, #0	; 0x0
   1ad0e:	b2db      	uxtb	r3, r3
   1ad10:	2b00      	cmp	r3, #0
   1ad12:	d002      	beq.n	1ad1a <_ZN11StrategieV3D1Ev+0x26>
   1ad14:	6878      	ldr	r0, [r7, #4]
   1ad16:	f7f3 fbc5 	bl	e4a4 <_ZdlPv>
   1ad1a:	687b      	ldr	r3, [r7, #4]
   1ad1c:	4618      	mov	r0, r3
   1ad1e:	f107 0708 	add.w	r7, r7, #8	; 0x8
   1ad22:	46bd      	mov	sp, r7
   1ad24:	bd80      	pop	{r7, pc}
   1ad26:	46c0      	nop			(mov r8, r8)
   1ad28:	0001fcc0 	.word	0x0001fcc0

0001ad2c <__cxa_pure_virtual>:
   1ad2c:	b500      	push	{lr}
   1ad2e:	4904      	ldr	r1, [pc, #16]	(1ad40 <__cxa_pure_virtual+0x14>)
   1ad30:	b081      	sub	sp, #4
   1ad32:	221b      	movs	r2, #27
   1ad34:	2002      	movs	r0, #2
   1ad36:	f004 f853 	bl	1ede0 <write>
   1ad3a:	f000 f821 	bl	1ad80 <_ZSt9terminatev>
   1ad3e:	46c0      	nop			(mov r8, r8)
   1ad40:	00020318 	.word	0x00020318

0001ad44 <_ZSt13set_terminatePFvvE>:
   1ad44:	4b02      	ldr	r3, [pc, #8]	(1ad50 <_ZSt13set_terminatePFvvE+0xc>)
   1ad46:	681a      	ldr	r2, [r3, #0]
   1ad48:	6018      	str	r0, [r3, #0]
   1ad4a:	4610      	mov	r0, r2
   1ad4c:	4770      	bx	lr
   1ad4e:	46c0      	nop			(mov r8, r8)
   1ad50:	20000038 	.word	0x20000038

0001ad54 <_ZSt14set_unexpectedPFvvE>:
   1ad54:	4b02      	ldr	r3, [pc, #8]	(1ad60 <_ZSt14set_unexpectedPFvvE+0xc>)
   1ad56:	681a      	ldr	r2, [r3, #0]
   1ad58:	6018      	str	r0, [r3, #0]
   1ad5a:	4610      	mov	r0, r2
   1ad5c:	4770      	bx	lr
   1ad5e:	46c0      	nop			(mov r8, r8)
   1ad60:	20000034 	.word	0x20000034

0001ad64 <_ZN10__cxxabiv111__terminateEPFvvE>:
   1ad64:	b510      	push	{r4, lr}
   1ad66:	4780      	blx	r0
   1ad68:	f002 ffa8 	bl	1dcbc <abort>
   1ad6c:	f000 ff3c 	bl	1bbe8 <__cxa_begin_catch>
   1ad70:	f002 ffa4 	bl	1dcbc <abort>
   1ad74:	4604      	mov	r4, r0
   1ad76:	f000 feef 	bl	1bb58 <__cxa_end_catch>
   1ad7a:	4620      	mov	r0, r4
   1ad7c:	f7fa fb8e 	bl	1549c <__cxa_end_cleanup>

0001ad80 <_ZSt9terminatev>:
   1ad80:	b500      	push	{lr}
   1ad82:	4b02      	ldr	r3, [pc, #8]	(1ad8c <_ZSt9terminatev+0xc>)
   1ad84:	b081      	sub	sp, #4
   1ad86:	6818      	ldr	r0, [r3, #0]
   1ad88:	f7ff ffec 	bl	1ad64 <_ZN10__cxxabiv111__terminateEPFvvE>
   1ad8c:	20000038 	.word	0x20000038

0001ad90 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   1ad90:	b500      	push	{lr}
   1ad92:	b081      	sub	sp, #4
   1ad94:	4780      	blx	r0
   1ad96:	f7ff fff3 	bl	1ad80 <_ZSt9terminatev>
   1ad9a:	46c0      	nop			(mov r8, r8)

0001ad9c <_ZSt10unexpectedv>:
   1ad9c:	b500      	push	{lr}
   1ad9e:	4b02      	ldr	r3, [pc, #8]	(1ada8 <_ZSt10unexpectedv+0xc>)
   1ada0:	b081      	sub	sp, #4
   1ada2:	6818      	ldr	r0, [r3, #0]
   1ada4:	f7ff fff4 	bl	1ad90 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1ada8:	20000034 	.word	0x20000034

0001adac <__cxa_begin_cleanup>:
   1adac:	b510      	push	{r4, lr}
   1adae:	4604      	mov	r4, r0
   1adb0:	f001 f9f0 	bl	1c194 <__cxa_get_globals>
   1adb4:	f814 3920 	ldrb.w	r3, [r4], #-32
   1adb8:	2b47      	cmp	r3, #71
   1adba:	d005      	beq.n	1adc8 <__cxa_begin_cleanup+0x1c>
   1adbc:	6883      	ldr	r3, [r0, #8]
   1adbe:	2b00      	cmp	r3, #0
   1adc0:	d127      	bne.n	1ae12 <__cxa_begin_cleanup+0x66>
   1adc2:	6084      	str	r4, [r0, #8]
   1adc4:	2001      	movs	r0, #1
   1adc6:	bd10      	pop	{r4, pc}
   1adc8:	f894 3021 	ldrb.w	r3, [r4, #33]
   1adcc:	2b4e      	cmp	r3, #78
   1adce:	d1f5      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1add0:	f894 3022 	ldrb.w	r3, [r4, #34]
   1add4:	2b55      	cmp	r3, #85
   1add6:	d1f1      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1add8:	f894 3023 	ldrb.w	r3, [r4, #35]
   1addc:	2b43      	cmp	r3, #67
   1adde:	d1ed      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1ade0:	f894 3024 	ldrb.w	r3, [r4, #36]
   1ade4:	2b43      	cmp	r3, #67
   1ade6:	d1e9      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1ade8:	f894 3025 	ldrb.w	r3, [r4, #37]
   1adec:	2b2b      	cmp	r3, #43
   1adee:	d1e5      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1adf0:	f894 3026 	ldrb.w	r3, [r4, #38]
   1adf4:	2b2b      	cmp	r3, #43
   1adf6:	d1e1      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1adf8:	f894 3027 	ldrb.w	r3, [r4, #39]
   1adfc:	2b00      	cmp	r3, #0
   1adfe:	d1dd      	bne.n	1adbc <__cxa_begin_cleanup+0x10>
   1ae00:	69e3      	ldr	r3, [r4, #28]
   1ae02:	3301      	adds	r3, #1
   1ae04:	2b01      	cmp	r3, #1
   1ae06:	61e3      	str	r3, [r4, #28]
   1ae08:	d1dc      	bne.n	1adc4 <__cxa_begin_cleanup+0x18>
   1ae0a:	6883      	ldr	r3, [r0, #8]
   1ae0c:	61a3      	str	r3, [r4, #24]
   1ae0e:	6084      	str	r4, [r0, #8]
   1ae10:	e7d8      	b.n	1adc4 <__cxa_begin_cleanup+0x18>
   1ae12:	f7ff ffb5 	bl	1ad80 <_ZSt9terminatev>
   1ae16:	46c0      	nop			(mov r8, r8)

0001ae18 <__cxa_type_match>:
   1ae18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae1a:	461f      	mov	r7, r3
   1ae1c:	7803      	ldrb	r3, [r0, #0]
   1ae1e:	b083      	sub	sp, #12
   1ae20:	2b47      	cmp	r3, #71
   1ae22:	460e      	mov	r6, r1
   1ae24:	d02c      	beq.n	1ae80 <__cxa_type_match+0x68>
   1ae26:	4d27      	ldr	r5, [pc, #156]	(1aec4 <__cxa_type_match+0xac>)
   1ae28:	683b      	ldr	r3, [r7, #0]
   1ae2a:	682a      	ldr	r2, [r5, #0]
   1ae2c:	9301      	str	r3, [sp, #4]
   1ae2e:	4628      	mov	r0, r5
   1ae30:	6893      	ldr	r3, [r2, #8]
   1ae32:	4798      	blx	r3
   1ae34:	b110      	cbz	r0, 1ae3c <__cxa_type_match+0x24>
   1ae36:	9b01      	ldr	r3, [sp, #4]
   1ae38:	681a      	ldr	r2, [r3, #0]
   1ae3a:	9201      	str	r2, [sp, #4]
   1ae3c:	6833      	ldr	r3, [r6, #0]
   1ae3e:	4630      	mov	r0, r6
   1ae40:	691c      	ldr	r4, [r3, #16]
   1ae42:	4629      	mov	r1, r5
   1ae44:	aa01      	add	r2, sp, #4
   1ae46:	2301      	movs	r3, #1
   1ae48:	47a0      	blx	r4
   1ae4a:	b1b8      	cbz	r0, 1ae7c <__cxa_type_match+0x64>
   1ae4c:	9b01      	ldr	r3, [sp, #4]
   1ae4e:	6832      	ldr	r2, [r6, #0]
   1ae50:	603b      	str	r3, [r7, #0]
   1ae52:	4b1d      	ldr	r3, [pc, #116]	(1aec8 <__cxa_type_match+0xb0>)
   1ae54:	f852 0c04 	ldr.w	r0, [r2, #-4]
   1ae58:	681a      	ldr	r2, [r3, #0]
   1ae5a:	f852 1c04 	ldr.w	r1, [r2, #-4]
   1ae5e:	f001 f8e9 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1ae62:	b150      	cbz	r0, 1ae7a <__cxa_type_match+0x62>
   1ae64:	68f3      	ldr	r3, [r6, #12]
   1ae66:	2b00      	cmp	r3, #0
   1ae68:	d02a      	beq.n	1aec0 <__cxa_type_match+0xa8>
   1ae6a:	681b      	ldr	r3, [r3, #0]
   1ae6c:	4917      	ldr	r1, [pc, #92]	(1aecc <__cxa_type_match+0xb4>)
   1ae6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1ae72:	f001 f8df 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1ae76:	2800      	cmp	r0, #0
   1ae78:	d01a      	beq.n	1aeb0 <__cxa_type_match+0x98>
   1ae7a:	2001      	movs	r0, #1
   1ae7c:	b003      	add	sp, #12
   1ae7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae80:	7843      	ldrb	r3, [r0, #1]
   1ae82:	2b4e      	cmp	r3, #78
   1ae84:	d1cf      	bne.n	1ae26 <__cxa_type_match+0xe>
   1ae86:	7883      	ldrb	r3, [r0, #2]
   1ae88:	2b55      	cmp	r3, #85
   1ae8a:	d1cc      	bne.n	1ae26 <__cxa_type_match+0xe>
   1ae8c:	78c3      	ldrb	r3, [r0, #3]
   1ae8e:	2b43      	cmp	r3, #67
   1ae90:	d1c9      	bne.n	1ae26 <__cxa_type_match+0xe>
   1ae92:	7903      	ldrb	r3, [r0, #4]
   1ae94:	2b43      	cmp	r3, #67
   1ae96:	d1c6      	bne.n	1ae26 <__cxa_type_match+0xe>
   1ae98:	7943      	ldrb	r3, [r0, #5]
   1ae9a:	2b2b      	cmp	r3, #43
   1ae9c:	d1c3      	bne.n	1ae26 <__cxa_type_match+0xe>
   1ae9e:	7983      	ldrb	r3, [r0, #6]
   1aea0:	2b2b      	cmp	r3, #43
   1aea2:	d1c0      	bne.n	1ae26 <__cxa_type_match+0xe>
   1aea4:	79c3      	ldrb	r3, [r0, #7]
   1aea6:	2b00      	cmp	r3, #0
   1aea8:	d1bd      	bne.n	1ae26 <__cxa_type_match+0xe>
   1aeaa:	f850 5c20 	ldr.w	r5, [r0, #-32]
   1aeae:	e7bb      	b.n	1ae28 <__cxa_type_match+0x10>
   1aeb0:	68f0      	ldr	r0, [r6, #12]
   1aeb2:	68e9      	ldr	r1, [r5, #12]
   1aeb4:	f001 f8be 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1aeb8:	2800      	cmp	r0, #0
   1aeba:	d1de      	bne.n	1ae7a <__cxa_type_match+0x62>
   1aebc:	3002      	adds	r0, #2
   1aebe:	e7dd      	b.n	1ae7c <__cxa_type_match+0x64>
   1aec0:	f000 fcbc 	bl	1b83c <__cxa_bad_typeid>
   1aec4:	0002092c 	.word	0x0002092c
   1aec8:	00020768 	.word	0x00020768
   1aecc:	00020778 	.word	0x00020778

0001aed0 <__gnu_end_cleanup>:
   1aed0:	b500      	push	{lr}
   1aed2:	b081      	sub	sp, #4
   1aed4:	f001 f95e 	bl	1c194 <__cxa_get_globals>
   1aed8:	4602      	mov	r2, r0
   1aeda:	6880      	ldr	r0, [r0, #8]
   1aedc:	2800      	cmp	r0, #0
   1aede:	d02e      	beq.n	1af3e <__gnu_end_cleanup+0x6e>
   1aee0:	f890 3020 	ldrb.w	r3, [r0, #32]
   1aee4:	2b47      	cmp	r3, #71
   1aee6:	d004      	beq.n	1aef2 <__gnu_end_cleanup+0x22>
   1aee8:	2300      	movs	r3, #0
   1aeea:	6093      	str	r3, [r2, #8]
   1aeec:	3020      	adds	r0, #32
   1aeee:	b001      	add	sp, #4
   1aef0:	bd00      	pop	{pc}
   1aef2:	f890 3021 	ldrb.w	r3, [r0, #33]
   1aef6:	2b4e      	cmp	r3, #78
   1aef8:	d1f6      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1aefa:	f890 3022 	ldrb.w	r3, [r0, #34]
   1aefe:	2b55      	cmp	r3, #85
   1af00:	d1f2      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1af02:	f890 3023 	ldrb.w	r3, [r0, #35]
   1af06:	2b43      	cmp	r3, #67
   1af08:	d1ee      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1af0a:	f890 3024 	ldrb.w	r3, [r0, #36]
   1af0e:	2b43      	cmp	r3, #67
   1af10:	d1ea      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1af12:	f890 3025 	ldrb.w	r3, [r0, #37]
   1af16:	2b2b      	cmp	r3, #43
   1af18:	d1e6      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1af1a:	f890 3026 	ldrb.w	r3, [r0, #38]
   1af1e:	2b2b      	cmp	r3, #43
   1af20:	d1e2      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1af22:	f890 3027 	ldrb.w	r3, [r0, #39]
   1af26:	2b00      	cmp	r3, #0
   1af28:	d1de      	bne.n	1aee8 <__gnu_end_cleanup+0x18>
   1af2a:	69c3      	ldr	r3, [r0, #28]
   1af2c:	3b01      	subs	r3, #1
   1af2e:	61c3      	str	r3, [r0, #28]
   1af30:	2b00      	cmp	r3, #0
   1af32:	d1db      	bne.n	1aeec <__gnu_end_cleanup+0x1c>
   1af34:	6983      	ldr	r3, [r0, #24]
   1af36:	6093      	str	r3, [r2, #8]
   1af38:	2200      	movs	r2, #0
   1af3a:	6182      	str	r2, [r0, #24]
   1af3c:	e7d6      	b.n	1aeec <__gnu_end_cleanup+0x1c>
   1af3e:	f7ff ff1f 	bl	1ad80 <_ZSt9terminatev>
   1af42:	46c0      	nop			(mov r8, r8)

0001af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   1af44:	b500      	push	{lr}
   1af46:	28ff      	cmp	r0, #255
   1af48:	b081      	sub	sp, #4
   1af4a:	d00d      	beq.n	1af68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1af4c:	f000 0070 	and.w	r0, r0, #112	; 0x70
   1af50:	2820      	cmp	r0, #32
   1af52:	d018      	beq.n	1af86 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x42>
   1af54:	dd07      	ble.n	1af66 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x22>
   1af56:	2840      	cmp	r0, #64
   1af58:	d00d      	beq.n	1af76 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
   1af5a:	2850      	cmp	r0, #80
   1af5c:	d004      	beq.n	1af68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1af5e:	2830      	cmp	r0, #48
   1af60:	d00d      	beq.n	1af7e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3a>
   1af62:	f002 feab 	bl	1dcbc <abort>
   1af66:	b910      	cbnz	r0, 1af6e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
   1af68:	2000      	movs	r0, #0
   1af6a:	b001      	add	sp, #4
   1af6c:	bd00      	pop	{pc}
   1af6e:	2810      	cmp	r0, #16
   1af70:	d0fa      	beq.n	1af68 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   1af72:	f002 fea3 	bl	1dcbc <abort>
   1af76:	4608      	mov	r0, r1
   1af78:	f7fe fef2 	bl	19d60 <_Unwind_GetRegionStart>
   1af7c:	e7f5      	b.n	1af6a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1af7e:	4608      	mov	r0, r1
   1af80:	f7fe feca 	bl	19d18 <_Unwind_GetDataRelBase>
   1af84:	e7f1      	b.n	1af6a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1af86:	4608      	mov	r0, r1
   1af88:	f7fe fec2 	bl	19d10 <_Unwind_GetTextRelBase>
   1af8c:	e7ed      	b.n	1af6a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x26>
   1af8e:	46c0      	nop			(mov r8, r8)

0001af90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   1af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af94:	4604      	mov	r4, r0
   1af96:	460e      	mov	r6, r1
   1af98:	4617      	mov	r7, r2
   1af9a:	b108      	cbz	r0, 1afa0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   1af9c:	f7fe fee0 	bl	19d60 <_Unwind_GetRegionStart>
   1afa0:	6038      	str	r0, [r7, #0]
   1afa2:	4635      	mov	r5, r6
   1afa4:	f815 8b01 	ldrb.w	r8, [r5], #1
   1afa8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1afac:	bf08      	it	eq
   1afae:	6078      	streq	r0, [r7, #4]
   1afb0:	d03d      	beq.n	1b02e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1afb2:	4640      	mov	r0, r8
   1afb4:	4621      	mov	r1, r4
   1afb6:	f7ff ffc5 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1afba:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1afbe:	d06d      	beq.n	1b09c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10c>
   1afc0:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1afc4:	46ae      	mov	lr, r5
   1afc6:	2b0c      	cmp	r3, #12
   1afc8:	f200 808d 	bhi.w	1b0e6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x156>
   1afcc:	e8df f003 	tbb	[pc, r3]
   1afd0:	6d858d6d 	.word	0x6d858d6d
   1afd4:	8b8b8b79 	.word	0x8b8b8b79
   1afd8:	6d9f078b 	.word	0x6d9f078b
   1afdc:	0079      	.short	0x0079
   1afde:	2400      	movs	r4, #0
   1afe0:	1cb1      	adds	r1, r6, #2
   1afe2:	46a4      	mov	ip, r4
   1afe4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1afe8:	460d      	mov	r5, r1
   1afea:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1afee:	fa03 f30c 	lsl.w	r3, r3, ip
   1aff2:	3101      	adds	r1, #1
   1aff4:	431c      	orrs	r4, r3
   1aff6:	f012 0f80 	tst.w	r2, #128	; 0x80
   1affa:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1affe:	d1f1      	bne.n	1afe4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
   1b000:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1b004:	d807      	bhi.n	1b016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1b006:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b00a:	bf1e      	ittt	ne
   1b00c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   1b010:	fa03 f30c 	lslne.w	r3, r3, ip
   1b014:	431c      	orrne	r4, r3
   1b016:	b14c      	cbz	r4, 1b02c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9c>
   1b018:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1b01c:	2b10      	cmp	r3, #16
   1b01e:	bf08      	it	eq
   1b020:	4670      	moveq	r0, lr
   1b022:	1824      	adds	r4, r4, r0
   1b024:	f018 0f80 	tst.w	r8, #128	; 0x80
   1b028:	bf18      	it	ne
   1b02a:	6824      	ldrne	r4, [r4, #0]
   1b02c:	607c      	str	r4, [r7, #4]
   1b02e:	462c      	mov	r4, r5
   1b030:	f814 3b01 	ldrb.w	r3, [r4], #1
   1b034:	2bff      	cmp	r3, #255
   1b036:	753b      	strb	r3, [r7, #20]
   1b038:	d02d      	beq.n	1b096 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x106>
   1b03a:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1b03e:	1ca9      	adds	r1, r5, #2
   1b040:	4660      	mov	r0, ip
   1b042:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1b046:	460c      	mov	r4, r1
   1b048:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b04c:	4083      	lsls	r3, r0
   1b04e:	3101      	adds	r1, #1
   1b050:	3007      	adds	r0, #7
   1b052:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b056:	ea4c 0c03 	orr.w	ip, ip, r3
   1b05a:	d1f2      	bne.n	1b042 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xb2>
   1b05c:	eb04 030c 	add.w	r3, r4, ip
   1b060:	60fb      	str	r3, [r7, #12]
   1b062:	4621      	mov	r1, r4
   1b064:	f811 3b02 	ldrb.w	r3, [r1], #2
   1b068:	2000      	movs	r0, #0
   1b06a:	757b      	strb	r3, [r7, #21]
   1b06c:	4684      	mov	ip, r0
   1b06e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1b072:	460c      	mov	r4, r1
   1b074:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b078:	fa03 f30c 	lsl.w	r3, r3, ip
   1b07c:	3101      	adds	r1, #1
   1b07e:	4318      	orrs	r0, r3
   1b080:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b084:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1b088:	d1f1      	bne.n	1b06e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xde>
   1b08a:	eb04 0300 	add.w	r3, r4, r0
   1b08e:	613b      	str	r3, [r7, #16]
   1b090:	4620      	mov	r0, r4
   1b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b096:	2300      	movs	r3, #0
   1b098:	60fb      	str	r3, [r7, #12]
   1b09a:	e7e2      	b.n	1b062 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd2>
   1b09c:	1d33      	adds	r3, r6, #4
   1b09e:	f023 0503 	bic.w	r5, r3, #3	; 0x3
   1b0a2:	f855 4b04 	ldr.w	r4, [r5], #4
   1b0a6:	607c      	str	r4, [r7, #4]
   1b0a8:	e7c1      	b.n	1b02e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x9e>
   1b0aa:	786a      	ldrb	r2, [r5, #1]
   1b0ac:	7873      	ldrb	r3, [r6, #1]
   1b0ae:	78a9      	ldrb	r1, [r5, #2]
   1b0b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b0b4:	78ea      	ldrb	r2, [r5, #3]
   1b0b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b0ba:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1b0be:	3504      	adds	r5, #4
   1b0c0:	e7a9      	b.n	1b016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1b0c2:	786a      	ldrb	r2, [r5, #1]
   1b0c4:	7873      	ldrb	r3, [r6, #1]
   1b0c6:	78a9      	ldrb	r1, [r5, #2]
   1b0c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b0cc:	78ea      	ldrb	r2, [r5, #3]
   1b0ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b0d2:	ea43 6402 	orr.w	r4, r3, r2, lsl #24
   1b0d6:	3508      	adds	r5, #8
   1b0d8:	e79d      	b.n	1b016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1b0da:	786b      	ldrb	r3, [r5, #1]
   1b0dc:	7872      	ldrb	r2, [r6, #1]
   1b0de:	3502      	adds	r5, #2
   1b0e0:	ea42 2403 	orr.w	r4, r2, r3, lsl #8
   1b0e4:	e797      	b.n	1b016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1b0e6:	f002 fde9 	bl	1dcbc <abort>
   1b0ea:	2400      	movs	r4, #0
   1b0ec:	1cb1      	adds	r1, r6, #2
   1b0ee:	46a4      	mov	ip, r4
   1b0f0:	f811 2c01 	ldrb.w	r2, [r1, #-1]
   1b0f4:	460d      	mov	r5, r1
   1b0f6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b0fa:	fa03 f30c 	lsl.w	r3, r3, ip
   1b0fe:	3101      	adds	r1, #1
   1b100:	431c      	orrs	r4, r3
   1b102:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b106:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1b10a:	d1f1      	bne.n	1b0f0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x160>
   1b10c:	e783      	b.n	1b016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1b10e:	786a      	ldrb	r2, [r5, #1]
   1b110:	7873      	ldrb	r3, [r6, #1]
   1b112:	3502      	adds	r5, #2
   1b114:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b118:	041b      	lsls	r3, r3, #16
   1b11a:	141c      	asrs	r4, r3, #16
   1b11c:	e77b      	b.n	1b016 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x86>
   1b11e:	46c0      	nop			(mov r8, r8)

0001b120 <__gxx_personality_v0>:
   1b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b124:	f101 0358 	add.w	r3, r1, #88	; 0x58
   1b128:	b093      	sub	sp, #76
   1b12a:	9311      	str	r3, [sp, #68]
   1b12c:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1b130:	2b01      	cmp	r3, #1
   1b132:	468a      	mov	sl, r1
   1b134:	4691      	mov	r9, r2
   1b136:	f000 813f 	beq.w	1b3b8 <__gxx_personality_v0+0x298>
   1b13a:	2b02      	cmp	r3, #2
   1b13c:	f000 8132 	beq.w	1b3a4 <__gxx_personality_v0+0x284>
   1b140:	2b00      	cmp	r3, #0
   1b142:	d156      	bne.n	1b1f2 <__gxx_personality_v0+0xd2>
   1b144:	f000 0508 	and.w	r5, r0, #8	; 0x8
   1b148:	2301      	movs	r3, #1
   1b14a:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1b14e:	2100      	movs	r1, #0
   1b150:	ea45 0303 	orr.w	r3, r5, r3
   1b154:	220c      	movs	r2, #12
   1b156:	9306      	str	r3, [sp, #24]
   1b158:	4648      	mov	r0, r9
   1b15a:	460b      	mov	r3, r1
   1b15c:	f8cd a03c 	str.w	sl, [sp, #60]
   1b160:	f8cd b000 	str.w	fp, [sp]
   1b164:	f7fd ffc4 	bl	190f0 <_Unwind_VRS_Set>
   1b168:	9a06      	ldr	r2, [sp, #24]
   1b16a:	2a06      	cmp	r2, #6
   1b16c:	f000 8144 	beq.w	1b3f8 <__gxx_personality_v0+0x2d8>
   1b170:	4648      	mov	r0, r9
   1b172:	f7fe fde9 	bl	19d48 <_Unwind_GetLanguageSpecificData>
   1b176:	9004      	str	r0, [sp, #16]
   1b178:	2800      	cmp	r0, #0
   1b17a:	f000 8113 	beq.w	1b3a4 <__gxx_personality_v0+0x284>
   1b17e:	aa09      	add	r2, sp, #36
   1b180:	9904      	ldr	r1, [sp, #16]
   1b182:	4648      	mov	r0, r9
   1b184:	f7ff ff04 	bl	1af90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1b188:	4649      	mov	r1, r9
   1b18a:	4604      	mov	r4, r0
   1b18c:	f89d 0038 	ldrb.w	r0, [sp, #56]
   1b190:	f7ff fed8 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1b194:	2100      	movs	r1, #0
   1b196:	900b      	str	r0, [sp, #44]
   1b198:	460b      	mov	r3, r1
   1b19a:	4648      	mov	r0, r9
   1b19c:	220f      	movs	r2, #15
   1b19e:	f8cd b000 	str.w	fp, [sp]
   1b1a2:	f7fd ff7d 	bl	190a0 <_Unwind_VRS_Get>
   1b1a6:	9b0f      	ldr	r3, [sp, #60]
   1b1a8:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1b1ac:	3b01      	subs	r3, #1
   1b1ae:	9307      	str	r3, [sp, #28]
   1b1b0:	9b0d      	ldr	r3, [sp, #52]
   1b1b2:	429c      	cmp	r4, r3
   1b1b4:	f080 8230 	bcs.w	1b618 <__gxx_personality_v0+0x4f8>
   1b1b8:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1b1bc:	2100      	movs	r1, #0
   1b1be:	4628      	mov	r0, r5
   1b1c0:	f7ff fec0 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1b1c4:	2d50      	cmp	r5, #80
   1b1c6:	f000 80cb 	beq.w	1b360 <__gxx_personality_v0+0x240>
   1b1ca:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1b1ce:	46a4      	mov	ip, r4
   1b1d0:	2b0c      	cmp	r3, #12
   1b1d2:	d80e      	bhi.n	1b1f2 <__gxx_personality_v0+0xd2>
   1b1d4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b1d8:	017e000f 	.word	0x017e000f
   1b1dc:	000f018b 	.word	0x000f018b
   1b1e0:	000d0158 	.word	0x000d0158
   1b1e4:	000d000d 	.word	0x000d000d
   1b1e8:	0199000d 	.word	0x0199000d
   1b1ec:	000f0191 	.word	0x000f0191
   1b1f0:	0158      	.short	0x0158
   1b1f2:	f002 fd63 	bl	1dcbc <abort>
   1b1f6:	7862      	ldrb	r2, [r4, #1]
   1b1f8:	7823      	ldrb	r3, [r4, #0]
   1b1fa:	78a1      	ldrb	r1, [r4, #2]
   1b1fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b200:	78e2      	ldrb	r2, [r4, #3]
   1b202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b206:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1b20a:	3404      	adds	r4, #4
   1b20c:	b14f      	cbz	r7, 1b222 <__gxx_personality_v0+0x102>
   1b20e:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1b212:	2b10      	cmp	r3, #16
   1b214:	bf08      	it	eq
   1b216:	4660      	moveq	r0, ip
   1b218:	183f      	adds	r7, r7, r0
   1b21a:	f015 0f80 	tst.w	r5, #128	; 0x80
   1b21e:	bf18      	it	ne
   1b220:	683f      	ldrne	r7, [r7, #0]
   1b222:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1b226:	2100      	movs	r1, #0
   1b228:	4628      	mov	r0, r5
   1b22a:	f7ff fe8b 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1b22e:	2d50      	cmp	r5, #80
   1b230:	f000 80a4 	beq.w	1b37c <__gxx_personality_v0+0x25c>
   1b234:	f005 030f 	and.w	r3, r5, #15	; 0xf
   1b238:	46a4      	mov	ip, r4
   1b23a:	2b0c      	cmp	r3, #12
   1b23c:	d8d9      	bhi.n	1b1f2 <__gxx_personality_v0+0xd2>
   1b23e:	a201      	add	r2, pc, #4	(adr r2, 1b244 <__gxx_personality_v0+0x124>)
   1b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b244:	0001b279 	.word	0x0001b279
   1b248:	0001b54d 	.word	0x0001b54d
   1b24c:	0001b541 	.word	0x0001b541
   1b250:	0001b279 	.word	0x0001b279
   1b254:	0001b4a5 	.word	0x0001b4a5
   1b258:	0001b1f3 	.word	0x0001b1f3
   1b25c:	0001b1f3 	.word	0x0001b1f3
   1b260:	0001b1f3 	.word	0x0001b1f3
   1b264:	0001b1f3 	.word	0x0001b1f3
   1b268:	0001b577 	.word	0x0001b577
   1b26c:	0001b567 	.word	0x0001b567
   1b270:	0001b279 	.word	0x0001b279
   1b274:	0001b4a5 	.word	0x0001b4a5
   1b278:	7862      	ldrb	r2, [r4, #1]
   1b27a:	7823      	ldrb	r3, [r4, #0]
   1b27c:	78a1      	ldrb	r1, [r4, #2]
   1b27e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b282:	78e2      	ldrb	r2, [r4, #3]
   1b284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b288:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1b28c:	3404      	adds	r4, #4
   1b28e:	b14e      	cbz	r6, 1b2a4 <__gxx_personality_v0+0x184>
   1b290:	f005 0370 	and.w	r3, r5, #112	; 0x70
   1b294:	2b10      	cmp	r3, #16
   1b296:	bf08      	it	eq
   1b298:	4660      	moveq	r0, ip
   1b29a:	1836      	adds	r6, r6, r0
   1b29c:	f015 0f80 	tst.w	r5, #128	; 0x80
   1b2a0:	bf18      	it	ne
   1b2a2:	6836      	ldrne	r6, [r6, #0]
   1b2a4:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1b2a8:	2100      	movs	r1, #0
   1b2aa:	4640      	mov	r0, r8
   1b2ac:	f7ff fe4a 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1b2b0:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1b2b4:	d070      	beq.n	1b398 <__gxx_personality_v0+0x278>
   1b2b6:	f008 030f 	and.w	r3, r8, #15	; 0xf
   1b2ba:	46a4      	mov	ip, r4
   1b2bc:	2b0c      	cmp	r3, #12
   1b2be:	d898      	bhi.n	1b1f2 <__gxx_personality_v0+0xd2>
   1b2c0:	a201      	add	r2, pc, #4	(adr r2, 1b2c8 <__gxx_personality_v0+0x1a8>)
   1b2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b2c6:	46c0      	nop			(mov r8, r8)
   1b2c8:	0001b2fd 	.word	0x0001b2fd
   1b2cc:	0001b5b9 	.word	0x0001b5b9
   1b2d0:	0001b5ad 	.word	0x0001b5ad
   1b2d4:	0001b2fd 	.word	0x0001b2fd
   1b2d8:	0001b4bd 	.word	0x0001b4bd
   1b2dc:	0001b1f3 	.word	0x0001b1f3
   1b2e0:	0001b1f3 	.word	0x0001b1f3
   1b2e4:	0001b1f3 	.word	0x0001b1f3
   1b2e8:	0001b1f3 	.word	0x0001b1f3
   1b2ec:	0001b5e3 	.word	0x0001b5e3
   1b2f0:	0001b5d3 	.word	0x0001b5d3
   1b2f4:	0001b2fd 	.word	0x0001b2fd
   1b2f8:	0001b4bd 	.word	0x0001b4bd
   1b2fc:	7862      	ldrb	r2, [r4, #1]
   1b2fe:	7823      	ldrb	r3, [r4, #0]
   1b300:	78a1      	ldrb	r1, [r4, #2]
   1b302:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b306:	78e2      	ldrb	r2, [r4, #3]
   1b308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b30c:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1b310:	3404      	adds	r4, #4
   1b312:	b14d      	cbz	r5, 1b328 <__gxx_personality_v0+0x208>
   1b314:	f008 0370 	and.w	r3, r8, #112	; 0x70
   1b318:	2b10      	cmp	r3, #16
   1b31a:	bf08      	it	eq
   1b31c:	4660      	moveq	r0, ip
   1b31e:	182d      	adds	r5, r5, r0
   1b320:	f018 0f80 	tst.w	r8, #128	; 0x80
   1b324:	bf18      	it	ne
   1b326:	682d      	ldrne	r5, [r5, #0]
   1b328:	2000      	movs	r0, #0
   1b32a:	4601      	mov	r1, r0
   1b32c:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b330:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b334:	408b      	lsls	r3, r1
   1b336:	3107      	adds	r1, #7
   1b338:	4318      	orrs	r0, r3
   1b33a:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b33e:	d1f5      	bne.n	1b32c <__gxx_personality_v0+0x20c>
   1b340:	9b09      	ldr	r3, [sp, #36]
   1b342:	9a07      	ldr	r2, [sp, #28]
   1b344:	443b      	add	r3, r7
   1b346:	429a      	cmp	r2, r3
   1b348:	bf3c      	itt	cc
   1b34a:	9c0d      	ldrcc	r4, [sp, #52]
   1b34c:	4623      	movcc	r3, r4
   1b34e:	f4ff af30 	bcc.w	1b1b2 <__gxx_personality_v0+0x92>
   1b352:	9a07      	ldr	r2, [sp, #28]
   1b354:	4433      	add	r3, r6
   1b356:	429a      	cmp	r2, r3
   1b358:	f0c0 8189 	bcc.w	1b66e <__gxx_personality_v0+0x54e>
   1b35c:	9b0d      	ldr	r3, [sp, #52]
   1b35e:	e728      	b.n	1b1b2 <__gxx_personality_v0+0x92>
   1b360:	f89d 5039 	ldrb.w	r5, [sp, #57]
   1b364:	1ce3      	adds	r3, r4, #3
   1b366:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1b36a:	2100      	movs	r1, #0
   1b36c:	4628      	mov	r0, r5
   1b36e:	f854 7b04 	ldr.w	r7, [r4], #4
   1b372:	f7ff fde7 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1b376:	2d50      	cmp	r5, #80
   1b378:	f47f af5c 	bne.w	1b234 <__gxx_personality_v0+0x114>
   1b37c:	f89d 8039 	ldrb.w	r8, [sp, #57]
   1b380:	1ce3      	adds	r3, r4, #3
   1b382:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1b386:	2100      	movs	r1, #0
   1b388:	4640      	mov	r0, r8
   1b38a:	f854 6b04 	ldr.w	r6, [r4], #4
   1b38e:	f7ff fdd9 	bl	1af44 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1b392:	f1b8 0f50 	cmp.w	r8, #80	; 0x50
   1b396:	d18e      	bne.n	1b2b6 <__gxx_personality_v0+0x196>
   1b398:	1ce3      	adds	r3, r4, #3
   1b39a:	f023 0403 	bic.w	r4, r3, #3	; 0x3
   1b39e:	f854 5b04 	ldr.w	r5, [r4], #4
   1b3a2:	e7c1      	b.n	1b328 <__gxx_personality_v0+0x208>
   1b3a4:	4650      	mov	r0, sl
   1b3a6:	4649      	mov	r1, r9
   1b3a8:	f7fe fe62 	bl	1a070 <__gnu_unwind_frame>
   1b3ac:	2800      	cmp	r0, #0
   1b3ae:	d077      	beq.n	1b4a0 <__gxx_personality_v0+0x380>
   1b3b0:	2009      	movs	r0, #9
   1b3b2:	b013      	add	sp, #76
   1b3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3b8:	f010 0508 	ands.w	r5, r0, #8	; 0x8
   1b3bc:	bf18      	it	ne
   1b3be:	f10d 0b3c 	addne.w	fp, sp, #60	; 0x3c
   1b3c2:	d15f      	bne.n	1b484 <__gxx_personality_v0+0x364>
   1b3c4:	6a0c      	ldr	r4, [r1, #32]
   1b3c6:	4610      	mov	r0, r2
   1b3c8:	462b      	mov	r3, r5
   1b3ca:	220d      	movs	r2, #13
   1b3cc:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
   1b3d0:	4629      	mov	r1, r5
   1b3d2:	f8cd b000 	str.w	fp, [sp]
   1b3d6:	f7fd fe63 	bl	190a0 <_Unwind_VRS_Get>
   1b3da:	9b0f      	ldr	r3, [sp, #60]
   1b3dc:	429c      	cmp	r4, r3
   1b3de:	d151      	bne.n	1b484 <__gxx_personality_v0+0x364>
   1b3e0:	462b      	mov	r3, r5
   1b3e2:	4648      	mov	r0, r9
   1b3e4:	4629      	mov	r1, r5
   1b3e6:	220c      	movs	r2, #12
   1b3e8:	f8cd a03c 	str.w	sl, [sp, #60]
   1b3ec:	f8cd b000 	str.w	fp, [sp]
   1b3f0:	f7fd fe7e 	bl	190f0 <_Unwind_VRS_Set>
   1b3f4:	2306      	movs	r3, #6
   1b3f6:	9306      	str	r3, [sp, #24]
   1b3f8:	f8da 8030 	ldr.w	r8, [sl, #48]
   1b3fc:	f8da 1028 	ldr.w	r1, [sl, #40]
   1b400:	f8da 002c 	ldr.w	r0, [sl, #44]
   1b404:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1b408:	f000 8129 	beq.w	1b65e <__gxx_personality_v0+0x53e>
   1b40c:	460f      	mov	r7, r1
   1b40e:	9004      	str	r0, [sp, #16]
   1b410:	2403      	movs	r4, #3
   1b412:	9b06      	ldr	r3, [sp, #24]
   1b414:	f013 0508 	ands.w	r5, r3, #8	; 0x8
   1b418:	f000 81df 	beq.w	1b7da <__gxx_personality_v0+0x6ba>
   1b41c:	2c01      	cmp	r4, #1
   1b41e:	f000 81da 	beq.w	1b7d6 <__gxx_personality_v0+0x6b6>
   1b422:	2f00      	cmp	r7, #0
   1b424:	f2c0 81d5 	blt.w	1b7d2 <__gxx_personality_v0+0x6b2>
   1b428:	2100      	movs	r1, #0
   1b42a:	460a      	mov	r2, r1
   1b42c:	460b      	mov	r3, r1
   1b42e:	4648      	mov	r0, r9
   1b430:	f8cd a03c 	str.w	sl, [sp, #60]
   1b434:	f8cd b000 	str.w	fp, [sp]
   1b438:	f7fd fe5a 	bl	190f0 <_Unwind_VRS_Set>
   1b43c:	2100      	movs	r1, #0
   1b43e:	2201      	movs	r2, #1
   1b440:	460b      	mov	r3, r1
   1b442:	4648      	mov	r0, r9
   1b444:	970f      	str	r7, [sp, #60]
   1b446:	f8cd b000 	str.w	fp, [sp]
   1b44a:	f7fd fe51 	bl	190f0 <_Unwind_VRS_Set>
   1b44e:	2100      	movs	r1, #0
   1b450:	220f      	movs	r2, #15
   1b452:	460b      	mov	r3, r1
   1b454:	4648      	mov	r0, r9
   1b456:	f8cd b000 	str.w	fp, [sp]
   1b45a:	f7fd fe21 	bl	190a0 <_Unwind_VRS_Get>
   1b45e:	9b0f      	ldr	r3, [sp, #60]
   1b460:	2100      	movs	r1, #0
   1b462:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1b466:	ea48 0303 	orr.w	r3, r8, r3
   1b46a:	930f      	str	r3, [sp, #60]
   1b46c:	220f      	movs	r2, #15
   1b46e:	4648      	mov	r0, r9
   1b470:	460b      	mov	r3, r1
   1b472:	f8cd b000 	str.w	fp, [sp]
   1b476:	f7fd fe3b 	bl	190f0 <_Unwind_VRS_Set>
   1b47a:	2c02      	cmp	r4, #2
   1b47c:	f000 80f2 	beq.w	1b664 <__gxx_personality_v0+0x544>
   1b480:	2007      	movs	r0, #7
   1b482:	e796      	b.n	1b3b2 <__gxx_personality_v0+0x292>
   1b484:	2302      	movs	r3, #2
   1b486:	e662      	b.n	1b14e <__gxx_personality_v0+0x2e>
   1b488:	7862      	ldrb	r2, [r4, #1]
   1b48a:	7823      	ldrb	r3, [r4, #0]
   1b48c:	78a1      	ldrb	r1, [r4, #2]
   1b48e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b492:	78e2      	ldrb	r2, [r4, #3]
   1b494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b498:	ea43 6702 	orr.w	r7, r3, r2, lsl #24
   1b49c:	3408      	adds	r4, #8
   1b49e:	e6b5      	b.n	1b20c <__gxx_personality_v0+0xec>
   1b4a0:	2008      	movs	r0, #8
   1b4a2:	e786      	b.n	1b3b2 <__gxx_personality_v0+0x292>
   1b4a4:	7862      	ldrb	r2, [r4, #1]
   1b4a6:	7823      	ldrb	r3, [r4, #0]
   1b4a8:	78a1      	ldrb	r1, [r4, #2]
   1b4aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b4ae:	78e2      	ldrb	r2, [r4, #3]
   1b4b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b4b4:	ea43 6602 	orr.w	r6, r3, r2, lsl #24
   1b4b8:	3408      	adds	r4, #8
   1b4ba:	e6e8      	b.n	1b28e <__gxx_personality_v0+0x16e>
   1b4bc:	7862      	ldrb	r2, [r4, #1]
   1b4be:	7823      	ldrb	r3, [r4, #0]
   1b4c0:	78a1      	ldrb	r1, [r4, #2]
   1b4c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b4c6:	78e2      	ldrb	r2, [r4, #3]
   1b4c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b4cc:	ea43 6502 	orr.w	r5, r3, r2, lsl #24
   1b4d0:	3408      	adds	r4, #8
   1b4d2:	e71e      	b.n	1b312 <__gxx_personality_v0+0x1f2>
   1b4d4:	2700      	movs	r7, #0
   1b4d6:	4639      	mov	r1, r7
   1b4d8:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b4dc:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b4e0:	408b      	lsls	r3, r1
   1b4e2:	3107      	adds	r1, #7
   1b4e4:	431f      	orrs	r7, r3
   1b4e6:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b4ea:	d1f5      	bne.n	1b4d8 <__gxx_personality_v0+0x3b8>
   1b4ec:	e68e      	b.n	1b20c <__gxx_personality_v0+0xec>
   1b4ee:	7822      	ldrb	r2, [r4, #0]
   1b4f0:	7863      	ldrb	r3, [r4, #1]
   1b4f2:	3402      	adds	r4, #2
   1b4f4:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1b4f8:	e688      	b.n	1b20c <__gxx_personality_v0+0xec>
   1b4fa:	7823      	ldrb	r3, [r4, #0]
   1b4fc:	7862      	ldrb	r2, [r4, #1]
   1b4fe:	3402      	adds	r4, #2
   1b500:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b504:	041b      	lsls	r3, r3, #16
   1b506:	141f      	asrs	r7, r3, #16
   1b508:	e680      	b.n	1b20c <__gxx_personality_v0+0xec>
   1b50a:	2700      	movs	r7, #0
   1b50c:	4639      	mov	r1, r7
   1b50e:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b512:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b516:	408b      	lsls	r3, r1
   1b518:	3107      	adds	r1, #7
   1b51a:	431f      	orrs	r7, r3
   1b51c:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b520:	d1f5      	bne.n	1b50e <__gxx_personality_v0+0x3ee>
   1b522:	291f      	cmp	r1, #31
   1b524:	f63f ae72 	bhi.w	1b20c <__gxx_personality_v0+0xec>
   1b528:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b52c:	f43f ae6e 	beq.w	1b20c <__gxx_personality_v0+0xec>
   1b530:	2201      	movs	r2, #1
   1b532:	fa12 f301 	lsls.w	r3, r2, r1
   1b536:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1b53a:	ea43 0707 	orr.w	r7, r3, r7
   1b53e:	e665      	b.n	1b20c <__gxx_personality_v0+0xec>
   1b540:	7822      	ldrb	r2, [r4, #0]
   1b542:	7863      	ldrb	r3, [r4, #1]
   1b544:	3402      	adds	r4, #2
   1b546:	ea42 2603 	orr.w	r6, r2, r3, lsl #8
   1b54a:	e6a0      	b.n	1b28e <__gxx_personality_v0+0x16e>
   1b54c:	2600      	movs	r6, #0
   1b54e:	4631      	mov	r1, r6
   1b550:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b554:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b558:	408b      	lsls	r3, r1
   1b55a:	3107      	adds	r1, #7
   1b55c:	431e      	orrs	r6, r3
   1b55e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b562:	d1f5      	bne.n	1b550 <__gxx_personality_v0+0x430>
   1b564:	e693      	b.n	1b28e <__gxx_personality_v0+0x16e>
   1b566:	7823      	ldrb	r3, [r4, #0]
   1b568:	7862      	ldrb	r2, [r4, #1]
   1b56a:	3402      	adds	r4, #2
   1b56c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b570:	041b      	lsls	r3, r3, #16
   1b572:	141e      	asrs	r6, r3, #16
   1b574:	e68b      	b.n	1b28e <__gxx_personality_v0+0x16e>
   1b576:	2600      	movs	r6, #0
   1b578:	4631      	mov	r1, r6
   1b57a:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b57e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b582:	408b      	lsls	r3, r1
   1b584:	3107      	adds	r1, #7
   1b586:	431e      	orrs	r6, r3
   1b588:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b58c:	d1f5      	bne.n	1b57a <__gxx_personality_v0+0x45a>
   1b58e:	291f      	cmp	r1, #31
   1b590:	f63f ae7d 	bhi.w	1b28e <__gxx_personality_v0+0x16e>
   1b594:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b598:	f43f ae79 	beq.w	1b28e <__gxx_personality_v0+0x16e>
   1b59c:	2201      	movs	r2, #1
   1b59e:	fa12 f301 	lsls.w	r3, r2, r1
   1b5a2:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1b5a6:	ea43 0606 	orr.w	r6, r3, r6
   1b5aa:	e670      	b.n	1b28e <__gxx_personality_v0+0x16e>
   1b5ac:	7822      	ldrb	r2, [r4, #0]
   1b5ae:	7863      	ldrb	r3, [r4, #1]
   1b5b0:	3402      	adds	r4, #2
   1b5b2:	ea42 2503 	orr.w	r5, r2, r3, lsl #8
   1b5b6:	e6ac      	b.n	1b312 <__gxx_personality_v0+0x1f2>
   1b5b8:	2500      	movs	r5, #0
   1b5ba:	4629      	mov	r1, r5
   1b5bc:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b5c0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b5c4:	408b      	lsls	r3, r1
   1b5c6:	3107      	adds	r1, #7
   1b5c8:	431d      	orrs	r5, r3
   1b5ca:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b5ce:	d1f5      	bne.n	1b5bc <__gxx_personality_v0+0x49c>
   1b5d0:	e69f      	b.n	1b312 <__gxx_personality_v0+0x1f2>
   1b5d2:	7823      	ldrb	r3, [r4, #0]
   1b5d4:	7862      	ldrb	r2, [r4, #1]
   1b5d6:	3402      	adds	r4, #2
   1b5d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b5dc:	041b      	lsls	r3, r3, #16
   1b5de:	141d      	asrs	r5, r3, #16
   1b5e0:	e697      	b.n	1b312 <__gxx_personality_v0+0x1f2>
   1b5e2:	2500      	movs	r5, #0
   1b5e4:	4629      	mov	r1, r5
   1b5e6:	f814 2b01 	ldrb.w	r2, [r4], #1
   1b5ea:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b5ee:	408b      	lsls	r3, r1
   1b5f0:	3107      	adds	r1, #7
   1b5f2:	431d      	orrs	r5, r3
   1b5f4:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b5f8:	d1f5      	bne.n	1b5e6 <__gxx_personality_v0+0x4c6>
   1b5fa:	291f      	cmp	r1, #31
   1b5fc:	f63f ae89 	bhi.w	1b312 <__gxx_personality_v0+0x1f2>
   1b600:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b604:	f43f ae85 	beq.w	1b312 <__gxx_personality_v0+0x1f2>
   1b608:	2201      	movs	r2, #1
   1b60a:	fa12 f301 	lsls.w	r3, r2, r1
   1b60e:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1b612:	ea43 0505 	orr.w	r5, r3, r5
   1b616:	e67c      	b.n	1b312 <__gxx_personality_v0+0x1f2>
   1b618:	f04f 0800 	mov.w	r8, #0	; 0x0
   1b61c:	2401      	movs	r4, #1
   1b61e:	4647      	mov	r7, r8
   1b620:	9b06      	ldr	r3, [sp, #24]
   1b622:	f013 0f01 	tst.w	r3, #1	; 0x1
   1b626:	f43f aef4 	beq.w	1b412 <__gxx_personality_v0+0x2f2>
   1b62a:	2c02      	cmp	r4, #2
   1b62c:	f43f aeba 	beq.w	1b3a4 <__gxx_personality_v0+0x284>
   1b630:	2100      	movs	r1, #0
   1b632:	220d      	movs	r2, #13
   1b634:	460b      	mov	r3, r1
   1b636:	4648      	mov	r0, r9
   1b638:	9c11      	ldr	r4, [sp, #68]
   1b63a:	f8cd b000 	str.w	fp, [sp]
   1b63e:	f7fd fd2f 	bl	190a0 <_Unwind_VRS_Get>
   1b642:	9b0f      	ldr	r3, [sp, #60]
   1b644:	9a04      	ldr	r2, [sp, #16]
   1b646:	f8ca 3020 	str.w	r3, [sl, #32]
   1b64a:	f8ca 4024 	str.w	r4, [sl, #36]
   1b64e:	f8ca 7028 	str.w	r7, [sl, #40]
   1b652:	f8ca 202c 	str.w	r2, [sl, #44]
   1b656:	f8ca 8030 	str.w	r8, [sl, #48]
   1b65a:	2006      	movs	r0, #6
   1b65c:	e6a9      	b.n	1b3b2 <__gxx_personality_v0+0x292>
   1b65e:	4650      	mov	r0, sl
   1b660:	f000 f9c4 	bl	1b9ec <__cxa_call_terminate>
   1b664:	4650      	mov	r0, sl
   1b666:	f7ff fba1 	bl	1adac <__cxa_begin_cleanup>
   1b66a:	2007      	movs	r0, #7
   1b66c:	e6a1      	b.n	1b3b2 <__gxx_personality_v0+0x292>
   1b66e:	2d00      	cmp	r5, #0
   1b670:	f040 80a0 	bne.w	1b7b4 <__gxx_personality_v0+0x694>
   1b674:	46a8      	mov	r8, r5
   1b676:	2800      	cmp	r0, #0
   1b678:	f000 809a 	beq.w	1b7b0 <__gxx_personality_v0+0x690>
   1b67c:	9b0d      	ldr	r3, [sp, #52]
   1b67e:	1e42      	subs	r2, r0, #1
   1b680:	441a      	add	r2, r3
   1b682:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1b686:	f43f ae8d 	beq.w	1b3a4 <__gxx_personality_v0+0x284>
   1b68a:	2a00      	cmp	r2, #0
   1b68c:	f000 809e 	beq.w	1b7cc <__gxx_personality_v0+0x6ac>
   1b690:	9b06      	ldr	r3, [sp, #24]
   1b692:	f013 0308 	ands.w	r3, r3, #8	; 0x8
   1b696:	9303      	str	r3, [sp, #12]
   1b698:	d001      	beq.n	1b69e <__gxx_personality_v0+0x57e>
   1b69a:	2300      	movs	r3, #0
   1b69c:	9311      	str	r3, [sp, #68]
   1b69e:	2300      	movs	r3, #0
   1b6a0:	9305      	str	r3, [sp, #20]
   1b6a2:	2000      	movs	r0, #0
   1b6a4:	4615      	mov	r5, r2
   1b6a6:	4601      	mov	r1, r0
   1b6a8:	f815 2b01 	ldrb.w	r2, [r5], #1
   1b6ac:	f002 037f 	and.w	r3, r2, #127	; 0x7f
   1b6b0:	408b      	lsls	r3, r1
   1b6b2:	3107      	adds	r1, #7
   1b6b4:	4318      	orrs	r0, r3
   1b6b6:	f012 0f80 	tst.w	r2, #128	; 0x80
   1b6ba:	d1f5      	bne.n	1b6a8 <__gxx_personality_v0+0x588>
   1b6bc:	291f      	cmp	r1, #31
   1b6be:	d809      	bhi.n	1b6d4 <__gxx_personality_v0+0x5b4>
   1b6c0:	f012 0f40 	tst.w	r2, #64	; 0x40
   1b6c4:	d006      	beq.n	1b6d4 <__gxx_personality_v0+0x5b4>
   1b6c6:	2201      	movs	r2, #1
   1b6c8:	fa12 f301 	lsls.w	r3, r2, r1
   1b6cc:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1b6d0:	ea43 0000 	orr.w	r0, r3, r0
   1b6d4:	2400      	movs	r4, #0
   1b6d6:	4607      	mov	r7, r0
   1b6d8:	46a4      	mov	ip, r4
   1b6da:	4622      	mov	r2, r4
   1b6dc:	5ca9      	ldrb	r1, [r5, r2]
   1b6de:	3201      	adds	r2, #1
   1b6e0:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1b6e4:	fa03 f30c 	lsl.w	r3, r3, ip
   1b6e8:	431c      	orrs	r4, r3
   1b6ea:	f011 0f80 	tst.w	r1, #128	; 0x80
   1b6ee:	f10c 0c07 	add.w	ip, ip, #7	; 0x7
   1b6f2:	d1f3      	bne.n	1b6dc <__gxx_personality_v0+0x5bc>
   1b6f4:	f1bc 0f1f 	cmp.w	ip, #31	; 0x1f
   1b6f8:	d809      	bhi.n	1b70e <__gxx_personality_v0+0x5ee>
   1b6fa:	f011 0f40 	tst.w	r1, #64	; 0x40
   1b6fe:	d006      	beq.n	1b70e <__gxx_personality_v0+0x5ee>
   1b700:	2201      	movs	r2, #1
   1b702:	fa02 f30c 	lsl.w	r3, r2, ip
   1b706:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1b70a:	ea43 0404 	orr.w	r4, r3, r4
   1b70e:	2800      	cmp	r0, #0
   1b710:	d106      	bne.n	1b720 <__gxx_personality_v0+0x600>
   1b712:	2301      	movs	r3, #1
   1b714:	9305      	str	r3, [sp, #20]
   1b716:	2c00      	cmp	r4, #0
   1b718:	d054      	beq.n	1b7c4 <__gxx_personality_v0+0x6a4>
   1b71a:	eb05 0204 	add.w	r2, r5, r4
   1b71e:	e7c0      	b.n	1b6a2 <__gxx_personality_v0+0x582>
   1b720:	dd15      	ble.n	1b74e <__gxx_personality_v0+0x62e>
   1b722:	0083      	lsls	r3, r0, #2
   1b724:	9a0c      	ldr	r2, [sp, #48]
   1b726:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1b72a:	58d0      	ldr	r0, [r2, r3]
   1b72c:	eb02 0103 	add.w	r1, r2, r3
   1b730:	b158      	cbz	r0, 1b74a <__gxx_personality_v0+0x62a>
   1b732:	1841      	adds	r1, r0, r1
   1b734:	d009      	beq.n	1b74a <__gxx_personality_v0+0x62a>
   1b736:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1b73a:	d0ec      	beq.n	1b716 <__gxx_personality_v0+0x5f6>
   1b73c:	4650      	mov	r0, sl
   1b73e:	2200      	movs	r2, #0
   1b740:	ab11      	add	r3, sp, #68
   1b742:	f7ff fb69 	bl	1ae18 <__cxa_type_match>
   1b746:	2800      	cmp	r0, #0
   1b748:	d0e5      	beq.n	1b716 <__gxx_personality_v0+0x5f6>
   1b74a:	2403      	movs	r4, #3
   1b74c:	e768      	b.n	1b620 <__gxx_personality_v0+0x500>
   1b74e:	f1ba 0f00 	cmp.w	sl, #0	; 0x0
   1b752:	d021      	beq.n	1b798 <__gxx_personality_v0+0x678>
   1b754:	9a03      	ldr	r2, [sp, #12]
   1b756:	b9fa      	cbnz	r2, 1b798 <__gxx_personality_v0+0x678>
   1b758:	9b11      	ldr	r3, [sp, #68]
   1b75a:	9a0c      	ldr	r2, [sp, #48]
   1b75c:	ea6f 0000 	mvn.w	r0, r0
   1b760:	9310      	str	r3, [sp, #64]
   1b762:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1b766:	0081      	lsls	r1, r0, #2
   1b768:	4411      	add	r1, r2
   1b76a:	b33b      	cbz	r3, 1b7bc <__gxx_personality_v0+0x69c>
   1b76c:	460e      	mov	r6, r1
   1b76e:	e002      	b.n	1b776 <__gxx_personality_v0+0x656>
   1b770:	f856 3f04 	ldr.w	r3, [r6, #4]!
   1b774:	b313      	cbz	r3, 1b7bc <__gxx_personality_v0+0x69c>
   1b776:	6831      	ldr	r1, [r6, #0]
   1b778:	b101      	cbz	r1, 1b77c <__gxx_personality_v0+0x65c>
   1b77a:	4431      	add	r1, r6
   1b77c:	4650      	mov	r0, sl
   1b77e:	2200      	movs	r2, #0
   1b780:	ab10      	add	r3, sp, #64
   1b782:	f7ff fb49 	bl	1ae18 <__cxa_type_match>
   1b786:	2800      	cmp	r0, #0
   1b788:	d0f2      	beq.n	1b770 <__gxx_personality_v0+0x650>
   1b78a:	2101      	movs	r1, #1
   1b78c:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1b790:	2800      	cmp	r0, #0
   1b792:	d0c0      	beq.n	1b716 <__gxx_personality_v0+0x5f6>
   1b794:	2403      	movs	r4, #3
   1b796:	e743      	b.n	1b620 <__gxx_personality_v0+0x500>
   1b798:	9a0c      	ldr	r2, [sp, #48]
   1b79a:	ea6f 0300 	mvn.w	r3, r0
   1b79e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1b7a2:	f1d1 0001 	rsbs	r0, r1, #1	; 0x1
   1b7a6:	bf38      	it	cc
   1b7a8:	2000      	movcc	r0, #0
   1b7aa:	2800      	cmp	r0, #0
   1b7ac:	d0b3      	beq.n	1b716 <__gxx_personality_v0+0x5f6>
   1b7ae:	e7f1      	b.n	1b794 <__gxx_personality_v0+0x674>
   1b7b0:	4602      	mov	r2, r0
   1b7b2:	e766      	b.n	1b682 <__gxx_personality_v0+0x562>
   1b7b4:	9b0a      	ldr	r3, [sp, #40]
   1b7b6:	eb05 0803 	add.w	r8, r5, r3
   1b7ba:	e75c      	b.n	1b676 <__gxx_personality_v0+0x556>
   1b7bc:	2100      	movs	r1, #0
   1b7be:	f081 0001 	eor.w	r0, r1, #1	; 0x1
   1b7c2:	e7e5      	b.n	1b790 <__gxx_personality_v0+0x670>
   1b7c4:	9a05      	ldr	r2, [sp, #20]
   1b7c6:	2a00      	cmp	r2, #0
   1b7c8:	f43f adec 	beq.w	1b3a4 <__gxx_personality_v0+0x284>
   1b7cc:	2402      	movs	r4, #2
   1b7ce:	2700      	movs	r7, #0
   1b7d0:	e726      	b.n	1b620 <__gxx_personality_v0+0x500>
   1b7d2:	f7ff fae3 	bl	1ad9c <_ZSt10unexpectedv>
   1b7d6:	f7ff fad3 	bl	1ad80 <_ZSt9terminatev>
   1b7da:	2c01      	cmp	r4, #1
   1b7dc:	f43f af3f 	beq.w	1b65e <__gxx_personality_v0+0x53e>
   1b7e0:	2f00      	cmp	r7, #0
   1b7e2:	f6bf ae21 	bge.w	1b428 <__gxx_personality_v0+0x308>
   1b7e6:	9904      	ldr	r1, [sp, #16]
   1b7e8:	aa09      	add	r2, sp, #36
   1b7ea:	4648      	mov	r0, r9
   1b7ec:	f7ff fbd0 	bl	1af90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1b7f0:	ea6f 0107 	mvn.w	r1, r7
   1b7f4:	9b0c      	ldr	r3, [sp, #48]
   1b7f6:	008a      	lsls	r2, r1, #2
   1b7f8:	eb03 0002 	add.w	r0, r3, r2
   1b7fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1b800:	b183      	cbz	r3, 1b824 <__gxx_personality_v0+0x704>
   1b802:	462a      	mov	r2, r5
   1b804:	3201      	adds	r2, #1
   1b806:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   1b80a:	2b00      	cmp	r3, #0
   1b80c:	d1fa      	bne.n	1b804 <__gxx_personality_v0+0x6e4>
   1b80e:	f8ca 2028 	str.w	r2, [sl, #40]
   1b812:	2300      	movs	r3, #0
   1b814:	2204      	movs	r2, #4
   1b816:	f8ca 302c 	str.w	r3, [sl, #44]
   1b81a:	f8ca 2030 	str.w	r2, [sl, #48]
   1b81e:	f8ca 0034 	str.w	r0, [sl, #52]
   1b822:	e601      	b.n	1b428 <__gxx_personality_v0+0x308>
   1b824:	461a      	mov	r2, r3
   1b826:	e7f2      	b.n	1b80e <__gxx_personality_v0+0x6ee>
   1b828:	f000 f9de 	bl	1bbe8 <__cxa_begin_catch>
   1b82c:	f7ff faa8 	bl	1ad80 <_ZSt9terminatev>
   1b830:	4604      	mov	r4, r0
   1b832:	f000 f991 	bl	1bb58 <__cxa_end_catch>
   1b836:	4620      	mov	r0, r4
   1b838:	f7f9 fe30 	bl	1549c <__cxa_end_cleanup>

0001b83c <__cxa_bad_typeid>:
   1b83c:	b500      	push	{lr}
   1b83e:	2004      	movs	r0, #4
   1b840:	b081      	sub	sp, #4
   1b842:	f000 fccb 	bl	1c1dc <__cxa_allocate_exception>
   1b846:	4b03      	ldr	r3, [pc, #12]	(1b854 <__cxa_bad_typeid+0x18>)
   1b848:	4903      	ldr	r1, [pc, #12]	(1b858 <__cxa_bad_typeid+0x1c>)
   1b84a:	6003      	str	r3, [r0, #0]
   1b84c:	4a03      	ldr	r2, [pc, #12]	(1b85c <__cxa_bad_typeid+0x20>)
   1b84e:	f000 fc53 	bl	1c0f8 <__cxa_throw>
   1b852:	46c0      	nop			(mov r8, r8)
   1b854:	00020350 	.word	0x00020350
   1b858:	00020370 	.word	0x00020370
   1b85c:	0001b88d 	.word	0x0001b88d

0001b860 <__cxa_bad_cast>:
   1b860:	b500      	push	{lr}
   1b862:	2004      	movs	r0, #4
   1b864:	b081      	sub	sp, #4
   1b866:	f000 fcb9 	bl	1c1dc <__cxa_allocate_exception>
   1b86a:	4b03      	ldr	r3, [pc, #12]	(1b878 <__cxa_bad_cast+0x18>)
   1b86c:	4903      	ldr	r1, [pc, #12]	(1b87c <__cxa_bad_cast+0x1c>)
   1b86e:	6003      	str	r3, [r0, #0]
   1b870:	4a03      	ldr	r2, [pc, #12]	(1b880 <__cxa_bad_cast+0x20>)
   1b872:	f000 fc41 	bl	1c0f8 <__cxa_throw>
   1b876:	46c0      	nop			(mov r8, r8)
   1b878:	00020428 	.word	0x00020428
   1b87c:	00020444 	.word	0x00020444
   1b880:	0001bc89 	.word	0x0001bc89

0001b884 <_ZNKSt10bad_typeid4whatEv>:
   1b884:	4800      	ldr	r0, [pc, #0]	(1b888 <_ZNKSt10bad_typeid4whatEv+0x4>)
   1b886:	4770      	bx	lr
   1b888:	00020334 	.word	0x00020334

0001b88c <_ZNSt10bad_typeidD1Ev>:
   1b88c:	4b03      	ldr	r3, [pc, #12]	(1b89c <_ZNSt10bad_typeidD1Ev+0x10>)
   1b88e:	b510      	push	{r4, lr}
   1b890:	6003      	str	r3, [r0, #0]
   1b892:	4604      	mov	r4, r0
   1b894:	f000 fad8 	bl	1be48 <_ZNSt9exceptionD2Ev>
   1b898:	4620      	mov	r0, r4
   1b89a:	bd10      	pop	{r4, pc}
   1b89c:	00020350 	.word	0x00020350

0001b8a0 <_ZNSt10bad_typeidD2Ev>:
   1b8a0:	4b03      	ldr	r3, [pc, #12]	(1b8b0 <_ZNSt10bad_typeidD2Ev+0x10>)
   1b8a2:	b510      	push	{r4, lr}
   1b8a4:	6003      	str	r3, [r0, #0]
   1b8a6:	4604      	mov	r4, r0
   1b8a8:	f000 face 	bl	1be48 <_ZNSt9exceptionD2Ev>
   1b8ac:	4620      	mov	r0, r4
   1b8ae:	bd10      	pop	{r4, pc}
   1b8b0:	00020350 	.word	0x00020350

0001b8b4 <_ZNSt10bad_typeidD0Ev>:
   1b8b4:	4b05      	ldr	r3, [pc, #20]	(1b8cc <_ZNSt10bad_typeidD0Ev+0x18>)
   1b8b6:	b510      	push	{r4, lr}
   1b8b8:	6003      	str	r3, [r0, #0]
   1b8ba:	4604      	mov	r4, r0
   1b8bc:	f000 fac4 	bl	1be48 <_ZNSt9exceptionD2Ev>
   1b8c0:	4620      	mov	r0, r4
   1b8c2:	f7f2 fdef 	bl	e4a4 <_ZdlPv>
   1b8c6:	4620      	mov	r0, r4
   1b8c8:	bd10      	pop	{r4, pc}
   1b8ca:	46c0      	nop			(mov r8, r8)
   1b8cc:	00020350 	.word	0x00020350

0001b8d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1b8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b8d2:	4b3f      	ldr	r3, [pc, #252]	(1b9d0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
   1b8d4:	b083      	sub	sp, #12
   1b8d6:	781c      	ldrb	r4, [r3, #0]
   1b8d8:	2c00      	cmp	r4, #0
   1b8da:	d13f      	bne.n	1b95c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
   1b8dc:	2501      	movs	r5, #1
   1b8de:	701d      	strb	r5, [r3, #0]
   1b8e0:	f000 fbc8 	bl	1c074 <__cxa_current_exception_type>
   1b8e4:	2800      	cmp	r0, #0
   1b8e6:	d043      	beq.n	1b970 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xa0>
   1b8e8:	6846      	ldr	r6, [r0, #4]
   1b8ea:	ab02      	add	r3, sp, #8
   1b8ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b8f0:	f843 2d04 	str.w	r2, [r3, #-4]!
   1b8f4:	4621      	mov	r1, r4
   1b8f6:	4622      	mov	r2, r4
   1b8f8:	4630      	mov	r0, r6
   1b8fa:	f7fc fb77 	bl	17fec <__cxa_demangle>
   1b8fe:	4c35      	ldr	r4, [pc, #212]	(1b9d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1b900:	4607      	mov	r7, r0
   1b902:	6822      	ldr	r2, [r4, #0]
   1b904:	4834      	ldr	r0, [pc, #208]	(1b9d8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
   1b906:	6893      	ldr	r3, [r2, #8]
   1b908:	4629      	mov	r1, r5
   1b90a:	2230      	movs	r2, #48
   1b90c:	f002 fc0a 	bl	1e124 <fwrite>
   1b910:	9b01      	ldr	r3, [sp, #4]
   1b912:	b17b      	cbz	r3, 1b934 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x64>
   1b914:	6823      	ldr	r3, [r4, #0]
   1b916:	4630      	mov	r0, r6
   1b918:	6899      	ldr	r1, [r3, #8]
   1b91a:	f002 fa49 	bl	1ddb0 <fputs>
   1b91e:	6822      	ldr	r2, [r4, #0]
   1b920:	482e      	ldr	r0, [pc, #184]	(1b9dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1b922:	6893      	ldr	r3, [r2, #8]
   1b924:	2101      	movs	r1, #1
   1b926:	2202      	movs	r2, #2
   1b928:	f002 fbfc 	bl	1e124 <fwrite>
   1b92c:	9b01      	ldr	r3, [sp, #4]
   1b92e:	b183      	cbz	r3, 1b952 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x82>
   1b930:	f000 fbaa 	bl	1c088 <__cxa_rethrow>
   1b934:	6823      	ldr	r3, [r4, #0]
   1b936:	4638      	mov	r0, r7
   1b938:	6899      	ldr	r1, [r3, #8]
   1b93a:	f002 fa39 	bl	1ddb0 <fputs>
   1b93e:	6822      	ldr	r2, [r4, #0]
   1b940:	4826      	ldr	r0, [pc, #152]	(1b9dc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
   1b942:	6893      	ldr	r3, [r2, #8]
   1b944:	2101      	movs	r1, #1
   1b946:	2202      	movs	r2, #2
   1b948:	f002 fbec 	bl	1e124 <fwrite>
   1b94c:	9b01      	ldr	r3, [sp, #4]
   1b94e:	2b00      	cmp	r3, #0
   1b950:	d1ee      	bne.n	1b930 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x60>
   1b952:	4638      	mov	r0, r7
   1b954:	f002 fbf8 	bl	1e148 <free>
   1b958:	f000 fb96 	bl	1c088 <__cxa_rethrow>
   1b95c:	4b1d      	ldr	r3, [pc, #116]	(1b9d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1b95e:	2101      	movs	r1, #1
   1b960:	681a      	ldr	r2, [r3, #0]
   1b962:	481f      	ldr	r0, [pc, #124]	(1b9e0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x110>)
   1b964:	6893      	ldr	r3, [r2, #8]
   1b966:	221d      	movs	r2, #29
   1b968:	f002 fbdc 	bl	1e124 <fwrite>
   1b96c:	f002 f9a6 	bl	1dcbc <abort>
   1b970:	4b18      	ldr	r3, [pc, #96]	(1b9d4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
   1b972:	4629      	mov	r1, r5
   1b974:	681a      	ldr	r2, [r3, #0]
   1b976:	481b      	ldr	r0, [pc, #108]	(1b9e4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x114>)
   1b978:	6893      	ldr	r3, [r2, #8]
   1b97a:	222d      	movs	r2, #45
   1b97c:	f002 fbd2 	bl	1e124 <fwrite>
   1b980:	f002 f99c 	bl	1dcbc <abort>
   1b984:	2902      	cmp	r1, #2
   1b986:	d005      	beq.n	1b994 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xc4>
   1b988:	f000 f92e 	bl	1bbe8 <__cxa_begin_catch>
   1b98c:	f000 f8e4 	bl	1bb58 <__cxa_end_catch>
   1b990:	f002 f994 	bl	1dcbc <abort>
   1b994:	f000 f928 	bl	1bbe8 <__cxa_begin_catch>
   1b998:	6803      	ldr	r3, [r0, #0]
   1b99a:	689a      	ldr	r2, [r3, #8]
   1b99c:	4790      	blx	r2
   1b99e:	6822      	ldr	r2, [r4, #0]
   1b9a0:	4605      	mov	r5, r0
   1b9a2:	6893      	ldr	r3, [r2, #8]
   1b9a4:	4810      	ldr	r0, [pc, #64]	(1b9e8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x118>)
   1b9a6:	2101      	movs	r1, #1
   1b9a8:	220b      	movs	r2, #11
   1b9aa:	f002 fbbb 	bl	1e124 <fwrite>
   1b9ae:	6823      	ldr	r3, [r4, #0]
   1b9b0:	4628      	mov	r0, r5
   1b9b2:	6899      	ldr	r1, [r3, #8]
   1b9b4:	f002 f9fc 	bl	1ddb0 <fputs>
   1b9b8:	6823      	ldr	r3, [r4, #0]
   1b9ba:	200a      	movs	r0, #10
   1b9bc:	6899      	ldr	r1, [r3, #8]
   1b9be:	f002 f9ad 	bl	1dd1c <fputc>
   1b9c2:	e7e3      	b.n	1b98c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xbc>
   1b9c4:	4605      	mov	r5, r0
   1b9c6:	f000 f8c7 	bl	1bb58 <__cxa_end_catch>
   1b9ca:	4628      	mov	r0, r5
   1b9cc:	f7f9 fd66 	bl	1549c <__cxa_end_cleanup>
   1b9d0:	2000067c 	.word	0x2000067c
   1b9d4:	20000044 	.word	0x20000044
   1b9d8:	0002039c 	.word	0x0002039c
   1b9dc:	000203d0 	.word	0x000203d0
   1b9e0:	0002037c 	.word	0x0002037c
   1b9e4:	000203e0 	.word	0x000203e0
   1b9e8:	000203d4 	.word	0x000203d4

0001b9ec <__cxa_call_terminate>:
   1b9ec:	b510      	push	{r4, lr}
   1b9ee:	4604      	mov	r4, r0
   1b9f0:	b120      	cbz	r0, 1b9fc <__cxa_call_terminate+0x10>
   1b9f2:	f000 f8f9 	bl	1bbe8 <__cxa_begin_catch>
   1b9f6:	7823      	ldrb	r3, [r4, #0]
   1b9f8:	2b47      	cmp	r3, #71
   1b9fa:	d001      	beq.n	1ba00 <__cxa_call_terminate+0x14>
   1b9fc:	f7ff f9c0 	bl	1ad80 <_ZSt9terminatev>
   1ba00:	7863      	ldrb	r3, [r4, #1]
   1ba02:	2b4e      	cmp	r3, #78
   1ba04:	d1fa      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba06:	78a3      	ldrb	r3, [r4, #2]
   1ba08:	2b55      	cmp	r3, #85
   1ba0a:	d1f7      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba0c:	78e3      	ldrb	r3, [r4, #3]
   1ba0e:	2b43      	cmp	r3, #67
   1ba10:	d1f4      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba12:	7923      	ldrb	r3, [r4, #4]
   1ba14:	2b43      	cmp	r3, #67
   1ba16:	d1f1      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba18:	7963      	ldrb	r3, [r4, #5]
   1ba1a:	2b2b      	cmp	r3, #43
   1ba1c:	d1ee      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba1e:	79a3      	ldrb	r3, [r4, #6]
   1ba20:	2b2b      	cmp	r3, #43
   1ba22:	d1eb      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba24:	79e3      	ldrb	r3, [r4, #7]
   1ba26:	2b00      	cmp	r3, #0
   1ba28:	d1e8      	bne.n	1b9fc <__cxa_call_terminate+0x10>
   1ba2a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1ba2e:	f7ff f999 	bl	1ad64 <_ZN10__cxxabiv111__terminateEPFvvE>
   1ba32:	46c0      	nop			(mov r8, r8)

0001ba34 <__cxa_call_unexpected>:
   1ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba38:	7803      	ldrb	r3, [r0, #0]
   1ba3a:	b085      	sub	sp, #20
   1ba3c:	2b47      	cmp	r3, #71
   1ba3e:	d00a      	beq.n	1ba56 <__cxa_call_unexpected+0x22>
   1ba40:	2400      	movs	r4, #0
   1ba42:	4627      	mov	r7, r4
   1ba44:	46a2      	mov	sl, r4
   1ba46:	46a0      	mov	r8, r4
   1ba48:	2501      	movs	r5, #1
   1ba4a:	4626      	mov	r6, r4
   1ba4c:	f000 f8cc 	bl	1bbe8 <__cxa_begin_catch>
   1ba50:	b30d      	cbz	r5, 1ba96 <__cxa_call_unexpected+0x62>
   1ba52:	f7ff f9a3 	bl	1ad9c <_ZSt10unexpectedv>
   1ba56:	7843      	ldrb	r3, [r0, #1]
   1ba58:	2b4e      	cmp	r3, #78
   1ba5a:	d1f1      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba5c:	7883      	ldrb	r3, [r0, #2]
   1ba5e:	2b55      	cmp	r3, #85
   1ba60:	d1ee      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba62:	78c3      	ldrb	r3, [r0, #3]
   1ba64:	2b43      	cmp	r3, #67
   1ba66:	d1eb      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba68:	7903      	ldrb	r3, [r0, #4]
   1ba6a:	2b43      	cmp	r3, #67
   1ba6c:	d1e8      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba6e:	7943      	ldrb	r3, [r0, #5]
   1ba70:	2b2b      	cmp	r3, #43
   1ba72:	d1e5      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba74:	7983      	ldrb	r3, [r0, #6]
   1ba76:	2b2b      	cmp	r3, #43
   1ba78:	d1e2      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba7a:	79c2      	ldrb	r2, [r0, #7]
   1ba7c:	2a00      	cmp	r2, #0
   1ba7e:	d1df      	bne.n	1ba40 <__cxa_call_unexpected+0xc>
   1ba80:	f1a0 0320 	sub.w	r3, r0, #32	; 0x20
   1ba84:	689e      	ldr	r6, [r3, #8]
   1ba86:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1ba8a:	f8d0 8028 	ldr.w	r8, [r0, #40]
   1ba8e:	6b04      	ldr	r4, [r0, #48]
   1ba90:	6b47      	ldr	r7, [r0, #52]
   1ba92:	4615      	mov	r5, r2
   1ba94:	e7da      	b.n	1ba4c <__cxa_call_unexpected+0x18>
   1ba96:	4630      	mov	r0, r6
   1ba98:	f7ff f97a 	bl	1ad90 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1ba9c:	f000 f8a4 	bl	1bbe8 <__cxa_begin_catch>
   1baa0:	2d00      	cmp	r5, #0
   1baa2:	d135      	bne.n	1bb10 <__cxa_call_unexpected+0xdc>
   1baa4:	f000 fb72 	bl	1c18c <__cxa_get_globals_fast>
   1baa8:	6800      	ldr	r0, [r0, #0]
   1baaa:	f1b8 0f00 	cmp.w	r8, #0	; 0x0
   1baae:	f100 0378 	add.w	r3, r0, #120	; 0x78
   1bab2:	9303      	str	r3, [sp, #12]
   1bab4:	dd3b      	ble.n	1bb2e <__cxa_call_unexpected+0xfa>
   1bab6:	3020      	adds	r0, #32
   1bab8:	463e      	mov	r6, r7
   1baba:	f024 0b03 	bic.w	fp, r4, #3	; 0x3
   1babe:	9001      	str	r0, [sp, #4]
   1bac0:	462f      	mov	r7, r5
   1bac2:	46a9      	mov	r9, r5
   1bac4:	6830      	ldr	r0, [r6, #0]
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d12e      	bne.n	1bb28 <__cxa_call_unexpected+0xf4>
   1baca:	4605      	mov	r5, r0
   1bacc:	9801      	ldr	r0, [sp, #4]
   1bace:	4629      	mov	r1, r5
   1bad0:	2200      	movs	r2, #0
   1bad2:	ab03      	add	r3, sp, #12
   1bad4:	f7ff f9a0 	bl	1ae18 <__cxa_type_match>
   1bad8:	4602      	mov	r2, r0
   1bada:	b9d8      	cbnz	r0, 1bb14 <__cxa_call_unexpected+0xe0>
   1badc:	682b      	ldr	r3, [r5, #0]
   1bade:	4628      	mov	r0, r5
   1bae0:	691c      	ldr	r4, [r3, #16]
   1bae2:	4914      	ldr	r1, [pc, #80]	(1bb34 <__cxa_call_unexpected+0x100>)
   1bae4:	2301      	movs	r3, #1
   1bae6:	47a0      	blx	r4
   1bae8:	3701      	adds	r7, #1
   1baea:	2800      	cmp	r0, #0
   1baec:	bf18      	it	ne
   1baee:	f04f 0901 	movne.w	r9, #1	; 0x1
   1baf2:	45b8      	cmp	r8, r7
   1baf4:	445e      	add	r6, fp
   1baf6:	dce5      	bgt.n	1bac4 <__cxa_call_unexpected+0x90>
   1baf8:	f1b9 0f00 	cmp.w	r9, #0	; 0x0
   1bafc:	d017      	beq.n	1bb2e <__cxa_call_unexpected+0xfa>
   1bafe:	2004      	movs	r0, #4
   1bb00:	f000 fb6c 	bl	1c1dc <__cxa_allocate_exception>
   1bb04:	4b0c      	ldr	r3, [pc, #48]	(1bb38 <__cxa_call_unexpected+0x104>)
   1bb06:	490b      	ldr	r1, [pc, #44]	(1bb34 <__cxa_call_unexpected+0x100>)
   1bb08:	6003      	str	r3, [r0, #0]
   1bb0a:	4a0c      	ldr	r2, [pc, #48]	(1bb3c <__cxa_call_unexpected+0x108>)
   1bb0c:	f000 faf4 	bl	1c0f8 <__cxa_throw>
   1bb10:	f7ff f936 	bl	1ad80 <_ZSt9terminatev>
   1bb14:	f000 fab8 	bl	1c088 <__cxa_rethrow>
   1bb18:	4606      	mov	r6, r0
   1bb1a:	f000 f81d 	bl	1bb58 <__cxa_end_catch>
   1bb1e:	f000 f81b 	bl	1bb58 <__cxa_end_catch>
   1bb22:	4630      	mov	r0, r6
   1bb24:	f7f9 fcba 	bl	1549c <__cxa_end_cleanup>
   1bb28:	eb06 0500 	add.w	r5, r6, r0
   1bb2c:	e7ce      	b.n	1bacc <__cxa_call_unexpected+0x98>
   1bb2e:	4650      	mov	r0, sl
   1bb30:	f7ff f918 	bl	1ad64 <_ZN10__cxxabiv111__terminateEPFvvE>
   1bb34:	00020970 	.word	0x00020970
   1bb38:	000208e0 	.word	0x000208e0
   1bb3c:	0001be6d 	.word	0x0001be6d

0001bb40 <__cxa_get_exception_ptr>:
   1bb40:	6a40      	ldr	r0, [r0, #36]
   1bb42:	4770      	bx	lr

0001bb44 <_ZSt18uncaught_exceptionv>:
   1bb44:	b500      	push	{lr}
   1bb46:	b081      	sub	sp, #4
   1bb48:	f000 fb24 	bl	1c194 <__cxa_get_globals>
   1bb4c:	6840      	ldr	r0, [r0, #4]
   1bb4e:	3800      	subs	r0, #0
   1bb50:	bf18      	it	ne
   1bb52:	2001      	movne	r0, #1
   1bb54:	b001      	add	sp, #4
   1bb56:	bd00      	pop	{pc}

0001bb58 <__cxa_end_catch>:
   1bb58:	b500      	push	{lr}
   1bb5a:	b081      	sub	sp, #4
   1bb5c:	f000 fb16 	bl	1c18c <__cxa_get_globals_fast>
   1bb60:	4601      	mov	r1, r0
   1bb62:	6800      	ldr	r0, [r0, #0]
   1bb64:	b140      	cbz	r0, 1bb78 <__cxa_end_catch+0x20>
   1bb66:	f890 3020 	ldrb.w	r3, [r0, #32]
   1bb6a:	2b47      	cmp	r3, #71
   1bb6c:	d006      	beq.n	1bb7c <__cxa_end_catch+0x24>
   1bb6e:	2300      	movs	r3, #0
   1bb70:	600b      	str	r3, [r1, #0]
   1bb72:	3020      	adds	r0, #32
   1bb74:	f7fd fb2a 	bl	191cc <_Unwind_DeleteException>
   1bb78:	b001      	add	sp, #4
   1bb7a:	bd00      	pop	{pc}
   1bb7c:	f890 3021 	ldrb.w	r3, [r0, #33]
   1bb80:	2b4e      	cmp	r3, #78
   1bb82:	d1f4      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bb84:	f890 3022 	ldrb.w	r3, [r0, #34]
   1bb88:	2b55      	cmp	r3, #85
   1bb8a:	d1f0      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bb8c:	f890 3023 	ldrb.w	r3, [r0, #35]
   1bb90:	2b43      	cmp	r3, #67
   1bb92:	d1ec      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bb94:	f890 3024 	ldrb.w	r3, [r0, #36]
   1bb98:	2b43      	cmp	r3, #67
   1bb9a:	d1e8      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bb9c:	f890 3025 	ldrb.w	r3, [r0, #37]
   1bba0:	2b2b      	cmp	r3, #43
   1bba2:	d1e4      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bba4:	f890 3026 	ldrb.w	r3, [r0, #38]
   1bba8:	2b2b      	cmp	r3, #43
   1bbaa:	d1e0      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bbac:	f890 3027 	ldrb.w	r3, [r0, #39]
   1bbb0:	2b00      	cmp	r3, #0
   1bbb2:	d1dc      	bne.n	1bb6e <__cxa_end_catch+0x16>
   1bbb4:	6943      	ldr	r3, [r0, #20]
   1bbb6:	2b00      	cmp	r3, #0
   1bbb8:	db09      	blt.n	1bbce <__cxa_end_catch+0x76>
   1bbba:	f113 32ff 	adds.w	r2, r3, #4294967295	; 0xffffffff
   1bbbe:	d00d      	beq.n	1bbdc <__cxa_end_catch+0x84>
   1bbc0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1bbc4:	d001      	beq.n	1bbca <__cxa_end_catch+0x72>
   1bbc6:	6142      	str	r2, [r0, #20]
   1bbc8:	e7d6      	b.n	1bb78 <__cxa_end_catch+0x20>
   1bbca:	f7ff f8d9 	bl	1ad80 <_ZSt9terminatev>
   1bbce:	1c5a      	adds	r2, r3, #1
   1bbd0:	bf08      	it	eq
   1bbd2:	6903      	ldreq	r3, [r0, #16]
   1bbd4:	6142      	str	r2, [r0, #20]
   1bbd6:	bf08      	it	eq
   1bbd8:	600b      	streq	r3, [r1, #0]
   1bbda:	e7cd      	b.n	1bb78 <__cxa_end_catch+0x20>
   1bbdc:	6903      	ldr	r3, [r0, #16]
   1bbde:	3020      	adds	r0, #32
   1bbe0:	600b      	str	r3, [r1, #0]
   1bbe2:	f7fd faf3 	bl	191cc <_Unwind_DeleteException>
   1bbe6:	e7c7      	b.n	1bb78 <__cxa_end_catch+0x20>

0001bbe8 <__cxa_begin_catch>:
   1bbe8:	b530      	push	{r4, r5, lr}
   1bbea:	b081      	sub	sp, #4
   1bbec:	4605      	mov	r5, r0
   1bbee:	f000 fad1 	bl	1c194 <__cxa_get_globals>
   1bbf2:	462a      	mov	r2, r5
   1bbf4:	f812 3920 	ldrb.w	r3, [r2], #-32
   1bbf8:	6801      	ldr	r1, [r0, #0]
   1bbfa:	2b47      	cmp	r3, #71
   1bbfc:	d006      	beq.n	1bc0c <__cxa_begin_catch+0x24>
   1bbfe:	2900      	cmp	r1, #0
   1bc00:	d134      	bne.n	1bc6c <__cxa_begin_catch+0x84>
   1bc02:	6002      	str	r2, [r0, #0]
   1bc04:	460c      	mov	r4, r1
   1bc06:	4620      	mov	r0, r4
   1bc08:	b001      	add	sp, #4
   1bc0a:	bd30      	pop	{r4, r5, pc}
   1bc0c:	f892 3021 	ldrb.w	r3, [r2, #33]
   1bc10:	2b4e      	cmp	r3, #78
   1bc12:	d1f4      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc14:	f892 3022 	ldrb.w	r3, [r2, #34]
   1bc18:	2b55      	cmp	r3, #85
   1bc1a:	d1f0      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc1c:	f892 3023 	ldrb.w	r3, [r2, #35]
   1bc20:	2b43      	cmp	r3, #67
   1bc22:	d1ec      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc24:	f892 3024 	ldrb.w	r3, [r2, #36]
   1bc28:	2b43      	cmp	r3, #67
   1bc2a:	d1e8      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc2c:	f892 3025 	ldrb.w	r3, [r2, #37]
   1bc30:	2b2b      	cmp	r3, #43
   1bc32:	d1e4      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc34:	f892 3026 	ldrb.w	r3, [r2, #38]
   1bc38:	2b2b      	cmp	r3, #43
   1bc3a:	d1e0      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc3c:	f892 3027 	ldrb.w	r3, [r2, #39]
   1bc40:	2b00      	cmp	r3, #0
   1bc42:	d1dc      	bne.n	1bbfe <__cxa_begin_catch+0x16>
   1bc44:	6953      	ldr	r3, [r2, #20]
   1bc46:	2b00      	cmp	r3, #0
   1bc48:	db0d      	blt.n	1bc66 <__cxa_begin_catch+0x7e>
   1bc4a:	3301      	adds	r3, #1
   1bc4c:	6153      	str	r3, [r2, #20]
   1bc4e:	6843      	ldr	r3, [r0, #4]
   1bc50:	3b01      	subs	r3, #1
   1bc52:	4291      	cmp	r1, r2
   1bc54:	6043      	str	r3, [r0, #4]
   1bc56:	bf1c      	itt	ne
   1bc58:	6111      	strne	r1, [r2, #16]
   1bc5a:	6002      	strne	r2, [r0, #0]
   1bc5c:	4628      	mov	r0, r5
   1bc5e:	6a6c      	ldr	r4, [r5, #36]
   1bc60:	f7fd fab2 	bl	191c8 <_Unwind_Complete>
   1bc64:	e7cf      	b.n	1bc06 <__cxa_begin_catch+0x1e>
   1bc66:	f1c3 0301 	rsb	r3, r3, #1	; 0x1
   1bc6a:	e7ef      	b.n	1bc4c <__cxa_begin_catch+0x64>
   1bc6c:	f7ff f888 	bl	1ad80 <_ZSt9terminatev>
   1bc70:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1bc74:	d001      	beq.n	1bc7a <__cxa_begin_catch+0x92>
   1bc76:	f7f9 fc11 	bl	1549c <__cxa_end_cleanup>
   1bc7a:	f7ff fedb 	bl	1ba34 <__cxa_call_unexpected>
   1bc7e:	46c0      	nop			(mov r8, r8)

0001bc80 <_ZNKSt8bad_cast4whatEv>:
   1bc80:	4800      	ldr	r0, [pc, #0]	(1bc84 <_ZNKSt8bad_cast4whatEv+0x4>)
   1bc82:	4770      	bx	lr
   1bc84:	00020410 	.word	0x00020410

0001bc88 <_ZNSt8bad_castD1Ev>:
   1bc88:	4b03      	ldr	r3, [pc, #12]	(1bc98 <_ZNSt8bad_castD1Ev+0x10>)
   1bc8a:	b510      	push	{r4, lr}
   1bc8c:	6003      	str	r3, [r0, #0]
   1bc8e:	4604      	mov	r4, r0
   1bc90:	f000 f8da 	bl	1be48 <_ZNSt9exceptionD2Ev>
   1bc94:	4620      	mov	r0, r4
   1bc96:	bd10      	pop	{r4, pc}
   1bc98:	00020428 	.word	0x00020428

0001bc9c <_ZNSt8bad_castD2Ev>:
   1bc9c:	4b03      	ldr	r3, [pc, #12]	(1bcac <_ZNSt8bad_castD2Ev+0x10>)
   1bc9e:	b510      	push	{r4, lr}
   1bca0:	6003      	str	r3, [r0, #0]
   1bca2:	4604      	mov	r4, r0
   1bca4:	f000 f8d0 	bl	1be48 <_ZNSt9exceptionD2Ev>
   1bca8:	4620      	mov	r0, r4
   1bcaa:	bd10      	pop	{r4, pc}
   1bcac:	00020428 	.word	0x00020428

0001bcb0 <_ZNSt8bad_castD0Ev>:
   1bcb0:	4b05      	ldr	r3, [pc, #20]	(1bcc8 <_ZNSt8bad_castD0Ev+0x18>)
   1bcb2:	b510      	push	{r4, lr}
   1bcb4:	6003      	str	r3, [r0, #0]
   1bcb6:	4604      	mov	r4, r0
   1bcb8:	f000 f8c6 	bl	1be48 <_ZNSt9exceptionD2Ev>
   1bcbc:	4620      	mov	r0, r4
   1bcbe:	f7f2 fbf1 	bl	e4a4 <_ZdlPv>
   1bcc2:	4620      	mov	r0, r4
   1bcc4:	bd10      	pop	{r4, pc}
   1bcc6:	46c0      	nop			(mov r8, r8)
   1bcc8:	00020428 	.word	0x00020428

0001bccc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   1bccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcce:	b081      	sub	sp, #4
   1bcd0:	4604      	mov	r4, r0
   1bcd2:	460d      	mov	r5, r1
   1bcd4:	4616      	mov	r6, r2
   1bcd6:	461f      	mov	r7, r3
   1bcd8:	f000 f938 	bl	1bf4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   1bcdc:	b110      	cbz	r0, 1bce4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x18>
   1bcde:	2001      	movs	r0, #1
   1bce0:	b001      	add	sp, #4
   1bce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bce4:	68a0      	ldr	r0, [r4, #8]
   1bce6:	4629      	mov	r1, r5
   1bce8:	6803      	ldr	r3, [r0, #0]
   1bcea:	4632      	mov	r2, r6
   1bcec:	699c      	ldr	r4, [r3, #24]
   1bcee:	463b      	mov	r3, r7
   1bcf0:	47a0      	blx	r4
   1bcf2:	e7f5      	b.n	1bce0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x14>

0001bcf4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   1bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcf8:	460e      	mov	r6, r1
   1bcfa:	b085      	sub	sp, #20
   1bcfc:	4619      	mov	r1, r3
   1bcfe:	4604      	mov	r4, r0
   1bd00:	4617      	mov	r7, r2
   1bd02:	469b      	mov	fp, r3
   1bd04:	f8dd 8038 	ldr.w	r8, [sp, #56]
   1bd08:	f8dd 9040 	ldr.w	r9, [sp, #64]
   1bd0c:	f8dd a044 	ldr.w	sl, [sp, #68]
   1bd10:	f000 f990 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bd14:	4605      	mov	r5, r0
   1bd16:	b178      	cbz	r0, 1bd38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
   1bd18:	2e00      	cmp	r6, #0
   1bd1a:	f8ca 8000 	str.w	r8, [sl]
   1bd1e:	f88a 7004 	strb.w	r7, [sl, #4]
   1bd22:	db1d      	blt.n	1bd60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
   1bd24:	eb08 0306 	add.w	r3, r8, r6
   1bd28:	4599      	cmp	r9, r3
   1bd2a:	bf0c      	ite	eq
   1bd2c:	2306      	moveq	r3, #6
   1bd2e:	2301      	movne	r3, #1
   1bd30:	f88a 3006 	strb.w	r3, [sl, #6]
   1bd34:	2000      	movs	r0, #0
   1bd36:	e010      	b.n	1bd5a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1bd38:	45c8      	cmp	r8, r9
   1bd3a:	d01b      	beq.n	1bd74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x80>
   1bd3c:	68a0      	ldr	r0, [r4, #8]
   1bd3e:	9a0f      	ldr	r2, [sp, #60]
   1bd40:	6803      	ldr	r3, [r0, #0]
   1bd42:	9201      	str	r2, [sp, #4]
   1bd44:	f8cd 8000 	str.w	r8, [sp]
   1bd48:	f8cd 9008 	str.w	r9, [sp, #8]
   1bd4c:	f8cd a00c 	str.w	sl, [sp, #12]
   1bd50:	69dc      	ldr	r4, [r3, #28]
   1bd52:	4631      	mov	r1, r6
   1bd54:	463a      	mov	r2, r7
   1bd56:	465b      	mov	r3, fp
   1bd58:	47a0      	blx	r4
   1bd5a:	b005      	add	sp, #20
   1bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd60:	f116 0f02 	cmn.w	r6, #2	; 0x2
   1bd64:	d001      	beq.n	1bd6a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
   1bd66:	2000      	movs	r0, #0
   1bd68:	e7f7      	b.n	1bd5a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1bd6a:	2301      	movs	r3, #1
   1bd6c:	f88a 3006 	strb.w	r3, [sl, #6]
   1bd70:	2000      	movs	r0, #0
   1bd72:	e7f2      	b.n	1bd5a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>
   1bd74:	4620      	mov	r0, r4
   1bd76:	990f      	ldr	r1, [sp, #60]
   1bd78:	f000 f95c 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bd7c:	2800      	cmp	r0, #0
   1bd7e:	d0dd      	beq.n	1bd3c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x48>
   1bd80:	f88a 7005 	strb.w	r7, [sl, #5]
   1bd84:	4628      	mov	r0, r5
   1bd86:	e7e8      	b.n	1bd5a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x66>

0001bd88 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   1bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd8c:	b082      	sub	sp, #8
   1bd8e:	9e08      	ldr	r6, [sp, #32]
   1bd90:	4604      	mov	r4, r0
   1bd92:	4296      	cmp	r6, r2
   1bd94:	4688      	mov	r8, r1
   1bd96:	4615      	mov	r5, r2
   1bd98:	461f      	mov	r7, r3
   1bd9a:	d00a      	beq.n	1bdb2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2a>
   1bd9c:	68a0      	ldr	r0, [r4, #8]
   1bd9e:	4641      	mov	r1, r8
   1bda0:	6803      	ldr	r3, [r0, #0]
   1bda2:	9600      	str	r6, [sp, #0]
   1bda4:	6a1c      	ldr	r4, [r3, #32]
   1bda6:	462a      	mov	r2, r5
   1bda8:	463b      	mov	r3, r7
   1bdaa:	47a0      	blx	r4
   1bdac:	b002      	add	sp, #8
   1bdae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bdb2:	4619      	mov	r1, r3
   1bdb4:	f000 f93e 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bdb8:	2800      	cmp	r0, #0
   1bdba:	d0ef      	beq.n	1bd9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
   1bdbc:	2006      	movs	r0, #6
   1bdbe:	e7f5      	b.n	1bdac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>

0001bdc0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   1bdc0:	4b03      	ldr	r3, [pc, #12]	(1bdd0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1bdc2:	b510      	push	{r4, lr}
   1bdc4:	6003      	str	r3, [r0, #0]
   1bdc6:	4604      	mov	r4, r0
   1bdc8:	f000 f910 	bl	1bfec <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1bdcc:	4620      	mov	r0, r4
   1bdce:	bd10      	pop	{r4, pc}
   1bdd0:	00020458 	.word	0x00020458

0001bdd4 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
   1bdd4:	4b03      	ldr	r3, [pc, #12]	(1bde4 <_ZN10__cxxabiv120__si_class_type_infoD2Ev+0x10>)
   1bdd6:	b510      	push	{r4, lr}
   1bdd8:	6003      	str	r3, [r0, #0]
   1bdda:	4604      	mov	r4, r0
   1bddc:	f000 f906 	bl	1bfec <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1bde0:	4620      	mov	r0, r4
   1bde2:	bd10      	pop	{r4, pc}
   1bde4:	00020458 	.word	0x00020458

0001bde8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   1bde8:	4b05      	ldr	r3, [pc, #20]	(1be00 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
   1bdea:	b510      	push	{r4, lr}
   1bdec:	6003      	str	r3, [r0, #0]
   1bdee:	4604      	mov	r4, r0
   1bdf0:	f000 f8fc 	bl	1bfec <_ZN10__cxxabiv117__class_type_infoD2Ev>
   1bdf4:	4620      	mov	r0, r4
   1bdf6:	f7f2 fb55 	bl	e4a4 <_ZdlPv>
   1bdfa:	4620      	mov	r0, r4
   1bdfc:	bd10      	pop	{r4, pc}
   1bdfe:	46c0      	nop			(mov r8, r8)
   1be00:	00020458 	.word	0x00020458

0001be04 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev>:
   1be04:	4b03      	ldr	r3, [pc, #12]	(1be14 <_ZN10__cxxabiv123__fundamental_type_infoD1Ev+0x10>)
   1be06:	b510      	push	{r4, lr}
   1be08:	6003      	str	r3, [r0, #0]
   1be0a:	4604      	mov	r4, r0
   1be0c:	f000 f906 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1be10:	4620      	mov	r0, r4
   1be12:	bd10      	pop	{r4, pc}
   1be14:	000204c0 	.word	0x000204c0

0001be18 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev>:
   1be18:	4b03      	ldr	r3, [pc, #12]	(1be28 <_ZN10__cxxabiv123__fundamental_type_infoD2Ev+0x10>)
   1be1a:	b510      	push	{r4, lr}
   1be1c:	6003      	str	r3, [r0, #0]
   1be1e:	4604      	mov	r4, r0
   1be20:	f000 f8fc 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1be24:	4620      	mov	r0, r4
   1be26:	bd10      	pop	{r4, pc}
   1be28:	000204c0 	.word	0x000204c0

0001be2c <_ZN10__cxxabiv123__fundamental_type_infoD0Ev>:
   1be2c:	4b05      	ldr	r3, [pc, #20]	(1be44 <_ZN10__cxxabiv123__fundamental_type_infoD0Ev+0x18>)
   1be2e:	b510      	push	{r4, lr}
   1be30:	6003      	str	r3, [r0, #0]
   1be32:	4604      	mov	r4, r0
   1be34:	f000 f8f2 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1be38:	4620      	mov	r0, r4
   1be3a:	f7f2 fb33 	bl	e4a4 <_ZdlPv>
   1be3e:	4620      	mov	r0, r4
   1be40:	bd10      	pop	{r4, pc}
   1be42:	46c0      	nop			(mov r8, r8)
   1be44:	000204c0 	.word	0x000204c0

0001be48 <_ZNSt9exceptionD2Ev>:
   1be48:	4b01      	ldr	r3, [pc, #4]	(1be50 <_ZNSt9exceptionD2Ev+0x8>)
   1be4a:	6003      	str	r3, [r0, #0]
   1be4c:	4770      	bx	lr
   1be4e:	46c0      	nop			(mov r8, r8)
   1be50:	000208f8 	.word	0x000208f8

0001be54 <_ZNSt9exceptionD1Ev>:
   1be54:	4b01      	ldr	r3, [pc, #4]	(1be5c <_ZNSt9exceptionD1Ev+0x8>)
   1be56:	6003      	str	r3, [r0, #0]
   1be58:	4770      	bx	lr
   1be5a:	46c0      	nop			(mov r8, r8)
   1be5c:	000208f8 	.word	0x000208f8

0001be60 <_ZNSt13bad_exceptionD2Ev>:
   1be60:	4b01      	ldr	r3, [pc, #4]	(1be68 <_ZNSt13bad_exceptionD2Ev+0x8>)
   1be62:	6003      	str	r3, [r0, #0]
   1be64:	4770      	bx	lr
   1be66:	46c0      	nop			(mov r8, r8)
   1be68:	000208f8 	.word	0x000208f8

0001be6c <_ZNSt13bad_exceptionD1Ev>:
   1be6c:	4b01      	ldr	r3, [pc, #4]	(1be74 <_ZNSt13bad_exceptionD1Ev+0x8>)
   1be6e:	6003      	str	r3, [r0, #0]
   1be70:	4770      	bx	lr
   1be72:	46c0      	nop			(mov r8, r8)
   1be74:	000208f8 	.word	0x000208f8

0001be78 <_ZN10__cxxabiv115__forced_unwindD2Ev>:
   1be78:	4b01      	ldr	r3, [pc, #4]	(1be80 <_ZN10__cxxabiv115__forced_unwindD2Ev+0x8>)
   1be7a:	6003      	str	r3, [r0, #0]
   1be7c:	4770      	bx	lr
   1be7e:	46c0      	nop			(mov r8, r8)
   1be80:	000208c8 	.word	0x000208c8

0001be84 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   1be84:	4b01      	ldr	r3, [pc, #4]	(1be8c <_ZN10__cxxabiv115__forced_unwindD1Ev+0x8>)
   1be86:	6003      	str	r3, [r0, #0]
   1be88:	4770      	bx	lr
   1be8a:	46c0      	nop			(mov r8, r8)
   1be8c:	000208c8 	.word	0x000208c8

0001be90 <_ZN10__cxxabiv119__foreign_exceptionD2Ev>:
   1be90:	4b01      	ldr	r3, [pc, #4]	(1be98 <_ZN10__cxxabiv119__foreign_exceptionD2Ev+0x8>)
   1be92:	6003      	str	r3, [r0, #0]
   1be94:	4770      	bx	lr
   1be96:	46c0      	nop			(mov r8, r8)
   1be98:	000208b0 	.word	0x000208b0

0001be9c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   1be9c:	4b01      	ldr	r3, [pc, #4]	(1bea4 <_ZN10__cxxabiv119__foreign_exceptionD1Ev+0x8>)
   1be9e:	6003      	str	r3, [r0, #0]
   1bea0:	4770      	bx	lr
   1bea2:	46c0      	nop			(mov r8, r8)
   1bea4:	000208b0 	.word	0x000208b0

0001bea8 <_ZNKSt9exception4whatEv>:
   1bea8:	4800      	ldr	r0, [pc, #0]	(1beac <_ZNKSt9exception4whatEv+0x4>)
   1beaa:	4770      	bx	lr
   1beac:	00020880 	.word	0x00020880

0001beb0 <_ZNKSt13bad_exception4whatEv>:
   1beb0:	4800      	ldr	r0, [pc, #0]	(1beb4 <_ZNKSt13bad_exception4whatEv+0x4>)
   1beb2:	4770      	bx	lr
   1beb4:	00020890 	.word	0x00020890

0001beb8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   1beb8:	4b03      	ldr	r3, [pc, #12]	(1bec8 <_ZN10__cxxabiv119__foreign_exceptionD0Ev+0x10>)
   1beba:	b510      	push	{r4, lr}
   1bebc:	6003      	str	r3, [r0, #0]
   1bebe:	4604      	mov	r4, r0
   1bec0:	f7f2 faf0 	bl	e4a4 <_ZdlPv>
   1bec4:	4620      	mov	r0, r4
   1bec6:	bd10      	pop	{r4, pc}
   1bec8:	000208b0 	.word	0x000208b0

0001becc <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   1becc:	4b03      	ldr	r3, [pc, #12]	(1bedc <_ZN10__cxxabiv115__forced_unwindD0Ev+0x10>)
   1bece:	b510      	push	{r4, lr}
   1bed0:	6003      	str	r3, [r0, #0]
   1bed2:	4604      	mov	r4, r0
   1bed4:	f7f2 fae6 	bl	e4a4 <_ZdlPv>
   1bed8:	4620      	mov	r0, r4
   1beda:	bd10      	pop	{r4, pc}
   1bedc:	000208c8 	.word	0x000208c8

0001bee0 <_ZNSt9exceptionD0Ev>:
   1bee0:	4b03      	ldr	r3, [pc, #12]	(1bef0 <_ZNSt9exceptionD0Ev+0x10>)
   1bee2:	b510      	push	{r4, lr}
   1bee4:	6003      	str	r3, [r0, #0]
   1bee6:	4604      	mov	r4, r0
   1bee8:	f7f2 fadc 	bl	e4a4 <_ZdlPv>
   1beec:	4620      	mov	r0, r4
   1beee:	bd10      	pop	{r4, pc}
   1bef0:	000208f8 	.word	0x000208f8

0001bef4 <_ZNSt13bad_exceptionD0Ev>:
   1bef4:	4b03      	ldr	r3, [pc, #12]	(1bf04 <_ZNSt13bad_exceptionD0Ev+0x10>)
   1bef6:	b510      	push	{r4, lr}
   1bef8:	6003      	str	r3, [r0, #0]
   1befa:	4604      	mov	r4, r0
   1befc:	f7f2 fad2 	bl	e4a4 <_ZdlPv>
   1bf00:	4620      	mov	r0, r4
   1bf02:	bd10      	pop	{r4, pc}
   1bf04:	000208f8 	.word	0x000208f8

0001bf08 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   1bf08:	b570      	push	{r4, r5, r6, lr}
   1bf0a:	2310      	movs	r3, #16
   1bf0c:	b084      	sub	sp, #16
   1bf0e:	2500      	movs	r5, #0
   1bf10:	9302      	str	r3, [sp, #8]
   1bf12:	6803      	ldr	r3, [r0, #0]
   1bf14:	9500      	str	r5, [sp, #0]
   1bf16:	4616      	mov	r6, r2
   1bf18:	699c      	ldr	r4, [r3, #24]
   1bf1a:	f88d 5004 	strb.w	r5, [sp, #4]
   1bf1e:	466b      	mov	r3, sp
   1bf20:	9503      	str	r5, [sp, #12]
   1bf22:	6812      	ldr	r2, [r2, #0]
   1bf24:	47a0      	blx	r4
   1bf26:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1bf2a:	f003 0306 	and.w	r3, r3, #6	; 0x6
   1bf2e:	2b06      	cmp	r3, #6
   1bf30:	bf09      	itett	eq
   1bf32:	9b00      	ldreq	r3, [sp, #0]
   1bf34:	4628      	movne	r0, r5
   1bf36:	6033      	streq	r3, [r6, #0]
   1bf38:	2001      	moveq	r0, #1
   1bf3a:	b004      	add	sp, #16
   1bf3c:	bd70      	pop	{r4, r5, r6, pc}
   1bf3e:	46c0      	nop			(mov r8, r8)

0001bf40 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   1bf40:	9800      	ldr	r0, [sp, #0]
   1bf42:	4290      	cmp	r0, r2
   1bf44:	bf0c      	ite	eq
   1bf46:	2006      	moveq	r0, #6
   1bf48:	2001      	movne	r0, #1
   1bf4a:	4770      	bx	lr

0001bf4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   1bf4c:	b530      	push	{r4, r5, lr}
   1bf4e:	b081      	sub	sp, #4
   1bf50:	4615      	mov	r5, r2
   1bf52:	461c      	mov	r4, r3
   1bf54:	f000 f86e 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bf58:	b128      	cbz	r0, 1bf66 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x1a>
   1bf5a:	2308      	movs	r3, #8
   1bf5c:	2206      	movs	r2, #6
   1bf5e:	6025      	str	r5, [r4, #0]
   1bf60:	60e3      	str	r3, [r4, #12]
   1bf62:	7122      	strb	r2, [r4, #4]
   1bf64:	2001      	movs	r0, #1
   1bf66:	b001      	add	sp, #4
   1bf68:	bd30      	pop	{r4, r5, pc}
   1bf6a:	46c0      	nop			(mov r8, r8)

0001bf6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   1bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf6e:	b081      	sub	sp, #4
   1bf70:	461c      	mov	r4, r3
   1bf72:	9e06      	ldr	r6, [sp, #24]
   1bf74:	9b08      	ldr	r3, [sp, #32]
   1bf76:	4605      	mov	r5, r0
   1bf78:	429e      	cmp	r6, r3
   1bf7a:	4617      	mov	r7, r2
   1bf7c:	d00d      	beq.n	1bf9a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
   1bf7e:	4628      	mov	r0, r5
   1bf80:	4621      	mov	r1, r4
   1bf82:	f000 f857 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bf86:	b128      	cbz	r0, 1bf94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1bf88:	9b09      	ldr	r3, [sp, #36]
   1bf8a:	9a09      	ldr	r2, [sp, #36]
   1bf8c:	601e      	str	r6, [r3, #0]
   1bf8e:	711f      	strb	r7, [r3, #4]
   1bf90:	2301      	movs	r3, #1
   1bf92:	7193      	strb	r3, [r2, #6]
   1bf94:	2000      	movs	r0, #0
   1bf96:	b001      	add	sp, #4
   1bf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf9a:	9907      	ldr	r1, [sp, #28]
   1bf9c:	f000 f84a 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bfa0:	2800      	cmp	r0, #0
   1bfa2:	d0ec      	beq.n	1bf7e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>
   1bfa4:	9a09      	ldr	r2, [sp, #36]
   1bfa6:	7157      	strb	r7, [r2, #5]
   1bfa8:	e7f4      	b.n	1bf94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x28>
   1bfaa:	46c0      	nop			(mov r8, r8)

0001bfac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   1bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfae:	b081      	sub	sp, #4
   1bfb0:	4606      	mov	r6, r0
   1bfb2:	460d      	mov	r5, r1
   1bfb4:	4617      	mov	r7, r2
   1bfb6:	461c      	mov	r4, r3
   1bfb8:	f000 f83c 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1bfbc:	b918      	cbnz	r0, 1bfc6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
   1bfbe:	2c03      	cmp	r4, #3
   1bfc0:	d903      	bls.n	1bfca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1e>
   1bfc2:	b001      	add	sp, #4
   1bfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bfc6:	2001      	movs	r0, #1
   1bfc8:	e7fb      	b.n	1bfc2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
   1bfca:	682b      	ldr	r3, [r5, #0]
   1bfcc:	4628      	mov	r0, r5
   1bfce:	695c      	ldr	r4, [r3, #20]
   1bfd0:	4631      	mov	r1, r6
   1bfd2:	463a      	mov	r2, r7
   1bfd4:	47a0      	blx	r4
   1bfd6:	e7f4      	b.n	1bfc2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>

0001bfd8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1bfd8:	4b03      	ldr	r3, [pc, #12]	(1bfe8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1bfda:	b510      	push	{r4, lr}
   1bfdc:	6003      	str	r3, [r0, #0]
   1bfde:	4604      	mov	r4, r0
   1bfe0:	f000 f81c 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1bfe4:	4620      	mov	r0, r4
   1bfe6:	bd10      	pop	{r4, pc}
   1bfe8:	000209a0 	.word	0x000209a0

0001bfec <_ZN10__cxxabiv117__class_type_infoD2Ev>:
   1bfec:	4b03      	ldr	r3, [pc, #12]	(1bffc <_ZN10__cxxabiv117__class_type_infoD2Ev+0x10>)
   1bfee:	b510      	push	{r4, lr}
   1bff0:	6003      	str	r3, [r0, #0]
   1bff2:	4604      	mov	r4, r0
   1bff4:	f000 f812 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1bff8:	4620      	mov	r0, r4
   1bffa:	bd10      	pop	{r4, pc}
   1bffc:	000209a0 	.word	0x000209a0

0001c000 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   1c000:	4b05      	ldr	r3, [pc, #20]	(1c018 <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
   1c002:	b510      	push	{r4, lr}
   1c004:	6003      	str	r3, [r0, #0]
   1c006:	4604      	mov	r4, r0
   1c008:	f000 f808 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1c00c:	4620      	mov	r0, r4
   1c00e:	f7f2 fa49 	bl	e4a4 <_ZdlPv>
   1c012:	4620      	mov	r0, r4
   1c014:	bd10      	pop	{r4, pc}
   1c016:	46c0      	nop			(mov r8, r8)
   1c018:	000209a0 	.word	0x000209a0

0001c01c <_ZNSt9type_infoD2Ev>:
   1c01c:	4b01      	ldr	r3, [pc, #4]	(1c024 <_ZNSt9type_infoD2Ev+0x8>)
   1c01e:	6003      	str	r3, [r0, #0]
   1c020:	4770      	bx	lr
   1c022:	46c0      	nop			(mov r8, r8)
   1c024:	00020a00 	.word	0x00020a00

0001c028 <_ZNSt9type_infoD1Ev>:
   1c028:	4b01      	ldr	r3, [pc, #4]	(1c030 <_ZNSt9type_infoD1Ev+0x8>)
   1c02a:	6003      	str	r3, [r0, #0]
   1c02c:	4770      	bx	lr
   1c02e:	46c0      	nop			(mov r8, r8)
   1c030:	00020a00 	.word	0x00020a00

0001c034 <_ZNKSt9type_infoeqERKS_>:
   1c034:	6840      	ldr	r0, [r0, #4]
   1c036:	684b      	ldr	r3, [r1, #4]
   1c038:	4298      	cmp	r0, r3
   1c03a:	bf14      	ite	ne
   1c03c:	2000      	movne	r0, #0
   1c03e:	2001      	moveq	r0, #1
   1c040:	4770      	bx	lr
   1c042:	46c0      	nop			(mov r8, r8)

0001c044 <_ZNKSt9type_info14__is_pointer_pEv>:
   1c044:	2000      	movs	r0, #0
   1c046:	4770      	bx	lr

0001c048 <_ZNKSt9type_info15__is_function_pEv>:
   1c048:	2000      	movs	r0, #0
   1c04a:	4770      	bx	lr

0001c04c <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   1c04c:	6840      	ldr	r0, [r0, #4]
   1c04e:	684b      	ldr	r3, [r1, #4]
   1c050:	4298      	cmp	r0, r3
   1c052:	bf14      	ite	ne
   1c054:	2000      	movne	r0, #0
   1c056:	2001      	moveq	r0, #1
   1c058:	4770      	bx	lr
   1c05a:	46c0      	nop			(mov r8, r8)

0001c05c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   1c05c:	2000      	movs	r0, #0
   1c05e:	4770      	bx	lr

0001c060 <_ZNSt9type_infoD0Ev>:
   1c060:	4b03      	ldr	r3, [pc, #12]	(1c070 <_ZNSt9type_infoD0Ev+0x10>)
   1c062:	b510      	push	{r4, lr}
   1c064:	6003      	str	r3, [r0, #0]
   1c066:	4604      	mov	r4, r0
   1c068:	f7f2 fa1c 	bl	e4a4 <_ZdlPv>
   1c06c:	4620      	mov	r0, r4
   1c06e:	bd10      	pop	{r4, pc}
   1c070:	00020a00 	.word	0x00020a00

0001c074 <__cxa_current_exception_type>:
   1c074:	b500      	push	{lr}
   1c076:	b081      	sub	sp, #4
   1c078:	f000 f88c 	bl	1c194 <__cxa_get_globals>
   1c07c:	6800      	ldr	r0, [r0, #0]
   1c07e:	b100      	cbz	r0, 1c082 <__cxa_current_exception_type+0xe>
   1c080:	6800      	ldr	r0, [r0, #0]
   1c082:	b001      	add	sp, #4
   1c084:	bd00      	pop	{pc}
   1c086:	46c0      	nop			(mov r8, r8)

0001c088 <__cxa_rethrow>:
   1c088:	b510      	push	{r4, lr}
   1c08a:	f000 f883 	bl	1c194 <__cxa_get_globals>
   1c08e:	6843      	ldr	r3, [r0, #4]
   1c090:	6804      	ldr	r4, [r0, #0]
   1c092:	3301      	adds	r3, #1
   1c094:	6043      	str	r3, [r0, #4]
   1c096:	b164      	cbz	r4, 1c0b2 <__cxa_rethrow+0x2a>
   1c098:	f894 3020 	ldrb.w	r3, [r4, #32]
   1c09c:	2b47      	cmp	r3, #71
   1c09e:	d00a      	beq.n	1c0b6 <__cxa_rethrow+0x2e>
   1c0a0:	2300      	movs	r3, #0
   1c0a2:	6003      	str	r3, [r0, #0]
   1c0a4:	3420      	adds	r4, #32
   1c0a6:	4620      	mov	r0, r4
   1c0a8:	f7fd fde4 	bl	19c74 <_Unwind_Resume_or_Rethrow>
   1c0ac:	4620      	mov	r0, r4
   1c0ae:	f7ff fd9b 	bl	1bbe8 <__cxa_begin_catch>
   1c0b2:	f7fe fe65 	bl	1ad80 <_ZSt9terminatev>
   1c0b6:	f894 3021 	ldrb.w	r3, [r4, #33]
   1c0ba:	2b4e      	cmp	r3, #78
   1c0bc:	d1f0      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0be:	f894 3022 	ldrb.w	r3, [r4, #34]
   1c0c2:	2b55      	cmp	r3, #85
   1c0c4:	d1ec      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0c6:	f894 3023 	ldrb.w	r3, [r4, #35]
   1c0ca:	2b43      	cmp	r3, #67
   1c0cc:	d1e8      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0ce:	f894 3024 	ldrb.w	r3, [r4, #36]
   1c0d2:	2b43      	cmp	r3, #67
   1c0d4:	d1e4      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0d6:	f894 3025 	ldrb.w	r3, [r4, #37]
   1c0da:	2b2b      	cmp	r3, #43
   1c0dc:	d1e0      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0de:	f894 3026 	ldrb.w	r3, [r4, #38]
   1c0e2:	2b2b      	cmp	r3, #43
   1c0e4:	d1dc      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0e6:	f894 3027 	ldrb.w	r3, [r4, #39]
   1c0ea:	2b00      	cmp	r3, #0
   1c0ec:	d1d8      	bne.n	1c0a0 <__cxa_rethrow+0x18>
   1c0ee:	6963      	ldr	r3, [r4, #20]
   1c0f0:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1c0f4:	6163      	str	r3, [r4, #20]
   1c0f6:	e7d5      	b.n	1c0a4 <__cxa_rethrow+0x1c>

0001c0f8 <__cxa_throw>:
   1c0f8:	4b16      	ldr	r3, [pc, #88]	(1c154 <__cxa_throw+0x5c>)
   1c0fa:	b510      	push	{r4, lr}
   1c0fc:	4604      	mov	r4, r0
   1c0fe:	f1a0 0078 	sub.w	r0, r0, #120	; 0x78
   1c102:	6042      	str	r2, [r0, #4]
   1c104:	681a      	ldr	r2, [r3, #0]
   1c106:	4b14      	ldr	r3, [pc, #80]	(1c158 <__cxa_throw+0x60>)
   1c108:	6082      	str	r2, [r0, #8]
   1c10a:	681a      	ldr	r2, [r3, #0]
   1c10c:	2347      	movs	r3, #71
   1c10e:	60c2      	str	r2, [r0, #12]
   1c110:	224e      	movs	r2, #78
   1c112:	f880 2021 	strb.w	r2, [r0, #33]
   1c116:	3a0b      	subs	r2, #11
   1c118:	f880 3020 	strb.w	r3, [r0, #32]
   1c11c:	f880 2023 	strb.w	r2, [r0, #35]
   1c120:	f880 2024 	strb.w	r2, [r0, #36]
   1c124:	330e      	adds	r3, #14
   1c126:	4a0d      	ldr	r2, [pc, #52]	(1c15c <__cxa_throw+0x64>)
   1c128:	f844 1c78 	str.w	r1, [r4, #-120]
   1c12c:	f880 3022 	strb.w	r3, [r0, #34]
   1c130:	212b      	movs	r1, #43
   1c132:	3b55      	subs	r3, #85
   1c134:	3c58      	subs	r4, #88
   1c136:	f880 1025 	strb.w	r1, [r0, #37]
   1c13a:	f880 1026 	strb.w	r1, [r0, #38]
   1c13e:	f880 3027 	strb.w	r3, [r0, #39]
   1c142:	6282      	str	r2, [r0, #40]
   1c144:	4620      	mov	r0, r4
   1c146:	f7fd fd71 	bl	19c2c <_Unwind_RaiseException>
   1c14a:	4620      	mov	r0, r4
   1c14c:	f7ff fd4c 	bl	1bbe8 <__cxa_begin_catch>
   1c150:	f7fe fe16 	bl	1ad80 <_ZSt9terminatev>
   1c154:	20000034 	.word	0x20000034
   1c158:	20000038 	.word	0x20000038
   1c15c:	0001c161 	.word	0x0001c161

0001c160 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   1c160:	2801      	cmp	r0, #1
   1c162:	b510      	push	{r4, lr}
   1c164:	f1a1 0320 	sub.w	r3, r1, #32	; 0x20
   1c168:	d80c      	bhi.n	1c184 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x24>
   1c16a:	685b      	ldr	r3, [r3, #4]
   1c16c:	b13b      	cbz	r3, 1c17e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x1e>
   1c16e:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1c172:	4620      	mov	r0, r4
   1c174:	4798      	blx	r3
   1c176:	4620      	mov	r0, r4
   1c178:	f000 f812 	bl	1c1a0 <__cxa_free_exception>
   1c17c:	bd10      	pop	{r4, pc}
   1c17e:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1c182:	e7f8      	b.n	1c176 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
   1c184:	68d8      	ldr	r0, [r3, #12]
   1c186:	f7fe fded 	bl	1ad64 <_ZN10__cxxabiv111__terminateEPFvvE>
   1c18a:	46c0      	nop			(mov r8, r8)

0001c18c <__cxa_get_globals_fast>:
   1c18c:	4800      	ldr	r0, [pc, #0]	(1c190 <__cxa_get_globals_fast+0x4>)
   1c18e:	4770      	bx	lr
   1c190:	20000680 	.word	0x20000680

0001c194 <__cxa_get_globals>:
   1c194:	4800      	ldr	r0, [pc, #0]	(1c198 <__cxa_get_globals+0x4>)
   1c196:	4770      	bx	lr
   1c198:	20000680 	.word	0x20000680

0001c19c <_GLOBAL__I___cxa_allocate_exception>:
   1c19c:	4770      	bx	lr
   1c19e:	46c0      	nop			(mov r8, r8)

0001c1a0 <__cxa_free_exception>:
   1c1a0:	b500      	push	{lr}
   1c1a2:	4a0c      	ldr	r2, [pc, #48]	(1c1d4 <__cxa_free_exception+0x34>)
   1c1a4:	b081      	sub	sp, #4
   1c1a6:	4282      	cmp	r2, r0
   1c1a8:	d803      	bhi.n	1c1b2 <__cxa_free_exception+0x12>
   1c1aa:	f502 6300 	add.w	r3, r2, #2048	; 0x800
   1c1ae:	4298      	cmp	r0, r3
   1c1b0:	d304      	bcc.n	1c1bc <__cxa_free_exception+0x1c>
   1c1b2:	3878      	subs	r0, #120
   1c1b4:	f001 ffc8 	bl	1e148 <free>
   1c1b8:	b001      	add	sp, #4
   1c1ba:	bd00      	pop	{pc}
   1c1bc:	ebc2 0200 	rsb	r2, r2, r0
   1c1c0:	0a52      	lsrs	r2, r2, #9
   1c1c2:	2301      	movs	r3, #1
   1c1c4:	4093      	lsls	r3, r2
   1c1c6:	4904      	ldr	r1, [pc, #16]	(1c1d8 <__cxa_free_exception+0x38>)
   1c1c8:	ea6f 0303 	mvn.w	r3, r3
   1c1cc:	680a      	ldr	r2, [r1, #0]
   1c1ce:	4013      	ands	r3, r2
   1c1d0:	600b      	str	r3, [r1, #0]
   1c1d2:	e7f1      	b.n	1c1b8 <__cxa_free_exception+0x18>
   1c1d4:	20000690 	.word	0x20000690
   1c1d8:	20000e90 	.word	0x20000e90

0001c1dc <__cxa_allocate_exception>:
   1c1dc:	b530      	push	{r4, r5, lr}
   1c1de:	f100 0578 	add.w	r5, r0, #120	; 0x78
   1c1e2:	b081      	sub	sp, #4
   1c1e4:	4628      	mov	r0, r5
   1c1e6:	f001 ffbb 	bl	1e160 <malloc>
   1c1ea:	4604      	mov	r4, r0
   1c1ec:	b168      	cbz	r0, 1c20a <__cxa_allocate_exception+0x2e>
   1c1ee:	f7ff ffd1 	bl	1c194 <__cxa_get_globals>
   1c1f2:	6843      	ldr	r3, [r0, #4]
   1c1f4:	2100      	movs	r1, #0
   1c1f6:	3301      	adds	r3, #1
   1c1f8:	6043      	str	r3, [r0, #4]
   1c1fa:	2278      	movs	r2, #120
   1c1fc:	4620      	mov	r0, r4
   1c1fe:	f002 fa3f 	bl	1e680 <memset>
   1c202:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1c206:	b001      	add	sp, #4
   1c208:	bd30      	pop	{r4, r5, pc}
   1c20a:	4912      	ldr	r1, [pc, #72]	(1c254 <__cxa_allocate_exception+0x78>)
   1c20c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   1c210:	680a      	ldr	r2, [r1, #0]
   1c212:	bf9c      	itt	ls
   1c214:	4600      	movls	r0, r0
   1c216:	4613      	movls	r3, r2
   1c218:	d812      	bhi.n	1c240 <__cxa_allocate_exception+0x64>
   1c21a:	f013 0f01 	tst.w	r3, #1	; 0x1
   1c21e:	d006      	beq.n	1c22e <__cxa_allocate_exception+0x52>
   1c220:	3001      	adds	r0, #1
   1c222:	2804      	cmp	r0, #4
   1c224:	d00c      	beq.n	1c240 <__cxa_allocate_exception+0x64>
   1c226:	085b      	lsrs	r3, r3, #1
   1c228:	f013 0f01 	tst.w	r3, #1	; 0x1
   1c22c:	d1f8      	bne.n	1c220 <__cxa_allocate_exception+0x44>
   1c22e:	2301      	movs	r3, #1
   1c230:	4083      	lsls	r3, r0
   1c232:	4313      	orrs	r3, r2
   1c234:	600b      	str	r3, [r1, #0]
   1c236:	4b08      	ldr	r3, [pc, #32]	(1c258 <__cxa_allocate_exception+0x7c>)
   1c238:	0242      	lsls	r2, r0, #9
   1c23a:	eb03 0402 	add.w	r4, r3, r2
   1c23e:	e7d6      	b.n	1c1ee <__cxa_allocate_exception+0x12>
   1c240:	f7fe fd9e 	bl	1ad80 <_ZSt9terminatev>
   1c244:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1c248:	d001      	beq.n	1c24e <__cxa_allocate_exception+0x72>
   1c24a:	f7f9 f927 	bl	1549c <__cxa_end_cleanup>
   1c24e:	f7ff fbf1 	bl	1ba34 <__cxa_call_unexpected>
   1c252:	46c0      	nop			(mov r8, r8)
   1c254:	20000e90 	.word	0x20000e90
   1c258:	20000690 	.word	0x20000690

0001c25c <_ZNK10__cxxabiv119__pointer_type_info14__is_pointer_pEv>:
   1c25c:	2001      	movs	r0, #1
   1c25e:	4770      	bx	lr

0001c260 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj>:
   1c260:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c262:	2b01      	cmp	r3, #1
   1c264:	b081      	sub	sp, #4
   1c266:	4605      	mov	r5, r0
   1c268:	460e      	mov	r6, r1
   1c26a:	4617      	mov	r7, r2
   1c26c:	461c      	mov	r4, r3
   1c26e:	d908      	bls.n	1c282 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x22>
   1c270:	68e8      	ldr	r0, [r5, #12]
   1c272:	1ca3      	adds	r3, r4, #2
   1c274:	6802      	ldr	r2, [r0, #0]
   1c276:	68f1      	ldr	r1, [r6, #12]
   1c278:	6914      	ldr	r4, [r2, #16]
   1c27a:	463a      	mov	r2, r7
   1c27c:	47a0      	blx	r4
   1c27e:	b001      	add	sp, #4
   1c280:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c282:	68c0      	ldr	r0, [r0, #12]
   1c284:	4906      	ldr	r1, [pc, #24]	(1c2a0 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x40>)
   1c286:	f7ff fed5 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1c28a:	2800      	cmp	r0, #0
   1c28c:	d0f0      	beq.n	1c270 <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x10>
   1c28e:	68f0      	ldr	r0, [r6, #12]
   1c290:	6803      	ldr	r3, [r0, #0]
   1c292:	68da      	ldr	r2, [r3, #12]
   1c294:	4790      	blx	r2
   1c296:	f080 0001 	eor.w	r0, r0, #1	; 0x1
   1c29a:	b2c0      	uxtb	r0, r0
   1c29c:	e7ef      	b.n	1c27e <_ZNK10__cxxabiv119__pointer_type_info15__pointer_catchEPKNS_17__pbase_type_infoEPPvj+0x1e>
   1c29e:	46c0      	nop			(mov r8, r8)
   1c2a0:	00020778 	.word	0x00020778

0001c2a4 <_ZN10__cxxabiv119__pointer_type_infoD1Ev>:
   1c2a4:	4b03      	ldr	r3, [pc, #12]	(1c2b4 <_ZN10__cxxabiv119__pointer_type_infoD1Ev+0x10>)
   1c2a6:	b510      	push	{r4, lr}
   1c2a8:	6003      	str	r3, [r0, #0]
   1c2aa:	4604      	mov	r4, r0
   1c2ac:	f000 f860 	bl	1c370 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1c2b0:	4620      	mov	r0, r4
   1c2b2:	bd10      	pop	{r4, pc}
   1c2b4:	00021058 	.word	0x00021058

0001c2b8 <_ZN10__cxxabiv119__pointer_type_infoD2Ev>:
   1c2b8:	4b03      	ldr	r3, [pc, #12]	(1c2c8 <_ZN10__cxxabiv119__pointer_type_infoD2Ev+0x10>)
   1c2ba:	b510      	push	{r4, lr}
   1c2bc:	6003      	str	r3, [r0, #0]
   1c2be:	4604      	mov	r4, r0
   1c2c0:	f000 f856 	bl	1c370 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1c2c4:	4620      	mov	r0, r4
   1c2c6:	bd10      	pop	{r4, pc}
   1c2c8:	00021058 	.word	0x00021058

0001c2cc <_ZN10__cxxabiv119__pointer_type_infoD0Ev>:
   1c2cc:	4b05      	ldr	r3, [pc, #20]	(1c2e4 <_ZN10__cxxabiv119__pointer_type_infoD0Ev+0x18>)
   1c2ce:	b510      	push	{r4, lr}
   1c2d0:	6003      	str	r3, [r0, #0]
   1c2d2:	4604      	mov	r4, r0
   1c2d4:	f000 f84c 	bl	1c370 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>
   1c2d8:	4620      	mov	r0, r4
   1c2da:	f7f2 f8e3 	bl	e4a4 <_ZdlPv>
   1c2de:	4620      	mov	r0, r4
   1c2e0:	bd10      	pop	{r4, pc}
   1c2e2:	46c0      	nop			(mov r8, r8)
   1c2e4:	00021058 	.word	0x00021058

0001c2e8 <_ZNK10__cxxabiv117__pbase_type_info15__pointer_catchEPKS0_PPvj>:
   1c2e8:	68c0      	ldr	r0, [r0, #12]
   1c2ea:	b510      	push	{r4, lr}
   1c2ec:	f8d0 c000 	ldr.w	ip, [r0]
   1c2f0:	68c9      	ldr	r1, [r1, #12]
   1c2f2:	3302      	adds	r3, #2
   1c2f4:	f8dc 4010 	ldr.w	r4, [ip, #16]
   1c2f8:	47a0      	blx	r4
   1c2fa:	bd10      	pop	{r4, pc}

0001c2fc <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj>:
   1c2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c300:	4606      	mov	r6, r0
   1c302:	460d      	mov	r5, r1
   1c304:	4690      	mov	r8, r2
   1c306:	461f      	mov	r7, r3
   1c308:	f7ff fe94 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1c30c:	2800      	cmp	r0, #0
   1c30e:	d121      	bne.n	1c354 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   1c310:	6833      	ldr	r3, [r6, #0]
   1c312:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1c316:	2d00      	cmp	r5, #0
   1c318:	d01e      	beq.n	1c358 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
   1c31a:	682b      	ldr	r3, [r5, #0]
   1c31c:	f853 1c04 	ldr.w	r1, [r3, #-4]
   1c320:	f7ff fe88 	bl	1c034 <_ZNKSt9type_infoeqERKS_>
   1c324:	b198      	cbz	r0, 1c34e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1c326:	f017 0f01 	tst.w	r7, #1	; 0x1
   1c32a:	d010      	beq.n	1c34e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1c32c:	68b2      	ldr	r2, [r6, #8]
   1c32e:	68ab      	ldr	r3, [r5, #8]
   1c330:	4393      	bics	r3, r2
   1c332:	d10c      	bne.n	1c34e <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x52>
   1c334:	f012 0f01 	tst.w	r2, #1	; 0x1
   1c338:	6833      	ldr	r3, [r6, #0]
   1c33a:	bf08      	it	eq
   1c33c:	f027 0701 	biceq.w	r7, r7, #1	; 0x1
   1c340:	699c      	ldr	r4, [r3, #24]
   1c342:	4630      	mov	r0, r6
   1c344:	4629      	mov	r1, r5
   1c346:	4642      	mov	r2, r8
   1c348:	463b      	mov	r3, r7
   1c34a:	47a0      	blx	r4
   1c34c:	e000      	b.n	1c350 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1c34e:	2000      	movs	r0, #0
   1c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c354:	2001      	movs	r0, #1
   1c356:	e7fb      	b.n	1c350 <_ZNK10__cxxabiv117__pbase_type_info10__do_catchEPKSt9type_infoPPvj+0x54>
   1c358:	f7ff fa70 	bl	1b83c <__cxa_bad_typeid>

0001c35c <_ZN10__cxxabiv117__pbase_type_infoD1Ev>:
   1c35c:	4b03      	ldr	r3, [pc, #12]	(1c36c <_ZN10__cxxabiv117__pbase_type_infoD1Ev+0x10>)
   1c35e:	b510      	push	{r4, lr}
   1c360:	6003      	str	r3, [r0, #0]
   1c362:	4604      	mov	r4, r0
   1c364:	f7ff fe5a 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1c368:	4620      	mov	r0, r4
   1c36a:	bd10      	pop	{r4, pc}
   1c36c:	000210b0 	.word	0x000210b0

0001c370 <_ZN10__cxxabiv117__pbase_type_infoD2Ev>:
   1c370:	4b03      	ldr	r3, [pc, #12]	(1c380 <_ZN10__cxxabiv117__pbase_type_infoD2Ev+0x10>)
   1c372:	b510      	push	{r4, lr}
   1c374:	6003      	str	r3, [r0, #0]
   1c376:	4604      	mov	r4, r0
   1c378:	f7ff fe50 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1c37c:	4620      	mov	r0, r4
   1c37e:	bd10      	pop	{r4, pc}
   1c380:	000210b0 	.word	0x000210b0

0001c384 <_ZN10__cxxabiv117__pbase_type_infoD0Ev>:
   1c384:	4b05      	ldr	r3, [pc, #20]	(1c39c <_ZN10__cxxabiv117__pbase_type_infoD0Ev+0x18>)
   1c386:	b510      	push	{r4, lr}
   1c388:	6003      	str	r3, [r0, #0]
   1c38a:	4604      	mov	r4, r0
   1c38c:	f7ff fe46 	bl	1c01c <_ZNSt9type_infoD2Ev>
   1c390:	4620      	mov	r0, r4
   1c392:	f7f2 f887 	bl	e4a4 <_ZdlPv>
   1c396:	4620      	mov	r0, r4
   1c398:	bd10      	pop	{r4, pc}
   1c39a:	46c0      	nop			(mov r8, r8)
   1c39c:	000210b0 	.word	0x000210b0

0001c3a0 <cos>:
   1c3a0:	b530      	push	{r4, r5, lr}
   1c3a2:	4b1e      	ldr	r3, [pc, #120]	(1c41c <cos+0x7c>)
   1c3a4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1c3a8:	429a      	cmp	r2, r3
   1c3aa:	b087      	sub	sp, #28
   1c3ac:	dc02      	bgt.n	1c3b4 <cos+0x14>
   1c3ae:	2200      	movs	r2, #0
   1c3b0:	2300      	movs	r3, #0
   1c3b2:	e017      	b.n	1c3e4 <cos+0x44>
   1c3b4:	4b1a      	ldr	r3, [pc, #104]	(1c420 <cos+0x80>)
   1c3b6:	429a      	cmp	r2, r3
   1c3b8:	dd04      	ble.n	1c3c4 <cos+0x24>
   1c3ba:	4602      	mov	r2, r0
   1c3bc:	460b      	mov	r3, r1
   1c3be:	f7fb fe8d 	bl	180dc <__aeabi_dsub>
   1c3c2:	e029      	b.n	1c418 <cos+0x78>
   1c3c4:	aa02      	add	r2, sp, #8
   1c3c6:	f000 f9ab 	bl	1c720 <__ieee754_rem_pio2>
   1c3ca:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1c3ce:	2b01      	cmp	r3, #1
   1c3d0:	d00b      	beq.n	1c3ea <cos+0x4a>
   1c3d2:	2b02      	cmp	r3, #2
   1c3d4:	d011      	beq.n	1c3fa <cos+0x5a>
   1c3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c3da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1c3de:	b9ab      	cbnz	r3, 1c40c <cos+0x6c>
   1c3e0:	4622      	mov	r2, r4
   1c3e2:	462b      	mov	r3, r5
   1c3e4:	f000 fc84 	bl	1ccf0 <__kernel_cos>
   1c3e8:	e016      	b.n	1c418 <cos+0x78>
   1c3ea:	9300      	str	r3, [sp, #0]
   1c3ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c3f4:	f001 f8ec 	bl	1d5d0 <__kernel_sin>
   1c3f8:	e005      	b.n	1c406 <cos+0x66>
   1c3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c402:	f000 fc75 	bl	1ccf0 <__kernel_cos>
   1c406:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1c40a:	e005      	b.n	1c418 <cos+0x78>
   1c40c:	2301      	movs	r3, #1
   1c40e:	9300      	str	r3, [sp, #0]
   1c410:	4622      	mov	r2, r4
   1c412:	462b      	mov	r3, r5
   1c414:	f001 f8dc 	bl	1d5d0 <__kernel_sin>
   1c418:	b007      	add	sp, #28
   1c41a:	bd30      	pop	{r4, r5, pc}
   1c41c:	3fe921fb 	.word	0x3fe921fb
   1c420:	7fefffff 	.word	0x7fefffff

0001c424 <sin>:
   1c424:	b530      	push	{r4, r5, lr}
   1c426:	4b20      	ldr	r3, [pc, #128]	(1c4a8 <sin+0x84>)
   1c428:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1c42c:	429a      	cmp	r2, r3
   1c42e:	b087      	sub	sp, #28
   1c430:	dc04      	bgt.n	1c43c <sin+0x18>
   1c432:	2300      	movs	r3, #0
   1c434:	9300      	str	r3, [sp, #0]
   1c436:	2200      	movs	r2, #0
   1c438:	2300      	movs	r3, #0
   1c43a:	e019      	b.n	1c470 <sin+0x4c>
   1c43c:	4b1b      	ldr	r3, [pc, #108]	(1c4ac <sin+0x88>)
   1c43e:	429a      	cmp	r2, r3
   1c440:	dd04      	ble.n	1c44c <sin+0x28>
   1c442:	4602      	mov	r2, r0
   1c444:	460b      	mov	r3, r1
   1c446:	f7fb fe49 	bl	180dc <__aeabi_dsub>
   1c44a:	e02a      	b.n	1c4a2 <sin+0x7e>
   1c44c:	aa02      	add	r2, sp, #8
   1c44e:	f000 f967 	bl	1c720 <__ieee754_rem_pio2>
   1c452:	f000 0303 	and.w	r3, r0, #3	; 0x3
   1c456:	2b01      	cmp	r3, #1
   1c458:	d00d      	beq.n	1c476 <sin+0x52>
   1c45a:	2b02      	cmp	r3, #2
   1c45c:	d012      	beq.n	1c484 <sin+0x60>
   1c45e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c462:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
   1c466:	b9b3      	cbnz	r3, 1c496 <sin+0x72>
   1c468:	2301      	movs	r3, #1
   1c46a:	9300      	str	r3, [sp, #0]
   1c46c:	4622      	mov	r2, r4
   1c46e:	462b      	mov	r3, r5
   1c470:	f001 f8ae 	bl	1d5d0 <__kernel_sin>
   1c474:	e015      	b.n	1c4a2 <sin+0x7e>
   1c476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c47e:	f000 fc37 	bl	1ccf0 <__kernel_cos>
   1c482:	e00e      	b.n	1c4a2 <sin+0x7e>
   1c484:	2301      	movs	r3, #1
   1c486:	9300      	str	r3, [sp, #0]
   1c488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c48c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c490:	f001 f89e 	bl	1d5d0 <__kernel_sin>
   1c494:	e003      	b.n	1c49e <sin+0x7a>
   1c496:	4622      	mov	r2, r4
   1c498:	462b      	mov	r3, r5
   1c49a:	f000 fc29 	bl	1ccf0 <__kernel_cos>
   1c49e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1c4a2:	b007      	add	sp, #28
   1c4a4:	bd30      	pop	{r4, r5, pc}
   1c4a6:	46c0      	nop			(mov r8, r8)
   1c4a8:	3fe921fb 	.word	0x3fe921fb
   1c4ac:	7fefffff 	.word	0x7fefffff

0001c4b0 <atan2>:
   1c4b0:	b500      	push	{lr}
   1c4b2:	b081      	sub	sp, #4
   1c4b4:	f000 f858 	bl	1c568 <__ieee754_atan2>
   1c4b8:	b001      	add	sp, #4
   1c4ba:	bd00      	pop	{pc}

0001c4bc <sqrt>:
   1c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4be:	b08f      	sub	sp, #60
   1c4c0:	4604      	mov	r4, r0
   1c4c2:	460d      	mov	r5, r1
   1c4c4:	f000 fb40 	bl	1cb48 <__ieee754_sqrt>
   1c4c8:	4a24      	ldr	r2, [pc, #144]	(1c55c <sqrt+0xa0>)
   1c4ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1c4ce:	f992 3000 	ldrsb.w	r3, [r2]
   1c4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c4d6:	d03c      	beq.n	1c552 <sqrt+0x96>
   1c4d8:	4620      	mov	r0, r4
   1c4da:	4629      	mov	r1, r5
   1c4dc:	f001 fb58 	bl	1db90 <__isnand>
   1c4e0:	9001      	str	r0, [sp, #4]
   1c4e2:	2800      	cmp	r0, #0
   1c4e4:	d135      	bne.n	1c552 <sqrt+0x96>
   1c4e6:	2600      	movs	r6, #0
   1c4e8:	2700      	movs	r7, #0
   1c4ea:	4620      	mov	r0, r4
   1c4ec:	4629      	mov	r1, r5
   1c4ee:	4632      	mov	r2, r6
   1c4f0:	463b      	mov	r3, r7
   1c4f2:	f7fc fa17 	bl	18924 <__aeabi_dcmplt>
   1c4f6:	2800      	cmp	r0, #0
   1c4f8:	d02b      	beq.n	1c552 <sqrt+0x96>
   1c4fa:	2301      	movs	r3, #1
   1c4fc:	9304      	str	r3, [sp, #16]
   1c4fe:	4a17      	ldr	r2, [pc, #92]	(1c55c <sqrt+0xa0>)
   1c500:	4b17      	ldr	r3, [pc, #92]	(1c560 <sqrt+0xa4>)
   1c502:	e9cd 4508 	strd	r4, r5, [sp, #32]
   1c506:	9305      	str	r3, [sp, #20]
   1c508:	e9cd 4506 	strd	r4, r5, [sp, #24]
   1c50c:	9b01      	ldr	r3, [sp, #4]
   1c50e:	7814      	ldrb	r4, [r2, #0]
   1c510:	930c      	str	r3, [sp, #48]
   1c512:	b914      	cbnz	r4, 1c51a <sqrt+0x5e>
   1c514:	e9cd 670a 	strd	r6, r7, [sp, #40]
   1c518:	e009      	b.n	1c52e <sqrt+0x72>
   1c51a:	4630      	mov	r0, r6
   1c51c:	4639      	mov	r1, r7
   1c51e:	4632      	mov	r2, r6
   1c520:	463b      	mov	r3, r7
   1c522:	f7fc f8b9 	bl	18698 <__aeabi_ddiv>
   1c526:	2c02      	cmp	r4, #2
   1c528:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1c52c:	d003      	beq.n	1c536 <sqrt+0x7a>
   1c52e:	a804      	add	r0, sp, #16
   1c530:	f001 fb3c 	bl	1dbac <matherr>
   1c534:	b918      	cbnz	r0, 1c53e <sqrt+0x82>
   1c536:	f001 fbc7 	bl	1dcc8 <__errno>
   1c53a:	2321      	movs	r3, #33
   1c53c:	6003      	str	r3, [r0, #0]
   1c53e:	9b0c      	ldr	r3, [sp, #48]
   1c540:	b11b      	cbz	r3, 1c54a <sqrt+0x8e>
   1c542:	f001 fbc1 	bl	1dcc8 <__errno>
   1c546:	9b0c      	ldr	r3, [sp, #48]
   1c548:	6003      	str	r3, [r0, #0]
   1c54a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1c54e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c556:	b00f      	add	sp, #60
   1c558:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c55a:	46c0      	nop			(mov r8, r8)
   1c55c:	20000040 	.word	0x20000040
   1c560:	00021100 	.word	0x00021100
   1c564:	00000000 	.word	0x00000000

0001c568 <__ieee754_atan2>:
   1c568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c56a:	b089      	sub	sp, #36
   1c56c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c570:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1c574:	9307      	str	r3, [sp, #28]
   1c576:	f1c2 0300 	rsb	r3, r2, #0	; 0x0
   1c57a:	4313      	orrs	r3, r2
   1c57c:	4616      	mov	r6, r2
   1c57e:	4a66      	ldr	r2, [pc, #408]	(1c718 <__ieee754_atan2+0x1b0>)
   1c580:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
   1c584:	4293      	cmp	r3, r2
   1c586:	4604      	mov	r4, r0
   1c588:	460d      	mov	r5, r1
   1c58a:	9001      	str	r0, [sp, #4]
   1c58c:	d808      	bhi.n	1c5a0 <__ieee754_atan2+0x38>
   1c58e:	f1c0 0300 	rsb	r3, r0, #0	; 0x0
   1c592:	4303      	orrs	r3, r0
   1c594:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
   1c598:	ea4c 73d3 	orr.w	r3, ip, r3, lsr #31
   1c59c:	4293      	cmp	r3, r2
   1c59e:	d904      	bls.n	1c5aa <__ieee754_atan2+0x42>
   1c5a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c5a4:	f7fb fd9c 	bl	180e0 <__adddf3>
   1c5a8:	e08e      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c5aa:	9c07      	ldr	r4, [sp, #28]
   1c5ac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   1c5b0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1c5b4:	4333      	orrs	r3, r6
   1c5b6:	d102      	bne.n	1c5be <__ieee754_atan2+0x56>
   1c5b8:	f001 f8c2 	bl	1d740 <atan>
   1c5bc:	e084      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c5be:	9a07      	ldr	r2, [sp, #28]
   1c5c0:	1793      	asrs	r3, r2, #30
   1c5c2:	f003 0302 	and.w	r3, r3, #2	; 0x2
   1c5c6:	ea43 74d1 	orr.w	r4, r3, r1, lsr #31
   1c5ca:	9b01      	ldr	r3, [sp, #4]
   1c5cc:	ea5c 0303 	orrs.w	r3, ip, r3
   1c5d0:	d105      	bne.n	1c5de <__ieee754_atan2+0x76>
   1c5d2:	2c03      	cmp	r4, #3
   1c5d4:	d803      	bhi.n	1c5de <__ieee754_atan2+0x76>
   1c5d6:	e8df f004 	tbb	[pc, r4]
   1c5da:	7777      	.short	0x7777
   1c5dc:	2b28      	.short	0x2b28
   1c5de:	433e      	orrs	r6, r7
   1c5e0:	d02c      	beq.n	1c63c <__ieee754_atan2+0xd4>
   1c5e2:	4b4d      	ldr	r3, [pc, #308]	(1c718 <__ieee754_atan2+0x1b0>)
   1c5e4:	429f      	cmp	r7, r3
   1c5e6:	d126      	bne.n	1c636 <__ieee754_atan2+0xce>
   1c5e8:	45bc      	cmp	ip, r7
   1c5ea:	d111      	bne.n	1c610 <__ieee754_atan2+0xa8>
   1c5ec:	2c03      	cmp	r4, #3
   1c5ee:	d822      	bhi.n	1c636 <__ieee754_atan2+0xce>
   1c5f0:	e8df f004 	tbb	[pc, r4]
   1c5f4:	0b080205 	.word	0x0b080205
   1c5f8:	a035      	add	r0, pc, #212	(adr r0, 1c6d0 <__ieee754_atan2+0x168>)
   1c5fa:	c803      	ldmia	r0!, {r0, r1}
   1c5fc:	e064      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c5fe:	a036      	add	r0, pc, #216	(adr r0, 1c6d8 <__ieee754_atan2+0x170>)
   1c600:	c803      	ldmia	r0!, {r0, r1}
   1c602:	e061      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c604:	a036      	add	r0, pc, #216	(adr r0, 1c6e0 <__ieee754_atan2+0x178>)
   1c606:	c803      	ldmia	r0!, {r0, r1}
   1c608:	e05e      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c60a:	a037      	add	r0, pc, #220	(adr r0, 1c6e8 <__ieee754_atan2+0x180>)
   1c60c:	c803      	ldmia	r0!, {r0, r1}
   1c60e:	e05b      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c610:	2c03      	cmp	r4, #3
   1c612:	d810      	bhi.n	1c636 <__ieee754_atan2+0xce>
   1c614:	e8df f004 	tbb	[pc, r4]
   1c618:	0c090206 	.word	0x0c090206
   1c61c:	2000      	movs	r0, #0
   1c61e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1c622:	e051      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c624:	2000      	movs	r0, #0
   1c626:	2100      	movs	r1, #0
   1c628:	e04e      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c62a:	a031      	add	r0, pc, #196	(adr r0, 1c6f0 <__ieee754_atan2+0x188>)
   1c62c:	c803      	ldmia	r0!, {r0, r1}
   1c62e:	e04b      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c630:	a031      	add	r0, pc, #196	(adr r0, 1c6f8 <__ieee754_atan2+0x190>)
   1c632:	c803      	ldmia	r0!, {r0, r1}
   1c634:	e048      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c636:	4b38      	ldr	r3, [pc, #224]	(1c718 <__ieee754_atan2+0x1b0>)
   1c638:	459c      	cmp	ip, r3
   1c63a:	d107      	bne.n	1c64c <__ieee754_atan2+0xe4>
   1c63c:	2d00      	cmp	r5, #0
   1c63e:	db02      	blt.n	1c646 <__ieee754_atan2+0xde>
   1c640:	a02f      	add	r0, pc, #188	(adr r0, 1c700 <__ieee754_atan2+0x198>)
   1c642:	c803      	ldmia	r0!, {r0, r1}
   1c644:	e040      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c646:	a030      	add	r0, pc, #192	(adr r0, 1c708 <__ieee754_atan2+0x1a0>)
   1c648:	c803      	ldmia	r0!, {r0, r1}
   1c64a:	e03d      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c64c:	ebc7 030c 	rsb	r3, r7, ip
   1c650:	151b      	asrs	r3, r3, #20
   1c652:	2b3c      	cmp	r3, #60
   1c654:	dd02      	ble.n	1c65c <__ieee754_atan2+0xf4>
   1c656:	a22a      	add	r2, pc, #168	(adr r2, 1c700 <__ieee754_atan2+0x198>)
   1c658:	ca0c      	ldmia	r2!, {r2, r3}
   1c65a:	e015      	b.n	1c688 <__ieee754_atan2+0x120>
   1c65c:	9a07      	ldr	r2, [sp, #28]
   1c65e:	f113 0f3c 	cmn.w	r3, #60	; 0x3c
   1c662:	bfac      	ite	ge
   1c664:	2300      	movge	r3, #0
   1c666:	2301      	movlt	r3, #1
   1c668:	ea13 72d2 	ands.w	r2, r3, r2, lsr #31
   1c66c:	d002      	beq.n	1c674 <__ieee754_atan2+0x10c>
   1c66e:	2200      	movs	r2, #0
   1c670:	2300      	movs	r3, #0
   1c672:	e009      	b.n	1c688 <__ieee754_atan2+0x120>
   1c674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c678:	f7fc f80e 	bl	18698 <__aeabi_ddiv>
   1c67c:	f001 fa08 	bl	1da90 <fabs>
   1c680:	f001 f85e 	bl	1d740 <atan>
   1c684:	4602      	mov	r2, r0
   1c686:	460b      	mov	r3, r1
   1c688:	2c01      	cmp	r4, #1
   1c68a:	d003      	beq.n	1c694 <__ieee754_atan2+0x12c>
   1c68c:	2c02      	cmp	r4, #2
   1c68e:	d006      	beq.n	1c69e <__ieee754_atan2+0x136>
   1c690:	b984      	cbnz	r4, 1c6b4 <__ieee754_atan2+0x14c>
   1c692:	e001      	b.n	1c698 <__ieee754_atan2+0x130>
   1c694:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1c698:	4610      	mov	r0, r2
   1c69a:	4619      	mov	r1, r3
   1c69c:	e014      	b.n	1c6c8 <__ieee754_atan2+0x160>
   1c69e:	4610      	mov	r0, r2
   1c6a0:	4619      	mov	r1, r3
   1c6a2:	a21b      	add	r2, pc, #108	(adr r2, 1c710 <__ieee754_atan2+0x1a8>)
   1c6a4:	ca0c      	ldmia	r2!, {r2, r3}
   1c6a6:	f7fb fd19 	bl	180dc <__aeabi_dsub>
   1c6aa:	4602      	mov	r2, r0
   1c6ac:	460b      	mov	r3, r1
   1c6ae:	a010      	add	r0, pc, #64	(adr r0, 1c6f0 <__ieee754_atan2+0x188>)
   1c6b0:	c803      	ldmia	r0!, {r0, r1}
   1c6b2:	e007      	b.n	1c6c4 <__ieee754_atan2+0x15c>
   1c6b4:	4610      	mov	r0, r2
   1c6b6:	4619      	mov	r1, r3
   1c6b8:	a215      	add	r2, pc, #84	(adr r2, 1c710 <__ieee754_atan2+0x1a8>)
   1c6ba:	ca0c      	ldmia	r2!, {r2, r3}
   1c6bc:	f7fb fd0e 	bl	180dc <__aeabi_dsub>
   1c6c0:	a20b      	add	r2, pc, #44	(adr r2, 1c6f0 <__ieee754_atan2+0x188>)
   1c6c2:	ca0c      	ldmia	r2!, {r2, r3}
   1c6c4:	f7fb fd0a 	bl	180dc <__aeabi_dsub>
   1c6c8:	b009      	add	sp, #36
   1c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c6cc:	46c0      	nop			(mov r8, r8)
   1c6ce:	46c0      	nop			(mov r8, r8)
   1c6d0:	54442d18 	.word	0x54442d18
   1c6d4:	bfe921fb 	.word	0xbfe921fb
   1c6d8:	54442d18 	.word	0x54442d18
   1c6dc:	3fe921fb 	.word	0x3fe921fb
   1c6e0:	7f3321d2 	.word	0x7f3321d2
   1c6e4:	4002d97c 	.word	0x4002d97c
   1c6e8:	7f3321d2 	.word	0x7f3321d2
   1c6ec:	c002d97c 	.word	0xc002d97c
   1c6f0:	54442d18 	.word	0x54442d18
   1c6f4:	400921fb 	.word	0x400921fb
   1c6f8:	54442d18 	.word	0x54442d18
   1c6fc:	c00921fb 	.word	0xc00921fb
   1c700:	54442d18 	.word	0x54442d18
   1c704:	3ff921fb 	.word	0x3ff921fb
   1c708:	54442d18 	.word	0x54442d18
   1c70c:	bff921fb 	.word	0xbff921fb
   1c710:	33145c07 	.word	0x33145c07
   1c714:	3ca1a626 	.word	0x3ca1a626
   1c718:	7ff00000 	.word	0x7ff00000
   1c71c:	46c046c0 	.word	0x46c046c0

0001c720 <__ieee754_rem_pio2>:
   1c720:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c722:	4b9b      	ldr	r3, [pc, #620]	(1c990 <__ieee754_rem_pio2+0x270>)
   1c724:	b093      	sub	sp, #76
   1c726:	9206      	str	r2, [sp, #24]
   1c728:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   1c72c:	429a      	cmp	r2, r3
   1c72e:	910a      	str	r1, [sp, #40]
   1c730:	9209      	str	r2, [sp, #36]
   1c732:	dc09      	bgt.n	1c748 <__ieee754_rem_pio2+0x28>
   1c734:	9b06      	ldr	r3, [sp, #24]
   1c736:	9e06      	ldr	r6, [sp, #24]
   1c738:	e883 0003 	stmia.w	r3, {r0, r1}
   1c73c:	2200      	movs	r2, #0
   1c73e:	2300      	movs	r3, #0
   1c740:	e9c6 2302 	strd	r2, r3, [r6, #8]
   1c744:	2200      	movs	r2, #0
   1c746:	e17f      	b.n	1ca48 <__ieee754_rem_pio2+0x328>
   1c748:	4b92      	ldr	r3, [pc, #584]	(1c994 <__ieee754_rem_pio2+0x274>)
   1c74a:	9a09      	ldr	r2, [sp, #36]
   1c74c:	429a      	cmp	r2, r3
   1c74e:	dc7e      	bgt.n	1c84e <__ieee754_rem_pio2+0x12e>
   1c750:	9b0a      	ldr	r3, [sp, #40]
   1c752:	2b00      	cmp	r3, #0
   1c754:	dd3a      	ble.n	1c7cc <__ieee754_rem_pio2+0xac>
   1c756:	a282      	add	r2, pc, #520	(adr r2, 1c960 <__ieee754_rem_pio2+0x240>)
   1c758:	ca0c      	ldmia	r2!, {r2, r3}
   1c75a:	f7fb fcbf 	bl	180dc <__aeabi_dsub>
   1c75e:	4b8e      	ldr	r3, [pc, #568]	(1c998 <__ieee754_rem_pio2+0x278>)
   1c760:	9e09      	ldr	r6, [sp, #36]
   1c762:	4604      	mov	r4, r0
   1c764:	429e      	cmp	r6, r3
   1c766:	460d      	mov	r5, r1
   1c768:	d015      	beq.n	1c796 <__ieee754_rem_pio2+0x76>
   1c76a:	a27f      	add	r2, pc, #508	(adr r2, 1c968 <__ieee754_rem_pio2+0x248>)
   1c76c:	ca0c      	ldmia	r2!, {r2, r3}
   1c76e:	f7fb fcb5 	bl	180dc <__aeabi_dsub>
   1c772:	4602      	mov	r2, r0
   1c774:	9806      	ldr	r0, [sp, #24]
   1c776:	460b      	mov	r3, r1
   1c778:	e880 000c 	stmia.w	r0, {r2, r3}
   1c77c:	4629      	mov	r1, r5
   1c77e:	4620      	mov	r0, r4
   1c780:	f7fb fcac 	bl	180dc <__aeabi_dsub>
   1c784:	a278      	add	r2, pc, #480	(adr r2, 1c968 <__ieee754_rem_pio2+0x248>)
   1c786:	ca0c      	ldmia	r2!, {r2, r3}
   1c788:	f7fb fca8 	bl	180dc <__aeabi_dsub>
   1c78c:	9a06      	ldr	r2, [sp, #24]
   1c78e:	2301      	movs	r3, #1
   1c790:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1c794:	e168      	b.n	1ca68 <__ieee754_rem_pio2+0x348>
   1c796:	a276      	add	r2, pc, #472	(adr r2, 1c970 <__ieee754_rem_pio2+0x250>)
   1c798:	ca0c      	ldmia	r2!, {r2, r3}
   1c79a:	f7fb fc9f 	bl	180dc <__aeabi_dsub>
   1c79e:	a276      	add	r2, pc, #472	(adr r2, 1c978 <__ieee754_rem_pio2+0x258>)
   1c7a0:	ca0c      	ldmia	r2!, {r2, r3}
   1c7a2:	4604      	mov	r4, r0
   1c7a4:	460d      	mov	r5, r1
   1c7a6:	f7fb fc99 	bl	180dc <__aeabi_dsub>
   1c7aa:	9e06      	ldr	r6, [sp, #24]
   1c7ac:	4602      	mov	r2, r0
   1c7ae:	460b      	mov	r3, r1
   1c7b0:	e886 000c 	stmia.w	r6, {r2, r3}
   1c7b4:	4620      	mov	r0, r4
   1c7b6:	4629      	mov	r1, r5
   1c7b8:	f7fb fc90 	bl	180dc <__aeabi_dsub>
   1c7bc:	a26e      	add	r2, pc, #440	(adr r2, 1c978 <__ieee754_rem_pio2+0x258>)
   1c7be:	ca0c      	ldmia	r2!, {r2, r3}
   1c7c0:	f7fb fc8c 	bl	180dc <__aeabi_dsub>
   1c7c4:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1c7c8:	2001      	movs	r0, #1
   1c7ca:	e1a8      	b.n	1cb1e <__ieee754_rem_pio2+0x3fe>
   1c7cc:	a264      	add	r2, pc, #400	(adr r2, 1c960 <__ieee754_rem_pio2+0x240>)
   1c7ce:	ca0c      	ldmia	r2!, {r2, r3}
   1c7d0:	f7fb fc86 	bl	180e0 <__adddf3>
   1c7d4:	4b70      	ldr	r3, [pc, #448]	(1c998 <__ieee754_rem_pio2+0x278>)
   1c7d6:	460d      	mov	r5, r1
   1c7d8:	9909      	ldr	r1, [sp, #36]
   1c7da:	4604      	mov	r4, r0
   1c7dc:	4299      	cmp	r1, r3
   1c7de:	d017      	beq.n	1c810 <__ieee754_rem_pio2+0xf0>
   1c7e0:	a261      	add	r2, pc, #388	(adr r2, 1c968 <__ieee754_rem_pio2+0x248>)
   1c7e2:	ca0c      	ldmia	r2!, {r2, r3}
   1c7e4:	4620      	mov	r0, r4
   1c7e6:	4629      	mov	r1, r5
   1c7e8:	f7fb fc7a 	bl	180e0 <__adddf3>
   1c7ec:	9e06      	ldr	r6, [sp, #24]
   1c7ee:	4602      	mov	r2, r0
   1c7f0:	460b      	mov	r3, r1
   1c7f2:	e886 000c 	stmia.w	r6, {r2, r3}
   1c7f6:	4620      	mov	r0, r4
   1c7f8:	4629      	mov	r1, r5
   1c7fa:	f7fb fc6f 	bl	180dc <__aeabi_dsub>
   1c7fe:	a25a      	add	r2, pc, #360	(adr r2, 1c968 <__ieee754_rem_pio2+0x248>)
   1c800:	ca0c      	ldmia	r2!, {r2, r3}
   1c802:	f7fb fc6d 	bl	180e0 <__adddf3>
   1c806:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1c80a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c80e:	e186      	b.n	1cb1e <__ieee754_rem_pio2+0x3fe>
   1c810:	4620      	mov	r0, r4
   1c812:	4629      	mov	r1, r5
   1c814:	a256      	add	r2, pc, #344	(adr r2, 1c970 <__ieee754_rem_pio2+0x250>)
   1c816:	ca0c      	ldmia	r2!, {r2, r3}
   1c818:	f7fb fc62 	bl	180e0 <__adddf3>
   1c81c:	a256      	add	r2, pc, #344	(adr r2, 1c978 <__ieee754_rem_pio2+0x258>)
   1c81e:	ca0c      	ldmia	r2!, {r2, r3}
   1c820:	4604      	mov	r4, r0
   1c822:	460d      	mov	r5, r1
   1c824:	f7fb fc5c 	bl	180e0 <__adddf3>
   1c828:	460b      	mov	r3, r1
   1c82a:	9906      	ldr	r1, [sp, #24]
   1c82c:	4602      	mov	r2, r0
   1c82e:	e881 000c 	stmia.w	r1, {r2, r3}
   1c832:	4620      	mov	r0, r4
   1c834:	4629      	mov	r1, r5
   1c836:	f7fb fc51 	bl	180dc <__aeabi_dsub>
   1c83a:	a24f      	add	r2, pc, #316	(adr r2, 1c978 <__ieee754_rem_pio2+0x258>)
   1c83c:	ca0c      	ldmia	r2!, {r2, r3}
   1c83e:	f7fb fc4f 	bl	180e0 <__adddf3>
   1c842:	9a06      	ldr	r2, [sp, #24]
   1c844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c848:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1c84c:	e10c      	b.n	1ca68 <__ieee754_rem_pio2+0x348>
   1c84e:	4b53      	ldr	r3, [pc, #332]	(1c99c <__ieee754_rem_pio2+0x27c>)
   1c850:	9e09      	ldr	r6, [sp, #36]
   1c852:	429e      	cmp	r6, r3
   1c854:	f300 80fa 	bgt.w	1ca4c <__ieee754_rem_pio2+0x32c>
   1c858:	f001 f91a 	bl	1da90 <fabs>
   1c85c:	a248      	add	r2, pc, #288	(adr r2, 1c980 <__ieee754_rem_pio2+0x260>)
   1c85e:	ca0c      	ldmia	r2!, {r2, r3}
   1c860:	4604      	mov	r4, r0
   1c862:	460d      	mov	r5, r1
   1c864:	f7fb fdee 	bl	18444 <__aeabi_dmul>
   1c868:	2200      	movs	r2, #0
   1c86a:	4b4d      	ldr	r3, [pc, #308]	(1c9a0 <__ieee754_rem_pio2+0x280>)
   1c86c:	f7fb fc38 	bl	180e0 <__adddf3>
   1c870:	f7fc f880 	bl	18974 <__aeabi_d2iz>
   1c874:	9008      	str	r0, [sp, #32]
   1c876:	f7fb fd7f 	bl	18378 <__aeabi_i2d>
   1c87a:	a243      	add	r2, pc, #268	(adr r2, 1c988 <__ieee754_rem_pio2+0x268>)
   1c87c:	ca0c      	ldmia	r2!, {r2, r3}
   1c87e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1c882:	f7fb fddf 	bl	18444 <__aeabi_dmul>
   1c886:	4602      	mov	r2, r0
   1c888:	460b      	mov	r3, r1
   1c88a:	4620      	mov	r0, r4
   1c88c:	4629      	mov	r1, r5
   1c88e:	f7fb fc27 	bl	180e0 <__adddf3>
   1c892:	a235      	add	r2, pc, #212	(adr r2, 1c968 <__ieee754_rem_pio2+0x248>)
   1c894:	ca0c      	ldmia	r2!, {r2, r3}
   1c896:	4606      	mov	r6, r0
   1c898:	460f      	mov	r7, r1
   1c89a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c89e:	f7fb fdd1 	bl	18444 <__aeabi_dmul>
   1c8a2:	4604      	mov	r4, r0
   1c8a4:	9808      	ldr	r0, [sp, #32]
   1c8a6:	460d      	mov	r5, r1
   1c8a8:	281f      	cmp	r0, #31
   1c8aa:	dc07      	bgt.n	1c8bc <__ieee754_rem_pio2+0x19c>
   1c8ac:	4a3d      	ldr	r2, [pc, #244]	(1c9a4 <__ieee754_rem_pio2+0x284>)
   1c8ae:	1e43      	subs	r3, r0, #1
   1c8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c8b4:	9909      	ldr	r1, [sp, #36]
   1c8b6:	4299      	cmp	r1, r3
   1c8b8:	f040 809e 	bne.w	1c9f8 <__ieee754_rem_pio2+0x2d8>
   1c8bc:	462b      	mov	r3, r5
   1c8be:	4630      	mov	r0, r6
   1c8c0:	4639      	mov	r1, r7
   1c8c2:	4622      	mov	r2, r4
   1c8c4:	f7fb fc0a 	bl	180dc <__aeabi_dsub>
   1c8c8:	9b06      	ldr	r3, [sp, #24]
   1c8ca:	e883 0003 	stmia.w	r3, {r0, r1}
   1c8ce:	0d0b      	lsrs	r3, r1, #20
   1c8d0:	9809      	ldr	r0, [sp, #36]
   1c8d2:	055b      	lsls	r3, r3, #21
   1c8d4:	1500      	asrs	r0, r0, #20
   1c8d6:	0d5b      	lsrs	r3, r3, #21
   1c8d8:	ebc3 0300 	rsb	r3, r3, r0
   1c8dc:	2b10      	cmp	r3, #16
   1c8de:	9007      	str	r0, [sp, #28]
   1c8e0:	f340 8093 	ble.w	1ca0a <__ieee754_rem_pio2+0x2ea>
   1c8e4:	a222      	add	r2, pc, #136	(adr r2, 1c970 <__ieee754_rem_pio2+0x250>)
   1c8e6:	ca0c      	ldmia	r2!, {r2, r3}
   1c8e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c8ec:	f7fb fdaa 	bl	18444 <__aeabi_dmul>
   1c8f0:	4604      	mov	r4, r0
   1c8f2:	460d      	mov	r5, r1
   1c8f4:	4622      	mov	r2, r4
   1c8f6:	462b      	mov	r3, r5
   1c8f8:	4630      	mov	r0, r6
   1c8fa:	4639      	mov	r1, r7
   1c8fc:	f7fb fbee 	bl	180dc <__aeabi_dsub>
   1c900:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1c904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1c908:	4630      	mov	r0, r6
   1c90a:	4639      	mov	r1, r7
   1c90c:	f7fb fbe6 	bl	180dc <__aeabi_dsub>
   1c910:	4622      	mov	r2, r4
   1c912:	462b      	mov	r3, r5
   1c914:	f7fb fbe2 	bl	180dc <__aeabi_dsub>
   1c918:	a217      	add	r2, pc, #92	(adr r2, 1c978 <__ieee754_rem_pio2+0x258>)
   1c91a:	ca0c      	ldmia	r2!, {r2, r3}
   1c91c:	4604      	mov	r4, r0
   1c91e:	460d      	mov	r5, r1
   1c920:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c924:	f7fb fd8e 	bl	18444 <__aeabi_dmul>
   1c928:	4622      	mov	r2, r4
   1c92a:	462b      	mov	r3, r5
   1c92c:	f7fb fbd6 	bl	180dc <__aeabi_dsub>
   1c930:	4604      	mov	r4, r0
   1c932:	460d      	mov	r5, r1
   1c934:	4622      	mov	r2, r4
   1c936:	462b      	mov	r3, r5
   1c938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c93c:	f7fb fbce 	bl	180dc <__aeabi_dsub>
   1c940:	0d0b      	lsrs	r3, r1, #20
   1c942:	055b      	lsls	r3, r3, #21
   1c944:	9e07      	ldr	r6, [sp, #28]
   1c946:	0d5b      	lsrs	r3, r3, #21
   1c948:	9a06      	ldr	r2, [sp, #24]
   1c94a:	ebc3 0306 	rsb	r3, r3, r6
   1c94e:	2b31      	cmp	r3, #49
   1c950:	e882 0003 	stmia.w	r2, {r0, r1}
   1c954:	dc28      	bgt.n	1c9a8 <__ieee754_rem_pio2+0x288>
   1c956:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1c95a:	e056      	b.n	1ca0a <__ieee754_rem_pio2+0x2ea>
   1c95c:	46c0      	nop			(mov r8, r8)
   1c95e:	46c0      	nop			(mov r8, r8)
   1c960:	54400000 	.word	0x54400000
   1c964:	3ff921fb 	.word	0x3ff921fb
   1c968:	1a626331 	.word	0x1a626331
   1c96c:	3dd0b461 	.word	0x3dd0b461
   1c970:	1a600000 	.word	0x1a600000
   1c974:	3dd0b461 	.word	0x3dd0b461
   1c978:	2e037073 	.word	0x2e037073
   1c97c:	3ba3198a 	.word	0x3ba3198a
   1c980:	6dc9c883 	.word	0x6dc9c883
   1c984:	3fe45f30 	.word	0x3fe45f30
   1c988:	54400000 	.word	0x54400000
   1c98c:	bff921fb 	.word	0xbff921fb
   1c990:	3fe921fb 	.word	0x3fe921fb
   1c994:	4002d97b 	.word	0x4002d97b
   1c998:	3ff921fb 	.word	0x3ff921fb
   1c99c:	413921fb 	.word	0x413921fb
   1c9a0:	3fe00000 	.word	0x3fe00000
   1c9a4:	00021108 	.word	0x00021108
   1c9a8:	a25f      	add	r2, pc, #380	(adr r2, 1cb28 <__ieee754_rem_pio2+0x408>)
   1c9aa:	ca0c      	ldmia	r2!, {r2, r3}
   1c9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c9b0:	f7fb fd48 	bl	18444 <__aeabi_dmul>
   1c9b4:	4604      	mov	r4, r0
   1c9b6:	460d      	mov	r5, r1
   1c9b8:	4622      	mov	r2, r4
   1c9ba:	462b      	mov	r3, r5
   1c9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c9c0:	f7fb fb8c 	bl	180dc <__aeabi_dsub>
   1c9c4:	4606      	mov	r6, r0
   1c9c6:	460f      	mov	r7, r1
   1c9c8:	4632      	mov	r2, r6
   1c9ca:	463b      	mov	r3, r7
   1c9cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c9d0:	f7fb fb84 	bl	180dc <__aeabi_dsub>
   1c9d4:	4622      	mov	r2, r4
   1c9d6:	462b      	mov	r3, r5
   1c9d8:	f7fb fb80 	bl	180dc <__aeabi_dsub>
   1c9dc:	a254      	add	r2, pc, #336	(adr r2, 1cb30 <__ieee754_rem_pio2+0x410>)
   1c9de:	ca0c      	ldmia	r2!, {r2, r3}
   1c9e0:	4604      	mov	r4, r0
   1c9e2:	460d      	mov	r5, r1
   1c9e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1c9e8:	f7fb fd2c 	bl	18444 <__aeabi_dmul>
   1c9ec:	4622      	mov	r2, r4
   1c9ee:	462b      	mov	r3, r5
   1c9f0:	f7fb fb74 	bl	180dc <__aeabi_dsub>
   1c9f4:	4604      	mov	r4, r0
   1c9f6:	460d      	mov	r5, r1
   1c9f8:	4622      	mov	r2, r4
   1c9fa:	4630      	mov	r0, r6
   1c9fc:	4639      	mov	r1, r7
   1c9fe:	462b      	mov	r3, r5
   1ca00:	f7fb fb6c 	bl	180dc <__aeabi_dsub>
   1ca04:	9a06      	ldr	r2, [sp, #24]
   1ca06:	e882 0003 	stmia.w	r2, {r0, r1}
   1ca0a:	9b06      	ldr	r3, [sp, #24]
   1ca0c:	4630      	mov	r0, r6
   1ca0e:	9e06      	ldr	r6, [sp, #24]
   1ca10:	3308      	adds	r3, #8
   1ca12:	930b      	str	r3, [sp, #44]
   1ca14:	4639      	mov	r1, r7
   1ca16:	e896 000c 	ldmia.w	r6, {r2, r3}
   1ca1a:	f7fb fb5f 	bl	180dc <__aeabi_dsub>
   1ca1e:	4622      	mov	r2, r4
   1ca20:	462b      	mov	r3, r5
   1ca22:	f7fb fb5b 	bl	180dc <__aeabi_dsub>
   1ca26:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1ca2a:	980a      	ldr	r0, [sp, #40]
   1ca2c:	2800      	cmp	r0, #0
   1ca2e:	da77      	bge.n	1cb20 <__ieee754_rem_pio2+0x400>
   1ca30:	6873      	ldr	r3, [r6, #4]
   1ca32:	990b      	ldr	r1, [sp, #44]
   1ca34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ca38:	6073      	str	r3, [r6, #4]
   1ca3a:	684b      	ldr	r3, [r1, #4]
   1ca3c:	9a08      	ldr	r2, [sp, #32]
   1ca3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1ca42:	604b      	str	r3, [r1, #4]
   1ca44:	f1c2 0200 	rsb	r2, r2, #0	; 0x0
   1ca48:	9208      	str	r2, [sp, #32]
   1ca4a:	e069      	b.n	1cb20 <__ieee754_rem_pio2+0x400>
   1ca4c:	4b3a      	ldr	r3, [pc, #232]	(1cb38 <__ieee754_rem_pio2+0x418>)
   1ca4e:	9e09      	ldr	r6, [sp, #36]
   1ca50:	429e      	cmp	r6, r3
   1ca52:	dd0b      	ble.n	1ca6c <__ieee754_rem_pio2+0x34c>
   1ca54:	4602      	mov	r2, r0
   1ca56:	460b      	mov	r3, r1
   1ca58:	f7fb fb40 	bl	180dc <__aeabi_dsub>
   1ca5c:	9a06      	ldr	r2, [sp, #24]
   1ca5e:	2300      	movs	r3, #0
   1ca60:	e9c2 0102 	strd	r0, r1, [r2, #8]
   1ca64:	e882 0003 	stmia.w	r2, {r0, r1}
   1ca68:	9308      	str	r3, [sp, #32]
   1ca6a:	e059      	b.n	1cb20 <__ieee754_rem_pio2+0x400>
   1ca6c:	9e09      	ldr	r6, [sp, #36]
   1ca6e:	4602      	mov	r2, r0
   1ca70:	1531      	asrs	r1, r6, #20
   1ca72:	f5a1 6682 	sub.w	r6, r1, #1040	; 0x410
   1ca76:	9809      	ldr	r0, [sp, #36]
   1ca78:	3e06      	subs	r6, #6
   1ca7a:	eba0 5306 	sub.w	r3, r0, r6, lsl #20
   1ca7e:	4619      	mov	r1, r3
   1ca80:	4610      	mov	r0, r2
   1ca82:	4614      	mov	r4, r2
   1ca84:	461d      	mov	r5, r3
   1ca86:	f7fb ff75 	bl	18974 <__aeabi_d2iz>
   1ca8a:	f7fb fc75 	bl	18378 <__aeabi_i2d>
   1ca8e:	4602      	mov	r2, r0
   1ca90:	460b      	mov	r3, r1
   1ca92:	4620      	mov	r0, r4
   1ca94:	4629      	mov	r1, r5
   1ca96:	e9cd 230c 	strd	r2, r3, [sp, #48]
   1ca9a:	f7fb fb1f 	bl	180dc <__aeabi_dsub>
   1ca9e:	2200      	movs	r2, #0
   1caa0:	4b26      	ldr	r3, [pc, #152]	(1cb3c <__ieee754_rem_pio2+0x41c>)
   1caa2:	f7fb fccf 	bl	18444 <__aeabi_dmul>
   1caa6:	460d      	mov	r5, r1
   1caa8:	4604      	mov	r4, r0
   1caaa:	f7fb ff63 	bl	18974 <__aeabi_d2iz>
   1caae:	f7fb fc63 	bl	18378 <__aeabi_i2d>
   1cab2:	4602      	mov	r2, r0
   1cab4:	460b      	mov	r3, r1
   1cab6:	4620      	mov	r0, r4
   1cab8:	4629      	mov	r1, r5
   1caba:	e9cd 230e 	strd	r2, r3, [sp, #56]
   1cabe:	f7fb fb0d 	bl	180dc <__aeabi_dsub>
   1cac2:	2200      	movs	r2, #0
   1cac4:	4b1d      	ldr	r3, [pc, #116]	(1cb3c <__ieee754_rem_pio2+0x41c>)
   1cac6:	f7fb fcbd 	bl	18444 <__aeabi_dmul>
   1caca:	e9cd 0110 	strd	r0, r1, [sp, #64]
   1cace:	ad0c      	add	r5, sp, #48
   1cad0:	2403      	movs	r4, #3
   1cad2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   1cad6:	2200      	movs	r2, #0
   1cad8:	2300      	movs	r3, #0
   1cada:	4627      	mov	r7, r4
   1cadc:	3d08      	subs	r5, #8
   1cade:	3c01      	subs	r4, #1
   1cae0:	f7fb ff16 	bl	18910 <__aeabi_dcmpeq>
   1cae4:	2800      	cmp	r0, #0
   1cae6:	d1f4      	bne.n	1cad2 <__ieee754_rem_pio2+0x3b2>
   1cae8:	2302      	movs	r3, #2
   1caea:	9300      	str	r3, [sp, #0]
   1caec:	4b14      	ldr	r3, [pc, #80]	(1cb40 <__ieee754_rem_pio2+0x420>)
   1caee:	9906      	ldr	r1, [sp, #24]
   1caf0:	9301      	str	r3, [sp, #4]
   1caf2:	a80c      	add	r0, sp, #48
   1caf4:	4632      	mov	r2, r6
   1caf6:	463b      	mov	r3, r7
   1caf8:	f000 f9da 	bl	1ceb0 <__kernel_rem_pio2>
   1cafc:	990a      	ldr	r1, [sp, #40]
   1cafe:	9008      	str	r0, [sp, #32]
   1cb00:	2900      	cmp	r1, #0
   1cb02:	da0d      	bge.n	1cb20 <__ieee754_rem_pio2+0x400>
   1cb04:	9a06      	ldr	r2, [sp, #24]
   1cb06:	f1c0 0000 	rsb	r0, r0, #0	; 0x0
   1cb0a:	6853      	ldr	r3, [r2, #4]
   1cb0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1cb10:	6053      	str	r3, [r2, #4]
   1cb12:	f102 0208 	add.w	r2, r2, #8	; 0x8
   1cb16:	6853      	ldr	r3, [r2, #4]
   1cb18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1cb1c:	6053      	str	r3, [r2, #4]
   1cb1e:	9008      	str	r0, [sp, #32]
   1cb20:	9808      	ldr	r0, [sp, #32]
   1cb22:	b013      	add	sp, #76
   1cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb26:	46c0      	nop			(mov r8, r8)
   1cb28:	2e000000 	.word	0x2e000000
   1cb2c:	3ba3198a 	.word	0x3ba3198a
   1cb30:	252049c1 	.word	0x252049c1
   1cb34:	397b839a 	.word	0x397b839a
   1cb38:	7fefffff 	.word	0x7fefffff
   1cb3c:	41700000 	.word	0x41700000
   1cb40:	00021188 	.word	0x00021188
   1cb44:	46c046c0 	.word	0x46c046c0

0001cb48 <__ieee754_sqrt>:
   1cb48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb4a:	4b67      	ldr	r3, [pc, #412]	(1cce8 <__ieee754_sqrt+0x1a0>)
   1cb4c:	4a66      	ldr	r2, [pc, #408]	(1cce8 <__ieee754_sqrt+0x1a0>)
   1cb4e:	ea01 0303 	and.w	r3, r1, r3
   1cb52:	4604      	mov	r4, r0
   1cb54:	4293      	cmp	r3, r2
   1cb56:	b083      	sub	sp, #12
   1cb58:	460d      	mov	r5, r1
   1cb5a:	4608      	mov	r0, r1
   1cb5c:	46a4      	mov	ip, r4
   1cb5e:	d10b      	bne.n	1cb78 <__ieee754_sqrt+0x30>
   1cb60:	4622      	mov	r2, r4
   1cb62:	462b      	mov	r3, r5
   1cb64:	4620      	mov	r0, r4
   1cb66:	f7fb fc6d 	bl	18444 <__aeabi_dmul>
   1cb6a:	4602      	mov	r2, r0
   1cb6c:	460b      	mov	r3, r1
   1cb6e:	4620      	mov	r0, r4
   1cb70:	4629      	mov	r1, r5
   1cb72:	f7fb fab5 	bl	180e0 <__adddf3>
   1cb76:	e010      	b.n	1cb9a <__ieee754_sqrt+0x52>
   1cb78:	2900      	cmp	r1, #0
   1cb7a:	dc11      	bgt.n	1cba0 <__ieee754_sqrt+0x58>
   1cb7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1cb80:	4323      	orrs	r3, r4
   1cb82:	f000 80ad 	beq.w	1cce0 <__ieee754_sqrt+0x198>
   1cb86:	b159      	cbz	r1, 1cba0 <__ieee754_sqrt+0x58>
   1cb88:	4622      	mov	r2, r4
   1cb8a:	460b      	mov	r3, r1
   1cb8c:	4620      	mov	r0, r4
   1cb8e:	f7fb faa5 	bl	180dc <__aeabi_dsub>
   1cb92:	4602      	mov	r2, r0
   1cb94:	460b      	mov	r3, r1
   1cb96:	f7fb fd7f 	bl	18698 <__aeabi_ddiv>
   1cb9a:	4604      	mov	r4, r0
   1cb9c:	460d      	mov	r5, r1
   1cb9e:	e09f      	b.n	1cce0 <__ieee754_sqrt+0x198>
   1cba0:	1501      	asrs	r1, r0, #20
   1cba2:	d005      	beq.n	1cbb0 <__ieee754_sqrt+0x68>
   1cba4:	e018      	b.n	1cbd8 <__ieee754_sqrt+0x90>
   1cba6:	ea4f 20dc 	mov.w	r0, ip, lsr #11
   1cbaa:	3915      	subs	r1, #21
   1cbac:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   1cbb0:	2800      	cmp	r0, #0
   1cbb2:	d0f8      	beq.n	1cba6 <__ieee754_sqrt+0x5e>
   1cbb4:	2200      	movs	r2, #0
   1cbb6:	e001      	b.n	1cbbc <__ieee754_sqrt+0x74>
   1cbb8:	0040      	lsls	r0, r0, #1
   1cbba:	3201      	adds	r2, #1
   1cbbc:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
   1cbc0:	d0fa      	beq.n	1cbb8 <__ieee754_sqrt+0x70>
   1cbc2:	1c4b      	adds	r3, r1, #1
   1cbc4:	ebc2 0103 	rsb	r1, r2, r3
   1cbc8:	f1c2 0320 	rsb	r3, r2, #32	; 0x20
   1cbcc:	fa2c f303 	lsr.w	r3, ip, r3
   1cbd0:	fa0c fc02 	lsl.w	ip, ip, r2
   1cbd4:	ea43 0000 	orr.w	r0, r3, r0
   1cbd8:	f5a1 717e 	sub.w	r1, r1, #1016	; 0x3f8
   1cbdc:	1fcb      	subs	r3, r1, #7
   1cbde:	9301      	str	r3, [sp, #4]
   1cbe0:	9c01      	ldr	r4, [sp, #4]
   1cbe2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   1cbe6:	f014 0f01 	tst.w	r4, #1	; 0x1
   1cbea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1cbee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
   1cbf2:	bf1e      	ittt	ne
   1cbf4:	ea4f 73dc 	movne.w	r3, ip, lsr #31
   1cbf8:	ea4f 0c4c 	movne.w	ip, ip, lsl #1
   1cbfc:	eb03 0242 	addne.w	r2, r3, r2, lsl #1
   1cc00:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1cc04:	2500      	movs	r5, #0
   1cc06:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1cc0a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1cc0e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   1cc12:	9500      	str	r5, [sp, #0]
   1cc14:	2400      	movs	r4, #0
   1cc16:	eb05 0300 	add.w	r3, r5, r0
   1cc1a:	4293      	cmp	r3, r2
   1cc1c:	dc05      	bgt.n	1cc2a <__ieee754_sqrt+0xe2>
   1cc1e:	eb03 0500 	add.w	r5, r3, r0
   1cc22:	1ad2      	subs	r2, r2, r3
   1cc24:	9b00      	ldr	r3, [sp, #0]
   1cc26:	181b      	adds	r3, r3, r0
   1cc28:	9300      	str	r3, [sp, #0]
   1cc2a:	3401      	adds	r4, #1
   1cc2c:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1cc30:	0840      	lsrs	r0, r0, #1
   1cc32:	2c16      	cmp	r4, #22
   1cc34:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1cc38:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1cc3c:	d1eb      	bne.n	1cc16 <__ieee754_sqrt+0xce>
   1cc3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1cc42:	2700      	movs	r7, #0
   1cc44:	2000      	movs	r0, #0
   1cc46:	2600      	movs	r6, #0
   1cc48:	4295      	cmp	r5, r2
   1cc4a:	eb01 0407 	add.w	r4, r1, r7
   1cc4e:	db08      	blt.n	1cc62 <__ieee754_sqrt+0x11a>
   1cc50:	bf14      	ite	ne
   1cc52:	2300      	movne	r3, #0
   1cc54:	2301      	moveq	r3, #1
   1cc56:	4564      	cmp	r4, ip
   1cc58:	bf8c      	ite	hi
   1cc5a:	2300      	movhi	r3, #0
   1cc5c:	f003 0301 	andls.w	r3, r3, #1	; 0x1
   1cc60:	b19b      	cbz	r3, 1cc8a <__ieee754_sqrt+0x142>
   1cc62:	f004 4300 	and.w	r3, r4, #2147483648	; 0x80000000
   1cc66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1cc6a:	eb04 0701 	add.w	r7, r4, r1
   1cc6e:	d103      	bne.n	1cc78 <__ieee754_sqrt+0x130>
   1cc70:	421f      	tst	r7, r3
   1cc72:	d101      	bne.n	1cc78 <__ieee754_sqrt+0x130>
   1cc74:	1c6b      	adds	r3, r5, #1
   1cc76:	e000      	b.n	1cc7a <__ieee754_sqrt+0x132>
   1cc78:	462b      	mov	r3, r5
   1cc7a:	1b52      	subs	r2, r2, r5
   1cc7c:	45a4      	cmp	ip, r4
   1cc7e:	bf38      	it	cc
   1cc80:	3a01      	subcc	r2, #1
   1cc82:	ebc4 0c0c 	rsb	ip, r4, ip
   1cc86:	1840      	adds	r0, r0, r1
   1cc88:	461d      	mov	r5, r3
   1cc8a:	3601      	adds	r6, #1
   1cc8c:	ea4f 73dc 	mov.w	r3, ip, lsr #31
   1cc90:	0849      	lsrs	r1, r1, #1
   1cc92:	2e20      	cmp	r6, #32
   1cc94:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1cc98:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1cc9c:	d1d4      	bne.n	1cc48 <__ieee754_sqrt+0x100>
   1cc9e:	ea52 020c 	orrs.w	r2, r2, ip
   1cca2:	d00a      	beq.n	1ccba <__ieee754_sqrt+0x172>
   1cca4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1cca8:	bf1c      	itt	ne
   1ccaa:	f000 0301 	andne.w	r3, r0, #1	; 0x1
   1ccae:	1818      	addne	r0, r3, r0
   1ccb0:	d103      	bne.n	1ccba <__ieee754_sqrt+0x172>
   1ccb2:	9c00      	ldr	r4, [sp, #0]
   1ccb4:	2000      	movs	r0, #0
   1ccb6:	3401      	adds	r4, #1
   1ccb8:	9400      	str	r4, [sp, #0]
   1ccba:	9b00      	ldr	r3, [sp, #0]
   1ccbc:	9c01      	ldr	r4, [sp, #4]
   1ccbe:	0840      	lsrs	r0, r0, #1
   1ccc0:	f013 0f01 	tst.w	r3, #1	; 0x1
   1ccc4:	bf18      	it	ne
   1ccc6:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   1ccca:	1061      	asrs	r1, r4, #1
   1cccc:	0509      	lsls	r1, r1, #20
   1ccce:	9c00      	ldr	r4, [sp, #0]
   1ccd0:	f101 517e 	add.w	r1, r1, #1065353216	; 0x3f800000
   1ccd4:	f501 01c0 	add.w	r1, r1, #6291456	; 0x600000
   1ccd8:	eb01 0364 	add.w	r3, r1, r4, asr #1
   1ccdc:	461d      	mov	r5, r3
   1ccde:	4604      	mov	r4, r0
   1cce0:	4620      	mov	r0, r4
   1cce2:	4629      	mov	r1, r5
   1cce4:	b003      	add	sp, #12
   1cce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cce8:	7ff00000 	.word	0x7ff00000
   1ccec:	00000000 	.word	0x00000000

0001ccf0 <__kernel_cos>:
   1ccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccf2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1ccf6:	b08d      	sub	sp, #52
   1ccf8:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
   1ccfc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1cd00:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1cd04:	da05      	bge.n	1cd12 <__kernel_cos+0x22>
   1cd06:	f7fb fe35 	bl	18974 <__aeabi_d2iz>
   1cd0a:	b910      	cbnz	r0, 1cd12 <__kernel_cos+0x22>
   1cd0c:	2000      	movs	r0, #0
   1cd0e:	4962      	ldr	r1, [pc, #392]	(1ce98 <__kernel_cos+0x1a8>)
   1cd10:	e0a8      	b.n	1ce64 <__kernel_cos+0x174>
   1cd12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1cd16:	4602      	mov	r2, r0
   1cd18:	460b      	mov	r3, r1
   1cd1a:	f7fb fb93 	bl	18444 <__aeabi_dmul>
   1cd1e:	a252      	add	r2, pc, #328	(adr r2, 1ce68 <__kernel_cos+0x178>)
   1cd20:	ca0c      	ldmia	r2!, {r2, r3}
   1cd22:	4606      	mov	r6, r0
   1cd24:	460f      	mov	r7, r1
   1cd26:	f7fb fb8d 	bl	18444 <__aeabi_dmul>
   1cd2a:	a251      	add	r2, pc, #324	(adr r2, 1ce70 <__kernel_cos+0x180>)
   1cd2c:	ca0c      	ldmia	r2!, {r2, r3}
   1cd2e:	f7fb f9d7 	bl	180e0 <__adddf3>
   1cd32:	4602      	mov	r2, r0
   1cd34:	460b      	mov	r3, r1
   1cd36:	4630      	mov	r0, r6
   1cd38:	4639      	mov	r1, r7
   1cd3a:	f7fb fb83 	bl	18444 <__aeabi_dmul>
   1cd3e:	a24e      	add	r2, pc, #312	(adr r2, 1ce78 <__kernel_cos+0x188>)
   1cd40:	ca0c      	ldmia	r2!, {r2, r3}
   1cd42:	f7fb f9cb 	bl	180dc <__aeabi_dsub>
   1cd46:	4602      	mov	r2, r0
   1cd48:	460b      	mov	r3, r1
   1cd4a:	4630      	mov	r0, r6
   1cd4c:	4639      	mov	r1, r7
   1cd4e:	f7fb fb79 	bl	18444 <__aeabi_dmul>
   1cd52:	a24b      	add	r2, pc, #300	(adr r2, 1ce80 <__kernel_cos+0x190>)
   1cd54:	ca0c      	ldmia	r2!, {r2, r3}
   1cd56:	f7fb f9c3 	bl	180e0 <__adddf3>
   1cd5a:	4602      	mov	r2, r0
   1cd5c:	460b      	mov	r3, r1
   1cd5e:	4630      	mov	r0, r6
   1cd60:	4639      	mov	r1, r7
   1cd62:	f7fb fb6f 	bl	18444 <__aeabi_dmul>
   1cd66:	a248      	add	r2, pc, #288	(adr r2, 1ce88 <__kernel_cos+0x198>)
   1cd68:	ca0c      	ldmia	r2!, {r2, r3}
   1cd6a:	f7fb f9b7 	bl	180dc <__aeabi_dsub>
   1cd6e:	4602      	mov	r2, r0
   1cd70:	460b      	mov	r3, r1
   1cd72:	4630      	mov	r0, r6
   1cd74:	4639      	mov	r1, r7
   1cd76:	f7fb fb65 	bl	18444 <__aeabi_dmul>
   1cd7a:	a245      	add	r2, pc, #276	(adr r2, 1ce90 <__kernel_cos+0x1a0>)
   1cd7c:	ca0c      	ldmia	r2!, {r2, r3}
   1cd7e:	f7fb f9af 	bl	180e0 <__adddf3>
   1cd82:	460b      	mov	r3, r1
   1cd84:	4602      	mov	r2, r0
   1cd86:	4639      	mov	r1, r7
   1cd88:	4630      	mov	r0, r6
   1cd8a:	f7fb fb5b 	bl	18444 <__aeabi_dmul>
   1cd8e:	4b43      	ldr	r3, [pc, #268]	(1ce9c <__kernel_cos+0x1ac>)
   1cd90:	e9cd 010a 	strd	r0, r1, [sp, #40]
   1cd94:	429c      	cmp	r4, r3
   1cd96:	dc26      	bgt.n	1cde6 <__kernel_cos+0xf6>
   1cd98:	2200      	movs	r2, #0
   1cd9a:	4b41      	ldr	r3, [pc, #260]	(1cea0 <__kernel_cos+0x1b0>)
   1cd9c:	4630      	mov	r0, r6
   1cd9e:	4639      	mov	r1, r7
   1cda0:	f7fb fb50 	bl	18444 <__aeabi_dmul>
   1cda4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1cda8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1cdac:	4630      	mov	r0, r6
   1cdae:	4639      	mov	r1, r7
   1cdb0:	f7fb fb48 	bl	18444 <__aeabi_dmul>
   1cdb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1cdb8:	4604      	mov	r4, r0
   1cdba:	460d      	mov	r5, r1
   1cdbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1cdc0:	f7fb fb40 	bl	18444 <__aeabi_dmul>
   1cdc4:	4602      	mov	r2, r0
   1cdc6:	460b      	mov	r3, r1
   1cdc8:	4620      	mov	r0, r4
   1cdca:	4629      	mov	r1, r5
   1cdcc:	f7fb f986 	bl	180dc <__aeabi_dsub>
   1cdd0:	4602      	mov	r2, r0
   1cdd2:	460b      	mov	r3, r1
   1cdd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1cdd8:	f7fb f980 	bl	180dc <__aeabi_dsub>
   1cddc:	4602      	mov	r2, r0
   1cdde:	460b      	mov	r3, r1
   1cde0:	2000      	movs	r0, #0
   1cde2:	492d      	ldr	r1, [pc, #180]	(1ce98 <__kernel_cos+0x1a8>)
   1cde4:	e03c      	b.n	1ce60 <__kernel_cos+0x170>
   1cde6:	4b2f      	ldr	r3, [pc, #188]	(1cea4 <__kernel_cos+0x1b4>)
   1cde8:	429c      	cmp	r4, r3
   1cdea:	dd02      	ble.n	1cdf2 <__kernel_cos+0x102>
   1cdec:	2400      	movs	r4, #0
   1cdee:	4d2e      	ldr	r5, [pc, #184]	(1cea8 <__kernel_cos+0x1b8>)
   1cdf0:	e004      	b.n	1cdfc <__kernel_cos+0x10c>
   1cdf2:	f5a4 1300 	sub.w	r3, r4, #2097152	; 0x200000
   1cdf6:	2200      	movs	r2, #0
   1cdf8:	4614      	mov	r4, r2
   1cdfa:	461d      	mov	r5, r3
   1cdfc:	4622      	mov	r2, r4
   1cdfe:	462b      	mov	r3, r5
   1ce00:	2000      	movs	r0, #0
   1ce02:	4925      	ldr	r1, [pc, #148]	(1ce98 <__kernel_cos+0x1a8>)
   1ce04:	f7fb f96a 	bl	180dc <__aeabi_dsub>
   1ce08:	2200      	movs	r2, #0
   1ce0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ce0e:	4b24      	ldr	r3, [pc, #144]	(1cea0 <__kernel_cos+0x1b0>)
   1ce10:	4630      	mov	r0, r6
   1ce12:	4639      	mov	r1, r7
   1ce14:	f7fb fb16 	bl	18444 <__aeabi_dmul>
   1ce18:	4622      	mov	r2, r4
   1ce1a:	462b      	mov	r3, r5
   1ce1c:	f7fb f95e 	bl	180dc <__aeabi_dsub>
   1ce20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]
   1ce24:	e88d 0003 	stmia.w	sp, {r0, r1}
   1ce28:	4630      	mov	r0, r6
   1ce2a:	4639      	mov	r1, r7
   1ce2c:	f7fb fb0a 	bl	18444 <__aeabi_dmul>
   1ce30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1ce34:	4604      	mov	r4, r0
   1ce36:	460d      	mov	r5, r1
   1ce38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1ce3c:	f7fb fb02 	bl	18444 <__aeabi_dmul>
   1ce40:	4602      	mov	r2, r0
   1ce42:	460b      	mov	r3, r1
   1ce44:	4620      	mov	r0, r4
   1ce46:	4629      	mov	r1, r5
   1ce48:	f7fb f948 	bl	180dc <__aeabi_dsub>
   1ce4c:	4602      	mov	r2, r0
   1ce4e:	460b      	mov	r3, r1
   1ce50:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1ce54:	f7fb f942 	bl	180dc <__aeabi_dsub>
   1ce58:	4602      	mov	r2, r0
   1ce5a:	460b      	mov	r3, r1
   1ce5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1ce60:	f7fb f93c 	bl	180dc <__aeabi_dsub>
   1ce64:	b00d      	add	sp, #52
   1ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce68:	be8838d4 	.word	0xbe8838d4
   1ce6c:	bda8fae9 	.word	0xbda8fae9
   1ce70:	bdb4b1c4 	.word	0xbdb4b1c4
   1ce74:	3e21ee9e 	.word	0x3e21ee9e
   1ce78:	809c52ad 	.word	0x809c52ad
   1ce7c:	3e927e4f 	.word	0x3e927e4f
   1ce80:	19cb1590 	.word	0x19cb1590
   1ce84:	3efa01a0 	.word	0x3efa01a0
   1ce88:	16c15177 	.word	0x16c15177
   1ce8c:	3f56c16c 	.word	0x3f56c16c
   1ce90:	5555554c 	.word	0x5555554c
   1ce94:	3fa55555 	.word	0x3fa55555
   1ce98:	3ff00000 	.word	0x3ff00000
   1ce9c:	3fd33332 	.word	0x3fd33332
   1cea0:	3fe00000 	.word	0x3fe00000
   1cea4:	3fe90000 	.word	0x3fe90000
   1cea8:	3fd20000 	.word	0x3fd20000
   1ceac:	46c046c0 	.word	0x46c046c0

0001ceb0 <__kernel_rem_pio2>:
   1ceb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ceb2:	f5ad 7d35 	sub.w	sp, sp, #724	; 0x2d4
   1ceb6:	930a      	str	r3, [sp, #40]
   1ceb8:	900c      	str	r0, [sp, #48]
   1ceba:	f8df 36f0 	ldr.w	r3, [pc, #1776]	; 1d5ac <__kernel_rem_pio2+0x6fc>
   1cebe:	98ba      	ldr	r0, [sp, #744]
   1cec0:	910b      	str	r1, [sp, #44]
   1cec2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cec6:	990a      	ldr	r1, [sp, #40]
   1cec8:	f8df 06e4 	ldr.w	r0, [pc, #1764]	; 1d5b0 <__kernel_rem_pio2+0x700>
   1cecc:	930f      	str	r3, [sp, #60]
   1cece:	3901      	subs	r1, #1
   1ced0:	1ed3      	subs	r3, r2, #3
   1ced2:	910e      	str	r1, [sp, #56]
   1ced4:	fb83 0100 	smull	r0, r1, r3, r0
   1ced8:	17db      	asrs	r3, r3, #31
   1ceda:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1cede:	2b00      	cmp	r3, #0
   1cee0:	bfb8      	it	lt
   1cee2:	2300      	movlt	r3, #0
   1cee4:	9327      	str	r3, [sp, #156]
   1cee6:	ea6f 0303 	mvn.w	r3, r3
   1ceea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ceee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1cef2:	9c27      	ldr	r4, [sp, #156]
   1cef4:	9312      	str	r3, [sp, #72]
   1cef6:	9a0f      	ldr	r2, [sp, #60]
   1cef8:	9b0e      	ldr	r3, [sp, #56]
   1cefa:	98bb      	ldr	r0, [sp, #748]
   1cefc:	ebc3 0604 	rsb	r6, r3, r4
   1cf00:	18d2      	adds	r2, r2, r3
   1cf02:	9211      	str	r2, [sp, #68]
   1cf04:	af78      	add	r7, sp, #480
   1cf06:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1cf0a:	2400      	movs	r4, #0
   1cf0c:	e00a      	b.n	1cf24 <__kernel_rem_pio2+0x74>
   1cf0e:	42f4      	cmn	r4, r6
   1cf10:	d502      	bpl.n	1cf18 <__kernel_rem_pio2+0x68>
   1cf12:	2000      	movs	r0, #0
   1cf14:	2100      	movs	r1, #0
   1cf16:	e002      	b.n	1cf1e <__kernel_rem_pio2+0x6e>
   1cf18:	6828      	ldr	r0, [r5, #0]
   1cf1a:	f7fb fa2d 	bl	18378 <__aeabi_i2d>
   1cf1e:	c703      	stmia	r7!, {r0, r1}
   1cf20:	3401      	adds	r4, #1
   1cf22:	3504      	adds	r5, #4
   1cf24:	9911      	ldr	r1, [sp, #68]
   1cf26:	428c      	cmp	r4, r1
   1cf28:	ddf1      	ble.n	1cf0e <__kernel_rem_pio2+0x5e>
   1cf2a:	9b0e      	ldr	r3, [sp, #56]
   1cf2c:	aa28      	add	r2, sp, #160
   1cf2e:	2400      	movs	r4, #0
   1cf30:	921f      	str	r2, [sp, #124]
   1cf32:	9320      	str	r3, [sp, #128]
   1cf34:	9421      	str	r4, [sp, #132]
   1cf36:	e01f      	b.n	1cf78 <__kernel_rem_pio2+0xc8>
   1cf38:	9a1e      	ldr	r2, [sp, #120]
   1cf3a:	3601      	adds	r6, #1
   1cf3c:	e912 0003 	ldmdb	r2, {r0, r1}
   1cf40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1cf44:	f7fb fa7e 	bl	18444 <__aeabi_dmul>
   1cf48:	4602      	mov	r2, r0
   1cf4a:	460b      	mov	r3, r1
   1cf4c:	4620      	mov	r0, r4
   1cf4e:	4629      	mov	r1, r5
   1cf50:	f7fb f8c6 	bl	180e0 <__adddf3>
   1cf54:	4604      	mov	r4, r0
   1cf56:	460d      	mov	r5, r1
   1cf58:	9b1e      	ldr	r3, [sp, #120]
   1cf5a:	980e      	ldr	r0, [sp, #56]
   1cf5c:	3308      	adds	r3, #8
   1cf5e:	3f08      	subs	r7, #8
   1cf60:	4286      	cmp	r6, r0
   1cf62:	931e      	str	r3, [sp, #120]
   1cf64:	dde8      	ble.n	1cf38 <__kernel_rem_pio2+0x88>
   1cf66:	991f      	ldr	r1, [sp, #124]
   1cf68:	9a21      	ldr	r2, [sp, #132]
   1cf6a:	9b20      	ldr	r3, [sp, #128]
   1cf6c:	c130      	stmia	r1!, {r4, r5}
   1cf6e:	3201      	adds	r2, #1
   1cf70:	3301      	adds	r3, #1
   1cf72:	911f      	str	r1, [sp, #124]
   1cf74:	9221      	str	r2, [sp, #132]
   1cf76:	9320      	str	r3, [sp, #128]
   1cf78:	9c21      	ldr	r4, [sp, #132]
   1cf7a:	9e0f      	ldr	r6, [sp, #60]
   1cf7c:	42b4      	cmp	r4, r6
   1cf7e:	dc09      	bgt.n	1cf94 <__kernel_rem_pio2+0xe4>
   1cf80:	980c      	ldr	r0, [sp, #48]
   1cf82:	9a20      	ldr	r2, [sp, #128]
   1cf84:	a978      	add	r1, sp, #480
   1cf86:	901e      	str	r0, [sp, #120]
   1cf88:	eb01 07c2 	add.w	r7, r1, r2, lsl #3
   1cf8c:	2600      	movs	r6, #0
   1cf8e:	2400      	movs	r4, #0
   1cf90:	2500      	movs	r5, #0
   1cf92:	e7e1      	b.n	1cf58 <__kernel_rem_pio2+0xa8>
   1cf94:	9b0f      	ldr	r3, [sp, #60]
   1cf96:	930d      	str	r3, [sp, #52]
   1cf98:	9c0d      	ldr	r4, [sp, #52]
   1cf9a:	aa28      	add	r2, sp, #160
   1cf9c:	1e60      	subs	r0, r4, #1
   1cf9e:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
   1cfa2:	2100      	movs	r1, #0
   1cfa4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   1cfa8:	e893 00c0 	ldmia.w	r3, {r6, r7}
   1cfac:	9022      	str	r0, [sp, #136]
   1cfae:	921d      	str	r2, [sp, #116]
   1cfb0:	9425      	str	r4, [sp, #148]
   1cfb2:	911c      	str	r1, [sp, #112]
   1cfb4:	e02b      	b.n	1d00e <__kernel_rem_pio2+0x15e>
   1cfb6:	2200      	movs	r2, #0
   1cfb8:	f8df 35f8 	ldr.w	r3, [pc, #1528]	; 1d5b4 <__kernel_rem_pio2+0x704>
   1cfbc:	4630      	mov	r0, r6
   1cfbe:	4639      	mov	r1, r7
   1cfc0:	f7fb fa40 	bl	18444 <__aeabi_dmul>
   1cfc4:	f7fb fcd6 	bl	18974 <__aeabi_d2iz>
   1cfc8:	f7fb f9d6 	bl	18378 <__aeabi_i2d>
   1cfcc:	2200      	movs	r2, #0
   1cfce:	f8df 35e8 	ldr.w	r3, [pc, #1512]	; 1d5b8 <__kernel_rem_pio2+0x708>
   1cfd2:	4604      	mov	r4, r0
   1cfd4:	460d      	mov	r5, r1
   1cfd6:	f7fb fa35 	bl	18444 <__aeabi_dmul>
   1cfda:	4602      	mov	r2, r0
   1cfdc:	460b      	mov	r3, r1
   1cfde:	4630      	mov	r0, r6
   1cfe0:	4639      	mov	r1, r7
   1cfe2:	f7fb f87d 	bl	180e0 <__adddf3>
   1cfe6:	f7fb fcc5 	bl	18974 <__aeabi_d2iz>
   1cfea:	9b1c      	ldr	r3, [sp, #112]
   1cfec:	aaa0      	add	r2, sp, #640
   1cfee:	50d0      	str	r0, [r2, r3]
   1cff0:	9e25      	ldr	r6, [sp, #148]
   1cff2:	4620      	mov	r0, r4
   1cff4:	9c1d      	ldr	r4, [sp, #116]
   1cff6:	3e01      	subs	r6, #1
   1cff8:	4629      	mov	r1, r5
   1cffa:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   1cffe:	9625      	str	r6, [sp, #148]
   1d000:	f7fb f86e 	bl	180e0 <__adddf3>
   1d004:	4606      	mov	r6, r0
   1d006:	981c      	ldr	r0, [sp, #112]
   1d008:	460f      	mov	r7, r1
   1d00a:	3004      	adds	r0, #4
   1d00c:	901c      	str	r0, [sp, #112]
   1d00e:	991d      	ldr	r1, [sp, #116]
   1d010:	9a25      	ldr	r2, [sp, #148]
   1d012:	3908      	subs	r1, #8
   1d014:	2a00      	cmp	r2, #0
   1d016:	911d      	str	r1, [sp, #116]
   1d018:	dccd      	bgt.n	1cfb6 <__kernel_rem_pio2+0x106>
   1d01a:	9a12      	ldr	r2, [sp, #72]
   1d01c:	4630      	mov	r0, r6
   1d01e:	4639      	mov	r1, r7
   1d020:	f000 fdc6 	bl	1dbb0 <scalbn>
   1d024:	2200      	movs	r2, #0
   1d026:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1d02a:	4604      	mov	r4, r0
   1d02c:	460d      	mov	r5, r1
   1d02e:	f7fb fa09 	bl	18444 <__aeabi_dmul>
   1d032:	f000 fd35 	bl	1daa0 <floor>
   1d036:	2200      	movs	r2, #0
   1d038:	f8df 3580 	ldr.w	r3, [pc, #1408]	; 1d5bc <__kernel_rem_pio2+0x70c>
   1d03c:	f7fb fa02 	bl	18444 <__aeabi_dmul>
   1d040:	4602      	mov	r2, r0
   1d042:	460b      	mov	r3, r1
   1d044:	4620      	mov	r0, r4
   1d046:	4629      	mov	r1, r5
   1d048:	f7fb f84a 	bl	180e0 <__adddf3>
   1d04c:	460d      	mov	r5, r1
   1d04e:	4604      	mov	r4, r0
   1d050:	f7fb fc90 	bl	18974 <__aeabi_d2iz>
   1d054:	9010      	str	r0, [sp, #64]
   1d056:	f7fb f98f 	bl	18378 <__aeabi_i2d>
   1d05a:	460b      	mov	r3, r1
   1d05c:	4602      	mov	r2, r0
   1d05e:	4629      	mov	r1, r5
   1d060:	4620      	mov	r0, r4
   1d062:	f7fb f83b 	bl	180dc <__aeabi_dsub>
   1d066:	9b12      	ldr	r3, [sp, #72]
   1d068:	4604      	mov	r4, r0
   1d06a:	2b00      	cmp	r3, #0
   1d06c:	460d      	mov	r5, r1
   1d06e:	dd16      	ble.n	1d09e <__kernel_rem_pio2+0x1ee>
   1d070:	9922      	ldr	r1, [sp, #136]
   1d072:	aeb4      	add	r6, sp, #720
   1d074:	eb06 0081 	add.w	r0, r6, r1, lsl #2
   1d078:	f850 2c50 	ldr.w	r2, [r0, #-80]
   1d07c:	f1c3 0118 	rsb	r1, r3, #24	; 0x18
   1d080:	fa52 f301 	asrs.w	r3, r2, r1
   1d084:	9e10      	ldr	r6, [sp, #64]
   1d086:	18f6      	adds	r6, r6, r3
   1d088:	408b      	lsls	r3, r1
   1d08a:	1ad2      	subs	r2, r2, r3
   1d08c:	f840 2c50 	str.w	r2, [r0, #-80]
   1d090:	9812      	ldr	r0, [sp, #72]
   1d092:	9610      	str	r6, [sp, #64]
   1d094:	f1c0 0317 	rsb	r3, r0, #23	; 0x17
   1d098:	fa52 f303 	asrs.w	r3, r2, r3
   1d09c:	e007      	b.n	1d0ae <__kernel_rem_pio2+0x1fe>
   1d09e:	d10b      	bne.n	1d0b8 <__kernel_rem_pio2+0x208>
   1d0a0:	9a22      	ldr	r2, [sp, #136]
   1d0a2:	a9b4      	add	r1, sp, #720
   1d0a4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
   1d0a8:	f853 3c50 	ldr.w	r3, [r3, #-80]
   1d0ac:	15db      	asrs	r3, r3, #23
   1d0ae:	9313      	str	r3, [sp, #76]
   1d0b0:	9813      	ldr	r0, [sp, #76]
   1d0b2:	2800      	cmp	r0, #0
   1d0b4:	dc0b      	bgt.n	1d0ce <__kernel_rem_pio2+0x21e>
   1d0b6:	e061      	b.n	1d17c <__kernel_rem_pio2+0x2cc>
   1d0b8:	2200      	movs	r2, #0
   1d0ba:	f8df 3504 	ldr.w	r3, [pc, #1284]	; 1d5c0 <__kernel_rem_pio2+0x710>
   1d0be:	f7fb fc45 	bl	1894c <__aeabi_dcmpge>
   1d0c2:	b910      	cbnz	r0, 1d0ca <__kernel_rem_pio2+0x21a>
   1d0c4:	2300      	movs	r3, #0
   1d0c6:	9313      	str	r3, [sp, #76]
   1d0c8:	e058      	b.n	1d17c <__kernel_rem_pio2+0x2cc>
   1d0ca:	2602      	movs	r6, #2
   1d0cc:	9613      	str	r6, [sp, #76]
   1d0ce:	9910      	ldr	r1, [sp, #64]
   1d0d0:	2600      	movs	r6, #0
   1d0d2:	3101      	adds	r1, #1
   1d0d4:	9110      	str	r1, [sp, #64]
   1d0d6:	2000      	movs	r0, #0
   1d0d8:	2100      	movs	r1, #0
   1d0da:	f50d 7c20 	add.w	ip, sp, #640	; 0x280
   1d0de:	e010      	b.n	1d102 <__kernel_rem_pio2+0x252>
   1d0e0:	f85c 2001 	ldr.w	r2, [ip, r1]
   1d0e4:	b936      	cbnz	r6, 1d0f4 <__kernel_rem_pio2+0x244>
   1d0e6:	b152      	cbz	r2, 1d0fe <__kernel_rem_pio2+0x24e>
   1d0e8:	f1c2 7380 	rsb	r3, r2, #16777216	; 0x1000000
   1d0ec:	f84c 3001 	str.w	r3, [ip, r1]
   1d0f0:	2601      	movs	r6, #1
   1d0f2:	e004      	b.n	1d0fe <__kernel_rem_pio2+0x24e>
   1d0f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   1d0f8:	1a9b      	subs	r3, r3, r2
   1d0fa:	f84c 3001 	str.w	r3, [ip, r1]
   1d0fe:	3001      	adds	r0, #1
   1d100:	3104      	adds	r1, #4
   1d102:	9a0d      	ldr	r2, [sp, #52]
   1d104:	4290      	cmp	r0, r2
   1d106:	dbeb      	blt.n	1d0e0 <__kernel_rem_pio2+0x230>
   1d108:	9b12      	ldr	r3, [sp, #72]
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	dd1b      	ble.n	1d146 <__kernel_rem_pio2+0x296>
   1d10e:	2b01      	cmp	r3, #1
   1d110:	d002      	beq.n	1d118 <__kernel_rem_pio2+0x268>
   1d112:	2b02      	cmp	r3, #2
   1d114:	d117      	bne.n	1d146 <__kernel_rem_pio2+0x296>
   1d116:	e00a      	b.n	1d12e <__kernel_rem_pio2+0x27e>
   1d118:	9922      	ldr	r1, [sp, #136]
   1d11a:	a8b4      	add	r0, sp, #720
   1d11c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
   1d120:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1d124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d128:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   1d12c:	e009      	b.n	1d142 <__kernel_rem_pio2+0x292>
   1d12e:	9822      	ldr	r0, [sp, #136]
   1d130:	abb4      	add	r3, sp, #720
   1d132:	eb03 0280 	add.w	r2, r3, r0, lsl #2
   1d136:	f852 3c50 	ldr.w	r3, [r2, #-80]
   1d13a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1d13e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
   1d142:	f842 3c50 	str.w	r3, [r2, #-80]
   1d146:	9913      	ldr	r1, [sp, #76]
   1d148:	2902      	cmp	r1, #2
   1d14a:	d117      	bne.n	1d17c <__kernel_rem_pio2+0x2cc>
   1d14c:	4622      	mov	r2, r4
   1d14e:	462b      	mov	r3, r5
   1d150:	2000      	movs	r0, #0
   1d152:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 1d5c4 <__kernel_rem_pio2+0x714>
   1d156:	f7fa ffc1 	bl	180dc <__aeabi_dsub>
   1d15a:	4604      	mov	r4, r0
   1d15c:	460d      	mov	r5, r1
   1d15e:	b16e      	cbz	r6, 1d17c <__kernel_rem_pio2+0x2cc>
   1d160:	9a12      	ldr	r2, [sp, #72]
   1d162:	2000      	movs	r0, #0
   1d164:	f8df 145c 	ldr.w	r1, [pc, #1116]	; 1d5c4 <__kernel_rem_pio2+0x714>
   1d168:	f000 fd22 	bl	1dbb0 <scalbn>
   1d16c:	4602      	mov	r2, r0
   1d16e:	460b      	mov	r3, r1
   1d170:	4620      	mov	r0, r4
   1d172:	4629      	mov	r1, r5
   1d174:	f7fa ffb2 	bl	180dc <__aeabi_dsub>
   1d178:	4604      	mov	r4, r0
   1d17a:	460d      	mov	r5, r1
   1d17c:	2200      	movs	r2, #0
   1d17e:	2300      	movs	r3, #0
   1d180:	4620      	mov	r0, r4
   1d182:	4629      	mov	r1, r5
   1d184:	f7fb fbc4 	bl	18910 <__aeabi_dcmpeq>
   1d188:	2800      	cmp	r0, #0
   1d18a:	d073      	beq.n	1d274 <__kernel_rem_pio2+0x3c4>
   1d18c:	9a22      	ldr	r2, [sp, #136]
   1d18e:	aba0      	add	r3, sp, #640
   1d190:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   1d194:	2200      	movs	r2, #0
   1d196:	e004      	b.n	1d1a2 <__kernel_rem_pio2+0x2f2>
   1d198:	684b      	ldr	r3, [r1, #4]
   1d19a:	431a      	orrs	r2, r3
   1d19c:	9b22      	ldr	r3, [sp, #136]
   1d19e:	3b01      	subs	r3, #1
   1d1a0:	9322      	str	r3, [sp, #136]
   1d1a2:	9c22      	ldr	r4, [sp, #136]
   1d1a4:	9e0f      	ldr	r6, [sp, #60]
   1d1a6:	3904      	subs	r1, #4
   1d1a8:	42b4      	cmp	r4, r6
   1d1aa:	daf5      	bge.n	1d198 <__kernel_rem_pio2+0x2e8>
   1d1ac:	2a00      	cmp	r2, #0
   1d1ae:	d162      	bne.n	1d276 <__kernel_rem_pio2+0x3c6>
   1d1b0:	aba0      	add	r3, sp, #640
   1d1b2:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1d1b6:	2201      	movs	r2, #1
   1d1b8:	e000      	b.n	1d1bc <__kernel_rem_pio2+0x30c>
   1d1ba:	3201      	adds	r2, #1
   1d1bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1d1c0:	2b00      	cmp	r3, #0
   1d1c2:	d0fa      	beq.n	1d1ba <__kernel_rem_pio2+0x30a>
   1d1c4:	980d      	ldr	r0, [sp, #52]
   1d1c6:	9927      	ldr	r1, [sp, #156]
   1d1c8:	ab28      	add	r3, sp, #160
   1d1ca:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1d1ce:	931a      	str	r3, [sp, #104]
   1d1d0:	1c4b      	adds	r3, r1, #1
   1d1d2:	990a      	ldr	r1, [sp, #40]
   1d1d4:	1812      	adds	r2, r2, r0
   1d1d6:	9cbb      	ldr	r4, [sp, #748]
   1d1d8:	4401      	add	r1, r0
   1d1da:	181b      	adds	r3, r3, r0
   1d1dc:	9205      	str	r2, [sp, #20]
   1d1de:	aa78      	add	r2, sp, #480
   1d1e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1d1e4:	2600      	movs	r6, #0
   1d1e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   1d1ea:	931b      	str	r3, [sp, #108]
   1d1ec:	9619      	str	r6, [sp, #100]
   1d1ee:	9104      	str	r1, [sp, #16]
   1d1f0:	9203      	str	r2, [sp, #12]
   1d1f2:	e036      	b.n	1d262 <__kernel_rem_pio2+0x3b2>
   1d1f4:	991b      	ldr	r1, [sp, #108]
   1d1f6:	9b03      	ldr	r3, [sp, #12]
   1d1f8:	9e19      	ldr	r6, [sp, #100]
   1d1fa:	6808      	ldr	r0, [r1, #0]
   1d1fc:	eb03 04c6 	add.w	r4, r3, r6, lsl #3
   1d200:	f7fb f8ba 	bl	18378 <__aeabi_i2d>
   1d204:	e884 0003 	stmia.w	r4, {r0, r1}
   1d208:	9c04      	ldr	r4, [sp, #16]
   1d20a:	9a0c      	ldr	r2, [sp, #48]
   1d20c:	eb04 0306 	add.w	r3, r4, r6
   1d210:	ae78      	add	r6, sp, #480
   1d212:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
   1d216:	9218      	str	r2, [sp, #96]
   1d218:	2600      	movs	r6, #0
   1d21a:	2400      	movs	r4, #0
   1d21c:	2500      	movs	r5, #0
   1d21e:	e00f      	b.n	1d240 <__kernel_rem_pio2+0x390>
   1d220:	9a18      	ldr	r2, [sp, #96]
   1d222:	3601      	adds	r6, #1
   1d224:	e912 0003 	ldmdb	r2, {r0, r1}
   1d228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1d22c:	f7fb f90a 	bl	18444 <__aeabi_dmul>
   1d230:	4602      	mov	r2, r0
   1d232:	460b      	mov	r3, r1
   1d234:	4620      	mov	r0, r4
   1d236:	4629      	mov	r1, r5
   1d238:	f7fa ff52 	bl	180e0 <__adddf3>
   1d23c:	4604      	mov	r4, r0
   1d23e:	460d      	mov	r5, r1
   1d240:	9b18      	ldr	r3, [sp, #96]
   1d242:	980e      	ldr	r0, [sp, #56]
   1d244:	3308      	adds	r3, #8
   1d246:	3f08      	subs	r7, #8
   1d248:	4286      	cmp	r6, r0
   1d24a:	9318      	str	r3, [sp, #96]
   1d24c:	dde8      	ble.n	1d220 <__kernel_rem_pio2+0x370>
   1d24e:	991a      	ldr	r1, [sp, #104]
   1d250:	9a19      	ldr	r2, [sp, #100]
   1d252:	9b1b      	ldr	r3, [sp, #108]
   1d254:	e9e1 4502 	strd	r4, r5, [r1, #8]!
   1d258:	3201      	adds	r2, #1
   1d25a:	3304      	adds	r3, #4
   1d25c:	911a      	str	r1, [sp, #104]
   1d25e:	9219      	str	r2, [sp, #100]
   1d260:	931b      	str	r3, [sp, #108]
   1d262:	9c0d      	ldr	r4, [sp, #52]
   1d264:	9e19      	ldr	r6, [sp, #100]
   1d266:	1c63      	adds	r3, r4, #1
   1d268:	9805      	ldr	r0, [sp, #20]
   1d26a:	199b      	adds	r3, r3, r6
   1d26c:	4283      	cmp	r3, r0
   1d26e:	ddc1      	ble.n	1d1f4 <__kernel_rem_pio2+0x344>
   1d270:	900d      	str	r0, [sp, #52]
   1d272:	e691      	b.n	1cf98 <__kernel_rem_pio2+0xe8>
   1d274:	d014      	beq.n	1d2a0 <__kernel_rem_pio2+0x3f0>
   1d276:	9c0d      	ldr	r4, [sp, #52]
   1d278:	9912      	ldr	r1, [sp, #72]
   1d27a:	aba0      	add	r3, sp, #640
   1d27c:	3918      	subs	r1, #24
   1d27e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   1d282:	3c01      	subs	r4, #1
   1d284:	9112      	str	r1, [sp, #72]
   1d286:	940d      	str	r4, [sp, #52]
   1d288:	e005      	b.n	1d296 <__kernel_rem_pio2+0x3e6>
   1d28a:	9e0d      	ldr	r6, [sp, #52]
   1d28c:	9812      	ldr	r0, [sp, #72]
   1d28e:	3e01      	subs	r6, #1
   1d290:	3818      	subs	r0, #24
   1d292:	960d      	str	r6, [sp, #52]
   1d294:	9012      	str	r0, [sp, #72]
   1d296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1d29a:	2b00      	cmp	r3, #0
   1d29c:	d0f5      	beq.n	1d28a <__kernel_rem_pio2+0x3da>
   1d29e:	e03f      	b.n	1d320 <__kernel_rem_pio2+0x470>
   1d2a0:	9912      	ldr	r1, [sp, #72]
   1d2a2:	4620      	mov	r0, r4
   1d2a4:	f1c1 0200 	rsb	r2, r1, #0	; 0x0
   1d2a8:	4629      	mov	r1, r5
   1d2aa:	f000 fc81 	bl	1dbb0 <scalbn>
   1d2ae:	2200      	movs	r2, #0
   1d2b0:	4bc5      	ldr	r3, [pc, #788]	(1d5c8 <__kernel_rem_pio2+0x718>)
   1d2b2:	4606      	mov	r6, r0
   1d2b4:	460f      	mov	r7, r1
   1d2b6:	f7fb fb49 	bl	1894c <__aeabi_dcmpge>
   1d2ba:	9a0d      	ldr	r2, [sp, #52]
   1d2bc:	0094      	lsls	r4, r2, #2
   1d2be:	b338      	cbz	r0, 1d310 <__kernel_rem_pio2+0x460>
   1d2c0:	2200      	movs	r2, #0
   1d2c2:	4bbc      	ldr	r3, [pc, #752]	(1d5b4 <__kernel_rem_pio2+0x704>)
   1d2c4:	4630      	mov	r0, r6
   1d2c6:	4639      	mov	r1, r7
   1d2c8:	f7fb f8bc 	bl	18444 <__aeabi_dmul>
   1d2cc:	f7fb fb52 	bl	18974 <__aeabi_d2iz>
   1d2d0:	f7fb f852 	bl	18378 <__aeabi_i2d>
   1d2d4:	abb4      	add	r3, sp, #720
   1d2d6:	441c      	add	r4, r3
   1d2d8:	2200      	movs	r2, #0
   1d2da:	4bb7      	ldr	r3, [pc, #732]	(1d5b8 <__kernel_rem_pio2+0x708>)
   1d2dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1d2e0:	f7fb f8b0 	bl	18444 <__aeabi_dmul>
   1d2e4:	4602      	mov	r2, r0
   1d2e6:	460b      	mov	r3, r1
   1d2e8:	4630      	mov	r0, r6
   1d2ea:	4639      	mov	r1, r7
   1d2ec:	f7fa fef8 	bl	180e0 <__adddf3>
   1d2f0:	f7fb fb40 	bl	18974 <__aeabi_d2iz>
   1d2f4:	9e12      	ldr	r6, [sp, #72]
   1d2f6:	f844 0c50 	str.w	r0, [r4, #-80]
   1d2fa:	9c0d      	ldr	r4, [sp, #52]
   1d2fc:	a8b4      	add	r0, sp, #720
   1d2fe:	3401      	adds	r4, #1
   1d300:	3618      	adds	r6, #24
   1d302:	940d      	str	r4, [sp, #52]
   1d304:	9612      	str	r6, [sp, #72]
   1d306:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1d30a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d30e:	e003      	b.n	1d318 <__kernel_rem_pio2+0x468>
   1d310:	a9b4      	add	r1, sp, #720
   1d312:	440c      	add	r4, r1
   1d314:	4630      	mov	r0, r6
   1d316:	4639      	mov	r1, r7
   1d318:	f7fb fb2c 	bl	18974 <__aeabi_d2iz>
   1d31c:	f844 0c50 	str.w	r0, [r4, #-80]
   1d320:	9a12      	ldr	r2, [sp, #72]
   1d322:	2000      	movs	r0, #0
   1d324:	49a7      	ldr	r1, [pc, #668]	(1d5c4 <__kernel_rem_pio2+0x714>)
   1d326:	f000 fc43 	bl	1dbb0 <scalbn>
   1d32a:	9a0d      	ldr	r2, [sp, #52]
   1d32c:	aba0      	add	r3, sp, #640
   1d32e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1d332:	9317      	str	r3, [sp, #92]
   1d334:	ab28      	add	r3, sp, #160
   1d336:	4604      	mov	r4, r0
   1d338:	460d      	mov	r5, r1
   1d33a:	eb03 07c2 	add.w	r7, r3, r2, lsl #3
   1d33e:	4616      	mov	r6, r2
   1d340:	e014      	b.n	1d36c <__kernel_rem_pio2+0x4bc>
   1d342:	9b17      	ldr	r3, [sp, #92]
   1d344:	3e01      	subs	r6, #1
   1d346:	6858      	ldr	r0, [r3, #4]
   1d348:	f7fb f816 	bl	18378 <__aeabi_i2d>
   1d34c:	4602      	mov	r2, r0
   1d34e:	460b      	mov	r3, r1
   1d350:	4620      	mov	r0, r4
   1d352:	4629      	mov	r1, r5
   1d354:	f7fb f876 	bl	18444 <__aeabi_dmul>
   1d358:	2200      	movs	r2, #0
   1d35a:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1d35e:	4b95      	ldr	r3, [pc, #596]	(1d5b4 <__kernel_rem_pio2+0x704>)
   1d360:	4620      	mov	r0, r4
   1d362:	4629      	mov	r1, r5
   1d364:	f7fb f86e 	bl	18444 <__aeabi_dmul>
   1d368:	4604      	mov	r4, r0
   1d36a:	460d      	mov	r5, r1
   1d36c:	9817      	ldr	r0, [sp, #92]
   1d36e:	3f08      	subs	r7, #8
   1d370:	3804      	subs	r0, #4
   1d372:	2e00      	cmp	r6, #0
   1d374:	9017      	str	r0, [sp, #92]
   1d376:	dae4      	bge.n	1d342 <__kernel_rem_pio2+0x492>
   1d378:	9a0d      	ldr	r2, [sp, #52]
   1d37a:	a950      	add	r1, sp, #320
   1d37c:	2300      	movs	r3, #0
   1d37e:	9116      	str	r1, [sp, #88]
   1d380:	9223      	str	r2, [sp, #140]
   1d382:	9315      	str	r3, [sp, #84]
   1d384:	e022      	b.n	1d3cc <__kernel_rem_pio2+0x51c>
   1d386:	9a14      	ldr	r2, [sp, #80]
   1d388:	3601      	adds	r6, #1
   1d38a:	e912 0003 	ldmdb	r2, {r0, r1}
   1d38e:	e917 000c 	ldmdb	r7, {r2, r3}
   1d392:	f7fb f857 	bl	18444 <__aeabi_dmul>
   1d396:	4602      	mov	r2, r0
   1d398:	460b      	mov	r3, r1
   1d39a:	4620      	mov	r0, r4
   1d39c:	4629      	mov	r1, r5
   1d39e:	f7fa fe9f 	bl	180e0 <__adddf3>
   1d3a2:	4604      	mov	r4, r0
   1d3a4:	460d      	mov	r5, r1
   1d3a6:	9b0f      	ldr	r3, [sp, #60]
   1d3a8:	429e      	cmp	r6, r3
   1d3aa:	dc06      	bgt.n	1d3ba <__kernel_rem_pio2+0x50a>
   1d3ac:	9814      	ldr	r0, [sp, #80]
   1d3ae:	9915      	ldr	r1, [sp, #84]
   1d3b0:	3008      	adds	r0, #8
   1d3b2:	3708      	adds	r7, #8
   1d3b4:	428e      	cmp	r6, r1
   1d3b6:	9014      	str	r0, [sp, #80]
   1d3b8:	dde5      	ble.n	1d386 <__kernel_rem_pio2+0x4d6>
   1d3ba:	9a16      	ldr	r2, [sp, #88]
   1d3bc:	9b23      	ldr	r3, [sp, #140]
   1d3be:	c230      	stmia	r2!, {r4, r5}
   1d3c0:	9c15      	ldr	r4, [sp, #84]
   1d3c2:	3b01      	subs	r3, #1
   1d3c4:	3401      	adds	r4, #1
   1d3c6:	9216      	str	r2, [sp, #88]
   1d3c8:	9323      	str	r3, [sp, #140]
   1d3ca:	9415      	str	r4, [sp, #84]
   1d3cc:	9e23      	ldr	r6, [sp, #140]
   1d3ce:	2e00      	cmp	r6, #0
   1d3d0:	db08      	blt.n	1d3e4 <__kernel_rem_pio2+0x534>
   1d3d2:	487e      	ldr	r0, [pc, #504]	(1d5cc <__kernel_rem_pio2+0x71c>)
   1d3d4:	a928      	add	r1, sp, #160
   1d3d6:	eb01 07c6 	add.w	r7, r1, r6, lsl #3
   1d3da:	9014      	str	r0, [sp, #80]
   1d3dc:	2600      	movs	r6, #0
   1d3de:	2400      	movs	r4, #0
   1d3e0:	2500      	movs	r5, #0
   1d3e2:	e7e0      	b.n	1d3a6 <__kernel_rem_pio2+0x4f6>
   1d3e4:	9aba      	ldr	r2, [sp, #744]
   1d3e6:	2a03      	cmp	r2, #3
   1d3e8:	f200 80d9 	bhi.w	1d59e <__kernel_rem_pio2+0x6ee>
   1d3ec:	e8df f002 	tbb	[pc, r2]
   1d3f0:	020b0b12 	.word	0x020b0b12
   1d3f4:	9b0d      	ldr	r3, [sp, #52]
   1d3f6:	9f0d      	ldr	r7, [sp, #52]
   1d3f8:	1e5a      	subs	r2, r3, #1
   1d3fa:	ab50      	add	r3, sp, #320
   1d3fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1d400:	9226      	str	r2, [sp, #152]
   1d402:	4616      	mov	r6, r2
   1d404:	e067      	b.n	1d4d6 <__kernel_rem_pio2+0x626>
   1d406:	9c0d      	ldr	r4, [sp, #52]
   1d408:	ab50      	add	r3, sp, #320
   1d40a:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   1d40e:	2000      	movs	r0, #0
   1d410:	2100      	movs	r1, #0
   1d412:	e01c      	b.n	1d44e <__kernel_rem_pio2+0x59e>
   1d414:	9e0d      	ldr	r6, [sp, #52]
   1d416:	ab50      	add	r3, sp, #320
   1d418:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1d41c:	4634      	mov	r4, r6
   1d41e:	2000      	movs	r0, #0
   1d420:	2100      	movs	r1, #0
   1d422:	e004      	b.n	1d42e <__kernel_rem_pio2+0x57e>
   1d424:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1d428:	f7fa fe5a 	bl	180e0 <__adddf3>
   1d42c:	3c01      	subs	r4, #1
   1d42e:	3d08      	subs	r5, #8
   1d430:	2c00      	cmp	r4, #0
   1d432:	daf7      	bge.n	1d424 <__kernel_rem_pio2+0x574>
   1d434:	9c13      	ldr	r4, [sp, #76]
   1d436:	b10c      	cbz	r4, 1d43c <__kernel_rem_pio2+0x58c>
   1d438:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1d43c:	9e0b      	ldr	r6, [sp, #44]
   1d43e:	e886 0003 	stmia.w	r6, {r0, r1}
   1d442:	e0ac      	b.n	1d59e <__kernel_rem_pio2+0x6ee>
   1d444:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1d448:	f7fa fe4a 	bl	180e0 <__adddf3>
   1d44c:	3c01      	subs	r4, #1
   1d44e:	3d08      	subs	r5, #8
   1d450:	2c00      	cmp	r4, #0
   1d452:	daf7      	bge.n	1d444 <__kernel_rem_pio2+0x594>
   1d454:	9a13      	ldr	r2, [sp, #76]
   1d456:	4604      	mov	r4, r0
   1d458:	460d      	mov	r5, r1
   1d45a:	b10a      	cbz	r2, 1d460 <__kernel_rem_pio2+0x5b0>
   1d45c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1d460:	9b0b      	ldr	r3, [sp, #44]
   1d462:	4622      	mov	r2, r4
   1d464:	e883 0003 	stmia.w	r3, {r0, r1}
   1d468:	ab50      	add	r3, sp, #320
   1d46a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1d46e:	462b      	mov	r3, r5
   1d470:	f7fa fe34 	bl	180dc <__aeabi_dsub>
   1d474:	ad52      	add	r5, sp, #328
   1d476:	2401      	movs	r4, #1
   1d478:	e004      	b.n	1d484 <__kernel_rem_pio2+0x5d4>
   1d47a:	e915 000c 	ldmdb	r5, {r2, r3}
   1d47e:	f7fa fe2f 	bl	180e0 <__adddf3>
   1d482:	3401      	adds	r4, #1
   1d484:	9e0d      	ldr	r6, [sp, #52]
   1d486:	3508      	adds	r5, #8
   1d488:	42b4      	cmp	r4, r6
   1d48a:	ddf6      	ble.n	1d47a <__kernel_rem_pio2+0x5ca>
   1d48c:	9c13      	ldr	r4, [sp, #76]
   1d48e:	b10c      	cbz	r4, 1d494 <__kernel_rem_pio2+0x5e4>
   1d490:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   1d494:	9e0b      	ldr	r6, [sp, #44]
   1d496:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1d49a:	e080      	b.n	1d59e <__kernel_rem_pio2+0x6ee>
   1d49c:	e9d6 4502 	ldrd	r4, r5, [r6, #8]
   1d4a0:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   1d4a4:	4620      	mov	r0, r4
   1d4a6:	4629      	mov	r1, r5
   1d4a8:	f7fa fe1a 	bl	180e0 <__adddf3>
   1d4ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d4b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1d4b4:	4620      	mov	r0, r4
   1d4b6:	4629      	mov	r1, r5
   1d4b8:	f7fa fe10 	bl	180dc <__aeabi_dsub>
   1d4bc:	4602      	mov	r2, r0
   1d4be:	460b      	mov	r3, r1
   1d4c0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   1d4c4:	f7fa fe0c 	bl	180e0 <__adddf3>
   1d4c8:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1d4cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1d4d0:	e9c6 0102 	strd	r0, r1, [r6, #8]
   1d4d4:	3f01      	subs	r7, #1
   1d4d6:	3e08      	subs	r6, #8
   1d4d8:	2f00      	cmp	r7, #0
   1d4da:	dcdf      	bgt.n	1d49c <__kernel_rem_pio2+0x5ec>
   1d4dc:	990d      	ldr	r1, [sp, #52]
   1d4de:	9124      	str	r1, [sp, #144]
   1d4e0:	e022      	b.n	1d528 <__kernel_rem_pio2+0x678>
   1d4e2:	9b26      	ldr	r3, [sp, #152]
   1d4e4:	9a24      	ldr	r2, [sp, #144]
   1d4e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   1d4ea:	3a01      	subs	r2, #1
   1d4ec:	e88d 0003 	stmia.w	sp, {r0, r1}
   1d4f0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
   1d4f4:	9224      	str	r2, [sp, #144]
   1d4f6:	4620      	mov	r0, r4
   1d4f8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1d4fc:	4629      	mov	r1, r5
   1d4fe:	f7fa fdef 	bl	180e0 <__adddf3>
   1d502:	4606      	mov	r6, r0
   1d504:	460f      	mov	r7, r1
   1d506:	4632      	mov	r2, r6
   1d508:	463b      	mov	r3, r7
   1d50a:	4620      	mov	r0, r4
   1d50c:	4629      	mov	r1, r5
   1d50e:	f7fa fde5 	bl	180dc <__aeabi_dsub>
   1d512:	4602      	mov	r2, r0
   1d514:	460b      	mov	r3, r1
   1d516:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1d51a:	f7fa fde1 	bl	180e0 <__adddf3>
   1d51e:	9a26      	ldr	r2, [sp, #152]
   1d520:	e9c2 0104 	strd	r0, r1, [r2, #16]
   1d524:	e9c2 6702 	strd	r6, r7, [r2, #8]
   1d528:	9b26      	ldr	r3, [sp, #152]
   1d52a:	9c24      	ldr	r4, [sp, #144]
   1d52c:	3b08      	subs	r3, #8
   1d52e:	2c01      	cmp	r4, #1
   1d530:	9326      	str	r3, [sp, #152]
   1d532:	dcd6      	bgt.n	1d4e2 <__kernel_rem_pio2+0x632>
   1d534:	9e0d      	ldr	r6, [sp, #52]
   1d536:	ab50      	add	r3, sp, #320
   1d538:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
   1d53c:	4634      	mov	r4, r6
   1d53e:	2000      	movs	r0, #0
   1d540:	2100      	movs	r1, #0
   1d542:	e004      	b.n	1d54e <__kernel_rem_pio2+0x69e>
   1d544:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1d548:	f7fa fdca 	bl	180e0 <__adddf3>
   1d54c:	3c01      	subs	r4, #1
   1d54e:	3d08      	subs	r5, #8
   1d550:	2c01      	cmp	r4, #1
   1d552:	dcf7      	bgt.n	1d544 <__kernel_rem_pio2+0x694>
   1d554:	9a13      	ldr	r2, [sp, #76]
   1d556:	f50d 7ca0 	add.w	ip, sp, #320	; 0x140
   1d55a:	b95a      	cbnz	r2, 1d574 <__kernel_rem_pio2+0x6c4>
   1d55c:	9c0b      	ldr	r4, [sp, #44]
   1d55e:	e89c 000c 	ldmia.w	ip, {r2, r3}
   1d562:	e884 000c 	stmia.w	r4, {r2, r3}
   1d566:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   1d56a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1d56e:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1d572:	e014      	b.n	1d59e <__kernel_rem_pio2+0x6ee>
   1d574:	f8dc 3000 	ldr.w	r3, [ip]
   1d578:	9e0b      	ldr	r6, [sp, #44]
   1d57a:	6033      	str	r3, [r6, #0]
   1d57c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1d580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1d584:	6073      	str	r3, [r6, #4]
   1d586:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1d58a:	60b3      	str	r3, [r6, #8]
   1d58c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1d590:	6130      	str	r0, [r6, #16]
   1d592:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1d596:	60f3      	str	r3, [r6, #12]
   1d598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1d59c:	6173      	str	r3, [r6, #20]
   1d59e:	9910      	ldr	r1, [sp, #64]
   1d5a0:	f001 0007 	and.w	r0, r1, #7	; 0x7
   1d5a4:	f50d 7d35 	add.w	sp, sp, #724	; 0x2d4
   1d5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d5aa:	46c0      	nop			(mov r8, r8)
   1d5ac:	00021290 	.word	0x00021290
   1d5b0:	2aaaaaab 	.word	0x2aaaaaab
   1d5b4:	3e700000 	.word	0x3e700000
   1d5b8:	c1700000 	.word	0xc1700000
   1d5bc:	c0200000 	.word	0xc0200000
   1d5c0:	3fe00000 	.word	0x3fe00000
   1d5c4:	3ff00000 	.word	0x3ff00000
   1d5c8:	41700000 	.word	0x41700000
   1d5cc:	000212a0 	.word	0x000212a0

0001d5d0 <__kernel_sin>:
   1d5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d5d2:	b089      	sub	sp, #36
   1d5d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1d5d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1d5dc:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1d5e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d5e4:	da04      	bge.n	1d5f0 <__kernel_sin+0x20>
   1d5e6:	f7fb f9c5 	bl	18974 <__aeabi_d2iz>
   1d5ea:	2800      	cmp	r0, #0
   1d5ec:	f000 8085 	beq.w	1d6fa <__kernel_sin+0x12a>
   1d5f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1d5f4:	4602      	mov	r2, r0
   1d5f6:	460b      	mov	r3, r1
   1d5f8:	f7fa ff24 	bl	18444 <__aeabi_dmul>
   1d5fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1d600:	4606      	mov	r6, r0
   1d602:	460f      	mov	r7, r1
   1d604:	f7fa ff1e 	bl	18444 <__aeabi_dmul>
   1d608:	a23f      	add	r2, pc, #252	(adr r2, 1d708 <__kernel_sin+0x138>)
   1d60a:	ca0c      	ldmia	r2!, {r2, r3}
   1d60c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d610:	4630      	mov	r0, r6
   1d612:	4639      	mov	r1, r7
   1d614:	f7fa ff16 	bl	18444 <__aeabi_dmul>
   1d618:	a23d      	add	r2, pc, #244	(adr r2, 1d710 <__kernel_sin+0x140>)
   1d61a:	ca0c      	ldmia	r2!, {r2, r3}
   1d61c:	f7fa fd5e 	bl	180dc <__aeabi_dsub>
   1d620:	4602      	mov	r2, r0
   1d622:	460b      	mov	r3, r1
   1d624:	4630      	mov	r0, r6
   1d626:	4639      	mov	r1, r7
   1d628:	f7fa ff0c 	bl	18444 <__aeabi_dmul>
   1d62c:	a23a      	add	r2, pc, #232	(adr r2, 1d718 <__kernel_sin+0x148>)
   1d62e:	ca0c      	ldmia	r2!, {r2, r3}
   1d630:	f7fa fd56 	bl	180e0 <__adddf3>
   1d634:	4602      	mov	r2, r0
   1d636:	460b      	mov	r3, r1
   1d638:	4630      	mov	r0, r6
   1d63a:	4639      	mov	r1, r7
   1d63c:	f7fa ff02 	bl	18444 <__aeabi_dmul>
   1d640:	a237      	add	r2, pc, #220	(adr r2, 1d720 <__kernel_sin+0x150>)
   1d642:	ca0c      	ldmia	r2!, {r2, r3}
   1d644:	f7fa fd4a 	bl	180dc <__aeabi_dsub>
   1d648:	4602      	mov	r2, r0
   1d64a:	460b      	mov	r3, r1
   1d64c:	4630      	mov	r0, r6
   1d64e:	4639      	mov	r1, r7
   1d650:	f7fa fef8 	bl	18444 <__aeabi_dmul>
   1d654:	a234      	add	r2, pc, #208	(adr r2, 1d728 <__kernel_sin+0x158>)
   1d656:	ca0c      	ldmia	r2!, {r2, r3}
   1d658:	f7fa fd42 	bl	180e0 <__adddf3>
   1d65c:	9b0e      	ldr	r3, [sp, #56]
   1d65e:	e88d 0003 	stmia.w	sp, {r0, r1}
   1d662:	b9b3      	cbnz	r3, 1d692 <__kernel_sin+0xc2>
   1d664:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1d668:	4630      	mov	r0, r6
   1d66a:	4639      	mov	r1, r7
   1d66c:	f7fa feea 	bl	18444 <__aeabi_dmul>
   1d670:	a22f      	add	r2, pc, #188	(adr r2, 1d730 <__kernel_sin+0x160>)
   1d672:	ca0c      	ldmia	r2!, {r2, r3}
   1d674:	f7fa fd32 	bl	180dc <__aeabi_dsub>
   1d678:	4602      	mov	r2, r0
   1d67a:	460b      	mov	r3, r1
   1d67c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1d680:	f7fa fee0 	bl	18444 <__aeabi_dmul>
   1d684:	4602      	mov	r2, r0
   1d686:	460b      	mov	r3, r1
   1d688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1d68c:	f7fa fd28 	bl	180e0 <__adddf3>
   1d690:	e031      	b.n	1d6f6 <__kernel_sin+0x126>
   1d692:	2200      	movs	r2, #0
   1d694:	4b28      	ldr	r3, [pc, #160]	(1d738 <__kernel_sin+0x168>)
   1d696:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1d69a:	f7fa fed3 	bl	18444 <__aeabi_dmul>
   1d69e:	e89d 000c 	ldmia.w	sp, {r2, r3}
   1d6a2:	4604      	mov	r4, r0
   1d6a4:	460d      	mov	r5, r1
   1d6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1d6aa:	f7fa fecb 	bl	18444 <__aeabi_dmul>
   1d6ae:	4602      	mov	r2, r0
   1d6b0:	460b      	mov	r3, r1
   1d6b2:	4620      	mov	r0, r4
   1d6b4:	4629      	mov	r1, r5
   1d6b6:	f7fa fd11 	bl	180dc <__aeabi_dsub>
   1d6ba:	4602      	mov	r2, r0
   1d6bc:	460b      	mov	r3, r1
   1d6be:	4630      	mov	r0, r6
   1d6c0:	4639      	mov	r1, r7
   1d6c2:	f7fa febf 	bl	18444 <__aeabi_dmul>
   1d6c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d6ca:	f7fa fd07 	bl	180dc <__aeabi_dsub>
   1d6ce:	a218      	add	r2, pc, #96	(adr r2, 1d730 <__kernel_sin+0x160>)
   1d6d0:	ca0c      	ldmia	r2!, {r2, r3}
   1d6d2:	4604      	mov	r4, r0
   1d6d4:	460d      	mov	r5, r1
   1d6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1d6da:	f7fa feb3 	bl	18444 <__aeabi_dmul>
   1d6de:	4602      	mov	r2, r0
   1d6e0:	460b      	mov	r3, r1
   1d6e2:	4620      	mov	r0, r4
   1d6e4:	4629      	mov	r1, r5
   1d6e6:	f7fa fcfb 	bl	180e0 <__adddf3>
   1d6ea:	4602      	mov	r2, r0
   1d6ec:	460b      	mov	r3, r1
   1d6ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1d6f2:	f7fa fcf3 	bl	180dc <__aeabi_dsub>
   1d6f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d6fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1d6fe:	b009      	add	sp, #36
   1d700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d702:	46c0      	nop			(mov r8, r8)
   1d704:	46c0      	nop			(mov r8, r8)
   1d706:	46c0      	nop			(mov r8, r8)
   1d708:	5acfd57c 	.word	0x5acfd57c
   1d70c:	3de5d93a 	.word	0x3de5d93a
   1d710:	8a2b9ceb 	.word	0x8a2b9ceb
   1d714:	3e5ae5e6 	.word	0x3e5ae5e6
   1d718:	57b1fe7d 	.word	0x57b1fe7d
   1d71c:	3ec71de3 	.word	0x3ec71de3
   1d720:	19c161d5 	.word	0x19c161d5
   1d724:	3f2a01a0 	.word	0x3f2a01a0
   1d728:	1110f8a6 	.word	0x1110f8a6
   1d72c:	3f811111 	.word	0x3f811111
   1d730:	55555549 	.word	0x55555549
   1d734:	3fc55555 	.word	0x3fc55555
   1d738:	3fe00000 	.word	0x3fe00000
   1d73c:	46c046c0 	.word	0x46c046c0

0001d740 <atan>:
   1d740:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d742:	4bb3      	ldr	r3, [pc, #716]	(1da10 <atan+0x2d0>)
   1d744:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1d748:	b087      	sub	sp, #28
   1d74a:	429c      	cmp	r4, r3
   1d74c:	4606      	mov	r6, r0
   1d74e:	460f      	mov	r7, r1
   1d750:	9104      	str	r1, [sp, #16]
   1d752:	dd1b      	ble.n	1d78c <atan+0x4c>
   1d754:	4baf      	ldr	r3, [pc, #700]	(1da14 <atan+0x2d4>)
   1d756:	429c      	cmp	r4, r3
   1d758:	dc08      	bgt.n	1d76c <atan+0x2c>
   1d75a:	bf14      	ite	ne
   1d75c:	2300      	movne	r3, #0
   1d75e:	2301      	moveq	r3, #1
   1d760:	2800      	cmp	r0, #0
   1d762:	bf0c      	ite	eq
   1d764:	2300      	moveq	r3, #0
   1d766:	f003 0301 	andne.w	r3, r3, #1	; 0x1
   1d76a:	b133      	cbz	r3, 1d77a <atan+0x3a>
   1d76c:	4630      	mov	r0, r6
   1d76e:	4639      	mov	r1, r7
   1d770:	4632      	mov	r2, r6
   1d772:	463b      	mov	r3, r7
   1d774:	f7fa fcb4 	bl	180e0 <__adddf3>
   1d778:	e10c      	b.n	1d994 <atan+0x254>
   1d77a:	9904      	ldr	r1, [sp, #16]
   1d77c:	2900      	cmp	r1, #0
   1d77e:	dd02      	ble.n	1d786 <atan+0x46>
   1d780:	a687      	add	r6, pc, #540	(adr r6, 1d9a0 <atan+0x260>)
   1d782:	cec0      	ldmia	r6!, {r6, r7}
   1d784:	e17b      	b.n	1da7e <atan+0x33e>
   1d786:	a688      	add	r6, pc, #544	(adr r6, 1d9a8 <atan+0x268>)
   1d788:	cec0      	ldmia	r6!, {r6, r7}
   1d78a:	e178      	b.n	1da7e <atan+0x33e>
   1d78c:	4ba2      	ldr	r3, [pc, #648]	(1da18 <atan+0x2d8>)
   1d78e:	429c      	cmp	r4, r3
   1d790:	dc0f      	bgt.n	1d7b2 <atan+0x72>
   1d792:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   1d796:	429c      	cmp	r4, r3
   1d798:	dc6f      	bgt.n	1d87a <atan+0x13a>
   1d79a:	a285      	add	r2, pc, #532	(adr r2, 1d9b0 <atan+0x270>)
   1d79c:	ca0c      	ldmia	r2!, {r2, r3}
   1d79e:	f7fa fc9f 	bl	180e0 <__adddf3>
   1d7a2:	2200      	movs	r2, #0
   1d7a4:	4b9d      	ldr	r3, [pc, #628]	(1da1c <atan+0x2dc>)
   1d7a6:	f7fb f8db 	bl	18960 <__aeabi_dcmpgt>
   1d7aa:	2800      	cmp	r0, #0
   1d7ac:	f040 8167 	bne.w	1da7e <atan+0x33e>
   1d7b0:	e063      	b.n	1d87a <atan+0x13a>
   1d7b2:	f000 f96d 	bl	1da90 <fabs>
   1d7b6:	4b9a      	ldr	r3, [pc, #616]	(1da20 <atan+0x2e0>)
   1d7b8:	4606      	mov	r6, r0
   1d7ba:	429c      	cmp	r4, r3
   1d7bc:	460f      	mov	r7, r1
   1d7be:	dc34      	bgt.n	1d82a <atan+0xea>
   1d7c0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   1d7c4:	429c      	cmp	r4, r3
   1d7c6:	dc1a      	bgt.n	1d7fe <atan+0xbe>
   1d7c8:	4632      	mov	r2, r6
   1d7ca:	463b      	mov	r3, r7
   1d7cc:	f7fa fc88 	bl	180e0 <__adddf3>
   1d7d0:	2200      	movs	r2, #0
   1d7d2:	4b92      	ldr	r3, [pc, #584]	(1da1c <atan+0x2dc>)
   1d7d4:	f7fa fc82 	bl	180dc <__aeabi_dsub>
   1d7d8:	2200      	movs	r2, #0
   1d7da:	4604      	mov	r4, r0
   1d7dc:	460d      	mov	r5, r1
   1d7de:	4630      	mov	r0, r6
   1d7e0:	4639      	mov	r1, r7
   1d7e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d7e6:	f7fa fc7b 	bl	180e0 <__adddf3>
   1d7ea:	460b      	mov	r3, r1
   1d7ec:	4602      	mov	r2, r0
   1d7ee:	4629      	mov	r1, r5
   1d7f0:	4620      	mov	r0, r4
   1d7f2:	f7fa ff51 	bl	18698 <__aeabi_ddiv>
   1d7f6:	2300      	movs	r3, #0
   1d7f8:	4606      	mov	r6, r0
   1d7fa:	460f      	mov	r7, r1
   1d7fc:	e03f      	b.n	1d87e <atan+0x13e>
   1d7fe:	2200      	movs	r2, #0
   1d800:	4b86      	ldr	r3, [pc, #536]	(1da1c <atan+0x2dc>)
   1d802:	f7fa fc6b 	bl	180dc <__aeabi_dsub>
   1d806:	2200      	movs	r2, #0
   1d808:	4604      	mov	r4, r0
   1d80a:	460d      	mov	r5, r1
   1d80c:	4630      	mov	r0, r6
   1d80e:	4639      	mov	r1, r7
   1d810:	4b82      	ldr	r3, [pc, #520]	(1da1c <atan+0x2dc>)
   1d812:	f7fa fc65 	bl	180e0 <__adddf3>
   1d816:	4602      	mov	r2, r0
   1d818:	460b      	mov	r3, r1
   1d81a:	4620      	mov	r0, r4
   1d81c:	4629      	mov	r1, r5
   1d81e:	f7fa ff3b 	bl	18698 <__aeabi_ddiv>
   1d822:	460f      	mov	r7, r1
   1d824:	4606      	mov	r6, r0
   1d826:	2101      	movs	r1, #1
   1d828:	e025      	b.n	1d876 <atan+0x136>
   1d82a:	4b7e      	ldr	r3, [pc, #504]	(1da24 <atan+0x2e4>)
   1d82c:	429c      	cmp	r4, r3
   1d82e:	dc19      	bgt.n	1d864 <atan+0x124>
   1d830:	2200      	movs	r2, #0
   1d832:	4b7d      	ldr	r3, [pc, #500]	(1da28 <atan+0x2e8>)
   1d834:	f7fa fc52 	bl	180dc <__aeabi_dsub>
   1d838:	2200      	movs	r2, #0
   1d83a:	4604      	mov	r4, r0
   1d83c:	460d      	mov	r5, r1
   1d83e:	4630      	mov	r0, r6
   1d840:	4639      	mov	r1, r7
   1d842:	4b79      	ldr	r3, [pc, #484]	(1da28 <atan+0x2e8>)
   1d844:	f7fa fdfe 	bl	18444 <__aeabi_dmul>
   1d848:	2200      	movs	r2, #0
   1d84a:	4b74      	ldr	r3, [pc, #464]	(1da1c <atan+0x2dc>)
   1d84c:	f7fa fc48 	bl	180e0 <__adddf3>
   1d850:	460b      	mov	r3, r1
   1d852:	4602      	mov	r2, r0
   1d854:	4629      	mov	r1, r5
   1d856:	4620      	mov	r0, r4
   1d858:	f7fa ff1e 	bl	18698 <__aeabi_ddiv>
   1d85c:	2302      	movs	r3, #2
   1d85e:	4606      	mov	r6, r0
   1d860:	460f      	mov	r7, r1
   1d862:	e00c      	b.n	1d87e <atan+0x13e>
   1d864:	4632      	mov	r2, r6
   1d866:	463b      	mov	r3, r7
   1d868:	2000      	movs	r0, #0
   1d86a:	4970      	ldr	r1, [pc, #448]	(1da2c <atan+0x2ec>)
   1d86c:	f7fa ff14 	bl	18698 <__aeabi_ddiv>
   1d870:	460f      	mov	r7, r1
   1d872:	4606      	mov	r6, r0
   1d874:	2103      	movs	r1, #3
   1d876:	9105      	str	r1, [sp, #20]
   1d878:	e002      	b.n	1d880 <atan+0x140>
   1d87a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d87e:	9305      	str	r3, [sp, #20]
   1d880:	4632      	mov	r2, r6
   1d882:	463b      	mov	r3, r7
   1d884:	4630      	mov	r0, r6
   1d886:	4639      	mov	r1, r7
   1d888:	f7fa fddc 	bl	18444 <__aeabi_dmul>
   1d88c:	4602      	mov	r2, r0
   1d88e:	460b      	mov	r3, r1
   1d890:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1d894:	f7fa fdd6 	bl	18444 <__aeabi_dmul>
   1d898:	a247      	add	r2, pc, #284	(adr r2, 1d9b8 <atan+0x278>)
   1d89a:	ca0c      	ldmia	r2!, {r2, r3}
   1d89c:	4604      	mov	r4, r0
   1d89e:	460d      	mov	r5, r1
   1d8a0:	f7fa fdd0 	bl	18444 <__aeabi_dmul>
   1d8a4:	a246      	add	r2, pc, #280	(adr r2, 1d9c0 <atan+0x280>)
   1d8a6:	ca0c      	ldmia	r2!, {r2, r3}
   1d8a8:	f7fa fc1a 	bl	180e0 <__adddf3>
   1d8ac:	4602      	mov	r2, r0
   1d8ae:	460b      	mov	r3, r1
   1d8b0:	4620      	mov	r0, r4
   1d8b2:	4629      	mov	r1, r5
   1d8b4:	f7fa fdc6 	bl	18444 <__aeabi_dmul>
   1d8b8:	a243      	add	r2, pc, #268	(adr r2, 1d9c8 <atan+0x288>)
   1d8ba:	ca0c      	ldmia	r2!, {r2, r3}
   1d8bc:	f7fa fc10 	bl	180e0 <__adddf3>
   1d8c0:	4602      	mov	r2, r0
   1d8c2:	460b      	mov	r3, r1
   1d8c4:	4620      	mov	r0, r4
   1d8c6:	4629      	mov	r1, r5
   1d8c8:	f7fa fdbc 	bl	18444 <__aeabi_dmul>
   1d8cc:	a240      	add	r2, pc, #256	(adr r2, 1d9d0 <atan+0x290>)
   1d8ce:	ca0c      	ldmia	r2!, {r2, r3}
   1d8d0:	f7fa fc06 	bl	180e0 <__adddf3>
   1d8d4:	4602      	mov	r2, r0
   1d8d6:	460b      	mov	r3, r1
   1d8d8:	4620      	mov	r0, r4
   1d8da:	4629      	mov	r1, r5
   1d8dc:	f7fa fdb2 	bl	18444 <__aeabi_dmul>
   1d8e0:	a23d      	add	r2, pc, #244	(adr r2, 1d9d8 <atan+0x298>)
   1d8e2:	ca0c      	ldmia	r2!, {r2, r3}
   1d8e4:	f7fa fbfc 	bl	180e0 <__adddf3>
   1d8e8:	4602      	mov	r2, r0
   1d8ea:	460b      	mov	r3, r1
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	4629      	mov	r1, r5
   1d8f0:	f7fa fda8 	bl	18444 <__aeabi_dmul>
   1d8f4:	a23a      	add	r2, pc, #232	(adr r2, 1d9e0 <atan+0x2a0>)
   1d8f6:	ca0c      	ldmia	r2!, {r2, r3}
   1d8f8:	f7fa fbf2 	bl	180e0 <__adddf3>
   1d8fc:	4602      	mov	r2, r0
   1d8fe:	460b      	mov	r3, r1
   1d900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1d904:	f7fa fd9e 	bl	18444 <__aeabi_dmul>
   1d908:	a237      	add	r2, pc, #220	(adr r2, 1d9e8 <atan+0x2a8>)
   1d90a:	ca0c      	ldmia	r2!, {r2, r3}
   1d90c:	e88d 0003 	stmia.w	sp, {r0, r1}
   1d910:	4620      	mov	r0, r4
   1d912:	4629      	mov	r1, r5
   1d914:	f7fa fd96 	bl	18444 <__aeabi_dmul>
   1d918:	a235      	add	r2, pc, #212	(adr r2, 1d9f0 <atan+0x2b0>)
   1d91a:	ca0c      	ldmia	r2!, {r2, r3}
   1d91c:	f7fa fbde 	bl	180dc <__aeabi_dsub>
   1d920:	4602      	mov	r2, r0
   1d922:	460b      	mov	r3, r1
   1d924:	4620      	mov	r0, r4
   1d926:	4629      	mov	r1, r5
   1d928:	f7fa fd8c 	bl	18444 <__aeabi_dmul>
   1d92c:	a232      	add	r2, pc, #200	(adr r2, 1d9f8 <atan+0x2b8>)
   1d92e:	ca0c      	ldmia	r2!, {r2, r3}
   1d930:	f7fa fbd4 	bl	180dc <__aeabi_dsub>
   1d934:	4602      	mov	r2, r0
   1d936:	460b      	mov	r3, r1
   1d938:	4620      	mov	r0, r4
   1d93a:	4629      	mov	r1, r5
   1d93c:	f7fa fd82 	bl	18444 <__aeabi_dmul>
   1d940:	a22f      	add	r2, pc, #188	(adr r2, 1da00 <atan+0x2c0>)
   1d942:	ca0c      	ldmia	r2!, {r2, r3}
   1d944:	f7fa fbca 	bl	180dc <__aeabi_dsub>
   1d948:	4602      	mov	r2, r0
   1d94a:	460b      	mov	r3, r1
   1d94c:	4620      	mov	r0, r4
   1d94e:	4629      	mov	r1, r5
   1d950:	f7fa fd78 	bl	18444 <__aeabi_dmul>
   1d954:	a22c      	add	r2, pc, #176	(adr r2, 1da08 <atan+0x2c8>)
   1d956:	ca0c      	ldmia	r2!, {r2, r3}
   1d958:	f7fa fbc0 	bl	180dc <__aeabi_dsub>
   1d95c:	4602      	mov	r2, r0
   1d95e:	460b      	mov	r3, r1
   1d960:	4620      	mov	r0, r4
   1d962:	4629      	mov	r1, r5
   1d964:	f7fa fd6e 	bl	18444 <__aeabi_dmul>
   1d968:	460b      	mov	r3, r1
   1d96a:	9905      	ldr	r1, [sp, #20]
   1d96c:	4602      	mov	r2, r0
   1d96e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1d972:	d15d      	bne.n	1da30 <atan+0x2f0>
   1d974:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1d978:	f7fa fbb2 	bl	180e0 <__adddf3>
   1d97c:	4602      	mov	r2, r0
   1d97e:	460b      	mov	r3, r1
   1d980:	4630      	mov	r0, r6
   1d982:	4639      	mov	r1, r7
   1d984:	f7fa fd5e 	bl	18444 <__aeabi_dmul>
   1d988:	4602      	mov	r2, r0
   1d98a:	460b      	mov	r3, r1
   1d98c:	4630      	mov	r0, r6
   1d98e:	4639      	mov	r1, r7
   1d990:	f7fa fba4 	bl	180dc <__aeabi_dsub>
   1d994:	4606      	mov	r6, r0
   1d996:	460f      	mov	r7, r1
   1d998:	e071      	b.n	1da7e <atan+0x33e>
   1d99a:	46c0      	nop			(mov r8, r8)
   1d99c:	46c0      	nop			(mov r8, r8)
   1d99e:	46c0      	nop			(mov r8, r8)
   1d9a0:	54442d18 	.word	0x54442d18
   1d9a4:	3ff921fb 	.word	0x3ff921fb
   1d9a8:	54442d18 	.word	0x54442d18
   1d9ac:	bff921fb 	.word	0xbff921fb
   1d9b0:	8800759c 	.word	0x8800759c
   1d9b4:	7e37e43c 	.word	0x7e37e43c
   1d9b8:	e322da11 	.word	0xe322da11
   1d9bc:	3f90ad3a 	.word	0x3f90ad3a
   1d9c0:	24760deb 	.word	0x24760deb
   1d9c4:	3fa97b4b 	.word	0x3fa97b4b
   1d9c8:	a0d03d51 	.word	0xa0d03d51
   1d9cc:	3fb10d66 	.word	0x3fb10d66
   1d9d0:	c54c206e 	.word	0xc54c206e
   1d9d4:	3fb745cd 	.word	0x3fb745cd
   1d9d8:	920083ff 	.word	0x920083ff
   1d9dc:	3fc24924 	.word	0x3fc24924
   1d9e0:	5555550d 	.word	0x5555550d
   1d9e4:	3fd55555 	.word	0x3fd55555
   1d9e8:	2c6a6c2f 	.word	0x2c6a6c2f
   1d9ec:	bfa2b444 	.word	0xbfa2b444
   1d9f0:	52defd9a 	.word	0x52defd9a
   1d9f4:	3fadde2d 	.word	0x3fadde2d
   1d9f8:	af749a6d 	.word	0xaf749a6d
   1d9fc:	3fb3b0f2 	.word	0x3fb3b0f2
   1da00:	fe231671 	.word	0xfe231671
   1da04:	3fbc71c6 	.word	0x3fbc71c6
   1da08:	9998ebc4 	.word	0x9998ebc4
   1da0c:	3fc99999 	.word	0x3fc99999
   1da10:	440fffff 	.word	0x440fffff
   1da14:	7ff00000 	.word	0x7ff00000
   1da18:	3fdbffff 	.word	0x3fdbffff
   1da1c:	3ff00000 	.word	0x3ff00000
   1da20:	3ff2ffff 	.word	0x3ff2ffff
   1da24:	40037fff 	.word	0x40037fff
   1da28:	3ff80000 	.word	0x3ff80000
   1da2c:	bff00000 	.word	0xbff00000
   1da30:	9905      	ldr	r1, [sp, #20]
   1da32:	4c15      	ldr	r4, [pc, #84]	(1da88 <atan+0x348>)
   1da34:	00cd      	lsls	r5, r1, #3
   1da36:	e89d 0003 	ldmia.w	sp, {r0, r1}
   1da3a:	f7fa fb51 	bl	180e0 <__adddf3>
   1da3e:	4602      	mov	r2, r0
   1da40:	460b      	mov	r3, r1
   1da42:	4630      	mov	r0, r6
   1da44:	4639      	mov	r1, r7
   1da46:	f7fa fcfd 	bl	18444 <__aeabi_dmul>
   1da4a:	4b10      	ldr	r3, [pc, #64]	(1da8c <atan+0x34c>)
   1da4c:	1964      	adds	r4, r4, r5
   1da4e:	195b      	adds	r3, r3, r5
   1da50:	cb0c      	ldmia	r3!, {r2, r3}
   1da52:	f7fa fb43 	bl	180dc <__aeabi_dsub>
   1da56:	4632      	mov	r2, r6
   1da58:	463b      	mov	r3, r7
   1da5a:	f7fa fb3f 	bl	180dc <__aeabi_dsub>
   1da5e:	4602      	mov	r2, r0
   1da60:	460b      	mov	r3, r1
   1da62:	e894 0003 	ldmia.w	r4, {r0, r1}
   1da66:	f7fa fb39 	bl	180dc <__aeabi_dsub>
   1da6a:	9b04      	ldr	r3, [sp, #16]
   1da6c:	2b00      	cmp	r3, #0
   1da6e:	bfa7      	ittee	ge
   1da70:	4602      	movge	r2, r0
   1da72:	460b      	movge	r3, r1
   1da74:	4602      	movlt	r2, r0
   1da76:	f101 4300 	addlt.w	r3, r1, #2147483648	; 0x80000000
   1da7a:	4616      	mov	r6, r2
   1da7c:	461f      	mov	r7, r3
   1da7e:	4630      	mov	r0, r6
   1da80:	4639      	mov	r1, r7
   1da82:	b007      	add	sp, #28
   1da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da86:	46c0      	nop			(mov r8, r8)
   1da88:	000212e0 	.word	0x000212e0
   1da8c:	00021300 	.word	0x00021300

0001da90 <fabs>:
   1da90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1da94:	b530      	push	{r4, r5, lr}
   1da96:	460d      	mov	r5, r1
   1da98:	4604      	mov	r4, r0
   1da9a:	4619      	mov	r1, r3
   1da9c:	bd30      	pop	{r4, r5, pc}
   1da9e:	46c0      	nop			(mov r8, r8)

0001daa0 <floor>:
   1daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1daa2:	150b      	asrs	r3, r1, #20
   1daa4:	055b      	lsls	r3, r3, #21
   1daa6:	0d5b      	lsrs	r3, r3, #21
   1daa8:	f5a3 757e 	sub.w	r5, r3, #1016	; 0x3f8
   1daac:	3d07      	subs	r5, #7
   1daae:	b083      	sub	sp, #12
   1dab0:	2d13      	cmp	r5, #19
   1dab2:	460c      	mov	r4, r1
   1dab4:	9001      	str	r0, [sp, #4]
   1dab6:	4606      	mov	r6, r0
   1dab8:	dc32      	bgt.n	1db20 <floor+0x80>
   1daba:	2d00      	cmp	r5, #0
   1dabc:	da14      	bge.n	1dae8 <floor+0x48>
   1dabe:	a230      	add	r2, pc, #192	(adr r2, 1db80 <floor+0xe0>)
   1dac0:	ca0c      	ldmia	r2!, {r2, r3}
   1dac2:	f7fa fb0d 	bl	180e0 <__adddf3>
   1dac6:	2200      	movs	r2, #0
   1dac8:	2300      	movs	r3, #0
   1daca:	f7fa ff49 	bl	18960 <__aeabi_dcmpgt>
   1dace:	2800      	cmp	r0, #0
   1dad0:	d051      	beq.n	1db76 <floor+0xd6>
   1dad2:	2c00      	cmp	r4, #0
   1dad4:	db01      	blt.n	1dada <floor+0x3a>
   1dad6:	2400      	movs	r4, #0
   1dad8:	e020      	b.n	1db1c <floor+0x7c>
   1dada:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1dade:	4333      	orrs	r3, r6
   1dae0:	4b29      	ldr	r3, [pc, #164]	(1db88 <floor+0xe8>)
   1dae2:	bf18      	it	ne
   1dae4:	461c      	movne	r4, r3
   1dae6:	e019      	b.n	1db1c <floor+0x7c>
   1dae8:	4b28      	ldr	r3, [pc, #160]	(1db8c <floor+0xec>)
   1daea:	9a01      	ldr	r2, [sp, #4]
   1daec:	fa53 f705 	asrs.w	r7, r3, r5
   1daf0:	ea07 0301 	and.w	r3, r7, r1
   1daf4:	431a      	orrs	r2, r3
   1daf6:	d040      	beq.n	1db7a <floor+0xda>
   1daf8:	a221      	add	r2, pc, #132	(adr r2, 1db80 <floor+0xe0>)
   1dafa:	ca0c      	ldmia	r2!, {r2, r3}
   1dafc:	f7fa faf0 	bl	180e0 <__adddf3>
   1db00:	2200      	movs	r2, #0
   1db02:	2300      	movs	r3, #0
   1db04:	f7fa ff2c 	bl	18960 <__aeabi_dcmpgt>
   1db08:	2800      	cmp	r0, #0
   1db0a:	d034      	beq.n	1db76 <floor+0xd6>
   1db0c:	2c00      	cmp	r4, #0
   1db0e:	da03      	bge.n	1db18 <floor+0x78>
   1db10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1db14:	412b      	asrs	r3, r5
   1db16:	18e4      	adds	r4, r4, r3
   1db18:	ea24 0407 	bic.w	r4, r4, r7
   1db1c:	2600      	movs	r6, #0
   1db1e:	e02a      	b.n	1db76 <floor+0xd6>
   1db20:	2d33      	cmp	r5, #51
   1db22:	dd07      	ble.n	1db34 <floor+0x94>
   1db24:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1db28:	d127      	bne.n	1db7a <floor+0xda>
   1db2a:	4602      	mov	r2, r0
   1db2c:	460b      	mov	r3, r1
   1db2e:	f7fa fad7 	bl	180e0 <__adddf3>
   1db32:	e022      	b.n	1db7a <floor+0xda>
   1db34:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
   1db38:	3b03      	subs	r3, #3
   1db3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1db3e:	fa32 f703 	lsrs.w	r7, r2, r3
   1db42:	4207      	tst	r7, r0
   1db44:	d019      	beq.n	1db7a <floor+0xda>
   1db46:	a20e      	add	r2, pc, #56	(adr r2, 1db80 <floor+0xe0>)
   1db48:	ca0c      	ldmia	r2!, {r2, r3}
   1db4a:	f7fa fac9 	bl	180e0 <__adddf3>
   1db4e:	2200      	movs	r2, #0
   1db50:	2300      	movs	r3, #0
   1db52:	f7fa ff05 	bl	18960 <__aeabi_dcmpgt>
   1db56:	b170      	cbz	r0, 1db76 <floor+0xd6>
   1db58:	2c00      	cmp	r4, #0
   1db5a:	da0a      	bge.n	1db72 <floor+0xd2>
   1db5c:	2d14      	cmp	r5, #20
   1db5e:	d007      	beq.n	1db70 <floor+0xd0>
   1db60:	2301      	movs	r3, #1
   1db62:	f1c5 0234 	rsb	r2, r5, #52	; 0x34
   1db66:	4093      	lsls	r3, r2
   1db68:	18f6      	adds	r6, r6, r3
   1db6a:	9b01      	ldr	r3, [sp, #4]
   1db6c:	429e      	cmp	r6, r3
   1db6e:	d200      	bcs.n	1db72 <floor+0xd2>
   1db70:	3401      	adds	r4, #1
   1db72:	ea26 0607 	bic.w	r6, r6, r7
   1db76:	4630      	mov	r0, r6
   1db78:	4621      	mov	r1, r4
   1db7a:	b003      	add	sp, #12
   1db7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1db7e:	46c0      	nop			(mov r8, r8)
   1db80:	8800759c 	.word	0x8800759c
   1db84:	7e37e43c 	.word	0x7e37e43c
   1db88:	bff00000 	.word	0xbff00000
   1db8c:	000fffff 	.word	0x000fffff

0001db90 <__isnand>:
   1db90:	460b      	mov	r3, r1
   1db92:	f1c0 0100 	rsb	r1, r0, #0	; 0x0
   1db96:	4301      	orrs	r1, r0
   1db98:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   1db9c:	ea40 70d1 	orr.w	r0, r0, r1, lsr #31
   1dba0:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
   1dba4:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
   1dba8:	0fc0      	lsrs	r0, r0, #31
   1dbaa:	4770      	bx	lr

0001dbac <matherr>:
   1dbac:	2000      	movs	r0, #0
   1dbae:	4770      	bx	lr

0001dbb0 <scalbn>:
   1dbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dbb2:	4b37      	ldr	r3, [pc, #220]	(1dc90 <scalbn+0xe0>)
   1dbb4:	460d      	mov	r5, r1
   1dbb6:	ea05 0303 	and.w	r3, r5, r3
   1dbba:	4617      	mov	r7, r2
   1dbbc:	b081      	sub	sp, #4
   1dbbe:	4604      	mov	r4, r0
   1dbc0:	460e      	mov	r6, r1
   1dbc2:	151a      	asrs	r2, r3, #20
   1dbc4:	b973      	cbnz	r3, 1dbe4 <scalbn+0x34>
   1dbc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1dbca:	4303      	orrs	r3, r0
   1dbcc:	d054      	beq.n	1dc78 <scalbn+0xc8>
   1dbce:	4629      	mov	r1, r5
   1dbd0:	2200      	movs	r2, #0
   1dbd2:	4b30      	ldr	r3, [pc, #192]	(1dc94 <scalbn+0xe4>)
   1dbd4:	f7fa fc36 	bl	18444 <__aeabi_dmul>
   1dbd8:	4b2f      	ldr	r3, [pc, #188]	(1dc98 <scalbn+0xe8>)
   1dbda:	4604      	mov	r4, r0
   1dbdc:	429f      	cmp	r7, r3
   1dbde:	460d      	mov	r5, r1
   1dbe0:	da0a      	bge.n	1dbf8 <scalbn+0x48>
   1dbe2:	e037      	b.n	1dc54 <scalbn+0xa4>
   1dbe4:	f240 73ff 	movw	r3, #2047	; 0x7ff
   1dbe8:	429a      	cmp	r2, r3
   1dbea:	d10c      	bne.n	1dc06 <scalbn+0x56>
   1dbec:	4629      	mov	r1, r5
   1dbee:	4602      	mov	r2, r0
   1dbf0:	462b      	mov	r3, r5
   1dbf2:	f7fa fa75 	bl	180e0 <__adddf3>
   1dbf6:	e03d      	b.n	1dc74 <scalbn+0xc4>
   1dbf8:	4b25      	ldr	r3, [pc, #148]	(1dc90 <scalbn+0xe0>)
   1dbfa:	460e      	mov	r6, r1
   1dbfc:	ea01 0303 	and.w	r3, r1, r3
   1dc00:	151b      	asrs	r3, r3, #20
   1dc02:	f1a3 0236 	sub.w	r2, r3, #54	; 0x36
   1dc06:	eb02 0c07 	add.w	ip, r2, r7
   1dc0a:	f240 73fe 	movw	r3, #2046	; 0x7fe
   1dc0e:	459c      	cmp	ip, r3
   1dc10:	dc11      	bgt.n	1dc36 <scalbn+0x86>
   1dc12:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1dc16:	dd07      	ble.n	1dc28 <scalbn+0x78>
   1dc18:	f026 41fe 	bic.w	r1, r6, #2130706432	; 0x7f000000
   1dc1c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
   1dc20:	ea41 530c 	orr.w	r3, r1, ip, lsl #20
   1dc24:	461d      	mov	r5, r3
   1dc26:	e027      	b.n	1dc78 <scalbn+0xc8>
   1dc28:	f11c 0f35 	cmn.w	ip, #53	; 0x35
   1dc2c:	da15      	bge.n	1dc5a <scalbn+0xaa>
   1dc2e:	f24c 3350 	movw	r3, #50000	; 0xc350
   1dc32:	429f      	cmp	r7, r3
   1dc34:	dd08      	ble.n	1dc48 <scalbn+0x98>
   1dc36:	4622      	mov	r2, r4
   1dc38:	462b      	mov	r3, r5
   1dc3a:	a011      	add	r0, pc, #68	(adr r0, 1dc80 <scalbn+0xd0>)
   1dc3c:	c803      	ldmia	r0!, {r0, r1}
   1dc3e:	f000 f82f 	bl	1dca0 <copysign>
   1dc42:	a20f      	add	r2, pc, #60	(adr r2, 1dc80 <scalbn+0xd0>)
   1dc44:	ca0c      	ldmia	r2!, {r2, r3}
   1dc46:	e013      	b.n	1dc70 <scalbn+0xc0>
   1dc48:	a00f      	add	r0, pc, #60	(adr r0, 1dc88 <scalbn+0xd8>)
   1dc4a:	c803      	ldmia	r0!, {r0, r1}
   1dc4c:	4622      	mov	r2, r4
   1dc4e:	462b      	mov	r3, r5
   1dc50:	f000 f826 	bl	1dca0 <copysign>
   1dc54:	a20c      	add	r2, pc, #48	(adr r2, 1dc88 <scalbn+0xd8>)
   1dc56:	ca0c      	ldmia	r2!, {r2, r3}
   1dc58:	e00a      	b.n	1dc70 <scalbn+0xc0>
   1dc5a:	f026 43fe 	bic.w	r3, r6, #2130706432	; 0x7f000000
   1dc5e:	f10c 0236 	add.w	r2, ip, #54	; 0x36
   1dc62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1dc66:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
   1dc6a:	4b0c      	ldr	r3, [pc, #48]	(1dc9c <scalbn+0xec>)
   1dc6c:	4620      	mov	r0, r4
   1dc6e:	2200      	movs	r2, #0
   1dc70:	f7fa fbe8 	bl	18444 <__aeabi_dmul>
   1dc74:	4604      	mov	r4, r0
   1dc76:	460d      	mov	r5, r1
   1dc78:	4620      	mov	r0, r4
   1dc7a:	4629      	mov	r1, r5
   1dc7c:	b001      	add	sp, #4
   1dc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc80:	8800759c 	.word	0x8800759c
   1dc84:	7e37e43c 	.word	0x7e37e43c
   1dc88:	c2f8f359 	.word	0xc2f8f359
   1dc8c:	01a56e1f 	.word	0x01a56e1f
   1dc90:	7ff00000 	.word	0x7ff00000
   1dc94:	43500000 	.word	0x43500000
   1dc98:	ffff3cb0 	.word	0xffff3cb0
   1dc9c:	3c900000 	.word	0x3c900000

0001dca0 <copysign>:
   1dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dca2:	4606      	mov	r6, r0
   1dca4:	460f      	mov	r7, r1
   1dca6:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
   1dcaa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1dcae:	461d      	mov	r5, r3
   1dcb0:	ea40 0301 	orr.w	r3, r0, r1
   1dcb4:	4614      	mov	r4, r2
   1dcb6:	4630      	mov	r0, r6
   1dcb8:	4619      	mov	r1, r3
   1dcba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dcbc <abort>:
   1dcbc:	2006      	movs	r0, #6
   1dcbe:	f000 ffb1 	bl	1ec24 <raise>
   1dcc2:	2001      	movs	r0, #1
   1dcc4:	f7f7 face 	bl	15264 <_exit>

0001dcc8 <__errno>:
   1dcc8:	4b01      	ldr	r3, [pc, #4]	(1dcd0 <__errno+0x8>)
   1dcca:	6818      	ldr	r0, [r3, #0]
   1dccc:	300c      	adds	r0, #12
   1dcce:	4770      	bx	lr
   1dcd0:	20000044 	.word	0x20000044

0001dcd4 <_fputc_r>:
   1dcd4:	b570      	push	{r4, r5, r6, lr}
   1dcd6:	4604      	mov	r4, r0
   1dcd8:	460e      	mov	r6, r1
   1dcda:	4615      	mov	r5, r2
   1dcdc:	b118      	cbz	r0, 1dce6 <_fputc_r+0x12>
   1dcde:	6983      	ldr	r3, [r0, #24]
   1dce0:	b90b      	cbnz	r3, 1dce6 <_fputc_r+0x12>
   1dce2:	f001 faf9 	bl	1f2d8 <__sinit>
   1dce6:	4b0a      	ldr	r3, [pc, #40]	(1dd10 <_fputc_r+0x3c>)
   1dce8:	429d      	cmp	r5, r3
   1dcea:	bf08      	it	eq
   1dcec:	6825      	ldreq	r5, [r4, #0]
   1dcee:	d008      	beq.n	1dd02 <_fputc_r+0x2e>
   1dcf0:	4b08      	ldr	r3, [pc, #32]	(1dd14 <_fputc_r+0x40>)
   1dcf2:	429d      	cmp	r5, r3
   1dcf4:	bf08      	it	eq
   1dcf6:	6865      	ldreq	r5, [r4, #4]
   1dcf8:	d003      	beq.n	1dd02 <_fputc_r+0x2e>
   1dcfa:	4b07      	ldr	r3, [pc, #28]	(1dd18 <_fputc_r+0x44>)
   1dcfc:	429d      	cmp	r5, r3
   1dcfe:	bf08      	it	eq
   1dd00:	68a5      	ldreq	r5, [r4, #8]
   1dd02:	4620      	mov	r0, r4
   1dd04:	4631      	mov	r1, r6
   1dd06:	462a      	mov	r2, r5
   1dd08:	f000 fcc6 	bl	1e698 <_putc_r>
   1dd0c:	bd70      	pop	{r4, r5, r6, pc}
   1dd0e:	46c0      	nop			(mov r8, r8)
   1dd10:	00021328 	.word	0x00021328
   1dd14:	00021348 	.word	0x00021348
   1dd18:	00021368 	.word	0x00021368

0001dd1c <fputc>:
   1dd1c:	b500      	push	{lr}
   1dd1e:	4b05      	ldr	r3, [pc, #20]	(1dd34 <fputc+0x18>)
   1dd20:	4684      	mov	ip, r0
   1dd22:	460a      	mov	r2, r1
   1dd24:	b081      	sub	sp, #4
   1dd26:	6818      	ldr	r0, [r3, #0]
   1dd28:	4661      	mov	r1, ip
   1dd2a:	f7ff ffd3 	bl	1dcd4 <_fputc_r>
   1dd2e:	b001      	add	sp, #4
   1dd30:	bd00      	pop	{pc}
   1dd32:	46c0      	nop			(mov r8, r8)
   1dd34:	20000044 	.word	0x20000044

0001dd38 <_fputs_r>:
   1dd38:	b530      	push	{r4, r5, lr}
   1dd3a:	4605      	mov	r5, r0
   1dd3c:	b087      	sub	sp, #28
   1dd3e:	4608      	mov	r0, r1
   1dd40:	4614      	mov	r4, r2
   1dd42:	9104      	str	r1, [sp, #16]
   1dd44:	f001 f824 	bl	1ed90 <strlen>
   1dd48:	ab04      	add	r3, sp, #16
   1dd4a:	9301      	str	r3, [sp, #4]
   1dd4c:	2301      	movs	r3, #1
   1dd4e:	9003      	str	r0, [sp, #12]
   1dd50:	9005      	str	r0, [sp, #20]
   1dd52:	9302      	str	r3, [sp, #8]
   1dd54:	b125      	cbz	r5, 1dd60 <_fputs_r+0x28>
   1dd56:	69ab      	ldr	r3, [r5, #24]
   1dd58:	b913      	cbnz	r3, 1dd60 <_fputs_r+0x28>
   1dd5a:	4628      	mov	r0, r5
   1dd5c:	f001 fabc 	bl	1f2d8 <__sinit>
   1dd60:	4b10      	ldr	r3, [pc, #64]	(1dda4 <_fputs_r+0x6c>)
   1dd62:	429c      	cmp	r4, r3
   1dd64:	bf08      	it	eq
   1dd66:	682c      	ldreq	r4, [r5, #0]
   1dd68:	d008      	beq.n	1dd7c <_fputs_r+0x44>
   1dd6a:	4b0f      	ldr	r3, [pc, #60]	(1dda8 <_fputs_r+0x70>)
   1dd6c:	429c      	cmp	r4, r3
   1dd6e:	bf08      	it	eq
   1dd70:	686c      	ldreq	r4, [r5, #4]
   1dd72:	d003      	beq.n	1dd7c <_fputs_r+0x44>
   1dd74:	4b0d      	ldr	r3, [pc, #52]	(1ddac <_fputs_r+0x74>)
   1dd76:	429c      	cmp	r4, r3
   1dd78:	bf08      	it	eq
   1dd7a:	68ac      	ldreq	r4, [r5, #8]
   1dd7c:	89a3      	ldrh	r3, [r4, #12]
   1dd7e:	4628      	mov	r0, r5
   1dd80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1dd84:	bf02      	ittt	eq
   1dd86:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   1dd8a:	81a3      	strheq	r3, [r4, #12]
   1dd8c:	6e63      	ldreq	r3, [r4, #100]
   1dd8e:	4621      	mov	r1, r4
   1dd90:	bf04      	itt	eq
   1dd92:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   1dd96:	6663      	streq	r3, [r4, #100]
   1dd98:	aa01      	add	r2, sp, #4
   1dd9a:	f000 f817 	bl	1ddcc <__sfvwrite_r>
   1dd9e:	b007      	add	sp, #28
   1dda0:	bd30      	pop	{r4, r5, pc}
   1dda2:	46c0      	nop			(mov r8, r8)
   1dda4:	00021328 	.word	0x00021328
   1dda8:	00021348 	.word	0x00021348
   1ddac:	00021368 	.word	0x00021368

0001ddb0 <fputs>:
   1ddb0:	b500      	push	{lr}
   1ddb2:	4b05      	ldr	r3, [pc, #20]	(1ddc8 <fputs+0x18>)
   1ddb4:	4684      	mov	ip, r0
   1ddb6:	460a      	mov	r2, r1
   1ddb8:	b081      	sub	sp, #4
   1ddba:	6818      	ldr	r0, [r3, #0]
   1ddbc:	4661      	mov	r1, ip
   1ddbe:	f7ff ffbb 	bl	1dd38 <_fputs_r>
   1ddc2:	b001      	add	sp, #4
   1ddc4:	bd00      	pop	{pc}
   1ddc6:	46c0      	nop			(mov r8, r8)
   1ddc8:	20000044 	.word	0x20000044

0001ddcc <__sfvwrite_r>:
   1ddcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ddce:	6893      	ldr	r3, [r2, #8]
   1ddd0:	b089      	sub	sp, #36
   1ddd2:	9001      	str	r0, [sp, #4]
   1ddd4:	460d      	mov	r5, r1
   1ddd6:	9200      	str	r2, [sp, #0]
   1ddd8:	2b00      	cmp	r3, #0
   1ddda:	f000 815b 	beq.w	1e094 <__sfvwrite_r+0x2c8>
   1ddde:	898b      	ldrh	r3, [r1, #12]
   1dde0:	f013 0f08 	tst.w	r3, #8	; 0x8
   1dde4:	d001      	beq.n	1ddea <__sfvwrite_r+0x1e>
   1dde6:	690b      	ldr	r3, [r1, #16]
   1dde8:	b963      	cbnz	r3, 1de04 <__sfvwrite_r+0x38>
   1ddea:	9801      	ldr	r0, [sp, #4]
   1ddec:	4629      	mov	r1, r5
   1ddee:	f001 f891 	bl	1ef14 <__swsetup_r>
   1ddf2:	b138      	cbz	r0, 1de04 <__sfvwrite_r+0x38>
   1ddf4:	89ab      	ldrh	r3, [r5, #12]
   1ddf6:	9801      	ldr	r0, [sp, #4]
   1ddf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ddfc:	81ab      	strh	r3, [r5, #12]
   1ddfe:	2309      	movs	r3, #9
   1de00:	60c3      	str	r3, [r0, #12]
   1de02:	e144      	b.n	1e08e <__sfvwrite_r+0x2c2>
   1de04:	9a00      	ldr	r2, [sp, #0]
   1de06:	89ab      	ldrh	r3, [r5, #12]
   1de08:	6812      	ldr	r2, [r2, #0]
   1de0a:	f013 0f02 	tst.w	r3, #2	; 0x2
   1de0e:	9202      	str	r2, [sp, #8]
   1de10:	d021      	beq.n	1de56 <__sfvwrite_r+0x8a>
   1de12:	2600      	movs	r6, #0
   1de14:	2700      	movs	r7, #0
   1de16:	e004      	b.n	1de22 <__sfvwrite_r+0x56>
   1de18:	9b02      	ldr	r3, [sp, #8]
   1de1a:	681f      	ldr	r7, [r3, #0]
   1de1c:	685e      	ldr	r6, [r3, #4]
   1de1e:	3308      	adds	r3, #8
   1de20:	9302      	str	r3, [sp, #8]
   1de22:	2e00      	cmp	r6, #0
   1de24:	d0f8      	beq.n	1de18 <__sfvwrite_r+0x4c>
   1de26:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1de2a:	bf34      	ite	cc
   1de2c:	4633      	movcc	r3, r6
   1de2e:	f44f 7380 	movcs.w	r3, #256	; 0x100
   1de32:	6a29      	ldr	r1, [r5, #32]
   1de34:	6aac      	ldr	r4, [r5, #40]
   1de36:	9801      	ldr	r0, [sp, #4]
   1de38:	463a      	mov	r2, r7
   1de3a:	47a0      	blx	r4
   1de3c:	2800      	cmp	r0, #0
   1de3e:	f340 8122 	ble.w	1e086 <__sfvwrite_r+0x2ba>
   1de42:	9a00      	ldr	r2, [sp, #0]
   1de44:	6893      	ldr	r3, [r2, #8]
   1de46:	1a1b      	subs	r3, r3, r0
   1de48:	6093      	str	r3, [r2, #8]
   1de4a:	2b00      	cmp	r3, #0
   1de4c:	f000 8122 	beq.w	1e094 <__sfvwrite_r+0x2c8>
   1de50:	183f      	adds	r7, r7, r0
   1de52:	1a36      	subs	r6, r6, r0
   1de54:	e7e5      	b.n	1de22 <__sfvwrite_r+0x56>
   1de56:	f013 0f01 	tst.w	r3, #1	; 0x1
   1de5a:	d005      	beq.n	1de68 <__sfvwrite_r+0x9c>
   1de5c:	2700      	movs	r7, #0
   1de5e:	2300      	movs	r3, #0
   1de60:	9306      	str	r3, [sp, #24]
   1de62:	9703      	str	r7, [sp, #12]
   1de64:	9704      	str	r7, [sp, #16]
   1de66:	e0aa      	b.n	1dfbe <__sfvwrite_r+0x1f2>
   1de68:	2600      	movs	r6, #0
   1de6a:	9607      	str	r6, [sp, #28]
   1de6c:	e006      	b.n	1de7c <__sfvwrite_r+0xb0>
   1de6e:	9802      	ldr	r0, [sp, #8]
   1de70:	9a02      	ldr	r2, [sp, #8]
   1de72:	6800      	ldr	r0, [r0, #0]
   1de74:	6856      	ldr	r6, [r2, #4]
   1de76:	3208      	adds	r2, #8
   1de78:	9007      	str	r0, [sp, #28]
   1de7a:	9202      	str	r2, [sp, #8]
   1de7c:	2e00      	cmp	r6, #0
   1de7e:	d0f6      	beq.n	1de6e <__sfvwrite_r+0xa2>
   1de80:	89aa      	ldrh	r2, [r5, #12]
   1de82:	68ac      	ldr	r4, [r5, #8]
   1de84:	f412 7f00 	tst.w	r2, #512	; 0x200
   1de88:	d056      	beq.n	1df38 <__sfvwrite_r+0x16c>
   1de8a:	42a6      	cmp	r6, r4
   1de8c:	d346      	bcc.n	1df1c <__sfvwrite_r+0x150>
   1de8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
   1de92:	d041      	beq.n	1df18 <__sfvwrite_r+0x14c>
   1de94:	6929      	ldr	r1, [r5, #16]
   1de96:	682b      	ldr	r3, [r5, #0]
   1de98:	1a5b      	subs	r3, r3, r1
   1de9a:	9305      	str	r3, [sp, #20]
   1de9c:	696b      	ldr	r3, [r5, #20]
   1de9e:	9805      	ldr	r0, [sp, #20]
   1dea0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dea4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1dea8:	105f      	asrs	r7, r3, #1
   1deaa:	1c43      	adds	r3, r0, #1
   1deac:	199b      	adds	r3, r3, r6
   1deae:	429f      	cmp	r7, r3
   1deb0:	bf38      	it	cc
   1deb2:	461f      	movcc	r7, r3
   1deb4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1deb8:	d016      	beq.n	1dee8 <__sfvwrite_r+0x11c>
   1deba:	9801      	ldr	r0, [sp, #4]
   1debc:	4639      	mov	r1, r7
   1debe:	f000 f95b 	bl	1e178 <_malloc_r>
   1dec2:	4604      	mov	r4, r0
   1dec4:	b918      	cbnz	r0, 1dece <__sfvwrite_r+0x102>
   1dec6:	9a01      	ldr	r2, [sp, #4]
   1dec8:	230c      	movs	r3, #12
   1deca:	60d3      	str	r3, [r2, #12]
   1decc:	e0db      	b.n	1e086 <__sfvwrite_r+0x2ba>
   1dece:	6929      	ldr	r1, [r5, #16]
   1ded0:	9a05      	ldr	r2, [sp, #20]
   1ded2:	f000 fba7 	bl	1e624 <memcpy>
   1ded6:	89ab      	ldrh	r3, [r5, #12]
   1ded8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1dedc:	041b      	lsls	r3, r3, #16
   1dede:	0c1b      	lsrs	r3, r3, #16
   1dee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1dee4:	81ab      	strh	r3, [r5, #12]
   1dee6:	e00d      	b.n	1df04 <__sfvwrite_r+0x138>
   1dee8:	9801      	ldr	r0, [sp, #4]
   1deea:	463a      	mov	r2, r7
   1deec:	f000 fc2e 	bl	1e74c <_realloc_r>
   1def0:	4604      	mov	r4, r0
   1def2:	b938      	cbnz	r0, 1df04 <__sfvwrite_r+0x138>
   1def4:	9801      	ldr	r0, [sp, #4]
   1def6:	6929      	ldr	r1, [r5, #16]
   1def8:	f001 fa74 	bl	1f3e4 <_free_r>
   1defc:	9801      	ldr	r0, [sp, #4]
   1defe:	230c      	movs	r3, #12
   1df00:	60c3      	str	r3, [r0, #12]
   1df02:	e0c0      	b.n	1e086 <__sfvwrite_r+0x2ba>
   1df04:	9a05      	ldr	r2, [sp, #20]
   1df06:	612c      	str	r4, [r5, #16]
   1df08:	eb04 0302 	add.w	r3, r4, r2
   1df0c:	602b      	str	r3, [r5, #0]
   1df0e:	ebc2 0307 	rsb	r3, r2, r7
   1df12:	616f      	str	r7, [r5, #20]
   1df14:	4634      	mov	r4, r6
   1df16:	60ab      	str	r3, [r5, #8]
   1df18:	42a6      	cmp	r6, r4
   1df1a:	d200      	bcs.n	1df1e <__sfvwrite_r+0x152>
   1df1c:	4634      	mov	r4, r6
   1df1e:	4622      	mov	r2, r4
   1df20:	6828      	ldr	r0, [r5, #0]
   1df22:	9907      	ldr	r1, [sp, #28]
   1df24:	f000 fb8c 	bl	1e640 <memmove>
   1df28:	68ab      	ldr	r3, [r5, #8]
   1df2a:	1b1b      	subs	r3, r3, r4
   1df2c:	60ab      	str	r3, [r5, #8]
   1df2e:	682b      	ldr	r3, [r5, #0]
   1df30:	191b      	adds	r3, r3, r4
   1df32:	602b      	str	r3, [r5, #0]
   1df34:	4634      	mov	r4, r6
   1df36:	e02f      	b.n	1df98 <__sfvwrite_r+0x1cc>
   1df38:	6828      	ldr	r0, [r5, #0]
   1df3a:	692a      	ldr	r2, [r5, #16]
   1df3c:	42a6      	cmp	r6, r4
   1df3e:	bf94      	ite	ls
   1df40:	2300      	movls	r3, #0
   1df42:	2301      	movhi	r3, #1
   1df44:	4290      	cmp	r0, r2
   1df46:	bf94      	ite	ls
   1df48:	2300      	movls	r3, #0
   1df4a:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   1df4e:	b163      	cbz	r3, 1df6a <__sfvwrite_r+0x19e>
   1df50:	9907      	ldr	r1, [sp, #28]
   1df52:	4622      	mov	r2, r4
   1df54:	f000 fb74 	bl	1e640 <memmove>
   1df58:	682b      	ldr	r3, [r5, #0]
   1df5a:	9801      	ldr	r0, [sp, #4]
   1df5c:	191b      	adds	r3, r3, r4
   1df5e:	602b      	str	r3, [r5, #0]
   1df60:	4629      	mov	r1, r5
   1df62:	f001 f849 	bl	1eff8 <_fflush_r>
   1df66:	b1b8      	cbz	r0, 1df98 <__sfvwrite_r+0x1cc>
   1df68:	e08d      	b.n	1e086 <__sfvwrite_r+0x2ba>
   1df6a:	696b      	ldr	r3, [r5, #20]
   1df6c:	429e      	cmp	r6, r3
   1df6e:	d308      	bcc.n	1df82 <__sfvwrite_r+0x1b6>
   1df70:	6aac      	ldr	r4, [r5, #40]
   1df72:	6a29      	ldr	r1, [r5, #32]
   1df74:	9801      	ldr	r0, [sp, #4]
   1df76:	9a07      	ldr	r2, [sp, #28]
   1df78:	47a0      	blx	r4
   1df7a:	2800      	cmp	r0, #0
   1df7c:	4604      	mov	r4, r0
   1df7e:	dc0b      	bgt.n	1df98 <__sfvwrite_r+0x1cc>
   1df80:	e081      	b.n	1e086 <__sfvwrite_r+0x2ba>
   1df82:	9907      	ldr	r1, [sp, #28]
   1df84:	4632      	mov	r2, r6
   1df86:	f000 fb5b 	bl	1e640 <memmove>
   1df8a:	68ab      	ldr	r3, [r5, #8]
   1df8c:	4634      	mov	r4, r6
   1df8e:	1b9b      	subs	r3, r3, r6
   1df90:	60ab      	str	r3, [r5, #8]
   1df92:	682b      	ldr	r3, [r5, #0]
   1df94:	199b      	adds	r3, r3, r6
   1df96:	602b      	str	r3, [r5, #0]
   1df98:	9800      	ldr	r0, [sp, #0]
   1df9a:	6883      	ldr	r3, [r0, #8]
   1df9c:	1b1b      	subs	r3, r3, r4
   1df9e:	6083      	str	r3, [r0, #8]
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	d077      	beq.n	1e094 <__sfvwrite_r+0x2c8>
   1dfa4:	9a07      	ldr	r2, [sp, #28]
   1dfa6:	1b36      	subs	r6, r6, r4
   1dfa8:	1912      	adds	r2, r2, r4
   1dfaa:	9207      	str	r2, [sp, #28]
   1dfac:	e766      	b.n	1de7c <__sfvwrite_r+0xb0>
   1dfae:	9b02      	ldr	r3, [sp, #8]
   1dfb0:	2200      	movs	r2, #0
   1dfb2:	6858      	ldr	r0, [r3, #4]
   1dfb4:	681f      	ldr	r7, [r3, #0]
   1dfb6:	3308      	adds	r3, #8
   1dfb8:	9006      	str	r0, [sp, #24]
   1dfba:	9302      	str	r3, [sp, #8]
   1dfbc:	9203      	str	r2, [sp, #12]
   1dfbe:	9b06      	ldr	r3, [sp, #24]
   1dfc0:	2b00      	cmp	r3, #0
   1dfc2:	d0f4      	beq.n	1dfae <__sfvwrite_r+0x1e2>
   1dfc4:	9803      	ldr	r0, [sp, #12]
   1dfc6:	b980      	cbnz	r0, 1dfea <__sfvwrite_r+0x21e>
   1dfc8:	4638      	mov	r0, r7
   1dfca:	210a      	movs	r1, #10
   1dfcc:	461a      	mov	r2, r3
   1dfce:	f000 fb0b 	bl	1e5e8 <memchr>
   1dfd2:	b128      	cbz	r0, 1dfe0 <__sfvwrite_r+0x214>
   1dfd4:	1c43      	adds	r3, r0, #1
   1dfd6:	1bdb      	subs	r3, r3, r7
   1dfd8:	2201      	movs	r2, #1
   1dfda:	9304      	str	r3, [sp, #16]
   1dfdc:	9203      	str	r2, [sp, #12]
   1dfde:	e004      	b.n	1dfea <__sfvwrite_r+0x21e>
   1dfe0:	9b06      	ldr	r3, [sp, #24]
   1dfe2:	2001      	movs	r0, #1
   1dfe4:	3301      	adds	r3, #1
   1dfe6:	9304      	str	r3, [sp, #16]
   1dfe8:	9003      	str	r0, [sp, #12]
   1dfea:	9a06      	ldr	r2, [sp, #24]
   1dfec:	68ab      	ldr	r3, [r5, #8]
   1dfee:	9e04      	ldr	r6, [sp, #16]
   1dff0:	f8d5 c014 	ldr.w	ip, [r5, #20]
   1dff4:	4296      	cmp	r6, r2
   1dff6:	bf28      	it	cs
   1dff8:	4616      	movcs	r6, r2
   1dffa:	eb0c 0403 	add.w	r4, ip, r3
   1dffe:	6828      	ldr	r0, [r5, #0]
   1e000:	692a      	ldr	r2, [r5, #16]
   1e002:	42a6      	cmp	r6, r4
   1e004:	bfd4      	ite	le
   1e006:	2300      	movle	r3, #0
   1e008:	2301      	movgt	r3, #1
   1e00a:	4290      	cmp	r0, r2
   1e00c:	bf94      	ite	ls
   1e00e:	2300      	movls	r3, #0
   1e010:	f003 0301 	andhi.w	r3, r3, #1	; 0x1
   1e014:	b163      	cbz	r3, 1e030 <__sfvwrite_r+0x264>
   1e016:	4639      	mov	r1, r7
   1e018:	4622      	mov	r2, r4
   1e01a:	f000 fb11 	bl	1e640 <memmove>
   1e01e:	682b      	ldr	r3, [r5, #0]
   1e020:	9801      	ldr	r0, [sp, #4]
   1e022:	191b      	adds	r3, r3, r4
   1e024:	602b      	str	r3, [r5, #0]
   1e026:	4629      	mov	r1, r5
   1e028:	f000 ffe6 	bl	1eff8 <_fflush_r>
   1e02c:	b1b8      	cbz	r0, 1e05e <__sfvwrite_r+0x292>
   1e02e:	e02a      	b.n	1e086 <__sfvwrite_r+0x2ba>
   1e030:	4566      	cmp	r6, ip
   1e032:	db09      	blt.n	1e048 <__sfvwrite_r+0x27c>
   1e034:	6aac      	ldr	r4, [r5, #40]
   1e036:	6a29      	ldr	r1, [r5, #32]
   1e038:	9801      	ldr	r0, [sp, #4]
   1e03a:	463a      	mov	r2, r7
   1e03c:	4663      	mov	r3, ip
   1e03e:	47a0      	blx	r4
   1e040:	2800      	cmp	r0, #0
   1e042:	4604      	mov	r4, r0
   1e044:	dc0b      	bgt.n	1e05e <__sfvwrite_r+0x292>
   1e046:	e01e      	b.n	1e086 <__sfvwrite_r+0x2ba>
   1e048:	4639      	mov	r1, r7
   1e04a:	4632      	mov	r2, r6
   1e04c:	f000 faf8 	bl	1e640 <memmove>
   1e050:	68ab      	ldr	r3, [r5, #8]
   1e052:	4634      	mov	r4, r6
   1e054:	1b9b      	subs	r3, r3, r6
   1e056:	60ab      	str	r3, [r5, #8]
   1e058:	682b      	ldr	r3, [r5, #0]
   1e05a:	199b      	adds	r3, r3, r6
   1e05c:	602b      	str	r3, [r5, #0]
   1e05e:	9b04      	ldr	r3, [sp, #16]
   1e060:	1b1b      	subs	r3, r3, r4
   1e062:	9304      	str	r3, [sp, #16]
   1e064:	d105      	bne.n	1e072 <__sfvwrite_r+0x2a6>
   1e066:	9801      	ldr	r0, [sp, #4]
   1e068:	4629      	mov	r1, r5
   1e06a:	f000 ffc5 	bl	1eff8 <_fflush_r>
   1e06e:	b950      	cbnz	r0, 1e086 <__sfvwrite_r+0x2ba>
   1e070:	9003      	str	r0, [sp, #12]
   1e072:	9a00      	ldr	r2, [sp, #0]
   1e074:	6893      	ldr	r3, [r2, #8]
   1e076:	1b1b      	subs	r3, r3, r4
   1e078:	6093      	str	r3, [r2, #8]
   1e07a:	b15b      	cbz	r3, 1e094 <__sfvwrite_r+0x2c8>
   1e07c:	9b06      	ldr	r3, [sp, #24]
   1e07e:	193f      	adds	r7, r7, r4
   1e080:	1b1b      	subs	r3, r3, r4
   1e082:	9306      	str	r3, [sp, #24]
   1e084:	e79b      	b.n	1dfbe <__sfvwrite_r+0x1f2>
   1e086:	89ab      	ldrh	r3, [r5, #12]
   1e088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e08c:	81ab      	strh	r3, [r5, #12]
   1e08e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e092:	e000      	b.n	1e096 <__sfvwrite_r+0x2ca>
   1e094:	2000      	movs	r0, #0
   1e096:	b009      	add	sp, #36
   1e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e09a:	46c0      	nop			(mov r8, r8)

0001e09c <_fwrite_r>:
   1e09c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e09e:	fb02 f603 	mul.w	r6, r2, r3
   1e0a2:	b089      	sub	sp, #36
   1e0a4:	461f      	mov	r7, r3
   1e0a6:	ab06      	add	r3, sp, #24
   1e0a8:	9303      	str	r3, [sp, #12]
   1e0aa:	2301      	movs	r3, #1
   1e0ac:	4605      	mov	r5, r0
   1e0ae:	9201      	str	r2, [sp, #4]
   1e0b0:	9c0e      	ldr	r4, [sp, #56]
   1e0b2:	9106      	str	r1, [sp, #24]
   1e0b4:	9607      	str	r6, [sp, #28]
   1e0b6:	9605      	str	r6, [sp, #20]
   1e0b8:	9304      	str	r3, [sp, #16]
   1e0ba:	b118      	cbz	r0, 1e0c4 <_fwrite_r+0x28>
   1e0bc:	6983      	ldr	r3, [r0, #24]
   1e0be:	b90b      	cbnz	r3, 1e0c4 <_fwrite_r+0x28>
   1e0c0:	f001 f90a 	bl	1f2d8 <__sinit>
   1e0c4:	4b14      	ldr	r3, [pc, #80]	(1e118 <_fwrite_r+0x7c>)
   1e0c6:	429c      	cmp	r4, r3
   1e0c8:	bf08      	it	eq
   1e0ca:	682c      	ldreq	r4, [r5, #0]
   1e0cc:	d008      	beq.n	1e0e0 <_fwrite_r+0x44>
   1e0ce:	4b13      	ldr	r3, [pc, #76]	(1e11c <_fwrite_r+0x80>)
   1e0d0:	429c      	cmp	r4, r3
   1e0d2:	bf08      	it	eq
   1e0d4:	686c      	ldreq	r4, [r5, #4]
   1e0d6:	d003      	beq.n	1e0e0 <_fwrite_r+0x44>
   1e0d8:	4b11      	ldr	r3, [pc, #68]	(1e120 <_fwrite_r+0x84>)
   1e0da:	429c      	cmp	r4, r3
   1e0dc:	bf08      	it	eq
   1e0de:	68ac      	ldreq	r4, [r5, #8]
   1e0e0:	89a3      	ldrh	r3, [r4, #12]
   1e0e2:	4628      	mov	r0, r5
   1e0e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1e0e8:	bf02      	ittt	eq
   1e0ea:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   1e0ee:	81a3      	strheq	r3, [r4, #12]
   1e0f0:	6e63      	ldreq	r3, [r4, #100]
   1e0f2:	4621      	mov	r1, r4
   1e0f4:	bf04      	itt	eq
   1e0f6:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   1e0fa:	6663      	streq	r3, [r4, #100]
   1e0fc:	aa03      	add	r2, sp, #12
   1e0fe:	f7ff fe65 	bl	1ddcc <__sfvwrite_r>
   1e102:	b128      	cbz	r0, 1e110 <_fwrite_r+0x74>
   1e104:	9b05      	ldr	r3, [sp, #20]
   1e106:	9a01      	ldr	r2, [sp, #4]
   1e108:	ebc3 0306 	rsb	r3, r3, r6
   1e10c:	fbb3 f7f2 	udiv	r7, r3, r2
   1e110:	4638      	mov	r0, r7
   1e112:	b009      	add	sp, #36
   1e114:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e116:	46c0      	nop			(mov r8, r8)
   1e118:	00021328 	.word	0x00021328
   1e11c:	00021348 	.word	0x00021348
   1e120:	00021368 	.word	0x00021368

0001e124 <fwrite>:
   1e124:	b510      	push	{r4, lr}
   1e126:	4614      	mov	r4, r2
   1e128:	4a06      	ldr	r2, [pc, #24]	(1e144 <fwrite+0x20>)
   1e12a:	4684      	mov	ip, r0
   1e12c:	468e      	mov	lr, r1
   1e12e:	b082      	sub	sp, #8
   1e130:	6810      	ldr	r0, [r2, #0]
   1e132:	4661      	mov	r1, ip
   1e134:	9300      	str	r3, [sp, #0]
   1e136:	4672      	mov	r2, lr
   1e138:	4623      	mov	r3, r4
   1e13a:	f7ff ffaf 	bl	1e09c <_fwrite_r>
   1e13e:	b002      	add	sp, #8
   1e140:	bd10      	pop	{r4, pc}
   1e142:	46c0      	nop			(mov r8, r8)
   1e144:	20000044 	.word	0x20000044

0001e148 <free>:
   1e148:	b500      	push	{lr}
   1e14a:	4b04      	ldr	r3, [pc, #16]	(1e15c <free+0x14>)
   1e14c:	4601      	mov	r1, r0
   1e14e:	b081      	sub	sp, #4
   1e150:	6818      	ldr	r0, [r3, #0]
   1e152:	f001 f947 	bl	1f3e4 <_free_r>
   1e156:	b001      	add	sp, #4
   1e158:	bd00      	pop	{pc}
   1e15a:	46c0      	nop			(mov r8, r8)
   1e15c:	20000044 	.word	0x20000044

0001e160 <malloc>:
   1e160:	b500      	push	{lr}
   1e162:	4b04      	ldr	r3, [pc, #16]	(1e174 <malloc+0x14>)
   1e164:	4601      	mov	r1, r0
   1e166:	b081      	sub	sp, #4
   1e168:	6818      	ldr	r0, [r3, #0]
   1e16a:	f000 f805 	bl	1e178 <_malloc_r>
   1e16e:	b001      	add	sp, #4
   1e170:	bd00      	pop	{pc}
   1e172:	46c0      	nop			(mov r8, r8)
   1e174:	20000044 	.word	0x20000044

0001e178 <_malloc_r>:
   1e178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e17a:	f101 020b 	add.w	r2, r1, #11	; 0xb
   1e17e:	2a16      	cmp	r2, #22
   1e180:	bf8c      	ite	hi
   1e182:	f022 0607 	bichi.w	r6, r2, #7	; 0x7
   1e186:	2610      	movls	r6, #16
   1e188:	428e      	cmp	r6, r1
   1e18a:	bf2c      	ite	cs
   1e18c:	2300      	movcs	r3, #0
   1e18e:	2301      	movcc	r3, #1
   1e190:	b083      	sub	sp, #12
   1e192:	ea53 73d6 	orrs.w	r3, r3, r6, lsr #31
   1e196:	9000      	str	r0, [sp, #0]
   1e198:	d003      	beq.n	1e1a2 <_malloc_r+0x2a>
   1e19a:	9900      	ldr	r1, [sp, #0]
   1e19c:	230c      	movs	r3, #12
   1e19e:	60cb      	str	r3, [r1, #12]
   1e1a0:	e1fe      	b.n	1e5a0 <_malloc_r+0x428>
   1e1a2:	9800      	ldr	r0, [sp, #0]
   1e1a4:	f000 fa74 	bl	1e690 <__malloc_lock>
   1e1a8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1e1ac:	d218      	bcs.n	1e1e0 <_malloc_r+0x68>
   1e1ae:	f8df 341c 	ldr.w	r3, [pc, #1052]	; 1e5cc <_malloc_r+0x454>
   1e1b2:	08f2      	lsrs	r2, r6, #3
   1e1b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e1b8:	68dc      	ldr	r4, [r3, #12]
   1e1ba:	429c      	cmp	r4, r3
   1e1bc:	d107      	bne.n	1e1ce <_malloc_r+0x56>
   1e1be:	f104 0308 	add.w	r3, r4, #8	; 0x8
   1e1c2:	68dc      	ldr	r4, [r3, #12]
   1e1c4:	429c      	cmp	r4, r3
   1e1c6:	bf08      	it	eq
   1e1c8:	f102 0e02 	addeq.w	lr, r2, #2	; 0x2
   1e1cc:	d04c      	beq.n	1e268 <_malloc_r+0xf0>
   1e1ce:	6862      	ldr	r2, [r4, #4]
   1e1d0:	68e1      	ldr	r1, [r4, #12]
   1e1d2:	68a3      	ldr	r3, [r4, #8]
   1e1d4:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   1e1d8:	60d9      	str	r1, [r3, #12]
   1e1da:	608b      	str	r3, [r1, #8]
   1e1dc:	4422      	add	r2, r4
   1e1de:	e03a      	b.n	1e256 <_malloc_r+0xde>
   1e1e0:	0a72      	lsrs	r2, r6, #9
   1e1e2:	d101      	bne.n	1e1e8 <_malloc_r+0x70>
   1e1e4:	08f2      	lsrs	r2, r6, #3
   1e1e6:	e01f      	b.n	1e228 <_malloc_r+0xb0>
   1e1e8:	2a04      	cmp	r2, #4
   1e1ea:	d803      	bhi.n	1e1f4 <_malloc_r+0x7c>
   1e1ec:	09b3      	lsrs	r3, r6, #6
   1e1ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
   1e1f2:	e019      	b.n	1e228 <_malloc_r+0xb0>
   1e1f4:	2a14      	cmp	r2, #20
   1e1f6:	d801      	bhi.n	1e1fc <_malloc_r+0x84>
   1e1f8:	325b      	adds	r2, #91
   1e1fa:	e015      	b.n	1e228 <_malloc_r+0xb0>
   1e1fc:	2a54      	cmp	r2, #84
   1e1fe:	d803      	bhi.n	1e208 <_malloc_r+0x90>
   1e200:	0b33      	lsrs	r3, r6, #12
   1e202:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1e206:	e00f      	b.n	1e228 <_malloc_r+0xb0>
   1e208:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e20c:	d803      	bhi.n	1e216 <_malloc_r+0x9e>
   1e20e:	0bf3      	lsrs	r3, r6, #15
   1e210:	f103 0277 	add.w	r2, r3, #119	; 0x77
   1e214:	e008      	b.n	1e228 <_malloc_r+0xb0>
   1e216:	f240 5354 	movw	r3, #1364	; 0x554
   1e21a:	429a      	cmp	r2, r3
   1e21c:	d901      	bls.n	1e222 <_malloc_r+0xaa>
   1e21e:	227e      	movs	r2, #126
   1e220:	e002      	b.n	1e228 <_malloc_r+0xb0>
   1e222:	0cb3      	lsrs	r3, r6, #18
   1e224:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1e228:	4be8      	ldr	r3, [pc, #928]	(1e5cc <_malloc_r+0x454>)
   1e22a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1e22e:	f8dc 400c 	ldr.w	r4, [ip, #12]
   1e232:	e015      	b.n	1e260 <_malloc_r+0xe8>
   1e234:	6863      	ldr	r3, [r4, #4]
   1e236:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   1e23a:	ebc6 0300 	rsb	r3, r6, r0
   1e23e:	2b0f      	cmp	r3, #15
   1e240:	dd01      	ble.n	1e246 <_malloc_r+0xce>
   1e242:	3a01      	subs	r2, #1
   1e244:	e00e      	b.n	1e264 <_malloc_r+0xec>
   1e246:	2b00      	cmp	r3, #0
   1e248:	68e1      	ldr	r1, [r4, #12]
   1e24a:	db08      	blt.n	1e25e <_malloc_r+0xe6>
   1e24c:	68a3      	ldr	r3, [r4, #8]
   1e24e:	60d9      	str	r1, [r3, #12]
   1e250:	608b      	str	r3, [r1, #8]
   1e252:	eb04 0200 	add.w	r2, r4, r0
   1e256:	6853      	ldr	r3, [r2, #4]
   1e258:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1e25c:	e1ad      	b.n	1e5ba <_malloc_r+0x442>
   1e25e:	460c      	mov	r4, r1
   1e260:	4564      	cmp	r4, ip
   1e262:	d1e7      	bne.n	1e234 <_malloc_r+0xbc>
   1e264:	f102 0e01 	add.w	lr, r2, #1	; 0x1
   1e268:	4dd9      	ldr	r5, [pc, #868]	(1e5d0 <_malloc_r+0x458>)
   1e26a:	68ac      	ldr	r4, [r5, #8]
   1e26c:	42ac      	cmp	r4, r5
   1e26e:	d068      	beq.n	1e342 <_malloc_r+0x1ca>
   1e270:	6863      	ldr	r3, [r4, #4]
   1e272:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   1e276:	ebc6 0100 	rsb	r1, r6, r0
   1e27a:	290f      	cmp	r1, #15
   1e27c:	dd0d      	ble.n	1e29a <_malloc_r+0x122>
   1e27e:	f046 0201 	orr.w	r2, r6, #1	; 0x1
   1e282:	eb04 0306 	add.w	r3, r4, r6
   1e286:	6062      	str	r2, [r4, #4]
   1e288:	f041 0201 	orr.w	r2, r1, #1	; 0x1
   1e28c:	60eb      	str	r3, [r5, #12]
   1e28e:	60ab      	str	r3, [r5, #8]
   1e290:	60dd      	str	r5, [r3, #12]
   1e292:	609d      	str	r5, [r3, #8]
   1e294:	605a      	str	r2, [r3, #4]
   1e296:	5059      	str	r1, [r3, r1]
   1e298:	e190      	b.n	1e5bc <_malloc_r+0x444>
   1e29a:	2900      	cmp	r1, #0
   1e29c:	60ed      	str	r5, [r5, #12]
   1e29e:	60ad      	str	r5, [r5, #8]
   1e2a0:	dad7      	bge.n	1e252 <_malloc_r+0xda>
   1e2a2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1e2a6:	d210      	bcs.n	1e2ca <_malloc_r+0x152>
   1e2a8:	08c0      	lsrs	r0, r0, #3
   1e2aa:	1083      	asrs	r3, r0, #2
   1e2ac:	2201      	movs	r2, #1
   1e2ae:	409a      	lsls	r2, r3
   1e2b0:	f1a5 0108 	sub.w	r1, r5, #8	; 0x8
   1e2b4:	684b      	ldr	r3, [r1, #4]
   1e2b6:	4313      	orrs	r3, r2
   1e2b8:	604b      	str	r3, [r1, #4]
   1e2ba:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1e2be:	688b      	ldr	r3, [r1, #8]
   1e2c0:	60e1      	str	r1, [r4, #12]
   1e2c2:	60a3      	str	r3, [r4, #8]
   1e2c4:	60dc      	str	r4, [r3, #12]
   1e2c6:	608c      	str	r4, [r1, #8]
   1e2c8:	e03b      	b.n	1e342 <_malloc_r+0x1ca>
   1e2ca:	0a42      	lsrs	r2, r0, #9
   1e2cc:	2a04      	cmp	r2, #4
   1e2ce:	d802      	bhi.n	1e2d6 <_malloc_r+0x15e>
   1e2d0:	0983      	lsrs	r3, r0, #6
   1e2d2:	3338      	adds	r3, #56
   1e2d4:	e017      	b.n	1e306 <_malloc_r+0x18e>
   1e2d6:	2a14      	cmp	r2, #20
   1e2d8:	bf98      	it	ls
   1e2da:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   1e2de:	d912      	bls.n	1e306 <_malloc_r+0x18e>
   1e2e0:	2a54      	cmp	r2, #84
   1e2e2:	d802      	bhi.n	1e2ea <_malloc_r+0x172>
   1e2e4:	0b03      	lsrs	r3, r0, #12
   1e2e6:	336e      	adds	r3, #110
   1e2e8:	e00d      	b.n	1e306 <_malloc_r+0x18e>
   1e2ea:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1e2ee:	d802      	bhi.n	1e2f6 <_malloc_r+0x17e>
   1e2f0:	0bc3      	lsrs	r3, r0, #15
   1e2f2:	3377      	adds	r3, #119
   1e2f4:	e007      	b.n	1e306 <_malloc_r+0x18e>
   1e2f6:	f240 5354 	movw	r3, #1364	; 0x554
   1e2fa:	429a      	cmp	r2, r3
   1e2fc:	d901      	bls.n	1e302 <_malloc_r+0x18a>
   1e2fe:	237e      	movs	r3, #126
   1e300:	e001      	b.n	1e306 <_malloc_r+0x18e>
   1e302:	0c83      	lsrs	r3, r0, #18
   1e304:	337c      	adds	r3, #124
   1e306:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 1e5cc <_malloc_r+0x454>
   1e30a:	eb0c 02c3 	add.w	r2, ip, r3, lsl #3
   1e30e:	6891      	ldr	r1, [r2, #8]
   1e310:	4291      	cmp	r1, r2
   1e312:	d10c      	bne.n	1e32e <_malloc_r+0x1b6>
   1e314:	109b      	asrs	r3, r3, #2
   1e316:	2201      	movs	r2, #1
   1e318:	409a      	lsls	r2, r3
   1e31a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1e31e:	4313      	orrs	r3, r2
   1e320:	f8cc 3004 	str.w	r3, [ip, #4]
   1e324:	460b      	mov	r3, r1
   1e326:	e008      	b.n	1e33a <_malloc_r+0x1c2>
   1e328:	6889      	ldr	r1, [r1, #8]
   1e32a:	4291      	cmp	r1, r2
   1e32c:	d004      	beq.n	1e338 <_malloc_r+0x1c0>
   1e32e:	684b      	ldr	r3, [r1, #4]
   1e330:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1e334:	4298      	cmp	r0, r3
   1e336:	d3f7      	bcc.n	1e328 <_malloc_r+0x1b0>
   1e338:	68cb      	ldr	r3, [r1, #12]
   1e33a:	60e3      	str	r3, [r4, #12]
   1e33c:	60a1      	str	r1, [r4, #8]
   1e33e:	60cc      	str	r4, [r1, #12]
   1e340:	609c      	str	r4, [r3, #8]
   1e342:	2301      	movs	r3, #1
   1e344:	ea4f 02ae 	mov.w	r2, lr, asr #2
   1e348:	fa13 f102 	lsls.w	r1, r3, r2
   1e34c:	4b9f      	ldr	r3, [pc, #636]	(1e5cc <_malloc_r+0x454>)
   1e34e:	685a      	ldr	r2, [r3, #4]
   1e350:	4291      	cmp	r1, r2
   1e352:	d86e      	bhi.n	1e432 <_malloc_r+0x2ba>
   1e354:	4211      	tst	r1, r2
   1e356:	bf04      	itt	eq
   1e358:	f02e 0303 	biceq.w	r3, lr, #3	; 0x3
   1e35c:	f103 0e04 	addeq.w	lr, r3, #4	; 0x4
   1e360:	d002      	beq.n	1e368 <_malloc_r+0x1f0>
   1e362:	e004      	b.n	1e36e <_malloc_r+0x1f6>
   1e364:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   1e368:	0049      	lsls	r1, r1, #1
   1e36a:	4211      	tst	r1, r2
   1e36c:	d0fa      	beq.n	1e364 <_malloc_r+0x1ec>
   1e36e:	4a97      	ldr	r2, [pc, #604]	(1e5cc <_malloc_r+0x454>)
   1e370:	4674      	mov	r4, lr
   1e372:	eb02 07ce 	add.w	r7, r2, lr, lsl #3
   1e376:	463a      	mov	r2, r7
   1e378:	68d0      	ldr	r0, [r2, #12]
   1e37a:	e032      	b.n	1e3e2 <_malloc_r+0x26a>
   1e37c:	6843      	ldr	r3, [r0, #4]
   1e37e:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1e382:	ebc6 0c03 	rsb	ip, r6, r3
   1e386:	f1bc 0f0f 	cmp.w	ip, #15	; 0xf
   1e38a:	dd14      	ble.n	1e3b6 <_malloc_r+0x23e>
   1e38c:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   1e390:	4604      	mov	r4, r0
   1e392:	68c1      	ldr	r1, [r0, #12]
   1e394:	6043      	str	r3, [r0, #4]
   1e396:	f854 3f08 	ldr.w	r3, [r4, #8]!
   1e39a:	eb00 0206 	add.w	r2, r0, r6
   1e39e:	60d9      	str	r1, [r3, #12]
   1e3a0:	608b      	str	r3, [r1, #8]
   1e3a2:	f04c 0301 	orr.w	r3, ip, #1	; 0x1
   1e3a6:	60ea      	str	r2, [r5, #12]
   1e3a8:	60aa      	str	r2, [r5, #8]
   1e3aa:	60d5      	str	r5, [r2, #12]
   1e3ac:	6095      	str	r5, [r2, #8]
   1e3ae:	6053      	str	r3, [r2, #4]
   1e3b0:	f842 c00c 	str.w	ip, [r2, ip]
   1e3b4:	e010      	b.n	1e3d8 <_malloc_r+0x260>
   1e3b6:	f1bc 0f00 	cmp.w	ip, #0	; 0x0
   1e3ba:	f8d0 c00c 	ldr.w	ip, [r0, #12]
   1e3be:	db0f      	blt.n	1e3e0 <_malloc_r+0x268>
   1e3c0:	4403      	add	r3, r0
   1e3c2:	685a      	ldr	r2, [r3, #4]
   1e3c4:	4604      	mov	r4, r0
   1e3c6:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   1e3ca:	605a      	str	r2, [r3, #4]
   1e3cc:	f854 3f08 	ldr.w	r3, [r4, #8]!
   1e3d0:	f8c3 c00c 	str.w	ip, [r3, #12]
   1e3d4:	f8cc 3008 	str.w	r3, [ip, #8]
   1e3d8:	9800      	ldr	r0, [sp, #0]
   1e3da:	f000 f95b 	bl	1e694 <__malloc_unlock>
   1e3de:	e0f1      	b.n	1e5c4 <_malloc_r+0x44c>
   1e3e0:	4660      	mov	r0, ip
   1e3e2:	4290      	cmp	r0, r2
   1e3e4:	d1ca      	bne.n	1e37c <_malloc_r+0x204>
   1e3e6:	3401      	adds	r4, #1
   1e3e8:	f014 0f03 	tst.w	r4, #3	; 0x3
   1e3ec:	d001      	beq.n	1e3f2 <_malloc_r+0x27a>
   1e3ee:	3208      	adds	r2, #8
   1e3f0:	e7c2      	b.n	1e378 <_malloc_r+0x200>
   1e3f2:	4672      	mov	r2, lr
   1e3f4:	4638      	mov	r0, r7
   1e3f6:	f012 0f03 	tst.w	r2, #3	; 0x3
   1e3fa:	d105      	bne.n	1e408 <_malloc_r+0x290>
   1e3fc:	4a73      	ldr	r2, [pc, #460]	(1e5cc <_malloc_r+0x454>)
   1e3fe:	6853      	ldr	r3, [r2, #4]
   1e400:	ea23 0301 	bic.w	r3, r3, r1
   1e404:	6053      	str	r3, [r2, #4]
   1e406:	e006      	b.n	1e416 <_malloc_r+0x29e>
   1e408:	4603      	mov	r3, r0
   1e40a:	f853 0908 	ldr.w	r0, [r3], #-8
   1e40e:	4298      	cmp	r0, r3
   1e410:	d101      	bne.n	1e416 <_malloc_r+0x29e>
   1e412:	3a01      	subs	r2, #1
   1e414:	e7ef      	b.n	1e3f6 <_malloc_r+0x27e>
   1e416:	4a6d      	ldr	r2, [pc, #436]	(1e5cc <_malloc_r+0x454>)
   1e418:	0049      	lsls	r1, r1, #1
   1e41a:	6853      	ldr	r3, [r2, #4]
   1e41c:	4299      	cmp	r1, r3
   1e41e:	d808      	bhi.n	1e432 <_malloc_r+0x2ba>
   1e420:	b139      	cbz	r1, 1e432 <_malloc_r+0x2ba>
   1e422:	46a6      	mov	lr, r4
   1e424:	e002      	b.n	1e42c <_malloc_r+0x2b4>
   1e426:	f10e 0e04 	add.w	lr, lr, #4	; 0x4
   1e42a:	0049      	lsls	r1, r1, #1
   1e42c:	4219      	tst	r1, r3
   1e42e:	d19e      	bne.n	1e36e <_malloc_r+0x1f6>
   1e430:	e7f9      	b.n	1e426 <_malloc_r+0x2ae>
   1e432:	4b66      	ldr	r3, [pc, #408]	(1e5cc <_malloc_r+0x454>)
   1e434:	689f      	ldr	r7, [r3, #8]
   1e436:	687b      	ldr	r3, [r7, #4]
   1e438:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1e43c:	9301      	str	r3, [sp, #4]
   1e43e:	ebc6 0103 	rsb	r1, r6, r3
   1e442:	9a01      	ldr	r2, [sp, #4]
   1e444:	290f      	cmp	r1, #15
   1e446:	bfcc      	ite	gt
   1e448:	2300      	movgt	r3, #0
   1e44a:	2301      	movle	r3, #1
   1e44c:	42b2      	cmp	r2, r6
   1e44e:	bf38      	it	cc
   1e450:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   1e454:	2b00      	cmp	r3, #0
   1e456:	f000 80a5 	beq.w	1e5a4 <_malloc_r+0x42c>
   1e45a:	4b5e      	ldr	r3, [pc, #376]	(1e5d4 <_malloc_r+0x45c>)
   1e45c:	681b      	ldr	r3, [r3, #0]
   1e45e:	3310      	adds	r3, #16
   1e460:	eb03 0506 	add.w	r5, r3, r6
   1e464:	4b5c      	ldr	r3, [pc, #368]	(1e5d8 <_malloc_r+0x460>)
   1e466:	681b      	ldr	r3, [r3, #0]
   1e468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e46c:	d006      	beq.n	1e47c <_malloc_r+0x304>
   1e46e:	f505 637e 	add.w	r3, r5, #4064	; 0xfe0
   1e472:	331f      	adds	r3, #31
   1e474:	f423 657e 	bic.w	r5, r3, #4064	; 0xfe0
   1e478:	f025 051f 	bic.w	r5, r5, #31	; 0x1f
   1e47c:	9800      	ldr	r0, [sp, #0]
   1e47e:	4629      	mov	r1, r5
   1e480:	f000 fb92 	bl	1eba8 <_sbrk_r>
   1e484:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1e488:	4604      	mov	r4, r0
   1e48a:	d076      	beq.n	1e57a <_malloc_r+0x402>
   1e48c:	9b01      	ldr	r3, [sp, #4]
   1e48e:	eb07 0103 	add.w	r1, r7, r3
   1e492:	4288      	cmp	r0, r1
   1e494:	d202      	bcs.n	1e49c <_malloc_r+0x324>
   1e496:	4a4d      	ldr	r2, [pc, #308]	(1e5cc <_malloc_r+0x454>)
   1e498:	4297      	cmp	r7, r2
   1e49a:	d16e      	bne.n	1e57a <_malloc_r+0x402>
   1e49c:	4a4f      	ldr	r2, [pc, #316]	(1e5dc <_malloc_r+0x464>)
   1e49e:	428c      	cmp	r4, r1
   1e4a0:	6813      	ldr	r3, [r2, #0]
   1e4a2:	eb05 0003 	add.w	r0, r5, r3
   1e4a6:	6010      	str	r0, [r2, #0]
   1e4a8:	d10b      	bne.n	1e4c2 <_malloc_r+0x34a>
   1e4aa:	0523      	lsls	r3, r4, #20
   1e4ac:	0d1b      	lsrs	r3, r3, #20
   1e4ae:	b943      	cbnz	r3, 1e4c2 <_malloc_r+0x34a>
   1e4b0:	4b46      	ldr	r3, [pc, #280]	(1e5cc <_malloc_r+0x454>)
   1e4b2:	9901      	ldr	r1, [sp, #4]
   1e4b4:	689a      	ldr	r2, [r3, #8]
   1e4b6:	eb05 0301 	add.w	r3, r5, r1
   1e4ba:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1e4be:	6053      	str	r3, [r2, #4]
   1e4c0:	e04f      	b.n	1e562 <_malloc_r+0x3ea>
   1e4c2:	4a45      	ldr	r2, [pc, #276]	(1e5d8 <_malloc_r+0x460>)
   1e4c4:	6813      	ldr	r3, [r2, #0]
   1e4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e4ca:	bf08      	it	eq
   1e4cc:	6014      	streq	r4, [r2, #0]
   1e4ce:	d004      	beq.n	1e4da <_malloc_r+0x362>
   1e4d0:	eb04 0300 	add.w	r3, r4, r0
   1e4d4:	4a41      	ldr	r2, [pc, #260]	(1e5dc <_malloc_r+0x464>)
   1e4d6:	1a5b      	subs	r3, r3, r1
   1e4d8:	6013      	str	r3, [r2, #0]
   1e4da:	f014 0207 	ands.w	r2, r4, #7	; 0x7
   1e4de:	d101      	bne.n	1e4e4 <_malloc_r+0x36c>
   1e4e0:	2200      	movs	r2, #0
   1e4e2:	e002      	b.n	1e4ea <_malloc_r+0x372>
   1e4e4:	f1c2 0208 	rsb	r2, r2, #8	; 0x8
   1e4e8:	18a4      	adds	r4, r4, r2
   1e4ea:	eb04 0305 	add.w	r3, r4, r5
   1e4ee:	051b      	lsls	r3, r3, #20
   1e4f0:	0d1b      	lsrs	r3, r3, #20
   1e4f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1e4f6:	ebc3 0502 	rsb	r5, r3, r2
   1e4fa:	4629      	mov	r1, r5
   1e4fc:	9800      	ldr	r0, [sp, #0]
   1e4fe:	f000 fb53 	bl	1eba8 <_sbrk_r>
   1e502:	4b36      	ldr	r3, [pc, #216]	(1e5dc <_malloc_r+0x464>)
   1e504:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1e508:	681a      	ldr	r2, [r3, #0]
   1e50a:	bf04      	itt	eq
   1e50c:	4620      	moveq	r0, r4
   1e50e:	2500      	moveq	r5, #0
   1e510:	442a      	add	r2, r5
   1e512:	601a      	str	r2, [r3, #0]
   1e514:	4a2d      	ldr	r2, [pc, #180]	(1e5cc <_malloc_r+0x454>)
   1e516:	ebc4 0300 	rsb	r3, r4, r0
   1e51a:	195b      	adds	r3, r3, r5
   1e51c:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1e520:	4297      	cmp	r7, r2
   1e522:	6094      	str	r4, [r2, #8]
   1e524:	6063      	str	r3, [r4, #4]
   1e526:	d01c      	beq.n	1e562 <_malloc_r+0x3ea>
   1e528:	9b01      	ldr	r3, [sp, #4]
   1e52a:	2b0f      	cmp	r3, #15
   1e52c:	d802      	bhi.n	1e534 <_malloc_r+0x3bc>
   1e52e:	2301      	movs	r3, #1
   1e530:	6063      	str	r3, [r4, #4]
   1e532:	e022      	b.n	1e57a <_malloc_r+0x402>
   1e534:	9901      	ldr	r1, [sp, #4]
   1e536:	2305      	movs	r3, #5
   1e538:	f1a1 020c 	sub.w	r2, r1, #12	; 0xc
   1e53c:	f022 0207 	bic.w	r2, r2, #7	; 0x7
   1e540:	eb07 0102 	add.w	r1, r7, r2
   1e544:	604b      	str	r3, [r1, #4]
   1e546:	608b      	str	r3, [r1, #8]
   1e548:	687b      	ldr	r3, [r7, #4]
   1e54a:	2a0f      	cmp	r2, #15
   1e54c:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1e550:	ea42 0303 	orr.w	r3, r2, r3
   1e554:	607b      	str	r3, [r7, #4]
   1e556:	d904      	bls.n	1e562 <_malloc_r+0x3ea>
   1e558:	f107 0108 	add.w	r1, r7, #8	; 0x8
   1e55c:	9800      	ldr	r0, [sp, #0]
   1e55e:	f000 ff41 	bl	1f3e4 <_free_r>
   1e562:	491f      	ldr	r1, [pc, #124]	(1e5e0 <_malloc_r+0x468>)
   1e564:	4b1d      	ldr	r3, [pc, #116]	(1e5dc <_malloc_r+0x464>)
   1e566:	681a      	ldr	r2, [r3, #0]
   1e568:	680b      	ldr	r3, [r1, #0]
   1e56a:	429a      	cmp	r2, r3
   1e56c:	bf88      	it	hi
   1e56e:	600a      	strhi	r2, [r1, #0]
   1e570:	491c      	ldr	r1, [pc, #112]	(1e5e4 <_malloc_r+0x46c>)
   1e572:	680b      	ldr	r3, [r1, #0]
   1e574:	429a      	cmp	r2, r3
   1e576:	bf88      	it	hi
   1e578:	600a      	strhi	r2, [r1, #0]
   1e57a:	4a14      	ldr	r2, [pc, #80]	(1e5cc <_malloc_r+0x454>)
   1e57c:	6893      	ldr	r3, [r2, #8]
   1e57e:	685a      	ldr	r2, [r3, #4]
   1e580:	f022 0203 	bic.w	r2, r2, #3	; 0x3
   1e584:	ebc6 0102 	rsb	r1, r6, r2
   1e588:	290f      	cmp	r1, #15
   1e58a:	bfcc      	ite	gt
   1e58c:	2300      	movgt	r3, #0
   1e58e:	2301      	movle	r3, #1
   1e590:	42b2      	cmp	r2, r6
   1e592:	bf38      	it	cc
   1e594:	f043 0301 	orrcc.w	r3, r3, #1	; 0x1
   1e598:	b123      	cbz	r3, 1e5a4 <_malloc_r+0x42c>
   1e59a:	9800      	ldr	r0, [sp, #0]
   1e59c:	f000 f87a 	bl	1e694 <__malloc_unlock>
   1e5a0:	2400      	movs	r4, #0
   1e5a2:	e00f      	b.n	1e5c4 <_malloc_r+0x44c>
   1e5a4:	4b09      	ldr	r3, [pc, #36]	(1e5cc <_malloc_r+0x454>)
   1e5a6:	689c      	ldr	r4, [r3, #8]
   1e5a8:	f046 0301 	orr.w	r3, r6, #1	; 0x1
   1e5ac:	6063      	str	r3, [r4, #4]
   1e5ae:	4b07      	ldr	r3, [pc, #28]	(1e5cc <_malloc_r+0x454>)
   1e5b0:	eb04 0206 	add.w	r2, r4, r6
   1e5b4:	609a      	str	r2, [r3, #8]
   1e5b6:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   1e5ba:	6053      	str	r3, [r2, #4]
   1e5bc:	9800      	ldr	r0, [sp, #0]
   1e5be:	f000 f869 	bl	1e694 <__malloc_unlock>
   1e5c2:	3408      	adds	r4, #8
   1e5c4:	4620      	mov	r0, r4
   1e5c6:	b003      	add	sp, #12
   1e5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5ca:	46c0      	nop			(mov r8, r8)
   1e5cc:	20000138 	.word	0x20000138
   1e5d0:	20000140 	.word	0x20000140
   1e5d4:	20000e94 	.word	0x20000e94
   1e5d8:	20000544 	.word	0x20000544
   1e5dc:	20000ea0 	.word	0x20000ea0
   1e5e0:	20000e98 	.word	0x20000e98
   1e5e4:	20000e9c 	.word	0x20000e9c

0001e5e8 <memchr>:
   1e5e8:	b2c9      	uxtb	r1, r1
   1e5ea:	e004      	b.n	1e5f6 <memchr+0xe>
   1e5ec:	7803      	ldrb	r3, [r0, #0]
   1e5ee:	3a01      	subs	r2, #1
   1e5f0:	428b      	cmp	r3, r1
   1e5f2:	d003      	beq.n	1e5fc <memchr+0x14>
   1e5f4:	3001      	adds	r0, #1
   1e5f6:	2a00      	cmp	r2, #0
   1e5f8:	d1f8      	bne.n	1e5ec <memchr+0x4>
   1e5fa:	2000      	movs	r0, #0
   1e5fc:	4770      	bx	lr
   1e5fe:	46c0      	nop			(mov r8, r8)

0001e600 <memcmp>:
   1e600:	b510      	push	{r4, lr}
   1e602:	2300      	movs	r3, #0
   1e604:	4604      	mov	r4, r0
   1e606:	e009      	b.n	1e61c <memcmp+0x1c>
   1e608:	f814 c003 	ldrb.w	ip, [r4, r3]
   1e60c:	5cc8      	ldrb	r0, [r1, r3]
   1e60e:	3a01      	subs	r2, #1
   1e610:	3301      	adds	r3, #1
   1e612:	4584      	cmp	ip, r0
   1e614:	d002      	beq.n	1e61c <memcmp+0x1c>
   1e616:	ebc0 000c 	rsb	r0, r0, ip
   1e61a:	e002      	b.n	1e622 <memcmp+0x22>
   1e61c:	2a00      	cmp	r2, #0
   1e61e:	d1f3      	bne.n	1e608 <memcmp+0x8>
   1e620:	2000      	movs	r0, #0
   1e622:	bd10      	pop	{r4, pc}

0001e624 <memcpy>:
   1e624:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1e628:	e006      	b.n	1e638 <memcpy+0x14>
   1e62a:	f811 300c 	ldrb.w	r3, [r1, ip]
   1e62e:	3a01      	subs	r2, #1
   1e630:	f800 300c 	strb.w	r3, [r0, ip]
   1e634:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1e638:	2a00      	cmp	r2, #0
   1e63a:	d1f6      	bne.n	1e62a <memcpy+0x6>
   1e63c:	4770      	bx	lr
   1e63e:	46c0      	nop			(mov r8, r8)

0001e640 <memmove>:
   1e640:	4281      	cmp	r1, r0
   1e642:	b510      	push	{r4, lr}
   1e644:	d217      	bcs.n	1e676 <memmove+0x36>
   1e646:	eb01 0c02 	add.w	ip, r1, r2
   1e64a:	4560      	cmp	r0, ip
   1e64c:	d213      	bcs.n	1e676 <memmove+0x36>
   1e64e:	eb00 0402 	add.w	r4, r0, r2
   1e652:	2100      	movs	r1, #0
   1e654:	e003      	b.n	1e65e <memmove+0x1e>
   1e656:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1e65a:	3a01      	subs	r2, #1
   1e65c:	5463      	strb	r3, [r4, r1]
   1e65e:	3901      	subs	r1, #1
   1e660:	2a00      	cmp	r2, #0
   1e662:	d1f8      	bne.n	1e656 <memmove+0x16>
   1e664:	e00b      	b.n	1e67e <memmove+0x3e>
   1e666:	f811 300c 	ldrb.w	r3, [r1, ip]
   1e66a:	3a01      	subs	r2, #1
   1e66c:	f800 300c 	strb.w	r3, [r0, ip]
   1e670:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1e674:	e001      	b.n	1e67a <memmove+0x3a>
   1e676:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1e67a:	2a00      	cmp	r2, #0
   1e67c:	d1f3      	bne.n	1e666 <memmove+0x26>
   1e67e:	bd10      	pop	{r4, pc}

0001e680 <memset>:
   1e680:	2300      	movs	r3, #0
   1e682:	e002      	b.n	1e68a <memset+0xa>
   1e684:	54c1      	strb	r1, [r0, r3]
   1e686:	3a01      	subs	r2, #1
   1e688:	3301      	adds	r3, #1
   1e68a:	2a00      	cmp	r2, #0
   1e68c:	d1fa      	bne.n	1e684 <memset+0x4>
   1e68e:	4770      	bx	lr

0001e690 <__malloc_lock>:
   1e690:	4770      	bx	lr
   1e692:	46c0      	nop			(mov r8, r8)

0001e694 <__malloc_unlock>:
   1e694:	4770      	bx	lr
   1e696:	46c0      	nop			(mov r8, r8)

0001e698 <_putc_r>:
   1e698:	b570      	push	{r4, r5, r6, lr}
   1e69a:	4605      	mov	r5, r0
   1e69c:	460e      	mov	r6, r1
   1e69e:	4614      	mov	r4, r2
   1e6a0:	b118      	cbz	r0, 1e6aa <_putc_r+0x12>
   1e6a2:	6983      	ldr	r3, [r0, #24]
   1e6a4:	b90b      	cbnz	r3, 1e6aa <_putc_r+0x12>
   1e6a6:	f000 fe17 	bl	1f2d8 <__sinit>
   1e6aa:	4b17      	ldr	r3, [pc, #92]	(1e708 <_putc_r+0x70>)
   1e6ac:	429c      	cmp	r4, r3
   1e6ae:	bf08      	it	eq
   1e6b0:	682c      	ldreq	r4, [r5, #0]
   1e6b2:	d008      	beq.n	1e6c6 <_putc_r+0x2e>
   1e6b4:	4b15      	ldr	r3, [pc, #84]	(1e70c <_putc_r+0x74>)
   1e6b6:	429c      	cmp	r4, r3
   1e6b8:	bf08      	it	eq
   1e6ba:	686c      	ldreq	r4, [r5, #4]
   1e6bc:	d003      	beq.n	1e6c6 <_putc_r+0x2e>
   1e6be:	4b14      	ldr	r3, [pc, #80]	(1e710 <_putc_r+0x78>)
   1e6c0:	429c      	cmp	r4, r3
   1e6c2:	bf08      	it	eq
   1e6c4:	68ac      	ldreq	r4, [r5, #8]
   1e6c6:	68a3      	ldr	r3, [r4, #8]
   1e6c8:	1e5a      	subs	r2, r3, #1
   1e6ca:	2a00      	cmp	r2, #0
   1e6cc:	60a2      	str	r2, [r4, #8]
   1e6ce:	da13      	bge.n	1e6f8 <_putc_r+0x60>
   1e6d0:	69a3      	ldr	r3, [r4, #24]
   1e6d2:	429a      	cmp	r2, r3
   1e6d4:	db0a      	blt.n	1e6ec <_putc_r+0x54>
   1e6d6:	6823      	ldr	r3, [r4, #0]
   1e6d8:	701e      	strb	r6, [r3, #0]
   1e6da:	6823      	ldr	r3, [r4, #0]
   1e6dc:	7818      	ldrb	r0, [r3, #0]
   1e6de:	280a      	cmp	r0, #10
   1e6e0:	d001      	beq.n	1e6e6 <_putc_r+0x4e>
   1e6e2:	3301      	adds	r3, #1
   1e6e4:	e00d      	b.n	1e702 <_putc_r+0x6a>
   1e6e6:	4628      	mov	r0, r5
   1e6e8:	210a      	movs	r1, #10
   1e6ea:	e001      	b.n	1e6f0 <_putc_r+0x58>
   1e6ec:	4628      	mov	r0, r5
   1e6ee:	4631      	mov	r1, r6
   1e6f0:	4622      	mov	r2, r4
   1e6f2:	f000 fb85 	bl	1ee00 <__swbuf_r>
   1e6f6:	e005      	b.n	1e704 <_putc_r+0x6c>
   1e6f8:	6823      	ldr	r3, [r4, #0]
   1e6fa:	701e      	strb	r6, [r3, #0]
   1e6fc:	6823      	ldr	r3, [r4, #0]
   1e6fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   1e702:	6023      	str	r3, [r4, #0]
   1e704:	bd70      	pop	{r4, r5, r6, pc}
   1e706:	46c0      	nop			(mov r8, r8)
   1e708:	00021328 	.word	0x00021328
   1e70c:	00021348 	.word	0x00021348
   1e710:	00021368 	.word	0x00021368

0001e714 <putc>:
   1e714:	b500      	push	{lr}
   1e716:	4b05      	ldr	r3, [pc, #20]	(1e72c <putc+0x18>)
   1e718:	4684      	mov	ip, r0
   1e71a:	460a      	mov	r2, r1
   1e71c:	b081      	sub	sp, #4
   1e71e:	6818      	ldr	r0, [r3, #0]
   1e720:	4661      	mov	r1, ip
   1e722:	f7ff ffb9 	bl	1e698 <_putc_r>
   1e726:	b001      	add	sp, #4
   1e728:	bd00      	pop	{pc}
   1e72a:	46c0      	nop			(mov r8, r8)
   1e72c:	20000044 	.word	0x20000044

0001e730 <realloc>:
   1e730:	b500      	push	{lr}
   1e732:	4b05      	ldr	r3, [pc, #20]	(1e748 <realloc+0x18>)
   1e734:	4684      	mov	ip, r0
   1e736:	460a      	mov	r2, r1
   1e738:	b081      	sub	sp, #4
   1e73a:	6818      	ldr	r0, [r3, #0]
   1e73c:	4661      	mov	r1, ip
   1e73e:	f000 f805 	bl	1e74c <_realloc_r>
   1e742:	b001      	add	sp, #4
   1e744:	bd00      	pop	{pc}
   1e746:	46c0      	nop			(mov r8, r8)
   1e748:	20000044 	.word	0x20000044

0001e74c <_realloc_r>:
   1e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e74e:	b087      	sub	sp, #28
   1e750:	9002      	str	r0, [sp, #8]
   1e752:	460e      	mov	r6, r1
   1e754:	9201      	str	r2, [sp, #4]
   1e756:	b921      	cbnz	r1, 1e762 <_realloc_r+0x16>
   1e758:	4611      	mov	r1, r2
   1e75a:	f7ff fd0d 	bl	1e178 <_malloc_r>
   1e75e:	4605      	mov	r5, r0
   1e760:	e19d      	b.n	1ea9e <_realloc_r+0x352>
   1e762:	9802      	ldr	r0, [sp, #8]
   1e764:	f7ff ff94 	bl	1e690 <__malloc_lock>
   1e768:	9801      	ldr	r0, [sp, #4]
   1e76a:	f1a6 0708 	sub.w	r7, r6, #8	; 0x8
   1e76e:	f100 030b 	add.w	r3, r0, #11	; 0xb
   1e772:	2b16      	cmp	r3, #22
   1e774:	bf88      	it	hi
   1e776:	f023 0307 	bichi.w	r3, r3, #7	; 0x7
   1e77a:	687c      	ldr	r4, [r7, #4]
   1e77c:	bf88      	it	hi
   1e77e:	9303      	strhi	r3, [sp, #12]
   1e780:	d801      	bhi.n	1e786 <_realloc_r+0x3a>
   1e782:	2110      	movs	r1, #16
   1e784:	9103      	str	r1, [sp, #12]
   1e786:	9a03      	ldr	r2, [sp, #12]
   1e788:	9d01      	ldr	r5, [sp, #4]
   1e78a:	42aa      	cmp	r2, r5
   1e78c:	bf2c      	ite	cs
   1e78e:	2300      	movcs	r3, #0
   1e790:	2301      	movcc	r3, #1
   1e792:	ea53 72d2 	orrs.w	r2, r3, r2, lsr #31
   1e796:	d004      	beq.n	1e7a2 <_realloc_r+0x56>
   1e798:	9802      	ldr	r0, [sp, #8]
   1e79a:	230c      	movs	r3, #12
   1e79c:	60c3      	str	r3, [r0, #12]
   1e79e:	2500      	movs	r5, #0
   1e7a0:	e17d      	b.n	1ea9e <_realloc_r+0x352>
   1e7a2:	9903      	ldr	r1, [sp, #12]
   1e7a4:	f024 0c03 	bic.w	ip, r4, #3	; 0x3
   1e7a8:	458c      	cmp	ip, r1
   1e7aa:	bfa4      	itt	ge
   1e7ac:	463c      	movge	r4, r7
   1e7ae:	4665      	movge	r5, ip
   1e7b0:	f280 814b 	bge.w	1ea4a <_realloc_r+0x2fe>
   1e7b4:	4abb      	ldr	r2, [pc, #748]	(1eaa4 <_realloc_r+0x358>)
   1e7b6:	eb07 010c 	add.w	r1, r7, ip
   1e7ba:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1e7be:	4571      	cmp	r1, lr
   1e7c0:	d007      	beq.n	1e7d2 <_realloc_r+0x86>
   1e7c2:	684b      	ldr	r3, [r1, #4]
   1e7c4:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1e7c8:	440b      	add	r3, r1
   1e7ca:	685b      	ldr	r3, [r3, #4]
   1e7cc:	f013 0f01 	tst.w	r3, #1	; 0x1
   1e7d0:	d128      	bne.n	1e824 <_realloc_r+0xd8>
   1e7d2:	684b      	ldr	r3, [r1, #4]
   1e7d4:	4571      	cmp	r1, lr
   1e7d6:	f023 0003 	bic.w	r0, r3, #3	; 0x3
   1e7da:	eb00 020c 	add.w	r2, r0, ip
   1e7de:	d118      	bne.n	1e812 <_realloc_r+0xc6>
   1e7e0:	9d03      	ldr	r5, [sp, #12]
   1e7e2:	f105 0310 	add.w	r3, r5, #16	; 0x10
   1e7e6:	429a      	cmp	r2, r3
   1e7e8:	db1e      	blt.n	1e828 <_realloc_r+0xdc>
   1e7ea:	1b52      	subs	r2, r2, r5
   1e7ec:	eb07 0305 	add.w	r3, r7, r5
   1e7f0:	48ac      	ldr	r0, [pc, #688]	(1eaa4 <_realloc_r+0x358>)
   1e7f2:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   1e7f6:	605a      	str	r2, [r3, #4]
   1e7f8:	6083      	str	r3, [r0, #8]
   1e7fa:	687b      	ldr	r3, [r7, #4]
   1e7fc:	9802      	ldr	r0, [sp, #8]
   1e7fe:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1e802:	ea45 0303 	orr.w	r3, r5, r3
   1e806:	607b      	str	r3, [r7, #4]
   1e808:	f7ff ff44 	bl	1e694 <__malloc_unlock>
   1e80c:	f107 0508 	add.w	r5, r7, #8	; 0x8
   1e810:	e145      	b.n	1ea9e <_realloc_r+0x352>
   1e812:	4615      	mov	r5, r2
   1e814:	9a03      	ldr	r2, [sp, #12]
   1e816:	4295      	cmp	r5, r2
   1e818:	db06      	blt.n	1e828 <_realloc_r+0xdc>
   1e81a:	68ca      	ldr	r2, [r1, #12]
   1e81c:	688b      	ldr	r3, [r1, #8]
   1e81e:	60da      	str	r2, [r3, #12]
   1e820:	6093      	str	r3, [r2, #8]
   1e822:	e0cc      	b.n	1e9be <_realloc_r+0x272>
   1e824:	2100      	movs	r1, #0
   1e826:	2000      	movs	r0, #0
   1e828:	f014 0f01 	tst.w	r4, #1	; 0x1
   1e82c:	f040 80af 	bne.w	1e98e <_realloc_r+0x242>
   1e830:	f856 3c08 	ldr.w	r3, [r6, #-8]
   1e834:	ebc3 0407 	rsb	r4, r3, r7
   1e838:	6863      	ldr	r3, [r4, #4]
   1e83a:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1e83e:	9304      	str	r3, [sp, #16]
   1e840:	2900      	cmp	r1, #0
   1e842:	d05f      	beq.n	1e904 <_realloc_r+0x1b8>
   1e844:	4571      	cmp	r1, lr
   1e846:	eb03 020c 	add.w	r2, r3, ip
   1e84a:	d151      	bne.n	1e8f0 <_realloc_r+0x1a4>
   1e84c:	9d03      	ldr	r5, [sp, #12]
   1e84e:	1812      	adds	r2, r2, r0
   1e850:	f105 0310 	add.w	r3, r5, #16	; 0x10
   1e854:	429a      	cmp	r2, r3
   1e856:	9205      	str	r2, [sp, #20]
   1e858:	db54      	blt.n	1e904 <_realloc_r+0x1b8>
   1e85a:	4625      	mov	r5, r4
   1e85c:	68e2      	ldr	r2, [r4, #12]
   1e85e:	f855 3f08 	ldr.w	r3, [r5, #8]!
   1e862:	60da      	str	r2, [r3, #12]
   1e864:	6093      	str	r3, [r2, #8]
   1e866:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   1e86a:	2a24      	cmp	r2, #36
   1e86c:	d82a      	bhi.n	1e8c4 <_realloc_r+0x178>
   1e86e:	2a13      	cmp	r2, #19
   1e870:	4630      	mov	r0, r6
   1e872:	46ac      	mov	ip, r5
   1e874:	d91a      	bls.n	1e8ac <_realloc_r+0x160>
   1e876:	6833      	ldr	r3, [r6, #0]
   1e878:	1d31      	adds	r1, r6, #4
   1e87a:	60a3      	str	r3, [r4, #8]
   1e87c:	6873      	ldr	r3, [r6, #4]
   1e87e:	1d08      	adds	r0, r1, #4
   1e880:	2a1b      	cmp	r2, #27
   1e882:	60e3      	str	r3, [r4, #12]
   1e884:	f104 0c10 	add.w	ip, r4, #16	; 0x10
   1e888:	d910      	bls.n	1e8ac <_realloc_r+0x160>
   1e88a:	684b      	ldr	r3, [r1, #4]
   1e88c:	1d01      	adds	r1, r0, #4
   1e88e:	6123      	str	r3, [r4, #16]
   1e890:	6843      	ldr	r3, [r0, #4]
   1e892:	1d08      	adds	r0, r1, #4
   1e894:	2a24      	cmp	r2, #36
   1e896:	6163      	str	r3, [r4, #20]
   1e898:	f104 0c18 	add.w	ip, r4, #24	; 0x18
   1e89c:	d106      	bne.n	1e8ac <_realloc_r+0x160>
   1e89e:	684b      	ldr	r3, [r1, #4]
   1e8a0:	f104 0c20 	add.w	ip, r4, #32	; 0x20
   1e8a4:	61a3      	str	r3, [r4, #24]
   1e8a6:	6843      	ldr	r3, [r0, #4]
   1e8a8:	3008      	adds	r0, #8
   1e8aa:	61e3      	str	r3, [r4, #28]
   1e8ac:	4601      	mov	r1, r0
   1e8ae:	f851 3b04 	ldr.w	r3, [r1], #4
   1e8b2:	4662      	mov	r2, ip
   1e8b4:	f842 3b04 	str.w	r3, [r2], #4
   1e8b8:	6843      	ldr	r3, [r0, #4]
   1e8ba:	f8cc 3004 	str.w	r3, [ip, #4]
   1e8be:	684b      	ldr	r3, [r1, #4]
   1e8c0:	6053      	str	r3, [r2, #4]
   1e8c2:	e003      	b.n	1e8cc <_realloc_r+0x180>
   1e8c4:	4628      	mov	r0, r5
   1e8c6:	4631      	mov	r1, r6
   1e8c8:	f7ff feba 	bl	1e640 <memmove>
   1e8cc:	9803      	ldr	r0, [sp, #12]
   1e8ce:	4975      	ldr	r1, [pc, #468]	(1eaa4 <_realloc_r+0x358>)
   1e8d0:	eb04 0300 	add.w	r3, r4, r0
   1e8d4:	608b      	str	r3, [r1, #8]
   1e8d6:	9905      	ldr	r1, [sp, #20]
   1e8d8:	ebc0 0201 	rsb	r2, r0, r1
   1e8dc:	f042 0201 	orr.w	r2, r2, #1	; 0x1
   1e8e0:	605a      	str	r2, [r3, #4]
   1e8e2:	6863      	ldr	r3, [r4, #4]
   1e8e4:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1e8e8:	ea40 0303 	orr.w	r3, r0, r3
   1e8ec:	6063      	str	r3, [r4, #4]
   1e8ee:	e0a8      	b.n	1ea42 <_realloc_r+0x2f6>
   1e8f0:	eb02 0500 	add.w	r5, r2, r0
   1e8f4:	9a03      	ldr	r2, [sp, #12]
   1e8f6:	4295      	cmp	r5, r2
   1e8f8:	db04      	blt.n	1e904 <_realloc_r+0x1b8>
   1e8fa:	68ca      	ldr	r2, [r1, #12]
   1e8fc:	688b      	ldr	r3, [r1, #8]
   1e8fe:	60da      	str	r2, [r3, #12]
   1e900:	6093      	str	r3, [r2, #8]
   1e902:	e005      	b.n	1e910 <_realloc_r+0x1c4>
   1e904:	9b04      	ldr	r3, [sp, #16]
   1e906:	9803      	ldr	r0, [sp, #12]
   1e908:	eb03 050c 	add.w	r5, r3, ip
   1e90c:	4285      	cmp	r5, r0
   1e90e:	db3e      	blt.n	1e98e <_realloc_r+0x242>
   1e910:	4620      	mov	r0, r4
   1e912:	68e2      	ldr	r2, [r4, #12]
   1e914:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1e918:	60da      	str	r2, [r3, #12]
   1e91a:	6093      	str	r3, [r2, #8]
   1e91c:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   1e920:	2a24      	cmp	r2, #36
   1e922:	d830      	bhi.n	1e986 <_realloc_r+0x23a>
   1e924:	2a13      	cmp	r2, #19
   1e926:	46b4      	mov	ip, r6
   1e928:	d921      	bls.n	1e96e <_realloc_r+0x222>
   1e92a:	6833      	ldr	r3, [r6, #0]
   1e92c:	f106 0104 	add.w	r1, r6, #4	; 0x4
   1e930:	60a3      	str	r3, [r4, #8]
   1e932:	6873      	ldr	r3, [r6, #4]
   1e934:	2a1b      	cmp	r2, #27
   1e936:	60e3      	str	r3, [r4, #12]
   1e938:	f104 0010 	add.w	r0, r4, #16	; 0x10
   1e93c:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1e940:	d915      	bls.n	1e96e <_realloc_r+0x222>
   1e942:	684b      	ldr	r3, [r1, #4]
   1e944:	2a24      	cmp	r2, #36
   1e946:	6123      	str	r3, [r4, #16]
   1e948:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1e94c:	f10c 0104 	add.w	r1, ip, #4	; 0x4
   1e950:	6163      	str	r3, [r4, #20]
   1e952:	f104 0018 	add.w	r0, r4, #24	; 0x18
   1e956:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1e95a:	d108      	bne.n	1e96e <_realloc_r+0x222>
   1e95c:	684b      	ldr	r3, [r1, #4]
   1e95e:	f104 0020 	add.w	r0, r4, #32	; 0x20
   1e962:	61a3      	str	r3, [r4, #24]
   1e964:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1e968:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   1e96c:	61e3      	str	r3, [r4, #28]
   1e96e:	4661      	mov	r1, ip
   1e970:	f851 3b04 	ldr.w	r3, [r1], #4
   1e974:	4602      	mov	r2, r0
   1e976:	f842 3b04 	str.w	r3, [r2], #4
   1e97a:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1e97e:	6043      	str	r3, [r0, #4]
   1e980:	684b      	ldr	r3, [r1, #4]
   1e982:	6053      	str	r3, [r2, #4]
   1e984:	e061      	b.n	1ea4a <_realloc_r+0x2fe>
   1e986:	4631      	mov	r1, r6
   1e988:	f7ff fe5a 	bl	1e640 <memmove>
   1e98c:	e05d      	b.n	1ea4a <_realloc_r+0x2fe>
   1e98e:	9802      	ldr	r0, [sp, #8]
   1e990:	9901      	ldr	r1, [sp, #4]
   1e992:	f8cd c000 	str.w	ip, [sp]
   1e996:	f7ff fbef 	bl	1e178 <_malloc_r>
   1e99a:	f8dd c000 	ldr.w	ip, [sp]
   1e99e:	4605      	mov	r5, r0
   1e9a0:	2800      	cmp	r0, #0
   1e9a2:	d04e      	beq.n	1ea42 <_realloc_r+0x2f6>
   1e9a4:	687b      	ldr	r3, [r7, #4]
   1e9a6:	f1a0 0208 	sub.w	r2, r0, #8	; 0x8
   1e9aa:	f023 0301 	bic.w	r3, r3, #1	; 0x1
   1e9ae:	443b      	add	r3, r7
   1e9b0:	429a      	cmp	r2, r3
   1e9b2:	d106      	bne.n	1e9c2 <_realloc_r+0x276>
   1e9b4:	6853      	ldr	r3, [r2, #4]
   1e9b6:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1e9ba:	eb03 050c 	add.w	r5, r3, ip
   1e9be:	463c      	mov	r4, r7
   1e9c0:	e043      	b.n	1ea4a <_realloc_r+0x2fe>
   1e9c2:	f1ac 0204 	sub.w	r2, ip, #4	; 0x4
   1e9c6:	2a24      	cmp	r2, #36
   1e9c8:	d834      	bhi.n	1ea34 <_realloc_r+0x2e8>
   1e9ca:	2a13      	cmp	r2, #19
   1e9cc:	4630      	mov	r0, r6
   1e9ce:	46ac      	mov	ip, r5
   1e9d0:	d924      	bls.n	1ea1c <_realloc_r+0x2d0>
   1e9d2:	46b6      	mov	lr, r6
   1e9d4:	f85e 3b04 	ldr.w	r3, [lr], #4
   1e9d8:	4629      	mov	r1, r5
   1e9da:	f841 3b04 	str.w	r3, [r1], #4
   1e9de:	6873      	ldr	r3, [r6, #4]
   1e9e0:	2a1b      	cmp	r2, #27
   1e9e2:	606b      	str	r3, [r5, #4]
   1e9e4:	f101 0c04 	add.w	ip, r1, #4	; 0x4
   1e9e8:	f10e 0004 	add.w	r0, lr, #4	; 0x4
   1e9ec:	d916      	bls.n	1ea1c <_realloc_r+0x2d0>
   1e9ee:	f8de 3004 	ldr.w	r3, [lr, #4]
   1e9f2:	f10c 0e04 	add.w	lr, ip, #4	; 0x4
   1e9f6:	604b      	str	r3, [r1, #4]
   1e9f8:	6843      	ldr	r3, [r0, #4]
   1e9fa:	1d01      	adds	r1, r0, #4
   1e9fc:	1d08      	adds	r0, r1, #4
   1e9fe:	2a24      	cmp	r2, #36
   1ea00:	f8cc 3004 	str.w	r3, [ip, #4]
   1ea04:	f10e 0c04 	add.w	ip, lr, #4	; 0x4
   1ea08:	d108      	bne.n	1ea1c <_realloc_r+0x2d0>
   1ea0a:	684b      	ldr	r3, [r1, #4]
   1ea0c:	f8ce 3004 	str.w	r3, [lr, #4]
   1ea10:	6843      	ldr	r3, [r0, #4]
   1ea12:	3008      	adds	r0, #8
   1ea14:	f8cc 3004 	str.w	r3, [ip, #4]
   1ea18:	f10c 0c08 	add.w	ip, ip, #8	; 0x8
   1ea1c:	4601      	mov	r1, r0
   1ea1e:	f851 3b04 	ldr.w	r3, [r1], #4
   1ea22:	4662      	mov	r2, ip
   1ea24:	f842 3b04 	str.w	r3, [r2], #4
   1ea28:	6843      	ldr	r3, [r0, #4]
   1ea2a:	f8cc 3004 	str.w	r3, [ip, #4]
   1ea2e:	684b      	ldr	r3, [r1, #4]
   1ea30:	6053      	str	r3, [r2, #4]
   1ea32:	e002      	b.n	1ea3a <_realloc_r+0x2ee>
   1ea34:	4631      	mov	r1, r6
   1ea36:	f7ff fe03 	bl	1e640 <memmove>
   1ea3a:	9802      	ldr	r0, [sp, #8]
   1ea3c:	4631      	mov	r1, r6
   1ea3e:	f000 fcd1 	bl	1f3e4 <_free_r>
   1ea42:	9802      	ldr	r0, [sp, #8]
   1ea44:	f7ff fe26 	bl	1e694 <__malloc_unlock>
   1ea48:	e029      	b.n	1ea9e <_realloc_r+0x352>
   1ea4a:	9903      	ldr	r1, [sp, #12]
   1ea4c:	6863      	ldr	r3, [r4, #4]
   1ea4e:	ebc1 0205 	rsb	r2, r1, r5
   1ea52:	2a0f      	cmp	r2, #15
   1ea54:	d913      	bls.n	1ea7e <_realloc_r+0x332>
   1ea56:	9d03      	ldr	r5, [sp, #12]
   1ea58:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1ea5c:	ea45 0303 	orr.w	r3, r5, r3
   1ea60:	6063      	str	r3, [r4, #4]
   1ea62:	4421      	add	r1, r4
   1ea64:	f042 0301 	orr.w	r3, r2, #1	; 0x1
   1ea68:	604b      	str	r3, [r1, #4]
   1ea6a:	440a      	add	r2, r1
   1ea6c:	6853      	ldr	r3, [r2, #4]
   1ea6e:	3108      	adds	r1, #8
   1ea70:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1ea74:	6053      	str	r3, [r2, #4]
   1ea76:	9802      	ldr	r0, [sp, #8]
   1ea78:	f000 fcb4 	bl	1f3e4 <_free_r>
   1ea7c:	e00a      	b.n	1ea94 <_realloc_r+0x348>
   1ea7e:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1ea82:	ea45 0303 	orr.w	r3, r5, r3
   1ea86:	6063      	str	r3, [r4, #4]
   1ea88:	eb04 0205 	add.w	r2, r4, r5
   1ea8c:	6853      	ldr	r3, [r2, #4]
   1ea8e:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1ea92:	6053      	str	r3, [r2, #4]
   1ea94:	9802      	ldr	r0, [sp, #8]
   1ea96:	f7ff fdfd 	bl	1e694 <__malloc_unlock>
   1ea9a:	f104 0508 	add.w	r5, r4, #8	; 0x8
   1ea9e:	4628      	mov	r0, r5
   1eaa0:	b007      	add	sp, #28
   1eaa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1eaa4:	20000138 	.word	0x20000138

0001eaa8 <_wrapup_reent>:
   1eaa8:	b570      	push	{r4, r5, r6, lr}
   1eaaa:	4606      	mov	r6, r0
   1eaac:	b908      	cbnz	r0, 1eab2 <_wrapup_reent+0xa>
   1eaae:	4b0a      	ldr	r3, [pc, #40]	(1ead8 <_wrapup_reent+0x30>)
   1eab0:	681e      	ldr	r6, [r3, #0]
   1eab2:	f106 0248 	add.w	r2, r6, #72	; 0x48
   1eab6:	6855      	ldr	r5, [r2, #4]
   1eab8:	1c6b      	adds	r3, r5, #1
   1eaba:	eb02 0483 	add.w	r4, r2, r3, lsl #2
   1eabe:	e001      	b.n	1eac4 <_wrapup_reent+0x1c>
   1eac0:	6863      	ldr	r3, [r4, #4]
   1eac2:	4798      	blx	r3
   1eac4:	3c04      	subs	r4, #4
   1eac6:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
   1eaca:	d5f9      	bpl.n	1eac0 <_wrapup_reent+0x18>
   1eacc:	6ab3      	ldr	r3, [r6, #40]
   1eace:	b10b      	cbz	r3, 1ead4 <_wrapup_reent+0x2c>
   1ead0:	4630      	mov	r0, r6
   1ead2:	4798      	blx	r3
   1ead4:	bd70      	pop	{r4, r5, r6, pc}
   1ead6:	46c0      	nop			(mov r8, r8)
   1ead8:	20000044 	.word	0x20000044

0001eadc <cleanup_glue>:
   1eadc:	b530      	push	{r4, r5, lr}
   1eade:	460d      	mov	r5, r1
   1eae0:	6809      	ldr	r1, [r1, #0]
   1eae2:	b081      	sub	sp, #4
   1eae4:	4604      	mov	r4, r0
   1eae6:	b109      	cbz	r1, 1eaec <cleanup_glue+0x10>
   1eae8:	f7ff fff8 	bl	1eadc <cleanup_glue>
   1eaec:	4620      	mov	r0, r4
   1eaee:	4629      	mov	r1, r5
   1eaf0:	f000 fc78 	bl	1f3e4 <_free_r>
   1eaf4:	b001      	add	sp, #4
   1eaf6:	bd30      	pop	{r4, r5, pc}

0001eaf8 <_reclaim_reent>:
   1eaf8:	4b2a      	ldr	r3, [pc, #168]	(1eba4 <_reclaim_reent+0xac>)
   1eafa:	b570      	push	{r4, r5, r6, lr}
   1eafc:	681b      	ldr	r3, [r3, #0]
   1eafe:	4605      	mov	r5, r0
   1eb00:	4298      	cmp	r0, r3
   1eb02:	d04d      	beq.n	1eba0 <_reclaim_reent+0xa8>
   1eb04:	6a43      	ldr	r3, [r0, #36]
   1eb06:	b1ab      	cbz	r3, 1eb34 <_reclaim_reent+0x3c>
   1eb08:	68db      	ldr	r3, [r3, #12]
   1eb0a:	b19b      	cbz	r3, 1eb34 <_reclaim_reent+0x3c>
   1eb0c:	2600      	movs	r6, #0
   1eb0e:	6a6b      	ldr	r3, [r5, #36]
   1eb10:	68db      	ldr	r3, [r3, #12]
   1eb12:	5999      	ldr	r1, [r3, r6]
   1eb14:	e004      	b.n	1eb20 <_reclaim_reent+0x28>
   1eb16:	680c      	ldr	r4, [r1, #0]
   1eb18:	4628      	mov	r0, r5
   1eb1a:	f000 fc63 	bl	1f3e4 <_free_r>
   1eb1e:	4621      	mov	r1, r4
   1eb20:	2900      	cmp	r1, #0
   1eb22:	d1f8      	bne.n	1eb16 <_reclaim_reent+0x1e>
   1eb24:	3604      	adds	r6, #4
   1eb26:	2e3c      	cmp	r6, #60
   1eb28:	d1f1      	bne.n	1eb0e <_reclaim_reent+0x16>
   1eb2a:	6a6b      	ldr	r3, [r5, #36]
   1eb2c:	4628      	mov	r0, r5
   1eb2e:	68d9      	ldr	r1, [r3, #12]
   1eb30:	f000 fc58 	bl	1f3e4 <_free_r>
   1eb34:	6a6b      	ldr	r3, [r5, #36]
   1eb36:	6819      	ldr	r1, [r3, #0]
   1eb38:	b111      	cbz	r1, 1eb40 <_reclaim_reent+0x48>
   1eb3a:	4628      	mov	r0, r5
   1eb3c:	f000 fc52 	bl	1f3e4 <_free_r>
   1eb40:	6969      	ldr	r1, [r5, #20]
   1eb42:	b111      	cbz	r1, 1eb4a <_reclaim_reent+0x52>
   1eb44:	4628      	mov	r0, r5
   1eb46:	f000 fc4d 	bl	1f3e4 <_free_r>
   1eb4a:	6a69      	ldr	r1, [r5, #36]
   1eb4c:	b111      	cbz	r1, 1eb54 <_reclaim_reent+0x5c>
   1eb4e:	4628      	mov	r0, r5
   1eb50:	f000 fc48 	bl	1f3e4 <_free_r>
   1eb54:	6ba9      	ldr	r1, [r5, #56]
   1eb56:	b111      	cbz	r1, 1eb5e <_reclaim_reent+0x66>
   1eb58:	4628      	mov	r0, r5
   1eb5a:	f000 fc43 	bl	1f3e4 <_free_r>
   1eb5e:	6be9      	ldr	r1, [r5, #60]
   1eb60:	b111      	cbz	r1, 1eb68 <_reclaim_reent+0x70>
   1eb62:	4628      	mov	r0, r5
   1eb64:	f000 fc3e 	bl	1f3e4 <_free_r>
   1eb68:	6c29      	ldr	r1, [r5, #64]
   1eb6a:	b111      	cbz	r1, 1eb72 <_reclaim_reent+0x7a>
   1eb6c:	4628      	mov	r0, r5
   1eb6e:	f000 fc39 	bl	1f3e4 <_free_r>
   1eb72:	6cab      	ldr	r3, [r5, #72]
   1eb74:	f8d3 1088 	ldr.w	r1, [r3, #136]
   1eb78:	b111      	cbz	r1, 1eb80 <_reclaim_reent+0x88>
   1eb7a:	4628      	mov	r0, r5
   1eb7c:	f000 fc32 	bl	1f3e4 <_free_r>
   1eb80:	6b69      	ldr	r1, [r5, #52]
   1eb82:	b111      	cbz	r1, 1eb8a <_reclaim_reent+0x92>
   1eb84:	4628      	mov	r0, r5
   1eb86:	f000 fc2d 	bl	1f3e4 <_free_r>
   1eb8a:	69ab      	ldr	r3, [r5, #24]
   1eb8c:	b143      	cbz	r3, 1eba0 <_reclaim_reent+0xa8>
   1eb8e:	6aab      	ldr	r3, [r5, #40]
   1eb90:	4628      	mov	r0, r5
   1eb92:	4798      	blx	r3
   1eb94:	f8d5 10d8 	ldr.w	r1, [r5, #216]
   1eb98:	b111      	cbz	r1, 1eba0 <_reclaim_reent+0xa8>
   1eb9a:	4628      	mov	r0, r5
   1eb9c:	f7ff ff9e 	bl	1eadc <cleanup_glue>
   1eba0:	bd70      	pop	{r4, r5, r6, pc}
   1eba2:	46c0      	nop			(mov r8, r8)
   1eba4:	20000044 	.word	0x20000044

0001eba8 <_sbrk_r>:
   1eba8:	b530      	push	{r4, r5, lr}
   1ebaa:	4c08      	ldr	r4, [pc, #32]	(1ebcc <_sbrk_r+0x24>)
   1ebac:	2300      	movs	r3, #0
   1ebae:	b081      	sub	sp, #4
   1ebb0:	4605      	mov	r5, r0
   1ebb2:	4608      	mov	r0, r1
   1ebb4:	6023      	str	r3, [r4, #0]
   1ebb6:	f7f6 fc01 	bl	153bc <_sbrk>
   1ebba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ebbe:	d102      	bne.n	1ebc6 <_sbrk_r+0x1e>
   1ebc0:	6823      	ldr	r3, [r4, #0]
   1ebc2:	b103      	cbz	r3, 1ebc6 <_sbrk_r+0x1e>
   1ebc4:	60eb      	str	r3, [r5, #12]
   1ebc6:	b001      	add	sp, #4
   1ebc8:	bd30      	pop	{r4, r5, pc}
   1ebca:	46c0      	nop			(mov r8, r8)
   1ebcc:	20000678 	.word	0x20000678

0001ebd0 <_raise_r>:
   1ebd0:	b530      	push	{r4, r5, lr}
   1ebd2:	291f      	cmp	r1, #31
   1ebd4:	b081      	sub	sp, #4
   1ebd6:	4604      	mov	r4, r0
   1ebd8:	460d      	mov	r5, r1
   1ebda:	d904      	bls.n	1ebe6 <_raise_r+0x16>
   1ebdc:	2316      	movs	r3, #22
   1ebde:	60c3      	str	r3, [r0, #12]
   1ebe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ebe4:	e01c      	b.n	1ec20 <_raise_r+0x50>
   1ebe6:	6c41      	ldr	r1, [r0, #68]
   1ebe8:	b111      	cbz	r1, 1ebf0 <_raise_r+0x20>
   1ebea:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
   1ebee:	b942      	cbnz	r2, 1ec02 <_raise_r+0x32>
   1ebf0:	4620      	mov	r0, r4
   1ebf2:	f000 f899 	bl	1ed28 <_getpid_r>
   1ebf6:	462a      	mov	r2, r5
   1ebf8:	4601      	mov	r1, r0
   1ebfa:	4620      	mov	r0, r4
   1ebfc:	f000 f89a 	bl	1ed34 <_kill_r>
   1ec00:	e00e      	b.n	1ec20 <_raise_r+0x50>
   1ec02:	2a01      	cmp	r2, #1
   1ec04:	d00b      	beq.n	1ec1e <_raise_r+0x4e>
   1ec06:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1ec0a:	d103      	bne.n	1ec14 <_raise_r+0x44>
   1ec0c:	2316      	movs	r3, #22
   1ec0e:	60c3      	str	r3, [r0, #12]
   1ec10:	2001      	movs	r0, #1
   1ec12:	e005      	b.n	1ec20 <_raise_r+0x50>
   1ec14:	2300      	movs	r3, #0
   1ec16:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
   1ec1a:	4628      	mov	r0, r5
   1ec1c:	4790      	blx	r2
   1ec1e:	2000      	movs	r0, #0
   1ec20:	b001      	add	sp, #4
   1ec22:	bd30      	pop	{r4, r5, pc}

0001ec24 <raise>:
   1ec24:	b500      	push	{lr}
   1ec26:	4b04      	ldr	r3, [pc, #16]	(1ec38 <raise+0x14>)
   1ec28:	4601      	mov	r1, r0
   1ec2a:	b081      	sub	sp, #4
   1ec2c:	6818      	ldr	r0, [r3, #0]
   1ec2e:	f7ff ffcf 	bl	1ebd0 <_raise_r>
   1ec32:	b001      	add	sp, #4
   1ec34:	bd00      	pop	{pc}
   1ec36:	46c0      	nop			(mov r8, r8)
   1ec38:	20000044 	.word	0x20000044

0001ec3c <_init_signal_r>:
   1ec3c:	6c43      	ldr	r3, [r0, #68]
   1ec3e:	b510      	push	{r4, lr}
   1ec40:	4604      	mov	r4, r0
   1ec42:	b963      	cbnz	r3, 1ec5e <_init_signal_r+0x22>
   1ec44:	2180      	movs	r1, #128
   1ec46:	f7ff fa97 	bl	1e178 <_malloc_r>
   1ec4a:	6460      	str	r0, [r4, #68]
   1ec4c:	b908      	cbnz	r0, 1ec52 <_init_signal_r+0x16>
   1ec4e:	3801      	subs	r0, #1
   1ec50:	e006      	b.n	1ec60 <_init_signal_r+0x24>
   1ec52:	2300      	movs	r3, #0
   1ec54:	2200      	movs	r2, #0
   1ec56:	50c2      	str	r2, [r0, r3]
   1ec58:	3304      	adds	r3, #4
   1ec5a:	2b80      	cmp	r3, #128
   1ec5c:	d1fb      	bne.n	1ec56 <_init_signal_r+0x1a>
   1ec5e:	2000      	movs	r0, #0
   1ec60:	bd10      	pop	{r4, pc}
   1ec62:	46c0      	nop			(mov r8, r8)

0001ec64 <_init_signal>:
   1ec64:	b500      	push	{lr}
   1ec66:	4b03      	ldr	r3, [pc, #12]	(1ec74 <_init_signal+0x10>)
   1ec68:	b081      	sub	sp, #4
   1ec6a:	6818      	ldr	r0, [r3, #0]
   1ec6c:	f7ff ffe6 	bl	1ec3c <_init_signal_r>
   1ec70:	b001      	add	sp, #4
   1ec72:	bd00      	pop	{pc}
   1ec74:	20000044 	.word	0x20000044

0001ec78 <__sigtramp_r>:
   1ec78:	b530      	push	{r4, r5, lr}
   1ec7a:	291f      	cmp	r1, #31
   1ec7c:	b081      	sub	sp, #4
   1ec7e:	4604      	mov	r4, r0
   1ec80:	460d      	mov	r5, r1
   1ec82:	d81a      	bhi.n	1ecba <__sigtramp_r+0x42>
   1ec84:	6c43      	ldr	r3, [r0, #68]
   1ec86:	b913      	cbnz	r3, 1ec8e <__sigtramp_r+0x16>
   1ec88:	f7ff ffd8 	bl	1ec3c <_init_signal_r>
   1ec8c:	b9a8      	cbnz	r0, 1ecba <__sigtramp_r+0x42>
   1ec8e:	6c60      	ldr	r0, [r4, #68]
   1ec90:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   1ec94:	b90a      	cbnz	r2, 1ec9a <__sigtramp_r+0x22>
   1ec96:	2001      	movs	r0, #1
   1ec98:	e011      	b.n	1ecbe <__sigtramp_r+0x46>
   1ec9a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1ec9e:	d101      	bne.n	1eca4 <__sigtramp_r+0x2c>
   1eca0:	2002      	movs	r0, #2
   1eca2:	e00c      	b.n	1ecbe <__sigtramp_r+0x46>
   1eca4:	2a01      	cmp	r2, #1
   1eca6:	d101      	bne.n	1ecac <__sigtramp_r+0x34>
   1eca8:	2003      	movs	r0, #3
   1ecaa:	e008      	b.n	1ecbe <__sigtramp_r+0x46>
   1ecac:	2300      	movs	r3, #0
   1ecae:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   1ecb2:	4628      	mov	r0, r5
   1ecb4:	4790      	blx	r2
   1ecb6:	2000      	movs	r0, #0
   1ecb8:	e001      	b.n	1ecbe <__sigtramp_r+0x46>
   1ecba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ecbe:	b001      	add	sp, #4
   1ecc0:	bd30      	pop	{r4, r5, pc}
   1ecc2:	46c0      	nop			(mov r8, r8)

0001ecc4 <__sigtramp>:
   1ecc4:	b500      	push	{lr}
   1ecc6:	4b04      	ldr	r3, [pc, #16]	(1ecd8 <__sigtramp+0x14>)
   1ecc8:	4601      	mov	r1, r0
   1ecca:	b081      	sub	sp, #4
   1eccc:	6818      	ldr	r0, [r3, #0]
   1ecce:	f7ff ffd3 	bl	1ec78 <__sigtramp_r>
   1ecd2:	b001      	add	sp, #4
   1ecd4:	bd00      	pop	{pc}
   1ecd6:	46c0      	nop			(mov r8, r8)
   1ecd8:	20000044 	.word	0x20000044

0001ecdc <_signal_r>:
   1ecdc:	291f      	cmp	r1, #31
   1ecde:	b570      	push	{r4, r5, r6, lr}
   1ece0:	4604      	mov	r4, r0
   1ece2:	460d      	mov	r5, r1
   1ece4:	4616      	mov	r6, r2
   1ece6:	d902      	bls.n	1ecee <_signal_r+0x12>
   1ece8:	2316      	movs	r3, #22
   1ecea:	60c3      	str	r3, [r0, #12]
   1ecec:	e004      	b.n	1ecf8 <_signal_r+0x1c>
   1ecee:	6c43      	ldr	r3, [r0, #68]
   1ecf0:	b92b      	cbnz	r3, 1ecfe <_signal_r+0x22>
   1ecf2:	f7ff ffa3 	bl	1ec3c <_init_signal_r>
   1ecf6:	b110      	cbz	r0, 1ecfe <_signal_r+0x22>
   1ecf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ecfc:	e004      	b.n	1ed08 <_signal_r+0x2c>
   1ecfe:	6c63      	ldr	r3, [r4, #68]
   1ed00:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1ed04:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
   1ed08:	bd70      	pop	{r4, r5, r6, pc}
   1ed0a:	46c0      	nop			(mov r8, r8)

0001ed0c <signal>:
   1ed0c:	b500      	push	{lr}
   1ed0e:	4b05      	ldr	r3, [pc, #20]	(1ed24 <signal+0x18>)
   1ed10:	4684      	mov	ip, r0
   1ed12:	460a      	mov	r2, r1
   1ed14:	b081      	sub	sp, #4
   1ed16:	6818      	ldr	r0, [r3, #0]
   1ed18:	4661      	mov	r1, ip
   1ed1a:	f7ff ffdf 	bl	1ecdc <_signal_r>
   1ed1e:	b001      	add	sp, #4
   1ed20:	bd00      	pop	{pc}
   1ed22:	46c0      	nop			(mov r8, r8)
   1ed24:	20000044 	.word	0x20000044

0001ed28 <_getpid_r>:
   1ed28:	b500      	push	{lr}
   1ed2a:	b081      	sub	sp, #4
   1ed2c:	f7f6 fae0 	bl	152f0 <_getpid>
   1ed30:	b001      	add	sp, #4
   1ed32:	bd00      	pop	{pc}

0001ed34 <_kill_r>:
   1ed34:	b530      	push	{r4, r5, lr}
   1ed36:	4c08      	ldr	r4, [pc, #32]	(1ed58 <_kill_r+0x24>)
   1ed38:	2300      	movs	r3, #0
   1ed3a:	b081      	sub	sp, #4
   1ed3c:	4605      	mov	r5, r0
   1ed3e:	4608      	mov	r0, r1
   1ed40:	4611      	mov	r1, r2
   1ed42:	6023      	str	r3, [r4, #0]
   1ed44:	f7f6 fae8 	bl	15318 <_kill>
   1ed48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ed4c:	d102      	bne.n	1ed54 <_kill_r+0x20>
   1ed4e:	6823      	ldr	r3, [r4, #0]
   1ed50:	b103      	cbz	r3, 1ed54 <_kill_r+0x20>
   1ed52:	60eb      	str	r3, [r5, #12]
   1ed54:	b001      	add	sp, #4
   1ed56:	bd30      	pop	{r4, r5, pc}
   1ed58:	20000678 	.word	0x20000678

0001ed5c <strcmp>:
   1ed5c:	b530      	push	{r4, r5, lr}
   1ed5e:	468c      	mov	ip, r1
   1ed60:	2200      	movs	r2, #0
   1ed62:	5c81      	ldrb	r1, [r0, r2]
   1ed64:	eb00 0402 	add.w	r4, r0, r2
   1ed68:	eb0c 0502 	add.w	r5, ip, r2
   1ed6c:	b121      	cbz	r1, 1ed78 <strcmp+0x1c>
   1ed6e:	f81c 3002 	ldrb.w	r3, [ip, r2]
   1ed72:	3201      	adds	r2, #1
   1ed74:	4299      	cmp	r1, r3
   1ed76:	d0f4      	beq.n	1ed62 <strcmp+0x6>
   1ed78:	7820      	ldrb	r0, [r4, #0]
   1ed7a:	782b      	ldrb	r3, [r5, #0]
   1ed7c:	1ac0      	subs	r0, r0, r3
   1ed7e:	bd30      	pop	{r4, r5, pc}

0001ed80 <strcpy>:
   1ed80:	2200      	movs	r2, #0
   1ed82:	5c8b      	ldrb	r3, [r1, r2]
   1ed84:	5483      	strb	r3, [r0, r2]
   1ed86:	3201      	adds	r2, #1
   1ed88:	2b00      	cmp	r3, #0
   1ed8a:	d1fa      	bne.n	1ed82 <strcpy+0x2>
   1ed8c:	4770      	bx	lr
   1ed8e:	46c0      	nop			(mov r8, r8)

0001ed90 <strlen>:
   1ed90:	4602      	mov	r2, r0
   1ed92:	e000      	b.n	1ed96 <strlen+0x6>
   1ed94:	3001      	adds	r0, #1
   1ed96:	7803      	ldrb	r3, [r0, #0]
   1ed98:	2b00      	cmp	r3, #0
   1ed9a:	d1fb      	bne.n	1ed94 <strlen+0x4>
   1ed9c:	1a80      	subs	r0, r0, r2
   1ed9e:	4770      	bx	lr

0001eda0 <strncmp>:
   1eda0:	b570      	push	{r4, r5, r6, lr}
   1eda2:	4604      	mov	r4, r0
   1eda4:	4608      	mov	r0, r1
   1eda6:	b90a      	cbnz	r2, 1edac <strncmp+0xc>
   1eda8:	2000      	movs	r0, #0
   1edaa:	e017      	b.n	1eddc <strncmp+0x3c>
   1edac:	f04f 0c00 	mov.w	ip, #0	; 0x0
   1edb0:	e005      	b.n	1edbe <strncmp+0x1e>
   1edb2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   1edb6:	d00d      	beq.n	1edd4 <strncmp+0x34>
   1edb8:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
   1edbc:	b151      	cbz	r1, 1edd4 <strncmp+0x34>
   1edbe:	eb04 050c 	add.w	r5, r4, ip
   1edc2:	eb00 060c 	add.w	r6, r0, ip
   1edc6:	b12a      	cbz	r2, 1edd4 <strncmp+0x34>
   1edc8:	f814 300c 	ldrb.w	r3, [r4, ip]
   1edcc:	f810 100c 	ldrb.w	r1, [r0, ip]
   1edd0:	4299      	cmp	r1, r3
   1edd2:	d0ee      	beq.n	1edb2 <strncmp+0x12>
   1edd4:	782a      	ldrb	r2, [r5, #0]
   1edd6:	7833      	ldrb	r3, [r6, #0]
   1edd8:	ebc3 0002 	rsb	r0, r3, r2
   1eddc:	bd70      	pop	{r4, r5, r6, pc}
   1edde:	46c0      	nop			(mov r8, r8)

0001ede0 <write>:
   1ede0:	b500      	push	{lr}
   1ede2:	4613      	mov	r3, r2
   1ede4:	4a05      	ldr	r2, [pc, #20]	(1edfc <write+0x1c>)
   1ede6:	4684      	mov	ip, r0
   1ede8:	468e      	mov	lr, r1
   1edea:	b081      	sub	sp, #4
   1edec:	6810      	ldr	r0, [r2, #0]
   1edee:	4661      	mov	r1, ip
   1edf0:	4672      	mov	r2, lr
   1edf2:	f000 f879 	bl	1eee8 <_write_r>
   1edf6:	b001      	add	sp, #4
   1edf8:	bd00      	pop	{pc}
   1edfa:	46c0      	nop			(mov r8, r8)
   1edfc:	20000044 	.word	0x20000044

0001ee00 <__swbuf_r>:
   1ee00:	b570      	push	{r4, r5, r6, lr}
   1ee02:	4606      	mov	r6, r0
   1ee04:	460d      	mov	r5, r1
   1ee06:	4614      	mov	r4, r2
   1ee08:	b118      	cbz	r0, 1ee12 <__swbuf_r+0x12>
   1ee0a:	6983      	ldr	r3, [r0, #24]
   1ee0c:	b90b      	cbnz	r3, 1ee12 <__swbuf_r+0x12>
   1ee0e:	f000 fa63 	bl	1f2d8 <__sinit>
   1ee12:	4b2b      	ldr	r3, [pc, #172]	(1eec0 <__swbuf_r+0xc0>)
   1ee14:	429c      	cmp	r4, r3
   1ee16:	bf08      	it	eq
   1ee18:	6834      	ldreq	r4, [r6, #0]
   1ee1a:	d008      	beq.n	1ee2e <__swbuf_r+0x2e>
   1ee1c:	4b29      	ldr	r3, [pc, #164]	(1eec4 <__swbuf_r+0xc4>)
   1ee1e:	429c      	cmp	r4, r3
   1ee20:	bf08      	it	eq
   1ee22:	6874      	ldreq	r4, [r6, #4]
   1ee24:	d003      	beq.n	1ee2e <__swbuf_r+0x2e>
   1ee26:	4b28      	ldr	r3, [pc, #160]	(1eec8 <__swbuf_r+0xc8>)
   1ee28:	429c      	cmp	r4, r3
   1ee2a:	bf08      	it	eq
   1ee2c:	68b4      	ldreq	r4, [r6, #8]
   1ee2e:	69a3      	ldr	r3, [r4, #24]
   1ee30:	60a3      	str	r3, [r4, #8]
   1ee32:	89a3      	ldrh	r3, [r4, #12]
   1ee34:	f013 0f08 	tst.w	r3, #8	; 0x8
   1ee38:	d001      	beq.n	1ee3e <__swbuf_r+0x3e>
   1ee3a:	6923      	ldr	r3, [r4, #16]
   1ee3c:	b95b      	cbnz	r3, 1ee56 <__swbuf_r+0x56>
   1ee3e:	4630      	mov	r0, r6
   1ee40:	4621      	mov	r1, r4
   1ee42:	f000 f867 	bl	1ef14 <__swsetup_r>
   1ee46:	b130      	cbz	r0, 1ee56 <__swbuf_r+0x56>
   1ee48:	89a3      	ldrh	r3, [r4, #12]
   1ee4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ee4e:	81a3      	strh	r3, [r4, #12]
   1ee50:	2309      	movs	r3, #9
   1ee52:	60f3      	str	r3, [r6, #12]
   1ee54:	e030      	b.n	1eeb8 <__swbuf_r+0xb8>
   1ee56:	89a3      	ldrh	r3, [r4, #12]
   1ee58:	6922      	ldr	r2, [r4, #16]
   1ee5a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1ee5e:	bf01      	itttt	eq
   1ee60:	f443 5300 	orreq.w	r3, r3, #8192	; 0x2000
   1ee64:	81a3      	strheq	r3, [r4, #12]
   1ee66:	6e63      	ldreq	r3, [r4, #100]
   1ee68:	f423 5300 	biceq.w	r3, r3, #8192	; 0x2000
   1ee6c:	bf08      	it	eq
   1ee6e:	6663      	streq	r3, [r4, #100]
   1ee70:	6823      	ldr	r3, [r4, #0]
   1ee72:	ebc2 0203 	rsb	r2, r2, r3
   1ee76:	6963      	ldr	r3, [r4, #20]
   1ee78:	429a      	cmp	r2, r3
   1ee7a:	db05      	blt.n	1ee88 <__swbuf_r+0x88>
   1ee7c:	4630      	mov	r0, r6
   1ee7e:	4621      	mov	r1, r4
   1ee80:	f000 f8ba 	bl	1eff8 <_fflush_r>
   1ee84:	b9c0      	cbnz	r0, 1eeb8 <__swbuf_r+0xb8>
   1ee86:	2200      	movs	r2, #0
   1ee88:	68a3      	ldr	r3, [r4, #8]
   1ee8a:	b2ed      	uxtb	r5, r5
   1ee8c:	3b01      	subs	r3, #1
   1ee8e:	60a3      	str	r3, [r4, #8]
   1ee90:	6823      	ldr	r3, [r4, #0]
   1ee92:	3201      	adds	r2, #1
   1ee94:	f803 5b01 	strb.w	r5, [r3], #1
   1ee98:	6023      	str	r3, [r4, #0]
   1ee9a:	6963      	ldr	r3, [r4, #20]
   1ee9c:	429a      	cmp	r2, r3
   1ee9e:	d006      	beq.n	1eeae <__swbuf_r+0xae>
   1eea0:	7b23      	ldrb	r3, [r4, #12]
   1eea2:	2d0a      	cmp	r5, #10
   1eea4:	bf14      	ite	ne
   1eea6:	2300      	movne	r3, #0
   1eea8:	f003 0301 	andeq.w	r3, r3, #1	; 0x1
   1eeac:	b133      	cbz	r3, 1eebc <__swbuf_r+0xbc>
   1eeae:	4630      	mov	r0, r6
   1eeb0:	4621      	mov	r1, r4
   1eeb2:	f000 f8a1 	bl	1eff8 <_fflush_r>
   1eeb6:	b108      	cbz	r0, 1eebc <__swbuf_r+0xbc>
   1eeb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1eebc:	4628      	mov	r0, r5
   1eebe:	bd70      	pop	{r4, r5, r6, pc}
   1eec0:	00021328 	.word	0x00021328
   1eec4:	00021348 	.word	0x00021348
   1eec8:	00021368 	.word	0x00021368

0001eecc <__swbuf>:
   1eecc:	b500      	push	{lr}
   1eece:	4b05      	ldr	r3, [pc, #20]	(1eee4 <__swbuf+0x18>)
   1eed0:	4684      	mov	ip, r0
   1eed2:	460a      	mov	r2, r1
   1eed4:	b081      	sub	sp, #4
   1eed6:	6818      	ldr	r0, [r3, #0]
   1eed8:	4661      	mov	r1, ip
   1eeda:	f7ff ff91 	bl	1ee00 <__swbuf_r>
   1eede:	b001      	add	sp, #4
   1eee0:	bd00      	pop	{pc}
   1eee2:	46c0      	nop			(mov r8, r8)
   1eee4:	20000044 	.word	0x20000044

0001eee8 <_write_r>:
   1eee8:	b530      	push	{r4, r5, lr}
   1eeea:	4c09      	ldr	r4, [pc, #36]	(1ef10 <_write_r+0x28>)
   1eeec:	4605      	mov	r5, r0
   1eeee:	2000      	movs	r0, #0
   1eef0:	6020      	str	r0, [r4, #0]
   1eef2:	b081      	sub	sp, #4
   1eef4:	4608      	mov	r0, r1
   1eef6:	4611      	mov	r1, r2
   1eef8:	461a      	mov	r2, r3
   1eefa:	f7f6 fac1 	bl	15480 <_write>
   1eefe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ef02:	d102      	bne.n	1ef0a <_write_r+0x22>
   1ef04:	6823      	ldr	r3, [r4, #0]
   1ef06:	b103      	cbz	r3, 1ef0a <_write_r+0x22>
   1ef08:	60eb      	str	r3, [r5, #12]
   1ef0a:	b001      	add	sp, #4
   1ef0c:	bd30      	pop	{r4, r5, pc}
   1ef0e:	46c0      	nop			(mov r8, r8)
   1ef10:	20000678 	.word	0x20000678

0001ef14 <__swsetup_r>:
   1ef14:	b530      	push	{r4, r5, lr}
   1ef16:	4b34      	ldr	r3, [pc, #208]	(1efe8 <__swsetup_r+0xd4>)
   1ef18:	4605      	mov	r5, r0
   1ef1a:	6818      	ldr	r0, [r3, #0]
   1ef1c:	b081      	sub	sp, #4
   1ef1e:	460c      	mov	r4, r1
   1ef20:	b118      	cbz	r0, 1ef2a <__swsetup_r+0x16>
   1ef22:	6983      	ldr	r3, [r0, #24]
   1ef24:	b90b      	cbnz	r3, 1ef2a <__swsetup_r+0x16>
   1ef26:	f000 f9d7 	bl	1f2d8 <__sinit>
   1ef2a:	4b30      	ldr	r3, [pc, #192]	(1efec <__swsetup_r+0xd8>)
   1ef2c:	429c      	cmp	r4, r3
   1ef2e:	d103      	bne.n	1ef38 <__swsetup_r+0x24>
   1ef30:	4b2d      	ldr	r3, [pc, #180]	(1efe8 <__swsetup_r+0xd4>)
   1ef32:	681b      	ldr	r3, [r3, #0]
   1ef34:	681c      	ldr	r4, [r3, #0]
   1ef36:	e00c      	b.n	1ef52 <__swsetup_r+0x3e>
   1ef38:	4b2d      	ldr	r3, [pc, #180]	(1eff0 <__swsetup_r+0xdc>)
   1ef3a:	429c      	cmp	r4, r3
   1ef3c:	d103      	bne.n	1ef46 <__swsetup_r+0x32>
   1ef3e:	4b2a      	ldr	r3, [pc, #168]	(1efe8 <__swsetup_r+0xd4>)
   1ef40:	681b      	ldr	r3, [r3, #0]
   1ef42:	685c      	ldr	r4, [r3, #4]
   1ef44:	e005      	b.n	1ef52 <__swsetup_r+0x3e>
   1ef46:	4b2b      	ldr	r3, [pc, #172]	(1eff4 <__swsetup_r+0xe0>)
   1ef48:	429c      	cmp	r4, r3
   1ef4a:	bf02      	ittt	eq
   1ef4c:	4b26      	ldreq	r3, [pc, #152]	(1efe8 <__swsetup_r+0xd4>)
   1ef4e:	681b      	ldreq	r3, [r3, #0]
   1ef50:	689c      	ldreq	r4, [r3, #8]
   1ef52:	89a3      	ldrh	r3, [r4, #12]
   1ef54:	f013 0f08 	tst.w	r3, #8	; 0x8
   1ef58:	d11c      	bne.n	1ef94 <__swsetup_r+0x80>
   1ef5a:	f013 0f10 	tst.w	r3, #16	; 0x10
   1ef5e:	d03c      	beq.n	1efda <__swsetup_r+0xc6>
   1ef60:	f013 0f04 	tst.w	r3, #4	; 0x4
   1ef64:	d012      	beq.n	1ef8c <__swsetup_r+0x78>
   1ef66:	6b61      	ldr	r1, [r4, #52]
   1ef68:	b141      	cbz	r1, 1ef7c <__swsetup_r+0x68>
   1ef6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1ef6e:	4299      	cmp	r1, r3
   1ef70:	d002      	beq.n	1ef78 <__swsetup_r+0x64>
   1ef72:	4628      	mov	r0, r5
   1ef74:	f000 fa36 	bl	1f3e4 <_free_r>
   1ef78:	2300      	movs	r3, #0
   1ef7a:	6363      	str	r3, [r4, #52]
   1ef7c:	89a3      	ldrh	r3, [r4, #12]
   1ef7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1ef82:	81a3      	strh	r3, [r4, #12]
   1ef84:	2300      	movs	r3, #0
   1ef86:	6063      	str	r3, [r4, #4]
   1ef88:	6923      	ldr	r3, [r4, #16]
   1ef8a:	6023      	str	r3, [r4, #0]
   1ef8c:	89a3      	ldrh	r3, [r4, #12]
   1ef8e:	f043 0308 	orr.w	r3, r3, #8	; 0x8
   1ef92:	81a3      	strh	r3, [r4, #12]
   1ef94:	6923      	ldr	r3, [r4, #16]
   1ef96:	b94b      	cbnz	r3, 1efac <__swsetup_r+0x98>
   1ef98:	89a3      	ldrh	r3, [r4, #12]
   1ef9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
   1ef9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1efa2:	d003      	beq.n	1efac <__swsetup_r+0x98>
   1efa4:	4628      	mov	r0, r5
   1efa6:	4621      	mov	r1, r4
   1efa8:	f000 fb36 	bl	1f618 <__smakebuf_r>
   1efac:	89a3      	ldrh	r3, [r4, #12]
   1efae:	f013 0f01 	tst.w	r3, #1	; 0x1
   1efb2:	d006      	beq.n	1efc2 <__swsetup_r+0xae>
   1efb4:	2300      	movs	r3, #0
   1efb6:	60a3      	str	r3, [r4, #8]
   1efb8:	6963      	ldr	r3, [r4, #20]
   1efba:	f1c3 0300 	rsb	r3, r3, #0	; 0x0
   1efbe:	61a3      	str	r3, [r4, #24]
   1efc0:	e005      	b.n	1efce <__swsetup_r+0xba>
   1efc2:	f013 0f02 	tst.w	r3, #2	; 0x2
   1efc6:	bf0c      	ite	eq
   1efc8:	6963      	ldreq	r3, [r4, #20]
   1efca:	2300      	movne	r3, #0
   1efcc:	60a3      	str	r3, [r4, #8]
   1efce:	6923      	ldr	r3, [r4, #16]
   1efd0:	b933      	cbnz	r3, 1efe0 <__swsetup_r+0xcc>
   1efd2:	89a3      	ldrh	r3, [r4, #12]
   1efd4:	f013 0f80 	tst.w	r3, #128	; 0x80
   1efd8:	d002      	beq.n	1efe0 <__swsetup_r+0xcc>
   1efda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1efde:	e000      	b.n	1efe2 <__swsetup_r+0xce>
   1efe0:	2000      	movs	r0, #0
   1efe2:	b001      	add	sp, #4
   1efe4:	bd30      	pop	{r4, r5, pc}
   1efe6:	46c0      	nop			(mov r8, r8)
   1efe8:	20000044 	.word	0x20000044
   1efec:	00021328 	.word	0x00021328
   1eff0:	00021348 	.word	0x00021348
   1eff4:	00021368 	.word	0x00021368

0001eff8 <_fflush_r>:
   1eff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1effa:	690b      	ldr	r3, [r1, #16]
   1effc:	b083      	sub	sp, #12
   1effe:	9001      	str	r0, [sp, #4]
   1f000:	460d      	mov	r5, r1
   1f002:	2b00      	cmp	r3, #0
   1f004:	f000 808c 	beq.w	1f120 <_fflush_r+0x128>
   1f008:	b118      	cbz	r0, 1f012 <_fflush_r+0x1a>
   1f00a:	6983      	ldr	r3, [r0, #24]
   1f00c:	b90b      	cbnz	r3, 1f012 <_fflush_r+0x1a>
   1f00e:	f000 f963 	bl	1f2d8 <__sinit>
   1f012:	4b45      	ldr	r3, [pc, #276]	(1f128 <_fflush_r+0x130>)
   1f014:	429d      	cmp	r5, r3
   1f016:	d102      	bne.n	1f01e <_fflush_r+0x26>
   1f018:	9a01      	ldr	r2, [sp, #4]
   1f01a:	6815      	ldr	r5, [r2, #0]
   1f01c:	e00a      	b.n	1f034 <_fflush_r+0x3c>
   1f01e:	4b43      	ldr	r3, [pc, #268]	(1f12c <_fflush_r+0x134>)
   1f020:	429d      	cmp	r5, r3
   1f022:	d102      	bne.n	1f02a <_fflush_r+0x32>
   1f024:	9b01      	ldr	r3, [sp, #4]
   1f026:	685d      	ldr	r5, [r3, #4]
   1f028:	e004      	b.n	1f034 <_fflush_r+0x3c>
   1f02a:	4b41      	ldr	r3, [pc, #260]	(1f130 <_fflush_r+0x138>)
   1f02c:	429d      	cmp	r5, r3
   1f02e:	bf04      	itt	eq
   1f030:	9a01      	ldreq	r2, [sp, #4]
   1f032:	6895      	ldreq	r5, [r2, #8]
   1f034:	89ab      	ldrh	r3, [r5, #12]
   1f036:	b21a      	sxth	r2, r3
   1f038:	f012 0f08 	tst.w	r2, #8	; 0x8
   1f03c:	d150      	bne.n	1f0e0 <_fflush_r+0xe8>
   1f03e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   1f042:	686b      	ldr	r3, [r5, #4]
   1f044:	81aa      	strh	r2, [r5, #12]
   1f046:	2b00      	cmp	r3, #0
   1f048:	dc02      	bgt.n	1f050 <_fflush_r+0x58>
   1f04a:	6c2b      	ldr	r3, [r5, #64]
   1f04c:	2b00      	cmp	r3, #0
   1f04e:	dd67      	ble.n	1f120 <_fflush_r+0x128>
   1f050:	6aec      	ldr	r4, [r5, #44]
   1f052:	2c00      	cmp	r4, #0
   1f054:	d064      	beq.n	1f120 <_fflush_r+0x128>
   1f056:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   1f05a:	bf18      	it	ne
   1f05c:	6d6e      	ldrne	r6, [r5, #84]
   1f05e:	d111      	bne.n	1f084 <_fflush_r+0x8c>
   1f060:	2200      	movs	r2, #0
   1f062:	2301      	movs	r3, #1
   1f064:	6a29      	ldr	r1, [r5, #32]
   1f066:	9801      	ldr	r0, [sp, #4]
   1f068:	47a0      	blx	r4
   1f06a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f06e:	4606      	mov	r6, r0
   1f070:	d108      	bne.n	1f084 <_fflush_r+0x8c>
   1f072:	9a01      	ldr	r2, [sp, #4]
   1f074:	68d3      	ldr	r3, [r2, #12]
   1f076:	2b1d      	cmp	r3, #29
   1f078:	d052      	beq.n	1f120 <_fflush_r+0x128>
   1f07a:	89ab      	ldrh	r3, [r5, #12]
   1f07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f080:	81ab      	strh	r3, [r5, #12]
   1f082:	e04e      	b.n	1f122 <_fflush_r+0x12a>
   1f084:	89ab      	ldrh	r3, [r5, #12]
   1f086:	f013 0f04 	tst.w	r3, #4	; 0x4
   1f08a:	d005      	beq.n	1f098 <_fflush_r+0xa0>
   1f08c:	686b      	ldr	r3, [r5, #4]
   1f08e:	1af6      	subs	r6, r6, r3
   1f090:	6b6b      	ldr	r3, [r5, #52]
   1f092:	b10b      	cbz	r3, 1f098 <_fflush_r+0xa0>
   1f094:	6c2b      	ldr	r3, [r5, #64]
   1f096:	1af6      	subs	r6, r6, r3
   1f098:	2300      	movs	r3, #0
   1f09a:	6a29      	ldr	r1, [r5, #32]
   1f09c:	6aec      	ldr	r4, [r5, #44]
   1f09e:	9801      	ldr	r0, [sp, #4]
   1f0a0:	4632      	mov	r2, r6
   1f0a2:	47a0      	blx	r4
   1f0a4:	42b0      	cmp	r0, r6
   1f0a6:	89ab      	ldrh	r3, [r5, #12]
   1f0a8:	d130      	bne.n	1f10c <_fflush_r+0x114>
   1f0aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1f0ae:	041b      	lsls	r3, r3, #16
   1f0b0:	0c1b      	lsrs	r3, r3, #16
   1f0b2:	81ab      	strh	r3, [r5, #12]
   1f0b4:	2300      	movs	r3, #0
   1f0b6:	606b      	str	r3, [r5, #4]
   1f0b8:	692b      	ldr	r3, [r5, #16]
   1f0ba:	6b69      	ldr	r1, [r5, #52]
   1f0bc:	602b      	str	r3, [r5, #0]
   1f0be:	89ab      	ldrh	r3, [r5, #12]
   1f0c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1f0c4:	bf18      	it	ne
   1f0c6:	656e      	strne	r6, [r5, #84]
   1f0c8:	2900      	cmp	r1, #0
   1f0ca:	d029      	beq.n	1f120 <_fflush_r+0x128>
   1f0cc:	f105 0344 	add.w	r3, r5, #68	; 0x44
   1f0d0:	4299      	cmp	r1, r3
   1f0d2:	d002      	beq.n	1f0da <_fflush_r+0xe2>
   1f0d4:	9801      	ldr	r0, [sp, #4]
   1f0d6:	f000 f985 	bl	1f3e4 <_free_r>
   1f0da:	2300      	movs	r3, #0
   1f0dc:	636b      	str	r3, [r5, #52]
   1f0de:	e01f      	b.n	1f120 <_fflush_r+0x128>
   1f0e0:	692f      	ldr	r7, [r5, #16]
   1f0e2:	b1ef      	cbz	r7, 1f120 <_fflush_r+0x128>
   1f0e4:	f012 0f03 	tst.w	r2, #3	; 0x3
   1f0e8:	682b      	ldr	r3, [r5, #0]
   1f0ea:	bf0c      	ite	eq
   1f0ec:	696a      	ldreq	r2, [r5, #20]
   1f0ee:	2200      	movne	r2, #0
   1f0f0:	602f      	str	r7, [r5, #0]
   1f0f2:	ebc7 0603 	rsb	r6, r7, r3
   1f0f6:	60aa      	str	r2, [r5, #8]
   1f0f8:	e010      	b.n	1f11c <_fflush_r+0x124>
   1f0fa:	6a29      	ldr	r1, [r5, #32]
   1f0fc:	6aac      	ldr	r4, [r5, #40]
   1f0fe:	9801      	ldr	r0, [sp, #4]
   1f100:	463a      	mov	r2, r7
   1f102:	4633      	mov	r3, r6
   1f104:	47a0      	blx	r4
   1f106:	2800      	cmp	r0, #0
   1f108:	dc06      	bgt.n	1f118 <_fflush_r+0x120>
   1f10a:	89ab      	ldrh	r3, [r5, #12]
   1f10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f110:	81ab      	strh	r3, [r5, #12]
   1f112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f116:	e004      	b.n	1f122 <_fflush_r+0x12a>
   1f118:	183f      	adds	r7, r7, r0
   1f11a:	1a36      	subs	r6, r6, r0
   1f11c:	2e00      	cmp	r6, #0
   1f11e:	dcec      	bgt.n	1f0fa <_fflush_r+0x102>
   1f120:	2000      	movs	r0, #0
   1f122:	b003      	add	sp, #12
   1f124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f126:	46c0      	nop			(mov r8, r8)
   1f128:	00021328 	.word	0x00021328
   1f12c:	00021348 	.word	0x00021348
   1f130:	00021368 	.word	0x00021368

0001f134 <fflush>:
   1f134:	b500      	push	{lr}
   1f136:	4601      	mov	r1, r0
   1f138:	b081      	sub	sp, #4
   1f13a:	b928      	cbnz	r0, 1f148 <fflush+0x14>
   1f13c:	4b05      	ldr	r3, [pc, #20]	(1f154 <fflush+0x20>)
   1f13e:	4906      	ldr	r1, [pc, #24]	(1f158 <fflush+0x24>)
   1f140:	6818      	ldr	r0, [r3, #0]
   1f142:	f000 fa1b 	bl	1f57c <_fwalk_reent>
   1f146:	e003      	b.n	1f150 <fflush+0x1c>
   1f148:	4b04      	ldr	r3, [pc, #16]	(1f15c <fflush+0x28>)
   1f14a:	6818      	ldr	r0, [r3, #0]
   1f14c:	f7ff ff54 	bl	1eff8 <_fflush_r>
   1f150:	b001      	add	sp, #4
   1f152:	bd00      	pop	{pc}
   1f154:	00021320 	.word	0x00021320
   1f158:	0001eff9 	.word	0x0001eff9
   1f15c:	20000044 	.word	0x20000044

0001f160 <__sfp_lock_acquire>:
   1f160:	4770      	bx	lr
   1f162:	46c0      	nop			(mov r8, r8)

0001f164 <__sfp_lock_release>:
   1f164:	4770      	bx	lr
   1f166:	46c0      	nop			(mov r8, r8)

0001f168 <__sinit_lock_acquire>:
   1f168:	4770      	bx	lr
   1f16a:	46c0      	nop			(mov r8, r8)

0001f16c <__sinit_lock_release>:
   1f16c:	4770      	bx	lr
   1f16e:	46c0      	nop			(mov r8, r8)

0001f170 <__fp_lock>:
   1f170:	2000      	movs	r0, #0
   1f172:	4770      	bx	lr

0001f174 <__fp_unlock>:
   1f174:	2000      	movs	r0, #0
   1f176:	4770      	bx	lr

0001f178 <__fp_unlock_all>:
   1f178:	b500      	push	{lr}
   1f17a:	4b04      	ldr	r3, [pc, #16]	(1f18c <__fp_unlock_all+0x14>)
   1f17c:	b081      	sub	sp, #4
   1f17e:	6818      	ldr	r0, [r3, #0]
   1f180:	4903      	ldr	r1, [pc, #12]	(1f190 <__fp_unlock_all+0x18>)
   1f182:	f000 fa23 	bl	1f5cc <_fwalk>
   1f186:	b001      	add	sp, #4
   1f188:	bd00      	pop	{pc}
   1f18a:	46c0      	nop			(mov r8, r8)
   1f18c:	20000044 	.word	0x20000044
   1f190:	0001f175 	.word	0x0001f175

0001f194 <__fp_lock_all>:
   1f194:	b500      	push	{lr}
   1f196:	4b04      	ldr	r3, [pc, #16]	(1f1a8 <__fp_lock_all+0x14>)
   1f198:	b081      	sub	sp, #4
   1f19a:	6818      	ldr	r0, [r3, #0]
   1f19c:	4903      	ldr	r1, [pc, #12]	(1f1ac <__fp_lock_all+0x18>)
   1f19e:	f000 fa15 	bl	1f5cc <_fwalk>
   1f1a2:	b001      	add	sp, #4
   1f1a4:	bd00      	pop	{pc}
   1f1a6:	46c0      	nop			(mov r8, r8)
   1f1a8:	20000044 	.word	0x20000044
   1f1ac:	0001f171 	.word	0x0001f171

0001f1b0 <_cleanup_r>:
   1f1b0:	b500      	push	{lr}
   1f1b2:	4903      	ldr	r1, [pc, #12]	(1f1c0 <_cleanup_r+0x10>)
   1f1b4:	b081      	sub	sp, #4
   1f1b6:	f000 fa09 	bl	1f5cc <_fwalk>
   1f1ba:	b001      	add	sp, #4
   1f1bc:	bd00      	pop	{pc}
   1f1be:	46c0      	nop			(mov r8, r8)
   1f1c0:	0001f865 	.word	0x0001f865

0001f1c4 <_cleanup>:
   1f1c4:	b500      	push	{lr}
   1f1c6:	4b04      	ldr	r3, [pc, #16]	(1f1d8 <_cleanup+0x14>)
   1f1c8:	b081      	sub	sp, #4
   1f1ca:	6818      	ldr	r0, [r3, #0]
   1f1cc:	4903      	ldr	r1, [pc, #12]	(1f1dc <_cleanup+0x18>)
   1f1ce:	f000 f9fd 	bl	1f5cc <_fwalk>
   1f1d2:	b001      	add	sp, #4
   1f1d4:	bd00      	pop	{pc}
   1f1d6:	46c0      	nop			(mov r8, r8)
   1f1d8:	00021320 	.word	0x00021320
   1f1dc:	0001f865 	.word	0x0001f865

0001f1e0 <std>:
   1f1e0:	2300      	movs	r3, #0
   1f1e2:	6003      	str	r3, [r0, #0]
   1f1e4:	6043      	str	r3, [r0, #4]
   1f1e6:	6083      	str	r3, [r0, #8]
   1f1e8:	8181      	strh	r1, [r0, #12]
   1f1ea:	6643      	str	r3, [r0, #100]
   1f1ec:	81c2      	strh	r2, [r0, #14]
   1f1ee:	6103      	str	r3, [r0, #16]
   1f1f0:	6143      	str	r3, [r0, #20]
   1f1f2:	6183      	str	r3, [r0, #24]
   1f1f4:	b510      	push	{r4, lr}
   1f1f6:	2100      	movs	r1, #0
   1f1f8:	4604      	mov	r4, r0
   1f1fa:	2208      	movs	r2, #8
   1f1fc:	f100 005c 	add.w	r0, r0, #92	; 0x5c
   1f200:	f7ff fa3e 	bl	1e680 <memset>
   1f204:	4b04      	ldr	r3, [pc, #16]	(1f218 <std+0x38>)
   1f206:	6224      	str	r4, [r4, #32]
   1f208:	6263      	str	r3, [r4, #36]
   1f20a:	4b04      	ldr	r3, [pc, #16]	(1f21c <std+0x3c>)
   1f20c:	62a3      	str	r3, [r4, #40]
   1f20e:	4b04      	ldr	r3, [pc, #16]	(1f220 <std+0x40>)
   1f210:	62e3      	str	r3, [r4, #44]
   1f212:	4b04      	ldr	r3, [pc, #16]	(1f224 <std+0x44>)
   1f214:	6323      	str	r3, [r4, #48]
   1f216:	bd10      	pop	{r4, pc}
   1f218:	0001f765 	.word	0x0001f765
   1f21c:	0001f725 	.word	0x0001f725
   1f220:	0001f6f9 	.word	0x0001f6f9
   1f224:	0001f6e9 	.word	0x0001f6e9

0001f228 <__sfmoreglue>:
   1f228:	2368      	movs	r3, #104
   1f22a:	b570      	push	{r4, r5, r6, lr}
   1f22c:	fb03 f601 	mul.w	r6, r3, r1
   1f230:	460d      	mov	r5, r1
   1f232:	f106 010c 	add.w	r1, r6, #12	; 0xc
   1f236:	f7fe ff9f 	bl	1e178 <_malloc_r>
   1f23a:	4604      	mov	r4, r0
   1f23c:	b148      	cbz	r0, 1f252 <__sfmoreglue+0x2a>
   1f23e:	f100 000c 	add.w	r0, r0, #12	; 0xc
   1f242:	2300      	movs	r3, #0
   1f244:	6023      	str	r3, [r4, #0]
   1f246:	6065      	str	r5, [r4, #4]
   1f248:	60a0      	str	r0, [r4, #8]
   1f24a:	2100      	movs	r1, #0
   1f24c:	4632      	mov	r2, r6
   1f24e:	f7ff fa17 	bl	1e680 <memset>
   1f252:	4620      	mov	r0, r4
   1f254:	bd70      	pop	{r4, r5, r6, pc}
   1f256:	46c0      	nop			(mov r8, r8)

0001f258 <__sfp>:
   1f258:	4b1e      	ldr	r3, [pc, #120]	(1f2d4 <__sfp+0x7c>)
   1f25a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f25c:	681c      	ldr	r4, [r3, #0]
   1f25e:	b081      	sub	sp, #4
   1f260:	69a3      	ldr	r3, [r4, #24]
   1f262:	4607      	mov	r7, r0
   1f264:	b913      	cbnz	r3, 1f26c <__sfp+0x14>
   1f266:	4620      	mov	r0, r4
   1f268:	f000 f836 	bl	1f2d8 <__sinit>
   1f26c:	f104 06d8 	add.w	r6, r4, #216	; 0xd8
   1f270:	68b4      	ldr	r4, [r6, #8]
   1f272:	6873      	ldr	r3, [r6, #4]
   1f274:	e003      	b.n	1f27e <__sfp+0x26>
   1f276:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   1f27a:	b18d      	cbz	r5, 1f2a0 <__sfp+0x48>
   1f27c:	3468      	adds	r4, #104
   1f27e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1f282:	d5f8      	bpl.n	1f276 <__sfp+0x1e>
   1f284:	6833      	ldr	r3, [r6, #0]
   1f286:	b92b      	cbnz	r3, 1f294 <__sfp+0x3c>
   1f288:	4638      	mov	r0, r7
   1f28a:	2104      	movs	r1, #4
   1f28c:	f7ff ffcc 	bl	1f228 <__sfmoreglue>
   1f290:	6030      	str	r0, [r6, #0]
   1f292:	b108      	cbz	r0, 1f298 <__sfp+0x40>
   1f294:	6836      	ldr	r6, [r6, #0]
   1f296:	e7eb      	b.n	1f270 <__sfp+0x18>
   1f298:	230c      	movs	r3, #12
   1f29a:	60fb      	str	r3, [r7, #12]
   1f29c:	2400      	movs	r4, #0
   1f29e:	e016      	b.n	1f2ce <__sfp+0x76>
   1f2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2a4:	81e3      	strh	r3, [r4, #14]
   1f2a6:	f04f 0301 	mov.w	r3, #1	; 0x1
   1f2aa:	81a3      	strh	r3, [r4, #12]
   1f2ac:	6665      	str	r5, [r4, #100]
   1f2ae:	6025      	str	r5, [r4, #0]
   1f2b0:	60a5      	str	r5, [r4, #8]
   1f2b2:	6065      	str	r5, [r4, #4]
   1f2b4:	6125      	str	r5, [r4, #16]
   1f2b6:	6165      	str	r5, [r4, #20]
   1f2b8:	61a5      	str	r5, [r4, #24]
   1f2ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   1f2be:	2100      	movs	r1, #0
   1f2c0:	2208      	movs	r2, #8
   1f2c2:	f7ff f9dd 	bl	1e680 <memset>
   1f2c6:	6365      	str	r5, [r4, #52]
   1f2c8:	63a5      	str	r5, [r4, #56]
   1f2ca:	64a5      	str	r5, [r4, #72]
   1f2cc:	64e5      	str	r5, [r4, #76]
   1f2ce:	4620      	mov	r0, r4
   1f2d0:	b001      	add	sp, #4
   1f2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f2d4:	00021320 	.word	0x00021320

0001f2d8 <__sinit>:
   1f2d8:	6982      	ldr	r2, [r0, #24]
   1f2da:	b510      	push	{r4, lr}
   1f2dc:	4604      	mov	r4, r0
   1f2de:	bb32      	cbnz	r2, 1f32e <__sinit+0x56>
   1f2e0:	4b13      	ldr	r3, [pc, #76]	(1f330 <__sinit+0x58>)
   1f2e2:	f8c0 20d8 	str.w	r2, [r0, #216]
   1f2e6:	6283      	str	r3, [r0, #40]
   1f2e8:	2301      	movs	r3, #1
   1f2ea:	6183      	str	r3, [r0, #24]
   1f2ec:	f8c0 20dc 	str.w	r2, [r0, #220]
   1f2f0:	f8c0 20e0 	str.w	r2, [r0, #224]
   1f2f4:	f7ff ffb0 	bl	1f258 <__sfp>
   1f2f8:	6020      	str	r0, [r4, #0]
   1f2fa:	4620      	mov	r0, r4
   1f2fc:	f7ff ffac 	bl	1f258 <__sfp>
   1f300:	6060      	str	r0, [r4, #4]
   1f302:	4620      	mov	r0, r4
   1f304:	f7ff ffa8 	bl	1f258 <__sfp>
   1f308:	2104      	movs	r1, #4
   1f30a:	60a0      	str	r0, [r4, #8]
   1f30c:	2200      	movs	r2, #0
   1f30e:	6820      	ldr	r0, [r4, #0]
   1f310:	4623      	mov	r3, r4
   1f312:	f7ff ff65 	bl	1f1e0 <std>
   1f316:	6860      	ldr	r0, [r4, #4]
   1f318:	2109      	movs	r1, #9
   1f31a:	2201      	movs	r2, #1
   1f31c:	4623      	mov	r3, r4
   1f31e:	f7ff ff5f 	bl	1f1e0 <std>
   1f322:	68a0      	ldr	r0, [r4, #8]
   1f324:	2112      	movs	r1, #18
   1f326:	2202      	movs	r2, #2
   1f328:	4623      	mov	r3, r4
   1f32a:	f7ff ff59 	bl	1f1e0 <std>
   1f32e:	bd10      	pop	{r4, pc}
   1f330:	0001f1b1 	.word	0x0001f1b1

0001f334 <_malloc_trim_r>:
   1f334:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f336:	4f28      	ldr	r7, [pc, #160]	(1f3d8 <_malloc_trim_r+0xa4>)
   1f338:	b081      	sub	sp, #4
   1f33a:	460c      	mov	r4, r1
   1f33c:	4605      	mov	r5, r0
   1f33e:	f7ff f9a7 	bl	1e690 <__malloc_lock>
   1f342:	68bb      	ldr	r3, [r7, #8]
   1f344:	685b      	ldr	r3, [r3, #4]
   1f346:	f023 0603 	bic.w	r6, r3, #3	; 0x3
   1f34a:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   1f34e:	330f      	adds	r3, #15
   1f350:	1b1b      	subs	r3, r3, r4
   1f352:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   1f356:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
   1f35a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1f35e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   1f362:	db23      	blt.n	1f3ac <_malloc_trim_r+0x78>
   1f364:	2100      	movs	r1, #0
   1f366:	4628      	mov	r0, r5
   1f368:	f7ff fc1e 	bl	1eba8 <_sbrk_r>
   1f36c:	68bb      	ldr	r3, [r7, #8]
   1f36e:	199b      	adds	r3, r3, r6
   1f370:	4298      	cmp	r0, r3
   1f372:	d11b      	bne.n	1f3ac <_malloc_trim_r+0x78>
   1f374:	f1c4 0100 	rsb	r1, r4, #0	; 0x0
   1f378:	4628      	mov	r0, r5
   1f37a:	f7ff fc15 	bl	1eba8 <_sbrk_r>
   1f37e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f382:	d118      	bne.n	1f3b6 <_malloc_trim_r+0x82>
   1f384:	2100      	movs	r1, #0
   1f386:	4628      	mov	r0, r5
   1f388:	f7ff fc0e 	bl	1eba8 <_sbrk_r>
   1f38c:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1f390:	ebcc 0100 	rsb	r1, ip, r0
   1f394:	290f      	cmp	r1, #15
   1f396:	dd09      	ble.n	1f3ac <_malloc_trim_r+0x78>
   1f398:	4b10      	ldr	r3, [pc, #64]	(1f3dc <_malloc_trim_r+0xa8>)
   1f39a:	4a11      	ldr	r2, [pc, #68]	(1f3e0 <_malloc_trim_r+0xac>)
   1f39c:	681b      	ldr	r3, [r3, #0]
   1f39e:	ebc3 0300 	rsb	r3, r3, r0
   1f3a2:	6013      	str	r3, [r2, #0]
   1f3a4:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   1f3a8:	f8cc 3004 	str.w	r3, [ip, #4]
   1f3ac:	4628      	mov	r0, r5
   1f3ae:	f7ff f971 	bl	1e694 <__malloc_unlock>
   1f3b2:	2000      	movs	r0, #0
   1f3b4:	e00d      	b.n	1f3d2 <_malloc_trim_r+0x9e>
   1f3b6:	68ba      	ldr	r2, [r7, #8]
   1f3b8:	ebc4 0306 	rsb	r3, r4, r6
   1f3bc:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1f3c0:	6053      	str	r3, [r2, #4]
   1f3c2:	4a07      	ldr	r2, [pc, #28]	(1f3e0 <_malloc_trim_r+0xac>)
   1f3c4:	4628      	mov	r0, r5
   1f3c6:	6813      	ldr	r3, [r2, #0]
   1f3c8:	1b1b      	subs	r3, r3, r4
   1f3ca:	6013      	str	r3, [r2, #0]
   1f3cc:	f7ff f962 	bl	1e694 <__malloc_unlock>
   1f3d0:	2001      	movs	r0, #1
   1f3d2:	b001      	add	sp, #4
   1f3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f3d6:	46c0      	nop			(mov r8, r8)
   1f3d8:	20000138 	.word	0x20000138
   1f3dc:	20000544 	.word	0x20000544
   1f3e0:	20000ea0 	.word	0x20000ea0

0001f3e4 <_free_r>:
   1f3e4:	b570      	push	{r4, r5, r6, lr}
   1f3e6:	4606      	mov	r6, r0
   1f3e8:	460c      	mov	r4, r1
   1f3ea:	2900      	cmp	r1, #0
   1f3ec:	f000 80bd 	beq.w	1f56a <_free_r+0x186>
   1f3f0:	f7ff f94e 	bl	1e690 <__malloc_lock>
   1f3f4:	f1a4 0c08 	sub.w	ip, r4, #8	; 0x8
   1f3f8:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1f3fc:	4d5b      	ldr	r5, [pc, #364]	(1f56c <_free_r+0x188>)
   1f3fe:	f023 0101 	bic.w	r1, r3, #1	; 0x1
   1f402:	eb0c 0001 	add.w	r0, ip, r1
   1f406:	6842      	ldr	r2, [r0, #4]
   1f408:	f003 0301 	and.w	r3, r3, #1	; 0x1
   1f40c:	f022 0e03 	bic.w	lr, r2, #3	; 0x3
   1f410:	68aa      	ldr	r2, [r5, #8]
   1f412:	4290      	cmp	r0, r2
   1f414:	d11d      	bne.n	1f452 <_free_r+0x6e>
   1f416:	4471      	add	r1, lr
   1f418:	b953      	cbnz	r3, 1f430 <_free_r+0x4c>
   1f41a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1f41e:	ebc3 0c0c 	rsb	ip, r3, ip
   1f422:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1f426:	18c9      	adds	r1, r1, r3
   1f428:	f8dc 3008 	ldr.w	r3, [ip, #8]
   1f42c:	60da      	str	r2, [r3, #12]
   1f42e:	6093      	str	r3, [r2, #8]
   1f430:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   1f434:	f8cc 3004 	str.w	r3, [ip, #4]
   1f438:	4b4d      	ldr	r3, [pc, #308]	(1f570 <_free_r+0x18c>)
   1f43a:	f8c5 c008 	str.w	ip, [r5, #8]
   1f43e:	681b      	ldr	r3, [r3, #0]
   1f440:	4299      	cmp	r1, r3
   1f442:	f0c0 808f 	bcc.w	1f564 <_free_r+0x180>
   1f446:	4b4b      	ldr	r3, [pc, #300]	(1f574 <_free_r+0x190>)
   1f448:	4630      	mov	r0, r6
   1f44a:	6819      	ldr	r1, [r3, #0]
   1f44c:	f7ff ff72 	bl	1f334 <_malloc_trim_r>
   1f450:	e088      	b.n	1f564 <_free_r+0x180>
   1f452:	f8c0 e004 	str.w	lr, [r0, #4]
   1f456:	b983      	cbnz	r3, 1f47a <_free_r+0x96>
   1f458:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1f45c:	ebc3 0c0c 	rsb	ip, r3, ip
   1f460:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1f464:	18c9      	adds	r1, r1, r3
   1f466:	f105 0308 	add.w	r3, r5, #8	; 0x8
   1f46a:	429a      	cmp	r2, r3
   1f46c:	d101      	bne.n	1f472 <_free_r+0x8e>
   1f46e:	2401      	movs	r4, #1
   1f470:	e004      	b.n	1f47c <_free_r+0x98>
   1f472:	f8dc 300c 	ldr.w	r3, [ip, #12]
   1f476:	60d3      	str	r3, [r2, #12]
   1f478:	609a      	str	r2, [r3, #8]
   1f47a:	2400      	movs	r4, #0
   1f47c:	eb00 030e 	add.w	r3, r0, lr
   1f480:	685b      	ldr	r3, [r3, #4]
   1f482:	f013 0f01 	tst.w	r3, #1	; 0x1
   1f486:	d113      	bne.n	1f4b0 <_free_r+0xcc>
   1f488:	4471      	add	r1, lr
   1f48a:	b96c      	cbnz	r4, 1f4a8 <_free_r+0xc4>
   1f48c:	6882      	ldr	r2, [r0, #8]
   1f48e:	4b3a      	ldr	r3, [pc, #232]	(1f578 <_free_r+0x194>)
   1f490:	429a      	cmp	r2, r3
   1f492:	d109      	bne.n	1f4a8 <_free_r+0xc4>
   1f494:	f8c2 c00c 	str.w	ip, [r2, #12]
   1f498:	f8c2 c008 	str.w	ip, [r2, #8]
   1f49c:	f8cc 200c 	str.w	r2, [ip, #12]
   1f4a0:	f8cc 2008 	str.w	r2, [ip, #8]
   1f4a4:	2401      	movs	r4, #1
   1f4a6:	e003      	b.n	1f4b0 <_free_r+0xcc>
   1f4a8:	68c2      	ldr	r2, [r0, #12]
   1f4aa:	6883      	ldr	r3, [r0, #8]
   1f4ac:	60da      	str	r2, [r3, #12]
   1f4ae:	6093      	str	r3, [r2, #8]
   1f4b0:	f041 0301 	orr.w	r3, r1, #1	; 0x1
   1f4b4:	f8cc 3004 	str.w	r3, [ip, #4]
   1f4b8:	f84c 1001 	str.w	r1, [ip, r1]
   1f4bc:	2c00      	cmp	r4, #0
   1f4be:	d151      	bne.n	1f564 <_free_r+0x180>
   1f4c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1f4c4:	d212      	bcs.n	1f4ec <_free_r+0x108>
   1f4c6:	08c9      	lsrs	r1, r1, #3
   1f4c8:	108b      	asrs	r3, r1, #2
   1f4ca:	2201      	movs	r2, #1
   1f4cc:	409a      	lsls	r2, r3
   1f4ce:	686b      	ldr	r3, [r5, #4]
   1f4d0:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   1f4d4:	4313      	orrs	r3, r2
   1f4d6:	606b      	str	r3, [r5, #4]
   1f4d8:	688b      	ldr	r3, [r1, #8]
   1f4da:	f8cc 100c 	str.w	r1, [ip, #12]
   1f4de:	f8cc 3008 	str.w	r3, [ip, #8]
   1f4e2:	f8c3 c00c 	str.w	ip, [r3, #12]
   1f4e6:	f8c1 c008 	str.w	ip, [r1, #8]
   1f4ea:	e03b      	b.n	1f564 <_free_r+0x180>
   1f4ec:	0a4a      	lsrs	r2, r1, #9
   1f4ee:	2a04      	cmp	r2, #4
   1f4f0:	d802      	bhi.n	1f4f8 <_free_r+0x114>
   1f4f2:	098b      	lsrs	r3, r1, #6
   1f4f4:	3338      	adds	r3, #56
   1f4f6:	e017      	b.n	1f528 <_free_r+0x144>
   1f4f8:	2a14      	cmp	r2, #20
   1f4fa:	bf98      	it	ls
   1f4fc:	f102 035b 	addls.w	r3, r2, #91	; 0x5b
   1f500:	d912      	bls.n	1f528 <_free_r+0x144>
   1f502:	2a54      	cmp	r2, #84
   1f504:	d802      	bhi.n	1f50c <_free_r+0x128>
   1f506:	0b0b      	lsrs	r3, r1, #12
   1f508:	336e      	adds	r3, #110
   1f50a:	e00d      	b.n	1f528 <_free_r+0x144>
   1f50c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1f510:	d802      	bhi.n	1f518 <_free_r+0x134>
   1f512:	0bcb      	lsrs	r3, r1, #15
   1f514:	3377      	adds	r3, #119
   1f516:	e007      	b.n	1f528 <_free_r+0x144>
   1f518:	f240 5354 	movw	r3, #1364	; 0x554
   1f51c:	429a      	cmp	r2, r3
   1f51e:	d901      	bls.n	1f524 <_free_r+0x140>
   1f520:	237e      	movs	r3, #126
   1f522:	e001      	b.n	1f528 <_free_r+0x144>
   1f524:	0c8b      	lsrs	r3, r1, #18
   1f526:	337c      	adds	r3, #124
   1f528:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   1f52c:	6890      	ldr	r0, [r2, #8]
   1f52e:	4290      	cmp	r0, r2
   1f530:	d10a      	bne.n	1f548 <_free_r+0x164>
   1f532:	109b      	asrs	r3, r3, #2
   1f534:	2201      	movs	r2, #1
   1f536:	409a      	lsls	r2, r3
   1f538:	686b      	ldr	r3, [r5, #4]
   1f53a:	4313      	orrs	r3, r2
   1f53c:	606b      	str	r3, [r5, #4]
   1f53e:	4603      	mov	r3, r0
   1f540:	e008      	b.n	1f554 <_free_r+0x170>
   1f542:	6880      	ldr	r0, [r0, #8]
   1f544:	4290      	cmp	r0, r2
   1f546:	d004      	beq.n	1f552 <_free_r+0x16e>
   1f548:	6843      	ldr	r3, [r0, #4]
   1f54a:	f023 0303 	bic.w	r3, r3, #3	; 0x3
   1f54e:	4299      	cmp	r1, r3
   1f550:	d3f7      	bcc.n	1f542 <_free_r+0x15e>
   1f552:	68c3      	ldr	r3, [r0, #12]
   1f554:	f8cc 300c 	str.w	r3, [ip, #12]
   1f558:	f8cc 0008 	str.w	r0, [ip, #8]
   1f55c:	f8c0 c00c 	str.w	ip, [r0, #12]
   1f560:	f8c3 c008 	str.w	ip, [r3, #8]
   1f564:	4630      	mov	r0, r6
   1f566:	f7ff f895 	bl	1e694 <__malloc_unlock>
   1f56a:	bd70      	pop	{r4, r5, r6, pc}
   1f56c:	20000138 	.word	0x20000138
   1f570:	20000540 	.word	0x20000540
   1f574:	20000e94 	.word	0x20000e94
   1f578:	20000140 	.word	0x20000140

0001f57c <_fwalk_reent>:
   1f57c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f57e:	b083      	sub	sp, #12
   1f580:	9001      	str	r0, [sp, #4]
   1f582:	9100      	str	r1, [sp, #0]
   1f584:	f7ff fdec 	bl	1f160 <__sfp_lock_acquire>
   1f588:	9b01      	ldr	r3, [sp, #4]
   1f58a:	2700      	movs	r7, #0
   1f58c:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
   1f590:	e014      	b.n	1f5bc <_fwalk_reent+0x40>
   1f592:	68ac      	ldr	r4, [r5, #8]
   1f594:	686e      	ldr	r6, [r5, #4]
   1f596:	e00d      	b.n	1f5b4 <_fwalk_reent+0x38>
   1f598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1f59c:	b14b      	cbz	r3, 1f5b2 <_fwalk_reent+0x36>
   1f59e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1f5a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f5a6:	d004      	beq.n	1f5b2 <_fwalk_reent+0x36>
   1f5a8:	9801      	ldr	r0, [sp, #4]
   1f5aa:	4621      	mov	r1, r4
   1f5ac:	9b00      	ldr	r3, [sp, #0]
   1f5ae:	4798      	blx	r3
   1f5b0:	4307      	orrs	r7, r0
   1f5b2:	3468      	adds	r4, #104
   1f5b4:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   1f5b8:	d5ee      	bpl.n	1f598 <_fwalk_reent+0x1c>
   1f5ba:	682d      	ldr	r5, [r5, #0]
   1f5bc:	2d00      	cmp	r5, #0
   1f5be:	d1e8      	bne.n	1f592 <_fwalk_reent+0x16>
   1f5c0:	f7ff fdd0 	bl	1f164 <__sfp_lock_release>
   1f5c4:	4638      	mov	r0, r7
   1f5c6:	b003      	add	sp, #12
   1f5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f5ca:	46c0      	nop			(mov r8, r8)

0001f5cc <_fwalk>:
   1f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5ce:	4604      	mov	r4, r0
   1f5d0:	b083      	sub	sp, #12
   1f5d2:	9101      	str	r1, [sp, #4]
   1f5d4:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
   1f5d8:	f7ff fdc2 	bl	1f160 <__sfp_lock_acquire>
   1f5dc:	2700      	movs	r7, #0
   1f5de:	e013      	b.n	1f608 <_fwalk+0x3c>
   1f5e0:	68ac      	ldr	r4, [r5, #8]
   1f5e2:	686e      	ldr	r6, [r5, #4]
   1f5e4:	e00c      	b.n	1f600 <_fwalk+0x34>
   1f5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1f5ea:	b143      	cbz	r3, 1f5fe <_fwalk+0x32>
   1f5ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   1f5f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1f5f4:	d003      	beq.n	1f5fe <_fwalk+0x32>
   1f5f6:	4620      	mov	r0, r4
   1f5f8:	9b01      	ldr	r3, [sp, #4]
   1f5fa:	4798      	blx	r3
   1f5fc:	4307      	orrs	r7, r0
   1f5fe:	3468      	adds	r4, #104
   1f600:	f116 36ff 	adds.w	r6, r6, #4294967295	; 0xffffffff
   1f604:	d5ef      	bpl.n	1f5e6 <_fwalk+0x1a>
   1f606:	682d      	ldr	r5, [r5, #0]
   1f608:	2d00      	cmp	r5, #0
   1f60a:	d1e9      	bne.n	1f5e0 <_fwalk+0x14>
   1f60c:	f7ff fdaa 	bl	1f164 <__sfp_lock_release>
   1f610:	4638      	mov	r0, r7
   1f612:	b003      	add	sp, #12
   1f614:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f616:	46c0      	nop			(mov r8, r8)

0001f618 <__smakebuf_r>:
   1f618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f61a:	898b      	ldrh	r3, [r1, #12]
   1f61c:	b091      	sub	sp, #68
   1f61e:	f013 0f02 	tst.w	r3, #2	; 0x2
   1f622:	4606      	mov	r6, r0
   1f624:	460c      	mov	r4, r1
   1f626:	d13d      	bne.n	1f6a4 <__smakebuf_r+0x8c>
   1f628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1f62c:	2900      	cmp	r1, #0
   1f62e:	db04      	blt.n	1f63a <__smakebuf_r+0x22>
   1f630:	aa01      	add	r2, sp, #4
   1f632:	f000 f923 	bl	1f87c <_fstat_r>
   1f636:	2800      	cmp	r0, #0
   1f638:	da0b      	bge.n	1f652 <__smakebuf_r+0x3a>
   1f63a:	89a3      	ldrh	r3, [r4, #12]
   1f63c:	f013 0f80 	tst.w	r3, #128	; 0x80
   1f640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1f644:	bf14      	ite	ne
   1f646:	2540      	movne	r5, #64
   1f648:	f44f 7580 	moveq.w	r5, #256	; 0x100
   1f64c:	81a3      	strh	r3, [r4, #12]
   1f64e:	2700      	movs	r7, #0
   1f650:	e01c      	b.n	1f68c <__smakebuf_r+0x74>
   1f652:	9b02      	ldr	r3, [sp, #8]
   1f654:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   1f658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1f65c:	bf14      	ite	ne
   1f65e:	2700      	movne	r7, #0
   1f660:	2701      	moveq	r7, #1
   1f662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1f666:	d10b      	bne.n	1f680 <__smakebuf_r+0x68>
   1f668:	6ae2      	ldr	r2, [r4, #44]
   1f66a:	4b1d      	ldr	r3, [pc, #116]	(1f6e0 <__smakebuf_r+0xc8>)
   1f66c:	429a      	cmp	r2, r3
   1f66e:	d107      	bne.n	1f680 <__smakebuf_r+0x68>
   1f670:	89a3      	ldrh	r3, [r4, #12]
   1f672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1f676:	81a3      	strh	r3, [r4, #12]
   1f678:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f67c:	6523      	str	r3, [r4, #80]
   1f67e:	e003      	b.n	1f688 <__smakebuf_r+0x70>
   1f680:	89a3      	ldrh	r3, [r4, #12]
   1f682:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1f686:	81a3      	strh	r3, [r4, #12]
   1f688:	f44f 7580 	mov.w	r5, #256	; 0x100
   1f68c:	4630      	mov	r0, r6
   1f68e:	4629      	mov	r1, r5
   1f690:	f7fe fd72 	bl	1e178 <_malloc_r>
   1f694:	b968      	cbnz	r0, 1f6b2 <__smakebuf_r+0x9a>
   1f696:	89a3      	ldrh	r3, [r4, #12]
   1f698:	f413 7f00 	tst.w	r3, #512	; 0x200
   1f69c:	d11d      	bne.n	1f6da <__smakebuf_r+0xc2>
   1f69e:	f043 0302 	orr.w	r3, r3, #2	; 0x2
   1f6a2:	81a3      	strh	r3, [r4, #12]
   1f6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1f6a8:	6023      	str	r3, [r4, #0]
   1f6aa:	6123      	str	r3, [r4, #16]
   1f6ac:	2301      	movs	r3, #1
   1f6ae:	6163      	str	r3, [r4, #20]
   1f6b0:	e013      	b.n	1f6da <__smakebuf_r+0xc2>
   1f6b2:	4b0c      	ldr	r3, [pc, #48]	(1f6e4 <__smakebuf_r+0xcc>)
   1f6b4:	6020      	str	r0, [r4, #0]
   1f6b6:	62b3      	str	r3, [r6, #40]
   1f6b8:	89a3      	ldrh	r3, [r4, #12]
   1f6ba:	6120      	str	r0, [r4, #16]
   1f6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1f6c0:	81a3      	strh	r3, [r4, #12]
   1f6c2:	6165      	str	r5, [r4, #20]
   1f6c4:	b14f      	cbz	r7, 1f6da <__smakebuf_r+0xc2>
   1f6c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1f6ca:	4630      	mov	r0, r6
   1f6cc:	f000 f8ea 	bl	1f8a4 <_isatty_r>
   1f6d0:	b118      	cbz	r0, 1f6da <__smakebuf_r+0xc2>
   1f6d2:	89a3      	ldrh	r3, [r4, #12]
   1f6d4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   1f6d8:	81a3      	strh	r3, [r4, #12]
   1f6da:	b011      	add	sp, #68
   1f6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6de:	46c0      	nop			(mov r8, r8)
   1f6e0:	0001f6f9 	.word	0x0001f6f9
   1f6e4:	0001f1b1 	.word	0x0001f1b1

0001f6e8 <__sclose>:
   1f6e8:	b500      	push	{lr}
   1f6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1f6ee:	b081      	sub	sp, #4
   1f6f0:	f000 f84c 	bl	1f78c <_close_r>
   1f6f4:	b001      	add	sp, #4
   1f6f6:	bd00      	pop	{pc}

0001f6f8 <__sseek>:
   1f6f8:	b510      	push	{r4, lr}
   1f6fa:	460c      	mov	r4, r1
   1f6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1f700:	f000 f8e4 	bl	1f8cc <_lseek_r>
   1f704:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f708:	89a3      	ldrh	r3, [r4, #12]
   1f70a:	d105      	bne.n	1f718 <__sseek+0x20>
   1f70c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1f710:	041b      	lsls	r3, r3, #16
   1f712:	0c1b      	lsrs	r3, r3, #16
   1f714:	81a3      	strh	r3, [r4, #12]
   1f716:	e003      	b.n	1f720 <__sseek+0x28>
   1f718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1f71c:	81a3      	strh	r3, [r4, #12]
   1f71e:	6560      	str	r0, [r4, #84]
   1f720:	bd10      	pop	{r4, pc}
   1f722:	46c0      	nop			(mov r8, r8)

0001f724 <__swrite>:
   1f724:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f726:	461f      	mov	r7, r3
   1f728:	898b      	ldrh	r3, [r1, #12]
   1f72a:	b081      	sub	sp, #4
   1f72c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f730:	4605      	mov	r5, r0
   1f732:	460c      	mov	r4, r1
   1f734:	4616      	mov	r6, r2
   1f736:	d005      	beq.n	1f744 <__swrite+0x20>
   1f738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1f73c:	2200      	movs	r2, #0
   1f73e:	2302      	movs	r3, #2
   1f740:	f000 f8c4 	bl	1f8cc <_lseek_r>
   1f744:	89a3      	ldrh	r3, [r4, #12]
   1f746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1f74a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1f74e:	041b      	lsls	r3, r3, #16
   1f750:	0c1b      	lsrs	r3, r3, #16
   1f752:	81a3      	strh	r3, [r4, #12]
   1f754:	4628      	mov	r0, r5
   1f756:	4632      	mov	r2, r6
   1f758:	463b      	mov	r3, r7
   1f75a:	f7ff fbc5 	bl	1eee8 <_write_r>
   1f75e:	b001      	add	sp, #4
   1f760:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f762:	46c0      	nop			(mov r8, r8)

0001f764 <__sread>:
   1f764:	b510      	push	{r4, lr}
   1f766:	460c      	mov	r4, r1
   1f768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1f76c:	f000 f8c4 	bl	1f8f8 <_read_r>
   1f770:	2800      	cmp	r0, #0
   1f772:	db03      	blt.n	1f77c <__sread+0x18>
   1f774:	6d63      	ldr	r3, [r4, #84]
   1f776:	181b      	adds	r3, r3, r0
   1f778:	6563      	str	r3, [r4, #84]
   1f77a:	e005      	b.n	1f788 <__sread+0x24>
   1f77c:	89a3      	ldrh	r3, [r4, #12]
   1f77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1f782:	041b      	lsls	r3, r3, #16
   1f784:	0c1b      	lsrs	r3, r3, #16
   1f786:	81a3      	strh	r3, [r4, #12]
   1f788:	bd10      	pop	{r4, pc}
   1f78a:	46c0      	nop			(mov r8, r8)

0001f78c <_close_r>:
   1f78c:	b530      	push	{r4, r5, lr}
   1f78e:	4c08      	ldr	r4, [pc, #32]	(1f7b0 <_close_r+0x24>)
   1f790:	2300      	movs	r3, #0
   1f792:	b081      	sub	sp, #4
   1f794:	4605      	mov	r5, r0
   1f796:	4608      	mov	r0, r1
   1f798:	6023      	str	r3, [r4, #0]
   1f79a:	f7f5 fd69 	bl	15270 <_close>
   1f79e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f7a2:	d102      	bne.n	1f7aa <_close_r+0x1e>
   1f7a4:	6823      	ldr	r3, [r4, #0]
   1f7a6:	b103      	cbz	r3, 1f7aa <_close_r+0x1e>
   1f7a8:	60eb      	str	r3, [r5, #12]
   1f7aa:	b001      	add	sp, #4
   1f7ac:	bd30      	pop	{r4, r5, pc}
   1f7ae:	46c0      	nop			(mov r8, r8)
   1f7b0:	20000678 	.word	0x20000678

0001f7b4 <_fclose_r>:
   1f7b4:	b570      	push	{r4, r5, r6, lr}
   1f7b6:	4605      	mov	r5, r0
   1f7b8:	460c      	mov	r4, r1
   1f7ba:	b1d1      	cbz	r1, 1f7f2 <_fclose_r+0x3e>
   1f7bc:	f7ff fcd0 	bl	1f160 <__sfp_lock_acquire>
   1f7c0:	b125      	cbz	r5, 1f7cc <_fclose_r+0x18>
   1f7c2:	69ab      	ldr	r3, [r5, #24]
   1f7c4:	b913      	cbnz	r3, 1f7cc <_fclose_r+0x18>
   1f7c6:	4628      	mov	r0, r5
   1f7c8:	f7ff fd86 	bl	1f2d8 <__sinit>
   1f7cc:	4b22      	ldr	r3, [pc, #136]	(1f858 <_fclose_r+0xa4>)
   1f7ce:	429c      	cmp	r4, r3
   1f7d0:	bf08      	it	eq
   1f7d2:	682c      	ldreq	r4, [r5, #0]
   1f7d4:	d008      	beq.n	1f7e8 <_fclose_r+0x34>
   1f7d6:	4b21      	ldr	r3, [pc, #132]	(1f85c <_fclose_r+0xa8>)
   1f7d8:	429c      	cmp	r4, r3
   1f7da:	bf08      	it	eq
   1f7dc:	686c      	ldreq	r4, [r5, #4]
   1f7de:	d003      	beq.n	1f7e8 <_fclose_r+0x34>
   1f7e0:	4b1f      	ldr	r3, [pc, #124]	(1f860 <_fclose_r+0xac>)
   1f7e2:	429c      	cmp	r4, r3
   1f7e4:	bf08      	it	eq
   1f7e6:	68ac      	ldreq	r4, [r5, #8]
   1f7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1f7ec:	b91b      	cbnz	r3, 1f7f6 <_fclose_r+0x42>
   1f7ee:	f7ff fcb9 	bl	1f164 <__sfp_lock_release>
   1f7f2:	2600      	movs	r6, #0
   1f7f4:	e02d      	b.n	1f852 <_fclose_r+0x9e>
   1f7f6:	4628      	mov	r0, r5
   1f7f8:	4621      	mov	r1, r4
   1f7fa:	f7ff fbfd 	bl	1eff8 <_fflush_r>
   1f7fe:	6b23      	ldr	r3, [r4, #48]
   1f800:	4606      	mov	r6, r0
   1f802:	b13b      	cbz	r3, 1f814 <_fclose_r+0x60>
   1f804:	6a21      	ldr	r1, [r4, #32]
   1f806:	4628      	mov	r0, r5
   1f808:	4798      	blx	r3
   1f80a:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   1f80e:	bf28      	it	cs
   1f810:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
   1f814:	89a3      	ldrh	r3, [r4, #12]
   1f816:	f013 0f80 	tst.w	r3, #128	; 0x80
   1f81a:	d003      	beq.n	1f824 <_fclose_r+0x70>
   1f81c:	6921      	ldr	r1, [r4, #16]
   1f81e:	4628      	mov	r0, r5
   1f820:	f7ff fde0 	bl	1f3e4 <_free_r>
   1f824:	6b61      	ldr	r1, [r4, #52]
   1f826:	b141      	cbz	r1, 1f83a <_fclose_r+0x86>
   1f828:	f104 0344 	add.w	r3, r4, #68	; 0x44
   1f82c:	4299      	cmp	r1, r3
   1f82e:	d002      	beq.n	1f836 <_fclose_r+0x82>
   1f830:	4628      	mov	r0, r5
   1f832:	f7ff fdd7 	bl	1f3e4 <_free_r>
   1f836:	2300      	movs	r3, #0
   1f838:	6363      	str	r3, [r4, #52]
   1f83a:	6ca1      	ldr	r1, [r4, #72]
   1f83c:	b121      	cbz	r1, 1f848 <_fclose_r+0x94>
   1f83e:	4628      	mov	r0, r5
   1f840:	f7ff fdd0 	bl	1f3e4 <_free_r>
   1f844:	2300      	movs	r3, #0
   1f846:	64a3      	str	r3, [r4, #72]
   1f848:	f04f 0300 	mov.w	r3, #0	; 0x0
   1f84c:	81a3      	strh	r3, [r4, #12]
   1f84e:	f7ff fc89 	bl	1f164 <__sfp_lock_release>
   1f852:	4630      	mov	r0, r6
   1f854:	bd70      	pop	{r4, r5, r6, pc}
   1f856:	46c0      	nop			(mov r8, r8)
   1f858:	00021328 	.word	0x00021328
   1f85c:	00021348 	.word	0x00021348
   1f860:	00021368 	.word	0x00021368

0001f864 <fclose>:
   1f864:	b500      	push	{lr}
   1f866:	4b04      	ldr	r3, [pc, #16]	(1f878 <fclose+0x14>)
   1f868:	4601      	mov	r1, r0
   1f86a:	b081      	sub	sp, #4
   1f86c:	6818      	ldr	r0, [r3, #0]
   1f86e:	f7ff ffa1 	bl	1f7b4 <_fclose_r>
   1f872:	b001      	add	sp, #4
   1f874:	bd00      	pop	{pc}
   1f876:	46c0      	nop			(mov r8, r8)
   1f878:	20000044 	.word	0x20000044

0001f87c <_fstat_r>:
   1f87c:	b530      	push	{r4, r5, lr}
   1f87e:	4c08      	ldr	r4, [pc, #32]	(1f8a0 <_fstat_r+0x24>)
   1f880:	2300      	movs	r3, #0
   1f882:	b081      	sub	sp, #4
   1f884:	4605      	mov	r5, r0
   1f886:	4608      	mov	r0, r1
   1f888:	4611      	mov	r1, r2
   1f88a:	6023      	str	r3, [r4, #0]
   1f88c:	f7f5 fd1e 	bl	152cc <_fstat>
   1f890:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f894:	d102      	bne.n	1f89c <_fstat_r+0x20>
   1f896:	6823      	ldr	r3, [r4, #0]
   1f898:	b103      	cbz	r3, 1f89c <_fstat_r+0x20>
   1f89a:	60eb      	str	r3, [r5, #12]
   1f89c:	b001      	add	sp, #4
   1f89e:	bd30      	pop	{r4, r5, pc}
   1f8a0:	20000678 	.word	0x20000678

0001f8a4 <_isatty_r>:
   1f8a4:	b530      	push	{r4, r5, lr}
   1f8a6:	4c08      	ldr	r4, [pc, #32]	(1f8c8 <_isatty_r+0x24>)
   1f8a8:	2300      	movs	r3, #0
   1f8aa:	b081      	sub	sp, #4
   1f8ac:	4605      	mov	r5, r0
   1f8ae:	4608      	mov	r0, r1
   1f8b0:	6023      	str	r3, [r4, #0]
   1f8b2:	f7f5 fd25 	bl	15300 <_isatty>
   1f8b6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f8ba:	d102      	bne.n	1f8c2 <_isatty_r+0x1e>
   1f8bc:	6823      	ldr	r3, [r4, #0]
   1f8be:	b103      	cbz	r3, 1f8c2 <_isatty_r+0x1e>
   1f8c0:	60eb      	str	r3, [r5, #12]
   1f8c2:	b001      	add	sp, #4
   1f8c4:	bd30      	pop	{r4, r5, pc}
   1f8c6:	46c0      	nop			(mov r8, r8)
   1f8c8:	20000678 	.word	0x20000678

0001f8cc <_lseek_r>:
   1f8cc:	b530      	push	{r4, r5, lr}
   1f8ce:	4c09      	ldr	r4, [pc, #36]	(1f8f4 <_lseek_r+0x28>)
   1f8d0:	4605      	mov	r5, r0
   1f8d2:	2000      	movs	r0, #0
   1f8d4:	6020      	str	r0, [r4, #0]
   1f8d6:	b081      	sub	sp, #4
   1f8d8:	4608      	mov	r0, r1
   1f8da:	4611      	mov	r1, r2
   1f8dc:	461a      	mov	r2, r3
   1f8de:	f7f5 fd43 	bl	15368 <_lseek>
   1f8e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f8e6:	d102      	bne.n	1f8ee <_lseek_r+0x22>
   1f8e8:	6823      	ldr	r3, [r4, #0]
   1f8ea:	b103      	cbz	r3, 1f8ee <_lseek_r+0x22>
   1f8ec:	60eb      	str	r3, [r5, #12]
   1f8ee:	b001      	add	sp, #4
   1f8f0:	bd30      	pop	{r4, r5, pc}
   1f8f2:	46c0      	nop			(mov r8, r8)
   1f8f4:	20000678 	.word	0x20000678

0001f8f8 <_read_r>:
   1f8f8:	b530      	push	{r4, r5, lr}
   1f8fa:	4c09      	ldr	r4, [pc, #36]	(1f920 <_read_r+0x28>)
   1f8fc:	4605      	mov	r5, r0
   1f8fe:	2000      	movs	r0, #0
   1f900:	6020      	str	r0, [r4, #0]
   1f902:	b081      	sub	sp, #4
   1f904:	4608      	mov	r0, r1
   1f906:	4611      	mov	r1, r2
   1f908:	461a      	mov	r2, r3
   1f90a:	f7f5 fd49 	bl	153a0 <_read>
   1f90e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f912:	d102      	bne.n	1f91a <_read_r+0x22>
   1f914:	6823      	ldr	r3, [r4, #0]
   1f916:	b103      	cbz	r3, 1f91a <_read_r+0x22>
   1f918:	60eb      	str	r3, [r5, #12]
   1f91a:	b001      	add	sp, #4
   1f91c:	bd30      	pop	{r4, r5, pc}
   1f91e:	46c0      	nop			(mov r8, r8)
   1f920:	20000678 	.word	0x20000678
   1f924:	00000000 	.word	0x00000000

0001f928 <_ZTV6Sensor>:
	...
   1f930:	000059a5 00005975 0001ad2d 00000000     .Y..uY..-.......

0001f940 <_ZTV7Sensors>:
	...
   1f948:	0000641d 000061c5                       .d...a..

0001f950 <_ZZN7SensorsC1EvE4C.23>:
   1f950:	0b0d0e09 0c0f0405 00000a08 00000000     ................

0001f960 <_ZN14Asservissement21nb_ms_between_updatesE>:
   1f960:	00000005 00000000                       ........

0001f968 <_ZTV7Command>:
	...
   1f970:	00007da9 00007d79 0001ad2d 000079fd     .}..y}..-....y..
   1f980:	0001ad2d 0001ad2d 00007a31 00000000     -...-...1z......

0001f990 <_ZTV24CommandTestTournerGauche>:
	...
   1f998:	0001a9a9 0001a971 000080c5 000079fd     ....q........y..
   1f9a8:	000080d9 000080f5 00007a31 00000000     ........1z......

0001f9b8 <_ZTV18CommandTestAvancer>:
	...
   1f9c0:	0001a939 0001a901 00008079 000079fd     9.......y....y..
   1f9d0:	0000808d 000080a9 00007a31 00000000     ........1z......

0001f9e0 <_ZTV15CommandAttendre>:
	...
   1f9e8:	0001a8c9 0001a891 00007ffd 000079fd     .............y..
   1f9f8:	0000801d 00008039 00008055 00000000     ....9...U.......

0001fa08 <_ZTV13CommandVirage>:
	...
   1fa10:	0001a859 0001a821 00008211 000079fd     Y...!........y..
   1fa20:	00007fb5 00007fcd 00007fe5 00000000     ................

0001fa30 <_ZTV18CommandTournerVers>:
	...
   1fa38:	0001a7e9 0001a7b1 000085f9 000079fd     .............y..
   1fa48:	00007f69 00007f85 00007f9d 00000000     i...............

0001fa58 <_ZTV13CommandAllerA>:
	...
   1fa60:	0001a779 0001a741 00008f51 000085c5     y...A...Q.......
   1fa70:	00007f1d 00007f35 00007f4d 00000000     ....5...M.......

0001fa80 <_ZTV18CommandAllerEnArcA>:
	...
   1fa88:	0001a709 0001a6d1 000096c9 000079fd     .............y..
   1fa98:	00007ed1 00007ee9 00007f01 00000000     .~...~..........

0001faa8 <_ZN14PIDFilterAngle2KpE>:
   1faa8:	42960000                                ...B

0001faac <_ZN14PIDFilterAngle2KdE>:
   1faac:	3f000000                                ...?

0001fab0 <_ZN14PIDFilterAngle2KiE>:
   1fab0:	3f333333                                333?

0001fab4 <_ZN17PIDFilterDistance2KpE>:
   1fab4:	3e4ccccd                                ..L>

0001fab8 <_ZN17PIDFilterDistance2KdE>:
   1fab8:	3f333333                                333?

0001fabc <_ZN17PIDFilterDistance2KiE>:
   1fabc:	3ba3d70a                                ...;

0001fac0 <_ZTV12AnalogSensor>:
	...
   1fac8:	0000a915 0000a8dd 0001ad2d 00000000     ........-.......

0001fad8 <_ZTV19CommandCheckCouleur>:
	...
   1fae0:	0001aa89 0001aa51 0000b47d 000079fd     ....Q...}....y..
   1faf0:	0000af65 0000af81 0000af9d 00000000     e...............

0001fb00 <_ZTV29CommandCalibrerCapteurCouleur>:
	...
   1fb08:	0001aa19 0001a9e1 0000b205 000079fd     .............y..
   1fb18:	0000aef1 0000af0d 0000af29 00000000     ........).......

0001fb28 <_ZZN8CapteursC1EvE4C.21>:
   1fb28:	0d0c0b0a 0000000f                       ........

0001fb30 <_ZTV18LigthBarrierSensor>:
	...
   1fb38:	0000c05d 0000c025 0000bf59 00000000     ]...%...Y.......

0001fb48 <_ZTV17LimitSwitchSensor>:
	...
   1fb50:	0000c289 0000c251 0000c1ad 00000000     ....Q...........
   1fb60:	a7c36552 61202c75 746e6176 756f7420     Re..u, avant tou
   1fb70:	63206574 616d6d6f 6e61646e 00212074     te commandant !.
   1fb80:	3a746f47 00000000                       Got:....

0001fb88 <_ZTV11SharpSensor>:
	...
   1fb90:	0000cf81 0000cf49 0000ce09 00000000     ....I...........
   1fba0:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   1fbb0:	65747465 6d657220 27657369 00000000     ette remise'....
   1fbc0:	74696157 20676e69 20726f66 72697427     Waiting for 'tir
   1fbd0:	65747465 6c6e6520 27657665 00000000     ette enleve'....

0001fbe0 <_ZTV16UltrasoundSensor>:
	...
   1fbe8:	0000d761 0000d729 0000d6c1 00000000     a...)...........
   1fbf8:	74696e49 00000000                       Init....

0001fc00 <_ZTV10ActionGoTo>:
	...
   1fc08:	0000f001 0000efc9 0000ee79 00012ff9     ........y..../..
   1fc18:	0000ee41 0000ee5d                       A...]...

0001fc20 <_ZTV4Clap>:
	...
   1fc28:	0000f3d1 0000f399 0000f149 00012ff9     ........I..../..
   1fc38:	00013011 00013049                       .0..I0..

0001fc40 <_ZTV9Krabi2015>:
	...
   1fc48:	0001ab65 0001aaf9 00014c39 00012ff9     e.......9L.../..
   1fc58:	000149d1 00013049 00010595 000104d1     .I..I0..........

0001fc68 <_ZTV17MediumLevelAction>:
	...
   1fc70:	000130a9 00013079 0001ad2d 00012ff9     .0..y0..-..../..
   1fc80:	00013011 00013049                       .0..I0..

0001fc88 <_ZTV19RecalibrerOdometrie>:
	...
   1fc90:	00013a09 000139d1 000131a9 00012ff9     .:...9...1.../..
   1fca0:	00013011 00013049                       .0..I0..

0001fca8 <_ZTV11StrategieV2>:
	...
   1fcb0:	00014761 00014731                       aG..1G..

0001fcb8 <_ZTV11StrategieV3>:
	...
   1fcc0:	0001acf5 0001acbd 00014c39 00012ff9     ........9L.../..
   1fcd0:	000149d1 00013049 0001ad2d 0001ad2d     .I..I0..-...-...
   1fce0:	70616548 646e6120 61747320 63206b63     Heap and stack c
   1fcf0:	696c6c6f 6e6f6973 0000000a              ollision....

0001fcfc <cplus_demangle_builtin_types>:
   1fcfc:	00020c4c 0000000b 00020c4c 0000000b     L.......L.......
   1fd0c:	00000000 00020c58 00000004 00020c60     ....X.......`...
   1fd1c:	00000007 00000007 00020c68 00000004     ........h.......
   1fd2c:	00020c70 00000004 00000000 00020c78     p...........x...
   1fd3c:	00000006 00020c78 00000006 00000008     ....x...........
   1fd4c:	00020c80 0000000b 00020c80 0000000b     ................
   1fd5c:	00000008 00020c8c 00000005 00020c8c     ................
   1fd6c:	00000005 00000008 00020c94 0000000a     ................
   1fd7c:	00020c94 0000000a 00000008 00020ca0     ................
   1fd8c:	0000000d 00020ca0 0000000d 00000000     ................
   1fd9c:	00020cb0 00000003 00020cb0 00000003     ................
   1fdac:	00000001 00020cb4 0000000c 00020cc4     ................
   1fdbc:	00000008 00000002 00000000 00000000     ................
	...
   1fdd8:	00020cd0 00000004 00020cd0 00000004     ................
   1fde8:	00000003 00020cd8 0000000d 00020cd8     ................
   1fdf8:	0000000d 00000004 00020ce8 00000008     ................
   1fe08:	00020ce8 00000008 00000000 00020cf4     ................
   1fe18:	00000011 00020cf4 00000011 00000000     ................
	...
   1fe64:	00020d08 00000005 00020d08 00000005     ................
   1fe74:	00000000 00020d10 0000000e 00020d10     ................
   1fe84:	0000000e 00000000 00000000 00000000     ................
	...
   1fea0:	00020d20 00000004 00020d20 00000004      ....... .......
   1feb0:	00000009 00020d28 00000007 00020c68     ....(.......h...
   1fec0:	00000004 00000000 00020d30 00000009     ........0.......
   1fed0:	00020cd0 00000004 00000005 00020d3c     ............<...
   1fee0:	00000012 00020d3c 00000012 00000006     ....<...........
   1fef0:	00020d50 00000003 00020d50 00000003     P.......P.......
   1ff00:	00000000                                ....

0001ff04 <cplus_demangle_operators>:
   1ff04:	00020d54 00020d58 00000002 00000002     T...X...........
   1ff14:	00020d5c 00020d60 00000001 00000002     \...`...........
   1ff24:	00020d64 00020bf0 00000002 00000002     d...............
   1ff34:	00020d68 00020d6c 00000001 00000001     h...l...........
   1ff44:	00020d70 00020d6c 00000001 00000002     p...l...........
   1ff54:	00020d74 00020d78 00000002 00000000     t...x...........
   1ff64:	00020d7c 00020d80 00000001 00000002     |...............
   1ff74:	00020d84 00020d88 00000001 00000001     ................
   1ff84:	00020d8c 00020d90 00000002 00000002     ................
   1ff94:	00020d94 00020d98 00000008 00000001     ................
   1ffa4:	00020da4 00020da8 00000001 00000001     ................
   1ffb4:	00020dac 00020db0 00000006 00000001     ................
   1ffc4:	00020db8 00020dbc 00000001 00000002     ................
   1ffd4:	00020dc0 00020dc4 00000002 00000002     ................
   1ffe4:	00020dc8 00020dcc 00000001 00000002     ................
   1fff4:	00020dd0 00020dd4 00000002 00000002     ................
   20004:	00020dd8 00020ddc 00000002 00000002     ................
   20014:	00020de0 00020f94 00000001 00000002     ................
   20024:	00020de4 00020a74 00000002 00000002     ....t...........
   20034:	00020de8 00020dec 00000003 00000002     ................
   20044:	00020c7c 00020df0 00000002 00000002     |...............
   20054:	00020df4 00020df8 00000002 00000002     ................
   20064:	00020dfc 00020e00 00000001 00000002     ................
   20074:	00020e04 00020e08 00000002 00000002     ................
   20084:	00020e0c 00020e10 00000002 00000002     ................
   20094:	00020e14 00020e18 00000001 00000002     ................
   200a4:	00020e1c 00020da8 00000001 00000002     ................
   200b4:	00020e20 00020e24 00000002 00000001      ...$...........
   200c4:	00020e28 00020e2c 00000005 00000001     (...,...........
   200d4:	00020e34 00020e38 00000002 00000002     4...8...........
   200e4:	00020d4c 00020e18 00000001 00000001     L...............
   200f4:	00020e3c 00020e40 00000001 00000001     <...@...........
   20104:	00020e44 00020e48 00000003 00000001     D...H...........
   20114:	00020e4c 00020e50 00000002 00000002     L...P...........
   20124:	00020e54 00020e58 00000002 00000002     T...X...........
   20134:	00020ecc 00020e5c 00000001 00000002     ....\...........
   20144:	00020e60 00020e64 00000002 00000002     `...d...........
   20154:	00020e68 00020e6c 00000001 00000002     h...l...........
   20164:	00020e70 00020e74 00000003 00000002     p...t...........
   20174:	00020e78 00020e7c 00000002 00000001     x...|...........
   20184:	00020e80 00020e6c 00000001 00000001     ....l...........
   20194:	00020e84 00020e88 00000002 00000002     ................
   201a4:	00020e8c 00020e90 00000001 00000003     ................
   201b4:	00020e94 00020e98 00000002 00000002     ................
   201c4:	00020e9c 00020ea0 00000003 00000002     ................
   201d4:	00020ea4 00020ea8 00000001 00000002     ................
   201e4:	00020eac 00020eb0 00000002 00000002     ................
   201f4:	00020bec 00020eb4 00000007 00000001     ................
   20204:	00020ebc 00020eb4 00000007 00000001     ................
	...

00020224 <standard_subs>:
   20224:	00000074 00020a64 00000003 00020a64     t...d.......d...
   20234:	00000003 00000000 00000000 00000061     ............a...
   20244:	00020ec0 0000000e 00020ec0 0000000e     ................
   20254:	00020ed0 00000009 00000062 00020edc     ........b.......
   20264:	00000011 00020edc 00000011 00020ef0     ................
   20274:	0000000c 00000073 00020f00 0000000b     ....s...........
   20284:	00020f0c 00000046 00020ef0 0000000c     ....F...........
   20294:	00000069 00020f54 0000000c 00020f64     i...T.......d...
   202a4:	00000031 00020f98 0000000d 0000006f     1...........o...
   202b4:	00020fa8 0000000c 00020fb8 00000031     ............1...
   202c4:	00020fec 0000000d 00000064 00020ffc     ........d.......
   202d4:	0000000d 0002100c 00000032 00021040     ........2...@...
   202e4:	0000000e                                ....

000202e8 <_ZTV6vectorIN6Sensor12OutputSensorEE>:
	...
   202f0:	0001a591 0001a551                       ....Q...

000202f8 <_ZTV6vectorIN17LimitSwitchSensor15LimitSwitchNameEE>:
	...
   20300:	0001a611 0001a5d1                       ........

00020308 <_ZTV6vectorIN18LigthBarrierSensor16LigthBarrierNameEE>:
	...
   20310:	0001a691 0001a651 65727570 72697620     ....Q...pure vir
   20320:	6c617574 74656d20 20646f68 6c6c6163     tual method call
   20330:	000a6465 3a647473 6461623a 7079745f     ed..std::bad_typ
   20340:	00646965 00000000                       eid.....

00020348 <_ZTVSt10bad_typeid>:
   20348:	00000000 00020370 0001b88d 0001b8b5     ....p...........
   20358:	0001b885 00000000                       ........

00020360 <_ZTSSt10bad_typeid>:
   20360:	30317453 5f646162 65707974 00006469     St10bad_typeid..

00020370 <_ZTISt10bad_typeid>:
   20370:	00020458 00020360 0002098c 6d726574     X...`.......term
   20380:	74616e69 61632065 64656c6c 63657220     inate called rec
   20390:	69737275 796c6576 0000000a 6d726574     ursively....term
   203a0:	74616e69 61632065 64656c6c 74666120     inate called aft
   203b0:	74207265 776f7268 20676e69 69206e61     er throwing an i
   203c0:	6174736e 2065636e 2720666f 00000000     nstance of '....
   203d0:	00000a27 68772020 29287461 0020203a     '...  what():  .
   203e0:	6d726574 74616e69 61632065 64656c6c     terminate called
   203f0:	74697720 74756f68 206e6120 69746361      without an acti
   20400:	65206576 70656378 6e6f6974 0000000a     ve exception....
   20410:	3a647473 6461623a 7361635f 00000074     std::bad_cast...

00020420 <_ZTVSt8bad_cast>:
   20420:	00000000 00020444 0001bc89 0001bcb1     ....D...........
   20430:	0001bc81 00000000                       ........

00020438 <_ZTSSt8bad_cast>:
   20438:	62387453 635f6461 00747361              St8bad_cast.

00020444 <_ZTISt8bad_cast>:
   20444:	00020458 00020438 0002098c              X...8.......

00020450 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   20450:	00000000 000204a8 0001bdc1 0001bde9     ................
   20460:	0001c045 0001c049 0001bfad 0001bf09     E...I...........
   20470:	0001bccd 0001bcf5 0001bd89 00000000     ................

00020480 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   20480:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   20490:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   204a0:	456f666e 00000000                       nfoE....

000204a8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   204a8:	00020458 00020480 000209ec 00000000     X...............

000204b8 <_ZTVN10__cxxabiv123__fundamental_type_infoE>:
   204b8:	00000000 000207a8 0001be05 0001be2d     ............-...
   204c8:	0001c045 0001c049 0001c04d 0001c05d     E...I...M...]...

000204d8 <_ZTIPKe>:
   204d8:	00021058 000207b4 00000001 000204f8     X...............

000204e8 <_ZTIPe>:
   204e8:	00021058 000207b8 00000000 000204f8     X...............

000204f8 <_ZTIe>:
   204f8:	000204c0 000207bc                       ........

00020500 <_ZTIPKd>:
   20500:	00021058 000207c0 00000001 00020520     X........... ...

00020510 <_ZTIPd>:
   20510:	00021058 000207c4 00000000 00020520     X........... ...

00020520 <_ZTId>:
   20520:	000204c0 000207c8                       ........

00020528 <_ZTIPKf>:
   20528:	00021058 000207cc 00000001 00020548     X...........H...

00020538 <_ZTIPf>:
   20538:	00021058 000207d0 00000000 00020548     X...........H...

00020548 <_ZTIf>:
   20548:	000204c0 000207d4                       ........

00020550 <_ZTIPKy>:
   20550:	00021058 000207d8 00000001 00020570     X...........p...

00020560 <_ZTIPy>:
   20560:	00021058 000207dc 00000000 00020570     X...........p...

00020570 <_ZTIy>:
   20570:	000204c0 000207e0                       ........

00020578 <_ZTIPKx>:
   20578:	00021058 000207e4 00000001 00020598     X...............

00020588 <_ZTIPx>:
   20588:	00021058 000207e8 00000000 00020598     X...............

00020598 <_ZTIx>:
   20598:	000204c0 000207ec                       ........

000205a0 <_ZTIPKm>:
   205a0:	00021058 000207f0 00000001 000205c0     X...............

000205b0 <_ZTIPm>:
   205b0:	00021058 000207f4 00000000 000205c0     X...............

000205c0 <_ZTIm>:
   205c0:	000204c0 000207f8                       ........

000205c8 <_ZTIPKl>:
   205c8:	00021058 000207fc 00000001 000205e8     X...............

000205d8 <_ZTIPl>:
   205d8:	00021058 00020800 00000000 000205e8     X...............

000205e8 <_ZTIl>:
   205e8:	000204c0 00020804                       ........

000205f0 <_ZTIPKj>:
   205f0:	00021058 00020808 00000001 00020610     X...............

00020600 <_ZTIPj>:
   20600:	00021058 0002080c 00000000 00020610     X...............

00020610 <_ZTIj>:
   20610:	000204c0 00020810                       ........

00020618 <_ZTIPKi>:
   20618:	00021058 00020814 00000001 00020638     X...........8...

00020628 <_ZTIPi>:
   20628:	00021058 00020818 00000000 00020638     X...........8...

00020638 <_ZTIi>:
   20638:	000204c0 0002081c                       ........

00020640 <_ZTIPKt>:
   20640:	00021058 00020820 00000001 00020660     X... .......`...

00020650 <_ZTIPt>:
   20650:	00021058 00020824 00000000 00020660     X...$.......`...

00020660 <_ZTIt>:
   20660:	000204c0 00020828                       ....(...

00020668 <_ZTIPKs>:
   20668:	00021058 0002082c 00000001 00020688     X...,...........

00020678 <_ZTIPs>:
   20678:	00021058 00020830 00000000 00020688     X...0...........

00020688 <_ZTIs>:
   20688:	000204c0 00020834                       ....4...

00020690 <_ZTIPKh>:
   20690:	00021058 00020838 00000001 000206b0     X...8...........

000206a0 <_ZTIPh>:
   206a0:	00021058 0002083c 00000000 000206b0     X...<...........

000206b0 <_ZTIh>:
   206b0:	000204c0 00020840                       ....@...

000206b8 <_ZTIPKa>:
   206b8:	00021058 00020844 00000001 000206d8     X...D...........

000206c8 <_ZTIPa>:
   206c8:	00021058 00020848 00000000 000206d8     X...H...........

000206d8 <_ZTIa>:
   206d8:	000204c0 0002084c                       ....L...

000206e0 <_ZTIPKc>:
   206e0:	00021058 00020850 00000001 00020700     X...P...........

000206f0 <_ZTIPc>:
   206f0:	00021058 00020854 00000000 00020700     X...T...........

00020700 <_ZTIc>:
   20700:	000204c0 00020858                       ....X...

00020708 <_ZTIPKw>:
   20708:	00021058 0002085c 00000001 00020728     X...\.......(...

00020718 <_ZTIPw>:
   20718:	00021058 00020860 00000000 00020728     X...`.......(...

00020728 <_ZTIw>:
   20728:	000204c0 00020864                       ....d...

00020730 <_ZTIPKb>:
   20730:	00021058 00020868 00000001 00020750     X...h.......P...

00020740 <_ZTIPb>:
   20740:	00021058 0002086c 00000000 00020750     X...l.......P...

00020750 <_ZTIb>:
   20750:	000204c0 00020870                       ....p...

00020758 <_ZTIPKv>:
   20758:	00021058 00020874 00000001 00020778     X...t.......x...

00020768 <_ZTIPv>:
   20768:	00021058 00020878 00000000 00020778     X...x.......x...

00020778 <_ZTIv>:
   20778:	000204c0 0002087c                       ....|...

00020780 <_ZTSN10__cxxabiv123__fundamental_type_infoE>:
   20780:	5f30314e 7878635f 76696261 5f333231     N10__cxxabiv123_
   20790:	6e75665f 656d6164 6c61746e 7079745f     _fundamental_typ
   207a0:	6e695f65 00456f66                       e_infoE.

000207a8 <_ZTIN10__cxxabiv123__fundamental_type_infoE>:
   207a8:	00020458 00020780 00020a28              X.......(...

000207b4 <_ZTSPKe>:
   207b4:	00654b50                                PKe.

000207b8 <_ZTSPe>:
   207b8:	00006550                                Pe..

000207bc <_ZTSe>:
   207bc:	00000065                                e...

000207c0 <_ZTSPKd>:
   207c0:	00644b50                                PKd.

000207c4 <_ZTSPd>:
   207c4:	00006450                                Pd..

000207c8 <_ZTSd>:
   207c8:	00000064                                d...

000207cc <_ZTSPKf>:
   207cc:	00664b50                                PKf.

000207d0 <_ZTSPf>:
   207d0:	00006650                                Pf..

000207d4 <_ZTSf>:
   207d4:	00000066                                f...

000207d8 <_ZTSPKy>:
   207d8:	00794b50                                PKy.

000207dc <_ZTSPy>:
   207dc:	00007950                                Py..

000207e0 <_ZTSy>:
   207e0:	00000079                                y...

000207e4 <_ZTSPKx>:
   207e4:	00784b50                                PKx.

000207e8 <_ZTSPx>:
   207e8:	00007850                                Px..

000207ec <_ZTSx>:
   207ec:	00000078                                x...

000207f0 <_ZTSPKm>:
   207f0:	006d4b50                                PKm.

000207f4 <_ZTSPm>:
   207f4:	00006d50                                Pm..

000207f8 <_ZTSm>:
   207f8:	0000006d                                m...

000207fc <_ZTSPKl>:
   207fc:	006c4b50                                PKl.

00020800 <_ZTSPl>:
   20800:	00006c50                                Pl..

00020804 <_ZTSl>:
   20804:	0000006c                                l...

00020808 <_ZTSPKj>:
   20808:	006a4b50                                PKj.

0002080c <_ZTSPj>:
   2080c:	00006a50                                Pj..

00020810 <_ZTSj>:
   20810:	0000006a                                j...

00020814 <_ZTSPKi>:
   20814:	00694b50                                PKi.

00020818 <_ZTSPi>:
   20818:	00006950                                Pi..

0002081c <_ZTSi>:
   2081c:	00000069                                i...

00020820 <_ZTSPKt>:
   20820:	00744b50                                PKt.

00020824 <_ZTSPt>:
   20824:	00007450                                Pt..

00020828 <_ZTSt>:
   20828:	00000074                                t...

0002082c <_ZTSPKs>:
   2082c:	00734b50                                PKs.

00020830 <_ZTSPs>:
   20830:	00007350                                Ps..

00020834 <_ZTSs>:
   20834:	00000073                                s...

00020838 <_ZTSPKh>:
   20838:	00684b50                                PKh.

0002083c <_ZTSPh>:
   2083c:	00006850                                Ph..

00020840 <_ZTSh>:
   20840:	00000068                                h...

00020844 <_ZTSPKa>:
   20844:	00614b50                                PKa.

00020848 <_ZTSPa>:
   20848:	00006150                                Pa..

0002084c <_ZTSa>:
   2084c:	00000061                                a...

00020850 <_ZTSPKc>:
   20850:	00634b50                                PKc.

00020854 <_ZTSPc>:
   20854:	00006350                                Pc..

00020858 <_ZTSc>:
   20858:	00000063                                c...

0002085c <_ZTSPKw>:
   2085c:	00774b50                                PKw.

00020860 <_ZTSPw>:
   20860:	00007750                                Pw..

00020864 <_ZTSw>:
   20864:	00000077                                w...

00020868 <_ZTSPKb>:
   20868:	00624b50                                PKb.

0002086c <_ZTSPb>:
   2086c:	00006250                                Pb..

00020870 <_ZTSb>:
   20870:	00000062                                b...

00020874 <_ZTSPKv>:
   20874:	00764b50                                PKv.

00020878 <_ZTSPv>:
   20878:	00007650                                Pv..

0002087c <_ZTSv>:
   2087c:	00000076 3a647473 6378653a 69747065     v...std::excepti
   2088c:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   2089c:	69747065 00006e6f 00000000              eption......

000208a8 <_ZTVN10__cxxabiv119__foreign_exceptionE>:
   208a8:	00000000 0002092c 0001be9d 0001beb9     ....,...........
   208b8:	0001ad2d 00000000                       -.......

000208c0 <_ZTVN10__cxxabiv115__forced_unwindE>:
   208c0:	00000000 00020954 0001be85 0001becd     ....T...........
   208d0:	0001ad2d 00000000                       -.......

000208d8 <_ZTVSt13bad_exception>:
   208d8:	00000000 00020970 0001be6d 0001bef5     ....p...m.......
   208e8:	0001beb1 00000000                       ........

000208f0 <_ZTVSt9exception>:
   208f0:	00000000 0002098c 0001be55 0001bee1     ........U.......
   20900:	0001bea9 00000000                       ........

00020908 <_ZTSN10__cxxabiv119__foreign_exceptionE>:
   20908:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   20918:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   20928:	00456e6f                                onE.

0002092c <_ZTIN10__cxxabiv119__foreign_exceptionE>:
   2092c:	000209a0 00020908                       ........

00020934 <_ZTSN10__cxxabiv115__forced_unwindE>:
   20934:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   20944:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

00020954 <_ZTIN10__cxxabiv115__forced_unwindE>:
   20954:	000209a0 00020934                       ....4...

0002095c <_ZTSSt13bad_exception>:
   2095c:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2096c:	0000006e                                n...

00020970 <_ZTISt13bad_exception>:
   20970:	00020458 0002095c 0002098c              X...\.......

0002097c <_ZTSSt9exception>:
   2097c:	65397453 70656378 6e6f6974 00000000     St9exception....

0002098c <_ZTISt9exception>:
   2098c:	000209a0 0002097c 00000000              ....|.......

00020998 <_ZTVN10__cxxabiv117__class_type_infoE>:
   20998:	00000000 000209ec 0001bfd9 0001c001     ................
   209a8:	0001c045 0001c049 0001bfad 0001bf09     E...I...........
   209b8:	0001bf4d 0001bf6d 0001bf41 00000000     M...m...A.......

000209c8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   209c8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   209d8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   209e8:	00000045                                E...

000209ec <_ZTIN10__cxxabiv117__class_type_infoE>:
   209ec:	00020458 000209c8 00020a28              X.......(...

000209f8 <_ZTVSt9type_info>:
   209f8:	00000000 00020a28 0001c029 0001c061     ....(...)...a...
   20a08:	0001c045 0001c049 0001c04d 0001c05d     E...I...M...]...

00020a18 <_ZTSSt9type_info>:
   20a18:	74397453 5f657079 6f666e69 00000000     St9type_info....

00020a28 <_ZTISt9type_info>:
   20a28:	000209a0 00020a18 4f4c475f 5f4c4142     ........_GLOBAL_
   20a38:	00000000 6f6e6128 6f6d796e 6e207375     ....(anonymous n
   20a48:	73656d61 65636170 00000029 69727473     amespace)...stri
   20a58:	6c20676e 72657469 00006c61 00647473     ng literal..std.
   20a68:	00003a3a 7272414a 00007961 00005d5b     ::..JArray..[]..
   20a78:	62617476 6620656c 0020726f 20545456     vtable for .VTT 
   20a88:	20726f66 00000000 736e6f63 63757274     for ....construc
   20a98:	6e6f6974 61747620 20656c62 20726f66     tion vtable for 
   20aa8:	00000000 2d6e692d 00000000 65707974     ....-in-....type
   20ab8:	6f666e69 726f6620 00000020 65707974     info for ...type
   20ac8:	6f666e69 6d616e20 6f662065 00002072     info name for ..
   20ad8:	65707974 6f666e69 206e6620 20726f66     typeinfo fn for 
   20ae8:	00000000 2d6e6f6e 74726976 206c6175     ....non-virtual 
   20af8:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   20b08:	6e616972 65722074 6e727574 75687420     riant return thu
   20b18:	74206b6e 0000206f 6176616a 616c4320     nk to ..java Cla
   20b28:	66207373 0020726f 72617567 61762064     ss for .guard va
   20b38:	62616972 6620656c 0020726f 65666572     riable for .refe
   20b48:	636e6572 65742065 726f706d 20797261     rence temporary 
   20b58:	20726f66 00000000 64646968 61206e65     for ....hidden a
   20b68:	7361696c 726f6620 00000020 002a3a3a     lias for ...::*.
   20b78:	0000202c 7265706f 726f7461 00000000     , ..operator....
   20b88:	7265706f 726f7461 00000020 00002029     operator ...) ..
   20b98:	00002820 203a2029 00000028 00006c75      (..) : (...ul..
   20ba8:	00006c6c 006c6c75 736c6166 00000065     ll..ull.false...
   20bb8:	65757274 00000000 6176616a 73657220     true....java res
   20bc8:	6372756f 00002065 73657220 63697274     ource .. restric
   20bd8:	00000074 6c6f7620 6c697461 00000065     t... volatile...
   20be8:	6e6f6320 00007473 00002626 706d6f63      const..&&..comp
   20bf8:	2078656c 00000000 67616d69 72616e69     lex ....imaginar
   20c08:	00002079 626f6c67 64206c61 72747365     y ..global destr
   20c18:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   20c28:	00000000 626f6c67 63206c61 74736e6f     ....global const
   20c38:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   20c48:	00000020 6e676973 63206465 00726168      ...signed char.
   20c58:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   20c68:	72616863 00000000 65747962 00000000     char....byte....
   20c78:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   20c88:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   20c98:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   20ca8:	61686320 00000072 00746e69 69736e75      char...int.unsi
   20cb8:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   20cc8:	64656e67 00000000 676e6f6c 00000000     gned....long....
   20cd8:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   20ce8:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   20cf8:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   20d08:	726f6873 00000074 69736e75 64656e67     short...unsigned
   20d18:	6f687320 00007472 64696f76 00000000      short..void....
   20d28:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   20d38:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   20d48:	6f6c2067 0000676e 002e2e2e 00004e61     g long......aN..
   20d58:	00003d26 00005361 0000003d 00006161     &=..aS..=...aa..
   20d68:	00006461 00000026 00006e61 00006c63     ad..&...an..cl..
   20d78:	00002928 00006d63 0000002c 00006f63     ()..cm..,...co..
   20d88:	0000007e 00005664 00003d2f 00006164     ~...dV../=..da..
   20d98:	656c6564 5d5b6574 00000000 00006564     delete[]....de..
   20da8:	0000002a 00006c64 656c6564 00006574     *...dl..delete..
   20db8:	00007664 0000002f 00004f65 00003d5e     dv../...eO..^=..
   20dc8:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   20dd8:	00006567 00003d3e 00007467 00007869     ge..>=..gt..ix..
   20de8:	0000536c 003d3c3c 00003d3c 0000736c     lS..<<=.<=..ls..
   20df8:	00003c3c 0000746c 0000003c 0000496d     <<..lt..<...mI..
   20e08:	00003d2d 00004c6d 00003d2a 0000696d     -=..mL..*=..mi..
   20e18:	0000002d 00006c6d 00006d6d 00002d2d     -...ml..mm..--..
   20e28:	0000616e 5b77656e 0000005d 0000656e     na..new[]...ne..
   20e38:	00003d21 0000746e 00000021 0000776e     !=..nt..!...nw..
   20e48:	0077656e 0000526f 00003d7c 00006f6f     new.oR..|=..oo..
   20e58:	00007c7c 0000007c 00004c70 00003d2b     ||..|...pL..+=..
   20e68:	00006c70 0000002b 00006d70 002a3e2d     pl..+...pm..->*.
   20e78:	00007070 00002b2b 00007370 00007470     pp..++..ps..pt..
   20e88:	00003e2d 00007571 0000003f 00004d72     ->..qu..?...rM..
   20e98:	00003d25 00005372 003d3e3e 00006d72     %=..rS..>>=.rm..
   20ea8:	00000025 00007372 00003e3e 657a6973     %...rs..>>..size
   20eb8:	0020666f 00007a73 3a647473 6c6c613a     of .sz..std::all
   20ec8:	7461636f 0000726f 6f6c6c61 6f746163     ocator..allocato
   20ed8:	00000072 3a647473 7361623a 735f6369     r...std::basic_s
   20ee8:	6e697274 00000067 69736162 74735f63     tring...basic_st
   20ef8:	676e6972 00000000 3a647473 7274733a     ring....std::str
   20f08:	00676e69 3a647473 7361623a 735f6369     ing.std::basic_s
   20f18:	6e697274 68633c67 202c7261 3a647473     tring<char, std:
   20f28:	6168633a 72745f72 73746961 6168633c     :char_traits<cha
   20f38:	202c3e72 3a647473 6c6c613a 7461636f     r>, std::allocat
   20f48:	633c726f 3e726168 00003e20 3a647473     or<char> >..std:
   20f58:	7473693a 6d616572 00000000 3a647473     :istream....std:
   20f68:	7361623a 695f6369 65727473 633c6d61     :basic_istream<c
   20f78:	2c726168 64747320 68633a3a 745f7261     har, std::char_t
   20f88:	74696172 68633c73 203e7261 0000003e     raits<char> >...
   20f98:	69736162 73695f63 61657274 0000006d     basic_istream...
   20fa8:	3a647473 74736f3a 6d616572 00000000     std::ostream....
   20fb8:	3a647473 7361623a 6f5f6369 65727473     std::basic_ostre
   20fc8:	633c6d61 2c726168 64747320 68633a3a     am<char, std::ch
   20fd8:	745f7261 74696172 68633c73 203e7261     ar_traits<char> 
   20fe8:	0000003e 69736162 736f5f63 61657274     >...basic_ostrea
   20ff8:	0000006d 3a647473 736f693a 61657274     m...std::iostrea
   21008:	0000006d 3a647473 7361623a 695f6369     m...std::basic_i
   21018:	7274736f 3c6d6165 72616863 7473202c     ostream<char, st
   21028:	633a3a64 5f726168 69617274 633c7374     d::char_traits<c
   21038:	3e726168 00003e20 69736162 6f695f63     har> >..basic_io
   21048:	65727473 00006d61                       stream..

00021050 <_ZTVN10__cxxabiv119__pointer_type_infoE>:
   21050:	00000000 0002109c 0001c2a5 0001c2cd     ................
   21060:	0001c25d 0001c049 0001c2fd 0001c05d     ]...I.......]...
   21070:	0001c261 00000000                       a.......

00021078 <_ZTSN10__cxxabiv119__pointer_type_infoE>:
   21078:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   21088:	696f705f 7265746e 7079745f 6e695f65     _pointer_type_in
   21098:	00456f66                                foE.

0002109c <_ZTIN10__cxxabiv119__pointer_type_infoE>:
   2109c:	00020458 00021078 000210f4              X...x.......

000210a8 <_ZTVN10__cxxabiv117__pbase_type_infoE>:
   210a8:	00000000 000210f4 0001c35d 0001c385     ........].......
   210b8:	0001c045 0001c049 0001c2fd 0001c05d     E...I.......]...
   210c8:	0001c2e9 00000000                       ........

000210d0 <_ZTSN10__cxxabiv117__pbase_type_infoE>:
   210d0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   210e0:	6162705f 745f6573 5f657079 6f666e69     _pbase_type_info
   210f0:	00000045                                E...

000210f4 <_ZTIN10__cxxabiv117__pbase_type_infoE>:
   210f4:	00020458 000210d0 00020a28 74727173     X.......(...sqrt
   21104:	00000000                                ....

00021108 <npio2_hw>:
   21108:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   21118:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   21128:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   21138:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   21148:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   21158:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   21168:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   21178:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00021188 <two_over_pi>:
   21188:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   21198:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   211a8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   211b8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   211c8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   211d8:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   211e8:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   211f8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   21208:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   21218:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   21228:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   21238:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   21248:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   21258:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   21268:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   21278:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   21288:	0060e27b 00c08c6b                       {.`.k...

00021290 <init_jk>:
   21290:	00000002 00000003 00000004 00000006     ................

000212a0 <PIo2>:
   212a0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   212b0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   212c0:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   212d0:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

000212e0 <atanhi>:
   212e0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   212f0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00021300 <atanlo>:
   21300:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   21310:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00021320 <_global_impure_ptr>:
   21320:	20000048 00000043                       H.. C...

00021328 <__sf_fake_stdin>:
	...

00021348 <__sf_fake_stdout>:
	...

00021368 <__sf_fake_stderr>:
	...
